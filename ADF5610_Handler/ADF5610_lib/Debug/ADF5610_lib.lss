
ADF5610_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00002d38  00002dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000230  008001ba  008001ba  00002e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000500  00000000  00000000  00002ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd85  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002a31  00000000  00000000  0001117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003273  00000000  00000000  00013bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff8  00000000  00000000  00016e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dad  00000000  00000000  00017e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a10  00000000  00000000  0001abc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  000205d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__dtors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      18:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__vector_16>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_18>
      4c:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__vector_19>
      50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      68:	1e 04       	cpc	r1, r14
      6a:	03 03       	mulsu	r16, r19
      6c:	14 03       	mulsu	r17, r20
      6e:	25 03       	mulsu	r18, r21
      70:	36 03       	mulsu	r19, r22
      72:	47 03       	mulsu	r20, r23
      74:	54 03       	mulsu	r21, r20
      76:	65 03       	mulsu	r22, r21
      78:	76 03       	mulsu	r23, r22
      7a:	87 03       	fmuls	r16, r23
      7c:	98 03       	fmulsu	r17, r16
      7e:	a9 03       	fmulsu	r18, r17
      80:	12 04       	cpc	r1, r2
      82:	12 04       	cpc	r1, r2
      84:	12 04       	cpc	r1, r2
      86:	ba 03       	fmulsu	r19, r18
      88:	cb 03       	fmulsu	r20, r19
      8a:	12 04       	cpc	r1, r2
      8c:	12 04       	cpc	r1, r2
      8e:	12 04       	cpc	r1, r2
      90:	dc 03       	fmulsu	r21, r20
      92:	f0 03       	fmuls	r23, r16
      94:	01 04       	cpc	r0, r1
      96:	ea 04       	cpc	r14, r10
      98:	04 05       	cpc	r16, r4
      9a:	15 05       	cpc	r17, r5
      9c:	d4 06       	cpc	r13, r20
      9e:	d4 06       	cpc	r13, r20
      a0:	b7 05       	cpc	r27, r7
      a2:	d4 06       	cpc	r13, r20
      a4:	d4 06       	cpc	r13, r20
      a6:	d4 06       	cpc	r13, r20
      a8:	d4 06       	cpc	r13, r20
      aa:	d4 06       	cpc	r13, r20
      ac:	d4 06       	cpc	r13, r20
      ae:	d4 06       	cpc	r13, r20
      b0:	d4 06       	cpc	r13, r20
      b2:	d4 06       	cpc	r13, r20
      b4:	d4 06       	cpc	r13, r20
      b6:	d4 06       	cpc	r13, r20
      b8:	e7 05       	cpc	r30, r7
      ba:	02 06       	cpc	r0, r18
      bc:	1d 06       	cpc	r1, r29
      be:	08 00       	.word	0x0008	; ????
      c0:	00 00       	nop
      c2:	be 92       	st	-X, r11
      c4:	24 49       	sbci	r18, 0x94	; 148
      c6:	12 3e       	cpi	r17, 0xE2	; 226
      c8:	ab aa       	std	Y+51, r10	; 0x33
      ca:	aa 2a       	or	r10, r26
      cc:	be cd       	rjmp	.-1156   	; 0xfffffc4a <__eeprom_end+0xff7efc4a>
      ce:	cc cc       	rjmp	.-1640   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      d0:	4c 3e       	cpi	r20, 0xEC	; 236
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	be ab       	std	Y+54, r27	; 0x36
      d8:	aa aa       	std	Y+50, r10	; 0x32
      da:	aa 3e       	cpi	r26, 0xEA	; 234
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	bf 00       	.word	0x00bf	; ????
      e2:	00 00       	nop
      e4:	80 3f       	cpi	r24, 0xF0	; 240
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 08       	sbc	r0, r0
      ec:	41 78       	andi	r20, 0x81	; 129
      ee:	d3 bb       	out	0x13, r29	; 19
      f0:	43 87       	std	Z+11, r20	; 0x0b
      f2:	d1 13       	cpse	r29, r17
      f4:	3d 19       	sub	r19, r13
      f6:	0e 3c       	cpi	r16, 0xCE	; 206
      f8:	c3 bd       	out	0x23, r28	; 35
      fa:	42 82       	std	Z+2, r4	; 0x02
      fc:	ad 2b       	or	r26, r29
      fe:	3e 68       	ori	r19, 0x8E	; 142
     100:	ec 82       	std	Y+4, r14	; 0x04
     102:	76 be       	out	0x36, r7	; 54
     104:	d9 8f       	std	Y+25, r29	; 0x19
     106:	e1 a9       	ldd	r30, Z+49	; 0x31
     108:	3e 4c       	sbci	r19, 0xCE	; 206
     10a:	80 ef       	ldi	r24, 0xF0	; 240
     10c:	ff be       	out	0x3f, r15	; 63
     10e:	01 c4       	rjmp	.+2050   	; 0x912 <__stack+0x13>
     110:	ff 7f       	andi	r31, 0xFF	; 255
     112:	3f 00       	.word	0x003f	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240

00000140 <__trampolines_end>:
     140:	00 00       	nop
     142:	00 08       	sbc	r0, r0
     144:	00 02       	muls	r16, r16
     146:	01 00       	.word	0x0001	; ????
     148:	00 03       	mulsu	r16, r16
     14a:	04 07       	cpc	r16, r20
	...

00000154 <digital_pin_to_bit_mask_PGM>:
     154:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     164:	04 08 10 20                                         ... 

00000168 <digital_pin_to_port_PGM>:
     168:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     178:	03 03 03 03                                         ....

0000017c <port_to_input_PGM>:
     17c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000186 <port_to_output_PGM>:
     186:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000190 <port_to_mode_PGM>:
     190:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000019a <__ctors_start>:
     19a:	43 0a       	sbc	r4, r19
     19c:	9e 0a       	sbc	r9, r30
     19e:	f9 10       	cpse	r15, r9

000001a0 <__ctors_end>:
     1a0:	4a 0a       	sbc	r4, r26
     1a2:	a5 0a       	sbc	r10, r21

000001a4 <__dtors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d8 e0       	ldi	r29, 0x08	; 8
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e8 e3       	ldi	r30, 0x38	; 56
     1b8:	fd e2       	ldi	r31, 0x2D	; 45
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	aa 3b       	cpi	r26, 0xBA	; 186
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	23 e0       	ldi	r18, 0x03	; 3
     1c8:	aa eb       	ldi	r26, 0xBA	; 186
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	aa 3e       	cpi	r26, 0xEA	; 234
     1d2:	b2 07       	cpc	r27, r18
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>

000001d6 <__do_global_ctors>:
     1d6:	10 e0       	ldi	r17, 0x00	; 0
     1d8:	c0 ed       	ldi	r28, 0xD0	; 208
     1da:	d0 e0       	ldi	r29, 0x00	; 0
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <__do_global_ctors+0x10>
     1de:	21 97       	sbiw	r28, 0x01	; 1
     1e0:	fe 01       	movw	r30, r28
     1e2:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__tablejump2__>
     1e6:	cd 3c       	cpi	r28, 0xCD	; 205
     1e8:	d1 07       	cpc	r29, r17
     1ea:	c9 f7       	brne	.-14     	; 0x1de <__do_global_ctors+0x8>
     1ec:	0e 94 27 11 	call	0x224e	; 0x224e <main>
     1f0:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <__do_global_dtors>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <_ZN14ADF5610_DriverD1Ev>:
   else if (a == b)
      return a;
   else if (a > b)
      return CalculateGCD(a-b, b);
   else return CalculateGCD(a, b-a);
}
     1f8:	21 e8       	ldi	r18, 0x81	; 129
     1fa:	31 e0       	ldi	r19, 0x01	; 1
     1fc:	fc 01       	movw	r30, r24
     1fe:	31 83       	std	Z+1, r19	; 0x01
     200:	20 83       	st	Z, r18
     202:	08 95       	ret

00000204 <_ZN14ADF5610_DriverD0Ev>:
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	ec 01       	movw	r28, r24
     20a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN14ADF5610_DriverD1Ev>
     20e:	ce 01       	movw	r24, r28
     210:	0e 94 36 11 	call	0x226c	; 0x226c <_ZdlPv>
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <_Z41__static_initialization_and_destruction_0ii>:
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
     224:	8b 01       	movw	r16, r22
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	39 f4       	brne	.+14     	; 0x238 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     22a:	6f 3f       	cpi	r22, 0xFF	; 255
     22c:	7f 4f       	sbci	r23, 0xFF	; 255
     22e:	21 f4       	brne	.+8      	; 0x238 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     230:	8a eb       	ldi	r24, 0xBA	; 186
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN13SPI_Syn_ClassC1Ev>
     238:	cd 2b       	or	r28, r29
     23a:	39 f4       	brne	.+14     	; 0x24a <_Z41__static_initialization_and_destruction_0ii+0x30>
     23c:	0f 3f       	cpi	r16, 0xFF	; 255
     23e:	1f 4f       	sbci	r17, 0xFF	; 255
     240:	21 f4       	brne	.+8      	; 0x24a <_Z41__static_initialization_and_destruction_0ii+0x30>
     242:	8a eb       	ldi	r24, 0xBA	; 186
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN13SPI_Syn_ClassD1Ev>
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	0f 91       	pop	r16
     252:	08 95       	ret

00000254 <_ZN14ADF5610_DriverC1Ev>:
     254:	fc 01       	movw	r30, r24
     256:	81 e8       	ldi	r24, 0x81	; 129
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	ab ed       	ldi	r26, 0xDB	; 219
     264:	b4 e4       	ldi	r27, 0x44	; 68
     266:	82 83       	std	Z+2, r24	; 0x02
     268:	93 83       	std	Z+3, r25	; 0x03
     26a:	a4 83       	std	Z+4, r26	; 0x04
     26c:	b5 83       	std	Z+5, r27	; 0x05
     26e:	df 01       	movw	r26, r30
     270:	a0 5d       	subi	r26, 0xD0	; 208
     272:	be 4f       	sbci	r27, 0xFE	; 254
     274:	1d 92       	st	X+, r1
     276:	1d 92       	st	X+, r1
     278:	1d 92       	st	X+, r1
     27a:	1c 92       	st	X, r1
     27c:	13 97       	sbiw	r26, 0x03	; 3
     27e:	51 96       	adiw	r26, 0x11	; 17
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	11 96       	adiw	r26, 0x01	; 1
     286:	9c 93       	st	X, r25
     288:	8e 93       	st	-X, r24
     28a:	8a eb       	ldi	r24, 0xBA	; 186
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	97 83       	std	Z+7, r25	; 0x07
     290:	86 83       	std	Z+6, r24	; 0x06
     292:	12 96       	adiw	r26, 0x02	; 2
     294:	1c 92       	st	X, r1
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e8       	ldi	r25, 0x80	; 128
     29a:	a9 e8       	ldi	r26, 0x89	; 137
     29c:	b5 e4       	ldi	r27, 0x45	; 69
     29e:	80 87       	std	Z+8, r24	; 0x08
     2a0:	91 87       	std	Z+9, r25	; 0x09
     2a2:	a2 87       	std	Z+10, r26	; 0x0a
     2a4:	b3 87       	std	Z+11, r27	; 0x0b
     2a6:	89 e2       	ldi	r24, 0x29	; 41
     2a8:	9c e5       	ldi	r25, 0x5C	; 92
     2aa:	a4 e6       	ldi	r26, 0x64	; 100
     2ac:	b2 e4       	ldi	r27, 0x42	; 66
     2ae:	84 87       	std	Z+12, r24	; 0x0c
     2b0:	95 87       	std	Z+13, r25	; 0x0d
     2b2:	a6 87       	std	Z+14, r26	; 0x0e
     2b4:	b7 87       	std	Z+15, r27	; 0x0f
     2b6:	df 01       	movw	r26, r30
     2b8:	a7 5c       	subi	r26, 0xC7	; 199
     2ba:	be 4f       	sbci	r27, 0xFE	; 254
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	60 e2       	ldi	r22, 0x20	; 32
     2c2:	7e e3       	ldi	r23, 0x3E	; 62
     2c4:	4d 93       	st	X+, r20
     2c6:	5d 93       	st	X+, r21
     2c8:	6d 93       	st	X+, r22
     2ca:	7c 93       	st	X, r23
     2cc:	13 97       	sbiw	r26, 0x03	; 3
     2ce:	14 96       	adiw	r26, 0x04	; 4
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	55 e0       	ldi	r21, 0x05	; 5
     2d4:	6b ed       	ldi	r22, 0xDB	; 219
     2d6:	74 e4       	ldi	r23, 0x44	; 68
     2d8:	4d 93       	st	X+, r20
     2da:	5d 93       	st	X+, r21
     2dc:	6d 93       	st	X+, r22
     2de:	7c 93       	st	X, r23
     2e0:	13 97       	sbiw	r26, 0x03	; 3
     2e2:	ea 5a       	subi	r30, 0xAA	; 170
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	10 82       	st	Z, r1
     2e8:	08 95       	ret

000002ea <_ZN14ADF5610_Driver13ShowRegistersEi>:
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	8c 01       	movw	r16, r24
     2f4:	eb 01       	movw	r28, r22
     2f6:	20 97       	sbiw	r28, 0x00	; 0
     2f8:	39 f0       	breq	.+14     	; 0x308 <_ZN14ADF5610_Driver13ShowRegistersEi+0x1e>
     2fa:	5c f1       	brlt	.+86     	; 0x352 <_ZN14ADF5610_Driver13ShowRegistersEi+0x68>
     2fc:	cb 01       	movw	r24, r22
     2fe:	42 97       	sbiw	r24, 0x12	; 18
     300:	02 97       	sbiw	r24, 0x02	; 2
     302:	08 f4       	brcc	.+2      	; 0x306 <_ZN14ADF5610_Driver13ShowRegistersEi+0x1c>
     304:	6f c0       	rjmp	.+222    	; 0x3e4 <_ZN14ADF5610_Driver13ShowRegistersEi+0xfa>
     306:	25 c0       	rjmp	.+74     	; 0x352 <_ZN14ADF5610_Driver13ShowRegistersEi+0x68>
     308:	63 e1       	ldi	r22, 0x13	; 19
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	8c e3       	ldi	r24, 0x3C	; 60
     30e:	93 e0       	ldi	r25, 0x03	; 3
     310:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
     314:	4a e0       	ldi	r20, 0x0A	; 10
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	be 01       	movw	r22, r28
     31a:	8c e3       	ldi	r24, 0x3C	; 60
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN5Print5printEii>
     322:	6f e0       	ldi	r22, 0x0F	; 15
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	8c e3       	ldi	r24, 0x3C	; 60
     328:	93 e0       	ldi	r25, 0x03	; 3
     32a:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
     32e:	24 96       	adiw	r28, 0x04	; 4
     330:	cc 0f       	add	r28, r28
     332:	dd 1f       	adc	r29, r29
     334:	cc 0f       	add	r28, r28
     336:	dd 1f       	adc	r29, r29
     338:	c0 0f       	add	r28, r16
     33a:	d1 1f       	adc	r29, r17
     33c:	48 81       	ld	r20, Y
     33e:	59 81       	ldd	r21, Y+1	; 0x01
     340:	6a 81       	ldd	r22, Y+2	; 0x02
     342:	7b 81       	ldd	r23, Y+3	; 0x03
     344:	20 e1       	ldi	r18, 0x10	; 16
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	8c e3       	ldi	r24, 0x3C	; 60
     34a:	93 e0       	ldi	r25, 0x03	; 3
     34c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print7printlnEmi>
     350:	49 c0       	rjmp	.+146    	; 0x3e4 <_ZN14ADF5610_Driver13ShowRegistersEi+0xfa>
     352:	66 e0       	ldi	r22, 0x06	; 6
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	8c e3       	ldi	r24, 0x3C	; 60
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
     35e:	4a e0       	ldi	r20, 0x0A	; 10
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	be 01       	movw	r22, r28
     364:	8c e3       	ldi	r24, 0x3C	; 60
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN5Print5printEii>
     36c:	6e e0       	ldi	r22, 0x0E	; 14
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	8c e3       	ldi	r24, 0x3C	; 60
     372:	93 e0       	ldi	r25, 0x03	; 3
     374:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
     378:	fe 01       	movw	r30, r28
     37a:	7c 96       	adiw	r30, 0x1c	; 28
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e0 0f       	add	r30, r16
     386:	f1 1f       	adc	r31, r17
     388:	40 81       	ld	r20, Z
     38a:	51 81       	ldd	r21, Z+1	; 0x01
     38c:	62 81       	ldd	r22, Z+2	; 0x02
     38e:	73 81       	ldd	r23, Z+3	; 0x03
     390:	20 e1       	ldi	r18, 0x10	; 16
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	8c e3       	ldi	r24, 0x3C	; 60
     396:	93 e0       	ldi	r25, 0x03	; 3
     398:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5Print5printEmi>
     39c:	62 e1       	ldi	r22, 0x12	; 18
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	8c e3       	ldi	r24, 0x3C	; 60
     3a2:	93 e0       	ldi	r25, 0x03	; 3
     3a4:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
     3a8:	4a e0       	ldi	r20, 0x0A	; 10
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	be 01       	movw	r22, r28
     3ae:	8c e3       	ldi	r24, 0x3C	; 60
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN5Print5printEii>
     3b6:	6e e0       	ldi	r22, 0x0E	; 14
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	8c e3       	ldi	r24, 0x3C	; 60
     3bc:	93 e0       	ldi	r25, 0x03	; 3
     3be:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
     3c2:	24 96       	adiw	r28, 0x04	; 4
     3c4:	cc 0f       	add	r28, r28
     3c6:	dd 1f       	adc	r29, r29
     3c8:	cc 0f       	add	r28, r28
     3ca:	dd 1f       	adc	r29, r29
     3cc:	c0 0f       	add	r28, r16
     3ce:	d1 1f       	adc	r29, r17
     3d0:	48 81       	ld	r20, Y
     3d2:	59 81       	ldd	r21, Y+1	; 0x01
     3d4:	6a 81       	ldd	r22, Y+2	; 0x02
     3d6:	7b 81       	ldd	r23, Y+3	; 0x03
     3d8:	20 e1       	ldi	r18, 0x10	; 16
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	8c e3       	ldi	r24, 0x3C	; 60
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_ZN5Print7printlnEmi>
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	08 95       	ret

000003ee <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>:
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	89 01       	movw	r16, r18
     3fc:	9a 01       	movw	r18, r20
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	44 30       	cpi	r20, 0x04	; 4
     404:	51 05       	cpc	r21, r1
     406:	d4 f4       	brge	.+52     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     408:	fb 01       	movw	r30, r22
     40a:	e4 0f       	add	r30, r20
     40c:	f5 1f       	adc	r31, r21
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	84 1b       	sub	r24, r20
     414:	95 0b       	sbc	r25, r21
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	04 c0       	rjmp	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     428:	f6 94       	lsr	r15
     42a:	e7 94       	ror	r14
     42c:	d7 94       	ror	r13
     42e:	c7 94       	ror	r12
     430:	8a 95       	dec	r24
     432:	d2 f7       	brpl	.-12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     434:	c0 82       	st	Z, r12
     436:	4f 5f       	subi	r20, 0xFF	; 255
     438:	5f 4f       	sbci	r21, 0xFF	; 255
     43a:	e3 cf       	rjmp	.-58     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret

0000044a <_ZN14ADF5610_Driver13ReadRegistersEh>:
     44a:	af 92       	push	r10
     44c:	bf 92       	push	r11
     44e:	cf 92       	push	r12
     450:	df 92       	push	r13
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
     460:	f6 2e       	mov	r15, r22
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	8e 81       	ldd	r24, Y+6	; 0x06
     466:	9f 81       	ldd	r25, Y+7	; 0x07
     468:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN13SPI_Syn_Class5SetCSEb>
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	10 82       	st	Z, r1
     474:	31 96       	adiw	r30, 0x01	; 1
     476:	10 82       	st	Z, r1
     478:	31 96       	adiw	r30, 0x01	; 1
     47a:	f0 82       	st	Z, r15
     47c:	31 96       	adiw	r30, 0x01	; 1
     47e:	10 82       	st	Z, r1
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	10 e0       	ldi	r17, 0x00	; 0
     484:	04 30       	cpi	r16, 0x04	; 4
     486:	11 05       	cpc	r17, r1
     488:	84 f4       	brge	.+32     	; 0x4aa <_ZN14ADF5610_Driver13ReadRegistersEh+0x60>
     48a:	b8 01       	movw	r22, r16
     48c:	6f 5a       	subi	r22, 0xAF	; 175
     48e:	7e 4f       	sbci	r23, 0xFE	; 254
     490:	6c 0f       	add	r22, r28
     492:	7d 1f       	adc	r23, r29
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	8e 81       	ldd	r24, Y+6	; 0x06
     49e:	9f 81       	ldd	r25, Y+7	; 0x07
     4a0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN13SPI_Syn_Class5WriteEPKhl>
     4a4:	0f 5f       	subi	r16, 0xFF	; 255
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
     4a8:	ed cf       	rjmp	.-38     	; 0x484 <_ZN14ADF5610_Driver13ReadRegistersEh+0x3a>
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	8e 81       	ldd	r24, Y+6	; 0x06
     4ae:	9f 81       	ldd	r25, Y+7	; 0x07
     4b0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN13SPI_Syn_Class5SetCSEb>
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	8e 81       	ldd	r24, Y+6	; 0x06
     4b8:	9f 81       	ldd	r25, Y+7	; 0x07
     4ba:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN13SPI_Syn_Class5SetCSEb>
     4be:	8e 01       	movw	r16, r28
     4c0:	07 5b       	subi	r16, 0xB7	; 183
     4c2:	1e 4f       	sbci	r17, 0xFE	; 254
     4c4:	24 e0       	ldi	r18, 0x04	; 4
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	b8 01       	movw	r22, r16
     4ce:	8e 81       	ldd	r24, Y+6	; 0x06
     4d0:	9f 81       	ldd	r25, Y+7	; 0x07
     4d2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZN13SPI_Syn_Class4ReadEPhl>
     4d6:	ef 2d       	mov	r30, r15
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	34 96       	adiw	r30, 0x04	; 4
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	5f 01       	movw	r10, r30
     4e6:	ac 0e       	add	r10, r28
     4e8:	bd 1e       	adc	r11, r29
     4ea:	f5 01       	movw	r30, r10
     4ec:	10 82       	st	Z, r1
     4ee:	11 82       	std	Z+1, r1	; 0x01
     4f0:	12 82       	std	Z+2, r1	; 0x02
     4f2:	13 82       	std	Z+3, r1	; 0x03
     4f4:	f8 01       	movw	r30, r16
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	a2 81       	ldd	r26, Z+2	; 0x02
     4fc:	b3 81       	ldd	r27, Z+3	; 0x03
     4fe:	78 2f       	mov	r23, r24
     500:	66 27       	eor	r22, r22
     502:	55 27       	eor	r21, r21
     504:	44 27       	eor	r20, r20
     506:	8c 01       	movw	r16, r24
     508:	9d 01       	movw	r18, r26
     50a:	00 27       	eor	r16, r16
     50c:	22 27       	eor	r18, r18
     50e:	33 27       	eor	r19, r19
     510:	32 2f       	mov	r19, r18
     512:	21 2f       	mov	r18, r17
     514:	10 2f       	mov	r17, r16
     516:	00 27       	eor	r16, r16
     518:	04 2b       	or	r16, r20
     51a:	15 2b       	or	r17, r21
     51c:	26 2b       	or	r18, r22
     51e:	37 2b       	or	r19, r23
     520:	cb 2e       	mov	r12, r27
     522:	dd 24       	eor	r13, r13
     524:	ee 24       	eor	r14, r14
     526:	ff 24       	eor	r15, r15
     528:	ac 01       	movw	r20, r24
     52a:	bd 01       	movw	r22, r26
     52c:	44 27       	eor	r20, r20
     52e:	55 27       	eor	r21, r21
     530:	77 27       	eor	r23, r23
     532:	45 2f       	mov	r20, r21
     534:	56 2f       	mov	r21, r22
     536:	67 2f       	mov	r22, r23
     538:	77 27       	eor	r23, r23
     53a:	d7 01       	movw	r26, r14
     53c:	c6 01       	movw	r24, r12
     53e:	84 2b       	or	r24, r20
     540:	95 2b       	or	r25, r21
     542:	a6 2b       	or	r26, r22
     544:	b7 2b       	or	r27, r23
     546:	80 2b       	or	r24, r16
     548:	91 2b       	or	r25, r17
     54a:	a2 2b       	or	r26, r18
     54c:	b3 2b       	or	r27, r19
     54e:	68 94       	set
     550:	16 f8       	bld	r1, 6
     552:	b6 95       	lsr	r27
     554:	a7 95       	ror	r26
     556:	97 95       	ror	r25
     558:	87 95       	ror	r24
     55a:	16 94       	lsr	r1
     55c:	d1 f7       	brne	.-12     	; 0x552 <_ZN14ADF5610_Driver13ReadRegistersEh+0x108>
     55e:	be 7f       	andi	r27, 0xFE	; 254
     560:	f5 01       	movw	r30, r10
     562:	80 83       	st	Z, r24
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	a2 83       	std	Z+2, r26	; 0x02
     568:	b3 83       	std	Z+3, r27	; 0x03
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	8e 81       	ldd	r24, Y+6	; 0x06
     56e:	9f 81       	ldd	r25, Y+7	; 0x07
     570:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN13SPI_Syn_Class5SetCSEb>
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	08 95       	ret

0000058a <_ZN14ADF5610_Driver8IsLockedEv>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	8c e0       	ldi	r24, 0x0C	; 12
     592:	0e 94 c2 14 	call	0x2984	; 0x2984 <digitalRead>
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	31 f4       	brne	.+12     	; 0x5a6 <_ZN14ADF5610_Driver8IsLockedEv+0x1c>
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	fe 01       	movw	r30, r28
     59e:	ed 5b       	subi	r30, 0xBD	; 189
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	80 83       	st	Z, r24
     5a4:	1b c0       	rjmp	.+54     	; 0x5dc <_ZN14ADF5610_Driver8IsLockedEv+0x52>
     5a6:	62 e1       	ldi	r22, 0x12	; 18
     5a8:	ce 01       	movw	r24, r28
     5aa:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN14ADF5610_Driver13ReadRegistersEh>
     5ae:	fe 01       	movw	r30, r28
     5b0:	e8 5a       	subi	r30, 0xA8	; 168
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	80 81       	ld	r24, Z
     5b6:	81 ff       	sbrs	r24, 1
     5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <_ZN14ADF5610_Driver8IsLockedEv+0x4a>
     5ba:	82 fd       	sbrc	r24, 2
     5bc:	0b c0       	rjmp	.+22     	; 0x5d4 <_ZN14ADF5610_Driver8IsLockedEv+0x4a>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	e5 51       	subi	r30, 0x15	; 21
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	80 83       	st	Z, r24
     5c6:	6a e1       	ldi	r22, 0x1A	; 26
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	8c e3       	ldi	r24, 0x3C	; 60
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
     5d2:	04 c0       	rjmp	.+8      	; 0x5dc <_ZN14ADF5610_Driver8IsLockedEv+0x52>
     5d4:	fe 01       	movw	r30, r28
     5d6:	ed 5b       	subi	r30, 0xBD	; 189
     5d8:	fe 4f       	sbci	r31, 0xFE	; 254
     5da:	10 82       	st	Z, r1
     5dc:	cd 5b       	subi	r28, 0xBD	; 189
     5de:	de 4f       	sbci	r29, 0xFE	; 254
     5e0:	88 81       	ld	r24, Y
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <_ZN14ADF5610_Driver17InitiateRegistersEv>:
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	29 31       	cpi	r18, 0x19	; 25
     5ee:	31 05       	cpc	r19, r1
     5f0:	0c f0       	brlt	.+2      	; 0x5f4 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xc>
     5f2:	3f c1       	rjmp	.+638    	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     5f4:	27 31       	cpi	r18, 0x17	; 23
     5f6:	31 05       	cpc	r19, r1
     5f8:	08 f0       	brcs	.+2      	; 0x5fc <_ZN14ADF5610_Driver17InitiateRegistersEv+0x14>
     5fa:	14 c1       	rjmp	.+552    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     5fc:	f9 01       	movw	r30, r18
     5fe:	ec 5c       	subi	r30, 0xCC	; 204
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__tablejump2__>
     606:	f9 01       	movw	r30, r18
     608:	f4 96       	adiw	r30, 0x34	; 52
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	e8 0f       	add	r30, r24
     614:	f9 1f       	adc	r31, r25
     616:	42 e0       	ldi	r20, 0x02	; 2
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	40 83       	st	Z, r20
     620:	51 83       	std	Z+1, r21	; 0x01
     622:	62 83       	std	Z+2, r22	; 0x02
     624:	73 83       	std	Z+3, r23	; 0x03
     626:	0a c1       	rjmp	.+532    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     628:	f9 01       	movw	r30, r18
     62a:	f4 96       	adiw	r30, 0x34	; 52
     62c:	ee 0f       	add	r30, r30
     62e:	ff 1f       	adc	r31, r31
     630:	ee 0f       	add	r30, r30
     632:	ff 1f       	adc	r31, r31
     634:	e8 0f       	add	r30, r24
     636:	f9 1f       	adc	r31, r25
     638:	41 e0       	ldi	r20, 0x01	; 1
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	40 83       	st	Z, r20
     642:	51 83       	std	Z+1, r21	; 0x01
     644:	62 83       	std	Z+2, r22	; 0x02
     646:	73 83       	std	Z+3, r23	; 0x03
     648:	f9 c0       	rjmp	.+498    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     64a:	f9 01       	movw	r30, r18
     64c:	f4 96       	adiw	r30, 0x34	; 52
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e8 0f       	add	r30, r24
     658:	f9 1f       	adc	r31, r25
     65a:	41 e3       	ldi	r20, 0x31	; 49
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	40 83       	st	Z, r20
     664:	51 83       	std	Z+1, r21	; 0x01
     666:	62 83       	std	Z+2, r22	; 0x02
     668:	73 83       	std	Z+3, r23	; 0x03
     66a:	e8 c0       	rjmp	.+464    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     66c:	f9 01       	movw	r30, r18
     66e:	f4 96       	adiw	r30, 0x34	; 52
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	43 ea       	ldi	r20, 0xA3	; 163
     67e:	50 e7       	ldi	r21, 0x70	; 112
     680:	6d ef       	ldi	r22, 0xFD	; 253
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	40 83       	st	Z, r20
     686:	51 83       	std	Z+1, r21	; 0x01
     688:	62 83       	std	Z+2, r22	; 0x02
     68a:	73 83       	std	Z+3, r23	; 0x03
     68c:	d7 c0       	rjmp	.+430    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     68e:	f9 01       	movw	r30, r18
     690:	f4 96       	adiw	r30, 0x34	; 52
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e8 0f       	add	r30, r24
     69c:	f9 1f       	adc	r31, r25
     69e:	10 82       	st	Z, r1
     6a0:	11 82       	std	Z+1, r1	; 0x01
     6a2:	12 82       	std	Z+2, r1	; 0x02
     6a4:	13 82       	std	Z+3, r1	; 0x03
     6a6:	ca c0       	rjmp	.+404    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     6a8:	f9 01       	movw	r30, r18
     6aa:	f4 96       	adiw	r30, 0x34	; 52
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e8 0f       	add	r30, r24
     6b6:	f9 1f       	adc	r31, r25
     6b8:	4a e4       	ldi	r20, 0x4A	; 74
     6ba:	5f e2       	ldi	r21, 0x2F	; 47
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	40 83       	st	Z, r20
     6c2:	51 83       	std	Z+1, r21	; 0x01
     6c4:	62 83       	std	Z+2, r22	; 0x02
     6c6:	73 83       	std	Z+3, r23	; 0x03
     6c8:	b9 c0       	rjmp	.+370    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     6ca:	f9 01       	movw	r30, r18
     6cc:	f4 96       	adiw	r30, 0x34	; 52
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	e8 0f       	add	r30, r24
     6d8:	f9 1f       	adc	r31, r25
     6da:	4d e4       	ldi	r20, 0x4D	; 77
     6dc:	51 e2       	ldi	r21, 0x21	; 33
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	40 83       	st	Z, r20
     6e4:	51 83       	std	Z+1, r21	; 0x01
     6e6:	62 83       	std	Z+2, r22	; 0x02
     6e8:	73 83       	std	Z+3, r23	; 0x03
     6ea:	a8 c0       	rjmp	.+336    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     6ec:	f9 01       	movw	r30, r18
     6ee:	f4 96       	adiw	r30, 0x34	; 52
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	e8 0f       	add	r30, r24
     6fa:	f9 1f       	adc	r31, r25
     6fc:	4f ef       	ldi	r20, 0xFF	; 255
     6fe:	5e eb       	ldi	r21, 0xBE	; 190
     700:	69 ec       	ldi	r22, 0xC9	; 201
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	40 83       	st	Z, r20
     706:	51 83       	std	Z+1, r21	; 0x01
     708:	62 83       	std	Z+2, r22	; 0x02
     70a:	73 83       	std	Z+3, r23	; 0x03
     70c:	97 c0       	rjmp	.+302    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     70e:	f9 01       	movw	r30, r18
     710:	f4 96       	adiw	r30, 0x34	; 52
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e8 0f       	add	r30, r24
     71c:	f9 1f       	adc	r31, r25
     71e:	4f ef       	ldi	r20, 0xFF	; 255
     720:	5f e3       	ldi	r21, 0x3F	; 63
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	40 83       	st	Z, r20
     728:	51 83       	std	Z+1, r21	; 0x01
     72a:	62 83       	std	Z+2, r22	; 0x02
     72c:	73 83       	std	Z+3, r23	; 0x03
     72e:	86 c0       	rjmp	.+268    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     730:	f9 01       	movw	r30, r18
     732:	f4 96       	adiw	r30, 0x34	; 52
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	e8 0f       	add	r30, r24
     73e:	f9 1f       	adc	r31, r25
     740:	47 e4       	ldi	r20, 0x47	; 71
     742:	50 e2       	ldi	r21, 0x20	; 32
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	40 83       	st	Z, r20
     74a:	51 83       	std	Z+1, r21	; 0x01
     74c:	62 83       	std	Z+2, r22	; 0x02
     74e:	73 83       	std	Z+3, r23	; 0x03
     750:	75 c0       	rjmp	.+234    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     752:	f9 01       	movw	r30, r18
     754:	f4 96       	adiw	r30, 0x34	; 52
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	e8 0f       	add	r30, r24
     760:	f9 1f       	adc	r31, r25
     762:	41 e6       	ldi	r20, 0x61	; 97
     764:	50 e8       	ldi	r21, 0x80	; 128
     766:	6f e0       	ldi	r22, 0x0F	; 15
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	40 83       	st	Z, r20
     76c:	51 83       	std	Z+1, r21	; 0x01
     76e:	62 83       	std	Z+2, r22	; 0x02
     770:	73 83       	std	Z+3, r23	; 0x03
     772:	64 c0       	rjmp	.+200    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     774:	f9 01       	movw	r30, r18
     776:	f4 96       	adiw	r30, 0x34	; 52
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	e8 0f       	add	r30, r24
     782:	f9 1f       	adc	r31, r25
     784:	41 e8       	ldi	r20, 0x81	; 129
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	40 83       	st	Z, r20
     78e:	51 83       	std	Z+1, r21	; 0x01
     790:	62 83       	std	Z+2, r22	; 0x02
     792:	73 83       	std	Z+3, r23	; 0x03
     794:	53 c0       	rjmp	.+166    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     796:	f9 01       	movw	r30, r18
     798:	f4 96       	adiw	r30, 0x34	; 52
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e8 0f       	add	r30, r24
     7a4:	f9 1f       	adc	r31, r25
     7a6:	40 e2       	ldi	r20, 0x20	; 32
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	40 83       	st	Z, r20
     7b0:	51 83       	std	Z+1, r21	; 0x01
     7b2:	62 83       	std	Z+2, r22	; 0x02
     7b4:	73 83       	std	Z+3, r23	; 0x03
     7b6:	42 c0       	rjmp	.+132    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     7b8:	fc 01       	movw	r30, r24
     7ba:	ec 51       	subi	r30, 0x1C	; 28
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	40 81       	ld	r20, Z
     7c0:	51 81       	ldd	r21, Z+1	; 0x01
     7c2:	62 81       	ldd	r22, Z+2	; 0x02
     7c4:	73 81       	ldd	r23, Z+3	; 0x03
     7c6:	f9 01       	movw	r30, r18
     7c8:	f4 96       	adiw	r30, 0x34	; 52
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	40 83       	st	Z, r20
     7d8:	51 83       	std	Z+1, r21	; 0x01
     7da:	62 83       	std	Z+2, r22	; 0x02
     7dc:	73 83       	std	Z+3, r23	; 0x03
     7de:	2e c0       	rjmp	.+92     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     7e0:	f9 01       	movw	r30, r18
     7e2:	f4 96       	adiw	r30, 0x34	; 52
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	e8 0f       	add	r30, r24
     7ee:	f9 1f       	adc	r31, r25
     7f0:	48 e0       	ldi	r20, 0x08	; 8
     7f2:	5e e8       	ldi	r21, 0x8E	; 142
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	40 83       	st	Z, r20
     7fa:	51 83       	std	Z+1, r21	; 0x01
     7fc:	62 83       	std	Z+2, r22	; 0x02
     7fe:	73 83       	std	Z+3, r23	; 0x03
     800:	1d c0       	rjmp	.+58     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     802:	f9 01       	movw	r30, r18
     804:	f4 96       	adiw	r30, 0x34	; 52
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e8 0f       	add	r30, r24
     810:	f9 1f       	adc	r31, r25
     812:	40 e9       	ldi	r20, 0x90	; 144
     814:	53 e0       	ldi	r21, 0x03	; 3
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	40 83       	st	Z, r20
     81c:	51 83       	std	Z+1, r21	; 0x01
     81e:	62 83       	std	Z+2, r22	; 0x02
     820:	73 83       	std	Z+3, r23	; 0x03
     822:	0c c0       	rjmp	.+24     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     824:	f9 01       	movw	r30, r18
     826:	f4 96       	adiw	r30, 0x34	; 52
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	e8 0f       	add	r30, r24
     832:	f9 1f       	adc	r31, r25
     834:	10 82       	st	Z, r1
     836:	11 82       	std	Z+1, r1	; 0x01
     838:	12 82       	std	Z+2, r1	; 0x02
     83a:	13 82       	std	Z+3, r1	; 0x03
     83c:	f9 01       	movw	r30, r18
     83e:	f4 96       	adiw	r30, 0x34	; 52
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e8 0f       	add	r30, r24
     84a:	f9 1f       	adc	r31, r25
     84c:	40 81       	ld	r20, Z
     84e:	51 81       	ldd	r21, Z+1	; 0x01
     850:	62 81       	ldd	r22, Z+2	; 0x02
     852:	73 81       	ldd	r23, Z+3	; 0x03
     854:	f9 01       	movw	r30, r18
     856:	7c 96       	adiw	r30, 0x1c	; 28
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	e8 0f       	add	r30, r24
     862:	f9 1f       	adc	r31, r25
     864:	40 83       	st	Z, r20
     866:	51 83       	std	Z+1, r21	; 0x01
     868:	62 83       	std	Z+2, r22	; 0x02
     86a:	73 83       	std	Z+3, r23	; 0x03
     86c:	2f 5f       	subi	r18, 0xFF	; 255
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	bd ce       	rjmp	.-646    	; 0x5ec <_ZN14ADF5610_Driver17InitiateRegistersEv+0x4>
     872:	08 95       	ret

00000874 <_ZN14ADF5610_Driver16ReadAllRegistersEv>:
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	8c 01       	movw	r16, r24
     87e:	c0 e0       	ldi	r28, 0x00	; 0
     880:	d0 e0       	ldi	r29, 0x00	; 0
     882:	c4 31       	cpi	r28, 0x14	; 20
     884:	d1 05       	cpc	r29, r1
     886:	34 f4       	brge	.+12     	; 0x894 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x20>
     888:	6c 2f       	mov	r22, r28
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN14ADF5610_Driver13ReadRegistersEh>
     890:	21 96       	adiw	r28, 0x01	; 1
     892:	f7 cf       	rjmp	.-18     	; 0x882 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0xe>
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <_ZN14ADF5610_Driver18CalculateVCOValuesEv>:
     89e:	3f 92       	push	r3
     8a0:	4f 92       	push	r4
     8a2:	5f 92       	push	r5
     8a4:	6f 92       	push	r6
     8a6:	7f 92       	push	r7
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x24>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x26>
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x28>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	8c 01       	movw	r16, r24
     8cc:	fc 01       	movw	r30, r24
     8ce:	ec 5b       	subi	r30, 0xBC	; 188
     8d0:	fe 4f       	sbci	r31, 0xFE	; 254
     8d2:	10 82       	st	Z, r1
     8d4:	11 82       	std	Z+1, r1	; 0x01
     8d6:	12 82       	std	Z+2, r1	; 0x02
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	37 97       	sbiw	r30, 0x07	; 7
     8dc:	c0 80       	ld	r12, Z
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	e2 80       	ldd	r14, Z+2	; 0x02
     8e2:	f3 80       	ldd	r15, Z+3	; 0x03
     8e4:	a7 01       	movw	r20, r14
     8e6:	96 01       	movw	r18, r12
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e2       	ldi	r23, 0x20	; 32
     8ec:	84 e6       	ldi	r24, 0x64	; 100
     8ee:	96 e4       	ldi	r25, 0x46	; 70
     8f0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__divsf3>
     8f4:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <log>
     8f8:	28 e1       	ldi	r18, 0x18	; 24
     8fa:	32 e7       	ldi	r19, 0x72	; 114
     8fc:	41 e3       	ldi	r20, 0x31	; 49
     8fe:	5f e3       	ldi	r21, 0x3F	; 63
     900:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__divsf3>
     904:	0e 94 a0 0c 	call	0x1940	; 0x1940 <floor>
     908:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fixsfsi>
     90c:	27 e0       	ldi	r18, 0x07	; 7
     90e:	32 2e       	mov	r3, r18
     910:	36 1a       	sub	r3, r22
     912:	07 2e       	mov	r0, r23
     914:	00 0c       	add	r0, r0
     916:	88 0b       	sbc	r24, r24
     918:	99 0b       	sbc	r25, r25
     91a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__floatsisf>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e4       	ldi	r25, 0x40	; 64
     92a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <pow>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e2       	ldi	r19, 0x20	; 32
     93e:	44 e6       	ldi	r20, 0x64	; 100
     940:	56 e4       	ldi	r21, 0x46	; 70
     942:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__divsf3>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e2       	ldi	r19, 0x20	; 32
     94a:	44 ee       	ldi	r20, 0xE4	; 228
     94c:	55 e4       	ldi	r21, 0x45	; 69
     94e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
     952:	6b 01       	movw	r12, r22
     954:	7c 01       	movw	r14, r24
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	4a e7       	ldi	r20, 0x7A	; 122
     95c:	55 e4       	ldi	r21, 0x45	; 69
     95e:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	2c f4       	brge	.+10     	; 0x970 <__stack+0x71>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	48 e4       	ldi	r20, 0x48	; 72
     96c:	52 e4       	ldi	r21, 0x42	; 66
     96e:	04 c0       	rjmp	.+8      	; 0x978 <__stack+0x79>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	48 ec       	ldi	r20, 0xC8	; 200
     976:	52 e4       	ldi	r21, 0x42	; 66
     978:	c7 01       	movw	r24, r14
     97a:	b6 01       	movw	r22, r12
     97c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__divsf3>
     980:	2b 01       	movw	r4, r22
     982:	3c 01       	movw	r6, r24
     984:	0e 94 a0 0c 	call	0x1940	; 0x1940 <floor>
     988:	69 83       	std	Y+1, r22	; 0x01
     98a:	7a 83       	std	Y+2, r23	; 0x02
     98c:	8b 83       	std	Y+3, r24	; 0x03
     98e:	9c 83       	std	Y+4, r25	; 0x04
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
     994:	c3 01       	movw	r24, r6
     996:	b2 01       	movw	r22, r4
     998:	0e 94 49 0b 	call	0x1692	; 0x1692 <__subsf3>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e8       	ldi	r20, 0x80	; 128
     9a2:	5b e4       	ldi	r21, 0x4B	; 75
     9a4:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
     9a8:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fixunssfsi>
     9ac:	4b 01       	movw	r8, r22
     9ae:	5c 01       	movw	r10, r24
     9b0:	1e 82       	std	Y+6, r1	; 0x06
     9b2:	1d 82       	std	Y+5, r1	; 0x05
     9b4:	8d 81       	ldd	r24, Y+5	; 0x05
     9b6:	9e 81       	ldd	r25, Y+6	; 0x06
     9b8:	86 31       	cpi	r24, 0x16	; 22
     9ba:	91 05       	cpc	r25, r1
     9bc:	0c f0       	brlt	.+2      	; 0x9c0 <__stack+0xc1>
     9be:	14 c2       	rjmp	.+1064   	; 0xde8 <__stack+0x4e9>
     9c0:	fc 01       	movw	r30, r24
     9c2:	33 97       	sbiw	r30, 0x03	; 3
     9c4:	e4 31       	cpi	r30, 0x14	; 20
     9c6:	f1 05       	cpc	r31, r1
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	ee c1       	rjmp	.+988    	; 0xda8 <__stack+0x4a9>
     9cc:	e5 5b       	subi	r30, 0xB5	; 181
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__tablejump2__>
     9d4:	6d 80       	ldd	r6, Y+5	; 0x05
     9d6:	7e 80       	ldd	r7, Y+6	; 0x06
     9d8:	9c e1       	ldi	r25, 0x1C	; 28
     9da:	69 0e       	add	r6, r25
     9dc:	71 1c       	adc	r7, r1
     9de:	66 0c       	add	r6, r6
     9e0:	77 1c       	adc	r7, r7
     9e2:	66 0c       	add	r6, r6
     9e4:	77 1c       	adc	r7, r7
     9e6:	60 0e       	add	r6, r16
     9e8:	71 1e       	adc	r7, r17
     9ea:	69 81       	ldd	r22, Y+1	; 0x01
     9ec:	7a 81       	ldd	r23, Y+2	; 0x02
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	0e 94 2d 0c 	call	0x185a	; 0x185a <__fixsfsi>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	bb 27       	eor	r27, r27
     9fc:	f3 01       	movw	r30, r6
     9fe:	80 83       	st	Z, r24
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	a2 83       	std	Z+2, r26	; 0x02
     a04:	b3 83       	std	Z+3, r27	; 0x03
     a06:	ea c1       	rjmp	.+980    	; 0xddc <__stack+0x4dd>
     a08:	ed 81       	ldd	r30, Y+5	; 0x05
     a0a:	fe 81       	ldd	r31, Y+6	; 0x06
     a0c:	7c 96       	adiw	r30, 0x1c	; 28
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	e0 0f       	add	r30, r16
     a18:	f1 1f       	adc	r31, r17
     a1a:	d5 01       	movw	r26, r10
     a1c:	c4 01       	movw	r24, r8
     a1e:	bb 27       	eor	r27, r27
     a20:	80 83       	st	Z, r24
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	a2 83       	std	Z+2, r26	; 0x02
     a26:	b3 83       	std	Z+3, r27	; 0x03
     a28:	d9 c1       	rjmp	.+946    	; 0xddc <__stack+0x4dd>
     a2a:	60 e1       	ldi	r22, 0x10	; 16
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN14ADF5610_Driver13ReadRegistersEh>
     a32:	8f e0       	ldi	r24, 0x0F	; 15
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	99 23       	and	r25, r25
     a38:	0c f4       	brge	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	86 c0       	rjmp	.+268    	; 0xb48 <__stack+0x249>
     a3c:	88 30       	cpi	r24, 0x08	; 8
     a3e:	91 05       	cpc	r25, r1
     a40:	0c f4       	brge	.+2      	; 0xa44 <__stack+0x145>
     a42:	5b c0       	rjmp	.+182    	; 0xafa <__stack+0x1fb>
     a44:	f8 01       	movw	r30, r16
     a46:	e0 5b       	subi	r30, 0xB0	; 176
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	40 81       	ld	r20, Z
     a4c:	51 81       	ldd	r21, Z+1	; 0x01
     a4e:	62 81       	ldd	r22, Z+2	; 0x02
     a50:	73 81       	ldd	r23, Z+3	; 0x03
     a52:	9c 01       	movw	r18, r24
     a54:	28 50       	subi	r18, 0x08	; 8
     a56:	31 09       	sbc	r19, r1
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__stack+0x163>
     a5a:	76 95       	lsr	r23
     a5c:	67 95       	ror	r22
     a5e:	57 95       	ror	r21
     a60:	47 95       	ror	r20
     a62:	2a 95       	dec	r18
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__stack+0x15b>
     a66:	40 ff       	sbrs	r20, 0
     a68:	22 c0       	rjmp	.+68     	; 0xaae <__stack+0x1af>
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	08 2e       	mov	r0, r24
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__stack+0x17f>
     a76:	44 0f       	add	r20, r20
     a78:	55 1f       	adc	r21, r21
     a7a:	66 1f       	adc	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__stack+0x177>
     a82:	ed 81       	ldd	r30, Y+5	; 0x05
     a84:	fe 81       	ldd	r31, Y+6	; 0x06
     a86:	7c 96       	adiw	r30, 0x1c	; 28
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	e0 0f       	add	r30, r16
     a92:	f1 1f       	adc	r31, r17
     a94:	40 80       	ld	r4, Z
     a96:	51 80       	ldd	r5, Z+1	; 0x01
     a98:	62 80       	ldd	r6, Z+2	; 0x02
     a9a:	73 80       	ldd	r7, Z+3	; 0x03
     a9c:	44 29       	or	r20, r4
     a9e:	55 29       	or	r21, r5
     aa0:	66 29       	or	r22, r6
     aa2:	77 29       	or	r23, r7
     aa4:	40 83       	st	Z, r20
     aa6:	51 83       	std	Z+1, r21	; 0x01
     aa8:	62 83       	std	Z+2, r22	; 0x02
     aaa:	73 83       	std	Z+3, r23	; 0x03
     aac:	4b c0       	rjmp	.+150    	; 0xb44 <__stack+0x245>
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	08 2e       	mov	r0, r24
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__stack+0x1c3>
     aba:	44 0f       	add	r20, r20
     abc:	55 1f       	adc	r21, r21
     abe:	66 1f       	adc	r22, r22
     ac0:	77 1f       	adc	r23, r23
     ac2:	0a 94       	dec	r0
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__stack+0x1bb>
     ac6:	ed 81       	ldd	r30, Y+5	; 0x05
     ac8:	fe 81       	ldd	r31, Y+6	; 0x06
     aca:	7c 96       	adiw	r30, 0x1c	; 28
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e0 0f       	add	r30, r16
     ad6:	f1 1f       	adc	r31, r17
     ad8:	40 95       	com	r20
     ada:	50 95       	com	r21
     adc:	60 95       	com	r22
     ade:	70 95       	com	r23
     ae0:	40 80       	ld	r4, Z
     ae2:	51 80       	ldd	r5, Z+1	; 0x01
     ae4:	62 80       	ldd	r6, Z+2	; 0x02
     ae6:	73 80       	ldd	r7, Z+3	; 0x03
     ae8:	44 21       	and	r20, r4
     aea:	55 21       	and	r21, r5
     aec:	66 21       	and	r22, r6
     aee:	77 21       	and	r23, r7
     af0:	40 83       	st	Z, r20
     af2:	51 83       	std	Z+1, r21	; 0x01
     af4:	62 83       	std	Z+2, r22	; 0x02
     af6:	73 83       	std	Z+3, r23	; 0x03
     af8:	25 c0       	rjmp	.+74     	; 0xb44 <__stack+0x245>
     afa:	41 e0       	ldi	r20, 0x01	; 1
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	08 2e       	mov	r0, r24
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <__stack+0x20f>
     b06:	44 0f       	add	r20, r20
     b08:	55 1f       	adc	r21, r21
     b0a:	66 1f       	adc	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	0a 94       	dec	r0
     b10:	d2 f7       	brpl	.-12     	; 0xb06 <__stack+0x207>
     b12:	ed 81       	ldd	r30, Y+5	; 0x05
     b14:	fe 81       	ldd	r31, Y+6	; 0x06
     b16:	7c 96       	adiw	r30, 0x1c	; 28
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	e0 0f       	add	r30, r16
     b22:	f1 1f       	adc	r31, r17
     b24:	40 95       	com	r20
     b26:	50 95       	com	r21
     b28:	60 95       	com	r22
     b2a:	70 95       	com	r23
     b2c:	40 80       	ld	r4, Z
     b2e:	51 80       	ldd	r5, Z+1	; 0x01
     b30:	62 80       	ldd	r6, Z+2	; 0x02
     b32:	73 80       	ldd	r7, Z+3	; 0x03
     b34:	44 21       	and	r20, r4
     b36:	55 21       	and	r21, r5
     b38:	66 21       	and	r22, r6
     b3a:	77 21       	and	r23, r7
     b3c:	40 83       	st	Z, r20
     b3e:	51 83       	std	Z+1, r21	; 0x01
     b40:	62 83       	std	Z+2, r22	; 0x02
     b42:	73 83       	std	Z+3, r23	; 0x03
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	77 cf       	rjmp	.-274    	; 0xa36 <__stack+0x137>
     b48:	ed 81       	ldd	r30, Y+5	; 0x05
     b4a:	fe 81       	ldd	r31, Y+6	; 0x06
     b4c:	7c 96       	adiw	r30, 0x1c	; 28
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	e0 0f       	add	r30, r16
     b58:	f1 1f       	adc	r31, r17
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	a2 81       	ldd	r26, Z+2	; 0x02
     b60:	b3 81       	ldd	r27, Z+3	; 0x03
     b62:	90 62       	ori	r25, 0x20	; 32
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	a2 83       	std	Z+2, r26	; 0x02
     b6a:	b3 83       	std	Z+3, r27	; 0x03
     b6c:	37 c1       	rjmp	.+622    	; 0xddc <__stack+0x4dd>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	4a e7       	ldi	r20, 0x7A	; 122
     b74:	55 e4       	ldi	r21, 0x45	; 69
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
     b7e:	88 23       	and	r24, r24
     b80:	9c f4       	brge	.+38     	; 0xba8 <__stack+0x2a9>
     b82:	ed 81       	ldd	r30, Y+5	; 0x05
     b84:	fe 81       	ldd	r31, Y+6	; 0x06
     b86:	7c 96       	adiw	r30, 0x1c	; 28
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	e0 0f       	add	r30, r16
     b92:	f1 1f       	adc	r31, r17
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	a2 81       	ldd	r26, Z+2	; 0x02
     b9a:	b3 81       	ldd	r27, Z+3	; 0x03
     b9c:	a7 7f       	andi	r26, 0xF7	; 247
     b9e:	80 83       	st	Z, r24
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	a2 83       	std	Z+2, r26	; 0x02
     ba4:	b3 83       	std	Z+3, r27	; 0x03
     ba6:	1a c1       	rjmp	.+564    	; 0xddc <__stack+0x4dd>
     ba8:	ed 81       	ldd	r30, Y+5	; 0x05
     baa:	fe 81       	ldd	r31, Y+6	; 0x06
     bac:	7c 96       	adiw	r30, 0x1c	; 28
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	e0 0f       	add	r30, r16
     bb8:	f1 1f       	adc	r31, r17
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	a2 81       	ldd	r26, Z+2	; 0x02
     bc0:	b3 81       	ldd	r27, Z+3	; 0x03
     bc2:	a8 60       	ori	r26, 0x08	; 8
     bc4:	80 83       	st	Z, r24
     bc6:	91 83       	std	Z+1, r25	; 0x01
     bc8:	a2 83       	std	Z+2, r26	; 0x02
     bca:	b3 83       	std	Z+3, r27	; 0x03
     bcc:	07 c1       	rjmp	.+526    	; 0xddc <__stack+0x4dd>
     bce:	f8 01       	movw	r30, r16
     bd0:	ec 57       	subi	r30, 0x7C	; 124
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	a2 81       	ldd	r26, Z+2	; 0x02
     bda:	b3 81       	ldd	r27, Z+3	; 0x03
     bdc:	e0 54       	subi	r30, 0x40	; 64
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	80 83       	st	Z, r24
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	a2 83       	std	Z+2, r26	; 0x02
     be6:	b3 83       	std	Z+3, r27	; 0x03
     be8:	ed 81       	ldd	r30, Y+5	; 0x05
     bea:	fe 81       	ldd	r31, Y+6	; 0x06
     bec:	7c 96       	adiw	r30, 0x1c	; 28
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e0 0f       	add	r30, r16
     bf8:	f1 1f       	adc	r31, r17
     bfa:	80 83       	st	Z, r24
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	a2 83       	std	Z+2, r26	; 0x02
     c00:	b3 83       	std	Z+3, r27	; 0x03
     c02:	ec c0       	rjmp	.+472    	; 0xddc <__stack+0x4dd>
     c04:	ed 81       	ldd	r30, Y+5	; 0x05
     c06:	fe 81       	ldd	r31, Y+6	; 0x06
     c08:	f4 96       	adiw	r30, 0x34	; 52
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e0 0f       	add	r30, r16
     c14:	f1 1f       	adc	r31, r17
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	a2 81       	ldd	r26, Z+2	; 0x02
     c1c:	b3 81       	ldd	r27, Z+3	; 0x03
     c1e:	ed 81       	ldd	r30, Y+5	; 0x05
     c20:	fe 81       	ldd	r31, Y+6	; 0x06
     c22:	7c 96       	adiw	r30, 0x1c	; 28
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	e0 0f       	add	r30, r16
     c2e:	f1 1f       	adc	r31, r17
     c30:	80 83       	st	Z, r24
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	a2 83       	std	Z+2, r26	; 0x02
     c36:	b3 83       	std	Z+3, r27	; 0x03
     c38:	d1 c0       	rjmp	.+418    	; 0xddc <__stack+0x4dd>
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	80 31       	cpi	r24, 0x10	; 16
     c40:	91 05       	cpc	r25, r1
     c42:	0c f0       	brlt	.+2      	; 0xc46 <__stack+0x347>
     c44:	cb c0       	rjmp	.+406    	; 0xddc <__stack+0x4dd>
     c46:	87 30       	cpi	r24, 0x07	; 7
     c48:	91 05       	cpc	r25, r1
     c4a:	0c f0       	brlt	.+2      	; 0xc4e <__stack+0x34f>
     c4c:	58 c0       	rjmp	.+176    	; 0xcfe <__stack+0x3ff>
     c4e:	ac 01       	movw	r20, r24
     c50:	43 50       	subi	r20, 0x03	; 3
     c52:	51 09       	sbc	r21, r1
     c54:	22 e0       	ldi	r18, 0x02	; 2
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <__stack+0x35f>
     c5a:	35 95       	asr	r19
     c5c:	27 95       	ror	r18
     c5e:	4a 95       	dec	r20
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <__stack+0x35b>
     c62:	20 ff       	sbrs	r18, 0
     c64:	24 c0       	rjmp	.+72     	; 0xcae <__stack+0x3af>
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	08 2e       	mov	r0, r24
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <__stack+0x37b>
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	66 1f       	adc	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	0a 94       	dec	r0
     c7c:	d2 f7       	brpl	.-12     	; 0xc72 <__stack+0x373>
     c7e:	2d 81       	ldd	r18, Y+5	; 0x05
     c80:	3e 81       	ldd	r19, Y+6	; 0x06
     c82:	24 5e       	subi	r18, 0xE4	; 228
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	f8 01       	movw	r30, r16
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	40 80       	ld	r4, Z
     c96:	51 80       	ldd	r5, Z+1	; 0x01
     c98:	62 80       	ldd	r6, Z+2	; 0x02
     c9a:	73 80       	ldd	r7, Z+3	; 0x03
     c9c:	44 29       	or	r20, r4
     c9e:	55 29       	or	r21, r5
     ca0:	66 29       	or	r22, r6
     ca2:	77 29       	or	r23, r7
     ca4:	40 83       	st	Z, r20
     ca6:	51 83       	std	Z+1, r21	; 0x01
     ca8:	62 83       	std	Z+2, r22	; 0x02
     caa:	73 83       	std	Z+3, r23	; 0x03
     cac:	7b c0       	rjmp	.+246    	; 0xda4 <__stack+0x4a5>
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	08 2e       	mov	r0, r24
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__stack+0x3c3>
     cba:	44 0f       	add	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	66 1f       	adc	r22, r22
     cc0:	77 1f       	adc	r23, r23
     cc2:	0a 94       	dec	r0
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__stack+0x3bb>
     cc6:	2d 81       	ldd	r18, Y+5	; 0x05
     cc8:	3e 81       	ldd	r19, Y+6	; 0x06
     cca:	24 5e       	subi	r18, 0xE4	; 228
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	f8 01       	movw	r30, r16
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	40 95       	com	r20
     cde:	50 95       	com	r21
     ce0:	60 95       	com	r22
     ce2:	70 95       	com	r23
     ce4:	40 80       	ld	r4, Z
     ce6:	51 80       	ldd	r5, Z+1	; 0x01
     ce8:	62 80       	ldd	r6, Z+2	; 0x02
     cea:	73 80       	ldd	r7, Z+3	; 0x03
     cec:	44 21       	and	r20, r4
     cee:	55 21       	and	r21, r5
     cf0:	66 21       	and	r22, r6
     cf2:	77 21       	and	r23, r7
     cf4:	40 83       	st	Z, r20
     cf6:	51 83       	std	Z+1, r21	; 0x01
     cf8:	62 83       	std	Z+2, r22	; 0x02
     cfa:	73 83       	std	Z+3, r23	; 0x03
     cfc:	53 c0       	rjmp	.+166    	; 0xda4 <__stack+0x4a5>
     cfe:	23 2d       	mov	r18, r3
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	ac 01       	movw	r20, r24
     d04:	47 50       	subi	r20, 0x07	; 7
     d06:	51 09       	sbc	r21, r1
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <__stack+0x40f>
     d0a:	35 95       	asr	r19
     d0c:	27 95       	ror	r18
     d0e:	4a 95       	dec	r20
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <__stack+0x40b>
     d12:	20 ff       	sbrs	r18, 0
     d14:	22 c0       	rjmp	.+68     	; 0xd5a <__stack+0x45b>
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	08 2e       	mov	r0, r24
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <__stack+0x42b>
     d22:	44 0f       	add	r20, r20
     d24:	55 1f       	adc	r21, r21
     d26:	66 1f       	adc	r22, r22
     d28:	77 1f       	adc	r23, r23
     d2a:	0a 94       	dec	r0
     d2c:	d2 f7       	brpl	.-12     	; 0xd22 <__stack+0x423>
     d2e:	ed 81       	ldd	r30, Y+5	; 0x05
     d30:	fe 81       	ldd	r31, Y+6	; 0x06
     d32:	7c 96       	adiw	r30, 0x1c	; 28
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	e0 0f       	add	r30, r16
     d3e:	f1 1f       	adc	r31, r17
     d40:	40 80       	ld	r4, Z
     d42:	51 80       	ldd	r5, Z+1	; 0x01
     d44:	62 80       	ldd	r6, Z+2	; 0x02
     d46:	73 80       	ldd	r7, Z+3	; 0x03
     d48:	44 29       	or	r20, r4
     d4a:	55 29       	or	r21, r5
     d4c:	66 29       	or	r22, r6
     d4e:	77 29       	or	r23, r7
     d50:	40 83       	st	Z, r20
     d52:	51 83       	std	Z+1, r21	; 0x01
     d54:	62 83       	std	Z+2, r22	; 0x02
     d56:	73 83       	std	Z+3, r23	; 0x03
     d58:	25 c0       	rjmp	.+74     	; 0xda4 <__stack+0x4a5>
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	08 2e       	mov	r0, r24
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <__stack+0x46f>
     d66:	44 0f       	add	r20, r20
     d68:	55 1f       	adc	r21, r21
     d6a:	66 1f       	adc	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	0a 94       	dec	r0
     d70:	d2 f7       	brpl	.-12     	; 0xd66 <__stack+0x467>
     d72:	ed 81       	ldd	r30, Y+5	; 0x05
     d74:	fe 81       	ldd	r31, Y+6	; 0x06
     d76:	7c 96       	adiw	r30, 0x1c	; 28
     d78:	ee 0f       	add	r30, r30
     d7a:	ff 1f       	adc	r31, r31
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	e0 0f       	add	r30, r16
     d82:	f1 1f       	adc	r31, r17
     d84:	40 95       	com	r20
     d86:	50 95       	com	r21
     d88:	60 95       	com	r22
     d8a:	70 95       	com	r23
     d8c:	40 80       	ld	r4, Z
     d8e:	51 80       	ldd	r5, Z+1	; 0x01
     d90:	62 80       	ldd	r6, Z+2	; 0x02
     d92:	73 80       	ldd	r7, Z+3	; 0x03
     d94:	44 21       	and	r20, r4
     d96:	55 21       	and	r21, r5
     d98:	66 21       	and	r22, r6
     d9a:	77 21       	and	r23, r7
     d9c:	40 83       	st	Z, r20
     d9e:	51 83       	std	Z+1, r21	; 0x01
     da0:	62 83       	std	Z+2, r22	; 0x02
     da2:	73 83       	std	Z+3, r23	; 0x03
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	4b cf       	rjmp	.-362    	; 0xc3e <__stack+0x33f>
     da8:	ed 81       	ldd	r30, Y+5	; 0x05
     daa:	fe 81       	ldd	r31, Y+6	; 0x06
     dac:	34 96       	adiw	r30, 0x04	; 4
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	e0 0f       	add	r30, r16
     db8:	f1 1f       	adc	r31, r17
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	a2 81       	ldd	r26, Z+2	; 0x02
     dc0:	b3 81       	ldd	r27, Z+3	; 0x03
     dc2:	ed 81       	ldd	r30, Y+5	; 0x05
     dc4:	fe 81       	ldd	r31, Y+6	; 0x06
     dc6:	7c 96       	adiw	r30, 0x1c	; 28
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	e0 0f       	add	r30, r16
     dd2:	f1 1f       	adc	r31, r17
     dd4:	80 83       	st	Z, r24
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	a2 83       	std	Z+2, r26	; 0x02
     dda:	b3 83       	std	Z+3, r27	; 0x03
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	e6 cd       	rjmp	.-1076   	; 0x9b4 <__stack+0xb5>
     de8:	26 96       	adiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	3f 90       	pop	r3
     e16:	08 95       	ret

00000e18 <_ZN14ADF5610_Driver16SetNextFrequencyEv>:
     e18:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN14ADF5610_Driver18CalculateVCOValuesEv>
     e1c:	08 95       	ret

00000e1e <_ZN14ADF5610_Driver6usleepEl>:
	}
	return true;
}
#ifdef ARDUINO_AVR_UNO
void ADF5610_Driver::usleep(long us){
	if (us/1000>1)
     e1e:	40 3d       	cpi	r20, 0xD0	; 208
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	58 07       	cpc	r21, r24
     e24:	61 05       	cpc	r22, r1
     e26:	71 05       	cpc	r23, r1
     e28:	6c f0       	brlt	.+26     	; 0xe44 <_ZN14ADF5610_Driver6usleepEl+0x26>
	{
		delay(us/1000);
     e2a:	cb 01       	movw	r24, r22
     e2c:	ba 01       	movw	r22, r20
     e2e:	28 ee       	ldi	r18, 0xE8	; 232
     e30:	33 e0       	ldi	r19, 0x03	; 3
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__divmodsi4>
     e3a:	ca 01       	movw	r24, r20
     e3c:	b9 01       	movw	r22, r18
     e3e:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>
     e42:	08 95       	ret
	} 
	else
	{
		delay(1);
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>
     e50:	08 95       	ret

00000e52 <_ZN14ADF5610_Driver14WriteRegistersEh>:
#endif

	return is_locked;
}

void  ADF5610_Driver::WriteRegisters(uint8_t index) {
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
  local_index=0;
     e66:	fc 01       	movw	r30, r24
     e68:	e8 5b       	subi	r30, 0xB8	; 184
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	10 82       	st	Z, r1
  buffer32 = 0;
     e6e:	78 97       	sbiw	r30, 0x18	; 24
     e70:	10 82       	st	Z, r1
     e72:	11 82       	std	Z+1, r1	; 0x01
     e74:	12 82       	std	Z+2, r1	; 0x02
     e76:	13 82       	std	Z+3, r1	; 0x03


  //RegAdr = d;
  if (index>19){
     e78:	64 31       	cpi	r22, 0x14	; 20
     e7a:	e0 f0       	brcs	.+56     	; 0xeb4 <_ZN14ADF5610_Driver14WriteRegistersEh+0x62>
    if(index>22){
     e7c:	67 31       	cpi	r22, 0x17	; 23
     e7e:	a0 f0       	brcs	.+40     	; 0xea8 <_ZN14ADF5610_Driver14WriteRegistersEh+0x56>
		if (index>23)
     e80:	68 31       	cpi	r22, 0x18	; 24
     e82:	60 f0       	brcs	.+24     	; 0xe9c <_ZN14ADF5610_Driver14WriteRegistersEh+0x4a>
		{
			if (index==24)
     e84:	68 31       	cpi	r22, 0x18	; 24
     e86:	21 f4       	brne	.+8      	; 0xe90 <_ZN14ADF5610_Driver14WriteRegistersEh+0x3e>
			{
				local_index=4;
     e88:	24 e0       	ldi	r18, 0x04	; 4
     e8a:	78 96       	adiw	r30, 0x18	; 24
     e8c:	20 83       	st	Z, r18
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <_ZN14ADF5610_Driver14WriteRegistersEh+0x6a>
			} 
			else
			{
				 local_index=3;
     e90:	23 e0       	ldi	r18, 0x03	; 3
     e92:	fc 01       	movw	r30, r24
     e94:	e8 5b       	subi	r30, 0xB8	; 184
     e96:	fe 4f       	sbci	r31, 0xFE	; 254
     e98:	20 83       	st	Z, r18
     e9a:	10 c0       	rjmp	.+32     	; 0xebc <_ZN14ADF5610_Driver14WriteRegistersEh+0x6a>
			}
		} 
		else
		{
			 local_index=3;
     e9c:	23 e0       	ldi	r18, 0x03	; 3
     e9e:	fc 01       	movw	r30, r24
     ea0:	e8 5b       	subi	r30, 0xB8	; 184
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	20 83       	st	Z, r18
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <_ZN14ADF5610_Driver14WriteRegistersEh+0x6a>
		}
     
    }else {
		 local_index=5;
     ea8:	25 e0       	ldi	r18, 0x05	; 5
     eaa:	fc 01       	movw	r30, r24
     eac:	e8 5b       	subi	r30, 0xB8	; 184
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	20 83       	st	Z, r18
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <_ZN14ADF5610_Driver14WriteRegistersEh+0x6a>
     
    }
  }else{
    local_index=index;
     eb4:	fc 01       	movw	r30, r24
     eb6:	e8 5b       	subi	r30, 0xB8	; 184
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	60 83       	st	Z, r22
  }
  switch (local_index){
     ebc:	fc 01       	movw	r30, r24
     ebe:	e8 5b       	subi	r30, 0xB8	; 184
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	20 81       	ld	r18, Z
     ec4:	20 51       	subi	r18, 0x10	; 16
     ec6:	24 30       	cpi	r18, 0x04	; 4
     ec8:	08 f4       	brcc	.+2      	; 0xecc <_ZN14ADF5610_Driver14WriteRegistersEh+0x7a>
     eca:	b7 c0       	rjmp	.+366    	; 0x103a <_ZN14ADF5610_Driver14WriteRegistersEh+0x1e8>
     ecc:	e6 2e       	mov	r14, r22
     ece:	ec 01       	movw	r28, r24
	  case 19:
	  	  		  break;
	  default:
	
		
		    spi->SetCS(false);
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	8e 81       	ldd	r24, Y+6	; 0x06
     ed4:	9f 81       	ldd	r25, Y+7	; 0x07
     ed6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN13SPI_Syn_Class5SetCSEb>
		
			  buffer32 =((uint32_t)local_index <<3)|(RegWrite[index]<<8);
     eda:	fe 01       	movw	r30, r28
     edc:	e8 5b       	subi	r30, 0xB8	; 184
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	80 81       	ld	r24, Z
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	aa 1f       	adc	r26, r26
     eee:	bb 1f       	adc	r27, r27
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	aa 1f       	adc	r26, r26
     ef6:	bb 1f       	adc	r27, r27
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	aa 1f       	adc	r26, r26
     efe:	bb 1f       	adc	r27, r27
     f00:	f1 2c       	mov	r15, r1
     f02:	f7 01       	movw	r30, r14
     f04:	7c 96       	adiw	r30, 0x1c	; 28
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	ec 0f       	add	r30, r28
     f10:	fd 1f       	adc	r31, r29
     f12:	40 81       	ld	r20, Z
     f14:	51 81       	ldd	r21, Z+1	; 0x01
     f16:	62 81       	ldd	r22, Z+2	; 0x02
     f18:	73 81       	ldd	r23, Z+3	; 0x03
     f1a:	76 2f       	mov	r23, r22
     f1c:	65 2f       	mov	r22, r21
     f1e:	54 2f       	mov	r21, r20
     f20:	44 27       	eor	r20, r20
     f22:	9a 01       	movw	r18, r20
     f24:	ab 01       	movw	r20, r22
     f26:	28 2b       	or	r18, r24
     f28:	39 2b       	or	r19, r25
     f2a:	4a 2b       	or	r20, r26
     f2c:	5b 2b       	or	r21, r27
     f2e:	fe 01       	movw	r30, r28
     f30:	e0 5d       	subi	r30, 0xD0	; 208
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	20 83       	st	Z, r18
     f36:	31 83       	std	Z+1, r19	; 0x01
     f38:	42 83       	std	Z+2, r20	; 0x02
     f3a:	53 83       	std	Z+3, r21	; 0x03
			  // buffer32 =((uint32_t)vco_index <<25)|(RegWrite[index]<<1);
			  ConvertU32FourByteArray(to_send,buffer32);
     f3c:	be 01       	movw	r22, r28
     f3e:	6f 5a       	subi	r22, 0xAF	; 175
     f40:	7e 4f       	sbci	r23, 0xFE	; 254
     f42:	ce 01       	movw	r24, r28
     f44:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>
			
				 delay(1);
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>
		          //spi->Write(to_send,4);
				      for (int i = 0; i < 4; i++){
     f54:	00 e0       	ldi	r16, 0x00	; 0
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	04 30       	cpi	r16, 0x04	; 4
     f5a:	11 05       	cpc	r17, r1
     f5c:	54 f5       	brge	.+84     	; 0xfb2 <_ZN14ADF5610_Driver14WriteRegistersEh+0x160>
						  dummy_byte=(uint8_t)(buffer32 >> ((3-i) * 8))&0xFF;
     f5e:	fe 01       	movw	r30, r28
     f60:	e0 5d       	subi	r30, 0xD0	; 208
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	40 81       	ld	r20, Z
     f66:	51 81       	ldd	r21, Z+1	; 0x01
     f68:	62 81       	ldd	r22, Z+2	; 0x02
     f6a:	73 81       	ldd	r23, Z+3	; 0x03
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	80 1b       	sub	r24, r16
     f72:	91 0b       	sbc	r25, r17
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	5a 01       	movw	r10, r20
     f82:	6b 01       	movw	r12, r22
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <_ZN14ADF5610_Driver14WriteRegistersEh+0x13c>
     f86:	d6 94       	lsr	r13
     f88:	c7 94       	ror	r12
     f8a:	b7 94       	ror	r11
     f8c:	a7 94       	ror	r10
     f8e:	8a 95       	dec	r24
     f90:	d2 f7       	brpl	.-12     	; 0xf86 <_ZN14ADF5610_Driver14WriteRegistersEh+0x134>
     f92:	be 01       	movw	r22, r28
     f94:	6b 5a       	subi	r22, 0xAB	; 171
     f96:	7e 4f       	sbci	r23, 0xFE	; 254
     f98:	fb 01       	movw	r30, r22
     f9a:	a0 82       	st	Z, r10
					      spi->Write(&dummy_byte);
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	8e 81       	ldd	r24, Y+6	; 0x06
     fa6:	9f 81       	ldd	r25, Y+7	; 0x07
     fa8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN13SPI_Syn_Class5WriteEPKhl>
			  // buffer32 =((uint32_t)vco_index <<25)|(RegWrite[index]<<1);
			  ConvertU32FourByteArray(to_send,buffer32);
			
				 delay(1);
		          //spi->Write(to_send,4);
				      for (int i = 0; i < 4; i++){
     fac:	0f 5f       	subi	r16, 0xFF	; 255
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	d3 cf       	rjmp	.-90     	; 0xf58 <_ZN14ADF5610_Driver14WriteRegistersEh+0x106>
						  dummy_byte=(uint8_t)(buffer32 >> ((3-i) * 8))&0xFF;
					      spi->Write(&dummy_byte);
				      }
		
			 usleep(1);
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN14ADF5610_Driver6usleepEl>
		   spi->SetCS(true);
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
     fc4:	9f 81       	ldd	r25, Y+7	; 0x07
     fc6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN13SPI_Syn_Class5SetCSEb>
		 

		    //Serial.print(received[4], HEX);Serial.print(received[3], HEX); Serial.print(received[2], HEX);Serial.println(received[1], HEX);
		   if(!is_locked){
     fca:	fe 01       	movw	r30, r28
     fcc:	ed 5b       	subi	r30, 0xBD	; 189
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	80 81       	ld	r24, Z
     fd2:	81 11       	cpse	r24, r1
     fd4:	32 c0       	rjmp	.+100    	; 0x103a <_ZN14ADF5610_Driver14WriteRegistersEh+0x1e8>
			   usleep(1);
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN14ADF5610_Driver6usleepEl>
			   ReadRegisters(local_index);
     fe4:	8e 01       	movw	r16, r28
     fe6:	08 5b       	subi	r16, 0xB8	; 184
     fe8:	1e 4f       	sbci	r17, 0xFE	; 254
     fea:	d8 01       	movw	r26, r16
     fec:	6c 91       	ld	r22, X
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN14ADF5610_Driver13ReadRegistersEh>
			   
				   if(RegRead[local_index]!=RegWrite[index]){
     ff4:	d8 01       	movw	r26, r16
     ff6:	ec 91       	ld	r30, X
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	34 96       	adiw	r30, 0x04	; 4
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ec 0f       	add	r30, r28
    1006:	fd 1f       	adc	r31, r29
    1008:	40 81       	ld	r20, Z
    100a:	51 81       	ldd	r21, Z+1	; 0x01
    100c:	62 81       	ldd	r22, Z+2	; 0x02
    100e:	73 81       	ldd	r23, Z+3	; 0x03
    1010:	f7 01       	movw	r30, r14
    1012:	7c 96       	adiw	r30, 0x1c	; 28
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	ec 0f       	add	r30, r28
    101e:	fd 1f       	adc	r31, r29
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	a2 81       	ldd	r26, Z+2	; 0x02
    1026:	b3 81       	ldd	r27, Z+3	; 0x03
    1028:	48 17       	cp	r20, r24
    102a:	59 07       	cpc	r21, r25
    102c:	6a 07       	cpc	r22, r26
    102e:	7b 07       	cpc	r23, r27
    1030:	21 f0       	breq	.+8      	; 0x103a <_ZN14ADF5610_Driver14WriteRegistersEh+0x1e8>
							   ShowRegisters(index);
    1032:	b7 01       	movw	r22, r14
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN14ADF5610_Driver13ShowRegistersEi>

		  break;


  }
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	08 95       	ret

00001050 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>:
    }
    RegWrite[i]=RegIni[i];

  }
}
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	8c 01       	movw	r16, r24
    105e:	eb 01       	movw	r28, r22
  for (int i=k; i<20;i++){
    1060:	c4 31       	cpi	r28, 0x14	; 20
    1062:	d1 05       	cpc	r29, r1
    1064:	fc f4       	brge	.+62     	; 0x10a4 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x54>
    if (i==5){
    1066:	c5 30       	cpi	r28, 0x05	; 5
    1068:	d1 05       	cpc	r29, r1
    106a:	b1 f4       	brne	.+44     	; 0x1098 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>
    106c:	0f 2e       	mov	r0, r31
    106e:	f6 e1       	ldi	r31, 0x16	; 22
    1070:	ef 2e       	mov	r14, r31
    1072:	f1 2c       	mov	r15, r1
    1074:	f0 2d       	mov	r31, r0
      for(int j=22;j>19;j--){
    1076:	84 e1       	ldi	r24, 0x14	; 20
    1078:	e8 16       	cp	r14, r24
    107a:	f1 04       	cpc	r15, r1
    107c:	44 f0       	brlt	.+16     	; 0x108e <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x3e>
        WriteRegisters(j);
    107e:	6e 2d       	mov	r22, r14
    1080:	c8 01       	movw	r24, r16
    1082:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
  }
}
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
  for (int i=k; i<20;i++){
    if (i==5){
      for(int j=22;j>19;j--){
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	e8 1a       	sub	r14, r24
    108a:	f1 08       	sbc	r15, r1
    108c:	f4 cf       	rjmp	.-24     	; 0x1076 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x26>
        WriteRegisters(j);
       
      }
	   WriteRegisters(5);
    108e:	65 e0       	ldi	r22, 0x05	; 5
    1090:	c8 01       	movw	r24, r16
    1092:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x50>

    }else if((i!=4)|(i!=3)){
      WriteRegisters(i);
    1098:	6c 2f       	mov	r22, r28
    109a:	c8 01       	movw	r24, r16
    109c:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
    RegWrite[i]=RegIni[i];

  }
}
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
  for (int i=k; i<20;i++){
    10a0:	21 96       	adiw	r28, 0x01	; 1
    10a2:	de cf       	rjmp	.-68     	; 0x1060 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x10>

    }else if((i!=4)|(i!=3)){
      WriteRegisters(i);
    }
  }
  WriteRegisters(3);
    10a4:	63 e0       	ldi	r22, 0x03	; 3
    10a6:	c8 01       	movw	r24, r16
    10a8:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
  WriteRegisters(4);
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	c8 01       	movw	r24, r16
    10b0:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>

}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	08 95       	ret

000010c2 <_ZN14ADF5610_Driver7InitPLLEv>:
	 InitPLL();
	 CompleteConfigurationFlow(0);


}
bool  ADF5610_Driver::InitPLL(void){
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24

	while((!IsLocked())|((!pll_started)|false)){
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN14ADF5610_Driver8IsLockedEv>
    10ce:	fe 01       	movw	r30, r28
    10d0:	ea 5a       	subi	r30, 0xAA	; 170
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	20 81       	ld	r18, Z
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	92 27       	eor	r25, r18
    10da:	98 17       	cp	r25, r24
    10dc:	68 f1       	brcs	.+90     	; 0x1138 <_ZN14ADF5610_Driver7InitPLLEv+0x76>
		CompleteConfigurationFlow(0);
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	ce 01       	movw	r24, r28
    10e4:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>
		ReadAllRegisters();
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN14ADF5610_Driver16ReadAllRegistersEv>
		pll_started= bitRead(RegRead[1],1)&(bitRead(RegRead[1],0)==0);
    10ee:	4c 89       	ldd	r20, Y+20	; 0x14
    10f0:	5d 89       	ldd	r21, Y+21	; 0x15
    10f2:	6e 89       	ldd	r22, Y+22	; 0x16
    10f4:	7f 89       	ldd	r23, Y+23	; 0x17
    10f6:	db 01       	movw	r26, r22
    10f8:	ca 01       	movw	r24, r20
    10fa:	b6 95       	lsr	r27
    10fc:	a7 95       	ror	r26
    10fe:	97 95       	ror	r25
    1100:	87 95       	ror	r24
    1102:	fe 01       	movw	r30, r28
    1104:	ea 5a       	subi	r30, 0xAA	; 170
    1106:	fe 4f       	sbci	r31, 0xFE	; 254
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	40 fd       	sbrc	r20, 0
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	82 23       	and	r24, r18
    1110:	80 83       	st	Z, r24
		delay(100);
    1112:	64 e6       	ldi	r22, 0x64	; 100
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>
		if (!is_locked)
    111e:	fe 01       	movw	r30, r28
    1120:	ed 5b       	subi	r30, 0xBD	; 189
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	80 81       	ld	r24, Z
    1126:	81 11       	cpse	r24, r1
    1128:	cf cf       	rjmp	.-98     	; 0x10c8 <_ZN14ADF5610_Driver7InitPLLEv+0x6>
		{
			Serial.println("pll not started");
    112a:	64 e2       	ldi	r22, 0x24	; 36
    112c:	71 e0       	ldi	r23, 0x01	; 1
    112e:	8c e3       	ldi	r24, 0x3C	; 60
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
    1136:	c8 cf       	rjmp	.-112    	; 0x10c8 <_ZN14ADF5610_Driver7InitPLLEv+0x6>
		}
	}
	Serial.println("pll locked");
    1138:	64 e3       	ldi	r22, 0x34	; 52
    113a:	71 e0       	ldi	r23, 0x01	; 1
    113c:	8c e3       	ldi	r24, 0x3C	; 60
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
	return pll_started;
    1144:	ca 5a       	subi	r28, 0xAA	; 170
    1146:	de 4f       	sbci	r29, 0xFE	; 254
}
    1148:	88 81       	ld	r24, Y
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <_ZN14ADF5610_Driver4InitEv>:

ADF5610_Driver::~ADF5610_Driver() {
	// TODO Auto-generated destructor stub
}

void ADF5610_Driver::Init(void){
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
	spi=&staticSPI;
    1156:	8a eb       	ldi	r24, 0xBA	; 186
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	9f 83       	std	Y+7, r25	; 0x07
    115c:	8e 83       	std	Y+6, r24	; 0x06
//	spi->Init(SPI_ADF5610_BASE,0);

	//spi->SetCS(true);
	spi->Init();
    115e:	0e 94 b7 0a 	call	0x156e	; 0x156e <_ZN13SPI_Syn_Class4InitEv>

	 InitiateRegisters();
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN14ADF5610_Driver17InitiateRegistersEv>
	 InitPLL();
    1168:	ce 01       	movw	r24, r28
    116a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN14ADF5610_Driver7InitPLLEv>
	 CompleteConfigurationFlow(0);
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	ce 01       	movw	r24, r28
    1174:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>


}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <_ZN14ADF5610_Driver11WriteSubVCOEv>:
  WriteRegisters(8);
  WriteSubVCO();
  WriteRegisters(3);
  WriteRegisters(4);
}
void ADF5610_Driver::WriteSubVCO(void){
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	ec 01       	movw	r28, r24
	WriteRegisters(22);
    1184:	66 e1       	ldi	r22, 0x16	; 22
    1186:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
	WriteRegisters(21);
    118a:	65 e1       	ldi	r22, 0x15	; 21
    118c:	ce 01       	movw	r24, r28
    118e:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
	WriteRegisters(20);
    1192:	64 e1       	ldi	r22, 0x14	; 20
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
	WriteRegisters(5);
    119a:	65 e0       	ldi	r22, 0x05	; 5
    119c:	ce 01       	movw	r24, r28
    119e:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>:
  }
  WriteRegisters(3);
  WriteRegisters(4);

}
void ADF5610_Driver::ShortConfigurationFlow(void){
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
  WriteRegisters(8);
    11ae:	68 e0       	ldi	r22, 0x08	; 8
    11b0:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
  WriteSubVCO();
    11b4:	ce 01       	movw	r24, r28
    11b6:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN14ADF5610_Driver11WriteSubVCOEv>
  WriteRegisters(3);
    11ba:	63 e0       	ldi	r22, 0x03	; 3
    11bc:	ce 01       	movw	r24, r28
    11be:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
  WriteRegisters(4);
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	ce 01       	movw	r24, r28
    11c6:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14ADF5610_Driver14WriteRegistersEh>
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <_ZN14ADF5610_Driver8SelfTestEh>:
   else if (a > b)
      return CalculateGCD(a-b, b);
   else return CalculateGCD(a, b-a);
}

bool	ADF5610_Driver::SelfTest(uint8_t cycles){
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	96 2e       	mov	r9, r22
	dir=1;
    11f2:	fc 01       	movw	r30, r24
    11f4:	ef 5b       	subi	r30, 0xBF	; 191
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
	int errorCounter=0;
    1200:	00 e0       	ldi	r16, 0x00	; 0
    1202:	10 e0       	ldi	r17, 0x00	; 0
	int counter=0;
	while (((lower_limit<=current_frequency)&(current_frequency<=upper_limit))&&(cycles>counter)){
    1204:	6c 85       	ldd	r22, Y+12	; 0x0c
    1206:	7d 85       	ldd	r23, Y+13	; 0x0d
    1208:	8e 85       	ldd	r24, Y+14	; 0x0e
    120a:	9f 85       	ldd	r25, Y+15	; 0x0f
    120c:	ca 80       	ldd	r12, Y+2	; 0x02
    120e:	db 80       	ldd	r13, Y+3	; 0x03
    1210:	ec 80       	ldd	r14, Y+4	; 0x04
    1212:	fd 80       	ldd	r15, Y+5	; 0x05
    1214:	48 84       	ldd	r4, Y+8	; 0x08
    1216:	59 84       	ldd	r5, Y+9	; 0x09
    1218:	6a 84       	ldd	r6, Y+10	; 0x0a
    121a:	7b 84       	ldd	r7, Y+11	; 0x0b
    121c:	bb 24       	eor	r11, r11
    121e:	b3 94       	inc	r11
    1220:	a7 01       	movw	r20, r14
    1222:	96 01       	movw	r18, r12
    1224:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
    1228:	18 16       	cp	r1, r24
    122a:	0c f4       	brge	.+2      	; 0x122e <_ZN14ADF5610_Driver8SelfTestEh+0x5e>
    122c:	b1 2c       	mov	r11, r1
    122e:	aa 24       	eor	r10, r10
    1230:	a3 94       	inc	r10
    1232:	a3 01       	movw	r20, r6
    1234:	92 01       	movw	r18, r4
    1236:	c7 01       	movw	r24, r14
    1238:	b6 01       	movw	r22, r12
    123a:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
    123e:	18 16       	cp	r1, r24
    1240:	0c f4       	brge	.+2      	; 0x1244 <_ZN14ADF5610_Driver8SelfTestEh+0x74>
    1242:	a1 2c       	mov	r10, r1
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	8a 25       	eor	r24, r10
    1248:	8b 15       	cp	r24, r11
    124a:	08 f0       	brcs	.+2      	; 0x124e <_ZN14ADF5610_Driver8SelfTestEh+0x7e>
    124c:	06 c1       	rjmp	.+524    	; 0x145a <_ZN14ADF5610_Driver8SelfTestEh+0x28a>
    124e:	99 20       	and	r9, r9
    1250:	09 f4       	brne	.+2      	; 0x1254 <_ZN14ADF5610_Driver8SelfTestEh+0x84>
    1252:	06 c1       	rjmp	.+524    	; 0x1460 <_ZN14ADF5610_Driver8SelfTestEh+0x290>

		 if(IsLocked()){
    1254:	ce 01       	movw	r24, r28
    1256:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN14ADF5610_Driver8IsLockedEv>
    125a:	f8 2e       	mov	r15, r24
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <_ZN14ADF5610_Driver8SelfTestEh+0x92>
    1260:	95 c0       	rjmp	.+298    	; 0x138c <_ZN14ADF5610_Driver8SelfTestEh+0x1bc>
			 is_locked=true;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	fe 01       	movw	r30, r28
    1266:	ed 5b       	subi	r30, 0xBD	; 189
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	80 83       	st	Z, r24
			 errorCounter=0;
			 current_frequency=target_frequency;
    126c:	36 97       	sbiw	r30, 0x06	; 6
    126e:	c0 80       	ld	r12, Z
    1270:	d1 80       	ldd	r13, Z+1	; 0x01
    1272:	e2 80       	ldd	r14, Z+2	; 0x02
    1274:	f3 80       	ldd	r15, Z+3	; 0x03
    1276:	ca 82       	std	Y+2, r12	; 0x02
    1278:	db 82       	std	Y+3, r13	; 0x03
    127a:	ec 82       	std	Y+4, r14	; 0x04
    127c:	fd 82       	std	Y+5, r15	; 0x05
			  if ((current_frequency>(upper_limit-step))&&(dir==1)){
    127e:	68 85       	ldd	r22, Y+8	; 0x08
    1280:	79 85       	ldd	r23, Y+9	; 0x09
    1282:	8a 85       	ldd	r24, Y+10	; 0x0a
    1284:	9b 85       	ldd	r25, Y+11	; 0x0b
    1286:	34 97       	sbiw	r30, 0x04	; 4
    1288:	40 80       	ld	r4, Z
    128a:	51 80       	ldd	r5, Z+1	; 0x01
    128c:	62 80       	ldd	r6, Z+2	; 0x02
    128e:	73 80       	ldd	r7, Z+3	; 0x03
    1290:	a3 01       	movw	r20, r6
    1292:	92 01       	movw	r18, r4
    1294:	0e 94 49 0b 	call	0x1692	; 0x1692 <__subsf3>
    1298:	9b 01       	movw	r18, r22
    129a:	ac 01       	movw	r20, r24
    129c:	c7 01       	movw	r24, r14
    129e:	b6 01       	movw	r22, r12
    12a0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__gesf2>
    12a4:	18 16       	cp	r1, r24
    12a6:	64 f4       	brge	.+24     	; 0x12c0 <_ZN14ADF5610_Driver8SelfTestEh+0xf0>
    12a8:	fe 01       	movw	r30, r28
    12aa:	ef 5b       	subi	r30, 0xBF	; 191
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	80 81       	ld	r24, Z
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <_ZN14ADF5610_Driver8SelfTestEh+0xf0>


				dir=-1;
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	9f ef       	ldi	r25, 0xFF	; 255
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	80 83       	st	Z, r24
    12be:	1b c0       	rjmp	.+54     	; 0x12f6 <_ZN14ADF5610_Driver8SelfTestEh+0x126>
			  }else if((current_frequency<(lower_limit+step))&&(dir==-1)){
    12c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    12c4:	4e 85       	ldd	r20, Y+14	; 0x0e
    12c6:	5f 85       	ldd	r21, Y+15	; 0x0f
    12c8:	c3 01       	movw	r24, r6
    12ca:	b2 01       	movw	r22, r4
    12cc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__addsf3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
    12dc:	88 23       	and	r24, r24
    12de:	5c f4       	brge	.+22     	; 0x12f6 <_ZN14ADF5610_Driver8SelfTestEh+0x126>
    12e0:	fe 01       	movw	r30, r28
    12e2:	ef 5b       	subi	r30, 0xBF	; 191
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <_ZN14ADF5610_Driver8SelfTestEh+0x126>

				dir=1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24

			  }
			   #ifdef ARDUINO_AVR_UNO
				 Serial.print("Locked at : ");
    12f6:	6f e3       	ldi	r22, 0x3F	; 63
    12f8:	71 e0       	ldi	r23, 0x01	; 1
    12fa:	8c e3       	ldi	r24, 0x3C	; 60
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
				 Serial.print(current_frequency);
    1302:	4a 81       	ldd	r20, Y+2	; 0x02
    1304:	5b 81       	ldd	r21, Y+3	; 0x03
    1306:	6c 81       	ldd	r22, Y+4	; 0x04
    1308:	7d 81       	ldd	r23, Y+5	; 0x05
    130a:	22 e0       	ldi	r18, 0x02	; 2
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8c e3       	ldi	r24, 0x3C	; 60
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN5Print5printEdi>
				 Serial.println(" MHz");
    1316:	6c e4       	ldi	r22, 0x4C	; 76
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	8c e3       	ldi	r24, 0x3C	; 60
    131c:	93 e0       	ldi	r25, 0x03	; 3
    131e:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
				 #else
				 
			   printf("Current frequence: %lf\n",current_frequency);
			   #endif
				target_frequency=current_frequency+(dir*step);
    1322:	4a 80       	ldd	r4, Y+2	; 0x02
    1324:	5b 80       	ldd	r5, Y+3	; 0x03
    1326:	6c 80       	ldd	r6, Y+4	; 0x04
    1328:	7d 80       	ldd	r7, Y+5	; 0x05
    132a:	fe 01       	movw	r30, r28
    132c:	ef 5b       	subi	r30, 0xBF	; 191
    132e:	fe 4f       	sbci	r31, 0xFE	; 254
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	38 97       	sbiw	r30, 0x08	; 8
    1336:	c0 80       	ld	r12, Z
    1338:	d1 80       	ldd	r13, Z+1	; 0x01
    133a:	e2 80       	ldd	r14, Z+2	; 0x02
    133c:	f3 80       	ldd	r15, Z+3	; 0x03
    133e:	07 2e       	mov	r0, r23
    1340:	00 0c       	add	r0, r0
    1342:	88 0b       	sbc	r24, r24
    1344:	99 0b       	sbc	r25, r25
    1346:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__floatsisf>
    134a:	a7 01       	movw	r20, r14
    134c:	96 01       	movw	r18, r12
    134e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
    1352:	9b 01       	movw	r18, r22
    1354:	ac 01       	movw	r20, r24
    1356:	c3 01       	movw	r24, r6
    1358:	b2 01       	movw	r22, r4
    135a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__addsf3>
    135e:	fe 01       	movw	r30, r28
    1360:	e3 5c       	subi	r30, 0xC3	; 195
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	60 83       	st	Z, r22
    1366:	71 83       	std	Z+1, r23	; 0x01
    1368:	82 83       	std	Z+2, r24	; 0x02
    136a:	93 83       	std	Z+3, r25	; 0x03

				SetNextFrequency();
    136c:	ce 01       	movw	r24, r28
    136e:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN14ADF5610_Driver16SetNextFrequencyEv>
				ShortConfigurationFlow();
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>
				usleep(1000);
    1378:	48 ee       	ldi	r20, 0xE8	; 232
    137a:	53 e0       	ldi	r21, 0x03	; 3
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	ce 01       	movw	r24, r28
    1382:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN14ADF5610_Driver6usleepEl>
	int counter=0;
	while (((lower_limit<=current_frequency)&(current_frequency<=upper_limit))&&(cycles>counter)){

		 if(IsLocked()){
			 is_locked=true;
			 errorCounter=0;
    1386:	00 e0       	ldi	r16, 0x00	; 0
    1388:	10 e0       	ldi	r17, 0x00	; 0
    138a:	60 c0       	rjmp	.+192    	; 0x144c <_ZN14ADF5610_Driver8SelfTestEh+0x27c>
				ShortConfigurationFlow();
				usleep(1000);


		 }else{
			 errorCounter++;
    138c:	0f 5f       	subi	r16, 0xFF	; 255
    138e:	1f 4f       	sbci	r17, 0xFF	; 255
			 if(is_locked){
    1390:	fe 01       	movw	r30, r28
    1392:	ed 5b       	subi	r30, 0xBD	; 189
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	80 81       	ld	r24, Z
    1398:	88 23       	and	r24, r24
    139a:	79 f1       	breq	.+94     	; 0x13fa <_ZN14ADF5610_Driver8SelfTestEh+0x22a>
				 is_locked=false;
    139c:	10 82       	st	Z, r1
				 #ifdef ARDUINO_AVR_UNO
				     Serial.println("**************************");
    139e:	61 e5       	ldi	r22, 0x51	; 81
    13a0:	71 e0       	ldi	r23, 0x01	; 1
    13a2:	8c e3       	ldi	r24, 0x3C	; 60
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
				     Serial.println(" ");
    13aa:	6b e7       	ldi	r22, 0x7B	; 123
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	8c e3       	ldi	r24, 0x3C	; 60
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
				     Serial.print("Not Locked at:  ");
    13b6:	6c e6       	ldi	r22, 0x6C	; 108
    13b8:	71 e0       	ldi	r23, 0x01	; 1
    13ba:	8c e3       	ldi	r24, 0x3C	; 60
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
				     Serial.println(current_frequency);
    13c2:	4a 81       	ldd	r20, Y+2	; 0x02
    13c4:	5b 81       	ldd	r21, Y+3	; 0x03
    13c6:	6c 81       	ldd	r22, Y+4	; 0x04
    13c8:	7d 81       	ldd	r23, Y+5	; 0x05
    13ca:	22 e0       	ldi	r18, 0x02	; 2
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8c e3       	ldi	r24, 0x3C	; 60
    13d0:	93 e0       	ldi	r25, 0x03	; 3
    13d2:	0e 94 30 13 	call	0x2660	; 0x2660 <_ZN5Print7printlnEdi>
				     Serial.println(" MHz");
    13d6:	6c e4       	ldi	r22, 0x4C	; 76
    13d8:	71 e0       	ldi	r23, 0x01	; 1
    13da:	8c e3       	ldi	r24, 0x3C	; 60
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
				     Serial.println(" ");
    13e2:	6b e7       	ldi	r22, 0x7B	; 123
    13e4:	71 e0       	ldi	r23, 0x01	; 1
    13e6:	8c e3       	ldi	r24, 0x3C	; 60
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
				     Serial.println("**************************");
    13ee:	61 e5       	ldi	r22, 0x51	; 81
    13f0:	71 e0       	ldi	r23, 0x01	; 1
    13f2:	8c e3       	ldi	r24, 0x3C	; 60
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
				   printf(" MHz\n");
				   printf("**************************\n");
				   #endif
			 }
			//next_frequency=current_frequency;
		   SetNextFrequency();
    13fa:	ce 01       	movw	r24, r28
    13fc:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN14ADF5610_Driver16SetNextFrequencyEv>
		     Serial.print("Not Locked at:  ");
    1400:	6c e6       	ldi	r22, 0x6C	; 108
    1402:	71 e0       	ldi	r23, 0x01	; 1
    1404:	8c e3       	ldi	r24, 0x3C	; 60
    1406:	93 e0       	ldi	r25, 0x03	; 3
    1408:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN5Print5printEPKc>
		     Serial.println(current_frequency);
    140c:	4a 81       	ldd	r20, Y+2	; 0x02
    140e:	5b 81       	ldd	r21, Y+3	; 0x03
    1410:	6c 81       	ldd	r22, Y+4	; 0x04
    1412:	7d 81       	ldd	r23, Y+5	; 0x05
    1414:	22 e0       	ldi	r18, 0x02	; 2
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8c e3       	ldi	r24, 0x3C	; 60
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	0e 94 30 13 	call	0x2660	; 0x2660 <_ZN5Print7printlnEdi>
		   CompleteConfigurationFlow(0);
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	ce 01       	movw	r24, r28
    1426:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>

			for (int var = 1; var < 24; ++var) {
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	88 31       	cpi	r24, 0x18	; 24
    1430:	91 05       	cpc	r25, r1
    1432:	14 f4       	brge	.+4      	; 0x1438 <_ZN14ADF5610_Driver8SelfTestEh+0x268>
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	fb cf       	rjmp	.-10     	; 0x142e <_ZN14ADF5610_Driver8SelfTestEh+0x25e>
			//	ShowRegisters(var);
			}

			usleep(100000);
    1438:	40 ea       	ldi	r20, 0xA0	; 160
    143a:	56 e8       	ldi	r21, 0x86	; 134
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN14ADF5610_Driver6usleepEl>
			if(errorCounter>100){
    1446:	05 36       	cpi	r16, 0x65	; 101
    1448:	11 05       	cpc	r17, r1
    144a:	64 f4       	brge	.+24     	; 0x1464 <_ZN14ADF5610_Driver8SelfTestEh+0x294>
				return false;
			}


		 }
		 delay(1);
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>

bool	ADF5610_Driver::SelfTest(uint8_t cycles){
	dir=1;
	int errorCounter=0;
	int counter=0;
	while (((lower_limit<=current_frequency)&(current_frequency<=upper_limit))&&(cycles>counter)){
    1458:	d5 ce       	rjmp	.-598    	; 0x1204 <_ZN14ADF5610_Driver8SelfTestEh+0x34>


		 }
		 delay(1);
	}
	return true;
    145a:	ff 24       	eor	r15, r15
    145c:	f3 94       	inc	r15
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <_ZN14ADF5610_Driver8SelfTestEh+0x294>
    1460:	ff 24       	eor	r15, r15
    1462:	f3 94       	inc	r15
}
    1464:	8f 2d       	mov	r24, r15
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	7f 90       	pop	r7
    147e:	6f 90       	pop	r6
    1480:	5f 90       	pop	r5
    1482:	4f 90       	pop	r4
    1484:	08 95       	ret

00001486 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev>:
	else
	{
		delay(1);
	}
	
}
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z41__static_initialization_and_destruction_0ii>
    1492:	08 95       	ret

00001494 <_GLOBAL__sub_D__ZN14ADF5610_DriverC2Ev>:
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	7f ef       	ldi	r23, 0xFF	; 255
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z41__static_initialization_and_destruction_0ii>
    14a0:	08 95       	ret

000014a2 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    14a2:	26 e0       	ldi	r18, 0x06	; 6
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	52 ec       	ldi	r21, 0xC2	; 194
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	8c e3       	ldi	r24, 0x3C	; 60
    14ae:	93 e0       	ldi	r25, 0x03	; 3
    14b0:	0e 94 32 10 	call	0x2064	; 0x2064 <_ZN14HardwareSerial5beginEmh>

	
	/* Initializes MCU, drivers and middleware */
void setup(){
	Serial.begin(115200);
	Serial.setTimeout(1000);
    14b4:	48 ee       	ldi	r20, 0xE8	; 232
    14b6:	53 e0       	ldi	r21, 0x03	; 3
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	8c e3       	ldi	r24, 0x3C	; 60
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	0e 94 42 13 	call	0x2684	; 0x2684 <_ZN6Stream10setTimeoutEm>
	#ifdef NOT_SDI
	pinMode(12, INPUT); 
	#else
		pinMode(12, INPUT_PULLUP); 
    14c4:	62 e0       	ldi	r22, 0x02	; 2
    14c6:	8c e0       	ldi	r24, 0x0C	; 12
    14c8:	0e 94 57 14 	call	0x28ae	; 0x28ae <pinMode>
#endif

	adf.Init();
    14cc:	83 ec       	ldi	r24, 0xC3	; 195
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN14ADF5610_Driver4InitEv>
    14d4:	08 95       	ret

000014d6 <loop>:
}
void loop(){
	
	/* Replace with your application code */
	
		adf.SelfTest(1);
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	83 ec       	ldi	r24, 0xC3	; 195
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN14ADF5610_Driver8SelfTestEh>
		Serial.println("is running outside");
    14e0:	65 e8       	ldi	r22, 0x85	; 133
    14e2:	71 e0       	ldi	r23, 0x01	; 1
    14e4:	8c e3       	ldi	r24, 0x3C	; 60
    14e6:	93 e0       	ldi	r25, 0x03	; 3
    14e8:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN5Print7printlnEPKc>
		delay(1000);
    14ec:	68 ee       	ldi	r22, 0xE8	; 232
    14ee:	73 e0       	ldi	r23, 0x03	; 3
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>
		adf.Init();
    14f8:	83 ec       	ldi	r24, 0xC3	; 195
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN14ADF5610_Driver4InitEv>
    1500:	08 95       	ret

00001502 <_Z41__static_initialization_and_destruction_0ii>:

}
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
    150c:	8b 01       	movw	r16, r22
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	39 f4       	brne	.+14     	; 0x1520 <_Z41__static_initialization_and_destruction_0ii+0x1e>
    1512:	6f 3f       	cpi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	21 f4       	brne	.+8      	; 0x1520 <_Z41__static_initialization_and_destruction_0ii+0x1e>



#include <Arduino.h>
#include "ADF5610Driver.h" 
ADF5610_Driver adf;
    1518:	83 ec       	ldi	r24, 0xC3	; 195
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN14ADF5610_DriverC1Ev>
    1520:	cd 2b       	or	r28, r29
    1522:	39 f4       	brne	.+14     	; 0x1532 <_Z41__static_initialization_and_destruction_0ii+0x30>
    1524:	0f 3f       	cpi	r16, 0xFF	; 255
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	21 f4       	brne	.+8      	; 0x1532 <_Z41__static_initialization_and_destruction_0ii+0x30>
    152a:	83 ec       	ldi	r24, 0xC3	; 195
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN14ADF5610_DriverD1Ev>
		adf.SelfTest(1);
		Serial.println("is running outside");
		delay(1000);
		adf.Init();

}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <_GLOBAL__sub_I_adf>:
    153c:	6f ef       	ldi	r22, 0xFF	; 255
    153e:	7f ef       	ldi	r23, 0xFF	; 255
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z41__static_initialization_and_destruction_0ii>
    1548:	08 95       	ret

0000154a <_GLOBAL__sub_D_adf>:
    154a:	6f ef       	ldi	r22, 0xFF	; 255
    154c:	7f ef       	ldi	r23, 0xFF	; 255
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 81 0a 	call	0x1502	; 0x1502 <_Z41__static_initialization_and_destruction_0ii>
    1556:	08 95       	ret

00001558 <_ZN13SPI_Syn_ClassC1Ev>:
        SPI_AVR_EIMSK = interruptSave;
        SREG = sreg;
      } else
      #endif
      {
        SREG = interruptSave;
    1558:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <ptrSPISync+0x1>
    155c:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <ptrSPISync>
    1560:	27 e0       	ldi	r18, 0x07	; 7
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	fc 01       	movw	r30, r24
    1566:	30 87       	std	Z+8, r19	; 0x08
    1568:	27 83       	std	Z+7, r18	; 0x07
    156a:	08 95       	ret

0000156c <_ZN13SPI_Syn_ClassD1Ev>:
    156c:	08 95       	ret

0000156e <_ZN13SPI_Syn_Class4InitEv>:
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	98 87       	std	Y+8, r25	; 0x08
    157a:	8f 83       	std	Y+7, r24	; 0x07
    157c:	62 e0       	ldi	r22, 0x02	; 2
    157e:	8c e0       	ldi	r24, 0x0C	; 12
    1580:	0e 94 57 14 	call	0x28ae	; 0x28ae <pinMode>
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	0e 94 57 14 	call	0x28ae	; 0x28ae <pinMode>
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	8f 81       	ldd	r24, Y+7	; 0x07
    1590:	0e 94 93 14 	call	0x2926	; 0x2926 <digitalWrite>
    1594:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_ZN8SPIClass5beginEv>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	88 83       	st	Y, r24
    159c:	8a e1       	ldi	r24, 0x1A	; 26
    159e:	93 e0       	ldi	r25, 0x03	; 3
    15a0:	9a 83       	std	Y+2, r25	; 0x02
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	8b 83       	std	Y+3, r24	; 0x03
    15a8:	88 81       	ld	r24, Y
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <_ZN13SPI_Syn_Class5WriteEPKhl>:
    15b0:	dc 01       	movw	r26, r24
    15b2:	fb 01       	movw	r30, r22
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	15 96       	adiw	r26, 0x05	; 5
    15b8:	8c 93       	st	X, r24
    15ba:	15 97       	sbiw	r26, 0x05	; 5
    15bc:	21 15       	cp	r18, r1
    15be:	31 05       	cpc	r19, r1
    15c0:	99 f0       	breq	.+38     	; 0x15e8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x38>
    15c2:	80 81       	ld	r24, Z
    15c4:	8e bd       	out	0x2e, r24	; 46
    15c6:	21 50       	subi	r18, 0x01	; 1
    15c8:	31 09       	sbc	r19, r1
    15ca:	49 f0       	breq	.+18     	; 0x15de <_ZN13SPI_Syn_Class5WriteEPKhl+0x2e>
    15cc:	41 81       	ldd	r20, Z+1	; 0x01
    15ce:	0d b4       	in	r0, 0x2d	; 45
    15d0:	07 fe       	sbrs	r0, 7
    15d2:	fd cf       	rjmp	.-6      	; 0x15ce <_ZN13SPI_Syn_Class5WriteEPKhl+0x1e>
    15d4:	9e b5       	in	r25, 0x2e	; 46
    15d6:	4e bd       	out	0x2e, r20	; 46
    15d8:	90 83       	st	Z, r25
    15da:	31 96       	adiw	r30, 0x01	; 1
    15dc:	f4 cf       	rjmp	.-24     	; 0x15c6 <_ZN13SPI_Syn_Class5WriteEPKhl+0x16>
    15de:	0d b4       	in	r0, 0x2d	; 45
    15e0:	07 fe       	sbrs	r0, 7
    15e2:	fd cf       	rjmp	.-6      	; 0x15de <_ZN13SPI_Syn_Class5WriteEPKhl+0x2e>
    15e4:	8e b5       	in	r24, 0x2e	; 46
    15e6:	80 83       	st	Z, r24
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	15 96       	adiw	r26, 0x05	; 5
    15ec:	8c 93       	st	X, r24
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	cb 01       	movw	r24, r22
    15f4:	08 95       	ret

000015f6 <_ZN13SPI_Syn_Class4ReadEPhl>:
    15f6:	fb 01       	movw	r30, r22
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	dc 01       	movw	r26, r24
    15fc:	16 96       	adiw	r26, 0x06	; 6
    15fe:	6c 93       	st	X, r22
    1600:	21 15       	cp	r18, r1
    1602:	31 05       	cpc	r19, r1
    1604:	99 f0       	breq	.+38     	; 0x162c <_ZN13SPI_Syn_Class4ReadEPhl+0x36>
    1606:	80 81       	ld	r24, Z
    1608:	8e bd       	out	0x2e, r24	; 46
    160a:	21 50       	subi	r18, 0x01	; 1
    160c:	31 09       	sbc	r19, r1
    160e:	49 f0       	breq	.+18     	; 0x1622 <_ZN13SPI_Syn_Class4ReadEPhl+0x2c>
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	0d b4       	in	r0, 0x2d	; 45
    1614:	07 fe       	sbrs	r0, 7
    1616:	fd cf       	rjmp	.-6      	; 0x1612 <_ZN13SPI_Syn_Class4ReadEPhl+0x1c>
    1618:	8e b5       	in	r24, 0x2e	; 46
    161a:	9e bd       	out	0x2e, r25	; 46
    161c:	80 83       	st	Z, r24
    161e:	31 96       	adiw	r30, 0x01	; 1
    1620:	f4 cf       	rjmp	.-24     	; 0x160a <_ZN13SPI_Syn_Class4ReadEPhl+0x14>
    1622:	0d b4       	in	r0, 0x2d	; 45
    1624:	07 fe       	sbrs	r0, 7
    1626:	fd cf       	rjmp	.-6      	; 0x1622 <_ZN13SPI_Syn_Class4ReadEPhl+0x2c>
    1628:	8e b5       	in	r24, 0x2e	; 46
    162a:	80 83       	st	Z, r24
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	cb 01       	movw	r24, r22
    1632:	08 95       	ret

00001634 <_ZN13SPI_Syn_Class5SetCSEb>:
	SPI.endTransaction();
	
}
void SPI_Syn_Class::SetCS(bool st){
	#ifdef ARDUINO_AVR_UNO
	if (st)
    1634:	66 23       	and	r22, r22
    1636:	31 f0       	breq	.+12     	; 0x1644 <_ZN13SPI_Syn_Class5SetCSEb+0x10>
	{
		digitalWrite(SEN, 0x1);
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	fc 01       	movw	r30, r24
    163c:	87 81       	ldd	r24, Z+7	; 0x07
    163e:	0e 94 93 14 	call	0x2926	; 0x2926 <digitalWrite>
    1642:	20 c0       	rjmp	.+64     	; 0x1684 <_ZN13SPI_Syn_Class5SetCSEb+0x50>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1644:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <_ZN8SPIClass13interruptModeE>
    1648:	22 23       	and	r18, r18
    164a:	99 f0       	breq	.+38     	; 0x1672 <_ZN13SPI_Syn_Class5SetCSEb+0x3e>
      uint8_t sreg = SREG;
    164c:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
    164e:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1650:	30 91 e4 03 	lds	r19, 0x03E4	; 0x8003e4 <_ZN8SPIClass13interruptModeE>
    1654:	31 30       	cpi	r19, 0x01	; 1
    1656:	59 f4       	brne	.+22     	; 0x166e <_ZN13SPI_Syn_Class5SetCSEb+0x3a>
        interruptSave = SPI_AVR_EIMSK;
    1658:	3d b3       	in	r19, 0x1d	; 29
    165a:	30 93 e2 03 	sts	0x03E2, r19	; 0x8003e2 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    165e:	4d b3       	in	r20, 0x1d	; 29
    1660:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <_ZN8SPIClass13interruptMaskE>
    1664:	30 95       	com	r19
    1666:	34 23       	and	r19, r20
    1668:	3d bb       	out	0x1d, r19	; 29
        SREG = sreg;
    166a:	2f bf       	out	0x3f, r18	; 63
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <_ZN13SPI_Syn_Class5SetCSEb+0x3e>
      } else
      #endif
      {
        interruptSave = sreg;
    166e:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1672:	22 e5       	ldi	r18, 0x52	; 82
    1674:	2c bd       	out	0x2c, r18	; 44
    SPSR = settings.spsr;
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	2d bd       	out	0x2d, r18	; 45
	} 
	else
	{
		SPI.beginTransaction(SPISettings(600000, MSBFIRST, SPI_MODE0));
		//delay(1);
		digitalWrite(SEN, 0x0);
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	fc 01       	movw	r30, r24
    167e:	87 81       	ldd	r24, Z+7	; 0x07
    1680:	0e 94 93 14 	call	0x2926	; 0x2926 <digitalWrite>
		
	}
	 delay(1);
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 b7 13 	call	0x276e	; 0x276e <delay>
    1690:	08 95       	ret

00001692 <__subsf3>:
    1692:	50 58       	subi	r21, 0x80	; 128

00001694 <__addsf3>:
    1694:	bb 27       	eor	r27, r27
    1696:	aa 27       	eor	r26, r26
    1698:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__addsf3x>
    169c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__fp_round>
    16a0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fp_pscA>
    16a4:	38 f0       	brcs	.+14     	; 0x16b4 <__addsf3+0x20>
    16a6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__fp_pscB>
    16aa:	20 f0       	brcs	.+8      	; 0x16b4 <__addsf3+0x20>
    16ac:	39 f4       	brne	.+14     	; 0x16bc <__addsf3+0x28>
    16ae:	9f 3f       	cpi	r25, 0xFF	; 255
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <__addsf3+0x24>
    16b2:	26 f4       	brtc	.+8      	; 0x16bc <__addsf3+0x28>
    16b4:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_nan>
    16b8:	0e f4       	brtc	.+2      	; 0x16bc <__addsf3+0x28>
    16ba:	e0 95       	com	r30
    16bc:	e7 fb       	bst	r30, 7
    16be:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>

000016c2 <__addsf3x>:
    16c2:	e9 2f       	mov	r30, r25
    16c4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__fp_split3>
    16c8:	58 f3       	brcs	.-42     	; 0x16a0 <__addsf3+0xc>
    16ca:	ba 17       	cp	r27, r26
    16cc:	62 07       	cpc	r22, r18
    16ce:	73 07       	cpc	r23, r19
    16d0:	84 07       	cpc	r24, r20
    16d2:	95 07       	cpc	r25, r21
    16d4:	20 f0       	brcs	.+8      	; 0x16de <__addsf3x+0x1c>
    16d6:	79 f4       	brne	.+30     	; 0x16f6 <__addsf3x+0x34>
    16d8:	a6 f5       	brtc	.+104    	; 0x1742 <__addsf3x+0x80>
    16da:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__fp_zero>
    16de:	0e f4       	brtc	.+2      	; 0x16e2 <__addsf3x+0x20>
    16e0:	e0 95       	com	r30
    16e2:	0b 2e       	mov	r0, r27
    16e4:	ba 2f       	mov	r27, r26
    16e6:	a0 2d       	mov	r26, r0
    16e8:	0b 01       	movw	r0, r22
    16ea:	b9 01       	movw	r22, r18
    16ec:	90 01       	movw	r18, r0
    16ee:	0c 01       	movw	r0, r24
    16f0:	ca 01       	movw	r24, r20
    16f2:	a0 01       	movw	r20, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	ff 27       	eor	r31, r31
    16f8:	59 1b       	sub	r21, r25
    16fa:	99 f0       	breq	.+38     	; 0x1722 <__addsf3x+0x60>
    16fc:	59 3f       	cpi	r21, 0xF9	; 249
    16fe:	50 f4       	brcc	.+20     	; 0x1714 <__addsf3x+0x52>
    1700:	50 3e       	cpi	r21, 0xE0	; 224
    1702:	68 f1       	brcs	.+90     	; 0x175e <__addsf3x+0x9c>
    1704:	1a 16       	cp	r1, r26
    1706:	f0 40       	sbci	r31, 0x00	; 0
    1708:	a2 2f       	mov	r26, r18
    170a:	23 2f       	mov	r18, r19
    170c:	34 2f       	mov	r19, r20
    170e:	44 27       	eor	r20, r20
    1710:	58 5f       	subi	r21, 0xF8	; 248
    1712:	f3 cf       	rjmp	.-26     	; 0x16fa <__addsf3x+0x38>
    1714:	46 95       	lsr	r20
    1716:	37 95       	ror	r19
    1718:	27 95       	ror	r18
    171a:	a7 95       	ror	r26
    171c:	f0 40       	sbci	r31, 0x00	; 0
    171e:	53 95       	inc	r21
    1720:	c9 f7       	brne	.-14     	; 0x1714 <__addsf3x+0x52>
    1722:	7e f4       	brtc	.+30     	; 0x1742 <__addsf3x+0x80>
    1724:	1f 16       	cp	r1, r31
    1726:	ba 0b       	sbc	r27, r26
    1728:	62 0b       	sbc	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	ba f0       	brmi	.+46     	; 0x175e <__addsf3x+0x9c>
    1730:	91 50       	subi	r25, 0x01	; 1
    1732:	a1 f0       	breq	.+40     	; 0x175c <__addsf3x+0x9a>
    1734:	ff 0f       	add	r31, r31
    1736:	bb 1f       	adc	r27, r27
    1738:	66 1f       	adc	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	88 1f       	adc	r24, r24
    173e:	c2 f7       	brpl	.-16     	; 0x1730 <__addsf3x+0x6e>
    1740:	0e c0       	rjmp	.+28     	; 0x175e <__addsf3x+0x9c>
    1742:	ba 0f       	add	r27, r26
    1744:	62 1f       	adc	r22, r18
    1746:	73 1f       	adc	r23, r19
    1748:	84 1f       	adc	r24, r20
    174a:	48 f4       	brcc	.+18     	; 0x175e <__addsf3x+0x9c>
    174c:	87 95       	ror	r24
    174e:	77 95       	ror	r23
    1750:	67 95       	ror	r22
    1752:	b7 95       	ror	r27
    1754:	f7 95       	ror	r31
    1756:	9e 3f       	cpi	r25, 0xFE	; 254
    1758:	08 f0       	brcs	.+2      	; 0x175c <__addsf3x+0x9a>
    175a:	b0 cf       	rjmp	.-160    	; 0x16bc <__addsf3+0x28>
    175c:	93 95       	inc	r25
    175e:	88 0f       	add	r24, r24
    1760:	08 f0       	brcs	.+2      	; 0x1764 <__addsf3x+0xa2>
    1762:	99 27       	eor	r25, r25
    1764:	ee 0f       	add	r30, r30
    1766:	97 95       	ror	r25
    1768:	87 95       	ror	r24
    176a:	08 95       	ret

0000176c <__cmpsf2>:
    176c:	0e 94 b7 0c 	call	0x196e	; 0x196e <__fp_cmp>
    1770:	08 f4       	brcc	.+2      	; 0x1774 <__cmpsf2+0x8>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	08 95       	ret

00001776 <__divsf3>:
    1776:	0e 94 cf 0b 	call	0x179e	; 0x179e <__divsf3x>
    177a:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__fp_round>
    177e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__fp_pscB>
    1782:	58 f0       	brcs	.+22     	; 0x179a <__divsf3+0x24>
    1784:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fp_pscA>
    1788:	40 f0       	brcs	.+16     	; 0x179a <__divsf3+0x24>
    178a:	29 f4       	brne	.+10     	; 0x1796 <__divsf3+0x20>
    178c:	5f 3f       	cpi	r21, 0xFF	; 255
    178e:	29 f0       	breq	.+10     	; 0x179a <__divsf3+0x24>
    1790:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1794:	51 11       	cpse	r21, r1
    1796:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>
    179a:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_nan>

0000179e <__divsf3x>:
    179e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__fp_split3>
    17a2:	68 f3       	brcs	.-38     	; 0x177e <__divsf3+0x8>

000017a4 <__divsf3_pse>:
    17a4:	99 23       	and	r25, r25
    17a6:	b1 f3       	breq	.-20     	; 0x1794 <__divsf3+0x1e>
    17a8:	55 23       	and	r21, r21
    17aa:	91 f3       	breq	.-28     	; 0x1790 <__divsf3+0x1a>
    17ac:	95 1b       	sub	r25, r21
    17ae:	55 0b       	sbc	r21, r21
    17b0:	bb 27       	eor	r27, r27
    17b2:	aa 27       	eor	r26, r26
    17b4:	62 17       	cp	r22, r18
    17b6:	73 07       	cpc	r23, r19
    17b8:	84 07       	cpc	r24, r20
    17ba:	38 f0       	brcs	.+14     	; 0x17ca <__divsf3_pse+0x26>
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	5f 4f       	sbci	r21, 0xFF	; 255
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	44 1f       	adc	r20, r20
    17c6:	aa 1f       	adc	r26, r26
    17c8:	a9 f3       	breq	.-22     	; 0x17b4 <__divsf3_pse+0x10>
    17ca:	35 d0       	rcall	.+106    	; 0x1836 <__divsf3_pse+0x92>
    17cc:	0e 2e       	mov	r0, r30
    17ce:	3a f0       	brmi	.+14     	; 0x17de <__divsf3_pse+0x3a>
    17d0:	e0 e8       	ldi	r30, 0x80	; 128
    17d2:	32 d0       	rcall	.+100    	; 0x1838 <__divsf3_pse+0x94>
    17d4:	91 50       	subi	r25, 0x01	; 1
    17d6:	50 40       	sbci	r21, 0x00	; 0
    17d8:	e6 95       	lsr	r30
    17da:	00 1c       	adc	r0, r0
    17dc:	ca f7       	brpl	.-14     	; 0x17d0 <__divsf3_pse+0x2c>
    17de:	2b d0       	rcall	.+86     	; 0x1836 <__divsf3_pse+0x92>
    17e0:	fe 2f       	mov	r31, r30
    17e2:	29 d0       	rcall	.+82     	; 0x1836 <__divsf3_pse+0x92>
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	bb 1f       	adc	r27, r27
    17ec:	26 17       	cp	r18, r22
    17ee:	37 07       	cpc	r19, r23
    17f0:	48 07       	cpc	r20, r24
    17f2:	ab 07       	cpc	r26, r27
    17f4:	b0 e8       	ldi	r27, 0x80	; 128
    17f6:	09 f0       	breq	.+2      	; 0x17fa <__divsf3_pse+0x56>
    17f8:	bb 0b       	sbc	r27, r27
    17fa:	80 2d       	mov	r24, r0
    17fc:	bf 01       	movw	r22, r30
    17fe:	ff 27       	eor	r31, r31
    1800:	93 58       	subi	r25, 0x83	; 131
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	3a f0       	brmi	.+14     	; 0x1814 <__divsf3_pse+0x70>
    1806:	9e 3f       	cpi	r25, 0xFE	; 254
    1808:	51 05       	cpc	r21, r1
    180a:	78 f0       	brcs	.+30     	; 0x182a <__divsf3_pse+0x86>
    180c:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1810:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>
    1814:	5f 3f       	cpi	r21, 0xFF	; 255
    1816:	e4 f3       	brlt	.-8      	; 0x1810 <__divsf3_pse+0x6c>
    1818:	98 3e       	cpi	r25, 0xE8	; 232
    181a:	d4 f3       	brlt	.-12     	; 0x1810 <__divsf3_pse+0x6c>
    181c:	86 95       	lsr	r24
    181e:	77 95       	ror	r23
    1820:	67 95       	ror	r22
    1822:	b7 95       	ror	r27
    1824:	f7 95       	ror	r31
    1826:	9f 5f       	subi	r25, 0xFF	; 255
    1828:	c9 f7       	brne	.-14     	; 0x181c <__divsf3_pse+0x78>
    182a:	88 0f       	add	r24, r24
    182c:	91 1d       	adc	r25, r1
    182e:	96 95       	lsr	r25
    1830:	87 95       	ror	r24
    1832:	97 f9       	bld	r25, 7
    1834:	08 95       	ret
    1836:	e1 e0       	ldi	r30, 0x01	; 1
    1838:	66 0f       	add	r22, r22
    183a:	77 1f       	adc	r23, r23
    183c:	88 1f       	adc	r24, r24
    183e:	bb 1f       	adc	r27, r27
    1840:	62 17       	cp	r22, r18
    1842:	73 07       	cpc	r23, r19
    1844:	84 07       	cpc	r24, r20
    1846:	ba 07       	cpc	r27, r26
    1848:	20 f0       	brcs	.+8      	; 0x1852 <__divsf3_pse+0xae>
    184a:	62 1b       	sub	r22, r18
    184c:	73 0b       	sbc	r23, r19
    184e:	84 0b       	sbc	r24, r20
    1850:	ba 0b       	sbc	r27, r26
    1852:	ee 1f       	adc	r30, r30
    1854:	88 f7       	brcc	.-30     	; 0x1838 <__divsf3_pse+0x94>
    1856:	e0 95       	com	r30
    1858:	08 95       	ret

0000185a <__fixsfsi>:
    185a:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fixunssfsi>
    185e:	68 94       	set
    1860:	b1 11       	cpse	r27, r1
    1862:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>
    1866:	08 95       	ret

00001868 <__fixunssfsi>:
    1868:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__fp_splitA>
    186c:	88 f0       	brcs	.+34     	; 0x1890 <__fixunssfsi+0x28>
    186e:	9f 57       	subi	r25, 0x7F	; 127
    1870:	98 f0       	brcs	.+38     	; 0x1898 <__fixunssfsi+0x30>
    1872:	b9 2f       	mov	r27, r25
    1874:	99 27       	eor	r25, r25
    1876:	b7 51       	subi	r27, 0x17	; 23
    1878:	b0 f0       	brcs	.+44     	; 0x18a6 <__fixunssfsi+0x3e>
    187a:	e1 f0       	breq	.+56     	; 0x18b4 <__fixunssfsi+0x4c>
    187c:	66 0f       	add	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	88 1f       	adc	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	1a f0       	brmi	.+6      	; 0x188c <__fixunssfsi+0x24>
    1886:	ba 95       	dec	r27
    1888:	c9 f7       	brne	.-14     	; 0x187c <__fixunssfsi+0x14>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <__fixunssfsi+0x4c>
    188c:	b1 30       	cpi	r27, 0x01	; 1
    188e:	91 f0       	breq	.+36     	; 0x18b4 <__fixunssfsi+0x4c>
    1890:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_zero>
    1894:	b1 e0       	ldi	r27, 0x01	; 1
    1896:	08 95       	ret
    1898:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__fp_zero>
    189c:	67 2f       	mov	r22, r23
    189e:	78 2f       	mov	r23, r24
    18a0:	88 27       	eor	r24, r24
    18a2:	b8 5f       	subi	r27, 0xF8	; 248
    18a4:	39 f0       	breq	.+14     	; 0x18b4 <__fixunssfsi+0x4c>
    18a6:	b9 3f       	cpi	r27, 0xF9	; 249
    18a8:	cc f3       	brlt	.-14     	; 0x189c <__fixunssfsi+0x34>
    18aa:	86 95       	lsr	r24
    18ac:	77 95       	ror	r23
    18ae:	67 95       	ror	r22
    18b0:	b3 95       	inc	r27
    18b2:	d9 f7       	brne	.-10     	; 0x18aa <__fixunssfsi+0x42>
    18b4:	3e f4       	brtc	.+14     	; 0x18c4 <__fixunssfsi+0x5c>
    18b6:	90 95       	com	r25
    18b8:	80 95       	com	r24
    18ba:	70 95       	com	r23
    18bc:	61 95       	neg	r22
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	08 95       	ret

000018c6 <__floatunsisf>:
    18c6:	e8 94       	clt
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <__floatsisf+0x12>

000018ca <__floatsisf>:
    18ca:	97 fb       	bst	r25, 7
    18cc:	3e f4       	brtc	.+14     	; 0x18dc <__floatsisf+0x12>
    18ce:	90 95       	com	r25
    18d0:	80 95       	com	r24
    18d2:	70 95       	com	r23
    18d4:	61 95       	neg	r22
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	99 23       	and	r25, r25
    18de:	a9 f0       	breq	.+42     	; 0x190a <__floatsisf+0x40>
    18e0:	f9 2f       	mov	r31, r25
    18e2:	96 e9       	ldi	r25, 0x96	; 150
    18e4:	bb 27       	eor	r27, r27
    18e6:	93 95       	inc	r25
    18e8:	f6 95       	lsr	r31
    18ea:	87 95       	ror	r24
    18ec:	77 95       	ror	r23
    18ee:	67 95       	ror	r22
    18f0:	b7 95       	ror	r27
    18f2:	f1 11       	cpse	r31, r1
    18f4:	f8 cf       	rjmp	.-16     	; 0x18e6 <__floatsisf+0x1c>
    18f6:	fa f4       	brpl	.+62     	; 0x1936 <__floatsisf+0x6c>
    18f8:	bb 0f       	add	r27, r27
    18fa:	11 f4       	brne	.+4      	; 0x1900 <__floatsisf+0x36>
    18fc:	60 ff       	sbrs	r22, 0
    18fe:	1b c0       	rjmp	.+54     	; 0x1936 <__floatsisf+0x6c>
    1900:	6f 5f       	subi	r22, 0xFF	; 255
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	16 c0       	rjmp	.+44     	; 0x1936 <__floatsisf+0x6c>
    190a:	88 23       	and	r24, r24
    190c:	11 f0       	breq	.+4      	; 0x1912 <__floatsisf+0x48>
    190e:	96 e9       	ldi	r25, 0x96	; 150
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <__floatsisf+0x6a>
    1912:	77 23       	and	r23, r23
    1914:	21 f0       	breq	.+8      	; 0x191e <__floatsisf+0x54>
    1916:	9e e8       	ldi	r25, 0x8E	; 142
    1918:	87 2f       	mov	r24, r23
    191a:	76 2f       	mov	r23, r22
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__floatsisf+0x5e>
    191e:	66 23       	and	r22, r22
    1920:	71 f0       	breq	.+28     	; 0x193e <__floatsisf+0x74>
    1922:	96 e8       	ldi	r25, 0x86	; 134
    1924:	86 2f       	mov	r24, r22
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	2a f0       	brmi	.+10     	; 0x1936 <__floatsisf+0x6c>
    192c:	9a 95       	dec	r25
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	da f7       	brpl	.-10     	; 0x192c <__floatsisf+0x62>
    1936:	88 0f       	add	r24, r24
    1938:	96 95       	lsr	r25
    193a:	87 95       	ror	r24
    193c:	97 f9       	bld	r25, 7
    193e:	08 95       	ret

00001940 <floor>:
    1940:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__fp_trunc>
    1944:	90 f0       	brcs	.+36     	; 0x196a <floor+0x2a>
    1946:	9f 37       	cpi	r25, 0x7F	; 127
    1948:	48 f4       	brcc	.+18     	; 0x195c <floor+0x1c>
    194a:	91 11       	cpse	r25, r1
    194c:	16 f0       	brts	.+4      	; 0x1952 <floor+0x12>
    194e:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	80 e8       	ldi	r24, 0x80	; 128
    1958:	9f eb       	ldi	r25, 0xBF	; 191
    195a:	08 95       	ret
    195c:	26 f4       	brtc	.+8      	; 0x1966 <floor+0x26>
    195e:	1b 16       	cp	r1, r27
    1960:	61 1d       	adc	r22, r1
    1962:	71 1d       	adc	r23, r1
    1964:	81 1d       	adc	r24, r1
    1966:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__fp_mintl>
    196a:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__fp_mpack>

0000196e <__fp_cmp>:
    196e:	99 0f       	add	r25, r25
    1970:	00 08       	sbc	r0, r0
    1972:	55 0f       	add	r21, r21
    1974:	aa 0b       	sbc	r26, r26
    1976:	e0 e8       	ldi	r30, 0x80	; 128
    1978:	fe ef       	ldi	r31, 0xFE	; 254
    197a:	16 16       	cp	r1, r22
    197c:	17 06       	cpc	r1, r23
    197e:	e8 07       	cpc	r30, r24
    1980:	f9 07       	cpc	r31, r25
    1982:	c0 f0       	brcs	.+48     	; 0x19b4 <__fp_cmp+0x46>
    1984:	12 16       	cp	r1, r18
    1986:	13 06       	cpc	r1, r19
    1988:	e4 07       	cpc	r30, r20
    198a:	f5 07       	cpc	r31, r21
    198c:	98 f0       	brcs	.+38     	; 0x19b4 <__fp_cmp+0x46>
    198e:	62 1b       	sub	r22, r18
    1990:	73 0b       	sbc	r23, r19
    1992:	84 0b       	sbc	r24, r20
    1994:	95 0b       	sbc	r25, r21
    1996:	39 f4       	brne	.+14     	; 0x19a6 <__fp_cmp+0x38>
    1998:	0a 26       	eor	r0, r26
    199a:	61 f0       	breq	.+24     	; 0x19b4 <__fp_cmp+0x46>
    199c:	23 2b       	or	r18, r19
    199e:	24 2b       	or	r18, r20
    19a0:	25 2b       	or	r18, r21
    19a2:	21 f4       	brne	.+8      	; 0x19ac <__fp_cmp+0x3e>
    19a4:	08 95       	ret
    19a6:	0a 26       	eor	r0, r26
    19a8:	09 f4       	brne	.+2      	; 0x19ac <__fp_cmp+0x3e>
    19aa:	a1 40       	sbci	r26, 0x01	; 1
    19ac:	a6 95       	lsr	r26
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	81 1d       	adc	r24, r1
    19b2:	81 1d       	adc	r24, r1
    19b4:	08 95       	ret

000019b6 <__fp_inf>:
    19b6:	97 f9       	bld	r25, 7
    19b8:	9f 67       	ori	r25, 0x7F	; 127
    19ba:	80 e8       	ldi	r24, 0x80	; 128
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	08 95       	ret

000019c2 <__fp_mintl>:
    19c2:	88 23       	and	r24, r24
    19c4:	71 f4       	brne	.+28     	; 0x19e2 <__fp_mintl+0x20>
    19c6:	77 23       	and	r23, r23
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <__fp_mintl+0x10>
    19ca:	98 50       	subi	r25, 0x08	; 8
    19cc:	87 2b       	or	r24, r23
    19ce:	76 2f       	mov	r23, r22
    19d0:	07 c0       	rjmp	.+14     	; 0x19e0 <__fp_mintl+0x1e>
    19d2:	66 23       	and	r22, r22
    19d4:	11 f4       	brne	.+4      	; 0x19da <__fp_mintl+0x18>
    19d6:	99 27       	eor	r25, r25
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <__fp_mintl+0x32>
    19da:	90 51       	subi	r25, 0x10	; 16
    19dc:	86 2b       	or	r24, r22
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	2a f0       	brmi	.+10     	; 0x19ee <__fp_mintl+0x2c>
    19e4:	9a 95       	dec	r25
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	88 1f       	adc	r24, r24
    19ec:	da f7       	brpl	.-10     	; 0x19e4 <__fp_mintl+0x22>
    19ee:	88 0f       	add	r24, r24
    19f0:	96 95       	lsr	r25
    19f2:	87 95       	ror	r24
    19f4:	97 f9       	bld	r25, 7
    19f6:	08 95       	ret

000019f8 <__fp_mpack>:
    19f8:	9f 3f       	cpi	r25, 0xFF	; 255
    19fa:	31 f0       	breq	.+12     	; 0x1a08 <__fp_mpack_finite+0xc>

000019fc <__fp_mpack_finite>:
    19fc:	91 50       	subi	r25, 0x01	; 1
    19fe:	20 f4       	brcc	.+8      	; 0x1a08 <__fp_mpack_finite+0xc>
    1a00:	87 95       	ror	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b7 95       	ror	r27
    1a08:	88 0f       	add	r24, r24
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	97 f9       	bld	r25, 7
    1a12:	08 95       	ret

00001a14 <__fp_nan>:
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	80 ec       	ldi	r24, 0xC0	; 192
    1a18:	08 95       	ret

00001a1a <__fp_pscA>:
    1a1a:	00 24       	eor	r0, r0
    1a1c:	0a 94       	dec	r0
    1a1e:	16 16       	cp	r1, r22
    1a20:	17 06       	cpc	r1, r23
    1a22:	18 06       	cpc	r1, r24
    1a24:	09 06       	cpc	r0, r25
    1a26:	08 95       	ret

00001a28 <__fp_pscB>:
    1a28:	00 24       	eor	r0, r0
    1a2a:	0a 94       	dec	r0
    1a2c:	12 16       	cp	r1, r18
    1a2e:	13 06       	cpc	r1, r19
    1a30:	14 06       	cpc	r1, r20
    1a32:	05 06       	cpc	r0, r21
    1a34:	08 95       	ret

00001a36 <__fp_round>:
    1a36:	09 2e       	mov	r0, r25
    1a38:	03 94       	inc	r0
    1a3a:	00 0c       	add	r0, r0
    1a3c:	11 f4       	brne	.+4      	; 0x1a42 <__fp_round+0xc>
    1a3e:	88 23       	and	r24, r24
    1a40:	52 f0       	brmi	.+20     	; 0x1a56 <__fp_round+0x20>
    1a42:	bb 0f       	add	r27, r27
    1a44:	40 f4       	brcc	.+16     	; 0x1a56 <__fp_round+0x20>
    1a46:	bf 2b       	or	r27, r31
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <__fp_round+0x18>
    1a4a:	60 ff       	sbrs	r22, 0
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <__fp_round+0x20>
    1a4e:	6f 5f       	subi	r22, 0xFF	; 255
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__fp_split3>:
    1a58:	57 fd       	sbrc	r21, 7
    1a5a:	90 58       	subi	r25, 0x80	; 128
    1a5c:	44 0f       	add	r20, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <__fp_splitA+0x10>
    1a62:	5f 3f       	cpi	r21, 0xFF	; 255
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <__fp_splitA+0x1a>
    1a66:	47 95       	ror	r20

00001a68 <__fp_splitA>:
    1a68:	88 0f       	add	r24, r24
    1a6a:	97 fb       	bst	r25, 7
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	61 f0       	breq	.+24     	; 0x1a88 <__fp_splitA+0x20>
    1a70:	9f 3f       	cpi	r25, 0xFF	; 255
    1a72:	79 f0       	breq	.+30     	; 0x1a92 <__fp_splitA+0x2a>
    1a74:	87 95       	ror	r24
    1a76:	08 95       	ret
    1a78:	12 16       	cp	r1, r18
    1a7a:	13 06       	cpc	r1, r19
    1a7c:	14 06       	cpc	r1, r20
    1a7e:	55 1f       	adc	r21, r21
    1a80:	f2 cf       	rjmp	.-28     	; 0x1a66 <__fp_split3+0xe>
    1a82:	46 95       	lsr	r20
    1a84:	f1 df       	rcall	.-30     	; 0x1a68 <__fp_splitA>
    1a86:	08 c0       	rjmp	.+16     	; 0x1a98 <__fp_splitA+0x30>
    1a88:	16 16       	cp	r1, r22
    1a8a:	17 06       	cpc	r1, r23
    1a8c:	18 06       	cpc	r1, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	f1 cf       	rjmp	.-30     	; 0x1a74 <__fp_splitA+0xc>
    1a92:	86 95       	lsr	r24
    1a94:	71 05       	cpc	r23, r1
    1a96:	61 05       	cpc	r22, r1
    1a98:	08 94       	sec
    1a9a:	08 95       	ret

00001a9c <__fp_trunc>:
    1a9c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__fp_splitA>
    1aa0:	a0 f0       	brcs	.+40     	; 0x1aca <__fp_trunc+0x2e>
    1aa2:	be e7       	ldi	r27, 0x7E	; 126
    1aa4:	b9 17       	cp	r27, r25
    1aa6:	88 f4       	brcc	.+34     	; 0x1aca <__fp_trunc+0x2e>
    1aa8:	bb 27       	eor	r27, r27
    1aaa:	9f 38       	cpi	r25, 0x8F	; 143
    1aac:	60 f4       	brcc	.+24     	; 0x1ac6 <__fp_trunc+0x2a>
    1aae:	16 16       	cp	r1, r22
    1ab0:	b1 1d       	adc	r27, r1
    1ab2:	67 2f       	mov	r22, r23
    1ab4:	78 2f       	mov	r23, r24
    1ab6:	88 27       	eor	r24, r24
    1ab8:	98 5f       	subi	r25, 0xF8	; 248
    1aba:	f7 cf       	rjmp	.-18     	; 0x1aaa <__fp_trunc+0xe>
    1abc:	86 95       	lsr	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	b1 1d       	adc	r27, r1
    1ac4:	93 95       	inc	r25
    1ac6:	96 39       	cpi	r25, 0x96	; 150
    1ac8:	c8 f3       	brcs	.-14     	; 0x1abc <__fp_trunc+0x20>
    1aca:	08 95       	ret

00001acc <__fp_zero>:
    1acc:	e8 94       	clt

00001ace <__fp_szero>:
    1ace:	bb 27       	eor	r27, r27
    1ad0:	66 27       	eor	r22, r22
    1ad2:	77 27       	eor	r23, r23
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	97 f9       	bld	r25, 7
    1ad8:	08 95       	ret

00001ada <__gesf2>:
    1ada:	0e 94 b7 0c 	call	0x196e	; 0x196e <__fp_cmp>
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <__gesf2+0x8>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	08 95       	ret
    1ae4:	16 f0       	brts	.+4      	; 0x1aea <__gesf2+0x10>
    1ae6:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__fp_mpack>
    1aea:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_nan>
    1aee:	68 94       	set
    1af0:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>

00001af4 <log>:
    1af4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__fp_splitA>
    1af8:	a8 f3       	brcs	.-22     	; 0x1ae4 <__gesf2+0xa>
    1afa:	99 23       	and	r25, r25
    1afc:	c1 f3       	breq	.-16     	; 0x1aee <__gesf2+0x14>
    1afe:	ae f3       	brts	.-22     	; 0x1aea <__gesf2+0x10>
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	1f 93       	push	r17
    1b06:	0f 93       	push	r16
    1b08:	ff 92       	push	r15
    1b0a:	c9 2f       	mov	r28, r25
    1b0c:	dd 27       	eor	r29, r29
    1b0e:	88 23       	and	r24, r24
    1b10:	2a f0       	brmi	.+10     	; 0x1b1c <log+0x28>
    1b12:	21 97       	sbiw	r28, 0x01	; 1
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	da f7       	brpl	.-10     	; 0x1b12 <log+0x1e>
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f eb       	ldi	r21, 0xBF	; 191
    1b24:	9f e3       	ldi	r25, 0x3F	; 63
    1b26:	88 39       	cpi	r24, 0x98	; 152
    1b28:	20 f0       	brcs	.+8      	; 0x1b32 <log+0x3e>
    1b2a:	80 3e       	cpi	r24, 0xE0	; 224
    1b2c:	38 f0       	brcs	.+14     	; 0x1b3c <log+0x48>
    1b2e:	21 96       	adiw	r28, 0x01	; 1
    1b30:	8f 77       	andi	r24, 0x7F	; 127
    1b32:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__addsf3>
    1b36:	ee eb       	ldi	r30, 0xBE	; 190
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <log+0x50>
    1b3c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__addsf3>
    1b40:	eb ee       	ldi	r30, 0xEB	; 235
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_powser>
    1b48:	8b 01       	movw	r16, r22
    1b4a:	be 01       	movw	r22, r28
    1b4c:	ec 01       	movw	r28, r24
    1b4e:	fb 2e       	mov	r15, r27
    1b50:	6f 57       	subi	r22, 0x7F	; 127
    1b52:	71 09       	sbc	r23, r1
    1b54:	75 95       	asr	r23
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 0b       	sbc	r24, r24
    1b5a:	99 0b       	sbc	r25, r25
    1b5c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__floatsisf>
    1b60:	28 e1       	ldi	r18, 0x18	; 24
    1b62:	32 e7       	ldi	r19, 0x72	; 114
    1b64:	41 e3       	ldi	r20, 0x31	; 49
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3x>
    1b6c:	af 2d       	mov	r26, r15
    1b6e:	98 01       	movw	r18, r16
    1b70:	ae 01       	movw	r20, r28
    1b72:	ff 90       	pop	r15
    1b74:	0f 91       	pop	r16
    1b76:	1f 91       	pop	r17
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__addsf3x>
    1b80:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__fp_round>

00001b84 <__mulsf3>:
    1b84:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3x>
    1b88:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__fp_round>
    1b8c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fp_pscA>
    1b90:	38 f0       	brcs	.+14     	; 0x1ba0 <__mulsf3+0x1c>
    1b92:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__fp_pscB>
    1b96:	20 f0       	brcs	.+8      	; 0x1ba0 <__mulsf3+0x1c>
    1b98:	95 23       	and	r25, r21
    1b9a:	11 f0       	breq	.+4      	; 0x1ba0 <__mulsf3+0x1c>
    1b9c:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1ba0:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_nan>
    1ba4:	11 24       	eor	r1, r1
    1ba6:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>

00001baa <__mulsf3x>:
    1baa:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__fp_split3>
    1bae:	70 f3       	brcs	.-36     	; 0x1b8c <__mulsf3+0x8>

00001bb0 <__mulsf3_pse>:
    1bb0:	95 9f       	mul	r25, r21
    1bb2:	c1 f3       	breq	.-16     	; 0x1ba4 <__mulsf3+0x20>
    1bb4:	95 0f       	add	r25, r21
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	55 1f       	adc	r21, r21
    1bba:	62 9f       	mul	r22, r18
    1bbc:	f0 01       	movw	r30, r0
    1bbe:	72 9f       	mul	r23, r18
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	f0 0d       	add	r31, r0
    1bc4:	b1 1d       	adc	r27, r1
    1bc6:	63 9f       	mul	r22, r19
    1bc8:	aa 27       	eor	r26, r26
    1bca:	f0 0d       	add	r31, r0
    1bcc:	b1 1d       	adc	r27, r1
    1bce:	aa 1f       	adc	r26, r26
    1bd0:	64 9f       	mul	r22, r20
    1bd2:	66 27       	eor	r22, r22
    1bd4:	b0 0d       	add	r27, r0
    1bd6:	a1 1d       	adc	r26, r1
    1bd8:	66 1f       	adc	r22, r22
    1bda:	82 9f       	mul	r24, r18
    1bdc:	22 27       	eor	r18, r18
    1bde:	b0 0d       	add	r27, r0
    1be0:	a1 1d       	adc	r26, r1
    1be2:	62 1f       	adc	r22, r18
    1be4:	73 9f       	mul	r23, r19
    1be6:	b0 0d       	add	r27, r0
    1be8:	a1 1d       	adc	r26, r1
    1bea:	62 1f       	adc	r22, r18
    1bec:	83 9f       	mul	r24, r19
    1bee:	a0 0d       	add	r26, r0
    1bf0:	61 1d       	adc	r22, r1
    1bf2:	22 1f       	adc	r18, r18
    1bf4:	74 9f       	mul	r23, r20
    1bf6:	33 27       	eor	r19, r19
    1bf8:	a0 0d       	add	r26, r0
    1bfa:	61 1d       	adc	r22, r1
    1bfc:	23 1f       	adc	r18, r19
    1bfe:	84 9f       	mul	r24, r20
    1c00:	60 0d       	add	r22, r0
    1c02:	21 1d       	adc	r18, r1
    1c04:	82 2f       	mov	r24, r18
    1c06:	76 2f       	mov	r23, r22
    1c08:	6a 2f       	mov	r22, r26
    1c0a:	11 24       	eor	r1, r1
    1c0c:	9f 57       	subi	r25, 0x7F	; 127
    1c0e:	50 40       	sbci	r21, 0x00	; 0
    1c10:	9a f0       	brmi	.+38     	; 0x1c38 <__mulsf3_pse+0x88>
    1c12:	f1 f0       	breq	.+60     	; 0x1c50 <__mulsf3_pse+0xa0>
    1c14:	88 23       	and	r24, r24
    1c16:	4a f0       	brmi	.+18     	; 0x1c2a <__mulsf3_pse+0x7a>
    1c18:	ee 0f       	add	r30, r30
    1c1a:	ff 1f       	adc	r31, r31
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	66 1f       	adc	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	88 1f       	adc	r24, r24
    1c24:	91 50       	subi	r25, 0x01	; 1
    1c26:	50 40       	sbci	r21, 0x00	; 0
    1c28:	a9 f7       	brne	.-22     	; 0x1c14 <__mulsf3_pse+0x64>
    1c2a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c2c:	51 05       	cpc	r21, r1
    1c2e:	80 f0       	brcs	.+32     	; 0x1c50 <__mulsf3_pse+0xa0>
    1c30:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1c34:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>
    1c38:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3a:	e4 f3       	brlt	.-8      	; 0x1c34 <__mulsf3_pse+0x84>
    1c3c:	98 3e       	cpi	r25, 0xE8	; 232
    1c3e:	d4 f3       	brlt	.-12     	; 0x1c34 <__mulsf3_pse+0x84>
    1c40:	86 95       	lsr	r24
    1c42:	77 95       	ror	r23
    1c44:	67 95       	ror	r22
    1c46:	b7 95       	ror	r27
    1c48:	f7 95       	ror	r31
    1c4a:	e7 95       	ror	r30
    1c4c:	9f 5f       	subi	r25, 0xFF	; 255
    1c4e:	c1 f7       	brne	.-16     	; 0x1c40 <__mulsf3_pse+0x90>
    1c50:	fe 2b       	or	r31, r30
    1c52:	88 0f       	add	r24, r24
    1c54:	91 1d       	adc	r25, r1
    1c56:	96 95       	lsr	r25
    1c58:	87 95       	ror	r24
    1c5a:	97 f9       	bld	r25, 7
    1c5c:	08 95       	ret

00001c5e <pow>:
    1c5e:	fa 01       	movw	r30, r20
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	30 96       	adiw	r30, 0x00	; 0
    1c66:	21 05       	cpc	r18, r1
    1c68:	31 05       	cpc	r19, r1
    1c6a:	a1 f1       	breq	.+104    	; 0x1cd4 <pow+0x76>
    1c6c:	61 15       	cp	r22, r1
    1c6e:	71 05       	cpc	r23, r1
    1c70:	61 f4       	brne	.+24     	; 0x1c8a <pow+0x2c>
    1c72:	80 38       	cpi	r24, 0x80	; 128
    1c74:	bf e3       	ldi	r27, 0x3F	; 63
    1c76:	9b 07       	cpc	r25, r27
    1c78:	49 f1       	breq	.+82     	; 0x1ccc <pow+0x6e>
    1c7a:	68 94       	set
    1c7c:	90 38       	cpi	r25, 0x80	; 128
    1c7e:	81 05       	cpc	r24, r1
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <pow+0x3c>
    1c82:	80 38       	cpi	r24, 0x80	; 128
    1c84:	bf ef       	ldi	r27, 0xFF	; 255
    1c86:	9b 07       	cpc	r25, r27
    1c88:	41 f0       	breq	.+16     	; 0x1c9a <pow+0x3c>
    1c8a:	99 23       	and	r25, r25
    1c8c:	4a f5       	brpl	.+82     	; 0x1ce0 <pow+0x82>
    1c8e:	ff 3f       	cpi	r31, 0xFF	; 255
    1c90:	e1 05       	cpc	r30, r1
    1c92:	31 05       	cpc	r19, r1
    1c94:	21 05       	cpc	r18, r1
    1c96:	19 f1       	breq	.+70     	; 0x1cde <pow+0x80>
    1c98:	e8 94       	clt
    1c9a:	08 94       	sec
    1c9c:	e7 95       	ror	r30
    1c9e:	d9 01       	movw	r26, r18
    1ca0:	aa 23       	and	r26, r26
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <pow+0x50>
    1ca4:	ab 2f       	mov	r26, r27
    1ca6:	be 2f       	mov	r27, r30
    1ca8:	f8 5f       	subi	r31, 0xF8	; 248
    1caa:	d0 f3       	brcs	.-12     	; 0x1ca0 <pow+0x42>
    1cac:	10 c0       	rjmp	.+32     	; 0x1cce <pow+0x70>
    1cae:	ff 5f       	subi	r31, 0xFF	; 255
    1cb0:	70 f4       	brcc	.+28     	; 0x1cce <pow+0x70>
    1cb2:	a6 95       	lsr	r26
    1cb4:	e0 f7       	brcc	.-8      	; 0x1cae <pow+0x50>
    1cb6:	f7 39       	cpi	r31, 0x97	; 151
    1cb8:	50 f0       	brcs	.+20     	; 0x1cce <pow+0x70>
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <pow+0x64>
    1cbc:	ff 3a       	cpi	r31, 0xAF	; 175
    1cbe:	38 f4       	brcc	.+14     	; 0x1cce <pow+0x70>
    1cc0:	9f 77       	andi	r25, 0x7F	; 127
    1cc2:	9f 93       	push	r25
    1cc4:	0d d0       	rcall	.+26     	; 0x1ce0 <pow+0x82>
    1cc6:	0f 90       	pop	r0
    1cc8:	07 fc       	sbrc	r0, 7
    1cca:	90 58       	subi	r25, 0x80	; 128
    1ccc:	08 95       	ret
    1cce:	46 f0       	brts	.+16     	; 0x1ce0 <pow+0x82>
    1cd0:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_nan>
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	80 e8       	ldi	r24, 0x80	; 128
    1cda:	9f e3       	ldi	r25, 0x3F	; 63
    1cdc:	08 95       	ret
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	9f 77       	andi	r25, 0x7F	; 127
    1ce2:	5f 93       	push	r21
    1ce4:	4f 93       	push	r20
    1ce6:	3f 93       	push	r19
    1ce8:	2f 93       	push	r18
    1cea:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <log>
    1cee:	2f 91       	pop	r18
    1cf0:	3f 91       	pop	r19
    1cf2:	4f 91       	pop	r20
    1cf4:	5f 91       	pop	r21
    1cf6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
    1cfa:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <exp>
    1cfe:	29 f4       	brne	.+10     	; 0x1d0a <pow+0xac>
    1d00:	16 f0       	brts	.+4      	; 0x1d06 <pow+0xa8>
    1d02:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1d06:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__fp_zero>
    1d0a:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__fp_nan>

00001d0e <exp>:
    1d0e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__fp_splitA>
    1d12:	a8 f3       	brcs	.-22     	; 0x1cfe <pow+0xa0>
    1d14:	96 38       	cpi	r25, 0x86	; 134
    1d16:	a0 f7       	brcc	.-24     	; 0x1d00 <pow+0xa2>
    1d18:	07 f8       	bld	r0, 7
    1d1a:	0f 92       	push	r0
    1d1c:	e8 94       	clt
    1d1e:	2b e3       	ldi	r18, 0x3B	; 59
    1d20:	3a ea       	ldi	r19, 0xAA	; 170
    1d22:	48 eb       	ldi	r20, 0xB8	; 184
    1d24:	5f e7       	ldi	r21, 0x7F	; 127
    1d26:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__mulsf3_pse>
    1d2a:	0f 92       	push	r0
    1d2c:	0f 92       	push	r0
    1d2e:	0f 92       	push	r0
    1d30:	4d b7       	in	r20, 0x3d	; 61
    1d32:	5e b7       	in	r21, 0x3e	; 62
    1d34:	0f 92       	push	r0
    1d36:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <modf>
    1d3a:	e8 e1       	ldi	r30, 0x18	; 24
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
    1d3e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_powser>
    1d42:	4f 91       	pop	r20
    1d44:	5f 91       	pop	r21
    1d46:	ef 91       	pop	r30
    1d48:	ff 91       	pop	r31
    1d4a:	e5 95       	asr	r30
    1d4c:	ee 1f       	adc	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	49 f0       	breq	.+18     	; 0x1d64 <exp+0x56>
    1d52:	fe 57       	subi	r31, 0x7E	; 126
    1d54:	e0 68       	ori	r30, 0x80	; 128
    1d56:	44 27       	eor	r20, r20
    1d58:	ee 0f       	add	r30, r30
    1d5a:	44 1f       	adc	r20, r20
    1d5c:	fa 95       	dec	r31
    1d5e:	e1 f7       	brne	.-8      	; 0x1d58 <exp+0x4a>
    1d60:	41 95       	neg	r20
    1d62:	55 0b       	sbc	r21, r21
    1d64:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <ldexp>
    1d68:	0f 90       	pop	r0
    1d6a:	07 fe       	sbrs	r0, 7
    1d6c:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <inverse>
    1d70:	08 95       	ret

00001d72 <__fp_powser>:
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	1f 93       	push	r17
    1d78:	0f 93       	push	r16
    1d7a:	ff 92       	push	r15
    1d7c:	ef 92       	push	r14
    1d7e:	df 92       	push	r13
    1d80:	7b 01       	movw	r14, r22
    1d82:	8c 01       	movw	r16, r24
    1d84:	68 94       	set
    1d86:	06 c0       	rjmp	.+12     	; 0x1d94 <__fp_powser+0x22>
    1d88:	da 2e       	mov	r13, r26
    1d8a:	ef 01       	movw	r28, r30
    1d8c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__mulsf3x>
    1d90:	fe 01       	movw	r30, r28
    1d92:	e8 94       	clt
    1d94:	a5 91       	lpm	r26, Z+
    1d96:	25 91       	lpm	r18, Z+
    1d98:	35 91       	lpm	r19, Z+
    1d9a:	45 91       	lpm	r20, Z+
    1d9c:	55 91       	lpm	r21, Z+
    1d9e:	a6 f3       	brts	.-24     	; 0x1d88 <__fp_powser+0x16>
    1da0:	ef 01       	movw	r28, r30
    1da2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__addsf3x>
    1da6:	fe 01       	movw	r30, r28
    1da8:	97 01       	movw	r18, r14
    1daa:	a8 01       	movw	r20, r16
    1dac:	da 94       	dec	r13
    1dae:	69 f7       	brne	.-38     	; 0x1d8a <__fp_powser+0x18>
    1db0:	df 90       	pop	r13
    1db2:	ef 90       	pop	r14
    1db4:	ff 90       	pop	r15
    1db6:	0f 91       	pop	r16
    1db8:	1f 91       	pop	r17
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <inverse>:
    1dc0:	9b 01       	movw	r18, r22
    1dc2:	ac 01       	movw	r20, r24
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	80 e8       	ldi	r24, 0x80	; 128
    1dca:	9f e3       	ldi	r25, 0x3F	; 63
    1dcc:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__divsf3>
    1dd0:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_inf>
    1dd4:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__fp_mpack>

00001dd8 <ldexp>:
    1dd8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__fp_splitA>
    1ddc:	d8 f3       	brcs	.-10     	; 0x1dd4 <inverse+0x14>
    1dde:	99 23       	and	r25, r25
    1de0:	c9 f3       	breq	.-14     	; 0x1dd4 <inverse+0x14>
    1de2:	94 0f       	add	r25, r20
    1de4:	51 1d       	adc	r21, r1
    1de6:	a3 f3       	brvs	.-24     	; 0x1dd0 <inverse+0x10>
    1de8:	91 50       	subi	r25, 0x01	; 1
    1dea:	50 40       	sbci	r21, 0x00	; 0
    1dec:	94 f0       	brlt	.+36     	; 0x1e12 <ldexp+0x3a>
    1dee:	59 f0       	breq	.+22     	; 0x1e06 <ldexp+0x2e>
    1df0:	88 23       	and	r24, r24
    1df2:	32 f0       	brmi	.+12     	; 0x1e00 <ldexp+0x28>
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	91 50       	subi	r25, 0x01	; 1
    1dfc:	50 40       	sbci	r21, 0x00	; 0
    1dfe:	c1 f7       	brne	.-16     	; 0x1df0 <ldexp+0x18>
    1e00:	9e 3f       	cpi	r25, 0xFE	; 254
    1e02:	51 05       	cpc	r21, r1
    1e04:	2c f7       	brge	.-54     	; 0x1dd0 <inverse+0x10>
    1e06:	88 0f       	add	r24, r24
    1e08:	91 1d       	adc	r25, r1
    1e0a:	96 95       	lsr	r25
    1e0c:	87 95       	ror	r24
    1e0e:	97 f9       	bld	r25, 7
    1e10:	08 95       	ret
    1e12:	5f 3f       	cpi	r21, 0xFF	; 255
    1e14:	ac f0       	brlt	.+42     	; 0x1e40 <ldexp+0x68>
    1e16:	98 3e       	cpi	r25, 0xE8	; 232
    1e18:	9c f0       	brlt	.+38     	; 0x1e40 <ldexp+0x68>
    1e1a:	bb 27       	eor	r27, r27
    1e1c:	86 95       	lsr	r24
    1e1e:	77 95       	ror	r23
    1e20:	67 95       	ror	r22
    1e22:	b7 95       	ror	r27
    1e24:	08 f4       	brcc	.+2      	; 0x1e28 <ldexp+0x50>
    1e26:	b1 60       	ori	r27, 0x01	; 1
    1e28:	93 95       	inc	r25
    1e2a:	c1 f7       	brne	.-16     	; 0x1e1c <ldexp+0x44>
    1e2c:	bb 0f       	add	r27, r27
    1e2e:	58 f7       	brcc	.-42     	; 0x1e06 <ldexp+0x2e>
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <ldexp+0x5e>
    1e32:	60 ff       	sbrs	r22, 0
    1e34:	e8 cf       	rjmp	.-48     	; 0x1e06 <ldexp+0x2e>
    1e36:	6f 5f       	subi	r22, 0xFF	; 255
    1e38:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	e3 cf       	rjmp	.-58     	; 0x1e06 <ldexp+0x2e>
    1e40:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__fp_szero>

00001e44 <modf>:
    1e44:	fa 01       	movw	r30, r20
    1e46:	dc 01       	movw	r26, r24
    1e48:	aa 0f       	add	r26, r26
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	9b 01       	movw	r18, r22
    1e4e:	ac 01       	movw	r20, r24
    1e50:	bf 57       	subi	r27, 0x7F	; 127
    1e52:	28 f4       	brcc	.+10     	; 0x1e5e <modf+0x1a>
    1e54:	22 27       	eor	r18, r18
    1e56:	33 27       	eor	r19, r19
    1e58:	44 27       	eor	r20, r20
    1e5a:	50 78       	andi	r21, 0x80	; 128
    1e5c:	20 c0       	rjmp	.+64     	; 0x1e9e <modf+0x5a>
    1e5e:	b7 51       	subi	r27, 0x17	; 23
    1e60:	90 f4       	brcc	.+36     	; 0x1e86 <modf+0x42>
    1e62:	ab 2f       	mov	r26, r27
    1e64:	00 24       	eor	r0, r0
    1e66:	46 95       	lsr	r20
    1e68:	37 95       	ror	r19
    1e6a:	27 95       	ror	r18
    1e6c:	01 1c       	adc	r0, r1
    1e6e:	a3 95       	inc	r26
    1e70:	d2 f3       	brmi	.-12     	; 0x1e66 <modf+0x22>
    1e72:	00 20       	and	r0, r0
    1e74:	71 f0       	breq	.+28     	; 0x1e92 <modf+0x4e>
    1e76:	22 0f       	add	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	44 1f       	adc	r20, r20
    1e7c:	b3 95       	inc	r27
    1e7e:	da f3       	brmi	.-10     	; 0x1e76 <modf+0x32>
    1e80:	0e d0       	rcall	.+28     	; 0x1e9e <modf+0x5a>
    1e82:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__subsf3>
    1e86:	61 30       	cpi	r22, 0x01	; 1
    1e88:	71 05       	cpc	r23, r1
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	8a 07       	cpc	r24, r26
    1e8e:	b9 46       	sbci	r27, 0x69	; 105
    1e90:	30 f4       	brcc	.+12     	; 0x1e9e <modf+0x5a>
    1e92:	9b 01       	movw	r18, r22
    1e94:	ac 01       	movw	r20, r24
    1e96:	66 27       	eor	r22, r22
    1e98:	77 27       	eor	r23, r23
    1e9a:	88 27       	eor	r24, r24
    1e9c:	90 78       	andi	r25, 0x80	; 128
    1e9e:	30 96       	adiw	r30, 0x00	; 0
    1ea0:	21 f0       	breq	.+8      	; 0x1eaa <modf+0x66>
    1ea2:	20 83       	st	Z, r18
    1ea4:	31 83       	std	Z+1, r19	; 0x01
    1ea6:	42 83       	std	Z+2, r20	; 0x02
    1ea8:	53 83       	std	Z+3, r21	; 0x03
    1eaa:	08 95       	ret

00001eac <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1eac:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1eae:	91 8d       	ldd	r25, Z+25	; 0x19
    1eb0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eb2:	89 2f       	mov	r24, r25
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	80 5c       	subi	r24, 0xC0	; 192
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	82 1b       	sub	r24, r18
    1ebc:	91 09       	sbc	r25, r1
}
    1ebe:	8f 73       	andi	r24, 0x3F	; 63
    1ec0:	99 27       	eor	r25, r25
    1ec2:	08 95       	ret

00001ec4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1ec4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ec6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ec8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eca:	98 17       	cp	r25, r24
    1ecc:	31 f0       	breq	.+12     	; 0x1eda <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1ece:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ed0:	e8 0f       	add	r30, r24
    1ed2:	f1 1d       	adc	r31, r1
    1ed4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1ede:	08 95       	ret

00001ee0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1ee0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ee2:	91 8d       	ldd	r25, Z+25	; 0x19
    1ee4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ee6:	98 17       	cp	r25, r24
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1eea:	82 8d       	ldd	r24, Z+26	; 0x1a
    1eec:	df 01       	movw	r26, r30
    1eee:	a8 0f       	add	r26, r24
    1ef0:	b1 1d       	adc	r27, r1
    1ef2:	5d 96       	adiw	r26, 0x1d	; 29
    1ef4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1ef6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ef8:	9f 5f       	subi	r25, 0xFF	; 255
    1efa:	9f 73       	andi	r25, 0x3F	; 63
    1efc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1f06:	08 95       	ret

00001f08 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1f08:	fc 01       	movw	r30, r24
    1f0a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1f0c:	44 8d       	ldd	r20, Z+28	; 0x1c
    1f0e:	25 2f       	mov	r18, r21
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	84 2f       	mov	r24, r20
    1f14:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1f16:	82 1b       	sub	r24, r18
    1f18:	93 0b       	sbc	r25, r19
    1f1a:	54 17       	cp	r21, r20
    1f1c:	10 f0       	brcs	.+4      	; 0x1f22 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1f1e:	cf 96       	adiw	r24, 0x3f	; 63
    1f20:	08 95       	ret
  return tail - head - 1;
    1f22:	01 97       	sbiw	r24, 0x01	; 1
}
    1f24:	08 95       	ret

00001f26 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1f26:	8f ee       	ldi	r24, 0xEF	; 239
    1f28:	90 e1       	ldi	r25, 0x10	; 16
    1f2a:	89 2b       	or	r24, r25
    1f2c:	49 f0       	breq	.+18     	; 0x1f40 <_Z14serialEventRunv+0x1a>
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	89 2b       	or	r24, r25
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <_Z14serialEventRunv+0x1a>
    1f36:	0e 94 ef 10 	call	0x21de	; 0x21de <_Z17Serial0_availablev>
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1f40:	08 95       	ret

00001f42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1f42:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1f44:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f46:	df 01       	movw	r26, r30
    1f48:	a8 0f       	add	r26, r24
    1f4a:	b1 1d       	adc	r27, r1
    1f4c:	a3 5a       	subi	r26, 0xA3	; 163
    1f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f50:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1f52:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	8f 73       	andi	r24, 0x3F	; 63
    1f5a:	99 27       	eor	r25, r25
    1f5c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1f5e:	a6 89       	ldd	r26, Z+22	; 0x16
    1f60:	b7 89       	ldd	r27, Z+23	; 0x17
    1f62:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1f64:	a0 89       	ldd	r26, Z+16	; 0x10
    1f66:	b1 89       	ldd	r27, Z+17	; 0x11
    1f68:	8c 91       	ld	r24, X
    1f6a:	83 70       	andi	r24, 0x03	; 3
    1f6c:	80 64       	ori	r24, 0x40	; 64
    1f6e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1f70:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f72:	84 8d       	ldd	r24, Z+28	; 0x1c
    1f74:	98 13       	cpse	r25, r24
    1f76:	06 c0       	rjmp	.+12     	; 0x1f84 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1f78:	02 88       	ldd	r0, Z+18	; 0x12
    1f7a:	f3 89       	ldd	r31, Z+19	; 0x13
    1f7c:	e0 2d       	mov	r30, r0
    1f7e:	80 81       	ld	r24, Z
    1f80:	8f 7d       	andi	r24, 0xDF	; 223
    1f82:	80 83       	st	Z, r24
    1f84:	08 95       	ret

00001f86 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1f86:	ef 92       	push	r14
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
  _written = true;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1f98:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f9c:	98 13       	cpse	r25, r24
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <_ZN14HardwareSerial5writeEh+0x24>
    1fa0:	e8 89       	ldd	r30, Y+16	; 0x10
    1fa2:	f9 89       	ldd	r31, Y+17	; 0x11
    1fa4:	80 81       	ld	r24, Z
    1fa6:	85 fd       	sbrc	r24, 5
    1fa8:	26 c0       	rjmp	.+76     	; 0x1ff6 <_ZN14HardwareSerial5writeEh+0x70>
    1faa:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1fac:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1fae:	10 e0       	ldi	r17, 0x00	; 0
    1fb0:	0f 5f       	subi	r16, 0xFF	; 255
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	0f 73       	andi	r16, 0x3F	; 63
    1fb6:	11 27       	eor	r17, r17
    1fb8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1fba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fbc:	e8 12       	cpse	r14, r24
    1fbe:	0c c0       	rjmp	.+24     	; 0x1fd8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	07 fc       	sbrc	r0, 7
    1fc4:	fa cf       	rjmp	.-12     	; 0x1fba <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1fc6:	e8 89       	ldd	r30, Y+16	; 0x10
    1fc8:	f9 89       	ldd	r31, Y+17	; 0x11
    1fca:	80 81       	ld	r24, Z
    1fcc:	85 ff       	sbrs	r24, 5
    1fce:	f5 cf       	rjmp	.-22     	; 0x1fba <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1fd6:	f1 cf       	rjmp	.-30     	; 0x1fba <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e8 0f       	add	r30, r24
    1fde:	f1 1d       	adc	r31, r1
    1fe0:	e3 5a       	subi	r30, 0xA3	; 163
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1fe6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1fe8:	f8 94       	cli
    _tx_buffer_head = i;
    1fea:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1fec:	ea 89       	ldd	r30, Y+18	; 0x12
    1fee:	fb 89       	ldd	r31, Y+19	; 0x13
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1ff6:	9f b7       	in	r25, 0x3f	; 63
    1ff8:	f8 94       	cli
      *_udr = c;
    1ffa:	ee 89       	ldd	r30, Y+22	; 0x16
    1ffc:	ff 89       	ldd	r31, Y+23	; 0x17
    1ffe:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2000:	e8 89       	ldd	r30, Y+16	; 0x10
    2002:	f9 89       	ldd	r31, Y+17	; 0x11
    2004:	80 81       	ld	r24, Z
    2006:	83 70       	andi	r24, 0x03	; 3
    2008:	80 64       	ori	r24, 0x40	; 64
    200a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    200c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	08 95       	ret

00002020 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2026:	88 8d       	ldd	r24, Y+24	; 0x18
    2028:	88 23       	and	r24, r24
    202a:	c9 f0       	breq	.+50     	; 0x205e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    202c:	ea 89       	ldd	r30, Y+18	; 0x12
    202e:	fb 89       	ldd	r31, Y+19	; 0x13
    2030:	80 81       	ld	r24, Z
    2032:	85 fd       	sbrc	r24, 5
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <_ZN14HardwareSerial5flushEv+0x20>
    2036:	a8 89       	ldd	r26, Y+16	; 0x10
    2038:	b9 89       	ldd	r27, Y+17	; 0x11
    203a:	8c 91       	ld	r24, X
    203c:	86 fd       	sbrc	r24, 6
    203e:	0f c0       	rjmp	.+30     	; 0x205e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	07 fc       	sbrc	r0, 7
    2044:	f5 cf       	rjmp	.-22     	; 0x2030 <_ZN14HardwareSerial5flushEv+0x10>
    2046:	80 81       	ld	r24, Z
    2048:	85 ff       	sbrs	r24, 5
    204a:	f2 cf       	rjmp	.-28     	; 0x2030 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    204c:	a8 89       	ldd	r26, Y+16	; 0x10
    204e:	b9 89       	ldd	r27, Y+17	; 0x11
    2050:	8c 91       	ld	r24, X
    2052:	85 ff       	sbrs	r24, 5
    2054:	ed cf       	rjmp	.-38     	; 0x2030 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2056:	ce 01       	movw	r24, r28
    2058:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    205c:	e7 cf       	rjmp	.-50     	; 0x202c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	08 95       	ret

00002064 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2064:	cf 92       	push	r12
    2066:	df 92       	push	r13
    2068:	ef 92       	push	r14
    206a:	ff 92       	push	r15
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	6a 01       	movw	r12, r20
    2076:	7b 01       	movw	r14, r22
    2078:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    207a:	e8 89       	ldd	r30, Y+16	; 0x10
    207c:	f9 89       	ldd	r31, Y+17	; 0x11
    207e:	82 e0       	ldi	r24, 0x02	; 2
    2080:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2082:	41 15       	cp	r20, r1
    2084:	51 4e       	sbci	r21, 0xE1	; 225
    2086:	61 05       	cpc	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	b1 f0       	breq	.+44     	; 0x20b8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	79 e0       	ldi	r23, 0x09	; 9
    2090:	8d e3       	ldi	r24, 0x3D	; 61
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a7 01       	movw	r20, r14
    2096:	96 01       	movw	r18, r12
    2098:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__udivmodsi4>
    209c:	da 01       	movw	r26, r20
    209e:	c9 01       	movw	r24, r18
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	a1 09       	sbc	r26, r1
    20a4:	b1 09       	sbc	r27, r1
    20a6:	b6 95       	lsr	r27
    20a8:	a7 95       	ror	r26
    20aa:	97 95       	ror	r25
    20ac:	87 95       	ror	r24
    20ae:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    20b0:	21 15       	cp	r18, r1
    20b2:	80 e1       	ldi	r24, 0x10	; 16
    20b4:	38 07       	cpc	r19, r24
    20b6:	a8 f0       	brcs	.+42     	; 0x20e2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    20b8:	e8 89       	ldd	r30, Y+16	; 0x10
    20ba:	f9 89       	ldd	r31, Y+17	; 0x11
    20bc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    20be:	60 e8       	ldi	r22, 0x80	; 128
    20c0:	74 e8       	ldi	r23, 0x84	; 132
    20c2:	8e e1       	ldi	r24, 0x1E	; 30
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a7 01       	movw	r20, r14
    20c8:	96 01       	movw	r18, r12
    20ca:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__udivmodsi4>
    20ce:	da 01       	movw	r26, r20
    20d0:	c9 01       	movw	r24, r18
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	a1 09       	sbc	r26, r1
    20d6:	b1 09       	sbc	r27, r1
    20d8:	b6 95       	lsr	r27
    20da:	a7 95       	ror	r26
    20dc:	97 95       	ror	r25
    20de:	87 95       	ror	r24
    20e0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    20e2:	ec 85       	ldd	r30, Y+12	; 0x0c
    20e4:	fd 85       	ldd	r31, Y+13	; 0x0d
    20e6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    20e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    20ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    20ec:	20 83       	st	Z, r18

  _written = false;
    20ee:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    20f0:	ec 89       	ldd	r30, Y+20	; 0x14
    20f2:	fd 89       	ldd	r31, Y+21	; 0x15
    20f4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    20f6:	ea 89       	ldd	r30, Y+18	; 0x12
    20f8:	fb 89       	ldd	r31, Y+19	; 0x13
    20fa:	80 81       	ld	r24, Z
    20fc:	80 61       	ori	r24, 0x10	; 16
    20fe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2100:	ea 89       	ldd	r30, Y+18	; 0x12
    2102:	fb 89       	ldd	r31, Y+19	; 0x13
    2104:	80 81       	ld	r24, Z
    2106:	88 60       	ori	r24, 0x08	; 8
    2108:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    210a:	ea 89       	ldd	r30, Y+18	; 0x12
    210c:	fb 89       	ldd	r31, Y+19	; 0x13
    210e:	80 81       	ld	r24, Z
    2110:	80 68       	ori	r24, 0x80	; 128
    2112:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2114:	ea 89       	ldd	r30, Y+18	; 0x12
    2116:	fb 89       	ldd	r31, Y+19	; 0x13
    2118:	80 81       	ld	r24, Z
    211a:	8f 7d       	andi	r24, 0xDF	; 223
    211c:	80 83       	st	Z, r24
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	08 95       	ret

0000212e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	2f 93       	push	r18
    213a:	8f 93       	push	r24
    213c:	9f 93       	push	r25
    213e:	ef 93       	push	r30
    2140:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2142:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <Serial+0x10>
    2146:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <Serial+0x11>
    214a:	80 81       	ld	r24, Z
    214c:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <Serial+0x16>
    2150:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <Serial+0x17>
    2154:	82 fd       	sbrc	r24, 2
    2156:	12 c0       	rjmp	.+36     	; 0x217c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2158:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    215a:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <Serial+0x19>
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2162:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <Serial+0x1a>
    2166:	82 17       	cp	r24, r18
    2168:	51 f0       	breq	.+20     	; 0x217e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    216a:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <Serial+0x19>
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	e4 5c       	subi	r30, 0xC4	; 196
    2172:	fc 4f       	sbci	r31, 0xFC	; 252
    2174:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2176:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <Serial+0x19>
    217a:	01 c0       	rjmp	.+2      	; 0x217e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    217c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    217e:	ff 91       	pop	r31
    2180:	ef 91       	pop	r30
    2182:	9f 91       	pop	r25
    2184:	8f 91       	pop	r24
    2186:	2f 91       	pop	r18
    2188:	0f 90       	pop	r0
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	0f 90       	pop	r0
    218e:	1f 90       	pop	r1
    2190:	18 95       	reti

00002192 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2192:	1f 92       	push	r1
    2194:	0f 92       	push	r0
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	0f 92       	push	r0
    219a:	11 24       	eor	r1, r1
    219c:	2f 93       	push	r18
    219e:	3f 93       	push	r19
    21a0:	4f 93       	push	r20
    21a2:	5f 93       	push	r21
    21a4:	6f 93       	push	r22
    21a6:	7f 93       	push	r23
    21a8:	8f 93       	push	r24
    21aa:	9f 93       	push	r25
    21ac:	af 93       	push	r26
    21ae:	bf 93       	push	r27
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    21b4:	8c e3       	ldi	r24, 0x3C	; 60
    21b6:	93 e0       	ldi	r25, 0x03	; 3
    21b8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    21bc:	ff 91       	pop	r31
    21be:	ef 91       	pop	r30
    21c0:	bf 91       	pop	r27
    21c2:	af 91       	pop	r26
    21c4:	9f 91       	pop	r25
    21c6:	8f 91       	pop	r24
    21c8:	7f 91       	pop	r23
    21ca:	6f 91       	pop	r22
    21cc:	5f 91       	pop	r21
    21ce:	4f 91       	pop	r20
    21d0:	3f 91       	pop	r19
    21d2:	2f 91       	pop	r18
    21d4:	0f 90       	pop	r0
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	0f 90       	pop	r0
    21da:	1f 90       	pop	r1
    21dc:	18 95       	reti

000021de <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    21de:	8c e3       	ldi	r24, 0x3C	; 60
    21e0:	93 e0       	ldi	r25, 0x03	; 3
    21e2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN14HardwareSerial9availableEv>
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	89 2b       	or	r24, r25
    21ea:	09 f4       	brne	.+2      	; 0x21ee <_Z17Serial0_availablev+0x10>
    21ec:	20 e0       	ldi	r18, 0x00	; 0
}
    21ee:	82 2f       	mov	r24, r18
    21f0:	08 95       	ret

000021f2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    21f2:	ec e3       	ldi	r30, 0x3C	; 60
    21f4:	f3 e0       	ldi	r31, 0x03	; 3
    21f6:	13 82       	std	Z+3, r1	; 0x03
    21f8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    21fa:	88 ee       	ldi	r24, 0xE8	; 232
    21fc:	93 e0       	ldi	r25, 0x03	; 3
    21fe:	a0 e0       	ldi	r26, 0x00	; 0
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	84 83       	std	Z+4, r24	; 0x04
    2204:	95 83       	std	Z+5, r25	; 0x05
    2206:	a6 83       	std	Z+6, r26	; 0x06
    2208:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    220a:	8c e9       	ldi	r24, 0x9C	; 156
    220c:	91 e0       	ldi	r25, 0x01	; 1
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	80 83       	st	Z, r24
    2212:	85 ec       	ldi	r24, 0xC5	; 197
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	95 87       	std	Z+13, r25	; 0x0d
    2218:	84 87       	std	Z+12, r24	; 0x0c
    221a:	84 ec       	ldi	r24, 0xC4	; 196
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	97 87       	std	Z+15, r25	; 0x0f
    2220:	86 87       	std	Z+14, r24	; 0x0e
    2222:	80 ec       	ldi	r24, 0xC0	; 192
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	91 8b       	std	Z+17, r25	; 0x11
    2228:	80 8b       	std	Z+16, r24	; 0x10
    222a:	81 ec       	ldi	r24, 0xC1	; 193
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	93 8b       	std	Z+19, r25	; 0x13
    2230:	82 8b       	std	Z+18, r24	; 0x12
    2232:	82 ec       	ldi	r24, 0xC2	; 194
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	95 8b       	std	Z+21, r25	; 0x15
    2238:	84 8b       	std	Z+20, r24	; 0x14
    223a:	86 ec       	ldi	r24, 0xC6	; 198
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	97 8b       	std	Z+23, r25	; 0x17
    2240:	86 8b       	std	Z+22, r24	; 0x16
    2242:	11 8e       	std	Z+25, r1	; 0x19
    2244:	12 8e       	std	Z+26, r1	; 0x1a
    2246:	13 8e       	std	Z+27, r1	; 0x1b
    2248:	14 8e       	std	Z+28, r1	; 0x1c
    224a:	08 95       	ret

0000224c <initVariant>:
    224c:	08 95       	ret

0000224e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    224e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <init>

	initVariant();
    2252:	0e 94 26 11 	call	0x224c	; 0x224c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2256:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    225a:	c3 e9       	ldi	r28, 0x93	; 147
    225c:	df e0       	ldi	r29, 0x0F	; 15
#endif
	
	setup();
    
	for (;;) {
		loop();
    225e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <loop>
		if (serialEventRun) serialEventRun();
    2262:	20 97       	sbiw	r28, 0x00	; 0
    2264:	e1 f3       	breq	.-8      	; 0x225e <main+0x10>
    2266:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <_Z14serialEventRunv>
    226a:	f9 cf       	rjmp	.-14     	; 0x225e <main+0x10>

0000226c <_ZdlPv>:
    226c:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <free>

00002270 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	6c 01       	movw	r12, r24
    2282:	7a 01       	movw	r14, r20
    2284:	8b 01       	movw	r16, r22
    2286:	c0 e0       	ldi	r28, 0x00	; 0
    2288:	d0 e0       	ldi	r29, 0x00	; 0
    228a:	ce 15       	cp	r28, r14
    228c:	df 05       	cpc	r29, r15
    228e:	81 f0       	breq	.+32     	; 0x22b0 <_ZN5Print5writeEPKhj+0x40>
    2290:	d8 01       	movw	r26, r16
    2292:	6d 91       	ld	r22, X+
    2294:	8d 01       	movw	r16, r26
    2296:	d6 01       	movw	r26, r12
    2298:	ed 91       	ld	r30, X+
    229a:	fc 91       	ld	r31, X
    229c:	01 90       	ld	r0, Z+
    229e:	f0 81       	ld	r31, Z
    22a0:	e0 2d       	mov	r30, r0
    22a2:	c6 01       	movw	r24, r12
    22a4:	09 95       	icall
    22a6:	89 2b       	or	r24, r25
    22a8:	11 f0       	breq	.+4      	; 0x22ae <_ZN5Print5writeEPKhj+0x3e>
    22aa:	21 96       	adiw	r28, 0x01	; 1
    22ac:	ee cf       	rjmp	.-36     	; 0x228a <_ZN5Print5writeEPKhj+0x1a>
    22ae:	7e 01       	movw	r14, r28
    22b0:	c7 01       	movw	r24, r14
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	1f 91       	pop	r17
    22b8:	0f 91       	pop	r16
    22ba:	ff 90       	pop	r15
    22bc:	ef 90       	pop	r14
    22be:	df 90       	pop	r13
    22c0:	cf 90       	pop	r12
    22c2:	08 95       	ret

000022c4 <_ZN5Print5writeEPKc>:
    22c4:	61 15       	cp	r22, r1
    22c6:	71 05       	cpc	r23, r1
    22c8:	79 f0       	breq	.+30     	; 0x22e8 <_ZN5Print5writeEPKc+0x24>
    22ca:	fb 01       	movw	r30, r22
    22cc:	01 90       	ld	r0, Z+
    22ce:	00 20       	and	r0, r0
    22d0:	e9 f7       	brne	.-6      	; 0x22cc <_ZN5Print5writeEPKc+0x8>
    22d2:	31 97       	sbiw	r30, 0x01	; 1
    22d4:	af 01       	movw	r20, r30
    22d6:	46 1b       	sub	r20, r22
    22d8:	57 0b       	sbc	r21, r23
    22da:	dc 01       	movw	r26, r24
    22dc:	ed 91       	ld	r30, X+
    22de:	fc 91       	ld	r31, X
    22e0:	02 80       	ldd	r0, Z+2	; 0x02
    22e2:	f3 81       	ldd	r31, Z+3	; 0x03
    22e4:	e0 2d       	mov	r30, r0
    22e6:	09 94       	ijmp
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	08 95       	ret

000022ee <_ZN5Print5printEPKc>:
    22ee:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_ZN5Print5writeEPKc>

000022f2 <_ZN5Print5printEc>:
    22f2:	dc 01       	movw	r26, r24
    22f4:	ed 91       	ld	r30, X+
    22f6:	fc 91       	ld	r31, X
    22f8:	01 90       	ld	r0, Z+
    22fa:	f0 81       	ld	r31, Z
    22fc:	e0 2d       	mov	r30, r0
    22fe:	09 94       	ijmp

00002300 <_ZN5Print7printlnEv>:
    2300:	6a ea       	ldi	r22, 0xAA	; 170
    2302:	71 e0       	ldi	r23, 0x01	; 1
    2304:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_ZN5Print5writeEPKc>

00002308 <_ZN5Print7printlnEPKc>:
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	ec 01       	movw	r28, r24
    2312:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Print5writeEPKc>
    2316:	8c 01       	movw	r16, r24
    2318:	ce 01       	movw	r24, r28
    231a:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN5Print7printlnEv>
    231e:	80 0f       	add	r24, r16
    2320:	91 1f       	adc	r25, r17
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	08 95       	ret

0000232c <_ZN5Print11printNumberEmh>:
    232c:	8f 92       	push	r8
    232e:	9f 92       	push	r9
    2330:	af 92       	push	r10
    2332:	bf 92       	push	r11
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	a1 97       	sbiw	r28, 0x21	; 33
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	7c 01       	movw	r14, r24
    2352:	fa 01       	movw	r30, r20
    2354:	cb 01       	movw	r24, r22
    2356:	19 a2       	std	Y+33, r1	; 0x21
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	08 f4       	brcc	.+2      	; 0x235e <_ZN5Print11printNumberEmh+0x32>
    235c:	2a e0       	ldi	r18, 0x0A	; 10
    235e:	8e 01       	movw	r16, r28
    2360:	0f 5d       	subi	r16, 0xDF	; 223
    2362:	1f 4f       	sbci	r17, 0xFF	; 255
    2364:	82 2e       	mov	r8, r18
    2366:	91 2c       	mov	r9, r1
    2368:	a1 2c       	mov	r10, r1
    236a:	b1 2c       	mov	r11, r1
    236c:	bf 01       	movw	r22, r30
    236e:	a5 01       	movw	r20, r10
    2370:	94 01       	movw	r18, r8
    2372:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__udivmodsi4>
    2376:	f9 01       	movw	r30, r18
    2378:	ca 01       	movw	r24, r20
    237a:	01 50       	subi	r16, 0x01	; 1
    237c:	11 09       	sbc	r17, r1
    237e:	6a 30       	cpi	r22, 0x0A	; 10
    2380:	10 f4       	brcc	.+4      	; 0x2386 <_ZN5Print11printNumberEmh+0x5a>
    2382:	60 5d       	subi	r22, 0xD0	; 208
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <_ZN5Print11printNumberEmh+0x5c>
    2386:	69 5c       	subi	r22, 0xC9	; 201
    2388:	d8 01       	movw	r26, r16
    238a:	6c 93       	st	X, r22
    238c:	23 2b       	or	r18, r19
    238e:	24 2b       	or	r18, r20
    2390:	25 2b       	or	r18, r21
    2392:	61 f7       	brne	.-40     	; 0x236c <_ZN5Print11printNumberEmh+0x40>
    2394:	b8 01       	movw	r22, r16
    2396:	c7 01       	movw	r24, r14
    2398:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN5Print5writeEPKc>
    239c:	a1 96       	adiw	r28, 0x21	; 33
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	bf 90       	pop	r11
    23b6:	af 90       	pop	r10
    23b8:	9f 90       	pop	r9
    23ba:	8f 90       	pop	r8
    23bc:	08 95       	ret

000023be <_ZN5Print5printEmi>:
    23be:	21 15       	cp	r18, r1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 f4       	brne	.+16     	; 0x23d4 <_ZN5Print5printEmi+0x16>
    23c4:	dc 01       	movw	r26, r24
    23c6:	ed 91       	ld	r30, X+
    23c8:	fc 91       	ld	r31, X
    23ca:	01 90       	ld	r0, Z+
    23cc:	f0 81       	ld	r31, Z
    23ce:	e0 2d       	mov	r30, r0
    23d0:	64 2f       	mov	r22, r20
    23d2:	09 94       	ijmp
    23d4:	0c 94 96 11 	jmp	0x232c	; 0x232c <_ZN5Print11printNumberEmh>

000023d8 <_ZN5Print5printEji>:
    23d8:	9a 01       	movw	r18, r20
    23da:	ab 01       	movw	r20, r22
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	0c 94 df 11 	jmp	0x23be	; 0x23be <_ZN5Print5printEmi>

000023e4 <_ZN5Print7printlnEmi>:
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	ec 01       	movw	r28, r24
    23ee:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN5Print5printEmi>
    23f2:	8c 01       	movw	r16, r24
    23f4:	ce 01       	movw	r24, r28
    23f6:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN5Print7printlnEv>
    23fa:	80 0f       	add	r24, r16
    23fc:	91 1f       	adc	r25, r17
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret

00002408 <_ZN5Print5printEli>:
    2408:	cf 92       	push	r12
    240a:	df 92       	push	r13
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	21 15       	cp	r18, r1
    241a:	31 05       	cpc	r19, r1
    241c:	81 f4       	brne	.+32     	; 0x243e <_ZN5Print5printEli+0x36>
    241e:	dc 01       	movw	r26, r24
    2420:	ed 91       	ld	r30, X+
    2422:	fc 91       	ld	r31, X
    2424:	01 90       	ld	r0, Z+
    2426:	f0 81       	ld	r31, Z
    2428:	e0 2d       	mov	r30, r0
    242a:	64 2f       	mov	r22, r20
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ff 90       	pop	r15
    2436:	ef 90       	pop	r14
    2438:	df 90       	pop	r13
    243a:	cf 90       	pop	r12
    243c:	09 94       	ijmp
    243e:	2a 30       	cpi	r18, 0x0A	; 10
    2440:	31 05       	cpc	r19, r1
    2442:	01 f5       	brne	.+64     	; 0x2484 <_ZN5Print5printEli+0x7c>
    2444:	77 ff       	sbrs	r23, 7
    2446:	1d c0       	rjmp	.+58     	; 0x2482 <_ZN5Print5printEli+0x7a>
    2448:	6a 01       	movw	r12, r20
    244a:	7b 01       	movw	r14, r22
    244c:	ec 01       	movw	r28, r24
    244e:	6d e2       	ldi	r22, 0x2D	; 45
    2450:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEc>
    2454:	8c 01       	movw	r16, r24
    2456:	44 27       	eor	r20, r20
    2458:	55 27       	eor	r21, r21
    245a:	ba 01       	movw	r22, r20
    245c:	4c 19       	sub	r20, r12
    245e:	5d 09       	sbc	r21, r13
    2460:	6e 09       	sbc	r22, r14
    2462:	7f 09       	sbc	r23, r15
    2464:	2a e0       	ldi	r18, 0x0A	; 10
    2466:	ce 01       	movw	r24, r28
    2468:	0e 94 96 11 	call	0x232c	; 0x232c <_ZN5Print11printNumberEmh>
    246c:	80 0f       	add	r24, r16
    246e:	91 1f       	adc	r25, r17
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	ff 90       	pop	r15
    247a:	ef 90       	pop	r14
    247c:	df 90       	pop	r13
    247e:	cf 90       	pop	r12
    2480:	08 95       	ret
    2482:	2a e0       	ldi	r18, 0x0A	; 10
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	0c 94 96 11 	jmp	0x232c	; 0x232c <_ZN5Print11printNumberEmh>

00002498 <_ZN5Print5printEii>:
    2498:	9a 01       	movw	r18, r20
    249a:	ab 01       	movw	r20, r22
    249c:	77 0f       	add	r23, r23
    249e:	66 0b       	sbc	r22, r22
    24a0:	77 0b       	sbc	r23, r23
    24a2:	0c 94 04 12 	jmp	0x2408	; 0x2408 <_ZN5Print5printEli>

000024a6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    24a6:	7f 92       	push	r7
    24a8:	8f 92       	push	r8
    24aa:	9f 92       	push	r9
    24ac:	af 92       	push	r10
    24ae:	bf 92       	push	r11
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	8c 01       	movw	r16, r24
    24c2:	6a 01       	movw	r12, r20
    24c4:	7b 01       	movw	r14, r22
    24c6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    24c8:	9a 01       	movw	r18, r20
    24ca:	ab 01       	movw	r20, r22
    24cc:	c7 01       	movw	r24, r14
    24ce:	b6 01       	movw	r22, r12
    24d0:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__unordsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	19 f0       	breq	.+6      	; 0x24de <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    24d8:	6d ea       	ldi	r22, 0xAD	; 173
    24da:	71 e0       	ldi	r23, 0x01	; 1
    24dc:	27 c0       	rjmp	.+78     	; 0x252c <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    24de:	46 01       	movw	r8, r12
    24e0:	57 01       	movw	r10, r14
    24e2:	e8 94       	clt
    24e4:	b7 f8       	bld	r11, 7
    24e6:	2f ef       	ldi	r18, 0xFF	; 255
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	4f e7       	ldi	r20, 0x7F	; 127
    24ec:	5f e7       	ldi	r21, 0x7F	; 127
    24ee:	c5 01       	movw	r24, r10
    24f0:	b4 01       	movw	r22, r8
    24f2:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__unordsf2>
    24f6:	81 11       	cpse	r24, r1
    24f8:	0d c0       	rjmp	.+26     	; 0x2514 <_ZN5Print10printFloatEdh+0x6e>
    24fa:	2f ef       	ldi	r18, 0xFF	; 255
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	5f e7       	ldi	r21, 0x7F	; 127
    2502:	c5 01       	movw	r24, r10
    2504:	b4 01       	movw	r22, r8
    2506:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
    250a:	18 16       	cp	r1, r24
    250c:	1c f4       	brge	.+6      	; 0x2514 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    250e:	61 eb       	ldi	r22, 0xB1	; 177
    2510:	71 e0       	ldi	r23, 0x01	; 1
    2512:	0c c0       	rjmp	.+24     	; 0x252c <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2514:	2f ef       	ldi	r18, 0xFF	; 255
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	5f e4       	ldi	r21, 0x4F	; 79
    251c:	c7 01       	movw	r24, r14
    251e:	b6 01       	movw	r22, r12
    2520:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__gesf2>
    2524:	18 16       	cp	r1, r24
    2526:	94 f4       	brge	.+36     	; 0x254c <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2528:	65 eb       	ldi	r22, 0xB5	; 181
    252a:	71 e0       	ldi	r23, 0x01	; 1
    252c:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	df 90       	pop	r13
    253c:	cf 90       	pop	r12
    253e:	bf 90       	pop	r11
    2540:	af 90       	pop	r10
    2542:	9f 90       	pop	r9
    2544:	8f 90       	pop	r8
    2546:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2548:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    254c:	2f ef       	ldi	r18, 0xFF	; 255
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	5f ec       	ldi	r21, 0xCF	; 207
    2554:	c7 01       	movw	r24, r14
    2556:	b6 01       	movw	r22, r12
    2558:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
    255c:	87 fd       	sbrc	r24, 7
    255e:	e4 cf       	rjmp	.-56     	; 0x2528 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	a9 01       	movw	r20, r18
    2566:	c7 01       	movw	r24, r14
    2568:	b6 01       	movw	r22, r12
    256a:	0e 94 b6 0b 	call	0x176c	; 0x176c <__cmpsf2>
    256e:	87 ff       	sbrs	r24, 7
    2570:	0a c0       	rjmp	.+20     	; 0x2586 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2572:	6d e2       	ldi	r22, 0x2D	; 45
    2574:	c8 01       	movw	r24, r16
    2576:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEc>
    257a:	ec 01       	movw	r28, r24
     number = -number;
    257c:	f7 fa       	bst	r15, 7
    257e:	f0 94       	com	r15
    2580:	f7 f8       	bld	r15, 7
    2582:	f0 94       	com	r15
    2584:	02 c0       	rjmp	.+4      	; 0x258a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2586:	c0 e0       	ldi	r28, 0x00	; 0
    2588:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    258a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2594:	7b 14       	cp	r7, r11
    2596:	41 f0       	breq	.+16     	; 0x25a8 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    25a4:	b3 94       	inc	r11
    25a6:	f6 cf       	rjmp	.-20     	; 0x2594 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    25a8:	a7 01       	movw	r20, r14
    25aa:	96 01       	movw	r18, r12
    25ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__addsf3>
    25b0:	6b 01       	movw	r12, r22
    25b2:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    25b4:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fixunssfsi>
    25b8:	4b 01       	movw	r8, r22
    25ba:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    25bc:	2a e0       	ldi	r18, 0x0A	; 10
    25be:	ab 01       	movw	r20, r22
    25c0:	bc 01       	movw	r22, r24
    25c2:	c8 01       	movw	r24, r16
    25c4:	0e 94 96 11 	call	0x232c	; 0x232c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    25c8:	c8 0f       	add	r28, r24
    25ca:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    25cc:	77 20       	and	r7, r7
    25ce:	b9 f1       	breq	.+110    	; 0x263e <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    25d0:	c5 01       	movw	r24, r10
    25d2:	b4 01       	movw	r22, r8
    25d4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatunsisf>
    25d8:	9b 01       	movw	r18, r22
    25da:	ac 01       	movw	r20, r24
    25dc:	c7 01       	movw	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__subsf3>
    25e4:	6b 01       	movw	r12, r22
    25e6:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    25e8:	6e e2       	ldi	r22, 0x2E	; 46
    25ea:	c8 01       	movw	r24, r16
    25ec:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEc>
    25f0:	c8 0f       	add	r28, r24
    25f2:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	c7 01       	movw	r24, r14
    25fe:	b6 01       	movw	r22, r12
    2600:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
    2604:	4b 01       	movw	r8, r22
    2606:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2608:	0e 94 34 0c 	call	0x1868	; 0x1868 <__fixunssfsi>
    260c:	6b 01       	movw	r12, r22
    260e:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2610:	4a e0       	ldi	r20, 0x0A	; 10
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	c8 01       	movw	r24, r16
    2616:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_ZN5Print5printEji>
    261a:	c8 0f       	add	r28, r24
    261c:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    261e:	b6 01       	movw	r22, r12
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatunsisf>
    2628:	9b 01       	movw	r18, r22
    262a:	ac 01       	movw	r20, r24
    262c:	c5 01       	movw	r24, r10
    262e:	b4 01       	movw	r22, r8
    2630:	0e 94 49 0b 	call	0x1692	; 0x1692 <__subsf3>
    2634:	6b 01       	movw	r12, r22
    2636:	7c 01       	movw	r14, r24
    2638:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    263a:	71 10       	cpse	r7, r1
    263c:	db cf       	rjmp	.-74     	; 0x25f4 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    263e:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	df 90       	pop	r13
    264e:	cf 90       	pop	r12
    2650:	bf 90       	pop	r11
    2652:	af 90       	pop	r10
    2654:	9f 90       	pop	r9
    2656:	8f 90       	pop	r8
    2658:	7f 90       	pop	r7
    265a:	08 95       	ret

0000265c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    265c:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <_ZN5Print10printFloatEdh>

00002660 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    266a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <_ZN5Print10printFloatEdh>
    266e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2670:	ce 01       	movw	r24, r28
    2672:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN5Print7printlnEv>
  return n;
}
    2676:	80 0f       	add	r24, r16
    2678:	91 1f       	adc	r25, r17
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    2684:	fc 01       	movw	r30, r24
    2686:	44 83       	std	Z+4, r20	; 0x04
    2688:	55 83       	std	Z+5, r21	; 0x05
    268a:	66 83       	std	Z+6, r22	; 0x06
    268c:	77 83       	std	Z+7, r23	; 0x07
    268e:	08 95       	ret

00002690 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2690:	1f 92       	push	r1
    2692:	0f 92       	push	r0
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	0f 92       	push	r0
    2698:	11 24       	eor	r1, r1
    269a:	2f 93       	push	r18
    269c:	3f 93       	push	r19
    269e:	8f 93       	push	r24
    26a0:	9f 93       	push	r25
    26a2:	af 93       	push	r26
    26a4:	bf 93       	push	r27
    26a6:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <timer0_millis>
    26aa:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <timer0_millis+0x1>
    26ae:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <timer0_millis+0x2>
    26b2:	b0 91 dd 03 	lds	r27, 0x03DD	; 0x8003dd <timer0_millis+0x3>
    26b6:	30 91 d9 03 	lds	r19, 0x03D9	; 0x8003d9 <timer0_fract>
    26ba:	23 e0       	ldi	r18, 0x03	; 3
    26bc:	23 0f       	add	r18, r19
    26be:	2d 37       	cpi	r18, 0x7D	; 125
    26c0:	20 f4       	brcc	.+8      	; 0x26ca <__vector_16+0x3a>
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	a1 1d       	adc	r26, r1
    26c6:	b1 1d       	adc	r27, r1
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <__vector_16+0x44>
    26ca:	26 e8       	ldi	r18, 0x86	; 134
    26cc:	23 0f       	add	r18, r19
    26ce:	02 96       	adiw	r24, 0x02	; 2
    26d0:	a1 1d       	adc	r26, r1
    26d2:	b1 1d       	adc	r27, r1
    26d4:	20 93 d9 03 	sts	0x03D9, r18	; 0x8003d9 <timer0_fract>
    26d8:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <timer0_millis>
    26dc:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <timer0_millis+0x1>
    26e0:	a0 93 dc 03 	sts	0x03DC, r26	; 0x8003dc <timer0_millis+0x2>
    26e4:	b0 93 dd 03 	sts	0x03DD, r27	; 0x8003dd <timer0_millis+0x3>
    26e8:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <timer0_overflow_count>
    26ec:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <timer0_overflow_count+0x1>
    26f0:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <timer0_overflow_count+0x2>
    26f4:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <timer0_overflow_count+0x3>
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	a1 1d       	adc	r26, r1
    26fc:	b1 1d       	adc	r27, r1
    26fe:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <timer0_overflow_count>
    2702:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <timer0_overflow_count+0x1>
    2706:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <timer0_overflow_count+0x2>
    270a:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <timer0_overflow_count+0x3>
    270e:	bf 91       	pop	r27
    2710:	af 91       	pop	r26
    2712:	9f 91       	pop	r25
    2714:	8f 91       	pop	r24
    2716:	3f 91       	pop	r19
    2718:	2f 91       	pop	r18
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti

00002724 <micros>:
    2724:	3f b7       	in	r19, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <timer0_overflow_count>
    272c:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <timer0_overflow_count+0x1>
    2730:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <timer0_overflow_count+0x2>
    2734:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <timer0_overflow_count+0x3>
    2738:	26 b5       	in	r18, 0x26	; 38
    273a:	a8 9b       	sbis	0x15, 0	; 21
    273c:	05 c0       	rjmp	.+10     	; 0x2748 <micros+0x24>
    273e:	2f 3f       	cpi	r18, 0xFF	; 255
    2740:	19 f0       	breq	.+6      	; 0x2748 <micros+0x24>
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	a1 1d       	adc	r26, r1
    2746:	b1 1d       	adc	r27, r1
    2748:	3f bf       	out	0x3f, r19	; 63
    274a:	ba 2f       	mov	r27, r26
    274c:	a9 2f       	mov	r26, r25
    274e:	98 2f       	mov	r25, r24
    2750:	88 27       	eor	r24, r24
    2752:	82 0f       	add	r24, r18
    2754:	91 1d       	adc	r25, r1
    2756:	a1 1d       	adc	r26, r1
    2758:	b1 1d       	adc	r27, r1
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	42 e0       	ldi	r20, 0x02	; 2
    2760:	66 0f       	add	r22, r22
    2762:	77 1f       	adc	r23, r23
    2764:	88 1f       	adc	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	4a 95       	dec	r20
    276a:	d1 f7       	brne	.-12     	; 0x2760 <micros+0x3c>
    276c:	08 95       	ret

0000276e <delay>:
    276e:	8f 92       	push	r8
    2770:	9f 92       	push	r9
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	6b 01       	movw	r12, r22
    2780:	7c 01       	movw	r14, r24
    2782:	0e 94 92 13 	call	0x2724	; 0x2724 <micros>
    2786:	4b 01       	movw	r8, r22
    2788:	5c 01       	movw	r10, r24
    278a:	c1 14       	cp	r12, r1
    278c:	d1 04       	cpc	r13, r1
    278e:	e1 04       	cpc	r14, r1
    2790:	f1 04       	cpc	r15, r1
    2792:	01 f1       	breq	.+64     	; 0x27d4 <delay+0x66>
    2794:	0e 94 21 15 	call	0x2a42	; 0x2a42 <yield>
    2798:	0e 94 92 13 	call	0x2724	; 0x2724 <micros>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	88 19       	sub	r24, r8
    27a2:	99 09       	sbc	r25, r9
    27a4:	aa 09       	sbc	r26, r10
    27a6:	bb 09       	sbc	r27, r11
    27a8:	88 3e       	cpi	r24, 0xE8	; 232
    27aa:	93 40       	sbci	r25, 0x03	; 3
    27ac:	a1 05       	cpc	r26, r1
    27ae:	b1 05       	cpc	r27, r1
    27b0:	60 f3       	brcs	.-40     	; 0x278a <delay+0x1c>
    27b2:	21 e0       	ldi	r18, 0x01	; 1
    27b4:	c2 1a       	sub	r12, r18
    27b6:	d1 08       	sbc	r13, r1
    27b8:	e1 08       	sbc	r14, r1
    27ba:	f1 08       	sbc	r15, r1
    27bc:	88 ee       	ldi	r24, 0xE8	; 232
    27be:	88 0e       	add	r8, r24
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	98 1e       	adc	r9, r24
    27c4:	a1 1c       	adc	r10, r1
    27c6:	b1 1c       	adc	r11, r1
    27c8:	c1 14       	cp	r12, r1
    27ca:	d1 04       	cpc	r13, r1
    27cc:	e1 04       	cpc	r14, r1
    27ce:	f1 04       	cpc	r15, r1
    27d0:	19 f7       	brne	.-58     	; 0x2798 <delay+0x2a>
    27d2:	db cf       	rjmp	.-74     	; 0x278a <delay+0x1c>
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	df 90       	pop	r13
    27da:	cf 90       	pop	r12
    27dc:	bf 90       	pop	r11
    27de:	af 90       	pop	r10
    27e0:	9f 90       	pop	r9
    27e2:	8f 90       	pop	r8
    27e4:	08 95       	ret

000027e6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    27e6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    27e8:	84 b5       	in	r24, 0x24	; 36
    27ea:	82 60       	ori	r24, 0x02	; 2
    27ec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    27ee:	84 b5       	in	r24, 0x24	; 36
    27f0:	81 60       	ori	r24, 0x01	; 1
    27f2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    27f4:	85 b5       	in	r24, 0x25	; 37
    27f6:	82 60       	ori	r24, 0x02	; 2
    27f8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    27fa:	85 b5       	in	r24, 0x25	; 37
    27fc:	81 60       	ori	r24, 0x01	; 1
    27fe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2800:	ee e6       	ldi	r30, 0x6E	; 110
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	81 60       	ori	r24, 0x01	; 1
    2808:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    280a:	e1 e8       	ldi	r30, 0x81	; 129
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2810:	80 81       	ld	r24, Z
    2812:	82 60       	ori	r24, 0x02	; 2
    2814:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2816:	80 81       	ld	r24, Z
    2818:	81 60       	ori	r24, 0x01	; 1
    281a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    281c:	e0 e8       	ldi	r30, 0x80	; 128
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	81 60       	ori	r24, 0x01	; 1
    2824:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2826:	e1 eb       	ldi	r30, 0xB1	; 177
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	84 60       	ori	r24, 0x04	; 4
    282e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2830:	e0 eb       	ldi	r30, 0xB0	; 176
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	81 60       	ori	r24, 0x01	; 1
    2838:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    283a:	ea e7       	ldi	r30, 0x7A	; 122
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	84 60       	ori	r24, 0x04	; 4
    2842:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2844:	80 81       	ld	r24, Z
    2846:	82 60       	ori	r24, 0x02	; 2
    2848:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    284a:	80 81       	ld	r24, Z
    284c:	81 60       	ori	r24, 0x01	; 1
    284e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2850:	80 81       	ld	r24, Z
    2852:	80 68       	ori	r24, 0x80	; 128
    2854:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2856:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    285a:	08 95       	ret

0000285c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    285c:	83 30       	cpi	r24, 0x03	; 3
    285e:	81 f0       	breq	.+32     	; 0x2880 <turnOffPWM+0x24>
    2860:	28 f4       	brcc	.+10     	; 0x286c <turnOffPWM+0x10>
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	99 f0       	breq	.+38     	; 0x288c <turnOffPWM+0x30>
    2866:	82 30       	cpi	r24, 0x02	; 2
    2868:	a1 f0       	breq	.+40     	; 0x2892 <turnOffPWM+0x36>
    286a:	08 95       	ret
    286c:	87 30       	cpi	r24, 0x07	; 7
    286e:	a9 f0       	breq	.+42     	; 0x289a <turnOffPWM+0x3e>
    2870:	88 30       	cpi	r24, 0x08	; 8
    2872:	b9 f0       	breq	.+46     	; 0x28a2 <turnOffPWM+0x46>
    2874:	84 30       	cpi	r24, 0x04	; 4
    2876:	d1 f4       	brne	.+52     	; 0x28ac <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2878:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    287c:	8f 7d       	andi	r24, 0xDF	; 223
    287e:	03 c0       	rjmp	.+6      	; 0x2886 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2880:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2884:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2886:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    288a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    288c:	84 b5       	in	r24, 0x24	; 36
    288e:	8f 77       	andi	r24, 0x7F	; 127
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2892:	84 b5       	in	r24, 0x24	; 36
    2894:	8f 7d       	andi	r24, 0xDF	; 223
    2896:	84 bd       	out	0x24, r24	; 36
    2898:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    289a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    289e:	8f 77       	andi	r24, 0x7F	; 127
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    28a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    28a6:	8f 7d       	andi	r24, 0xDF	; 223
    28a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    28ac:	08 95       	ret

000028ae <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	fc 01       	movw	r30, r24
    28b6:	ec 5a       	subi	r30, 0xAC	; 172
    28b8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ba:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    28bc:	fc 01       	movw	r30, r24
    28be:	e8 59       	subi	r30, 0x98	; 152
    28c0:	fe 4f       	sbci	r31, 0xFE	; 254
    28c2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    28c4:	88 23       	and	r24, r24
    28c6:	61 f1       	breq	.+88     	; 0x2920 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	fc 01       	movw	r30, r24
    28d0:	e0 57       	subi	r30, 0x70	; 112
    28d2:	fe 4f       	sbci	r31, 0xFE	; 254
    28d4:	c5 91       	lpm	r28, Z+
    28d6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    28d8:	fc 01       	movw	r30, r24
    28da:	ea 57       	subi	r30, 0x7A	; 122
    28dc:	fe 4f       	sbci	r31, 0xFE	; 254
    28de:	a5 91       	lpm	r26, Z+
    28e0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    28e2:	61 11       	cpse	r22, r1
    28e4:	09 c0       	rjmp	.+18     	; 0x28f8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    28e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    28e8:	f8 94       	cli
		*reg &= ~bit;
    28ea:	88 81       	ld	r24, Y
    28ec:	20 95       	com	r18
    28ee:	82 23       	and	r24, r18
    28f0:	88 83       	st	Y, r24
		*out &= ~bit;
    28f2:	ec 91       	ld	r30, X
    28f4:	2e 23       	and	r18, r30
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    28f8:	62 30       	cpi	r22, 0x02	; 2
    28fa:	61 f4       	brne	.+24     	; 0x2914 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    28fc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    28fe:	f8 94       	cli
		*reg &= ~bit;
    2900:	88 81       	ld	r24, Y
    2902:	32 2f       	mov	r19, r18
    2904:	30 95       	com	r19
    2906:	83 23       	and	r24, r19
    2908:	88 83       	st	Y, r24
		*out |= bit;
    290a:	ec 91       	ld	r30, X
    290c:	2e 2b       	or	r18, r30
    290e:	2c 93       	st	X, r18
		SREG = oldSREG;
    2910:	9f bf       	out	0x3f, r25	; 63
    2912:	06 c0       	rjmp	.+12     	; 0x2920 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2914:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2916:	f8 94       	cli
		*reg |= bit;
    2918:	e8 81       	ld	r30, Y
    291a:	2e 2b       	or	r18, r30
    291c:	28 83       	st	Y, r18
		SREG = oldSREG;
    291e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	08 95       	ret

00002926 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2926:	1f 93       	push	r17
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	f9 01       	movw	r30, r18
    2932:	e0 5c       	subi	r30, 0xC0	; 192
    2934:	fe 4f       	sbci	r31, 0xFE	; 254
    2936:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2938:	f9 01       	movw	r30, r18
    293a:	ec 5a       	subi	r30, 0xAC	; 172
    293c:	fe 4f       	sbci	r31, 0xFE	; 254
    293e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2940:	f9 01       	movw	r30, r18
    2942:	e8 59       	subi	r30, 0x98	; 152
    2944:	fe 4f       	sbci	r31, 0xFE	; 254
    2946:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2948:	cc 23       	and	r28, r28
    294a:	c1 f0       	breq	.+48     	; 0x297c <digitalWrite+0x56>
    294c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    294e:	81 11       	cpse	r24, r1
    2950:	0e 94 2e 14 	call	0x285c	; 0x285c <turnOffPWM>

	out = portOutputRegister(port);
    2954:	ec 2f       	mov	r30, r28
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	ee 0f       	add	r30, r30
    295a:	ff 1f       	adc	r31, r31
    295c:	ea 57       	subi	r30, 0x7A	; 122
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
    2960:	a5 91       	lpm	r26, Z+
    2962:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2964:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2966:	f8 94       	cli

	if (val == LOW) {
    2968:	11 11       	cpse	r17, r1
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <digitalWrite+0x4e>
		*out &= ~bit;
    296c:	8c 91       	ld	r24, X
    296e:	d0 95       	com	r29
    2970:	d8 23       	and	r29, r24
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2974:	ec 91       	ld	r30, X
    2976:	de 2b       	or	r29, r30
    2978:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    297a:	9f bf       	out	0x3f, r25	; 63
}
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	08 95       	ret

00002984 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	f9 01       	movw	r30, r18
    298e:	e0 5c       	subi	r30, 0xC0	; 192
    2990:	fe 4f       	sbci	r31, 0xFE	; 254
    2992:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2994:	f9 01       	movw	r30, r18
    2996:	ec 5a       	subi	r30, 0xAC	; 172
    2998:	fe 4f       	sbci	r31, 0xFE	; 254
    299a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    299c:	f9 01       	movw	r30, r18
    299e:	e8 59       	subi	r30, 0x98	; 152
    29a0:	fe 4f       	sbci	r31, 0xFE	; 254
    29a2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    29a4:	cc 23       	and	r28, r28
    29a6:	91 f0       	breq	.+36     	; 0x29cc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    29a8:	81 11       	cpse	r24, r1
    29aa:	0e 94 2e 14 	call	0x285c	; 0x285c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    29ae:	ec 2f       	mov	r30, r28
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	e4 58       	subi	r30, 0x84	; 132
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ba:	a5 91       	lpm	r26, Z+
    29bc:	b4 91       	lpm	r27, Z
    29be:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    29c0:	ed 23       	and	r30, r29
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	21 f4       	brne	.+8      	; 0x29d0 <digitalRead+0x4c>
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <digitalRead+0x4c>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	08 95       	ret

000029d6 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    29d6:	cf 93       	push	r28
  uint8_t sreg = SREG;
    29d8:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    29da:	f8 94       	cli
  if (!initialized) {
    29dc:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_ZN8SPIClass11initializedE>
    29e0:	81 11       	cpse	r24, r1
    29e2:	27 c0       	rjmp	.+78     	; 0x2a32 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    29e4:	e2 e7       	ldi	r30, 0x72	; 114
    29e6:	f1 e0       	ldi	r31, 0x01	; 1
    29e8:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    29ea:	ee e5       	ldi	r30, 0x5E	; 94
    29ec:	f1 e0       	ldi	r31, 0x01	; 1
    29ee:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    29f0:	e8 2f       	mov	r30, r24
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	ee 0f       	add	r30, r30
    29f6:	ff 1f       	adc	r31, r31
    29f8:	e0 57       	subi	r30, 0x70	; 112
    29fa:	fe 4f       	sbci	r31, 0xFE	; 254
    29fc:	a5 91       	lpm	r26, Z+
    29fe:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2a00:	ec 91       	ld	r30, X
    2a02:	e9 23       	and	r30, r25
    2a04:	21 f4       	brne	.+8      	; 0x2a0e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	8a e0       	ldi	r24, 0x0A	; 10
    2a0a:	0e 94 93 14 	call	0x2926	; 0x2926 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	8a e0       	ldi	r24, 0x0A	; 10
    2a12:	0e 94 57 14 	call	0x28ae	; 0x28ae <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2a16:	8c b5       	in	r24, 0x2c	; 44
    2a18:	80 61       	ori	r24, 0x10	; 16
    2a1a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2a1c:	8c b5       	in	r24, 0x2c	; 44
    2a1e:	80 64       	ori	r24, 0x40	; 64
    2a20:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2a22:	61 e0       	ldi	r22, 0x01	; 1
    2a24:	8d e0       	ldi	r24, 0x0D	; 13
    2a26:	0e 94 57 14 	call	0x28ae	; 0x28ae <pinMode>
    pinMode(MOSI, OUTPUT);
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	8b e0       	ldi	r24, 0x0B	; 11
    2a2e:	0e 94 57 14 	call	0x28ae	; 0x28ae <pinMode>
  }
  initialized++; // reference count
    2a32:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_ZN8SPIClass11initializedE>
    2a36:	8f 5f       	subi	r24, 0xFF	; 255
    2a38:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2a3c:	cf bf       	out	0x3f, r28	; 63
}
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2a42:	08 95       	ret

00002a44 <__unordsf2>:
    2a44:	0e 94 b7 0c 	call	0x196e	; 0x196e <__fp_cmp>
    2a48:	88 0b       	sbc	r24, r24
    2a4a:	99 0b       	sbc	r25, r25
    2a4c:	08 95       	ret

00002a4e <__udivmodsi4>:
    2a4e:	a1 e2       	ldi	r26, 0x21	; 33
    2a50:	1a 2e       	mov	r1, r26
    2a52:	aa 1b       	sub	r26, r26
    2a54:	bb 1b       	sub	r27, r27
    2a56:	fd 01       	movw	r30, r26
    2a58:	0d c0       	rjmp	.+26     	; 0x2a74 <__udivmodsi4_ep>

00002a5a <__udivmodsi4_loop>:
    2a5a:	aa 1f       	adc	r26, r26
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	ee 1f       	adc	r30, r30
    2a60:	ff 1f       	adc	r31, r31
    2a62:	a2 17       	cp	r26, r18
    2a64:	b3 07       	cpc	r27, r19
    2a66:	e4 07       	cpc	r30, r20
    2a68:	f5 07       	cpc	r31, r21
    2a6a:	20 f0       	brcs	.+8      	; 0x2a74 <__udivmodsi4_ep>
    2a6c:	a2 1b       	sub	r26, r18
    2a6e:	b3 0b       	sbc	r27, r19
    2a70:	e4 0b       	sbc	r30, r20
    2a72:	f5 0b       	sbc	r31, r21

00002a74 <__udivmodsi4_ep>:
    2a74:	66 1f       	adc	r22, r22
    2a76:	77 1f       	adc	r23, r23
    2a78:	88 1f       	adc	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	1a 94       	dec	r1
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <__udivmodsi4_loop>
    2a80:	60 95       	com	r22
    2a82:	70 95       	com	r23
    2a84:	80 95       	com	r24
    2a86:	90 95       	com	r25
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	bd 01       	movw	r22, r26
    2a8e:	cf 01       	movw	r24, r30
    2a90:	08 95       	ret

00002a92 <__divmodsi4>:
    2a92:	05 2e       	mov	r0, r21
    2a94:	97 fb       	bst	r25, 7
    2a96:	1e f4       	brtc	.+6      	; 0x2a9e <__divmodsi4+0xc>
    2a98:	00 94       	com	r0
    2a9a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__negsi2>
    2a9e:	57 fd       	sbrc	r21, 7
    2aa0:	07 d0       	rcall	.+14     	; 0x2ab0 <__divmodsi4_neg2>
    2aa2:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__udivmodsi4>
    2aa6:	07 fc       	sbrc	r0, 7
    2aa8:	03 d0       	rcall	.+6      	; 0x2ab0 <__divmodsi4_neg2>
    2aaa:	4e f4       	brtc	.+18     	; 0x2abe <__divmodsi4_exit>
    2aac:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__negsi2>

00002ab0 <__divmodsi4_neg2>:
    2ab0:	50 95       	com	r21
    2ab2:	40 95       	com	r20
    2ab4:	30 95       	com	r19
    2ab6:	21 95       	neg	r18
    2ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aba:	4f 4f       	sbci	r20, 0xFF	; 255
    2abc:	5f 4f       	sbci	r21, 0xFF	; 255

00002abe <__divmodsi4_exit>:
    2abe:	08 95       	ret

00002ac0 <__negsi2>:
    2ac0:	90 95       	com	r25
    2ac2:	80 95       	com	r24
    2ac4:	70 95       	com	r23
    2ac6:	61 95       	neg	r22
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	8f 4f       	sbci	r24, 0xFF	; 255
    2acc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ace:	08 95       	ret

00002ad0 <__tablejump2__>:
    2ad0:	ee 0f       	add	r30, r30
    2ad2:	ff 1f       	adc	r31, r31
    2ad4:	05 90       	lpm	r0, Z+
    2ad6:	f4 91       	lpm	r31, Z
    2ad8:	e0 2d       	mov	r30, r0
    2ada:	09 94       	ijmp

00002adc <malloc>:
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	82 30       	cpi	r24, 0x02	; 2
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	10 f4       	brcc	.+4      	; 0x2aee <malloc+0x12>
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <__flp>
    2af2:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <__flp+0x1>
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	30 97       	sbiw	r30, 0x00	; 0
    2b00:	19 f1       	breq	.+70     	; 0x2b48 <malloc+0x6c>
    2b02:	40 81       	ld	r20, Z
    2b04:	51 81       	ldd	r21, Z+1	; 0x01
    2b06:	02 81       	ldd	r16, Z+2	; 0x02
    2b08:	13 81       	ldd	r17, Z+3	; 0x03
    2b0a:	48 17       	cp	r20, r24
    2b0c:	59 07       	cpc	r21, r25
    2b0e:	c8 f0       	brcs	.+50     	; 0x2b42 <malloc+0x66>
    2b10:	84 17       	cp	r24, r20
    2b12:	95 07       	cpc	r25, r21
    2b14:	69 f4       	brne	.+26     	; 0x2b30 <malloc+0x54>
    2b16:	10 97       	sbiw	r26, 0x00	; 0
    2b18:	31 f0       	breq	.+12     	; 0x2b26 <malloc+0x4a>
    2b1a:	12 96       	adiw	r26, 0x02	; 2
    2b1c:	0c 93       	st	X, r16
    2b1e:	12 97       	sbiw	r26, 0x02	; 2
    2b20:	13 96       	adiw	r26, 0x03	; 3
    2b22:	1c 93       	st	X, r17
    2b24:	27 c0       	rjmp	.+78     	; 0x2b74 <malloc+0x98>
    2b26:	00 93 e8 03 	sts	0x03E8, r16	; 0x8003e8 <__flp>
    2b2a:	10 93 e9 03 	sts	0x03E9, r17	; 0x8003e9 <__flp+0x1>
    2b2e:	22 c0       	rjmp	.+68     	; 0x2b74 <malloc+0x98>
    2b30:	21 15       	cp	r18, r1
    2b32:	31 05       	cpc	r19, r1
    2b34:	19 f0       	breq	.+6      	; 0x2b3c <malloc+0x60>
    2b36:	42 17       	cp	r20, r18
    2b38:	53 07       	cpc	r21, r19
    2b3a:	18 f4       	brcc	.+6      	; 0x2b42 <malloc+0x66>
    2b3c:	9a 01       	movw	r18, r20
    2b3e:	bd 01       	movw	r22, r26
    2b40:	ef 01       	movw	r28, r30
    2b42:	df 01       	movw	r26, r30
    2b44:	f8 01       	movw	r30, r16
    2b46:	db cf       	rjmp	.-74     	; 0x2afe <malloc+0x22>
    2b48:	21 15       	cp	r18, r1
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	f9 f0       	breq	.+62     	; 0x2b8c <malloc+0xb0>
    2b4e:	28 1b       	sub	r18, r24
    2b50:	39 0b       	sbc	r19, r25
    2b52:	24 30       	cpi	r18, 0x04	; 4
    2b54:	31 05       	cpc	r19, r1
    2b56:	80 f4       	brcc	.+32     	; 0x2b78 <malloc+0x9c>
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5c:	61 15       	cp	r22, r1
    2b5e:	71 05       	cpc	r23, r1
    2b60:	21 f0       	breq	.+8      	; 0x2b6a <malloc+0x8e>
    2b62:	fb 01       	movw	r30, r22
    2b64:	93 83       	std	Z+3, r25	; 0x03
    2b66:	82 83       	std	Z+2, r24	; 0x02
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <malloc+0x96>
    2b6a:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <__flp+0x1>
    2b6e:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <__flp>
    2b72:	fe 01       	movw	r30, r28
    2b74:	32 96       	adiw	r30, 0x02	; 2
    2b76:	44 c0       	rjmp	.+136    	; 0x2c00 <malloc+0x124>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e2 0f       	add	r30, r18
    2b7c:	f3 1f       	adc	r31, r19
    2b7e:	81 93       	st	Z+, r24
    2b80:	91 93       	st	Z+, r25
    2b82:	22 50       	subi	r18, 0x02	; 2
    2b84:	31 09       	sbc	r19, r1
    2b86:	39 83       	std	Y+1, r19	; 0x01
    2b88:	28 83       	st	Y, r18
    2b8a:	3a c0       	rjmp	.+116    	; 0x2c00 <malloc+0x124>
    2b8c:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <__brkval>
    2b90:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <__brkval+0x1>
    2b94:	23 2b       	or	r18, r19
    2b96:	41 f4       	brne	.+16     	; 0x2ba8 <malloc+0xcc>
    2b98:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2b9c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2ba0:	30 93 e7 03 	sts	0x03E7, r19	; 0x8003e7 <__brkval+0x1>
    2ba4:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <__brkval>
    2ba8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2bac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2bb0:	21 15       	cp	r18, r1
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	41 f4       	brne	.+16     	; 0x2bc6 <malloc+0xea>
    2bb6:	2d b7       	in	r18, 0x3d	; 61
    2bb8:	3e b7       	in	r19, 0x3e	; 62
    2bba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2bbe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2bc2:	24 1b       	sub	r18, r20
    2bc4:	35 0b       	sbc	r19, r21
    2bc6:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <__brkval>
    2bca:	f0 91 e7 03 	lds	r31, 0x03E7	; 0x8003e7 <__brkval+0x1>
    2bce:	e2 17       	cp	r30, r18
    2bd0:	f3 07       	cpc	r31, r19
    2bd2:	a0 f4       	brcc	.+40     	; 0x2bfc <malloc+0x120>
    2bd4:	2e 1b       	sub	r18, r30
    2bd6:	3f 0b       	sbc	r19, r31
    2bd8:	28 17       	cp	r18, r24
    2bda:	39 07       	cpc	r19, r25
    2bdc:	78 f0       	brcs	.+30     	; 0x2bfc <malloc+0x120>
    2bde:	ac 01       	movw	r20, r24
    2be0:	4e 5f       	subi	r20, 0xFE	; 254
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	24 17       	cp	r18, r20
    2be6:	35 07       	cpc	r19, r21
    2be8:	48 f0       	brcs	.+18     	; 0x2bfc <malloc+0x120>
    2bea:	4e 0f       	add	r20, r30
    2bec:	5f 1f       	adc	r21, r31
    2bee:	50 93 e7 03 	sts	0x03E7, r21	; 0x8003e7 <__brkval+0x1>
    2bf2:	40 93 e6 03 	sts	0x03E6, r20	; 0x8003e6 <__brkval>
    2bf6:	81 93       	st	Z+, r24
    2bf8:	91 93       	st	Z+, r25
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <malloc+0x124>
    2bfc:	e0 e0       	ldi	r30, 0x00	; 0
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	cf 01       	movw	r24, r30
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	08 95       	ret

00002c0c <free>:
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <free+0xa>
    2c14:	81 c0       	rjmp	.+258    	; 0x2d18 <free+0x10c>
    2c16:	fc 01       	movw	r30, r24
    2c18:	32 97       	sbiw	r30, 0x02	; 2
    2c1a:	13 82       	std	Z+3, r1	; 0x03
    2c1c:	12 82       	std	Z+2, r1	; 0x02
    2c1e:	a0 91 e8 03 	lds	r26, 0x03E8	; 0x8003e8 <__flp>
    2c22:	b0 91 e9 03 	lds	r27, 0x03E9	; 0x8003e9 <__flp+0x1>
    2c26:	10 97       	sbiw	r26, 0x00	; 0
    2c28:	81 f4       	brne	.+32     	; 0x2c4a <free+0x3e>
    2c2a:	20 81       	ld	r18, Z
    2c2c:	31 81       	ldd	r19, Z+1	; 0x01
    2c2e:	82 0f       	add	r24, r18
    2c30:	93 1f       	adc	r25, r19
    2c32:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <__brkval>
    2c36:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <__brkval+0x1>
    2c3a:	28 17       	cp	r18, r24
    2c3c:	39 07       	cpc	r19, r25
    2c3e:	51 f5       	brne	.+84     	; 0x2c94 <free+0x88>
    2c40:	f0 93 e7 03 	sts	0x03E7, r31	; 0x8003e7 <__brkval+0x1>
    2c44:	e0 93 e6 03 	sts	0x03E6, r30	; 0x8003e6 <__brkval>
    2c48:	67 c0       	rjmp	.+206    	; 0x2d18 <free+0x10c>
    2c4a:	ed 01       	movw	r28, r26
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	ce 17       	cp	r28, r30
    2c52:	df 07       	cpc	r29, r31
    2c54:	40 f4       	brcc	.+16     	; 0x2c66 <free+0x5a>
    2c56:	4a 81       	ldd	r20, Y+2	; 0x02
    2c58:	5b 81       	ldd	r21, Y+3	; 0x03
    2c5a:	9e 01       	movw	r18, r28
    2c5c:	41 15       	cp	r20, r1
    2c5e:	51 05       	cpc	r21, r1
    2c60:	f1 f0       	breq	.+60     	; 0x2c9e <free+0x92>
    2c62:	ea 01       	movw	r28, r20
    2c64:	f5 cf       	rjmp	.-22     	; 0x2c50 <free+0x44>
    2c66:	d3 83       	std	Z+3, r29	; 0x03
    2c68:	c2 83       	std	Z+2, r28	; 0x02
    2c6a:	40 81       	ld	r20, Z
    2c6c:	51 81       	ldd	r21, Z+1	; 0x01
    2c6e:	84 0f       	add	r24, r20
    2c70:	95 1f       	adc	r25, r21
    2c72:	c8 17       	cp	r28, r24
    2c74:	d9 07       	cpc	r29, r25
    2c76:	59 f4       	brne	.+22     	; 0x2c8e <free+0x82>
    2c78:	88 81       	ld	r24, Y
    2c7a:	99 81       	ldd	r25, Y+1	; 0x01
    2c7c:	84 0f       	add	r24, r20
    2c7e:	95 1f       	adc	r25, r21
    2c80:	02 96       	adiw	r24, 0x02	; 2
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	80 83       	st	Z, r24
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	93 83       	std	Z+3, r25	; 0x03
    2c8c:	82 83       	std	Z+2, r24	; 0x02
    2c8e:	21 15       	cp	r18, r1
    2c90:	31 05       	cpc	r19, r1
    2c92:	29 f4       	brne	.+10     	; 0x2c9e <free+0x92>
    2c94:	f0 93 e9 03 	sts	0x03E9, r31	; 0x8003e9 <__flp+0x1>
    2c98:	e0 93 e8 03 	sts	0x03E8, r30	; 0x8003e8 <__flp>
    2c9c:	3d c0       	rjmp	.+122    	; 0x2d18 <free+0x10c>
    2c9e:	e9 01       	movw	r28, r18
    2ca0:	fb 83       	std	Y+3, r31	; 0x03
    2ca2:	ea 83       	std	Y+2, r30	; 0x02
    2ca4:	49 91       	ld	r20, Y+
    2ca6:	59 91       	ld	r21, Y+
    2ca8:	c4 0f       	add	r28, r20
    2caa:	d5 1f       	adc	r29, r21
    2cac:	ec 17       	cp	r30, r28
    2cae:	fd 07       	cpc	r31, r29
    2cb0:	61 f4       	brne	.+24     	; 0x2cca <free+0xbe>
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	84 0f       	add	r24, r20
    2cb8:	95 1f       	adc	r25, r21
    2cba:	02 96       	adiw	r24, 0x02	; 2
    2cbc:	e9 01       	movw	r28, r18
    2cbe:	99 83       	std	Y+1, r25	; 0x01
    2cc0:	88 83       	st	Y, r24
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	9b 83       	std	Y+3, r25	; 0x03
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	e0 e0       	ldi	r30, 0x00	; 0
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	12 96       	adiw	r26, 0x02	; 2
    2cd0:	8d 91       	ld	r24, X+
    2cd2:	9c 91       	ld	r25, X
    2cd4:	13 97       	sbiw	r26, 0x03	; 3
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	19 f0       	breq	.+6      	; 0x2ce0 <free+0xd4>
    2cda:	fd 01       	movw	r30, r26
    2cdc:	dc 01       	movw	r26, r24
    2cde:	f7 cf       	rjmp	.-18     	; 0x2cce <free+0xc2>
    2ce0:	8d 91       	ld	r24, X+
    2ce2:	9c 91       	ld	r25, X
    2ce4:	11 97       	sbiw	r26, 0x01	; 1
    2ce6:	9d 01       	movw	r18, r26
    2ce8:	2e 5f       	subi	r18, 0xFE	; 254
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	82 0f       	add	r24, r18
    2cee:	93 1f       	adc	r25, r19
    2cf0:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <__brkval>
    2cf4:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <__brkval+0x1>
    2cf8:	28 17       	cp	r18, r24
    2cfa:	39 07       	cpc	r19, r25
    2cfc:	69 f4       	brne	.+26     	; 0x2d18 <free+0x10c>
    2cfe:	30 97       	sbiw	r30, 0x00	; 0
    2d00:	29 f4       	brne	.+10     	; 0x2d0c <free+0x100>
    2d02:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__flp+0x1>
    2d06:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__flp>
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <free+0x104>
    2d0c:	13 82       	std	Z+3, r1	; 0x03
    2d0e:	12 82       	std	Z+2, r1	; 0x02
    2d10:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <__brkval+0x1>
    2d14:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <__brkval>
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	08 95       	ret

00002d1e <__do_global_dtors>:
    2d1e:	10 e0       	ldi	r17, 0x00	; 0
    2d20:	c0 ed       	ldi	r28, 0xD0	; 208
    2d22:	d0 e0       	ldi	r29, 0x00	; 0
    2d24:	04 c0       	rjmp	.+8      	; 0x2d2e <__do_global_dtors+0x10>
    2d26:	fe 01       	movw	r30, r28
    2d28:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__tablejump2__>
    2d2c:	21 96       	adiw	r28, 0x01	; 1
    2d2e:	c2 3d       	cpi	r28, 0xD2	; 210
    2d30:	d1 07       	cpc	r29, r17
    2d32:	c9 f7       	brne	.-14     	; 0x2d26 <__do_global_dtors+0x8>
    2d34:	f8 94       	cli

00002d36 <__stop_program>:
    2d36:	ff cf       	rjmp	.-2      	; 0x2d36 <__stop_program>
