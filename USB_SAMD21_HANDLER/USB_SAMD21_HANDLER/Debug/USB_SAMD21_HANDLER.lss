
USB_SAMD21_HANDLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000078c4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000078c4  000078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  000078cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000006d0  2000049c  00007d68  0002049c  2**2
                  ALLOC
  4 .stack        00002004  20000b6c  00008438  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00047b3b  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000067c0  00000000  00000000  00068058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001ab19  00000000  00000000  0006e818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014c8  00000000  00000000  00089331  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001670  00000000  00000000  0008a7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022e3e  00000000  00000000  0008be69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c1c3  00000000  00000000  000aeca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099a0a  00000000  00000000  000cae6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003bfc  00000000  00000000  00164874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 2b 00 20 79 04 00 00 75 04 00 00 75 04 00 00     p+. y...u...u...
	...
      2c:	75 04 00 00 00 00 00 00 00 00 00 00 75 04 00 00     u...........u...
      3c:	75 04 00 00 75 04 00 00 75 04 00 00 75 04 00 00     u...u...u...u...
      4c:	75 04 00 00 25 25 00 00 75 04 00 00 75 04 00 00     u...%%..u...u...
      5c:	79 43 00 00 75 04 00 00 75 04 00 00 75 04 00 00     yC..u...u...u...
      6c:	75 04 00 00 45 29 00 00 75 04 00 00 75 04 00 00     u...E)..u...u...
      7c:	75 04 00 00 75 04 00 00 75 04 00 00 c9 2f 00 00     u...u...u..../..
      8c:	dd 2f 00 00 75 04 00 00 75 04 00 00 75 04 00 00     ./..u...u...u...
      9c:	75 04 00 00 75 04 00 00 75 04 00 00 75 04 00 00     u...u...u...u...
      ac:	75 04 00 00 00 00 00 00                             u.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	000078cc 	.word	0x000078cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	000078cc 	.word	0x000078cc
     10c:	000078cc 	.word	0x000078cc
     110:	00000000 	.word	0x00000000

00000114 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     118:	4770      	bx	lr
	...

0000011c <_ZL10USBTimeoutPK10timer_task>:
//#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
	ptrCDCClass->timeout=true;
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <_ZL10USBTimeoutPK10timer_task+0x10>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2201      	movs	r2, #1
     122:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
     124:	2200      	movs	r2, #0
     126:	741a      	strb	r2, [r3, #16]
	
}
     128:	4770      	bx	lr
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	200004b8 	.word	0x200004b8

00000130 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
     130:	4b03      	ldr	r3, [pc, #12]	; (140 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2201      	movs	r2, #1
     136:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
     138:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
     13a:	741a      	strb	r2, [r3, #16]


	return false;
}
     13c:	2000      	movs	r0, #0
     13e:	4770      	bx	lr
     140:	200004b8 	.word	0x200004b8

00000144 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
     144:	4b03      	ldr	r3, [pc, #12]	; (154 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	2201      	movs	r2, #1
     14a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
     14c:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
     14e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	200004b8 	.word	0x200004b8

00000158 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
     158:	b530      	push	{r4, r5, lr}
     15a:	b083      	sub	sp, #12
     15c:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
     15e:	6983      	ldr	r3, [r0, #24]
     160:	3301      	adds	r3, #1
     162:	d002      	beq.n	16a <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
     164:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
     166:	b003      	add	sp, #12
     168:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
     16a:	6803      	ldr	r3, [r0, #0]
     16c:	69db      	ldr	r3, [r3, #28]
     16e:	466a      	mov	r2, sp
     170:	1dd5      	adds	r5, r2, #7
     172:	2201      	movs	r2, #1
     174:	0029      	movs	r1, r5
     176:	4798      	blx	r3
     178:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
     17a:	782b      	ldrb	r3, [r5, #0]
     17c:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
     17e:	69a0      	ldr	r0, [r4, #24]
     180:	e7f1      	b.n	166 <_ZN9CDC_Class4peekEv+0xe>

00000182 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     182:	b500      	push	{lr}
     184:	b083      	sub	sp, #12
     186:	466b      	mov	r3, sp
     188:	71d9      	strb	r1, [r3, #7]
	if (connected){
     18a:	7c03      	ldrb	r3, [r0, #16]
     18c:	2b00      	cmp	r3, #0
     18e:	d00a      	beq.n	1a6 <_ZN9CDC_Class5writeEh+0x24>
		while(!txReady);
     190:	7d03      	ldrb	r3, [r0, #20]
     192:	2b00      	cmp	r3, #0
     194:	d0fc      	beq.n	190 <_ZN9CDC_Class5writeEh+0xe>
		return writeData(&c, 1);
     196:	6803      	ldr	r3, [r0, #0]
     198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     19a:	2201      	movs	r2, #1
     19c:	4669      	mov	r1, sp
     19e:	3107      	adds	r1, #7
     1a0:	4798      	blx	r3
	}else{
		return 0;
	}
		
}
     1a2:	b003      	add	sp, #12
     1a4:	bd00      	pop	{pc}
		return 0;
     1a6:	2000      	movs	r0, #0
     1a8:	e7fb      	b.n	1a2 <_ZN9CDC_Class5writeEh+0x20>

000001aa <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
     1aa:	7d43      	ldrb	r3, [r0, #21]
     1ac:	2b00      	cmp	r3, #0
     1ae:	d002      	beq.n	1b6 <_ZN9CDC_Class9availableEv+0xc>
     1b0:	7d00      	ldrb	r0, [r0, #20]
     1b2:	b2c0      	uxtb	r0, r0
	{
		
	return false;
	}
	
}
     1b4:	4770      	bx	lr
	if (rxReady && txReady)
     1b6:	2000      	movs	r0, #0
     1b8:	e7fc      	b.n	1b4 <_ZN9CDC_Class9availableEv+0xa>
	...

000001bc <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
     1bc:	b510      	push	{r4, lr}
     1be:	0004      	movs	r4, r0
     1c0:	4b03      	ldr	r3, [pc, #12]	; (1d0 <_ZN9CDC_ClassD1Ev+0x14>)
     1c2:	3308      	adds	r3, #8
     1c4:	6003      	str	r3, [r0, #0]
     1c6:	3010      	adds	r0, #16
     1c8:	4b02      	ldr	r3, [pc, #8]	; (1d4 <_ZN9CDC_ClassD1Ev+0x18>)
     1ca:	4798      	blx	r3
} //~CDC_Class
     1cc:	0020      	movs	r0, r4
     1ce:	bd10      	pop	{r4, pc}
     1d0:	000074d8 	.word	0x000074d8
     1d4:	00000a59 	.word	0x00000a59

000001d8 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     1d8:	b510      	push	{r4, lr}
     1da:	b082      	sub	sp, #8
     1dc:	1c03      	adds	r3, r0, #0
     1de:	aa01      	add	r2, sp, #4
     1e0:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
     1e2:	07db      	lsls	r3, r3, #31
     1e4:	d402      	bmi.n	1ec <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     1e6:	2000      	movs	r0, #0
     1e8:	b002      	add	sp, #8
     1ea:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     1ec:	4906      	ldr	r1, [pc, #24]	; (208 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     1ee:	2000      	movs	r0, #0
     1f0:	4c06      	ldr	r4, [pc, #24]	; (20c <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     1f2:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     1f4:	4906      	ldr	r1, [pc, #24]	; (210 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     1f6:	2001      	movs	r0, #1
     1f8:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     1fc:	681b      	ldr	r3, [r3, #0]
     1fe:	2201      	movs	r2, #1
     200:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
     202:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
     204:	741a      	strb	r2, [r3, #16]
     206:	e7ee      	b.n	1e6 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     208:	00000131 	.word	0x00000131
     20c:	000046a9 	.word	0x000046a9
     210:	00000145 	.word	0x00000145
     214:	200004b8 	.word	0x200004b8

00000218 <_ZN9CDC_Class4readEv>:
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
     21c:	0004      	movs	r4, r0
	rxReady=false;
     21e:	2300      	movs	r3, #0
     220:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
     222:	2101      	movs	r1, #1
     224:	466b      	mov	r3, sp
     226:	1dd8      	adds	r0, r3, #7
     228:	4b04      	ldr	r3, [pc, #16]	; (23c <_ZN9CDC_Class4readEv+0x24>)
     22a:	4798      	blx	r3
	while(!rxReady);
     22c:	7d63      	ldrb	r3, [r4, #21]
     22e:	2b00      	cmp	r3, #0
     230:	d0fc      	beq.n	22c <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
     232:	466b      	mov	r3, sp
     234:	79d8      	ldrb	r0, [r3, #7]
}
     236:	b002      	add	sp, #8
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00004705 	.word	0x00004705

00000240 <_ZN9CDC_Class8readDataEPvl>:
{
     240:	b570      	push	{r4, r5, r6, lr}
     242:	0004      	movs	r4, r0
     244:	000e      	movs	r6, r1
     246:	0015      	movs	r5, r2
	if (connected)
     248:	7c03      	ldrb	r3, [r0, #16]
     24a:	2b00      	cmp	r3, #0
     24c:	d102      	bne.n	254 <_ZN9CDC_Class8readDataEPvl+0x14>
		r=0;
     24e:	2500      	movs	r5, #0
}
     250:	0028      	movs	r0, r5
     252:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
     254:	0093      	lsls	r3, r2, #2
     256:	189b      	adds	r3, r3, r2
     258:	005a      	lsls	r2, r3, #1
     25a:	490f      	ldr	r1, [pc, #60]	; (298 <_ZN9CDC_Class8readDataEPvl+0x58>)
     25c:	480f      	ldr	r0, [pc, #60]	; (29c <_ZN9CDC_Class8readDataEPvl+0x5c>)
     25e:	4b10      	ldr	r3, [pc, #64]	; (2a0 <_ZN9CDC_Class8readDataEPvl+0x60>)
     260:	4798      	blx	r3
		rxReady=false;
     262:	2300      	movs	r3, #0
     264:	7563      	strb	r3, [r4, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
     266:	0029      	movs	r1, r5
     268:	0030      	movs	r0, r6
     26a:	4b0e      	ldr	r3, [pc, #56]	; (2a4 <_ZN9CDC_Class8readDataEPvl+0x64>)
     26c:	4798      	blx	r3
     26e:	b2c5      	uxtb	r5, r0
     270:	e002      	b.n	278 <_ZN9CDC_Class8readDataEPvl+0x38>
		while((!rxReady)&&(connected));
     272:	2300      	movs	r3, #0
     274:	2b00      	cmp	r3, #0
     276:	d005      	beq.n	284 <_ZN9CDC_Class8readDataEPvl+0x44>
     278:	7d63      	ldrb	r3, [r4, #21]
     27a:	2b00      	cmp	r3, #0
     27c:	d1f9      	bne.n	272 <_ZN9CDC_Class8readDataEPvl+0x32>
     27e:	7c23      	ldrb	r3, [r4, #16]
     280:	b2db      	uxtb	r3, r3
     282:	e7f7      	b.n	274 <_ZN9CDC_Class8readDataEPvl+0x34>
		usbTerminalTimer.Stop();
     284:	4c05      	ldr	r4, [pc, #20]	; (29c <_ZN9CDC_Class8readDataEPvl+0x5c>)
     286:	0020      	movs	r0, r4
     288:	4b07      	ldr	r3, [pc, #28]	; (2a8 <_ZN9CDC_Class8readDataEPvl+0x68>)
     28a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
     28c:	4902      	ldr	r1, [pc, #8]	; (298 <_ZN9CDC_Class8readDataEPvl+0x58>)
     28e:	0020      	movs	r0, r4
     290:	4b06      	ldr	r3, [pc, #24]	; (2ac <_ZN9CDC_Class8readDataEPvl+0x6c>)
     292:	4798      	blx	r3
     294:	e7dc      	b.n	250 <_ZN9CDC_Class8readDataEPvl+0x10>
     296:	46c0      	nop			; (mov r8, r8)
     298:	0000011d 	.word	0x0000011d
     29c:	20000524 	.word	0x20000524
     2a0:	00000c35 	.word	0x00000c35
     2a4:	00004705 	.word	0x00004705
     2a8:	00000ba5 	.word	0x00000ba5
     2ac:	00000c7d 	.word	0x00000c7d

000002b0 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     2b0:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     2b2:	301c      	adds	r0, #28
     2b4:	2140      	movs	r1, #64	; 0x40
     2b6:	4b01      	ldr	r3, [pc, #4]	; (2bc <_ZN9CDC_Class5flushEv+0xc>)
     2b8:	4798      	blx	r3
}
     2ba:	bd10      	pop	{r4, pc}
     2bc:	00004735 	.word	0x00004735

000002c0 <_ZN9CDC_Class9writeDataEPKvl>:
{
     2c0:	b570      	push	{r4, r5, r6, lr}
     2c2:	0004      	movs	r4, r0
     2c4:	000e      	movs	r6, r1
     2c6:	0015      	movs	r5, r2
	if (connected)
     2c8:	7c03      	ldrb	r3, [r0, #16]
     2ca:	2b00      	cmp	r3, #0
     2cc:	d102      	bne.n	2d4 <_ZN9CDC_Class9writeDataEPKvl+0x14>
		return 0;
     2ce:	2500      	movs	r5, #0
}
     2d0:	0028      	movs	r0, r5
     2d2:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
     2d4:	0093      	lsls	r3, r2, #2
     2d6:	189b      	adds	r3, r3, r2
     2d8:	005a      	lsls	r2, r3, #1
     2da:	490f      	ldr	r1, [pc, #60]	; (318 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
     2dc:	480f      	ldr	r0, [pc, #60]	; (31c <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
     2de:	4b10      	ldr	r3, [pc, #64]	; (320 <_ZN9CDC_Class9writeDataEPKvl+0x60>)
     2e0:	4798      	blx	r3
		txReady=false;
     2e2:	2300      	movs	r3, #0
     2e4:	7523      	strb	r3, [r4, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     2e6:	0029      	movs	r1, r5
     2e8:	0030      	movs	r0, r6
     2ea:	4b0e      	ldr	r3, [pc, #56]	; (324 <_ZN9CDC_Class9writeDataEPKvl+0x64>)
     2ec:	4798      	blx	r3
     2ee:	0005      	movs	r5, r0
     2f0:	e002      	b.n	2f8 <_ZN9CDC_Class9writeDataEPKvl+0x38>
		while((!txReady)&&(connected)){
     2f2:	2300      	movs	r3, #0
     2f4:	2b00      	cmp	r3, #0
     2f6:	d005      	beq.n	304 <_ZN9CDC_Class9writeDataEPKvl+0x44>
     2f8:	7d23      	ldrb	r3, [r4, #20]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d1f9      	bne.n	2f2 <_ZN9CDC_Class9writeDataEPKvl+0x32>
     2fe:	7c23      	ldrb	r3, [r4, #16]
     300:	b2db      	uxtb	r3, r3
     302:	e7f7      	b.n	2f4 <_ZN9CDC_Class9writeDataEPKvl+0x34>
			usbTerminalTimer.Stop();
     304:	4c05      	ldr	r4, [pc, #20]	; (31c <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
     306:	0020      	movs	r0, r4
     308:	4b07      	ldr	r3, [pc, #28]	; (328 <_ZN9CDC_Class9writeDataEPKvl+0x68>)
     30a:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
     30c:	4902      	ldr	r1, [pc, #8]	; (318 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
     30e:	0020      	movs	r0, r4
     310:	4b06      	ldr	r3, [pc, #24]	; (32c <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
     312:	4798      	blx	r3
		return r;
     314:	e7dc      	b.n	2d0 <_ZN9CDC_Class9writeDataEPKvl+0x10>
     316:	46c0      	nop			; (mov r8, r8)
     318:	0000011d 	.word	0x0000011d
     31c:	20000524 	.word	0x20000524
     320:	00000c35 	.word	0x00000c35
     324:	00004735 	.word	0x00004735
     328:	00000ba5 	.word	0x00000ba5
     32c:	00000c7d 	.word	0x00000c7d

00000330 <_ZN9CDC_Class5writeEPKhj>:
{
     330:	b570      	push	{r4, r5, r6, lr}
     332:	0004      	movs	r4, r0
     334:	000e      	movs	r6, r1
     336:	0015      	movs	r5, r2
	txReady=false;
     338:	2300      	movs	r3, #0
     33a:	7503      	strb	r3, [r0, #20]
 	if (connected){
     33c:	7c03      	ldrb	r3, [r0, #16]
     33e:	2b00      	cmp	r3, #0
     340:	d102      	bne.n	348 <_ZN9CDC_Class5writeEPKhj+0x18>
 		r=0;
     342:	2500      	movs	r5, #0
}
     344:	0028      	movs	r0, r5
     346:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
     348:	0093      	lsls	r3, r2, #2
     34a:	189b      	adds	r3, r3, r2
     34c:	005a      	lsls	r2, r3, #1
     34e:	490e      	ldr	r1, [pc, #56]	; (388 <_ZN9CDC_Class5writeEPKhj+0x58>)
     350:	480e      	ldr	r0, [pc, #56]	; (38c <_ZN9CDC_Class5writeEPKhj+0x5c>)
     352:	4b0f      	ldr	r3, [pc, #60]	; (390 <_ZN9CDC_Class5writeEPKhj+0x60>)
     354:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     356:	0029      	movs	r1, r5
     358:	0030      	movs	r0, r6
     35a:	4b0e      	ldr	r3, [pc, #56]	; (394 <_ZN9CDC_Class5writeEPKhj+0x64>)
     35c:	4798      	blx	r3
     35e:	0005      	movs	r5, r0
     360:	e002      	b.n	368 <_ZN9CDC_Class5writeEPKhj+0x38>
		while((!txReady)&&(connected));
     362:	2300      	movs	r3, #0
     364:	2b00      	cmp	r3, #0
     366:	d005      	beq.n	374 <_ZN9CDC_Class5writeEPKhj+0x44>
     368:	7d23      	ldrb	r3, [r4, #20]
     36a:	2b00      	cmp	r3, #0
     36c:	d1f9      	bne.n	362 <_ZN9CDC_Class5writeEPKhj+0x32>
     36e:	7c23      	ldrb	r3, [r4, #16]
     370:	b2db      	uxtb	r3, r3
     372:	e7f7      	b.n	364 <_ZN9CDC_Class5writeEPKhj+0x34>
		usbTerminalTimer.Stop();
     374:	4c05      	ldr	r4, [pc, #20]	; (38c <_ZN9CDC_Class5writeEPKhj+0x5c>)
     376:	0020      	movs	r0, r4
     378:	4b07      	ldr	r3, [pc, #28]	; (398 <_ZN9CDC_Class5writeEPKhj+0x68>)
     37a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
     37c:	4902      	ldr	r1, [pc, #8]	; (388 <_ZN9CDC_Class5writeEPKhj+0x58>)
     37e:	0020      	movs	r0, r4
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <_ZN9CDC_Class5writeEPKhj+0x6c>)
     382:	4798      	blx	r3
     384:	e7de      	b.n	344 <_ZN9CDC_Class5writeEPKhj+0x14>
     386:	46c0      	nop			; (mov r8, r8)
     388:	0000011d 	.word	0x0000011d
     38c:	20000524 	.word	0x20000524
     390:	00000c35 	.word	0x00000c35
     394:	00004735 	.word	0x00004735
     398:	00000ba5 	.word	0x00000ba5
     39c:	00000c7d 	.word	0x00000c7d

000003a0 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     3a0:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
     3a2:	4b01      	ldr	r3, [pc, #4]	; (3a8 <_ZN9CDC_Class5clearEv+0x8>)
     3a4:	4798      	blx	r3
}
     3a6:	bd10      	pop	{r4, pc}
     3a8:	00004691 	.word	0x00004691

000003ac <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
     3ac:	b510      	push	{r4, lr}
     3ae:	0004      	movs	r4, r0
    Print() : write_error(0) {}
     3b0:	2300      	movs	r3, #0
     3b2:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     3b4:	4b08      	ldr	r3, [pc, #32]	; (3d8 <_ZN9CDC_ClassC1Ev+0x2c>)
     3b6:	6003      	str	r3, [r0, #0]
     3b8:	23fa      	movs	r3, #250	; 0xfa
     3ba:	009b      	lsls	r3, r3, #2
     3bc:	6083      	str	r3, [r0, #8]
     3be:	3010      	adds	r0, #16
     3c0:	4b06      	ldr	r3, [pc, #24]	; (3dc <_ZN9CDC_ClassC1Ev+0x30>)
     3c2:	4798      	blx	r3
     3c4:	4b06      	ldr	r3, [pc, #24]	; (3e0 <_ZN9CDC_ClassC1Ev+0x34>)
     3c6:	3308      	adds	r3, #8
     3c8:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
     3ca:	2301      	movs	r3, #1
     3cc:	425b      	negs	r3, r3
     3ce:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <_ZN9CDC_ClassC1Ev+0x38>)
     3d2:	601c      	str	r4, [r3, #0]
} //CDC_Class
     3d4:	0020      	movs	r0, r4
     3d6:	bd10      	pop	{r4, pc}
     3d8:	000074bc 	.word	0x000074bc
     3dc:	00000a4d 	.word	0x00000a4d
     3e0:	000074d8 	.word	0x000074d8
     3e4:	200004b8 	.word	0x200004b8

000003e8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
     3e8:	b510      	push	{r4, lr}
     3ea:	2801      	cmp	r0, #1
     3ec:	d000      	beq.n	3f0 <_Z41__static_initialization_and_destruction_0ii+0x8>
     3ee:	bd10      	pop	{r4, pc}
     3f0:	4b06      	ldr	r3, [pc, #24]	; (40c <_Z41__static_initialization_and_destruction_0ii+0x24>)
     3f2:	4299      	cmp	r1, r3
     3f4:	d1fb      	bne.n	3ee <_Z41__static_initialization_and_destruction_0ii+0x6>
     3f6:	4c06      	ldr	r4, [pc, #24]	; (410 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     3f8:	3404      	adds	r4, #4
     3fa:	0020      	movs	r0, r4
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     3fe:	4798      	blx	r3
     400:	4a05      	ldr	r2, [pc, #20]	; (418 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     402:	4906      	ldr	r1, [pc, #24]	; (41c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     404:	0020      	movs	r0, r4
     406:	4b06      	ldr	r3, [pc, #24]	; (420 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     408:	4798      	blx	r3
     40a:	e7f0      	b.n	3ee <_Z41__static_initialization_and_destruction_0ii+0x6>
     40c:	0000ffff 	.word	0x0000ffff
     410:	200004b8 	.word	0x200004b8
     414:	000003ad 	.word	0x000003ad
     418:	20000000 	.word	0x20000000
     41c:	000001bd 	.word	0x000001bd
     420:	00005079 	.word	0x00005079

00000424 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
     424:	b570      	push	{r4, r5, r6, lr}
     426:	0005      	movs	r5, r0
	OnInit();
     428:	3010      	adds	r0, #16
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <_ZN9CDC_Class4InitEv+0x20>)
     42c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     42e:	4906      	ldr	r1, [pc, #24]	; (448 <_ZN9CDC_Class4InitEv+0x24>)
     430:	2003      	movs	r0, #3
     432:	4b06      	ldr	r3, [pc, #24]	; (44c <_ZN9CDC_Class4InitEv+0x28>)
     434:	4798      	blx	r3
	delay_ms(100);
     436:	2064      	movs	r0, #100	; 0x64
     438:	4c05      	ldr	r4, [pc, #20]	; (450 <_ZN9CDC_Class4InitEv+0x2c>)
     43a:	47a0      	blx	r4
	if (connected)
     43c:	7c2b      	ldrb	r3, [r5, #16]
	delay_ms(100);
     43e:	2064      	movs	r0, #100	; 0x64
     440:	47a0      	blx	r4
}
     442:	bd70      	pop	{r4, r5, r6, pc}
     444:	00000a5d 	.word	0x00000a5d
     448:	000001d9 	.word	0x000001d9
     44c:	000046a9 	.word	0x000046a9
     450:	00001475 	.word	0x00001475

00000454 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
     454:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
     456:	4b01      	ldr	r3, [pc, #4]	; (45c <_ZN9CDC_Class9IsEnabledEv+0x8>)
     458:	4798      	blx	r3
}
     45a:	bd10      	pop	{r4, pc}
     45c:	000046f9 	.word	0x000046f9

00000460 <_GLOBAL__sub_I_ptrCDCClass>:
 CDC_Class	usb;
     460:	b510      	push	{r4, lr}
     462:	4902      	ldr	r1, [pc, #8]	; (46c <_GLOBAL__sub_I_ptrCDCClass+0xc>)
     464:	2001      	movs	r0, #1
     466:	4b02      	ldr	r3, [pc, #8]	; (470 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
     468:	4798      	blx	r3
     46a:	bd10      	pop	{r4, pc}
     46c:	0000ffff 	.word	0x0000ffff
     470:	000003e9 	.word	0x000003e9

00000474 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     474:	e7fe      	b.n	474 <Dummy_Handler>
	...

00000478 <Reset_Handler>:
{
     478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     47a:	4a23      	ldr	r2, [pc, #140]	; (508 <Reset_Handler+0x90>)
     47c:	4b23      	ldr	r3, [pc, #140]	; (50c <Reset_Handler+0x94>)
     47e:	429a      	cmp	r2, r3
     480:	d009      	beq.n	496 <Reset_Handler+0x1e>
     482:	4b22      	ldr	r3, [pc, #136]	; (50c <Reset_Handler+0x94>)
     484:	4a20      	ldr	r2, [pc, #128]	; (508 <Reset_Handler+0x90>)
     486:	e003      	b.n	490 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     488:	6811      	ldr	r1, [r2, #0]
     48a:	6019      	str	r1, [r3, #0]
     48c:	3304      	adds	r3, #4
     48e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     490:	491f      	ldr	r1, [pc, #124]	; (510 <Reset_Handler+0x98>)
     492:	428b      	cmp	r3, r1
     494:	d3f8      	bcc.n	488 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     496:	4b1f      	ldr	r3, [pc, #124]	; (514 <Reset_Handler+0x9c>)
     498:	e002      	b.n	4a0 <Reset_Handler+0x28>
                *pDest++ = 0;
     49a:	2200      	movs	r2, #0
     49c:	601a      	str	r2, [r3, #0]
     49e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     4a0:	4a1d      	ldr	r2, [pc, #116]	; (518 <Reset_Handler+0xa0>)
     4a2:	4293      	cmp	r3, r2
     4a4:	d3f9      	bcc.n	49a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4a6:	4a1d      	ldr	r2, [pc, #116]	; (51c <Reset_Handler+0xa4>)
     4a8:	21ff      	movs	r1, #255	; 0xff
     4aa:	4b1d      	ldr	r3, [pc, #116]	; (520 <Reset_Handler+0xa8>)
     4ac:	438b      	bics	r3, r1
     4ae:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     4b0:	39fd      	subs	r1, #253	; 0xfd
     4b2:	2390      	movs	r3, #144	; 0x90
     4b4:	005b      	lsls	r3, r3, #1
     4b6:	4a1b      	ldr	r2, [pc, #108]	; (524 <Reset_Handler+0xac>)
     4b8:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     4ba:	4a1b      	ldr	r2, [pc, #108]	; (528 <Reset_Handler+0xb0>)
     4bc:	78d3      	ldrb	r3, [r2, #3]
     4be:	2503      	movs	r5, #3
     4c0:	43ab      	bics	r3, r5
     4c2:	2402      	movs	r4, #2
     4c4:	4323      	orrs	r3, r4
     4c6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     4c8:	78d3      	ldrb	r3, [r2, #3]
     4ca:	270c      	movs	r7, #12
     4cc:	43bb      	bics	r3, r7
     4ce:	2608      	movs	r6, #8
     4d0:	4333      	orrs	r3, r6
     4d2:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     4d4:	4b15      	ldr	r3, [pc, #84]	; (52c <Reset_Handler+0xb4>)
     4d6:	7b98      	ldrb	r0, [r3, #14]
     4d8:	2230      	movs	r2, #48	; 0x30
     4da:	4390      	bics	r0, r2
     4dc:	2220      	movs	r2, #32
     4de:	4310      	orrs	r0, r2
     4e0:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     4e2:	7b99      	ldrb	r1, [r3, #14]
     4e4:	43b9      	bics	r1, r7
     4e6:	4331      	orrs	r1, r6
     4e8:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     4ea:	7b9a      	ldrb	r2, [r3, #14]
     4ec:	43aa      	bics	r2, r5
     4ee:	4322      	orrs	r2, r4
     4f0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4f2:	4a0f      	ldr	r2, [pc, #60]	; (530 <Reset_Handler+0xb8>)
     4f4:	6851      	ldr	r1, [r2, #4]
     4f6:	2380      	movs	r3, #128	; 0x80
     4f8:	430b      	orrs	r3, r1
     4fa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     4fc:	4b0d      	ldr	r3, [pc, #52]	; (534 <Reset_Handler+0xbc>)
     4fe:	4798      	blx	r3
        main();
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <Reset_Handler+0xc0>)
     502:	4798      	blx	r3
     504:	e7fe      	b.n	504 <Reset_Handler+0x8c>
     506:	46c0      	nop			; (mov r8, r8)
     508:	000078cc 	.word	0x000078cc
     50c:	20000000 	.word	0x20000000
     510:	2000049c 	.word	0x2000049c
     514:	2000049c 	.word	0x2000049c
     518:	20000b6c 	.word	0x20000b6c
     51c:	e000ed00 	.word	0xe000ed00
     520:	00000000 	.word	0x00000000
     524:	41007000 	.word	0x41007000
     528:	41005000 	.word	0x41005000
     52c:	41004800 	.word	0x41004800
     530:	41004000 	.word	0x41004000
     534:	00007199 	.word	0x00007199
     538:	000005dd 	.word	0x000005dd

0000053c <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     53c:	2000      	movs	r0, #0
     53e:	4770      	bx	lr

00000540 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
     540:	4770      	bx	lr
	...

00000544 <_Z8usb_testv>:

#include <atmel_start.h>
#include "CDC_Class.h"


void usb_test(void){
     544:	b530      	push	{r4, r5, lr}
     546:	b083      	sub	sp, #12
	if (usb.available())
     548:	4817      	ldr	r0, [pc, #92]	; (5a8 <_Z8usb_testv+0x64>)
     54a:	4b18      	ldr	r3, [pc, #96]	; (5ac <_Z8usb_testv+0x68>)
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d101      	bne.n	556 <_Z8usb_testv+0x12>
			usb.println((float)inByte/23);
			
			usb<<"it does work"<<NEWLINE;
		}
	}
}
     552:	b003      	add	sp, #12
     554:	bd30      	pop	{r4, r5, pc}
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     556:	4c14      	ldr	r4, [pc, #80]	; (5a8 <_Z8usb_testv+0x64>)
     558:	4915      	ldr	r1, [pc, #84]	; (5b0 <_Z8usb_testv+0x6c>)
     55a:	0020      	movs	r0, r4
     55c:	4b15      	ldr	r3, [pc, #84]	; (5b4 <_Z8usb_testv+0x70>)
     55e:	4798      	blx	r3
		int inByte=usb.read();
     560:	0020      	movs	r0, r4
     562:	4b15      	ldr	r3, [pc, #84]	; (5b8 <_Z8usb_testv+0x74>)
     564:	4798      	blx	r3
     566:	0004      	movs	r4, r0
		if (inByte>33)
     568:	2821      	cmp	r0, #33	; 0x21
     56a:	ddf2      	ble.n	552 <_Z8usb_testv+0xe>
			usb.println(inByte);
     56c:	4d0e      	ldr	r5, [pc, #56]	; (5a8 <_Z8usb_testv+0x64>)
     56e:	220a      	movs	r2, #10
     570:	0001      	movs	r1, r0
     572:	0028      	movs	r0, r5
     574:	4b11      	ldr	r3, [pc, #68]	; (5bc <_Z8usb_testv+0x78>)
     576:	4798      	blx	r3
			usb.println((float)inByte/23);
     578:	0020      	movs	r0, r4
     57a:	4b11      	ldr	r3, [pc, #68]	; (5c0 <_Z8usb_testv+0x7c>)
     57c:	4798      	blx	r3
     57e:	4911      	ldr	r1, [pc, #68]	; (5c4 <_Z8usb_testv+0x80>)
     580:	4b11      	ldr	r3, [pc, #68]	; (5c8 <_Z8usb_testv+0x84>)
     582:	4798      	blx	r3
     584:	4b11      	ldr	r3, [pc, #68]	; (5cc <_Z8usb_testv+0x88>)
     586:	4798      	blx	r3
     588:	0002      	movs	r2, r0
     58a:	000b      	movs	r3, r1
     58c:	2102      	movs	r1, #2
     58e:	9100      	str	r1, [sp, #0]
     590:	0028      	movs	r0, r5
     592:	490f      	ldr	r1, [pc, #60]	; (5d0 <_Z8usb_testv+0x8c>)
     594:	4788      	blx	r1
     596:	490f      	ldr	r1, [pc, #60]	; (5d4 <_Z8usb_testv+0x90>)
     598:	0028      	movs	r0, r5
     59a:	4c06      	ldr	r4, [pc, #24]	; (5b4 <_Z8usb_testv+0x70>)
     59c:	47a0      	blx	r4
     59e:	490e      	ldr	r1, [pc, #56]	; (5d8 <_Z8usb_testv+0x94>)
     5a0:	0028      	movs	r0, r5
     5a2:	47a0      	blx	r4
}
     5a4:	e7d5      	b.n	552 <_Z8usb_testv+0xe>
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	200004bc 	.word	0x200004bc
     5ac:	000001ab 	.word	0x000001ab
     5b0:	00007508 	.word	0x00007508
     5b4:	0000064d 	.word	0x0000064d
     5b8:	00000219 	.word	0x00000219
     5bc:	0000078d 	.word	0x0000078d
     5c0:	000054fd 	.word	0x000054fd
     5c4:	41b80000 	.word	0x41b80000
     5c8:	0000526d 	.word	0x0000526d
     5cc:	00007069 	.word	0x00007069
     5d0:	000009c5 	.word	0x000009c5
     5d4:	00007518 	.word	0x00007518
     5d8:	00007528 	.word	0x00007528

000005dc <main>:

int main(void)
{
     5dc:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     5de:	4b0a      	ldr	r3, [pc, #40]	; (608 <main+0x2c>)
     5e0:	4798      	blx	r3
	
	usb.Init();
     5e2:	4c0a      	ldr	r4, [pc, #40]	; (60c <main+0x30>)
     5e4:	0020      	movs	r0, r4
     5e6:	4b0a      	ldr	r3, [pc, #40]	; (610 <main+0x34>)
     5e8:	4798      	blx	r3
	delay_ms(100);
     5ea:	2064      	movs	r0, #100	; 0x64
     5ec:	4b09      	ldr	r3, [pc, #36]	; (614 <main+0x38>)
     5ee:	4798      	blx	r3
usb.println("why is not working");
     5f0:	4909      	ldr	r1, [pc, #36]	; (618 <main+0x3c>)
     5f2:	0020      	movs	r0, r4
     5f4:	4b09      	ldr	r3, [pc, #36]	; (61c <main+0x40>)
     5f6:	4798      	blx	r3
	while (1) {
		usb_test();
     5f8:	4b09      	ldr	r3, [pc, #36]	; (620 <main+0x44>)
     5fa:	4798      	blx	r3
		
		usb.println("why is not working");
     5fc:	4906      	ldr	r1, [pc, #24]	; (618 <main+0x3c>)
     5fe:	4803      	ldr	r0, [pc, #12]	; (60c <main+0x30>)
     600:	4b06      	ldr	r3, [pc, #24]	; (61c <main+0x40>)
     602:	4798      	blx	r3
     604:	e7f8      	b.n	5f8 <main+0x1c>
     606:	46c0      	nop			; (mov r8, r8)
     608:	00000cc5 	.word	0x00000cc5
     60c:	200004bc 	.word	0x200004bc
     610:	00000425 	.word	0x00000425
     614:	00001475 	.word	0x00001475
     618:	0000752c 	.word	0x0000752c
     61c:	00000691 	.word	0x00000691
     620:	00000545 	.word	0x00000545

00000624 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     626:	0005      	movs	r5, r0
  size_t n = 0;
     628:	2400      	movs	r4, #0
  while (size--) {
     62a:	1e56      	subs	r6, r2, #1
     62c:	2a00      	cmp	r2, #0
     62e:	d00b      	beq.n	648 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     630:	682b      	ldr	r3, [r5, #0]
     632:	681b      	ldr	r3, [r3, #0]
     634:	1c4f      	adds	r7, r1, #1
     636:	7809      	ldrb	r1, [r1, #0]
     638:	0028      	movs	r0, r5
     63a:	4798      	blx	r3
     63c:	2800      	cmp	r0, #0
     63e:	d003      	beq.n	648 <_ZN5Print5writeEPKhj+0x24>
     640:	3401      	adds	r4, #1
  while (size--) {
     642:	0032      	movs	r2, r6
    if (write(*buffer++)) n++;
     644:	0039      	movs	r1, r7
  while (size--) {
     646:	e7f0      	b.n	62a <_ZN5Print5writeEPKhj+0x6>
    else break;
  }
  return n;
}
     648:	0020      	movs	r0, r4
     64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000064c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     64c:	b570      	push	{r4, r5, r6, lr}
     64e:	0005      	movs	r5, r0
     650:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
     652:	d009      	beq.n	668 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
     654:	0008      	movs	r0, r1
     656:	4b05      	ldr	r3, [pc, #20]	; (66c <_ZN5Print5printEPKc+0x20>)
     658:	4798      	blx	r3
     65a:	0002      	movs	r2, r0
     65c:	682b      	ldr	r3, [r5, #0]
     65e:	685b      	ldr	r3, [r3, #4]
     660:	0021      	movs	r1, r4
     662:	0028      	movs	r0, r5
     664:	4798      	blx	r3
  return write(str);
}
     666:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     668:	2000      	movs	r0, #0
  return write(str);
     66a:	e7fc      	b.n	666 <_ZN5Print5printEPKc+0x1a>
     66c:	000072f9 	.word	0x000072f9

00000670 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     670:	b510      	push	{r4, lr}
  return write(c);
     672:	6803      	ldr	r3, [r0, #0]
     674:	681b      	ldr	r3, [r3, #0]
     676:	4798      	blx	r3
}
     678:	bd10      	pop	{r4, pc}
	...

0000067c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     67c:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
     67e:	6803      	ldr	r3, [r0, #0]
     680:	685b      	ldr	r3, [r3, #4]
     682:	2202      	movs	r2, #2
     684:	4901      	ldr	r1, [pc, #4]	; (68c <_ZN5Print7printlnEv+0x10>)
     686:	4798      	blx	r3
  return write("\r\n");
}
     688:	bd10      	pop	{r4, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00007528 	.word	0x00007528

00000690 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0005      	movs	r5, r0
  size_t n = print(c);
     694:	4b03      	ldr	r3, [pc, #12]	; (6a4 <_ZN5Print7printlnEPKc+0x14>)
     696:	4798      	blx	r3
     698:	0004      	movs	r4, r0
  n += println();
     69a:	0028      	movs	r0, r5
     69c:	4b02      	ldr	r3, [pc, #8]	; (6a8 <_ZN5Print7printlnEPKc+0x18>)
     69e:	4798      	blx	r3
     6a0:	1820      	adds	r0, r4, r0
  return n;
}
     6a2:	bd70      	pop	{r4, r5, r6, pc}
     6a4:	0000064d 	.word	0x0000064d
     6a8:	0000067d 	.word	0x0000067d

000006ac <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ae:	46ce      	mov	lr, r9
     6b0:	b500      	push	{lr}
     6b2:	b08c      	sub	sp, #48	; 0x30
     6b4:	4681      	mov	r9, r0
     6b6:	000d      	movs	r5, r1
     6b8:	0010      	movs	r0, r2
     6ba:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6bc:	2100      	movs	r1, #0
     6be:	2320      	movs	r3, #32
     6c0:	aa03      	add	r2, sp, #12
     6c2:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6c4:	2801      	cmp	r0, #1
     6c6:	dd01      	ble.n	6cc <_ZN5Print11printNumberEmh+0x20>
     6c8:	ae0b      	add	r6, sp, #44	; 0x2c
     6ca:	e007      	b.n	6dc <_ZN5Print11printNumberEmh+0x30>
     6cc:	230a      	movs	r3, #10
     6ce:	9301      	str	r3, [sp, #4]
     6d0:	e7fa      	b.n	6c8 <_ZN5Print11printNumberEmh+0x1c>

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6d2:	3437      	adds	r4, #55	; 0x37
     6d4:	b2e4      	uxtb	r4, r4
     6d6:	7034      	strb	r4, [r6, #0]
  } while(n);
     6d8:	2d00      	cmp	r5, #0
     6da:	d012      	beq.n	702 <_ZN5Print11printNumberEmh+0x56>
    char c = n % base;
     6dc:	9901      	ldr	r1, [sp, #4]
     6de:	0028      	movs	r0, r5
     6e0:	4b11      	ldr	r3, [pc, #68]	; (728 <_ZN5Print11printNumberEmh+0x7c>)
     6e2:	4798      	blx	r3
     6e4:	000f      	movs	r7, r1
     6e6:	b2cc      	uxtb	r4, r1
    n /= base;
     6e8:	9901      	ldr	r1, [sp, #4]
     6ea:	0028      	movs	r0, r5
     6ec:	4b0f      	ldr	r3, [pc, #60]	; (72c <_ZN5Print11printNumberEmh+0x80>)
     6ee:	4798      	blx	r3
     6f0:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6f2:	3e01      	subs	r6, #1
     6f4:	23ff      	movs	r3, #255	; 0xff
     6f6:	401f      	ands	r7, r3
     6f8:	2f09      	cmp	r7, #9
     6fa:	dcea      	bgt.n	6d2 <_ZN5Print11printNumberEmh+0x26>
     6fc:	3430      	adds	r4, #48	; 0x30
     6fe:	b2e4      	uxtb	r4, r4
     700:	e7e9      	b.n	6d6 <_ZN5Print11printNumberEmh+0x2a>
      if (str == NULL) return 0;
     702:	2e00      	cmp	r6, #0
     704:	d00d      	beq.n	722 <_ZN5Print11printNumberEmh+0x76>
      return write((const uint8_t *)str, strlen(str));
     706:	0030      	movs	r0, r6
     708:	4b09      	ldr	r3, [pc, #36]	; (730 <_ZN5Print11printNumberEmh+0x84>)
     70a:	4798      	blx	r3
     70c:	0002      	movs	r2, r0
     70e:	464b      	mov	r3, r9
     710:	681b      	ldr	r3, [r3, #0]
     712:	685b      	ldr	r3, [r3, #4]
     714:	0031      	movs	r1, r6
     716:	4648      	mov	r0, r9
     718:	4798      	blx	r3

  return write(str);
}
     71a:	b00c      	add	sp, #48	; 0x30
     71c:	bc04      	pop	{r2}
     71e:	4691      	mov	r9, r2
     720:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
     722:	2000      	movs	r0, #0
  return write(str);
     724:	e7f9      	b.n	71a <_ZN5Print11printNumberEmh+0x6e>
     726:	46c0      	nop			; (mov r8, r8)
     728:	00005195 	.word	0x00005195
     72c:	00005089 	.word	0x00005089
     730:	000072f9 	.word	0x000072f9

00000734 <_ZN5Print5printEli>:
{
     734:	b570      	push	{r4, r5, r6, lr}
     736:	0005      	movs	r5, r0
     738:	000c      	movs	r4, r1
  if (base == 0) {
     73a:	2a00      	cmp	r2, #0
     73c:	d005      	beq.n	74a <_ZN5Print5printEli+0x16>
  } else if (base == 10) {
     73e:	2a0a      	cmp	r2, #10
     740:	d008      	beq.n	754 <_ZN5Print5printEli+0x20>
    return printNumber(n, base);
     742:	b2d2      	uxtb	r2, r2
     744:	4b0c      	ldr	r3, [pc, #48]	; (778 <_ZN5Print5printEli+0x44>)
     746:	4798      	blx	r3
}
     748:	bd70      	pop	{r4, r5, r6, pc}
    return write(n);
     74a:	b2c9      	uxtb	r1, r1
     74c:	6803      	ldr	r3, [r0, #0]
     74e:	681b      	ldr	r3, [r3, #0]
     750:	4798      	blx	r3
     752:	e7f9      	b.n	748 <_ZN5Print5printEli+0x14>
    if (n < 0) {
     754:	2900      	cmp	r1, #0
     756:	db03      	blt.n	760 <_ZN5Print5printEli+0x2c>
    return printNumber(n, 10);
     758:	220a      	movs	r2, #10
     75a:	4b07      	ldr	r3, [pc, #28]	; (778 <_ZN5Print5printEli+0x44>)
     75c:	4798      	blx	r3
     75e:	e7f3      	b.n	748 <_ZN5Print5printEli+0x14>
      int t = print('-');
     760:	212d      	movs	r1, #45	; 0x2d
     762:	4b06      	ldr	r3, [pc, #24]	; (77c <_ZN5Print5printEli+0x48>)
     764:	4798      	blx	r3
     766:	0006      	movs	r6, r0
      n = -n;
     768:	4261      	negs	r1, r4
      return printNumber(n, 10) + t;
     76a:	220a      	movs	r2, #10
     76c:	0028      	movs	r0, r5
     76e:	4b02      	ldr	r3, [pc, #8]	; (778 <_ZN5Print5printEli+0x44>)
     770:	4798      	blx	r3
     772:	1830      	adds	r0, r6, r0
     774:	e7e8      	b.n	748 <_ZN5Print5printEli+0x14>
     776:	46c0      	nop			; (mov r8, r8)
     778:	000006ad 	.word	0x000006ad
     77c:	00000671 	.word	0x00000671

00000780 <_ZN5Print5printEii>:
{
     780:	b510      	push	{r4, lr}
  return print((long) n, base);
     782:	4b01      	ldr	r3, [pc, #4]	; (788 <_ZN5Print5printEii+0x8>)
     784:	4798      	blx	r3
}
     786:	bd10      	pop	{r4, pc}
     788:	00000735 	.word	0x00000735

0000078c <_ZN5Print7printlnEii>:
{
     78c:	b570      	push	{r4, r5, r6, lr}
     78e:	0005      	movs	r5, r0
  size_t n = print(num, base);
     790:	4b03      	ldr	r3, [pc, #12]	; (7a0 <_ZN5Print7printlnEii+0x14>)
     792:	4798      	blx	r3
     794:	0004      	movs	r4, r0
  n += println();
     796:	0028      	movs	r0, r5
     798:	4b02      	ldr	r3, [pc, #8]	; (7a4 <_ZN5Print7printlnEii+0x18>)
     79a:	4798      	blx	r3
     79c:	1820      	adds	r0, r4, r0
}
     79e:	bd70      	pop	{r4, r5, r6, pc}
     7a0:	00000781 	.word	0x00000781
     7a4:	0000067d 	.word	0x0000067d

000007a8 <_ZN5Print5printEmi>:
{
     7a8:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     7aa:	2a00      	cmp	r2, #0
     7ac:	d003      	beq.n	7b6 <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
     7ae:	b2d2      	uxtb	r2, r2
     7b0:	4b03      	ldr	r3, [pc, #12]	; (7c0 <_ZN5Print5printEmi+0x18>)
     7b2:	4798      	blx	r3
}
     7b4:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
     7b6:	b2c9      	uxtb	r1, r1
     7b8:	6803      	ldr	r3, [r0, #0]
     7ba:	681b      	ldr	r3, [r3, #0]
     7bc:	4798      	blx	r3
     7be:	e7f9      	b.n	7b4 <_ZN5Print5printEmi+0xc>
     7c0:	000006ad 	.word	0x000006ad

000007c4 <_ZN5Print5printEji>:
{
     7c4:	b510      	push	{r4, lr}
  return print((unsigned long) n, base);
     7c6:	4b01      	ldr	r3, [pc, #4]	; (7cc <_ZN5Print5printEji+0x8>)
     7c8:	4798      	blx	r3
}
     7ca:	bd10      	pop	{r4, pc}
     7cc:	000007a9 	.word	0x000007a9

000007d0 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	46c6      	mov	lr, r8
     7d4:	b500      	push	{lr}
     7d6:	b084      	sub	sp, #16
     7d8:	9003      	str	r0, [sp, #12]
     7da:	0014      	movs	r4, r2
     7dc:	9200      	str	r2, [sp, #0]
     7de:	001e      	movs	r6, r3
     7e0:	ab0a      	add	r3, sp, #40	; 0x28
     7e2:	781d      	ldrb	r5, [r3, #0]
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
     7e4:	0022      	movs	r2, r4
     7e6:	0033      	movs	r3, r6
     7e8:	0020      	movs	r0, r4
     7ea:	0031      	movs	r1, r6
     7ec:	4f58      	ldr	r7, [pc, #352]	; (950 <_ZN5Print10printFloatEdh+0x180>)
     7ee:	47b8      	blx	r7
     7f0:	2800      	cmp	r0, #0
     7f2:	d13e      	bne.n	872 <_ZN5Print10printFloatEdh+0xa2>
     7f4:	2300      	movs	r3, #0
  size_t n = 0;

  if (isnan(number)) return print("nan");
     7f6:	2b00      	cmp	r3, #0
     7f8:	d13d      	bne.n	876 <_ZN5Print10printFloatEdh+0xa6>
  { return __builtin_isinf(__x); }
     7fa:	0077      	lsls	r7, r6, #1
     7fc:	087f      	lsrs	r7, r7, #1
  if (isinf(number)) return print("inf");
     7fe:	2201      	movs	r2, #1
     800:	4252      	negs	r2, r2
     802:	4b54      	ldr	r3, [pc, #336]	; (954 <_ZN5Print10printFloatEdh+0x184>)
     804:	9800      	ldr	r0, [sp, #0]
     806:	0039      	movs	r1, r7
     808:	4c51      	ldr	r4, [pc, #324]	; (950 <_ZN5Print10printFloatEdh+0x180>)
     80a:	47a0      	blx	r4
     80c:	2800      	cmp	r0, #0
     80e:	d108      	bne.n	822 <_ZN5Print10printFloatEdh+0x52>
     810:	2201      	movs	r2, #1
     812:	4252      	negs	r2, r2
     814:	4b4f      	ldr	r3, [pc, #316]	; (954 <_ZN5Print10printFloatEdh+0x184>)
     816:	9800      	ldr	r0, [sp, #0]
     818:	0039      	movs	r1, r7
     81a:	4f4f      	ldr	r7, [pc, #316]	; (958 <_ZN5Print10printFloatEdh+0x188>)
     81c:	47b8      	blx	r7
     81e:	2800      	cmp	r0, #0
     820:	d033      	beq.n	88a <_ZN5Print10printFloatEdh+0xba>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     822:	22e0      	movs	r2, #224	; 0xe0
     824:	0612      	lsls	r2, r2, #24
     826:	4b4d      	ldr	r3, [pc, #308]	; (95c <_ZN5Print10printFloatEdh+0x18c>)
     828:	9800      	ldr	r0, [sp, #0]
     82a:	0031      	movs	r1, r6
     82c:	4f4c      	ldr	r7, [pc, #304]	; (960 <_ZN5Print10printFloatEdh+0x190>)
     82e:	47b8      	blx	r7
     830:	2800      	cmp	r0, #0
     832:	d130      	bne.n	896 <_ZN5Print10printFloatEdh+0xc6>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     834:	22e0      	movs	r2, #224	; 0xe0
     836:	0612      	lsls	r2, r2, #24
     838:	4b4a      	ldr	r3, [pc, #296]	; (964 <_ZN5Print10printFloatEdh+0x194>)
     83a:	9800      	ldr	r0, [sp, #0]
     83c:	0031      	movs	r1, r6
     83e:	4f4a      	ldr	r7, [pc, #296]	; (968 <_ZN5Print10printFloatEdh+0x198>)
     840:	47b8      	blx	r7
     842:	2800      	cmp	r0, #0
     844:	d12d      	bne.n	8a2 <_ZN5Print10printFloatEdh+0xd2>

  // Handle negative numbers
  if (number < 0.0)
     846:	2200      	movs	r2, #0
     848:	2300      	movs	r3, #0
     84a:	9800      	ldr	r0, [sp, #0]
     84c:	0031      	movs	r1, r6
     84e:	4f46      	ldr	r7, [pc, #280]	; (968 <_ZN5Print10printFloatEdh+0x198>)
     850:	47b8      	blx	r7
     852:	2800      	cmp	r0, #0
     854:	d12b      	bne.n	8ae <_ZN5Print10printFloatEdh+0xde>
  size_t n = 0;
     856:	2300      	movs	r3, #0
     858:	4698      	mov	r8, r3
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     85a:	2400      	movs	r4, #0
  double rounding = 0.5;
     85c:	2000      	movs	r0, #0
     85e:	4943      	ldr	r1, [pc, #268]	; (96c <_ZN5Print10printFloatEdh+0x19c>)
  for (uint8_t i=0; i<digits; ++i)
     860:	42ac      	cmp	r4, r5
     862:	da2e      	bge.n	8c2 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
     864:	2200      	movs	r2, #0
     866:	4b42      	ldr	r3, [pc, #264]	; (970 <_ZN5Print10printFloatEdh+0x1a0>)
     868:	4f42      	ldr	r7, [pc, #264]	; (974 <_ZN5Print10printFloatEdh+0x1a4>)
     86a:	47b8      	blx	r7
  for (uint8_t i=0; i<digits; ++i)
     86c:	3401      	adds	r4, #1
     86e:	b2e4      	uxtb	r4, r4
     870:	e7f6      	b.n	860 <_ZN5Print10printFloatEdh+0x90>
  { return __builtin_isnan(__x); }
     872:	2301      	movs	r3, #1
     874:	e7bf      	b.n	7f6 <_ZN5Print10printFloatEdh+0x26>
  if (isnan(number)) return print("nan");
     876:	4940      	ldr	r1, [pc, #256]	; (978 <_ZN5Print10printFloatEdh+0x1a8>)
     878:	9803      	ldr	r0, [sp, #12]
     87a:	4b40      	ldr	r3, [pc, #256]	; (97c <_ZN5Print10printFloatEdh+0x1ac>)
     87c:	4798      	blx	r3
     87e:	0006      	movs	r6, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     880:	0030      	movs	r0, r6
     882:	b004      	add	sp, #16
     884:	bc04      	pop	{r2}
     886:	4690      	mov	r8, r2
     888:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isinf(number)) return print("inf");
     88a:	493d      	ldr	r1, [pc, #244]	; (980 <_ZN5Print10printFloatEdh+0x1b0>)
     88c:	9803      	ldr	r0, [sp, #12]
     88e:	4b3b      	ldr	r3, [pc, #236]	; (97c <_ZN5Print10printFloatEdh+0x1ac>)
     890:	4798      	blx	r3
     892:	0006      	movs	r6, r0
     894:	e7f4      	b.n	880 <_ZN5Print10printFloatEdh+0xb0>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     896:	493b      	ldr	r1, [pc, #236]	; (984 <_ZN5Print10printFloatEdh+0x1b4>)
     898:	9803      	ldr	r0, [sp, #12]
     89a:	4b38      	ldr	r3, [pc, #224]	; (97c <_ZN5Print10printFloatEdh+0x1ac>)
     89c:	4798      	blx	r3
     89e:	0006      	movs	r6, r0
     8a0:	e7ee      	b.n	880 <_ZN5Print10printFloatEdh+0xb0>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     8a2:	4938      	ldr	r1, [pc, #224]	; (984 <_ZN5Print10printFloatEdh+0x1b4>)
     8a4:	9803      	ldr	r0, [sp, #12]
     8a6:	4b35      	ldr	r3, [pc, #212]	; (97c <_ZN5Print10printFloatEdh+0x1ac>)
     8a8:	4798      	blx	r3
     8aa:	0006      	movs	r6, r0
     8ac:	e7e8      	b.n	880 <_ZN5Print10printFloatEdh+0xb0>
     n += print('-');
     8ae:	212d      	movs	r1, #45	; 0x2d
     8b0:	9803      	ldr	r0, [sp, #12]
     8b2:	4b35      	ldr	r3, [pc, #212]	; (988 <_ZN5Print10printFloatEdh+0x1b8>)
     8b4:	4798      	blx	r3
     8b6:	4680      	mov	r8, r0
     number = -number;
     8b8:	2380      	movs	r3, #128	; 0x80
     8ba:	061b      	lsls	r3, r3, #24
     8bc:	469c      	mov	ip, r3
     8be:	4466      	add	r6, ip
     8c0:	e7cb      	b.n	85a <_ZN5Print10printFloatEdh+0x8a>
  number += rounding;
     8c2:	0002      	movs	r2, r0
     8c4:	000b      	movs	r3, r1
     8c6:	9800      	ldr	r0, [sp, #0]
     8c8:	0031      	movs	r1, r6
     8ca:	4c30      	ldr	r4, [pc, #192]	; (98c <_ZN5Print10printFloatEdh+0x1bc>)
     8cc:	47a0      	blx	r4
  unsigned long int_part = (unsigned long)number;
     8ce:	9000      	str	r0, [sp, #0]
     8d0:	9101      	str	r1, [sp, #4]
     8d2:	4b2f      	ldr	r3, [pc, #188]	; (990 <_ZN5Print10printFloatEdh+0x1c0>)
     8d4:	4798      	blx	r3
     8d6:	0006      	movs	r6, r0
  double remainder = number - (double)int_part;
     8d8:	4b2e      	ldr	r3, [pc, #184]	; (994 <_ZN5Print10printFloatEdh+0x1c4>)
     8da:	4798      	blx	r3
     8dc:	0002      	movs	r2, r0
     8de:	000b      	movs	r3, r1
     8e0:	9800      	ldr	r0, [sp, #0]
     8e2:	9901      	ldr	r1, [sp, #4]
     8e4:	4c2c      	ldr	r4, [pc, #176]	; (998 <_ZN5Print10printFloatEdh+0x1c8>)
     8e6:	47a0      	blx	r4
     8e8:	9000      	str	r0, [sp, #0]
     8ea:	9101      	str	r1, [sp, #4]
  n += print(int_part);
     8ec:	220a      	movs	r2, #10
     8ee:	0031      	movs	r1, r6
     8f0:	9c03      	ldr	r4, [sp, #12]
     8f2:	0020      	movs	r0, r4
     8f4:	4b29      	ldr	r3, [pc, #164]	; (99c <_ZN5Print10printFloatEdh+0x1cc>)
     8f6:	4798      	blx	r3
     8f8:	4440      	add	r0, r8
     8fa:	0006      	movs	r6, r0
  if (digits > 0) {
     8fc:	2d00      	cmp	r5, #0
     8fe:	dd04      	ble.n	90a <_ZN5Print10printFloatEdh+0x13a>
    n += print('.');
     900:	212e      	movs	r1, #46	; 0x2e
     902:	0020      	movs	r0, r4
     904:	4b20      	ldr	r3, [pc, #128]	; (988 <_ZN5Print10printFloatEdh+0x1b8>)
     906:	4798      	blx	r3
     908:	1836      	adds	r6, r6, r0
  while (digits-- > 0)
     90a:	1e6f      	subs	r7, r5, #1
     90c:	b2ff      	uxtb	r7, r7
     90e:	2d00      	cmp	r5, #0
     910:	ddb6      	ble.n	880 <_ZN5Print10printFloatEdh+0xb0>
    remainder *= 10.0;
     912:	2200      	movs	r2, #0
     914:	4b16      	ldr	r3, [pc, #88]	; (970 <_ZN5Print10printFloatEdh+0x1a0>)
     916:	9800      	ldr	r0, [sp, #0]
     918:	9901      	ldr	r1, [sp, #4]
     91a:	4c21      	ldr	r4, [pc, #132]	; (9a0 <_ZN5Print10printFloatEdh+0x1d0>)
     91c:	47a0      	blx	r4
     91e:	0004      	movs	r4, r0
     920:	000d      	movs	r5, r1
    unsigned int toPrint = (unsigned int)(remainder);
     922:	4b1b      	ldr	r3, [pc, #108]	; (990 <_ZN5Print10printFloatEdh+0x1c0>)
     924:	4798      	blx	r3
    n += print(toPrint);
     926:	220a      	movs	r2, #10
     928:	9000      	str	r0, [sp, #0]
     92a:	0001      	movs	r1, r0
     92c:	9803      	ldr	r0, [sp, #12]
     92e:	4b1d      	ldr	r3, [pc, #116]	; (9a4 <_ZN5Print10printFloatEdh+0x1d4>)
     930:	4798      	blx	r3
     932:	1836      	adds	r6, r6, r0
    remainder -= toPrint;
     934:	9800      	ldr	r0, [sp, #0]
     936:	4b17      	ldr	r3, [pc, #92]	; (994 <_ZN5Print10printFloatEdh+0x1c4>)
     938:	4798      	blx	r3
     93a:	0002      	movs	r2, r0
     93c:	000b      	movs	r3, r1
     93e:	0020      	movs	r0, r4
     940:	0029      	movs	r1, r5
     942:	4c15      	ldr	r4, [pc, #84]	; (998 <_ZN5Print10printFloatEdh+0x1c8>)
     944:	47a0      	blx	r4
     946:	9000      	str	r0, [sp, #0]
     948:	9101      	str	r1, [sp, #4]
  while (digits-- > 0)
     94a:	003d      	movs	r5, r7
     94c:	e7dd      	b.n	90a <_ZN5Print10printFloatEdh+0x13a>
     94e:	46c0      	nop			; (mov r8, r8)
     950:	00006f51 	.word	0x00006f51
     954:	7fefffff 	.word	0x7fefffff
     958:	000051e1 	.word	0x000051e1
     95c:	41efffff 	.word	0x41efffff
     960:	000051f5 	.word	0x000051f5
     964:	c1efffff 	.word	0xc1efffff
     968:	000051cd 	.word	0x000051cd
     96c:	3fe00000 	.word	0x3fe00000
     970:	40240000 	.word	0x40240000
     974:	00005bbd 	.word	0x00005bbd
     978:	00007548 	.word	0x00007548
     97c:	0000064d 	.word	0x0000064d
     980:	0000754c 	.word	0x0000754c
     984:	00007550 	.word	0x00007550
     988:	00000671 	.word	0x00000671
     98c:	0000559d 	.word	0x0000559d
     990:	00005231 	.word	0x00005231
     994:	00006ff9 	.word	0x00006ff9
     998:	00006925 	.word	0x00006925
     99c:	000007a9 	.word	0x000007a9
     9a0:	00006425 	.word	0x00006425
     9a4:	000007c5 	.word	0x000007c5

000009a8 <_ZN5Print5printEdi>:
{
     9a8:	b530      	push	{r4, r5, lr}
     9aa:	b083      	sub	sp, #12
     9ac:	001d      	movs	r5, r3
  return printFloat(n, digits);
     9ae:	466b      	mov	r3, sp
     9b0:	7e1b      	ldrb	r3, [r3, #24]
     9b2:	9300      	str	r3, [sp, #0]
     9b4:	002b      	movs	r3, r5
     9b6:	4902      	ldr	r1, [pc, #8]	; (9c0 <_ZN5Print5printEdi+0x18>)
     9b8:	4788      	blx	r1
}
     9ba:	b003      	add	sp, #12
     9bc:	bd30      	pop	{r4, r5, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	000007d1 	.word	0x000007d1

000009c4 <_ZN5Print7printlnEdi>:
{
     9c4:	b530      	push	{r4, r5, lr}
     9c6:	b083      	sub	sp, #12
     9c8:	0005      	movs	r5, r0
  size_t n = print(num, digits);
     9ca:	9906      	ldr	r1, [sp, #24]
     9cc:	9100      	str	r1, [sp, #0]
     9ce:	4904      	ldr	r1, [pc, #16]	; (9e0 <_ZN5Print7printlnEdi+0x1c>)
     9d0:	4788      	blx	r1
     9d2:	0004      	movs	r4, r0
  n += println();
     9d4:	0028      	movs	r0, r5
     9d6:	4b03      	ldr	r3, [pc, #12]	; (9e4 <_ZN5Print7printlnEdi+0x20>)
     9d8:	4798      	blx	r3
     9da:	1820      	adds	r0, r4, r0
}
     9dc:	b003      	add	sp, #12
     9de:	bd30      	pop	{r4, r5, pc}
     9e0:	000009a9 	.word	0x000009a9
     9e4:	0000067d 	.word	0x0000067d

000009e8 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
     9e8:	4b03      	ldr	r3, [pc, #12]	; (9f8 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
     9ea:	2201      	movs	r2, #1
     9ec:	6819      	ldr	r1, [r3, #0]
     9ee:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->plugged=false;
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	2200      	movs	r2, #0
     9f4:	705a      	strb	r2, [r3, #1]
}
     9f6:	4770      	bx	lr
     9f8:	2000051c 	.word	0x2000051c

000009fc <_ZL10USBPluggedv>:

static void USBPlugged(void){
     9fc:	b510      	push	{r4, lr}
     9fe:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     a00:	a801      	add	r0, sp, #4
     a02:	4b0e      	ldr	r3, [pc, #56]	; (a3c <_ZL10USBPluggedv+0x40>)
     a04:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     a06:	23c0      	movs	r3, #192	; 0xc0
     a08:	05db      	lsls	r3, r3, #23
     a0a:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     a0c:	4a0c      	ldr	r2, [pc, #48]	; (a40 <_ZL10USBPluggedv+0x44>)
     a0e:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     a10:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     a12:	4053      	eors	r3, r2
     a14:	401c      	ands	r4, r3
     a16:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     a18:	a801      	add	r0, sp, #4
     a1a:	4b0a      	ldr	r3, [pc, #40]	; (a44 <_ZL10USBPluggedv+0x48>)
     a1c:	4798      	blx	r3
	if (gpio_get_pin_level(PIN_PA14))
     a1e:	0463      	lsls	r3, r4, #17
     a20:	d407      	bmi.n	a32 <_ZL10USBPluggedv+0x36>
	{
		ptrSerialTerminalClass->plugged=true;
	} 
	else
	{
		ptrSerialTerminalClass->plugged=false;
     a22:	4a09      	ldr	r2, [pc, #36]	; (a48 <_ZL10USBPluggedv+0x4c>)
     a24:	2300      	movs	r3, #0
     a26:	6811      	ldr	r1, [r2, #0]
     a28:	704b      	strb	r3, [r1, #1]
		ptrSerialTerminalClass->connected=false;
     a2a:	6812      	ldr	r2, [r2, #0]
     a2c:	7013      	strb	r3, [r2, #0]
	}
	
}
     a2e:	b002      	add	sp, #8
     a30:	bd10      	pop	{r4, pc}
		ptrSerialTerminalClass->plugged=true;
     a32:	4b05      	ldr	r3, [pc, #20]	; (a48 <_ZL10USBPluggedv+0x4c>)
     a34:	681b      	ldr	r3, [r3, #0]
     a36:	2201      	movs	r2, #1
     a38:	705a      	strb	r2, [r3, #1]
     a3a:	e7f8      	b.n	a2e <_ZL10USBPluggedv+0x32>
     a3c:	000013f5 	.word	0x000013f5
     a40:	41004400 	.word	0x41004400
     a44:	00001403 	.word	0x00001403
     a48:	2000051c 	.word	0x2000051c

00000a4c <_ZN20SerialTerminal_ClassC1Ev>:


// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
     a4c:	4b01      	ldr	r3, [pc, #4]	; (a54 <_ZN20SerialTerminal_ClassC1Ev+0x8>)
     a4e:	6018      	str	r0, [r3, #0]
	
} //SerialTerminal_Class
     a50:	4770      	bx	lr
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	2000051c 	.word	0x2000051c

00000a58 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
     a58:	4770      	bx	lr
	...

00000a5c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
     a5c:	b530      	push	{r4, r5, lr}
     a5e:	b083      	sub	sp, #12
     a60:	0005      	movs	r5, r0
		ext_irq_register(PIN_PA14, USBPlugged);
     a62:	491e      	ldr	r1, [pc, #120]	; (adc <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
     a64:	200e      	movs	r0, #14
     a66:	4b1e      	ldr	r3, [pc, #120]	; (ae0 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
     a68:	4798      	blx	r3
		if (usbTerminalTimer.Init())
     a6a:	481e      	ldr	r0, [pc, #120]	; (ae4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
     a6c:	4b1e      	ldr	r3, [pc, #120]	; (ae8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
     a6e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     a70:	a801      	add	r0, sp, #4
     a72:	4b1e      	ldr	r3, [pc, #120]	; (aec <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
     a74:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     a76:	23c0      	movs	r3, #192	; 0xc0
     a78:	05db      	lsls	r3, r3, #23
     a7a:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     a7c:	4a1c      	ldr	r2, [pc, #112]	; (af0 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
     a7e:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     a80:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     a82:	4053      	eors	r3, r2
     a84:	401c      	ands	r4, r3
     a86:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     a88:	a801      	add	r0, sp, #4
     a8a:	4b1a      	ldr	r3, [pc, #104]	; (af4 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
     a8c:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	01db      	lsls	r3, r3, #7
     a92:	401c      	ands	r4, r3
     a94:	1e63      	subs	r3, r4, #1
     a96:	419c      	sbcs	r4, r3
     a98:	b2e4      	uxtb	r4, r4
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(PIN_PA14);
     a9a:	70ec      	strb	r4, [r5, #3]
		if (vbusDetected)
     a9c:	2c00      	cmp	r4, #0
     a9e:	d104      	bne.n	aaa <_ZN20SerialTerminal_Class6OnInitEv+0x4e>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			connected=false;
     aa0:	2300      	movs	r3, #0
     aa2:	702b      	strb	r3, [r5, #0]
			plugged=false;
     aa4:	706b      	strb	r3, [r5, #1]
		}
		
}
     aa6:	b003      	add	sp, #12
     aa8:	bd30      	pop	{r4, r5, pc}
			timeout=false;
     aaa:	2300      	movs	r3, #0
     aac:	70ab      	strb	r3, [r5, #2]
			plugged=true;
     aae:	3301      	adds	r3, #1
     ab0:	706b      	strb	r3, [r5, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
     ab2:	2296      	movs	r2, #150	; 0x96
     ab4:	0092      	lsls	r2, r2, #2
     ab6:	4910      	ldr	r1, [pc, #64]	; (af8 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
     ab8:	480a      	ldr	r0, [pc, #40]	; (ae4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
     aba:	4b10      	ldr	r3, [pc, #64]	; (afc <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
     abc:	4798      	blx	r3
			while ((!usb.IsEnabled())){
     abe:	4810      	ldr	r0, [pc, #64]	; (b00 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
     ac0:	4b10      	ldr	r3, [pc, #64]	; (b04 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
     ac2:	4798      	blx	r3
     ac4:	2800      	cmp	r0, #0
     ac6:	d105      	bne.n	ad4 <_ZN20SerialTerminal_Class6OnInitEv+0x78>
				if (timeout)
     ac8:	78ab      	ldrb	r3, [r5, #2]
     aca:	2b00      	cmp	r3, #0
     acc:	d0f7      	beq.n	abe <_ZN20SerialTerminal_Class6OnInitEv+0x62>
					connected=false;
     ace:	2300      	movs	r3, #0
     ad0:	702b      	strb	r3, [r5, #0]
					return;
     ad2:	e7e8      	b.n	aa6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
			usbTerminalTimer.Stop();
     ad4:	4803      	ldr	r0, [pc, #12]	; (ae4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
     ad6:	4b0c      	ldr	r3, [pc, #48]	; (b08 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
     ad8:	4798      	blx	r3
     ada:	e7e4      	b.n	aa6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
     adc:	000009fd 	.word	0x000009fd
     ae0:	0000150d 	.word	0x0000150d
     ae4:	20000524 	.word	0x20000524
     ae8:	00000b85 	.word	0x00000b85
     aec:	000013f5 	.word	0x000013f5
     af0:	41004400 	.word	0x41004400
     af4:	00001403 	.word	0x00001403
     af8:	000009e9 	.word	0x000009e9
     afc:	00000c35 	.word	0x00000c35
     b00:	200004bc 	.word	0x200004bc
     b04:	00000455 	.word	0x00000455
     b08:	00000ba5 	.word	0x00000ba5

00000b0c <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
     b0c:	2300      	movs	r3, #0
     b0e:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
     b10:	4770      	bx	lr
	...

00000b14 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
     b14:	6101      	str	r1, [r0, #16]
	ptrTimerSerialClass=this;
     b16:	4b04      	ldr	r3, [pc, #16]	; (b28 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
     b18:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
     b1a:	2380      	movs	r3, #128	; 0x80
     b1c:	00db      	lsls	r3, r3, #3
     b1e:	6183      	str	r3, [r0, #24]
	task->cb=task_cb;
     b20:	6883      	ldr	r3, [r0, #8]
     b22:	4a02      	ldr	r2, [pc, #8]	; (b2c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
     b24:	60da      	str	r2, [r3, #12]
} //Timer_Class
     b26:	4770      	bx	lr
     b28:	20000520 	.word	0x20000520
     b2c:	00000bc1 	.word	0x00000bc1

00000b30 <_Z41__static_initialization_and_destruction_0ii>:


}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
     b30:	b510      	push	{r4, lr}
     b32:	2801      	cmp	r0, #1
     b34:	d000      	beq.n	b38 <_Z41__static_initialization_and_destruction_0ii+0x8>
     b36:	bd10      	pop	{r4, pc}
     b38:	4b07      	ldr	r3, [pc, #28]	; (b58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     b3a:	4299      	cmp	r1, r3
     b3c:	d1fb      	bne.n	b36 <_Z41__static_initialization_and_destruction_0ii+0x6>
     b3e:	4c07      	ldr	r4, [pc, #28]	; (b5c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     b40:	3404      	adds	r4, #4
     b42:	4907      	ldr	r1, [pc, #28]	; (b60 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     b44:	0020      	movs	r0, r4
     b46:	4b07      	ldr	r3, [pc, #28]	; (b64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b48:	4798      	blx	r3
     b4a:	4a07      	ldr	r2, [pc, #28]	; (b68 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b4c:	4907      	ldr	r1, [pc, #28]	; (b6c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     b4e:	0020      	movs	r0, r4
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     b52:	4798      	blx	r3
     b54:	e7ef      	b.n	b36 <_Z41__static_initialization_and_destruction_0ii+0x6>
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	0000ffff 	.word	0x0000ffff
     b5c:	20000520 	.word	0x20000520
     b60:	20000b2c 	.word	0x20000b2c
     b64:	00000b15 	.word	0x00000b15
     b68:	20000000 	.word	0x20000000
     b6c:	00000b0d 	.word	0x00000b0d
     b70:	00005079 	.word	0x00005079

00000b74 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
     b74:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
     b76:	6900      	ldr	r0, [r0, #16]
     b78:	4b01      	ldr	r3, [pc, #4]	; (b80 <_ZN17TimerSerial_Class5StartEv+0xc>)
     b7a:	4798      	blx	r3
}
     b7c:	bd10      	pop	{r4, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	000017fd 	.word	0x000017fd

00000b84 <_ZN17TimerSerial_Class4InitEv>:
bool TimerSerial_Class::Init(void){
     b84:	b510      	push	{r4, lr}
     b86:	0004      	movs	r4, r0
	ticks=0;
     b88:	2300      	movs	r3, #0
     b8a:	60c3      	str	r3, [r0, #12]
	isOK=Start()==0;
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <_ZN17TimerSerial_Class4InitEv+0x1c>)
     b8e:	4798      	blx	r3
     b90:	4243      	negs	r3, r0
     b92:	4158      	adcs	r0, r3
     b94:	b2c0      	uxtb	r0, r0
     b96:	70a0      	strb	r0, [r4, #2]
	return isOK;
     b98:	78a0      	ldrb	r0, [r4, #2]
     b9a:	b2c0      	uxtb	r0, r0
}
     b9c:	bd10      	pop	{r4, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00000b75 	.word	0x00000b75

00000ba4 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
     ba4:	b510      	push	{r4, lr}
     ba6:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
     ba8:	6900      	ldr	r0, [r0, #16]
     baa:	4b02      	ldr	r3, [pc, #8]	; (bb4 <_ZN17TimerSerial_Class4StopEv+0x10>)
     bac:	4798      	blx	r3
	timeout=0;
     bae:	2300      	movs	r3, #0
     bb0:	7063      	strb	r3, [r4, #1]
}
     bb2:	bd10      	pop	{r4, pc}
     bb4:	00001839 	.word	0x00001839

00000bb8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	timeout=1;
     bb8:	2301      	movs	r3, #1
     bba:	7043      	strb	r3, [r0, #1]
}
     bbc:	4770      	bx	lr
	...

00000bc0 <_ZL7task_cbPK10timer_task>:
{
     bc0:	b510      	push	{r4, lr}
	ptrTimerSerialClass->setTimeout();
     bc2:	4b02      	ldr	r3, [pc, #8]	; (bcc <_ZL7task_cbPK10timer_task+0xc>)
     bc4:	6818      	ldr	r0, [r3, #0]
     bc6:	4b02      	ldr	r3, [pc, #8]	; (bd0 <_ZL7task_cbPK10timer_task+0x10>)
     bc8:	4798      	blx	r3
}
     bca:	bd10      	pop	{r4, pc}
     bcc:	20000520 	.word	0x20000520
     bd0:	00000bb9 	.word	0x00000bb9

00000bd4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
void	TimerSerial_Class::ChooseAvailableTimerTask(void){
     bd4:	b510      	push	{r4, lr}
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     bd6:	2300      	movs	r3, #0
     bd8:	2b03      	cmp	r3, #3
     bda:	dc0f      	bgt.n	bfc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x28>
			if (taskSerialArray[ii].cb==NULL)
     bdc:	009a      	lsls	r2, r3, #2
     bde:	18d2      	adds	r2, r2, r3
     be0:	0091      	lsls	r1, r2, #2
     be2:	4a08      	ldr	r2, [pc, #32]	; (c04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
     be4:	1852      	adds	r2, r2, r1
     be6:	6b12      	ldr	r2, [r2, #48]	; 0x30
     be8:	2a00      	cmp	r2, #0
     bea:	d002      	beq.n	bf2 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x1e>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     bec:	3301      	adds	r3, #1
     bee:	b2db      	uxtb	r3, r3
     bf0:	e7f2      	b.n	bd8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4>
				task=&taskSerialArray[ii];
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
     bf4:	3324      	adds	r3, #36	; 0x24
     bf6:	185b      	adds	r3, r3, r1
     bf8:	6083      	str	r3, [r0, #8]
			return;
     bfa:	e002      	b.n	c02 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x2e>
	task=&taskSerialArray[0];
     bfc:	4b01      	ldr	r3, [pc, #4]	; (c04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
     bfe:	3324      	adds	r3, #36	; 0x24
     c00:	6083      	str	r3, [r0, #8]
}
     c02:	bd10      	pop	{r4, pc}
     c04:	20000520 	.word	0x20000520

00000c08 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
     c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0a:	0004      	movs	r4, r0
     c0c:	000e      	movs	r6, r1
     c0e:	0017      	movs	r7, r2
     c10:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
     c12:	4b06      	ldr	r3, [pc, #24]	; (c2c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
     c14:	4798      	blx	r3
	task->interval = interval;
     c16:	68a3      	ldr	r3, [r4, #8]
     c18:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
     c1a:	68a3      	ldr	r3, [r4, #8]
     c1c:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
     c1e:	68a3      	ldr	r3, [r4, #8]
     c20:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
     c22:	6920      	ldr	r0, [r4, #16]
     c24:	68a1      	ldr	r1, [r4, #8]
     c26:	4b02      	ldr	r3, [pc, #8]	; (c30 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
     c28:	4798      	blx	r3
}
     c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c2c:	00000bd5 	.word	0x00000bd5
     c30:	00001875 	.word	0x00001875

00000c34 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     c38:	2300      	movs	r3, #0
     c3a:	4d03      	ldr	r5, [pc, #12]	; (c48 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
     c3c:	47a8      	blx	r5
	status=timer_start(timer_descr);
     c3e:	6920      	ldr	r0, [r4, #16]
     c40:	4b02      	ldr	r3, [pc, #8]	; (c4c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
     c42:	4798      	blx	r3
}
     c44:	bd70      	pop	{r4, r5, r6, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000c09 	.word	0x00000c09
     c4c:	000017fd 	.word	0x000017fd

00000c50 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
     c50:	b530      	push	{r4, r5, lr}
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     c52:	2300      	movs	r3, #0
     c54:	2b03      	cmp	r3, #3
     c56:	dc0e      	bgt.n	c76 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x26>
		if (taskSerialArray[ii].cb==(timer_cb_t)func)
     c58:	009a      	lsls	r2, r3, #2
     c5a:	18d2      	adds	r2, r2, r3
     c5c:	0094      	lsls	r4, r2, #2
     c5e:	4a06      	ldr	r2, [pc, #24]	; (c78 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
     c60:	1912      	adds	r2, r2, r4
     c62:	6b12      	ldr	r2, [r2, #48]	; 0x30
     c64:	428a      	cmp	r2, r1
     c66:	d002      	beq.n	c6e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x1e>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     c68:	3301      	adds	r3, #1
     c6a:	b2db      	uxtb	r3, r3
     c6c:	e7f2      	b.n	c54 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4>
			task=&taskSerialArray[ii];
     c6e:	4b02      	ldr	r3, [pc, #8]	; (c78 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
     c70:	3324      	adds	r3, #36	; 0x24
     c72:	191b      	adds	r3, r3, r4
     c74:	6083      	str	r3, [r0, #8]
}
     c76:	bd30      	pop	{r4, r5, pc}
     c78:	20000520 	.word	0x20000520

00000c7c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
     c7c:	b510      	push	{r4, lr}
     c7e:	0004      	movs	r4, r0
	GetTaskFunction(func);
     c80:	4b08      	ldr	r3, [pc, #32]	; (ca4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
     c82:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
     c84:	6920      	ldr	r0, [r4, #16]
     c86:	3014      	adds	r0, #20
     c88:	68a1      	ldr	r1, [r4, #8]
     c8a:	4b07      	ldr	r3, [pc, #28]	; (ca8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
     c8c:	4798      	blx	r3
     c8e:	2800      	cmp	r0, #0
     c90:	d103      	bne.n	c9a <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
     c92:	68a3      	ldr	r3, [r4, #8]
     c94:	2200      	movs	r2, #0
     c96:	60da      	str	r2, [r3, #12]
}
     c98:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
     c9a:	68a1      	ldr	r1, [r4, #8]
     c9c:	6920      	ldr	r0, [r4, #16]
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
     ca0:	4798      	blx	r3
     ca2:	e7f6      	b.n	c92 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
     ca4:	00000c51 	.word	0x00000c51
     ca8:	000021b5 	.word	0x000021b5
     cac:	00001925 	.word	0x00001925

00000cb0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
     cb0:	b510      	push	{r4, lr}
     cb2:	4902      	ldr	r1, [pc, #8]	; (cbc <_GLOBAL__sub_I_ptrTimerSerialClass+0xc>)
     cb4:	2001      	movs	r0, #1
     cb6:	4b02      	ldr	r3, [pc, #8]	; (cc0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
     cb8:	4798      	blx	r3
     cba:	bd10      	pop	{r4, pc}
     cbc:	0000ffff 	.word	0x0000ffff
     cc0:	00000b31 	.word	0x00000b31

00000cc4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     cc4:	b510      	push	{r4, lr}
	system_init();
     cc6:	4b02      	ldr	r3, [pc, #8]	; (cd0 <atmel_start_init+0xc>)
     cc8:	4798      	blx	r3
	usb_init();
     cca:	4b02      	ldr	r3, [pc, #8]	; (cd4 <atmel_start_init+0x10>)
     ccc:	4798      	blx	r3
}
     cce:	bd10      	pop	{r4, pc}
     cd0:	000012b9 	.word	0x000012b9
     cd4:	0000506d 	.word	0x0000506d

00000cd8 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
     cd8:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     cda:	4a08      	ldr	r2, [pc, #32]	; (cfc <TIMER_ZCD_init+0x24>)
     cdc:	6a11      	ldr	r1, [r2, #32]
     cde:	2380      	movs	r3, #128	; 0x80
     ce0:	011b      	lsls	r3, r3, #4
     ce2:	430b      	orrs	r3, r1
     ce4:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     ce6:	4a06      	ldr	r2, [pc, #24]	; (d00 <TIMER_ZCD_init+0x28>)
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <TIMER_ZCD_init+0x2c>)
     cea:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
     cec:	4b06      	ldr	r3, [pc, #24]	; (d08 <TIMER_ZCD_init+0x30>)
     cee:	4798      	blx	r3
     cf0:	0002      	movs	r2, r0
     cf2:	4906      	ldr	r1, [pc, #24]	; (d0c <TIMER_ZCD_init+0x34>)
     cf4:	4806      	ldr	r0, [pc, #24]	; (d10 <TIMER_ZCD_init+0x38>)
     cf6:	4b07      	ldr	r3, [pc, #28]	; (d14 <TIMER_ZCD_init+0x3c>)
     cf8:	4798      	blx	r3
}
     cfa:	bd10      	pop	{r4, pc}
     cfc:	40000400 	.word	0x40000400
     d00:	0000401b 	.word	0x0000401b
     d04:	40000c00 	.word	0x40000c00
     d08:	00002fa7 	.word	0x00002fa7
     d0c:	42002c00 	.word	0x42002c00
     d10:	20000a6c 	.word	0x20000a6c
     d14:	000017b9 	.word	0x000017b9

00000d18 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
     d18:	b510      	push	{r4, lr}
     d1a:	4a08      	ldr	r2, [pc, #32]	; (d3c <TIMER_USB_init+0x24>)
     d1c:	6a11      	ldr	r1, [r2, #32]
     d1e:	2380      	movs	r3, #128	; 0x80
     d20:	015b      	lsls	r3, r3, #5
     d22:	430b      	orrs	r3, r1
     d24:	6213      	str	r3, [r2, #32]
     d26:	4a06      	ldr	r2, [pc, #24]	; (d40 <TIMER_USB_init+0x28>)
     d28:	4b06      	ldr	r3, [pc, #24]	; (d44 <TIMER_USB_init+0x2c>)
     d2a:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
     d2c:	4b06      	ldr	r3, [pc, #24]	; (d48 <TIMER_USB_init+0x30>)
     d2e:	4798      	blx	r3
     d30:	0002      	movs	r2, r0
     d32:	4906      	ldr	r1, [pc, #24]	; (d4c <TIMER_USB_init+0x34>)
     d34:	4806      	ldr	r0, [pc, #24]	; (d50 <TIMER_USB_init+0x38>)
     d36:	4b07      	ldr	r3, [pc, #28]	; (d54 <TIMER_USB_init+0x3c>)
     d38:	4798      	blx	r3
}
     d3a:	bd10      	pop	{r4, pc}
     d3c:	40000400 	.word	0x40000400
     d40:	0000431c 	.word	0x0000431c
     d44:	40000c00 	.word	0x40000c00
     d48:	00002fa7 	.word	0x00002fa7
     d4c:	42003000 	.word	0x42003000
     d50:	20000b2c 	.word	0x20000b2c
     d54:	000017b9 	.word	0x000017b9

00000d58 <EXTERNAL_IRQ_0_init>:
{
     d58:	b510      	push	{r4, lr}
     d5a:	4a0f      	ldr	r2, [pc, #60]	; (d98 <EXTERNAL_IRQ_0_init+0x40>)
     d5c:	4b0f      	ldr	r3, [pc, #60]	; (d9c <EXTERNAL_IRQ_0_init+0x44>)
     d5e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d60:	3a05      	subs	r2, #5
     d62:	23c0      	movs	r3, #192	; 0xc0
     d64:	05db      	lsls	r3, r3, #23
     d66:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d68:	4b0d      	ldr	r3, [pc, #52]	; (da0 <EXTERNAL_IRQ_0_init+0x48>)
     d6a:	4a0e      	ldr	r2, [pc, #56]	; (da4 <EXTERNAL_IRQ_0_init+0x4c>)
     d6c:	629a      	str	r2, [r3, #40]	; 0x28
     d6e:	4a0e      	ldr	r2, [pc, #56]	; (da8 <EXTERNAL_IRQ_0_init+0x50>)
     d70:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d72:	214e      	movs	r1, #78	; 0x4e
     d74:	5c5a      	ldrb	r2, [r3, r1]
     d76:	2004      	movs	r0, #4
     d78:	4382      	bics	r2, r0
     d7a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d7c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d7e:	3803      	subs	r0, #3
     d80:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d82:	4302      	orrs	r2, r0
     d84:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d86:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d88:	3917      	subs	r1, #23
     d8a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d8c:	200f      	movs	r0, #15
     d8e:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d90:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     d92:	4b06      	ldr	r3, [pc, #24]	; (dac <EXTERNAL_IRQ_0_init+0x54>)
     d94:	4798      	blx	r3
}
     d96:	bd10      	pop	{r4, pc}
     d98:	00004005 	.word	0x00004005
     d9c:	40000c00 	.word	0x40000c00
     da0:	41004400 	.word	0x41004400
     da4:	40024000 	.word	0x40024000
     da8:	c0020000 	.word	0xc0020000
     dac:	000014d9 	.word	0x000014d9

00000db0 <SPI_ADF_PORT_init>:
{
     db0:	b5f0      	push	{r4, r5, r6, r7, lr}
     db2:	46c6      	mov	lr, r8
     db4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     db6:	22c0      	movs	r2, #192	; 0xc0
     db8:	05d2      	lsls	r2, r2, #23
     dba:	2310      	movs	r3, #16
     dbc:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dbe:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dc0:	4b25      	ldr	r3, [pc, #148]	; (e58 <SPI_ADF_PORT_init+0xa8>)
     dc2:	4926      	ldr	r1, [pc, #152]	; (e5c <SPI_ADF_PORT_init+0xac>)
     dc4:	6299      	str	r1, [r3, #40]	; 0x28
     dc6:	21c0      	movs	r1, #192	; 0xc0
     dc8:	0609      	lsls	r1, r1, #24
     dca:	468c      	mov	ip, r1
     dcc:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dce:	2044      	movs	r0, #68	; 0x44
     dd0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dd2:	2701      	movs	r7, #1
     dd4:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dd6:	2601      	movs	r6, #1
     dd8:	4331      	orrs	r1, r6
     dda:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ddc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dde:	2132      	movs	r1, #50	; 0x32
     de0:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     de2:	250f      	movs	r5, #15
     de4:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     de6:	2403      	movs	r4, #3
     de8:	46a0      	mov	r8, r4
     dea:	4644      	mov	r4, r8
     dec:	4320      	orrs	r0, r4
     dee:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     df0:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     df2:	2020      	movs	r0, #32
     df4:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     df6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     df8:	4819      	ldr	r0, [pc, #100]	; (e60 <SPI_ADF_PORT_init+0xb0>)
     dfa:	6298      	str	r0, [r3, #40]	; 0x28
     dfc:	4660      	mov	r0, ip
     dfe:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e00:	2045      	movs	r0, #69	; 0x45
     e02:	4684      	mov	ip, r0
     e04:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e06:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e08:	4330      	orrs	r0, r6
     e0a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e0c:	4664      	mov	r4, ip
     e0e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e10:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e12:	3c36      	subs	r4, #54	; 0x36
     e14:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     e16:	2430      	movs	r4, #48	; 0x30
     e18:	46a4      	mov	ip, r4
     e1a:	4664      	mov	r4, ip
     e1c:	4320      	orrs	r0, r4
     e1e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e20:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e22:	310e      	adds	r1, #14
     e24:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e26:	4a0f      	ldr	r2, [pc, #60]	; (e64 <SPI_ADF_PORT_init+0xb4>)
     e28:	629a      	str	r2, [r3, #40]	; 0x28
     e2a:	4a0f      	ldr	r2, [pc, #60]	; (e68 <SPI_ADF_PORT_init+0xb8>)
     e2c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e2e:	2246      	movs	r2, #70	; 0x46
     e30:	5c99      	ldrb	r1, [r3, r2]
     e32:	2004      	movs	r0, #4
     e34:	4381      	bics	r1, r0
     e36:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e38:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e3a:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e3c:	4331      	orrs	r1, r6
     e3e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e40:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e42:	2133      	movs	r1, #51	; 0x33
     e44:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e46:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     e48:	4640      	mov	r0, r8
     e4a:	4302      	orrs	r2, r0
     e4c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e4e:	545a      	strb	r2, [r3, r1]
}
     e50:	bc04      	pop	{r2}
     e52:	4690      	mov	r8, r2
     e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	41004400 	.word	0x41004400
     e5c:	40000010 	.word	0x40000010
     e60:	40000020 	.word	0x40000020
     e64:	40020040 	.word	0x40020040
     e68:	c0020000 	.word	0xc0020000

00000e6c <SPI_ADF_CLOCK_init>:
     e6c:	4a04      	ldr	r2, [pc, #16]	; (e80 <SPI_ADF_CLOCK_init+0x14>)
     e6e:	6a13      	ldr	r3, [r2, #32]
     e70:	2104      	movs	r1, #4
     e72:	430b      	orrs	r3, r1
     e74:	6213      	str	r3, [r2, #32]
     e76:	4a03      	ldr	r2, [pc, #12]	; (e84 <SPI_ADF_CLOCK_init+0x18>)
     e78:	4b03      	ldr	r3, [pc, #12]	; (e88 <SPI_ADF_CLOCK_init+0x1c>)
     e7a:	805a      	strh	r2, [r3, #2]
}
     e7c:	4770      	bx	lr
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	40000400 	.word	0x40000400
     e84:	00004014 	.word	0x00004014
     e88:	40000c00 	.word	0x40000c00

00000e8c <SPI_ADF_init>:
{
     e8c:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
     e8e:	4b04      	ldr	r3, [pc, #16]	; (ea0 <SPI_ADF_init+0x14>)
     e90:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
     e92:	4904      	ldr	r1, [pc, #16]	; (ea4 <SPI_ADF_init+0x18>)
     e94:	4804      	ldr	r0, [pc, #16]	; (ea8 <SPI_ADF_init+0x1c>)
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <SPI_ADF_init+0x20>)
     e98:	4798      	blx	r3
	SPI_ADF_PORT_init();
     e9a:	4b05      	ldr	r3, [pc, #20]	; (eb0 <SPI_ADF_init+0x24>)
     e9c:	4798      	blx	r3
}
     e9e:	bd10      	pop	{r4, pc}
     ea0:	00000e6d 	.word	0x00000e6d
     ea4:	42000800 	.word	0x42000800
     ea8:	20000afc 	.word	0x20000afc
     eac:	000015e5 	.word	0x000015e5
     eb0:	00000db1 	.word	0x00000db1

00000eb4 <SPI_LMX_PORT_init>:
{
     eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb6:	46c6      	mov	lr, r8
     eb8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     eba:	22c0      	movs	r2, #192	; 0xc0
     ebc:	05d2      	lsls	r2, r2, #23
     ebe:	2380      	movs	r3, #128	; 0x80
     ec0:	025b      	lsls	r3, r3, #9
     ec2:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ec4:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec6:	4b26      	ldr	r3, [pc, #152]	; (f60 <SPI_LMX_PORT_init+0xac>)
     ec8:	2180      	movs	r1, #128	; 0x80
     eca:	05c9      	lsls	r1, r1, #23
     ecc:	468c      	mov	ip, r1
     ece:	6299      	str	r1, [r3, #40]	; 0x28
     ed0:	4924      	ldr	r1, [pc, #144]	; (f64 <SPI_LMX_PORT_init+0xb0>)
     ed2:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ed4:	2050      	movs	r0, #80	; 0x50
     ed6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ed8:	2701      	movs	r7, #1
     eda:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     edc:	2601      	movs	r6, #1
     ede:	4331      	orrs	r1, r6
     ee0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ee4:	2138      	movs	r1, #56	; 0x38
     ee6:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ee8:	250f      	movs	r5, #15
     eea:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     eec:	2402      	movs	r4, #2
     eee:	46a0      	mov	r8, r4
     ef0:	4644      	mov	r4, r8
     ef2:	4320      	orrs	r0, r4
     ef4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ef6:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ef8:	2080      	movs	r0, #128	; 0x80
     efa:	0280      	lsls	r0, r0, #10
     efc:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     efe:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f00:	4660      	mov	r0, ip
     f02:	6298      	str	r0, [r3, #40]	; 0x28
     f04:	4818      	ldr	r0, [pc, #96]	; (f68 <SPI_LMX_PORT_init+0xb4>)
     f06:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	2051      	movs	r0, #81	; 0x51
     f0a:	4684      	mov	ip, r0
     f0c:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0e:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f10:	4330      	orrs	r0, r6
     f12:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f14:	4664      	mov	r4, ip
     f16:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f18:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f1a:	3c42      	subs	r4, #66	; 0x42
     f1c:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     f1e:	2420      	movs	r4, #32
     f20:	46a4      	mov	ip, r4
     f22:	4664      	mov	r4, ip
     f24:	4320      	orrs	r0, r4
     f26:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f28:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f2a:	2180      	movs	r1, #128	; 0x80
     f2c:	02c9      	lsls	r1, r1, #11
     f2e:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f30:	4a0e      	ldr	r2, [pc, #56]	; (f6c <SPI_LMX_PORT_init+0xb8>)
     f32:	629a      	str	r2, [r3, #40]	; 0x28
     f34:	4a0e      	ldr	r2, [pc, #56]	; (f70 <SPI_LMX_PORT_init+0xbc>)
     f36:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f38:	2252      	movs	r2, #82	; 0x52
     f3a:	5c99      	ldrb	r1, [r3, r2]
     f3c:	2004      	movs	r0, #4
     f3e:	4381      	bics	r1, r0
     f40:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f42:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f44:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f46:	4331      	orrs	r1, r6
     f48:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f4a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f4c:	2139      	movs	r1, #57	; 0x39
     f4e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f50:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     f52:	4640      	mov	r0, r8
     f54:	4302      	orrs	r2, r0
     f56:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f58:	545a      	strb	r2, [r3, r1]
}
     f5a:	bc04      	pop	{r2}
     f5c:	4690      	mov	r8, r2
     f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f60:	41004400 	.word	0x41004400
     f64:	c0000001 	.word	0xc0000001
     f68:	c0000002 	.word	0xc0000002
     f6c:	40020000 	.word	0x40020000
     f70:	c0020004 	.word	0xc0020004

00000f74 <SPI_LMX_CLOCK_init>:
     f74:	4a04      	ldr	r2, [pc, #16]	; (f88 <SPI_LMX_CLOCK_init+0x14>)
     f76:	6a13      	ldr	r3, [r2, #32]
     f78:	2108      	movs	r1, #8
     f7a:	430b      	orrs	r3, r1
     f7c:	6213      	str	r3, [r2, #32]
     f7e:	4a03      	ldr	r2, [pc, #12]	; (f8c <SPI_LMX_CLOCK_init+0x18>)
     f80:	4b03      	ldr	r3, [pc, #12]	; (f90 <SPI_LMX_CLOCK_init+0x1c>)
     f82:	805a      	strh	r2, [r3, #2]
}
     f84:	4770      	bx	lr
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	40000400 	.word	0x40000400
     f8c:	00004015 	.word	0x00004015
     f90:	40000c00 	.word	0x40000c00

00000f94 <SPI_LMX_init>:
{
     f94:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
     f96:	4b04      	ldr	r3, [pc, #16]	; (fa8 <SPI_LMX_init+0x14>)
     f98:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
     f9a:	4904      	ldr	r1, [pc, #16]	; (fac <SPI_LMX_init+0x18>)
     f9c:	4804      	ldr	r0, [pc, #16]	; (fb0 <SPI_LMX_init+0x1c>)
     f9e:	4b05      	ldr	r3, [pc, #20]	; (fb4 <SPI_LMX_init+0x20>)
     fa0:	4798      	blx	r3
	SPI_LMX_PORT_init();
     fa2:	4b05      	ldr	r3, [pc, #20]	; (fb8 <SPI_LMX_init+0x24>)
     fa4:	4798      	blx	r3
}
     fa6:	bd10      	pop	{r4, pc}
     fa8:	00000f75 	.word	0x00000f75
     fac:	42000c00 	.word	0x42000c00
     fb0:	20000a88 	.word	0x20000a88
     fb4:	000015e5 	.word	0x000015e5
     fb8:	00000eb5 	.word	0x00000eb5

00000fbc <SPI_ZCD_PORT_init>:
{
     fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fbe:	21c0      	movs	r1, #192	; 0xc0
     fc0:	05c9      	lsls	r1, r1, #23
     fc2:	2380      	movs	r3, #128	; 0x80
     fc4:	015b      	lsls	r3, r3, #5
     fc6:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fc8:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fca:	4b22      	ldr	r3, [pc, #136]	; (1054 <SPI_ZCD_PORT_init+0x98>)
     fcc:	4a22      	ldr	r2, [pc, #136]	; (1058 <SPI_ZCD_PORT_init+0x9c>)
     fce:	629a      	str	r2, [r3, #40]	; 0x28
     fd0:	20c0      	movs	r0, #192	; 0xc0
     fd2:	0600      	lsls	r0, r0, #24
     fd4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fd6:	264c      	movs	r6, #76	; 0x4c
     fd8:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fda:	2501      	movs	r5, #1
     fdc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fde:	2401      	movs	r4, #1
     fe0:	4322      	orrs	r2, r4
     fe2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fe4:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fe6:	3e16      	subs	r6, #22
     fe8:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fea:	270f      	movs	r7, #15
     fec:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
     fee:	2702      	movs	r7, #2
     ff0:	433a      	orrs	r2, r7
     ff2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ff4:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ff6:	2280      	movs	r2, #128	; 0x80
     ff8:	0092      	lsls	r2, r2, #2
     ffa:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ffc:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ffe:	4a17      	ldr	r2, [pc, #92]	; (105c <SPI_ZCD_PORT_init+0xa0>)
    1000:	629a      	str	r2, [r3, #40]	; 0x28
    1002:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1004:	2049      	movs	r0, #73	; 0x49
    1006:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1008:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    100a:	4322      	orrs	r2, r4
    100c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    100e:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1010:	2234      	movs	r2, #52	; 0x34
    1012:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1014:	3e27      	subs	r6, #39	; 0x27
    1016:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1018:	2730      	movs	r7, #48	; 0x30
    101a:	4338      	orrs	r0, r7
    101c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    101e:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1020:	2280      	movs	r2, #128	; 0x80
    1022:	0212      	lsls	r2, r2, #8
    1024:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1026:	4a0e      	ldr	r2, [pc, #56]	; (1060 <SPI_ZCD_PORT_init+0xa4>)
    1028:	629a      	str	r2, [r3, #40]	; 0x28
    102a:	4a0e      	ldr	r2, [pc, #56]	; (1064 <SPI_ZCD_PORT_init+0xa8>)
    102c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    102e:	224f      	movs	r2, #79	; 0x4f
    1030:	5c99      	ldrb	r1, [r3, r2]
    1032:	2004      	movs	r0, #4
    1034:	4381      	bics	r1, r0
    1036:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1038:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    103a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    103c:	4321      	orrs	r1, r4
    103e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1040:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1042:	2137      	movs	r1, #55	; 0x37
    1044:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1046:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1048:	2020      	movs	r0, #32
    104a:	4302      	orrs	r2, r0
    104c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    104e:	545a      	strb	r2, [r3, r1]
}
    1050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	41004400 	.word	0x41004400
    1058:	40001000 	.word	0x40001000
    105c:	40000200 	.word	0x40000200
    1060:	40028000 	.word	0x40028000
    1064:	c0020000 	.word	0xc0020000

00001068 <SPI_ZCD_CLOCK_init>:
    1068:	4a04      	ldr	r2, [pc, #16]	; (107c <SPI_ZCD_CLOCK_init+0x14>)
    106a:	6a13      	ldr	r3, [r2, #32]
    106c:	2110      	movs	r1, #16
    106e:	430b      	orrs	r3, r1
    1070:	6213      	str	r3, [r2, #32]
    1072:	4a03      	ldr	r2, [pc, #12]	; (1080 <SPI_ZCD_CLOCK_init+0x18>)
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <SPI_ZCD_CLOCK_init+0x1c>)
    1076:	805a      	strh	r2, [r3, #2]
}
    1078:	4770      	bx	lr
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	40000400 	.word	0x40000400
    1080:	00004016 	.word	0x00004016
    1084:	40000c00 	.word	0x40000c00

00001088 <SPI_ZCD_init>:
{
    1088:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
    108a:	4b04      	ldr	r3, [pc, #16]	; (109c <SPI_ZCD_init+0x14>)
    108c:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
    108e:	4904      	ldr	r1, [pc, #16]	; (10a0 <SPI_ZCD_init+0x18>)
    1090:	4804      	ldr	r0, [pc, #16]	; (10a4 <SPI_ZCD_init+0x1c>)
    1092:	4b05      	ldr	r3, [pc, #20]	; (10a8 <SPI_ZCD_init+0x20>)
    1094:	4798      	blx	r3
	SPI_ZCD_PORT_init();
    1096:	4b05      	ldr	r3, [pc, #20]	; (10ac <SPI_ZCD_init+0x24>)
    1098:	4798      	blx	r3
}
    109a:	bd10      	pop	{r4, pc}
    109c:	00001069 	.word	0x00001069
    10a0:	42001000 	.word	0x42001000
    10a4:	20000b14 	.word	0x20000b14
    10a8:	000015e5 	.word	0x000015e5
    10ac:	00000fbd 	.word	0x00000fbd

000010b0 <USART_0_CLOCK_init>:
    10b0:	4a04      	ldr	r2, [pc, #16]	; (10c4 <USART_0_CLOCK_init+0x14>)
    10b2:	6a13      	ldr	r3, [r2, #32]
    10b4:	2120      	movs	r1, #32
    10b6:	430b      	orrs	r3, r1
    10b8:	6213      	str	r3, [r2, #32]
    10ba:	4a03      	ldr	r2, [pc, #12]	; (10c8 <USART_0_CLOCK_init+0x18>)
    10bc:	4b03      	ldr	r3, [pc, #12]	; (10cc <USART_0_CLOCK_init+0x1c>)
    10be:	805a      	strh	r2, [r3, #2]
}
    10c0:	4770      	bx	lr
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	40000400 	.word	0x40000400
    10c8:	00004017 	.word	0x00004017
    10cc:	40000c00 	.word	0x40000c00

000010d0 <USART_0_PORT_init>:
{
    10d0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10d2:	4b0f      	ldr	r3, [pc, #60]	; (1110 <USART_0_PORT_init+0x40>)
    10d4:	2256      	movs	r2, #86	; 0x56
    10d6:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10d8:	2501      	movs	r5, #1
    10da:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10dc:	2401      	movs	r4, #1
    10de:	4321      	orrs	r1, r4
    10e0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10e2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10e4:	203b      	movs	r0, #59	; 0x3b
    10e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10e8:	3a47      	subs	r2, #71	; 0x47
    10ea:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    10ec:	2202      	movs	r2, #2
    10ee:	4311      	orrs	r1, r2
    10f0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10f2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10f4:	2157      	movs	r1, #87	; 0x57
    10f6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10f8:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10fa:	4322      	orrs	r2, r4
    10fc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10fe:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1100:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1102:	3948      	subs	r1, #72	; 0x48
    1104:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1106:	2120      	movs	r1, #32
    1108:	430a      	orrs	r2, r1
    110a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    110c:	541a      	strb	r2, [r3, r0]
}
    110e:	bd30      	pop	{r4, r5, pc}
    1110:	41004400 	.word	0x41004400

00001114 <USART_0_init>:
{
    1114:	b510      	push	{r4, lr}
    1116:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
    1118:	4b06      	ldr	r3, [pc, #24]	; (1134 <USART_0_init+0x20>)
    111a:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    111c:	2300      	movs	r3, #0
    111e:	9300      	str	r3, [sp, #0]
    1120:	3310      	adds	r3, #16
    1122:	4a05      	ldr	r2, [pc, #20]	; (1138 <USART_0_init+0x24>)
    1124:	4905      	ldr	r1, [pc, #20]	; (113c <USART_0_init+0x28>)
    1126:	4806      	ldr	r0, [pc, #24]	; (1140 <USART_0_init+0x2c>)
    1128:	4c06      	ldr	r4, [pc, #24]	; (1144 <USART_0_init+0x30>)
    112a:	47a0      	blx	r4
	USART_0_PORT_init();
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <USART_0_init+0x34>)
    112e:	4798      	blx	r3
}
    1130:	b002      	add	sp, #8
    1132:	bd10      	pop	{r4, pc}
    1134:	000010b1 	.word	0x000010b1
    1138:	20000594 	.word	0x20000594
    113c:	42001400 	.word	0x42001400
    1140:	20000aac 	.word	0x20000aac
    1144:	00001b39 	.word	0x00001b39
    1148:	000010d1 	.word	0x000010d1

0000114c <delay_driver_init>:
{
    114c:	b510      	push	{r4, lr}
	delay_init(SysTick);
    114e:	4802      	ldr	r0, [pc, #8]	; (1158 <delay_driver_init+0xc>)
    1150:	4b02      	ldr	r3, [pc, #8]	; (115c <delay_driver_init+0x10>)
    1152:	4798      	blx	r3
}
    1154:	bd10      	pop	{r4, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	e000e010 	.word	0xe000e010
    115c:	00001461 	.word	0x00001461

00001160 <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
    1160:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1162:	2204      	movs	r2, #4
    1164:	23c0      	movs	r3, #192	; 0xc0
    1166:	05db      	lsls	r3, r3, #23
    1168:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    116a:	490a      	ldr	r1, [pc, #40]	; (1194 <DAC_0_PORT_init+0x34>)
    116c:	4b0a      	ldr	r3, [pc, #40]	; (1198 <DAC_0_PORT_init+0x38>)
    116e:	628b      	str	r3, [r1, #40]	; 0x28
    1170:	23c0      	movs	r3, #192	; 0xc0
    1172:	061b      	lsls	r3, r3, #24
    1174:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1176:	2342      	movs	r3, #66	; 0x42
    1178:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    117a:	2001      	movs	r0, #1
    117c:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    117e:	4302      	orrs	r2, r0
    1180:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1182:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1184:	2231      	movs	r2, #49	; 0x31
    1186:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1188:	240f      	movs	r4, #15
    118a:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
    118c:	4303      	orrs	r3, r0
    118e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1190:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
    1192:	bd10      	pop	{r4, pc}
    1194:	41004400 	.word	0x41004400
    1198:	40000004 	.word	0x40000004

0000119c <DAC_0_CLOCK_init>:
    119c:	4a04      	ldr	r2, [pc, #16]	; (11b0 <DAC_0_CLOCK_init+0x14>)
    119e:	6a11      	ldr	r1, [r2, #32]
    11a0:	2380      	movs	r3, #128	; 0x80
    11a2:	02db      	lsls	r3, r3, #11
    11a4:	430b      	orrs	r3, r1
    11a6:	6213      	str	r3, [r2, #32]
    11a8:	4a02      	ldr	r2, [pc, #8]	; (11b4 <DAC_0_CLOCK_init+0x18>)
    11aa:	4b03      	ldr	r3, [pc, #12]	; (11b8 <DAC_0_CLOCK_init+0x1c>)
    11ac:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
    11ae:	4770      	bx	lr
    11b0:	40000400 	.word	0x40000400
    11b4:	00004021 	.word	0x00004021
    11b8:	40000c00 	.word	0x40000c00

000011bc <DAC_0_init>:

void DAC_0_init(void)
{
    11bc:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
    11be:	4b04      	ldr	r3, [pc, #16]	; (11d0 <DAC_0_init+0x14>)
    11c0:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    11c2:	4904      	ldr	r1, [pc, #16]	; (11d4 <DAC_0_init+0x18>)
    11c4:	4804      	ldr	r0, [pc, #16]	; (11d8 <DAC_0_init+0x1c>)
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <DAC_0_init+0x20>)
    11c8:	4798      	blx	r3
	DAC_0_PORT_init();
    11ca:	4b05      	ldr	r3, [pc, #20]	; (11e0 <DAC_0_init+0x24>)
    11cc:	4798      	blx	r3
}
    11ce:	bd10      	pop	{r4, pc}
    11d0:	0000119d 	.word	0x0000119d
    11d4:	42004800 	.word	0x42004800
    11d8:	20000aa0 	.word	0x20000aa0
    11dc:	00001411 	.word	0x00001411
    11e0:	00001161 	.word	0x00001161

000011e4 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e6:	46c6      	mov	lr, r8
    11e8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11ea:	24c0      	movs	r4, #192	; 0xc0
    11ec:	05e4      	lsls	r4, r4, #23
    11ee:	2280      	movs	r2, #128	; 0x80
    11f0:	0452      	lsls	r2, r2, #17
    11f2:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11f4:	4b1c      	ldr	r3, [pc, #112]	; (1268 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    11f6:	2780      	movs	r7, #128	; 0x80
    11f8:	05ff      	lsls	r7, r7, #23
    11fa:	629f      	str	r7, [r3, #40]	; 0x28
    11fc:	491b      	ldr	r1, [pc, #108]	; (126c <USB_DEVICE_INSTANCE_PORT_init+0x88>)
    11fe:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1200:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1202:	2058      	movs	r0, #88	; 0x58
    1204:	5c19      	ldrb	r1, [r3, r0]
    1206:	2204      	movs	r2, #4
    1208:	4690      	mov	r8, r2
    120a:	4391      	bics	r1, r2
    120c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    120e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1210:	2601      	movs	r6, #1
    1212:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1214:	2501      	movs	r5, #1
    1216:	4329      	orrs	r1, r5
    1218:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    121a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    121c:	381c      	subs	r0, #28
    121e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1220:	320b      	adds	r2, #11
    1222:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    1224:	2206      	movs	r2, #6
    1226:	4694      	mov	ip, r2
    1228:	4662      	mov	r2, ip
    122a:	4311      	orrs	r1, r2
    122c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    122e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1230:	2180      	movs	r1, #128	; 0x80
    1232:	0489      	lsls	r1, r1, #18
    1234:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1236:	629f      	str	r7, [r3, #40]	; 0x28
    1238:	4f0d      	ldr	r7, [pc, #52]	; (1270 <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
    123a:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    123c:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    123e:	2159      	movs	r1, #89	; 0x59
    1240:	5c5c      	ldrb	r4, [r3, r1]
    1242:	4642      	mov	r2, r8
    1244:	4394      	bics	r4, r2
    1246:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1248:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    124a:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    124c:	432a      	orrs	r2, r5
    124e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1250:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1252:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1254:	394a      	subs	r1, #74	; 0x4a
    1256:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1258:	2160      	movs	r1, #96	; 0x60
    125a:	430a      	orrs	r2, r1
    125c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    125e:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    1260:	bc04      	pop	{r2}
    1262:	4690      	mov	r8, r2
    1264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	41004400 	.word	0x41004400
    126c:	c0000100 	.word	0xc0000100
    1270:	c0000200 	.word	0xc0000200

00001274 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    1274:	4b06      	ldr	r3, [pc, #24]	; (1290 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    1276:	69da      	ldr	r2, [r3, #28]
    1278:	2120      	movs	r1, #32
    127a:	430a      	orrs	r2, r1
    127c:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    127e:	695a      	ldr	r2, [r3, #20]
    1280:	3120      	adds	r1, #32
    1282:	430a      	orrs	r2, r1
    1284:	615a      	str	r2, [r3, #20]
    1286:	4a03      	ldr	r2, [pc, #12]	; (1294 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    1288:	4b03      	ldr	r3, [pc, #12]	; (1298 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    128a:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    128c:	4770      	bx	lr
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	40000400 	.word	0x40000400
    1294:	00004406 	.word	0x00004406
    1298:	40000c00 	.word	0x40000c00

0000129c <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    129c:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    129e:	4b03      	ldr	r3, [pc, #12]	; (12ac <USB_DEVICE_INSTANCE_init+0x10>)
    12a0:	4798      	blx	r3
	usb_d_init();
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <USB_DEVICE_INSTANCE_init+0x14>)
    12a4:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    12a6:	4b03      	ldr	r3, [pc, #12]	; (12b4 <USB_DEVICE_INSTANCE_init+0x18>)
    12a8:	4798      	blx	r3
}
    12aa:	bd10      	pop	{r4, pc}
    12ac:	00001275 	.word	0x00001275
    12b0:	00001e21 	.word	0x00001e21
    12b4:	000011e5 	.word	0x000011e5

000012b8 <system_init>:

void system_init(void)
{
    12b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ba:	46d6      	mov	lr, sl
    12bc:	464f      	mov	r7, r9
    12be:	4646      	mov	r6, r8
    12c0:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    12c2:	4b3a      	ldr	r3, [pc, #232]	; (13ac <system_init+0xf4>)
    12c4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12c6:	22c0      	movs	r2, #192	; 0xc0
    12c8:	05d2      	lsls	r2, r2, #23
    12ca:	2308      	movs	r3, #8
    12cc:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12ce:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12d0:	4b37      	ldr	r3, [pc, #220]	; (13b0 <system_init+0xf8>)
    12d2:	4938      	ldr	r1, [pc, #224]	; (13b4 <system_init+0xfc>)
    12d4:	6299      	str	r1, [r3, #40]	; 0x28
    12d6:	25c0      	movs	r5, #192	; 0xc0
    12d8:	062d      	lsls	r5, r5, #24
    12da:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12dc:	2443      	movs	r4, #67	; 0x43
    12de:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12e0:	2101      	movs	r1, #1
    12e2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12e4:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12e6:	2080      	movs	r0, #128	; 0x80
    12e8:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12ea:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ec:	4832      	ldr	r0, [pc, #200]	; (13b8 <system_init+0x100>)
    12ee:	6298      	str	r0, [r3, #40]	; 0x28
    12f0:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12f2:	3404      	adds	r4, #4
    12f4:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12f6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12f8:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12fa:	2080      	movs	r0, #128	; 0x80
    12fc:	0300      	lsls	r0, r0, #12
    12fe:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1300:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1302:	2080      	movs	r0, #128	; 0x80
    1304:	05c0      	lsls	r0, r0, #23
    1306:	6298      	str	r0, [r3, #40]	; 0x28
    1308:	4c2c      	ldr	r4, [pc, #176]	; (13bc <system_init+0x104>)
    130a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    130c:	2653      	movs	r6, #83	; 0x53
    130e:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1310:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1312:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1314:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1316:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1318:	6298      	str	r0, [r3, #40]	; 0x28
    131a:	4c29      	ldr	r4, [pc, #164]	; (13c0 <system_init+0x108>)
    131c:	46a4      	mov	ip, r4
    131e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1320:	360b      	adds	r6, #11
    1322:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1324:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1326:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1328:	2494      	movs	r4, #148	; 0x94
    132a:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    132c:	3c0c      	subs	r4, #12
    132e:	46a1      	mov	r9, r4
    1330:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1332:	3420      	adds	r4, #32
    1334:	4f23      	ldr	r7, [pc, #140]	; (13c4 <system_init+0x10c>)
    1336:	511f      	str	r7, [r3, r4]
    1338:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    133a:	27c0      	movs	r7, #192	; 0xc0
    133c:	46b8      	mov	r8, r7
    133e:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1340:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1342:	4646      	mov	r6, r8
    1344:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1346:	3e28      	subs	r6, #40	; 0x28
    1348:	46b2      	mov	sl, r6
    134a:	3e96      	subs	r6, #150	; 0x96
    134c:	4657      	mov	r7, sl
    134e:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1350:	464f      	mov	r7, r9
    1352:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1354:	4e1c      	ldr	r6, [pc, #112]	; (13c8 <system_init+0x110>)
    1356:	511e      	str	r6, [r3, r4]
    1358:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    135a:	25c1      	movs	r5, #193	; 0xc1
    135c:	46a8      	mov	r8, r5
    135e:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1360:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1362:	4646      	mov	r6, r8
    1364:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1366:	4655      	mov	r5, sl
    1368:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    136a:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    136c:	5118      	str	r0, [r3, r4]
    136e:	4662      	mov	r2, ip
    1370:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1372:	20de      	movs	r0, #222	; 0xde
    1374:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1376:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1378:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    137a:	4b14      	ldr	r3, [pc, #80]	; (13cc <system_init+0x114>)
    137c:	4798      	blx	r3

	SPI_ADF_init();
    137e:	4b14      	ldr	r3, [pc, #80]	; (13d0 <system_init+0x118>)
    1380:	4798      	blx	r3

	SPI_LMX_init();
    1382:	4b14      	ldr	r3, [pc, #80]	; (13d4 <system_init+0x11c>)
    1384:	4798      	blx	r3

	SPI_ZCD_init();
    1386:	4b14      	ldr	r3, [pc, #80]	; (13d8 <system_init+0x120>)
    1388:	4798      	blx	r3
	USART_0_init();
    138a:	4b14      	ldr	r3, [pc, #80]	; (13dc <system_init+0x124>)
    138c:	4798      	blx	r3

	delay_driver_init();
    138e:	4b14      	ldr	r3, [pc, #80]	; (13e0 <system_init+0x128>)
    1390:	4798      	blx	r3

	TIMER_ZCD_init();
    1392:	4b14      	ldr	r3, [pc, #80]	; (13e4 <system_init+0x12c>)
    1394:	4798      	blx	r3
	TIMER_USB_init();
    1396:	4b14      	ldr	r3, [pc, #80]	; (13e8 <system_init+0x130>)
    1398:	4798      	blx	r3
	DAC_0_init();
    139a:	4b14      	ldr	r3, [pc, #80]	; (13ec <system_init+0x134>)
    139c:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    139e:	4b14      	ldr	r3, [pc, #80]	; (13f0 <system_init+0x138>)
    13a0:	4798      	blx	r3
}
    13a2:	bc1c      	pop	{r2, r3, r4}
    13a4:	4690      	mov	r8, r2
    13a6:	4699      	mov	r9, r3
    13a8:	46a2      	mov	sl, r4
    13aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ac:	000023a9 	.word	0x000023a9
    13b0:	41004400 	.word	0x41004400
    13b4:	40000008 	.word	0x40000008
    13b8:	40000080 	.word	0x40000080
    13bc:	c0000008 	.word	0xc0000008
    13c0:	c0004000 	.word	0xc0004000
    13c4:	40000001 	.word	0x40000001
    13c8:	40000002 	.word	0x40000002
    13cc:	00000d59 	.word	0x00000d59
    13d0:	00000e8d 	.word	0x00000e8d
    13d4:	00000f95 	.word	0x00000f95
    13d8:	00001089 	.word	0x00001089
    13dc:	00001115 	.word	0x00001115
    13e0:	0000114d 	.word	0x0000114d
    13e4:	00000cd9 	.word	0x00000cd9
    13e8:	00000d19 	.word	0x00000d19
    13ec:	000011bd 	.word	0x000011bd
    13f0:	0000129d 	.word	0x0000129d

000013f4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13f4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    13f8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    13fa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    13fc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1400:	4770      	bx	lr

00001402 <atomic_leave_critical>:
    1402:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1406:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1408:	f383 8810 	msr	PRIMASK, r3
}
    140c:	4770      	bx	lr
	...

00001410 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	0004      	movs	r4, r0
    1414:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1416:	2800      	cmp	r0, #0
    1418:	d010      	beq.n	143c <dac_sync_init+0x2c>
    141a:	2900      	cmp	r1, #0
    141c:	d00c      	beq.n	1438 <dac_sync_init+0x28>
    141e:	2001      	movs	r0, #1
    1420:	2232      	movs	r2, #50	; 0x32
    1422:	490c      	ldr	r1, [pc, #48]	; (1454 <dac_sync_init+0x44>)
    1424:	4b0c      	ldr	r3, [pc, #48]	; (1458 <dac_sync_init+0x48>)
    1426:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1428:	0029      	movs	r1, r5
    142a:	0020      	movs	r0, r4
    142c:	4b0b      	ldr	r3, [pc, #44]	; (145c <dac_sync_init+0x4c>)
    142e:	4798      	blx	r3
	if (rc) {
    1430:	2800      	cmp	r0, #0
    1432:	d10e      	bne.n	1452 <dac_sync_init+0x42>
    1434:	2300      	movs	r3, #0
    1436:	e00a      	b.n	144e <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    1438:	2000      	movs	r0, #0
    143a:	e7f1      	b.n	1420 <dac_sync_init+0x10>
    143c:	2000      	movs	r0, #0
    143e:	e7ef      	b.n	1420 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1440:	00da      	lsls	r2, r3, #3
    1442:	18a2      	adds	r2, r4, r2
    1444:	2100      	movs	r1, #0
    1446:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    1448:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    144a:	3301      	adds	r3, #1
    144c:	b2db      	uxtb	r3, r3
    144e:	2b00      	cmp	r3, #0
    1450:	d0f6      	beq.n	1440 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
    1454:	00007554 	.word	0x00007554
    1458:	000021ad 	.word	0x000021ad
    145c:	0000241d 	.word	0x0000241d

00001460 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1460:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    1462:	4b02      	ldr	r3, [pc, #8]	; (146c <delay_init+0xc>)
    1464:	6018      	str	r0, [r3, #0]
    1466:	4b02      	ldr	r3, [pc, #8]	; (1470 <delay_init+0x10>)
    1468:	4798      	blx	r3
}
    146a:	bd10      	pop	{r4, pc}
    146c:	200005a4 	.word	0x200005a4
    1470:	00002d75 	.word	0x00002d75

00001474 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1474:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1476:	4b04      	ldr	r3, [pc, #16]	; (1488 <delay_ms+0x14>)
    1478:	681c      	ldr	r4, [r3, #0]
    147a:	4b04      	ldr	r3, [pc, #16]	; (148c <delay_ms+0x18>)
    147c:	4798      	blx	r3
    147e:	0001      	movs	r1, r0
    1480:	0020      	movs	r0, r4
    1482:	4b03      	ldr	r3, [pc, #12]	; (1490 <delay_ms+0x1c>)
    1484:	4798      	blx	r3
}
    1486:	bd10      	pop	{r4, pc}
    1488:	200005a4 	.word	0x200005a4
    148c:	0000239d 	.word	0x0000239d
    1490:	00002d81 	.word	0x00002d81

00001494 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1494:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1496:	2501      	movs	r5, #1
    1498:	2400      	movs	r4, #0

	while (upper >= lower) {
    149a:	e007      	b.n	14ac <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    149c:	4a0d      	ldr	r2, [pc, #52]	; (14d4 <process_ext_irq+0x40>)
    149e:	58b3      	ldr	r3, [r6, r2]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d000      	beq.n	14a6 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    14a4:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    14a6:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    14a8:	3a01      	subs	r2, #1
    14aa:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    14ac:	42ac      	cmp	r4, r5
    14ae:	d8fa      	bhi.n	14a6 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    14b0:	192b      	adds	r3, r5, r4
    14b2:	105b      	asrs	r3, r3, #1
    14b4:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    14b6:	2a00      	cmp	r2, #0
    14b8:	d1f5      	bne.n	14a6 <process_ext_irq+0x12>
    14ba:	21ff      	movs	r1, #255	; 0xff
    14bc:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    14be:	00de      	lsls	r6, r3, #3
    14c0:	4904      	ldr	r1, [pc, #16]	; (14d4 <process_ext_irq+0x40>)
    14c2:	1989      	adds	r1, r1, r6
    14c4:	6849      	ldr	r1, [r1, #4]
    14c6:	4281      	cmp	r1, r0
    14c8:	d0e8      	beq.n	149c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    14ca:	d2ed      	bcs.n	14a8 <process_ext_irq+0x14>
			lower = middle + 1;
    14cc:	3201      	adds	r2, #1
    14ce:	b2d4      	uxtb	r4, r2
    14d0:	e7ec      	b.n	14ac <process_ext_irq+0x18>
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	200005a8 	.word	0x200005a8

000014d8 <ext_irq_init>:
{
    14d8:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    14da:	2300      	movs	r3, #0
    14dc:	2b00      	cmp	r3, #0
    14de:	d003      	beq.n	14e8 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
    14e0:	4807      	ldr	r0, [pc, #28]	; (1500 <ext_irq_init+0x28>)
    14e2:	4b08      	ldr	r3, [pc, #32]	; (1504 <ext_irq_init+0x2c>)
    14e4:	4798      	blx	r3
}
    14e6:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
    14e8:	4a07      	ldr	r2, [pc, #28]	; (1508 <ext_irq_init+0x30>)
    14ea:	00d9      	lsls	r1, r3, #3
    14ec:	1850      	adds	r0, r2, r1
    14ee:	2401      	movs	r4, #1
    14f0:	4264      	negs	r4, r4
    14f2:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    14f4:	2000      	movs	r0, #0
    14f6:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    14f8:	3301      	adds	r3, #1
    14fa:	b29b      	uxth	r3, r3
    14fc:	e7ee      	b.n	14dc <ext_irq_init+0x4>
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	00001495 	.word	0x00001495
    1504:	00002449 	.word	0x00002449
    1508:	200005a8 	.word	0x200005a8

0000150c <ext_irq_register>:
{
    150c:	b5f0      	push	{r4, r5, r6, r7, lr}
    150e:	46c6      	mov	lr, r8
    1510:	b500      	push	{lr}
    1512:	b084      	sub	sp, #16
    1514:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
    1516:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1518:	2b00      	cmp	r3, #0
    151a:	d010      	beq.n	153e <ext_irq_register+0x32>
	bool    found = false;
    151c:	2300      	movs	r3, #0
    151e:	4698      	mov	r8, r3
	if (NULL == cb) {
    1520:	2900      	cmp	r1, #0
    1522:	d01b      	beq.n	155c <ext_irq_register+0x50>
	if (!found) {
    1524:	4643      	mov	r3, r8
    1526:	2b00      	cmp	r3, #0
    1528:	d146      	bne.n	15b8 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    152a:	2b00      	cmp	r3, #0
    152c:	d124      	bne.n	1578 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
    152e:	00da      	lsls	r2, r3, #3
    1530:	4c2a      	ldr	r4, [pc, #168]	; (15dc <ext_irq_register+0xd0>)
    1532:	5912      	ldr	r2, [r2, r4]
    1534:	2a00      	cmp	r2, #0
    1536:	d018      	beq.n	156a <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1538:	3301      	adds	r3, #1
    153a:	b2db      	uxtb	r3, r3
    153c:	e7f5      	b.n	152a <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
    153e:	00dc      	lsls	r4, r3, #3
    1540:	4a26      	ldr	r2, [pc, #152]	; (15dc <ext_irq_register+0xd0>)
    1542:	1912      	adds	r2, r2, r4
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	9801      	ldr	r0, [sp, #4]
    1548:	4282      	cmp	r2, r0
    154a:	d002      	beq.n	1552 <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    154c:	3301      	adds	r3, #1
    154e:	b2db      	uxtb	r3, r3
    1550:	e7e2      	b.n	1518 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
    1552:	4b22      	ldr	r3, [pc, #136]	; (15dc <ext_irq_register+0xd0>)
    1554:	50e1      	str	r1, [r4, r3]
			found          = true;
    1556:	2301      	movs	r3, #1
    1558:	4698      	mov	r8, r3
			break;
    155a:	e7e1      	b.n	1520 <ext_irq_register+0x14>
		if (!found) {
    155c:	4643      	mov	r3, r8
    155e:	2b00      	cmp	r3, #0
    1560:	d035      	beq.n	15ce <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
    1562:	9801      	ldr	r0, [sp, #4]
    1564:	4b1e      	ldr	r3, [pc, #120]	; (15e0 <ext_irq_register+0xd4>)
    1566:	4798      	blx	r3
    1568:	e02d      	b.n	15c6 <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
    156a:	00dd      	lsls	r5, r3, #3
    156c:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
    156e:	1965      	adds	r5, r4, r5
    1570:	9a01      	ldr	r2, [sp, #4]
    1572:	606a      	str	r2, [r5, #4]
				found           = true;
    1574:	2201      	movs	r2, #1
    1576:	4690      	mov	r8, r2
    1578:	2200      	movs	r2, #0
    157a:	e001      	b.n	1580 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    157c:	3201      	adds	r2, #1
    157e:	b2d2      	uxtb	r2, r2
    1580:	0019      	movs	r1, r3
    1582:	4311      	orrs	r1, r2
    1584:	d118      	bne.n	15b8 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1586:	4915      	ldr	r1, [pc, #84]	; (15dc <ext_irq_register+0xd0>)
    1588:	00dc      	lsls	r4, r3, #3
    158a:	190c      	adds	r4, r1, r4
    158c:	6867      	ldr	r7, [r4, #4]
    158e:	00d4      	lsls	r4, r2, #3
    1590:	1909      	adds	r1, r1, r4
    1592:	6849      	ldr	r1, [r1, #4]
    1594:	428f      	cmp	r7, r1
    1596:	d2f1      	bcs.n	157c <ext_irq_register+0x70>
    1598:	1c4c      	adds	r4, r1, #1
    159a:	d0ef      	beq.n	157c <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
    159c:	a902      	add	r1, sp, #8
    159e:	468c      	mov	ip, r1
    15a0:	4f0e      	ldr	r7, [pc, #56]	; (15dc <ext_irq_register+0xd0>)
    15a2:	00d1      	lsls	r1, r2, #3
    15a4:	1879      	adds	r1, r7, r1
    15a6:	4664      	mov	r4, ip
    15a8:	c941      	ldmia	r1!, {r0, r6}
    15aa:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
    15ac:	00dd      	lsls	r5, r3, #3
    15ae:	197d      	adds	r5, r7, r5
    15b0:	4661      	mov	r1, ip
    15b2:	c911      	ldmia	r1!, {r0, r4}
    15b4:	c511      	stmia	r5!, {r0, r4}
    15b6:	e7e1      	b.n	157c <ext_irq_register+0x70>
	if (!found) {
    15b8:	4643      	mov	r3, r8
    15ba:	2b00      	cmp	r3, #0
    15bc:	d00a      	beq.n	15d4 <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
    15be:	2101      	movs	r1, #1
    15c0:	9801      	ldr	r0, [sp, #4]
    15c2:	4b07      	ldr	r3, [pc, #28]	; (15e0 <ext_irq_register+0xd4>)
    15c4:	4798      	blx	r3
}
    15c6:	b004      	add	sp, #16
    15c8:	bc04      	pop	{r2}
    15ca:	4690      	mov	r8, r2
    15cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    15ce:	200d      	movs	r0, #13
    15d0:	4240      	negs	r0, r0
    15d2:	e7f8      	b.n	15c6 <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
    15d4:	200d      	movs	r0, #13
    15d6:	4240      	negs	r0, r0
    15d8:	e7f5      	b.n	15c6 <ext_irq_register+0xba>
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	200005a8 	.word	0x200005a8
    15e0:	000024d9 	.word	0x000024d9

000015e4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    15e4:	b570      	push	{r4, r5, r6, lr}
    15e6:	0004      	movs	r4, r0
    15e8:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    15ea:	2800      	cmp	r0, #0
    15ec:	d017      	beq.n	161e <spi_m_sync_init+0x3a>
    15ee:	2900      	cmp	r1, #0
    15f0:	d013      	beq.n	161a <spi_m_sync_init+0x36>
    15f2:	2001      	movs	r0, #1
    15f4:	2240      	movs	r2, #64	; 0x40
    15f6:	490b      	ldr	r1, [pc, #44]	; (1624 <spi_m_sync_init+0x40>)
    15f8:	4b0b      	ldr	r3, [pc, #44]	; (1628 <spi_m_sync_init+0x44>)
    15fa:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    15fc:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    15fe:	1d20      	adds	r0, r4, #4
    1600:	0029      	movs	r1, r5
    1602:	4b0a      	ldr	r3, [pc, #40]	; (162c <spi_m_sync_init+0x48>)
    1604:	4798      	blx	r3

	if (rc < 0) {
    1606:	2800      	cmp	r0, #0
    1608:	db06      	blt.n	1618 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    160a:	4b09      	ldr	r3, [pc, #36]	; (1630 <spi_m_sync_init+0x4c>)
    160c:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    160e:	4b09      	ldr	r3, [pc, #36]	; (1634 <spi_m_sync_init+0x50>)
    1610:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1612:	4b09      	ldr	r3, [pc, #36]	; (1638 <spi_m_sync_init+0x54>)
    1614:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1616:	2000      	movs	r0, #0
}
    1618:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    161a:	2000      	movs	r0, #0
    161c:	e7ea      	b.n	15f4 <spi_m_sync_init+0x10>
    161e:	2000      	movs	r0, #0
    1620:	e7e8      	b.n	15f4 <spi_m_sync_init+0x10>
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	00007570 	.word	0x00007570
    1628:	000021ad 	.word	0x000021ad
    162c:	00002959 	.word	0x00002959
    1630:	ffff8000 	.word	0xffff8000
    1634:	000016c1 	.word	0x000016c1
    1638:	00001685 	.word	0x00001685

0000163c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    163c:	b530      	push	{r4, r5, lr}
    163e:	b087      	sub	sp, #28
    1640:	0004      	movs	r4, r0
    1642:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1644:	2800      	cmp	r0, #0
    1646:	d015      	beq.n	1674 <spi_m_sync_transfer+0x38>
    1648:	2900      	cmp	r1, #0
    164a:	d011      	beq.n	1670 <spi_m_sync_transfer+0x34>
    164c:	2001      	movs	r0, #1
    164e:	22b3      	movs	r2, #179	; 0xb3
    1650:	4909      	ldr	r1, [pc, #36]	; (1678 <spi_m_sync_transfer+0x3c>)
    1652:	4b0a      	ldr	r3, [pc, #40]	; (167c <spi_m_sync_transfer+0x40>)
    1654:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1656:	682b      	ldr	r3, [r5, #0]
    1658:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    165a:	686b      	ldr	r3, [r5, #4]
    165c:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    165e:	68ab      	ldr	r3, [r5, #8]
    1660:	9301      	str	r3, [sp, #4]
    1662:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1664:	1d20      	adds	r0, r4, #4
    1666:	a903      	add	r1, sp, #12
    1668:	4b05      	ldr	r3, [pc, #20]	; (1680 <spi_m_sync_transfer+0x44>)
    166a:	4798      	blx	r3
}
    166c:	b007      	add	sp, #28
    166e:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    1670:	2000      	movs	r0, #0
    1672:	e7ec      	b.n	164e <spi_m_sync_transfer+0x12>
    1674:	2000      	movs	r0, #0
    1676:	e7ea      	b.n	164e <spi_m_sync_transfer+0x12>
    1678:	00007570 	.word	0x00007570
    167c:	000021ad 	.word	0x000021ad
    1680:	00002b5d 	.word	0x00002b5d

00001684 <_spi_m_sync_io_write>:
{
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	b084      	sub	sp, #16
    1688:	0004      	movs	r4, r0
    168a:	000e      	movs	r6, r1
    168c:	0015      	movs	r5, r2
	ASSERT(io);
    168e:	1e43      	subs	r3, r0, #1
    1690:	4198      	sbcs	r0, r3
    1692:	b2c0      	uxtb	r0, r0
    1694:	22a3      	movs	r2, #163	; 0xa3
    1696:	4907      	ldr	r1, [pc, #28]	; (16b4 <_spi_m_sync_io_write+0x30>)
    1698:	4b07      	ldr	r3, [pc, #28]	; (16b8 <_spi_m_sync_io_write+0x34>)
    169a:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    169c:	0020      	movs	r0, r4
    169e:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    16a0:	2300      	movs	r3, #0
    16a2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    16a4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    16a6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    16a8:	a901      	add	r1, sp, #4
    16aa:	4b04      	ldr	r3, [pc, #16]	; (16bc <_spi_m_sync_io_write+0x38>)
    16ac:	4798      	blx	r3
}
    16ae:	b004      	add	sp, #16
    16b0:	bd70      	pop	{r4, r5, r6, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00007570 	.word	0x00007570
    16b8:	000021ad 	.word	0x000021ad
    16bc:	0000163d 	.word	0x0000163d

000016c0 <_spi_m_sync_io_read>:
{
    16c0:	b570      	push	{r4, r5, r6, lr}
    16c2:	b084      	sub	sp, #16
    16c4:	0004      	movs	r4, r0
    16c6:	000e      	movs	r6, r1
    16c8:	0015      	movs	r5, r2
	ASSERT(io);
    16ca:	1e43      	subs	r3, r0, #1
    16cc:	4198      	sbcs	r0, r3
    16ce:	b2c0      	uxtb	r0, r0
    16d0:	2287      	movs	r2, #135	; 0x87
    16d2:	4907      	ldr	r1, [pc, #28]	; (16f0 <_spi_m_sync_io_read+0x30>)
    16d4:	4b07      	ldr	r3, [pc, #28]	; (16f4 <_spi_m_sync_io_read+0x34>)
    16d6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    16d8:	0020      	movs	r0, r4
    16da:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    16dc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    16de:	2300      	movs	r3, #0
    16e0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    16e2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    16e4:	a901      	add	r1, sp, #4
    16e6:	4b04      	ldr	r3, [pc, #16]	; (16f8 <_spi_m_sync_io_read+0x38>)
    16e8:	4798      	blx	r3
}
    16ea:	b004      	add	sp, #16
    16ec:	bd70      	pop	{r4, r5, r6, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00007570 	.word	0x00007570
    16f4:	000021ad 	.word	0x000021ad
    16f8:	0000163d 	.word	0x0000163d

000016fc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    16fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    16fe:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1700:	2e00      	cmp	r6, #0
    1702:	d002      	beq.n	170a <timer_add_timer_task+0xe>
    1704:	0033      	movs	r3, r6
    1706:	2500      	movs	r5, #0
    1708:	e00c      	b.n	1724 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    170a:	4b10      	ldr	r3, [pc, #64]	; (174c <timer_add_timer_task+0x50>)
    170c:	4798      	blx	r3
		return;
    170e:	e018      	b.n	1742 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1710:	689f      	ldr	r7, [r3, #8]
    1712:	46bc      	mov	ip, r7
    1714:	4464      	add	r4, ip
    1716:	1aa4      	subs	r4, r4, r2
    1718:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    171a:	688f      	ldr	r7, [r1, #8]
    171c:	42bc      	cmp	r4, r7
    171e:	d20b      	bcs.n	1738 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    1720:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1722:	681b      	ldr	r3, [r3, #0]
    1724:	2b00      	cmp	r3, #0
    1726:	d007      	beq.n	1738 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    1728:	685c      	ldr	r4, [r3, #4]
    172a:	4294      	cmp	r4, r2
    172c:	d8f0      	bhi.n	1710 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    172e:	1aa4      	subs	r4, r4, r2
    1730:	689f      	ldr	r7, [r3, #8]
    1732:	46bc      	mov	ip, r7
    1734:	4464      	add	r4, ip
    1736:	e7f0      	b.n	171a <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    1738:	42b3      	cmp	r3, r6
    173a:	d003      	beq.n	1744 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    173c:	0028      	movs	r0, r5
    173e:	4b04      	ldr	r3, [pc, #16]	; (1750 <timer_add_timer_task+0x54>)
    1740:	4798      	blx	r3
	}
}
    1742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1744:	4b01      	ldr	r3, [pc, #4]	; (174c <timer_add_timer_task+0x50>)
    1746:	4798      	blx	r3
    1748:	e7fb      	b.n	1742 <timer_add_timer_task+0x46>
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	000021cd 	.word	0x000021cd
    1750:	000021f9 	.word	0x000021f9

00001754 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1756:	0005      	movs	r5, r0
    1758:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    175a:	6903      	ldr	r3, [r0, #16]
    175c:	1c5e      	adds	r6, r3, #1
    175e:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1760:	7e03      	ldrb	r3, [r0, #24]
    1762:	07db      	lsls	r3, r3, #31
    1764:	d402      	bmi.n	176c <timer_process_counted+0x18>
    1766:	7e03      	ldrb	r3, [r0, #24]
    1768:	079b      	lsls	r3, r3, #30
    176a:	d50a      	bpl.n	1782 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    176c:	7e2b      	ldrb	r3, [r5, #24]
    176e:	2202      	movs	r2, #2
    1770:	4313      	orrs	r3, r2
    1772:	b2db      	uxtb	r3, r3
    1774:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    1776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1778:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    177a:	68e3      	ldr	r3, [r4, #12]
    177c:	0020      	movs	r0, r4
    177e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1780:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    1782:	2c00      	cmp	r4, #0
    1784:	d0f7      	beq.n	1776 <timer_process_counted+0x22>
    1786:	6863      	ldr	r3, [r4, #4]
    1788:	1af3      	subs	r3, r6, r3
    178a:	68a2      	ldr	r2, [r4, #8]
    178c:	4293      	cmp	r3, r2
    178e:	d3f2      	bcc.n	1776 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    1790:	002f      	movs	r7, r5
    1792:	3714      	adds	r7, #20
    1794:	0038      	movs	r0, r7
    1796:	4b06      	ldr	r3, [pc, #24]	; (17b0 <timer_process_counted+0x5c>)
    1798:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    179a:	7c23      	ldrb	r3, [r4, #16]
    179c:	2b01      	cmp	r3, #1
    179e:	d1eb      	bne.n	1778 <timer_process_counted+0x24>
			tmp->time_label = time;
    17a0:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    17a2:	0032      	movs	r2, r6
    17a4:	0021      	movs	r1, r4
    17a6:	0038      	movs	r0, r7
    17a8:	4b02      	ldr	r3, [pc, #8]	; (17b4 <timer_process_counted+0x60>)
    17aa:	4798      	blx	r3
    17ac:	e7e4      	b.n	1778 <timer_process_counted+0x24>
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	00002241 	.word	0x00002241
    17b4:	000016fd 	.word	0x000016fd

000017b8 <timer_init>:
{
    17b8:	b570      	push	{r4, r5, r6, lr}
    17ba:	0004      	movs	r4, r0
    17bc:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    17be:	2800      	cmp	r0, #0
    17c0:	d012      	beq.n	17e8 <timer_init+0x30>
    17c2:	2900      	cmp	r1, #0
    17c4:	d00e      	beq.n	17e4 <timer_init+0x2c>
    17c6:	2001      	movs	r0, #1
    17c8:	223b      	movs	r2, #59	; 0x3b
    17ca:	4908      	ldr	r1, [pc, #32]	; (17ec <timer_init+0x34>)
    17cc:	4b08      	ldr	r3, [pc, #32]	; (17f0 <timer_init+0x38>)
    17ce:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    17d0:	0029      	movs	r1, r5
    17d2:	0020      	movs	r0, r4
    17d4:	4b07      	ldr	r3, [pc, #28]	; (17f4 <timer_init+0x3c>)
    17d6:	4798      	blx	r3
	descr->time                           = 0;
    17d8:	2300      	movs	r3, #0
    17da:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    17dc:	4b06      	ldr	r3, [pc, #24]	; (17f8 <timer_init+0x40>)
    17de:	6023      	str	r3, [r4, #0]
}
    17e0:	2000      	movs	r0, #0
    17e2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    17e4:	2000      	movs	r0, #0
    17e6:	e7ef      	b.n	17c8 <timer_init+0x10>
    17e8:	2000      	movs	r0, #0
    17ea:	e7ed      	b.n	17c8 <timer_init+0x10>
    17ec:	0000758c 	.word	0x0000758c
    17f0:	000021ad 	.word	0x000021ad
    17f4:	00002e5d 	.word	0x00002e5d
    17f8:	00001755 	.word	0x00001755

000017fc <timer_start>:
{
    17fc:	b510      	push	{r4, lr}
    17fe:	0004      	movs	r4, r0
	ASSERT(descr);
    1800:	1e43      	subs	r3, r0, #1
    1802:	4198      	sbcs	r0, r3
    1804:	b2c0      	uxtb	r0, r0
    1806:	2253      	movs	r2, #83	; 0x53
    1808:	4907      	ldr	r1, [pc, #28]	; (1828 <timer_start+0x2c>)
    180a:	4b08      	ldr	r3, [pc, #32]	; (182c <timer_start+0x30>)
    180c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    180e:	0020      	movs	r0, r4
    1810:	4b07      	ldr	r3, [pc, #28]	; (1830 <timer_start+0x34>)
    1812:	4798      	blx	r3
    1814:	2800      	cmp	r0, #0
    1816:	d104      	bne.n	1822 <timer_start+0x26>
	_timer_start(&descr->device);
    1818:	0020      	movs	r0, r4
    181a:	4b06      	ldr	r3, [pc, #24]	; (1834 <timer_start+0x38>)
    181c:	4798      	blx	r3
	return ERR_NONE;
    181e:	2000      	movs	r0, #0
}
    1820:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1822:	2011      	movs	r0, #17
    1824:	4240      	negs	r0, r0
    1826:	e7fb      	b.n	1820 <timer_start+0x24>
    1828:	0000758c 	.word	0x0000758c
    182c:	000021ad 	.word	0x000021ad
    1830:	00002f9b 	.word	0x00002f9b
    1834:	00002f81 	.word	0x00002f81

00001838 <timer_stop>:
{
    1838:	b510      	push	{r4, lr}
    183a:	0004      	movs	r4, r0
	ASSERT(descr);
    183c:	1e43      	subs	r3, r0, #1
    183e:	4198      	sbcs	r0, r3
    1840:	b2c0      	uxtb	r0, r0
    1842:	2261      	movs	r2, #97	; 0x61
    1844:	4907      	ldr	r1, [pc, #28]	; (1864 <timer_stop+0x2c>)
    1846:	4b08      	ldr	r3, [pc, #32]	; (1868 <timer_stop+0x30>)
    1848:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    184a:	0020      	movs	r0, r4
    184c:	4b07      	ldr	r3, [pc, #28]	; (186c <timer_stop+0x34>)
    184e:	4798      	blx	r3
    1850:	2800      	cmp	r0, #0
    1852:	d004      	beq.n	185e <timer_stop+0x26>
	_timer_stop(&descr->device);
    1854:	0020      	movs	r0, r4
    1856:	4b06      	ldr	r3, [pc, #24]	; (1870 <timer_stop+0x38>)
    1858:	4798      	blx	r3
	return ERR_NONE;
    185a:	2000      	movs	r0, #0
}
    185c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    185e:	2011      	movs	r0, #17
    1860:	4240      	negs	r0, r0
    1862:	e7fb      	b.n	185c <timer_stop+0x24>
    1864:	0000758c 	.word	0x0000758c
    1868:	000021ad 	.word	0x000021ad
    186c:	00002f9b 	.word	0x00002f9b
    1870:	00002f8f 	.word	0x00002f8f

00001874 <timer_add_task>:
{
    1874:	b570      	push	{r4, r5, r6, lr}
    1876:	b082      	sub	sp, #8
    1878:	0004      	movs	r4, r0
    187a:	000d      	movs	r5, r1
	ASSERT(descr && task);
    187c:	2800      	cmp	r0, #0
    187e:	d026      	beq.n	18ce <timer_add_task+0x5a>
    1880:	2900      	cmp	r1, #0
    1882:	d022      	beq.n	18ca <timer_add_task+0x56>
    1884:	2001      	movs	r0, #1
    1886:	227a      	movs	r2, #122	; 0x7a
    1888:	491f      	ldr	r1, [pc, #124]	; (1908 <timer_add_task+0x94>)
    188a:	4b20      	ldr	r3, [pc, #128]	; (190c <timer_add_task+0x98>)
    188c:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    188e:	7e23      	ldrb	r3, [r4, #24]
    1890:	2201      	movs	r2, #1
    1892:	4313      	orrs	r3, r2
    1894:	b2db      	uxtb	r3, r3
    1896:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1898:	0026      	movs	r6, r4
    189a:	3614      	adds	r6, #20
    189c:	0029      	movs	r1, r5
    189e:	0030      	movs	r0, r6
    18a0:	4b1b      	ldr	r3, [pc, #108]	; (1910 <timer_add_task+0x9c>)
    18a2:	4798      	blx	r3
    18a4:	2800      	cmp	r0, #0
    18a6:	d114      	bne.n	18d2 <timer_add_task+0x5e>
	task->time_label = descr->time;
    18a8:	6923      	ldr	r3, [r4, #16]
    18aa:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    18ac:	6922      	ldr	r2, [r4, #16]
    18ae:	0029      	movs	r1, r5
    18b0:	0030      	movs	r0, r6
    18b2:	4b18      	ldr	r3, [pc, #96]	; (1914 <timer_add_task+0xa0>)
    18b4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18b6:	7e23      	ldrb	r3, [r4, #24]
    18b8:	2201      	movs	r2, #1
    18ba:	4393      	bics	r3, r2
    18bc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    18be:	7e23      	ldrb	r3, [r4, #24]
    18c0:	079b      	lsls	r3, r3, #30
    18c2:	d412      	bmi.n	18ea <timer_add_task+0x76>
	return ERR_NONE;
    18c4:	2000      	movs	r0, #0
}
    18c6:	b002      	add	sp, #8
    18c8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    18ca:	2000      	movs	r0, #0
    18cc:	e7db      	b.n	1886 <timer_add_task+0x12>
    18ce:	2000      	movs	r0, #0
    18d0:	e7d9      	b.n	1886 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    18d2:	7e23      	ldrb	r3, [r4, #24]
    18d4:	2201      	movs	r2, #1
    18d6:	4393      	bics	r3, r2
    18d8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    18da:	327e      	adds	r2, #126	; 0x7e
    18dc:	490a      	ldr	r1, [pc, #40]	; (1908 <timer_add_task+0x94>)
    18de:	2000      	movs	r0, #0
    18e0:	4b0a      	ldr	r3, [pc, #40]	; (190c <timer_add_task+0x98>)
    18e2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    18e4:	2012      	movs	r0, #18
    18e6:	4240      	negs	r0, r0
    18e8:	e7ed      	b.n	18c6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    18ea:	a801      	add	r0, sp, #4
    18ec:	4b0a      	ldr	r3, [pc, #40]	; (1918 <timer_add_task+0xa4>)
    18ee:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    18f0:	7e23      	ldrb	r3, [r4, #24]
    18f2:	2202      	movs	r2, #2
    18f4:	4393      	bics	r3, r2
    18f6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    18f8:	0020      	movs	r0, r4
    18fa:	4b08      	ldr	r3, [pc, #32]	; (191c <timer_add_task+0xa8>)
    18fc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    18fe:	a801      	add	r0, sp, #4
    1900:	4b07      	ldr	r3, [pc, #28]	; (1920 <timer_add_task+0xac>)
    1902:	4798      	blx	r3
	return ERR_NONE;
    1904:	2000      	movs	r0, #0
    1906:	e7de      	b.n	18c6 <timer_add_task+0x52>
    1908:	0000758c 	.word	0x0000758c
    190c:	000021ad 	.word	0x000021ad
    1910:	000021b5 	.word	0x000021b5
    1914:	000016fd 	.word	0x000016fd
    1918:	000013f5 	.word	0x000013f5
    191c:	00002fad 	.word	0x00002fad
    1920:	00001403 	.word	0x00001403

00001924 <timer_remove_task>:
{
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	b082      	sub	sp, #8
    1928:	0004      	movs	r4, r0
    192a:	000d      	movs	r5, r1
	ASSERT(descr && task);
    192c:	2800      	cmp	r0, #0
    192e:	d023      	beq.n	1978 <timer_remove_task+0x54>
    1930:	2900      	cmp	r1, #0
    1932:	d01f      	beq.n	1974 <timer_remove_task+0x50>
    1934:	2001      	movs	r0, #1
    1936:	2295      	movs	r2, #149	; 0x95
    1938:	491d      	ldr	r1, [pc, #116]	; (19b0 <timer_remove_task+0x8c>)
    193a:	4b1e      	ldr	r3, [pc, #120]	; (19b4 <timer_remove_task+0x90>)
    193c:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    193e:	7e23      	ldrb	r3, [r4, #24]
    1940:	2201      	movs	r2, #1
    1942:	4313      	orrs	r3, r2
    1944:	b2db      	uxtb	r3, r3
    1946:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    1948:	0026      	movs	r6, r4
    194a:	3614      	adds	r6, #20
    194c:	0029      	movs	r1, r5
    194e:	0030      	movs	r0, r6
    1950:	4b19      	ldr	r3, [pc, #100]	; (19b8 <timer_remove_task+0x94>)
    1952:	4798      	blx	r3
    1954:	2800      	cmp	r0, #0
    1956:	d011      	beq.n	197c <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
    1958:	0029      	movs	r1, r5
    195a:	0030      	movs	r0, r6
    195c:	4b17      	ldr	r3, [pc, #92]	; (19bc <timer_remove_task+0x98>)
    195e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1960:	7e23      	ldrb	r3, [r4, #24]
    1962:	2201      	movs	r2, #1
    1964:	4393      	bics	r3, r2
    1966:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1968:	7e23      	ldrb	r3, [r4, #24]
    196a:	079b      	lsls	r3, r3, #30
    196c:	d411      	bmi.n	1992 <timer_remove_task+0x6e>
	return ERR_NONE;
    196e:	2000      	movs	r0, #0
}
    1970:	b002      	add	sp, #8
    1972:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1974:	2000      	movs	r0, #0
    1976:	e7de      	b.n	1936 <timer_remove_task+0x12>
    1978:	2000      	movs	r0, #0
    197a:	e7dc      	b.n	1936 <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    197c:	7e23      	ldrb	r3, [r4, #24]
    197e:	2201      	movs	r2, #1
    1980:	4393      	bics	r3, r2
    1982:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1984:	3299      	adds	r2, #153	; 0x99
    1986:	490a      	ldr	r1, [pc, #40]	; (19b0 <timer_remove_task+0x8c>)
    1988:	4b0a      	ldr	r3, [pc, #40]	; (19b4 <timer_remove_task+0x90>)
    198a:	4798      	blx	r3
		return ERR_NOT_FOUND;
    198c:	200a      	movs	r0, #10
    198e:	4240      	negs	r0, r0
    1990:	e7ee      	b.n	1970 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1992:	a801      	add	r0, sp, #4
    1994:	4b0a      	ldr	r3, [pc, #40]	; (19c0 <timer_remove_task+0x9c>)
    1996:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1998:	7e23      	ldrb	r3, [r4, #24]
    199a:	2202      	movs	r2, #2
    199c:	4393      	bics	r3, r2
    199e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    19a0:	0020      	movs	r0, r4
    19a2:	4b08      	ldr	r3, [pc, #32]	; (19c4 <timer_remove_task+0xa0>)
    19a4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    19a6:	a801      	add	r0, sp, #4
    19a8:	4b07      	ldr	r3, [pc, #28]	; (19c8 <timer_remove_task+0xa4>)
    19aa:	4798      	blx	r3
	return ERR_NONE;
    19ac:	2000      	movs	r0, #0
    19ae:	e7df      	b.n	1970 <timer_remove_task+0x4c>
    19b0:	0000758c 	.word	0x0000758c
    19b4:	000021ad 	.word	0x000021ad
    19b8:	000021b5 	.word	0x000021b5
    19bc:	00002253 	.word	0x00002253
    19c0:	000013f5 	.word	0x000013f5
    19c4:	00002fad 	.word	0x00002fad
    19c8:	00001403 	.word	0x00001403

000019cc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    19cc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19ce:	3808      	subs	r0, #8

	descr->stat = 0;
    19d0:	2300      	movs	r3, #0
    19d2:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    19d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    19d6:	2b00      	cmp	r3, #0
    19d8:	d000      	beq.n	19dc <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    19da:	4798      	blx	r3
	}
}
    19dc:	bd10      	pop	{r4, pc}

000019de <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    19de:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19e0:	3808      	subs	r0, #8

	descr->stat = 0;
    19e2:	2300      	movs	r3, #0
    19e4:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    19e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    19e8:	2b00      	cmp	r3, #0
    19ea:	d000      	beq.n	19ee <usart_error+0x10>
		descr->usart_cb.error(descr);
    19ec:	4798      	blx	r3
	}
}
    19ee:	bd10      	pop	{r4, pc}

000019f0 <usart_fill_rx_buffer>:
{
    19f0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19f2:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    19f4:	302c      	adds	r0, #44	; 0x2c
    19f6:	4b04      	ldr	r3, [pc, #16]	; (1a08 <usart_fill_rx_buffer+0x18>)
    19f8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    19fa:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19fc:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    19fe:	2b00      	cmp	r3, #0
    1a00:	d001      	beq.n	1a06 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1a02:	0020      	movs	r0, r4
    1a04:	4798      	blx	r3
}
    1a06:	bd10      	pop	{r4, pc}
    1a08:	0000231d 	.word	0x0000231d

00001a0c <usart_async_write>:
{
    1a0c:	b570      	push	{r4, r5, r6, lr}
    1a0e:	0004      	movs	r4, r0
    1a10:	000e      	movs	r6, r1
    1a12:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    1a14:	2800      	cmp	r0, #0
    1a16:	d01d      	beq.n	1a54 <usart_async_write+0x48>
    1a18:	2900      	cmp	r1, #0
    1a1a:	d01d      	beq.n	1a58 <usart_async_write+0x4c>
    1a1c:	2a00      	cmp	r2, #0
    1a1e:	d11d      	bne.n	1a5c <usart_async_write+0x50>
    1a20:	2000      	movs	r0, #0
    1a22:	223c      	movs	r2, #60	; 0x3c
    1a24:	32ff      	adds	r2, #255	; 0xff
    1a26:	4910      	ldr	r1, [pc, #64]	; (1a68 <usart_async_write+0x5c>)
    1a28:	4b10      	ldr	r3, [pc, #64]	; (1a6c <usart_async_write+0x60>)
    1a2a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1a2c:	2344      	movs	r3, #68	; 0x44
    1a2e:	5ae2      	ldrh	r2, [r4, r3]
    1a30:	3308      	adds	r3, #8
    1a32:	5ae3      	ldrh	r3, [r4, r3]
    1a34:	429a      	cmp	r2, r3
    1a36:	d113      	bne.n	1a60 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    1a38:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1a3a:	234c      	movs	r3, #76	; 0x4c
    1a3c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    1a3e:	2200      	movs	r2, #0
    1a40:	3b08      	subs	r3, #8
    1a42:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1a44:	3b43      	subs	r3, #67	; 0x43
    1a46:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1a48:	0020      	movs	r0, r4
    1a4a:	3008      	adds	r0, #8
    1a4c:	4b08      	ldr	r3, [pc, #32]	; (1a70 <usart_async_write+0x64>)
    1a4e:	4798      	blx	r3
	return (int32_t)length;
    1a50:	0028      	movs	r0, r5
}
    1a52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1a54:	2000      	movs	r0, #0
    1a56:	e7e4      	b.n	1a22 <usart_async_write+0x16>
    1a58:	2000      	movs	r0, #0
    1a5a:	e7e2      	b.n	1a22 <usart_async_write+0x16>
    1a5c:	2001      	movs	r0, #1
    1a5e:	e7e0      	b.n	1a22 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    1a60:	201c      	movs	r0, #28
    1a62:	4240      	negs	r0, r0
    1a64:	e7f5      	b.n	1a52 <usart_async_write+0x46>
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	000075a4 	.word	0x000075a4
    1a6c:	000021ad 	.word	0x000021ad
    1a70:	00002935 	.word	0x00002935

00001a74 <usart_process_byte_sent>:
{
    1a74:	b570      	push	{r4, r5, r6, lr}
    1a76:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1a78:	0002      	movs	r2, r0
    1a7a:	3a08      	subs	r2, #8
    1a7c:	2344      	movs	r3, #68	; 0x44
    1a7e:	5ad3      	ldrh	r3, [r2, r3]
    1a80:	214c      	movs	r1, #76	; 0x4c
    1a82:	5a52      	ldrh	r2, [r2, r1]
    1a84:	4293      	cmp	r3, r2
    1a86:	d00d      	beq.n	1aa4 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1a88:	0002      	movs	r2, r0
    1a8a:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1a8c:	3a08      	subs	r2, #8
    1a8e:	1c5d      	adds	r5, r3, #1
    1a90:	2044      	movs	r0, #68	; 0x44
    1a92:	5215      	strh	r5, [r2, r0]
    1a94:	5cc9      	ldrb	r1, [r1, r3]
    1a96:	0020      	movs	r0, r4
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <usart_process_byte_sent+0x38>)
    1a9a:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1a9c:	0020      	movs	r0, r4
    1a9e:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <usart_process_byte_sent+0x3c>)
    1aa0:	4798      	blx	r3
}
    1aa2:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1aa4:	4b03      	ldr	r3, [pc, #12]	; (1ab4 <usart_process_byte_sent+0x40>)
    1aa6:	4798      	blx	r3
}
    1aa8:	e7fb      	b.n	1aa2 <usart_process_byte_sent+0x2e>
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	0000292d 	.word	0x0000292d
    1ab0:	00002935 	.word	0x00002935
    1ab4:	0000293d 	.word	0x0000293d

00001ab8 <usart_async_read>:
{
    1ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aba:	b085      	sub	sp, #20
    1abc:	0004      	movs	r4, r0
    1abe:	000d      	movs	r5, r1
    1ac0:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d017      	beq.n	1af6 <usart_async_read+0x3e>
    1ac6:	2900      	cmp	r1, #0
    1ac8:	d017      	beq.n	1afa <usart_async_read+0x42>
    1aca:	2a00      	cmp	r2, #0
    1acc:	d117      	bne.n	1afe <usart_async_read+0x46>
    1ace:	2000      	movs	r0, #0
    1ad0:	22ac      	movs	r2, #172	; 0xac
    1ad2:	0052      	lsls	r2, r2, #1
    1ad4:	4912      	ldr	r1, [pc, #72]	; (1b20 <usart_async_read+0x68>)
    1ad6:	4b13      	ldr	r3, [pc, #76]	; (1b24 <usart_async_read+0x6c>)
    1ad8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1ada:	a803      	add	r0, sp, #12
    1adc:	4b12      	ldr	r3, [pc, #72]	; (1b28 <usart_async_read+0x70>)
    1ade:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1ae0:	3434      	adds	r4, #52	; 0x34
    1ae2:	0020      	movs	r0, r4
    1ae4:	9401      	str	r4, [sp, #4]
    1ae6:	4b11      	ldr	r3, [pc, #68]	; (1b2c <usart_async_read+0x74>)
    1ae8:	4798      	blx	r3
    1aea:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    1aec:	a803      	add	r0, sp, #12
    1aee:	4b10      	ldr	r3, [pc, #64]	; (1b30 <usart_async_read+0x78>)
    1af0:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1af2:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1af4:	e00b      	b.n	1b0e <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    1af6:	2000      	movs	r0, #0
    1af8:	e7ea      	b.n	1ad0 <usart_async_read+0x18>
    1afa:	2000      	movs	r0, #0
    1afc:	e7e8      	b.n	1ad0 <usart_async_read+0x18>
    1afe:	2001      	movs	r0, #1
    1b00:	e7e6      	b.n	1ad0 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1b02:	3401      	adds	r4, #1
    1b04:	b2a4      	uxth	r4, r4
    1b06:	1869      	adds	r1, r5, r1
    1b08:	9801      	ldr	r0, [sp, #4]
    1b0a:	4b0a      	ldr	r3, [pc, #40]	; (1b34 <usart_async_read+0x7c>)
    1b0c:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1b0e:	0021      	movs	r1, r4
    1b10:	42a7      	cmp	r7, r4
    1b12:	d901      	bls.n	1b18 <usart_async_read+0x60>
    1b14:	42b4      	cmp	r4, r6
    1b16:	d3f4      	bcc.n	1b02 <usart_async_read+0x4a>
}
    1b18:	0020      	movs	r0, r4
    1b1a:	b005      	add	sp, #20
    1b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	000075a4 	.word	0x000075a4
    1b24:	000021ad 	.word	0x000021ad
    1b28:	000013f5 	.word	0x000013f5
    1b2c:	0000235d 	.word	0x0000235d
    1b30:	00001403 	.word	0x00001403
    1b34:	000022d1 	.word	0x000022d1

00001b38 <usart_async_init>:
{
    1b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b3a:	0004      	movs	r4, r0
    1b3c:	000d      	movs	r5, r1
    1b3e:	0016      	movs	r6, r2
    1b40:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b42:	2800      	cmp	r0, #0
    1b44:	d026      	beq.n	1b94 <usart_async_init+0x5c>
    1b46:	2900      	cmp	r1, #0
    1b48:	d026      	beq.n	1b98 <usart_async_init+0x60>
    1b4a:	2a00      	cmp	r2, #0
    1b4c:	d026      	beq.n	1b9c <usart_async_init+0x64>
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d126      	bne.n	1ba0 <usart_async_init+0x68>
    1b52:	2000      	movs	r0, #0
    1b54:	223a      	movs	r2, #58	; 0x3a
    1b56:	4915      	ldr	r1, [pc, #84]	; (1bac <usart_async_init+0x74>)
    1b58:	4b15      	ldr	r3, [pc, #84]	; (1bb0 <usart_async_init+0x78>)
    1b5a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1b5c:	0020      	movs	r0, r4
    1b5e:	3034      	adds	r0, #52	; 0x34
    1b60:	003a      	movs	r2, r7
    1b62:	0031      	movs	r1, r6
    1b64:	4b13      	ldr	r3, [pc, #76]	; (1bb4 <usart_async_init+0x7c>)
    1b66:	4798      	blx	r3
    1b68:	2800      	cmp	r0, #0
    1b6a:	d11b      	bne.n	1ba4 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    1b6c:	0020      	movs	r0, r4
    1b6e:	3008      	adds	r0, #8
    1b70:	0029      	movs	r1, r5
    1b72:	4b11      	ldr	r3, [pc, #68]	; (1bb8 <usart_async_init+0x80>)
    1b74:	4798      	blx	r3
	if (init_status) {
    1b76:	2800      	cmp	r0, #0
    1b78:	d10b      	bne.n	1b92 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    1b7a:	4b10      	ldr	r3, [pc, #64]	; (1bbc <usart_async_init+0x84>)
    1b7c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1b7e:	4b10      	ldr	r3, [pc, #64]	; (1bc0 <usart_async_init+0x88>)
    1b80:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1b82:	4b10      	ldr	r3, [pc, #64]	; (1bc4 <usart_async_init+0x8c>)
    1b84:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1b86:	4b10      	ldr	r3, [pc, #64]	; (1bc8 <usart_async_init+0x90>)
    1b88:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1b8a:	4b10      	ldr	r3, [pc, #64]	; (1bcc <usart_async_init+0x94>)
    1b8c:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1b8e:	4b10      	ldr	r3, [pc, #64]	; (1bd0 <usart_async_init+0x98>)
    1b90:	6163      	str	r3, [r4, #20]
}
    1b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b94:	2000      	movs	r0, #0
    1b96:	e7dd      	b.n	1b54 <usart_async_init+0x1c>
    1b98:	2000      	movs	r0, #0
    1b9a:	e7db      	b.n	1b54 <usart_async_init+0x1c>
    1b9c:	2000      	movs	r0, #0
    1b9e:	e7d9      	b.n	1b54 <usart_async_init+0x1c>
    1ba0:	2001      	movs	r0, #1
    1ba2:	e7d7      	b.n	1b54 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    1ba4:	200d      	movs	r0, #13
    1ba6:	4240      	negs	r0, r0
    1ba8:	e7f3      	b.n	1b92 <usart_async_init+0x5a>
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	000075a4 	.word	0x000075a4
    1bb0:	000021ad 	.word	0x000021ad
    1bb4:	00002285 	.word	0x00002285
    1bb8:	000028a1 	.word	0x000028a1
    1bbc:	00001ab9 	.word	0x00001ab9
    1bc0:	00001a0d 	.word	0x00001a0d
    1bc4:	00001a75 	.word	0x00001a75
    1bc8:	000019f1 	.word	0x000019f1
    1bcc:	000019cd 	.word	0x000019cd
    1bd0:	000019df 	.word	0x000019df

00001bd4 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1bd4:	b510      	push	{r4, lr}
    1bd6:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1bd8:	2000      	movs	r0, #0
    1bda:	e001      	b.n	1be0 <_usb_d_find_ep+0xc>
    1bdc:	3001      	adds	r0, #1
    1bde:	b240      	sxtb	r0, r0
    1be0:	2803      	cmp	r0, #3
    1be2:	dc0f      	bgt.n	1c04 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1be4:	0142      	lsls	r2, r0, #5
    1be6:	4b09      	ldr	r3, [pc, #36]	; (1c0c <_usb_d_find_ep+0x38>)
    1be8:	189b      	adds	r3, r3, r2
    1bea:	785a      	ldrb	r2, [r3, #1]
    1bec:	428a      	cmp	r2, r1
    1bee:	d00b      	beq.n	1c08 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1bf0:	0143      	lsls	r3, r0, #5
    1bf2:	4c06      	ldr	r4, [pc, #24]	; (1c0c <_usb_d_find_ep+0x38>)
    1bf4:	5d1b      	ldrb	r3, [r3, r4]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d1f0      	bne.n	1bdc <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1bfa:	330f      	adds	r3, #15
    1bfc:	400b      	ands	r3, r1
    1bfe:	4293      	cmp	r3, r2
    1c00:	d1ec      	bne.n	1bdc <_usb_d_find_ep+0x8>
    1c02:	e001      	b.n	1c08 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1c04:	2001      	movs	r0, #1
    1c06:	4240      	negs	r0, r0
}
    1c08:	bd10      	pop	{r4, pc}
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	200005b0 	.word	0x200005b0

00001c10 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1c10:	2000      	movs	r0, #0
    1c12:	4770      	bx	lr

00001c14 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1c14:	b570      	push	{r4, r5, r6, lr}
    1c16:	0004      	movs	r4, r0
    1c18:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c1a:	4b08      	ldr	r3, [pc, #32]	; (1c3c <usb_d_cb_trans_more+0x28>)
    1c1c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1c1e:	0142      	lsls	r2, r0, #5
    1c20:	4b07      	ldr	r3, [pc, #28]	; (1c40 <usb_d_cb_trans_more+0x2c>)
    1c22:	189b      	adds	r3, r3, r2
    1c24:	789b      	ldrb	r3, [r3, #2]
    1c26:	2b03      	cmp	r3, #3
    1c28:	d001      	beq.n	1c2e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1c2a:	2000      	movs	r0, #0
}
    1c2c:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1c2e:	4b04      	ldr	r3, [pc, #16]	; (1c40 <usb_d_cb_trans_more+0x2c>)
    1c30:	1898      	adds	r0, r3, r2
    1c32:	6983      	ldr	r3, [r0, #24]
    1c34:	0029      	movs	r1, r5
    1c36:	0020      	movs	r0, r4
    1c38:	4798      	blx	r3
    1c3a:	e7f7      	b.n	1c2c <usb_d_cb_trans_more+0x18>
    1c3c:	00001bd5 	.word	0x00001bd5
    1c40:	200005b0 	.word	0x200005b0

00001c44 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c46:	b087      	sub	sp, #28
    1c48:	0005      	movs	r5, r0
    1c4a:	000f      	movs	r7, r1
    1c4c:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c4e:	4b4a      	ldr	r3, [pc, #296]	; (1d78 <_usb_d_cb_trans_done+0x134>)
    1c50:	4798      	blx	r3
    1c52:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    1c54:	0146      	lsls	r6, r0, #5
    1c56:	4a49      	ldr	r2, [pc, #292]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1c58:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
    1c5a:	2f00      	cmp	r7, #0
    1c5c:	d151      	bne.n	1d02 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1c5e:	0013      	movs	r3, r2
    1c60:	0142      	lsls	r2, r0, #5
    1c62:	2000      	movs	r0, #0
    1c64:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c66:	5cd3      	ldrb	r3, [r2, r3]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d00e      	beq.n	1c8a <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c6c:	0162      	lsls	r2, r4, #5
    1c6e:	4b43      	ldr	r3, [pc, #268]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1c70:	189b      	adds	r3, r3, r2
    1c72:	2201      	movs	r2, #1
    1c74:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1c76:	0164      	lsls	r4, r4, #5
    1c78:	4b40      	ldr	r3, [pc, #256]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1c7a:	191c      	adds	r4, r3, r4
    1c7c:	69e3      	ldr	r3, [r4, #28]
    1c7e:	78e1      	ldrb	r1, [r4, #3]
    1c80:	9a01      	ldr	r2, [sp, #4]
    1c82:	0028      	movs	r0, r5
    1c84:	4798      	blx	r3
}
    1c86:	b007      	add	sp, #28
    1c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
    1c8a:	78b3      	ldrb	r3, [r6, #2]
    1c8c:	240c      	movs	r4, #12
    1c8e:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
    1c90:	2b03      	cmp	r3, #3
    1c92:	d008      	beq.n	1ca6 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1c94:	0032      	movs	r2, r6
    1c96:	320c      	adds	r2, #12
    1c98:	7870      	ldrb	r0, [r6, #1]
    1c9a:	2100      	movs	r1, #0
    1c9c:	69f3      	ldr	r3, [r6, #28]
    1c9e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1ca0:	2302      	movs	r3, #2
    1ca2:	70b3      	strb	r3, [r6, #2]
    1ca4:	e7ef      	b.n	1c86 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1ca6:	7870      	ldrb	r0, [r6, #1]
    1ca8:	0032      	movs	r2, r6
    1caa:	320c      	adds	r2, #12
    1cac:	2101      	movs	r1, #1
    1cae:	69f3      	ldr	r3, [r6, #28]
    1cb0:	4798      	blx	r3
		if (err) {
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d010      	beq.n	1cd8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1cb6:	2305      	movs	r3, #5
    1cb8:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1cba:	3b03      	subs	r3, #3
    1cbc:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1cbe:	2c00      	cmp	r4, #0
    1cc0:	db08      	blt.n	1cd4 <_usb_d_cb_trans_done+0x90>
    1cc2:	7873      	ldrb	r3, [r6, #1]
    1cc4:	2080      	movs	r0, #128	; 0x80
    1cc6:	4240      	negs	r0, r0
    1cc8:	4318      	orrs	r0, r3
    1cca:	b2c0      	uxtb	r0, r0
    1ccc:	2101      	movs	r1, #1
    1cce:	4b2c      	ldr	r3, [pc, #176]	; (1d80 <_usb_d_cb_trans_done+0x13c>)
    1cd0:	4798      	blx	r3
    1cd2:	e7d8      	b.n	1c86 <_usb_d_cb_trans_done+0x42>
    1cd4:	7870      	ldrb	r0, [r6, #1]
    1cd6:	e7f9      	b.n	1ccc <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1cd8:	2304      	movs	r3, #4
    1cda:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1cdc:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
    1cde:	2200      	movs	r2, #0
    1ce0:	9203      	str	r2, [sp, #12]
    1ce2:	9204      	str	r2, [sp, #16]
    1ce4:	2c00      	cmp	r4, #0
    1ce6:	db09      	blt.n	1cfc <_usb_d_cb_trans_done+0xb8>
    1ce8:	3b84      	subs	r3, #132	; 0x84
    1cea:	430b      	orrs	r3, r1
    1cec:	b2da      	uxtb	r2, r3
    1cee:	a803      	add	r0, sp, #12
    1cf0:	7202      	strb	r2, [r0, #8]
    1cf2:	2301      	movs	r3, #1
    1cf4:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1cf6:	4b23      	ldr	r3, [pc, #140]	; (1d84 <_usb_d_cb_trans_done+0x140>)
    1cf8:	4798      	blx	r3
    1cfa:	e7c4      	b.n	1c86 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
    1cfc:	220f      	movs	r2, #15
    1cfe:	400a      	ands	r2, r1
    1d00:	e7f5      	b.n	1cee <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
    1d02:	2f01      	cmp	r7, #1
    1d04:	d00a      	beq.n	1d1c <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
    1d06:	2f02      	cmp	r7, #2
    1d08:	d01d      	beq.n	1d46 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
    1d0a:	2f03      	cmp	r7, #3
    1d0c:	d02c      	beq.n	1d68 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1d0e:	0142      	lsls	r2, r0, #5
    1d10:	4b1a      	ldr	r3, [pc, #104]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1d12:	189b      	adds	r3, r3, r2
    1d14:	2206      	movs	r2, #6
    1d16:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1d18:	70da      	strb	r2, [r3, #3]
    1d1a:	e7ac      	b.n	1c76 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1d1c:	4b17      	ldr	r3, [pc, #92]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1d1e:	0142      	lsls	r2, r0, #5
    1d20:	1899      	adds	r1, r3, r2
    1d22:	2002      	movs	r0, #2
    1d24:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1d26:	5cd3      	ldrb	r3, [r2, r3]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d005      	beq.n	1d38 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1d2c:	0162      	lsls	r2, r4, #5
    1d2e:	4b13      	ldr	r3, [pc, #76]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1d30:	189b      	adds	r3, r3, r2
    1d32:	2205      	movs	r2, #5
    1d34:	709a      	strb	r2, [r3, #2]
    1d36:	e79e      	b.n	1c76 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1d38:	2202      	movs	r2, #2
    1d3a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1d3c:	2100      	movs	r1, #0
    1d3e:	0028      	movs	r0, r5
    1d40:	4b0f      	ldr	r3, [pc, #60]	; (1d80 <_usb_d_cb_trans_done+0x13c>)
    1d42:	4798      	blx	r3
    1d44:	e797      	b.n	1c76 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1d46:	4b0d      	ldr	r3, [pc, #52]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1d48:	0142      	lsls	r2, r0, #5
    1d4a:	1899      	adds	r1, r3, r2
    1d4c:	2004      	movs	r0, #4
    1d4e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1d50:	5cd3      	ldrb	r3, [r2, r3]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d005      	beq.n	1d62 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1d56:	0162      	lsls	r2, r4, #5
    1d58:	4b08      	ldr	r3, [pc, #32]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1d5a:	189b      	adds	r3, r3, r2
    1d5c:	2201      	movs	r2, #1
    1d5e:	709a      	strb	r2, [r3, #2]
    1d60:	e789      	b.n	1c76 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1d62:	2302      	movs	r3, #2
    1d64:	708b      	strb	r3, [r1, #2]
			return;
    1d66:	e78e      	b.n	1c86 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1d68:	0142      	lsls	r2, r0, #5
    1d6a:	4b04      	ldr	r3, [pc, #16]	; (1d7c <_usb_d_cb_trans_done+0x138>)
    1d6c:	189b      	adds	r3, r3, r2
    1d6e:	2200      	movs	r2, #0
    1d70:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1d72:	3205      	adds	r2, #5
    1d74:	70da      	strb	r2, [r3, #3]
    1d76:	e77e      	b.n	1c76 <_usb_d_cb_trans_done+0x32>
    1d78:	00001bd5 	.word	0x00001bd5
    1d7c:	200005b0 	.word	0x200005b0
    1d80:	00003f35 	.word	0x00003f35
    1d84:	00004105 	.word	0x00004105

00001d88 <usb_d_cb_trans_setup>:
{
    1d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8a:	46c6      	mov	lr, r8
    1d8c:	b500      	push	{lr}
    1d8e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d90:	4b1f      	ldr	r3, [pc, #124]	; (1e10 <usb_d_cb_trans_setup+0x88>)
    1d92:	4798      	blx	r3
    1d94:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1d96:	0143      	lsls	r3, r0, #5
    1d98:	3308      	adds	r3, #8
    1d9a:	4c1e      	ldr	r4, [pc, #120]	; (1e14 <usb_d_cb_trans_setup+0x8c>)
    1d9c:	18e4      	adds	r4, r4, r3
    1d9e:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1da0:	0021      	movs	r1, r4
    1da2:	0028      	movs	r0, r5
    1da4:	4b1c      	ldr	r3, [pc, #112]	; (1e18 <usb_d_cb_trans_setup+0x90>)
    1da6:	4798      	blx	r3
    1da8:	b2c0      	uxtb	r0, r0
	if (n != 8) {
    1daa:	2808      	cmp	r0, #8
    1dac:	d00c      	beq.n	1dc8 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1dae:	2101      	movs	r1, #1
    1db0:	0028      	movs	r0, r5
    1db2:	4c1a      	ldr	r4, [pc, #104]	; (1e1c <usb_d_cb_trans_setup+0x94>)
    1db4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1db6:	2080      	movs	r0, #128	; 0x80
    1db8:	4240      	negs	r0, r0
    1dba:	4328      	orrs	r0, r5
    1dbc:	b2c0      	uxtb	r0, r0
    1dbe:	2101      	movs	r1, #1
    1dc0:	47a0      	blx	r4
}
    1dc2:	bc04      	pop	{r2}
    1dc4:	4690      	mov	r8, r2
    1dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1dc8:	2100      	movs	r1, #0
    1dca:	0028      	movs	r0, r5
    1dcc:	4b13      	ldr	r3, [pc, #76]	; (1e1c <usb_d_cb_trans_setup+0x94>)
    1dce:	4698      	mov	r8, r3
    1dd0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1dd2:	2780      	movs	r7, #128	; 0x80
    1dd4:	427f      	negs	r7, r7
    1dd6:	432f      	orrs	r7, r5
    1dd8:	b2ff      	uxtb	r7, r7
    1dda:	2100      	movs	r1, #0
    1ddc:	0038      	movs	r0, r7
    1dde:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1de0:	0172      	lsls	r2, r6, #5
    1de2:	4b0c      	ldr	r3, [pc, #48]	; (1e14 <usb_d_cb_trans_setup+0x8c>)
    1de4:	189b      	adds	r3, r3, r2
    1de6:	2201      	movs	r2, #1
    1de8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1dea:	695b      	ldr	r3, [r3, #20]
    1dec:	0021      	movs	r1, r4
    1dee:	0028      	movs	r0, r5
    1df0:	4798      	blx	r3
    1df2:	2800      	cmp	r0, #0
    1df4:	d1e5      	bne.n	1dc2 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1df6:	0176      	lsls	r6, r6, #5
    1df8:	4b06      	ldr	r3, [pc, #24]	; (1e14 <usb_d_cb_trans_setup+0x8c>)
    1dfa:	199e      	adds	r6, r3, r6
    1dfc:	2305      	movs	r3, #5
    1dfe:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1e00:	2101      	movs	r1, #1
    1e02:	0028      	movs	r0, r5
    1e04:	4c05      	ldr	r4, [pc, #20]	; (1e1c <usb_d_cb_trans_setup+0x94>)
    1e06:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1e08:	2101      	movs	r1, #1
    1e0a:	0038      	movs	r0, r7
    1e0c:	47a0      	blx	r4
    1e0e:	e7d8      	b.n	1dc2 <usb_d_cb_trans_setup+0x3a>
    1e10:	00001bd5 	.word	0x00001bd5
    1e14:	200005b0 	.word	0x200005b0
    1e18:	0000408d 	.word	0x0000408d
    1e1c:	00003f35 	.word	0x00003f35

00001e20 <usb_d_init>:

int32_t usb_d_init(void)
{
    1e20:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1e22:	4b12      	ldr	r3, [pc, #72]	; (1e6c <usb_d_init+0x4c>)
    1e24:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1e26:	2800      	cmp	r0, #0
    1e28:	db1e      	blt.n	1e68 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1e2a:	2280      	movs	r2, #128	; 0x80
    1e2c:	2100      	movs	r1, #0
    1e2e:	4810      	ldr	r0, [pc, #64]	; (1e70 <usb_d_init+0x50>)
    1e30:	4b10      	ldr	r3, [pc, #64]	; (1e74 <usb_d_init+0x54>)
    1e32:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e34:	2200      	movs	r2, #0
    1e36:	e00a      	b.n	1e4e <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1e38:	0151      	lsls	r1, r2, #5
    1e3a:	4b0d      	ldr	r3, [pc, #52]	; (1e70 <usb_d_init+0x50>)
    1e3c:	185b      	adds	r3, r3, r1
    1e3e:	21ff      	movs	r1, #255	; 0xff
    1e40:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1e42:	490d      	ldr	r1, [pc, #52]	; (1e78 <usb_d_init+0x58>)
    1e44:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1e46:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1e48:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e4a:	3201      	adds	r2, #1
    1e4c:	b2d2      	uxtb	r2, r2
    1e4e:	2a03      	cmp	r2, #3
    1e50:	d9f2      	bls.n	1e38 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1e52:	490a      	ldr	r1, [pc, #40]	; (1e7c <usb_d_init+0x5c>)
    1e54:	2000      	movs	r0, #0
    1e56:	4c0a      	ldr	r4, [pc, #40]	; (1e80 <usb_d_init+0x60>)
    1e58:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1e5a:	490a      	ldr	r1, [pc, #40]	; (1e84 <usb_d_init+0x64>)
    1e5c:	2001      	movs	r0, #1
    1e5e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1e60:	4909      	ldr	r1, [pc, #36]	; (1e88 <usb_d_init+0x68>)
    1e62:	2002      	movs	r0, #2
    1e64:	47a0      	blx	r4
	return ERR_NONE;
    1e66:	2000      	movs	r0, #0
}
    1e68:	bd10      	pop	{r4, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00003901 	.word	0x00003901
    1e70:	200005b0 	.word	0x200005b0
    1e74:	00007265 	.word	0x00007265
    1e78:	00001c11 	.word	0x00001c11
    1e7c:	00001d89 	.word	0x00001d89
    1e80:	00004349 	.word	0x00004349
    1e84:	00001c15 	.word	0x00001c15
    1e88:	00001c45 	.word	0x00001c45

00001e8c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1e8c:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1e8e:	4b01      	ldr	r3, [pc, #4]	; (1e94 <usb_d_register_callback+0x8>)
    1e90:	4798      	blx	r3
}
    1e92:	bd10      	pop	{r4, pc}
    1e94:	00004325 	.word	0x00004325

00001e98 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1e98:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1e9a:	4b01      	ldr	r3, [pc, #4]	; (1ea0 <usb_d_enable+0x8>)
    1e9c:	4798      	blx	r3
}
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	000039a9 	.word	0x000039a9

00001ea4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1ea4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    1ea6:	4b01      	ldr	r3, [pc, #4]	; (1eac <usb_d_attach+0x8>)
    1ea8:	4798      	blx	r3
}
    1eaa:	bd10      	pop	{r4, pc}
    1eac:	000039f9 	.word	0x000039f9

00001eb0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1eb0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    1eb2:	4b01      	ldr	r3, [pc, #4]	; (1eb8 <usb_d_set_address+0x8>)
    1eb4:	4798      	blx	r3
}
    1eb6:	bd10      	pop	{r4, pc}
    1eb8:	00003a09 	.word	0x00003a09

00001ebc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ebe:	0005      	movs	r5, r0
    1ec0:	000e      	movs	r6, r1
    1ec2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1ec4:	4b0f      	ldr	r3, [pc, #60]	; (1f04 <usb_d_ep_init+0x48>)
    1ec6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1ec8:	2800      	cmp	r0, #0
    1eca:	da14      	bge.n	1ef6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1ecc:	20ff      	movs	r0, #255	; 0xff
    1ece:	4b0d      	ldr	r3, [pc, #52]	; (1f04 <usb_d_ep_init+0x48>)
    1ed0:	4798      	blx	r3
    1ed2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1ed4:	db12      	blt.n	1efc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1ed6:	003a      	movs	r2, r7
    1ed8:	0031      	movs	r1, r6
    1eda:	0028      	movs	r0, r5
    1edc:	4b0a      	ldr	r3, [pc, #40]	; (1f08 <usb_d_ep_init+0x4c>)
    1ede:	4798      	blx	r3
	if (rc < 0) {
    1ee0:	2800      	cmp	r0, #0
    1ee2:	db07      	blt.n	1ef4 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1ee4:	4a09      	ldr	r2, [pc, #36]	; (1f0c <usb_d_ep_init+0x50>)
    1ee6:	0164      	lsls	r4, r4, #5
    1ee8:	1913      	adds	r3, r2, r4
    1eea:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1eec:	2303      	movs	r3, #3
    1eee:	401e      	ands	r6, r3
    1ef0:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1ef2:	2000      	movs	r0, #0
}
    1ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1ef6:	2014      	movs	r0, #20
    1ef8:	4240      	negs	r0, r0
    1efa:	e7fb      	b.n	1ef4 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1efc:	2015      	movs	r0, #21
    1efe:	4240      	negs	r0, r0
    1f00:	e7f8      	b.n	1ef4 <usb_d_ep_init+0x38>
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	00001bd5 	.word	0x00001bd5
    1f08:	00003a1d 	.word	0x00003a1d
    1f0c:	200005b0 	.word	0x200005b0

00001f10 <usb_d_ep0_init>:
{
    1f10:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1f12:	b282      	uxth	r2, r0
    1f14:	2100      	movs	r1, #0
    1f16:	2000      	movs	r0, #0
    1f18:	4b01      	ldr	r3, [pc, #4]	; (1f20 <usb_d_ep0_init+0x10>)
    1f1a:	4798      	blx	r3
}
    1f1c:	bd10      	pop	{r4, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	00001ebd 	.word	0x00001ebd

00001f24 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1f24:	b570      	push	{r4, r5, r6, lr}
    1f26:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f28:	4b06      	ldr	r3, [pc, #24]	; (1f44 <usb_d_ep_deinit+0x20>)
    1f2a:	4798      	blx	r3
    1f2c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1f2e:	db07      	blt.n	1f40 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1f30:	0028      	movs	r0, r5
    1f32:	4b05      	ldr	r3, [pc, #20]	; (1f48 <usb_d_ep_deinit+0x24>)
    1f34:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1f36:	0164      	lsls	r4, r4, #5
    1f38:	4b04      	ldr	r3, [pc, #16]	; (1f4c <usb_d_ep_deinit+0x28>)
    1f3a:	191c      	adds	r4, r3, r4
    1f3c:	23ff      	movs	r3, #255	; 0xff
    1f3e:	7063      	strb	r3, [r4, #1]
}
    1f40:	bd70      	pop	{r4, r5, r6, pc}
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	00001bd5 	.word	0x00001bd5
    1f48:	00003b69 	.word	0x00003b69
    1f4c:	200005b0 	.word	0x200005b0

00001f50 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1f50:	b570      	push	{r4, r5, r6, lr}
    1f52:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f54:	4b0f      	ldr	r3, [pc, #60]	; (1f94 <usb_d_ep_enable+0x44>)
    1f56:	4798      	blx	r3
    1f58:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1f5a:	db17      	blt.n	1f8c <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1f5c:	0143      	lsls	r3, r0, #5
    1f5e:	4a0e      	ldr	r2, [pc, #56]	; (1f98 <usb_d_ep_enable+0x48>)
    1f60:	5c9b      	ldrb	r3, [r3, r2]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d10a      	bne.n	1f7c <usb_d_ep_enable+0x2c>
    1f66:	2102      	movs	r1, #2
    1f68:	0162      	lsls	r2, r4, #5
    1f6a:	4b0b      	ldr	r3, [pc, #44]	; (1f98 <usb_d_ep_enable+0x48>)
    1f6c:	189b      	adds	r3, r3, r2
    1f6e:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1f70:	0028      	movs	r0, r5
    1f72:	4b0a      	ldr	r3, [pc, #40]	; (1f9c <usb_d_ep_enable+0x4c>)
    1f74:	4798      	blx	r3
	if (rc < 0) {
    1f76:	2800      	cmp	r0, #0
    1f78:	db02      	blt.n	1f80 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1f7a:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1f7c:	2101      	movs	r1, #1
    1f7e:	e7f3      	b.n	1f68 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1f80:	0164      	lsls	r4, r4, #5
    1f82:	4b05      	ldr	r3, [pc, #20]	; (1f98 <usb_d_ep_enable+0x48>)
    1f84:	191c      	adds	r4, r3, r4
    1f86:	2300      	movs	r3, #0
    1f88:	70a3      	strb	r3, [r4, #2]
    1f8a:	e7f6      	b.n	1f7a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1f8c:	2012      	movs	r0, #18
    1f8e:	4240      	negs	r0, r0
    1f90:	e7f3      	b.n	1f7a <usb_d_ep_enable+0x2a>
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	00001bd5 	.word	0x00001bd5
    1f98:	200005b0 	.word	0x200005b0
    1f9c:	00003c2d 	.word	0x00003c2d

00001fa0 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa2:	46d6      	mov	lr, sl
    1fa4:	464f      	mov	r7, r9
    1fa6:	4646      	mov	r6, r8
    1fa8:	b5c0      	push	{r6, r7, lr}
    1faa:	b086      	sub	sp, #24
    1fac:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1fae:	7a06      	ldrb	r6, [r0, #8]
    1fb0:	0030      	movs	r0, r6
    1fb2:	4b3f      	ldr	r3, [pc, #252]	; (20b0 <STACK_SIZE+0xb0>)
    1fb4:	4798      	blx	r3
    1fb6:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1fb8:	09f6      	lsrs	r6, r6, #7
    1fba:	7a6b      	ldrb	r3, [r5, #9]
    1fbc:	1e5a      	subs	r2, r3, #1
    1fbe:	4193      	sbcs	r3, r2
    1fc0:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    1fc2:	686b      	ldr	r3, [r5, #4]
    1fc4:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1fc6:	2800      	cmp	r0, #0
    1fc8:	db6b      	blt.n	20a2 <STACK_SIZE+0xa2>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1fca:	a804      	add	r0, sp, #16
    1fcc:	4b39      	ldr	r3, [pc, #228]	; (20b4 <STACK_SIZE+0xb4>)
    1fce:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1fd0:	017a      	lsls	r2, r7, #5
    1fd2:	4b39      	ldr	r3, [pc, #228]	; (20b8 <STACK_SIZE+0xb8>)
    1fd4:	189b      	adds	r3, r3, r2
    1fd6:	789a      	ldrb	r2, [r3, #2]
    1fd8:	2317      	movs	r3, #23
    1fda:	446b      	add	r3, sp
    1fdc:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1fde:	781b      	ldrb	r3, [r3, #0]
    1fe0:	2b01      	cmp	r3, #1
    1fe2:	d00e      	beq.n	2002 <STACK_SIZE+0x2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1fe4:	a804      	add	r0, sp, #16
    1fe6:	4b35      	ldr	r3, [pc, #212]	; (20bc <STACK_SIZE+0xbc>)
    1fe8:	4798      	blx	r3
		switch (state) {
    1fea:	2317      	movs	r3, #23
    1fec:	446b      	add	r3, sp
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	b2db      	uxtb	r3, r3
    1ff2:	2b05      	cmp	r3, #5
    1ff4:	d02b      	beq.n	204e <STACK_SIZE+0x4e>
    1ff6:	2b06      	cmp	r3, #6
    1ff8:	d056      	beq.n	20a8 <STACK_SIZE+0xa8>
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d029      	beq.n	2052 <STACK_SIZE+0x52>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1ffe:	2001      	movs	r0, #1
    2000:	e01f      	b.n	2042 <STACK_SIZE+0x42>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2002:	4b2d      	ldr	r3, [pc, #180]	; (20b8 <STACK_SIZE+0xb8>)
    2004:	4699      	mov	r9, r3
    2006:	017b      	lsls	r3, r7, #5
    2008:	469a      	mov	sl, r3
    200a:	464b      	mov	r3, r9
    200c:	4453      	add	r3, sl
    200e:	2203      	movs	r2, #3
    2010:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2012:	a804      	add	r0, sp, #16
    2014:	4b29      	ldr	r3, [pc, #164]	; (20bc <STACK_SIZE+0xbc>)
    2016:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2018:	464b      	mov	r3, r9
    201a:	4652      	mov	r2, sl
    201c:	5cd3      	ldrb	r3, [r2, r3]
    201e:	2b00      	cmp	r3, #0
    2020:	d01a      	beq.n	2058 <STACK_SIZE+0x58>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2022:	7a29      	ldrb	r1, [r5, #8]
    2024:	682b      	ldr	r3, [r5, #0]
    2026:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    2028:	4643      	mov	r3, r8
    202a:	9302      	str	r3, [sp, #8]
    202c:	2e00      	cmp	r6, #0
    202e:	d035      	beq.n	209c <STACK_SIZE+0x9c>
    2030:	2280      	movs	r2, #128	; 0x80
    2032:	4252      	negs	r2, r2
    2034:	430a      	orrs	r2, r1
    2036:	b2d2      	uxtb	r2, r2
    2038:	a801      	add	r0, sp, #4
    203a:	7202      	strb	r2, [r0, #8]
    203c:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    203e:	4b20      	ldr	r3, [pc, #128]	; (20c0 <STACK_SIZE+0xc0>)
    2040:	4798      	blx	r3
	return rc;
}
    2042:	b006      	add	sp, #24
    2044:	bc1c      	pop	{r2, r3, r4}
    2046:	4690      	mov	r8, r2
    2048:	4699      	mov	r9, r3
    204a:	46a2      	mov	sl, r4
    204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    204e:	2002      	movs	r0, #2
    2050:	e7f7      	b.n	2042 <STACK_SIZE+0x42>
			return -USB_ERR_FUNC;
    2052:	2013      	movs	r0, #19
    2054:	4240      	negs	r0, r0
    2056:	e7f4      	b.n	2042 <STACK_SIZE+0x42>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2058:	017b      	lsls	r3, r7, #5
    205a:	4a17      	ldr	r2, [pc, #92]	; (20b8 <STACK_SIZE+0xb8>)
    205c:	18d2      	adds	r2, r2, r3
    205e:	7c93      	ldrb	r3, [r2, #18]
    2060:	7cd4      	ldrb	r4, [r2, #19]
    2062:	0224      	lsls	r4, r4, #8
    2064:	191b      	adds	r3, r3, r4
    2066:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    2068:	2b00      	cmp	r3, #0
    206a:	d106      	bne.n	207a <STACK_SIZE+0x7a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    206c:	2304      	movs	r3, #4
    206e:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    2070:	2300      	movs	r3, #0
    2072:	4698      	mov	r8, r3
			zlp                 = true;
    2074:	2401      	movs	r4, #1
			dir                 = true;
    2076:	2601      	movs	r6, #1
    2078:	e7d3      	b.n	2022 <STACK_SIZE+0x22>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    207a:	017f      	lsls	r7, r7, #5
    207c:	4a0e      	ldr	r2, [pc, #56]	; (20b8 <STACK_SIZE+0xb8>)
    207e:	19d7      	adds	r7, r2, r7
    2080:	220c      	movs	r2, #12
    2082:	56ba      	ldrsb	r2, [r7, r2]
    2084:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    2086:	4598      	cmp	r8, r3
    2088:	d900      	bls.n	208c <STACK_SIZE+0x8c>
				len = req_len;
    208a:	4698      	mov	r8, r3
			if (dir) {
    208c:	2a00      	cmp	r2, #0
    208e:	db01      	blt.n	2094 <STACK_SIZE+0x94>
				zlp = false;
    2090:	2400      	movs	r4, #0
    2092:	e7c6      	b.n	2022 <STACK_SIZE+0x22>
				zlp = (req_len > len);
    2094:	4598      	cmp	r8, r3
    2096:	419b      	sbcs	r3, r3
    2098:	425c      	negs	r4, r3
    209a:	e7c2      	b.n	2022 <STACK_SIZE+0x22>
	struct usb_d_transfer trans
    209c:	220f      	movs	r2, #15
    209e:	400a      	ands	r2, r1
    20a0:	e7ca      	b.n	2038 <STACK_SIZE+0x38>
		return -USB_ERR_PARAM;
    20a2:	2012      	movs	r0, #18
    20a4:	4240      	negs	r0, r0
    20a6:	e7cc      	b.n	2042 <STACK_SIZE+0x42>
			return -USB_ERROR;
    20a8:	2010      	movs	r0, #16
    20aa:	4240      	negs	r0, r0
    20ac:	e7c9      	b.n	2042 <STACK_SIZE+0x42>
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	00001bd5 	.word	0x00001bd5
    20b4:	000013f5 	.word	0x000013f5
    20b8:	200005b0 	.word	0x200005b0
    20bc:	00001403 	.word	0x00001403
    20c0:	00004105 	.word	0x00004105

000020c4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    20c4:	b570      	push	{r4, r5, r6, lr}
    20c6:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    20c8:	4b07      	ldr	r3, [pc, #28]	; (20e8 <usb_d_ep_abort+0x24>)
    20ca:	4798      	blx	r3
    20cc:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    20ce:	db09      	blt.n	20e4 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    20d0:	0028      	movs	r0, r5
    20d2:	4b06      	ldr	r3, [pc, #24]	; (20ec <usb_d_ep_abort+0x28>)
    20d4:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    20d6:	0164      	lsls	r4, r4, #5
    20d8:	4b05      	ldr	r3, [pc, #20]	; (20f0 <usb_d_ep_abort+0x2c>)
    20da:	191c      	adds	r4, r3, r4
    20dc:	2301      	movs	r3, #1
    20de:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    20e0:	3303      	adds	r3, #3
    20e2:	70e3      	strb	r3, [r4, #3]
}
    20e4:	bd70      	pop	{r4, r5, r6, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	00001bd5 	.word	0x00001bd5
    20ec:	000042e1 	.word	0x000042e1
    20f0:	200005b0 	.word	0x200005b0

000020f4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    20f4:	b570      	push	{r4, r5, r6, lr}
    20f6:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    20f8:	2900      	cmp	r1, #0
    20fa:	d005      	beq.n	2108 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    20fc:	2901      	cmp	r1, #1
    20fe:	d024      	beq.n	214a <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2100:	2102      	movs	r1, #2
    2102:	4b13      	ldr	r3, [pc, #76]	; (2150 <usb_d_ep_halt+0x5c>)
    2104:	4798      	blx	r3
	}
}
    2106:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2108:	4b12      	ldr	r3, [pc, #72]	; (2154 <usb_d_ep_halt+0x60>)
    210a:	4798      	blx	r3
    210c:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    210e:	db19      	blt.n	2144 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2110:	2102      	movs	r1, #2
    2112:	0020      	movs	r0, r4
    2114:	4b0e      	ldr	r3, [pc, #56]	; (2150 <usb_d_ep_halt+0x5c>)
    2116:	4798      	blx	r3
    2118:	2800      	cmp	r0, #0
    211a:	d0f4      	beq.n	2106 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    211c:	2100      	movs	r1, #0
    211e:	0020      	movs	r0, r4
    2120:	4b0b      	ldr	r3, [pc, #44]	; (2150 <usb_d_ep_halt+0x5c>)
    2122:	4798      	blx	r3
		if (rc < 0) {
    2124:	2800      	cmp	r0, #0
    2126:	dbee      	blt.n	2106 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2128:	016d      	lsls	r5, r5, #5
    212a:	4b0b      	ldr	r3, [pc, #44]	; (2158 <usb_d_ep_halt+0x64>)
    212c:	195d      	adds	r5, r3, r5
    212e:	2301      	movs	r3, #1
    2130:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2132:	3302      	adds	r3, #2
    2134:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2136:	69eb      	ldr	r3, [r5, #28]
    2138:	2200      	movs	r2, #0
    213a:	2103      	movs	r1, #3
    213c:	0020      	movs	r0, r4
    213e:	4798      	blx	r3
	return ERR_NONE;
    2140:	2000      	movs	r0, #0
    2142:	e7e0      	b.n	2106 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    2144:	2012      	movs	r0, #18
    2146:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    2148:	e7dd      	b.n	2106 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    214a:	4b01      	ldr	r3, [pc, #4]	; (2150 <usb_d_ep_halt+0x5c>)
    214c:	4798      	blx	r3
    214e:	e7da      	b.n	2106 <usb_d_ep_halt+0x12>
    2150:	00003f35 	.word	0x00003f35
    2154:	00001bd5 	.word	0x00001bd5
    2158:	200005b0 	.word	0x200005b0

0000215c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    215c:	b570      	push	{r4, r5, r6, lr}
    215e:	000d      	movs	r5, r1
    2160:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2162:	4b0f      	ldr	r3, [pc, #60]	; (21a0 <usb_d_ep_register_callback+0x44>)
    2164:	4798      	blx	r3
    2166:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2168:	2c00      	cmp	r4, #0
    216a:	d008      	beq.n	217e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    216c:	2b00      	cmp	r3, #0
    216e:	db05      	blt.n	217c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    2170:	2d01      	cmp	r5, #1
    2172:	d00b      	beq.n	218c <usb_d_ep_register_callback+0x30>
    2174:	2d00      	cmp	r5, #0
    2176:	d004      	beq.n	2182 <usb_d_ep_register_callback+0x26>
    2178:	2d02      	cmp	r5, #2
    217a:	d00c      	beq.n	2196 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    217c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    217e:	4c09      	ldr	r4, [pc, #36]	; (21a4 <usb_d_ep_register_callback+0x48>)
    2180:	e7f4      	b.n	216c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2182:	0140      	lsls	r0, r0, #5
    2184:	4b08      	ldr	r3, [pc, #32]	; (21a8 <usb_d_ep_register_callback+0x4c>)
    2186:	1818      	adds	r0, r3, r0
    2188:	6144      	str	r4, [r0, #20]
		break;
    218a:	e7f7      	b.n	217c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    218c:	0140      	lsls	r0, r0, #5
    218e:	4b06      	ldr	r3, [pc, #24]	; (21a8 <usb_d_ep_register_callback+0x4c>)
    2190:	1818      	adds	r0, r3, r0
    2192:	6184      	str	r4, [r0, #24]
		break;
    2194:	e7f2      	b.n	217c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2196:	0140      	lsls	r0, r0, #5
    2198:	4b03      	ldr	r3, [pc, #12]	; (21a8 <usb_d_ep_register_callback+0x4c>)
    219a:	1818      	adds	r0, r3, r0
    219c:	61c4      	str	r4, [r0, #28]
		break;
    219e:	e7ed      	b.n	217c <usb_d_ep_register_callback+0x20>
    21a0:	00001bd5 	.word	0x00001bd5
    21a4:	00001c11 	.word	0x00001c11
    21a8:	200005b0 	.word	0x200005b0

000021ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    21ac:	2800      	cmp	r0, #0
    21ae:	d100      	bne.n	21b2 <assert+0x6>
		__asm("BKPT #0");
    21b0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    21b2:	4770      	bx	lr

000021b4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    21b4:	6803      	ldr	r3, [r0, #0]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d003      	beq.n	21c2 <is_list_element+0xe>
		if (it == element) {
    21ba:	428b      	cmp	r3, r1
    21bc:	d003      	beq.n	21c6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	e7f9      	b.n	21b6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    21c2:	2000      	movs	r0, #0
}
    21c4:	4770      	bx	lr
			return true;
    21c6:	2001      	movs	r0, #1
    21c8:	e7fc      	b.n	21c4 <is_list_element+0x10>
	...

000021cc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    21cc:	b570      	push	{r4, r5, r6, lr}
    21ce:	0004      	movs	r4, r0
    21d0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    21d2:	4b06      	ldr	r3, [pc, #24]	; (21ec <list_insert_as_head+0x20>)
    21d4:	4798      	blx	r3
    21d6:	2301      	movs	r3, #1
    21d8:	4058      	eors	r0, r3
    21da:	b2c0      	uxtb	r0, r0
    21dc:	2239      	movs	r2, #57	; 0x39
    21de:	4904      	ldr	r1, [pc, #16]	; (21f0 <list_insert_as_head+0x24>)
    21e0:	4b04      	ldr	r3, [pc, #16]	; (21f4 <list_insert_as_head+0x28>)
    21e2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    21e4:	6823      	ldr	r3, [r4, #0]
    21e6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    21e8:	6025      	str	r5, [r4, #0]
}
    21ea:	bd70      	pop	{r4, r5, r6, pc}
    21ec:	000021b5 	.word	0x000021b5
    21f0:	000075c4 	.word	0x000075c4
    21f4:	000021ad 	.word	0x000021ad

000021f8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    21f8:	6803      	ldr	r3, [r0, #0]
    21fa:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    21fc:	6001      	str	r1, [r0, #0]
}
    21fe:	4770      	bx	lr

00002200 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2200:	b570      	push	{r4, r5, r6, lr}
    2202:	0005      	movs	r5, r0
    2204:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    2206:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2208:	4b0a      	ldr	r3, [pc, #40]	; (2234 <list_insert_at_end+0x34>)
    220a:	4798      	blx	r3
    220c:	2301      	movs	r3, #1
    220e:	4058      	eors	r0, r3
    2210:	b2c0      	uxtb	r0, r0
    2212:	224f      	movs	r2, #79	; 0x4f
    2214:	4908      	ldr	r1, [pc, #32]	; (2238 <list_insert_at_end+0x38>)
    2216:	4b09      	ldr	r3, [pc, #36]	; (223c <list_insert_at_end+0x3c>)
    2218:	4798      	blx	r3

	if (!list->head) {
    221a:	682b      	ldr	r3, [r5, #0]
    221c:	2b00      	cmp	r3, #0
    221e:	d103      	bne.n	2228 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    2220:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2222:	6033      	str	r3, [r6, #0]
		return;
    2224:	e005      	b.n	2232 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    2226:	001c      	movs	r4, r3
	while (it->next) {
    2228:	6823      	ldr	r3, [r4, #0]
    222a:	2b00      	cmp	r3, #0
    222c:	d1fb      	bne.n	2226 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    222e:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    2230:	6033      	str	r3, [r6, #0]
}
    2232:	bd70      	pop	{r4, r5, r6, pc}
    2234:	000021b5 	.word	0x000021b5
    2238:	000075c4 	.word	0x000075c4
    223c:	000021ad 	.word	0x000021ad

00002240 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2240:	6803      	ldr	r3, [r0, #0]
    2242:	2b00      	cmp	r3, #0
    2244:	d003      	beq.n	224e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2246:	681a      	ldr	r2, [r3, #0]
    2248:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    224a:	0018      	movs	r0, r3
	}

	return NULL;
}
    224c:	4770      	bx	lr
	return NULL;
    224e:	2000      	movs	r0, #0
    2250:	e7fc      	b.n	224c <list_remove_head+0xc>

00002252 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    2252:	2900      	cmp	r1, #0
    2254:	d012      	beq.n	227c <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
    2256:	6803      	ldr	r3, [r0, #0]
    2258:	4299      	cmp	r1, r3
    225a:	d104      	bne.n	2266 <list_delete_element+0x14>
		list->head = list->head->next;
    225c:	681b      	ldr	r3, [r3, #0]
    225e:	6003      	str	r3, [r0, #0]
		return true;
    2260:	2001      	movs	r0, #1
    2262:	e00a      	b.n	227a <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
    2264:	0013      	movs	r3, r2
		while (it && it->next != element) {
    2266:	2b00      	cmp	r3, #0
    2268:	d002      	beq.n	2270 <list_delete_element+0x1e>
    226a:	681a      	ldr	r2, [r3, #0]
    226c:	4291      	cmp	r1, r2
    226e:	d1f9      	bne.n	2264 <list_delete_element+0x12>
		}
		if (it) {
    2270:	2b00      	cmp	r3, #0
    2272:	d005      	beq.n	2280 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
    2274:	680a      	ldr	r2, [r1, #0]
    2276:	601a      	str	r2, [r3, #0]
			return true;
    2278:	2001      	movs	r0, #1
		}
	}

	return false;
}
    227a:	4770      	bx	lr
		return false;
    227c:	2000      	movs	r0, #0
    227e:	e7fc      	b.n	227a <list_delete_element+0x28>
	return false;
    2280:	2000      	movs	r0, #0
    2282:	e7fa      	b.n	227a <list_delete_element+0x28>

00002284 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2284:	b570      	push	{r4, r5, r6, lr}
    2286:	0004      	movs	r4, r0
    2288:	000e      	movs	r6, r1
    228a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    228c:	2800      	cmp	r0, #0
    228e:	d012      	beq.n	22b6 <ringbuffer_init+0x32>
    2290:	2900      	cmp	r1, #0
    2292:	d012      	beq.n	22ba <ringbuffer_init+0x36>
    2294:	2a00      	cmp	r2, #0
    2296:	d112      	bne.n	22be <ringbuffer_init+0x3a>
    2298:	2000      	movs	r0, #0
    229a:	2228      	movs	r2, #40	; 0x28
    229c:	490a      	ldr	r1, [pc, #40]	; (22c8 <ringbuffer_init+0x44>)
    229e:	4b0b      	ldr	r3, [pc, #44]	; (22cc <ringbuffer_init+0x48>)
    22a0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    22a2:	1e6b      	subs	r3, r5, #1
    22a4:	422b      	tst	r3, r5
    22a6:	d10c      	bne.n	22c2 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    22a8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    22aa:	2300      	movs	r3, #0
    22ac:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    22ae:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    22b0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    22b2:	2000      	movs	r0, #0
}
    22b4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    22b6:	2000      	movs	r0, #0
    22b8:	e7ef      	b.n	229a <ringbuffer_init+0x16>
    22ba:	2000      	movs	r0, #0
    22bc:	e7ed      	b.n	229a <ringbuffer_init+0x16>
    22be:	2001      	movs	r0, #1
    22c0:	e7eb      	b.n	229a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    22c2:	200d      	movs	r0, #13
    22c4:	4240      	negs	r0, r0
    22c6:	e7f5      	b.n	22b4 <ringbuffer_init+0x30>
    22c8:	000075e4 	.word	0x000075e4
    22cc:	000021ad 	.word	0x000021ad

000022d0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    22d0:	b570      	push	{r4, r5, r6, lr}
    22d2:	0004      	movs	r4, r0
    22d4:	000d      	movs	r5, r1
	ASSERT(rb && data);
    22d6:	2800      	cmp	r0, #0
    22d8:	d016      	beq.n	2308 <ringbuffer_get+0x38>
    22da:	2900      	cmp	r1, #0
    22dc:	d012      	beq.n	2304 <ringbuffer_get+0x34>
    22de:	2001      	movs	r0, #1
    22e0:	2240      	movs	r2, #64	; 0x40
    22e2:	490c      	ldr	r1, [pc, #48]	; (2314 <ringbuffer_get+0x44>)
    22e4:	4b0c      	ldr	r3, [pc, #48]	; (2318 <ringbuffer_get+0x48>)
    22e6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    22e8:	68a3      	ldr	r3, [r4, #8]
    22ea:	68e2      	ldr	r2, [r4, #12]
    22ec:	429a      	cmp	r2, r3
    22ee:	d00d      	beq.n	230c <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    22f0:	6862      	ldr	r2, [r4, #4]
    22f2:	4013      	ands	r3, r2
    22f4:	6822      	ldr	r2, [r4, #0]
    22f6:	5cd3      	ldrb	r3, [r2, r3]
    22f8:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    22fa:	68a3      	ldr	r3, [r4, #8]
    22fc:	3301      	adds	r3, #1
    22fe:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2300:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    2302:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    2304:	2000      	movs	r0, #0
    2306:	e7eb      	b.n	22e0 <ringbuffer_get+0x10>
    2308:	2000      	movs	r0, #0
    230a:	e7e9      	b.n	22e0 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    230c:	200a      	movs	r0, #10
    230e:	4240      	negs	r0, r0
    2310:	e7f7      	b.n	2302 <ringbuffer_get+0x32>
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	000075e4 	.word	0x000075e4
    2318:	000021ad 	.word	0x000021ad

0000231c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    231c:	b570      	push	{r4, r5, r6, lr}
    231e:	0004      	movs	r4, r0
    2320:	000d      	movs	r5, r1
	ASSERT(rb);
    2322:	1e43      	subs	r3, r0, #1
    2324:	4198      	sbcs	r0, r3
    2326:	b2c0      	uxtb	r0, r0
    2328:	2251      	movs	r2, #81	; 0x51
    232a:	490a      	ldr	r1, [pc, #40]	; (2354 <ringbuffer_put+0x38>)
    232c:	4b0a      	ldr	r3, [pc, #40]	; (2358 <ringbuffer_put+0x3c>)
    232e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2330:	6863      	ldr	r3, [r4, #4]
    2332:	68e2      	ldr	r2, [r4, #12]
    2334:	4013      	ands	r3, r2
    2336:	6822      	ldr	r2, [r4, #0]
    2338:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    233a:	68e3      	ldr	r3, [r4, #12]
    233c:	68a2      	ldr	r2, [r4, #8]
    233e:	1a9a      	subs	r2, r3, r2
    2340:	6861      	ldr	r1, [r4, #4]
    2342:	428a      	cmp	r2, r1
    2344:	d901      	bls.n	234a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    2346:	1a59      	subs	r1, r3, r1
    2348:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    234a:	3301      	adds	r3, #1
    234c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    234e:	2000      	movs	r0, #0
    2350:	bd70      	pop	{r4, r5, r6, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	000075e4 	.word	0x000075e4
    2358:	000021ad 	.word	0x000021ad

0000235c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    235c:	b510      	push	{r4, lr}
    235e:	0004      	movs	r4, r0
	ASSERT(rb);
    2360:	1e43      	subs	r3, r0, #1
    2362:	4198      	sbcs	r0, r3
    2364:	b2c0      	uxtb	r0, r0
    2366:	2267      	movs	r2, #103	; 0x67
    2368:	4903      	ldr	r1, [pc, #12]	; (2378 <ringbuffer_num+0x1c>)
    236a:	4b04      	ldr	r3, [pc, #16]	; (237c <ringbuffer_num+0x20>)
    236c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    236e:	68e0      	ldr	r0, [r4, #12]
    2370:	68a3      	ldr	r3, [r4, #8]
    2372:	1ac0      	subs	r0, r0, r3
}
    2374:	bd10      	pop	{r4, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	000075e4 	.word	0x000075e4
    237c:	000021ad 	.word	0x000021ad

00002380 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    2380:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2382:	2b00      	cmp	r3, #0
    2384:	db07      	blt.n	2396 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2386:	231f      	movs	r3, #31
    2388:	4018      	ands	r0, r3
    238a:	3b1e      	subs	r3, #30
    238c:	4083      	lsls	r3, r0
    238e:	2280      	movs	r2, #128	; 0x80
    2390:	0052      	lsls	r2, r2, #1
    2392:	4901      	ldr	r1, [pc, #4]	; (2398 <_irq_set+0x18>)
    2394:	508b      	str	r3, [r1, r2]
}
    2396:	4770      	bx	lr
    2398:	e000e100 	.word	0xe000e100

0000239c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    239c:	0103      	lsls	r3, r0, #4
    239e:	1a1b      	subs	r3, r3, r0
    23a0:	015a      	lsls	r2, r3, #5
    23a2:	2064      	movs	r0, #100	; 0x64
    23a4:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    23a6:	4770      	bx	lr

000023a8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    23a8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    23aa:	4b06      	ldr	r3, [pc, #24]	; (23c4 <_init_chip+0x1c>)
    23ac:	685a      	ldr	r2, [r3, #4]
    23ae:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    23b0:	4b05      	ldr	r3, [pc, #20]	; (23c8 <_init_chip+0x20>)
    23b2:	4798      	blx	r3
	_sysctrl_init_sources();
    23b4:	4b05      	ldr	r3, [pc, #20]	; (23cc <_init_chip+0x24>)
    23b6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    23b8:	4b05      	ldr	r3, [pc, #20]	; (23d0 <_init_chip+0x28>)
    23ba:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    23bc:	20ff      	movs	r0, #255	; 0xff
    23be:	4b05      	ldr	r3, [pc, #20]	; (23d4 <_init_chip+0x2c>)
    23c0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    23c2:	bd10      	pop	{r4, pc}
    23c4:	41004000 	.word	0x41004000
    23c8:	000026b1 	.word	0x000026b1
    23cc:	00002c71 	.word	0x00002c71
    23d0:	00002ccd 	.word	0x00002ccd
    23d4:	000025dd 	.word	0x000025dd

000023d8 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23d8:	79c3      	ldrb	r3, [r0, #7]
    23da:	09db      	lsrs	r3, r3, #7
    23dc:	d1fc      	bne.n	23d8 <_dac_init>
    23de:	79c3      	ldrb	r3, [r0, #7]
    23e0:	09db      	lsrs	r3, r3, #7
    23e2:	d1fc      	bne.n	23de <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    23e4:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    23e6:	079b      	lsls	r3, r3, #30
    23e8:	d507      	bpl.n	23fa <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    23ea:	2300      	movs	r3, #0
    23ec:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23ee:	79c3      	ldrb	r3, [r0, #7]
    23f0:	09db      	lsrs	r3, r3, #7
    23f2:	d1fc      	bne.n	23ee <_dac_init+0x16>
    23f4:	79c3      	ldrb	r3, [r0, #7]
    23f6:	09db      	lsrs	r3, r3, #7
    23f8:	d1fc      	bne.n	23f4 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    23fa:	2301      	movs	r3, #1
    23fc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23fe:	79c3      	ldrb	r3, [r0, #7]
    2400:	09db      	lsrs	r3, r3, #7
    2402:	d1fc      	bne.n	23fe <_dac_init+0x26>
    2404:	79c3      	ldrb	r3, [r0, #7]
    2406:	09db      	lsrs	r3, r3, #7
    2408:	d1fc      	bne.n	2404 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    240a:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    240c:	2241      	movs	r2, #65	; 0x41
    240e:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    2410:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    2412:	79c3      	ldrb	r3, [r0, #7]
    2414:	09db      	lsrs	r3, r3, #7
    2416:	d1fc      	bne.n	2412 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    2418:	2000      	movs	r0, #0
    241a:	4770      	bx	lr

0000241c <_dac_sync_init>:
{
    241c:	b570      	push	{r4, r5, r6, lr}
    241e:	0005      	movs	r5, r0
    2420:	000c      	movs	r4, r1
	ASSERT(device);
    2422:	1e43      	subs	r3, r0, #1
    2424:	4198      	sbcs	r0, r3
    2426:	b2c0      	uxtb	r0, r0
    2428:	2249      	movs	r2, #73	; 0x49
    242a:	4904      	ldr	r1, [pc, #16]	; (243c <_dac_sync_init+0x20>)
    242c:	4b04      	ldr	r3, [pc, #16]	; (2440 <_dac_sync_init+0x24>)
    242e:	4798      	blx	r3
	device->hw = hw;
    2430:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    2432:	0020      	movs	r0, r4
    2434:	4b03      	ldr	r3, [pc, #12]	; (2444 <_dac_sync_init+0x28>)
    2436:	4798      	blx	r3
}
    2438:	bd70      	pop	{r4, r5, r6, pc}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	00007608 	.word	0x00007608
    2440:	000021ad 	.word	0x000021ad
    2444:	000023d9 	.word	0x000023d9

00002448 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2448:	4b20      	ldr	r3, [pc, #128]	; (24cc <_ext_irq_init+0x84>)
    244a:	785b      	ldrb	r3, [r3, #1]
    244c:	09db      	lsrs	r3, r3, #7
    244e:	d1fb      	bne.n	2448 <_ext_irq_init>
    2450:	4b1e      	ldr	r3, [pc, #120]	; (24cc <_ext_irq_init+0x84>)
    2452:	785b      	ldrb	r3, [r3, #1]
    2454:	09db      	lsrs	r3, r3, #7
    2456:	d1fb      	bne.n	2450 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    2458:	4b1c      	ldr	r3, [pc, #112]	; (24cc <_ext_irq_init+0x84>)
    245a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    245c:	079b      	lsls	r3, r3, #30
    245e:	d50a      	bpl.n	2476 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    2460:	2200      	movs	r2, #0
    2462:	4b1a      	ldr	r3, [pc, #104]	; (24cc <_ext_irq_init+0x84>)
    2464:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2466:	4b19      	ldr	r3, [pc, #100]	; (24cc <_ext_irq_init+0x84>)
    2468:	785b      	ldrb	r3, [r3, #1]
    246a:	09db      	lsrs	r3, r3, #7
    246c:	d1fb      	bne.n	2466 <_ext_irq_init+0x1e>
    246e:	4b17      	ldr	r3, [pc, #92]	; (24cc <_ext_irq_init+0x84>)
    2470:	785b      	ldrb	r3, [r3, #1]
    2472:	09db      	lsrs	r3, r3, #7
    2474:	d1fb      	bne.n	246e <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    2476:	2201      	movs	r2, #1
    2478:	4b14      	ldr	r3, [pc, #80]	; (24cc <_ext_irq_init+0x84>)
    247a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    247c:	4b13      	ldr	r3, [pc, #76]	; (24cc <_ext_irq_init+0x84>)
    247e:	785b      	ldrb	r3, [r3, #1]
    2480:	09db      	lsrs	r3, r3, #7
    2482:	d1fb      	bne.n	247c <_ext_irq_init+0x34>
    2484:	4b11      	ldr	r3, [pc, #68]	; (24cc <_ext_irq_init+0x84>)
    2486:	785b      	ldrb	r3, [r3, #1]
    2488:	09db      	lsrs	r3, r3, #7
    248a:	d1fb      	bne.n	2484 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    248c:	4b0f      	ldr	r3, [pc, #60]	; (24cc <_ext_irq_init+0x84>)
    248e:	2200      	movs	r2, #0
    2490:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2492:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    2494:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2496:	619a      	str	r2, [r3, #24]
    2498:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    249a:	781a      	ldrb	r2, [r3, #0]
    249c:	2102      	movs	r1, #2
    249e:	430a      	orrs	r2, r1
    24a0:	b2d2      	uxtb	r2, r2
    24a2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    24a4:	4b09      	ldr	r3, [pc, #36]	; (24cc <_ext_irq_init+0x84>)
    24a6:	785b      	ldrb	r3, [r3, #1]
    24a8:	09db      	lsrs	r3, r3, #7
    24aa:	d1fb      	bne.n	24a4 <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24ac:	4b08      	ldr	r3, [pc, #32]	; (24d0 <_ext_irq_init+0x88>)
    24ae:	2210      	movs	r2, #16
    24b0:	2180      	movs	r1, #128	; 0x80
    24b2:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    24b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24b8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24bc:	3101      	adds	r1, #1
    24be:	31ff      	adds	r1, #255	; 0xff
    24c0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24c2:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    24c4:	4b03      	ldr	r3, [pc, #12]	; (24d4 <_ext_irq_init+0x8c>)
    24c6:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    24c8:	2000      	movs	r0, #0
    24ca:	4770      	bx	lr
    24cc:	40001800 	.word	0x40001800
    24d0:	e000e100 	.word	0xe000e100
    24d4:	20000630 	.word	0x20000630

000024d8 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    24d8:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    24da:	2b00      	cmp	r3, #0
    24dc:	d00b      	beq.n	24f6 <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    24de:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    24e0:	2aff      	cmp	r2, #255	; 0xff
    24e2:	d017      	beq.n	2514 <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    24e4:	2900      	cmp	r1, #0
    24e6:	d10f      	bne.n	2508 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    24e8:	2301      	movs	r3, #1
    24ea:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    24ec:	4a0b      	ldr	r2, [pc, #44]	; (251c <_ext_irq_enable+0x44>)
    24ee:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    24f0:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    24f2:	2000      	movs	r0, #0
}
    24f4:	4770      	bx	lr
		if (_map[i].pin == pin) {
    24f6:	280e      	cmp	r0, #14
    24f8:	d002      	beq.n	2500 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
    24fa:	3301      	adds	r3, #1
    24fc:	b2db      	uxtb	r3, r3
    24fe:	e7ec      	b.n	24da <_ext_irq_enable+0x2>
			extint = _map[i].extint;
    2500:	00da      	lsls	r2, r3, #3
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <_ext_irq_enable+0x48>)
    2504:	5cd2      	ldrb	r2, [r2, r3]
			break;
    2506:	e7eb      	b.n	24e0 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    2508:	2301      	movs	r3, #1
    250a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    250c:	4a03      	ldr	r2, [pc, #12]	; (251c <_ext_irq_enable+0x44>)
    250e:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    2510:	2000      	movs	r0, #0
    2512:	e7ef      	b.n	24f4 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
    2514:	200d      	movs	r0, #13
    2516:	4240      	negs	r0, r0
    2518:	e7ec      	b.n	24f4 <_ext_irq_enable+0x1c>
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	40001800 	.word	0x40001800
    2520:	00007620 	.word	0x00007620

00002524 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    2524:	b570      	push	{r4, r5, r6, lr}
    2526:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    2528:	4b26      	ldr	r3, [pc, #152]	; (25c4 <EIC_Handler+0xa0>)
    252a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    252c:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    252e:	400a      	ands	r2, r1
    2530:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2532:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2534:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    2536:	4b24      	ldr	r3, [pc, #144]	; (25c8 <EIC_Handler+0xa4>)
    2538:	6818      	ldr	r0, [r3, #0]
    253a:	1e43      	subs	r3, r0, #1
    253c:	4198      	sbcs	r0, r3
    253e:	b2c0      	uxtb	r0, r0
    2540:	22d2      	movs	r2, #210	; 0xd2
    2542:	4922      	ldr	r1, [pc, #136]	; (25cc <EIC_Handler+0xa8>)
    2544:	4b22      	ldr	r3, [pc, #136]	; (25d0 <EIC_Handler+0xac>)
    2546:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    2548:	2501      	movs	r5, #1
    254a:	426d      	negs	r5, r5

	while (flags) {
    254c:	e02e      	b.n	25ac <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    254e:	3901      	subs	r1, #1
    2550:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    2552:	42b0      	cmp	r0, r6
    2554:	d80e      	bhi.n	2574 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    2556:	1832      	adds	r2, r6, r0
    2558:	1052      	asrs	r2, r2, #1
    255a:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    255c:	23ff      	movs	r3, #255	; 0xff
    255e:	4013      	ands	r3, r2
    2560:	00db      	lsls	r3, r3, #3
    2562:	4a1c      	ldr	r2, [pc, #112]	; (25d4 <EIC_Handler+0xb0>)
    2564:	5c9b      	ldrb	r3, [r3, r2]
    2566:	42a3      	cmp	r3, r4
    2568:	d003      	beq.n	2572 <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    256a:	daf0      	bge.n	254e <EIC_Handler+0x2a>
					lower = middle + 1;
    256c:	3101      	adds	r1, #1
    256e:	b2c8      	uxtb	r0, r1
    2570:	e7ef      	b.n	2552 <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    2572:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2574:	1c6b      	adds	r3, r5, #1
    2576:	d003      	beq.n	2580 <EIC_Handler+0x5c>
				callback(pin);
    2578:	4b13      	ldr	r3, [pc, #76]	; (25c8 <EIC_Handler+0xa4>)
    257a:	681b      	ldr	r3, [r3, #0]
    257c:	0028      	movs	r0, r5
    257e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2580:	2201      	movs	r2, #1
    2582:	40a2      	lsls	r2, r4
    2584:	9b01      	ldr	r3, [sp, #4]
    2586:	4393      	bics	r3, r2
    2588:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    258a:	9801      	ldr	r0, [sp, #4]
    258c:	4b12      	ldr	r3, [pc, #72]	; (25d8 <EIC_Handler+0xb4>)
    258e:	4798      	blx	r3
    2590:	3801      	subs	r0, #1
    2592:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2594:	1c63      	adds	r3, r4, #1
    2596:	d002      	beq.n	259e <EIC_Handler+0x7a>
    2598:	2601      	movs	r6, #1
    259a:	2000      	movs	r0, #0
    259c:	e7d9      	b.n	2552 <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    259e:	4b09      	ldr	r3, [pc, #36]	; (25c4 <EIC_Handler+0xa0>)
    25a0:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    25a2:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    25a4:	400a      	ands	r2, r1
    25a6:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    25a8:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    25aa:	611a      	str	r2, [r3, #16]
	while (flags) {
    25ac:	9b01      	ldr	r3, [sp, #4]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d005      	beq.n	25be <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    25b2:	9801      	ldr	r0, [sp, #4]
    25b4:	4b08      	ldr	r3, [pc, #32]	; (25d8 <EIC_Handler+0xb4>)
    25b6:	4798      	blx	r3
    25b8:	3801      	subs	r0, #1
    25ba:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    25bc:	e7ea      	b.n	2594 <EIC_Handler+0x70>
	}
}
    25be:	b002      	add	sp, #8
    25c0:	bd70      	pop	{r4, r5, r6, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	40001800 	.word	0x40001800
    25c8:	20000630 	.word	0x20000630
    25cc:	00007628 	.word	0x00007628
    25d0:	000021ad 	.word	0x000021ad
    25d4:	00007620 	.word	0x00007620
    25d8:	0000521d 	.word	0x0000521d

000025dc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    25dc:	07c3      	lsls	r3, r0, #31
    25de:	d509      	bpl.n	25f4 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    25e0:	4b27      	ldr	r3, [pc, #156]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    25e2:	2280      	movs	r2, #128	; 0x80
    25e4:	0052      	lsls	r2, r2, #1
    25e6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25e8:	4a26      	ldr	r2, [pc, #152]	; (2684 <_gclk_init_generators_by_fref+0xa8>)
    25ea:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25ec:	4b24      	ldr	r3, [pc, #144]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    25ee:	785b      	ldrb	r3, [r3, #1]
    25f0:	09db      	lsrs	r3, r3, #7
    25f2:	d1fb      	bne.n	25ec <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    25f4:	0783      	lsls	r3, r0, #30
    25f6:	d508      	bpl.n	260a <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    25f8:	4b21      	ldr	r3, [pc, #132]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    25fa:	4a23      	ldr	r2, [pc, #140]	; (2688 <_gclk_init_generators_by_fref+0xac>)
    25fc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25fe:	4a23      	ldr	r2, [pc, #140]	; (268c <_gclk_init_generators_by_fref+0xb0>)
    2600:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2602:	4b1f      	ldr	r3, [pc, #124]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2604:	785b      	ldrb	r3, [r3, #1]
    2606:	09db      	lsrs	r3, r3, #7
    2608:	d1fb      	bne.n	2602 <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    260a:	0743      	lsls	r3, r0, #29
    260c:	d508      	bpl.n	2620 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    260e:	4b1c      	ldr	r3, [pc, #112]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2610:	4a1f      	ldr	r2, [pc, #124]	; (2690 <_gclk_init_generators_by_fref+0xb4>)
    2612:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2614:	4a1f      	ldr	r2, [pc, #124]	; (2694 <_gclk_init_generators_by_fref+0xb8>)
    2616:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2618:	4b19      	ldr	r3, [pc, #100]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    261a:	785b      	ldrb	r3, [r3, #1]
    261c:	09db      	lsrs	r3, r3, #7
    261e:	d1fb      	bne.n	2618 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2620:	0703      	lsls	r3, r0, #28
    2622:	d508      	bpl.n	2636 <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    2624:	4b16      	ldr	r3, [pc, #88]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2626:	4a1c      	ldr	r2, [pc, #112]	; (2698 <_gclk_init_generators_by_fref+0xbc>)
    2628:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    262a:	4a1c      	ldr	r2, [pc, #112]	; (269c <_gclk_init_generators_by_fref+0xc0>)
    262c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    262e:	4b14      	ldr	r3, [pc, #80]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2630:	785b      	ldrb	r3, [r3, #1]
    2632:	09db      	lsrs	r3, r3, #7
    2634:	d1fb      	bne.n	262e <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    2636:	06c3      	lsls	r3, r0, #27
    2638:	d509      	bpl.n	264e <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    263a:	4b11      	ldr	r3, [pc, #68]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    263c:	2282      	movs	r2, #130	; 0x82
    263e:	0052      	lsls	r2, r2, #1
    2640:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2642:	4a17      	ldr	r2, [pc, #92]	; (26a0 <_gclk_init_generators_by_fref+0xc4>)
    2644:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2646:	4b0e      	ldr	r3, [pc, #56]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2648:	785b      	ldrb	r3, [r3, #1]
    264a:	09db      	lsrs	r3, r3, #7
    264c:	d1fb      	bne.n	2646 <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    264e:	0683      	lsls	r3, r0, #26
    2650:	d508      	bpl.n	2664 <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    2652:	4b0b      	ldr	r3, [pc, #44]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2654:	4a13      	ldr	r2, [pc, #76]	; (26a4 <_gclk_init_generators_by_fref+0xc8>)
    2656:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2658:	4a13      	ldr	r2, [pc, #76]	; (26a8 <_gclk_init_generators_by_fref+0xcc>)
    265a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    265c:	4b08      	ldr	r3, [pc, #32]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    265e:	785b      	ldrb	r3, [r3, #1]
    2660:	09db      	lsrs	r3, r3, #7
    2662:	d1fb      	bne.n	265c <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    2664:	0643      	lsls	r3, r0, #25
    2666:	d509      	bpl.n	267c <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    2668:	4b05      	ldr	r3, [pc, #20]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    266a:	2283      	movs	r2, #131	; 0x83
    266c:	0052      	lsls	r2, r2, #1
    266e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2670:	4a0e      	ldr	r2, [pc, #56]	; (26ac <_gclk_init_generators_by_fref+0xd0>)
    2672:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2674:	4b02      	ldr	r3, [pc, #8]	; (2680 <_gclk_init_generators_by_fref+0xa4>)
    2676:	785b      	ldrb	r3, [r3, #1]
    2678:	09db      	lsrs	r3, r3, #7
    267a:	d1fb      	bne.n	2674 <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    267c:	4770      	bx	lr
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	40000c00 	.word	0x40000c00
    2684:	00290800 	.word	0x00290800
    2688:	00000601 	.word	0x00000601
    268c:	00010801 	.word	0x00010801
    2690:	00000402 	.word	0x00000402
    2694:	00210602 	.word	0x00210602
    2698:	00000803 	.word	0x00000803
    269c:	00290603 	.word	0x00290603
    26a0:	00090704 	.word	0x00090704
    26a4:	00000305 	.word	0x00000305
    26a8:	00010805 	.word	0x00010805
    26ac:	00210406 	.word	0x00210406

000026b0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    26b0:	4b06      	ldr	r3, [pc, #24]	; (26cc <_pm_init+0x1c>)
    26b2:	7a1a      	ldrb	r2, [r3, #8]
    26b4:	b2d2      	uxtb	r2, r2
    26b6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    26b8:	7a5a      	ldrb	r2, [r3, #9]
    26ba:	b2d2      	uxtb	r2, r2
    26bc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    26be:	7a9a      	ldrb	r2, [r3, #10]
    26c0:	b2d2      	uxtb	r2, r2
    26c2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    26c4:	7ada      	ldrb	r2, [r3, #11]
    26c6:	b2d2      	uxtb	r2, r2
    26c8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    26ca:	4770      	bx	lr
    26cc:	40000400 	.word	0x40000400

000026d0 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    26d0:	4b02      	ldr	r3, [pc, #8]	; (26dc <_sercom_get_hardware_index+0xc>)
    26d2:	469c      	mov	ip, r3
    26d4:	4460      	add	r0, ip
    26d6:	0a80      	lsrs	r0, r0, #10
    26d8:	b2c0      	uxtb	r0, r0
}
    26da:	4770      	bx	lr
    26dc:	bdfff800 	.word	0xbdfff800

000026e0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    26e0:	b510      	push	{r4, lr}
	void *hw = device->hw;
    26e2:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    26e4:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    26e6:	07db      	lsls	r3, r3, #31
    26e8:	d502      	bpl.n	26f0 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    26ea:	7da3      	ldrb	r3, [r4, #22]
    26ec:	07db      	lsls	r3, r3, #31
    26ee:	d40f      	bmi.n	2710 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    26f0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    26f2:	079b      	lsls	r3, r3, #30
    26f4:	d502      	bpl.n	26fc <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    26f6:	7da3      	ldrb	r3, [r4, #22]
    26f8:	079b      	lsls	r3, r3, #30
    26fa:	d40e      	bmi.n	271a <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    26fc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    26fe:	075b      	lsls	r3, r3, #29
    2700:	d515      	bpl.n	272e <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    2702:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    2704:	2337      	movs	r3, #55	; 0x37
    2706:	421a      	tst	r2, r3
    2708:	d00c      	beq.n	2724 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    270a:	3308      	adds	r3, #8
    270c:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    270e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2710:	2301      	movs	r3, #1
    2712:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2714:	6803      	ldr	r3, [r0, #0]
    2716:	4798      	blx	r3
    2718:	e7f9      	b.n	270e <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    271a:	2302      	movs	r3, #2
    271c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    271e:	6883      	ldr	r3, [r0, #8]
    2720:	4798      	blx	r3
    2722:	e7f4      	b.n	270e <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    2724:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2726:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    2728:	b2c9      	uxtb	r1, r1
    272a:	4798      	blx	r3
    272c:	e7ef      	b.n	270e <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    272e:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2730:	09db      	lsrs	r3, r3, #7
    2732:	d0ec      	beq.n	270e <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2734:	2380      	movs	r3, #128	; 0x80
    2736:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    2738:	68c3      	ldr	r3, [r0, #12]
    273a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    273c:	8b63      	ldrh	r3, [r4, #26]
    273e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2740:	8363      	strh	r3, [r4, #26]
    2742:	e7e4      	b.n	270e <_sercom_usart_interrupt_handler+0x2e>

00002744 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    2744:	4b03      	ldr	r3, [pc, #12]	; (2754 <_sercom_init_irq_param+0x10>)
    2746:	4298      	cmp	r0, r3
    2748:	d000      	beq.n	274c <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    274a:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    274c:	4b02      	ldr	r3, [pc, #8]	; (2758 <_sercom_init_irq_param+0x14>)
    274e:	6019      	str	r1, [r3, #0]
}
    2750:	e7fb      	b.n	274a <_sercom_init_irq_param+0x6>
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	42001400 	.word	0x42001400
    2758:	20000634 	.word	0x20000634

0000275c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    275c:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    275e:	4b02      	ldr	r3, [pc, #8]	; (2768 <_sercom_get_irq_num+0xc>)
    2760:	4798      	blx	r3
    2762:	3009      	adds	r0, #9
    2764:	b2c0      	uxtb	r0, r0
}
    2766:	bd10      	pop	{r4, pc}
    2768:	000026d1 	.word	0x000026d1

0000276c <_get_sercom_index>:
{
    276c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    276e:	4b0b      	ldr	r3, [pc, #44]	; (279c <_get_sercom_index+0x30>)
    2770:	4798      	blx	r3
    2772:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2774:	2000      	movs	r0, #0
    2776:	2800      	cmp	r0, #0
    2778:	d006      	beq.n	2788 <_get_sercom_index+0x1c>
	ASSERT(false);
    277a:	4a09      	ldr	r2, [pc, #36]	; (27a0 <_get_sercom_index+0x34>)
    277c:	4909      	ldr	r1, [pc, #36]	; (27a4 <_get_sercom_index+0x38>)
    277e:	2000      	movs	r0, #0
    2780:	4b09      	ldr	r3, [pc, #36]	; (27a8 <_get_sercom_index+0x3c>)
    2782:	4798      	blx	r3
	return 0;
    2784:	2000      	movs	r0, #0
}
    2786:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    2788:	0083      	lsls	r3, r0, #2
    278a:	181b      	adds	r3, r3, r0
    278c:	0099      	lsls	r1, r3, #2
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <_get_sercom_index+0x40>)
    2790:	5ccb      	ldrb	r3, [r1, r3]
    2792:	429a      	cmp	r2, r3
    2794:	d0f7      	beq.n	2786 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2796:	3001      	adds	r0, #1
    2798:	b2c0      	uxtb	r0, r0
    279a:	e7ec      	b.n	2776 <_get_sercom_index+0xa>
    279c:	000026d1 	.word	0x000026d1
    27a0:	0000025e 	.word	0x0000025e
    27a4:	000076b0 	.word	0x000076b0
    27a8:	000021ad 	.word	0x000021ad
    27ac:	00007640 	.word	0x00007640

000027b0 <_usart_init>:
{
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    27b4:	4b38      	ldr	r3, [pc, #224]	; (2898 <_usart_init+0xe8>)
    27b6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    27b8:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    27ba:	07db      	lsls	r3, r3, #31
    27bc:	d41d      	bmi.n	27fa <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    27be:	0083      	lsls	r3, r0, #2
    27c0:	181b      	adds	r3, r3, r0
    27c2:	009a      	lsls	r2, r3, #2
    27c4:	4b35      	ldr	r3, [pc, #212]	; (289c <_usart_init+0xec>)
    27c6:	189b      	adds	r3, r3, r2
    27c8:	685a      	ldr	r2, [r3, #4]
    27ca:	231c      	movs	r3, #28
    27cc:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27ce:	69e3      	ldr	r3, [r4, #28]
    27d0:	079b      	lsls	r3, r3, #30
    27d2:	d1fc      	bne.n	27ce <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    27d4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    27d6:	079b      	lsls	r3, r3, #30
    27d8:	d509      	bpl.n	27ee <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    27da:	6823      	ldr	r3, [r4, #0]
    27dc:	2102      	movs	r1, #2
    27de:	438b      	bics	r3, r1
    27e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27e2:	69e3      	ldr	r3, [r4, #28]
    27e4:	079b      	lsls	r3, r3, #30
    27e6:	d1fc      	bne.n	27e2 <_usart_init+0x32>
    27e8:	69e3      	ldr	r3, [r4, #28]
    27ea:	079b      	lsls	r3, r3, #30
    27ec:	d4fc      	bmi.n	27e8 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    27ee:	2301      	movs	r3, #1
    27f0:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    27f2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27f4:	69e3      	ldr	r3, [r4, #28]
    27f6:	079b      	lsls	r3, r3, #30
    27f8:	d1fc      	bne.n	27f4 <_usart_init+0x44>
    27fa:	69e3      	ldr	r3, [r4, #28]
    27fc:	07db      	lsls	r3, r3, #31
    27fe:	d4fc      	bmi.n	27fa <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2800:	0083      	lsls	r3, r0, #2
    2802:	181b      	adds	r3, r3, r0
    2804:	009a      	lsls	r2, r3, #2
    2806:	4b25      	ldr	r3, [pc, #148]	; (289c <_usart_init+0xec>)
    2808:	189b      	adds	r3, r3, r2
    280a:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    280c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    280e:	69e3      	ldr	r3, [r4, #28]
    2810:	079b      	lsls	r3, r3, #30
    2812:	d1fc      	bne.n	280e <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2814:	0083      	lsls	r3, r0, #2
    2816:	181b      	adds	r3, r3, r0
    2818:	009a      	lsls	r2, r3, #2
    281a:	4b20      	ldr	r3, [pc, #128]	; (289c <_usart_init+0xec>)
    281c:	189b      	adds	r3, r3, r2
    281e:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2820:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2822:	69e3      	ldr	r3, [r4, #28]
    2824:	075b      	lsls	r3, r3, #29
    2826:	d1fc      	bne.n	2822 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2828:	0083      	lsls	r3, r0, #2
    282a:	181b      	adds	r3, r3, r0
    282c:	009a      	lsls	r2, r3, #2
    282e:	4b1b      	ldr	r3, [pc, #108]	; (289c <_usart_init+0xec>)
    2830:	189b      	adds	r3, r3, r2
    2832:	685b      	ldr	r3, [r3, #4]
    2834:	049a      	lsls	r2, r3, #18
    2836:	d40b      	bmi.n	2850 <_usart_init+0xa0>
    2838:	22c0      	movs	r2, #192	; 0xc0
    283a:	01d2      	lsls	r2, r2, #7
    283c:	4213      	tst	r3, r2
    283e:	d107      	bne.n	2850 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2840:	0083      	lsls	r3, r0, #2
    2842:	181b      	adds	r3, r3, r0
    2844:	009a      	lsls	r2, r3, #2
    2846:	4b15      	ldr	r3, [pc, #84]	; (289c <_usart_init+0xec>)
    2848:	189b      	adds	r3, r3, r2
    284a:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    284c:	81a3      	strh	r3, [r4, #12]
    284e:	e015      	b.n	287c <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2850:	0083      	lsls	r3, r0, #2
    2852:	181b      	adds	r3, r3, r0
    2854:	009a      	lsls	r2, r3, #2
    2856:	4911      	ldr	r1, [pc, #68]	; (289c <_usart_init+0xec>)
    2858:	1889      	adds	r1, r1, r2
    285a:	898a      	ldrh	r2, [r1, #12]
    285c:	89a3      	ldrh	r3, [r4, #12]
    285e:	04d2      	lsls	r2, r2, #19
    2860:	0cd2      	lsrs	r2, r2, #19
    2862:	0b5b      	lsrs	r3, r3, #13
    2864:	035b      	lsls	r3, r3, #13
    2866:	4313      	orrs	r3, r2
    2868:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    286a:	7b8b      	ldrb	r3, [r1, #14]
    286c:	2207      	movs	r2, #7
    286e:	401a      	ands	r2, r3
    2870:	89a3      	ldrh	r3, [r4, #12]
    2872:	0352      	lsls	r2, r2, #13
    2874:	04db      	lsls	r3, r3, #19
    2876:	0cdb      	lsrs	r3, r3, #19
    2878:	4313      	orrs	r3, r2
    287a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    287c:	4a07      	ldr	r2, [pc, #28]	; (289c <_usart_init+0xec>)
    287e:	0083      	lsls	r3, r0, #2
    2880:	181d      	adds	r5, r3, r0
    2882:	00a9      	lsls	r1, r5, #2
    2884:	000d      	movs	r5, r1
    2886:	1851      	adds	r1, r2, r1
    2888:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    288a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    288c:	1952      	adds	r2, r2, r5
    288e:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2890:	2330      	movs	r3, #48	; 0x30
    2892:	54e2      	strb	r2, [r4, r3]
}
    2894:	2000      	movs	r0, #0
    2896:	bd70      	pop	{r4, r5, r6, pc}
    2898:	0000276d 	.word	0x0000276d
    289c:	00007640 	.word	0x00007640

000028a0 <_usart_async_init>:
{
    28a0:	b570      	push	{r4, r5, r6, lr}
    28a2:	0006      	movs	r6, r0
    28a4:	000c      	movs	r4, r1
	ASSERT(device);
    28a6:	1e43      	subs	r3, r0, #1
    28a8:	4198      	sbcs	r0, r3
    28aa:	b2c0      	uxtb	r0, r0
    28ac:	22c4      	movs	r2, #196	; 0xc4
    28ae:	4919      	ldr	r1, [pc, #100]	; (2914 <_usart_async_init+0x74>)
    28b0:	4b19      	ldr	r3, [pc, #100]	; (2918 <_usart_async_init+0x78>)
    28b2:	4798      	blx	r3
	init_status = _usart_init(hw);
    28b4:	0020      	movs	r0, r4
    28b6:	4b19      	ldr	r3, [pc, #100]	; (291c <_usart_async_init+0x7c>)
    28b8:	4798      	blx	r3
    28ba:	1e05      	subs	r5, r0, #0
	if (init_status) {
    28bc:	d001      	beq.n	28c2 <_usart_async_init+0x22>
}
    28be:	0028      	movs	r0, r5
    28c0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    28c2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    28c4:	0031      	movs	r1, r6
    28c6:	0020      	movs	r0, r4
    28c8:	4b15      	ldr	r3, [pc, #84]	; (2920 <_usart_async_init+0x80>)
    28ca:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    28cc:	0020      	movs	r0, r4
    28ce:	4b15      	ldr	r3, [pc, #84]	; (2924 <_usart_async_init+0x84>)
    28d0:	4798      	blx	r3
    28d2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    28d4:	2b00      	cmp	r3, #0
    28d6:	db0a      	blt.n	28ee <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28d8:	211f      	movs	r1, #31
    28da:	4001      	ands	r1, r0
    28dc:	2201      	movs	r2, #1
    28de:	408a      	lsls	r2, r1
    28e0:	2180      	movs	r1, #128	; 0x80
    28e2:	4c11      	ldr	r4, [pc, #68]	; (2928 <_usart_async_init+0x88>)
    28e4:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    28e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28ea:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    28ee:	2b00      	cmp	r3, #0
    28f0:	db07      	blt.n	2902 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28f2:	211f      	movs	r1, #31
    28f4:	4001      	ands	r1, r0
    28f6:	2201      	movs	r2, #1
    28f8:	408a      	lsls	r2, r1
    28fa:	21c0      	movs	r1, #192	; 0xc0
    28fc:	0049      	lsls	r1, r1, #1
    28fe:	4c0a      	ldr	r4, [pc, #40]	; (2928 <_usart_async_init+0x88>)
    2900:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2902:	2b00      	cmp	r3, #0
    2904:	dbdb      	blt.n	28be <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2906:	231f      	movs	r3, #31
    2908:	4018      	ands	r0, r3
    290a:	3b1e      	subs	r3, #30
    290c:	4083      	lsls	r3, r0
    290e:	4a06      	ldr	r2, [pc, #24]	; (2928 <_usart_async_init+0x88>)
    2910:	6013      	str	r3, [r2, #0]
    2912:	e7d4      	b.n	28be <_usart_async_init+0x1e>
    2914:	000076b0 	.word	0x000076b0
    2918:	000021ad 	.word	0x000021ad
    291c:	000027b1 	.word	0x000027b1
    2920:	00002745 	.word	0x00002745
    2924:	0000275d 	.word	0x0000275d
    2928:	e000e100 	.word	0xe000e100

0000292c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    292c:	6983      	ldr	r3, [r0, #24]
    292e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    2930:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2932:	4770      	bx	lr

00002934 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2934:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2936:	2201      	movs	r2, #1
    2938:	759a      	strb	r2, [r3, #22]
}
    293a:	4770      	bx	lr

0000293c <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    293c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    293e:	2202      	movs	r2, #2
    2940:	759a      	strb	r2, [r3, #22]
}
    2942:	4770      	bx	lr

00002944 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    2944:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    2946:	4b02      	ldr	r3, [pc, #8]	; (2950 <SERCOM3_Handler+0xc>)
    2948:	6818      	ldr	r0, [r3, #0]
    294a:	4b02      	ldr	r3, [pc, #8]	; (2954 <SERCOM3_Handler+0x10>)
    294c:	4798      	blx	r3
}
    294e:	bd10      	pop	{r4, pc}
    2950:	20000634 	.word	0x20000634
    2954:	000026e1 	.word	0x000026e1

00002958 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	0006      	movs	r6, r0
    295c:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    295e:	0008      	movs	r0, r1
    2960:	4b73      	ldr	r3, [pc, #460]	; (2b30 <_spi_m_sync_init+0x1d8>)
    2962:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2964:	2300      	movs	r3, #0
    2966:	e001      	b.n	296c <_spi_m_sync_init+0x14>
    2968:	3301      	adds	r3, #1
    296a:	b2db      	uxtb	r3, r3
    296c:	2b02      	cmp	r3, #2
    296e:	d80b      	bhi.n	2988 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    2970:	0119      	lsls	r1, r3, #4
    2972:	18c9      	adds	r1, r1, r3
    2974:	4a6f      	ldr	r2, [pc, #444]	; (2b34 <_spi_m_sync_init+0x1dc>)
    2976:	1852      	adds	r2, r2, r1
    2978:	324c      	adds	r2, #76	; 0x4c
    297a:	7812      	ldrb	r2, [r2, #0]
    297c:	4290      	cmp	r0, r2
    297e:	d1f3      	bne.n	2968 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    2980:	4d6c      	ldr	r5, [pc, #432]	; (2b34 <_spi_m_sync_init+0x1dc>)
    2982:	353c      	adds	r5, #60	; 0x3c
    2984:	186d      	adds	r5, r5, r1
    2986:	e000      	b.n	298a <_spi_m_sync_init+0x32>
	return NULL;
    2988:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    298a:	2e00      	cmp	r6, #0
    298c:	d100      	bne.n	2990 <_spi_m_sync_init+0x38>
    298e:	e082      	b.n	2a96 <_spi_m_sync_init+0x13e>
    2990:	2c00      	cmp	r4, #0
    2992:	d100      	bne.n	2996 <_spi_m_sync_init+0x3e>
    2994:	e07d      	b.n	2a92 <_spi_m_sync_init+0x13a>
    2996:	2001      	movs	r0, #1
    2998:	4a67      	ldr	r2, [pc, #412]	; (2b38 <_spi_m_sync_init+0x1e0>)
    299a:	4968      	ldr	r1, [pc, #416]	; (2b3c <_spi_m_sync_init+0x1e4>)
    299c:	4b68      	ldr	r3, [pc, #416]	; (2b40 <_spi_m_sync_init+0x1e8>)
    299e:	4798      	blx	r3

	if (regs == NULL) {
    29a0:	2d00      	cmp	r5, #0
    29a2:	d100      	bne.n	29a6 <_spi_m_sync_init+0x4e>
    29a4:	e0c0      	b.n	2b28 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    29a6:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    29a8:	07db      	lsls	r3, r3, #31
    29aa:	d421      	bmi.n	29f0 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    29ac:	782a      	ldrb	r2, [r5, #0]
    29ae:	786b      	ldrb	r3, [r5, #1]
    29b0:	021b      	lsls	r3, r3, #8
    29b2:	4313      	orrs	r3, r2
    29b4:	78aa      	ldrb	r2, [r5, #2]
    29b6:	0412      	lsls	r2, r2, #16
    29b8:	4313      	orrs	r3, r2
    29ba:	78ea      	ldrb	r2, [r5, #3]
    29bc:	0612      	lsls	r2, r2, #24
    29be:	431a      	orrs	r2, r3
    29c0:	231c      	movs	r3, #28
    29c2:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    29c4:	69e3      	ldr	r3, [r4, #28]
    29c6:	079b      	lsls	r3, r3, #30
    29c8:	d1fc      	bne.n	29c4 <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    29ca:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    29cc:	079b      	lsls	r3, r3, #30
    29ce:	d509      	bpl.n	29e4 <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    29d0:	6823      	ldr	r3, [r4, #0]
    29d2:	2102      	movs	r1, #2
    29d4:	438b      	bics	r3, r1
    29d6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    29d8:	69e3      	ldr	r3, [r4, #28]
    29da:	079b      	lsls	r3, r3, #30
    29dc:	d1fc      	bne.n	29d8 <_spi_m_sync_init+0x80>
    29de:	69e3      	ldr	r3, [r4, #28]
    29e0:	079b      	lsls	r3, r3, #30
    29e2:	d4fc      	bmi.n	29de <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    29e4:	2301      	movs	r3, #1
    29e6:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    29e8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    29ea:	69e3      	ldr	r3, [r4, #28]
    29ec:	079b      	lsls	r3, r3, #30
    29ee:	d1fc      	bne.n	29ea <_spi_m_sync_init+0x92>
    29f0:	69e3      	ldr	r3, [r4, #28]
    29f2:	07db      	lsls	r3, r3, #31
    29f4:	d4fc      	bmi.n	29f0 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    29f6:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    29f8:	782b      	ldrb	r3, [r5, #0]
    29fa:	786a      	ldrb	r2, [r5, #1]
    29fc:	0212      	lsls	r2, r2, #8
    29fe:	431a      	orrs	r2, r3
    2a00:	78ab      	ldrb	r3, [r5, #2]
    2a02:	041b      	lsls	r3, r3, #16
    2a04:	431a      	orrs	r2, r3
    2a06:	78eb      	ldrb	r3, [r5, #3]
    2a08:	061b      	lsls	r3, r3, #24
    2a0a:	4313      	orrs	r3, r2
    2a0c:	221c      	movs	r2, #28
    2a0e:	4013      	ands	r3, r2
    2a10:	2b08      	cmp	r3, #8
    2a12:	d042      	beq.n	2a9a <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    2a14:	2c00      	cmp	r4, #0
    2a16:	d100      	bne.n	2a1a <_spi_m_sync_init+0xc2>
    2a18:	e082      	b.n	2b20 <_spi_m_sync_init+0x1c8>
    2a1a:	2d00      	cmp	r5, #0
    2a1c:	d100      	bne.n	2a20 <_spi_m_sync_init+0xc8>
    2a1e:	e07d      	b.n	2b1c <_spi_m_sync_init+0x1c4>
    2a20:	2001      	movs	r0, #1
    2a22:	4a48      	ldr	r2, [pc, #288]	; (2b44 <_spi_m_sync_init+0x1ec>)
    2a24:	4945      	ldr	r1, [pc, #276]	; (2b3c <_spi_m_sync_init+0x1e4>)
    2a26:	4b46      	ldr	r3, [pc, #280]	; (2b40 <_spi_m_sync_init+0x1e8>)
    2a28:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2a2a:	782b      	ldrb	r3, [r5, #0]
    2a2c:	786a      	ldrb	r2, [r5, #1]
    2a2e:	0212      	lsls	r2, r2, #8
    2a30:	431a      	orrs	r2, r3
    2a32:	78ab      	ldrb	r3, [r5, #2]
    2a34:	041b      	lsls	r3, r3, #16
    2a36:	431a      	orrs	r2, r3
    2a38:	78eb      	ldrb	r3, [r5, #3]
    2a3a:	061b      	lsls	r3, r3, #24
    2a3c:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2a3e:	4a42      	ldr	r2, [pc, #264]	; (2b48 <_spi_m_sync_init+0x1f0>)
    2a40:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2a42:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a44:	69e3      	ldr	r3, [r4, #28]
    2a46:	079b      	lsls	r3, r3, #30
    2a48:	d1fc      	bne.n	2a44 <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    2a4a:	792b      	ldrb	r3, [r5, #4]
    2a4c:	796a      	ldrb	r2, [r5, #5]
    2a4e:	0212      	lsls	r2, r2, #8
    2a50:	431a      	orrs	r2, r3
    2a52:	79ab      	ldrb	r3, [r5, #6]
    2a54:	041b      	lsls	r3, r3, #16
    2a56:	431a      	orrs	r2, r3
    2a58:	79eb      	ldrb	r3, [r5, #7]
    2a5a:	061b      	lsls	r3, r3, #24
    2a5c:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    2a5e:	4a3b      	ldr	r2, [pc, #236]	; (2b4c <_spi_m_sync_init+0x1f4>)
    2a60:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    2a62:	2280      	movs	r2, #128	; 0x80
    2a64:	0292      	lsls	r2, r2, #10
    2a66:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2a68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a6a:	69e3      	ldr	r3, [r4, #28]
    2a6c:	075b      	lsls	r3, r3, #29
    2a6e:	d1fc      	bne.n	2a6a <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2a70:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2a72:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2a74:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2a76:	2330      	movs	r3, #48	; 0x30
    2a78:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2a7a:	792b      	ldrb	r3, [r5, #4]
    2a7c:	075b      	lsls	r3, r3, #29
    2a7e:	d151      	bne.n	2b24 <_spi_m_sync_init+0x1cc>
    2a80:	2301      	movs	r3, #1
    2a82:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2a84:	7baa      	ldrb	r2, [r5, #14]
    2a86:	7beb      	ldrb	r3, [r5, #15]
    2a88:	021b      	lsls	r3, r3, #8
    2a8a:	4313      	orrs	r3, r2
    2a8c:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2a8e:	2000      	movs	r0, #0
}
    2a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    2a92:	2000      	movs	r0, #0
    2a94:	e780      	b.n	2998 <_spi_m_sync_init+0x40>
    2a96:	2000      	movs	r0, #0
    2a98:	e77e      	b.n	2998 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    2a9a:	2c00      	cmp	r4, #0
    2a9c:	d03c      	beq.n	2b18 <_spi_m_sync_init+0x1c0>
    2a9e:	2d00      	cmp	r5, #0
    2aa0:	d038      	beq.n	2b14 <_spi_m_sync_init+0x1bc>
    2aa2:	2001      	movs	r0, #1
    2aa4:	4a2a      	ldr	r2, [pc, #168]	; (2b50 <_spi_m_sync_init+0x1f8>)
    2aa6:	4925      	ldr	r1, [pc, #148]	; (2b3c <_spi_m_sync_init+0x1e4>)
    2aa8:	4b25      	ldr	r3, [pc, #148]	; (2b40 <_spi_m_sync_init+0x1e8>)
    2aaa:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2aac:	782b      	ldrb	r3, [r5, #0]
    2aae:	786a      	ldrb	r2, [r5, #1]
    2ab0:	0212      	lsls	r2, r2, #8
    2ab2:	431a      	orrs	r2, r3
    2ab4:	78ab      	ldrb	r3, [r5, #2]
    2ab6:	041b      	lsls	r3, r3, #16
    2ab8:	431a      	orrs	r2, r3
    2aba:	78eb      	ldrb	r3, [r5, #3]
    2abc:	061b      	lsls	r3, r3, #24
    2abe:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2ac0:	4a21      	ldr	r2, [pc, #132]	; (2b48 <_spi_m_sync_init+0x1f0>)
    2ac2:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2ac4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ac6:	69e3      	ldr	r3, [r4, #28]
    2ac8:	079b      	lsls	r3, r3, #30
    2aca:	d1fc      	bne.n	2ac6 <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2acc:	792b      	ldrb	r3, [r5, #4]
    2ace:	796a      	ldrb	r2, [r5, #5]
    2ad0:	0212      	lsls	r2, r2, #8
    2ad2:	431a      	orrs	r2, r3
    2ad4:	79ab      	ldrb	r3, [r5, #6]
    2ad6:	041b      	lsls	r3, r3, #16
    2ad8:	431a      	orrs	r2, r3
    2ada:	79eb      	ldrb	r3, [r5, #7]
    2adc:	061b      	lsls	r3, r3, #24
    2ade:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2ae0:	4a1c      	ldr	r2, [pc, #112]	; (2b54 <_spi_m_sync_init+0x1fc>)
    2ae2:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    2ae4:	4a1c      	ldr	r2, [pc, #112]	; (2b58 <_spi_m_sync_init+0x200>)
    2ae6:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2ae8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2aea:	69e3      	ldr	r3, [r4, #28]
    2aec:	075b      	lsls	r3, r3, #29
    2aee:	d1fc      	bne.n	2aea <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2af0:	7a2b      	ldrb	r3, [r5, #8]
    2af2:	7a6a      	ldrb	r2, [r5, #9]
    2af4:	0212      	lsls	r2, r2, #8
    2af6:	431a      	orrs	r2, r3
    2af8:	7aab      	ldrb	r3, [r5, #10]
    2afa:	041b      	lsls	r3, r3, #16
    2afc:	431a      	orrs	r2, r3
    2afe:	7aeb      	ldrb	r3, [r5, #11]
    2b00:	061b      	lsls	r3, r3, #24
    2b02:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2b04:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2b06:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2b08:	2330      	movs	r3, #48	; 0x30
    2b0a:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2b0c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d1fc      	bne.n	2b0c <_spi_m_sync_init+0x1b4>
    2b12:	e7b2      	b.n	2a7a <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    2b14:	2000      	movs	r0, #0
    2b16:	e7c5      	b.n	2aa4 <_spi_m_sync_init+0x14c>
    2b18:	2000      	movs	r0, #0
    2b1a:	e7c3      	b.n	2aa4 <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    2b1c:	2000      	movs	r0, #0
    2b1e:	e780      	b.n	2a22 <_spi_m_sync_init+0xca>
    2b20:	2000      	movs	r0, #0
    2b22:	e77e      	b.n	2a22 <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2b24:	2302      	movs	r3, #2
    2b26:	e7ac      	b.n	2a82 <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    2b28:	200d      	movs	r0, #13
    2b2a:	4240      	negs	r0, r0
    2b2c:	e7b0      	b.n	2a90 <_spi_m_sync_init+0x138>
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	000026d1 	.word	0x000026d1
    2b34:	00007640 	.word	0x00007640
    2b38:	00000952 	.word	0x00000952
    2b3c:	000076b0 	.word	0x000076b0
    2b40:	000021ad 	.word	0x000021ad
    2b44:	00000917 	.word	0x00000917
    2b48:	fffffefc 	.word	0xfffffefc
    2b4c:	fffd1dbf 	.word	0xfffd1dbf
    2b50:	0000092b 	.word	0x0000092b
    2b54:	fffdddbf 	.word	0xfffdddbf
    2b58:	00020240 	.word	0x00020240

00002b5c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b5e:	46ce      	mov	lr, r9
    2b60:	4647      	mov	r7, r8
    2b62:	b580      	push	{r7, lr}
    2b64:	b089      	sub	sp, #36	; 0x24
    2b66:	4681      	mov	r9, r0
    2b68:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    2b6a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2b6c:	680b      	ldr	r3, [r1, #0]
    2b6e:	9303      	str	r3, [sp, #12]
    2b70:	684b      	ldr	r3, [r1, #4]
    2b72:	9304      	str	r3, [sp, #16]
    2b74:	2300      	movs	r3, #0
    2b76:	9305      	str	r3, [sp, #20]
    2b78:	9306      	str	r3, [sp, #24]
    2b7a:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    2b7c:	2800      	cmp	r0, #0
    2b7e:	d014      	beq.n	2baa <_spi_m_sync_trans+0x4e>
    2b80:	2c00      	cmp	r4, #0
    2b82:	d010      	beq.n	2ba6 <_spi_m_sync_trans+0x4a>
    2b84:	2001      	movs	r0, #1
    2b86:	4a37      	ldr	r2, [pc, #220]	; (2c64 <_spi_m_sync_trans+0x108>)
    2b88:	4937      	ldr	r1, [pc, #220]	; (2c68 <_spi_m_sync_trans+0x10c>)
    2b8a:	4b38      	ldr	r3, [pc, #224]	; (2c6c <_spi_m_sync_trans+0x110>)
    2b8c:	4798      	blx	r3
    2b8e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2b90:	075b      	lsls	r3, r3, #29
    2b92:	d164      	bne.n	2c5e <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2b94:	69e3      	ldr	r3, [r4, #28]
    2b96:	079b      	lsls	r3, r3, #30
    2b98:	d1fc      	bne.n	2b94 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2b9a:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2b9c:	079b      	lsls	r3, r3, #30
    2b9e:	d420      	bmi.n	2be2 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    2ba0:	2014      	movs	r0, #20
    2ba2:	4240      	negs	r0, r0
    2ba4:	e056      	b.n	2c54 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    2ba6:	2000      	movs	r0, #0
    2ba8:	e7ed      	b.n	2b86 <_spi_m_sync_trans+0x2a>
    2baa:	2000      	movs	r0, #0
    2bac:	e7eb      	b.n	2b86 <_spi_m_sync_trans+0x2a>
		return false;
    2bae:	2200      	movs	r2, #0
    2bb0:	e02d      	b.n	2c0e <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    2bb2:	7848      	ldrb	r0, [r1, #1]
    2bb4:	0200      	lsls	r0, r0, #8
    2bb6:	4647      	mov	r7, r8
    2bb8:	4307      	orrs	r7, r0
    2bba:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    2bbc:	3102      	adds	r1, #2
    2bbe:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    2bc0:	3201      	adds	r2, #1
    2bc2:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    2bc4:	4642      	mov	r2, r8
    2bc6:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2bc8:	b25b      	sxtb	r3, r3
    2bca:	2b00      	cmp	r3, #0
    2bcc:	db35      	blt.n	2c3a <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    2bce:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    2bd0:	2800      	cmp	r0, #0
    2bd2:	db3a      	blt.n	2c4a <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2bd4:	9805      	ldr	r0, [sp, #20]
    2bd6:	68ab      	ldr	r3, [r5, #8]
    2bd8:	4298      	cmp	r0, r3
    2bda:	d302      	bcc.n	2be2 <_spi_m_sync_trans+0x86>
    2bdc:	9a06      	ldr	r2, [sp, #24]
    2bde:	4293      	cmp	r3, r2
    2be0:	d933      	bls.n	2c4a <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2be2:	7e23      	ldrb	r3, [r4, #24]
    2be4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2be6:	075a      	lsls	r2, r3, #29
    2be8:	d5e1      	bpl.n	2bae <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2bea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2bec:	9a04      	ldr	r2, [sp, #16]
    2bee:	2a00      	cmp	r2, #0
    2bf0:	d008      	beq.n	2c04 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    2bf2:	1c50      	adds	r0, r2, #1
    2bf4:	9004      	str	r0, [sp, #16]
    2bf6:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    2bf8:	2e01      	cmp	r6, #1
    2bfa:	d903      	bls.n	2c04 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2bfc:	1c90      	adds	r0, r2, #2
    2bfe:	9004      	str	r0, [sp, #16]
    2c00:	0a09      	lsrs	r1, r1, #8
    2c02:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    2c04:	9a06      	ldr	r2, [sp, #24]
    2c06:	9201      	str	r2, [sp, #4]
    2c08:	3201      	adds	r2, #1
    2c0a:	9206      	str	r2, [sp, #24]
	return true;
    2c0c:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    2c0e:	2a00      	cmp	r2, #0
    2c10:	d1da      	bne.n	2bc8 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2c12:	9906      	ldr	r1, [sp, #24]
    2c14:	9a05      	ldr	r2, [sp, #20]
    2c16:	4291      	cmp	r1, r2
    2c18:	d3d6      	bcc.n	2bc8 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2c1a:	4649      	mov	r1, r9
    2c1c:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2c1e:	07d9      	lsls	r1, r3, #31
    2c20:	d5d2      	bpl.n	2bc8 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    2c22:	9903      	ldr	r1, [sp, #12]
    2c24:	2900      	cmp	r1, #0
    2c26:	d006      	beq.n	2c36 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    2c28:	1c48      	adds	r0, r1, #1
    2c2a:	9003      	str	r0, [sp, #12]
    2c2c:	7808      	ldrb	r0, [r1, #0]
    2c2e:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    2c30:	2e01      	cmp	r6, #1
    2c32:	d8be      	bhi.n	2bb2 <_spi_m_sync_trans+0x56>
    2c34:	e7c4      	b.n	2bc0 <_spi_m_sync_trans+0x64>
		data = dummy;
    2c36:	4680      	mov	r8, r0
    2c38:	e7c2      	b.n	2bc0 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2c3a:	2301      	movs	r3, #1
    2c3c:	425b      	negs	r3, r3
    2c3e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2c40:	3381      	adds	r3, #129	; 0x81
    2c42:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2c44:	2013      	movs	r0, #19
    2c46:	4240      	negs	r0, r0
    2c48:	e7c2      	b.n	2bd0 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2c4a:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2c4c:	079b      	lsls	r3, r3, #30
    2c4e:	d0fc      	beq.n	2c4a <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2c50:	2303      	movs	r3, #3
    2c52:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2c54:	b009      	add	sp, #36	; 0x24
    2c56:	bc0c      	pop	{r2, r3}
    2c58:	4690      	mov	r8, r2
    2c5a:	4699      	mov	r9, r3
    2c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    2c5e:	2004      	movs	r0, #4
    2c60:	4240      	negs	r0, r0
    2c62:	e7f7      	b.n	2c54 <_spi_m_sync_trans+0xf8>
    2c64:	00000ab2 	.word	0x00000ab2
    2c68:	000076b0 	.word	0x000076b0
    2c6c:	000021ad 	.word	0x000021ad

00002c70 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    2c70:	4a14      	ldr	r2, [pc, #80]	; (2cc4 <_sysctrl_init_sources+0x54>)
    2c72:	2366      	movs	r3, #102	; 0x66
    2c74:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2c76:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    2c78:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2c7a:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2c7c:	0f9b      	lsrs	r3, r3, #30
    2c7e:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2c80:	0409      	lsls	r1, r1, #16
    2c82:	4811      	ldr	r0, [pc, #68]	; (2cc8 <_sysctrl_init_sources+0x58>)
    2c84:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    2c86:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    2c88:	2102      	movs	r1, #2
    2c8a:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2c8c:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    2c8e:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    2c90:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    2c92:	041b      	lsls	r3, r3, #16
    2c94:	21fe      	movs	r1, #254	; 0xfe
    2c96:	03c9      	lsls	r1, r1, #15
    2c98:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    2c9a:	2146      	movs	r1, #70	; 0x46
    2c9c:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    2c9e:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2ca0:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    2ca2:	3927      	subs	r1, #39	; 0x27
    2ca4:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    2ca6:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    2ca8:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <_sysctrl_init_sources+0x54>)
    2caa:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    2cac:	079b      	lsls	r3, r3, #30
    2cae:	d5fb      	bpl.n	2ca8 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    2cb0:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <_sysctrl_init_sources+0x54>)
    2cb2:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    2cb4:	075b      	lsls	r3, r3, #29
    2cb6:	d5fb      	bpl.n	2cb0 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2cb8:	4b02      	ldr	r3, [pc, #8]	; (2cc4 <_sysctrl_init_sources+0x54>)
    2cba:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2cbc:	071b      	lsls	r3, r3, #28
    2cbe:	d5fb      	bpl.n	2cb8 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    2cc0:	4770      	bx	lr
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	40000800 	.word	0x40000800
    2cc8:	0fff0000 	.word	0x0fff0000

00002ccc <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2ccc:	2202      	movs	r2, #2
    2cce:	4b1f      	ldr	r3, [pc, #124]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2cd0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2cd2:	4b1e      	ldr	r3, [pc, #120]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2cd4:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2cd6:	06db      	lsls	r3, r3, #27
    2cd8:	d5fb      	bpl.n	2cd2 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    2cda:	4a1d      	ldr	r2, [pc, #116]	; (2d50 <_sysctrl_init_referenced_generators+0x84>)
    2cdc:	4b1b      	ldr	r3, [pc, #108]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2cde:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2ce0:	4b1c      	ldr	r3, [pc, #112]	; (2d54 <_sysctrl_init_referenced_generators+0x88>)
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	0e9b      	lsrs	r3, r3, #26
    2ce6:	2b3f      	cmp	r3, #63	; 0x3f
    2ce8:	d028      	beq.n	2d3c <_sysctrl_init_referenced_generators+0x70>
    2cea:	029b      	lsls	r3, r3, #10
    2cec:	2280      	movs	r2, #128	; 0x80
    2cee:	0092      	lsls	r2, r2, #2
    2cf0:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    2cf2:	4b16      	ldr	r3, [pc, #88]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2cf4:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2cf6:	2293      	movs	r2, #147	; 0x93
    2cf8:	0052      	lsls	r2, r2, #1
    2cfa:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    2cfc:	2142      	movs	r1, #66	; 0x42
    2cfe:	3ae2      	subs	r2, #226	; 0xe2
    2d00:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    2d02:	4a15      	ldr	r2, [pc, #84]	; (2d58 <_sysctrl_init_referenced_generators+0x8c>)
    2d04:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    2d06:	2200      	movs	r2, #0
    2d08:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2d0c:	075b      	lsls	r3, r3, #29
    2d0e:	d518      	bpl.n	2d42 <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2d10:	4b0e      	ldr	r3, [pc, #56]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2d12:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    2d14:	06db      	lsls	r3, r3, #27
    2d16:	d5fb      	bpl.n	2d10 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    2d18:	2350      	movs	r3, #80	; 0x50
    2d1a:	4a0c      	ldr	r2, [pc, #48]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2d1c:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    2d1e:	075b      	lsls	r3, r3, #29
    2d20:	d407      	bmi.n	2d32 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    2d22:	2350      	movs	r3, #80	; 0x50
    2d24:	5cd3      	ldrb	r3, [r2, r3]
    2d26:	07db      	lsls	r3, r3, #31
    2d28:	d403      	bmi.n	2d32 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    2d2a:	2350      	movs	r3, #80	; 0x50
    2d2c:	5cd3      	ldrb	r3, [r2, r3]
    2d2e:	079b      	lsls	r3, r3, #30
    2d30:	d5f2      	bpl.n	2d18 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    2d32:	4b0a      	ldr	r3, [pc, #40]	; (2d5c <_sysctrl_init_referenced_generators+0x90>)
    2d34:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    2d36:	09db      	lsrs	r3, r3, #7
    2d38:	d1fb      	bne.n	2d32 <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2d3a:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2d3c:	22fc      	movs	r2, #252	; 0xfc
    2d3e:	01d2      	lsls	r2, r2, #7
    2d40:	e7d7      	b.n	2cf2 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2d42:	4b02      	ldr	r3, [pc, #8]	; (2d4c <_sysctrl_init_referenced_generators+0x80>)
    2d44:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2d46:	06db      	lsls	r3, r3, #27
    2d48:	d5fb      	bpl.n	2d42 <_sysctrl_init_referenced_generators+0x76>
    2d4a:	e7e5      	b.n	2d18 <_sysctrl_init_referenced_generators+0x4c>
    2d4c:	40000800 	.word	0x40000800
    2d50:	0401bb80 	.word	0x0401bb80
    2d54:	00806024 	.word	0x00806024
    2d58:	000e05b7 	.word	0x000e05b7
    2d5c:	40000c00 	.word	0x40000c00

00002d60 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2d60:	4b02      	ldr	r3, [pc, #8]	; (2d6c <_system_time_init+0xc>)
    2d62:	4a03      	ldr	r2, [pc, #12]	; (2d70 <_system_time_init+0x10>)
    2d64:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2d66:	2205      	movs	r2, #5
    2d68:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    2d6a:	4770      	bx	lr
    2d6c:	e000e010 	.word	0xe000e010
    2d70:	00ffffff 	.word	0x00ffffff

00002d74 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2d74:	b510      	push	{r4, lr}
	_system_time_init(hw);
    2d76:	4b01      	ldr	r3, [pc, #4]	; (2d7c <_delay_init+0x8>)
    2d78:	4798      	blx	r3
}
    2d7a:	bd10      	pop	{r4, pc}
    2d7c:	00002d61 	.word	0x00002d61

00002d80 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2d80:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2d82:	e00b      	b.n	2d9c <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    2d84:	4b0b      	ldr	r3, [pc, #44]	; (2db4 <_delay_cycles+0x34>)
    2d86:	480c      	ldr	r0, [pc, #48]	; (2db8 <_delay_cycles+0x38>)
    2d88:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2d8a:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2d8c:	4b09      	ldr	r3, [pc, #36]	; (2db4 <_delay_cycles+0x34>)
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	03db      	lsls	r3, r3, #15
    2d92:	d5fb      	bpl.n	2d8c <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    2d94:	4b09      	ldr	r3, [pc, #36]	; (2dbc <_delay_cycles+0x3c>)
    2d96:	469c      	mov	ip, r3
    2d98:	4461      	add	r1, ip
	while (n--) {
    2d9a:	0010      	movs	r0, r2
    2d9c:	1e42      	subs	r2, r0, #1
    2d9e:	b2d2      	uxtb	r2, r2
    2da0:	2800      	cmp	r0, #0
    2da2:	d1ef      	bne.n	2d84 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2da4:	4b03      	ldr	r3, [pc, #12]	; (2db4 <_delay_cycles+0x34>)
    2da6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2da8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2daa:	4b02      	ldr	r3, [pc, #8]	; (2db4 <_delay_cycles+0x34>)
    2dac:	681b      	ldr	r3, [r3, #0]
    2dae:	03db      	lsls	r3, r3, #15
    2db0:	d5fb      	bpl.n	2daa <_delay_cycles+0x2a>
		;
}
    2db2:	4770      	bx	lr
    2db4:	e000e010 	.word	0xe000e010
    2db8:	00ffffff 	.word	0x00ffffff
    2dbc:	ff000001 	.word	0xff000001

00002dc0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2dc0:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2dc2:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2dc4:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2dc6:	07d2      	lsls	r2, r2, #31
    2dc8:	d400      	bmi.n	2dcc <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    2dca:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2dcc:	2201      	movs	r2, #1
    2dce:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    2dd0:	6803      	ldr	r3, [r0, #0]
    2dd2:	4798      	blx	r3
}
    2dd4:	e7f9      	b.n	2dca <tc_interrupt_handler+0xa>
	...

00002dd8 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2dd8:	4b02      	ldr	r3, [pc, #8]	; (2de4 <tc_get_hardware_index+0xc>)
    2dda:	469c      	mov	ip, r3
    2ddc:	4460      	add	r0, ip
    2dde:	0a80      	lsrs	r0, r0, #10
    2de0:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    2de2:	4770      	bx	lr
    2de4:	bdffd400 	.word	0xbdffd400

00002de8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    2de8:	4b06      	ldr	r3, [pc, #24]	; (2e04 <_tc_init_irq_param+0x1c>)
    2dea:	4298      	cmp	r0, r3
    2dec:	d003      	beq.n	2df6 <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2dee:	4b06      	ldr	r3, [pc, #24]	; (2e08 <_tc_init_irq_param+0x20>)
    2df0:	4298      	cmp	r0, r3
    2df2:	d003      	beq.n	2dfc <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    2df4:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    2df6:	4b05      	ldr	r3, [pc, #20]	; (2e0c <_tc_init_irq_param+0x24>)
    2df8:	6019      	str	r1, [r3, #0]
    2dfa:	e7f8      	b.n	2dee <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    2dfc:	4b03      	ldr	r3, [pc, #12]	; (2e0c <_tc_init_irq_param+0x24>)
    2dfe:	6059      	str	r1, [r3, #4]
}
    2e00:	e7f8      	b.n	2df4 <_tc_init_irq_param+0xc>
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	42002c00 	.word	0x42002c00
    2e08:	42003000 	.word	0x42003000
    2e0c:	20000638 	.word	0x20000638

00002e10 <get_tc_index>:
{
    2e10:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    2e12:	4b0e      	ldr	r3, [pc, #56]	; (2e4c <get_tc_index+0x3c>)
    2e14:	4798      	blx	r3
    2e16:	3003      	adds	r0, #3
    2e18:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e1a:	2300      	movs	r3, #0
    2e1c:	2b01      	cmp	r3, #1
    2e1e:	d80b      	bhi.n	2e38 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    2e20:	009a      	lsls	r2, r3, #2
    2e22:	18d2      	adds	r2, r2, r3
    2e24:	0091      	lsls	r1, r2, #2
    2e26:	4a0a      	ldr	r2, [pc, #40]	; (2e50 <get_tc_index+0x40>)
    2e28:	5c8a      	ldrb	r2, [r1, r2]
    2e2a:	4290      	cmp	r0, r2
    2e2c:	d002      	beq.n	2e34 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e2e:	3301      	adds	r3, #1
    2e30:	b2db      	uxtb	r3, r3
    2e32:	e7f3      	b.n	2e1c <get_tc_index+0xc>
			return i;
    2e34:	b258      	sxtb	r0, r3
    2e36:	e007      	b.n	2e48 <get_tc_index+0x38>
	ASSERT(false);
    2e38:	22a4      	movs	r2, #164	; 0xa4
    2e3a:	0052      	lsls	r2, r2, #1
    2e3c:	4905      	ldr	r1, [pc, #20]	; (2e54 <get_tc_index+0x44>)
    2e3e:	2000      	movs	r0, #0
    2e40:	4b05      	ldr	r3, [pc, #20]	; (2e58 <get_tc_index+0x48>)
    2e42:	4798      	blx	r3
	return -1;
    2e44:	2001      	movs	r0, #1
    2e46:	4240      	negs	r0, r0
}
    2e48:	bd10      	pop	{r4, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	00002dd9 	.word	0x00002dd9
    2e50:	000076cc 	.word	0x000076cc
    2e54:	000076f4 	.word	0x000076f4
    2e58:	000021ad 	.word	0x000021ad

00002e5c <_timer_init>:
{
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	0006      	movs	r6, r0
    2e60:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    2e62:	0008      	movs	r0, r1
    2e64:	4b3f      	ldr	r3, [pc, #252]	; (2f64 <_timer_init+0x108>)
    2e66:	4798      	blx	r3
    2e68:	0005      	movs	r5, r0
	device->hw = hw;
    2e6a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2e6c:	228d      	movs	r2, #141	; 0x8d
    2e6e:	493e      	ldr	r1, [pc, #248]	; (2f68 <_timer_init+0x10c>)
    2e70:	2001      	movs	r0, #1
    2e72:	4b3e      	ldr	r3, [pc, #248]	; (2f6c <_timer_init+0x110>)
    2e74:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2e76:	7be3      	ldrb	r3, [r4, #15]
    2e78:	09db      	lsrs	r3, r3, #7
    2e7a:	d1fc      	bne.n	2e76 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2e7c:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2e7e:	079b      	lsls	r3, r3, #30
    2e80:	d504      	bpl.n	2e8c <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e82:	2300      	movs	r3, #0
    2e84:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2e86:	7be3      	ldrb	r3, [r4, #15]
    2e88:	09db      	lsrs	r3, r3, #7
    2e8a:	d1fc      	bne.n	2e86 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e8c:	2301      	movs	r3, #1
    2e8e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2e90:	7be3      	ldrb	r3, [r4, #15]
    2e92:	09db      	lsrs	r3, r3, #7
    2e94:	d1fc      	bne.n	2e90 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2e96:	00aa      	lsls	r2, r5, #2
    2e98:	1952      	adds	r2, r2, r5
    2e9a:	0091      	lsls	r1, r2, #2
    2e9c:	4b34      	ldr	r3, [pc, #208]	; (2f70 <_timer_init+0x114>)
    2e9e:	185b      	adds	r3, r3, r1
    2ea0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2ea2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2ea4:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2ea6:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2ea8:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2eaa:	8163      	strh	r3, [r4, #10]
    2eac:	230c      	movs	r3, #12
    2eae:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2eb0:	2b08      	cmp	r3, #8
    2eb2:	d039      	beq.n	2f28 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	d143      	bne.n	2f40 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2eb8:	4a2d      	ldr	r2, [pc, #180]	; (2f70 <_timer_init+0x114>)
    2eba:	00ab      	lsls	r3, r5, #2
    2ebc:	1958      	adds	r0, r3, r5
    2ebe:	0081      	lsls	r1, r0, #2
    2ec0:	0008      	movs	r0, r1
    2ec2:	1851      	adds	r1, r2, r1
    2ec4:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2ec6:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2ec8:	1812      	adds	r2, r2, r0
    2eca:	8a13      	ldrh	r3, [r2, #16]
    2ecc:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2ece:	2301      	movs	r3, #1
    2ed0:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    2ed2:	0031      	movs	r1, r6
    2ed4:	0020      	movs	r0, r4
    2ed6:	4b27      	ldr	r3, [pc, #156]	; (2f74 <_timer_init+0x118>)
    2ed8:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2eda:	0020      	movs	r0, r4
    2edc:	4b26      	ldr	r3, [pc, #152]	; (2f78 <_timer_init+0x11c>)
    2ede:	4798      	blx	r3
    2ee0:	3012      	adds	r0, #18
    2ee2:	b2c0      	uxtb	r0, r0
    2ee4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	db0a      	blt.n	2f00 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2eea:	211f      	movs	r1, #31
    2eec:	4001      	ands	r1, r0
    2eee:	2201      	movs	r2, #1
    2ef0:	408a      	lsls	r2, r1
    2ef2:	2180      	movs	r1, #128	; 0x80
    2ef4:	4c21      	ldr	r4, [pc, #132]	; (2f7c <_timer_init+0x120>)
    2ef6:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2ef8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2efc:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2f00:	2b00      	cmp	r3, #0
    2f02:	db07      	blt.n	2f14 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f04:	211f      	movs	r1, #31
    2f06:	4001      	ands	r1, r0
    2f08:	2201      	movs	r2, #1
    2f0a:	408a      	lsls	r2, r1
    2f0c:	21c0      	movs	r1, #192	; 0xc0
    2f0e:	0049      	lsls	r1, r1, #1
    2f10:	4c1a      	ldr	r4, [pc, #104]	; (2f7c <_timer_init+0x120>)
    2f12:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2f14:	2b00      	cmp	r3, #0
    2f16:	db05      	blt.n	2f24 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f18:	231f      	movs	r3, #31
    2f1a:	4018      	ands	r0, r3
    2f1c:	3b1e      	subs	r3, #30
    2f1e:	4083      	lsls	r3, r0
    2f20:	4a16      	ldr	r2, [pc, #88]	; (2f7c <_timer_init+0x120>)
    2f22:	6013      	str	r3, [r2, #0]
}
    2f24:	2000      	movs	r0, #0
    2f26:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2f28:	4a11      	ldr	r2, [pc, #68]	; (2f70 <_timer_init+0x114>)
    2f2a:	00ab      	lsls	r3, r5, #2
    2f2c:	1958      	adds	r0, r3, r5
    2f2e:	0081      	lsls	r1, r0, #2
    2f30:	0008      	movs	r0, r1
    2f32:	1851      	adds	r1, r2, r1
    2f34:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2f36:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2f38:	1812      	adds	r2, r2, r0
    2f3a:	6913      	ldr	r3, [r2, #16]
    2f3c:	61e3      	str	r3, [r4, #28]
    2f3e:	e7c6      	b.n	2ece <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2f40:	2b04      	cmp	r3, #4
    2f42:	d1c4      	bne.n	2ece <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2f44:	490a      	ldr	r1, [pc, #40]	; (2f70 <_timer_init+0x114>)
    2f46:	00ab      	lsls	r3, r5, #2
    2f48:	1958      	adds	r0, r3, r5
    2f4a:	0082      	lsls	r2, r0, #2
    2f4c:	188a      	adds	r2, r1, r2
    2f4e:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2f50:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2f52:	7c12      	ldrb	r2, [r2, #16]
    2f54:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2f56:	195d      	adds	r5, r3, r5
    2f58:	00ab      	lsls	r3, r5, #2
    2f5a:	18c9      	adds	r1, r1, r3
    2f5c:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2f5e:	7523      	strb	r3, [r4, #20]
    2f60:	e7b5      	b.n	2ece <_timer_init+0x72>
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	00002e11 	.word	0x00002e11
    2f68:	000076f4 	.word	0x000076f4
    2f6c:	000021ad 	.word	0x000021ad
    2f70:	000076cc 	.word	0x000076cc
    2f74:	00002de9 	.word	0x00002de9
    2f78:	00002dd9 	.word	0x00002dd9
    2f7c:	e000e100 	.word	0xe000e100

00002f80 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2f80:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2f82:	8813      	ldrh	r3, [r2, #0]
    2f84:	2102      	movs	r1, #2
    2f86:	430b      	orrs	r3, r1
    2f88:	b29b      	uxth	r3, r3
    2f8a:	8013      	strh	r3, [r2, #0]
}
    2f8c:	4770      	bx	lr

00002f8e <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2f8e:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2f90:	8813      	ldrh	r3, [r2, #0]
    2f92:	2102      	movs	r1, #2
    2f94:	438b      	bics	r3, r1
    2f96:	8013      	strh	r3, [r2, #0]
}
    2f98:	4770      	bx	lr

00002f9a <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2f9a:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2f9c:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2f9e:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    2fa0:	2001      	movs	r0, #1
    2fa2:	4018      	ands	r0, r3
}
    2fa4:	4770      	bx	lr

00002fa6 <_tc_get_timer>:
}
    2fa6:	2000      	movs	r0, #0
    2fa8:	4770      	bx	lr
	...

00002fac <_timer_set_irq>:
{
    2fac:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    2fae:	68c0      	ldr	r0, [r0, #12]
    2fb0:	4b03      	ldr	r3, [pc, #12]	; (2fc0 <_timer_set_irq+0x14>)
    2fb2:	4798      	blx	r3
    2fb4:	3012      	adds	r0, #18
    2fb6:	b2c0      	uxtb	r0, r0
    2fb8:	4b02      	ldr	r3, [pc, #8]	; (2fc4 <_timer_set_irq+0x18>)
    2fba:	4798      	blx	r3
}
    2fbc:	bd10      	pop	{r4, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	00002dd9 	.word	0x00002dd9
    2fc4:	00002381 	.word	0x00002381

00002fc8 <TC3_Handler>:
{
    2fc8:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    2fca:	4b02      	ldr	r3, [pc, #8]	; (2fd4 <TC3_Handler+0xc>)
    2fcc:	6818      	ldr	r0, [r3, #0]
    2fce:	4b02      	ldr	r3, [pc, #8]	; (2fd8 <TC3_Handler+0x10>)
    2fd0:	4798      	blx	r3
}
    2fd2:	bd10      	pop	{r4, pc}
    2fd4:	20000638 	.word	0x20000638
    2fd8:	00002dc1 	.word	0x00002dc1

00002fdc <TC4_Handler>:
{
    2fdc:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    2fde:	4b02      	ldr	r3, [pc, #8]	; (2fe8 <TC4_Handler+0xc>)
    2fe0:	6858      	ldr	r0, [r3, #4]
    2fe2:	4b02      	ldr	r3, [pc, #8]	; (2fec <TC4_Handler+0x10>)
    2fe4:	4798      	blx	r3
}
    2fe6:	bd10      	pop	{r4, pc}
    2fe8:	20000638 	.word	0x20000638
    2fec:	00002dc1 	.word	0x00002dc1

00002ff0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2ff0:	2000      	movs	r0, #0
    2ff2:	4770      	bx	lr

00002ff4 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2ff4:	4b12      	ldr	r3, [pc, #72]	; (3040 <_usb_load_calib+0x4c>)
    2ff6:	681a      	ldr	r2, [r3, #0]
    2ff8:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    2ffa:	211f      	movs	r1, #31
    2ffc:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2ffe:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    3000:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3002:	0dd0      	lsrs	r0, r2, #23
    3004:	2207      	movs	r2, #7
    3006:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    3008:	2b1f      	cmp	r3, #31
    300a:	d012      	beq.n	3032 <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    300c:	291f      	cmp	r1, #31
    300e:	d012      	beq.n	3036 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    3010:	2a07      	cmp	r2, #7
    3012:	d012      	beq.n	303a <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3014:	019b      	lsls	r3, r3, #6
    3016:	430b      	orrs	r3, r1
    3018:	0312      	lsls	r2, r2, #12
    301a:	4313      	orrs	r3, r2
    301c:	4a09      	ldr	r2, [pc, #36]	; (3044 <_usb_load_calib+0x50>)
    301e:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3020:	78d3      	ldrb	r3, [r2, #3]
    3022:	2103      	movs	r1, #3
    3024:	430b      	orrs	r3, r1
    3026:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3028:	78d3      	ldrb	r3, [r2, #3]
    302a:	210c      	movs	r1, #12
    302c:	430b      	orrs	r3, r1
    302e:	70d3      	strb	r3, [r2, #3]
}
    3030:	4770      	bx	lr
		pad_transn = 5;
    3032:	3b1a      	subs	r3, #26
    3034:	e7ea      	b.n	300c <_usb_load_calib+0x18>
		pad_transp = 29;
    3036:	3902      	subs	r1, #2
    3038:	e7ea      	b.n	3010 <_usb_load_calib+0x1c>
		pad_trim = 5;
    303a:	3a02      	subs	r2, #2
    303c:	e7ea      	b.n	3014 <_usb_load_calib+0x20>
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	00806024 	.word	0x00806024
    3044:	41005000 	.word	0x41005000

00003048 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3048:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    304a:	7c83      	ldrb	r3, [r0, #18]
    304c:	220f      	movs	r2, #15
    304e:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3050:	7cc1      	ldrb	r1, [r0, #19]
    3052:	3a08      	subs	r2, #8
    3054:	400a      	ands	r2, r1

	if (!is_ctrl) {
    3056:	2a01      	cmp	r2, #1
    3058:	d00d      	beq.n	3076 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    305a:	001a      	movs	r2, r3
    305c:	3208      	adds	r2, #8
    305e:	0152      	lsls	r2, r2, #5
    3060:	4919      	ldr	r1, [pc, #100]	; (30c8 <_usb_d_dev_handle_setup+0x80>)
    3062:	468c      	mov	ip, r1
    3064:	4462      	add	r2, ip
    3066:	2110      	movs	r1, #16
    3068:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    306a:	015b      	lsls	r3, r3, #5
    306c:	4a17      	ldr	r2, [pc, #92]	; (30cc <_usb_d_dev_handle_setup+0x84>)
    306e:	4694      	mov	ip, r2
    3070:	4463      	add	r3, ip
    3072:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    3074:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    3076:	064a      	lsls	r2, r1, #25
    3078:	d50c      	bpl.n	3094 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    307a:	7cc2      	ldrb	r2, [r0, #19]
    307c:	2140      	movs	r1, #64	; 0x40
    307e:	438a      	bics	r2, r1
    3080:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3082:	001a      	movs	r2, r3
    3084:	3208      	adds	r2, #8
    3086:	0152      	lsls	r2, r2, #5
    3088:	4c0f      	ldr	r4, [pc, #60]	; (30c8 <_usb_d_dev_handle_setup+0x80>)
    308a:	46a4      	mov	ip, r4
    308c:	4462      	add	r2, ip
    308e:	2480      	movs	r4, #128	; 0x80
    3090:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3092:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    3094:	7cc2      	ldrb	r2, [r0, #19]
    3096:	2108      	movs	r1, #8
    3098:	438a      	bics	r2, r1
    309a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    309c:	015a      	lsls	r2, r3, #5
    309e:	490c      	ldr	r1, [pc, #48]	; (30d0 <_usb_d_dev_handle_setup+0x88>)
    30a0:	1889      	adds	r1, r1, r2
    30a2:	2400      	movs	r4, #0
    30a4:	728c      	strb	r4, [r1, #10]
    30a6:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    30a8:	3308      	adds	r3, #8
    30aa:	015b      	lsls	r3, r3, #5
    30ac:	4906      	ldr	r1, [pc, #24]	; (30c8 <_usb_d_dev_handle_setup+0x80>)
    30ae:	468c      	mov	ip, r1
    30b0:	4463      	add	r3, ip
    30b2:	216f      	movs	r1, #111	; 0x6f
    30b4:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    30b6:	4b05      	ldr	r3, [pc, #20]	; (30cc <_usb_d_dev_handle_setup+0x84>)
    30b8:	469c      	mov	ip, r3
    30ba:	4462      	add	r2, ip
    30bc:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    30be:	4b05      	ldr	r3, [pc, #20]	; (30d4 <_usb_d_dev_handle_setup+0x8c>)
    30c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30c2:	7c80      	ldrb	r0, [r0, #18]
    30c4:	4798      	blx	r3
    30c6:	e7d5      	b.n	3074 <_usb_d_dev_handle_setup+0x2c>
    30c8:	41005000 	.word	0x41005000
    30cc:	41005108 	.word	0x41005108
    30d0:	20000640 	.word	0x20000640
    30d4:	200006c0 	.word	0x200006c0

000030d8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    30d8:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    30da:	7c82      	ldrb	r2, [r0, #18]
    30dc:	230f      	movs	r3, #15
    30de:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    30e0:	2220      	movs	r2, #32
    30e2:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    30e4:	b2d2      	uxtb	r2, r2
    30e6:	015b      	lsls	r3, r3, #5
    30e8:	4905      	ldr	r1, [pc, #20]	; (3100 <_usb_d_dev_handle_stall+0x28>)
    30ea:	468c      	mov	ip, r1
    30ec:	4463      	add	r3, ip
    30ee:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    30f0:	4b04      	ldr	r3, [pc, #16]	; (3104 <_usb_d_dev_handle_stall+0x2c>)
    30f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    30f4:	6882      	ldr	r2, [r0, #8]
    30f6:	7c80      	ldrb	r0, [r0, #18]
    30f8:	2101      	movs	r1, #1
    30fa:	4798      	blx	r3
}
    30fc:	bd10      	pop	{r4, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	41005108 	.word	0x41005108
    3104:	200006c0 	.word	0x200006c0

00003108 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3108:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    310a:	7c83      	ldrb	r3, [r0, #18]
    310c:	2bff      	cmp	r3, #255	; 0xff
    310e:	d002      	beq.n	3116 <_usb_d_dev_trans_done+0xe>
    3110:	7cc2      	ldrb	r2, [r0, #19]
    3112:	0652      	lsls	r2, r2, #25
    3114:	d400      	bmi.n	3118 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    3116:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    3118:	7cc2      	ldrb	r2, [r0, #19]
    311a:	2440      	movs	r4, #64	; 0x40
    311c:	43a2      	bics	r2, r4
    311e:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3120:	4a02      	ldr	r2, [pc, #8]	; (312c <_usb_d_dev_trans_done+0x24>)
    3122:	6b14      	ldr	r4, [r2, #48]	; 0x30
    3124:	6882      	ldr	r2, [r0, #8]
    3126:	0018      	movs	r0, r3
    3128:	47a0      	blx	r4
    312a:	e7f4      	b.n	3116 <_usb_d_dev_trans_done+0xe>
    312c:	200006c0 	.word	0x200006c0

00003130 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3130:	b5f0      	push	{r4, r5, r6, r7, lr}
    3132:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3134:	7c84      	ldrb	r4, [r0, #18]
    3136:	230f      	movs	r3, #15
    3138:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    313a:	4d18      	ldr	r5, [pc, #96]	; (319c <_usb_d_dev_trans_stop+0x6c>)
    313c:	882e      	ldrh	r6, [r5, #0]
    313e:	ad01      	add	r5, sp, #4
    3140:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3142:	2cff      	cmp	r4, #255	; 0xff
    3144:	d01e      	beq.n	3184 <_usb_d_dev_trans_stop+0x54>
    3146:	7cc4      	ldrb	r4, [r0, #19]
    3148:	0664      	lsls	r4, r4, #25
    314a:	d51b      	bpl.n	3184 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    314c:	2900      	cmp	r1, #0
    314e:	d01b      	beq.n	3188 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3150:	001c      	movs	r4, r3
    3152:	3408      	adds	r4, #8
    3154:	0164      	lsls	r4, r4, #5
    3156:	4d12      	ldr	r5, [pc, #72]	; (31a0 <_usb_d_dev_trans_stop+0x70>)
    3158:	46ac      	mov	ip, r5
    315a:	4464      	add	r4, ip
    315c:	2580      	movs	r5, #128	; 0x80
    315e:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3160:	ad01      	add	r5, sp, #4
    3162:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3164:	001c      	movs	r4, r3
    3166:	3408      	adds	r4, #8
    3168:	0164      	lsls	r4, r4, #5
    316a:	4f0d      	ldr	r7, [pc, #52]	; (31a0 <_usb_d_dev_trans_stop+0x70>)
    316c:	46bc      	mov	ip, r7
    316e:	4464      	add	r4, ip
    3170:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    3172:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3174:	015b      	lsls	r3, r3, #5
    3176:	4c0b      	ldr	r4, [pc, #44]	; (31a4 <_usb_d_dev_trans_stop+0x74>)
    3178:	46a4      	mov	ip, r4
    317a:	4463      	add	r3, ip
    317c:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    317e:	0011      	movs	r1, r2
    3180:	4b09      	ldr	r3, [pc, #36]	; (31a8 <_usb_d_dev_trans_stop+0x78>)
    3182:	4798      	blx	r3
}
    3184:	b003      	add	sp, #12
    3186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3188:	001c      	movs	r4, r3
    318a:	3408      	adds	r4, #8
    318c:	0164      	lsls	r4, r4, #5
    318e:	4d04      	ldr	r5, [pc, #16]	; (31a0 <_usb_d_dev_trans_stop+0x70>)
    3190:	46ac      	mov	ip, r5
    3192:	4464      	add	r4, ip
    3194:	2540      	movs	r5, #64	; 0x40
    3196:	7165      	strb	r5, [r4, #5]
    3198:	e7e2      	b.n	3160 <_usb_d_dev_trans_stop+0x30>
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	00007708 	.word	0x00007708
    31a0:	41005000 	.word	0x41005000
    31a4:	41005108 	.word	0x41005108
    31a8:	00003109 	.word	0x00003109

000031ac <_usb_d_dev_handle_trfail>:
{
    31ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ae:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    31b0:	7c83      	ldrb	r3, [r0, #18]
    31b2:	220f      	movs	r2, #15
    31b4:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    31b6:	4a3c      	ldr	r2, [pc, #240]	; (32a8 <_usb_d_dev_handle_trfail+0xfc>)
    31b8:	8894      	ldrh	r4, [r2, #4]
    31ba:	aa01      	add	r2, sp, #4
    31bc:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    31be:	015a      	lsls	r2, r3, #5
    31c0:	4c3a      	ldr	r4, [pc, #232]	; (32ac <_usb_d_dev_handle_trfail+0x100>)
    31c2:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    31c4:	2900      	cmp	r1, #0
    31c6:	d033      	beq.n	3230 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    31c8:	001a      	movs	r2, r3
    31ca:	3208      	adds	r2, #8
    31cc:	0152      	lsls	r2, r2, #5
    31ce:	4d38      	ldr	r5, [pc, #224]	; (32b0 <_usb_d_dev_handle_trfail+0x104>)
    31d0:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    31d2:	0912      	lsrs	r2, r2, #4
    31d4:	2507      	movs	r5, #7
    31d6:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    31d8:	7cc2      	ldrb	r2, [r0, #19]
    31da:	2607      	movs	r6, #7
    31dc:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    31de:	010a      	lsls	r2, r1, #4
    31e0:	18a2      	adds	r2, r4, r2
    31e2:	7a94      	ldrb	r4, [r2, #10]
    31e4:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    31e6:	2d02      	cmp	r5, #2
    31e8:	d02a      	beq.n	3240 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    31ea:	07a4      	lsls	r4, r4, #30
    31ec:	d544      	bpl.n	3278 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    31ee:	7a94      	ldrb	r4, [r2, #10]
    31f0:	2502      	movs	r5, #2
    31f2:	43ac      	bics	r4, r5
    31f4:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    31f6:	ac01      	add	r4, sp, #4
    31f8:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    31fa:	001a      	movs	r2, r3
    31fc:	3208      	adds	r2, #8
    31fe:	0152      	lsls	r2, r2, #5
    3200:	4f2b      	ldr	r7, [pc, #172]	; (32b0 <_usb_d_dev_handle_trfail+0x104>)
    3202:	46bc      	mov	ip, r7
    3204:	4462      	add	r2, ip
    3206:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3208:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    320a:	015b      	lsls	r3, r3, #5
    320c:	4c29      	ldr	r4, [pc, #164]	; (32b4 <_usb_d_dev_handle_trfail+0x108>)
    320e:	46a4      	mov	ip, r4
    3210:	4463      	add	r3, ip
    3212:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3214:	2e01      	cmp	r6, #1
    3216:	d145      	bne.n	32a4 <_usb_d_dev_handle_trfail+0xf8>
    3218:	7cc3      	ldrb	r3, [r0, #19]
    321a:	065b      	lsls	r3, r3, #25
    321c:	d542      	bpl.n	32a4 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    321e:	7cc3      	ldrb	r3, [r0, #19]
    3220:	09db      	lsrs	r3, r3, #7
    3222:	4299      	cmp	r1, r3
    3224:	d03e      	beq.n	32a4 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3226:	2200      	movs	r2, #0
    3228:	0019      	movs	r1, r3
    322a:	4b23      	ldr	r3, [pc, #140]	; (32b8 <_usb_d_dev_handle_trfail+0x10c>)
    322c:	4798      	blx	r3
    322e:	e039      	b.n	32a4 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3230:	001a      	movs	r2, r3
    3232:	3208      	adds	r2, #8
    3234:	0152      	lsls	r2, r2, #5
    3236:	4d1e      	ldr	r5, [pc, #120]	; (32b0 <_usb_d_dev_handle_trfail+0x104>)
    3238:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    323a:	2207      	movs	r2, #7
    323c:	4015      	ands	r5, r2
    323e:	e7cb      	b.n	31d8 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3240:	07e5      	lsls	r5, r4, #31
    3242:	d5d2      	bpl.n	31ea <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3244:	7a94      	ldrb	r4, [r2, #10]
    3246:	2501      	movs	r5, #1
    3248:	43ac      	bics	r4, r5
    324a:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    324c:	ac01      	add	r4, sp, #4
    324e:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3250:	001a      	movs	r2, r3
    3252:	3208      	adds	r2, #8
    3254:	0152      	lsls	r2, r2, #5
    3256:	4e16      	ldr	r6, [pc, #88]	; (32b0 <_usb_d_dev_handle_trfail+0x104>)
    3258:	46b4      	mov	ip, r6
    325a:	4462      	add	r2, ip
    325c:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    325e:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3260:	015b      	lsls	r3, r3, #5
    3262:	4c14      	ldr	r4, [pc, #80]	; (32b4 <_usb_d_dev_handle_trfail+0x108>)
    3264:	46a4      	mov	ip, r4
    3266:	4463      	add	r3, ip
    3268:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    326a:	1e4b      	subs	r3, r1, #1
    326c:	4199      	sbcs	r1, r3
    326e:	b2c9      	uxtb	r1, r1
    3270:	2204      	movs	r2, #4
    3272:	4b11      	ldr	r3, [pc, #68]	; (32b8 <_usb_d_dev_handle_trfail+0x10c>)
    3274:	4798      	blx	r3
    3276:	e015      	b.n	32a4 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    3278:	005a      	lsls	r2, r3, #1
    327a:	1852      	adds	r2, r2, r1
    327c:	0112      	lsls	r2, r2, #4
    327e:	480b      	ldr	r0, [pc, #44]	; (32ac <_usb_d_dev_handle_trfail+0x100>)
    3280:	1882      	adds	r2, r0, r2
    3282:	2000      	movs	r0, #0
    3284:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3286:	a801      	add	r0, sp, #4
    3288:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    328a:	001a      	movs	r2, r3
    328c:	3208      	adds	r2, #8
    328e:	0152      	lsls	r2, r2, #5
    3290:	4d07      	ldr	r5, [pc, #28]	; (32b0 <_usb_d_dev_handle_trfail+0x104>)
    3292:	46ac      	mov	ip, r5
    3294:	4462      	add	r2, ip
    3296:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3298:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    329a:	015b      	lsls	r3, r3, #5
    329c:	4905      	ldr	r1, [pc, #20]	; (32b4 <_usb_d_dev_handle_trfail+0x108>)
    329e:	468c      	mov	ip, r1
    32a0:	4463      	add	r3, ip
    32a2:	701a      	strb	r2, [r3, #0]
}
    32a4:	b003      	add	sp, #12
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a8:	00007708 	.word	0x00007708
    32ac:	20000640 	.word	0x20000640
    32b0:	41005000 	.word	0x41005000
    32b4:	41005108 	.word	0x41005108
    32b8:	00003131 	.word	0x00003131

000032bc <_usb_d_dev_reset_epts>:
{
    32bc:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    32be:	2500      	movs	r5, #0
    32c0:	e018      	b.n	32f4 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    32c2:	4c10      	ldr	r4, [pc, #64]	; (3304 <_usb_d_dev_reset_epts+0x48>)
    32c4:	3420      	adds	r4, #32
    32c6:	00ae      	lsls	r6, r5, #2
    32c8:	1973      	adds	r3, r6, r5
    32ca:	0098      	lsls	r0, r3, #2
    32cc:	3010      	adds	r0, #16
    32ce:	1820      	adds	r0, r4, r0
    32d0:	3004      	adds	r0, #4
    32d2:	2103      	movs	r1, #3
    32d4:	4b0c      	ldr	r3, [pc, #48]	; (3308 <_usb_d_dev_reset_epts+0x4c>)
    32d6:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    32d8:	1972      	adds	r2, r6, r5
    32da:	0093      	lsls	r3, r2, #2
    32dc:	18e3      	adds	r3, r4, r3
    32de:	3326      	adds	r3, #38	; 0x26
    32e0:	22ff      	movs	r2, #255	; 0xff
    32e2:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    32e4:	1976      	adds	r6, r6, r5
    32e6:	00b3      	lsls	r3, r6, #2
    32e8:	18e4      	adds	r4, r4, r3
    32ea:	3427      	adds	r4, #39	; 0x27
    32ec:	2300      	movs	r3, #0
    32ee:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    32f0:	3501      	adds	r5, #1
    32f2:	b2ed      	uxtb	r5, r5
    32f4:	2d08      	cmp	r5, #8
    32f6:	d9e4      	bls.n	32c2 <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    32f8:	22a0      	movs	r2, #160	; 0xa0
    32fa:	2100      	movs	r1, #0
    32fc:	4803      	ldr	r0, [pc, #12]	; (330c <_usb_d_dev_reset_epts+0x50>)
    32fe:	4b04      	ldr	r3, [pc, #16]	; (3310 <_usb_d_dev_reset_epts+0x54>)
    3300:	4798      	blx	r3
}
    3302:	bd70      	pop	{r4, r5, r6, pc}
    3304:	200006c0 	.word	0x200006c0
    3308:	00003109 	.word	0x00003109
    330c:	20000640 	.word	0x20000640
    3310:	00007265 	.word	0x00007265

00003314 <_usb_d_dev_in_next>:
{
    3314:	b5f0      	push	{r4, r5, r6, r7, lr}
    3316:	46c6      	mov	lr, r8
    3318:	b500      	push	{lr}
    331a:	0005      	movs	r5, r0
    331c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    331e:	7c83      	ldrb	r3, [r0, #18]
    3320:	240f      	movs	r4, #15
    3322:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    3324:	0162      	lsls	r2, r4, #5
    3326:	4b56      	ldr	r3, [pc, #344]	; (3480 <_usb_d_dev_in_next+0x16c>)
    3328:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    332a:	2900      	cmp	r1, #0
    332c:	d058      	beq.n	33e0 <_usb_d_dev_in_next+0xcc>
    332e:	6959      	ldr	r1, [r3, #20]
    3330:	0489      	lsls	r1, r1, #18
    3332:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    3334:	8a2b      	ldrh	r3, [r5, #16]
    3336:	4a53      	ldr	r2, [pc, #332]	; (3484 <_usb_d_dev_in_next+0x170>)
    3338:	4293      	cmp	r3, r2
    333a:	d053      	beq.n	33e4 <_usb_d_dev_in_next+0xd0>
    333c:	3b01      	subs	r3, #1
    333e:	b21b      	sxth	r3, r3
    3340:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3342:	7cea      	ldrb	r2, [r5, #19]
    3344:	2707      	movs	r7, #7
    3346:	4017      	ands	r7, r2
	if (isr) {
    3348:	2e00      	cmp	r6, #0
    334a:	d007      	beq.n	335c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    334c:	0022      	movs	r2, r4
    334e:	3208      	adds	r2, #8
    3350:	0152      	lsls	r2, r2, #5
    3352:	484d      	ldr	r0, [pc, #308]	; (3488 <_usb_d_dev_in_next+0x174>)
    3354:	4684      	mov	ip, r0
    3356:	4462      	add	r2, ip
    3358:	2002      	movs	r0, #2
    335a:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    335c:	68aa      	ldr	r2, [r5, #8]
    335e:	4694      	mov	ip, r2
    3360:	4461      	add	r1, ip
    3362:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    3364:	686a      	ldr	r2, [r5, #4]
    3366:	4291      	cmp	r1, r2
    3368:	d24e      	bcs.n	3408 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    336a:	b292      	uxth	r2, r2
    336c:	b28b      	uxth	r3, r1
    336e:	1ad2      	subs	r2, r2, r3
    3370:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    3372:	7ceb      	ldrb	r3, [r5, #19]
    3374:	069b      	lsls	r3, r3, #26
    3376:	d537      	bpl.n	33e8 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    3378:	8a2b      	ldrh	r3, [r5, #16]
    337a:	4698      	mov	r8, r3
    337c:	429a      	cmp	r2, r3
    337e:	d800      	bhi.n	3382 <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    3380:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    3382:	682b      	ldr	r3, [r5, #0]
    3384:	469c      	mov	ip, r3
    3386:	4461      	add	r1, ip
    3388:	4642      	mov	r2, r8
    338a:	68e8      	ldr	r0, [r5, #12]
    338c:	4b3f      	ldr	r3, [pc, #252]	; (348c <_usb_d_dev_in_next+0x178>)
    338e:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3390:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    3392:	0162      	lsls	r2, r4, #5
    3394:	4b3a      	ldr	r3, [pc, #232]	; (3480 <_usb_d_dev_in_next+0x16c>)
    3396:	189b      	adds	r3, r3, r2
    3398:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    339a:	0163      	lsls	r3, r4, #5
    339c:	4a38      	ldr	r2, [pc, #224]	; (3480 <_usb_d_dev_in_next+0x16c>)
    339e:	18d2      	adds	r2, r2, r3
    33a0:	6951      	ldr	r1, [r2, #20]
    33a2:	4643      	mov	r3, r8
    33a4:	049b      	lsls	r3, r3, #18
    33a6:	0c9b      	lsrs	r3, r3, #18
    33a8:	0b89      	lsrs	r1, r1, #14
    33aa:	0389      	lsls	r1, r1, #14
    33ac:	430b      	orrs	r3, r1
    33ae:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    33b0:	6951      	ldr	r1, [r2, #20]
    33b2:	4b37      	ldr	r3, [pc, #220]	; (3490 <_usb_d_dev_in_next+0x17c>)
    33b4:	400b      	ands	r3, r1
    33b6:	6153      	str	r3, [r2, #20]
	if (!isr) {
    33b8:	2e00      	cmp	r6, #0
    33ba:	d107      	bne.n	33cc <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    33bc:	2f01      	cmp	r7, #1
    33be:	d05d      	beq.n	347c <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    33c0:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    33c2:	0163      	lsls	r3, r4, #5
    33c4:	4933      	ldr	r1, [pc, #204]	; (3494 <_usb_d_dev_in_next+0x180>)
    33c6:	468c      	mov	ip, r1
    33c8:	4463      	add	r3, ip
    33ca:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    33cc:	3408      	adds	r4, #8
    33ce:	0164      	lsls	r4, r4, #5
    33d0:	4b2d      	ldr	r3, [pc, #180]	; (3488 <_usb_d_dev_in_next+0x174>)
    33d2:	469c      	mov	ip, r3
    33d4:	4464      	add	r4, ip
    33d6:	2380      	movs	r3, #128	; 0x80
    33d8:	7163      	strb	r3, [r4, #5]
}
    33da:	bc04      	pop	{r2}
    33dc:	4690      	mov	r8, r2
    33de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    33e0:	2100      	movs	r1, #0
    33e2:	e7a7      	b.n	3334 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    33e4:	b21b      	sxth	r3, r3
    33e6:	e7ab      	b.n	3340 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    33e8:	2380      	movs	r3, #128	; 0x80
    33ea:	019b      	lsls	r3, r3, #6
    33ec:	429a      	cmp	r2, r3
    33ee:	d807      	bhi.n	3400 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    33f0:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    33f2:	682b      	ldr	r3, [r5, #0]
    33f4:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    33f6:	0162      	lsls	r2, r4, #5
    33f8:	4b21      	ldr	r3, [pc, #132]	; (3480 <_usb_d_dev_in_next+0x16c>)
    33fa:	189b      	adds	r3, r3, r2
    33fc:	6119      	str	r1, [r3, #16]
    33fe:	e7cc      	b.n	339a <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    3400:	2380      	movs	r3, #128	; 0x80
    3402:	019b      	lsls	r3, r3, #6
    3404:	4698      	mov	r8, r3
    3406:	e7f4      	b.n	33f2 <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    3408:	7cea      	ldrb	r2, [r5, #19]
    340a:	06d2      	lsls	r2, r2, #27
    340c:	d50f      	bpl.n	342e <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    340e:	7ceb      	ldrb	r3, [r5, #19]
    3410:	2210      	movs	r2, #16
    3412:	4393      	bics	r3, r2
    3414:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3416:	0162      	lsls	r2, r4, #5
    3418:	4b19      	ldr	r3, [pc, #100]	; (3480 <_usb_d_dev_in_next+0x16c>)
    341a:	189b      	adds	r3, r3, r2
    341c:	695a      	ldr	r2, [r3, #20]
    341e:	0b92      	lsrs	r2, r2, #14
    3420:	0391      	lsls	r1, r2, #14
    3422:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3424:	6959      	ldr	r1, [r3, #20]
    3426:	4a1a      	ldr	r2, [pc, #104]	; (3490 <_usb_d_dev_in_next+0x17c>)
    3428:	400a      	ands	r2, r1
    342a:	615a      	str	r2, [r3, #20]
    342c:	e7c4      	b.n	33b8 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    342e:	2f01      	cmp	r7, #1
    3430:	d00d      	beq.n	344e <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3432:	0164      	lsls	r4, r4, #5
    3434:	4a18      	ldr	r2, [pc, #96]	; (3498 <_usb_d_dev_in_next+0x184>)
    3436:	4694      	mov	ip, r2
    3438:	4464      	add	r4, ip
    343a:	224a      	movs	r2, #74	; 0x4a
    343c:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    343e:	8a2a      	ldrh	r2, [r5, #16]
    3440:	4293      	cmp	r3, r2
    3442:	d00b      	beq.n	345c <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    3444:	2100      	movs	r1, #0
    3446:	0028      	movs	r0, r5
    3448:	4b14      	ldr	r3, [pc, #80]	; (349c <_usb_d_dev_in_next+0x188>)
    344a:	4798      	blx	r3
	return;
    344c:	e7c5      	b.n	33da <_usb_d_dev_in_next+0xc6>
    344e:	0164      	lsls	r4, r4, #5
    3450:	4a11      	ldr	r2, [pc, #68]	; (3498 <_usb_d_dev_in_next+0x184>)
    3452:	4694      	mov	ip, r2
    3454:	4464      	add	r4, ip
    3456:	224b      	movs	r2, #75	; 0x4b
    3458:	7022      	strb	r2, [r4, #0]
    345a:	e7f0      	b.n	343e <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    345c:	7ceb      	ldrb	r3, [r5, #19]
    345e:	2240      	movs	r2, #64	; 0x40
    3460:	4393      	bics	r3, r2
    3462:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    3464:	4b0e      	ldr	r3, [pc, #56]	; (34a0 <_usb_d_dev_in_next+0x18c>)
    3466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3468:	7ca8      	ldrb	r0, [r5, #18]
    346a:	68a9      	ldr	r1, [r5, #8]
    346c:	4798      	blx	r3
    346e:	2800      	cmp	r0, #0
    3470:	d1b3      	bne.n	33da <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    3472:	7ceb      	ldrb	r3, [r5, #19]
    3474:	2240      	movs	r2, #64	; 0x40
    3476:	4313      	orrs	r3, r2
    3478:	74eb      	strb	r3, [r5, #19]
    347a:	e7e3      	b.n	3444 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    347c:	224e      	movs	r2, #78	; 0x4e
    347e:	e7a0      	b.n	33c2 <_usb_d_dev_in_next+0xae>
    3480:	20000640 	.word	0x20000640
    3484:	000003ff 	.word	0x000003ff
    3488:	41005000 	.word	0x41005000
    348c:	000071e1 	.word	0x000071e1
    3490:	f0003fff 	.word	0xf0003fff
    3494:	41005109 	.word	0x41005109
    3498:	41005108 	.word	0x41005108
    349c:	00003109 	.word	0x00003109
    34a0:	200006c0 	.word	0x200006c0

000034a4 <_usb_d_dev_out_next>:
{
    34a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34a6:	46de      	mov	lr, fp
    34a8:	4657      	mov	r7, sl
    34aa:	464e      	mov	r6, r9
    34ac:	4645      	mov	r5, r8
    34ae:	b5e0      	push	{r5, r6, r7, lr}
    34b0:	0004      	movs	r4, r0
    34b2:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    34b4:	7c83      	ldrb	r3, [r0, #18]
    34b6:	250f      	movs	r5, #15
    34b8:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    34ba:	2900      	cmp	r1, #0
    34bc:	d059      	beq.n	3572 <_usb_d_dev_out_next+0xce>
    34be:	016a      	lsls	r2, r5, #5
    34c0:	4b71      	ldr	r3, [pc, #452]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    34c2:	189b      	adds	r3, r3, r2
    34c4:	685b      	ldr	r3, [r3, #4]
    34c6:	011b      	lsls	r3, r3, #4
    34c8:	0c9b      	lsrs	r3, r3, #18
    34ca:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    34cc:	2f00      	cmp	r7, #0
    34ce:	d053      	beq.n	3578 <_usb_d_dev_out_next+0xd4>
    34d0:	016a      	lsls	r2, r5, #5
    34d2:	4b6d      	ldr	r3, [pc, #436]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    34d4:	189b      	adds	r3, r3, r2
    34d6:	685b      	ldr	r3, [r3, #4]
    34d8:	049b      	lsls	r3, r3, #18
    34da:	0c9b      	lsrs	r3, r3, #18
    34dc:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    34de:	8a26      	ldrh	r6, [r4, #16]
    34e0:	4b6a      	ldr	r3, [pc, #424]	; (368c <_usb_d_dev_out_next+0x1e8>)
    34e2:	429e      	cmp	r6, r3
    34e4:	d001      	beq.n	34ea <_usb_d_dev_out_next+0x46>
    34e6:	3e01      	subs	r6, #1
    34e8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    34ea:	4643      	mov	r3, r8
    34ec:	4033      	ands	r3, r6
    34ee:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    34f0:	7ce3      	ldrb	r3, [r4, #19]
    34f2:	2207      	movs	r2, #7
    34f4:	401a      	ands	r2, r3
    34f6:	4691      	mov	r9, r2
	if (isr) {
    34f8:	2f00      	cmp	r7, #0
    34fa:	d007      	beq.n	350c <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34fc:	002b      	movs	r3, r5
    34fe:	3308      	adds	r3, #8
    3500:	015b      	lsls	r3, r3, #5
    3502:	4a63      	ldr	r2, [pc, #396]	; (3690 <_usb_d_dev_out_next+0x1ec>)
    3504:	4694      	mov	ip, r2
    3506:	4463      	add	r3, ip
    3508:	2201      	movs	r2, #1
    350a:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    350c:	7ce3      	ldrb	r3, [r4, #19]
    350e:	069b      	lsls	r3, r3, #26
    3510:	d511      	bpl.n	3536 <_usb_d_dev_out_next+0x92>
    3512:	6862      	ldr	r2, [r4, #4]
    3514:	2a00      	cmp	r2, #0
    3516:	d00e      	beq.n	3536 <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    3518:	b292      	uxth	r2, r2
    351a:	8923      	ldrh	r3, [r4, #8]
    351c:	1ad2      	subs	r2, r2, r3
    351e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    3520:	6823      	ldr	r3, [r4, #0]
    3522:	68a1      	ldr	r1, [r4, #8]
    3524:	468c      	mov	ip, r1
    3526:	4463      	add	r3, ip
    3528:	0018      	movs	r0, r3
    352a:	68e1      	ldr	r1, [r4, #12]
    352c:	4593      	cmp	fp, r2
    352e:	d200      	bcs.n	3532 <_usb_d_dev_out_next+0x8e>
    3530:	465a      	mov	r2, fp
    3532:	4b58      	ldr	r3, [pc, #352]	; (3694 <_usb_d_dev_out_next+0x1f0>)
    3534:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3536:	6863      	ldr	r3, [r4, #4]
    3538:	2b00      	cmp	r3, #0
    353a:	d120      	bne.n	357e <_usb_d_dev_out_next+0xda>
    353c:	7ce2      	ldrb	r2, [r4, #19]
    353e:	06d2      	lsls	r2, r2, #27
    3540:	d51d      	bpl.n	357e <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    3542:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    3544:	2210      	movs	r2, #16
    3546:	4393      	bics	r3, r2
    3548:	2220      	movs	r2, #32
    354a:	4313      	orrs	r3, r2
    354c:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    354e:	494e      	ldr	r1, [pc, #312]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    3550:	016a      	lsls	r2, r5, #5
    3552:	68e3      	ldr	r3, [r4, #12]
    3554:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    3556:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3558:	188a      	adds	r2, r1, r2
    355a:	6851      	ldr	r1, [r2, #4]
    355c:	049b      	lsls	r3, r3, #18
    355e:	091b      	lsrs	r3, r3, #4
    3560:	484d      	ldr	r0, [pc, #308]	; (3698 <_usb_d_dev_out_next+0x1f4>)
    3562:	4001      	ands	r1, r0
    3564:	430b      	orrs	r3, r1
    3566:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3568:	6853      	ldr	r3, [r2, #4]
    356a:	0b9b      	lsrs	r3, r3, #14
    356c:	0399      	lsls	r1, r3, #14
    356e:	6051      	str	r1, [r2, #4]
    3570:	e047      	b.n	3602 <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3572:	2300      	movs	r3, #0
    3574:	469a      	mov	sl, r3
    3576:	e7a9      	b.n	34cc <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3578:	2300      	movs	r3, #0
    357a:	4698      	mov	r8, r3
    357c:	e7af      	b.n	34de <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    357e:	2f00      	cmp	r7, #0
    3580:	d01d      	beq.n	35be <_usb_d_dev_out_next+0x11a>
    3582:	8a22      	ldrh	r2, [r4, #16]
    3584:	4593      	cmp	fp, r2
    3586:	d21a      	bcs.n	35be <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    3588:	7ce3      	ldrb	r3, [r4, #19]
    358a:	2210      	movs	r2, #16
    358c:	4393      	bics	r3, r2
    358e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3590:	68a3      	ldr	r3, [r4, #8]
    3592:	4443      	add	r3, r8
    3594:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    3596:	464b      	mov	r3, r9
    3598:	2b01      	cmp	r3, #1
    359a:	d066      	beq.n	366a <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    359c:	016b      	lsls	r3, r5, #5
    359e:	4a3f      	ldr	r2, [pc, #252]	; (369c <_usb_d_dev_out_next+0x1f8>)
    35a0:	4694      	mov	ip, r2
    35a2:	4463      	add	r3, ip
    35a4:	2225      	movs	r2, #37	; 0x25
    35a6:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    35a8:	2d00      	cmp	r5, #0
    35aa:	d103      	bne.n	35b4 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    35ac:	016d      	lsls	r5, r5, #5
    35ae:	4b36      	ldr	r3, [pc, #216]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    35b0:	68e2      	ldr	r2, [r4, #12]
    35b2:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    35b4:	2100      	movs	r1, #0
    35b6:	0020      	movs	r0, r4
    35b8:	4b39      	ldr	r3, [pc, #228]	; (36a0 <_usb_d_dev_out_next+0x1fc>)
    35ba:	4798      	blx	r3
	return;
    35bc:	e033      	b.n	3626 <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    35be:	68a2      	ldr	r2, [r4, #8]
    35c0:	4452      	add	r2, sl
    35c2:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    35c4:	4293      	cmp	r3, r2
    35c6:	d9e6      	bls.n	3596 <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    35c8:	b29b      	uxth	r3, r3
    35ca:	b291      	uxth	r1, r2
    35cc:	1a5b      	subs	r3, r3, r1
    35ce:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    35d0:	7ce1      	ldrb	r1, [r4, #19]
    35d2:	0689      	lsls	r1, r1, #26
    35d4:	d52d      	bpl.n	3632 <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    35d6:	8a21      	ldrh	r1, [r4, #16]
    35d8:	428b      	cmp	r3, r1
    35da:	d800      	bhi.n	35de <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    35dc:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    35de:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    35e0:	016b      	lsls	r3, r5, #5
    35e2:	4a29      	ldr	r2, [pc, #164]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    35e4:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    35e6:	016b      	lsls	r3, r5, #5
    35e8:	4827      	ldr	r0, [pc, #156]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    35ea:	18c0      	adds	r0, r0, r3
    35ec:	6842      	ldr	r2, [r0, #4]
    35ee:	048b      	lsls	r3, r1, #18
    35f0:	091b      	lsrs	r3, r3, #4
    35f2:	4929      	ldr	r1, [pc, #164]	; (3698 <_usb_d_dev_out_next+0x1f4>)
    35f4:	400a      	ands	r2, r1
    35f6:	4313      	orrs	r3, r2
    35f8:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    35fa:	6843      	ldr	r3, [r0, #4]
    35fc:	0b9b      	lsrs	r3, r3, #14
    35fe:	039a      	lsls	r2, r3, #14
    3600:	6042      	str	r2, [r0, #4]
	if (!isr) {
    3602:	2f00      	cmp	r7, #0
    3604:	d108      	bne.n	3618 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    3606:	464b      	mov	r3, r9
    3608:	2b01      	cmp	r3, #1
    360a:	d035      	beq.n	3678 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    360c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    360e:	016b      	lsls	r3, r5, #5
    3610:	4924      	ldr	r1, [pc, #144]	; (36a4 <_usb_d_dev_out_next+0x200>)
    3612:	468c      	mov	ip, r1
    3614:	4463      	add	r3, ip
    3616:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3618:	3508      	adds	r5, #8
    361a:	016d      	lsls	r5, r5, #5
    361c:	4b1c      	ldr	r3, [pc, #112]	; (3690 <_usb_d_dev_out_next+0x1ec>)
    361e:	469c      	mov	ip, r3
    3620:	4465      	add	r5, ip
    3622:	2340      	movs	r3, #64	; 0x40
    3624:	712b      	strb	r3, [r5, #4]
}
    3626:	bc3c      	pop	{r2, r3, r4, r5}
    3628:	4690      	mov	r8, r2
    362a:	4699      	mov	r9, r3
    362c:	46a2      	mov	sl, r4
    362e:	46ab      	mov	fp, r5
    3630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    3632:	8a21      	ldrh	r1, [r4, #16]
    3634:	428b      	cmp	r3, r1
    3636:	d90b      	bls.n	3650 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3638:	2180      	movs	r1, #128	; 0x80
    363a:	0189      	lsls	r1, r1, #6
    363c:	428b      	cmp	r3, r1
    363e:	d80f      	bhi.n	3660 <_usb_d_dev_out_next+0x1bc>
    3640:	43b3      	bics	r3, r6
    3642:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    3644:	6823      	ldr	r3, [r4, #0]
    3646:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    3648:	016b      	lsls	r3, r5, #5
    364a:	480f      	ldr	r0, [pc, #60]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    364c:	501a      	str	r2, [r3, r0]
    364e:	e7ca      	b.n	35e6 <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    3650:	428b      	cmp	r3, r1
    3652:	d208      	bcs.n	3666 <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    3654:	7ce1      	ldrb	r1, [r4, #19]
    3656:	2020      	movs	r0, #32
    3658:	4301      	orrs	r1, r0
    365a:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    365c:	0019      	movs	r1, r3
    365e:	e7f1      	b.n	3644 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    3660:	2180      	movs	r1, #128	; 0x80
    3662:	0189      	lsls	r1, r1, #6
    3664:	e7ee      	b.n	3644 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    3666:	0019      	movs	r1, r3
    3668:	e7ec      	b.n	3644 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    366a:	016b      	lsls	r3, r5, #5
    366c:	4a0b      	ldr	r2, [pc, #44]	; (369c <_usb_d_dev_out_next+0x1f8>)
    366e:	4694      	mov	ip, r2
    3670:	4463      	add	r3, ip
    3672:	222d      	movs	r2, #45	; 0x2d
    3674:	701a      	strb	r2, [r3, #0]
    3676:	e797      	b.n	35a8 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    3678:	016a      	lsls	r2, r5, #5
    367a:	4b03      	ldr	r3, [pc, #12]	; (3688 <_usb_d_dev_out_next+0x1e4>)
    367c:	189b      	adds	r3, r3, r2
    367e:	2200      	movs	r2, #0
    3680:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    3682:	322d      	adds	r2, #45	; 0x2d
    3684:	e7c3      	b.n	360e <_usb_d_dev_out_next+0x16a>
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	20000640 	.word	0x20000640
    368c:	000003ff 	.word	0x000003ff
    3690:	41005000 	.word	0x41005000
    3694:	000071e1 	.word	0x000071e1
    3698:	f0003fff 	.word	0xf0003fff
    369c:	41005108 	.word	0x41005108
    36a0:	00003109 	.word	0x00003109
    36a4:	41005109 	.word	0x41005109

000036a8 <_usb_d_dev_handler>:
{
    36a8:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    36aa:	4b89      	ldr	r3, [pc, #548]	; (38d0 <_usb_d_dev_handler+0x228>)
    36ac:	8c1d      	ldrh	r5, [r3, #32]
    36ae:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    36b0:	2d00      	cmp	r5, #0
    36b2:	d001      	beq.n	36b8 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    36b4:	2400      	movs	r4, #0
    36b6:	e0bf      	b.n	3838 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    36b8:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    36ba:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    36bc:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    36be:	075a      	lsls	r2, r3, #29
    36c0:	d40d      	bmi.n	36de <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    36c2:	059a      	lsls	r2, r3, #22
    36c4:	d415      	bmi.n	36f2 <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    36c6:	061a      	lsls	r2, r3, #24
    36c8:	d437      	bmi.n	373a <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    36ca:	2270      	movs	r2, #112	; 0x70
    36cc:	421a      	tst	r2, r3
    36ce:	d13e      	bne.n	374e <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    36d0:	071a      	lsls	r2, r3, #28
    36d2:	d457      	bmi.n	3784 <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    36d4:	07db      	lsls	r3, r3, #31
    36d6:	d500      	bpl.n	36da <_usb_d_dev_handler+0x32>
    36d8:	e068      	b.n	37ac <_usb_d_dev_handler+0x104>
		rc = false;
    36da:	2300      	movs	r3, #0
    36dc:	e006      	b.n	36ec <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    36de:	2204      	movs	r2, #4
    36e0:	4b7b      	ldr	r3, [pc, #492]	; (38d0 <_usb_d_dev_handler+0x228>)
    36e2:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    36e4:	4b7b      	ldr	r3, [pc, #492]	; (38d4 <_usb_d_dev_handler+0x22c>)
    36e6:	6a1b      	ldr	r3, [r3, #32]
    36e8:	4798      	blx	r3
		return true;
    36ea:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    36ec:	2b00      	cmp	r3, #0
    36ee:	d0e1      	beq.n	36b4 <_usb_d_dev_handler+0xc>
}
    36f0:	bd70      	pop	{r4, r5, r6, pc}
    36f2:	4b77      	ldr	r3, [pc, #476]	; (38d0 <_usb_d_dev_handler+0x228>)
    36f4:	4a78      	ldr	r2, [pc, #480]	; (38d8 <_usb_d_dev_handler+0x230>)
    36f6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    36f8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    36fa:	3a92      	subs	r2, #146	; 0x92
    36fc:	3aff      	subs	r2, #255	; 0xff
    36fe:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    3700:	2300      	movs	r3, #0
    3702:	2b03      	cmp	r3, #3
    3704:	d812      	bhi.n	372c <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3706:	0158      	lsls	r0, r3, #5
    3708:	4a74      	ldr	r2, [pc, #464]	; (38dc <_usb_d_dev_handler+0x234>)
    370a:	1812      	adds	r2, r2, r0
    370c:	8912      	ldrh	r2, [r2, #8]
    370e:	0712      	lsls	r2, r2, #28
    3710:	0f12      	lsrs	r2, r2, #28
    3712:	2a03      	cmp	r2, #3
    3714:	d002      	beq.n	371c <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    3716:	3301      	adds	r3, #1
    3718:	b2db      	uxtb	r3, r3
    371a:	e7f2      	b.n	3702 <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    371c:	4b6f      	ldr	r3, [pc, #444]	; (38dc <_usb_d_dev_handler+0x234>)
    371e:	181b      	adds	r3, r3, r0
    3720:	8919      	ldrh	r1, [r3, #8]
    3722:	0449      	lsls	r1, r1, #17
    3724:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    3726:	2200      	movs	r2, #0
    3728:	811a      	strh	r2, [r3, #8]
    372a:	e000      	b.n	372e <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    372c:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    372e:	4b69      	ldr	r3, [pc, #420]	; (38d4 <_usb_d_dev_handler+0x22c>)
    3730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3732:	2003      	movs	r0, #3
    3734:	4798      	blx	r3
	bool     rc    = true;
    3736:	2301      	movs	r3, #1
    3738:	e7d8      	b.n	36ec <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    373a:	2280      	movs	r2, #128	; 0x80
    373c:	4b64      	ldr	r3, [pc, #400]	; (38d0 <_usb_d_dev_handler+0x228>)
    373e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3740:	4b64      	ldr	r3, [pc, #400]	; (38d4 <_usb_d_dev_handler+0x22c>)
    3742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3744:	2100      	movs	r1, #0
    3746:	2005      	movs	r0, #5
    3748:	4798      	blx	r3
	bool     rc    = true;
    374a:	2301      	movs	r3, #1
    374c:	e7ce      	b.n	36ec <_usb_d_dev_handler+0x44>
    374e:	4b60      	ldr	r3, [pc, #384]	; (38d0 <_usb_d_dev_handler+0x228>)
    3750:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3752:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3754:	4a60      	ldr	r2, [pc, #384]	; (38d8 <_usb_d_dev_handler+0x230>)
    3756:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3758:	4b61      	ldr	r3, [pc, #388]	; (38e0 <_usb_d_dev_handler+0x238>)
    375a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    375c:	069b      	lsls	r3, r3, #26
    375e:	d40c      	bmi.n	377a <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3760:	4b5f      	ldr	r3, [pc, #380]	; (38e0 <_usb_d_dev_handler+0x238>)
    3762:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    3764:	23d0      	movs	r3, #208	; 0xd0
    3766:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3768:	2bd0      	cmp	r3, #208	; 0xd0
    376a:	d1f9      	bne.n	3760 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    376c:	4b59      	ldr	r3, [pc, #356]	; (38d4 <_usb_d_dev_handler+0x22c>)
    376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3770:	2100      	movs	r1, #0
    3772:	2002      	movs	r0, #2
    3774:	4798      	blx	r3
	bool     rc    = true;
    3776:	2301      	movs	r3, #1
    3778:	e7b8      	b.n	36ec <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    377a:	4b59      	ldr	r3, [pc, #356]	; (38e0 <_usb_d_dev_handler+0x238>)
    377c:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    377e:	06db      	lsls	r3, r3, #27
    3780:	d5fb      	bpl.n	377a <_usb_d_dev_handler+0xd2>
    3782:	e7f3      	b.n	376c <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3784:	4b52      	ldr	r3, [pc, #328]	; (38d0 <_usb_d_dev_handler+0x228>)
    3786:	2100      	movs	r1, #0
    3788:	2280      	movs	r2, #128	; 0x80
    378a:	0052      	lsls	r2, r2, #1
    378c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    378e:	3af8      	subs	r2, #248	; 0xf8
    3790:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3792:	3268      	adds	r2, #104	; 0x68
    3794:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3796:	4a50      	ldr	r2, [pc, #320]	; (38d8 <_usb_d_dev_handler+0x230>)
    3798:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    379a:	4b52      	ldr	r3, [pc, #328]	; (38e4 <_usb_d_dev_handler+0x23c>)
    379c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    379e:	4b4d      	ldr	r3, [pc, #308]	; (38d4 <_usb_d_dev_handler+0x22c>)
    37a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    37a2:	2100      	movs	r1, #0
    37a4:	2001      	movs	r0, #1
    37a6:	4798      	blx	r3
	bool     rc    = true;
    37a8:	2301      	movs	r3, #1
    37aa:	e79f      	b.n	36ec <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    37ac:	4b48      	ldr	r3, [pc, #288]	; (38d0 <_usb_d_dev_handler+0x228>)
    37ae:	4a4a      	ldr	r2, [pc, #296]	; (38d8 <_usb_d_dev_handler+0x230>)
    37b0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    37b2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    37b4:	3a92      	subs	r2, #146	; 0x92
    37b6:	3aff      	subs	r2, #255	; 0xff
    37b8:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    37ba:	4b46      	ldr	r3, [pc, #280]	; (38d4 <_usb_d_dev_handler+0x22c>)
    37bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    37be:	2100      	movs	r1, #0
    37c0:	2004      	movs	r0, #4
    37c2:	4798      	blx	r3
	bool     rc    = true;
    37c4:	2301      	movs	r3, #1
    37c6:	e791      	b.n	36ec <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    37c8:	06da      	lsls	r2, r3, #27
    37ca:	d407      	bmi.n	37dc <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    37cc:	065a      	lsls	r2, r3, #25
    37ce:	d408      	bmi.n	37e2 <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    37d0:	069b      	lsls	r3, r3, #26
    37d2:	d52f      	bpl.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    37d4:	2100      	movs	r1, #0
    37d6:	4b44      	ldr	r3, [pc, #272]	; (38e8 <_usb_d_dev_handler+0x240>)
    37d8:	4798      	blx	r3
    37da:	e02b      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    37dc:	4b43      	ldr	r3, [pc, #268]	; (38ec <_usb_d_dev_handler+0x244>)
    37de:	4798      	blx	r3
    37e0:	e028      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    37e2:	2101      	movs	r1, #1
    37e4:	4b40      	ldr	r3, [pc, #256]	; (38e8 <_usb_d_dev_handler+0x240>)
    37e6:	4798      	blx	r3
    37e8:	e024      	b.n	3834 <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    37ea:	065a      	lsls	r2, r3, #25
    37ec:	d40f      	bmi.n	380e <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    37ee:	071a      	lsls	r2, r3, #28
    37f0:	d411      	bmi.n	3816 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    37f2:	079a      	lsls	r2, r3, #30
    37f4:	d413      	bmi.n	381e <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    37f6:	7cc1      	ldrb	r1, [r0, #19]
    37f8:	2207      	movs	r2, #7
    37fa:	400a      	ands	r2, r1
    37fc:	2a01      	cmp	r2, #1
    37fe:	d119      	bne.n	3834 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3800:	075a      	lsls	r2, r3, #29
    3802:	d410      	bmi.n	3826 <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3804:	06db      	lsls	r3, r3, #27
    3806:	d515      	bpl.n	3834 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    3808:	4b38      	ldr	r3, [pc, #224]	; (38ec <_usb_d_dev_handler+0x244>)
    380a:	4798      	blx	r3
    380c:	e012      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    380e:	2101      	movs	r1, #1
    3810:	4b35      	ldr	r3, [pc, #212]	; (38e8 <_usb_d_dev_handler+0x240>)
    3812:	4798      	blx	r3
    3814:	e00e      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    3816:	2101      	movs	r1, #1
    3818:	4b35      	ldr	r3, [pc, #212]	; (38f0 <_usb_d_dev_handler+0x248>)
    381a:	4798      	blx	r3
    381c:	e00a      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    381e:	2101      	movs	r1, #1
    3820:	4b34      	ldr	r3, [pc, #208]	; (38f4 <_usb_d_dev_handler+0x24c>)
    3822:	4798      	blx	r3
    3824:	e006      	b.n	3834 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    3826:	2100      	movs	r1, #0
    3828:	4b31      	ldr	r3, [pc, #196]	; (38f0 <_usb_d_dev_handler+0x248>)
    382a:	4798      	blx	r3
    382c:	e002      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    382e:	2100      	movs	r1, #0
    3830:	4b2d      	ldr	r3, [pc, #180]	; (38e8 <_usb_d_dev_handler+0x240>)
    3832:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    3834:	3401      	adds	r4, #1
    3836:	b2e4      	uxtb	r4, r4
    3838:	2c08      	cmp	r4, #8
    383a:	d900      	bls.n	383e <_usb_d_dev_handler+0x196>
    383c:	e758      	b.n	36f0 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    383e:	4b25      	ldr	r3, [pc, #148]	; (38d4 <_usb_d_dev_handler+0x22c>)
    3840:	3320      	adds	r3, #32
    3842:	00a2      	lsls	r2, r4, #2
    3844:	1911      	adds	r1, r2, r4
    3846:	0088      	lsls	r0, r1, #2
    3848:	0001      	movs	r1, r0
    384a:	3010      	adds	r0, #16
    384c:	1818      	adds	r0, r3, r0
    384e:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    3850:	185b      	adds	r3, r3, r1
    3852:	3326      	adds	r3, #38	; 0x26
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	2bff      	cmp	r3, #255	; 0xff
    3858:	d0ec      	beq.n	3834 <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    385a:	7c82      	ldrb	r2, [r0, #18]
    385c:	230f      	movs	r3, #15
    385e:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    3860:	2201      	movs	r2, #1
    3862:	409a      	lsls	r2, r3
    3864:	422a      	tst	r2, r5
    3866:	d0e5      	beq.n	3834 <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3868:	001a      	movs	r2, r3
    386a:	3208      	adds	r2, #8
    386c:	0152      	lsls	r2, r2, #5
    386e:	4918      	ldr	r1, [pc, #96]	; (38d0 <_usb_d_dev_handler+0x228>)
    3870:	468c      	mov	ip, r1
    3872:	4462      	add	r2, ip
    3874:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3876:	015b      	lsls	r3, r3, #5
    3878:	491f      	ldr	r1, [pc, #124]	; (38f8 <_usb_d_dev_handler+0x250>)
    387a:	468c      	mov	ip, r1
    387c:	4463      	add	r3, ip
    387e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3880:	4013      	ands	r3, r2
	if (flags) {
    3882:	d0d7      	beq.n	3834 <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3884:	7cc2      	ldrb	r2, [r0, #19]
    3886:	2147      	movs	r1, #71	; 0x47
    3888:	4011      	ands	r1, r2
    388a:	2901      	cmp	r1, #1
    388c:	d09c      	beq.n	37c8 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    388e:	b252      	sxtb	r2, r2
    3890:	2a00      	cmp	r2, #0
    3892:	dbaa      	blt.n	37ea <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3894:	069a      	lsls	r2, r3, #26
    3896:	d4ca      	bmi.n	382e <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3898:	075a      	lsls	r2, r3, #29
    389a:	d40d      	bmi.n	38b8 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    389c:	07da      	lsls	r2, r3, #31
    389e:	d40f      	bmi.n	38c0 <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    38a0:	7cc1      	ldrb	r1, [r0, #19]
    38a2:	2207      	movs	r2, #7
    38a4:	400a      	ands	r2, r1
    38a6:	2a01      	cmp	r2, #1
    38a8:	d1c4      	bne.n	3834 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    38aa:	071a      	lsls	r2, r3, #28
    38ac:	d40c      	bmi.n	38c8 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    38ae:	06db      	lsls	r3, r3, #27
    38b0:	d5c0      	bpl.n	3834 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    38b2:	4b0e      	ldr	r3, [pc, #56]	; (38ec <_usb_d_dev_handler+0x244>)
    38b4:	4798      	blx	r3
    38b6:	e7bd      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    38b8:	2100      	movs	r1, #0
    38ba:	4b0d      	ldr	r3, [pc, #52]	; (38f0 <_usb_d_dev_handler+0x248>)
    38bc:	4798      	blx	r3
    38be:	e7b9      	b.n	3834 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    38c0:	2101      	movs	r1, #1
    38c2:	4b0e      	ldr	r3, [pc, #56]	; (38fc <_usb_d_dev_handler+0x254>)
    38c4:	4798      	blx	r3
    38c6:	e7b5      	b.n	3834 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    38c8:	2101      	movs	r1, #1
    38ca:	4b09      	ldr	r3, [pc, #36]	; (38f0 <_usb_d_dev_handler+0x248>)
    38cc:	4798      	blx	r3
    38ce:	e7b1      	b.n	3834 <_usb_d_dev_handler+0x18c>
    38d0:	41005000 	.word	0x41005000
    38d4:	200006c0 	.word	0x200006c0
    38d8:	00000201 	.word	0x00000201
    38dc:	20000640 	.word	0x20000640
    38e0:	40000800 	.word	0x40000800
    38e4:	000032bd 	.word	0x000032bd
    38e8:	000030d9 	.word	0x000030d9
    38ec:	00003049 	.word	0x00003049
    38f0:	000031ad 	.word	0x000031ad
    38f4:	00003315 	.word	0x00003315
    38f8:	41005109 	.word	0x41005109
    38fc:	000034a5 	.word	0x000034a5

00003900 <_usb_d_dev_init>:
{
    3900:	b500      	push	{lr}
    3902:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    3904:	2200      	movs	r2, #0
    3906:	ab01      	add	r3, sp, #4
    3908:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    390a:	4b21      	ldr	r3, [pc, #132]	; (3990 <_usb_d_dev_init+0x90>)
    390c:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    390e:	07db      	lsls	r3, r3, #31
    3910:	d41b      	bmi.n	394a <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3912:	4b1f      	ldr	r3, [pc, #124]	; (3990 <_usb_d_dev_init+0x90>)
    3914:	789b      	ldrb	r3, [r3, #2]
    3916:	079b      	lsls	r3, r3, #30
    3918:	d1fb      	bne.n	3912 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    391a:	4b1d      	ldr	r3, [pc, #116]	; (3990 <_usb_d_dev_init+0x90>)
    391c:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    391e:	079b      	lsls	r3, r3, #30
    3920:	d50c      	bpl.n	393c <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    3922:	4a1b      	ldr	r2, [pc, #108]	; (3990 <_usb_d_dev_init+0x90>)
    3924:	7813      	ldrb	r3, [r2, #0]
    3926:	2102      	movs	r1, #2
    3928:	438b      	bics	r3, r1
    392a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    392c:	4b18      	ldr	r3, [pc, #96]	; (3990 <_usb_d_dev_init+0x90>)
    392e:	789b      	ldrb	r3, [r3, #2]
    3930:	079b      	lsls	r3, r3, #30
    3932:	d1fb      	bne.n	392c <_usb_d_dev_init+0x2c>
    3934:	4b16      	ldr	r3, [pc, #88]	; (3990 <_usb_d_dev_init+0x90>)
    3936:	789b      	ldrb	r3, [r3, #2]
    3938:	079b      	lsls	r3, r3, #30
    393a:	d4fb      	bmi.n	3934 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    393c:	2201      	movs	r2, #1
    393e:	4b14      	ldr	r3, [pc, #80]	; (3990 <_usb_d_dev_init+0x90>)
    3940:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3942:	4b13      	ldr	r3, [pc, #76]	; (3990 <_usb_d_dev_init+0x90>)
    3944:	789b      	ldrb	r3, [r3, #2]
    3946:	079b      	lsls	r3, r3, #30
    3948:	d1fb      	bne.n	3942 <_usb_d_dev_init+0x42>
    394a:	4b11      	ldr	r3, [pc, #68]	; (3990 <_usb_d_dev_init+0x90>)
    394c:	789b      	ldrb	r3, [r3, #2]
    394e:	07db      	lsls	r3, r3, #31
    3950:	d4fb      	bmi.n	394a <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3952:	4b10      	ldr	r3, [pc, #64]	; (3994 <_usb_d_dev_init+0x94>)
    3954:	4a10      	ldr	r2, [pc, #64]	; (3998 <_usb_d_dev_init+0x98>)
    3956:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3958:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    395a:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    395c:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    395e:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    3960:	4b0e      	ldr	r3, [pc, #56]	; (399c <_usb_d_dev_init+0x9c>)
    3962:	4798      	blx	r3
	_usb_load_calib();
    3964:	4b0e      	ldr	r3, [pc, #56]	; (39a0 <_usb_d_dev_init+0xa0>)
    3966:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3968:	2204      	movs	r2, #4
    396a:	4b09      	ldr	r3, [pc, #36]	; (3990 <_usb_d_dev_init+0x90>)
    396c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    396e:	4b08      	ldr	r3, [pc, #32]	; (3990 <_usb_d_dev_init+0x90>)
    3970:	789b      	ldrb	r3, [r3, #2]
    3972:	079b      	lsls	r3, r3, #30
    3974:	d1fb      	bne.n	396e <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3976:	4a06      	ldr	r2, [pc, #24]	; (3990 <_usb_d_dev_init+0x90>)
    3978:	4b0a      	ldr	r3, [pc, #40]	; (39a4 <_usb_d_dev_init+0xa4>)
    397a:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    397c:	ab01      	add	r3, sp, #4
    397e:	785b      	ldrb	r3, [r3, #1]
    3980:	2101      	movs	r1, #1
    3982:	430b      	orrs	r3, r1
    3984:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3986:	8113      	strh	r3, [r2, #8]
}
    3988:	2000      	movs	r0, #0
    398a:	b003      	add	sp, #12
    398c:	bd00      	pop	{pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	41005000 	.word	0x41005000
    3994:	200006c0 	.word	0x200006c0
    3998:	00002ff1 	.word	0x00002ff1
    399c:	000032bd 	.word	0x000032bd
    39a0:	00002ff5 	.word	0x00002ff5
    39a4:	20000640 	.word	0x20000640

000039a8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    39a8:	4b10      	ldr	r3, [pc, #64]	; (39ec <_usb_d_dev_enable+0x44>)
    39aa:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    39ac:	079b      	lsls	r3, r3, #30
    39ae:	d119      	bne.n	39e4 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    39b0:	4b0e      	ldr	r3, [pc, #56]	; (39ec <_usb_d_dev_enable+0x44>)
    39b2:	789b      	ldrb	r3, [r3, #2]
    39b4:	079b      	lsls	r3, r3, #30
    39b6:	d1fb      	bne.n	39b0 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    39b8:	4b0c      	ldr	r3, [pc, #48]	; (39ec <_usb_d_dev_enable+0x44>)
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    39be:	079a      	lsls	r2, r3, #30
    39c0:	d408      	bmi.n	39d4 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    39c2:	2202      	movs	r2, #2
    39c4:	4313      	orrs	r3, r2
    39c6:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    39c8:	4a08      	ldr	r2, [pc, #32]	; (39ec <_usb_d_dev_enable+0x44>)
    39ca:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    39cc:	4b07      	ldr	r3, [pc, #28]	; (39ec <_usb_d_dev_enable+0x44>)
    39ce:	789b      	ldrb	r3, [r3, #2]
    39d0:	079b      	lsls	r3, r3, #30
    39d2:	d1fb      	bne.n	39cc <_usb_d_dev_enable+0x24>
    39d4:	2280      	movs	r2, #128	; 0x80
    39d6:	4b06      	ldr	r3, [pc, #24]	; (39f0 <_usb_d_dev_enable+0x48>)
    39d8:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39da:	4a06      	ldr	r2, [pc, #24]	; (39f4 <_usb_d_dev_enable+0x4c>)
    39dc:	4b03      	ldr	r3, [pc, #12]	; (39ec <_usb_d_dev_enable+0x44>)
    39de:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    39e0:	2000      	movs	r0, #0
}
    39e2:	4770      	bx	lr
		return -USB_ERR_DENIED;
    39e4:	2011      	movs	r0, #17
    39e6:	4240      	negs	r0, r0
    39e8:	e7fb      	b.n	39e2 <_usb_d_dev_enable+0x3a>
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	41005000 	.word	0x41005000
    39f0:	e000e100 	.word	0xe000e100
    39f4:	0000028d 	.word	0x0000028d

000039f8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    39f8:	4a02      	ldr	r2, [pc, #8]	; (3a04 <_usb_d_dev_attach+0xc>)
    39fa:	8913      	ldrh	r3, [r2, #8]
    39fc:	2101      	movs	r1, #1
    39fe:	438b      	bics	r3, r1
    3a00:	8113      	strh	r3, [r2, #8]
}
    3a02:	4770      	bx	lr
    3a04:	41005000 	.word	0x41005000

00003a08 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    3a08:	2380      	movs	r3, #128	; 0x80
    3a0a:	425b      	negs	r3, r3
    3a0c:	4318      	orrs	r0, r3
    3a0e:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3a10:	4b01      	ldr	r3, [pc, #4]	; (3a18 <_usb_d_dev_set_address+0x10>)
    3a12:	7298      	strb	r0, [r3, #10]
}
    3a14:	4770      	bx	lr
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	41005000 	.word	0x41005000

00003a1c <_usb_d_dev_ep_init>:
{
    3a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1e:	46c6      	mov	lr, r8
    3a20:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3a22:	230f      	movs	r3, #15
    3a24:	4003      	ands	r3, r0
    3a26:	b244      	sxtb	r4, r0
    3a28:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d005      	beq.n	3a3a <_usb_d_dev_ep_init+0x1e>
    3a2e:	2c00      	cmp	r4, #0
    3a30:	db01      	blt.n	3a36 <_usb_d_dev_ep_init+0x1a>
    3a32:	001c      	movs	r4, r3
    3a34:	e002      	b.n	3a3c <_usb_d_dev_ep_init+0x20>
    3a36:	1d1c      	adds	r4, r3, #4
    3a38:	e000      	b.n	3a3c <_usb_d_dev_ep_init+0x20>
    3a3a:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    3a3c:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3a3e:	2503      	movs	r5, #3
    3a40:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3a42:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3a44:	2b04      	cmp	r3, #4
    3a46:	d900      	bls.n	3a4a <_usb_d_dev_ep_init+0x2e>
    3a48:	e07a      	b.n	3b40 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    3a4a:	00a5      	lsls	r5, r4, #2
    3a4c:	192d      	adds	r5, r5, r4
    3a4e:	00ac      	lsls	r4, r5, #2
    3a50:	46a0      	mov	r8, r4
    3a52:	4c43      	ldr	r4, [pc, #268]	; (3b60 <_usb_d_dev_ep_init+0x144>)
    3a54:	3420      	adds	r4, #32
    3a56:	4444      	add	r4, r8
    3a58:	3426      	adds	r4, #38	; 0x26
    3a5a:	7824      	ldrb	r4, [r4, #0]
    3a5c:	2cff      	cmp	r4, #255	; 0xff
    3a5e:	d000      	beq.n	3a62 <_usb_d_dev_ep_init+0x46>
    3a60:	e071      	b.n	3b46 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3a62:	2900      	cmp	r1, #0
    3a64:	d118      	bne.n	3a98 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a66:	2b00      	cmp	r3, #0
    3a68:	d004      	beq.n	3a74 <_usb_d_dev_ep_init+0x58>
    3a6a:	4664      	mov	r4, ip
    3a6c:	2c00      	cmp	r4, #0
    3a6e:	db01      	blt.n	3a74 <_usb_d_dev_ep_init+0x58>
    3a70:	3304      	adds	r3, #4
    3a72:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    3a74:	009c      	lsls	r4, r3, #2
    3a76:	18e3      	adds	r3, r4, r3
    3a78:	009d      	lsls	r5, r3, #2
    3a7a:	4b39      	ldr	r3, [pc, #228]	; (3b60 <_usb_d_dev_ep_init+0x144>)
    3a7c:	3320      	adds	r3, #32
    3a7e:	195b      	adds	r3, r3, r5
    3a80:	3326      	adds	r3, #38	; 0x26
    3a82:	781b      	ldrb	r3, [r3, #0]
    3a84:	2bff      	cmp	r3, #255	; 0xff
    3a86:	d161      	bne.n	3b4c <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    3a88:	007b      	lsls	r3, r7, #1
    3a8a:	19db      	adds	r3, r3, r7
    3a8c:	009c      	lsls	r4, r3, #2
    3a8e:	4b35      	ldr	r3, [pc, #212]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3a90:	191b      	adds	r3, r3, r4
    3a92:	689b      	ldr	r3, [r3, #8]
    3a94:	2b00      	cmp	r3, #0
    3a96:	d05c      	beq.n	3b52 <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3a98:	4663      	mov	r3, ip
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	db37      	blt.n	3b0e <_usb_d_dev_ep_init+0xf2>
    3a9e:	007b      	lsls	r3, r7, #1
    3aa0:	19db      	adds	r3, r3, r7
    3aa2:	009c      	lsls	r4, r3, #2
    3aa4:	4b2f      	ldr	r3, [pc, #188]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3aa6:	191b      	adds	r3, r3, r4
    3aa8:	689b      	ldr	r3, [r3, #8]
    3aaa:	1e5c      	subs	r4, r3, #1
    3aac:	41a3      	sbcs	r3, r4
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d00a      	beq.n	3aca <_usb_d_dev_ep_init+0xae>
    3ab4:	4663      	mov	r3, ip
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	db33      	blt.n	3b22 <_usb_d_dev_ep_init+0x106>
    3aba:	007b      	lsls	r3, r7, #1
    3abc:	19db      	adds	r3, r3, r7
    3abe:	009c      	lsls	r4, r3, #2
    3ac0:	4b28      	ldr	r3, [pc, #160]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3ac2:	191b      	adds	r3, r3, r4
    3ac4:	8a1b      	ldrh	r3, [r3, #16]
    3ac6:	4293      	cmp	r3, r2
    3ac8:	db46      	blt.n	3b58 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3aca:	4663      	mov	r3, ip
    3acc:	2b00      	cmp	r3, #0
    3ace:	db2f      	blt.n	3b30 <_usb_d_dev_ep_init+0x114>
    3ad0:	007b      	lsls	r3, r7, #1
    3ad2:	19df      	adds	r7, r3, r7
    3ad4:	00bc      	lsls	r4, r7, #2
    3ad6:	4b23      	ldr	r3, [pc, #140]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3ad8:	191b      	adds	r3, r3, r4
    3ada:	689b      	ldr	r3, [r3, #8]
    3adc:	469c      	mov	ip, r3
    3ade:	4b20      	ldr	r3, [pc, #128]	; (3b60 <_usb_d_dev_ep_init+0x144>)
    3ae0:	00b5      	lsls	r5, r6, #2
    3ae2:	19af      	adds	r7, r5, r6
    3ae4:	00bc      	lsls	r4, r7, #2
    3ae6:	191c      	adds	r4, r3, r4
    3ae8:	4667      	mov	r7, ip
    3aea:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    3aec:	3444      	adds	r4, #68	; 0x44
    3aee:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    3af0:	3101      	adds	r1, #1
    3af2:	3320      	adds	r3, #32
    3af4:	19ac      	adds	r4, r5, r6
    3af6:	00a2      	lsls	r2, r4, #2
    3af8:	0014      	movs	r4, r2
    3afa:	189a      	adds	r2, r3, r2
    3afc:	3227      	adds	r2, #39	; 0x27
    3afe:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    3b00:	191b      	adds	r3, r3, r4
    3b02:	3326      	adds	r3, #38	; 0x26
    3b04:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    3b06:	2000      	movs	r0, #0
}
    3b08:	bc04      	pop	{r2}
    3b0a:	4690      	mov	r8, r2
    3b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3b0e:	007b      	lsls	r3, r7, #1
    3b10:	19db      	adds	r3, r3, r7
    3b12:	009c      	lsls	r4, r3, #2
    3b14:	4b13      	ldr	r3, [pc, #76]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3b16:	191b      	adds	r3, r3, r4
    3b18:	68db      	ldr	r3, [r3, #12]
    3b1a:	1e5c      	subs	r4, r3, #1
    3b1c:	41a3      	sbcs	r3, r4
    3b1e:	b2db      	uxtb	r3, r3
    3b20:	e7c6      	b.n	3ab0 <_usb_d_dev_ep_init+0x94>
    3b22:	007b      	lsls	r3, r7, #1
    3b24:	19db      	adds	r3, r3, r7
    3b26:	009c      	lsls	r4, r3, #2
    3b28:	4b0e      	ldr	r3, [pc, #56]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3b2a:	191b      	adds	r3, r3, r4
    3b2c:	8a5b      	ldrh	r3, [r3, #18]
    3b2e:	e7ca      	b.n	3ac6 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3b30:	007b      	lsls	r3, r7, #1
    3b32:	19df      	adds	r7, r3, r7
    3b34:	00bc      	lsls	r4, r7, #2
    3b36:	4b0b      	ldr	r3, [pc, #44]	; (3b64 <_usb_d_dev_ep_init+0x148>)
    3b38:	191b      	adds	r3, r3, r4
    3b3a:	68db      	ldr	r3, [r3, #12]
    3b3c:	469c      	mov	ip, r3
    3b3e:	e7ce      	b.n	3ade <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    3b40:	2012      	movs	r0, #18
    3b42:	4240      	negs	r0, r0
    3b44:	e7e0      	b.n	3b08 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    3b46:	2014      	movs	r0, #20
    3b48:	4240      	negs	r0, r0
    3b4a:	e7dd      	b.n	3b08 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    3b4c:	2014      	movs	r0, #20
    3b4e:	4240      	negs	r0, r0
    3b50:	e7da      	b.n	3b08 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    3b52:	2013      	movs	r0, #19
    3b54:	4240      	negs	r0, r0
    3b56:	e7d7      	b.n	3b08 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    3b58:	2013      	movs	r0, #19
    3b5a:	4240      	negs	r0, r0
    3b5c:	e7d4      	b.n	3b08 <_usb_d_dev_ep_init+0xec>
    3b5e:	46c0      	nop			; (mov r8, r8)
    3b60:	200006c0 	.word	0x200006c0
    3b64:	00007708 	.word	0x00007708

00003b68 <_usb_d_dev_ep_deinit>:
{
    3b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b6a:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3b6c:	250f      	movs	r5, #15
    3b6e:	4005      	ands	r5, r0
    3b70:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3b72:	0ffb      	lsrs	r3, r7, #31
    3b74:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b76:	2d00      	cmp	r5, #0
    3b78:	d005      	beq.n	3b86 <_usb_d_dev_ep_deinit+0x1e>
    3b7a:	2f00      	cmp	r7, #0
    3b7c:	db01      	blt.n	3b82 <_usb_d_dev_ep_deinit+0x1a>
    3b7e:	002a      	movs	r2, r5
    3b80:	e002      	b.n	3b88 <_usb_d_dev_ep_deinit+0x20>
    3b82:	1d2a      	adds	r2, r5, #4
    3b84:	e000      	b.n	3b88 <_usb_d_dev_ep_deinit+0x20>
    3b86:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    3b88:	0016      	movs	r6, r2
    3b8a:	0093      	lsls	r3, r2, #2
    3b8c:	189b      	adds	r3, r3, r2
    3b8e:	0099      	lsls	r1, r3, #2
    3b90:	3110      	adds	r1, #16
    3b92:	4823      	ldr	r0, [pc, #140]	; (3c20 <_usb_d_dev_ep_deinit+0xb8>)
    3b94:	3020      	adds	r0, #32
    3b96:	1840      	adds	r0, r0, r1
    3b98:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3b9a:	2d04      	cmp	r5, #4
    3b9c:	d830      	bhi.n	3c00 <_usb_d_dev_ep_deinit+0x98>
    3b9e:	0093      	lsls	r3, r2, #2
    3ba0:	189a      	adds	r2, r3, r2
    3ba2:	0091      	lsls	r1, r2, #2
    3ba4:	4b1e      	ldr	r3, [pc, #120]	; (3c20 <_usb_d_dev_ep_deinit+0xb8>)
    3ba6:	3320      	adds	r3, #32
    3ba8:	185b      	adds	r3, r3, r1
    3baa:	3326      	adds	r3, #38	; 0x26
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	2bff      	cmp	r3, #255	; 0xff
    3bb0:	d026      	beq.n	3c00 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3bb2:	2203      	movs	r2, #3
    3bb4:	4661      	mov	r1, ip
    3bb6:	4b1b      	ldr	r3, [pc, #108]	; (3c24 <_usb_d_dev_ep_deinit+0xbc>)
    3bb8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3bba:	00b2      	lsls	r2, r6, #2
    3bbc:	1992      	adds	r2, r2, r6
    3bbe:	0091      	lsls	r1, r2, #2
    3bc0:	4b17      	ldr	r3, [pc, #92]	; (3c20 <_usb_d_dev_ep_deinit+0xb8>)
    3bc2:	185b      	adds	r3, r3, r1
    3bc4:	3340      	adds	r3, #64	; 0x40
    3bc6:	79da      	ldrb	r2, [r3, #7]
    3bc8:	2307      	movs	r3, #7
    3bca:	4013      	ands	r3, r2
    3bcc:	2b01      	cmp	r3, #1
    3bce:	d018      	beq.n	3c02 <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    3bd0:	2f00      	cmp	r7, #0
    3bd2:	db1c      	blt.n	3c0e <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3bd4:	4a14      	ldr	r2, [pc, #80]	; (3c28 <_usb_d_dev_ep_deinit+0xc0>)
    3bd6:	3408      	adds	r4, #8
    3bd8:	0164      	lsls	r4, r4, #5
    3bda:	5ca3      	ldrb	r3, [r4, r2]
    3bdc:	2107      	movs	r1, #7
    3bde:	438b      	bics	r3, r1
    3be0:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    3be2:	4b0f      	ldr	r3, [pc, #60]	; (3c20 <_usb_d_dev_ep_deinit+0xb8>)
    3be4:	3320      	adds	r3, #32
    3be6:	00b1      	lsls	r1, r6, #2
    3be8:	1988      	adds	r0, r1, r6
    3bea:	0082      	lsls	r2, r0, #2
    3bec:	189a      	adds	r2, r3, r2
    3bee:	3227      	adds	r2, #39	; 0x27
    3bf0:	2000      	movs	r0, #0
    3bf2:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    3bf4:	198e      	adds	r6, r1, r6
    3bf6:	00b2      	lsls	r2, r6, #2
    3bf8:	189b      	adds	r3, r3, r2
    3bfa:	3326      	adds	r3, #38	; 0x26
    3bfc:	22ff      	movs	r2, #255	; 0xff
    3bfe:	701a      	strb	r2, [r3, #0]
}
    3c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3c02:	3408      	adds	r4, #8
    3c04:	0164      	lsls	r4, r4, #5
    3c06:	2200      	movs	r2, #0
    3c08:	4b07      	ldr	r3, [pc, #28]	; (3c28 <_usb_d_dev_ep_deinit+0xc0>)
    3c0a:	54e2      	strb	r2, [r4, r3]
    3c0c:	e7e9      	b.n	3be2 <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3c0e:	4a06      	ldr	r2, [pc, #24]	; (3c28 <_usb_d_dev_ep_deinit+0xc0>)
    3c10:	3508      	adds	r5, #8
    3c12:	016d      	lsls	r5, r5, #5
    3c14:	5cab      	ldrb	r3, [r5, r2]
    3c16:	2170      	movs	r1, #112	; 0x70
    3c18:	438b      	bics	r3, r1
    3c1a:	54ab      	strb	r3, [r5, r2]
    3c1c:	e7e1      	b.n	3be2 <_usb_d_dev_ep_deinit+0x7a>
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	200006c0 	.word	0x200006c0
    3c24:	00003131 	.word	0x00003131
    3c28:	41005000 	.word	0x41005000

00003c2c <_usb_d_dev_ep_enable>:
{
    3c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3c2e:	230f      	movs	r3, #15
    3c30:	4003      	ands	r3, r0
    3c32:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c34:	2b00      	cmp	r3, #0
    3c36:	d005      	beq.n	3c44 <_usb_d_dev_ep_enable+0x18>
    3c38:	2800      	cmp	r0, #0
    3c3a:	db01      	blt.n	3c40 <_usb_d_dev_ep_enable+0x14>
    3c3c:	001e      	movs	r6, r3
    3c3e:	e002      	b.n	3c46 <_usb_d_dev_ep_enable+0x1a>
    3c40:	1d1e      	adds	r6, r3, #4
    3c42:	e000      	b.n	3c46 <_usb_d_dev_ep_enable+0x1a>
    3c44:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    3c46:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3c48:	001a      	movs	r2, r3
    3c4a:	3208      	adds	r2, #8
    3c4c:	0152      	lsls	r2, r2, #5
    3c4e:	49b3      	ldr	r1, [pc, #716]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3c50:	5c55      	ldrb	r5, [r2, r1]
    3c52:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3c54:	2b04      	cmp	r3, #4
    3c56:	d900      	bls.n	3c5a <_usb_d_dev_ep_enable+0x2e>
    3c58:	e151      	b.n	3efe <_usb_d_dev_ep_enable+0x2d2>
    3c5a:	00b1      	lsls	r1, r6, #2
    3c5c:	1989      	adds	r1, r1, r6
    3c5e:	008e      	lsls	r6, r1, #2
    3c60:	4aaf      	ldr	r2, [pc, #700]	; (3f20 <_usb_d_dev_ep_enable+0x2f4>)
    3c62:	3220      	adds	r2, #32
    3c64:	1992      	adds	r2, r2, r6
    3c66:	3226      	adds	r2, #38	; 0x26
    3c68:	7812      	ldrb	r2, [r2, #0]
    3c6a:	2aff      	cmp	r2, #255	; 0xff
    3c6c:	d100      	bne.n	3c70 <_usb_d_dev_ep_enable+0x44>
    3c6e:	e149      	b.n	3f04 <_usb_d_dev_ep_enable+0x2d8>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3c70:	015a      	lsls	r2, r3, #5
    3c72:	4eac      	ldr	r6, [pc, #688]	; (3f24 <_usb_d_dev_ep_enable+0x2f8>)
    3c74:	18b6      	adds	r6, r6, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3c76:	00a1      	lsls	r1, r4, #2
    3c78:	1909      	adds	r1, r1, r4
    3c7a:	008f      	lsls	r7, r1, #2
    3c7c:	4aa8      	ldr	r2, [pc, #672]	; (3f20 <_usb_d_dev_ep_enable+0x2f4>)
    3c7e:	19d2      	adds	r2, r2, r7
    3c80:	3240      	adds	r2, #64	; 0x40
    3c82:	79d1      	ldrb	r1, [r2, #7]
    3c84:	2207      	movs	r2, #7
    3c86:	400a      	ands	r2, r1
    3c88:	2a01      	cmp	r2, #1
    3c8a:	d037      	beq.n	3cfc <_usb_d_dev_ep_enable+0xd0>
	} else if (dir) {
    3c8c:	2800      	cmp	r0, #0
    3c8e:	da00      	bge.n	3c92 <_usb_d_dev_ep_enable+0x66>
    3c90:	e0cc      	b.n	3e2c <_usb_d_dev_ep_enable+0x200>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3c92:	076a      	lsls	r2, r5, #29
    3c94:	d000      	beq.n	3c98 <_usb_d_dev_ep_enable+0x6c>
    3c96:	e13e      	b.n	3f16 <_usb_d_dev_ep_enable+0x2ea>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3c98:	4aa1      	ldr	r2, [pc, #644]	; (3f20 <_usb_d_dev_ep_enable+0x2f4>)
    3c9a:	00a0      	lsls	r0, r4, #2
    3c9c:	1907      	adds	r7, r0, r4
    3c9e:	00b9      	lsls	r1, r7, #2
    3ca0:	1851      	adds	r1, r2, r1
    3ca2:	3140      	adds	r1, #64	; 0x40
    3ca4:	79c9      	ldrb	r1, [r1, #7]
    3ca6:	0749      	lsls	r1, r1, #29
    3ca8:	0f49      	lsrs	r1, r1, #29
    3caa:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3cac:	0019      	movs	r1, r3
    3cae:	3108      	adds	r1, #8
    3cb0:	0149      	lsls	r1, r1, #5
    3cb2:	4f9a      	ldr	r7, [pc, #616]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3cb4:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3cb6:	1904      	adds	r4, r0, r4
    3cb8:	00a1      	lsls	r1, r4, #2
    3cba:	1852      	adds	r2, r2, r1
    3cbc:	3244      	adds	r2, #68	; 0x44
    3cbe:	8810      	ldrh	r0, [r2, #0]
    3cc0:	0382      	lsls	r2, r0, #14
    3cc2:	4999      	ldr	r1, [pc, #612]	; (3f28 <_usb_d_dev_ep_enable+0x2fc>)
    3cc4:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3cc6:	2180      	movs	r1, #128	; 0x80
    3cc8:	0089      	lsls	r1, r1, #2
    3cca:	4288      	cmp	r0, r1
    3ccc:	d900      	bls.n	3cd0 <_usb_d_dev_ep_enable+0xa4>
    3cce:	e0f9      	b.n	3ec4 <_usb_d_dev_ep_enable+0x298>
    3cd0:	3901      	subs	r1, #1
    3cd2:	39ff      	subs	r1, #255	; 0xff
    3cd4:	4288      	cmp	r0, r1
    3cd6:	d900      	bls.n	3cda <_usb_d_dev_ep_enable+0xae>
    3cd8:	e107      	b.n	3eea <_usb_d_dev_ep_enable+0x2be>
    3cda:	2880      	cmp	r0, #128	; 0x80
    3cdc:	d900      	bls.n	3ce0 <_usb_d_dev_ep_enable+0xb4>
    3cde:	e106      	b.n	3eee <_usb_d_dev_ep_enable+0x2c2>
    3ce0:	2840      	cmp	r0, #64	; 0x40
    3ce2:	d900      	bls.n	3ce6 <_usb_d_dev_ep_enable+0xba>
    3ce4:	e105      	b.n	3ef2 <_usb_d_dev_ep_enable+0x2c6>
    3ce6:	2820      	cmp	r0, #32
    3ce8:	d900      	bls.n	3cec <_usb_d_dev_ep_enable+0xc0>
    3cea:	e104      	b.n	3ef6 <_usb_d_dev_ep_enable+0x2ca>
    3cec:	2810      	cmp	r0, #16
    3cee:	d900      	bls.n	3cf2 <_usb_d_dev_ep_enable+0xc6>
    3cf0:	e103      	b.n	3efa <_usb_d_dev_ep_enable+0x2ce>
    3cf2:	39f8      	subs	r1, #248	; 0xf8
    3cf4:	4281      	cmp	r1, r0
    3cf6:	4189      	sbcs	r1, r1
    3cf8:	4249      	negs	r1, r1
    3cfa:	e0e4      	b.n	3ec6 <_usb_d_dev_ep_enable+0x29a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3cfc:	3276      	adds	r2, #118	; 0x76
    3cfe:	422a      	tst	r2, r5
    3d00:	d000      	beq.n	3d04 <_usb_d_dev_ep_enable+0xd8>
    3d02:	e102      	b.n	3f0a <_usb_d_dev_ep_enable+0x2de>
    3d04:	001a      	movs	r2, r3
    3d06:	3208      	adds	r2, #8
    3d08:	0152      	lsls	r2, r2, #5
    3d0a:	2011      	movs	r0, #17
    3d0c:	4983      	ldr	r1, [pc, #524]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3d0e:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3d10:	4a83      	ldr	r2, [pc, #524]	; (3f20 <_usb_d_dev_ep_enable+0x2f4>)
    3d12:	19d2      	adds	r2, r2, r7
    3d14:	3244      	adds	r2, #68	; 0x44
    3d16:	8812      	ldrh	r2, [r2, #0]
    3d18:	0391      	lsls	r1, r2, #14
    3d1a:	4883      	ldr	r0, [pc, #524]	; (3f28 <_usb_d_dev_ep_enable+0x2fc>)
    3d1c:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3d1e:	2080      	movs	r0, #128	; 0x80
    3d20:	0080      	lsls	r0, r0, #2
    3d22:	4282      	cmp	r2, r0
    3d24:	d810      	bhi.n	3d48 <_usb_d_dev_ep_enable+0x11c>
    3d26:	3801      	subs	r0, #1
    3d28:	38ff      	subs	r0, #255	; 0xff
    3d2a:	4282      	cmp	r2, r0
    3d2c:	d827      	bhi.n	3d7e <_usb_d_dev_ep_enable+0x152>
    3d2e:	2a80      	cmp	r2, #128	; 0x80
    3d30:	d827      	bhi.n	3d82 <_usb_d_dev_ep_enable+0x156>
    3d32:	2a40      	cmp	r2, #64	; 0x40
    3d34:	d827      	bhi.n	3d86 <_usb_d_dev_ep_enable+0x15a>
    3d36:	2a20      	cmp	r2, #32
    3d38:	d827      	bhi.n	3d8a <_usb_d_dev_ep_enable+0x15e>
    3d3a:	2a10      	cmp	r2, #16
    3d3c:	d827      	bhi.n	3d8e <_usb_d_dev_ep_enable+0x162>
    3d3e:	38f8      	subs	r0, #248	; 0xf8
    3d40:	4290      	cmp	r0, r2
    3d42:	4180      	sbcs	r0, r0
    3d44:	4240      	negs	r0, r0
    3d46:	e000      	b.n	3d4a <_usb_d_dev_ep_enable+0x11e>
    3d48:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d4a:	0700      	lsls	r0, r0, #28
    3d4c:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3d4e:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d50:	0491      	lsls	r1, r2, #18
    3d52:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3d54:	2080      	movs	r0, #128	; 0x80
    3d56:	0080      	lsls	r0, r0, #2
    3d58:	4282      	cmp	r2, r0
    3d5a:	d81a      	bhi.n	3d92 <_usb_d_dev_ep_enable+0x166>
    3d5c:	3801      	subs	r0, #1
    3d5e:	38ff      	subs	r0, #255	; 0xff
    3d60:	4282      	cmp	r2, r0
    3d62:	d859      	bhi.n	3e18 <_usb_d_dev_ep_enable+0x1ec>
    3d64:	2a80      	cmp	r2, #128	; 0x80
    3d66:	d859      	bhi.n	3e1c <_usb_d_dev_ep_enable+0x1f0>
    3d68:	2a40      	cmp	r2, #64	; 0x40
    3d6a:	d859      	bhi.n	3e20 <_usb_d_dev_ep_enable+0x1f4>
    3d6c:	2a20      	cmp	r2, #32
    3d6e:	d859      	bhi.n	3e24 <_usb_d_dev_ep_enable+0x1f8>
    3d70:	2a10      	cmp	r2, #16
    3d72:	d859      	bhi.n	3e28 <_usb_d_dev_ep_enable+0x1fc>
    3d74:	38f8      	subs	r0, #248	; 0xf8
    3d76:	4290      	cmp	r0, r2
    3d78:	4192      	sbcs	r2, r2
    3d7a:	4252      	negs	r2, r2
    3d7c:	e00a      	b.n	3d94 <_usb_d_dev_ep_enable+0x168>
    3d7e:	2006      	movs	r0, #6
    3d80:	e7e3      	b.n	3d4a <_usb_d_dev_ep_enable+0x11e>
    3d82:	2005      	movs	r0, #5
    3d84:	e7e1      	b.n	3d4a <_usb_d_dev_ep_enable+0x11e>
    3d86:	2004      	movs	r0, #4
    3d88:	e7df      	b.n	3d4a <_usb_d_dev_ep_enable+0x11e>
    3d8a:	2003      	movs	r0, #3
    3d8c:	e7dd      	b.n	3d4a <_usb_d_dev_ep_enable+0x11e>
    3d8e:	2002      	movs	r0, #2
    3d90:	e7db      	b.n	3d4a <_usb_d_dev_ep_enable+0x11e>
    3d92:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d94:	0712      	lsls	r2, r2, #28
    3d96:	430a      	orrs	r2, r1
    3d98:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3d9a:	001a      	movs	r2, r3
    3d9c:	3208      	adds	r2, #8
    3d9e:	0152      	lsls	r2, r2, #5
    3da0:	495e      	ldr	r1, [pc, #376]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3da2:	468c      	mov	ip, r1
    3da4:	4462      	add	r2, ip
    3da6:	2040      	movs	r0, #64	; 0x40
    3da8:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3daa:	2180      	movs	r1, #128	; 0x80
    3dac:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    3dae:	4a5d      	ldr	r2, [pc, #372]	; (3f24 <_usb_d_dev_ep_enable+0x2f8>)
    3db0:	015b      	lsls	r3, r3, #5
    3db2:	18d3      	adds	r3, r2, r3
    3db4:	2100      	movs	r1, #0
    3db6:	7299      	strb	r1, [r3, #10]
    3db8:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3dba:	4959      	ldr	r1, [pc, #356]	; (3f20 <_usb_d_dev_ep_enable+0x2f4>)
    3dbc:	000b      	movs	r3, r1
    3dbe:	3320      	adds	r3, #32
    3dc0:	00a6      	lsls	r6, r4, #2
    3dc2:	1937      	adds	r7, r6, r4
    3dc4:	00bd      	lsls	r5, r7, #2
    3dc6:	195b      	adds	r3, r3, r5
    3dc8:	3326      	adds	r3, #38	; 0x26
    3dca:	781b      	ldrb	r3, [r3, #0]
    3dcc:	250f      	movs	r5, #15
    3dce:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3dd0:	1937      	adds	r7, r6, r4
    3dd2:	00bd      	lsls	r5, r7, #2
    3dd4:	194d      	adds	r5, r1, r5
    3dd6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	bank->ADDR.reg          = addr;
    3dd8:	015d      	lsls	r5, r3, #5
    3dda:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    3ddc:	1934      	adds	r4, r6, r4
    3dde:	00a6      	lsls	r6, r4, #2
    3de0:	1989      	adds	r1, r1, r6
    3de2:	3144      	adds	r1, #68	; 0x44
    3de4:	8809      	ldrh	r1, [r1, #0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3de6:	1952      	adds	r2, r2, r5
    3de8:	6854      	ldr	r4, [r2, #4]
    3dea:	0489      	lsls	r1, r1, #18
    3dec:	0909      	lsrs	r1, r1, #4
    3dee:	4e4f      	ldr	r6, [pc, #316]	; (3f2c <_usb_d_dev_ep_enable+0x300>)
    3df0:	4034      	ands	r4, r6
    3df2:	4321      	orrs	r1, r4
    3df4:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3df6:	6851      	ldr	r1, [r2, #4]
    3df8:	0b89      	lsrs	r1, r1, #14
    3dfa:	038c      	lsls	r4, r1, #14
    3dfc:	6054      	str	r4, [r2, #4]
    3dfe:	3308      	adds	r3, #8
    3e00:	015b      	lsls	r3, r3, #5
    3e02:	4463      	add	r3, ip
    3e04:	22b0      	movs	r2, #176	; 0xb0
    3e06:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e08:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3e0a:	4b49      	ldr	r3, [pc, #292]	; (3f30 <_usb_d_dev_ep_enable+0x304>)
    3e0c:	469c      	mov	ip, r3
    3e0e:	4465      	add	r5, ip
    3e10:	2310      	movs	r3, #16
    3e12:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    3e14:	2000      	movs	r0, #0
    3e16:	e067      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e18:	2206      	movs	r2, #6
    3e1a:	e7bb      	b.n	3d94 <_usb_d_dev_ep_enable+0x168>
    3e1c:	2205      	movs	r2, #5
    3e1e:	e7b9      	b.n	3d94 <_usb_d_dev_ep_enable+0x168>
    3e20:	2204      	movs	r2, #4
    3e22:	e7b7      	b.n	3d94 <_usb_d_dev_ep_enable+0x168>
    3e24:	2203      	movs	r2, #3
    3e26:	e7b5      	b.n	3d94 <_usb_d_dev_ep_enable+0x168>
    3e28:	2202      	movs	r2, #2
    3e2a:	e7b3      	b.n	3d94 <_usb_d_dev_ep_enable+0x168>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3e2c:	2270      	movs	r2, #112	; 0x70
    3e2e:	422a      	tst	r2, r5
    3e30:	d000      	beq.n	3e34 <_usb_d_dev_ep_enable+0x208>
    3e32:	e06d      	b.n	3f10 <_usb_d_dev_ep_enable+0x2e4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3e34:	493a      	ldr	r1, [pc, #232]	; (3f20 <_usb_d_dev_ep_enable+0x2f4>)
    3e36:	00a0      	lsls	r0, r4, #2
    3e38:	1907      	adds	r7, r0, r4
    3e3a:	00ba      	lsls	r2, r7, #2
    3e3c:	188a      	adds	r2, r1, r2
    3e3e:	3240      	adds	r2, #64	; 0x40
    3e40:	79d2      	ldrb	r2, [r2, #7]
    3e42:	0752      	lsls	r2, r2, #29
    3e44:	0e52      	lsrs	r2, r2, #25
    3e46:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3e48:	001a      	movs	r2, r3
    3e4a:	3208      	adds	r2, #8
    3e4c:	0152      	lsls	r2, r2, #5
    3e4e:	4f33      	ldr	r7, [pc, #204]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3e50:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e52:	1904      	adds	r4, r0, r4
    3e54:	00a2      	lsls	r2, r4, #2
    3e56:	1889      	adds	r1, r1, r2
    3e58:	3144      	adds	r1, #68	; 0x44
    3e5a:	8809      	ldrh	r1, [r1, #0]
    3e5c:	048a      	lsls	r2, r1, #18
    3e5e:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e60:	2080      	movs	r0, #128	; 0x80
    3e62:	0080      	lsls	r0, r0, #2
    3e64:	4281      	cmp	r1, r0
    3e66:	d810      	bhi.n	3e8a <_usb_d_dev_ep_enable+0x25e>
    3e68:	3801      	subs	r0, #1
    3e6a:	38ff      	subs	r0, #255	; 0xff
    3e6c:	4281      	cmp	r1, r0
    3e6e:	d81f      	bhi.n	3eb0 <_usb_d_dev_ep_enable+0x284>
    3e70:	2980      	cmp	r1, #128	; 0x80
    3e72:	d81f      	bhi.n	3eb4 <_usb_d_dev_ep_enable+0x288>
    3e74:	2940      	cmp	r1, #64	; 0x40
    3e76:	d81f      	bhi.n	3eb8 <_usb_d_dev_ep_enable+0x28c>
    3e78:	2920      	cmp	r1, #32
    3e7a:	d81f      	bhi.n	3ebc <_usb_d_dev_ep_enable+0x290>
    3e7c:	2910      	cmp	r1, #16
    3e7e:	d81f      	bhi.n	3ec0 <_usb_d_dev_ep_enable+0x294>
    3e80:	38f8      	subs	r0, #248	; 0xf8
    3e82:	4288      	cmp	r0, r1
    3e84:	4189      	sbcs	r1, r1
    3e86:	4249      	negs	r1, r1
    3e88:	e000      	b.n	3e8c <_usb_d_dev_ep_enable+0x260>
    3e8a:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e8c:	0709      	lsls	r1, r1, #28
    3e8e:	430a      	orrs	r2, r1
    3e90:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e92:	001a      	movs	r2, r3
    3e94:	3208      	adds	r2, #8
    3e96:	0152      	lsls	r2, r2, #5
    3e98:	4920      	ldr	r1, [pc, #128]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3e9a:	468c      	mov	ip, r1
    3e9c:	4462      	add	r2, ip
    3e9e:	2180      	movs	r1, #128	; 0x80
    3ea0:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    3ea2:	015a      	lsls	r2, r3, #5
    3ea4:	4b1f      	ldr	r3, [pc, #124]	; (3f24 <_usb_d_dev_ep_enable+0x2f8>)
    3ea6:	189b      	adds	r3, r3, r2
    3ea8:	2200      	movs	r2, #0
    3eaa:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    3eac:	2000      	movs	r0, #0
    3eae:	e01b      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3eb0:	2106      	movs	r1, #6
    3eb2:	e7eb      	b.n	3e8c <_usb_d_dev_ep_enable+0x260>
    3eb4:	2105      	movs	r1, #5
    3eb6:	e7e9      	b.n	3e8c <_usb_d_dev_ep_enable+0x260>
    3eb8:	2104      	movs	r1, #4
    3eba:	e7e7      	b.n	3e8c <_usb_d_dev_ep_enable+0x260>
    3ebc:	2103      	movs	r1, #3
    3ebe:	e7e5      	b.n	3e8c <_usb_d_dev_ep_enable+0x260>
    3ec0:	2102      	movs	r1, #2
    3ec2:	e7e3      	b.n	3e8c <_usb_d_dev_ep_enable+0x260>
    3ec4:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3ec6:	0709      	lsls	r1, r1, #28
    3ec8:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3eca:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3ecc:	001a      	movs	r2, r3
    3ece:	3208      	adds	r2, #8
    3ed0:	0152      	lsls	r2, r2, #5
    3ed2:	4912      	ldr	r1, [pc, #72]	; (3f1c <_usb_d_dev_ep_enable+0x2f0>)
    3ed4:	468c      	mov	ip, r1
    3ed6:	4462      	add	r2, ip
    3ed8:	2140      	movs	r1, #64	; 0x40
    3eda:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    3edc:	015b      	lsls	r3, r3, #5
    3ede:	4a11      	ldr	r2, [pc, #68]	; (3f24 <_usb_d_dev_ep_enable+0x2f8>)
    3ee0:	18d3      	adds	r3, r2, r3
    3ee2:	2200      	movs	r2, #0
    3ee4:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    3ee6:	2000      	movs	r0, #0
}
    3ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3eea:	2106      	movs	r1, #6
    3eec:	e7eb      	b.n	3ec6 <_usb_d_dev_ep_enable+0x29a>
    3eee:	2105      	movs	r1, #5
    3ef0:	e7e9      	b.n	3ec6 <_usb_d_dev_ep_enable+0x29a>
    3ef2:	2104      	movs	r1, #4
    3ef4:	e7e7      	b.n	3ec6 <_usb_d_dev_ep_enable+0x29a>
    3ef6:	2103      	movs	r1, #3
    3ef8:	e7e5      	b.n	3ec6 <_usb_d_dev_ep_enable+0x29a>
    3efa:	2102      	movs	r1, #2
    3efc:	e7e3      	b.n	3ec6 <_usb_d_dev_ep_enable+0x29a>
		return -USB_ERR_PARAM;
    3efe:	2012      	movs	r0, #18
    3f00:	4240      	negs	r0, r0
    3f02:	e7f1      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
    3f04:	2012      	movs	r0, #18
    3f06:	4240      	negs	r0, r0
    3f08:	e7ee      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    3f0a:	2014      	movs	r0, #20
    3f0c:	4240      	negs	r0, r0
    3f0e:	e7eb      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    3f10:	2014      	movs	r0, #20
    3f12:	4240      	negs	r0, r0
    3f14:	e7e8      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    3f16:	2014      	movs	r0, #20
    3f18:	4240      	negs	r0, r0
    3f1a:	e7e5      	b.n	3ee8 <_usb_d_dev_ep_enable+0x2bc>
    3f1c:	41005000 	.word	0x41005000
    3f20:	200006c0 	.word	0x200006c0
    3f24:	20000640 	.word	0x20000640
    3f28:	0fffc000 	.word	0x0fffc000
    3f2c:	f0003fff 	.word	0xf0003fff
    3f30:	41005109 	.word	0x41005109

00003f34 <_usb_d_dev_ep_stall>:
{
    3f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3f36:	220f      	movs	r2, #15
    3f38:	4002      	ands	r2, r0
    3f3a:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3f3c:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3f3e:	2a00      	cmp	r2, #0
    3f40:	d005      	beq.n	3f4e <_usb_d_dev_ep_stall+0x1a>
    3f42:	2800      	cmp	r0, #0
    3f44:	db01      	blt.n	3f4a <_usb_d_dev_ep_stall+0x16>
    3f46:	0013      	movs	r3, r2
    3f48:	e002      	b.n	3f50 <_usb_d_dev_ep_stall+0x1c>
    3f4a:	1d13      	adds	r3, r2, #4
    3f4c:	e000      	b.n	3f50 <_usb_d_dev_ep_stall+0x1c>
    3f4e:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    3f50:	001d      	movs	r5, r3
    3f52:	0098      	lsls	r0, r3, #2
    3f54:	18c0      	adds	r0, r0, r3
    3f56:	0083      	lsls	r3, r0, #2
    3f58:	3310      	adds	r3, #16
    3f5a:	0018      	movs	r0, r3
    3f5c:	4b47      	ldr	r3, [pc, #284]	; (407c <_usb_d_dev_ep_stall+0x148>)
    3f5e:	3320      	adds	r3, #32
    3f60:	181b      	adds	r3, r3, r0
    3f62:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    3f64:	2a04      	cmp	r2, #4
    3f66:	d900      	bls.n	3f6a <_usb_d_dev_ep_stall+0x36>
    3f68:	e084      	b.n	4074 <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    3f6a:	2901      	cmp	r1, #1
    3f6c:	d018      	beq.n	3fa0 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3f6e:	2900      	cmp	r1, #0
    3f70:	d03d      	beq.n	3fee <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f72:	00aa      	lsls	r2, r5, #2
    3f74:	1952      	adds	r2, r2, r5
    3f76:	0091      	lsls	r1, r2, #2
    3f78:	4b40      	ldr	r3, [pc, #256]	; (407c <_usb_d_dev_ep_stall+0x148>)
    3f7a:	3320      	adds	r3, #32
    3f7c:	185b      	adds	r3, r3, r1
    3f7e:	3326      	adds	r3, #38	; 0x26
    3f80:	781a      	ldrb	r2, [r3, #0]
    3f82:	230f      	movs	r3, #15
    3f84:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3f86:	3308      	adds	r3, #8
    3f88:	015b      	lsls	r3, r3, #5
    3f8a:	4a3d      	ldr	r2, [pc, #244]	; (4080 <_usb_d_dev_ep_stall+0x14c>)
    3f8c:	4694      	mov	ip, r2
    3f8e:	4463      	add	r3, ip
    3f90:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f92:	2310      	movs	r3, #16
    3f94:	40a3      	lsls	r3, r4
    3f96:	4018      	ands	r0, r3
    3f98:	1e43      	subs	r3, r0, #1
    3f9a:	4198      	sbcs	r0, r3
    3f9c:	b2c0      	uxtb	r0, r0
}
    3f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3fa0:	4836      	ldr	r0, [pc, #216]	; (407c <_usb_d_dev_ep_stall+0x148>)
    3fa2:	0003      	movs	r3, r0
    3fa4:	3320      	adds	r3, #32
    3fa6:	00aa      	lsls	r2, r5, #2
    3fa8:	1956      	adds	r6, r2, r5
    3faa:	00b1      	lsls	r1, r6, #2
    3fac:	185b      	adds	r3, r3, r1
    3fae:	3326      	adds	r3, #38	; 0x26
    3fb0:	781b      	ldrb	r3, [r3, #0]
    3fb2:	210f      	movs	r1, #15
    3fb4:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3fb6:	2610      	movs	r6, #16
    3fb8:	40a6      	lsls	r6, r4
    3fba:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3fbc:	0019      	movs	r1, r3
    3fbe:	3108      	adds	r1, #8
    3fc0:	0149      	lsls	r1, r1, #5
    3fc2:	4f2f      	ldr	r7, [pc, #188]	; (4080 <_usb_d_dev_ep_stall+0x14c>)
    3fc4:	46bc      	mov	ip, r7
    3fc6:	4461      	add	r1, ip
    3fc8:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3fca:	2120      	movs	r1, #32
    3fcc:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3fce:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3fd0:	0159      	lsls	r1, r3, #5
    3fd2:	4b2c      	ldr	r3, [pc, #176]	; (4084 <_usb_d_dev_ep_stall+0x150>)
    3fd4:	469c      	mov	ip, r3
    3fd6:	4461      	add	r1, ip
    3fd8:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    3fda:	1952      	adds	r2, r2, r5
    3fdc:	0093      	lsls	r3, r2, #2
    3fde:	18c3      	adds	r3, r0, r3
    3fe0:	3340      	adds	r3, #64	; 0x40
    3fe2:	79da      	ldrb	r2, [r3, #7]
    3fe4:	2108      	movs	r1, #8
    3fe6:	430a      	orrs	r2, r1
    3fe8:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3fea:	2000      	movs	r0, #0
    3fec:	e7d7      	b.n	3f9e <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3fee:	7c9a      	ldrb	r2, [r3, #18]
    3ff0:	310f      	adds	r1, #15
    3ff2:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3ff4:	0011      	movs	r1, r2
    3ff6:	3108      	adds	r1, #8
    3ff8:	0149      	lsls	r1, r1, #5
    3ffa:	4821      	ldr	r0, [pc, #132]	; (4080 <_usb_d_dev_ep_stall+0x14c>)
    3ffc:	4684      	mov	ip, r0
    3ffe:	4461      	add	r1, ip
    4000:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4002:	2110      	movs	r1, #16
    4004:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    4006:	4208      	tst	r0, r1
    4008:	d024      	beq.n	4054 <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    400a:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    400c:	0010      	movs	r0, r2
    400e:	3008      	adds	r0, #8
    4010:	0140      	lsls	r0, r0, #5
    4012:	4460      	add	r0, ip
    4014:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4016:	2120      	movs	r1, #32
    4018:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    401a:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    401c:	0155      	lsls	r5, r2, #5
    401e:	4f1a      	ldr	r7, [pc, #104]	; (4088 <_usb_d_dev_ep_stall+0x154>)
    4020:	46bc      	mov	ip, r7
    4022:	4465      	add	r5, ip
    4024:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4026:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4028:	4208      	tst	r0, r1
    402a:	d00a      	beq.n	4042 <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    402c:	0011      	movs	r1, r2
    402e:	3108      	adds	r1, #8
    4030:	0149      	lsls	r1, r1, #5
    4032:	4813      	ldr	r0, [pc, #76]	; (4080 <_usb_d_dev_ep_stall+0x14c>)
    4034:	4684      	mov	ip, r0
    4036:	4461      	add	r1, ip
    4038:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    403a:	2001      	movs	r0, #1
    403c:	40a0      	lsls	r0, r4
    403e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4040:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4042:	7cd8      	ldrb	r0, [r3, #19]
    4044:	2107      	movs	r1, #7
    4046:	4001      	ands	r1, r0
    4048:	2901      	cmp	r1, #1
    404a:	d005      	beq.n	4058 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    404c:	7cda      	ldrb	r2, [r3, #19]
    404e:	2108      	movs	r1, #8
    4050:	438a      	bics	r2, r1
    4052:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4054:	2000      	movs	r0, #0
    4056:	e7a2      	b.n	3f9e <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4058:	3208      	adds	r2, #8
    405a:	0152      	lsls	r2, r2, #5
    405c:	4908      	ldr	r1, [pc, #32]	; (4080 <_usb_d_dev_ep_stall+0x14c>)
    405e:	468c      	mov	ip, r1
    4060:	4462      	add	r2, ip
    4062:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4064:	2230      	movs	r2, #48	; 0x30
    4066:	4211      	tst	r1, r2
    4068:	d1f4      	bne.n	4054 <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    406a:	0002      	movs	r2, r0
    406c:	2108      	movs	r1, #8
    406e:	438a      	bics	r2, r1
    4070:	74da      	strb	r2, [r3, #19]
    4072:	e7ef      	b.n	4054 <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    4074:	2012      	movs	r0, #18
    4076:	4240      	negs	r0, r0
    4078:	e791      	b.n	3f9e <_usb_d_dev_ep_stall+0x6a>
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	200006c0 	.word	0x200006c0
    4080:	41005000 	.word	0x41005000
    4084:	41005109 	.word	0x41005109
    4088:	41005108 	.word	0x41005108

0000408c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    408c:	b570      	push	{r4, r5, r6, lr}
    408e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    4090:	240f      	movs	r4, #15
    4092:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4094:	0162      	lsls	r2, r4, #5
    4096:	4b18      	ldr	r3, [pc, #96]	; (40f8 <_usb_d_dev_ep_read_req+0x6c>)
    4098:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    409a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    409c:	685d      	ldr	r5, [r3, #4]
    409e:	04ad      	lsls	r5, r5, #18
    40a0:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    40a2:	2c04      	cmp	r4, #4
    40a4:	d81f      	bhi.n	40e6 <_usb_d_dev_ep_read_req+0x5a>
    40a6:	2e00      	cmp	r6, #0
    40a8:	d020      	beq.n	40ec <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    40aa:	0023      	movs	r3, r4
    40ac:	3308      	adds	r3, #8
    40ae:	015b      	lsls	r3, r3, #5
    40b0:	4a12      	ldr	r2, [pc, #72]	; (40fc <_usb_d_dev_ep_read_req+0x70>)
    40b2:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    40b4:	2b11      	cmp	r3, #17
    40b6:	d11c      	bne.n	40f2 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    40b8:	0023      	movs	r3, r4
    40ba:	3308      	adds	r3, #8
    40bc:	015b      	lsls	r3, r3, #5
    40be:	4694      	mov	ip, r2
    40c0:	4463      	add	r3, ip
    40c2:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    40c4:	06db      	lsls	r3, r3, #27
    40c6:	d401      	bmi.n	40cc <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    40c8:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    40ca:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    40cc:	2208      	movs	r2, #8
    40ce:	0030      	movs	r0, r6
    40d0:	4b0b      	ldr	r3, [pc, #44]	; (4100 <_usb_d_dev_ep_read_req+0x74>)
    40d2:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40d4:	3408      	adds	r4, #8
    40d6:	0164      	lsls	r4, r4, #5
    40d8:	4b08      	ldr	r3, [pc, #32]	; (40fc <_usb_d_dev_ep_read_req+0x70>)
    40da:	469c      	mov	ip, r3
    40dc:	4464      	add	r4, ip
    40de:	2310      	movs	r3, #16
    40e0:	71e3      	strb	r3, [r4, #7]
	return bytes;
    40e2:	0028      	movs	r0, r5
    40e4:	e7f1      	b.n	40ca <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    40e6:	2012      	movs	r0, #18
    40e8:	4240      	negs	r0, r0
    40ea:	e7ee      	b.n	40ca <_usb_d_dev_ep_read_req+0x3e>
    40ec:	2012      	movs	r0, #18
    40ee:	4240      	negs	r0, r0
    40f0:	e7eb      	b.n	40ca <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    40f2:	2013      	movs	r0, #19
    40f4:	4240      	negs	r0, r0
    40f6:	e7e8      	b.n	40ca <_usb_d_dev_ep_read_req+0x3e>
    40f8:	20000640 	.word	0x20000640
    40fc:	41005000 	.word	0x41005000
    4100:	000071e1 	.word	0x000071e1

00004104 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4104:	b5f0      	push	{r4, r5, r6, r7, lr}
    4106:	46de      	mov	lr, fp
    4108:	4657      	mov	r7, sl
    410a:	464e      	mov	r6, r9
    410c:	4645      	mov	r5, r8
    410e:	b5e0      	push	{r5, r6, r7, lr}
    4110:	b085      	sub	sp, #20
    4112:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4114:	7a04      	ldrb	r4, [r0, #8]
    4116:	220f      	movs	r2, #15
    4118:	4022      	ands	r2, r4
    411a:	b264      	sxtb	r4, r4
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    411c:	0fe3      	lsrs	r3, r4, #31
    411e:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4120:	2a00      	cmp	r2, #0
    4122:	d005      	beq.n	4130 <_usb_d_dev_ep_trans+0x2c>
    4124:	2c00      	cmp	r4, #0
    4126:	db01      	blt.n	412c <_usb_d_dev_ep_trans+0x28>
    4128:	0010      	movs	r0, r2
    412a:	e002      	b.n	4132 <_usb_d_dev_ep_trans+0x2e>
    412c:	1d10      	adds	r0, r2, #4
    412e:	e000      	b.n	4132 <_usb_d_dev_ep_trans+0x2e>
    4130:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    4132:	0005      	movs	r5, r0
    4134:	4b62      	ldr	r3, [pc, #392]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    4136:	001f      	movs	r7, r3
    4138:	3720      	adds	r7, #32
    413a:	0081      	lsls	r1, r0, #2
    413c:	180e      	adds	r6, r1, r0
    413e:	46b4      	mov	ip, r6
    4140:	00b6      	lsls	r6, r6, #2
    4142:	3610      	adds	r6, #16
    4144:	19bf      	adds	r7, r7, r6
    4146:	3704      	adds	r7, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4148:	4661      	mov	r1, ip
    414a:	0088      	lsls	r0, r1, #2
    414c:	181b      	adds	r3, r3, r0
    414e:	3344      	adds	r3, #68	; 0x44
    4150:	881b      	ldrh	r3, [r3, #0]
    4152:	495c      	ldr	r1, [pc, #368]	; (42c4 <_usb_d_dev_ep_trans+0x1c0>)
    4154:	428b      	cmp	r3, r1
    4156:	d042      	beq.n	41de <_usb_d_dev_ep_trans+0xda>
    4158:	1e5e      	subs	r6, r3, #1
    415a:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    415c:	4641      	mov	r1, r8
    415e:	6849      	ldr	r1, [r1, #4]
    4160:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4162:	2a04      	cmp	r2, #4
    4164:	d900      	bls.n	4168 <_usb_d_dev_ep_trans+0x64>
    4166:	e0a1      	b.n	42ac <_usb_d_dev_ep_trans+0x1a8>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    4168:	4642      	mov	r2, r8
    416a:	6812      	ldr	r2, [r2, #0]
    416c:	4856      	ldr	r0, [pc, #344]	; (42c8 <_usb_d_dev_ep_trans+0x1c4>)
    416e:	4282      	cmp	r2, r0
    4170:	d90c      	bls.n	418c <_usb_d_dev_ep_trans+0x88>
    4172:	1888      	adds	r0, r1, r2
    4174:	9001      	str	r0, [sp, #4]
    4176:	4855      	ldr	r0, [pc, #340]	; (42cc <_usb_d_dev_ep_trans+0x1c8>)
    4178:	4684      	mov	ip, r0
    417a:	9801      	ldr	r0, [sp, #4]
    417c:	4560      	cmp	r0, ip
    417e:	d805      	bhi.n	418c <_usb_d_dev_ep_trans+0x88>
    4180:	0792      	lsls	r2, r2, #30
    4182:	d103      	bne.n	418c <_usb_d_dev_ep_trans+0x88>
	    || (!dir && (trans->size < ept->size))) {
    4184:	2c00      	cmp	r4, #0
    4186:	db2c      	blt.n	41e2 <_usb_d_dev_ep_trans+0xde>
    4188:	4299      	cmp	r1, r3
    418a:	d22d      	bcs.n	41e8 <_usb_d_dev_ep_trans+0xe4>
		if (!ept->cache) {
    418c:	00ab      	lsls	r3, r5, #2
    418e:	195b      	adds	r3, r3, r5
    4190:	009a      	lsls	r2, r3, #2
    4192:	4b4b      	ldr	r3, [pc, #300]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    4194:	189b      	adds	r3, r3, r2
    4196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4198:	2b00      	cmp	r3, #0
    419a:	d100      	bne.n	419e <_usb_d_dev_ep_trans+0x9a>
    419c:	e089      	b.n	42b2 <_usb_d_dev_ep_trans+0x1ae>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    419e:	2301      	movs	r3, #1
    41a0:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    41a2:	2c00      	cmp	r4, #0
    41a4:	db0a      	blt.n	41bc <_usb_d_dev_ep_trans+0xb8>
    41a6:	2e00      	cmp	r6, #0
    41a8:	d008      	beq.n	41bc <_usb_d_dev_ep_trans+0xb8>
		if (!ept->cache) {
    41aa:	00ab      	lsls	r3, r5, #2
    41ac:	195b      	adds	r3, r3, r5
    41ae:	009a      	lsls	r2, r3, #2
    41b0:	4b43      	ldr	r3, [pc, #268]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    41b2:	189b      	adds	r3, r3, r2
    41b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    41b6:	2b00      	cmp	r3, #0
    41b8:	d100      	bne.n	41bc <_usb_d_dev_ep_trans+0xb8>
    41ba:	e07d      	b.n	42b8 <_usb_d_dev_ep_trans+0x1b4>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    41bc:	00aa      	lsls	r2, r5, #2
    41be:	1952      	adds	r2, r2, r5
    41c0:	0091      	lsls	r1, r2, #2
    41c2:	4b3f      	ldr	r3, [pc, #252]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    41c4:	185b      	adds	r3, r3, r1
    41c6:	3340      	adds	r3, #64	; 0x40
    41c8:	79db      	ldrb	r3, [r3, #7]
    41ca:	071b      	lsls	r3, r3, #28
    41cc:	d50f      	bpl.n	41ee <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
    41ce:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    41d0:	b005      	add	sp, #20
    41d2:	bc3c      	pop	{r2, r3, r4, r5}
    41d4:	4690      	mov	r8, r2
    41d6:	4699      	mov	r9, r3
    41d8:	46a2      	mov	sl, r4
    41da:	46ab      	mov	fp, r5
    41dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    41de:	001e      	movs	r6, r3
    41e0:	e7bc      	b.n	415c <_usb_d_dev_ep_trans+0x58>
	bool use_cache = false;
    41e2:	2300      	movs	r3, #0
    41e4:	9301      	str	r3, [sp, #4]
    41e6:	e7dc      	b.n	41a2 <_usb_d_dev_ep_trans+0x9e>
    41e8:	2300      	movs	r3, #0
    41ea:	9301      	str	r3, [sp, #4]
    41ec:	e7d9      	b.n	41a2 <_usb_d_dev_ep_trans+0x9e>
	atomic_enter_critical(&flags);
    41ee:	a803      	add	r0, sp, #12
    41f0:	4b37      	ldr	r3, [pc, #220]	; (42d0 <_usb_d_dev_ep_trans+0x1cc>)
    41f2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    41f4:	00aa      	lsls	r2, r5, #2
    41f6:	1952      	adds	r2, r2, r5
    41f8:	0091      	lsls	r1, r2, #2
    41fa:	4b31      	ldr	r3, [pc, #196]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    41fc:	185b      	adds	r3, r3, r1
    41fe:	3340      	adds	r3, #64	; 0x40
    4200:	79db      	ldrb	r3, [r3, #7]
    4202:	065b      	lsls	r3, r3, #25
    4204:	d430      	bmi.n	4268 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    4206:	00ab      	lsls	r3, r5, #2
    4208:	195b      	adds	r3, r3, r5
    420a:	009a      	lsls	r2, r3, #2
    420c:	4b2c      	ldr	r3, [pc, #176]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    420e:	469b      	mov	fp, r3
    4210:	4493      	add	fp, r2
    4212:	2340      	movs	r3, #64	; 0x40
    4214:	445b      	add	r3, fp
    4216:	469a      	mov	sl, r3
    4218:	79db      	ldrb	r3, [r3, #7]
    421a:	2240      	movs	r2, #64	; 0x40
    421c:	4313      	orrs	r3, r2
    421e:	4652      	mov	r2, sl
    4220:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    4222:	a803      	add	r0, sp, #12
    4224:	4b2b      	ldr	r3, [pc, #172]	; (42d4 <_usb_d_dev_ep_trans+0x1d0>)
    4226:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    4228:	465b      	mov	r3, fp
    422a:	4642      	mov	r2, r8
    422c:	6812      	ldr	r2, [r2, #0]
    422e:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    4230:	4642      	mov	r2, r8
    4232:	6852      	ldr	r2, [r2, #4]
    4234:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    4236:	2300      	movs	r3, #0
    4238:	465a      	mov	r2, fp
    423a:	63d3      	str	r3, [r2, #60]	; 0x3c
	ept->flags.bits.dir       = dir;
    423c:	464b      	mov	r3, r9
    423e:	01db      	lsls	r3, r3, #7
    4240:	4652      	mov	r2, sl
    4242:	79d2      	ldrb	r2, [r2, #7]
    4244:	217f      	movs	r1, #127	; 0x7f
    4246:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    4248:	9a01      	ldr	r2, [sp, #4]
    424a:	0152      	lsls	r2, r2, #5
    424c:	430b      	orrs	r3, r1
    424e:	2120      	movs	r1, #32
    4250:	438b      	bics	r3, r1
    4252:	431a      	orrs	r2, r3
    4254:	4653      	mov	r3, sl
    4256:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4258:	4643      	mov	r3, r8
    425a:	7a5b      	ldrb	r3, [r3, #9]
    425c:	2b00      	cmp	r3, #0
    425e:	d008      	beq.n	4272 <_usb_d_dev_ep_trans+0x16e>
    4260:	2e00      	cmp	r6, #0
    4262:	d01b      	beq.n	429c <_usb_d_dev_ep_trans+0x198>
    4264:	2200      	movs	r2, #0
    4266:	e005      	b.n	4274 <_usb_d_dev_ep_trans+0x170>
		atomic_leave_critical(&flags);
    4268:	a803      	add	r0, sp, #12
    426a:	4b1a      	ldr	r3, [pc, #104]	; (42d4 <_usb_d_dev_ep_trans+0x1d0>)
    426c:	4798      	blx	r3
		return USB_BUSY;
    426e:	2001      	movs	r0, #1
    4270:	e7ae      	b.n	41d0 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4272:	2200      	movs	r2, #0
    4274:	00ab      	lsls	r3, r5, #2
    4276:	195d      	adds	r5, r3, r5
    4278:	00a9      	lsls	r1, r5, #2
    427a:	4b11      	ldr	r3, [pc, #68]	; (42c0 <_usb_d_dev_ep_trans+0x1bc>)
    427c:	185b      	adds	r3, r3, r1
    427e:	3340      	adds	r3, #64	; 0x40
    4280:	0111      	lsls	r1, r2, #4
    4282:	79da      	ldrb	r2, [r3, #7]
    4284:	2010      	movs	r0, #16
    4286:	4382      	bics	r2, r0
    4288:	430a      	orrs	r2, r1
    428a:	71da      	strb	r2, [r3, #7]
	if (dir) {
    428c:	2c00      	cmp	r4, #0
    428e:	db07      	blt.n	42a0 <_usb_d_dev_ep_trans+0x19c>
		_usb_d_dev_out_next(ept, false);
    4290:	2100      	movs	r1, #0
    4292:	0038      	movs	r0, r7
    4294:	4b10      	ldr	r3, [pc, #64]	; (42d8 <_usb_d_dev_ep_trans+0x1d4>)
    4296:	4798      	blx	r3
	return ERR_NONE;
    4298:	2000      	movs	r0, #0
    429a:	e799      	b.n	41d0 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    429c:	2201      	movs	r2, #1
    429e:	e7e9      	b.n	4274 <_usb_d_dev_ep_trans+0x170>
		_usb_d_dev_in_next(ept, false);
    42a0:	2100      	movs	r1, #0
    42a2:	0038      	movs	r0, r7
    42a4:	4b0d      	ldr	r3, [pc, #52]	; (42dc <_usb_d_dev_ep_trans+0x1d8>)
    42a6:	4798      	blx	r3
	return ERR_NONE;
    42a8:	2000      	movs	r0, #0
    42aa:	e791      	b.n	41d0 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    42ac:	2012      	movs	r0, #18
    42ae:	4240      	negs	r0, r0
    42b0:	e78e      	b.n	41d0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    42b2:	2013      	movs	r0, #19
    42b4:	4240      	negs	r0, r0
    42b6:	e78b      	b.n	41d0 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    42b8:	2012      	movs	r0, #18
    42ba:	4240      	negs	r0, r0
    42bc:	e788      	b.n	41d0 <_usb_d_dev_ep_trans+0xcc>
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	200006c0 	.word	0x200006c0
    42c4:	000003ff 	.word	0x000003ff
    42c8:	1fffffff 	.word	0x1fffffff
    42cc:	20007fff 	.word	0x20007fff
    42d0:	000013f5 	.word	0x000013f5
    42d4:	00001403 	.word	0x00001403
    42d8:	000034a5 	.word	0x000034a5
    42dc:	00003315 	.word	0x00003315

000042e0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    42e0:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    42e2:	220f      	movs	r2, #15
    42e4:	4002      	ands	r2, r0
    42e6:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    42e8:	0fc1      	lsrs	r1, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    42ea:	2a00      	cmp	r2, #0
    42ec:	d005      	beq.n	42fa <_usb_d_dev_ep_abort+0x1a>
    42ee:	2800      	cmp	r0, #0
    42f0:	db01      	blt.n	42f6 <_usb_d_dev_ep_abort+0x16>
    42f2:	0010      	movs	r0, r2
    42f4:	e002      	b.n	42fc <_usb_d_dev_ep_abort+0x1c>
    42f6:	1d10      	adds	r0, r2, #4
    42f8:	e000      	b.n	42fc <_usb_d_dev_ep_abort+0x1c>
    42fa:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    42fc:	0083      	lsls	r3, r0, #2
    42fe:	181b      	adds	r3, r3, r0
    4300:	009c      	lsls	r4, r3, #2
    4302:	3410      	adds	r4, #16
    4304:	4805      	ldr	r0, [pc, #20]	; (431c <_usb_d_dev_ep_abort+0x3c>)
    4306:	3020      	adds	r0, #32
    4308:	1900      	adds	r0, r0, r4
    430a:	3004      	adds	r0, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    430c:	2a04      	cmp	r2, #4
    430e:	d900      	bls.n	4312 <_usb_d_dev_ep_abort+0x32>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    4310:	bd10      	pop	{r4, pc}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    4312:	2202      	movs	r2, #2
    4314:	4b02      	ldr	r3, [pc, #8]	; (4320 <_usb_d_dev_ep_abort+0x40>)
    4316:	4798      	blx	r3
    4318:	e7fa      	b.n	4310 <_usb_d_dev_ep_abort+0x30>
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	200006c0 	.word	0x200006c0
    4320:	00003131 	.word	0x00003131

00004324 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4324:	2900      	cmp	r1, #0
    4326:	d006      	beq.n	4336 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    4328:	2801      	cmp	r0, #1
    432a:	d006      	beq.n	433a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    432c:	2800      	cmp	r0, #0
    432e:	d101      	bne.n	4334 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    4330:	4b03      	ldr	r3, [pc, #12]	; (4340 <_usb_d_dev_register_callback+0x1c>)
    4332:	6219      	str	r1, [r3, #32]
	}
}
    4334:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4336:	4903      	ldr	r1, [pc, #12]	; (4344 <_usb_d_dev_register_callback+0x20>)
    4338:	e7f6      	b.n	4328 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    433a:	4b01      	ldr	r3, [pc, #4]	; (4340 <_usb_d_dev_register_callback+0x1c>)
    433c:	6259      	str	r1, [r3, #36]	; 0x24
    433e:	e7f9      	b.n	4334 <_usb_d_dev_register_callback+0x10>
    4340:	200006c0 	.word	0x200006c0
    4344:	00002ff1 	.word	0x00002ff1

00004348 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    4348:	2900      	cmp	r1, #0
    434a:	d008      	beq.n	435e <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    434c:	2800      	cmp	r0, #0
    434e:	d008      	beq.n	4362 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    4350:	2801      	cmp	r0, #1
    4352:	d009      	beq.n	4368 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    4354:	2802      	cmp	r0, #2
    4356:	d106      	bne.n	4366 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    4358:	4b05      	ldr	r3, [pc, #20]	; (4370 <_usb_d_dev_register_ep_callback+0x28>)
    435a:	6319      	str	r1, [r3, #48]	; 0x30
	}
}
    435c:	e003      	b.n	4366 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    435e:	4905      	ldr	r1, [pc, #20]	; (4374 <_usb_d_dev_register_ep_callback+0x2c>)
    4360:	e7f4      	b.n	434c <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    4362:	4b03      	ldr	r3, [pc, #12]	; (4370 <_usb_d_dev_register_ep_callback+0x28>)
    4364:	6299      	str	r1, [r3, #40]	; 0x28
}
    4366:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    4368:	4b01      	ldr	r3, [pc, #4]	; (4370 <_usb_d_dev_register_ep_callback+0x28>)
    436a:	62d9      	str	r1, [r3, #44]	; 0x2c
    436c:	e7fb      	b.n	4366 <_usb_d_dev_register_ep_callback+0x1e>
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	200006c0 	.word	0x200006c0
    4374:	00002ff1 	.word	0x00002ff1

00004378 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    4378:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    437a:	4b01      	ldr	r3, [pc, #4]	; (4380 <USB_Handler+0x8>)
    437c:	4798      	blx	r3
}
    437e:	bd10      	pop	{r4, pc}
    4380:	000036a9 	.word	0x000036a9

00004384 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4384:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    4386:	798b      	ldrb	r3, [r1, #6]
    4388:	79cc      	ldrb	r4, [r1, #7]
    438a:	0224      	lsls	r4, r4, #8
    438c:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    438e:	2a01      	cmp	r2, #1
    4390:	d00a      	beq.n	43a8 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    4392:	784b      	ldrb	r3, [r1, #1]
    4394:	2b21      	cmp	r3, #33	; 0x21
    4396:	d109      	bne.n	43ac <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    4398:	2c07      	cmp	r4, #7
    439a:	d10a      	bne.n	43b2 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    439c:	2300      	movs	r3, #0
    439e:	0022      	movs	r2, r4
    43a0:	4905      	ldr	r1, [pc, #20]	; (43b8 <cdcdf_acm_get_req+0x34>)
    43a2:	4c06      	ldr	r4, [pc, #24]	; (43bc <cdcdf_acm_get_req+0x38>)
    43a4:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    43a6:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    43a8:	2000      	movs	r0, #0
    43aa:	e7fc      	b.n	43a6 <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    43ac:	200d      	movs	r0, #13
    43ae:	4240      	negs	r0, r0
    43b0:	e7f9      	b.n	43a6 <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    43b2:	2001      	movs	r0, #1
    43b4:	4240      	negs	r0, r0
    43b6:	e7f6      	b.n	43a6 <cdcdf_acm_get_req+0x22>
    43b8:	200009a8 	.word	0x200009a8
    43bc:	000049d1 	.word	0x000049d1

000043c0 <cdcdf_acm_set_req>:
{
    43c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43c2:	b083      	sub	sp, #12
    43c4:	0005      	movs	r5, r0
    43c6:	000f      	movs	r7, r1
    43c8:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    43ca:	798e      	ldrb	r6, [r1, #6]
    43cc:	79cb      	ldrb	r3, [r1, #7]
    43ce:	021b      	lsls	r3, r3, #8
    43d0:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    43d2:	4b23      	ldr	r3, [pc, #140]	; (4460 <cdcdf_acm_set_req+0xa0>)
    43d4:	4798      	blx	r3
	switch (req->bRequest) {
    43d6:	787b      	ldrb	r3, [r7, #1]
    43d8:	2b20      	cmp	r3, #32
    43da:	d005      	beq.n	43e8 <cdcdf_acm_set_req+0x28>
    43dc:	2b22      	cmp	r3, #34	; 0x22
    43de:	d026      	beq.n	442e <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    43e0:	200d      	movs	r0, #13
    43e2:	4240      	negs	r0, r0
}
    43e4:	b003      	add	sp, #12
    43e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    43e8:	2e07      	cmp	r6, #7
    43ea:	d131      	bne.n	4450 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    43ec:	2c00      	cmp	r4, #0
    43ee:	d017      	beq.n	4420 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    43f0:	2207      	movs	r2, #7
    43f2:	0001      	movs	r1, r0
    43f4:	4668      	mov	r0, sp
    43f6:	4b1b      	ldr	r3, [pc, #108]	; (4464 <cdcdf_acm_set_req+0xa4>)
    43f8:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    43fa:	4b1b      	ldr	r3, [pc, #108]	; (4468 <cdcdf_acm_set_req+0xa8>)
    43fc:	689b      	ldr	r3, [r3, #8]
    43fe:	2b00      	cmp	r3, #0
    4400:	d003      	beq.n	440a <cdcdf_acm_set_req+0x4a>
    4402:	4668      	mov	r0, sp
    4404:	4798      	blx	r3
    4406:	2800      	cmp	r0, #0
    4408:	d025      	beq.n	4456 <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    440a:	4b17      	ldr	r3, [pc, #92]	; (4468 <cdcdf_acm_set_req+0xa8>)
    440c:	9a00      	ldr	r2, [sp, #0]
    440e:	601a      	str	r2, [r3, #0]
    4410:	466a      	mov	r2, sp
    4412:	8892      	ldrh	r2, [r2, #4]
    4414:	809a      	strh	r2, [r3, #4]
    4416:	466a      	mov	r2, sp
    4418:	7992      	ldrb	r2, [r2, #6]
    441a:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    441c:	2000      	movs	r0, #0
    441e:	e7e1      	b.n	43e4 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    4420:	2300      	movs	r3, #0
    4422:	0032      	movs	r2, r6
    4424:	0001      	movs	r1, r0
    4426:	0028      	movs	r0, r5
    4428:	4c10      	ldr	r4, [pc, #64]	; (446c <cdcdf_acm_set_req+0xac>)
    442a:	47a0      	blx	r4
    442c:	e7da      	b.n	43e4 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    442e:	2300      	movs	r3, #0
    4430:	2200      	movs	r2, #0
    4432:	2100      	movs	r1, #0
    4434:	2000      	movs	r0, #0
    4436:	4c0d      	ldr	r4, [pc, #52]	; (446c <cdcdf_acm_set_req+0xac>)
    4438:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    443a:	4b0b      	ldr	r3, [pc, #44]	; (4468 <cdcdf_acm_set_req+0xa8>)
    443c:	68db      	ldr	r3, [r3, #12]
    443e:	2b00      	cmp	r3, #0
    4440:	d00b      	beq.n	445a <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    4442:	78ba      	ldrb	r2, [r7, #2]
    4444:	78f8      	ldrb	r0, [r7, #3]
    4446:	0200      	lsls	r0, r0, #8
    4448:	4310      	orrs	r0, r2
    444a:	4798      	blx	r3
		return ERR_NONE;
    444c:	2000      	movs	r0, #0
    444e:	e7c9      	b.n	43e4 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    4450:	2001      	movs	r0, #1
    4452:	4240      	negs	r0, r0
    4454:	e7c6      	b.n	43e4 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    4456:	2000      	movs	r0, #0
    4458:	e7c4      	b.n	43e4 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    445a:	2000      	movs	r0, #0
    445c:	e7c2      	b.n	43e4 <cdcdf_acm_set_req+0x24>
    445e:	46c0      	nop			; (mov r8, r8)
    4460:	00004f5d 	.word	0x00004f5d
    4464:	000071e1 	.word	0x000071e1
    4468:	200009a8 	.word	0x200009a8
    446c:	000049d1 	.word	0x000049d1

00004470 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4470:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    4472:	780c      	ldrb	r4, [r1, #0]
    4474:	0965      	lsrs	r5, r4, #5
    4476:	2303      	movs	r3, #3
    4478:	402b      	ands	r3, r5
    447a:	2b01      	cmp	r3, #1
    447c:	d114      	bne.n	44a8 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    447e:	790d      	ldrb	r5, [r1, #4]
    4480:	794b      	ldrb	r3, [r1, #5]
    4482:	021b      	lsls	r3, r3, #8
    4484:	432b      	orrs	r3, r5
    4486:	4d0b      	ldr	r5, [pc, #44]	; (44b4 <cdcdf_acm_req+0x44>)
    4488:	7c2d      	ldrb	r5, [r5, #16]
    448a:	42ab      	cmp	r3, r5
    448c:	d003      	beq.n	4496 <cdcdf_acm_req+0x26>
    448e:	4d09      	ldr	r5, [pc, #36]	; (44b4 <cdcdf_acm_req+0x44>)
    4490:	7c6d      	ldrb	r5, [r5, #17]
    4492:	42ab      	cmp	r3, r5
    4494:	d10b      	bne.n	44ae <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    4496:	b264      	sxtb	r4, r4
    4498:	2c00      	cmp	r4, #0
    449a:	db02      	blt.n	44a2 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    449c:	4b06      	ldr	r3, [pc, #24]	; (44b8 <cdcdf_acm_req+0x48>)
    449e:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    44a0:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    44a2:	4b06      	ldr	r3, [pc, #24]	; (44bc <cdcdf_acm_req+0x4c>)
    44a4:	4798      	blx	r3
    44a6:	e7fb      	b.n	44a0 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    44a8:	200a      	movs	r0, #10
    44aa:	4240      	negs	r0, r0
    44ac:	e7f8      	b.n	44a0 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    44ae:	200a      	movs	r0, #10
    44b0:	4240      	negs	r0, r0
    44b2:	e7f5      	b.n	44a0 <cdcdf_acm_req+0x30>
    44b4:	200009a8 	.word	0x200009a8
    44b8:	000043c1 	.word	0x000043c1
    44bc:	00004385 	.word	0x00004385

000044c0 <cdcdf_acm_enable>:
{
    44c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c2:	46ce      	mov	lr, r9
    44c4:	4647      	mov	r7, r8
    44c6:	b580      	push	{r7, lr}
    44c8:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    44ca:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    44cc:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    44ce:	2300      	movs	r3, #0
    44d0:	4698      	mov	r8, r3
    44d2:	4643      	mov	r3, r8
    44d4:	2b01      	cmp	r3, #1
    44d6:	d845      	bhi.n	4564 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    44d8:	2800      	cmp	r0, #0
    44da:	d04b      	beq.n	4574 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    44dc:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    44de:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    44e0:	2a02      	cmp	r2, #2
    44e2:	d001      	beq.n	44e8 <cdcdf_acm_enable+0x28>
    44e4:	2a0a      	cmp	r2, #10
    44e6:	d148      	bne.n	457a <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    44e8:	46c1      	mov	r9, r8
    44ea:	4642      	mov	r2, r8
    44ec:	5cba      	ldrb	r2, [r7, r2]
    44ee:	4293      	cmp	r3, r2
    44f0:	d046      	beq.n	4580 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    44f2:	2aff      	cmp	r2, #255	; 0xff
    44f4:	d147      	bne.n	4586 <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    44f6:	4642      	mov	r2, r8
    44f8:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    44fa:	2205      	movs	r2, #5
    44fc:	6871      	ldr	r1, [r6, #4]
    44fe:	4b25      	ldr	r3, [pc, #148]	; (4594 <cdcdf_acm_enable+0xd4>)
    4500:	4798      	blx	r3
    4502:	0004      	movs	r4, r0
		while (NULL != ep) {
    4504:	e00c      	b.n	4520 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4506:	464b      	mov	r3, r9
    4508:	18fb      	adds	r3, r7, r3
    450a:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    450c:	0028      	movs	r0, r5
    450e:	4b22      	ldr	r3, [pc, #136]	; (4598 <cdcdf_acm_enable+0xd8>)
    4510:	4798      	blx	r3
			desc->sod = ep;
    4512:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    4514:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    4516:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4518:	6871      	ldr	r1, [r6, #4]
    451a:	4b20      	ldr	r3, [pc, #128]	; (459c <cdcdf_acm_enable+0xdc>)
    451c:	4798      	blx	r3
    451e:	0004      	movs	r4, r0
		while (NULL != ep) {
    4520:	2c00      	cmp	r4, #0
    4522:	d013      	beq.n	454c <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    4524:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    4526:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    4528:	7922      	ldrb	r2, [r4, #4]
    452a:	7963      	ldrb	r3, [r4, #5]
    452c:	021b      	lsls	r3, r3, #8
    452e:	18d2      	adds	r2, r2, r3
    4530:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4532:	0028      	movs	r0, r5
    4534:	4b1a      	ldr	r3, [pc, #104]	; (45a0 <cdcdf_acm_enable+0xe0>)
    4536:	4798      	blx	r3
    4538:	2800      	cmp	r0, #0
    453a:	d127      	bne.n	458c <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    453c:	b26b      	sxtb	r3, r5
    453e:	2b00      	cmp	r3, #0
    4540:	dbe1      	blt.n	4506 <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4542:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    4544:	0028      	movs	r0, r5
    4546:	4b14      	ldr	r3, [pc, #80]	; (4598 <cdcdf_acm_enable+0xd8>)
    4548:	4798      	blx	r3
    454a:	e7e2      	b.n	4512 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    454c:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    454e:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    4550:	18c0      	adds	r0, r0, r3
    4552:	2204      	movs	r2, #4
    4554:	6871      	ldr	r1, [r6, #4]
    4556:	4b0f      	ldr	r3, [pc, #60]	; (4594 <cdcdf_acm_enable+0xd4>)
    4558:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    455a:	4643      	mov	r3, r8
    455c:	3301      	adds	r3, #1
    455e:	b2db      	uxtb	r3, r3
    4560:	4698      	mov	r8, r3
    4562:	e7b6      	b.n	44d2 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    4564:	2201      	movs	r2, #1
    4566:	4b0f      	ldr	r3, [pc, #60]	; (45a4 <cdcdf_acm_enable+0xe4>)
    4568:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    456a:	2000      	movs	r0, #0
}
    456c:	bc0c      	pop	{r2, r3}
    456e:	4690      	mov	r8, r2
    4570:	4699      	mov	r9, r3
    4572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    4574:	200a      	movs	r0, #10
    4576:	4240      	negs	r0, r0
    4578:	e7f8      	b.n	456c <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    457a:	200a      	movs	r0, #10
    457c:	4240      	negs	r0, r0
    457e:	e7f5      	b.n	456c <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    4580:	2012      	movs	r0, #18
    4582:	4240      	negs	r0, r0
    4584:	e7f2      	b.n	456c <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    4586:	201c      	movs	r0, #28
    4588:	4240      	negs	r0, r0
    458a:	e7ef      	b.n	456c <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    458c:	2014      	movs	r0, #20
    458e:	4240      	negs	r0, r0
    4590:	e7ec      	b.n	456c <cdcdf_acm_enable+0xac>
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	00004f79 	.word	0x00004f79
    4598:	00001f51 	.word	0x00001f51
    459c:	00004f97 	.word	0x00004f97
    45a0:	00001ebd 	.word	0x00001ebd
    45a4:	200009a8 	.word	0x200009a8

000045a8 <cdcdf_acm_disable>:
{
    45a8:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    45aa:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    45ac:	2900      	cmp	r1, #0
    45ae:	d01a      	beq.n	45e6 <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    45b0:	680b      	ldr	r3, [r1, #0]
    45b2:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    45b4:	2b02      	cmp	r3, #2
    45b6:	d018      	beq.n	45ea <cdcdf_acm_disable+0x42>
    45b8:	2b0a      	cmp	r3, #10
    45ba:	d124      	bne.n	4606 <cdcdf_acm_disable+0x5e>
    45bc:	2400      	movs	r4, #0
    45be:	e001      	b.n	45c4 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    45c0:	3401      	adds	r4, #1
    45c2:	b2e4      	uxtb	r4, r4
    45c4:	2c01      	cmp	r4, #1
    45c6:	d812      	bhi.n	45ee <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    45c8:	5d2b      	ldrb	r3, [r5, r4]
    45ca:	2bff      	cmp	r3, #255	; 0xff
    45cc:	d0f8      	beq.n	45c0 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    45ce:	23ff      	movs	r3, #255	; 0xff
    45d0:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    45d2:	192b      	adds	r3, r5, r4
    45d4:	7898      	ldrb	r0, [r3, #2]
    45d6:	28ff      	cmp	r0, #255	; 0xff
    45d8:	d0f2      	beq.n	45c0 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    45da:	4b0c      	ldr	r3, [pc, #48]	; (460c <cdcdf_acm_disable+0x64>)
    45dc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    45de:	192e      	adds	r6, r5, r4
    45e0:	22ff      	movs	r2, #255	; 0xff
    45e2:	70b2      	strb	r2, [r6, #2]
    45e4:	e7ec      	b.n	45c0 <cdcdf_acm_disable+0x18>
    45e6:	2400      	movs	r4, #0
    45e8:	e7ec      	b.n	45c4 <cdcdf_acm_disable+0x1c>
    45ea:	2400      	movs	r4, #0
    45ec:	e7ea      	b.n	45c4 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    45ee:	7928      	ldrb	r0, [r5, #4]
    45f0:	28ff      	cmp	r0, #255	; 0xff
    45f2:	d003      	beq.n	45fc <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    45f4:	4b05      	ldr	r3, [pc, #20]	; (460c <cdcdf_acm_disable+0x64>)
    45f6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    45f8:	23ff      	movs	r3, #255	; 0xff
    45fa:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    45fc:	2200      	movs	r2, #0
    45fe:	4b04      	ldr	r3, [pc, #16]	; (4610 <cdcdf_acm_disable+0x68>)
    4600:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    4602:	2000      	movs	r0, #0
}
    4604:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    4606:	200a      	movs	r0, #10
    4608:	4240      	negs	r0, r0
    460a:	e7fb      	b.n	4604 <cdcdf_acm_disable+0x5c>
    460c:	00001f25 	.word	0x00001f25
    4610:	200009a8 	.word	0x200009a8

00004614 <cdcdf_acm_ctrl>:
{
    4614:	b510      	push	{r4, lr}
	switch (ctrl) {
    4616:	2901      	cmp	r1, #1
    4618:	d00a      	beq.n	4630 <cdcdf_acm_ctrl+0x1c>
    461a:	2900      	cmp	r1, #0
    461c:	d004      	beq.n	4628 <cdcdf_acm_ctrl+0x14>
    461e:	2902      	cmp	r1, #2
    4620:	d10a      	bne.n	4638 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    4622:	201b      	movs	r0, #27
    4624:	4240      	negs	r0, r0
}
    4626:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    4628:	0011      	movs	r1, r2
    462a:	4b05      	ldr	r3, [pc, #20]	; (4640 <cdcdf_acm_ctrl+0x2c>)
    462c:	4798      	blx	r3
    462e:	e7fa      	b.n	4626 <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    4630:	0011      	movs	r1, r2
    4632:	4b04      	ldr	r3, [pc, #16]	; (4644 <cdcdf_acm_ctrl+0x30>)
    4634:	4798      	blx	r3
    4636:	e7f6      	b.n	4626 <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    4638:	200d      	movs	r0, #13
    463a:	4240      	negs	r0, r0
    463c:	e7f3      	b.n	4626 <cdcdf_acm_ctrl+0x12>
    463e:	46c0      	nop			; (mov r8, r8)
    4640:	000044c1 	.word	0x000044c1
    4644:	000045a9 	.word	0x000045a9

00004648 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4648:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    464a:	4b0b      	ldr	r3, [pc, #44]	; (4678 <cdcdf_acm_init+0x30>)
    464c:	4798      	blx	r3
    464e:	2801      	cmp	r0, #1
    4650:	d80e      	bhi.n	4670 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    4652:	480a      	ldr	r0, [pc, #40]	; (467c <cdcdf_acm_init+0x34>)
    4654:	4b0a      	ldr	r3, [pc, #40]	; (4680 <cdcdf_acm_init+0x38>)
    4656:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4658:	0003      	movs	r3, r0
    465a:	3310      	adds	r3, #16
    465c:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    465e:	3018      	adds	r0, #24
    4660:	4b08      	ldr	r3, [pc, #32]	; (4684 <cdcdf_acm_init+0x3c>)
    4662:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4664:	4908      	ldr	r1, [pc, #32]	; (4688 <cdcdf_acm_init+0x40>)
    4666:	2001      	movs	r0, #1
    4668:	4b08      	ldr	r3, [pc, #32]	; (468c <cdcdf_acm_init+0x44>)
    466a:	4798      	blx	r3
	return ERR_NONE;
    466c:	2000      	movs	r0, #0
}
    466e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    4670:	2011      	movs	r0, #17
    4672:	4240      	negs	r0, r0
    4674:	e7fb      	b.n	466e <cdcdf_acm_init+0x26>
    4676:	46c0      	nop			; (mov r8, r8)
    4678:	00004f69 	.word	0x00004f69
    467c:	200009a8 	.word	0x200009a8
    4680:	00004615 	.word	0x00004615
    4684:	00004f01 	.word	0x00004f01
    4688:	20000004 	.word	0x20000004
    468c:	00004e69 	.word	0x00004e69

00004690 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    4690:	b570      	push	{r4, r5, r6, lr}
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    4692:	4d03      	ldr	r5, [pc, #12]	; (46a0 <cdcdf_acm_stop_xfer+0x10>)
    4694:	7ce8      	ldrb	r0, [r5, #19]
    4696:	4c03      	ldr	r4, [pc, #12]	; (46a4 <cdcdf_acm_stop_xfer+0x14>)
    4698:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    469a:	7d28      	ldrb	r0, [r5, #20]
    469c:	47a0      	blx	r4
}
    469e:	bd70      	pop	{r4, r5, r6, pc}
    46a0:	200009a8 	.word	0x200009a8
    46a4:	000020c5 	.word	0x000020c5

000046a8 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    46a8:	b510      	push	{r4, lr}
	switch (cb_type) {
    46aa:	2801      	cmp	r0, #1
    46ac:	d010      	beq.n	46d0 <cdcdf_acm_register_callback+0x28>
    46ae:	2800      	cmp	r0, #0
    46b0:	d006      	beq.n	46c0 <cdcdf_acm_register_callback+0x18>
    46b2:	2802      	cmp	r0, #2
    46b4:	d014      	beq.n	46e0 <cdcdf_acm_register_callback+0x38>
    46b6:	2803      	cmp	r0, #3
    46b8:	d016      	beq.n	46e8 <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    46ba:	200d      	movs	r0, #13
    46bc:	4240      	negs	r0, r0
    46be:	e006      	b.n	46ce <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    46c0:	4b0b      	ldr	r3, [pc, #44]	; (46f0 <cdcdf_acm_register_callback+0x48>)
    46c2:	7d18      	ldrb	r0, [r3, #20]
    46c4:	000a      	movs	r2, r1
    46c6:	2102      	movs	r1, #2
    46c8:	4b0a      	ldr	r3, [pc, #40]	; (46f4 <cdcdf_acm_register_callback+0x4c>)
    46ca:	4798      	blx	r3
	}
	return ERR_NONE;
    46cc:	2000      	movs	r0, #0
}
    46ce:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    46d0:	4b07      	ldr	r3, [pc, #28]	; (46f0 <cdcdf_acm_register_callback+0x48>)
    46d2:	7cd8      	ldrb	r0, [r3, #19]
    46d4:	000a      	movs	r2, r1
    46d6:	2102      	movs	r1, #2
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <cdcdf_acm_register_callback+0x4c>)
    46da:	4798      	blx	r3
	return ERR_NONE;
    46dc:	2000      	movs	r0, #0
		break;
    46de:	e7f6      	b.n	46ce <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    46e0:	4b03      	ldr	r3, [pc, #12]	; (46f0 <cdcdf_acm_register_callback+0x48>)
    46e2:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    46e4:	2000      	movs	r0, #0
		break;
    46e6:	e7f2      	b.n	46ce <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    46e8:	4b01      	ldr	r3, [pc, #4]	; (46f0 <cdcdf_acm_register_callback+0x48>)
    46ea:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    46ec:	2000      	movs	r0, #0
		break;
    46ee:	e7ee      	b.n	46ce <cdcdf_acm_register_callback+0x26>
    46f0:	200009a8 	.word	0x200009a8
    46f4:	0000215d 	.word	0x0000215d

000046f8 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    46f8:	4b01      	ldr	r3, [pc, #4]	; (4700 <cdcdf_acm_is_enabled+0x8>)
    46fa:	7d58      	ldrb	r0, [r3, #21]
}
    46fc:	4770      	bx	lr
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	200009a8 	.word	0x200009a8

00004704 <cdcdf_acm_read>:
{
    4704:	b570      	push	{r4, r5, r6, lr}
    4706:	0004      	movs	r4, r0
    4708:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    470a:	4b07      	ldr	r3, [pc, #28]	; (4728 <cdcdf_acm_read+0x24>)
    470c:	4798      	blx	r3
    470e:	2800      	cmp	r0, #0
    4710:	d007      	beq.n	4722 <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    4712:	4b06      	ldr	r3, [pc, #24]	; (472c <cdcdf_acm_read+0x28>)
    4714:	7d18      	ldrb	r0, [r3, #20]
    4716:	2300      	movs	r3, #0
    4718:	002a      	movs	r2, r5
    471a:	0021      	movs	r1, r4
    471c:	4c04      	ldr	r4, [pc, #16]	; (4730 <cdcdf_acm_read+0x2c>)
    471e:	47a0      	blx	r4
}
    4720:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    4722:	2011      	movs	r0, #17
    4724:	4240      	negs	r0, r0
    4726:	e7fb      	b.n	4720 <cdcdf_acm_read+0x1c>
    4728:	000046f9 	.word	0x000046f9
    472c:	200009a8 	.word	0x200009a8
    4730:	000049d1 	.word	0x000049d1

00004734 <cdcdf_acm_write>:
{
    4734:	b570      	push	{r4, r5, r6, lr}
    4736:	0004      	movs	r4, r0
    4738:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    473a:	4b07      	ldr	r3, [pc, #28]	; (4758 <cdcdf_acm_write+0x24>)
    473c:	4798      	blx	r3
    473e:	2800      	cmp	r0, #0
    4740:	d007      	beq.n	4752 <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    4742:	4b06      	ldr	r3, [pc, #24]	; (475c <cdcdf_acm_write+0x28>)
    4744:	7cd8      	ldrb	r0, [r3, #19]
    4746:	2301      	movs	r3, #1
    4748:	002a      	movs	r2, r5
    474a:	0021      	movs	r1, r4
    474c:	4c04      	ldr	r4, [pc, #16]	; (4760 <cdcdf_acm_write+0x2c>)
    474e:	47a0      	blx	r4
}
    4750:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    4752:	2011      	movs	r0, #17
    4754:	4240      	negs	r0, r0
    4756:	e7fb      	b.n	4750 <cdcdf_acm_write+0x1c>
    4758:	000046f9 	.word	0x000046f9
    475c:	200009a8 	.word	0x200009a8
    4760:	000049d1 	.word	0x000049d1

00004764 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4764:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4766:	4b06      	ldr	r3, [pc, #24]	; (4780 <usbdc_unconfig+0x1c>)
    4768:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    476a:	e005      	b.n	4778 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    476c:	2200      	movs	r2, #0
    476e:	2101      	movs	r1, #1
    4770:	0020      	movs	r0, r4
    4772:	6863      	ldr	r3, [r4, #4]
    4774:	4798      	blx	r3
		func = func->next;
    4776:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4778:	2c00      	cmp	r4, #0
    477a:	d1f7      	bne.n	476c <usbdc_unconfig+0x8>
	}
}
    477c:	bd10      	pop	{r4, pc}
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	200009cc 	.word	0x200009cc

00004784 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    4784:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    4786:	4b06      	ldr	r3, [pc, #24]	; (47a0 <usbdc_sof_notify+0x1c>)
    4788:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    478a:	e000      	b.n	478e <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    478c:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    478e:	2c00      	cmp	r4, #0
    4790:	d004      	beq.n	479c <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    4792:	6863      	ldr	r3, [r4, #4]
    4794:	2b00      	cmp	r3, #0
    4796:	d0f9      	beq.n	478c <usbdc_sof_notify+0x8>
			sof->cb();
    4798:	4798      	blx	r3
    479a:	e7f7      	b.n	478c <usbdc_sof_notify+0x8>
	}
}
    479c:	bd10      	pop	{r4, pc}
    479e:	46c0      	nop			; (mov r8, r8)
    47a0:	200009cc 	.word	0x200009cc

000047a4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    47a4:	b570      	push	{r4, r5, r6, lr}
    47a6:	0006      	movs	r6, r0
    47a8:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    47aa:	4b07      	ldr	r3, [pc, #28]	; (47c8 <usbdc_change_notify+0x24>)
    47ac:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    47ae:	e000      	b.n	47b2 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    47b0:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    47b2:	2c00      	cmp	r4, #0
    47b4:	d006      	beq.n	47c4 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    47b6:	6863      	ldr	r3, [r4, #4]
    47b8:	2b00      	cmp	r3, #0
    47ba:	d0f9      	beq.n	47b0 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    47bc:	0029      	movs	r1, r5
    47be:	0030      	movs	r0, r6
    47c0:	4798      	blx	r3
    47c2:	e7f5      	b.n	47b0 <usbdc_change_notify+0xc>
	}
}
    47c4:	bd70      	pop	{r4, r5, r6, pc}
    47c6:	46c0      	nop			; (mov r8, r8)
    47c8:	200009cc 	.word	0x200009cc

000047cc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    47cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ce:	0007      	movs	r7, r0
    47d0:	000e      	movs	r6, r1
    47d2:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    47d4:	4b0b      	ldr	r3, [pc, #44]	; (4804 <usbdc_request_handler+0x38>)
    47d6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    47d8:	e000      	b.n	47dc <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    47da:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    47dc:	2c00      	cmp	r4, #0
    47de:	d00d      	beq.n	47fc <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    47e0:	6863      	ldr	r3, [r4, #4]
    47e2:	2b00      	cmp	r3, #0
    47e4:	d0f9      	beq.n	47da <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    47e6:	002a      	movs	r2, r5
    47e8:	0031      	movs	r1, r6
    47ea:	0038      	movs	r0, r7
    47ec:	4798      	blx	r3
			if (0 == rc) {
    47ee:	2800      	cmp	r0, #0
    47f0:	d006      	beq.n	4800 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    47f2:	300a      	adds	r0, #10
    47f4:	d0f1      	beq.n	47da <usbdc_request_handler+0xe>
				return -1;
    47f6:	2001      	movs	r0, #1
    47f8:	4240      	negs	r0, r0
    47fa:	e000      	b.n	47fe <usbdc_request_handler+0x32>
	}
	return false;
    47fc:	2000      	movs	r0, #0
}
    47fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    4800:	2001      	movs	r0, #1
    4802:	e7fc      	b.n	47fe <usbdc_request_handler+0x32>
    4804:	200009cc 	.word	0x200009cc

00004808 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    4808:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    480a:	4b01      	ldr	r3, [pc, #4]	; (4810 <usbd_sof_cb+0x8>)
    480c:	4798      	blx	r3
}
    480e:	bd10      	pop	{r4, pc}
    4810:	00004785 	.word	0x00004785

00004814 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    4814:	b510      	push	{r4, lr}
    4816:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    4818:	2201      	movs	r2, #1
    481a:	2000      	movs	r0, #0
    481c:	4b01      	ldr	r3, [pc, #4]	; (4824 <usbdc_ctrl_data_end+0x10>)
    481e:	4798      	blx	r3
	return false;
}
    4820:	2000      	movs	r0, #0
    4822:	bd10      	pop	{r4, pc}
    4824:	000047cd 	.word	0x000047cd

00004828 <usbdc_set_address>:
{
    4828:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    482a:	4b01      	ldr	r3, [pc, #4]	; (4830 <usbdc_set_address+0x8>)
    482c:	4798      	blx	r3
}
    482e:	bd10      	pop	{r4, pc}
    4830:	00001eb1 	.word	0x00001eb1

00004834 <usbdc_ctrl_status_end>:
{
    4834:	b510      	push	{r4, lr}
    4836:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    4838:	7803      	ldrb	r3, [r0, #0]
    483a:	2b00      	cmp	r3, #0
    483c:	d112      	bne.n	4864 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    483e:	7843      	ldrb	r3, [r0, #1]
    4840:	2b05      	cmp	r3, #5
    4842:	d012      	beq.n	486a <usbdc_ctrl_status_end+0x36>
    4844:	2b09      	cmp	r3, #9
    4846:	d10d      	bne.n	4864 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    4848:	7882      	ldrb	r2, [r0, #2]
    484a:	4b10      	ldr	r3, [pc, #64]	; (488c <usbdc_ctrl_status_end+0x58>)
    484c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    484e:	7882      	ldrb	r2, [r0, #2]
    4850:	78c3      	ldrb	r3, [r0, #3]
    4852:	021b      	lsls	r3, r3, #8
    4854:	4313      	orrs	r3, r2
    4856:	d106      	bne.n	4866 <usbdc_ctrl_status_end+0x32>
    4858:	2103      	movs	r1, #3
    485a:	4b0c      	ldr	r3, [pc, #48]	; (488c <usbdc_ctrl_status_end+0x58>)
    485c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    485e:	2001      	movs	r0, #1
    4860:	4b0b      	ldr	r3, [pc, #44]	; (4890 <usbdc_ctrl_status_end+0x5c>)
    4862:	4798      	blx	r3
}
    4864:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    4866:	2104      	movs	r1, #4
    4868:	e7f7      	b.n	485a <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    486a:	7880      	ldrb	r0, [r0, #2]
    486c:	4b09      	ldr	r3, [pc, #36]	; (4894 <usbdc_ctrl_status_end+0x60>)
    486e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    4870:	78a2      	ldrb	r2, [r4, #2]
    4872:	78e3      	ldrb	r3, [r4, #3]
    4874:	021b      	lsls	r3, r3, #8
    4876:	4313      	orrs	r3, r2
    4878:	d006      	beq.n	4888 <usbdc_ctrl_status_end+0x54>
    487a:	2103      	movs	r1, #3
    487c:	4b03      	ldr	r3, [pc, #12]	; (488c <usbdc_ctrl_status_end+0x58>)
    487e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4880:	2001      	movs	r0, #1
    4882:	4b03      	ldr	r3, [pc, #12]	; (4890 <usbdc_ctrl_status_end+0x5c>)
    4884:	4798      	blx	r3
		break;
    4886:	e7ed      	b.n	4864 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    4888:	2102      	movs	r1, #2
    488a:	e7f7      	b.n	487c <usbdc_ctrl_status_end+0x48>
    488c:	200009cc 	.word	0x200009cc
    4890:	000047a5 	.word	0x000047a5
    4894:	00004829 	.word	0x00004829

00004898 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    4898:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    489a:	2900      	cmp	r1, #0
    489c:	d003      	beq.n	48a6 <usbdc_cb_ctl_done+0xe>
    489e:	2901      	cmp	r1, #1
    48a0:	d006      	beq.n	48b0 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    48a2:	2000      	movs	r0, #0
    48a4:	e003      	b.n	48ae <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    48a6:	0010      	movs	r0, r2
    48a8:	4b03      	ldr	r3, [pc, #12]	; (48b8 <usbdc_cb_ctl_done+0x20>)
    48aa:	4798      	blx	r3
	return false;
    48ac:	2000      	movs	r0, #0
}
    48ae:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    48b0:	0010      	movs	r0, r2
    48b2:	4b02      	ldr	r3, [pc, #8]	; (48bc <usbdc_cb_ctl_done+0x24>)
    48b4:	4798      	blx	r3
    48b6:	e7fa      	b.n	48ae <usbdc_cb_ctl_done+0x16>
    48b8:	00004835 	.word	0x00004835
    48bc:	00004815 	.word	0x00004815

000048c0 <usbdc_set_config>:
{
    48c0:	b530      	push	{r4, r5, lr}
    48c2:	b083      	sub	sp, #12
    48c4:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    48c6:	d014      	beq.n	48f2 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    48c8:	4b1e      	ldr	r3, [pc, #120]	; (4944 <usbdc_set_config+0x84>)
    48ca:	681b      	ldr	r3, [r3, #0]
    48cc:	6818      	ldr	r0, [r3, #0]
    48ce:	6859      	ldr	r1, [r3, #4]
    48d0:	4b1d      	ldr	r3, [pc, #116]	; (4948 <usbdc_set_config+0x88>)
    48d2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    48d4:	2800      	cmp	r0, #0
    48d6:	d032      	beq.n	493e <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    48d8:	7881      	ldrb	r1, [r0, #2]
    48da:	78c3      	ldrb	r3, [r0, #3]
    48dc:	021b      	lsls	r3, r3, #8
    48de:	18c9      	adds	r1, r1, r3
    48e0:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    48e2:	1841      	adds	r1, r0, r1
    48e4:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    48e6:	2204      	movs	r2, #4
    48e8:	4b18      	ldr	r3, [pc, #96]	; (494c <usbdc_set_config+0x8c>)
    48ea:	4798      	blx	r3
    48ec:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    48ee:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    48f0:	e00d      	b.n	490e <usbdc_set_config+0x4e>
		usbdc_unconfig();
    48f2:	4b17      	ldr	r3, [pc, #92]	; (4950 <usbdc_set_config+0x90>)
    48f4:	4798      	blx	r3
		return true;
    48f6:	2001      	movs	r0, #1
    48f8:	e01f      	b.n	493a <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    48fa:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    48fc:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    48fe:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    4900:	18c0      	adds	r0, r0, r3
    4902:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4904:	2204      	movs	r2, #4
    4906:	9901      	ldr	r1, [sp, #4]
    4908:	4b10      	ldr	r3, [pc, #64]	; (494c <usbdc_set_config+0x8c>)
    490a:	4798      	blx	r3
    490c:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    490e:	9b00      	ldr	r3, [sp, #0]
    4910:	2b00      	cmp	r3, #0
    4912:	d011      	beq.n	4938 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    4914:	789d      	ldrb	r5, [r3, #2]
    4916:	42ac      	cmp	r4, r5
    4918:	d0f0      	beq.n	48fc <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    491a:	4b0a      	ldr	r3, [pc, #40]	; (4944 <usbdc_set_config+0x84>)
    491c:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    491e:	2c00      	cmp	r4, #0
    4920:	d0eb      	beq.n	48fa <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    4922:	466a      	mov	r2, sp
    4924:	2100      	movs	r1, #0
    4926:	0020      	movs	r0, r4
    4928:	6863      	ldr	r3, [r4, #4]
    492a:	4798      	blx	r3
    492c:	2800      	cmp	r0, #0
    492e:	d001      	beq.n	4934 <usbdc_set_config+0x74>
					func = func->next;
    4930:	6824      	ldr	r4, [r4, #0]
    4932:	e7f4      	b.n	491e <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    4934:	002c      	movs	r4, r5
    4936:	e7e1      	b.n	48fc <usbdc_set_config+0x3c>
	return true;
    4938:	2001      	movs	r0, #1
}
    493a:	b003      	add	sp, #12
    493c:	bd30      	pop	{r4, r5, pc}
		return false;
    493e:	2000      	movs	r0, #0
    4940:	e7fb      	b.n	493a <usbdc_set_config+0x7a>
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	200009cc 	.word	0x200009cc
    4948:	00004fbd 	.word	0x00004fbd
    494c:	00004f79 	.word	0x00004f79
    4950:	00004765 	.word	0x00004765

00004954 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4954:	b510      	push	{r4, lr}
	usbdc_unconfig();
    4956:	4b0d      	ldr	r3, [pc, #52]	; (498c <usbdc_reset+0x38>)
    4958:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    495a:	4c0d      	ldr	r4, [pc, #52]	; (4990 <usbdc_reset+0x3c>)
    495c:	2302      	movs	r3, #2
    495e:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    4960:	2300      	movs	r3, #0
    4962:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    4964:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    4966:	2000      	movs	r0, #0
    4968:	4b0a      	ldr	r3, [pc, #40]	; (4994 <usbdc_reset+0x40>)
    496a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    496c:	7f20      	ldrb	r0, [r4, #28]
    496e:	4b0a      	ldr	r3, [pc, #40]	; (4998 <usbdc_reset+0x44>)
    4970:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    4972:	4a0a      	ldr	r2, [pc, #40]	; (499c <usbdc_reset+0x48>)
    4974:	2100      	movs	r1, #0
    4976:	2000      	movs	r0, #0
    4978:	4c09      	ldr	r4, [pc, #36]	; (49a0 <usbdc_reset+0x4c>)
    497a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    497c:	4a09      	ldr	r2, [pc, #36]	; (49a4 <usbdc_reset+0x50>)
    497e:	2102      	movs	r1, #2
    4980:	2000      	movs	r0, #0
    4982:	47a0      	blx	r4
	usb_d_ep_enable(0);
    4984:	2000      	movs	r0, #0
    4986:	4b08      	ldr	r3, [pc, #32]	; (49a8 <usbdc_reset+0x54>)
    4988:	4798      	blx	r3
}
    498a:	bd10      	pop	{r4, pc}
    498c:	00004765 	.word	0x00004765
    4990:	200009cc 	.word	0x200009cc
    4994:	00001f25 	.word	0x00001f25
    4998:	00001f11 	.word	0x00001f11
    499c:	00004e1d 	.word	0x00004e1d
    49a0:	0000215d 	.word	0x0000215d
    49a4:	00004899 	.word	0x00004899
    49a8:	00001f51 	.word	0x00001f51

000049ac <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    49ac:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    49ae:	2800      	cmp	r0, #0
    49b0:	d002      	beq.n	49b8 <usbd_event_cb+0xc>
    49b2:	2801      	cmp	r0, #1
    49b4:	d004      	beq.n	49c0 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    49b6:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    49b8:	2000      	movs	r0, #0
    49ba:	4b03      	ldr	r3, [pc, #12]	; (49c8 <usbd_event_cb+0x1c>)
    49bc:	4798      	blx	r3
		break;
    49be:	e7fa      	b.n	49b6 <usbd_event_cb+0xa>
		usbdc_reset();
    49c0:	4b02      	ldr	r3, [pc, #8]	; (49cc <usbd_event_cb+0x20>)
    49c2:	4798      	blx	r3
}
    49c4:	e7f7      	b.n	49b6 <usbd_event_cb+0xa>
    49c6:	46c0      	nop			; (mov r8, r8)
    49c8:	000047a5 	.word	0x000047a5
    49cc:	00004955 	.word	0x00004955

000049d0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    49d0:	b510      	push	{r4, lr}
    49d2:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    49d4:	ac01      	add	r4, sp, #4
    49d6:	9101      	str	r1, [sp, #4]
    49d8:	9202      	str	r2, [sp, #8]
    49da:	7220      	strb	r0, [r4, #8]
    49dc:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    49de:	0020      	movs	r0, r4
    49e0:	4b01      	ldr	r3, [pc, #4]	; (49e8 <usbdc_xfer+0x18>)
    49e2:	4798      	blx	r3
}
    49e4:	b004      	add	sp, #16
    49e6:	bd10      	pop	{r4, pc}
    49e8:	00001fa1 	.word	0x00001fa1

000049ec <usbdc_clear_ftr_req>:
{
    49ec:	b510      	push	{r4, lr}
    49ee:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    49f0:	780a      	ldrb	r2, [r1, #0]
    49f2:	231f      	movs	r3, #31
    49f4:	4013      	ands	r3, r2
    49f6:	2b02      	cmp	r3, #2
    49f8:	d112      	bne.n	4a20 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    49fa:	798a      	ldrb	r2, [r1, #6]
    49fc:	79cb      	ldrb	r3, [r1, #7]
    49fe:	021b      	lsls	r3, r3, #8
    4a00:	4313      	orrs	r3, r2
    4a02:	d001      	beq.n	4a08 <usbdc_clear_ftr_req+0x1c>
			return false;
    4a04:	2000      	movs	r0, #0
    4a06:	e00c      	b.n	4a22 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    4a08:	7908      	ldrb	r0, [r1, #4]
    4a0a:	2100      	movs	r1, #0
    4a0c:	4b05      	ldr	r3, [pc, #20]	; (4a24 <usbdc_clear_ftr_req+0x38>)
    4a0e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4a10:	2301      	movs	r3, #1
    4a12:	2200      	movs	r2, #0
    4a14:	2100      	movs	r1, #0
    4a16:	0020      	movs	r0, r4
    4a18:	4c03      	ldr	r4, [pc, #12]	; (4a28 <usbdc_clear_ftr_req+0x3c>)
    4a1a:	47a0      	blx	r4
		return true;
    4a1c:	2001      	movs	r0, #1
    4a1e:	e000      	b.n	4a22 <usbdc_clear_ftr_req+0x36>
		return false;
    4a20:	2000      	movs	r0, #0
}
    4a22:	bd10      	pop	{r4, pc}
    4a24:	000020f5 	.word	0x000020f5
    4a28:	000049d1 	.word	0x000049d1

00004a2c <usbdc_set_ftr_req>:
{
    4a2c:	b510      	push	{r4, lr}
    4a2e:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4a30:	780a      	ldrb	r2, [r1, #0]
    4a32:	231f      	movs	r3, #31
    4a34:	4013      	ands	r3, r2
    4a36:	2b02      	cmp	r3, #2
    4a38:	d112      	bne.n	4a60 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    4a3a:	798a      	ldrb	r2, [r1, #6]
    4a3c:	79cb      	ldrb	r3, [r1, #7]
    4a3e:	021b      	lsls	r3, r3, #8
    4a40:	4313      	orrs	r3, r2
    4a42:	d001      	beq.n	4a48 <usbdc_set_ftr_req+0x1c>
			return false;
    4a44:	2000      	movs	r0, #0
    4a46:	e00c      	b.n	4a62 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    4a48:	7908      	ldrb	r0, [r1, #4]
    4a4a:	2101      	movs	r1, #1
    4a4c:	4b05      	ldr	r3, [pc, #20]	; (4a64 <usbdc_set_ftr_req+0x38>)
    4a4e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4a50:	2301      	movs	r3, #1
    4a52:	2200      	movs	r2, #0
    4a54:	2100      	movs	r1, #0
    4a56:	0020      	movs	r0, r4
    4a58:	4c03      	ldr	r4, [pc, #12]	; (4a68 <usbdc_set_ftr_req+0x3c>)
    4a5a:	47a0      	blx	r4
		return true;
    4a5c:	2001      	movs	r0, #1
    4a5e:	e000      	b.n	4a62 <usbdc_set_ftr_req+0x36>
		return false;
    4a60:	2000      	movs	r0, #0
}
    4a62:	bd10      	pop	{r4, pc}
    4a64:	000020f5 	.word	0x000020f5
    4a68:	000049d1 	.word	0x000049d1

00004a6c <usbdc_set_interface>:
{
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	b082      	sub	sp, #8
    4a70:	0005      	movs	r5, r0
    4a72:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    4a74:	4b2a      	ldr	r3, [pc, #168]	; (4b20 <usbdc_set_interface+0xb4>)
    4a76:	681a      	ldr	r2, [r3, #0]
    4a78:	6810      	ldr	r0, [r2, #0]
    4a7a:	6851      	ldr	r1, [r2, #4]
    4a7c:	7eda      	ldrb	r2, [r3, #27]
    4a7e:	4b29      	ldr	r3, [pc, #164]	; (4b24 <usbdc_set_interface+0xb8>)
    4a80:	4798      	blx	r3
	if (NULL == ifc) {
    4a82:	2800      	cmp	r0, #0
    4a84:	d045      	beq.n	4b12 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    4a86:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    4a88:	7881      	ldrb	r1, [r0, #2]
    4a8a:	78c3      	ldrb	r3, [r0, #3]
    4a8c:	021b      	lsls	r3, r3, #8
    4a8e:	18c9      	adds	r1, r1, r3
    4a90:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4a92:	1841      	adds	r1, r0, r1
    4a94:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    4a96:	2204      	movs	r2, #4
    4a98:	4b23      	ldr	r3, [pc, #140]	; (4b28 <usbdc_set_interface+0xbc>)
    4a9a:	4798      	blx	r3
    4a9c:	2800      	cmp	r0, #0
    4a9e:	d10b      	bne.n	4ab8 <usbdc_set_interface+0x4c>
		return false;
    4aa0:	2000      	movs	r0, #0
    4aa2:	e039      	b.n	4b18 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    4aa4:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    4aa6:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    4aa8:	18c0      	adds	r0, r0, r3
    4aaa:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4aac:	2204      	movs	r2, #4
    4aae:	9901      	ldr	r1, [sp, #4]
    4ab0:	4b1d      	ldr	r3, [pc, #116]	; (4b28 <usbdc_set_interface+0xbc>)
    4ab2:	4798      	blx	r3
		if (NULL == ifc) {
    4ab4:	2800      	cmp	r0, #0
    4ab6:	d02e      	beq.n	4b16 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    4ab8:	7883      	ldrb	r3, [r0, #2]
    4aba:	42a3      	cmp	r3, r4
    4abc:	d1f2      	bne.n	4aa4 <usbdc_set_interface+0x38>
    4abe:	78c3      	ldrb	r3, [r0, #3]
    4ac0:	42ab      	cmp	r3, r5
    4ac2:	d1ef      	bne.n	4aa4 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    4ac4:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    4ac6:	4b16      	ldr	r3, [pc, #88]	; (4b20 <usbdc_set_interface+0xb4>)
    4ac8:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    4aca:	2e00      	cmp	r6, #0
    4acc:	d01f      	beq.n	4b0e <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    4ace:	466a      	mov	r2, sp
    4ad0:	2101      	movs	r1, #1
    4ad2:	0030      	movs	r0, r6
    4ad4:	6873      	ldr	r3, [r6, #4]
    4ad6:	4798      	blx	r3
    4ad8:	2800      	cmp	r0, #0
    4ada:	d001      	beq.n	4ae0 <usbdc_set_interface+0x74>
			func = func->next;
    4adc:	6836      	ldr	r6, [r6, #0]
    4ade:	e7f4      	b.n	4aca <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    4ae0:	6873      	ldr	r3, [r6, #4]
    4ae2:	466a      	mov	r2, sp
    4ae4:	2100      	movs	r1, #0
    4ae6:	0030      	movs	r0, r6
    4ae8:	4798      	blx	r3
    4aea:	2800      	cmp	r0, #0
    4aec:	d116      	bne.n	4b1c <usbdc_set_interface+0xb0>
			if (alt_set) {
    4aee:	2d00      	cmp	r5, #0
    4af0:	d005      	beq.n	4afe <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    4af2:	2201      	movs	r2, #1
    4af4:	40a2      	lsls	r2, r4
    4af6:	490a      	ldr	r1, [pc, #40]	; (4b20 <usbdc_set_interface+0xb4>)
    4af8:	7f4b      	ldrb	r3, [r1, #29]
    4afa:	4313      	orrs	r3, r2
    4afc:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    4afe:	2300      	movs	r3, #0
    4b00:	2200      	movs	r2, #0
    4b02:	2100      	movs	r1, #0
    4b04:	2000      	movs	r0, #0
    4b06:	4c09      	ldr	r4, [pc, #36]	; (4b2c <usbdc_set_interface+0xc0>)
    4b08:	47a0      	blx	r4
			return true;
    4b0a:	2001      	movs	r0, #1
    4b0c:	e004      	b.n	4b18 <usbdc_set_interface+0xac>
	return false;
    4b0e:	2000      	movs	r0, #0
    4b10:	e002      	b.n	4b18 <usbdc_set_interface+0xac>
		return false;
    4b12:	2000      	movs	r0, #0
    4b14:	e000      	b.n	4b18 <usbdc_set_interface+0xac>
			return false;
    4b16:	2000      	movs	r0, #0
}
    4b18:	b002      	add	sp, #8
    4b1a:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    4b1c:	2000      	movs	r0, #0
    4b1e:	e7fb      	b.n	4b18 <usbdc_set_interface+0xac>
    4b20:	200009cc 	.word	0x200009cc
    4b24:	00004fbd 	.word	0x00004fbd
    4b28:	00004f79 	.word	0x00004f79
    4b2c:	000049d1 	.word	0x000049d1

00004b30 <usbdc_set_req>:
{
    4b30:	b510      	push	{r4, lr}
    4b32:	0004      	movs	r4, r0
	switch (req->bRequest) {
    4b34:	784b      	ldrb	r3, [r1, #1]
    4b36:	2b0b      	cmp	r3, #11
    4b38:	d82d      	bhi.n	4b96 <usbdc_set_req+0x66>
    4b3a:	009b      	lsls	r3, r3, #2
    4b3c:	4a17      	ldr	r2, [pc, #92]	; (4b9c <usbdc_set_req+0x6c>)
    4b3e:	58d3      	ldr	r3, [r2, r3]
    4b40:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4b42:	2301      	movs	r3, #1
    4b44:	2200      	movs	r2, #0
    4b46:	2100      	movs	r1, #0
    4b48:	4c15      	ldr	r4, [pc, #84]	; (4ba0 <usbdc_set_req+0x70>)
    4b4a:	47a0      	blx	r4
    4b4c:	4243      	negs	r3, r0
    4b4e:	4158      	adcs	r0, r3
    4b50:	b2c0      	uxtb	r0, r0
}
    4b52:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    4b54:	7888      	ldrb	r0, [r1, #2]
    4b56:	4b13      	ldr	r3, [pc, #76]	; (4ba4 <usbdc_set_req+0x74>)
    4b58:	4798      	blx	r3
    4b5a:	2800      	cmp	r0, #0
    4b5c:	d0f9      	beq.n	4b52 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4b5e:	2301      	movs	r3, #1
    4b60:	2200      	movs	r2, #0
    4b62:	2100      	movs	r1, #0
    4b64:	0020      	movs	r0, r4
    4b66:	4c0e      	ldr	r4, [pc, #56]	; (4ba0 <usbdc_set_req+0x70>)
    4b68:	47a0      	blx	r4
    4b6a:	4243      	negs	r3, r0
    4b6c:	4158      	adcs	r0, r3
    4b6e:	b2c0      	uxtb	r0, r0
    4b70:	e7ef      	b.n	4b52 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    4b72:	4b0d      	ldr	r3, [pc, #52]	; (4ba8 <usbdc_set_req+0x78>)
    4b74:	4798      	blx	r3
    4b76:	e7ec      	b.n	4b52 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    4b78:	4b0c      	ldr	r3, [pc, #48]	; (4bac <usbdc_set_req+0x7c>)
    4b7a:	4798      	blx	r3
    4b7c:	e7e9      	b.n	4b52 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4b7e:	790a      	ldrb	r2, [r1, #4]
    4b80:	794b      	ldrb	r3, [r1, #5]
    4b82:	021b      	lsls	r3, r3, #8
    4b84:	4313      	orrs	r3, r2
    4b86:	788a      	ldrb	r2, [r1, #2]
    4b88:	78c8      	ldrb	r0, [r1, #3]
    4b8a:	0200      	lsls	r0, r0, #8
    4b8c:	4310      	orrs	r0, r2
    4b8e:	0019      	movs	r1, r3
    4b90:	4b07      	ldr	r3, [pc, #28]	; (4bb0 <usbdc_set_req+0x80>)
    4b92:	4798      	blx	r3
    4b94:	e7dd      	b.n	4b52 <usbdc_set_req+0x22>
		return false;
    4b96:	2000      	movs	r0, #0
    4b98:	e7db      	b.n	4b52 <usbdc_set_req+0x22>
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	0000774c 	.word	0x0000774c
    4ba0:	000049d1 	.word	0x000049d1
    4ba4:	000048c1 	.word	0x000048c1
    4ba8:	000049ed 	.word	0x000049ed
    4bac:	00004a2d 	.word	0x00004a2d
    4bb0:	00004a6d 	.word	0x00004a6d

00004bb4 <usbdc_get_dev_desc>:
{
    4bb4:	b570      	push	{r4, r5, r6, lr}
    4bb6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4bb8:	798b      	ldrb	r3, [r1, #6]
    4bba:	79cc      	ldrb	r4, [r1, #7]
    4bbc:	0224      	lsls	r4, r4, #8
    4bbe:	431c      	orrs	r4, r3
	if (length > 0x12) {
    4bc0:	2c12      	cmp	r4, #18
    4bc2:	d900      	bls.n	4bc6 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    4bc4:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    4bc6:	4b0b      	ldr	r3, [pc, #44]	; (4bf4 <usbdc_get_dev_desc+0x40>)
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	6818      	ldr	r0, [r3, #0]
    4bcc:	6859      	ldr	r1, [r3, #4]
    4bce:	2201      	movs	r2, #1
    4bd0:	4b09      	ldr	r3, [pc, #36]	; (4bf8 <usbdc_get_dev_desc+0x44>)
    4bd2:	4798      	blx	r3
	if (!dev_desc) {
    4bd4:	2800      	cmp	r0, #0
    4bd6:	d00b      	beq.n	4bf0 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4bd8:	2300      	movs	r3, #0
    4bda:	0022      	movs	r2, r4
    4bdc:	0001      	movs	r1, r0
    4bde:	0028      	movs	r0, r5
    4be0:	4c06      	ldr	r4, [pc, #24]	; (4bfc <usbdc_get_dev_desc+0x48>)
    4be2:	47a0      	blx	r4
    4be4:	2800      	cmp	r0, #0
    4be6:	d101      	bne.n	4bec <usbdc_get_dev_desc+0x38>
	return true;
    4be8:	2001      	movs	r0, #1
}
    4bea:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4bec:	2000      	movs	r0, #0
    4bee:	e7fc      	b.n	4bea <usbdc_get_dev_desc+0x36>
		return false;
    4bf0:	2000      	movs	r0, #0
    4bf2:	e7fa      	b.n	4bea <usbdc_get_dev_desc+0x36>
    4bf4:	200009cc 	.word	0x200009cc
    4bf8:	00004f79 	.word	0x00004f79
    4bfc:	000049d1 	.word	0x000049d1

00004c00 <usbdc_get_cfg_desc>:
{
    4c00:	b570      	push	{r4, r5, r6, lr}
    4c02:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4c04:	798b      	ldrb	r3, [r1, #6]
    4c06:	79ce      	ldrb	r6, [r1, #7]
    4c08:	0236      	lsls	r6, r6, #8
    4c0a:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4c0c:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4c0e:	4b13      	ldr	r3, [pc, #76]	; (4c5c <usbdc_get_cfg_desc+0x5c>)
    4c10:	7f1c      	ldrb	r4, [r3, #28]
    4c12:	3c01      	subs	r4, #1
    4c14:	4034      	ands	r4, r6
    4c16:	4261      	negs	r1, r4
    4c18:	414c      	adcs	r4, r1
    4c1a:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4c1c:	681b      	ldr	r3, [r3, #0]
    4c1e:	6818      	ldr	r0, [r3, #0]
    4c20:	6859      	ldr	r1, [r3, #4]
    4c22:	3201      	adds	r2, #1
    4c24:	b2d2      	uxtb	r2, r2
    4c26:	4b0e      	ldr	r3, [pc, #56]	; (4c60 <usbdc_get_cfg_desc+0x60>)
    4c28:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d013      	beq.n	4c56 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    4c2e:	7882      	ldrb	r2, [r0, #2]
    4c30:	78c3      	ldrb	r3, [r0, #3]
    4c32:	021b      	lsls	r3, r3, #8
    4c34:	18d2      	adds	r2, r2, r3
    4c36:	b292      	uxth	r2, r2
	if (length <= total_len) {
    4c38:	4296      	cmp	r6, r2
    4c3a:	d801      	bhi.n	4c40 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    4c3c:	0032      	movs	r2, r6
		need_zlp = false;
    4c3e:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    4c40:	0023      	movs	r3, r4
    4c42:	0001      	movs	r1, r0
    4c44:	0028      	movs	r0, r5
    4c46:	4c07      	ldr	r4, [pc, #28]	; (4c64 <usbdc_get_cfg_desc+0x64>)
    4c48:	47a0      	blx	r4
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d101      	bne.n	4c52 <usbdc_get_cfg_desc+0x52>
	return true;
    4c4e:	2001      	movs	r0, #1
}
    4c50:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4c52:	2000      	movs	r0, #0
    4c54:	e7fc      	b.n	4c50 <usbdc_get_cfg_desc+0x50>
		return false;
    4c56:	2000      	movs	r0, #0
    4c58:	e7fa      	b.n	4c50 <usbdc_get_cfg_desc+0x50>
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	200009cc 	.word	0x200009cc
    4c60:	00004fbd 	.word	0x00004fbd
    4c64:	000049d1 	.word	0x000049d1

00004c68 <usbdc_get_str_desc>:
{
    4c68:	b570      	push	{r4, r5, r6, lr}
    4c6a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4c6c:	798b      	ldrb	r3, [r1, #6]
    4c6e:	79ce      	ldrb	r6, [r1, #7]
    4c70:	0236      	lsls	r6, r6, #8
    4c72:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4c74:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4c76:	4b10      	ldr	r3, [pc, #64]	; (4cb8 <usbdc_get_str_desc+0x50>)
    4c78:	7f1c      	ldrb	r4, [r3, #28]
    4c7a:	3c01      	subs	r4, #1
    4c7c:	4034      	ands	r4, r6
    4c7e:	4261      	negs	r1, r4
    4c80:	414c      	adcs	r4, r1
    4c82:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	6818      	ldr	r0, [r3, #0]
    4c88:	6859      	ldr	r1, [r3, #4]
    4c8a:	4b0c      	ldr	r3, [pc, #48]	; (4cbc <usbdc_get_str_desc+0x54>)
    4c8c:	4798      	blx	r3
	if (NULL == str_desc) {
    4c8e:	2800      	cmp	r0, #0
    4c90:	d00f      	beq.n	4cb2 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    4c92:	7802      	ldrb	r2, [r0, #0]
    4c94:	4296      	cmp	r6, r2
    4c96:	d801      	bhi.n	4c9c <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    4c98:	0032      	movs	r2, r6
		need_zlp = false;
    4c9a:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4c9c:	0023      	movs	r3, r4
    4c9e:	0001      	movs	r1, r0
    4ca0:	0028      	movs	r0, r5
    4ca2:	4c07      	ldr	r4, [pc, #28]	; (4cc0 <usbdc_get_str_desc+0x58>)
    4ca4:	47a0      	blx	r4
    4ca6:	2800      	cmp	r0, #0
    4ca8:	d101      	bne.n	4cae <usbdc_get_str_desc+0x46>
	return true;
    4caa:	2001      	movs	r0, #1
}
    4cac:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4cae:	2000      	movs	r0, #0
    4cb0:	e7fc      	b.n	4cac <usbdc_get_str_desc+0x44>
		return false;
    4cb2:	2000      	movs	r0, #0
    4cb4:	e7fa      	b.n	4cac <usbdc_get_str_desc+0x44>
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	200009cc 	.word	0x200009cc
    4cbc:	00005001 	.word	0x00005001
    4cc0:	000049d1 	.word	0x000049d1

00004cc4 <usbdc_get_desc_req>:
{
    4cc4:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    4cc6:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    4cc8:	2b02      	cmp	r3, #2
    4cca:	d008      	beq.n	4cde <usbdc_get_desc_req+0x1a>
    4ccc:	2b03      	cmp	r3, #3
    4cce:	d009      	beq.n	4ce4 <usbdc_get_desc_req+0x20>
    4cd0:	2b01      	cmp	r3, #1
    4cd2:	d001      	beq.n	4cd8 <usbdc_get_desc_req+0x14>
	return false;
    4cd4:	2000      	movs	r0, #0
    4cd6:	e001      	b.n	4cdc <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    4cd8:	4b04      	ldr	r3, [pc, #16]	; (4cec <usbdc_get_desc_req+0x28>)
    4cda:	4798      	blx	r3
}
    4cdc:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <usbdc_get_desc_req+0x2c>)
    4ce0:	4798      	blx	r3
    4ce2:	e7fb      	b.n	4cdc <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    4ce4:	4b03      	ldr	r3, [pc, #12]	; (4cf4 <usbdc_get_desc_req+0x30>)
    4ce6:	4798      	blx	r3
    4ce8:	e7f8      	b.n	4cdc <usbdc_get_desc_req+0x18>
    4cea:	46c0      	nop			; (mov r8, r8)
    4cec:	00004bb5 	.word	0x00004bb5
    4cf0:	00004c01 	.word	0x00004c01
    4cf4:	00004c69 	.word	0x00004c69

00004cf8 <usbdc_get_status_req>:
{
    4cf8:	b530      	push	{r4, r5, lr}
    4cfa:	b083      	sub	sp, #12
    4cfc:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4cfe:	780a      	ldrb	r2, [r1, #0]
    4d00:	231f      	movs	r3, #31
    4d02:	4013      	ands	r3, r2
    4d04:	b2da      	uxtb	r2, r3
    4d06:	2a01      	cmp	r2, #1
    4d08:	d903      	bls.n	4d12 <usbdc_get_status_req+0x1a>
    4d0a:	2b02      	cmp	r3, #2
    4d0c:	d012      	beq.n	4d34 <usbdc_get_status_req+0x3c>
		return false;
    4d0e:	2000      	movs	r0, #0
    4d10:	e00e      	b.n	4d30 <usbdc_get_status_req+0x38>
		st = 0;
    4d12:	2300      	movs	r3, #0
    4d14:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4d16:	4d0d      	ldr	r5, [pc, #52]	; (4d4c <usbdc_get_status_req+0x54>)
    4d18:	2202      	movs	r2, #2
    4d1a:	a901      	add	r1, sp, #4
    4d1c:	6968      	ldr	r0, [r5, #20]
    4d1e:	4b0c      	ldr	r3, [pc, #48]	; (4d50 <usbdc_get_status_req+0x58>)
    4d20:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4d22:	6969      	ldr	r1, [r5, #20]
    4d24:	2300      	movs	r3, #0
    4d26:	2202      	movs	r2, #2
    4d28:	0020      	movs	r0, r4
    4d2a:	4c0a      	ldr	r4, [pc, #40]	; (4d54 <usbdc_get_status_req+0x5c>)
    4d2c:	47a0      	blx	r4
	return true;
    4d2e:	2001      	movs	r0, #1
}
    4d30:	b003      	add	sp, #12
    4d32:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4d34:	7908      	ldrb	r0, [r1, #4]
    4d36:	2102      	movs	r1, #2
    4d38:	4b07      	ldr	r3, [pc, #28]	; (4d58 <usbdc_get_status_req+0x60>)
    4d3a:	4798      	blx	r3
		if (st < 0) {
    4d3c:	2800      	cmp	r0, #0
    4d3e:	db03      	blt.n	4d48 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    4d40:	2301      	movs	r3, #1
    4d42:	4018      	ands	r0, r3
    4d44:	9001      	str	r0, [sp, #4]
		break;
    4d46:	e7e6      	b.n	4d16 <usbdc_get_status_req+0x1e>
			return false;
    4d48:	2000      	movs	r0, #0
    4d4a:	e7f1      	b.n	4d30 <usbdc_get_status_req+0x38>
    4d4c:	200009cc 	.word	0x200009cc
    4d50:	000071e1 	.word	0x000071e1
    4d54:	000049d1 	.word	0x000049d1
    4d58:	000020f5 	.word	0x000020f5

00004d5c <usbdc_get_interface>:
{
    4d5c:	b570      	push	{r4, r5, r6, lr}
    4d5e:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4d60:	4b16      	ldr	r3, [pc, #88]	; (4dbc <usbdc_get_interface+0x60>)
    4d62:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4d64:	7f5a      	ldrb	r2, [r3, #29]
    4d66:	7901      	ldrb	r1, [r0, #4]
    4d68:	7943      	ldrb	r3, [r0, #5]
    4d6a:	021b      	lsls	r3, r3, #8
    4d6c:	430b      	orrs	r3, r1
    4d6e:	411a      	asrs	r2, r3
    4d70:	07d3      	lsls	r3, r2, #31
    4d72:	d50a      	bpl.n	4d8a <usbdc_get_interface+0x2e>
	while (NULL != func) {
    4d74:	2c00      	cmp	r4, #0
    4d76:	d01f      	beq.n	4db8 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4d78:	002a      	movs	r2, r5
    4d7a:	2102      	movs	r1, #2
    4d7c:	0020      	movs	r0, r4
    4d7e:	6863      	ldr	r3, [r4, #4]
    4d80:	4798      	blx	r3
    4d82:	2800      	cmp	r0, #0
    4d84:	da0d      	bge.n	4da2 <usbdc_get_interface+0x46>
			func = func->next;
    4d86:	6824      	ldr	r4, [r4, #0]
    4d88:	e7f4      	b.n	4d74 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    4d8a:	4b0c      	ldr	r3, [pc, #48]	; (4dbc <usbdc_get_interface+0x60>)
    4d8c:	2200      	movs	r2, #0
    4d8e:	6959      	ldr	r1, [r3, #20]
    4d90:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4d92:	6959      	ldr	r1, [r3, #20]
    4d94:	2300      	movs	r3, #0
    4d96:	3201      	adds	r2, #1
    4d98:	2000      	movs	r0, #0
    4d9a:	4c09      	ldr	r4, [pc, #36]	; (4dc0 <usbdc_get_interface+0x64>)
    4d9c:	47a0      	blx	r4
		return true;
    4d9e:	2001      	movs	r0, #1
    4da0:	e00b      	b.n	4dba <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4da2:	4b06      	ldr	r3, [pc, #24]	; (4dbc <usbdc_get_interface+0x60>)
    4da4:	695a      	ldr	r2, [r3, #20]
    4da6:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4da8:	6959      	ldr	r1, [r3, #20]
    4daa:	2300      	movs	r3, #0
    4dac:	2201      	movs	r2, #1
    4dae:	2000      	movs	r0, #0
    4db0:	4c03      	ldr	r4, [pc, #12]	; (4dc0 <usbdc_get_interface+0x64>)
    4db2:	47a0      	blx	r4
			return true;
    4db4:	2001      	movs	r0, #1
    4db6:	e000      	b.n	4dba <usbdc_get_interface+0x5e>
	return false;
    4db8:	2000      	movs	r0, #0
}
    4dba:	bd70      	pop	{r4, r5, r6, pc}
    4dbc:	200009cc 	.word	0x200009cc
    4dc0:	000049d1 	.word	0x000049d1

00004dc4 <usbdc_get_req>:
{
    4dc4:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    4dc6:	784b      	ldrb	r3, [r1, #1]
    4dc8:	2b06      	cmp	r3, #6
    4dca:	d00d      	beq.n	4de8 <usbdc_get_req+0x24>
    4dcc:	d907      	bls.n	4dde <usbdc_get_req+0x1a>
    4dce:	2b08      	cmp	r3, #8
    4dd0:	d00d      	beq.n	4dee <usbdc_get_req+0x2a>
    4dd2:	2b0a      	cmp	r3, #10
    4dd4:	d116      	bne.n	4e04 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    4dd6:	0008      	movs	r0, r1
    4dd8:	4b0b      	ldr	r3, [pc, #44]	; (4e08 <usbdc_get_req+0x44>)
    4dda:	4798      	blx	r3
    4ddc:	e006      	b.n	4dec <usbdc_get_req+0x28>
	switch (req->bRequest) {
    4dde:	2b00      	cmp	r3, #0
    4de0:	d110      	bne.n	4e04 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    4de2:	4b0a      	ldr	r3, [pc, #40]	; (4e0c <usbdc_get_req+0x48>)
    4de4:	4798      	blx	r3
    4de6:	e001      	b.n	4dec <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    4de8:	4b09      	ldr	r3, [pc, #36]	; (4e10 <usbdc_get_req+0x4c>)
    4dea:	4798      	blx	r3
}
    4dec:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    4dee:	4b09      	ldr	r3, [pc, #36]	; (4e14 <usbdc_get_req+0x50>)
    4df0:	7eda      	ldrb	r2, [r3, #27]
    4df2:	6959      	ldr	r1, [r3, #20]
    4df4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4df6:	6959      	ldr	r1, [r3, #20]
    4df8:	2300      	movs	r3, #0
    4dfa:	2201      	movs	r2, #1
    4dfc:	4c06      	ldr	r4, [pc, #24]	; (4e18 <usbdc_get_req+0x54>)
    4dfe:	47a0      	blx	r4
		return true;
    4e00:	2001      	movs	r0, #1
    4e02:	e7f3      	b.n	4dec <usbdc_get_req+0x28>
		return false;
    4e04:	2000      	movs	r0, #0
    4e06:	e7f1      	b.n	4dec <usbdc_get_req+0x28>
    4e08:	00004d5d 	.word	0x00004d5d
    4e0c:	00004cf9 	.word	0x00004cf9
    4e10:	00004cc5 	.word	0x00004cc5
    4e14:	200009cc 	.word	0x200009cc
    4e18:	000049d1 	.word	0x000049d1

00004e1c <usbdc_cb_ctl_req>:
{
    4e1c:	b570      	push	{r4, r5, r6, lr}
    4e1e:	0005      	movs	r5, r0
    4e20:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4e22:	2200      	movs	r2, #0
    4e24:	4b0d      	ldr	r3, [pc, #52]	; (4e5c <usbdc_cb_ctl_req+0x40>)
    4e26:	4798      	blx	r3
    4e28:	1c43      	adds	r3, r0, #1
    4e2a:	d014      	beq.n	4e56 <usbdc_cb_ctl_req+0x3a>
    4e2c:	2801      	cmp	r0, #1
    4e2e:	d013      	beq.n	4e58 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4e30:	7823      	ldrb	r3, [r4, #0]
    4e32:	221f      	movs	r2, #31
    4e34:	4393      	bics	r3, r2
    4e36:	d004      	beq.n	4e42 <usbdc_cb_ctl_req+0x26>
    4e38:	b2db      	uxtb	r3, r3
    4e3a:	2b80      	cmp	r3, #128	; 0x80
    4e3c:	d006      	beq.n	4e4c <usbdc_cb_ctl_req+0x30>
		return false;
    4e3e:	2000      	movs	r0, #0
    4e40:	e00a      	b.n	4e58 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    4e42:	0021      	movs	r1, r4
    4e44:	0028      	movs	r0, r5
    4e46:	4b06      	ldr	r3, [pc, #24]	; (4e60 <usbdc_cb_ctl_req+0x44>)
    4e48:	4798      	blx	r3
    4e4a:	e005      	b.n	4e58 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    4e4c:	0021      	movs	r1, r4
    4e4e:	0028      	movs	r0, r5
    4e50:	4b04      	ldr	r3, [pc, #16]	; (4e64 <usbdc_cb_ctl_req+0x48>)
    4e52:	4798      	blx	r3
    4e54:	e000      	b.n	4e58 <usbdc_cb_ctl_req+0x3c>
		return false;
    4e56:	2000      	movs	r0, #0
}
    4e58:	bd70      	pop	{r4, r5, r6, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	000047cd 	.word	0x000047cd
    4e60:	00004b31 	.word	0x00004b31
    4e64:	00004dc5 	.word	0x00004dc5

00004e68 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4e68:	b510      	push	{r4, lr}
	switch (type) {
    4e6a:	2801      	cmp	r0, #1
    4e6c:	d009      	beq.n	4e82 <usbdc_register_handler+0x1a>
    4e6e:	2800      	cmp	r0, #0
    4e70:	d002      	beq.n	4e78 <usbdc_register_handler+0x10>
    4e72:	2802      	cmp	r0, #2
    4e74:	d00a      	beq.n	4e8c <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    4e76:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4e78:	4807      	ldr	r0, [pc, #28]	; (4e98 <usbdc_register_handler+0x30>)
    4e7a:	3004      	adds	r0, #4
    4e7c:	4b07      	ldr	r3, [pc, #28]	; (4e9c <usbdc_register_handler+0x34>)
    4e7e:	4798      	blx	r3
		break;
    4e80:	e7f9      	b.n	4e76 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    4e82:	4805      	ldr	r0, [pc, #20]	; (4e98 <usbdc_register_handler+0x30>)
    4e84:	3008      	adds	r0, #8
    4e86:	4b05      	ldr	r3, [pc, #20]	; (4e9c <usbdc_register_handler+0x34>)
    4e88:	4798      	blx	r3
		break;
    4e8a:	e7f4      	b.n	4e76 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4e8c:	4802      	ldr	r0, [pc, #8]	; (4e98 <usbdc_register_handler+0x30>)
    4e8e:	300c      	adds	r0, #12
    4e90:	4b02      	ldr	r3, [pc, #8]	; (4e9c <usbdc_register_handler+0x34>)
    4e92:	4798      	blx	r3
}
    4e94:	e7ef      	b.n	4e76 <usbdc_register_handler+0xe>
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	200009cc 	.word	0x200009cc
    4e9c:	00002201 	.word	0x00002201

00004ea0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4ea0:	b570      	push	{r4, r5, r6, lr}
    4ea2:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    4ea4:	1e43      	subs	r3, r0, #1
    4ea6:	4198      	sbcs	r0, r3
    4ea8:	b2c0      	uxtb	r0, r0
    4eaa:	4a0c      	ldr	r2, [pc, #48]	; (4edc <usbdc_init+0x3c>)
    4eac:	490c      	ldr	r1, [pc, #48]	; (4ee0 <usbdc_init+0x40>)
    4eae:	4b0d      	ldr	r3, [pc, #52]	; (4ee4 <usbdc_init+0x44>)
    4eb0:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4eb2:	4b0d      	ldr	r3, [pc, #52]	; (4ee8 <usbdc_init+0x48>)
    4eb4:	4798      	blx	r3
	if (rc < 0) {
    4eb6:	2800      	cmp	r0, #0
    4eb8:	db0e      	blt.n	4ed8 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4eba:	4d0c      	ldr	r5, [pc, #48]	; (4eec <usbdc_init+0x4c>)
    4ebc:	2220      	movs	r2, #32
    4ebe:	2100      	movs	r1, #0
    4ec0:	0028      	movs	r0, r5
    4ec2:	4b0b      	ldr	r3, [pc, #44]	; (4ef0 <usbdc_init+0x50>)
    4ec4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4ec6:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4ec8:	490a      	ldr	r1, [pc, #40]	; (4ef4 <usbdc_init+0x54>)
    4eca:	2000      	movs	r0, #0
    4ecc:	4c0a      	ldr	r4, [pc, #40]	; (4ef8 <usbdc_init+0x58>)
    4ece:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4ed0:	490a      	ldr	r1, [pc, #40]	; (4efc <usbdc_init+0x5c>)
    4ed2:	2001      	movs	r0, #1
    4ed4:	47a0      	blx	r4

	return 0;
    4ed6:	2000      	movs	r0, #0
}
    4ed8:	bd70      	pop	{r4, r5, r6, pc}
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	00000355 	.word	0x00000355
    4ee0:	0000777c 	.word	0x0000777c
    4ee4:	000021ad 	.word	0x000021ad
    4ee8:	00001e21 	.word	0x00001e21
    4eec:	200009cc 	.word	0x200009cc
    4ef0:	00007265 	.word	0x00007265
    4ef4:	00004809 	.word	0x00004809
    4ef8:	00001e8d 	.word	0x00001e8d
    4efc:	000049ad 	.word	0x000049ad

00004f00 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    4f00:	b510      	push	{r4, lr}
    4f02:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    4f04:	4802      	ldr	r0, [pc, #8]	; (4f10 <usbdc_register_function+0x10>)
    4f06:	3010      	adds	r0, #16
    4f08:	4b02      	ldr	r3, [pc, #8]	; (4f14 <usbdc_register_function+0x14>)
    4f0a:	4798      	blx	r3
}
    4f0c:	bd10      	pop	{r4, pc}
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	200009cc 	.word	0x200009cc
    4f14:	00002201 	.word	0x00002201

00004f18 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4f18:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4f1a:	4b0b      	ldr	r3, [pc, #44]	; (4f48 <usbdc_start+0x30>)
    4f1c:	7e9b      	ldrb	r3, [r3, #26]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d10c      	bne.n	4f3c <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    4f22:	2800      	cmp	r0, #0
    4f24:	d00d      	beq.n	4f42 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    4f26:	4b08      	ldr	r3, [pc, #32]	; (4f48 <usbdc_start+0x30>)
    4f28:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    4f2a:	6802      	ldr	r2, [r0, #0]
    4f2c:	79d2      	ldrb	r2, [r2, #7]
    4f2e:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4f30:	2201      	movs	r2, #1
    4f32:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4f34:	4b05      	ldr	r3, [pc, #20]	; (4f4c <usbdc_start+0x34>)
    4f36:	4798      	blx	r3
	return ERR_NONE;
    4f38:	2000      	movs	r0, #0
}
    4f3a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    4f3c:	2004      	movs	r0, #4
    4f3e:	4240      	negs	r0, r0
    4f40:	e7fb      	b.n	4f3a <usbdc_start+0x22>
		return ERR_BAD_DATA;
    4f42:	2009      	movs	r0, #9
    4f44:	4240      	negs	r0, r0
    4f46:	e7f8      	b.n	4f3a <usbdc_start+0x22>
    4f48:	200009cc 	.word	0x200009cc
    4f4c:	00001e99 	.word	0x00001e99

00004f50 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4f50:	b510      	push	{r4, lr}
	usb_d_attach();
    4f52:	4b01      	ldr	r3, [pc, #4]	; (4f58 <usbdc_attach+0x8>)
    4f54:	4798      	blx	r3
}
    4f56:	bd10      	pop	{r4, pc}
    4f58:	00001ea5 	.word	0x00001ea5

00004f5c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    4f5c:	4b01      	ldr	r3, [pc, #4]	; (4f64 <usbdc_get_ctrl_buffer+0x8>)
    4f5e:	6958      	ldr	r0, [r3, #20]
}
    4f60:	4770      	bx	lr
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	200009cc 	.word	0x200009cc

00004f68 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4f68:	4b02      	ldr	r3, [pc, #8]	; (4f74 <usbdc_get_state+0xc>)
    4f6a:	7e98      	ldrb	r0, [r3, #26]
    4f6c:	06c3      	lsls	r3, r0, #27
    4f6e:	d500      	bpl.n	4f72 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    4f70:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    4f72:	4770      	bx	lr
    4f74:	200009cc 	.word	0x200009cc

00004f78 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    4f78:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4f7a:	4288      	cmp	r0, r1
    4f7c:	d207      	bcs.n	4f8e <usb_find_desc+0x16>
	return desc[0];
    4f7e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4f80:	2b01      	cmp	r3, #1
    4f82:	d906      	bls.n	4f92 <usb_find_desc+0x1a>
	return desc[1];
    4f84:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4f86:	4294      	cmp	r4, r2
    4f88:	d002      	beq.n	4f90 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    4f8a:	18c0      	adds	r0, r0, r3
    4f8c:	e7f5      	b.n	4f7a <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4f8e:	2000      	movs	r0, #0
}
    4f90:	bd10      	pop	{r4, pc}
		_desc_len_check();
    4f92:	2000      	movs	r0, #0
    4f94:	e7fc      	b.n	4f90 <usb_find_desc+0x18>

00004f96 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4f96:	4288      	cmp	r0, r1
    4f98:	d209      	bcs.n	4fae <usb_find_ep_desc+0x18>
	return desc[0];
    4f9a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4f9c:	2b01      	cmp	r3, #1
    4f9e:	d908      	bls.n	4fb2 <usb_find_ep_desc+0x1c>
	return desc[1];
    4fa0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4fa2:	2a04      	cmp	r2, #4
    4fa4:	d007      	beq.n	4fb6 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4fa6:	2a05      	cmp	r2, #5
    4fa8:	d002      	beq.n	4fb0 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    4faa:	18c0      	adds	r0, r0, r3
    4fac:	e7f3      	b.n	4f96 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4fae:	2000      	movs	r0, #0
}
    4fb0:	4770      	bx	lr
		_desc_len_check();
    4fb2:	2000      	movs	r0, #0
    4fb4:	e7fc      	b.n	4fb0 <usb_find_ep_desc+0x1a>
	return NULL;
    4fb6:	2000      	movs	r0, #0
    4fb8:	e7fa      	b.n	4fb0 <usb_find_ep_desc+0x1a>
	...

00004fbc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4fbc:	b570      	push	{r4, r5, r6, lr}
    4fbe:	000c      	movs	r4, r1
    4fc0:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4fc2:	2202      	movs	r2, #2
    4fc4:	4b0d      	ldr	r3, [pc, #52]	; (4ffc <usb_find_cfg_desc+0x40>)
    4fc6:	4798      	blx	r3
	if (!desc) {
    4fc8:	2800      	cmp	r0, #0
    4fca:	d012      	beq.n	4ff2 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    4fcc:	42a0      	cmp	r0, r4
    4fce:	d20f      	bcs.n	4ff0 <usb_find_cfg_desc+0x34>
	return desc[0];
    4fd0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4fd2:	2b01      	cmp	r3, #1
    4fd4:	d90e      	bls.n	4ff4 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    4fd6:	7843      	ldrb	r3, [r0, #1]
    4fd8:	2b02      	cmp	r3, #2
    4fda:	d10d      	bne.n	4ff8 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    4fdc:	7943      	ldrb	r3, [r0, #5]
    4fde:	42ab      	cmp	r3, r5
    4fe0:	d007      	beq.n	4ff2 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    4fe2:	7883      	ldrb	r3, [r0, #2]
    4fe4:	78c2      	ldrb	r2, [r0, #3]
    4fe6:	0212      	lsls	r2, r2, #8
    4fe8:	189b      	adds	r3, r3, r2
    4fea:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4fec:	18c0      	adds	r0, r0, r3
    4fee:	e7ed      	b.n	4fcc <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4ff0:	2000      	movs	r0, #0
}
    4ff2:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    4ff4:	2000      	movs	r0, #0
    4ff6:	e7fc      	b.n	4ff2 <usb_find_cfg_desc+0x36>
	return NULL;
    4ff8:	2000      	movs	r0, #0
    4ffa:	e7fa      	b.n	4ff2 <usb_find_cfg_desc+0x36>
    4ffc:	00004f79 	.word	0x00004f79

00005000 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    5000:	b570      	push	{r4, r5, r6, lr}
    5002:	000d      	movs	r5, r1
    5004:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    5006:	2400      	movs	r4, #0
    5008:	42a8      	cmp	r0, r5
    500a:	d20e      	bcs.n	502a <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    500c:	2203      	movs	r2, #3
    500e:	0029      	movs	r1, r5
    5010:	4b08      	ldr	r3, [pc, #32]	; (5034 <usb_find_str_desc+0x34>)
    5012:	4798      	blx	r3
		if (desc) {
    5014:	2800      	cmp	r0, #0
    5016:	d009      	beq.n	502c <usb_find_str_desc+0x2c>
	return desc[0];
    5018:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    501a:	2b01      	cmp	r3, #1
    501c:	d907      	bls.n	502e <usb_find_str_desc+0x2e>
			if (i == str_index) {
    501e:	42b4      	cmp	r4, r6
    5020:	d004      	beq.n	502c <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    5022:	3401      	adds	r4, #1
    5024:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    5026:	18c0      	adds	r0, r0, r3
    5028:	e7ee      	b.n	5008 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    502a:	2000      	movs	r0, #0
}
    502c:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    502e:	2000      	movs	r0, #0
    5030:	e7fc      	b.n	502c <usb_find_str_desc+0x2c>
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	00004f79 	.word	0x00004f79

00005038 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    5038:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    503a:	4806      	ldr	r0, [pc, #24]	; (5054 <cdc_device_acm_init+0x1c>)
    503c:	3040      	adds	r0, #64	; 0x40
    503e:	4b06      	ldr	r3, [pc, #24]	; (5058 <cdc_device_acm_init+0x20>)
    5040:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    5042:	4b06      	ldr	r3, [pc, #24]	; (505c <cdc_device_acm_init+0x24>)
    5044:	4798      	blx	r3

	usbdc_start(single_desc);
    5046:	4806      	ldr	r0, [pc, #24]	; (5060 <cdc_device_acm_init+0x28>)
    5048:	4b06      	ldr	r3, [pc, #24]	; (5064 <cdc_device_acm_init+0x2c>)
    504a:	4798      	blx	r3
	usbdc_attach();
    504c:	4b06      	ldr	r3, [pc, #24]	; (5068 <cdc_device_acm_init+0x30>)
    504e:	4798      	blx	r3
}
    5050:	bd10      	pop	{r4, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	200009ec 	.word	0x200009ec
    5058:	00004ea1 	.word	0x00004ea1
    505c:	00004649 	.word	0x00004649
    5060:	2000000c 	.word	0x2000000c
    5064:	00004f19 	.word	0x00004f19
    5068:	00004f51 	.word	0x00004f51

0000506c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    506c:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    506e:	4b01      	ldr	r3, [pc, #4]	; (5074 <usb_init+0x8>)
    5070:	4798      	blx	r3
}
    5072:	bd10      	pop	{r4, pc}
    5074:	00005039 	.word	0x00005039

00005078 <__aeabi_atexit>:
    5078:	000b      	movs	r3, r1
    507a:	b510      	push	{r4, lr}
    507c:	0001      	movs	r1, r0
    507e:	0018      	movs	r0, r3
    5080:	f002 f882 	bl	7188 <__cxa_atexit>
    5084:	bd10      	pop	{r4, pc}
    5086:	46c0      	nop			; (mov r8, r8)

00005088 <__udivsi3>:
    5088:	2200      	movs	r2, #0
    508a:	0843      	lsrs	r3, r0, #1
    508c:	428b      	cmp	r3, r1
    508e:	d374      	bcc.n	517a <__udivsi3+0xf2>
    5090:	0903      	lsrs	r3, r0, #4
    5092:	428b      	cmp	r3, r1
    5094:	d35f      	bcc.n	5156 <__udivsi3+0xce>
    5096:	0a03      	lsrs	r3, r0, #8
    5098:	428b      	cmp	r3, r1
    509a:	d344      	bcc.n	5126 <__udivsi3+0x9e>
    509c:	0b03      	lsrs	r3, r0, #12
    509e:	428b      	cmp	r3, r1
    50a0:	d328      	bcc.n	50f4 <__udivsi3+0x6c>
    50a2:	0c03      	lsrs	r3, r0, #16
    50a4:	428b      	cmp	r3, r1
    50a6:	d30d      	bcc.n	50c4 <__udivsi3+0x3c>
    50a8:	22ff      	movs	r2, #255	; 0xff
    50aa:	0209      	lsls	r1, r1, #8
    50ac:	ba12      	rev	r2, r2
    50ae:	0c03      	lsrs	r3, r0, #16
    50b0:	428b      	cmp	r3, r1
    50b2:	d302      	bcc.n	50ba <__udivsi3+0x32>
    50b4:	1212      	asrs	r2, r2, #8
    50b6:	0209      	lsls	r1, r1, #8
    50b8:	d065      	beq.n	5186 <__udivsi3+0xfe>
    50ba:	0b03      	lsrs	r3, r0, #12
    50bc:	428b      	cmp	r3, r1
    50be:	d319      	bcc.n	50f4 <__udivsi3+0x6c>
    50c0:	e000      	b.n	50c4 <__udivsi3+0x3c>
    50c2:	0a09      	lsrs	r1, r1, #8
    50c4:	0bc3      	lsrs	r3, r0, #15
    50c6:	428b      	cmp	r3, r1
    50c8:	d301      	bcc.n	50ce <__udivsi3+0x46>
    50ca:	03cb      	lsls	r3, r1, #15
    50cc:	1ac0      	subs	r0, r0, r3
    50ce:	4152      	adcs	r2, r2
    50d0:	0b83      	lsrs	r3, r0, #14
    50d2:	428b      	cmp	r3, r1
    50d4:	d301      	bcc.n	50da <__udivsi3+0x52>
    50d6:	038b      	lsls	r3, r1, #14
    50d8:	1ac0      	subs	r0, r0, r3
    50da:	4152      	adcs	r2, r2
    50dc:	0b43      	lsrs	r3, r0, #13
    50de:	428b      	cmp	r3, r1
    50e0:	d301      	bcc.n	50e6 <__udivsi3+0x5e>
    50e2:	034b      	lsls	r3, r1, #13
    50e4:	1ac0      	subs	r0, r0, r3
    50e6:	4152      	adcs	r2, r2
    50e8:	0b03      	lsrs	r3, r0, #12
    50ea:	428b      	cmp	r3, r1
    50ec:	d301      	bcc.n	50f2 <__udivsi3+0x6a>
    50ee:	030b      	lsls	r3, r1, #12
    50f0:	1ac0      	subs	r0, r0, r3
    50f2:	4152      	adcs	r2, r2
    50f4:	0ac3      	lsrs	r3, r0, #11
    50f6:	428b      	cmp	r3, r1
    50f8:	d301      	bcc.n	50fe <__udivsi3+0x76>
    50fa:	02cb      	lsls	r3, r1, #11
    50fc:	1ac0      	subs	r0, r0, r3
    50fe:	4152      	adcs	r2, r2
    5100:	0a83      	lsrs	r3, r0, #10
    5102:	428b      	cmp	r3, r1
    5104:	d301      	bcc.n	510a <__udivsi3+0x82>
    5106:	028b      	lsls	r3, r1, #10
    5108:	1ac0      	subs	r0, r0, r3
    510a:	4152      	adcs	r2, r2
    510c:	0a43      	lsrs	r3, r0, #9
    510e:	428b      	cmp	r3, r1
    5110:	d301      	bcc.n	5116 <__udivsi3+0x8e>
    5112:	024b      	lsls	r3, r1, #9
    5114:	1ac0      	subs	r0, r0, r3
    5116:	4152      	adcs	r2, r2
    5118:	0a03      	lsrs	r3, r0, #8
    511a:	428b      	cmp	r3, r1
    511c:	d301      	bcc.n	5122 <__udivsi3+0x9a>
    511e:	020b      	lsls	r3, r1, #8
    5120:	1ac0      	subs	r0, r0, r3
    5122:	4152      	adcs	r2, r2
    5124:	d2cd      	bcs.n	50c2 <__udivsi3+0x3a>
    5126:	09c3      	lsrs	r3, r0, #7
    5128:	428b      	cmp	r3, r1
    512a:	d301      	bcc.n	5130 <__udivsi3+0xa8>
    512c:	01cb      	lsls	r3, r1, #7
    512e:	1ac0      	subs	r0, r0, r3
    5130:	4152      	adcs	r2, r2
    5132:	0983      	lsrs	r3, r0, #6
    5134:	428b      	cmp	r3, r1
    5136:	d301      	bcc.n	513c <__udivsi3+0xb4>
    5138:	018b      	lsls	r3, r1, #6
    513a:	1ac0      	subs	r0, r0, r3
    513c:	4152      	adcs	r2, r2
    513e:	0943      	lsrs	r3, r0, #5
    5140:	428b      	cmp	r3, r1
    5142:	d301      	bcc.n	5148 <__udivsi3+0xc0>
    5144:	014b      	lsls	r3, r1, #5
    5146:	1ac0      	subs	r0, r0, r3
    5148:	4152      	adcs	r2, r2
    514a:	0903      	lsrs	r3, r0, #4
    514c:	428b      	cmp	r3, r1
    514e:	d301      	bcc.n	5154 <__udivsi3+0xcc>
    5150:	010b      	lsls	r3, r1, #4
    5152:	1ac0      	subs	r0, r0, r3
    5154:	4152      	adcs	r2, r2
    5156:	08c3      	lsrs	r3, r0, #3
    5158:	428b      	cmp	r3, r1
    515a:	d301      	bcc.n	5160 <__udivsi3+0xd8>
    515c:	00cb      	lsls	r3, r1, #3
    515e:	1ac0      	subs	r0, r0, r3
    5160:	4152      	adcs	r2, r2
    5162:	0883      	lsrs	r3, r0, #2
    5164:	428b      	cmp	r3, r1
    5166:	d301      	bcc.n	516c <__udivsi3+0xe4>
    5168:	008b      	lsls	r3, r1, #2
    516a:	1ac0      	subs	r0, r0, r3
    516c:	4152      	adcs	r2, r2
    516e:	0843      	lsrs	r3, r0, #1
    5170:	428b      	cmp	r3, r1
    5172:	d301      	bcc.n	5178 <__udivsi3+0xf0>
    5174:	004b      	lsls	r3, r1, #1
    5176:	1ac0      	subs	r0, r0, r3
    5178:	4152      	adcs	r2, r2
    517a:	1a41      	subs	r1, r0, r1
    517c:	d200      	bcs.n	5180 <__udivsi3+0xf8>
    517e:	4601      	mov	r1, r0
    5180:	4152      	adcs	r2, r2
    5182:	4610      	mov	r0, r2
    5184:	4770      	bx	lr
    5186:	e7ff      	b.n	5188 <__udivsi3+0x100>
    5188:	b501      	push	{r0, lr}
    518a:	2000      	movs	r0, #0
    518c:	f000 f806 	bl	519c <__aeabi_idiv0>
    5190:	bd02      	pop	{r1, pc}
    5192:	46c0      	nop			; (mov r8, r8)

00005194 <__aeabi_uidivmod>:
    5194:	2900      	cmp	r1, #0
    5196:	d0f7      	beq.n	5188 <__udivsi3+0x100>
    5198:	e776      	b.n	5088 <__udivsi3>
    519a:	4770      	bx	lr

0000519c <__aeabi_idiv0>:
    519c:	4770      	bx	lr
    519e:	46c0      	nop			; (mov r8, r8)

000051a0 <__aeabi_cdrcmple>:
    51a0:	4684      	mov	ip, r0
    51a2:	1c10      	adds	r0, r2, #0
    51a4:	4662      	mov	r2, ip
    51a6:	468c      	mov	ip, r1
    51a8:	1c19      	adds	r1, r3, #0
    51aa:	4663      	mov	r3, ip
    51ac:	e000      	b.n	51b0 <__aeabi_cdcmpeq>
    51ae:	46c0      	nop			; (mov r8, r8)

000051b0 <__aeabi_cdcmpeq>:
    51b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    51b2:	f001 f8d5 	bl	6360 <__ledf2>
    51b6:	2800      	cmp	r0, #0
    51b8:	d401      	bmi.n	51be <__aeabi_cdcmpeq+0xe>
    51ba:	2100      	movs	r1, #0
    51bc:	42c8      	cmn	r0, r1
    51be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000051c0 <__aeabi_dcmpeq>:
    51c0:	b510      	push	{r4, lr}
    51c2:	f001 f82f 	bl	6224 <__eqdf2>
    51c6:	4240      	negs	r0, r0
    51c8:	3001      	adds	r0, #1
    51ca:	bd10      	pop	{r4, pc}

000051cc <__aeabi_dcmplt>:
    51cc:	b510      	push	{r4, lr}
    51ce:	f001 f8c7 	bl	6360 <__ledf2>
    51d2:	2800      	cmp	r0, #0
    51d4:	db01      	blt.n	51da <__aeabi_dcmplt+0xe>
    51d6:	2000      	movs	r0, #0
    51d8:	bd10      	pop	{r4, pc}
    51da:	2001      	movs	r0, #1
    51dc:	bd10      	pop	{r4, pc}
    51de:	46c0      	nop			; (mov r8, r8)

000051e0 <__aeabi_dcmple>:
    51e0:	b510      	push	{r4, lr}
    51e2:	f001 f8bd 	bl	6360 <__ledf2>
    51e6:	2800      	cmp	r0, #0
    51e8:	dd01      	ble.n	51ee <__aeabi_dcmple+0xe>
    51ea:	2000      	movs	r0, #0
    51ec:	bd10      	pop	{r4, pc}
    51ee:	2001      	movs	r0, #1
    51f0:	bd10      	pop	{r4, pc}
    51f2:	46c0      	nop			; (mov r8, r8)

000051f4 <__aeabi_dcmpgt>:
    51f4:	b510      	push	{r4, lr}
    51f6:	f001 f84f 	bl	6298 <__gedf2>
    51fa:	2800      	cmp	r0, #0
    51fc:	dc01      	bgt.n	5202 <__aeabi_dcmpgt+0xe>
    51fe:	2000      	movs	r0, #0
    5200:	bd10      	pop	{r4, pc}
    5202:	2001      	movs	r0, #1
    5204:	bd10      	pop	{r4, pc}
    5206:	46c0      	nop			; (mov r8, r8)

00005208 <__aeabi_dcmpge>:
    5208:	b510      	push	{r4, lr}
    520a:	f001 f845 	bl	6298 <__gedf2>
    520e:	2800      	cmp	r0, #0
    5210:	da01      	bge.n	5216 <__aeabi_dcmpge+0xe>
    5212:	2000      	movs	r0, #0
    5214:	bd10      	pop	{r4, pc}
    5216:	2001      	movs	r0, #1
    5218:	bd10      	pop	{r4, pc}
    521a:	46c0      	nop			; (mov r8, r8)

0000521c <__ffssi2>:
    521c:	b510      	push	{r4, lr}
    521e:	2300      	movs	r3, #0
    5220:	2800      	cmp	r0, #0
    5222:	d002      	beq.n	522a <__ffssi2+0xe>
    5224:	f001 ff90 	bl	7148 <__ctzsi2>
    5228:	1c43      	adds	r3, r0, #1
    522a:	0018      	movs	r0, r3
    522c:	bd10      	pop	{r4, pc}
    522e:	46c0      	nop			; (mov r8, r8)

00005230 <__aeabi_d2uiz>:
    5230:	b570      	push	{r4, r5, r6, lr}
    5232:	2200      	movs	r2, #0
    5234:	4b0c      	ldr	r3, [pc, #48]	; (5268 <__aeabi_d2uiz+0x38>)
    5236:	0004      	movs	r4, r0
    5238:	000d      	movs	r5, r1
    523a:	f7ff ffe5 	bl	5208 <__aeabi_dcmpge>
    523e:	2800      	cmp	r0, #0
    5240:	d104      	bne.n	524c <__aeabi_d2uiz+0x1c>
    5242:	0020      	movs	r0, r4
    5244:	0029      	movs	r1, r5
    5246:	f001 fea3 	bl	6f90 <__aeabi_d2iz>
    524a:	bd70      	pop	{r4, r5, r6, pc}
    524c:	4b06      	ldr	r3, [pc, #24]	; (5268 <__aeabi_d2uiz+0x38>)
    524e:	2200      	movs	r2, #0
    5250:	0020      	movs	r0, r4
    5252:	0029      	movs	r1, r5
    5254:	f001 fb66 	bl	6924 <__aeabi_dsub>
    5258:	f001 fe9a 	bl	6f90 <__aeabi_d2iz>
    525c:	2380      	movs	r3, #128	; 0x80
    525e:	061b      	lsls	r3, r3, #24
    5260:	469c      	mov	ip, r3
    5262:	4460      	add	r0, ip
    5264:	e7f1      	b.n	524a <__aeabi_d2uiz+0x1a>
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	41e00000 	.word	0x41e00000

0000526c <__aeabi_fdiv>:
    526c:	b5f0      	push	{r4, r5, r6, r7, lr}
    526e:	4657      	mov	r7, sl
    5270:	464e      	mov	r6, r9
    5272:	46de      	mov	lr, fp
    5274:	4645      	mov	r5, r8
    5276:	b5e0      	push	{r5, r6, r7, lr}
    5278:	0244      	lsls	r4, r0, #9
    527a:	0043      	lsls	r3, r0, #1
    527c:	0fc6      	lsrs	r6, r0, #31
    527e:	b083      	sub	sp, #12
    5280:	1c0f      	adds	r7, r1, #0
    5282:	0a64      	lsrs	r4, r4, #9
    5284:	0e1b      	lsrs	r3, r3, #24
    5286:	46b2      	mov	sl, r6
    5288:	d053      	beq.n	5332 <__aeabi_fdiv+0xc6>
    528a:	2bff      	cmp	r3, #255	; 0xff
    528c:	d027      	beq.n	52de <__aeabi_fdiv+0x72>
    528e:	2280      	movs	r2, #128	; 0x80
    5290:	00e4      	lsls	r4, r4, #3
    5292:	04d2      	lsls	r2, r2, #19
    5294:	4314      	orrs	r4, r2
    5296:	227f      	movs	r2, #127	; 0x7f
    5298:	4252      	negs	r2, r2
    529a:	4690      	mov	r8, r2
    529c:	4498      	add	r8, r3
    529e:	2300      	movs	r3, #0
    52a0:	4699      	mov	r9, r3
    52a2:	469b      	mov	fp, r3
    52a4:	027d      	lsls	r5, r7, #9
    52a6:	0078      	lsls	r0, r7, #1
    52a8:	0ffb      	lsrs	r3, r7, #31
    52aa:	0a6d      	lsrs	r5, r5, #9
    52ac:	0e00      	lsrs	r0, r0, #24
    52ae:	9300      	str	r3, [sp, #0]
    52b0:	d024      	beq.n	52fc <__aeabi_fdiv+0x90>
    52b2:	28ff      	cmp	r0, #255	; 0xff
    52b4:	d046      	beq.n	5344 <__aeabi_fdiv+0xd8>
    52b6:	2380      	movs	r3, #128	; 0x80
    52b8:	2100      	movs	r1, #0
    52ba:	00ed      	lsls	r5, r5, #3
    52bc:	04db      	lsls	r3, r3, #19
    52be:	431d      	orrs	r5, r3
    52c0:	387f      	subs	r0, #127	; 0x7f
    52c2:	4647      	mov	r7, r8
    52c4:	1a38      	subs	r0, r7, r0
    52c6:	464f      	mov	r7, r9
    52c8:	430f      	orrs	r7, r1
    52ca:	00bf      	lsls	r7, r7, #2
    52cc:	46b9      	mov	r9, r7
    52ce:	0033      	movs	r3, r6
    52d0:	9a00      	ldr	r2, [sp, #0]
    52d2:	4f87      	ldr	r7, [pc, #540]	; (54f0 <__aeabi_fdiv+0x284>)
    52d4:	4053      	eors	r3, r2
    52d6:	464a      	mov	r2, r9
    52d8:	58ba      	ldr	r2, [r7, r2]
    52da:	9301      	str	r3, [sp, #4]
    52dc:	4697      	mov	pc, r2
    52de:	2c00      	cmp	r4, #0
    52e0:	d14e      	bne.n	5380 <__aeabi_fdiv+0x114>
    52e2:	2308      	movs	r3, #8
    52e4:	4699      	mov	r9, r3
    52e6:	33f7      	adds	r3, #247	; 0xf7
    52e8:	4698      	mov	r8, r3
    52ea:	3bfd      	subs	r3, #253	; 0xfd
    52ec:	469b      	mov	fp, r3
    52ee:	027d      	lsls	r5, r7, #9
    52f0:	0078      	lsls	r0, r7, #1
    52f2:	0ffb      	lsrs	r3, r7, #31
    52f4:	0a6d      	lsrs	r5, r5, #9
    52f6:	0e00      	lsrs	r0, r0, #24
    52f8:	9300      	str	r3, [sp, #0]
    52fa:	d1da      	bne.n	52b2 <__aeabi_fdiv+0x46>
    52fc:	2d00      	cmp	r5, #0
    52fe:	d126      	bne.n	534e <__aeabi_fdiv+0xe2>
    5300:	2000      	movs	r0, #0
    5302:	2101      	movs	r1, #1
    5304:	0033      	movs	r3, r6
    5306:	9a00      	ldr	r2, [sp, #0]
    5308:	4f7a      	ldr	r7, [pc, #488]	; (54f4 <__aeabi_fdiv+0x288>)
    530a:	4053      	eors	r3, r2
    530c:	4642      	mov	r2, r8
    530e:	1a10      	subs	r0, r2, r0
    5310:	464a      	mov	r2, r9
    5312:	430a      	orrs	r2, r1
    5314:	0092      	lsls	r2, r2, #2
    5316:	58ba      	ldr	r2, [r7, r2]
    5318:	001d      	movs	r5, r3
    531a:	4697      	mov	pc, r2
    531c:	9b00      	ldr	r3, [sp, #0]
    531e:	002c      	movs	r4, r5
    5320:	469a      	mov	sl, r3
    5322:	468b      	mov	fp, r1
    5324:	465b      	mov	r3, fp
    5326:	2b02      	cmp	r3, #2
    5328:	d131      	bne.n	538e <__aeabi_fdiv+0x122>
    532a:	4653      	mov	r3, sl
    532c:	21ff      	movs	r1, #255	; 0xff
    532e:	2400      	movs	r4, #0
    5330:	e038      	b.n	53a4 <__aeabi_fdiv+0x138>
    5332:	2c00      	cmp	r4, #0
    5334:	d117      	bne.n	5366 <__aeabi_fdiv+0xfa>
    5336:	2304      	movs	r3, #4
    5338:	4699      	mov	r9, r3
    533a:	2300      	movs	r3, #0
    533c:	4698      	mov	r8, r3
    533e:	3301      	adds	r3, #1
    5340:	469b      	mov	fp, r3
    5342:	e7af      	b.n	52a4 <__aeabi_fdiv+0x38>
    5344:	20ff      	movs	r0, #255	; 0xff
    5346:	2d00      	cmp	r5, #0
    5348:	d10b      	bne.n	5362 <__aeabi_fdiv+0xf6>
    534a:	2102      	movs	r1, #2
    534c:	e7da      	b.n	5304 <__aeabi_fdiv+0x98>
    534e:	0028      	movs	r0, r5
    5350:	f001 fedc 	bl	710c <__clzsi2>
    5354:	1f43      	subs	r3, r0, #5
    5356:	409d      	lsls	r5, r3
    5358:	2376      	movs	r3, #118	; 0x76
    535a:	425b      	negs	r3, r3
    535c:	1a18      	subs	r0, r3, r0
    535e:	2100      	movs	r1, #0
    5360:	e7af      	b.n	52c2 <__aeabi_fdiv+0x56>
    5362:	2103      	movs	r1, #3
    5364:	e7ad      	b.n	52c2 <__aeabi_fdiv+0x56>
    5366:	0020      	movs	r0, r4
    5368:	f001 fed0 	bl	710c <__clzsi2>
    536c:	1f43      	subs	r3, r0, #5
    536e:	409c      	lsls	r4, r3
    5370:	2376      	movs	r3, #118	; 0x76
    5372:	425b      	negs	r3, r3
    5374:	1a1b      	subs	r3, r3, r0
    5376:	4698      	mov	r8, r3
    5378:	2300      	movs	r3, #0
    537a:	4699      	mov	r9, r3
    537c:	469b      	mov	fp, r3
    537e:	e791      	b.n	52a4 <__aeabi_fdiv+0x38>
    5380:	230c      	movs	r3, #12
    5382:	4699      	mov	r9, r3
    5384:	33f3      	adds	r3, #243	; 0xf3
    5386:	4698      	mov	r8, r3
    5388:	3bfc      	subs	r3, #252	; 0xfc
    538a:	469b      	mov	fp, r3
    538c:	e78a      	b.n	52a4 <__aeabi_fdiv+0x38>
    538e:	2b03      	cmp	r3, #3
    5390:	d100      	bne.n	5394 <__aeabi_fdiv+0x128>
    5392:	e0a5      	b.n	54e0 <__aeabi_fdiv+0x274>
    5394:	4655      	mov	r5, sl
    5396:	2b01      	cmp	r3, #1
    5398:	d000      	beq.n	539c <__aeabi_fdiv+0x130>
    539a:	e081      	b.n	54a0 <__aeabi_fdiv+0x234>
    539c:	2301      	movs	r3, #1
    539e:	2100      	movs	r1, #0
    53a0:	2400      	movs	r4, #0
    53a2:	402b      	ands	r3, r5
    53a4:	0264      	lsls	r4, r4, #9
    53a6:	05c9      	lsls	r1, r1, #23
    53a8:	0a60      	lsrs	r0, r4, #9
    53aa:	07db      	lsls	r3, r3, #31
    53ac:	4308      	orrs	r0, r1
    53ae:	4318      	orrs	r0, r3
    53b0:	b003      	add	sp, #12
    53b2:	bc3c      	pop	{r2, r3, r4, r5}
    53b4:	4690      	mov	r8, r2
    53b6:	4699      	mov	r9, r3
    53b8:	46a2      	mov	sl, r4
    53ba:	46ab      	mov	fp, r5
    53bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53be:	2480      	movs	r4, #128	; 0x80
    53c0:	2300      	movs	r3, #0
    53c2:	03e4      	lsls	r4, r4, #15
    53c4:	21ff      	movs	r1, #255	; 0xff
    53c6:	e7ed      	b.n	53a4 <__aeabi_fdiv+0x138>
    53c8:	21ff      	movs	r1, #255	; 0xff
    53ca:	2400      	movs	r4, #0
    53cc:	e7ea      	b.n	53a4 <__aeabi_fdiv+0x138>
    53ce:	2301      	movs	r3, #1
    53d0:	1a59      	subs	r1, r3, r1
    53d2:	291b      	cmp	r1, #27
    53d4:	dd66      	ble.n	54a4 <__aeabi_fdiv+0x238>
    53d6:	9a01      	ldr	r2, [sp, #4]
    53d8:	4013      	ands	r3, r2
    53da:	2100      	movs	r1, #0
    53dc:	2400      	movs	r4, #0
    53de:	e7e1      	b.n	53a4 <__aeabi_fdiv+0x138>
    53e0:	2380      	movs	r3, #128	; 0x80
    53e2:	03db      	lsls	r3, r3, #15
    53e4:	421c      	tst	r4, r3
    53e6:	d038      	beq.n	545a <__aeabi_fdiv+0x1ee>
    53e8:	421d      	tst	r5, r3
    53ea:	d051      	beq.n	5490 <__aeabi_fdiv+0x224>
    53ec:	431c      	orrs	r4, r3
    53ee:	0264      	lsls	r4, r4, #9
    53f0:	0a64      	lsrs	r4, r4, #9
    53f2:	0033      	movs	r3, r6
    53f4:	21ff      	movs	r1, #255	; 0xff
    53f6:	e7d5      	b.n	53a4 <__aeabi_fdiv+0x138>
    53f8:	0163      	lsls	r3, r4, #5
    53fa:	016c      	lsls	r4, r5, #5
    53fc:	42a3      	cmp	r3, r4
    53fe:	d23b      	bcs.n	5478 <__aeabi_fdiv+0x20c>
    5400:	261b      	movs	r6, #27
    5402:	2100      	movs	r1, #0
    5404:	3801      	subs	r0, #1
    5406:	2501      	movs	r5, #1
    5408:	001f      	movs	r7, r3
    540a:	0049      	lsls	r1, r1, #1
    540c:	005b      	lsls	r3, r3, #1
    540e:	2f00      	cmp	r7, #0
    5410:	db01      	blt.n	5416 <__aeabi_fdiv+0x1aa>
    5412:	429c      	cmp	r4, r3
    5414:	d801      	bhi.n	541a <__aeabi_fdiv+0x1ae>
    5416:	1b1b      	subs	r3, r3, r4
    5418:	4329      	orrs	r1, r5
    541a:	3e01      	subs	r6, #1
    541c:	2e00      	cmp	r6, #0
    541e:	d1f3      	bne.n	5408 <__aeabi_fdiv+0x19c>
    5420:	001c      	movs	r4, r3
    5422:	1e63      	subs	r3, r4, #1
    5424:	419c      	sbcs	r4, r3
    5426:	430c      	orrs	r4, r1
    5428:	0001      	movs	r1, r0
    542a:	317f      	adds	r1, #127	; 0x7f
    542c:	2900      	cmp	r1, #0
    542e:	ddce      	ble.n	53ce <__aeabi_fdiv+0x162>
    5430:	0763      	lsls	r3, r4, #29
    5432:	d004      	beq.n	543e <__aeabi_fdiv+0x1d2>
    5434:	230f      	movs	r3, #15
    5436:	4023      	ands	r3, r4
    5438:	2b04      	cmp	r3, #4
    543a:	d000      	beq.n	543e <__aeabi_fdiv+0x1d2>
    543c:	3404      	adds	r4, #4
    543e:	0123      	lsls	r3, r4, #4
    5440:	d503      	bpl.n	544a <__aeabi_fdiv+0x1de>
    5442:	0001      	movs	r1, r0
    5444:	4b2c      	ldr	r3, [pc, #176]	; (54f8 <__aeabi_fdiv+0x28c>)
    5446:	3180      	adds	r1, #128	; 0x80
    5448:	401c      	ands	r4, r3
    544a:	29fe      	cmp	r1, #254	; 0xfe
    544c:	dd0d      	ble.n	546a <__aeabi_fdiv+0x1fe>
    544e:	2301      	movs	r3, #1
    5450:	9a01      	ldr	r2, [sp, #4]
    5452:	21ff      	movs	r1, #255	; 0xff
    5454:	4013      	ands	r3, r2
    5456:	2400      	movs	r4, #0
    5458:	e7a4      	b.n	53a4 <__aeabi_fdiv+0x138>
    545a:	2380      	movs	r3, #128	; 0x80
    545c:	03db      	lsls	r3, r3, #15
    545e:	431c      	orrs	r4, r3
    5460:	0264      	lsls	r4, r4, #9
    5462:	0a64      	lsrs	r4, r4, #9
    5464:	0033      	movs	r3, r6
    5466:	21ff      	movs	r1, #255	; 0xff
    5468:	e79c      	b.n	53a4 <__aeabi_fdiv+0x138>
    546a:	2301      	movs	r3, #1
    546c:	9a01      	ldr	r2, [sp, #4]
    546e:	01a4      	lsls	r4, r4, #6
    5470:	0a64      	lsrs	r4, r4, #9
    5472:	b2c9      	uxtb	r1, r1
    5474:	4013      	ands	r3, r2
    5476:	e795      	b.n	53a4 <__aeabi_fdiv+0x138>
    5478:	1b1b      	subs	r3, r3, r4
    547a:	261a      	movs	r6, #26
    547c:	2101      	movs	r1, #1
    547e:	e7c2      	b.n	5406 <__aeabi_fdiv+0x19a>
    5480:	9b00      	ldr	r3, [sp, #0]
    5482:	468b      	mov	fp, r1
    5484:	469a      	mov	sl, r3
    5486:	2400      	movs	r4, #0
    5488:	e74c      	b.n	5324 <__aeabi_fdiv+0xb8>
    548a:	0263      	lsls	r3, r4, #9
    548c:	d5e5      	bpl.n	545a <__aeabi_fdiv+0x1ee>
    548e:	2500      	movs	r5, #0
    5490:	2480      	movs	r4, #128	; 0x80
    5492:	03e4      	lsls	r4, r4, #15
    5494:	432c      	orrs	r4, r5
    5496:	0264      	lsls	r4, r4, #9
    5498:	0a64      	lsrs	r4, r4, #9
    549a:	9b00      	ldr	r3, [sp, #0]
    549c:	21ff      	movs	r1, #255	; 0xff
    549e:	e781      	b.n	53a4 <__aeabi_fdiv+0x138>
    54a0:	9501      	str	r5, [sp, #4]
    54a2:	e7c1      	b.n	5428 <__aeabi_fdiv+0x1bc>
    54a4:	0023      	movs	r3, r4
    54a6:	2020      	movs	r0, #32
    54a8:	40cb      	lsrs	r3, r1
    54aa:	1a41      	subs	r1, r0, r1
    54ac:	408c      	lsls	r4, r1
    54ae:	1e61      	subs	r1, r4, #1
    54b0:	418c      	sbcs	r4, r1
    54b2:	431c      	orrs	r4, r3
    54b4:	0763      	lsls	r3, r4, #29
    54b6:	d004      	beq.n	54c2 <__aeabi_fdiv+0x256>
    54b8:	230f      	movs	r3, #15
    54ba:	4023      	ands	r3, r4
    54bc:	2b04      	cmp	r3, #4
    54be:	d000      	beq.n	54c2 <__aeabi_fdiv+0x256>
    54c0:	3404      	adds	r4, #4
    54c2:	0163      	lsls	r3, r4, #5
    54c4:	d505      	bpl.n	54d2 <__aeabi_fdiv+0x266>
    54c6:	2301      	movs	r3, #1
    54c8:	9a01      	ldr	r2, [sp, #4]
    54ca:	2101      	movs	r1, #1
    54cc:	4013      	ands	r3, r2
    54ce:	2400      	movs	r4, #0
    54d0:	e768      	b.n	53a4 <__aeabi_fdiv+0x138>
    54d2:	2301      	movs	r3, #1
    54d4:	9a01      	ldr	r2, [sp, #4]
    54d6:	01a4      	lsls	r4, r4, #6
    54d8:	0a64      	lsrs	r4, r4, #9
    54da:	4013      	ands	r3, r2
    54dc:	2100      	movs	r1, #0
    54de:	e761      	b.n	53a4 <__aeabi_fdiv+0x138>
    54e0:	2380      	movs	r3, #128	; 0x80
    54e2:	03db      	lsls	r3, r3, #15
    54e4:	431c      	orrs	r4, r3
    54e6:	0264      	lsls	r4, r4, #9
    54e8:	0a64      	lsrs	r4, r4, #9
    54ea:	4653      	mov	r3, sl
    54ec:	21ff      	movs	r1, #255	; 0xff
    54ee:	e759      	b.n	53a4 <__aeabi_fdiv+0x138>
    54f0:	00007794 	.word	0x00007794
    54f4:	000077d4 	.word	0x000077d4
    54f8:	f7ffffff 	.word	0xf7ffffff

000054fc <__aeabi_i2f>:
    54fc:	b570      	push	{r4, r5, r6, lr}
    54fe:	2800      	cmp	r0, #0
    5500:	d030      	beq.n	5564 <__aeabi_i2f+0x68>
    5502:	17c3      	asrs	r3, r0, #31
    5504:	18c4      	adds	r4, r0, r3
    5506:	405c      	eors	r4, r3
    5508:	0fc5      	lsrs	r5, r0, #31
    550a:	0020      	movs	r0, r4
    550c:	f001 fdfe 	bl	710c <__clzsi2>
    5510:	239e      	movs	r3, #158	; 0x9e
    5512:	1a1b      	subs	r3, r3, r0
    5514:	2b96      	cmp	r3, #150	; 0x96
    5516:	dc0d      	bgt.n	5534 <__aeabi_i2f+0x38>
    5518:	2296      	movs	r2, #150	; 0x96
    551a:	1ad2      	subs	r2, r2, r3
    551c:	4094      	lsls	r4, r2
    551e:	002a      	movs	r2, r5
    5520:	0264      	lsls	r4, r4, #9
    5522:	0a64      	lsrs	r4, r4, #9
    5524:	b2db      	uxtb	r3, r3
    5526:	0264      	lsls	r4, r4, #9
    5528:	05db      	lsls	r3, r3, #23
    552a:	0a60      	lsrs	r0, r4, #9
    552c:	07d2      	lsls	r2, r2, #31
    552e:	4318      	orrs	r0, r3
    5530:	4310      	orrs	r0, r2
    5532:	bd70      	pop	{r4, r5, r6, pc}
    5534:	2b99      	cmp	r3, #153	; 0x99
    5536:	dc19      	bgt.n	556c <__aeabi_i2f+0x70>
    5538:	2299      	movs	r2, #153	; 0x99
    553a:	1ad2      	subs	r2, r2, r3
    553c:	2a00      	cmp	r2, #0
    553e:	dd29      	ble.n	5594 <__aeabi_i2f+0x98>
    5540:	4094      	lsls	r4, r2
    5542:	0022      	movs	r2, r4
    5544:	4c14      	ldr	r4, [pc, #80]	; (5598 <__aeabi_i2f+0x9c>)
    5546:	4014      	ands	r4, r2
    5548:	0751      	lsls	r1, r2, #29
    554a:	d004      	beq.n	5556 <__aeabi_i2f+0x5a>
    554c:	210f      	movs	r1, #15
    554e:	400a      	ands	r2, r1
    5550:	2a04      	cmp	r2, #4
    5552:	d000      	beq.n	5556 <__aeabi_i2f+0x5a>
    5554:	3404      	adds	r4, #4
    5556:	0162      	lsls	r2, r4, #5
    5558:	d413      	bmi.n	5582 <__aeabi_i2f+0x86>
    555a:	01a4      	lsls	r4, r4, #6
    555c:	0a64      	lsrs	r4, r4, #9
    555e:	b2db      	uxtb	r3, r3
    5560:	002a      	movs	r2, r5
    5562:	e7e0      	b.n	5526 <__aeabi_i2f+0x2a>
    5564:	2200      	movs	r2, #0
    5566:	2300      	movs	r3, #0
    5568:	2400      	movs	r4, #0
    556a:	e7dc      	b.n	5526 <__aeabi_i2f+0x2a>
    556c:	2205      	movs	r2, #5
    556e:	0021      	movs	r1, r4
    5570:	1a12      	subs	r2, r2, r0
    5572:	40d1      	lsrs	r1, r2
    5574:	22b9      	movs	r2, #185	; 0xb9
    5576:	1ad2      	subs	r2, r2, r3
    5578:	4094      	lsls	r4, r2
    557a:	1e62      	subs	r2, r4, #1
    557c:	4194      	sbcs	r4, r2
    557e:	430c      	orrs	r4, r1
    5580:	e7da      	b.n	5538 <__aeabi_i2f+0x3c>
    5582:	4b05      	ldr	r3, [pc, #20]	; (5598 <__aeabi_i2f+0x9c>)
    5584:	002a      	movs	r2, r5
    5586:	401c      	ands	r4, r3
    5588:	239f      	movs	r3, #159	; 0x9f
    558a:	01a4      	lsls	r4, r4, #6
    558c:	1a1b      	subs	r3, r3, r0
    558e:	0a64      	lsrs	r4, r4, #9
    5590:	b2db      	uxtb	r3, r3
    5592:	e7c8      	b.n	5526 <__aeabi_i2f+0x2a>
    5594:	0022      	movs	r2, r4
    5596:	e7d5      	b.n	5544 <__aeabi_i2f+0x48>
    5598:	fbffffff 	.word	0xfbffffff

0000559c <__aeabi_dadd>:
    559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    559e:	4645      	mov	r5, r8
    55a0:	46de      	mov	lr, fp
    55a2:	4657      	mov	r7, sl
    55a4:	464e      	mov	r6, r9
    55a6:	030c      	lsls	r4, r1, #12
    55a8:	b5e0      	push	{r5, r6, r7, lr}
    55aa:	004e      	lsls	r6, r1, #1
    55ac:	0fc9      	lsrs	r1, r1, #31
    55ae:	4688      	mov	r8, r1
    55b0:	000d      	movs	r5, r1
    55b2:	0a61      	lsrs	r1, r4, #9
    55b4:	0f44      	lsrs	r4, r0, #29
    55b6:	430c      	orrs	r4, r1
    55b8:	00c7      	lsls	r7, r0, #3
    55ba:	0319      	lsls	r1, r3, #12
    55bc:	0058      	lsls	r0, r3, #1
    55be:	0fdb      	lsrs	r3, r3, #31
    55c0:	469b      	mov	fp, r3
    55c2:	0a4b      	lsrs	r3, r1, #9
    55c4:	0f51      	lsrs	r1, r2, #29
    55c6:	430b      	orrs	r3, r1
    55c8:	0d76      	lsrs	r6, r6, #21
    55ca:	0d40      	lsrs	r0, r0, #21
    55cc:	0019      	movs	r1, r3
    55ce:	00d2      	lsls	r2, r2, #3
    55d0:	45d8      	cmp	r8, fp
    55d2:	d100      	bne.n	55d6 <__aeabi_dadd+0x3a>
    55d4:	e0ae      	b.n	5734 <__aeabi_dadd+0x198>
    55d6:	1a35      	subs	r5, r6, r0
    55d8:	2d00      	cmp	r5, #0
    55da:	dc00      	bgt.n	55de <__aeabi_dadd+0x42>
    55dc:	e0f6      	b.n	57cc <__aeabi_dadd+0x230>
    55de:	2800      	cmp	r0, #0
    55e0:	d10f      	bne.n	5602 <__aeabi_dadd+0x66>
    55e2:	4313      	orrs	r3, r2
    55e4:	d100      	bne.n	55e8 <__aeabi_dadd+0x4c>
    55e6:	e0db      	b.n	57a0 <__aeabi_dadd+0x204>
    55e8:	1e6b      	subs	r3, r5, #1
    55ea:	2b00      	cmp	r3, #0
    55ec:	d000      	beq.n	55f0 <__aeabi_dadd+0x54>
    55ee:	e137      	b.n	5860 <__aeabi_dadd+0x2c4>
    55f0:	1aba      	subs	r2, r7, r2
    55f2:	4297      	cmp	r7, r2
    55f4:	41bf      	sbcs	r7, r7
    55f6:	1a64      	subs	r4, r4, r1
    55f8:	427f      	negs	r7, r7
    55fa:	1be4      	subs	r4, r4, r7
    55fc:	2601      	movs	r6, #1
    55fe:	0017      	movs	r7, r2
    5600:	e024      	b.n	564c <__aeabi_dadd+0xb0>
    5602:	4bc6      	ldr	r3, [pc, #792]	; (591c <__aeabi_dadd+0x380>)
    5604:	429e      	cmp	r6, r3
    5606:	d04d      	beq.n	56a4 <__aeabi_dadd+0x108>
    5608:	2380      	movs	r3, #128	; 0x80
    560a:	041b      	lsls	r3, r3, #16
    560c:	4319      	orrs	r1, r3
    560e:	2d38      	cmp	r5, #56	; 0x38
    5610:	dd00      	ble.n	5614 <__aeabi_dadd+0x78>
    5612:	e107      	b.n	5824 <__aeabi_dadd+0x288>
    5614:	2d1f      	cmp	r5, #31
    5616:	dd00      	ble.n	561a <__aeabi_dadd+0x7e>
    5618:	e138      	b.n	588c <__aeabi_dadd+0x2f0>
    561a:	2020      	movs	r0, #32
    561c:	1b43      	subs	r3, r0, r5
    561e:	469a      	mov	sl, r3
    5620:	000b      	movs	r3, r1
    5622:	4650      	mov	r0, sl
    5624:	4083      	lsls	r3, r0
    5626:	4699      	mov	r9, r3
    5628:	0013      	movs	r3, r2
    562a:	4648      	mov	r0, r9
    562c:	40eb      	lsrs	r3, r5
    562e:	4318      	orrs	r0, r3
    5630:	0003      	movs	r3, r0
    5632:	4650      	mov	r0, sl
    5634:	4082      	lsls	r2, r0
    5636:	1e50      	subs	r0, r2, #1
    5638:	4182      	sbcs	r2, r0
    563a:	40e9      	lsrs	r1, r5
    563c:	431a      	orrs	r2, r3
    563e:	1aba      	subs	r2, r7, r2
    5640:	1a61      	subs	r1, r4, r1
    5642:	4297      	cmp	r7, r2
    5644:	41a4      	sbcs	r4, r4
    5646:	0017      	movs	r7, r2
    5648:	4264      	negs	r4, r4
    564a:	1b0c      	subs	r4, r1, r4
    564c:	0223      	lsls	r3, r4, #8
    564e:	d562      	bpl.n	5716 <__aeabi_dadd+0x17a>
    5650:	0264      	lsls	r4, r4, #9
    5652:	0a65      	lsrs	r5, r4, #9
    5654:	2d00      	cmp	r5, #0
    5656:	d100      	bne.n	565a <__aeabi_dadd+0xbe>
    5658:	e0df      	b.n	581a <__aeabi_dadd+0x27e>
    565a:	0028      	movs	r0, r5
    565c:	f001 fd56 	bl	710c <__clzsi2>
    5660:	0003      	movs	r3, r0
    5662:	3b08      	subs	r3, #8
    5664:	2b1f      	cmp	r3, #31
    5666:	dd00      	ble.n	566a <__aeabi_dadd+0xce>
    5668:	e0d2      	b.n	5810 <__aeabi_dadd+0x274>
    566a:	2220      	movs	r2, #32
    566c:	003c      	movs	r4, r7
    566e:	1ad2      	subs	r2, r2, r3
    5670:	409d      	lsls	r5, r3
    5672:	40d4      	lsrs	r4, r2
    5674:	409f      	lsls	r7, r3
    5676:	4325      	orrs	r5, r4
    5678:	429e      	cmp	r6, r3
    567a:	dd00      	ble.n	567e <__aeabi_dadd+0xe2>
    567c:	e0c4      	b.n	5808 <__aeabi_dadd+0x26c>
    567e:	1b9e      	subs	r6, r3, r6
    5680:	1c73      	adds	r3, r6, #1
    5682:	2b1f      	cmp	r3, #31
    5684:	dd00      	ble.n	5688 <__aeabi_dadd+0xec>
    5686:	e0f1      	b.n	586c <__aeabi_dadd+0x2d0>
    5688:	2220      	movs	r2, #32
    568a:	0038      	movs	r0, r7
    568c:	0029      	movs	r1, r5
    568e:	1ad2      	subs	r2, r2, r3
    5690:	40d8      	lsrs	r0, r3
    5692:	4091      	lsls	r1, r2
    5694:	4097      	lsls	r7, r2
    5696:	002c      	movs	r4, r5
    5698:	4301      	orrs	r1, r0
    569a:	1e78      	subs	r0, r7, #1
    569c:	4187      	sbcs	r7, r0
    569e:	40dc      	lsrs	r4, r3
    56a0:	2600      	movs	r6, #0
    56a2:	430f      	orrs	r7, r1
    56a4:	077b      	lsls	r3, r7, #29
    56a6:	d009      	beq.n	56bc <__aeabi_dadd+0x120>
    56a8:	230f      	movs	r3, #15
    56aa:	403b      	ands	r3, r7
    56ac:	2b04      	cmp	r3, #4
    56ae:	d005      	beq.n	56bc <__aeabi_dadd+0x120>
    56b0:	1d3b      	adds	r3, r7, #4
    56b2:	42bb      	cmp	r3, r7
    56b4:	41bf      	sbcs	r7, r7
    56b6:	427f      	negs	r7, r7
    56b8:	19e4      	adds	r4, r4, r7
    56ba:	001f      	movs	r7, r3
    56bc:	0223      	lsls	r3, r4, #8
    56be:	d52c      	bpl.n	571a <__aeabi_dadd+0x17e>
    56c0:	4b96      	ldr	r3, [pc, #600]	; (591c <__aeabi_dadd+0x380>)
    56c2:	3601      	adds	r6, #1
    56c4:	429e      	cmp	r6, r3
    56c6:	d100      	bne.n	56ca <__aeabi_dadd+0x12e>
    56c8:	e09a      	b.n	5800 <__aeabi_dadd+0x264>
    56ca:	4645      	mov	r5, r8
    56cc:	4b94      	ldr	r3, [pc, #592]	; (5920 <__aeabi_dadd+0x384>)
    56ce:	08ff      	lsrs	r7, r7, #3
    56d0:	401c      	ands	r4, r3
    56d2:	0760      	lsls	r0, r4, #29
    56d4:	0576      	lsls	r6, r6, #21
    56d6:	0264      	lsls	r4, r4, #9
    56d8:	4307      	orrs	r7, r0
    56da:	0b24      	lsrs	r4, r4, #12
    56dc:	0d76      	lsrs	r6, r6, #21
    56de:	2100      	movs	r1, #0
    56e0:	0324      	lsls	r4, r4, #12
    56e2:	0b23      	lsrs	r3, r4, #12
    56e4:	0d0c      	lsrs	r4, r1, #20
    56e6:	4a8f      	ldr	r2, [pc, #572]	; (5924 <__aeabi_dadd+0x388>)
    56e8:	0524      	lsls	r4, r4, #20
    56ea:	431c      	orrs	r4, r3
    56ec:	4014      	ands	r4, r2
    56ee:	0533      	lsls	r3, r6, #20
    56f0:	4323      	orrs	r3, r4
    56f2:	005b      	lsls	r3, r3, #1
    56f4:	07ed      	lsls	r5, r5, #31
    56f6:	085b      	lsrs	r3, r3, #1
    56f8:	432b      	orrs	r3, r5
    56fa:	0038      	movs	r0, r7
    56fc:	0019      	movs	r1, r3
    56fe:	bc3c      	pop	{r2, r3, r4, r5}
    5700:	4690      	mov	r8, r2
    5702:	4699      	mov	r9, r3
    5704:	46a2      	mov	sl, r4
    5706:	46ab      	mov	fp, r5
    5708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    570a:	4664      	mov	r4, ip
    570c:	4304      	orrs	r4, r0
    570e:	d100      	bne.n	5712 <__aeabi_dadd+0x176>
    5710:	e211      	b.n	5b36 <__aeabi_dadd+0x59a>
    5712:	0004      	movs	r4, r0
    5714:	4667      	mov	r7, ip
    5716:	077b      	lsls	r3, r7, #29
    5718:	d1c6      	bne.n	56a8 <__aeabi_dadd+0x10c>
    571a:	4645      	mov	r5, r8
    571c:	0760      	lsls	r0, r4, #29
    571e:	08ff      	lsrs	r7, r7, #3
    5720:	4307      	orrs	r7, r0
    5722:	08e4      	lsrs	r4, r4, #3
    5724:	4b7d      	ldr	r3, [pc, #500]	; (591c <__aeabi_dadd+0x380>)
    5726:	429e      	cmp	r6, r3
    5728:	d030      	beq.n	578c <__aeabi_dadd+0x1f0>
    572a:	0324      	lsls	r4, r4, #12
    572c:	0576      	lsls	r6, r6, #21
    572e:	0b24      	lsrs	r4, r4, #12
    5730:	0d76      	lsrs	r6, r6, #21
    5732:	e7d4      	b.n	56de <__aeabi_dadd+0x142>
    5734:	1a33      	subs	r3, r6, r0
    5736:	469a      	mov	sl, r3
    5738:	2b00      	cmp	r3, #0
    573a:	dd78      	ble.n	582e <__aeabi_dadd+0x292>
    573c:	2800      	cmp	r0, #0
    573e:	d031      	beq.n	57a4 <__aeabi_dadd+0x208>
    5740:	4876      	ldr	r0, [pc, #472]	; (591c <__aeabi_dadd+0x380>)
    5742:	4286      	cmp	r6, r0
    5744:	d0ae      	beq.n	56a4 <__aeabi_dadd+0x108>
    5746:	2080      	movs	r0, #128	; 0x80
    5748:	0400      	lsls	r0, r0, #16
    574a:	4301      	orrs	r1, r0
    574c:	4653      	mov	r3, sl
    574e:	2b38      	cmp	r3, #56	; 0x38
    5750:	dc00      	bgt.n	5754 <__aeabi_dadd+0x1b8>
    5752:	e0e9      	b.n	5928 <__aeabi_dadd+0x38c>
    5754:	430a      	orrs	r2, r1
    5756:	1e51      	subs	r1, r2, #1
    5758:	418a      	sbcs	r2, r1
    575a:	2100      	movs	r1, #0
    575c:	19d2      	adds	r2, r2, r7
    575e:	42ba      	cmp	r2, r7
    5760:	41bf      	sbcs	r7, r7
    5762:	1909      	adds	r1, r1, r4
    5764:	427c      	negs	r4, r7
    5766:	0017      	movs	r7, r2
    5768:	190c      	adds	r4, r1, r4
    576a:	0223      	lsls	r3, r4, #8
    576c:	d5d3      	bpl.n	5716 <__aeabi_dadd+0x17a>
    576e:	4b6b      	ldr	r3, [pc, #428]	; (591c <__aeabi_dadd+0x380>)
    5770:	3601      	adds	r6, #1
    5772:	429e      	cmp	r6, r3
    5774:	d100      	bne.n	5778 <__aeabi_dadd+0x1dc>
    5776:	e13a      	b.n	59ee <__aeabi_dadd+0x452>
    5778:	2001      	movs	r0, #1
    577a:	4b69      	ldr	r3, [pc, #420]	; (5920 <__aeabi_dadd+0x384>)
    577c:	401c      	ands	r4, r3
    577e:	087b      	lsrs	r3, r7, #1
    5780:	4007      	ands	r7, r0
    5782:	431f      	orrs	r7, r3
    5784:	07e0      	lsls	r0, r4, #31
    5786:	4307      	orrs	r7, r0
    5788:	0864      	lsrs	r4, r4, #1
    578a:	e78b      	b.n	56a4 <__aeabi_dadd+0x108>
    578c:	0023      	movs	r3, r4
    578e:	433b      	orrs	r3, r7
    5790:	d100      	bne.n	5794 <__aeabi_dadd+0x1f8>
    5792:	e1cb      	b.n	5b2c <__aeabi_dadd+0x590>
    5794:	2280      	movs	r2, #128	; 0x80
    5796:	0312      	lsls	r2, r2, #12
    5798:	4314      	orrs	r4, r2
    579a:	0324      	lsls	r4, r4, #12
    579c:	0b24      	lsrs	r4, r4, #12
    579e:	e79e      	b.n	56de <__aeabi_dadd+0x142>
    57a0:	002e      	movs	r6, r5
    57a2:	e77f      	b.n	56a4 <__aeabi_dadd+0x108>
    57a4:	0008      	movs	r0, r1
    57a6:	4310      	orrs	r0, r2
    57a8:	d100      	bne.n	57ac <__aeabi_dadd+0x210>
    57aa:	e0b4      	b.n	5916 <__aeabi_dadd+0x37a>
    57ac:	1e58      	subs	r0, r3, #1
    57ae:	2800      	cmp	r0, #0
    57b0:	d000      	beq.n	57b4 <__aeabi_dadd+0x218>
    57b2:	e0de      	b.n	5972 <__aeabi_dadd+0x3d6>
    57b4:	18ba      	adds	r2, r7, r2
    57b6:	42ba      	cmp	r2, r7
    57b8:	419b      	sbcs	r3, r3
    57ba:	1864      	adds	r4, r4, r1
    57bc:	425b      	negs	r3, r3
    57be:	18e4      	adds	r4, r4, r3
    57c0:	0017      	movs	r7, r2
    57c2:	2601      	movs	r6, #1
    57c4:	0223      	lsls	r3, r4, #8
    57c6:	d5a6      	bpl.n	5716 <__aeabi_dadd+0x17a>
    57c8:	2602      	movs	r6, #2
    57ca:	e7d5      	b.n	5778 <__aeabi_dadd+0x1dc>
    57cc:	2d00      	cmp	r5, #0
    57ce:	d16e      	bne.n	58ae <__aeabi_dadd+0x312>
    57d0:	1c70      	adds	r0, r6, #1
    57d2:	0540      	lsls	r0, r0, #21
    57d4:	0d40      	lsrs	r0, r0, #21
    57d6:	2801      	cmp	r0, #1
    57d8:	dc00      	bgt.n	57dc <__aeabi_dadd+0x240>
    57da:	e0f9      	b.n	59d0 <__aeabi_dadd+0x434>
    57dc:	1ab8      	subs	r0, r7, r2
    57de:	4684      	mov	ip, r0
    57e0:	4287      	cmp	r7, r0
    57e2:	4180      	sbcs	r0, r0
    57e4:	1ae5      	subs	r5, r4, r3
    57e6:	4240      	negs	r0, r0
    57e8:	1a2d      	subs	r5, r5, r0
    57ea:	0228      	lsls	r0, r5, #8
    57ec:	d400      	bmi.n	57f0 <__aeabi_dadd+0x254>
    57ee:	e089      	b.n	5904 <__aeabi_dadd+0x368>
    57f0:	1bd7      	subs	r7, r2, r7
    57f2:	42ba      	cmp	r2, r7
    57f4:	4192      	sbcs	r2, r2
    57f6:	1b1c      	subs	r4, r3, r4
    57f8:	4252      	negs	r2, r2
    57fa:	1aa5      	subs	r5, r4, r2
    57fc:	46d8      	mov	r8, fp
    57fe:	e729      	b.n	5654 <__aeabi_dadd+0xb8>
    5800:	4645      	mov	r5, r8
    5802:	2400      	movs	r4, #0
    5804:	2700      	movs	r7, #0
    5806:	e76a      	b.n	56de <__aeabi_dadd+0x142>
    5808:	4c45      	ldr	r4, [pc, #276]	; (5920 <__aeabi_dadd+0x384>)
    580a:	1af6      	subs	r6, r6, r3
    580c:	402c      	ands	r4, r5
    580e:	e749      	b.n	56a4 <__aeabi_dadd+0x108>
    5810:	003d      	movs	r5, r7
    5812:	3828      	subs	r0, #40	; 0x28
    5814:	4085      	lsls	r5, r0
    5816:	2700      	movs	r7, #0
    5818:	e72e      	b.n	5678 <__aeabi_dadd+0xdc>
    581a:	0038      	movs	r0, r7
    581c:	f001 fc76 	bl	710c <__clzsi2>
    5820:	3020      	adds	r0, #32
    5822:	e71d      	b.n	5660 <__aeabi_dadd+0xc4>
    5824:	430a      	orrs	r2, r1
    5826:	1e51      	subs	r1, r2, #1
    5828:	418a      	sbcs	r2, r1
    582a:	2100      	movs	r1, #0
    582c:	e707      	b.n	563e <__aeabi_dadd+0xa2>
    582e:	2b00      	cmp	r3, #0
    5830:	d000      	beq.n	5834 <__aeabi_dadd+0x298>
    5832:	e0f3      	b.n	5a1c <__aeabi_dadd+0x480>
    5834:	1c70      	adds	r0, r6, #1
    5836:	0543      	lsls	r3, r0, #21
    5838:	0d5b      	lsrs	r3, r3, #21
    583a:	2b01      	cmp	r3, #1
    583c:	dc00      	bgt.n	5840 <__aeabi_dadd+0x2a4>
    583e:	e0ad      	b.n	599c <__aeabi_dadd+0x400>
    5840:	4b36      	ldr	r3, [pc, #216]	; (591c <__aeabi_dadd+0x380>)
    5842:	4298      	cmp	r0, r3
    5844:	d100      	bne.n	5848 <__aeabi_dadd+0x2ac>
    5846:	e0d1      	b.n	59ec <__aeabi_dadd+0x450>
    5848:	18ba      	adds	r2, r7, r2
    584a:	42ba      	cmp	r2, r7
    584c:	41bf      	sbcs	r7, r7
    584e:	1864      	adds	r4, r4, r1
    5850:	427f      	negs	r7, r7
    5852:	19e4      	adds	r4, r4, r7
    5854:	07e7      	lsls	r7, r4, #31
    5856:	0852      	lsrs	r2, r2, #1
    5858:	4317      	orrs	r7, r2
    585a:	0864      	lsrs	r4, r4, #1
    585c:	0006      	movs	r6, r0
    585e:	e721      	b.n	56a4 <__aeabi_dadd+0x108>
    5860:	482e      	ldr	r0, [pc, #184]	; (591c <__aeabi_dadd+0x380>)
    5862:	4285      	cmp	r5, r0
    5864:	d100      	bne.n	5868 <__aeabi_dadd+0x2cc>
    5866:	e093      	b.n	5990 <__aeabi_dadd+0x3f4>
    5868:	001d      	movs	r5, r3
    586a:	e6d0      	b.n	560e <__aeabi_dadd+0x72>
    586c:	0029      	movs	r1, r5
    586e:	3e1f      	subs	r6, #31
    5870:	40f1      	lsrs	r1, r6
    5872:	2b20      	cmp	r3, #32
    5874:	d100      	bne.n	5878 <__aeabi_dadd+0x2dc>
    5876:	e08d      	b.n	5994 <__aeabi_dadd+0x3f8>
    5878:	2240      	movs	r2, #64	; 0x40
    587a:	1ad3      	subs	r3, r2, r3
    587c:	409d      	lsls	r5, r3
    587e:	432f      	orrs	r7, r5
    5880:	1e7d      	subs	r5, r7, #1
    5882:	41af      	sbcs	r7, r5
    5884:	2400      	movs	r4, #0
    5886:	430f      	orrs	r7, r1
    5888:	2600      	movs	r6, #0
    588a:	e744      	b.n	5716 <__aeabi_dadd+0x17a>
    588c:	002b      	movs	r3, r5
    588e:	0008      	movs	r0, r1
    5890:	3b20      	subs	r3, #32
    5892:	40d8      	lsrs	r0, r3
    5894:	0003      	movs	r3, r0
    5896:	2d20      	cmp	r5, #32
    5898:	d100      	bne.n	589c <__aeabi_dadd+0x300>
    589a:	e07d      	b.n	5998 <__aeabi_dadd+0x3fc>
    589c:	2040      	movs	r0, #64	; 0x40
    589e:	1b45      	subs	r5, r0, r5
    58a0:	40a9      	lsls	r1, r5
    58a2:	430a      	orrs	r2, r1
    58a4:	1e51      	subs	r1, r2, #1
    58a6:	418a      	sbcs	r2, r1
    58a8:	2100      	movs	r1, #0
    58aa:	431a      	orrs	r2, r3
    58ac:	e6c7      	b.n	563e <__aeabi_dadd+0xa2>
    58ae:	2e00      	cmp	r6, #0
    58b0:	d050      	beq.n	5954 <__aeabi_dadd+0x3b8>
    58b2:	4e1a      	ldr	r6, [pc, #104]	; (591c <__aeabi_dadd+0x380>)
    58b4:	42b0      	cmp	r0, r6
    58b6:	d057      	beq.n	5968 <__aeabi_dadd+0x3cc>
    58b8:	2680      	movs	r6, #128	; 0x80
    58ba:	426b      	negs	r3, r5
    58bc:	4699      	mov	r9, r3
    58be:	0436      	lsls	r6, r6, #16
    58c0:	4334      	orrs	r4, r6
    58c2:	464b      	mov	r3, r9
    58c4:	2b38      	cmp	r3, #56	; 0x38
    58c6:	dd00      	ble.n	58ca <__aeabi_dadd+0x32e>
    58c8:	e0d6      	b.n	5a78 <__aeabi_dadd+0x4dc>
    58ca:	2b1f      	cmp	r3, #31
    58cc:	dd00      	ble.n	58d0 <__aeabi_dadd+0x334>
    58ce:	e135      	b.n	5b3c <__aeabi_dadd+0x5a0>
    58d0:	2620      	movs	r6, #32
    58d2:	1af5      	subs	r5, r6, r3
    58d4:	0026      	movs	r6, r4
    58d6:	40ae      	lsls	r6, r5
    58d8:	46b2      	mov	sl, r6
    58da:	003e      	movs	r6, r7
    58dc:	40de      	lsrs	r6, r3
    58de:	46ac      	mov	ip, r5
    58e0:	0035      	movs	r5, r6
    58e2:	4656      	mov	r6, sl
    58e4:	432e      	orrs	r6, r5
    58e6:	4665      	mov	r5, ip
    58e8:	40af      	lsls	r7, r5
    58ea:	1e7d      	subs	r5, r7, #1
    58ec:	41af      	sbcs	r7, r5
    58ee:	40dc      	lsrs	r4, r3
    58f0:	4337      	orrs	r7, r6
    58f2:	1bd7      	subs	r7, r2, r7
    58f4:	42ba      	cmp	r2, r7
    58f6:	4192      	sbcs	r2, r2
    58f8:	1b0c      	subs	r4, r1, r4
    58fa:	4252      	negs	r2, r2
    58fc:	1aa4      	subs	r4, r4, r2
    58fe:	0006      	movs	r6, r0
    5900:	46d8      	mov	r8, fp
    5902:	e6a3      	b.n	564c <__aeabi_dadd+0xb0>
    5904:	4664      	mov	r4, ip
    5906:	4667      	mov	r7, ip
    5908:	432c      	orrs	r4, r5
    590a:	d000      	beq.n	590e <__aeabi_dadd+0x372>
    590c:	e6a2      	b.n	5654 <__aeabi_dadd+0xb8>
    590e:	2500      	movs	r5, #0
    5910:	2600      	movs	r6, #0
    5912:	2700      	movs	r7, #0
    5914:	e706      	b.n	5724 <__aeabi_dadd+0x188>
    5916:	001e      	movs	r6, r3
    5918:	e6c4      	b.n	56a4 <__aeabi_dadd+0x108>
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	000007ff 	.word	0x000007ff
    5920:	ff7fffff 	.word	0xff7fffff
    5924:	800fffff 	.word	0x800fffff
    5928:	2b1f      	cmp	r3, #31
    592a:	dc63      	bgt.n	59f4 <__aeabi_dadd+0x458>
    592c:	2020      	movs	r0, #32
    592e:	1ac3      	subs	r3, r0, r3
    5930:	0008      	movs	r0, r1
    5932:	4098      	lsls	r0, r3
    5934:	469c      	mov	ip, r3
    5936:	4683      	mov	fp, r0
    5938:	4653      	mov	r3, sl
    593a:	0010      	movs	r0, r2
    593c:	40d8      	lsrs	r0, r3
    593e:	0003      	movs	r3, r0
    5940:	4658      	mov	r0, fp
    5942:	4318      	orrs	r0, r3
    5944:	4663      	mov	r3, ip
    5946:	409a      	lsls	r2, r3
    5948:	1e53      	subs	r3, r2, #1
    594a:	419a      	sbcs	r2, r3
    594c:	4653      	mov	r3, sl
    594e:	4302      	orrs	r2, r0
    5950:	40d9      	lsrs	r1, r3
    5952:	e703      	b.n	575c <__aeabi_dadd+0x1c0>
    5954:	0026      	movs	r6, r4
    5956:	433e      	orrs	r6, r7
    5958:	d006      	beq.n	5968 <__aeabi_dadd+0x3cc>
    595a:	43eb      	mvns	r3, r5
    595c:	4699      	mov	r9, r3
    595e:	2b00      	cmp	r3, #0
    5960:	d0c7      	beq.n	58f2 <__aeabi_dadd+0x356>
    5962:	4e94      	ldr	r6, [pc, #592]	; (5bb4 <__aeabi_dadd+0x618>)
    5964:	42b0      	cmp	r0, r6
    5966:	d1ac      	bne.n	58c2 <__aeabi_dadd+0x326>
    5968:	000c      	movs	r4, r1
    596a:	0017      	movs	r7, r2
    596c:	0006      	movs	r6, r0
    596e:	46d8      	mov	r8, fp
    5970:	e698      	b.n	56a4 <__aeabi_dadd+0x108>
    5972:	4b90      	ldr	r3, [pc, #576]	; (5bb4 <__aeabi_dadd+0x618>)
    5974:	459a      	cmp	sl, r3
    5976:	d00b      	beq.n	5990 <__aeabi_dadd+0x3f4>
    5978:	4682      	mov	sl, r0
    597a:	e6e7      	b.n	574c <__aeabi_dadd+0x1b0>
    597c:	2800      	cmp	r0, #0
    597e:	d000      	beq.n	5982 <__aeabi_dadd+0x3e6>
    5980:	e09e      	b.n	5ac0 <__aeabi_dadd+0x524>
    5982:	0018      	movs	r0, r3
    5984:	4310      	orrs	r0, r2
    5986:	d100      	bne.n	598a <__aeabi_dadd+0x3ee>
    5988:	e0e9      	b.n	5b5e <__aeabi_dadd+0x5c2>
    598a:	001c      	movs	r4, r3
    598c:	0017      	movs	r7, r2
    598e:	46d8      	mov	r8, fp
    5990:	4e88      	ldr	r6, [pc, #544]	; (5bb4 <__aeabi_dadd+0x618>)
    5992:	e687      	b.n	56a4 <__aeabi_dadd+0x108>
    5994:	2500      	movs	r5, #0
    5996:	e772      	b.n	587e <__aeabi_dadd+0x2e2>
    5998:	2100      	movs	r1, #0
    599a:	e782      	b.n	58a2 <__aeabi_dadd+0x306>
    599c:	0023      	movs	r3, r4
    599e:	433b      	orrs	r3, r7
    59a0:	2e00      	cmp	r6, #0
    59a2:	d000      	beq.n	59a6 <__aeabi_dadd+0x40a>
    59a4:	e0ab      	b.n	5afe <__aeabi_dadd+0x562>
    59a6:	2b00      	cmp	r3, #0
    59a8:	d100      	bne.n	59ac <__aeabi_dadd+0x410>
    59aa:	e0e7      	b.n	5b7c <__aeabi_dadd+0x5e0>
    59ac:	000b      	movs	r3, r1
    59ae:	4313      	orrs	r3, r2
    59b0:	d100      	bne.n	59b4 <__aeabi_dadd+0x418>
    59b2:	e677      	b.n	56a4 <__aeabi_dadd+0x108>
    59b4:	18ba      	adds	r2, r7, r2
    59b6:	42ba      	cmp	r2, r7
    59b8:	41bf      	sbcs	r7, r7
    59ba:	1864      	adds	r4, r4, r1
    59bc:	427f      	negs	r7, r7
    59be:	19e4      	adds	r4, r4, r7
    59c0:	0223      	lsls	r3, r4, #8
    59c2:	d400      	bmi.n	59c6 <__aeabi_dadd+0x42a>
    59c4:	e0f2      	b.n	5bac <__aeabi_dadd+0x610>
    59c6:	4b7c      	ldr	r3, [pc, #496]	; (5bb8 <__aeabi_dadd+0x61c>)
    59c8:	0017      	movs	r7, r2
    59ca:	401c      	ands	r4, r3
    59cc:	0006      	movs	r6, r0
    59ce:	e669      	b.n	56a4 <__aeabi_dadd+0x108>
    59d0:	0020      	movs	r0, r4
    59d2:	4338      	orrs	r0, r7
    59d4:	2e00      	cmp	r6, #0
    59d6:	d1d1      	bne.n	597c <__aeabi_dadd+0x3e0>
    59d8:	2800      	cmp	r0, #0
    59da:	d15b      	bne.n	5a94 <__aeabi_dadd+0x4f8>
    59dc:	001c      	movs	r4, r3
    59de:	4314      	orrs	r4, r2
    59e0:	d100      	bne.n	59e4 <__aeabi_dadd+0x448>
    59e2:	e0a8      	b.n	5b36 <__aeabi_dadd+0x59a>
    59e4:	001c      	movs	r4, r3
    59e6:	0017      	movs	r7, r2
    59e8:	46d8      	mov	r8, fp
    59ea:	e65b      	b.n	56a4 <__aeabi_dadd+0x108>
    59ec:	0006      	movs	r6, r0
    59ee:	2400      	movs	r4, #0
    59f0:	2700      	movs	r7, #0
    59f2:	e697      	b.n	5724 <__aeabi_dadd+0x188>
    59f4:	4650      	mov	r0, sl
    59f6:	000b      	movs	r3, r1
    59f8:	3820      	subs	r0, #32
    59fa:	40c3      	lsrs	r3, r0
    59fc:	4699      	mov	r9, r3
    59fe:	4653      	mov	r3, sl
    5a00:	2b20      	cmp	r3, #32
    5a02:	d100      	bne.n	5a06 <__aeabi_dadd+0x46a>
    5a04:	e095      	b.n	5b32 <__aeabi_dadd+0x596>
    5a06:	2340      	movs	r3, #64	; 0x40
    5a08:	4650      	mov	r0, sl
    5a0a:	1a1b      	subs	r3, r3, r0
    5a0c:	4099      	lsls	r1, r3
    5a0e:	430a      	orrs	r2, r1
    5a10:	1e51      	subs	r1, r2, #1
    5a12:	418a      	sbcs	r2, r1
    5a14:	464b      	mov	r3, r9
    5a16:	2100      	movs	r1, #0
    5a18:	431a      	orrs	r2, r3
    5a1a:	e69f      	b.n	575c <__aeabi_dadd+0x1c0>
    5a1c:	2e00      	cmp	r6, #0
    5a1e:	d130      	bne.n	5a82 <__aeabi_dadd+0x4e6>
    5a20:	0026      	movs	r6, r4
    5a22:	433e      	orrs	r6, r7
    5a24:	d067      	beq.n	5af6 <__aeabi_dadd+0x55a>
    5a26:	43db      	mvns	r3, r3
    5a28:	469a      	mov	sl, r3
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d01c      	beq.n	5a68 <__aeabi_dadd+0x4cc>
    5a2e:	4e61      	ldr	r6, [pc, #388]	; (5bb4 <__aeabi_dadd+0x618>)
    5a30:	42b0      	cmp	r0, r6
    5a32:	d060      	beq.n	5af6 <__aeabi_dadd+0x55a>
    5a34:	4653      	mov	r3, sl
    5a36:	2b38      	cmp	r3, #56	; 0x38
    5a38:	dd00      	ble.n	5a3c <__aeabi_dadd+0x4a0>
    5a3a:	e096      	b.n	5b6a <__aeabi_dadd+0x5ce>
    5a3c:	2b1f      	cmp	r3, #31
    5a3e:	dd00      	ble.n	5a42 <__aeabi_dadd+0x4a6>
    5a40:	e09f      	b.n	5b82 <__aeabi_dadd+0x5e6>
    5a42:	2620      	movs	r6, #32
    5a44:	1af3      	subs	r3, r6, r3
    5a46:	0026      	movs	r6, r4
    5a48:	409e      	lsls	r6, r3
    5a4a:	469c      	mov	ip, r3
    5a4c:	46b3      	mov	fp, r6
    5a4e:	4653      	mov	r3, sl
    5a50:	003e      	movs	r6, r7
    5a52:	40de      	lsrs	r6, r3
    5a54:	0033      	movs	r3, r6
    5a56:	465e      	mov	r6, fp
    5a58:	431e      	orrs	r6, r3
    5a5a:	4663      	mov	r3, ip
    5a5c:	409f      	lsls	r7, r3
    5a5e:	1e7b      	subs	r3, r7, #1
    5a60:	419f      	sbcs	r7, r3
    5a62:	4653      	mov	r3, sl
    5a64:	40dc      	lsrs	r4, r3
    5a66:	4337      	orrs	r7, r6
    5a68:	18bf      	adds	r7, r7, r2
    5a6a:	4297      	cmp	r7, r2
    5a6c:	4192      	sbcs	r2, r2
    5a6e:	1864      	adds	r4, r4, r1
    5a70:	4252      	negs	r2, r2
    5a72:	18a4      	adds	r4, r4, r2
    5a74:	0006      	movs	r6, r0
    5a76:	e678      	b.n	576a <__aeabi_dadd+0x1ce>
    5a78:	4327      	orrs	r7, r4
    5a7a:	1e7c      	subs	r4, r7, #1
    5a7c:	41a7      	sbcs	r7, r4
    5a7e:	2400      	movs	r4, #0
    5a80:	e737      	b.n	58f2 <__aeabi_dadd+0x356>
    5a82:	4e4c      	ldr	r6, [pc, #304]	; (5bb4 <__aeabi_dadd+0x618>)
    5a84:	42b0      	cmp	r0, r6
    5a86:	d036      	beq.n	5af6 <__aeabi_dadd+0x55a>
    5a88:	2680      	movs	r6, #128	; 0x80
    5a8a:	425b      	negs	r3, r3
    5a8c:	0436      	lsls	r6, r6, #16
    5a8e:	469a      	mov	sl, r3
    5a90:	4334      	orrs	r4, r6
    5a92:	e7cf      	b.n	5a34 <__aeabi_dadd+0x498>
    5a94:	0018      	movs	r0, r3
    5a96:	4310      	orrs	r0, r2
    5a98:	d100      	bne.n	5a9c <__aeabi_dadd+0x500>
    5a9a:	e603      	b.n	56a4 <__aeabi_dadd+0x108>
    5a9c:	1ab8      	subs	r0, r7, r2
    5a9e:	4684      	mov	ip, r0
    5aa0:	4567      	cmp	r7, ip
    5aa2:	41ad      	sbcs	r5, r5
    5aa4:	1ae0      	subs	r0, r4, r3
    5aa6:	426d      	negs	r5, r5
    5aa8:	1b40      	subs	r0, r0, r5
    5aaa:	0205      	lsls	r5, r0, #8
    5aac:	d400      	bmi.n	5ab0 <__aeabi_dadd+0x514>
    5aae:	e62c      	b.n	570a <__aeabi_dadd+0x16e>
    5ab0:	1bd7      	subs	r7, r2, r7
    5ab2:	42ba      	cmp	r2, r7
    5ab4:	4192      	sbcs	r2, r2
    5ab6:	1b1c      	subs	r4, r3, r4
    5ab8:	4252      	negs	r2, r2
    5aba:	1aa4      	subs	r4, r4, r2
    5abc:	46d8      	mov	r8, fp
    5abe:	e5f1      	b.n	56a4 <__aeabi_dadd+0x108>
    5ac0:	0018      	movs	r0, r3
    5ac2:	4310      	orrs	r0, r2
    5ac4:	d100      	bne.n	5ac8 <__aeabi_dadd+0x52c>
    5ac6:	e763      	b.n	5990 <__aeabi_dadd+0x3f4>
    5ac8:	08f8      	lsrs	r0, r7, #3
    5aca:	0767      	lsls	r7, r4, #29
    5acc:	4307      	orrs	r7, r0
    5ace:	2080      	movs	r0, #128	; 0x80
    5ad0:	08e4      	lsrs	r4, r4, #3
    5ad2:	0300      	lsls	r0, r0, #12
    5ad4:	4204      	tst	r4, r0
    5ad6:	d008      	beq.n	5aea <__aeabi_dadd+0x54e>
    5ad8:	08dd      	lsrs	r5, r3, #3
    5ada:	4205      	tst	r5, r0
    5adc:	d105      	bne.n	5aea <__aeabi_dadd+0x54e>
    5ade:	08d2      	lsrs	r2, r2, #3
    5ae0:	0759      	lsls	r1, r3, #29
    5ae2:	4311      	orrs	r1, r2
    5ae4:	000f      	movs	r7, r1
    5ae6:	002c      	movs	r4, r5
    5ae8:	46d8      	mov	r8, fp
    5aea:	0f7b      	lsrs	r3, r7, #29
    5aec:	00e4      	lsls	r4, r4, #3
    5aee:	431c      	orrs	r4, r3
    5af0:	00ff      	lsls	r7, r7, #3
    5af2:	4e30      	ldr	r6, [pc, #192]	; (5bb4 <__aeabi_dadd+0x618>)
    5af4:	e5d6      	b.n	56a4 <__aeabi_dadd+0x108>
    5af6:	000c      	movs	r4, r1
    5af8:	0017      	movs	r7, r2
    5afa:	0006      	movs	r6, r0
    5afc:	e5d2      	b.n	56a4 <__aeabi_dadd+0x108>
    5afe:	2b00      	cmp	r3, #0
    5b00:	d038      	beq.n	5b74 <__aeabi_dadd+0x5d8>
    5b02:	000b      	movs	r3, r1
    5b04:	4313      	orrs	r3, r2
    5b06:	d100      	bne.n	5b0a <__aeabi_dadd+0x56e>
    5b08:	e742      	b.n	5990 <__aeabi_dadd+0x3f4>
    5b0a:	08f8      	lsrs	r0, r7, #3
    5b0c:	0767      	lsls	r7, r4, #29
    5b0e:	4307      	orrs	r7, r0
    5b10:	2080      	movs	r0, #128	; 0x80
    5b12:	08e4      	lsrs	r4, r4, #3
    5b14:	0300      	lsls	r0, r0, #12
    5b16:	4204      	tst	r4, r0
    5b18:	d0e7      	beq.n	5aea <__aeabi_dadd+0x54e>
    5b1a:	08cb      	lsrs	r3, r1, #3
    5b1c:	4203      	tst	r3, r0
    5b1e:	d1e4      	bne.n	5aea <__aeabi_dadd+0x54e>
    5b20:	08d2      	lsrs	r2, r2, #3
    5b22:	0749      	lsls	r1, r1, #29
    5b24:	4311      	orrs	r1, r2
    5b26:	000f      	movs	r7, r1
    5b28:	001c      	movs	r4, r3
    5b2a:	e7de      	b.n	5aea <__aeabi_dadd+0x54e>
    5b2c:	2700      	movs	r7, #0
    5b2e:	2400      	movs	r4, #0
    5b30:	e5d5      	b.n	56de <__aeabi_dadd+0x142>
    5b32:	2100      	movs	r1, #0
    5b34:	e76b      	b.n	5a0e <__aeabi_dadd+0x472>
    5b36:	2500      	movs	r5, #0
    5b38:	2700      	movs	r7, #0
    5b3a:	e5f3      	b.n	5724 <__aeabi_dadd+0x188>
    5b3c:	464e      	mov	r6, r9
    5b3e:	0025      	movs	r5, r4
    5b40:	3e20      	subs	r6, #32
    5b42:	40f5      	lsrs	r5, r6
    5b44:	464b      	mov	r3, r9
    5b46:	002e      	movs	r6, r5
    5b48:	2b20      	cmp	r3, #32
    5b4a:	d02d      	beq.n	5ba8 <__aeabi_dadd+0x60c>
    5b4c:	2540      	movs	r5, #64	; 0x40
    5b4e:	1aed      	subs	r5, r5, r3
    5b50:	40ac      	lsls	r4, r5
    5b52:	4327      	orrs	r7, r4
    5b54:	1e7c      	subs	r4, r7, #1
    5b56:	41a7      	sbcs	r7, r4
    5b58:	2400      	movs	r4, #0
    5b5a:	4337      	orrs	r7, r6
    5b5c:	e6c9      	b.n	58f2 <__aeabi_dadd+0x356>
    5b5e:	2480      	movs	r4, #128	; 0x80
    5b60:	2500      	movs	r5, #0
    5b62:	0324      	lsls	r4, r4, #12
    5b64:	4e13      	ldr	r6, [pc, #76]	; (5bb4 <__aeabi_dadd+0x618>)
    5b66:	2700      	movs	r7, #0
    5b68:	e5dc      	b.n	5724 <__aeabi_dadd+0x188>
    5b6a:	4327      	orrs	r7, r4
    5b6c:	1e7c      	subs	r4, r7, #1
    5b6e:	41a7      	sbcs	r7, r4
    5b70:	2400      	movs	r4, #0
    5b72:	e779      	b.n	5a68 <__aeabi_dadd+0x4cc>
    5b74:	000c      	movs	r4, r1
    5b76:	0017      	movs	r7, r2
    5b78:	4e0e      	ldr	r6, [pc, #56]	; (5bb4 <__aeabi_dadd+0x618>)
    5b7a:	e593      	b.n	56a4 <__aeabi_dadd+0x108>
    5b7c:	000c      	movs	r4, r1
    5b7e:	0017      	movs	r7, r2
    5b80:	e590      	b.n	56a4 <__aeabi_dadd+0x108>
    5b82:	4656      	mov	r6, sl
    5b84:	0023      	movs	r3, r4
    5b86:	3e20      	subs	r6, #32
    5b88:	40f3      	lsrs	r3, r6
    5b8a:	4699      	mov	r9, r3
    5b8c:	4653      	mov	r3, sl
    5b8e:	2b20      	cmp	r3, #32
    5b90:	d00e      	beq.n	5bb0 <__aeabi_dadd+0x614>
    5b92:	2340      	movs	r3, #64	; 0x40
    5b94:	4656      	mov	r6, sl
    5b96:	1b9b      	subs	r3, r3, r6
    5b98:	409c      	lsls	r4, r3
    5b9a:	4327      	orrs	r7, r4
    5b9c:	1e7c      	subs	r4, r7, #1
    5b9e:	41a7      	sbcs	r7, r4
    5ba0:	464b      	mov	r3, r9
    5ba2:	2400      	movs	r4, #0
    5ba4:	431f      	orrs	r7, r3
    5ba6:	e75f      	b.n	5a68 <__aeabi_dadd+0x4cc>
    5ba8:	2400      	movs	r4, #0
    5baa:	e7d2      	b.n	5b52 <__aeabi_dadd+0x5b6>
    5bac:	0017      	movs	r7, r2
    5bae:	e5b2      	b.n	5716 <__aeabi_dadd+0x17a>
    5bb0:	2400      	movs	r4, #0
    5bb2:	e7f2      	b.n	5b9a <__aeabi_dadd+0x5fe>
    5bb4:	000007ff 	.word	0x000007ff
    5bb8:	ff7fffff 	.word	0xff7fffff

00005bbc <__aeabi_ddiv>:
    5bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bbe:	4657      	mov	r7, sl
    5bc0:	4645      	mov	r5, r8
    5bc2:	46de      	mov	lr, fp
    5bc4:	464e      	mov	r6, r9
    5bc6:	b5e0      	push	{r5, r6, r7, lr}
    5bc8:	004c      	lsls	r4, r1, #1
    5bca:	030e      	lsls	r6, r1, #12
    5bcc:	b087      	sub	sp, #28
    5bce:	4683      	mov	fp, r0
    5bd0:	4692      	mov	sl, r2
    5bd2:	001d      	movs	r5, r3
    5bd4:	4680      	mov	r8, r0
    5bd6:	0b36      	lsrs	r6, r6, #12
    5bd8:	0d64      	lsrs	r4, r4, #21
    5bda:	0fcf      	lsrs	r7, r1, #31
    5bdc:	2c00      	cmp	r4, #0
    5bde:	d04f      	beq.n	5c80 <__aeabi_ddiv+0xc4>
    5be0:	4b6f      	ldr	r3, [pc, #444]	; (5da0 <__aeabi_ddiv+0x1e4>)
    5be2:	429c      	cmp	r4, r3
    5be4:	d035      	beq.n	5c52 <__aeabi_ddiv+0x96>
    5be6:	2380      	movs	r3, #128	; 0x80
    5be8:	0f42      	lsrs	r2, r0, #29
    5bea:	041b      	lsls	r3, r3, #16
    5bec:	00f6      	lsls	r6, r6, #3
    5bee:	4313      	orrs	r3, r2
    5bf0:	4333      	orrs	r3, r6
    5bf2:	4699      	mov	r9, r3
    5bf4:	00c3      	lsls	r3, r0, #3
    5bf6:	4698      	mov	r8, r3
    5bf8:	4b6a      	ldr	r3, [pc, #424]	; (5da4 <__aeabi_ddiv+0x1e8>)
    5bfa:	2600      	movs	r6, #0
    5bfc:	469c      	mov	ip, r3
    5bfe:	2300      	movs	r3, #0
    5c00:	4464      	add	r4, ip
    5c02:	9303      	str	r3, [sp, #12]
    5c04:	032b      	lsls	r3, r5, #12
    5c06:	0b1b      	lsrs	r3, r3, #12
    5c08:	469b      	mov	fp, r3
    5c0a:	006b      	lsls	r3, r5, #1
    5c0c:	0fed      	lsrs	r5, r5, #31
    5c0e:	4650      	mov	r0, sl
    5c10:	0d5b      	lsrs	r3, r3, #21
    5c12:	9501      	str	r5, [sp, #4]
    5c14:	d05e      	beq.n	5cd4 <__aeabi_ddiv+0x118>
    5c16:	4a62      	ldr	r2, [pc, #392]	; (5da0 <__aeabi_ddiv+0x1e4>)
    5c18:	4293      	cmp	r3, r2
    5c1a:	d053      	beq.n	5cc4 <__aeabi_ddiv+0x108>
    5c1c:	465a      	mov	r2, fp
    5c1e:	00d1      	lsls	r1, r2, #3
    5c20:	2280      	movs	r2, #128	; 0x80
    5c22:	0f40      	lsrs	r0, r0, #29
    5c24:	0412      	lsls	r2, r2, #16
    5c26:	4302      	orrs	r2, r0
    5c28:	430a      	orrs	r2, r1
    5c2a:	4693      	mov	fp, r2
    5c2c:	4652      	mov	r2, sl
    5c2e:	00d1      	lsls	r1, r2, #3
    5c30:	4a5c      	ldr	r2, [pc, #368]	; (5da4 <__aeabi_ddiv+0x1e8>)
    5c32:	4694      	mov	ip, r2
    5c34:	2200      	movs	r2, #0
    5c36:	4463      	add	r3, ip
    5c38:	0038      	movs	r0, r7
    5c3a:	4068      	eors	r0, r5
    5c3c:	4684      	mov	ip, r0
    5c3e:	9002      	str	r0, [sp, #8]
    5c40:	1ae4      	subs	r4, r4, r3
    5c42:	4316      	orrs	r6, r2
    5c44:	2e0f      	cmp	r6, #15
    5c46:	d900      	bls.n	5c4a <__aeabi_ddiv+0x8e>
    5c48:	e0b4      	b.n	5db4 <__aeabi_ddiv+0x1f8>
    5c4a:	4b57      	ldr	r3, [pc, #348]	; (5da8 <__aeabi_ddiv+0x1ec>)
    5c4c:	00b6      	lsls	r6, r6, #2
    5c4e:	599b      	ldr	r3, [r3, r6]
    5c50:	469f      	mov	pc, r3
    5c52:	0003      	movs	r3, r0
    5c54:	4333      	orrs	r3, r6
    5c56:	4699      	mov	r9, r3
    5c58:	d16c      	bne.n	5d34 <__aeabi_ddiv+0x178>
    5c5a:	2300      	movs	r3, #0
    5c5c:	4698      	mov	r8, r3
    5c5e:	3302      	adds	r3, #2
    5c60:	2608      	movs	r6, #8
    5c62:	9303      	str	r3, [sp, #12]
    5c64:	e7ce      	b.n	5c04 <__aeabi_ddiv+0x48>
    5c66:	46cb      	mov	fp, r9
    5c68:	4641      	mov	r1, r8
    5c6a:	9a03      	ldr	r2, [sp, #12]
    5c6c:	9701      	str	r7, [sp, #4]
    5c6e:	2a02      	cmp	r2, #2
    5c70:	d165      	bne.n	5d3e <__aeabi_ddiv+0x182>
    5c72:	9b01      	ldr	r3, [sp, #4]
    5c74:	4c4a      	ldr	r4, [pc, #296]	; (5da0 <__aeabi_ddiv+0x1e4>)
    5c76:	469c      	mov	ip, r3
    5c78:	2300      	movs	r3, #0
    5c7a:	2200      	movs	r2, #0
    5c7c:	4698      	mov	r8, r3
    5c7e:	e06b      	b.n	5d58 <__aeabi_ddiv+0x19c>
    5c80:	0003      	movs	r3, r0
    5c82:	4333      	orrs	r3, r6
    5c84:	4699      	mov	r9, r3
    5c86:	d04e      	beq.n	5d26 <__aeabi_ddiv+0x16a>
    5c88:	2e00      	cmp	r6, #0
    5c8a:	d100      	bne.n	5c8e <__aeabi_ddiv+0xd2>
    5c8c:	e1bc      	b.n	6008 <__aeabi_ddiv+0x44c>
    5c8e:	0030      	movs	r0, r6
    5c90:	f001 fa3c 	bl	710c <__clzsi2>
    5c94:	0003      	movs	r3, r0
    5c96:	3b0b      	subs	r3, #11
    5c98:	2b1c      	cmp	r3, #28
    5c9a:	dd00      	ble.n	5c9e <__aeabi_ddiv+0xe2>
    5c9c:	e1ac      	b.n	5ff8 <__aeabi_ddiv+0x43c>
    5c9e:	221d      	movs	r2, #29
    5ca0:	1ad3      	subs	r3, r2, r3
    5ca2:	465a      	mov	r2, fp
    5ca4:	0001      	movs	r1, r0
    5ca6:	40da      	lsrs	r2, r3
    5ca8:	3908      	subs	r1, #8
    5caa:	408e      	lsls	r6, r1
    5cac:	0013      	movs	r3, r2
    5cae:	4333      	orrs	r3, r6
    5cb0:	4699      	mov	r9, r3
    5cb2:	465b      	mov	r3, fp
    5cb4:	408b      	lsls	r3, r1
    5cb6:	4698      	mov	r8, r3
    5cb8:	2300      	movs	r3, #0
    5cba:	4c3c      	ldr	r4, [pc, #240]	; (5dac <__aeabi_ddiv+0x1f0>)
    5cbc:	2600      	movs	r6, #0
    5cbe:	1a24      	subs	r4, r4, r0
    5cc0:	9303      	str	r3, [sp, #12]
    5cc2:	e79f      	b.n	5c04 <__aeabi_ddiv+0x48>
    5cc4:	4651      	mov	r1, sl
    5cc6:	465a      	mov	r2, fp
    5cc8:	4311      	orrs	r1, r2
    5cca:	d129      	bne.n	5d20 <__aeabi_ddiv+0x164>
    5ccc:	2200      	movs	r2, #0
    5cce:	4693      	mov	fp, r2
    5cd0:	3202      	adds	r2, #2
    5cd2:	e7b1      	b.n	5c38 <__aeabi_ddiv+0x7c>
    5cd4:	4659      	mov	r1, fp
    5cd6:	4301      	orrs	r1, r0
    5cd8:	d01e      	beq.n	5d18 <__aeabi_ddiv+0x15c>
    5cda:	465b      	mov	r3, fp
    5cdc:	2b00      	cmp	r3, #0
    5cde:	d100      	bne.n	5ce2 <__aeabi_ddiv+0x126>
    5ce0:	e19e      	b.n	6020 <__aeabi_ddiv+0x464>
    5ce2:	4658      	mov	r0, fp
    5ce4:	f001 fa12 	bl	710c <__clzsi2>
    5ce8:	0003      	movs	r3, r0
    5cea:	3b0b      	subs	r3, #11
    5cec:	2b1c      	cmp	r3, #28
    5cee:	dd00      	ble.n	5cf2 <__aeabi_ddiv+0x136>
    5cf0:	e18f      	b.n	6012 <__aeabi_ddiv+0x456>
    5cf2:	0002      	movs	r2, r0
    5cf4:	4659      	mov	r1, fp
    5cf6:	3a08      	subs	r2, #8
    5cf8:	4091      	lsls	r1, r2
    5cfa:	468b      	mov	fp, r1
    5cfc:	211d      	movs	r1, #29
    5cfe:	1acb      	subs	r3, r1, r3
    5d00:	4651      	mov	r1, sl
    5d02:	40d9      	lsrs	r1, r3
    5d04:	000b      	movs	r3, r1
    5d06:	4659      	mov	r1, fp
    5d08:	430b      	orrs	r3, r1
    5d0a:	4651      	mov	r1, sl
    5d0c:	469b      	mov	fp, r3
    5d0e:	4091      	lsls	r1, r2
    5d10:	4b26      	ldr	r3, [pc, #152]	; (5dac <__aeabi_ddiv+0x1f0>)
    5d12:	2200      	movs	r2, #0
    5d14:	1a1b      	subs	r3, r3, r0
    5d16:	e78f      	b.n	5c38 <__aeabi_ddiv+0x7c>
    5d18:	2300      	movs	r3, #0
    5d1a:	2201      	movs	r2, #1
    5d1c:	469b      	mov	fp, r3
    5d1e:	e78b      	b.n	5c38 <__aeabi_ddiv+0x7c>
    5d20:	4651      	mov	r1, sl
    5d22:	2203      	movs	r2, #3
    5d24:	e788      	b.n	5c38 <__aeabi_ddiv+0x7c>
    5d26:	2300      	movs	r3, #0
    5d28:	4698      	mov	r8, r3
    5d2a:	3301      	adds	r3, #1
    5d2c:	2604      	movs	r6, #4
    5d2e:	2400      	movs	r4, #0
    5d30:	9303      	str	r3, [sp, #12]
    5d32:	e767      	b.n	5c04 <__aeabi_ddiv+0x48>
    5d34:	2303      	movs	r3, #3
    5d36:	46b1      	mov	r9, r6
    5d38:	9303      	str	r3, [sp, #12]
    5d3a:	260c      	movs	r6, #12
    5d3c:	e762      	b.n	5c04 <__aeabi_ddiv+0x48>
    5d3e:	2a03      	cmp	r2, #3
    5d40:	d100      	bne.n	5d44 <__aeabi_ddiv+0x188>
    5d42:	e25c      	b.n	61fe <__aeabi_ddiv+0x642>
    5d44:	9b01      	ldr	r3, [sp, #4]
    5d46:	2a01      	cmp	r2, #1
    5d48:	d000      	beq.n	5d4c <__aeabi_ddiv+0x190>
    5d4a:	e1e4      	b.n	6116 <__aeabi_ddiv+0x55a>
    5d4c:	4013      	ands	r3, r2
    5d4e:	469c      	mov	ip, r3
    5d50:	2300      	movs	r3, #0
    5d52:	2400      	movs	r4, #0
    5d54:	2200      	movs	r2, #0
    5d56:	4698      	mov	r8, r3
    5d58:	2100      	movs	r1, #0
    5d5a:	0312      	lsls	r2, r2, #12
    5d5c:	0b13      	lsrs	r3, r2, #12
    5d5e:	0d0a      	lsrs	r2, r1, #20
    5d60:	0512      	lsls	r2, r2, #20
    5d62:	431a      	orrs	r2, r3
    5d64:	0523      	lsls	r3, r4, #20
    5d66:	4c12      	ldr	r4, [pc, #72]	; (5db0 <__aeabi_ddiv+0x1f4>)
    5d68:	4640      	mov	r0, r8
    5d6a:	4022      	ands	r2, r4
    5d6c:	4313      	orrs	r3, r2
    5d6e:	4662      	mov	r2, ip
    5d70:	005b      	lsls	r3, r3, #1
    5d72:	07d2      	lsls	r2, r2, #31
    5d74:	085b      	lsrs	r3, r3, #1
    5d76:	4313      	orrs	r3, r2
    5d78:	0019      	movs	r1, r3
    5d7a:	b007      	add	sp, #28
    5d7c:	bc3c      	pop	{r2, r3, r4, r5}
    5d7e:	4690      	mov	r8, r2
    5d80:	4699      	mov	r9, r3
    5d82:	46a2      	mov	sl, r4
    5d84:	46ab      	mov	fp, r5
    5d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d88:	2300      	movs	r3, #0
    5d8a:	2280      	movs	r2, #128	; 0x80
    5d8c:	469c      	mov	ip, r3
    5d8e:	0312      	lsls	r2, r2, #12
    5d90:	4698      	mov	r8, r3
    5d92:	4c03      	ldr	r4, [pc, #12]	; (5da0 <__aeabi_ddiv+0x1e4>)
    5d94:	e7e0      	b.n	5d58 <__aeabi_ddiv+0x19c>
    5d96:	2300      	movs	r3, #0
    5d98:	4c01      	ldr	r4, [pc, #4]	; (5da0 <__aeabi_ddiv+0x1e4>)
    5d9a:	2200      	movs	r2, #0
    5d9c:	4698      	mov	r8, r3
    5d9e:	e7db      	b.n	5d58 <__aeabi_ddiv+0x19c>
    5da0:	000007ff 	.word	0x000007ff
    5da4:	fffffc01 	.word	0xfffffc01
    5da8:	00007814 	.word	0x00007814
    5dac:	fffffc0d 	.word	0xfffffc0d
    5db0:	800fffff 	.word	0x800fffff
    5db4:	45d9      	cmp	r9, fp
    5db6:	d900      	bls.n	5dba <__aeabi_ddiv+0x1fe>
    5db8:	e139      	b.n	602e <__aeabi_ddiv+0x472>
    5dba:	d100      	bne.n	5dbe <__aeabi_ddiv+0x202>
    5dbc:	e134      	b.n	6028 <__aeabi_ddiv+0x46c>
    5dbe:	2300      	movs	r3, #0
    5dc0:	4646      	mov	r6, r8
    5dc2:	464d      	mov	r5, r9
    5dc4:	469a      	mov	sl, r3
    5dc6:	3c01      	subs	r4, #1
    5dc8:	465b      	mov	r3, fp
    5dca:	0e0a      	lsrs	r2, r1, #24
    5dcc:	021b      	lsls	r3, r3, #8
    5dce:	431a      	orrs	r2, r3
    5dd0:	020b      	lsls	r3, r1, #8
    5dd2:	0c17      	lsrs	r7, r2, #16
    5dd4:	9303      	str	r3, [sp, #12]
    5dd6:	0413      	lsls	r3, r2, #16
    5dd8:	0c1b      	lsrs	r3, r3, #16
    5dda:	0039      	movs	r1, r7
    5ddc:	0028      	movs	r0, r5
    5dde:	4690      	mov	r8, r2
    5de0:	9301      	str	r3, [sp, #4]
    5de2:	f7ff f951 	bl	5088 <__udivsi3>
    5de6:	0002      	movs	r2, r0
    5de8:	9b01      	ldr	r3, [sp, #4]
    5dea:	4683      	mov	fp, r0
    5dec:	435a      	muls	r2, r3
    5dee:	0028      	movs	r0, r5
    5df0:	0039      	movs	r1, r7
    5df2:	4691      	mov	r9, r2
    5df4:	f7ff f9ce 	bl	5194 <__aeabi_uidivmod>
    5df8:	0c35      	lsrs	r5, r6, #16
    5dfa:	0409      	lsls	r1, r1, #16
    5dfc:	430d      	orrs	r5, r1
    5dfe:	45a9      	cmp	r9, r5
    5e00:	d90d      	bls.n	5e1e <__aeabi_ddiv+0x262>
    5e02:	465b      	mov	r3, fp
    5e04:	4445      	add	r5, r8
    5e06:	3b01      	subs	r3, #1
    5e08:	45a8      	cmp	r8, r5
    5e0a:	d900      	bls.n	5e0e <__aeabi_ddiv+0x252>
    5e0c:	e13a      	b.n	6084 <__aeabi_ddiv+0x4c8>
    5e0e:	45a9      	cmp	r9, r5
    5e10:	d800      	bhi.n	5e14 <__aeabi_ddiv+0x258>
    5e12:	e137      	b.n	6084 <__aeabi_ddiv+0x4c8>
    5e14:	2302      	movs	r3, #2
    5e16:	425b      	negs	r3, r3
    5e18:	469c      	mov	ip, r3
    5e1a:	4445      	add	r5, r8
    5e1c:	44e3      	add	fp, ip
    5e1e:	464b      	mov	r3, r9
    5e20:	1aeb      	subs	r3, r5, r3
    5e22:	0039      	movs	r1, r7
    5e24:	0018      	movs	r0, r3
    5e26:	9304      	str	r3, [sp, #16]
    5e28:	f7ff f92e 	bl	5088 <__udivsi3>
    5e2c:	9b01      	ldr	r3, [sp, #4]
    5e2e:	0005      	movs	r5, r0
    5e30:	4343      	muls	r3, r0
    5e32:	0039      	movs	r1, r7
    5e34:	9804      	ldr	r0, [sp, #16]
    5e36:	4699      	mov	r9, r3
    5e38:	f7ff f9ac 	bl	5194 <__aeabi_uidivmod>
    5e3c:	0433      	lsls	r3, r6, #16
    5e3e:	0409      	lsls	r1, r1, #16
    5e40:	0c1b      	lsrs	r3, r3, #16
    5e42:	430b      	orrs	r3, r1
    5e44:	4599      	cmp	r9, r3
    5e46:	d909      	bls.n	5e5c <__aeabi_ddiv+0x2a0>
    5e48:	4443      	add	r3, r8
    5e4a:	1e6a      	subs	r2, r5, #1
    5e4c:	4598      	cmp	r8, r3
    5e4e:	d900      	bls.n	5e52 <__aeabi_ddiv+0x296>
    5e50:	e11a      	b.n	6088 <__aeabi_ddiv+0x4cc>
    5e52:	4599      	cmp	r9, r3
    5e54:	d800      	bhi.n	5e58 <__aeabi_ddiv+0x29c>
    5e56:	e117      	b.n	6088 <__aeabi_ddiv+0x4cc>
    5e58:	3d02      	subs	r5, #2
    5e5a:	4443      	add	r3, r8
    5e5c:	464a      	mov	r2, r9
    5e5e:	1a9b      	subs	r3, r3, r2
    5e60:	465a      	mov	r2, fp
    5e62:	0412      	lsls	r2, r2, #16
    5e64:	432a      	orrs	r2, r5
    5e66:	9903      	ldr	r1, [sp, #12]
    5e68:	4693      	mov	fp, r2
    5e6a:	0c10      	lsrs	r0, r2, #16
    5e6c:	0c0a      	lsrs	r2, r1, #16
    5e6e:	4691      	mov	r9, r2
    5e70:	0409      	lsls	r1, r1, #16
    5e72:	465a      	mov	r2, fp
    5e74:	0c09      	lsrs	r1, r1, #16
    5e76:	464e      	mov	r6, r9
    5e78:	000d      	movs	r5, r1
    5e7a:	0412      	lsls	r2, r2, #16
    5e7c:	0c12      	lsrs	r2, r2, #16
    5e7e:	4345      	muls	r5, r0
    5e80:	9105      	str	r1, [sp, #20]
    5e82:	4351      	muls	r1, r2
    5e84:	4372      	muls	r2, r6
    5e86:	4370      	muls	r0, r6
    5e88:	1952      	adds	r2, r2, r5
    5e8a:	0c0e      	lsrs	r6, r1, #16
    5e8c:	18b2      	adds	r2, r6, r2
    5e8e:	4295      	cmp	r5, r2
    5e90:	d903      	bls.n	5e9a <__aeabi_ddiv+0x2de>
    5e92:	2580      	movs	r5, #128	; 0x80
    5e94:	026d      	lsls	r5, r5, #9
    5e96:	46ac      	mov	ip, r5
    5e98:	4460      	add	r0, ip
    5e9a:	0c15      	lsrs	r5, r2, #16
    5e9c:	0409      	lsls	r1, r1, #16
    5e9e:	0412      	lsls	r2, r2, #16
    5ea0:	0c09      	lsrs	r1, r1, #16
    5ea2:	1828      	adds	r0, r5, r0
    5ea4:	1852      	adds	r2, r2, r1
    5ea6:	4283      	cmp	r3, r0
    5ea8:	d200      	bcs.n	5eac <__aeabi_ddiv+0x2f0>
    5eaa:	e0ce      	b.n	604a <__aeabi_ddiv+0x48e>
    5eac:	d100      	bne.n	5eb0 <__aeabi_ddiv+0x2f4>
    5eae:	e0c8      	b.n	6042 <__aeabi_ddiv+0x486>
    5eb0:	1a1d      	subs	r5, r3, r0
    5eb2:	4653      	mov	r3, sl
    5eb4:	1a9e      	subs	r6, r3, r2
    5eb6:	45b2      	cmp	sl, r6
    5eb8:	4192      	sbcs	r2, r2
    5eba:	4252      	negs	r2, r2
    5ebc:	1aab      	subs	r3, r5, r2
    5ebe:	469a      	mov	sl, r3
    5ec0:	4598      	cmp	r8, r3
    5ec2:	d100      	bne.n	5ec6 <__aeabi_ddiv+0x30a>
    5ec4:	e117      	b.n	60f6 <__aeabi_ddiv+0x53a>
    5ec6:	0039      	movs	r1, r7
    5ec8:	0018      	movs	r0, r3
    5eca:	f7ff f8dd 	bl	5088 <__udivsi3>
    5ece:	9b01      	ldr	r3, [sp, #4]
    5ed0:	0005      	movs	r5, r0
    5ed2:	4343      	muls	r3, r0
    5ed4:	0039      	movs	r1, r7
    5ed6:	4650      	mov	r0, sl
    5ed8:	9304      	str	r3, [sp, #16]
    5eda:	f7ff f95b 	bl	5194 <__aeabi_uidivmod>
    5ede:	9804      	ldr	r0, [sp, #16]
    5ee0:	040b      	lsls	r3, r1, #16
    5ee2:	0c31      	lsrs	r1, r6, #16
    5ee4:	4319      	orrs	r1, r3
    5ee6:	4288      	cmp	r0, r1
    5ee8:	d909      	bls.n	5efe <__aeabi_ddiv+0x342>
    5eea:	4441      	add	r1, r8
    5eec:	1e6b      	subs	r3, r5, #1
    5eee:	4588      	cmp	r8, r1
    5ef0:	d900      	bls.n	5ef4 <__aeabi_ddiv+0x338>
    5ef2:	e107      	b.n	6104 <__aeabi_ddiv+0x548>
    5ef4:	4288      	cmp	r0, r1
    5ef6:	d800      	bhi.n	5efa <__aeabi_ddiv+0x33e>
    5ef8:	e104      	b.n	6104 <__aeabi_ddiv+0x548>
    5efa:	3d02      	subs	r5, #2
    5efc:	4441      	add	r1, r8
    5efe:	9b04      	ldr	r3, [sp, #16]
    5f00:	1acb      	subs	r3, r1, r3
    5f02:	0018      	movs	r0, r3
    5f04:	0039      	movs	r1, r7
    5f06:	9304      	str	r3, [sp, #16]
    5f08:	f7ff f8be 	bl	5088 <__udivsi3>
    5f0c:	9b01      	ldr	r3, [sp, #4]
    5f0e:	4682      	mov	sl, r0
    5f10:	4343      	muls	r3, r0
    5f12:	0039      	movs	r1, r7
    5f14:	9804      	ldr	r0, [sp, #16]
    5f16:	9301      	str	r3, [sp, #4]
    5f18:	f7ff f93c 	bl	5194 <__aeabi_uidivmod>
    5f1c:	9801      	ldr	r0, [sp, #4]
    5f1e:	040b      	lsls	r3, r1, #16
    5f20:	0431      	lsls	r1, r6, #16
    5f22:	0c09      	lsrs	r1, r1, #16
    5f24:	4319      	orrs	r1, r3
    5f26:	4288      	cmp	r0, r1
    5f28:	d90d      	bls.n	5f46 <__aeabi_ddiv+0x38a>
    5f2a:	4653      	mov	r3, sl
    5f2c:	4441      	add	r1, r8
    5f2e:	3b01      	subs	r3, #1
    5f30:	4588      	cmp	r8, r1
    5f32:	d900      	bls.n	5f36 <__aeabi_ddiv+0x37a>
    5f34:	e0e8      	b.n	6108 <__aeabi_ddiv+0x54c>
    5f36:	4288      	cmp	r0, r1
    5f38:	d800      	bhi.n	5f3c <__aeabi_ddiv+0x380>
    5f3a:	e0e5      	b.n	6108 <__aeabi_ddiv+0x54c>
    5f3c:	2302      	movs	r3, #2
    5f3e:	425b      	negs	r3, r3
    5f40:	469c      	mov	ip, r3
    5f42:	4441      	add	r1, r8
    5f44:	44e2      	add	sl, ip
    5f46:	9b01      	ldr	r3, [sp, #4]
    5f48:	042d      	lsls	r5, r5, #16
    5f4a:	1ace      	subs	r6, r1, r3
    5f4c:	4651      	mov	r1, sl
    5f4e:	4329      	orrs	r1, r5
    5f50:	9d05      	ldr	r5, [sp, #20]
    5f52:	464f      	mov	r7, r9
    5f54:	002a      	movs	r2, r5
    5f56:	040b      	lsls	r3, r1, #16
    5f58:	0c08      	lsrs	r0, r1, #16
    5f5a:	0c1b      	lsrs	r3, r3, #16
    5f5c:	435a      	muls	r2, r3
    5f5e:	4345      	muls	r5, r0
    5f60:	437b      	muls	r3, r7
    5f62:	4378      	muls	r0, r7
    5f64:	195b      	adds	r3, r3, r5
    5f66:	0c17      	lsrs	r7, r2, #16
    5f68:	18fb      	adds	r3, r7, r3
    5f6a:	429d      	cmp	r5, r3
    5f6c:	d903      	bls.n	5f76 <__aeabi_ddiv+0x3ba>
    5f6e:	2580      	movs	r5, #128	; 0x80
    5f70:	026d      	lsls	r5, r5, #9
    5f72:	46ac      	mov	ip, r5
    5f74:	4460      	add	r0, ip
    5f76:	0c1d      	lsrs	r5, r3, #16
    5f78:	0412      	lsls	r2, r2, #16
    5f7a:	041b      	lsls	r3, r3, #16
    5f7c:	0c12      	lsrs	r2, r2, #16
    5f7e:	1828      	adds	r0, r5, r0
    5f80:	189b      	adds	r3, r3, r2
    5f82:	4286      	cmp	r6, r0
    5f84:	d200      	bcs.n	5f88 <__aeabi_ddiv+0x3cc>
    5f86:	e093      	b.n	60b0 <__aeabi_ddiv+0x4f4>
    5f88:	d100      	bne.n	5f8c <__aeabi_ddiv+0x3d0>
    5f8a:	e08e      	b.n	60aa <__aeabi_ddiv+0x4ee>
    5f8c:	2301      	movs	r3, #1
    5f8e:	4319      	orrs	r1, r3
    5f90:	4ba0      	ldr	r3, [pc, #640]	; (6214 <__aeabi_ddiv+0x658>)
    5f92:	18e3      	adds	r3, r4, r3
    5f94:	2b00      	cmp	r3, #0
    5f96:	dc00      	bgt.n	5f9a <__aeabi_ddiv+0x3de>
    5f98:	e099      	b.n	60ce <__aeabi_ddiv+0x512>
    5f9a:	074a      	lsls	r2, r1, #29
    5f9c:	d000      	beq.n	5fa0 <__aeabi_ddiv+0x3e4>
    5f9e:	e09e      	b.n	60de <__aeabi_ddiv+0x522>
    5fa0:	465a      	mov	r2, fp
    5fa2:	01d2      	lsls	r2, r2, #7
    5fa4:	d506      	bpl.n	5fb4 <__aeabi_ddiv+0x3f8>
    5fa6:	465a      	mov	r2, fp
    5fa8:	4b9b      	ldr	r3, [pc, #620]	; (6218 <__aeabi_ddiv+0x65c>)
    5faa:	401a      	ands	r2, r3
    5fac:	2380      	movs	r3, #128	; 0x80
    5fae:	4693      	mov	fp, r2
    5fb0:	00db      	lsls	r3, r3, #3
    5fb2:	18e3      	adds	r3, r4, r3
    5fb4:	4a99      	ldr	r2, [pc, #612]	; (621c <__aeabi_ddiv+0x660>)
    5fb6:	4293      	cmp	r3, r2
    5fb8:	dd68      	ble.n	608c <__aeabi_ddiv+0x4d0>
    5fba:	2301      	movs	r3, #1
    5fbc:	9a02      	ldr	r2, [sp, #8]
    5fbe:	4c98      	ldr	r4, [pc, #608]	; (6220 <__aeabi_ddiv+0x664>)
    5fc0:	401a      	ands	r2, r3
    5fc2:	2300      	movs	r3, #0
    5fc4:	4694      	mov	ip, r2
    5fc6:	4698      	mov	r8, r3
    5fc8:	2200      	movs	r2, #0
    5fca:	e6c5      	b.n	5d58 <__aeabi_ddiv+0x19c>
    5fcc:	2280      	movs	r2, #128	; 0x80
    5fce:	464b      	mov	r3, r9
    5fd0:	0312      	lsls	r2, r2, #12
    5fd2:	4213      	tst	r3, r2
    5fd4:	d00a      	beq.n	5fec <__aeabi_ddiv+0x430>
    5fd6:	465b      	mov	r3, fp
    5fd8:	4213      	tst	r3, r2
    5fda:	d106      	bne.n	5fea <__aeabi_ddiv+0x42e>
    5fdc:	431a      	orrs	r2, r3
    5fde:	0312      	lsls	r2, r2, #12
    5fe0:	0b12      	lsrs	r2, r2, #12
    5fe2:	46ac      	mov	ip, r5
    5fe4:	4688      	mov	r8, r1
    5fe6:	4c8e      	ldr	r4, [pc, #568]	; (6220 <__aeabi_ddiv+0x664>)
    5fe8:	e6b6      	b.n	5d58 <__aeabi_ddiv+0x19c>
    5fea:	464b      	mov	r3, r9
    5fec:	431a      	orrs	r2, r3
    5fee:	0312      	lsls	r2, r2, #12
    5ff0:	0b12      	lsrs	r2, r2, #12
    5ff2:	46bc      	mov	ip, r7
    5ff4:	4c8a      	ldr	r4, [pc, #552]	; (6220 <__aeabi_ddiv+0x664>)
    5ff6:	e6af      	b.n	5d58 <__aeabi_ddiv+0x19c>
    5ff8:	0003      	movs	r3, r0
    5ffa:	465a      	mov	r2, fp
    5ffc:	3b28      	subs	r3, #40	; 0x28
    5ffe:	409a      	lsls	r2, r3
    6000:	2300      	movs	r3, #0
    6002:	4691      	mov	r9, r2
    6004:	4698      	mov	r8, r3
    6006:	e657      	b.n	5cb8 <__aeabi_ddiv+0xfc>
    6008:	4658      	mov	r0, fp
    600a:	f001 f87f 	bl	710c <__clzsi2>
    600e:	3020      	adds	r0, #32
    6010:	e640      	b.n	5c94 <__aeabi_ddiv+0xd8>
    6012:	0003      	movs	r3, r0
    6014:	4652      	mov	r2, sl
    6016:	3b28      	subs	r3, #40	; 0x28
    6018:	409a      	lsls	r2, r3
    601a:	2100      	movs	r1, #0
    601c:	4693      	mov	fp, r2
    601e:	e677      	b.n	5d10 <__aeabi_ddiv+0x154>
    6020:	f001 f874 	bl	710c <__clzsi2>
    6024:	3020      	adds	r0, #32
    6026:	e65f      	b.n	5ce8 <__aeabi_ddiv+0x12c>
    6028:	4588      	cmp	r8, r1
    602a:	d200      	bcs.n	602e <__aeabi_ddiv+0x472>
    602c:	e6c7      	b.n	5dbe <__aeabi_ddiv+0x202>
    602e:	464b      	mov	r3, r9
    6030:	07de      	lsls	r6, r3, #31
    6032:	085d      	lsrs	r5, r3, #1
    6034:	4643      	mov	r3, r8
    6036:	085b      	lsrs	r3, r3, #1
    6038:	431e      	orrs	r6, r3
    603a:	4643      	mov	r3, r8
    603c:	07db      	lsls	r3, r3, #31
    603e:	469a      	mov	sl, r3
    6040:	e6c2      	b.n	5dc8 <__aeabi_ddiv+0x20c>
    6042:	2500      	movs	r5, #0
    6044:	4592      	cmp	sl, r2
    6046:	d300      	bcc.n	604a <__aeabi_ddiv+0x48e>
    6048:	e733      	b.n	5eb2 <__aeabi_ddiv+0x2f6>
    604a:	9e03      	ldr	r6, [sp, #12]
    604c:	4659      	mov	r1, fp
    604e:	46b4      	mov	ip, r6
    6050:	44e2      	add	sl, ip
    6052:	45b2      	cmp	sl, r6
    6054:	41ad      	sbcs	r5, r5
    6056:	426d      	negs	r5, r5
    6058:	4445      	add	r5, r8
    605a:	18eb      	adds	r3, r5, r3
    605c:	3901      	subs	r1, #1
    605e:	4598      	cmp	r8, r3
    6060:	d207      	bcs.n	6072 <__aeabi_ddiv+0x4b6>
    6062:	4298      	cmp	r0, r3
    6064:	d900      	bls.n	6068 <__aeabi_ddiv+0x4ac>
    6066:	e07f      	b.n	6168 <__aeabi_ddiv+0x5ac>
    6068:	d100      	bne.n	606c <__aeabi_ddiv+0x4b0>
    606a:	e0bc      	b.n	61e6 <__aeabi_ddiv+0x62a>
    606c:	1a1d      	subs	r5, r3, r0
    606e:	468b      	mov	fp, r1
    6070:	e71f      	b.n	5eb2 <__aeabi_ddiv+0x2f6>
    6072:	4598      	cmp	r8, r3
    6074:	d1fa      	bne.n	606c <__aeabi_ddiv+0x4b0>
    6076:	9d03      	ldr	r5, [sp, #12]
    6078:	4555      	cmp	r5, sl
    607a:	d9f2      	bls.n	6062 <__aeabi_ddiv+0x4a6>
    607c:	4643      	mov	r3, r8
    607e:	468b      	mov	fp, r1
    6080:	1a1d      	subs	r5, r3, r0
    6082:	e716      	b.n	5eb2 <__aeabi_ddiv+0x2f6>
    6084:	469b      	mov	fp, r3
    6086:	e6ca      	b.n	5e1e <__aeabi_ddiv+0x262>
    6088:	0015      	movs	r5, r2
    608a:	e6e7      	b.n	5e5c <__aeabi_ddiv+0x2a0>
    608c:	465a      	mov	r2, fp
    608e:	08c9      	lsrs	r1, r1, #3
    6090:	0752      	lsls	r2, r2, #29
    6092:	430a      	orrs	r2, r1
    6094:	055b      	lsls	r3, r3, #21
    6096:	4690      	mov	r8, r2
    6098:	0d5c      	lsrs	r4, r3, #21
    609a:	465a      	mov	r2, fp
    609c:	2301      	movs	r3, #1
    609e:	9902      	ldr	r1, [sp, #8]
    60a0:	0252      	lsls	r2, r2, #9
    60a2:	4019      	ands	r1, r3
    60a4:	0b12      	lsrs	r2, r2, #12
    60a6:	468c      	mov	ip, r1
    60a8:	e656      	b.n	5d58 <__aeabi_ddiv+0x19c>
    60aa:	2b00      	cmp	r3, #0
    60ac:	d100      	bne.n	60b0 <__aeabi_ddiv+0x4f4>
    60ae:	e76f      	b.n	5f90 <__aeabi_ddiv+0x3d4>
    60b0:	4446      	add	r6, r8
    60b2:	1e4a      	subs	r2, r1, #1
    60b4:	45b0      	cmp	r8, r6
    60b6:	d929      	bls.n	610c <__aeabi_ddiv+0x550>
    60b8:	0011      	movs	r1, r2
    60ba:	4286      	cmp	r6, r0
    60bc:	d000      	beq.n	60c0 <__aeabi_ddiv+0x504>
    60be:	e765      	b.n	5f8c <__aeabi_ddiv+0x3d0>
    60c0:	9a03      	ldr	r2, [sp, #12]
    60c2:	4293      	cmp	r3, r2
    60c4:	d000      	beq.n	60c8 <__aeabi_ddiv+0x50c>
    60c6:	e761      	b.n	5f8c <__aeabi_ddiv+0x3d0>
    60c8:	e762      	b.n	5f90 <__aeabi_ddiv+0x3d4>
    60ca:	2101      	movs	r1, #1
    60cc:	4249      	negs	r1, r1
    60ce:	2001      	movs	r0, #1
    60d0:	1ac2      	subs	r2, r0, r3
    60d2:	2a38      	cmp	r2, #56	; 0x38
    60d4:	dd21      	ble.n	611a <__aeabi_ddiv+0x55e>
    60d6:	9b02      	ldr	r3, [sp, #8]
    60d8:	4003      	ands	r3, r0
    60da:	469c      	mov	ip, r3
    60dc:	e638      	b.n	5d50 <__aeabi_ddiv+0x194>
    60de:	220f      	movs	r2, #15
    60e0:	400a      	ands	r2, r1
    60e2:	2a04      	cmp	r2, #4
    60e4:	d100      	bne.n	60e8 <__aeabi_ddiv+0x52c>
    60e6:	e75b      	b.n	5fa0 <__aeabi_ddiv+0x3e4>
    60e8:	000a      	movs	r2, r1
    60ea:	1d11      	adds	r1, r2, #4
    60ec:	4291      	cmp	r1, r2
    60ee:	4192      	sbcs	r2, r2
    60f0:	4252      	negs	r2, r2
    60f2:	4493      	add	fp, r2
    60f4:	e754      	b.n	5fa0 <__aeabi_ddiv+0x3e4>
    60f6:	4b47      	ldr	r3, [pc, #284]	; (6214 <__aeabi_ddiv+0x658>)
    60f8:	18e3      	adds	r3, r4, r3
    60fa:	2b00      	cmp	r3, #0
    60fc:	dde5      	ble.n	60ca <__aeabi_ddiv+0x50e>
    60fe:	2201      	movs	r2, #1
    6100:	4252      	negs	r2, r2
    6102:	e7f2      	b.n	60ea <__aeabi_ddiv+0x52e>
    6104:	001d      	movs	r5, r3
    6106:	e6fa      	b.n	5efe <__aeabi_ddiv+0x342>
    6108:	469a      	mov	sl, r3
    610a:	e71c      	b.n	5f46 <__aeabi_ddiv+0x38a>
    610c:	42b0      	cmp	r0, r6
    610e:	d839      	bhi.n	6184 <__aeabi_ddiv+0x5c8>
    6110:	d06e      	beq.n	61f0 <__aeabi_ddiv+0x634>
    6112:	0011      	movs	r1, r2
    6114:	e73a      	b.n	5f8c <__aeabi_ddiv+0x3d0>
    6116:	9302      	str	r3, [sp, #8]
    6118:	e73a      	b.n	5f90 <__aeabi_ddiv+0x3d4>
    611a:	2a1f      	cmp	r2, #31
    611c:	dc3c      	bgt.n	6198 <__aeabi_ddiv+0x5dc>
    611e:	2320      	movs	r3, #32
    6120:	1a9b      	subs	r3, r3, r2
    6122:	000c      	movs	r4, r1
    6124:	4658      	mov	r0, fp
    6126:	4099      	lsls	r1, r3
    6128:	4098      	lsls	r0, r3
    612a:	1e4b      	subs	r3, r1, #1
    612c:	4199      	sbcs	r1, r3
    612e:	465b      	mov	r3, fp
    6130:	40d4      	lsrs	r4, r2
    6132:	40d3      	lsrs	r3, r2
    6134:	4320      	orrs	r0, r4
    6136:	4308      	orrs	r0, r1
    6138:	001a      	movs	r2, r3
    613a:	0743      	lsls	r3, r0, #29
    613c:	d009      	beq.n	6152 <__aeabi_ddiv+0x596>
    613e:	230f      	movs	r3, #15
    6140:	4003      	ands	r3, r0
    6142:	2b04      	cmp	r3, #4
    6144:	d005      	beq.n	6152 <__aeabi_ddiv+0x596>
    6146:	0001      	movs	r1, r0
    6148:	1d08      	adds	r0, r1, #4
    614a:	4288      	cmp	r0, r1
    614c:	419b      	sbcs	r3, r3
    614e:	425b      	negs	r3, r3
    6150:	18d2      	adds	r2, r2, r3
    6152:	0213      	lsls	r3, r2, #8
    6154:	d53a      	bpl.n	61cc <__aeabi_ddiv+0x610>
    6156:	2301      	movs	r3, #1
    6158:	9a02      	ldr	r2, [sp, #8]
    615a:	2401      	movs	r4, #1
    615c:	401a      	ands	r2, r3
    615e:	2300      	movs	r3, #0
    6160:	4694      	mov	ip, r2
    6162:	4698      	mov	r8, r3
    6164:	2200      	movs	r2, #0
    6166:	e5f7      	b.n	5d58 <__aeabi_ddiv+0x19c>
    6168:	2102      	movs	r1, #2
    616a:	4249      	negs	r1, r1
    616c:	468c      	mov	ip, r1
    616e:	9d03      	ldr	r5, [sp, #12]
    6170:	44e3      	add	fp, ip
    6172:	46ac      	mov	ip, r5
    6174:	44e2      	add	sl, ip
    6176:	45aa      	cmp	sl, r5
    6178:	41ad      	sbcs	r5, r5
    617a:	426d      	negs	r5, r5
    617c:	4445      	add	r5, r8
    617e:	18ed      	adds	r5, r5, r3
    6180:	1a2d      	subs	r5, r5, r0
    6182:	e696      	b.n	5eb2 <__aeabi_ddiv+0x2f6>
    6184:	1e8a      	subs	r2, r1, #2
    6186:	9903      	ldr	r1, [sp, #12]
    6188:	004d      	lsls	r5, r1, #1
    618a:	428d      	cmp	r5, r1
    618c:	4189      	sbcs	r1, r1
    618e:	4249      	negs	r1, r1
    6190:	4441      	add	r1, r8
    6192:	1876      	adds	r6, r6, r1
    6194:	9503      	str	r5, [sp, #12]
    6196:	e78f      	b.n	60b8 <__aeabi_ddiv+0x4fc>
    6198:	201f      	movs	r0, #31
    619a:	4240      	negs	r0, r0
    619c:	1ac3      	subs	r3, r0, r3
    619e:	4658      	mov	r0, fp
    61a0:	40d8      	lsrs	r0, r3
    61a2:	0003      	movs	r3, r0
    61a4:	2a20      	cmp	r2, #32
    61a6:	d028      	beq.n	61fa <__aeabi_ddiv+0x63e>
    61a8:	2040      	movs	r0, #64	; 0x40
    61aa:	465d      	mov	r5, fp
    61ac:	1a82      	subs	r2, r0, r2
    61ae:	4095      	lsls	r5, r2
    61b0:	4329      	orrs	r1, r5
    61b2:	1e4a      	subs	r2, r1, #1
    61b4:	4191      	sbcs	r1, r2
    61b6:	4319      	orrs	r1, r3
    61b8:	2307      	movs	r3, #7
    61ba:	2200      	movs	r2, #0
    61bc:	400b      	ands	r3, r1
    61be:	d009      	beq.n	61d4 <__aeabi_ddiv+0x618>
    61c0:	230f      	movs	r3, #15
    61c2:	2200      	movs	r2, #0
    61c4:	400b      	ands	r3, r1
    61c6:	0008      	movs	r0, r1
    61c8:	2b04      	cmp	r3, #4
    61ca:	d1bd      	bne.n	6148 <__aeabi_ddiv+0x58c>
    61cc:	0001      	movs	r1, r0
    61ce:	0753      	lsls	r3, r2, #29
    61d0:	0252      	lsls	r2, r2, #9
    61d2:	0b12      	lsrs	r2, r2, #12
    61d4:	08c9      	lsrs	r1, r1, #3
    61d6:	4319      	orrs	r1, r3
    61d8:	2301      	movs	r3, #1
    61da:	4688      	mov	r8, r1
    61dc:	9902      	ldr	r1, [sp, #8]
    61de:	2400      	movs	r4, #0
    61e0:	4019      	ands	r1, r3
    61e2:	468c      	mov	ip, r1
    61e4:	e5b8      	b.n	5d58 <__aeabi_ddiv+0x19c>
    61e6:	4552      	cmp	r2, sl
    61e8:	d8be      	bhi.n	6168 <__aeabi_ddiv+0x5ac>
    61ea:	468b      	mov	fp, r1
    61ec:	2500      	movs	r5, #0
    61ee:	e660      	b.n	5eb2 <__aeabi_ddiv+0x2f6>
    61f0:	9d03      	ldr	r5, [sp, #12]
    61f2:	429d      	cmp	r5, r3
    61f4:	d3c6      	bcc.n	6184 <__aeabi_ddiv+0x5c8>
    61f6:	0011      	movs	r1, r2
    61f8:	e762      	b.n	60c0 <__aeabi_ddiv+0x504>
    61fa:	2500      	movs	r5, #0
    61fc:	e7d8      	b.n	61b0 <__aeabi_ddiv+0x5f4>
    61fe:	2280      	movs	r2, #128	; 0x80
    6200:	465b      	mov	r3, fp
    6202:	0312      	lsls	r2, r2, #12
    6204:	431a      	orrs	r2, r3
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	0312      	lsls	r2, r2, #12
    620a:	0b12      	lsrs	r2, r2, #12
    620c:	469c      	mov	ip, r3
    620e:	4688      	mov	r8, r1
    6210:	4c03      	ldr	r4, [pc, #12]	; (6220 <__aeabi_ddiv+0x664>)
    6212:	e5a1      	b.n	5d58 <__aeabi_ddiv+0x19c>
    6214:	000003ff 	.word	0x000003ff
    6218:	feffffff 	.word	0xfeffffff
    621c:	000007fe 	.word	0x000007fe
    6220:	000007ff 	.word	0x000007ff

00006224 <__eqdf2>:
    6224:	b5f0      	push	{r4, r5, r6, r7, lr}
    6226:	464f      	mov	r7, r9
    6228:	4646      	mov	r6, r8
    622a:	46d6      	mov	lr, sl
    622c:	005c      	lsls	r4, r3, #1
    622e:	b5c0      	push	{r6, r7, lr}
    6230:	031f      	lsls	r7, r3, #12
    6232:	0fdb      	lsrs	r3, r3, #31
    6234:	469a      	mov	sl, r3
    6236:	4b17      	ldr	r3, [pc, #92]	; (6294 <__eqdf2+0x70>)
    6238:	030e      	lsls	r6, r1, #12
    623a:	004d      	lsls	r5, r1, #1
    623c:	4684      	mov	ip, r0
    623e:	4680      	mov	r8, r0
    6240:	0b36      	lsrs	r6, r6, #12
    6242:	0d6d      	lsrs	r5, r5, #21
    6244:	0fc9      	lsrs	r1, r1, #31
    6246:	4691      	mov	r9, r2
    6248:	0b3f      	lsrs	r7, r7, #12
    624a:	0d64      	lsrs	r4, r4, #21
    624c:	2001      	movs	r0, #1
    624e:	429d      	cmp	r5, r3
    6250:	d008      	beq.n	6264 <__eqdf2+0x40>
    6252:	429c      	cmp	r4, r3
    6254:	d001      	beq.n	625a <__eqdf2+0x36>
    6256:	42a5      	cmp	r5, r4
    6258:	d00b      	beq.n	6272 <__eqdf2+0x4e>
    625a:	bc1c      	pop	{r2, r3, r4}
    625c:	4690      	mov	r8, r2
    625e:	4699      	mov	r9, r3
    6260:	46a2      	mov	sl, r4
    6262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6264:	4663      	mov	r3, ip
    6266:	4333      	orrs	r3, r6
    6268:	d1f7      	bne.n	625a <__eqdf2+0x36>
    626a:	42ac      	cmp	r4, r5
    626c:	d1f5      	bne.n	625a <__eqdf2+0x36>
    626e:	433a      	orrs	r2, r7
    6270:	d1f3      	bne.n	625a <__eqdf2+0x36>
    6272:	2001      	movs	r0, #1
    6274:	42be      	cmp	r6, r7
    6276:	d1f0      	bne.n	625a <__eqdf2+0x36>
    6278:	45c8      	cmp	r8, r9
    627a:	d1ee      	bne.n	625a <__eqdf2+0x36>
    627c:	4551      	cmp	r1, sl
    627e:	d007      	beq.n	6290 <__eqdf2+0x6c>
    6280:	2d00      	cmp	r5, #0
    6282:	d1ea      	bne.n	625a <__eqdf2+0x36>
    6284:	4663      	mov	r3, ip
    6286:	431e      	orrs	r6, r3
    6288:	0030      	movs	r0, r6
    628a:	1e46      	subs	r6, r0, #1
    628c:	41b0      	sbcs	r0, r6
    628e:	e7e4      	b.n	625a <__eqdf2+0x36>
    6290:	2000      	movs	r0, #0
    6292:	e7e2      	b.n	625a <__eqdf2+0x36>
    6294:	000007ff 	.word	0x000007ff

00006298 <__gedf2>:
    6298:	b5f0      	push	{r4, r5, r6, r7, lr}
    629a:	4645      	mov	r5, r8
    629c:	46de      	mov	lr, fp
    629e:	4657      	mov	r7, sl
    62a0:	464e      	mov	r6, r9
    62a2:	b5e0      	push	{r5, r6, r7, lr}
    62a4:	031f      	lsls	r7, r3, #12
    62a6:	0b3d      	lsrs	r5, r7, #12
    62a8:	4f2c      	ldr	r7, [pc, #176]	; (635c <__gedf2+0xc4>)
    62aa:	030e      	lsls	r6, r1, #12
    62ac:	004c      	lsls	r4, r1, #1
    62ae:	46ab      	mov	fp, r5
    62b0:	005d      	lsls	r5, r3, #1
    62b2:	4684      	mov	ip, r0
    62b4:	0b36      	lsrs	r6, r6, #12
    62b6:	0d64      	lsrs	r4, r4, #21
    62b8:	0fc9      	lsrs	r1, r1, #31
    62ba:	4690      	mov	r8, r2
    62bc:	0d6d      	lsrs	r5, r5, #21
    62be:	0fdb      	lsrs	r3, r3, #31
    62c0:	42bc      	cmp	r4, r7
    62c2:	d02a      	beq.n	631a <__gedf2+0x82>
    62c4:	4f25      	ldr	r7, [pc, #148]	; (635c <__gedf2+0xc4>)
    62c6:	42bd      	cmp	r5, r7
    62c8:	d02d      	beq.n	6326 <__gedf2+0x8e>
    62ca:	2c00      	cmp	r4, #0
    62cc:	d10f      	bne.n	62ee <__gedf2+0x56>
    62ce:	4330      	orrs	r0, r6
    62d0:	0007      	movs	r7, r0
    62d2:	4681      	mov	r9, r0
    62d4:	4278      	negs	r0, r7
    62d6:	4178      	adcs	r0, r7
    62d8:	b2c0      	uxtb	r0, r0
    62da:	2d00      	cmp	r5, #0
    62dc:	d117      	bne.n	630e <__gedf2+0x76>
    62de:	465f      	mov	r7, fp
    62e0:	433a      	orrs	r2, r7
    62e2:	d114      	bne.n	630e <__gedf2+0x76>
    62e4:	464b      	mov	r3, r9
    62e6:	2000      	movs	r0, #0
    62e8:	2b00      	cmp	r3, #0
    62ea:	d00a      	beq.n	6302 <__gedf2+0x6a>
    62ec:	e006      	b.n	62fc <__gedf2+0x64>
    62ee:	2d00      	cmp	r5, #0
    62f0:	d102      	bne.n	62f8 <__gedf2+0x60>
    62f2:	4658      	mov	r0, fp
    62f4:	4302      	orrs	r2, r0
    62f6:	d001      	beq.n	62fc <__gedf2+0x64>
    62f8:	4299      	cmp	r1, r3
    62fa:	d018      	beq.n	632e <__gedf2+0x96>
    62fc:	4248      	negs	r0, r1
    62fe:	2101      	movs	r1, #1
    6300:	4308      	orrs	r0, r1
    6302:	bc3c      	pop	{r2, r3, r4, r5}
    6304:	4690      	mov	r8, r2
    6306:	4699      	mov	r9, r3
    6308:	46a2      	mov	sl, r4
    630a:	46ab      	mov	fp, r5
    630c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    630e:	2800      	cmp	r0, #0
    6310:	d0f2      	beq.n	62f8 <__gedf2+0x60>
    6312:	2001      	movs	r0, #1
    6314:	3b01      	subs	r3, #1
    6316:	4318      	orrs	r0, r3
    6318:	e7f3      	b.n	6302 <__gedf2+0x6a>
    631a:	0037      	movs	r7, r6
    631c:	4307      	orrs	r7, r0
    631e:	d0d1      	beq.n	62c4 <__gedf2+0x2c>
    6320:	2002      	movs	r0, #2
    6322:	4240      	negs	r0, r0
    6324:	e7ed      	b.n	6302 <__gedf2+0x6a>
    6326:	465f      	mov	r7, fp
    6328:	4317      	orrs	r7, r2
    632a:	d0ce      	beq.n	62ca <__gedf2+0x32>
    632c:	e7f8      	b.n	6320 <__gedf2+0x88>
    632e:	42ac      	cmp	r4, r5
    6330:	dce4      	bgt.n	62fc <__gedf2+0x64>
    6332:	da03      	bge.n	633c <__gedf2+0xa4>
    6334:	1e48      	subs	r0, r1, #1
    6336:	2101      	movs	r1, #1
    6338:	4308      	orrs	r0, r1
    633a:	e7e2      	b.n	6302 <__gedf2+0x6a>
    633c:	455e      	cmp	r6, fp
    633e:	d8dd      	bhi.n	62fc <__gedf2+0x64>
    6340:	d006      	beq.n	6350 <__gedf2+0xb8>
    6342:	2000      	movs	r0, #0
    6344:	455e      	cmp	r6, fp
    6346:	d2dc      	bcs.n	6302 <__gedf2+0x6a>
    6348:	2301      	movs	r3, #1
    634a:	1e48      	subs	r0, r1, #1
    634c:	4318      	orrs	r0, r3
    634e:	e7d8      	b.n	6302 <__gedf2+0x6a>
    6350:	45c4      	cmp	ip, r8
    6352:	d8d3      	bhi.n	62fc <__gedf2+0x64>
    6354:	2000      	movs	r0, #0
    6356:	45c4      	cmp	ip, r8
    6358:	d3f6      	bcc.n	6348 <__gedf2+0xb0>
    635a:	e7d2      	b.n	6302 <__gedf2+0x6a>
    635c:	000007ff 	.word	0x000007ff

00006360 <__ledf2>:
    6360:	b5f0      	push	{r4, r5, r6, r7, lr}
    6362:	464e      	mov	r6, r9
    6364:	4645      	mov	r5, r8
    6366:	46de      	mov	lr, fp
    6368:	4657      	mov	r7, sl
    636a:	005c      	lsls	r4, r3, #1
    636c:	b5e0      	push	{r5, r6, r7, lr}
    636e:	031f      	lsls	r7, r3, #12
    6370:	0fdb      	lsrs	r3, r3, #31
    6372:	4699      	mov	r9, r3
    6374:	4b2a      	ldr	r3, [pc, #168]	; (6420 <__ledf2+0xc0>)
    6376:	030e      	lsls	r6, r1, #12
    6378:	004d      	lsls	r5, r1, #1
    637a:	0fc9      	lsrs	r1, r1, #31
    637c:	4684      	mov	ip, r0
    637e:	0b36      	lsrs	r6, r6, #12
    6380:	0d6d      	lsrs	r5, r5, #21
    6382:	468b      	mov	fp, r1
    6384:	4690      	mov	r8, r2
    6386:	0b3f      	lsrs	r7, r7, #12
    6388:	0d64      	lsrs	r4, r4, #21
    638a:	429d      	cmp	r5, r3
    638c:	d020      	beq.n	63d0 <__ledf2+0x70>
    638e:	4b24      	ldr	r3, [pc, #144]	; (6420 <__ledf2+0xc0>)
    6390:	429c      	cmp	r4, r3
    6392:	d022      	beq.n	63da <__ledf2+0x7a>
    6394:	2d00      	cmp	r5, #0
    6396:	d112      	bne.n	63be <__ledf2+0x5e>
    6398:	4330      	orrs	r0, r6
    639a:	4243      	negs	r3, r0
    639c:	4143      	adcs	r3, r0
    639e:	b2db      	uxtb	r3, r3
    63a0:	2c00      	cmp	r4, #0
    63a2:	d01f      	beq.n	63e4 <__ledf2+0x84>
    63a4:	2b00      	cmp	r3, #0
    63a6:	d00c      	beq.n	63c2 <__ledf2+0x62>
    63a8:	464b      	mov	r3, r9
    63aa:	2001      	movs	r0, #1
    63ac:	3b01      	subs	r3, #1
    63ae:	4303      	orrs	r3, r0
    63b0:	0018      	movs	r0, r3
    63b2:	bc3c      	pop	{r2, r3, r4, r5}
    63b4:	4690      	mov	r8, r2
    63b6:	4699      	mov	r9, r3
    63b8:	46a2      	mov	sl, r4
    63ba:	46ab      	mov	fp, r5
    63bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63be:	2c00      	cmp	r4, #0
    63c0:	d016      	beq.n	63f0 <__ledf2+0x90>
    63c2:	45cb      	cmp	fp, r9
    63c4:	d017      	beq.n	63f6 <__ledf2+0x96>
    63c6:	465b      	mov	r3, fp
    63c8:	4259      	negs	r1, r3
    63ca:	2301      	movs	r3, #1
    63cc:	430b      	orrs	r3, r1
    63ce:	e7ef      	b.n	63b0 <__ledf2+0x50>
    63d0:	0031      	movs	r1, r6
    63d2:	2302      	movs	r3, #2
    63d4:	4301      	orrs	r1, r0
    63d6:	d1eb      	bne.n	63b0 <__ledf2+0x50>
    63d8:	e7d9      	b.n	638e <__ledf2+0x2e>
    63da:	0039      	movs	r1, r7
    63dc:	2302      	movs	r3, #2
    63de:	4311      	orrs	r1, r2
    63e0:	d1e6      	bne.n	63b0 <__ledf2+0x50>
    63e2:	e7d7      	b.n	6394 <__ledf2+0x34>
    63e4:	433a      	orrs	r2, r7
    63e6:	d1dd      	bne.n	63a4 <__ledf2+0x44>
    63e8:	2300      	movs	r3, #0
    63ea:	2800      	cmp	r0, #0
    63ec:	d0e0      	beq.n	63b0 <__ledf2+0x50>
    63ee:	e7ea      	b.n	63c6 <__ledf2+0x66>
    63f0:	433a      	orrs	r2, r7
    63f2:	d1e6      	bne.n	63c2 <__ledf2+0x62>
    63f4:	e7e7      	b.n	63c6 <__ledf2+0x66>
    63f6:	42a5      	cmp	r5, r4
    63f8:	dce5      	bgt.n	63c6 <__ledf2+0x66>
    63fa:	db05      	blt.n	6408 <__ledf2+0xa8>
    63fc:	42be      	cmp	r6, r7
    63fe:	d8e2      	bhi.n	63c6 <__ledf2+0x66>
    6400:	d007      	beq.n	6412 <__ledf2+0xb2>
    6402:	2300      	movs	r3, #0
    6404:	42be      	cmp	r6, r7
    6406:	d2d3      	bcs.n	63b0 <__ledf2+0x50>
    6408:	4659      	mov	r1, fp
    640a:	2301      	movs	r3, #1
    640c:	3901      	subs	r1, #1
    640e:	430b      	orrs	r3, r1
    6410:	e7ce      	b.n	63b0 <__ledf2+0x50>
    6412:	45c4      	cmp	ip, r8
    6414:	d8d7      	bhi.n	63c6 <__ledf2+0x66>
    6416:	2300      	movs	r3, #0
    6418:	45c4      	cmp	ip, r8
    641a:	d3f5      	bcc.n	6408 <__ledf2+0xa8>
    641c:	e7c8      	b.n	63b0 <__ledf2+0x50>
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	000007ff 	.word	0x000007ff

00006424 <__aeabi_dmul>:
    6424:	b5f0      	push	{r4, r5, r6, r7, lr}
    6426:	4657      	mov	r7, sl
    6428:	4645      	mov	r5, r8
    642a:	46de      	mov	lr, fp
    642c:	464e      	mov	r6, r9
    642e:	b5e0      	push	{r5, r6, r7, lr}
    6430:	030c      	lsls	r4, r1, #12
    6432:	4698      	mov	r8, r3
    6434:	004e      	lsls	r6, r1, #1
    6436:	0b23      	lsrs	r3, r4, #12
    6438:	b087      	sub	sp, #28
    643a:	0007      	movs	r7, r0
    643c:	4692      	mov	sl, r2
    643e:	469b      	mov	fp, r3
    6440:	0d76      	lsrs	r6, r6, #21
    6442:	0fcd      	lsrs	r5, r1, #31
    6444:	2e00      	cmp	r6, #0
    6446:	d06b      	beq.n	6520 <__aeabi_dmul+0xfc>
    6448:	4b6d      	ldr	r3, [pc, #436]	; (6600 <__aeabi_dmul+0x1dc>)
    644a:	429e      	cmp	r6, r3
    644c:	d035      	beq.n	64ba <__aeabi_dmul+0x96>
    644e:	2480      	movs	r4, #128	; 0x80
    6450:	465b      	mov	r3, fp
    6452:	0f42      	lsrs	r2, r0, #29
    6454:	0424      	lsls	r4, r4, #16
    6456:	00db      	lsls	r3, r3, #3
    6458:	4314      	orrs	r4, r2
    645a:	431c      	orrs	r4, r3
    645c:	00c3      	lsls	r3, r0, #3
    645e:	4699      	mov	r9, r3
    6460:	4b68      	ldr	r3, [pc, #416]	; (6604 <__aeabi_dmul+0x1e0>)
    6462:	46a3      	mov	fp, r4
    6464:	469c      	mov	ip, r3
    6466:	2300      	movs	r3, #0
    6468:	2700      	movs	r7, #0
    646a:	4466      	add	r6, ip
    646c:	9302      	str	r3, [sp, #8]
    646e:	4643      	mov	r3, r8
    6470:	031c      	lsls	r4, r3, #12
    6472:	005a      	lsls	r2, r3, #1
    6474:	0fdb      	lsrs	r3, r3, #31
    6476:	4650      	mov	r0, sl
    6478:	0b24      	lsrs	r4, r4, #12
    647a:	0d52      	lsrs	r2, r2, #21
    647c:	4698      	mov	r8, r3
    647e:	d100      	bne.n	6482 <__aeabi_dmul+0x5e>
    6480:	e076      	b.n	6570 <__aeabi_dmul+0x14c>
    6482:	4b5f      	ldr	r3, [pc, #380]	; (6600 <__aeabi_dmul+0x1dc>)
    6484:	429a      	cmp	r2, r3
    6486:	d06d      	beq.n	6564 <__aeabi_dmul+0x140>
    6488:	2380      	movs	r3, #128	; 0x80
    648a:	0f41      	lsrs	r1, r0, #29
    648c:	041b      	lsls	r3, r3, #16
    648e:	430b      	orrs	r3, r1
    6490:	495c      	ldr	r1, [pc, #368]	; (6604 <__aeabi_dmul+0x1e0>)
    6492:	00e4      	lsls	r4, r4, #3
    6494:	468c      	mov	ip, r1
    6496:	431c      	orrs	r4, r3
    6498:	00c3      	lsls	r3, r0, #3
    649a:	2000      	movs	r0, #0
    649c:	4462      	add	r2, ip
    649e:	4641      	mov	r1, r8
    64a0:	18b6      	adds	r6, r6, r2
    64a2:	4069      	eors	r1, r5
    64a4:	1c72      	adds	r2, r6, #1
    64a6:	9101      	str	r1, [sp, #4]
    64a8:	4694      	mov	ip, r2
    64aa:	4307      	orrs	r7, r0
    64ac:	2f0f      	cmp	r7, #15
    64ae:	d900      	bls.n	64b2 <__aeabi_dmul+0x8e>
    64b0:	e0b0      	b.n	6614 <__aeabi_dmul+0x1f0>
    64b2:	4a55      	ldr	r2, [pc, #340]	; (6608 <__aeabi_dmul+0x1e4>)
    64b4:	00bf      	lsls	r7, r7, #2
    64b6:	59d2      	ldr	r2, [r2, r7]
    64b8:	4697      	mov	pc, r2
    64ba:	465b      	mov	r3, fp
    64bc:	4303      	orrs	r3, r0
    64be:	4699      	mov	r9, r3
    64c0:	d000      	beq.n	64c4 <__aeabi_dmul+0xa0>
    64c2:	e087      	b.n	65d4 <__aeabi_dmul+0x1b0>
    64c4:	2300      	movs	r3, #0
    64c6:	469b      	mov	fp, r3
    64c8:	3302      	adds	r3, #2
    64ca:	2708      	movs	r7, #8
    64cc:	9302      	str	r3, [sp, #8]
    64ce:	e7ce      	b.n	646e <__aeabi_dmul+0x4a>
    64d0:	4642      	mov	r2, r8
    64d2:	9201      	str	r2, [sp, #4]
    64d4:	2802      	cmp	r0, #2
    64d6:	d067      	beq.n	65a8 <__aeabi_dmul+0x184>
    64d8:	2803      	cmp	r0, #3
    64da:	d100      	bne.n	64de <__aeabi_dmul+0xba>
    64dc:	e20e      	b.n	68fc <__aeabi_dmul+0x4d8>
    64de:	2801      	cmp	r0, #1
    64e0:	d000      	beq.n	64e4 <__aeabi_dmul+0xc0>
    64e2:	e162      	b.n	67aa <__aeabi_dmul+0x386>
    64e4:	2300      	movs	r3, #0
    64e6:	2400      	movs	r4, #0
    64e8:	2200      	movs	r2, #0
    64ea:	4699      	mov	r9, r3
    64ec:	9901      	ldr	r1, [sp, #4]
    64ee:	4001      	ands	r1, r0
    64f0:	b2cd      	uxtb	r5, r1
    64f2:	2100      	movs	r1, #0
    64f4:	0312      	lsls	r2, r2, #12
    64f6:	0d0b      	lsrs	r3, r1, #20
    64f8:	0b12      	lsrs	r2, r2, #12
    64fa:	051b      	lsls	r3, r3, #20
    64fc:	4313      	orrs	r3, r2
    64fe:	4a43      	ldr	r2, [pc, #268]	; (660c <__aeabi_dmul+0x1e8>)
    6500:	0524      	lsls	r4, r4, #20
    6502:	4013      	ands	r3, r2
    6504:	431c      	orrs	r4, r3
    6506:	0064      	lsls	r4, r4, #1
    6508:	07ed      	lsls	r5, r5, #31
    650a:	0864      	lsrs	r4, r4, #1
    650c:	432c      	orrs	r4, r5
    650e:	4648      	mov	r0, r9
    6510:	0021      	movs	r1, r4
    6512:	b007      	add	sp, #28
    6514:	bc3c      	pop	{r2, r3, r4, r5}
    6516:	4690      	mov	r8, r2
    6518:	4699      	mov	r9, r3
    651a:	46a2      	mov	sl, r4
    651c:	46ab      	mov	fp, r5
    651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6520:	4303      	orrs	r3, r0
    6522:	4699      	mov	r9, r3
    6524:	d04f      	beq.n	65c6 <__aeabi_dmul+0x1a2>
    6526:	465b      	mov	r3, fp
    6528:	2b00      	cmp	r3, #0
    652a:	d100      	bne.n	652e <__aeabi_dmul+0x10a>
    652c:	e189      	b.n	6842 <__aeabi_dmul+0x41e>
    652e:	4658      	mov	r0, fp
    6530:	f000 fdec 	bl	710c <__clzsi2>
    6534:	0003      	movs	r3, r0
    6536:	3b0b      	subs	r3, #11
    6538:	2b1c      	cmp	r3, #28
    653a:	dd00      	ble.n	653e <__aeabi_dmul+0x11a>
    653c:	e17a      	b.n	6834 <__aeabi_dmul+0x410>
    653e:	221d      	movs	r2, #29
    6540:	1ad3      	subs	r3, r2, r3
    6542:	003a      	movs	r2, r7
    6544:	0001      	movs	r1, r0
    6546:	465c      	mov	r4, fp
    6548:	40da      	lsrs	r2, r3
    654a:	3908      	subs	r1, #8
    654c:	408c      	lsls	r4, r1
    654e:	0013      	movs	r3, r2
    6550:	408f      	lsls	r7, r1
    6552:	4323      	orrs	r3, r4
    6554:	469b      	mov	fp, r3
    6556:	46b9      	mov	r9, r7
    6558:	2300      	movs	r3, #0
    655a:	4e2d      	ldr	r6, [pc, #180]	; (6610 <__aeabi_dmul+0x1ec>)
    655c:	2700      	movs	r7, #0
    655e:	1a36      	subs	r6, r6, r0
    6560:	9302      	str	r3, [sp, #8]
    6562:	e784      	b.n	646e <__aeabi_dmul+0x4a>
    6564:	4653      	mov	r3, sl
    6566:	4323      	orrs	r3, r4
    6568:	d12a      	bne.n	65c0 <__aeabi_dmul+0x19c>
    656a:	2400      	movs	r4, #0
    656c:	2002      	movs	r0, #2
    656e:	e796      	b.n	649e <__aeabi_dmul+0x7a>
    6570:	4653      	mov	r3, sl
    6572:	4323      	orrs	r3, r4
    6574:	d020      	beq.n	65b8 <__aeabi_dmul+0x194>
    6576:	2c00      	cmp	r4, #0
    6578:	d100      	bne.n	657c <__aeabi_dmul+0x158>
    657a:	e157      	b.n	682c <__aeabi_dmul+0x408>
    657c:	0020      	movs	r0, r4
    657e:	f000 fdc5 	bl	710c <__clzsi2>
    6582:	0003      	movs	r3, r0
    6584:	3b0b      	subs	r3, #11
    6586:	2b1c      	cmp	r3, #28
    6588:	dd00      	ble.n	658c <__aeabi_dmul+0x168>
    658a:	e149      	b.n	6820 <__aeabi_dmul+0x3fc>
    658c:	211d      	movs	r1, #29
    658e:	1acb      	subs	r3, r1, r3
    6590:	4651      	mov	r1, sl
    6592:	0002      	movs	r2, r0
    6594:	40d9      	lsrs	r1, r3
    6596:	4653      	mov	r3, sl
    6598:	3a08      	subs	r2, #8
    659a:	4094      	lsls	r4, r2
    659c:	4093      	lsls	r3, r2
    659e:	430c      	orrs	r4, r1
    65a0:	4a1b      	ldr	r2, [pc, #108]	; (6610 <__aeabi_dmul+0x1ec>)
    65a2:	1a12      	subs	r2, r2, r0
    65a4:	2000      	movs	r0, #0
    65a6:	e77a      	b.n	649e <__aeabi_dmul+0x7a>
    65a8:	2501      	movs	r5, #1
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	4c14      	ldr	r4, [pc, #80]	; (6600 <__aeabi_dmul+0x1dc>)
    65ae:	401d      	ands	r5, r3
    65b0:	2300      	movs	r3, #0
    65b2:	2200      	movs	r2, #0
    65b4:	4699      	mov	r9, r3
    65b6:	e79c      	b.n	64f2 <__aeabi_dmul+0xce>
    65b8:	2400      	movs	r4, #0
    65ba:	2200      	movs	r2, #0
    65bc:	2001      	movs	r0, #1
    65be:	e76e      	b.n	649e <__aeabi_dmul+0x7a>
    65c0:	4653      	mov	r3, sl
    65c2:	2003      	movs	r0, #3
    65c4:	e76b      	b.n	649e <__aeabi_dmul+0x7a>
    65c6:	2300      	movs	r3, #0
    65c8:	469b      	mov	fp, r3
    65ca:	3301      	adds	r3, #1
    65cc:	2704      	movs	r7, #4
    65ce:	2600      	movs	r6, #0
    65d0:	9302      	str	r3, [sp, #8]
    65d2:	e74c      	b.n	646e <__aeabi_dmul+0x4a>
    65d4:	2303      	movs	r3, #3
    65d6:	4681      	mov	r9, r0
    65d8:	270c      	movs	r7, #12
    65da:	9302      	str	r3, [sp, #8]
    65dc:	e747      	b.n	646e <__aeabi_dmul+0x4a>
    65de:	2280      	movs	r2, #128	; 0x80
    65e0:	2300      	movs	r3, #0
    65e2:	2500      	movs	r5, #0
    65e4:	0312      	lsls	r2, r2, #12
    65e6:	4699      	mov	r9, r3
    65e8:	4c05      	ldr	r4, [pc, #20]	; (6600 <__aeabi_dmul+0x1dc>)
    65ea:	e782      	b.n	64f2 <__aeabi_dmul+0xce>
    65ec:	465c      	mov	r4, fp
    65ee:	464b      	mov	r3, r9
    65f0:	9802      	ldr	r0, [sp, #8]
    65f2:	e76f      	b.n	64d4 <__aeabi_dmul+0xb0>
    65f4:	465c      	mov	r4, fp
    65f6:	464b      	mov	r3, r9
    65f8:	9501      	str	r5, [sp, #4]
    65fa:	9802      	ldr	r0, [sp, #8]
    65fc:	e76a      	b.n	64d4 <__aeabi_dmul+0xb0>
    65fe:	46c0      	nop			; (mov r8, r8)
    6600:	000007ff 	.word	0x000007ff
    6604:	fffffc01 	.word	0xfffffc01
    6608:	00007854 	.word	0x00007854
    660c:	800fffff 	.word	0x800fffff
    6610:	fffffc0d 	.word	0xfffffc0d
    6614:	464a      	mov	r2, r9
    6616:	4649      	mov	r1, r9
    6618:	0c17      	lsrs	r7, r2, #16
    661a:	0c1a      	lsrs	r2, r3, #16
    661c:	041b      	lsls	r3, r3, #16
    661e:	0c1b      	lsrs	r3, r3, #16
    6620:	0408      	lsls	r0, r1, #16
    6622:	0019      	movs	r1, r3
    6624:	0c00      	lsrs	r0, r0, #16
    6626:	4341      	muls	r1, r0
    6628:	0015      	movs	r5, r2
    662a:	4688      	mov	r8, r1
    662c:	0019      	movs	r1, r3
    662e:	437d      	muls	r5, r7
    6630:	4379      	muls	r1, r7
    6632:	9503      	str	r5, [sp, #12]
    6634:	4689      	mov	r9, r1
    6636:	0029      	movs	r1, r5
    6638:	0015      	movs	r5, r2
    663a:	4345      	muls	r5, r0
    663c:	444d      	add	r5, r9
    663e:	9502      	str	r5, [sp, #8]
    6640:	4645      	mov	r5, r8
    6642:	0c2d      	lsrs	r5, r5, #16
    6644:	46aa      	mov	sl, r5
    6646:	9d02      	ldr	r5, [sp, #8]
    6648:	4455      	add	r5, sl
    664a:	45a9      	cmp	r9, r5
    664c:	d906      	bls.n	665c <__aeabi_dmul+0x238>
    664e:	468a      	mov	sl, r1
    6650:	2180      	movs	r1, #128	; 0x80
    6652:	0249      	lsls	r1, r1, #9
    6654:	4689      	mov	r9, r1
    6656:	44ca      	add	sl, r9
    6658:	4651      	mov	r1, sl
    665a:	9103      	str	r1, [sp, #12]
    665c:	0c29      	lsrs	r1, r5, #16
    665e:	9104      	str	r1, [sp, #16]
    6660:	4641      	mov	r1, r8
    6662:	0409      	lsls	r1, r1, #16
    6664:	042d      	lsls	r5, r5, #16
    6666:	0c09      	lsrs	r1, r1, #16
    6668:	4688      	mov	r8, r1
    666a:	0029      	movs	r1, r5
    666c:	0c25      	lsrs	r5, r4, #16
    666e:	0424      	lsls	r4, r4, #16
    6670:	4441      	add	r1, r8
    6672:	0c24      	lsrs	r4, r4, #16
    6674:	9105      	str	r1, [sp, #20]
    6676:	0021      	movs	r1, r4
    6678:	4341      	muls	r1, r0
    667a:	4688      	mov	r8, r1
    667c:	0021      	movs	r1, r4
    667e:	4379      	muls	r1, r7
    6680:	468a      	mov	sl, r1
    6682:	4368      	muls	r0, r5
    6684:	4641      	mov	r1, r8
    6686:	4450      	add	r0, sl
    6688:	4681      	mov	r9, r0
    668a:	0c08      	lsrs	r0, r1, #16
    668c:	4448      	add	r0, r9
    668e:	436f      	muls	r7, r5
    6690:	4582      	cmp	sl, r0
    6692:	d903      	bls.n	669c <__aeabi_dmul+0x278>
    6694:	2180      	movs	r1, #128	; 0x80
    6696:	0249      	lsls	r1, r1, #9
    6698:	4689      	mov	r9, r1
    669a:	444f      	add	r7, r9
    669c:	0c01      	lsrs	r1, r0, #16
    669e:	4689      	mov	r9, r1
    66a0:	0039      	movs	r1, r7
    66a2:	4449      	add	r1, r9
    66a4:	9102      	str	r1, [sp, #8]
    66a6:	4641      	mov	r1, r8
    66a8:	040f      	lsls	r7, r1, #16
    66aa:	9904      	ldr	r1, [sp, #16]
    66ac:	0c3f      	lsrs	r7, r7, #16
    66ae:	4688      	mov	r8, r1
    66b0:	0400      	lsls	r0, r0, #16
    66b2:	19c0      	adds	r0, r0, r7
    66b4:	4480      	add	r8, r0
    66b6:	4641      	mov	r1, r8
    66b8:	9104      	str	r1, [sp, #16]
    66ba:	4659      	mov	r1, fp
    66bc:	0c0f      	lsrs	r7, r1, #16
    66be:	0409      	lsls	r1, r1, #16
    66c0:	0c09      	lsrs	r1, r1, #16
    66c2:	4688      	mov	r8, r1
    66c4:	4359      	muls	r1, r3
    66c6:	468a      	mov	sl, r1
    66c8:	0039      	movs	r1, r7
    66ca:	4351      	muls	r1, r2
    66cc:	4689      	mov	r9, r1
    66ce:	4641      	mov	r1, r8
    66d0:	434a      	muls	r2, r1
    66d2:	4651      	mov	r1, sl
    66d4:	0c09      	lsrs	r1, r1, #16
    66d6:	468b      	mov	fp, r1
    66d8:	437b      	muls	r3, r7
    66da:	18d2      	adds	r2, r2, r3
    66dc:	445a      	add	r2, fp
    66de:	4293      	cmp	r3, r2
    66e0:	d903      	bls.n	66ea <__aeabi_dmul+0x2c6>
    66e2:	2380      	movs	r3, #128	; 0x80
    66e4:	025b      	lsls	r3, r3, #9
    66e6:	469b      	mov	fp, r3
    66e8:	44d9      	add	r9, fp
    66ea:	4651      	mov	r1, sl
    66ec:	0409      	lsls	r1, r1, #16
    66ee:	0c09      	lsrs	r1, r1, #16
    66f0:	468a      	mov	sl, r1
    66f2:	4641      	mov	r1, r8
    66f4:	4361      	muls	r1, r4
    66f6:	437c      	muls	r4, r7
    66f8:	0c13      	lsrs	r3, r2, #16
    66fa:	0412      	lsls	r2, r2, #16
    66fc:	444b      	add	r3, r9
    66fe:	4452      	add	r2, sl
    6700:	46a1      	mov	r9, r4
    6702:	468a      	mov	sl, r1
    6704:	003c      	movs	r4, r7
    6706:	4641      	mov	r1, r8
    6708:	436c      	muls	r4, r5
    670a:	434d      	muls	r5, r1
    670c:	4651      	mov	r1, sl
    670e:	444d      	add	r5, r9
    6710:	0c0f      	lsrs	r7, r1, #16
    6712:	197d      	adds	r5, r7, r5
    6714:	45a9      	cmp	r9, r5
    6716:	d903      	bls.n	6720 <__aeabi_dmul+0x2fc>
    6718:	2180      	movs	r1, #128	; 0x80
    671a:	0249      	lsls	r1, r1, #9
    671c:	4688      	mov	r8, r1
    671e:	4444      	add	r4, r8
    6720:	9f04      	ldr	r7, [sp, #16]
    6722:	9903      	ldr	r1, [sp, #12]
    6724:	46b8      	mov	r8, r7
    6726:	4441      	add	r1, r8
    6728:	468b      	mov	fp, r1
    672a:	4583      	cmp	fp, r0
    672c:	4180      	sbcs	r0, r0
    672e:	4241      	negs	r1, r0
    6730:	4688      	mov	r8, r1
    6732:	4651      	mov	r1, sl
    6734:	0408      	lsls	r0, r1, #16
    6736:	042f      	lsls	r7, r5, #16
    6738:	0c00      	lsrs	r0, r0, #16
    673a:	183f      	adds	r7, r7, r0
    673c:	4658      	mov	r0, fp
    673e:	9902      	ldr	r1, [sp, #8]
    6740:	1810      	adds	r0, r2, r0
    6742:	4689      	mov	r9, r1
    6744:	4290      	cmp	r0, r2
    6746:	4192      	sbcs	r2, r2
    6748:	444f      	add	r7, r9
    674a:	46ba      	mov	sl, r7
    674c:	4252      	negs	r2, r2
    674e:	4699      	mov	r9, r3
    6750:	4693      	mov	fp, r2
    6752:	44c2      	add	sl, r8
    6754:	44d1      	add	r9, sl
    6756:	44cb      	add	fp, r9
    6758:	428f      	cmp	r7, r1
    675a:	41bf      	sbcs	r7, r7
    675c:	45c2      	cmp	sl, r8
    675e:	4189      	sbcs	r1, r1
    6760:	4599      	cmp	r9, r3
    6762:	419b      	sbcs	r3, r3
    6764:	4593      	cmp	fp, r2
    6766:	4192      	sbcs	r2, r2
    6768:	427f      	negs	r7, r7
    676a:	4249      	negs	r1, r1
    676c:	0c2d      	lsrs	r5, r5, #16
    676e:	4252      	negs	r2, r2
    6770:	430f      	orrs	r7, r1
    6772:	425b      	negs	r3, r3
    6774:	4313      	orrs	r3, r2
    6776:	197f      	adds	r7, r7, r5
    6778:	18ff      	adds	r7, r7, r3
    677a:	465b      	mov	r3, fp
    677c:	193c      	adds	r4, r7, r4
    677e:	0ddb      	lsrs	r3, r3, #23
    6780:	9a05      	ldr	r2, [sp, #20]
    6782:	0264      	lsls	r4, r4, #9
    6784:	431c      	orrs	r4, r3
    6786:	0243      	lsls	r3, r0, #9
    6788:	4313      	orrs	r3, r2
    678a:	1e5d      	subs	r5, r3, #1
    678c:	41ab      	sbcs	r3, r5
    678e:	465a      	mov	r2, fp
    6790:	0dc0      	lsrs	r0, r0, #23
    6792:	4303      	orrs	r3, r0
    6794:	0252      	lsls	r2, r2, #9
    6796:	4313      	orrs	r3, r2
    6798:	01e2      	lsls	r2, r4, #7
    679a:	d556      	bpl.n	684a <__aeabi_dmul+0x426>
    679c:	2001      	movs	r0, #1
    679e:	085a      	lsrs	r2, r3, #1
    67a0:	4003      	ands	r3, r0
    67a2:	4313      	orrs	r3, r2
    67a4:	07e2      	lsls	r2, r4, #31
    67a6:	4313      	orrs	r3, r2
    67a8:	0864      	lsrs	r4, r4, #1
    67aa:	485a      	ldr	r0, [pc, #360]	; (6914 <__aeabi_dmul+0x4f0>)
    67ac:	4460      	add	r0, ip
    67ae:	2800      	cmp	r0, #0
    67b0:	dd4d      	ble.n	684e <__aeabi_dmul+0x42a>
    67b2:	075a      	lsls	r2, r3, #29
    67b4:	d009      	beq.n	67ca <__aeabi_dmul+0x3a6>
    67b6:	220f      	movs	r2, #15
    67b8:	401a      	ands	r2, r3
    67ba:	2a04      	cmp	r2, #4
    67bc:	d005      	beq.n	67ca <__aeabi_dmul+0x3a6>
    67be:	1d1a      	adds	r2, r3, #4
    67c0:	429a      	cmp	r2, r3
    67c2:	419b      	sbcs	r3, r3
    67c4:	425b      	negs	r3, r3
    67c6:	18e4      	adds	r4, r4, r3
    67c8:	0013      	movs	r3, r2
    67ca:	01e2      	lsls	r2, r4, #7
    67cc:	d504      	bpl.n	67d8 <__aeabi_dmul+0x3b4>
    67ce:	2080      	movs	r0, #128	; 0x80
    67d0:	4a51      	ldr	r2, [pc, #324]	; (6918 <__aeabi_dmul+0x4f4>)
    67d2:	00c0      	lsls	r0, r0, #3
    67d4:	4014      	ands	r4, r2
    67d6:	4460      	add	r0, ip
    67d8:	4a50      	ldr	r2, [pc, #320]	; (691c <__aeabi_dmul+0x4f8>)
    67da:	4290      	cmp	r0, r2
    67dc:	dd00      	ble.n	67e0 <__aeabi_dmul+0x3bc>
    67de:	e6e3      	b.n	65a8 <__aeabi_dmul+0x184>
    67e0:	2501      	movs	r5, #1
    67e2:	08db      	lsrs	r3, r3, #3
    67e4:	0762      	lsls	r2, r4, #29
    67e6:	431a      	orrs	r2, r3
    67e8:	0264      	lsls	r4, r4, #9
    67ea:	9b01      	ldr	r3, [sp, #4]
    67ec:	4691      	mov	r9, r2
    67ee:	0b22      	lsrs	r2, r4, #12
    67f0:	0544      	lsls	r4, r0, #21
    67f2:	0d64      	lsrs	r4, r4, #21
    67f4:	401d      	ands	r5, r3
    67f6:	e67c      	b.n	64f2 <__aeabi_dmul+0xce>
    67f8:	2280      	movs	r2, #128	; 0x80
    67fa:	4659      	mov	r1, fp
    67fc:	0312      	lsls	r2, r2, #12
    67fe:	4211      	tst	r1, r2
    6800:	d008      	beq.n	6814 <__aeabi_dmul+0x3f0>
    6802:	4214      	tst	r4, r2
    6804:	d106      	bne.n	6814 <__aeabi_dmul+0x3f0>
    6806:	4322      	orrs	r2, r4
    6808:	0312      	lsls	r2, r2, #12
    680a:	0b12      	lsrs	r2, r2, #12
    680c:	4645      	mov	r5, r8
    680e:	4699      	mov	r9, r3
    6810:	4c43      	ldr	r4, [pc, #268]	; (6920 <__aeabi_dmul+0x4fc>)
    6812:	e66e      	b.n	64f2 <__aeabi_dmul+0xce>
    6814:	465b      	mov	r3, fp
    6816:	431a      	orrs	r2, r3
    6818:	0312      	lsls	r2, r2, #12
    681a:	0b12      	lsrs	r2, r2, #12
    681c:	4c40      	ldr	r4, [pc, #256]	; (6920 <__aeabi_dmul+0x4fc>)
    681e:	e668      	b.n	64f2 <__aeabi_dmul+0xce>
    6820:	0003      	movs	r3, r0
    6822:	4654      	mov	r4, sl
    6824:	3b28      	subs	r3, #40	; 0x28
    6826:	409c      	lsls	r4, r3
    6828:	2300      	movs	r3, #0
    682a:	e6b9      	b.n	65a0 <__aeabi_dmul+0x17c>
    682c:	f000 fc6e 	bl	710c <__clzsi2>
    6830:	3020      	adds	r0, #32
    6832:	e6a6      	b.n	6582 <__aeabi_dmul+0x15e>
    6834:	0003      	movs	r3, r0
    6836:	3b28      	subs	r3, #40	; 0x28
    6838:	409f      	lsls	r7, r3
    683a:	2300      	movs	r3, #0
    683c:	46bb      	mov	fp, r7
    683e:	4699      	mov	r9, r3
    6840:	e68a      	b.n	6558 <__aeabi_dmul+0x134>
    6842:	f000 fc63 	bl	710c <__clzsi2>
    6846:	3020      	adds	r0, #32
    6848:	e674      	b.n	6534 <__aeabi_dmul+0x110>
    684a:	46b4      	mov	ip, r6
    684c:	e7ad      	b.n	67aa <__aeabi_dmul+0x386>
    684e:	2501      	movs	r5, #1
    6850:	1a2a      	subs	r2, r5, r0
    6852:	2a38      	cmp	r2, #56	; 0x38
    6854:	dd06      	ble.n	6864 <__aeabi_dmul+0x440>
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	2400      	movs	r4, #0
    685a:	401d      	ands	r5, r3
    685c:	2300      	movs	r3, #0
    685e:	2200      	movs	r2, #0
    6860:	4699      	mov	r9, r3
    6862:	e646      	b.n	64f2 <__aeabi_dmul+0xce>
    6864:	2a1f      	cmp	r2, #31
    6866:	dc21      	bgt.n	68ac <__aeabi_dmul+0x488>
    6868:	2520      	movs	r5, #32
    686a:	0020      	movs	r0, r4
    686c:	1aad      	subs	r5, r5, r2
    686e:	001e      	movs	r6, r3
    6870:	40ab      	lsls	r3, r5
    6872:	40a8      	lsls	r0, r5
    6874:	40d6      	lsrs	r6, r2
    6876:	1e5d      	subs	r5, r3, #1
    6878:	41ab      	sbcs	r3, r5
    687a:	4330      	orrs	r0, r6
    687c:	4318      	orrs	r0, r3
    687e:	40d4      	lsrs	r4, r2
    6880:	0743      	lsls	r3, r0, #29
    6882:	d009      	beq.n	6898 <__aeabi_dmul+0x474>
    6884:	230f      	movs	r3, #15
    6886:	4003      	ands	r3, r0
    6888:	2b04      	cmp	r3, #4
    688a:	d005      	beq.n	6898 <__aeabi_dmul+0x474>
    688c:	0003      	movs	r3, r0
    688e:	1d18      	adds	r0, r3, #4
    6890:	4298      	cmp	r0, r3
    6892:	419b      	sbcs	r3, r3
    6894:	425b      	negs	r3, r3
    6896:	18e4      	adds	r4, r4, r3
    6898:	0223      	lsls	r3, r4, #8
    689a:	d521      	bpl.n	68e0 <__aeabi_dmul+0x4bc>
    689c:	2501      	movs	r5, #1
    689e:	9b01      	ldr	r3, [sp, #4]
    68a0:	2401      	movs	r4, #1
    68a2:	401d      	ands	r5, r3
    68a4:	2300      	movs	r3, #0
    68a6:	2200      	movs	r2, #0
    68a8:	4699      	mov	r9, r3
    68aa:	e622      	b.n	64f2 <__aeabi_dmul+0xce>
    68ac:	251f      	movs	r5, #31
    68ae:	0021      	movs	r1, r4
    68b0:	426d      	negs	r5, r5
    68b2:	1a28      	subs	r0, r5, r0
    68b4:	40c1      	lsrs	r1, r0
    68b6:	0008      	movs	r0, r1
    68b8:	2a20      	cmp	r2, #32
    68ba:	d01d      	beq.n	68f8 <__aeabi_dmul+0x4d4>
    68bc:	355f      	adds	r5, #95	; 0x5f
    68be:	1aaa      	subs	r2, r5, r2
    68c0:	4094      	lsls	r4, r2
    68c2:	4323      	orrs	r3, r4
    68c4:	1e5c      	subs	r4, r3, #1
    68c6:	41a3      	sbcs	r3, r4
    68c8:	2507      	movs	r5, #7
    68ca:	4303      	orrs	r3, r0
    68cc:	401d      	ands	r5, r3
    68ce:	2200      	movs	r2, #0
    68d0:	2d00      	cmp	r5, #0
    68d2:	d009      	beq.n	68e8 <__aeabi_dmul+0x4c4>
    68d4:	220f      	movs	r2, #15
    68d6:	2400      	movs	r4, #0
    68d8:	401a      	ands	r2, r3
    68da:	0018      	movs	r0, r3
    68dc:	2a04      	cmp	r2, #4
    68de:	d1d6      	bne.n	688e <__aeabi_dmul+0x46a>
    68e0:	0003      	movs	r3, r0
    68e2:	0765      	lsls	r5, r4, #29
    68e4:	0264      	lsls	r4, r4, #9
    68e6:	0b22      	lsrs	r2, r4, #12
    68e8:	08db      	lsrs	r3, r3, #3
    68ea:	432b      	orrs	r3, r5
    68ec:	2501      	movs	r5, #1
    68ee:	4699      	mov	r9, r3
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	2400      	movs	r4, #0
    68f4:	401d      	ands	r5, r3
    68f6:	e5fc      	b.n	64f2 <__aeabi_dmul+0xce>
    68f8:	2400      	movs	r4, #0
    68fa:	e7e2      	b.n	68c2 <__aeabi_dmul+0x49e>
    68fc:	2280      	movs	r2, #128	; 0x80
    68fe:	2501      	movs	r5, #1
    6900:	0312      	lsls	r2, r2, #12
    6902:	4322      	orrs	r2, r4
    6904:	9901      	ldr	r1, [sp, #4]
    6906:	0312      	lsls	r2, r2, #12
    6908:	0b12      	lsrs	r2, r2, #12
    690a:	400d      	ands	r5, r1
    690c:	4699      	mov	r9, r3
    690e:	4c04      	ldr	r4, [pc, #16]	; (6920 <__aeabi_dmul+0x4fc>)
    6910:	e5ef      	b.n	64f2 <__aeabi_dmul+0xce>
    6912:	46c0      	nop			; (mov r8, r8)
    6914:	000003ff 	.word	0x000003ff
    6918:	feffffff 	.word	0xfeffffff
    691c:	000007fe 	.word	0x000007fe
    6920:	000007ff 	.word	0x000007ff

00006924 <__aeabi_dsub>:
    6924:	b5f0      	push	{r4, r5, r6, r7, lr}
    6926:	4646      	mov	r6, r8
    6928:	46d6      	mov	lr, sl
    692a:	464f      	mov	r7, r9
    692c:	030c      	lsls	r4, r1, #12
    692e:	b5c0      	push	{r6, r7, lr}
    6930:	0fcd      	lsrs	r5, r1, #31
    6932:	004e      	lsls	r6, r1, #1
    6934:	0a61      	lsrs	r1, r4, #9
    6936:	0f44      	lsrs	r4, r0, #29
    6938:	430c      	orrs	r4, r1
    693a:	00c1      	lsls	r1, r0, #3
    693c:	0058      	lsls	r0, r3, #1
    693e:	0d40      	lsrs	r0, r0, #21
    6940:	4684      	mov	ip, r0
    6942:	468a      	mov	sl, r1
    6944:	000f      	movs	r7, r1
    6946:	0319      	lsls	r1, r3, #12
    6948:	0f50      	lsrs	r0, r2, #29
    694a:	0a49      	lsrs	r1, r1, #9
    694c:	4301      	orrs	r1, r0
    694e:	48c6      	ldr	r0, [pc, #792]	; (6c68 <__aeabi_dsub+0x344>)
    6950:	0d76      	lsrs	r6, r6, #21
    6952:	46a8      	mov	r8, r5
    6954:	0fdb      	lsrs	r3, r3, #31
    6956:	00d2      	lsls	r2, r2, #3
    6958:	4584      	cmp	ip, r0
    695a:	d100      	bne.n	695e <__aeabi_dsub+0x3a>
    695c:	e0d8      	b.n	6b10 <__aeabi_dsub+0x1ec>
    695e:	2001      	movs	r0, #1
    6960:	4043      	eors	r3, r0
    6962:	42ab      	cmp	r3, r5
    6964:	d100      	bne.n	6968 <__aeabi_dsub+0x44>
    6966:	e0a6      	b.n	6ab6 <__aeabi_dsub+0x192>
    6968:	4660      	mov	r0, ip
    696a:	1a35      	subs	r5, r6, r0
    696c:	2d00      	cmp	r5, #0
    696e:	dc00      	bgt.n	6972 <__aeabi_dsub+0x4e>
    6970:	e105      	b.n	6b7e <__aeabi_dsub+0x25a>
    6972:	2800      	cmp	r0, #0
    6974:	d110      	bne.n	6998 <__aeabi_dsub+0x74>
    6976:	000b      	movs	r3, r1
    6978:	4313      	orrs	r3, r2
    697a:	d100      	bne.n	697e <__aeabi_dsub+0x5a>
    697c:	e0d7      	b.n	6b2e <__aeabi_dsub+0x20a>
    697e:	1e6b      	subs	r3, r5, #1
    6980:	2b00      	cmp	r3, #0
    6982:	d000      	beq.n	6986 <__aeabi_dsub+0x62>
    6984:	e14b      	b.n	6c1e <__aeabi_dsub+0x2fa>
    6986:	4653      	mov	r3, sl
    6988:	1a9f      	subs	r7, r3, r2
    698a:	45ba      	cmp	sl, r7
    698c:	4180      	sbcs	r0, r0
    698e:	1a64      	subs	r4, r4, r1
    6990:	4240      	negs	r0, r0
    6992:	1a24      	subs	r4, r4, r0
    6994:	2601      	movs	r6, #1
    6996:	e01e      	b.n	69d6 <__aeabi_dsub+0xb2>
    6998:	4bb3      	ldr	r3, [pc, #716]	; (6c68 <__aeabi_dsub+0x344>)
    699a:	429e      	cmp	r6, r3
    699c:	d048      	beq.n	6a30 <__aeabi_dsub+0x10c>
    699e:	2380      	movs	r3, #128	; 0x80
    69a0:	041b      	lsls	r3, r3, #16
    69a2:	4319      	orrs	r1, r3
    69a4:	2d38      	cmp	r5, #56	; 0x38
    69a6:	dd00      	ble.n	69aa <__aeabi_dsub+0x86>
    69a8:	e119      	b.n	6bde <__aeabi_dsub+0x2ba>
    69aa:	2d1f      	cmp	r5, #31
    69ac:	dd00      	ble.n	69b0 <__aeabi_dsub+0x8c>
    69ae:	e14c      	b.n	6c4a <__aeabi_dsub+0x326>
    69b0:	2320      	movs	r3, #32
    69b2:	000f      	movs	r7, r1
    69b4:	1b5b      	subs	r3, r3, r5
    69b6:	0010      	movs	r0, r2
    69b8:	409a      	lsls	r2, r3
    69ba:	409f      	lsls	r7, r3
    69bc:	40e8      	lsrs	r0, r5
    69be:	1e53      	subs	r3, r2, #1
    69c0:	419a      	sbcs	r2, r3
    69c2:	40e9      	lsrs	r1, r5
    69c4:	4307      	orrs	r7, r0
    69c6:	4317      	orrs	r7, r2
    69c8:	4653      	mov	r3, sl
    69ca:	1bdf      	subs	r7, r3, r7
    69cc:	1a61      	subs	r1, r4, r1
    69ce:	45ba      	cmp	sl, r7
    69d0:	41a4      	sbcs	r4, r4
    69d2:	4264      	negs	r4, r4
    69d4:	1b0c      	subs	r4, r1, r4
    69d6:	0223      	lsls	r3, r4, #8
    69d8:	d400      	bmi.n	69dc <__aeabi_dsub+0xb8>
    69da:	e0c5      	b.n	6b68 <__aeabi_dsub+0x244>
    69dc:	0264      	lsls	r4, r4, #9
    69de:	0a65      	lsrs	r5, r4, #9
    69e0:	2d00      	cmp	r5, #0
    69e2:	d100      	bne.n	69e6 <__aeabi_dsub+0xc2>
    69e4:	e0f6      	b.n	6bd4 <__aeabi_dsub+0x2b0>
    69e6:	0028      	movs	r0, r5
    69e8:	f000 fb90 	bl	710c <__clzsi2>
    69ec:	0003      	movs	r3, r0
    69ee:	3b08      	subs	r3, #8
    69f0:	2b1f      	cmp	r3, #31
    69f2:	dd00      	ble.n	69f6 <__aeabi_dsub+0xd2>
    69f4:	e0e9      	b.n	6bca <__aeabi_dsub+0x2a6>
    69f6:	2220      	movs	r2, #32
    69f8:	003c      	movs	r4, r7
    69fa:	1ad2      	subs	r2, r2, r3
    69fc:	409d      	lsls	r5, r3
    69fe:	40d4      	lsrs	r4, r2
    6a00:	409f      	lsls	r7, r3
    6a02:	4325      	orrs	r5, r4
    6a04:	429e      	cmp	r6, r3
    6a06:	dd00      	ble.n	6a0a <__aeabi_dsub+0xe6>
    6a08:	e0db      	b.n	6bc2 <__aeabi_dsub+0x29e>
    6a0a:	1b9e      	subs	r6, r3, r6
    6a0c:	1c73      	adds	r3, r6, #1
    6a0e:	2b1f      	cmp	r3, #31
    6a10:	dd00      	ble.n	6a14 <__aeabi_dsub+0xf0>
    6a12:	e10a      	b.n	6c2a <__aeabi_dsub+0x306>
    6a14:	2220      	movs	r2, #32
    6a16:	0038      	movs	r0, r7
    6a18:	1ad2      	subs	r2, r2, r3
    6a1a:	0029      	movs	r1, r5
    6a1c:	4097      	lsls	r7, r2
    6a1e:	002c      	movs	r4, r5
    6a20:	4091      	lsls	r1, r2
    6a22:	40d8      	lsrs	r0, r3
    6a24:	1e7a      	subs	r2, r7, #1
    6a26:	4197      	sbcs	r7, r2
    6a28:	40dc      	lsrs	r4, r3
    6a2a:	2600      	movs	r6, #0
    6a2c:	4301      	orrs	r1, r0
    6a2e:	430f      	orrs	r7, r1
    6a30:	077b      	lsls	r3, r7, #29
    6a32:	d009      	beq.n	6a48 <__aeabi_dsub+0x124>
    6a34:	230f      	movs	r3, #15
    6a36:	403b      	ands	r3, r7
    6a38:	2b04      	cmp	r3, #4
    6a3a:	d005      	beq.n	6a48 <__aeabi_dsub+0x124>
    6a3c:	1d3b      	adds	r3, r7, #4
    6a3e:	42bb      	cmp	r3, r7
    6a40:	41bf      	sbcs	r7, r7
    6a42:	427f      	negs	r7, r7
    6a44:	19e4      	adds	r4, r4, r7
    6a46:	001f      	movs	r7, r3
    6a48:	0223      	lsls	r3, r4, #8
    6a4a:	d525      	bpl.n	6a98 <__aeabi_dsub+0x174>
    6a4c:	4b86      	ldr	r3, [pc, #536]	; (6c68 <__aeabi_dsub+0x344>)
    6a4e:	3601      	adds	r6, #1
    6a50:	429e      	cmp	r6, r3
    6a52:	d100      	bne.n	6a56 <__aeabi_dsub+0x132>
    6a54:	e0af      	b.n	6bb6 <__aeabi_dsub+0x292>
    6a56:	4b85      	ldr	r3, [pc, #532]	; (6c6c <__aeabi_dsub+0x348>)
    6a58:	2501      	movs	r5, #1
    6a5a:	401c      	ands	r4, r3
    6a5c:	4643      	mov	r3, r8
    6a5e:	0762      	lsls	r2, r4, #29
    6a60:	08ff      	lsrs	r7, r7, #3
    6a62:	0264      	lsls	r4, r4, #9
    6a64:	0576      	lsls	r6, r6, #21
    6a66:	4317      	orrs	r7, r2
    6a68:	0b24      	lsrs	r4, r4, #12
    6a6a:	0d76      	lsrs	r6, r6, #21
    6a6c:	401d      	ands	r5, r3
    6a6e:	2100      	movs	r1, #0
    6a70:	0324      	lsls	r4, r4, #12
    6a72:	0b23      	lsrs	r3, r4, #12
    6a74:	0d0c      	lsrs	r4, r1, #20
    6a76:	4a7e      	ldr	r2, [pc, #504]	; (6c70 <__aeabi_dsub+0x34c>)
    6a78:	0524      	lsls	r4, r4, #20
    6a7a:	431c      	orrs	r4, r3
    6a7c:	4014      	ands	r4, r2
    6a7e:	0533      	lsls	r3, r6, #20
    6a80:	4323      	orrs	r3, r4
    6a82:	005b      	lsls	r3, r3, #1
    6a84:	07ed      	lsls	r5, r5, #31
    6a86:	085b      	lsrs	r3, r3, #1
    6a88:	432b      	orrs	r3, r5
    6a8a:	0038      	movs	r0, r7
    6a8c:	0019      	movs	r1, r3
    6a8e:	bc1c      	pop	{r2, r3, r4}
    6a90:	4690      	mov	r8, r2
    6a92:	4699      	mov	r9, r3
    6a94:	46a2      	mov	sl, r4
    6a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a98:	2501      	movs	r5, #1
    6a9a:	4643      	mov	r3, r8
    6a9c:	0762      	lsls	r2, r4, #29
    6a9e:	08ff      	lsrs	r7, r7, #3
    6aa0:	4317      	orrs	r7, r2
    6aa2:	08e4      	lsrs	r4, r4, #3
    6aa4:	401d      	ands	r5, r3
    6aa6:	4b70      	ldr	r3, [pc, #448]	; (6c68 <__aeabi_dsub+0x344>)
    6aa8:	429e      	cmp	r6, r3
    6aaa:	d036      	beq.n	6b1a <__aeabi_dsub+0x1f6>
    6aac:	0324      	lsls	r4, r4, #12
    6aae:	0576      	lsls	r6, r6, #21
    6ab0:	0b24      	lsrs	r4, r4, #12
    6ab2:	0d76      	lsrs	r6, r6, #21
    6ab4:	e7db      	b.n	6a6e <__aeabi_dsub+0x14a>
    6ab6:	4663      	mov	r3, ip
    6ab8:	1af3      	subs	r3, r6, r3
    6aba:	2b00      	cmp	r3, #0
    6abc:	dc00      	bgt.n	6ac0 <__aeabi_dsub+0x19c>
    6abe:	e094      	b.n	6bea <__aeabi_dsub+0x2c6>
    6ac0:	4660      	mov	r0, ip
    6ac2:	2800      	cmp	r0, #0
    6ac4:	d035      	beq.n	6b32 <__aeabi_dsub+0x20e>
    6ac6:	4868      	ldr	r0, [pc, #416]	; (6c68 <__aeabi_dsub+0x344>)
    6ac8:	4286      	cmp	r6, r0
    6aca:	d0b1      	beq.n	6a30 <__aeabi_dsub+0x10c>
    6acc:	2780      	movs	r7, #128	; 0x80
    6ace:	043f      	lsls	r7, r7, #16
    6ad0:	4339      	orrs	r1, r7
    6ad2:	2b38      	cmp	r3, #56	; 0x38
    6ad4:	dc00      	bgt.n	6ad8 <__aeabi_dsub+0x1b4>
    6ad6:	e0fd      	b.n	6cd4 <__aeabi_dsub+0x3b0>
    6ad8:	430a      	orrs	r2, r1
    6ada:	0017      	movs	r7, r2
    6adc:	2100      	movs	r1, #0
    6ade:	1e7a      	subs	r2, r7, #1
    6ae0:	4197      	sbcs	r7, r2
    6ae2:	4457      	add	r7, sl
    6ae4:	4557      	cmp	r7, sl
    6ae6:	4180      	sbcs	r0, r0
    6ae8:	1909      	adds	r1, r1, r4
    6aea:	4244      	negs	r4, r0
    6aec:	190c      	adds	r4, r1, r4
    6aee:	0223      	lsls	r3, r4, #8
    6af0:	d53a      	bpl.n	6b68 <__aeabi_dsub+0x244>
    6af2:	4b5d      	ldr	r3, [pc, #372]	; (6c68 <__aeabi_dsub+0x344>)
    6af4:	3601      	adds	r6, #1
    6af6:	429e      	cmp	r6, r3
    6af8:	d100      	bne.n	6afc <__aeabi_dsub+0x1d8>
    6afa:	e14b      	b.n	6d94 <__aeabi_dsub+0x470>
    6afc:	2201      	movs	r2, #1
    6afe:	4b5b      	ldr	r3, [pc, #364]	; (6c6c <__aeabi_dsub+0x348>)
    6b00:	401c      	ands	r4, r3
    6b02:	087b      	lsrs	r3, r7, #1
    6b04:	4017      	ands	r7, r2
    6b06:	431f      	orrs	r7, r3
    6b08:	07e2      	lsls	r2, r4, #31
    6b0a:	4317      	orrs	r7, r2
    6b0c:	0864      	lsrs	r4, r4, #1
    6b0e:	e78f      	b.n	6a30 <__aeabi_dsub+0x10c>
    6b10:	0008      	movs	r0, r1
    6b12:	4310      	orrs	r0, r2
    6b14:	d000      	beq.n	6b18 <__aeabi_dsub+0x1f4>
    6b16:	e724      	b.n	6962 <__aeabi_dsub+0x3e>
    6b18:	e721      	b.n	695e <__aeabi_dsub+0x3a>
    6b1a:	0023      	movs	r3, r4
    6b1c:	433b      	orrs	r3, r7
    6b1e:	d100      	bne.n	6b22 <__aeabi_dsub+0x1fe>
    6b20:	e1b9      	b.n	6e96 <__aeabi_dsub+0x572>
    6b22:	2280      	movs	r2, #128	; 0x80
    6b24:	0312      	lsls	r2, r2, #12
    6b26:	4314      	orrs	r4, r2
    6b28:	0324      	lsls	r4, r4, #12
    6b2a:	0b24      	lsrs	r4, r4, #12
    6b2c:	e79f      	b.n	6a6e <__aeabi_dsub+0x14a>
    6b2e:	002e      	movs	r6, r5
    6b30:	e77e      	b.n	6a30 <__aeabi_dsub+0x10c>
    6b32:	0008      	movs	r0, r1
    6b34:	4310      	orrs	r0, r2
    6b36:	d100      	bne.n	6b3a <__aeabi_dsub+0x216>
    6b38:	e0ca      	b.n	6cd0 <__aeabi_dsub+0x3ac>
    6b3a:	1e58      	subs	r0, r3, #1
    6b3c:	4684      	mov	ip, r0
    6b3e:	2800      	cmp	r0, #0
    6b40:	d000      	beq.n	6b44 <__aeabi_dsub+0x220>
    6b42:	e0e7      	b.n	6d14 <__aeabi_dsub+0x3f0>
    6b44:	4452      	add	r2, sl
    6b46:	4552      	cmp	r2, sl
    6b48:	4180      	sbcs	r0, r0
    6b4a:	1864      	adds	r4, r4, r1
    6b4c:	4240      	negs	r0, r0
    6b4e:	1824      	adds	r4, r4, r0
    6b50:	0017      	movs	r7, r2
    6b52:	2601      	movs	r6, #1
    6b54:	0223      	lsls	r3, r4, #8
    6b56:	d507      	bpl.n	6b68 <__aeabi_dsub+0x244>
    6b58:	2602      	movs	r6, #2
    6b5a:	e7cf      	b.n	6afc <__aeabi_dsub+0x1d8>
    6b5c:	4664      	mov	r4, ip
    6b5e:	432c      	orrs	r4, r5
    6b60:	d100      	bne.n	6b64 <__aeabi_dsub+0x240>
    6b62:	e1b3      	b.n	6ecc <__aeabi_dsub+0x5a8>
    6b64:	002c      	movs	r4, r5
    6b66:	4667      	mov	r7, ip
    6b68:	077b      	lsls	r3, r7, #29
    6b6a:	d000      	beq.n	6b6e <__aeabi_dsub+0x24a>
    6b6c:	e762      	b.n	6a34 <__aeabi_dsub+0x110>
    6b6e:	0763      	lsls	r3, r4, #29
    6b70:	08ff      	lsrs	r7, r7, #3
    6b72:	431f      	orrs	r7, r3
    6b74:	2501      	movs	r5, #1
    6b76:	4643      	mov	r3, r8
    6b78:	08e4      	lsrs	r4, r4, #3
    6b7a:	401d      	ands	r5, r3
    6b7c:	e793      	b.n	6aa6 <__aeabi_dsub+0x182>
    6b7e:	2d00      	cmp	r5, #0
    6b80:	d178      	bne.n	6c74 <__aeabi_dsub+0x350>
    6b82:	1c75      	adds	r5, r6, #1
    6b84:	056d      	lsls	r5, r5, #21
    6b86:	0d6d      	lsrs	r5, r5, #21
    6b88:	2d01      	cmp	r5, #1
    6b8a:	dc00      	bgt.n	6b8e <__aeabi_dsub+0x26a>
    6b8c:	e0f2      	b.n	6d74 <__aeabi_dsub+0x450>
    6b8e:	4650      	mov	r0, sl
    6b90:	1a80      	subs	r0, r0, r2
    6b92:	4582      	cmp	sl, r0
    6b94:	41bf      	sbcs	r7, r7
    6b96:	1a65      	subs	r5, r4, r1
    6b98:	427f      	negs	r7, r7
    6b9a:	1bed      	subs	r5, r5, r7
    6b9c:	4684      	mov	ip, r0
    6b9e:	0228      	lsls	r0, r5, #8
    6ba0:	d400      	bmi.n	6ba4 <__aeabi_dsub+0x280>
    6ba2:	e08c      	b.n	6cbe <__aeabi_dsub+0x39a>
    6ba4:	4650      	mov	r0, sl
    6ba6:	1a17      	subs	r7, r2, r0
    6ba8:	42ba      	cmp	r2, r7
    6baa:	4192      	sbcs	r2, r2
    6bac:	1b0c      	subs	r4, r1, r4
    6bae:	4255      	negs	r5, r2
    6bb0:	1b65      	subs	r5, r4, r5
    6bb2:	4698      	mov	r8, r3
    6bb4:	e714      	b.n	69e0 <__aeabi_dsub+0xbc>
    6bb6:	2501      	movs	r5, #1
    6bb8:	4643      	mov	r3, r8
    6bba:	2400      	movs	r4, #0
    6bbc:	401d      	ands	r5, r3
    6bbe:	2700      	movs	r7, #0
    6bc0:	e755      	b.n	6a6e <__aeabi_dsub+0x14a>
    6bc2:	4c2a      	ldr	r4, [pc, #168]	; (6c6c <__aeabi_dsub+0x348>)
    6bc4:	1af6      	subs	r6, r6, r3
    6bc6:	402c      	ands	r4, r5
    6bc8:	e732      	b.n	6a30 <__aeabi_dsub+0x10c>
    6bca:	003d      	movs	r5, r7
    6bcc:	3828      	subs	r0, #40	; 0x28
    6bce:	4085      	lsls	r5, r0
    6bd0:	2700      	movs	r7, #0
    6bd2:	e717      	b.n	6a04 <__aeabi_dsub+0xe0>
    6bd4:	0038      	movs	r0, r7
    6bd6:	f000 fa99 	bl	710c <__clzsi2>
    6bda:	3020      	adds	r0, #32
    6bdc:	e706      	b.n	69ec <__aeabi_dsub+0xc8>
    6bde:	430a      	orrs	r2, r1
    6be0:	0017      	movs	r7, r2
    6be2:	2100      	movs	r1, #0
    6be4:	1e7a      	subs	r2, r7, #1
    6be6:	4197      	sbcs	r7, r2
    6be8:	e6ee      	b.n	69c8 <__aeabi_dsub+0xa4>
    6bea:	2b00      	cmp	r3, #0
    6bec:	d000      	beq.n	6bf0 <__aeabi_dsub+0x2cc>
    6bee:	e0e5      	b.n	6dbc <__aeabi_dsub+0x498>
    6bf0:	1c73      	adds	r3, r6, #1
    6bf2:	469c      	mov	ip, r3
    6bf4:	055b      	lsls	r3, r3, #21
    6bf6:	0d5b      	lsrs	r3, r3, #21
    6bf8:	2b01      	cmp	r3, #1
    6bfa:	dc00      	bgt.n	6bfe <__aeabi_dsub+0x2da>
    6bfc:	e09f      	b.n	6d3e <__aeabi_dsub+0x41a>
    6bfe:	4b1a      	ldr	r3, [pc, #104]	; (6c68 <__aeabi_dsub+0x344>)
    6c00:	459c      	cmp	ip, r3
    6c02:	d100      	bne.n	6c06 <__aeabi_dsub+0x2e2>
    6c04:	e0c5      	b.n	6d92 <__aeabi_dsub+0x46e>
    6c06:	4452      	add	r2, sl
    6c08:	4552      	cmp	r2, sl
    6c0a:	4180      	sbcs	r0, r0
    6c0c:	1864      	adds	r4, r4, r1
    6c0e:	4240      	negs	r0, r0
    6c10:	1824      	adds	r4, r4, r0
    6c12:	07e7      	lsls	r7, r4, #31
    6c14:	0852      	lsrs	r2, r2, #1
    6c16:	4317      	orrs	r7, r2
    6c18:	0864      	lsrs	r4, r4, #1
    6c1a:	4666      	mov	r6, ip
    6c1c:	e708      	b.n	6a30 <__aeabi_dsub+0x10c>
    6c1e:	4812      	ldr	r0, [pc, #72]	; (6c68 <__aeabi_dsub+0x344>)
    6c20:	4285      	cmp	r5, r0
    6c22:	d100      	bne.n	6c26 <__aeabi_dsub+0x302>
    6c24:	e085      	b.n	6d32 <__aeabi_dsub+0x40e>
    6c26:	001d      	movs	r5, r3
    6c28:	e6bc      	b.n	69a4 <__aeabi_dsub+0x80>
    6c2a:	0029      	movs	r1, r5
    6c2c:	3e1f      	subs	r6, #31
    6c2e:	40f1      	lsrs	r1, r6
    6c30:	2b20      	cmp	r3, #32
    6c32:	d100      	bne.n	6c36 <__aeabi_dsub+0x312>
    6c34:	e07f      	b.n	6d36 <__aeabi_dsub+0x412>
    6c36:	2240      	movs	r2, #64	; 0x40
    6c38:	1ad3      	subs	r3, r2, r3
    6c3a:	409d      	lsls	r5, r3
    6c3c:	432f      	orrs	r7, r5
    6c3e:	1e7d      	subs	r5, r7, #1
    6c40:	41af      	sbcs	r7, r5
    6c42:	2400      	movs	r4, #0
    6c44:	430f      	orrs	r7, r1
    6c46:	2600      	movs	r6, #0
    6c48:	e78e      	b.n	6b68 <__aeabi_dsub+0x244>
    6c4a:	002b      	movs	r3, r5
    6c4c:	000f      	movs	r7, r1
    6c4e:	3b20      	subs	r3, #32
    6c50:	40df      	lsrs	r7, r3
    6c52:	2d20      	cmp	r5, #32
    6c54:	d071      	beq.n	6d3a <__aeabi_dsub+0x416>
    6c56:	2340      	movs	r3, #64	; 0x40
    6c58:	1b5d      	subs	r5, r3, r5
    6c5a:	40a9      	lsls	r1, r5
    6c5c:	430a      	orrs	r2, r1
    6c5e:	1e51      	subs	r1, r2, #1
    6c60:	418a      	sbcs	r2, r1
    6c62:	2100      	movs	r1, #0
    6c64:	4317      	orrs	r7, r2
    6c66:	e6af      	b.n	69c8 <__aeabi_dsub+0xa4>
    6c68:	000007ff 	.word	0x000007ff
    6c6c:	ff7fffff 	.word	0xff7fffff
    6c70:	800fffff 	.word	0x800fffff
    6c74:	2e00      	cmp	r6, #0
    6c76:	d03e      	beq.n	6cf6 <__aeabi_dsub+0x3d2>
    6c78:	4eb3      	ldr	r6, [pc, #716]	; (6f48 <__aeabi_dsub+0x624>)
    6c7a:	45b4      	cmp	ip, r6
    6c7c:	d045      	beq.n	6d0a <__aeabi_dsub+0x3e6>
    6c7e:	2680      	movs	r6, #128	; 0x80
    6c80:	0436      	lsls	r6, r6, #16
    6c82:	426d      	negs	r5, r5
    6c84:	4334      	orrs	r4, r6
    6c86:	2d38      	cmp	r5, #56	; 0x38
    6c88:	dd00      	ble.n	6c8c <__aeabi_dsub+0x368>
    6c8a:	e0a8      	b.n	6dde <__aeabi_dsub+0x4ba>
    6c8c:	2d1f      	cmp	r5, #31
    6c8e:	dd00      	ble.n	6c92 <__aeabi_dsub+0x36e>
    6c90:	e11f      	b.n	6ed2 <__aeabi_dsub+0x5ae>
    6c92:	2620      	movs	r6, #32
    6c94:	0027      	movs	r7, r4
    6c96:	4650      	mov	r0, sl
    6c98:	1b76      	subs	r6, r6, r5
    6c9a:	40b7      	lsls	r7, r6
    6c9c:	40e8      	lsrs	r0, r5
    6c9e:	4307      	orrs	r7, r0
    6ca0:	4650      	mov	r0, sl
    6ca2:	40b0      	lsls	r0, r6
    6ca4:	1e46      	subs	r6, r0, #1
    6ca6:	41b0      	sbcs	r0, r6
    6ca8:	40ec      	lsrs	r4, r5
    6caa:	4338      	orrs	r0, r7
    6cac:	1a17      	subs	r7, r2, r0
    6cae:	42ba      	cmp	r2, r7
    6cb0:	4192      	sbcs	r2, r2
    6cb2:	1b0c      	subs	r4, r1, r4
    6cb4:	4252      	negs	r2, r2
    6cb6:	1aa4      	subs	r4, r4, r2
    6cb8:	4666      	mov	r6, ip
    6cba:	4698      	mov	r8, r3
    6cbc:	e68b      	b.n	69d6 <__aeabi_dsub+0xb2>
    6cbe:	4664      	mov	r4, ip
    6cc0:	4667      	mov	r7, ip
    6cc2:	432c      	orrs	r4, r5
    6cc4:	d000      	beq.n	6cc8 <__aeabi_dsub+0x3a4>
    6cc6:	e68b      	b.n	69e0 <__aeabi_dsub+0xbc>
    6cc8:	2500      	movs	r5, #0
    6cca:	2600      	movs	r6, #0
    6ccc:	2700      	movs	r7, #0
    6cce:	e6ea      	b.n	6aa6 <__aeabi_dsub+0x182>
    6cd0:	001e      	movs	r6, r3
    6cd2:	e6ad      	b.n	6a30 <__aeabi_dsub+0x10c>
    6cd4:	2b1f      	cmp	r3, #31
    6cd6:	dc60      	bgt.n	6d9a <__aeabi_dsub+0x476>
    6cd8:	2720      	movs	r7, #32
    6cda:	1af8      	subs	r0, r7, r3
    6cdc:	000f      	movs	r7, r1
    6cde:	4684      	mov	ip, r0
    6ce0:	4087      	lsls	r7, r0
    6ce2:	0010      	movs	r0, r2
    6ce4:	40d8      	lsrs	r0, r3
    6ce6:	4307      	orrs	r7, r0
    6ce8:	4660      	mov	r0, ip
    6cea:	4082      	lsls	r2, r0
    6cec:	1e50      	subs	r0, r2, #1
    6cee:	4182      	sbcs	r2, r0
    6cf0:	40d9      	lsrs	r1, r3
    6cf2:	4317      	orrs	r7, r2
    6cf4:	e6f5      	b.n	6ae2 <__aeabi_dsub+0x1be>
    6cf6:	0026      	movs	r6, r4
    6cf8:	4650      	mov	r0, sl
    6cfa:	4306      	orrs	r6, r0
    6cfc:	d005      	beq.n	6d0a <__aeabi_dsub+0x3e6>
    6cfe:	43ed      	mvns	r5, r5
    6d00:	2d00      	cmp	r5, #0
    6d02:	d0d3      	beq.n	6cac <__aeabi_dsub+0x388>
    6d04:	4e90      	ldr	r6, [pc, #576]	; (6f48 <__aeabi_dsub+0x624>)
    6d06:	45b4      	cmp	ip, r6
    6d08:	d1bd      	bne.n	6c86 <__aeabi_dsub+0x362>
    6d0a:	000c      	movs	r4, r1
    6d0c:	0017      	movs	r7, r2
    6d0e:	4666      	mov	r6, ip
    6d10:	4698      	mov	r8, r3
    6d12:	e68d      	b.n	6a30 <__aeabi_dsub+0x10c>
    6d14:	488c      	ldr	r0, [pc, #560]	; (6f48 <__aeabi_dsub+0x624>)
    6d16:	4283      	cmp	r3, r0
    6d18:	d00b      	beq.n	6d32 <__aeabi_dsub+0x40e>
    6d1a:	4663      	mov	r3, ip
    6d1c:	e6d9      	b.n	6ad2 <__aeabi_dsub+0x1ae>
    6d1e:	2d00      	cmp	r5, #0
    6d20:	d000      	beq.n	6d24 <__aeabi_dsub+0x400>
    6d22:	e096      	b.n	6e52 <__aeabi_dsub+0x52e>
    6d24:	0008      	movs	r0, r1
    6d26:	4310      	orrs	r0, r2
    6d28:	d100      	bne.n	6d2c <__aeabi_dsub+0x408>
    6d2a:	e0e2      	b.n	6ef2 <__aeabi_dsub+0x5ce>
    6d2c:	000c      	movs	r4, r1
    6d2e:	0017      	movs	r7, r2
    6d30:	4698      	mov	r8, r3
    6d32:	4e85      	ldr	r6, [pc, #532]	; (6f48 <__aeabi_dsub+0x624>)
    6d34:	e67c      	b.n	6a30 <__aeabi_dsub+0x10c>
    6d36:	2500      	movs	r5, #0
    6d38:	e780      	b.n	6c3c <__aeabi_dsub+0x318>
    6d3a:	2100      	movs	r1, #0
    6d3c:	e78e      	b.n	6c5c <__aeabi_dsub+0x338>
    6d3e:	0023      	movs	r3, r4
    6d40:	4650      	mov	r0, sl
    6d42:	4303      	orrs	r3, r0
    6d44:	2e00      	cmp	r6, #0
    6d46:	d000      	beq.n	6d4a <__aeabi_dsub+0x426>
    6d48:	e0a8      	b.n	6e9c <__aeabi_dsub+0x578>
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d100      	bne.n	6d50 <__aeabi_dsub+0x42c>
    6d4e:	e0de      	b.n	6f0e <__aeabi_dsub+0x5ea>
    6d50:	000b      	movs	r3, r1
    6d52:	4313      	orrs	r3, r2
    6d54:	d100      	bne.n	6d58 <__aeabi_dsub+0x434>
    6d56:	e66b      	b.n	6a30 <__aeabi_dsub+0x10c>
    6d58:	4452      	add	r2, sl
    6d5a:	4552      	cmp	r2, sl
    6d5c:	4180      	sbcs	r0, r0
    6d5e:	1864      	adds	r4, r4, r1
    6d60:	4240      	negs	r0, r0
    6d62:	1824      	adds	r4, r4, r0
    6d64:	0017      	movs	r7, r2
    6d66:	0223      	lsls	r3, r4, #8
    6d68:	d400      	bmi.n	6d6c <__aeabi_dsub+0x448>
    6d6a:	e6fd      	b.n	6b68 <__aeabi_dsub+0x244>
    6d6c:	4b77      	ldr	r3, [pc, #476]	; (6f4c <__aeabi_dsub+0x628>)
    6d6e:	4666      	mov	r6, ip
    6d70:	401c      	ands	r4, r3
    6d72:	e65d      	b.n	6a30 <__aeabi_dsub+0x10c>
    6d74:	0025      	movs	r5, r4
    6d76:	4650      	mov	r0, sl
    6d78:	4305      	orrs	r5, r0
    6d7a:	2e00      	cmp	r6, #0
    6d7c:	d1cf      	bne.n	6d1e <__aeabi_dsub+0x3fa>
    6d7e:	2d00      	cmp	r5, #0
    6d80:	d14f      	bne.n	6e22 <__aeabi_dsub+0x4fe>
    6d82:	000c      	movs	r4, r1
    6d84:	4314      	orrs	r4, r2
    6d86:	d100      	bne.n	6d8a <__aeabi_dsub+0x466>
    6d88:	e0a0      	b.n	6ecc <__aeabi_dsub+0x5a8>
    6d8a:	000c      	movs	r4, r1
    6d8c:	0017      	movs	r7, r2
    6d8e:	4698      	mov	r8, r3
    6d90:	e64e      	b.n	6a30 <__aeabi_dsub+0x10c>
    6d92:	4666      	mov	r6, ip
    6d94:	2400      	movs	r4, #0
    6d96:	2700      	movs	r7, #0
    6d98:	e685      	b.n	6aa6 <__aeabi_dsub+0x182>
    6d9a:	001f      	movs	r7, r3
    6d9c:	0008      	movs	r0, r1
    6d9e:	3f20      	subs	r7, #32
    6da0:	40f8      	lsrs	r0, r7
    6da2:	0007      	movs	r7, r0
    6da4:	2b20      	cmp	r3, #32
    6da6:	d100      	bne.n	6daa <__aeabi_dsub+0x486>
    6da8:	e08e      	b.n	6ec8 <__aeabi_dsub+0x5a4>
    6daa:	2040      	movs	r0, #64	; 0x40
    6dac:	1ac3      	subs	r3, r0, r3
    6dae:	4099      	lsls	r1, r3
    6db0:	430a      	orrs	r2, r1
    6db2:	1e51      	subs	r1, r2, #1
    6db4:	418a      	sbcs	r2, r1
    6db6:	2100      	movs	r1, #0
    6db8:	4317      	orrs	r7, r2
    6dba:	e692      	b.n	6ae2 <__aeabi_dsub+0x1be>
    6dbc:	2e00      	cmp	r6, #0
    6dbe:	d114      	bne.n	6dea <__aeabi_dsub+0x4c6>
    6dc0:	0026      	movs	r6, r4
    6dc2:	4650      	mov	r0, sl
    6dc4:	4306      	orrs	r6, r0
    6dc6:	d062      	beq.n	6e8e <__aeabi_dsub+0x56a>
    6dc8:	43db      	mvns	r3, r3
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d15c      	bne.n	6e88 <__aeabi_dsub+0x564>
    6dce:	1887      	adds	r7, r0, r2
    6dd0:	4297      	cmp	r7, r2
    6dd2:	4192      	sbcs	r2, r2
    6dd4:	1864      	adds	r4, r4, r1
    6dd6:	4252      	negs	r2, r2
    6dd8:	18a4      	adds	r4, r4, r2
    6dda:	4666      	mov	r6, ip
    6ddc:	e687      	b.n	6aee <__aeabi_dsub+0x1ca>
    6dde:	4650      	mov	r0, sl
    6de0:	4320      	orrs	r0, r4
    6de2:	1e44      	subs	r4, r0, #1
    6de4:	41a0      	sbcs	r0, r4
    6de6:	2400      	movs	r4, #0
    6de8:	e760      	b.n	6cac <__aeabi_dsub+0x388>
    6dea:	4e57      	ldr	r6, [pc, #348]	; (6f48 <__aeabi_dsub+0x624>)
    6dec:	45b4      	cmp	ip, r6
    6dee:	d04e      	beq.n	6e8e <__aeabi_dsub+0x56a>
    6df0:	2680      	movs	r6, #128	; 0x80
    6df2:	0436      	lsls	r6, r6, #16
    6df4:	425b      	negs	r3, r3
    6df6:	4334      	orrs	r4, r6
    6df8:	2b38      	cmp	r3, #56	; 0x38
    6dfa:	dd00      	ble.n	6dfe <__aeabi_dsub+0x4da>
    6dfc:	e07f      	b.n	6efe <__aeabi_dsub+0x5da>
    6dfe:	2b1f      	cmp	r3, #31
    6e00:	dd00      	ble.n	6e04 <__aeabi_dsub+0x4e0>
    6e02:	e08b      	b.n	6f1c <__aeabi_dsub+0x5f8>
    6e04:	2620      	movs	r6, #32
    6e06:	0027      	movs	r7, r4
    6e08:	4650      	mov	r0, sl
    6e0a:	1af6      	subs	r6, r6, r3
    6e0c:	40b7      	lsls	r7, r6
    6e0e:	40d8      	lsrs	r0, r3
    6e10:	4307      	orrs	r7, r0
    6e12:	4650      	mov	r0, sl
    6e14:	40b0      	lsls	r0, r6
    6e16:	1e46      	subs	r6, r0, #1
    6e18:	41b0      	sbcs	r0, r6
    6e1a:	4307      	orrs	r7, r0
    6e1c:	40dc      	lsrs	r4, r3
    6e1e:	18bf      	adds	r7, r7, r2
    6e20:	e7d6      	b.n	6dd0 <__aeabi_dsub+0x4ac>
    6e22:	000d      	movs	r5, r1
    6e24:	4315      	orrs	r5, r2
    6e26:	d100      	bne.n	6e2a <__aeabi_dsub+0x506>
    6e28:	e602      	b.n	6a30 <__aeabi_dsub+0x10c>
    6e2a:	4650      	mov	r0, sl
    6e2c:	1a80      	subs	r0, r0, r2
    6e2e:	4582      	cmp	sl, r0
    6e30:	41bf      	sbcs	r7, r7
    6e32:	1a65      	subs	r5, r4, r1
    6e34:	427f      	negs	r7, r7
    6e36:	1bed      	subs	r5, r5, r7
    6e38:	4684      	mov	ip, r0
    6e3a:	0228      	lsls	r0, r5, #8
    6e3c:	d400      	bmi.n	6e40 <__aeabi_dsub+0x51c>
    6e3e:	e68d      	b.n	6b5c <__aeabi_dsub+0x238>
    6e40:	4650      	mov	r0, sl
    6e42:	1a17      	subs	r7, r2, r0
    6e44:	42ba      	cmp	r2, r7
    6e46:	4192      	sbcs	r2, r2
    6e48:	1b0c      	subs	r4, r1, r4
    6e4a:	4252      	negs	r2, r2
    6e4c:	1aa4      	subs	r4, r4, r2
    6e4e:	4698      	mov	r8, r3
    6e50:	e5ee      	b.n	6a30 <__aeabi_dsub+0x10c>
    6e52:	000d      	movs	r5, r1
    6e54:	4315      	orrs	r5, r2
    6e56:	d100      	bne.n	6e5a <__aeabi_dsub+0x536>
    6e58:	e76b      	b.n	6d32 <__aeabi_dsub+0x40e>
    6e5a:	4650      	mov	r0, sl
    6e5c:	0767      	lsls	r7, r4, #29
    6e5e:	08c0      	lsrs	r0, r0, #3
    6e60:	4307      	orrs	r7, r0
    6e62:	2080      	movs	r0, #128	; 0x80
    6e64:	08e4      	lsrs	r4, r4, #3
    6e66:	0300      	lsls	r0, r0, #12
    6e68:	4204      	tst	r4, r0
    6e6a:	d007      	beq.n	6e7c <__aeabi_dsub+0x558>
    6e6c:	08cd      	lsrs	r5, r1, #3
    6e6e:	4205      	tst	r5, r0
    6e70:	d104      	bne.n	6e7c <__aeabi_dsub+0x558>
    6e72:	002c      	movs	r4, r5
    6e74:	4698      	mov	r8, r3
    6e76:	08d7      	lsrs	r7, r2, #3
    6e78:	0749      	lsls	r1, r1, #29
    6e7a:	430f      	orrs	r7, r1
    6e7c:	0f7b      	lsrs	r3, r7, #29
    6e7e:	00e4      	lsls	r4, r4, #3
    6e80:	431c      	orrs	r4, r3
    6e82:	00ff      	lsls	r7, r7, #3
    6e84:	4e30      	ldr	r6, [pc, #192]	; (6f48 <__aeabi_dsub+0x624>)
    6e86:	e5d3      	b.n	6a30 <__aeabi_dsub+0x10c>
    6e88:	4e2f      	ldr	r6, [pc, #188]	; (6f48 <__aeabi_dsub+0x624>)
    6e8a:	45b4      	cmp	ip, r6
    6e8c:	d1b4      	bne.n	6df8 <__aeabi_dsub+0x4d4>
    6e8e:	000c      	movs	r4, r1
    6e90:	0017      	movs	r7, r2
    6e92:	4666      	mov	r6, ip
    6e94:	e5cc      	b.n	6a30 <__aeabi_dsub+0x10c>
    6e96:	2700      	movs	r7, #0
    6e98:	2400      	movs	r4, #0
    6e9a:	e5e8      	b.n	6a6e <__aeabi_dsub+0x14a>
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d039      	beq.n	6f14 <__aeabi_dsub+0x5f0>
    6ea0:	000b      	movs	r3, r1
    6ea2:	4313      	orrs	r3, r2
    6ea4:	d100      	bne.n	6ea8 <__aeabi_dsub+0x584>
    6ea6:	e744      	b.n	6d32 <__aeabi_dsub+0x40e>
    6ea8:	08c0      	lsrs	r0, r0, #3
    6eaa:	0767      	lsls	r7, r4, #29
    6eac:	4307      	orrs	r7, r0
    6eae:	2080      	movs	r0, #128	; 0x80
    6eb0:	08e4      	lsrs	r4, r4, #3
    6eb2:	0300      	lsls	r0, r0, #12
    6eb4:	4204      	tst	r4, r0
    6eb6:	d0e1      	beq.n	6e7c <__aeabi_dsub+0x558>
    6eb8:	08cb      	lsrs	r3, r1, #3
    6eba:	4203      	tst	r3, r0
    6ebc:	d1de      	bne.n	6e7c <__aeabi_dsub+0x558>
    6ebe:	08d7      	lsrs	r7, r2, #3
    6ec0:	0749      	lsls	r1, r1, #29
    6ec2:	430f      	orrs	r7, r1
    6ec4:	001c      	movs	r4, r3
    6ec6:	e7d9      	b.n	6e7c <__aeabi_dsub+0x558>
    6ec8:	2100      	movs	r1, #0
    6eca:	e771      	b.n	6db0 <__aeabi_dsub+0x48c>
    6ecc:	2500      	movs	r5, #0
    6ece:	2700      	movs	r7, #0
    6ed0:	e5e9      	b.n	6aa6 <__aeabi_dsub+0x182>
    6ed2:	002e      	movs	r6, r5
    6ed4:	0027      	movs	r7, r4
    6ed6:	3e20      	subs	r6, #32
    6ed8:	40f7      	lsrs	r7, r6
    6eda:	2d20      	cmp	r5, #32
    6edc:	d02f      	beq.n	6f3e <__aeabi_dsub+0x61a>
    6ede:	2640      	movs	r6, #64	; 0x40
    6ee0:	1b75      	subs	r5, r6, r5
    6ee2:	40ac      	lsls	r4, r5
    6ee4:	4650      	mov	r0, sl
    6ee6:	4320      	orrs	r0, r4
    6ee8:	1e44      	subs	r4, r0, #1
    6eea:	41a0      	sbcs	r0, r4
    6eec:	2400      	movs	r4, #0
    6eee:	4338      	orrs	r0, r7
    6ef0:	e6dc      	b.n	6cac <__aeabi_dsub+0x388>
    6ef2:	2480      	movs	r4, #128	; 0x80
    6ef4:	2500      	movs	r5, #0
    6ef6:	0324      	lsls	r4, r4, #12
    6ef8:	4e13      	ldr	r6, [pc, #76]	; (6f48 <__aeabi_dsub+0x624>)
    6efa:	2700      	movs	r7, #0
    6efc:	e5d3      	b.n	6aa6 <__aeabi_dsub+0x182>
    6efe:	4650      	mov	r0, sl
    6f00:	4320      	orrs	r0, r4
    6f02:	0007      	movs	r7, r0
    6f04:	1e78      	subs	r0, r7, #1
    6f06:	4187      	sbcs	r7, r0
    6f08:	2400      	movs	r4, #0
    6f0a:	18bf      	adds	r7, r7, r2
    6f0c:	e760      	b.n	6dd0 <__aeabi_dsub+0x4ac>
    6f0e:	000c      	movs	r4, r1
    6f10:	0017      	movs	r7, r2
    6f12:	e58d      	b.n	6a30 <__aeabi_dsub+0x10c>
    6f14:	000c      	movs	r4, r1
    6f16:	0017      	movs	r7, r2
    6f18:	4e0b      	ldr	r6, [pc, #44]	; (6f48 <__aeabi_dsub+0x624>)
    6f1a:	e589      	b.n	6a30 <__aeabi_dsub+0x10c>
    6f1c:	001e      	movs	r6, r3
    6f1e:	0027      	movs	r7, r4
    6f20:	3e20      	subs	r6, #32
    6f22:	40f7      	lsrs	r7, r6
    6f24:	2b20      	cmp	r3, #32
    6f26:	d00c      	beq.n	6f42 <__aeabi_dsub+0x61e>
    6f28:	2640      	movs	r6, #64	; 0x40
    6f2a:	1af3      	subs	r3, r6, r3
    6f2c:	409c      	lsls	r4, r3
    6f2e:	4650      	mov	r0, sl
    6f30:	4320      	orrs	r0, r4
    6f32:	1e44      	subs	r4, r0, #1
    6f34:	41a0      	sbcs	r0, r4
    6f36:	4307      	orrs	r7, r0
    6f38:	2400      	movs	r4, #0
    6f3a:	18bf      	adds	r7, r7, r2
    6f3c:	e748      	b.n	6dd0 <__aeabi_dsub+0x4ac>
    6f3e:	2400      	movs	r4, #0
    6f40:	e7d0      	b.n	6ee4 <__aeabi_dsub+0x5c0>
    6f42:	2400      	movs	r4, #0
    6f44:	e7f3      	b.n	6f2e <__aeabi_dsub+0x60a>
    6f46:	46c0      	nop			; (mov r8, r8)
    6f48:	000007ff 	.word	0x000007ff
    6f4c:	ff7fffff 	.word	0xff7fffff

00006f50 <__aeabi_dcmpun>:
    6f50:	b570      	push	{r4, r5, r6, lr}
    6f52:	4e0e      	ldr	r6, [pc, #56]	; (6f8c <__aeabi_dcmpun+0x3c>)
    6f54:	030d      	lsls	r5, r1, #12
    6f56:	031c      	lsls	r4, r3, #12
    6f58:	0049      	lsls	r1, r1, #1
    6f5a:	005b      	lsls	r3, r3, #1
    6f5c:	0b2d      	lsrs	r5, r5, #12
    6f5e:	0d49      	lsrs	r1, r1, #21
    6f60:	0b24      	lsrs	r4, r4, #12
    6f62:	0d5b      	lsrs	r3, r3, #21
    6f64:	42b1      	cmp	r1, r6
    6f66:	d004      	beq.n	6f72 <__aeabi_dcmpun+0x22>
    6f68:	4908      	ldr	r1, [pc, #32]	; (6f8c <__aeabi_dcmpun+0x3c>)
    6f6a:	2000      	movs	r0, #0
    6f6c:	428b      	cmp	r3, r1
    6f6e:	d008      	beq.n	6f82 <__aeabi_dcmpun+0x32>
    6f70:	bd70      	pop	{r4, r5, r6, pc}
    6f72:	4305      	orrs	r5, r0
    6f74:	2001      	movs	r0, #1
    6f76:	2d00      	cmp	r5, #0
    6f78:	d1fa      	bne.n	6f70 <__aeabi_dcmpun+0x20>
    6f7a:	4904      	ldr	r1, [pc, #16]	; (6f8c <__aeabi_dcmpun+0x3c>)
    6f7c:	2000      	movs	r0, #0
    6f7e:	428b      	cmp	r3, r1
    6f80:	d1f6      	bne.n	6f70 <__aeabi_dcmpun+0x20>
    6f82:	4314      	orrs	r4, r2
    6f84:	0020      	movs	r0, r4
    6f86:	1e44      	subs	r4, r0, #1
    6f88:	41a0      	sbcs	r0, r4
    6f8a:	e7f1      	b.n	6f70 <__aeabi_dcmpun+0x20>
    6f8c:	000007ff 	.word	0x000007ff

00006f90 <__aeabi_d2iz>:
    6f90:	b530      	push	{r4, r5, lr}
    6f92:	4d13      	ldr	r5, [pc, #76]	; (6fe0 <__aeabi_d2iz+0x50>)
    6f94:	030a      	lsls	r2, r1, #12
    6f96:	004b      	lsls	r3, r1, #1
    6f98:	0b12      	lsrs	r2, r2, #12
    6f9a:	0d5b      	lsrs	r3, r3, #21
    6f9c:	0fc9      	lsrs	r1, r1, #31
    6f9e:	2400      	movs	r4, #0
    6fa0:	42ab      	cmp	r3, r5
    6fa2:	dd10      	ble.n	6fc6 <__aeabi_d2iz+0x36>
    6fa4:	4c0f      	ldr	r4, [pc, #60]	; (6fe4 <__aeabi_d2iz+0x54>)
    6fa6:	42a3      	cmp	r3, r4
    6fa8:	dc0f      	bgt.n	6fca <__aeabi_d2iz+0x3a>
    6faa:	2480      	movs	r4, #128	; 0x80
    6fac:	4d0e      	ldr	r5, [pc, #56]	; (6fe8 <__aeabi_d2iz+0x58>)
    6fae:	0364      	lsls	r4, r4, #13
    6fb0:	4322      	orrs	r2, r4
    6fb2:	1aed      	subs	r5, r5, r3
    6fb4:	2d1f      	cmp	r5, #31
    6fb6:	dd0b      	ble.n	6fd0 <__aeabi_d2iz+0x40>
    6fb8:	480c      	ldr	r0, [pc, #48]	; (6fec <__aeabi_d2iz+0x5c>)
    6fba:	1ac3      	subs	r3, r0, r3
    6fbc:	40da      	lsrs	r2, r3
    6fbe:	4254      	negs	r4, r2
    6fc0:	2900      	cmp	r1, #0
    6fc2:	d100      	bne.n	6fc6 <__aeabi_d2iz+0x36>
    6fc4:	0014      	movs	r4, r2
    6fc6:	0020      	movs	r0, r4
    6fc8:	bd30      	pop	{r4, r5, pc}
    6fca:	4b09      	ldr	r3, [pc, #36]	; (6ff0 <__aeabi_d2iz+0x60>)
    6fcc:	18cc      	adds	r4, r1, r3
    6fce:	e7fa      	b.n	6fc6 <__aeabi_d2iz+0x36>
    6fd0:	4c08      	ldr	r4, [pc, #32]	; (6ff4 <__aeabi_d2iz+0x64>)
    6fd2:	40e8      	lsrs	r0, r5
    6fd4:	46a4      	mov	ip, r4
    6fd6:	4463      	add	r3, ip
    6fd8:	409a      	lsls	r2, r3
    6fda:	4302      	orrs	r2, r0
    6fdc:	e7ef      	b.n	6fbe <__aeabi_d2iz+0x2e>
    6fde:	46c0      	nop			; (mov r8, r8)
    6fe0:	000003fe 	.word	0x000003fe
    6fe4:	0000041d 	.word	0x0000041d
    6fe8:	00000433 	.word	0x00000433
    6fec:	00000413 	.word	0x00000413
    6ff0:	7fffffff 	.word	0x7fffffff
    6ff4:	fffffbed 	.word	0xfffffbed

00006ff8 <__aeabi_ui2d>:
    6ff8:	b510      	push	{r4, lr}
    6ffa:	1e04      	subs	r4, r0, #0
    6ffc:	d028      	beq.n	7050 <__aeabi_ui2d+0x58>
    6ffe:	f000 f885 	bl	710c <__clzsi2>
    7002:	4b15      	ldr	r3, [pc, #84]	; (7058 <__aeabi_ui2d+0x60>)
    7004:	4a15      	ldr	r2, [pc, #84]	; (705c <__aeabi_ui2d+0x64>)
    7006:	1a1b      	subs	r3, r3, r0
    7008:	1ad2      	subs	r2, r2, r3
    700a:	2a1f      	cmp	r2, #31
    700c:	dd15      	ble.n	703a <__aeabi_ui2d+0x42>
    700e:	4a14      	ldr	r2, [pc, #80]	; (7060 <__aeabi_ui2d+0x68>)
    7010:	1ad2      	subs	r2, r2, r3
    7012:	4094      	lsls	r4, r2
    7014:	2200      	movs	r2, #0
    7016:	0324      	lsls	r4, r4, #12
    7018:	055b      	lsls	r3, r3, #21
    701a:	0b24      	lsrs	r4, r4, #12
    701c:	0d5b      	lsrs	r3, r3, #21
    701e:	2100      	movs	r1, #0
    7020:	0010      	movs	r0, r2
    7022:	0324      	lsls	r4, r4, #12
    7024:	0d0a      	lsrs	r2, r1, #20
    7026:	0b24      	lsrs	r4, r4, #12
    7028:	0512      	lsls	r2, r2, #20
    702a:	4322      	orrs	r2, r4
    702c:	4c0d      	ldr	r4, [pc, #52]	; (7064 <__aeabi_ui2d+0x6c>)
    702e:	051b      	lsls	r3, r3, #20
    7030:	4022      	ands	r2, r4
    7032:	4313      	orrs	r3, r2
    7034:	005b      	lsls	r3, r3, #1
    7036:	0859      	lsrs	r1, r3, #1
    7038:	bd10      	pop	{r4, pc}
    703a:	0021      	movs	r1, r4
    703c:	4091      	lsls	r1, r2
    703e:	000a      	movs	r2, r1
    7040:	210b      	movs	r1, #11
    7042:	1a08      	subs	r0, r1, r0
    7044:	40c4      	lsrs	r4, r0
    7046:	055b      	lsls	r3, r3, #21
    7048:	0324      	lsls	r4, r4, #12
    704a:	0b24      	lsrs	r4, r4, #12
    704c:	0d5b      	lsrs	r3, r3, #21
    704e:	e7e6      	b.n	701e <__aeabi_ui2d+0x26>
    7050:	2300      	movs	r3, #0
    7052:	2400      	movs	r4, #0
    7054:	2200      	movs	r2, #0
    7056:	e7e2      	b.n	701e <__aeabi_ui2d+0x26>
    7058:	0000041e 	.word	0x0000041e
    705c:	00000433 	.word	0x00000433
    7060:	00000413 	.word	0x00000413
    7064:	800fffff 	.word	0x800fffff

00007068 <__aeabi_f2d>:
    7068:	0041      	lsls	r1, r0, #1
    706a:	0e09      	lsrs	r1, r1, #24
    706c:	1c4b      	adds	r3, r1, #1
    706e:	b570      	push	{r4, r5, r6, lr}
    7070:	b2db      	uxtb	r3, r3
    7072:	0246      	lsls	r6, r0, #9
    7074:	0a75      	lsrs	r5, r6, #9
    7076:	0fc4      	lsrs	r4, r0, #31
    7078:	2b01      	cmp	r3, #1
    707a:	dd14      	ble.n	70a6 <__aeabi_f2d+0x3e>
    707c:	23e0      	movs	r3, #224	; 0xe0
    707e:	009b      	lsls	r3, r3, #2
    7080:	076d      	lsls	r5, r5, #29
    7082:	0b36      	lsrs	r6, r6, #12
    7084:	18cb      	adds	r3, r1, r3
    7086:	2100      	movs	r1, #0
    7088:	0d0a      	lsrs	r2, r1, #20
    708a:	0028      	movs	r0, r5
    708c:	0512      	lsls	r2, r2, #20
    708e:	4d1c      	ldr	r5, [pc, #112]	; (7100 <__aeabi_f2d+0x98>)
    7090:	4332      	orrs	r2, r6
    7092:	055b      	lsls	r3, r3, #21
    7094:	402a      	ands	r2, r5
    7096:	085b      	lsrs	r3, r3, #1
    7098:	4313      	orrs	r3, r2
    709a:	005b      	lsls	r3, r3, #1
    709c:	07e4      	lsls	r4, r4, #31
    709e:	085b      	lsrs	r3, r3, #1
    70a0:	4323      	orrs	r3, r4
    70a2:	0019      	movs	r1, r3
    70a4:	bd70      	pop	{r4, r5, r6, pc}
    70a6:	2900      	cmp	r1, #0
    70a8:	d114      	bne.n	70d4 <__aeabi_f2d+0x6c>
    70aa:	2d00      	cmp	r5, #0
    70ac:	d01e      	beq.n	70ec <__aeabi_f2d+0x84>
    70ae:	0028      	movs	r0, r5
    70b0:	f000 f82c 	bl	710c <__clzsi2>
    70b4:	280a      	cmp	r0, #10
    70b6:	dc1c      	bgt.n	70f2 <__aeabi_f2d+0x8a>
    70b8:	230b      	movs	r3, #11
    70ba:	002a      	movs	r2, r5
    70bc:	1a1b      	subs	r3, r3, r0
    70be:	40da      	lsrs	r2, r3
    70c0:	0003      	movs	r3, r0
    70c2:	3315      	adds	r3, #21
    70c4:	409d      	lsls	r5, r3
    70c6:	4b0f      	ldr	r3, [pc, #60]	; (7104 <__aeabi_f2d+0x9c>)
    70c8:	0312      	lsls	r2, r2, #12
    70ca:	1a1b      	subs	r3, r3, r0
    70cc:	055b      	lsls	r3, r3, #21
    70ce:	0b16      	lsrs	r6, r2, #12
    70d0:	0d5b      	lsrs	r3, r3, #21
    70d2:	e7d8      	b.n	7086 <__aeabi_f2d+0x1e>
    70d4:	2d00      	cmp	r5, #0
    70d6:	d006      	beq.n	70e6 <__aeabi_f2d+0x7e>
    70d8:	0b32      	lsrs	r2, r6, #12
    70da:	2680      	movs	r6, #128	; 0x80
    70dc:	0336      	lsls	r6, r6, #12
    70de:	076d      	lsls	r5, r5, #29
    70e0:	4316      	orrs	r6, r2
    70e2:	4b09      	ldr	r3, [pc, #36]	; (7108 <__aeabi_f2d+0xa0>)
    70e4:	e7cf      	b.n	7086 <__aeabi_f2d+0x1e>
    70e6:	4b08      	ldr	r3, [pc, #32]	; (7108 <__aeabi_f2d+0xa0>)
    70e8:	2600      	movs	r6, #0
    70ea:	e7cc      	b.n	7086 <__aeabi_f2d+0x1e>
    70ec:	2300      	movs	r3, #0
    70ee:	2600      	movs	r6, #0
    70f0:	e7c9      	b.n	7086 <__aeabi_f2d+0x1e>
    70f2:	0003      	movs	r3, r0
    70f4:	002a      	movs	r2, r5
    70f6:	3b0b      	subs	r3, #11
    70f8:	409a      	lsls	r2, r3
    70fa:	2500      	movs	r5, #0
    70fc:	e7e3      	b.n	70c6 <__aeabi_f2d+0x5e>
    70fe:	46c0      	nop			; (mov r8, r8)
    7100:	800fffff 	.word	0x800fffff
    7104:	00000389 	.word	0x00000389
    7108:	000007ff 	.word	0x000007ff

0000710c <__clzsi2>:
    710c:	211c      	movs	r1, #28
    710e:	2301      	movs	r3, #1
    7110:	041b      	lsls	r3, r3, #16
    7112:	4298      	cmp	r0, r3
    7114:	d301      	bcc.n	711a <__clzsi2+0xe>
    7116:	0c00      	lsrs	r0, r0, #16
    7118:	3910      	subs	r1, #16
    711a:	0a1b      	lsrs	r3, r3, #8
    711c:	4298      	cmp	r0, r3
    711e:	d301      	bcc.n	7124 <__clzsi2+0x18>
    7120:	0a00      	lsrs	r0, r0, #8
    7122:	3908      	subs	r1, #8
    7124:	091b      	lsrs	r3, r3, #4
    7126:	4298      	cmp	r0, r3
    7128:	d301      	bcc.n	712e <__clzsi2+0x22>
    712a:	0900      	lsrs	r0, r0, #4
    712c:	3904      	subs	r1, #4
    712e:	a202      	add	r2, pc, #8	; (adr r2, 7138 <__clzsi2+0x2c>)
    7130:	5c10      	ldrb	r0, [r2, r0]
    7132:	1840      	adds	r0, r0, r1
    7134:	4770      	bx	lr
    7136:	46c0      	nop			; (mov r8, r8)
    7138:	02020304 	.word	0x02020304
    713c:	01010101 	.word	0x01010101
	...

00007148 <__ctzsi2>:
    7148:	4241      	negs	r1, r0
    714a:	4008      	ands	r0, r1
    714c:	211c      	movs	r1, #28
    714e:	2301      	movs	r3, #1
    7150:	041b      	lsls	r3, r3, #16
    7152:	4298      	cmp	r0, r3
    7154:	d301      	bcc.n	715a <__ctzsi2+0x12>
    7156:	0c00      	lsrs	r0, r0, #16
    7158:	3910      	subs	r1, #16
    715a:	0a1b      	lsrs	r3, r3, #8
    715c:	4298      	cmp	r0, r3
    715e:	d301      	bcc.n	7164 <__ctzsi2+0x1c>
    7160:	0a00      	lsrs	r0, r0, #8
    7162:	3908      	subs	r1, #8
    7164:	091b      	lsrs	r3, r3, #4
    7166:	4298      	cmp	r0, r3
    7168:	d301      	bcc.n	716e <__ctzsi2+0x26>
    716a:	0900      	lsrs	r0, r0, #4
    716c:	3904      	subs	r1, #4
    716e:	a202      	add	r2, pc, #8	; (adr r2, 7178 <__ctzsi2+0x30>)
    7170:	5c10      	ldrb	r0, [r2, r0]
    7172:	1a40      	subs	r0, r0, r1
    7174:	4770      	bx	lr
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	1d1d1c1b 	.word	0x1d1d1c1b
    717c:	1e1e1e1e 	.word	0x1e1e1e1e
    7180:	1f1f1f1f 	.word	0x1f1f1f1f
    7184:	1f1f1f1f 	.word	0x1f1f1f1f

00007188 <__cxa_atexit>:
    7188:	b510      	push	{r4, lr}
    718a:	0013      	movs	r3, r2
    718c:	000a      	movs	r2, r1
    718e:	0001      	movs	r1, r0
    7190:	2002      	movs	r0, #2
    7192:	f000 f8e3 	bl	735c <__register_exitproc>
    7196:	bd10      	pop	{r4, pc}

00007198 <__libc_init_array>:
    7198:	b570      	push	{r4, r5, r6, lr}
    719a:	4e0d      	ldr	r6, [pc, #52]	; (71d0 <__libc_init_array+0x38>)
    719c:	4d0d      	ldr	r5, [pc, #52]	; (71d4 <__libc_init_array+0x3c>)
    719e:	2400      	movs	r4, #0
    71a0:	1bad      	subs	r5, r5, r6
    71a2:	10ad      	asrs	r5, r5, #2
    71a4:	d005      	beq.n	71b2 <__libc_init_array+0x1a>
    71a6:	00a3      	lsls	r3, r4, #2
    71a8:	58f3      	ldr	r3, [r6, r3]
    71aa:	3401      	adds	r4, #1
    71ac:	4798      	blx	r3
    71ae:	42a5      	cmp	r5, r4
    71b0:	d1f9      	bne.n	71a6 <__libc_init_array+0xe>
    71b2:	f000 fb71 	bl	7898 <_init>
    71b6:	4e08      	ldr	r6, [pc, #32]	; (71d8 <__libc_init_array+0x40>)
    71b8:	4d08      	ldr	r5, [pc, #32]	; (71dc <__libc_init_array+0x44>)
    71ba:	2400      	movs	r4, #0
    71bc:	1bad      	subs	r5, r5, r6
    71be:	10ad      	asrs	r5, r5, #2
    71c0:	d005      	beq.n	71ce <__libc_init_array+0x36>
    71c2:	00a3      	lsls	r3, r4, #2
    71c4:	58f3      	ldr	r3, [r6, r3]
    71c6:	3401      	adds	r4, #1
    71c8:	4798      	blx	r3
    71ca:	42a5      	cmp	r5, r4
    71cc:	d1f9      	bne.n	71c2 <__libc_init_array+0x2a>
    71ce:	bd70      	pop	{r4, r5, r6, pc}
    71d0:	000078a4 	.word	0x000078a4
    71d4:	000078a4 	.word	0x000078a4
    71d8:	000078a4 	.word	0x000078a4
    71dc:	000078b4 	.word	0x000078b4

000071e0 <memcpy>:
    71e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71e2:	0005      	movs	r5, r0
    71e4:	2a0f      	cmp	r2, #15
    71e6:	d92f      	bls.n	7248 <memcpy+0x68>
    71e8:	000b      	movs	r3, r1
    71ea:	4303      	orrs	r3, r0
    71ec:	079b      	lsls	r3, r3, #30
    71ee:	d134      	bne.n	725a <memcpy+0x7a>
    71f0:	0016      	movs	r6, r2
    71f2:	000c      	movs	r4, r1
    71f4:	0003      	movs	r3, r0
    71f6:	3e10      	subs	r6, #16
    71f8:	0935      	lsrs	r5, r6, #4
    71fa:	3501      	adds	r5, #1
    71fc:	012d      	lsls	r5, r5, #4
    71fe:	1945      	adds	r5, r0, r5
    7200:	6827      	ldr	r7, [r4, #0]
    7202:	601f      	str	r7, [r3, #0]
    7204:	6867      	ldr	r7, [r4, #4]
    7206:	605f      	str	r7, [r3, #4]
    7208:	68a7      	ldr	r7, [r4, #8]
    720a:	609f      	str	r7, [r3, #8]
    720c:	68e7      	ldr	r7, [r4, #12]
    720e:	3410      	adds	r4, #16
    7210:	60df      	str	r7, [r3, #12]
    7212:	3310      	adds	r3, #16
    7214:	429d      	cmp	r5, r3
    7216:	d1f3      	bne.n	7200 <memcpy+0x20>
    7218:	230f      	movs	r3, #15
    721a:	439e      	bics	r6, r3
    721c:	3610      	adds	r6, #16
    721e:	1985      	adds	r5, r0, r6
    7220:	1989      	adds	r1, r1, r6
    7222:	4013      	ands	r3, r2
    7224:	2b03      	cmp	r3, #3
    7226:	d91a      	bls.n	725e <memcpy+0x7e>
    7228:	1f1e      	subs	r6, r3, #4
    722a:	2300      	movs	r3, #0
    722c:	08b4      	lsrs	r4, r6, #2
    722e:	3401      	adds	r4, #1
    7230:	00a4      	lsls	r4, r4, #2
    7232:	58cf      	ldr	r7, [r1, r3]
    7234:	50ef      	str	r7, [r5, r3]
    7236:	3304      	adds	r3, #4
    7238:	42a3      	cmp	r3, r4
    723a:	d1fa      	bne.n	7232 <memcpy+0x52>
    723c:	2403      	movs	r4, #3
    723e:	43a6      	bics	r6, r4
    7240:	1d33      	adds	r3, r6, #4
    7242:	4022      	ands	r2, r4
    7244:	18c9      	adds	r1, r1, r3
    7246:	18ed      	adds	r5, r5, r3
    7248:	2a00      	cmp	r2, #0
    724a:	d005      	beq.n	7258 <memcpy+0x78>
    724c:	2300      	movs	r3, #0
    724e:	5ccc      	ldrb	r4, [r1, r3]
    7250:	54ec      	strb	r4, [r5, r3]
    7252:	3301      	adds	r3, #1
    7254:	4293      	cmp	r3, r2
    7256:	d1fa      	bne.n	724e <memcpy+0x6e>
    7258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    725a:	0005      	movs	r5, r0
    725c:	e7f6      	b.n	724c <memcpy+0x6c>
    725e:	001a      	movs	r2, r3
    7260:	e7f2      	b.n	7248 <memcpy+0x68>
    7262:	46c0      	nop			; (mov r8, r8)

00007264 <memset>:
    7264:	b5f0      	push	{r4, r5, r6, r7, lr}
    7266:	0783      	lsls	r3, r0, #30
    7268:	d043      	beq.n	72f2 <memset+0x8e>
    726a:	1e54      	subs	r4, r2, #1
    726c:	2a00      	cmp	r2, #0
    726e:	d03f      	beq.n	72f0 <memset+0x8c>
    7270:	b2ce      	uxtb	r6, r1
    7272:	0002      	movs	r2, r0
    7274:	2503      	movs	r5, #3
    7276:	e002      	b.n	727e <memset+0x1a>
    7278:	001a      	movs	r2, r3
    727a:	3c01      	subs	r4, #1
    727c:	d338      	bcc.n	72f0 <memset+0x8c>
    727e:	1c53      	adds	r3, r2, #1
    7280:	7016      	strb	r6, [r2, #0]
    7282:	422b      	tst	r3, r5
    7284:	d1f8      	bne.n	7278 <memset+0x14>
    7286:	2c03      	cmp	r4, #3
    7288:	d92a      	bls.n	72e0 <memset+0x7c>
    728a:	22ff      	movs	r2, #255	; 0xff
    728c:	400a      	ands	r2, r1
    728e:	0215      	lsls	r5, r2, #8
    7290:	4315      	orrs	r5, r2
    7292:	042a      	lsls	r2, r5, #16
    7294:	4315      	orrs	r5, r2
    7296:	2c0f      	cmp	r4, #15
    7298:	d914      	bls.n	72c4 <memset+0x60>
    729a:	0027      	movs	r7, r4
    729c:	001a      	movs	r2, r3
    729e:	3f10      	subs	r7, #16
    72a0:	093e      	lsrs	r6, r7, #4
    72a2:	3601      	adds	r6, #1
    72a4:	0136      	lsls	r6, r6, #4
    72a6:	199e      	adds	r6, r3, r6
    72a8:	6015      	str	r5, [r2, #0]
    72aa:	6055      	str	r5, [r2, #4]
    72ac:	6095      	str	r5, [r2, #8]
    72ae:	60d5      	str	r5, [r2, #12]
    72b0:	3210      	adds	r2, #16
    72b2:	4296      	cmp	r6, r2
    72b4:	d1f8      	bne.n	72a8 <memset+0x44>
    72b6:	220f      	movs	r2, #15
    72b8:	4397      	bics	r7, r2
    72ba:	3710      	adds	r7, #16
    72bc:	19db      	adds	r3, r3, r7
    72be:	4014      	ands	r4, r2
    72c0:	2c03      	cmp	r4, #3
    72c2:	d90d      	bls.n	72e0 <memset+0x7c>
    72c4:	001a      	movs	r2, r3
    72c6:	1f27      	subs	r7, r4, #4
    72c8:	08be      	lsrs	r6, r7, #2
    72ca:	3601      	adds	r6, #1
    72cc:	00b6      	lsls	r6, r6, #2
    72ce:	199e      	adds	r6, r3, r6
    72d0:	c220      	stmia	r2!, {r5}
    72d2:	42b2      	cmp	r2, r6
    72d4:	d1fc      	bne.n	72d0 <memset+0x6c>
    72d6:	2203      	movs	r2, #3
    72d8:	4397      	bics	r7, r2
    72da:	3704      	adds	r7, #4
    72dc:	19db      	adds	r3, r3, r7
    72de:	4014      	ands	r4, r2
    72e0:	2c00      	cmp	r4, #0
    72e2:	d005      	beq.n	72f0 <memset+0x8c>
    72e4:	b2c9      	uxtb	r1, r1
    72e6:	191c      	adds	r4, r3, r4
    72e8:	7019      	strb	r1, [r3, #0]
    72ea:	3301      	adds	r3, #1
    72ec:	429c      	cmp	r4, r3
    72ee:	d1fb      	bne.n	72e8 <memset+0x84>
    72f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72f2:	0014      	movs	r4, r2
    72f4:	0003      	movs	r3, r0
    72f6:	e7c6      	b.n	7286 <memset+0x22>

000072f8 <strlen>:
    72f8:	b510      	push	{r4, lr}
    72fa:	0783      	lsls	r3, r0, #30
    72fc:	d025      	beq.n	734a <strlen+0x52>
    72fe:	7803      	ldrb	r3, [r0, #0]
    7300:	2b00      	cmp	r3, #0
    7302:	d024      	beq.n	734e <strlen+0x56>
    7304:	0003      	movs	r3, r0
    7306:	2103      	movs	r1, #3
    7308:	e002      	b.n	7310 <strlen+0x18>
    730a:	781a      	ldrb	r2, [r3, #0]
    730c:	2a00      	cmp	r2, #0
    730e:	d01a      	beq.n	7346 <strlen+0x4e>
    7310:	3301      	adds	r3, #1
    7312:	420b      	tst	r3, r1
    7314:	d1f9      	bne.n	730a <strlen+0x12>
    7316:	6819      	ldr	r1, [r3, #0]
    7318:	4a0e      	ldr	r2, [pc, #56]	; (7354 <strlen+0x5c>)
    731a:	4c0f      	ldr	r4, [pc, #60]	; (7358 <strlen+0x60>)
    731c:	188a      	adds	r2, r1, r2
    731e:	438a      	bics	r2, r1
    7320:	4222      	tst	r2, r4
    7322:	d106      	bne.n	7332 <strlen+0x3a>
    7324:	3304      	adds	r3, #4
    7326:	6819      	ldr	r1, [r3, #0]
    7328:	4a0a      	ldr	r2, [pc, #40]	; (7354 <strlen+0x5c>)
    732a:	188a      	adds	r2, r1, r2
    732c:	438a      	bics	r2, r1
    732e:	4222      	tst	r2, r4
    7330:	d0f8      	beq.n	7324 <strlen+0x2c>
    7332:	001a      	movs	r2, r3
    7334:	781b      	ldrb	r3, [r3, #0]
    7336:	2b00      	cmp	r3, #0
    7338:	d003      	beq.n	7342 <strlen+0x4a>
    733a:	3201      	adds	r2, #1
    733c:	7811      	ldrb	r1, [r2, #0]
    733e:	2900      	cmp	r1, #0
    7340:	d1fb      	bne.n	733a <strlen+0x42>
    7342:	1a10      	subs	r0, r2, r0
    7344:	bd10      	pop	{r4, pc}
    7346:	1a18      	subs	r0, r3, r0
    7348:	e7fc      	b.n	7344 <strlen+0x4c>
    734a:	0003      	movs	r3, r0
    734c:	e7e3      	b.n	7316 <strlen+0x1e>
    734e:	2000      	movs	r0, #0
    7350:	e7f8      	b.n	7344 <strlen+0x4c>
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	fefefeff 	.word	0xfefefeff
    7358:	80808080 	.word	0x80808080

0000735c <__register_exitproc>:
    735c:	b5f0      	push	{r4, r5, r6, r7, lr}
    735e:	464e      	mov	r6, r9
    7360:	4645      	mov	r5, r8
    7362:	46de      	mov	lr, fp
    7364:	4657      	mov	r7, sl
    7366:	b5e0      	push	{r5, r6, r7, lr}
    7368:	4d36      	ldr	r5, [pc, #216]	; (7444 <__register_exitproc+0xe8>)
    736a:	b083      	sub	sp, #12
    736c:	0006      	movs	r6, r0
    736e:	6828      	ldr	r0, [r5, #0]
    7370:	4698      	mov	r8, r3
    7372:	000f      	movs	r7, r1
    7374:	4691      	mov	r9, r2
    7376:	f000 f899 	bl	74ac <__retarget_lock_acquire_recursive>
    737a:	4b33      	ldr	r3, [pc, #204]	; (7448 <__register_exitproc+0xec>)
    737c:	681c      	ldr	r4, [r3, #0]
    737e:	23a4      	movs	r3, #164	; 0xa4
    7380:	005b      	lsls	r3, r3, #1
    7382:	58e0      	ldr	r0, [r4, r3]
    7384:	2800      	cmp	r0, #0
    7386:	d052      	beq.n	742e <__register_exitproc+0xd2>
    7388:	6843      	ldr	r3, [r0, #4]
    738a:	2b1f      	cmp	r3, #31
    738c:	dc13      	bgt.n	73b6 <__register_exitproc+0x5a>
    738e:	1c5a      	adds	r2, r3, #1
    7390:	9201      	str	r2, [sp, #4]
    7392:	2e00      	cmp	r6, #0
    7394:	d128      	bne.n	73e8 <__register_exitproc+0x8c>
    7396:	9a01      	ldr	r2, [sp, #4]
    7398:	3302      	adds	r3, #2
    739a:	009b      	lsls	r3, r3, #2
    739c:	6042      	str	r2, [r0, #4]
    739e:	501f      	str	r7, [r3, r0]
    73a0:	6828      	ldr	r0, [r5, #0]
    73a2:	f000 f885 	bl	74b0 <__retarget_lock_release_recursive>
    73a6:	2000      	movs	r0, #0
    73a8:	b003      	add	sp, #12
    73aa:	bc3c      	pop	{r2, r3, r4, r5}
    73ac:	4690      	mov	r8, r2
    73ae:	4699      	mov	r9, r3
    73b0:	46a2      	mov	sl, r4
    73b2:	46ab      	mov	fp, r5
    73b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73b6:	4b25      	ldr	r3, [pc, #148]	; (744c <__register_exitproc+0xf0>)
    73b8:	2b00      	cmp	r3, #0
    73ba:	d03d      	beq.n	7438 <__register_exitproc+0xdc>
    73bc:	20c8      	movs	r0, #200	; 0xc8
    73be:	0040      	lsls	r0, r0, #1
    73c0:	f7f9 f8bc 	bl	53c <malloc>
    73c4:	2800      	cmp	r0, #0
    73c6:	d037      	beq.n	7438 <__register_exitproc+0xdc>
    73c8:	22a4      	movs	r2, #164	; 0xa4
    73ca:	2300      	movs	r3, #0
    73cc:	0052      	lsls	r2, r2, #1
    73ce:	58a1      	ldr	r1, [r4, r2]
    73d0:	6043      	str	r3, [r0, #4]
    73d2:	6001      	str	r1, [r0, #0]
    73d4:	50a0      	str	r0, [r4, r2]
    73d6:	3240      	adds	r2, #64	; 0x40
    73d8:	5083      	str	r3, [r0, r2]
    73da:	3204      	adds	r2, #4
    73dc:	5083      	str	r3, [r0, r2]
    73de:	3301      	adds	r3, #1
    73e0:	9301      	str	r3, [sp, #4]
    73e2:	2300      	movs	r3, #0
    73e4:	2e00      	cmp	r6, #0
    73e6:	d0d6      	beq.n	7396 <__register_exitproc+0x3a>
    73e8:	009a      	lsls	r2, r3, #2
    73ea:	4692      	mov	sl, r2
    73ec:	4482      	add	sl, r0
    73ee:	464a      	mov	r2, r9
    73f0:	2188      	movs	r1, #136	; 0x88
    73f2:	4654      	mov	r4, sl
    73f4:	5062      	str	r2, [r4, r1]
    73f6:	22c4      	movs	r2, #196	; 0xc4
    73f8:	0052      	lsls	r2, r2, #1
    73fa:	4691      	mov	r9, r2
    73fc:	4481      	add	r9, r0
    73fe:	464a      	mov	r2, r9
    7400:	3987      	subs	r1, #135	; 0x87
    7402:	4099      	lsls	r1, r3
    7404:	6812      	ldr	r2, [r2, #0]
    7406:	468b      	mov	fp, r1
    7408:	430a      	orrs	r2, r1
    740a:	4694      	mov	ip, r2
    740c:	464a      	mov	r2, r9
    740e:	4661      	mov	r1, ip
    7410:	6011      	str	r1, [r2, #0]
    7412:	2284      	movs	r2, #132	; 0x84
    7414:	4641      	mov	r1, r8
    7416:	0052      	lsls	r2, r2, #1
    7418:	50a1      	str	r1, [r4, r2]
    741a:	2e02      	cmp	r6, #2
    741c:	d1bb      	bne.n	7396 <__register_exitproc+0x3a>
    741e:	0002      	movs	r2, r0
    7420:	465c      	mov	r4, fp
    7422:	328d      	adds	r2, #141	; 0x8d
    7424:	32ff      	adds	r2, #255	; 0xff
    7426:	6811      	ldr	r1, [r2, #0]
    7428:	430c      	orrs	r4, r1
    742a:	6014      	str	r4, [r2, #0]
    742c:	e7b3      	b.n	7396 <__register_exitproc+0x3a>
    742e:	0020      	movs	r0, r4
    7430:	304d      	adds	r0, #77	; 0x4d
    7432:	30ff      	adds	r0, #255	; 0xff
    7434:	50e0      	str	r0, [r4, r3]
    7436:	e7a7      	b.n	7388 <__register_exitproc+0x2c>
    7438:	6828      	ldr	r0, [r5, #0]
    743a:	f000 f839 	bl	74b0 <__retarget_lock_release_recursive>
    743e:	2001      	movs	r0, #1
    7440:	4240      	negs	r0, r0
    7442:	e7b1      	b.n	73a8 <__register_exitproc+0x4c>
    7444:	20000498 	.word	0x20000498
    7448:	00007894 	.word	0x00007894
    744c:	0000053d 	.word	0x0000053d

00007450 <register_fini>:
    7450:	4b03      	ldr	r3, [pc, #12]	; (7460 <register_fini+0x10>)
    7452:	b510      	push	{r4, lr}
    7454:	2b00      	cmp	r3, #0
    7456:	d002      	beq.n	745e <register_fini+0xe>
    7458:	4802      	ldr	r0, [pc, #8]	; (7464 <register_fini+0x14>)
    745a:	f000 f805 	bl	7468 <atexit>
    745e:	bd10      	pop	{r4, pc}
    7460:	00000000 	.word	0x00000000
    7464:	00007479 	.word	0x00007479

00007468 <atexit>:
    7468:	b510      	push	{r4, lr}
    746a:	0001      	movs	r1, r0
    746c:	2300      	movs	r3, #0
    746e:	2200      	movs	r2, #0
    7470:	2000      	movs	r0, #0
    7472:	f7ff ff73 	bl	735c <__register_exitproc>
    7476:	bd10      	pop	{r4, pc}

00007478 <__libc_fini_array>:
    7478:	b570      	push	{r4, r5, r6, lr}
    747a:	4b09      	ldr	r3, [pc, #36]	; (74a0 <__libc_fini_array+0x28>)
    747c:	4c09      	ldr	r4, [pc, #36]	; (74a4 <__libc_fini_array+0x2c>)
    747e:	1ae4      	subs	r4, r4, r3
    7480:	10a4      	asrs	r4, r4, #2
    7482:	d009      	beq.n	7498 <__libc_fini_array+0x20>
    7484:	4a08      	ldr	r2, [pc, #32]	; (74a8 <__libc_fini_array+0x30>)
    7486:	18a5      	adds	r5, r4, r2
    7488:	00ad      	lsls	r5, r5, #2
    748a:	18ed      	adds	r5, r5, r3
    748c:	682b      	ldr	r3, [r5, #0]
    748e:	3c01      	subs	r4, #1
    7490:	4798      	blx	r3
    7492:	3d04      	subs	r5, #4
    7494:	2c00      	cmp	r4, #0
    7496:	d1f9      	bne.n	748c <__libc_fini_array+0x14>
    7498:	f000 fa0c 	bl	78b4 <_fini>
    749c:	bd70      	pop	{r4, r5, r6, pc}
    749e:	46c0      	nop			; (mov r8, r8)
    74a0:	000078c0 	.word	0x000078c0
    74a4:	000078c4 	.word	0x000078c4
    74a8:	3fffffff 	.word	0x3fffffff

000074ac <__retarget_lock_acquire_recursive>:
    74ac:	4770      	bx	lr
    74ae:	46c0      	nop			; (mov r8, r8)

000074b0 <__retarget_lock_release_recursive>:
    74b0:	4770      	bx	lr
    74b2:	46c0      	nop			; (mov r8, r8)

000074b4 <_ZTV6Stream>:
	...
    74bc:	0541 0000 0625 0000 0115 0000 0119 0000     A...%...........
    74cc:	0541 0000 0541 0000 0541 0000               A...A...A...

000074d8 <_ZTV9CDC_Class>:
	...
    74e0:	0183 0000 0331 0000 0115 0000 02b1 0000     ....1...........
    74f0:	01ab 0000 0219 0000 0159 0000 0241 0000     ........Y...A...
    7500:	03a1 0000 02c1 0000 7469 7320 6f68 6c75     ........it shoul
    7510:	2064 6f77 6b72 0000 7469 6420 656f 2073     d work..it does 
    7520:	6f77 6b72 0000 0000 0a0d 0000 6877 2079     work........why 
    7530:	7369 6e20 746f 7720 726f 696b 676e 0000     is not working..
    7540:	7830 2e25 5838 0000 616e 006e 6e69 0066     0x%.8X..nan.inf.
    7550:	766f 0066 2e2e 682f 6c61 732f 6372 682f     ovf.../hal/src/h
    7560:	6c61 645f 6361 735f 6e79 2e63 0063 0000     al_dac_sync.c...
    7570:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    7580:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    7590:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
    75a0:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
    75b0:	6c61 755f 6173 7472 615f 7973 636e 632e     al_usart_async.c
    75c0:	0000 0000 2e2e 682f 6c61 752f 6974 736c     ....../hal/utils
    75d0:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
    75e0:	0063 0000 2e2e 682f 6c61 752f 6974 736c     c...../hal/utils
    75f0:	732f 6372 752f 6974 736c 725f 6e69 6267     /src/utils_ringb
    7600:	6675 6566 2e72 0063 2e2e 682f 6c70 642f     uffer.c.../hpl/d
    7610:	6361 682f 6c70 645f 6361 632e 0000 0000     ac/hpl_dac.c....

00007620 <_map>:
    7620:	000e 0000 000e 0000 2e2e 682f 6c70 652f     ........../hpl/e
    7630:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00007640 <_usarts>:
    7640:	0003 0000 0004 4010 0000 0003 ff2e 0000     .......@........
    7650:	0000 0000                                   ....

00007654 <_i2cms>:
	...

0000766c <_i2css>:
	...

0000767c <sercomspi_regs>:
    767c:	000c 0020 0000 0002 0000 0000 003b 01ff     .. .........;...
    768c:	0c00 2000 0000 0200 0000 0000 0500 ff00     ... ............
    769c:	0101 000c 0030 0000 0002 0000 0000 0017     ....0...........
    76ac:	01ff 0002 2e2e 682f 6c70 732f 7265 6f63     ....../hpl/serco
    76bc:	2f6d 7068 5f6c 6573 6372 6d6f 632e 0000     m/hpl_sercom.c..

000076cc <_tcs>:
    76cc:	0003 0368 0000 0000 0000 0000 1770 0000     ..h.........p...
    76dc:	0000 0000 0004 0368 0000 0000 0000 0000     ......h.........
    76ec:	007d 0000 0000 0000 2e2e 682f 6c70 742f     }........./hpl/t
    76fc:	2f63 7068 5f6c 6374 632e 0000 4a25 0000     c/hpl_tc.c..%J..
    770c:	0804 0000                                   ....

00007710 <_usb_ep_cfgs>:
    7710:	0968 2000 0000 0000 0040 0000 0928 2000     h.. ....@...(.. 
    7720:	08e8 2000 0040 0040 08a8 2000 0868 2000     ... @.@.... h.. 
    7730:	0040 0040 0828 2000 07e8 2000 0040 0040     @.@.(.. ... @.@.
    7740:	07a8 2000 0000 0000 0040 0000 4b96 0000     ... ....@....K..
    7750:	4b72 0000 4b96 0000 4b78 0000 4b96 0000     rK...K..xK...K..
    7760:	4b42 0000 4b96 0000 4b96 0000 4b96 0000     BK...K...K...K..
    7770:	4b54 0000 4b96 0000 4b7e 0000 2e2e 752f     TK...K..~K..../u
    7780:	6273 642f 7665 6369 2f65 7375 6462 2e63     sb/device/usbdc.
    7790:	0063 0000 53f8 0000 53c8 0000 53da 0000     c....S...S...S..
    77a0:	531c 0000 53da 0000 53be 0000 53da 0000     .S...S...S...S..
    77b0:	531c 0000 53c8 0000 53c8 0000 53be 0000     .S...S...S...S..
    77c0:	531c 0000 5324 0000 5324 0000 5324 0000     .S..$S..$S..$S..
    77d0:	53e0 0000 53c8 0000 53c8 0000 539c 0000     .S...S...S...S..
    77e0:	5480 0000 539c 0000 53be 0000 539c 0000     .T...S...S...S..
    77f0:	5480 0000 53c8 0000 53c8 0000 53be 0000     .T...S...S...S..
    7800:	5480 0000 5324 0000 5324 0000 5324 0000     .T..$S..$S..$S..
    7810:	548a 0000 5db4 0000 5d96 0000 5d50 0000     .T...]...]..P]..
    7820:	5c6e 0000 5d50 0000 5d88 0000 5d50 0000     n\..P]...]..P]..
    7830:	5c6e 0000 5d96 0000 5d96 0000 5d88 0000     n\...]...]...]..
    7840:	5c6e 0000 5c66 0000 5c66 0000 5c66 0000     n\..f\..f\..f\..
    7850:	5fcc 0000 6614 0000 64d4 0000 64d4 0000     ._...f...d...d..
    7860:	64d0 0000 65ec 0000 65ec 0000 65de 0000     .d...e...e...e..
    7870:	64d0 0000 65ec 0000 65de 0000 65ec 0000     .d...e...e...e..
    7880:	64d0 0000 65f4 0000 65f4 0000 65f4 0000     .d...e...e...e..
    7890:	67f8 0000                                   .g..

00007894 <_global_impure_ptr>:
    7894:	0070 2000                                   p.. 

00007898 <_init>:
    7898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    789a:	46c0      	nop			; (mov r8, r8)
    789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    789e:	bc08      	pop	{r3}
    78a0:	469e      	mov	lr, r3
    78a2:	4770      	bx	lr

000078a4 <__init_array_start>:
    78a4:	00007451 	.word	0x00007451

000078a8 <__frame_dummy_init_array_entry>:
    78a8:	000000dd 00000461 00000cb1              ....a.......

000078b4 <_fini>:
    78b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78b6:	46c0      	nop			; (mov r8, r8)
    78b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    78ba:	bc08      	pop	{r3}
    78bc:	469e      	mov	lr, r3
    78be:	4770      	bx	lr

000078c0 <__fini_array_start>:
    78c0:	000000b5 	.word	0x000000b5
