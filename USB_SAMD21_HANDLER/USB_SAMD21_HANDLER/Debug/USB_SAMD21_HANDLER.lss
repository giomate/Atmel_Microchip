
USB_SAMD21_HANDLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007858  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007858  00007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  00007860  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000850  2000049c  00007cfc  0002049c  2**2
                  ALLOC
  4 .stack        00002004  20000cec  0000854c  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00047ae6  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000067c0  00000000  00000000  00068003  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001a8bf  00000000  00000000  0006e7c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014c8  00000000  00000000  00089082  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001670  00000000  00000000  0008a54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022e3e  00000000  00000000  0008bbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c1bc  00000000  00000000  000ae9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00099a2d  00000000  00000000  000cabb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003bfc  00000000  00000000  001645e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 2c 00 20 79 04 00 00 75 04 00 00 75 04 00 00     .,. y...u...u...
	...
      2c:	75 04 00 00 00 00 00 00 00 00 00 00 75 04 00 00     u...........u...
      3c:	75 04 00 00 75 04 00 00 75 04 00 00 75 04 00 00     u...u...u...u...
      4c:	75 04 00 00 ed 24 00 00 75 04 00 00 75 04 00 00     u....$..u...u...
      5c:	fd 42 00 00 75 04 00 00 75 04 00 00 75 04 00 00     .B..u...u...u...
      6c:	75 04 00 00 0d 29 00 00 75 04 00 00 75 04 00 00     u....)..u...u...
      7c:	75 04 00 00 75 04 00 00 75 04 00 00 91 2f 00 00     u...u...u..../..
      8c:	a5 2f 00 00 75 04 00 00 75 04 00 00 75 04 00 00     ./..u...u...u...
      9c:	75 04 00 00 75 04 00 00 75 04 00 00 75 04 00 00     u...u...u...u...
      ac:	75 04 00 00 00 00 00 00                             u.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	00007860 	.word	0x00007860

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	00007860 	.word	0x00007860
     10c:	00007860 	.word	0x00007860
     110:	00000000 	.word	0x00000000

00000114 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     118:	4770      	bx	lr
	...

0000011c <_ZL10USBTimeoutPK10timer_task>:
//#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
	ptrCDCClass->timeout=true;
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <_ZL10USBTimeoutPK10timer_task+0x10>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2201      	movs	r2, #1
     122:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
     124:	2200      	movs	r2, #0
     126:	741a      	strb	r2, [r3, #16]
	
}
     128:	4770      	bx	lr
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	200004b8 	.word	0x200004b8

00000130 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
     130:	4b03      	ldr	r3, [pc, #12]	; (140 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2201      	movs	r2, #1
     136:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
     138:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
     13a:	741a      	strb	r2, [r3, #16]


	return false;
}
     13c:	2000      	movs	r0, #0
     13e:	4770      	bx	lr
     140:	200004b8 	.word	0x200004b8

00000144 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
     144:	4b03      	ldr	r3, [pc, #12]	; (154 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	2201      	movs	r2, #1
     14a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
     14c:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
     14e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	200004b8 	.word	0x200004b8

00000158 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
     158:	b530      	push	{r4, r5, lr}
     15a:	b083      	sub	sp, #12
     15c:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
     15e:	6983      	ldr	r3, [r0, #24]
     160:	3301      	adds	r3, #1
     162:	d002      	beq.n	16a <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
     164:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
     166:	b003      	add	sp, #12
     168:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
     16a:	6803      	ldr	r3, [r0, #0]
     16c:	69db      	ldr	r3, [r3, #28]
     16e:	466a      	mov	r2, sp
     170:	1dd5      	adds	r5, r2, #7
     172:	2201      	movs	r2, #1
     174:	0029      	movs	r1, r5
     176:	4798      	blx	r3
     178:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
     17a:	782b      	ldrb	r3, [r5, #0]
     17c:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
     17e:	69a0      	ldr	r0, [r4, #24]
     180:	e7f1      	b.n	166 <_ZN9CDC_Class4peekEv+0xe>

00000182 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     182:	b500      	push	{lr}
     184:	b083      	sub	sp, #12
     186:	466b      	mov	r3, sp
     188:	71d9      	strb	r1, [r3, #7]
	if (connected){
     18a:	7c03      	ldrb	r3, [r0, #16]
     18c:	2b00      	cmp	r3, #0
     18e:	d00a      	beq.n	1a6 <_ZN9CDC_Class5writeEh+0x24>
		while(!txReady);
     190:	7d03      	ldrb	r3, [r0, #20]
     192:	2b00      	cmp	r3, #0
     194:	d0fc      	beq.n	190 <_ZN9CDC_Class5writeEh+0xe>
		return writeData(&c, 1);
     196:	6803      	ldr	r3, [r0, #0]
     198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     19a:	2201      	movs	r2, #1
     19c:	4669      	mov	r1, sp
     19e:	3107      	adds	r1, #7
     1a0:	4798      	blx	r3
	}else{
		return 0;
	}
		
}
     1a2:	b003      	add	sp, #12
     1a4:	bd00      	pop	{pc}
		return 0;
     1a6:	2000      	movs	r0, #0
     1a8:	e7fb      	b.n	1a2 <_ZN9CDC_Class5writeEh+0x20>

000001aa <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
     1aa:	7d43      	ldrb	r3, [r0, #21]
     1ac:	2b00      	cmp	r3, #0
     1ae:	d002      	beq.n	1b6 <_ZN9CDC_Class9availableEv+0xc>
     1b0:	7d00      	ldrb	r0, [r0, #20]
     1b2:	b2c0      	uxtb	r0, r0
	{
		
	return false;
	}
	
}
     1b4:	4770      	bx	lr
	if (rxReady && txReady)
     1b6:	2000      	movs	r0, #0
     1b8:	e7fc      	b.n	1b4 <_ZN9CDC_Class9availableEv+0xa>
	...

000001bc <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
     1bc:	b510      	push	{r4, lr}
     1be:	0004      	movs	r4, r0
     1c0:	4b03      	ldr	r3, [pc, #12]	; (1d0 <_ZN9CDC_ClassD1Ev+0x14>)
     1c2:	3308      	adds	r3, #8
     1c4:	6003      	str	r3, [r0, #0]
     1c6:	3010      	adds	r0, #16
     1c8:	4b02      	ldr	r3, [pc, #8]	; (1d4 <_ZN9CDC_ClassD1Ev+0x18>)
     1ca:	4798      	blx	r3
} //~CDC_Class
     1cc:	0020      	movs	r0, r4
     1ce:	bd10      	pop	{r4, pc}
     1d0:	0000745c 	.word	0x0000745c
     1d4:	00000a21 	.word	0x00000a21

000001d8 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     1d8:	b510      	push	{r4, lr}
     1da:	b082      	sub	sp, #8
     1dc:	1c03      	adds	r3, r0, #0
     1de:	aa01      	add	r2, sp, #4
     1e0:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
     1e2:	07db      	lsls	r3, r3, #31
     1e4:	d402      	bmi.n	1ec <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     1e6:	2000      	movs	r0, #0
     1e8:	b002      	add	sp, #8
     1ea:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     1ec:	4906      	ldr	r1, [pc, #24]	; (208 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     1ee:	2000      	movs	r0, #0
     1f0:	4c06      	ldr	r4, [pc, #24]	; (20c <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     1f2:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     1f4:	4906      	ldr	r1, [pc, #24]	; (210 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     1f6:	2001      	movs	r0, #1
     1f8:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     1fc:	681b      	ldr	r3, [r3, #0]
     1fe:	2201      	movs	r2, #1
     200:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
     202:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
     204:	741a      	strb	r2, [r3, #16]
     206:	e7ee      	b.n	1e6 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     208:	00000131 	.word	0x00000131
     20c:	0000462d 	.word	0x0000462d
     210:	00000145 	.word	0x00000145
     214:	200004b8 	.word	0x200004b8

00000218 <_ZN9CDC_Class4readEv>:
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
     21c:	0004      	movs	r4, r0
	rxReady=false;
     21e:	2300      	movs	r3, #0
     220:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
     222:	2101      	movs	r1, #1
     224:	466b      	mov	r3, sp
     226:	1dd8      	adds	r0, r3, #7
     228:	4b04      	ldr	r3, [pc, #16]	; (23c <_ZN9CDC_Class4readEv+0x24>)
     22a:	4798      	blx	r3
	while(!rxReady);
     22c:	7d63      	ldrb	r3, [r4, #21]
     22e:	2b00      	cmp	r3, #0
     230:	d0fc      	beq.n	22c <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
     232:	466b      	mov	r3, sp
     234:	79d8      	ldrb	r0, [r3, #7]
}
     236:	b002      	add	sp, #8
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00004689 	.word	0x00004689

00000240 <_ZN9CDC_Class8readDataEPvl>:
{
     240:	b570      	push	{r4, r5, r6, lr}
     242:	0004      	movs	r4, r0
     244:	000e      	movs	r6, r1
     246:	0015      	movs	r5, r2
	if (connected)
     248:	7c03      	ldrb	r3, [r0, #16]
     24a:	2b00      	cmp	r3, #0
     24c:	d102      	bne.n	254 <_ZN9CDC_Class8readDataEPvl+0x14>
		r=0;
     24e:	2500      	movs	r5, #0
}
     250:	0028      	movs	r0, r5
     252:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
     254:	0093      	lsls	r3, r2, #2
     256:	189b      	adds	r3, r3, r2
     258:	005a      	lsls	r2, r3, #1
     25a:	490f      	ldr	r1, [pc, #60]	; (298 <_ZN9CDC_Class8readDataEPvl+0x58>)
     25c:	480f      	ldr	r0, [pc, #60]	; (29c <_ZN9CDC_Class8readDataEPvl+0x5c>)
     25e:	4b10      	ldr	r3, [pc, #64]	; (2a0 <_ZN9CDC_Class8readDataEPvl+0x60>)
     260:	4798      	blx	r3
		rxReady=false;
     262:	2300      	movs	r3, #0
     264:	7563      	strb	r3, [r4, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
     266:	0029      	movs	r1, r5
     268:	0030      	movs	r0, r6
     26a:	4b0e      	ldr	r3, [pc, #56]	; (2a4 <_ZN9CDC_Class8readDataEPvl+0x64>)
     26c:	4798      	blx	r3
     26e:	b2c5      	uxtb	r5, r0
     270:	e002      	b.n	278 <_ZN9CDC_Class8readDataEPvl+0x38>
		while((!rxReady)&&(connected));
     272:	2300      	movs	r3, #0
     274:	2b00      	cmp	r3, #0
     276:	d005      	beq.n	284 <_ZN9CDC_Class8readDataEPvl+0x44>
     278:	7d63      	ldrb	r3, [r4, #21]
     27a:	2b00      	cmp	r3, #0
     27c:	d1f9      	bne.n	272 <_ZN9CDC_Class8readDataEPvl+0x32>
     27e:	7c23      	ldrb	r3, [r4, #16]
     280:	b2db      	uxtb	r3, r3
     282:	e7f7      	b.n	274 <_ZN9CDC_Class8readDataEPvl+0x34>
		usbTerminalTimer.Stop();
     284:	4c05      	ldr	r4, [pc, #20]	; (29c <_ZN9CDC_Class8readDataEPvl+0x5c>)
     286:	0020      	movs	r0, r4
     288:	4b07      	ldr	r3, [pc, #28]	; (2a8 <_ZN9CDC_Class8readDataEPvl+0x68>)
     28a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
     28c:	4902      	ldr	r1, [pc, #8]	; (298 <_ZN9CDC_Class8readDataEPvl+0x58>)
     28e:	0020      	movs	r0, r4
     290:	4b06      	ldr	r3, [pc, #24]	; (2ac <_ZN9CDC_Class8readDataEPvl+0x6c>)
     292:	4798      	blx	r3
     294:	e7dc      	b.n	250 <_ZN9CDC_Class8readDataEPvl+0x10>
     296:	46c0      	nop			; (mov r8, r8)
     298:	0000011d 	.word	0x0000011d
     29c:	20000524 	.word	0x20000524
     2a0:	00000bfd 	.word	0x00000bfd
     2a4:	00004689 	.word	0x00004689
     2a8:	00000b6d 	.word	0x00000b6d
     2ac:	00000c45 	.word	0x00000c45

000002b0 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     2b0:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     2b2:	301c      	adds	r0, #28
     2b4:	2140      	movs	r1, #64	; 0x40
     2b6:	4b01      	ldr	r3, [pc, #4]	; (2bc <_ZN9CDC_Class5flushEv+0xc>)
     2b8:	4798      	blx	r3
}
     2ba:	bd10      	pop	{r4, pc}
     2bc:	000046b9 	.word	0x000046b9

000002c0 <_ZN9CDC_Class9writeDataEPKvl>:
{
     2c0:	b570      	push	{r4, r5, r6, lr}
     2c2:	0004      	movs	r4, r0
     2c4:	000e      	movs	r6, r1
     2c6:	0015      	movs	r5, r2
	if (connected)
     2c8:	7c03      	ldrb	r3, [r0, #16]
     2ca:	2b00      	cmp	r3, #0
     2cc:	d102      	bne.n	2d4 <_ZN9CDC_Class9writeDataEPKvl+0x14>
		return 0;
     2ce:	2500      	movs	r5, #0
}
     2d0:	0028      	movs	r0, r5
     2d2:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
     2d4:	0093      	lsls	r3, r2, #2
     2d6:	189b      	adds	r3, r3, r2
     2d8:	005a      	lsls	r2, r3, #1
     2da:	490f      	ldr	r1, [pc, #60]	; (318 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
     2dc:	480f      	ldr	r0, [pc, #60]	; (31c <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
     2de:	4b10      	ldr	r3, [pc, #64]	; (320 <_ZN9CDC_Class9writeDataEPKvl+0x60>)
     2e0:	4798      	blx	r3
		txReady=false;
     2e2:	2300      	movs	r3, #0
     2e4:	7523      	strb	r3, [r4, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     2e6:	0029      	movs	r1, r5
     2e8:	0030      	movs	r0, r6
     2ea:	4b0e      	ldr	r3, [pc, #56]	; (324 <_ZN9CDC_Class9writeDataEPKvl+0x64>)
     2ec:	4798      	blx	r3
     2ee:	0005      	movs	r5, r0
     2f0:	e002      	b.n	2f8 <_ZN9CDC_Class9writeDataEPKvl+0x38>
		while((!txReady)&&(connected)){
     2f2:	2300      	movs	r3, #0
     2f4:	2b00      	cmp	r3, #0
     2f6:	d005      	beq.n	304 <_ZN9CDC_Class9writeDataEPKvl+0x44>
     2f8:	7d23      	ldrb	r3, [r4, #20]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d1f9      	bne.n	2f2 <_ZN9CDC_Class9writeDataEPKvl+0x32>
     2fe:	7c23      	ldrb	r3, [r4, #16]
     300:	b2db      	uxtb	r3, r3
     302:	e7f7      	b.n	2f4 <_ZN9CDC_Class9writeDataEPKvl+0x34>
			usbTerminalTimer.Stop();
     304:	4c05      	ldr	r4, [pc, #20]	; (31c <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
     306:	0020      	movs	r0, r4
     308:	4b07      	ldr	r3, [pc, #28]	; (328 <_ZN9CDC_Class9writeDataEPKvl+0x68>)
     30a:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
     30c:	4902      	ldr	r1, [pc, #8]	; (318 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
     30e:	0020      	movs	r0, r4
     310:	4b06      	ldr	r3, [pc, #24]	; (32c <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
     312:	4798      	blx	r3
		return r;
     314:	e7dc      	b.n	2d0 <_ZN9CDC_Class9writeDataEPKvl+0x10>
     316:	46c0      	nop			; (mov r8, r8)
     318:	0000011d 	.word	0x0000011d
     31c:	20000524 	.word	0x20000524
     320:	00000bfd 	.word	0x00000bfd
     324:	000046b9 	.word	0x000046b9
     328:	00000b6d 	.word	0x00000b6d
     32c:	00000c45 	.word	0x00000c45

00000330 <_ZN9CDC_Class5writeEPKhj>:
{
     330:	b570      	push	{r4, r5, r6, lr}
     332:	0004      	movs	r4, r0
     334:	000e      	movs	r6, r1
     336:	0015      	movs	r5, r2
	txReady=false;
     338:	2300      	movs	r3, #0
     33a:	7503      	strb	r3, [r0, #20]
 	if (connected){
     33c:	7c03      	ldrb	r3, [r0, #16]
     33e:	2b00      	cmp	r3, #0
     340:	d102      	bne.n	348 <_ZN9CDC_Class5writeEPKhj+0x18>
 		r=0;
     342:	2500      	movs	r5, #0
}
     344:	0028      	movs	r0, r5
     346:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
     348:	0093      	lsls	r3, r2, #2
     34a:	189b      	adds	r3, r3, r2
     34c:	005a      	lsls	r2, r3, #1
     34e:	490e      	ldr	r1, [pc, #56]	; (388 <_ZN9CDC_Class5writeEPKhj+0x58>)
     350:	480e      	ldr	r0, [pc, #56]	; (38c <_ZN9CDC_Class5writeEPKhj+0x5c>)
     352:	4b0f      	ldr	r3, [pc, #60]	; (390 <_ZN9CDC_Class5writeEPKhj+0x60>)
     354:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     356:	0029      	movs	r1, r5
     358:	0030      	movs	r0, r6
     35a:	4b0e      	ldr	r3, [pc, #56]	; (394 <_ZN9CDC_Class5writeEPKhj+0x64>)
     35c:	4798      	blx	r3
     35e:	0005      	movs	r5, r0
     360:	e002      	b.n	368 <_ZN9CDC_Class5writeEPKhj+0x38>
		while((!txReady)&&(connected));
     362:	2300      	movs	r3, #0
     364:	2b00      	cmp	r3, #0
     366:	d005      	beq.n	374 <_ZN9CDC_Class5writeEPKhj+0x44>
     368:	7d23      	ldrb	r3, [r4, #20]
     36a:	2b00      	cmp	r3, #0
     36c:	d1f9      	bne.n	362 <_ZN9CDC_Class5writeEPKhj+0x32>
     36e:	7c23      	ldrb	r3, [r4, #16]
     370:	b2db      	uxtb	r3, r3
     372:	e7f7      	b.n	364 <_ZN9CDC_Class5writeEPKhj+0x34>
		usbTerminalTimer.Stop();
     374:	4c05      	ldr	r4, [pc, #20]	; (38c <_ZN9CDC_Class5writeEPKhj+0x5c>)
     376:	0020      	movs	r0, r4
     378:	4b07      	ldr	r3, [pc, #28]	; (398 <_ZN9CDC_Class5writeEPKhj+0x68>)
     37a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
     37c:	4902      	ldr	r1, [pc, #8]	; (388 <_ZN9CDC_Class5writeEPKhj+0x58>)
     37e:	0020      	movs	r0, r4
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <_ZN9CDC_Class5writeEPKhj+0x6c>)
     382:	4798      	blx	r3
     384:	e7de      	b.n	344 <_ZN9CDC_Class5writeEPKhj+0x14>
     386:	46c0      	nop			; (mov r8, r8)
     388:	0000011d 	.word	0x0000011d
     38c:	20000524 	.word	0x20000524
     390:	00000bfd 	.word	0x00000bfd
     394:	000046b9 	.word	0x000046b9
     398:	00000b6d 	.word	0x00000b6d
     39c:	00000c45 	.word	0x00000c45

000003a0 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     3a0:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
     3a2:	4b01      	ldr	r3, [pc, #4]	; (3a8 <_ZN9CDC_Class5clearEv+0x8>)
     3a4:	4798      	blx	r3
}
     3a6:	bd10      	pop	{r4, pc}
     3a8:	00004615 	.word	0x00004615

000003ac <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
     3ac:	b510      	push	{r4, lr}
     3ae:	0004      	movs	r4, r0
    Print() : write_error(0) {}
     3b0:	2300      	movs	r3, #0
     3b2:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     3b4:	4b08      	ldr	r3, [pc, #32]	; (3d8 <_ZN9CDC_ClassC1Ev+0x2c>)
     3b6:	6003      	str	r3, [r0, #0]
     3b8:	23fa      	movs	r3, #250	; 0xfa
     3ba:	009b      	lsls	r3, r3, #2
     3bc:	6083      	str	r3, [r0, #8]
     3be:	3010      	adds	r0, #16
     3c0:	4b06      	ldr	r3, [pc, #24]	; (3dc <_ZN9CDC_ClassC1Ev+0x30>)
     3c2:	4798      	blx	r3
     3c4:	4b06      	ldr	r3, [pc, #24]	; (3e0 <_ZN9CDC_ClassC1Ev+0x34>)
     3c6:	3308      	adds	r3, #8
     3c8:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
     3ca:	2301      	movs	r3, #1
     3cc:	425b      	negs	r3, r3
     3ce:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <_ZN9CDC_ClassC1Ev+0x38>)
     3d2:	601c      	str	r4, [r3, #0]
} //CDC_Class
     3d4:	0020      	movs	r0, r4
     3d6:	bd10      	pop	{r4, pc}
     3d8:	00007440 	.word	0x00007440
     3dc:	00000a15 	.word	0x00000a15
     3e0:	0000745c 	.word	0x0000745c
     3e4:	200004b8 	.word	0x200004b8

000003e8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
     3e8:	b510      	push	{r4, lr}
     3ea:	2801      	cmp	r0, #1
     3ec:	d000      	beq.n	3f0 <_Z41__static_initialization_and_destruction_0ii+0x8>
     3ee:	bd10      	pop	{r4, pc}
     3f0:	4b06      	ldr	r3, [pc, #24]	; (40c <_Z41__static_initialization_and_destruction_0ii+0x24>)
     3f2:	4299      	cmp	r1, r3
     3f4:	d1fb      	bne.n	3ee <_Z41__static_initialization_and_destruction_0ii+0x6>
     3f6:	4c06      	ldr	r4, [pc, #24]	; (410 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     3f8:	3404      	adds	r4, #4
     3fa:	0020      	movs	r0, r4
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     3fe:	4798      	blx	r3
     400:	4a05      	ldr	r2, [pc, #20]	; (418 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     402:	4906      	ldr	r1, [pc, #24]	; (41c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     404:	0020      	movs	r0, r4
     406:	4b06      	ldr	r3, [pc, #24]	; (420 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     408:	4798      	blx	r3
     40a:	e7f0      	b.n	3ee <_Z41__static_initialization_and_destruction_0ii+0x6>
     40c:	0000ffff 	.word	0x0000ffff
     410:	200004b8 	.word	0x200004b8
     414:	000003ad 	.word	0x000003ad
     418:	20000000 	.word	0x20000000
     41c:	000001bd 	.word	0x000001bd
     420:	00004ffd 	.word	0x00004ffd

00000424 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
     424:	b570      	push	{r4, r5, r6, lr}
     426:	0005      	movs	r5, r0
	OnInit();
     428:	3010      	adds	r0, #16
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <_ZN9CDC_Class4InitEv+0x20>)
     42c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     42e:	4906      	ldr	r1, [pc, #24]	; (448 <_ZN9CDC_Class4InitEv+0x24>)
     430:	2003      	movs	r0, #3
     432:	4b06      	ldr	r3, [pc, #24]	; (44c <_ZN9CDC_Class4InitEv+0x28>)
     434:	4798      	blx	r3
	delay_ms(100);
     436:	2064      	movs	r0, #100	; 0x64
     438:	4c05      	ldr	r4, [pc, #20]	; (450 <_ZN9CDC_Class4InitEv+0x2c>)
     43a:	47a0      	blx	r4
	if (connected)
     43c:	7c2b      	ldrb	r3, [r5, #16]
	delay_ms(100);
     43e:	2064      	movs	r0, #100	; 0x64
     440:	47a0      	blx	r4
}
     442:	bd70      	pop	{r4, r5, r6, pc}
     444:	00000a25 	.word	0x00000a25
     448:	000001d9 	.word	0x000001d9
     44c:	0000462d 	.word	0x0000462d
     450:	0000143d 	.word	0x0000143d

00000454 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
     454:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
     456:	4b01      	ldr	r3, [pc, #4]	; (45c <_ZN9CDC_Class9IsEnabledEv+0x8>)
     458:	4798      	blx	r3
}
     45a:	bd10      	pop	{r4, pc}
     45c:	0000467d 	.word	0x0000467d

00000460 <_GLOBAL__sub_I_ptrCDCClass>:
 CDC_Class	usb;
     460:	b510      	push	{r4, lr}
     462:	4902      	ldr	r1, [pc, #8]	; (46c <_GLOBAL__sub_I_ptrCDCClass+0xc>)
     464:	2001      	movs	r0, #1
     466:	4b02      	ldr	r3, [pc, #8]	; (470 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
     468:	4798      	blx	r3
     46a:	bd10      	pop	{r4, pc}
     46c:	0000ffff 	.word	0x0000ffff
     470:	000003e9 	.word	0x000003e9

00000474 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     474:	e7fe      	b.n	474 <Dummy_Handler>
	...

00000478 <Reset_Handler>:
{
     478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     47a:	4a23      	ldr	r2, [pc, #140]	; (508 <Reset_Handler+0x90>)
     47c:	4b23      	ldr	r3, [pc, #140]	; (50c <Reset_Handler+0x94>)
     47e:	429a      	cmp	r2, r3
     480:	d009      	beq.n	496 <Reset_Handler+0x1e>
     482:	4b22      	ldr	r3, [pc, #136]	; (50c <Reset_Handler+0x94>)
     484:	4a20      	ldr	r2, [pc, #128]	; (508 <Reset_Handler+0x90>)
     486:	e003      	b.n	490 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     488:	6811      	ldr	r1, [r2, #0]
     48a:	6019      	str	r1, [r3, #0]
     48c:	3304      	adds	r3, #4
     48e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     490:	491f      	ldr	r1, [pc, #124]	; (510 <Reset_Handler+0x98>)
     492:	428b      	cmp	r3, r1
     494:	d3f8      	bcc.n	488 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     496:	4b1f      	ldr	r3, [pc, #124]	; (514 <Reset_Handler+0x9c>)
     498:	e002      	b.n	4a0 <Reset_Handler+0x28>
                *pDest++ = 0;
     49a:	2200      	movs	r2, #0
     49c:	601a      	str	r2, [r3, #0]
     49e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     4a0:	4a1d      	ldr	r2, [pc, #116]	; (518 <Reset_Handler+0xa0>)
     4a2:	4293      	cmp	r3, r2
     4a4:	d3f9      	bcc.n	49a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4a6:	4a1d      	ldr	r2, [pc, #116]	; (51c <Reset_Handler+0xa4>)
     4a8:	21ff      	movs	r1, #255	; 0xff
     4aa:	4b1d      	ldr	r3, [pc, #116]	; (520 <Reset_Handler+0xa8>)
     4ac:	438b      	bics	r3, r1
     4ae:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     4b0:	39fd      	subs	r1, #253	; 0xfd
     4b2:	2390      	movs	r3, #144	; 0x90
     4b4:	005b      	lsls	r3, r3, #1
     4b6:	4a1b      	ldr	r2, [pc, #108]	; (524 <Reset_Handler+0xac>)
     4b8:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     4ba:	4a1b      	ldr	r2, [pc, #108]	; (528 <Reset_Handler+0xb0>)
     4bc:	78d3      	ldrb	r3, [r2, #3]
     4be:	2503      	movs	r5, #3
     4c0:	43ab      	bics	r3, r5
     4c2:	2402      	movs	r4, #2
     4c4:	4323      	orrs	r3, r4
     4c6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     4c8:	78d3      	ldrb	r3, [r2, #3]
     4ca:	270c      	movs	r7, #12
     4cc:	43bb      	bics	r3, r7
     4ce:	2608      	movs	r6, #8
     4d0:	4333      	orrs	r3, r6
     4d2:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     4d4:	4b15      	ldr	r3, [pc, #84]	; (52c <Reset_Handler+0xb4>)
     4d6:	7b98      	ldrb	r0, [r3, #14]
     4d8:	2230      	movs	r2, #48	; 0x30
     4da:	4390      	bics	r0, r2
     4dc:	2220      	movs	r2, #32
     4de:	4310      	orrs	r0, r2
     4e0:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     4e2:	7b99      	ldrb	r1, [r3, #14]
     4e4:	43b9      	bics	r1, r7
     4e6:	4331      	orrs	r1, r6
     4e8:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     4ea:	7b9a      	ldrb	r2, [r3, #14]
     4ec:	43aa      	bics	r2, r5
     4ee:	4322      	orrs	r2, r4
     4f0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     4f2:	4a0f      	ldr	r2, [pc, #60]	; (530 <Reset_Handler+0xb8>)
     4f4:	6851      	ldr	r1, [r2, #4]
     4f6:	2380      	movs	r3, #128	; 0x80
     4f8:	430b      	orrs	r3, r1
     4fa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     4fc:	4b0d      	ldr	r3, [pc, #52]	; (534 <Reset_Handler+0xbc>)
     4fe:	4798      	blx	r3
        main();
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <Reset_Handler+0xc0>)
     502:	4798      	blx	r3
     504:	e7fe      	b.n	504 <Reset_Handler+0x8c>
     506:	46c0      	nop			; (mov r8, r8)
     508:	00007860 	.word	0x00007860
     50c:	20000000 	.word	0x20000000
     510:	2000049c 	.word	0x2000049c
     514:	2000049c 	.word	0x2000049c
     518:	20000cec 	.word	0x20000cec
     51c:	e000ed00 	.word	0xe000ed00
     520:	00000000 	.word	0x00000000
     524:	41007000 	.word	0x41007000
     528:	41005000 	.word	0x41005000
     52c:	41004800 	.word	0x41004800
     530:	41004000 	.word	0x41004000
     534:	0000711d 	.word	0x0000711d
     538:	000005dd 	.word	0x000005dd

0000053c <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     53c:	2000      	movs	r0, #0
     53e:	4770      	bx	lr

00000540 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
     540:	4770      	bx	lr
	...

00000544 <_Z8usb_testv>:

#include <atmel_start.h>
#include "CDC_Class.h"


void usb_test(void){
     544:	b530      	push	{r4, r5, lr}
     546:	b083      	sub	sp, #12
	if (usb.available())
     548:	4817      	ldr	r0, [pc, #92]	; (5a8 <_Z8usb_testv+0x64>)
     54a:	4b18      	ldr	r3, [pc, #96]	; (5ac <_Z8usb_testv+0x68>)
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d101      	bne.n	556 <_Z8usb_testv+0x12>
			usb.println((float)inByte/23);
			
			usb<<"it does work"<<NEWLINE;
		}
	}
}
     552:	b003      	add	sp, #12
     554:	bd30      	pop	{r4, r5, pc}
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     556:	4c14      	ldr	r4, [pc, #80]	; (5a8 <_Z8usb_testv+0x64>)
     558:	4915      	ldr	r1, [pc, #84]	; (5b0 <_Z8usb_testv+0x6c>)
     55a:	0020      	movs	r0, r4
     55c:	4b15      	ldr	r3, [pc, #84]	; (5b4 <_Z8usb_testv+0x70>)
     55e:	4798      	blx	r3
		int inByte=usb.read();
     560:	0020      	movs	r0, r4
     562:	4b15      	ldr	r3, [pc, #84]	; (5b8 <_Z8usb_testv+0x74>)
     564:	4798      	blx	r3
     566:	0004      	movs	r4, r0
		if (inByte>33)
     568:	2821      	cmp	r0, #33	; 0x21
     56a:	ddf2      	ble.n	552 <_Z8usb_testv+0xe>
			usb.println(inByte);
     56c:	4d0e      	ldr	r5, [pc, #56]	; (5a8 <_Z8usb_testv+0x64>)
     56e:	220a      	movs	r2, #10
     570:	0001      	movs	r1, r0
     572:	0028      	movs	r0, r5
     574:	4b11      	ldr	r3, [pc, #68]	; (5bc <_Z8usb_testv+0x78>)
     576:	4798      	blx	r3
			usb.println((float)inByte/23);
     578:	0020      	movs	r0, r4
     57a:	4b11      	ldr	r3, [pc, #68]	; (5c0 <_Z8usb_testv+0x7c>)
     57c:	4798      	blx	r3
     57e:	4911      	ldr	r1, [pc, #68]	; (5c4 <_Z8usb_testv+0x80>)
     580:	4b11      	ldr	r3, [pc, #68]	; (5c8 <_Z8usb_testv+0x84>)
     582:	4798      	blx	r3
     584:	4b11      	ldr	r3, [pc, #68]	; (5cc <_Z8usb_testv+0x88>)
     586:	4798      	blx	r3
     588:	0002      	movs	r2, r0
     58a:	000b      	movs	r3, r1
     58c:	2102      	movs	r1, #2
     58e:	9100      	str	r1, [sp, #0]
     590:	0028      	movs	r0, r5
     592:	490f      	ldr	r1, [pc, #60]	; (5d0 <_Z8usb_testv+0x8c>)
     594:	4788      	blx	r1
     596:	490f      	ldr	r1, [pc, #60]	; (5d4 <_Z8usb_testv+0x90>)
     598:	0028      	movs	r0, r5
     59a:	4c06      	ldr	r4, [pc, #24]	; (5b4 <_Z8usb_testv+0x70>)
     59c:	47a0      	blx	r4
     59e:	490e      	ldr	r1, [pc, #56]	; (5d8 <_Z8usb_testv+0x94>)
     5a0:	0028      	movs	r0, r5
     5a2:	47a0      	blx	r4
}
     5a4:	e7d5      	b.n	552 <_Z8usb_testv+0xe>
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	200004bc 	.word	0x200004bc
     5ac:	000001ab 	.word	0x000001ab
     5b0:	0000748c 	.word	0x0000748c
     5b4:	00000631 	.word	0x00000631
     5b8:	00000219 	.word	0x00000219
     5bc:	00000755 	.word	0x00000755
     5c0:	00005481 	.word	0x00005481
     5c4:	41b80000 	.word	0x41b80000
     5c8:	000051f1 	.word	0x000051f1
     5cc:	00006fed 	.word	0x00006fed
     5d0:	0000098d 	.word	0x0000098d
     5d4:	0000749c 	.word	0x0000749c
     5d8:	000074ac 	.word	0x000074ac

000005dc <main>:

int main(void)
{
     5dc:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     5de:	4b05      	ldr	r3, [pc, #20]	; (5f4 <main+0x18>)
     5e0:	4798      	blx	r3
	
	usb.Init();
     5e2:	4805      	ldr	r0, [pc, #20]	; (5f8 <main+0x1c>)
     5e4:	4b05      	ldr	r3, [pc, #20]	; (5fc <main+0x20>)
     5e6:	4798      	blx	r3
	delay_ms(100);
     5e8:	2064      	movs	r0, #100	; 0x64
     5ea:	4b05      	ldr	r3, [pc, #20]	; (600 <main+0x24>)
     5ec:	4798      	blx	r3

	while (1) {
		usb_test();
     5ee:	4b05      	ldr	r3, [pc, #20]	; (604 <main+0x28>)
     5f0:	4798      	blx	r3
     5f2:	e7fc      	b.n	5ee <main+0x12>
     5f4:	00000c8d 	.word	0x00000c8d
     5f8:	200004bc 	.word	0x200004bc
     5fc:	00000425 	.word	0x00000425
     600:	0000143d 	.word	0x0000143d
     604:	00000545 	.word	0x00000545

00000608 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     60a:	0005      	movs	r5, r0
  size_t n = 0;
     60c:	2400      	movs	r4, #0
  while (size--) {
     60e:	1e56      	subs	r6, r2, #1
     610:	2a00      	cmp	r2, #0
     612:	d00b      	beq.n	62c <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     614:	682b      	ldr	r3, [r5, #0]
     616:	681b      	ldr	r3, [r3, #0]
     618:	1c4f      	adds	r7, r1, #1
     61a:	7809      	ldrb	r1, [r1, #0]
     61c:	0028      	movs	r0, r5
     61e:	4798      	blx	r3
     620:	2800      	cmp	r0, #0
     622:	d003      	beq.n	62c <_ZN5Print5writeEPKhj+0x24>
     624:	3401      	adds	r4, #1
  while (size--) {
     626:	0032      	movs	r2, r6
    if (write(*buffer++)) n++;
     628:	0039      	movs	r1, r7
  while (size--) {
     62a:	e7f0      	b.n	60e <_ZN5Print5writeEPKhj+0x6>
    else break;
  }
  return n;
}
     62c:	0020      	movs	r0, r4
     62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000630 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	0005      	movs	r5, r0
     634:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
     636:	d009      	beq.n	64c <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
     638:	0008      	movs	r0, r1
     63a:	4b05      	ldr	r3, [pc, #20]	; (650 <_ZN5Print5printEPKc+0x20>)
     63c:	4798      	blx	r3
     63e:	0002      	movs	r2, r0
     640:	682b      	ldr	r3, [r5, #0]
     642:	685b      	ldr	r3, [r3, #4]
     644:	0021      	movs	r1, r4
     646:	0028      	movs	r0, r5
     648:	4798      	blx	r3
  return write(str);
}
     64a:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     64c:	2000      	movs	r0, #0
  return write(str);
     64e:	e7fc      	b.n	64a <_ZN5Print5printEPKc+0x1a>
     650:	0000727d 	.word	0x0000727d

00000654 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     654:	b510      	push	{r4, lr}
  return write(c);
     656:	6803      	ldr	r3, [r0, #0]
     658:	681b      	ldr	r3, [r3, #0]
     65a:	4798      	blx	r3
}
     65c:	bd10      	pop	{r4, pc}
	...

00000660 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     660:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
     662:	6803      	ldr	r3, [r0, #0]
     664:	685b      	ldr	r3, [r3, #4]
     666:	2202      	movs	r2, #2
     668:	4901      	ldr	r1, [pc, #4]	; (670 <_ZN5Print7printlnEv+0x10>)
     66a:	4798      	blx	r3
  return write("\r\n");
}
     66c:	bd10      	pop	{r4, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	000074ac 	.word	0x000074ac

00000674 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     674:	b5f0      	push	{r4, r5, r6, r7, lr}
     676:	46ce      	mov	lr, r9
     678:	b500      	push	{lr}
     67a:	b08c      	sub	sp, #48	; 0x30
     67c:	4681      	mov	r9, r0
     67e:	000d      	movs	r5, r1
     680:	0010      	movs	r0, r2
     682:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     684:	2100      	movs	r1, #0
     686:	2320      	movs	r3, #32
     688:	aa03      	add	r2, sp, #12
     68a:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     68c:	2801      	cmp	r0, #1
     68e:	dd01      	ble.n	694 <_ZN5Print11printNumberEmh+0x20>
     690:	ae0b      	add	r6, sp, #44	; 0x2c
     692:	e007      	b.n	6a4 <_ZN5Print11printNumberEmh+0x30>
     694:	230a      	movs	r3, #10
     696:	9301      	str	r3, [sp, #4]
     698:	e7fa      	b.n	690 <_ZN5Print11printNumberEmh+0x1c>

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     69a:	3437      	adds	r4, #55	; 0x37
     69c:	b2e4      	uxtb	r4, r4
     69e:	7034      	strb	r4, [r6, #0]
  } while(n);
     6a0:	2d00      	cmp	r5, #0
     6a2:	d012      	beq.n	6ca <_ZN5Print11printNumberEmh+0x56>
    char c = n % base;
     6a4:	9901      	ldr	r1, [sp, #4]
     6a6:	0028      	movs	r0, r5
     6a8:	4b11      	ldr	r3, [pc, #68]	; (6f0 <_ZN5Print11printNumberEmh+0x7c>)
     6aa:	4798      	blx	r3
     6ac:	000f      	movs	r7, r1
     6ae:	b2cc      	uxtb	r4, r1
    n /= base;
     6b0:	9901      	ldr	r1, [sp, #4]
     6b2:	0028      	movs	r0, r5
     6b4:	4b0f      	ldr	r3, [pc, #60]	; (6f4 <_ZN5Print11printNumberEmh+0x80>)
     6b6:	4798      	blx	r3
     6b8:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6ba:	3e01      	subs	r6, #1
     6bc:	23ff      	movs	r3, #255	; 0xff
     6be:	401f      	ands	r7, r3
     6c0:	2f09      	cmp	r7, #9
     6c2:	dcea      	bgt.n	69a <_ZN5Print11printNumberEmh+0x26>
     6c4:	3430      	adds	r4, #48	; 0x30
     6c6:	b2e4      	uxtb	r4, r4
     6c8:	e7e9      	b.n	69e <_ZN5Print11printNumberEmh+0x2a>
      if (str == NULL) return 0;
     6ca:	2e00      	cmp	r6, #0
     6cc:	d00d      	beq.n	6ea <_ZN5Print11printNumberEmh+0x76>
      return write((const uint8_t *)str, strlen(str));
     6ce:	0030      	movs	r0, r6
     6d0:	4b09      	ldr	r3, [pc, #36]	; (6f8 <_ZN5Print11printNumberEmh+0x84>)
     6d2:	4798      	blx	r3
     6d4:	0002      	movs	r2, r0
     6d6:	464b      	mov	r3, r9
     6d8:	681b      	ldr	r3, [r3, #0]
     6da:	685b      	ldr	r3, [r3, #4]
     6dc:	0031      	movs	r1, r6
     6de:	4648      	mov	r0, r9
     6e0:	4798      	blx	r3

  return write(str);
}
     6e2:	b00c      	add	sp, #48	; 0x30
     6e4:	bc04      	pop	{r2}
     6e6:	4691      	mov	r9, r2
     6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
     6ea:	2000      	movs	r0, #0
  return write(str);
     6ec:	e7f9      	b.n	6e2 <_ZN5Print11printNumberEmh+0x6e>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	00005119 	.word	0x00005119
     6f4:	0000500d 	.word	0x0000500d
     6f8:	0000727d 	.word	0x0000727d

000006fc <_ZN5Print5printEli>:
{
     6fc:	b570      	push	{r4, r5, r6, lr}
     6fe:	0005      	movs	r5, r0
     700:	000c      	movs	r4, r1
  if (base == 0) {
     702:	2a00      	cmp	r2, #0
     704:	d005      	beq.n	712 <_ZN5Print5printEli+0x16>
  } else if (base == 10) {
     706:	2a0a      	cmp	r2, #10
     708:	d008      	beq.n	71c <_ZN5Print5printEli+0x20>
    return printNumber(n, base);
     70a:	b2d2      	uxtb	r2, r2
     70c:	4b0c      	ldr	r3, [pc, #48]	; (740 <_ZN5Print5printEli+0x44>)
     70e:	4798      	blx	r3
}
     710:	bd70      	pop	{r4, r5, r6, pc}
    return write(n);
     712:	b2c9      	uxtb	r1, r1
     714:	6803      	ldr	r3, [r0, #0]
     716:	681b      	ldr	r3, [r3, #0]
     718:	4798      	blx	r3
     71a:	e7f9      	b.n	710 <_ZN5Print5printEli+0x14>
    if (n < 0) {
     71c:	2900      	cmp	r1, #0
     71e:	db03      	blt.n	728 <_ZN5Print5printEli+0x2c>
    return printNumber(n, 10);
     720:	220a      	movs	r2, #10
     722:	4b07      	ldr	r3, [pc, #28]	; (740 <_ZN5Print5printEli+0x44>)
     724:	4798      	blx	r3
     726:	e7f3      	b.n	710 <_ZN5Print5printEli+0x14>
      int t = print('-');
     728:	212d      	movs	r1, #45	; 0x2d
     72a:	4b06      	ldr	r3, [pc, #24]	; (744 <_ZN5Print5printEli+0x48>)
     72c:	4798      	blx	r3
     72e:	0006      	movs	r6, r0
      n = -n;
     730:	4261      	negs	r1, r4
      return printNumber(n, 10) + t;
     732:	220a      	movs	r2, #10
     734:	0028      	movs	r0, r5
     736:	4b02      	ldr	r3, [pc, #8]	; (740 <_ZN5Print5printEli+0x44>)
     738:	4798      	blx	r3
     73a:	1830      	adds	r0, r6, r0
     73c:	e7e8      	b.n	710 <_ZN5Print5printEli+0x14>
     73e:	46c0      	nop			; (mov r8, r8)
     740:	00000675 	.word	0x00000675
     744:	00000655 	.word	0x00000655

00000748 <_ZN5Print5printEii>:
{
     748:	b510      	push	{r4, lr}
  return print((long) n, base);
     74a:	4b01      	ldr	r3, [pc, #4]	; (750 <_ZN5Print5printEii+0x8>)
     74c:	4798      	blx	r3
}
     74e:	bd10      	pop	{r4, pc}
     750:	000006fd 	.word	0x000006fd

00000754 <_ZN5Print7printlnEii>:
{
     754:	b570      	push	{r4, r5, r6, lr}
     756:	0005      	movs	r5, r0
  size_t n = print(num, base);
     758:	4b03      	ldr	r3, [pc, #12]	; (768 <_ZN5Print7printlnEii+0x14>)
     75a:	4798      	blx	r3
     75c:	0004      	movs	r4, r0
  n += println();
     75e:	0028      	movs	r0, r5
     760:	4b02      	ldr	r3, [pc, #8]	; (76c <_ZN5Print7printlnEii+0x18>)
     762:	4798      	blx	r3
     764:	1820      	adds	r0, r4, r0
}
     766:	bd70      	pop	{r4, r5, r6, pc}
     768:	00000749 	.word	0x00000749
     76c:	00000661 	.word	0x00000661

00000770 <_ZN5Print5printEmi>:
{
     770:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     772:	2a00      	cmp	r2, #0
     774:	d003      	beq.n	77e <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
     776:	b2d2      	uxtb	r2, r2
     778:	4b03      	ldr	r3, [pc, #12]	; (788 <_ZN5Print5printEmi+0x18>)
     77a:	4798      	blx	r3
}
     77c:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
     77e:	b2c9      	uxtb	r1, r1
     780:	6803      	ldr	r3, [r0, #0]
     782:	681b      	ldr	r3, [r3, #0]
     784:	4798      	blx	r3
     786:	e7f9      	b.n	77c <_ZN5Print5printEmi+0xc>
     788:	00000675 	.word	0x00000675

0000078c <_ZN5Print5printEji>:
{
     78c:	b510      	push	{r4, lr}
  return print((unsigned long) n, base);
     78e:	4b01      	ldr	r3, [pc, #4]	; (794 <_ZN5Print5printEji+0x8>)
     790:	4798      	blx	r3
}
     792:	bd10      	pop	{r4, pc}
     794:	00000771 	.word	0x00000771

00000798 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     798:	b5f0      	push	{r4, r5, r6, r7, lr}
     79a:	46c6      	mov	lr, r8
     79c:	b500      	push	{lr}
     79e:	b084      	sub	sp, #16
     7a0:	9003      	str	r0, [sp, #12]
     7a2:	0014      	movs	r4, r2
     7a4:	9200      	str	r2, [sp, #0]
     7a6:	001e      	movs	r6, r3
     7a8:	ab0a      	add	r3, sp, #40	; 0x28
     7aa:	781d      	ldrb	r5, [r3, #0]
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
     7ac:	0022      	movs	r2, r4
     7ae:	0033      	movs	r3, r6
     7b0:	0020      	movs	r0, r4
     7b2:	0031      	movs	r1, r6
     7b4:	4f58      	ldr	r7, [pc, #352]	; (918 <_ZN5Print10printFloatEdh+0x180>)
     7b6:	47b8      	blx	r7
     7b8:	2800      	cmp	r0, #0
     7ba:	d13e      	bne.n	83a <_ZN5Print10printFloatEdh+0xa2>
     7bc:	2300      	movs	r3, #0
  size_t n = 0;

  if (isnan(number)) return print("nan");
     7be:	2b00      	cmp	r3, #0
     7c0:	d13d      	bne.n	83e <_ZN5Print10printFloatEdh+0xa6>
  { return __builtin_isinf(__x); }
     7c2:	0077      	lsls	r7, r6, #1
     7c4:	087f      	lsrs	r7, r7, #1
  if (isinf(number)) return print("inf");
     7c6:	2201      	movs	r2, #1
     7c8:	4252      	negs	r2, r2
     7ca:	4b54      	ldr	r3, [pc, #336]	; (91c <_ZN5Print10printFloatEdh+0x184>)
     7cc:	9800      	ldr	r0, [sp, #0]
     7ce:	0039      	movs	r1, r7
     7d0:	4c51      	ldr	r4, [pc, #324]	; (918 <_ZN5Print10printFloatEdh+0x180>)
     7d2:	47a0      	blx	r4
     7d4:	2800      	cmp	r0, #0
     7d6:	d108      	bne.n	7ea <_ZN5Print10printFloatEdh+0x52>
     7d8:	2201      	movs	r2, #1
     7da:	4252      	negs	r2, r2
     7dc:	4b4f      	ldr	r3, [pc, #316]	; (91c <_ZN5Print10printFloatEdh+0x184>)
     7de:	9800      	ldr	r0, [sp, #0]
     7e0:	0039      	movs	r1, r7
     7e2:	4f4f      	ldr	r7, [pc, #316]	; (920 <_ZN5Print10printFloatEdh+0x188>)
     7e4:	47b8      	blx	r7
     7e6:	2800      	cmp	r0, #0
     7e8:	d033      	beq.n	852 <_ZN5Print10printFloatEdh+0xba>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     7ea:	22e0      	movs	r2, #224	; 0xe0
     7ec:	0612      	lsls	r2, r2, #24
     7ee:	4b4d      	ldr	r3, [pc, #308]	; (924 <_ZN5Print10printFloatEdh+0x18c>)
     7f0:	9800      	ldr	r0, [sp, #0]
     7f2:	0031      	movs	r1, r6
     7f4:	4f4c      	ldr	r7, [pc, #304]	; (928 <_ZN5Print10printFloatEdh+0x190>)
     7f6:	47b8      	blx	r7
     7f8:	2800      	cmp	r0, #0
     7fa:	d130      	bne.n	85e <_ZN5Print10printFloatEdh+0xc6>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     7fc:	22e0      	movs	r2, #224	; 0xe0
     7fe:	0612      	lsls	r2, r2, #24
     800:	4b4a      	ldr	r3, [pc, #296]	; (92c <_ZN5Print10printFloatEdh+0x194>)
     802:	9800      	ldr	r0, [sp, #0]
     804:	0031      	movs	r1, r6
     806:	4f4a      	ldr	r7, [pc, #296]	; (930 <_ZN5Print10printFloatEdh+0x198>)
     808:	47b8      	blx	r7
     80a:	2800      	cmp	r0, #0
     80c:	d12d      	bne.n	86a <_ZN5Print10printFloatEdh+0xd2>

  // Handle negative numbers
  if (number < 0.0)
     80e:	2200      	movs	r2, #0
     810:	2300      	movs	r3, #0
     812:	9800      	ldr	r0, [sp, #0]
     814:	0031      	movs	r1, r6
     816:	4f46      	ldr	r7, [pc, #280]	; (930 <_ZN5Print10printFloatEdh+0x198>)
     818:	47b8      	blx	r7
     81a:	2800      	cmp	r0, #0
     81c:	d12b      	bne.n	876 <_ZN5Print10printFloatEdh+0xde>
  size_t n = 0;
     81e:	2300      	movs	r3, #0
     820:	4698      	mov	r8, r3
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     822:	2400      	movs	r4, #0
  double rounding = 0.5;
     824:	2000      	movs	r0, #0
     826:	4943      	ldr	r1, [pc, #268]	; (934 <_ZN5Print10printFloatEdh+0x19c>)
  for (uint8_t i=0; i<digits; ++i)
     828:	42ac      	cmp	r4, r5
     82a:	da2e      	bge.n	88a <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
     82c:	2200      	movs	r2, #0
     82e:	4b42      	ldr	r3, [pc, #264]	; (938 <_ZN5Print10printFloatEdh+0x1a0>)
     830:	4f42      	ldr	r7, [pc, #264]	; (93c <_ZN5Print10printFloatEdh+0x1a4>)
     832:	47b8      	blx	r7
  for (uint8_t i=0; i<digits; ++i)
     834:	3401      	adds	r4, #1
     836:	b2e4      	uxtb	r4, r4
     838:	e7f6      	b.n	828 <_ZN5Print10printFloatEdh+0x90>
  { return __builtin_isnan(__x); }
     83a:	2301      	movs	r3, #1
     83c:	e7bf      	b.n	7be <_ZN5Print10printFloatEdh+0x26>
  if (isnan(number)) return print("nan");
     83e:	4940      	ldr	r1, [pc, #256]	; (940 <_ZN5Print10printFloatEdh+0x1a8>)
     840:	9803      	ldr	r0, [sp, #12]
     842:	4b40      	ldr	r3, [pc, #256]	; (944 <_ZN5Print10printFloatEdh+0x1ac>)
     844:	4798      	blx	r3
     846:	0006      	movs	r6, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     848:	0030      	movs	r0, r6
     84a:	b004      	add	sp, #16
     84c:	bc04      	pop	{r2}
     84e:	4690      	mov	r8, r2
     850:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isinf(number)) return print("inf");
     852:	493d      	ldr	r1, [pc, #244]	; (948 <_ZN5Print10printFloatEdh+0x1b0>)
     854:	9803      	ldr	r0, [sp, #12]
     856:	4b3b      	ldr	r3, [pc, #236]	; (944 <_ZN5Print10printFloatEdh+0x1ac>)
     858:	4798      	blx	r3
     85a:	0006      	movs	r6, r0
     85c:	e7f4      	b.n	848 <_ZN5Print10printFloatEdh+0xb0>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     85e:	493b      	ldr	r1, [pc, #236]	; (94c <_ZN5Print10printFloatEdh+0x1b4>)
     860:	9803      	ldr	r0, [sp, #12]
     862:	4b38      	ldr	r3, [pc, #224]	; (944 <_ZN5Print10printFloatEdh+0x1ac>)
     864:	4798      	blx	r3
     866:	0006      	movs	r6, r0
     868:	e7ee      	b.n	848 <_ZN5Print10printFloatEdh+0xb0>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     86a:	4938      	ldr	r1, [pc, #224]	; (94c <_ZN5Print10printFloatEdh+0x1b4>)
     86c:	9803      	ldr	r0, [sp, #12]
     86e:	4b35      	ldr	r3, [pc, #212]	; (944 <_ZN5Print10printFloatEdh+0x1ac>)
     870:	4798      	blx	r3
     872:	0006      	movs	r6, r0
     874:	e7e8      	b.n	848 <_ZN5Print10printFloatEdh+0xb0>
     n += print('-');
     876:	212d      	movs	r1, #45	; 0x2d
     878:	9803      	ldr	r0, [sp, #12]
     87a:	4b35      	ldr	r3, [pc, #212]	; (950 <_ZN5Print10printFloatEdh+0x1b8>)
     87c:	4798      	blx	r3
     87e:	4680      	mov	r8, r0
     number = -number;
     880:	2380      	movs	r3, #128	; 0x80
     882:	061b      	lsls	r3, r3, #24
     884:	469c      	mov	ip, r3
     886:	4466      	add	r6, ip
     888:	e7cb      	b.n	822 <_ZN5Print10printFloatEdh+0x8a>
  number += rounding;
     88a:	0002      	movs	r2, r0
     88c:	000b      	movs	r3, r1
     88e:	9800      	ldr	r0, [sp, #0]
     890:	0031      	movs	r1, r6
     892:	4c30      	ldr	r4, [pc, #192]	; (954 <_ZN5Print10printFloatEdh+0x1bc>)
     894:	47a0      	blx	r4
  unsigned long int_part = (unsigned long)number;
     896:	9000      	str	r0, [sp, #0]
     898:	9101      	str	r1, [sp, #4]
     89a:	4b2f      	ldr	r3, [pc, #188]	; (958 <_ZN5Print10printFloatEdh+0x1c0>)
     89c:	4798      	blx	r3
     89e:	0006      	movs	r6, r0
  double remainder = number - (double)int_part;
     8a0:	4b2e      	ldr	r3, [pc, #184]	; (95c <_ZN5Print10printFloatEdh+0x1c4>)
     8a2:	4798      	blx	r3
     8a4:	0002      	movs	r2, r0
     8a6:	000b      	movs	r3, r1
     8a8:	9800      	ldr	r0, [sp, #0]
     8aa:	9901      	ldr	r1, [sp, #4]
     8ac:	4c2c      	ldr	r4, [pc, #176]	; (960 <_ZN5Print10printFloatEdh+0x1c8>)
     8ae:	47a0      	blx	r4
     8b0:	9000      	str	r0, [sp, #0]
     8b2:	9101      	str	r1, [sp, #4]
  n += print(int_part);
     8b4:	220a      	movs	r2, #10
     8b6:	0031      	movs	r1, r6
     8b8:	9c03      	ldr	r4, [sp, #12]
     8ba:	0020      	movs	r0, r4
     8bc:	4b29      	ldr	r3, [pc, #164]	; (964 <_ZN5Print10printFloatEdh+0x1cc>)
     8be:	4798      	blx	r3
     8c0:	4440      	add	r0, r8
     8c2:	0006      	movs	r6, r0
  if (digits > 0) {
     8c4:	2d00      	cmp	r5, #0
     8c6:	dd04      	ble.n	8d2 <_ZN5Print10printFloatEdh+0x13a>
    n += print('.');
     8c8:	212e      	movs	r1, #46	; 0x2e
     8ca:	0020      	movs	r0, r4
     8cc:	4b20      	ldr	r3, [pc, #128]	; (950 <_ZN5Print10printFloatEdh+0x1b8>)
     8ce:	4798      	blx	r3
     8d0:	1836      	adds	r6, r6, r0
  while (digits-- > 0)
     8d2:	1e6f      	subs	r7, r5, #1
     8d4:	b2ff      	uxtb	r7, r7
     8d6:	2d00      	cmp	r5, #0
     8d8:	ddb6      	ble.n	848 <_ZN5Print10printFloatEdh+0xb0>
    remainder *= 10.0;
     8da:	2200      	movs	r2, #0
     8dc:	4b16      	ldr	r3, [pc, #88]	; (938 <_ZN5Print10printFloatEdh+0x1a0>)
     8de:	9800      	ldr	r0, [sp, #0]
     8e0:	9901      	ldr	r1, [sp, #4]
     8e2:	4c21      	ldr	r4, [pc, #132]	; (968 <_ZN5Print10printFloatEdh+0x1d0>)
     8e4:	47a0      	blx	r4
     8e6:	0004      	movs	r4, r0
     8e8:	000d      	movs	r5, r1
    unsigned int toPrint = (unsigned int)(remainder);
     8ea:	4b1b      	ldr	r3, [pc, #108]	; (958 <_ZN5Print10printFloatEdh+0x1c0>)
     8ec:	4798      	blx	r3
    n += print(toPrint);
     8ee:	220a      	movs	r2, #10
     8f0:	9000      	str	r0, [sp, #0]
     8f2:	0001      	movs	r1, r0
     8f4:	9803      	ldr	r0, [sp, #12]
     8f6:	4b1d      	ldr	r3, [pc, #116]	; (96c <_ZN5Print10printFloatEdh+0x1d4>)
     8f8:	4798      	blx	r3
     8fa:	1836      	adds	r6, r6, r0
    remainder -= toPrint;
     8fc:	9800      	ldr	r0, [sp, #0]
     8fe:	4b17      	ldr	r3, [pc, #92]	; (95c <_ZN5Print10printFloatEdh+0x1c4>)
     900:	4798      	blx	r3
     902:	0002      	movs	r2, r0
     904:	000b      	movs	r3, r1
     906:	0020      	movs	r0, r4
     908:	0029      	movs	r1, r5
     90a:	4c15      	ldr	r4, [pc, #84]	; (960 <_ZN5Print10printFloatEdh+0x1c8>)
     90c:	47a0      	blx	r4
     90e:	9000      	str	r0, [sp, #0]
     910:	9101      	str	r1, [sp, #4]
  while (digits-- > 0)
     912:	003d      	movs	r5, r7
     914:	e7dd      	b.n	8d2 <_ZN5Print10printFloatEdh+0x13a>
     916:	46c0      	nop			; (mov r8, r8)
     918:	00006ed5 	.word	0x00006ed5
     91c:	7fefffff 	.word	0x7fefffff
     920:	00005165 	.word	0x00005165
     924:	41efffff 	.word	0x41efffff
     928:	00005179 	.word	0x00005179
     92c:	c1efffff 	.word	0xc1efffff
     930:	00005151 	.word	0x00005151
     934:	3fe00000 	.word	0x3fe00000
     938:	40240000 	.word	0x40240000
     93c:	00005b41 	.word	0x00005b41
     940:	000074b8 	.word	0x000074b8
     944:	00000631 	.word	0x00000631
     948:	000074bc 	.word	0x000074bc
     94c:	000074c0 	.word	0x000074c0
     950:	00000655 	.word	0x00000655
     954:	00005521 	.word	0x00005521
     958:	000051b5 	.word	0x000051b5
     95c:	00006f7d 	.word	0x00006f7d
     960:	000068a9 	.word	0x000068a9
     964:	00000771 	.word	0x00000771
     968:	000063a9 	.word	0x000063a9
     96c:	0000078d 	.word	0x0000078d

00000970 <_ZN5Print5printEdi>:
{
     970:	b530      	push	{r4, r5, lr}
     972:	b083      	sub	sp, #12
     974:	001d      	movs	r5, r3
  return printFloat(n, digits);
     976:	466b      	mov	r3, sp
     978:	7e1b      	ldrb	r3, [r3, #24]
     97a:	9300      	str	r3, [sp, #0]
     97c:	002b      	movs	r3, r5
     97e:	4902      	ldr	r1, [pc, #8]	; (988 <_ZN5Print5printEdi+0x18>)
     980:	4788      	blx	r1
}
     982:	b003      	add	sp, #12
     984:	bd30      	pop	{r4, r5, pc}
     986:	46c0      	nop			; (mov r8, r8)
     988:	00000799 	.word	0x00000799

0000098c <_ZN5Print7printlnEdi>:
{
     98c:	b530      	push	{r4, r5, lr}
     98e:	b083      	sub	sp, #12
     990:	0005      	movs	r5, r0
  size_t n = print(num, digits);
     992:	9906      	ldr	r1, [sp, #24]
     994:	9100      	str	r1, [sp, #0]
     996:	4904      	ldr	r1, [pc, #16]	; (9a8 <_ZN5Print7printlnEdi+0x1c>)
     998:	4788      	blx	r1
     99a:	0004      	movs	r4, r0
  n += println();
     99c:	0028      	movs	r0, r5
     99e:	4b03      	ldr	r3, [pc, #12]	; (9ac <_ZN5Print7printlnEdi+0x20>)
     9a0:	4798      	blx	r3
     9a2:	1820      	adds	r0, r4, r0
}
     9a4:	b003      	add	sp, #12
     9a6:	bd30      	pop	{r4, r5, pc}
     9a8:	00000971 	.word	0x00000971
     9ac:	00000661 	.word	0x00000661

000009b0 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
     9b0:	4b03      	ldr	r3, [pc, #12]	; (9c0 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
     9b2:	2201      	movs	r2, #1
     9b4:	6819      	ldr	r1, [r3, #0]
     9b6:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->plugged=false;
     9b8:	681b      	ldr	r3, [r3, #0]
     9ba:	2200      	movs	r2, #0
     9bc:	705a      	strb	r2, [r3, #1]
}
     9be:	4770      	bx	lr
     9c0:	2000051c 	.word	0x2000051c

000009c4 <_ZL10USBPluggedv>:

static void USBPlugged(void){
     9c4:	b510      	push	{r4, lr}
     9c6:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     9c8:	a801      	add	r0, sp, #4
     9ca:	4b0e      	ldr	r3, [pc, #56]	; (a04 <_ZL10USBPluggedv+0x40>)
     9cc:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     9ce:	23c0      	movs	r3, #192	; 0xc0
     9d0:	05db      	lsls	r3, r3, #23
     9d2:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     9d4:	4a0c      	ldr	r2, [pc, #48]	; (a08 <_ZL10USBPluggedv+0x44>)
     9d6:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     9d8:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     9da:	4053      	eors	r3, r2
     9dc:	401c      	ands	r4, r3
     9de:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     9e0:	a801      	add	r0, sp, #4
     9e2:	4b0a      	ldr	r3, [pc, #40]	; (a0c <_ZL10USBPluggedv+0x48>)
     9e4:	4798      	blx	r3
	if (gpio_get_pin_level(PIN_PA14))
     9e6:	0463      	lsls	r3, r4, #17
     9e8:	d407      	bmi.n	9fa <_ZL10USBPluggedv+0x36>
	{
		ptrSerialTerminalClass->plugged=true;
	} 
	else
	{
		ptrSerialTerminalClass->plugged=false;
     9ea:	4a09      	ldr	r2, [pc, #36]	; (a10 <_ZL10USBPluggedv+0x4c>)
     9ec:	2300      	movs	r3, #0
     9ee:	6811      	ldr	r1, [r2, #0]
     9f0:	704b      	strb	r3, [r1, #1]
		ptrSerialTerminalClass->connected=false;
     9f2:	6812      	ldr	r2, [r2, #0]
     9f4:	7013      	strb	r3, [r2, #0]
	}
	
}
     9f6:	b002      	add	sp, #8
     9f8:	bd10      	pop	{r4, pc}
		ptrSerialTerminalClass->plugged=true;
     9fa:	4b05      	ldr	r3, [pc, #20]	; (a10 <_ZL10USBPluggedv+0x4c>)
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	2201      	movs	r2, #1
     a00:	705a      	strb	r2, [r3, #1]
     a02:	e7f8      	b.n	9f6 <_ZL10USBPluggedv+0x32>
     a04:	000013bd 	.word	0x000013bd
     a08:	41004400 	.word	0x41004400
     a0c:	000013cb 	.word	0x000013cb
     a10:	2000051c 	.word	0x2000051c

00000a14 <_ZN20SerialTerminal_ClassC1Ev>:


// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
     a14:	4b01      	ldr	r3, [pc, #4]	; (a1c <_ZN20SerialTerminal_ClassC1Ev+0x8>)
     a16:	6018      	str	r0, [r3, #0]
	
} //SerialTerminal_Class
     a18:	4770      	bx	lr
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	2000051c 	.word	0x2000051c

00000a20 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
     a20:	4770      	bx	lr
	...

00000a24 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
     a24:	b530      	push	{r4, r5, lr}
     a26:	b083      	sub	sp, #12
     a28:	0005      	movs	r5, r0
		ext_irq_register(PIN_PA14, USBPlugged);
     a2a:	491e      	ldr	r1, [pc, #120]	; (aa4 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
     a2c:	200e      	movs	r0, #14
     a2e:	4b1e      	ldr	r3, [pc, #120]	; (aa8 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
     a30:	4798      	blx	r3
		if (usbTerminalTimer.Init())
     a32:	481e      	ldr	r0, [pc, #120]	; (aac <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
     a34:	4b1e      	ldr	r3, [pc, #120]	; (ab0 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
     a36:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     a38:	a801      	add	r0, sp, #4
     a3a:	4b1e      	ldr	r3, [pc, #120]	; (ab4 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
     a3c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     a3e:	23c0      	movs	r3, #192	; 0xc0
     a40:	05db      	lsls	r3, r3, #23
     a42:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     a44:	4a1c      	ldr	r2, [pc, #112]	; (ab8 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
     a46:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     a48:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     a4a:	4053      	eors	r3, r2
     a4c:	401c      	ands	r4, r3
     a4e:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     a50:	a801      	add	r0, sp, #4
     a52:	4b1a      	ldr	r3, [pc, #104]	; (abc <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
     a54:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     a56:	2380      	movs	r3, #128	; 0x80
     a58:	01db      	lsls	r3, r3, #7
     a5a:	401c      	ands	r4, r3
     a5c:	1e63      	subs	r3, r4, #1
     a5e:	419c      	sbcs	r4, r3
     a60:	b2e4      	uxtb	r4, r4
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(PIN_PA14);
     a62:	70ec      	strb	r4, [r5, #3]
		if (vbusDetected)
     a64:	2c00      	cmp	r4, #0
     a66:	d104      	bne.n	a72 <_ZN20SerialTerminal_Class6OnInitEv+0x4e>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			connected=false;
     a68:	2300      	movs	r3, #0
     a6a:	702b      	strb	r3, [r5, #0]
			plugged=false;
     a6c:	706b      	strb	r3, [r5, #1]
		}
		
}
     a6e:	b003      	add	sp, #12
     a70:	bd30      	pop	{r4, r5, pc}
			timeout=false;
     a72:	2300      	movs	r3, #0
     a74:	70ab      	strb	r3, [r5, #2]
			plugged=true;
     a76:	3301      	adds	r3, #1
     a78:	706b      	strb	r3, [r5, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
     a7a:	2296      	movs	r2, #150	; 0x96
     a7c:	0092      	lsls	r2, r2, #2
     a7e:	4910      	ldr	r1, [pc, #64]	; (ac0 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
     a80:	480a      	ldr	r0, [pc, #40]	; (aac <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
     a82:	4b10      	ldr	r3, [pc, #64]	; (ac4 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
     a84:	4798      	blx	r3
			while ((!usb.IsEnabled())){
     a86:	4810      	ldr	r0, [pc, #64]	; (ac8 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
     a88:	4b10      	ldr	r3, [pc, #64]	; (acc <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
     a8a:	4798      	blx	r3
     a8c:	2800      	cmp	r0, #0
     a8e:	d105      	bne.n	a9c <_ZN20SerialTerminal_Class6OnInitEv+0x78>
				if (timeout)
     a90:	78ab      	ldrb	r3, [r5, #2]
     a92:	2b00      	cmp	r3, #0
     a94:	d0f7      	beq.n	a86 <_ZN20SerialTerminal_Class6OnInitEv+0x62>
					connected=false;
     a96:	2300      	movs	r3, #0
     a98:	702b      	strb	r3, [r5, #0]
					return;
     a9a:	e7e8      	b.n	a6e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
			usbTerminalTimer.Stop();
     a9c:	4803      	ldr	r0, [pc, #12]	; (aac <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
     a9e:	4b0c      	ldr	r3, [pc, #48]	; (ad0 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
     aa0:	4798      	blx	r3
     aa2:	e7e4      	b.n	a6e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
     aa4:	000009c5 	.word	0x000009c5
     aa8:	000014d5 	.word	0x000014d5
     aac:	20000524 	.word	0x20000524
     ab0:	00000b4d 	.word	0x00000b4d
     ab4:	000013bd 	.word	0x000013bd
     ab8:	41004400 	.word	0x41004400
     abc:	000013cb 	.word	0x000013cb
     ac0:	000009b1 	.word	0x000009b1
     ac4:	00000bfd 	.word	0x00000bfd
     ac8:	200004bc 	.word	0x200004bc
     acc:	00000455 	.word	0x00000455
     ad0:	00000b6d 	.word	0x00000b6d

00000ad4 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
     ad4:	2300      	movs	r3, #0
     ad6:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
     ad8:	4770      	bx	lr
	...

00000adc <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
     adc:	6101      	str	r1, [r0, #16]
	ptrTimerSerialClass=this;
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
     ae0:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
     ae2:	2380      	movs	r3, #128	; 0x80
     ae4:	00db      	lsls	r3, r3, #3
     ae6:	6183      	str	r3, [r0, #24]
	task->cb=task_cb;
     ae8:	6883      	ldr	r3, [r0, #8]
     aea:	4a02      	ldr	r2, [pc, #8]	; (af4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
     aec:	60da      	str	r2, [r3, #12]
} //Timer_Class
     aee:	4770      	bx	lr
     af0:	20000520 	.word	0x20000520
     af4:	00000b89 	.word	0x00000b89

00000af8 <_Z41__static_initialization_and_destruction_0ii>:


}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
     af8:	b510      	push	{r4, lr}
     afa:	2801      	cmp	r0, #1
     afc:	d000      	beq.n	b00 <_Z41__static_initialization_and_destruction_0ii+0x8>
     afe:	bd10      	pop	{r4, pc}
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     b02:	4299      	cmp	r1, r3
     b04:	d1fb      	bne.n	afe <_Z41__static_initialization_and_destruction_0ii+0x6>
     b06:	4c07      	ldr	r4, [pc, #28]	; (b24 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     b08:	3404      	adds	r4, #4
     b0a:	4907      	ldr	r1, [pc, #28]	; (b28 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     b0c:	0020      	movs	r0, r4
     b0e:	4b07      	ldr	r3, [pc, #28]	; (b2c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b10:	4798      	blx	r3
     b12:	4a07      	ldr	r2, [pc, #28]	; (b30 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b14:	4907      	ldr	r1, [pc, #28]	; (b34 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     b16:	0020      	movs	r0, r4
     b18:	4b07      	ldr	r3, [pc, #28]	; (b38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     b1a:	4798      	blx	r3
     b1c:	e7ef      	b.n	afe <_Z41__static_initialization_and_destruction_0ii+0x6>
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	0000ffff 	.word	0x0000ffff
     b24:	20000520 	.word	0x20000520
     b28:	20000cac 	.word	0x20000cac
     b2c:	00000add 	.word	0x00000add
     b30:	20000000 	.word	0x20000000
     b34:	00000ad5 	.word	0x00000ad5
     b38:	00004ffd 	.word	0x00004ffd

00000b3c <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
     b3c:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
     b3e:	6900      	ldr	r0, [r0, #16]
     b40:	4b01      	ldr	r3, [pc, #4]	; (b48 <_ZN17TimerSerial_Class5StartEv+0xc>)
     b42:	4798      	blx	r3
}
     b44:	bd10      	pop	{r4, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	000017c5 	.word	0x000017c5

00000b4c <_ZN17TimerSerial_Class4InitEv>:
bool TimerSerial_Class::Init(void){
     b4c:	b510      	push	{r4, lr}
     b4e:	0004      	movs	r4, r0
	ticks=0;
     b50:	2300      	movs	r3, #0
     b52:	60c3      	str	r3, [r0, #12]
	isOK=Start()==0;
     b54:	4b04      	ldr	r3, [pc, #16]	; (b68 <_ZN17TimerSerial_Class4InitEv+0x1c>)
     b56:	4798      	blx	r3
     b58:	4243      	negs	r3, r0
     b5a:	4158      	adcs	r0, r3
     b5c:	b2c0      	uxtb	r0, r0
     b5e:	70a0      	strb	r0, [r4, #2]
	return isOK;
     b60:	78a0      	ldrb	r0, [r4, #2]
     b62:	b2c0      	uxtb	r0, r0
}
     b64:	bd10      	pop	{r4, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	00000b3d 	.word	0x00000b3d

00000b6c <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
     b6c:	b510      	push	{r4, lr}
     b6e:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
     b70:	6900      	ldr	r0, [r0, #16]
     b72:	4b02      	ldr	r3, [pc, #8]	; (b7c <_ZN17TimerSerial_Class4StopEv+0x10>)
     b74:	4798      	blx	r3
	timeout=0;
     b76:	2300      	movs	r3, #0
     b78:	7063      	strb	r3, [r4, #1]
}
     b7a:	bd10      	pop	{r4, pc}
     b7c:	00001801 	.word	0x00001801

00000b80 <_ZN17TimerSerial_Class10setTimeoutEv>:
	timeout=1;
     b80:	2301      	movs	r3, #1
     b82:	7043      	strb	r3, [r0, #1]
}
     b84:	4770      	bx	lr
	...

00000b88 <_ZL7task_cbPK10timer_task>:
{
     b88:	b510      	push	{r4, lr}
	ptrTimerSerialClass->setTimeout();
     b8a:	4b02      	ldr	r3, [pc, #8]	; (b94 <_ZL7task_cbPK10timer_task+0xc>)
     b8c:	6818      	ldr	r0, [r3, #0]
     b8e:	4b02      	ldr	r3, [pc, #8]	; (b98 <_ZL7task_cbPK10timer_task+0x10>)
     b90:	4798      	blx	r3
}
     b92:	bd10      	pop	{r4, pc}
     b94:	20000520 	.word	0x20000520
     b98:	00000b81 	.word	0x00000b81

00000b9c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
void	TimerSerial_Class::ChooseAvailableTimerTask(void){
     b9c:	b510      	push	{r4, lr}
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     b9e:	2300      	movs	r3, #0
     ba0:	2b03      	cmp	r3, #3
     ba2:	dc0f      	bgt.n	bc4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x28>
			if (taskSerialArray[ii].cb==NULL)
     ba4:	009a      	lsls	r2, r3, #2
     ba6:	18d2      	adds	r2, r2, r3
     ba8:	0091      	lsls	r1, r2, #2
     baa:	4a08      	ldr	r2, [pc, #32]	; (bcc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
     bac:	1852      	adds	r2, r2, r1
     bae:	6b12      	ldr	r2, [r2, #48]	; 0x30
     bb0:	2a00      	cmp	r2, #0
     bb2:	d002      	beq.n	bba <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x1e>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     bb4:	3301      	adds	r3, #1
     bb6:	b2db      	uxtb	r3, r3
     bb8:	e7f2      	b.n	ba0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4>
				task=&taskSerialArray[ii];
     bba:	4b04      	ldr	r3, [pc, #16]	; (bcc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
     bbc:	3324      	adds	r3, #36	; 0x24
     bbe:	185b      	adds	r3, r3, r1
     bc0:	6083      	str	r3, [r0, #8]
			return;
     bc2:	e002      	b.n	bca <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x2e>
	task=&taskSerialArray[0];
     bc4:	4b01      	ldr	r3, [pc, #4]	; (bcc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
     bc6:	3324      	adds	r3, #36	; 0x24
     bc8:	6083      	str	r3, [r0, #8]
}
     bca:	bd10      	pop	{r4, pc}
     bcc:	20000520 	.word	0x20000520

00000bd0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
     bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd2:	0004      	movs	r4, r0
     bd4:	000e      	movs	r6, r1
     bd6:	0017      	movs	r7, r2
     bd8:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
     bda:	4b06      	ldr	r3, [pc, #24]	; (bf4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
     bdc:	4798      	blx	r3
	task->interval = interval;
     bde:	68a3      	ldr	r3, [r4, #8]
     be0:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
     be2:	68a3      	ldr	r3, [r4, #8]
     be4:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
     be6:	68a3      	ldr	r3, [r4, #8]
     be8:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
     bea:	6920      	ldr	r0, [r4, #16]
     bec:	68a1      	ldr	r1, [r4, #8]
     bee:	4b02      	ldr	r3, [pc, #8]	; (bf8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
     bf0:	4798      	blx	r3
}
     bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bf4:	00000b9d 	.word	0x00000b9d
     bf8:	0000183d 	.word	0x0000183d

00000bfc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     c00:	2300      	movs	r3, #0
     c02:	4d03      	ldr	r5, [pc, #12]	; (c10 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
     c04:	47a8      	blx	r5
	status=timer_start(timer_descr);
     c06:	6920      	ldr	r0, [r4, #16]
     c08:	4b02      	ldr	r3, [pc, #8]	; (c14 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
     c0a:	4798      	blx	r3
}
     c0c:	bd70      	pop	{r4, r5, r6, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00000bd1 	.word	0x00000bd1
     c14:	000017c5 	.word	0x000017c5

00000c18 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
     c18:	b530      	push	{r4, r5, lr}
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     c1a:	2300      	movs	r3, #0
     c1c:	2b03      	cmp	r3, #3
     c1e:	dc0e      	bgt.n	c3e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x26>
		if (taskSerialArray[ii].cb==(timer_cb_t)func)
     c20:	009a      	lsls	r2, r3, #2
     c22:	18d2      	adds	r2, r2, r3
     c24:	0094      	lsls	r4, r2, #2
     c26:	4a06      	ldr	r2, [pc, #24]	; (c40 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
     c28:	1912      	adds	r2, r2, r4
     c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
     c2c:	428a      	cmp	r2, r1
     c2e:	d002      	beq.n	c36 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x1e>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
     c30:	3301      	adds	r3, #1
     c32:	b2db      	uxtb	r3, r3
     c34:	e7f2      	b.n	c1c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4>
			task=&taskSerialArray[ii];
     c36:	4b02      	ldr	r3, [pc, #8]	; (c40 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
     c38:	3324      	adds	r3, #36	; 0x24
     c3a:	191b      	adds	r3, r3, r4
     c3c:	6083      	str	r3, [r0, #8]
}
     c3e:	bd30      	pop	{r4, r5, pc}
     c40:	20000520 	.word	0x20000520

00000c44 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
     c44:	b510      	push	{r4, lr}
     c46:	0004      	movs	r4, r0
	GetTaskFunction(func);
     c48:	4b08      	ldr	r3, [pc, #32]	; (c6c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
     c4a:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
     c4c:	6920      	ldr	r0, [r4, #16]
     c4e:	3014      	adds	r0, #20
     c50:	68a1      	ldr	r1, [r4, #8]
     c52:	4b07      	ldr	r3, [pc, #28]	; (c70 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
     c54:	4798      	blx	r3
     c56:	2800      	cmp	r0, #0
     c58:	d103      	bne.n	c62 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
     c5a:	68a3      	ldr	r3, [r4, #8]
     c5c:	2200      	movs	r2, #0
     c5e:	60da      	str	r2, [r3, #12]
}
     c60:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
     c62:	68a1      	ldr	r1, [r4, #8]
     c64:	6920      	ldr	r0, [r4, #16]
     c66:	4b03      	ldr	r3, [pc, #12]	; (c74 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
     c68:	4798      	blx	r3
     c6a:	e7f6      	b.n	c5a <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
     c6c:	00000c19 	.word	0x00000c19
     c70:	0000217d 	.word	0x0000217d
     c74:	000018ed 	.word	0x000018ed

00000c78 <_GLOBAL__sub_I_ptrTimerSerialClass>:
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
     c78:	b510      	push	{r4, lr}
     c7a:	4902      	ldr	r1, [pc, #8]	; (c84 <_GLOBAL__sub_I_ptrTimerSerialClass+0xc>)
     c7c:	2001      	movs	r0, #1
     c7e:	4b02      	ldr	r3, [pc, #8]	; (c88 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
     c80:	4798      	blx	r3
     c82:	bd10      	pop	{r4, pc}
     c84:	0000ffff 	.word	0x0000ffff
     c88:	00000af9 	.word	0x00000af9

00000c8c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     c8c:	b510      	push	{r4, lr}
	system_init();
     c8e:	4b02      	ldr	r3, [pc, #8]	; (c98 <atmel_start_init+0xc>)
     c90:	4798      	blx	r3
	usb_init();
     c92:	4b02      	ldr	r3, [pc, #8]	; (c9c <atmel_start_init+0x10>)
     c94:	4798      	blx	r3
}
     c96:	bd10      	pop	{r4, pc}
     c98:	00001281 	.word	0x00001281
     c9c:	00004ff1 	.word	0x00004ff1

00000ca0 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
     ca0:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     ca2:	4a08      	ldr	r2, [pc, #32]	; (cc4 <TIMER_ZCD_init+0x24>)
     ca4:	6a11      	ldr	r1, [r2, #32]
     ca6:	2380      	movs	r3, #128	; 0x80
     ca8:	011b      	lsls	r3, r3, #4
     caa:	430b      	orrs	r3, r1
     cac:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     cae:	4a06      	ldr	r2, [pc, #24]	; (cc8 <TIMER_ZCD_init+0x28>)
     cb0:	4b06      	ldr	r3, [pc, #24]	; (ccc <TIMER_ZCD_init+0x2c>)
     cb2:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
     cb4:	4b06      	ldr	r3, [pc, #24]	; (cd0 <TIMER_ZCD_init+0x30>)
     cb6:	4798      	blx	r3
     cb8:	0002      	movs	r2, r0
     cba:	4906      	ldr	r1, [pc, #24]	; (cd4 <TIMER_ZCD_init+0x34>)
     cbc:	4806      	ldr	r0, [pc, #24]	; (cd8 <TIMER_ZCD_init+0x38>)
     cbe:	4b07      	ldr	r3, [pc, #28]	; (cdc <TIMER_ZCD_init+0x3c>)
     cc0:	4798      	blx	r3
}
     cc2:	bd10      	pop	{r4, pc}
     cc4:	40000400 	.word	0x40000400
     cc8:	0000401b 	.word	0x0000401b
     ccc:	40000c00 	.word	0x40000c00
     cd0:	00002f6f 	.word	0x00002f6f
     cd4:	42002c00 	.word	0x42002c00
     cd8:	20000bec 	.word	0x20000bec
     cdc:	00001781 	.word	0x00001781

00000ce0 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
     ce0:	b510      	push	{r4, lr}
     ce2:	4a08      	ldr	r2, [pc, #32]	; (d04 <TIMER_USB_init+0x24>)
     ce4:	6a11      	ldr	r1, [r2, #32]
     ce6:	2380      	movs	r3, #128	; 0x80
     ce8:	015b      	lsls	r3, r3, #5
     cea:	430b      	orrs	r3, r1
     cec:	6213      	str	r3, [r2, #32]
     cee:	4a06      	ldr	r2, [pc, #24]	; (d08 <TIMER_USB_init+0x28>)
     cf0:	4b06      	ldr	r3, [pc, #24]	; (d0c <TIMER_USB_init+0x2c>)
     cf2:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
     cf4:	4b06      	ldr	r3, [pc, #24]	; (d10 <TIMER_USB_init+0x30>)
     cf6:	4798      	blx	r3
     cf8:	0002      	movs	r2, r0
     cfa:	4906      	ldr	r1, [pc, #24]	; (d14 <TIMER_USB_init+0x34>)
     cfc:	4806      	ldr	r0, [pc, #24]	; (d18 <TIMER_USB_init+0x38>)
     cfe:	4b07      	ldr	r3, [pc, #28]	; (d1c <TIMER_USB_init+0x3c>)
     d00:	4798      	blx	r3
}
     d02:	bd10      	pop	{r4, pc}
     d04:	40000400 	.word	0x40000400
     d08:	0000431c 	.word	0x0000431c
     d0c:	40000c00 	.word	0x40000c00
     d10:	00002f6f 	.word	0x00002f6f
     d14:	42003000 	.word	0x42003000
     d18:	20000cac 	.word	0x20000cac
     d1c:	00001781 	.word	0x00001781

00000d20 <EXTERNAL_IRQ_0_init>:
{
     d20:	b510      	push	{r4, lr}
     d22:	4a0f      	ldr	r2, [pc, #60]	; (d60 <EXTERNAL_IRQ_0_init+0x40>)
     d24:	4b0f      	ldr	r3, [pc, #60]	; (d64 <EXTERNAL_IRQ_0_init+0x44>)
     d26:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d28:	3a05      	subs	r2, #5
     d2a:	23c0      	movs	r3, #192	; 0xc0
     d2c:	05db      	lsls	r3, r3, #23
     d2e:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d30:	4b0d      	ldr	r3, [pc, #52]	; (d68 <EXTERNAL_IRQ_0_init+0x48>)
     d32:	4a0e      	ldr	r2, [pc, #56]	; (d6c <EXTERNAL_IRQ_0_init+0x4c>)
     d34:	629a      	str	r2, [r3, #40]	; 0x28
     d36:	4a0e      	ldr	r2, [pc, #56]	; (d70 <EXTERNAL_IRQ_0_init+0x50>)
     d38:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d3a:	214e      	movs	r1, #78	; 0x4e
     d3c:	5c5a      	ldrb	r2, [r3, r1]
     d3e:	2004      	movs	r0, #4
     d40:	4382      	bics	r2, r0
     d42:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d44:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d46:	3803      	subs	r0, #3
     d48:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d4a:	4302      	orrs	r2, r0
     d4c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d4e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d50:	3917      	subs	r1, #23
     d52:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d54:	200f      	movs	r0, #15
     d56:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d58:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <EXTERNAL_IRQ_0_init+0x54>)
     d5c:	4798      	blx	r3
}
     d5e:	bd10      	pop	{r4, pc}
     d60:	00004005 	.word	0x00004005
     d64:	40000c00 	.word	0x40000c00
     d68:	41004400 	.word	0x41004400
     d6c:	40024000 	.word	0x40024000
     d70:	c0020000 	.word	0xc0020000
     d74:	000014a1 	.word	0x000014a1

00000d78 <SPI_ADF_PORT_init>:
{
     d78:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7a:	46c6      	mov	lr, r8
     d7c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d7e:	22c0      	movs	r2, #192	; 0xc0
     d80:	05d2      	lsls	r2, r2, #23
     d82:	2310      	movs	r3, #16
     d84:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d86:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d88:	4b25      	ldr	r3, [pc, #148]	; (e20 <SPI_ADF_PORT_init+0xa8>)
     d8a:	4926      	ldr	r1, [pc, #152]	; (e24 <SPI_ADF_PORT_init+0xac>)
     d8c:	6299      	str	r1, [r3, #40]	; 0x28
     d8e:	21c0      	movs	r1, #192	; 0xc0
     d90:	0609      	lsls	r1, r1, #24
     d92:	468c      	mov	ip, r1
     d94:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d96:	2044      	movs	r0, #68	; 0x44
     d98:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d9a:	2701      	movs	r7, #1
     d9c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d9e:	2601      	movs	r6, #1
     da0:	4331      	orrs	r1, r6
     da2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     da4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     da6:	2132      	movs	r1, #50	; 0x32
     da8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     daa:	250f      	movs	r5, #15
     dac:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     dae:	2403      	movs	r4, #3
     db0:	46a0      	mov	r8, r4
     db2:	4644      	mov	r4, r8
     db4:	4320      	orrs	r0, r4
     db6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     db8:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dba:	2020      	movs	r0, #32
     dbc:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     dbe:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dc0:	4819      	ldr	r0, [pc, #100]	; (e28 <SPI_ADF_PORT_init+0xb0>)
     dc2:	6298      	str	r0, [r3, #40]	; 0x28
     dc4:	4660      	mov	r0, ip
     dc6:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dc8:	2045      	movs	r0, #69	; 0x45
     dca:	4684      	mov	ip, r0
     dcc:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dce:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dd0:	4330      	orrs	r0, r6
     dd2:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dd4:	4664      	mov	r4, ip
     dd6:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dd8:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dda:	3c36      	subs	r4, #54	; 0x36
     ddc:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     dde:	2430      	movs	r4, #48	; 0x30
     de0:	46a4      	mov	ip, r4
     de2:	4664      	mov	r4, ip
     de4:	4320      	orrs	r0, r4
     de6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     de8:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     dea:	310e      	adds	r1, #14
     dec:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     dee:	4a0f      	ldr	r2, [pc, #60]	; (e2c <SPI_ADF_PORT_init+0xb4>)
     df0:	629a      	str	r2, [r3, #40]	; 0x28
     df2:	4a0f      	ldr	r2, [pc, #60]	; (e30 <SPI_ADF_PORT_init+0xb8>)
     df4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     df6:	2246      	movs	r2, #70	; 0x46
     df8:	5c99      	ldrb	r1, [r3, r2]
     dfa:	2004      	movs	r0, #4
     dfc:	4381      	bics	r1, r0
     dfe:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e00:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e02:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e04:	4331      	orrs	r1, r6
     e06:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e08:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e0a:	2133      	movs	r1, #51	; 0x33
     e0c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e0e:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     e10:	4640      	mov	r0, r8
     e12:	4302      	orrs	r2, r0
     e14:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e16:	545a      	strb	r2, [r3, r1]
}
     e18:	bc04      	pop	{r2}
     e1a:	4690      	mov	r8, r2
     e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	41004400 	.word	0x41004400
     e24:	40000010 	.word	0x40000010
     e28:	40000020 	.word	0x40000020
     e2c:	40020040 	.word	0x40020040
     e30:	c0020000 	.word	0xc0020000

00000e34 <SPI_ADF_CLOCK_init>:
     e34:	4a04      	ldr	r2, [pc, #16]	; (e48 <SPI_ADF_CLOCK_init+0x14>)
     e36:	6a13      	ldr	r3, [r2, #32]
     e38:	2104      	movs	r1, #4
     e3a:	430b      	orrs	r3, r1
     e3c:	6213      	str	r3, [r2, #32]
     e3e:	4a03      	ldr	r2, [pc, #12]	; (e4c <SPI_ADF_CLOCK_init+0x18>)
     e40:	4b03      	ldr	r3, [pc, #12]	; (e50 <SPI_ADF_CLOCK_init+0x1c>)
     e42:	805a      	strh	r2, [r3, #2]
}
     e44:	4770      	bx	lr
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	40000400 	.word	0x40000400
     e4c:	00004014 	.word	0x00004014
     e50:	40000c00 	.word	0x40000c00

00000e54 <SPI_ADF_init>:
{
     e54:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
     e56:	4b04      	ldr	r3, [pc, #16]	; (e68 <SPI_ADF_init+0x14>)
     e58:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
     e5a:	4904      	ldr	r1, [pc, #16]	; (e6c <SPI_ADF_init+0x18>)
     e5c:	4804      	ldr	r0, [pc, #16]	; (e70 <SPI_ADF_init+0x1c>)
     e5e:	4b05      	ldr	r3, [pc, #20]	; (e74 <SPI_ADF_init+0x20>)
     e60:	4798      	blx	r3
	SPI_ADF_PORT_init();
     e62:	4b05      	ldr	r3, [pc, #20]	; (e78 <SPI_ADF_init+0x24>)
     e64:	4798      	blx	r3
}
     e66:	bd10      	pop	{r4, pc}
     e68:	00000e35 	.word	0x00000e35
     e6c:	42000800 	.word	0x42000800
     e70:	20000c7c 	.word	0x20000c7c
     e74:	000015ad 	.word	0x000015ad
     e78:	00000d79 	.word	0x00000d79

00000e7c <SPI_LMX_PORT_init>:
{
     e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e7e:	46c6      	mov	lr, r8
     e80:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e82:	22c0      	movs	r2, #192	; 0xc0
     e84:	05d2      	lsls	r2, r2, #23
     e86:	2380      	movs	r3, #128	; 0x80
     e88:	025b      	lsls	r3, r3, #9
     e8a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e8c:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e8e:	4b26      	ldr	r3, [pc, #152]	; (f28 <SPI_LMX_PORT_init+0xac>)
     e90:	2180      	movs	r1, #128	; 0x80
     e92:	05c9      	lsls	r1, r1, #23
     e94:	468c      	mov	ip, r1
     e96:	6299      	str	r1, [r3, #40]	; 0x28
     e98:	4924      	ldr	r1, [pc, #144]	; (f2c <SPI_LMX_PORT_init+0xb0>)
     e9a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e9c:	2050      	movs	r0, #80	; 0x50
     e9e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ea0:	2701      	movs	r7, #1
     ea2:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ea4:	2601      	movs	r6, #1
     ea6:	4331      	orrs	r1, r6
     ea8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     eaa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     eac:	2138      	movs	r1, #56	; 0x38
     eae:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     eb0:	250f      	movs	r5, #15
     eb2:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     eb4:	2402      	movs	r4, #2
     eb6:	46a0      	mov	r8, r4
     eb8:	4644      	mov	r4, r8
     eba:	4320      	orrs	r0, r4
     ebc:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ebe:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec0:	2080      	movs	r0, #128	; 0x80
     ec2:	0280      	lsls	r0, r0, #10
     ec4:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ec6:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec8:	4660      	mov	r0, ip
     eca:	6298      	str	r0, [r3, #40]	; 0x28
     ecc:	4818      	ldr	r0, [pc, #96]	; (f30 <SPI_LMX_PORT_init+0xb4>)
     ece:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ed0:	2051      	movs	r0, #81	; 0x51
     ed2:	4684      	mov	ip, r0
     ed4:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ed6:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ed8:	4330      	orrs	r0, r6
     eda:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     edc:	4664      	mov	r4, ip
     ede:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ee0:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ee2:	3c42      	subs	r4, #66	; 0x42
     ee4:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     ee6:	2420      	movs	r4, #32
     ee8:	46a4      	mov	ip, r4
     eea:	4664      	mov	r4, ip
     eec:	4320      	orrs	r0, r4
     eee:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ef0:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ef2:	2180      	movs	r1, #128	; 0x80
     ef4:	02c9      	lsls	r1, r1, #11
     ef6:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef8:	4a0e      	ldr	r2, [pc, #56]	; (f34 <SPI_LMX_PORT_init+0xb8>)
     efa:	629a      	str	r2, [r3, #40]	; 0x28
     efc:	4a0e      	ldr	r2, [pc, #56]	; (f38 <SPI_LMX_PORT_init+0xbc>)
     efe:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f00:	2252      	movs	r2, #82	; 0x52
     f02:	5c99      	ldrb	r1, [r3, r2]
     f04:	2004      	movs	r0, #4
     f06:	4381      	bics	r1, r0
     f08:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f0a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f0e:	4331      	orrs	r1, r6
     f10:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f12:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f14:	2139      	movs	r1, #57	; 0x39
     f16:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f18:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     f1a:	4640      	mov	r0, r8
     f1c:	4302      	orrs	r2, r0
     f1e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f20:	545a      	strb	r2, [r3, r1]
}
     f22:	bc04      	pop	{r2}
     f24:	4690      	mov	r8, r2
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f28:	41004400 	.word	0x41004400
     f2c:	c0000001 	.word	0xc0000001
     f30:	c0000002 	.word	0xc0000002
     f34:	40020000 	.word	0x40020000
     f38:	c0020004 	.word	0xc0020004

00000f3c <SPI_LMX_CLOCK_init>:
     f3c:	4a04      	ldr	r2, [pc, #16]	; (f50 <SPI_LMX_CLOCK_init+0x14>)
     f3e:	6a13      	ldr	r3, [r2, #32]
     f40:	2108      	movs	r1, #8
     f42:	430b      	orrs	r3, r1
     f44:	6213      	str	r3, [r2, #32]
     f46:	4a03      	ldr	r2, [pc, #12]	; (f54 <SPI_LMX_CLOCK_init+0x18>)
     f48:	4b03      	ldr	r3, [pc, #12]	; (f58 <SPI_LMX_CLOCK_init+0x1c>)
     f4a:	805a      	strh	r2, [r3, #2]
}
     f4c:	4770      	bx	lr
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	40000400 	.word	0x40000400
     f54:	00004015 	.word	0x00004015
     f58:	40000c00 	.word	0x40000c00

00000f5c <SPI_LMX_init>:
{
     f5c:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
     f5e:	4b04      	ldr	r3, [pc, #16]	; (f70 <SPI_LMX_init+0x14>)
     f60:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
     f62:	4904      	ldr	r1, [pc, #16]	; (f74 <SPI_LMX_init+0x18>)
     f64:	4804      	ldr	r0, [pc, #16]	; (f78 <SPI_LMX_init+0x1c>)
     f66:	4b05      	ldr	r3, [pc, #20]	; (f7c <SPI_LMX_init+0x20>)
     f68:	4798      	blx	r3
	SPI_LMX_PORT_init();
     f6a:	4b05      	ldr	r3, [pc, #20]	; (f80 <SPI_LMX_init+0x24>)
     f6c:	4798      	blx	r3
}
     f6e:	bd10      	pop	{r4, pc}
     f70:	00000f3d 	.word	0x00000f3d
     f74:	42000c00 	.word	0x42000c00
     f78:	20000c08 	.word	0x20000c08
     f7c:	000015ad 	.word	0x000015ad
     f80:	00000e7d 	.word	0x00000e7d

00000f84 <SPI_ZCD_PORT_init>:
{
     f84:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f86:	21c0      	movs	r1, #192	; 0xc0
     f88:	05c9      	lsls	r1, r1, #23
     f8a:	2380      	movs	r3, #128	; 0x80
     f8c:	015b      	lsls	r3, r3, #5
     f8e:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f90:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f92:	4b22      	ldr	r3, [pc, #136]	; (101c <SPI_ZCD_PORT_init+0x98>)
     f94:	4a22      	ldr	r2, [pc, #136]	; (1020 <SPI_ZCD_PORT_init+0x9c>)
     f96:	629a      	str	r2, [r3, #40]	; 0x28
     f98:	20c0      	movs	r0, #192	; 0xc0
     f9a:	0600      	lsls	r0, r0, #24
     f9c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f9e:	264c      	movs	r6, #76	; 0x4c
     fa0:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fa2:	2501      	movs	r5, #1
     fa4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fa6:	2401      	movs	r4, #1
     fa8:	4322      	orrs	r2, r4
     faa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fac:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fae:	3e16      	subs	r6, #22
     fb0:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fb2:	270f      	movs	r7, #15
     fb4:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
     fb6:	2702      	movs	r7, #2
     fb8:	433a      	orrs	r2, r7
     fba:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fbc:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fbe:	2280      	movs	r2, #128	; 0x80
     fc0:	0092      	lsls	r2, r2, #2
     fc2:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fc4:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc6:	4a17      	ldr	r2, [pc, #92]	; (1024 <SPI_ZCD_PORT_init+0xa0>)
     fc8:	629a      	str	r2, [r3, #40]	; 0x28
     fca:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fcc:	2049      	movs	r0, #73	; 0x49
     fce:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     fd0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fd2:	4322      	orrs	r2, r4
     fd4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd6:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fd8:	2234      	movs	r2, #52	; 0x34
     fda:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     fdc:	3e27      	subs	r6, #39	; 0x27
     fde:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     fe0:	2730      	movs	r7, #48	; 0x30
     fe2:	4338      	orrs	r0, r7
     fe4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fe6:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	0212      	lsls	r2, r2, #8
     fec:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fee:	4a0e      	ldr	r2, [pc, #56]	; (1028 <SPI_ZCD_PORT_init+0xa4>)
     ff0:	629a      	str	r2, [r3, #40]	; 0x28
     ff2:	4a0e      	ldr	r2, [pc, #56]	; (102c <SPI_ZCD_PORT_init+0xa8>)
     ff4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ff6:	224f      	movs	r2, #79	; 0x4f
     ff8:	5c99      	ldrb	r1, [r3, r2]
     ffa:	2004      	movs	r0, #4
     ffc:	4381      	bics	r1, r0
     ffe:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1000:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1002:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1004:	4321      	orrs	r1, r4
    1006:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1008:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    100a:	2137      	movs	r1, #55	; 0x37
    100c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    100e:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1010:	2020      	movs	r0, #32
    1012:	4302      	orrs	r2, r0
    1014:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1016:	545a      	strb	r2, [r3, r1]
}
    1018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	41004400 	.word	0x41004400
    1020:	40001000 	.word	0x40001000
    1024:	40000200 	.word	0x40000200
    1028:	40028000 	.word	0x40028000
    102c:	c0020000 	.word	0xc0020000

00001030 <SPI_ZCD_CLOCK_init>:
    1030:	4a04      	ldr	r2, [pc, #16]	; (1044 <SPI_ZCD_CLOCK_init+0x14>)
    1032:	6a13      	ldr	r3, [r2, #32]
    1034:	2110      	movs	r1, #16
    1036:	430b      	orrs	r3, r1
    1038:	6213      	str	r3, [r2, #32]
    103a:	4a03      	ldr	r2, [pc, #12]	; (1048 <SPI_ZCD_CLOCK_init+0x18>)
    103c:	4b03      	ldr	r3, [pc, #12]	; (104c <SPI_ZCD_CLOCK_init+0x1c>)
    103e:	805a      	strh	r2, [r3, #2]
}
    1040:	4770      	bx	lr
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	40000400 	.word	0x40000400
    1048:	00004016 	.word	0x00004016
    104c:	40000c00 	.word	0x40000c00

00001050 <SPI_ZCD_init>:
{
    1050:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
    1052:	4b04      	ldr	r3, [pc, #16]	; (1064 <SPI_ZCD_init+0x14>)
    1054:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
    1056:	4904      	ldr	r1, [pc, #16]	; (1068 <SPI_ZCD_init+0x18>)
    1058:	4804      	ldr	r0, [pc, #16]	; (106c <SPI_ZCD_init+0x1c>)
    105a:	4b05      	ldr	r3, [pc, #20]	; (1070 <SPI_ZCD_init+0x20>)
    105c:	4798      	blx	r3
	SPI_ZCD_PORT_init();
    105e:	4b05      	ldr	r3, [pc, #20]	; (1074 <SPI_ZCD_init+0x24>)
    1060:	4798      	blx	r3
}
    1062:	bd10      	pop	{r4, pc}
    1064:	00001031 	.word	0x00001031
    1068:	42001000 	.word	0x42001000
    106c:	20000c94 	.word	0x20000c94
    1070:	000015ad 	.word	0x000015ad
    1074:	00000f85 	.word	0x00000f85

00001078 <USART_0_CLOCK_init>:
    1078:	4a04      	ldr	r2, [pc, #16]	; (108c <USART_0_CLOCK_init+0x14>)
    107a:	6a13      	ldr	r3, [r2, #32]
    107c:	2120      	movs	r1, #32
    107e:	430b      	orrs	r3, r1
    1080:	6213      	str	r3, [r2, #32]
    1082:	4a03      	ldr	r2, [pc, #12]	; (1090 <USART_0_CLOCK_init+0x18>)
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <USART_0_CLOCK_init+0x1c>)
    1086:	805a      	strh	r2, [r3, #2]
}
    1088:	4770      	bx	lr
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	40000400 	.word	0x40000400
    1090:	00004017 	.word	0x00004017
    1094:	40000c00 	.word	0x40000c00

00001098 <USART_0_PORT_init>:
{
    1098:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    109a:	4b0f      	ldr	r3, [pc, #60]	; (10d8 <USART_0_PORT_init+0x40>)
    109c:	2256      	movs	r2, #86	; 0x56
    109e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10a0:	2501      	movs	r5, #1
    10a2:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10a4:	2401      	movs	r4, #1
    10a6:	4321      	orrs	r1, r4
    10a8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10aa:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10ac:	203b      	movs	r0, #59	; 0x3b
    10ae:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10b0:	3a47      	subs	r2, #71	; 0x47
    10b2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    10b4:	2202      	movs	r2, #2
    10b6:	4311      	orrs	r1, r2
    10b8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10ba:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10bc:	2157      	movs	r1, #87	; 0x57
    10be:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    10c0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10c2:	4322      	orrs	r2, r4
    10c4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10c6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10c8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    10ca:	3948      	subs	r1, #72	; 0x48
    10cc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    10ce:	2120      	movs	r1, #32
    10d0:	430a      	orrs	r2, r1
    10d2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10d4:	541a      	strb	r2, [r3, r0]
}
    10d6:	bd30      	pop	{r4, r5, pc}
    10d8:	41004400 	.word	0x41004400

000010dc <USART_0_init>:
{
    10dc:	b510      	push	{r4, lr}
    10de:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
    10e0:	4b06      	ldr	r3, [pc, #24]	; (10fc <USART_0_init+0x20>)
    10e2:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    10e4:	2300      	movs	r3, #0
    10e6:	9300      	str	r3, [sp, #0]
    10e8:	3310      	adds	r3, #16
    10ea:	4a05      	ldr	r2, [pc, #20]	; (1100 <USART_0_init+0x24>)
    10ec:	4905      	ldr	r1, [pc, #20]	; (1104 <USART_0_init+0x28>)
    10ee:	4806      	ldr	r0, [pc, #24]	; (1108 <USART_0_init+0x2c>)
    10f0:	4c06      	ldr	r4, [pc, #24]	; (110c <USART_0_init+0x30>)
    10f2:	47a0      	blx	r4
	USART_0_PORT_init();
    10f4:	4b06      	ldr	r3, [pc, #24]	; (1110 <USART_0_init+0x34>)
    10f6:	4798      	blx	r3
}
    10f8:	b002      	add	sp, #8
    10fa:	bd10      	pop	{r4, pc}
    10fc:	00001079 	.word	0x00001079
    1100:	20000594 	.word	0x20000594
    1104:	42001400 	.word	0x42001400
    1108:	20000c2c 	.word	0x20000c2c
    110c:	00001b01 	.word	0x00001b01
    1110:	00001099 	.word	0x00001099

00001114 <delay_driver_init>:
{
    1114:	b510      	push	{r4, lr}
	delay_init(SysTick);
    1116:	4802      	ldr	r0, [pc, #8]	; (1120 <delay_driver_init+0xc>)
    1118:	4b02      	ldr	r3, [pc, #8]	; (1124 <delay_driver_init+0x10>)
    111a:	4798      	blx	r3
}
    111c:	bd10      	pop	{r4, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	e000e010 	.word	0xe000e010
    1124:	00001429 	.word	0x00001429

00001128 <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
    1128:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    112a:	2204      	movs	r2, #4
    112c:	23c0      	movs	r3, #192	; 0xc0
    112e:	05db      	lsls	r3, r3, #23
    1130:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1132:	490a      	ldr	r1, [pc, #40]	; (115c <DAC_0_PORT_init+0x34>)
    1134:	4b0a      	ldr	r3, [pc, #40]	; (1160 <DAC_0_PORT_init+0x38>)
    1136:	628b      	str	r3, [r1, #40]	; 0x28
    1138:	23c0      	movs	r3, #192	; 0xc0
    113a:	061b      	lsls	r3, r3, #24
    113c:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    113e:	2342      	movs	r3, #66	; 0x42
    1140:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1142:	2001      	movs	r0, #1
    1144:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1146:	4302      	orrs	r2, r0
    1148:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    114a:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    114c:	2231      	movs	r2, #49	; 0x31
    114e:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1150:	240f      	movs	r4, #15
    1152:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
    1154:	4303      	orrs	r3, r0
    1156:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1158:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
    115a:	bd10      	pop	{r4, pc}
    115c:	41004400 	.word	0x41004400
    1160:	40000004 	.word	0x40000004

00001164 <DAC_0_CLOCK_init>:
    1164:	4a04      	ldr	r2, [pc, #16]	; (1178 <DAC_0_CLOCK_init+0x14>)
    1166:	6a11      	ldr	r1, [r2, #32]
    1168:	2380      	movs	r3, #128	; 0x80
    116a:	02db      	lsls	r3, r3, #11
    116c:	430b      	orrs	r3, r1
    116e:	6213      	str	r3, [r2, #32]
    1170:	4a02      	ldr	r2, [pc, #8]	; (117c <DAC_0_CLOCK_init+0x18>)
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <DAC_0_CLOCK_init+0x1c>)
    1174:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
    1176:	4770      	bx	lr
    1178:	40000400 	.word	0x40000400
    117c:	00004021 	.word	0x00004021
    1180:	40000c00 	.word	0x40000c00

00001184 <DAC_0_init>:

void DAC_0_init(void)
{
    1184:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
    1186:	4b04      	ldr	r3, [pc, #16]	; (1198 <DAC_0_init+0x14>)
    1188:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    118a:	4904      	ldr	r1, [pc, #16]	; (119c <DAC_0_init+0x18>)
    118c:	4804      	ldr	r0, [pc, #16]	; (11a0 <DAC_0_init+0x1c>)
    118e:	4b05      	ldr	r3, [pc, #20]	; (11a4 <DAC_0_init+0x20>)
    1190:	4798      	blx	r3
	DAC_0_PORT_init();
    1192:	4b05      	ldr	r3, [pc, #20]	; (11a8 <DAC_0_init+0x24>)
    1194:	4798      	blx	r3
}
    1196:	bd10      	pop	{r4, pc}
    1198:	00001165 	.word	0x00001165
    119c:	42004800 	.word	0x42004800
    11a0:	20000c20 	.word	0x20000c20
    11a4:	000013d9 	.word	0x000013d9
    11a8:	00001129 	.word	0x00001129

000011ac <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    11ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ae:	46c6      	mov	lr, r8
    11b0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11b2:	24c0      	movs	r4, #192	; 0xc0
    11b4:	05e4      	lsls	r4, r4, #23
    11b6:	2280      	movs	r2, #128	; 0x80
    11b8:	0452      	lsls	r2, r2, #17
    11ba:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11bc:	4b1c      	ldr	r3, [pc, #112]	; (1230 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    11be:	2780      	movs	r7, #128	; 0x80
    11c0:	05ff      	lsls	r7, r7, #23
    11c2:	629f      	str	r7, [r3, #40]	; 0x28
    11c4:	491b      	ldr	r1, [pc, #108]	; (1234 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
    11c6:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11c8:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11ca:	2058      	movs	r0, #88	; 0x58
    11cc:	5c19      	ldrb	r1, [r3, r0]
    11ce:	2204      	movs	r2, #4
    11d0:	4690      	mov	r8, r2
    11d2:	4391      	bics	r1, r2
    11d4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11d6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    11d8:	2601      	movs	r6, #1
    11da:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    11dc:	2501      	movs	r5, #1
    11de:	4329      	orrs	r1, r5
    11e0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11e2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11e4:	381c      	subs	r0, #28
    11e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    11e8:	320b      	adds	r2, #11
    11ea:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    11ec:	2206      	movs	r2, #6
    11ee:	4694      	mov	ip, r2
    11f0:	4662      	mov	r2, ip
    11f2:	4311      	orrs	r1, r2
    11f4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11f6:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11f8:	2180      	movs	r1, #128	; 0x80
    11fa:	0489      	lsls	r1, r1, #18
    11fc:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11fe:	629f      	str	r7, [r3, #40]	; 0x28
    1200:	4f0d      	ldr	r7, [pc, #52]	; (1238 <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
    1202:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1204:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1206:	2159      	movs	r1, #89	; 0x59
    1208:	5c5c      	ldrb	r4, [r3, r1]
    120a:	4642      	mov	r2, r8
    120c:	4394      	bics	r4, r2
    120e:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1210:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1212:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1214:	432a      	orrs	r2, r5
    1216:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1218:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    121a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    121c:	394a      	subs	r1, #74	; 0x4a
    121e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1220:	2160      	movs	r1, #96	; 0x60
    1222:	430a      	orrs	r2, r1
    1224:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1226:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    1228:	bc04      	pop	{r2}
    122a:	4690      	mov	r8, r2
    122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	41004400 	.word	0x41004400
    1234:	c0000100 	.word	0xc0000100
    1238:	c0000200 	.word	0xc0000200

0000123c <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    123c:	4b06      	ldr	r3, [pc, #24]	; (1258 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    123e:	69da      	ldr	r2, [r3, #28]
    1240:	2120      	movs	r1, #32
    1242:	430a      	orrs	r2, r1
    1244:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    1246:	695a      	ldr	r2, [r3, #20]
    1248:	3120      	adds	r1, #32
    124a:	430a      	orrs	r2, r1
    124c:	615a      	str	r2, [r3, #20]
    124e:	4a03      	ldr	r2, [pc, #12]	; (125c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    1250:	4b03      	ldr	r3, [pc, #12]	; (1260 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    1252:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    1254:	4770      	bx	lr
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	40000400 	.word	0x40000400
    125c:	00004406 	.word	0x00004406
    1260:	40000c00 	.word	0x40000c00

00001264 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    1264:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    1266:	4b03      	ldr	r3, [pc, #12]	; (1274 <USB_DEVICE_INSTANCE_init+0x10>)
    1268:	4798      	blx	r3
	usb_d_init();
    126a:	4b03      	ldr	r3, [pc, #12]	; (1278 <USB_DEVICE_INSTANCE_init+0x14>)
    126c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    126e:	4b03      	ldr	r3, [pc, #12]	; (127c <USB_DEVICE_INSTANCE_init+0x18>)
    1270:	4798      	blx	r3
}
    1272:	bd10      	pop	{r4, pc}
    1274:	0000123d 	.word	0x0000123d
    1278:	00001de9 	.word	0x00001de9
    127c:	000011ad 	.word	0x000011ad

00001280 <system_init>:

void system_init(void)
{
    1280:	b5f0      	push	{r4, r5, r6, r7, lr}
    1282:	46d6      	mov	lr, sl
    1284:	464f      	mov	r7, r9
    1286:	4646      	mov	r6, r8
    1288:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    128a:	4b3a      	ldr	r3, [pc, #232]	; (1374 <system_init+0xf4>)
    128c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    128e:	22c0      	movs	r2, #192	; 0xc0
    1290:	05d2      	lsls	r2, r2, #23
    1292:	2308      	movs	r3, #8
    1294:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1296:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1298:	4b37      	ldr	r3, [pc, #220]	; (1378 <system_init+0xf8>)
    129a:	4938      	ldr	r1, [pc, #224]	; (137c <system_init+0xfc>)
    129c:	6299      	str	r1, [r3, #40]	; 0x28
    129e:	25c0      	movs	r5, #192	; 0xc0
    12a0:	062d      	lsls	r5, r5, #24
    12a2:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12a4:	2443      	movs	r4, #67	; 0x43
    12a6:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12a8:	2101      	movs	r1, #1
    12aa:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ac:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12ae:	2080      	movs	r0, #128	; 0x80
    12b0:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12b2:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12b4:	4832      	ldr	r0, [pc, #200]	; (1380 <system_init+0x100>)
    12b6:	6298      	str	r0, [r3, #40]	; 0x28
    12b8:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12ba:	3404      	adds	r4, #4
    12bc:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12be:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12c0:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12c2:	2080      	movs	r0, #128	; 0x80
    12c4:	0300      	lsls	r0, r0, #12
    12c6:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12c8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ca:	2080      	movs	r0, #128	; 0x80
    12cc:	05c0      	lsls	r0, r0, #23
    12ce:	6298      	str	r0, [r3, #40]	; 0x28
    12d0:	4c2c      	ldr	r4, [pc, #176]	; (1384 <system_init+0x104>)
    12d2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12d4:	2653      	movs	r6, #83	; 0x53
    12d6:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12d8:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12da:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12dc:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12de:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12e0:	6298      	str	r0, [r3, #40]	; 0x28
    12e2:	4c29      	ldr	r4, [pc, #164]	; (1388 <system_init+0x108>)
    12e4:	46a4      	mov	ip, r4
    12e6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12e8:	360b      	adds	r6, #11
    12ea:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12ec:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ee:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12f0:	2494      	movs	r4, #148	; 0x94
    12f2:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    12f4:	3c0c      	subs	r4, #12
    12f6:	46a1      	mov	r9, r4
    12f8:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12fa:	3420      	adds	r4, #32
    12fc:	4f23      	ldr	r7, [pc, #140]	; (138c <system_init+0x10c>)
    12fe:	511f      	str	r7, [r3, r4]
    1300:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1302:	27c0      	movs	r7, #192	; 0xc0
    1304:	46b8      	mov	r8, r7
    1306:	5ddf      	ldrb	r7, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1308:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    130a:	4646      	mov	r6, r8
    130c:	559f      	strb	r7, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    130e:	3e28      	subs	r6, #40	; 0x28
    1310:	46b2      	mov	sl, r6
    1312:	3e96      	subs	r6, #150	; 0x96
    1314:	4657      	mov	r7, sl
    1316:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1318:	464f      	mov	r7, r9
    131a:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    131c:	4e1c      	ldr	r6, [pc, #112]	; (1390 <system_init+0x110>)
    131e:	511e      	str	r6, [r3, r4]
    1320:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1322:	25c1      	movs	r5, #193	; 0xc1
    1324:	46a8      	mov	r8, r5
    1326:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1328:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    132a:	4646      	mov	r6, r8
    132c:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    132e:	4655      	mov	r5, sl
    1330:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1332:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1334:	5118      	str	r0, [r3, r4]
    1336:	4662      	mov	r2, ip
    1338:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    133a:	20de      	movs	r0, #222	; 0xde
    133c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    133e:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1340:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    1342:	4b14      	ldr	r3, [pc, #80]	; (1394 <system_init+0x114>)
    1344:	4798      	blx	r3

	SPI_ADF_init();
    1346:	4b14      	ldr	r3, [pc, #80]	; (1398 <system_init+0x118>)
    1348:	4798      	blx	r3

	SPI_LMX_init();
    134a:	4b14      	ldr	r3, [pc, #80]	; (139c <system_init+0x11c>)
    134c:	4798      	blx	r3

	SPI_ZCD_init();
    134e:	4b14      	ldr	r3, [pc, #80]	; (13a0 <system_init+0x120>)
    1350:	4798      	blx	r3
	USART_0_init();
    1352:	4b14      	ldr	r3, [pc, #80]	; (13a4 <system_init+0x124>)
    1354:	4798      	blx	r3

	delay_driver_init();
    1356:	4b14      	ldr	r3, [pc, #80]	; (13a8 <system_init+0x128>)
    1358:	4798      	blx	r3

	TIMER_ZCD_init();
    135a:	4b14      	ldr	r3, [pc, #80]	; (13ac <system_init+0x12c>)
    135c:	4798      	blx	r3
	TIMER_USB_init();
    135e:	4b14      	ldr	r3, [pc, #80]	; (13b0 <system_init+0x130>)
    1360:	4798      	blx	r3
	DAC_0_init();
    1362:	4b14      	ldr	r3, [pc, #80]	; (13b4 <system_init+0x134>)
    1364:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    1366:	4b14      	ldr	r3, [pc, #80]	; (13b8 <system_init+0x138>)
    1368:	4798      	blx	r3
}
    136a:	bc1c      	pop	{r2, r3, r4}
    136c:	4690      	mov	r8, r2
    136e:	4699      	mov	r9, r3
    1370:	46a2      	mov	sl, r4
    1372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1374:	00002371 	.word	0x00002371
    1378:	41004400 	.word	0x41004400
    137c:	40000008 	.word	0x40000008
    1380:	40000080 	.word	0x40000080
    1384:	c0000008 	.word	0xc0000008
    1388:	c0004000 	.word	0xc0004000
    138c:	40000001 	.word	0x40000001
    1390:	40000002 	.word	0x40000002
    1394:	00000d21 	.word	0x00000d21
    1398:	00000e55 	.word	0x00000e55
    139c:	00000f5d 	.word	0x00000f5d
    13a0:	00001051 	.word	0x00001051
    13a4:	000010dd 	.word	0x000010dd
    13a8:	00001115 	.word	0x00001115
    13ac:	00000ca1 	.word	0x00000ca1
    13b0:	00000ce1 	.word	0x00000ce1
    13b4:	00001185 	.word	0x00001185
    13b8:	00001265 	.word	0x00001265

000013bc <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    13bc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    13c0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    13c2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    13c4:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    13c8:	4770      	bx	lr

000013ca <atomic_leave_critical>:
    13ca:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    13ce:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    13d0:	f383 8810 	msr	PRIMASK, r3
}
    13d4:	4770      	bx	lr
	...

000013d8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    13d8:	b570      	push	{r4, r5, r6, lr}
    13da:	0004      	movs	r4, r0
    13dc:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    13de:	2800      	cmp	r0, #0
    13e0:	d010      	beq.n	1404 <dac_sync_init+0x2c>
    13e2:	2900      	cmp	r1, #0
    13e4:	d00c      	beq.n	1400 <dac_sync_init+0x28>
    13e6:	2001      	movs	r0, #1
    13e8:	2232      	movs	r2, #50	; 0x32
    13ea:	490c      	ldr	r1, [pc, #48]	; (141c <dac_sync_init+0x44>)
    13ec:	4b0c      	ldr	r3, [pc, #48]	; (1420 <dac_sync_init+0x48>)
    13ee:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    13f0:	0029      	movs	r1, r5
    13f2:	0020      	movs	r0, r4
    13f4:	4b0b      	ldr	r3, [pc, #44]	; (1424 <dac_sync_init+0x4c>)
    13f6:	4798      	blx	r3
	if (rc) {
    13f8:	2800      	cmp	r0, #0
    13fa:	d10e      	bne.n	141a <dac_sync_init+0x42>
    13fc:	2300      	movs	r3, #0
    13fe:	e00a      	b.n	1416 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    1400:	2000      	movs	r0, #0
    1402:	e7f1      	b.n	13e8 <dac_sync_init+0x10>
    1404:	2000      	movs	r0, #0
    1406:	e7ef      	b.n	13e8 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1408:	00da      	lsls	r2, r3, #3
    140a:	18a2      	adds	r2, r4, r2
    140c:	2100      	movs	r1, #0
    140e:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    1410:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    1412:	3301      	adds	r3, #1
    1414:	b2db      	uxtb	r3, r3
    1416:	2b00      	cmp	r3, #0
    1418:	d0f6      	beq.n	1408 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    141a:	bd70      	pop	{r4, r5, r6, pc}
    141c:	000074c4 	.word	0x000074c4
    1420:	00002175 	.word	0x00002175
    1424:	000023e5 	.word	0x000023e5

00001428 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1428:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    142a:	4b02      	ldr	r3, [pc, #8]	; (1434 <delay_init+0xc>)
    142c:	6018      	str	r0, [r3, #0]
    142e:	4b02      	ldr	r3, [pc, #8]	; (1438 <delay_init+0x10>)
    1430:	4798      	blx	r3
}
    1432:	bd10      	pop	{r4, pc}
    1434:	200005a4 	.word	0x200005a4
    1438:	00002d3d 	.word	0x00002d3d

0000143c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    143c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    143e:	4b04      	ldr	r3, [pc, #16]	; (1450 <delay_ms+0x14>)
    1440:	681c      	ldr	r4, [r3, #0]
    1442:	4b04      	ldr	r3, [pc, #16]	; (1454 <delay_ms+0x18>)
    1444:	4798      	blx	r3
    1446:	0001      	movs	r1, r0
    1448:	0020      	movs	r0, r4
    144a:	4b03      	ldr	r3, [pc, #12]	; (1458 <delay_ms+0x1c>)
    144c:	4798      	blx	r3
}
    144e:	bd10      	pop	{r4, pc}
    1450:	200005a4 	.word	0x200005a4
    1454:	00002365 	.word	0x00002365
    1458:	00002d49 	.word	0x00002d49

0000145c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    145c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    145e:	2501      	movs	r5, #1
    1460:	2400      	movs	r4, #0

	while (upper >= lower) {
    1462:	e007      	b.n	1474 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    1464:	4a0d      	ldr	r2, [pc, #52]	; (149c <process_ext_irq+0x40>)
    1466:	58b3      	ldr	r3, [r6, r2]
    1468:	2b00      	cmp	r3, #0
    146a:	d000      	beq.n	146e <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    146c:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    146e:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    1470:	3a01      	subs	r2, #1
    1472:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    1474:	42ac      	cmp	r4, r5
    1476:	d8fa      	bhi.n	146e <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    1478:	192b      	adds	r3, r5, r4
    147a:	105b      	asrs	r3, r3, #1
    147c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    147e:	2a00      	cmp	r2, #0
    1480:	d1f5      	bne.n	146e <process_ext_irq+0x12>
    1482:	21ff      	movs	r1, #255	; 0xff
    1484:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    1486:	00de      	lsls	r6, r3, #3
    1488:	4904      	ldr	r1, [pc, #16]	; (149c <process_ext_irq+0x40>)
    148a:	1989      	adds	r1, r1, r6
    148c:	6849      	ldr	r1, [r1, #4]
    148e:	4281      	cmp	r1, r0
    1490:	d0e8      	beq.n	1464 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    1492:	d2ed      	bcs.n	1470 <process_ext_irq+0x14>
			lower = middle + 1;
    1494:	3201      	adds	r2, #1
    1496:	b2d4      	uxtb	r4, r2
    1498:	e7ec      	b.n	1474 <process_ext_irq+0x18>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	200005a8 	.word	0x200005a8

000014a0 <ext_irq_init>:
{
    14a0:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    14a2:	2300      	movs	r3, #0
    14a4:	2b00      	cmp	r3, #0
    14a6:	d003      	beq.n	14b0 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
    14a8:	4807      	ldr	r0, [pc, #28]	; (14c8 <ext_irq_init+0x28>)
    14aa:	4b08      	ldr	r3, [pc, #32]	; (14cc <ext_irq_init+0x2c>)
    14ac:	4798      	blx	r3
}
    14ae:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
    14b0:	4a07      	ldr	r2, [pc, #28]	; (14d0 <ext_irq_init+0x30>)
    14b2:	00d9      	lsls	r1, r3, #3
    14b4:	1850      	adds	r0, r2, r1
    14b6:	2401      	movs	r4, #1
    14b8:	4264      	negs	r4, r4
    14ba:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    14bc:	2000      	movs	r0, #0
    14be:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    14c0:	3301      	adds	r3, #1
    14c2:	b29b      	uxth	r3, r3
    14c4:	e7ee      	b.n	14a4 <ext_irq_init+0x4>
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	0000145d 	.word	0x0000145d
    14cc:	00002411 	.word	0x00002411
    14d0:	200005a8 	.word	0x200005a8

000014d4 <ext_irq_register>:
{
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d6:	46c6      	mov	lr, r8
    14d8:	b500      	push	{lr}
    14da:	b084      	sub	sp, #16
    14dc:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
    14de:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    14e0:	2b00      	cmp	r3, #0
    14e2:	d010      	beq.n	1506 <ext_irq_register+0x32>
	bool    found = false;
    14e4:	2300      	movs	r3, #0
    14e6:	4698      	mov	r8, r3
	if (NULL == cb) {
    14e8:	2900      	cmp	r1, #0
    14ea:	d01b      	beq.n	1524 <ext_irq_register+0x50>
	if (!found) {
    14ec:	4643      	mov	r3, r8
    14ee:	2b00      	cmp	r3, #0
    14f0:	d146      	bne.n	1580 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    14f2:	2b00      	cmp	r3, #0
    14f4:	d124      	bne.n	1540 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
    14f6:	00da      	lsls	r2, r3, #3
    14f8:	4c2a      	ldr	r4, [pc, #168]	; (15a4 <ext_irq_register+0xd0>)
    14fa:	5912      	ldr	r2, [r2, r4]
    14fc:	2a00      	cmp	r2, #0
    14fe:	d018      	beq.n	1532 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1500:	3301      	adds	r3, #1
    1502:	b2db      	uxtb	r3, r3
    1504:	e7f5      	b.n	14f2 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
    1506:	00dc      	lsls	r4, r3, #3
    1508:	4a26      	ldr	r2, [pc, #152]	; (15a4 <ext_irq_register+0xd0>)
    150a:	1912      	adds	r2, r2, r4
    150c:	6852      	ldr	r2, [r2, #4]
    150e:	9801      	ldr	r0, [sp, #4]
    1510:	4282      	cmp	r2, r0
    1512:	d002      	beq.n	151a <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    1514:	3301      	adds	r3, #1
    1516:	b2db      	uxtb	r3, r3
    1518:	e7e2      	b.n	14e0 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
    151a:	4b22      	ldr	r3, [pc, #136]	; (15a4 <ext_irq_register+0xd0>)
    151c:	50e1      	str	r1, [r4, r3]
			found          = true;
    151e:	2301      	movs	r3, #1
    1520:	4698      	mov	r8, r3
			break;
    1522:	e7e1      	b.n	14e8 <ext_irq_register+0x14>
		if (!found) {
    1524:	4643      	mov	r3, r8
    1526:	2b00      	cmp	r3, #0
    1528:	d035      	beq.n	1596 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
    152a:	9801      	ldr	r0, [sp, #4]
    152c:	4b1e      	ldr	r3, [pc, #120]	; (15a8 <ext_irq_register+0xd4>)
    152e:	4798      	blx	r3
    1530:	e02d      	b.n	158e <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
    1532:	00dd      	lsls	r5, r3, #3
    1534:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
    1536:	1965      	adds	r5, r4, r5
    1538:	9a01      	ldr	r2, [sp, #4]
    153a:	606a      	str	r2, [r5, #4]
				found           = true;
    153c:	2201      	movs	r2, #1
    153e:	4690      	mov	r8, r2
    1540:	2200      	movs	r2, #0
    1542:	e001      	b.n	1548 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1544:	3201      	adds	r2, #1
    1546:	b2d2      	uxtb	r2, r2
    1548:	0019      	movs	r1, r3
    154a:	4311      	orrs	r1, r2
    154c:	d118      	bne.n	1580 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    154e:	4915      	ldr	r1, [pc, #84]	; (15a4 <ext_irq_register+0xd0>)
    1550:	00dc      	lsls	r4, r3, #3
    1552:	190c      	adds	r4, r1, r4
    1554:	6867      	ldr	r7, [r4, #4]
    1556:	00d4      	lsls	r4, r2, #3
    1558:	1909      	adds	r1, r1, r4
    155a:	6849      	ldr	r1, [r1, #4]
    155c:	428f      	cmp	r7, r1
    155e:	d2f1      	bcs.n	1544 <ext_irq_register+0x70>
    1560:	1c4c      	adds	r4, r1, #1
    1562:	d0ef      	beq.n	1544 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
    1564:	a902      	add	r1, sp, #8
    1566:	468c      	mov	ip, r1
    1568:	4f0e      	ldr	r7, [pc, #56]	; (15a4 <ext_irq_register+0xd0>)
    156a:	00d1      	lsls	r1, r2, #3
    156c:	1879      	adds	r1, r7, r1
    156e:	4664      	mov	r4, ip
    1570:	c941      	ldmia	r1!, {r0, r6}
    1572:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
    1574:	00dd      	lsls	r5, r3, #3
    1576:	197d      	adds	r5, r7, r5
    1578:	4661      	mov	r1, ip
    157a:	c911      	ldmia	r1!, {r0, r4}
    157c:	c511      	stmia	r5!, {r0, r4}
    157e:	e7e1      	b.n	1544 <ext_irq_register+0x70>
	if (!found) {
    1580:	4643      	mov	r3, r8
    1582:	2b00      	cmp	r3, #0
    1584:	d00a      	beq.n	159c <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
    1586:	2101      	movs	r1, #1
    1588:	9801      	ldr	r0, [sp, #4]
    158a:	4b07      	ldr	r3, [pc, #28]	; (15a8 <ext_irq_register+0xd4>)
    158c:	4798      	blx	r3
}
    158e:	b004      	add	sp, #16
    1590:	bc04      	pop	{r2}
    1592:	4690      	mov	r8, r2
    1594:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    1596:	200d      	movs	r0, #13
    1598:	4240      	negs	r0, r0
    159a:	e7f8      	b.n	158e <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
    159c:	200d      	movs	r0, #13
    159e:	4240      	negs	r0, r0
    15a0:	e7f5      	b.n	158e <ext_irq_register+0xba>
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	200005a8 	.word	0x200005a8
    15a8:	000024a1 	.word	0x000024a1

000015ac <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    15ac:	b570      	push	{r4, r5, r6, lr}
    15ae:	0004      	movs	r4, r0
    15b0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    15b2:	2800      	cmp	r0, #0
    15b4:	d017      	beq.n	15e6 <spi_m_sync_init+0x3a>
    15b6:	2900      	cmp	r1, #0
    15b8:	d013      	beq.n	15e2 <spi_m_sync_init+0x36>
    15ba:	2001      	movs	r0, #1
    15bc:	2240      	movs	r2, #64	; 0x40
    15be:	490b      	ldr	r1, [pc, #44]	; (15ec <spi_m_sync_init+0x40>)
    15c0:	4b0b      	ldr	r3, [pc, #44]	; (15f0 <spi_m_sync_init+0x44>)
    15c2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    15c4:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    15c6:	1d20      	adds	r0, r4, #4
    15c8:	0029      	movs	r1, r5
    15ca:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <spi_m_sync_init+0x48>)
    15cc:	4798      	blx	r3

	if (rc < 0) {
    15ce:	2800      	cmp	r0, #0
    15d0:	db06      	blt.n	15e0 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    15d2:	4b09      	ldr	r3, [pc, #36]	; (15f8 <spi_m_sync_init+0x4c>)
    15d4:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    15d6:	4b09      	ldr	r3, [pc, #36]	; (15fc <spi_m_sync_init+0x50>)
    15d8:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    15da:	4b09      	ldr	r3, [pc, #36]	; (1600 <spi_m_sync_init+0x54>)
    15dc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    15de:	2000      	movs	r0, #0
}
    15e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    15e2:	2000      	movs	r0, #0
    15e4:	e7ea      	b.n	15bc <spi_m_sync_init+0x10>
    15e6:	2000      	movs	r0, #0
    15e8:	e7e8      	b.n	15bc <spi_m_sync_init+0x10>
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	000074e0 	.word	0x000074e0
    15f0:	00002175 	.word	0x00002175
    15f4:	00002921 	.word	0x00002921
    15f8:	ffff8000 	.word	0xffff8000
    15fc:	00001689 	.word	0x00001689
    1600:	0000164d 	.word	0x0000164d

00001604 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1604:	b530      	push	{r4, r5, lr}
    1606:	b087      	sub	sp, #28
    1608:	0004      	movs	r4, r0
    160a:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    160c:	2800      	cmp	r0, #0
    160e:	d015      	beq.n	163c <spi_m_sync_transfer+0x38>
    1610:	2900      	cmp	r1, #0
    1612:	d011      	beq.n	1638 <spi_m_sync_transfer+0x34>
    1614:	2001      	movs	r0, #1
    1616:	22b3      	movs	r2, #179	; 0xb3
    1618:	4909      	ldr	r1, [pc, #36]	; (1640 <spi_m_sync_transfer+0x3c>)
    161a:	4b0a      	ldr	r3, [pc, #40]	; (1644 <spi_m_sync_transfer+0x40>)
    161c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    161e:	682b      	ldr	r3, [r5, #0]
    1620:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1622:	686b      	ldr	r3, [r5, #4]
    1624:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    1626:	68ab      	ldr	r3, [r5, #8]
    1628:	9301      	str	r3, [sp, #4]
    162a:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    162c:	1d20      	adds	r0, r4, #4
    162e:	a903      	add	r1, sp, #12
    1630:	4b05      	ldr	r3, [pc, #20]	; (1648 <spi_m_sync_transfer+0x44>)
    1632:	4798      	blx	r3
}
    1634:	b007      	add	sp, #28
    1636:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    1638:	2000      	movs	r0, #0
    163a:	e7ec      	b.n	1616 <spi_m_sync_transfer+0x12>
    163c:	2000      	movs	r0, #0
    163e:	e7ea      	b.n	1616 <spi_m_sync_transfer+0x12>
    1640:	000074e0 	.word	0x000074e0
    1644:	00002175 	.word	0x00002175
    1648:	00002b25 	.word	0x00002b25

0000164c <_spi_m_sync_io_write>:
{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	b084      	sub	sp, #16
    1650:	0004      	movs	r4, r0
    1652:	000e      	movs	r6, r1
    1654:	0015      	movs	r5, r2
	ASSERT(io);
    1656:	1e43      	subs	r3, r0, #1
    1658:	4198      	sbcs	r0, r3
    165a:	b2c0      	uxtb	r0, r0
    165c:	22a3      	movs	r2, #163	; 0xa3
    165e:	4907      	ldr	r1, [pc, #28]	; (167c <_spi_m_sync_io_write+0x30>)
    1660:	4b07      	ldr	r3, [pc, #28]	; (1680 <_spi_m_sync_io_write+0x34>)
    1662:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1664:	0020      	movs	r0, r4
    1666:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    1668:	2300      	movs	r3, #0
    166a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    166c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    166e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1670:	a901      	add	r1, sp, #4
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <_spi_m_sync_io_write+0x38>)
    1674:	4798      	blx	r3
}
    1676:	b004      	add	sp, #16
    1678:	bd70      	pop	{r4, r5, r6, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	000074e0 	.word	0x000074e0
    1680:	00002175 	.word	0x00002175
    1684:	00001605 	.word	0x00001605

00001688 <_spi_m_sync_io_read>:
{
    1688:	b570      	push	{r4, r5, r6, lr}
    168a:	b084      	sub	sp, #16
    168c:	0004      	movs	r4, r0
    168e:	000e      	movs	r6, r1
    1690:	0015      	movs	r5, r2
	ASSERT(io);
    1692:	1e43      	subs	r3, r0, #1
    1694:	4198      	sbcs	r0, r3
    1696:	b2c0      	uxtb	r0, r0
    1698:	2287      	movs	r2, #135	; 0x87
    169a:	4907      	ldr	r1, [pc, #28]	; (16b8 <_spi_m_sync_io_read+0x30>)
    169c:	4b07      	ldr	r3, [pc, #28]	; (16bc <_spi_m_sync_io_read+0x34>)
    169e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    16a0:	0020      	movs	r0, r4
    16a2:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    16a4:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    16a6:	2300      	movs	r3, #0
    16a8:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    16aa:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    16ac:	a901      	add	r1, sp, #4
    16ae:	4b04      	ldr	r3, [pc, #16]	; (16c0 <_spi_m_sync_io_read+0x38>)
    16b0:	4798      	blx	r3
}
    16b2:	b004      	add	sp, #16
    16b4:	bd70      	pop	{r4, r5, r6, pc}
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	000074e0 	.word	0x000074e0
    16bc:	00002175 	.word	0x00002175
    16c0:	00001605 	.word	0x00001605

000016c4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    16c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    16c6:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    16c8:	2e00      	cmp	r6, #0
    16ca:	d002      	beq.n	16d2 <timer_add_timer_task+0xe>
    16cc:	0033      	movs	r3, r6
    16ce:	2500      	movs	r5, #0
    16d0:	e00c      	b.n	16ec <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    16d2:	4b10      	ldr	r3, [pc, #64]	; (1714 <timer_add_timer_task+0x50>)
    16d4:	4798      	blx	r3
		return;
    16d6:	e018      	b.n	170a <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    16d8:	689f      	ldr	r7, [r3, #8]
    16da:	46bc      	mov	ip, r7
    16dc:	4464      	add	r4, ip
    16de:	1aa4      	subs	r4, r4, r2
    16e0:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    16e2:	688f      	ldr	r7, [r1, #8]
    16e4:	42bc      	cmp	r4, r7
    16e6:	d20b      	bcs.n	1700 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    16e8:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d007      	beq.n	1700 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    16f0:	685c      	ldr	r4, [r3, #4]
    16f2:	4294      	cmp	r4, r2
    16f4:	d8f0      	bhi.n	16d8 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    16f6:	1aa4      	subs	r4, r4, r2
    16f8:	689f      	ldr	r7, [r3, #8]
    16fa:	46bc      	mov	ip, r7
    16fc:	4464      	add	r4, ip
    16fe:	e7f0      	b.n	16e2 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    1700:	42b3      	cmp	r3, r6
    1702:	d003      	beq.n	170c <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1704:	0028      	movs	r0, r5
    1706:	4b04      	ldr	r3, [pc, #16]	; (1718 <timer_add_timer_task+0x54>)
    1708:	4798      	blx	r3
	}
}
    170a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    170c:	4b01      	ldr	r3, [pc, #4]	; (1714 <timer_add_timer_task+0x50>)
    170e:	4798      	blx	r3
    1710:	e7fb      	b.n	170a <timer_add_timer_task+0x46>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00002195 	.word	0x00002195
    1718:	000021c1 	.word	0x000021c1

0000171c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    171e:	0005      	movs	r5, r0
    1720:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1722:	6903      	ldr	r3, [r0, #16]
    1724:	1c5e      	adds	r6, r3, #1
    1726:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1728:	7e03      	ldrb	r3, [r0, #24]
    172a:	07db      	lsls	r3, r3, #31
    172c:	d402      	bmi.n	1734 <timer_process_counted+0x18>
    172e:	7e03      	ldrb	r3, [r0, #24]
    1730:	079b      	lsls	r3, r3, #30
    1732:	d50a      	bpl.n	174a <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1734:	7e2b      	ldrb	r3, [r5, #24]
    1736:	2202      	movs	r2, #2
    1738:	4313      	orrs	r3, r2
    173a:	b2db      	uxtb	r3, r3
    173c:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1740:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    1742:	68e3      	ldr	r3, [r4, #12]
    1744:	0020      	movs	r0, r4
    1746:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1748:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    174a:	2c00      	cmp	r4, #0
    174c:	d0f7      	beq.n	173e <timer_process_counted+0x22>
    174e:	6863      	ldr	r3, [r4, #4]
    1750:	1af3      	subs	r3, r6, r3
    1752:	68a2      	ldr	r2, [r4, #8]
    1754:	4293      	cmp	r3, r2
    1756:	d3f2      	bcc.n	173e <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    1758:	002f      	movs	r7, r5
    175a:	3714      	adds	r7, #20
    175c:	0038      	movs	r0, r7
    175e:	4b06      	ldr	r3, [pc, #24]	; (1778 <timer_process_counted+0x5c>)
    1760:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1762:	7c23      	ldrb	r3, [r4, #16]
    1764:	2b01      	cmp	r3, #1
    1766:	d1eb      	bne.n	1740 <timer_process_counted+0x24>
			tmp->time_label = time;
    1768:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    176a:	0032      	movs	r2, r6
    176c:	0021      	movs	r1, r4
    176e:	0038      	movs	r0, r7
    1770:	4b02      	ldr	r3, [pc, #8]	; (177c <timer_process_counted+0x60>)
    1772:	4798      	blx	r3
    1774:	e7e4      	b.n	1740 <timer_process_counted+0x24>
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	00002209 	.word	0x00002209
    177c:	000016c5 	.word	0x000016c5

00001780 <timer_init>:
{
    1780:	b570      	push	{r4, r5, r6, lr}
    1782:	0004      	movs	r4, r0
    1784:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    1786:	2800      	cmp	r0, #0
    1788:	d012      	beq.n	17b0 <timer_init+0x30>
    178a:	2900      	cmp	r1, #0
    178c:	d00e      	beq.n	17ac <timer_init+0x2c>
    178e:	2001      	movs	r0, #1
    1790:	223b      	movs	r2, #59	; 0x3b
    1792:	4908      	ldr	r1, [pc, #32]	; (17b4 <timer_init+0x34>)
    1794:	4b08      	ldr	r3, [pc, #32]	; (17b8 <timer_init+0x38>)
    1796:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1798:	0029      	movs	r1, r5
    179a:	0020      	movs	r0, r4
    179c:	4b07      	ldr	r3, [pc, #28]	; (17bc <timer_init+0x3c>)
    179e:	4798      	blx	r3
	descr->time                           = 0;
    17a0:	2300      	movs	r3, #0
    17a2:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    17a4:	4b06      	ldr	r3, [pc, #24]	; (17c0 <timer_init+0x40>)
    17a6:	6023      	str	r3, [r4, #0]
}
    17a8:	2000      	movs	r0, #0
    17aa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    17ac:	2000      	movs	r0, #0
    17ae:	e7ef      	b.n	1790 <timer_init+0x10>
    17b0:	2000      	movs	r0, #0
    17b2:	e7ed      	b.n	1790 <timer_init+0x10>
    17b4:	000074fc 	.word	0x000074fc
    17b8:	00002175 	.word	0x00002175
    17bc:	00002e25 	.word	0x00002e25
    17c0:	0000171d 	.word	0x0000171d

000017c4 <timer_start>:
{
    17c4:	b510      	push	{r4, lr}
    17c6:	0004      	movs	r4, r0
	ASSERT(descr);
    17c8:	1e43      	subs	r3, r0, #1
    17ca:	4198      	sbcs	r0, r3
    17cc:	b2c0      	uxtb	r0, r0
    17ce:	2253      	movs	r2, #83	; 0x53
    17d0:	4907      	ldr	r1, [pc, #28]	; (17f0 <timer_start+0x2c>)
    17d2:	4b08      	ldr	r3, [pc, #32]	; (17f4 <timer_start+0x30>)
    17d4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    17d6:	0020      	movs	r0, r4
    17d8:	4b07      	ldr	r3, [pc, #28]	; (17f8 <timer_start+0x34>)
    17da:	4798      	blx	r3
    17dc:	2800      	cmp	r0, #0
    17de:	d104      	bne.n	17ea <timer_start+0x26>
	_timer_start(&descr->device);
    17e0:	0020      	movs	r0, r4
    17e2:	4b06      	ldr	r3, [pc, #24]	; (17fc <timer_start+0x38>)
    17e4:	4798      	blx	r3
	return ERR_NONE;
    17e6:	2000      	movs	r0, #0
}
    17e8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    17ea:	2011      	movs	r0, #17
    17ec:	4240      	negs	r0, r0
    17ee:	e7fb      	b.n	17e8 <timer_start+0x24>
    17f0:	000074fc 	.word	0x000074fc
    17f4:	00002175 	.word	0x00002175
    17f8:	00002f63 	.word	0x00002f63
    17fc:	00002f49 	.word	0x00002f49

00001800 <timer_stop>:
{
    1800:	b510      	push	{r4, lr}
    1802:	0004      	movs	r4, r0
	ASSERT(descr);
    1804:	1e43      	subs	r3, r0, #1
    1806:	4198      	sbcs	r0, r3
    1808:	b2c0      	uxtb	r0, r0
    180a:	2261      	movs	r2, #97	; 0x61
    180c:	4907      	ldr	r1, [pc, #28]	; (182c <timer_stop+0x2c>)
    180e:	4b08      	ldr	r3, [pc, #32]	; (1830 <timer_stop+0x30>)
    1810:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    1812:	0020      	movs	r0, r4
    1814:	4b07      	ldr	r3, [pc, #28]	; (1834 <timer_stop+0x34>)
    1816:	4798      	blx	r3
    1818:	2800      	cmp	r0, #0
    181a:	d004      	beq.n	1826 <timer_stop+0x26>
	_timer_stop(&descr->device);
    181c:	0020      	movs	r0, r4
    181e:	4b06      	ldr	r3, [pc, #24]	; (1838 <timer_stop+0x38>)
    1820:	4798      	blx	r3
	return ERR_NONE;
    1822:	2000      	movs	r0, #0
}
    1824:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1826:	2011      	movs	r0, #17
    1828:	4240      	negs	r0, r0
    182a:	e7fb      	b.n	1824 <timer_stop+0x24>
    182c:	000074fc 	.word	0x000074fc
    1830:	00002175 	.word	0x00002175
    1834:	00002f63 	.word	0x00002f63
    1838:	00002f57 	.word	0x00002f57

0000183c <timer_add_task>:
{
    183c:	b570      	push	{r4, r5, r6, lr}
    183e:	b082      	sub	sp, #8
    1840:	0004      	movs	r4, r0
    1842:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1844:	2800      	cmp	r0, #0
    1846:	d026      	beq.n	1896 <timer_add_task+0x5a>
    1848:	2900      	cmp	r1, #0
    184a:	d022      	beq.n	1892 <timer_add_task+0x56>
    184c:	2001      	movs	r0, #1
    184e:	227a      	movs	r2, #122	; 0x7a
    1850:	491f      	ldr	r1, [pc, #124]	; (18d0 <timer_add_task+0x94>)
    1852:	4b20      	ldr	r3, [pc, #128]	; (18d4 <timer_add_task+0x98>)
    1854:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1856:	7e23      	ldrb	r3, [r4, #24]
    1858:	2201      	movs	r2, #1
    185a:	4313      	orrs	r3, r2
    185c:	b2db      	uxtb	r3, r3
    185e:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1860:	0026      	movs	r6, r4
    1862:	3614      	adds	r6, #20
    1864:	0029      	movs	r1, r5
    1866:	0030      	movs	r0, r6
    1868:	4b1b      	ldr	r3, [pc, #108]	; (18d8 <timer_add_task+0x9c>)
    186a:	4798      	blx	r3
    186c:	2800      	cmp	r0, #0
    186e:	d114      	bne.n	189a <timer_add_task+0x5e>
	task->time_label = descr->time;
    1870:	6923      	ldr	r3, [r4, #16]
    1872:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1874:	6922      	ldr	r2, [r4, #16]
    1876:	0029      	movs	r1, r5
    1878:	0030      	movs	r0, r6
    187a:	4b18      	ldr	r3, [pc, #96]	; (18dc <timer_add_task+0xa0>)
    187c:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    187e:	7e23      	ldrb	r3, [r4, #24]
    1880:	2201      	movs	r2, #1
    1882:	4393      	bics	r3, r2
    1884:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1886:	7e23      	ldrb	r3, [r4, #24]
    1888:	079b      	lsls	r3, r3, #30
    188a:	d412      	bmi.n	18b2 <timer_add_task+0x76>
	return ERR_NONE;
    188c:	2000      	movs	r0, #0
}
    188e:	b002      	add	sp, #8
    1890:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    1892:	2000      	movs	r0, #0
    1894:	e7db      	b.n	184e <timer_add_task+0x12>
    1896:	2000      	movs	r0, #0
    1898:	e7d9      	b.n	184e <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    189a:	7e23      	ldrb	r3, [r4, #24]
    189c:	2201      	movs	r2, #1
    189e:	4393      	bics	r3, r2
    18a0:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    18a2:	327e      	adds	r2, #126	; 0x7e
    18a4:	490a      	ldr	r1, [pc, #40]	; (18d0 <timer_add_task+0x94>)
    18a6:	2000      	movs	r0, #0
    18a8:	4b0a      	ldr	r3, [pc, #40]	; (18d4 <timer_add_task+0x98>)
    18aa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    18ac:	2012      	movs	r0, #18
    18ae:	4240      	negs	r0, r0
    18b0:	e7ed      	b.n	188e <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    18b2:	a801      	add	r0, sp, #4
    18b4:	4b0a      	ldr	r3, [pc, #40]	; (18e0 <timer_add_task+0xa4>)
    18b6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    18b8:	7e23      	ldrb	r3, [r4, #24]
    18ba:	2202      	movs	r2, #2
    18bc:	4393      	bics	r3, r2
    18be:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    18c0:	0020      	movs	r0, r4
    18c2:	4b08      	ldr	r3, [pc, #32]	; (18e4 <timer_add_task+0xa8>)
    18c4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    18c6:	a801      	add	r0, sp, #4
    18c8:	4b07      	ldr	r3, [pc, #28]	; (18e8 <timer_add_task+0xac>)
    18ca:	4798      	blx	r3
	return ERR_NONE;
    18cc:	2000      	movs	r0, #0
    18ce:	e7de      	b.n	188e <timer_add_task+0x52>
    18d0:	000074fc 	.word	0x000074fc
    18d4:	00002175 	.word	0x00002175
    18d8:	0000217d 	.word	0x0000217d
    18dc:	000016c5 	.word	0x000016c5
    18e0:	000013bd 	.word	0x000013bd
    18e4:	00002f75 	.word	0x00002f75
    18e8:	000013cb 	.word	0x000013cb

000018ec <timer_remove_task>:
{
    18ec:	b570      	push	{r4, r5, r6, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	0004      	movs	r4, r0
    18f2:	000d      	movs	r5, r1
	ASSERT(descr && task);
    18f4:	2800      	cmp	r0, #0
    18f6:	d023      	beq.n	1940 <timer_remove_task+0x54>
    18f8:	2900      	cmp	r1, #0
    18fa:	d01f      	beq.n	193c <timer_remove_task+0x50>
    18fc:	2001      	movs	r0, #1
    18fe:	2295      	movs	r2, #149	; 0x95
    1900:	491d      	ldr	r1, [pc, #116]	; (1978 <timer_remove_task+0x8c>)
    1902:	4b1e      	ldr	r3, [pc, #120]	; (197c <timer_remove_task+0x90>)
    1904:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1906:	7e23      	ldrb	r3, [r4, #24]
    1908:	2201      	movs	r2, #1
    190a:	4313      	orrs	r3, r2
    190c:	b2db      	uxtb	r3, r3
    190e:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    1910:	0026      	movs	r6, r4
    1912:	3614      	adds	r6, #20
    1914:	0029      	movs	r1, r5
    1916:	0030      	movs	r0, r6
    1918:	4b19      	ldr	r3, [pc, #100]	; (1980 <timer_remove_task+0x94>)
    191a:	4798      	blx	r3
    191c:	2800      	cmp	r0, #0
    191e:	d011      	beq.n	1944 <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
    1920:	0029      	movs	r1, r5
    1922:	0030      	movs	r0, r6
    1924:	4b17      	ldr	r3, [pc, #92]	; (1984 <timer_remove_task+0x98>)
    1926:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1928:	7e23      	ldrb	r3, [r4, #24]
    192a:	2201      	movs	r2, #1
    192c:	4393      	bics	r3, r2
    192e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1930:	7e23      	ldrb	r3, [r4, #24]
    1932:	079b      	lsls	r3, r3, #30
    1934:	d411      	bmi.n	195a <timer_remove_task+0x6e>
	return ERR_NONE;
    1936:	2000      	movs	r0, #0
}
    1938:	b002      	add	sp, #8
    193a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    193c:	2000      	movs	r0, #0
    193e:	e7de      	b.n	18fe <timer_remove_task+0x12>
    1940:	2000      	movs	r0, #0
    1942:	e7dc      	b.n	18fe <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1944:	7e23      	ldrb	r3, [r4, #24]
    1946:	2201      	movs	r2, #1
    1948:	4393      	bics	r3, r2
    194a:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    194c:	3299      	adds	r2, #153	; 0x99
    194e:	490a      	ldr	r1, [pc, #40]	; (1978 <timer_remove_task+0x8c>)
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <timer_remove_task+0x90>)
    1952:	4798      	blx	r3
		return ERR_NOT_FOUND;
    1954:	200a      	movs	r0, #10
    1956:	4240      	negs	r0, r0
    1958:	e7ee      	b.n	1938 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    195a:	a801      	add	r0, sp, #4
    195c:	4b0a      	ldr	r3, [pc, #40]	; (1988 <timer_remove_task+0x9c>)
    195e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1960:	7e23      	ldrb	r3, [r4, #24]
    1962:	2202      	movs	r2, #2
    1964:	4393      	bics	r3, r2
    1966:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1968:	0020      	movs	r0, r4
    196a:	4b08      	ldr	r3, [pc, #32]	; (198c <timer_remove_task+0xa0>)
    196c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    196e:	a801      	add	r0, sp, #4
    1970:	4b07      	ldr	r3, [pc, #28]	; (1990 <timer_remove_task+0xa4>)
    1972:	4798      	blx	r3
	return ERR_NONE;
    1974:	2000      	movs	r0, #0
    1976:	e7df      	b.n	1938 <timer_remove_task+0x4c>
    1978:	000074fc 	.word	0x000074fc
    197c:	00002175 	.word	0x00002175
    1980:	0000217d 	.word	0x0000217d
    1984:	0000221b 	.word	0x0000221b
    1988:	000013bd 	.word	0x000013bd
    198c:	00002f75 	.word	0x00002f75
    1990:	000013cb 	.word	0x000013cb

00001994 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1994:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1996:	3808      	subs	r0, #8

	descr->stat = 0;
    1998:	2300      	movs	r3, #0
    199a:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    199c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    199e:	2b00      	cmp	r3, #0
    19a0:	d000      	beq.n	19a4 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    19a2:	4798      	blx	r3
	}
}
    19a4:	bd10      	pop	{r4, pc}

000019a6 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    19a6:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19a8:	3808      	subs	r0, #8

	descr->stat = 0;
    19aa:	2300      	movs	r3, #0
    19ac:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    19ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    19b0:	2b00      	cmp	r3, #0
    19b2:	d000      	beq.n	19b6 <usart_error+0x10>
		descr->usart_cb.error(descr);
    19b4:	4798      	blx	r3
	}
}
    19b6:	bd10      	pop	{r4, pc}

000019b8 <usart_fill_rx_buffer>:
{
    19b8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19ba:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    19bc:	302c      	adds	r0, #44	; 0x2c
    19be:	4b04      	ldr	r3, [pc, #16]	; (19d0 <usart_fill_rx_buffer+0x18>)
    19c0:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    19c2:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    19c4:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    19c6:	2b00      	cmp	r3, #0
    19c8:	d001      	beq.n	19ce <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    19ca:	0020      	movs	r0, r4
    19cc:	4798      	blx	r3
}
    19ce:	bd10      	pop	{r4, pc}
    19d0:	000022e5 	.word	0x000022e5

000019d4 <usart_async_write>:
{
    19d4:	b570      	push	{r4, r5, r6, lr}
    19d6:	0004      	movs	r4, r0
    19d8:	000e      	movs	r6, r1
    19da:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    19dc:	2800      	cmp	r0, #0
    19de:	d01d      	beq.n	1a1c <usart_async_write+0x48>
    19e0:	2900      	cmp	r1, #0
    19e2:	d01d      	beq.n	1a20 <usart_async_write+0x4c>
    19e4:	2a00      	cmp	r2, #0
    19e6:	d11d      	bne.n	1a24 <usart_async_write+0x50>
    19e8:	2000      	movs	r0, #0
    19ea:	223c      	movs	r2, #60	; 0x3c
    19ec:	32ff      	adds	r2, #255	; 0xff
    19ee:	4910      	ldr	r1, [pc, #64]	; (1a30 <usart_async_write+0x5c>)
    19f0:	4b10      	ldr	r3, [pc, #64]	; (1a34 <usart_async_write+0x60>)
    19f2:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    19f4:	2344      	movs	r3, #68	; 0x44
    19f6:	5ae2      	ldrh	r2, [r4, r3]
    19f8:	3308      	adds	r3, #8
    19fa:	5ae3      	ldrh	r3, [r4, r3]
    19fc:	429a      	cmp	r2, r3
    19fe:	d113      	bne.n	1a28 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    1a00:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1a02:	234c      	movs	r3, #76	; 0x4c
    1a04:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    1a06:	2200      	movs	r2, #0
    1a08:	3b08      	subs	r3, #8
    1a0a:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1a0c:	3b43      	subs	r3, #67	; 0x43
    1a0e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1a10:	0020      	movs	r0, r4
    1a12:	3008      	adds	r0, #8
    1a14:	4b08      	ldr	r3, [pc, #32]	; (1a38 <usart_async_write+0x64>)
    1a16:	4798      	blx	r3
	return (int32_t)length;
    1a18:	0028      	movs	r0, r5
}
    1a1a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1a1c:	2000      	movs	r0, #0
    1a1e:	e7e4      	b.n	19ea <usart_async_write+0x16>
    1a20:	2000      	movs	r0, #0
    1a22:	e7e2      	b.n	19ea <usart_async_write+0x16>
    1a24:	2001      	movs	r0, #1
    1a26:	e7e0      	b.n	19ea <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    1a28:	201c      	movs	r0, #28
    1a2a:	4240      	negs	r0, r0
    1a2c:	e7f5      	b.n	1a1a <usart_async_write+0x46>
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	00007514 	.word	0x00007514
    1a34:	00002175 	.word	0x00002175
    1a38:	000028fd 	.word	0x000028fd

00001a3c <usart_process_byte_sent>:
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1a40:	0002      	movs	r2, r0
    1a42:	3a08      	subs	r2, #8
    1a44:	2344      	movs	r3, #68	; 0x44
    1a46:	5ad3      	ldrh	r3, [r2, r3]
    1a48:	214c      	movs	r1, #76	; 0x4c
    1a4a:	5a52      	ldrh	r2, [r2, r1]
    1a4c:	4293      	cmp	r3, r2
    1a4e:	d00d      	beq.n	1a6c <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1a50:	0002      	movs	r2, r0
    1a52:	6c01      	ldr	r1, [r0, #64]	; 0x40
    1a54:	3a08      	subs	r2, #8
    1a56:	1c5d      	adds	r5, r3, #1
    1a58:	2044      	movs	r0, #68	; 0x44
    1a5a:	5215      	strh	r5, [r2, r0]
    1a5c:	5cc9      	ldrb	r1, [r1, r3]
    1a5e:	0020      	movs	r0, r4
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <usart_process_byte_sent+0x38>)
    1a62:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1a64:	0020      	movs	r0, r4
    1a66:	4b04      	ldr	r3, [pc, #16]	; (1a78 <usart_process_byte_sent+0x3c>)
    1a68:	4798      	blx	r3
}
    1a6a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <usart_process_byte_sent+0x40>)
    1a6e:	4798      	blx	r3
}
    1a70:	e7fb      	b.n	1a6a <usart_process_byte_sent+0x2e>
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	000028f5 	.word	0x000028f5
    1a78:	000028fd 	.word	0x000028fd
    1a7c:	00002905 	.word	0x00002905

00001a80 <usart_async_read>:
{
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	b085      	sub	sp, #20
    1a84:	0004      	movs	r4, r0
    1a86:	000d      	movs	r5, r1
    1a88:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    1a8a:	2800      	cmp	r0, #0
    1a8c:	d017      	beq.n	1abe <usart_async_read+0x3e>
    1a8e:	2900      	cmp	r1, #0
    1a90:	d017      	beq.n	1ac2 <usart_async_read+0x42>
    1a92:	2a00      	cmp	r2, #0
    1a94:	d117      	bne.n	1ac6 <usart_async_read+0x46>
    1a96:	2000      	movs	r0, #0
    1a98:	22ac      	movs	r2, #172	; 0xac
    1a9a:	0052      	lsls	r2, r2, #1
    1a9c:	4912      	ldr	r1, [pc, #72]	; (1ae8 <usart_async_read+0x68>)
    1a9e:	4b13      	ldr	r3, [pc, #76]	; (1aec <usart_async_read+0x6c>)
    1aa0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1aa2:	a803      	add	r0, sp, #12
    1aa4:	4b12      	ldr	r3, [pc, #72]	; (1af0 <usart_async_read+0x70>)
    1aa6:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1aa8:	3434      	adds	r4, #52	; 0x34
    1aaa:	0020      	movs	r0, r4
    1aac:	9401      	str	r4, [sp, #4]
    1aae:	4b11      	ldr	r3, [pc, #68]	; (1af4 <usart_async_read+0x74>)
    1ab0:	4798      	blx	r3
    1ab2:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    1ab4:	a803      	add	r0, sp, #12
    1ab6:	4b10      	ldr	r3, [pc, #64]	; (1af8 <usart_async_read+0x78>)
    1ab8:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1aba:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    1abc:	e00b      	b.n	1ad6 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    1abe:	2000      	movs	r0, #0
    1ac0:	e7ea      	b.n	1a98 <usart_async_read+0x18>
    1ac2:	2000      	movs	r0, #0
    1ac4:	e7e8      	b.n	1a98 <usart_async_read+0x18>
    1ac6:	2001      	movs	r0, #1
    1ac8:	e7e6      	b.n	1a98 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1aca:	3401      	adds	r4, #1
    1acc:	b2a4      	uxth	r4, r4
    1ace:	1869      	adds	r1, r5, r1
    1ad0:	9801      	ldr	r0, [sp, #4]
    1ad2:	4b0a      	ldr	r3, [pc, #40]	; (1afc <usart_async_read+0x7c>)
    1ad4:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1ad6:	0021      	movs	r1, r4
    1ad8:	42a7      	cmp	r7, r4
    1ada:	d901      	bls.n	1ae0 <usart_async_read+0x60>
    1adc:	42b4      	cmp	r4, r6
    1ade:	d3f4      	bcc.n	1aca <usart_async_read+0x4a>
}
    1ae0:	0020      	movs	r0, r4
    1ae2:	b005      	add	sp, #20
    1ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	00007514 	.word	0x00007514
    1aec:	00002175 	.word	0x00002175
    1af0:	000013bd 	.word	0x000013bd
    1af4:	00002325 	.word	0x00002325
    1af8:	000013cb 	.word	0x000013cb
    1afc:	00002299 	.word	0x00002299

00001b00 <usart_async_init>:
{
    1b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b02:	0004      	movs	r4, r0
    1b04:	000d      	movs	r5, r1
    1b06:	0016      	movs	r6, r2
    1b08:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d026      	beq.n	1b5c <usart_async_init+0x5c>
    1b0e:	2900      	cmp	r1, #0
    1b10:	d026      	beq.n	1b60 <usart_async_init+0x60>
    1b12:	2a00      	cmp	r2, #0
    1b14:	d026      	beq.n	1b64 <usart_async_init+0x64>
    1b16:	2b00      	cmp	r3, #0
    1b18:	d126      	bne.n	1b68 <usart_async_init+0x68>
    1b1a:	2000      	movs	r0, #0
    1b1c:	223a      	movs	r2, #58	; 0x3a
    1b1e:	4915      	ldr	r1, [pc, #84]	; (1b74 <usart_async_init+0x74>)
    1b20:	4b15      	ldr	r3, [pc, #84]	; (1b78 <usart_async_init+0x78>)
    1b22:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1b24:	0020      	movs	r0, r4
    1b26:	3034      	adds	r0, #52	; 0x34
    1b28:	003a      	movs	r2, r7
    1b2a:	0031      	movs	r1, r6
    1b2c:	4b13      	ldr	r3, [pc, #76]	; (1b7c <usart_async_init+0x7c>)
    1b2e:	4798      	blx	r3
    1b30:	2800      	cmp	r0, #0
    1b32:	d11b      	bne.n	1b6c <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    1b34:	0020      	movs	r0, r4
    1b36:	3008      	adds	r0, #8
    1b38:	0029      	movs	r1, r5
    1b3a:	4b11      	ldr	r3, [pc, #68]	; (1b80 <usart_async_init+0x80>)
    1b3c:	4798      	blx	r3
	if (init_status) {
    1b3e:	2800      	cmp	r0, #0
    1b40:	d10b      	bne.n	1b5a <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    1b42:	4b10      	ldr	r3, [pc, #64]	; (1b84 <usart_async_init+0x84>)
    1b44:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1b46:	4b10      	ldr	r3, [pc, #64]	; (1b88 <usart_async_init+0x88>)
    1b48:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1b4a:	4b10      	ldr	r3, [pc, #64]	; (1b8c <usart_async_init+0x8c>)
    1b4c:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1b4e:	4b10      	ldr	r3, [pc, #64]	; (1b90 <usart_async_init+0x90>)
    1b50:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1b52:	4b10      	ldr	r3, [pc, #64]	; (1b94 <usart_async_init+0x94>)
    1b54:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1b56:	4b10      	ldr	r3, [pc, #64]	; (1b98 <usart_async_init+0x98>)
    1b58:	6163      	str	r3, [r4, #20]
}
    1b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1b5c:	2000      	movs	r0, #0
    1b5e:	e7dd      	b.n	1b1c <usart_async_init+0x1c>
    1b60:	2000      	movs	r0, #0
    1b62:	e7db      	b.n	1b1c <usart_async_init+0x1c>
    1b64:	2000      	movs	r0, #0
    1b66:	e7d9      	b.n	1b1c <usart_async_init+0x1c>
    1b68:	2001      	movs	r0, #1
    1b6a:	e7d7      	b.n	1b1c <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    1b6c:	200d      	movs	r0, #13
    1b6e:	4240      	negs	r0, r0
    1b70:	e7f3      	b.n	1b5a <usart_async_init+0x5a>
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	00007514 	.word	0x00007514
    1b78:	00002175 	.word	0x00002175
    1b7c:	0000224d 	.word	0x0000224d
    1b80:	00002869 	.word	0x00002869
    1b84:	00001a81 	.word	0x00001a81
    1b88:	000019d5 	.word	0x000019d5
    1b8c:	00001a3d 	.word	0x00001a3d
    1b90:	000019b9 	.word	0x000019b9
    1b94:	00001995 	.word	0x00001995
    1b98:	000019a7 	.word	0x000019a7

00001b9c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1b9c:	b510      	push	{r4, lr}
    1b9e:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1ba0:	2000      	movs	r0, #0
    1ba2:	e001      	b.n	1ba8 <_usb_d_find_ep+0xc>
    1ba4:	3001      	adds	r0, #1
    1ba6:	b240      	sxtb	r0, r0
    1ba8:	2807      	cmp	r0, #7
    1baa:	dc0f      	bgt.n	1bcc <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1bac:	0142      	lsls	r2, r0, #5
    1bae:	4b09      	ldr	r3, [pc, #36]	; (1bd4 <_usb_d_find_ep+0x38>)
    1bb0:	189b      	adds	r3, r3, r2
    1bb2:	785a      	ldrb	r2, [r3, #1]
    1bb4:	428a      	cmp	r2, r1
    1bb6:	d00b      	beq.n	1bd0 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1bb8:	0143      	lsls	r3, r0, #5
    1bba:	4c06      	ldr	r4, [pc, #24]	; (1bd4 <_usb_d_find_ep+0x38>)
    1bbc:	5d1b      	ldrb	r3, [r3, r4]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d1f0      	bne.n	1ba4 <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1bc2:	330f      	adds	r3, #15
    1bc4:	400b      	ands	r3, r1
    1bc6:	4293      	cmp	r3, r2
    1bc8:	d1ec      	bne.n	1ba4 <_usb_d_find_ep+0x8>
    1bca:	e001      	b.n	1bd0 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1bcc:	2001      	movs	r0, #1
    1bce:	4240      	negs	r0, r0
}
    1bd0:	bd10      	pop	{r4, pc}
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	200005b0 	.word	0x200005b0

00001bd8 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1bd8:	2000      	movs	r0, #0
    1bda:	4770      	bx	lr

00001bdc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1bdc:	b570      	push	{r4, r5, r6, lr}
    1bde:	0004      	movs	r4, r0
    1be0:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1be2:	4b08      	ldr	r3, [pc, #32]	; (1c04 <usb_d_cb_trans_more+0x28>)
    1be4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1be6:	0142      	lsls	r2, r0, #5
    1be8:	4b07      	ldr	r3, [pc, #28]	; (1c08 <usb_d_cb_trans_more+0x2c>)
    1bea:	189b      	adds	r3, r3, r2
    1bec:	789b      	ldrb	r3, [r3, #2]
    1bee:	2b03      	cmp	r3, #3
    1bf0:	d001      	beq.n	1bf6 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1bf2:	2000      	movs	r0, #0
}
    1bf4:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1bf6:	4b04      	ldr	r3, [pc, #16]	; (1c08 <usb_d_cb_trans_more+0x2c>)
    1bf8:	1898      	adds	r0, r3, r2
    1bfa:	6983      	ldr	r3, [r0, #24]
    1bfc:	0029      	movs	r1, r5
    1bfe:	0020      	movs	r0, r4
    1c00:	4798      	blx	r3
    1c02:	e7f7      	b.n	1bf4 <usb_d_cb_trans_more+0x18>
    1c04:	00001b9d 	.word	0x00001b9d
    1c08:	200005b0 	.word	0x200005b0

00001c0c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c0e:	b087      	sub	sp, #28
    1c10:	0005      	movs	r5, r0
    1c12:	000f      	movs	r7, r1
    1c14:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    1c16:	4b4a      	ldr	r3, [pc, #296]	; (1d40 <_usb_d_cb_trans_done+0x134>)
    1c18:	4798      	blx	r3
    1c1a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    1c1c:	0146      	lsls	r6, r0, #5
    1c1e:	4a49      	ldr	r2, [pc, #292]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1c20:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
    1c22:	2f00      	cmp	r7, #0
    1c24:	d151      	bne.n	1cca <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1c26:	0013      	movs	r3, r2
    1c28:	0142      	lsls	r2, r0, #5
    1c2a:	2000      	movs	r0, #0
    1c2c:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c2e:	5cd3      	ldrb	r3, [r2, r3]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d00e      	beq.n	1c52 <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c34:	0162      	lsls	r2, r4, #5
    1c36:	4b43      	ldr	r3, [pc, #268]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1c38:	189b      	adds	r3, r3, r2
    1c3a:	2201      	movs	r2, #1
    1c3c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1c3e:	0164      	lsls	r4, r4, #5
    1c40:	4b40      	ldr	r3, [pc, #256]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1c42:	191c      	adds	r4, r3, r4
    1c44:	69e3      	ldr	r3, [r4, #28]
    1c46:	78e1      	ldrb	r1, [r4, #3]
    1c48:	9a01      	ldr	r2, [sp, #4]
    1c4a:	0028      	movs	r0, r5
    1c4c:	4798      	blx	r3
}
    1c4e:	b007      	add	sp, #28
    1c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
    1c52:	78b3      	ldrb	r3, [r6, #2]
    1c54:	240c      	movs	r4, #12
    1c56:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
    1c58:	2b03      	cmp	r3, #3
    1c5a:	d008      	beq.n	1c6e <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1c5c:	0032      	movs	r2, r6
    1c5e:	320c      	adds	r2, #12
    1c60:	7870      	ldrb	r0, [r6, #1]
    1c62:	2100      	movs	r1, #0
    1c64:	69f3      	ldr	r3, [r6, #28]
    1c66:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c68:	2302      	movs	r3, #2
    1c6a:	70b3      	strb	r3, [r6, #2]
    1c6c:	e7ef      	b.n	1c4e <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1c6e:	7870      	ldrb	r0, [r6, #1]
    1c70:	0032      	movs	r2, r6
    1c72:	320c      	adds	r2, #12
    1c74:	2101      	movs	r1, #1
    1c76:	69f3      	ldr	r3, [r6, #28]
    1c78:	4798      	blx	r3
		if (err) {
    1c7a:	2800      	cmp	r0, #0
    1c7c:	d010      	beq.n	1ca0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1c7e:	2305      	movs	r3, #5
    1c80:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1c82:	3b03      	subs	r3, #3
    1c84:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1c86:	2c00      	cmp	r4, #0
    1c88:	db08      	blt.n	1c9c <_usb_d_cb_trans_done+0x90>
    1c8a:	7873      	ldrb	r3, [r6, #1]
    1c8c:	2080      	movs	r0, #128	; 0x80
    1c8e:	4240      	negs	r0, r0
    1c90:	4318      	orrs	r0, r3
    1c92:	b2c0      	uxtb	r0, r0
    1c94:	2101      	movs	r1, #1
    1c96:	4b2c      	ldr	r3, [pc, #176]	; (1d48 <_usb_d_cb_trans_done+0x13c>)
    1c98:	4798      	blx	r3
    1c9a:	e7d8      	b.n	1c4e <_usb_d_cb_trans_done+0x42>
    1c9c:	7870      	ldrb	r0, [r6, #1]
    1c9e:	e7f9      	b.n	1c94 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1ca0:	2304      	movs	r3, #4
    1ca2:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1ca4:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
    1ca6:	2200      	movs	r2, #0
    1ca8:	9203      	str	r2, [sp, #12]
    1caa:	9204      	str	r2, [sp, #16]
    1cac:	2c00      	cmp	r4, #0
    1cae:	db09      	blt.n	1cc4 <_usb_d_cb_trans_done+0xb8>
    1cb0:	3b84      	subs	r3, #132	; 0x84
    1cb2:	430b      	orrs	r3, r1
    1cb4:	b2da      	uxtb	r2, r3
    1cb6:	a803      	add	r0, sp, #12
    1cb8:	7202      	strb	r2, [r0, #8]
    1cba:	2301      	movs	r3, #1
    1cbc:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1cbe:	4b23      	ldr	r3, [pc, #140]	; (1d4c <_usb_d_cb_trans_done+0x140>)
    1cc0:	4798      	blx	r3
    1cc2:	e7c4      	b.n	1c4e <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
    1cc4:	220f      	movs	r2, #15
    1cc6:	400a      	ands	r2, r1
    1cc8:	e7f5      	b.n	1cb6 <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
    1cca:	2f01      	cmp	r7, #1
    1ccc:	d00a      	beq.n	1ce4 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
    1cce:	2f02      	cmp	r7, #2
    1cd0:	d01d      	beq.n	1d0e <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
    1cd2:	2f03      	cmp	r7, #3
    1cd4:	d02c      	beq.n	1d30 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1cd6:	0142      	lsls	r2, r0, #5
    1cd8:	4b1a      	ldr	r3, [pc, #104]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1cda:	189b      	adds	r3, r3, r2
    1cdc:	2206      	movs	r2, #6
    1cde:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1ce0:	70da      	strb	r2, [r3, #3]
    1ce2:	e7ac      	b.n	1c3e <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1ce4:	4b17      	ldr	r3, [pc, #92]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1ce6:	0142      	lsls	r2, r0, #5
    1ce8:	1899      	adds	r1, r3, r2
    1cea:	2002      	movs	r0, #2
    1cec:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1cee:	5cd3      	ldrb	r3, [r2, r3]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d005      	beq.n	1d00 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1cf4:	0162      	lsls	r2, r4, #5
    1cf6:	4b13      	ldr	r3, [pc, #76]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1cf8:	189b      	adds	r3, r3, r2
    1cfa:	2205      	movs	r2, #5
    1cfc:	709a      	strb	r2, [r3, #2]
    1cfe:	e79e      	b.n	1c3e <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1d00:	2202      	movs	r2, #2
    1d02:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1d04:	2100      	movs	r1, #0
    1d06:	0028      	movs	r0, r5
    1d08:	4b0f      	ldr	r3, [pc, #60]	; (1d48 <_usb_d_cb_trans_done+0x13c>)
    1d0a:	4798      	blx	r3
    1d0c:	e797      	b.n	1c3e <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1d0e:	4b0d      	ldr	r3, [pc, #52]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1d10:	0142      	lsls	r2, r0, #5
    1d12:	1899      	adds	r1, r3, r2
    1d14:	2004      	movs	r0, #4
    1d16:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1d18:	5cd3      	ldrb	r3, [r2, r3]
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d005      	beq.n	1d2a <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1d1e:	0162      	lsls	r2, r4, #5
    1d20:	4b08      	ldr	r3, [pc, #32]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1d22:	189b      	adds	r3, r3, r2
    1d24:	2201      	movs	r2, #1
    1d26:	709a      	strb	r2, [r3, #2]
    1d28:	e789      	b.n	1c3e <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1d2a:	2302      	movs	r3, #2
    1d2c:	708b      	strb	r3, [r1, #2]
			return;
    1d2e:	e78e      	b.n	1c4e <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1d30:	0142      	lsls	r2, r0, #5
    1d32:	4b04      	ldr	r3, [pc, #16]	; (1d44 <_usb_d_cb_trans_done+0x138>)
    1d34:	189b      	adds	r3, r3, r2
    1d36:	2200      	movs	r2, #0
    1d38:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1d3a:	3205      	adds	r2, #5
    1d3c:	70da      	strb	r2, [r3, #3]
    1d3e:	e77e      	b.n	1c3e <_usb_d_cb_trans_done+0x32>
    1d40:	00001b9d 	.word	0x00001b9d
    1d44:	200005b0 	.word	0x200005b0
    1d48:	00003ed1 	.word	0x00003ed1
    1d4c:	00004095 	.word	0x00004095

00001d50 <usb_d_cb_trans_setup>:
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	46c6      	mov	lr, r8
    1d54:	b500      	push	{lr}
    1d56:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1d58:	4b1f      	ldr	r3, [pc, #124]	; (1dd8 <usb_d_cb_trans_setup+0x88>)
    1d5a:	4798      	blx	r3
    1d5c:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1d5e:	0143      	lsls	r3, r0, #5
    1d60:	3308      	adds	r3, #8
    1d62:	4c1e      	ldr	r4, [pc, #120]	; (1ddc <usb_d_cb_trans_setup+0x8c>)
    1d64:	18e4      	adds	r4, r4, r3
    1d66:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1d68:	0021      	movs	r1, r4
    1d6a:	0028      	movs	r0, r5
    1d6c:	4b1c      	ldr	r3, [pc, #112]	; (1de0 <usb_d_cb_trans_setup+0x90>)
    1d6e:	4798      	blx	r3
    1d70:	b2c0      	uxtb	r0, r0
	if (n != 8) {
    1d72:	2808      	cmp	r0, #8
    1d74:	d00c      	beq.n	1d90 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1d76:	2101      	movs	r1, #1
    1d78:	0028      	movs	r0, r5
    1d7a:	4c1a      	ldr	r4, [pc, #104]	; (1de4 <usb_d_cb_trans_setup+0x94>)
    1d7c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1d7e:	2080      	movs	r0, #128	; 0x80
    1d80:	4240      	negs	r0, r0
    1d82:	4328      	orrs	r0, r5
    1d84:	b2c0      	uxtb	r0, r0
    1d86:	2101      	movs	r1, #1
    1d88:	47a0      	blx	r4
}
    1d8a:	bc04      	pop	{r2}
    1d8c:	4690      	mov	r8, r2
    1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1d90:	2100      	movs	r1, #0
    1d92:	0028      	movs	r0, r5
    1d94:	4b13      	ldr	r3, [pc, #76]	; (1de4 <usb_d_cb_trans_setup+0x94>)
    1d96:	4698      	mov	r8, r3
    1d98:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1d9a:	2780      	movs	r7, #128	; 0x80
    1d9c:	427f      	negs	r7, r7
    1d9e:	432f      	orrs	r7, r5
    1da0:	b2ff      	uxtb	r7, r7
    1da2:	2100      	movs	r1, #0
    1da4:	0038      	movs	r0, r7
    1da6:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1da8:	0172      	lsls	r2, r6, #5
    1daa:	4b0c      	ldr	r3, [pc, #48]	; (1ddc <usb_d_cb_trans_setup+0x8c>)
    1dac:	189b      	adds	r3, r3, r2
    1dae:	2201      	movs	r2, #1
    1db0:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1db2:	695b      	ldr	r3, [r3, #20]
    1db4:	0021      	movs	r1, r4
    1db6:	0028      	movs	r0, r5
    1db8:	4798      	blx	r3
    1dba:	2800      	cmp	r0, #0
    1dbc:	d1e5      	bne.n	1d8a <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1dbe:	0176      	lsls	r6, r6, #5
    1dc0:	4b06      	ldr	r3, [pc, #24]	; (1ddc <usb_d_cb_trans_setup+0x8c>)
    1dc2:	199e      	adds	r6, r3, r6
    1dc4:	2305      	movs	r3, #5
    1dc6:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1dc8:	2101      	movs	r1, #1
    1dca:	0028      	movs	r0, r5
    1dcc:	4c05      	ldr	r4, [pc, #20]	; (1de4 <usb_d_cb_trans_setup+0x94>)
    1dce:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1dd0:	2101      	movs	r1, #1
    1dd2:	0038      	movs	r0, r7
    1dd4:	47a0      	blx	r4
    1dd6:	e7d8      	b.n	1d8a <usb_d_cb_trans_setup+0x3a>
    1dd8:	00001b9d 	.word	0x00001b9d
    1ddc:	200005b0 	.word	0x200005b0
    1de0:	0000401d 	.word	0x0000401d
    1de4:	00003ed1 	.word	0x00003ed1

00001de8 <usb_d_init>:

int32_t usb_d_init(void)
{
    1de8:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1dea:	4b12      	ldr	r3, [pc, #72]	; (1e34 <usb_d_init+0x4c>)
    1dec:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1dee:	2800      	cmp	r0, #0
    1df0:	db1f      	blt.n	1e32 <usb_d_init+0x4a>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1df2:	2280      	movs	r2, #128	; 0x80
    1df4:	0052      	lsls	r2, r2, #1
    1df6:	2100      	movs	r1, #0
    1df8:	480f      	ldr	r0, [pc, #60]	; (1e38 <usb_d_init+0x50>)
    1dfa:	4b10      	ldr	r3, [pc, #64]	; (1e3c <usb_d_init+0x54>)
    1dfc:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1dfe:	2200      	movs	r2, #0
    1e00:	e00a      	b.n	1e18 <usb_d_init+0x30>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1e02:	0151      	lsls	r1, r2, #5
    1e04:	4b0c      	ldr	r3, [pc, #48]	; (1e38 <usb_d_init+0x50>)
    1e06:	185b      	adds	r3, r3, r1
    1e08:	21ff      	movs	r1, #255	; 0xff
    1e0a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1e0c:	490c      	ldr	r1, [pc, #48]	; (1e40 <usb_d_init+0x58>)
    1e0e:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1e10:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1e12:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e14:	3201      	adds	r2, #1
    1e16:	b2d2      	uxtb	r2, r2
    1e18:	2a07      	cmp	r2, #7
    1e1a:	d9f2      	bls.n	1e02 <usb_d_init+0x1a>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1e1c:	4909      	ldr	r1, [pc, #36]	; (1e44 <usb_d_init+0x5c>)
    1e1e:	2000      	movs	r0, #0
    1e20:	4c09      	ldr	r4, [pc, #36]	; (1e48 <usb_d_init+0x60>)
    1e22:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1e24:	4909      	ldr	r1, [pc, #36]	; (1e4c <usb_d_init+0x64>)
    1e26:	2001      	movs	r0, #1
    1e28:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1e2a:	4909      	ldr	r1, [pc, #36]	; (1e50 <usb_d_init+0x68>)
    1e2c:	2002      	movs	r0, #2
    1e2e:	47a0      	blx	r4
	return ERR_NONE;
    1e30:	2000      	movs	r0, #0
}
    1e32:	bd10      	pop	{r4, pc}
    1e34:	000038c9 	.word	0x000038c9
    1e38:	200005b0 	.word	0x200005b0
    1e3c:	000071e9 	.word	0x000071e9
    1e40:	00001bd9 	.word	0x00001bd9
    1e44:	00001d51 	.word	0x00001d51
    1e48:	000042cd 	.word	0x000042cd
    1e4c:	00001bdd 	.word	0x00001bdd
    1e50:	00001c0d 	.word	0x00001c0d

00001e54 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1e54:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1e56:	4b01      	ldr	r3, [pc, #4]	; (1e5c <usb_d_register_callback+0x8>)
    1e58:	4798      	blx	r3
}
    1e5a:	bd10      	pop	{r4, pc}
    1e5c:	000042a9 	.word	0x000042a9

00001e60 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1e60:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1e62:	4b01      	ldr	r3, [pc, #4]	; (1e68 <usb_d_enable+0x8>)
    1e64:	4798      	blx	r3
}
    1e66:	bd10      	pop	{r4, pc}
    1e68:	00003971 	.word	0x00003971

00001e6c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1e6c:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    1e6e:	4b01      	ldr	r3, [pc, #4]	; (1e74 <usb_d_attach+0x8>)
    1e70:	4798      	blx	r3
}
    1e72:	bd10      	pop	{r4, pc}
    1e74:	000039c1 	.word	0x000039c1

00001e78 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1e78:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    1e7a:	4b01      	ldr	r3, [pc, #4]	; (1e80 <usb_d_set_address+0x8>)
    1e7c:	4798      	blx	r3
}
    1e7e:	bd10      	pop	{r4, pc}
    1e80:	000039d1 	.word	0x000039d1

00001e84 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e86:	0005      	movs	r5, r0
    1e88:	000e      	movs	r6, r1
    1e8a:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e8c:	4b0f      	ldr	r3, [pc, #60]	; (1ecc <usb_d_ep_init+0x48>)
    1e8e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1e90:	2800      	cmp	r0, #0
    1e92:	da14      	bge.n	1ebe <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1e94:	20ff      	movs	r0, #255	; 0xff
    1e96:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <usb_d_ep_init+0x48>)
    1e98:	4798      	blx	r3
    1e9a:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1e9c:	db12      	blt.n	1ec4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1e9e:	003a      	movs	r2, r7
    1ea0:	0031      	movs	r1, r6
    1ea2:	0028      	movs	r0, r5
    1ea4:	4b0a      	ldr	r3, [pc, #40]	; (1ed0 <usb_d_ep_init+0x4c>)
    1ea6:	4798      	blx	r3
	if (rc < 0) {
    1ea8:	2800      	cmp	r0, #0
    1eaa:	db07      	blt.n	1ebc <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1eac:	4a09      	ldr	r2, [pc, #36]	; (1ed4 <usb_d_ep_init+0x50>)
    1eae:	0164      	lsls	r4, r4, #5
    1eb0:	1913      	adds	r3, r2, r4
    1eb2:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1eb4:	2303      	movs	r3, #3
    1eb6:	401e      	ands	r6, r3
    1eb8:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1eba:	2000      	movs	r0, #0
}
    1ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1ebe:	2014      	movs	r0, #20
    1ec0:	4240      	negs	r0, r0
    1ec2:	e7fb      	b.n	1ebc <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1ec4:	2015      	movs	r0, #21
    1ec6:	4240      	negs	r0, r0
    1ec8:	e7f8      	b.n	1ebc <usb_d_ep_init+0x38>
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	00001b9d 	.word	0x00001b9d
    1ed0:	000039e5 	.word	0x000039e5
    1ed4:	200005b0 	.word	0x200005b0

00001ed8 <usb_d_ep0_init>:
{
    1ed8:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1eda:	b282      	uxth	r2, r0
    1edc:	2100      	movs	r1, #0
    1ede:	2000      	movs	r0, #0
    1ee0:	4b01      	ldr	r3, [pc, #4]	; (1ee8 <usb_d_ep0_init+0x10>)
    1ee2:	4798      	blx	r3
}
    1ee4:	bd10      	pop	{r4, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00001e85 	.word	0x00001e85

00001eec <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1eec:	b570      	push	{r4, r5, r6, lr}
    1eee:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1ef0:	4b06      	ldr	r3, [pc, #24]	; (1f0c <usb_d_ep_deinit+0x20>)
    1ef2:	4798      	blx	r3
    1ef4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1ef6:	db07      	blt.n	1f08 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1ef8:	0028      	movs	r0, r5
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <usb_d_ep_deinit+0x24>)
    1efc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1efe:	0164      	lsls	r4, r4, #5
    1f00:	4b04      	ldr	r3, [pc, #16]	; (1f14 <usb_d_ep_deinit+0x28>)
    1f02:	191c      	adds	r4, r3, r4
    1f04:	23ff      	movs	r3, #255	; 0xff
    1f06:	7063      	strb	r3, [r4, #1]
}
    1f08:	bd70      	pop	{r4, r5, r6, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00001b9d 	.word	0x00001b9d
    1f10:	00003b1d 	.word	0x00003b1d
    1f14:	200005b0 	.word	0x200005b0

00001f18 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1f1c:	4b0f      	ldr	r3, [pc, #60]	; (1f5c <usb_d_ep_enable+0x44>)
    1f1e:	4798      	blx	r3
    1f20:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1f22:	db17      	blt.n	1f54 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1f24:	0143      	lsls	r3, r0, #5
    1f26:	4a0e      	ldr	r2, [pc, #56]	; (1f60 <usb_d_ep_enable+0x48>)
    1f28:	5c9b      	ldrb	r3, [r3, r2]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d10a      	bne.n	1f44 <usb_d_ep_enable+0x2c>
    1f2e:	2102      	movs	r1, #2
    1f30:	0162      	lsls	r2, r4, #5
    1f32:	4b0b      	ldr	r3, [pc, #44]	; (1f60 <usb_d_ep_enable+0x48>)
    1f34:	189b      	adds	r3, r3, r2
    1f36:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1f38:	0028      	movs	r0, r5
    1f3a:	4b0a      	ldr	r3, [pc, #40]	; (1f64 <usb_d_ep_enable+0x4c>)
    1f3c:	4798      	blx	r3
	if (rc < 0) {
    1f3e:	2800      	cmp	r0, #0
    1f40:	db02      	blt.n	1f48 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1f42:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1f44:	2101      	movs	r1, #1
    1f46:	e7f3      	b.n	1f30 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1f48:	0164      	lsls	r4, r4, #5
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <usb_d_ep_enable+0x48>)
    1f4c:	191c      	adds	r4, r3, r4
    1f4e:	2300      	movs	r3, #0
    1f50:	70a3      	strb	r3, [r4, #2]
    1f52:	e7f6      	b.n	1f42 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1f54:	2012      	movs	r0, #18
    1f56:	4240      	negs	r0, r0
    1f58:	e7f3      	b.n	1f42 <usb_d_ep_enable+0x2a>
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	00001b9d 	.word	0x00001b9d
    1f60:	200005b0 	.word	0x200005b0
    1f64:	00003bd9 	.word	0x00003bd9

00001f68 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6a:	46d6      	mov	lr, sl
    1f6c:	464f      	mov	r7, r9
    1f6e:	4646      	mov	r6, r8
    1f70:	b5c0      	push	{r6, r7, lr}
    1f72:	b086      	sub	sp, #24
    1f74:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1f76:	7a06      	ldrb	r6, [r0, #8]
    1f78:	0030      	movs	r0, r6
    1f7a:	4b3f      	ldr	r3, [pc, #252]	; (2078 <STACK_SIZE+0x78>)
    1f7c:	4798      	blx	r3
    1f7e:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1f80:	09f6      	lsrs	r6, r6, #7
    1f82:	7a6b      	ldrb	r3, [r5, #9]
    1f84:	1e5a      	subs	r2, r3, #1
    1f86:	4193      	sbcs	r3, r2
    1f88:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    1f8a:	686b      	ldr	r3, [r5, #4]
    1f8c:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1f8e:	2800      	cmp	r0, #0
    1f90:	db6b      	blt.n	206a <STACK_SIZE+0x6a>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1f92:	a804      	add	r0, sp, #16
    1f94:	4b39      	ldr	r3, [pc, #228]	; (207c <STACK_SIZE+0x7c>)
    1f96:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1f98:	017a      	lsls	r2, r7, #5
    1f9a:	4b39      	ldr	r3, [pc, #228]	; (2080 <STACK_SIZE+0x80>)
    1f9c:	189b      	adds	r3, r3, r2
    1f9e:	789a      	ldrb	r2, [r3, #2]
    1fa0:	2317      	movs	r3, #23
    1fa2:	446b      	add	r3, sp
    1fa4:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2b01      	cmp	r3, #1
    1faa:	d00e      	beq.n	1fca <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1fac:	a804      	add	r0, sp, #16
    1fae:	4b35      	ldr	r3, [pc, #212]	; (2084 <STACK_SIZE+0x84>)
    1fb0:	4798      	blx	r3
		switch (state) {
    1fb2:	2317      	movs	r3, #23
    1fb4:	446b      	add	r3, sp
    1fb6:	781b      	ldrb	r3, [r3, #0]
    1fb8:	b2db      	uxtb	r3, r3
    1fba:	2b05      	cmp	r3, #5
    1fbc:	d02b      	beq.n	2016 <STACK_SIZE+0x16>
    1fbe:	2b06      	cmp	r3, #6
    1fc0:	d056      	beq.n	2070 <STACK_SIZE+0x70>
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d029      	beq.n	201a <STACK_SIZE+0x1a>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1fc6:	2001      	movs	r0, #1
    1fc8:	e01f      	b.n	200a <STACK_SIZE+0xa>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1fca:	4b2d      	ldr	r3, [pc, #180]	; (2080 <STACK_SIZE+0x80>)
    1fcc:	4699      	mov	r9, r3
    1fce:	017b      	lsls	r3, r7, #5
    1fd0:	469a      	mov	sl, r3
    1fd2:	464b      	mov	r3, r9
    1fd4:	4453      	add	r3, sl
    1fd6:	2203      	movs	r2, #3
    1fd8:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1fda:	a804      	add	r0, sp, #16
    1fdc:	4b29      	ldr	r3, [pc, #164]	; (2084 <STACK_SIZE+0x84>)
    1fde:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1fe0:	464b      	mov	r3, r9
    1fe2:	4652      	mov	r2, sl
    1fe4:	5cd3      	ldrb	r3, [r2, r3]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d01a      	beq.n	2020 <STACK_SIZE+0x20>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1fea:	7a29      	ldrb	r1, [r5, #8]
    1fec:	682b      	ldr	r3, [r5, #0]
    1fee:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    1ff0:	4643      	mov	r3, r8
    1ff2:	9302      	str	r3, [sp, #8]
    1ff4:	2e00      	cmp	r6, #0
    1ff6:	d035      	beq.n	2064 <STACK_SIZE+0x64>
    1ff8:	2280      	movs	r2, #128	; 0x80
    1ffa:	4252      	negs	r2, r2
    1ffc:	430a      	orrs	r2, r1
    1ffe:	b2d2      	uxtb	r2, r2
    2000:	a801      	add	r0, sp, #4
    2002:	7202      	strb	r2, [r0, #8]
    2004:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2006:	4b20      	ldr	r3, [pc, #128]	; (2088 <STACK_SIZE+0x88>)
    2008:	4798      	blx	r3
	return rc;
}
    200a:	b006      	add	sp, #24
    200c:	bc1c      	pop	{r2, r3, r4}
    200e:	4690      	mov	r8, r2
    2010:	4699      	mov	r9, r3
    2012:	46a2      	mov	sl, r4
    2014:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    2016:	2002      	movs	r0, #2
    2018:	e7f7      	b.n	200a <STACK_SIZE+0xa>
			return -USB_ERR_FUNC;
    201a:	2013      	movs	r0, #19
    201c:	4240      	negs	r0, r0
    201e:	e7f4      	b.n	200a <STACK_SIZE+0xa>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2020:	017b      	lsls	r3, r7, #5
    2022:	4a17      	ldr	r2, [pc, #92]	; (2080 <STACK_SIZE+0x80>)
    2024:	18d2      	adds	r2, r2, r3
    2026:	7c93      	ldrb	r3, [r2, #18]
    2028:	7cd4      	ldrb	r4, [r2, #19]
    202a:	0224      	lsls	r4, r4, #8
    202c:	191b      	adds	r3, r3, r4
    202e:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    2030:	2b00      	cmp	r3, #0
    2032:	d106      	bne.n	2042 <STACK_SIZE+0x42>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2034:	2304      	movs	r3, #4
    2036:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    2038:	2300      	movs	r3, #0
    203a:	4698      	mov	r8, r3
			zlp                 = true;
    203c:	2401      	movs	r4, #1
			dir                 = true;
    203e:	2601      	movs	r6, #1
    2040:	e7d3      	b.n	1fea <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2042:	017f      	lsls	r7, r7, #5
    2044:	4a0e      	ldr	r2, [pc, #56]	; (2080 <STACK_SIZE+0x80>)
    2046:	19d7      	adds	r7, r2, r7
    2048:	220c      	movs	r2, #12
    204a:	56ba      	ldrsb	r2, [r7, r2]
    204c:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    204e:	4598      	cmp	r8, r3
    2050:	d900      	bls.n	2054 <STACK_SIZE+0x54>
				len = req_len;
    2052:	4698      	mov	r8, r3
			if (dir) {
    2054:	2a00      	cmp	r2, #0
    2056:	db01      	blt.n	205c <STACK_SIZE+0x5c>
				zlp = false;
    2058:	2400      	movs	r4, #0
    205a:	e7c6      	b.n	1fea <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    205c:	4598      	cmp	r8, r3
    205e:	419b      	sbcs	r3, r3
    2060:	425c      	negs	r4, r3
    2062:	e7c2      	b.n	1fea <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    2064:	220f      	movs	r2, #15
    2066:	400a      	ands	r2, r1
    2068:	e7ca      	b.n	2000 <STACK_SIZE>
		return -USB_ERR_PARAM;
    206a:	2012      	movs	r0, #18
    206c:	4240      	negs	r0, r0
    206e:	e7cc      	b.n	200a <STACK_SIZE+0xa>
			return -USB_ERROR;
    2070:	2010      	movs	r0, #16
    2072:	4240      	negs	r0, r0
    2074:	e7c9      	b.n	200a <STACK_SIZE+0xa>
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001b9d 	.word	0x00001b9d
    207c:	000013bd 	.word	0x000013bd
    2080:	200005b0 	.word	0x200005b0
    2084:	000013cb 	.word	0x000013cb
    2088:	00004095 	.word	0x00004095

0000208c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    208c:	b570      	push	{r4, r5, r6, lr}
    208e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2090:	4b07      	ldr	r3, [pc, #28]	; (20b0 <usb_d_ep_abort+0x24>)
    2092:	4798      	blx	r3
    2094:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2096:	db09      	blt.n	20ac <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    2098:	0028      	movs	r0, r5
    209a:	4b06      	ldr	r3, [pc, #24]	; (20b4 <usb_d_ep_abort+0x28>)
    209c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    209e:	0164      	lsls	r4, r4, #5
    20a0:	4b05      	ldr	r3, [pc, #20]	; (20b8 <usb_d_ep_abort+0x2c>)
    20a2:	191c      	adds	r4, r3, r4
    20a4:	2301      	movs	r3, #1
    20a6:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    20a8:	3303      	adds	r3, #3
    20aa:	70e3      	strb	r3, [r4, #3]
}
    20ac:	bd70      	pop	{r4, r5, r6, pc}
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	00001b9d 	.word	0x00001b9d
    20b4:	00004265 	.word	0x00004265
    20b8:	200005b0 	.word	0x200005b0

000020bc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    20bc:	b570      	push	{r4, r5, r6, lr}
    20be:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    20c0:	2900      	cmp	r1, #0
    20c2:	d005      	beq.n	20d0 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    20c4:	2901      	cmp	r1, #1
    20c6:	d024      	beq.n	2112 <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    20c8:	2102      	movs	r1, #2
    20ca:	4b13      	ldr	r3, [pc, #76]	; (2118 <usb_d_ep_halt+0x5c>)
    20cc:	4798      	blx	r3
	}
}
    20ce:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    20d0:	4b12      	ldr	r3, [pc, #72]	; (211c <usb_d_ep_halt+0x60>)
    20d2:	4798      	blx	r3
    20d4:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    20d6:	db19      	blt.n	210c <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    20d8:	2102      	movs	r1, #2
    20da:	0020      	movs	r0, r4
    20dc:	4b0e      	ldr	r3, [pc, #56]	; (2118 <usb_d_ep_halt+0x5c>)
    20de:	4798      	blx	r3
    20e0:	2800      	cmp	r0, #0
    20e2:	d0f4      	beq.n	20ce <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    20e4:	2100      	movs	r1, #0
    20e6:	0020      	movs	r0, r4
    20e8:	4b0b      	ldr	r3, [pc, #44]	; (2118 <usb_d_ep_halt+0x5c>)
    20ea:	4798      	blx	r3
		if (rc < 0) {
    20ec:	2800      	cmp	r0, #0
    20ee:	dbee      	blt.n	20ce <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    20f0:	016d      	lsls	r5, r5, #5
    20f2:	4b0b      	ldr	r3, [pc, #44]	; (2120 <usb_d_ep_halt+0x64>)
    20f4:	195d      	adds	r5, r3, r5
    20f6:	2301      	movs	r3, #1
    20f8:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    20fa:	3302      	adds	r3, #2
    20fc:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    20fe:	69eb      	ldr	r3, [r5, #28]
    2100:	2200      	movs	r2, #0
    2102:	2103      	movs	r1, #3
    2104:	0020      	movs	r0, r4
    2106:	4798      	blx	r3
	return ERR_NONE;
    2108:	2000      	movs	r0, #0
    210a:	e7e0      	b.n	20ce <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    210c:	2012      	movs	r0, #18
    210e:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    2110:	e7dd      	b.n	20ce <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2112:	4b01      	ldr	r3, [pc, #4]	; (2118 <usb_d_ep_halt+0x5c>)
    2114:	4798      	blx	r3
    2116:	e7da      	b.n	20ce <usb_d_ep_halt+0x12>
    2118:	00003ed1 	.word	0x00003ed1
    211c:	00001b9d 	.word	0x00001b9d
    2120:	200005b0 	.word	0x200005b0

00002124 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2124:	b570      	push	{r4, r5, r6, lr}
    2126:	000d      	movs	r5, r1
    2128:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    212a:	4b0f      	ldr	r3, [pc, #60]	; (2168 <usb_d_ep_register_callback+0x44>)
    212c:	4798      	blx	r3
    212e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2130:	2c00      	cmp	r4, #0
    2132:	d008      	beq.n	2146 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    2134:	2b00      	cmp	r3, #0
    2136:	db05      	blt.n	2144 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    2138:	2d01      	cmp	r5, #1
    213a:	d00b      	beq.n	2154 <usb_d_ep_register_callback+0x30>
    213c:	2d00      	cmp	r5, #0
    213e:	d004      	beq.n	214a <usb_d_ep_register_callback+0x26>
    2140:	2d02      	cmp	r5, #2
    2142:	d00c      	beq.n	215e <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    2144:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2146:	4c09      	ldr	r4, [pc, #36]	; (216c <usb_d_ep_register_callback+0x48>)
    2148:	e7f4      	b.n	2134 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    214a:	0140      	lsls	r0, r0, #5
    214c:	4b08      	ldr	r3, [pc, #32]	; (2170 <usb_d_ep_register_callback+0x4c>)
    214e:	1818      	adds	r0, r3, r0
    2150:	6144      	str	r4, [r0, #20]
		break;
    2152:	e7f7      	b.n	2144 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2154:	0140      	lsls	r0, r0, #5
    2156:	4b06      	ldr	r3, [pc, #24]	; (2170 <usb_d_ep_register_callback+0x4c>)
    2158:	1818      	adds	r0, r3, r0
    215a:	6184      	str	r4, [r0, #24]
		break;
    215c:	e7f2      	b.n	2144 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    215e:	0140      	lsls	r0, r0, #5
    2160:	4b03      	ldr	r3, [pc, #12]	; (2170 <usb_d_ep_register_callback+0x4c>)
    2162:	1818      	adds	r0, r3, r0
    2164:	61c4      	str	r4, [r0, #28]
		break;
    2166:	e7ed      	b.n	2144 <usb_d_ep_register_callback+0x20>
    2168:	00001b9d 	.word	0x00001b9d
    216c:	00001bd9 	.word	0x00001bd9
    2170:	200005b0 	.word	0x200005b0

00002174 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2174:	2800      	cmp	r0, #0
    2176:	d100      	bne.n	217a <assert+0x6>
		__asm("BKPT #0");
    2178:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    217a:	4770      	bx	lr

0000217c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    217c:	6803      	ldr	r3, [r0, #0]
    217e:	2b00      	cmp	r3, #0
    2180:	d003      	beq.n	218a <is_list_element+0xe>
		if (it == element) {
    2182:	428b      	cmp	r3, r1
    2184:	d003      	beq.n	218e <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	e7f9      	b.n	217e <is_list_element+0x2>
			return true;
		}
	}

	return false;
    218a:	2000      	movs	r0, #0
}
    218c:	4770      	bx	lr
			return true;
    218e:	2001      	movs	r0, #1
    2190:	e7fc      	b.n	218c <is_list_element+0x10>
	...

00002194 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2194:	b570      	push	{r4, r5, r6, lr}
    2196:	0004      	movs	r4, r0
    2198:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    219a:	4b06      	ldr	r3, [pc, #24]	; (21b4 <list_insert_as_head+0x20>)
    219c:	4798      	blx	r3
    219e:	2301      	movs	r3, #1
    21a0:	4058      	eors	r0, r3
    21a2:	b2c0      	uxtb	r0, r0
    21a4:	2239      	movs	r2, #57	; 0x39
    21a6:	4904      	ldr	r1, [pc, #16]	; (21b8 <list_insert_as_head+0x24>)
    21a8:	4b04      	ldr	r3, [pc, #16]	; (21bc <list_insert_as_head+0x28>)
    21aa:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    21ac:	6823      	ldr	r3, [r4, #0]
    21ae:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    21b0:	6025      	str	r5, [r4, #0]
}
    21b2:	bd70      	pop	{r4, r5, r6, pc}
    21b4:	0000217d 	.word	0x0000217d
    21b8:	00007534 	.word	0x00007534
    21bc:	00002175 	.word	0x00002175

000021c0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    21c0:	6803      	ldr	r3, [r0, #0]
    21c2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    21c4:	6001      	str	r1, [r0, #0]
}
    21c6:	4770      	bx	lr

000021c8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    21c8:	b570      	push	{r4, r5, r6, lr}
    21ca:	0005      	movs	r5, r0
    21cc:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    21ce:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    21d0:	4b0a      	ldr	r3, [pc, #40]	; (21fc <list_insert_at_end+0x34>)
    21d2:	4798      	blx	r3
    21d4:	2301      	movs	r3, #1
    21d6:	4058      	eors	r0, r3
    21d8:	b2c0      	uxtb	r0, r0
    21da:	224f      	movs	r2, #79	; 0x4f
    21dc:	4908      	ldr	r1, [pc, #32]	; (2200 <list_insert_at_end+0x38>)
    21de:	4b09      	ldr	r3, [pc, #36]	; (2204 <list_insert_at_end+0x3c>)
    21e0:	4798      	blx	r3

	if (!list->head) {
    21e2:	682b      	ldr	r3, [r5, #0]
    21e4:	2b00      	cmp	r3, #0
    21e6:	d103      	bne.n	21f0 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    21e8:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    21ea:	6033      	str	r3, [r6, #0]
		return;
    21ec:	e005      	b.n	21fa <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    21ee:	001c      	movs	r4, r3
	while (it->next) {
    21f0:	6823      	ldr	r3, [r4, #0]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d1fb      	bne.n	21ee <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    21f6:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    21f8:	6033      	str	r3, [r6, #0]
}
    21fa:	bd70      	pop	{r4, r5, r6, pc}
    21fc:	0000217d 	.word	0x0000217d
    2200:	00007534 	.word	0x00007534
    2204:	00002175 	.word	0x00002175

00002208 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2208:	6803      	ldr	r3, [r0, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d003      	beq.n	2216 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    220e:	681a      	ldr	r2, [r3, #0]
    2210:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    2212:	0018      	movs	r0, r3
	}

	return NULL;
}
    2214:	4770      	bx	lr
	return NULL;
    2216:	2000      	movs	r0, #0
    2218:	e7fc      	b.n	2214 <list_remove_head+0xc>

0000221a <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    221a:	2900      	cmp	r1, #0
    221c:	d012      	beq.n	2244 <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
    221e:	6803      	ldr	r3, [r0, #0]
    2220:	4299      	cmp	r1, r3
    2222:	d104      	bne.n	222e <list_delete_element+0x14>
		list->head = list->head->next;
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	6003      	str	r3, [r0, #0]
		return true;
    2228:	2001      	movs	r0, #1
    222a:	e00a      	b.n	2242 <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
    222c:	0013      	movs	r3, r2
		while (it && it->next != element) {
    222e:	2b00      	cmp	r3, #0
    2230:	d002      	beq.n	2238 <list_delete_element+0x1e>
    2232:	681a      	ldr	r2, [r3, #0]
    2234:	4291      	cmp	r1, r2
    2236:	d1f9      	bne.n	222c <list_delete_element+0x12>
		}
		if (it) {
    2238:	2b00      	cmp	r3, #0
    223a:	d005      	beq.n	2248 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
    223c:	680a      	ldr	r2, [r1, #0]
    223e:	601a      	str	r2, [r3, #0]
			return true;
    2240:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2242:	4770      	bx	lr
		return false;
    2244:	2000      	movs	r0, #0
    2246:	e7fc      	b.n	2242 <list_delete_element+0x28>
	return false;
    2248:	2000      	movs	r0, #0
    224a:	e7fa      	b.n	2242 <list_delete_element+0x28>

0000224c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    224c:	b570      	push	{r4, r5, r6, lr}
    224e:	0004      	movs	r4, r0
    2250:	000e      	movs	r6, r1
    2252:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    2254:	2800      	cmp	r0, #0
    2256:	d012      	beq.n	227e <ringbuffer_init+0x32>
    2258:	2900      	cmp	r1, #0
    225a:	d012      	beq.n	2282 <ringbuffer_init+0x36>
    225c:	2a00      	cmp	r2, #0
    225e:	d112      	bne.n	2286 <ringbuffer_init+0x3a>
    2260:	2000      	movs	r0, #0
    2262:	2228      	movs	r2, #40	; 0x28
    2264:	490a      	ldr	r1, [pc, #40]	; (2290 <ringbuffer_init+0x44>)
    2266:	4b0b      	ldr	r3, [pc, #44]	; (2294 <ringbuffer_init+0x48>)
    2268:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    226a:	1e6b      	subs	r3, r5, #1
    226c:	422b      	tst	r3, r5
    226e:	d10c      	bne.n	228a <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2270:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2272:	2300      	movs	r3, #0
    2274:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    2276:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2278:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    227a:	2000      	movs	r0, #0
}
    227c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    227e:	2000      	movs	r0, #0
    2280:	e7ef      	b.n	2262 <ringbuffer_init+0x16>
    2282:	2000      	movs	r0, #0
    2284:	e7ed      	b.n	2262 <ringbuffer_init+0x16>
    2286:	2001      	movs	r0, #1
    2288:	e7eb      	b.n	2262 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    228a:	200d      	movs	r0, #13
    228c:	4240      	negs	r0, r0
    228e:	e7f5      	b.n	227c <ringbuffer_init+0x30>
    2290:	00007554 	.word	0x00007554
    2294:	00002175 	.word	0x00002175

00002298 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	0004      	movs	r4, r0
    229c:	000d      	movs	r5, r1
	ASSERT(rb && data);
    229e:	2800      	cmp	r0, #0
    22a0:	d016      	beq.n	22d0 <ringbuffer_get+0x38>
    22a2:	2900      	cmp	r1, #0
    22a4:	d012      	beq.n	22cc <ringbuffer_get+0x34>
    22a6:	2001      	movs	r0, #1
    22a8:	2240      	movs	r2, #64	; 0x40
    22aa:	490c      	ldr	r1, [pc, #48]	; (22dc <ringbuffer_get+0x44>)
    22ac:	4b0c      	ldr	r3, [pc, #48]	; (22e0 <ringbuffer_get+0x48>)
    22ae:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    22b0:	68a3      	ldr	r3, [r4, #8]
    22b2:	68e2      	ldr	r2, [r4, #12]
    22b4:	429a      	cmp	r2, r3
    22b6:	d00d      	beq.n	22d4 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    22b8:	6862      	ldr	r2, [r4, #4]
    22ba:	4013      	ands	r3, r2
    22bc:	6822      	ldr	r2, [r4, #0]
    22be:	5cd3      	ldrb	r3, [r2, r3]
    22c0:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    22c2:	68a3      	ldr	r3, [r4, #8]
    22c4:	3301      	adds	r3, #1
    22c6:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    22c8:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    22ca:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    22cc:	2000      	movs	r0, #0
    22ce:	e7eb      	b.n	22a8 <ringbuffer_get+0x10>
    22d0:	2000      	movs	r0, #0
    22d2:	e7e9      	b.n	22a8 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    22d4:	200a      	movs	r0, #10
    22d6:	4240      	negs	r0, r0
    22d8:	e7f7      	b.n	22ca <ringbuffer_get+0x32>
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	00007554 	.word	0x00007554
    22e0:	00002175 	.word	0x00002175

000022e4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    22e4:	b570      	push	{r4, r5, r6, lr}
    22e6:	0004      	movs	r4, r0
    22e8:	000d      	movs	r5, r1
	ASSERT(rb);
    22ea:	1e43      	subs	r3, r0, #1
    22ec:	4198      	sbcs	r0, r3
    22ee:	b2c0      	uxtb	r0, r0
    22f0:	2251      	movs	r2, #81	; 0x51
    22f2:	490a      	ldr	r1, [pc, #40]	; (231c <ringbuffer_put+0x38>)
    22f4:	4b0a      	ldr	r3, [pc, #40]	; (2320 <ringbuffer_put+0x3c>)
    22f6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    22f8:	6863      	ldr	r3, [r4, #4]
    22fa:	68e2      	ldr	r2, [r4, #12]
    22fc:	4013      	ands	r3, r2
    22fe:	6822      	ldr	r2, [r4, #0]
    2300:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2302:	68e3      	ldr	r3, [r4, #12]
    2304:	68a2      	ldr	r2, [r4, #8]
    2306:	1a9a      	subs	r2, r3, r2
    2308:	6861      	ldr	r1, [r4, #4]
    230a:	428a      	cmp	r2, r1
    230c:	d901      	bls.n	2312 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    230e:	1a59      	subs	r1, r3, r1
    2310:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    2312:	3301      	adds	r3, #1
    2314:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2316:	2000      	movs	r0, #0
    2318:	bd70      	pop	{r4, r5, r6, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	00007554 	.word	0x00007554
    2320:	00002175 	.word	0x00002175

00002324 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2324:	b510      	push	{r4, lr}
    2326:	0004      	movs	r4, r0
	ASSERT(rb);
    2328:	1e43      	subs	r3, r0, #1
    232a:	4198      	sbcs	r0, r3
    232c:	b2c0      	uxtb	r0, r0
    232e:	2267      	movs	r2, #103	; 0x67
    2330:	4903      	ldr	r1, [pc, #12]	; (2340 <ringbuffer_num+0x1c>)
    2332:	4b04      	ldr	r3, [pc, #16]	; (2344 <ringbuffer_num+0x20>)
    2334:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2336:	68e0      	ldr	r0, [r4, #12]
    2338:	68a3      	ldr	r3, [r4, #8]
    233a:	1ac0      	subs	r0, r0, r3
}
    233c:	bd10      	pop	{r4, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	00007554 	.word	0x00007554
    2344:	00002175 	.word	0x00002175

00002348 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    2348:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    234a:	2b00      	cmp	r3, #0
    234c:	db07      	blt.n	235e <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    234e:	231f      	movs	r3, #31
    2350:	4018      	ands	r0, r3
    2352:	3b1e      	subs	r3, #30
    2354:	4083      	lsls	r3, r0
    2356:	2280      	movs	r2, #128	; 0x80
    2358:	0052      	lsls	r2, r2, #1
    235a:	4901      	ldr	r1, [pc, #4]	; (2360 <_irq_set+0x18>)
    235c:	508b      	str	r3, [r1, r2]
}
    235e:	4770      	bx	lr
    2360:	e000e100 	.word	0xe000e100

00002364 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    2364:	0103      	lsls	r3, r0, #4
    2366:	1a1b      	subs	r3, r3, r0
    2368:	015a      	lsls	r2, r3, #5
    236a:	2064      	movs	r0, #100	; 0x64
    236c:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    236e:	4770      	bx	lr

00002370 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2370:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2372:	4b06      	ldr	r3, [pc, #24]	; (238c <_init_chip+0x1c>)
    2374:	685a      	ldr	r2, [r3, #4]
    2376:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    2378:	4b05      	ldr	r3, [pc, #20]	; (2390 <_init_chip+0x20>)
    237a:	4798      	blx	r3
	_sysctrl_init_sources();
    237c:	4b05      	ldr	r3, [pc, #20]	; (2394 <_init_chip+0x24>)
    237e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2380:	4b05      	ldr	r3, [pc, #20]	; (2398 <_init_chip+0x28>)
    2382:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2384:	20ff      	movs	r0, #255	; 0xff
    2386:	4b05      	ldr	r3, [pc, #20]	; (239c <_init_chip+0x2c>)
    2388:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    238a:	bd10      	pop	{r4, pc}
    238c:	41004000 	.word	0x41004000
    2390:	00002679 	.word	0x00002679
    2394:	00002c39 	.word	0x00002c39
    2398:	00002c95 	.word	0x00002c95
    239c:	000025a5 	.word	0x000025a5

000023a0 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23a0:	79c3      	ldrb	r3, [r0, #7]
    23a2:	09db      	lsrs	r3, r3, #7
    23a4:	d1fc      	bne.n	23a0 <_dac_init>
    23a6:	79c3      	ldrb	r3, [r0, #7]
    23a8:	09db      	lsrs	r3, r3, #7
    23aa:	d1fc      	bne.n	23a6 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    23ac:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    23ae:	079b      	lsls	r3, r3, #30
    23b0:	d507      	bpl.n	23c2 <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    23b2:	2300      	movs	r3, #0
    23b4:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23b6:	79c3      	ldrb	r3, [r0, #7]
    23b8:	09db      	lsrs	r3, r3, #7
    23ba:	d1fc      	bne.n	23b6 <_dac_init+0x16>
    23bc:	79c3      	ldrb	r3, [r0, #7]
    23be:	09db      	lsrs	r3, r3, #7
    23c0:	d1fc      	bne.n	23bc <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    23c2:	2301      	movs	r3, #1
    23c4:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23c6:	79c3      	ldrb	r3, [r0, #7]
    23c8:	09db      	lsrs	r3, r3, #7
    23ca:	d1fc      	bne.n	23c6 <_dac_init+0x26>
    23cc:	79c3      	ldrb	r3, [r0, #7]
    23ce:	09db      	lsrs	r3, r3, #7
    23d0:	d1fc      	bne.n	23cc <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    23d2:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    23d4:	2241      	movs	r2, #65	; 0x41
    23d6:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    23d8:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    23da:	79c3      	ldrb	r3, [r0, #7]
    23dc:	09db      	lsrs	r3, r3, #7
    23de:	d1fc      	bne.n	23da <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    23e0:	2000      	movs	r0, #0
    23e2:	4770      	bx	lr

000023e4 <_dac_sync_init>:
{
    23e4:	b570      	push	{r4, r5, r6, lr}
    23e6:	0005      	movs	r5, r0
    23e8:	000c      	movs	r4, r1
	ASSERT(device);
    23ea:	1e43      	subs	r3, r0, #1
    23ec:	4198      	sbcs	r0, r3
    23ee:	b2c0      	uxtb	r0, r0
    23f0:	2249      	movs	r2, #73	; 0x49
    23f2:	4904      	ldr	r1, [pc, #16]	; (2404 <_dac_sync_init+0x20>)
    23f4:	4b04      	ldr	r3, [pc, #16]	; (2408 <_dac_sync_init+0x24>)
    23f6:	4798      	blx	r3
	device->hw = hw;
    23f8:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    23fa:	0020      	movs	r0, r4
    23fc:	4b03      	ldr	r3, [pc, #12]	; (240c <_dac_sync_init+0x28>)
    23fe:	4798      	blx	r3
}
    2400:	bd70      	pop	{r4, r5, r6, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	00007578 	.word	0x00007578
    2408:	00002175 	.word	0x00002175
    240c:	000023a1 	.word	0x000023a1

00002410 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2410:	4b20      	ldr	r3, [pc, #128]	; (2494 <_ext_irq_init+0x84>)
    2412:	785b      	ldrb	r3, [r3, #1]
    2414:	09db      	lsrs	r3, r3, #7
    2416:	d1fb      	bne.n	2410 <_ext_irq_init>
    2418:	4b1e      	ldr	r3, [pc, #120]	; (2494 <_ext_irq_init+0x84>)
    241a:	785b      	ldrb	r3, [r3, #1]
    241c:	09db      	lsrs	r3, r3, #7
    241e:	d1fb      	bne.n	2418 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    2420:	4b1c      	ldr	r3, [pc, #112]	; (2494 <_ext_irq_init+0x84>)
    2422:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    2424:	079b      	lsls	r3, r3, #30
    2426:	d50a      	bpl.n	243e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    2428:	2200      	movs	r2, #0
    242a:	4b1a      	ldr	r3, [pc, #104]	; (2494 <_ext_irq_init+0x84>)
    242c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    242e:	4b19      	ldr	r3, [pc, #100]	; (2494 <_ext_irq_init+0x84>)
    2430:	785b      	ldrb	r3, [r3, #1]
    2432:	09db      	lsrs	r3, r3, #7
    2434:	d1fb      	bne.n	242e <_ext_irq_init+0x1e>
    2436:	4b17      	ldr	r3, [pc, #92]	; (2494 <_ext_irq_init+0x84>)
    2438:	785b      	ldrb	r3, [r3, #1]
    243a:	09db      	lsrs	r3, r3, #7
    243c:	d1fb      	bne.n	2436 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    243e:	2201      	movs	r2, #1
    2440:	4b14      	ldr	r3, [pc, #80]	; (2494 <_ext_irq_init+0x84>)
    2442:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2444:	4b13      	ldr	r3, [pc, #76]	; (2494 <_ext_irq_init+0x84>)
    2446:	785b      	ldrb	r3, [r3, #1]
    2448:	09db      	lsrs	r3, r3, #7
    244a:	d1fb      	bne.n	2444 <_ext_irq_init+0x34>
    244c:	4b11      	ldr	r3, [pc, #68]	; (2494 <_ext_irq_init+0x84>)
    244e:	785b      	ldrb	r3, [r3, #1]
    2450:	09db      	lsrs	r3, r3, #7
    2452:	d1fb      	bne.n	244c <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2454:	4b0f      	ldr	r3, [pc, #60]	; (2494 <_ext_irq_init+0x84>)
    2456:	2200      	movs	r2, #0
    2458:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    245a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    245c:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    245e:	619a      	str	r2, [r3, #24]
    2460:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    2462:	781a      	ldrb	r2, [r3, #0]
    2464:	2102      	movs	r1, #2
    2466:	430a      	orrs	r2, r1
    2468:	b2d2      	uxtb	r2, r2
    246a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    246c:	4b09      	ldr	r3, [pc, #36]	; (2494 <_ext_irq_init+0x84>)
    246e:	785b      	ldrb	r3, [r3, #1]
    2470:	09db      	lsrs	r3, r3, #7
    2472:	d1fb      	bne.n	246c <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2474:	4b08      	ldr	r3, [pc, #32]	; (2498 <_ext_irq_init+0x88>)
    2476:	2210      	movs	r2, #16
    2478:	2180      	movs	r1, #128	; 0x80
    247a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    247c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2480:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2484:	3101      	adds	r1, #1
    2486:	31ff      	adds	r1, #255	; 0xff
    2488:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    248a:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    248c:	4b03      	ldr	r3, [pc, #12]	; (249c <_ext_irq_init+0x8c>)
    248e:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    2490:	2000      	movs	r0, #0
    2492:	4770      	bx	lr
    2494:	40001800 	.word	0x40001800
    2498:	e000e100 	.word	0xe000e100
    249c:	200006b0 	.word	0x200006b0

000024a0 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    24a0:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    24a2:	2b00      	cmp	r3, #0
    24a4:	d00b      	beq.n	24be <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    24a6:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    24a8:	2aff      	cmp	r2, #255	; 0xff
    24aa:	d017      	beq.n	24dc <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    24ac:	2900      	cmp	r1, #0
    24ae:	d10f      	bne.n	24d0 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    24b0:	2301      	movs	r3, #1
    24b2:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    24b4:	4a0b      	ldr	r2, [pc, #44]	; (24e4 <_ext_irq_enable+0x44>)
    24b6:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    24b8:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    24ba:	2000      	movs	r0, #0
}
    24bc:	4770      	bx	lr
		if (_map[i].pin == pin) {
    24be:	280e      	cmp	r0, #14
    24c0:	d002      	beq.n	24c8 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
    24c2:	3301      	adds	r3, #1
    24c4:	b2db      	uxtb	r3, r3
    24c6:	e7ec      	b.n	24a2 <_ext_irq_enable+0x2>
			extint = _map[i].extint;
    24c8:	00da      	lsls	r2, r3, #3
    24ca:	4b07      	ldr	r3, [pc, #28]	; (24e8 <_ext_irq_enable+0x48>)
    24cc:	5cd2      	ldrb	r2, [r2, r3]
			break;
    24ce:	e7eb      	b.n	24a8 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    24d0:	2301      	movs	r3, #1
    24d2:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    24d4:	4a03      	ldr	r2, [pc, #12]	; (24e4 <_ext_irq_enable+0x44>)
    24d6:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    24d8:	2000      	movs	r0, #0
    24da:	e7ef      	b.n	24bc <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
    24dc:	200d      	movs	r0, #13
    24de:	4240      	negs	r0, r0
    24e0:	e7ec      	b.n	24bc <_ext_irq_enable+0x1c>
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	40001800 	.word	0x40001800
    24e8:	00007590 	.word	0x00007590

000024ec <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    24ec:	b570      	push	{r4, r5, r6, lr}
    24ee:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    24f0:	4b26      	ldr	r3, [pc, #152]	; (258c <EIC_Handler+0xa0>)
    24f2:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    24f4:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    24f6:	400a      	ands	r2, r1
    24f8:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    24fa:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    24fc:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    24fe:	4b24      	ldr	r3, [pc, #144]	; (2590 <EIC_Handler+0xa4>)
    2500:	6818      	ldr	r0, [r3, #0]
    2502:	1e43      	subs	r3, r0, #1
    2504:	4198      	sbcs	r0, r3
    2506:	b2c0      	uxtb	r0, r0
    2508:	22d2      	movs	r2, #210	; 0xd2
    250a:	4922      	ldr	r1, [pc, #136]	; (2594 <EIC_Handler+0xa8>)
    250c:	4b22      	ldr	r3, [pc, #136]	; (2598 <EIC_Handler+0xac>)
    250e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    2510:	2501      	movs	r5, #1
    2512:	426d      	negs	r5, r5

	while (flags) {
    2514:	e02e      	b.n	2574 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    2516:	3901      	subs	r1, #1
    2518:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    251a:	42b0      	cmp	r0, r6
    251c:	d80e      	bhi.n	253c <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    251e:	1832      	adds	r2, r6, r0
    2520:	1052      	asrs	r2, r2, #1
    2522:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    2524:	23ff      	movs	r3, #255	; 0xff
    2526:	4013      	ands	r3, r2
    2528:	00db      	lsls	r3, r3, #3
    252a:	4a1c      	ldr	r2, [pc, #112]	; (259c <EIC_Handler+0xb0>)
    252c:	5c9b      	ldrb	r3, [r3, r2]
    252e:	42a3      	cmp	r3, r4
    2530:	d003      	beq.n	253a <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    2532:	daf0      	bge.n	2516 <EIC_Handler+0x2a>
					lower = middle + 1;
    2534:	3101      	adds	r1, #1
    2536:	b2c8      	uxtb	r0, r1
    2538:	e7ef      	b.n	251a <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    253a:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    253c:	1c6b      	adds	r3, r5, #1
    253e:	d003      	beq.n	2548 <EIC_Handler+0x5c>
				callback(pin);
    2540:	4b13      	ldr	r3, [pc, #76]	; (2590 <EIC_Handler+0xa4>)
    2542:	681b      	ldr	r3, [r3, #0]
    2544:	0028      	movs	r0, r5
    2546:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2548:	2201      	movs	r2, #1
    254a:	40a2      	lsls	r2, r4
    254c:	9b01      	ldr	r3, [sp, #4]
    254e:	4393      	bics	r3, r2
    2550:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    2552:	9801      	ldr	r0, [sp, #4]
    2554:	4b12      	ldr	r3, [pc, #72]	; (25a0 <EIC_Handler+0xb4>)
    2556:	4798      	blx	r3
    2558:	3801      	subs	r0, #1
    255a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    255c:	1c63      	adds	r3, r4, #1
    255e:	d002      	beq.n	2566 <EIC_Handler+0x7a>
    2560:	2601      	movs	r6, #1
    2562:	2000      	movs	r0, #0
    2564:	e7d9      	b.n	251a <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    2566:	4b09      	ldr	r3, [pc, #36]	; (258c <EIC_Handler+0xa0>)
    2568:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    256a:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    256c:	400a      	ands	r2, r1
    256e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2570:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2572:	611a      	str	r2, [r3, #16]
	while (flags) {
    2574:	9b01      	ldr	r3, [sp, #4]
    2576:	2b00      	cmp	r3, #0
    2578:	d005      	beq.n	2586 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    257a:	9801      	ldr	r0, [sp, #4]
    257c:	4b08      	ldr	r3, [pc, #32]	; (25a0 <EIC_Handler+0xb4>)
    257e:	4798      	blx	r3
    2580:	3801      	subs	r0, #1
    2582:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2584:	e7ea      	b.n	255c <EIC_Handler+0x70>
	}
}
    2586:	b002      	add	sp, #8
    2588:	bd70      	pop	{r4, r5, r6, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	40001800 	.word	0x40001800
    2590:	200006b0 	.word	0x200006b0
    2594:	00007598 	.word	0x00007598
    2598:	00002175 	.word	0x00002175
    259c:	00007590 	.word	0x00007590
    25a0:	000051a1 	.word	0x000051a1

000025a4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    25a4:	07c3      	lsls	r3, r0, #31
    25a6:	d509      	bpl.n	25bc <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    25a8:	4b27      	ldr	r3, [pc, #156]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25aa:	2280      	movs	r2, #128	; 0x80
    25ac:	0052      	lsls	r2, r2, #1
    25ae:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25b0:	4a26      	ldr	r2, [pc, #152]	; (264c <_gclk_init_generators_by_fref+0xa8>)
    25b2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25b4:	4b24      	ldr	r3, [pc, #144]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25b6:	785b      	ldrb	r3, [r3, #1]
    25b8:	09db      	lsrs	r3, r3, #7
    25ba:	d1fb      	bne.n	25b4 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    25bc:	0783      	lsls	r3, r0, #30
    25be:	d508      	bpl.n	25d2 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    25c0:	4b21      	ldr	r3, [pc, #132]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25c2:	4a23      	ldr	r2, [pc, #140]	; (2650 <_gclk_init_generators_by_fref+0xac>)
    25c4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25c6:	4a23      	ldr	r2, [pc, #140]	; (2654 <_gclk_init_generators_by_fref+0xb0>)
    25c8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25ca:	4b1f      	ldr	r3, [pc, #124]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25cc:	785b      	ldrb	r3, [r3, #1]
    25ce:	09db      	lsrs	r3, r3, #7
    25d0:	d1fb      	bne.n	25ca <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    25d2:	0743      	lsls	r3, r0, #29
    25d4:	d508      	bpl.n	25e8 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    25d6:	4b1c      	ldr	r3, [pc, #112]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25d8:	4a1f      	ldr	r2, [pc, #124]	; (2658 <_gclk_init_generators_by_fref+0xb4>)
    25da:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25dc:	4a1f      	ldr	r2, [pc, #124]	; (265c <_gclk_init_generators_by_fref+0xb8>)
    25de:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25e0:	4b19      	ldr	r3, [pc, #100]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25e2:	785b      	ldrb	r3, [r3, #1]
    25e4:	09db      	lsrs	r3, r3, #7
    25e6:	d1fb      	bne.n	25e0 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    25e8:	0703      	lsls	r3, r0, #28
    25ea:	d508      	bpl.n	25fe <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    25ec:	4b16      	ldr	r3, [pc, #88]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25ee:	4a1c      	ldr	r2, [pc, #112]	; (2660 <_gclk_init_generators_by_fref+0xbc>)
    25f0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25f2:	4a1c      	ldr	r2, [pc, #112]	; (2664 <_gclk_init_generators_by_fref+0xc0>)
    25f4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25f6:	4b14      	ldr	r3, [pc, #80]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    25f8:	785b      	ldrb	r3, [r3, #1]
    25fa:	09db      	lsrs	r3, r3, #7
    25fc:	d1fb      	bne.n	25f6 <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    25fe:	06c3      	lsls	r3, r0, #27
    2600:	d509      	bpl.n	2616 <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    2602:	4b11      	ldr	r3, [pc, #68]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    2604:	2282      	movs	r2, #130	; 0x82
    2606:	0052      	lsls	r2, r2, #1
    2608:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    260a:	4a17      	ldr	r2, [pc, #92]	; (2668 <_gclk_init_generators_by_fref+0xc4>)
    260c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    260e:	4b0e      	ldr	r3, [pc, #56]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    2610:	785b      	ldrb	r3, [r3, #1]
    2612:	09db      	lsrs	r3, r3, #7
    2614:	d1fb      	bne.n	260e <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    2616:	0683      	lsls	r3, r0, #26
    2618:	d508      	bpl.n	262c <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    261a:	4b0b      	ldr	r3, [pc, #44]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    261c:	4a13      	ldr	r2, [pc, #76]	; (266c <_gclk_init_generators_by_fref+0xc8>)
    261e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2620:	4a13      	ldr	r2, [pc, #76]	; (2670 <_gclk_init_generators_by_fref+0xcc>)
    2622:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2624:	4b08      	ldr	r3, [pc, #32]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    2626:	785b      	ldrb	r3, [r3, #1]
    2628:	09db      	lsrs	r3, r3, #7
    262a:	d1fb      	bne.n	2624 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    262c:	0643      	lsls	r3, r0, #25
    262e:	d509      	bpl.n	2644 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    2630:	4b05      	ldr	r3, [pc, #20]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    2632:	2283      	movs	r2, #131	; 0x83
    2634:	0052      	lsls	r2, r2, #1
    2636:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2638:	4a0e      	ldr	r2, [pc, #56]	; (2674 <_gclk_init_generators_by_fref+0xd0>)
    263a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    263c:	4b02      	ldr	r3, [pc, #8]	; (2648 <_gclk_init_generators_by_fref+0xa4>)
    263e:	785b      	ldrb	r3, [r3, #1]
    2640:	09db      	lsrs	r3, r3, #7
    2642:	d1fb      	bne.n	263c <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    2644:	4770      	bx	lr
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	40000c00 	.word	0x40000c00
    264c:	00290800 	.word	0x00290800
    2650:	00000601 	.word	0x00000601
    2654:	00010801 	.word	0x00010801
    2658:	00000402 	.word	0x00000402
    265c:	00210602 	.word	0x00210602
    2660:	00000803 	.word	0x00000803
    2664:	00290603 	.word	0x00290603
    2668:	00090704 	.word	0x00090704
    266c:	00000305 	.word	0x00000305
    2670:	00010805 	.word	0x00010805
    2674:	00210406 	.word	0x00210406

00002678 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2678:	4b06      	ldr	r3, [pc, #24]	; (2694 <_pm_init+0x1c>)
    267a:	7a1a      	ldrb	r2, [r3, #8]
    267c:	b2d2      	uxtb	r2, r2
    267e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    2680:	7a5a      	ldrb	r2, [r3, #9]
    2682:	b2d2      	uxtb	r2, r2
    2684:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2686:	7a9a      	ldrb	r2, [r3, #10]
    2688:	b2d2      	uxtb	r2, r2
    268a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    268c:	7ada      	ldrb	r2, [r3, #11]
    268e:	b2d2      	uxtb	r2, r2
    2690:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    2692:	4770      	bx	lr
    2694:	40000400 	.word	0x40000400

00002698 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2698:	4b02      	ldr	r3, [pc, #8]	; (26a4 <_sercom_get_hardware_index+0xc>)
    269a:	469c      	mov	ip, r3
    269c:	4460      	add	r0, ip
    269e:	0a80      	lsrs	r0, r0, #10
    26a0:	b2c0      	uxtb	r0, r0
}
    26a2:	4770      	bx	lr
    26a4:	bdfff800 	.word	0xbdfff800

000026a8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    26a8:	b510      	push	{r4, lr}
	void *hw = device->hw;
    26aa:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    26ac:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    26ae:	07db      	lsls	r3, r3, #31
    26b0:	d502      	bpl.n	26b8 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    26b2:	7da3      	ldrb	r3, [r4, #22]
    26b4:	07db      	lsls	r3, r3, #31
    26b6:	d40f      	bmi.n	26d8 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    26b8:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    26ba:	079b      	lsls	r3, r3, #30
    26bc:	d502      	bpl.n	26c4 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    26be:	7da3      	ldrb	r3, [r4, #22]
    26c0:	079b      	lsls	r3, r3, #30
    26c2:	d40e      	bmi.n	26e2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    26c4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    26c6:	075b      	lsls	r3, r3, #29
    26c8:	d515      	bpl.n	26f6 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    26ca:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    26cc:	2337      	movs	r3, #55	; 0x37
    26ce:	421a      	tst	r2, r3
    26d0:	d00c      	beq.n	26ec <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    26d2:	3308      	adds	r3, #8
    26d4:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    26d6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    26d8:	2301      	movs	r3, #1
    26da:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    26dc:	6803      	ldr	r3, [r0, #0]
    26de:	4798      	blx	r3
    26e0:	e7f9      	b.n	26d6 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    26e2:	2302      	movs	r3, #2
    26e4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    26e6:	6883      	ldr	r3, [r0, #8]
    26e8:	4798      	blx	r3
    26ea:	e7f4      	b.n	26d6 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    26ec:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    26ee:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    26f0:	b2c9      	uxtb	r1, r1
    26f2:	4798      	blx	r3
    26f4:	e7ef      	b.n	26d6 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    26f6:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    26f8:	09db      	lsrs	r3, r3, #7
    26fa:	d0ec      	beq.n	26d6 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    26fc:	2380      	movs	r3, #128	; 0x80
    26fe:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    2700:	68c3      	ldr	r3, [r0, #12]
    2702:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2704:	8b63      	ldrh	r3, [r4, #26]
    2706:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2708:	8363      	strh	r3, [r4, #26]
    270a:	e7e4      	b.n	26d6 <_sercom_usart_interrupt_handler+0x2e>

0000270c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    270c:	4b03      	ldr	r3, [pc, #12]	; (271c <_sercom_init_irq_param+0x10>)
    270e:	4298      	cmp	r0, r3
    2710:	d000      	beq.n	2714 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    2712:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    2714:	4b02      	ldr	r3, [pc, #8]	; (2720 <_sercom_init_irq_param+0x14>)
    2716:	6019      	str	r1, [r3, #0]
}
    2718:	e7fb      	b.n	2712 <_sercom_init_irq_param+0x6>
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	42001400 	.word	0x42001400
    2720:	200006b4 	.word	0x200006b4

00002724 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2724:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <_sercom_get_irq_num+0xc>)
    2728:	4798      	blx	r3
    272a:	3009      	adds	r0, #9
    272c:	b2c0      	uxtb	r0, r0
}
    272e:	bd10      	pop	{r4, pc}
    2730:	00002699 	.word	0x00002699

00002734 <_get_sercom_index>:
{
    2734:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2736:	4b0b      	ldr	r3, [pc, #44]	; (2764 <_get_sercom_index+0x30>)
    2738:	4798      	blx	r3
    273a:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    273c:	2000      	movs	r0, #0
    273e:	2800      	cmp	r0, #0
    2740:	d006      	beq.n	2750 <_get_sercom_index+0x1c>
	ASSERT(false);
    2742:	4a09      	ldr	r2, [pc, #36]	; (2768 <_get_sercom_index+0x34>)
    2744:	4909      	ldr	r1, [pc, #36]	; (276c <_get_sercom_index+0x38>)
    2746:	2000      	movs	r0, #0
    2748:	4b09      	ldr	r3, [pc, #36]	; (2770 <_get_sercom_index+0x3c>)
    274a:	4798      	blx	r3
	return 0;
    274c:	2000      	movs	r0, #0
}
    274e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    2750:	0083      	lsls	r3, r0, #2
    2752:	181b      	adds	r3, r3, r0
    2754:	0099      	lsls	r1, r3, #2
    2756:	4b07      	ldr	r3, [pc, #28]	; (2774 <_get_sercom_index+0x40>)
    2758:	5ccb      	ldrb	r3, [r1, r3]
    275a:	429a      	cmp	r2, r3
    275c:	d0f7      	beq.n	274e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    275e:	3001      	adds	r0, #1
    2760:	b2c0      	uxtb	r0, r0
    2762:	e7ec      	b.n	273e <_get_sercom_index+0xa>
    2764:	00002699 	.word	0x00002699
    2768:	0000025e 	.word	0x0000025e
    276c:	00007620 	.word	0x00007620
    2770:	00002175 	.word	0x00002175
    2774:	000075b0 	.word	0x000075b0

00002778 <_usart_init>:
{
    2778:	b570      	push	{r4, r5, r6, lr}
    277a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    277c:	4b38      	ldr	r3, [pc, #224]	; (2860 <_usart_init+0xe8>)
    277e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2780:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2782:	07db      	lsls	r3, r3, #31
    2784:	d41d      	bmi.n	27c2 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2786:	0083      	lsls	r3, r0, #2
    2788:	181b      	adds	r3, r3, r0
    278a:	009a      	lsls	r2, r3, #2
    278c:	4b35      	ldr	r3, [pc, #212]	; (2864 <_usart_init+0xec>)
    278e:	189b      	adds	r3, r3, r2
    2790:	685a      	ldr	r2, [r3, #4]
    2792:	231c      	movs	r3, #28
    2794:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2796:	69e3      	ldr	r3, [r4, #28]
    2798:	079b      	lsls	r3, r3, #30
    279a:	d1fc      	bne.n	2796 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    279c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    279e:	079b      	lsls	r3, r3, #30
    27a0:	d509      	bpl.n	27b6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    27a2:	6823      	ldr	r3, [r4, #0]
    27a4:	2102      	movs	r1, #2
    27a6:	438b      	bics	r3, r1
    27a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27aa:	69e3      	ldr	r3, [r4, #28]
    27ac:	079b      	lsls	r3, r3, #30
    27ae:	d1fc      	bne.n	27aa <_usart_init+0x32>
    27b0:	69e3      	ldr	r3, [r4, #28]
    27b2:	079b      	lsls	r3, r3, #30
    27b4:	d4fc      	bmi.n	27b0 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    27b6:	2301      	movs	r3, #1
    27b8:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    27ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27bc:	69e3      	ldr	r3, [r4, #28]
    27be:	079b      	lsls	r3, r3, #30
    27c0:	d1fc      	bne.n	27bc <_usart_init+0x44>
    27c2:	69e3      	ldr	r3, [r4, #28]
    27c4:	07db      	lsls	r3, r3, #31
    27c6:	d4fc      	bmi.n	27c2 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    27c8:	0083      	lsls	r3, r0, #2
    27ca:	181b      	adds	r3, r3, r0
    27cc:	009a      	lsls	r2, r3, #2
    27ce:	4b25      	ldr	r3, [pc, #148]	; (2864 <_usart_init+0xec>)
    27d0:	189b      	adds	r3, r3, r2
    27d2:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    27d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27d6:	69e3      	ldr	r3, [r4, #28]
    27d8:	079b      	lsls	r3, r3, #30
    27da:	d1fc      	bne.n	27d6 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    27dc:	0083      	lsls	r3, r0, #2
    27de:	181b      	adds	r3, r3, r0
    27e0:	009a      	lsls	r2, r3, #2
    27e2:	4b20      	ldr	r3, [pc, #128]	; (2864 <_usart_init+0xec>)
    27e4:	189b      	adds	r3, r3, r2
    27e6:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    27e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27ea:	69e3      	ldr	r3, [r4, #28]
    27ec:	075b      	lsls	r3, r3, #29
    27ee:	d1fc      	bne.n	27ea <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    27f0:	0083      	lsls	r3, r0, #2
    27f2:	181b      	adds	r3, r3, r0
    27f4:	009a      	lsls	r2, r3, #2
    27f6:	4b1b      	ldr	r3, [pc, #108]	; (2864 <_usart_init+0xec>)
    27f8:	189b      	adds	r3, r3, r2
    27fa:	685b      	ldr	r3, [r3, #4]
    27fc:	049a      	lsls	r2, r3, #18
    27fe:	d40b      	bmi.n	2818 <_usart_init+0xa0>
    2800:	22c0      	movs	r2, #192	; 0xc0
    2802:	01d2      	lsls	r2, r2, #7
    2804:	4213      	tst	r3, r2
    2806:	d107      	bne.n	2818 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2808:	0083      	lsls	r3, r0, #2
    280a:	181b      	adds	r3, r3, r0
    280c:	009a      	lsls	r2, r3, #2
    280e:	4b15      	ldr	r3, [pc, #84]	; (2864 <_usart_init+0xec>)
    2810:	189b      	adds	r3, r3, r2
    2812:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    2814:	81a3      	strh	r3, [r4, #12]
    2816:	e015      	b.n	2844 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2818:	0083      	lsls	r3, r0, #2
    281a:	181b      	adds	r3, r3, r0
    281c:	009a      	lsls	r2, r3, #2
    281e:	4911      	ldr	r1, [pc, #68]	; (2864 <_usart_init+0xec>)
    2820:	1889      	adds	r1, r1, r2
    2822:	898a      	ldrh	r2, [r1, #12]
    2824:	89a3      	ldrh	r3, [r4, #12]
    2826:	04d2      	lsls	r2, r2, #19
    2828:	0cd2      	lsrs	r2, r2, #19
    282a:	0b5b      	lsrs	r3, r3, #13
    282c:	035b      	lsls	r3, r3, #13
    282e:	4313      	orrs	r3, r2
    2830:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2832:	7b8b      	ldrb	r3, [r1, #14]
    2834:	2207      	movs	r2, #7
    2836:	401a      	ands	r2, r3
    2838:	89a3      	ldrh	r3, [r4, #12]
    283a:	0352      	lsls	r2, r2, #13
    283c:	04db      	lsls	r3, r3, #19
    283e:	0cdb      	lsrs	r3, r3, #19
    2840:	4313      	orrs	r3, r2
    2842:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2844:	4a07      	ldr	r2, [pc, #28]	; (2864 <_usart_init+0xec>)
    2846:	0083      	lsls	r3, r0, #2
    2848:	181d      	adds	r5, r3, r0
    284a:	00a9      	lsls	r1, r5, #2
    284c:	000d      	movs	r5, r1
    284e:	1851      	adds	r1, r2, r1
    2850:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    2852:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2854:	1952      	adds	r2, r2, r5
    2856:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2858:	2330      	movs	r3, #48	; 0x30
    285a:	54e2      	strb	r2, [r4, r3]
}
    285c:	2000      	movs	r0, #0
    285e:	bd70      	pop	{r4, r5, r6, pc}
    2860:	00002735 	.word	0x00002735
    2864:	000075b0 	.word	0x000075b0

00002868 <_usart_async_init>:
{
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	0006      	movs	r6, r0
    286c:	000c      	movs	r4, r1
	ASSERT(device);
    286e:	1e43      	subs	r3, r0, #1
    2870:	4198      	sbcs	r0, r3
    2872:	b2c0      	uxtb	r0, r0
    2874:	22c4      	movs	r2, #196	; 0xc4
    2876:	4919      	ldr	r1, [pc, #100]	; (28dc <_usart_async_init+0x74>)
    2878:	4b19      	ldr	r3, [pc, #100]	; (28e0 <_usart_async_init+0x78>)
    287a:	4798      	blx	r3
	init_status = _usart_init(hw);
    287c:	0020      	movs	r0, r4
    287e:	4b19      	ldr	r3, [pc, #100]	; (28e4 <_usart_async_init+0x7c>)
    2880:	4798      	blx	r3
    2882:	1e05      	subs	r5, r0, #0
	if (init_status) {
    2884:	d001      	beq.n	288a <_usart_async_init+0x22>
}
    2886:	0028      	movs	r0, r5
    2888:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    288a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    288c:	0031      	movs	r1, r6
    288e:	0020      	movs	r0, r4
    2890:	4b15      	ldr	r3, [pc, #84]	; (28e8 <_usart_async_init+0x80>)
    2892:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    2894:	0020      	movs	r0, r4
    2896:	4b15      	ldr	r3, [pc, #84]	; (28ec <_usart_async_init+0x84>)
    2898:	4798      	blx	r3
    289a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    289c:	2b00      	cmp	r3, #0
    289e:	db0a      	blt.n	28b6 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28a0:	211f      	movs	r1, #31
    28a2:	4001      	ands	r1, r0
    28a4:	2201      	movs	r2, #1
    28a6:	408a      	lsls	r2, r1
    28a8:	2180      	movs	r1, #128	; 0x80
    28aa:	4c11      	ldr	r4, [pc, #68]	; (28f0 <_usart_async_init+0x88>)
    28ac:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    28ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28b2:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    28b6:	2b00      	cmp	r3, #0
    28b8:	db07      	blt.n	28ca <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ba:	211f      	movs	r1, #31
    28bc:	4001      	ands	r1, r0
    28be:	2201      	movs	r2, #1
    28c0:	408a      	lsls	r2, r1
    28c2:	21c0      	movs	r1, #192	; 0xc0
    28c4:	0049      	lsls	r1, r1, #1
    28c6:	4c0a      	ldr	r4, [pc, #40]	; (28f0 <_usart_async_init+0x88>)
    28c8:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    28ca:	2b00      	cmp	r3, #0
    28cc:	dbdb      	blt.n	2886 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ce:	231f      	movs	r3, #31
    28d0:	4018      	ands	r0, r3
    28d2:	3b1e      	subs	r3, #30
    28d4:	4083      	lsls	r3, r0
    28d6:	4a06      	ldr	r2, [pc, #24]	; (28f0 <_usart_async_init+0x88>)
    28d8:	6013      	str	r3, [r2, #0]
    28da:	e7d4      	b.n	2886 <_usart_async_init+0x1e>
    28dc:	00007620 	.word	0x00007620
    28e0:	00002175 	.word	0x00002175
    28e4:	00002779 	.word	0x00002779
    28e8:	0000270d 	.word	0x0000270d
    28ec:	00002725 	.word	0x00002725
    28f0:	e000e100 	.word	0xe000e100

000028f4 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    28f4:	6983      	ldr	r3, [r0, #24]
    28f6:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    28f8:	8519      	strh	r1, [r3, #40]	; 0x28
}
    28fa:	4770      	bx	lr

000028fc <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    28fc:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    28fe:	2201      	movs	r2, #1
    2900:	759a      	strb	r2, [r3, #22]
}
    2902:	4770      	bx	lr

00002904 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2904:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2906:	2202      	movs	r2, #2
    2908:	759a      	strb	r2, [r3, #22]
}
    290a:	4770      	bx	lr

0000290c <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    290c:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    290e:	4b02      	ldr	r3, [pc, #8]	; (2918 <SERCOM3_Handler+0xc>)
    2910:	6818      	ldr	r0, [r3, #0]
    2912:	4b02      	ldr	r3, [pc, #8]	; (291c <SERCOM3_Handler+0x10>)
    2914:	4798      	blx	r3
}
    2916:	bd10      	pop	{r4, pc}
    2918:	200006b4 	.word	0x200006b4
    291c:	000026a9 	.word	0x000026a9

00002920 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2922:	0006      	movs	r6, r0
    2924:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2926:	0008      	movs	r0, r1
    2928:	4b73      	ldr	r3, [pc, #460]	; (2af8 <_spi_m_sync_init+0x1d8>)
    292a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    292c:	2300      	movs	r3, #0
    292e:	e001      	b.n	2934 <_spi_m_sync_init+0x14>
    2930:	3301      	adds	r3, #1
    2932:	b2db      	uxtb	r3, r3
    2934:	2b02      	cmp	r3, #2
    2936:	d80b      	bhi.n	2950 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    2938:	0119      	lsls	r1, r3, #4
    293a:	18c9      	adds	r1, r1, r3
    293c:	4a6f      	ldr	r2, [pc, #444]	; (2afc <_spi_m_sync_init+0x1dc>)
    293e:	1852      	adds	r2, r2, r1
    2940:	324c      	adds	r2, #76	; 0x4c
    2942:	7812      	ldrb	r2, [r2, #0]
    2944:	4290      	cmp	r0, r2
    2946:	d1f3      	bne.n	2930 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    2948:	4d6c      	ldr	r5, [pc, #432]	; (2afc <_spi_m_sync_init+0x1dc>)
    294a:	353c      	adds	r5, #60	; 0x3c
    294c:	186d      	adds	r5, r5, r1
    294e:	e000      	b.n	2952 <_spi_m_sync_init+0x32>
	return NULL;
    2950:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2952:	2e00      	cmp	r6, #0
    2954:	d100      	bne.n	2958 <_spi_m_sync_init+0x38>
    2956:	e082      	b.n	2a5e <_spi_m_sync_init+0x13e>
    2958:	2c00      	cmp	r4, #0
    295a:	d100      	bne.n	295e <_spi_m_sync_init+0x3e>
    295c:	e07d      	b.n	2a5a <_spi_m_sync_init+0x13a>
    295e:	2001      	movs	r0, #1
    2960:	4a67      	ldr	r2, [pc, #412]	; (2b00 <_spi_m_sync_init+0x1e0>)
    2962:	4968      	ldr	r1, [pc, #416]	; (2b04 <_spi_m_sync_init+0x1e4>)
    2964:	4b68      	ldr	r3, [pc, #416]	; (2b08 <_spi_m_sync_init+0x1e8>)
    2966:	4798      	blx	r3

	if (regs == NULL) {
    2968:	2d00      	cmp	r5, #0
    296a:	d100      	bne.n	296e <_spi_m_sync_init+0x4e>
    296c:	e0c0      	b.n	2af0 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    296e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2970:	07db      	lsls	r3, r3, #31
    2972:	d421      	bmi.n	29b8 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    2974:	782a      	ldrb	r2, [r5, #0]
    2976:	786b      	ldrb	r3, [r5, #1]
    2978:	021b      	lsls	r3, r3, #8
    297a:	4313      	orrs	r3, r2
    297c:	78aa      	ldrb	r2, [r5, #2]
    297e:	0412      	lsls	r2, r2, #16
    2980:	4313      	orrs	r3, r2
    2982:	78ea      	ldrb	r2, [r5, #3]
    2984:	0612      	lsls	r2, r2, #24
    2986:	431a      	orrs	r2, r3
    2988:	231c      	movs	r3, #28
    298a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    298c:	69e3      	ldr	r3, [r4, #28]
    298e:	079b      	lsls	r3, r3, #30
    2990:	d1fc      	bne.n	298c <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2992:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2994:	079b      	lsls	r3, r3, #30
    2996:	d509      	bpl.n	29ac <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2998:	6823      	ldr	r3, [r4, #0]
    299a:	2102      	movs	r1, #2
    299c:	438b      	bics	r3, r1
    299e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    29a0:	69e3      	ldr	r3, [r4, #28]
    29a2:	079b      	lsls	r3, r3, #30
    29a4:	d1fc      	bne.n	29a0 <_spi_m_sync_init+0x80>
    29a6:	69e3      	ldr	r3, [r4, #28]
    29a8:	079b      	lsls	r3, r3, #30
    29aa:	d4fc      	bmi.n	29a6 <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    29ac:	2301      	movs	r3, #1
    29ae:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    29b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    29b2:	69e3      	ldr	r3, [r4, #28]
    29b4:	079b      	lsls	r3, r3, #30
    29b6:	d1fc      	bne.n	29b2 <_spi_m_sync_init+0x92>
    29b8:	69e3      	ldr	r3, [r4, #28]
    29ba:	07db      	lsls	r3, r3, #31
    29bc:	d4fc      	bmi.n	29b8 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    29be:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    29c0:	782b      	ldrb	r3, [r5, #0]
    29c2:	786a      	ldrb	r2, [r5, #1]
    29c4:	0212      	lsls	r2, r2, #8
    29c6:	431a      	orrs	r2, r3
    29c8:	78ab      	ldrb	r3, [r5, #2]
    29ca:	041b      	lsls	r3, r3, #16
    29cc:	431a      	orrs	r2, r3
    29ce:	78eb      	ldrb	r3, [r5, #3]
    29d0:	061b      	lsls	r3, r3, #24
    29d2:	4313      	orrs	r3, r2
    29d4:	221c      	movs	r2, #28
    29d6:	4013      	ands	r3, r2
    29d8:	2b08      	cmp	r3, #8
    29da:	d042      	beq.n	2a62 <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    29dc:	2c00      	cmp	r4, #0
    29de:	d100      	bne.n	29e2 <_spi_m_sync_init+0xc2>
    29e0:	e082      	b.n	2ae8 <_spi_m_sync_init+0x1c8>
    29e2:	2d00      	cmp	r5, #0
    29e4:	d100      	bne.n	29e8 <_spi_m_sync_init+0xc8>
    29e6:	e07d      	b.n	2ae4 <_spi_m_sync_init+0x1c4>
    29e8:	2001      	movs	r0, #1
    29ea:	4a48      	ldr	r2, [pc, #288]	; (2b0c <_spi_m_sync_init+0x1ec>)
    29ec:	4945      	ldr	r1, [pc, #276]	; (2b04 <_spi_m_sync_init+0x1e4>)
    29ee:	4b46      	ldr	r3, [pc, #280]	; (2b08 <_spi_m_sync_init+0x1e8>)
    29f0:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    29f2:	782b      	ldrb	r3, [r5, #0]
    29f4:	786a      	ldrb	r2, [r5, #1]
    29f6:	0212      	lsls	r2, r2, #8
    29f8:	431a      	orrs	r2, r3
    29fa:	78ab      	ldrb	r3, [r5, #2]
    29fc:	041b      	lsls	r3, r3, #16
    29fe:	431a      	orrs	r2, r3
    2a00:	78eb      	ldrb	r3, [r5, #3]
    2a02:	061b      	lsls	r3, r3, #24
    2a04:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2a06:	4a42      	ldr	r2, [pc, #264]	; (2b10 <_spi_m_sync_init+0x1f0>)
    2a08:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2a0a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a0c:	69e3      	ldr	r3, [r4, #28]
    2a0e:	079b      	lsls	r3, r3, #30
    2a10:	d1fc      	bne.n	2a0c <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    2a12:	792b      	ldrb	r3, [r5, #4]
    2a14:	796a      	ldrb	r2, [r5, #5]
    2a16:	0212      	lsls	r2, r2, #8
    2a18:	431a      	orrs	r2, r3
    2a1a:	79ab      	ldrb	r3, [r5, #6]
    2a1c:	041b      	lsls	r3, r3, #16
    2a1e:	431a      	orrs	r2, r3
    2a20:	79eb      	ldrb	r3, [r5, #7]
    2a22:	061b      	lsls	r3, r3, #24
    2a24:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    2a26:	4a3b      	ldr	r2, [pc, #236]	; (2b14 <_spi_m_sync_init+0x1f4>)
    2a28:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    2a2a:	2280      	movs	r2, #128	; 0x80
    2a2c:	0292      	lsls	r2, r2, #10
    2a2e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2a30:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a32:	69e3      	ldr	r3, [r4, #28]
    2a34:	075b      	lsls	r3, r3, #29
    2a36:	d1fc      	bne.n	2a32 <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2a38:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2a3a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2a3c:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2a3e:	2330      	movs	r3, #48	; 0x30
    2a40:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2a42:	792b      	ldrb	r3, [r5, #4]
    2a44:	075b      	lsls	r3, r3, #29
    2a46:	d151      	bne.n	2aec <_spi_m_sync_init+0x1cc>
    2a48:	2301      	movs	r3, #1
    2a4a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2a4c:	7baa      	ldrb	r2, [r5, #14]
    2a4e:	7beb      	ldrb	r3, [r5, #15]
    2a50:	021b      	lsls	r3, r3, #8
    2a52:	4313      	orrs	r3, r2
    2a54:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2a56:	2000      	movs	r0, #0
}
    2a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    2a5a:	2000      	movs	r0, #0
    2a5c:	e780      	b.n	2960 <_spi_m_sync_init+0x40>
    2a5e:	2000      	movs	r0, #0
    2a60:	e77e      	b.n	2960 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    2a62:	2c00      	cmp	r4, #0
    2a64:	d03c      	beq.n	2ae0 <_spi_m_sync_init+0x1c0>
    2a66:	2d00      	cmp	r5, #0
    2a68:	d038      	beq.n	2adc <_spi_m_sync_init+0x1bc>
    2a6a:	2001      	movs	r0, #1
    2a6c:	4a2a      	ldr	r2, [pc, #168]	; (2b18 <_spi_m_sync_init+0x1f8>)
    2a6e:	4925      	ldr	r1, [pc, #148]	; (2b04 <_spi_m_sync_init+0x1e4>)
    2a70:	4b25      	ldr	r3, [pc, #148]	; (2b08 <_spi_m_sync_init+0x1e8>)
    2a72:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2a74:	782b      	ldrb	r3, [r5, #0]
    2a76:	786a      	ldrb	r2, [r5, #1]
    2a78:	0212      	lsls	r2, r2, #8
    2a7a:	431a      	orrs	r2, r3
    2a7c:	78ab      	ldrb	r3, [r5, #2]
    2a7e:	041b      	lsls	r3, r3, #16
    2a80:	431a      	orrs	r2, r3
    2a82:	78eb      	ldrb	r3, [r5, #3]
    2a84:	061b      	lsls	r3, r3, #24
    2a86:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2a88:	4a21      	ldr	r2, [pc, #132]	; (2b10 <_spi_m_sync_init+0x1f0>)
    2a8a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2a8c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2a8e:	69e3      	ldr	r3, [r4, #28]
    2a90:	079b      	lsls	r3, r3, #30
    2a92:	d1fc      	bne.n	2a8e <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2a94:	792b      	ldrb	r3, [r5, #4]
    2a96:	796a      	ldrb	r2, [r5, #5]
    2a98:	0212      	lsls	r2, r2, #8
    2a9a:	431a      	orrs	r2, r3
    2a9c:	79ab      	ldrb	r3, [r5, #6]
    2a9e:	041b      	lsls	r3, r3, #16
    2aa0:	431a      	orrs	r2, r3
    2aa2:	79eb      	ldrb	r3, [r5, #7]
    2aa4:	061b      	lsls	r3, r3, #24
    2aa6:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    2aa8:	4a1c      	ldr	r2, [pc, #112]	; (2b1c <_spi_m_sync_init+0x1fc>)
    2aaa:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    2aac:	4a1c      	ldr	r2, [pc, #112]	; (2b20 <_spi_m_sync_init+0x200>)
    2aae:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2ab0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2ab2:	69e3      	ldr	r3, [r4, #28]
    2ab4:	075b      	lsls	r3, r3, #29
    2ab6:	d1fc      	bne.n	2ab2 <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2ab8:	7a2b      	ldrb	r3, [r5, #8]
    2aba:	7a6a      	ldrb	r2, [r5, #9]
    2abc:	0212      	lsls	r2, r2, #8
    2abe:	431a      	orrs	r2, r3
    2ac0:	7aab      	ldrb	r3, [r5, #10]
    2ac2:	041b      	lsls	r3, r3, #16
    2ac4:	431a      	orrs	r2, r3
    2ac6:	7aeb      	ldrb	r3, [r5, #11]
    2ac8:	061b      	lsls	r3, r3, #24
    2aca:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2acc:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2ace:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2ad0:	2330      	movs	r3, #48	; 0x30
    2ad2:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2ad4:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d1fc      	bne.n	2ad4 <_spi_m_sync_init+0x1b4>
    2ada:	e7b2      	b.n	2a42 <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    2adc:	2000      	movs	r0, #0
    2ade:	e7c5      	b.n	2a6c <_spi_m_sync_init+0x14c>
    2ae0:	2000      	movs	r0, #0
    2ae2:	e7c3      	b.n	2a6c <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    2ae4:	2000      	movs	r0, #0
    2ae6:	e780      	b.n	29ea <_spi_m_sync_init+0xca>
    2ae8:	2000      	movs	r0, #0
    2aea:	e77e      	b.n	29ea <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2aec:	2302      	movs	r3, #2
    2aee:	e7ac      	b.n	2a4a <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    2af0:	200d      	movs	r0, #13
    2af2:	4240      	negs	r0, r0
    2af4:	e7b0      	b.n	2a58 <_spi_m_sync_init+0x138>
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002699 	.word	0x00002699
    2afc:	000075b0 	.word	0x000075b0
    2b00:	00000952 	.word	0x00000952
    2b04:	00007620 	.word	0x00007620
    2b08:	00002175 	.word	0x00002175
    2b0c:	00000917 	.word	0x00000917
    2b10:	fffffefc 	.word	0xfffffefc
    2b14:	fffd1dbf 	.word	0xfffd1dbf
    2b18:	0000092b 	.word	0x0000092b
    2b1c:	fffdddbf 	.word	0xfffdddbf
    2b20:	00020240 	.word	0x00020240

00002b24 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b26:	46ce      	mov	lr, r9
    2b28:	4647      	mov	r7, r8
    2b2a:	b580      	push	{r7, lr}
    2b2c:	b089      	sub	sp, #36	; 0x24
    2b2e:	4681      	mov	r9, r0
    2b30:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    2b32:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2b34:	680b      	ldr	r3, [r1, #0]
    2b36:	9303      	str	r3, [sp, #12]
    2b38:	684b      	ldr	r3, [r1, #4]
    2b3a:	9304      	str	r3, [sp, #16]
    2b3c:	2300      	movs	r3, #0
    2b3e:	9305      	str	r3, [sp, #20]
    2b40:	9306      	str	r3, [sp, #24]
    2b42:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    2b44:	2800      	cmp	r0, #0
    2b46:	d014      	beq.n	2b72 <_spi_m_sync_trans+0x4e>
    2b48:	2c00      	cmp	r4, #0
    2b4a:	d010      	beq.n	2b6e <_spi_m_sync_trans+0x4a>
    2b4c:	2001      	movs	r0, #1
    2b4e:	4a37      	ldr	r2, [pc, #220]	; (2c2c <_spi_m_sync_trans+0x108>)
    2b50:	4937      	ldr	r1, [pc, #220]	; (2c30 <_spi_m_sync_trans+0x10c>)
    2b52:	4b38      	ldr	r3, [pc, #224]	; (2c34 <_spi_m_sync_trans+0x110>)
    2b54:	4798      	blx	r3
    2b56:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2b58:	075b      	lsls	r3, r3, #29
    2b5a:	d164      	bne.n	2c26 <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2b5c:	69e3      	ldr	r3, [r4, #28]
    2b5e:	079b      	lsls	r3, r3, #30
    2b60:	d1fc      	bne.n	2b5c <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2b62:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2b64:	079b      	lsls	r3, r3, #30
    2b66:	d420      	bmi.n	2baa <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    2b68:	2014      	movs	r0, #20
    2b6a:	4240      	negs	r0, r0
    2b6c:	e056      	b.n	2c1c <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    2b6e:	2000      	movs	r0, #0
    2b70:	e7ed      	b.n	2b4e <_spi_m_sync_trans+0x2a>
    2b72:	2000      	movs	r0, #0
    2b74:	e7eb      	b.n	2b4e <_spi_m_sync_trans+0x2a>
		return false;
    2b76:	2200      	movs	r2, #0
    2b78:	e02d      	b.n	2bd6 <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    2b7a:	7848      	ldrb	r0, [r1, #1]
    2b7c:	0200      	lsls	r0, r0, #8
    2b7e:	4647      	mov	r7, r8
    2b80:	4307      	orrs	r7, r0
    2b82:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    2b84:	3102      	adds	r1, #2
    2b86:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    2b88:	3201      	adds	r2, #1
    2b8a:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    2b8c:	4642      	mov	r2, r8
    2b8e:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2b90:	b25b      	sxtb	r3, r3
    2b92:	2b00      	cmp	r3, #0
    2b94:	db35      	blt.n	2c02 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    2b96:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    2b98:	2800      	cmp	r0, #0
    2b9a:	db3a      	blt.n	2c12 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2b9c:	9805      	ldr	r0, [sp, #20]
    2b9e:	68ab      	ldr	r3, [r5, #8]
    2ba0:	4298      	cmp	r0, r3
    2ba2:	d302      	bcc.n	2baa <_spi_m_sync_trans+0x86>
    2ba4:	9a06      	ldr	r2, [sp, #24]
    2ba6:	4293      	cmp	r3, r2
    2ba8:	d933      	bls.n	2c12 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2baa:	7e23      	ldrb	r3, [r4, #24]
    2bac:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2bae:	075a      	lsls	r2, r3, #29
    2bb0:	d5e1      	bpl.n	2b76 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2bb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    2bb4:	9a04      	ldr	r2, [sp, #16]
    2bb6:	2a00      	cmp	r2, #0
    2bb8:	d008      	beq.n	2bcc <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    2bba:	1c50      	adds	r0, r2, #1
    2bbc:	9004      	str	r0, [sp, #16]
    2bbe:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    2bc0:	2e01      	cmp	r6, #1
    2bc2:	d903      	bls.n	2bcc <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2bc4:	1c90      	adds	r0, r2, #2
    2bc6:	9004      	str	r0, [sp, #16]
    2bc8:	0a09      	lsrs	r1, r1, #8
    2bca:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    2bcc:	9a06      	ldr	r2, [sp, #24]
    2bce:	9201      	str	r2, [sp, #4]
    2bd0:	3201      	adds	r2, #1
    2bd2:	9206      	str	r2, [sp, #24]
	return true;
    2bd4:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    2bd6:	2a00      	cmp	r2, #0
    2bd8:	d1da      	bne.n	2b90 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2bda:	9906      	ldr	r1, [sp, #24]
    2bdc:	9a05      	ldr	r2, [sp, #20]
    2bde:	4291      	cmp	r1, r2
    2be0:	d3d6      	bcc.n	2b90 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2be2:	4649      	mov	r1, r9
    2be4:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2be6:	07d9      	lsls	r1, r3, #31
    2be8:	d5d2      	bpl.n	2b90 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    2bea:	9903      	ldr	r1, [sp, #12]
    2bec:	2900      	cmp	r1, #0
    2bee:	d006      	beq.n	2bfe <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    2bf0:	1c48      	adds	r0, r1, #1
    2bf2:	9003      	str	r0, [sp, #12]
    2bf4:	7808      	ldrb	r0, [r1, #0]
    2bf6:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    2bf8:	2e01      	cmp	r6, #1
    2bfa:	d8be      	bhi.n	2b7a <_spi_m_sync_trans+0x56>
    2bfc:	e7c4      	b.n	2b88 <_spi_m_sync_trans+0x64>
		data = dummy;
    2bfe:	4680      	mov	r8, r0
    2c00:	e7c2      	b.n	2b88 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2c02:	2301      	movs	r3, #1
    2c04:	425b      	negs	r3, r3
    2c06:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2c08:	3381      	adds	r3, #129	; 0x81
    2c0a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2c0c:	2013      	movs	r0, #19
    2c0e:	4240      	negs	r0, r0
    2c10:	e7c2      	b.n	2b98 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2c12:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2c14:	079b      	lsls	r3, r3, #30
    2c16:	d0fc      	beq.n	2c12 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2c18:	2303      	movs	r3, #3
    2c1a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2c1c:	b009      	add	sp, #36	; 0x24
    2c1e:	bc0c      	pop	{r2, r3}
    2c20:	4690      	mov	r8, r2
    2c22:	4699      	mov	r9, r3
    2c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    2c26:	2004      	movs	r0, #4
    2c28:	4240      	negs	r0, r0
    2c2a:	e7f7      	b.n	2c1c <_spi_m_sync_trans+0xf8>
    2c2c:	00000ab2 	.word	0x00000ab2
    2c30:	00007620 	.word	0x00007620
    2c34:	00002175 	.word	0x00002175

00002c38 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    2c38:	4a14      	ldr	r2, [pc, #80]	; (2c8c <_sysctrl_init_sources+0x54>)
    2c3a:	2366      	movs	r3, #102	; 0x66
    2c3c:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2c3e:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    2c40:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2c42:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2c44:	0f9b      	lsrs	r3, r3, #30
    2c46:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2c48:	0409      	lsls	r1, r1, #16
    2c4a:	4811      	ldr	r0, [pc, #68]	; (2c90 <_sysctrl_init_sources+0x58>)
    2c4c:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    2c4e:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    2c50:	2102      	movs	r1, #2
    2c52:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2c54:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    2c56:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    2c58:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    2c5a:	041b      	lsls	r3, r3, #16
    2c5c:	21fe      	movs	r1, #254	; 0xfe
    2c5e:	03c9      	lsls	r1, r1, #15
    2c60:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    2c62:	2146      	movs	r1, #70	; 0x46
    2c64:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    2c66:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2c68:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    2c6a:	3927      	subs	r1, #39	; 0x27
    2c6c:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    2c6e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    2c70:	4b06      	ldr	r3, [pc, #24]	; (2c8c <_sysctrl_init_sources+0x54>)
    2c72:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    2c74:	079b      	lsls	r3, r3, #30
    2c76:	d5fb      	bpl.n	2c70 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    2c78:	4b04      	ldr	r3, [pc, #16]	; (2c8c <_sysctrl_init_sources+0x54>)
    2c7a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    2c7c:	075b      	lsls	r3, r3, #29
    2c7e:	d5fb      	bpl.n	2c78 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2c80:	4b02      	ldr	r3, [pc, #8]	; (2c8c <_sysctrl_init_sources+0x54>)
    2c82:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2c84:	071b      	lsls	r3, r3, #28
    2c86:	d5fb      	bpl.n	2c80 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    2c88:	4770      	bx	lr
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	40000800 	.word	0x40000800
    2c90:	0fff0000 	.word	0x0fff0000

00002c94 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2c94:	2202      	movs	r2, #2
    2c96:	4b1f      	ldr	r3, [pc, #124]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2c98:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2c9a:	4b1e      	ldr	r3, [pc, #120]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2c9c:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2c9e:	06db      	lsls	r3, r3, #27
    2ca0:	d5fb      	bpl.n	2c9a <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    2ca2:	4a1d      	ldr	r2, [pc, #116]	; (2d18 <_sysctrl_init_referenced_generators+0x84>)
    2ca4:	4b1b      	ldr	r3, [pc, #108]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2ca6:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2ca8:	4b1c      	ldr	r3, [pc, #112]	; (2d1c <_sysctrl_init_referenced_generators+0x88>)
    2caa:	681b      	ldr	r3, [r3, #0]
    2cac:	0e9b      	lsrs	r3, r3, #26
    2cae:	2b3f      	cmp	r3, #63	; 0x3f
    2cb0:	d028      	beq.n	2d04 <_sysctrl_init_referenced_generators+0x70>
    2cb2:	029b      	lsls	r3, r3, #10
    2cb4:	2280      	movs	r2, #128	; 0x80
    2cb6:	0092      	lsls	r2, r2, #2
    2cb8:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    2cba:	4b16      	ldr	r3, [pc, #88]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2cbc:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    2cbe:	2293      	movs	r2, #147	; 0x93
    2cc0:	0052      	lsls	r2, r2, #1
    2cc2:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    2cc4:	2142      	movs	r1, #66	; 0x42
    2cc6:	3ae2      	subs	r2, #226	; 0xe2
    2cc8:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    2cca:	4a15      	ldr	r2, [pc, #84]	; (2d20 <_sysctrl_init_referenced_generators+0x8c>)
    2ccc:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    2cce:	2200      	movs	r2, #0
    2cd0:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    2cd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2cd4:	075b      	lsls	r3, r3, #29
    2cd6:	d518      	bpl.n	2d0a <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2cd8:	4b0e      	ldr	r3, [pc, #56]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2cda:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    2cdc:	06db      	lsls	r3, r3, #27
    2cde:	d5fb      	bpl.n	2cd8 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    2ce0:	2350      	movs	r3, #80	; 0x50
    2ce2:	4a0c      	ldr	r2, [pc, #48]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2ce4:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    2ce6:	075b      	lsls	r3, r3, #29
    2ce8:	d407      	bmi.n	2cfa <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    2cea:	2350      	movs	r3, #80	; 0x50
    2cec:	5cd3      	ldrb	r3, [r2, r3]
    2cee:	07db      	lsls	r3, r3, #31
    2cf0:	d403      	bmi.n	2cfa <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    2cf2:	2350      	movs	r3, #80	; 0x50
    2cf4:	5cd3      	ldrb	r3, [r2, r3]
    2cf6:	079b      	lsls	r3, r3, #30
    2cf8:	d5f2      	bpl.n	2ce0 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    2cfa:	4b0a      	ldr	r3, [pc, #40]	; (2d24 <_sysctrl_init_referenced_generators+0x90>)
    2cfc:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    2cfe:	09db      	lsrs	r3, r3, #7
    2d00:	d1fb      	bne.n	2cfa <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2d02:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2d04:	22fc      	movs	r2, #252	; 0xfc
    2d06:	01d2      	lsls	r2, r2, #7
    2d08:	e7d7      	b.n	2cba <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2d0a:	4b02      	ldr	r3, [pc, #8]	; (2d14 <_sysctrl_init_referenced_generators+0x80>)
    2d0c:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2d0e:	06db      	lsls	r3, r3, #27
    2d10:	d5fb      	bpl.n	2d0a <_sysctrl_init_referenced_generators+0x76>
    2d12:	e7e5      	b.n	2ce0 <_sysctrl_init_referenced_generators+0x4c>
    2d14:	40000800 	.word	0x40000800
    2d18:	0401bb80 	.word	0x0401bb80
    2d1c:	00806024 	.word	0x00806024
    2d20:	000e05b7 	.word	0x000e05b7
    2d24:	40000c00 	.word	0x40000c00

00002d28 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2d28:	4b02      	ldr	r3, [pc, #8]	; (2d34 <_system_time_init+0xc>)
    2d2a:	4a03      	ldr	r2, [pc, #12]	; (2d38 <_system_time_init+0x10>)
    2d2c:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2d2e:	2205      	movs	r2, #5
    2d30:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    2d32:	4770      	bx	lr
    2d34:	e000e010 	.word	0xe000e010
    2d38:	00ffffff 	.word	0x00ffffff

00002d3c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2d3c:	b510      	push	{r4, lr}
	_system_time_init(hw);
    2d3e:	4b01      	ldr	r3, [pc, #4]	; (2d44 <_delay_init+0x8>)
    2d40:	4798      	blx	r3
}
    2d42:	bd10      	pop	{r4, pc}
    2d44:	00002d29 	.word	0x00002d29

00002d48 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2d48:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2d4a:	e00b      	b.n	2d64 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    2d4c:	4b0b      	ldr	r3, [pc, #44]	; (2d7c <_delay_cycles+0x34>)
    2d4e:	480c      	ldr	r0, [pc, #48]	; (2d80 <_delay_cycles+0x38>)
    2d50:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    2d52:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2d54:	4b09      	ldr	r3, [pc, #36]	; (2d7c <_delay_cycles+0x34>)
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	03db      	lsls	r3, r3, #15
    2d5a:	d5fb      	bpl.n	2d54 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    2d5c:	4b09      	ldr	r3, [pc, #36]	; (2d84 <_delay_cycles+0x3c>)
    2d5e:	469c      	mov	ip, r3
    2d60:	4461      	add	r1, ip
	while (n--) {
    2d62:	0010      	movs	r0, r2
    2d64:	1e42      	subs	r2, r0, #1
    2d66:	b2d2      	uxtb	r2, r2
    2d68:	2800      	cmp	r0, #0
    2d6a:	d1ef      	bne.n	2d4c <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2d6c:	4b03      	ldr	r3, [pc, #12]	; (2d7c <_delay_cycles+0x34>)
    2d6e:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2d70:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2d72:	4b02      	ldr	r3, [pc, #8]	; (2d7c <_delay_cycles+0x34>)
    2d74:	681b      	ldr	r3, [r3, #0]
    2d76:	03db      	lsls	r3, r3, #15
    2d78:	d5fb      	bpl.n	2d72 <_delay_cycles+0x2a>
		;
}
    2d7a:	4770      	bx	lr
    2d7c:	e000e010 	.word	0xe000e010
    2d80:	00ffffff 	.word	0x00ffffff
    2d84:	ff000001 	.word	0xff000001

00002d88 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2d88:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2d8a:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2d8c:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2d8e:	07d2      	lsls	r2, r2, #31
    2d90:	d400      	bmi.n	2d94 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    2d92:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2d94:	2201      	movs	r2, #1
    2d96:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    2d98:	6803      	ldr	r3, [r0, #0]
    2d9a:	4798      	blx	r3
}
    2d9c:	e7f9      	b.n	2d92 <tc_interrupt_handler+0xa>
	...

00002da0 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2da0:	4b02      	ldr	r3, [pc, #8]	; (2dac <tc_get_hardware_index+0xc>)
    2da2:	469c      	mov	ip, r3
    2da4:	4460      	add	r0, ip
    2da6:	0a80      	lsrs	r0, r0, #10
    2da8:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    2daa:	4770      	bx	lr
    2dac:	bdffd400 	.word	0xbdffd400

00002db0 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    2db0:	4b06      	ldr	r3, [pc, #24]	; (2dcc <_tc_init_irq_param+0x1c>)
    2db2:	4298      	cmp	r0, r3
    2db4:	d003      	beq.n	2dbe <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2db6:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <_tc_init_irq_param+0x20>)
    2db8:	4298      	cmp	r0, r3
    2dba:	d003      	beq.n	2dc4 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    2dbc:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <_tc_init_irq_param+0x24>)
    2dc0:	6019      	str	r1, [r3, #0]
    2dc2:	e7f8      	b.n	2db6 <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    2dc4:	4b03      	ldr	r3, [pc, #12]	; (2dd4 <_tc_init_irq_param+0x24>)
    2dc6:	6059      	str	r1, [r3, #4]
}
    2dc8:	e7f8      	b.n	2dbc <_tc_init_irq_param+0xc>
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	42002c00 	.word	0x42002c00
    2dd0:	42003000 	.word	0x42003000
    2dd4:	200006b8 	.word	0x200006b8

00002dd8 <get_tc_index>:
{
    2dd8:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    2dda:	4b0e      	ldr	r3, [pc, #56]	; (2e14 <get_tc_index+0x3c>)
    2ddc:	4798      	blx	r3
    2dde:	3003      	adds	r0, #3
    2de0:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2de2:	2300      	movs	r3, #0
    2de4:	2b01      	cmp	r3, #1
    2de6:	d80b      	bhi.n	2e00 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    2de8:	009a      	lsls	r2, r3, #2
    2dea:	18d2      	adds	r2, r2, r3
    2dec:	0091      	lsls	r1, r2, #2
    2dee:	4a0a      	ldr	r2, [pc, #40]	; (2e18 <get_tc_index+0x40>)
    2df0:	5c8a      	ldrb	r2, [r1, r2]
    2df2:	4290      	cmp	r0, r2
    2df4:	d002      	beq.n	2dfc <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2df6:	3301      	adds	r3, #1
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	e7f3      	b.n	2de4 <get_tc_index+0xc>
			return i;
    2dfc:	b258      	sxtb	r0, r3
    2dfe:	e007      	b.n	2e10 <get_tc_index+0x38>
	ASSERT(false);
    2e00:	22a4      	movs	r2, #164	; 0xa4
    2e02:	0052      	lsls	r2, r2, #1
    2e04:	4905      	ldr	r1, [pc, #20]	; (2e1c <get_tc_index+0x44>)
    2e06:	2000      	movs	r0, #0
    2e08:	4b05      	ldr	r3, [pc, #20]	; (2e20 <get_tc_index+0x48>)
    2e0a:	4798      	blx	r3
	return -1;
    2e0c:	2001      	movs	r0, #1
    2e0e:	4240      	negs	r0, r0
}
    2e10:	bd10      	pop	{r4, pc}
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	00002da1 	.word	0x00002da1
    2e18:	0000763c 	.word	0x0000763c
    2e1c:	00007664 	.word	0x00007664
    2e20:	00002175 	.word	0x00002175

00002e24 <_timer_init>:
{
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	0006      	movs	r6, r0
    2e28:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    2e2a:	0008      	movs	r0, r1
    2e2c:	4b3f      	ldr	r3, [pc, #252]	; (2f2c <_timer_init+0x108>)
    2e2e:	4798      	blx	r3
    2e30:	0005      	movs	r5, r0
	device->hw = hw;
    2e32:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2e34:	228d      	movs	r2, #141	; 0x8d
    2e36:	493e      	ldr	r1, [pc, #248]	; (2f30 <_timer_init+0x10c>)
    2e38:	2001      	movs	r0, #1
    2e3a:	4b3e      	ldr	r3, [pc, #248]	; (2f34 <_timer_init+0x110>)
    2e3c:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2e3e:	7be3      	ldrb	r3, [r4, #15]
    2e40:	09db      	lsrs	r3, r3, #7
    2e42:	d1fc      	bne.n	2e3e <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2e44:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2e46:	079b      	lsls	r3, r3, #30
    2e48:	d504      	bpl.n	2e54 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e4a:	2300      	movs	r3, #0
    2e4c:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2e4e:	7be3      	ldrb	r3, [r4, #15]
    2e50:	09db      	lsrs	r3, r3, #7
    2e52:	d1fc      	bne.n	2e4e <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e54:	2301      	movs	r3, #1
    2e56:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2e58:	7be3      	ldrb	r3, [r4, #15]
    2e5a:	09db      	lsrs	r3, r3, #7
    2e5c:	d1fc      	bne.n	2e58 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2e5e:	00aa      	lsls	r2, r5, #2
    2e60:	1952      	adds	r2, r2, r5
    2e62:	0091      	lsls	r1, r2, #2
    2e64:	4b34      	ldr	r3, [pc, #208]	; (2f38 <_timer_init+0x114>)
    2e66:	185b      	adds	r3, r3, r1
    2e68:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2e6a:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2e6c:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2e6e:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2e70:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2e72:	8163      	strh	r3, [r4, #10]
    2e74:	230c      	movs	r3, #12
    2e76:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2e78:	2b08      	cmp	r3, #8
    2e7a:	d039      	beq.n	2ef0 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d143      	bne.n	2f08 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2e80:	4a2d      	ldr	r2, [pc, #180]	; (2f38 <_timer_init+0x114>)
    2e82:	00ab      	lsls	r3, r5, #2
    2e84:	1958      	adds	r0, r3, r5
    2e86:	0081      	lsls	r1, r0, #2
    2e88:	0008      	movs	r0, r1
    2e8a:	1851      	adds	r1, r2, r1
    2e8c:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2e8e:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2e90:	1812      	adds	r2, r2, r0
    2e92:	8a13      	ldrh	r3, [r2, #16]
    2e94:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2e96:	2301      	movs	r3, #1
    2e98:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    2e9a:	0031      	movs	r1, r6
    2e9c:	0020      	movs	r0, r4
    2e9e:	4b27      	ldr	r3, [pc, #156]	; (2f3c <_timer_init+0x118>)
    2ea0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2ea2:	0020      	movs	r0, r4
    2ea4:	4b26      	ldr	r3, [pc, #152]	; (2f40 <_timer_init+0x11c>)
    2ea6:	4798      	blx	r3
    2ea8:	3012      	adds	r0, #18
    2eaa:	b2c0      	uxtb	r0, r0
    2eac:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2eae:	2b00      	cmp	r3, #0
    2eb0:	db0a      	blt.n	2ec8 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2eb2:	211f      	movs	r1, #31
    2eb4:	4001      	ands	r1, r0
    2eb6:	2201      	movs	r2, #1
    2eb8:	408a      	lsls	r2, r1
    2eba:	2180      	movs	r1, #128	; 0x80
    2ebc:	4c21      	ldr	r4, [pc, #132]	; (2f44 <_timer_init+0x120>)
    2ebe:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ec4:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2ec8:	2b00      	cmp	r3, #0
    2eca:	db07      	blt.n	2edc <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ecc:	211f      	movs	r1, #31
    2ece:	4001      	ands	r1, r0
    2ed0:	2201      	movs	r2, #1
    2ed2:	408a      	lsls	r2, r1
    2ed4:	21c0      	movs	r1, #192	; 0xc0
    2ed6:	0049      	lsls	r1, r1, #1
    2ed8:	4c1a      	ldr	r4, [pc, #104]	; (2f44 <_timer_init+0x120>)
    2eda:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2edc:	2b00      	cmp	r3, #0
    2ede:	db05      	blt.n	2eec <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ee0:	231f      	movs	r3, #31
    2ee2:	4018      	ands	r0, r3
    2ee4:	3b1e      	subs	r3, #30
    2ee6:	4083      	lsls	r3, r0
    2ee8:	4a16      	ldr	r2, [pc, #88]	; (2f44 <_timer_init+0x120>)
    2eea:	6013      	str	r3, [r2, #0]
}
    2eec:	2000      	movs	r0, #0
    2eee:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2ef0:	4a11      	ldr	r2, [pc, #68]	; (2f38 <_timer_init+0x114>)
    2ef2:	00ab      	lsls	r3, r5, #2
    2ef4:	1958      	adds	r0, r3, r5
    2ef6:	0081      	lsls	r1, r0, #2
    2ef8:	0008      	movs	r0, r1
    2efa:	1851      	adds	r1, r2, r1
    2efc:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2efe:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2f00:	1812      	adds	r2, r2, r0
    2f02:	6913      	ldr	r3, [r2, #16]
    2f04:	61e3      	str	r3, [r4, #28]
    2f06:	e7c6      	b.n	2e96 <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2f08:	2b04      	cmp	r3, #4
    2f0a:	d1c4      	bne.n	2e96 <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2f0c:	490a      	ldr	r1, [pc, #40]	; (2f38 <_timer_init+0x114>)
    2f0e:	00ab      	lsls	r3, r5, #2
    2f10:	1958      	adds	r0, r3, r5
    2f12:	0082      	lsls	r2, r0, #2
    2f14:	188a      	adds	r2, r1, r2
    2f16:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2f18:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2f1a:	7c12      	ldrb	r2, [r2, #16]
    2f1c:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2f1e:	195d      	adds	r5, r3, r5
    2f20:	00ab      	lsls	r3, r5, #2
    2f22:	18c9      	adds	r1, r1, r3
    2f24:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2f26:	7523      	strb	r3, [r4, #20]
    2f28:	e7b5      	b.n	2e96 <_timer_init+0x72>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	00002dd9 	.word	0x00002dd9
    2f30:	00007664 	.word	0x00007664
    2f34:	00002175 	.word	0x00002175
    2f38:	0000763c 	.word	0x0000763c
    2f3c:	00002db1 	.word	0x00002db1
    2f40:	00002da1 	.word	0x00002da1
    2f44:	e000e100 	.word	0xe000e100

00002f48 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2f48:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2f4a:	8813      	ldrh	r3, [r2, #0]
    2f4c:	2102      	movs	r1, #2
    2f4e:	430b      	orrs	r3, r1
    2f50:	b29b      	uxth	r3, r3
    2f52:	8013      	strh	r3, [r2, #0]
}
    2f54:	4770      	bx	lr

00002f56 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2f56:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2f58:	8813      	ldrh	r3, [r2, #0]
    2f5a:	2102      	movs	r1, #2
    2f5c:	438b      	bics	r3, r1
    2f5e:	8013      	strh	r3, [r2, #0]
}
    2f60:	4770      	bx	lr

00002f62 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2f62:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2f64:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2f66:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    2f68:	2001      	movs	r0, #1
    2f6a:	4018      	ands	r0, r3
}
    2f6c:	4770      	bx	lr

00002f6e <_tc_get_timer>:
}
    2f6e:	2000      	movs	r0, #0
    2f70:	4770      	bx	lr
	...

00002f74 <_timer_set_irq>:
{
    2f74:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    2f76:	68c0      	ldr	r0, [r0, #12]
    2f78:	4b03      	ldr	r3, [pc, #12]	; (2f88 <_timer_set_irq+0x14>)
    2f7a:	4798      	blx	r3
    2f7c:	3012      	adds	r0, #18
    2f7e:	b2c0      	uxtb	r0, r0
    2f80:	4b02      	ldr	r3, [pc, #8]	; (2f8c <_timer_set_irq+0x18>)
    2f82:	4798      	blx	r3
}
    2f84:	bd10      	pop	{r4, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	00002da1 	.word	0x00002da1
    2f8c:	00002349 	.word	0x00002349

00002f90 <TC3_Handler>:
{
    2f90:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    2f92:	4b02      	ldr	r3, [pc, #8]	; (2f9c <TC3_Handler+0xc>)
    2f94:	6818      	ldr	r0, [r3, #0]
    2f96:	4b02      	ldr	r3, [pc, #8]	; (2fa0 <TC3_Handler+0x10>)
    2f98:	4798      	blx	r3
}
    2f9a:	bd10      	pop	{r4, pc}
    2f9c:	200006b8 	.word	0x200006b8
    2fa0:	00002d89 	.word	0x00002d89

00002fa4 <TC4_Handler>:
{
    2fa4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    2fa6:	4b02      	ldr	r3, [pc, #8]	; (2fb0 <TC4_Handler+0xc>)
    2fa8:	6858      	ldr	r0, [r3, #4]
    2faa:	4b02      	ldr	r3, [pc, #8]	; (2fb4 <TC4_Handler+0x10>)
    2fac:	4798      	blx	r3
}
    2fae:	bd10      	pop	{r4, pc}
    2fb0:	200006b8 	.word	0x200006b8
    2fb4:	00002d89 	.word	0x00002d89

00002fb8 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2fb8:	2000      	movs	r0, #0
    2fba:	4770      	bx	lr

00002fbc <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    2fbc:	4b12      	ldr	r3, [pc, #72]	; (3008 <_usb_load_calib+0x4c>)
    2fbe:	681a      	ldr	r2, [r3, #0]
    2fc0:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    2fc2:	211f      	movs	r1, #31
    2fc4:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    2fc6:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    2fc8:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    2fca:	0dd0      	lsrs	r0, r2, #23
    2fcc:	2207      	movs	r2, #7
    2fce:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    2fd0:	2b1f      	cmp	r3, #31
    2fd2:	d012      	beq.n	2ffa <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    2fd4:	291f      	cmp	r1, #31
    2fd6:	d012      	beq.n	2ffe <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    2fd8:	2a07      	cmp	r2, #7
    2fda:	d012      	beq.n	3002 <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    2fdc:	019b      	lsls	r3, r3, #6
    2fde:	430b      	orrs	r3, r1
    2fe0:	0312      	lsls	r2, r2, #12
    2fe2:	4313      	orrs	r3, r2
    2fe4:	4a09      	ldr	r2, [pc, #36]	; (300c <_usb_load_calib+0x50>)
    2fe6:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    2fe8:	78d3      	ldrb	r3, [r2, #3]
    2fea:	2103      	movs	r1, #3
    2fec:	430b      	orrs	r3, r1
    2fee:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    2ff0:	78d3      	ldrb	r3, [r2, #3]
    2ff2:	210c      	movs	r1, #12
    2ff4:	430b      	orrs	r3, r1
    2ff6:	70d3      	strb	r3, [r2, #3]
}
    2ff8:	4770      	bx	lr
		pad_transn = 5;
    2ffa:	3b1a      	subs	r3, #26
    2ffc:	e7ea      	b.n	2fd4 <_usb_load_calib+0x18>
		pad_transp = 29;
    2ffe:	3902      	subs	r1, #2
    3000:	e7ea      	b.n	2fd8 <_usb_load_calib+0x1c>
		pad_trim = 5;
    3002:	3a02      	subs	r2, #2
    3004:	e7ea      	b.n	2fdc <_usb_load_calib+0x20>
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	00806024 	.word	0x00806024
    300c:	41005000 	.word	0x41005000

00003010 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3010:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3012:	7c83      	ldrb	r3, [r0, #18]
    3014:	220f      	movs	r2, #15
    3016:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3018:	7cc1      	ldrb	r1, [r0, #19]
    301a:	3a08      	subs	r2, #8
    301c:	400a      	ands	r2, r1

	if (!is_ctrl) {
    301e:	2a01      	cmp	r2, #1
    3020:	d00d      	beq.n	303e <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3022:	001a      	movs	r2, r3
    3024:	3208      	adds	r2, #8
    3026:	0152      	lsls	r2, r2, #5
    3028:	4919      	ldr	r1, [pc, #100]	; (3090 <_usb_d_dev_handle_setup+0x80>)
    302a:	468c      	mov	ip, r1
    302c:	4462      	add	r2, ip
    302e:	2110      	movs	r1, #16
    3030:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3032:	015b      	lsls	r3, r3, #5
    3034:	4a17      	ldr	r2, [pc, #92]	; (3094 <_usb_d_dev_handle_setup+0x84>)
    3036:	4694      	mov	ip, r2
    3038:	4463      	add	r3, ip
    303a:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    303c:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    303e:	064a      	lsls	r2, r1, #25
    3040:	d50c      	bpl.n	305c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    3042:	7cc2      	ldrb	r2, [r0, #19]
    3044:	2140      	movs	r1, #64	; 0x40
    3046:	438a      	bics	r2, r1
    3048:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    304a:	001a      	movs	r2, r3
    304c:	3208      	adds	r2, #8
    304e:	0152      	lsls	r2, r2, #5
    3050:	4c0f      	ldr	r4, [pc, #60]	; (3090 <_usb_d_dev_handle_setup+0x80>)
    3052:	46a4      	mov	ip, r4
    3054:	4462      	add	r2, ip
    3056:	2480      	movs	r4, #128	; 0x80
    3058:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    305a:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    305c:	7cc2      	ldrb	r2, [r0, #19]
    305e:	2108      	movs	r1, #8
    3060:	438a      	bics	r2, r1
    3062:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    3064:	015a      	lsls	r2, r3, #5
    3066:	490c      	ldr	r1, [pc, #48]	; (3098 <_usb_d_dev_handle_setup+0x88>)
    3068:	1889      	adds	r1, r1, r2
    306a:	2400      	movs	r4, #0
    306c:	728c      	strb	r4, [r1, #10]
    306e:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3070:	3308      	adds	r3, #8
    3072:	015b      	lsls	r3, r3, #5
    3074:	4906      	ldr	r1, [pc, #24]	; (3090 <_usb_d_dev_handle_setup+0x80>)
    3076:	468c      	mov	ip, r1
    3078:	4463      	add	r3, ip
    307a:	216f      	movs	r1, #111	; 0x6f
    307c:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    307e:	4b05      	ldr	r3, [pc, #20]	; (3094 <_usb_d_dev_handle_setup+0x84>)
    3080:	469c      	mov	ip, r3
    3082:	4462      	add	r2, ip
    3084:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    3086:	4b05      	ldr	r3, [pc, #20]	; (309c <_usb_d_dev_handle_setup+0x8c>)
    3088:	689b      	ldr	r3, [r3, #8]
    308a:	7c80      	ldrb	r0, [r0, #18]
    308c:	4798      	blx	r3
    308e:	e7d5      	b.n	303c <_usb_d_dev_handle_setup+0x2c>
    3090:	41005000 	.word	0x41005000
    3094:	41005108 	.word	0x41005108
    3098:	200006c0 	.word	0x200006c0
    309c:	200007c0 	.word	0x200007c0

000030a0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    30a0:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    30a2:	7c82      	ldrb	r2, [r0, #18]
    30a4:	230f      	movs	r3, #15
    30a6:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    30a8:	2220      	movs	r2, #32
    30aa:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    30ac:	b2d2      	uxtb	r2, r2
    30ae:	015b      	lsls	r3, r3, #5
    30b0:	4905      	ldr	r1, [pc, #20]	; (30c8 <_usb_d_dev_handle_stall+0x28>)
    30b2:	468c      	mov	ip, r1
    30b4:	4463      	add	r3, ip
    30b6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    30b8:	4b04      	ldr	r3, [pc, #16]	; (30cc <_usb_d_dev_handle_stall+0x2c>)
    30ba:	691b      	ldr	r3, [r3, #16]
    30bc:	6882      	ldr	r2, [r0, #8]
    30be:	7c80      	ldrb	r0, [r0, #18]
    30c0:	2101      	movs	r1, #1
    30c2:	4798      	blx	r3
}
    30c4:	bd10      	pop	{r4, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	41005108 	.word	0x41005108
    30cc:	200007c0 	.word	0x200007c0

000030d0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    30d0:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    30d2:	7c83      	ldrb	r3, [r0, #18]
    30d4:	2bff      	cmp	r3, #255	; 0xff
    30d6:	d002      	beq.n	30de <_usb_d_dev_trans_done+0xe>
    30d8:	7cc2      	ldrb	r2, [r0, #19]
    30da:	0652      	lsls	r2, r2, #25
    30dc:	d400      	bmi.n	30e0 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    30de:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    30e0:	7cc2      	ldrb	r2, [r0, #19]
    30e2:	2440      	movs	r4, #64	; 0x40
    30e4:	43a2      	bics	r2, r4
    30e6:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    30e8:	4a02      	ldr	r2, [pc, #8]	; (30f4 <_usb_d_dev_trans_done+0x24>)
    30ea:	6914      	ldr	r4, [r2, #16]
    30ec:	6882      	ldr	r2, [r0, #8]
    30ee:	0018      	movs	r0, r3
    30f0:	47a0      	blx	r4
    30f2:	e7f4      	b.n	30de <_usb_d_dev_trans_done+0xe>
    30f4:	200007c0 	.word	0x200007c0

000030f8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    30f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30fa:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    30fc:	7c84      	ldrb	r4, [r0, #18]
    30fe:	230f      	movs	r3, #15
    3100:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3102:	4d18      	ldr	r5, [pc, #96]	; (3164 <_usb_d_dev_trans_stop+0x6c>)
    3104:	882e      	ldrh	r6, [r5, #0]
    3106:	ad01      	add	r5, sp, #4
    3108:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    310a:	2cff      	cmp	r4, #255	; 0xff
    310c:	d01e      	beq.n	314c <_usb_d_dev_trans_stop+0x54>
    310e:	7cc4      	ldrb	r4, [r0, #19]
    3110:	0664      	lsls	r4, r4, #25
    3112:	d51b      	bpl.n	314c <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    3114:	2900      	cmp	r1, #0
    3116:	d01b      	beq.n	3150 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3118:	001c      	movs	r4, r3
    311a:	3408      	adds	r4, #8
    311c:	0164      	lsls	r4, r4, #5
    311e:	4d12      	ldr	r5, [pc, #72]	; (3168 <_usb_d_dev_trans_stop+0x70>)
    3120:	46ac      	mov	ip, r5
    3122:	4464      	add	r4, ip
    3124:	2580      	movs	r5, #128	; 0x80
    3126:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3128:	ad01      	add	r5, sp, #4
    312a:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    312c:	001c      	movs	r4, r3
    312e:	3408      	adds	r4, #8
    3130:	0164      	lsls	r4, r4, #5
    3132:	4f0d      	ldr	r7, [pc, #52]	; (3168 <_usb_d_dev_trans_stop+0x70>)
    3134:	46bc      	mov	ip, r7
    3136:	4464      	add	r4, ip
    3138:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    313a:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    313c:	015b      	lsls	r3, r3, #5
    313e:	4c0b      	ldr	r4, [pc, #44]	; (316c <_usb_d_dev_trans_stop+0x74>)
    3140:	46a4      	mov	ip, r4
    3142:	4463      	add	r3, ip
    3144:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    3146:	0011      	movs	r1, r2
    3148:	4b09      	ldr	r3, [pc, #36]	; (3170 <_usb_d_dev_trans_stop+0x78>)
    314a:	4798      	blx	r3
}
    314c:	b003      	add	sp, #12
    314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3150:	001c      	movs	r4, r3
    3152:	3408      	adds	r4, #8
    3154:	0164      	lsls	r4, r4, #5
    3156:	4d04      	ldr	r5, [pc, #16]	; (3168 <_usb_d_dev_trans_stop+0x70>)
    3158:	46ac      	mov	ip, r5
    315a:	4464      	add	r4, ip
    315c:	2540      	movs	r5, #64	; 0x40
    315e:	7165      	strb	r5, [r4, #5]
    3160:	e7e2      	b.n	3128 <_usb_d_dev_trans_stop+0x30>
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	00007678 	.word	0x00007678
    3168:	41005000 	.word	0x41005000
    316c:	41005108 	.word	0x41005108
    3170:	000030d1 	.word	0x000030d1

00003174 <_usb_d_dev_handle_trfail>:
{
    3174:	b5f0      	push	{r4, r5, r6, r7, lr}
    3176:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    3178:	7c83      	ldrb	r3, [r0, #18]
    317a:	220f      	movs	r2, #15
    317c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    317e:	4a3c      	ldr	r2, [pc, #240]	; (3270 <_usb_d_dev_handle_trfail+0xfc>)
    3180:	8894      	ldrh	r4, [r2, #4]
    3182:	aa01      	add	r2, sp, #4
    3184:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    3186:	015a      	lsls	r2, r3, #5
    3188:	4c3a      	ldr	r4, [pc, #232]	; (3274 <_usb_d_dev_handle_trfail+0x100>)
    318a:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    318c:	2900      	cmp	r1, #0
    318e:	d033      	beq.n	31f8 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3190:	001a      	movs	r2, r3
    3192:	3208      	adds	r2, #8
    3194:	0152      	lsls	r2, r2, #5
    3196:	4d38      	ldr	r5, [pc, #224]	; (3278 <_usb_d_dev_handle_trfail+0x104>)
    3198:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    319a:	0912      	lsrs	r2, r2, #4
    319c:	2507      	movs	r5, #7
    319e:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    31a0:	7cc2      	ldrb	r2, [r0, #19]
    31a2:	2607      	movs	r6, #7
    31a4:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    31a6:	010a      	lsls	r2, r1, #4
    31a8:	18a2      	adds	r2, r4, r2
    31aa:	7a94      	ldrb	r4, [r2, #10]
    31ac:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    31ae:	2d02      	cmp	r5, #2
    31b0:	d02a      	beq.n	3208 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    31b2:	07a4      	lsls	r4, r4, #30
    31b4:	d544      	bpl.n	3240 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    31b6:	7a94      	ldrb	r4, [r2, #10]
    31b8:	2502      	movs	r5, #2
    31ba:	43ac      	bics	r4, r5
    31bc:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    31be:	ac01      	add	r4, sp, #4
    31c0:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    31c2:	001a      	movs	r2, r3
    31c4:	3208      	adds	r2, #8
    31c6:	0152      	lsls	r2, r2, #5
    31c8:	4f2b      	ldr	r7, [pc, #172]	; (3278 <_usb_d_dev_handle_trfail+0x104>)
    31ca:	46bc      	mov	ip, r7
    31cc:	4462      	add	r2, ip
    31ce:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    31d0:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    31d2:	015b      	lsls	r3, r3, #5
    31d4:	4c29      	ldr	r4, [pc, #164]	; (327c <_usb_d_dev_handle_trfail+0x108>)
    31d6:	46a4      	mov	ip, r4
    31d8:	4463      	add	r3, ip
    31da:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    31dc:	2e01      	cmp	r6, #1
    31de:	d145      	bne.n	326c <_usb_d_dev_handle_trfail+0xf8>
    31e0:	7cc3      	ldrb	r3, [r0, #19]
    31e2:	065b      	lsls	r3, r3, #25
    31e4:	d542      	bpl.n	326c <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    31e6:	7cc3      	ldrb	r3, [r0, #19]
    31e8:	09db      	lsrs	r3, r3, #7
    31ea:	4299      	cmp	r1, r3
    31ec:	d03e      	beq.n	326c <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    31ee:	2200      	movs	r2, #0
    31f0:	0019      	movs	r1, r3
    31f2:	4b23      	ldr	r3, [pc, #140]	; (3280 <_usb_d_dev_handle_trfail+0x10c>)
    31f4:	4798      	blx	r3
    31f6:	e039      	b.n	326c <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    31f8:	001a      	movs	r2, r3
    31fa:	3208      	adds	r2, #8
    31fc:	0152      	lsls	r2, r2, #5
    31fe:	4d1e      	ldr	r5, [pc, #120]	; (3278 <_usb_d_dev_handle_trfail+0x104>)
    3200:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    3202:	2207      	movs	r2, #7
    3204:	4015      	ands	r5, r2
    3206:	e7cb      	b.n	31a0 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3208:	07e5      	lsls	r5, r4, #31
    320a:	d5d2      	bpl.n	31b2 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    320c:	7a94      	ldrb	r4, [r2, #10]
    320e:	2501      	movs	r5, #1
    3210:	43ac      	bics	r4, r5
    3212:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3214:	ac01      	add	r4, sp, #4
    3216:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3218:	001a      	movs	r2, r3
    321a:	3208      	adds	r2, #8
    321c:	0152      	lsls	r2, r2, #5
    321e:	4e16      	ldr	r6, [pc, #88]	; (3278 <_usb_d_dev_handle_trfail+0x104>)
    3220:	46b4      	mov	ip, r6
    3222:	4462      	add	r2, ip
    3224:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3226:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3228:	015b      	lsls	r3, r3, #5
    322a:	4c14      	ldr	r4, [pc, #80]	; (327c <_usb_d_dev_handle_trfail+0x108>)
    322c:	46a4      	mov	ip, r4
    322e:	4463      	add	r3, ip
    3230:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3232:	1e4b      	subs	r3, r1, #1
    3234:	4199      	sbcs	r1, r3
    3236:	b2c9      	uxtb	r1, r1
    3238:	2204      	movs	r2, #4
    323a:	4b11      	ldr	r3, [pc, #68]	; (3280 <_usb_d_dev_handle_trfail+0x10c>)
    323c:	4798      	blx	r3
    323e:	e015      	b.n	326c <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    3240:	005a      	lsls	r2, r3, #1
    3242:	1852      	adds	r2, r2, r1
    3244:	0112      	lsls	r2, r2, #4
    3246:	480b      	ldr	r0, [pc, #44]	; (3274 <_usb_d_dev_handle_trfail+0x100>)
    3248:	1882      	adds	r2, r0, r2
    324a:	2000      	movs	r0, #0
    324c:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    324e:	a801      	add	r0, sp, #4
    3250:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3252:	001a      	movs	r2, r3
    3254:	3208      	adds	r2, #8
    3256:	0152      	lsls	r2, r2, #5
    3258:	4d07      	ldr	r5, [pc, #28]	; (3278 <_usb_d_dev_handle_trfail+0x104>)
    325a:	46ac      	mov	ip, r5
    325c:	4462      	add	r2, ip
    325e:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3260:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3262:	015b      	lsls	r3, r3, #5
    3264:	4905      	ldr	r1, [pc, #20]	; (327c <_usb_d_dev_handle_trfail+0x108>)
    3266:	468c      	mov	ip, r1
    3268:	4463      	add	r3, ip
    326a:	701a      	strb	r2, [r3, #0]
}
    326c:	b003      	add	sp, #12
    326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3270:	00007678 	.word	0x00007678
    3274:	200006c0 	.word	0x200006c0
    3278:	41005000 	.word	0x41005000
    327c:	41005108 	.word	0x41005108
    3280:	000030f9 	.word	0x000030f9

00003284 <_usb_d_dev_reset_epts>:
{
    3284:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    3286:	2400      	movs	r4, #0
    3288:	e017      	b.n	32ba <_usb_d_dev_reset_epts+0x36>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    328a:	4d10      	ldr	r5, [pc, #64]	; (32cc <_usb_d_dev_reset_epts+0x48>)
    328c:	00a6      	lsls	r6, r4, #2
    328e:	1933      	adds	r3, r6, r4
    3290:	0098      	lsls	r0, r3, #2
    3292:	3010      	adds	r0, #16
    3294:	1828      	adds	r0, r5, r0
    3296:	3004      	adds	r0, #4
    3298:	2103      	movs	r1, #3
    329a:	4b0d      	ldr	r3, [pc, #52]	; (32d0 <_usb_d_dev_reset_epts+0x4c>)
    329c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    329e:	1932      	adds	r2, r6, r4
    32a0:	0093      	lsls	r3, r2, #2
    32a2:	18eb      	adds	r3, r5, r3
    32a4:	3326      	adds	r3, #38	; 0x26
    32a6:	22ff      	movs	r2, #255	; 0xff
    32a8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    32aa:	1936      	adds	r6, r6, r4
    32ac:	00b3      	lsls	r3, r6, #2
    32ae:	18ed      	adds	r5, r5, r3
    32b0:	3527      	adds	r5, #39	; 0x27
    32b2:	2300      	movs	r3, #0
    32b4:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    32b6:	3401      	adds	r4, #1
    32b8:	b2e4      	uxtb	r4, r4
    32ba:	2c10      	cmp	r4, #16
    32bc:	d9e5      	bls.n	328a <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    32be:	2280      	movs	r2, #128	; 0x80
    32c0:	0052      	lsls	r2, r2, #1
    32c2:	2100      	movs	r1, #0
    32c4:	4803      	ldr	r0, [pc, #12]	; (32d4 <_usb_d_dev_reset_epts+0x50>)
    32c6:	4b04      	ldr	r3, [pc, #16]	; (32d8 <_usb_d_dev_reset_epts+0x54>)
    32c8:	4798      	blx	r3
}
    32ca:	bd70      	pop	{r4, r5, r6, pc}
    32cc:	200007c0 	.word	0x200007c0
    32d0:	000030d1 	.word	0x000030d1
    32d4:	200006c0 	.word	0x200006c0
    32d8:	000071e9 	.word	0x000071e9

000032dc <_usb_d_dev_in_next>:
{
    32dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32de:	46c6      	mov	lr, r8
    32e0:	b500      	push	{lr}
    32e2:	0005      	movs	r5, r0
    32e4:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    32e6:	7c83      	ldrb	r3, [r0, #18]
    32e8:	240f      	movs	r4, #15
    32ea:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    32ec:	0162      	lsls	r2, r4, #5
    32ee:	4b56      	ldr	r3, [pc, #344]	; (3448 <_usb_d_dev_in_next+0x16c>)
    32f0:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    32f2:	2900      	cmp	r1, #0
    32f4:	d058      	beq.n	33a8 <_usb_d_dev_in_next+0xcc>
    32f6:	6959      	ldr	r1, [r3, #20]
    32f8:	0489      	lsls	r1, r1, #18
    32fa:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    32fc:	8a2b      	ldrh	r3, [r5, #16]
    32fe:	4a53      	ldr	r2, [pc, #332]	; (344c <_usb_d_dev_in_next+0x170>)
    3300:	4293      	cmp	r3, r2
    3302:	d053      	beq.n	33ac <_usb_d_dev_in_next+0xd0>
    3304:	3b01      	subs	r3, #1
    3306:	b21b      	sxth	r3, r3
    3308:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    330a:	7cea      	ldrb	r2, [r5, #19]
    330c:	2707      	movs	r7, #7
    330e:	4017      	ands	r7, r2
	if (isr) {
    3310:	2e00      	cmp	r6, #0
    3312:	d007      	beq.n	3324 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3314:	0022      	movs	r2, r4
    3316:	3208      	adds	r2, #8
    3318:	0152      	lsls	r2, r2, #5
    331a:	484d      	ldr	r0, [pc, #308]	; (3450 <_usb_d_dev_in_next+0x174>)
    331c:	4684      	mov	ip, r0
    331e:	4462      	add	r2, ip
    3320:	2002      	movs	r0, #2
    3322:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    3324:	68aa      	ldr	r2, [r5, #8]
    3326:	4694      	mov	ip, r2
    3328:	4461      	add	r1, ip
    332a:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    332c:	686a      	ldr	r2, [r5, #4]
    332e:	4291      	cmp	r1, r2
    3330:	d24e      	bcs.n	33d0 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    3332:	b292      	uxth	r2, r2
    3334:	b28b      	uxth	r3, r1
    3336:	1ad2      	subs	r2, r2, r3
    3338:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    333a:	7ceb      	ldrb	r3, [r5, #19]
    333c:	069b      	lsls	r3, r3, #26
    333e:	d537      	bpl.n	33b0 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    3340:	8a2b      	ldrh	r3, [r5, #16]
    3342:	4698      	mov	r8, r3
    3344:	429a      	cmp	r2, r3
    3346:	d800      	bhi.n	334a <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    3348:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    334a:	682b      	ldr	r3, [r5, #0]
    334c:	469c      	mov	ip, r3
    334e:	4461      	add	r1, ip
    3350:	4642      	mov	r2, r8
    3352:	68e8      	ldr	r0, [r5, #12]
    3354:	4b3f      	ldr	r3, [pc, #252]	; (3454 <_usb_d_dev_in_next+0x178>)
    3356:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    3358:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    335a:	0162      	lsls	r2, r4, #5
    335c:	4b3a      	ldr	r3, [pc, #232]	; (3448 <_usb_d_dev_in_next+0x16c>)
    335e:	189b      	adds	r3, r3, r2
    3360:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    3362:	0163      	lsls	r3, r4, #5
    3364:	4a38      	ldr	r2, [pc, #224]	; (3448 <_usb_d_dev_in_next+0x16c>)
    3366:	18d2      	adds	r2, r2, r3
    3368:	6951      	ldr	r1, [r2, #20]
    336a:	4643      	mov	r3, r8
    336c:	049b      	lsls	r3, r3, #18
    336e:	0c9b      	lsrs	r3, r3, #18
    3370:	0b89      	lsrs	r1, r1, #14
    3372:	0389      	lsls	r1, r1, #14
    3374:	430b      	orrs	r3, r1
    3376:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    3378:	6951      	ldr	r1, [r2, #20]
    337a:	4b37      	ldr	r3, [pc, #220]	; (3458 <_usb_d_dev_in_next+0x17c>)
    337c:	400b      	ands	r3, r1
    337e:	6153      	str	r3, [r2, #20]
	if (!isr) {
    3380:	2e00      	cmp	r6, #0
    3382:	d107      	bne.n	3394 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    3384:	2f01      	cmp	r7, #1
    3386:	d05d      	beq.n	3444 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    3388:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    338a:	0163      	lsls	r3, r4, #5
    338c:	4933      	ldr	r1, [pc, #204]	; (345c <_usb_d_dev_in_next+0x180>)
    338e:	468c      	mov	ip, r1
    3390:	4463      	add	r3, ip
    3392:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3394:	3408      	adds	r4, #8
    3396:	0164      	lsls	r4, r4, #5
    3398:	4b2d      	ldr	r3, [pc, #180]	; (3450 <_usb_d_dev_in_next+0x174>)
    339a:	469c      	mov	ip, r3
    339c:	4464      	add	r4, ip
    339e:	2380      	movs	r3, #128	; 0x80
    33a0:	7163      	strb	r3, [r4, #5]
}
    33a2:	bc04      	pop	{r2}
    33a4:	4690      	mov	r8, r2
    33a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    33a8:	2100      	movs	r1, #0
    33aa:	e7a7      	b.n	32fc <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    33ac:	b21b      	sxth	r3, r3
    33ae:	e7ab      	b.n	3308 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    33b0:	2380      	movs	r3, #128	; 0x80
    33b2:	019b      	lsls	r3, r3, #6
    33b4:	429a      	cmp	r2, r3
    33b6:	d807      	bhi.n	33c8 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    33b8:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    33ba:	682b      	ldr	r3, [r5, #0]
    33bc:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    33be:	0162      	lsls	r2, r4, #5
    33c0:	4b21      	ldr	r3, [pc, #132]	; (3448 <_usb_d_dev_in_next+0x16c>)
    33c2:	189b      	adds	r3, r3, r2
    33c4:	6119      	str	r1, [r3, #16]
    33c6:	e7cc      	b.n	3362 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    33c8:	2380      	movs	r3, #128	; 0x80
    33ca:	019b      	lsls	r3, r3, #6
    33cc:	4698      	mov	r8, r3
    33ce:	e7f4      	b.n	33ba <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    33d0:	7cea      	ldrb	r2, [r5, #19]
    33d2:	06d2      	lsls	r2, r2, #27
    33d4:	d50f      	bpl.n	33f6 <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    33d6:	7ceb      	ldrb	r3, [r5, #19]
    33d8:	2210      	movs	r2, #16
    33da:	4393      	bics	r3, r2
    33dc:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    33de:	0162      	lsls	r2, r4, #5
    33e0:	4b19      	ldr	r3, [pc, #100]	; (3448 <_usb_d_dev_in_next+0x16c>)
    33e2:	189b      	adds	r3, r3, r2
    33e4:	695a      	ldr	r2, [r3, #20]
    33e6:	0b92      	lsrs	r2, r2, #14
    33e8:	0391      	lsls	r1, r2, #14
    33ea:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    33ec:	6959      	ldr	r1, [r3, #20]
    33ee:	4a1a      	ldr	r2, [pc, #104]	; (3458 <_usb_d_dev_in_next+0x17c>)
    33f0:	400a      	ands	r2, r1
    33f2:	615a      	str	r2, [r3, #20]
    33f4:	e7c4      	b.n	3380 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    33f6:	2f01      	cmp	r7, #1
    33f8:	d00d      	beq.n	3416 <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    33fa:	0164      	lsls	r4, r4, #5
    33fc:	4a18      	ldr	r2, [pc, #96]	; (3460 <_usb_d_dev_in_next+0x184>)
    33fe:	4694      	mov	ip, r2
    3400:	4464      	add	r4, ip
    3402:	224a      	movs	r2, #74	; 0x4a
    3404:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    3406:	8a2a      	ldrh	r2, [r5, #16]
    3408:	4293      	cmp	r3, r2
    340a:	d00b      	beq.n	3424 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    340c:	2100      	movs	r1, #0
    340e:	0028      	movs	r0, r5
    3410:	4b14      	ldr	r3, [pc, #80]	; (3464 <_usb_d_dev_in_next+0x188>)
    3412:	4798      	blx	r3
	return;
    3414:	e7c5      	b.n	33a2 <_usb_d_dev_in_next+0xc6>
    3416:	0164      	lsls	r4, r4, #5
    3418:	4a11      	ldr	r2, [pc, #68]	; (3460 <_usb_d_dev_in_next+0x184>)
    341a:	4694      	mov	ip, r2
    341c:	4464      	add	r4, ip
    341e:	224b      	movs	r2, #75	; 0x4b
    3420:	7022      	strb	r2, [r4, #0]
    3422:	e7f0      	b.n	3406 <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    3424:	7ceb      	ldrb	r3, [r5, #19]
    3426:	2240      	movs	r2, #64	; 0x40
    3428:	4393      	bics	r3, r2
    342a:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    342c:	4b0e      	ldr	r3, [pc, #56]	; (3468 <_usb_d_dev_in_next+0x18c>)
    342e:	68db      	ldr	r3, [r3, #12]
    3430:	7ca8      	ldrb	r0, [r5, #18]
    3432:	68a9      	ldr	r1, [r5, #8]
    3434:	4798      	blx	r3
    3436:	2800      	cmp	r0, #0
    3438:	d1b3      	bne.n	33a2 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    343a:	7ceb      	ldrb	r3, [r5, #19]
    343c:	2240      	movs	r2, #64	; 0x40
    343e:	4313      	orrs	r3, r2
    3440:	74eb      	strb	r3, [r5, #19]
    3442:	e7e3      	b.n	340c <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    3444:	224e      	movs	r2, #78	; 0x4e
    3446:	e7a0      	b.n	338a <_usb_d_dev_in_next+0xae>
    3448:	200006c0 	.word	0x200006c0
    344c:	000003ff 	.word	0x000003ff
    3450:	41005000 	.word	0x41005000
    3454:	00007165 	.word	0x00007165
    3458:	f0003fff 	.word	0xf0003fff
    345c:	41005109 	.word	0x41005109
    3460:	41005108 	.word	0x41005108
    3464:	000030d1 	.word	0x000030d1
    3468:	200007c0 	.word	0x200007c0

0000346c <_usb_d_dev_out_next>:
{
    346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    346e:	46de      	mov	lr, fp
    3470:	4657      	mov	r7, sl
    3472:	464e      	mov	r6, r9
    3474:	4645      	mov	r5, r8
    3476:	b5e0      	push	{r5, r6, r7, lr}
    3478:	0004      	movs	r4, r0
    347a:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    347c:	7c83      	ldrb	r3, [r0, #18]
    347e:	250f      	movs	r5, #15
    3480:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3482:	2900      	cmp	r1, #0
    3484:	d059      	beq.n	353a <_usb_d_dev_out_next+0xce>
    3486:	016a      	lsls	r2, r5, #5
    3488:	4b71      	ldr	r3, [pc, #452]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    348a:	189b      	adds	r3, r3, r2
    348c:	685b      	ldr	r3, [r3, #4]
    348e:	011b      	lsls	r3, r3, #4
    3490:	0c9b      	lsrs	r3, r3, #18
    3492:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3494:	2f00      	cmp	r7, #0
    3496:	d053      	beq.n	3540 <_usb_d_dev_out_next+0xd4>
    3498:	016a      	lsls	r2, r5, #5
    349a:	4b6d      	ldr	r3, [pc, #436]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    349c:	189b      	adds	r3, r3, r2
    349e:	685b      	ldr	r3, [r3, #4]
    34a0:	049b      	lsls	r3, r3, #18
    34a2:	0c9b      	lsrs	r3, r3, #18
    34a4:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    34a6:	8a26      	ldrh	r6, [r4, #16]
    34a8:	4b6a      	ldr	r3, [pc, #424]	; (3654 <_usb_d_dev_out_next+0x1e8>)
    34aa:	429e      	cmp	r6, r3
    34ac:	d001      	beq.n	34b2 <_usb_d_dev_out_next+0x46>
    34ae:	3e01      	subs	r6, #1
    34b0:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    34b2:	4643      	mov	r3, r8
    34b4:	4033      	ands	r3, r6
    34b6:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    34b8:	7ce3      	ldrb	r3, [r4, #19]
    34ba:	2207      	movs	r2, #7
    34bc:	401a      	ands	r2, r3
    34be:	4691      	mov	r9, r2
	if (isr) {
    34c0:	2f00      	cmp	r7, #0
    34c2:	d007      	beq.n	34d4 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    34c4:	002b      	movs	r3, r5
    34c6:	3308      	adds	r3, #8
    34c8:	015b      	lsls	r3, r3, #5
    34ca:	4a63      	ldr	r2, [pc, #396]	; (3658 <_usb_d_dev_out_next+0x1ec>)
    34cc:	4694      	mov	ip, r2
    34ce:	4463      	add	r3, ip
    34d0:	2201      	movs	r2, #1
    34d2:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    34d4:	7ce3      	ldrb	r3, [r4, #19]
    34d6:	069b      	lsls	r3, r3, #26
    34d8:	d511      	bpl.n	34fe <_usb_d_dev_out_next+0x92>
    34da:	6862      	ldr	r2, [r4, #4]
    34dc:	2a00      	cmp	r2, #0
    34de:	d00e      	beq.n	34fe <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    34e0:	b292      	uxth	r2, r2
    34e2:	8923      	ldrh	r3, [r4, #8]
    34e4:	1ad2      	subs	r2, r2, r3
    34e6:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    34e8:	6823      	ldr	r3, [r4, #0]
    34ea:	68a1      	ldr	r1, [r4, #8]
    34ec:	468c      	mov	ip, r1
    34ee:	4463      	add	r3, ip
    34f0:	0018      	movs	r0, r3
    34f2:	68e1      	ldr	r1, [r4, #12]
    34f4:	4593      	cmp	fp, r2
    34f6:	d200      	bcs.n	34fa <_usb_d_dev_out_next+0x8e>
    34f8:	465a      	mov	r2, fp
    34fa:	4b58      	ldr	r3, [pc, #352]	; (365c <_usb_d_dev_out_next+0x1f0>)
    34fc:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    34fe:	6863      	ldr	r3, [r4, #4]
    3500:	2b00      	cmp	r3, #0
    3502:	d120      	bne.n	3546 <_usb_d_dev_out_next+0xda>
    3504:	7ce2      	ldrb	r2, [r4, #19]
    3506:	06d2      	lsls	r2, r2, #27
    3508:	d51d      	bpl.n	3546 <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    350a:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    350c:	2210      	movs	r2, #16
    350e:	4393      	bics	r3, r2
    3510:	2220      	movs	r2, #32
    3512:	4313      	orrs	r3, r2
    3514:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    3516:	494e      	ldr	r1, [pc, #312]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    3518:	016a      	lsls	r2, r5, #5
    351a:	68e3      	ldr	r3, [r4, #12]
    351c:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    351e:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3520:	188a      	adds	r2, r1, r2
    3522:	6851      	ldr	r1, [r2, #4]
    3524:	049b      	lsls	r3, r3, #18
    3526:	091b      	lsrs	r3, r3, #4
    3528:	484d      	ldr	r0, [pc, #308]	; (3660 <_usb_d_dev_out_next+0x1f4>)
    352a:	4001      	ands	r1, r0
    352c:	430b      	orrs	r3, r1
    352e:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3530:	6853      	ldr	r3, [r2, #4]
    3532:	0b9b      	lsrs	r3, r3, #14
    3534:	0399      	lsls	r1, r3, #14
    3536:	6051      	str	r1, [r2, #4]
    3538:	e047      	b.n	35ca <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    353a:	2300      	movs	r3, #0
    353c:	469a      	mov	sl, r3
    353e:	e7a9      	b.n	3494 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3540:	2300      	movs	r3, #0
    3542:	4698      	mov	r8, r3
    3544:	e7af      	b.n	34a6 <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    3546:	2f00      	cmp	r7, #0
    3548:	d01d      	beq.n	3586 <_usb_d_dev_out_next+0x11a>
    354a:	8a22      	ldrh	r2, [r4, #16]
    354c:	4593      	cmp	fp, r2
    354e:	d21a      	bcs.n	3586 <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    3550:	7ce3      	ldrb	r3, [r4, #19]
    3552:	2210      	movs	r2, #16
    3554:	4393      	bics	r3, r2
    3556:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    3558:	68a3      	ldr	r3, [r4, #8]
    355a:	4443      	add	r3, r8
    355c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    355e:	464b      	mov	r3, r9
    3560:	2b01      	cmp	r3, #1
    3562:	d066      	beq.n	3632 <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3564:	016b      	lsls	r3, r5, #5
    3566:	4a3f      	ldr	r2, [pc, #252]	; (3664 <_usb_d_dev_out_next+0x1f8>)
    3568:	4694      	mov	ip, r2
    356a:	4463      	add	r3, ip
    356c:	2225      	movs	r2, #37	; 0x25
    356e:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    3570:	2d00      	cmp	r5, #0
    3572:	d103      	bne.n	357c <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    3574:	016d      	lsls	r5, r5, #5
    3576:	4b36      	ldr	r3, [pc, #216]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    3578:	68e2      	ldr	r2, [r4, #12]
    357a:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    357c:	2100      	movs	r1, #0
    357e:	0020      	movs	r0, r4
    3580:	4b39      	ldr	r3, [pc, #228]	; (3668 <_usb_d_dev_out_next+0x1fc>)
    3582:	4798      	blx	r3
	return;
    3584:	e033      	b.n	35ee <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    3586:	68a2      	ldr	r2, [r4, #8]
    3588:	4452      	add	r2, sl
    358a:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    358c:	4293      	cmp	r3, r2
    358e:	d9e6      	bls.n	355e <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    3590:	b29b      	uxth	r3, r3
    3592:	b291      	uxth	r1, r2
    3594:	1a5b      	subs	r3, r3, r1
    3596:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    3598:	7ce1      	ldrb	r1, [r4, #19]
    359a:	0689      	lsls	r1, r1, #26
    359c:	d52d      	bpl.n	35fa <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    359e:	8a21      	ldrh	r1, [r4, #16]
    35a0:	428b      	cmp	r3, r1
    35a2:	d800      	bhi.n	35a6 <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    35a4:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    35a6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    35a8:	016b      	lsls	r3, r5, #5
    35aa:	4a29      	ldr	r2, [pc, #164]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    35ac:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    35ae:	016b      	lsls	r3, r5, #5
    35b0:	4827      	ldr	r0, [pc, #156]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    35b2:	18c0      	adds	r0, r0, r3
    35b4:	6842      	ldr	r2, [r0, #4]
    35b6:	048b      	lsls	r3, r1, #18
    35b8:	091b      	lsrs	r3, r3, #4
    35ba:	4929      	ldr	r1, [pc, #164]	; (3660 <_usb_d_dev_out_next+0x1f4>)
    35bc:	400a      	ands	r2, r1
    35be:	4313      	orrs	r3, r2
    35c0:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    35c2:	6843      	ldr	r3, [r0, #4]
    35c4:	0b9b      	lsrs	r3, r3, #14
    35c6:	039a      	lsls	r2, r3, #14
    35c8:	6042      	str	r2, [r0, #4]
	if (!isr) {
    35ca:	2f00      	cmp	r7, #0
    35cc:	d108      	bne.n	35e0 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    35ce:	464b      	mov	r3, r9
    35d0:	2b01      	cmp	r3, #1
    35d2:	d035      	beq.n	3640 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    35d4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    35d6:	016b      	lsls	r3, r5, #5
    35d8:	4924      	ldr	r1, [pc, #144]	; (366c <_usb_d_dev_out_next+0x200>)
    35da:	468c      	mov	ip, r1
    35dc:	4463      	add	r3, ip
    35de:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    35e0:	3508      	adds	r5, #8
    35e2:	016d      	lsls	r5, r5, #5
    35e4:	4b1c      	ldr	r3, [pc, #112]	; (3658 <_usb_d_dev_out_next+0x1ec>)
    35e6:	469c      	mov	ip, r3
    35e8:	4465      	add	r5, ip
    35ea:	2340      	movs	r3, #64	; 0x40
    35ec:	712b      	strb	r3, [r5, #4]
}
    35ee:	bc3c      	pop	{r2, r3, r4, r5}
    35f0:	4690      	mov	r8, r2
    35f2:	4699      	mov	r9, r3
    35f4:	46a2      	mov	sl, r4
    35f6:	46ab      	mov	fp, r5
    35f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    35fa:	8a21      	ldrh	r1, [r4, #16]
    35fc:	428b      	cmp	r3, r1
    35fe:	d90b      	bls.n	3618 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    3600:	2180      	movs	r1, #128	; 0x80
    3602:	0189      	lsls	r1, r1, #6
    3604:	428b      	cmp	r3, r1
    3606:	d80f      	bhi.n	3628 <_usb_d_dev_out_next+0x1bc>
    3608:	43b3      	bics	r3, r6
    360a:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    360c:	6823      	ldr	r3, [r4, #0]
    360e:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    3610:	016b      	lsls	r3, r5, #5
    3612:	480f      	ldr	r0, [pc, #60]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    3614:	501a      	str	r2, [r3, r0]
    3616:	e7ca      	b.n	35ae <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    3618:	428b      	cmp	r3, r1
    361a:	d208      	bcs.n	362e <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    361c:	7ce1      	ldrb	r1, [r4, #19]
    361e:	2020      	movs	r0, #32
    3620:	4301      	orrs	r1, r0
    3622:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    3624:	0019      	movs	r1, r3
    3626:	e7f1      	b.n	360c <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    3628:	2180      	movs	r1, #128	; 0x80
    362a:	0189      	lsls	r1, r1, #6
    362c:	e7ee      	b.n	360c <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    362e:	0019      	movs	r1, r3
    3630:	e7ec      	b.n	360c <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3632:	016b      	lsls	r3, r5, #5
    3634:	4a0b      	ldr	r2, [pc, #44]	; (3664 <_usb_d_dev_out_next+0x1f8>)
    3636:	4694      	mov	ip, r2
    3638:	4463      	add	r3, ip
    363a:	222d      	movs	r2, #45	; 0x2d
    363c:	701a      	strb	r2, [r3, #0]
    363e:	e797      	b.n	3570 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    3640:	016a      	lsls	r2, r5, #5
    3642:	4b03      	ldr	r3, [pc, #12]	; (3650 <_usb_d_dev_out_next+0x1e4>)
    3644:	189b      	adds	r3, r3, r2
    3646:	2200      	movs	r2, #0
    3648:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    364a:	322d      	adds	r2, #45	; 0x2d
    364c:	e7c3      	b.n	35d6 <_usb_d_dev_out_next+0x16a>
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	200006c0 	.word	0x200006c0
    3654:	000003ff 	.word	0x000003ff
    3658:	41005000 	.word	0x41005000
    365c:	00007165 	.word	0x00007165
    3660:	f0003fff 	.word	0xf0003fff
    3664:	41005108 	.word	0x41005108
    3668:	000030d1 	.word	0x000030d1
    366c:	41005109 	.word	0x41005109

00003670 <_usb_d_dev_handler>:
{
    3670:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3672:	4b89      	ldr	r3, [pc, #548]	; (3898 <_usb_d_dev_handler+0x228>)
    3674:	8c1d      	ldrh	r5, [r3, #32]
    3676:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    3678:	2d00      	cmp	r5, #0
    367a:	d001      	beq.n	3680 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    367c:	2400      	movs	r4, #0
    367e:	e0bf      	b.n	3800 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3680:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3682:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3684:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3686:	075a      	lsls	r2, r3, #29
    3688:	d40d      	bmi.n	36a6 <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    368a:	059a      	lsls	r2, r3, #22
    368c:	d415      	bmi.n	36ba <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    368e:	061a      	lsls	r2, r3, #24
    3690:	d437      	bmi.n	3702 <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3692:	2270      	movs	r2, #112	; 0x70
    3694:	421a      	tst	r2, r3
    3696:	d13e      	bne.n	3716 <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3698:	071a      	lsls	r2, r3, #28
    369a:	d457      	bmi.n	374c <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    369c:	07db      	lsls	r3, r3, #31
    369e:	d500      	bpl.n	36a2 <_usb_d_dev_handler+0x32>
    36a0:	e068      	b.n	3774 <_usb_d_dev_handler+0x104>
		rc = false;
    36a2:	2300      	movs	r3, #0
    36a4:	e006      	b.n	36b4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    36a6:	2204      	movs	r2, #4
    36a8:	4b7b      	ldr	r3, [pc, #492]	; (3898 <_usb_d_dev_handler+0x228>)
    36aa:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    36ac:	4b7b      	ldr	r3, [pc, #492]	; (389c <_usb_d_dev_handler+0x22c>)
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	4798      	blx	r3
		return true;
    36b2:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    36b4:	2b00      	cmp	r3, #0
    36b6:	d0e1      	beq.n	367c <_usb_d_dev_handler+0xc>
}
    36b8:	bd70      	pop	{r4, r5, r6, pc}
    36ba:	4b77      	ldr	r3, [pc, #476]	; (3898 <_usb_d_dev_handler+0x228>)
    36bc:	4a78      	ldr	r2, [pc, #480]	; (38a0 <_usb_d_dev_handler+0x230>)
    36be:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    36c0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    36c2:	3a92      	subs	r2, #146	; 0x92
    36c4:	3aff      	subs	r2, #255	; 0xff
    36c6:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    36c8:	2300      	movs	r3, #0
    36ca:	2b06      	cmp	r3, #6
    36cc:	d812      	bhi.n	36f4 <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    36ce:	0158      	lsls	r0, r3, #5
    36d0:	4a74      	ldr	r2, [pc, #464]	; (38a4 <_usb_d_dev_handler+0x234>)
    36d2:	1812      	adds	r2, r2, r0
    36d4:	8912      	ldrh	r2, [r2, #8]
    36d6:	0712      	lsls	r2, r2, #28
    36d8:	0f12      	lsrs	r2, r2, #28
    36da:	2a03      	cmp	r2, #3
    36dc:	d002      	beq.n	36e4 <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    36de:	3301      	adds	r3, #1
    36e0:	b2db      	uxtb	r3, r3
    36e2:	e7f2      	b.n	36ca <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    36e4:	4b6f      	ldr	r3, [pc, #444]	; (38a4 <_usb_d_dev_handler+0x234>)
    36e6:	181b      	adds	r3, r3, r0
    36e8:	8919      	ldrh	r1, [r3, #8]
    36ea:	0449      	lsls	r1, r1, #17
    36ec:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    36ee:	2200      	movs	r2, #0
    36f0:	811a      	strh	r2, [r3, #8]
    36f2:	e000      	b.n	36f6 <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    36f4:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    36f6:	4b69      	ldr	r3, [pc, #420]	; (389c <_usb_d_dev_handler+0x22c>)
    36f8:	685b      	ldr	r3, [r3, #4]
    36fa:	2003      	movs	r0, #3
    36fc:	4798      	blx	r3
	bool     rc    = true;
    36fe:	2301      	movs	r3, #1
    3700:	e7d8      	b.n	36b4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3702:	2280      	movs	r2, #128	; 0x80
    3704:	4b64      	ldr	r3, [pc, #400]	; (3898 <_usb_d_dev_handler+0x228>)
    3706:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3708:	4b64      	ldr	r3, [pc, #400]	; (389c <_usb_d_dev_handler+0x22c>)
    370a:	685b      	ldr	r3, [r3, #4]
    370c:	2100      	movs	r1, #0
    370e:	2005      	movs	r0, #5
    3710:	4798      	blx	r3
	bool     rc    = true;
    3712:	2301      	movs	r3, #1
    3714:	e7ce      	b.n	36b4 <_usb_d_dev_handler+0x44>
    3716:	4b60      	ldr	r3, [pc, #384]	; (3898 <_usb_d_dev_handler+0x228>)
    3718:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    371a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    371c:	4a60      	ldr	r2, [pc, #384]	; (38a0 <_usb_d_dev_handler+0x230>)
    371e:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3720:	4b61      	ldr	r3, [pc, #388]	; (38a8 <_usb_d_dev_handler+0x238>)
    3722:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3724:	069b      	lsls	r3, r3, #26
    3726:	d40c      	bmi.n	3742 <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3728:	4b5f      	ldr	r3, [pc, #380]	; (38a8 <_usb_d_dev_handler+0x238>)
    372a:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    372c:	23d0      	movs	r3, #208	; 0xd0
    372e:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3730:	2bd0      	cmp	r3, #208	; 0xd0
    3732:	d1f9      	bne.n	3728 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3734:	4b59      	ldr	r3, [pc, #356]	; (389c <_usb_d_dev_handler+0x22c>)
    3736:	685b      	ldr	r3, [r3, #4]
    3738:	2100      	movs	r1, #0
    373a:	2002      	movs	r0, #2
    373c:	4798      	blx	r3
	bool     rc    = true;
    373e:	2301      	movs	r3, #1
    3740:	e7b8      	b.n	36b4 <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3742:	4b59      	ldr	r3, [pc, #356]	; (38a8 <_usb_d_dev_handler+0x238>)
    3744:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3746:	06db      	lsls	r3, r3, #27
    3748:	d5fb      	bpl.n	3742 <_usb_d_dev_handler+0xd2>
    374a:	e7f3      	b.n	3734 <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    374c:	4b52      	ldr	r3, [pc, #328]	; (3898 <_usb_d_dev_handler+0x228>)
    374e:	2100      	movs	r1, #0
    3750:	2280      	movs	r2, #128	; 0x80
    3752:	0052      	lsls	r2, r2, #1
    3754:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3756:	3af8      	subs	r2, #248	; 0xf8
    3758:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    375a:	3268      	adds	r2, #104	; 0x68
    375c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    375e:	4a50      	ldr	r2, [pc, #320]	; (38a0 <_usb_d_dev_handler+0x230>)
    3760:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3762:	4b52      	ldr	r3, [pc, #328]	; (38ac <_usb_d_dev_handler+0x23c>)
    3764:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3766:	4b4d      	ldr	r3, [pc, #308]	; (389c <_usb_d_dev_handler+0x22c>)
    3768:	685b      	ldr	r3, [r3, #4]
    376a:	2100      	movs	r1, #0
    376c:	2001      	movs	r0, #1
    376e:	4798      	blx	r3
	bool     rc    = true;
    3770:	2301      	movs	r3, #1
    3772:	e79f      	b.n	36b4 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3774:	4b48      	ldr	r3, [pc, #288]	; (3898 <_usb_d_dev_handler+0x228>)
    3776:	4a4a      	ldr	r2, [pc, #296]	; (38a0 <_usb_d_dev_handler+0x230>)
    3778:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    377a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    377c:	3a92      	subs	r2, #146	; 0x92
    377e:	3aff      	subs	r2, #255	; 0xff
    3780:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3782:	4b46      	ldr	r3, [pc, #280]	; (389c <_usb_d_dev_handler+0x22c>)
    3784:	685b      	ldr	r3, [r3, #4]
    3786:	2100      	movs	r1, #0
    3788:	2004      	movs	r0, #4
    378a:	4798      	blx	r3
	bool     rc    = true;
    378c:	2301      	movs	r3, #1
    378e:	e791      	b.n	36b4 <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3790:	06da      	lsls	r2, r3, #27
    3792:	d407      	bmi.n	37a4 <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3794:	065a      	lsls	r2, r3, #25
    3796:	d408      	bmi.n	37aa <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3798:	069b      	lsls	r3, r3, #26
    379a:	d52f      	bpl.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    379c:	2100      	movs	r1, #0
    379e:	4b44      	ldr	r3, [pc, #272]	; (38b0 <_usb_d_dev_handler+0x240>)
    37a0:	4798      	blx	r3
    37a2:	e02b      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    37a4:	4b43      	ldr	r3, [pc, #268]	; (38b4 <_usb_d_dev_handler+0x244>)
    37a6:	4798      	blx	r3
    37a8:	e028      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    37aa:	2101      	movs	r1, #1
    37ac:	4b40      	ldr	r3, [pc, #256]	; (38b0 <_usb_d_dev_handler+0x240>)
    37ae:	4798      	blx	r3
    37b0:	e024      	b.n	37fc <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    37b2:	065a      	lsls	r2, r3, #25
    37b4:	d40f      	bmi.n	37d6 <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    37b6:	071a      	lsls	r2, r3, #28
    37b8:	d411      	bmi.n	37de <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    37ba:	079a      	lsls	r2, r3, #30
    37bc:	d413      	bmi.n	37e6 <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    37be:	7cc1      	ldrb	r1, [r0, #19]
    37c0:	2207      	movs	r2, #7
    37c2:	400a      	ands	r2, r1
    37c4:	2a01      	cmp	r2, #1
    37c6:	d119      	bne.n	37fc <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    37c8:	075a      	lsls	r2, r3, #29
    37ca:	d410      	bmi.n	37ee <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    37cc:	06db      	lsls	r3, r3, #27
    37ce:	d515      	bpl.n	37fc <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    37d0:	4b38      	ldr	r3, [pc, #224]	; (38b4 <_usb_d_dev_handler+0x244>)
    37d2:	4798      	blx	r3
    37d4:	e012      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    37d6:	2101      	movs	r1, #1
    37d8:	4b35      	ldr	r3, [pc, #212]	; (38b0 <_usb_d_dev_handler+0x240>)
    37da:	4798      	blx	r3
    37dc:	e00e      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    37de:	2101      	movs	r1, #1
    37e0:	4b35      	ldr	r3, [pc, #212]	; (38b8 <_usb_d_dev_handler+0x248>)
    37e2:	4798      	blx	r3
    37e4:	e00a      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    37e6:	2101      	movs	r1, #1
    37e8:	4b34      	ldr	r3, [pc, #208]	; (38bc <_usb_d_dev_handler+0x24c>)
    37ea:	4798      	blx	r3
    37ec:	e006      	b.n	37fc <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    37ee:	2100      	movs	r1, #0
    37f0:	4b31      	ldr	r3, [pc, #196]	; (38b8 <_usb_d_dev_handler+0x248>)
    37f2:	4798      	blx	r3
    37f4:	e002      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    37f6:	2100      	movs	r1, #0
    37f8:	4b2d      	ldr	r3, [pc, #180]	; (38b0 <_usb_d_dev_handler+0x240>)
    37fa:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    37fc:	3401      	adds	r4, #1
    37fe:	b2e4      	uxtb	r4, r4
    3800:	2c10      	cmp	r4, #16
    3802:	d900      	bls.n	3806 <_usb_d_dev_handler+0x196>
    3804:	e758      	b.n	36b8 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    3806:	4b25      	ldr	r3, [pc, #148]	; (389c <_usb_d_dev_handler+0x22c>)
    3808:	00a2      	lsls	r2, r4, #2
    380a:	1911      	adds	r1, r2, r4
    380c:	0088      	lsls	r0, r1, #2
    380e:	0001      	movs	r1, r0
    3810:	3010      	adds	r0, #16
    3812:	1818      	adds	r0, r3, r0
    3814:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    3816:	185b      	adds	r3, r3, r1
    3818:	3326      	adds	r3, #38	; 0x26
    381a:	781b      	ldrb	r3, [r3, #0]
    381c:	2bff      	cmp	r3, #255	; 0xff
    381e:	d0ed      	beq.n	37fc <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3820:	7c82      	ldrb	r2, [r0, #18]
    3822:	230f      	movs	r3, #15
    3824:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    3826:	2201      	movs	r2, #1
    3828:	409a      	lsls	r2, r3
    382a:	422a      	tst	r2, r5
    382c:	d0e6      	beq.n	37fc <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    382e:	001a      	movs	r2, r3
    3830:	3208      	adds	r2, #8
    3832:	0152      	lsls	r2, r2, #5
    3834:	4918      	ldr	r1, [pc, #96]	; (3898 <_usb_d_dev_handler+0x228>)
    3836:	468c      	mov	ip, r1
    3838:	4462      	add	r2, ip
    383a:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    383c:	015b      	lsls	r3, r3, #5
    383e:	4920      	ldr	r1, [pc, #128]	; (38c0 <_usb_d_dev_handler+0x250>)
    3840:	468c      	mov	ip, r1
    3842:	4463      	add	r3, ip
    3844:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3846:	4013      	ands	r3, r2
	if (flags) {
    3848:	d0d8      	beq.n	37fc <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    384a:	7cc2      	ldrb	r2, [r0, #19]
    384c:	2147      	movs	r1, #71	; 0x47
    384e:	4011      	ands	r1, r2
    3850:	2901      	cmp	r1, #1
    3852:	d09d      	beq.n	3790 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3854:	b252      	sxtb	r2, r2
    3856:	2a00      	cmp	r2, #0
    3858:	dbab      	blt.n	37b2 <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    385a:	069a      	lsls	r2, r3, #26
    385c:	d4cb      	bmi.n	37f6 <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    385e:	075a      	lsls	r2, r3, #29
    3860:	d40d      	bmi.n	387e <_usb_d_dev_handler+0x20e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3862:	07da      	lsls	r2, r3, #31
    3864:	d40f      	bmi.n	3886 <_usb_d_dev_handler+0x216>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3866:	7cc1      	ldrb	r1, [r0, #19]
    3868:	2207      	movs	r2, #7
    386a:	400a      	ands	r2, r1
    386c:	2a01      	cmp	r2, #1
    386e:	d1c5      	bne.n	37fc <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3870:	071a      	lsls	r2, r3, #28
    3872:	d40c      	bmi.n	388e <_usb_d_dev_handler+0x21e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3874:	06db      	lsls	r3, r3, #27
    3876:	d5c1      	bpl.n	37fc <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    3878:	4b0e      	ldr	r3, [pc, #56]	; (38b4 <_usb_d_dev_handler+0x244>)
    387a:	4798      	blx	r3
    387c:	e7be      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    387e:	2100      	movs	r1, #0
    3880:	4b0d      	ldr	r3, [pc, #52]	; (38b8 <_usb_d_dev_handler+0x248>)
    3882:	4798      	blx	r3
    3884:	e7ba      	b.n	37fc <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    3886:	2101      	movs	r1, #1
    3888:	4b0e      	ldr	r3, [pc, #56]	; (38c4 <_usb_d_dev_handler+0x254>)
    388a:	4798      	blx	r3
    388c:	e7b6      	b.n	37fc <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    388e:	2101      	movs	r1, #1
    3890:	4b09      	ldr	r3, [pc, #36]	; (38b8 <_usb_d_dev_handler+0x248>)
    3892:	4798      	blx	r3
    3894:	e7b2      	b.n	37fc <_usb_d_dev_handler+0x18c>
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	41005000 	.word	0x41005000
    389c:	200007c0 	.word	0x200007c0
    38a0:	00000201 	.word	0x00000201
    38a4:	200006c0 	.word	0x200006c0
    38a8:	40000800 	.word	0x40000800
    38ac:	00003285 	.word	0x00003285
    38b0:	000030a1 	.word	0x000030a1
    38b4:	00003011 	.word	0x00003011
    38b8:	00003175 	.word	0x00003175
    38bc:	000032dd 	.word	0x000032dd
    38c0:	41005109 	.word	0x41005109
    38c4:	0000346d 	.word	0x0000346d

000038c8 <_usb_d_dev_init>:
{
    38c8:	b500      	push	{lr}
    38ca:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    38cc:	2200      	movs	r2, #0
    38ce:	ab01      	add	r3, sp, #4
    38d0:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    38d2:	4b21      	ldr	r3, [pc, #132]	; (3958 <_usb_d_dev_init+0x90>)
    38d4:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    38d6:	07db      	lsls	r3, r3, #31
    38d8:	d41b      	bmi.n	3912 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    38da:	4b1f      	ldr	r3, [pc, #124]	; (3958 <_usb_d_dev_init+0x90>)
    38dc:	789b      	ldrb	r3, [r3, #2]
    38de:	079b      	lsls	r3, r3, #30
    38e0:	d1fb      	bne.n	38da <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    38e2:	4b1d      	ldr	r3, [pc, #116]	; (3958 <_usb_d_dev_init+0x90>)
    38e4:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    38e6:	079b      	lsls	r3, r3, #30
    38e8:	d50c      	bpl.n	3904 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    38ea:	4a1b      	ldr	r2, [pc, #108]	; (3958 <_usb_d_dev_init+0x90>)
    38ec:	7813      	ldrb	r3, [r2, #0]
    38ee:	2102      	movs	r1, #2
    38f0:	438b      	bics	r3, r1
    38f2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    38f4:	4b18      	ldr	r3, [pc, #96]	; (3958 <_usb_d_dev_init+0x90>)
    38f6:	789b      	ldrb	r3, [r3, #2]
    38f8:	079b      	lsls	r3, r3, #30
    38fa:	d1fb      	bne.n	38f4 <_usb_d_dev_init+0x2c>
    38fc:	4b16      	ldr	r3, [pc, #88]	; (3958 <_usb_d_dev_init+0x90>)
    38fe:	789b      	ldrb	r3, [r3, #2]
    3900:	079b      	lsls	r3, r3, #30
    3902:	d4fb      	bmi.n	38fc <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3904:	2201      	movs	r2, #1
    3906:	4b14      	ldr	r3, [pc, #80]	; (3958 <_usb_d_dev_init+0x90>)
    3908:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    390a:	4b13      	ldr	r3, [pc, #76]	; (3958 <_usb_d_dev_init+0x90>)
    390c:	789b      	ldrb	r3, [r3, #2]
    390e:	079b      	lsls	r3, r3, #30
    3910:	d1fb      	bne.n	390a <_usb_d_dev_init+0x42>
    3912:	4b11      	ldr	r3, [pc, #68]	; (3958 <_usb_d_dev_init+0x90>)
    3914:	789b      	ldrb	r3, [r3, #2]
    3916:	07db      	lsls	r3, r3, #31
    3918:	d4fb      	bmi.n	3912 <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    391a:	4b10      	ldr	r3, [pc, #64]	; (395c <_usb_d_dev_init+0x94>)
    391c:	4a10      	ldr	r2, [pc, #64]	; (3960 <_usb_d_dev_init+0x98>)
    391e:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    3920:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3922:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3924:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3926:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    3928:	4b0e      	ldr	r3, [pc, #56]	; (3964 <_usb_d_dev_init+0x9c>)
    392a:	4798      	blx	r3
	_usb_load_calib();
    392c:	4b0e      	ldr	r3, [pc, #56]	; (3968 <_usb_d_dev_init+0xa0>)
    392e:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3930:	2204      	movs	r2, #4
    3932:	4b09      	ldr	r3, [pc, #36]	; (3958 <_usb_d_dev_init+0x90>)
    3934:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3936:	4b08      	ldr	r3, [pc, #32]	; (3958 <_usb_d_dev_init+0x90>)
    3938:	789b      	ldrb	r3, [r3, #2]
    393a:	079b      	lsls	r3, r3, #30
    393c:	d1fb      	bne.n	3936 <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    393e:	4a06      	ldr	r2, [pc, #24]	; (3958 <_usb_d_dev_init+0x90>)
    3940:	4b0a      	ldr	r3, [pc, #40]	; (396c <_usb_d_dev_init+0xa4>)
    3942:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    3944:	ab01      	add	r3, sp, #4
    3946:	785b      	ldrb	r3, [r3, #1]
    3948:	2101      	movs	r1, #1
    394a:	430b      	orrs	r3, r1
    394c:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    394e:	8113      	strh	r3, [r2, #8]
}
    3950:	2000      	movs	r0, #0
    3952:	b003      	add	sp, #12
    3954:	bd00      	pop	{pc}
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	41005000 	.word	0x41005000
    395c:	200007c0 	.word	0x200007c0
    3960:	00002fb9 	.word	0x00002fb9
    3964:	00003285 	.word	0x00003285
    3968:	00002fbd 	.word	0x00002fbd
    396c:	200006c0 	.word	0x200006c0

00003970 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3970:	4b10      	ldr	r3, [pc, #64]	; (39b4 <_usb_d_dev_enable+0x44>)
    3972:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3974:	079b      	lsls	r3, r3, #30
    3976:	d119      	bne.n	39ac <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3978:	4b0e      	ldr	r3, [pc, #56]	; (39b4 <_usb_d_dev_enable+0x44>)
    397a:	789b      	ldrb	r3, [r3, #2]
    397c:	079b      	lsls	r3, r3, #30
    397e:	d1fb      	bne.n	3978 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    3980:	4b0c      	ldr	r3, [pc, #48]	; (39b4 <_usb_d_dev_enable+0x44>)
    3982:	781b      	ldrb	r3, [r3, #0]
    3984:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3986:	079a      	lsls	r2, r3, #30
    3988:	d408      	bmi.n	399c <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    398a:	2202      	movs	r2, #2
    398c:	4313      	orrs	r3, r2
    398e:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3990:	4a08      	ldr	r2, [pc, #32]	; (39b4 <_usb_d_dev_enable+0x44>)
    3992:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3994:	4b07      	ldr	r3, [pc, #28]	; (39b4 <_usb_d_dev_enable+0x44>)
    3996:	789b      	ldrb	r3, [r3, #2]
    3998:	079b      	lsls	r3, r3, #30
    399a:	d1fb      	bne.n	3994 <_usb_d_dev_enable+0x24>
    399c:	2280      	movs	r2, #128	; 0x80
    399e:	4b06      	ldr	r3, [pc, #24]	; (39b8 <_usb_d_dev_enable+0x48>)
    39a0:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    39a2:	4a06      	ldr	r2, [pc, #24]	; (39bc <_usb_d_dev_enable+0x4c>)
    39a4:	4b03      	ldr	r3, [pc, #12]	; (39b4 <_usb_d_dev_enable+0x44>)
    39a6:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    39a8:	2000      	movs	r0, #0
}
    39aa:	4770      	bx	lr
		return -USB_ERR_DENIED;
    39ac:	2011      	movs	r0, #17
    39ae:	4240      	negs	r0, r0
    39b0:	e7fb      	b.n	39aa <_usb_d_dev_enable+0x3a>
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	41005000 	.word	0x41005000
    39b8:	e000e100 	.word	0xe000e100
    39bc:	0000028d 	.word	0x0000028d

000039c0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    39c0:	4a02      	ldr	r2, [pc, #8]	; (39cc <_usb_d_dev_attach+0xc>)
    39c2:	8913      	ldrh	r3, [r2, #8]
    39c4:	2101      	movs	r1, #1
    39c6:	438b      	bics	r3, r1
    39c8:	8113      	strh	r3, [r2, #8]
}
    39ca:	4770      	bx	lr
    39cc:	41005000 	.word	0x41005000

000039d0 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    39d0:	2380      	movs	r3, #128	; 0x80
    39d2:	425b      	negs	r3, r3
    39d4:	4318      	orrs	r0, r3
    39d6:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    39d8:	4b01      	ldr	r3, [pc, #4]	; (39e0 <_usb_d_dev_set_address+0x10>)
    39da:	7298      	strb	r0, [r3, #10]
}
    39dc:	4770      	bx	lr
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	41005000 	.word	0x41005000

000039e4 <_usb_d_dev_ep_init>:
{
    39e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39e6:	46c6      	mov	lr, r8
    39e8:	b500      	push	{lr}
    39ea:	4690      	mov	r8, r2
	uint8_t               epn = USB_EP_GET_N(ep);
    39ec:	230f      	movs	r3, #15
    39ee:	4003      	ands	r3, r0
    39f0:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    39f2:	2b00      	cmp	r3, #0
    39f4:	d005      	beq.n	3a02 <_usb_d_dev_ep_init+0x1e>
    39f6:	2f00      	cmp	r7, #0
    39f8:	db01      	blt.n	39fe <_usb_d_dev_ep_init+0x1a>
    39fa:	001d      	movs	r5, r3
    39fc:	e002      	b.n	3a04 <_usb_d_dev_ep_init+0x20>
    39fe:	1ddd      	adds	r5, r3, #7
    3a00:	e000      	b.n	3a04 <_usb_d_dev_ep_init+0x20>
    3a02:	001d      	movs	r5, r3
	return &dev_inst.ep[ep_index];
    3a04:	002e      	movs	r6, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3a06:	2403      	movs	r4, #3
    3a08:	4021      	ands	r1, r4
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3a0a:	001c      	movs	r4, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    3a0c:	2b07      	cmp	r3, #7
    3a0e:	d900      	bls.n	3a12 <_usb_d_dev_ep_init+0x2e>
    3a10:	e070      	b.n	3af4 <_usb_d_dev_ep_init+0x110>
	if (ept->ep != 0xFF) {
    3a12:	00aa      	lsls	r2, r5, #2
    3a14:	4694      	mov	ip, r2
    3a16:	4465      	add	r5, ip
    3a18:	00aa      	lsls	r2, r5, #2
    3a1a:	4694      	mov	ip, r2
    3a1c:	4d3d      	ldr	r5, [pc, #244]	; (3b14 <_usb_d_dev_ep_init+0x130>)
    3a1e:	4465      	add	r5, ip
    3a20:	3526      	adds	r5, #38	; 0x26
    3a22:	782d      	ldrb	r5, [r5, #0]
    3a24:	2dff      	cmp	r5, #255	; 0xff
    3a26:	d168      	bne.n	3afa <_usb_d_dev_ep_init+0x116>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3a28:	2900      	cmp	r1, #0
    3a2a:	d116      	bne.n	3a5a <_usb_d_dev_ep_init+0x76>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d003      	beq.n	3a38 <_usb_d_dev_ep_init+0x54>
    3a30:	2f00      	cmp	r7, #0
    3a32:	db01      	blt.n	3a38 <_usb_d_dev_ep_init+0x54>
    3a34:	3307      	adds	r3, #7
    3a36:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    3a38:	009d      	lsls	r5, r3, #2
    3a3a:	18eb      	adds	r3, r5, r3
    3a3c:	009d      	lsls	r5, r3, #2
    3a3e:	4b35      	ldr	r3, [pc, #212]	; (3b14 <_usb_d_dev_ep_init+0x130>)
    3a40:	195b      	adds	r3, r3, r5
    3a42:	3326      	adds	r3, #38	; 0x26
    3a44:	781b      	ldrb	r3, [r3, #0]
    3a46:	2bff      	cmp	r3, #255	; 0xff
    3a48:	d15a      	bne.n	3b00 <_usb_d_dev_ep_init+0x11c>
		if (pcfg->cache == NULL) {
    3a4a:	0063      	lsls	r3, r4, #1
    3a4c:	191b      	adds	r3, r3, r4
    3a4e:	009d      	lsls	r5, r3, #2
    3a50:	4b31      	ldr	r3, [pc, #196]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3a52:	195b      	adds	r3, r3, r5
    3a54:	689b      	ldr	r3, [r3, #8]
    3a56:	2b00      	cmp	r3, #0
    3a58:	d055      	beq.n	3b06 <_usb_d_dev_ep_init+0x122>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3a5a:	2f00      	cmp	r7, #0
    3a5c:	db31      	blt.n	3ac2 <_usb_d_dev_ep_init+0xde>
    3a5e:	0063      	lsls	r3, r4, #1
    3a60:	191b      	adds	r3, r3, r4
    3a62:	009d      	lsls	r5, r3, #2
    3a64:	4b2c      	ldr	r3, [pc, #176]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3a66:	195b      	adds	r3, r3, r5
    3a68:	689b      	ldr	r3, [r3, #8]
    3a6a:	1e5d      	subs	r5, r3, #1
    3a6c:	41ab      	sbcs	r3, r5
    3a6e:	b2db      	uxtb	r3, r3
    3a70:	2b00      	cmp	r3, #0
    3a72:	d009      	beq.n	3a88 <_usb_d_dev_ep_init+0xa4>
    3a74:	2f00      	cmp	r7, #0
    3a76:	db2e      	blt.n	3ad6 <_usb_d_dev_ep_init+0xf2>
    3a78:	0063      	lsls	r3, r4, #1
    3a7a:	191b      	adds	r3, r3, r4
    3a7c:	009d      	lsls	r5, r3, #2
    3a7e:	4b26      	ldr	r3, [pc, #152]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3a80:	195b      	adds	r3, r3, r5
    3a82:	8a1b      	ldrh	r3, [r3, #16]
    3a84:	4543      	cmp	r3, r8
    3a86:	db41      	blt.n	3b0c <_usb_d_dev_ep_init+0x128>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3a88:	2f00      	cmp	r7, #0
    3a8a:	db2b      	blt.n	3ae4 <_usb_d_dev_ep_init+0x100>
    3a8c:	0063      	lsls	r3, r4, #1
    3a8e:	191c      	adds	r4, r3, r4
    3a90:	00a5      	lsls	r5, r4, #2
    3a92:	4b21      	ldr	r3, [pc, #132]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3a94:	195b      	adds	r3, r3, r5
    3a96:	689b      	ldr	r3, [r3, #8]
    3a98:	469c      	mov	ip, r3
    3a9a:	4c1e      	ldr	r4, [pc, #120]	; (3b14 <_usb_d_dev_ep_init+0x130>)
    3a9c:	00b5      	lsls	r5, r6, #2
    3a9e:	19af      	adds	r7, r5, r6
    3aa0:	00bb      	lsls	r3, r7, #2
    3aa2:	001f      	movs	r7, r3
    3aa4:	18e3      	adds	r3, r4, r3
    3aa6:	4662      	mov	r2, ip
    3aa8:	621a      	str	r2, [r3, #32]
	ept->size     = max_pkt_siz;
    3aaa:	4642      	mov	r2, r8
    3aac:	849a      	strh	r2, [r3, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    3aae:	3101      	adds	r1, #1
    3ab0:	3327      	adds	r3, #39	; 0x27
    3ab2:	7019      	strb	r1, [r3, #0]
	ept->ep       = ep;
    3ab4:	19e4      	adds	r4, r4, r7
    3ab6:	3426      	adds	r4, #38	; 0x26
    3ab8:	7020      	strb	r0, [r4, #0]
	return USB_OK;
    3aba:	2000      	movs	r0, #0
}
    3abc:	bc04      	pop	{r2}
    3abe:	4690      	mov	r8, r2
    3ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3ac2:	0063      	lsls	r3, r4, #1
    3ac4:	191b      	adds	r3, r3, r4
    3ac6:	009d      	lsls	r5, r3, #2
    3ac8:	4b13      	ldr	r3, [pc, #76]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3aca:	195b      	adds	r3, r3, r5
    3acc:	68db      	ldr	r3, [r3, #12]
    3ace:	1e5d      	subs	r5, r3, #1
    3ad0:	41ab      	sbcs	r3, r5
    3ad2:	b2db      	uxtb	r3, r3
    3ad4:	e7cc      	b.n	3a70 <_usb_d_dev_ep_init+0x8c>
    3ad6:	0063      	lsls	r3, r4, #1
    3ad8:	191b      	adds	r3, r3, r4
    3ada:	009d      	lsls	r5, r3, #2
    3adc:	4b0e      	ldr	r3, [pc, #56]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3ade:	195b      	adds	r3, r3, r5
    3ae0:	8a5b      	ldrh	r3, [r3, #18]
    3ae2:	e7cf      	b.n	3a84 <_usb_d_dev_ep_init+0xa0>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3ae4:	0063      	lsls	r3, r4, #1
    3ae6:	191c      	adds	r4, r3, r4
    3ae8:	00a5      	lsls	r5, r4, #2
    3aea:	4b0b      	ldr	r3, [pc, #44]	; (3b18 <_usb_d_dev_ep_init+0x134>)
    3aec:	195b      	adds	r3, r3, r5
    3aee:	68db      	ldr	r3, [r3, #12]
    3af0:	469c      	mov	ip, r3
    3af2:	e7d2      	b.n	3a9a <_usb_d_dev_ep_init+0xb6>
		return -USB_ERR_PARAM;
    3af4:	2012      	movs	r0, #18
    3af6:	4240      	negs	r0, r0
    3af8:	e7e0      	b.n	3abc <_usb_d_dev_ep_init+0xd8>
		return -USB_ERR_REDO;
    3afa:	2014      	movs	r0, #20
    3afc:	4240      	negs	r0, r0
    3afe:	e7dd      	b.n	3abc <_usb_d_dev_ep_init+0xd8>
			return -USB_ERR_REDO;
    3b00:	2014      	movs	r0, #20
    3b02:	4240      	negs	r0, r0
    3b04:	e7da      	b.n	3abc <_usb_d_dev_ep_init+0xd8>
			return -USB_ERR_FUNC;
    3b06:	2013      	movs	r0, #19
    3b08:	4240      	negs	r0, r0
    3b0a:	e7d7      	b.n	3abc <_usb_d_dev_ep_init+0xd8>
		return -USB_ERR_FUNC;
    3b0c:	2013      	movs	r0, #19
    3b0e:	4240      	negs	r0, r0
    3b10:	e7d4      	b.n	3abc <_usb_d_dev_ep_init+0xd8>
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	200007c0 	.word	0x200007c0
    3b18:	00007678 	.word	0x00007678

00003b1c <_usb_d_dev_ep_deinit>:
{
    3b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3b20:	240f      	movs	r4, #15
    3b22:	4004      	ands	r4, r0
    3b24:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3b26:	0ff9      	lsrs	r1, r7, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b28:	2c00      	cmp	r4, #0
    3b2a:	d005      	beq.n	3b38 <_usb_d_dev_ep_deinit+0x1c>
    3b2c:	2f00      	cmp	r7, #0
    3b2e:	db01      	blt.n	3b34 <_usb_d_dev_ep_deinit+0x18>
    3b30:	0022      	movs	r2, r4
    3b32:	e002      	b.n	3b3a <_usb_d_dev_ep_deinit+0x1e>
    3b34:	1de2      	adds	r2, r4, #7
    3b36:	e000      	b.n	3b3a <_usb_d_dev_ep_deinit+0x1e>
    3b38:	0022      	movs	r2, r4
	return &dev_inst.ep[ep_index];
    3b3a:	0016      	movs	r6, r2
    3b3c:	0093      	lsls	r3, r2, #2
    3b3e:	189b      	adds	r3, r3, r2
    3b40:	0098      	lsls	r0, r3, #2
    3b42:	3010      	adds	r0, #16
    3b44:	4b21      	ldr	r3, [pc, #132]	; (3bcc <_usb_d_dev_ep_deinit+0xb0>)
    3b46:	1818      	adds	r0, r3, r0
    3b48:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3b4a:	2c07      	cmp	r4, #7
    3b4c:	d82e      	bhi.n	3bac <_usb_d_dev_ep_deinit+0x90>
    3b4e:	0093      	lsls	r3, r2, #2
    3b50:	189a      	adds	r2, r3, r2
    3b52:	0093      	lsls	r3, r2, #2
    3b54:	469c      	mov	ip, r3
    3b56:	4b1d      	ldr	r3, [pc, #116]	; (3bcc <_usb_d_dev_ep_deinit+0xb0>)
    3b58:	4463      	add	r3, ip
    3b5a:	3326      	adds	r3, #38	; 0x26
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	2bff      	cmp	r3, #255	; 0xff
    3b60:	d024      	beq.n	3bac <_usb_d_dev_ep_deinit+0x90>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3b62:	2203      	movs	r2, #3
    3b64:	4b1a      	ldr	r3, [pc, #104]	; (3bd0 <_usb_d_dev_ep_deinit+0xb4>)
    3b66:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3b68:	00b2      	lsls	r2, r6, #2
    3b6a:	1992      	adds	r2, r2, r6
    3b6c:	0091      	lsls	r1, r2, #2
    3b6e:	4b17      	ldr	r3, [pc, #92]	; (3bcc <_usb_d_dev_ep_deinit+0xb0>)
    3b70:	185b      	adds	r3, r3, r1
    3b72:	3320      	adds	r3, #32
    3b74:	79da      	ldrb	r2, [r3, #7]
    3b76:	2307      	movs	r3, #7
    3b78:	4013      	ands	r3, r2
    3b7a:	2b01      	cmp	r3, #1
    3b7c:	d017      	beq.n	3bae <_usb_d_dev_ep_deinit+0x92>
	} else if (USB_EP_GET_DIR(ep)) {
    3b7e:	2f00      	cmp	r7, #0
    3b80:	db1b      	blt.n	3bba <_usb_d_dev_ep_deinit+0x9e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    3b82:	4a14      	ldr	r2, [pc, #80]	; (3bd4 <_usb_d_dev_ep_deinit+0xb8>)
    3b84:	3508      	adds	r5, #8
    3b86:	016d      	lsls	r5, r5, #5
    3b88:	5cab      	ldrb	r3, [r5, r2]
    3b8a:	2107      	movs	r1, #7
    3b8c:	438b      	bics	r3, r1
    3b8e:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    3b90:	4b0e      	ldr	r3, [pc, #56]	; (3bcc <_usb_d_dev_ep_deinit+0xb0>)
    3b92:	00b1      	lsls	r1, r6, #2
    3b94:	1988      	adds	r0, r1, r6
    3b96:	0082      	lsls	r2, r0, #2
    3b98:	189a      	adds	r2, r3, r2
    3b9a:	3227      	adds	r2, #39	; 0x27
    3b9c:	2000      	movs	r0, #0
    3b9e:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    3ba0:	198e      	adds	r6, r1, r6
    3ba2:	00b2      	lsls	r2, r6, #2
    3ba4:	189b      	adds	r3, r3, r2
    3ba6:	3326      	adds	r3, #38	; 0x26
    3ba8:	22ff      	movs	r2, #255	; 0xff
    3baa:	701a      	strb	r2, [r3, #0]
}
    3bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3bae:	3508      	adds	r5, #8
    3bb0:	016d      	lsls	r5, r5, #5
    3bb2:	2200      	movs	r2, #0
    3bb4:	4b07      	ldr	r3, [pc, #28]	; (3bd4 <_usb_d_dev_ep_deinit+0xb8>)
    3bb6:	54ea      	strb	r2, [r5, r3]
    3bb8:	e7ea      	b.n	3b90 <_usb_d_dev_ep_deinit+0x74>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3bba:	4a06      	ldr	r2, [pc, #24]	; (3bd4 <_usb_d_dev_ep_deinit+0xb8>)
    3bbc:	3408      	adds	r4, #8
    3bbe:	0164      	lsls	r4, r4, #5
    3bc0:	5ca3      	ldrb	r3, [r4, r2]
    3bc2:	2170      	movs	r1, #112	; 0x70
    3bc4:	438b      	bics	r3, r1
    3bc6:	54a3      	strb	r3, [r4, r2]
    3bc8:	e7e2      	b.n	3b90 <_usb_d_dev_ep_deinit+0x74>
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	200007c0 	.word	0x200007c0
    3bd0:	000030f9 	.word	0x000030f9
    3bd4:	41005000 	.word	0x41005000

00003bd8 <_usb_d_dev_ep_enable>:
{
    3bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    3bda:	230f      	movs	r3, #15
    3bdc:	4003      	ands	r3, r0
    3bde:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3be0:	2b00      	cmp	r3, #0
    3be2:	d005      	beq.n	3bf0 <_usb_d_dev_ep_enable+0x18>
    3be4:	2800      	cmp	r0, #0
    3be6:	db01      	blt.n	3bec <_usb_d_dev_ep_enable+0x14>
    3be8:	001e      	movs	r6, r3
    3bea:	e002      	b.n	3bf2 <_usb_d_dev_ep_enable+0x1a>
    3bec:	1dde      	adds	r6, r3, #7
    3bee:	e000      	b.n	3bf2 <_usb_d_dev_ep_enable+0x1a>
    3bf0:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    3bf2:	0032      	movs	r2, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3bf4:	0019      	movs	r1, r3
    3bf6:	3108      	adds	r1, #8
    3bf8:	0149      	lsls	r1, r1, #5
    3bfa:	4caf      	ldr	r4, [pc, #700]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3bfc:	5d0c      	ldrb	r4, [r1, r4]
    3bfe:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3c00:	2b07      	cmp	r3, #7
    3c02:	d900      	bls.n	3c06 <_usb_d_dev_ep_enable+0x2e>
    3c04:	e148      	b.n	3e98 <_usb_d_dev_ep_enable+0x2c0>
    3c06:	00b5      	lsls	r5, r6, #2
    3c08:	19ad      	adds	r5, r5, r6
    3c0a:	00ae      	lsls	r6, r5, #2
    3c0c:	49ab      	ldr	r1, [pc, #684]	; (3ebc <_usb_d_dev_ep_enable+0x2e4>)
    3c0e:	1989      	adds	r1, r1, r6
    3c10:	3126      	adds	r1, #38	; 0x26
    3c12:	7809      	ldrb	r1, [r1, #0]
    3c14:	29ff      	cmp	r1, #255	; 0xff
    3c16:	d100      	bne.n	3c1a <_usb_d_dev_ep_enable+0x42>
    3c18:	e141      	b.n	3e9e <_usb_d_dev_ep_enable+0x2c6>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3c1a:	0159      	lsls	r1, r3, #5
    3c1c:	4ea8      	ldr	r6, [pc, #672]	; (3ec0 <_usb_d_dev_ep_enable+0x2e8>)
    3c1e:	1876      	adds	r6, r6, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3c20:	0095      	lsls	r5, r2, #2
    3c22:	18ad      	adds	r5, r5, r2
    3c24:	00af      	lsls	r7, r5, #2
    3c26:	49a5      	ldr	r1, [pc, #660]	; (3ebc <_usb_d_dev_ep_enable+0x2e4>)
    3c28:	19c9      	adds	r1, r1, r7
    3c2a:	3120      	adds	r1, #32
    3c2c:	79cd      	ldrb	r5, [r1, #7]
    3c2e:	2107      	movs	r1, #7
    3c30:	4029      	ands	r1, r5
    3c32:	2901      	cmp	r1, #1
    3c34:	d036      	beq.n	3ca4 <_usb_d_dev_ep_enable+0xcc>
	} else if (dir) {
    3c36:	2800      	cmp	r0, #0
    3c38:	da00      	bge.n	3c3c <_usb_d_dev_ep_enable+0x64>
    3c3a:	e0c5      	b.n	3dc8 <_usb_d_dev_ep_enable+0x1f0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3c3c:	0761      	lsls	r1, r4, #29
    3c3e:	d000      	beq.n	3c42 <_usb_d_dev_ep_enable+0x6a>
    3c40:	e136      	b.n	3eb0 <_usb_d_dev_ep_enable+0x2d8>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3c42:	489e      	ldr	r0, [pc, #632]	; (3ebc <_usb_d_dev_ep_enable+0x2e4>)
    3c44:	0095      	lsls	r5, r2, #2
    3c46:	18af      	adds	r7, r5, r2
    3c48:	00b9      	lsls	r1, r7, #2
    3c4a:	1841      	adds	r1, r0, r1
    3c4c:	3120      	adds	r1, #32
    3c4e:	79c9      	ldrb	r1, [r1, #7]
    3c50:	0749      	lsls	r1, r1, #29
    3c52:	0f49      	lsrs	r1, r1, #29
    3c54:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3c56:	0019      	movs	r1, r3
    3c58:	3108      	adds	r1, #8
    3c5a:	0149      	lsls	r1, r1, #5
    3c5c:	4f96      	ldr	r7, [pc, #600]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3c5e:	55cc      	strb	r4, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3c60:	18aa      	adds	r2, r5, r2
    3c62:	0091      	lsls	r1, r2, #2
    3c64:	1840      	adds	r0, r0, r1
    3c66:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3c68:	0382      	lsls	r2, r0, #14
    3c6a:	4996      	ldr	r1, [pc, #600]	; (3ec4 <_usb_d_dev_ep_enable+0x2ec>)
    3c6c:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3c6e:	2180      	movs	r1, #128	; 0x80
    3c70:	0089      	lsls	r1, r1, #2
    3c72:	4288      	cmp	r0, r1
    3c74:	d900      	bls.n	3c78 <_usb_d_dev_ep_enable+0xa0>
    3c76:	e0f2      	b.n	3e5e <_usb_d_dev_ep_enable+0x286>
    3c78:	3901      	subs	r1, #1
    3c7a:	39ff      	subs	r1, #255	; 0xff
    3c7c:	4288      	cmp	r0, r1
    3c7e:	d900      	bls.n	3c82 <_usb_d_dev_ep_enable+0xaa>
    3c80:	e100      	b.n	3e84 <_usb_d_dev_ep_enable+0x2ac>
    3c82:	2880      	cmp	r0, #128	; 0x80
    3c84:	d900      	bls.n	3c88 <_usb_d_dev_ep_enable+0xb0>
    3c86:	e0ff      	b.n	3e88 <_usb_d_dev_ep_enable+0x2b0>
    3c88:	2840      	cmp	r0, #64	; 0x40
    3c8a:	d900      	bls.n	3c8e <_usb_d_dev_ep_enable+0xb6>
    3c8c:	e0fe      	b.n	3e8c <_usb_d_dev_ep_enable+0x2b4>
    3c8e:	2820      	cmp	r0, #32
    3c90:	d900      	bls.n	3c94 <_usb_d_dev_ep_enable+0xbc>
    3c92:	e0fd      	b.n	3e90 <_usb_d_dev_ep_enable+0x2b8>
    3c94:	2810      	cmp	r0, #16
    3c96:	d900      	bls.n	3c9a <_usb_d_dev_ep_enable+0xc2>
    3c98:	e0fc      	b.n	3e94 <_usb_d_dev_ep_enable+0x2bc>
    3c9a:	39f8      	subs	r1, #248	; 0xf8
    3c9c:	4281      	cmp	r1, r0
    3c9e:	4189      	sbcs	r1, r1
    3ca0:	4249      	negs	r1, r1
    3ca2:	e0dd      	b.n	3e60 <_usb_d_dev_ep_enable+0x288>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3ca4:	3176      	adds	r1, #118	; 0x76
    3ca6:	4221      	tst	r1, r4
    3ca8:	d000      	beq.n	3cac <_usb_d_dev_ep_enable+0xd4>
    3caa:	e0fb      	b.n	3ea4 <_usb_d_dev_ep_enable+0x2cc>
    3cac:	0019      	movs	r1, r3
    3cae:	3108      	adds	r1, #8
    3cb0:	0149      	lsls	r1, r1, #5
    3cb2:	2411      	movs	r4, #17
    3cb4:	4880      	ldr	r0, [pc, #512]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3cb6:	540c      	strb	r4, [r1, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3cb8:	4980      	ldr	r1, [pc, #512]	; (3ebc <_usb_d_dev_ep_enable+0x2e4>)
    3cba:	19c9      	adds	r1, r1, r7
    3cbc:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    3cbe:	0388      	lsls	r0, r1, #14
    3cc0:	4c80      	ldr	r4, [pc, #512]	; (3ec4 <_usb_d_dev_ep_enable+0x2ec>)
    3cc2:	4020      	ands	r0, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3cc4:	2480      	movs	r4, #128	; 0x80
    3cc6:	00a4      	lsls	r4, r4, #2
    3cc8:	42a1      	cmp	r1, r4
    3cca:	d810      	bhi.n	3cee <_usb_d_dev_ep_enable+0x116>
    3ccc:	3c01      	subs	r4, #1
    3cce:	3cff      	subs	r4, #255	; 0xff
    3cd0:	42a1      	cmp	r1, r4
    3cd2:	d827      	bhi.n	3d24 <_usb_d_dev_ep_enable+0x14c>
    3cd4:	2980      	cmp	r1, #128	; 0x80
    3cd6:	d827      	bhi.n	3d28 <_usb_d_dev_ep_enable+0x150>
    3cd8:	2940      	cmp	r1, #64	; 0x40
    3cda:	d827      	bhi.n	3d2c <_usb_d_dev_ep_enable+0x154>
    3cdc:	2920      	cmp	r1, #32
    3cde:	d827      	bhi.n	3d30 <_usb_d_dev_ep_enable+0x158>
    3ce0:	2910      	cmp	r1, #16
    3ce2:	d827      	bhi.n	3d34 <_usb_d_dev_ep_enable+0x15c>
    3ce4:	3cf8      	subs	r4, #248	; 0xf8
    3ce6:	428c      	cmp	r4, r1
    3ce8:	41a4      	sbcs	r4, r4
    3cea:	4264      	negs	r4, r4
    3cec:	e000      	b.n	3cf0 <_usb_d_dev_ep_enable+0x118>
    3cee:	2407      	movs	r4, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3cf0:	0724      	lsls	r4, r4, #28
    3cf2:	4320      	orrs	r0, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3cf4:	6070      	str	r0, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3cf6:	0488      	lsls	r0, r1, #18
    3cf8:	0c80      	lsrs	r0, r0, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3cfa:	2480      	movs	r4, #128	; 0x80
    3cfc:	00a4      	lsls	r4, r4, #2
    3cfe:	42a1      	cmp	r1, r4
    3d00:	d81a      	bhi.n	3d38 <_usb_d_dev_ep_enable+0x160>
    3d02:	3c01      	subs	r4, #1
    3d04:	3cff      	subs	r4, #255	; 0xff
    3d06:	42a1      	cmp	r1, r4
    3d08:	d854      	bhi.n	3db4 <_usb_d_dev_ep_enable+0x1dc>
    3d0a:	2980      	cmp	r1, #128	; 0x80
    3d0c:	d854      	bhi.n	3db8 <_usb_d_dev_ep_enable+0x1e0>
    3d0e:	2940      	cmp	r1, #64	; 0x40
    3d10:	d854      	bhi.n	3dbc <_usb_d_dev_ep_enable+0x1e4>
    3d12:	2920      	cmp	r1, #32
    3d14:	d854      	bhi.n	3dc0 <_usb_d_dev_ep_enable+0x1e8>
    3d16:	2910      	cmp	r1, #16
    3d18:	d854      	bhi.n	3dc4 <_usb_d_dev_ep_enable+0x1ec>
    3d1a:	3cf8      	subs	r4, #248	; 0xf8
    3d1c:	428c      	cmp	r4, r1
    3d1e:	4189      	sbcs	r1, r1
    3d20:	4249      	negs	r1, r1
    3d22:	e00a      	b.n	3d3a <_usb_d_dev_ep_enable+0x162>
    3d24:	2406      	movs	r4, #6
    3d26:	e7e3      	b.n	3cf0 <_usb_d_dev_ep_enable+0x118>
    3d28:	2405      	movs	r4, #5
    3d2a:	e7e1      	b.n	3cf0 <_usb_d_dev_ep_enable+0x118>
    3d2c:	2404      	movs	r4, #4
    3d2e:	e7df      	b.n	3cf0 <_usb_d_dev_ep_enable+0x118>
    3d30:	2403      	movs	r4, #3
    3d32:	e7dd      	b.n	3cf0 <_usb_d_dev_ep_enable+0x118>
    3d34:	2402      	movs	r4, #2
    3d36:	e7db      	b.n	3cf0 <_usb_d_dev_ep_enable+0x118>
    3d38:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3d3a:	0709      	lsls	r1, r1, #28
    3d3c:	4301      	orrs	r1, r0
    3d3e:	6171      	str	r1, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3d40:	0019      	movs	r1, r3
    3d42:	3108      	adds	r1, #8
    3d44:	0149      	lsls	r1, r1, #5
    3d46:	485c      	ldr	r0, [pc, #368]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3d48:	4684      	mov	ip, r0
    3d4a:	4461      	add	r1, ip
    3d4c:	2040      	movs	r0, #64	; 0x40
    3d4e:	7148      	strb	r0, [r1, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3d50:	2480      	movs	r4, #128	; 0x80
    3d52:	710c      	strb	r4, [r1, #4]
	bank->STATUS_BK.reg     = 0;
    3d54:	4d5a      	ldr	r5, [pc, #360]	; (3ec0 <_usb_d_dev_ep_enable+0x2e8>)
    3d56:	015b      	lsls	r3, r3, #5
    3d58:	18eb      	adds	r3, r5, r3
    3d5a:	2100      	movs	r1, #0
    3d5c:	7299      	strb	r1, [r3, #10]
    3d5e:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3d60:	4e56      	ldr	r6, [pc, #344]	; (3ebc <_usb_d_dev_ep_enable+0x2e4>)
    3d62:	0094      	lsls	r4, r2, #2
    3d64:	18a3      	adds	r3, r4, r2
    3d66:	0099      	lsls	r1, r3, #2
    3d68:	1871      	adds	r1, r6, r1
    3d6a:	000b      	movs	r3, r1
    3d6c:	3326      	adds	r3, #38	; 0x26
    3d6e:	781b      	ldrb	r3, [r3, #0]
    3d70:	270f      	movs	r7, #15
    3d72:	403b      	ands	r3, r7
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3d74:	6a0f      	ldr	r7, [r1, #32]
	bank->ADDR.reg          = addr;
    3d76:	0159      	lsls	r1, r3, #5
    3d78:	514f      	str	r7, [r1, r5]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    3d7a:	18a2      	adds	r2, r4, r2
    3d7c:	0094      	lsls	r4, r2, #2
    3d7e:	1936      	adds	r6, r6, r4
    3d80:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3d82:	186c      	adds	r4, r5, r1
    3d84:	6865      	ldr	r5, [r4, #4]
    3d86:	0492      	lsls	r2, r2, #18
    3d88:	0912      	lsrs	r2, r2, #4
    3d8a:	4e4f      	ldr	r6, [pc, #316]	; (3ec8 <_usb_d_dev_ep_enable+0x2f0>)
    3d8c:	4035      	ands	r5, r6
    3d8e:	432a      	orrs	r2, r5
    3d90:	6062      	str	r2, [r4, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3d92:	6862      	ldr	r2, [r4, #4]
    3d94:	0b92      	lsrs	r2, r2, #14
    3d96:	0395      	lsls	r5, r2, #14
    3d98:	6065      	str	r5, [r4, #4]
    3d9a:	3308      	adds	r3, #8
    3d9c:	015b      	lsls	r3, r3, #5
    3d9e:	4463      	add	r3, ip
    3da0:	22b0      	movs	r2, #176	; 0xb0
    3da2:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3da4:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3da6:	4b49      	ldr	r3, [pc, #292]	; (3ecc <_usb_d_dev_ep_enable+0x2f4>)
    3da8:	469c      	mov	ip, r3
    3daa:	4461      	add	r1, ip
    3dac:	2310      	movs	r3, #16
    3dae:	700b      	strb	r3, [r1, #0]
	return USB_OK;
    3db0:	2000      	movs	r0, #0
    3db2:	e066      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3db4:	2106      	movs	r1, #6
    3db6:	e7c0      	b.n	3d3a <_usb_d_dev_ep_enable+0x162>
    3db8:	2105      	movs	r1, #5
    3dba:	e7be      	b.n	3d3a <_usb_d_dev_ep_enable+0x162>
    3dbc:	2104      	movs	r1, #4
    3dbe:	e7bc      	b.n	3d3a <_usb_d_dev_ep_enable+0x162>
    3dc0:	2103      	movs	r1, #3
    3dc2:	e7ba      	b.n	3d3a <_usb_d_dev_ep_enable+0x162>
    3dc4:	2102      	movs	r1, #2
    3dc6:	e7b8      	b.n	3d3a <_usb_d_dev_ep_enable+0x162>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3dc8:	2170      	movs	r1, #112	; 0x70
    3dca:	4221      	tst	r1, r4
    3dcc:	d000      	beq.n	3dd0 <_usb_d_dev_ep_enable+0x1f8>
    3dce:	e06c      	b.n	3eaa <_usb_d_dev_ep_enable+0x2d2>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    3dd0:	483a      	ldr	r0, [pc, #232]	; (3ebc <_usb_d_dev_ep_enable+0x2e4>)
    3dd2:	0095      	lsls	r5, r2, #2
    3dd4:	18af      	adds	r7, r5, r2
    3dd6:	00b9      	lsls	r1, r7, #2
    3dd8:	1841      	adds	r1, r0, r1
    3dda:	3120      	adds	r1, #32
    3ddc:	79c9      	ldrb	r1, [r1, #7]
    3dde:	0749      	lsls	r1, r1, #29
    3de0:	0e49      	lsrs	r1, r1, #25
    3de2:	430c      	orrs	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3de4:	0019      	movs	r1, r3
    3de6:	3108      	adds	r1, #8
    3de8:	0149      	lsls	r1, r1, #5
    3dea:	4f33      	ldr	r7, [pc, #204]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3dec:	55cc      	strb	r4, [r1, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3dee:	18aa      	adds	r2, r5, r2
    3df0:	0091      	lsls	r1, r2, #2
    3df2:	1840      	adds	r0, r0, r1
    3df4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    3df6:	048a      	lsls	r2, r1, #18
    3df8:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3dfa:	2080      	movs	r0, #128	; 0x80
    3dfc:	0080      	lsls	r0, r0, #2
    3dfe:	4281      	cmp	r1, r0
    3e00:	d810      	bhi.n	3e24 <_usb_d_dev_ep_enable+0x24c>
    3e02:	3801      	subs	r0, #1
    3e04:	38ff      	subs	r0, #255	; 0xff
    3e06:	4281      	cmp	r1, r0
    3e08:	d81f      	bhi.n	3e4a <_usb_d_dev_ep_enable+0x272>
    3e0a:	2980      	cmp	r1, #128	; 0x80
    3e0c:	d81f      	bhi.n	3e4e <_usb_d_dev_ep_enable+0x276>
    3e0e:	2940      	cmp	r1, #64	; 0x40
    3e10:	d81f      	bhi.n	3e52 <_usb_d_dev_ep_enable+0x27a>
    3e12:	2920      	cmp	r1, #32
    3e14:	d81f      	bhi.n	3e56 <_usb_d_dev_ep_enable+0x27e>
    3e16:	2910      	cmp	r1, #16
    3e18:	d81f      	bhi.n	3e5a <_usb_d_dev_ep_enable+0x282>
    3e1a:	38f8      	subs	r0, #248	; 0xf8
    3e1c:	4288      	cmp	r0, r1
    3e1e:	4189      	sbcs	r1, r1
    3e20:	4249      	negs	r1, r1
    3e22:	e000      	b.n	3e26 <_usb_d_dev_ep_enable+0x24e>
    3e24:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e26:	0709      	lsls	r1, r1, #28
    3e28:	430a      	orrs	r2, r1
    3e2a:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e2c:	001a      	movs	r2, r3
    3e2e:	3208      	adds	r2, #8
    3e30:	0152      	lsls	r2, r2, #5
    3e32:	4921      	ldr	r1, [pc, #132]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3e34:	468c      	mov	ip, r1
    3e36:	4462      	add	r2, ip
    3e38:	2180      	movs	r1, #128	; 0x80
    3e3a:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    3e3c:	015a      	lsls	r2, r3, #5
    3e3e:	4b20      	ldr	r3, [pc, #128]	; (3ec0 <_usb_d_dev_ep_enable+0x2e8>)
    3e40:	189b      	adds	r3, r3, r2
    3e42:	2200      	movs	r2, #0
    3e44:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    3e46:	2000      	movs	r0, #0
    3e48:	e01b      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e4a:	2106      	movs	r1, #6
    3e4c:	e7eb      	b.n	3e26 <_usb_d_dev_ep_enable+0x24e>
    3e4e:	2105      	movs	r1, #5
    3e50:	e7e9      	b.n	3e26 <_usb_d_dev_ep_enable+0x24e>
    3e52:	2104      	movs	r1, #4
    3e54:	e7e7      	b.n	3e26 <_usb_d_dev_ep_enable+0x24e>
    3e56:	2103      	movs	r1, #3
    3e58:	e7e5      	b.n	3e26 <_usb_d_dev_ep_enable+0x24e>
    3e5a:	2102      	movs	r1, #2
    3e5c:	e7e3      	b.n	3e26 <_usb_d_dev_ep_enable+0x24e>
    3e5e:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3e60:	0709      	lsls	r1, r1, #28
    3e62:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3e64:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3e66:	001a      	movs	r2, r3
    3e68:	3208      	adds	r2, #8
    3e6a:	0152      	lsls	r2, r2, #5
    3e6c:	4912      	ldr	r1, [pc, #72]	; (3eb8 <_usb_d_dev_ep_enable+0x2e0>)
    3e6e:	468c      	mov	ip, r1
    3e70:	4462      	add	r2, ip
    3e72:	2140      	movs	r1, #64	; 0x40
    3e74:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    3e76:	015b      	lsls	r3, r3, #5
    3e78:	4a11      	ldr	r2, [pc, #68]	; (3ec0 <_usb_d_dev_ep_enable+0x2e8>)
    3e7a:	18d3      	adds	r3, r2, r3
    3e7c:	2200      	movs	r2, #0
    3e7e:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    3e80:	2000      	movs	r0, #0
}
    3e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3e84:	2106      	movs	r1, #6
    3e86:	e7eb      	b.n	3e60 <_usb_d_dev_ep_enable+0x288>
    3e88:	2105      	movs	r1, #5
    3e8a:	e7e9      	b.n	3e60 <_usb_d_dev_ep_enable+0x288>
    3e8c:	2104      	movs	r1, #4
    3e8e:	e7e7      	b.n	3e60 <_usb_d_dev_ep_enable+0x288>
    3e90:	2103      	movs	r1, #3
    3e92:	e7e5      	b.n	3e60 <_usb_d_dev_ep_enable+0x288>
    3e94:	2102      	movs	r1, #2
    3e96:	e7e3      	b.n	3e60 <_usb_d_dev_ep_enable+0x288>
		return -USB_ERR_PARAM;
    3e98:	2012      	movs	r0, #18
    3e9a:	4240      	negs	r0, r0
    3e9c:	e7f1      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
    3e9e:	2012      	movs	r0, #18
    3ea0:	4240      	negs	r0, r0
    3ea2:	e7ee      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    3ea4:	2014      	movs	r0, #20
    3ea6:	4240      	negs	r0, r0
    3ea8:	e7eb      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    3eaa:	2014      	movs	r0, #20
    3eac:	4240      	negs	r0, r0
    3eae:	e7e8      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
			return -USB_ERR_REDO;
    3eb0:	2014      	movs	r0, #20
    3eb2:	4240      	negs	r0, r0
    3eb4:	e7e5      	b.n	3e82 <_usb_d_dev_ep_enable+0x2aa>
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	41005000 	.word	0x41005000
    3ebc:	200007c0 	.word	0x200007c0
    3ec0:	200006c0 	.word	0x200006c0
    3ec4:	0fffc000 	.word	0x0fffc000
    3ec8:	f0003fff 	.word	0xf0003fff
    3ecc:	41005109 	.word	0x41005109

00003ed0 <_usb_d_dev_ep_stall>:
{
    3ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3ed2:	230f      	movs	r3, #15
    3ed4:	4003      	ands	r3, r0
    3ed6:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    3ed8:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3eda:	2b00      	cmp	r3, #0
    3edc:	d005      	beq.n	3eea <_usb_d_dev_ep_stall+0x1a>
    3ede:	2800      	cmp	r0, #0
    3ee0:	db01      	blt.n	3ee6 <_usb_d_dev_ep_stall+0x16>
    3ee2:	001a      	movs	r2, r3
    3ee4:	e002      	b.n	3eec <_usb_d_dev_ep_stall+0x1c>
    3ee6:	1dda      	adds	r2, r3, #7
    3ee8:	e000      	b.n	3eec <_usb_d_dev_ep_stall+0x1c>
    3eea:	001a      	movs	r2, r3
	return &dev_inst.ep[ep_index];
    3eec:	0015      	movs	r5, r2
    3eee:	0090      	lsls	r0, r2, #2
    3ef0:	1880      	adds	r0, r0, r2
    3ef2:	0082      	lsls	r2, r0, #2
    3ef4:	3210      	adds	r2, #16
    3ef6:	4845      	ldr	r0, [pc, #276]	; (400c <_usb_d_dev_ep_stall+0x13c>)
    3ef8:	1882      	adds	r2, r0, r2
    3efa:	3204      	adds	r2, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    3efc:	2b07      	cmp	r3, #7
    3efe:	d900      	bls.n	3f02 <_usb_d_dev_ep_stall+0x32>
    3f00:	e080      	b.n	4004 <_usb_d_dev_ep_stall+0x134>
	if (USB_EP_STALL_SET == ctrl) {
    3f02:	2901      	cmp	r1, #1
    3f04:	d017      	beq.n	3f36 <_usb_d_dev_ep_stall+0x66>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3f06:	2900      	cmp	r1, #0
    3f08:	d039      	beq.n	3f7e <_usb_d_dev_ep_stall+0xae>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f0a:	00aa      	lsls	r2, r5, #2
    3f0c:	1952      	adds	r2, r2, r5
    3f0e:	0091      	lsls	r1, r2, #2
    3f10:	4b3e      	ldr	r3, [pc, #248]	; (400c <_usb_d_dev_ep_stall+0x13c>)
    3f12:	185b      	adds	r3, r3, r1
    3f14:	3326      	adds	r3, #38	; 0x26
    3f16:	781a      	ldrb	r2, [r3, #0]
    3f18:	230f      	movs	r3, #15
    3f1a:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3f1c:	3308      	adds	r3, #8
    3f1e:	015b      	lsls	r3, r3, #5
    3f20:	4a3b      	ldr	r2, [pc, #236]	; (4010 <_usb_d_dev_ep_stall+0x140>)
    3f22:	4694      	mov	ip, r2
    3f24:	4463      	add	r3, ip
    3f26:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f28:	2310      	movs	r3, #16
    3f2a:	40a3      	lsls	r3, r4
    3f2c:	4018      	ands	r0, r3
    3f2e:	1e43      	subs	r3, r0, #1
    3f30:	4198      	sbcs	r0, r3
    3f32:	b2c0      	uxtb	r0, r0
}
    3f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3f36:	00aa      	lsls	r2, r5, #2
    3f38:	1951      	adds	r1, r2, r5
    3f3a:	008b      	lsls	r3, r1, #2
    3f3c:	18c3      	adds	r3, r0, r3
    3f3e:	3326      	adds	r3, #38	; 0x26
    3f40:	781b      	ldrb	r3, [r3, #0]
    3f42:	210f      	movs	r1, #15
    3f44:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f46:	2610      	movs	r6, #16
    3f48:	40a6      	lsls	r6, r4
    3f4a:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3f4c:	0019      	movs	r1, r3
    3f4e:	3108      	adds	r1, #8
    3f50:	0149      	lsls	r1, r1, #5
    3f52:	4f2f      	ldr	r7, [pc, #188]	; (4010 <_usb_d_dev_ep_stall+0x140>)
    3f54:	46bc      	mov	ip, r7
    3f56:	4461      	add	r1, ip
    3f58:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3f5a:	2120      	movs	r1, #32
    3f5c:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3f5e:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3f60:	0159      	lsls	r1, r3, #5
    3f62:	4b2c      	ldr	r3, [pc, #176]	; (4014 <_usb_d_dev_ep_stall+0x144>)
    3f64:	469c      	mov	ip, r3
    3f66:	4461      	add	r1, ip
    3f68:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    3f6a:	1952      	adds	r2, r2, r5
    3f6c:	0093      	lsls	r3, r2, #2
    3f6e:	18c3      	adds	r3, r0, r3
    3f70:	3320      	adds	r3, #32
    3f72:	79da      	ldrb	r2, [r3, #7]
    3f74:	2108      	movs	r1, #8
    3f76:	430a      	orrs	r2, r1
    3f78:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3f7a:	2000      	movs	r0, #0
    3f7c:	e7da      	b.n	3f34 <_usb_d_dev_ep_stall+0x64>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3f7e:	7c93      	ldrb	r3, [r2, #18]
    3f80:	310f      	adds	r1, #15
    3f82:	400b      	ands	r3, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3f84:	0019      	movs	r1, r3
    3f86:	3108      	adds	r1, #8
    3f88:	0149      	lsls	r1, r1, #5
    3f8a:	4821      	ldr	r0, [pc, #132]	; (4010 <_usb_d_dev_ep_stall+0x140>)
    3f8c:	4684      	mov	ip, r0
    3f8e:	4461      	add	r1, ip
    3f90:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f92:	2110      	movs	r1, #16
    3f94:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    3f96:	4208      	tst	r0, r1
    3f98:	d024      	beq.n	3fe4 <_usb_d_dev_ep_stall+0x114>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3f9a:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3f9c:	0018      	movs	r0, r3
    3f9e:	3008      	adds	r0, #8
    3fa0:	0140      	lsls	r0, r0, #5
    3fa2:	4460      	add	r0, ip
    3fa4:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3fa6:	2120      	movs	r1, #32
    3fa8:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3faa:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3fac:	015d      	lsls	r5, r3, #5
    3fae:	4f1a      	ldr	r7, [pc, #104]	; (4018 <_usb_d_dev_ep_stall+0x148>)
    3fb0:	46bc      	mov	ip, r7
    3fb2:	4465      	add	r5, ip
    3fb4:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3fb6:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3fb8:	4208      	tst	r0, r1
    3fba:	d00a      	beq.n	3fd2 <_usb_d_dev_ep_stall+0x102>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3fbc:	0019      	movs	r1, r3
    3fbe:	3108      	adds	r1, #8
    3fc0:	0149      	lsls	r1, r1, #5
    3fc2:	4813      	ldr	r0, [pc, #76]	; (4010 <_usb_d_dev_ep_stall+0x140>)
    3fc4:	4684      	mov	ip, r0
    3fc6:	4461      	add	r1, ip
    3fc8:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3fca:	2001      	movs	r0, #1
    3fcc:	40a0      	lsls	r0, r4
    3fce:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3fd0:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3fd2:	7cd0      	ldrb	r0, [r2, #19]
    3fd4:	2107      	movs	r1, #7
    3fd6:	4001      	ands	r1, r0
    3fd8:	2901      	cmp	r1, #1
    3fda:	d005      	beq.n	3fe8 <_usb_d_dev_ep_stall+0x118>
		ept->flags.bits.is_stalled = 0;
    3fdc:	7cd3      	ldrb	r3, [r2, #19]
    3fde:	2108      	movs	r1, #8
    3fe0:	438b      	bics	r3, r1
    3fe2:	74d3      	strb	r3, [r2, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3fe4:	2000      	movs	r0, #0
    3fe6:	e7a5      	b.n	3f34 <_usb_d_dev_ep_stall+0x64>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3fe8:	3308      	adds	r3, #8
    3fea:	015b      	lsls	r3, r3, #5
    3fec:	4908      	ldr	r1, [pc, #32]	; (4010 <_usb_d_dev_ep_stall+0x140>)
    3fee:	468c      	mov	ip, r1
    3ff0:	4463      	add	r3, ip
    3ff2:	7999      	ldrb	r1, [r3, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    3ff4:	2330      	movs	r3, #48	; 0x30
    3ff6:	4219      	tst	r1, r3
    3ff8:	d1f4      	bne.n	3fe4 <_usb_d_dev_ep_stall+0x114>
			ept->flags.bits.is_stalled = 0;
    3ffa:	0003      	movs	r3, r0
    3ffc:	2108      	movs	r1, #8
    3ffe:	438b      	bics	r3, r1
    4000:	74d3      	strb	r3, [r2, #19]
    4002:	e7ef      	b.n	3fe4 <_usb_d_dev_ep_stall+0x114>
		return -USB_ERR_PARAM;
    4004:	2012      	movs	r0, #18
    4006:	4240      	negs	r0, r0
    4008:	e794      	b.n	3f34 <_usb_d_dev_ep_stall+0x64>
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	200007c0 	.word	0x200007c0
    4010:	41005000 	.word	0x41005000
    4014:	41005109 	.word	0x41005109
    4018:	41005108 	.word	0x41005108

0000401c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    401c:	b570      	push	{r4, r5, r6, lr}
    401e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    4020:	240f      	movs	r4, #15
    4022:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4024:	0162      	lsls	r2, r4, #5
    4026:	4b18      	ldr	r3, [pc, #96]	; (4088 <_usb_d_dev_ep_read_req+0x6c>)
    4028:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    402a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    402c:	685d      	ldr	r5, [r3, #4]
    402e:	04ad      	lsls	r5, r5, #18
    4030:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4032:	2c07      	cmp	r4, #7
    4034:	d81f      	bhi.n	4076 <_usb_d_dev_ep_read_req+0x5a>
    4036:	2e00      	cmp	r6, #0
    4038:	d020      	beq.n	407c <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    403a:	0023      	movs	r3, r4
    403c:	3308      	adds	r3, #8
    403e:	015b      	lsls	r3, r3, #5
    4040:	4a12      	ldr	r2, [pc, #72]	; (408c <_usb_d_dev_ep_read_req+0x70>)
    4042:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4044:	2b11      	cmp	r3, #17
    4046:	d11c      	bne.n	4082 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4048:	0023      	movs	r3, r4
    404a:	3308      	adds	r3, #8
    404c:	015b      	lsls	r3, r3, #5
    404e:	4694      	mov	ip, r2
    4050:	4463      	add	r3, ip
    4052:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    4054:	06db      	lsls	r3, r3, #27
    4056:	d401      	bmi.n	405c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    4058:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    405a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    405c:	2208      	movs	r2, #8
    405e:	0030      	movs	r0, r6
    4060:	4b0b      	ldr	r3, [pc, #44]	; (4090 <_usb_d_dev_ep_read_req+0x74>)
    4062:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4064:	3408      	adds	r4, #8
    4066:	0164      	lsls	r4, r4, #5
    4068:	4b08      	ldr	r3, [pc, #32]	; (408c <_usb_d_dev_ep_read_req+0x70>)
    406a:	469c      	mov	ip, r3
    406c:	4464      	add	r4, ip
    406e:	2310      	movs	r3, #16
    4070:	71e3      	strb	r3, [r4, #7]
	return bytes;
    4072:	0028      	movs	r0, r5
    4074:	e7f1      	b.n	405a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    4076:	2012      	movs	r0, #18
    4078:	4240      	negs	r0, r0
    407a:	e7ee      	b.n	405a <_usb_d_dev_ep_read_req+0x3e>
    407c:	2012      	movs	r0, #18
    407e:	4240      	negs	r0, r0
    4080:	e7eb      	b.n	405a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    4082:	2013      	movs	r0, #19
    4084:	4240      	negs	r0, r0
    4086:	e7e8      	b.n	405a <_usb_d_dev_ep_read_req+0x3e>
    4088:	200006c0 	.word	0x200006c0
    408c:	41005000 	.word	0x41005000
    4090:	00007165 	.word	0x00007165

00004094 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4094:	b5f0      	push	{r4, r5, r6, r7, lr}
    4096:	46de      	mov	lr, fp
    4098:	4657      	mov	r7, sl
    409a:	464e      	mov	r6, r9
    409c:	4645      	mov	r5, r8
    409e:	b5e0      	push	{r5, r6, r7, lr}
    40a0:	b085      	sub	sp, #20
    40a2:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    40a4:	7a05      	ldrb	r5, [r0, #8]
    40a6:	230f      	movs	r3, #15
    40a8:	402b      	ands	r3, r5
    40aa:	b26d      	sxtb	r5, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    40ac:	0fea      	lsrs	r2, r5, #31
    40ae:	4691      	mov	r9, r2
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    40b0:	2b00      	cmp	r3, #0
    40b2:	d005      	beq.n	40c0 <_usb_d_dev_ep_trans+0x2c>
    40b4:	2d00      	cmp	r5, #0
    40b6:	db01      	blt.n	40bc <_usb_d_dev_ep_trans+0x28>
    40b8:	0018      	movs	r0, r3
    40ba:	e002      	b.n	40c2 <_usb_d_dev_ep_trans+0x2e>
    40bc:	1dd8      	adds	r0, r3, #7
    40be:	e000      	b.n	40c2 <_usb_d_dev_ep_trans+0x2e>
    40c0:	0018      	movs	r0, r3
	return &dev_inst.ep[ep_index];
    40c2:	0006      	movs	r6, r0
    40c4:	495f      	ldr	r1, [pc, #380]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    40c6:	0082      	lsls	r2, r0, #2
    40c8:	1817      	adds	r7, r2, r0
    40ca:	00bc      	lsls	r4, r7, #2
    40cc:	3410      	adds	r4, #16
    40ce:	190c      	adds	r4, r1, r4
    40d0:	3404      	adds	r4, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    40d2:	00b8      	lsls	r0, r7, #2
    40d4:	1809      	adds	r1, r1, r0
    40d6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    40d8:	495b      	ldr	r1, [pc, #364]	; (4248 <_usb_d_dev_ep_trans+0x1b4>)
    40da:	428a      	cmp	r2, r1
    40dc:	d042      	beq.n	4164 <_usb_d_dev_ep_trans+0xd0>
    40de:	1e57      	subs	r7, r2, #1
    40e0:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    40e2:	4641      	mov	r1, r8
    40e4:	6849      	ldr	r1, [r1, #4]
    40e6:	400f      	ands	r7, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    40e8:	2b07      	cmp	r3, #7
    40ea:	d900      	bls.n	40ee <_usb_d_dev_ep_trans+0x5a>
    40ec:	e0a1      	b.n	4232 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    40ee:	4643      	mov	r3, r8
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	4856      	ldr	r0, [pc, #344]	; (424c <_usb_d_dev_ep_trans+0x1b8>)
    40f4:	4283      	cmp	r3, r0
    40f6:	d90c      	bls.n	4112 <_usb_d_dev_ep_trans+0x7e>
    40f8:	18c8      	adds	r0, r1, r3
    40fa:	9001      	str	r0, [sp, #4]
    40fc:	4854      	ldr	r0, [pc, #336]	; (4250 <_usb_d_dev_ep_trans+0x1bc>)
    40fe:	4684      	mov	ip, r0
    4100:	9801      	ldr	r0, [sp, #4]
    4102:	4560      	cmp	r0, ip
    4104:	d805      	bhi.n	4112 <_usb_d_dev_ep_trans+0x7e>
    4106:	079b      	lsls	r3, r3, #30
    4108:	d103      	bne.n	4112 <_usb_d_dev_ep_trans+0x7e>
	    || (!dir && (trans->size < ept->size))) {
    410a:	2d00      	cmp	r5, #0
    410c:	db2c      	blt.n	4168 <_usb_d_dev_ep_trans+0xd4>
    410e:	4291      	cmp	r1, r2
    4110:	d22d      	bcs.n	416e <_usb_d_dev_ep_trans+0xda>
		if (!ept->cache) {
    4112:	00b3      	lsls	r3, r6, #2
    4114:	199b      	adds	r3, r3, r6
    4116:	009a      	lsls	r2, r3, #2
    4118:	4b4a      	ldr	r3, [pc, #296]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    411a:	189b      	adds	r3, r3, r2
    411c:	6a1b      	ldr	r3, [r3, #32]
    411e:	2b00      	cmp	r3, #0
    4120:	d100      	bne.n	4124 <_usb_d_dev_ep_trans+0x90>
    4122:	e089      	b.n	4238 <_usb_d_dev_ep_trans+0x1a4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    4124:	2301      	movs	r3, #1
    4126:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    4128:	2d00      	cmp	r5, #0
    412a:	db0a      	blt.n	4142 <_usb_d_dev_ep_trans+0xae>
    412c:	2f00      	cmp	r7, #0
    412e:	d008      	beq.n	4142 <_usb_d_dev_ep_trans+0xae>
		if (!ept->cache) {
    4130:	00b3      	lsls	r3, r6, #2
    4132:	199b      	adds	r3, r3, r6
    4134:	009a      	lsls	r2, r3, #2
    4136:	4b43      	ldr	r3, [pc, #268]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    4138:	189b      	adds	r3, r3, r2
    413a:	6a1b      	ldr	r3, [r3, #32]
    413c:	2b00      	cmp	r3, #0
    413e:	d100      	bne.n	4142 <_usb_d_dev_ep_trans+0xae>
    4140:	e07d      	b.n	423e <_usb_d_dev_ep_trans+0x1aa>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    4142:	00b2      	lsls	r2, r6, #2
    4144:	1992      	adds	r2, r2, r6
    4146:	0091      	lsls	r1, r2, #2
    4148:	4b3e      	ldr	r3, [pc, #248]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    414a:	185b      	adds	r3, r3, r1
    414c:	3320      	adds	r3, #32
    414e:	79db      	ldrb	r3, [r3, #7]
    4150:	071b      	lsls	r3, r3, #28
    4152:	d50f      	bpl.n	4174 <_usb_d_dev_ep_trans+0xe0>
		return USB_HALTED;
    4154:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    4156:	b005      	add	sp, #20
    4158:	bc3c      	pop	{r2, r3, r4, r5}
    415a:	4690      	mov	r8, r2
    415c:	4699      	mov	r9, r3
    415e:	46a2      	mov	sl, r4
    4160:	46ab      	mov	fp, r5
    4162:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4164:	0017      	movs	r7, r2
    4166:	e7bc      	b.n	40e2 <_usb_d_dev_ep_trans+0x4e>
	bool use_cache = false;
    4168:	2300      	movs	r3, #0
    416a:	9301      	str	r3, [sp, #4]
    416c:	e7dc      	b.n	4128 <_usb_d_dev_ep_trans+0x94>
    416e:	2300      	movs	r3, #0
    4170:	9301      	str	r3, [sp, #4]
    4172:	e7d9      	b.n	4128 <_usb_d_dev_ep_trans+0x94>
	atomic_enter_critical(&flags);
    4174:	a803      	add	r0, sp, #12
    4176:	4b37      	ldr	r3, [pc, #220]	; (4254 <_usb_d_dev_ep_trans+0x1c0>)
    4178:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    417a:	00b2      	lsls	r2, r6, #2
    417c:	1992      	adds	r2, r2, r6
    417e:	0091      	lsls	r1, r2, #2
    4180:	4b30      	ldr	r3, [pc, #192]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    4182:	185b      	adds	r3, r3, r1
    4184:	3320      	adds	r3, #32
    4186:	79db      	ldrb	r3, [r3, #7]
    4188:	065b      	lsls	r3, r3, #25
    418a:	d430      	bmi.n	41ee <_usb_d_dev_ep_trans+0x15a>
	ept->flags.bits.is_busy = 1;
    418c:	00b3      	lsls	r3, r6, #2
    418e:	199b      	adds	r3, r3, r6
    4190:	009a      	lsls	r2, r3, #2
    4192:	4b2c      	ldr	r3, [pc, #176]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    4194:	469b      	mov	fp, r3
    4196:	4493      	add	fp, r2
    4198:	2320      	movs	r3, #32
    419a:	445b      	add	r3, fp
    419c:	469a      	mov	sl, r3
    419e:	79db      	ldrb	r3, [r3, #7]
    41a0:	2240      	movs	r2, #64	; 0x40
    41a2:	4313      	orrs	r3, r2
    41a4:	4652      	mov	r2, sl
    41a6:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    41a8:	a803      	add	r0, sp, #12
    41aa:	4b2b      	ldr	r3, [pc, #172]	; (4258 <_usb_d_dev_ep_trans+0x1c4>)
    41ac:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    41ae:	465b      	mov	r3, fp
    41b0:	4642      	mov	r2, r8
    41b2:	6812      	ldr	r2, [r2, #0]
    41b4:	615a      	str	r2, [r3, #20]
	ept->trans_size  = trans->size;
    41b6:	4642      	mov	r2, r8
    41b8:	6852      	ldr	r2, [r2, #4]
    41ba:	619a      	str	r2, [r3, #24]
	ept->trans_count = 0;
    41bc:	2300      	movs	r3, #0
    41be:	465a      	mov	r2, fp
    41c0:	61d3      	str	r3, [r2, #28]
	ept->flags.bits.dir       = dir;
    41c2:	464b      	mov	r3, r9
    41c4:	01db      	lsls	r3, r3, #7
    41c6:	4652      	mov	r2, sl
    41c8:	79d2      	ldrb	r2, [r2, #7]
    41ca:	217f      	movs	r1, #127	; 0x7f
    41cc:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    41ce:	9a01      	ldr	r2, [sp, #4]
    41d0:	0152      	lsls	r2, r2, #5
    41d2:	430b      	orrs	r3, r1
    41d4:	2120      	movs	r1, #32
    41d6:	438b      	bics	r3, r1
    41d8:	431a      	orrs	r2, r3
    41da:	4653      	mov	r3, sl
    41dc:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    41de:	4643      	mov	r3, r8
    41e0:	7a5b      	ldrb	r3, [r3, #9]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d008      	beq.n	41f8 <_usb_d_dev_ep_trans+0x164>
    41e6:	2f00      	cmp	r7, #0
    41e8:	d01b      	beq.n	4222 <_usb_d_dev_ep_trans+0x18e>
    41ea:	2200      	movs	r2, #0
    41ec:	e005      	b.n	41fa <_usb_d_dev_ep_trans+0x166>
		atomic_leave_critical(&flags);
    41ee:	a803      	add	r0, sp, #12
    41f0:	4b19      	ldr	r3, [pc, #100]	; (4258 <_usb_d_dev_ep_trans+0x1c4>)
    41f2:	4798      	blx	r3
		return USB_BUSY;
    41f4:	2001      	movs	r0, #1
    41f6:	e7ae      	b.n	4156 <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    41f8:	2200      	movs	r2, #0
    41fa:	00b3      	lsls	r3, r6, #2
    41fc:	199e      	adds	r6, r3, r6
    41fe:	00b1      	lsls	r1, r6, #2
    4200:	4b10      	ldr	r3, [pc, #64]	; (4244 <_usb_d_dev_ep_trans+0x1b0>)
    4202:	185b      	adds	r3, r3, r1
    4204:	3320      	adds	r3, #32
    4206:	0111      	lsls	r1, r2, #4
    4208:	79da      	ldrb	r2, [r3, #7]
    420a:	2010      	movs	r0, #16
    420c:	4382      	bics	r2, r0
    420e:	430a      	orrs	r2, r1
    4210:	71da      	strb	r2, [r3, #7]
	if (dir) {
    4212:	2d00      	cmp	r5, #0
    4214:	db07      	blt.n	4226 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    4216:	2100      	movs	r1, #0
    4218:	0020      	movs	r0, r4
    421a:	4b10      	ldr	r3, [pc, #64]	; (425c <_usb_d_dev_ep_trans+0x1c8>)
    421c:	4798      	blx	r3
	return ERR_NONE;
    421e:	2000      	movs	r0, #0
    4220:	e799      	b.n	4156 <_usb_d_dev_ep_trans+0xc2>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4222:	2201      	movs	r2, #1
    4224:	e7e9      	b.n	41fa <_usb_d_dev_ep_trans+0x166>
		_usb_d_dev_in_next(ept, false);
    4226:	2100      	movs	r1, #0
    4228:	0020      	movs	r0, r4
    422a:	4b0d      	ldr	r3, [pc, #52]	; (4260 <_usb_d_dev_ep_trans+0x1cc>)
    422c:	4798      	blx	r3
	return ERR_NONE;
    422e:	2000      	movs	r0, #0
    4230:	e791      	b.n	4156 <_usb_d_dev_ep_trans+0xc2>
		return -USB_ERR_PARAM;
    4232:	2012      	movs	r0, #18
    4234:	4240      	negs	r0, r0
    4236:	e78e      	b.n	4156 <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_FUNC;
    4238:	2013      	movs	r0, #19
    423a:	4240      	negs	r0, r0
    423c:	e78b      	b.n	4156 <_usb_d_dev_ep_trans+0xc2>
			return -USB_ERR_PARAM;
    423e:	2012      	movs	r0, #18
    4240:	4240      	negs	r0, r0
    4242:	e788      	b.n	4156 <_usb_d_dev_ep_trans+0xc2>
    4244:	200007c0 	.word	0x200007c0
    4248:	000003ff 	.word	0x000003ff
    424c:	1fffffff 	.word	0x1fffffff
    4250:	20007fff 	.word	0x20007fff
    4254:	000013bd 	.word	0x000013bd
    4258:	000013cb 	.word	0x000013cb
    425c:	0000346d 	.word	0x0000346d
    4260:	000032dd 	.word	0x000032dd

00004264 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    4264:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    4266:	230f      	movs	r3, #15
    4268:	4003      	ands	r3, r0
    426a:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    426c:	0fc1      	lsrs	r1, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    426e:	2b00      	cmp	r3, #0
    4270:	d005      	beq.n	427e <_usb_d_dev_ep_abort+0x1a>
    4272:	2800      	cmp	r0, #0
    4274:	db01      	blt.n	427a <_usb_d_dev_ep_abort+0x16>
    4276:	0018      	movs	r0, r3
    4278:	e002      	b.n	4280 <_usb_d_dev_ep_abort+0x1c>
    427a:	1dd8      	adds	r0, r3, #7
    427c:	e000      	b.n	4280 <_usb_d_dev_ep_abort+0x1c>
    427e:	0018      	movs	r0, r3
	return &dev_inst.ep[ep_index];
    4280:	0082      	lsls	r2, r0, #2
    4282:	1812      	adds	r2, r2, r0
    4284:	0090      	lsls	r0, r2, #2
    4286:	0002      	movs	r2, r0
    4288:	3210      	adds	r2, #16
    428a:	4805      	ldr	r0, [pc, #20]	; (42a0 <_usb_d_dev_ep_abort+0x3c>)
    428c:	1880      	adds	r0, r0, r2
    428e:	3004      	adds	r0, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    4290:	2b07      	cmp	r3, #7
    4292:	d900      	bls.n	4296 <_usb_d_dev_ep_abort+0x32>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    4294:	bd10      	pop	{r4, pc}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    4296:	2202      	movs	r2, #2
    4298:	4b02      	ldr	r3, [pc, #8]	; (42a4 <_usb_d_dev_ep_abort+0x40>)
    429a:	4798      	blx	r3
    429c:	e7fa      	b.n	4294 <_usb_d_dev_ep_abort+0x30>
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	200007c0 	.word	0x200007c0
    42a4:	000030f9 	.word	0x000030f9

000042a8 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    42a8:	2900      	cmp	r1, #0
    42aa:	d006      	beq.n	42ba <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    42ac:	2801      	cmp	r0, #1
    42ae:	d006      	beq.n	42be <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    42b0:	2800      	cmp	r0, #0
    42b2:	d101      	bne.n	42b8 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    42b4:	4b03      	ldr	r3, [pc, #12]	; (42c4 <_usb_d_dev_register_callback+0x1c>)
    42b6:	6019      	str	r1, [r3, #0]
	}
}
    42b8:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    42ba:	4903      	ldr	r1, [pc, #12]	; (42c8 <_usb_d_dev_register_callback+0x20>)
    42bc:	e7f6      	b.n	42ac <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    42be:	4b01      	ldr	r3, [pc, #4]	; (42c4 <_usb_d_dev_register_callback+0x1c>)
    42c0:	6059      	str	r1, [r3, #4]
    42c2:	e7f9      	b.n	42b8 <_usb_d_dev_register_callback+0x10>
    42c4:	200007c0 	.word	0x200007c0
    42c8:	00002fb9 	.word	0x00002fb9

000042cc <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    42cc:	2900      	cmp	r1, #0
    42ce:	d008      	beq.n	42e2 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    42d0:	2800      	cmp	r0, #0
    42d2:	d008      	beq.n	42e6 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    42d4:	2801      	cmp	r0, #1
    42d6:	d009      	beq.n	42ec <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    42d8:	2802      	cmp	r0, #2
    42da:	d106      	bne.n	42ea <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    42dc:	4b05      	ldr	r3, [pc, #20]	; (42f4 <_usb_d_dev_register_ep_callback+0x28>)
    42de:	6119      	str	r1, [r3, #16]
	}
}
    42e0:	e003      	b.n	42ea <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    42e2:	4905      	ldr	r1, [pc, #20]	; (42f8 <_usb_d_dev_register_ep_callback+0x2c>)
    42e4:	e7f4      	b.n	42d0 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    42e6:	4b03      	ldr	r3, [pc, #12]	; (42f4 <_usb_d_dev_register_ep_callback+0x28>)
    42e8:	6099      	str	r1, [r3, #8]
}
    42ea:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    42ec:	4b01      	ldr	r3, [pc, #4]	; (42f4 <_usb_d_dev_register_ep_callback+0x28>)
    42ee:	60d9      	str	r1, [r3, #12]
    42f0:	e7fb      	b.n	42ea <_usb_d_dev_register_ep_callback+0x1e>
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	200007c0 	.word	0x200007c0
    42f8:	00002fb9 	.word	0x00002fb9

000042fc <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    42fc:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    42fe:	4b01      	ldr	r3, [pc, #4]	; (4304 <USB_Handler+0x8>)
    4300:	4798      	blx	r3
}
    4302:	bd10      	pop	{r4, pc}
    4304:	00003671 	.word	0x00003671

00004308 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4308:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    430a:	798b      	ldrb	r3, [r1, #6]
    430c:	79cc      	ldrb	r4, [r1, #7]
    430e:	0224      	lsls	r4, r4, #8
    4310:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    4312:	2a01      	cmp	r2, #1
    4314:	d00a      	beq.n	432c <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    4316:	784b      	ldrb	r3, [r1, #1]
    4318:	2b21      	cmp	r3, #33	; 0x21
    431a:	d109      	bne.n	4330 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    431c:	2c07      	cmp	r4, #7
    431e:	d10a      	bne.n	4336 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    4320:	2300      	movs	r3, #0
    4322:	0022      	movs	r2, r4
    4324:	4905      	ldr	r1, [pc, #20]	; (433c <cdcdf_acm_get_req+0x34>)
    4326:	4c06      	ldr	r4, [pc, #24]	; (4340 <cdcdf_acm_get_req+0x38>)
    4328:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    432a:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    432c:	2000      	movs	r0, #0
    432e:	e7fc      	b.n	432a <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    4330:	200d      	movs	r0, #13
    4332:	4240      	negs	r0, r0
    4334:	e7f9      	b.n	432a <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    4336:	2001      	movs	r0, #1
    4338:	4240      	negs	r0, r0
    433a:	e7f6      	b.n	432a <cdcdf_acm_get_req+0x22>
    433c:	20000b28 	.word	0x20000b28
    4340:	00004955 	.word	0x00004955

00004344 <cdcdf_acm_set_req>:
{
    4344:	b5f0      	push	{r4, r5, r6, r7, lr}
    4346:	b083      	sub	sp, #12
    4348:	0005      	movs	r5, r0
    434a:	000f      	movs	r7, r1
    434c:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    434e:	798e      	ldrb	r6, [r1, #6]
    4350:	79cb      	ldrb	r3, [r1, #7]
    4352:	021b      	lsls	r3, r3, #8
    4354:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    4356:	4b23      	ldr	r3, [pc, #140]	; (43e4 <cdcdf_acm_set_req+0xa0>)
    4358:	4798      	blx	r3
	switch (req->bRequest) {
    435a:	787b      	ldrb	r3, [r7, #1]
    435c:	2b20      	cmp	r3, #32
    435e:	d005      	beq.n	436c <cdcdf_acm_set_req+0x28>
    4360:	2b22      	cmp	r3, #34	; 0x22
    4362:	d026      	beq.n	43b2 <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    4364:	200d      	movs	r0, #13
    4366:	4240      	negs	r0, r0
}
    4368:	b003      	add	sp, #12
    436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    436c:	2e07      	cmp	r6, #7
    436e:	d131      	bne.n	43d4 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    4370:	2c00      	cmp	r4, #0
    4372:	d017      	beq.n	43a4 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    4374:	2207      	movs	r2, #7
    4376:	0001      	movs	r1, r0
    4378:	4668      	mov	r0, sp
    437a:	4b1b      	ldr	r3, [pc, #108]	; (43e8 <cdcdf_acm_set_req+0xa4>)
    437c:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    437e:	4b1b      	ldr	r3, [pc, #108]	; (43ec <cdcdf_acm_set_req+0xa8>)
    4380:	689b      	ldr	r3, [r3, #8]
    4382:	2b00      	cmp	r3, #0
    4384:	d003      	beq.n	438e <cdcdf_acm_set_req+0x4a>
    4386:	4668      	mov	r0, sp
    4388:	4798      	blx	r3
    438a:	2800      	cmp	r0, #0
    438c:	d025      	beq.n	43da <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    438e:	4b17      	ldr	r3, [pc, #92]	; (43ec <cdcdf_acm_set_req+0xa8>)
    4390:	9a00      	ldr	r2, [sp, #0]
    4392:	601a      	str	r2, [r3, #0]
    4394:	466a      	mov	r2, sp
    4396:	8892      	ldrh	r2, [r2, #4]
    4398:	809a      	strh	r2, [r3, #4]
    439a:	466a      	mov	r2, sp
    439c:	7992      	ldrb	r2, [r2, #6]
    439e:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    43a0:	2000      	movs	r0, #0
    43a2:	e7e1      	b.n	4368 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    43a4:	2300      	movs	r3, #0
    43a6:	0032      	movs	r2, r6
    43a8:	0001      	movs	r1, r0
    43aa:	0028      	movs	r0, r5
    43ac:	4c10      	ldr	r4, [pc, #64]	; (43f0 <cdcdf_acm_set_req+0xac>)
    43ae:	47a0      	blx	r4
    43b0:	e7da      	b.n	4368 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    43b2:	2300      	movs	r3, #0
    43b4:	2200      	movs	r2, #0
    43b6:	2100      	movs	r1, #0
    43b8:	2000      	movs	r0, #0
    43ba:	4c0d      	ldr	r4, [pc, #52]	; (43f0 <cdcdf_acm_set_req+0xac>)
    43bc:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    43be:	4b0b      	ldr	r3, [pc, #44]	; (43ec <cdcdf_acm_set_req+0xa8>)
    43c0:	68db      	ldr	r3, [r3, #12]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d00b      	beq.n	43de <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    43c6:	78ba      	ldrb	r2, [r7, #2]
    43c8:	78f8      	ldrb	r0, [r7, #3]
    43ca:	0200      	lsls	r0, r0, #8
    43cc:	4310      	orrs	r0, r2
    43ce:	4798      	blx	r3
		return ERR_NONE;
    43d0:	2000      	movs	r0, #0
    43d2:	e7c9      	b.n	4368 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    43d4:	2001      	movs	r0, #1
    43d6:	4240      	negs	r0, r0
    43d8:	e7c6      	b.n	4368 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    43da:	2000      	movs	r0, #0
    43dc:	e7c4      	b.n	4368 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    43de:	2000      	movs	r0, #0
    43e0:	e7c2      	b.n	4368 <cdcdf_acm_set_req+0x24>
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	00004ee1 	.word	0x00004ee1
    43e8:	00007165 	.word	0x00007165
    43ec:	20000b28 	.word	0x20000b28
    43f0:	00004955 	.word	0x00004955

000043f4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    43f4:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    43f6:	780c      	ldrb	r4, [r1, #0]
    43f8:	0965      	lsrs	r5, r4, #5
    43fa:	2303      	movs	r3, #3
    43fc:	402b      	ands	r3, r5
    43fe:	2b01      	cmp	r3, #1
    4400:	d114      	bne.n	442c <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    4402:	790d      	ldrb	r5, [r1, #4]
    4404:	794b      	ldrb	r3, [r1, #5]
    4406:	021b      	lsls	r3, r3, #8
    4408:	432b      	orrs	r3, r5
    440a:	4d0b      	ldr	r5, [pc, #44]	; (4438 <cdcdf_acm_req+0x44>)
    440c:	7c2d      	ldrb	r5, [r5, #16]
    440e:	42ab      	cmp	r3, r5
    4410:	d003      	beq.n	441a <cdcdf_acm_req+0x26>
    4412:	4d09      	ldr	r5, [pc, #36]	; (4438 <cdcdf_acm_req+0x44>)
    4414:	7c6d      	ldrb	r5, [r5, #17]
    4416:	42ab      	cmp	r3, r5
    4418:	d10b      	bne.n	4432 <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    441a:	b264      	sxtb	r4, r4
    441c:	2c00      	cmp	r4, #0
    441e:	db02      	blt.n	4426 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    4420:	4b06      	ldr	r3, [pc, #24]	; (443c <cdcdf_acm_req+0x48>)
    4422:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    4424:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    4426:	4b06      	ldr	r3, [pc, #24]	; (4440 <cdcdf_acm_req+0x4c>)
    4428:	4798      	blx	r3
    442a:	e7fb      	b.n	4424 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    442c:	200a      	movs	r0, #10
    442e:	4240      	negs	r0, r0
    4430:	e7f8      	b.n	4424 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    4432:	200a      	movs	r0, #10
    4434:	4240      	negs	r0, r0
    4436:	e7f5      	b.n	4424 <cdcdf_acm_req+0x30>
    4438:	20000b28 	.word	0x20000b28
    443c:	00004345 	.word	0x00004345
    4440:	00004309 	.word	0x00004309

00004444 <cdcdf_acm_enable>:
{
    4444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4446:	46ce      	mov	lr, r9
    4448:	4647      	mov	r7, r8
    444a:	b580      	push	{r7, lr}
    444c:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    444e:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    4450:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    4452:	2300      	movs	r3, #0
    4454:	4698      	mov	r8, r3
    4456:	4643      	mov	r3, r8
    4458:	2b01      	cmp	r3, #1
    445a:	d845      	bhi.n	44e8 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    445c:	2800      	cmp	r0, #0
    445e:	d04b      	beq.n	44f8 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    4460:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    4462:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    4464:	2a02      	cmp	r2, #2
    4466:	d001      	beq.n	446c <cdcdf_acm_enable+0x28>
    4468:	2a0a      	cmp	r2, #10
    446a:	d148      	bne.n	44fe <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    446c:	46c1      	mov	r9, r8
    446e:	4642      	mov	r2, r8
    4470:	5cba      	ldrb	r2, [r7, r2]
    4472:	4293      	cmp	r3, r2
    4474:	d046      	beq.n	4504 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    4476:	2aff      	cmp	r2, #255	; 0xff
    4478:	d147      	bne.n	450a <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    447a:	4642      	mov	r2, r8
    447c:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    447e:	2205      	movs	r2, #5
    4480:	6871      	ldr	r1, [r6, #4]
    4482:	4b25      	ldr	r3, [pc, #148]	; (4518 <cdcdf_acm_enable+0xd4>)
    4484:	4798      	blx	r3
    4486:	0004      	movs	r4, r0
		while (NULL != ep) {
    4488:	e00c      	b.n	44a4 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    448a:	464b      	mov	r3, r9
    448c:	18fb      	adds	r3, r7, r3
    448e:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    4490:	0028      	movs	r0, r5
    4492:	4b22      	ldr	r3, [pc, #136]	; (451c <cdcdf_acm_enable+0xd8>)
    4494:	4798      	blx	r3
			desc->sod = ep;
    4496:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    4498:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    449a:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    449c:	6871      	ldr	r1, [r6, #4]
    449e:	4b20      	ldr	r3, [pc, #128]	; (4520 <cdcdf_acm_enable+0xdc>)
    44a0:	4798      	blx	r3
    44a2:	0004      	movs	r4, r0
		while (NULL != ep) {
    44a4:	2c00      	cmp	r4, #0
    44a6:	d013      	beq.n	44d0 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    44a8:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    44aa:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    44ac:	7922      	ldrb	r2, [r4, #4]
    44ae:	7963      	ldrb	r3, [r4, #5]
    44b0:	021b      	lsls	r3, r3, #8
    44b2:	18d2      	adds	r2, r2, r3
    44b4:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    44b6:	0028      	movs	r0, r5
    44b8:	4b1a      	ldr	r3, [pc, #104]	; (4524 <cdcdf_acm_enable+0xe0>)
    44ba:	4798      	blx	r3
    44bc:	2800      	cmp	r0, #0
    44be:	d127      	bne.n	4510 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    44c0:	b26b      	sxtb	r3, r5
    44c2:	2b00      	cmp	r3, #0
    44c4:	dbe1      	blt.n	448a <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    44c6:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    44c8:	0028      	movs	r0, r5
    44ca:	4b14      	ldr	r3, [pc, #80]	; (451c <cdcdf_acm_enable+0xd8>)
    44cc:	4798      	blx	r3
    44ce:	e7e2      	b.n	4496 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    44d0:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    44d2:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    44d4:	18c0      	adds	r0, r0, r3
    44d6:	2204      	movs	r2, #4
    44d8:	6871      	ldr	r1, [r6, #4]
    44da:	4b0f      	ldr	r3, [pc, #60]	; (4518 <cdcdf_acm_enable+0xd4>)
    44dc:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    44de:	4643      	mov	r3, r8
    44e0:	3301      	adds	r3, #1
    44e2:	b2db      	uxtb	r3, r3
    44e4:	4698      	mov	r8, r3
    44e6:	e7b6      	b.n	4456 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    44e8:	2201      	movs	r2, #1
    44ea:	4b0f      	ldr	r3, [pc, #60]	; (4528 <cdcdf_acm_enable+0xe4>)
    44ec:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    44ee:	2000      	movs	r0, #0
}
    44f0:	bc0c      	pop	{r2, r3}
    44f2:	4690      	mov	r8, r2
    44f4:	4699      	mov	r9, r3
    44f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    44f8:	200a      	movs	r0, #10
    44fa:	4240      	negs	r0, r0
    44fc:	e7f8      	b.n	44f0 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    44fe:	200a      	movs	r0, #10
    4500:	4240      	negs	r0, r0
    4502:	e7f5      	b.n	44f0 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    4504:	2012      	movs	r0, #18
    4506:	4240      	negs	r0, r0
    4508:	e7f2      	b.n	44f0 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    450a:	201c      	movs	r0, #28
    450c:	4240      	negs	r0, r0
    450e:	e7ef      	b.n	44f0 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    4510:	2014      	movs	r0, #20
    4512:	4240      	negs	r0, r0
    4514:	e7ec      	b.n	44f0 <cdcdf_acm_enable+0xac>
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	00004efd 	.word	0x00004efd
    451c:	00001f19 	.word	0x00001f19
    4520:	00004f1b 	.word	0x00004f1b
    4524:	00001e85 	.word	0x00001e85
    4528:	20000b28 	.word	0x20000b28

0000452c <cdcdf_acm_disable>:
{
    452c:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    452e:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    4530:	2900      	cmp	r1, #0
    4532:	d01a      	beq.n	456a <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    4534:	680b      	ldr	r3, [r1, #0]
    4536:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    4538:	2b02      	cmp	r3, #2
    453a:	d018      	beq.n	456e <cdcdf_acm_disable+0x42>
    453c:	2b0a      	cmp	r3, #10
    453e:	d124      	bne.n	458a <cdcdf_acm_disable+0x5e>
    4540:	2400      	movs	r4, #0
    4542:	e001      	b.n	4548 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    4544:	3401      	adds	r4, #1
    4546:	b2e4      	uxtb	r4, r4
    4548:	2c01      	cmp	r4, #1
    454a:	d812      	bhi.n	4572 <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    454c:	5d2b      	ldrb	r3, [r5, r4]
    454e:	2bff      	cmp	r3, #255	; 0xff
    4550:	d0f8      	beq.n	4544 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    4552:	23ff      	movs	r3, #255	; 0xff
    4554:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    4556:	192b      	adds	r3, r5, r4
    4558:	7898      	ldrb	r0, [r3, #2]
    455a:	28ff      	cmp	r0, #255	; 0xff
    455c:	d0f2      	beq.n	4544 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    455e:	4b0c      	ldr	r3, [pc, #48]	; (4590 <cdcdf_acm_disable+0x64>)
    4560:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    4562:	192e      	adds	r6, r5, r4
    4564:	22ff      	movs	r2, #255	; 0xff
    4566:	70b2      	strb	r2, [r6, #2]
    4568:	e7ec      	b.n	4544 <cdcdf_acm_disable+0x18>
    456a:	2400      	movs	r4, #0
    456c:	e7ec      	b.n	4548 <cdcdf_acm_disable+0x1c>
    456e:	2400      	movs	r4, #0
    4570:	e7ea      	b.n	4548 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    4572:	7928      	ldrb	r0, [r5, #4]
    4574:	28ff      	cmp	r0, #255	; 0xff
    4576:	d003      	beq.n	4580 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    4578:	4b05      	ldr	r3, [pc, #20]	; (4590 <cdcdf_acm_disable+0x64>)
    457a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    457c:	23ff      	movs	r3, #255	; 0xff
    457e:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    4580:	2200      	movs	r2, #0
    4582:	4b04      	ldr	r3, [pc, #16]	; (4594 <cdcdf_acm_disable+0x68>)
    4584:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    4586:	2000      	movs	r0, #0
}
    4588:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    458a:	200a      	movs	r0, #10
    458c:	4240      	negs	r0, r0
    458e:	e7fb      	b.n	4588 <cdcdf_acm_disable+0x5c>
    4590:	00001eed 	.word	0x00001eed
    4594:	20000b28 	.word	0x20000b28

00004598 <cdcdf_acm_ctrl>:
{
    4598:	b510      	push	{r4, lr}
	switch (ctrl) {
    459a:	2901      	cmp	r1, #1
    459c:	d00a      	beq.n	45b4 <cdcdf_acm_ctrl+0x1c>
    459e:	2900      	cmp	r1, #0
    45a0:	d004      	beq.n	45ac <cdcdf_acm_ctrl+0x14>
    45a2:	2902      	cmp	r1, #2
    45a4:	d10a      	bne.n	45bc <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    45a6:	201b      	movs	r0, #27
    45a8:	4240      	negs	r0, r0
}
    45aa:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    45ac:	0011      	movs	r1, r2
    45ae:	4b05      	ldr	r3, [pc, #20]	; (45c4 <cdcdf_acm_ctrl+0x2c>)
    45b0:	4798      	blx	r3
    45b2:	e7fa      	b.n	45aa <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    45b4:	0011      	movs	r1, r2
    45b6:	4b04      	ldr	r3, [pc, #16]	; (45c8 <cdcdf_acm_ctrl+0x30>)
    45b8:	4798      	blx	r3
    45ba:	e7f6      	b.n	45aa <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    45bc:	200d      	movs	r0, #13
    45be:	4240      	negs	r0, r0
    45c0:	e7f3      	b.n	45aa <cdcdf_acm_ctrl+0x12>
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	00004445 	.word	0x00004445
    45c8:	0000452d 	.word	0x0000452d

000045cc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    45cc:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    45ce:	4b0b      	ldr	r3, [pc, #44]	; (45fc <cdcdf_acm_init+0x30>)
    45d0:	4798      	blx	r3
    45d2:	2801      	cmp	r0, #1
    45d4:	d80e      	bhi.n	45f4 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    45d6:	480a      	ldr	r0, [pc, #40]	; (4600 <cdcdf_acm_init+0x34>)
    45d8:	4b0a      	ldr	r3, [pc, #40]	; (4604 <cdcdf_acm_init+0x38>)
    45da:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    45dc:	0003      	movs	r3, r0
    45de:	3310      	adds	r3, #16
    45e0:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    45e2:	3018      	adds	r0, #24
    45e4:	4b08      	ldr	r3, [pc, #32]	; (4608 <cdcdf_acm_init+0x3c>)
    45e6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    45e8:	4908      	ldr	r1, [pc, #32]	; (460c <cdcdf_acm_init+0x40>)
    45ea:	2001      	movs	r0, #1
    45ec:	4b08      	ldr	r3, [pc, #32]	; (4610 <cdcdf_acm_init+0x44>)
    45ee:	4798      	blx	r3
	return ERR_NONE;
    45f0:	2000      	movs	r0, #0
}
    45f2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    45f4:	2011      	movs	r0, #17
    45f6:	4240      	negs	r0, r0
    45f8:	e7fb      	b.n	45f2 <cdcdf_acm_init+0x26>
    45fa:	46c0      	nop			; (mov r8, r8)
    45fc:	00004eed 	.word	0x00004eed
    4600:	20000b28 	.word	0x20000b28
    4604:	00004599 	.word	0x00004599
    4608:	00004e85 	.word	0x00004e85
    460c:	20000004 	.word	0x20000004
    4610:	00004ded 	.word	0x00004ded

00004614 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    4614:	b570      	push	{r4, r5, r6, lr}
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    4616:	4d03      	ldr	r5, [pc, #12]	; (4624 <cdcdf_acm_stop_xfer+0x10>)
    4618:	7ce8      	ldrb	r0, [r5, #19]
    461a:	4c03      	ldr	r4, [pc, #12]	; (4628 <cdcdf_acm_stop_xfer+0x14>)
    461c:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    461e:	7d28      	ldrb	r0, [r5, #20]
    4620:	47a0      	blx	r4
}
    4622:	bd70      	pop	{r4, r5, r6, pc}
    4624:	20000b28 	.word	0x20000b28
    4628:	0000208d 	.word	0x0000208d

0000462c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    462c:	b510      	push	{r4, lr}
	switch (cb_type) {
    462e:	2801      	cmp	r0, #1
    4630:	d010      	beq.n	4654 <cdcdf_acm_register_callback+0x28>
    4632:	2800      	cmp	r0, #0
    4634:	d006      	beq.n	4644 <cdcdf_acm_register_callback+0x18>
    4636:	2802      	cmp	r0, #2
    4638:	d014      	beq.n	4664 <cdcdf_acm_register_callback+0x38>
    463a:	2803      	cmp	r0, #3
    463c:	d016      	beq.n	466c <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    463e:	200d      	movs	r0, #13
    4640:	4240      	negs	r0, r0
    4642:	e006      	b.n	4652 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    4644:	4b0b      	ldr	r3, [pc, #44]	; (4674 <cdcdf_acm_register_callback+0x48>)
    4646:	7d18      	ldrb	r0, [r3, #20]
    4648:	000a      	movs	r2, r1
    464a:	2102      	movs	r1, #2
    464c:	4b0a      	ldr	r3, [pc, #40]	; (4678 <cdcdf_acm_register_callback+0x4c>)
    464e:	4798      	blx	r3
	}
	return ERR_NONE;
    4650:	2000      	movs	r0, #0
}
    4652:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    4654:	4b07      	ldr	r3, [pc, #28]	; (4674 <cdcdf_acm_register_callback+0x48>)
    4656:	7cd8      	ldrb	r0, [r3, #19]
    4658:	000a      	movs	r2, r1
    465a:	2102      	movs	r1, #2
    465c:	4b06      	ldr	r3, [pc, #24]	; (4678 <cdcdf_acm_register_callback+0x4c>)
    465e:	4798      	blx	r3
	return ERR_NONE;
    4660:	2000      	movs	r0, #0
		break;
    4662:	e7f6      	b.n	4652 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    4664:	4b03      	ldr	r3, [pc, #12]	; (4674 <cdcdf_acm_register_callback+0x48>)
    4666:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    4668:	2000      	movs	r0, #0
		break;
    466a:	e7f2      	b.n	4652 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    466c:	4b01      	ldr	r3, [pc, #4]	; (4674 <cdcdf_acm_register_callback+0x48>)
    466e:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    4670:	2000      	movs	r0, #0
		break;
    4672:	e7ee      	b.n	4652 <cdcdf_acm_register_callback+0x26>
    4674:	20000b28 	.word	0x20000b28
    4678:	00002125 	.word	0x00002125

0000467c <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    467c:	4b01      	ldr	r3, [pc, #4]	; (4684 <cdcdf_acm_is_enabled+0x8>)
    467e:	7d58      	ldrb	r0, [r3, #21]
}
    4680:	4770      	bx	lr
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	20000b28 	.word	0x20000b28

00004688 <cdcdf_acm_read>:
{
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	0004      	movs	r4, r0
    468c:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    468e:	4b07      	ldr	r3, [pc, #28]	; (46ac <cdcdf_acm_read+0x24>)
    4690:	4798      	blx	r3
    4692:	2800      	cmp	r0, #0
    4694:	d007      	beq.n	46a6 <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    4696:	4b06      	ldr	r3, [pc, #24]	; (46b0 <cdcdf_acm_read+0x28>)
    4698:	7d18      	ldrb	r0, [r3, #20]
    469a:	2300      	movs	r3, #0
    469c:	002a      	movs	r2, r5
    469e:	0021      	movs	r1, r4
    46a0:	4c04      	ldr	r4, [pc, #16]	; (46b4 <cdcdf_acm_read+0x2c>)
    46a2:	47a0      	blx	r4
}
    46a4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    46a6:	2011      	movs	r0, #17
    46a8:	4240      	negs	r0, r0
    46aa:	e7fb      	b.n	46a4 <cdcdf_acm_read+0x1c>
    46ac:	0000467d 	.word	0x0000467d
    46b0:	20000b28 	.word	0x20000b28
    46b4:	00004955 	.word	0x00004955

000046b8 <cdcdf_acm_write>:
{
    46b8:	b570      	push	{r4, r5, r6, lr}
    46ba:	0004      	movs	r4, r0
    46bc:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    46be:	4b07      	ldr	r3, [pc, #28]	; (46dc <cdcdf_acm_write+0x24>)
    46c0:	4798      	blx	r3
    46c2:	2800      	cmp	r0, #0
    46c4:	d007      	beq.n	46d6 <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    46c6:	4b06      	ldr	r3, [pc, #24]	; (46e0 <cdcdf_acm_write+0x28>)
    46c8:	7cd8      	ldrb	r0, [r3, #19]
    46ca:	2301      	movs	r3, #1
    46cc:	002a      	movs	r2, r5
    46ce:	0021      	movs	r1, r4
    46d0:	4c04      	ldr	r4, [pc, #16]	; (46e4 <cdcdf_acm_write+0x2c>)
    46d2:	47a0      	blx	r4
}
    46d4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    46d6:	2011      	movs	r0, #17
    46d8:	4240      	negs	r0, r0
    46da:	e7fb      	b.n	46d4 <cdcdf_acm_write+0x1c>
    46dc:	0000467d 	.word	0x0000467d
    46e0:	20000b28 	.word	0x20000b28
    46e4:	00004955 	.word	0x00004955

000046e8 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    46e8:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    46ea:	4b06      	ldr	r3, [pc, #24]	; (4704 <usbdc_unconfig+0x1c>)
    46ec:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    46ee:	e005      	b.n	46fc <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    46f0:	2200      	movs	r2, #0
    46f2:	2101      	movs	r1, #1
    46f4:	0020      	movs	r0, r4
    46f6:	6863      	ldr	r3, [r4, #4]
    46f8:	4798      	blx	r3
		func = func->next;
    46fa:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    46fc:	2c00      	cmp	r4, #0
    46fe:	d1f7      	bne.n	46f0 <usbdc_unconfig+0x8>
	}
}
    4700:	bd10      	pop	{r4, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	20000b4c 	.word	0x20000b4c

00004708 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    4708:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    470a:	4b06      	ldr	r3, [pc, #24]	; (4724 <usbdc_sof_notify+0x1c>)
    470c:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    470e:	e000      	b.n	4712 <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    4710:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    4712:	2c00      	cmp	r4, #0
    4714:	d004      	beq.n	4720 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    4716:	6863      	ldr	r3, [r4, #4]
    4718:	2b00      	cmp	r3, #0
    471a:	d0f9      	beq.n	4710 <usbdc_sof_notify+0x8>
			sof->cb();
    471c:	4798      	blx	r3
    471e:	e7f7      	b.n	4710 <usbdc_sof_notify+0x8>
	}
}
    4720:	bd10      	pop	{r4, pc}
    4722:	46c0      	nop			; (mov r8, r8)
    4724:	20000b4c 	.word	0x20000b4c

00004728 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4728:	b570      	push	{r4, r5, r6, lr}
    472a:	0006      	movs	r6, r0
    472c:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    472e:	4b07      	ldr	r3, [pc, #28]	; (474c <usbdc_change_notify+0x24>)
    4730:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    4732:	e000      	b.n	4736 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    4734:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4736:	2c00      	cmp	r4, #0
    4738:	d006      	beq.n	4748 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    473a:	6863      	ldr	r3, [r4, #4]
    473c:	2b00      	cmp	r3, #0
    473e:	d0f9      	beq.n	4734 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    4740:	0029      	movs	r1, r5
    4742:	0030      	movs	r0, r6
    4744:	4798      	blx	r3
    4746:	e7f5      	b.n	4734 <usbdc_change_notify+0xc>
	}
}
    4748:	bd70      	pop	{r4, r5, r6, pc}
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	20000b4c 	.word	0x20000b4c

00004750 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4752:	0007      	movs	r7, r0
    4754:	000e      	movs	r6, r1
    4756:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4758:	4b0b      	ldr	r3, [pc, #44]	; (4788 <usbdc_request_handler+0x38>)
    475a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    475c:	e000      	b.n	4760 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    475e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    4760:	2c00      	cmp	r4, #0
    4762:	d00d      	beq.n	4780 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    4764:	6863      	ldr	r3, [r4, #4]
    4766:	2b00      	cmp	r3, #0
    4768:	d0f9      	beq.n	475e <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    476a:	002a      	movs	r2, r5
    476c:	0031      	movs	r1, r6
    476e:	0038      	movs	r0, r7
    4770:	4798      	blx	r3
			if (0 == rc) {
    4772:	2800      	cmp	r0, #0
    4774:	d006      	beq.n	4784 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    4776:	300a      	adds	r0, #10
    4778:	d0f1      	beq.n	475e <usbdc_request_handler+0xe>
				return -1;
    477a:	2001      	movs	r0, #1
    477c:	4240      	negs	r0, r0
    477e:	e000      	b.n	4782 <usbdc_request_handler+0x32>
	}
	return false;
    4780:	2000      	movs	r0, #0
}
    4782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    4784:	2001      	movs	r0, #1
    4786:	e7fc      	b.n	4782 <usbdc_request_handler+0x32>
    4788:	20000b4c 	.word	0x20000b4c

0000478c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    478c:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    478e:	4b01      	ldr	r3, [pc, #4]	; (4794 <usbd_sof_cb+0x8>)
    4790:	4798      	blx	r3
}
    4792:	bd10      	pop	{r4, pc}
    4794:	00004709 	.word	0x00004709

00004798 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    4798:	b510      	push	{r4, lr}
    479a:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    479c:	2201      	movs	r2, #1
    479e:	2000      	movs	r0, #0
    47a0:	4b01      	ldr	r3, [pc, #4]	; (47a8 <usbdc_ctrl_data_end+0x10>)
    47a2:	4798      	blx	r3
	return false;
}
    47a4:	2000      	movs	r0, #0
    47a6:	bd10      	pop	{r4, pc}
    47a8:	00004751 	.word	0x00004751

000047ac <usbdc_set_address>:
{
    47ac:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    47ae:	4b01      	ldr	r3, [pc, #4]	; (47b4 <usbdc_set_address+0x8>)
    47b0:	4798      	blx	r3
}
    47b2:	bd10      	pop	{r4, pc}
    47b4:	00001e79 	.word	0x00001e79

000047b8 <usbdc_ctrl_status_end>:
{
    47b8:	b510      	push	{r4, lr}
    47ba:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    47bc:	7803      	ldrb	r3, [r0, #0]
    47be:	2b00      	cmp	r3, #0
    47c0:	d112      	bne.n	47e8 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    47c2:	7843      	ldrb	r3, [r0, #1]
    47c4:	2b05      	cmp	r3, #5
    47c6:	d012      	beq.n	47ee <usbdc_ctrl_status_end+0x36>
    47c8:	2b09      	cmp	r3, #9
    47ca:	d10d      	bne.n	47e8 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    47cc:	7882      	ldrb	r2, [r0, #2]
    47ce:	4b10      	ldr	r3, [pc, #64]	; (4810 <usbdc_ctrl_status_end+0x58>)
    47d0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    47d2:	7882      	ldrb	r2, [r0, #2]
    47d4:	78c3      	ldrb	r3, [r0, #3]
    47d6:	021b      	lsls	r3, r3, #8
    47d8:	4313      	orrs	r3, r2
    47da:	d106      	bne.n	47ea <usbdc_ctrl_status_end+0x32>
    47dc:	2103      	movs	r1, #3
    47de:	4b0c      	ldr	r3, [pc, #48]	; (4810 <usbdc_ctrl_status_end+0x58>)
    47e0:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    47e2:	2001      	movs	r0, #1
    47e4:	4b0b      	ldr	r3, [pc, #44]	; (4814 <usbdc_ctrl_status_end+0x5c>)
    47e6:	4798      	blx	r3
}
    47e8:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    47ea:	2104      	movs	r1, #4
    47ec:	e7f7      	b.n	47de <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    47ee:	7880      	ldrb	r0, [r0, #2]
    47f0:	4b09      	ldr	r3, [pc, #36]	; (4818 <usbdc_ctrl_status_end+0x60>)
    47f2:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    47f4:	78a2      	ldrb	r2, [r4, #2]
    47f6:	78e3      	ldrb	r3, [r4, #3]
    47f8:	021b      	lsls	r3, r3, #8
    47fa:	4313      	orrs	r3, r2
    47fc:	d006      	beq.n	480c <usbdc_ctrl_status_end+0x54>
    47fe:	2103      	movs	r1, #3
    4800:	4b03      	ldr	r3, [pc, #12]	; (4810 <usbdc_ctrl_status_end+0x58>)
    4802:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4804:	2001      	movs	r0, #1
    4806:	4b03      	ldr	r3, [pc, #12]	; (4814 <usbdc_ctrl_status_end+0x5c>)
    4808:	4798      	blx	r3
		break;
    480a:	e7ed      	b.n	47e8 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    480c:	2102      	movs	r1, #2
    480e:	e7f7      	b.n	4800 <usbdc_ctrl_status_end+0x48>
    4810:	20000b4c 	.word	0x20000b4c
    4814:	00004729 	.word	0x00004729
    4818:	000047ad 	.word	0x000047ad

0000481c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    481c:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    481e:	2900      	cmp	r1, #0
    4820:	d003      	beq.n	482a <usbdc_cb_ctl_done+0xe>
    4822:	2901      	cmp	r1, #1
    4824:	d006      	beq.n	4834 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    4826:	2000      	movs	r0, #0
    4828:	e003      	b.n	4832 <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    482a:	0010      	movs	r0, r2
    482c:	4b03      	ldr	r3, [pc, #12]	; (483c <usbdc_cb_ctl_done+0x20>)
    482e:	4798      	blx	r3
	return false;
    4830:	2000      	movs	r0, #0
}
    4832:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    4834:	0010      	movs	r0, r2
    4836:	4b02      	ldr	r3, [pc, #8]	; (4840 <usbdc_cb_ctl_done+0x24>)
    4838:	4798      	blx	r3
    483a:	e7fa      	b.n	4832 <usbdc_cb_ctl_done+0x16>
    483c:	000047b9 	.word	0x000047b9
    4840:	00004799 	.word	0x00004799

00004844 <usbdc_set_config>:
{
    4844:	b530      	push	{r4, r5, lr}
    4846:	b083      	sub	sp, #12
    4848:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    484a:	d014      	beq.n	4876 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    484c:	4b1e      	ldr	r3, [pc, #120]	; (48c8 <usbdc_set_config+0x84>)
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	6818      	ldr	r0, [r3, #0]
    4852:	6859      	ldr	r1, [r3, #4]
    4854:	4b1d      	ldr	r3, [pc, #116]	; (48cc <usbdc_set_config+0x88>)
    4856:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4858:	2800      	cmp	r0, #0
    485a:	d032      	beq.n	48c2 <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    485c:	7881      	ldrb	r1, [r0, #2]
    485e:	78c3      	ldrb	r3, [r0, #3]
    4860:	021b      	lsls	r3, r3, #8
    4862:	18c9      	adds	r1, r1, r3
    4864:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    4866:	1841      	adds	r1, r0, r1
    4868:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    486a:	2204      	movs	r2, #4
    486c:	4b18      	ldr	r3, [pc, #96]	; (48d0 <usbdc_set_config+0x8c>)
    486e:	4798      	blx	r3
    4870:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    4872:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    4874:	e00d      	b.n	4892 <usbdc_set_config+0x4e>
		usbdc_unconfig();
    4876:	4b17      	ldr	r3, [pc, #92]	; (48d4 <usbdc_set_config+0x90>)
    4878:	4798      	blx	r3
		return true;
    487a:	2001      	movs	r0, #1
    487c:	e01f      	b.n	48be <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    487e:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    4880:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    4882:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    4884:	18c0      	adds	r0, r0, r3
    4886:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4888:	2204      	movs	r2, #4
    488a:	9901      	ldr	r1, [sp, #4]
    488c:	4b10      	ldr	r3, [pc, #64]	; (48d0 <usbdc_set_config+0x8c>)
    488e:	4798      	blx	r3
    4890:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    4892:	9b00      	ldr	r3, [sp, #0]
    4894:	2b00      	cmp	r3, #0
    4896:	d011      	beq.n	48bc <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    4898:	789d      	ldrb	r5, [r3, #2]
    489a:	42ac      	cmp	r4, r5
    489c:	d0f0      	beq.n	4880 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    489e:	4b0a      	ldr	r3, [pc, #40]	; (48c8 <usbdc_set_config+0x84>)
    48a0:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    48a2:	2c00      	cmp	r4, #0
    48a4:	d0eb      	beq.n	487e <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    48a6:	466a      	mov	r2, sp
    48a8:	2100      	movs	r1, #0
    48aa:	0020      	movs	r0, r4
    48ac:	6863      	ldr	r3, [r4, #4]
    48ae:	4798      	blx	r3
    48b0:	2800      	cmp	r0, #0
    48b2:	d001      	beq.n	48b8 <usbdc_set_config+0x74>
					func = func->next;
    48b4:	6824      	ldr	r4, [r4, #0]
    48b6:	e7f4      	b.n	48a2 <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    48b8:	002c      	movs	r4, r5
    48ba:	e7e1      	b.n	4880 <usbdc_set_config+0x3c>
	return true;
    48bc:	2001      	movs	r0, #1
}
    48be:	b003      	add	sp, #12
    48c0:	bd30      	pop	{r4, r5, pc}
		return false;
    48c2:	2000      	movs	r0, #0
    48c4:	e7fb      	b.n	48be <usbdc_set_config+0x7a>
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	20000b4c 	.word	0x20000b4c
    48cc:	00004f41 	.word	0x00004f41
    48d0:	00004efd 	.word	0x00004efd
    48d4:	000046e9 	.word	0x000046e9

000048d8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    48d8:	b510      	push	{r4, lr}
	usbdc_unconfig();
    48da:	4b0d      	ldr	r3, [pc, #52]	; (4910 <usbdc_reset+0x38>)
    48dc:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    48de:	4c0d      	ldr	r4, [pc, #52]	; (4914 <usbdc_reset+0x3c>)
    48e0:	2302      	movs	r3, #2
    48e2:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    48e4:	2300      	movs	r3, #0
    48e6:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    48e8:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    48ea:	2000      	movs	r0, #0
    48ec:	4b0a      	ldr	r3, [pc, #40]	; (4918 <usbdc_reset+0x40>)
    48ee:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    48f0:	7f20      	ldrb	r0, [r4, #28]
    48f2:	4b0a      	ldr	r3, [pc, #40]	; (491c <usbdc_reset+0x44>)
    48f4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    48f6:	4a0a      	ldr	r2, [pc, #40]	; (4920 <usbdc_reset+0x48>)
    48f8:	2100      	movs	r1, #0
    48fa:	2000      	movs	r0, #0
    48fc:	4c09      	ldr	r4, [pc, #36]	; (4924 <usbdc_reset+0x4c>)
    48fe:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    4900:	4a09      	ldr	r2, [pc, #36]	; (4928 <usbdc_reset+0x50>)
    4902:	2102      	movs	r1, #2
    4904:	2000      	movs	r0, #0
    4906:	47a0      	blx	r4
	usb_d_ep_enable(0);
    4908:	2000      	movs	r0, #0
    490a:	4b08      	ldr	r3, [pc, #32]	; (492c <usbdc_reset+0x54>)
    490c:	4798      	blx	r3
}
    490e:	bd10      	pop	{r4, pc}
    4910:	000046e9 	.word	0x000046e9
    4914:	20000b4c 	.word	0x20000b4c
    4918:	00001eed 	.word	0x00001eed
    491c:	00001ed9 	.word	0x00001ed9
    4920:	00004da1 	.word	0x00004da1
    4924:	00002125 	.word	0x00002125
    4928:	0000481d 	.word	0x0000481d
    492c:	00001f19 	.word	0x00001f19

00004930 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    4930:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    4932:	2800      	cmp	r0, #0
    4934:	d002      	beq.n	493c <usbd_event_cb+0xc>
    4936:	2801      	cmp	r0, #1
    4938:	d004      	beq.n	4944 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    493a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    493c:	2000      	movs	r0, #0
    493e:	4b03      	ldr	r3, [pc, #12]	; (494c <usbd_event_cb+0x1c>)
    4940:	4798      	blx	r3
		break;
    4942:	e7fa      	b.n	493a <usbd_event_cb+0xa>
		usbdc_reset();
    4944:	4b02      	ldr	r3, [pc, #8]	; (4950 <usbd_event_cb+0x20>)
    4946:	4798      	blx	r3
}
    4948:	e7f7      	b.n	493a <usbd_event_cb+0xa>
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	00004729 	.word	0x00004729
    4950:	000048d9 	.word	0x000048d9

00004954 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    4954:	b510      	push	{r4, lr}
    4956:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    4958:	ac01      	add	r4, sp, #4
    495a:	9101      	str	r1, [sp, #4]
    495c:	9202      	str	r2, [sp, #8]
    495e:	7220      	strb	r0, [r4, #8]
    4960:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    4962:	0020      	movs	r0, r4
    4964:	4b01      	ldr	r3, [pc, #4]	; (496c <usbdc_xfer+0x18>)
    4966:	4798      	blx	r3
}
    4968:	b004      	add	sp, #16
    496a:	bd10      	pop	{r4, pc}
    496c:	00001f69 	.word	0x00001f69

00004970 <usbdc_clear_ftr_req>:
{
    4970:	b510      	push	{r4, lr}
    4972:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4974:	780a      	ldrb	r2, [r1, #0]
    4976:	231f      	movs	r3, #31
    4978:	4013      	ands	r3, r2
    497a:	2b02      	cmp	r3, #2
    497c:	d112      	bne.n	49a4 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    497e:	798a      	ldrb	r2, [r1, #6]
    4980:	79cb      	ldrb	r3, [r1, #7]
    4982:	021b      	lsls	r3, r3, #8
    4984:	4313      	orrs	r3, r2
    4986:	d001      	beq.n	498c <usbdc_clear_ftr_req+0x1c>
			return false;
    4988:	2000      	movs	r0, #0
    498a:	e00c      	b.n	49a6 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    498c:	7908      	ldrb	r0, [r1, #4]
    498e:	2100      	movs	r1, #0
    4990:	4b05      	ldr	r3, [pc, #20]	; (49a8 <usbdc_clear_ftr_req+0x38>)
    4992:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4994:	2301      	movs	r3, #1
    4996:	2200      	movs	r2, #0
    4998:	2100      	movs	r1, #0
    499a:	0020      	movs	r0, r4
    499c:	4c03      	ldr	r4, [pc, #12]	; (49ac <usbdc_clear_ftr_req+0x3c>)
    499e:	47a0      	blx	r4
		return true;
    49a0:	2001      	movs	r0, #1
    49a2:	e000      	b.n	49a6 <usbdc_clear_ftr_req+0x36>
		return false;
    49a4:	2000      	movs	r0, #0
}
    49a6:	bd10      	pop	{r4, pc}
    49a8:	000020bd 	.word	0x000020bd
    49ac:	00004955 	.word	0x00004955

000049b0 <usbdc_set_ftr_req>:
{
    49b0:	b510      	push	{r4, lr}
    49b2:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    49b4:	780a      	ldrb	r2, [r1, #0]
    49b6:	231f      	movs	r3, #31
    49b8:	4013      	ands	r3, r2
    49ba:	2b02      	cmp	r3, #2
    49bc:	d112      	bne.n	49e4 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    49be:	798a      	ldrb	r2, [r1, #6]
    49c0:	79cb      	ldrb	r3, [r1, #7]
    49c2:	021b      	lsls	r3, r3, #8
    49c4:	4313      	orrs	r3, r2
    49c6:	d001      	beq.n	49cc <usbdc_set_ftr_req+0x1c>
			return false;
    49c8:	2000      	movs	r0, #0
    49ca:	e00c      	b.n	49e6 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    49cc:	7908      	ldrb	r0, [r1, #4]
    49ce:	2101      	movs	r1, #1
    49d0:	4b05      	ldr	r3, [pc, #20]	; (49e8 <usbdc_set_ftr_req+0x38>)
    49d2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    49d4:	2301      	movs	r3, #1
    49d6:	2200      	movs	r2, #0
    49d8:	2100      	movs	r1, #0
    49da:	0020      	movs	r0, r4
    49dc:	4c03      	ldr	r4, [pc, #12]	; (49ec <usbdc_set_ftr_req+0x3c>)
    49de:	47a0      	blx	r4
		return true;
    49e0:	2001      	movs	r0, #1
    49e2:	e000      	b.n	49e6 <usbdc_set_ftr_req+0x36>
		return false;
    49e4:	2000      	movs	r0, #0
}
    49e6:	bd10      	pop	{r4, pc}
    49e8:	000020bd 	.word	0x000020bd
    49ec:	00004955 	.word	0x00004955

000049f0 <usbdc_set_interface>:
{
    49f0:	b570      	push	{r4, r5, r6, lr}
    49f2:	b082      	sub	sp, #8
    49f4:	0005      	movs	r5, r0
    49f6:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    49f8:	4b2a      	ldr	r3, [pc, #168]	; (4aa4 <usbdc_set_interface+0xb4>)
    49fa:	681a      	ldr	r2, [r3, #0]
    49fc:	6810      	ldr	r0, [r2, #0]
    49fe:	6851      	ldr	r1, [r2, #4]
    4a00:	7eda      	ldrb	r2, [r3, #27]
    4a02:	4b29      	ldr	r3, [pc, #164]	; (4aa8 <usbdc_set_interface+0xb8>)
    4a04:	4798      	blx	r3
	if (NULL == ifc) {
    4a06:	2800      	cmp	r0, #0
    4a08:	d045      	beq.n	4a96 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    4a0a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    4a0c:	7881      	ldrb	r1, [r0, #2]
    4a0e:	78c3      	ldrb	r3, [r0, #3]
    4a10:	021b      	lsls	r3, r3, #8
    4a12:	18c9      	adds	r1, r1, r3
    4a14:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4a16:	1841      	adds	r1, r0, r1
    4a18:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    4a1a:	2204      	movs	r2, #4
    4a1c:	4b23      	ldr	r3, [pc, #140]	; (4aac <usbdc_set_interface+0xbc>)
    4a1e:	4798      	blx	r3
    4a20:	2800      	cmp	r0, #0
    4a22:	d10b      	bne.n	4a3c <usbdc_set_interface+0x4c>
		return false;
    4a24:	2000      	movs	r0, #0
    4a26:	e039      	b.n	4a9c <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    4a28:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    4a2a:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    4a2c:	18c0      	adds	r0, r0, r3
    4a2e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4a30:	2204      	movs	r2, #4
    4a32:	9901      	ldr	r1, [sp, #4]
    4a34:	4b1d      	ldr	r3, [pc, #116]	; (4aac <usbdc_set_interface+0xbc>)
    4a36:	4798      	blx	r3
		if (NULL == ifc) {
    4a38:	2800      	cmp	r0, #0
    4a3a:	d02e      	beq.n	4a9a <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    4a3c:	7883      	ldrb	r3, [r0, #2]
    4a3e:	42a3      	cmp	r3, r4
    4a40:	d1f2      	bne.n	4a28 <usbdc_set_interface+0x38>
    4a42:	78c3      	ldrb	r3, [r0, #3]
    4a44:	42ab      	cmp	r3, r5
    4a46:	d1ef      	bne.n	4a28 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    4a48:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    4a4a:	4b16      	ldr	r3, [pc, #88]	; (4aa4 <usbdc_set_interface+0xb4>)
    4a4c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    4a4e:	2e00      	cmp	r6, #0
    4a50:	d01f      	beq.n	4a92 <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    4a52:	466a      	mov	r2, sp
    4a54:	2101      	movs	r1, #1
    4a56:	0030      	movs	r0, r6
    4a58:	6873      	ldr	r3, [r6, #4]
    4a5a:	4798      	blx	r3
    4a5c:	2800      	cmp	r0, #0
    4a5e:	d001      	beq.n	4a64 <usbdc_set_interface+0x74>
			func = func->next;
    4a60:	6836      	ldr	r6, [r6, #0]
    4a62:	e7f4      	b.n	4a4e <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    4a64:	6873      	ldr	r3, [r6, #4]
    4a66:	466a      	mov	r2, sp
    4a68:	2100      	movs	r1, #0
    4a6a:	0030      	movs	r0, r6
    4a6c:	4798      	blx	r3
    4a6e:	2800      	cmp	r0, #0
    4a70:	d116      	bne.n	4aa0 <usbdc_set_interface+0xb0>
			if (alt_set) {
    4a72:	2d00      	cmp	r5, #0
    4a74:	d005      	beq.n	4a82 <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    4a76:	2201      	movs	r2, #1
    4a78:	40a2      	lsls	r2, r4
    4a7a:	490a      	ldr	r1, [pc, #40]	; (4aa4 <usbdc_set_interface+0xb4>)
    4a7c:	7f4b      	ldrb	r3, [r1, #29]
    4a7e:	4313      	orrs	r3, r2
    4a80:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    4a82:	2300      	movs	r3, #0
    4a84:	2200      	movs	r2, #0
    4a86:	2100      	movs	r1, #0
    4a88:	2000      	movs	r0, #0
    4a8a:	4c09      	ldr	r4, [pc, #36]	; (4ab0 <usbdc_set_interface+0xc0>)
    4a8c:	47a0      	blx	r4
			return true;
    4a8e:	2001      	movs	r0, #1
    4a90:	e004      	b.n	4a9c <usbdc_set_interface+0xac>
	return false;
    4a92:	2000      	movs	r0, #0
    4a94:	e002      	b.n	4a9c <usbdc_set_interface+0xac>
		return false;
    4a96:	2000      	movs	r0, #0
    4a98:	e000      	b.n	4a9c <usbdc_set_interface+0xac>
			return false;
    4a9a:	2000      	movs	r0, #0
}
    4a9c:	b002      	add	sp, #8
    4a9e:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    4aa0:	2000      	movs	r0, #0
    4aa2:	e7fb      	b.n	4a9c <usbdc_set_interface+0xac>
    4aa4:	20000b4c 	.word	0x20000b4c
    4aa8:	00004f41 	.word	0x00004f41
    4aac:	00004efd 	.word	0x00004efd
    4ab0:	00004955 	.word	0x00004955

00004ab4 <usbdc_set_req>:
{
    4ab4:	b510      	push	{r4, lr}
    4ab6:	0004      	movs	r4, r0
	switch (req->bRequest) {
    4ab8:	784b      	ldrb	r3, [r1, #1]
    4aba:	2b0b      	cmp	r3, #11
    4abc:	d82d      	bhi.n	4b1a <usbdc_set_req+0x66>
    4abe:	009b      	lsls	r3, r3, #2
    4ac0:	4a17      	ldr	r2, [pc, #92]	; (4b20 <usbdc_set_req+0x6c>)
    4ac2:	58d3      	ldr	r3, [r2, r3]
    4ac4:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4ac6:	2301      	movs	r3, #1
    4ac8:	2200      	movs	r2, #0
    4aca:	2100      	movs	r1, #0
    4acc:	4c15      	ldr	r4, [pc, #84]	; (4b24 <usbdc_set_req+0x70>)
    4ace:	47a0      	blx	r4
    4ad0:	4243      	negs	r3, r0
    4ad2:	4158      	adcs	r0, r3
    4ad4:	b2c0      	uxtb	r0, r0
}
    4ad6:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    4ad8:	7888      	ldrb	r0, [r1, #2]
    4ada:	4b13      	ldr	r3, [pc, #76]	; (4b28 <usbdc_set_req+0x74>)
    4adc:	4798      	blx	r3
    4ade:	2800      	cmp	r0, #0
    4ae0:	d0f9      	beq.n	4ad6 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4ae2:	2301      	movs	r3, #1
    4ae4:	2200      	movs	r2, #0
    4ae6:	2100      	movs	r1, #0
    4ae8:	0020      	movs	r0, r4
    4aea:	4c0e      	ldr	r4, [pc, #56]	; (4b24 <usbdc_set_req+0x70>)
    4aec:	47a0      	blx	r4
    4aee:	4243      	negs	r3, r0
    4af0:	4158      	adcs	r0, r3
    4af2:	b2c0      	uxtb	r0, r0
    4af4:	e7ef      	b.n	4ad6 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    4af6:	4b0d      	ldr	r3, [pc, #52]	; (4b2c <usbdc_set_req+0x78>)
    4af8:	4798      	blx	r3
    4afa:	e7ec      	b.n	4ad6 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    4afc:	4b0c      	ldr	r3, [pc, #48]	; (4b30 <usbdc_set_req+0x7c>)
    4afe:	4798      	blx	r3
    4b00:	e7e9      	b.n	4ad6 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4b02:	790a      	ldrb	r2, [r1, #4]
    4b04:	794b      	ldrb	r3, [r1, #5]
    4b06:	021b      	lsls	r3, r3, #8
    4b08:	4313      	orrs	r3, r2
    4b0a:	788a      	ldrb	r2, [r1, #2]
    4b0c:	78c8      	ldrb	r0, [r1, #3]
    4b0e:	0200      	lsls	r0, r0, #8
    4b10:	4310      	orrs	r0, r2
    4b12:	0019      	movs	r1, r3
    4b14:	4b07      	ldr	r3, [pc, #28]	; (4b34 <usbdc_set_req+0x80>)
    4b16:	4798      	blx	r3
    4b18:	e7dd      	b.n	4ad6 <usbdc_set_req+0x22>
		return false;
    4b1a:	2000      	movs	r0, #0
    4b1c:	e7db      	b.n	4ad6 <usbdc_set_req+0x22>
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	000076e0 	.word	0x000076e0
    4b24:	00004955 	.word	0x00004955
    4b28:	00004845 	.word	0x00004845
    4b2c:	00004971 	.word	0x00004971
    4b30:	000049b1 	.word	0x000049b1
    4b34:	000049f1 	.word	0x000049f1

00004b38 <usbdc_get_dev_desc>:
{
    4b38:	b570      	push	{r4, r5, r6, lr}
    4b3a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4b3c:	798b      	ldrb	r3, [r1, #6]
    4b3e:	79cc      	ldrb	r4, [r1, #7]
    4b40:	0224      	lsls	r4, r4, #8
    4b42:	431c      	orrs	r4, r3
	if (length > 0x12) {
    4b44:	2c12      	cmp	r4, #18
    4b46:	d900      	bls.n	4b4a <usbdc_get_dev_desc+0x12>
		length = 0x12;
    4b48:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    4b4a:	4b0b      	ldr	r3, [pc, #44]	; (4b78 <usbdc_get_dev_desc+0x40>)
    4b4c:	681b      	ldr	r3, [r3, #0]
    4b4e:	6818      	ldr	r0, [r3, #0]
    4b50:	6859      	ldr	r1, [r3, #4]
    4b52:	2201      	movs	r2, #1
    4b54:	4b09      	ldr	r3, [pc, #36]	; (4b7c <usbdc_get_dev_desc+0x44>)
    4b56:	4798      	blx	r3
	if (!dev_desc) {
    4b58:	2800      	cmp	r0, #0
    4b5a:	d00b      	beq.n	4b74 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4b5c:	2300      	movs	r3, #0
    4b5e:	0022      	movs	r2, r4
    4b60:	0001      	movs	r1, r0
    4b62:	0028      	movs	r0, r5
    4b64:	4c06      	ldr	r4, [pc, #24]	; (4b80 <usbdc_get_dev_desc+0x48>)
    4b66:	47a0      	blx	r4
    4b68:	2800      	cmp	r0, #0
    4b6a:	d101      	bne.n	4b70 <usbdc_get_dev_desc+0x38>
	return true;
    4b6c:	2001      	movs	r0, #1
}
    4b6e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4b70:	2000      	movs	r0, #0
    4b72:	e7fc      	b.n	4b6e <usbdc_get_dev_desc+0x36>
		return false;
    4b74:	2000      	movs	r0, #0
    4b76:	e7fa      	b.n	4b6e <usbdc_get_dev_desc+0x36>
    4b78:	20000b4c 	.word	0x20000b4c
    4b7c:	00004efd 	.word	0x00004efd
    4b80:	00004955 	.word	0x00004955

00004b84 <usbdc_get_cfg_desc>:
{
    4b84:	b570      	push	{r4, r5, r6, lr}
    4b86:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4b88:	798b      	ldrb	r3, [r1, #6]
    4b8a:	79ce      	ldrb	r6, [r1, #7]
    4b8c:	0236      	lsls	r6, r6, #8
    4b8e:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4b90:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4b92:	4b13      	ldr	r3, [pc, #76]	; (4be0 <usbdc_get_cfg_desc+0x5c>)
    4b94:	7f1c      	ldrb	r4, [r3, #28]
    4b96:	3c01      	subs	r4, #1
    4b98:	4034      	ands	r4, r6
    4b9a:	4261      	negs	r1, r4
    4b9c:	414c      	adcs	r4, r1
    4b9e:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	6818      	ldr	r0, [r3, #0]
    4ba4:	6859      	ldr	r1, [r3, #4]
    4ba6:	3201      	adds	r2, #1
    4ba8:	b2d2      	uxtb	r2, r2
    4baa:	4b0e      	ldr	r3, [pc, #56]	; (4be4 <usbdc_get_cfg_desc+0x60>)
    4bac:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4bae:	2800      	cmp	r0, #0
    4bb0:	d013      	beq.n	4bda <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    4bb2:	7882      	ldrb	r2, [r0, #2]
    4bb4:	78c3      	ldrb	r3, [r0, #3]
    4bb6:	021b      	lsls	r3, r3, #8
    4bb8:	18d2      	adds	r2, r2, r3
    4bba:	b292      	uxth	r2, r2
	if (length <= total_len) {
    4bbc:	4296      	cmp	r6, r2
    4bbe:	d801      	bhi.n	4bc4 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    4bc0:	0032      	movs	r2, r6
		need_zlp = false;
    4bc2:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    4bc4:	0023      	movs	r3, r4
    4bc6:	0001      	movs	r1, r0
    4bc8:	0028      	movs	r0, r5
    4bca:	4c07      	ldr	r4, [pc, #28]	; (4be8 <usbdc_get_cfg_desc+0x64>)
    4bcc:	47a0      	blx	r4
    4bce:	2800      	cmp	r0, #0
    4bd0:	d101      	bne.n	4bd6 <usbdc_get_cfg_desc+0x52>
	return true;
    4bd2:	2001      	movs	r0, #1
}
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4bd6:	2000      	movs	r0, #0
    4bd8:	e7fc      	b.n	4bd4 <usbdc_get_cfg_desc+0x50>
		return false;
    4bda:	2000      	movs	r0, #0
    4bdc:	e7fa      	b.n	4bd4 <usbdc_get_cfg_desc+0x50>
    4bde:	46c0      	nop			; (mov r8, r8)
    4be0:	20000b4c 	.word	0x20000b4c
    4be4:	00004f41 	.word	0x00004f41
    4be8:	00004955 	.word	0x00004955

00004bec <usbdc_get_str_desc>:
{
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    4bf0:	798b      	ldrb	r3, [r1, #6]
    4bf2:	79ce      	ldrb	r6, [r1, #7]
    4bf4:	0236      	lsls	r6, r6, #8
    4bf6:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    4bf8:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4bfa:	4b10      	ldr	r3, [pc, #64]	; (4c3c <usbdc_get_str_desc+0x50>)
    4bfc:	7f1c      	ldrb	r4, [r3, #28]
    4bfe:	3c01      	subs	r4, #1
    4c00:	4034      	ands	r4, r6
    4c02:	4261      	negs	r1, r4
    4c04:	414c      	adcs	r4, r1
    4c06:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    4c08:	681b      	ldr	r3, [r3, #0]
    4c0a:	6818      	ldr	r0, [r3, #0]
    4c0c:	6859      	ldr	r1, [r3, #4]
    4c0e:	4b0c      	ldr	r3, [pc, #48]	; (4c40 <usbdc_get_str_desc+0x54>)
    4c10:	4798      	blx	r3
	if (NULL == str_desc) {
    4c12:	2800      	cmp	r0, #0
    4c14:	d00f      	beq.n	4c36 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    4c16:	7802      	ldrb	r2, [r0, #0]
    4c18:	4296      	cmp	r6, r2
    4c1a:	d801      	bhi.n	4c20 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    4c1c:	0032      	movs	r2, r6
		need_zlp = false;
    4c1e:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4c20:	0023      	movs	r3, r4
    4c22:	0001      	movs	r1, r0
    4c24:	0028      	movs	r0, r5
    4c26:	4c07      	ldr	r4, [pc, #28]	; (4c44 <usbdc_get_str_desc+0x58>)
    4c28:	47a0      	blx	r4
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d101      	bne.n	4c32 <usbdc_get_str_desc+0x46>
	return true;
    4c2e:	2001      	movs	r0, #1
}
    4c30:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    4c32:	2000      	movs	r0, #0
    4c34:	e7fc      	b.n	4c30 <usbdc_get_str_desc+0x44>
		return false;
    4c36:	2000      	movs	r0, #0
    4c38:	e7fa      	b.n	4c30 <usbdc_get_str_desc+0x44>
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	20000b4c 	.word	0x20000b4c
    4c40:	00004f85 	.word	0x00004f85
    4c44:	00004955 	.word	0x00004955

00004c48 <usbdc_get_desc_req>:
{
    4c48:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    4c4a:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    4c4c:	2b02      	cmp	r3, #2
    4c4e:	d008      	beq.n	4c62 <usbdc_get_desc_req+0x1a>
    4c50:	2b03      	cmp	r3, #3
    4c52:	d009      	beq.n	4c68 <usbdc_get_desc_req+0x20>
    4c54:	2b01      	cmp	r3, #1
    4c56:	d001      	beq.n	4c5c <usbdc_get_desc_req+0x14>
	return false;
    4c58:	2000      	movs	r0, #0
    4c5a:	e001      	b.n	4c60 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    4c5c:	4b04      	ldr	r3, [pc, #16]	; (4c70 <usbdc_get_desc_req+0x28>)
    4c5e:	4798      	blx	r3
}
    4c60:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    4c62:	4b04      	ldr	r3, [pc, #16]	; (4c74 <usbdc_get_desc_req+0x2c>)
    4c64:	4798      	blx	r3
    4c66:	e7fb      	b.n	4c60 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    4c68:	4b03      	ldr	r3, [pc, #12]	; (4c78 <usbdc_get_desc_req+0x30>)
    4c6a:	4798      	blx	r3
    4c6c:	e7f8      	b.n	4c60 <usbdc_get_desc_req+0x18>
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	00004b39 	.word	0x00004b39
    4c74:	00004b85 	.word	0x00004b85
    4c78:	00004bed 	.word	0x00004bed

00004c7c <usbdc_get_status_req>:
{
    4c7c:	b530      	push	{r4, r5, lr}
    4c7e:	b083      	sub	sp, #12
    4c80:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4c82:	780a      	ldrb	r2, [r1, #0]
    4c84:	231f      	movs	r3, #31
    4c86:	4013      	ands	r3, r2
    4c88:	b2da      	uxtb	r2, r3
    4c8a:	2a01      	cmp	r2, #1
    4c8c:	d903      	bls.n	4c96 <usbdc_get_status_req+0x1a>
    4c8e:	2b02      	cmp	r3, #2
    4c90:	d012      	beq.n	4cb8 <usbdc_get_status_req+0x3c>
		return false;
    4c92:	2000      	movs	r0, #0
    4c94:	e00e      	b.n	4cb4 <usbdc_get_status_req+0x38>
		st = 0;
    4c96:	2300      	movs	r3, #0
    4c98:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4c9a:	4d0d      	ldr	r5, [pc, #52]	; (4cd0 <usbdc_get_status_req+0x54>)
    4c9c:	2202      	movs	r2, #2
    4c9e:	a901      	add	r1, sp, #4
    4ca0:	6968      	ldr	r0, [r5, #20]
    4ca2:	4b0c      	ldr	r3, [pc, #48]	; (4cd4 <usbdc_get_status_req+0x58>)
    4ca4:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4ca6:	6969      	ldr	r1, [r5, #20]
    4ca8:	2300      	movs	r3, #0
    4caa:	2202      	movs	r2, #2
    4cac:	0020      	movs	r0, r4
    4cae:	4c0a      	ldr	r4, [pc, #40]	; (4cd8 <usbdc_get_status_req+0x5c>)
    4cb0:	47a0      	blx	r4
	return true;
    4cb2:	2001      	movs	r0, #1
}
    4cb4:	b003      	add	sp, #12
    4cb6:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4cb8:	7908      	ldrb	r0, [r1, #4]
    4cba:	2102      	movs	r1, #2
    4cbc:	4b07      	ldr	r3, [pc, #28]	; (4cdc <usbdc_get_status_req+0x60>)
    4cbe:	4798      	blx	r3
		if (st < 0) {
    4cc0:	2800      	cmp	r0, #0
    4cc2:	db03      	blt.n	4ccc <usbdc_get_status_req+0x50>
		st = st & 0x1;
    4cc4:	2301      	movs	r3, #1
    4cc6:	4018      	ands	r0, r3
    4cc8:	9001      	str	r0, [sp, #4]
		break;
    4cca:	e7e6      	b.n	4c9a <usbdc_get_status_req+0x1e>
			return false;
    4ccc:	2000      	movs	r0, #0
    4cce:	e7f1      	b.n	4cb4 <usbdc_get_status_req+0x38>
    4cd0:	20000b4c 	.word	0x20000b4c
    4cd4:	00007165 	.word	0x00007165
    4cd8:	00004955 	.word	0x00004955
    4cdc:	000020bd 	.word	0x000020bd

00004ce0 <usbdc_get_interface>:
{
    4ce0:	b570      	push	{r4, r5, r6, lr}
    4ce2:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4ce4:	4b16      	ldr	r3, [pc, #88]	; (4d40 <usbdc_get_interface+0x60>)
    4ce6:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4ce8:	7f5a      	ldrb	r2, [r3, #29]
    4cea:	7901      	ldrb	r1, [r0, #4]
    4cec:	7943      	ldrb	r3, [r0, #5]
    4cee:	021b      	lsls	r3, r3, #8
    4cf0:	430b      	orrs	r3, r1
    4cf2:	411a      	asrs	r2, r3
    4cf4:	07d3      	lsls	r3, r2, #31
    4cf6:	d50a      	bpl.n	4d0e <usbdc_get_interface+0x2e>
	while (NULL != func) {
    4cf8:	2c00      	cmp	r4, #0
    4cfa:	d01f      	beq.n	4d3c <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4cfc:	002a      	movs	r2, r5
    4cfe:	2102      	movs	r1, #2
    4d00:	0020      	movs	r0, r4
    4d02:	6863      	ldr	r3, [r4, #4]
    4d04:	4798      	blx	r3
    4d06:	2800      	cmp	r0, #0
    4d08:	da0d      	bge.n	4d26 <usbdc_get_interface+0x46>
			func = func->next;
    4d0a:	6824      	ldr	r4, [r4, #0]
    4d0c:	e7f4      	b.n	4cf8 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    4d0e:	4b0c      	ldr	r3, [pc, #48]	; (4d40 <usbdc_get_interface+0x60>)
    4d10:	2200      	movs	r2, #0
    4d12:	6959      	ldr	r1, [r3, #20]
    4d14:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4d16:	6959      	ldr	r1, [r3, #20]
    4d18:	2300      	movs	r3, #0
    4d1a:	3201      	adds	r2, #1
    4d1c:	2000      	movs	r0, #0
    4d1e:	4c09      	ldr	r4, [pc, #36]	; (4d44 <usbdc_get_interface+0x64>)
    4d20:	47a0      	blx	r4
		return true;
    4d22:	2001      	movs	r0, #1
    4d24:	e00b      	b.n	4d3e <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    4d26:	4b06      	ldr	r3, [pc, #24]	; (4d40 <usbdc_get_interface+0x60>)
    4d28:	695a      	ldr	r2, [r3, #20]
    4d2a:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4d2c:	6959      	ldr	r1, [r3, #20]
    4d2e:	2300      	movs	r3, #0
    4d30:	2201      	movs	r2, #1
    4d32:	2000      	movs	r0, #0
    4d34:	4c03      	ldr	r4, [pc, #12]	; (4d44 <usbdc_get_interface+0x64>)
    4d36:	47a0      	blx	r4
			return true;
    4d38:	2001      	movs	r0, #1
    4d3a:	e000      	b.n	4d3e <usbdc_get_interface+0x5e>
	return false;
    4d3c:	2000      	movs	r0, #0
}
    4d3e:	bd70      	pop	{r4, r5, r6, pc}
    4d40:	20000b4c 	.word	0x20000b4c
    4d44:	00004955 	.word	0x00004955

00004d48 <usbdc_get_req>:
{
    4d48:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    4d4a:	784b      	ldrb	r3, [r1, #1]
    4d4c:	2b06      	cmp	r3, #6
    4d4e:	d00d      	beq.n	4d6c <usbdc_get_req+0x24>
    4d50:	d907      	bls.n	4d62 <usbdc_get_req+0x1a>
    4d52:	2b08      	cmp	r3, #8
    4d54:	d00d      	beq.n	4d72 <usbdc_get_req+0x2a>
    4d56:	2b0a      	cmp	r3, #10
    4d58:	d116      	bne.n	4d88 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    4d5a:	0008      	movs	r0, r1
    4d5c:	4b0b      	ldr	r3, [pc, #44]	; (4d8c <usbdc_get_req+0x44>)
    4d5e:	4798      	blx	r3
    4d60:	e006      	b.n	4d70 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    4d62:	2b00      	cmp	r3, #0
    4d64:	d110      	bne.n	4d88 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    4d66:	4b0a      	ldr	r3, [pc, #40]	; (4d90 <usbdc_get_req+0x48>)
    4d68:	4798      	blx	r3
    4d6a:	e001      	b.n	4d70 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    4d6c:	4b09      	ldr	r3, [pc, #36]	; (4d94 <usbdc_get_req+0x4c>)
    4d6e:	4798      	blx	r3
}
    4d70:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    4d72:	4b09      	ldr	r3, [pc, #36]	; (4d98 <usbdc_get_req+0x50>)
    4d74:	7eda      	ldrb	r2, [r3, #27]
    4d76:	6959      	ldr	r1, [r3, #20]
    4d78:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4d7a:	6959      	ldr	r1, [r3, #20]
    4d7c:	2300      	movs	r3, #0
    4d7e:	2201      	movs	r2, #1
    4d80:	4c06      	ldr	r4, [pc, #24]	; (4d9c <usbdc_get_req+0x54>)
    4d82:	47a0      	blx	r4
		return true;
    4d84:	2001      	movs	r0, #1
    4d86:	e7f3      	b.n	4d70 <usbdc_get_req+0x28>
		return false;
    4d88:	2000      	movs	r0, #0
    4d8a:	e7f1      	b.n	4d70 <usbdc_get_req+0x28>
    4d8c:	00004ce1 	.word	0x00004ce1
    4d90:	00004c7d 	.word	0x00004c7d
    4d94:	00004c49 	.word	0x00004c49
    4d98:	20000b4c 	.word	0x20000b4c
    4d9c:	00004955 	.word	0x00004955

00004da0 <usbdc_cb_ctl_req>:
{
    4da0:	b570      	push	{r4, r5, r6, lr}
    4da2:	0005      	movs	r5, r0
    4da4:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4da6:	2200      	movs	r2, #0
    4da8:	4b0d      	ldr	r3, [pc, #52]	; (4de0 <usbdc_cb_ctl_req+0x40>)
    4daa:	4798      	blx	r3
    4dac:	1c43      	adds	r3, r0, #1
    4dae:	d014      	beq.n	4dda <usbdc_cb_ctl_req+0x3a>
    4db0:	2801      	cmp	r0, #1
    4db2:	d013      	beq.n	4ddc <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4db4:	7823      	ldrb	r3, [r4, #0]
    4db6:	221f      	movs	r2, #31
    4db8:	4393      	bics	r3, r2
    4dba:	d004      	beq.n	4dc6 <usbdc_cb_ctl_req+0x26>
    4dbc:	b2db      	uxtb	r3, r3
    4dbe:	2b80      	cmp	r3, #128	; 0x80
    4dc0:	d006      	beq.n	4dd0 <usbdc_cb_ctl_req+0x30>
		return false;
    4dc2:	2000      	movs	r0, #0
    4dc4:	e00a      	b.n	4ddc <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    4dc6:	0021      	movs	r1, r4
    4dc8:	0028      	movs	r0, r5
    4dca:	4b06      	ldr	r3, [pc, #24]	; (4de4 <usbdc_cb_ctl_req+0x44>)
    4dcc:	4798      	blx	r3
    4dce:	e005      	b.n	4ddc <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    4dd0:	0021      	movs	r1, r4
    4dd2:	0028      	movs	r0, r5
    4dd4:	4b04      	ldr	r3, [pc, #16]	; (4de8 <usbdc_cb_ctl_req+0x48>)
    4dd6:	4798      	blx	r3
    4dd8:	e000      	b.n	4ddc <usbdc_cb_ctl_req+0x3c>
		return false;
    4dda:	2000      	movs	r0, #0
}
    4ddc:	bd70      	pop	{r4, r5, r6, pc}
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	00004751 	.word	0x00004751
    4de4:	00004ab5 	.word	0x00004ab5
    4de8:	00004d49 	.word	0x00004d49

00004dec <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4dec:	b510      	push	{r4, lr}
	switch (type) {
    4dee:	2801      	cmp	r0, #1
    4df0:	d009      	beq.n	4e06 <usbdc_register_handler+0x1a>
    4df2:	2800      	cmp	r0, #0
    4df4:	d002      	beq.n	4dfc <usbdc_register_handler+0x10>
    4df6:	2802      	cmp	r0, #2
    4df8:	d00a      	beq.n	4e10 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    4dfa:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4dfc:	4807      	ldr	r0, [pc, #28]	; (4e1c <usbdc_register_handler+0x30>)
    4dfe:	3004      	adds	r0, #4
    4e00:	4b07      	ldr	r3, [pc, #28]	; (4e20 <usbdc_register_handler+0x34>)
    4e02:	4798      	blx	r3
		break;
    4e04:	e7f9      	b.n	4dfa <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    4e06:	4805      	ldr	r0, [pc, #20]	; (4e1c <usbdc_register_handler+0x30>)
    4e08:	3008      	adds	r0, #8
    4e0a:	4b05      	ldr	r3, [pc, #20]	; (4e20 <usbdc_register_handler+0x34>)
    4e0c:	4798      	blx	r3
		break;
    4e0e:	e7f4      	b.n	4dfa <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4e10:	4802      	ldr	r0, [pc, #8]	; (4e1c <usbdc_register_handler+0x30>)
    4e12:	300c      	adds	r0, #12
    4e14:	4b02      	ldr	r3, [pc, #8]	; (4e20 <usbdc_register_handler+0x34>)
    4e16:	4798      	blx	r3
}
    4e18:	e7ef      	b.n	4dfa <usbdc_register_handler+0xe>
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	20000b4c 	.word	0x20000b4c
    4e20:	000021c9 	.word	0x000021c9

00004e24 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4e24:	b570      	push	{r4, r5, r6, lr}
    4e26:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    4e28:	1e43      	subs	r3, r0, #1
    4e2a:	4198      	sbcs	r0, r3
    4e2c:	b2c0      	uxtb	r0, r0
    4e2e:	4a0c      	ldr	r2, [pc, #48]	; (4e60 <usbdc_init+0x3c>)
    4e30:	490c      	ldr	r1, [pc, #48]	; (4e64 <usbdc_init+0x40>)
    4e32:	4b0d      	ldr	r3, [pc, #52]	; (4e68 <usbdc_init+0x44>)
    4e34:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4e36:	4b0d      	ldr	r3, [pc, #52]	; (4e6c <usbdc_init+0x48>)
    4e38:	4798      	blx	r3
	if (rc < 0) {
    4e3a:	2800      	cmp	r0, #0
    4e3c:	db0e      	blt.n	4e5c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4e3e:	4d0c      	ldr	r5, [pc, #48]	; (4e70 <usbdc_init+0x4c>)
    4e40:	2220      	movs	r2, #32
    4e42:	2100      	movs	r1, #0
    4e44:	0028      	movs	r0, r5
    4e46:	4b0b      	ldr	r3, [pc, #44]	; (4e74 <usbdc_init+0x50>)
    4e48:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4e4a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4e4c:	490a      	ldr	r1, [pc, #40]	; (4e78 <usbdc_init+0x54>)
    4e4e:	2000      	movs	r0, #0
    4e50:	4c0a      	ldr	r4, [pc, #40]	; (4e7c <usbdc_init+0x58>)
    4e52:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4e54:	490a      	ldr	r1, [pc, #40]	; (4e80 <usbdc_init+0x5c>)
    4e56:	2001      	movs	r0, #1
    4e58:	47a0      	blx	r4

	return 0;
    4e5a:	2000      	movs	r0, #0
}
    4e5c:	bd70      	pop	{r4, r5, r6, pc}
    4e5e:	46c0      	nop			; (mov r8, r8)
    4e60:	00000355 	.word	0x00000355
    4e64:	00007710 	.word	0x00007710
    4e68:	00002175 	.word	0x00002175
    4e6c:	00001de9 	.word	0x00001de9
    4e70:	20000b4c 	.word	0x20000b4c
    4e74:	000071e9 	.word	0x000071e9
    4e78:	0000478d 	.word	0x0000478d
    4e7c:	00001e55 	.word	0x00001e55
    4e80:	00004931 	.word	0x00004931

00004e84 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    4e84:	b510      	push	{r4, lr}
    4e86:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    4e88:	4802      	ldr	r0, [pc, #8]	; (4e94 <usbdc_register_function+0x10>)
    4e8a:	3010      	adds	r0, #16
    4e8c:	4b02      	ldr	r3, [pc, #8]	; (4e98 <usbdc_register_function+0x14>)
    4e8e:	4798      	blx	r3
}
    4e90:	bd10      	pop	{r4, pc}
    4e92:	46c0      	nop			; (mov r8, r8)
    4e94:	20000b4c 	.word	0x20000b4c
    4e98:	000021c9 	.word	0x000021c9

00004e9c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4e9c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4e9e:	4b0b      	ldr	r3, [pc, #44]	; (4ecc <usbdc_start+0x30>)
    4ea0:	7e9b      	ldrb	r3, [r3, #26]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d10c      	bne.n	4ec0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    4ea6:	2800      	cmp	r0, #0
    4ea8:	d00d      	beq.n	4ec6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    4eaa:	4b08      	ldr	r3, [pc, #32]	; (4ecc <usbdc_start+0x30>)
    4eac:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    4eae:	6802      	ldr	r2, [r0, #0]
    4eb0:	79d2      	ldrb	r2, [r2, #7]
    4eb2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4eb4:	2201      	movs	r2, #1
    4eb6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    4eb8:	4b05      	ldr	r3, [pc, #20]	; (4ed0 <usbdc_start+0x34>)
    4eba:	4798      	blx	r3
	return ERR_NONE;
    4ebc:	2000      	movs	r0, #0
}
    4ebe:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    4ec0:	2004      	movs	r0, #4
    4ec2:	4240      	negs	r0, r0
    4ec4:	e7fb      	b.n	4ebe <usbdc_start+0x22>
		return ERR_BAD_DATA;
    4ec6:	2009      	movs	r0, #9
    4ec8:	4240      	negs	r0, r0
    4eca:	e7f8      	b.n	4ebe <usbdc_start+0x22>
    4ecc:	20000b4c 	.word	0x20000b4c
    4ed0:	00001e61 	.word	0x00001e61

00004ed4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4ed4:	b510      	push	{r4, lr}
	usb_d_attach();
    4ed6:	4b01      	ldr	r3, [pc, #4]	; (4edc <usbdc_attach+0x8>)
    4ed8:	4798      	blx	r3
}
    4eda:	bd10      	pop	{r4, pc}
    4edc:	00001e6d 	.word	0x00001e6d

00004ee0 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    4ee0:	4b01      	ldr	r3, [pc, #4]	; (4ee8 <usbdc_get_ctrl_buffer+0x8>)
    4ee2:	6958      	ldr	r0, [r3, #20]
}
    4ee4:	4770      	bx	lr
    4ee6:	46c0      	nop			; (mov r8, r8)
    4ee8:	20000b4c 	.word	0x20000b4c

00004eec <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4eec:	4b02      	ldr	r3, [pc, #8]	; (4ef8 <usbdc_get_state+0xc>)
    4eee:	7e98      	ldrb	r0, [r3, #26]
    4ef0:	06c3      	lsls	r3, r0, #27
    4ef2:	d500      	bpl.n	4ef6 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    4ef4:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    4ef6:	4770      	bx	lr
    4ef8:	20000b4c 	.word	0x20000b4c

00004efc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    4efc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4efe:	4288      	cmp	r0, r1
    4f00:	d207      	bcs.n	4f12 <usb_find_desc+0x16>
	return desc[0];
    4f02:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4f04:	2b01      	cmp	r3, #1
    4f06:	d906      	bls.n	4f16 <usb_find_desc+0x1a>
	return desc[1];
    4f08:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4f0a:	4294      	cmp	r4, r2
    4f0c:	d002      	beq.n	4f14 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    4f0e:	18c0      	adds	r0, r0, r3
    4f10:	e7f5      	b.n	4efe <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4f12:	2000      	movs	r0, #0
}
    4f14:	bd10      	pop	{r4, pc}
		_desc_len_check();
    4f16:	2000      	movs	r0, #0
    4f18:	e7fc      	b.n	4f14 <usb_find_desc+0x18>

00004f1a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4f1a:	4288      	cmp	r0, r1
    4f1c:	d209      	bcs.n	4f32 <usb_find_ep_desc+0x18>
	return desc[0];
    4f1e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4f20:	2b01      	cmp	r3, #1
    4f22:	d908      	bls.n	4f36 <usb_find_ep_desc+0x1c>
	return desc[1];
    4f24:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4f26:	2a04      	cmp	r2, #4
    4f28:	d007      	beq.n	4f3a <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4f2a:	2a05      	cmp	r2, #5
    4f2c:	d002      	beq.n	4f34 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    4f2e:	18c0      	adds	r0, r0, r3
    4f30:	e7f3      	b.n	4f1a <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4f32:	2000      	movs	r0, #0
}
    4f34:	4770      	bx	lr
		_desc_len_check();
    4f36:	2000      	movs	r0, #0
    4f38:	e7fc      	b.n	4f34 <usb_find_ep_desc+0x1a>
	return NULL;
    4f3a:	2000      	movs	r0, #0
    4f3c:	e7fa      	b.n	4f34 <usb_find_ep_desc+0x1a>
	...

00004f40 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4f40:	b570      	push	{r4, r5, r6, lr}
    4f42:	000c      	movs	r4, r1
    4f44:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4f46:	2202      	movs	r2, #2
    4f48:	4b0d      	ldr	r3, [pc, #52]	; (4f80 <usb_find_cfg_desc+0x40>)
    4f4a:	4798      	blx	r3
	if (!desc) {
    4f4c:	2800      	cmp	r0, #0
    4f4e:	d012      	beq.n	4f76 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    4f50:	42a0      	cmp	r0, r4
    4f52:	d20f      	bcs.n	4f74 <usb_find_cfg_desc+0x34>
	return desc[0];
    4f54:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4f56:	2b01      	cmp	r3, #1
    4f58:	d90e      	bls.n	4f78 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    4f5a:	7843      	ldrb	r3, [r0, #1]
    4f5c:	2b02      	cmp	r3, #2
    4f5e:	d10d      	bne.n	4f7c <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    4f60:	7943      	ldrb	r3, [r0, #5]
    4f62:	42ab      	cmp	r3, r5
    4f64:	d007      	beq.n	4f76 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    4f66:	7883      	ldrb	r3, [r0, #2]
    4f68:	78c2      	ldrb	r2, [r0, #3]
    4f6a:	0212      	lsls	r2, r2, #8
    4f6c:	189b      	adds	r3, r3, r2
    4f6e:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4f70:	18c0      	adds	r0, r0, r3
    4f72:	e7ed      	b.n	4f50 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4f74:	2000      	movs	r0, #0
}
    4f76:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    4f78:	2000      	movs	r0, #0
    4f7a:	e7fc      	b.n	4f76 <usb_find_cfg_desc+0x36>
	return NULL;
    4f7c:	2000      	movs	r0, #0
    4f7e:	e7fa      	b.n	4f76 <usb_find_cfg_desc+0x36>
    4f80:	00004efd 	.word	0x00004efd

00004f84 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    4f84:	b570      	push	{r4, r5, r6, lr}
    4f86:	000d      	movs	r5, r1
    4f88:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4f8a:	2400      	movs	r4, #0
    4f8c:	42a8      	cmp	r0, r5
    4f8e:	d20e      	bcs.n	4fae <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4f90:	2203      	movs	r2, #3
    4f92:	0029      	movs	r1, r5
    4f94:	4b08      	ldr	r3, [pc, #32]	; (4fb8 <usb_find_str_desc+0x34>)
    4f96:	4798      	blx	r3
		if (desc) {
    4f98:	2800      	cmp	r0, #0
    4f9a:	d009      	beq.n	4fb0 <usb_find_str_desc+0x2c>
	return desc[0];
    4f9c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    4f9e:	2b01      	cmp	r3, #1
    4fa0:	d907      	bls.n	4fb2 <usb_find_str_desc+0x2e>
			if (i == str_index) {
    4fa2:	42b4      	cmp	r4, r6
    4fa4:	d004      	beq.n	4fb0 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    4fa6:	3401      	adds	r4, #1
    4fa8:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    4faa:	18c0      	adds	r0, r0, r3
    4fac:	e7ee      	b.n	4f8c <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4fae:	2000      	movs	r0, #0
}
    4fb0:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    4fb2:	2000      	movs	r0, #0
    4fb4:	e7fc      	b.n	4fb0 <usb_find_str_desc+0x2c>
    4fb6:	46c0      	nop			; (mov r8, r8)
    4fb8:	00004efd 	.word	0x00004efd

00004fbc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    4fbc:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    4fbe:	4806      	ldr	r0, [pc, #24]	; (4fd8 <cdc_device_acm_init+0x1c>)
    4fc0:	3040      	adds	r0, #64	; 0x40
    4fc2:	4b06      	ldr	r3, [pc, #24]	; (4fdc <cdc_device_acm_init+0x20>)
    4fc4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4fc6:	4b06      	ldr	r3, [pc, #24]	; (4fe0 <cdc_device_acm_init+0x24>)
    4fc8:	4798      	blx	r3

	usbdc_start(single_desc);
    4fca:	4806      	ldr	r0, [pc, #24]	; (4fe4 <cdc_device_acm_init+0x28>)
    4fcc:	4b06      	ldr	r3, [pc, #24]	; (4fe8 <cdc_device_acm_init+0x2c>)
    4fce:	4798      	blx	r3
	usbdc_attach();
    4fd0:	4b06      	ldr	r3, [pc, #24]	; (4fec <cdc_device_acm_init+0x30>)
    4fd2:	4798      	blx	r3
}
    4fd4:	bd10      	pop	{r4, pc}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	20000b6c 	.word	0x20000b6c
    4fdc:	00004e25 	.word	0x00004e25
    4fe0:	000045cd 	.word	0x000045cd
    4fe4:	2000000c 	.word	0x2000000c
    4fe8:	00004e9d 	.word	0x00004e9d
    4fec:	00004ed5 	.word	0x00004ed5

00004ff0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4ff0:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    4ff2:	4b01      	ldr	r3, [pc, #4]	; (4ff8 <usb_init+0x8>)
    4ff4:	4798      	blx	r3
}
    4ff6:	bd10      	pop	{r4, pc}
    4ff8:	00004fbd 	.word	0x00004fbd

00004ffc <__aeabi_atexit>:
    4ffc:	000b      	movs	r3, r1
    4ffe:	b510      	push	{r4, lr}
    5000:	0001      	movs	r1, r0
    5002:	0018      	movs	r0, r3
    5004:	f002 f882 	bl	710c <__cxa_atexit>
    5008:	bd10      	pop	{r4, pc}
    500a:	46c0      	nop			; (mov r8, r8)

0000500c <__udivsi3>:
    500c:	2200      	movs	r2, #0
    500e:	0843      	lsrs	r3, r0, #1
    5010:	428b      	cmp	r3, r1
    5012:	d374      	bcc.n	50fe <__udivsi3+0xf2>
    5014:	0903      	lsrs	r3, r0, #4
    5016:	428b      	cmp	r3, r1
    5018:	d35f      	bcc.n	50da <__udivsi3+0xce>
    501a:	0a03      	lsrs	r3, r0, #8
    501c:	428b      	cmp	r3, r1
    501e:	d344      	bcc.n	50aa <__udivsi3+0x9e>
    5020:	0b03      	lsrs	r3, r0, #12
    5022:	428b      	cmp	r3, r1
    5024:	d328      	bcc.n	5078 <__udivsi3+0x6c>
    5026:	0c03      	lsrs	r3, r0, #16
    5028:	428b      	cmp	r3, r1
    502a:	d30d      	bcc.n	5048 <__udivsi3+0x3c>
    502c:	22ff      	movs	r2, #255	; 0xff
    502e:	0209      	lsls	r1, r1, #8
    5030:	ba12      	rev	r2, r2
    5032:	0c03      	lsrs	r3, r0, #16
    5034:	428b      	cmp	r3, r1
    5036:	d302      	bcc.n	503e <__udivsi3+0x32>
    5038:	1212      	asrs	r2, r2, #8
    503a:	0209      	lsls	r1, r1, #8
    503c:	d065      	beq.n	510a <__udivsi3+0xfe>
    503e:	0b03      	lsrs	r3, r0, #12
    5040:	428b      	cmp	r3, r1
    5042:	d319      	bcc.n	5078 <__udivsi3+0x6c>
    5044:	e000      	b.n	5048 <__udivsi3+0x3c>
    5046:	0a09      	lsrs	r1, r1, #8
    5048:	0bc3      	lsrs	r3, r0, #15
    504a:	428b      	cmp	r3, r1
    504c:	d301      	bcc.n	5052 <__udivsi3+0x46>
    504e:	03cb      	lsls	r3, r1, #15
    5050:	1ac0      	subs	r0, r0, r3
    5052:	4152      	adcs	r2, r2
    5054:	0b83      	lsrs	r3, r0, #14
    5056:	428b      	cmp	r3, r1
    5058:	d301      	bcc.n	505e <__udivsi3+0x52>
    505a:	038b      	lsls	r3, r1, #14
    505c:	1ac0      	subs	r0, r0, r3
    505e:	4152      	adcs	r2, r2
    5060:	0b43      	lsrs	r3, r0, #13
    5062:	428b      	cmp	r3, r1
    5064:	d301      	bcc.n	506a <__udivsi3+0x5e>
    5066:	034b      	lsls	r3, r1, #13
    5068:	1ac0      	subs	r0, r0, r3
    506a:	4152      	adcs	r2, r2
    506c:	0b03      	lsrs	r3, r0, #12
    506e:	428b      	cmp	r3, r1
    5070:	d301      	bcc.n	5076 <__udivsi3+0x6a>
    5072:	030b      	lsls	r3, r1, #12
    5074:	1ac0      	subs	r0, r0, r3
    5076:	4152      	adcs	r2, r2
    5078:	0ac3      	lsrs	r3, r0, #11
    507a:	428b      	cmp	r3, r1
    507c:	d301      	bcc.n	5082 <__udivsi3+0x76>
    507e:	02cb      	lsls	r3, r1, #11
    5080:	1ac0      	subs	r0, r0, r3
    5082:	4152      	adcs	r2, r2
    5084:	0a83      	lsrs	r3, r0, #10
    5086:	428b      	cmp	r3, r1
    5088:	d301      	bcc.n	508e <__udivsi3+0x82>
    508a:	028b      	lsls	r3, r1, #10
    508c:	1ac0      	subs	r0, r0, r3
    508e:	4152      	adcs	r2, r2
    5090:	0a43      	lsrs	r3, r0, #9
    5092:	428b      	cmp	r3, r1
    5094:	d301      	bcc.n	509a <__udivsi3+0x8e>
    5096:	024b      	lsls	r3, r1, #9
    5098:	1ac0      	subs	r0, r0, r3
    509a:	4152      	adcs	r2, r2
    509c:	0a03      	lsrs	r3, r0, #8
    509e:	428b      	cmp	r3, r1
    50a0:	d301      	bcc.n	50a6 <__udivsi3+0x9a>
    50a2:	020b      	lsls	r3, r1, #8
    50a4:	1ac0      	subs	r0, r0, r3
    50a6:	4152      	adcs	r2, r2
    50a8:	d2cd      	bcs.n	5046 <__udivsi3+0x3a>
    50aa:	09c3      	lsrs	r3, r0, #7
    50ac:	428b      	cmp	r3, r1
    50ae:	d301      	bcc.n	50b4 <__udivsi3+0xa8>
    50b0:	01cb      	lsls	r3, r1, #7
    50b2:	1ac0      	subs	r0, r0, r3
    50b4:	4152      	adcs	r2, r2
    50b6:	0983      	lsrs	r3, r0, #6
    50b8:	428b      	cmp	r3, r1
    50ba:	d301      	bcc.n	50c0 <__udivsi3+0xb4>
    50bc:	018b      	lsls	r3, r1, #6
    50be:	1ac0      	subs	r0, r0, r3
    50c0:	4152      	adcs	r2, r2
    50c2:	0943      	lsrs	r3, r0, #5
    50c4:	428b      	cmp	r3, r1
    50c6:	d301      	bcc.n	50cc <__udivsi3+0xc0>
    50c8:	014b      	lsls	r3, r1, #5
    50ca:	1ac0      	subs	r0, r0, r3
    50cc:	4152      	adcs	r2, r2
    50ce:	0903      	lsrs	r3, r0, #4
    50d0:	428b      	cmp	r3, r1
    50d2:	d301      	bcc.n	50d8 <__udivsi3+0xcc>
    50d4:	010b      	lsls	r3, r1, #4
    50d6:	1ac0      	subs	r0, r0, r3
    50d8:	4152      	adcs	r2, r2
    50da:	08c3      	lsrs	r3, r0, #3
    50dc:	428b      	cmp	r3, r1
    50de:	d301      	bcc.n	50e4 <__udivsi3+0xd8>
    50e0:	00cb      	lsls	r3, r1, #3
    50e2:	1ac0      	subs	r0, r0, r3
    50e4:	4152      	adcs	r2, r2
    50e6:	0883      	lsrs	r3, r0, #2
    50e8:	428b      	cmp	r3, r1
    50ea:	d301      	bcc.n	50f0 <__udivsi3+0xe4>
    50ec:	008b      	lsls	r3, r1, #2
    50ee:	1ac0      	subs	r0, r0, r3
    50f0:	4152      	adcs	r2, r2
    50f2:	0843      	lsrs	r3, r0, #1
    50f4:	428b      	cmp	r3, r1
    50f6:	d301      	bcc.n	50fc <__udivsi3+0xf0>
    50f8:	004b      	lsls	r3, r1, #1
    50fa:	1ac0      	subs	r0, r0, r3
    50fc:	4152      	adcs	r2, r2
    50fe:	1a41      	subs	r1, r0, r1
    5100:	d200      	bcs.n	5104 <__udivsi3+0xf8>
    5102:	4601      	mov	r1, r0
    5104:	4152      	adcs	r2, r2
    5106:	4610      	mov	r0, r2
    5108:	4770      	bx	lr
    510a:	e7ff      	b.n	510c <__udivsi3+0x100>
    510c:	b501      	push	{r0, lr}
    510e:	2000      	movs	r0, #0
    5110:	f000 f806 	bl	5120 <__aeabi_idiv0>
    5114:	bd02      	pop	{r1, pc}
    5116:	46c0      	nop			; (mov r8, r8)

00005118 <__aeabi_uidivmod>:
    5118:	2900      	cmp	r1, #0
    511a:	d0f7      	beq.n	510c <__udivsi3+0x100>
    511c:	e776      	b.n	500c <__udivsi3>
    511e:	4770      	bx	lr

00005120 <__aeabi_idiv0>:
    5120:	4770      	bx	lr
    5122:	46c0      	nop			; (mov r8, r8)

00005124 <__aeabi_cdrcmple>:
    5124:	4684      	mov	ip, r0
    5126:	1c10      	adds	r0, r2, #0
    5128:	4662      	mov	r2, ip
    512a:	468c      	mov	ip, r1
    512c:	1c19      	adds	r1, r3, #0
    512e:	4663      	mov	r3, ip
    5130:	e000      	b.n	5134 <__aeabi_cdcmpeq>
    5132:	46c0      	nop			; (mov r8, r8)

00005134 <__aeabi_cdcmpeq>:
    5134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5136:	f001 f8d5 	bl	62e4 <__ledf2>
    513a:	2800      	cmp	r0, #0
    513c:	d401      	bmi.n	5142 <__aeabi_cdcmpeq+0xe>
    513e:	2100      	movs	r1, #0
    5140:	42c8      	cmn	r0, r1
    5142:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005144 <__aeabi_dcmpeq>:
    5144:	b510      	push	{r4, lr}
    5146:	f001 f82f 	bl	61a8 <__eqdf2>
    514a:	4240      	negs	r0, r0
    514c:	3001      	adds	r0, #1
    514e:	bd10      	pop	{r4, pc}

00005150 <__aeabi_dcmplt>:
    5150:	b510      	push	{r4, lr}
    5152:	f001 f8c7 	bl	62e4 <__ledf2>
    5156:	2800      	cmp	r0, #0
    5158:	db01      	blt.n	515e <__aeabi_dcmplt+0xe>
    515a:	2000      	movs	r0, #0
    515c:	bd10      	pop	{r4, pc}
    515e:	2001      	movs	r0, #1
    5160:	bd10      	pop	{r4, pc}
    5162:	46c0      	nop			; (mov r8, r8)

00005164 <__aeabi_dcmple>:
    5164:	b510      	push	{r4, lr}
    5166:	f001 f8bd 	bl	62e4 <__ledf2>
    516a:	2800      	cmp	r0, #0
    516c:	dd01      	ble.n	5172 <__aeabi_dcmple+0xe>
    516e:	2000      	movs	r0, #0
    5170:	bd10      	pop	{r4, pc}
    5172:	2001      	movs	r0, #1
    5174:	bd10      	pop	{r4, pc}
    5176:	46c0      	nop			; (mov r8, r8)

00005178 <__aeabi_dcmpgt>:
    5178:	b510      	push	{r4, lr}
    517a:	f001 f84f 	bl	621c <__gedf2>
    517e:	2800      	cmp	r0, #0
    5180:	dc01      	bgt.n	5186 <__aeabi_dcmpgt+0xe>
    5182:	2000      	movs	r0, #0
    5184:	bd10      	pop	{r4, pc}
    5186:	2001      	movs	r0, #1
    5188:	bd10      	pop	{r4, pc}
    518a:	46c0      	nop			; (mov r8, r8)

0000518c <__aeabi_dcmpge>:
    518c:	b510      	push	{r4, lr}
    518e:	f001 f845 	bl	621c <__gedf2>
    5192:	2800      	cmp	r0, #0
    5194:	da01      	bge.n	519a <__aeabi_dcmpge+0xe>
    5196:	2000      	movs	r0, #0
    5198:	bd10      	pop	{r4, pc}
    519a:	2001      	movs	r0, #1
    519c:	bd10      	pop	{r4, pc}
    519e:	46c0      	nop			; (mov r8, r8)

000051a0 <__ffssi2>:
    51a0:	b510      	push	{r4, lr}
    51a2:	2300      	movs	r3, #0
    51a4:	2800      	cmp	r0, #0
    51a6:	d002      	beq.n	51ae <__ffssi2+0xe>
    51a8:	f001 ff90 	bl	70cc <__ctzsi2>
    51ac:	1c43      	adds	r3, r0, #1
    51ae:	0018      	movs	r0, r3
    51b0:	bd10      	pop	{r4, pc}
    51b2:	46c0      	nop			; (mov r8, r8)

000051b4 <__aeabi_d2uiz>:
    51b4:	b570      	push	{r4, r5, r6, lr}
    51b6:	2200      	movs	r2, #0
    51b8:	4b0c      	ldr	r3, [pc, #48]	; (51ec <__aeabi_d2uiz+0x38>)
    51ba:	0004      	movs	r4, r0
    51bc:	000d      	movs	r5, r1
    51be:	f7ff ffe5 	bl	518c <__aeabi_dcmpge>
    51c2:	2800      	cmp	r0, #0
    51c4:	d104      	bne.n	51d0 <__aeabi_d2uiz+0x1c>
    51c6:	0020      	movs	r0, r4
    51c8:	0029      	movs	r1, r5
    51ca:	f001 fea3 	bl	6f14 <__aeabi_d2iz>
    51ce:	bd70      	pop	{r4, r5, r6, pc}
    51d0:	4b06      	ldr	r3, [pc, #24]	; (51ec <__aeabi_d2uiz+0x38>)
    51d2:	2200      	movs	r2, #0
    51d4:	0020      	movs	r0, r4
    51d6:	0029      	movs	r1, r5
    51d8:	f001 fb66 	bl	68a8 <__aeabi_dsub>
    51dc:	f001 fe9a 	bl	6f14 <__aeabi_d2iz>
    51e0:	2380      	movs	r3, #128	; 0x80
    51e2:	061b      	lsls	r3, r3, #24
    51e4:	469c      	mov	ip, r3
    51e6:	4460      	add	r0, ip
    51e8:	e7f1      	b.n	51ce <__aeabi_d2uiz+0x1a>
    51ea:	46c0      	nop			; (mov r8, r8)
    51ec:	41e00000 	.word	0x41e00000

000051f0 <__aeabi_fdiv>:
    51f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51f2:	4657      	mov	r7, sl
    51f4:	464e      	mov	r6, r9
    51f6:	46de      	mov	lr, fp
    51f8:	4645      	mov	r5, r8
    51fa:	b5e0      	push	{r5, r6, r7, lr}
    51fc:	0244      	lsls	r4, r0, #9
    51fe:	0043      	lsls	r3, r0, #1
    5200:	0fc6      	lsrs	r6, r0, #31
    5202:	b083      	sub	sp, #12
    5204:	1c0f      	adds	r7, r1, #0
    5206:	0a64      	lsrs	r4, r4, #9
    5208:	0e1b      	lsrs	r3, r3, #24
    520a:	46b2      	mov	sl, r6
    520c:	d053      	beq.n	52b6 <__aeabi_fdiv+0xc6>
    520e:	2bff      	cmp	r3, #255	; 0xff
    5210:	d027      	beq.n	5262 <__aeabi_fdiv+0x72>
    5212:	2280      	movs	r2, #128	; 0x80
    5214:	00e4      	lsls	r4, r4, #3
    5216:	04d2      	lsls	r2, r2, #19
    5218:	4314      	orrs	r4, r2
    521a:	227f      	movs	r2, #127	; 0x7f
    521c:	4252      	negs	r2, r2
    521e:	4690      	mov	r8, r2
    5220:	4498      	add	r8, r3
    5222:	2300      	movs	r3, #0
    5224:	4699      	mov	r9, r3
    5226:	469b      	mov	fp, r3
    5228:	027d      	lsls	r5, r7, #9
    522a:	0078      	lsls	r0, r7, #1
    522c:	0ffb      	lsrs	r3, r7, #31
    522e:	0a6d      	lsrs	r5, r5, #9
    5230:	0e00      	lsrs	r0, r0, #24
    5232:	9300      	str	r3, [sp, #0]
    5234:	d024      	beq.n	5280 <__aeabi_fdiv+0x90>
    5236:	28ff      	cmp	r0, #255	; 0xff
    5238:	d046      	beq.n	52c8 <__aeabi_fdiv+0xd8>
    523a:	2380      	movs	r3, #128	; 0x80
    523c:	2100      	movs	r1, #0
    523e:	00ed      	lsls	r5, r5, #3
    5240:	04db      	lsls	r3, r3, #19
    5242:	431d      	orrs	r5, r3
    5244:	387f      	subs	r0, #127	; 0x7f
    5246:	4647      	mov	r7, r8
    5248:	1a38      	subs	r0, r7, r0
    524a:	464f      	mov	r7, r9
    524c:	430f      	orrs	r7, r1
    524e:	00bf      	lsls	r7, r7, #2
    5250:	46b9      	mov	r9, r7
    5252:	0033      	movs	r3, r6
    5254:	9a00      	ldr	r2, [sp, #0]
    5256:	4f87      	ldr	r7, [pc, #540]	; (5474 <__aeabi_fdiv+0x284>)
    5258:	4053      	eors	r3, r2
    525a:	464a      	mov	r2, r9
    525c:	58ba      	ldr	r2, [r7, r2]
    525e:	9301      	str	r3, [sp, #4]
    5260:	4697      	mov	pc, r2
    5262:	2c00      	cmp	r4, #0
    5264:	d14e      	bne.n	5304 <__aeabi_fdiv+0x114>
    5266:	2308      	movs	r3, #8
    5268:	4699      	mov	r9, r3
    526a:	33f7      	adds	r3, #247	; 0xf7
    526c:	4698      	mov	r8, r3
    526e:	3bfd      	subs	r3, #253	; 0xfd
    5270:	469b      	mov	fp, r3
    5272:	027d      	lsls	r5, r7, #9
    5274:	0078      	lsls	r0, r7, #1
    5276:	0ffb      	lsrs	r3, r7, #31
    5278:	0a6d      	lsrs	r5, r5, #9
    527a:	0e00      	lsrs	r0, r0, #24
    527c:	9300      	str	r3, [sp, #0]
    527e:	d1da      	bne.n	5236 <__aeabi_fdiv+0x46>
    5280:	2d00      	cmp	r5, #0
    5282:	d126      	bne.n	52d2 <__aeabi_fdiv+0xe2>
    5284:	2000      	movs	r0, #0
    5286:	2101      	movs	r1, #1
    5288:	0033      	movs	r3, r6
    528a:	9a00      	ldr	r2, [sp, #0]
    528c:	4f7a      	ldr	r7, [pc, #488]	; (5478 <__aeabi_fdiv+0x288>)
    528e:	4053      	eors	r3, r2
    5290:	4642      	mov	r2, r8
    5292:	1a10      	subs	r0, r2, r0
    5294:	464a      	mov	r2, r9
    5296:	430a      	orrs	r2, r1
    5298:	0092      	lsls	r2, r2, #2
    529a:	58ba      	ldr	r2, [r7, r2]
    529c:	001d      	movs	r5, r3
    529e:	4697      	mov	pc, r2
    52a0:	9b00      	ldr	r3, [sp, #0]
    52a2:	002c      	movs	r4, r5
    52a4:	469a      	mov	sl, r3
    52a6:	468b      	mov	fp, r1
    52a8:	465b      	mov	r3, fp
    52aa:	2b02      	cmp	r3, #2
    52ac:	d131      	bne.n	5312 <__aeabi_fdiv+0x122>
    52ae:	4653      	mov	r3, sl
    52b0:	21ff      	movs	r1, #255	; 0xff
    52b2:	2400      	movs	r4, #0
    52b4:	e038      	b.n	5328 <__aeabi_fdiv+0x138>
    52b6:	2c00      	cmp	r4, #0
    52b8:	d117      	bne.n	52ea <__aeabi_fdiv+0xfa>
    52ba:	2304      	movs	r3, #4
    52bc:	4699      	mov	r9, r3
    52be:	2300      	movs	r3, #0
    52c0:	4698      	mov	r8, r3
    52c2:	3301      	adds	r3, #1
    52c4:	469b      	mov	fp, r3
    52c6:	e7af      	b.n	5228 <__aeabi_fdiv+0x38>
    52c8:	20ff      	movs	r0, #255	; 0xff
    52ca:	2d00      	cmp	r5, #0
    52cc:	d10b      	bne.n	52e6 <__aeabi_fdiv+0xf6>
    52ce:	2102      	movs	r1, #2
    52d0:	e7da      	b.n	5288 <__aeabi_fdiv+0x98>
    52d2:	0028      	movs	r0, r5
    52d4:	f001 fedc 	bl	7090 <__clzsi2>
    52d8:	1f43      	subs	r3, r0, #5
    52da:	409d      	lsls	r5, r3
    52dc:	2376      	movs	r3, #118	; 0x76
    52de:	425b      	negs	r3, r3
    52e0:	1a18      	subs	r0, r3, r0
    52e2:	2100      	movs	r1, #0
    52e4:	e7af      	b.n	5246 <__aeabi_fdiv+0x56>
    52e6:	2103      	movs	r1, #3
    52e8:	e7ad      	b.n	5246 <__aeabi_fdiv+0x56>
    52ea:	0020      	movs	r0, r4
    52ec:	f001 fed0 	bl	7090 <__clzsi2>
    52f0:	1f43      	subs	r3, r0, #5
    52f2:	409c      	lsls	r4, r3
    52f4:	2376      	movs	r3, #118	; 0x76
    52f6:	425b      	negs	r3, r3
    52f8:	1a1b      	subs	r3, r3, r0
    52fa:	4698      	mov	r8, r3
    52fc:	2300      	movs	r3, #0
    52fe:	4699      	mov	r9, r3
    5300:	469b      	mov	fp, r3
    5302:	e791      	b.n	5228 <__aeabi_fdiv+0x38>
    5304:	230c      	movs	r3, #12
    5306:	4699      	mov	r9, r3
    5308:	33f3      	adds	r3, #243	; 0xf3
    530a:	4698      	mov	r8, r3
    530c:	3bfc      	subs	r3, #252	; 0xfc
    530e:	469b      	mov	fp, r3
    5310:	e78a      	b.n	5228 <__aeabi_fdiv+0x38>
    5312:	2b03      	cmp	r3, #3
    5314:	d100      	bne.n	5318 <__aeabi_fdiv+0x128>
    5316:	e0a5      	b.n	5464 <__aeabi_fdiv+0x274>
    5318:	4655      	mov	r5, sl
    531a:	2b01      	cmp	r3, #1
    531c:	d000      	beq.n	5320 <__aeabi_fdiv+0x130>
    531e:	e081      	b.n	5424 <__aeabi_fdiv+0x234>
    5320:	2301      	movs	r3, #1
    5322:	2100      	movs	r1, #0
    5324:	2400      	movs	r4, #0
    5326:	402b      	ands	r3, r5
    5328:	0264      	lsls	r4, r4, #9
    532a:	05c9      	lsls	r1, r1, #23
    532c:	0a60      	lsrs	r0, r4, #9
    532e:	07db      	lsls	r3, r3, #31
    5330:	4308      	orrs	r0, r1
    5332:	4318      	orrs	r0, r3
    5334:	b003      	add	sp, #12
    5336:	bc3c      	pop	{r2, r3, r4, r5}
    5338:	4690      	mov	r8, r2
    533a:	4699      	mov	r9, r3
    533c:	46a2      	mov	sl, r4
    533e:	46ab      	mov	fp, r5
    5340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5342:	2480      	movs	r4, #128	; 0x80
    5344:	2300      	movs	r3, #0
    5346:	03e4      	lsls	r4, r4, #15
    5348:	21ff      	movs	r1, #255	; 0xff
    534a:	e7ed      	b.n	5328 <__aeabi_fdiv+0x138>
    534c:	21ff      	movs	r1, #255	; 0xff
    534e:	2400      	movs	r4, #0
    5350:	e7ea      	b.n	5328 <__aeabi_fdiv+0x138>
    5352:	2301      	movs	r3, #1
    5354:	1a59      	subs	r1, r3, r1
    5356:	291b      	cmp	r1, #27
    5358:	dd66      	ble.n	5428 <__aeabi_fdiv+0x238>
    535a:	9a01      	ldr	r2, [sp, #4]
    535c:	4013      	ands	r3, r2
    535e:	2100      	movs	r1, #0
    5360:	2400      	movs	r4, #0
    5362:	e7e1      	b.n	5328 <__aeabi_fdiv+0x138>
    5364:	2380      	movs	r3, #128	; 0x80
    5366:	03db      	lsls	r3, r3, #15
    5368:	421c      	tst	r4, r3
    536a:	d038      	beq.n	53de <__aeabi_fdiv+0x1ee>
    536c:	421d      	tst	r5, r3
    536e:	d051      	beq.n	5414 <__aeabi_fdiv+0x224>
    5370:	431c      	orrs	r4, r3
    5372:	0264      	lsls	r4, r4, #9
    5374:	0a64      	lsrs	r4, r4, #9
    5376:	0033      	movs	r3, r6
    5378:	21ff      	movs	r1, #255	; 0xff
    537a:	e7d5      	b.n	5328 <__aeabi_fdiv+0x138>
    537c:	0163      	lsls	r3, r4, #5
    537e:	016c      	lsls	r4, r5, #5
    5380:	42a3      	cmp	r3, r4
    5382:	d23b      	bcs.n	53fc <__aeabi_fdiv+0x20c>
    5384:	261b      	movs	r6, #27
    5386:	2100      	movs	r1, #0
    5388:	3801      	subs	r0, #1
    538a:	2501      	movs	r5, #1
    538c:	001f      	movs	r7, r3
    538e:	0049      	lsls	r1, r1, #1
    5390:	005b      	lsls	r3, r3, #1
    5392:	2f00      	cmp	r7, #0
    5394:	db01      	blt.n	539a <__aeabi_fdiv+0x1aa>
    5396:	429c      	cmp	r4, r3
    5398:	d801      	bhi.n	539e <__aeabi_fdiv+0x1ae>
    539a:	1b1b      	subs	r3, r3, r4
    539c:	4329      	orrs	r1, r5
    539e:	3e01      	subs	r6, #1
    53a0:	2e00      	cmp	r6, #0
    53a2:	d1f3      	bne.n	538c <__aeabi_fdiv+0x19c>
    53a4:	001c      	movs	r4, r3
    53a6:	1e63      	subs	r3, r4, #1
    53a8:	419c      	sbcs	r4, r3
    53aa:	430c      	orrs	r4, r1
    53ac:	0001      	movs	r1, r0
    53ae:	317f      	adds	r1, #127	; 0x7f
    53b0:	2900      	cmp	r1, #0
    53b2:	ddce      	ble.n	5352 <__aeabi_fdiv+0x162>
    53b4:	0763      	lsls	r3, r4, #29
    53b6:	d004      	beq.n	53c2 <__aeabi_fdiv+0x1d2>
    53b8:	230f      	movs	r3, #15
    53ba:	4023      	ands	r3, r4
    53bc:	2b04      	cmp	r3, #4
    53be:	d000      	beq.n	53c2 <__aeabi_fdiv+0x1d2>
    53c0:	3404      	adds	r4, #4
    53c2:	0123      	lsls	r3, r4, #4
    53c4:	d503      	bpl.n	53ce <__aeabi_fdiv+0x1de>
    53c6:	0001      	movs	r1, r0
    53c8:	4b2c      	ldr	r3, [pc, #176]	; (547c <__aeabi_fdiv+0x28c>)
    53ca:	3180      	adds	r1, #128	; 0x80
    53cc:	401c      	ands	r4, r3
    53ce:	29fe      	cmp	r1, #254	; 0xfe
    53d0:	dd0d      	ble.n	53ee <__aeabi_fdiv+0x1fe>
    53d2:	2301      	movs	r3, #1
    53d4:	9a01      	ldr	r2, [sp, #4]
    53d6:	21ff      	movs	r1, #255	; 0xff
    53d8:	4013      	ands	r3, r2
    53da:	2400      	movs	r4, #0
    53dc:	e7a4      	b.n	5328 <__aeabi_fdiv+0x138>
    53de:	2380      	movs	r3, #128	; 0x80
    53e0:	03db      	lsls	r3, r3, #15
    53e2:	431c      	orrs	r4, r3
    53e4:	0264      	lsls	r4, r4, #9
    53e6:	0a64      	lsrs	r4, r4, #9
    53e8:	0033      	movs	r3, r6
    53ea:	21ff      	movs	r1, #255	; 0xff
    53ec:	e79c      	b.n	5328 <__aeabi_fdiv+0x138>
    53ee:	2301      	movs	r3, #1
    53f0:	9a01      	ldr	r2, [sp, #4]
    53f2:	01a4      	lsls	r4, r4, #6
    53f4:	0a64      	lsrs	r4, r4, #9
    53f6:	b2c9      	uxtb	r1, r1
    53f8:	4013      	ands	r3, r2
    53fa:	e795      	b.n	5328 <__aeabi_fdiv+0x138>
    53fc:	1b1b      	subs	r3, r3, r4
    53fe:	261a      	movs	r6, #26
    5400:	2101      	movs	r1, #1
    5402:	e7c2      	b.n	538a <__aeabi_fdiv+0x19a>
    5404:	9b00      	ldr	r3, [sp, #0]
    5406:	468b      	mov	fp, r1
    5408:	469a      	mov	sl, r3
    540a:	2400      	movs	r4, #0
    540c:	e74c      	b.n	52a8 <__aeabi_fdiv+0xb8>
    540e:	0263      	lsls	r3, r4, #9
    5410:	d5e5      	bpl.n	53de <__aeabi_fdiv+0x1ee>
    5412:	2500      	movs	r5, #0
    5414:	2480      	movs	r4, #128	; 0x80
    5416:	03e4      	lsls	r4, r4, #15
    5418:	432c      	orrs	r4, r5
    541a:	0264      	lsls	r4, r4, #9
    541c:	0a64      	lsrs	r4, r4, #9
    541e:	9b00      	ldr	r3, [sp, #0]
    5420:	21ff      	movs	r1, #255	; 0xff
    5422:	e781      	b.n	5328 <__aeabi_fdiv+0x138>
    5424:	9501      	str	r5, [sp, #4]
    5426:	e7c1      	b.n	53ac <__aeabi_fdiv+0x1bc>
    5428:	0023      	movs	r3, r4
    542a:	2020      	movs	r0, #32
    542c:	40cb      	lsrs	r3, r1
    542e:	1a41      	subs	r1, r0, r1
    5430:	408c      	lsls	r4, r1
    5432:	1e61      	subs	r1, r4, #1
    5434:	418c      	sbcs	r4, r1
    5436:	431c      	orrs	r4, r3
    5438:	0763      	lsls	r3, r4, #29
    543a:	d004      	beq.n	5446 <__aeabi_fdiv+0x256>
    543c:	230f      	movs	r3, #15
    543e:	4023      	ands	r3, r4
    5440:	2b04      	cmp	r3, #4
    5442:	d000      	beq.n	5446 <__aeabi_fdiv+0x256>
    5444:	3404      	adds	r4, #4
    5446:	0163      	lsls	r3, r4, #5
    5448:	d505      	bpl.n	5456 <__aeabi_fdiv+0x266>
    544a:	2301      	movs	r3, #1
    544c:	9a01      	ldr	r2, [sp, #4]
    544e:	2101      	movs	r1, #1
    5450:	4013      	ands	r3, r2
    5452:	2400      	movs	r4, #0
    5454:	e768      	b.n	5328 <__aeabi_fdiv+0x138>
    5456:	2301      	movs	r3, #1
    5458:	9a01      	ldr	r2, [sp, #4]
    545a:	01a4      	lsls	r4, r4, #6
    545c:	0a64      	lsrs	r4, r4, #9
    545e:	4013      	ands	r3, r2
    5460:	2100      	movs	r1, #0
    5462:	e761      	b.n	5328 <__aeabi_fdiv+0x138>
    5464:	2380      	movs	r3, #128	; 0x80
    5466:	03db      	lsls	r3, r3, #15
    5468:	431c      	orrs	r4, r3
    546a:	0264      	lsls	r4, r4, #9
    546c:	0a64      	lsrs	r4, r4, #9
    546e:	4653      	mov	r3, sl
    5470:	21ff      	movs	r1, #255	; 0xff
    5472:	e759      	b.n	5328 <__aeabi_fdiv+0x138>
    5474:	00007728 	.word	0x00007728
    5478:	00007768 	.word	0x00007768
    547c:	f7ffffff 	.word	0xf7ffffff

00005480 <__aeabi_i2f>:
    5480:	b570      	push	{r4, r5, r6, lr}
    5482:	2800      	cmp	r0, #0
    5484:	d030      	beq.n	54e8 <__aeabi_i2f+0x68>
    5486:	17c3      	asrs	r3, r0, #31
    5488:	18c4      	adds	r4, r0, r3
    548a:	405c      	eors	r4, r3
    548c:	0fc5      	lsrs	r5, r0, #31
    548e:	0020      	movs	r0, r4
    5490:	f001 fdfe 	bl	7090 <__clzsi2>
    5494:	239e      	movs	r3, #158	; 0x9e
    5496:	1a1b      	subs	r3, r3, r0
    5498:	2b96      	cmp	r3, #150	; 0x96
    549a:	dc0d      	bgt.n	54b8 <__aeabi_i2f+0x38>
    549c:	2296      	movs	r2, #150	; 0x96
    549e:	1ad2      	subs	r2, r2, r3
    54a0:	4094      	lsls	r4, r2
    54a2:	002a      	movs	r2, r5
    54a4:	0264      	lsls	r4, r4, #9
    54a6:	0a64      	lsrs	r4, r4, #9
    54a8:	b2db      	uxtb	r3, r3
    54aa:	0264      	lsls	r4, r4, #9
    54ac:	05db      	lsls	r3, r3, #23
    54ae:	0a60      	lsrs	r0, r4, #9
    54b0:	07d2      	lsls	r2, r2, #31
    54b2:	4318      	orrs	r0, r3
    54b4:	4310      	orrs	r0, r2
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	2b99      	cmp	r3, #153	; 0x99
    54ba:	dc19      	bgt.n	54f0 <__aeabi_i2f+0x70>
    54bc:	2299      	movs	r2, #153	; 0x99
    54be:	1ad2      	subs	r2, r2, r3
    54c0:	2a00      	cmp	r2, #0
    54c2:	dd29      	ble.n	5518 <__aeabi_i2f+0x98>
    54c4:	4094      	lsls	r4, r2
    54c6:	0022      	movs	r2, r4
    54c8:	4c14      	ldr	r4, [pc, #80]	; (551c <__aeabi_i2f+0x9c>)
    54ca:	4014      	ands	r4, r2
    54cc:	0751      	lsls	r1, r2, #29
    54ce:	d004      	beq.n	54da <__aeabi_i2f+0x5a>
    54d0:	210f      	movs	r1, #15
    54d2:	400a      	ands	r2, r1
    54d4:	2a04      	cmp	r2, #4
    54d6:	d000      	beq.n	54da <__aeabi_i2f+0x5a>
    54d8:	3404      	adds	r4, #4
    54da:	0162      	lsls	r2, r4, #5
    54dc:	d413      	bmi.n	5506 <__aeabi_i2f+0x86>
    54de:	01a4      	lsls	r4, r4, #6
    54e0:	0a64      	lsrs	r4, r4, #9
    54e2:	b2db      	uxtb	r3, r3
    54e4:	002a      	movs	r2, r5
    54e6:	e7e0      	b.n	54aa <__aeabi_i2f+0x2a>
    54e8:	2200      	movs	r2, #0
    54ea:	2300      	movs	r3, #0
    54ec:	2400      	movs	r4, #0
    54ee:	e7dc      	b.n	54aa <__aeabi_i2f+0x2a>
    54f0:	2205      	movs	r2, #5
    54f2:	0021      	movs	r1, r4
    54f4:	1a12      	subs	r2, r2, r0
    54f6:	40d1      	lsrs	r1, r2
    54f8:	22b9      	movs	r2, #185	; 0xb9
    54fa:	1ad2      	subs	r2, r2, r3
    54fc:	4094      	lsls	r4, r2
    54fe:	1e62      	subs	r2, r4, #1
    5500:	4194      	sbcs	r4, r2
    5502:	430c      	orrs	r4, r1
    5504:	e7da      	b.n	54bc <__aeabi_i2f+0x3c>
    5506:	4b05      	ldr	r3, [pc, #20]	; (551c <__aeabi_i2f+0x9c>)
    5508:	002a      	movs	r2, r5
    550a:	401c      	ands	r4, r3
    550c:	239f      	movs	r3, #159	; 0x9f
    550e:	01a4      	lsls	r4, r4, #6
    5510:	1a1b      	subs	r3, r3, r0
    5512:	0a64      	lsrs	r4, r4, #9
    5514:	b2db      	uxtb	r3, r3
    5516:	e7c8      	b.n	54aa <__aeabi_i2f+0x2a>
    5518:	0022      	movs	r2, r4
    551a:	e7d5      	b.n	54c8 <__aeabi_i2f+0x48>
    551c:	fbffffff 	.word	0xfbffffff

00005520 <__aeabi_dadd>:
    5520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5522:	4645      	mov	r5, r8
    5524:	46de      	mov	lr, fp
    5526:	4657      	mov	r7, sl
    5528:	464e      	mov	r6, r9
    552a:	030c      	lsls	r4, r1, #12
    552c:	b5e0      	push	{r5, r6, r7, lr}
    552e:	004e      	lsls	r6, r1, #1
    5530:	0fc9      	lsrs	r1, r1, #31
    5532:	4688      	mov	r8, r1
    5534:	000d      	movs	r5, r1
    5536:	0a61      	lsrs	r1, r4, #9
    5538:	0f44      	lsrs	r4, r0, #29
    553a:	430c      	orrs	r4, r1
    553c:	00c7      	lsls	r7, r0, #3
    553e:	0319      	lsls	r1, r3, #12
    5540:	0058      	lsls	r0, r3, #1
    5542:	0fdb      	lsrs	r3, r3, #31
    5544:	469b      	mov	fp, r3
    5546:	0a4b      	lsrs	r3, r1, #9
    5548:	0f51      	lsrs	r1, r2, #29
    554a:	430b      	orrs	r3, r1
    554c:	0d76      	lsrs	r6, r6, #21
    554e:	0d40      	lsrs	r0, r0, #21
    5550:	0019      	movs	r1, r3
    5552:	00d2      	lsls	r2, r2, #3
    5554:	45d8      	cmp	r8, fp
    5556:	d100      	bne.n	555a <__aeabi_dadd+0x3a>
    5558:	e0ae      	b.n	56b8 <__aeabi_dadd+0x198>
    555a:	1a35      	subs	r5, r6, r0
    555c:	2d00      	cmp	r5, #0
    555e:	dc00      	bgt.n	5562 <__aeabi_dadd+0x42>
    5560:	e0f6      	b.n	5750 <__aeabi_dadd+0x230>
    5562:	2800      	cmp	r0, #0
    5564:	d10f      	bne.n	5586 <__aeabi_dadd+0x66>
    5566:	4313      	orrs	r3, r2
    5568:	d100      	bne.n	556c <__aeabi_dadd+0x4c>
    556a:	e0db      	b.n	5724 <__aeabi_dadd+0x204>
    556c:	1e6b      	subs	r3, r5, #1
    556e:	2b00      	cmp	r3, #0
    5570:	d000      	beq.n	5574 <__aeabi_dadd+0x54>
    5572:	e137      	b.n	57e4 <__aeabi_dadd+0x2c4>
    5574:	1aba      	subs	r2, r7, r2
    5576:	4297      	cmp	r7, r2
    5578:	41bf      	sbcs	r7, r7
    557a:	1a64      	subs	r4, r4, r1
    557c:	427f      	negs	r7, r7
    557e:	1be4      	subs	r4, r4, r7
    5580:	2601      	movs	r6, #1
    5582:	0017      	movs	r7, r2
    5584:	e024      	b.n	55d0 <__aeabi_dadd+0xb0>
    5586:	4bc6      	ldr	r3, [pc, #792]	; (58a0 <__aeabi_dadd+0x380>)
    5588:	429e      	cmp	r6, r3
    558a:	d04d      	beq.n	5628 <__aeabi_dadd+0x108>
    558c:	2380      	movs	r3, #128	; 0x80
    558e:	041b      	lsls	r3, r3, #16
    5590:	4319      	orrs	r1, r3
    5592:	2d38      	cmp	r5, #56	; 0x38
    5594:	dd00      	ble.n	5598 <__aeabi_dadd+0x78>
    5596:	e107      	b.n	57a8 <__aeabi_dadd+0x288>
    5598:	2d1f      	cmp	r5, #31
    559a:	dd00      	ble.n	559e <__aeabi_dadd+0x7e>
    559c:	e138      	b.n	5810 <__aeabi_dadd+0x2f0>
    559e:	2020      	movs	r0, #32
    55a0:	1b43      	subs	r3, r0, r5
    55a2:	469a      	mov	sl, r3
    55a4:	000b      	movs	r3, r1
    55a6:	4650      	mov	r0, sl
    55a8:	4083      	lsls	r3, r0
    55aa:	4699      	mov	r9, r3
    55ac:	0013      	movs	r3, r2
    55ae:	4648      	mov	r0, r9
    55b0:	40eb      	lsrs	r3, r5
    55b2:	4318      	orrs	r0, r3
    55b4:	0003      	movs	r3, r0
    55b6:	4650      	mov	r0, sl
    55b8:	4082      	lsls	r2, r0
    55ba:	1e50      	subs	r0, r2, #1
    55bc:	4182      	sbcs	r2, r0
    55be:	40e9      	lsrs	r1, r5
    55c0:	431a      	orrs	r2, r3
    55c2:	1aba      	subs	r2, r7, r2
    55c4:	1a61      	subs	r1, r4, r1
    55c6:	4297      	cmp	r7, r2
    55c8:	41a4      	sbcs	r4, r4
    55ca:	0017      	movs	r7, r2
    55cc:	4264      	negs	r4, r4
    55ce:	1b0c      	subs	r4, r1, r4
    55d0:	0223      	lsls	r3, r4, #8
    55d2:	d562      	bpl.n	569a <__aeabi_dadd+0x17a>
    55d4:	0264      	lsls	r4, r4, #9
    55d6:	0a65      	lsrs	r5, r4, #9
    55d8:	2d00      	cmp	r5, #0
    55da:	d100      	bne.n	55de <__aeabi_dadd+0xbe>
    55dc:	e0df      	b.n	579e <__aeabi_dadd+0x27e>
    55de:	0028      	movs	r0, r5
    55e0:	f001 fd56 	bl	7090 <__clzsi2>
    55e4:	0003      	movs	r3, r0
    55e6:	3b08      	subs	r3, #8
    55e8:	2b1f      	cmp	r3, #31
    55ea:	dd00      	ble.n	55ee <__aeabi_dadd+0xce>
    55ec:	e0d2      	b.n	5794 <__aeabi_dadd+0x274>
    55ee:	2220      	movs	r2, #32
    55f0:	003c      	movs	r4, r7
    55f2:	1ad2      	subs	r2, r2, r3
    55f4:	409d      	lsls	r5, r3
    55f6:	40d4      	lsrs	r4, r2
    55f8:	409f      	lsls	r7, r3
    55fa:	4325      	orrs	r5, r4
    55fc:	429e      	cmp	r6, r3
    55fe:	dd00      	ble.n	5602 <__aeabi_dadd+0xe2>
    5600:	e0c4      	b.n	578c <__aeabi_dadd+0x26c>
    5602:	1b9e      	subs	r6, r3, r6
    5604:	1c73      	adds	r3, r6, #1
    5606:	2b1f      	cmp	r3, #31
    5608:	dd00      	ble.n	560c <__aeabi_dadd+0xec>
    560a:	e0f1      	b.n	57f0 <__aeabi_dadd+0x2d0>
    560c:	2220      	movs	r2, #32
    560e:	0038      	movs	r0, r7
    5610:	0029      	movs	r1, r5
    5612:	1ad2      	subs	r2, r2, r3
    5614:	40d8      	lsrs	r0, r3
    5616:	4091      	lsls	r1, r2
    5618:	4097      	lsls	r7, r2
    561a:	002c      	movs	r4, r5
    561c:	4301      	orrs	r1, r0
    561e:	1e78      	subs	r0, r7, #1
    5620:	4187      	sbcs	r7, r0
    5622:	40dc      	lsrs	r4, r3
    5624:	2600      	movs	r6, #0
    5626:	430f      	orrs	r7, r1
    5628:	077b      	lsls	r3, r7, #29
    562a:	d009      	beq.n	5640 <__aeabi_dadd+0x120>
    562c:	230f      	movs	r3, #15
    562e:	403b      	ands	r3, r7
    5630:	2b04      	cmp	r3, #4
    5632:	d005      	beq.n	5640 <__aeabi_dadd+0x120>
    5634:	1d3b      	adds	r3, r7, #4
    5636:	42bb      	cmp	r3, r7
    5638:	41bf      	sbcs	r7, r7
    563a:	427f      	negs	r7, r7
    563c:	19e4      	adds	r4, r4, r7
    563e:	001f      	movs	r7, r3
    5640:	0223      	lsls	r3, r4, #8
    5642:	d52c      	bpl.n	569e <__aeabi_dadd+0x17e>
    5644:	4b96      	ldr	r3, [pc, #600]	; (58a0 <__aeabi_dadd+0x380>)
    5646:	3601      	adds	r6, #1
    5648:	429e      	cmp	r6, r3
    564a:	d100      	bne.n	564e <__aeabi_dadd+0x12e>
    564c:	e09a      	b.n	5784 <__aeabi_dadd+0x264>
    564e:	4645      	mov	r5, r8
    5650:	4b94      	ldr	r3, [pc, #592]	; (58a4 <__aeabi_dadd+0x384>)
    5652:	08ff      	lsrs	r7, r7, #3
    5654:	401c      	ands	r4, r3
    5656:	0760      	lsls	r0, r4, #29
    5658:	0576      	lsls	r6, r6, #21
    565a:	0264      	lsls	r4, r4, #9
    565c:	4307      	orrs	r7, r0
    565e:	0b24      	lsrs	r4, r4, #12
    5660:	0d76      	lsrs	r6, r6, #21
    5662:	2100      	movs	r1, #0
    5664:	0324      	lsls	r4, r4, #12
    5666:	0b23      	lsrs	r3, r4, #12
    5668:	0d0c      	lsrs	r4, r1, #20
    566a:	4a8f      	ldr	r2, [pc, #572]	; (58a8 <__aeabi_dadd+0x388>)
    566c:	0524      	lsls	r4, r4, #20
    566e:	431c      	orrs	r4, r3
    5670:	4014      	ands	r4, r2
    5672:	0533      	lsls	r3, r6, #20
    5674:	4323      	orrs	r3, r4
    5676:	005b      	lsls	r3, r3, #1
    5678:	07ed      	lsls	r5, r5, #31
    567a:	085b      	lsrs	r3, r3, #1
    567c:	432b      	orrs	r3, r5
    567e:	0038      	movs	r0, r7
    5680:	0019      	movs	r1, r3
    5682:	bc3c      	pop	{r2, r3, r4, r5}
    5684:	4690      	mov	r8, r2
    5686:	4699      	mov	r9, r3
    5688:	46a2      	mov	sl, r4
    568a:	46ab      	mov	fp, r5
    568c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    568e:	4664      	mov	r4, ip
    5690:	4304      	orrs	r4, r0
    5692:	d100      	bne.n	5696 <__aeabi_dadd+0x176>
    5694:	e211      	b.n	5aba <__aeabi_dadd+0x59a>
    5696:	0004      	movs	r4, r0
    5698:	4667      	mov	r7, ip
    569a:	077b      	lsls	r3, r7, #29
    569c:	d1c6      	bne.n	562c <__aeabi_dadd+0x10c>
    569e:	4645      	mov	r5, r8
    56a0:	0760      	lsls	r0, r4, #29
    56a2:	08ff      	lsrs	r7, r7, #3
    56a4:	4307      	orrs	r7, r0
    56a6:	08e4      	lsrs	r4, r4, #3
    56a8:	4b7d      	ldr	r3, [pc, #500]	; (58a0 <__aeabi_dadd+0x380>)
    56aa:	429e      	cmp	r6, r3
    56ac:	d030      	beq.n	5710 <__aeabi_dadd+0x1f0>
    56ae:	0324      	lsls	r4, r4, #12
    56b0:	0576      	lsls	r6, r6, #21
    56b2:	0b24      	lsrs	r4, r4, #12
    56b4:	0d76      	lsrs	r6, r6, #21
    56b6:	e7d4      	b.n	5662 <__aeabi_dadd+0x142>
    56b8:	1a33      	subs	r3, r6, r0
    56ba:	469a      	mov	sl, r3
    56bc:	2b00      	cmp	r3, #0
    56be:	dd78      	ble.n	57b2 <__aeabi_dadd+0x292>
    56c0:	2800      	cmp	r0, #0
    56c2:	d031      	beq.n	5728 <__aeabi_dadd+0x208>
    56c4:	4876      	ldr	r0, [pc, #472]	; (58a0 <__aeabi_dadd+0x380>)
    56c6:	4286      	cmp	r6, r0
    56c8:	d0ae      	beq.n	5628 <__aeabi_dadd+0x108>
    56ca:	2080      	movs	r0, #128	; 0x80
    56cc:	0400      	lsls	r0, r0, #16
    56ce:	4301      	orrs	r1, r0
    56d0:	4653      	mov	r3, sl
    56d2:	2b38      	cmp	r3, #56	; 0x38
    56d4:	dc00      	bgt.n	56d8 <__aeabi_dadd+0x1b8>
    56d6:	e0e9      	b.n	58ac <__aeabi_dadd+0x38c>
    56d8:	430a      	orrs	r2, r1
    56da:	1e51      	subs	r1, r2, #1
    56dc:	418a      	sbcs	r2, r1
    56de:	2100      	movs	r1, #0
    56e0:	19d2      	adds	r2, r2, r7
    56e2:	42ba      	cmp	r2, r7
    56e4:	41bf      	sbcs	r7, r7
    56e6:	1909      	adds	r1, r1, r4
    56e8:	427c      	negs	r4, r7
    56ea:	0017      	movs	r7, r2
    56ec:	190c      	adds	r4, r1, r4
    56ee:	0223      	lsls	r3, r4, #8
    56f0:	d5d3      	bpl.n	569a <__aeabi_dadd+0x17a>
    56f2:	4b6b      	ldr	r3, [pc, #428]	; (58a0 <__aeabi_dadd+0x380>)
    56f4:	3601      	adds	r6, #1
    56f6:	429e      	cmp	r6, r3
    56f8:	d100      	bne.n	56fc <__aeabi_dadd+0x1dc>
    56fa:	e13a      	b.n	5972 <__aeabi_dadd+0x452>
    56fc:	2001      	movs	r0, #1
    56fe:	4b69      	ldr	r3, [pc, #420]	; (58a4 <__aeabi_dadd+0x384>)
    5700:	401c      	ands	r4, r3
    5702:	087b      	lsrs	r3, r7, #1
    5704:	4007      	ands	r7, r0
    5706:	431f      	orrs	r7, r3
    5708:	07e0      	lsls	r0, r4, #31
    570a:	4307      	orrs	r7, r0
    570c:	0864      	lsrs	r4, r4, #1
    570e:	e78b      	b.n	5628 <__aeabi_dadd+0x108>
    5710:	0023      	movs	r3, r4
    5712:	433b      	orrs	r3, r7
    5714:	d100      	bne.n	5718 <__aeabi_dadd+0x1f8>
    5716:	e1cb      	b.n	5ab0 <__aeabi_dadd+0x590>
    5718:	2280      	movs	r2, #128	; 0x80
    571a:	0312      	lsls	r2, r2, #12
    571c:	4314      	orrs	r4, r2
    571e:	0324      	lsls	r4, r4, #12
    5720:	0b24      	lsrs	r4, r4, #12
    5722:	e79e      	b.n	5662 <__aeabi_dadd+0x142>
    5724:	002e      	movs	r6, r5
    5726:	e77f      	b.n	5628 <__aeabi_dadd+0x108>
    5728:	0008      	movs	r0, r1
    572a:	4310      	orrs	r0, r2
    572c:	d100      	bne.n	5730 <__aeabi_dadd+0x210>
    572e:	e0b4      	b.n	589a <__aeabi_dadd+0x37a>
    5730:	1e58      	subs	r0, r3, #1
    5732:	2800      	cmp	r0, #0
    5734:	d000      	beq.n	5738 <__aeabi_dadd+0x218>
    5736:	e0de      	b.n	58f6 <__aeabi_dadd+0x3d6>
    5738:	18ba      	adds	r2, r7, r2
    573a:	42ba      	cmp	r2, r7
    573c:	419b      	sbcs	r3, r3
    573e:	1864      	adds	r4, r4, r1
    5740:	425b      	negs	r3, r3
    5742:	18e4      	adds	r4, r4, r3
    5744:	0017      	movs	r7, r2
    5746:	2601      	movs	r6, #1
    5748:	0223      	lsls	r3, r4, #8
    574a:	d5a6      	bpl.n	569a <__aeabi_dadd+0x17a>
    574c:	2602      	movs	r6, #2
    574e:	e7d5      	b.n	56fc <__aeabi_dadd+0x1dc>
    5750:	2d00      	cmp	r5, #0
    5752:	d16e      	bne.n	5832 <__aeabi_dadd+0x312>
    5754:	1c70      	adds	r0, r6, #1
    5756:	0540      	lsls	r0, r0, #21
    5758:	0d40      	lsrs	r0, r0, #21
    575a:	2801      	cmp	r0, #1
    575c:	dc00      	bgt.n	5760 <__aeabi_dadd+0x240>
    575e:	e0f9      	b.n	5954 <__aeabi_dadd+0x434>
    5760:	1ab8      	subs	r0, r7, r2
    5762:	4684      	mov	ip, r0
    5764:	4287      	cmp	r7, r0
    5766:	4180      	sbcs	r0, r0
    5768:	1ae5      	subs	r5, r4, r3
    576a:	4240      	negs	r0, r0
    576c:	1a2d      	subs	r5, r5, r0
    576e:	0228      	lsls	r0, r5, #8
    5770:	d400      	bmi.n	5774 <__aeabi_dadd+0x254>
    5772:	e089      	b.n	5888 <__aeabi_dadd+0x368>
    5774:	1bd7      	subs	r7, r2, r7
    5776:	42ba      	cmp	r2, r7
    5778:	4192      	sbcs	r2, r2
    577a:	1b1c      	subs	r4, r3, r4
    577c:	4252      	negs	r2, r2
    577e:	1aa5      	subs	r5, r4, r2
    5780:	46d8      	mov	r8, fp
    5782:	e729      	b.n	55d8 <__aeabi_dadd+0xb8>
    5784:	4645      	mov	r5, r8
    5786:	2400      	movs	r4, #0
    5788:	2700      	movs	r7, #0
    578a:	e76a      	b.n	5662 <__aeabi_dadd+0x142>
    578c:	4c45      	ldr	r4, [pc, #276]	; (58a4 <__aeabi_dadd+0x384>)
    578e:	1af6      	subs	r6, r6, r3
    5790:	402c      	ands	r4, r5
    5792:	e749      	b.n	5628 <__aeabi_dadd+0x108>
    5794:	003d      	movs	r5, r7
    5796:	3828      	subs	r0, #40	; 0x28
    5798:	4085      	lsls	r5, r0
    579a:	2700      	movs	r7, #0
    579c:	e72e      	b.n	55fc <__aeabi_dadd+0xdc>
    579e:	0038      	movs	r0, r7
    57a0:	f001 fc76 	bl	7090 <__clzsi2>
    57a4:	3020      	adds	r0, #32
    57a6:	e71d      	b.n	55e4 <__aeabi_dadd+0xc4>
    57a8:	430a      	orrs	r2, r1
    57aa:	1e51      	subs	r1, r2, #1
    57ac:	418a      	sbcs	r2, r1
    57ae:	2100      	movs	r1, #0
    57b0:	e707      	b.n	55c2 <__aeabi_dadd+0xa2>
    57b2:	2b00      	cmp	r3, #0
    57b4:	d000      	beq.n	57b8 <__aeabi_dadd+0x298>
    57b6:	e0f3      	b.n	59a0 <__aeabi_dadd+0x480>
    57b8:	1c70      	adds	r0, r6, #1
    57ba:	0543      	lsls	r3, r0, #21
    57bc:	0d5b      	lsrs	r3, r3, #21
    57be:	2b01      	cmp	r3, #1
    57c0:	dc00      	bgt.n	57c4 <__aeabi_dadd+0x2a4>
    57c2:	e0ad      	b.n	5920 <__aeabi_dadd+0x400>
    57c4:	4b36      	ldr	r3, [pc, #216]	; (58a0 <__aeabi_dadd+0x380>)
    57c6:	4298      	cmp	r0, r3
    57c8:	d100      	bne.n	57cc <__aeabi_dadd+0x2ac>
    57ca:	e0d1      	b.n	5970 <__aeabi_dadd+0x450>
    57cc:	18ba      	adds	r2, r7, r2
    57ce:	42ba      	cmp	r2, r7
    57d0:	41bf      	sbcs	r7, r7
    57d2:	1864      	adds	r4, r4, r1
    57d4:	427f      	negs	r7, r7
    57d6:	19e4      	adds	r4, r4, r7
    57d8:	07e7      	lsls	r7, r4, #31
    57da:	0852      	lsrs	r2, r2, #1
    57dc:	4317      	orrs	r7, r2
    57de:	0864      	lsrs	r4, r4, #1
    57e0:	0006      	movs	r6, r0
    57e2:	e721      	b.n	5628 <__aeabi_dadd+0x108>
    57e4:	482e      	ldr	r0, [pc, #184]	; (58a0 <__aeabi_dadd+0x380>)
    57e6:	4285      	cmp	r5, r0
    57e8:	d100      	bne.n	57ec <__aeabi_dadd+0x2cc>
    57ea:	e093      	b.n	5914 <__aeabi_dadd+0x3f4>
    57ec:	001d      	movs	r5, r3
    57ee:	e6d0      	b.n	5592 <__aeabi_dadd+0x72>
    57f0:	0029      	movs	r1, r5
    57f2:	3e1f      	subs	r6, #31
    57f4:	40f1      	lsrs	r1, r6
    57f6:	2b20      	cmp	r3, #32
    57f8:	d100      	bne.n	57fc <__aeabi_dadd+0x2dc>
    57fa:	e08d      	b.n	5918 <__aeabi_dadd+0x3f8>
    57fc:	2240      	movs	r2, #64	; 0x40
    57fe:	1ad3      	subs	r3, r2, r3
    5800:	409d      	lsls	r5, r3
    5802:	432f      	orrs	r7, r5
    5804:	1e7d      	subs	r5, r7, #1
    5806:	41af      	sbcs	r7, r5
    5808:	2400      	movs	r4, #0
    580a:	430f      	orrs	r7, r1
    580c:	2600      	movs	r6, #0
    580e:	e744      	b.n	569a <__aeabi_dadd+0x17a>
    5810:	002b      	movs	r3, r5
    5812:	0008      	movs	r0, r1
    5814:	3b20      	subs	r3, #32
    5816:	40d8      	lsrs	r0, r3
    5818:	0003      	movs	r3, r0
    581a:	2d20      	cmp	r5, #32
    581c:	d100      	bne.n	5820 <__aeabi_dadd+0x300>
    581e:	e07d      	b.n	591c <__aeabi_dadd+0x3fc>
    5820:	2040      	movs	r0, #64	; 0x40
    5822:	1b45      	subs	r5, r0, r5
    5824:	40a9      	lsls	r1, r5
    5826:	430a      	orrs	r2, r1
    5828:	1e51      	subs	r1, r2, #1
    582a:	418a      	sbcs	r2, r1
    582c:	2100      	movs	r1, #0
    582e:	431a      	orrs	r2, r3
    5830:	e6c7      	b.n	55c2 <__aeabi_dadd+0xa2>
    5832:	2e00      	cmp	r6, #0
    5834:	d050      	beq.n	58d8 <__aeabi_dadd+0x3b8>
    5836:	4e1a      	ldr	r6, [pc, #104]	; (58a0 <__aeabi_dadd+0x380>)
    5838:	42b0      	cmp	r0, r6
    583a:	d057      	beq.n	58ec <__aeabi_dadd+0x3cc>
    583c:	2680      	movs	r6, #128	; 0x80
    583e:	426b      	negs	r3, r5
    5840:	4699      	mov	r9, r3
    5842:	0436      	lsls	r6, r6, #16
    5844:	4334      	orrs	r4, r6
    5846:	464b      	mov	r3, r9
    5848:	2b38      	cmp	r3, #56	; 0x38
    584a:	dd00      	ble.n	584e <__aeabi_dadd+0x32e>
    584c:	e0d6      	b.n	59fc <__aeabi_dadd+0x4dc>
    584e:	2b1f      	cmp	r3, #31
    5850:	dd00      	ble.n	5854 <__aeabi_dadd+0x334>
    5852:	e135      	b.n	5ac0 <__aeabi_dadd+0x5a0>
    5854:	2620      	movs	r6, #32
    5856:	1af5      	subs	r5, r6, r3
    5858:	0026      	movs	r6, r4
    585a:	40ae      	lsls	r6, r5
    585c:	46b2      	mov	sl, r6
    585e:	003e      	movs	r6, r7
    5860:	40de      	lsrs	r6, r3
    5862:	46ac      	mov	ip, r5
    5864:	0035      	movs	r5, r6
    5866:	4656      	mov	r6, sl
    5868:	432e      	orrs	r6, r5
    586a:	4665      	mov	r5, ip
    586c:	40af      	lsls	r7, r5
    586e:	1e7d      	subs	r5, r7, #1
    5870:	41af      	sbcs	r7, r5
    5872:	40dc      	lsrs	r4, r3
    5874:	4337      	orrs	r7, r6
    5876:	1bd7      	subs	r7, r2, r7
    5878:	42ba      	cmp	r2, r7
    587a:	4192      	sbcs	r2, r2
    587c:	1b0c      	subs	r4, r1, r4
    587e:	4252      	negs	r2, r2
    5880:	1aa4      	subs	r4, r4, r2
    5882:	0006      	movs	r6, r0
    5884:	46d8      	mov	r8, fp
    5886:	e6a3      	b.n	55d0 <__aeabi_dadd+0xb0>
    5888:	4664      	mov	r4, ip
    588a:	4667      	mov	r7, ip
    588c:	432c      	orrs	r4, r5
    588e:	d000      	beq.n	5892 <__aeabi_dadd+0x372>
    5890:	e6a2      	b.n	55d8 <__aeabi_dadd+0xb8>
    5892:	2500      	movs	r5, #0
    5894:	2600      	movs	r6, #0
    5896:	2700      	movs	r7, #0
    5898:	e706      	b.n	56a8 <__aeabi_dadd+0x188>
    589a:	001e      	movs	r6, r3
    589c:	e6c4      	b.n	5628 <__aeabi_dadd+0x108>
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	000007ff 	.word	0x000007ff
    58a4:	ff7fffff 	.word	0xff7fffff
    58a8:	800fffff 	.word	0x800fffff
    58ac:	2b1f      	cmp	r3, #31
    58ae:	dc63      	bgt.n	5978 <__aeabi_dadd+0x458>
    58b0:	2020      	movs	r0, #32
    58b2:	1ac3      	subs	r3, r0, r3
    58b4:	0008      	movs	r0, r1
    58b6:	4098      	lsls	r0, r3
    58b8:	469c      	mov	ip, r3
    58ba:	4683      	mov	fp, r0
    58bc:	4653      	mov	r3, sl
    58be:	0010      	movs	r0, r2
    58c0:	40d8      	lsrs	r0, r3
    58c2:	0003      	movs	r3, r0
    58c4:	4658      	mov	r0, fp
    58c6:	4318      	orrs	r0, r3
    58c8:	4663      	mov	r3, ip
    58ca:	409a      	lsls	r2, r3
    58cc:	1e53      	subs	r3, r2, #1
    58ce:	419a      	sbcs	r2, r3
    58d0:	4653      	mov	r3, sl
    58d2:	4302      	orrs	r2, r0
    58d4:	40d9      	lsrs	r1, r3
    58d6:	e703      	b.n	56e0 <__aeabi_dadd+0x1c0>
    58d8:	0026      	movs	r6, r4
    58da:	433e      	orrs	r6, r7
    58dc:	d006      	beq.n	58ec <__aeabi_dadd+0x3cc>
    58de:	43eb      	mvns	r3, r5
    58e0:	4699      	mov	r9, r3
    58e2:	2b00      	cmp	r3, #0
    58e4:	d0c7      	beq.n	5876 <__aeabi_dadd+0x356>
    58e6:	4e94      	ldr	r6, [pc, #592]	; (5b38 <__aeabi_dadd+0x618>)
    58e8:	42b0      	cmp	r0, r6
    58ea:	d1ac      	bne.n	5846 <__aeabi_dadd+0x326>
    58ec:	000c      	movs	r4, r1
    58ee:	0017      	movs	r7, r2
    58f0:	0006      	movs	r6, r0
    58f2:	46d8      	mov	r8, fp
    58f4:	e698      	b.n	5628 <__aeabi_dadd+0x108>
    58f6:	4b90      	ldr	r3, [pc, #576]	; (5b38 <__aeabi_dadd+0x618>)
    58f8:	459a      	cmp	sl, r3
    58fa:	d00b      	beq.n	5914 <__aeabi_dadd+0x3f4>
    58fc:	4682      	mov	sl, r0
    58fe:	e6e7      	b.n	56d0 <__aeabi_dadd+0x1b0>
    5900:	2800      	cmp	r0, #0
    5902:	d000      	beq.n	5906 <__aeabi_dadd+0x3e6>
    5904:	e09e      	b.n	5a44 <__aeabi_dadd+0x524>
    5906:	0018      	movs	r0, r3
    5908:	4310      	orrs	r0, r2
    590a:	d100      	bne.n	590e <__aeabi_dadd+0x3ee>
    590c:	e0e9      	b.n	5ae2 <__aeabi_dadd+0x5c2>
    590e:	001c      	movs	r4, r3
    5910:	0017      	movs	r7, r2
    5912:	46d8      	mov	r8, fp
    5914:	4e88      	ldr	r6, [pc, #544]	; (5b38 <__aeabi_dadd+0x618>)
    5916:	e687      	b.n	5628 <__aeabi_dadd+0x108>
    5918:	2500      	movs	r5, #0
    591a:	e772      	b.n	5802 <__aeabi_dadd+0x2e2>
    591c:	2100      	movs	r1, #0
    591e:	e782      	b.n	5826 <__aeabi_dadd+0x306>
    5920:	0023      	movs	r3, r4
    5922:	433b      	orrs	r3, r7
    5924:	2e00      	cmp	r6, #0
    5926:	d000      	beq.n	592a <__aeabi_dadd+0x40a>
    5928:	e0ab      	b.n	5a82 <__aeabi_dadd+0x562>
    592a:	2b00      	cmp	r3, #0
    592c:	d100      	bne.n	5930 <__aeabi_dadd+0x410>
    592e:	e0e7      	b.n	5b00 <__aeabi_dadd+0x5e0>
    5930:	000b      	movs	r3, r1
    5932:	4313      	orrs	r3, r2
    5934:	d100      	bne.n	5938 <__aeabi_dadd+0x418>
    5936:	e677      	b.n	5628 <__aeabi_dadd+0x108>
    5938:	18ba      	adds	r2, r7, r2
    593a:	42ba      	cmp	r2, r7
    593c:	41bf      	sbcs	r7, r7
    593e:	1864      	adds	r4, r4, r1
    5940:	427f      	negs	r7, r7
    5942:	19e4      	adds	r4, r4, r7
    5944:	0223      	lsls	r3, r4, #8
    5946:	d400      	bmi.n	594a <__aeabi_dadd+0x42a>
    5948:	e0f2      	b.n	5b30 <__aeabi_dadd+0x610>
    594a:	4b7c      	ldr	r3, [pc, #496]	; (5b3c <__aeabi_dadd+0x61c>)
    594c:	0017      	movs	r7, r2
    594e:	401c      	ands	r4, r3
    5950:	0006      	movs	r6, r0
    5952:	e669      	b.n	5628 <__aeabi_dadd+0x108>
    5954:	0020      	movs	r0, r4
    5956:	4338      	orrs	r0, r7
    5958:	2e00      	cmp	r6, #0
    595a:	d1d1      	bne.n	5900 <__aeabi_dadd+0x3e0>
    595c:	2800      	cmp	r0, #0
    595e:	d15b      	bne.n	5a18 <__aeabi_dadd+0x4f8>
    5960:	001c      	movs	r4, r3
    5962:	4314      	orrs	r4, r2
    5964:	d100      	bne.n	5968 <__aeabi_dadd+0x448>
    5966:	e0a8      	b.n	5aba <__aeabi_dadd+0x59a>
    5968:	001c      	movs	r4, r3
    596a:	0017      	movs	r7, r2
    596c:	46d8      	mov	r8, fp
    596e:	e65b      	b.n	5628 <__aeabi_dadd+0x108>
    5970:	0006      	movs	r6, r0
    5972:	2400      	movs	r4, #0
    5974:	2700      	movs	r7, #0
    5976:	e697      	b.n	56a8 <__aeabi_dadd+0x188>
    5978:	4650      	mov	r0, sl
    597a:	000b      	movs	r3, r1
    597c:	3820      	subs	r0, #32
    597e:	40c3      	lsrs	r3, r0
    5980:	4699      	mov	r9, r3
    5982:	4653      	mov	r3, sl
    5984:	2b20      	cmp	r3, #32
    5986:	d100      	bne.n	598a <__aeabi_dadd+0x46a>
    5988:	e095      	b.n	5ab6 <__aeabi_dadd+0x596>
    598a:	2340      	movs	r3, #64	; 0x40
    598c:	4650      	mov	r0, sl
    598e:	1a1b      	subs	r3, r3, r0
    5990:	4099      	lsls	r1, r3
    5992:	430a      	orrs	r2, r1
    5994:	1e51      	subs	r1, r2, #1
    5996:	418a      	sbcs	r2, r1
    5998:	464b      	mov	r3, r9
    599a:	2100      	movs	r1, #0
    599c:	431a      	orrs	r2, r3
    599e:	e69f      	b.n	56e0 <__aeabi_dadd+0x1c0>
    59a0:	2e00      	cmp	r6, #0
    59a2:	d130      	bne.n	5a06 <__aeabi_dadd+0x4e6>
    59a4:	0026      	movs	r6, r4
    59a6:	433e      	orrs	r6, r7
    59a8:	d067      	beq.n	5a7a <__aeabi_dadd+0x55a>
    59aa:	43db      	mvns	r3, r3
    59ac:	469a      	mov	sl, r3
    59ae:	2b00      	cmp	r3, #0
    59b0:	d01c      	beq.n	59ec <__aeabi_dadd+0x4cc>
    59b2:	4e61      	ldr	r6, [pc, #388]	; (5b38 <__aeabi_dadd+0x618>)
    59b4:	42b0      	cmp	r0, r6
    59b6:	d060      	beq.n	5a7a <__aeabi_dadd+0x55a>
    59b8:	4653      	mov	r3, sl
    59ba:	2b38      	cmp	r3, #56	; 0x38
    59bc:	dd00      	ble.n	59c0 <__aeabi_dadd+0x4a0>
    59be:	e096      	b.n	5aee <__aeabi_dadd+0x5ce>
    59c0:	2b1f      	cmp	r3, #31
    59c2:	dd00      	ble.n	59c6 <__aeabi_dadd+0x4a6>
    59c4:	e09f      	b.n	5b06 <__aeabi_dadd+0x5e6>
    59c6:	2620      	movs	r6, #32
    59c8:	1af3      	subs	r3, r6, r3
    59ca:	0026      	movs	r6, r4
    59cc:	409e      	lsls	r6, r3
    59ce:	469c      	mov	ip, r3
    59d0:	46b3      	mov	fp, r6
    59d2:	4653      	mov	r3, sl
    59d4:	003e      	movs	r6, r7
    59d6:	40de      	lsrs	r6, r3
    59d8:	0033      	movs	r3, r6
    59da:	465e      	mov	r6, fp
    59dc:	431e      	orrs	r6, r3
    59de:	4663      	mov	r3, ip
    59e0:	409f      	lsls	r7, r3
    59e2:	1e7b      	subs	r3, r7, #1
    59e4:	419f      	sbcs	r7, r3
    59e6:	4653      	mov	r3, sl
    59e8:	40dc      	lsrs	r4, r3
    59ea:	4337      	orrs	r7, r6
    59ec:	18bf      	adds	r7, r7, r2
    59ee:	4297      	cmp	r7, r2
    59f0:	4192      	sbcs	r2, r2
    59f2:	1864      	adds	r4, r4, r1
    59f4:	4252      	negs	r2, r2
    59f6:	18a4      	adds	r4, r4, r2
    59f8:	0006      	movs	r6, r0
    59fa:	e678      	b.n	56ee <__aeabi_dadd+0x1ce>
    59fc:	4327      	orrs	r7, r4
    59fe:	1e7c      	subs	r4, r7, #1
    5a00:	41a7      	sbcs	r7, r4
    5a02:	2400      	movs	r4, #0
    5a04:	e737      	b.n	5876 <__aeabi_dadd+0x356>
    5a06:	4e4c      	ldr	r6, [pc, #304]	; (5b38 <__aeabi_dadd+0x618>)
    5a08:	42b0      	cmp	r0, r6
    5a0a:	d036      	beq.n	5a7a <__aeabi_dadd+0x55a>
    5a0c:	2680      	movs	r6, #128	; 0x80
    5a0e:	425b      	negs	r3, r3
    5a10:	0436      	lsls	r6, r6, #16
    5a12:	469a      	mov	sl, r3
    5a14:	4334      	orrs	r4, r6
    5a16:	e7cf      	b.n	59b8 <__aeabi_dadd+0x498>
    5a18:	0018      	movs	r0, r3
    5a1a:	4310      	orrs	r0, r2
    5a1c:	d100      	bne.n	5a20 <__aeabi_dadd+0x500>
    5a1e:	e603      	b.n	5628 <__aeabi_dadd+0x108>
    5a20:	1ab8      	subs	r0, r7, r2
    5a22:	4684      	mov	ip, r0
    5a24:	4567      	cmp	r7, ip
    5a26:	41ad      	sbcs	r5, r5
    5a28:	1ae0      	subs	r0, r4, r3
    5a2a:	426d      	negs	r5, r5
    5a2c:	1b40      	subs	r0, r0, r5
    5a2e:	0205      	lsls	r5, r0, #8
    5a30:	d400      	bmi.n	5a34 <__aeabi_dadd+0x514>
    5a32:	e62c      	b.n	568e <__aeabi_dadd+0x16e>
    5a34:	1bd7      	subs	r7, r2, r7
    5a36:	42ba      	cmp	r2, r7
    5a38:	4192      	sbcs	r2, r2
    5a3a:	1b1c      	subs	r4, r3, r4
    5a3c:	4252      	negs	r2, r2
    5a3e:	1aa4      	subs	r4, r4, r2
    5a40:	46d8      	mov	r8, fp
    5a42:	e5f1      	b.n	5628 <__aeabi_dadd+0x108>
    5a44:	0018      	movs	r0, r3
    5a46:	4310      	orrs	r0, r2
    5a48:	d100      	bne.n	5a4c <__aeabi_dadd+0x52c>
    5a4a:	e763      	b.n	5914 <__aeabi_dadd+0x3f4>
    5a4c:	08f8      	lsrs	r0, r7, #3
    5a4e:	0767      	lsls	r7, r4, #29
    5a50:	4307      	orrs	r7, r0
    5a52:	2080      	movs	r0, #128	; 0x80
    5a54:	08e4      	lsrs	r4, r4, #3
    5a56:	0300      	lsls	r0, r0, #12
    5a58:	4204      	tst	r4, r0
    5a5a:	d008      	beq.n	5a6e <__aeabi_dadd+0x54e>
    5a5c:	08dd      	lsrs	r5, r3, #3
    5a5e:	4205      	tst	r5, r0
    5a60:	d105      	bne.n	5a6e <__aeabi_dadd+0x54e>
    5a62:	08d2      	lsrs	r2, r2, #3
    5a64:	0759      	lsls	r1, r3, #29
    5a66:	4311      	orrs	r1, r2
    5a68:	000f      	movs	r7, r1
    5a6a:	002c      	movs	r4, r5
    5a6c:	46d8      	mov	r8, fp
    5a6e:	0f7b      	lsrs	r3, r7, #29
    5a70:	00e4      	lsls	r4, r4, #3
    5a72:	431c      	orrs	r4, r3
    5a74:	00ff      	lsls	r7, r7, #3
    5a76:	4e30      	ldr	r6, [pc, #192]	; (5b38 <__aeabi_dadd+0x618>)
    5a78:	e5d6      	b.n	5628 <__aeabi_dadd+0x108>
    5a7a:	000c      	movs	r4, r1
    5a7c:	0017      	movs	r7, r2
    5a7e:	0006      	movs	r6, r0
    5a80:	e5d2      	b.n	5628 <__aeabi_dadd+0x108>
    5a82:	2b00      	cmp	r3, #0
    5a84:	d038      	beq.n	5af8 <__aeabi_dadd+0x5d8>
    5a86:	000b      	movs	r3, r1
    5a88:	4313      	orrs	r3, r2
    5a8a:	d100      	bne.n	5a8e <__aeabi_dadd+0x56e>
    5a8c:	e742      	b.n	5914 <__aeabi_dadd+0x3f4>
    5a8e:	08f8      	lsrs	r0, r7, #3
    5a90:	0767      	lsls	r7, r4, #29
    5a92:	4307      	orrs	r7, r0
    5a94:	2080      	movs	r0, #128	; 0x80
    5a96:	08e4      	lsrs	r4, r4, #3
    5a98:	0300      	lsls	r0, r0, #12
    5a9a:	4204      	tst	r4, r0
    5a9c:	d0e7      	beq.n	5a6e <__aeabi_dadd+0x54e>
    5a9e:	08cb      	lsrs	r3, r1, #3
    5aa0:	4203      	tst	r3, r0
    5aa2:	d1e4      	bne.n	5a6e <__aeabi_dadd+0x54e>
    5aa4:	08d2      	lsrs	r2, r2, #3
    5aa6:	0749      	lsls	r1, r1, #29
    5aa8:	4311      	orrs	r1, r2
    5aaa:	000f      	movs	r7, r1
    5aac:	001c      	movs	r4, r3
    5aae:	e7de      	b.n	5a6e <__aeabi_dadd+0x54e>
    5ab0:	2700      	movs	r7, #0
    5ab2:	2400      	movs	r4, #0
    5ab4:	e5d5      	b.n	5662 <__aeabi_dadd+0x142>
    5ab6:	2100      	movs	r1, #0
    5ab8:	e76b      	b.n	5992 <__aeabi_dadd+0x472>
    5aba:	2500      	movs	r5, #0
    5abc:	2700      	movs	r7, #0
    5abe:	e5f3      	b.n	56a8 <__aeabi_dadd+0x188>
    5ac0:	464e      	mov	r6, r9
    5ac2:	0025      	movs	r5, r4
    5ac4:	3e20      	subs	r6, #32
    5ac6:	40f5      	lsrs	r5, r6
    5ac8:	464b      	mov	r3, r9
    5aca:	002e      	movs	r6, r5
    5acc:	2b20      	cmp	r3, #32
    5ace:	d02d      	beq.n	5b2c <__aeabi_dadd+0x60c>
    5ad0:	2540      	movs	r5, #64	; 0x40
    5ad2:	1aed      	subs	r5, r5, r3
    5ad4:	40ac      	lsls	r4, r5
    5ad6:	4327      	orrs	r7, r4
    5ad8:	1e7c      	subs	r4, r7, #1
    5ada:	41a7      	sbcs	r7, r4
    5adc:	2400      	movs	r4, #0
    5ade:	4337      	orrs	r7, r6
    5ae0:	e6c9      	b.n	5876 <__aeabi_dadd+0x356>
    5ae2:	2480      	movs	r4, #128	; 0x80
    5ae4:	2500      	movs	r5, #0
    5ae6:	0324      	lsls	r4, r4, #12
    5ae8:	4e13      	ldr	r6, [pc, #76]	; (5b38 <__aeabi_dadd+0x618>)
    5aea:	2700      	movs	r7, #0
    5aec:	e5dc      	b.n	56a8 <__aeabi_dadd+0x188>
    5aee:	4327      	orrs	r7, r4
    5af0:	1e7c      	subs	r4, r7, #1
    5af2:	41a7      	sbcs	r7, r4
    5af4:	2400      	movs	r4, #0
    5af6:	e779      	b.n	59ec <__aeabi_dadd+0x4cc>
    5af8:	000c      	movs	r4, r1
    5afa:	0017      	movs	r7, r2
    5afc:	4e0e      	ldr	r6, [pc, #56]	; (5b38 <__aeabi_dadd+0x618>)
    5afe:	e593      	b.n	5628 <__aeabi_dadd+0x108>
    5b00:	000c      	movs	r4, r1
    5b02:	0017      	movs	r7, r2
    5b04:	e590      	b.n	5628 <__aeabi_dadd+0x108>
    5b06:	4656      	mov	r6, sl
    5b08:	0023      	movs	r3, r4
    5b0a:	3e20      	subs	r6, #32
    5b0c:	40f3      	lsrs	r3, r6
    5b0e:	4699      	mov	r9, r3
    5b10:	4653      	mov	r3, sl
    5b12:	2b20      	cmp	r3, #32
    5b14:	d00e      	beq.n	5b34 <__aeabi_dadd+0x614>
    5b16:	2340      	movs	r3, #64	; 0x40
    5b18:	4656      	mov	r6, sl
    5b1a:	1b9b      	subs	r3, r3, r6
    5b1c:	409c      	lsls	r4, r3
    5b1e:	4327      	orrs	r7, r4
    5b20:	1e7c      	subs	r4, r7, #1
    5b22:	41a7      	sbcs	r7, r4
    5b24:	464b      	mov	r3, r9
    5b26:	2400      	movs	r4, #0
    5b28:	431f      	orrs	r7, r3
    5b2a:	e75f      	b.n	59ec <__aeabi_dadd+0x4cc>
    5b2c:	2400      	movs	r4, #0
    5b2e:	e7d2      	b.n	5ad6 <__aeabi_dadd+0x5b6>
    5b30:	0017      	movs	r7, r2
    5b32:	e5b2      	b.n	569a <__aeabi_dadd+0x17a>
    5b34:	2400      	movs	r4, #0
    5b36:	e7f2      	b.n	5b1e <__aeabi_dadd+0x5fe>
    5b38:	000007ff 	.word	0x000007ff
    5b3c:	ff7fffff 	.word	0xff7fffff

00005b40 <__aeabi_ddiv>:
    5b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b42:	4657      	mov	r7, sl
    5b44:	4645      	mov	r5, r8
    5b46:	46de      	mov	lr, fp
    5b48:	464e      	mov	r6, r9
    5b4a:	b5e0      	push	{r5, r6, r7, lr}
    5b4c:	004c      	lsls	r4, r1, #1
    5b4e:	030e      	lsls	r6, r1, #12
    5b50:	b087      	sub	sp, #28
    5b52:	4683      	mov	fp, r0
    5b54:	4692      	mov	sl, r2
    5b56:	001d      	movs	r5, r3
    5b58:	4680      	mov	r8, r0
    5b5a:	0b36      	lsrs	r6, r6, #12
    5b5c:	0d64      	lsrs	r4, r4, #21
    5b5e:	0fcf      	lsrs	r7, r1, #31
    5b60:	2c00      	cmp	r4, #0
    5b62:	d04f      	beq.n	5c04 <__aeabi_ddiv+0xc4>
    5b64:	4b6f      	ldr	r3, [pc, #444]	; (5d24 <__aeabi_ddiv+0x1e4>)
    5b66:	429c      	cmp	r4, r3
    5b68:	d035      	beq.n	5bd6 <__aeabi_ddiv+0x96>
    5b6a:	2380      	movs	r3, #128	; 0x80
    5b6c:	0f42      	lsrs	r2, r0, #29
    5b6e:	041b      	lsls	r3, r3, #16
    5b70:	00f6      	lsls	r6, r6, #3
    5b72:	4313      	orrs	r3, r2
    5b74:	4333      	orrs	r3, r6
    5b76:	4699      	mov	r9, r3
    5b78:	00c3      	lsls	r3, r0, #3
    5b7a:	4698      	mov	r8, r3
    5b7c:	4b6a      	ldr	r3, [pc, #424]	; (5d28 <__aeabi_ddiv+0x1e8>)
    5b7e:	2600      	movs	r6, #0
    5b80:	469c      	mov	ip, r3
    5b82:	2300      	movs	r3, #0
    5b84:	4464      	add	r4, ip
    5b86:	9303      	str	r3, [sp, #12]
    5b88:	032b      	lsls	r3, r5, #12
    5b8a:	0b1b      	lsrs	r3, r3, #12
    5b8c:	469b      	mov	fp, r3
    5b8e:	006b      	lsls	r3, r5, #1
    5b90:	0fed      	lsrs	r5, r5, #31
    5b92:	4650      	mov	r0, sl
    5b94:	0d5b      	lsrs	r3, r3, #21
    5b96:	9501      	str	r5, [sp, #4]
    5b98:	d05e      	beq.n	5c58 <__aeabi_ddiv+0x118>
    5b9a:	4a62      	ldr	r2, [pc, #392]	; (5d24 <__aeabi_ddiv+0x1e4>)
    5b9c:	4293      	cmp	r3, r2
    5b9e:	d053      	beq.n	5c48 <__aeabi_ddiv+0x108>
    5ba0:	465a      	mov	r2, fp
    5ba2:	00d1      	lsls	r1, r2, #3
    5ba4:	2280      	movs	r2, #128	; 0x80
    5ba6:	0f40      	lsrs	r0, r0, #29
    5ba8:	0412      	lsls	r2, r2, #16
    5baa:	4302      	orrs	r2, r0
    5bac:	430a      	orrs	r2, r1
    5bae:	4693      	mov	fp, r2
    5bb0:	4652      	mov	r2, sl
    5bb2:	00d1      	lsls	r1, r2, #3
    5bb4:	4a5c      	ldr	r2, [pc, #368]	; (5d28 <__aeabi_ddiv+0x1e8>)
    5bb6:	4694      	mov	ip, r2
    5bb8:	2200      	movs	r2, #0
    5bba:	4463      	add	r3, ip
    5bbc:	0038      	movs	r0, r7
    5bbe:	4068      	eors	r0, r5
    5bc0:	4684      	mov	ip, r0
    5bc2:	9002      	str	r0, [sp, #8]
    5bc4:	1ae4      	subs	r4, r4, r3
    5bc6:	4316      	orrs	r6, r2
    5bc8:	2e0f      	cmp	r6, #15
    5bca:	d900      	bls.n	5bce <__aeabi_ddiv+0x8e>
    5bcc:	e0b4      	b.n	5d38 <__aeabi_ddiv+0x1f8>
    5bce:	4b57      	ldr	r3, [pc, #348]	; (5d2c <__aeabi_ddiv+0x1ec>)
    5bd0:	00b6      	lsls	r6, r6, #2
    5bd2:	599b      	ldr	r3, [r3, r6]
    5bd4:	469f      	mov	pc, r3
    5bd6:	0003      	movs	r3, r0
    5bd8:	4333      	orrs	r3, r6
    5bda:	4699      	mov	r9, r3
    5bdc:	d16c      	bne.n	5cb8 <__aeabi_ddiv+0x178>
    5bde:	2300      	movs	r3, #0
    5be0:	4698      	mov	r8, r3
    5be2:	3302      	adds	r3, #2
    5be4:	2608      	movs	r6, #8
    5be6:	9303      	str	r3, [sp, #12]
    5be8:	e7ce      	b.n	5b88 <__aeabi_ddiv+0x48>
    5bea:	46cb      	mov	fp, r9
    5bec:	4641      	mov	r1, r8
    5bee:	9a03      	ldr	r2, [sp, #12]
    5bf0:	9701      	str	r7, [sp, #4]
    5bf2:	2a02      	cmp	r2, #2
    5bf4:	d165      	bne.n	5cc2 <__aeabi_ddiv+0x182>
    5bf6:	9b01      	ldr	r3, [sp, #4]
    5bf8:	4c4a      	ldr	r4, [pc, #296]	; (5d24 <__aeabi_ddiv+0x1e4>)
    5bfa:	469c      	mov	ip, r3
    5bfc:	2300      	movs	r3, #0
    5bfe:	2200      	movs	r2, #0
    5c00:	4698      	mov	r8, r3
    5c02:	e06b      	b.n	5cdc <__aeabi_ddiv+0x19c>
    5c04:	0003      	movs	r3, r0
    5c06:	4333      	orrs	r3, r6
    5c08:	4699      	mov	r9, r3
    5c0a:	d04e      	beq.n	5caa <__aeabi_ddiv+0x16a>
    5c0c:	2e00      	cmp	r6, #0
    5c0e:	d100      	bne.n	5c12 <__aeabi_ddiv+0xd2>
    5c10:	e1bc      	b.n	5f8c <__aeabi_ddiv+0x44c>
    5c12:	0030      	movs	r0, r6
    5c14:	f001 fa3c 	bl	7090 <__clzsi2>
    5c18:	0003      	movs	r3, r0
    5c1a:	3b0b      	subs	r3, #11
    5c1c:	2b1c      	cmp	r3, #28
    5c1e:	dd00      	ble.n	5c22 <__aeabi_ddiv+0xe2>
    5c20:	e1ac      	b.n	5f7c <__aeabi_ddiv+0x43c>
    5c22:	221d      	movs	r2, #29
    5c24:	1ad3      	subs	r3, r2, r3
    5c26:	465a      	mov	r2, fp
    5c28:	0001      	movs	r1, r0
    5c2a:	40da      	lsrs	r2, r3
    5c2c:	3908      	subs	r1, #8
    5c2e:	408e      	lsls	r6, r1
    5c30:	0013      	movs	r3, r2
    5c32:	4333      	orrs	r3, r6
    5c34:	4699      	mov	r9, r3
    5c36:	465b      	mov	r3, fp
    5c38:	408b      	lsls	r3, r1
    5c3a:	4698      	mov	r8, r3
    5c3c:	2300      	movs	r3, #0
    5c3e:	4c3c      	ldr	r4, [pc, #240]	; (5d30 <__aeabi_ddiv+0x1f0>)
    5c40:	2600      	movs	r6, #0
    5c42:	1a24      	subs	r4, r4, r0
    5c44:	9303      	str	r3, [sp, #12]
    5c46:	e79f      	b.n	5b88 <__aeabi_ddiv+0x48>
    5c48:	4651      	mov	r1, sl
    5c4a:	465a      	mov	r2, fp
    5c4c:	4311      	orrs	r1, r2
    5c4e:	d129      	bne.n	5ca4 <__aeabi_ddiv+0x164>
    5c50:	2200      	movs	r2, #0
    5c52:	4693      	mov	fp, r2
    5c54:	3202      	adds	r2, #2
    5c56:	e7b1      	b.n	5bbc <__aeabi_ddiv+0x7c>
    5c58:	4659      	mov	r1, fp
    5c5a:	4301      	orrs	r1, r0
    5c5c:	d01e      	beq.n	5c9c <__aeabi_ddiv+0x15c>
    5c5e:	465b      	mov	r3, fp
    5c60:	2b00      	cmp	r3, #0
    5c62:	d100      	bne.n	5c66 <__aeabi_ddiv+0x126>
    5c64:	e19e      	b.n	5fa4 <__aeabi_ddiv+0x464>
    5c66:	4658      	mov	r0, fp
    5c68:	f001 fa12 	bl	7090 <__clzsi2>
    5c6c:	0003      	movs	r3, r0
    5c6e:	3b0b      	subs	r3, #11
    5c70:	2b1c      	cmp	r3, #28
    5c72:	dd00      	ble.n	5c76 <__aeabi_ddiv+0x136>
    5c74:	e18f      	b.n	5f96 <__aeabi_ddiv+0x456>
    5c76:	0002      	movs	r2, r0
    5c78:	4659      	mov	r1, fp
    5c7a:	3a08      	subs	r2, #8
    5c7c:	4091      	lsls	r1, r2
    5c7e:	468b      	mov	fp, r1
    5c80:	211d      	movs	r1, #29
    5c82:	1acb      	subs	r3, r1, r3
    5c84:	4651      	mov	r1, sl
    5c86:	40d9      	lsrs	r1, r3
    5c88:	000b      	movs	r3, r1
    5c8a:	4659      	mov	r1, fp
    5c8c:	430b      	orrs	r3, r1
    5c8e:	4651      	mov	r1, sl
    5c90:	469b      	mov	fp, r3
    5c92:	4091      	lsls	r1, r2
    5c94:	4b26      	ldr	r3, [pc, #152]	; (5d30 <__aeabi_ddiv+0x1f0>)
    5c96:	2200      	movs	r2, #0
    5c98:	1a1b      	subs	r3, r3, r0
    5c9a:	e78f      	b.n	5bbc <__aeabi_ddiv+0x7c>
    5c9c:	2300      	movs	r3, #0
    5c9e:	2201      	movs	r2, #1
    5ca0:	469b      	mov	fp, r3
    5ca2:	e78b      	b.n	5bbc <__aeabi_ddiv+0x7c>
    5ca4:	4651      	mov	r1, sl
    5ca6:	2203      	movs	r2, #3
    5ca8:	e788      	b.n	5bbc <__aeabi_ddiv+0x7c>
    5caa:	2300      	movs	r3, #0
    5cac:	4698      	mov	r8, r3
    5cae:	3301      	adds	r3, #1
    5cb0:	2604      	movs	r6, #4
    5cb2:	2400      	movs	r4, #0
    5cb4:	9303      	str	r3, [sp, #12]
    5cb6:	e767      	b.n	5b88 <__aeabi_ddiv+0x48>
    5cb8:	2303      	movs	r3, #3
    5cba:	46b1      	mov	r9, r6
    5cbc:	9303      	str	r3, [sp, #12]
    5cbe:	260c      	movs	r6, #12
    5cc0:	e762      	b.n	5b88 <__aeabi_ddiv+0x48>
    5cc2:	2a03      	cmp	r2, #3
    5cc4:	d100      	bne.n	5cc8 <__aeabi_ddiv+0x188>
    5cc6:	e25c      	b.n	6182 <__aeabi_ddiv+0x642>
    5cc8:	9b01      	ldr	r3, [sp, #4]
    5cca:	2a01      	cmp	r2, #1
    5ccc:	d000      	beq.n	5cd0 <__aeabi_ddiv+0x190>
    5cce:	e1e4      	b.n	609a <__aeabi_ddiv+0x55a>
    5cd0:	4013      	ands	r3, r2
    5cd2:	469c      	mov	ip, r3
    5cd4:	2300      	movs	r3, #0
    5cd6:	2400      	movs	r4, #0
    5cd8:	2200      	movs	r2, #0
    5cda:	4698      	mov	r8, r3
    5cdc:	2100      	movs	r1, #0
    5cde:	0312      	lsls	r2, r2, #12
    5ce0:	0b13      	lsrs	r3, r2, #12
    5ce2:	0d0a      	lsrs	r2, r1, #20
    5ce4:	0512      	lsls	r2, r2, #20
    5ce6:	431a      	orrs	r2, r3
    5ce8:	0523      	lsls	r3, r4, #20
    5cea:	4c12      	ldr	r4, [pc, #72]	; (5d34 <__aeabi_ddiv+0x1f4>)
    5cec:	4640      	mov	r0, r8
    5cee:	4022      	ands	r2, r4
    5cf0:	4313      	orrs	r3, r2
    5cf2:	4662      	mov	r2, ip
    5cf4:	005b      	lsls	r3, r3, #1
    5cf6:	07d2      	lsls	r2, r2, #31
    5cf8:	085b      	lsrs	r3, r3, #1
    5cfa:	4313      	orrs	r3, r2
    5cfc:	0019      	movs	r1, r3
    5cfe:	b007      	add	sp, #28
    5d00:	bc3c      	pop	{r2, r3, r4, r5}
    5d02:	4690      	mov	r8, r2
    5d04:	4699      	mov	r9, r3
    5d06:	46a2      	mov	sl, r4
    5d08:	46ab      	mov	fp, r5
    5d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d0c:	2300      	movs	r3, #0
    5d0e:	2280      	movs	r2, #128	; 0x80
    5d10:	469c      	mov	ip, r3
    5d12:	0312      	lsls	r2, r2, #12
    5d14:	4698      	mov	r8, r3
    5d16:	4c03      	ldr	r4, [pc, #12]	; (5d24 <__aeabi_ddiv+0x1e4>)
    5d18:	e7e0      	b.n	5cdc <__aeabi_ddiv+0x19c>
    5d1a:	2300      	movs	r3, #0
    5d1c:	4c01      	ldr	r4, [pc, #4]	; (5d24 <__aeabi_ddiv+0x1e4>)
    5d1e:	2200      	movs	r2, #0
    5d20:	4698      	mov	r8, r3
    5d22:	e7db      	b.n	5cdc <__aeabi_ddiv+0x19c>
    5d24:	000007ff 	.word	0x000007ff
    5d28:	fffffc01 	.word	0xfffffc01
    5d2c:	000077a8 	.word	0x000077a8
    5d30:	fffffc0d 	.word	0xfffffc0d
    5d34:	800fffff 	.word	0x800fffff
    5d38:	45d9      	cmp	r9, fp
    5d3a:	d900      	bls.n	5d3e <__aeabi_ddiv+0x1fe>
    5d3c:	e139      	b.n	5fb2 <__aeabi_ddiv+0x472>
    5d3e:	d100      	bne.n	5d42 <__aeabi_ddiv+0x202>
    5d40:	e134      	b.n	5fac <__aeabi_ddiv+0x46c>
    5d42:	2300      	movs	r3, #0
    5d44:	4646      	mov	r6, r8
    5d46:	464d      	mov	r5, r9
    5d48:	469a      	mov	sl, r3
    5d4a:	3c01      	subs	r4, #1
    5d4c:	465b      	mov	r3, fp
    5d4e:	0e0a      	lsrs	r2, r1, #24
    5d50:	021b      	lsls	r3, r3, #8
    5d52:	431a      	orrs	r2, r3
    5d54:	020b      	lsls	r3, r1, #8
    5d56:	0c17      	lsrs	r7, r2, #16
    5d58:	9303      	str	r3, [sp, #12]
    5d5a:	0413      	lsls	r3, r2, #16
    5d5c:	0c1b      	lsrs	r3, r3, #16
    5d5e:	0039      	movs	r1, r7
    5d60:	0028      	movs	r0, r5
    5d62:	4690      	mov	r8, r2
    5d64:	9301      	str	r3, [sp, #4]
    5d66:	f7ff f951 	bl	500c <__udivsi3>
    5d6a:	0002      	movs	r2, r0
    5d6c:	9b01      	ldr	r3, [sp, #4]
    5d6e:	4683      	mov	fp, r0
    5d70:	435a      	muls	r2, r3
    5d72:	0028      	movs	r0, r5
    5d74:	0039      	movs	r1, r7
    5d76:	4691      	mov	r9, r2
    5d78:	f7ff f9ce 	bl	5118 <__aeabi_uidivmod>
    5d7c:	0c35      	lsrs	r5, r6, #16
    5d7e:	0409      	lsls	r1, r1, #16
    5d80:	430d      	orrs	r5, r1
    5d82:	45a9      	cmp	r9, r5
    5d84:	d90d      	bls.n	5da2 <__aeabi_ddiv+0x262>
    5d86:	465b      	mov	r3, fp
    5d88:	4445      	add	r5, r8
    5d8a:	3b01      	subs	r3, #1
    5d8c:	45a8      	cmp	r8, r5
    5d8e:	d900      	bls.n	5d92 <__aeabi_ddiv+0x252>
    5d90:	e13a      	b.n	6008 <__aeabi_ddiv+0x4c8>
    5d92:	45a9      	cmp	r9, r5
    5d94:	d800      	bhi.n	5d98 <__aeabi_ddiv+0x258>
    5d96:	e137      	b.n	6008 <__aeabi_ddiv+0x4c8>
    5d98:	2302      	movs	r3, #2
    5d9a:	425b      	negs	r3, r3
    5d9c:	469c      	mov	ip, r3
    5d9e:	4445      	add	r5, r8
    5da0:	44e3      	add	fp, ip
    5da2:	464b      	mov	r3, r9
    5da4:	1aeb      	subs	r3, r5, r3
    5da6:	0039      	movs	r1, r7
    5da8:	0018      	movs	r0, r3
    5daa:	9304      	str	r3, [sp, #16]
    5dac:	f7ff f92e 	bl	500c <__udivsi3>
    5db0:	9b01      	ldr	r3, [sp, #4]
    5db2:	0005      	movs	r5, r0
    5db4:	4343      	muls	r3, r0
    5db6:	0039      	movs	r1, r7
    5db8:	9804      	ldr	r0, [sp, #16]
    5dba:	4699      	mov	r9, r3
    5dbc:	f7ff f9ac 	bl	5118 <__aeabi_uidivmod>
    5dc0:	0433      	lsls	r3, r6, #16
    5dc2:	0409      	lsls	r1, r1, #16
    5dc4:	0c1b      	lsrs	r3, r3, #16
    5dc6:	430b      	orrs	r3, r1
    5dc8:	4599      	cmp	r9, r3
    5dca:	d909      	bls.n	5de0 <__aeabi_ddiv+0x2a0>
    5dcc:	4443      	add	r3, r8
    5dce:	1e6a      	subs	r2, r5, #1
    5dd0:	4598      	cmp	r8, r3
    5dd2:	d900      	bls.n	5dd6 <__aeabi_ddiv+0x296>
    5dd4:	e11a      	b.n	600c <__aeabi_ddiv+0x4cc>
    5dd6:	4599      	cmp	r9, r3
    5dd8:	d800      	bhi.n	5ddc <__aeabi_ddiv+0x29c>
    5dda:	e117      	b.n	600c <__aeabi_ddiv+0x4cc>
    5ddc:	3d02      	subs	r5, #2
    5dde:	4443      	add	r3, r8
    5de0:	464a      	mov	r2, r9
    5de2:	1a9b      	subs	r3, r3, r2
    5de4:	465a      	mov	r2, fp
    5de6:	0412      	lsls	r2, r2, #16
    5de8:	432a      	orrs	r2, r5
    5dea:	9903      	ldr	r1, [sp, #12]
    5dec:	4693      	mov	fp, r2
    5dee:	0c10      	lsrs	r0, r2, #16
    5df0:	0c0a      	lsrs	r2, r1, #16
    5df2:	4691      	mov	r9, r2
    5df4:	0409      	lsls	r1, r1, #16
    5df6:	465a      	mov	r2, fp
    5df8:	0c09      	lsrs	r1, r1, #16
    5dfa:	464e      	mov	r6, r9
    5dfc:	000d      	movs	r5, r1
    5dfe:	0412      	lsls	r2, r2, #16
    5e00:	0c12      	lsrs	r2, r2, #16
    5e02:	4345      	muls	r5, r0
    5e04:	9105      	str	r1, [sp, #20]
    5e06:	4351      	muls	r1, r2
    5e08:	4372      	muls	r2, r6
    5e0a:	4370      	muls	r0, r6
    5e0c:	1952      	adds	r2, r2, r5
    5e0e:	0c0e      	lsrs	r6, r1, #16
    5e10:	18b2      	adds	r2, r6, r2
    5e12:	4295      	cmp	r5, r2
    5e14:	d903      	bls.n	5e1e <__aeabi_ddiv+0x2de>
    5e16:	2580      	movs	r5, #128	; 0x80
    5e18:	026d      	lsls	r5, r5, #9
    5e1a:	46ac      	mov	ip, r5
    5e1c:	4460      	add	r0, ip
    5e1e:	0c15      	lsrs	r5, r2, #16
    5e20:	0409      	lsls	r1, r1, #16
    5e22:	0412      	lsls	r2, r2, #16
    5e24:	0c09      	lsrs	r1, r1, #16
    5e26:	1828      	adds	r0, r5, r0
    5e28:	1852      	adds	r2, r2, r1
    5e2a:	4283      	cmp	r3, r0
    5e2c:	d200      	bcs.n	5e30 <__aeabi_ddiv+0x2f0>
    5e2e:	e0ce      	b.n	5fce <__aeabi_ddiv+0x48e>
    5e30:	d100      	bne.n	5e34 <__aeabi_ddiv+0x2f4>
    5e32:	e0c8      	b.n	5fc6 <__aeabi_ddiv+0x486>
    5e34:	1a1d      	subs	r5, r3, r0
    5e36:	4653      	mov	r3, sl
    5e38:	1a9e      	subs	r6, r3, r2
    5e3a:	45b2      	cmp	sl, r6
    5e3c:	4192      	sbcs	r2, r2
    5e3e:	4252      	negs	r2, r2
    5e40:	1aab      	subs	r3, r5, r2
    5e42:	469a      	mov	sl, r3
    5e44:	4598      	cmp	r8, r3
    5e46:	d100      	bne.n	5e4a <__aeabi_ddiv+0x30a>
    5e48:	e117      	b.n	607a <__aeabi_ddiv+0x53a>
    5e4a:	0039      	movs	r1, r7
    5e4c:	0018      	movs	r0, r3
    5e4e:	f7ff f8dd 	bl	500c <__udivsi3>
    5e52:	9b01      	ldr	r3, [sp, #4]
    5e54:	0005      	movs	r5, r0
    5e56:	4343      	muls	r3, r0
    5e58:	0039      	movs	r1, r7
    5e5a:	4650      	mov	r0, sl
    5e5c:	9304      	str	r3, [sp, #16]
    5e5e:	f7ff f95b 	bl	5118 <__aeabi_uidivmod>
    5e62:	9804      	ldr	r0, [sp, #16]
    5e64:	040b      	lsls	r3, r1, #16
    5e66:	0c31      	lsrs	r1, r6, #16
    5e68:	4319      	orrs	r1, r3
    5e6a:	4288      	cmp	r0, r1
    5e6c:	d909      	bls.n	5e82 <__aeabi_ddiv+0x342>
    5e6e:	4441      	add	r1, r8
    5e70:	1e6b      	subs	r3, r5, #1
    5e72:	4588      	cmp	r8, r1
    5e74:	d900      	bls.n	5e78 <__aeabi_ddiv+0x338>
    5e76:	e107      	b.n	6088 <__aeabi_ddiv+0x548>
    5e78:	4288      	cmp	r0, r1
    5e7a:	d800      	bhi.n	5e7e <__aeabi_ddiv+0x33e>
    5e7c:	e104      	b.n	6088 <__aeabi_ddiv+0x548>
    5e7e:	3d02      	subs	r5, #2
    5e80:	4441      	add	r1, r8
    5e82:	9b04      	ldr	r3, [sp, #16]
    5e84:	1acb      	subs	r3, r1, r3
    5e86:	0018      	movs	r0, r3
    5e88:	0039      	movs	r1, r7
    5e8a:	9304      	str	r3, [sp, #16]
    5e8c:	f7ff f8be 	bl	500c <__udivsi3>
    5e90:	9b01      	ldr	r3, [sp, #4]
    5e92:	4682      	mov	sl, r0
    5e94:	4343      	muls	r3, r0
    5e96:	0039      	movs	r1, r7
    5e98:	9804      	ldr	r0, [sp, #16]
    5e9a:	9301      	str	r3, [sp, #4]
    5e9c:	f7ff f93c 	bl	5118 <__aeabi_uidivmod>
    5ea0:	9801      	ldr	r0, [sp, #4]
    5ea2:	040b      	lsls	r3, r1, #16
    5ea4:	0431      	lsls	r1, r6, #16
    5ea6:	0c09      	lsrs	r1, r1, #16
    5ea8:	4319      	orrs	r1, r3
    5eaa:	4288      	cmp	r0, r1
    5eac:	d90d      	bls.n	5eca <__aeabi_ddiv+0x38a>
    5eae:	4653      	mov	r3, sl
    5eb0:	4441      	add	r1, r8
    5eb2:	3b01      	subs	r3, #1
    5eb4:	4588      	cmp	r8, r1
    5eb6:	d900      	bls.n	5eba <__aeabi_ddiv+0x37a>
    5eb8:	e0e8      	b.n	608c <__aeabi_ddiv+0x54c>
    5eba:	4288      	cmp	r0, r1
    5ebc:	d800      	bhi.n	5ec0 <__aeabi_ddiv+0x380>
    5ebe:	e0e5      	b.n	608c <__aeabi_ddiv+0x54c>
    5ec0:	2302      	movs	r3, #2
    5ec2:	425b      	negs	r3, r3
    5ec4:	469c      	mov	ip, r3
    5ec6:	4441      	add	r1, r8
    5ec8:	44e2      	add	sl, ip
    5eca:	9b01      	ldr	r3, [sp, #4]
    5ecc:	042d      	lsls	r5, r5, #16
    5ece:	1ace      	subs	r6, r1, r3
    5ed0:	4651      	mov	r1, sl
    5ed2:	4329      	orrs	r1, r5
    5ed4:	9d05      	ldr	r5, [sp, #20]
    5ed6:	464f      	mov	r7, r9
    5ed8:	002a      	movs	r2, r5
    5eda:	040b      	lsls	r3, r1, #16
    5edc:	0c08      	lsrs	r0, r1, #16
    5ede:	0c1b      	lsrs	r3, r3, #16
    5ee0:	435a      	muls	r2, r3
    5ee2:	4345      	muls	r5, r0
    5ee4:	437b      	muls	r3, r7
    5ee6:	4378      	muls	r0, r7
    5ee8:	195b      	adds	r3, r3, r5
    5eea:	0c17      	lsrs	r7, r2, #16
    5eec:	18fb      	adds	r3, r7, r3
    5eee:	429d      	cmp	r5, r3
    5ef0:	d903      	bls.n	5efa <__aeabi_ddiv+0x3ba>
    5ef2:	2580      	movs	r5, #128	; 0x80
    5ef4:	026d      	lsls	r5, r5, #9
    5ef6:	46ac      	mov	ip, r5
    5ef8:	4460      	add	r0, ip
    5efa:	0c1d      	lsrs	r5, r3, #16
    5efc:	0412      	lsls	r2, r2, #16
    5efe:	041b      	lsls	r3, r3, #16
    5f00:	0c12      	lsrs	r2, r2, #16
    5f02:	1828      	adds	r0, r5, r0
    5f04:	189b      	adds	r3, r3, r2
    5f06:	4286      	cmp	r6, r0
    5f08:	d200      	bcs.n	5f0c <__aeabi_ddiv+0x3cc>
    5f0a:	e093      	b.n	6034 <__aeabi_ddiv+0x4f4>
    5f0c:	d100      	bne.n	5f10 <__aeabi_ddiv+0x3d0>
    5f0e:	e08e      	b.n	602e <__aeabi_ddiv+0x4ee>
    5f10:	2301      	movs	r3, #1
    5f12:	4319      	orrs	r1, r3
    5f14:	4ba0      	ldr	r3, [pc, #640]	; (6198 <__aeabi_ddiv+0x658>)
    5f16:	18e3      	adds	r3, r4, r3
    5f18:	2b00      	cmp	r3, #0
    5f1a:	dc00      	bgt.n	5f1e <__aeabi_ddiv+0x3de>
    5f1c:	e099      	b.n	6052 <__aeabi_ddiv+0x512>
    5f1e:	074a      	lsls	r2, r1, #29
    5f20:	d000      	beq.n	5f24 <__aeabi_ddiv+0x3e4>
    5f22:	e09e      	b.n	6062 <__aeabi_ddiv+0x522>
    5f24:	465a      	mov	r2, fp
    5f26:	01d2      	lsls	r2, r2, #7
    5f28:	d506      	bpl.n	5f38 <__aeabi_ddiv+0x3f8>
    5f2a:	465a      	mov	r2, fp
    5f2c:	4b9b      	ldr	r3, [pc, #620]	; (619c <__aeabi_ddiv+0x65c>)
    5f2e:	401a      	ands	r2, r3
    5f30:	2380      	movs	r3, #128	; 0x80
    5f32:	4693      	mov	fp, r2
    5f34:	00db      	lsls	r3, r3, #3
    5f36:	18e3      	adds	r3, r4, r3
    5f38:	4a99      	ldr	r2, [pc, #612]	; (61a0 <__aeabi_ddiv+0x660>)
    5f3a:	4293      	cmp	r3, r2
    5f3c:	dd68      	ble.n	6010 <__aeabi_ddiv+0x4d0>
    5f3e:	2301      	movs	r3, #1
    5f40:	9a02      	ldr	r2, [sp, #8]
    5f42:	4c98      	ldr	r4, [pc, #608]	; (61a4 <__aeabi_ddiv+0x664>)
    5f44:	401a      	ands	r2, r3
    5f46:	2300      	movs	r3, #0
    5f48:	4694      	mov	ip, r2
    5f4a:	4698      	mov	r8, r3
    5f4c:	2200      	movs	r2, #0
    5f4e:	e6c5      	b.n	5cdc <__aeabi_ddiv+0x19c>
    5f50:	2280      	movs	r2, #128	; 0x80
    5f52:	464b      	mov	r3, r9
    5f54:	0312      	lsls	r2, r2, #12
    5f56:	4213      	tst	r3, r2
    5f58:	d00a      	beq.n	5f70 <__aeabi_ddiv+0x430>
    5f5a:	465b      	mov	r3, fp
    5f5c:	4213      	tst	r3, r2
    5f5e:	d106      	bne.n	5f6e <__aeabi_ddiv+0x42e>
    5f60:	431a      	orrs	r2, r3
    5f62:	0312      	lsls	r2, r2, #12
    5f64:	0b12      	lsrs	r2, r2, #12
    5f66:	46ac      	mov	ip, r5
    5f68:	4688      	mov	r8, r1
    5f6a:	4c8e      	ldr	r4, [pc, #568]	; (61a4 <__aeabi_ddiv+0x664>)
    5f6c:	e6b6      	b.n	5cdc <__aeabi_ddiv+0x19c>
    5f6e:	464b      	mov	r3, r9
    5f70:	431a      	orrs	r2, r3
    5f72:	0312      	lsls	r2, r2, #12
    5f74:	0b12      	lsrs	r2, r2, #12
    5f76:	46bc      	mov	ip, r7
    5f78:	4c8a      	ldr	r4, [pc, #552]	; (61a4 <__aeabi_ddiv+0x664>)
    5f7a:	e6af      	b.n	5cdc <__aeabi_ddiv+0x19c>
    5f7c:	0003      	movs	r3, r0
    5f7e:	465a      	mov	r2, fp
    5f80:	3b28      	subs	r3, #40	; 0x28
    5f82:	409a      	lsls	r2, r3
    5f84:	2300      	movs	r3, #0
    5f86:	4691      	mov	r9, r2
    5f88:	4698      	mov	r8, r3
    5f8a:	e657      	b.n	5c3c <__aeabi_ddiv+0xfc>
    5f8c:	4658      	mov	r0, fp
    5f8e:	f001 f87f 	bl	7090 <__clzsi2>
    5f92:	3020      	adds	r0, #32
    5f94:	e640      	b.n	5c18 <__aeabi_ddiv+0xd8>
    5f96:	0003      	movs	r3, r0
    5f98:	4652      	mov	r2, sl
    5f9a:	3b28      	subs	r3, #40	; 0x28
    5f9c:	409a      	lsls	r2, r3
    5f9e:	2100      	movs	r1, #0
    5fa0:	4693      	mov	fp, r2
    5fa2:	e677      	b.n	5c94 <__aeabi_ddiv+0x154>
    5fa4:	f001 f874 	bl	7090 <__clzsi2>
    5fa8:	3020      	adds	r0, #32
    5faa:	e65f      	b.n	5c6c <__aeabi_ddiv+0x12c>
    5fac:	4588      	cmp	r8, r1
    5fae:	d200      	bcs.n	5fb2 <__aeabi_ddiv+0x472>
    5fb0:	e6c7      	b.n	5d42 <__aeabi_ddiv+0x202>
    5fb2:	464b      	mov	r3, r9
    5fb4:	07de      	lsls	r6, r3, #31
    5fb6:	085d      	lsrs	r5, r3, #1
    5fb8:	4643      	mov	r3, r8
    5fba:	085b      	lsrs	r3, r3, #1
    5fbc:	431e      	orrs	r6, r3
    5fbe:	4643      	mov	r3, r8
    5fc0:	07db      	lsls	r3, r3, #31
    5fc2:	469a      	mov	sl, r3
    5fc4:	e6c2      	b.n	5d4c <__aeabi_ddiv+0x20c>
    5fc6:	2500      	movs	r5, #0
    5fc8:	4592      	cmp	sl, r2
    5fca:	d300      	bcc.n	5fce <__aeabi_ddiv+0x48e>
    5fcc:	e733      	b.n	5e36 <__aeabi_ddiv+0x2f6>
    5fce:	9e03      	ldr	r6, [sp, #12]
    5fd0:	4659      	mov	r1, fp
    5fd2:	46b4      	mov	ip, r6
    5fd4:	44e2      	add	sl, ip
    5fd6:	45b2      	cmp	sl, r6
    5fd8:	41ad      	sbcs	r5, r5
    5fda:	426d      	negs	r5, r5
    5fdc:	4445      	add	r5, r8
    5fde:	18eb      	adds	r3, r5, r3
    5fe0:	3901      	subs	r1, #1
    5fe2:	4598      	cmp	r8, r3
    5fe4:	d207      	bcs.n	5ff6 <__aeabi_ddiv+0x4b6>
    5fe6:	4298      	cmp	r0, r3
    5fe8:	d900      	bls.n	5fec <__aeabi_ddiv+0x4ac>
    5fea:	e07f      	b.n	60ec <__aeabi_ddiv+0x5ac>
    5fec:	d100      	bne.n	5ff0 <__aeabi_ddiv+0x4b0>
    5fee:	e0bc      	b.n	616a <__aeabi_ddiv+0x62a>
    5ff0:	1a1d      	subs	r5, r3, r0
    5ff2:	468b      	mov	fp, r1
    5ff4:	e71f      	b.n	5e36 <__aeabi_ddiv+0x2f6>
    5ff6:	4598      	cmp	r8, r3
    5ff8:	d1fa      	bne.n	5ff0 <__aeabi_ddiv+0x4b0>
    5ffa:	9d03      	ldr	r5, [sp, #12]
    5ffc:	4555      	cmp	r5, sl
    5ffe:	d9f2      	bls.n	5fe6 <__aeabi_ddiv+0x4a6>
    6000:	4643      	mov	r3, r8
    6002:	468b      	mov	fp, r1
    6004:	1a1d      	subs	r5, r3, r0
    6006:	e716      	b.n	5e36 <__aeabi_ddiv+0x2f6>
    6008:	469b      	mov	fp, r3
    600a:	e6ca      	b.n	5da2 <__aeabi_ddiv+0x262>
    600c:	0015      	movs	r5, r2
    600e:	e6e7      	b.n	5de0 <__aeabi_ddiv+0x2a0>
    6010:	465a      	mov	r2, fp
    6012:	08c9      	lsrs	r1, r1, #3
    6014:	0752      	lsls	r2, r2, #29
    6016:	430a      	orrs	r2, r1
    6018:	055b      	lsls	r3, r3, #21
    601a:	4690      	mov	r8, r2
    601c:	0d5c      	lsrs	r4, r3, #21
    601e:	465a      	mov	r2, fp
    6020:	2301      	movs	r3, #1
    6022:	9902      	ldr	r1, [sp, #8]
    6024:	0252      	lsls	r2, r2, #9
    6026:	4019      	ands	r1, r3
    6028:	0b12      	lsrs	r2, r2, #12
    602a:	468c      	mov	ip, r1
    602c:	e656      	b.n	5cdc <__aeabi_ddiv+0x19c>
    602e:	2b00      	cmp	r3, #0
    6030:	d100      	bne.n	6034 <__aeabi_ddiv+0x4f4>
    6032:	e76f      	b.n	5f14 <__aeabi_ddiv+0x3d4>
    6034:	4446      	add	r6, r8
    6036:	1e4a      	subs	r2, r1, #1
    6038:	45b0      	cmp	r8, r6
    603a:	d929      	bls.n	6090 <__aeabi_ddiv+0x550>
    603c:	0011      	movs	r1, r2
    603e:	4286      	cmp	r6, r0
    6040:	d000      	beq.n	6044 <__aeabi_ddiv+0x504>
    6042:	e765      	b.n	5f10 <__aeabi_ddiv+0x3d0>
    6044:	9a03      	ldr	r2, [sp, #12]
    6046:	4293      	cmp	r3, r2
    6048:	d000      	beq.n	604c <__aeabi_ddiv+0x50c>
    604a:	e761      	b.n	5f10 <__aeabi_ddiv+0x3d0>
    604c:	e762      	b.n	5f14 <__aeabi_ddiv+0x3d4>
    604e:	2101      	movs	r1, #1
    6050:	4249      	negs	r1, r1
    6052:	2001      	movs	r0, #1
    6054:	1ac2      	subs	r2, r0, r3
    6056:	2a38      	cmp	r2, #56	; 0x38
    6058:	dd21      	ble.n	609e <__aeabi_ddiv+0x55e>
    605a:	9b02      	ldr	r3, [sp, #8]
    605c:	4003      	ands	r3, r0
    605e:	469c      	mov	ip, r3
    6060:	e638      	b.n	5cd4 <__aeabi_ddiv+0x194>
    6062:	220f      	movs	r2, #15
    6064:	400a      	ands	r2, r1
    6066:	2a04      	cmp	r2, #4
    6068:	d100      	bne.n	606c <__aeabi_ddiv+0x52c>
    606a:	e75b      	b.n	5f24 <__aeabi_ddiv+0x3e4>
    606c:	000a      	movs	r2, r1
    606e:	1d11      	adds	r1, r2, #4
    6070:	4291      	cmp	r1, r2
    6072:	4192      	sbcs	r2, r2
    6074:	4252      	negs	r2, r2
    6076:	4493      	add	fp, r2
    6078:	e754      	b.n	5f24 <__aeabi_ddiv+0x3e4>
    607a:	4b47      	ldr	r3, [pc, #284]	; (6198 <__aeabi_ddiv+0x658>)
    607c:	18e3      	adds	r3, r4, r3
    607e:	2b00      	cmp	r3, #0
    6080:	dde5      	ble.n	604e <__aeabi_ddiv+0x50e>
    6082:	2201      	movs	r2, #1
    6084:	4252      	negs	r2, r2
    6086:	e7f2      	b.n	606e <__aeabi_ddiv+0x52e>
    6088:	001d      	movs	r5, r3
    608a:	e6fa      	b.n	5e82 <__aeabi_ddiv+0x342>
    608c:	469a      	mov	sl, r3
    608e:	e71c      	b.n	5eca <__aeabi_ddiv+0x38a>
    6090:	42b0      	cmp	r0, r6
    6092:	d839      	bhi.n	6108 <__aeabi_ddiv+0x5c8>
    6094:	d06e      	beq.n	6174 <__aeabi_ddiv+0x634>
    6096:	0011      	movs	r1, r2
    6098:	e73a      	b.n	5f10 <__aeabi_ddiv+0x3d0>
    609a:	9302      	str	r3, [sp, #8]
    609c:	e73a      	b.n	5f14 <__aeabi_ddiv+0x3d4>
    609e:	2a1f      	cmp	r2, #31
    60a0:	dc3c      	bgt.n	611c <__aeabi_ddiv+0x5dc>
    60a2:	2320      	movs	r3, #32
    60a4:	1a9b      	subs	r3, r3, r2
    60a6:	000c      	movs	r4, r1
    60a8:	4658      	mov	r0, fp
    60aa:	4099      	lsls	r1, r3
    60ac:	4098      	lsls	r0, r3
    60ae:	1e4b      	subs	r3, r1, #1
    60b0:	4199      	sbcs	r1, r3
    60b2:	465b      	mov	r3, fp
    60b4:	40d4      	lsrs	r4, r2
    60b6:	40d3      	lsrs	r3, r2
    60b8:	4320      	orrs	r0, r4
    60ba:	4308      	orrs	r0, r1
    60bc:	001a      	movs	r2, r3
    60be:	0743      	lsls	r3, r0, #29
    60c0:	d009      	beq.n	60d6 <__aeabi_ddiv+0x596>
    60c2:	230f      	movs	r3, #15
    60c4:	4003      	ands	r3, r0
    60c6:	2b04      	cmp	r3, #4
    60c8:	d005      	beq.n	60d6 <__aeabi_ddiv+0x596>
    60ca:	0001      	movs	r1, r0
    60cc:	1d08      	adds	r0, r1, #4
    60ce:	4288      	cmp	r0, r1
    60d0:	419b      	sbcs	r3, r3
    60d2:	425b      	negs	r3, r3
    60d4:	18d2      	adds	r2, r2, r3
    60d6:	0213      	lsls	r3, r2, #8
    60d8:	d53a      	bpl.n	6150 <__aeabi_ddiv+0x610>
    60da:	2301      	movs	r3, #1
    60dc:	9a02      	ldr	r2, [sp, #8]
    60de:	2401      	movs	r4, #1
    60e0:	401a      	ands	r2, r3
    60e2:	2300      	movs	r3, #0
    60e4:	4694      	mov	ip, r2
    60e6:	4698      	mov	r8, r3
    60e8:	2200      	movs	r2, #0
    60ea:	e5f7      	b.n	5cdc <__aeabi_ddiv+0x19c>
    60ec:	2102      	movs	r1, #2
    60ee:	4249      	negs	r1, r1
    60f0:	468c      	mov	ip, r1
    60f2:	9d03      	ldr	r5, [sp, #12]
    60f4:	44e3      	add	fp, ip
    60f6:	46ac      	mov	ip, r5
    60f8:	44e2      	add	sl, ip
    60fa:	45aa      	cmp	sl, r5
    60fc:	41ad      	sbcs	r5, r5
    60fe:	426d      	negs	r5, r5
    6100:	4445      	add	r5, r8
    6102:	18ed      	adds	r5, r5, r3
    6104:	1a2d      	subs	r5, r5, r0
    6106:	e696      	b.n	5e36 <__aeabi_ddiv+0x2f6>
    6108:	1e8a      	subs	r2, r1, #2
    610a:	9903      	ldr	r1, [sp, #12]
    610c:	004d      	lsls	r5, r1, #1
    610e:	428d      	cmp	r5, r1
    6110:	4189      	sbcs	r1, r1
    6112:	4249      	negs	r1, r1
    6114:	4441      	add	r1, r8
    6116:	1876      	adds	r6, r6, r1
    6118:	9503      	str	r5, [sp, #12]
    611a:	e78f      	b.n	603c <__aeabi_ddiv+0x4fc>
    611c:	201f      	movs	r0, #31
    611e:	4240      	negs	r0, r0
    6120:	1ac3      	subs	r3, r0, r3
    6122:	4658      	mov	r0, fp
    6124:	40d8      	lsrs	r0, r3
    6126:	0003      	movs	r3, r0
    6128:	2a20      	cmp	r2, #32
    612a:	d028      	beq.n	617e <__aeabi_ddiv+0x63e>
    612c:	2040      	movs	r0, #64	; 0x40
    612e:	465d      	mov	r5, fp
    6130:	1a82      	subs	r2, r0, r2
    6132:	4095      	lsls	r5, r2
    6134:	4329      	orrs	r1, r5
    6136:	1e4a      	subs	r2, r1, #1
    6138:	4191      	sbcs	r1, r2
    613a:	4319      	orrs	r1, r3
    613c:	2307      	movs	r3, #7
    613e:	2200      	movs	r2, #0
    6140:	400b      	ands	r3, r1
    6142:	d009      	beq.n	6158 <__aeabi_ddiv+0x618>
    6144:	230f      	movs	r3, #15
    6146:	2200      	movs	r2, #0
    6148:	400b      	ands	r3, r1
    614a:	0008      	movs	r0, r1
    614c:	2b04      	cmp	r3, #4
    614e:	d1bd      	bne.n	60cc <__aeabi_ddiv+0x58c>
    6150:	0001      	movs	r1, r0
    6152:	0753      	lsls	r3, r2, #29
    6154:	0252      	lsls	r2, r2, #9
    6156:	0b12      	lsrs	r2, r2, #12
    6158:	08c9      	lsrs	r1, r1, #3
    615a:	4319      	orrs	r1, r3
    615c:	2301      	movs	r3, #1
    615e:	4688      	mov	r8, r1
    6160:	9902      	ldr	r1, [sp, #8]
    6162:	2400      	movs	r4, #0
    6164:	4019      	ands	r1, r3
    6166:	468c      	mov	ip, r1
    6168:	e5b8      	b.n	5cdc <__aeabi_ddiv+0x19c>
    616a:	4552      	cmp	r2, sl
    616c:	d8be      	bhi.n	60ec <__aeabi_ddiv+0x5ac>
    616e:	468b      	mov	fp, r1
    6170:	2500      	movs	r5, #0
    6172:	e660      	b.n	5e36 <__aeabi_ddiv+0x2f6>
    6174:	9d03      	ldr	r5, [sp, #12]
    6176:	429d      	cmp	r5, r3
    6178:	d3c6      	bcc.n	6108 <__aeabi_ddiv+0x5c8>
    617a:	0011      	movs	r1, r2
    617c:	e762      	b.n	6044 <__aeabi_ddiv+0x504>
    617e:	2500      	movs	r5, #0
    6180:	e7d8      	b.n	6134 <__aeabi_ddiv+0x5f4>
    6182:	2280      	movs	r2, #128	; 0x80
    6184:	465b      	mov	r3, fp
    6186:	0312      	lsls	r2, r2, #12
    6188:	431a      	orrs	r2, r3
    618a:	9b01      	ldr	r3, [sp, #4]
    618c:	0312      	lsls	r2, r2, #12
    618e:	0b12      	lsrs	r2, r2, #12
    6190:	469c      	mov	ip, r3
    6192:	4688      	mov	r8, r1
    6194:	4c03      	ldr	r4, [pc, #12]	; (61a4 <__aeabi_ddiv+0x664>)
    6196:	e5a1      	b.n	5cdc <__aeabi_ddiv+0x19c>
    6198:	000003ff 	.word	0x000003ff
    619c:	feffffff 	.word	0xfeffffff
    61a0:	000007fe 	.word	0x000007fe
    61a4:	000007ff 	.word	0x000007ff

000061a8 <__eqdf2>:
    61a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61aa:	464f      	mov	r7, r9
    61ac:	4646      	mov	r6, r8
    61ae:	46d6      	mov	lr, sl
    61b0:	005c      	lsls	r4, r3, #1
    61b2:	b5c0      	push	{r6, r7, lr}
    61b4:	031f      	lsls	r7, r3, #12
    61b6:	0fdb      	lsrs	r3, r3, #31
    61b8:	469a      	mov	sl, r3
    61ba:	4b17      	ldr	r3, [pc, #92]	; (6218 <__eqdf2+0x70>)
    61bc:	030e      	lsls	r6, r1, #12
    61be:	004d      	lsls	r5, r1, #1
    61c0:	4684      	mov	ip, r0
    61c2:	4680      	mov	r8, r0
    61c4:	0b36      	lsrs	r6, r6, #12
    61c6:	0d6d      	lsrs	r5, r5, #21
    61c8:	0fc9      	lsrs	r1, r1, #31
    61ca:	4691      	mov	r9, r2
    61cc:	0b3f      	lsrs	r7, r7, #12
    61ce:	0d64      	lsrs	r4, r4, #21
    61d0:	2001      	movs	r0, #1
    61d2:	429d      	cmp	r5, r3
    61d4:	d008      	beq.n	61e8 <__eqdf2+0x40>
    61d6:	429c      	cmp	r4, r3
    61d8:	d001      	beq.n	61de <__eqdf2+0x36>
    61da:	42a5      	cmp	r5, r4
    61dc:	d00b      	beq.n	61f6 <__eqdf2+0x4e>
    61de:	bc1c      	pop	{r2, r3, r4}
    61e0:	4690      	mov	r8, r2
    61e2:	4699      	mov	r9, r3
    61e4:	46a2      	mov	sl, r4
    61e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61e8:	4663      	mov	r3, ip
    61ea:	4333      	orrs	r3, r6
    61ec:	d1f7      	bne.n	61de <__eqdf2+0x36>
    61ee:	42ac      	cmp	r4, r5
    61f0:	d1f5      	bne.n	61de <__eqdf2+0x36>
    61f2:	433a      	orrs	r2, r7
    61f4:	d1f3      	bne.n	61de <__eqdf2+0x36>
    61f6:	2001      	movs	r0, #1
    61f8:	42be      	cmp	r6, r7
    61fa:	d1f0      	bne.n	61de <__eqdf2+0x36>
    61fc:	45c8      	cmp	r8, r9
    61fe:	d1ee      	bne.n	61de <__eqdf2+0x36>
    6200:	4551      	cmp	r1, sl
    6202:	d007      	beq.n	6214 <__eqdf2+0x6c>
    6204:	2d00      	cmp	r5, #0
    6206:	d1ea      	bne.n	61de <__eqdf2+0x36>
    6208:	4663      	mov	r3, ip
    620a:	431e      	orrs	r6, r3
    620c:	0030      	movs	r0, r6
    620e:	1e46      	subs	r6, r0, #1
    6210:	41b0      	sbcs	r0, r6
    6212:	e7e4      	b.n	61de <__eqdf2+0x36>
    6214:	2000      	movs	r0, #0
    6216:	e7e2      	b.n	61de <__eqdf2+0x36>
    6218:	000007ff 	.word	0x000007ff

0000621c <__gedf2>:
    621c:	b5f0      	push	{r4, r5, r6, r7, lr}
    621e:	4645      	mov	r5, r8
    6220:	46de      	mov	lr, fp
    6222:	4657      	mov	r7, sl
    6224:	464e      	mov	r6, r9
    6226:	b5e0      	push	{r5, r6, r7, lr}
    6228:	031f      	lsls	r7, r3, #12
    622a:	0b3d      	lsrs	r5, r7, #12
    622c:	4f2c      	ldr	r7, [pc, #176]	; (62e0 <__gedf2+0xc4>)
    622e:	030e      	lsls	r6, r1, #12
    6230:	004c      	lsls	r4, r1, #1
    6232:	46ab      	mov	fp, r5
    6234:	005d      	lsls	r5, r3, #1
    6236:	4684      	mov	ip, r0
    6238:	0b36      	lsrs	r6, r6, #12
    623a:	0d64      	lsrs	r4, r4, #21
    623c:	0fc9      	lsrs	r1, r1, #31
    623e:	4690      	mov	r8, r2
    6240:	0d6d      	lsrs	r5, r5, #21
    6242:	0fdb      	lsrs	r3, r3, #31
    6244:	42bc      	cmp	r4, r7
    6246:	d02a      	beq.n	629e <__gedf2+0x82>
    6248:	4f25      	ldr	r7, [pc, #148]	; (62e0 <__gedf2+0xc4>)
    624a:	42bd      	cmp	r5, r7
    624c:	d02d      	beq.n	62aa <__gedf2+0x8e>
    624e:	2c00      	cmp	r4, #0
    6250:	d10f      	bne.n	6272 <__gedf2+0x56>
    6252:	4330      	orrs	r0, r6
    6254:	0007      	movs	r7, r0
    6256:	4681      	mov	r9, r0
    6258:	4278      	negs	r0, r7
    625a:	4178      	adcs	r0, r7
    625c:	b2c0      	uxtb	r0, r0
    625e:	2d00      	cmp	r5, #0
    6260:	d117      	bne.n	6292 <__gedf2+0x76>
    6262:	465f      	mov	r7, fp
    6264:	433a      	orrs	r2, r7
    6266:	d114      	bne.n	6292 <__gedf2+0x76>
    6268:	464b      	mov	r3, r9
    626a:	2000      	movs	r0, #0
    626c:	2b00      	cmp	r3, #0
    626e:	d00a      	beq.n	6286 <__gedf2+0x6a>
    6270:	e006      	b.n	6280 <__gedf2+0x64>
    6272:	2d00      	cmp	r5, #0
    6274:	d102      	bne.n	627c <__gedf2+0x60>
    6276:	4658      	mov	r0, fp
    6278:	4302      	orrs	r2, r0
    627a:	d001      	beq.n	6280 <__gedf2+0x64>
    627c:	4299      	cmp	r1, r3
    627e:	d018      	beq.n	62b2 <__gedf2+0x96>
    6280:	4248      	negs	r0, r1
    6282:	2101      	movs	r1, #1
    6284:	4308      	orrs	r0, r1
    6286:	bc3c      	pop	{r2, r3, r4, r5}
    6288:	4690      	mov	r8, r2
    628a:	4699      	mov	r9, r3
    628c:	46a2      	mov	sl, r4
    628e:	46ab      	mov	fp, r5
    6290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6292:	2800      	cmp	r0, #0
    6294:	d0f2      	beq.n	627c <__gedf2+0x60>
    6296:	2001      	movs	r0, #1
    6298:	3b01      	subs	r3, #1
    629a:	4318      	orrs	r0, r3
    629c:	e7f3      	b.n	6286 <__gedf2+0x6a>
    629e:	0037      	movs	r7, r6
    62a0:	4307      	orrs	r7, r0
    62a2:	d0d1      	beq.n	6248 <__gedf2+0x2c>
    62a4:	2002      	movs	r0, #2
    62a6:	4240      	negs	r0, r0
    62a8:	e7ed      	b.n	6286 <__gedf2+0x6a>
    62aa:	465f      	mov	r7, fp
    62ac:	4317      	orrs	r7, r2
    62ae:	d0ce      	beq.n	624e <__gedf2+0x32>
    62b0:	e7f8      	b.n	62a4 <__gedf2+0x88>
    62b2:	42ac      	cmp	r4, r5
    62b4:	dce4      	bgt.n	6280 <__gedf2+0x64>
    62b6:	da03      	bge.n	62c0 <__gedf2+0xa4>
    62b8:	1e48      	subs	r0, r1, #1
    62ba:	2101      	movs	r1, #1
    62bc:	4308      	orrs	r0, r1
    62be:	e7e2      	b.n	6286 <__gedf2+0x6a>
    62c0:	455e      	cmp	r6, fp
    62c2:	d8dd      	bhi.n	6280 <__gedf2+0x64>
    62c4:	d006      	beq.n	62d4 <__gedf2+0xb8>
    62c6:	2000      	movs	r0, #0
    62c8:	455e      	cmp	r6, fp
    62ca:	d2dc      	bcs.n	6286 <__gedf2+0x6a>
    62cc:	2301      	movs	r3, #1
    62ce:	1e48      	subs	r0, r1, #1
    62d0:	4318      	orrs	r0, r3
    62d2:	e7d8      	b.n	6286 <__gedf2+0x6a>
    62d4:	45c4      	cmp	ip, r8
    62d6:	d8d3      	bhi.n	6280 <__gedf2+0x64>
    62d8:	2000      	movs	r0, #0
    62da:	45c4      	cmp	ip, r8
    62dc:	d3f6      	bcc.n	62cc <__gedf2+0xb0>
    62de:	e7d2      	b.n	6286 <__gedf2+0x6a>
    62e0:	000007ff 	.word	0x000007ff

000062e4 <__ledf2>:
    62e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62e6:	464e      	mov	r6, r9
    62e8:	4645      	mov	r5, r8
    62ea:	46de      	mov	lr, fp
    62ec:	4657      	mov	r7, sl
    62ee:	005c      	lsls	r4, r3, #1
    62f0:	b5e0      	push	{r5, r6, r7, lr}
    62f2:	031f      	lsls	r7, r3, #12
    62f4:	0fdb      	lsrs	r3, r3, #31
    62f6:	4699      	mov	r9, r3
    62f8:	4b2a      	ldr	r3, [pc, #168]	; (63a4 <__ledf2+0xc0>)
    62fa:	030e      	lsls	r6, r1, #12
    62fc:	004d      	lsls	r5, r1, #1
    62fe:	0fc9      	lsrs	r1, r1, #31
    6300:	4684      	mov	ip, r0
    6302:	0b36      	lsrs	r6, r6, #12
    6304:	0d6d      	lsrs	r5, r5, #21
    6306:	468b      	mov	fp, r1
    6308:	4690      	mov	r8, r2
    630a:	0b3f      	lsrs	r7, r7, #12
    630c:	0d64      	lsrs	r4, r4, #21
    630e:	429d      	cmp	r5, r3
    6310:	d020      	beq.n	6354 <__ledf2+0x70>
    6312:	4b24      	ldr	r3, [pc, #144]	; (63a4 <__ledf2+0xc0>)
    6314:	429c      	cmp	r4, r3
    6316:	d022      	beq.n	635e <__ledf2+0x7a>
    6318:	2d00      	cmp	r5, #0
    631a:	d112      	bne.n	6342 <__ledf2+0x5e>
    631c:	4330      	orrs	r0, r6
    631e:	4243      	negs	r3, r0
    6320:	4143      	adcs	r3, r0
    6322:	b2db      	uxtb	r3, r3
    6324:	2c00      	cmp	r4, #0
    6326:	d01f      	beq.n	6368 <__ledf2+0x84>
    6328:	2b00      	cmp	r3, #0
    632a:	d00c      	beq.n	6346 <__ledf2+0x62>
    632c:	464b      	mov	r3, r9
    632e:	2001      	movs	r0, #1
    6330:	3b01      	subs	r3, #1
    6332:	4303      	orrs	r3, r0
    6334:	0018      	movs	r0, r3
    6336:	bc3c      	pop	{r2, r3, r4, r5}
    6338:	4690      	mov	r8, r2
    633a:	4699      	mov	r9, r3
    633c:	46a2      	mov	sl, r4
    633e:	46ab      	mov	fp, r5
    6340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6342:	2c00      	cmp	r4, #0
    6344:	d016      	beq.n	6374 <__ledf2+0x90>
    6346:	45cb      	cmp	fp, r9
    6348:	d017      	beq.n	637a <__ledf2+0x96>
    634a:	465b      	mov	r3, fp
    634c:	4259      	negs	r1, r3
    634e:	2301      	movs	r3, #1
    6350:	430b      	orrs	r3, r1
    6352:	e7ef      	b.n	6334 <__ledf2+0x50>
    6354:	0031      	movs	r1, r6
    6356:	2302      	movs	r3, #2
    6358:	4301      	orrs	r1, r0
    635a:	d1eb      	bne.n	6334 <__ledf2+0x50>
    635c:	e7d9      	b.n	6312 <__ledf2+0x2e>
    635e:	0039      	movs	r1, r7
    6360:	2302      	movs	r3, #2
    6362:	4311      	orrs	r1, r2
    6364:	d1e6      	bne.n	6334 <__ledf2+0x50>
    6366:	e7d7      	b.n	6318 <__ledf2+0x34>
    6368:	433a      	orrs	r2, r7
    636a:	d1dd      	bne.n	6328 <__ledf2+0x44>
    636c:	2300      	movs	r3, #0
    636e:	2800      	cmp	r0, #0
    6370:	d0e0      	beq.n	6334 <__ledf2+0x50>
    6372:	e7ea      	b.n	634a <__ledf2+0x66>
    6374:	433a      	orrs	r2, r7
    6376:	d1e6      	bne.n	6346 <__ledf2+0x62>
    6378:	e7e7      	b.n	634a <__ledf2+0x66>
    637a:	42a5      	cmp	r5, r4
    637c:	dce5      	bgt.n	634a <__ledf2+0x66>
    637e:	db05      	blt.n	638c <__ledf2+0xa8>
    6380:	42be      	cmp	r6, r7
    6382:	d8e2      	bhi.n	634a <__ledf2+0x66>
    6384:	d007      	beq.n	6396 <__ledf2+0xb2>
    6386:	2300      	movs	r3, #0
    6388:	42be      	cmp	r6, r7
    638a:	d2d3      	bcs.n	6334 <__ledf2+0x50>
    638c:	4659      	mov	r1, fp
    638e:	2301      	movs	r3, #1
    6390:	3901      	subs	r1, #1
    6392:	430b      	orrs	r3, r1
    6394:	e7ce      	b.n	6334 <__ledf2+0x50>
    6396:	45c4      	cmp	ip, r8
    6398:	d8d7      	bhi.n	634a <__ledf2+0x66>
    639a:	2300      	movs	r3, #0
    639c:	45c4      	cmp	ip, r8
    639e:	d3f5      	bcc.n	638c <__ledf2+0xa8>
    63a0:	e7c8      	b.n	6334 <__ledf2+0x50>
    63a2:	46c0      	nop			; (mov r8, r8)
    63a4:	000007ff 	.word	0x000007ff

000063a8 <__aeabi_dmul>:
    63a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63aa:	4657      	mov	r7, sl
    63ac:	4645      	mov	r5, r8
    63ae:	46de      	mov	lr, fp
    63b0:	464e      	mov	r6, r9
    63b2:	b5e0      	push	{r5, r6, r7, lr}
    63b4:	030c      	lsls	r4, r1, #12
    63b6:	4698      	mov	r8, r3
    63b8:	004e      	lsls	r6, r1, #1
    63ba:	0b23      	lsrs	r3, r4, #12
    63bc:	b087      	sub	sp, #28
    63be:	0007      	movs	r7, r0
    63c0:	4692      	mov	sl, r2
    63c2:	469b      	mov	fp, r3
    63c4:	0d76      	lsrs	r6, r6, #21
    63c6:	0fcd      	lsrs	r5, r1, #31
    63c8:	2e00      	cmp	r6, #0
    63ca:	d06b      	beq.n	64a4 <__aeabi_dmul+0xfc>
    63cc:	4b6d      	ldr	r3, [pc, #436]	; (6584 <__aeabi_dmul+0x1dc>)
    63ce:	429e      	cmp	r6, r3
    63d0:	d035      	beq.n	643e <__aeabi_dmul+0x96>
    63d2:	2480      	movs	r4, #128	; 0x80
    63d4:	465b      	mov	r3, fp
    63d6:	0f42      	lsrs	r2, r0, #29
    63d8:	0424      	lsls	r4, r4, #16
    63da:	00db      	lsls	r3, r3, #3
    63dc:	4314      	orrs	r4, r2
    63de:	431c      	orrs	r4, r3
    63e0:	00c3      	lsls	r3, r0, #3
    63e2:	4699      	mov	r9, r3
    63e4:	4b68      	ldr	r3, [pc, #416]	; (6588 <__aeabi_dmul+0x1e0>)
    63e6:	46a3      	mov	fp, r4
    63e8:	469c      	mov	ip, r3
    63ea:	2300      	movs	r3, #0
    63ec:	2700      	movs	r7, #0
    63ee:	4466      	add	r6, ip
    63f0:	9302      	str	r3, [sp, #8]
    63f2:	4643      	mov	r3, r8
    63f4:	031c      	lsls	r4, r3, #12
    63f6:	005a      	lsls	r2, r3, #1
    63f8:	0fdb      	lsrs	r3, r3, #31
    63fa:	4650      	mov	r0, sl
    63fc:	0b24      	lsrs	r4, r4, #12
    63fe:	0d52      	lsrs	r2, r2, #21
    6400:	4698      	mov	r8, r3
    6402:	d100      	bne.n	6406 <__aeabi_dmul+0x5e>
    6404:	e076      	b.n	64f4 <__aeabi_dmul+0x14c>
    6406:	4b5f      	ldr	r3, [pc, #380]	; (6584 <__aeabi_dmul+0x1dc>)
    6408:	429a      	cmp	r2, r3
    640a:	d06d      	beq.n	64e8 <__aeabi_dmul+0x140>
    640c:	2380      	movs	r3, #128	; 0x80
    640e:	0f41      	lsrs	r1, r0, #29
    6410:	041b      	lsls	r3, r3, #16
    6412:	430b      	orrs	r3, r1
    6414:	495c      	ldr	r1, [pc, #368]	; (6588 <__aeabi_dmul+0x1e0>)
    6416:	00e4      	lsls	r4, r4, #3
    6418:	468c      	mov	ip, r1
    641a:	431c      	orrs	r4, r3
    641c:	00c3      	lsls	r3, r0, #3
    641e:	2000      	movs	r0, #0
    6420:	4462      	add	r2, ip
    6422:	4641      	mov	r1, r8
    6424:	18b6      	adds	r6, r6, r2
    6426:	4069      	eors	r1, r5
    6428:	1c72      	adds	r2, r6, #1
    642a:	9101      	str	r1, [sp, #4]
    642c:	4694      	mov	ip, r2
    642e:	4307      	orrs	r7, r0
    6430:	2f0f      	cmp	r7, #15
    6432:	d900      	bls.n	6436 <__aeabi_dmul+0x8e>
    6434:	e0b0      	b.n	6598 <__aeabi_dmul+0x1f0>
    6436:	4a55      	ldr	r2, [pc, #340]	; (658c <__aeabi_dmul+0x1e4>)
    6438:	00bf      	lsls	r7, r7, #2
    643a:	59d2      	ldr	r2, [r2, r7]
    643c:	4697      	mov	pc, r2
    643e:	465b      	mov	r3, fp
    6440:	4303      	orrs	r3, r0
    6442:	4699      	mov	r9, r3
    6444:	d000      	beq.n	6448 <__aeabi_dmul+0xa0>
    6446:	e087      	b.n	6558 <__aeabi_dmul+0x1b0>
    6448:	2300      	movs	r3, #0
    644a:	469b      	mov	fp, r3
    644c:	3302      	adds	r3, #2
    644e:	2708      	movs	r7, #8
    6450:	9302      	str	r3, [sp, #8]
    6452:	e7ce      	b.n	63f2 <__aeabi_dmul+0x4a>
    6454:	4642      	mov	r2, r8
    6456:	9201      	str	r2, [sp, #4]
    6458:	2802      	cmp	r0, #2
    645a:	d067      	beq.n	652c <__aeabi_dmul+0x184>
    645c:	2803      	cmp	r0, #3
    645e:	d100      	bne.n	6462 <__aeabi_dmul+0xba>
    6460:	e20e      	b.n	6880 <__aeabi_dmul+0x4d8>
    6462:	2801      	cmp	r0, #1
    6464:	d000      	beq.n	6468 <__aeabi_dmul+0xc0>
    6466:	e162      	b.n	672e <__aeabi_dmul+0x386>
    6468:	2300      	movs	r3, #0
    646a:	2400      	movs	r4, #0
    646c:	2200      	movs	r2, #0
    646e:	4699      	mov	r9, r3
    6470:	9901      	ldr	r1, [sp, #4]
    6472:	4001      	ands	r1, r0
    6474:	b2cd      	uxtb	r5, r1
    6476:	2100      	movs	r1, #0
    6478:	0312      	lsls	r2, r2, #12
    647a:	0d0b      	lsrs	r3, r1, #20
    647c:	0b12      	lsrs	r2, r2, #12
    647e:	051b      	lsls	r3, r3, #20
    6480:	4313      	orrs	r3, r2
    6482:	4a43      	ldr	r2, [pc, #268]	; (6590 <__aeabi_dmul+0x1e8>)
    6484:	0524      	lsls	r4, r4, #20
    6486:	4013      	ands	r3, r2
    6488:	431c      	orrs	r4, r3
    648a:	0064      	lsls	r4, r4, #1
    648c:	07ed      	lsls	r5, r5, #31
    648e:	0864      	lsrs	r4, r4, #1
    6490:	432c      	orrs	r4, r5
    6492:	4648      	mov	r0, r9
    6494:	0021      	movs	r1, r4
    6496:	b007      	add	sp, #28
    6498:	bc3c      	pop	{r2, r3, r4, r5}
    649a:	4690      	mov	r8, r2
    649c:	4699      	mov	r9, r3
    649e:	46a2      	mov	sl, r4
    64a0:	46ab      	mov	fp, r5
    64a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64a4:	4303      	orrs	r3, r0
    64a6:	4699      	mov	r9, r3
    64a8:	d04f      	beq.n	654a <__aeabi_dmul+0x1a2>
    64aa:	465b      	mov	r3, fp
    64ac:	2b00      	cmp	r3, #0
    64ae:	d100      	bne.n	64b2 <__aeabi_dmul+0x10a>
    64b0:	e189      	b.n	67c6 <__aeabi_dmul+0x41e>
    64b2:	4658      	mov	r0, fp
    64b4:	f000 fdec 	bl	7090 <__clzsi2>
    64b8:	0003      	movs	r3, r0
    64ba:	3b0b      	subs	r3, #11
    64bc:	2b1c      	cmp	r3, #28
    64be:	dd00      	ble.n	64c2 <__aeabi_dmul+0x11a>
    64c0:	e17a      	b.n	67b8 <__aeabi_dmul+0x410>
    64c2:	221d      	movs	r2, #29
    64c4:	1ad3      	subs	r3, r2, r3
    64c6:	003a      	movs	r2, r7
    64c8:	0001      	movs	r1, r0
    64ca:	465c      	mov	r4, fp
    64cc:	40da      	lsrs	r2, r3
    64ce:	3908      	subs	r1, #8
    64d0:	408c      	lsls	r4, r1
    64d2:	0013      	movs	r3, r2
    64d4:	408f      	lsls	r7, r1
    64d6:	4323      	orrs	r3, r4
    64d8:	469b      	mov	fp, r3
    64da:	46b9      	mov	r9, r7
    64dc:	2300      	movs	r3, #0
    64de:	4e2d      	ldr	r6, [pc, #180]	; (6594 <__aeabi_dmul+0x1ec>)
    64e0:	2700      	movs	r7, #0
    64e2:	1a36      	subs	r6, r6, r0
    64e4:	9302      	str	r3, [sp, #8]
    64e6:	e784      	b.n	63f2 <__aeabi_dmul+0x4a>
    64e8:	4653      	mov	r3, sl
    64ea:	4323      	orrs	r3, r4
    64ec:	d12a      	bne.n	6544 <__aeabi_dmul+0x19c>
    64ee:	2400      	movs	r4, #0
    64f0:	2002      	movs	r0, #2
    64f2:	e796      	b.n	6422 <__aeabi_dmul+0x7a>
    64f4:	4653      	mov	r3, sl
    64f6:	4323      	orrs	r3, r4
    64f8:	d020      	beq.n	653c <__aeabi_dmul+0x194>
    64fa:	2c00      	cmp	r4, #0
    64fc:	d100      	bne.n	6500 <__aeabi_dmul+0x158>
    64fe:	e157      	b.n	67b0 <__aeabi_dmul+0x408>
    6500:	0020      	movs	r0, r4
    6502:	f000 fdc5 	bl	7090 <__clzsi2>
    6506:	0003      	movs	r3, r0
    6508:	3b0b      	subs	r3, #11
    650a:	2b1c      	cmp	r3, #28
    650c:	dd00      	ble.n	6510 <__aeabi_dmul+0x168>
    650e:	e149      	b.n	67a4 <__aeabi_dmul+0x3fc>
    6510:	211d      	movs	r1, #29
    6512:	1acb      	subs	r3, r1, r3
    6514:	4651      	mov	r1, sl
    6516:	0002      	movs	r2, r0
    6518:	40d9      	lsrs	r1, r3
    651a:	4653      	mov	r3, sl
    651c:	3a08      	subs	r2, #8
    651e:	4094      	lsls	r4, r2
    6520:	4093      	lsls	r3, r2
    6522:	430c      	orrs	r4, r1
    6524:	4a1b      	ldr	r2, [pc, #108]	; (6594 <__aeabi_dmul+0x1ec>)
    6526:	1a12      	subs	r2, r2, r0
    6528:	2000      	movs	r0, #0
    652a:	e77a      	b.n	6422 <__aeabi_dmul+0x7a>
    652c:	2501      	movs	r5, #1
    652e:	9b01      	ldr	r3, [sp, #4]
    6530:	4c14      	ldr	r4, [pc, #80]	; (6584 <__aeabi_dmul+0x1dc>)
    6532:	401d      	ands	r5, r3
    6534:	2300      	movs	r3, #0
    6536:	2200      	movs	r2, #0
    6538:	4699      	mov	r9, r3
    653a:	e79c      	b.n	6476 <__aeabi_dmul+0xce>
    653c:	2400      	movs	r4, #0
    653e:	2200      	movs	r2, #0
    6540:	2001      	movs	r0, #1
    6542:	e76e      	b.n	6422 <__aeabi_dmul+0x7a>
    6544:	4653      	mov	r3, sl
    6546:	2003      	movs	r0, #3
    6548:	e76b      	b.n	6422 <__aeabi_dmul+0x7a>
    654a:	2300      	movs	r3, #0
    654c:	469b      	mov	fp, r3
    654e:	3301      	adds	r3, #1
    6550:	2704      	movs	r7, #4
    6552:	2600      	movs	r6, #0
    6554:	9302      	str	r3, [sp, #8]
    6556:	e74c      	b.n	63f2 <__aeabi_dmul+0x4a>
    6558:	2303      	movs	r3, #3
    655a:	4681      	mov	r9, r0
    655c:	270c      	movs	r7, #12
    655e:	9302      	str	r3, [sp, #8]
    6560:	e747      	b.n	63f2 <__aeabi_dmul+0x4a>
    6562:	2280      	movs	r2, #128	; 0x80
    6564:	2300      	movs	r3, #0
    6566:	2500      	movs	r5, #0
    6568:	0312      	lsls	r2, r2, #12
    656a:	4699      	mov	r9, r3
    656c:	4c05      	ldr	r4, [pc, #20]	; (6584 <__aeabi_dmul+0x1dc>)
    656e:	e782      	b.n	6476 <__aeabi_dmul+0xce>
    6570:	465c      	mov	r4, fp
    6572:	464b      	mov	r3, r9
    6574:	9802      	ldr	r0, [sp, #8]
    6576:	e76f      	b.n	6458 <__aeabi_dmul+0xb0>
    6578:	465c      	mov	r4, fp
    657a:	464b      	mov	r3, r9
    657c:	9501      	str	r5, [sp, #4]
    657e:	9802      	ldr	r0, [sp, #8]
    6580:	e76a      	b.n	6458 <__aeabi_dmul+0xb0>
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	000007ff 	.word	0x000007ff
    6588:	fffffc01 	.word	0xfffffc01
    658c:	000077e8 	.word	0x000077e8
    6590:	800fffff 	.word	0x800fffff
    6594:	fffffc0d 	.word	0xfffffc0d
    6598:	464a      	mov	r2, r9
    659a:	4649      	mov	r1, r9
    659c:	0c17      	lsrs	r7, r2, #16
    659e:	0c1a      	lsrs	r2, r3, #16
    65a0:	041b      	lsls	r3, r3, #16
    65a2:	0c1b      	lsrs	r3, r3, #16
    65a4:	0408      	lsls	r0, r1, #16
    65a6:	0019      	movs	r1, r3
    65a8:	0c00      	lsrs	r0, r0, #16
    65aa:	4341      	muls	r1, r0
    65ac:	0015      	movs	r5, r2
    65ae:	4688      	mov	r8, r1
    65b0:	0019      	movs	r1, r3
    65b2:	437d      	muls	r5, r7
    65b4:	4379      	muls	r1, r7
    65b6:	9503      	str	r5, [sp, #12]
    65b8:	4689      	mov	r9, r1
    65ba:	0029      	movs	r1, r5
    65bc:	0015      	movs	r5, r2
    65be:	4345      	muls	r5, r0
    65c0:	444d      	add	r5, r9
    65c2:	9502      	str	r5, [sp, #8]
    65c4:	4645      	mov	r5, r8
    65c6:	0c2d      	lsrs	r5, r5, #16
    65c8:	46aa      	mov	sl, r5
    65ca:	9d02      	ldr	r5, [sp, #8]
    65cc:	4455      	add	r5, sl
    65ce:	45a9      	cmp	r9, r5
    65d0:	d906      	bls.n	65e0 <__aeabi_dmul+0x238>
    65d2:	468a      	mov	sl, r1
    65d4:	2180      	movs	r1, #128	; 0x80
    65d6:	0249      	lsls	r1, r1, #9
    65d8:	4689      	mov	r9, r1
    65da:	44ca      	add	sl, r9
    65dc:	4651      	mov	r1, sl
    65de:	9103      	str	r1, [sp, #12]
    65e0:	0c29      	lsrs	r1, r5, #16
    65e2:	9104      	str	r1, [sp, #16]
    65e4:	4641      	mov	r1, r8
    65e6:	0409      	lsls	r1, r1, #16
    65e8:	042d      	lsls	r5, r5, #16
    65ea:	0c09      	lsrs	r1, r1, #16
    65ec:	4688      	mov	r8, r1
    65ee:	0029      	movs	r1, r5
    65f0:	0c25      	lsrs	r5, r4, #16
    65f2:	0424      	lsls	r4, r4, #16
    65f4:	4441      	add	r1, r8
    65f6:	0c24      	lsrs	r4, r4, #16
    65f8:	9105      	str	r1, [sp, #20]
    65fa:	0021      	movs	r1, r4
    65fc:	4341      	muls	r1, r0
    65fe:	4688      	mov	r8, r1
    6600:	0021      	movs	r1, r4
    6602:	4379      	muls	r1, r7
    6604:	468a      	mov	sl, r1
    6606:	4368      	muls	r0, r5
    6608:	4641      	mov	r1, r8
    660a:	4450      	add	r0, sl
    660c:	4681      	mov	r9, r0
    660e:	0c08      	lsrs	r0, r1, #16
    6610:	4448      	add	r0, r9
    6612:	436f      	muls	r7, r5
    6614:	4582      	cmp	sl, r0
    6616:	d903      	bls.n	6620 <__aeabi_dmul+0x278>
    6618:	2180      	movs	r1, #128	; 0x80
    661a:	0249      	lsls	r1, r1, #9
    661c:	4689      	mov	r9, r1
    661e:	444f      	add	r7, r9
    6620:	0c01      	lsrs	r1, r0, #16
    6622:	4689      	mov	r9, r1
    6624:	0039      	movs	r1, r7
    6626:	4449      	add	r1, r9
    6628:	9102      	str	r1, [sp, #8]
    662a:	4641      	mov	r1, r8
    662c:	040f      	lsls	r7, r1, #16
    662e:	9904      	ldr	r1, [sp, #16]
    6630:	0c3f      	lsrs	r7, r7, #16
    6632:	4688      	mov	r8, r1
    6634:	0400      	lsls	r0, r0, #16
    6636:	19c0      	adds	r0, r0, r7
    6638:	4480      	add	r8, r0
    663a:	4641      	mov	r1, r8
    663c:	9104      	str	r1, [sp, #16]
    663e:	4659      	mov	r1, fp
    6640:	0c0f      	lsrs	r7, r1, #16
    6642:	0409      	lsls	r1, r1, #16
    6644:	0c09      	lsrs	r1, r1, #16
    6646:	4688      	mov	r8, r1
    6648:	4359      	muls	r1, r3
    664a:	468a      	mov	sl, r1
    664c:	0039      	movs	r1, r7
    664e:	4351      	muls	r1, r2
    6650:	4689      	mov	r9, r1
    6652:	4641      	mov	r1, r8
    6654:	434a      	muls	r2, r1
    6656:	4651      	mov	r1, sl
    6658:	0c09      	lsrs	r1, r1, #16
    665a:	468b      	mov	fp, r1
    665c:	437b      	muls	r3, r7
    665e:	18d2      	adds	r2, r2, r3
    6660:	445a      	add	r2, fp
    6662:	4293      	cmp	r3, r2
    6664:	d903      	bls.n	666e <__aeabi_dmul+0x2c6>
    6666:	2380      	movs	r3, #128	; 0x80
    6668:	025b      	lsls	r3, r3, #9
    666a:	469b      	mov	fp, r3
    666c:	44d9      	add	r9, fp
    666e:	4651      	mov	r1, sl
    6670:	0409      	lsls	r1, r1, #16
    6672:	0c09      	lsrs	r1, r1, #16
    6674:	468a      	mov	sl, r1
    6676:	4641      	mov	r1, r8
    6678:	4361      	muls	r1, r4
    667a:	437c      	muls	r4, r7
    667c:	0c13      	lsrs	r3, r2, #16
    667e:	0412      	lsls	r2, r2, #16
    6680:	444b      	add	r3, r9
    6682:	4452      	add	r2, sl
    6684:	46a1      	mov	r9, r4
    6686:	468a      	mov	sl, r1
    6688:	003c      	movs	r4, r7
    668a:	4641      	mov	r1, r8
    668c:	436c      	muls	r4, r5
    668e:	434d      	muls	r5, r1
    6690:	4651      	mov	r1, sl
    6692:	444d      	add	r5, r9
    6694:	0c0f      	lsrs	r7, r1, #16
    6696:	197d      	adds	r5, r7, r5
    6698:	45a9      	cmp	r9, r5
    669a:	d903      	bls.n	66a4 <__aeabi_dmul+0x2fc>
    669c:	2180      	movs	r1, #128	; 0x80
    669e:	0249      	lsls	r1, r1, #9
    66a0:	4688      	mov	r8, r1
    66a2:	4444      	add	r4, r8
    66a4:	9f04      	ldr	r7, [sp, #16]
    66a6:	9903      	ldr	r1, [sp, #12]
    66a8:	46b8      	mov	r8, r7
    66aa:	4441      	add	r1, r8
    66ac:	468b      	mov	fp, r1
    66ae:	4583      	cmp	fp, r0
    66b0:	4180      	sbcs	r0, r0
    66b2:	4241      	negs	r1, r0
    66b4:	4688      	mov	r8, r1
    66b6:	4651      	mov	r1, sl
    66b8:	0408      	lsls	r0, r1, #16
    66ba:	042f      	lsls	r7, r5, #16
    66bc:	0c00      	lsrs	r0, r0, #16
    66be:	183f      	adds	r7, r7, r0
    66c0:	4658      	mov	r0, fp
    66c2:	9902      	ldr	r1, [sp, #8]
    66c4:	1810      	adds	r0, r2, r0
    66c6:	4689      	mov	r9, r1
    66c8:	4290      	cmp	r0, r2
    66ca:	4192      	sbcs	r2, r2
    66cc:	444f      	add	r7, r9
    66ce:	46ba      	mov	sl, r7
    66d0:	4252      	negs	r2, r2
    66d2:	4699      	mov	r9, r3
    66d4:	4693      	mov	fp, r2
    66d6:	44c2      	add	sl, r8
    66d8:	44d1      	add	r9, sl
    66da:	44cb      	add	fp, r9
    66dc:	428f      	cmp	r7, r1
    66de:	41bf      	sbcs	r7, r7
    66e0:	45c2      	cmp	sl, r8
    66e2:	4189      	sbcs	r1, r1
    66e4:	4599      	cmp	r9, r3
    66e6:	419b      	sbcs	r3, r3
    66e8:	4593      	cmp	fp, r2
    66ea:	4192      	sbcs	r2, r2
    66ec:	427f      	negs	r7, r7
    66ee:	4249      	negs	r1, r1
    66f0:	0c2d      	lsrs	r5, r5, #16
    66f2:	4252      	negs	r2, r2
    66f4:	430f      	orrs	r7, r1
    66f6:	425b      	negs	r3, r3
    66f8:	4313      	orrs	r3, r2
    66fa:	197f      	adds	r7, r7, r5
    66fc:	18ff      	adds	r7, r7, r3
    66fe:	465b      	mov	r3, fp
    6700:	193c      	adds	r4, r7, r4
    6702:	0ddb      	lsrs	r3, r3, #23
    6704:	9a05      	ldr	r2, [sp, #20]
    6706:	0264      	lsls	r4, r4, #9
    6708:	431c      	orrs	r4, r3
    670a:	0243      	lsls	r3, r0, #9
    670c:	4313      	orrs	r3, r2
    670e:	1e5d      	subs	r5, r3, #1
    6710:	41ab      	sbcs	r3, r5
    6712:	465a      	mov	r2, fp
    6714:	0dc0      	lsrs	r0, r0, #23
    6716:	4303      	orrs	r3, r0
    6718:	0252      	lsls	r2, r2, #9
    671a:	4313      	orrs	r3, r2
    671c:	01e2      	lsls	r2, r4, #7
    671e:	d556      	bpl.n	67ce <__aeabi_dmul+0x426>
    6720:	2001      	movs	r0, #1
    6722:	085a      	lsrs	r2, r3, #1
    6724:	4003      	ands	r3, r0
    6726:	4313      	orrs	r3, r2
    6728:	07e2      	lsls	r2, r4, #31
    672a:	4313      	orrs	r3, r2
    672c:	0864      	lsrs	r4, r4, #1
    672e:	485a      	ldr	r0, [pc, #360]	; (6898 <__aeabi_dmul+0x4f0>)
    6730:	4460      	add	r0, ip
    6732:	2800      	cmp	r0, #0
    6734:	dd4d      	ble.n	67d2 <__aeabi_dmul+0x42a>
    6736:	075a      	lsls	r2, r3, #29
    6738:	d009      	beq.n	674e <__aeabi_dmul+0x3a6>
    673a:	220f      	movs	r2, #15
    673c:	401a      	ands	r2, r3
    673e:	2a04      	cmp	r2, #4
    6740:	d005      	beq.n	674e <__aeabi_dmul+0x3a6>
    6742:	1d1a      	adds	r2, r3, #4
    6744:	429a      	cmp	r2, r3
    6746:	419b      	sbcs	r3, r3
    6748:	425b      	negs	r3, r3
    674a:	18e4      	adds	r4, r4, r3
    674c:	0013      	movs	r3, r2
    674e:	01e2      	lsls	r2, r4, #7
    6750:	d504      	bpl.n	675c <__aeabi_dmul+0x3b4>
    6752:	2080      	movs	r0, #128	; 0x80
    6754:	4a51      	ldr	r2, [pc, #324]	; (689c <__aeabi_dmul+0x4f4>)
    6756:	00c0      	lsls	r0, r0, #3
    6758:	4014      	ands	r4, r2
    675a:	4460      	add	r0, ip
    675c:	4a50      	ldr	r2, [pc, #320]	; (68a0 <__aeabi_dmul+0x4f8>)
    675e:	4290      	cmp	r0, r2
    6760:	dd00      	ble.n	6764 <__aeabi_dmul+0x3bc>
    6762:	e6e3      	b.n	652c <__aeabi_dmul+0x184>
    6764:	2501      	movs	r5, #1
    6766:	08db      	lsrs	r3, r3, #3
    6768:	0762      	lsls	r2, r4, #29
    676a:	431a      	orrs	r2, r3
    676c:	0264      	lsls	r4, r4, #9
    676e:	9b01      	ldr	r3, [sp, #4]
    6770:	4691      	mov	r9, r2
    6772:	0b22      	lsrs	r2, r4, #12
    6774:	0544      	lsls	r4, r0, #21
    6776:	0d64      	lsrs	r4, r4, #21
    6778:	401d      	ands	r5, r3
    677a:	e67c      	b.n	6476 <__aeabi_dmul+0xce>
    677c:	2280      	movs	r2, #128	; 0x80
    677e:	4659      	mov	r1, fp
    6780:	0312      	lsls	r2, r2, #12
    6782:	4211      	tst	r1, r2
    6784:	d008      	beq.n	6798 <__aeabi_dmul+0x3f0>
    6786:	4214      	tst	r4, r2
    6788:	d106      	bne.n	6798 <__aeabi_dmul+0x3f0>
    678a:	4322      	orrs	r2, r4
    678c:	0312      	lsls	r2, r2, #12
    678e:	0b12      	lsrs	r2, r2, #12
    6790:	4645      	mov	r5, r8
    6792:	4699      	mov	r9, r3
    6794:	4c43      	ldr	r4, [pc, #268]	; (68a4 <__aeabi_dmul+0x4fc>)
    6796:	e66e      	b.n	6476 <__aeabi_dmul+0xce>
    6798:	465b      	mov	r3, fp
    679a:	431a      	orrs	r2, r3
    679c:	0312      	lsls	r2, r2, #12
    679e:	0b12      	lsrs	r2, r2, #12
    67a0:	4c40      	ldr	r4, [pc, #256]	; (68a4 <__aeabi_dmul+0x4fc>)
    67a2:	e668      	b.n	6476 <__aeabi_dmul+0xce>
    67a4:	0003      	movs	r3, r0
    67a6:	4654      	mov	r4, sl
    67a8:	3b28      	subs	r3, #40	; 0x28
    67aa:	409c      	lsls	r4, r3
    67ac:	2300      	movs	r3, #0
    67ae:	e6b9      	b.n	6524 <__aeabi_dmul+0x17c>
    67b0:	f000 fc6e 	bl	7090 <__clzsi2>
    67b4:	3020      	adds	r0, #32
    67b6:	e6a6      	b.n	6506 <__aeabi_dmul+0x15e>
    67b8:	0003      	movs	r3, r0
    67ba:	3b28      	subs	r3, #40	; 0x28
    67bc:	409f      	lsls	r7, r3
    67be:	2300      	movs	r3, #0
    67c0:	46bb      	mov	fp, r7
    67c2:	4699      	mov	r9, r3
    67c4:	e68a      	b.n	64dc <__aeabi_dmul+0x134>
    67c6:	f000 fc63 	bl	7090 <__clzsi2>
    67ca:	3020      	adds	r0, #32
    67cc:	e674      	b.n	64b8 <__aeabi_dmul+0x110>
    67ce:	46b4      	mov	ip, r6
    67d0:	e7ad      	b.n	672e <__aeabi_dmul+0x386>
    67d2:	2501      	movs	r5, #1
    67d4:	1a2a      	subs	r2, r5, r0
    67d6:	2a38      	cmp	r2, #56	; 0x38
    67d8:	dd06      	ble.n	67e8 <__aeabi_dmul+0x440>
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	2400      	movs	r4, #0
    67de:	401d      	ands	r5, r3
    67e0:	2300      	movs	r3, #0
    67e2:	2200      	movs	r2, #0
    67e4:	4699      	mov	r9, r3
    67e6:	e646      	b.n	6476 <__aeabi_dmul+0xce>
    67e8:	2a1f      	cmp	r2, #31
    67ea:	dc21      	bgt.n	6830 <__aeabi_dmul+0x488>
    67ec:	2520      	movs	r5, #32
    67ee:	0020      	movs	r0, r4
    67f0:	1aad      	subs	r5, r5, r2
    67f2:	001e      	movs	r6, r3
    67f4:	40ab      	lsls	r3, r5
    67f6:	40a8      	lsls	r0, r5
    67f8:	40d6      	lsrs	r6, r2
    67fa:	1e5d      	subs	r5, r3, #1
    67fc:	41ab      	sbcs	r3, r5
    67fe:	4330      	orrs	r0, r6
    6800:	4318      	orrs	r0, r3
    6802:	40d4      	lsrs	r4, r2
    6804:	0743      	lsls	r3, r0, #29
    6806:	d009      	beq.n	681c <__aeabi_dmul+0x474>
    6808:	230f      	movs	r3, #15
    680a:	4003      	ands	r3, r0
    680c:	2b04      	cmp	r3, #4
    680e:	d005      	beq.n	681c <__aeabi_dmul+0x474>
    6810:	0003      	movs	r3, r0
    6812:	1d18      	adds	r0, r3, #4
    6814:	4298      	cmp	r0, r3
    6816:	419b      	sbcs	r3, r3
    6818:	425b      	negs	r3, r3
    681a:	18e4      	adds	r4, r4, r3
    681c:	0223      	lsls	r3, r4, #8
    681e:	d521      	bpl.n	6864 <__aeabi_dmul+0x4bc>
    6820:	2501      	movs	r5, #1
    6822:	9b01      	ldr	r3, [sp, #4]
    6824:	2401      	movs	r4, #1
    6826:	401d      	ands	r5, r3
    6828:	2300      	movs	r3, #0
    682a:	2200      	movs	r2, #0
    682c:	4699      	mov	r9, r3
    682e:	e622      	b.n	6476 <__aeabi_dmul+0xce>
    6830:	251f      	movs	r5, #31
    6832:	0021      	movs	r1, r4
    6834:	426d      	negs	r5, r5
    6836:	1a28      	subs	r0, r5, r0
    6838:	40c1      	lsrs	r1, r0
    683a:	0008      	movs	r0, r1
    683c:	2a20      	cmp	r2, #32
    683e:	d01d      	beq.n	687c <__aeabi_dmul+0x4d4>
    6840:	355f      	adds	r5, #95	; 0x5f
    6842:	1aaa      	subs	r2, r5, r2
    6844:	4094      	lsls	r4, r2
    6846:	4323      	orrs	r3, r4
    6848:	1e5c      	subs	r4, r3, #1
    684a:	41a3      	sbcs	r3, r4
    684c:	2507      	movs	r5, #7
    684e:	4303      	orrs	r3, r0
    6850:	401d      	ands	r5, r3
    6852:	2200      	movs	r2, #0
    6854:	2d00      	cmp	r5, #0
    6856:	d009      	beq.n	686c <__aeabi_dmul+0x4c4>
    6858:	220f      	movs	r2, #15
    685a:	2400      	movs	r4, #0
    685c:	401a      	ands	r2, r3
    685e:	0018      	movs	r0, r3
    6860:	2a04      	cmp	r2, #4
    6862:	d1d6      	bne.n	6812 <__aeabi_dmul+0x46a>
    6864:	0003      	movs	r3, r0
    6866:	0765      	lsls	r5, r4, #29
    6868:	0264      	lsls	r4, r4, #9
    686a:	0b22      	lsrs	r2, r4, #12
    686c:	08db      	lsrs	r3, r3, #3
    686e:	432b      	orrs	r3, r5
    6870:	2501      	movs	r5, #1
    6872:	4699      	mov	r9, r3
    6874:	9b01      	ldr	r3, [sp, #4]
    6876:	2400      	movs	r4, #0
    6878:	401d      	ands	r5, r3
    687a:	e5fc      	b.n	6476 <__aeabi_dmul+0xce>
    687c:	2400      	movs	r4, #0
    687e:	e7e2      	b.n	6846 <__aeabi_dmul+0x49e>
    6880:	2280      	movs	r2, #128	; 0x80
    6882:	2501      	movs	r5, #1
    6884:	0312      	lsls	r2, r2, #12
    6886:	4322      	orrs	r2, r4
    6888:	9901      	ldr	r1, [sp, #4]
    688a:	0312      	lsls	r2, r2, #12
    688c:	0b12      	lsrs	r2, r2, #12
    688e:	400d      	ands	r5, r1
    6890:	4699      	mov	r9, r3
    6892:	4c04      	ldr	r4, [pc, #16]	; (68a4 <__aeabi_dmul+0x4fc>)
    6894:	e5ef      	b.n	6476 <__aeabi_dmul+0xce>
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	000003ff 	.word	0x000003ff
    689c:	feffffff 	.word	0xfeffffff
    68a0:	000007fe 	.word	0x000007fe
    68a4:	000007ff 	.word	0x000007ff

000068a8 <__aeabi_dsub>:
    68a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68aa:	4646      	mov	r6, r8
    68ac:	46d6      	mov	lr, sl
    68ae:	464f      	mov	r7, r9
    68b0:	030c      	lsls	r4, r1, #12
    68b2:	b5c0      	push	{r6, r7, lr}
    68b4:	0fcd      	lsrs	r5, r1, #31
    68b6:	004e      	lsls	r6, r1, #1
    68b8:	0a61      	lsrs	r1, r4, #9
    68ba:	0f44      	lsrs	r4, r0, #29
    68bc:	430c      	orrs	r4, r1
    68be:	00c1      	lsls	r1, r0, #3
    68c0:	0058      	lsls	r0, r3, #1
    68c2:	0d40      	lsrs	r0, r0, #21
    68c4:	4684      	mov	ip, r0
    68c6:	468a      	mov	sl, r1
    68c8:	000f      	movs	r7, r1
    68ca:	0319      	lsls	r1, r3, #12
    68cc:	0f50      	lsrs	r0, r2, #29
    68ce:	0a49      	lsrs	r1, r1, #9
    68d0:	4301      	orrs	r1, r0
    68d2:	48c6      	ldr	r0, [pc, #792]	; (6bec <__aeabi_dsub+0x344>)
    68d4:	0d76      	lsrs	r6, r6, #21
    68d6:	46a8      	mov	r8, r5
    68d8:	0fdb      	lsrs	r3, r3, #31
    68da:	00d2      	lsls	r2, r2, #3
    68dc:	4584      	cmp	ip, r0
    68de:	d100      	bne.n	68e2 <__aeabi_dsub+0x3a>
    68e0:	e0d8      	b.n	6a94 <__aeabi_dsub+0x1ec>
    68e2:	2001      	movs	r0, #1
    68e4:	4043      	eors	r3, r0
    68e6:	42ab      	cmp	r3, r5
    68e8:	d100      	bne.n	68ec <__aeabi_dsub+0x44>
    68ea:	e0a6      	b.n	6a3a <__aeabi_dsub+0x192>
    68ec:	4660      	mov	r0, ip
    68ee:	1a35      	subs	r5, r6, r0
    68f0:	2d00      	cmp	r5, #0
    68f2:	dc00      	bgt.n	68f6 <__aeabi_dsub+0x4e>
    68f4:	e105      	b.n	6b02 <__aeabi_dsub+0x25a>
    68f6:	2800      	cmp	r0, #0
    68f8:	d110      	bne.n	691c <__aeabi_dsub+0x74>
    68fa:	000b      	movs	r3, r1
    68fc:	4313      	orrs	r3, r2
    68fe:	d100      	bne.n	6902 <__aeabi_dsub+0x5a>
    6900:	e0d7      	b.n	6ab2 <__aeabi_dsub+0x20a>
    6902:	1e6b      	subs	r3, r5, #1
    6904:	2b00      	cmp	r3, #0
    6906:	d000      	beq.n	690a <__aeabi_dsub+0x62>
    6908:	e14b      	b.n	6ba2 <__aeabi_dsub+0x2fa>
    690a:	4653      	mov	r3, sl
    690c:	1a9f      	subs	r7, r3, r2
    690e:	45ba      	cmp	sl, r7
    6910:	4180      	sbcs	r0, r0
    6912:	1a64      	subs	r4, r4, r1
    6914:	4240      	negs	r0, r0
    6916:	1a24      	subs	r4, r4, r0
    6918:	2601      	movs	r6, #1
    691a:	e01e      	b.n	695a <__aeabi_dsub+0xb2>
    691c:	4bb3      	ldr	r3, [pc, #716]	; (6bec <__aeabi_dsub+0x344>)
    691e:	429e      	cmp	r6, r3
    6920:	d048      	beq.n	69b4 <__aeabi_dsub+0x10c>
    6922:	2380      	movs	r3, #128	; 0x80
    6924:	041b      	lsls	r3, r3, #16
    6926:	4319      	orrs	r1, r3
    6928:	2d38      	cmp	r5, #56	; 0x38
    692a:	dd00      	ble.n	692e <__aeabi_dsub+0x86>
    692c:	e119      	b.n	6b62 <__aeabi_dsub+0x2ba>
    692e:	2d1f      	cmp	r5, #31
    6930:	dd00      	ble.n	6934 <__aeabi_dsub+0x8c>
    6932:	e14c      	b.n	6bce <__aeabi_dsub+0x326>
    6934:	2320      	movs	r3, #32
    6936:	000f      	movs	r7, r1
    6938:	1b5b      	subs	r3, r3, r5
    693a:	0010      	movs	r0, r2
    693c:	409a      	lsls	r2, r3
    693e:	409f      	lsls	r7, r3
    6940:	40e8      	lsrs	r0, r5
    6942:	1e53      	subs	r3, r2, #1
    6944:	419a      	sbcs	r2, r3
    6946:	40e9      	lsrs	r1, r5
    6948:	4307      	orrs	r7, r0
    694a:	4317      	orrs	r7, r2
    694c:	4653      	mov	r3, sl
    694e:	1bdf      	subs	r7, r3, r7
    6950:	1a61      	subs	r1, r4, r1
    6952:	45ba      	cmp	sl, r7
    6954:	41a4      	sbcs	r4, r4
    6956:	4264      	negs	r4, r4
    6958:	1b0c      	subs	r4, r1, r4
    695a:	0223      	lsls	r3, r4, #8
    695c:	d400      	bmi.n	6960 <__aeabi_dsub+0xb8>
    695e:	e0c5      	b.n	6aec <__aeabi_dsub+0x244>
    6960:	0264      	lsls	r4, r4, #9
    6962:	0a65      	lsrs	r5, r4, #9
    6964:	2d00      	cmp	r5, #0
    6966:	d100      	bne.n	696a <__aeabi_dsub+0xc2>
    6968:	e0f6      	b.n	6b58 <__aeabi_dsub+0x2b0>
    696a:	0028      	movs	r0, r5
    696c:	f000 fb90 	bl	7090 <__clzsi2>
    6970:	0003      	movs	r3, r0
    6972:	3b08      	subs	r3, #8
    6974:	2b1f      	cmp	r3, #31
    6976:	dd00      	ble.n	697a <__aeabi_dsub+0xd2>
    6978:	e0e9      	b.n	6b4e <__aeabi_dsub+0x2a6>
    697a:	2220      	movs	r2, #32
    697c:	003c      	movs	r4, r7
    697e:	1ad2      	subs	r2, r2, r3
    6980:	409d      	lsls	r5, r3
    6982:	40d4      	lsrs	r4, r2
    6984:	409f      	lsls	r7, r3
    6986:	4325      	orrs	r5, r4
    6988:	429e      	cmp	r6, r3
    698a:	dd00      	ble.n	698e <__aeabi_dsub+0xe6>
    698c:	e0db      	b.n	6b46 <__aeabi_dsub+0x29e>
    698e:	1b9e      	subs	r6, r3, r6
    6990:	1c73      	adds	r3, r6, #1
    6992:	2b1f      	cmp	r3, #31
    6994:	dd00      	ble.n	6998 <__aeabi_dsub+0xf0>
    6996:	e10a      	b.n	6bae <__aeabi_dsub+0x306>
    6998:	2220      	movs	r2, #32
    699a:	0038      	movs	r0, r7
    699c:	1ad2      	subs	r2, r2, r3
    699e:	0029      	movs	r1, r5
    69a0:	4097      	lsls	r7, r2
    69a2:	002c      	movs	r4, r5
    69a4:	4091      	lsls	r1, r2
    69a6:	40d8      	lsrs	r0, r3
    69a8:	1e7a      	subs	r2, r7, #1
    69aa:	4197      	sbcs	r7, r2
    69ac:	40dc      	lsrs	r4, r3
    69ae:	2600      	movs	r6, #0
    69b0:	4301      	orrs	r1, r0
    69b2:	430f      	orrs	r7, r1
    69b4:	077b      	lsls	r3, r7, #29
    69b6:	d009      	beq.n	69cc <__aeabi_dsub+0x124>
    69b8:	230f      	movs	r3, #15
    69ba:	403b      	ands	r3, r7
    69bc:	2b04      	cmp	r3, #4
    69be:	d005      	beq.n	69cc <__aeabi_dsub+0x124>
    69c0:	1d3b      	adds	r3, r7, #4
    69c2:	42bb      	cmp	r3, r7
    69c4:	41bf      	sbcs	r7, r7
    69c6:	427f      	negs	r7, r7
    69c8:	19e4      	adds	r4, r4, r7
    69ca:	001f      	movs	r7, r3
    69cc:	0223      	lsls	r3, r4, #8
    69ce:	d525      	bpl.n	6a1c <__aeabi_dsub+0x174>
    69d0:	4b86      	ldr	r3, [pc, #536]	; (6bec <__aeabi_dsub+0x344>)
    69d2:	3601      	adds	r6, #1
    69d4:	429e      	cmp	r6, r3
    69d6:	d100      	bne.n	69da <__aeabi_dsub+0x132>
    69d8:	e0af      	b.n	6b3a <__aeabi_dsub+0x292>
    69da:	4b85      	ldr	r3, [pc, #532]	; (6bf0 <__aeabi_dsub+0x348>)
    69dc:	2501      	movs	r5, #1
    69de:	401c      	ands	r4, r3
    69e0:	4643      	mov	r3, r8
    69e2:	0762      	lsls	r2, r4, #29
    69e4:	08ff      	lsrs	r7, r7, #3
    69e6:	0264      	lsls	r4, r4, #9
    69e8:	0576      	lsls	r6, r6, #21
    69ea:	4317      	orrs	r7, r2
    69ec:	0b24      	lsrs	r4, r4, #12
    69ee:	0d76      	lsrs	r6, r6, #21
    69f0:	401d      	ands	r5, r3
    69f2:	2100      	movs	r1, #0
    69f4:	0324      	lsls	r4, r4, #12
    69f6:	0b23      	lsrs	r3, r4, #12
    69f8:	0d0c      	lsrs	r4, r1, #20
    69fa:	4a7e      	ldr	r2, [pc, #504]	; (6bf4 <__aeabi_dsub+0x34c>)
    69fc:	0524      	lsls	r4, r4, #20
    69fe:	431c      	orrs	r4, r3
    6a00:	4014      	ands	r4, r2
    6a02:	0533      	lsls	r3, r6, #20
    6a04:	4323      	orrs	r3, r4
    6a06:	005b      	lsls	r3, r3, #1
    6a08:	07ed      	lsls	r5, r5, #31
    6a0a:	085b      	lsrs	r3, r3, #1
    6a0c:	432b      	orrs	r3, r5
    6a0e:	0038      	movs	r0, r7
    6a10:	0019      	movs	r1, r3
    6a12:	bc1c      	pop	{r2, r3, r4}
    6a14:	4690      	mov	r8, r2
    6a16:	4699      	mov	r9, r3
    6a18:	46a2      	mov	sl, r4
    6a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a1c:	2501      	movs	r5, #1
    6a1e:	4643      	mov	r3, r8
    6a20:	0762      	lsls	r2, r4, #29
    6a22:	08ff      	lsrs	r7, r7, #3
    6a24:	4317      	orrs	r7, r2
    6a26:	08e4      	lsrs	r4, r4, #3
    6a28:	401d      	ands	r5, r3
    6a2a:	4b70      	ldr	r3, [pc, #448]	; (6bec <__aeabi_dsub+0x344>)
    6a2c:	429e      	cmp	r6, r3
    6a2e:	d036      	beq.n	6a9e <__aeabi_dsub+0x1f6>
    6a30:	0324      	lsls	r4, r4, #12
    6a32:	0576      	lsls	r6, r6, #21
    6a34:	0b24      	lsrs	r4, r4, #12
    6a36:	0d76      	lsrs	r6, r6, #21
    6a38:	e7db      	b.n	69f2 <__aeabi_dsub+0x14a>
    6a3a:	4663      	mov	r3, ip
    6a3c:	1af3      	subs	r3, r6, r3
    6a3e:	2b00      	cmp	r3, #0
    6a40:	dc00      	bgt.n	6a44 <__aeabi_dsub+0x19c>
    6a42:	e094      	b.n	6b6e <__aeabi_dsub+0x2c6>
    6a44:	4660      	mov	r0, ip
    6a46:	2800      	cmp	r0, #0
    6a48:	d035      	beq.n	6ab6 <__aeabi_dsub+0x20e>
    6a4a:	4868      	ldr	r0, [pc, #416]	; (6bec <__aeabi_dsub+0x344>)
    6a4c:	4286      	cmp	r6, r0
    6a4e:	d0b1      	beq.n	69b4 <__aeabi_dsub+0x10c>
    6a50:	2780      	movs	r7, #128	; 0x80
    6a52:	043f      	lsls	r7, r7, #16
    6a54:	4339      	orrs	r1, r7
    6a56:	2b38      	cmp	r3, #56	; 0x38
    6a58:	dc00      	bgt.n	6a5c <__aeabi_dsub+0x1b4>
    6a5a:	e0fd      	b.n	6c58 <__aeabi_dsub+0x3b0>
    6a5c:	430a      	orrs	r2, r1
    6a5e:	0017      	movs	r7, r2
    6a60:	2100      	movs	r1, #0
    6a62:	1e7a      	subs	r2, r7, #1
    6a64:	4197      	sbcs	r7, r2
    6a66:	4457      	add	r7, sl
    6a68:	4557      	cmp	r7, sl
    6a6a:	4180      	sbcs	r0, r0
    6a6c:	1909      	adds	r1, r1, r4
    6a6e:	4244      	negs	r4, r0
    6a70:	190c      	adds	r4, r1, r4
    6a72:	0223      	lsls	r3, r4, #8
    6a74:	d53a      	bpl.n	6aec <__aeabi_dsub+0x244>
    6a76:	4b5d      	ldr	r3, [pc, #372]	; (6bec <__aeabi_dsub+0x344>)
    6a78:	3601      	adds	r6, #1
    6a7a:	429e      	cmp	r6, r3
    6a7c:	d100      	bne.n	6a80 <__aeabi_dsub+0x1d8>
    6a7e:	e14b      	b.n	6d18 <__aeabi_dsub+0x470>
    6a80:	2201      	movs	r2, #1
    6a82:	4b5b      	ldr	r3, [pc, #364]	; (6bf0 <__aeabi_dsub+0x348>)
    6a84:	401c      	ands	r4, r3
    6a86:	087b      	lsrs	r3, r7, #1
    6a88:	4017      	ands	r7, r2
    6a8a:	431f      	orrs	r7, r3
    6a8c:	07e2      	lsls	r2, r4, #31
    6a8e:	4317      	orrs	r7, r2
    6a90:	0864      	lsrs	r4, r4, #1
    6a92:	e78f      	b.n	69b4 <__aeabi_dsub+0x10c>
    6a94:	0008      	movs	r0, r1
    6a96:	4310      	orrs	r0, r2
    6a98:	d000      	beq.n	6a9c <__aeabi_dsub+0x1f4>
    6a9a:	e724      	b.n	68e6 <__aeabi_dsub+0x3e>
    6a9c:	e721      	b.n	68e2 <__aeabi_dsub+0x3a>
    6a9e:	0023      	movs	r3, r4
    6aa0:	433b      	orrs	r3, r7
    6aa2:	d100      	bne.n	6aa6 <__aeabi_dsub+0x1fe>
    6aa4:	e1b9      	b.n	6e1a <__aeabi_dsub+0x572>
    6aa6:	2280      	movs	r2, #128	; 0x80
    6aa8:	0312      	lsls	r2, r2, #12
    6aaa:	4314      	orrs	r4, r2
    6aac:	0324      	lsls	r4, r4, #12
    6aae:	0b24      	lsrs	r4, r4, #12
    6ab0:	e79f      	b.n	69f2 <__aeabi_dsub+0x14a>
    6ab2:	002e      	movs	r6, r5
    6ab4:	e77e      	b.n	69b4 <__aeabi_dsub+0x10c>
    6ab6:	0008      	movs	r0, r1
    6ab8:	4310      	orrs	r0, r2
    6aba:	d100      	bne.n	6abe <__aeabi_dsub+0x216>
    6abc:	e0ca      	b.n	6c54 <__aeabi_dsub+0x3ac>
    6abe:	1e58      	subs	r0, r3, #1
    6ac0:	4684      	mov	ip, r0
    6ac2:	2800      	cmp	r0, #0
    6ac4:	d000      	beq.n	6ac8 <__aeabi_dsub+0x220>
    6ac6:	e0e7      	b.n	6c98 <__aeabi_dsub+0x3f0>
    6ac8:	4452      	add	r2, sl
    6aca:	4552      	cmp	r2, sl
    6acc:	4180      	sbcs	r0, r0
    6ace:	1864      	adds	r4, r4, r1
    6ad0:	4240      	negs	r0, r0
    6ad2:	1824      	adds	r4, r4, r0
    6ad4:	0017      	movs	r7, r2
    6ad6:	2601      	movs	r6, #1
    6ad8:	0223      	lsls	r3, r4, #8
    6ada:	d507      	bpl.n	6aec <__aeabi_dsub+0x244>
    6adc:	2602      	movs	r6, #2
    6ade:	e7cf      	b.n	6a80 <__aeabi_dsub+0x1d8>
    6ae0:	4664      	mov	r4, ip
    6ae2:	432c      	orrs	r4, r5
    6ae4:	d100      	bne.n	6ae8 <__aeabi_dsub+0x240>
    6ae6:	e1b3      	b.n	6e50 <__aeabi_dsub+0x5a8>
    6ae8:	002c      	movs	r4, r5
    6aea:	4667      	mov	r7, ip
    6aec:	077b      	lsls	r3, r7, #29
    6aee:	d000      	beq.n	6af2 <__aeabi_dsub+0x24a>
    6af0:	e762      	b.n	69b8 <__aeabi_dsub+0x110>
    6af2:	0763      	lsls	r3, r4, #29
    6af4:	08ff      	lsrs	r7, r7, #3
    6af6:	431f      	orrs	r7, r3
    6af8:	2501      	movs	r5, #1
    6afa:	4643      	mov	r3, r8
    6afc:	08e4      	lsrs	r4, r4, #3
    6afe:	401d      	ands	r5, r3
    6b00:	e793      	b.n	6a2a <__aeabi_dsub+0x182>
    6b02:	2d00      	cmp	r5, #0
    6b04:	d178      	bne.n	6bf8 <__aeabi_dsub+0x350>
    6b06:	1c75      	adds	r5, r6, #1
    6b08:	056d      	lsls	r5, r5, #21
    6b0a:	0d6d      	lsrs	r5, r5, #21
    6b0c:	2d01      	cmp	r5, #1
    6b0e:	dc00      	bgt.n	6b12 <__aeabi_dsub+0x26a>
    6b10:	e0f2      	b.n	6cf8 <__aeabi_dsub+0x450>
    6b12:	4650      	mov	r0, sl
    6b14:	1a80      	subs	r0, r0, r2
    6b16:	4582      	cmp	sl, r0
    6b18:	41bf      	sbcs	r7, r7
    6b1a:	1a65      	subs	r5, r4, r1
    6b1c:	427f      	negs	r7, r7
    6b1e:	1bed      	subs	r5, r5, r7
    6b20:	4684      	mov	ip, r0
    6b22:	0228      	lsls	r0, r5, #8
    6b24:	d400      	bmi.n	6b28 <__aeabi_dsub+0x280>
    6b26:	e08c      	b.n	6c42 <__aeabi_dsub+0x39a>
    6b28:	4650      	mov	r0, sl
    6b2a:	1a17      	subs	r7, r2, r0
    6b2c:	42ba      	cmp	r2, r7
    6b2e:	4192      	sbcs	r2, r2
    6b30:	1b0c      	subs	r4, r1, r4
    6b32:	4255      	negs	r5, r2
    6b34:	1b65      	subs	r5, r4, r5
    6b36:	4698      	mov	r8, r3
    6b38:	e714      	b.n	6964 <__aeabi_dsub+0xbc>
    6b3a:	2501      	movs	r5, #1
    6b3c:	4643      	mov	r3, r8
    6b3e:	2400      	movs	r4, #0
    6b40:	401d      	ands	r5, r3
    6b42:	2700      	movs	r7, #0
    6b44:	e755      	b.n	69f2 <__aeabi_dsub+0x14a>
    6b46:	4c2a      	ldr	r4, [pc, #168]	; (6bf0 <__aeabi_dsub+0x348>)
    6b48:	1af6      	subs	r6, r6, r3
    6b4a:	402c      	ands	r4, r5
    6b4c:	e732      	b.n	69b4 <__aeabi_dsub+0x10c>
    6b4e:	003d      	movs	r5, r7
    6b50:	3828      	subs	r0, #40	; 0x28
    6b52:	4085      	lsls	r5, r0
    6b54:	2700      	movs	r7, #0
    6b56:	e717      	b.n	6988 <__aeabi_dsub+0xe0>
    6b58:	0038      	movs	r0, r7
    6b5a:	f000 fa99 	bl	7090 <__clzsi2>
    6b5e:	3020      	adds	r0, #32
    6b60:	e706      	b.n	6970 <__aeabi_dsub+0xc8>
    6b62:	430a      	orrs	r2, r1
    6b64:	0017      	movs	r7, r2
    6b66:	2100      	movs	r1, #0
    6b68:	1e7a      	subs	r2, r7, #1
    6b6a:	4197      	sbcs	r7, r2
    6b6c:	e6ee      	b.n	694c <__aeabi_dsub+0xa4>
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d000      	beq.n	6b74 <__aeabi_dsub+0x2cc>
    6b72:	e0e5      	b.n	6d40 <__aeabi_dsub+0x498>
    6b74:	1c73      	adds	r3, r6, #1
    6b76:	469c      	mov	ip, r3
    6b78:	055b      	lsls	r3, r3, #21
    6b7a:	0d5b      	lsrs	r3, r3, #21
    6b7c:	2b01      	cmp	r3, #1
    6b7e:	dc00      	bgt.n	6b82 <__aeabi_dsub+0x2da>
    6b80:	e09f      	b.n	6cc2 <__aeabi_dsub+0x41a>
    6b82:	4b1a      	ldr	r3, [pc, #104]	; (6bec <__aeabi_dsub+0x344>)
    6b84:	459c      	cmp	ip, r3
    6b86:	d100      	bne.n	6b8a <__aeabi_dsub+0x2e2>
    6b88:	e0c5      	b.n	6d16 <__aeabi_dsub+0x46e>
    6b8a:	4452      	add	r2, sl
    6b8c:	4552      	cmp	r2, sl
    6b8e:	4180      	sbcs	r0, r0
    6b90:	1864      	adds	r4, r4, r1
    6b92:	4240      	negs	r0, r0
    6b94:	1824      	adds	r4, r4, r0
    6b96:	07e7      	lsls	r7, r4, #31
    6b98:	0852      	lsrs	r2, r2, #1
    6b9a:	4317      	orrs	r7, r2
    6b9c:	0864      	lsrs	r4, r4, #1
    6b9e:	4666      	mov	r6, ip
    6ba0:	e708      	b.n	69b4 <__aeabi_dsub+0x10c>
    6ba2:	4812      	ldr	r0, [pc, #72]	; (6bec <__aeabi_dsub+0x344>)
    6ba4:	4285      	cmp	r5, r0
    6ba6:	d100      	bne.n	6baa <__aeabi_dsub+0x302>
    6ba8:	e085      	b.n	6cb6 <__aeabi_dsub+0x40e>
    6baa:	001d      	movs	r5, r3
    6bac:	e6bc      	b.n	6928 <__aeabi_dsub+0x80>
    6bae:	0029      	movs	r1, r5
    6bb0:	3e1f      	subs	r6, #31
    6bb2:	40f1      	lsrs	r1, r6
    6bb4:	2b20      	cmp	r3, #32
    6bb6:	d100      	bne.n	6bba <__aeabi_dsub+0x312>
    6bb8:	e07f      	b.n	6cba <__aeabi_dsub+0x412>
    6bba:	2240      	movs	r2, #64	; 0x40
    6bbc:	1ad3      	subs	r3, r2, r3
    6bbe:	409d      	lsls	r5, r3
    6bc0:	432f      	orrs	r7, r5
    6bc2:	1e7d      	subs	r5, r7, #1
    6bc4:	41af      	sbcs	r7, r5
    6bc6:	2400      	movs	r4, #0
    6bc8:	430f      	orrs	r7, r1
    6bca:	2600      	movs	r6, #0
    6bcc:	e78e      	b.n	6aec <__aeabi_dsub+0x244>
    6bce:	002b      	movs	r3, r5
    6bd0:	000f      	movs	r7, r1
    6bd2:	3b20      	subs	r3, #32
    6bd4:	40df      	lsrs	r7, r3
    6bd6:	2d20      	cmp	r5, #32
    6bd8:	d071      	beq.n	6cbe <__aeabi_dsub+0x416>
    6bda:	2340      	movs	r3, #64	; 0x40
    6bdc:	1b5d      	subs	r5, r3, r5
    6bde:	40a9      	lsls	r1, r5
    6be0:	430a      	orrs	r2, r1
    6be2:	1e51      	subs	r1, r2, #1
    6be4:	418a      	sbcs	r2, r1
    6be6:	2100      	movs	r1, #0
    6be8:	4317      	orrs	r7, r2
    6bea:	e6af      	b.n	694c <__aeabi_dsub+0xa4>
    6bec:	000007ff 	.word	0x000007ff
    6bf0:	ff7fffff 	.word	0xff7fffff
    6bf4:	800fffff 	.word	0x800fffff
    6bf8:	2e00      	cmp	r6, #0
    6bfa:	d03e      	beq.n	6c7a <__aeabi_dsub+0x3d2>
    6bfc:	4eb3      	ldr	r6, [pc, #716]	; (6ecc <__aeabi_dsub+0x624>)
    6bfe:	45b4      	cmp	ip, r6
    6c00:	d045      	beq.n	6c8e <__aeabi_dsub+0x3e6>
    6c02:	2680      	movs	r6, #128	; 0x80
    6c04:	0436      	lsls	r6, r6, #16
    6c06:	426d      	negs	r5, r5
    6c08:	4334      	orrs	r4, r6
    6c0a:	2d38      	cmp	r5, #56	; 0x38
    6c0c:	dd00      	ble.n	6c10 <__aeabi_dsub+0x368>
    6c0e:	e0a8      	b.n	6d62 <__aeabi_dsub+0x4ba>
    6c10:	2d1f      	cmp	r5, #31
    6c12:	dd00      	ble.n	6c16 <__aeabi_dsub+0x36e>
    6c14:	e11f      	b.n	6e56 <__aeabi_dsub+0x5ae>
    6c16:	2620      	movs	r6, #32
    6c18:	0027      	movs	r7, r4
    6c1a:	4650      	mov	r0, sl
    6c1c:	1b76      	subs	r6, r6, r5
    6c1e:	40b7      	lsls	r7, r6
    6c20:	40e8      	lsrs	r0, r5
    6c22:	4307      	orrs	r7, r0
    6c24:	4650      	mov	r0, sl
    6c26:	40b0      	lsls	r0, r6
    6c28:	1e46      	subs	r6, r0, #1
    6c2a:	41b0      	sbcs	r0, r6
    6c2c:	40ec      	lsrs	r4, r5
    6c2e:	4338      	orrs	r0, r7
    6c30:	1a17      	subs	r7, r2, r0
    6c32:	42ba      	cmp	r2, r7
    6c34:	4192      	sbcs	r2, r2
    6c36:	1b0c      	subs	r4, r1, r4
    6c38:	4252      	negs	r2, r2
    6c3a:	1aa4      	subs	r4, r4, r2
    6c3c:	4666      	mov	r6, ip
    6c3e:	4698      	mov	r8, r3
    6c40:	e68b      	b.n	695a <__aeabi_dsub+0xb2>
    6c42:	4664      	mov	r4, ip
    6c44:	4667      	mov	r7, ip
    6c46:	432c      	orrs	r4, r5
    6c48:	d000      	beq.n	6c4c <__aeabi_dsub+0x3a4>
    6c4a:	e68b      	b.n	6964 <__aeabi_dsub+0xbc>
    6c4c:	2500      	movs	r5, #0
    6c4e:	2600      	movs	r6, #0
    6c50:	2700      	movs	r7, #0
    6c52:	e6ea      	b.n	6a2a <__aeabi_dsub+0x182>
    6c54:	001e      	movs	r6, r3
    6c56:	e6ad      	b.n	69b4 <__aeabi_dsub+0x10c>
    6c58:	2b1f      	cmp	r3, #31
    6c5a:	dc60      	bgt.n	6d1e <__aeabi_dsub+0x476>
    6c5c:	2720      	movs	r7, #32
    6c5e:	1af8      	subs	r0, r7, r3
    6c60:	000f      	movs	r7, r1
    6c62:	4684      	mov	ip, r0
    6c64:	4087      	lsls	r7, r0
    6c66:	0010      	movs	r0, r2
    6c68:	40d8      	lsrs	r0, r3
    6c6a:	4307      	orrs	r7, r0
    6c6c:	4660      	mov	r0, ip
    6c6e:	4082      	lsls	r2, r0
    6c70:	1e50      	subs	r0, r2, #1
    6c72:	4182      	sbcs	r2, r0
    6c74:	40d9      	lsrs	r1, r3
    6c76:	4317      	orrs	r7, r2
    6c78:	e6f5      	b.n	6a66 <__aeabi_dsub+0x1be>
    6c7a:	0026      	movs	r6, r4
    6c7c:	4650      	mov	r0, sl
    6c7e:	4306      	orrs	r6, r0
    6c80:	d005      	beq.n	6c8e <__aeabi_dsub+0x3e6>
    6c82:	43ed      	mvns	r5, r5
    6c84:	2d00      	cmp	r5, #0
    6c86:	d0d3      	beq.n	6c30 <__aeabi_dsub+0x388>
    6c88:	4e90      	ldr	r6, [pc, #576]	; (6ecc <__aeabi_dsub+0x624>)
    6c8a:	45b4      	cmp	ip, r6
    6c8c:	d1bd      	bne.n	6c0a <__aeabi_dsub+0x362>
    6c8e:	000c      	movs	r4, r1
    6c90:	0017      	movs	r7, r2
    6c92:	4666      	mov	r6, ip
    6c94:	4698      	mov	r8, r3
    6c96:	e68d      	b.n	69b4 <__aeabi_dsub+0x10c>
    6c98:	488c      	ldr	r0, [pc, #560]	; (6ecc <__aeabi_dsub+0x624>)
    6c9a:	4283      	cmp	r3, r0
    6c9c:	d00b      	beq.n	6cb6 <__aeabi_dsub+0x40e>
    6c9e:	4663      	mov	r3, ip
    6ca0:	e6d9      	b.n	6a56 <__aeabi_dsub+0x1ae>
    6ca2:	2d00      	cmp	r5, #0
    6ca4:	d000      	beq.n	6ca8 <__aeabi_dsub+0x400>
    6ca6:	e096      	b.n	6dd6 <__aeabi_dsub+0x52e>
    6ca8:	0008      	movs	r0, r1
    6caa:	4310      	orrs	r0, r2
    6cac:	d100      	bne.n	6cb0 <__aeabi_dsub+0x408>
    6cae:	e0e2      	b.n	6e76 <__aeabi_dsub+0x5ce>
    6cb0:	000c      	movs	r4, r1
    6cb2:	0017      	movs	r7, r2
    6cb4:	4698      	mov	r8, r3
    6cb6:	4e85      	ldr	r6, [pc, #532]	; (6ecc <__aeabi_dsub+0x624>)
    6cb8:	e67c      	b.n	69b4 <__aeabi_dsub+0x10c>
    6cba:	2500      	movs	r5, #0
    6cbc:	e780      	b.n	6bc0 <__aeabi_dsub+0x318>
    6cbe:	2100      	movs	r1, #0
    6cc0:	e78e      	b.n	6be0 <__aeabi_dsub+0x338>
    6cc2:	0023      	movs	r3, r4
    6cc4:	4650      	mov	r0, sl
    6cc6:	4303      	orrs	r3, r0
    6cc8:	2e00      	cmp	r6, #0
    6cca:	d000      	beq.n	6cce <__aeabi_dsub+0x426>
    6ccc:	e0a8      	b.n	6e20 <__aeabi_dsub+0x578>
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d100      	bne.n	6cd4 <__aeabi_dsub+0x42c>
    6cd2:	e0de      	b.n	6e92 <__aeabi_dsub+0x5ea>
    6cd4:	000b      	movs	r3, r1
    6cd6:	4313      	orrs	r3, r2
    6cd8:	d100      	bne.n	6cdc <__aeabi_dsub+0x434>
    6cda:	e66b      	b.n	69b4 <__aeabi_dsub+0x10c>
    6cdc:	4452      	add	r2, sl
    6cde:	4552      	cmp	r2, sl
    6ce0:	4180      	sbcs	r0, r0
    6ce2:	1864      	adds	r4, r4, r1
    6ce4:	4240      	negs	r0, r0
    6ce6:	1824      	adds	r4, r4, r0
    6ce8:	0017      	movs	r7, r2
    6cea:	0223      	lsls	r3, r4, #8
    6cec:	d400      	bmi.n	6cf0 <__aeabi_dsub+0x448>
    6cee:	e6fd      	b.n	6aec <__aeabi_dsub+0x244>
    6cf0:	4b77      	ldr	r3, [pc, #476]	; (6ed0 <__aeabi_dsub+0x628>)
    6cf2:	4666      	mov	r6, ip
    6cf4:	401c      	ands	r4, r3
    6cf6:	e65d      	b.n	69b4 <__aeabi_dsub+0x10c>
    6cf8:	0025      	movs	r5, r4
    6cfa:	4650      	mov	r0, sl
    6cfc:	4305      	orrs	r5, r0
    6cfe:	2e00      	cmp	r6, #0
    6d00:	d1cf      	bne.n	6ca2 <__aeabi_dsub+0x3fa>
    6d02:	2d00      	cmp	r5, #0
    6d04:	d14f      	bne.n	6da6 <__aeabi_dsub+0x4fe>
    6d06:	000c      	movs	r4, r1
    6d08:	4314      	orrs	r4, r2
    6d0a:	d100      	bne.n	6d0e <__aeabi_dsub+0x466>
    6d0c:	e0a0      	b.n	6e50 <__aeabi_dsub+0x5a8>
    6d0e:	000c      	movs	r4, r1
    6d10:	0017      	movs	r7, r2
    6d12:	4698      	mov	r8, r3
    6d14:	e64e      	b.n	69b4 <__aeabi_dsub+0x10c>
    6d16:	4666      	mov	r6, ip
    6d18:	2400      	movs	r4, #0
    6d1a:	2700      	movs	r7, #0
    6d1c:	e685      	b.n	6a2a <__aeabi_dsub+0x182>
    6d1e:	001f      	movs	r7, r3
    6d20:	0008      	movs	r0, r1
    6d22:	3f20      	subs	r7, #32
    6d24:	40f8      	lsrs	r0, r7
    6d26:	0007      	movs	r7, r0
    6d28:	2b20      	cmp	r3, #32
    6d2a:	d100      	bne.n	6d2e <__aeabi_dsub+0x486>
    6d2c:	e08e      	b.n	6e4c <__aeabi_dsub+0x5a4>
    6d2e:	2040      	movs	r0, #64	; 0x40
    6d30:	1ac3      	subs	r3, r0, r3
    6d32:	4099      	lsls	r1, r3
    6d34:	430a      	orrs	r2, r1
    6d36:	1e51      	subs	r1, r2, #1
    6d38:	418a      	sbcs	r2, r1
    6d3a:	2100      	movs	r1, #0
    6d3c:	4317      	orrs	r7, r2
    6d3e:	e692      	b.n	6a66 <__aeabi_dsub+0x1be>
    6d40:	2e00      	cmp	r6, #0
    6d42:	d114      	bne.n	6d6e <__aeabi_dsub+0x4c6>
    6d44:	0026      	movs	r6, r4
    6d46:	4650      	mov	r0, sl
    6d48:	4306      	orrs	r6, r0
    6d4a:	d062      	beq.n	6e12 <__aeabi_dsub+0x56a>
    6d4c:	43db      	mvns	r3, r3
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d15c      	bne.n	6e0c <__aeabi_dsub+0x564>
    6d52:	1887      	adds	r7, r0, r2
    6d54:	4297      	cmp	r7, r2
    6d56:	4192      	sbcs	r2, r2
    6d58:	1864      	adds	r4, r4, r1
    6d5a:	4252      	negs	r2, r2
    6d5c:	18a4      	adds	r4, r4, r2
    6d5e:	4666      	mov	r6, ip
    6d60:	e687      	b.n	6a72 <__aeabi_dsub+0x1ca>
    6d62:	4650      	mov	r0, sl
    6d64:	4320      	orrs	r0, r4
    6d66:	1e44      	subs	r4, r0, #1
    6d68:	41a0      	sbcs	r0, r4
    6d6a:	2400      	movs	r4, #0
    6d6c:	e760      	b.n	6c30 <__aeabi_dsub+0x388>
    6d6e:	4e57      	ldr	r6, [pc, #348]	; (6ecc <__aeabi_dsub+0x624>)
    6d70:	45b4      	cmp	ip, r6
    6d72:	d04e      	beq.n	6e12 <__aeabi_dsub+0x56a>
    6d74:	2680      	movs	r6, #128	; 0x80
    6d76:	0436      	lsls	r6, r6, #16
    6d78:	425b      	negs	r3, r3
    6d7a:	4334      	orrs	r4, r6
    6d7c:	2b38      	cmp	r3, #56	; 0x38
    6d7e:	dd00      	ble.n	6d82 <__aeabi_dsub+0x4da>
    6d80:	e07f      	b.n	6e82 <__aeabi_dsub+0x5da>
    6d82:	2b1f      	cmp	r3, #31
    6d84:	dd00      	ble.n	6d88 <__aeabi_dsub+0x4e0>
    6d86:	e08b      	b.n	6ea0 <__aeabi_dsub+0x5f8>
    6d88:	2620      	movs	r6, #32
    6d8a:	0027      	movs	r7, r4
    6d8c:	4650      	mov	r0, sl
    6d8e:	1af6      	subs	r6, r6, r3
    6d90:	40b7      	lsls	r7, r6
    6d92:	40d8      	lsrs	r0, r3
    6d94:	4307      	orrs	r7, r0
    6d96:	4650      	mov	r0, sl
    6d98:	40b0      	lsls	r0, r6
    6d9a:	1e46      	subs	r6, r0, #1
    6d9c:	41b0      	sbcs	r0, r6
    6d9e:	4307      	orrs	r7, r0
    6da0:	40dc      	lsrs	r4, r3
    6da2:	18bf      	adds	r7, r7, r2
    6da4:	e7d6      	b.n	6d54 <__aeabi_dsub+0x4ac>
    6da6:	000d      	movs	r5, r1
    6da8:	4315      	orrs	r5, r2
    6daa:	d100      	bne.n	6dae <__aeabi_dsub+0x506>
    6dac:	e602      	b.n	69b4 <__aeabi_dsub+0x10c>
    6dae:	4650      	mov	r0, sl
    6db0:	1a80      	subs	r0, r0, r2
    6db2:	4582      	cmp	sl, r0
    6db4:	41bf      	sbcs	r7, r7
    6db6:	1a65      	subs	r5, r4, r1
    6db8:	427f      	negs	r7, r7
    6dba:	1bed      	subs	r5, r5, r7
    6dbc:	4684      	mov	ip, r0
    6dbe:	0228      	lsls	r0, r5, #8
    6dc0:	d400      	bmi.n	6dc4 <__aeabi_dsub+0x51c>
    6dc2:	e68d      	b.n	6ae0 <__aeabi_dsub+0x238>
    6dc4:	4650      	mov	r0, sl
    6dc6:	1a17      	subs	r7, r2, r0
    6dc8:	42ba      	cmp	r2, r7
    6dca:	4192      	sbcs	r2, r2
    6dcc:	1b0c      	subs	r4, r1, r4
    6dce:	4252      	negs	r2, r2
    6dd0:	1aa4      	subs	r4, r4, r2
    6dd2:	4698      	mov	r8, r3
    6dd4:	e5ee      	b.n	69b4 <__aeabi_dsub+0x10c>
    6dd6:	000d      	movs	r5, r1
    6dd8:	4315      	orrs	r5, r2
    6dda:	d100      	bne.n	6dde <__aeabi_dsub+0x536>
    6ddc:	e76b      	b.n	6cb6 <__aeabi_dsub+0x40e>
    6dde:	4650      	mov	r0, sl
    6de0:	0767      	lsls	r7, r4, #29
    6de2:	08c0      	lsrs	r0, r0, #3
    6de4:	4307      	orrs	r7, r0
    6de6:	2080      	movs	r0, #128	; 0x80
    6de8:	08e4      	lsrs	r4, r4, #3
    6dea:	0300      	lsls	r0, r0, #12
    6dec:	4204      	tst	r4, r0
    6dee:	d007      	beq.n	6e00 <__aeabi_dsub+0x558>
    6df0:	08cd      	lsrs	r5, r1, #3
    6df2:	4205      	tst	r5, r0
    6df4:	d104      	bne.n	6e00 <__aeabi_dsub+0x558>
    6df6:	002c      	movs	r4, r5
    6df8:	4698      	mov	r8, r3
    6dfa:	08d7      	lsrs	r7, r2, #3
    6dfc:	0749      	lsls	r1, r1, #29
    6dfe:	430f      	orrs	r7, r1
    6e00:	0f7b      	lsrs	r3, r7, #29
    6e02:	00e4      	lsls	r4, r4, #3
    6e04:	431c      	orrs	r4, r3
    6e06:	00ff      	lsls	r7, r7, #3
    6e08:	4e30      	ldr	r6, [pc, #192]	; (6ecc <__aeabi_dsub+0x624>)
    6e0a:	e5d3      	b.n	69b4 <__aeabi_dsub+0x10c>
    6e0c:	4e2f      	ldr	r6, [pc, #188]	; (6ecc <__aeabi_dsub+0x624>)
    6e0e:	45b4      	cmp	ip, r6
    6e10:	d1b4      	bne.n	6d7c <__aeabi_dsub+0x4d4>
    6e12:	000c      	movs	r4, r1
    6e14:	0017      	movs	r7, r2
    6e16:	4666      	mov	r6, ip
    6e18:	e5cc      	b.n	69b4 <__aeabi_dsub+0x10c>
    6e1a:	2700      	movs	r7, #0
    6e1c:	2400      	movs	r4, #0
    6e1e:	e5e8      	b.n	69f2 <__aeabi_dsub+0x14a>
    6e20:	2b00      	cmp	r3, #0
    6e22:	d039      	beq.n	6e98 <__aeabi_dsub+0x5f0>
    6e24:	000b      	movs	r3, r1
    6e26:	4313      	orrs	r3, r2
    6e28:	d100      	bne.n	6e2c <__aeabi_dsub+0x584>
    6e2a:	e744      	b.n	6cb6 <__aeabi_dsub+0x40e>
    6e2c:	08c0      	lsrs	r0, r0, #3
    6e2e:	0767      	lsls	r7, r4, #29
    6e30:	4307      	orrs	r7, r0
    6e32:	2080      	movs	r0, #128	; 0x80
    6e34:	08e4      	lsrs	r4, r4, #3
    6e36:	0300      	lsls	r0, r0, #12
    6e38:	4204      	tst	r4, r0
    6e3a:	d0e1      	beq.n	6e00 <__aeabi_dsub+0x558>
    6e3c:	08cb      	lsrs	r3, r1, #3
    6e3e:	4203      	tst	r3, r0
    6e40:	d1de      	bne.n	6e00 <__aeabi_dsub+0x558>
    6e42:	08d7      	lsrs	r7, r2, #3
    6e44:	0749      	lsls	r1, r1, #29
    6e46:	430f      	orrs	r7, r1
    6e48:	001c      	movs	r4, r3
    6e4a:	e7d9      	b.n	6e00 <__aeabi_dsub+0x558>
    6e4c:	2100      	movs	r1, #0
    6e4e:	e771      	b.n	6d34 <__aeabi_dsub+0x48c>
    6e50:	2500      	movs	r5, #0
    6e52:	2700      	movs	r7, #0
    6e54:	e5e9      	b.n	6a2a <__aeabi_dsub+0x182>
    6e56:	002e      	movs	r6, r5
    6e58:	0027      	movs	r7, r4
    6e5a:	3e20      	subs	r6, #32
    6e5c:	40f7      	lsrs	r7, r6
    6e5e:	2d20      	cmp	r5, #32
    6e60:	d02f      	beq.n	6ec2 <__aeabi_dsub+0x61a>
    6e62:	2640      	movs	r6, #64	; 0x40
    6e64:	1b75      	subs	r5, r6, r5
    6e66:	40ac      	lsls	r4, r5
    6e68:	4650      	mov	r0, sl
    6e6a:	4320      	orrs	r0, r4
    6e6c:	1e44      	subs	r4, r0, #1
    6e6e:	41a0      	sbcs	r0, r4
    6e70:	2400      	movs	r4, #0
    6e72:	4338      	orrs	r0, r7
    6e74:	e6dc      	b.n	6c30 <__aeabi_dsub+0x388>
    6e76:	2480      	movs	r4, #128	; 0x80
    6e78:	2500      	movs	r5, #0
    6e7a:	0324      	lsls	r4, r4, #12
    6e7c:	4e13      	ldr	r6, [pc, #76]	; (6ecc <__aeabi_dsub+0x624>)
    6e7e:	2700      	movs	r7, #0
    6e80:	e5d3      	b.n	6a2a <__aeabi_dsub+0x182>
    6e82:	4650      	mov	r0, sl
    6e84:	4320      	orrs	r0, r4
    6e86:	0007      	movs	r7, r0
    6e88:	1e78      	subs	r0, r7, #1
    6e8a:	4187      	sbcs	r7, r0
    6e8c:	2400      	movs	r4, #0
    6e8e:	18bf      	adds	r7, r7, r2
    6e90:	e760      	b.n	6d54 <__aeabi_dsub+0x4ac>
    6e92:	000c      	movs	r4, r1
    6e94:	0017      	movs	r7, r2
    6e96:	e58d      	b.n	69b4 <__aeabi_dsub+0x10c>
    6e98:	000c      	movs	r4, r1
    6e9a:	0017      	movs	r7, r2
    6e9c:	4e0b      	ldr	r6, [pc, #44]	; (6ecc <__aeabi_dsub+0x624>)
    6e9e:	e589      	b.n	69b4 <__aeabi_dsub+0x10c>
    6ea0:	001e      	movs	r6, r3
    6ea2:	0027      	movs	r7, r4
    6ea4:	3e20      	subs	r6, #32
    6ea6:	40f7      	lsrs	r7, r6
    6ea8:	2b20      	cmp	r3, #32
    6eaa:	d00c      	beq.n	6ec6 <__aeabi_dsub+0x61e>
    6eac:	2640      	movs	r6, #64	; 0x40
    6eae:	1af3      	subs	r3, r6, r3
    6eb0:	409c      	lsls	r4, r3
    6eb2:	4650      	mov	r0, sl
    6eb4:	4320      	orrs	r0, r4
    6eb6:	1e44      	subs	r4, r0, #1
    6eb8:	41a0      	sbcs	r0, r4
    6eba:	4307      	orrs	r7, r0
    6ebc:	2400      	movs	r4, #0
    6ebe:	18bf      	adds	r7, r7, r2
    6ec0:	e748      	b.n	6d54 <__aeabi_dsub+0x4ac>
    6ec2:	2400      	movs	r4, #0
    6ec4:	e7d0      	b.n	6e68 <__aeabi_dsub+0x5c0>
    6ec6:	2400      	movs	r4, #0
    6ec8:	e7f3      	b.n	6eb2 <__aeabi_dsub+0x60a>
    6eca:	46c0      	nop			; (mov r8, r8)
    6ecc:	000007ff 	.word	0x000007ff
    6ed0:	ff7fffff 	.word	0xff7fffff

00006ed4 <__aeabi_dcmpun>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	4e0e      	ldr	r6, [pc, #56]	; (6f10 <__aeabi_dcmpun+0x3c>)
    6ed8:	030d      	lsls	r5, r1, #12
    6eda:	031c      	lsls	r4, r3, #12
    6edc:	0049      	lsls	r1, r1, #1
    6ede:	005b      	lsls	r3, r3, #1
    6ee0:	0b2d      	lsrs	r5, r5, #12
    6ee2:	0d49      	lsrs	r1, r1, #21
    6ee4:	0b24      	lsrs	r4, r4, #12
    6ee6:	0d5b      	lsrs	r3, r3, #21
    6ee8:	42b1      	cmp	r1, r6
    6eea:	d004      	beq.n	6ef6 <__aeabi_dcmpun+0x22>
    6eec:	4908      	ldr	r1, [pc, #32]	; (6f10 <__aeabi_dcmpun+0x3c>)
    6eee:	2000      	movs	r0, #0
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d008      	beq.n	6f06 <__aeabi_dcmpun+0x32>
    6ef4:	bd70      	pop	{r4, r5, r6, pc}
    6ef6:	4305      	orrs	r5, r0
    6ef8:	2001      	movs	r0, #1
    6efa:	2d00      	cmp	r5, #0
    6efc:	d1fa      	bne.n	6ef4 <__aeabi_dcmpun+0x20>
    6efe:	4904      	ldr	r1, [pc, #16]	; (6f10 <__aeabi_dcmpun+0x3c>)
    6f00:	2000      	movs	r0, #0
    6f02:	428b      	cmp	r3, r1
    6f04:	d1f6      	bne.n	6ef4 <__aeabi_dcmpun+0x20>
    6f06:	4314      	orrs	r4, r2
    6f08:	0020      	movs	r0, r4
    6f0a:	1e44      	subs	r4, r0, #1
    6f0c:	41a0      	sbcs	r0, r4
    6f0e:	e7f1      	b.n	6ef4 <__aeabi_dcmpun+0x20>
    6f10:	000007ff 	.word	0x000007ff

00006f14 <__aeabi_d2iz>:
    6f14:	b530      	push	{r4, r5, lr}
    6f16:	4d13      	ldr	r5, [pc, #76]	; (6f64 <__aeabi_d2iz+0x50>)
    6f18:	030a      	lsls	r2, r1, #12
    6f1a:	004b      	lsls	r3, r1, #1
    6f1c:	0b12      	lsrs	r2, r2, #12
    6f1e:	0d5b      	lsrs	r3, r3, #21
    6f20:	0fc9      	lsrs	r1, r1, #31
    6f22:	2400      	movs	r4, #0
    6f24:	42ab      	cmp	r3, r5
    6f26:	dd10      	ble.n	6f4a <__aeabi_d2iz+0x36>
    6f28:	4c0f      	ldr	r4, [pc, #60]	; (6f68 <__aeabi_d2iz+0x54>)
    6f2a:	42a3      	cmp	r3, r4
    6f2c:	dc0f      	bgt.n	6f4e <__aeabi_d2iz+0x3a>
    6f2e:	2480      	movs	r4, #128	; 0x80
    6f30:	4d0e      	ldr	r5, [pc, #56]	; (6f6c <__aeabi_d2iz+0x58>)
    6f32:	0364      	lsls	r4, r4, #13
    6f34:	4322      	orrs	r2, r4
    6f36:	1aed      	subs	r5, r5, r3
    6f38:	2d1f      	cmp	r5, #31
    6f3a:	dd0b      	ble.n	6f54 <__aeabi_d2iz+0x40>
    6f3c:	480c      	ldr	r0, [pc, #48]	; (6f70 <__aeabi_d2iz+0x5c>)
    6f3e:	1ac3      	subs	r3, r0, r3
    6f40:	40da      	lsrs	r2, r3
    6f42:	4254      	negs	r4, r2
    6f44:	2900      	cmp	r1, #0
    6f46:	d100      	bne.n	6f4a <__aeabi_d2iz+0x36>
    6f48:	0014      	movs	r4, r2
    6f4a:	0020      	movs	r0, r4
    6f4c:	bd30      	pop	{r4, r5, pc}
    6f4e:	4b09      	ldr	r3, [pc, #36]	; (6f74 <__aeabi_d2iz+0x60>)
    6f50:	18cc      	adds	r4, r1, r3
    6f52:	e7fa      	b.n	6f4a <__aeabi_d2iz+0x36>
    6f54:	4c08      	ldr	r4, [pc, #32]	; (6f78 <__aeabi_d2iz+0x64>)
    6f56:	40e8      	lsrs	r0, r5
    6f58:	46a4      	mov	ip, r4
    6f5a:	4463      	add	r3, ip
    6f5c:	409a      	lsls	r2, r3
    6f5e:	4302      	orrs	r2, r0
    6f60:	e7ef      	b.n	6f42 <__aeabi_d2iz+0x2e>
    6f62:	46c0      	nop			; (mov r8, r8)
    6f64:	000003fe 	.word	0x000003fe
    6f68:	0000041d 	.word	0x0000041d
    6f6c:	00000433 	.word	0x00000433
    6f70:	00000413 	.word	0x00000413
    6f74:	7fffffff 	.word	0x7fffffff
    6f78:	fffffbed 	.word	0xfffffbed

00006f7c <__aeabi_ui2d>:
    6f7c:	b510      	push	{r4, lr}
    6f7e:	1e04      	subs	r4, r0, #0
    6f80:	d028      	beq.n	6fd4 <__aeabi_ui2d+0x58>
    6f82:	f000 f885 	bl	7090 <__clzsi2>
    6f86:	4b15      	ldr	r3, [pc, #84]	; (6fdc <__aeabi_ui2d+0x60>)
    6f88:	4a15      	ldr	r2, [pc, #84]	; (6fe0 <__aeabi_ui2d+0x64>)
    6f8a:	1a1b      	subs	r3, r3, r0
    6f8c:	1ad2      	subs	r2, r2, r3
    6f8e:	2a1f      	cmp	r2, #31
    6f90:	dd15      	ble.n	6fbe <__aeabi_ui2d+0x42>
    6f92:	4a14      	ldr	r2, [pc, #80]	; (6fe4 <__aeabi_ui2d+0x68>)
    6f94:	1ad2      	subs	r2, r2, r3
    6f96:	4094      	lsls	r4, r2
    6f98:	2200      	movs	r2, #0
    6f9a:	0324      	lsls	r4, r4, #12
    6f9c:	055b      	lsls	r3, r3, #21
    6f9e:	0b24      	lsrs	r4, r4, #12
    6fa0:	0d5b      	lsrs	r3, r3, #21
    6fa2:	2100      	movs	r1, #0
    6fa4:	0010      	movs	r0, r2
    6fa6:	0324      	lsls	r4, r4, #12
    6fa8:	0d0a      	lsrs	r2, r1, #20
    6faa:	0b24      	lsrs	r4, r4, #12
    6fac:	0512      	lsls	r2, r2, #20
    6fae:	4322      	orrs	r2, r4
    6fb0:	4c0d      	ldr	r4, [pc, #52]	; (6fe8 <__aeabi_ui2d+0x6c>)
    6fb2:	051b      	lsls	r3, r3, #20
    6fb4:	4022      	ands	r2, r4
    6fb6:	4313      	orrs	r3, r2
    6fb8:	005b      	lsls	r3, r3, #1
    6fba:	0859      	lsrs	r1, r3, #1
    6fbc:	bd10      	pop	{r4, pc}
    6fbe:	0021      	movs	r1, r4
    6fc0:	4091      	lsls	r1, r2
    6fc2:	000a      	movs	r2, r1
    6fc4:	210b      	movs	r1, #11
    6fc6:	1a08      	subs	r0, r1, r0
    6fc8:	40c4      	lsrs	r4, r0
    6fca:	055b      	lsls	r3, r3, #21
    6fcc:	0324      	lsls	r4, r4, #12
    6fce:	0b24      	lsrs	r4, r4, #12
    6fd0:	0d5b      	lsrs	r3, r3, #21
    6fd2:	e7e6      	b.n	6fa2 <__aeabi_ui2d+0x26>
    6fd4:	2300      	movs	r3, #0
    6fd6:	2400      	movs	r4, #0
    6fd8:	2200      	movs	r2, #0
    6fda:	e7e2      	b.n	6fa2 <__aeabi_ui2d+0x26>
    6fdc:	0000041e 	.word	0x0000041e
    6fe0:	00000433 	.word	0x00000433
    6fe4:	00000413 	.word	0x00000413
    6fe8:	800fffff 	.word	0x800fffff

00006fec <__aeabi_f2d>:
    6fec:	0041      	lsls	r1, r0, #1
    6fee:	0e09      	lsrs	r1, r1, #24
    6ff0:	1c4b      	adds	r3, r1, #1
    6ff2:	b570      	push	{r4, r5, r6, lr}
    6ff4:	b2db      	uxtb	r3, r3
    6ff6:	0246      	lsls	r6, r0, #9
    6ff8:	0a75      	lsrs	r5, r6, #9
    6ffa:	0fc4      	lsrs	r4, r0, #31
    6ffc:	2b01      	cmp	r3, #1
    6ffe:	dd14      	ble.n	702a <__aeabi_f2d+0x3e>
    7000:	23e0      	movs	r3, #224	; 0xe0
    7002:	009b      	lsls	r3, r3, #2
    7004:	076d      	lsls	r5, r5, #29
    7006:	0b36      	lsrs	r6, r6, #12
    7008:	18cb      	adds	r3, r1, r3
    700a:	2100      	movs	r1, #0
    700c:	0d0a      	lsrs	r2, r1, #20
    700e:	0028      	movs	r0, r5
    7010:	0512      	lsls	r2, r2, #20
    7012:	4d1c      	ldr	r5, [pc, #112]	; (7084 <__aeabi_f2d+0x98>)
    7014:	4332      	orrs	r2, r6
    7016:	055b      	lsls	r3, r3, #21
    7018:	402a      	ands	r2, r5
    701a:	085b      	lsrs	r3, r3, #1
    701c:	4313      	orrs	r3, r2
    701e:	005b      	lsls	r3, r3, #1
    7020:	07e4      	lsls	r4, r4, #31
    7022:	085b      	lsrs	r3, r3, #1
    7024:	4323      	orrs	r3, r4
    7026:	0019      	movs	r1, r3
    7028:	bd70      	pop	{r4, r5, r6, pc}
    702a:	2900      	cmp	r1, #0
    702c:	d114      	bne.n	7058 <__aeabi_f2d+0x6c>
    702e:	2d00      	cmp	r5, #0
    7030:	d01e      	beq.n	7070 <__aeabi_f2d+0x84>
    7032:	0028      	movs	r0, r5
    7034:	f000 f82c 	bl	7090 <__clzsi2>
    7038:	280a      	cmp	r0, #10
    703a:	dc1c      	bgt.n	7076 <__aeabi_f2d+0x8a>
    703c:	230b      	movs	r3, #11
    703e:	002a      	movs	r2, r5
    7040:	1a1b      	subs	r3, r3, r0
    7042:	40da      	lsrs	r2, r3
    7044:	0003      	movs	r3, r0
    7046:	3315      	adds	r3, #21
    7048:	409d      	lsls	r5, r3
    704a:	4b0f      	ldr	r3, [pc, #60]	; (7088 <__aeabi_f2d+0x9c>)
    704c:	0312      	lsls	r2, r2, #12
    704e:	1a1b      	subs	r3, r3, r0
    7050:	055b      	lsls	r3, r3, #21
    7052:	0b16      	lsrs	r6, r2, #12
    7054:	0d5b      	lsrs	r3, r3, #21
    7056:	e7d8      	b.n	700a <__aeabi_f2d+0x1e>
    7058:	2d00      	cmp	r5, #0
    705a:	d006      	beq.n	706a <__aeabi_f2d+0x7e>
    705c:	0b32      	lsrs	r2, r6, #12
    705e:	2680      	movs	r6, #128	; 0x80
    7060:	0336      	lsls	r6, r6, #12
    7062:	076d      	lsls	r5, r5, #29
    7064:	4316      	orrs	r6, r2
    7066:	4b09      	ldr	r3, [pc, #36]	; (708c <__aeabi_f2d+0xa0>)
    7068:	e7cf      	b.n	700a <__aeabi_f2d+0x1e>
    706a:	4b08      	ldr	r3, [pc, #32]	; (708c <__aeabi_f2d+0xa0>)
    706c:	2600      	movs	r6, #0
    706e:	e7cc      	b.n	700a <__aeabi_f2d+0x1e>
    7070:	2300      	movs	r3, #0
    7072:	2600      	movs	r6, #0
    7074:	e7c9      	b.n	700a <__aeabi_f2d+0x1e>
    7076:	0003      	movs	r3, r0
    7078:	002a      	movs	r2, r5
    707a:	3b0b      	subs	r3, #11
    707c:	409a      	lsls	r2, r3
    707e:	2500      	movs	r5, #0
    7080:	e7e3      	b.n	704a <__aeabi_f2d+0x5e>
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	800fffff 	.word	0x800fffff
    7088:	00000389 	.word	0x00000389
    708c:	000007ff 	.word	0x000007ff

00007090 <__clzsi2>:
    7090:	211c      	movs	r1, #28
    7092:	2301      	movs	r3, #1
    7094:	041b      	lsls	r3, r3, #16
    7096:	4298      	cmp	r0, r3
    7098:	d301      	bcc.n	709e <__clzsi2+0xe>
    709a:	0c00      	lsrs	r0, r0, #16
    709c:	3910      	subs	r1, #16
    709e:	0a1b      	lsrs	r3, r3, #8
    70a0:	4298      	cmp	r0, r3
    70a2:	d301      	bcc.n	70a8 <__clzsi2+0x18>
    70a4:	0a00      	lsrs	r0, r0, #8
    70a6:	3908      	subs	r1, #8
    70a8:	091b      	lsrs	r3, r3, #4
    70aa:	4298      	cmp	r0, r3
    70ac:	d301      	bcc.n	70b2 <__clzsi2+0x22>
    70ae:	0900      	lsrs	r0, r0, #4
    70b0:	3904      	subs	r1, #4
    70b2:	a202      	add	r2, pc, #8	; (adr r2, 70bc <__clzsi2+0x2c>)
    70b4:	5c10      	ldrb	r0, [r2, r0]
    70b6:	1840      	adds	r0, r0, r1
    70b8:	4770      	bx	lr
    70ba:	46c0      	nop			; (mov r8, r8)
    70bc:	02020304 	.word	0x02020304
    70c0:	01010101 	.word	0x01010101
	...

000070cc <__ctzsi2>:
    70cc:	4241      	negs	r1, r0
    70ce:	4008      	ands	r0, r1
    70d0:	211c      	movs	r1, #28
    70d2:	2301      	movs	r3, #1
    70d4:	041b      	lsls	r3, r3, #16
    70d6:	4298      	cmp	r0, r3
    70d8:	d301      	bcc.n	70de <__ctzsi2+0x12>
    70da:	0c00      	lsrs	r0, r0, #16
    70dc:	3910      	subs	r1, #16
    70de:	0a1b      	lsrs	r3, r3, #8
    70e0:	4298      	cmp	r0, r3
    70e2:	d301      	bcc.n	70e8 <__ctzsi2+0x1c>
    70e4:	0a00      	lsrs	r0, r0, #8
    70e6:	3908      	subs	r1, #8
    70e8:	091b      	lsrs	r3, r3, #4
    70ea:	4298      	cmp	r0, r3
    70ec:	d301      	bcc.n	70f2 <__ctzsi2+0x26>
    70ee:	0900      	lsrs	r0, r0, #4
    70f0:	3904      	subs	r1, #4
    70f2:	a202      	add	r2, pc, #8	; (adr r2, 70fc <__ctzsi2+0x30>)
    70f4:	5c10      	ldrb	r0, [r2, r0]
    70f6:	1a40      	subs	r0, r0, r1
    70f8:	4770      	bx	lr
    70fa:	46c0      	nop			; (mov r8, r8)
    70fc:	1d1d1c1b 	.word	0x1d1d1c1b
    7100:	1e1e1e1e 	.word	0x1e1e1e1e
    7104:	1f1f1f1f 	.word	0x1f1f1f1f
    7108:	1f1f1f1f 	.word	0x1f1f1f1f

0000710c <__cxa_atexit>:
    710c:	b510      	push	{r4, lr}
    710e:	0013      	movs	r3, r2
    7110:	000a      	movs	r2, r1
    7112:	0001      	movs	r1, r0
    7114:	2002      	movs	r0, #2
    7116:	f000 f8e3 	bl	72e0 <__register_exitproc>
    711a:	bd10      	pop	{r4, pc}

0000711c <__libc_init_array>:
    711c:	b570      	push	{r4, r5, r6, lr}
    711e:	4e0d      	ldr	r6, [pc, #52]	; (7154 <__libc_init_array+0x38>)
    7120:	4d0d      	ldr	r5, [pc, #52]	; (7158 <__libc_init_array+0x3c>)
    7122:	2400      	movs	r4, #0
    7124:	1bad      	subs	r5, r5, r6
    7126:	10ad      	asrs	r5, r5, #2
    7128:	d005      	beq.n	7136 <__libc_init_array+0x1a>
    712a:	00a3      	lsls	r3, r4, #2
    712c:	58f3      	ldr	r3, [r6, r3]
    712e:	3401      	adds	r4, #1
    7130:	4798      	blx	r3
    7132:	42a5      	cmp	r5, r4
    7134:	d1f9      	bne.n	712a <__libc_init_array+0xe>
    7136:	f000 fb79 	bl	782c <_init>
    713a:	4e08      	ldr	r6, [pc, #32]	; (715c <__libc_init_array+0x40>)
    713c:	4d08      	ldr	r5, [pc, #32]	; (7160 <__libc_init_array+0x44>)
    713e:	2400      	movs	r4, #0
    7140:	1bad      	subs	r5, r5, r6
    7142:	10ad      	asrs	r5, r5, #2
    7144:	d005      	beq.n	7152 <__libc_init_array+0x36>
    7146:	00a3      	lsls	r3, r4, #2
    7148:	58f3      	ldr	r3, [r6, r3]
    714a:	3401      	adds	r4, #1
    714c:	4798      	blx	r3
    714e:	42a5      	cmp	r5, r4
    7150:	d1f9      	bne.n	7146 <__libc_init_array+0x2a>
    7152:	bd70      	pop	{r4, r5, r6, pc}
    7154:	00007838 	.word	0x00007838
    7158:	00007838 	.word	0x00007838
    715c:	00007838 	.word	0x00007838
    7160:	00007848 	.word	0x00007848

00007164 <memcpy>:
    7164:	b5f0      	push	{r4, r5, r6, r7, lr}
    7166:	0005      	movs	r5, r0
    7168:	2a0f      	cmp	r2, #15
    716a:	d92f      	bls.n	71cc <memcpy+0x68>
    716c:	000b      	movs	r3, r1
    716e:	4303      	orrs	r3, r0
    7170:	079b      	lsls	r3, r3, #30
    7172:	d134      	bne.n	71de <memcpy+0x7a>
    7174:	0016      	movs	r6, r2
    7176:	000c      	movs	r4, r1
    7178:	0003      	movs	r3, r0
    717a:	3e10      	subs	r6, #16
    717c:	0935      	lsrs	r5, r6, #4
    717e:	3501      	adds	r5, #1
    7180:	012d      	lsls	r5, r5, #4
    7182:	1945      	adds	r5, r0, r5
    7184:	6827      	ldr	r7, [r4, #0]
    7186:	601f      	str	r7, [r3, #0]
    7188:	6867      	ldr	r7, [r4, #4]
    718a:	605f      	str	r7, [r3, #4]
    718c:	68a7      	ldr	r7, [r4, #8]
    718e:	609f      	str	r7, [r3, #8]
    7190:	68e7      	ldr	r7, [r4, #12]
    7192:	3410      	adds	r4, #16
    7194:	60df      	str	r7, [r3, #12]
    7196:	3310      	adds	r3, #16
    7198:	429d      	cmp	r5, r3
    719a:	d1f3      	bne.n	7184 <memcpy+0x20>
    719c:	230f      	movs	r3, #15
    719e:	439e      	bics	r6, r3
    71a0:	3610      	adds	r6, #16
    71a2:	1985      	adds	r5, r0, r6
    71a4:	1989      	adds	r1, r1, r6
    71a6:	4013      	ands	r3, r2
    71a8:	2b03      	cmp	r3, #3
    71aa:	d91a      	bls.n	71e2 <memcpy+0x7e>
    71ac:	1f1e      	subs	r6, r3, #4
    71ae:	2300      	movs	r3, #0
    71b0:	08b4      	lsrs	r4, r6, #2
    71b2:	3401      	adds	r4, #1
    71b4:	00a4      	lsls	r4, r4, #2
    71b6:	58cf      	ldr	r7, [r1, r3]
    71b8:	50ef      	str	r7, [r5, r3]
    71ba:	3304      	adds	r3, #4
    71bc:	42a3      	cmp	r3, r4
    71be:	d1fa      	bne.n	71b6 <memcpy+0x52>
    71c0:	2403      	movs	r4, #3
    71c2:	43a6      	bics	r6, r4
    71c4:	1d33      	adds	r3, r6, #4
    71c6:	4022      	ands	r2, r4
    71c8:	18c9      	adds	r1, r1, r3
    71ca:	18ed      	adds	r5, r5, r3
    71cc:	2a00      	cmp	r2, #0
    71ce:	d005      	beq.n	71dc <memcpy+0x78>
    71d0:	2300      	movs	r3, #0
    71d2:	5ccc      	ldrb	r4, [r1, r3]
    71d4:	54ec      	strb	r4, [r5, r3]
    71d6:	3301      	adds	r3, #1
    71d8:	4293      	cmp	r3, r2
    71da:	d1fa      	bne.n	71d2 <memcpy+0x6e>
    71dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71de:	0005      	movs	r5, r0
    71e0:	e7f6      	b.n	71d0 <memcpy+0x6c>
    71e2:	001a      	movs	r2, r3
    71e4:	e7f2      	b.n	71cc <memcpy+0x68>
    71e6:	46c0      	nop			; (mov r8, r8)

000071e8 <memset>:
    71e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ea:	0783      	lsls	r3, r0, #30
    71ec:	d043      	beq.n	7276 <memset+0x8e>
    71ee:	1e54      	subs	r4, r2, #1
    71f0:	2a00      	cmp	r2, #0
    71f2:	d03f      	beq.n	7274 <memset+0x8c>
    71f4:	b2ce      	uxtb	r6, r1
    71f6:	0002      	movs	r2, r0
    71f8:	2503      	movs	r5, #3
    71fa:	e002      	b.n	7202 <memset+0x1a>
    71fc:	001a      	movs	r2, r3
    71fe:	3c01      	subs	r4, #1
    7200:	d338      	bcc.n	7274 <memset+0x8c>
    7202:	1c53      	adds	r3, r2, #1
    7204:	7016      	strb	r6, [r2, #0]
    7206:	422b      	tst	r3, r5
    7208:	d1f8      	bne.n	71fc <memset+0x14>
    720a:	2c03      	cmp	r4, #3
    720c:	d92a      	bls.n	7264 <memset+0x7c>
    720e:	22ff      	movs	r2, #255	; 0xff
    7210:	400a      	ands	r2, r1
    7212:	0215      	lsls	r5, r2, #8
    7214:	4315      	orrs	r5, r2
    7216:	042a      	lsls	r2, r5, #16
    7218:	4315      	orrs	r5, r2
    721a:	2c0f      	cmp	r4, #15
    721c:	d914      	bls.n	7248 <memset+0x60>
    721e:	0027      	movs	r7, r4
    7220:	001a      	movs	r2, r3
    7222:	3f10      	subs	r7, #16
    7224:	093e      	lsrs	r6, r7, #4
    7226:	3601      	adds	r6, #1
    7228:	0136      	lsls	r6, r6, #4
    722a:	199e      	adds	r6, r3, r6
    722c:	6015      	str	r5, [r2, #0]
    722e:	6055      	str	r5, [r2, #4]
    7230:	6095      	str	r5, [r2, #8]
    7232:	60d5      	str	r5, [r2, #12]
    7234:	3210      	adds	r2, #16
    7236:	4296      	cmp	r6, r2
    7238:	d1f8      	bne.n	722c <memset+0x44>
    723a:	220f      	movs	r2, #15
    723c:	4397      	bics	r7, r2
    723e:	3710      	adds	r7, #16
    7240:	19db      	adds	r3, r3, r7
    7242:	4014      	ands	r4, r2
    7244:	2c03      	cmp	r4, #3
    7246:	d90d      	bls.n	7264 <memset+0x7c>
    7248:	001a      	movs	r2, r3
    724a:	1f27      	subs	r7, r4, #4
    724c:	08be      	lsrs	r6, r7, #2
    724e:	3601      	adds	r6, #1
    7250:	00b6      	lsls	r6, r6, #2
    7252:	199e      	adds	r6, r3, r6
    7254:	c220      	stmia	r2!, {r5}
    7256:	42b2      	cmp	r2, r6
    7258:	d1fc      	bne.n	7254 <memset+0x6c>
    725a:	2203      	movs	r2, #3
    725c:	4397      	bics	r7, r2
    725e:	3704      	adds	r7, #4
    7260:	19db      	adds	r3, r3, r7
    7262:	4014      	ands	r4, r2
    7264:	2c00      	cmp	r4, #0
    7266:	d005      	beq.n	7274 <memset+0x8c>
    7268:	b2c9      	uxtb	r1, r1
    726a:	191c      	adds	r4, r3, r4
    726c:	7019      	strb	r1, [r3, #0]
    726e:	3301      	adds	r3, #1
    7270:	429c      	cmp	r4, r3
    7272:	d1fb      	bne.n	726c <memset+0x84>
    7274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7276:	0014      	movs	r4, r2
    7278:	0003      	movs	r3, r0
    727a:	e7c6      	b.n	720a <memset+0x22>

0000727c <strlen>:
    727c:	b510      	push	{r4, lr}
    727e:	0783      	lsls	r3, r0, #30
    7280:	d025      	beq.n	72ce <strlen+0x52>
    7282:	7803      	ldrb	r3, [r0, #0]
    7284:	2b00      	cmp	r3, #0
    7286:	d024      	beq.n	72d2 <strlen+0x56>
    7288:	0003      	movs	r3, r0
    728a:	2103      	movs	r1, #3
    728c:	e002      	b.n	7294 <strlen+0x18>
    728e:	781a      	ldrb	r2, [r3, #0]
    7290:	2a00      	cmp	r2, #0
    7292:	d01a      	beq.n	72ca <strlen+0x4e>
    7294:	3301      	adds	r3, #1
    7296:	420b      	tst	r3, r1
    7298:	d1f9      	bne.n	728e <strlen+0x12>
    729a:	6819      	ldr	r1, [r3, #0]
    729c:	4a0e      	ldr	r2, [pc, #56]	; (72d8 <strlen+0x5c>)
    729e:	4c0f      	ldr	r4, [pc, #60]	; (72dc <strlen+0x60>)
    72a0:	188a      	adds	r2, r1, r2
    72a2:	438a      	bics	r2, r1
    72a4:	4222      	tst	r2, r4
    72a6:	d106      	bne.n	72b6 <strlen+0x3a>
    72a8:	3304      	adds	r3, #4
    72aa:	6819      	ldr	r1, [r3, #0]
    72ac:	4a0a      	ldr	r2, [pc, #40]	; (72d8 <strlen+0x5c>)
    72ae:	188a      	adds	r2, r1, r2
    72b0:	438a      	bics	r2, r1
    72b2:	4222      	tst	r2, r4
    72b4:	d0f8      	beq.n	72a8 <strlen+0x2c>
    72b6:	001a      	movs	r2, r3
    72b8:	781b      	ldrb	r3, [r3, #0]
    72ba:	2b00      	cmp	r3, #0
    72bc:	d003      	beq.n	72c6 <strlen+0x4a>
    72be:	3201      	adds	r2, #1
    72c0:	7811      	ldrb	r1, [r2, #0]
    72c2:	2900      	cmp	r1, #0
    72c4:	d1fb      	bne.n	72be <strlen+0x42>
    72c6:	1a10      	subs	r0, r2, r0
    72c8:	bd10      	pop	{r4, pc}
    72ca:	1a18      	subs	r0, r3, r0
    72cc:	e7fc      	b.n	72c8 <strlen+0x4c>
    72ce:	0003      	movs	r3, r0
    72d0:	e7e3      	b.n	729a <strlen+0x1e>
    72d2:	2000      	movs	r0, #0
    72d4:	e7f8      	b.n	72c8 <strlen+0x4c>
    72d6:	46c0      	nop			; (mov r8, r8)
    72d8:	fefefeff 	.word	0xfefefeff
    72dc:	80808080 	.word	0x80808080

000072e0 <__register_exitproc>:
    72e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72e2:	464e      	mov	r6, r9
    72e4:	4645      	mov	r5, r8
    72e6:	46de      	mov	lr, fp
    72e8:	4657      	mov	r7, sl
    72ea:	b5e0      	push	{r5, r6, r7, lr}
    72ec:	4d36      	ldr	r5, [pc, #216]	; (73c8 <__register_exitproc+0xe8>)
    72ee:	b083      	sub	sp, #12
    72f0:	0006      	movs	r6, r0
    72f2:	6828      	ldr	r0, [r5, #0]
    72f4:	4698      	mov	r8, r3
    72f6:	000f      	movs	r7, r1
    72f8:	4691      	mov	r9, r2
    72fa:	f000 f899 	bl	7430 <__retarget_lock_acquire_recursive>
    72fe:	4b33      	ldr	r3, [pc, #204]	; (73cc <__register_exitproc+0xec>)
    7300:	681c      	ldr	r4, [r3, #0]
    7302:	23a4      	movs	r3, #164	; 0xa4
    7304:	005b      	lsls	r3, r3, #1
    7306:	58e0      	ldr	r0, [r4, r3]
    7308:	2800      	cmp	r0, #0
    730a:	d052      	beq.n	73b2 <__register_exitproc+0xd2>
    730c:	6843      	ldr	r3, [r0, #4]
    730e:	2b1f      	cmp	r3, #31
    7310:	dc13      	bgt.n	733a <__register_exitproc+0x5a>
    7312:	1c5a      	adds	r2, r3, #1
    7314:	9201      	str	r2, [sp, #4]
    7316:	2e00      	cmp	r6, #0
    7318:	d128      	bne.n	736c <__register_exitproc+0x8c>
    731a:	9a01      	ldr	r2, [sp, #4]
    731c:	3302      	adds	r3, #2
    731e:	009b      	lsls	r3, r3, #2
    7320:	6042      	str	r2, [r0, #4]
    7322:	501f      	str	r7, [r3, r0]
    7324:	6828      	ldr	r0, [r5, #0]
    7326:	f000 f885 	bl	7434 <__retarget_lock_release_recursive>
    732a:	2000      	movs	r0, #0
    732c:	b003      	add	sp, #12
    732e:	bc3c      	pop	{r2, r3, r4, r5}
    7330:	4690      	mov	r8, r2
    7332:	4699      	mov	r9, r3
    7334:	46a2      	mov	sl, r4
    7336:	46ab      	mov	fp, r5
    7338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    733a:	4b25      	ldr	r3, [pc, #148]	; (73d0 <__register_exitproc+0xf0>)
    733c:	2b00      	cmp	r3, #0
    733e:	d03d      	beq.n	73bc <__register_exitproc+0xdc>
    7340:	20c8      	movs	r0, #200	; 0xc8
    7342:	0040      	lsls	r0, r0, #1
    7344:	f7f9 f8fa 	bl	53c <malloc>
    7348:	2800      	cmp	r0, #0
    734a:	d037      	beq.n	73bc <__register_exitproc+0xdc>
    734c:	22a4      	movs	r2, #164	; 0xa4
    734e:	2300      	movs	r3, #0
    7350:	0052      	lsls	r2, r2, #1
    7352:	58a1      	ldr	r1, [r4, r2]
    7354:	6043      	str	r3, [r0, #4]
    7356:	6001      	str	r1, [r0, #0]
    7358:	50a0      	str	r0, [r4, r2]
    735a:	3240      	adds	r2, #64	; 0x40
    735c:	5083      	str	r3, [r0, r2]
    735e:	3204      	adds	r2, #4
    7360:	5083      	str	r3, [r0, r2]
    7362:	3301      	adds	r3, #1
    7364:	9301      	str	r3, [sp, #4]
    7366:	2300      	movs	r3, #0
    7368:	2e00      	cmp	r6, #0
    736a:	d0d6      	beq.n	731a <__register_exitproc+0x3a>
    736c:	009a      	lsls	r2, r3, #2
    736e:	4692      	mov	sl, r2
    7370:	4482      	add	sl, r0
    7372:	464a      	mov	r2, r9
    7374:	2188      	movs	r1, #136	; 0x88
    7376:	4654      	mov	r4, sl
    7378:	5062      	str	r2, [r4, r1]
    737a:	22c4      	movs	r2, #196	; 0xc4
    737c:	0052      	lsls	r2, r2, #1
    737e:	4691      	mov	r9, r2
    7380:	4481      	add	r9, r0
    7382:	464a      	mov	r2, r9
    7384:	3987      	subs	r1, #135	; 0x87
    7386:	4099      	lsls	r1, r3
    7388:	6812      	ldr	r2, [r2, #0]
    738a:	468b      	mov	fp, r1
    738c:	430a      	orrs	r2, r1
    738e:	4694      	mov	ip, r2
    7390:	464a      	mov	r2, r9
    7392:	4661      	mov	r1, ip
    7394:	6011      	str	r1, [r2, #0]
    7396:	2284      	movs	r2, #132	; 0x84
    7398:	4641      	mov	r1, r8
    739a:	0052      	lsls	r2, r2, #1
    739c:	50a1      	str	r1, [r4, r2]
    739e:	2e02      	cmp	r6, #2
    73a0:	d1bb      	bne.n	731a <__register_exitproc+0x3a>
    73a2:	0002      	movs	r2, r0
    73a4:	465c      	mov	r4, fp
    73a6:	328d      	adds	r2, #141	; 0x8d
    73a8:	32ff      	adds	r2, #255	; 0xff
    73aa:	6811      	ldr	r1, [r2, #0]
    73ac:	430c      	orrs	r4, r1
    73ae:	6014      	str	r4, [r2, #0]
    73b0:	e7b3      	b.n	731a <__register_exitproc+0x3a>
    73b2:	0020      	movs	r0, r4
    73b4:	304d      	adds	r0, #77	; 0x4d
    73b6:	30ff      	adds	r0, #255	; 0xff
    73b8:	50e0      	str	r0, [r4, r3]
    73ba:	e7a7      	b.n	730c <__register_exitproc+0x2c>
    73bc:	6828      	ldr	r0, [r5, #0]
    73be:	f000 f839 	bl	7434 <__retarget_lock_release_recursive>
    73c2:	2001      	movs	r0, #1
    73c4:	4240      	negs	r0, r0
    73c6:	e7b1      	b.n	732c <__register_exitproc+0x4c>
    73c8:	20000498 	.word	0x20000498
    73cc:	00007828 	.word	0x00007828
    73d0:	0000053d 	.word	0x0000053d

000073d4 <register_fini>:
    73d4:	4b03      	ldr	r3, [pc, #12]	; (73e4 <register_fini+0x10>)
    73d6:	b510      	push	{r4, lr}
    73d8:	2b00      	cmp	r3, #0
    73da:	d002      	beq.n	73e2 <register_fini+0xe>
    73dc:	4802      	ldr	r0, [pc, #8]	; (73e8 <register_fini+0x14>)
    73de:	f000 f805 	bl	73ec <atexit>
    73e2:	bd10      	pop	{r4, pc}
    73e4:	00000000 	.word	0x00000000
    73e8:	000073fd 	.word	0x000073fd

000073ec <atexit>:
    73ec:	b510      	push	{r4, lr}
    73ee:	0001      	movs	r1, r0
    73f0:	2300      	movs	r3, #0
    73f2:	2200      	movs	r2, #0
    73f4:	2000      	movs	r0, #0
    73f6:	f7ff ff73 	bl	72e0 <__register_exitproc>
    73fa:	bd10      	pop	{r4, pc}

000073fc <__libc_fini_array>:
    73fc:	b570      	push	{r4, r5, r6, lr}
    73fe:	4b09      	ldr	r3, [pc, #36]	; (7424 <__libc_fini_array+0x28>)
    7400:	4c09      	ldr	r4, [pc, #36]	; (7428 <__libc_fini_array+0x2c>)
    7402:	1ae4      	subs	r4, r4, r3
    7404:	10a4      	asrs	r4, r4, #2
    7406:	d009      	beq.n	741c <__libc_fini_array+0x20>
    7408:	4a08      	ldr	r2, [pc, #32]	; (742c <__libc_fini_array+0x30>)
    740a:	18a5      	adds	r5, r4, r2
    740c:	00ad      	lsls	r5, r5, #2
    740e:	18ed      	adds	r5, r5, r3
    7410:	682b      	ldr	r3, [r5, #0]
    7412:	3c01      	subs	r4, #1
    7414:	4798      	blx	r3
    7416:	3d04      	subs	r5, #4
    7418:	2c00      	cmp	r4, #0
    741a:	d1f9      	bne.n	7410 <__libc_fini_array+0x14>
    741c:	f000 fa14 	bl	7848 <_fini>
    7420:	bd70      	pop	{r4, r5, r6, pc}
    7422:	46c0      	nop			; (mov r8, r8)
    7424:	00007854 	.word	0x00007854
    7428:	00007858 	.word	0x00007858
    742c:	3fffffff 	.word	0x3fffffff

00007430 <__retarget_lock_acquire_recursive>:
    7430:	4770      	bx	lr
    7432:	46c0      	nop			; (mov r8, r8)

00007434 <__retarget_lock_release_recursive>:
    7434:	4770      	bx	lr
    7436:	46c0      	nop			; (mov r8, r8)

00007438 <_ZTV6Stream>:
	...
    7440:	0541 0000 0609 0000 0115 0000 0119 0000     A...............
    7450:	0541 0000 0541 0000 0541 0000               A...A...A...

0000745c <_ZTV9CDC_Class>:
	...
    7464:	0183 0000 0331 0000 0115 0000 02b1 0000     ....1...........
    7474:	01ab 0000 0219 0000 0159 0000 0241 0000     ........Y...A...
    7484:	03a1 0000 02c1 0000 7469 7320 6f68 6c75     ........it shoul
    7494:	2064 6f77 6b72 0000 7469 6420 656f 2073     d work..it does 
    74a4:	6f77 6b72 0000 0000 0a0d 0000 7830 2e25     work........0x%.
    74b4:	5838 0000 616e 006e 6e69 0066 766f 0066     8X..nan.inf.ovf.
    74c4:	2e2e 682f 6c61 732f 6372 682f 6c61 645f     ../hal/src/hal_d
    74d4:	6361 735f 6e79 2e63 0063 0000 2e2e 682f     ac_sync.c...../h
    74e4:	6c61 732f 6372 682f 6c61 735f 6970 6d5f     al/src/hal_spi_m
    74f4:	735f 6e79 2e63 0063 2e2e 682f 6c61 732f     _sync.c.../hal/s
    7504:	6372 682f 6c61 745f 6d69 7265 632e 0000     rc/hal_timer.c..
    7514:	2e2e 682f 6c61 732f 6372 682f 6c61 755f     ../hal/src/hal_u
    7524:	6173 7472 615f 7973 636e 632e 0000 0000     sart_async.c....
    7534:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    7544:	752f 6974 736c 6c5f 7369 2e74 0063 0000     /utils_list.c...
    7554:	2e2e 682f 6c61 752f 6974 736c 732f 6372     ../hal/utils/src
    7564:	752f 6974 736c 725f 6e69 6267 6675 6566     /utils_ringbuffe
    7574:	2e72 0063 2e2e 682f 6c70 642f 6361 682f     r.c.../hpl/dac/h
    7584:	6c70 645f 6361 632e 0000 0000               pl_dac.c....

00007590 <_map>:
    7590:	000e 0000 000e 0000 2e2e 682f 6c70 652f     ........../hpl/e
    75a0:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

000075b0 <_usarts>:
    75b0:	0003 0000 0004 4010 0000 0003 ff2e 0000     .......@........
    75c0:	0000 0000                                   ....

000075c4 <_i2cms>:
	...

000075dc <_i2css>:
	...

000075ec <sercomspi_regs>:
    75ec:	000c 0020 0000 0002 0000 0000 003b 01ff     .. .........;...
    75fc:	0c00 2000 0000 0200 0000 0000 0500 ff00     ... ............
    760c:	0101 000c 0030 0000 0002 0000 0000 0017     ....0...........
    761c:	01ff 0002 2e2e 682f 6c70 732f 7265 6f63     ....../hpl/serco
    762c:	2f6d 7068 5f6c 6573 6372 6d6f 632e 0000     m/hpl_sercom.c..

0000763c <_tcs>:
    763c:	0003 0368 0000 0000 0000 0000 1770 0000     ..h.........p...
    764c:	0000 0000 0004 0368 0000 0000 0000 0000     ......h.........
    765c:	007d 0000 0000 0000 2e2e 682f 6c70 742f     }........./hpl/t
    766c:	2f63 7068 5f6c 6374 632e 0000 4a25 0000     c/hpl_tc.c..%J..
    767c:	0804 0000                                   ....

00007680 <_usb_ep_cfgs>:
    7680:	0ae8 2000 0000 0000 0040 0000 0aa8 2000     ... ....@...... 
    7690:	0000 0000 0040 0000 0a68 2000 0000 0000     ....@...h.. ....
    76a0:	0040 0000 0a28 2000 0000 0000 0040 0000     @...(.. ....@...
    76b0:	09e8 2000 0000 0000 0040 0000 09a8 2000     ... ....@...... 
    76c0:	0000 0000 0040 0000 0968 2000 0000 0000     ....@...h.. ....
    76d0:	0040 0000 0928 2000 0000 0000 0040 0000     @...(.. ....@...
    76e0:	4b1a 0000 4af6 0000 4b1a 0000 4afc 0000     .K...J...K...J..
    76f0:	4b1a 0000 4ac6 0000 4b1a 0000 4b1a 0000     .K...J...K...K..
    7700:	4b1a 0000 4ad8 0000 4b1a 0000 4b02 0000     .K...J...K...K..
    7710:	2e2e 752f 6273 642f 7665 6369 2f65 7375     ../usb/device/us
    7720:	6462 2e63 0063 0000 537c 0000 534c 0000     bdc.c...|S..LS..
    7730:	535e 0000 52a0 0000 535e 0000 5342 0000     ^S...R..^S..BS..
    7740:	535e 0000 52a0 0000 534c 0000 534c 0000     ^S...R..LS..LS..
    7750:	5342 0000 52a0 0000 52a8 0000 52a8 0000     BS...R...R...R..
    7760:	52a8 0000 5364 0000 534c 0000 534c 0000     .R..dS..LS..LS..
    7770:	5320 0000 5404 0000 5320 0000 5342 0000      S...T.. S..BS..
    7780:	5320 0000 5404 0000 534c 0000 534c 0000      S...T..LS..LS..
    7790:	5342 0000 5404 0000 52a8 0000 52a8 0000     BS...T...R...R..
    77a0:	52a8 0000 540e 0000 5d38 0000 5d1a 0000     .R...T..8]...]..
    77b0:	5cd4 0000 5bf2 0000 5cd4 0000 5d0c 0000     .\...[...\...]..
    77c0:	5cd4 0000 5bf2 0000 5d1a 0000 5d1a 0000     .\...[...]...]..
    77d0:	5d0c 0000 5bf2 0000 5bea 0000 5bea 0000     .]...[...[...[..
    77e0:	5bea 0000 5f50 0000 6598 0000 6458 0000     .[..P_...e..Xd..
    77f0:	6458 0000 6454 0000 6570 0000 6570 0000     Xd..Td..pe..pe..
    7800:	6562 0000 6454 0000 6570 0000 6562 0000     be..Td..pe..be..
    7810:	6570 0000 6454 0000 6578 0000 6578 0000     pe..Td..xe..xe..
    7820:	6578 0000 677c 0000                         xe..|g..

00007828 <_global_impure_ptr>:
    7828:	0070 2000                                   p.. 

0000782c <_init>:
    782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    782e:	46c0      	nop			; (mov r8, r8)
    7830:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7832:	bc08      	pop	{r3}
    7834:	469e      	mov	lr, r3
    7836:	4770      	bx	lr

00007838 <__init_array_start>:
    7838:	000073d5 	.word	0x000073d5

0000783c <__frame_dummy_init_array_entry>:
    783c:	000000dd 00000461 00000c79              ....a...y...

00007848 <_fini>:
    7848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    784a:	46c0      	nop			; (mov r8, r8)
    784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    784e:	bc08      	pop	{r3}
    7850:	469e      	mov	lr, r3
    7852:	4770      	bx	lr

00007854 <__fini_array_start>:
    7854:	000000b5 	.word	0x000000b5
