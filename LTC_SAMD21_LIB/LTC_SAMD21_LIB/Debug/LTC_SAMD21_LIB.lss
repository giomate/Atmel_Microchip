
LTC_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010b20  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00010b20  00010b20  00020b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a20  20000000  00010b28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b38  20000a20  00011548  00030a20  2**3
                  ALLOC
  4 .stack        00002000  20001558  00012080  00030a20  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY
  7 .debug_info   000595ad  00000000  00000000  00030aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008e23  00000000  00000000  0008a04e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001dbd2  00000000  00000000  00092e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001950  00000000  00000000  000b0a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b20  00000000  00000000  000b2393  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002886b  00000000  00000000  000b3eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024041  00000000  00000000  000dc71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b989  00000000  00000000  0010075f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005bec  00000000  00000000  0019c0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  001a1cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  001a1d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 35 00 20 19 01 00 00 15 01 00 00 15 01 00 00     X5. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 19 32 00 00 15 01 00 00 15 01 00 00     .....2..........
      5c:	c5 50 00 00 15 01 00 00 15 01 00 00 15 01 00 00     .P..............
      6c:	15 01 00 00 59 36 00 00 15 01 00 00 15 01 00 00     ....Y6..........
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 3d 00 00     .............=..
      8c:	29 3d 00 00 15 01 00 00 15 01 00 00 15 01 00 00     )=..............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a20 	.word	0x20000a20
      d4:	00000000 	.word	0x00000000
      d8:	00010b28 	.word	0x00010b28

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a24 	.word	0x20000a24
     108:	00010b28 	.word	0x00010b28
     10c:	00010b28 	.word	0x00010b28
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00010b28 	.word	0x00010b28
     1ac:	20000000 	.word	0x20000000
     1b0:	20000a20 	.word	0x20000a20
     1b4:	20000a20 	.word	0x20000a20
     1b8:	20001558 	.word	0x20001558
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	0000b3d9 	.word	0x0000b3d9
     1d8:	000004a5 	.word	0x000004a5

000001dc <_Z41__static_initialization_and_destruction_0ii>:
			delay_ms(100);
		}
		
	}
	return enable;
}
     1dc:	b570      	push	{r4, r5, r6, lr}
     1de:	2801      	cmp	r0, #1
     1e0:	d000      	beq.n	1e4 <_Z41__static_initialization_and_destruction_0ii+0x8>
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	4b0f      	ldr	r3, [pc, #60]	; (224 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     1e6:	4299      	cmp	r1, r3
     1e8:	d1fb      	bne.n	1e2 <_Z41__static_initialization_and_destruction_0ii+0x6>
static lmx2694_Handler local_lmx;
     1ea:	4c0f      	ldr	r4, [pc, #60]	; (228 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     1ec:	0020      	movs	r0, r4
     1ee:	4b0f      	ldr	r3, [pc, #60]	; (22c <_Z41__static_initialization_and_destruction_0ii+0x50>)
     1f0:	4798      	blx	r3
     1f2:	4d0f      	ldr	r5, [pc, #60]	; (230 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     1f4:	002a      	movs	r2, r5
     1f6:	490f      	ldr	r1, [pc, #60]	; (234 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     1f8:	0020      	movs	r0, r4
     1fa:	4e0f      	ldr	r6, [pc, #60]	; (238 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     1fc:	47b0      	blx	r6
static ADF5610_Driver local_adf;
     1fe:	3458      	adds	r4, #88	; 0x58
     200:	0020      	movs	r0, r4
     202:	4b0e      	ldr	r3, [pc, #56]	; (23c <_Z41__static_initialization_and_destruction_0ii+0x60>)
     204:	4798      	blx	r3
     206:	002a      	movs	r2, r5
     208:	490d      	ldr	r1, [pc, #52]	; (240 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     20a:	0020      	movs	r0, r4
     20c:	47b0      	blx	r6
static ZCD_Handler local_counter;
     20e:	4c0d      	ldr	r4, [pc, #52]	; (244 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     210:	3460      	adds	r4, #96	; 0x60
     212:	0020      	movs	r0, r4
     214:	4b0c      	ldr	r3, [pc, #48]	; (248 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     216:	4798      	blx	r3
     218:	002a      	movs	r2, r5
     21a:	490c      	ldr	r1, [pc, #48]	; (24c <_Z41__static_initialization_and_destruction_0ii+0x70>)
     21c:	0020      	movs	r0, r4
     21e:	47b0      	blx	r6
}
     220:	e7df      	b.n	1e2 <_Z41__static_initialization_and_destruction_0ii+0x6>
     222:	46c0      	nop			; (mov r8, r8)
     224:	0000ffff 	.word	0x0000ffff
     228:	20000a40 	.word	0x20000a40
     22c:	00000e69 	.word	0x00000e69
     230:	20000000 	.word	0x20000000
     234:	00000ea9 	.word	0x00000ea9
     238:	00006a25 	.word	0x00006a25
     23c:	00000589 	.word	0x00000589
     240:	000005d9 	.word	0x000005d9
     244:	20000bc0 	.word	0x20000bc0
     248:	000065bd 	.word	0x000065bd
     24c:	000065e1 	.word	0x000065e1

00000250 <_ZN15LTC5548_HANDLERC1Ev>:
LTC5548_HANDLER::LTC5548_HANDLER() {
     250:	2300      	movs	r3, #0
     252:	6143      	str	r3, [r0, #20]
     254:	6183      	str	r3, [r0, #24]
     256:	61c3      	str	r3, [r0, #28]
     258:	6203      	str	r3, [r0, #32]
}
     25a:	4770      	bx	lr

0000025c <_ZN15LTC5548_HANDLERD1Ev>:
}
     25c:	4770      	bx	lr
	...

00000260 <_ZN15LTC5548_HANDLER8Start_RFEv>:
bool LTC5548_HANDLER::Start_RF(void){
     260:	b510      	push	{r4, lr}
     262:	0004      	movs	r4, r0
		while(!lmx->Init()){
     264:	6820      	ldr	r0, [r4, #0]
     266:	4b08      	ldr	r3, [pc, #32]	; (288 <_ZN15LTC5548_HANDLER8Start_RFEv+0x28>)
     268:	4798      	blx	r3
     26a:	2800      	cmp	r0, #0
     26c:	d109      	bne.n	282 <_ZN15LTC5548_HANDLER8Start_RFEv+0x22>
			delay_ms(100);
     26e:	3064      	adds	r0, #100	; 0x64
     270:	4b06      	ldr	r3, [pc, #24]	; (28c <_ZN15LTC5548_HANDLER8Start_RFEv+0x2c>)
     272:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     274:	2180      	movs	r1, #128	; 0x80
     276:	05c9      	lsls	r1, r1, #23
     278:	239c      	movs	r3, #156	; 0x9c
     27a:	22c0      	movs	r2, #192	; 0xc0
     27c:	05d2      	lsls	r2, r2, #23
     27e:	50d1      	str	r1, [r2, r3]
     280:	e7f0      	b.n	264 <_ZN15LTC5548_HANDLER8Start_RFEv+0x4>
}
     282:	2001      	movs	r0, #1
     284:	bd10      	pop	{r4, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	00001511 	.word	0x00001511
     28c:	0000206d 	.word	0x0000206d

00000290 <_ZN15LTC5548_HANDLER8Start_LOEv>:
bool LTC5548_HANDLER::Start_LO(void){
     290:	b510      	push	{r4, lr}
     292:	0004      	movs	r4, r0
	while(!adf->Init()){
     294:	6860      	ldr	r0, [r4, #4]
     296:	4b08      	ldr	r3, [pc, #32]	; (2b8 <_ZN15LTC5548_HANDLER8Start_LOEv+0x28>)
     298:	4798      	blx	r3
     29a:	2800      	cmp	r0, #0
     29c:	d109      	bne.n	2b2 <_ZN15LTC5548_HANDLER8Start_LOEv+0x22>
		delay_ms(100);
     29e:	3064      	adds	r0, #100	; 0x64
     2a0:	4b06      	ldr	r3, [pc, #24]	; (2bc <_ZN15LTC5548_HANDLER8Start_LOEv+0x2c>)
     2a2:	4798      	blx	r3
     2a4:	2180      	movs	r1, #128	; 0x80
     2a6:	05c9      	lsls	r1, r1, #23
     2a8:	239c      	movs	r3, #156	; 0x9c
     2aa:	22c0      	movs	r2, #192	; 0xc0
     2ac:	05d2      	lsls	r2, r2, #23
     2ae:	50d1      	str	r1, [r2, r3]
     2b0:	e7f0      	b.n	294 <_ZN15LTC5548_HANDLER8Start_LOEv+0x4>
}
     2b2:	2001      	movs	r0, #1
     2b4:	bd10      	pop	{r4, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	00000cc9 	.word	0x00000cc9
     2bc:	0000206d 	.word	0x0000206d

000002c0 <_ZN15LTC5548_HANDLER10Set_EnableEb>:
	enable=st;
     2c0:	7301      	strb	r1, [r0, #12]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     2c2:	2900      	cmp	r1, #0
     2c4:	d107      	bne.n	2d6 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x16>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c6:	2080      	movs	r0, #128	; 0x80
     2c8:	00c0      	lsls	r0, r0, #3
     2ca:	2394      	movs	r3, #148	; 0x94
     2cc:	22c0      	movs	r2, #192	; 0xc0
     2ce:	05d2      	lsls	r2, r2, #23
     2d0:	50d0      	str	r0, [r2, r3]
}
     2d2:	0008      	movs	r0, r1
     2d4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2d6:	2080      	movs	r0, #128	; 0x80
     2d8:	00c0      	lsls	r0, r0, #3
     2da:	2398      	movs	r3, #152	; 0x98
     2dc:	22c0      	movs	r2, #192	; 0xc0
     2de:	05d2      	lsls	r2, r2, #23
     2e0:	50d0      	str	r0, [r2, r3]
     2e2:	e7f6      	b.n	2d2 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x12>

000002e4 <_ZN15LTC5548_HANDLER11Start_MixerEv>:
bool LTC5548_HANDLER::Start_Mixer(void){
     2e4:	b510      	push	{r4, lr}
     2e6:	0004      	movs	r4, r0
	if(Start_LO()){
     2e8:	4b1d      	ldr	r3, [pc, #116]	; (360 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x7c>)
     2ea:	4798      	blx	r3
     2ec:	2800      	cmp	r0, #0
     2ee:	d030      	beq.n	352 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x6e>
		adf->Set_Target_Frequency(CENTER_FREQUENCY);
     2f0:	491c      	ldr	r1, [pc, #112]	; (364 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x80>)
     2f2:	6860      	ldr	r0, [r4, #4]
     2f4:	4b1c      	ldr	r3, [pc, #112]	; (368 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x84>)
     2f6:	4798      	blx	r3
		while (!adf->Is_Locked())
     2f8:	6860      	ldr	r0, [r4, #4]
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <_ZN15LTC5548_HANDLER11Start_MixerEv+0x88>)
     2fc:	4798      	blx	r3
     2fe:	2800      	cmp	r0, #0
     300:	d107      	bne.n	312 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x2e>
			delay_ms(100);
     302:	3064      	adds	r0, #100	; 0x64
     304:	4b1a      	ldr	r3, [pc, #104]	; (370 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x8c>)
     306:	4798      	blx	r3
			adf->Set_Target_Frequency(CENTER_FREQUENCY);
     308:	4916      	ldr	r1, [pc, #88]	; (364 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x80>)
     30a:	6860      	ldr	r0, [r4, #4]
     30c:	4b16      	ldr	r3, [pc, #88]	; (368 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x84>)
     30e:	4798      	blx	r3
		while (!adf->Is_Locked())
     310:	e7f2      	b.n	2f8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x14>
		if (Start_RF())
     312:	0020      	movs	r0, r4
     314:	4b17      	ldr	r3, [pc, #92]	; (374 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x90>)
     316:	4798      	blx	r3
     318:	2800      	cmp	r0, #0
     31a:	d015      	beq.n	348 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x64>
			lmx->Set_Target_Frequency(CENTER_FREQUENCY+(BAND_WIDTH/BAND_WIDTH_FRACTION));
     31c:	4911      	ldr	r1, [pc, #68]	; (364 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x80>)
     31e:	6820      	ldr	r0, [r4, #0]
     320:	4b15      	ldr	r3, [pc, #84]	; (378 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x94>)
     322:	4798      	blx	r3
			while (!lmx->Is_Locked())
     324:	6820      	ldr	r0, [r4, #0]
     326:	4b15      	ldr	r3, [pc, #84]	; (37c <_ZN15LTC5548_HANDLER11Start_MixerEv+0x98>)
     328:	4798      	blx	r3
     32a:	2800      	cmp	r0, #0
     32c:	d107      	bne.n	33e <_ZN15LTC5548_HANDLER11Start_MixerEv+0x5a>
				delay_ms(100);
     32e:	3064      	adds	r0, #100	; 0x64
     330:	4b0f      	ldr	r3, [pc, #60]	; (370 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x8c>)
     332:	4798      	blx	r3
				lmx->Set_Target_Frequency(CENTER_FREQUENCY+(BAND_WIDTH/BAND_WIDTH_FRACTION));
     334:	490b      	ldr	r1, [pc, #44]	; (364 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x80>)
     336:	6820      	ldr	r0, [r4, #0]
     338:	4b0f      	ldr	r3, [pc, #60]	; (378 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x94>)
     33a:	4798      	blx	r3
			while (!lmx->Is_Locked())
     33c:	e7f2      	b.n	324 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x40>
			Set_Enable(true);
     33e:	2101      	movs	r1, #1
     340:	0020      	movs	r0, r4
     342:	4b0f      	ldr	r3, [pc, #60]	; (380 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     344:	4798      	blx	r3
     346:	e008      	b.n	35a <_ZN15LTC5548_HANDLER11Start_MixerEv+0x76>
			Set_Enable(false);
     348:	2100      	movs	r1, #0
     34a:	0020      	movs	r0, r4
     34c:	4b0c      	ldr	r3, [pc, #48]	; (380 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     34e:	4798      	blx	r3
     350:	e003      	b.n	35a <_ZN15LTC5548_HANDLER11Start_MixerEv+0x76>
		Set_Enable(false);
     352:	2100      	movs	r1, #0
     354:	0020      	movs	r0, r4
     356:	4b0a      	ldr	r3, [pc, #40]	; (380 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     358:	4798      	blx	r3
	return enable;
     35a:	7b20      	ldrb	r0, [r4, #12]
}
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000291 	.word	0x00000291
     364:	45610000 	.word	0x45610000
     368:	00000d65 	.word	0x00000d65
     36c:	00000641 	.word	0x00000641
     370:	0000206d 	.word	0x0000206d
     374:	00000261 	.word	0x00000261
     378:	0000160d 	.word	0x0000160d
     37c:	00001439 	.word	0x00001439
     380:	000002c1 	.word	0x000002c1

00000384 <_ZN15LTC5548_HANDLER4InitEv>:
bool LTC5548_HANDLER::Init(void){
     384:	b510      	push	{r4, lr}
     386:	0004      	movs	r4, r0
	Set_Enable(false);
     388:	2100      	movs	r1, #0
     38a:	4b0a      	ldr	r3, [pc, #40]	; (3b4 <_ZN15LTC5548_HANDLER4InitEv+0x30>)
     38c:	4798      	blx	r3
	lmx=&local_lmx;
     38e:	4b0a      	ldr	r3, [pc, #40]	; (3b8 <_ZN15LTC5548_HANDLER4InitEv+0x34>)
     390:	6023      	str	r3, [r4, #0]
	adf=&local_adf;
     392:	3358      	adds	r3, #88	; 0x58
     394:	6063      	str	r3, [r4, #4]
	zcd=&local_counter;
     396:	4b09      	ldr	r3, [pc, #36]	; (3bc <_ZN15LTC5548_HANDLER4InitEv+0x38>)
     398:	3360      	adds	r3, #96	; 0x60
     39a:	60a3      	str	r3, [r4, #8]
	Start_Mixer();
     39c:	0020      	movs	r0, r4
     39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_ZN15LTC5548_HANDLER4InitEv+0x3c>)
     3a0:	4798      	blx	r3
	zcd->Init();
     3a2:	68a0      	ldr	r0, [r4, #8]
     3a4:	4b07      	ldr	r3, [pc, #28]	; (3c4 <_ZN15LTC5548_HANDLER4InitEv+0x40>)
     3a6:	4798      	blx	r3
	return !enable;
     3a8:	7b20      	ldrb	r0, [r4, #12]
     3aa:	2301      	movs	r3, #1
     3ac:	4058      	eors	r0, r3
     3ae:	b2c0      	uxtb	r0, r0
}
     3b0:	bd10      	pop	{r4, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	000002c1 	.word	0x000002c1
     3b8:	20000a40 	.word	0x20000a40
     3bc:	20000bc0 	.word	0x20000bc0
     3c0:	000002e5 	.word	0x000002e5
     3c4:	000065f5 	.word	0x000065f5

000003c8 <_ZN15LTC5548_HANDLER21Read_Frequency_ValuesEv>:
void LTC5548_HANDLER::Read_Frequency_Values(void){
     3c8:	b510      	push	{r4, lr}
     3ca:	0004      	movs	r4, r0
	tone=zcd->Get_Tone();
     3cc:	6880      	ldr	r0, [r0, #8]
     3ce:	4b02      	ldr	r3, [pc, #8]	; (3d8 <_ZN15LTC5548_HANDLER21Read_Frequency_ValuesEv+0x10>)
     3d0:	4798      	blx	r3
     3d2:	6260      	str	r0, [r4, #36]	; 0x24
}
     3d4:	bd10      	pop	{r4, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	00006615 	.word	0x00006615

000003dc <_ZN15LTC5548_HANDLER11Check_MixerEv>:
bool LTC5548_HANDLER::Check_Mixer(void){
     3dc:	b510      	push	{r4, lr}
     3de:	0004      	movs	r4, r0
	if(enable){
     3e0:	7b03      	ldrb	r3, [r0, #12]
     3e2:	2b00      	cmp	r3, #0
     3e4:	d015      	beq.n	412 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x36>
		if(adf->Is_Locked()){
     3e6:	6840      	ldr	r0, [r0, #4]
     3e8:	4b14      	ldr	r3, [pc, #80]	; (43c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x60>)
     3ea:	4798      	blx	r3
     3ec:	2800      	cmp	r0, #0
     3ee:	d001      	beq.n	3f4 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x18>
	return enable;
     3f0:	7b20      	ldrb	r0, [r4, #12]
}
     3f2:	bd10      	pop	{r4, pc}
			Set_Enable(false);
     3f4:	2100      	movs	r1, #0
     3f6:	0020      	movs	r0, r4
     3f8:	4b11      	ldr	r3, [pc, #68]	; (440 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x64>)
     3fa:	4798      	blx	r3
			adf->Init();
     3fc:	6860      	ldr	r0, [r4, #4]
     3fe:	4b11      	ldr	r3, [pc, #68]	; (444 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x68>)
     400:	4798      	blx	r3
			adf->Set_Target_Frequency(CENTER_FREQUENCY);
     402:	4911      	ldr	r1, [pc, #68]	; (448 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x6c>)
     404:	6860      	ldr	r0, [r4, #4]
     406:	4b11      	ldr	r3, [pc, #68]	; (44c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x70>)
     408:	4798      	blx	r3
			delay_ms(100);
     40a:	2064      	movs	r0, #100	; 0x64
     40c:	4b10      	ldr	r3, [pc, #64]	; (450 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     40e:	4798      	blx	r3
     410:	e7ee      	b.n	3f0 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x14>
		if (adf->Is_Locked())
     412:	6840      	ldr	r0, [r0, #4]
     414:	4b09      	ldr	r3, [pc, #36]	; (43c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x60>)
     416:	4798      	blx	r3
     418:	2800      	cmp	r0, #0
     41a:	d10a      	bne.n	432 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x56>
			adf->Init();
     41c:	6860      	ldr	r0, [r4, #4]
     41e:	4b09      	ldr	r3, [pc, #36]	; (444 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x68>)
     420:	4798      	blx	r3
			adf->Set_Target_Frequency(CENTER_FREQUENCY);
     422:	4909      	ldr	r1, [pc, #36]	; (448 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x6c>)
     424:	6860      	ldr	r0, [r4, #4]
     426:	4b09      	ldr	r3, [pc, #36]	; (44c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x70>)
     428:	4798      	blx	r3
			delay_ms(100);
     42a:	2064      	movs	r0, #100	; 0x64
     42c:	4b08      	ldr	r3, [pc, #32]	; (450 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     42e:	4798      	blx	r3
     430:	e7de      	b.n	3f0 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x14>
			Set_Enable(true);
     432:	2101      	movs	r1, #1
     434:	0020      	movs	r0, r4
     436:	4b02      	ldr	r3, [pc, #8]	; (440 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x64>)
     438:	4798      	blx	r3
     43a:	e7d9      	b.n	3f0 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x14>
     43c:	00000641 	.word	0x00000641
     440:	000002c1 	.word	0x000002c1
     444:	00000cc9 	.word	0x00000cc9
     448:	45610000 	.word	0x45610000
     44c:	00000d65 	.word	0x00000d65
     450:	0000206d 	.word	0x0000206d

00000454 <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev>:
}
     454:	b510      	push	{r4, lr}
     456:	4902      	ldr	r1, [pc, #8]	; (460 <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev+0xc>)
     458:	2001      	movs	r0, #1
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev+0x10>)
     45c:	4798      	blx	r3
     45e:	bd10      	pop	{r4, pc}
     460:	0000ffff 	.word	0x0000ffff
     464:	000001dd 	.word	0x000001dd

00000468 <_Z41__static_initialization_and_destruction_0ii>:
		dac_value=dir?0:0x3ff;
		dac_sync_write(&DAC_0, 0, &dac_value, 1);
		
		dir=!dir;
	}
}
     468:	b510      	push	{r4, lr}
     46a:	2801      	cmp	r0, #1
     46c:	d000      	beq.n	470 <_Z41__static_initialization_and_destruction_0ii+0x8>
     46e:	bd10      	pop	{r4, pc}
     470:	4b06      	ldr	r3, [pc, #24]	; (48c <_Z41__static_initialization_and_destruction_0ii+0x24>)
     472:	4299      	cmp	r1, r3
     474:	d1fb      	bne.n	46e <_Z41__static_initialization_and_destruction_0ii+0x6>
static LTC5548_HANDLER	ltc;
     476:	4c06      	ldr	r4, [pc, #24]	; (490 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     478:	0020      	movs	r0, r4
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     47c:	4798      	blx	r3
     47e:	4a06      	ldr	r2, [pc, #24]	; (498 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     480:	4906      	ldr	r1, [pc, #24]	; (49c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     482:	0020      	movs	r0, r4
     484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     486:	4798      	blx	r3
}
     488:	e7f1      	b.n	46e <_Z41__static_initialization_and_destruction_0ii+0x6>
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	0000ffff 	.word	0x0000ffff
     490:	20000c34 	.word	0x20000c34
     494:	00000251 	.word	0x00000251
     498:	20000000 	.word	0x20000000
     49c:	0000025d 	.word	0x0000025d
     4a0:	00006a25 	.word	0x00006a25

000004a4 <main>:
{
     4a4:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
     4a6:	4b16      	ldr	r3, [pc, #88]	; (500 <main+0x5c>)
     4a8:	4798      	blx	r3
		usb.Init();
     4aa:	4c16      	ldr	r4, [pc, #88]	; (504 <main+0x60>)
     4ac:	0020      	movs	r0, r4
     4ae:	4b16      	ldr	r3, [pc, #88]	; (508 <main+0x64>)
     4b0:	4798      	blx	r3
		delay_ms(100);
     4b2:	2064      	movs	r0, #100	; 0x64
     4b4:	4b15      	ldr	r3, [pc, #84]	; (50c <main+0x68>)
     4b6:	4798      	blx	r3
		usb.println("initiating LTC Mixer");
     4b8:	4915      	ldr	r1, [pc, #84]	; (510 <main+0x6c>)
     4ba:	0020      	movs	r0, r4
     4bc:	4b15      	ldr	r3, [pc, #84]	; (514 <main+0x70>)
     4be:	4798      	blx	r3
	dac_sync_enable_channel(&DAC_0, 0);
     4c0:	2100      	movs	r1, #0
     4c2:	4815      	ldr	r0, [pc, #84]	; (518 <main+0x74>)
     4c4:	4b15      	ldr	r3, [pc, #84]	; (51c <main+0x78>)
     4c6:	4798      	blx	r3
	ltc.Init();
     4c8:	4815      	ldr	r0, [pc, #84]	; (520 <main+0x7c>)
     4ca:	4b16      	ldr	r3, [pc, #88]	; (524 <main+0x80>)
     4cc:	4798      	blx	r3
	bool dir=true;
     4ce:	2401      	movs	r4, #1
     4d0:	e00b      	b.n	4ea <main+0x46>
		dac_value=dir?0:0x3ff;
     4d2:	4b15      	ldr	r3, [pc, #84]	; (528 <main+0x84>)
     4d4:	4a12      	ldr	r2, [pc, #72]	; (520 <main+0x7c>)
     4d6:	8513      	strh	r3, [r2, #40]	; 0x28
		dac_sync_write(&DAC_0, 0, &dac_value, 1);
     4d8:	3228      	adds	r2, #40	; 0x28
     4da:	2301      	movs	r3, #1
     4dc:	2100      	movs	r1, #0
     4de:	480e      	ldr	r0, [pc, #56]	; (518 <main+0x74>)
     4e0:	4d12      	ldr	r5, [pc, #72]	; (52c <main+0x88>)
     4e2:	47a8      	blx	r5
		dir=!dir;
     4e4:	2301      	movs	r3, #1
     4e6:	405c      	eors	r4, r3
     4e8:	b2e4      	uxtb	r4, r4
		ltc.Read_Frequency_Values();
     4ea:	4d0d      	ldr	r5, [pc, #52]	; (520 <main+0x7c>)
     4ec:	0028      	movs	r0, r5
     4ee:	4b10      	ldr	r3, [pc, #64]	; (530 <main+0x8c>)
     4f0:	4798      	blx	r3
		ltc.Check_Mixer();
     4f2:	0028      	movs	r0, r5
     4f4:	4b0f      	ldr	r3, [pc, #60]	; (534 <main+0x90>)
     4f6:	4798      	blx	r3
		dac_value=dir?0:0x3ff;
     4f8:	2c00      	cmp	r4, #0
     4fa:	d0ea      	beq.n	4d2 <main+0x2e>
     4fc:	2300      	movs	r3, #0
     4fe:	e7e9      	b.n	4d4 <main+0x30>
     500:	00001811 	.word	0x00001811
     504:	20001334 	.word	0x20001334
     508:	000060d5 	.word	0x000060d5
     50c:	0000206d 	.word	0x0000206d
     510:	00010050 	.word	0x00010050
     514:	00006191 	.word	0x00006191
     518:	20001488 	.word	0x20001488
     51c:	00001f85 	.word	0x00001f85
     520:	20000c34 	.word	0x20000c34
     524:	00000385 	.word	0x00000385
     528:	000003ff 	.word	0x000003ff
     52c:	00001fbd 	.word	0x00001fbd
     530:	000003c9 	.word	0x000003c9
     534:	000003dd 	.word	0x000003dd

00000538 <_GLOBAL__sub_I_main>:
}
     538:	b510      	push	{r4, lr}
     53a:	4902      	ldr	r1, [pc, #8]	; (544 <_GLOBAL__sub_I_main+0xc>)
     53c:	2001      	movs	r0, #1
     53e:	4b02      	ldr	r3, [pc, #8]	; (548 <_GLOBAL__sub_I_main+0x10>)
     540:	4798      	blx	r3
     542:	bd10      	pop	{r4, pc}
     544:	0000ffff 	.word	0x0000ffff
     548:	00000469 	.word	0x00000469

0000054c <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		delay_ms(1);
	}
	
}
     54c:	b510      	push	{r4, lr}
     54e:	2801      	cmp	r0, #1
     550:	d000      	beq.n	554 <_Z41__static_initialization_and_destruction_0ii+0x8>
     552:	bd10      	pop	{r4, pc}
     554:	4b06      	ldr	r3, [pc, #24]	; (570 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     556:	4299      	cmp	r1, r3
     558:	d1fb      	bne.n	552 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class_ADF staticSPI;
     55a:	4c06      	ldr	r4, [pc, #24]	; (574 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     55c:	0020      	movs	r0, r4
     55e:	4b06      	ldr	r3, [pc, #24]	; (578 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     560:	4798      	blx	r3
     562:	4a06      	ldr	r2, [pc, #24]	; (57c <_Z41__static_initialization_and_destruction_0ii+0x30>)
     564:	4906      	ldr	r1, [pc, #24]	; (580 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     566:	0020      	movs	r0, r4
     568:	4b06      	ldr	r3, [pc, #24]	; (584 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     56a:	4798      	blx	r3
}
     56c:	e7f1      	b.n	552 <_Z41__static_initialization_and_destruction_0ii+0x6>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	0000ffff 	.word	0x0000ffff
     574:	20000c60 	.word	0x20000c60
     578:	00000d99 	.word	0x00000d99
     57c:	20000000 	.word	0x20000000
     580:	00000da5 	.word	0x00000da5
     584:	00006a25 	.word	0x00006a25

00000588 <_ZN14ADF5610_DriverC1Ev>:
ADF5610_Driver::ADF5610_Driver() {
     588:	b510      	push	{r4, lr}
	 current_frequency=3600;
     58a:	4a0e      	ldr	r2, [pc, #56]	; (5c4 <_ZN14ADF5610_DriverC1Ev+0x3c>)
     58c:	6002      	str	r2, [r0, #0]
		 buffer32=0;
     58e:	2300      	movs	r3, #0
     590:	2192      	movs	r1, #146	; 0x92
     592:	0049      	lsls	r1, r1, #1
     594:	5043      	str	r3, [r0, r1]
		 dir=1;
     596:	2401      	movs	r4, #1
     598:	3114      	adds	r1, #20
     59a:	5044      	str	r4, [r0, r1]
		 spi_adf=&staticSPI;
     59c:	490a      	ldr	r1, [pc, #40]	; (5c8 <_ZN14ADF5610_DriverC1Ev+0x40>)
     59e:	6041      	str	r1, [r0, #4]
		 is_locked=false;
     5a0:	219e      	movs	r1, #158	; 0x9e
     5a2:	0049      	lsls	r1, r1, #1
     5a4:	5443      	strb	r3, [r0, r1]
		 upper_limit=4400;
     5a6:	4909      	ldr	r1, [pc, #36]	; (5cc <_ZN14ADF5610_DriverC1Ev+0x44>)
     5a8:	6081      	str	r1, [r0, #8]
		 lower_limit=3600;
     5aa:	60c2      	str	r2, [r0, #12]
		 step=(upper_limit-lower_limit)/1024.0*2;
     5ac:	4908      	ldr	r1, [pc, #32]	; (5d0 <_ZN14ADF5610_DriverC1Ev+0x48>)
     5ae:	2298      	movs	r2, #152	; 0x98
     5b0:	0052      	lsls	r2, r2, #1
     5b2:	5081      	str	r1, [r0, r2]
		 target_frequency=current_frequency+step;
     5b4:	4907      	ldr	r1, [pc, #28]	; (5d4 <_ZN14ADF5610_DriverC1Ev+0x4c>)
     5b6:	3204      	adds	r2, #4
     5b8:	5081      	str	r1, [r0, r2]
		 pll_started=false;
     5ba:	2256      	movs	r2, #86	; 0x56
     5bc:	32ff      	adds	r2, #255	; 0xff
     5be:	5483      	strb	r3, [r0, r2]
}
     5c0:	bd10      	pop	{r4, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	45610000 	.word	0x45610000
     5c8:	20000c60 	.word	0x20000c60
     5cc:	45898000 	.word	0x45898000
     5d0:	3fc80000 	.word	0x3fc80000
     5d4:	45611900 	.word	0x45611900

000005d8 <_ZN14ADF5610_DriverD1Ev>:
}
     5d8:	4770      	bx	lr
	...

000005dc <_ZN14ADF5610_Driver13ShowRegistersEi>:
void ADF5610_Driver::ShowRegisters(int index){
     5dc:	b570      	push	{r4, r5, r6, lr}
     5de:	0005      	movs	r5, r0
     5e0:	1e0c      	subs	r4, r1, #0
	switch (index){
     5e2:	d006      	beq.n	5f2 <_ZN14ADF5610_Driver13ShowRegistersEi+0x16>
     5e4:	2900      	cmp	r1, #0
     5e6:	db0d      	blt.n	604 <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
     5e8:	000b      	movs	r3, r1
     5ea:	3b12      	subs	r3, #18
     5ec:	2b01      	cmp	r3, #1
     5ee:	d809      	bhi.n	604 <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
}
     5f0:	bd70      	pop	{r4, r5, r6, pc}
			  printf("Read R%d",index);
     5f2:	480e      	ldr	r0, [pc, #56]	; (62c <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     5f4:	4e0e      	ldr	r6, [pc, #56]	; (630 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     5f6:	47b0      	blx	r6
			  printf(":  0x%08lx\n" ,RegRead[index]);
     5f8:	3404      	adds	r4, #4
     5fa:	00a4      	lsls	r4, r4, #2
     5fc:	5961      	ldr	r1, [r4, r5]
     5fe:	480d      	ldr	r0, [pc, #52]	; (634 <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     600:	47b0      	blx	r6
			  break;
     602:	e7f5      	b.n	5f0 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
			  printf("Write R%d",index);
     604:	0021      	movs	r1, r4
     606:	480c      	ldr	r0, [pc, #48]	; (638 <_ZN14ADF5610_Driver13ShowRegistersEi+0x5c>)
     608:	4e09      	ldr	r6, [pc, #36]	; (630 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     60a:	47b0      	blx	r6
			  printf(":  0x%08lx\t",RegWrite[index]);
     60c:	0023      	movs	r3, r4
     60e:	331a      	adds	r3, #26
     610:	009b      	lsls	r3, r3, #2
     612:	18eb      	adds	r3, r5, r3
     614:	6859      	ldr	r1, [r3, #4]
     616:	4809      	ldr	r0, [pc, #36]	; (63c <_ZN14ADF5610_Driver13ShowRegistersEi+0x60>)
     618:	47b0      	blx	r6
			  printf("Read R%d",index);
     61a:	0021      	movs	r1, r4
     61c:	4803      	ldr	r0, [pc, #12]	; (62c <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     61e:	47b0      	blx	r6
			  printf(":  0x%08lx\n",RegRead[index]);
     620:	3404      	adds	r4, #4
     622:	00a4      	lsls	r4, r4, #2
     624:	5961      	ldr	r1, [r4, r5]
     626:	4803      	ldr	r0, [pc, #12]	; (634 <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     628:	47b0      	blx	r6
}
     62a:	e7e1      	b.n	5f0 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
     62c:	00010114 	.word	0x00010114
     630:	0000b539 	.word	0x0000b539
     634:	00010120 	.word	0x00010120
     638:	0001012c 	.word	0x0001012c
     63c:	00010138 	.word	0x00010138

00000640 <_ZN14ADF5610_Driver9Is_LockedEv>:
bool ADF5610_Driver::Is_Locked(void){
     640:	b530      	push	{r4, r5, lr}
     642:	b083      	sub	sp, #12
     644:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     646:	a801      	add	r0, sp, #4
     648:	4b0b      	ldr	r3, [pc, #44]	; (678 <_ZN14ADF5610_Driver9Is_LockedEv+0x38>)
     64a:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     64c:	22c0      	movs	r2, #192	; 0xc0
     64e:	05d2      	lsls	r2, r2, #23
     650:	6810      	ldr	r0, [r2, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     652:	4b0a      	ldr	r3, [pc, #40]	; (67c <_ZN14ADF5610_Driver9Is_LockedEv+0x3c>)
     654:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     656:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     658:	405c      	eors	r4, r3
     65a:	4004      	ands	r4, r0
     65c:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     65e:	a801      	add	r0, sp, #4
     660:	4b07      	ldr	r3, [pc, #28]	; (680 <_ZN14ADF5610_Driver9Is_LockedEv+0x40>)
     662:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     664:	2040      	movs	r0, #64	; 0x40
     666:	4020      	ands	r0, r4
     668:	1e43      	subs	r3, r0, #1
     66a:	4198      	sbcs	r0, r3
     66c:	b2c0      	uxtb	r0, r0
	is_locked= gpio_get_pin_level(PA06);
     66e:	239e      	movs	r3, #158	; 0x9e
     670:	005b      	lsls	r3, r3, #1
     672:	54e8      	strb	r0, [r5, r3]
}
     674:	b003      	add	sp, #12
     676:	bd30      	pop	{r4, r5, pc}
     678:	00001f19 	.word	0x00001f19
     67c:	41004400 	.word	0x41004400
     680:	00001f27 	.word	0x00001f27

00000684 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>:
void ADF5610_Driver::ConvertU32FourByteArray(uint8_t *array,uint32_t  data){
     684:	b510      	push	{r4, lr}
	for (int i =0;i<4;i++){
     686:	2000      	movs	r0, #0
     688:	2803      	cmp	r0, #3
     68a:	dc07      	bgt.n	69c <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x18>
		array[i]=(uint8_t)((data>>((3-i)*8)&0xff));
     68c:	2303      	movs	r3, #3
     68e:	1a1b      	subs	r3, r3, r0
     690:	00db      	lsls	r3, r3, #3
     692:	0014      	movs	r4, r2
     694:	40dc      	lsrs	r4, r3
     696:	540c      	strb	r4, [r1, r0]
	for (int i =0;i<4;i++){
     698:	3001      	adds	r0, #1
     69a:	e7f5      	b.n	688 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x4>
}
     69c:	bd10      	pop	{r4, pc}
	...

000006a0 <_ZN14ADF5610_Driver13ReadRegistersEh>:
void ADF5610_Driver::ReadRegisters(uint8_t index) {
     6a0:	b570      	push	{r4, r5, r6, lr}
     6a2:	0004      	movs	r4, r0
     6a4:	000d      	movs	r5, r1
	spi_adf->SetCS(false);
     6a6:	2100      	movs	r1, #0
     6a8:	6840      	ldr	r0, [r0, #4]
     6aa:	4e20      	ldr	r6, [pc, #128]	; (72c <_ZN14ADF5610_Driver13ReadRegistersEh+0x8c>)
     6ac:	47b0      	blx	r6
	to_send[0]=0;
     6ae:	2300      	movs	r3, #0
     6b0:	22a8      	movs	r2, #168	; 0xa8
     6b2:	0052      	lsls	r2, r2, #1
     6b4:	54a3      	strb	r3, [r4, r2]
	to_send[1]=0;
     6b6:	2252      	movs	r2, #82	; 0x52
     6b8:	32ff      	adds	r2, #255	; 0xff
     6ba:	54a3      	strb	r3, [r4, r2]
	to_send[2]=index;
     6bc:	3201      	adds	r2, #1
     6be:	54a5      	strb	r5, [r4, r2]
	to_send[3]=0;
     6c0:	2254      	movs	r2, #84	; 0x54
     6c2:	32ff      	adds	r2, #255	; 0xff
     6c4:	54a3      	strb	r3, [r4, r2]
	spi_adf->Write(to_send,4);
     6c6:	0021      	movs	r1, r4
     6c8:	3151      	adds	r1, #81	; 0x51
     6ca:	31ff      	adds	r1, #255	; 0xff
     6cc:	3a50      	subs	r2, #80	; 0x50
     6ce:	3aff      	subs	r2, #255	; 0xff
     6d0:	6860      	ldr	r0, [r4, #4]
     6d2:	4b17      	ldr	r3, [pc, #92]	; (730 <_ZN14ADF5610_Driver13ReadRegistersEh+0x90>)
     6d4:	4798      	blx	r3
	spi_adf->SetCS(true);
     6d6:	2101      	movs	r1, #1
     6d8:	6860      	ldr	r0, [r4, #4]
     6da:	47b0      	blx	r6
	delay_ms(1);
     6dc:	2001      	movs	r0, #1
     6de:	4b15      	ldr	r3, [pc, #84]	; (734 <_ZN14ADF5610_Driver13ReadRegistersEh+0x94>)
     6e0:	4798      	blx	r3
	spi_adf->SetCS(false);
     6e2:	2100      	movs	r1, #0
     6e4:	6860      	ldr	r0, [r4, #4]
     6e6:	47b0      	blx	r6
	spi_adf->Read((uint8_t*)&recibido32,4);
     6e8:	0021      	movs	r1, r4
     6ea:	3149      	adds	r1, #73	; 0x49
     6ec:	31ff      	adds	r1, #255	; 0xff
     6ee:	2204      	movs	r2, #4
     6f0:	6860      	ldr	r0, [r4, #4]
     6f2:	4b11      	ldr	r3, [pc, #68]	; (738 <_ZN14ADF5610_Driver13ReadRegistersEh+0x98>)
     6f4:	4798      	blx	r3
	RegRead[index]=((recibido32&(0x000000FF))<<24)|((recibido32&(0x0000FF00))<<8);
     6f6:	23a4      	movs	r3, #164	; 0xa4
     6f8:	005b      	lsls	r3, r3, #1
     6fa:	58e2      	ldr	r2, [r4, r3]
     6fc:	0613      	lsls	r3, r2, #24
     6fe:	0211      	lsls	r1, r2, #8
     700:	20ff      	movs	r0, #255	; 0xff
     702:	0400      	lsls	r0, r0, #16
     704:	4001      	ands	r1, r0
     706:	430b      	orrs	r3, r1
	RegRead[index]|=((recibido32&(0xFF000000))>>24)|((recibido32&(0x00FF0000))>>8);
     708:	0e11      	lsrs	r1, r2, #24
     70a:	0a12      	lsrs	r2, r2, #8
     70c:	20ff      	movs	r0, #255	; 0xff
     70e:	0200      	lsls	r0, r0, #8
     710:	4002      	ands	r2, r0
     712:	430a      	orrs	r2, r1
     714:	4313      	orrs	r3, r2
	RegRead[index]>>=7;
     716:	09db      	lsrs	r3, r3, #7
	bitClear(RegRead[index],24);
     718:	4a08      	ldr	r2, [pc, #32]	; (73c <_ZN14ADF5610_Driver13ReadRegistersEh+0x9c>)
     71a:	4013      	ands	r3, r2
     71c:	3504      	adds	r5, #4
     71e:	00ad      	lsls	r5, r5, #2
     720:	512b      	str	r3, [r5, r4]
	spi_adf->SetCS(true);
     722:	6860      	ldr	r0, [r4, #4]
     724:	2101      	movs	r1, #1
     726:	47b0      	blx	r6
}
     728:	bd70      	pop	{r4, r5, r6, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	00000e15 	.word	0x00000e15
     730:	00000de5 	.word	0x00000de5
     734:	0000206d 	.word	0x0000206d
     738:	00000dfd 	.word	0x00000dfd
     73c:	feffffff 	.word	0xfeffffff

00000740 <_ZN14ADF5610_Driver17InitiateRegistersEv>:
  for (int i = 0; i < 23; i++) {
     740:	2300      	movs	r3, #0
     742:	e00e      	b.n	762 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x22>
          RegIni[i] = 0x20;
     744:	001a      	movs	r2, r3
     746:	3232      	adds	r2, #50	; 0x32
     748:	0092      	lsls	r2, r2, #2
     74a:	2120      	movs	r1, #32
     74c:	5011      	str	r1, [r2, r0]
    RegWrite[i]=RegIni[i];
     74e:	001a      	movs	r2, r3
     750:	3232      	adds	r2, #50	; 0x32
     752:	0092      	lsls	r2, r2, #2
     754:	5811      	ldr	r1, [r2, r0]
     756:	001a      	movs	r2, r3
     758:	321a      	adds	r2, #26
     75a:	0092      	lsls	r2, r2, #2
     75c:	1882      	adds	r2, r0, r2
     75e:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < 23; i++) {
     760:	3301      	adds	r3, #1
     762:	2b16      	cmp	r3, #22
     764:	dc6c      	bgt.n	840 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x100>
    switch (i) {
     766:	d865      	bhi.n	834 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xf4>
     768:	009a      	lsls	r2, r3, #2
     76a:	4936      	ldr	r1, [pc, #216]	; (844 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x104>)
     76c:	588a      	ldr	r2, [r1, r2]
     76e:	4697      	mov	pc, r2
        RegIni[i] = 0x2;
     770:	001a      	movs	r2, r3
     772:	3232      	adds	r2, #50	; 0x32
     774:	0092      	lsls	r2, r2, #2
     776:	2102      	movs	r1, #2
     778:	5011      	str	r1, [r2, r0]
        break;
     77a:	e7e8      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x1;
     77c:	001a      	movs	r2, r3
     77e:	3232      	adds	r2, #50	; 0x32
     780:	0092      	lsls	r2, r2, #2
     782:	2101      	movs	r1, #1
     784:	5011      	str	r1, [r2, r0]
        break;
     786:	e7e2      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x31;
     788:	001a      	movs	r2, r3
     78a:	3232      	adds	r2, #50	; 0x32
     78c:	0092      	lsls	r2, r2, #2
     78e:	2131      	movs	r1, #49	; 0x31
     790:	5011      	str	r1, [r2, r0]
        break;
     792:	e7dc      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xFD70A3;
     794:	001a      	movs	r2, r3
     796:	3232      	adds	r2, #50	; 0x32
     798:	0092      	lsls	r2, r2, #2
     79a:	492b      	ldr	r1, [pc, #172]	; (848 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x108>)
     79c:	5011      	str	r1, [r2, r0]
        break;
     79e:	e7d6      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x000;
     7a0:	001a      	movs	r2, r3
     7a2:	3232      	adds	r2, #50	; 0x32
     7a4:	0092      	lsls	r2, r2, #2
     7a6:	2100      	movs	r1, #0
     7a8:	5011      	str	r1, [r2, r0]
        break;
     7aa:	e7d0      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2F4A;
     7ac:	001a      	movs	r2, r3
     7ae:	3232      	adds	r2, #50	; 0x32
     7b0:	0092      	lsls	r2, r2, #2
     7b2:	4926      	ldr	r1, [pc, #152]	; (84c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x10c>)
     7b4:	5011      	str	r1, [r2, r0]
        break;
     7b6:	e7ca      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x214D;
     7b8:	001a      	movs	r2, r3
     7ba:	3232      	adds	r2, #50	; 0x32
     7bc:	0092      	lsls	r2, r2, #2
     7be:	4924      	ldr	r1, [pc, #144]	; (850 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x110>)
     7c0:	5011      	str	r1, [r2, r0]
        break;
     7c2:	e7c4      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xC9BEFF;
     7c4:	001a      	movs	r2, r3
     7c6:	3232      	adds	r2, #50	; 0x32
     7c8:	0092      	lsls	r2, r2, #2
     7ca:	4922      	ldr	r1, [pc, #136]	; (854 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x114>)
     7cc:	5011      	str	r1, [r2, r0]
        break;
     7ce:	e7be      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x3FFF;
     7d0:	001a      	movs	r2, r3
     7d2:	3232      	adds	r2, #50	; 0x32
     7d4:	0092      	lsls	r2, r2, #2
     7d6:	4920      	ldr	r1, [pc, #128]	; (858 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x118>)
     7d8:	5011      	str	r1, [r2, r0]
        break;
     7da:	e7b8      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2047;
     7dc:	001a      	movs	r2, r3
     7de:	3232      	adds	r2, #50	; 0x32
     7e0:	0092      	lsls	r2, r2, #2
     7e2:	491e      	ldr	r1, [pc, #120]	; (85c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x11c>)
     7e4:	5011      	str	r1, [r2, r0]
        break;
     7e6:	e7b2      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xF8061;
     7e8:	001a      	movs	r2, r3
     7ea:	3232      	adds	r2, #50	; 0x32
     7ec:	0092      	lsls	r2, r2, #2
     7ee:	491c      	ldr	r1, [pc, #112]	; (860 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x120>)
     7f0:	5011      	str	r1, [r2, r0]
        break;
     7f2:	e7ac      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x081;
     7f4:	001a      	movs	r2, r3
     7f6:	3232      	adds	r2, #50	; 0x32
     7f8:	0092      	lsls	r2, r2, #2
     7fa:	2181      	movs	r1, #129	; 0x81
     7fc:	5011      	str	r1, [r2, r0]
        break;
     7fe:	e7a6      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
		RegIni[i] = 0x020;
     800:	001a      	movs	r2, r3
     802:	3232      	adds	r2, #50	; 0x32
     804:	0092      	lsls	r2, r2, #2
     806:	2120      	movs	r1, #32
     808:	5011      	str	r1, [r2, r0]
		break;
     80a:	e7a0      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = RegIni[5];
     80c:	22dc      	movs	r2, #220	; 0xdc
     80e:	5881      	ldr	r1, [r0, r2]
     810:	001a      	movs	r2, r3
     812:	3232      	adds	r2, #50	; 0x32
     814:	0092      	lsls	r2, r2, #2
     816:	5011      	str	r1, [r2, r0]
         break;
     818:	e799      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
       RegIni[i] = (0x01<<3)|(0x00<<7)|(0x07<<9)|(0x03<<12)|(0x01<<15);
     81a:	001a      	movs	r2, r3
     81c:	3232      	adds	r2, #50	; 0x32
     81e:	0092      	lsls	r2, r2, #2
     820:	4910      	ldr	r1, [pc, #64]	; (864 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x124>)
     822:	5011      	str	r1, [r2, r0]
         break;
     824:	e793      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
         RegIni[i] =(0x02<<3)|(0x07<<7)|(0x00);
     826:	001a      	movs	r2, r3
     828:	3232      	adds	r2, #50	; 0x32
     82a:	0092      	lsls	r2, r2, #2
     82c:	21e4      	movs	r1, #228	; 0xe4
     82e:	0089      	lsls	r1, r1, #2
     830:	5011      	str	r1, [r2, r0]
         break;
     832:	e78c      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x0;
     834:	001a      	movs	r2, r3
     836:	3232      	adds	r2, #50	; 0x32
     838:	0092      	lsls	r2, r2, #2
     83a:	2100      	movs	r1, #0
     83c:	5011      	str	r1, [r2, r0]
        break;
     83e:	e786      	b.n	74e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
}
     840:	4770      	bx	lr
     842:	46c0      	nop			; (mov r8, r8)
     844:	00010068 	.word	0x00010068
     848:	00fd70a3 	.word	0x00fd70a3
     84c:	00002f4a 	.word	0x00002f4a
     850:	0000214d 	.word	0x0000214d
     854:	00c9beff 	.word	0x00c9beff
     858:	00003fff 	.word	0x00003fff
     85c:	00002047 	.word	0x00002047
     860:	000f8061 	.word	0x000f8061
     864:	0000be08 	.word	0x0000be08

00000868 <_ZN14ADF5610_Driver16ReadAllRegistersEv>:
void ADF5610_Driver::ReadAllRegisters(){
     868:	b570      	push	{r4, r5, r6, lr}
     86a:	0005      	movs	r5, r0
  for (int i=0; i<=19;i++){
     86c:	2400      	movs	r4, #0
     86e:	2c13      	cmp	r4, #19
     870:	dc05      	bgt.n	87e <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x16>
    ReadRegisters((uint8_t)i);
     872:	b2e1      	uxtb	r1, r4
     874:	0028      	movs	r0, r5
     876:	4b02      	ldr	r3, [pc, #8]	; (880 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x18>)
     878:	4798      	blx	r3
  for (int i=0; i<=19;i++){
     87a:	3401      	adds	r4, #1
     87c:	e7f7      	b.n	86e <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x6>
}
     87e:	bd70      	pop	{r4, r5, r6, pc}
     880:	000006a1 	.word	0x000006a1

00000884 <_ZN14ADF5610_Driver18CalculateVCOValuesEv>:
void ADF5610_Driver::CalculateVCOValues(void){
     884:	b5f0      	push	{r4, r5, r6, r7, lr}
     886:	46ce      	mov	lr, r9
     888:	4647      	mov	r7, r8
     88a:	b580      	push	{r7, lr}
     88c:	b085      	sub	sp, #20
     88e:	0007      	movs	r7, r0
	 aux_register=0;
     890:	2200      	movs	r2, #0
     892:	23a0      	movs	r3, #160	; 0xa0
     894:	005b      	lsls	r3, r3, #1
     896:	50c2      	str	r2, [r0, r3]
		double  fDIV=target_frequency;
     898:	259a      	movs	r5, #154	; 0x9a
     89a:	006d      	lsls	r5, r5, #1
     89c:	4c81      	ldr	r4, [pc, #516]	; (aa4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x220>)
     89e:	5940      	ldr	r0, [r0, r5]
     8a0:	47a0      	blx	r4
     8a2:	0002      	movs	r2, r0
     8a4:	000b      	movs	r3, r1
		int k=floor(log((14600)/(fDIV))/log(2));
     8a6:	4980      	ldr	r1, [pc, #512]	; (aa8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     8a8:	4688      	mov	r8, r1
     8aa:	2000      	movs	r0, #0
     8ac:	497f      	ldr	r1, [pc, #508]	; (aac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     8ae:	47c0      	blx	r8
     8b0:	4b7f      	ldr	r3, [pc, #508]	; (ab0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x22c>)
     8b2:	4798      	blx	r3
     8b4:	4a7f      	ldr	r2, [pc, #508]	; (ab4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x230>)
     8b6:	4b80      	ldr	r3, [pc, #512]	; (ab8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x234>)
     8b8:	47c0      	blx	r8
     8ba:	4b80      	ldr	r3, [pc, #512]	; (abc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     8bc:	4798      	blx	r3
     8be:	4b80      	ldr	r3, [pc, #512]	; (ac0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     8c0:	4798      	blx	r3
		uint8_t kDIV=7-(uint8_t)(k);
     8c2:	2307      	movs	r3, #7
     8c4:	9000      	str	r0, [sp, #0]
     8c6:	1a1b      	subs	r3, r3, r0
     8c8:	b2de      	uxtb	r6, r3
	  double fVCO = 7300*((target_frequency*pow(2, k))/(14600)); //VCO
     8ca:	5978      	ldr	r0, [r7, r5]
     8cc:	47a0      	blx	r4
     8ce:	9002      	str	r0, [sp, #8]
     8d0:	9103      	str	r1, [sp, #12]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     8d2:	9800      	ldr	r0, [sp, #0]
     8d4:	4b7b      	ldr	r3, [pc, #492]	; (ac4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x240>)
     8d6:	4798      	blx	r3
     8d8:	0002      	movs	r2, r0
     8da:	000b      	movs	r3, r1
     8dc:	2000      	movs	r0, #0
     8de:	2180      	movs	r1, #128	; 0x80
     8e0:	05c9      	lsls	r1, r1, #23
     8e2:	4c79      	ldr	r4, [pc, #484]	; (ac8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x244>)
     8e4:	47a0      	blx	r4
     8e6:	0002      	movs	r2, r0
     8e8:	000b      	movs	r3, r1
     8ea:	4c78      	ldr	r4, [pc, #480]	; (acc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     8ec:	9802      	ldr	r0, [sp, #8]
     8ee:	9903      	ldr	r1, [sp, #12]
     8f0:	47a0      	blx	r4
     8f2:	2200      	movs	r2, #0
     8f4:	4b6d      	ldr	r3, [pc, #436]	; (aac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     8f6:	47c0      	blx	r8
     8f8:	2200      	movs	r2, #0
     8fa:	4b75      	ldr	r3, [pc, #468]	; (ad0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x24c>)
     8fc:	47a0      	blx	r4
     8fe:	9000      	str	r0, [sp, #0]
     900:	9101      	str	r1, [sp, #4]
	  if (fVCO<4000){
     902:	2200      	movs	r2, #0
     904:	4b73      	ldr	r3, [pc, #460]	; (ad4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     906:	4c74      	ldr	r4, [pc, #464]	; (ad8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     908:	47a0      	blx	r4
     90a:	2800      	cmp	r0, #0
     90c:	d02f      	beq.n	96e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xea>
		fPD = 1*fX; //Phase detector frequency
     90e:	2200      	movs	r2, #0
     910:	4b72      	ldr	r3, [pc, #456]	; (adc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x258>)
 N = fVCO /fPD;   // Calculate N
     912:	9800      	ldr	r0, [sp, #0]
     914:	9901      	ldr	r1, [sp, #4]
     916:	4c64      	ldr	r4, [pc, #400]	; (aa8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     918:	47a0      	blx	r4
     91a:	0004      	movs	r4, r0
     91c:	000d      	movs	r5, r1
     91e:	003b      	movs	r3, r7
     920:	3371      	adds	r3, #113	; 0x71
     922:	33ff      	adds	r3, #255	; 0xff
     924:	601c      	str	r4, [r3, #0]
     926:	605d      	str	r5, [r3, #4]
  N_Int = floor(fVCO/fPD);   // N= 50 for 5 GHz   // Turn N into integer
     928:	4b64      	ldr	r3, [pc, #400]	; (abc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     92a:	4798      	blx	r3
     92c:	000a      	movs	r2, r1
     92e:	0001      	movs	r1, r0
     930:	9102      	str	r1, [sp, #8]
     932:	9203      	str	r2, [sp, #12]
     934:	003b      	movs	r3, r7
     936:	3369      	adds	r3, #105	; 0x69
     938:	33ff      	adds	r3, #255	; 0xff
     93a:	6019      	str	r1, [r3, #0]
     93c:	605a      	str	r2, [r3, #4]
 F_Frac1x = (N - N_Int) * pow(2, 24);   // Calculate Frac1 (N remainder * 2^24)
     93e:	0013      	movs	r3, r2
     940:	0002      	movs	r2, r0
     942:	0020      	movs	r0, r4
     944:	0029      	movs	r1, r5
     946:	4c66      	ldr	r4, [pc, #408]	; (ae0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x25c>)
     948:	47a0      	blx	r4
     94a:	2200      	movs	r2, #0
     94c:	4b65      	ldr	r3, [pc, #404]	; (ae4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x260>)
     94e:	4c5f      	ldr	r4, [pc, #380]	; (acc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     950:	47a0      	blx	r4
     952:	003b      	movs	r3, r7
     954:	3379      	adds	r3, #121	; 0x79
     956:	33ff      	adds	r3, #255	; 0xff
     958:	6018      	str	r0, [r3, #0]
     95a:	6059      	str	r1, [r3, #4]
   F_FracN = (uint32_t)F_Frac1x;  // turn Frac1 into an integer
     95c:	4b62      	ldr	r3, [pc, #392]	; (ae8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x264>)
     95e:	4798      	blx	r3
     960:	23c0      	movs	r3, #192	; 0xc0
     962:	005b      	lsls	r3, r3, #1
     964:	50f8      	str	r0, [r7, r3]
  for (int i = 0; i < 23; i++) {
     966:	2400      	movs	r4, #0
     968:	46b1      	mov	r9, r6
     96a:	0005      	movs	r5, r0
     96c:	e00e      	b.n	98c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x108>
		fPD = 2*fX; //Phase detector frequency
     96e:	2200      	movs	r2, #0
     970:	4b5e      	ldr	r3, [pc, #376]	; (aec <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x268>)
     972:	e7ce      	b.n	912 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x8e>
        RegWrite[i] =(uint32_t)(0x00FFFFFF&((long)N_Int));  //Fixed value (Phase control not needed)
     974:	9802      	ldr	r0, [sp, #8]
     976:	9903      	ldr	r1, [sp, #12]
     978:	4b51      	ldr	r3, [pc, #324]	; (ac0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     97a:	4798      	blx	r3
     97c:	0200      	lsls	r0, r0, #8
     97e:	0a00      	lsrs	r0, r0, #8
     980:	0023      	movs	r3, r4
     982:	331a      	adds	r3, #26
     984:	009b      	lsls	r3, r3, #2
     986:	18fb      	adds	r3, r7, r3
     988:	6058      	str	r0, [r3, #4]
  for (int i = 0; i < 23; i++) {
     98a:	3401      	adds	r4, #1
     98c:	2c16      	cmp	r4, #22
     98e:	dd00      	ble.n	992 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x10e>
     990:	e083      	b.n	a9a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x216>
    switch (i) {
     992:	1ee3      	subs	r3, r4, #3
     994:	2b13      	cmp	r3, #19
     996:	d8f8      	bhi.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
     998:	009b      	lsls	r3, r3, #2
     99a:	4a55      	ldr	r2, [pc, #340]	; (af0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x26c>)
     99c:	58d3      	ldr	r3, [r2, r3]
     99e:	469f      	mov	pc, r3
        RegWrite[i] =(uint32_t)(0x00FFFFFF&(F_FracN));
     9a0:	022a      	lsls	r2, r5, #8
     9a2:	0a12      	lsrs	r2, r2, #8
     9a4:	0023      	movs	r3, r4
     9a6:	331a      	adds	r3, #26
     9a8:	009b      	lsls	r3, r3, #2
     9aa:	18fb      	adds	r3, r7, r3
     9ac:	605a      	str	r2, [r3, #4]
        break;
     9ae:	e7ec      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
		 RegWrite[i]=RegIni[i];
     9b0:	0023      	movs	r3, r4
     9b2:	3332      	adds	r3, #50	; 0x32
     9b4:	009b      	lsls	r3, r3, #2
     9b6:	59da      	ldr	r2, [r3, r7]
     9b8:	0023      	movs	r3, r4
     9ba:	331a      	adds	r3, #26
     9bc:	009b      	lsls	r3, r3, #2
     9be:	18fb      	adds	r3, r7, r3
     9c0:	605a      	str	r2, [r3, #4]
        break;
     9c2:	e7e2      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        if (fVCO<4000){
     9c4:	2200      	movs	r2, #0
     9c6:	4b43      	ldr	r3, [pc, #268]	; (ad4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     9c8:	9800      	ldr	r0, [sp, #0]
     9ca:	9901      	ldr	r1, [sp, #4]
     9cc:	4e42      	ldr	r6, [pc, #264]	; (ad8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     9ce:	47b0      	blx	r6
     9d0:	2800      	cmp	r0, #0
     9d2:	d008      	beq.n	9e6 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x162>
          bitWrite(RegWrite[i], 19, 0);
     9d4:	0023      	movs	r3, r4
     9d6:	331a      	adds	r3, #26
     9d8:	009b      	lsls	r3, r3, #2
     9da:	18fb      	adds	r3, r7, r3
     9dc:	4a45      	ldr	r2, [pc, #276]	; (af4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x270>)
     9de:	6859      	ldr	r1, [r3, #4]
     9e0:	400a      	ands	r2, r1
     9e2:	605a      	str	r2, [r3, #4]
     9e4:	e7d1      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
          bitWrite(RegWrite[i], 19, 1);
     9e6:	0023      	movs	r3, r4
     9e8:	331a      	adds	r3, #26
     9ea:	009b      	lsls	r3, r3, #2
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2280      	movs	r2, #128	; 0x80
     9f0:	0312      	lsls	r2, r2, #12
     9f2:	6859      	ldr	r1, [r3, #4]
     9f4:	430a      	orrs	r2, r1
     9f6:	605a      	str	r2, [r3, #4]
     9f8:	e7c7      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    	  aux_register=RegWrite[5];
     9fa:	2380      	movs	r3, #128	; 0x80
     9fc:	58fa      	ldr	r2, [r7, r3]
     9fe:	33c0      	adds	r3, #192	; 0xc0
     a00:	50fa      	str	r2, [r7, r3]
        RegWrite[i]=aux_register;
     a02:	0023      	movs	r3, r4
     a04:	331a      	adds	r3, #26
     a06:	009b      	lsls	r3, r3, #2
     a08:	18fb      	adds	r3, r7, r3
     a0a:	605a      	str	r2, [r3, #4]
        break;
     a0c:	e7bd      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        RegWrite[i]=RegIni[i];
     a0e:	0023      	movs	r3, r4
     a10:	3332      	adds	r3, #50	; 0x32
     a12:	009b      	lsls	r3, r3, #2
     a14:	59da      	ldr	r2, [r3, r7]
     a16:	0023      	movs	r3, r4
     a18:	331a      	adds	r3, #26
     a1a:	009b      	lsls	r3, r3, #2
     a1c:	18fb      	adds	r3, r7, r3
     a1e:	605a      	str	r2, [r3, #4]
        break;
     a20:	e7b3      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    switch (i) {
     a22:	2303      	movs	r3, #3
     a24:	464e      	mov	r6, r9
     a26:	e022      	b.n	a6e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1ea>
					bitWrite(RegWrite[i], j, bitRead(VCOAdd,j-3));
     a28:	1ed9      	subs	r1, r3, #3
     a2a:	2202      	movs	r2, #2
     a2c:	410a      	asrs	r2, r1
     a2e:	07d2      	lsls	r2, r2, #31
     a30:	d509      	bpl.n	a46 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1c2>
     a32:	2101      	movs	r1, #1
     a34:	4099      	lsls	r1, r3
     a36:	0022      	movs	r2, r4
     a38:	321a      	adds	r2, #26
     a3a:	0092      	lsls	r2, r2, #2
     a3c:	18ba      	adds	r2, r7, r2
     a3e:	6850      	ldr	r0, [r2, #4]
     a40:	4301      	orrs	r1, r0
     a42:	6051      	str	r1, [r2, #4]
     a44:	e012      	b.n	a6c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
     a46:	2101      	movs	r1, #1
     a48:	4099      	lsls	r1, r3
     a4a:	0022      	movs	r2, r4
     a4c:	321a      	adds	r2, #26
     a4e:	0092      	lsls	r2, r2, #2
     a50:	18ba      	adds	r2, r7, r2
     a52:	6850      	ldr	r0, [r2, #4]
     a54:	4388      	bics	r0, r1
     a56:	6050      	str	r0, [r2, #4]
     a58:	e008      	b.n	a6c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     a5a:	2101      	movs	r1, #1
     a5c:	4099      	lsls	r1, r3
     a5e:	0022      	movs	r2, r4
     a60:	321a      	adds	r2, #26
     a62:	0092      	lsls	r2, r2, #2
     a64:	18ba      	adds	r2, r7, r2
     a66:	6850      	ldr	r0, [r2, #4]
     a68:	4388      	bics	r0, r1
     a6a:	6050      	str	r0, [r2, #4]
			for (int j=3;j<16;j++){
     a6c:	3301      	adds	r3, #1
     a6e:	2b0f      	cmp	r3, #15
     a70:	dc11      	bgt.n	a96 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x212>
				if (j<7){
     a72:	2b06      	cmp	r3, #6
     a74:	ddd8      	ble.n	a28 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1a4>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     a76:	1fda      	subs	r2, r3, #7
     a78:	0031      	movs	r1, r6
     a7a:	4111      	asrs	r1, r2
     a7c:	000a      	movs	r2, r1
     a7e:	07d2      	lsls	r2, r2, #31
     a80:	d5eb      	bpl.n	a5a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1d6>
     a82:	2101      	movs	r1, #1
     a84:	4099      	lsls	r1, r3
     a86:	0022      	movs	r2, r4
     a88:	321a      	adds	r2, #26
     a8a:	0092      	lsls	r2, r2, #2
     a8c:	18ba      	adds	r2, r7, r2
     a8e:	6850      	ldr	r0, [r2, #4]
     a90:	4301      	orrs	r1, r0
     a92:	6051      	str	r1, [r2, #4]
     a94:	e7ea      	b.n	a6c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
     a96:	46b1      	mov	r9, r6
     a98:	e777      	b.n	98a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
}
     a9a:	b005      	add	sp, #20
     a9c:	bc0c      	pop	{r2, r3}
     a9e:	4690      	mov	r8, r2
     aa0:	4699      	mov	r9, r3
     aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aa4:	0000b285 	.word	0x0000b285
     aa8:	00009d55 	.word	0x00009d55
     aac:	40cc8400 	.word	0x40cc8400
     ab0:	00006c49 	.word	0x00006c49
     ab4:	fefa39ef 	.word	0xfefa39ef
     ab8:	3fe62e42 	.word	0x3fe62e42
     abc:	00006a35 	.word	0x00006a35
     ac0:	0000b129 	.word	0x0000b129
     ac4:	0000b191 	.word	0x0000b191
     ac8:	00006d59 	.word	0x00006d59
     acc:	0000a5bd 	.word	0x0000a5bd
     ad0:	40bc8400 	.word	0x40bc8400
     ad4:	40af4000 	.word	0x40af4000
     ad8:	00008649 	.word	0x00008649
     adc:	40490000 	.word	0x40490000
     ae0:	0000aabd 	.word	0x0000aabd
     ae4:	41700000 	.word	0x41700000
     ae8:	00008791 	.word	0x00008791
     aec:	40590000 	.word	0x40590000
     af0:	000100c4 	.word	0x000100c4
     af4:	fff7ffff 	.word	0xfff7ffff

00000af8 <_ZN14ADF5610_Driver6usleepEl>:
void ADF5610_Driver::usleep(long us){
     af8:	b510      	push	{r4, lr}
     afa:	0008      	movs	r0, r1
	if (us/1000>1)
     afc:	4b07      	ldr	r3, [pc, #28]	; (b1c <_ZN14ADF5610_Driver6usleepEl+0x24>)
     afe:	4299      	cmp	r1, r3
     b00:	dc03      	bgt.n	b0a <_ZN14ADF5610_Driver6usleepEl+0x12>
		delay_ms(1);
     b02:	2001      	movs	r0, #1
     b04:	4b06      	ldr	r3, [pc, #24]	; (b20 <_ZN14ADF5610_Driver6usleepEl+0x28>)
     b06:	4798      	blx	r3
}
     b08:	bd10      	pop	{r4, pc}
		delay_ms(us/1000);
     b0a:	21fa      	movs	r1, #250	; 0xfa
     b0c:	0089      	lsls	r1, r1, #2
     b0e:	4b05      	ldr	r3, [pc, #20]	; (b24 <_ZN14ADF5610_Driver6usleepEl+0x2c>)
     b10:	4798      	blx	r3
     b12:	b280      	uxth	r0, r0
     b14:	4b02      	ldr	r3, [pc, #8]	; (b20 <_ZN14ADF5610_Driver6usleepEl+0x28>)
     b16:	4798      	blx	r3
     b18:	e7f6      	b.n	b08 <_ZN14ADF5610_Driver6usleepEl+0x10>
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	000007cf 	.word	0x000007cf
     b20:	0000206d 	.word	0x0000206d
     b24:	00008445 	.word	0x00008445

00000b28 <_ZN14ADF5610_Driver14WriteRegistersEh>:
void  ADF5610_Driver::WriteRegisters(uint8_t index) {
     b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b2a:	0004      	movs	r4, r0
     b2c:	000d      	movs	r5, r1
  local_index=0;
     b2e:	2300      	movs	r3, #0
     b30:	22a2      	movs	r2, #162	; 0xa2
     b32:	0052      	lsls	r2, r2, #1
     b34:	5483      	strb	r3, [r0, r2]
  buffer32 = 0;
     b36:	3a20      	subs	r2, #32
     b38:	5083      	str	r3, [r0, r2]
  if (index>19){
     b3a:	2913      	cmp	r1, #19
     b3c:	dd1a      	ble.n	b74 <_ZN14ADF5610_Driver14WriteRegistersEh+0x4c>
    if(index>22){
     b3e:	2916      	cmp	r1, #22
     b40:	dd13      	ble.n	b6a <_ZN14ADF5610_Driver14WriteRegistersEh+0x42>
		if (index>23)
     b42:	2917      	cmp	r1, #23
     b44:	dd0c      	ble.n	b60 <_ZN14ADF5610_Driver14WriteRegistersEh+0x38>
			if (index==24)
     b46:	2918      	cmp	r1, #24
     b48:	d004      	beq.n	b54 <_ZN14ADF5610_Driver14WriteRegistersEh+0x2c>
				 local_index=3;
     b4a:	2203      	movs	r2, #3
     b4c:	23a2      	movs	r3, #162	; 0xa2
     b4e:	005b      	lsls	r3, r3, #1
     b50:	54c2      	strb	r2, [r0, r3]
     b52:	e012      	b.n	b7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
				local_index=4;
     b54:	3a21      	subs	r2, #33	; 0x21
     b56:	3aff      	subs	r2, #255	; 0xff
     b58:	23a2      	movs	r3, #162	; 0xa2
     b5a:	005b      	lsls	r3, r3, #1
     b5c:	54c2      	strb	r2, [r0, r3]
     b5e:	e00c      	b.n	b7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
			 local_index=3;
     b60:	2203      	movs	r2, #3
     b62:	23a2      	movs	r3, #162	; 0xa2
     b64:	005b      	lsls	r3, r3, #1
     b66:	54c2      	strb	r2, [r0, r3]
     b68:	e007      	b.n	b7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
		 local_index=5;
     b6a:	2205      	movs	r2, #5
     b6c:	23a2      	movs	r3, #162	; 0xa2
     b6e:	005b      	lsls	r3, r3, #1
     b70:	54c2      	strb	r2, [r0, r3]
     b72:	e002      	b.n	b7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
    local_index=index;
     b74:	23a2      	movs	r3, #162	; 0xa2
     b76:	005b      	lsls	r3, r3, #1
     b78:	54e1      	strb	r1, [r4, r3]
  switch (local_index){
     b7a:	23a2      	movs	r3, #162	; 0xa2
     b7c:	005b      	lsls	r3, r3, #1
     b7e:	5ce3      	ldrb	r3, [r4, r3]
     b80:	3b10      	subs	r3, #16
     b82:	b2db      	uxtb	r3, r3
     b84:	2b03      	cmp	r3, #3
     b86:	d800      	bhi.n	b8a <_ZN14ADF5610_Driver14WriteRegistersEh+0x62>
}
     b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    spi_adf->SetCS(false);
     b8a:	2100      	movs	r1, #0
     b8c:	6860      	ldr	r0, [r4, #4]
     b8e:	4e21      	ldr	r6, [pc, #132]	; (c14 <_ZN14ADF5610_Driver14WriteRegistersEh+0xec>)
     b90:	47b0      	blx	r6
			  buffer32 =((uint32_t)local_index <<3)|(RegWrite[index]<<8);
     b92:	23a2      	movs	r3, #162	; 0xa2
     b94:	005b      	lsls	r3, r3, #1
     b96:	5ce2      	ldrb	r2, [r4, r3]
     b98:	00d2      	lsls	r2, r2, #3
     b9a:	002b      	movs	r3, r5
     b9c:	331a      	adds	r3, #26
     b9e:	009b      	lsls	r3, r3, #2
     ba0:	18e3      	adds	r3, r4, r3
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	021b      	lsls	r3, r3, #8
     ba6:	431a      	orrs	r2, r3
     ba8:	2392      	movs	r3, #146	; 0x92
     baa:	005b      	lsls	r3, r3, #1
     bac:	50e2      	str	r2, [r4, r3]
			  ConvertU32FourByteArray(to_send,buffer32);
     bae:	0027      	movs	r7, r4
     bb0:	3751      	adds	r7, #81	; 0x51
     bb2:	37ff      	adds	r7, #255	; 0xff
     bb4:	0039      	movs	r1, r7
     bb6:	0020      	movs	r0, r4
     bb8:	4b17      	ldr	r3, [pc, #92]	; (c18 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf0>)
     bba:	4798      	blx	r3
		          spi_adf->Write(to_send,4);
     bbc:	2204      	movs	r2, #4
     bbe:	0039      	movs	r1, r7
     bc0:	6860      	ldr	r0, [r4, #4]
     bc2:	4b16      	ldr	r3, [pc, #88]	; (c1c <_ZN14ADF5610_Driver14WriteRegistersEh+0xf4>)
     bc4:	4798      	blx	r3
			 usleep(1);
     bc6:	2101      	movs	r1, #1
     bc8:	0020      	movs	r0, r4
     bca:	4b15      	ldr	r3, [pc, #84]	; (c20 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     bcc:	4798      	blx	r3
		   spi_adf->SetCS(true);
     bce:	2101      	movs	r1, #1
     bd0:	6860      	ldr	r0, [r4, #4]
     bd2:	47b0      	blx	r6
		   if(!is_locked){
     bd4:	239e      	movs	r3, #158	; 0x9e
     bd6:	005b      	lsls	r3, r3, #1
     bd8:	5ce3      	ldrb	r3, [r4, r3]
     bda:	2b00      	cmp	r3, #0
     bdc:	d1d4      	bne.n	b88 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
			   usleep(1);
     bde:	2101      	movs	r1, #1
     be0:	0020      	movs	r0, r4
     be2:	4b0f      	ldr	r3, [pc, #60]	; (c20 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     be4:	4798      	blx	r3
			   ReadRegisters(local_index);
     be6:	26a2      	movs	r6, #162	; 0xa2
     be8:	0076      	lsls	r6, r6, #1
     bea:	5da1      	ldrb	r1, [r4, r6]
     bec:	0020      	movs	r0, r4
     bee:	4b0d      	ldr	r3, [pc, #52]	; (c24 <_ZN14ADF5610_Driver14WriteRegistersEh+0xfc>)
     bf0:	4798      	blx	r3
				   if(RegRead[local_index]!=RegWrite[index]){
     bf2:	5da3      	ldrb	r3, [r4, r6]
     bf4:	3304      	adds	r3, #4
     bf6:	009b      	lsls	r3, r3, #2
     bf8:	591a      	ldr	r2, [r3, r4]
     bfa:	002b      	movs	r3, r5
     bfc:	331a      	adds	r3, #26
     bfe:	009b      	lsls	r3, r3, #2
     c00:	18e3      	adds	r3, r4, r3
     c02:	685b      	ldr	r3, [r3, #4]
     c04:	429a      	cmp	r2, r3
     c06:	d0bf      	beq.n	b88 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
							   ShowRegisters(index);
     c08:	0029      	movs	r1, r5
     c0a:	0020      	movs	r0, r4
     c0c:	4b06      	ldr	r3, [pc, #24]	; (c28 <_ZN14ADF5610_Driver14WriteRegistersEh+0x100>)
     c0e:	4798      	blx	r3
}
     c10:	e7ba      	b.n	b88 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	00000e15 	.word	0x00000e15
     c18:	00000685 	.word	0x00000685
     c1c:	00000de5 	.word	0x00000de5
     c20:	00000af9 	.word	0x00000af9
     c24:	000006a1 	.word	0x000006a1
     c28:	000005dd 	.word	0x000005dd

00000c2c <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>:
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	0005      	movs	r5, r0
     c30:	000c      	movs	r4, r1
     c32:	e00d      	b.n	c50 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x24>
     c34:	2616      	movs	r6, #22
      for(int j=22;j>19;j--){
     c36:	2e13      	cmp	r6, #19
     c38:	dd05      	ble.n	c46 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x1a>
        WriteRegisters(j);
     c3a:	b2f1      	uxtb	r1, r6
     c3c:	0028      	movs	r0, r5
     c3e:	4b0d      	ldr	r3, [pc, #52]	; (c74 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     c40:	4798      	blx	r3
      for(int j=22;j>19;j--){
     c42:	3e01      	subs	r6, #1
     c44:	e7f7      	b.n	c36 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0xa>
	   WriteRegisters(5);
     c46:	2105      	movs	r1, #5
     c48:	0028      	movs	r0, r5
     c4a:	4b0a      	ldr	r3, [pc, #40]	; (c74 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     c4c:	4798      	blx	r3
  for (int i=k; i<20;i++){
     c4e:	3401      	adds	r4, #1
     c50:	2c13      	cmp	r4, #19
     c52:	dc06      	bgt.n	c62 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x36>
    if (i==5){
     c54:	2c05      	cmp	r4, #5
     c56:	d0ed      	beq.n	c34 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x8>
      WriteRegisters(i);
     c58:	b2e1      	uxtb	r1, r4
     c5a:	0028      	movs	r0, r5
     c5c:	4b05      	ldr	r3, [pc, #20]	; (c74 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     c5e:	4798      	blx	r3
     c60:	e7f5      	b.n	c4e <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x22>
  WriteRegisters(3);
     c62:	2103      	movs	r1, #3
     c64:	0028      	movs	r0, r5
     c66:	4c03      	ldr	r4, [pc, #12]	; (c74 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
     c68:	47a0      	blx	r4
  WriteRegisters(4);
     c6a:	2104      	movs	r1, #4
     c6c:	0028      	movs	r0, r5
     c6e:	47a0      	blx	r4
}
     c70:	bd70      	pop	{r4, r5, r6, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	00000b29 	.word	0x00000b29

00000c78 <_ZN14ADF5610_Driver7InitPLLEv>:
bool  ADF5610_Driver::InitPLL(void){
     c78:	b570      	push	{r4, r5, r6, lr}
     c7a:	0004      	movs	r4, r0
		CompleteConfigurationFlow(0);
     c7c:	2100      	movs	r1, #0
     c7e:	0020      	movs	r0, r4
     c80:	4b0d      	ldr	r3, [pc, #52]	; (cb8 <_ZN14ADF5610_Driver7InitPLLEv+0x40>)
     c82:	4798      	blx	r3
		ReadAllRegisters();
     c84:	0020      	movs	r0, r4
     c86:	4b0d      	ldr	r3, [pc, #52]	; (cbc <_ZN14ADF5610_Driver7InitPLLEv+0x44>)
     c88:	4798      	blx	r3
		pll_started= bitRead(RegRead[1],1)&(bitRead(RegRead[1],0)==0);
     c8a:	6963      	ldr	r3, [r4, #20]
     c8c:	0859      	lsrs	r1, r3, #1
     c8e:	2201      	movs	r2, #1
     c90:	401a      	ands	r2, r3
     c92:	4253      	negs	r3, r2
     c94:	4153      	adcs	r3, r2
     c96:	400b      	ands	r3, r1
     c98:	2556      	movs	r5, #86	; 0x56
     c9a:	35ff      	adds	r5, #255	; 0xff
     c9c:	5563      	strb	r3, [r4, r5]
		delay_ms(100);
     c9e:	2064      	movs	r0, #100	; 0x64
     ca0:	4b07      	ldr	r3, [pc, #28]	; (cc0 <_ZN14ADF5610_Driver7InitPLLEv+0x48>)
     ca2:	4798      	blx	r3
	}while((!Is_Locked())|((!pll_started)|false));
     ca4:	0020      	movs	r0, r4
     ca6:	4b07      	ldr	r3, [pc, #28]	; (cc4 <_ZN14ADF5610_Driver7InitPLLEv+0x4c>)
     ca8:	4798      	blx	r3
     caa:	5d63      	ldrb	r3, [r4, r5]
	do{
     cac:	2800      	cmp	r0, #0
     cae:	d0e5      	beq.n	c7c <_ZN14ADF5610_Driver7InitPLLEv+0x4>
     cb0:	2b00      	cmp	r3, #0
     cb2:	d0e3      	beq.n	c7c <_ZN14ADF5610_Driver7InitPLLEv+0x4>
}
     cb4:	0018      	movs	r0, r3
     cb6:	bd70      	pop	{r4, r5, r6, pc}
     cb8:	00000c2d 	.word	0x00000c2d
     cbc:	00000869 	.word	0x00000869
     cc0:	0000206d 	.word	0x0000206d
     cc4:	00000641 	.word	0x00000641

00000cc8 <_ZN14ADF5610_Driver4InitEv>:
bool ADF5610_Driver::Init(void){
     cc8:	b570      	push	{r4, r5, r6, lr}
     cca:	0004      	movs	r4, r0
	spi_adf=&staticSPI;
     ccc:	480d      	ldr	r0, [pc, #52]	; (d04 <_ZN14ADF5610_Driver4InitEv+0x3c>)
     cce:	6060      	str	r0, [r4, #4]
	spi_adf->Init();
     cd0:	4b0d      	ldr	r3, [pc, #52]	; (d08 <_ZN14ADF5610_Driver4InitEv+0x40>)
     cd2:	4798      	blx	r3
	memset(to_send,0,4);
     cd4:	0025      	movs	r5, r4
     cd6:	3551      	adds	r5, #81	; 0x51
     cd8:	35ff      	adds	r5, #255	; 0xff
     cda:	2204      	movs	r2, #4
     cdc:	2100      	movs	r1, #0
     cde:	0028      	movs	r0, r5
     ce0:	4b0a      	ldr	r3, [pc, #40]	; (d0c <_ZN14ADF5610_Driver4InitEv+0x44>)
     ce2:	4798      	blx	r3
	spi_adf->Write(to_send,4);
     ce4:	2204      	movs	r2, #4
     ce6:	0029      	movs	r1, r5
     ce8:	6860      	ldr	r0, [r4, #4]
     cea:	4b09      	ldr	r3, [pc, #36]	; (d10 <_ZN14ADF5610_Driver4InitEv+0x48>)
     cec:	4798      	blx	r3
	spi_adf->SetCS(true);
     cee:	2101      	movs	r1, #1
     cf0:	6860      	ldr	r0, [r4, #4]
     cf2:	4b08      	ldr	r3, [pc, #32]	; (d14 <_ZN14ADF5610_Driver4InitEv+0x4c>)
     cf4:	4798      	blx	r3
	 InitiateRegisters();
     cf6:	0020      	movs	r0, r4
     cf8:	4b07      	ldr	r3, [pc, #28]	; (d18 <_ZN14ADF5610_Driver4InitEv+0x50>)
     cfa:	4798      	blx	r3
	return InitPLL();
     cfc:	0020      	movs	r0, r4
     cfe:	4b07      	ldr	r3, [pc, #28]	; (d1c <_ZN14ADF5610_Driver4InitEv+0x54>)
     d00:	4798      	blx	r3
}
     d02:	bd70      	pop	{r4, r5, r6, pc}
     d04:	20000c60 	.word	0x20000c60
     d08:	00000dbd 	.word	0x00000dbd
     d0c:	0000b4a5 	.word	0x0000b4a5
     d10:	00000de5 	.word	0x00000de5
     d14:	00000e15 	.word	0x00000e15
     d18:	00000741 	.word	0x00000741
     d1c:	00000c79 	.word	0x00000c79

00000d20 <_ZN14ADF5610_Driver11WriteSubVCOEv>:
void ADF5610_Driver::WriteSubVCO(void){
     d20:	b570      	push	{r4, r5, r6, lr}
     d22:	0005      	movs	r5, r0
	WriteRegisters(22);
     d24:	2116      	movs	r1, #22
     d26:	4c04      	ldr	r4, [pc, #16]	; (d38 <_ZN14ADF5610_Driver11WriteSubVCOEv+0x18>)
     d28:	47a0      	blx	r4
	WriteRegisters(20);
     d2a:	2114      	movs	r1, #20
     d2c:	0028      	movs	r0, r5
     d2e:	47a0      	blx	r4
	WriteRegisters(5);
     d30:	2105      	movs	r1, #5
     d32:	0028      	movs	r0, r5
     d34:	47a0      	blx	r4
}
     d36:	bd70      	pop	{r4, r5, r6, pc}
     d38:	00000b29 	.word	0x00000b29

00000d3c <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>:
void ADF5610_Driver::ShortConfigurationFlow(void){
     d3c:	b570      	push	{r4, r5, r6, lr}
     d3e:	0004      	movs	r4, r0
  WriteRegisters(8);
     d40:	2108      	movs	r1, #8
     d42:	4d06      	ldr	r5, [pc, #24]	; (d5c <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x20>)
     d44:	47a8      	blx	r5
  WriteSubVCO();
     d46:	0020      	movs	r0, r4
     d48:	4b05      	ldr	r3, [pc, #20]	; (d60 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x24>)
     d4a:	4798      	blx	r3
  WriteRegisters(3);
     d4c:	2103      	movs	r1, #3
     d4e:	0020      	movs	r0, r4
     d50:	47a8      	blx	r5
  WriteRegisters(4);
     d52:	2104      	movs	r1, #4
     d54:	0020      	movs	r0, r4
     d56:	47a8      	blx	r5
}
     d58:	bd70      	pop	{r4, r5, r6, pc}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	00000b29 	.word	0x00000b29
     d60:	00000d21 	.word	0x00000d21

00000d64 <_ZN14ADF5610_Driver20Set_Target_FrequencyEf>:
{
     d64:	b510      	push	{r4, lr}
     d66:	0004      	movs	r4, r0
	target_frequency=tf;
     d68:	239a      	movs	r3, #154	; 0x9a
     d6a:	005b      	lsls	r3, r3, #1
     d6c:	50c1      	str	r1, [r0, r3]
	CalculateVCOValues();
     d6e:	4b03      	ldr	r3, [pc, #12]	; (d7c <_ZN14ADF5610_Driver20Set_Target_FrequencyEf+0x18>)
     d70:	4798      	blx	r3
	ShortConfigurationFlow();
     d72:	0020      	movs	r0, r4
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <_ZN14ADF5610_Driver20Set_Target_FrequencyEf+0x1c>)
     d76:	4798      	blx	r3
}
     d78:	bd10      	pop	{r4, pc}
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	00000885 	.word	0x00000885
     d80:	00000d3d 	.word	0x00000d3d

00000d84 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev>:
}
     d84:	b510      	push	{r4, lr}
     d86:	4902      	ldr	r1, [pc, #8]	; (d90 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0xc>)
     d88:	2001      	movs	r0, #1
     d8a:	4b02      	ldr	r3, [pc, #8]	; (d94 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0x10>)
     d8c:	4798      	blx	r3
     d8e:	bd10      	pop	{r4, pc}
     d90:	0000ffff 	.word	0x0000ffff
     d94:	0000054d 	.word	0x0000054d

00000d98 <_ZN17SPI_Syn_Class_ADFC1Ev>:


// default constructor
SPI_Syn_Class_ADF::SPI_Syn_Class_ADF()
{
		ptrSPISync_adf=this;
     d98:	4b01      	ldr	r3, [pc, #4]	; (da0 <_ZN17SPI_Syn_Class_ADFC1Ev+0x8>)
     d9a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class_ADF
     d9c:	4770      	bx	lr
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	20000c70 	.word	0x20000c70

00000da4 <_ZN17SPI_Syn_Class_ADFD1Ev>:


// default destructor
SPI_Syn_Class_ADF::~SPI_Syn_Class_ADF()
{
} //~SPI_Syn_Class_ADF
     da4:	4770      	bx	lr
	...

00000da8 <_ZN17SPI_Syn_Class_ADF6EnableEv>:
	
}



uint8_t SPI_Syn_Class_ADF::Enable(){
     da8:	b510      	push	{r4, lr}
	spi_m_sync_enable(&SPI_ADF);
     daa:	4802      	ldr	r0, [pc, #8]	; (db4 <_ZN17SPI_Syn_Class_ADF6EnableEv+0xc>)
     dac:	4b02      	ldr	r3, [pc, #8]	; (db8 <_ZN17SPI_Syn_Class_ADF6EnableEv+0x10>)
     dae:	4798      	blx	r3
	return 0;
}
     db0:	2000      	movs	r0, #0
     db2:	bd10      	pop	{r4, pc}
     db4:	200014e4 	.word	0x200014e4
     db8:	000022a5 	.word	0x000022a5

00000dbc <_ZN17SPI_Syn_Class_ADF4InitEv>:
void SPI_Syn_Class_ADF::Init(){
     dbc:	b510      	push	{r4, lr}
     dbe:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(&SPI_ADF, &io);
     dc0:	0001      	movs	r1, r0
     dc2:	310c      	adds	r1, #12
     dc4:	4804      	ldr	r0, [pc, #16]	; (dd8 <_ZN17SPI_Syn_Class_ADF4InitEv+0x1c>)
     dc6:	4b05      	ldr	r3, [pc, #20]	; (ddc <_ZN17SPI_Syn_Class_ADF4InitEv+0x20>)
     dc8:	4798      	blx	r3
	Enable();
     dca:	0020      	movs	r0, r4
     dcc:	4b04      	ldr	r3, [pc, #16]	; (de0 <_ZN17SPI_Syn_Class_ADF4InitEv+0x24>)
     dce:	4798      	blx	r3
	ready=true;
     dd0:	2301      	movs	r3, #1
     dd2:	7023      	strb	r3, [r4, #0]
}
     dd4:	bd10      	pop	{r4, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	200014e4 	.word	0x200014e4
     ddc:	0000238d 	.word	0x0000238d
     de0:	00000da9 	.word	0x00000da9

00000de4 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh>:

uint8_t  SPI_Syn_Class_ADF::Write(const uint8_t * p, uint8_t n){
     de4:	b510      	push	{r4, lr}
     de6:	0014      	movs	r4, r2
	ready=false;
     de8:	2300      	movs	r3, #0
     dea:	7003      	strb	r3, [r0, #0]

	io_write(io, p, (uint16_t)n);
     dec:	68c0      	ldr	r0, [r0, #12]
     dee:	b292      	uxth	r2, r2
     df0:	4b01      	ldr	r3, [pc, #4]	; (df8 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh+0x14>)
     df2:	4798      	blx	r3

	return n;
}
     df4:	0020      	movs	r0, r4
     df6:	bd10      	pop	{r4, pc}
     df8:	000021dd 	.word	0x000021dd

00000dfc <_ZN17SPI_Syn_Class_ADF4ReadEPhh>:
uint8_t  SPI_Syn_Class_ADF::Read(uint8_t * p, uint8_t n){
     dfc:	b510      	push	{r4, lr}
     dfe:	0014      	movs	r4, r2
	ready=false;
     e00:	2300      	movs	r3, #0
     e02:	7003      	strb	r3, [r0, #0]
	io_read(io, p, (uint16_t)n);
     e04:	68c0      	ldr	r0, [r0, #12]
     e06:	b292      	uxth	r2, r2
     e08:	4b01      	ldr	r3, [pc, #4]	; (e10 <_ZN17SPI_Syn_Class_ADF4ReadEPhh+0x14>)
     e0a:	4798      	blx	r3

	
	return n;
}
     e0c:	0020      	movs	r0, r4
     e0e:	bd10      	pop	{r4, pc}
     e10:	00002215 	.word	0x00002215

00000e14 <_ZN17SPI_Syn_Class_ADF5SetCSEb>:
	if (level) {
     e14:	2900      	cmp	r1, #0
     e16:	d104      	bne.n	e22 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e18:	2280      	movs	r2, #128	; 0x80
     e1a:	23c0      	movs	r3, #192	; 0xc0
     e1c:	05db      	lsls	r3, r3, #23
     e1e:	615a      	str	r2, [r3, #20]
	//spi_m_sync_disable(SPI);
	
}
void SPI_Syn_Class_ADF::SetCS(bool st){
	gpio_set_pin_level(CS_ADF,st);
}
     e20:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e22:	2280      	movs	r2, #128	; 0x80
     e24:	23c0      	movs	r3, #192	; 0xc0
     e26:	05db      	lsls	r3, r3, #23
     e28:	619a      	str	r2, [r3, #24]
     e2a:	e7f9      	b.n	e20 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xc>

00000e2c <_Z41__static_initialization_and_destruction_0ii>:
		else
		{
			return false;
		}

     e2c:	b510      	push	{r4, lr}
     e2e:	2801      	cmp	r0, #1
     e30:	d000      	beq.n	e34 <_Z41__static_initialization_and_destruction_0ii+0x8>
     e32:	bd10      	pop	{r4, pc}
     e34:	4b06      	ldr	r3, [pc, #24]	; (e50 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     e36:	4299      	cmp	r1, r3
     e38:	d1fb      	bne.n	e32 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class staticSPI;
     e3a:	4c06      	ldr	r4, [pc, #24]	; (e54 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     e3c:	0020      	movs	r0, r4
     e3e:	4b06      	ldr	r3, [pc, #24]	; (e58 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     e40:	4798      	blx	r3
     e42:	4a06      	ldr	r2, [pc, #24]	; (e5c <_Z41__static_initialization_and_destruction_0ii+0x30>)
     e44:	4906      	ldr	r1, [pc, #24]	; (e60 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     e46:	0020      	movs	r0, r4
     e48:	4b06      	ldr	r3, [pc, #24]	; (e64 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     e4a:	4798      	blx	r3
     e4c:	e7f1      	b.n	e32 <_Z41__static_initialization_and_destruction_0ii+0x6>
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	0000ffff 	.word	0x0000ffff
     e54:	20000c74 	.word	0x20000c74
     e58:	00001779 	.word	0x00001779
     e5c:	20000000 	.word	0x20000000
     e60:	00001785 	.word	0x00001785
     e64:	00006a25 	.word	0x00006a25

00000e68 <_ZN15lmx2694_HandlerC1Ev>:
	write_registers=local_read_registers;
     e68:	4b0a      	ldr	r3, [pc, #40]	; (e94 <_ZN15lmx2694_HandlerC1Ev+0x2c>)
     e6a:	3310      	adds	r3, #16
     e6c:	6083      	str	r3, [r0, #8]
	read_registers=local_write_registers;
     e6e:	4b0a      	ldr	r3, [pc, #40]	; (e98 <_ZN15lmx2694_HandlerC1Ev+0x30>)
     e70:	3378      	adds	r3, #120	; 0x78
     e72:	6043      	str	r3, [r0, #4]
	channel_divider=1;
     e74:	2301      	movs	r3, #1
     e76:	2221      	movs	r2, #33	; 0x21
     e78:	5483      	strb	r3, [r0, r2]
	channel_index=0;
     e7a:	2200      	movs	r2, #0
     e7c:	77c2      	strb	r2, [r0, #31]
	step=(MAX_SENSOR_FREQUENCY-MIN_WOOBLING_FREQUENCY)/(1024.0*2);
     e7e:	4a07      	ldr	r2, [pc, #28]	; (e9c <_ZN15lmx2694_HandlerC1Ev+0x34>)
     e80:	6442      	str	r2, [r0, #68]	; 0x44
	current_frequency=4000;
     e82:	4a07      	ldr	r2, [pc, #28]	; (ea0 <_ZN15lmx2694_HandlerC1Ev+0x38>)
     e84:	6002      	str	r2, [r0, #0]
	target_frequency=current_frequency+step;
     e86:	4a07      	ldr	r2, [pc, #28]	; (ea4 <_ZN15lmx2694_HandlerC1Ev+0x3c>)
     e88:	6342      	str	r2, [r0, #52]	; 0x34
	direction=true;
     e8a:	2249      	movs	r2, #73	; 0x49
     e8c:	5483      	strb	r3, [r0, r2]
	mash_order=1;
     e8e:	3a29      	subs	r2, #41	; 0x29
     e90:	5483      	strb	r3, [r0, r2]
}
     e92:	4770      	bx	lr
     e94:	20000c74 	.word	0x20000c74
     e98:	20000cf4 	.word	0x20000cf4
     e9c:	3ec80000 	.word	0x3ec80000
     ea0:	457a0000 	.word	0x457a0000
     ea4:	457a0640 	.word	0x457a0640

00000ea8 <_ZN15lmx2694_HandlerD1Ev>:
}
     ea8:	4770      	bx	lr

00000eaa <_ZN15lmx2694_Handler11Get_OUT_MUXEh>:
	if (ov==2)
     eaa:	2902      	cmp	r1, #2
     eac:	d006      	beq.n	ebc <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x12>
		return	(uint8_t)((write_registers[45]>>11)&(0x03));
     eae:	6882      	ldr	r2, [r0, #8]
     eb0:	235a      	movs	r3, #90	; 0x5a
     eb2:	5ad3      	ldrh	r3, [r2, r3]
     eb4:	0adb      	lsrs	r3, r3, #11
     eb6:	2003      	movs	r0, #3
     eb8:	4018      	ands	r0, r3
}
     eba:	4770      	bx	lr
		return	(uint8_t)((write_registers[46])&(0x03));
     ebc:	6882      	ldr	r2, [r0, #8]
     ebe:	235c      	movs	r3, #92	; 0x5c
     ec0:	5cd3      	ldrb	r3, [r2, r3]
     ec2:	2003      	movs	r0, #3
     ec4:	4018      	ands	r0, r3
     ec6:	e7f8      	b.n	eba <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x10>

00000ec8 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
	if (mbr)
     ec8:	2900      	cmp	r1, #0
     eca:	d107      	bne.n	edc <_ZN15lmx2694_Handler13Get_N_DividerEb+0x14>
		N_divider=(uint32_t)(((uint32_t)write_registers[34])<<16)+write_registers[36];
     ecc:	6882      	ldr	r2, [r0, #8]
     ece:	2344      	movs	r3, #68	; 0x44
     ed0:	5ad3      	ldrh	r3, [r2, r3]
     ed2:	041b      	lsls	r3, r3, #16
     ed4:	3148      	adds	r1, #72	; 0x48
     ed6:	5a52      	ldrh	r2, [r2, r1]
     ed8:	189b      	adds	r3, r3, r2
     eda:	6243      	str	r3, [r0, #36]	; 0x24
	return N_divider;
     edc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
     ede:	4770      	bx	lr

00000ee0 <_ZN15lmx2694_Handler13Get_NumeratorEb>:
	if (mbr)
     ee0:	2900      	cmp	r1, #0
     ee2:	d107      	bne.n	ef4 <_ZN15lmx2694_Handler13Get_NumeratorEb+0x14>
		numerator=(uint32_t)(((uint32_t)write_registers[42])<<16)+write_registers[43];
     ee4:	6882      	ldr	r2, [r0, #8]
     ee6:	2354      	movs	r3, #84	; 0x54
     ee8:	5ad3      	ldrh	r3, [r2, r3]
     eea:	041b      	lsls	r3, r3, #16
     eec:	3156      	adds	r1, #86	; 0x56
     eee:	5a52      	ldrh	r2, [r2, r1]
     ef0:	189b      	adds	r3, r3, r2
     ef2:	6283      	str	r3, [r0, #40]	; 0x28
	return numerator;
     ef4:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
     ef6:	4770      	bx	lr

00000ef8 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
	if (mbr)
     ef8:	2900      	cmp	r1, #0
     efa:	d107      	bne.n	f0c <_ZN15lmx2694_Handler15Get_DenominatorEb+0x14>
		denominator=(uint32_t)(((uint32_t)write_registers[38])<<16)+write_registers[39];
     efc:	6882      	ldr	r2, [r0, #8]
     efe:	234c      	movs	r3, #76	; 0x4c
     f00:	5ad3      	ldrh	r3, [r2, r3]
     f02:	041b      	lsls	r3, r3, #16
     f04:	314e      	adds	r1, #78	; 0x4e
     f06:	5a52      	ldrh	r2, [r2, r1]
     f08:	189b      	adds	r3, r3, r2
     f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
	return denominator;
     f0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     f0e:	4770      	bx	lr

00000f10 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
float lmx2694_Handler::Calculate_Current_Frequency(bool mbr){
     f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f12:	0004      	movs	r4, r0
	if (mbr)
     f14:	2900      	cmp	r1, #0
     f16:	d001      	beq.n	f1c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0xc>
	return vco_frequency;
     f18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
     f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+(float(Get_Numerator(false))/float(Get_Denominator(false))));
     f1c:	4b0e      	ldr	r3, [pc, #56]	; (f58 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x48>)
     f1e:	4798      	blx	r3
     f20:	4d0e      	ldr	r5, [pc, #56]	; (f5c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x4c>)
     f22:	47a8      	blx	r5
     f24:	1c06      	adds	r6, r0, #0
     f26:	2100      	movs	r1, #0
     f28:	0020      	movs	r0, r4
     f2a:	4b0d      	ldr	r3, [pc, #52]	; (f60 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x50>)
     f2c:	4798      	blx	r3
     f2e:	47a8      	blx	r5
     f30:	1c07      	adds	r7, r0, #0
     f32:	2100      	movs	r1, #0
     f34:	0020      	movs	r0, r4
     f36:	4b0b      	ldr	r3, [pc, #44]	; (f64 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x54>)
     f38:	4798      	blx	r3
     f3a:	47a8      	blx	r5
     f3c:	1c01      	adds	r1, r0, #0
     f3e:	1c38      	adds	r0, r7, #0
     f40:	4b09      	ldr	r3, [pc, #36]	; (f68 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x58>)
     f42:	4798      	blx	r3
     f44:	1c01      	adds	r1, r0, #0
     f46:	1c30      	adds	r0, r6, #0
     f48:	4b08      	ldr	r3, [pc, #32]	; (f6c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x5c>)
     f4a:	4798      	blx	r3
     f4c:	4908      	ldr	r1, [pc, #32]	; (f70 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x60>)
     f4e:	4b09      	ldr	r3, [pc, #36]	; (f74 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x64>)
     f50:	4798      	blx	r3
     f52:	63a0      	str	r0, [r4, #56]	; 0x38
     f54:	e7e0      	b.n	f18 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x8>
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	00000ec9 	.word	0x00000ec9
     f5c:	000096a9 	.word	0x000096a9
     f60:	00000ee1 	.word	0x00000ee1
     f64:	00000ef9 	.word	0x00000ef9
     f68:	00008c71 	.word	0x00008c71
     f6c:	0000894d 	.word	0x0000894d
     f70:	43480000 	.word	0x43480000
     f74:	00009051 	.word	0x00009051

00000f78 <_ZN15lmx2694_Handler3GCDEmm>:
{
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	0006      	movs	r6, r0
     f7c:	000d      	movs	r5, r1
     f7e:	0014      	movs	r4, r2
	if (a == 0)
     f80:	2900      	cmp	r1, #0
     f82:	d016      	beq.n	fb2 <_ZN15lmx2694_Handler3GCDEmm+0x3a>
	else if (b == 0)
     f84:	2a00      	cmp	r2, #0
     f86:	d016      	beq.n	fb6 <_ZN15lmx2694_Handler3GCDEmm+0x3e>
	if (a < b)
     f88:	4291      	cmp	r1, r2
     f8a:	d309      	bcc.n	fa0 <_ZN15lmx2694_Handler3GCDEmm+0x28>
	return GCD(b, a % b);
     f8c:	0011      	movs	r1, r2
     f8e:	0028      	movs	r0, r5
     f90:	4b0a      	ldr	r3, [pc, #40]	; (fbc <_ZN15lmx2694_Handler3GCDEmm+0x44>)
     f92:	4798      	blx	r3
     f94:	000a      	movs	r2, r1
     f96:	0021      	movs	r1, r4
     f98:	0030      	movs	r0, r6
     f9a:	f7ff ffed 	bl	f78 <_ZN15lmx2694_Handler3GCDEmm>
     f9e:	e009      	b.n	fb4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return GCD(a, b % a);
     fa0:	0010      	movs	r0, r2
     fa2:	4b06      	ldr	r3, [pc, #24]	; (fbc <_ZN15lmx2694_Handler3GCDEmm+0x44>)
     fa4:	4798      	blx	r3
     fa6:	000a      	movs	r2, r1
     fa8:	0029      	movs	r1, r5
     faa:	0030      	movs	r0, r6
     fac:	f7ff ffe4 	bl	f78 <_ZN15lmx2694_Handler3GCDEmm>
     fb0:	e000      	b.n	fb4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return b;
     fb2:	0010      	movs	r0, r2
}
     fb4:	bd70      	pop	{r4, r5, r6, pc}
	return a;
     fb6:	0008      	movs	r0, r1
     fb8:	e7fc      	b.n	fb4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	0000843d 	.word	0x0000843d

00000fc0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
uint8_t lmx2694_Handler::Choose_Channel_Divider_Index(){
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	0005      	movs	r5, r0
	for ( int i = 0; i < channel_divider_size; i++)
     fc4:	2400      	movs	r4, #0
     fc6:	e00d      	b.n	fe4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x24>
				if (MAX_VCO_FREQUENCY/(channel_divider_values[i])>target_frequency)
     fc8:	00a3      	lsls	r3, r4, #2
     fca:	4a17      	ldr	r2, [pc, #92]	; (1028 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
     fcc:	5899      	ldr	r1, [r3, r2]
     fce:	4817      	ldr	r0, [pc, #92]	; (102c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x6c>)
     fd0:	4b17      	ldr	r3, [pc, #92]	; (1030 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
     fd2:	4798      	blx	r3
     fd4:	4b17      	ldr	r3, [pc, #92]	; (1034 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
     fd6:	4798      	blx	r3
     fd8:	6b69      	ldr	r1, [r5, #52]	; 0x34
     fda:	4b17      	ldr	r3, [pc, #92]	; (1038 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
     fdc:	4798      	blx	r3
     fde:	2800      	cmp	r0, #0
     fe0:	d01a      	beq.n	1018 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x58>
	for ( int i = 0; i < channel_divider_size; i++)
     fe2:	3401      	adds	r4, #1
     fe4:	2c0d      	cmp	r4, #13
     fe6:	dc10      	bgt.n	100a <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
		if (i<3)
     fe8:	2c02      	cmp	r4, #2
     fea:	dded      	ble.n	fc8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x8>
				if (11500/(channel_divider_values[i])>target_frequency)
     fec:	00a3      	lsls	r3, r4, #2
     fee:	4a0e      	ldr	r2, [pc, #56]	; (1028 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
     ff0:	5899      	ldr	r1, [r3, r2]
     ff2:	4812      	ldr	r0, [pc, #72]	; (103c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x7c>)
     ff4:	4b0e      	ldr	r3, [pc, #56]	; (1030 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
     ff6:	4798      	blx	r3
     ff8:	4b0e      	ldr	r3, [pc, #56]	; (1034 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
     ffa:	4798      	blx	r3
     ffc:	6b69      	ldr	r1, [r5, #52]	; 0x34
     ffe:	4b0e      	ldr	r3, [pc, #56]	; (1038 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
    1000:	4798      	blx	r3
    1002:	2800      	cmp	r0, #0
    1004:	d1ed      	bne.n	fe2 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x22>
					channel_index= i-1;
    1006:	3c01      	subs	r4, #1
    1008:	77ec      	strb	r4, [r5, #31]
	channel_divider=channel_divider_values[channel_index];
    100a:	7fe8      	ldrb	r0, [r5, #31]
    100c:	0083      	lsls	r3, r0, #2
    100e:	4a06      	ldr	r2, [pc, #24]	; (1028 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    1010:	5cd2      	ldrb	r2, [r2, r3]
    1012:	2321      	movs	r3, #33	; 0x21
    1014:	54ea      	strb	r2, [r5, r3]
}
    1016:	bd70      	pop	{r4, r5, r6, pc}
					if (i>0)
    1018:	2c00      	cmp	r4, #0
    101a:	dd02      	ble.n	1022 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x62>
							channel_index=i-1;
    101c:	3c01      	subs	r4, #1
    101e:	77ec      	strb	r4, [r5, #31]
    1020:	e7f3      	b.n	100a <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
						 channel_index=0;
    1022:	2300      	movs	r3, #0
    1024:	77eb      	strb	r3, [r5, #31]
    1026:	e7f0      	b.n	100a <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
    1028:	000101b4 	.word	0x000101b4
    102c:	00003afc 	.word	0x00003afc
    1030:	00008445 	.word	0x00008445
    1034:	00009609 	.word	0x00009609
    1038:	000086e5 	.word	0x000086e5
    103c:	00002cec 	.word	0x00002cec

00001040 <_ZN15lmx2694_Handler18Calculate_FractionEf>:
void lmx2694_Handler::Calculate_Fraction(float fr){
    1040:	b5f0      	push	{r4, r5, r6, r7, lr}
    1042:	b083      	sub	sp, #12
    1044:	0004      	movs	r4, r0
    1046:	1c08      	adds	r0, r1, #0
	gcd=GCD((uint32_t)(round(fr*PRECISION)),PRECISION);
    1048:	219f      	movs	r1, #159	; 0x9f
    104a:	05c9      	lsls	r1, r1, #23
    104c:	4b0f      	ldr	r3, [pc, #60]	; (108c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x4c>)
    104e:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    1050:	4b0f      	ldr	r3, [pc, #60]	; (1090 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x50>)
    1052:	4798      	blx	r3
    1054:	9001      	str	r0, [sp, #4]
    1056:	2601      	movs	r6, #1
    1058:	4276      	negs	r6, r6
    105a:	4f0e      	ldr	r7, [pc, #56]	; (1094 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x54>)
    105c:	47b8      	blx	r7
    105e:	0001      	movs	r1, r0
    1060:	0032      	movs	r2, r6
    1062:	0020      	movs	r0, r4
    1064:	4b0c      	ldr	r3, [pc, #48]	; (1098 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x58>)
    1066:	4798      	blx	r3
    1068:	0005      	movs	r5, r0
    106a:	6320      	str	r0, [r4, #48]	; 0x30
	numerator=(uint32_t)(round(fr*PRECISION)/gcd);
    106c:	4b0b      	ldr	r3, [pc, #44]	; (109c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x5c>)
    106e:	4798      	blx	r3
    1070:	1c01      	adds	r1, r0, #0
    1072:	9801      	ldr	r0, [sp, #4]
    1074:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x60>)
    1076:	4798      	blx	r3
    1078:	47b8      	blx	r7
    107a:	62a0      	str	r0, [r4, #40]	; 0x28
	denominator=PRECISION/gcd;
    107c:	0029      	movs	r1, r5
    107e:	0030      	movs	r0, r6
    1080:	4b08      	ldr	r3, [pc, #32]	; (10a4 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x64>)
    1082:	4798      	blx	r3
    1084:	62e0      	str	r0, [r4, #44]	; 0x2c
}
    1086:	b003      	add	sp, #12
    1088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00009051 	.word	0x00009051
    1090:	00006c01 	.word	0x00006c01
    1094:	00008761 	.word	0x00008761
    1098:	00000f79 	.word	0x00000f79
    109c:	000096a9 	.word	0x000096a9
    10a0:	00008c71 	.word	0x00008c71
    10a4:	00008331 	.word	0x00008331

000010a8 <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
    10a8:	b530      	push	{r4, r5, lr}
	for(int i=0; i<3;i++){
    10aa:	2200      	movs	r2, #0
    10ac:	2a02      	cmp	r2, #2
    10ae:	dc08      	bgt.n	10c2 <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
    10b0:	2302      	movs	r3, #2
    10b2:	1a9b      	subs	r3, r3, r2
    10b4:	00d4      	lsls	r4, r2, #3
    10b6:	000d      	movs	r5, r1
    10b8:	40e5      	lsrs	r5, r4
    10ba:	18c3      	adds	r3, r0, r3
    10bc:	741d      	strb	r5, [r3, #16]
	for(int i=0; i<3;i++){
    10be:	3201      	adds	r2, #1
    10c0:	e7f4      	b.n	10ac <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x4>
}
    10c2:	bd30      	pop	{r4, r5, pc}

000010c4 <_ZN15lmx2694_Handler10Power_DownEv>:
bool lmx2694_Handler::Power_Down(){
    10c4:	b570      	push	{r4, r5, r6, lr}
    10c6:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
    10c8:	2100      	movs	r1, #0
    10ca:	68c0      	ldr	r0, [r0, #12]
    10cc:	4d0a      	ldr	r5, [pc, #40]	; (10f8 <_ZN15lmx2694_Handler10Power_DownEv+0x34>)
    10ce:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
    10d0:	490a      	ldr	r1, [pc, #40]	; (10fc <_ZN15lmx2694_Handler10Power_DownEv+0x38>)
    10d2:	0020      	movs	r0, r4
    10d4:	4b0a      	ldr	r3, [pc, #40]	; (1100 <_ZN15lmx2694_Handler10Power_DownEv+0x3c>)
    10d6:	4798      	blx	r3
	int_result=spi_lmx->Write(write_bytes,3);
    10d8:	0021      	movs	r1, r4
    10da:	3110      	adds	r1, #16
    10dc:	2203      	movs	r2, #3
    10de:	68e0      	ldr	r0, [r4, #12]
    10e0:	4b08      	ldr	r3, [pc, #32]	; (1104 <_ZN15lmx2694_Handler10Power_DownEv+0x40>)
    10e2:	4798      	blx	r3
    10e4:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
    10e6:	17c3      	asrs	r3, r0, #31
    10e8:	1a18      	subs	r0, r3, r0
    10ea:	0fc0      	lsrs	r0, r0, #31
    10ec:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
    10ee:	2101      	movs	r1, #1
    10f0:	68e0      	ldr	r0, [r4, #12]
    10f2:	47a8      	blx	r5
	return bool_result;
    10f4:	7da0      	ldrb	r0, [r4, #22]
}
    10f6:	bd70      	pop	{r4, r5, r6, pc}
    10f8:	000017f5 	.word	0x000017f5
    10fc:	00002119 	.word	0x00002119
    1100:	000010a9 	.word	0x000010a9
    1104:	000017c5 	.word	0x000017c5

00001108 <_ZN15lmx2694_Handler13Program_ResetEv>:
bool lmx2694_Handler::Program_Reset(){
    1108:	b5f0      	push	{r4, r5, r6, r7, lr}
    110a:	b083      	sub	sp, #12
    110c:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
    110e:	2100      	movs	r1, #0
    1110:	68c0      	ldr	r0, [r0, #12]
    1112:	4d16      	ldr	r5, [pc, #88]	; (116c <_ZN15lmx2694_Handler13Program_ResetEv+0x64>)
    1114:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
    1116:	4916      	ldr	r1, [pc, #88]	; (1170 <_ZN15lmx2694_Handler13Program_ResetEv+0x68>)
    1118:	0020      	movs	r0, r4
    111a:	4f16      	ldr	r7, [pc, #88]	; (1174 <_ZN15lmx2694_Handler13Program_ResetEv+0x6c>)
    111c:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
    111e:	2310      	movs	r3, #16
    1120:	469c      	mov	ip, r3
    1122:	44a4      	add	ip, r4
    1124:	4663      	mov	r3, ip
    1126:	2203      	movs	r2, #3
    1128:	9301      	str	r3, [sp, #4]
    112a:	4661      	mov	r1, ip
    112c:	68e0      	ldr	r0, [r4, #12]
    112e:	4e12      	ldr	r6, [pc, #72]	; (1178 <_ZN15lmx2694_Handler13Program_ResetEv+0x70>)
    1130:	47b0      	blx	r6
    1132:	61a0      	str	r0, [r4, #24]
	spi_lmx->SetCS(true);
    1134:	2101      	movs	r1, #1
    1136:	68e0      	ldr	r0, [r4, #12]
    1138:	47a8      	blx	r5
	delay_ms(100);
    113a:	2064      	movs	r0, #100	; 0x64
    113c:	4b0f      	ldr	r3, [pc, #60]	; (117c <_ZN15lmx2694_Handler13Program_ResetEv+0x74>)
    113e:	4798      	blx	r3
	spi_lmx->SetCS(false);
    1140:	2100      	movs	r1, #0
    1142:	68e0      	ldr	r0, [r4, #12]
    1144:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
    1146:	490e      	ldr	r1, [pc, #56]	; (1180 <_ZN15lmx2694_Handler13Program_ResetEv+0x78>)
    1148:	0020      	movs	r0, r4
    114a:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
    114c:	2203      	movs	r2, #3
    114e:	9901      	ldr	r1, [sp, #4]
    1150:	68e0      	ldr	r0, [r4, #12]
    1152:	47b0      	blx	r6
    1154:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
    1156:	17c3      	asrs	r3, r0, #31
    1158:	1a18      	subs	r0, r3, r0
    115a:	0fc0      	lsrs	r0, r0, #31
    115c:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
    115e:	2101      	movs	r1, #1
    1160:	68e0      	ldr	r0, [r4, #12]
    1162:	47a8      	blx	r5
	return bool_result;
    1164:	7da0      	ldrb	r0, [r4, #22]
}
    1166:	b003      	add	sp, #12
    1168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	000017f5 	.word	0x000017f5
    1170:	0000211e 	.word	0x0000211e
    1174:	000010a9 	.word	0x000010a9
    1178:	000017c5 	.word	0x000017c5
    117c:	0000206d 	.word	0x0000206d
    1180:	0000211c 	.word	0x0000211c

00001184 <_ZN15lmx2694_Handler16Make_Three_BytesEht>:
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16_t data){
    1184:	b570      	push	{r4, r5, r6, lr}
	for(int i=0; i<2;i++){
    1186:	2300      	movs	r3, #0
    1188:	2b01      	cmp	r3, #1
    118a:	dc08      	bgt.n	119e <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
    118c:	2402      	movs	r4, #2
    118e:	1ae4      	subs	r4, r4, r3
    1190:	00dd      	lsls	r5, r3, #3
    1192:	0016      	movs	r6, r2
    1194:	412e      	asrs	r6, r5
    1196:	1904      	adds	r4, r0, r4
    1198:	7426      	strb	r6, [r4, #16]
	for(int i=0; i<2;i++){
    119a:	3301      	adds	r3, #1
    119c:	e7f4      	b.n	1188 <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x4>
	write_bytes[0]=index;
    119e:	7401      	strb	r1, [r0, #16]
}
    11a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000011a4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht>:
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16_t data){
    11a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11a6:	0004      	movs	r4, r0
    11a8:	000e      	movs	r6, r1
    11aa:	0015      	movs	r5, r2
	if ((write_registers[index]==data)&is_locked)
    11ac:	004f      	lsls	r7, r1, #1
    11ae:	6883      	ldr	r3, [r0, #8]
    11b0:	5bdb      	ldrh	r3, [r3, r7]
    11b2:	7dc2      	ldrb	r2, [r0, #23]
    11b4:	42ab      	cmp	r3, r5
    11b6:	d103      	bne.n	11c0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
    11b8:	2a00      	cmp	r2, #0
    11ba:	d001      	beq.n	11c0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
	return int_result;
    11bc:	69a0      	ldr	r0, [r4, #24]
}
    11be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_lmx->SetCS(false);
    11c0:	2100      	movs	r1, #0
    11c2:	68e0      	ldr	r0, [r4, #12]
    11c4:	4b0b      	ldr	r3, [pc, #44]	; (11f4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
    11c6:	4798      	blx	r3
		Make_Three_Bytes(index,data);
    11c8:	002a      	movs	r2, r5
    11ca:	0031      	movs	r1, r6
    11cc:	0020      	movs	r0, r4
    11ce:	4b0a      	ldr	r3, [pc, #40]	; (11f8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x54>)
    11d0:	4798      	blx	r3
		int_result=spi_lmx->Write(write_bytes,3);
    11d2:	0021      	movs	r1, r4
    11d4:	3110      	adds	r1, #16
    11d6:	2203      	movs	r2, #3
    11d8:	68e0      	ldr	r0, [r4, #12]
    11da:	4b08      	ldr	r3, [pc, #32]	; (11fc <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x58>)
    11dc:	4798      	blx	r3
    11de:	61a0      	str	r0, [r4, #24]
		if (int_result>0)
    11e0:	2800      	cmp	r0, #0
    11e2:	dd01      	ble.n	11e8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x44>
				write_registers[index]=data;
    11e4:	68a3      	ldr	r3, [r4, #8]
    11e6:	53dd      	strh	r5, [r3, r7]
		spi_lmx->SetCS(true);
    11e8:	2101      	movs	r1, #1
    11ea:	68e0      	ldr	r0, [r4, #12]
    11ec:	4b01      	ldr	r3, [pc, #4]	; (11f4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
    11ee:	4798      	blx	r3
    11f0:	e7e4      	b.n	11bc <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x18>
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	000017f5 	.word	0x000017f5
    11f8:	00001185 	.word	0x00001185
    11fc:	000017c5 	.word	0x000017c5

00001200 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
    1200:	b570      	push	{r4, r5, r6, lr}
    1202:	0004      	movs	r4, r0
    1204:	1c0d      	adds	r5, r1, #0
	if (mash_order)
    1206:	2320      	movs	r3, #32
    1208:	5cc3      	ldrb	r3, [r0, r3]
    120a:	2b00      	cmp	r3, #0
    120c:	d002      	beq.n	1214 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
		switch (mash_order)
    120e:	d005      	beq.n	121c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1c>
    1210:	2b01      	cmp	r3, #1
    1212:	d015      	beq.n	1240 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x40>
	return write_registers[37];
    1214:	68a2      	ldr	r2, [r4, #8]
    1216:	234a      	movs	r3, #74	; 0x4a
    1218:	5ad0      	ldrh	r0, [r2, r3]
}
    121a:	bd70      	pop	{r4, r5, r6, pc}
				if (vcof>12500)
    121c:	4917      	ldr	r1, [pc, #92]	; (127c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
    121e:	1c28      	adds	r0, r5, #0
    1220:	4b17      	ldr	r3, [pc, #92]	; (1280 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1222:	4798      	blx	r3
    1224:	2800      	cmp	r0, #0
    1226:	d005      	beq.n	1234 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x34>
					Write_Single_Register(37,0x8204);
    1228:	4a16      	ldr	r2, [pc, #88]	; (1284 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
    122a:	2125      	movs	r1, #37	; 0x25
    122c:	0020      	movs	r0, r4
    122e:	4b16      	ldr	r3, [pc, #88]	; (1288 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1230:	4798      	blx	r3
    1232:	e7ef      	b.n	1214 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8104);
    1234:	4a15      	ldr	r2, [pc, #84]	; (128c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
    1236:	2125      	movs	r1, #37	; 0x25
    1238:	0020      	movs	r0, r4
    123a:	4b13      	ldr	r3, [pc, #76]	; (1288 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    123c:	4798      	blx	r3
    123e:	e7e9      	b.n	1214 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
				if (vcof>12500)
    1240:	490e      	ldr	r1, [pc, #56]	; (127c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
    1242:	1c28      	adds	r0, r5, #0
    1244:	4b0e      	ldr	r3, [pc, #56]	; (1280 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1246:	4798      	blx	r3
    1248:	2800      	cmp	r0, #0
    124a:	d10b      	bne.n	1264 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x64>
					if (vcof>10000)
    124c:	4910      	ldr	r1, [pc, #64]	; (1290 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x90>)
    124e:	1c28      	adds	r0, r5, #0
    1250:	4b0b      	ldr	r3, [pc, #44]	; (1280 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1252:	4798      	blx	r3
    1254:	2800      	cmp	r0, #0
    1256:	d10b      	bne.n	1270 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x70>
						Write_Single_Register(37,0x8104);
    1258:	4a0c      	ldr	r2, [pc, #48]	; (128c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
    125a:	2125      	movs	r1, #37	; 0x25
    125c:	0020      	movs	r0, r4
    125e:	4b0a      	ldr	r3, [pc, #40]	; (1288 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1260:	4798      	blx	r3
    1262:	e7d7      	b.n	1214 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8304);
    1264:	4a0b      	ldr	r2, [pc, #44]	; (1294 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x94>)
    1266:	2125      	movs	r1, #37	; 0x25
    1268:	0020      	movs	r0, r4
    126a:	4b07      	ldr	r3, [pc, #28]	; (1288 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    126c:	4798      	blx	r3
    126e:	e7d1      	b.n	1214 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
						Write_Single_Register(37,0x8204);
    1270:	4a04      	ldr	r2, [pc, #16]	; (1284 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
    1272:	2125      	movs	r1, #37	; 0x25
    1274:	0020      	movs	r0, r4
    1276:	4b04      	ldr	r3, [pc, #16]	; (1288 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1278:	4798      	blx	r3
    127a:	e7cb      	b.n	1214 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
    127c:	46435000 	.word	0x46435000
    1280:	000086e5 	.word	0x000086e5
    1284:	00008204 	.word	0x00008204
    1288:	000011a5 	.word	0x000011a5
    128c:	00008104 	.word	0x00008104
    1290:	461c4000 	.word	0x461c4000
    1294:	00008304 	.word	0x00008304

00001298 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
bool lmx2694_Handler::Write_FCAL_EN(bool st){
    1298:	b510      	push	{r4, lr}
    129a:	0004      	movs	r4, r0
	if(st){
    129c:	2900      	cmp	r1, #0
    129e:	d10e      	bne.n	12be <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x26>
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
    12a0:	6883      	ldr	r3, [r0, #8]
    12a2:	881b      	ldrh	r3, [r3, #0]
    12a4:	2208      	movs	r2, #8
    12a6:	4393      	bics	r3, r2
    12a8:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
    12aa:	8ba2      	ldrh	r2, [r4, #28]
    12ac:	2100      	movs	r1, #0
    12ae:	0020      	movs	r0, r4
    12b0:	4b06      	ldr	r3, [pc, #24]	; (12cc <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x34>)
    12b2:	4798      	blx	r3
    12b4:	61a0      	str	r0, [r4, #24]
	return int_result;
    12b6:	1e43      	subs	r3, r0, #1
    12b8:	4198      	sbcs	r0, r3
    12ba:	b2c0      	uxtb	r0, r0
}
    12bc:	bd10      	pop	{r4, pc}
		register_value=write_registers[0]|(0x01<<FCAL_EN);
    12be:	6883      	ldr	r3, [r0, #8]
    12c0:	881b      	ldrh	r3, [r3, #0]
    12c2:	2208      	movs	r2, #8
    12c4:	4313      	orrs	r3, r2
    12c6:	8383      	strh	r3, [r0, #28]
    12c8:	e7ef      	b.n	12aa <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x12>
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	000011a5 	.word	0x000011a5

000012d0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	0004      	movs	r4, r0
	Write_FCAL_EN(false);
    12d4:	2100      	movs	r1, #0
    12d6:	4d05      	ldr	r5, [pc, #20]	; (12ec <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x1c>)
    12d8:	47a8      	blx	r5
	delay_ms(100);
    12da:	2064      	movs	r0, #100	; 0x64
    12dc:	4b04      	ldr	r3, [pc, #16]	; (12f0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x20>)
    12de:	4798      	blx	r3
	bool_result=Write_FCAL_EN(true);
    12e0:	2101      	movs	r1, #1
    12e2:	0020      	movs	r0, r4
    12e4:	47a8      	blx	r5
    12e6:	75a0      	strb	r0, [r4, #22]
}
    12e8:	bd70      	pop	{r4, r5, r6, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	00001299 	.word	0x00001299
    12f0:	0000206d 	.word	0x0000206d

000012f4 <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
void lmx2694_Handler::Initiate_Registers(){
    12f4:	b570      	push	{r4, r5, r6, lr}
    12f6:	0005      	movs	r5, r0
	for (int i = 0; i < NUMBER_REGISTERS; i++)
    12f8:	2200      	movs	r2, #0
    12fa:	2a72      	cmp	r2, #114	; 0x72
    12fc:	dc0a      	bgt.n	1314 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x20>
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
    12fe:	0050      	lsls	r0, r2, #1
    1300:	2372      	movs	r3, #114	; 0x72
    1302:	1a9b      	subs	r3, r3, r2
    1304:	005b      	lsls	r3, r3, #1
    1306:	490b      	ldr	r1, [pc, #44]	; (1334 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x40>)
    1308:	18cb      	adds	r3, r1, r3
    130a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    130c:	6869      	ldr	r1, [r5, #4]
    130e:	520b      	strh	r3, [r1, r0]
	for (int i = 0; i < NUMBER_REGISTERS; i++)
    1310:	3201      	adds	r2, #1
    1312:	e7f2      	b.n	12fa <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x6>
    1314:	2473      	movs	r4, #115	; 0x73
	for(int i=NUMBER_REGISTERS; i>0;i--){
    1316:	2c00      	cmp	r4, #0
    1318:	dd0b      	ble.n	1332 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x3e>
		Write_Single_Register(i-1,read_registers[i-1]);
    131a:	1e61      	subs	r1, r4, #1
    131c:	b2c9      	uxtb	r1, r1
    131e:	4b06      	ldr	r3, [pc, #24]	; (1338 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x44>)
    1320:	18e3      	adds	r3, r4, r3
    1322:	005b      	lsls	r3, r3, #1
    1324:	686a      	ldr	r2, [r5, #4]
    1326:	5ad2      	ldrh	r2, [r2, r3]
    1328:	0028      	movs	r0, r5
    132a:	4b04      	ldr	r3, [pc, #16]	; (133c <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x48>)
    132c:	4798      	blx	r3
	for(int i=NUMBER_REGISTERS; i>0;i--){
    132e:	3c01      	subs	r4, #1
    1330:	e7f1      	b.n	1316 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x22>
}
    1332:	bd70      	pop	{r4, r5, r6, pc}
    1334:	000101b4 	.word	0x000101b4
    1338:	7fffffff 	.word	0x7fffffff
    133c:	000011a5 	.word	0x000011a5

00001340 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
    1340:	b510      	push	{r4, lr}
    1342:	0004      	movs	r4, r0
	if(st){
    1344:	2900      	cmp	r1, #0
    1346:	d10b      	bne.n	1360 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x20>
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
    1348:	6843      	ldr	r3, [r0, #4]
    134a:	881b      	ldrh	r3, [r3, #0]
    134c:	2204      	movs	r2, #4
    134e:	4393      	bics	r3, r2
    1350:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
    1352:	8ba2      	ldrh	r2, [r4, #28]
    1354:	2100      	movs	r1, #0
    1356:	0020      	movs	r0, r4
    1358:	4b04      	ldr	r3, [pc, #16]	; (136c <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x2c>)
    135a:	4798      	blx	r3
    135c:	61a0      	str	r0, [r4, #24]
}
    135e:	bd10      	pop	{r4, pc}
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
    1360:	6843      	ldr	r3, [r0, #4]
    1362:	881b      	ldrh	r3, [r3, #0]
    1364:	2204      	movs	r2, #4
    1366:	4313      	orrs	r3, r2
    1368:	8383      	strh	r3, [r0, #28]
    136a:	e7f2      	b.n	1352 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x12>
    136c:	000011a5 	.word	0x000011a5

00001370 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
    1370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1372:	0004      	movs	r4, r0
    1374:	000e      	movs	r6, r1
	Set_MUXOUT_READBACK(false);
    1376:	2100      	movs	r1, #0
    1378:	4b1b      	ldr	r3, [pc, #108]	; (13e8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
    137a:	4798      	blx	r3
	register_value=0;
    137c:	2300      	movs	r3, #0
    137e:	83a3      	strh	r3, [r4, #28]
	while((register_value==0)|(register_value==0xffff)){
    1380:	8ba2      	ldrh	r2, [r4, #28]
    1382:	1e53      	subs	r3, r2, #1
    1384:	b29b      	uxth	r3, r3
    1386:	4919      	ldr	r1, [pc, #100]	; (13ec <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x7c>)
    1388:	428b      	cmp	r3, r1
    138a:	d924      	bls.n	13d6 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x66>
		spi_lmx->SetCS(false);
    138c:	2100      	movs	r1, #0
    138e:	68e0      	ldr	r0, [r4, #12]
    1390:	4f17      	ldr	r7, [pc, #92]	; (13f0 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x80>)
    1392:	47b8      	blx	r7
			private_index=index|0x80;
    1394:	2380      	movs	r3, #128	; 0x80
    1396:	425b      	negs	r3, r3
    1398:	4333      	orrs	r3, r6
    139a:	77a3      	strb	r3, [r4, #30]
			memset(read_bytes,0,3);
    139c:	2203      	movs	r2, #3
    139e:	2100      	movs	r1, #0
    13a0:	0025      	movs	r5, r4
    13a2:	3513      	adds	r5, #19
    13a4:	0028      	movs	r0, r5
    13a6:	4b13      	ldr	r3, [pc, #76]	; (13f4 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x84>)
    13a8:	4798      	blx	r3
			int_result=spi_lmx->Write(&private_index,1);
    13aa:	2201      	movs	r2, #1
    13ac:	0021      	movs	r1, r4
    13ae:	311e      	adds	r1, #30
    13b0:	68e0      	ldr	r0, [r4, #12]
    13b2:	4b11      	ldr	r3, [pc, #68]	; (13f8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x88>)
    13b4:	4798      	blx	r3
    13b6:	61a0      	str	r0, [r4, #24]
			int_result=spi_lmx->Read(read_bytes,2);
    13b8:	2202      	movs	r2, #2
    13ba:	0029      	movs	r1, r5
    13bc:	68e0      	ldr	r0, [r4, #12]
    13be:	4b0f      	ldr	r3, [pc, #60]	; (13fc <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x8c>)
    13c0:	4798      	blx	r3
    13c2:	61a0      	str	r0, [r4, #24]
			register_value=read_bytes[0]*256+read_bytes[1];
    13c4:	7ce3      	ldrb	r3, [r4, #19]
    13c6:	021b      	lsls	r3, r3, #8
    13c8:	7d22      	ldrb	r2, [r4, #20]
    13ca:	189b      	adds	r3, r3, r2
    13cc:	83a3      	strh	r3, [r4, #28]
			spi_lmx->SetCS(true);
    13ce:	2101      	movs	r1, #1
    13d0:	68e0      	ldr	r0, [r4, #12]
    13d2:	47b8      	blx	r7
	while((register_value==0)|(register_value==0xffff)){
    13d4:	e7d4      	b.n	1380 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x10>
	read_registers[index]=register_value;
    13d6:	0076      	lsls	r6, r6, #1
    13d8:	6863      	ldr	r3, [r4, #4]
    13da:	539a      	strh	r2, [r3, r6]
	Set_MUXOUT_READBACK(true);
    13dc:	2101      	movs	r1, #1
    13de:	0020      	movs	r0, r4
    13e0:	4b01      	ldr	r3, [pc, #4]	; (13e8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
    13e2:	4798      	blx	r3
	return register_value;
    13e4:	8ba0      	ldrh	r0, [r4, #28]
}
    13e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13e8:	00001341 	.word	0x00001341
    13ec:	0000fffd 	.word	0x0000fffd
    13f0:	000017f5 	.word	0x000017f5
    13f4:	0000b4a5 	.word	0x0000b4a5
    13f8:	000017c5 	.word	0x000017c5
    13fc:	000017dd 	.word	0x000017dd

00001400 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
    1400:	b510      	push	{r4, lr}
    1402:	0004      	movs	r4, r0
	if (mbr)
    1404:	2900      	cmp	r1, #0
    1406:	d10b      	bne.n	1420 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x20>
		channel_index=((write_registers[75])>>6)&0x1f;
    1408:	2396      	movs	r3, #150	; 0x96
    140a:	6882      	ldr	r2, [r0, #8]
    140c:	5ad2      	ldrh	r2, [r2, r3]
    140e:	1192      	asrs	r2, r2, #6
    1410:	3b77      	subs	r3, #119	; 0x77
    1412:	4013      	ands	r3, r2
    1414:	77c3      	strb	r3, [r0, #31]
	return channel_divider_values[channel_index];
    1416:	7fe3      	ldrb	r3, [r4, #31]
    1418:	009b      	lsls	r3, r3, #2
    141a:	4a05      	ldr	r2, [pc, #20]	; (1430 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x30>)
    141c:	5898      	ldr	r0, [r3, r2]
}
    141e:	bd10      	pop	{r4, pc}
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
    1420:	214b      	movs	r1, #75	; 0x4b
    1422:	4b04      	ldr	r3, [pc, #16]	; (1434 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x34>)
    1424:	4798      	blx	r3
    1426:	1183      	asrs	r3, r0, #6
    1428:	201f      	movs	r0, #31
    142a:	4018      	ands	r0, r3
    142c:	77e0      	strb	r0, [r4, #31]
    142e:	e7f2      	b.n	1416 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x16>
    1430:	000101b4 	.word	0x000101b4
    1434:	00001371 	.word	0x00001371

00001438 <_ZN15lmx2694_Handler9Is_LockedEv>:
bool lmx2694_Handler::Is_Locked(void){
    1438:	b570      	push	{r4, r5, r6, lr}
    143a:	b082      	sub	sp, #8
    143c:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    143e:	4668      	mov	r0, sp
    1440:	4b2a      	ldr	r3, [pc, #168]	; (14ec <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
    1442:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1444:	23c0      	movs	r3, #192	; 0xc0
    1446:	05db      	lsls	r3, r3, #23
    1448:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    144a:	4a29      	ldr	r2, [pc, #164]	; (14f0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
    144c:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    144e:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1450:	4053      	eors	r3, r2
    1452:	401c      	ands	r4, r3
    1454:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1456:	4668      	mov	r0, sp
    1458:	4b26      	ldr	r3, [pc, #152]	; (14f4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
    145a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    145c:	2380      	movs	r3, #128	; 0x80
    145e:	02db      	lsls	r3, r3, #11
    1460:	401c      	ands	r4, r3
    1462:	1e63      	subs	r3, r4, #1
    1464:	419c      	sbcs	r4, r3
    1466:	b2e4      	uxtb	r4, r4
	is_locked=gpio_get_pin_level(PA18);
    1468:	75ec      	strb	r4, [r5, #23]
	if (is_locked)
    146a:	2c00      	cmp	r4, #0
    146c:	d010      	beq.n	1490 <_ZN15lmx2694_Handler9Is_LockedEv+0x58>
	if (is_locked)
    146e:	7deb      	ldrb	r3, [r5, #23]
    1470:	2b00      	cmp	r3, #0
    1472:	d00a      	beq.n	148a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
		if (Get_OUT_MUX(2)>0)
    1474:	2102      	movs	r1, #2
    1476:	0028      	movs	r0, r5
    1478:	4b1f      	ldr	r3, [pc, #124]	; (14f8 <_ZN15lmx2694_Handler9Is_LockedEv+0xc0>)
    147a:	4798      	blx	r3
    147c:	2800      	cmp	r0, #0
    147e:	dd20      	ble.n	14c2 <_ZN15lmx2694_Handler9Is_LockedEv+0x8a>
			current_frequency=Calculate_Current_Frequency(false)/1;
    1480:	2100      	movs	r1, #0
    1482:	0028      	movs	r0, r5
    1484:	4b1d      	ldr	r3, [pc, #116]	; (14fc <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
    1486:	4798      	blx	r3
    1488:	6028      	str	r0, [r5, #0]
	return is_locked;
    148a:	7de8      	ldrb	r0, [r5, #23]
}
    148c:	b002      	add	sp, #8
    148e:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(10);
    1490:	200a      	movs	r0, #10
    1492:	4b1b      	ldr	r3, [pc, #108]	; (1500 <_ZN15lmx2694_Handler9Is_LockedEv+0xc8>)
    1494:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1496:	a801      	add	r0, sp, #4
    1498:	4b14      	ldr	r3, [pc, #80]	; (14ec <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
    149a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    149c:	23c0      	movs	r3, #192	; 0xc0
    149e:	05db      	lsls	r3, r3, #23
    14a0:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    14a2:	4a13      	ldr	r2, [pc, #76]	; (14f0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
    14a4:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    14a6:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    14a8:	4053      	eors	r3, r2
    14aa:	401c      	ands	r4, r3
    14ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    14ae:	a801      	add	r0, sp, #4
    14b0:	4b10      	ldr	r3, [pc, #64]	; (14f4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
    14b2:	4798      	blx	r3
    14b4:	2380      	movs	r3, #128	; 0x80
    14b6:	02db      	lsls	r3, r3, #11
    14b8:	401c      	ands	r4, r3
    14ba:	1e63      	subs	r3, r4, #1
    14bc:	419c      	sbcs	r4, r3
		is_locked=gpio_get_pin_level(PA18);
    14be:	75ec      	strb	r4, [r5, #23]
    14c0:	e7d5      	b.n	146e <_ZN15lmx2694_Handler9Is_LockedEv+0x36>
			channel_divider=Get_Channel_Divider_Value(false);
    14c2:	2100      	movs	r1, #0
    14c4:	0028      	movs	r0, r5
    14c6:	4b0f      	ldr	r3, [pc, #60]	; (1504 <_ZN15lmx2694_Handler9Is_LockedEv+0xcc>)
    14c8:	4798      	blx	r3
    14ca:	2421      	movs	r4, #33	; 0x21
    14cc:	5528      	strb	r0, [r5, r4]
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
    14ce:	2100      	movs	r1, #0
    14d0:	0028      	movs	r0, r5
    14d2:	4b0a      	ldr	r3, [pc, #40]	; (14fc <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
    14d4:	4798      	blx	r3
    14d6:	1c06      	adds	r6, r0, #0
    14d8:	5d28      	ldrb	r0, [r5, r4]
    14da:	4b0b      	ldr	r3, [pc, #44]	; (1508 <_ZN15lmx2694_Handler9Is_LockedEv+0xd0>)
    14dc:	4798      	blx	r3
    14de:	1c01      	adds	r1, r0, #0
    14e0:	1c30      	adds	r0, r6, #0
    14e2:	4b0a      	ldr	r3, [pc, #40]	; (150c <_ZN15lmx2694_Handler9Is_LockedEv+0xd4>)
    14e4:	4798      	blx	r3
    14e6:	6028      	str	r0, [r5, #0]
    14e8:	e7cf      	b.n	148a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	00001f19 	.word	0x00001f19
    14f0:	41004400 	.word	0x41004400
    14f4:	00001f27 	.word	0x00001f27
    14f8:	00000eab 	.word	0x00000eab
    14fc:	00000f11 	.word	0x00000f11
    1500:	0000206d 	.word	0x0000206d
    1504:	00001401 	.word	0x00001401
    1508:	00009609 	.word	0x00009609
    150c:	00008c71 	.word	0x00008c71

00001510 <_ZN15lmx2694_Handler4InitEv>:
bool lmx2694_Handler::Init(){
    1510:	b570      	push	{r4, r5, r6, lr}
    1512:	0004      	movs	r4, r0
	spi_lmx=&staticSPI;
    1514:	4810      	ldr	r0, [pc, #64]	; (1558 <_ZN15lmx2694_Handler4InitEv+0x48>)
    1516:	60e0      	str	r0, [r4, #12]
	spi_lmx->Init();
    1518:	4b10      	ldr	r3, [pc, #64]	; (155c <_ZN15lmx2694_Handler4InitEv+0x4c>)
    151a:	4798      	blx	r3
	spi_lmx->SetCS(true);
    151c:	2101      	movs	r1, #1
    151e:	68e0      	ldr	r0, [r4, #12]
    1520:	4b0f      	ldr	r3, [pc, #60]	; (1560 <_ZN15lmx2694_Handler4InitEv+0x50>)
    1522:	4798      	blx	r3
	Power_Down();
    1524:	0020      	movs	r0, r4
    1526:	4b0f      	ldr	r3, [pc, #60]	; (1564 <_ZN15lmx2694_Handler4InitEv+0x54>)
    1528:	4798      	blx	r3
	delay_ms(10);
    152a:	200a      	movs	r0, #10
    152c:	4d0e      	ldr	r5, [pc, #56]	; (1568 <_ZN15lmx2694_Handler4InitEv+0x58>)
    152e:	47a8      	blx	r5
	Program_Reset();
    1530:	0020      	movs	r0, r4
    1532:	4b0e      	ldr	r3, [pc, #56]	; (156c <_ZN15lmx2694_Handler4InitEv+0x5c>)
    1534:	4798      	blx	r3
	delay_ms(100);
    1536:	2064      	movs	r0, #100	; 0x64
    1538:	47a8      	blx	r5
	Initiate_Registers();
    153a:	0020      	movs	r0, r4
    153c:	4b0c      	ldr	r3, [pc, #48]	; (1570 <_ZN15lmx2694_Handler4InitEv+0x60>)
    153e:	4798      	blx	r3
	delay_ms(10);
    1540:	200a      	movs	r0, #10
    1542:	47a8      	blx	r5
	Toggle_FCAL_EN();
    1544:	0020      	movs	r0, r4
    1546:	4b0b      	ldr	r3, [pc, #44]	; (1574 <_ZN15lmx2694_Handler4InitEv+0x64>)
    1548:	4798      	blx	r3
	delay_ms(100);
    154a:	2064      	movs	r0, #100	; 0x64
    154c:	47a8      	blx	r5
	return Is_Locked();
    154e:	0020      	movs	r0, r4
    1550:	4b09      	ldr	r3, [pc, #36]	; (1578 <_ZN15lmx2694_Handler4InitEv+0x68>)
    1552:	4798      	blx	r3
}
    1554:	bd70      	pop	{r4, r5, r6, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	20000c74 	.word	0x20000c74
    155c:	0000179d 	.word	0x0000179d
    1560:	000017f5 	.word	0x000017f5
    1564:	000010c5 	.word	0x000010c5
    1568:	0000206d 	.word	0x0000206d
    156c:	00001109 	.word	0x00001109
    1570:	000012f5 	.word	0x000012f5
    1574:	000012d1 	.word	0x000012d1
    1578:	00001439 	.word	0x00001439

0000157c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
    157c:	b570      	push	{r4, r5, r6, lr}
    157e:	0004      	movs	r4, r0
	if (target_frequency>MIN_VCO_FREQUENCY)
    1580:	6b45      	ldr	r5, [r0, #52]	; 0x34
    1582:	490b      	ldr	r1, [pc, #44]	; (15b0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>)
    1584:	1c28      	adds	r0, r5, #0
    1586:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x38>)
    1588:	4798      	blx	r3
    158a:	2800      	cmp	r0, #0
    158c:	d005      	beq.n	159a <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x1e>
		vco_frequency=target_frequency;
    158e:	63a5      	str	r5, [r4, #56]	; 0x38
	Program_PFD_DLY_SEL(vco_frequency);
    1590:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1592:	0020      	movs	r0, r4
    1594:	4b08      	ldr	r3, [pc, #32]	; (15b8 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x3c>)
    1596:	4798      	blx	r3
}
    1598:	bd70      	pop	{r4, r5, r6, pc}
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
    159a:	2100      	movs	r1, #0
    159c:	0020      	movs	r0, r4
    159e:	4b07      	ldr	r3, [pc, #28]	; (15bc <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x40>)
    15a0:	4798      	blx	r3
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x44>)
    15a4:	4798      	blx	r3
    15a6:	1c29      	adds	r1, r5, #0
    15a8:	4b06      	ldr	r3, [pc, #24]	; (15c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x48>)
    15aa:	4798      	blx	r3
    15ac:	63a0      	str	r0, [r4, #56]	; 0x38
    15ae:	e7ef      	b.n	1590 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x14>
    15b0:	45ebf000 	.word	0x45ebf000
    15b4:	000086e5 	.word	0x000086e5
    15b8:	00001201 	.word	0x00001201
    15bc:	00001401 	.word	0x00001401
    15c0:	00009609 	.word	0x00009609
    15c4:	00009051 	.word	0x00009051

000015c8 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
void  lmx2694_Handler::Write_Division_Registers(void){
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	0004      	movs	r4, r0
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
    15cc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    15ce:	212b      	movs	r1, #43	; 0x2b
    15d0:	4d0c      	ldr	r5, [pc, #48]	; (1604 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x3c>)
    15d2:	47a8      	blx	r5
	Write_Single_Register(42,(uint16_t)(numerator>>16));
    15d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    15d6:	212a      	movs	r1, #42	; 0x2a
    15d8:	0020      	movs	r0, r4
    15da:	47a8      	blx	r5
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
    15dc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    15de:	2127      	movs	r1, #39	; 0x27
    15e0:	0020      	movs	r0, r4
    15e2:	47a8      	blx	r5
	Write_Single_Register(38,(uint16_t)(denominator>>16));
    15e4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    15e6:	2126      	movs	r1, #38	; 0x26
    15e8:	0020      	movs	r0, r4
    15ea:	47a8      	blx	r5
	Program_PFD_DLY_SEL();
    15ec:	0020      	movs	r0, r4
    15ee:	4b06      	ldr	r3, [pc, #24]	; (1608 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x40>)
    15f0:	4798      	blx	r3
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
    15f2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    15f4:	2124      	movs	r1, #36	; 0x24
    15f6:	0020      	movs	r0, r4
    15f8:	47a8      	blx	r5
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
    15fa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    15fc:	2122      	movs	r1, #34	; 0x22
    15fe:	0020      	movs	r0, r4
    1600:	47a8      	blx	r5
}
    1602:	bd70      	pop	{r4, r5, r6, pc}
    1604:	000011a5 	.word	0x000011a5
    1608:	0000157d 	.word	0x0000157d

0000160c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
float lmx2694_Handler::Set_Target_Frequency(float tf){
    160c:	b570      	push	{r4, r5, r6, lr}
    160e:	0004      	movs	r4, r0
    1610:	1c0d      	adds	r5, r1, #0
	if (tf>MAX_VCO_FREQUENCY)
    1612:	4940      	ldr	r1, [pc, #256]	; (1714 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
    1614:	1c28      	adds	r0, r5, #0
    1616:	4b40      	ldr	r3, [pc, #256]	; (1718 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1618:	4798      	blx	r3
    161a:	2800      	cmp	r0, #0
    161c:	d138      	bne.n	1690 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x84>
		if (tf>MIN_PLL_FREQUENCY)
    161e:	493f      	ldr	r1, [pc, #252]	; (171c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x110>)
    1620:	1c28      	adds	r0, r5, #0
    1622:	4b3d      	ldr	r3, [pc, #244]	; (1718 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1624:	4798      	blx	r3
    1626:	2800      	cmp	r0, #0
    1628:	d034      	beq.n	1694 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
			target_frequency=tf;
    162a:	6365      	str	r5, [r4, #52]	; 0x34
			if (tf>MIN_VCO_FREQUENCY)
    162c:	493c      	ldr	r1, [pc, #240]	; (1720 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    162e:	1c28      	adds	r0, r5, #0
    1630:	4b39      	ldr	r3, [pc, #228]	; (1718 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1632:	4798      	blx	r3
    1634:	2800      	cmp	r0, #0
    1636:	d03a      	beq.n	16ae <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xa2>
				if (current_frequency>MIN_VCO_FREQUENCY)
    1638:	4939      	ldr	r1, [pc, #228]	; (1720 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    163a:	6820      	ldr	r0, [r4, #0]
    163c:	4b36      	ldr	r3, [pc, #216]	; (1718 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    163e:	4798      	blx	r3
    1640:	2800      	cmp	r0, #0
    1642:	d029      	beq.n	1698 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x8c>
				channel_divider=1;
    1644:	2201      	movs	r2, #1
    1646:	2321      	movs	r3, #33	; 0x21
    1648:	54e2      	strb	r2, [r4, r3]
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
    164a:	2321      	movs	r3, #33	; 0x21
    164c:	5ce0      	ldrb	r0, [r4, r3]
    164e:	4b35      	ldr	r3, [pc, #212]	; (1724 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x118>)
    1650:	4798      	blx	r3
    1652:	1c29      	adds	r1, r5, #0
    1654:	4b34      	ldr	r3, [pc, #208]	; (1728 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x11c>)
    1656:	4798      	blx	r3
    1658:	4934      	ldr	r1, [pc, #208]	; (172c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>)
    165a:	4b35      	ldr	r3, [pc, #212]	; (1730 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x124>)
    165c:	4798      	blx	r3
    165e:	1c05      	adds	r5, r0, #0
    1660:	63e0      	str	r0, [r4, #60]	; 0x3c
  { return __builtin_floorf(__x); }
    1662:	4b34      	ldr	r3, [pc, #208]	; (1734 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x128>)
    1664:	4798      	blx	r3
			N_divider=(uint32_t)(floor(divider));
    1666:	4b34      	ldr	r3, [pc, #208]	; (1738 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x12c>)
    1668:	4798      	blx	r3
    166a:	6260      	str	r0, [r4, #36]	; 0x24
			fraction=divider-N_divider;
    166c:	4b33      	ldr	r3, [pc, #204]	; (173c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x130>)
    166e:	4798      	blx	r3
    1670:	1c01      	adds	r1, r0, #0
    1672:	1c28      	adds	r0, r5, #0
    1674:	4b32      	ldr	r3, [pc, #200]	; (1740 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x134>)
    1676:	4798      	blx	r3
    1678:	1c01      	adds	r1, r0, #0
    167a:	6420      	str	r0, [r4, #64]	; 0x40
			Calculate_Fraction(fraction);
    167c:	0020      	movs	r0, r4
    167e:	4b31      	ldr	r3, [pc, #196]	; (1744 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x138>)
    1680:	4798      	blx	r3
			Write_Division_Registers();
    1682:	0020      	movs	r0, r4
    1684:	4b30      	ldr	r3, [pc, #192]	; (1748 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
    1686:	4798      	blx	r3
			Toggle_FCAL_EN();
    1688:	0020      	movs	r0, r4
    168a:	4b30      	ldr	r3, [pc, #192]	; (174c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x140>)
    168c:	4798      	blx	r3
    168e:	e001      	b.n	1694 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
		target_frequency=MAX_VCO_FREQUENCY;
    1690:	4b20      	ldr	r3, [pc, #128]	; (1714 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
    1692:	6363      	str	r3, [r4, #52]	; 0x34
	return fraction;
    1694:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
    1696:	bd70      	pop	{r4, r5, r6, pc}
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
    1698:	235c      	movs	r3, #92	; 0x5c
    169a:	68a2      	ldr	r2, [r4, #8]
    169c:	5ad2      	ldrh	r2, [r2, r3]
    169e:	2301      	movs	r3, #1
    16a0:	431a      	orrs	r2, r3
    16a2:	b292      	uxth	r2, r2
    16a4:	212e      	movs	r1, #46	; 0x2e
    16a6:	0020      	movs	r0, r4
    16a8:	4b29      	ldr	r3, [pc, #164]	; (1750 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    16aa:	4798      	blx	r3
    16ac:	e7ca      	b.n	1644 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x38>
				if (current_frequency<MIN_VCO_FREQUENCY)
    16ae:	491c      	ldr	r1, [pc, #112]	; (1720 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    16b0:	6820      	ldr	r0, [r4, #0]
    16b2:	4b28      	ldr	r3, [pc, #160]	; (1754 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x148>)
    16b4:	4798      	blx	r3
    16b6:	2800      	cmp	r0, #0
    16b8:	d01a      	beq.n	16f0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xe4>
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
    16ba:	2396      	movs	r3, #150	; 0x96
    16bc:	68a2      	ldr	r2, [r4, #8]
    16be:	5ad2      	ldrh	r2, [r2, r3]
    16c0:	4b25      	ldr	r3, [pc, #148]	; (1758 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x14c>)
    16c2:	401a      	ands	r2, r3
    16c4:	83a2      	strh	r2, [r4, #28]
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
    16c6:	b216      	sxth	r6, r2
    16c8:	0020      	movs	r0, r4
    16ca:	4b24      	ldr	r3, [pc, #144]	; (175c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x150>)
    16cc:	4798      	blx	r3
    16ce:	0182      	lsls	r2, r0, #6
    16d0:	4332      	orrs	r2, r6
    16d2:	b292      	uxth	r2, r2
    16d4:	214b      	movs	r1, #75	; 0x4b
    16d6:	0020      	movs	r0, r4
    16d8:	4b1d      	ldr	r3, [pc, #116]	; (1750 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    16da:	4798      	blx	r3
				if (channel_divider>2)
    16dc:	2321      	movs	r3, #33	; 0x21
    16de:	5ce3      	ldrb	r3, [r4, r3]
    16e0:	2b02      	cmp	r3, #2
    16e2:	dd0f      	ble.n	1704 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xf8>
					Write_Single_Register(31,0x43ec);
    16e4:	4a1e      	ldr	r2, [pc, #120]	; (1760 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x154>)
    16e6:	211f      	movs	r1, #31
    16e8:	0020      	movs	r0, r4
    16ea:	4b19      	ldr	r3, [pc, #100]	; (1750 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    16ec:	4798      	blx	r3
    16ee:	e7ac      	b.n	164a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
    16f0:	235c      	movs	r3, #92	; 0x5c
    16f2:	68a2      	ldr	r2, [r4, #8]
    16f4:	5ad2      	ldrh	r2, [r2, r3]
    16f6:	3b59      	subs	r3, #89	; 0x59
    16f8:	439a      	bics	r2, r3
    16fa:	212e      	movs	r1, #46	; 0x2e
    16fc:	0020      	movs	r0, r4
    16fe:	4b14      	ldr	r3, [pc, #80]	; (1750 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1700:	4798      	blx	r3
    1702:	e7da      	b.n	16ba <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xae>
					Write_Single_Register(31,0x3ec);
    1704:	22fb      	movs	r2, #251	; 0xfb
    1706:	0092      	lsls	r2, r2, #2
    1708:	211f      	movs	r1, #31
    170a:	0020      	movs	r0, r4
    170c:	4b10      	ldr	r3, [pc, #64]	; (1750 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    170e:	4798      	blx	r3
    1710:	e79b      	b.n	164a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	466bf000 	.word	0x466bf000
    1718:	000086e5 	.word	0x000086e5
    171c:	43c80000 	.word	0x43c80000
    1720:	45ebf000 	.word	0x45ebf000
    1724:	00009609 	.word	0x00009609
    1728:	00009051 	.word	0x00009051
    172c:	43480000 	.word	0x43480000
    1730:	00008c71 	.word	0x00008c71
    1734:	00006b65 	.word	0x00006b65
    1738:	00008761 	.word	0x00008761
    173c:	000096a9 	.word	0x000096a9
    1740:	00009291 	.word	0x00009291
    1744:	00001041 	.word	0x00001041
    1748:	000015c9 	.word	0x000015c9
    174c:	000012d1 	.word	0x000012d1
    1750:	000011a5 	.word	0x000011a5
    1754:	000086bd 	.word	0x000086bd
    1758:	fffff83f 	.word	0xfffff83f
    175c:	00000fc1 	.word	0x00000fc1
    1760:	000043ec 	.word	0x000043ec

00001764 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:
    1764:	b510      	push	{r4, lr}
    1766:	4902      	ldr	r1, [pc, #8]	; (1770 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0xc>)
    1768:	2001      	movs	r0, #1
    176a:	4b02      	ldr	r3, [pc, #8]	; (1774 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x10>)
    176c:	4798      	blx	r3
    176e:	bd10      	pop	{r4, pc}
    1770:	0000ffff 	.word	0x0000ffff
    1774:	00000e2d 	.word	0x00000e2d

00001778 <_ZN13SPI_Syn_ClassC1Ev>:


// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
    1778:	4b01      	ldr	r3, [pc, #4]	; (1780 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
    177a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    177c:	4770      	bx	lr
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	20000e54 	.word	0x20000e54

00001784 <_ZN13SPI_Syn_ClassD1Ev>:


// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
    1784:	4770      	bx	lr
	...

00001788 <_ZN13SPI_Syn_Class6EnableEv>:
	
}



uint8_t SPI_Syn_Class::Enable(){
    1788:	b510      	push	{r4, lr}
	
	spi_m_sync_enable(&SPI_LMX);
    178a:	4802      	ldr	r0, [pc, #8]	; (1794 <_ZN13SPI_Syn_Class6EnableEv+0xc>)
    178c:	4b02      	ldr	r3, [pc, #8]	; (1798 <_ZN13SPI_Syn_Class6EnableEv+0x10>)
    178e:	4798      	blx	r3
	return 0;
}
    1790:	2000      	movs	r0, #0
    1792:	bd10      	pop	{r4, pc}
    1794:	20001470 	.word	0x20001470
    1798:	000022a5 	.word	0x000022a5

0000179c <_ZN13SPI_Syn_Class4InitEv>:
void SPI_Syn_Class::Init(){
    179c:	b510      	push	{r4, lr}
    179e:	0004      	movs	r4, r0
		spi_m_sync_get_io_descriptor(&SPI_LMX, &io);
    17a0:	0001      	movs	r1, r0
    17a2:	310c      	adds	r1, #12
    17a4:	4804      	ldr	r0, [pc, #16]	; (17b8 <_ZN13SPI_Syn_Class4InitEv+0x1c>)
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <_ZN13SPI_Syn_Class4InitEv+0x20>)
    17a8:	4798      	blx	r3
	Enable();
    17aa:	0020      	movs	r0, r4
    17ac:	4b04      	ldr	r3, [pc, #16]	; (17c0 <_ZN13SPI_Syn_Class4InitEv+0x24>)
    17ae:	4798      	blx	r3
	ready=true;
    17b0:	2301      	movs	r3, #1
    17b2:	7023      	strb	r3, [r4, #0]
}
    17b4:	bd10      	pop	{r4, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	20001470 	.word	0x20001470
    17bc:	0000238d 	.word	0x0000238d
    17c0:	00001789 	.word	0x00001789

000017c4 <_ZN13SPI_Syn_Class5WriteEPKhh>:

uint8_t  SPI_Syn_Class::Write(const uint8_t * p, uint8_t n){
    17c4:	b510      	push	{r4, lr}
    17c6:	0014      	movs	r4, r2
	ready=false;
    17c8:	2300      	movs	r3, #0
    17ca:	7003      	strb	r3, [r0, #0]
	io_write(io, p, (uint16_t)n);
    17cc:	68c0      	ldr	r0, [r0, #12]
    17ce:	b292      	uxth	r2, r2
    17d0:	4b01      	ldr	r3, [pc, #4]	; (17d8 <_ZN13SPI_Syn_Class5WriteEPKhh+0x14>)
    17d2:	4798      	blx	r3

	return n;
}
    17d4:	0020      	movs	r0, r4
    17d6:	bd10      	pop	{r4, pc}
    17d8:	000021dd 	.word	0x000021dd

000017dc <_ZN13SPI_Syn_Class4ReadEPhh>:
uint8_t  SPI_Syn_Class::Read(uint8_t * p, uint8_t n){
    17dc:	b510      	push	{r4, lr}
    17de:	0014      	movs	r4, r2
	ready=false;
    17e0:	2300      	movs	r3, #0
    17e2:	7003      	strb	r3, [r0, #0]
		io_read(io, p, (uint16_t)n);
    17e4:	68c0      	ldr	r0, [r0, #12]
    17e6:	b292      	uxth	r2, r2
    17e8:	4b01      	ldr	r3, [pc, #4]	; (17f0 <_ZN13SPI_Syn_Class4ReadEPhh+0x14>)
    17ea:	4798      	blx	r3

	
	return n;
}
    17ec:	0020      	movs	r0, r4
    17ee:	bd10      	pop	{r4, pc}
    17f0:	00002215 	.word	0x00002215

000017f4 <_ZN13SPI_Syn_Class5SetCSEb>:
	if (level) {
    17f4:	2900      	cmp	r1, #0
    17f6:	d105      	bne.n	1804 <_ZN13SPI_Syn_Class5SetCSEb+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    17f8:	2280      	movs	r2, #128	; 0x80
    17fa:	0312      	lsls	r2, r2, #12
    17fc:	23c0      	movs	r3, #192	; 0xc0
    17fe:	05db      	lsls	r3, r3, #23
    1800:	615a      	str	r2, [r3, #20]
	spi_m_sync_disable(&SPI_LMX);
	
}
void SPI_Syn_Class::SetCS(bool st){
	gpio_set_pin_level(CS_LMX,st);
}
    1802:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1804:	2280      	movs	r2, #128	; 0x80
    1806:	0312      	lsls	r2, r2, #12
    1808:	23c0      	movs	r3, #192	; 0xc0
    180a:	05db      	lsls	r3, r3, #23
    180c:	619a      	str	r2, [r3, #24]
    180e:	e7f8      	b.n	1802 <_ZN13SPI_Syn_Class5SetCSEb+0xe>

00001810 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1810:	b510      	push	{r4, lr}
	system_init();
    1812:	4b02      	ldr	r3, [pc, #8]	; (181c <atmel_start_init+0xc>)
    1814:	4798      	blx	r3
	usb_init();
    1816:	4b02      	ldr	r3, [pc, #8]	; (1820 <atmel_start_init+0x10>)
    1818:	4798      	blx	r3
}
    181a:	bd10      	pop	{r4, pc}
    181c:	00001e05 	.word	0x00001e05
    1820:	00005105 	.word	0x00005105

00001824 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
    1824:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1826:	4a08      	ldr	r2, [pc, #32]	; (1848 <TIMER_ZCD_init+0x24>)
    1828:	6a11      	ldr	r1, [r2, #32]
    182a:	2380      	movs	r3, #128	; 0x80
    182c:	011b      	lsls	r3, r3, #4
    182e:	430b      	orrs	r3, r1
    1830:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1832:	4a06      	ldr	r2, [pc, #24]	; (184c <TIMER_ZCD_init+0x28>)
    1834:	4b06      	ldr	r3, [pc, #24]	; (1850 <TIMER_ZCD_init+0x2c>)
    1836:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
    1838:	4b06      	ldr	r3, [pc, #24]	; (1854 <TIMER_ZCD_init+0x30>)
    183a:	4798      	blx	r3
    183c:	0002      	movs	r2, r0
    183e:	4906      	ldr	r1, [pc, #24]	; (1858 <TIMER_ZCD_init+0x34>)
    1840:	4806      	ldr	r0, [pc, #24]	; (185c <TIMER_ZCD_init+0x38>)
    1842:	4b07      	ldr	r3, [pc, #28]	; (1860 <TIMER_ZCD_init+0x3c>)
    1844:	4798      	blx	r3
}
    1846:	bd10      	pop	{r4, pc}
    1848:	40000400 	.word	0x40000400
    184c:	0000401b 	.word	0x0000401b
    1850:	40000c00 	.word	0x40000c00
    1854:	00003cf3 	.word	0x00003cf3
    1858:	42002c00 	.word	0x42002c00
    185c:	20001454 	.word	0x20001454
    1860:	00002479 	.word	0x00002479

00001864 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1864:	b510      	push	{r4, lr}
    1866:	4a08      	ldr	r2, [pc, #32]	; (1888 <TIMER_USB_init+0x24>)
    1868:	6a11      	ldr	r1, [r2, #32]
    186a:	2380      	movs	r3, #128	; 0x80
    186c:	015b      	lsls	r3, r3, #5
    186e:	430b      	orrs	r3, r1
    1870:	6213      	str	r3, [r2, #32]
    1872:	4a06      	ldr	r2, [pc, #24]	; (188c <TIMER_USB_init+0x28>)
    1874:	4b06      	ldr	r3, [pc, #24]	; (1890 <TIMER_USB_init+0x2c>)
    1876:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <TIMER_USB_init+0x30>)
    187a:	4798      	blx	r3
    187c:	0002      	movs	r2, r0
    187e:	4906      	ldr	r1, [pc, #24]	; (1898 <TIMER_USB_init+0x34>)
    1880:	4806      	ldr	r0, [pc, #24]	; (189c <TIMER_USB_init+0x38>)
    1882:	4b07      	ldr	r3, [pc, #28]	; (18a0 <TIMER_USB_init+0x3c>)
    1884:	4798      	blx	r3
}
    1886:	bd10      	pop	{r4, pc}
    1888:	40000400 	.word	0x40000400
    188c:	0000431c 	.word	0x0000431c
    1890:	40000c00 	.word	0x40000c00
    1894:	00003cf3 	.word	0x00003cf3
    1898:	42003000 	.word	0x42003000
    189c:	20001514 	.word	0x20001514
    18a0:	00002479 	.word	0x00002479

000018a4 <EXTERNAL_IRQ_0_init>:
{
    18a4:	b510      	push	{r4, lr}
    18a6:	4a0f      	ldr	r2, [pc, #60]	; (18e4 <EXTERNAL_IRQ_0_init+0x40>)
    18a8:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <EXTERNAL_IRQ_0_init+0x44>)
    18aa:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18ac:	3a05      	subs	r2, #5
    18ae:	23c0      	movs	r3, #192	; 0xc0
    18b0:	05db      	lsls	r3, r3, #23
    18b2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18b4:	4b0d      	ldr	r3, [pc, #52]	; (18ec <EXTERNAL_IRQ_0_init+0x48>)
    18b6:	4a0e      	ldr	r2, [pc, #56]	; (18f0 <EXTERNAL_IRQ_0_init+0x4c>)
    18b8:	629a      	str	r2, [r3, #40]	; 0x28
    18ba:	4a0e      	ldr	r2, [pc, #56]	; (18f4 <EXTERNAL_IRQ_0_init+0x50>)
    18bc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    18be:	214e      	movs	r1, #78	; 0x4e
    18c0:	5c5a      	ldrb	r2, [r3, r1]
    18c2:	2004      	movs	r0, #4
    18c4:	4382      	bics	r2, r0
    18c6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18c8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18ca:	3803      	subs	r0, #3
    18cc:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    18ce:	4302      	orrs	r2, r0
    18d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    18d4:	3917      	subs	r1, #23
    18d6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    18d8:	200f      	movs	r0, #15
    18da:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    18dc:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    18de:	4b06      	ldr	r3, [pc, #24]	; (18f8 <EXTERNAL_IRQ_0_init+0x54>)
    18e0:	4798      	blx	r3
}
    18e2:	bd10      	pop	{r4, pc}
    18e4:	00004005 	.word	0x00004005
    18e8:	40000c00 	.word	0x40000c00
    18ec:	41004400 	.word	0x41004400
    18f0:	40024000 	.word	0x40024000
    18f4:	c0020000 	.word	0xc0020000
    18f8:	000020d1 	.word	0x000020d1

000018fc <SPI_ADF_PORT_init>:
{
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fe:	46c6      	mov	lr, r8
    1900:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1902:	22c0      	movs	r2, #192	; 0xc0
    1904:	05d2      	lsls	r2, r2, #23
    1906:	2310      	movs	r3, #16
    1908:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    190a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    190c:	4b25      	ldr	r3, [pc, #148]	; (19a4 <SPI_ADF_PORT_init+0xa8>)
    190e:	4926      	ldr	r1, [pc, #152]	; (19a8 <SPI_ADF_PORT_init+0xac>)
    1910:	6299      	str	r1, [r3, #40]	; 0x28
    1912:	21c0      	movs	r1, #192	; 0xc0
    1914:	0609      	lsls	r1, r1, #24
    1916:	468c      	mov	ip, r1
    1918:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    191a:	2044      	movs	r0, #68	; 0x44
    191c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    191e:	2701      	movs	r7, #1
    1920:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1922:	2601      	movs	r6, #1
    1924:	4331      	orrs	r1, r6
    1926:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1928:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    192a:	2132      	movs	r1, #50	; 0x32
    192c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    192e:	250f      	movs	r5, #15
    1930:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1932:	2403      	movs	r4, #3
    1934:	46a0      	mov	r8, r4
    1936:	4644      	mov	r4, r8
    1938:	4320      	orrs	r0, r4
    193a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    193c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    193e:	2020      	movs	r0, #32
    1940:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1942:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1944:	4819      	ldr	r0, [pc, #100]	; (19ac <SPI_ADF_PORT_init+0xb0>)
    1946:	6298      	str	r0, [r3, #40]	; 0x28
    1948:	4660      	mov	r0, ip
    194a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    194c:	2045      	movs	r0, #69	; 0x45
    194e:	4684      	mov	ip, r0
    1950:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1952:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1954:	4330      	orrs	r0, r6
    1956:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1958:	4664      	mov	r4, ip
    195a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    195c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    195e:	3c36      	subs	r4, #54	; 0x36
    1960:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
    1962:	2430      	movs	r4, #48	; 0x30
    1964:	46a4      	mov	ip, r4
    1966:	4664      	mov	r4, ip
    1968:	4320      	orrs	r0, r4
    196a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    196c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    196e:	310e      	adds	r1, #14
    1970:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1972:	4a0f      	ldr	r2, [pc, #60]	; (19b0 <SPI_ADF_PORT_init+0xb4>)
    1974:	629a      	str	r2, [r3, #40]	; 0x28
    1976:	4a0f      	ldr	r2, [pc, #60]	; (19b4 <SPI_ADF_PORT_init+0xb8>)
    1978:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    197a:	2246      	movs	r2, #70	; 0x46
    197c:	5c99      	ldrb	r1, [r3, r2]
    197e:	2004      	movs	r0, #4
    1980:	4381      	bics	r1, r0
    1982:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1984:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1986:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1988:	4331      	orrs	r1, r6
    198a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    198c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    198e:	2133      	movs	r1, #51	; 0x33
    1990:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1992:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1994:	4640      	mov	r0, r8
    1996:	4302      	orrs	r2, r0
    1998:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    199a:	545a      	strb	r2, [r3, r1]
}
    199c:	bc04      	pop	{r2}
    199e:	4690      	mov	r8, r2
    19a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	41004400 	.word	0x41004400
    19a8:	40000010 	.word	0x40000010
    19ac:	40000020 	.word	0x40000020
    19b0:	40020040 	.word	0x40020040
    19b4:	c0020000 	.word	0xc0020000

000019b8 <SPI_ADF_CLOCK_init>:
    19b8:	4a04      	ldr	r2, [pc, #16]	; (19cc <SPI_ADF_CLOCK_init+0x14>)
    19ba:	6a13      	ldr	r3, [r2, #32]
    19bc:	2104      	movs	r1, #4
    19be:	430b      	orrs	r3, r1
    19c0:	6213      	str	r3, [r2, #32]
    19c2:	4a03      	ldr	r2, [pc, #12]	; (19d0 <SPI_ADF_CLOCK_init+0x18>)
    19c4:	4b03      	ldr	r3, [pc, #12]	; (19d4 <SPI_ADF_CLOCK_init+0x1c>)
    19c6:	805a      	strh	r2, [r3, #2]
}
    19c8:	4770      	bx	lr
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	40000400 	.word	0x40000400
    19d0:	00004014 	.word	0x00004014
    19d4:	40000c00 	.word	0x40000c00

000019d8 <SPI_ADF_init>:
{
    19d8:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
    19da:	4b04      	ldr	r3, [pc, #16]	; (19ec <SPI_ADF_init+0x14>)
    19dc:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    19de:	4904      	ldr	r1, [pc, #16]	; (19f0 <SPI_ADF_init+0x18>)
    19e0:	4804      	ldr	r0, [pc, #16]	; (19f4 <SPI_ADF_init+0x1c>)
    19e2:	4b05      	ldr	r3, [pc, #20]	; (19f8 <SPI_ADF_init+0x20>)
    19e4:	4798      	blx	r3
	SPI_ADF_PORT_init();
    19e6:	4b05      	ldr	r3, [pc, #20]	; (19fc <SPI_ADF_init+0x24>)
    19e8:	4798      	blx	r3
}
    19ea:	bd10      	pop	{r4, pc}
    19ec:	000019b9 	.word	0x000019b9
    19f0:	42000800 	.word	0x42000800
    19f4:	200014e4 	.word	0x200014e4
    19f8:	0000224d 	.word	0x0000224d
    19fc:	000018fd 	.word	0x000018fd

00001a00 <SPI_LMX_PORT_init>:
{
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	46c6      	mov	lr, r8
    1a04:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a06:	22c0      	movs	r2, #192	; 0xc0
    1a08:	05d2      	lsls	r2, r2, #23
    1a0a:	2380      	movs	r3, #128	; 0x80
    1a0c:	025b      	lsls	r3, r3, #9
    1a0e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1a10:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a12:	4b26      	ldr	r3, [pc, #152]	; (1aac <SPI_LMX_PORT_init+0xac>)
    1a14:	2180      	movs	r1, #128	; 0x80
    1a16:	05c9      	lsls	r1, r1, #23
    1a18:	468c      	mov	ip, r1
    1a1a:	6299      	str	r1, [r3, #40]	; 0x28
    1a1c:	4924      	ldr	r1, [pc, #144]	; (1ab0 <SPI_LMX_PORT_init+0xb0>)
    1a1e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a20:	2050      	movs	r0, #80	; 0x50
    1a22:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a24:	2701      	movs	r7, #1
    1a26:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a28:	2601      	movs	r6, #1
    1a2a:	4331      	orrs	r1, r6
    1a2c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a2e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a30:	2138      	movs	r1, #56	; 0x38
    1a32:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1a34:	250f      	movs	r5, #15
    1a36:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1a38:	2402      	movs	r4, #2
    1a3a:	46a0      	mov	r8, r4
    1a3c:	4644      	mov	r4, r8
    1a3e:	4320      	orrs	r0, r4
    1a40:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a42:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a44:	2080      	movs	r0, #128	; 0x80
    1a46:	0280      	lsls	r0, r0, #10
    1a48:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1a4a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a4c:	4660      	mov	r0, ip
    1a4e:	6298      	str	r0, [r3, #40]	; 0x28
    1a50:	4818      	ldr	r0, [pc, #96]	; (1ab4 <SPI_LMX_PORT_init+0xb4>)
    1a52:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a54:	2051      	movs	r0, #81	; 0x51
    1a56:	4684      	mov	ip, r0
    1a58:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a5a:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a5c:	4330      	orrs	r0, r6
    1a5e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a60:	4664      	mov	r4, ip
    1a62:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a64:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1a66:	3c42      	subs	r4, #66	; 0x42
    1a68:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
    1a6a:	2420      	movs	r4, #32
    1a6c:	46a4      	mov	ip, r4
    1a6e:	4664      	mov	r4, ip
    1a70:	4320      	orrs	r0, r4
    1a72:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a74:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a76:	2180      	movs	r1, #128	; 0x80
    1a78:	02c9      	lsls	r1, r1, #11
    1a7a:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a7c:	4a0e      	ldr	r2, [pc, #56]	; (1ab8 <SPI_LMX_PORT_init+0xb8>)
    1a7e:	629a      	str	r2, [r3, #40]	; 0x28
    1a80:	4a0e      	ldr	r2, [pc, #56]	; (1abc <SPI_LMX_PORT_init+0xbc>)
    1a82:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1a84:	2252      	movs	r2, #82	; 0x52
    1a86:	5c99      	ldrb	r1, [r3, r2]
    1a88:	2004      	movs	r0, #4
    1a8a:	4381      	bics	r1, r0
    1a8c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a8e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a90:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a92:	4331      	orrs	r1, r6
    1a94:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a96:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a98:	2139      	movs	r1, #57	; 0x39
    1a9a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1a9c:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1a9e:	4640      	mov	r0, r8
    1aa0:	4302      	orrs	r2, r0
    1aa2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1aa4:	545a      	strb	r2, [r3, r1]
}
    1aa6:	bc04      	pop	{r2}
    1aa8:	4690      	mov	r8, r2
    1aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aac:	41004400 	.word	0x41004400
    1ab0:	c0000001 	.word	0xc0000001
    1ab4:	c0000002 	.word	0xc0000002
    1ab8:	40020000 	.word	0x40020000
    1abc:	c0020004 	.word	0xc0020004

00001ac0 <SPI_LMX_CLOCK_init>:
    1ac0:	4a04      	ldr	r2, [pc, #16]	; (1ad4 <SPI_LMX_CLOCK_init+0x14>)
    1ac2:	6a13      	ldr	r3, [r2, #32]
    1ac4:	2108      	movs	r1, #8
    1ac6:	430b      	orrs	r3, r1
    1ac8:	6213      	str	r3, [r2, #32]
    1aca:	4a03      	ldr	r2, [pc, #12]	; (1ad8 <SPI_LMX_CLOCK_init+0x18>)
    1acc:	4b03      	ldr	r3, [pc, #12]	; (1adc <SPI_LMX_CLOCK_init+0x1c>)
    1ace:	805a      	strh	r2, [r3, #2]
}
    1ad0:	4770      	bx	lr
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	40000400 	.word	0x40000400
    1ad8:	00004015 	.word	0x00004015
    1adc:	40000c00 	.word	0x40000c00

00001ae0 <SPI_LMX_init>:
{
    1ae0:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
    1ae2:	4b04      	ldr	r3, [pc, #16]	; (1af4 <SPI_LMX_init+0x14>)
    1ae4:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    1ae6:	4904      	ldr	r1, [pc, #16]	; (1af8 <SPI_LMX_init+0x18>)
    1ae8:	4804      	ldr	r0, [pc, #16]	; (1afc <SPI_LMX_init+0x1c>)
    1aea:	4b05      	ldr	r3, [pc, #20]	; (1b00 <SPI_LMX_init+0x20>)
    1aec:	4798      	blx	r3
	SPI_LMX_PORT_init();
    1aee:	4b05      	ldr	r3, [pc, #20]	; (1b04 <SPI_LMX_init+0x24>)
    1af0:	4798      	blx	r3
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	00001ac1 	.word	0x00001ac1
    1af8:	42000c00 	.word	0x42000c00
    1afc:	20001470 	.word	0x20001470
    1b00:	0000224d 	.word	0x0000224d
    1b04:	00001a01 	.word	0x00001a01

00001b08 <SPI_ZCD_PORT_init>:
{
    1b08:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b0a:	21c0      	movs	r1, #192	; 0xc0
    1b0c:	05c9      	lsls	r1, r1, #23
    1b0e:	2380      	movs	r3, #128	; 0x80
    1b10:	015b      	lsls	r3, r3, #5
    1b12:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b14:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b16:	4b22      	ldr	r3, [pc, #136]	; (1ba0 <SPI_ZCD_PORT_init+0x98>)
    1b18:	4a22      	ldr	r2, [pc, #136]	; (1ba4 <SPI_ZCD_PORT_init+0x9c>)
    1b1a:	629a      	str	r2, [r3, #40]	; 0x28
    1b1c:	20c0      	movs	r0, #192	; 0xc0
    1b1e:	0600      	lsls	r0, r0, #24
    1b20:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b22:	264c      	movs	r6, #76	; 0x4c
    1b24:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b26:	2501      	movs	r5, #1
    1b28:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b2a:	2401      	movs	r4, #1
    1b2c:	4322      	orrs	r2, r4
    1b2e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b30:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b32:	3e16      	subs	r6, #22
    1b34:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1b36:	270f      	movs	r7, #15
    1b38:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
    1b3a:	2702      	movs	r7, #2
    1b3c:	433a      	orrs	r2, r7
    1b3e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b40:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b42:	2280      	movs	r2, #128	; 0x80
    1b44:	0092      	lsls	r2, r2, #2
    1b46:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b48:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b4a:	4a17      	ldr	r2, [pc, #92]	; (1ba8 <SPI_ZCD_PORT_init+0xa0>)
    1b4c:	629a      	str	r2, [r3, #40]	; 0x28
    1b4e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b50:	2049      	movs	r0, #73	; 0x49
    1b52:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b54:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b56:	4322      	orrs	r2, r4
    1b58:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b5a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b5c:	2234      	movs	r2, #52	; 0x34
    1b5e:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b60:	3e27      	subs	r6, #39	; 0x27
    1b62:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1b64:	2730      	movs	r7, #48	; 0x30
    1b66:	4338      	orrs	r0, r7
    1b68:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b6a:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b6c:	2280      	movs	r2, #128	; 0x80
    1b6e:	0212      	lsls	r2, r2, #8
    1b70:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b72:	4a0e      	ldr	r2, [pc, #56]	; (1bac <SPI_ZCD_PORT_init+0xa4>)
    1b74:	629a      	str	r2, [r3, #40]	; 0x28
    1b76:	4a0e      	ldr	r2, [pc, #56]	; (1bb0 <SPI_ZCD_PORT_init+0xa8>)
    1b78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1b7a:	224f      	movs	r2, #79	; 0x4f
    1b7c:	5c99      	ldrb	r1, [r3, r2]
    1b7e:	2004      	movs	r0, #4
    1b80:	4381      	bics	r1, r0
    1b82:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b84:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b86:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b88:	4321      	orrs	r1, r4
    1b8a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b8c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b8e:	2137      	movs	r1, #55	; 0x37
    1b90:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b92:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1b94:	2020      	movs	r0, #32
    1b96:	4302      	orrs	r2, r0
    1b98:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b9a:	545a      	strb	r2, [r3, r1]
}
    1b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	41004400 	.word	0x41004400
    1ba4:	40001000 	.word	0x40001000
    1ba8:	40000200 	.word	0x40000200
    1bac:	40028000 	.word	0x40028000
    1bb0:	c0020000 	.word	0xc0020000

00001bb4 <SPI_ZCD_CLOCK_init>:
    1bb4:	4a04      	ldr	r2, [pc, #16]	; (1bc8 <SPI_ZCD_CLOCK_init+0x14>)
    1bb6:	6a13      	ldr	r3, [r2, #32]
    1bb8:	2110      	movs	r1, #16
    1bba:	430b      	orrs	r3, r1
    1bbc:	6213      	str	r3, [r2, #32]
    1bbe:	4a03      	ldr	r2, [pc, #12]	; (1bcc <SPI_ZCD_CLOCK_init+0x18>)
    1bc0:	4b03      	ldr	r3, [pc, #12]	; (1bd0 <SPI_ZCD_CLOCK_init+0x1c>)
    1bc2:	805a      	strh	r2, [r3, #2]
}
    1bc4:	4770      	bx	lr
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	40000400 	.word	0x40000400
    1bcc:	00004016 	.word	0x00004016
    1bd0:	40000c00 	.word	0x40000c00

00001bd4 <SPI_ZCD_init>:
{
    1bd4:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
    1bd6:	4b04      	ldr	r3, [pc, #16]	; (1be8 <SPI_ZCD_init+0x14>)
    1bd8:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
    1bda:	4904      	ldr	r1, [pc, #16]	; (1bec <SPI_ZCD_init+0x18>)
    1bdc:	4804      	ldr	r0, [pc, #16]	; (1bf0 <SPI_ZCD_init+0x1c>)
    1bde:	4b05      	ldr	r3, [pc, #20]	; (1bf4 <SPI_ZCD_init+0x20>)
    1be0:	4798      	blx	r3
	SPI_ZCD_PORT_init();
    1be2:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <SPI_ZCD_init+0x24>)
    1be4:	4798      	blx	r3
}
    1be6:	bd10      	pop	{r4, pc}
    1be8:	00001bb5 	.word	0x00001bb5
    1bec:	42001000 	.word	0x42001000
    1bf0:	200014fc 	.word	0x200014fc
    1bf4:	0000224d 	.word	0x0000224d
    1bf8:	00001b09 	.word	0x00001b09

00001bfc <USART_0_CLOCK_init>:
    1bfc:	4a04      	ldr	r2, [pc, #16]	; (1c10 <USART_0_CLOCK_init+0x14>)
    1bfe:	6a13      	ldr	r3, [r2, #32]
    1c00:	2120      	movs	r1, #32
    1c02:	430b      	orrs	r3, r1
    1c04:	6213      	str	r3, [r2, #32]
    1c06:	4a03      	ldr	r2, [pc, #12]	; (1c14 <USART_0_CLOCK_init+0x18>)
    1c08:	4b03      	ldr	r3, [pc, #12]	; (1c18 <USART_0_CLOCK_init+0x1c>)
    1c0a:	805a      	strh	r2, [r3, #2]
}
    1c0c:	4770      	bx	lr
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	40000400 	.word	0x40000400
    1c14:	00004017 	.word	0x00004017
    1c18:	40000c00 	.word	0x40000c00

00001c1c <USART_0_PORT_init>:
{
    1c1c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c1e:	4b0f      	ldr	r3, [pc, #60]	; (1c5c <USART_0_PORT_init+0x40>)
    1c20:	2256      	movs	r2, #86	; 0x56
    1c22:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c24:	2501      	movs	r5, #1
    1c26:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c28:	2401      	movs	r4, #1
    1c2a:	4321      	orrs	r1, r4
    1c2c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c2e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c30:	203b      	movs	r0, #59	; 0x3b
    1c32:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c34:	3a47      	subs	r2, #71	; 0x47
    1c36:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    1c38:	2202      	movs	r2, #2
    1c3a:	4311      	orrs	r1, r2
    1c3c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c3e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c40:	2157      	movs	r1, #87	; 0x57
    1c42:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c44:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c46:	4322      	orrs	r2, r4
    1c48:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c4a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c4c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1c4e:	3948      	subs	r1, #72	; 0x48
    1c50:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1c52:	2120      	movs	r1, #32
    1c54:	430a      	orrs	r2, r1
    1c56:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c58:	541a      	strb	r2, [r3, r0]
}
    1c5a:	bd30      	pop	{r4, r5, pc}
    1c5c:	41004400 	.word	0x41004400

00001c60 <USART_0_init>:
{
    1c60:	b510      	push	{r4, lr}
    1c62:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
    1c64:	4b06      	ldr	r3, [pc, #24]	; (1c80 <USART_0_init+0x20>)
    1c66:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    1c68:	2300      	movs	r3, #0
    1c6a:	9300      	str	r3, [sp, #0]
    1c6c:	3310      	adds	r3, #16
    1c6e:	4a05      	ldr	r2, [pc, #20]	; (1c84 <USART_0_init+0x24>)
    1c70:	4905      	ldr	r1, [pc, #20]	; (1c88 <USART_0_init+0x28>)
    1c72:	4806      	ldr	r0, [pc, #24]	; (1c8c <USART_0_init+0x2c>)
    1c74:	4c06      	ldr	r4, [pc, #24]	; (1c90 <USART_0_init+0x30>)
    1c76:	47a0      	blx	r4
	USART_0_PORT_init();
    1c78:	4b06      	ldr	r3, [pc, #24]	; (1c94 <USART_0_init+0x34>)
    1c7a:	4798      	blx	r3
}
    1c7c:	b002      	add	sp, #8
    1c7e:	bd10      	pop	{r4, pc}
    1c80:	00001bfd 	.word	0x00001bfd
    1c84:	20000e58 	.word	0x20000e58
    1c88:	42001400 	.word	0x42001400
    1c8c:	20001494 	.word	0x20001494
    1c90:	000027f9 	.word	0x000027f9
    1c94:	00001c1d 	.word	0x00001c1d

00001c98 <delay_driver_init>:
{
    1c98:	b510      	push	{r4, lr}
	delay_init(SysTick);
    1c9a:	4802      	ldr	r0, [pc, #8]	; (1ca4 <delay_driver_init+0xc>)
    1c9c:	4b02      	ldr	r3, [pc, #8]	; (1ca8 <delay_driver_init+0x10>)
    1c9e:	4798      	blx	r3
}
    1ca0:	bd10      	pop	{r4, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	e000e010 	.word	0xe000e010
    1ca8:	00002059 	.word	0x00002059

00001cac <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
    1cac:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1cae:	2204      	movs	r2, #4
    1cb0:	23c0      	movs	r3, #192	; 0xc0
    1cb2:	05db      	lsls	r3, r3, #23
    1cb4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cb6:	490a      	ldr	r1, [pc, #40]	; (1ce0 <DAC_0_PORT_init+0x34>)
    1cb8:	4b0a      	ldr	r3, [pc, #40]	; (1ce4 <DAC_0_PORT_init+0x38>)
    1cba:	628b      	str	r3, [r1, #40]	; 0x28
    1cbc:	23c0      	movs	r3, #192	; 0xc0
    1cbe:	061b      	lsls	r3, r3, #24
    1cc0:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cc2:	2342      	movs	r3, #66	; 0x42
    1cc4:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cc6:	2001      	movs	r0, #1
    1cc8:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1cca:	4302      	orrs	r2, r0
    1ccc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cce:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1cd0:	2231      	movs	r2, #49	; 0x31
    1cd2:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1cd4:	240f      	movs	r4, #15
    1cd6:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
    1cd8:	4303      	orrs	r3, r0
    1cda:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1cdc:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
    1cde:	bd10      	pop	{r4, pc}
    1ce0:	41004400 	.word	0x41004400
    1ce4:	40000004 	.word	0x40000004

00001ce8 <DAC_0_CLOCK_init>:
    1ce8:	4a04      	ldr	r2, [pc, #16]	; (1cfc <DAC_0_CLOCK_init+0x14>)
    1cea:	6a11      	ldr	r1, [r2, #32]
    1cec:	2380      	movs	r3, #128	; 0x80
    1cee:	02db      	lsls	r3, r3, #11
    1cf0:	430b      	orrs	r3, r1
    1cf2:	6213      	str	r3, [r2, #32]
    1cf4:	4a02      	ldr	r2, [pc, #8]	; (1d00 <DAC_0_CLOCK_init+0x18>)
    1cf6:	4b03      	ldr	r3, [pc, #12]	; (1d04 <DAC_0_CLOCK_init+0x1c>)
    1cf8:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
    1cfa:	4770      	bx	lr
    1cfc:	40000400 	.word	0x40000400
    1d00:	00004021 	.word	0x00004021
    1d04:	40000c00 	.word	0x40000c00

00001d08 <DAC_0_init>:

void DAC_0_init(void)
{
    1d08:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
    1d0a:	4b04      	ldr	r3, [pc, #16]	; (1d1c <DAC_0_init+0x14>)
    1d0c:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    1d0e:	4904      	ldr	r1, [pc, #16]	; (1d20 <DAC_0_init+0x18>)
    1d10:	4804      	ldr	r0, [pc, #16]	; (1d24 <DAC_0_init+0x1c>)
    1d12:	4b05      	ldr	r3, [pc, #20]	; (1d28 <DAC_0_init+0x20>)
    1d14:	4798      	blx	r3
	DAC_0_PORT_init();
    1d16:	4b05      	ldr	r3, [pc, #20]	; (1d2c <DAC_0_init+0x24>)
    1d18:	4798      	blx	r3
}
    1d1a:	bd10      	pop	{r4, pc}
    1d1c:	00001ce9 	.word	0x00001ce9
    1d20:	42004800 	.word	0x42004800
    1d24:	20001488 	.word	0x20001488
    1d28:	00001f35 	.word	0x00001f35
    1d2c:	00001cad 	.word	0x00001cad

00001d30 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    1d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d32:	46c6      	mov	lr, r8
    1d34:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d36:	24c0      	movs	r4, #192	; 0xc0
    1d38:	05e4      	lsls	r4, r4, #23
    1d3a:	2280      	movs	r2, #128	; 0x80
    1d3c:	0452      	lsls	r2, r2, #17
    1d3e:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d40:	4b1c      	ldr	r3, [pc, #112]	; (1db4 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    1d42:	2780      	movs	r7, #128	; 0x80
    1d44:	05ff      	lsls	r7, r7, #23
    1d46:	629f      	str	r7, [r3, #40]	; 0x28
    1d48:	491b      	ldr	r1, [pc, #108]	; (1db8 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
    1d4a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d4c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d4e:	2058      	movs	r0, #88	; 0x58
    1d50:	5c19      	ldrb	r1, [r3, r0]
    1d52:	2204      	movs	r2, #4
    1d54:	4690      	mov	r8, r2
    1d56:	4391      	bics	r1, r2
    1d58:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d5a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d5c:	2601      	movs	r6, #1
    1d5e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d60:	2501      	movs	r5, #1
    1d62:	4329      	orrs	r1, r5
    1d64:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d66:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d68:	381c      	subs	r0, #28
    1d6a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1d6c:	320b      	adds	r2, #11
    1d6e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    1d70:	2206      	movs	r2, #6
    1d72:	4694      	mov	ip, r2
    1d74:	4662      	mov	r2, ip
    1d76:	4311      	orrs	r1, r2
    1d78:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d7a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d7c:	2180      	movs	r1, #128	; 0x80
    1d7e:	0489      	lsls	r1, r1, #18
    1d80:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d82:	629f      	str	r7, [r3, #40]	; 0x28
    1d84:	4f0d      	ldr	r7, [pc, #52]	; (1dbc <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
    1d86:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d88:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d8a:	2159      	movs	r1, #89	; 0x59
    1d8c:	5c5c      	ldrb	r4, [r3, r1]
    1d8e:	4642      	mov	r2, r8
    1d90:	4394      	bics	r4, r2
    1d92:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d94:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d96:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d98:	432a      	orrs	r2, r5
    1d9a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d9c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d9e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1da0:	394a      	subs	r1, #74	; 0x4a
    1da2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1da4:	2160      	movs	r1, #96	; 0x60
    1da6:	430a      	orrs	r2, r1
    1da8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1daa:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    1dac:	bc04      	pop	{r2}
    1dae:	4690      	mov	r8, r2
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	41004400 	.word	0x41004400
    1db8:	c0000100 	.word	0xc0000100
    1dbc:	c0000200 	.word	0xc0000200

00001dc0 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    1dc0:	4b06      	ldr	r3, [pc, #24]	; (1ddc <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    1dc2:	69da      	ldr	r2, [r3, #28]
    1dc4:	2120      	movs	r1, #32
    1dc6:	430a      	orrs	r2, r1
    1dc8:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    1dca:	695a      	ldr	r2, [r3, #20]
    1dcc:	3120      	adds	r1, #32
    1dce:	430a      	orrs	r2, r1
    1dd0:	615a      	str	r2, [r3, #20]
    1dd2:	4a03      	ldr	r2, [pc, #12]	; (1de0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    1dd4:	4b03      	ldr	r3, [pc, #12]	; (1de4 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    1dd6:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    1dd8:	4770      	bx	lr
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	40000400 	.word	0x40000400
    1de0:	00004406 	.word	0x00004406
    1de4:	40000c00 	.word	0x40000c00

00001de8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    1de8:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    1dea:	4b03      	ldr	r3, [pc, #12]	; (1df8 <USB_DEVICE_INSTANCE_init+0x10>)
    1dec:	4798      	blx	r3
	usb_d_init();
    1dee:	4b03      	ldr	r3, [pc, #12]	; (1dfc <USB_DEVICE_INSTANCE_init+0x14>)
    1df0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    1df2:	4b03      	ldr	r3, [pc, #12]	; (1e00 <USB_DEVICE_INSTANCE_init+0x18>)
    1df4:	4798      	blx	r3
}
    1df6:	bd10      	pop	{r4, pc}
    1df8:	00001dc1 	.word	0x00001dc1
    1dfc:	00002ae1 	.word	0x00002ae1
    1e00:	00001d31 	.word	0x00001d31

00001e04 <system_init>:

void system_init(void)
{
    1e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e06:	46c6      	mov	lr, r8
    1e08:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1e0a:	4b32      	ldr	r3, [pc, #200]	; (1ed4 <system_init+0xd0>)
    1e0c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e0e:	22c0      	movs	r2, #192	; 0xc0
    1e10:	05d2      	lsls	r2, r2, #23
    1e12:	2308      	movs	r3, #8
    1e14:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e16:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e18:	4b2f      	ldr	r3, [pc, #188]	; (1ed8 <system_init+0xd4>)
    1e1a:	4930      	ldr	r1, [pc, #192]	; (1edc <system_init+0xd8>)
    1e1c:	6299      	str	r1, [r3, #40]	; 0x28
    1e1e:	25c0      	movs	r5, #192	; 0xc0
    1e20:	062d      	lsls	r5, r5, #24
    1e22:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e24:	2443      	movs	r4, #67	; 0x43
    1e26:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e28:	2001      	movs	r0, #1
    1e2a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e2c:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e2e:	2180      	movs	r1, #128	; 0x80
    1e30:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e32:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e34:	492a      	ldr	r1, [pc, #168]	; (1ee0 <system_init+0xdc>)
    1e36:	6299      	str	r1, [r3, #40]	; 0x28
    1e38:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e3a:	3404      	adds	r4, #4
    1e3c:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e3e:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e40:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e42:	2180      	movs	r1, #128	; 0x80
    1e44:	0309      	lsls	r1, r1, #12
    1e46:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e48:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e4a:	2180      	movs	r1, #128	; 0x80
    1e4c:	05c9      	lsls	r1, r1, #23
    1e4e:	6299      	str	r1, [r3, #40]	; 0x28
    1e50:	4c24      	ldr	r4, [pc, #144]	; (1ee4 <system_init+0xe0>)
    1e52:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e54:	2653      	movs	r6, #83	; 0x53
    1e56:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e58:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e5a:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e5c:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e5e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e60:	6299      	str	r1, [r3, #40]	; 0x28
    1e62:	4c21      	ldr	r4, [pc, #132]	; (1ee8 <system_init+0xe4>)
    1e64:	46a0      	mov	r8, r4
    1e66:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e68:	275e      	movs	r7, #94	; 0x5e
    1e6a:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e6c:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e6e:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e70:	2480      	movs	r4, #128	; 0x80
    1e72:	00e4      	lsls	r4, r4, #3
    1e74:	3736      	adds	r7, #54	; 0x36
    1e76:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e78:	3f0c      	subs	r7, #12
    1e7a:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e7c:	24a8      	movs	r4, #168	; 0xa8
    1e7e:	4e1b      	ldr	r6, [pc, #108]	; (1eec <system_init+0xe8>)
    1e80:	511e      	str	r6, [r3, r4]
    1e82:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e84:	25ca      	movs	r5, #202	; 0xca
    1e86:	46ac      	mov	ip, r5
    1e88:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e8a:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e8c:	4666      	mov	r6, ip
    1e8e:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e90:	2598      	movs	r5, #152	; 0x98
    1e92:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e94:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e96:	5119      	str	r1, [r3, r4]
    1e98:	4642      	mov	r2, r8
    1e9a:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e9c:	21de      	movs	r1, #222	; 0xde
    1e9e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ea0:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ea2:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    1ea4:	4b12      	ldr	r3, [pc, #72]	; (1ef0 <system_init+0xec>)
    1ea6:	4798      	blx	r3

	SPI_ADF_init();
    1ea8:	4b12      	ldr	r3, [pc, #72]	; (1ef4 <system_init+0xf0>)
    1eaa:	4798      	blx	r3

	SPI_LMX_init();
    1eac:	4b12      	ldr	r3, [pc, #72]	; (1ef8 <system_init+0xf4>)
    1eae:	4798      	blx	r3

	SPI_ZCD_init();
    1eb0:	4b12      	ldr	r3, [pc, #72]	; (1efc <system_init+0xf8>)
    1eb2:	4798      	blx	r3
	USART_0_init();
    1eb4:	4b12      	ldr	r3, [pc, #72]	; (1f00 <system_init+0xfc>)
    1eb6:	4798      	blx	r3

	delay_driver_init();
    1eb8:	4b12      	ldr	r3, [pc, #72]	; (1f04 <system_init+0x100>)
    1eba:	4798      	blx	r3

	TIMER_ZCD_init();
    1ebc:	4b12      	ldr	r3, [pc, #72]	; (1f08 <system_init+0x104>)
    1ebe:	4798      	blx	r3
	TIMER_USB_init();
    1ec0:	4b12      	ldr	r3, [pc, #72]	; (1f0c <system_init+0x108>)
    1ec2:	4798      	blx	r3
	DAC_0_init();
    1ec4:	4b12      	ldr	r3, [pc, #72]	; (1f10 <system_init+0x10c>)
    1ec6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    1ec8:	4b12      	ldr	r3, [pc, #72]	; (1f14 <system_init+0x110>)
    1eca:	4798      	blx	r3
}
    1ecc:	bc04      	pop	{r2}
    1ece:	4690      	mov	r8, r2
    1ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	00003069 	.word	0x00003069
    1ed8:	41004400 	.word	0x41004400
    1edc:	40000008 	.word	0x40000008
    1ee0:	40000080 	.word	0x40000080
    1ee4:	c0000008 	.word	0xc0000008
    1ee8:	c0004000 	.word	0xc0004000
    1eec:	40000400 	.word	0x40000400
    1ef0:	000018a5 	.word	0x000018a5
    1ef4:	000019d9 	.word	0x000019d9
    1ef8:	00001ae1 	.word	0x00001ae1
    1efc:	00001bd5 	.word	0x00001bd5
    1f00:	00001c61 	.word	0x00001c61
    1f04:	00001c99 	.word	0x00001c99
    1f08:	00001825 	.word	0x00001825
    1f0c:	00001865 	.word	0x00001865
    1f10:	00001d09 	.word	0x00001d09
    1f14:	00001de9 	.word	0x00001de9

00001f18 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1f18:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1f1c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1f1e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1f20:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1f24:	4770      	bx	lr

00001f26 <atomic_leave_critical>:
    1f26:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1f2a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1f2c:	f383 8810 	msr	PRIMASK, r3
}
    1f30:	4770      	bx	lr
	...

00001f34 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1f34:	b570      	push	{r4, r5, r6, lr}
    1f36:	0004      	movs	r4, r0
    1f38:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1f3a:	2800      	cmp	r0, #0
    1f3c:	d010      	beq.n	1f60 <dac_sync_init+0x2c>
    1f3e:	2900      	cmp	r1, #0
    1f40:	d00c      	beq.n	1f5c <dac_sync_init+0x28>
    1f42:	2001      	movs	r0, #1
    1f44:	2232      	movs	r2, #50	; 0x32
    1f46:	490c      	ldr	r1, [pc, #48]	; (1f78 <dac_sync_init+0x44>)
    1f48:	4b0c      	ldr	r3, [pc, #48]	; (1f7c <dac_sync_init+0x48>)
    1f4a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1f4c:	0029      	movs	r1, r5
    1f4e:	0020      	movs	r0, r4
    1f50:	4b0b      	ldr	r3, [pc, #44]	; (1f80 <dac_sync_init+0x4c>)
    1f52:	4798      	blx	r3
	if (rc) {
    1f54:	2800      	cmp	r0, #0
    1f56:	d10e      	bne.n	1f76 <dac_sync_init+0x42>
    1f58:	2300      	movs	r3, #0
    1f5a:	e00a      	b.n	1f72 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    1f5c:	2000      	movs	r0, #0
    1f5e:	e7f1      	b.n	1f44 <dac_sync_init+0x10>
    1f60:	2000      	movs	r0, #0
    1f62:	e7ef      	b.n	1f44 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1f64:	00da      	lsls	r2, r3, #3
    1f66:	18a2      	adds	r2, r4, r2
    1f68:	2100      	movs	r1, #0
    1f6a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    1f6c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    1f6e:	3301      	adds	r3, #1
    1f70:	b2db      	uxtb	r3, r3
    1f72:	2b00      	cmp	r3, #0
    1f74:	d0f6      	beq.n	1f64 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    1f76:	bd70      	pop	{r4, r5, r6, pc}
    1f78:	000102d4 	.word	0x000102d4
    1f7c:	00002e6d 	.word	0x00002e6d
    1f80:	000030dd 	.word	0x000030dd

00001f84 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
    1f84:	b570      	push	{r4, r5, r6, lr}
    1f86:	0004      	movs	r4, r0
    1f88:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d00c      	beq.n	1fa8 <dac_sync_enable_channel+0x24>
    1f8e:	2900      	cmp	r1, #0
    1f90:	d00c      	beq.n	1fac <dac_sync_enable_channel+0x28>
    1f92:	2000      	movs	r0, #0
    1f94:	2252      	movs	r2, #82	; 0x52
    1f96:	4906      	ldr	r1, [pc, #24]	; (1fb0 <dac_sync_enable_channel+0x2c>)
    1f98:	4b06      	ldr	r3, [pc, #24]	; (1fb4 <dac_sync_enable_channel+0x30>)
    1f9a:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
    1f9c:	0029      	movs	r1, r5
    1f9e:	0020      	movs	r0, r4
    1fa0:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <dac_sync_enable_channel+0x34>)
    1fa2:	4798      	blx	r3

	return ERR_NONE;
}
    1fa4:	2000      	movs	r0, #0
    1fa6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
    1fa8:	2000      	movs	r0, #0
    1faa:	e7f3      	b.n	1f94 <dac_sync_enable_channel+0x10>
    1fac:	2001      	movs	r0, #1
    1fae:	e7f1      	b.n	1f94 <dac_sync_enable_channel+0x10>
    1fb0:	000102d4 	.word	0x000102d4
    1fb4:	00002e6d 	.word	0x00002e6d
    1fb8:	00003109 	.word	0x00003109

00001fbc <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
    1fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fbe:	46ce      	mov	lr, r9
    1fc0:	b500      	push	{lr}
    1fc2:	b082      	sub	sp, #8
    1fc4:	0007      	movs	r7, r0
    1fc6:	000d      	movs	r5, r1
    1fc8:	0014      	movs	r4, r2
    1fca:	4699      	mov	r9, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    1fcc:	2800      	cmp	r0, #0
    1fce:	d007      	beq.n	1fe0 <dac_sync_write+0x24>
    1fd0:	2900      	cmp	r1, #0
    1fd2:	d107      	bne.n	1fe4 <dac_sync_write+0x28>
    1fd4:	2a00      	cmp	r2, #0
    1fd6:	d018      	beq.n	200a <STACK_SIZE+0xa>
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d118      	bne.n	200e <STACK_SIZE+0xe>
    1fdc:	2000      	movs	r0, #0
    1fde:	e002      	b.n	1fe6 <dac_sync_write+0x2a>
    1fe0:	2000      	movs	r0, #0
    1fe2:	e000      	b.n	1fe6 <dac_sync_write+0x2a>
    1fe4:	2000      	movs	r0, #0
    1fe6:	226a      	movs	r2, #106	; 0x6a
    1fe8:	4917      	ldr	r1, [pc, #92]	; (2048 <STACK_SIZE+0x48>)
    1fea:	4b18      	ldr	r3, [pc, #96]	; (204c <STACK_SIZE+0x4c>)
    1fec:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
    1fee:	9701      	str	r7, [sp, #4]
    1ff0:	0029      	movs	r1, r5
    1ff2:	0038      	movs	r0, r7
    1ff4:	4b16      	ldr	r3, [pc, #88]	; (2050 <STACK_SIZE+0x50>)
    1ff6:	4798      	blx	r3
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d022      	beq.n	2042 <STACK_SIZE+0x42>
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
    1ffc:	002e      	movs	r6, r5
    1ffe:	00eb      	lsls	r3, r5, #3
    2000:	18fb      	adds	r3, r7, r3
    2002:	605c      	str	r4, [r3, #4]
	descr->sel_ch[ch].length = length;
    2004:	464a      	mov	r2, r9
    2006:	609a      	str	r2, [r3, #8]

	while (descr->sel_ch[ch].length) {
    2008:	e011      	b.n	202e <STACK_SIZE+0x2e>
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
    200a:	2000      	movs	r0, #0
    200c:	e7eb      	b.n	1fe6 <dac_sync_write+0x2a>
    200e:	2001      	movs	r0, #1
    2010:	e7e9      	b.n	1fe6 <dac_sync_write+0x2a>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
    2012:	00f4      	lsls	r4, r6, #3
    2014:	193c      	adds	r4, r7, r4
    2016:	6863      	ldr	r3, [r4, #4]
    2018:	8819      	ldrh	r1, [r3, #0]
    201a:	002a      	movs	r2, r5
    201c:	9801      	ldr	r0, [sp, #4]
    201e:	4b0d      	ldr	r3, [pc, #52]	; (2054 <STACK_SIZE+0x54>)
    2020:	4798      	blx	r3
		descr->sel_ch[ch].buffer++;
    2022:	6863      	ldr	r3, [r4, #4]
    2024:	3302      	adds	r3, #2
    2026:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
    2028:	68a3      	ldr	r3, [r4, #8]
    202a:	3b01      	subs	r3, #1
    202c:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
    202e:	00f3      	lsls	r3, r6, #3
    2030:	18fb      	adds	r3, r7, r3
    2032:	689b      	ldr	r3, [r3, #8]
    2034:	2b00      	cmp	r3, #0
    2036:	d1ec      	bne.n	2012 <STACK_SIZE+0x12>
	}

	return ERR_NONE;
    2038:	2000      	movs	r0, #0
}
    203a:	b002      	add	sp, #8
    203c:	bc04      	pop	{r2}
    203e:	4691      	mov	r9, r2
    2040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_NOT_READY;
    2042:	201d      	movs	r0, #29
    2044:	4240      	negs	r0, r0
    2046:	e7f8      	b.n	203a <STACK_SIZE+0x3a>
    2048:	000102d4 	.word	0x000102d4
    204c:	00002e6d 	.word	0x00002e6d
    2050:	0000311d 	.word	0x0000311d
    2054:	0000312f 	.word	0x0000312f

00002058 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2058:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    205a:	4b02      	ldr	r3, [pc, #8]	; (2064 <delay_init+0xc>)
    205c:	6018      	str	r0, [r3, #0]
    205e:	4b02      	ldr	r3, [pc, #8]	; (2068 <delay_init+0x10>)
    2060:	4798      	blx	r3
}
    2062:	bd10      	pop	{r4, pc}
    2064:	20000e68 	.word	0x20000e68
    2068:	00003ac1 	.word	0x00003ac1

0000206c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    206c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    206e:	4b04      	ldr	r3, [pc, #16]	; (2080 <delay_ms+0x14>)
    2070:	681c      	ldr	r4, [r3, #0]
    2072:	4b04      	ldr	r3, [pc, #16]	; (2084 <delay_ms+0x18>)
    2074:	4798      	blx	r3
    2076:	0001      	movs	r1, r0
    2078:	0020      	movs	r0, r4
    207a:	4b03      	ldr	r3, [pc, #12]	; (2088 <delay_ms+0x1c>)
    207c:	4798      	blx	r3
}
    207e:	bd10      	pop	{r4, pc}
    2080:	20000e68 	.word	0x20000e68
    2084:	0000305d 	.word	0x0000305d
    2088:	00003acd 	.word	0x00003acd

0000208c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    208c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    208e:	2501      	movs	r5, #1
    2090:	2400      	movs	r4, #0

	while (upper >= lower) {
    2092:	e007      	b.n	20a4 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    2094:	4a0d      	ldr	r2, [pc, #52]	; (20cc <process_ext_irq+0x40>)
    2096:	58b3      	ldr	r3, [r6, r2]
    2098:	2b00      	cmp	r3, #0
    209a:	d000      	beq.n	209e <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    209c:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    209e:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    20a0:	3a01      	subs	r2, #1
    20a2:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    20a4:	42ac      	cmp	r4, r5
    20a6:	d8fa      	bhi.n	209e <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    20a8:	192b      	adds	r3, r5, r4
    20aa:	105b      	asrs	r3, r3, #1
    20ac:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    20ae:	2a00      	cmp	r2, #0
    20b0:	d1f5      	bne.n	209e <process_ext_irq+0x12>
    20b2:	21ff      	movs	r1, #255	; 0xff
    20b4:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    20b6:	00de      	lsls	r6, r3, #3
    20b8:	4904      	ldr	r1, [pc, #16]	; (20cc <process_ext_irq+0x40>)
    20ba:	1989      	adds	r1, r1, r6
    20bc:	6849      	ldr	r1, [r1, #4]
    20be:	4281      	cmp	r1, r0
    20c0:	d0e8      	beq.n	2094 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    20c2:	d2ed      	bcs.n	20a0 <process_ext_irq+0x14>
			lower = middle + 1;
    20c4:	3201      	adds	r2, #1
    20c6:	b2d4      	uxtb	r4, r2
    20c8:	e7ec      	b.n	20a4 <process_ext_irq+0x18>
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	20000e6c 	.word	0x20000e6c

000020d0 <ext_irq_init>:
{
    20d0:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    20d2:	2300      	movs	r3, #0
    20d4:	2b00      	cmp	r3, #0
    20d6:	d003      	beq.n	20e0 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
    20d8:	4807      	ldr	r0, [pc, #28]	; (20f8 <ext_irq_init+0x28>)
    20da:	4b08      	ldr	r3, [pc, #32]	; (20fc <ext_irq_init+0x2c>)
    20dc:	4798      	blx	r3
}
    20de:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
    20e0:	4a07      	ldr	r2, [pc, #28]	; (2100 <ext_irq_init+0x30>)
    20e2:	00d9      	lsls	r1, r3, #3
    20e4:	1850      	adds	r0, r2, r1
    20e6:	2401      	movs	r4, #1
    20e8:	4264      	negs	r4, r4
    20ea:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    20ec:	2000      	movs	r0, #0
    20ee:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    20f0:	3301      	adds	r3, #1
    20f2:	b29b      	uxth	r3, r3
    20f4:	e7ee      	b.n	20d4 <ext_irq_init+0x4>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	0000208d 	.word	0x0000208d
    20fc:	0000313d 	.word	0x0000313d
    2100:	20000e6c 	.word	0x20000e6c

00002104 <ext_irq_register>:
{
    2104:	b5f0      	push	{r4, r5, r6, r7, lr}
    2106:	46c6      	mov	lr, r8
    2108:	b500      	push	{lr}
    210a:	b084      	sub	sp, #16
    210c:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
    210e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2110:	2b00      	cmp	r3, #0
    2112:	d010      	beq.n	2136 <ext_irq_register+0x32>
	bool    found = false;
    2114:	2300      	movs	r3, #0
    2116:	4698      	mov	r8, r3
	if (NULL == cb) {
    2118:	2900      	cmp	r1, #0
    211a:	d01b      	beq.n	2154 <ext_irq_register+0x50>
	if (!found) {
    211c:	4643      	mov	r3, r8
    211e:	2b00      	cmp	r3, #0
    2120:	d146      	bne.n	21b0 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2122:	2b00      	cmp	r3, #0
    2124:	d124      	bne.n	2170 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
    2126:	00da      	lsls	r2, r3, #3
    2128:	4c2a      	ldr	r4, [pc, #168]	; (21d4 <ext_irq_register+0xd0>)
    212a:	5912      	ldr	r2, [r2, r4]
    212c:	2a00      	cmp	r2, #0
    212e:	d018      	beq.n	2162 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2130:	3301      	adds	r3, #1
    2132:	b2db      	uxtb	r3, r3
    2134:	e7f5      	b.n	2122 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
    2136:	00dc      	lsls	r4, r3, #3
    2138:	4a26      	ldr	r2, [pc, #152]	; (21d4 <ext_irq_register+0xd0>)
    213a:	1912      	adds	r2, r2, r4
    213c:	6852      	ldr	r2, [r2, #4]
    213e:	9801      	ldr	r0, [sp, #4]
    2140:	4282      	cmp	r2, r0
    2142:	d002      	beq.n	214a <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2144:	3301      	adds	r3, #1
    2146:	b2db      	uxtb	r3, r3
    2148:	e7e2      	b.n	2110 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
    214a:	4b22      	ldr	r3, [pc, #136]	; (21d4 <ext_irq_register+0xd0>)
    214c:	50e1      	str	r1, [r4, r3]
			found          = true;
    214e:	2301      	movs	r3, #1
    2150:	4698      	mov	r8, r3
			break;
    2152:	e7e1      	b.n	2118 <ext_irq_register+0x14>
		if (!found) {
    2154:	4643      	mov	r3, r8
    2156:	2b00      	cmp	r3, #0
    2158:	d035      	beq.n	21c6 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
    215a:	9801      	ldr	r0, [sp, #4]
    215c:	4b1e      	ldr	r3, [pc, #120]	; (21d8 <ext_irq_register+0xd4>)
    215e:	4798      	blx	r3
    2160:	e02d      	b.n	21be <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
    2162:	00dd      	lsls	r5, r3, #3
    2164:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
    2166:	1965      	adds	r5, r4, r5
    2168:	9a01      	ldr	r2, [sp, #4]
    216a:	606a      	str	r2, [r5, #4]
				found           = true;
    216c:	2201      	movs	r2, #1
    216e:	4690      	mov	r8, r2
    2170:	2200      	movs	r2, #0
    2172:	e001      	b.n	2178 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2174:	3201      	adds	r2, #1
    2176:	b2d2      	uxtb	r2, r2
    2178:	0019      	movs	r1, r3
    217a:	4311      	orrs	r1, r2
    217c:	d118      	bne.n	21b0 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    217e:	4915      	ldr	r1, [pc, #84]	; (21d4 <ext_irq_register+0xd0>)
    2180:	00dc      	lsls	r4, r3, #3
    2182:	190c      	adds	r4, r1, r4
    2184:	6867      	ldr	r7, [r4, #4]
    2186:	00d4      	lsls	r4, r2, #3
    2188:	1909      	adds	r1, r1, r4
    218a:	6849      	ldr	r1, [r1, #4]
    218c:	428f      	cmp	r7, r1
    218e:	d2f1      	bcs.n	2174 <ext_irq_register+0x70>
    2190:	1c4c      	adds	r4, r1, #1
    2192:	d0ef      	beq.n	2174 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
    2194:	a902      	add	r1, sp, #8
    2196:	468c      	mov	ip, r1
    2198:	4f0e      	ldr	r7, [pc, #56]	; (21d4 <ext_irq_register+0xd0>)
    219a:	00d1      	lsls	r1, r2, #3
    219c:	1879      	adds	r1, r7, r1
    219e:	4664      	mov	r4, ip
    21a0:	c941      	ldmia	r1!, {r0, r6}
    21a2:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
    21a4:	00dd      	lsls	r5, r3, #3
    21a6:	197d      	adds	r5, r7, r5
    21a8:	4661      	mov	r1, ip
    21aa:	c911      	ldmia	r1!, {r0, r4}
    21ac:	c511      	stmia	r5!, {r0, r4}
    21ae:	e7e1      	b.n	2174 <ext_irq_register+0x70>
	if (!found) {
    21b0:	4643      	mov	r3, r8
    21b2:	2b00      	cmp	r3, #0
    21b4:	d00a      	beq.n	21cc <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
    21b6:	2101      	movs	r1, #1
    21b8:	9801      	ldr	r0, [sp, #4]
    21ba:	4b07      	ldr	r3, [pc, #28]	; (21d8 <ext_irq_register+0xd4>)
    21bc:	4798      	blx	r3
}
    21be:	b004      	add	sp, #16
    21c0:	bc04      	pop	{r2}
    21c2:	4690      	mov	r8, r2
    21c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    21c6:	200d      	movs	r0, #13
    21c8:	4240      	negs	r0, r0
    21ca:	e7f8      	b.n	21be <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
    21cc:	200d      	movs	r0, #13
    21ce:	4240      	negs	r0, r0
    21d0:	e7f5      	b.n	21be <ext_irq_register+0xba>
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	20000e6c 	.word	0x20000e6c
    21d8:	000031cd 	.word	0x000031cd

000021dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    21dc:	b570      	push	{r4, r5, r6, lr}
    21de:	0004      	movs	r4, r0
    21e0:	000d      	movs	r5, r1
    21e2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    21e4:	2800      	cmp	r0, #0
    21e6:	d00e      	beq.n	2206 <io_write+0x2a>
    21e8:	2900      	cmp	r1, #0
    21ea:	d00a      	beq.n	2202 <io_write+0x26>
    21ec:	2001      	movs	r0, #1
    21ee:	2234      	movs	r2, #52	; 0x34
    21f0:	4906      	ldr	r1, [pc, #24]	; (220c <io_write+0x30>)
    21f2:	4b07      	ldr	r3, [pc, #28]	; (2210 <io_write+0x34>)
    21f4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    21f6:	6823      	ldr	r3, [r4, #0]
    21f8:	0032      	movs	r2, r6
    21fa:	0029      	movs	r1, r5
    21fc:	0020      	movs	r0, r4
    21fe:	4798      	blx	r3
}
    2200:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2202:	2000      	movs	r0, #0
    2204:	e7f3      	b.n	21ee <io_write+0x12>
    2206:	2000      	movs	r0, #0
    2208:	e7f1      	b.n	21ee <io_write+0x12>
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	000102f0 	.word	0x000102f0
    2210:	00002e6d 	.word	0x00002e6d

00002214 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2214:	b570      	push	{r4, r5, r6, lr}
    2216:	0004      	movs	r4, r0
    2218:	000d      	movs	r5, r1
    221a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    221c:	2800      	cmp	r0, #0
    221e:	d00e      	beq.n	223e <io_read+0x2a>
    2220:	2900      	cmp	r1, #0
    2222:	d00a      	beq.n	223a <io_read+0x26>
    2224:	2001      	movs	r0, #1
    2226:	223d      	movs	r2, #61	; 0x3d
    2228:	4906      	ldr	r1, [pc, #24]	; (2244 <io_read+0x30>)
    222a:	4b07      	ldr	r3, [pc, #28]	; (2248 <io_read+0x34>)
    222c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    222e:	6863      	ldr	r3, [r4, #4]
    2230:	0032      	movs	r2, r6
    2232:	0029      	movs	r1, r5
    2234:	0020      	movs	r0, r4
    2236:	4798      	blx	r3
}
    2238:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    223a:	2000      	movs	r0, #0
    223c:	e7f3      	b.n	2226 <io_read+0x12>
    223e:	2000      	movs	r0, #0
    2240:	e7f1      	b.n	2226 <io_read+0x12>
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	000102f0 	.word	0x000102f0
    2248:	00002e6d 	.word	0x00002e6d

0000224c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    224c:	b570      	push	{r4, r5, r6, lr}
    224e:	0004      	movs	r4, r0
    2250:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    2252:	2800      	cmp	r0, #0
    2254:	d017      	beq.n	2286 <spi_m_sync_init+0x3a>
    2256:	2900      	cmp	r1, #0
    2258:	d013      	beq.n	2282 <spi_m_sync_init+0x36>
    225a:	2001      	movs	r0, #1
    225c:	2240      	movs	r2, #64	; 0x40
    225e:	490b      	ldr	r1, [pc, #44]	; (228c <spi_m_sync_init+0x40>)
    2260:	4b0b      	ldr	r3, [pc, #44]	; (2290 <spi_m_sync_init+0x44>)
    2262:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2264:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2266:	1d20      	adds	r0, r4, #4
    2268:	0029      	movs	r1, r5
    226a:	4b0a      	ldr	r3, [pc, #40]	; (2294 <spi_m_sync_init+0x48>)
    226c:	4798      	blx	r3

	if (rc < 0) {
    226e:	2800      	cmp	r0, #0
    2270:	db06      	blt.n	2280 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2272:	4b09      	ldr	r3, [pc, #36]	; (2298 <spi_m_sync_init+0x4c>)
    2274:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2276:	4b09      	ldr	r3, [pc, #36]	; (229c <spi_m_sync_init+0x50>)
    2278:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    227a:	4b09      	ldr	r3, [pc, #36]	; (22a0 <spi_m_sync_init+0x54>)
    227c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    227e:	2000      	movs	r0, #0
}
    2280:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    2282:	2000      	movs	r0, #0
    2284:	e7ea      	b.n	225c <spi_m_sync_init+0x10>
    2286:	2000      	movs	r0, #0
    2288:	e7e8      	b.n	225c <spi_m_sync_init+0x10>
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	00010304 	.word	0x00010304
    2290:	00002e6d 	.word	0x00002e6d
    2294:	0000366d 	.word	0x0000366d
    2298:	ffff8000 	.word	0xffff8000
    229c:	00002351 	.word	0x00002351
    22a0:	00002315 	.word	0x00002315

000022a4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    22a4:	b510      	push	{r4, lr}
    22a6:	0004      	movs	r4, r0
	ASSERT(spi);
    22a8:	1e43      	subs	r3, r0, #1
    22aa:	4198      	sbcs	r0, r3
    22ac:	b2c0      	uxtb	r0, r0
    22ae:	2257      	movs	r2, #87	; 0x57
    22b0:	4903      	ldr	r1, [pc, #12]	; (22c0 <spi_m_sync_enable+0x1c>)
    22b2:	4b04      	ldr	r3, [pc, #16]	; (22c4 <spi_m_sync_enable+0x20>)
    22b4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    22b6:	1d20      	adds	r0, r4, #4
    22b8:	4b03      	ldr	r3, [pc, #12]	; (22c8 <spi_m_sync_enable+0x24>)
    22ba:	4798      	blx	r3
}
    22bc:	bd10      	pop	{r4, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00010304 	.word	0x00010304
    22c4:	00002e6d 	.word	0x00002e6d
    22c8:	00003871 	.word	0x00003871

000022cc <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    22cc:	b530      	push	{r4, r5, lr}
    22ce:	b087      	sub	sp, #28
    22d0:	0004      	movs	r4, r0
    22d2:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    22d4:	2800      	cmp	r0, #0
    22d6:	d015      	beq.n	2304 <spi_m_sync_transfer+0x38>
    22d8:	2900      	cmp	r1, #0
    22da:	d011      	beq.n	2300 <spi_m_sync_transfer+0x34>
    22dc:	2001      	movs	r0, #1
    22de:	22b3      	movs	r2, #179	; 0xb3
    22e0:	4909      	ldr	r1, [pc, #36]	; (2308 <spi_m_sync_transfer+0x3c>)
    22e2:	4b0a      	ldr	r3, [pc, #40]	; (230c <spi_m_sync_transfer+0x40>)
    22e4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    22e6:	682b      	ldr	r3, [r5, #0]
    22e8:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    22ea:	686b      	ldr	r3, [r5, #4]
    22ec:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    22ee:	68ab      	ldr	r3, [r5, #8]
    22f0:	9301      	str	r3, [sp, #4]
    22f2:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    22f4:	1d20      	adds	r0, r4, #4
    22f6:	a903      	add	r1, sp, #12
    22f8:	4b05      	ldr	r3, [pc, #20]	; (2310 <spi_m_sync_transfer+0x44>)
    22fa:	4798      	blx	r3
}
    22fc:	b007      	add	sp, #28
    22fe:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    2300:	2000      	movs	r0, #0
    2302:	e7ec      	b.n	22de <spi_m_sync_transfer+0x12>
    2304:	2000      	movs	r0, #0
    2306:	e7ea      	b.n	22de <spi_m_sync_transfer+0x12>
    2308:	00010304 	.word	0x00010304
    230c:	00002e6d 	.word	0x00002e6d
    2310:	000038a9 	.word	0x000038a9

00002314 <_spi_m_sync_io_write>:
{
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	b084      	sub	sp, #16
    2318:	0004      	movs	r4, r0
    231a:	000e      	movs	r6, r1
    231c:	0015      	movs	r5, r2
	ASSERT(io);
    231e:	1e43      	subs	r3, r0, #1
    2320:	4198      	sbcs	r0, r3
    2322:	b2c0      	uxtb	r0, r0
    2324:	22a3      	movs	r2, #163	; 0xa3
    2326:	4907      	ldr	r1, [pc, #28]	; (2344 <_spi_m_sync_io_write+0x30>)
    2328:	4b07      	ldr	r3, [pc, #28]	; (2348 <_spi_m_sync_io_write+0x34>)
    232a:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    232c:	0020      	movs	r0, r4
    232e:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    2330:	2300      	movs	r3, #0
    2332:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    2334:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    2336:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2338:	a901      	add	r1, sp, #4
    233a:	4b04      	ldr	r3, [pc, #16]	; (234c <_spi_m_sync_io_write+0x38>)
    233c:	4798      	blx	r3
}
    233e:	b004      	add	sp, #16
    2340:	bd70      	pop	{r4, r5, r6, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00010304 	.word	0x00010304
    2348:	00002e6d 	.word	0x00002e6d
    234c:	000022cd 	.word	0x000022cd

00002350 <_spi_m_sync_io_read>:
{
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	b084      	sub	sp, #16
    2354:	0004      	movs	r4, r0
    2356:	000e      	movs	r6, r1
    2358:	0015      	movs	r5, r2
	ASSERT(io);
    235a:	1e43      	subs	r3, r0, #1
    235c:	4198      	sbcs	r0, r3
    235e:	b2c0      	uxtb	r0, r0
    2360:	2287      	movs	r2, #135	; 0x87
    2362:	4907      	ldr	r1, [pc, #28]	; (2380 <_spi_m_sync_io_read+0x30>)
    2364:	4b07      	ldr	r3, [pc, #28]	; (2384 <_spi_m_sync_io_read+0x34>)
    2366:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2368:	0020      	movs	r0, r4
    236a:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    236c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    236e:	2300      	movs	r3, #0
    2370:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    2372:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2374:	a901      	add	r1, sp, #4
    2376:	4b04      	ldr	r3, [pc, #16]	; (2388 <_spi_m_sync_io_read+0x38>)
    2378:	4798      	blx	r3
}
    237a:	b004      	add	sp, #16
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	00010304 	.word	0x00010304
    2384:	00002e6d 	.word	0x00002e6d
    2388:	000022cd 	.word	0x000022cd

0000238c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    238c:	b570      	push	{r4, r5, r6, lr}
    238e:	0004      	movs	r4, r0
    2390:	000d      	movs	r5, r1
	ASSERT(spi && io);
    2392:	2800      	cmp	r0, #0
    2394:	d00c      	beq.n	23b0 <spi_m_sync_get_io_descriptor+0x24>
    2396:	2900      	cmp	r1, #0
    2398:	d008      	beq.n	23ac <spi_m_sync_get_io_descriptor+0x20>
    239a:	2001      	movs	r0, #1
    239c:	22bd      	movs	r2, #189	; 0xbd
    239e:	4905      	ldr	r1, [pc, #20]	; (23b4 <spi_m_sync_get_io_descriptor+0x28>)
    23a0:	4b05      	ldr	r3, [pc, #20]	; (23b8 <spi_m_sync_get_io_descriptor+0x2c>)
    23a2:	4798      	blx	r3
	*io = &spi->io;
    23a4:	340c      	adds	r4, #12
    23a6:	602c      	str	r4, [r5, #0]
	return 0;
}
    23a8:	2000      	movs	r0, #0
    23aa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    23ac:	2000      	movs	r0, #0
    23ae:	e7f5      	b.n	239c <spi_m_sync_get_io_descriptor+0x10>
    23b0:	2000      	movs	r0, #0
    23b2:	e7f3      	b.n	239c <spi_m_sync_get_io_descriptor+0x10>
    23b4:	00010304 	.word	0x00010304
    23b8:	00002e6d 	.word	0x00002e6d

000023bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    23be:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    23c0:	2e00      	cmp	r6, #0
    23c2:	d002      	beq.n	23ca <timer_add_timer_task+0xe>
    23c4:	0033      	movs	r3, r6
    23c6:	2500      	movs	r5, #0
    23c8:	e00c      	b.n	23e4 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    23ca:	4b10      	ldr	r3, [pc, #64]	; (240c <timer_add_timer_task+0x50>)
    23cc:	4798      	blx	r3
		return;
    23ce:	e018      	b.n	2402 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    23d0:	689f      	ldr	r7, [r3, #8]
    23d2:	46bc      	mov	ip, r7
    23d4:	4464      	add	r4, ip
    23d6:	1aa4      	subs	r4, r4, r2
    23d8:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    23da:	688f      	ldr	r7, [r1, #8]
    23dc:	42bc      	cmp	r4, r7
    23de:	d20b      	bcs.n	23f8 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    23e0:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    23e2:	681b      	ldr	r3, [r3, #0]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d007      	beq.n	23f8 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    23e8:	685c      	ldr	r4, [r3, #4]
    23ea:	4294      	cmp	r4, r2
    23ec:	d8f0      	bhi.n	23d0 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    23ee:	1aa4      	subs	r4, r4, r2
    23f0:	689f      	ldr	r7, [r3, #8]
    23f2:	46bc      	mov	ip, r7
    23f4:	4464      	add	r4, ip
    23f6:	e7f0      	b.n	23da <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    23f8:	42b3      	cmp	r3, r6
    23fa:	d003      	beq.n	2404 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    23fc:	0028      	movs	r0, r5
    23fe:	4b04      	ldr	r3, [pc, #16]	; (2410 <timer_add_timer_task+0x54>)
    2400:	4798      	blx	r3
	}
}
    2402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2404:	4b01      	ldr	r3, [pc, #4]	; (240c <timer_add_timer_task+0x50>)
    2406:	4798      	blx	r3
    2408:	e7fb      	b.n	2402 <timer_add_timer_task+0x46>
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	00002e8d 	.word	0x00002e8d
    2410:	00002eb9 	.word	0x00002eb9

00002414 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2416:	0005      	movs	r5, r0
    2418:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    241a:	6903      	ldr	r3, [r0, #16]
    241c:	1c5e      	adds	r6, r3, #1
    241e:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2420:	7e03      	ldrb	r3, [r0, #24]
    2422:	07db      	lsls	r3, r3, #31
    2424:	d402      	bmi.n	242c <timer_process_counted+0x18>
    2426:	7e03      	ldrb	r3, [r0, #24]
    2428:	079b      	lsls	r3, r3, #30
    242a:	d50a      	bpl.n	2442 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    242c:	7e2b      	ldrb	r3, [r5, #24]
    242e:	2202      	movs	r2, #2
    2430:	4313      	orrs	r3, r2
    2432:	b2db      	uxtb	r3, r3
    2434:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    2436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2438:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    243a:	68e3      	ldr	r3, [r4, #12]
    243c:	0020      	movs	r0, r4
    243e:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2440:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    2442:	2c00      	cmp	r4, #0
    2444:	d0f7      	beq.n	2436 <timer_process_counted+0x22>
    2446:	6863      	ldr	r3, [r4, #4]
    2448:	1af3      	subs	r3, r6, r3
    244a:	68a2      	ldr	r2, [r4, #8]
    244c:	4293      	cmp	r3, r2
    244e:	d3f2      	bcc.n	2436 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    2450:	002f      	movs	r7, r5
    2452:	3714      	adds	r7, #20
    2454:	0038      	movs	r0, r7
    2456:	4b06      	ldr	r3, [pc, #24]	; (2470 <timer_process_counted+0x5c>)
    2458:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    245a:	7c23      	ldrb	r3, [r4, #16]
    245c:	2b01      	cmp	r3, #1
    245e:	d1eb      	bne.n	2438 <timer_process_counted+0x24>
			tmp->time_label = time;
    2460:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2462:	0032      	movs	r2, r6
    2464:	0021      	movs	r1, r4
    2466:	0038      	movs	r0, r7
    2468:	4b02      	ldr	r3, [pc, #8]	; (2474 <timer_process_counted+0x60>)
    246a:	4798      	blx	r3
    246c:	e7e4      	b.n	2438 <timer_process_counted+0x24>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	00002f01 	.word	0x00002f01
    2474:	000023bd 	.word	0x000023bd

00002478 <timer_init>:
{
    2478:	b570      	push	{r4, r5, r6, lr}
    247a:	0004      	movs	r4, r0
    247c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    247e:	2800      	cmp	r0, #0
    2480:	d012      	beq.n	24a8 <timer_init+0x30>
    2482:	2900      	cmp	r1, #0
    2484:	d00e      	beq.n	24a4 <timer_init+0x2c>
    2486:	2001      	movs	r0, #1
    2488:	223b      	movs	r2, #59	; 0x3b
    248a:	4908      	ldr	r1, [pc, #32]	; (24ac <timer_init+0x34>)
    248c:	4b08      	ldr	r3, [pc, #32]	; (24b0 <timer_init+0x38>)
    248e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2490:	0029      	movs	r1, r5
    2492:	0020      	movs	r0, r4
    2494:	4b07      	ldr	r3, [pc, #28]	; (24b4 <timer_init+0x3c>)
    2496:	4798      	blx	r3
	descr->time                           = 0;
    2498:	2300      	movs	r3, #0
    249a:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    249c:	4b06      	ldr	r3, [pc, #24]	; (24b8 <timer_init+0x40>)
    249e:	6023      	str	r3, [r4, #0]
}
    24a0:	2000      	movs	r0, #0
    24a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    24a4:	2000      	movs	r0, #0
    24a6:	e7ef      	b.n	2488 <timer_init+0x10>
    24a8:	2000      	movs	r0, #0
    24aa:	e7ed      	b.n	2488 <timer_init+0x10>
    24ac:	00010320 	.word	0x00010320
    24b0:	00002e6d 	.word	0x00002e6d
    24b4:	00003ba9 	.word	0x00003ba9
    24b8:	00002415 	.word	0x00002415

000024bc <timer_start>:
{
    24bc:	b510      	push	{r4, lr}
    24be:	0004      	movs	r4, r0
	ASSERT(descr);
    24c0:	1e43      	subs	r3, r0, #1
    24c2:	4198      	sbcs	r0, r3
    24c4:	b2c0      	uxtb	r0, r0
    24c6:	2253      	movs	r2, #83	; 0x53
    24c8:	4907      	ldr	r1, [pc, #28]	; (24e8 <timer_start+0x2c>)
    24ca:	4b08      	ldr	r3, [pc, #32]	; (24ec <timer_start+0x30>)
    24cc:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    24ce:	0020      	movs	r0, r4
    24d0:	4b07      	ldr	r3, [pc, #28]	; (24f0 <timer_start+0x34>)
    24d2:	4798      	blx	r3
    24d4:	2800      	cmp	r0, #0
    24d6:	d104      	bne.n	24e2 <timer_start+0x26>
	_timer_start(&descr->device);
    24d8:	0020      	movs	r0, r4
    24da:	4b06      	ldr	r3, [pc, #24]	; (24f4 <timer_start+0x38>)
    24dc:	4798      	blx	r3
	return ERR_NONE;
    24de:	2000      	movs	r0, #0
}
    24e0:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    24e2:	2011      	movs	r0, #17
    24e4:	4240      	negs	r0, r0
    24e6:	e7fb      	b.n	24e0 <timer_start+0x24>
    24e8:	00010320 	.word	0x00010320
    24ec:	00002e6d 	.word	0x00002e6d
    24f0:	00003ce7 	.word	0x00003ce7
    24f4:	00003ccd 	.word	0x00003ccd

000024f8 <timer_stop>:
{
    24f8:	b510      	push	{r4, lr}
    24fa:	0004      	movs	r4, r0
	ASSERT(descr);
    24fc:	1e43      	subs	r3, r0, #1
    24fe:	4198      	sbcs	r0, r3
    2500:	b2c0      	uxtb	r0, r0
    2502:	2261      	movs	r2, #97	; 0x61
    2504:	4907      	ldr	r1, [pc, #28]	; (2524 <timer_stop+0x2c>)
    2506:	4b08      	ldr	r3, [pc, #32]	; (2528 <timer_stop+0x30>)
    2508:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    250a:	0020      	movs	r0, r4
    250c:	4b07      	ldr	r3, [pc, #28]	; (252c <timer_stop+0x34>)
    250e:	4798      	blx	r3
    2510:	2800      	cmp	r0, #0
    2512:	d004      	beq.n	251e <timer_stop+0x26>
	_timer_stop(&descr->device);
    2514:	0020      	movs	r0, r4
    2516:	4b06      	ldr	r3, [pc, #24]	; (2530 <timer_stop+0x38>)
    2518:	4798      	blx	r3
	return ERR_NONE;
    251a:	2000      	movs	r0, #0
}
    251c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    251e:	2011      	movs	r0, #17
    2520:	4240      	negs	r0, r0
    2522:	e7fb      	b.n	251c <timer_stop+0x24>
    2524:	00010320 	.word	0x00010320
    2528:	00002e6d 	.word	0x00002e6d
    252c:	00003ce7 	.word	0x00003ce7
    2530:	00003cdb 	.word	0x00003cdb

00002534 <timer_add_task>:
{
    2534:	b570      	push	{r4, r5, r6, lr}
    2536:	b082      	sub	sp, #8
    2538:	0004      	movs	r4, r0
    253a:	000d      	movs	r5, r1
	ASSERT(descr && task);
    253c:	2800      	cmp	r0, #0
    253e:	d026      	beq.n	258e <timer_add_task+0x5a>
    2540:	2900      	cmp	r1, #0
    2542:	d022      	beq.n	258a <timer_add_task+0x56>
    2544:	2001      	movs	r0, #1
    2546:	227a      	movs	r2, #122	; 0x7a
    2548:	491f      	ldr	r1, [pc, #124]	; (25c8 <timer_add_task+0x94>)
    254a:	4b20      	ldr	r3, [pc, #128]	; (25cc <timer_add_task+0x98>)
    254c:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    254e:	7e23      	ldrb	r3, [r4, #24]
    2550:	2201      	movs	r2, #1
    2552:	4313      	orrs	r3, r2
    2554:	b2db      	uxtb	r3, r3
    2556:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    2558:	0026      	movs	r6, r4
    255a:	3614      	adds	r6, #20
    255c:	0029      	movs	r1, r5
    255e:	0030      	movs	r0, r6
    2560:	4b1b      	ldr	r3, [pc, #108]	; (25d0 <timer_add_task+0x9c>)
    2562:	4798      	blx	r3
    2564:	2800      	cmp	r0, #0
    2566:	d114      	bne.n	2592 <timer_add_task+0x5e>
	task->time_label = descr->time;
    2568:	6923      	ldr	r3, [r4, #16]
    256a:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    256c:	6922      	ldr	r2, [r4, #16]
    256e:	0029      	movs	r1, r5
    2570:	0030      	movs	r0, r6
    2572:	4b18      	ldr	r3, [pc, #96]	; (25d4 <timer_add_task+0xa0>)
    2574:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2576:	7e23      	ldrb	r3, [r4, #24]
    2578:	2201      	movs	r2, #1
    257a:	4393      	bics	r3, r2
    257c:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    257e:	7e23      	ldrb	r3, [r4, #24]
    2580:	079b      	lsls	r3, r3, #30
    2582:	d412      	bmi.n	25aa <timer_add_task+0x76>
	return ERR_NONE;
    2584:	2000      	movs	r0, #0
}
    2586:	b002      	add	sp, #8
    2588:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    258a:	2000      	movs	r0, #0
    258c:	e7db      	b.n	2546 <timer_add_task+0x12>
    258e:	2000      	movs	r0, #0
    2590:	e7d9      	b.n	2546 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2592:	7e23      	ldrb	r3, [r4, #24]
    2594:	2201      	movs	r2, #1
    2596:	4393      	bics	r3, r2
    2598:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    259a:	327e      	adds	r2, #126	; 0x7e
    259c:	490a      	ldr	r1, [pc, #40]	; (25c8 <timer_add_task+0x94>)
    259e:	2000      	movs	r0, #0
    25a0:	4b0a      	ldr	r3, [pc, #40]	; (25cc <timer_add_task+0x98>)
    25a2:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    25a4:	2012      	movs	r0, #18
    25a6:	4240      	negs	r0, r0
    25a8:	e7ed      	b.n	2586 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    25aa:	a801      	add	r0, sp, #4
    25ac:	4b0a      	ldr	r3, [pc, #40]	; (25d8 <timer_add_task+0xa4>)
    25ae:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    25b0:	7e23      	ldrb	r3, [r4, #24]
    25b2:	2202      	movs	r2, #2
    25b4:	4393      	bics	r3, r2
    25b6:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    25b8:	0020      	movs	r0, r4
    25ba:	4b08      	ldr	r3, [pc, #32]	; (25dc <timer_add_task+0xa8>)
    25bc:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    25be:	a801      	add	r0, sp, #4
    25c0:	4b07      	ldr	r3, [pc, #28]	; (25e0 <timer_add_task+0xac>)
    25c2:	4798      	blx	r3
	return ERR_NONE;
    25c4:	2000      	movs	r0, #0
    25c6:	e7de      	b.n	2586 <timer_add_task+0x52>
    25c8:	00010320 	.word	0x00010320
    25cc:	00002e6d 	.word	0x00002e6d
    25d0:	00002e75 	.word	0x00002e75
    25d4:	000023bd 	.word	0x000023bd
    25d8:	00001f19 	.word	0x00001f19
    25dc:	00003cf9 	.word	0x00003cf9
    25e0:	00001f27 	.word	0x00001f27

000025e4 <timer_remove_task>:
{
    25e4:	b570      	push	{r4, r5, r6, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	0004      	movs	r4, r0
    25ea:	000d      	movs	r5, r1
	ASSERT(descr && task);
    25ec:	2800      	cmp	r0, #0
    25ee:	d023      	beq.n	2638 <timer_remove_task+0x54>
    25f0:	2900      	cmp	r1, #0
    25f2:	d01f      	beq.n	2634 <timer_remove_task+0x50>
    25f4:	2001      	movs	r0, #1
    25f6:	2295      	movs	r2, #149	; 0x95
    25f8:	491d      	ldr	r1, [pc, #116]	; (2670 <timer_remove_task+0x8c>)
    25fa:	4b1e      	ldr	r3, [pc, #120]	; (2674 <timer_remove_task+0x90>)
    25fc:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    25fe:	7e23      	ldrb	r3, [r4, #24]
    2600:	2201      	movs	r2, #1
    2602:	4313      	orrs	r3, r2
    2604:	b2db      	uxtb	r3, r3
    2606:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2608:	0026      	movs	r6, r4
    260a:	3614      	adds	r6, #20
    260c:	0029      	movs	r1, r5
    260e:	0030      	movs	r0, r6
    2610:	4b19      	ldr	r3, [pc, #100]	; (2678 <timer_remove_task+0x94>)
    2612:	4798      	blx	r3
    2614:	2800      	cmp	r0, #0
    2616:	d011      	beq.n	263c <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
    2618:	0029      	movs	r1, r5
    261a:	0030      	movs	r0, r6
    261c:	4b17      	ldr	r3, [pc, #92]	; (267c <timer_remove_task+0x98>)
    261e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2620:	7e23      	ldrb	r3, [r4, #24]
    2622:	2201      	movs	r2, #1
    2624:	4393      	bics	r3, r2
    2626:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2628:	7e23      	ldrb	r3, [r4, #24]
    262a:	079b      	lsls	r3, r3, #30
    262c:	d411      	bmi.n	2652 <timer_remove_task+0x6e>
	return ERR_NONE;
    262e:	2000      	movs	r0, #0
}
    2630:	b002      	add	sp, #8
    2632:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2634:	2000      	movs	r0, #0
    2636:	e7de      	b.n	25f6 <timer_remove_task+0x12>
    2638:	2000      	movs	r0, #0
    263a:	e7dc      	b.n	25f6 <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    263c:	7e23      	ldrb	r3, [r4, #24]
    263e:	2201      	movs	r2, #1
    2640:	4393      	bics	r3, r2
    2642:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2644:	3299      	adds	r2, #153	; 0x99
    2646:	490a      	ldr	r1, [pc, #40]	; (2670 <timer_remove_task+0x8c>)
    2648:	4b0a      	ldr	r3, [pc, #40]	; (2674 <timer_remove_task+0x90>)
    264a:	4798      	blx	r3
		return ERR_NOT_FOUND;
    264c:	200a      	movs	r0, #10
    264e:	4240      	negs	r0, r0
    2650:	e7ee      	b.n	2630 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    2652:	a801      	add	r0, sp, #4
    2654:	4b0a      	ldr	r3, [pc, #40]	; (2680 <timer_remove_task+0x9c>)
    2656:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2658:	7e23      	ldrb	r3, [r4, #24]
    265a:	2202      	movs	r2, #2
    265c:	4393      	bics	r3, r2
    265e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2660:	0020      	movs	r0, r4
    2662:	4b08      	ldr	r3, [pc, #32]	; (2684 <timer_remove_task+0xa0>)
    2664:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2666:	a801      	add	r0, sp, #4
    2668:	4b07      	ldr	r3, [pc, #28]	; (2688 <timer_remove_task+0xa4>)
    266a:	4798      	blx	r3
	return ERR_NONE;
    266c:	2000      	movs	r0, #0
    266e:	e7df      	b.n	2630 <timer_remove_task+0x4c>
    2670:	00010320 	.word	0x00010320
    2674:	00002e6d 	.word	0x00002e6d
    2678:	00002e75 	.word	0x00002e75
    267c:	00002f13 	.word	0x00002f13
    2680:	00001f19 	.word	0x00001f19
    2684:	00003cf9 	.word	0x00003cf9
    2688:	00001f27 	.word	0x00001f27

0000268c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    268c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    268e:	3808      	subs	r0, #8

	descr->stat = 0;
    2690:	2300      	movs	r3, #0
    2692:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    2694:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2696:	2b00      	cmp	r3, #0
    2698:	d000      	beq.n	269c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    269a:	4798      	blx	r3
	}
}
    269c:	bd10      	pop	{r4, pc}

0000269e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    269e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    26a0:	3808      	subs	r0, #8

	descr->stat = 0;
    26a2:	2300      	movs	r3, #0
    26a4:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    26a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    26a8:	2b00      	cmp	r3, #0
    26aa:	d000      	beq.n	26ae <usart_error+0x10>
		descr->usart_cb.error(descr);
    26ac:	4798      	blx	r3
	}
}
    26ae:	bd10      	pop	{r4, pc}

000026b0 <usart_fill_rx_buffer>:
{
    26b0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    26b2:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    26b4:	302c      	adds	r0, #44	; 0x2c
    26b6:	4b04      	ldr	r3, [pc, #16]	; (26c8 <usart_fill_rx_buffer+0x18>)
    26b8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    26ba:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    26bc:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    26be:	2b00      	cmp	r3, #0
    26c0:	d001      	beq.n	26c6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    26c2:	0020      	movs	r0, r4
    26c4:	4798      	blx	r3
}
    26c6:	bd10      	pop	{r4, pc}
    26c8:	00002fdd 	.word	0x00002fdd

000026cc <usart_async_write>:
{
    26cc:	b570      	push	{r4, r5, r6, lr}
    26ce:	0004      	movs	r4, r0
    26d0:	000e      	movs	r6, r1
    26d2:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    26d4:	2800      	cmp	r0, #0
    26d6:	d01d      	beq.n	2714 <usart_async_write+0x48>
    26d8:	2900      	cmp	r1, #0
    26da:	d01d      	beq.n	2718 <usart_async_write+0x4c>
    26dc:	2a00      	cmp	r2, #0
    26de:	d11d      	bne.n	271c <usart_async_write+0x50>
    26e0:	2000      	movs	r0, #0
    26e2:	223c      	movs	r2, #60	; 0x3c
    26e4:	32ff      	adds	r2, #255	; 0xff
    26e6:	4910      	ldr	r1, [pc, #64]	; (2728 <usart_async_write+0x5c>)
    26e8:	4b10      	ldr	r3, [pc, #64]	; (272c <usart_async_write+0x60>)
    26ea:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    26ec:	2344      	movs	r3, #68	; 0x44
    26ee:	5ae2      	ldrh	r2, [r4, r3]
    26f0:	3308      	adds	r3, #8
    26f2:	5ae3      	ldrh	r3, [r4, r3]
    26f4:	429a      	cmp	r2, r3
    26f6:	d113      	bne.n	2720 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    26f8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    26fa:	234c      	movs	r3, #76	; 0x4c
    26fc:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    26fe:	2200      	movs	r2, #0
    2700:	3b08      	subs	r3, #8
    2702:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    2704:	3b43      	subs	r3, #67	; 0x43
    2706:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    2708:	0020      	movs	r0, r4
    270a:	3008      	adds	r0, #8
    270c:	4b08      	ldr	r3, [pc, #32]	; (2730 <usart_async_write+0x64>)
    270e:	4798      	blx	r3
	return (int32_t)length;
    2710:	0028      	movs	r0, r5
}
    2712:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    2714:	2000      	movs	r0, #0
    2716:	e7e4      	b.n	26e2 <usart_async_write+0x16>
    2718:	2000      	movs	r0, #0
    271a:	e7e2      	b.n	26e2 <usart_async_write+0x16>
    271c:	2001      	movs	r0, #1
    271e:	e7e0      	b.n	26e2 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    2720:	201c      	movs	r0, #28
    2722:	4240      	negs	r0, r0
    2724:	e7f5      	b.n	2712 <usart_async_write+0x46>
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	00010338 	.word	0x00010338
    272c:	00002e6d 	.word	0x00002e6d
    2730:	00003649 	.word	0x00003649

00002734 <usart_process_byte_sent>:
{
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    2738:	0002      	movs	r2, r0
    273a:	3a08      	subs	r2, #8
    273c:	2344      	movs	r3, #68	; 0x44
    273e:	5ad3      	ldrh	r3, [r2, r3]
    2740:	214c      	movs	r1, #76	; 0x4c
    2742:	5a52      	ldrh	r2, [r2, r1]
    2744:	4293      	cmp	r3, r2
    2746:	d00d      	beq.n	2764 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    2748:	0002      	movs	r2, r0
    274a:	6c01      	ldr	r1, [r0, #64]	; 0x40
    274c:	3a08      	subs	r2, #8
    274e:	1c5d      	adds	r5, r3, #1
    2750:	2044      	movs	r0, #68	; 0x44
    2752:	5215      	strh	r5, [r2, r0]
    2754:	5cc9      	ldrb	r1, [r1, r3]
    2756:	0020      	movs	r0, r4
    2758:	4b04      	ldr	r3, [pc, #16]	; (276c <usart_process_byte_sent+0x38>)
    275a:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    275c:	0020      	movs	r0, r4
    275e:	4b04      	ldr	r3, [pc, #16]	; (2770 <usart_process_byte_sent+0x3c>)
    2760:	4798      	blx	r3
}
    2762:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    2764:	4b03      	ldr	r3, [pc, #12]	; (2774 <usart_process_byte_sent+0x40>)
    2766:	4798      	blx	r3
}
    2768:	e7fb      	b.n	2762 <usart_process_byte_sent+0x2e>
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	00003641 	.word	0x00003641
    2770:	00003649 	.word	0x00003649
    2774:	00003651 	.word	0x00003651

00002778 <usart_async_read>:
{
    2778:	b5f0      	push	{r4, r5, r6, r7, lr}
    277a:	b085      	sub	sp, #20
    277c:	0004      	movs	r4, r0
    277e:	000d      	movs	r5, r1
    2780:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    2782:	2800      	cmp	r0, #0
    2784:	d017      	beq.n	27b6 <usart_async_read+0x3e>
    2786:	2900      	cmp	r1, #0
    2788:	d017      	beq.n	27ba <usart_async_read+0x42>
    278a:	2a00      	cmp	r2, #0
    278c:	d117      	bne.n	27be <usart_async_read+0x46>
    278e:	2000      	movs	r0, #0
    2790:	22ac      	movs	r2, #172	; 0xac
    2792:	0052      	lsls	r2, r2, #1
    2794:	4912      	ldr	r1, [pc, #72]	; (27e0 <usart_async_read+0x68>)
    2796:	4b13      	ldr	r3, [pc, #76]	; (27e4 <usart_async_read+0x6c>)
    2798:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    279a:	a803      	add	r0, sp, #12
    279c:	4b12      	ldr	r3, [pc, #72]	; (27e8 <usart_async_read+0x70>)
    279e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    27a0:	3434      	adds	r4, #52	; 0x34
    27a2:	0020      	movs	r0, r4
    27a4:	9401      	str	r4, [sp, #4]
    27a6:	4b11      	ldr	r3, [pc, #68]	; (27ec <usart_async_read+0x74>)
    27a8:	4798      	blx	r3
    27aa:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    27ac:	a803      	add	r0, sp, #12
    27ae:	4b10      	ldr	r3, [pc, #64]	; (27f0 <usart_async_read+0x78>)
    27b0:	4798      	blx	r3
	uint16_t                       was_read = 0;
    27b2:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    27b4:	e00b      	b.n	27ce <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    27b6:	2000      	movs	r0, #0
    27b8:	e7ea      	b.n	2790 <usart_async_read+0x18>
    27ba:	2000      	movs	r0, #0
    27bc:	e7e8      	b.n	2790 <usart_async_read+0x18>
    27be:	2001      	movs	r0, #1
    27c0:	e7e6      	b.n	2790 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    27c2:	3401      	adds	r4, #1
    27c4:	b2a4      	uxth	r4, r4
    27c6:	1869      	adds	r1, r5, r1
    27c8:	9801      	ldr	r0, [sp, #4]
    27ca:	4b0a      	ldr	r3, [pc, #40]	; (27f4 <usart_async_read+0x7c>)
    27cc:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    27ce:	0021      	movs	r1, r4
    27d0:	42a7      	cmp	r7, r4
    27d2:	d901      	bls.n	27d8 <usart_async_read+0x60>
    27d4:	42b4      	cmp	r4, r6
    27d6:	d3f4      	bcc.n	27c2 <usart_async_read+0x4a>
}
    27d8:	0020      	movs	r0, r4
    27da:	b005      	add	sp, #20
    27dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	00010338 	.word	0x00010338
    27e4:	00002e6d 	.word	0x00002e6d
    27e8:	00001f19 	.word	0x00001f19
    27ec:	0000301d 	.word	0x0000301d
    27f0:	00001f27 	.word	0x00001f27
    27f4:	00002f91 	.word	0x00002f91

000027f8 <usart_async_init>:
{
    27f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27fa:	0004      	movs	r4, r0
    27fc:	000d      	movs	r5, r1
    27fe:	0016      	movs	r6, r2
    2800:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2802:	2800      	cmp	r0, #0
    2804:	d026      	beq.n	2854 <usart_async_init+0x5c>
    2806:	2900      	cmp	r1, #0
    2808:	d026      	beq.n	2858 <usart_async_init+0x60>
    280a:	2a00      	cmp	r2, #0
    280c:	d026      	beq.n	285c <usart_async_init+0x64>
    280e:	2b00      	cmp	r3, #0
    2810:	d126      	bne.n	2860 <usart_async_init+0x68>
    2812:	2000      	movs	r0, #0
    2814:	223a      	movs	r2, #58	; 0x3a
    2816:	4915      	ldr	r1, [pc, #84]	; (286c <usart_async_init+0x74>)
    2818:	4b15      	ldr	r3, [pc, #84]	; (2870 <usart_async_init+0x78>)
    281a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    281c:	0020      	movs	r0, r4
    281e:	3034      	adds	r0, #52	; 0x34
    2820:	003a      	movs	r2, r7
    2822:	0031      	movs	r1, r6
    2824:	4b13      	ldr	r3, [pc, #76]	; (2874 <usart_async_init+0x7c>)
    2826:	4798      	blx	r3
    2828:	2800      	cmp	r0, #0
    282a:	d11b      	bne.n	2864 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    282c:	0020      	movs	r0, r4
    282e:	3008      	adds	r0, #8
    2830:	0029      	movs	r1, r5
    2832:	4b11      	ldr	r3, [pc, #68]	; (2878 <usart_async_init+0x80>)
    2834:	4798      	blx	r3
	if (init_status) {
    2836:	2800      	cmp	r0, #0
    2838:	d10b      	bne.n	2852 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    283a:	4b10      	ldr	r3, [pc, #64]	; (287c <usart_async_init+0x84>)
    283c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    283e:	4b10      	ldr	r3, [pc, #64]	; (2880 <usart_async_init+0x88>)
    2840:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    2842:	4b10      	ldr	r3, [pc, #64]	; (2884 <usart_async_init+0x8c>)
    2844:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2846:	4b10      	ldr	r3, [pc, #64]	; (2888 <usart_async_init+0x90>)
    2848:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    284a:	4b10      	ldr	r3, [pc, #64]	; (288c <usart_async_init+0x94>)
    284c:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    284e:	4b10      	ldr	r3, [pc, #64]	; (2890 <usart_async_init+0x98>)
    2850:	6163      	str	r3, [r4, #20]
}
    2852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2854:	2000      	movs	r0, #0
    2856:	e7dd      	b.n	2814 <usart_async_init+0x1c>
    2858:	2000      	movs	r0, #0
    285a:	e7db      	b.n	2814 <usart_async_init+0x1c>
    285c:	2000      	movs	r0, #0
    285e:	e7d9      	b.n	2814 <usart_async_init+0x1c>
    2860:	2001      	movs	r0, #1
    2862:	e7d7      	b.n	2814 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    2864:	200d      	movs	r0, #13
    2866:	4240      	negs	r0, r0
    2868:	e7f3      	b.n	2852 <usart_async_init+0x5a>
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	00010338 	.word	0x00010338
    2870:	00002e6d 	.word	0x00002e6d
    2874:	00002f45 	.word	0x00002f45
    2878:	000035b5 	.word	0x000035b5
    287c:	00002779 	.word	0x00002779
    2880:	000026cd 	.word	0x000026cd
    2884:	00002735 	.word	0x00002735
    2888:	000026b1 	.word	0x000026b1
    288c:	0000268d 	.word	0x0000268d
    2890:	0000269f 	.word	0x0000269f

00002894 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2894:	b510      	push	{r4, lr}
    2896:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2898:	2000      	movs	r0, #0
    289a:	e001      	b.n	28a0 <_usb_d_find_ep+0xc>
    289c:	3001      	adds	r0, #1
    289e:	b240      	sxtb	r0, r0
    28a0:	2803      	cmp	r0, #3
    28a2:	dc0f      	bgt.n	28c4 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    28a4:	0142      	lsls	r2, r0, #5
    28a6:	4b09      	ldr	r3, [pc, #36]	; (28cc <_usb_d_find_ep+0x38>)
    28a8:	189b      	adds	r3, r3, r2
    28aa:	785a      	ldrb	r2, [r3, #1]
    28ac:	428a      	cmp	r2, r1
    28ae:	d00b      	beq.n	28c8 <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    28b0:	0143      	lsls	r3, r0, #5
    28b2:	4c06      	ldr	r4, [pc, #24]	; (28cc <_usb_d_find_ep+0x38>)
    28b4:	5d1b      	ldrb	r3, [r3, r4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d1f0      	bne.n	289c <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    28ba:	330f      	adds	r3, #15
    28bc:	400b      	ands	r3, r1
    28be:	4293      	cmp	r3, r2
    28c0:	d1ec      	bne.n	289c <_usb_d_find_ep+0x8>
    28c2:	e001      	b.n	28c8 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    28c4:	2001      	movs	r0, #1
    28c6:	4240      	negs	r0, r0
}
    28c8:	bd10      	pop	{r4, pc}
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	20000e74 	.word	0x20000e74

000028d0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    28d0:	2000      	movs	r0, #0
    28d2:	4770      	bx	lr

000028d4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    28d4:	b570      	push	{r4, r5, r6, lr}
    28d6:	0004      	movs	r4, r0
    28d8:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    28da:	4b08      	ldr	r3, [pc, #32]	; (28fc <usb_d_cb_trans_more+0x28>)
    28dc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    28de:	0142      	lsls	r2, r0, #5
    28e0:	4b07      	ldr	r3, [pc, #28]	; (2900 <usb_d_cb_trans_more+0x2c>)
    28e2:	189b      	adds	r3, r3, r2
    28e4:	789b      	ldrb	r3, [r3, #2]
    28e6:	2b03      	cmp	r3, #3
    28e8:	d001      	beq.n	28ee <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    28ea:	2000      	movs	r0, #0
}
    28ec:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    28ee:	4b04      	ldr	r3, [pc, #16]	; (2900 <usb_d_cb_trans_more+0x2c>)
    28f0:	1898      	adds	r0, r3, r2
    28f2:	6983      	ldr	r3, [r0, #24]
    28f4:	0029      	movs	r1, r5
    28f6:	0020      	movs	r0, r4
    28f8:	4798      	blx	r3
    28fa:	e7f7      	b.n	28ec <usb_d_cb_trans_more+0x18>
    28fc:	00002895 	.word	0x00002895
    2900:	20000e74 	.word	0x20000e74

00002904 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2904:	b5f0      	push	{r4, r5, r6, r7, lr}
    2906:	b087      	sub	sp, #28
    2908:	0005      	movs	r5, r0
    290a:	000f      	movs	r7, r1
    290c:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    290e:	4b4a      	ldr	r3, [pc, #296]	; (2a38 <_usb_d_cb_trans_done+0x134>)
    2910:	4798      	blx	r3
    2912:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2914:	0146      	lsls	r6, r0, #5
    2916:	4a49      	ldr	r2, [pc, #292]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    2918:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
    291a:	2f00      	cmp	r7, #0
    291c:	d151      	bne.n	29c2 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
    291e:	0013      	movs	r3, r2
    2920:	0142      	lsls	r2, r0, #5
    2922:	2000      	movs	r0, #0
    2924:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2926:	5cd3      	ldrb	r3, [r2, r3]
    2928:	2b00      	cmp	r3, #0
    292a:	d00e      	beq.n	294a <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    292c:	0162      	lsls	r2, r4, #5
    292e:	4b43      	ldr	r3, [pc, #268]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    2930:	189b      	adds	r3, r3, r2
    2932:	2201      	movs	r2, #1
    2934:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2936:	0164      	lsls	r4, r4, #5
    2938:	4b40      	ldr	r3, [pc, #256]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    293a:	191c      	adds	r4, r3, r4
    293c:	69e3      	ldr	r3, [r4, #28]
    293e:	78e1      	ldrb	r1, [r4, #3]
    2940:	9a01      	ldr	r2, [sp, #4]
    2942:	0028      	movs	r0, r5
    2944:	4798      	blx	r3
}
    2946:	b007      	add	sp, #28
    2948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
    294a:	78b3      	ldrb	r3, [r6, #2]
    294c:	240c      	movs	r4, #12
    294e:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
    2950:	2b03      	cmp	r3, #3
    2952:	d008      	beq.n	2966 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2954:	0032      	movs	r2, r6
    2956:	320c      	adds	r2, #12
    2958:	7870      	ldrb	r0, [r6, #1]
    295a:	2100      	movs	r1, #0
    295c:	69f3      	ldr	r3, [r6, #28]
    295e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2960:	2302      	movs	r3, #2
    2962:	70b3      	strb	r3, [r6, #2]
    2964:	e7ef      	b.n	2946 <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2966:	7870      	ldrb	r0, [r6, #1]
    2968:	0032      	movs	r2, r6
    296a:	320c      	adds	r2, #12
    296c:	2101      	movs	r1, #1
    296e:	69f3      	ldr	r3, [r6, #28]
    2970:	4798      	blx	r3
		if (err) {
    2972:	2800      	cmp	r0, #0
    2974:	d010      	beq.n	2998 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2976:	2305      	movs	r3, #5
    2978:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    297a:	3b03      	subs	r3, #3
    297c:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    297e:	2c00      	cmp	r4, #0
    2980:	db08      	blt.n	2994 <_usb_d_cb_trans_done+0x90>
    2982:	7873      	ldrb	r3, [r6, #1]
    2984:	2080      	movs	r0, #128	; 0x80
    2986:	4240      	negs	r0, r0
    2988:	4318      	orrs	r0, r3
    298a:	b2c0      	uxtb	r0, r0
    298c:	2101      	movs	r1, #1
    298e:	4b2c      	ldr	r3, [pc, #176]	; (2a40 <_usb_d_cb_trans_done+0x13c>)
    2990:	4798      	blx	r3
    2992:	e7d8      	b.n	2946 <_usb_d_cb_trans_done+0x42>
    2994:	7870      	ldrb	r0, [r6, #1]
    2996:	e7f9      	b.n	298c <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2998:	2304      	movs	r3, #4
    299a:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    299c:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
    299e:	2200      	movs	r2, #0
    29a0:	9203      	str	r2, [sp, #12]
    29a2:	9204      	str	r2, [sp, #16]
    29a4:	2c00      	cmp	r4, #0
    29a6:	db09      	blt.n	29bc <_usb_d_cb_trans_done+0xb8>
    29a8:	3b84      	subs	r3, #132	; 0x84
    29aa:	430b      	orrs	r3, r1
    29ac:	b2da      	uxtb	r2, r3
    29ae:	a803      	add	r0, sp, #12
    29b0:	7202      	strb	r2, [r0, #8]
    29b2:	2301      	movs	r3, #1
    29b4:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    29b6:	4b23      	ldr	r3, [pc, #140]	; (2a44 <_usb_d_cb_trans_done+0x140>)
    29b8:	4798      	blx	r3
    29ba:	e7c4      	b.n	2946 <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
    29bc:	220f      	movs	r2, #15
    29be:	400a      	ands	r2, r1
    29c0:	e7f5      	b.n	29ae <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
    29c2:	2f01      	cmp	r7, #1
    29c4:	d00a      	beq.n	29dc <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
    29c6:	2f02      	cmp	r7, #2
    29c8:	d01d      	beq.n	2a06 <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
    29ca:	2f03      	cmp	r7, #3
    29cc:	d02c      	beq.n	2a28 <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    29ce:	0142      	lsls	r2, r0, #5
    29d0:	4b1a      	ldr	r3, [pc, #104]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    29d2:	189b      	adds	r3, r3, r2
    29d4:	2206      	movs	r2, #6
    29d6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    29d8:	70da      	strb	r2, [r3, #3]
    29da:	e7ac      	b.n	2936 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
    29dc:	4b17      	ldr	r3, [pc, #92]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    29de:	0142      	lsls	r2, r0, #5
    29e0:	1899      	adds	r1, r3, r2
    29e2:	2002      	movs	r0, #2
    29e4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    29e6:	5cd3      	ldrb	r3, [r2, r3]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d005      	beq.n	29f8 <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    29ec:	0162      	lsls	r2, r4, #5
    29ee:	4b13      	ldr	r3, [pc, #76]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    29f0:	189b      	adds	r3, r3, r2
    29f2:	2205      	movs	r2, #5
    29f4:	709a      	strb	r2, [r3, #2]
    29f6:	e79e      	b.n	2936 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    29f8:	2202      	movs	r2, #2
    29fa:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    29fc:	2100      	movs	r1, #0
    29fe:	0028      	movs	r0, r5
    2a00:	4b0f      	ldr	r3, [pc, #60]	; (2a40 <_usb_d_cb_trans_done+0x13c>)
    2a02:	4798      	blx	r3
    2a04:	e797      	b.n	2936 <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2a06:	4b0d      	ldr	r3, [pc, #52]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    2a08:	0142      	lsls	r2, r0, #5
    2a0a:	1899      	adds	r1, r3, r2
    2a0c:	2004      	movs	r0, #4
    2a0e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2a10:	5cd3      	ldrb	r3, [r2, r3]
    2a12:	2b00      	cmp	r3, #0
    2a14:	d005      	beq.n	2a22 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2a16:	0162      	lsls	r2, r4, #5
    2a18:	4b08      	ldr	r3, [pc, #32]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    2a1a:	189b      	adds	r3, r3, r2
    2a1c:	2201      	movs	r2, #1
    2a1e:	709a      	strb	r2, [r3, #2]
    2a20:	e789      	b.n	2936 <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2a22:	2302      	movs	r3, #2
    2a24:	708b      	strb	r3, [r1, #2]
			return;
    2a26:	e78e      	b.n	2946 <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2a28:	0142      	lsls	r2, r0, #5
    2a2a:	4b04      	ldr	r3, [pc, #16]	; (2a3c <_usb_d_cb_trans_done+0x138>)
    2a2c:	189b      	adds	r3, r3, r2
    2a2e:	2200      	movs	r2, #0
    2a30:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2a32:	3205      	adds	r2, #5
    2a34:	70da      	strb	r2, [r3, #3]
    2a36:	e77e      	b.n	2936 <_usb_d_cb_trans_done+0x32>
    2a38:	00002895 	.word	0x00002895
    2a3c:	20000e74 	.word	0x20000e74
    2a40:	00004c81 	.word	0x00004c81
    2a44:	00004e51 	.word	0x00004e51

00002a48 <usb_d_cb_trans_setup>:
{
    2a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a4a:	46c6      	mov	lr, r8
    2a4c:	b500      	push	{lr}
    2a4e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a50:	4b1f      	ldr	r3, [pc, #124]	; (2ad0 <usb_d_cb_trans_setup+0x88>)
    2a52:	4798      	blx	r3
    2a54:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2a56:	0143      	lsls	r3, r0, #5
    2a58:	3308      	adds	r3, #8
    2a5a:	4c1e      	ldr	r4, [pc, #120]	; (2ad4 <usb_d_cb_trans_setup+0x8c>)
    2a5c:	18e4      	adds	r4, r4, r3
    2a5e:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2a60:	0021      	movs	r1, r4
    2a62:	0028      	movs	r0, r5
    2a64:	4b1c      	ldr	r3, [pc, #112]	; (2ad8 <usb_d_cb_trans_setup+0x90>)
    2a66:	4798      	blx	r3
    2a68:	b2c0      	uxtb	r0, r0
	if (n != 8) {
    2a6a:	2808      	cmp	r0, #8
    2a6c:	d00c      	beq.n	2a88 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2a6e:	2101      	movs	r1, #1
    2a70:	0028      	movs	r0, r5
    2a72:	4c1a      	ldr	r4, [pc, #104]	; (2adc <usb_d_cb_trans_setup+0x94>)
    2a74:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2a76:	2080      	movs	r0, #128	; 0x80
    2a78:	4240      	negs	r0, r0
    2a7a:	4328      	orrs	r0, r5
    2a7c:	b2c0      	uxtb	r0, r0
    2a7e:	2101      	movs	r1, #1
    2a80:	47a0      	blx	r4
}
    2a82:	bc04      	pop	{r2}
    2a84:	4690      	mov	r8, r2
    2a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2a88:	2100      	movs	r1, #0
    2a8a:	0028      	movs	r0, r5
    2a8c:	4b13      	ldr	r3, [pc, #76]	; (2adc <usb_d_cb_trans_setup+0x94>)
    2a8e:	4698      	mov	r8, r3
    2a90:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2a92:	2780      	movs	r7, #128	; 0x80
    2a94:	427f      	negs	r7, r7
    2a96:	432f      	orrs	r7, r5
    2a98:	b2ff      	uxtb	r7, r7
    2a9a:	2100      	movs	r1, #0
    2a9c:	0038      	movs	r0, r7
    2a9e:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2aa0:	0172      	lsls	r2, r6, #5
    2aa2:	4b0c      	ldr	r3, [pc, #48]	; (2ad4 <usb_d_cb_trans_setup+0x8c>)
    2aa4:	189b      	adds	r3, r3, r2
    2aa6:	2201      	movs	r2, #1
    2aa8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2aaa:	695b      	ldr	r3, [r3, #20]
    2aac:	0021      	movs	r1, r4
    2aae:	0028      	movs	r0, r5
    2ab0:	4798      	blx	r3
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d1e5      	bne.n	2a82 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ab6:	0176      	lsls	r6, r6, #5
    2ab8:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <usb_d_cb_trans_setup+0x8c>)
    2aba:	199e      	adds	r6, r3, r6
    2abc:	2305      	movs	r3, #5
    2abe:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2ac0:	2101      	movs	r1, #1
    2ac2:	0028      	movs	r0, r5
    2ac4:	4c05      	ldr	r4, [pc, #20]	; (2adc <usb_d_cb_trans_setup+0x94>)
    2ac6:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2ac8:	2101      	movs	r1, #1
    2aca:	0038      	movs	r0, r7
    2acc:	47a0      	blx	r4
    2ace:	e7d8      	b.n	2a82 <usb_d_cb_trans_setup+0x3a>
    2ad0:	00002895 	.word	0x00002895
    2ad4:	20000e74 	.word	0x20000e74
    2ad8:	00004dd9 	.word	0x00004dd9
    2adc:	00004c81 	.word	0x00004c81

00002ae0 <usb_d_init>:

int32_t usb_d_init(void)
{
    2ae0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2ae2:	4b12      	ldr	r3, [pc, #72]	; (2b2c <usb_d_init+0x4c>)
    2ae4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    2ae6:	2800      	cmp	r0, #0
    2ae8:	db1e      	blt.n	2b28 <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2aea:	2280      	movs	r2, #128	; 0x80
    2aec:	2100      	movs	r1, #0
    2aee:	4810      	ldr	r0, [pc, #64]	; (2b30 <usb_d_init+0x50>)
    2af0:	4b10      	ldr	r3, [pc, #64]	; (2b34 <usb_d_init+0x54>)
    2af2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2af4:	2200      	movs	r2, #0
    2af6:	e00a      	b.n	2b0e <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2af8:	0151      	lsls	r1, r2, #5
    2afa:	4b0d      	ldr	r3, [pc, #52]	; (2b30 <usb_d_init+0x50>)
    2afc:	185b      	adds	r3, r3, r1
    2afe:	21ff      	movs	r1, #255	; 0xff
    2b00:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2b02:	490d      	ldr	r1, [pc, #52]	; (2b38 <usb_d_init+0x58>)
    2b04:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2b06:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2b08:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b0a:	3201      	adds	r2, #1
    2b0c:	b2d2      	uxtb	r2, r2
    2b0e:	2a03      	cmp	r2, #3
    2b10:	d9f2      	bls.n	2af8 <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2b12:	490a      	ldr	r1, [pc, #40]	; (2b3c <usb_d_init+0x5c>)
    2b14:	2000      	movs	r0, #0
    2b16:	4c0a      	ldr	r4, [pc, #40]	; (2b40 <usb_d_init+0x60>)
    2b18:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2b1a:	490a      	ldr	r1, [pc, #40]	; (2b44 <usb_d_init+0x64>)
    2b1c:	2001      	movs	r0, #1
    2b1e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2b20:	4909      	ldr	r1, [pc, #36]	; (2b48 <usb_d_init+0x68>)
    2b22:	2002      	movs	r0, #2
    2b24:	47a0      	blx	r4
	return ERR_NONE;
    2b26:	2000      	movs	r0, #0
}
    2b28:	bd10      	pop	{r4, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	0000464d 	.word	0x0000464d
    2b30:	20000e74 	.word	0x20000e74
    2b34:	0000b4a5 	.word	0x0000b4a5
    2b38:	000028d1 	.word	0x000028d1
    2b3c:	00002a49 	.word	0x00002a49
    2b40:	00005095 	.word	0x00005095
    2b44:	000028d5 	.word	0x000028d5
    2b48:	00002905 	.word	0x00002905

00002b4c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2b4c:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2b4e:	4b01      	ldr	r3, [pc, #4]	; (2b54 <usb_d_register_callback+0x8>)
    2b50:	4798      	blx	r3
}
    2b52:	bd10      	pop	{r4, pc}
    2b54:	00005071 	.word	0x00005071

00002b58 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2b58:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    2b5a:	4b01      	ldr	r3, [pc, #4]	; (2b60 <usb_d_enable+0x8>)
    2b5c:	4798      	blx	r3
}
    2b5e:	bd10      	pop	{r4, pc}
    2b60:	000046f5 	.word	0x000046f5

00002b64 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2b64:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    2b66:	4b01      	ldr	r3, [pc, #4]	; (2b6c <usb_d_attach+0x8>)
    2b68:	4798      	blx	r3
}
    2b6a:	bd10      	pop	{r4, pc}
    2b6c:	00004745 	.word	0x00004745

00002b70 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2b70:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    2b72:	4b01      	ldr	r3, [pc, #4]	; (2b78 <usb_d_set_address+0x8>)
    2b74:	4798      	blx	r3
}
    2b76:	bd10      	pop	{r4, pc}
    2b78:	00004755 	.word	0x00004755

00002b7c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b7e:	0005      	movs	r5, r0
    2b80:	000e      	movs	r6, r1
    2b82:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b84:	4b0f      	ldr	r3, [pc, #60]	; (2bc4 <usb_d_ep_init+0x48>)
    2b86:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2b88:	2800      	cmp	r0, #0
    2b8a:	da14      	bge.n	2bb6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2b8c:	20ff      	movs	r0, #255	; 0xff
    2b8e:	4b0d      	ldr	r3, [pc, #52]	; (2bc4 <usb_d_ep_init+0x48>)
    2b90:	4798      	blx	r3
    2b92:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    2b94:	db12      	blt.n	2bbc <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2b96:	003a      	movs	r2, r7
    2b98:	0031      	movs	r1, r6
    2b9a:	0028      	movs	r0, r5
    2b9c:	4b0a      	ldr	r3, [pc, #40]	; (2bc8 <usb_d_ep_init+0x4c>)
    2b9e:	4798      	blx	r3
	if (rc < 0) {
    2ba0:	2800      	cmp	r0, #0
    2ba2:	db07      	blt.n	2bb4 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2ba4:	4a09      	ldr	r2, [pc, #36]	; (2bcc <usb_d_ep_init+0x50>)
    2ba6:	0164      	lsls	r4, r4, #5
    2ba8:	1913      	adds	r3, r2, r4
    2baa:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2bac:	2303      	movs	r3, #3
    2bae:	401e      	ands	r6, r3
    2bb0:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    2bb2:	2000      	movs	r0, #0
}
    2bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2bb6:	2014      	movs	r0, #20
    2bb8:	4240      	negs	r0, r0
    2bba:	e7fb      	b.n	2bb4 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    2bbc:	2015      	movs	r0, #21
    2bbe:	4240      	negs	r0, r0
    2bc0:	e7f8      	b.n	2bb4 <usb_d_ep_init+0x38>
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	00002895 	.word	0x00002895
    2bc8:	00004769 	.word	0x00004769
    2bcc:	20000e74 	.word	0x20000e74

00002bd0 <usb_d_ep0_init>:
{
    2bd0:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2bd2:	b282      	uxth	r2, r0
    2bd4:	2100      	movs	r1, #0
    2bd6:	2000      	movs	r0, #0
    2bd8:	4b01      	ldr	r3, [pc, #4]	; (2be0 <usb_d_ep0_init+0x10>)
    2bda:	4798      	blx	r3
}
    2bdc:	bd10      	pop	{r4, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	00002b7d 	.word	0x00002b7d

00002be4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2be4:	b570      	push	{r4, r5, r6, lr}
    2be6:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2be8:	4b06      	ldr	r3, [pc, #24]	; (2c04 <usb_d_ep_deinit+0x20>)
    2bea:	4798      	blx	r3
    2bec:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2bee:	db07      	blt.n	2c00 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2bf0:	0028      	movs	r0, r5
    2bf2:	4b05      	ldr	r3, [pc, #20]	; (2c08 <usb_d_ep_deinit+0x24>)
    2bf4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2bf6:	0164      	lsls	r4, r4, #5
    2bf8:	4b04      	ldr	r3, [pc, #16]	; (2c0c <usb_d_ep_deinit+0x28>)
    2bfa:	191c      	adds	r4, r3, r4
    2bfc:	23ff      	movs	r3, #255	; 0xff
    2bfe:	7063      	strb	r3, [r4, #1]
}
    2c00:	bd70      	pop	{r4, r5, r6, pc}
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	00002895 	.word	0x00002895
    2c08:	000048b5 	.word	0x000048b5
    2c0c:	20000e74 	.word	0x20000e74

00002c10 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2c10:	b570      	push	{r4, r5, r6, lr}
    2c12:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c14:	4b0f      	ldr	r3, [pc, #60]	; (2c54 <usb_d_ep_enable+0x44>)
    2c16:	4798      	blx	r3
    2c18:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2c1a:	db17      	blt.n	2c4c <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2c1c:	0143      	lsls	r3, r0, #5
    2c1e:	4a0e      	ldr	r2, [pc, #56]	; (2c58 <usb_d_ep_enable+0x48>)
    2c20:	5c9b      	ldrb	r3, [r3, r2]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d10a      	bne.n	2c3c <usb_d_ep_enable+0x2c>
    2c26:	2102      	movs	r1, #2
    2c28:	0162      	lsls	r2, r4, #5
    2c2a:	4b0b      	ldr	r3, [pc, #44]	; (2c58 <usb_d_ep_enable+0x48>)
    2c2c:	189b      	adds	r3, r3, r2
    2c2e:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2c30:	0028      	movs	r0, r5
    2c32:	4b0a      	ldr	r3, [pc, #40]	; (2c5c <usb_d_ep_enable+0x4c>)
    2c34:	4798      	blx	r3
	if (rc < 0) {
    2c36:	2800      	cmp	r0, #0
    2c38:	db02      	blt.n	2c40 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    2c3a:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2c3c:	2101      	movs	r1, #1
    2c3e:	e7f3      	b.n	2c28 <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2c40:	0164      	lsls	r4, r4, #5
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <usb_d_ep_enable+0x48>)
    2c44:	191c      	adds	r4, r3, r4
    2c46:	2300      	movs	r3, #0
    2c48:	70a3      	strb	r3, [r4, #2]
    2c4a:	e7f6      	b.n	2c3a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    2c4c:	2012      	movs	r0, #18
    2c4e:	4240      	negs	r0, r0
    2c50:	e7f3      	b.n	2c3a <usb_d_ep_enable+0x2a>
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	00002895 	.word	0x00002895
    2c58:	20000e74 	.word	0x20000e74
    2c5c:	00004979 	.word	0x00004979

00002c60 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c62:	46d6      	mov	lr, sl
    2c64:	464f      	mov	r7, r9
    2c66:	4646      	mov	r6, r8
    2c68:	b5c0      	push	{r6, r7, lr}
    2c6a:	b086      	sub	sp, #24
    2c6c:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2c6e:	7a06      	ldrb	r6, [r0, #8]
    2c70:	0030      	movs	r0, r6
    2c72:	4b3f      	ldr	r3, [pc, #252]	; (2d70 <usb_d_ep_transfer+0x110>)
    2c74:	4798      	blx	r3
    2c76:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2c78:	09f6      	lsrs	r6, r6, #7
    2c7a:	7a6b      	ldrb	r3, [r5, #9]
    2c7c:	1e5a      	subs	r2, r3, #1
    2c7e:	4193      	sbcs	r3, r2
    2c80:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    2c82:	686b      	ldr	r3, [r5, #4]
    2c84:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2c86:	2800      	cmp	r0, #0
    2c88:	db6b      	blt.n	2d62 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    2c8a:	a804      	add	r0, sp, #16
    2c8c:	4b39      	ldr	r3, [pc, #228]	; (2d74 <usb_d_ep_transfer+0x114>)
    2c8e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2c90:	017a      	lsls	r2, r7, #5
    2c92:	4b39      	ldr	r3, [pc, #228]	; (2d78 <usb_d_ep_transfer+0x118>)
    2c94:	189b      	adds	r3, r3, r2
    2c96:	789a      	ldrb	r2, [r3, #2]
    2c98:	2317      	movs	r3, #23
    2c9a:	446b      	add	r3, sp
    2c9c:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	2b01      	cmp	r3, #1
    2ca2:	d00e      	beq.n	2cc2 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    2ca4:	a804      	add	r0, sp, #16
    2ca6:	4b35      	ldr	r3, [pc, #212]	; (2d7c <usb_d_ep_transfer+0x11c>)
    2ca8:	4798      	blx	r3
		switch (state) {
    2caa:	2317      	movs	r3, #23
    2cac:	446b      	add	r3, sp
    2cae:	781b      	ldrb	r3, [r3, #0]
    2cb0:	b2db      	uxtb	r3, r3
    2cb2:	2b05      	cmp	r3, #5
    2cb4:	d02b      	beq.n	2d0e <usb_d_ep_transfer+0xae>
    2cb6:	2b06      	cmp	r3, #6
    2cb8:	d056      	beq.n	2d68 <usb_d_ep_transfer+0x108>
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d029      	beq.n	2d12 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    2cbe:	2001      	movs	r0, #1
    2cc0:	e01f      	b.n	2d02 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2cc2:	4b2d      	ldr	r3, [pc, #180]	; (2d78 <usb_d_ep_transfer+0x118>)
    2cc4:	4699      	mov	r9, r3
    2cc6:	017b      	lsls	r3, r7, #5
    2cc8:	469a      	mov	sl, r3
    2cca:	464b      	mov	r3, r9
    2ccc:	4453      	add	r3, sl
    2cce:	2203      	movs	r2, #3
    2cd0:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2cd2:	a804      	add	r0, sp, #16
    2cd4:	4b29      	ldr	r3, [pc, #164]	; (2d7c <usb_d_ep_transfer+0x11c>)
    2cd6:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2cd8:	464b      	mov	r3, r9
    2cda:	4652      	mov	r2, sl
    2cdc:	5cd3      	ldrb	r3, [r2, r3]
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d01a      	beq.n	2d18 <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2ce2:	7a29      	ldrb	r1, [r5, #8]
    2ce4:	682b      	ldr	r3, [r5, #0]
    2ce6:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    2ce8:	4643      	mov	r3, r8
    2cea:	9302      	str	r3, [sp, #8]
    2cec:	2e00      	cmp	r6, #0
    2cee:	d035      	beq.n	2d5c <usb_d_ep_transfer+0xfc>
    2cf0:	2280      	movs	r2, #128	; 0x80
    2cf2:	4252      	negs	r2, r2
    2cf4:	430a      	orrs	r2, r1
    2cf6:	b2d2      	uxtb	r2, r2
    2cf8:	a801      	add	r0, sp, #4
    2cfa:	7202      	strb	r2, [r0, #8]
    2cfc:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2cfe:	4b20      	ldr	r3, [pc, #128]	; (2d80 <usb_d_ep_transfer+0x120>)
    2d00:	4798      	blx	r3
	return rc;
}
    2d02:	b006      	add	sp, #24
    2d04:	bc1c      	pop	{r2, r3, r4}
    2d06:	4690      	mov	r8, r2
    2d08:	4699      	mov	r9, r3
    2d0a:	46a2      	mov	sl, r4
    2d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    2d0e:	2002      	movs	r0, #2
    2d10:	e7f7      	b.n	2d02 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
    2d12:	2013      	movs	r0, #19
    2d14:	4240      	negs	r0, r0
    2d16:	e7f4      	b.n	2d02 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2d18:	017b      	lsls	r3, r7, #5
    2d1a:	4a17      	ldr	r2, [pc, #92]	; (2d78 <usb_d_ep_transfer+0x118>)
    2d1c:	18d2      	adds	r2, r2, r3
    2d1e:	7c93      	ldrb	r3, [r2, #18]
    2d20:	7cd4      	ldrb	r4, [r2, #19]
    2d22:	0224      	lsls	r4, r4, #8
    2d24:	191b      	adds	r3, r3, r4
    2d26:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d106      	bne.n	2d3a <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2d2c:	2304      	movs	r3, #4
    2d2e:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    2d30:	2300      	movs	r3, #0
    2d32:	4698      	mov	r8, r3
			zlp                 = true;
    2d34:	2401      	movs	r4, #1
			dir                 = true;
    2d36:	2601      	movs	r6, #1
    2d38:	e7d3      	b.n	2ce2 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2d3a:	017f      	lsls	r7, r7, #5
    2d3c:	4a0e      	ldr	r2, [pc, #56]	; (2d78 <usb_d_ep_transfer+0x118>)
    2d3e:	19d7      	adds	r7, r2, r7
    2d40:	220c      	movs	r2, #12
    2d42:	56ba      	ldrsb	r2, [r7, r2]
    2d44:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    2d46:	4598      	cmp	r8, r3
    2d48:	d900      	bls.n	2d4c <usb_d_ep_transfer+0xec>
				len = req_len;
    2d4a:	4698      	mov	r8, r3
			if (dir) {
    2d4c:	2a00      	cmp	r2, #0
    2d4e:	db01      	blt.n	2d54 <usb_d_ep_transfer+0xf4>
				zlp = false;
    2d50:	2400      	movs	r4, #0
    2d52:	e7c6      	b.n	2ce2 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    2d54:	4598      	cmp	r8, r3
    2d56:	419b      	sbcs	r3, r3
    2d58:	425c      	negs	r4, r3
    2d5a:	e7c2      	b.n	2ce2 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    2d5c:	220f      	movs	r2, #15
    2d5e:	400a      	ands	r2, r1
    2d60:	e7ca      	b.n	2cf8 <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    2d62:	2012      	movs	r0, #18
    2d64:	4240      	negs	r0, r0
    2d66:	e7cc      	b.n	2d02 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    2d68:	2010      	movs	r0, #16
    2d6a:	4240      	negs	r0, r0
    2d6c:	e7c9      	b.n	2d02 <usb_d_ep_transfer+0xa2>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00002895 	.word	0x00002895
    2d74:	00001f19 	.word	0x00001f19
    2d78:	20000e74 	.word	0x20000e74
    2d7c:	00001f27 	.word	0x00001f27
    2d80:	00004e51 	.word	0x00004e51

00002d84 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    2d84:	b570      	push	{r4, r5, r6, lr}
    2d86:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d88:	4b07      	ldr	r3, [pc, #28]	; (2da8 <usb_d_ep_abort+0x24>)
    2d8a:	4798      	blx	r3
    2d8c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2d8e:	db09      	blt.n	2da4 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    2d90:	0028      	movs	r0, r5
    2d92:	4b06      	ldr	r3, [pc, #24]	; (2dac <usb_d_ep_abort+0x28>)
    2d94:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2d96:	0164      	lsls	r4, r4, #5
    2d98:	4b05      	ldr	r3, [pc, #20]	; (2db0 <usb_d_ep_abort+0x2c>)
    2d9a:	191c      	adds	r4, r3, r4
    2d9c:	2301      	movs	r3, #1
    2d9e:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    2da0:	3303      	adds	r3, #3
    2da2:	70e3      	strb	r3, [r4, #3]
}
    2da4:	bd70      	pop	{r4, r5, r6, pc}
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	00002895 	.word	0x00002895
    2dac:	0000502d 	.word	0x0000502d
    2db0:	20000e74 	.word	0x20000e74

00002db4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2db4:	b570      	push	{r4, r5, r6, lr}
    2db6:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2db8:	2900      	cmp	r1, #0
    2dba:	d005      	beq.n	2dc8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2dbc:	2901      	cmp	r1, #1
    2dbe:	d024      	beq.n	2e0a <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2dc0:	2102      	movs	r1, #2
    2dc2:	4b13      	ldr	r3, [pc, #76]	; (2e10 <usb_d_ep_halt+0x5c>)
    2dc4:	4798      	blx	r3
	}
}
    2dc6:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2dc8:	4b12      	ldr	r3, [pc, #72]	; (2e14 <usb_d_ep_halt+0x60>)
    2dca:	4798      	blx	r3
    2dcc:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    2dce:	db19      	blt.n	2e04 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2dd0:	2102      	movs	r1, #2
    2dd2:	0020      	movs	r0, r4
    2dd4:	4b0e      	ldr	r3, [pc, #56]	; (2e10 <usb_d_ep_halt+0x5c>)
    2dd6:	4798      	blx	r3
    2dd8:	2800      	cmp	r0, #0
    2dda:	d0f4      	beq.n	2dc6 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2ddc:	2100      	movs	r1, #0
    2dde:	0020      	movs	r0, r4
    2de0:	4b0b      	ldr	r3, [pc, #44]	; (2e10 <usb_d_ep_halt+0x5c>)
    2de2:	4798      	blx	r3
		if (rc < 0) {
    2de4:	2800      	cmp	r0, #0
    2de6:	dbee      	blt.n	2dc6 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2de8:	016d      	lsls	r5, r5, #5
    2dea:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <usb_d_ep_halt+0x64>)
    2dec:	195d      	adds	r5, r3, r5
    2dee:	2301      	movs	r3, #1
    2df0:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2df2:	3302      	adds	r3, #2
    2df4:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2df6:	69eb      	ldr	r3, [r5, #28]
    2df8:	2200      	movs	r2, #0
    2dfa:	2103      	movs	r1, #3
    2dfc:	0020      	movs	r0, r4
    2dfe:	4798      	blx	r3
	return ERR_NONE;
    2e00:	2000      	movs	r0, #0
    2e02:	e7e0      	b.n	2dc6 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    2e04:	2012      	movs	r0, #18
    2e06:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    2e08:	e7dd      	b.n	2dc6 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2e0a:	4b01      	ldr	r3, [pc, #4]	; (2e10 <usb_d_ep_halt+0x5c>)
    2e0c:	4798      	blx	r3
    2e0e:	e7da      	b.n	2dc6 <usb_d_ep_halt+0x12>
    2e10:	00004c81 	.word	0x00004c81
    2e14:	00002895 	.word	0x00002895
    2e18:	20000e74 	.word	0x20000e74

00002e1c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2e1c:	b570      	push	{r4, r5, r6, lr}
    2e1e:	000d      	movs	r5, r1
    2e20:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e22:	4b0f      	ldr	r3, [pc, #60]	; (2e60 <usb_d_ep_register_callback+0x44>)
    2e24:	4798      	blx	r3
    2e26:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2e28:	2c00      	cmp	r4, #0
    2e2a:	d008      	beq.n	2e3e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	db05      	blt.n	2e3c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    2e30:	2d01      	cmp	r5, #1
    2e32:	d00b      	beq.n	2e4c <usb_d_ep_register_callback+0x30>
    2e34:	2d00      	cmp	r5, #0
    2e36:	d004      	beq.n	2e42 <usb_d_ep_register_callback+0x26>
    2e38:	2d02      	cmp	r5, #2
    2e3a:	d00c      	beq.n	2e56 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    2e3c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2e3e:	4c09      	ldr	r4, [pc, #36]	; (2e64 <usb_d_ep_register_callback+0x48>)
    2e40:	e7f4      	b.n	2e2c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2e42:	0140      	lsls	r0, r0, #5
    2e44:	4b08      	ldr	r3, [pc, #32]	; (2e68 <usb_d_ep_register_callback+0x4c>)
    2e46:	1818      	adds	r0, r3, r0
    2e48:	6144      	str	r4, [r0, #20]
		break;
    2e4a:	e7f7      	b.n	2e3c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2e4c:	0140      	lsls	r0, r0, #5
    2e4e:	4b06      	ldr	r3, [pc, #24]	; (2e68 <usb_d_ep_register_callback+0x4c>)
    2e50:	1818      	adds	r0, r3, r0
    2e52:	6184      	str	r4, [r0, #24]
		break;
    2e54:	e7f2      	b.n	2e3c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2e56:	0140      	lsls	r0, r0, #5
    2e58:	4b03      	ldr	r3, [pc, #12]	; (2e68 <usb_d_ep_register_callback+0x4c>)
    2e5a:	1818      	adds	r0, r3, r0
    2e5c:	61c4      	str	r4, [r0, #28]
		break;
    2e5e:	e7ed      	b.n	2e3c <usb_d_ep_register_callback+0x20>
    2e60:	00002895 	.word	0x00002895
    2e64:	000028d1 	.word	0x000028d1
    2e68:	20000e74 	.word	0x20000e74

00002e6c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2e6c:	2800      	cmp	r0, #0
    2e6e:	d100      	bne.n	2e72 <assert+0x6>
		__asm("BKPT #0");
    2e70:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2e72:	4770      	bx	lr

00002e74 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2e74:	6803      	ldr	r3, [r0, #0]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d003      	beq.n	2e82 <is_list_element+0xe>
		if (it == element) {
    2e7a:	428b      	cmp	r3, r1
    2e7c:	d003      	beq.n	2e86 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    2e7e:	681b      	ldr	r3, [r3, #0]
    2e80:	e7f9      	b.n	2e76 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    2e82:	2000      	movs	r0, #0
}
    2e84:	4770      	bx	lr
			return true;
    2e86:	2001      	movs	r0, #1
    2e88:	e7fc      	b.n	2e84 <is_list_element+0x10>
	...

00002e8c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	0004      	movs	r4, r0
    2e90:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    2e92:	4b06      	ldr	r3, [pc, #24]	; (2eac <list_insert_as_head+0x20>)
    2e94:	4798      	blx	r3
    2e96:	2301      	movs	r3, #1
    2e98:	4058      	eors	r0, r3
    2e9a:	b2c0      	uxtb	r0, r0
    2e9c:	2239      	movs	r2, #57	; 0x39
    2e9e:	4904      	ldr	r1, [pc, #16]	; (2eb0 <list_insert_as_head+0x24>)
    2ea0:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <list_insert_as_head+0x28>)
    2ea2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2ea4:	6823      	ldr	r3, [r4, #0]
    2ea6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2ea8:	6025      	str	r5, [r4, #0]
}
    2eaa:	bd70      	pop	{r4, r5, r6, pc}
    2eac:	00002e75 	.word	0x00002e75
    2eb0:	00010358 	.word	0x00010358
    2eb4:	00002e6d 	.word	0x00002e6d

00002eb8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2eb8:	6803      	ldr	r3, [r0, #0]
    2eba:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2ebc:	6001      	str	r1, [r0, #0]
}
    2ebe:	4770      	bx	lr

00002ec0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2ec0:	b570      	push	{r4, r5, r6, lr}
    2ec2:	0005      	movs	r5, r0
    2ec4:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    2ec6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2ec8:	4b0a      	ldr	r3, [pc, #40]	; (2ef4 <list_insert_at_end+0x34>)
    2eca:	4798      	blx	r3
    2ecc:	2301      	movs	r3, #1
    2ece:	4058      	eors	r0, r3
    2ed0:	b2c0      	uxtb	r0, r0
    2ed2:	224f      	movs	r2, #79	; 0x4f
    2ed4:	4908      	ldr	r1, [pc, #32]	; (2ef8 <list_insert_at_end+0x38>)
    2ed6:	4b09      	ldr	r3, [pc, #36]	; (2efc <list_insert_at_end+0x3c>)
    2ed8:	4798      	blx	r3

	if (!list->head) {
    2eda:	682b      	ldr	r3, [r5, #0]
    2edc:	2b00      	cmp	r3, #0
    2ede:	d103      	bne.n	2ee8 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    2ee0:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2ee2:	6033      	str	r3, [r6, #0]
		return;
    2ee4:	e005      	b.n	2ef2 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    2ee6:	001c      	movs	r4, r3
	while (it->next) {
    2ee8:	6823      	ldr	r3, [r4, #0]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d1fb      	bne.n	2ee6 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    2eee:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    2ef0:	6033      	str	r3, [r6, #0]
}
    2ef2:	bd70      	pop	{r4, r5, r6, pc}
    2ef4:	00002e75 	.word	0x00002e75
    2ef8:	00010358 	.word	0x00010358
    2efc:	00002e6d 	.word	0x00002e6d

00002f00 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2f00:	6803      	ldr	r3, [r0, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d003      	beq.n	2f0e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2f06:	681a      	ldr	r2, [r3, #0]
    2f08:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    2f0a:	0018      	movs	r0, r3
	}

	return NULL;
}
    2f0c:	4770      	bx	lr
	return NULL;
    2f0e:	2000      	movs	r0, #0
    2f10:	e7fc      	b.n	2f0c <list_remove_head+0xc>

00002f12 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    2f12:	2900      	cmp	r1, #0
    2f14:	d012      	beq.n	2f3c <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
    2f16:	6803      	ldr	r3, [r0, #0]
    2f18:	4299      	cmp	r1, r3
    2f1a:	d104      	bne.n	2f26 <list_delete_element+0x14>
		list->head = list->head->next;
    2f1c:	681b      	ldr	r3, [r3, #0]
    2f1e:	6003      	str	r3, [r0, #0]
		return true;
    2f20:	2001      	movs	r0, #1
    2f22:	e00a      	b.n	2f3a <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
    2f24:	0013      	movs	r3, r2
		while (it && it->next != element) {
    2f26:	2b00      	cmp	r3, #0
    2f28:	d002      	beq.n	2f30 <list_delete_element+0x1e>
    2f2a:	681a      	ldr	r2, [r3, #0]
    2f2c:	4291      	cmp	r1, r2
    2f2e:	d1f9      	bne.n	2f24 <list_delete_element+0x12>
		}
		if (it) {
    2f30:	2b00      	cmp	r3, #0
    2f32:	d005      	beq.n	2f40 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
    2f34:	680a      	ldr	r2, [r1, #0]
    2f36:	601a      	str	r2, [r3, #0]
			return true;
    2f38:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2f3a:	4770      	bx	lr
		return false;
    2f3c:	2000      	movs	r0, #0
    2f3e:	e7fc      	b.n	2f3a <list_delete_element+0x28>
	return false;
    2f40:	2000      	movs	r0, #0
    2f42:	e7fa      	b.n	2f3a <list_delete_element+0x28>

00002f44 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2f44:	b570      	push	{r4, r5, r6, lr}
    2f46:	0004      	movs	r4, r0
    2f48:	000e      	movs	r6, r1
    2f4a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    2f4c:	2800      	cmp	r0, #0
    2f4e:	d012      	beq.n	2f76 <ringbuffer_init+0x32>
    2f50:	2900      	cmp	r1, #0
    2f52:	d012      	beq.n	2f7a <ringbuffer_init+0x36>
    2f54:	2a00      	cmp	r2, #0
    2f56:	d112      	bne.n	2f7e <ringbuffer_init+0x3a>
    2f58:	2000      	movs	r0, #0
    2f5a:	2228      	movs	r2, #40	; 0x28
    2f5c:	490a      	ldr	r1, [pc, #40]	; (2f88 <ringbuffer_init+0x44>)
    2f5e:	4b0b      	ldr	r3, [pc, #44]	; (2f8c <ringbuffer_init+0x48>)
    2f60:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2f62:	1e6b      	subs	r3, r5, #1
    2f64:	422b      	tst	r3, r5
    2f66:	d10c      	bne.n	2f82 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2f68:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2f6a:	2300      	movs	r3, #0
    2f6c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    2f6e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2f70:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2f72:	2000      	movs	r0, #0
}
    2f74:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2f76:	2000      	movs	r0, #0
    2f78:	e7ef      	b.n	2f5a <ringbuffer_init+0x16>
    2f7a:	2000      	movs	r0, #0
    2f7c:	e7ed      	b.n	2f5a <ringbuffer_init+0x16>
    2f7e:	2001      	movs	r0, #1
    2f80:	e7eb      	b.n	2f5a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    2f82:	200d      	movs	r0, #13
    2f84:	4240      	negs	r0, r0
    2f86:	e7f5      	b.n	2f74 <ringbuffer_init+0x30>
    2f88:	00010378 	.word	0x00010378
    2f8c:	00002e6d 	.word	0x00002e6d

00002f90 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2f90:	b570      	push	{r4, r5, r6, lr}
    2f92:	0004      	movs	r4, r0
    2f94:	000d      	movs	r5, r1
	ASSERT(rb && data);
    2f96:	2800      	cmp	r0, #0
    2f98:	d016      	beq.n	2fc8 <ringbuffer_get+0x38>
    2f9a:	2900      	cmp	r1, #0
    2f9c:	d012      	beq.n	2fc4 <ringbuffer_get+0x34>
    2f9e:	2001      	movs	r0, #1
    2fa0:	2240      	movs	r2, #64	; 0x40
    2fa2:	490c      	ldr	r1, [pc, #48]	; (2fd4 <ringbuffer_get+0x44>)
    2fa4:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <ringbuffer_get+0x48>)
    2fa6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2fa8:	68a3      	ldr	r3, [r4, #8]
    2faa:	68e2      	ldr	r2, [r4, #12]
    2fac:	429a      	cmp	r2, r3
    2fae:	d00d      	beq.n	2fcc <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    2fb0:	6862      	ldr	r2, [r4, #4]
    2fb2:	4013      	ands	r3, r2
    2fb4:	6822      	ldr	r2, [r4, #0]
    2fb6:	5cd3      	ldrb	r3, [r2, r3]
    2fb8:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2fba:	68a3      	ldr	r3, [r4, #8]
    2fbc:	3301      	adds	r3, #1
    2fbe:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2fc0:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    2fc2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    2fc4:	2000      	movs	r0, #0
    2fc6:	e7eb      	b.n	2fa0 <ringbuffer_get+0x10>
    2fc8:	2000      	movs	r0, #0
    2fca:	e7e9      	b.n	2fa0 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    2fcc:	200a      	movs	r0, #10
    2fce:	4240      	negs	r0, r0
    2fd0:	e7f7      	b.n	2fc2 <ringbuffer_get+0x32>
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	00010378 	.word	0x00010378
    2fd8:	00002e6d 	.word	0x00002e6d

00002fdc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2fdc:	b570      	push	{r4, r5, r6, lr}
    2fde:	0004      	movs	r4, r0
    2fe0:	000d      	movs	r5, r1
	ASSERT(rb);
    2fe2:	1e43      	subs	r3, r0, #1
    2fe4:	4198      	sbcs	r0, r3
    2fe6:	b2c0      	uxtb	r0, r0
    2fe8:	2251      	movs	r2, #81	; 0x51
    2fea:	490a      	ldr	r1, [pc, #40]	; (3014 <ringbuffer_put+0x38>)
    2fec:	4b0a      	ldr	r3, [pc, #40]	; (3018 <ringbuffer_put+0x3c>)
    2fee:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2ff0:	6863      	ldr	r3, [r4, #4]
    2ff2:	68e2      	ldr	r2, [r4, #12]
    2ff4:	4013      	ands	r3, r2
    2ff6:	6822      	ldr	r2, [r4, #0]
    2ff8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2ffa:	68e3      	ldr	r3, [r4, #12]
    2ffc:	68a2      	ldr	r2, [r4, #8]
    2ffe:	1a9a      	subs	r2, r3, r2
    3000:	6861      	ldr	r1, [r4, #4]
    3002:	428a      	cmp	r2, r1
    3004:	d901      	bls.n	300a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    3006:	1a59      	subs	r1, r3, r1
    3008:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    300a:	3301      	adds	r3, #1
    300c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    300e:	2000      	movs	r0, #0
    3010:	bd70      	pop	{r4, r5, r6, pc}
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	00010378 	.word	0x00010378
    3018:	00002e6d 	.word	0x00002e6d

0000301c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    301c:	b510      	push	{r4, lr}
    301e:	0004      	movs	r4, r0
	ASSERT(rb);
    3020:	1e43      	subs	r3, r0, #1
    3022:	4198      	sbcs	r0, r3
    3024:	b2c0      	uxtb	r0, r0
    3026:	2267      	movs	r2, #103	; 0x67
    3028:	4903      	ldr	r1, [pc, #12]	; (3038 <ringbuffer_num+0x1c>)
    302a:	4b04      	ldr	r3, [pc, #16]	; (303c <ringbuffer_num+0x20>)
    302c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    302e:	68e0      	ldr	r0, [r4, #12]
    3030:	68a3      	ldr	r3, [r4, #8]
    3032:	1ac0      	subs	r0, r0, r3
}
    3034:	bd10      	pop	{r4, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	00010378 	.word	0x00010378
    303c:	00002e6d 	.word	0x00002e6d

00003040 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3040:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3042:	2b00      	cmp	r3, #0
    3044:	db07      	blt.n	3056 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3046:	231f      	movs	r3, #31
    3048:	4018      	ands	r0, r3
    304a:	3b1e      	subs	r3, #30
    304c:	4083      	lsls	r3, r0
    304e:	2280      	movs	r2, #128	; 0x80
    3050:	0052      	lsls	r2, r2, #1
    3052:	4901      	ldr	r1, [pc, #4]	; (3058 <_irq_set+0x18>)
    3054:	508b      	str	r3, [r1, r2]
}
    3056:	4770      	bx	lr
    3058:	e000e100 	.word	0xe000e100

0000305c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    305c:	0103      	lsls	r3, r0, #4
    305e:	1a1b      	subs	r3, r3, r0
    3060:	015a      	lsls	r2, r3, #5
    3062:	2064      	movs	r0, #100	; 0x64
    3064:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3066:	4770      	bx	lr

00003068 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3068:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    306a:	4b06      	ldr	r3, [pc, #24]	; (3084 <_init_chip+0x1c>)
    306c:	685a      	ldr	r2, [r3, #4]
    306e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    3070:	4b05      	ldr	r3, [pc, #20]	; (3088 <_init_chip+0x20>)
    3072:	4798      	blx	r3
	_sysctrl_init_sources();
    3074:	4b05      	ldr	r3, [pc, #20]	; (308c <_init_chip+0x24>)
    3076:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    3078:	4b05      	ldr	r3, [pc, #20]	; (3090 <_init_chip+0x28>)
    307a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    307c:	20ff      	movs	r0, #255	; 0xff
    307e:	4b05      	ldr	r3, [pc, #20]	; (3094 <_init_chip+0x2c>)
    3080:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    3082:	bd10      	pop	{r4, pc}
    3084:	41004000 	.word	0x41004000
    3088:	000033a5 	.word	0x000033a5
    308c:	000039bd 	.word	0x000039bd
    3090:	00003a19 	.word	0x00003a19
    3094:	000032d1 	.word	0x000032d1

00003098 <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3098:	79c3      	ldrb	r3, [r0, #7]
    309a:	09db      	lsrs	r3, r3, #7
    309c:	d1fc      	bne.n	3098 <_dac_init>
    309e:	79c3      	ldrb	r3, [r0, #7]
    30a0:	09db      	lsrs	r3, r3, #7
    30a2:	d1fc      	bne.n	309e <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    30a4:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    30a6:	079b      	lsls	r3, r3, #30
    30a8:	d507      	bpl.n	30ba <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    30aa:	2300      	movs	r3, #0
    30ac:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    30ae:	79c3      	ldrb	r3, [r0, #7]
    30b0:	09db      	lsrs	r3, r3, #7
    30b2:	d1fc      	bne.n	30ae <_dac_init+0x16>
    30b4:	79c3      	ldrb	r3, [r0, #7]
    30b6:	09db      	lsrs	r3, r3, #7
    30b8:	d1fc      	bne.n	30b4 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    30ba:	2301      	movs	r3, #1
    30bc:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    30be:	79c3      	ldrb	r3, [r0, #7]
    30c0:	09db      	lsrs	r3, r3, #7
    30c2:	d1fc      	bne.n	30be <_dac_init+0x26>
    30c4:	79c3      	ldrb	r3, [r0, #7]
    30c6:	09db      	lsrs	r3, r3, #7
    30c8:	d1fc      	bne.n	30c4 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    30ca:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    30cc:	2241      	movs	r2, #65	; 0x41
    30ce:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    30d0:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    30d2:	79c3      	ldrb	r3, [r0, #7]
    30d4:	09db      	lsrs	r3, r3, #7
    30d6:	d1fc      	bne.n	30d2 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    30d8:	2000      	movs	r0, #0
    30da:	4770      	bx	lr

000030dc <_dac_sync_init>:
{
    30dc:	b570      	push	{r4, r5, r6, lr}
    30de:	0005      	movs	r5, r0
    30e0:	000c      	movs	r4, r1
	ASSERT(device);
    30e2:	1e43      	subs	r3, r0, #1
    30e4:	4198      	sbcs	r0, r3
    30e6:	b2c0      	uxtb	r0, r0
    30e8:	2249      	movs	r2, #73	; 0x49
    30ea:	4904      	ldr	r1, [pc, #16]	; (30fc <_dac_sync_init+0x20>)
    30ec:	4b04      	ldr	r3, [pc, #16]	; (3100 <_dac_sync_init+0x24>)
    30ee:	4798      	blx	r3
	device->hw = hw;
    30f0:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    30f2:	0020      	movs	r0, r4
    30f4:	4b03      	ldr	r3, [pc, #12]	; (3104 <_dac_sync_init+0x28>)
    30f6:	4798      	blx	r3
}
    30f8:	bd70      	pop	{r4, r5, r6, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	0001039c 	.word	0x0001039c
    3100:	00002e6d 	.word	0x00002e6d
    3104:	00003099 	.word	0x00003099

00003108 <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    3108:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    310a:	7813      	ldrb	r3, [r2, #0]
    310c:	2102      	movs	r1, #2
    310e:	430b      	orrs	r3, r1
    3110:	b2db      	uxtb	r3, r3
    3112:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3114:	79d3      	ldrb	r3, [r2, #7]
    3116:	09db      	lsrs	r3, r3, #7
    3118:	d1fc      	bne.n	3114 <_dac_sync_enable_channel+0xc>
}
    311a:	4770      	bx	lr

0000311c <_dac_sync_is_channel_enable>:
}

bool _dac_sync_is_channel_enable(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	return hri_dac_get_CTRLA_ENABLE_bit(device->hw);
    311c:	6802      	ldr	r2, [r0, #0]
    311e:	79d3      	ldrb	r3, [r2, #7]
    3120:	09db      	lsrs	r3, r3, #7
    3122:	d1fc      	bne.n	311e <_dac_sync_is_channel_enable+0x2>
	tmp = ((Dac *)hw)->CTRLA.reg;
    3124:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & DAC_CTRLA_ENABLE) >> DAC_CTRLA_ENABLE_Pos;
    3126:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    3128:	2001      	movs	r0, #1
    312a:	4018      	ands	r0, r3
}
    312c:	4770      	bx	lr

0000312e <_dac_sync_write_data>:
 * \brief write synchronous DAC data for output
 */
void _dac_sync_write_data(struct _dac_sync_device *const device, const uint16_t data, const uint8_t ch)
{
	(void)ch;
	hri_dac_write_DATA_reg(device->hw, data);
    312e:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA.reg = data;
    3130:	8111      	strh	r1, [r2, #8]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3132:	79d3      	ldrb	r3, [r2, #7]
    3134:	09db      	lsrs	r3, r3, #7
    3136:	d1fc      	bne.n	3132 <_dac_sync_write_data+0x4>
}
    3138:	4770      	bx	lr
	...

0000313c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    313c:	4b20      	ldr	r3, [pc, #128]	; (31c0 <_ext_irq_init+0x84>)
    313e:	785b      	ldrb	r3, [r3, #1]
    3140:	09db      	lsrs	r3, r3, #7
    3142:	d1fb      	bne.n	313c <_ext_irq_init>
    3144:	4b1e      	ldr	r3, [pc, #120]	; (31c0 <_ext_irq_init+0x84>)
    3146:	785b      	ldrb	r3, [r3, #1]
    3148:	09db      	lsrs	r3, r3, #7
    314a:	d1fb      	bne.n	3144 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    314c:	4b1c      	ldr	r3, [pc, #112]	; (31c0 <_ext_irq_init+0x84>)
    314e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    3150:	079b      	lsls	r3, r3, #30
    3152:	d50a      	bpl.n	316a <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    3154:	2200      	movs	r2, #0
    3156:	4b1a      	ldr	r3, [pc, #104]	; (31c0 <_ext_irq_init+0x84>)
    3158:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    315a:	4b19      	ldr	r3, [pc, #100]	; (31c0 <_ext_irq_init+0x84>)
    315c:	785b      	ldrb	r3, [r3, #1]
    315e:	09db      	lsrs	r3, r3, #7
    3160:	d1fb      	bne.n	315a <_ext_irq_init+0x1e>
    3162:	4b17      	ldr	r3, [pc, #92]	; (31c0 <_ext_irq_init+0x84>)
    3164:	785b      	ldrb	r3, [r3, #1]
    3166:	09db      	lsrs	r3, r3, #7
    3168:	d1fb      	bne.n	3162 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    316a:	2201      	movs	r2, #1
    316c:	4b14      	ldr	r3, [pc, #80]	; (31c0 <_ext_irq_init+0x84>)
    316e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    3170:	4b13      	ldr	r3, [pc, #76]	; (31c0 <_ext_irq_init+0x84>)
    3172:	785b      	ldrb	r3, [r3, #1]
    3174:	09db      	lsrs	r3, r3, #7
    3176:	d1fb      	bne.n	3170 <_ext_irq_init+0x34>
    3178:	4b11      	ldr	r3, [pc, #68]	; (31c0 <_ext_irq_init+0x84>)
    317a:	785b      	ldrb	r3, [r3, #1]
    317c:	09db      	lsrs	r3, r3, #7
    317e:	d1fb      	bne.n	3178 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3180:	4b0f      	ldr	r3, [pc, #60]	; (31c0 <_ext_irq_init+0x84>)
    3182:	2200      	movs	r2, #0
    3184:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3186:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    3188:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    318a:	619a      	str	r2, [r3, #24]
    318c:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    318e:	781a      	ldrb	r2, [r3, #0]
    3190:	2102      	movs	r1, #2
    3192:	430a      	orrs	r2, r1
    3194:	b2d2      	uxtb	r2, r2
    3196:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    3198:	4b09      	ldr	r3, [pc, #36]	; (31c0 <_ext_irq_init+0x84>)
    319a:	785b      	ldrb	r3, [r3, #1]
    319c:	09db      	lsrs	r3, r3, #7
    319e:	d1fb      	bne.n	3198 <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31a0:	4b08      	ldr	r3, [pc, #32]	; (31c4 <_ext_irq_init+0x88>)
    31a2:	2210      	movs	r2, #16
    31a4:	2180      	movs	r1, #128	; 0x80
    31a6:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    31a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31ac:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31b0:	3101      	adds	r1, #1
    31b2:	31ff      	adds	r1, #255	; 0xff
    31b4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31b6:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    31b8:	4b03      	ldr	r3, [pc, #12]	; (31c8 <_ext_irq_init+0x8c>)
    31ba:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    31bc:	2000      	movs	r0, #0
    31be:	4770      	bx	lr
    31c0:	40001800 	.word	0x40001800
    31c4:	e000e100 	.word	0xe000e100
    31c8:	20000ef4 	.word	0x20000ef4

000031cc <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    31cc:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    31ce:	2b00      	cmp	r3, #0
    31d0:	d00b      	beq.n	31ea <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    31d2:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    31d4:	2aff      	cmp	r2, #255	; 0xff
    31d6:	d017      	beq.n	3208 <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    31d8:	2900      	cmp	r1, #0
    31da:	d10f      	bne.n	31fc <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    31dc:	2301      	movs	r3, #1
    31de:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    31e0:	4a0b      	ldr	r2, [pc, #44]	; (3210 <_ext_irq_enable+0x44>)
    31e2:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    31e4:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    31e6:	2000      	movs	r0, #0
}
    31e8:	4770      	bx	lr
		if (_map[i].pin == pin) {
    31ea:	280e      	cmp	r0, #14
    31ec:	d002      	beq.n	31f4 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
    31ee:	3301      	adds	r3, #1
    31f0:	b2db      	uxtb	r3, r3
    31f2:	e7ec      	b.n	31ce <_ext_irq_enable+0x2>
			extint = _map[i].extint;
    31f4:	00da      	lsls	r2, r3, #3
    31f6:	4b07      	ldr	r3, [pc, #28]	; (3214 <_ext_irq_enable+0x48>)
    31f8:	5cd2      	ldrb	r2, [r2, r3]
			break;
    31fa:	e7eb      	b.n	31d4 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    31fc:	2301      	movs	r3, #1
    31fe:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    3200:	4a03      	ldr	r2, [pc, #12]	; (3210 <_ext_irq_enable+0x44>)
    3202:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    3204:	2000      	movs	r0, #0
    3206:	e7ef      	b.n	31e8 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
    3208:	200d      	movs	r0, #13
    320a:	4240      	negs	r0, r0
    320c:	e7ec      	b.n	31e8 <_ext_irq_enable+0x1c>
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	40001800 	.word	0x40001800
    3214:	000103b4 	.word	0x000103b4

00003218 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    3218:	b570      	push	{r4, r5, r6, lr}
    321a:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    321c:	4b26      	ldr	r3, [pc, #152]	; (32b8 <EIC_Handler+0xa0>)
    321e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    3220:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    3222:	400a      	ands	r2, r1
    3224:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    3226:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    3228:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    322a:	4b24      	ldr	r3, [pc, #144]	; (32bc <EIC_Handler+0xa4>)
    322c:	6818      	ldr	r0, [r3, #0]
    322e:	1e43      	subs	r3, r0, #1
    3230:	4198      	sbcs	r0, r3
    3232:	b2c0      	uxtb	r0, r0
    3234:	22d2      	movs	r2, #210	; 0xd2
    3236:	4922      	ldr	r1, [pc, #136]	; (32c0 <EIC_Handler+0xa8>)
    3238:	4b22      	ldr	r3, [pc, #136]	; (32c4 <EIC_Handler+0xac>)
    323a:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    323c:	2501      	movs	r5, #1
    323e:	426d      	negs	r5, r5

	while (flags) {
    3240:	e02e      	b.n	32a0 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    3242:	3901      	subs	r1, #1
    3244:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    3246:	42b0      	cmp	r0, r6
    3248:	d80e      	bhi.n	3268 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    324a:	1832      	adds	r2, r6, r0
    324c:	1052      	asrs	r2, r2, #1
    324e:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    3250:	23ff      	movs	r3, #255	; 0xff
    3252:	4013      	ands	r3, r2
    3254:	00db      	lsls	r3, r3, #3
    3256:	4a1c      	ldr	r2, [pc, #112]	; (32c8 <EIC_Handler+0xb0>)
    3258:	5c9b      	ldrb	r3, [r3, r2]
    325a:	42a3      	cmp	r3, r4
    325c:	d003      	beq.n	3266 <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    325e:	daf0      	bge.n	3242 <EIC_Handler+0x2a>
					lower = middle + 1;
    3260:	3101      	adds	r1, #1
    3262:	b2c8      	uxtb	r0, r1
    3264:	e7ef      	b.n	3246 <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    3266:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    3268:	1c6b      	adds	r3, r5, #1
    326a:	d003      	beq.n	3274 <EIC_Handler+0x5c>
				callback(pin);
    326c:	4b13      	ldr	r3, [pc, #76]	; (32bc <EIC_Handler+0xa4>)
    326e:	681b      	ldr	r3, [r3, #0]
    3270:	0028      	movs	r0, r5
    3272:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    3274:	2201      	movs	r2, #1
    3276:	40a2      	lsls	r2, r4
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	4393      	bics	r3, r2
    327c:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    327e:	9801      	ldr	r0, [sp, #4]
    3280:	4b12      	ldr	r3, [pc, #72]	; (32cc <EIC_Handler+0xb4>)
    3282:	4798      	blx	r3
    3284:	3801      	subs	r0, #1
    3286:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    3288:	1c63      	adds	r3, r4, #1
    328a:	d002      	beq.n	3292 <EIC_Handler+0x7a>
    328c:	2601      	movs	r6, #1
    328e:	2000      	movs	r0, #0
    3290:	e7d9      	b.n	3246 <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    3292:	4b09      	ldr	r3, [pc, #36]	; (32b8 <EIC_Handler+0xa0>)
    3294:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    3296:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    3298:	400a      	ands	r2, r1
    329a:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    329c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    329e:	611a      	str	r2, [r3, #16]
	while (flags) {
    32a0:	9b01      	ldr	r3, [sp, #4]
    32a2:	2b00      	cmp	r3, #0
    32a4:	d005      	beq.n	32b2 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    32a6:	9801      	ldr	r0, [sp, #4]
    32a8:	4b08      	ldr	r3, [pc, #32]	; (32cc <EIC_Handler+0xb4>)
    32aa:	4798      	blx	r3
    32ac:	3801      	subs	r0, #1
    32ae:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    32b0:	e7ea      	b.n	3288 <EIC_Handler+0x70>
	}
}
    32b2:	b002      	add	sp, #8
    32b4:	bd70      	pop	{r4, r5, r6, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	40001800 	.word	0x40001800
    32bc:	20000ef4 	.word	0x20000ef4
    32c0:	000103bc 	.word	0x000103bc
    32c4:	00002e6d 	.word	0x00002e6d
    32c8:	000103b4 	.word	0x000103b4
    32cc:	0000874d 	.word	0x0000874d

000032d0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    32d0:	07c3      	lsls	r3, r0, #31
    32d2:	d509      	bpl.n	32e8 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    32d4:	4b27      	ldr	r3, [pc, #156]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    32d6:	2280      	movs	r2, #128	; 0x80
    32d8:	0052      	lsls	r2, r2, #1
    32da:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    32dc:	4a26      	ldr	r2, [pc, #152]	; (3378 <_gclk_init_generators_by_fref+0xa8>)
    32de:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    32e0:	4b24      	ldr	r3, [pc, #144]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    32e2:	785b      	ldrb	r3, [r3, #1]
    32e4:	09db      	lsrs	r3, r3, #7
    32e6:	d1fb      	bne.n	32e0 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    32e8:	0783      	lsls	r3, r0, #30
    32ea:	d508      	bpl.n	32fe <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    32ec:	4b21      	ldr	r3, [pc, #132]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    32ee:	4a23      	ldr	r2, [pc, #140]	; (337c <_gclk_init_generators_by_fref+0xac>)
    32f0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    32f2:	4a23      	ldr	r2, [pc, #140]	; (3380 <_gclk_init_generators_by_fref+0xb0>)
    32f4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    32f6:	4b1f      	ldr	r3, [pc, #124]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    32f8:	785b      	ldrb	r3, [r3, #1]
    32fa:	09db      	lsrs	r3, r3, #7
    32fc:	d1fb      	bne.n	32f6 <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    32fe:	0743      	lsls	r3, r0, #29
    3300:	d508      	bpl.n	3314 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    3302:	4b1c      	ldr	r3, [pc, #112]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    3304:	4a1f      	ldr	r2, [pc, #124]	; (3384 <_gclk_init_generators_by_fref+0xb4>)
    3306:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3308:	4a1f      	ldr	r2, [pc, #124]	; (3388 <_gclk_init_generators_by_fref+0xb8>)
    330a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    330c:	4b19      	ldr	r3, [pc, #100]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    330e:	785b      	ldrb	r3, [r3, #1]
    3310:	09db      	lsrs	r3, r3, #7
    3312:	d1fb      	bne.n	330c <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    3314:	0703      	lsls	r3, r0, #28
    3316:	d508      	bpl.n	332a <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    3318:	4b16      	ldr	r3, [pc, #88]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    331a:	4a1c      	ldr	r2, [pc, #112]	; (338c <_gclk_init_generators_by_fref+0xbc>)
    331c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    331e:	4a1c      	ldr	r2, [pc, #112]	; (3390 <_gclk_init_generators_by_fref+0xc0>)
    3320:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3322:	4b14      	ldr	r3, [pc, #80]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    3324:	785b      	ldrb	r3, [r3, #1]
    3326:	09db      	lsrs	r3, r3, #7
    3328:	d1fb      	bne.n	3322 <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    332a:	06c3      	lsls	r3, r0, #27
    332c:	d509      	bpl.n	3342 <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    332e:	4b11      	ldr	r3, [pc, #68]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    3330:	2282      	movs	r2, #130	; 0x82
    3332:	0052      	lsls	r2, r2, #1
    3334:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3336:	4a17      	ldr	r2, [pc, #92]	; (3394 <_gclk_init_generators_by_fref+0xc4>)
    3338:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    333a:	4b0e      	ldr	r3, [pc, #56]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    333c:	785b      	ldrb	r3, [r3, #1]
    333e:	09db      	lsrs	r3, r3, #7
    3340:	d1fb      	bne.n	333a <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    3342:	0683      	lsls	r3, r0, #26
    3344:	d508      	bpl.n	3358 <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    3346:	4b0b      	ldr	r3, [pc, #44]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    3348:	4a13      	ldr	r2, [pc, #76]	; (3398 <_gclk_init_generators_by_fref+0xc8>)
    334a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    334c:	4a13      	ldr	r2, [pc, #76]	; (339c <_gclk_init_generators_by_fref+0xcc>)
    334e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3350:	4b08      	ldr	r3, [pc, #32]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    3352:	785b      	ldrb	r3, [r3, #1]
    3354:	09db      	lsrs	r3, r3, #7
    3356:	d1fb      	bne.n	3350 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    3358:	0643      	lsls	r3, r0, #25
    335a:	d509      	bpl.n	3370 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    335c:	4b05      	ldr	r3, [pc, #20]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    335e:	2283      	movs	r2, #131	; 0x83
    3360:	0052      	lsls	r2, r2, #1
    3362:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3364:	4a0e      	ldr	r2, [pc, #56]	; (33a0 <_gclk_init_generators_by_fref+0xd0>)
    3366:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3368:	4b02      	ldr	r3, [pc, #8]	; (3374 <_gclk_init_generators_by_fref+0xa4>)
    336a:	785b      	ldrb	r3, [r3, #1]
    336c:	09db      	lsrs	r3, r3, #7
    336e:	d1fb      	bne.n	3368 <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    3370:	4770      	bx	lr
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	40000c00 	.word	0x40000c00
    3378:	00290800 	.word	0x00290800
    337c:	00000601 	.word	0x00000601
    3380:	00010801 	.word	0x00010801
    3384:	00000402 	.word	0x00000402
    3388:	00210602 	.word	0x00210602
    338c:	00000803 	.word	0x00000803
    3390:	00290603 	.word	0x00290603
    3394:	00090704 	.word	0x00090704
    3398:	00000305 	.word	0x00000305
    339c:	00010805 	.word	0x00010805
    33a0:	00210406 	.word	0x00210406

000033a4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    33a4:	4b06      	ldr	r3, [pc, #24]	; (33c0 <_pm_init+0x1c>)
    33a6:	7a1a      	ldrb	r2, [r3, #8]
    33a8:	b2d2      	uxtb	r2, r2
    33aa:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    33ac:	7a5a      	ldrb	r2, [r3, #9]
    33ae:	b2d2      	uxtb	r2, r2
    33b0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    33b2:	7a9a      	ldrb	r2, [r3, #10]
    33b4:	b2d2      	uxtb	r2, r2
    33b6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    33b8:	7ada      	ldrb	r2, [r3, #11]
    33ba:	b2d2      	uxtb	r2, r2
    33bc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    33be:	4770      	bx	lr
    33c0:	40000400 	.word	0x40000400

000033c4 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    33c4:	4b02      	ldr	r3, [pc, #8]	; (33d0 <_sercom_get_hardware_index+0xc>)
    33c6:	469c      	mov	ip, r3
    33c8:	4460      	add	r0, ip
    33ca:	0a80      	lsrs	r0, r0, #10
    33cc:	b2c0      	uxtb	r0, r0
}
    33ce:	4770      	bx	lr
    33d0:	bdfff800 	.word	0xbdfff800

000033d4 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    33d4:	b510      	push	{r4, lr}
	void *hw = device->hw;
    33d6:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    33d8:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    33da:	07db      	lsls	r3, r3, #31
    33dc:	d502      	bpl.n	33e4 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    33de:	7da3      	ldrb	r3, [r4, #22]
    33e0:	07db      	lsls	r3, r3, #31
    33e2:	d40f      	bmi.n	3404 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    33e4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    33e6:	079b      	lsls	r3, r3, #30
    33e8:	d502      	bpl.n	33f0 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    33ea:	7da3      	ldrb	r3, [r4, #22]
    33ec:	079b      	lsls	r3, r3, #30
    33ee:	d40e      	bmi.n	340e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    33f0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    33f2:	075b      	lsls	r3, r3, #29
    33f4:	d515      	bpl.n	3422 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    33f6:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    33f8:	2337      	movs	r3, #55	; 0x37
    33fa:	421a      	tst	r2, r3
    33fc:	d00c      	beq.n	3418 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    33fe:	3308      	adds	r3, #8
    3400:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    3402:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3404:	2301      	movs	r3, #1
    3406:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    3408:	6803      	ldr	r3, [r0, #0]
    340a:	4798      	blx	r3
    340c:	e7f9      	b.n	3402 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    340e:	2302      	movs	r3, #2
    3410:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3412:	6883      	ldr	r3, [r0, #8]
    3414:	4798      	blx	r3
    3416:	e7f4      	b.n	3402 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3418:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    341a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    341c:	b2c9      	uxtb	r1, r1
    341e:	4798      	blx	r3
    3420:	e7ef      	b.n	3402 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3422:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3424:	09db      	lsrs	r3, r3, #7
    3426:	d0ec      	beq.n	3402 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    3428:	2380      	movs	r3, #128	; 0x80
    342a:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    342c:	68c3      	ldr	r3, [r0, #12]
    342e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3430:	8b63      	ldrh	r3, [r4, #26]
    3432:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3434:	8363      	strh	r3, [r4, #26]
    3436:	e7e4      	b.n	3402 <_sercom_usart_interrupt_handler+0x2e>

00003438 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    3438:	4b03      	ldr	r3, [pc, #12]	; (3448 <_sercom_init_irq_param+0x10>)
    343a:	4298      	cmp	r0, r3
    343c:	d000      	beq.n	3440 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    343e:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    3440:	4b02      	ldr	r3, [pc, #8]	; (344c <_sercom_init_irq_param+0x14>)
    3442:	6019      	str	r1, [r3, #0]
}
    3444:	e7fb      	b.n	343e <_sercom_init_irq_param+0x6>
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	42001400 	.word	0x42001400
    344c:	20000ef8 	.word	0x20000ef8

00003450 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3450:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    3452:	4b02      	ldr	r3, [pc, #8]	; (345c <_sercom_get_irq_num+0xc>)
    3454:	4798      	blx	r3
    3456:	3009      	adds	r0, #9
    3458:	b2c0      	uxtb	r0, r0
}
    345a:	bd10      	pop	{r4, pc}
    345c:	000033c5 	.word	0x000033c5

00003460 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3460:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3462:	07db      	lsls	r3, r3, #31
    3464:	d408      	bmi.n	3478 <_spi_sync_enable+0x18>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3466:	6803      	ldr	r3, [r0, #0]
    3468:	2202      	movs	r2, #2
    346a:	4313      	orrs	r3, r2
    346c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    346e:	69c3      	ldr	r3, [r0, #28]
    3470:	079b      	lsls	r3, r3, #30
    3472:	d1fc      	bne.n	346e <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    3474:	2000      	movs	r0, #0
}
    3476:	4770      	bx	lr
		return ERR_BUSY;
    3478:	2004      	movs	r0, #4
    347a:	4240      	negs	r0, r0
    347c:	e7fb      	b.n	3476 <_spi_sync_enable+0x16>
	...

00003480 <_get_sercom_index>:
{
    3480:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3482:	4b0b      	ldr	r3, [pc, #44]	; (34b0 <_get_sercom_index+0x30>)
    3484:	4798      	blx	r3
    3486:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3488:	2000      	movs	r0, #0
    348a:	2800      	cmp	r0, #0
    348c:	d006      	beq.n	349c <_get_sercom_index+0x1c>
	ASSERT(false);
    348e:	4a09      	ldr	r2, [pc, #36]	; (34b4 <_get_sercom_index+0x34>)
    3490:	4909      	ldr	r1, [pc, #36]	; (34b8 <_get_sercom_index+0x38>)
    3492:	2000      	movs	r0, #0
    3494:	4b09      	ldr	r3, [pc, #36]	; (34bc <_get_sercom_index+0x3c>)
    3496:	4798      	blx	r3
	return 0;
    3498:	2000      	movs	r0, #0
}
    349a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    349c:	0083      	lsls	r3, r0, #2
    349e:	181b      	adds	r3, r3, r0
    34a0:	0099      	lsls	r1, r3, #2
    34a2:	4b07      	ldr	r3, [pc, #28]	; (34c0 <_get_sercom_index+0x40>)
    34a4:	5ccb      	ldrb	r3, [r1, r3]
    34a6:	429a      	cmp	r2, r3
    34a8:	d0f7      	beq.n	349a <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    34aa:	3001      	adds	r0, #1
    34ac:	b2c0      	uxtb	r0, r0
    34ae:	e7ec      	b.n	348a <_get_sercom_index+0xa>
    34b0:	000033c5 	.word	0x000033c5
    34b4:	0000025e 	.word	0x0000025e
    34b8:	00010444 	.word	0x00010444
    34bc:	00002e6d 	.word	0x00002e6d
    34c0:	000103d4 	.word	0x000103d4

000034c4 <_usart_init>:
{
    34c4:	b570      	push	{r4, r5, r6, lr}
    34c6:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    34c8:	4b38      	ldr	r3, [pc, #224]	; (35ac <_usart_init+0xe8>)
    34ca:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    34cc:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    34ce:	07db      	lsls	r3, r3, #31
    34d0:	d41d      	bmi.n	350e <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    34d2:	0083      	lsls	r3, r0, #2
    34d4:	181b      	adds	r3, r3, r0
    34d6:	009a      	lsls	r2, r3, #2
    34d8:	4b35      	ldr	r3, [pc, #212]	; (35b0 <_usart_init+0xec>)
    34da:	189b      	adds	r3, r3, r2
    34dc:	685a      	ldr	r2, [r3, #4]
    34de:	231c      	movs	r3, #28
    34e0:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    34e2:	69e3      	ldr	r3, [r4, #28]
    34e4:	079b      	lsls	r3, r3, #30
    34e6:	d1fc      	bne.n	34e2 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    34e8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    34ea:	079b      	lsls	r3, r3, #30
    34ec:	d509      	bpl.n	3502 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    34ee:	6823      	ldr	r3, [r4, #0]
    34f0:	2102      	movs	r1, #2
    34f2:	438b      	bics	r3, r1
    34f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    34f6:	69e3      	ldr	r3, [r4, #28]
    34f8:	079b      	lsls	r3, r3, #30
    34fa:	d1fc      	bne.n	34f6 <_usart_init+0x32>
    34fc:	69e3      	ldr	r3, [r4, #28]
    34fe:	079b      	lsls	r3, r3, #30
    3500:	d4fc      	bmi.n	34fc <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3502:	2301      	movs	r3, #1
    3504:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3506:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3508:	69e3      	ldr	r3, [r4, #28]
    350a:	079b      	lsls	r3, r3, #30
    350c:	d1fc      	bne.n	3508 <_usart_init+0x44>
    350e:	69e3      	ldr	r3, [r4, #28]
    3510:	07db      	lsls	r3, r3, #31
    3512:	d4fc      	bmi.n	350e <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3514:	0083      	lsls	r3, r0, #2
    3516:	181b      	adds	r3, r3, r0
    3518:	009a      	lsls	r2, r3, #2
    351a:	4b25      	ldr	r3, [pc, #148]	; (35b0 <_usart_init+0xec>)
    351c:	189b      	adds	r3, r3, r2
    351e:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3520:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3522:	69e3      	ldr	r3, [r4, #28]
    3524:	079b      	lsls	r3, r3, #30
    3526:	d1fc      	bne.n	3522 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3528:	0083      	lsls	r3, r0, #2
    352a:	181b      	adds	r3, r3, r0
    352c:	009a      	lsls	r2, r3, #2
    352e:	4b20      	ldr	r3, [pc, #128]	; (35b0 <_usart_init+0xec>)
    3530:	189b      	adds	r3, r3, r2
    3532:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3534:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3536:	69e3      	ldr	r3, [r4, #28]
    3538:	075b      	lsls	r3, r3, #29
    353a:	d1fc      	bne.n	3536 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    353c:	0083      	lsls	r3, r0, #2
    353e:	181b      	adds	r3, r3, r0
    3540:	009a      	lsls	r2, r3, #2
    3542:	4b1b      	ldr	r3, [pc, #108]	; (35b0 <_usart_init+0xec>)
    3544:	189b      	adds	r3, r3, r2
    3546:	685b      	ldr	r3, [r3, #4]
    3548:	049a      	lsls	r2, r3, #18
    354a:	d40b      	bmi.n	3564 <_usart_init+0xa0>
    354c:	22c0      	movs	r2, #192	; 0xc0
    354e:	01d2      	lsls	r2, r2, #7
    3550:	4213      	tst	r3, r2
    3552:	d107      	bne.n	3564 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3554:	0083      	lsls	r3, r0, #2
    3556:	181b      	adds	r3, r3, r0
    3558:	009a      	lsls	r2, r3, #2
    355a:	4b15      	ldr	r3, [pc, #84]	; (35b0 <_usart_init+0xec>)
    355c:	189b      	adds	r3, r3, r2
    355e:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    3560:	81a3      	strh	r3, [r4, #12]
    3562:	e015      	b.n	3590 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3564:	0083      	lsls	r3, r0, #2
    3566:	181b      	adds	r3, r3, r0
    3568:	009a      	lsls	r2, r3, #2
    356a:	4911      	ldr	r1, [pc, #68]	; (35b0 <_usart_init+0xec>)
    356c:	1889      	adds	r1, r1, r2
    356e:	898a      	ldrh	r2, [r1, #12]
    3570:	89a3      	ldrh	r3, [r4, #12]
    3572:	04d2      	lsls	r2, r2, #19
    3574:	0cd2      	lsrs	r2, r2, #19
    3576:	0b5b      	lsrs	r3, r3, #13
    3578:	035b      	lsls	r3, r3, #13
    357a:	4313      	orrs	r3, r2
    357c:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    357e:	7b8b      	ldrb	r3, [r1, #14]
    3580:	2207      	movs	r2, #7
    3582:	401a      	ands	r2, r3
    3584:	89a3      	ldrh	r3, [r4, #12]
    3586:	0352      	lsls	r2, r2, #13
    3588:	04db      	lsls	r3, r3, #19
    358a:	0cdb      	lsrs	r3, r3, #19
    358c:	4313      	orrs	r3, r2
    358e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3590:	4a07      	ldr	r2, [pc, #28]	; (35b0 <_usart_init+0xec>)
    3592:	0083      	lsls	r3, r0, #2
    3594:	181d      	adds	r5, r3, r0
    3596:	00a9      	lsls	r1, r5, #2
    3598:	000d      	movs	r5, r1
    359a:	1851      	adds	r1, r2, r1
    359c:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    359e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    35a0:	1952      	adds	r2, r2, r5
    35a2:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    35a4:	2330      	movs	r3, #48	; 0x30
    35a6:	54e2      	strb	r2, [r4, r3]
}
    35a8:	2000      	movs	r0, #0
    35aa:	bd70      	pop	{r4, r5, r6, pc}
    35ac:	00003481 	.word	0x00003481
    35b0:	000103d4 	.word	0x000103d4

000035b4 <_usart_async_init>:
{
    35b4:	b570      	push	{r4, r5, r6, lr}
    35b6:	0006      	movs	r6, r0
    35b8:	000c      	movs	r4, r1
	ASSERT(device);
    35ba:	1e43      	subs	r3, r0, #1
    35bc:	4198      	sbcs	r0, r3
    35be:	b2c0      	uxtb	r0, r0
    35c0:	22c4      	movs	r2, #196	; 0xc4
    35c2:	4919      	ldr	r1, [pc, #100]	; (3628 <_usart_async_init+0x74>)
    35c4:	4b19      	ldr	r3, [pc, #100]	; (362c <_usart_async_init+0x78>)
    35c6:	4798      	blx	r3
	init_status = _usart_init(hw);
    35c8:	0020      	movs	r0, r4
    35ca:	4b19      	ldr	r3, [pc, #100]	; (3630 <_usart_async_init+0x7c>)
    35cc:	4798      	blx	r3
    35ce:	1e05      	subs	r5, r0, #0
	if (init_status) {
    35d0:	d001      	beq.n	35d6 <_usart_async_init+0x22>
}
    35d2:	0028      	movs	r0, r5
    35d4:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    35d6:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    35d8:	0031      	movs	r1, r6
    35da:	0020      	movs	r0, r4
    35dc:	4b15      	ldr	r3, [pc, #84]	; (3634 <_usart_async_init+0x80>)
    35de:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    35e0:	0020      	movs	r0, r4
    35e2:	4b15      	ldr	r3, [pc, #84]	; (3638 <_usart_async_init+0x84>)
    35e4:	4798      	blx	r3
    35e6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    35e8:	2b00      	cmp	r3, #0
    35ea:	db0a      	blt.n	3602 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35ec:	211f      	movs	r1, #31
    35ee:	4001      	ands	r1, r0
    35f0:	2201      	movs	r2, #1
    35f2:	408a      	lsls	r2, r1
    35f4:	2180      	movs	r1, #128	; 0x80
    35f6:	4c11      	ldr	r4, [pc, #68]	; (363c <_usart_async_init+0x88>)
    35f8:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    35fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35fe:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    3602:	2b00      	cmp	r3, #0
    3604:	db07      	blt.n	3616 <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3606:	211f      	movs	r1, #31
    3608:	4001      	ands	r1, r0
    360a:	2201      	movs	r2, #1
    360c:	408a      	lsls	r2, r1
    360e:	21c0      	movs	r1, #192	; 0xc0
    3610:	0049      	lsls	r1, r1, #1
    3612:	4c0a      	ldr	r4, [pc, #40]	; (363c <_usart_async_init+0x88>)
    3614:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    3616:	2b00      	cmp	r3, #0
    3618:	dbdb      	blt.n	35d2 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    361a:	231f      	movs	r3, #31
    361c:	4018      	ands	r0, r3
    361e:	3b1e      	subs	r3, #30
    3620:	4083      	lsls	r3, r0
    3622:	4a06      	ldr	r2, [pc, #24]	; (363c <_usart_async_init+0x88>)
    3624:	6013      	str	r3, [r2, #0]
    3626:	e7d4      	b.n	35d2 <_usart_async_init+0x1e>
    3628:	00010444 	.word	0x00010444
    362c:	00002e6d 	.word	0x00002e6d
    3630:	000034c5 	.word	0x000034c5
    3634:	00003439 	.word	0x00003439
    3638:	00003451 	.word	0x00003451
    363c:	e000e100 	.word	0xe000e100

00003640 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3640:	6983      	ldr	r3, [r0, #24]
    3642:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    3644:	8519      	strh	r1, [r3, #40]	; 0x28
}
    3646:	4770      	bx	lr

00003648 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3648:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    364a:	2201      	movs	r2, #1
    364c:	759a      	strb	r2, [r3, #22]
}
    364e:	4770      	bx	lr

00003650 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3650:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3652:	2202      	movs	r2, #2
    3654:	759a      	strb	r2, [r3, #22]
}
    3656:	4770      	bx	lr

00003658 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    3658:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    365a:	4b02      	ldr	r3, [pc, #8]	; (3664 <SERCOM3_Handler+0xc>)
    365c:	6818      	ldr	r0, [r3, #0]
    365e:	4b02      	ldr	r3, [pc, #8]	; (3668 <SERCOM3_Handler+0x10>)
    3660:	4798      	blx	r3
}
    3662:	bd10      	pop	{r4, pc}
    3664:	20000ef8 	.word	0x20000ef8
    3668:	000033d5 	.word	0x000033d5

0000366c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    366e:	0006      	movs	r6, r0
    3670:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3672:	0008      	movs	r0, r1
    3674:	4b73      	ldr	r3, [pc, #460]	; (3844 <_spi_m_sync_init+0x1d8>)
    3676:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3678:	2300      	movs	r3, #0
    367a:	e001      	b.n	3680 <_spi_m_sync_init+0x14>
    367c:	3301      	adds	r3, #1
    367e:	b2db      	uxtb	r3, r3
    3680:	2b02      	cmp	r3, #2
    3682:	d80b      	bhi.n	369c <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    3684:	0119      	lsls	r1, r3, #4
    3686:	18c9      	adds	r1, r1, r3
    3688:	4a6f      	ldr	r2, [pc, #444]	; (3848 <_spi_m_sync_init+0x1dc>)
    368a:	1852      	adds	r2, r2, r1
    368c:	324c      	adds	r2, #76	; 0x4c
    368e:	7812      	ldrb	r2, [r2, #0]
    3690:	4290      	cmp	r0, r2
    3692:	d1f3      	bne.n	367c <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    3694:	4d6c      	ldr	r5, [pc, #432]	; (3848 <_spi_m_sync_init+0x1dc>)
    3696:	353c      	adds	r5, #60	; 0x3c
    3698:	186d      	adds	r5, r5, r1
    369a:	e000      	b.n	369e <_spi_m_sync_init+0x32>
	return NULL;
    369c:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    369e:	2e00      	cmp	r6, #0
    36a0:	d100      	bne.n	36a4 <_spi_m_sync_init+0x38>
    36a2:	e082      	b.n	37aa <_spi_m_sync_init+0x13e>
    36a4:	2c00      	cmp	r4, #0
    36a6:	d100      	bne.n	36aa <_spi_m_sync_init+0x3e>
    36a8:	e07d      	b.n	37a6 <_spi_m_sync_init+0x13a>
    36aa:	2001      	movs	r0, #1
    36ac:	4a67      	ldr	r2, [pc, #412]	; (384c <_spi_m_sync_init+0x1e0>)
    36ae:	4968      	ldr	r1, [pc, #416]	; (3850 <_spi_m_sync_init+0x1e4>)
    36b0:	4b68      	ldr	r3, [pc, #416]	; (3854 <_spi_m_sync_init+0x1e8>)
    36b2:	4798      	blx	r3

	if (regs == NULL) {
    36b4:	2d00      	cmp	r5, #0
    36b6:	d100      	bne.n	36ba <_spi_m_sync_init+0x4e>
    36b8:	e0c0      	b.n	383c <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    36ba:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    36bc:	07db      	lsls	r3, r3, #31
    36be:	d421      	bmi.n	3704 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    36c0:	782a      	ldrb	r2, [r5, #0]
    36c2:	786b      	ldrb	r3, [r5, #1]
    36c4:	021b      	lsls	r3, r3, #8
    36c6:	4313      	orrs	r3, r2
    36c8:	78aa      	ldrb	r2, [r5, #2]
    36ca:	0412      	lsls	r2, r2, #16
    36cc:	4313      	orrs	r3, r2
    36ce:	78ea      	ldrb	r2, [r5, #3]
    36d0:	0612      	lsls	r2, r2, #24
    36d2:	431a      	orrs	r2, r3
    36d4:	231c      	movs	r3, #28
    36d6:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36d8:	69e3      	ldr	r3, [r4, #28]
    36da:	079b      	lsls	r3, r3, #30
    36dc:	d1fc      	bne.n	36d8 <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    36de:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    36e0:	079b      	lsls	r3, r3, #30
    36e2:	d509      	bpl.n	36f8 <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    36e4:	6823      	ldr	r3, [r4, #0]
    36e6:	2102      	movs	r1, #2
    36e8:	438b      	bics	r3, r1
    36ea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36ec:	69e3      	ldr	r3, [r4, #28]
    36ee:	079b      	lsls	r3, r3, #30
    36f0:	d1fc      	bne.n	36ec <_spi_m_sync_init+0x80>
    36f2:	69e3      	ldr	r3, [r4, #28]
    36f4:	079b      	lsls	r3, r3, #30
    36f6:	d4fc      	bmi.n	36f2 <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    36f8:	2301      	movs	r3, #1
    36fa:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    36fc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    36fe:	69e3      	ldr	r3, [r4, #28]
    3700:	079b      	lsls	r3, r3, #30
    3702:	d1fc      	bne.n	36fe <_spi_m_sync_init+0x92>
    3704:	69e3      	ldr	r3, [r4, #28]
    3706:	07db      	lsls	r3, r3, #31
    3708:	d4fc      	bmi.n	3704 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    370a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    370c:	782b      	ldrb	r3, [r5, #0]
    370e:	786a      	ldrb	r2, [r5, #1]
    3710:	0212      	lsls	r2, r2, #8
    3712:	431a      	orrs	r2, r3
    3714:	78ab      	ldrb	r3, [r5, #2]
    3716:	041b      	lsls	r3, r3, #16
    3718:	431a      	orrs	r2, r3
    371a:	78eb      	ldrb	r3, [r5, #3]
    371c:	061b      	lsls	r3, r3, #24
    371e:	4313      	orrs	r3, r2
    3720:	221c      	movs	r2, #28
    3722:	4013      	ands	r3, r2
    3724:	2b08      	cmp	r3, #8
    3726:	d042      	beq.n	37ae <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    3728:	2c00      	cmp	r4, #0
    372a:	d100      	bne.n	372e <_spi_m_sync_init+0xc2>
    372c:	e082      	b.n	3834 <_spi_m_sync_init+0x1c8>
    372e:	2d00      	cmp	r5, #0
    3730:	d100      	bne.n	3734 <_spi_m_sync_init+0xc8>
    3732:	e07d      	b.n	3830 <_spi_m_sync_init+0x1c4>
    3734:	2001      	movs	r0, #1
    3736:	4a48      	ldr	r2, [pc, #288]	; (3858 <_spi_m_sync_init+0x1ec>)
    3738:	4945      	ldr	r1, [pc, #276]	; (3850 <_spi_m_sync_init+0x1e4>)
    373a:	4b46      	ldr	r3, [pc, #280]	; (3854 <_spi_m_sync_init+0x1e8>)
    373c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    373e:	782b      	ldrb	r3, [r5, #0]
    3740:	786a      	ldrb	r2, [r5, #1]
    3742:	0212      	lsls	r2, r2, #8
    3744:	431a      	orrs	r2, r3
    3746:	78ab      	ldrb	r3, [r5, #2]
    3748:	041b      	lsls	r3, r3, #16
    374a:	431a      	orrs	r2, r3
    374c:	78eb      	ldrb	r3, [r5, #3]
    374e:	061b      	lsls	r3, r3, #24
    3750:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    3752:	4a42      	ldr	r2, [pc, #264]	; (385c <_spi_m_sync_init+0x1f0>)
    3754:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3756:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3758:	69e3      	ldr	r3, [r4, #28]
    375a:	079b      	lsls	r3, r3, #30
    375c:	d1fc      	bne.n	3758 <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    375e:	792b      	ldrb	r3, [r5, #4]
    3760:	796a      	ldrb	r2, [r5, #5]
    3762:	0212      	lsls	r2, r2, #8
    3764:	431a      	orrs	r2, r3
    3766:	79ab      	ldrb	r3, [r5, #6]
    3768:	041b      	lsls	r3, r3, #16
    376a:	431a      	orrs	r2, r3
    376c:	79eb      	ldrb	r3, [r5, #7]
    376e:	061b      	lsls	r3, r3, #24
    3770:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    3772:	4a3b      	ldr	r2, [pc, #236]	; (3860 <_spi_m_sync_init+0x1f4>)
    3774:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    3776:	2280      	movs	r2, #128	; 0x80
    3778:	0292      	lsls	r2, r2, #10
    377a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    377c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    377e:	69e3      	ldr	r3, [r4, #28]
    3780:	075b      	lsls	r3, r3, #29
    3782:	d1fc      	bne.n	377e <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3784:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3786:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3788:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    378a:	2330      	movs	r3, #48	; 0x30
    378c:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    378e:	792b      	ldrb	r3, [r5, #4]
    3790:	075b      	lsls	r3, r3, #29
    3792:	d151      	bne.n	3838 <_spi_m_sync_init+0x1cc>
    3794:	2301      	movs	r3, #1
    3796:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    3798:	7baa      	ldrb	r2, [r5, #14]
    379a:	7beb      	ldrb	r3, [r5, #15]
    379c:	021b      	lsls	r3, r3, #8
    379e:	4313      	orrs	r3, r2
    37a0:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    37a2:	2000      	movs	r0, #0
}
    37a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    37a6:	2000      	movs	r0, #0
    37a8:	e780      	b.n	36ac <_spi_m_sync_init+0x40>
    37aa:	2000      	movs	r0, #0
    37ac:	e77e      	b.n	36ac <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    37ae:	2c00      	cmp	r4, #0
    37b0:	d03c      	beq.n	382c <_spi_m_sync_init+0x1c0>
    37b2:	2d00      	cmp	r5, #0
    37b4:	d038      	beq.n	3828 <_spi_m_sync_init+0x1bc>
    37b6:	2001      	movs	r0, #1
    37b8:	4a2a      	ldr	r2, [pc, #168]	; (3864 <_spi_m_sync_init+0x1f8>)
    37ba:	4925      	ldr	r1, [pc, #148]	; (3850 <_spi_m_sync_init+0x1e4>)
    37bc:	4b25      	ldr	r3, [pc, #148]	; (3854 <_spi_m_sync_init+0x1e8>)
    37be:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    37c0:	782b      	ldrb	r3, [r5, #0]
    37c2:	786a      	ldrb	r2, [r5, #1]
    37c4:	0212      	lsls	r2, r2, #8
    37c6:	431a      	orrs	r2, r3
    37c8:	78ab      	ldrb	r3, [r5, #2]
    37ca:	041b      	lsls	r3, r3, #16
    37cc:	431a      	orrs	r2, r3
    37ce:	78eb      	ldrb	r3, [r5, #3]
    37d0:	061b      	lsls	r3, r3, #24
    37d2:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    37d4:	4a21      	ldr	r2, [pc, #132]	; (385c <_spi_m_sync_init+0x1f0>)
    37d6:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    37d8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    37da:	69e3      	ldr	r3, [r4, #28]
    37dc:	079b      	lsls	r3, r3, #30
    37de:	d1fc      	bne.n	37da <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    37e0:	792b      	ldrb	r3, [r5, #4]
    37e2:	796a      	ldrb	r2, [r5, #5]
    37e4:	0212      	lsls	r2, r2, #8
    37e6:	431a      	orrs	r2, r3
    37e8:	79ab      	ldrb	r3, [r5, #6]
    37ea:	041b      	lsls	r3, r3, #16
    37ec:	431a      	orrs	r2, r3
    37ee:	79eb      	ldrb	r3, [r5, #7]
    37f0:	061b      	lsls	r3, r3, #24
    37f2:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    37f4:	4a1c      	ldr	r2, [pc, #112]	; (3868 <_spi_m_sync_init+0x1fc>)
    37f6:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    37f8:	4a1c      	ldr	r2, [pc, #112]	; (386c <_spi_m_sync_init+0x200>)
    37fa:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    37fc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    37fe:	69e3      	ldr	r3, [r4, #28]
    3800:	075b      	lsls	r3, r3, #29
    3802:	d1fc      	bne.n	37fe <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3804:	7a2b      	ldrb	r3, [r5, #8]
    3806:	7a6a      	ldrb	r2, [r5, #9]
    3808:	0212      	lsls	r2, r2, #8
    380a:	431a      	orrs	r2, r3
    380c:	7aab      	ldrb	r3, [r5, #10]
    380e:	041b      	lsls	r3, r3, #16
    3810:	431a      	orrs	r2, r3
    3812:	7aeb      	ldrb	r3, [r5, #11]
    3814:	061b      	lsls	r3, r3, #24
    3816:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3818:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    381a:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    381c:	2330      	movs	r3, #48	; 0x30
    381e:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3820:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3822:	2b00      	cmp	r3, #0
    3824:	d1fc      	bne.n	3820 <_spi_m_sync_init+0x1b4>
    3826:	e7b2      	b.n	378e <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    3828:	2000      	movs	r0, #0
    382a:	e7c5      	b.n	37b8 <_spi_m_sync_init+0x14c>
    382c:	2000      	movs	r0, #0
    382e:	e7c3      	b.n	37b8 <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    3830:	2000      	movs	r0, #0
    3832:	e780      	b.n	3736 <_spi_m_sync_init+0xca>
    3834:	2000      	movs	r0, #0
    3836:	e77e      	b.n	3736 <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3838:	2302      	movs	r3, #2
    383a:	e7ac      	b.n	3796 <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    383c:	200d      	movs	r0, #13
    383e:	4240      	negs	r0, r0
    3840:	e7b0      	b.n	37a4 <_spi_m_sync_init+0x138>
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	000033c5 	.word	0x000033c5
    3848:	000103d4 	.word	0x000103d4
    384c:	00000952 	.word	0x00000952
    3850:	00010444 	.word	0x00010444
    3854:	00002e6d 	.word	0x00002e6d
    3858:	00000917 	.word	0x00000917
    385c:	fffffefc 	.word	0xfffffefc
    3860:	fffd1dbf 	.word	0xfffd1dbf
    3864:	0000092b 	.word	0x0000092b
    3868:	fffdddbf 	.word	0xfffdddbf
    386c:	00020240 	.word	0x00020240

00003870 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3870:	b510      	push	{r4, lr}
    3872:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    3874:	d00d      	beq.n	3892 <_spi_m_sync_enable+0x22>
    3876:	6803      	ldr	r3, [r0, #0]
    3878:	2b00      	cmp	r3, #0
    387a:	d008      	beq.n	388e <_spi_m_sync_enable+0x1e>
    387c:	2001      	movs	r0, #1
    387e:	4a06      	ldr	r2, [pc, #24]	; (3898 <_spi_m_sync_enable+0x28>)
    3880:	4906      	ldr	r1, [pc, #24]	; (389c <_spi_m_sync_enable+0x2c>)
    3882:	4b07      	ldr	r3, [pc, #28]	; (38a0 <_spi_m_sync_enable+0x30>)
    3884:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3886:	6820      	ldr	r0, [r4, #0]
    3888:	4b06      	ldr	r3, [pc, #24]	; (38a4 <_spi_m_sync_enable+0x34>)
    388a:	4798      	blx	r3
}
    388c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    388e:	2000      	movs	r0, #0
    3890:	e7f5      	b.n	387e <_spi_m_sync_enable+0xe>
    3892:	2000      	movs	r0, #0
    3894:	e7f3      	b.n	387e <_spi_m_sync_enable+0xe>
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	000009ad 	.word	0x000009ad
    389c:	00010444 	.word	0x00010444
    38a0:	00002e6d 	.word	0x00002e6d
    38a4:	00003461 	.word	0x00003461

000038a8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    38a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38aa:	46ce      	mov	lr, r9
    38ac:	4647      	mov	r7, r8
    38ae:	b580      	push	{r7, lr}
    38b0:	b089      	sub	sp, #36	; 0x24
    38b2:	4681      	mov	r9, r0
    38b4:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    38b6:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    38b8:	680b      	ldr	r3, [r1, #0]
    38ba:	9303      	str	r3, [sp, #12]
    38bc:	684b      	ldr	r3, [r1, #4]
    38be:	9304      	str	r3, [sp, #16]
    38c0:	2300      	movs	r3, #0
    38c2:	9305      	str	r3, [sp, #20]
    38c4:	9306      	str	r3, [sp, #24]
    38c6:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    38c8:	2800      	cmp	r0, #0
    38ca:	d014      	beq.n	38f6 <_spi_m_sync_trans+0x4e>
    38cc:	2c00      	cmp	r4, #0
    38ce:	d010      	beq.n	38f2 <_spi_m_sync_trans+0x4a>
    38d0:	2001      	movs	r0, #1
    38d2:	4a37      	ldr	r2, [pc, #220]	; (39b0 <_spi_m_sync_trans+0x108>)
    38d4:	4937      	ldr	r1, [pc, #220]	; (39b4 <_spi_m_sync_trans+0x10c>)
    38d6:	4b38      	ldr	r3, [pc, #224]	; (39b8 <_spi_m_sync_trans+0x110>)
    38d8:	4798      	blx	r3
    38da:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    38dc:	075b      	lsls	r3, r3, #29
    38de:	d164      	bne.n	39aa <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    38e0:	69e3      	ldr	r3, [r4, #28]
    38e2:	079b      	lsls	r3, r3, #30
    38e4:	d1fc      	bne.n	38e0 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    38e6:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    38e8:	079b      	lsls	r3, r3, #30
    38ea:	d420      	bmi.n	392e <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    38ec:	2014      	movs	r0, #20
    38ee:	4240      	negs	r0, r0
    38f0:	e056      	b.n	39a0 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    38f2:	2000      	movs	r0, #0
    38f4:	e7ed      	b.n	38d2 <_spi_m_sync_trans+0x2a>
    38f6:	2000      	movs	r0, #0
    38f8:	e7eb      	b.n	38d2 <_spi_m_sync_trans+0x2a>
		return false;
    38fa:	2200      	movs	r2, #0
    38fc:	e02d      	b.n	395a <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    38fe:	7848      	ldrb	r0, [r1, #1]
    3900:	0200      	lsls	r0, r0, #8
    3902:	4647      	mov	r7, r8
    3904:	4307      	orrs	r7, r0
    3906:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    3908:	3102      	adds	r1, #2
    390a:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    390c:	3201      	adds	r2, #1
    390e:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    3910:	4642      	mov	r2, r8
    3912:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3914:	b25b      	sxtb	r3, r3
    3916:	2b00      	cmp	r3, #0
    3918:	db35      	blt.n	3986 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    391a:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    391c:	2800      	cmp	r0, #0
    391e:	db3a      	blt.n	3996 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3920:	9805      	ldr	r0, [sp, #20]
    3922:	68ab      	ldr	r3, [r5, #8]
    3924:	4298      	cmp	r0, r3
    3926:	d302      	bcc.n	392e <_spi_m_sync_trans+0x86>
    3928:	9a06      	ldr	r2, [sp, #24]
    392a:	4293      	cmp	r3, r2
    392c:	d933      	bls.n	3996 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    392e:	7e23      	ldrb	r3, [r4, #24]
    3930:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3932:	075a      	lsls	r2, r3, #29
    3934:	d5e1      	bpl.n	38fa <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3936:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3938:	9a04      	ldr	r2, [sp, #16]
    393a:	2a00      	cmp	r2, #0
    393c:	d008      	beq.n	3950 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    393e:	1c50      	adds	r0, r2, #1
    3940:	9004      	str	r0, [sp, #16]
    3942:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    3944:	2e01      	cmp	r6, #1
    3946:	d903      	bls.n	3950 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3948:	1c90      	adds	r0, r2, #2
    394a:	9004      	str	r0, [sp, #16]
    394c:	0a09      	lsrs	r1, r1, #8
    394e:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    3950:	9a06      	ldr	r2, [sp, #24]
    3952:	9201      	str	r2, [sp, #4]
    3954:	3201      	adds	r2, #1
    3956:	9206      	str	r2, [sp, #24]
	return true;
    3958:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    395a:	2a00      	cmp	r2, #0
    395c:	d1da      	bne.n	3914 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    395e:	9906      	ldr	r1, [sp, #24]
    3960:	9a05      	ldr	r2, [sp, #20]
    3962:	4291      	cmp	r1, r2
    3964:	d3d6      	bcc.n	3914 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3966:	4649      	mov	r1, r9
    3968:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    396a:	07d9      	lsls	r1, r3, #31
    396c:	d5d2      	bpl.n	3914 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    396e:	9903      	ldr	r1, [sp, #12]
    3970:	2900      	cmp	r1, #0
    3972:	d006      	beq.n	3982 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    3974:	1c48      	adds	r0, r1, #1
    3976:	9003      	str	r0, [sp, #12]
    3978:	7808      	ldrb	r0, [r1, #0]
    397a:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    397c:	2e01      	cmp	r6, #1
    397e:	d8be      	bhi.n	38fe <_spi_m_sync_trans+0x56>
    3980:	e7c4      	b.n	390c <_spi_m_sync_trans+0x64>
		data = dummy;
    3982:	4680      	mov	r8, r0
    3984:	e7c2      	b.n	390c <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3986:	2301      	movs	r3, #1
    3988:	425b      	negs	r3, r3
    398a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    398c:	3381      	adds	r3, #129	; 0x81
    398e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3990:	2013      	movs	r0, #19
    3992:	4240      	negs	r0, r0
    3994:	e7c2      	b.n	391c <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3996:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3998:	079b      	lsls	r3, r3, #30
    399a:	d0fc      	beq.n	3996 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    399c:	2303      	movs	r3, #3
    399e:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    39a0:	b009      	add	sp, #36	; 0x24
    39a2:	bc0c      	pop	{r2, r3}
    39a4:	4690      	mov	r8, r2
    39a6:	4699      	mov	r9, r3
    39a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    39aa:	2004      	movs	r0, #4
    39ac:	4240      	negs	r0, r0
    39ae:	e7f7      	b.n	39a0 <_spi_m_sync_trans+0xf8>
    39b0:	00000ab2 	.word	0x00000ab2
    39b4:	00010444 	.word	0x00010444
    39b8:	00002e6d 	.word	0x00002e6d

000039bc <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    39bc:	4a14      	ldr	r2, [pc, #80]	; (3a10 <_sysctrl_init_sources+0x54>)
    39be:	2366      	movs	r3, #102	; 0x66
    39c0:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    39c2:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    39c4:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    39c6:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    39c8:	0f9b      	lsrs	r3, r3, #30
    39ca:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    39cc:	0409      	lsls	r1, r1, #16
    39ce:	4811      	ldr	r0, [pc, #68]	; (3a14 <_sysctrl_init_sources+0x58>)
    39d0:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    39d2:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    39d4:	2102      	movs	r1, #2
    39d6:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    39d8:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    39da:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    39dc:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    39de:	041b      	lsls	r3, r3, #16
    39e0:	21fe      	movs	r1, #254	; 0xfe
    39e2:	03c9      	lsls	r1, r1, #15
    39e4:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    39e6:	2146      	movs	r1, #70	; 0x46
    39e8:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    39ea:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    39ec:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    39ee:	3927      	subs	r1, #39	; 0x27
    39f0:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    39f2:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    39f4:	4b06      	ldr	r3, [pc, #24]	; (3a10 <_sysctrl_init_sources+0x54>)
    39f6:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    39f8:	079b      	lsls	r3, r3, #30
    39fa:	d5fb      	bpl.n	39f4 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <_sysctrl_init_sources+0x54>)
    39fe:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    3a00:	075b      	lsls	r3, r3, #29
    3a02:	d5fb      	bpl.n	39fc <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3a04:	4b02      	ldr	r3, [pc, #8]	; (3a10 <_sysctrl_init_sources+0x54>)
    3a06:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    3a08:	071b      	lsls	r3, r3, #28
    3a0a:	d5fb      	bpl.n	3a04 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	40000800 	.word	0x40000800
    3a14:	0fff0000 	.word	0x0fff0000

00003a18 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3a18:	2202      	movs	r2, #2
    3a1a:	4b1f      	ldr	r3, [pc, #124]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a1c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3a1e:	4b1e      	ldr	r3, [pc, #120]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a20:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3a22:	06db      	lsls	r3, r3, #27
    3a24:	d5fb      	bpl.n	3a1e <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    3a26:	4a1d      	ldr	r2, [pc, #116]	; (3a9c <_sysctrl_init_referenced_generators+0x84>)
    3a28:	4b1b      	ldr	r3, [pc, #108]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a2a:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3a2c:	4b1c      	ldr	r3, [pc, #112]	; (3aa0 <_sysctrl_init_referenced_generators+0x88>)
    3a2e:	681b      	ldr	r3, [r3, #0]
    3a30:	0e9b      	lsrs	r3, r3, #26
    3a32:	2b3f      	cmp	r3, #63	; 0x3f
    3a34:	d028      	beq.n	3a88 <_sysctrl_init_referenced_generators+0x70>
    3a36:	029b      	lsls	r3, r3, #10
    3a38:	2280      	movs	r2, #128	; 0x80
    3a3a:	0092      	lsls	r2, r2, #2
    3a3c:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    3a3e:	4b16      	ldr	r3, [pc, #88]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a40:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3a42:	2293      	movs	r2, #147	; 0x93
    3a44:	0052      	lsls	r2, r2, #1
    3a46:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    3a48:	2142      	movs	r1, #66	; 0x42
    3a4a:	3ae2      	subs	r2, #226	; 0xe2
    3a4c:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    3a4e:	4a15      	ldr	r2, [pc, #84]	; (3aa4 <_sysctrl_init_referenced_generators+0x8c>)
    3a50:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    3a52:	2200      	movs	r2, #0
    3a54:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    3a56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    3a58:	075b      	lsls	r3, r3, #29
    3a5a:	d518      	bpl.n	3a8e <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3a5c:	4b0e      	ldr	r3, [pc, #56]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a5e:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    3a60:	06db      	lsls	r3, r3, #27
    3a62:	d5fb      	bpl.n	3a5c <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    3a64:	2350      	movs	r3, #80	; 0x50
    3a66:	4a0c      	ldr	r2, [pc, #48]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a68:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    3a6a:	075b      	lsls	r3, r3, #29
    3a6c:	d407      	bmi.n	3a7e <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    3a6e:	2350      	movs	r3, #80	; 0x50
    3a70:	5cd3      	ldrb	r3, [r2, r3]
    3a72:	07db      	lsls	r3, r3, #31
    3a74:	d403      	bmi.n	3a7e <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    3a76:	2350      	movs	r3, #80	; 0x50
    3a78:	5cd3      	ldrb	r3, [r2, r3]
    3a7a:	079b      	lsls	r3, r3, #30
    3a7c:	d5f2      	bpl.n	3a64 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3a7e:	4b0a      	ldr	r3, [pc, #40]	; (3aa8 <_sysctrl_init_referenced_generators+0x90>)
    3a80:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    3a82:	09db      	lsrs	r3, r3, #7
    3a84:	d1fb      	bne.n	3a7e <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3a86:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3a88:	22fc      	movs	r2, #252	; 0xfc
    3a8a:	01d2      	lsls	r2, r2, #7
    3a8c:	e7d7      	b.n	3a3e <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3a8e:	4b02      	ldr	r3, [pc, #8]	; (3a98 <_sysctrl_init_referenced_generators+0x80>)
    3a90:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3a92:	06db      	lsls	r3, r3, #27
    3a94:	d5fb      	bpl.n	3a8e <_sysctrl_init_referenced_generators+0x76>
    3a96:	e7e5      	b.n	3a64 <_sysctrl_init_referenced_generators+0x4c>
    3a98:	40000800 	.word	0x40000800
    3a9c:	0401bb80 	.word	0x0401bb80
    3aa0:	00806024 	.word	0x00806024
    3aa4:	000e05b7 	.word	0x000e05b7
    3aa8:	40000c00 	.word	0x40000c00

00003aac <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3aac:	4b02      	ldr	r3, [pc, #8]	; (3ab8 <_system_time_init+0xc>)
    3aae:	4a03      	ldr	r2, [pc, #12]	; (3abc <_system_time_init+0x10>)
    3ab0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3ab2:	2205      	movs	r2, #5
    3ab4:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    3ab6:	4770      	bx	lr
    3ab8:	e000e010 	.word	0xe000e010
    3abc:	00ffffff 	.word	0x00ffffff

00003ac0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3ac0:	b510      	push	{r4, lr}
	_system_time_init(hw);
    3ac2:	4b01      	ldr	r3, [pc, #4]	; (3ac8 <_delay_init+0x8>)
    3ac4:	4798      	blx	r3
}
    3ac6:	bd10      	pop	{r4, pc}
    3ac8:	00003aad 	.word	0x00003aad

00003acc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3acc:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3ace:	e00b      	b.n	3ae8 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    3ad0:	4b0b      	ldr	r3, [pc, #44]	; (3b00 <_delay_cycles+0x34>)
    3ad2:	480c      	ldr	r0, [pc, #48]	; (3b04 <_delay_cycles+0x38>)
    3ad4:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    3ad6:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3ad8:	4b09      	ldr	r3, [pc, #36]	; (3b00 <_delay_cycles+0x34>)
    3ada:	681b      	ldr	r3, [r3, #0]
    3adc:	03db      	lsls	r3, r3, #15
    3ade:	d5fb      	bpl.n	3ad8 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    3ae0:	4b09      	ldr	r3, [pc, #36]	; (3b08 <_delay_cycles+0x3c>)
    3ae2:	469c      	mov	ip, r3
    3ae4:	4461      	add	r1, ip
	while (n--) {
    3ae6:	0010      	movs	r0, r2
    3ae8:	1e42      	subs	r2, r0, #1
    3aea:	b2d2      	uxtb	r2, r2
    3aec:	2800      	cmp	r0, #0
    3aee:	d1ef      	bne.n	3ad0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    3af0:	4b03      	ldr	r3, [pc, #12]	; (3b00 <_delay_cycles+0x34>)
    3af2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3af4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3af6:	4b02      	ldr	r3, [pc, #8]	; (3b00 <_delay_cycles+0x34>)
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	03db      	lsls	r3, r3, #15
    3afc:	d5fb      	bpl.n	3af6 <_delay_cycles+0x2a>
		;
}
    3afe:	4770      	bx	lr
    3b00:	e000e010 	.word	0xe000e010
    3b04:	00ffffff 	.word	0x00ffffff
    3b08:	ff000001 	.word	0xff000001

00003b0c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3b0c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    3b0e:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3b10:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3b12:	07d2      	lsls	r2, r2, #31
    3b14:	d400      	bmi.n	3b18 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    3b16:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3b18:	2201      	movs	r2, #1
    3b1a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    3b1c:	6803      	ldr	r3, [r0, #0]
    3b1e:	4798      	blx	r3
}
    3b20:	e7f9      	b.n	3b16 <tc_interrupt_handler+0xa>
	...

00003b24 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3b24:	4b02      	ldr	r3, [pc, #8]	; (3b30 <tc_get_hardware_index+0xc>)
    3b26:	469c      	mov	ip, r3
    3b28:	4460      	add	r0, ip
    3b2a:	0a80      	lsrs	r0, r0, #10
    3b2c:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    3b2e:	4770      	bx	lr
    3b30:	bdffd400 	.word	0xbdffd400

00003b34 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    3b34:	4b06      	ldr	r3, [pc, #24]	; (3b50 <_tc_init_irq_param+0x1c>)
    3b36:	4298      	cmp	r0, r3
    3b38:	d003      	beq.n	3b42 <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    3b3a:	4b06      	ldr	r3, [pc, #24]	; (3b54 <_tc_init_irq_param+0x20>)
    3b3c:	4298      	cmp	r0, r3
    3b3e:	d003      	beq.n	3b48 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    3b40:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    3b42:	4b05      	ldr	r3, [pc, #20]	; (3b58 <_tc_init_irq_param+0x24>)
    3b44:	6019      	str	r1, [r3, #0]
    3b46:	e7f8      	b.n	3b3a <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    3b48:	4b03      	ldr	r3, [pc, #12]	; (3b58 <_tc_init_irq_param+0x24>)
    3b4a:	6059      	str	r1, [r3, #4]
}
    3b4c:	e7f8      	b.n	3b40 <_tc_init_irq_param+0xc>
    3b4e:	46c0      	nop			; (mov r8, r8)
    3b50:	42002c00 	.word	0x42002c00
    3b54:	42003000 	.word	0x42003000
    3b58:	20000efc 	.word	0x20000efc

00003b5c <get_tc_index>:
{
    3b5c:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    3b5e:	4b0e      	ldr	r3, [pc, #56]	; (3b98 <get_tc_index+0x3c>)
    3b60:	4798      	blx	r3
    3b62:	3003      	adds	r0, #3
    3b64:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3b66:	2300      	movs	r3, #0
    3b68:	2b01      	cmp	r3, #1
    3b6a:	d80b      	bhi.n	3b84 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    3b6c:	009a      	lsls	r2, r3, #2
    3b6e:	18d2      	adds	r2, r2, r3
    3b70:	0091      	lsls	r1, r2, #2
    3b72:	4a0a      	ldr	r2, [pc, #40]	; (3b9c <get_tc_index+0x40>)
    3b74:	5c8a      	ldrb	r2, [r1, r2]
    3b76:	4290      	cmp	r0, r2
    3b78:	d002      	beq.n	3b80 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3b7a:	3301      	adds	r3, #1
    3b7c:	b2db      	uxtb	r3, r3
    3b7e:	e7f3      	b.n	3b68 <get_tc_index+0xc>
			return i;
    3b80:	b258      	sxtb	r0, r3
    3b82:	e007      	b.n	3b94 <get_tc_index+0x38>
	ASSERT(false);
    3b84:	22a4      	movs	r2, #164	; 0xa4
    3b86:	0052      	lsls	r2, r2, #1
    3b88:	4905      	ldr	r1, [pc, #20]	; (3ba0 <get_tc_index+0x44>)
    3b8a:	2000      	movs	r0, #0
    3b8c:	4b05      	ldr	r3, [pc, #20]	; (3ba4 <get_tc_index+0x48>)
    3b8e:	4798      	blx	r3
	return -1;
    3b90:	2001      	movs	r0, #1
    3b92:	4240      	negs	r0, r0
}
    3b94:	bd10      	pop	{r4, pc}
    3b96:	46c0      	nop			; (mov r8, r8)
    3b98:	00003b25 	.word	0x00003b25
    3b9c:	00010460 	.word	0x00010460
    3ba0:	00010488 	.word	0x00010488
    3ba4:	00002e6d 	.word	0x00002e6d

00003ba8 <_timer_init>:
{
    3ba8:	b570      	push	{r4, r5, r6, lr}
    3baa:	0006      	movs	r6, r0
    3bac:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    3bae:	0008      	movs	r0, r1
    3bb0:	4b3f      	ldr	r3, [pc, #252]	; (3cb0 <_timer_init+0x108>)
    3bb2:	4798      	blx	r3
    3bb4:	0005      	movs	r5, r0
	device->hw = hw;
    3bb6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3bb8:	228d      	movs	r2, #141	; 0x8d
    3bba:	493e      	ldr	r1, [pc, #248]	; (3cb4 <_timer_init+0x10c>)
    3bbc:	2001      	movs	r0, #1
    3bbe:	4b3e      	ldr	r3, [pc, #248]	; (3cb8 <_timer_init+0x110>)
    3bc0:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3bc2:	7be3      	ldrb	r3, [r4, #15]
    3bc4:	09db      	lsrs	r3, r3, #7
    3bc6:	d1fc      	bne.n	3bc2 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3bc8:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3bca:	079b      	lsls	r3, r3, #30
    3bcc:	d504      	bpl.n	3bd8 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3bce:	2300      	movs	r3, #0
    3bd0:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3bd2:	7be3      	ldrb	r3, [r4, #15]
    3bd4:	09db      	lsrs	r3, r3, #7
    3bd6:	d1fc      	bne.n	3bd2 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3bd8:	2301      	movs	r3, #1
    3bda:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3bdc:	7be3      	ldrb	r3, [r4, #15]
    3bde:	09db      	lsrs	r3, r3, #7
    3be0:	d1fc      	bne.n	3bdc <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3be2:	00aa      	lsls	r2, r5, #2
    3be4:	1952      	adds	r2, r2, r5
    3be6:	0091      	lsls	r1, r2, #2
    3be8:	4b34      	ldr	r3, [pc, #208]	; (3cbc <_timer_init+0x114>)
    3bea:	185b      	adds	r3, r3, r1
    3bec:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3bee:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3bf0:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3bf2:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3bf4:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3bf6:	8163      	strh	r3, [r4, #10]
    3bf8:	230c      	movs	r3, #12
    3bfa:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3bfc:	2b08      	cmp	r3, #8
    3bfe:	d039      	beq.n	3c74 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3c00:	2b00      	cmp	r3, #0
    3c02:	d143      	bne.n	3c8c <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    3c04:	4a2d      	ldr	r2, [pc, #180]	; (3cbc <_timer_init+0x114>)
    3c06:	00ab      	lsls	r3, r5, #2
    3c08:	1958      	adds	r0, r3, r5
    3c0a:	0081      	lsls	r1, r0, #2
    3c0c:	0008      	movs	r0, r1
    3c0e:	1851      	adds	r1, r2, r1
    3c10:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3c12:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    3c14:	1812      	adds	r2, r2, r0
    3c16:	8a13      	ldrh	r3, [r2, #16]
    3c18:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3c1a:	2301      	movs	r3, #1
    3c1c:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    3c1e:	0031      	movs	r1, r6
    3c20:	0020      	movs	r0, r4
    3c22:	4b27      	ldr	r3, [pc, #156]	; (3cc0 <_timer_init+0x118>)
    3c24:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3c26:	0020      	movs	r0, r4
    3c28:	4b26      	ldr	r3, [pc, #152]	; (3cc4 <_timer_init+0x11c>)
    3c2a:	4798      	blx	r3
    3c2c:	3012      	adds	r0, #18
    3c2e:	b2c0      	uxtb	r0, r0
    3c30:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3c32:	2b00      	cmp	r3, #0
    3c34:	db0a      	blt.n	3c4c <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c36:	211f      	movs	r1, #31
    3c38:	4001      	ands	r1, r0
    3c3a:	2201      	movs	r2, #1
    3c3c:	408a      	lsls	r2, r1
    3c3e:	2180      	movs	r1, #128	; 0x80
    3c40:	4c21      	ldr	r4, [pc, #132]	; (3cc8 <_timer_init+0x120>)
    3c42:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c48:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	db07      	blt.n	3c60 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c50:	211f      	movs	r1, #31
    3c52:	4001      	ands	r1, r0
    3c54:	2201      	movs	r2, #1
    3c56:	408a      	lsls	r2, r1
    3c58:	21c0      	movs	r1, #192	; 0xc0
    3c5a:	0049      	lsls	r1, r1, #1
    3c5c:	4c1a      	ldr	r4, [pc, #104]	; (3cc8 <_timer_init+0x120>)
    3c5e:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    3c60:	2b00      	cmp	r3, #0
    3c62:	db05      	blt.n	3c70 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c64:	231f      	movs	r3, #31
    3c66:	4018      	ands	r0, r3
    3c68:	3b1e      	subs	r3, #30
    3c6a:	4083      	lsls	r3, r0
    3c6c:	4a16      	ldr	r2, [pc, #88]	; (3cc8 <_timer_init+0x120>)
    3c6e:	6013      	str	r3, [r2, #0]
}
    3c70:	2000      	movs	r0, #0
    3c72:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3c74:	4a11      	ldr	r2, [pc, #68]	; (3cbc <_timer_init+0x114>)
    3c76:	00ab      	lsls	r3, r5, #2
    3c78:	1958      	adds	r0, r3, r5
    3c7a:	0081      	lsls	r1, r0, #2
    3c7c:	0008      	movs	r0, r1
    3c7e:	1851      	adds	r1, r2, r1
    3c80:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3c82:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3c84:	1812      	adds	r2, r2, r0
    3c86:	6913      	ldr	r3, [r2, #16]
    3c88:	61e3      	str	r3, [r4, #28]
    3c8a:	e7c6      	b.n	3c1a <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3c8c:	2b04      	cmp	r3, #4
    3c8e:	d1c4      	bne.n	3c1a <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    3c90:	490a      	ldr	r1, [pc, #40]	; (3cbc <_timer_init+0x114>)
    3c92:	00ab      	lsls	r3, r5, #2
    3c94:	1958      	adds	r0, r3, r5
    3c96:	0082      	lsls	r2, r0, #2
    3c98:	188a      	adds	r2, r1, r2
    3c9a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3c9c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    3c9e:	7c12      	ldrb	r2, [r2, #16]
    3ca0:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    3ca2:	195d      	adds	r5, r3, r5
    3ca4:	00ab      	lsls	r3, r5, #2
    3ca6:	18c9      	adds	r1, r1, r3
    3ca8:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3caa:	7523      	strb	r3, [r4, #20]
    3cac:	e7b5      	b.n	3c1a <_timer_init+0x72>
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	00003b5d 	.word	0x00003b5d
    3cb4:	00010488 	.word	0x00010488
    3cb8:	00002e6d 	.word	0x00002e6d
    3cbc:	00010460 	.word	0x00010460
    3cc0:	00003b35 	.word	0x00003b35
    3cc4:	00003b25 	.word	0x00003b25
    3cc8:	e000e100 	.word	0xe000e100

00003ccc <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3ccc:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3cce:	8813      	ldrh	r3, [r2, #0]
    3cd0:	2102      	movs	r1, #2
    3cd2:	430b      	orrs	r3, r1
    3cd4:	b29b      	uxth	r3, r3
    3cd6:	8013      	strh	r3, [r2, #0]
}
    3cd8:	4770      	bx	lr

00003cda <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    3cda:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3cdc:	8813      	ldrh	r3, [r2, #0]
    3cde:	2102      	movs	r1, #2
    3ce0:	438b      	bics	r3, r1
    3ce2:	8013      	strh	r3, [r2, #0]
}
    3ce4:	4770      	bx	lr

00003ce6 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3ce6:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3ce8:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    3cea:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    3cec:	2001      	movs	r0, #1
    3cee:	4018      	ands	r0, r3
}
    3cf0:	4770      	bx	lr

00003cf2 <_tc_get_timer>:
}
    3cf2:	2000      	movs	r0, #0
    3cf4:	4770      	bx	lr
	...

00003cf8 <_timer_set_irq>:
{
    3cf8:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    3cfa:	68c0      	ldr	r0, [r0, #12]
    3cfc:	4b03      	ldr	r3, [pc, #12]	; (3d0c <_timer_set_irq+0x14>)
    3cfe:	4798      	blx	r3
    3d00:	3012      	adds	r0, #18
    3d02:	b2c0      	uxtb	r0, r0
    3d04:	4b02      	ldr	r3, [pc, #8]	; (3d10 <_timer_set_irq+0x18>)
    3d06:	4798      	blx	r3
}
    3d08:	bd10      	pop	{r4, pc}
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	00003b25 	.word	0x00003b25
    3d10:	00003041 	.word	0x00003041

00003d14 <TC3_Handler>:
{
    3d14:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    3d16:	4b02      	ldr	r3, [pc, #8]	; (3d20 <TC3_Handler+0xc>)
    3d18:	6818      	ldr	r0, [r3, #0]
    3d1a:	4b02      	ldr	r3, [pc, #8]	; (3d24 <TC3_Handler+0x10>)
    3d1c:	4798      	blx	r3
}
    3d1e:	bd10      	pop	{r4, pc}
    3d20:	20000efc 	.word	0x20000efc
    3d24:	00003b0d 	.word	0x00003b0d

00003d28 <TC4_Handler>:
{
    3d28:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    3d2a:	4b02      	ldr	r3, [pc, #8]	; (3d34 <TC4_Handler+0xc>)
    3d2c:	6858      	ldr	r0, [r3, #4]
    3d2e:	4b02      	ldr	r3, [pc, #8]	; (3d38 <TC4_Handler+0x10>)
    3d30:	4798      	blx	r3
}
    3d32:	bd10      	pop	{r4, pc}
    3d34:	20000efc 	.word	0x20000efc
    3d38:	00003b0d 	.word	0x00003b0d

00003d3c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    3d3c:	2000      	movs	r0, #0
    3d3e:	4770      	bx	lr

00003d40 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3d40:	4b12      	ldr	r3, [pc, #72]	; (3d8c <_usb_load_calib+0x4c>)
    3d42:	681a      	ldr	r2, [r3, #0]
    3d44:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    3d46:	211f      	movs	r1, #31
    3d48:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    3d4a:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    3d4c:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3d4e:	0dd0      	lsrs	r0, r2, #23
    3d50:	2207      	movs	r2, #7
    3d52:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    3d54:	2b1f      	cmp	r3, #31
    3d56:	d012      	beq.n	3d7e <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    3d58:	291f      	cmp	r1, #31
    3d5a:	d012      	beq.n	3d82 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    3d5c:	2a07      	cmp	r2, #7
    3d5e:	d012      	beq.n	3d86 <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3d60:	019b      	lsls	r3, r3, #6
    3d62:	430b      	orrs	r3, r1
    3d64:	0312      	lsls	r2, r2, #12
    3d66:	4313      	orrs	r3, r2
    3d68:	4a09      	ldr	r2, [pc, #36]	; (3d90 <_usb_load_calib+0x50>)
    3d6a:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3d6c:	78d3      	ldrb	r3, [r2, #3]
    3d6e:	2103      	movs	r1, #3
    3d70:	430b      	orrs	r3, r1
    3d72:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3d74:	78d3      	ldrb	r3, [r2, #3]
    3d76:	210c      	movs	r1, #12
    3d78:	430b      	orrs	r3, r1
    3d7a:	70d3      	strb	r3, [r2, #3]
}
    3d7c:	4770      	bx	lr
		pad_transn = 5;
    3d7e:	3b1a      	subs	r3, #26
    3d80:	e7ea      	b.n	3d58 <_usb_load_calib+0x18>
		pad_transp = 29;
    3d82:	3902      	subs	r1, #2
    3d84:	e7ea      	b.n	3d5c <_usb_load_calib+0x1c>
		pad_trim = 5;
    3d86:	3a02      	subs	r2, #2
    3d88:	e7ea      	b.n	3d60 <_usb_load_calib+0x20>
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	00806024 	.word	0x00806024
    3d90:	41005000 	.word	0x41005000

00003d94 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    3d94:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    3d96:	7c83      	ldrb	r3, [r0, #18]
    3d98:	220f      	movs	r2, #15
    3d9a:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3d9c:	7cc1      	ldrb	r1, [r0, #19]
    3d9e:	3a08      	subs	r2, #8
    3da0:	400a      	ands	r2, r1

	if (!is_ctrl) {
    3da2:	2a01      	cmp	r2, #1
    3da4:	d00d      	beq.n	3dc2 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3da6:	001a      	movs	r2, r3
    3da8:	3208      	adds	r2, #8
    3daa:	0152      	lsls	r2, r2, #5
    3dac:	4919      	ldr	r1, [pc, #100]	; (3e14 <_usb_d_dev_handle_setup+0x80>)
    3dae:	468c      	mov	ip, r1
    3db0:	4462      	add	r2, ip
    3db2:	2110      	movs	r1, #16
    3db4:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3db6:	015b      	lsls	r3, r3, #5
    3db8:	4a17      	ldr	r2, [pc, #92]	; (3e18 <_usb_d_dev_handle_setup+0x84>)
    3dba:	4694      	mov	ip, r2
    3dbc:	4463      	add	r3, ip
    3dbe:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    3dc0:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    3dc2:	064a      	lsls	r2, r1, #25
    3dc4:	d50c      	bpl.n	3de0 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    3dc6:	7cc2      	ldrb	r2, [r0, #19]
    3dc8:	2140      	movs	r1, #64	; 0x40
    3dca:	438a      	bics	r2, r1
    3dcc:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3dce:	001a      	movs	r2, r3
    3dd0:	3208      	adds	r2, #8
    3dd2:	0152      	lsls	r2, r2, #5
    3dd4:	4c0f      	ldr	r4, [pc, #60]	; (3e14 <_usb_d_dev_handle_setup+0x80>)
    3dd6:	46a4      	mov	ip, r4
    3dd8:	4462      	add	r2, ip
    3dda:	2480      	movs	r4, #128	; 0x80
    3ddc:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3dde:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    3de0:	7cc2      	ldrb	r2, [r0, #19]
    3de2:	2108      	movs	r1, #8
    3de4:	438a      	bics	r2, r1
    3de6:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    3de8:	015a      	lsls	r2, r3, #5
    3dea:	490c      	ldr	r1, [pc, #48]	; (3e1c <_usb_d_dev_handle_setup+0x88>)
    3dec:	1889      	adds	r1, r1, r2
    3dee:	2400      	movs	r4, #0
    3df0:	728c      	strb	r4, [r1, #10]
    3df2:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3df4:	3308      	adds	r3, #8
    3df6:	015b      	lsls	r3, r3, #5
    3df8:	4906      	ldr	r1, [pc, #24]	; (3e14 <_usb_d_dev_handle_setup+0x80>)
    3dfa:	468c      	mov	ip, r1
    3dfc:	4463      	add	r3, ip
    3dfe:	216f      	movs	r1, #111	; 0x6f
    3e00:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3e02:	4b05      	ldr	r3, [pc, #20]	; (3e18 <_usb_d_dev_handle_setup+0x84>)
    3e04:	469c      	mov	ip, r3
    3e06:	4462      	add	r2, ip
    3e08:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    3e0a:	4b05      	ldr	r3, [pc, #20]	; (3e20 <_usb_d_dev_handle_setup+0x8c>)
    3e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e0e:	7c80      	ldrb	r0, [r0, #18]
    3e10:	4798      	blx	r3
    3e12:	e7d5      	b.n	3dc0 <_usb_d_dev_handle_setup+0x2c>
    3e14:	41005000 	.word	0x41005000
    3e18:	41005108 	.word	0x41005108
    3e1c:	20000f04 	.word	0x20000f04
    3e20:	20000f84 	.word	0x20000f84

00003e24 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    3e24:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3e26:	7c82      	ldrb	r2, [r0, #18]
    3e28:	230f      	movs	r3, #15
    3e2a:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    3e2c:	2220      	movs	r2, #32
    3e2e:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    3e30:	b2d2      	uxtb	r2, r2
    3e32:	015b      	lsls	r3, r3, #5
    3e34:	4905      	ldr	r1, [pc, #20]	; (3e4c <_usb_d_dev_handle_stall+0x28>)
    3e36:	468c      	mov	ip, r1
    3e38:	4463      	add	r3, ip
    3e3a:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    3e3c:	4b04      	ldr	r3, [pc, #16]	; (3e50 <_usb_d_dev_handle_stall+0x2c>)
    3e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3e40:	6882      	ldr	r2, [r0, #8]
    3e42:	7c80      	ldrb	r0, [r0, #18]
    3e44:	2101      	movs	r1, #1
    3e46:	4798      	blx	r3
}
    3e48:	bd10      	pop	{r4, pc}
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	41005108 	.word	0x41005108
    3e50:	20000f84 	.word	0x20000f84

00003e54 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    3e54:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3e56:	7c83      	ldrb	r3, [r0, #18]
    3e58:	2bff      	cmp	r3, #255	; 0xff
    3e5a:	d002      	beq.n	3e62 <_usb_d_dev_trans_done+0xe>
    3e5c:	7cc2      	ldrb	r2, [r0, #19]
    3e5e:	0652      	lsls	r2, r2, #25
    3e60:	d400      	bmi.n	3e64 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    3e62:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    3e64:	7cc2      	ldrb	r2, [r0, #19]
    3e66:	2440      	movs	r4, #64	; 0x40
    3e68:	43a2      	bics	r2, r4
    3e6a:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    3e6c:	4a02      	ldr	r2, [pc, #8]	; (3e78 <_usb_d_dev_trans_done+0x24>)
    3e6e:	6b14      	ldr	r4, [r2, #48]	; 0x30
    3e70:	6882      	ldr	r2, [r0, #8]
    3e72:	0018      	movs	r0, r3
    3e74:	47a0      	blx	r4
    3e76:	e7f4      	b.n	3e62 <_usb_d_dev_trans_done+0xe>
    3e78:	20000f84 	.word	0x20000f84

00003e7c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    3e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e7e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3e80:	7c84      	ldrb	r4, [r0, #18]
    3e82:	230f      	movs	r3, #15
    3e84:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    3e86:	4d18      	ldr	r5, [pc, #96]	; (3ee8 <_usb_d_dev_trans_stop+0x6c>)
    3e88:	882e      	ldrh	r6, [r5, #0]
    3e8a:	ad01      	add	r5, sp, #4
    3e8c:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    3e8e:	2cff      	cmp	r4, #255	; 0xff
    3e90:	d01e      	beq.n	3ed0 <_usb_d_dev_trans_stop+0x54>
    3e92:	7cc4      	ldrb	r4, [r0, #19]
    3e94:	0664      	lsls	r4, r4, #25
    3e96:	d51b      	bpl.n	3ed0 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    3e98:	2900      	cmp	r1, #0
    3e9a:	d01b      	beq.n	3ed4 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3e9c:	001c      	movs	r4, r3
    3e9e:	3408      	adds	r4, #8
    3ea0:	0164      	lsls	r4, r4, #5
    3ea2:	4d12      	ldr	r5, [pc, #72]	; (3eec <_usb_d_dev_trans_stop+0x70>)
    3ea4:	46ac      	mov	ip, r5
    3ea6:	4464      	add	r4, ip
    3ea8:	2580      	movs	r5, #128	; 0x80
    3eaa:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    3eac:	ad01      	add	r5, sp, #4
    3eae:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3eb0:	001c      	movs	r4, r3
    3eb2:	3408      	adds	r4, #8
    3eb4:	0164      	lsls	r4, r4, #5
    3eb6:	4f0d      	ldr	r7, [pc, #52]	; (3eec <_usb_d_dev_trans_stop+0x70>)
    3eb8:	46bc      	mov	ip, r7
    3eba:	4464      	add	r4, ip
    3ebc:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    3ebe:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3ec0:	015b      	lsls	r3, r3, #5
    3ec2:	4c0b      	ldr	r4, [pc, #44]	; (3ef0 <_usb_d_dev_trans_stop+0x74>)
    3ec4:	46a4      	mov	ip, r4
    3ec6:	4463      	add	r3, ip
    3ec8:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    3eca:	0011      	movs	r1, r2
    3ecc:	4b09      	ldr	r3, [pc, #36]	; (3ef4 <_usb_d_dev_trans_stop+0x78>)
    3ece:	4798      	blx	r3
}
    3ed0:	b003      	add	sp, #12
    3ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3ed4:	001c      	movs	r4, r3
    3ed6:	3408      	adds	r4, #8
    3ed8:	0164      	lsls	r4, r4, #5
    3eda:	4d04      	ldr	r5, [pc, #16]	; (3eec <_usb_d_dev_trans_stop+0x70>)
    3edc:	46ac      	mov	ip, r5
    3ede:	4464      	add	r4, ip
    3ee0:	2540      	movs	r5, #64	; 0x40
    3ee2:	7165      	strb	r5, [r4, #5]
    3ee4:	e7e2      	b.n	3eac <_usb_d_dev_trans_stop+0x30>
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	0001049c 	.word	0x0001049c
    3eec:	41005000 	.word	0x41005000
    3ef0:	41005108 	.word	0x41005108
    3ef4:	00003e55 	.word	0x00003e55

00003ef8 <_usb_d_dev_handle_trfail>:
{
    3ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efa:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    3efc:	7c83      	ldrb	r3, [r0, #18]
    3efe:	220f      	movs	r2, #15
    3f00:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    3f02:	4a3c      	ldr	r2, [pc, #240]	; (3ff4 <_usb_d_dev_handle_trfail+0xfc>)
    3f04:	8894      	ldrh	r4, [r2, #4]
    3f06:	aa01      	add	r2, sp, #4
    3f08:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    3f0a:	015a      	lsls	r2, r3, #5
    3f0c:	4c3a      	ldr	r4, [pc, #232]	; (3ff8 <_usb_d_dev_handle_trfail+0x100>)
    3f0e:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    3f10:	2900      	cmp	r1, #0
    3f12:	d033      	beq.n	3f7c <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3f14:	001a      	movs	r2, r3
    3f16:	3208      	adds	r2, #8
    3f18:	0152      	lsls	r2, r2, #5
    3f1a:	4d38      	ldr	r5, [pc, #224]	; (3ffc <_usb_d_dev_handle_trfail+0x104>)
    3f1c:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    3f1e:	0912      	lsrs	r2, r2, #4
    3f20:	2507      	movs	r5, #7
    3f22:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3f24:	7cc2      	ldrb	r2, [r0, #19]
    3f26:	2607      	movs	r6, #7
    3f28:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    3f2a:	010a      	lsls	r2, r1, #4
    3f2c:	18a2      	adds	r2, r4, r2
    3f2e:	7a94      	ldrb	r4, [r2, #10]
    3f30:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3f32:	2d02      	cmp	r5, #2
    3f34:	d02a      	beq.n	3f8c <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    3f36:	07a4      	lsls	r4, r4, #30
    3f38:	d544      	bpl.n	3fc4 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    3f3a:	7a94      	ldrb	r4, [r2, #10]
    3f3c:	2502      	movs	r5, #2
    3f3e:	43ac      	bics	r4, r5
    3f40:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3f42:	ac01      	add	r4, sp, #4
    3f44:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3f46:	001a      	movs	r2, r3
    3f48:	3208      	adds	r2, #8
    3f4a:	0152      	lsls	r2, r2, #5
    3f4c:	4f2b      	ldr	r7, [pc, #172]	; (3ffc <_usb_d_dev_handle_trfail+0x104>)
    3f4e:	46bc      	mov	ip, r7
    3f50:	4462      	add	r2, ip
    3f52:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3f54:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3f56:	015b      	lsls	r3, r3, #5
    3f58:	4c29      	ldr	r4, [pc, #164]	; (4000 <_usb_d_dev_handle_trfail+0x108>)
    3f5a:	46a4      	mov	ip, r4
    3f5c:	4463      	add	r3, ip
    3f5e:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    3f60:	2e01      	cmp	r6, #1
    3f62:	d145      	bne.n	3ff0 <_usb_d_dev_handle_trfail+0xf8>
    3f64:	7cc3      	ldrb	r3, [r0, #19]
    3f66:	065b      	lsls	r3, r3, #25
    3f68:	d542      	bpl.n	3ff0 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    3f6a:	7cc3      	ldrb	r3, [r0, #19]
    3f6c:	09db      	lsrs	r3, r3, #7
    3f6e:	4299      	cmp	r1, r3
    3f70:	d03e      	beq.n	3ff0 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    3f72:	2200      	movs	r2, #0
    3f74:	0019      	movs	r1, r3
    3f76:	4b23      	ldr	r3, [pc, #140]	; (4004 <_usb_d_dev_handle_trfail+0x10c>)
    3f78:	4798      	blx	r3
    3f7a:	e039      	b.n	3ff0 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3f7c:	001a      	movs	r2, r3
    3f7e:	3208      	adds	r2, #8
    3f80:	0152      	lsls	r2, r2, #5
    3f82:	4d1e      	ldr	r5, [pc, #120]	; (3ffc <_usb_d_dev_handle_trfail+0x104>)
    3f84:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    3f86:	2207      	movs	r2, #7
    3f88:	4015      	ands	r5, r2
    3f8a:	e7cb      	b.n	3f24 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    3f8c:	07e5      	lsls	r5, r4, #31
    3f8e:	d5d2      	bpl.n	3f36 <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    3f90:	7a94      	ldrb	r4, [r2, #10]
    3f92:	2501      	movs	r5, #1
    3f94:	43ac      	bics	r4, r5
    3f96:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3f98:	ac01      	add	r4, sp, #4
    3f9a:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3f9c:	001a      	movs	r2, r3
    3f9e:	3208      	adds	r2, #8
    3fa0:	0152      	lsls	r2, r2, #5
    3fa2:	4e16      	ldr	r6, [pc, #88]	; (3ffc <_usb_d_dev_handle_trfail+0x104>)
    3fa4:	46b4      	mov	ip, r6
    3fa6:	4462      	add	r2, ip
    3fa8:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3faa:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3fac:	015b      	lsls	r3, r3, #5
    3fae:	4c14      	ldr	r4, [pc, #80]	; (4000 <_usb_d_dev_handle_trfail+0x108>)
    3fb0:	46a4      	mov	ip, r4
    3fb2:	4463      	add	r3, ip
    3fb4:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    3fb6:	1e4b      	subs	r3, r1, #1
    3fb8:	4199      	sbcs	r1, r3
    3fba:	b2c9      	uxtb	r1, r1
    3fbc:	2204      	movs	r2, #4
    3fbe:	4b11      	ldr	r3, [pc, #68]	; (4004 <_usb_d_dev_handle_trfail+0x10c>)
    3fc0:	4798      	blx	r3
    3fc2:	e015      	b.n	3ff0 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    3fc4:	005a      	lsls	r2, r3, #1
    3fc6:	1852      	adds	r2, r2, r1
    3fc8:	0112      	lsls	r2, r2, #4
    3fca:	480b      	ldr	r0, [pc, #44]	; (3ff8 <_usb_d_dev_handle_trfail+0x100>)
    3fcc:	1882      	adds	r2, r0, r2
    3fce:	2000      	movs	r0, #0
    3fd0:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    3fd2:	a801      	add	r0, sp, #4
    3fd4:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3fd6:	001a      	movs	r2, r3
    3fd8:	3208      	adds	r2, #8
    3fda:	0152      	lsls	r2, r2, #5
    3fdc:	4d07      	ldr	r5, [pc, #28]	; (3ffc <_usb_d_dev_handle_trfail+0x104>)
    3fde:	46ac      	mov	ip, r5
    3fe0:	4462      	add	r2, ip
    3fe2:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    3fe4:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    3fe6:	015b      	lsls	r3, r3, #5
    3fe8:	4905      	ldr	r1, [pc, #20]	; (4000 <_usb_d_dev_handle_trfail+0x108>)
    3fea:	468c      	mov	ip, r1
    3fec:	4463      	add	r3, ip
    3fee:	701a      	strb	r2, [r3, #0]
}
    3ff0:	b003      	add	sp, #12
    3ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ff4:	0001049c 	.word	0x0001049c
    3ff8:	20000f04 	.word	0x20000f04
    3ffc:	41005000 	.word	0x41005000
    4000:	41005108 	.word	0x41005108
    4004:	00003e7d 	.word	0x00003e7d

00004008 <_usb_d_dev_reset_epts>:
{
    4008:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    400a:	2500      	movs	r5, #0
    400c:	e018      	b.n	4040 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    400e:	4c10      	ldr	r4, [pc, #64]	; (4050 <_usb_d_dev_reset_epts+0x48>)
    4010:	3420      	adds	r4, #32
    4012:	00ae      	lsls	r6, r5, #2
    4014:	1973      	adds	r3, r6, r5
    4016:	0098      	lsls	r0, r3, #2
    4018:	3010      	adds	r0, #16
    401a:	1820      	adds	r0, r4, r0
    401c:	3004      	adds	r0, #4
    401e:	2103      	movs	r1, #3
    4020:	4b0c      	ldr	r3, [pc, #48]	; (4054 <_usb_d_dev_reset_epts+0x4c>)
    4022:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    4024:	1972      	adds	r2, r6, r5
    4026:	0093      	lsls	r3, r2, #2
    4028:	18e3      	adds	r3, r4, r3
    402a:	3326      	adds	r3, #38	; 0x26
    402c:	22ff      	movs	r2, #255	; 0xff
    402e:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    4030:	1976      	adds	r6, r6, r5
    4032:	00b3      	lsls	r3, r6, #2
    4034:	18e4      	adds	r4, r4, r3
    4036:	3427      	adds	r4, #39	; 0x27
    4038:	2300      	movs	r3, #0
    403a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    403c:	3501      	adds	r5, #1
    403e:	b2ed      	uxtb	r5, r5
    4040:	2d08      	cmp	r5, #8
    4042:	d9e4      	bls.n	400e <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4044:	22a0      	movs	r2, #160	; 0xa0
    4046:	2100      	movs	r1, #0
    4048:	4803      	ldr	r0, [pc, #12]	; (4058 <_usb_d_dev_reset_epts+0x50>)
    404a:	4b04      	ldr	r3, [pc, #16]	; (405c <_usb_d_dev_reset_epts+0x54>)
    404c:	4798      	blx	r3
}
    404e:	bd70      	pop	{r4, r5, r6, pc}
    4050:	20000f84 	.word	0x20000f84
    4054:	00003e55 	.word	0x00003e55
    4058:	20000f04 	.word	0x20000f04
    405c:	0000b4a5 	.word	0x0000b4a5

00004060 <_usb_d_dev_in_next>:
{
    4060:	b5f0      	push	{r4, r5, r6, r7, lr}
    4062:	46c6      	mov	lr, r8
    4064:	b500      	push	{lr}
    4066:	0005      	movs	r5, r0
    4068:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    406a:	7c83      	ldrb	r3, [r0, #18]
    406c:	240f      	movs	r4, #15
    406e:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    4070:	0162      	lsls	r2, r4, #5
    4072:	4b56      	ldr	r3, [pc, #344]	; (41cc <_usb_d_dev_in_next+0x16c>)
    4074:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4076:	2900      	cmp	r1, #0
    4078:	d058      	beq.n	412c <_usb_d_dev_in_next+0xcc>
    407a:	6959      	ldr	r1, [r3, #20]
    407c:	0489      	lsls	r1, r1, #18
    407e:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4080:	8a2b      	ldrh	r3, [r5, #16]
    4082:	4a53      	ldr	r2, [pc, #332]	; (41d0 <_usb_d_dev_in_next+0x170>)
    4084:	4293      	cmp	r3, r2
    4086:	d053      	beq.n	4130 <_usb_d_dev_in_next+0xd0>
    4088:	3b01      	subs	r3, #1
    408a:	b21b      	sxth	r3, r3
    408c:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    408e:	7cea      	ldrb	r2, [r5, #19]
    4090:	2707      	movs	r7, #7
    4092:	4017      	ands	r7, r2
	if (isr) {
    4094:	2e00      	cmp	r6, #0
    4096:	d007      	beq.n	40a8 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4098:	0022      	movs	r2, r4
    409a:	3208      	adds	r2, #8
    409c:	0152      	lsls	r2, r2, #5
    409e:	484d      	ldr	r0, [pc, #308]	; (41d4 <_usb_d_dev_in_next+0x174>)
    40a0:	4684      	mov	ip, r0
    40a2:	4462      	add	r2, ip
    40a4:	2002      	movs	r0, #2
    40a6:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    40a8:	68aa      	ldr	r2, [r5, #8]
    40aa:	4694      	mov	ip, r2
    40ac:	4461      	add	r1, ip
    40ae:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    40b0:	686a      	ldr	r2, [r5, #4]
    40b2:	4291      	cmp	r1, r2
    40b4:	d24e      	bcs.n	4154 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    40b6:	b292      	uxth	r2, r2
    40b8:	b28b      	uxth	r3, r1
    40ba:	1ad2      	subs	r2, r2, r3
    40bc:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    40be:	7ceb      	ldrb	r3, [r5, #19]
    40c0:	069b      	lsls	r3, r3, #26
    40c2:	d537      	bpl.n	4134 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    40c4:	8a2b      	ldrh	r3, [r5, #16]
    40c6:	4698      	mov	r8, r3
    40c8:	429a      	cmp	r2, r3
    40ca:	d800      	bhi.n	40ce <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    40cc:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    40ce:	682b      	ldr	r3, [r5, #0]
    40d0:	469c      	mov	ip, r3
    40d2:	4461      	add	r1, ip
    40d4:	4642      	mov	r2, r8
    40d6:	68e8      	ldr	r0, [r5, #12]
    40d8:	4b3f      	ldr	r3, [pc, #252]	; (41d8 <_usb_d_dev_in_next+0x178>)
    40da:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    40dc:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    40de:	0162      	lsls	r2, r4, #5
    40e0:	4b3a      	ldr	r3, [pc, #232]	; (41cc <_usb_d_dev_in_next+0x16c>)
    40e2:	189b      	adds	r3, r3, r2
    40e4:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    40e6:	0163      	lsls	r3, r4, #5
    40e8:	4a38      	ldr	r2, [pc, #224]	; (41cc <_usb_d_dev_in_next+0x16c>)
    40ea:	18d2      	adds	r2, r2, r3
    40ec:	6951      	ldr	r1, [r2, #20]
    40ee:	4643      	mov	r3, r8
    40f0:	049b      	lsls	r3, r3, #18
    40f2:	0c9b      	lsrs	r3, r3, #18
    40f4:	0b89      	lsrs	r1, r1, #14
    40f6:	0389      	lsls	r1, r1, #14
    40f8:	430b      	orrs	r3, r1
    40fa:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    40fc:	6951      	ldr	r1, [r2, #20]
    40fe:	4b37      	ldr	r3, [pc, #220]	; (41dc <_usb_d_dev_in_next+0x17c>)
    4100:	400b      	ands	r3, r1
    4102:	6153      	str	r3, [r2, #20]
	if (!isr) {
    4104:	2e00      	cmp	r6, #0
    4106:	d107      	bne.n	4118 <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    4108:	2f01      	cmp	r7, #1
    410a:	d05d      	beq.n	41c8 <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    410c:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    410e:	0163      	lsls	r3, r4, #5
    4110:	4933      	ldr	r1, [pc, #204]	; (41e0 <_usb_d_dev_in_next+0x180>)
    4112:	468c      	mov	ip, r1
    4114:	4463      	add	r3, ip
    4116:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4118:	3408      	adds	r4, #8
    411a:	0164      	lsls	r4, r4, #5
    411c:	4b2d      	ldr	r3, [pc, #180]	; (41d4 <_usb_d_dev_in_next+0x174>)
    411e:	469c      	mov	ip, r3
    4120:	4464      	add	r4, ip
    4122:	2380      	movs	r3, #128	; 0x80
    4124:	7163      	strb	r3, [r4, #5]
}
    4126:	bc04      	pop	{r2}
    4128:	4690      	mov	r8, r2
    412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    412c:	2100      	movs	r1, #0
    412e:	e7a7      	b.n	4080 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4130:	b21b      	sxth	r3, r3
    4132:	e7ab      	b.n	408c <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    4134:	2380      	movs	r3, #128	; 0x80
    4136:	019b      	lsls	r3, r3, #6
    4138:	429a      	cmp	r2, r3
    413a:	d807      	bhi.n	414c <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    413c:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    413e:	682b      	ldr	r3, [r5, #0]
    4140:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    4142:	0162      	lsls	r2, r4, #5
    4144:	4b21      	ldr	r3, [pc, #132]	; (41cc <_usb_d_dev_in_next+0x16c>)
    4146:	189b      	adds	r3, r3, r2
    4148:	6119      	str	r1, [r3, #16]
    414a:	e7cc      	b.n	40e6 <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    414c:	2380      	movs	r3, #128	; 0x80
    414e:	019b      	lsls	r3, r3, #6
    4150:	4698      	mov	r8, r3
    4152:	e7f4      	b.n	413e <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    4154:	7cea      	ldrb	r2, [r5, #19]
    4156:	06d2      	lsls	r2, r2, #27
    4158:	d50f      	bpl.n	417a <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    415a:	7ceb      	ldrb	r3, [r5, #19]
    415c:	2210      	movs	r2, #16
    415e:	4393      	bics	r3, r2
    4160:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4162:	0162      	lsls	r2, r4, #5
    4164:	4b19      	ldr	r3, [pc, #100]	; (41cc <_usb_d_dev_in_next+0x16c>)
    4166:	189b      	adds	r3, r3, r2
    4168:	695a      	ldr	r2, [r3, #20]
    416a:	0b92      	lsrs	r2, r2, #14
    416c:	0391      	lsls	r1, r2, #14
    416e:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4170:	6959      	ldr	r1, [r3, #20]
    4172:	4a1a      	ldr	r2, [pc, #104]	; (41dc <_usb_d_dev_in_next+0x17c>)
    4174:	400a      	ands	r2, r1
    4176:	615a      	str	r2, [r3, #20]
    4178:	e7c4      	b.n	4104 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    417a:	2f01      	cmp	r7, #1
    417c:	d00d      	beq.n	419a <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    417e:	0164      	lsls	r4, r4, #5
    4180:	4a18      	ldr	r2, [pc, #96]	; (41e4 <_usb_d_dev_in_next+0x184>)
    4182:	4694      	mov	ip, r2
    4184:	4464      	add	r4, ip
    4186:	224a      	movs	r2, #74	; 0x4a
    4188:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    418a:	8a2a      	ldrh	r2, [r5, #16]
    418c:	4293      	cmp	r3, r2
    418e:	d00b      	beq.n	41a8 <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4190:	2100      	movs	r1, #0
    4192:	0028      	movs	r0, r5
    4194:	4b14      	ldr	r3, [pc, #80]	; (41e8 <_usb_d_dev_in_next+0x188>)
    4196:	4798      	blx	r3
	return;
    4198:	e7c5      	b.n	4126 <_usb_d_dev_in_next+0xc6>
    419a:	0164      	lsls	r4, r4, #5
    419c:	4a11      	ldr	r2, [pc, #68]	; (41e4 <_usb_d_dev_in_next+0x184>)
    419e:	4694      	mov	ip, r2
    41a0:	4464      	add	r4, ip
    41a2:	224b      	movs	r2, #75	; 0x4b
    41a4:	7022      	strb	r2, [r4, #0]
    41a6:	e7f0      	b.n	418a <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    41a8:	7ceb      	ldrb	r3, [r5, #19]
    41aa:	2240      	movs	r2, #64	; 0x40
    41ac:	4393      	bics	r3, r2
    41ae:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    41b0:	4b0e      	ldr	r3, [pc, #56]	; (41ec <_usb_d_dev_in_next+0x18c>)
    41b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    41b4:	7ca8      	ldrb	r0, [r5, #18]
    41b6:	68a9      	ldr	r1, [r5, #8]
    41b8:	4798      	blx	r3
    41ba:	2800      	cmp	r0, #0
    41bc:	d1b3      	bne.n	4126 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    41be:	7ceb      	ldrb	r3, [r5, #19]
    41c0:	2240      	movs	r2, #64	; 0x40
    41c2:	4313      	orrs	r3, r2
    41c4:	74eb      	strb	r3, [r5, #19]
    41c6:	e7e3      	b.n	4190 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    41c8:	224e      	movs	r2, #78	; 0x4e
    41ca:	e7a0      	b.n	410e <_usb_d_dev_in_next+0xae>
    41cc:	20000f04 	.word	0x20000f04
    41d0:	000003ff 	.word	0x000003ff
    41d4:	41005000 	.word	0x41005000
    41d8:	0000b421 	.word	0x0000b421
    41dc:	f0003fff 	.word	0xf0003fff
    41e0:	41005109 	.word	0x41005109
    41e4:	41005108 	.word	0x41005108
    41e8:	00003e55 	.word	0x00003e55
    41ec:	20000f84 	.word	0x20000f84

000041f0 <_usb_d_dev_out_next>:
{
    41f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41f2:	46de      	mov	lr, fp
    41f4:	4657      	mov	r7, sl
    41f6:	464e      	mov	r6, r9
    41f8:	4645      	mov	r5, r8
    41fa:	b5e0      	push	{r5, r6, r7, lr}
    41fc:	0004      	movs	r4, r0
    41fe:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4200:	7c83      	ldrb	r3, [r0, #18]
    4202:	250f      	movs	r5, #15
    4204:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4206:	2900      	cmp	r1, #0
    4208:	d059      	beq.n	42be <_usb_d_dev_out_next+0xce>
    420a:	016a      	lsls	r2, r5, #5
    420c:	4b71      	ldr	r3, [pc, #452]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    420e:	189b      	adds	r3, r3, r2
    4210:	685b      	ldr	r3, [r3, #4]
    4212:	011b      	lsls	r3, r3, #4
    4214:	0c9b      	lsrs	r3, r3, #18
    4216:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4218:	2f00      	cmp	r7, #0
    421a:	d053      	beq.n	42c4 <_usb_d_dev_out_next+0xd4>
    421c:	016a      	lsls	r2, r5, #5
    421e:	4b6d      	ldr	r3, [pc, #436]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    4220:	189b      	adds	r3, r3, r2
    4222:	685b      	ldr	r3, [r3, #4]
    4224:	049b      	lsls	r3, r3, #18
    4226:	0c9b      	lsrs	r3, r3, #18
    4228:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    422a:	8a26      	ldrh	r6, [r4, #16]
    422c:	4b6a      	ldr	r3, [pc, #424]	; (43d8 <_usb_d_dev_out_next+0x1e8>)
    422e:	429e      	cmp	r6, r3
    4230:	d001      	beq.n	4236 <_usb_d_dev_out_next+0x46>
    4232:	3e01      	subs	r6, #1
    4234:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4236:	4643      	mov	r3, r8
    4238:	4033      	ands	r3, r6
    423a:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    423c:	7ce3      	ldrb	r3, [r4, #19]
    423e:	2207      	movs	r2, #7
    4240:	401a      	ands	r2, r3
    4242:	4691      	mov	r9, r2
	if (isr) {
    4244:	2f00      	cmp	r7, #0
    4246:	d007      	beq.n	4258 <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4248:	002b      	movs	r3, r5
    424a:	3308      	adds	r3, #8
    424c:	015b      	lsls	r3, r3, #5
    424e:	4a63      	ldr	r2, [pc, #396]	; (43dc <_usb_d_dev_out_next+0x1ec>)
    4250:	4694      	mov	ip, r2
    4252:	4463      	add	r3, ip
    4254:	2201      	movs	r2, #1
    4256:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    4258:	7ce3      	ldrb	r3, [r4, #19]
    425a:	069b      	lsls	r3, r3, #26
    425c:	d511      	bpl.n	4282 <_usb_d_dev_out_next+0x92>
    425e:	6862      	ldr	r2, [r4, #4]
    4260:	2a00      	cmp	r2, #0
    4262:	d00e      	beq.n	4282 <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4264:	b292      	uxth	r2, r2
    4266:	8923      	ldrh	r3, [r4, #8]
    4268:	1ad2      	subs	r2, r2, r3
    426a:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    426c:	6823      	ldr	r3, [r4, #0]
    426e:	68a1      	ldr	r1, [r4, #8]
    4270:	468c      	mov	ip, r1
    4272:	4463      	add	r3, ip
    4274:	0018      	movs	r0, r3
    4276:	68e1      	ldr	r1, [r4, #12]
    4278:	4593      	cmp	fp, r2
    427a:	d200      	bcs.n	427e <_usb_d_dev_out_next+0x8e>
    427c:	465a      	mov	r2, fp
    427e:	4b58      	ldr	r3, [pc, #352]	; (43e0 <_usb_d_dev_out_next+0x1f0>)
    4280:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4282:	6863      	ldr	r3, [r4, #4]
    4284:	2b00      	cmp	r3, #0
    4286:	d120      	bne.n	42ca <_usb_d_dev_out_next+0xda>
    4288:	7ce2      	ldrb	r2, [r4, #19]
    428a:	06d2      	lsls	r2, r2, #27
    428c:	d51d      	bpl.n	42ca <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    428e:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4290:	2210      	movs	r2, #16
    4292:	4393      	bics	r3, r2
    4294:	2220      	movs	r2, #32
    4296:	4313      	orrs	r3, r2
    4298:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    429a:	494e      	ldr	r1, [pc, #312]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    429c:	016a      	lsls	r2, r5, #5
    429e:	68e3      	ldr	r3, [r4, #12]
    42a0:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    42a2:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    42a4:	188a      	adds	r2, r1, r2
    42a6:	6851      	ldr	r1, [r2, #4]
    42a8:	049b      	lsls	r3, r3, #18
    42aa:	091b      	lsrs	r3, r3, #4
    42ac:	484d      	ldr	r0, [pc, #308]	; (43e4 <_usb_d_dev_out_next+0x1f4>)
    42ae:	4001      	ands	r1, r0
    42b0:	430b      	orrs	r3, r1
    42b2:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    42b4:	6853      	ldr	r3, [r2, #4]
    42b6:	0b9b      	lsrs	r3, r3, #14
    42b8:	0399      	lsls	r1, r3, #14
    42ba:	6051      	str	r1, [r2, #4]
    42bc:	e047      	b.n	434e <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    42be:	2300      	movs	r3, #0
    42c0:	469a      	mov	sl, r3
    42c2:	e7a9      	b.n	4218 <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    42c4:	2300      	movs	r3, #0
    42c6:	4698      	mov	r8, r3
    42c8:	e7af      	b.n	422a <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    42ca:	2f00      	cmp	r7, #0
    42cc:	d01d      	beq.n	430a <_usb_d_dev_out_next+0x11a>
    42ce:	8a22      	ldrh	r2, [r4, #16]
    42d0:	4593      	cmp	fp, r2
    42d2:	d21a      	bcs.n	430a <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    42d4:	7ce3      	ldrb	r3, [r4, #19]
    42d6:	2210      	movs	r2, #16
    42d8:	4393      	bics	r3, r2
    42da:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    42dc:	68a3      	ldr	r3, [r4, #8]
    42de:	4443      	add	r3, r8
    42e0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    42e2:	464b      	mov	r3, r9
    42e4:	2b01      	cmp	r3, #1
    42e6:	d066      	beq.n	43b6 <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    42e8:	016b      	lsls	r3, r5, #5
    42ea:	4a3f      	ldr	r2, [pc, #252]	; (43e8 <_usb_d_dev_out_next+0x1f8>)
    42ec:	4694      	mov	ip, r2
    42ee:	4463      	add	r3, ip
    42f0:	2225      	movs	r2, #37	; 0x25
    42f2:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    42f4:	2d00      	cmp	r5, #0
    42f6:	d103      	bne.n	4300 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    42f8:	016d      	lsls	r5, r5, #5
    42fa:	4b36      	ldr	r3, [pc, #216]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    42fc:	68e2      	ldr	r2, [r4, #12]
    42fe:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4300:	2100      	movs	r1, #0
    4302:	0020      	movs	r0, r4
    4304:	4b39      	ldr	r3, [pc, #228]	; (43ec <_usb_d_dev_out_next+0x1fc>)
    4306:	4798      	blx	r3
	return;
    4308:	e033      	b.n	4372 <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    430a:	68a2      	ldr	r2, [r4, #8]
    430c:	4452      	add	r2, sl
    430e:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4310:	4293      	cmp	r3, r2
    4312:	d9e6      	bls.n	42e2 <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    4314:	b29b      	uxth	r3, r3
    4316:	b291      	uxth	r1, r2
    4318:	1a5b      	subs	r3, r3, r1
    431a:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    431c:	7ce1      	ldrb	r1, [r4, #19]
    431e:	0689      	lsls	r1, r1, #26
    4320:	d52d      	bpl.n	437e <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    4322:	8a21      	ldrh	r1, [r4, #16]
    4324:	428b      	cmp	r3, r1
    4326:	d800      	bhi.n	432a <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    4328:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    432a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    432c:	016b      	lsls	r3, r5, #5
    432e:	4a29      	ldr	r2, [pc, #164]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    4330:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4332:	016b      	lsls	r3, r5, #5
    4334:	4827      	ldr	r0, [pc, #156]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    4336:	18c0      	adds	r0, r0, r3
    4338:	6842      	ldr	r2, [r0, #4]
    433a:	048b      	lsls	r3, r1, #18
    433c:	091b      	lsrs	r3, r3, #4
    433e:	4929      	ldr	r1, [pc, #164]	; (43e4 <_usb_d_dev_out_next+0x1f4>)
    4340:	400a      	ands	r2, r1
    4342:	4313      	orrs	r3, r2
    4344:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4346:	6843      	ldr	r3, [r0, #4]
    4348:	0b9b      	lsrs	r3, r3, #14
    434a:	039a      	lsls	r2, r3, #14
    434c:	6042      	str	r2, [r0, #4]
	if (!isr) {
    434e:	2f00      	cmp	r7, #0
    4350:	d108      	bne.n	4364 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    4352:	464b      	mov	r3, r9
    4354:	2b01      	cmp	r3, #1
    4356:	d035      	beq.n	43c4 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    4358:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    435a:	016b      	lsls	r3, r5, #5
    435c:	4924      	ldr	r1, [pc, #144]	; (43f0 <_usb_d_dev_out_next+0x200>)
    435e:	468c      	mov	ip, r1
    4360:	4463      	add	r3, ip
    4362:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4364:	3508      	adds	r5, #8
    4366:	016d      	lsls	r5, r5, #5
    4368:	4b1c      	ldr	r3, [pc, #112]	; (43dc <_usb_d_dev_out_next+0x1ec>)
    436a:	469c      	mov	ip, r3
    436c:	4465      	add	r5, ip
    436e:	2340      	movs	r3, #64	; 0x40
    4370:	712b      	strb	r3, [r5, #4]
}
    4372:	bc3c      	pop	{r2, r3, r4, r5}
    4374:	4690      	mov	r8, r2
    4376:	4699      	mov	r9, r3
    4378:	46a2      	mov	sl, r4
    437a:	46ab      	mov	fp, r5
    437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    437e:	8a21      	ldrh	r1, [r4, #16]
    4380:	428b      	cmp	r3, r1
    4382:	d90b      	bls.n	439c <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4384:	2180      	movs	r1, #128	; 0x80
    4386:	0189      	lsls	r1, r1, #6
    4388:	428b      	cmp	r3, r1
    438a:	d80f      	bhi.n	43ac <_usb_d_dev_out_next+0x1bc>
    438c:	43b3      	bics	r3, r6
    438e:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4390:	6823      	ldr	r3, [r4, #0]
    4392:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    4394:	016b      	lsls	r3, r5, #5
    4396:	480f      	ldr	r0, [pc, #60]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    4398:	501a      	str	r2, [r3, r0]
    439a:	e7ca      	b.n	4332 <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    439c:	428b      	cmp	r3, r1
    439e:	d208      	bcs.n	43b2 <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    43a0:	7ce1      	ldrb	r1, [r4, #19]
    43a2:	2020      	movs	r0, #32
    43a4:	4301      	orrs	r1, r0
    43a6:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    43a8:	0019      	movs	r1, r3
    43aa:	e7f1      	b.n	4390 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    43ac:	2180      	movs	r1, #128	; 0x80
    43ae:	0189      	lsls	r1, r1, #6
    43b0:	e7ee      	b.n	4390 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    43b2:	0019      	movs	r1, r3
    43b4:	e7ec      	b.n	4390 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    43b6:	016b      	lsls	r3, r5, #5
    43b8:	4a0b      	ldr	r2, [pc, #44]	; (43e8 <_usb_d_dev_out_next+0x1f8>)
    43ba:	4694      	mov	ip, r2
    43bc:	4463      	add	r3, ip
    43be:	222d      	movs	r2, #45	; 0x2d
    43c0:	701a      	strb	r2, [r3, #0]
    43c2:	e797      	b.n	42f4 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    43c4:	016a      	lsls	r2, r5, #5
    43c6:	4b03      	ldr	r3, [pc, #12]	; (43d4 <_usb_d_dev_out_next+0x1e4>)
    43c8:	189b      	adds	r3, r3, r2
    43ca:	2200      	movs	r2, #0
    43cc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    43ce:	322d      	adds	r2, #45	; 0x2d
    43d0:	e7c3      	b.n	435a <_usb_d_dev_out_next+0x16a>
    43d2:	46c0      	nop			; (mov r8, r8)
    43d4:	20000f04 	.word	0x20000f04
    43d8:	000003ff 	.word	0x000003ff
    43dc:	41005000 	.word	0x41005000
    43e0:	0000b421 	.word	0x0000b421
    43e4:	f0003fff 	.word	0xf0003fff
    43e8:	41005108 	.word	0x41005108
    43ec:	00003e55 	.word	0x00003e55
    43f0:	41005109 	.word	0x41005109

000043f4 <_usb_d_dev_handler>:
{
    43f4:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    43f6:	4b89      	ldr	r3, [pc, #548]	; (461c <_usb_d_dev_handler+0x228>)
    43f8:	8c1d      	ldrh	r5, [r3, #32]
    43fa:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    43fc:	2d00      	cmp	r5, #0
    43fe:	d001      	beq.n	4404 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    4400:	2400      	movs	r4, #0
    4402:	e0bf      	b.n	4584 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4404:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    4406:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    4408:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    440a:	075a      	lsls	r2, r3, #29
    440c:	d40d      	bmi.n	442a <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    440e:	059a      	lsls	r2, r3, #22
    4410:	d415      	bmi.n	443e <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4412:	061a      	lsls	r2, r3, #24
    4414:	d437      	bmi.n	4486 <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    4416:	2270      	movs	r2, #112	; 0x70
    4418:	421a      	tst	r2, r3
    441a:	d13e      	bne.n	449a <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    441c:	071a      	lsls	r2, r3, #28
    441e:	d457      	bmi.n	44d0 <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4420:	07db      	lsls	r3, r3, #31
    4422:	d500      	bpl.n	4426 <_usb_d_dev_handler+0x32>
    4424:	e068      	b.n	44f8 <_usb_d_dev_handler+0x104>
		rc = false;
    4426:	2300      	movs	r3, #0
    4428:	e006      	b.n	4438 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    442a:	2204      	movs	r2, #4
    442c:	4b7b      	ldr	r3, [pc, #492]	; (461c <_usb_d_dev_handler+0x228>)
    442e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4430:	4b7b      	ldr	r3, [pc, #492]	; (4620 <_usb_d_dev_handler+0x22c>)
    4432:	6a1b      	ldr	r3, [r3, #32]
    4434:	4798      	blx	r3
		return true;
    4436:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    4438:	2b00      	cmp	r3, #0
    443a:	d0e1      	beq.n	4400 <_usb_d_dev_handler+0xc>
}
    443c:	bd70      	pop	{r4, r5, r6, pc}
    443e:	4b77      	ldr	r3, [pc, #476]	; (461c <_usb_d_dev_handler+0x228>)
    4440:	4a78      	ldr	r2, [pc, #480]	; (4624 <_usb_d_dev_handler+0x230>)
    4442:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4444:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4446:	3a92      	subs	r2, #146	; 0x92
    4448:	3aff      	subs	r2, #255	; 0xff
    444a:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    444c:	2300      	movs	r3, #0
    444e:	2b03      	cmp	r3, #3
    4450:	d812      	bhi.n	4478 <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4452:	0158      	lsls	r0, r3, #5
    4454:	4a74      	ldr	r2, [pc, #464]	; (4628 <_usb_d_dev_handler+0x234>)
    4456:	1812      	adds	r2, r2, r0
    4458:	8912      	ldrh	r2, [r2, #8]
    445a:	0712      	lsls	r2, r2, #28
    445c:	0f12      	lsrs	r2, r2, #28
    445e:	2a03      	cmp	r2, #3
    4460:	d002      	beq.n	4468 <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4462:	3301      	adds	r3, #1
    4464:	b2db      	uxtb	r3, r3
    4466:	e7f2      	b.n	444e <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    4468:	4b6f      	ldr	r3, [pc, #444]	; (4628 <_usb_d_dev_handler+0x234>)
    446a:	181b      	adds	r3, r3, r0
    446c:	8919      	ldrh	r1, [r3, #8]
    446e:	0449      	lsls	r1, r1, #17
    4470:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    4472:	2200      	movs	r2, #0
    4474:	811a      	strh	r2, [r3, #8]
    4476:	e000      	b.n	447a <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    4478:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    447a:	4b69      	ldr	r3, [pc, #420]	; (4620 <_usb_d_dev_handler+0x22c>)
    447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    447e:	2003      	movs	r0, #3
    4480:	4798      	blx	r3
	bool     rc    = true;
    4482:	2301      	movs	r3, #1
    4484:	e7d8      	b.n	4438 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4486:	2280      	movs	r2, #128	; 0x80
    4488:	4b64      	ldr	r3, [pc, #400]	; (461c <_usb_d_dev_handler+0x228>)
    448a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    448c:	4b64      	ldr	r3, [pc, #400]	; (4620 <_usb_d_dev_handler+0x22c>)
    448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4490:	2100      	movs	r1, #0
    4492:	2005      	movs	r0, #5
    4494:	4798      	blx	r3
	bool     rc    = true;
    4496:	2301      	movs	r3, #1
    4498:	e7ce      	b.n	4438 <_usb_d_dev_handler+0x44>
    449a:	4b60      	ldr	r3, [pc, #384]	; (461c <_usb_d_dev_handler+0x228>)
    449c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    449e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    44a0:	4a60      	ldr	r2, [pc, #384]	; (4624 <_usb_d_dev_handler+0x230>)
    44a2:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    44a4:	4b61      	ldr	r3, [pc, #388]	; (462c <_usb_d_dev_handler+0x238>)
    44a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    44a8:	069b      	lsls	r3, r3, #26
    44aa:	d40c      	bmi.n	44c6 <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    44ac:	4b5f      	ldr	r3, [pc, #380]	; (462c <_usb_d_dev_handler+0x238>)
    44ae:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    44b0:	23d0      	movs	r3, #208	; 0xd0
    44b2:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    44b4:	2bd0      	cmp	r3, #208	; 0xd0
    44b6:	d1f9      	bne.n	44ac <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    44b8:	4b59      	ldr	r3, [pc, #356]	; (4620 <_usb_d_dev_handler+0x22c>)
    44ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44bc:	2100      	movs	r1, #0
    44be:	2002      	movs	r0, #2
    44c0:	4798      	blx	r3
	bool     rc    = true;
    44c2:	2301      	movs	r3, #1
    44c4:	e7b8      	b.n	4438 <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    44c6:	4b59      	ldr	r3, [pc, #356]	; (462c <_usb_d_dev_handler+0x238>)
    44c8:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    44ca:	06db      	lsls	r3, r3, #27
    44cc:	d5fb      	bpl.n	44c6 <_usb_d_dev_handler+0xd2>
    44ce:	e7f3      	b.n	44b8 <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    44d0:	4b52      	ldr	r3, [pc, #328]	; (461c <_usb_d_dev_handler+0x228>)
    44d2:	2100      	movs	r1, #0
    44d4:	2280      	movs	r2, #128	; 0x80
    44d6:	0052      	lsls	r2, r2, #1
    44d8:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    44da:	3af8      	subs	r2, #248	; 0xf8
    44dc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    44de:	3268      	adds	r2, #104	; 0x68
    44e0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    44e2:	4a50      	ldr	r2, [pc, #320]	; (4624 <_usb_d_dev_handler+0x230>)
    44e4:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    44e6:	4b52      	ldr	r3, [pc, #328]	; (4630 <_usb_d_dev_handler+0x23c>)
    44e8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    44ea:	4b4d      	ldr	r3, [pc, #308]	; (4620 <_usb_d_dev_handler+0x22c>)
    44ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44ee:	2100      	movs	r1, #0
    44f0:	2001      	movs	r0, #1
    44f2:	4798      	blx	r3
	bool     rc    = true;
    44f4:	2301      	movs	r3, #1
    44f6:	e79f      	b.n	4438 <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    44f8:	4b48      	ldr	r3, [pc, #288]	; (461c <_usb_d_dev_handler+0x228>)
    44fa:	4a4a      	ldr	r2, [pc, #296]	; (4624 <_usb_d_dev_handler+0x230>)
    44fc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    44fe:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4500:	3a92      	subs	r2, #146	; 0x92
    4502:	3aff      	subs	r2, #255	; 0xff
    4504:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4506:	4b46      	ldr	r3, [pc, #280]	; (4620 <_usb_d_dev_handler+0x22c>)
    4508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    450a:	2100      	movs	r1, #0
    450c:	2004      	movs	r0, #4
    450e:	4798      	blx	r3
	bool     rc    = true;
    4510:	2301      	movs	r3, #1
    4512:	e791      	b.n	4438 <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4514:	06da      	lsls	r2, r3, #27
    4516:	d407      	bmi.n	4528 <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4518:	065a      	lsls	r2, r3, #25
    451a:	d408      	bmi.n	452e <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    451c:	069b      	lsls	r3, r3, #26
    451e:	d52f      	bpl.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    4520:	2100      	movs	r1, #0
    4522:	4b44      	ldr	r3, [pc, #272]	; (4634 <_usb_d_dev_handler+0x240>)
    4524:	4798      	blx	r3
    4526:	e02b      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    4528:	4b43      	ldr	r3, [pc, #268]	; (4638 <_usb_d_dev_handler+0x244>)
    452a:	4798      	blx	r3
    452c:	e028      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    452e:	2101      	movs	r1, #1
    4530:	4b40      	ldr	r3, [pc, #256]	; (4634 <_usb_d_dev_handler+0x240>)
    4532:	4798      	blx	r3
    4534:	e024      	b.n	4580 <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4536:	065a      	lsls	r2, r3, #25
    4538:	d40f      	bmi.n	455a <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    453a:	071a      	lsls	r2, r3, #28
    453c:	d411      	bmi.n	4562 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    453e:	079a      	lsls	r2, r3, #30
    4540:	d413      	bmi.n	456a <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4542:	7cc1      	ldrb	r1, [r0, #19]
    4544:	2207      	movs	r2, #7
    4546:	400a      	ands	r2, r1
    4548:	2a01      	cmp	r2, #1
    454a:	d119      	bne.n	4580 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    454c:	075a      	lsls	r2, r3, #29
    454e:	d410      	bmi.n	4572 <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4550:	06db      	lsls	r3, r3, #27
    4552:	d515      	bpl.n	4580 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    4554:	4b38      	ldr	r3, [pc, #224]	; (4638 <_usb_d_dev_handler+0x244>)
    4556:	4798      	blx	r3
    4558:	e012      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    455a:	2101      	movs	r1, #1
    455c:	4b35      	ldr	r3, [pc, #212]	; (4634 <_usb_d_dev_handler+0x240>)
    455e:	4798      	blx	r3
    4560:	e00e      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    4562:	2101      	movs	r1, #1
    4564:	4b35      	ldr	r3, [pc, #212]	; (463c <_usb_d_dev_handler+0x248>)
    4566:	4798      	blx	r3
    4568:	e00a      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    456a:	2101      	movs	r1, #1
    456c:	4b34      	ldr	r3, [pc, #208]	; (4640 <_usb_d_dev_handler+0x24c>)
    456e:	4798      	blx	r3
    4570:	e006      	b.n	4580 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    4572:	2100      	movs	r1, #0
    4574:	4b31      	ldr	r3, [pc, #196]	; (463c <_usb_d_dev_handler+0x248>)
    4576:	4798      	blx	r3
    4578:	e002      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    457a:	2100      	movs	r1, #0
    457c:	4b2d      	ldr	r3, [pc, #180]	; (4634 <_usb_d_dev_handler+0x240>)
    457e:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    4580:	3401      	adds	r4, #1
    4582:	b2e4      	uxtb	r4, r4
    4584:	2c08      	cmp	r4, #8
    4586:	d900      	bls.n	458a <_usb_d_dev_handler+0x196>
    4588:	e758      	b.n	443c <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    458a:	4b25      	ldr	r3, [pc, #148]	; (4620 <_usb_d_dev_handler+0x22c>)
    458c:	3320      	adds	r3, #32
    458e:	00a2      	lsls	r2, r4, #2
    4590:	1911      	adds	r1, r2, r4
    4592:	0088      	lsls	r0, r1, #2
    4594:	0001      	movs	r1, r0
    4596:	3010      	adds	r0, #16
    4598:	1818      	adds	r0, r3, r0
    459a:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    459c:	185b      	adds	r3, r3, r1
    459e:	3326      	adds	r3, #38	; 0x26
    45a0:	781b      	ldrb	r3, [r3, #0]
    45a2:	2bff      	cmp	r3, #255	; 0xff
    45a4:	d0ec      	beq.n	4580 <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    45a6:	7c82      	ldrb	r2, [r0, #18]
    45a8:	230f      	movs	r3, #15
    45aa:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    45ac:	2201      	movs	r2, #1
    45ae:	409a      	lsls	r2, r3
    45b0:	422a      	tst	r2, r5
    45b2:	d0e5      	beq.n	4580 <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    45b4:	001a      	movs	r2, r3
    45b6:	3208      	adds	r2, #8
    45b8:	0152      	lsls	r2, r2, #5
    45ba:	4918      	ldr	r1, [pc, #96]	; (461c <_usb_d_dev_handler+0x228>)
    45bc:	468c      	mov	ip, r1
    45be:	4462      	add	r2, ip
    45c0:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    45c2:	015b      	lsls	r3, r3, #5
    45c4:	491f      	ldr	r1, [pc, #124]	; (4644 <_usb_d_dev_handler+0x250>)
    45c6:	468c      	mov	ip, r1
    45c8:	4463      	add	r3, ip
    45ca:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    45cc:	4013      	ands	r3, r2
	if (flags) {
    45ce:	d0d7      	beq.n	4580 <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    45d0:	7cc2      	ldrb	r2, [r0, #19]
    45d2:	2147      	movs	r1, #71	; 0x47
    45d4:	4011      	ands	r1, r2
    45d6:	2901      	cmp	r1, #1
    45d8:	d09c      	beq.n	4514 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    45da:	b252      	sxtb	r2, r2
    45dc:	2a00      	cmp	r2, #0
    45de:	dbaa      	blt.n	4536 <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    45e0:	069a      	lsls	r2, r3, #26
    45e2:	d4ca      	bmi.n	457a <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    45e4:	075a      	lsls	r2, r3, #29
    45e6:	d40d      	bmi.n	4604 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    45e8:	07da      	lsls	r2, r3, #31
    45ea:	d40f      	bmi.n	460c <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    45ec:	7cc1      	ldrb	r1, [r0, #19]
    45ee:	2207      	movs	r2, #7
    45f0:	400a      	ands	r2, r1
    45f2:	2a01      	cmp	r2, #1
    45f4:	d1c4      	bne.n	4580 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    45f6:	071a      	lsls	r2, r3, #28
    45f8:	d40c      	bmi.n	4614 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    45fa:	06db      	lsls	r3, r3, #27
    45fc:	d5c0      	bpl.n	4580 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    45fe:	4b0e      	ldr	r3, [pc, #56]	; (4638 <_usb_d_dev_handler+0x244>)
    4600:	4798      	blx	r3
    4602:	e7bd      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    4604:	2100      	movs	r1, #0
    4606:	4b0d      	ldr	r3, [pc, #52]	; (463c <_usb_d_dev_handler+0x248>)
    4608:	4798      	blx	r3
    460a:	e7b9      	b.n	4580 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    460c:	2101      	movs	r1, #1
    460e:	4b0e      	ldr	r3, [pc, #56]	; (4648 <_usb_d_dev_handler+0x254>)
    4610:	4798      	blx	r3
    4612:	e7b5      	b.n	4580 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    4614:	2101      	movs	r1, #1
    4616:	4b09      	ldr	r3, [pc, #36]	; (463c <_usb_d_dev_handler+0x248>)
    4618:	4798      	blx	r3
    461a:	e7b1      	b.n	4580 <_usb_d_dev_handler+0x18c>
    461c:	41005000 	.word	0x41005000
    4620:	20000f84 	.word	0x20000f84
    4624:	00000201 	.word	0x00000201
    4628:	20000f04 	.word	0x20000f04
    462c:	40000800 	.word	0x40000800
    4630:	00004009 	.word	0x00004009
    4634:	00003e25 	.word	0x00003e25
    4638:	00003d95 	.word	0x00003d95
    463c:	00003ef9 	.word	0x00003ef9
    4640:	00004061 	.word	0x00004061
    4644:	41005109 	.word	0x41005109
    4648:	000041f1 	.word	0x000041f1

0000464c <_usb_d_dev_init>:
{
    464c:	b500      	push	{lr}
    464e:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    4650:	2200      	movs	r2, #0
    4652:	ab01      	add	r3, sp, #4
    4654:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4656:	4b21      	ldr	r3, [pc, #132]	; (46dc <_usb_d_dev_init+0x90>)
    4658:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    465a:	07db      	lsls	r3, r3, #31
    465c:	d41b      	bmi.n	4696 <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    465e:	4b1f      	ldr	r3, [pc, #124]	; (46dc <_usb_d_dev_init+0x90>)
    4660:	789b      	ldrb	r3, [r3, #2]
    4662:	079b      	lsls	r3, r3, #30
    4664:	d1fb      	bne.n	465e <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4666:	4b1d      	ldr	r3, [pc, #116]	; (46dc <_usb_d_dev_init+0x90>)
    4668:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    466a:	079b      	lsls	r3, r3, #30
    466c:	d50c      	bpl.n	4688 <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    466e:	4a1b      	ldr	r2, [pc, #108]	; (46dc <_usb_d_dev_init+0x90>)
    4670:	7813      	ldrb	r3, [r2, #0]
    4672:	2102      	movs	r1, #2
    4674:	438b      	bics	r3, r1
    4676:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4678:	4b18      	ldr	r3, [pc, #96]	; (46dc <_usb_d_dev_init+0x90>)
    467a:	789b      	ldrb	r3, [r3, #2]
    467c:	079b      	lsls	r3, r3, #30
    467e:	d1fb      	bne.n	4678 <_usb_d_dev_init+0x2c>
    4680:	4b16      	ldr	r3, [pc, #88]	; (46dc <_usb_d_dev_init+0x90>)
    4682:	789b      	ldrb	r3, [r3, #2]
    4684:	079b      	lsls	r3, r3, #30
    4686:	d4fb      	bmi.n	4680 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4688:	2201      	movs	r2, #1
    468a:	4b14      	ldr	r3, [pc, #80]	; (46dc <_usb_d_dev_init+0x90>)
    468c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    468e:	4b13      	ldr	r3, [pc, #76]	; (46dc <_usb_d_dev_init+0x90>)
    4690:	789b      	ldrb	r3, [r3, #2]
    4692:	079b      	lsls	r3, r3, #30
    4694:	d1fb      	bne.n	468e <_usb_d_dev_init+0x42>
    4696:	4b11      	ldr	r3, [pc, #68]	; (46dc <_usb_d_dev_init+0x90>)
    4698:	789b      	ldrb	r3, [r3, #2]
    469a:	07db      	lsls	r3, r3, #31
    469c:	d4fb      	bmi.n	4696 <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    469e:	4b10      	ldr	r3, [pc, #64]	; (46e0 <_usb_d_dev_init+0x94>)
    46a0:	4a10      	ldr	r2, [pc, #64]	; (46e4 <_usb_d_dev_init+0x98>)
    46a2:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    46a4:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    46a6:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    46a8:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    46aa:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    46ac:	4b0e      	ldr	r3, [pc, #56]	; (46e8 <_usb_d_dev_init+0x9c>)
    46ae:	4798      	blx	r3
	_usb_load_calib();
    46b0:	4b0e      	ldr	r3, [pc, #56]	; (46ec <_usb_d_dev_init+0xa0>)
    46b2:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    46b4:	2204      	movs	r2, #4
    46b6:	4b09      	ldr	r3, [pc, #36]	; (46dc <_usb_d_dev_init+0x90>)
    46b8:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    46ba:	4b08      	ldr	r3, [pc, #32]	; (46dc <_usb_d_dev_init+0x90>)
    46bc:	789b      	ldrb	r3, [r3, #2]
    46be:	079b      	lsls	r3, r3, #30
    46c0:	d1fb      	bne.n	46ba <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    46c2:	4a06      	ldr	r2, [pc, #24]	; (46dc <_usb_d_dev_init+0x90>)
    46c4:	4b0a      	ldr	r3, [pc, #40]	; (46f0 <_usb_d_dev_init+0xa4>)
    46c6:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    46c8:	ab01      	add	r3, sp, #4
    46ca:	785b      	ldrb	r3, [r3, #1]
    46cc:	2101      	movs	r1, #1
    46ce:	430b      	orrs	r3, r1
    46d0:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    46d2:	8113      	strh	r3, [r2, #8]
}
    46d4:	2000      	movs	r0, #0
    46d6:	b003      	add	sp, #12
    46d8:	bd00      	pop	{pc}
    46da:	46c0      	nop			; (mov r8, r8)
    46dc:	41005000 	.word	0x41005000
    46e0:	20000f84 	.word	0x20000f84
    46e4:	00003d3d 	.word	0x00003d3d
    46e8:	00004009 	.word	0x00004009
    46ec:	00003d41 	.word	0x00003d41
    46f0:	20000f04 	.word	0x20000f04

000046f4 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    46f4:	4b10      	ldr	r3, [pc, #64]	; (4738 <_usb_d_dev_enable+0x44>)
    46f6:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    46f8:	079b      	lsls	r3, r3, #30
    46fa:	d119      	bne.n	4730 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    46fc:	4b0e      	ldr	r3, [pc, #56]	; (4738 <_usb_d_dev_enable+0x44>)
    46fe:	789b      	ldrb	r3, [r3, #2]
    4700:	079b      	lsls	r3, r3, #30
    4702:	d1fb      	bne.n	46fc <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4704:	4b0c      	ldr	r3, [pc, #48]	; (4738 <_usb_d_dev_enable+0x44>)
    4706:	781b      	ldrb	r3, [r3, #0]
    4708:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    470a:	079a      	lsls	r2, r3, #30
    470c:	d408      	bmi.n	4720 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    470e:	2202      	movs	r2, #2
    4710:	4313      	orrs	r3, r2
    4712:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4714:	4a08      	ldr	r2, [pc, #32]	; (4738 <_usb_d_dev_enable+0x44>)
    4716:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4718:	4b07      	ldr	r3, [pc, #28]	; (4738 <_usb_d_dev_enable+0x44>)
    471a:	789b      	ldrb	r3, [r3, #2]
    471c:	079b      	lsls	r3, r3, #30
    471e:	d1fb      	bne.n	4718 <_usb_d_dev_enable+0x24>
    4720:	2280      	movs	r2, #128	; 0x80
    4722:	4b06      	ldr	r3, [pc, #24]	; (473c <_usb_d_dev_enable+0x48>)
    4724:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4726:	4a06      	ldr	r2, [pc, #24]	; (4740 <_usb_d_dev_enable+0x4c>)
    4728:	4b03      	ldr	r3, [pc, #12]	; (4738 <_usb_d_dev_enable+0x44>)
    472a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    472c:	2000      	movs	r0, #0
}
    472e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4730:	2011      	movs	r0, #17
    4732:	4240      	negs	r0, r0
    4734:	e7fb      	b.n	472e <_usb_d_dev_enable+0x3a>
    4736:	46c0      	nop			; (mov r8, r8)
    4738:	41005000 	.word	0x41005000
    473c:	e000e100 	.word	0xe000e100
    4740:	0000028d 	.word	0x0000028d

00004744 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4744:	4a02      	ldr	r2, [pc, #8]	; (4750 <_usb_d_dev_attach+0xc>)
    4746:	8913      	ldrh	r3, [r2, #8]
    4748:	2101      	movs	r1, #1
    474a:	438b      	bics	r3, r1
    474c:	8113      	strh	r3, [r2, #8]
}
    474e:	4770      	bx	lr
    4750:	41005000 	.word	0x41005000

00004754 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4754:	2380      	movs	r3, #128	; 0x80
    4756:	425b      	negs	r3, r3
    4758:	4318      	orrs	r0, r3
    475a:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    475c:	4b01      	ldr	r3, [pc, #4]	; (4764 <_usb_d_dev_set_address+0x10>)
    475e:	7298      	strb	r0, [r3, #10]
}
    4760:	4770      	bx	lr
    4762:	46c0      	nop			; (mov r8, r8)
    4764:	41005000 	.word	0x41005000

00004768 <_usb_d_dev_ep_init>:
{
    4768:	b5f0      	push	{r4, r5, r6, r7, lr}
    476a:	46c6      	mov	lr, r8
    476c:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    476e:	230f      	movs	r3, #15
    4770:	4003      	ands	r3, r0
    4772:	b244      	sxtb	r4, r0
    4774:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4776:	2b00      	cmp	r3, #0
    4778:	d005      	beq.n	4786 <_usb_d_dev_ep_init+0x1e>
    477a:	2c00      	cmp	r4, #0
    477c:	db01      	blt.n	4782 <_usb_d_dev_ep_init+0x1a>
    477e:	001c      	movs	r4, r3
    4780:	e002      	b.n	4788 <_usb_d_dev_ep_init+0x20>
    4782:	1d1c      	adds	r4, r3, #4
    4784:	e000      	b.n	4788 <_usb_d_dev_ep_init+0x20>
    4786:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    4788:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    478a:	2503      	movs	r5, #3
    478c:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    478e:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    4790:	2b04      	cmp	r3, #4
    4792:	d900      	bls.n	4796 <_usb_d_dev_ep_init+0x2e>
    4794:	e07a      	b.n	488c <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    4796:	00a5      	lsls	r5, r4, #2
    4798:	192d      	adds	r5, r5, r4
    479a:	00ac      	lsls	r4, r5, #2
    479c:	46a0      	mov	r8, r4
    479e:	4c43      	ldr	r4, [pc, #268]	; (48ac <_usb_d_dev_ep_init+0x144>)
    47a0:	3420      	adds	r4, #32
    47a2:	4444      	add	r4, r8
    47a4:	3426      	adds	r4, #38	; 0x26
    47a6:	7824      	ldrb	r4, [r4, #0]
    47a8:	2cff      	cmp	r4, #255	; 0xff
    47aa:	d000      	beq.n	47ae <_usb_d_dev_ep_init+0x46>
    47ac:	e071      	b.n	4892 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    47ae:	2900      	cmp	r1, #0
    47b0:	d118      	bne.n	47e4 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    47b2:	2b00      	cmp	r3, #0
    47b4:	d004      	beq.n	47c0 <_usb_d_dev_ep_init+0x58>
    47b6:	4664      	mov	r4, ip
    47b8:	2c00      	cmp	r4, #0
    47ba:	db01      	blt.n	47c0 <_usb_d_dev_ep_init+0x58>
    47bc:	3304      	adds	r3, #4
    47be:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    47c0:	009c      	lsls	r4, r3, #2
    47c2:	18e3      	adds	r3, r4, r3
    47c4:	009d      	lsls	r5, r3, #2
    47c6:	4b39      	ldr	r3, [pc, #228]	; (48ac <_usb_d_dev_ep_init+0x144>)
    47c8:	3320      	adds	r3, #32
    47ca:	195b      	adds	r3, r3, r5
    47cc:	3326      	adds	r3, #38	; 0x26
    47ce:	781b      	ldrb	r3, [r3, #0]
    47d0:	2bff      	cmp	r3, #255	; 0xff
    47d2:	d161      	bne.n	4898 <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    47d4:	007b      	lsls	r3, r7, #1
    47d6:	19db      	adds	r3, r3, r7
    47d8:	009c      	lsls	r4, r3, #2
    47da:	4b35      	ldr	r3, [pc, #212]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    47dc:	191b      	adds	r3, r3, r4
    47de:	689b      	ldr	r3, [r3, #8]
    47e0:	2b00      	cmp	r3, #0
    47e2:	d05c      	beq.n	489e <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    47e4:	4663      	mov	r3, ip
    47e6:	2b00      	cmp	r3, #0
    47e8:	db37      	blt.n	485a <_usb_d_dev_ep_init+0xf2>
    47ea:	007b      	lsls	r3, r7, #1
    47ec:	19db      	adds	r3, r3, r7
    47ee:	009c      	lsls	r4, r3, #2
    47f0:	4b2f      	ldr	r3, [pc, #188]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    47f2:	191b      	adds	r3, r3, r4
    47f4:	689b      	ldr	r3, [r3, #8]
    47f6:	1e5c      	subs	r4, r3, #1
    47f8:	41a3      	sbcs	r3, r4
    47fa:	b2db      	uxtb	r3, r3
    47fc:	2b00      	cmp	r3, #0
    47fe:	d00a      	beq.n	4816 <_usb_d_dev_ep_init+0xae>
    4800:	4663      	mov	r3, ip
    4802:	2b00      	cmp	r3, #0
    4804:	db33      	blt.n	486e <_usb_d_dev_ep_init+0x106>
    4806:	007b      	lsls	r3, r7, #1
    4808:	19db      	adds	r3, r3, r7
    480a:	009c      	lsls	r4, r3, #2
    480c:	4b28      	ldr	r3, [pc, #160]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    480e:	191b      	adds	r3, r3, r4
    4810:	8a1b      	ldrh	r3, [r3, #16]
    4812:	4293      	cmp	r3, r2
    4814:	db46      	blt.n	48a4 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4816:	4663      	mov	r3, ip
    4818:	2b00      	cmp	r3, #0
    481a:	db2f      	blt.n	487c <_usb_d_dev_ep_init+0x114>
    481c:	007b      	lsls	r3, r7, #1
    481e:	19df      	adds	r7, r3, r7
    4820:	00bc      	lsls	r4, r7, #2
    4822:	4b23      	ldr	r3, [pc, #140]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    4824:	191b      	adds	r3, r3, r4
    4826:	689b      	ldr	r3, [r3, #8]
    4828:	469c      	mov	ip, r3
    482a:	4b20      	ldr	r3, [pc, #128]	; (48ac <_usb_d_dev_ep_init+0x144>)
    482c:	00b5      	lsls	r5, r6, #2
    482e:	19af      	adds	r7, r5, r6
    4830:	00bc      	lsls	r4, r7, #2
    4832:	191c      	adds	r4, r3, r4
    4834:	4667      	mov	r7, ip
    4836:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    4838:	3444      	adds	r4, #68	; 0x44
    483a:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    483c:	3101      	adds	r1, #1
    483e:	3320      	adds	r3, #32
    4840:	19ac      	adds	r4, r5, r6
    4842:	00a2      	lsls	r2, r4, #2
    4844:	0014      	movs	r4, r2
    4846:	189a      	adds	r2, r3, r2
    4848:	3227      	adds	r2, #39	; 0x27
    484a:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    484c:	191b      	adds	r3, r3, r4
    484e:	3326      	adds	r3, #38	; 0x26
    4850:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    4852:	2000      	movs	r0, #0
}
    4854:	bc04      	pop	{r2}
    4856:	4690      	mov	r8, r2
    4858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    485a:	007b      	lsls	r3, r7, #1
    485c:	19db      	adds	r3, r3, r7
    485e:	009c      	lsls	r4, r3, #2
    4860:	4b13      	ldr	r3, [pc, #76]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    4862:	191b      	adds	r3, r3, r4
    4864:	68db      	ldr	r3, [r3, #12]
    4866:	1e5c      	subs	r4, r3, #1
    4868:	41a3      	sbcs	r3, r4
    486a:	b2db      	uxtb	r3, r3
    486c:	e7c6      	b.n	47fc <_usb_d_dev_ep_init+0x94>
    486e:	007b      	lsls	r3, r7, #1
    4870:	19db      	adds	r3, r3, r7
    4872:	009c      	lsls	r4, r3, #2
    4874:	4b0e      	ldr	r3, [pc, #56]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    4876:	191b      	adds	r3, r3, r4
    4878:	8a5b      	ldrh	r3, [r3, #18]
    487a:	e7ca      	b.n	4812 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    487c:	007b      	lsls	r3, r7, #1
    487e:	19df      	adds	r7, r3, r7
    4880:	00bc      	lsls	r4, r7, #2
    4882:	4b0b      	ldr	r3, [pc, #44]	; (48b0 <_usb_d_dev_ep_init+0x148>)
    4884:	191b      	adds	r3, r3, r4
    4886:	68db      	ldr	r3, [r3, #12]
    4888:	469c      	mov	ip, r3
    488a:	e7ce      	b.n	482a <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    488c:	2012      	movs	r0, #18
    488e:	4240      	negs	r0, r0
    4890:	e7e0      	b.n	4854 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    4892:	2014      	movs	r0, #20
    4894:	4240      	negs	r0, r0
    4896:	e7dd      	b.n	4854 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    4898:	2014      	movs	r0, #20
    489a:	4240      	negs	r0, r0
    489c:	e7da      	b.n	4854 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    489e:	2013      	movs	r0, #19
    48a0:	4240      	negs	r0, r0
    48a2:	e7d7      	b.n	4854 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    48a4:	2013      	movs	r0, #19
    48a6:	4240      	negs	r0, r0
    48a8:	e7d4      	b.n	4854 <_usb_d_dev_ep_init+0xec>
    48aa:	46c0      	nop			; (mov r8, r8)
    48ac:	20000f84 	.word	0x20000f84
    48b0:	0001049c 	.word	0x0001049c

000048b4 <_usb_d_dev_ep_deinit>:
{
    48b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b6:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    48b8:	250f      	movs	r5, #15
    48ba:	4005      	ands	r5, r0
    48bc:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    48be:	0ffb      	lsrs	r3, r7, #31
    48c0:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    48c2:	2d00      	cmp	r5, #0
    48c4:	d005      	beq.n	48d2 <_usb_d_dev_ep_deinit+0x1e>
    48c6:	2f00      	cmp	r7, #0
    48c8:	db01      	blt.n	48ce <_usb_d_dev_ep_deinit+0x1a>
    48ca:	002a      	movs	r2, r5
    48cc:	e002      	b.n	48d4 <_usb_d_dev_ep_deinit+0x20>
    48ce:	1d2a      	adds	r2, r5, #4
    48d0:	e000      	b.n	48d4 <_usb_d_dev_ep_deinit+0x20>
    48d2:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    48d4:	0016      	movs	r6, r2
    48d6:	0093      	lsls	r3, r2, #2
    48d8:	189b      	adds	r3, r3, r2
    48da:	0099      	lsls	r1, r3, #2
    48dc:	3110      	adds	r1, #16
    48de:	4823      	ldr	r0, [pc, #140]	; (496c <_usb_d_dev_ep_deinit+0xb8>)
    48e0:	3020      	adds	r0, #32
    48e2:	1840      	adds	r0, r0, r1
    48e4:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    48e6:	2d04      	cmp	r5, #4
    48e8:	d830      	bhi.n	494c <_usb_d_dev_ep_deinit+0x98>
    48ea:	0093      	lsls	r3, r2, #2
    48ec:	189a      	adds	r2, r3, r2
    48ee:	0091      	lsls	r1, r2, #2
    48f0:	4b1e      	ldr	r3, [pc, #120]	; (496c <_usb_d_dev_ep_deinit+0xb8>)
    48f2:	3320      	adds	r3, #32
    48f4:	185b      	adds	r3, r3, r1
    48f6:	3326      	adds	r3, #38	; 0x26
    48f8:	781b      	ldrb	r3, [r3, #0]
    48fa:	2bff      	cmp	r3, #255	; 0xff
    48fc:	d026      	beq.n	494c <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    48fe:	2203      	movs	r2, #3
    4900:	4661      	mov	r1, ip
    4902:	4b1b      	ldr	r3, [pc, #108]	; (4970 <_usb_d_dev_ep_deinit+0xbc>)
    4904:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4906:	00b2      	lsls	r2, r6, #2
    4908:	1992      	adds	r2, r2, r6
    490a:	0091      	lsls	r1, r2, #2
    490c:	4b17      	ldr	r3, [pc, #92]	; (496c <_usb_d_dev_ep_deinit+0xb8>)
    490e:	185b      	adds	r3, r3, r1
    4910:	3340      	adds	r3, #64	; 0x40
    4912:	79da      	ldrb	r2, [r3, #7]
    4914:	2307      	movs	r3, #7
    4916:	4013      	ands	r3, r2
    4918:	2b01      	cmp	r3, #1
    491a:	d018      	beq.n	494e <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    491c:	2f00      	cmp	r7, #0
    491e:	db1c      	blt.n	495a <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4920:	4a14      	ldr	r2, [pc, #80]	; (4974 <_usb_d_dev_ep_deinit+0xc0>)
    4922:	3408      	adds	r4, #8
    4924:	0164      	lsls	r4, r4, #5
    4926:	5ca3      	ldrb	r3, [r4, r2]
    4928:	2107      	movs	r1, #7
    492a:	438b      	bics	r3, r1
    492c:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    492e:	4b0f      	ldr	r3, [pc, #60]	; (496c <_usb_d_dev_ep_deinit+0xb8>)
    4930:	3320      	adds	r3, #32
    4932:	00b1      	lsls	r1, r6, #2
    4934:	1988      	adds	r0, r1, r6
    4936:	0082      	lsls	r2, r0, #2
    4938:	189a      	adds	r2, r3, r2
    493a:	3227      	adds	r2, #39	; 0x27
    493c:	2000      	movs	r0, #0
    493e:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    4940:	198e      	adds	r6, r1, r6
    4942:	00b2      	lsls	r2, r6, #2
    4944:	189b      	adds	r3, r3, r2
    4946:	3326      	adds	r3, #38	; 0x26
    4948:	22ff      	movs	r2, #255	; 0xff
    494a:	701a      	strb	r2, [r3, #0]
}
    494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    494e:	3408      	adds	r4, #8
    4950:	0164      	lsls	r4, r4, #5
    4952:	2200      	movs	r2, #0
    4954:	4b07      	ldr	r3, [pc, #28]	; (4974 <_usb_d_dev_ep_deinit+0xc0>)
    4956:	54e2      	strb	r2, [r4, r3]
    4958:	e7e9      	b.n	492e <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    495a:	4a06      	ldr	r2, [pc, #24]	; (4974 <_usb_d_dev_ep_deinit+0xc0>)
    495c:	3508      	adds	r5, #8
    495e:	016d      	lsls	r5, r5, #5
    4960:	5cab      	ldrb	r3, [r5, r2]
    4962:	2170      	movs	r1, #112	; 0x70
    4964:	438b      	bics	r3, r1
    4966:	54ab      	strb	r3, [r5, r2]
    4968:	e7e1      	b.n	492e <_usb_d_dev_ep_deinit+0x7a>
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	20000f84 	.word	0x20000f84
    4970:	00003e7d 	.word	0x00003e7d
    4974:	41005000 	.word	0x41005000

00004978 <_usb_d_dev_ep_enable>:
{
    4978:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    497a:	230f      	movs	r3, #15
    497c:	4003      	ands	r3, r0
    497e:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4980:	2b00      	cmp	r3, #0
    4982:	d005      	beq.n	4990 <_usb_d_dev_ep_enable+0x18>
    4984:	2800      	cmp	r0, #0
    4986:	db01      	blt.n	498c <_usb_d_dev_ep_enable+0x14>
    4988:	001e      	movs	r6, r3
    498a:	e002      	b.n	4992 <_usb_d_dev_ep_enable+0x1a>
    498c:	1d1e      	adds	r6, r3, #4
    498e:	e000      	b.n	4992 <_usb_d_dev_ep_enable+0x1a>
    4990:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    4992:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4994:	001a      	movs	r2, r3
    4996:	3208      	adds	r2, #8
    4998:	0152      	lsls	r2, r2, #5
    499a:	49b3      	ldr	r1, [pc, #716]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    499c:	5c55      	ldrb	r5, [r2, r1]
    499e:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    49a0:	2b04      	cmp	r3, #4
    49a2:	d900      	bls.n	49a6 <_usb_d_dev_ep_enable+0x2e>
    49a4:	e151      	b.n	4c4a <_usb_d_dev_ep_enable+0x2d2>
    49a6:	00b1      	lsls	r1, r6, #2
    49a8:	1989      	adds	r1, r1, r6
    49aa:	008e      	lsls	r6, r1, #2
    49ac:	4aaf      	ldr	r2, [pc, #700]	; (4c6c <_usb_d_dev_ep_enable+0x2f4>)
    49ae:	3220      	adds	r2, #32
    49b0:	1992      	adds	r2, r2, r6
    49b2:	3226      	adds	r2, #38	; 0x26
    49b4:	7812      	ldrb	r2, [r2, #0]
    49b6:	2aff      	cmp	r2, #255	; 0xff
    49b8:	d100      	bne.n	49bc <_usb_d_dev_ep_enable+0x44>
    49ba:	e149      	b.n	4c50 <_usb_d_dev_ep_enable+0x2d8>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    49bc:	015a      	lsls	r2, r3, #5
    49be:	4eac      	ldr	r6, [pc, #688]	; (4c70 <_usb_d_dev_ep_enable+0x2f8>)
    49c0:	18b6      	adds	r6, r6, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    49c2:	00a1      	lsls	r1, r4, #2
    49c4:	1909      	adds	r1, r1, r4
    49c6:	008f      	lsls	r7, r1, #2
    49c8:	4aa8      	ldr	r2, [pc, #672]	; (4c6c <_usb_d_dev_ep_enable+0x2f4>)
    49ca:	19d2      	adds	r2, r2, r7
    49cc:	3240      	adds	r2, #64	; 0x40
    49ce:	79d1      	ldrb	r1, [r2, #7]
    49d0:	2207      	movs	r2, #7
    49d2:	400a      	ands	r2, r1
    49d4:	2a01      	cmp	r2, #1
    49d6:	d037      	beq.n	4a48 <_usb_d_dev_ep_enable+0xd0>
	} else if (dir) {
    49d8:	2800      	cmp	r0, #0
    49da:	da00      	bge.n	49de <_usb_d_dev_ep_enable+0x66>
    49dc:	e0cc      	b.n	4b78 <_usb_d_dev_ep_enable+0x200>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    49de:	076a      	lsls	r2, r5, #29
    49e0:	d000      	beq.n	49e4 <_usb_d_dev_ep_enable+0x6c>
    49e2:	e13e      	b.n	4c62 <_usb_d_dev_ep_enable+0x2ea>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    49e4:	4aa1      	ldr	r2, [pc, #644]	; (4c6c <_usb_d_dev_ep_enable+0x2f4>)
    49e6:	00a0      	lsls	r0, r4, #2
    49e8:	1907      	adds	r7, r0, r4
    49ea:	00b9      	lsls	r1, r7, #2
    49ec:	1851      	adds	r1, r2, r1
    49ee:	3140      	adds	r1, #64	; 0x40
    49f0:	79c9      	ldrb	r1, [r1, #7]
    49f2:	0749      	lsls	r1, r1, #29
    49f4:	0f49      	lsrs	r1, r1, #29
    49f6:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    49f8:	0019      	movs	r1, r3
    49fa:	3108      	adds	r1, #8
    49fc:	0149      	lsls	r1, r1, #5
    49fe:	4f9a      	ldr	r7, [pc, #616]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    4a00:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4a02:	1904      	adds	r4, r0, r4
    4a04:	00a1      	lsls	r1, r4, #2
    4a06:	1852      	adds	r2, r2, r1
    4a08:	3244      	adds	r2, #68	; 0x44
    4a0a:	8810      	ldrh	r0, [r2, #0]
    4a0c:	0382      	lsls	r2, r0, #14
    4a0e:	4999      	ldr	r1, [pc, #612]	; (4c74 <_usb_d_dev_ep_enable+0x2fc>)
    4a10:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4a12:	2180      	movs	r1, #128	; 0x80
    4a14:	0089      	lsls	r1, r1, #2
    4a16:	4288      	cmp	r0, r1
    4a18:	d900      	bls.n	4a1c <_usb_d_dev_ep_enable+0xa4>
    4a1a:	e0f9      	b.n	4c10 <_usb_d_dev_ep_enable+0x298>
    4a1c:	3901      	subs	r1, #1
    4a1e:	39ff      	subs	r1, #255	; 0xff
    4a20:	4288      	cmp	r0, r1
    4a22:	d900      	bls.n	4a26 <_usb_d_dev_ep_enable+0xae>
    4a24:	e107      	b.n	4c36 <_usb_d_dev_ep_enable+0x2be>
    4a26:	2880      	cmp	r0, #128	; 0x80
    4a28:	d900      	bls.n	4a2c <_usb_d_dev_ep_enable+0xb4>
    4a2a:	e106      	b.n	4c3a <_usb_d_dev_ep_enable+0x2c2>
    4a2c:	2840      	cmp	r0, #64	; 0x40
    4a2e:	d900      	bls.n	4a32 <_usb_d_dev_ep_enable+0xba>
    4a30:	e105      	b.n	4c3e <_usb_d_dev_ep_enable+0x2c6>
    4a32:	2820      	cmp	r0, #32
    4a34:	d900      	bls.n	4a38 <_usb_d_dev_ep_enable+0xc0>
    4a36:	e104      	b.n	4c42 <_usb_d_dev_ep_enable+0x2ca>
    4a38:	2810      	cmp	r0, #16
    4a3a:	d900      	bls.n	4a3e <_usb_d_dev_ep_enable+0xc6>
    4a3c:	e103      	b.n	4c46 <_usb_d_dev_ep_enable+0x2ce>
    4a3e:	39f8      	subs	r1, #248	; 0xf8
    4a40:	4281      	cmp	r1, r0
    4a42:	4189      	sbcs	r1, r1
    4a44:	4249      	negs	r1, r1
    4a46:	e0e4      	b.n	4c12 <_usb_d_dev_ep_enable+0x29a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    4a48:	3276      	adds	r2, #118	; 0x76
    4a4a:	422a      	tst	r2, r5
    4a4c:	d000      	beq.n	4a50 <_usb_d_dev_ep_enable+0xd8>
    4a4e:	e102      	b.n	4c56 <_usb_d_dev_ep_enable+0x2de>
    4a50:	001a      	movs	r2, r3
    4a52:	3208      	adds	r2, #8
    4a54:	0152      	lsls	r2, r2, #5
    4a56:	2011      	movs	r0, #17
    4a58:	4983      	ldr	r1, [pc, #524]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    4a5a:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4a5c:	4a83      	ldr	r2, [pc, #524]	; (4c6c <_usb_d_dev_ep_enable+0x2f4>)
    4a5e:	19d2      	adds	r2, r2, r7
    4a60:	3244      	adds	r2, #68	; 0x44
    4a62:	8812      	ldrh	r2, [r2, #0]
    4a64:	0391      	lsls	r1, r2, #14
    4a66:	4883      	ldr	r0, [pc, #524]	; (4c74 <_usb_d_dev_ep_enable+0x2fc>)
    4a68:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4a6a:	2080      	movs	r0, #128	; 0x80
    4a6c:	0080      	lsls	r0, r0, #2
    4a6e:	4282      	cmp	r2, r0
    4a70:	d810      	bhi.n	4a94 <_usb_d_dev_ep_enable+0x11c>
    4a72:	3801      	subs	r0, #1
    4a74:	38ff      	subs	r0, #255	; 0xff
    4a76:	4282      	cmp	r2, r0
    4a78:	d827      	bhi.n	4aca <_usb_d_dev_ep_enable+0x152>
    4a7a:	2a80      	cmp	r2, #128	; 0x80
    4a7c:	d827      	bhi.n	4ace <_usb_d_dev_ep_enable+0x156>
    4a7e:	2a40      	cmp	r2, #64	; 0x40
    4a80:	d827      	bhi.n	4ad2 <_usb_d_dev_ep_enable+0x15a>
    4a82:	2a20      	cmp	r2, #32
    4a84:	d827      	bhi.n	4ad6 <_usb_d_dev_ep_enable+0x15e>
    4a86:	2a10      	cmp	r2, #16
    4a88:	d827      	bhi.n	4ada <_usb_d_dev_ep_enable+0x162>
    4a8a:	38f8      	subs	r0, #248	; 0xf8
    4a8c:	4290      	cmp	r0, r2
    4a8e:	4180      	sbcs	r0, r0
    4a90:	4240      	negs	r0, r0
    4a92:	e000      	b.n	4a96 <_usb_d_dev_ep_enable+0x11e>
    4a94:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4a96:	0700      	lsls	r0, r0, #28
    4a98:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4a9a:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4a9c:	0491      	lsls	r1, r2, #18
    4a9e:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4aa0:	2080      	movs	r0, #128	; 0x80
    4aa2:	0080      	lsls	r0, r0, #2
    4aa4:	4282      	cmp	r2, r0
    4aa6:	d81a      	bhi.n	4ade <_usb_d_dev_ep_enable+0x166>
    4aa8:	3801      	subs	r0, #1
    4aaa:	38ff      	subs	r0, #255	; 0xff
    4aac:	4282      	cmp	r2, r0
    4aae:	d859      	bhi.n	4b64 <_usb_d_dev_ep_enable+0x1ec>
    4ab0:	2a80      	cmp	r2, #128	; 0x80
    4ab2:	d859      	bhi.n	4b68 <_usb_d_dev_ep_enable+0x1f0>
    4ab4:	2a40      	cmp	r2, #64	; 0x40
    4ab6:	d859      	bhi.n	4b6c <_usb_d_dev_ep_enable+0x1f4>
    4ab8:	2a20      	cmp	r2, #32
    4aba:	d859      	bhi.n	4b70 <_usb_d_dev_ep_enable+0x1f8>
    4abc:	2a10      	cmp	r2, #16
    4abe:	d859      	bhi.n	4b74 <_usb_d_dev_ep_enable+0x1fc>
    4ac0:	38f8      	subs	r0, #248	; 0xf8
    4ac2:	4290      	cmp	r0, r2
    4ac4:	4192      	sbcs	r2, r2
    4ac6:	4252      	negs	r2, r2
    4ac8:	e00a      	b.n	4ae0 <_usb_d_dev_ep_enable+0x168>
    4aca:	2006      	movs	r0, #6
    4acc:	e7e3      	b.n	4a96 <_usb_d_dev_ep_enable+0x11e>
    4ace:	2005      	movs	r0, #5
    4ad0:	e7e1      	b.n	4a96 <_usb_d_dev_ep_enable+0x11e>
    4ad2:	2004      	movs	r0, #4
    4ad4:	e7df      	b.n	4a96 <_usb_d_dev_ep_enable+0x11e>
    4ad6:	2003      	movs	r0, #3
    4ad8:	e7dd      	b.n	4a96 <_usb_d_dev_ep_enable+0x11e>
    4ada:	2002      	movs	r0, #2
    4adc:	e7db      	b.n	4a96 <_usb_d_dev_ep_enable+0x11e>
    4ade:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ae0:	0712      	lsls	r2, r2, #28
    4ae2:	430a      	orrs	r2, r1
    4ae4:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4ae6:	001a      	movs	r2, r3
    4ae8:	3208      	adds	r2, #8
    4aea:	0152      	lsls	r2, r2, #5
    4aec:	495e      	ldr	r1, [pc, #376]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    4aee:	468c      	mov	ip, r1
    4af0:	4462      	add	r2, ip
    4af2:	2040      	movs	r0, #64	; 0x40
    4af4:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4af6:	2180      	movs	r1, #128	; 0x80
    4af8:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    4afa:	4a5d      	ldr	r2, [pc, #372]	; (4c70 <_usb_d_dev_ep_enable+0x2f8>)
    4afc:	015b      	lsls	r3, r3, #5
    4afe:	18d3      	adds	r3, r2, r3
    4b00:	2100      	movs	r1, #0
    4b02:	7299      	strb	r1, [r3, #10]
    4b04:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4b06:	4959      	ldr	r1, [pc, #356]	; (4c6c <_usb_d_dev_ep_enable+0x2f4>)
    4b08:	000b      	movs	r3, r1
    4b0a:	3320      	adds	r3, #32
    4b0c:	00a6      	lsls	r6, r4, #2
    4b0e:	1937      	adds	r7, r6, r4
    4b10:	00bd      	lsls	r5, r7, #2
    4b12:	195b      	adds	r3, r3, r5
    4b14:	3326      	adds	r3, #38	; 0x26
    4b16:	781b      	ldrb	r3, [r3, #0]
    4b18:	250f      	movs	r5, #15
    4b1a:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4b1c:	1937      	adds	r7, r6, r4
    4b1e:	00bd      	lsls	r5, r7, #2
    4b20:	194d      	adds	r5, r1, r5
    4b22:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	bank->ADDR.reg          = addr;
    4b24:	015d      	lsls	r5, r3, #5
    4b26:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    4b28:	1934      	adds	r4, r6, r4
    4b2a:	00a6      	lsls	r6, r4, #2
    4b2c:	1989      	adds	r1, r1, r6
    4b2e:	3144      	adds	r1, #68	; 0x44
    4b30:	8809      	ldrh	r1, [r1, #0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4b32:	1952      	adds	r2, r2, r5
    4b34:	6854      	ldr	r4, [r2, #4]
    4b36:	0489      	lsls	r1, r1, #18
    4b38:	0909      	lsrs	r1, r1, #4
    4b3a:	4e4f      	ldr	r6, [pc, #316]	; (4c78 <_usb_d_dev_ep_enable+0x300>)
    4b3c:	4034      	ands	r4, r6
    4b3e:	4321      	orrs	r1, r4
    4b40:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4b42:	6851      	ldr	r1, [r2, #4]
    4b44:	0b89      	lsrs	r1, r1, #14
    4b46:	038c      	lsls	r4, r1, #14
    4b48:	6054      	str	r4, [r2, #4]
    4b4a:	3308      	adds	r3, #8
    4b4c:	015b      	lsls	r3, r3, #5
    4b4e:	4463      	add	r3, ip
    4b50:	22b0      	movs	r2, #176	; 0xb0
    4b52:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4b54:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4b56:	4b49      	ldr	r3, [pc, #292]	; (4c7c <_usb_d_dev_ep_enable+0x304>)
    4b58:	469c      	mov	ip, r3
    4b5a:	4465      	add	r5, ip
    4b5c:	2310      	movs	r3, #16
    4b5e:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    4b60:	2000      	movs	r0, #0
    4b62:	e067      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4b64:	2206      	movs	r2, #6
    4b66:	e7bb      	b.n	4ae0 <_usb_d_dev_ep_enable+0x168>
    4b68:	2205      	movs	r2, #5
    4b6a:	e7b9      	b.n	4ae0 <_usb_d_dev_ep_enable+0x168>
    4b6c:	2204      	movs	r2, #4
    4b6e:	e7b7      	b.n	4ae0 <_usb_d_dev_ep_enable+0x168>
    4b70:	2203      	movs	r2, #3
    4b72:	e7b5      	b.n	4ae0 <_usb_d_dev_ep_enable+0x168>
    4b74:	2202      	movs	r2, #2
    4b76:	e7b3      	b.n	4ae0 <_usb_d_dev_ep_enable+0x168>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    4b78:	2270      	movs	r2, #112	; 0x70
    4b7a:	422a      	tst	r2, r5
    4b7c:	d000      	beq.n	4b80 <_usb_d_dev_ep_enable+0x208>
    4b7e:	e06d      	b.n	4c5c <_usb_d_dev_ep_enable+0x2e4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4b80:	493a      	ldr	r1, [pc, #232]	; (4c6c <_usb_d_dev_ep_enable+0x2f4>)
    4b82:	00a0      	lsls	r0, r4, #2
    4b84:	1907      	adds	r7, r0, r4
    4b86:	00ba      	lsls	r2, r7, #2
    4b88:	188a      	adds	r2, r1, r2
    4b8a:	3240      	adds	r2, #64	; 0x40
    4b8c:	79d2      	ldrb	r2, [r2, #7]
    4b8e:	0752      	lsls	r2, r2, #29
    4b90:	0e52      	lsrs	r2, r2, #25
    4b92:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4b94:	001a      	movs	r2, r3
    4b96:	3208      	adds	r2, #8
    4b98:	0152      	lsls	r2, r2, #5
    4b9a:	4f33      	ldr	r7, [pc, #204]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    4b9c:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4b9e:	1904      	adds	r4, r0, r4
    4ba0:	00a2      	lsls	r2, r4, #2
    4ba2:	1889      	adds	r1, r1, r2
    4ba4:	3144      	adds	r1, #68	; 0x44
    4ba6:	8809      	ldrh	r1, [r1, #0]
    4ba8:	048a      	lsls	r2, r1, #18
    4baa:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4bac:	2080      	movs	r0, #128	; 0x80
    4bae:	0080      	lsls	r0, r0, #2
    4bb0:	4281      	cmp	r1, r0
    4bb2:	d810      	bhi.n	4bd6 <_usb_d_dev_ep_enable+0x25e>
    4bb4:	3801      	subs	r0, #1
    4bb6:	38ff      	subs	r0, #255	; 0xff
    4bb8:	4281      	cmp	r1, r0
    4bba:	d81f      	bhi.n	4bfc <_usb_d_dev_ep_enable+0x284>
    4bbc:	2980      	cmp	r1, #128	; 0x80
    4bbe:	d81f      	bhi.n	4c00 <_usb_d_dev_ep_enable+0x288>
    4bc0:	2940      	cmp	r1, #64	; 0x40
    4bc2:	d81f      	bhi.n	4c04 <_usb_d_dev_ep_enable+0x28c>
    4bc4:	2920      	cmp	r1, #32
    4bc6:	d81f      	bhi.n	4c08 <_usb_d_dev_ep_enable+0x290>
    4bc8:	2910      	cmp	r1, #16
    4bca:	d81f      	bhi.n	4c0c <_usb_d_dev_ep_enable+0x294>
    4bcc:	38f8      	subs	r0, #248	; 0xf8
    4bce:	4288      	cmp	r0, r1
    4bd0:	4189      	sbcs	r1, r1
    4bd2:	4249      	negs	r1, r1
    4bd4:	e000      	b.n	4bd8 <_usb_d_dev_ep_enable+0x260>
    4bd6:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4bd8:	0709      	lsls	r1, r1, #28
    4bda:	430a      	orrs	r2, r1
    4bdc:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4bde:	001a      	movs	r2, r3
    4be0:	3208      	adds	r2, #8
    4be2:	0152      	lsls	r2, r2, #5
    4be4:	4920      	ldr	r1, [pc, #128]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    4be6:	468c      	mov	ip, r1
    4be8:	4462      	add	r2, ip
    4bea:	2180      	movs	r1, #128	; 0x80
    4bec:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    4bee:	015a      	lsls	r2, r3, #5
    4bf0:	4b1f      	ldr	r3, [pc, #124]	; (4c70 <_usb_d_dev_ep_enable+0x2f8>)
    4bf2:	189b      	adds	r3, r3, r2
    4bf4:	2200      	movs	r2, #0
    4bf6:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    4bf8:	2000      	movs	r0, #0
    4bfa:	e01b      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4bfc:	2106      	movs	r1, #6
    4bfe:	e7eb      	b.n	4bd8 <_usb_d_dev_ep_enable+0x260>
    4c00:	2105      	movs	r1, #5
    4c02:	e7e9      	b.n	4bd8 <_usb_d_dev_ep_enable+0x260>
    4c04:	2104      	movs	r1, #4
    4c06:	e7e7      	b.n	4bd8 <_usb_d_dev_ep_enable+0x260>
    4c08:	2103      	movs	r1, #3
    4c0a:	e7e5      	b.n	4bd8 <_usb_d_dev_ep_enable+0x260>
    4c0c:	2102      	movs	r1, #2
    4c0e:	e7e3      	b.n	4bd8 <_usb_d_dev_ep_enable+0x260>
    4c10:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4c12:	0709      	lsls	r1, r1, #28
    4c14:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4c16:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4c18:	001a      	movs	r2, r3
    4c1a:	3208      	adds	r2, #8
    4c1c:	0152      	lsls	r2, r2, #5
    4c1e:	4912      	ldr	r1, [pc, #72]	; (4c68 <_usb_d_dev_ep_enable+0x2f0>)
    4c20:	468c      	mov	ip, r1
    4c22:	4462      	add	r2, ip
    4c24:	2140      	movs	r1, #64	; 0x40
    4c26:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    4c28:	015b      	lsls	r3, r3, #5
    4c2a:	4a11      	ldr	r2, [pc, #68]	; (4c70 <_usb_d_dev_ep_enable+0x2f8>)
    4c2c:	18d3      	adds	r3, r2, r3
    4c2e:	2200      	movs	r2, #0
    4c30:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    4c32:	2000      	movs	r0, #0
}
    4c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4c36:	2106      	movs	r1, #6
    4c38:	e7eb      	b.n	4c12 <_usb_d_dev_ep_enable+0x29a>
    4c3a:	2105      	movs	r1, #5
    4c3c:	e7e9      	b.n	4c12 <_usb_d_dev_ep_enable+0x29a>
    4c3e:	2104      	movs	r1, #4
    4c40:	e7e7      	b.n	4c12 <_usb_d_dev_ep_enable+0x29a>
    4c42:	2103      	movs	r1, #3
    4c44:	e7e5      	b.n	4c12 <_usb_d_dev_ep_enable+0x29a>
    4c46:	2102      	movs	r1, #2
    4c48:	e7e3      	b.n	4c12 <_usb_d_dev_ep_enable+0x29a>
		return -USB_ERR_PARAM;
    4c4a:	2012      	movs	r0, #18
    4c4c:	4240      	negs	r0, r0
    4c4e:	e7f1      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
    4c50:	2012      	movs	r0, #18
    4c52:	4240      	negs	r0, r0
    4c54:	e7ee      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    4c56:	2014      	movs	r0, #20
    4c58:	4240      	negs	r0, r0
    4c5a:	e7eb      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    4c5c:	2014      	movs	r0, #20
    4c5e:	4240      	negs	r0, r0
    4c60:	e7e8      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    4c62:	2014      	movs	r0, #20
    4c64:	4240      	negs	r0, r0
    4c66:	e7e5      	b.n	4c34 <_usb_d_dev_ep_enable+0x2bc>
    4c68:	41005000 	.word	0x41005000
    4c6c:	20000f84 	.word	0x20000f84
    4c70:	20000f04 	.word	0x20000f04
    4c74:	0fffc000 	.word	0x0fffc000
    4c78:	f0003fff 	.word	0xf0003fff
    4c7c:	41005109 	.word	0x41005109

00004c80 <_usb_d_dev_ep_stall>:
{
    4c80:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    4c82:	220f      	movs	r2, #15
    4c84:	4002      	ands	r2, r0
    4c86:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4c88:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4c8a:	2a00      	cmp	r2, #0
    4c8c:	d005      	beq.n	4c9a <_usb_d_dev_ep_stall+0x1a>
    4c8e:	2800      	cmp	r0, #0
    4c90:	db01      	blt.n	4c96 <_usb_d_dev_ep_stall+0x16>
    4c92:	0013      	movs	r3, r2
    4c94:	e002      	b.n	4c9c <_usb_d_dev_ep_stall+0x1c>
    4c96:	1d13      	adds	r3, r2, #4
    4c98:	e000      	b.n	4c9c <_usb_d_dev_ep_stall+0x1c>
    4c9a:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    4c9c:	001d      	movs	r5, r3
    4c9e:	0098      	lsls	r0, r3, #2
    4ca0:	18c0      	adds	r0, r0, r3
    4ca2:	0083      	lsls	r3, r0, #2
    4ca4:	3310      	adds	r3, #16
    4ca6:	0018      	movs	r0, r3
    4ca8:	4b47      	ldr	r3, [pc, #284]	; (4dc8 <_usb_d_dev_ep_stall+0x148>)
    4caa:	3320      	adds	r3, #32
    4cac:	181b      	adds	r3, r3, r0
    4cae:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    4cb0:	2a04      	cmp	r2, #4
    4cb2:	d900      	bls.n	4cb6 <_usb_d_dev_ep_stall+0x36>
    4cb4:	e084      	b.n	4dc0 <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    4cb6:	2901      	cmp	r1, #1
    4cb8:	d018      	beq.n	4cec <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    4cba:	2900      	cmp	r1, #0
    4cbc:	d03d      	beq.n	4d3a <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4cbe:	00aa      	lsls	r2, r5, #2
    4cc0:	1952      	adds	r2, r2, r5
    4cc2:	0091      	lsls	r1, r2, #2
    4cc4:	4b40      	ldr	r3, [pc, #256]	; (4dc8 <_usb_d_dev_ep_stall+0x148>)
    4cc6:	3320      	adds	r3, #32
    4cc8:	185b      	adds	r3, r3, r1
    4cca:	3326      	adds	r3, #38	; 0x26
    4ccc:	781a      	ldrb	r2, [r3, #0]
    4cce:	230f      	movs	r3, #15
    4cd0:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4cd2:	3308      	adds	r3, #8
    4cd4:	015b      	lsls	r3, r3, #5
    4cd6:	4a3d      	ldr	r2, [pc, #244]	; (4dcc <_usb_d_dev_ep_stall+0x14c>)
    4cd8:	4694      	mov	ip, r2
    4cda:	4463      	add	r3, ip
    4cdc:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4cde:	2310      	movs	r3, #16
    4ce0:	40a3      	lsls	r3, r4
    4ce2:	4018      	ands	r0, r3
    4ce4:	1e43      	subs	r3, r0, #1
    4ce6:	4198      	sbcs	r0, r3
    4ce8:	b2c0      	uxtb	r0, r0
}
    4cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4cec:	4836      	ldr	r0, [pc, #216]	; (4dc8 <_usb_d_dev_ep_stall+0x148>)
    4cee:	0003      	movs	r3, r0
    4cf0:	3320      	adds	r3, #32
    4cf2:	00aa      	lsls	r2, r5, #2
    4cf4:	1956      	adds	r6, r2, r5
    4cf6:	00b1      	lsls	r1, r6, #2
    4cf8:	185b      	adds	r3, r3, r1
    4cfa:	3326      	adds	r3, #38	; 0x26
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	210f      	movs	r1, #15
    4d00:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d02:	2610      	movs	r6, #16
    4d04:	40a6      	lsls	r6, r4
    4d06:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4d08:	0019      	movs	r1, r3
    4d0a:	3108      	adds	r1, #8
    4d0c:	0149      	lsls	r1, r1, #5
    4d0e:	4f2f      	ldr	r7, [pc, #188]	; (4dcc <_usb_d_dev_ep_stall+0x14c>)
    4d10:	46bc      	mov	ip, r7
    4d12:	4461      	add	r1, ip
    4d14:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4d16:	2120      	movs	r1, #32
    4d18:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    4d1a:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4d1c:	0159      	lsls	r1, r3, #5
    4d1e:	4b2c      	ldr	r3, [pc, #176]	; (4dd0 <_usb_d_dev_ep_stall+0x150>)
    4d20:	469c      	mov	ip, r3
    4d22:	4461      	add	r1, ip
    4d24:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    4d26:	1952      	adds	r2, r2, r5
    4d28:	0093      	lsls	r3, r2, #2
    4d2a:	18c3      	adds	r3, r0, r3
    4d2c:	3340      	adds	r3, #64	; 0x40
    4d2e:	79da      	ldrb	r2, [r3, #7]
    4d30:	2108      	movs	r1, #8
    4d32:	430a      	orrs	r2, r1
    4d34:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    4d36:	2000      	movs	r0, #0
    4d38:	e7d7      	b.n	4cea <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    4d3a:	7c9a      	ldrb	r2, [r3, #18]
    4d3c:	310f      	adds	r1, #15
    4d3e:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4d40:	0011      	movs	r1, r2
    4d42:	3108      	adds	r1, #8
    4d44:	0149      	lsls	r1, r1, #5
    4d46:	4821      	ldr	r0, [pc, #132]	; (4dcc <_usb_d_dev_ep_stall+0x14c>)
    4d48:	4684      	mov	ip, r0
    4d4a:	4461      	add	r1, ip
    4d4c:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d4e:	2110      	movs	r1, #16
    4d50:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    4d52:	4208      	tst	r0, r1
    4d54:	d024      	beq.n	4da0 <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    4d56:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4d58:	0010      	movs	r0, r2
    4d5a:	3008      	adds	r0, #8
    4d5c:	0140      	lsls	r0, r0, #5
    4d5e:	4460      	add	r0, ip
    4d60:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    4d62:	2120      	movs	r1, #32
    4d64:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4d66:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4d68:	0155      	lsls	r5, r2, #5
    4d6a:	4f1a      	ldr	r7, [pc, #104]	; (4dd4 <_usb_d_dev_ep_stall+0x154>)
    4d6c:	46bc      	mov	ip, r7
    4d6e:	4465      	add	r5, ip
    4d70:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4d72:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    4d74:	4208      	tst	r0, r1
    4d76:	d00a      	beq.n	4d8e <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4d78:	0011      	movs	r1, r2
    4d7a:	3108      	adds	r1, #8
    4d7c:	0149      	lsls	r1, r1, #5
    4d7e:	4813      	ldr	r0, [pc, #76]	; (4dcc <_usb_d_dev_ep_stall+0x14c>)
    4d80:	4684      	mov	ip, r0
    4d82:	4461      	add	r1, ip
    4d84:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    4d86:	2001      	movs	r0, #1
    4d88:	40a0      	lsls	r0, r4
    4d8a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4d8c:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4d8e:	7cd8      	ldrb	r0, [r3, #19]
    4d90:	2107      	movs	r1, #7
    4d92:	4001      	ands	r1, r0
    4d94:	2901      	cmp	r1, #1
    4d96:	d005      	beq.n	4da4 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    4d98:	7cda      	ldrb	r2, [r3, #19]
    4d9a:	2108      	movs	r1, #8
    4d9c:	438a      	bics	r2, r1
    4d9e:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    4da0:	2000      	movs	r0, #0
    4da2:	e7a2      	b.n	4cea <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    4da4:	3208      	adds	r2, #8
    4da6:	0152      	lsls	r2, r2, #5
    4da8:	4908      	ldr	r1, [pc, #32]	; (4dcc <_usb_d_dev_ep_stall+0x14c>)
    4daa:	468c      	mov	ip, r1
    4dac:	4462      	add	r2, ip
    4dae:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    4db0:	2230      	movs	r2, #48	; 0x30
    4db2:	4211      	tst	r1, r2
    4db4:	d1f4      	bne.n	4da0 <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    4db6:	0002      	movs	r2, r0
    4db8:	2108      	movs	r1, #8
    4dba:	438a      	bics	r2, r1
    4dbc:	74da      	strb	r2, [r3, #19]
    4dbe:	e7ef      	b.n	4da0 <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    4dc0:	2012      	movs	r0, #18
    4dc2:	4240      	negs	r0, r0
    4dc4:	e791      	b.n	4cea <_usb_d_dev_ep_stall+0x6a>
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	20000f84 	.word	0x20000f84
    4dcc:	41005000 	.word	0x41005000
    4dd0:	41005109 	.word	0x41005109
    4dd4:	41005108 	.word	0x41005108

00004dd8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    4dd8:	b570      	push	{r4, r5, r6, lr}
    4dda:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    4ddc:	240f      	movs	r4, #15
    4dde:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    4de0:	0162      	lsls	r2, r4, #5
    4de2:	4b18      	ldr	r3, [pc, #96]	; (4e44 <_usb_d_dev_ep_read_req+0x6c>)
    4de4:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    4de6:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    4de8:	685d      	ldr	r5, [r3, #4]
    4dea:	04ad      	lsls	r5, r5, #18
    4dec:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    4dee:	2c04      	cmp	r4, #4
    4df0:	d81f      	bhi.n	4e32 <_usb_d_dev_ep_read_req+0x5a>
    4df2:	2e00      	cmp	r6, #0
    4df4:	d020      	beq.n	4e38 <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4df6:	0023      	movs	r3, r4
    4df8:	3308      	adds	r3, #8
    4dfa:	015b      	lsls	r3, r3, #5
    4dfc:	4a12      	ldr	r2, [pc, #72]	; (4e48 <_usb_d_dev_ep_read_req+0x70>)
    4dfe:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    4e00:	2b11      	cmp	r3, #17
    4e02:	d11c      	bne.n	4e3e <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    4e04:	0023      	movs	r3, r4
    4e06:	3308      	adds	r3, #8
    4e08:	015b      	lsls	r3, r3, #5
    4e0a:	4694      	mov	ip, r2
    4e0c:	4463      	add	r3, ip
    4e0e:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    4e10:	06db      	lsls	r3, r3, #27
    4e12:	d401      	bmi.n	4e18 <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    4e14:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    4e16:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    4e18:	2208      	movs	r2, #8
    4e1a:	0030      	movs	r0, r6
    4e1c:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <_usb_d_dev_ep_read_req+0x74>)
    4e1e:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4e20:	3408      	adds	r4, #8
    4e22:	0164      	lsls	r4, r4, #5
    4e24:	4b08      	ldr	r3, [pc, #32]	; (4e48 <_usb_d_dev_ep_read_req+0x70>)
    4e26:	469c      	mov	ip, r3
    4e28:	4464      	add	r4, ip
    4e2a:	2310      	movs	r3, #16
    4e2c:	71e3      	strb	r3, [r4, #7]
	return bytes;
    4e2e:	0028      	movs	r0, r5
    4e30:	e7f1      	b.n	4e16 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    4e32:	2012      	movs	r0, #18
    4e34:	4240      	negs	r0, r0
    4e36:	e7ee      	b.n	4e16 <_usb_d_dev_ep_read_req+0x3e>
    4e38:	2012      	movs	r0, #18
    4e3a:	4240      	negs	r0, r0
    4e3c:	e7eb      	b.n	4e16 <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    4e3e:	2013      	movs	r0, #19
    4e40:	4240      	negs	r0, r0
    4e42:	e7e8      	b.n	4e16 <_usb_d_dev_ep_read_req+0x3e>
    4e44:	20000f04 	.word	0x20000f04
    4e48:	41005000 	.word	0x41005000
    4e4c:	0000b421 	.word	0x0000b421

00004e50 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    4e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e52:	46de      	mov	lr, fp
    4e54:	4657      	mov	r7, sl
    4e56:	464e      	mov	r6, r9
    4e58:	4645      	mov	r5, r8
    4e5a:	b5e0      	push	{r5, r6, r7, lr}
    4e5c:	b085      	sub	sp, #20
    4e5e:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    4e60:	7a04      	ldrb	r4, [r0, #8]
    4e62:	220f      	movs	r2, #15
    4e64:	4022      	ands	r2, r4
    4e66:	b264      	sxtb	r4, r4
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    4e68:	0fe3      	lsrs	r3, r4, #31
    4e6a:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4e6c:	2a00      	cmp	r2, #0
    4e6e:	d005      	beq.n	4e7c <_usb_d_dev_ep_trans+0x2c>
    4e70:	2c00      	cmp	r4, #0
    4e72:	db01      	blt.n	4e78 <_usb_d_dev_ep_trans+0x28>
    4e74:	0010      	movs	r0, r2
    4e76:	e002      	b.n	4e7e <_usb_d_dev_ep_trans+0x2e>
    4e78:	1d10      	adds	r0, r2, #4
    4e7a:	e000      	b.n	4e7e <_usb_d_dev_ep_trans+0x2e>
    4e7c:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    4e7e:	0005      	movs	r5, r0
    4e80:	4b62      	ldr	r3, [pc, #392]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4e82:	001f      	movs	r7, r3
    4e84:	3720      	adds	r7, #32
    4e86:	0081      	lsls	r1, r0, #2
    4e88:	180e      	adds	r6, r1, r0
    4e8a:	46b4      	mov	ip, r6
    4e8c:	00b6      	lsls	r6, r6, #2
    4e8e:	3610      	adds	r6, #16
    4e90:	19bf      	adds	r7, r7, r6
    4e92:	3704      	adds	r7, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4e94:	4661      	mov	r1, ip
    4e96:	0088      	lsls	r0, r1, #2
    4e98:	181b      	adds	r3, r3, r0
    4e9a:	3344      	adds	r3, #68	; 0x44
    4e9c:	881b      	ldrh	r3, [r3, #0]
    4e9e:	495c      	ldr	r1, [pc, #368]	; (5010 <_usb_d_dev_ep_trans+0x1c0>)
    4ea0:	428b      	cmp	r3, r1
    4ea2:	d042      	beq.n	4f2a <_usb_d_dev_ep_trans+0xda>
    4ea4:	1e5e      	subs	r6, r3, #1
    4ea6:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    4ea8:	4641      	mov	r1, r8
    4eaa:	6849      	ldr	r1, [r1, #4]
    4eac:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    4eae:	2a04      	cmp	r2, #4
    4eb0:	d900      	bls.n	4eb4 <_usb_d_dev_ep_trans+0x64>
    4eb2:	e0a1      	b.n	4ff8 <_usb_d_dev_ep_trans+0x1a8>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    4eb4:	4642      	mov	r2, r8
    4eb6:	6812      	ldr	r2, [r2, #0]
    4eb8:	4856      	ldr	r0, [pc, #344]	; (5014 <_usb_d_dev_ep_trans+0x1c4>)
    4eba:	4282      	cmp	r2, r0
    4ebc:	d90c      	bls.n	4ed8 <_usb_d_dev_ep_trans+0x88>
    4ebe:	1888      	adds	r0, r1, r2
    4ec0:	9001      	str	r0, [sp, #4]
    4ec2:	4855      	ldr	r0, [pc, #340]	; (5018 <_usb_d_dev_ep_trans+0x1c8>)
    4ec4:	4684      	mov	ip, r0
    4ec6:	9801      	ldr	r0, [sp, #4]
    4ec8:	4560      	cmp	r0, ip
    4eca:	d805      	bhi.n	4ed8 <_usb_d_dev_ep_trans+0x88>
    4ecc:	0792      	lsls	r2, r2, #30
    4ece:	d103      	bne.n	4ed8 <_usb_d_dev_ep_trans+0x88>
	    || (!dir && (trans->size < ept->size))) {
    4ed0:	2c00      	cmp	r4, #0
    4ed2:	db2c      	blt.n	4f2e <_usb_d_dev_ep_trans+0xde>
    4ed4:	4299      	cmp	r1, r3
    4ed6:	d22d      	bcs.n	4f34 <_usb_d_dev_ep_trans+0xe4>
		if (!ept->cache) {
    4ed8:	00ab      	lsls	r3, r5, #2
    4eda:	195b      	adds	r3, r3, r5
    4edc:	009a      	lsls	r2, r3, #2
    4ede:	4b4b      	ldr	r3, [pc, #300]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4ee0:	189b      	adds	r3, r3, r2
    4ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d100      	bne.n	4eea <_usb_d_dev_ep_trans+0x9a>
    4ee8:	e089      	b.n	4ffe <_usb_d_dev_ep_trans+0x1ae>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    4eea:	2301      	movs	r3, #1
    4eec:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    4eee:	2c00      	cmp	r4, #0
    4ef0:	db0a      	blt.n	4f08 <_usb_d_dev_ep_trans+0xb8>
    4ef2:	2e00      	cmp	r6, #0
    4ef4:	d008      	beq.n	4f08 <_usb_d_dev_ep_trans+0xb8>
		if (!ept->cache) {
    4ef6:	00ab      	lsls	r3, r5, #2
    4ef8:	195b      	adds	r3, r3, r5
    4efa:	009a      	lsls	r2, r3, #2
    4efc:	4b43      	ldr	r3, [pc, #268]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4efe:	189b      	adds	r3, r3, r2
    4f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4f02:	2b00      	cmp	r3, #0
    4f04:	d100      	bne.n	4f08 <_usb_d_dev_ep_trans+0xb8>
    4f06:	e07d      	b.n	5004 <_usb_d_dev_ep_trans+0x1b4>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    4f08:	00aa      	lsls	r2, r5, #2
    4f0a:	1952      	adds	r2, r2, r5
    4f0c:	0091      	lsls	r1, r2, #2
    4f0e:	4b3f      	ldr	r3, [pc, #252]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4f10:	185b      	adds	r3, r3, r1
    4f12:	3340      	adds	r3, #64	; 0x40
    4f14:	79db      	ldrb	r3, [r3, #7]
    4f16:	071b      	lsls	r3, r3, #28
    4f18:	d50f      	bpl.n	4f3a <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
    4f1a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    4f1c:	b005      	add	sp, #20
    4f1e:	bc3c      	pop	{r2, r3, r4, r5}
    4f20:	4690      	mov	r8, r2
    4f22:	4699      	mov	r9, r3
    4f24:	46a2      	mov	sl, r4
    4f26:	46ab      	mov	fp, r5
    4f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4f2a:	001e      	movs	r6, r3
    4f2c:	e7bc      	b.n	4ea8 <_usb_d_dev_ep_trans+0x58>
	bool use_cache = false;
    4f2e:	2300      	movs	r3, #0
    4f30:	9301      	str	r3, [sp, #4]
    4f32:	e7dc      	b.n	4eee <_usb_d_dev_ep_trans+0x9e>
    4f34:	2300      	movs	r3, #0
    4f36:	9301      	str	r3, [sp, #4]
    4f38:	e7d9      	b.n	4eee <_usb_d_dev_ep_trans+0x9e>
	atomic_enter_critical(&flags);
    4f3a:	a803      	add	r0, sp, #12
    4f3c:	4b37      	ldr	r3, [pc, #220]	; (501c <_usb_d_dev_ep_trans+0x1cc>)
    4f3e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    4f40:	00aa      	lsls	r2, r5, #2
    4f42:	1952      	adds	r2, r2, r5
    4f44:	0091      	lsls	r1, r2, #2
    4f46:	4b31      	ldr	r3, [pc, #196]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4f48:	185b      	adds	r3, r3, r1
    4f4a:	3340      	adds	r3, #64	; 0x40
    4f4c:	79db      	ldrb	r3, [r3, #7]
    4f4e:	065b      	lsls	r3, r3, #25
    4f50:	d430      	bmi.n	4fb4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    4f52:	00ab      	lsls	r3, r5, #2
    4f54:	195b      	adds	r3, r3, r5
    4f56:	009a      	lsls	r2, r3, #2
    4f58:	4b2c      	ldr	r3, [pc, #176]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4f5a:	469b      	mov	fp, r3
    4f5c:	4493      	add	fp, r2
    4f5e:	2340      	movs	r3, #64	; 0x40
    4f60:	445b      	add	r3, fp
    4f62:	469a      	mov	sl, r3
    4f64:	79db      	ldrb	r3, [r3, #7]
    4f66:	2240      	movs	r2, #64	; 0x40
    4f68:	4313      	orrs	r3, r2
    4f6a:	4652      	mov	r2, sl
    4f6c:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    4f6e:	a803      	add	r0, sp, #12
    4f70:	4b2b      	ldr	r3, [pc, #172]	; (5020 <_usb_d_dev_ep_trans+0x1d0>)
    4f72:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    4f74:	465b      	mov	r3, fp
    4f76:	4642      	mov	r2, r8
    4f78:	6812      	ldr	r2, [r2, #0]
    4f7a:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    4f7c:	4642      	mov	r2, r8
    4f7e:	6852      	ldr	r2, [r2, #4]
    4f80:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    4f82:	2300      	movs	r3, #0
    4f84:	465a      	mov	r2, fp
    4f86:	63d3      	str	r3, [r2, #60]	; 0x3c
	ept->flags.bits.dir       = dir;
    4f88:	464b      	mov	r3, r9
    4f8a:	01db      	lsls	r3, r3, #7
    4f8c:	4652      	mov	r2, sl
    4f8e:	79d2      	ldrb	r2, [r2, #7]
    4f90:	217f      	movs	r1, #127	; 0x7f
    4f92:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    4f94:	9a01      	ldr	r2, [sp, #4]
    4f96:	0152      	lsls	r2, r2, #5
    4f98:	430b      	orrs	r3, r1
    4f9a:	2120      	movs	r1, #32
    4f9c:	438b      	bics	r3, r1
    4f9e:	431a      	orrs	r2, r3
    4fa0:	4653      	mov	r3, sl
    4fa2:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4fa4:	4643      	mov	r3, r8
    4fa6:	7a5b      	ldrb	r3, [r3, #9]
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d008      	beq.n	4fbe <_usb_d_dev_ep_trans+0x16e>
    4fac:	2e00      	cmp	r6, #0
    4fae:	d01b      	beq.n	4fe8 <_usb_d_dev_ep_trans+0x198>
    4fb0:	2200      	movs	r2, #0
    4fb2:	e005      	b.n	4fc0 <_usb_d_dev_ep_trans+0x170>
		atomic_leave_critical(&flags);
    4fb4:	a803      	add	r0, sp, #12
    4fb6:	4b1a      	ldr	r3, [pc, #104]	; (5020 <_usb_d_dev_ep_trans+0x1d0>)
    4fb8:	4798      	blx	r3
		return USB_BUSY;
    4fba:	2001      	movs	r0, #1
    4fbc:	e7ae      	b.n	4f1c <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4fbe:	2200      	movs	r2, #0
    4fc0:	00ab      	lsls	r3, r5, #2
    4fc2:	195d      	adds	r5, r3, r5
    4fc4:	00a9      	lsls	r1, r5, #2
    4fc6:	4b11      	ldr	r3, [pc, #68]	; (500c <_usb_d_dev_ep_trans+0x1bc>)
    4fc8:	185b      	adds	r3, r3, r1
    4fca:	3340      	adds	r3, #64	; 0x40
    4fcc:	0111      	lsls	r1, r2, #4
    4fce:	79da      	ldrb	r2, [r3, #7]
    4fd0:	2010      	movs	r0, #16
    4fd2:	4382      	bics	r2, r0
    4fd4:	430a      	orrs	r2, r1
    4fd6:	71da      	strb	r2, [r3, #7]
	if (dir) {
    4fd8:	2c00      	cmp	r4, #0
    4fda:	db07      	blt.n	4fec <_usb_d_dev_ep_trans+0x19c>
		_usb_d_dev_out_next(ept, false);
    4fdc:	2100      	movs	r1, #0
    4fde:	0038      	movs	r0, r7
    4fe0:	4b10      	ldr	r3, [pc, #64]	; (5024 <_usb_d_dev_ep_trans+0x1d4>)
    4fe2:	4798      	blx	r3
	return ERR_NONE;
    4fe4:	2000      	movs	r0, #0
    4fe6:	e799      	b.n	4f1c <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    4fe8:	2201      	movs	r2, #1
    4fea:	e7e9      	b.n	4fc0 <_usb_d_dev_ep_trans+0x170>
		_usb_d_dev_in_next(ept, false);
    4fec:	2100      	movs	r1, #0
    4fee:	0038      	movs	r0, r7
    4ff0:	4b0d      	ldr	r3, [pc, #52]	; (5028 <_usb_d_dev_ep_trans+0x1d8>)
    4ff2:	4798      	blx	r3
	return ERR_NONE;
    4ff4:	2000      	movs	r0, #0
    4ff6:	e791      	b.n	4f1c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    4ff8:	2012      	movs	r0, #18
    4ffa:	4240      	negs	r0, r0
    4ffc:	e78e      	b.n	4f1c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    4ffe:	2013      	movs	r0, #19
    5000:	4240      	negs	r0, r0
    5002:	e78b      	b.n	4f1c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    5004:	2012      	movs	r0, #18
    5006:	4240      	negs	r0, r0
    5008:	e788      	b.n	4f1c <_usb_d_dev_ep_trans+0xcc>
    500a:	46c0      	nop			; (mov r8, r8)
    500c:	20000f84 	.word	0x20000f84
    5010:	000003ff 	.word	0x000003ff
    5014:	1fffffff 	.word	0x1fffffff
    5018:	20007fff 	.word	0x20007fff
    501c:	00001f19 	.word	0x00001f19
    5020:	00001f27 	.word	0x00001f27
    5024:	000041f1 	.word	0x000041f1
    5028:	00004061 	.word	0x00004061

0000502c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    502c:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    502e:	220f      	movs	r2, #15
    5030:	4002      	ands	r2, r0
    5032:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    5034:	0fc1      	lsrs	r1, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5036:	2a00      	cmp	r2, #0
    5038:	d005      	beq.n	5046 <_usb_d_dev_ep_abort+0x1a>
    503a:	2800      	cmp	r0, #0
    503c:	db01      	blt.n	5042 <_usb_d_dev_ep_abort+0x16>
    503e:	0010      	movs	r0, r2
    5040:	e002      	b.n	5048 <_usb_d_dev_ep_abort+0x1c>
    5042:	1d10      	adds	r0, r2, #4
    5044:	e000      	b.n	5048 <_usb_d_dev_ep_abort+0x1c>
    5046:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    5048:	0083      	lsls	r3, r0, #2
    504a:	181b      	adds	r3, r3, r0
    504c:	009c      	lsls	r4, r3, #2
    504e:	3410      	adds	r4, #16
    5050:	4805      	ldr	r0, [pc, #20]	; (5068 <_usb_d_dev_ep_abort+0x3c>)
    5052:	3020      	adds	r0, #32
    5054:	1900      	adds	r0, r0, r4
    5056:	3004      	adds	r0, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    5058:	2a04      	cmp	r2, #4
    505a:	d900      	bls.n	505e <_usb_d_dev_ep_abort+0x32>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    505c:	bd10      	pop	{r4, pc}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    505e:	2202      	movs	r2, #2
    5060:	4b02      	ldr	r3, [pc, #8]	; (506c <_usb_d_dev_ep_abort+0x40>)
    5062:	4798      	blx	r3
    5064:	e7fa      	b.n	505c <_usb_d_dev_ep_abort+0x30>
    5066:	46c0      	nop			; (mov r8, r8)
    5068:	20000f84 	.word	0x20000f84
    506c:	00003e7d 	.word	0x00003e7d

00005070 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5070:	2900      	cmp	r1, #0
    5072:	d006      	beq.n	5082 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    5074:	2801      	cmp	r0, #1
    5076:	d006      	beq.n	5086 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5078:	2800      	cmp	r0, #0
    507a:	d101      	bne.n	5080 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    507c:	4b03      	ldr	r3, [pc, #12]	; (508c <_usb_d_dev_register_callback+0x1c>)
    507e:	6219      	str	r1, [r3, #32]
	}
}
    5080:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5082:	4903      	ldr	r1, [pc, #12]	; (5090 <_usb_d_dev_register_callback+0x20>)
    5084:	e7f6      	b.n	5074 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5086:	4b01      	ldr	r3, [pc, #4]	; (508c <_usb_d_dev_register_callback+0x1c>)
    5088:	6259      	str	r1, [r3, #36]	; 0x24
    508a:	e7f9      	b.n	5080 <_usb_d_dev_register_callback+0x10>
    508c:	20000f84 	.word	0x20000f84
    5090:	00003d3d 	.word	0x00003d3d

00005094 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5094:	2900      	cmp	r1, #0
    5096:	d008      	beq.n	50aa <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5098:	2800      	cmp	r0, #0
    509a:	d008      	beq.n	50ae <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    509c:	2801      	cmp	r0, #1
    509e:	d009      	beq.n	50b4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    50a0:	2802      	cmp	r0, #2
    50a2:	d106      	bne.n	50b2 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    50a4:	4b05      	ldr	r3, [pc, #20]	; (50bc <_usb_d_dev_register_ep_callback+0x28>)
    50a6:	6319      	str	r1, [r3, #48]	; 0x30
	}
}
    50a8:	e003      	b.n	50b2 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    50aa:	4905      	ldr	r1, [pc, #20]	; (50c0 <_usb_d_dev_register_ep_callback+0x2c>)
    50ac:	e7f4      	b.n	5098 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    50ae:	4b03      	ldr	r3, [pc, #12]	; (50bc <_usb_d_dev_register_ep_callback+0x28>)
    50b0:	6299      	str	r1, [r3, #40]	; 0x28
}
    50b2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    50b4:	4b01      	ldr	r3, [pc, #4]	; (50bc <_usb_d_dev_register_ep_callback+0x28>)
    50b6:	62d9      	str	r1, [r3, #44]	; 0x2c
    50b8:	e7fb      	b.n	50b2 <_usb_d_dev_register_ep_callback+0x1e>
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	20000f84 	.word	0x20000f84
    50c0:	00003d3d 	.word	0x00003d3d

000050c4 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    50c4:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    50c6:	4b01      	ldr	r3, [pc, #4]	; (50cc <USB_Handler+0x8>)
    50c8:	4798      	blx	r3
}
    50ca:	bd10      	pop	{r4, pc}
    50cc:	000043f5 	.word	0x000043f5

000050d0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    50d0:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    50d2:	4806      	ldr	r0, [pc, #24]	; (50ec <cdc_device_acm_init+0x1c>)
    50d4:	3040      	adds	r0, #64	; 0x40
    50d6:	4b06      	ldr	r3, [pc, #24]	; (50f0 <cdc_device_acm_init+0x20>)
    50d8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    50da:	4b06      	ldr	r3, [pc, #24]	; (50f4 <cdc_device_acm_init+0x24>)
    50dc:	4798      	blx	r3

	usbdc_start(single_desc);
    50de:	4806      	ldr	r0, [pc, #24]	; (50f8 <cdc_device_acm_init+0x28>)
    50e0:	4b06      	ldr	r3, [pc, #24]	; (50fc <cdc_device_acm_init+0x2c>)
    50e2:	4798      	blx	r3
	usbdc_attach();
    50e4:	4b06      	ldr	r3, [pc, #24]	; (5100 <cdc_device_acm_init+0x30>)
    50e6:	4798      	blx	r3
}
    50e8:	bd10      	pop	{r4, pc}
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	2000126c 	.word	0x2000126c
    50f0:	00005c2d 	.word	0x00005c2d
    50f4:	000053d5 	.word	0x000053d5
    50f8:	20000004 	.word	0x20000004
    50fc:	00005ca5 	.word	0x00005ca5
    5100:	00005cdd 	.word	0x00005cdd

00005104 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    5104:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    5106:	4b01      	ldr	r3, [pc, #4]	; (510c <usb_init+0x8>)
    5108:	4798      	blx	r3
}
    510a:	bd10      	pop	{r4, pc}
    510c:	000050d1 	.word	0x000050d1

00005110 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5110:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    5112:	798b      	ldrb	r3, [r1, #6]
    5114:	79cc      	ldrb	r4, [r1, #7]
    5116:	0224      	lsls	r4, r4, #8
    5118:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    511a:	2a01      	cmp	r2, #1
    511c:	d00a      	beq.n	5134 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    511e:	784b      	ldrb	r3, [r1, #1]
    5120:	2b21      	cmp	r3, #33	; 0x21
    5122:	d109      	bne.n	5138 <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5124:	2c07      	cmp	r4, #7
    5126:	d10a      	bne.n	513e <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    5128:	2300      	movs	r3, #0
    512a:	0022      	movs	r2, r4
    512c:	4905      	ldr	r1, [pc, #20]	; (5144 <cdcdf_acm_get_req+0x34>)
    512e:	4c06      	ldr	r4, [pc, #24]	; (5148 <cdcdf_acm_get_req+0x38>)
    5130:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    5132:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    5134:	2000      	movs	r0, #0
    5136:	e7fc      	b.n	5132 <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    5138:	200d      	movs	r0, #13
    513a:	4240      	negs	r0, r0
    513c:	e7f9      	b.n	5132 <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    513e:	2001      	movs	r0, #1
    5140:	4240      	negs	r0, r0
    5142:	e7f6      	b.n	5132 <cdcdf_acm_get_req+0x22>
    5144:	200012ec 	.word	0x200012ec
    5148:	0000575d 	.word	0x0000575d

0000514c <cdcdf_acm_set_req>:
{
    514c:	b5f0      	push	{r4, r5, r6, r7, lr}
    514e:	b083      	sub	sp, #12
    5150:	0005      	movs	r5, r0
    5152:	000f      	movs	r7, r1
    5154:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    5156:	798e      	ldrb	r6, [r1, #6]
    5158:	79cb      	ldrb	r3, [r1, #7]
    515a:	021b      	lsls	r3, r3, #8
    515c:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    515e:	4b23      	ldr	r3, [pc, #140]	; (51ec <cdcdf_acm_set_req+0xa0>)
    5160:	4798      	blx	r3
	switch (req->bRequest) {
    5162:	787b      	ldrb	r3, [r7, #1]
    5164:	2b20      	cmp	r3, #32
    5166:	d005      	beq.n	5174 <cdcdf_acm_set_req+0x28>
    5168:	2b22      	cmp	r3, #34	; 0x22
    516a:	d026      	beq.n	51ba <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    516c:	200d      	movs	r0, #13
    516e:	4240      	negs	r0, r0
}
    5170:	b003      	add	sp, #12
    5172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5174:	2e07      	cmp	r6, #7
    5176:	d131      	bne.n	51dc <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    5178:	2c00      	cmp	r4, #0
    517a:	d017      	beq.n	51ac <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    517c:	2207      	movs	r2, #7
    517e:	0001      	movs	r1, r0
    5180:	4668      	mov	r0, sp
    5182:	4b1b      	ldr	r3, [pc, #108]	; (51f0 <cdcdf_acm_set_req+0xa4>)
    5184:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5186:	4b1b      	ldr	r3, [pc, #108]	; (51f4 <cdcdf_acm_set_req+0xa8>)
    5188:	689b      	ldr	r3, [r3, #8]
    518a:	2b00      	cmp	r3, #0
    518c:	d003      	beq.n	5196 <cdcdf_acm_set_req+0x4a>
    518e:	4668      	mov	r0, sp
    5190:	4798      	blx	r3
    5192:	2800      	cmp	r0, #0
    5194:	d025      	beq.n	51e2 <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    5196:	4b17      	ldr	r3, [pc, #92]	; (51f4 <cdcdf_acm_set_req+0xa8>)
    5198:	9a00      	ldr	r2, [sp, #0]
    519a:	601a      	str	r2, [r3, #0]
    519c:	466a      	mov	r2, sp
    519e:	8892      	ldrh	r2, [r2, #4]
    51a0:	809a      	strh	r2, [r3, #4]
    51a2:	466a      	mov	r2, sp
    51a4:	7992      	ldrb	r2, [r2, #6]
    51a6:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    51a8:	2000      	movs	r0, #0
    51aa:	e7e1      	b.n	5170 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    51ac:	2300      	movs	r3, #0
    51ae:	0032      	movs	r2, r6
    51b0:	0001      	movs	r1, r0
    51b2:	0028      	movs	r0, r5
    51b4:	4c10      	ldr	r4, [pc, #64]	; (51f8 <cdcdf_acm_set_req+0xac>)
    51b6:	47a0      	blx	r4
    51b8:	e7da      	b.n	5170 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    51ba:	2300      	movs	r3, #0
    51bc:	2200      	movs	r2, #0
    51be:	2100      	movs	r1, #0
    51c0:	2000      	movs	r0, #0
    51c2:	4c0d      	ldr	r4, [pc, #52]	; (51f8 <cdcdf_acm_set_req+0xac>)
    51c4:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    51c6:	4b0b      	ldr	r3, [pc, #44]	; (51f4 <cdcdf_acm_set_req+0xa8>)
    51c8:	68db      	ldr	r3, [r3, #12]
    51ca:	2b00      	cmp	r3, #0
    51cc:	d00b      	beq.n	51e6 <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    51ce:	78ba      	ldrb	r2, [r7, #2]
    51d0:	78f8      	ldrb	r0, [r7, #3]
    51d2:	0200      	lsls	r0, r0, #8
    51d4:	4310      	orrs	r0, r2
    51d6:	4798      	blx	r3
		return ERR_NONE;
    51d8:	2000      	movs	r0, #0
    51da:	e7c9      	b.n	5170 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    51dc:	2001      	movs	r0, #1
    51de:	4240      	negs	r0, r0
    51e0:	e7c6      	b.n	5170 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    51e2:	2000      	movs	r0, #0
    51e4:	e7c4      	b.n	5170 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    51e6:	2000      	movs	r0, #0
    51e8:	e7c2      	b.n	5170 <cdcdf_acm_set_req+0x24>
    51ea:	46c0      	nop			; (mov r8, r8)
    51ec:	00005ce9 	.word	0x00005ce9
    51f0:	0000b421 	.word	0x0000b421
    51f4:	200012ec 	.word	0x200012ec
    51f8:	0000575d 	.word	0x0000575d

000051fc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    51fc:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    51fe:	780c      	ldrb	r4, [r1, #0]
    5200:	0965      	lsrs	r5, r4, #5
    5202:	2303      	movs	r3, #3
    5204:	402b      	ands	r3, r5
    5206:	2b01      	cmp	r3, #1
    5208:	d114      	bne.n	5234 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    520a:	790d      	ldrb	r5, [r1, #4]
    520c:	794b      	ldrb	r3, [r1, #5]
    520e:	021b      	lsls	r3, r3, #8
    5210:	432b      	orrs	r3, r5
    5212:	4d0b      	ldr	r5, [pc, #44]	; (5240 <cdcdf_acm_req+0x44>)
    5214:	7c2d      	ldrb	r5, [r5, #16]
    5216:	42ab      	cmp	r3, r5
    5218:	d003      	beq.n	5222 <cdcdf_acm_req+0x26>
    521a:	4d09      	ldr	r5, [pc, #36]	; (5240 <cdcdf_acm_req+0x44>)
    521c:	7c6d      	ldrb	r5, [r5, #17]
    521e:	42ab      	cmp	r3, r5
    5220:	d10b      	bne.n	523a <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    5222:	b264      	sxtb	r4, r4
    5224:	2c00      	cmp	r4, #0
    5226:	db02      	blt.n	522e <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    5228:	4b06      	ldr	r3, [pc, #24]	; (5244 <cdcdf_acm_req+0x48>)
    522a:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    522c:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    522e:	4b06      	ldr	r3, [pc, #24]	; (5248 <cdcdf_acm_req+0x4c>)
    5230:	4798      	blx	r3
    5232:	e7fb      	b.n	522c <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    5234:	200a      	movs	r0, #10
    5236:	4240      	negs	r0, r0
    5238:	e7f8      	b.n	522c <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    523a:	200a      	movs	r0, #10
    523c:	4240      	negs	r0, r0
    523e:	e7f5      	b.n	522c <cdcdf_acm_req+0x30>
    5240:	200012ec 	.word	0x200012ec
    5244:	0000514d 	.word	0x0000514d
    5248:	00005111 	.word	0x00005111

0000524c <cdcdf_acm_enable>:
{
    524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    524e:	46ce      	mov	lr, r9
    5250:	4647      	mov	r7, r8
    5252:	b580      	push	{r7, lr}
    5254:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5256:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    5258:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    525a:	2300      	movs	r3, #0
    525c:	4698      	mov	r8, r3
    525e:	4643      	mov	r3, r8
    5260:	2b01      	cmp	r3, #1
    5262:	d845      	bhi.n	52f0 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    5264:	2800      	cmp	r0, #0
    5266:	d04b      	beq.n	5300 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    5268:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    526a:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    526c:	2a02      	cmp	r2, #2
    526e:	d001      	beq.n	5274 <cdcdf_acm_enable+0x28>
    5270:	2a0a      	cmp	r2, #10
    5272:	d148      	bne.n	5306 <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    5274:	46c1      	mov	r9, r8
    5276:	4642      	mov	r2, r8
    5278:	5cba      	ldrb	r2, [r7, r2]
    527a:	4293      	cmp	r3, r2
    527c:	d046      	beq.n	530c <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    527e:	2aff      	cmp	r2, #255	; 0xff
    5280:	d147      	bne.n	5312 <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    5282:	4642      	mov	r2, r8
    5284:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    5286:	2205      	movs	r2, #5
    5288:	6871      	ldr	r1, [r6, #4]
    528a:	4b25      	ldr	r3, [pc, #148]	; (5320 <cdcdf_acm_enable+0xd4>)
    528c:	4798      	blx	r3
    528e:	0004      	movs	r4, r0
		while (NULL != ep) {
    5290:	e00c      	b.n	52ac <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    5292:	464b      	mov	r3, r9
    5294:	18fb      	adds	r3, r7, r3
    5296:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    5298:	0028      	movs	r0, r5
    529a:	4b22      	ldr	r3, [pc, #136]	; (5324 <cdcdf_acm_enable+0xd8>)
    529c:	4798      	blx	r3
			desc->sod = ep;
    529e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    52a0:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    52a2:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    52a4:	6871      	ldr	r1, [r6, #4]
    52a6:	4b20      	ldr	r3, [pc, #128]	; (5328 <cdcdf_acm_enable+0xdc>)
    52a8:	4798      	blx	r3
    52aa:	0004      	movs	r4, r0
		while (NULL != ep) {
    52ac:	2c00      	cmp	r4, #0
    52ae:	d013      	beq.n	52d8 <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    52b0:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    52b2:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    52b4:	7922      	ldrb	r2, [r4, #4]
    52b6:	7963      	ldrb	r3, [r4, #5]
    52b8:	021b      	lsls	r3, r3, #8
    52ba:	18d2      	adds	r2, r2, r3
    52bc:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    52be:	0028      	movs	r0, r5
    52c0:	4b1a      	ldr	r3, [pc, #104]	; (532c <cdcdf_acm_enable+0xe0>)
    52c2:	4798      	blx	r3
    52c4:	2800      	cmp	r0, #0
    52c6:	d127      	bne.n	5318 <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    52c8:	b26b      	sxtb	r3, r5
    52ca:	2b00      	cmp	r3, #0
    52cc:	dbe1      	blt.n	5292 <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    52ce:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    52d0:	0028      	movs	r0, r5
    52d2:	4b14      	ldr	r3, [pc, #80]	; (5324 <cdcdf_acm_enable+0xd8>)
    52d4:	4798      	blx	r3
    52d6:	e7e2      	b.n	529e <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    52d8:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    52da:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    52dc:	18c0      	adds	r0, r0, r3
    52de:	2204      	movs	r2, #4
    52e0:	6871      	ldr	r1, [r6, #4]
    52e2:	4b0f      	ldr	r3, [pc, #60]	; (5320 <cdcdf_acm_enable+0xd4>)
    52e4:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    52e6:	4643      	mov	r3, r8
    52e8:	3301      	adds	r3, #1
    52ea:	b2db      	uxtb	r3, r3
    52ec:	4698      	mov	r8, r3
    52ee:	e7b6      	b.n	525e <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    52f0:	2201      	movs	r2, #1
    52f2:	4b0f      	ldr	r3, [pc, #60]	; (5330 <cdcdf_acm_enable+0xe4>)
    52f4:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    52f6:	2000      	movs	r0, #0
}
    52f8:	bc0c      	pop	{r2, r3}
    52fa:	4690      	mov	r8, r2
    52fc:	4699      	mov	r9, r3
    52fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    5300:	200a      	movs	r0, #10
    5302:	4240      	negs	r0, r0
    5304:	e7f8      	b.n	52f8 <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    5306:	200a      	movs	r0, #10
    5308:	4240      	negs	r0, r0
    530a:	e7f5      	b.n	52f8 <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    530c:	2012      	movs	r0, #18
    530e:	4240      	negs	r0, r0
    5310:	e7f2      	b.n	52f8 <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    5312:	201c      	movs	r0, #28
    5314:	4240      	negs	r0, r0
    5316:	e7ef      	b.n	52f8 <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    5318:	2014      	movs	r0, #20
    531a:	4240      	negs	r0, r0
    531c:	e7ec      	b.n	52f8 <cdcdf_acm_enable+0xac>
    531e:	46c0      	nop			; (mov r8, r8)
    5320:	00005d05 	.word	0x00005d05
    5324:	00002c11 	.word	0x00002c11
    5328:	00005d23 	.word	0x00005d23
    532c:	00002b7d 	.word	0x00002b7d
    5330:	200012ec 	.word	0x200012ec

00005334 <cdcdf_acm_disable>:
{
    5334:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5336:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    5338:	2900      	cmp	r1, #0
    533a:	d01a      	beq.n	5372 <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    533c:	680b      	ldr	r3, [r1, #0]
    533e:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    5340:	2b02      	cmp	r3, #2
    5342:	d018      	beq.n	5376 <cdcdf_acm_disable+0x42>
    5344:	2b0a      	cmp	r3, #10
    5346:	d124      	bne.n	5392 <cdcdf_acm_disable+0x5e>
    5348:	2400      	movs	r4, #0
    534a:	e001      	b.n	5350 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    534c:	3401      	adds	r4, #1
    534e:	b2e4      	uxtb	r4, r4
    5350:	2c01      	cmp	r4, #1
    5352:	d812      	bhi.n	537a <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    5354:	5d2b      	ldrb	r3, [r5, r4]
    5356:	2bff      	cmp	r3, #255	; 0xff
    5358:	d0f8      	beq.n	534c <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    535a:	23ff      	movs	r3, #255	; 0xff
    535c:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    535e:	192b      	adds	r3, r5, r4
    5360:	7898      	ldrb	r0, [r3, #2]
    5362:	28ff      	cmp	r0, #255	; 0xff
    5364:	d0f2      	beq.n	534c <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    5366:	4b0c      	ldr	r3, [pc, #48]	; (5398 <cdcdf_acm_disable+0x64>)
    5368:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    536a:	192e      	adds	r6, r5, r4
    536c:	22ff      	movs	r2, #255	; 0xff
    536e:	70b2      	strb	r2, [r6, #2]
    5370:	e7ec      	b.n	534c <cdcdf_acm_disable+0x18>
    5372:	2400      	movs	r4, #0
    5374:	e7ec      	b.n	5350 <cdcdf_acm_disable+0x1c>
    5376:	2400      	movs	r4, #0
    5378:	e7ea      	b.n	5350 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    537a:	7928      	ldrb	r0, [r5, #4]
    537c:	28ff      	cmp	r0, #255	; 0xff
    537e:	d003      	beq.n	5388 <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    5380:	4b05      	ldr	r3, [pc, #20]	; (5398 <cdcdf_acm_disable+0x64>)
    5382:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    5384:	23ff      	movs	r3, #255	; 0xff
    5386:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    5388:	2200      	movs	r2, #0
    538a:	4b04      	ldr	r3, [pc, #16]	; (539c <cdcdf_acm_disable+0x68>)
    538c:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    538e:	2000      	movs	r0, #0
}
    5390:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    5392:	200a      	movs	r0, #10
    5394:	4240      	negs	r0, r0
    5396:	e7fb      	b.n	5390 <cdcdf_acm_disable+0x5c>
    5398:	00002be5 	.word	0x00002be5
    539c:	200012ec 	.word	0x200012ec

000053a0 <cdcdf_acm_ctrl>:
{
    53a0:	b510      	push	{r4, lr}
	switch (ctrl) {
    53a2:	2901      	cmp	r1, #1
    53a4:	d00a      	beq.n	53bc <cdcdf_acm_ctrl+0x1c>
    53a6:	2900      	cmp	r1, #0
    53a8:	d004      	beq.n	53b4 <cdcdf_acm_ctrl+0x14>
    53aa:	2902      	cmp	r1, #2
    53ac:	d10a      	bne.n	53c4 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    53ae:	201b      	movs	r0, #27
    53b0:	4240      	negs	r0, r0
}
    53b2:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    53b4:	0011      	movs	r1, r2
    53b6:	4b05      	ldr	r3, [pc, #20]	; (53cc <cdcdf_acm_ctrl+0x2c>)
    53b8:	4798      	blx	r3
    53ba:	e7fa      	b.n	53b2 <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    53bc:	0011      	movs	r1, r2
    53be:	4b04      	ldr	r3, [pc, #16]	; (53d0 <cdcdf_acm_ctrl+0x30>)
    53c0:	4798      	blx	r3
    53c2:	e7f6      	b.n	53b2 <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    53c4:	200d      	movs	r0, #13
    53c6:	4240      	negs	r0, r0
    53c8:	e7f3      	b.n	53b2 <cdcdf_acm_ctrl+0x12>
    53ca:	46c0      	nop			; (mov r8, r8)
    53cc:	0000524d 	.word	0x0000524d
    53d0:	00005335 	.word	0x00005335

000053d4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    53d4:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    53d6:	4b0b      	ldr	r3, [pc, #44]	; (5404 <cdcdf_acm_init+0x30>)
    53d8:	4798      	blx	r3
    53da:	2801      	cmp	r0, #1
    53dc:	d80e      	bhi.n	53fc <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    53de:	480a      	ldr	r0, [pc, #40]	; (5408 <cdcdf_acm_init+0x34>)
    53e0:	4b0a      	ldr	r3, [pc, #40]	; (540c <cdcdf_acm_init+0x38>)
    53e2:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    53e4:	0003      	movs	r3, r0
    53e6:	3310      	adds	r3, #16
    53e8:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    53ea:	3018      	adds	r0, #24
    53ec:	4b08      	ldr	r3, [pc, #32]	; (5410 <cdcdf_acm_init+0x3c>)
    53ee:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    53f0:	4908      	ldr	r1, [pc, #32]	; (5414 <cdcdf_acm_init+0x40>)
    53f2:	2001      	movs	r0, #1
    53f4:	4b08      	ldr	r3, [pc, #32]	; (5418 <cdcdf_acm_init+0x44>)
    53f6:	4798      	blx	r3
	return ERR_NONE;
    53f8:	2000      	movs	r0, #0
}
    53fa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    53fc:	2011      	movs	r0, #17
    53fe:	4240      	negs	r0, r0
    5400:	e7fb      	b.n	53fa <cdcdf_acm_init+0x26>
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	00005cf5 	.word	0x00005cf5
    5408:	200012ec 	.word	0x200012ec
    540c:	000053a1 	.word	0x000053a1
    5410:	00005c8d 	.word	0x00005c8d
    5414:	20000064 	.word	0x20000064
    5418:	00005bf5 	.word	0x00005bf5

0000541c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    541c:	b570      	push	{r4, r5, r6, lr}
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    541e:	4d03      	ldr	r5, [pc, #12]	; (542c <cdcdf_acm_stop_xfer+0x10>)
    5420:	7ce8      	ldrb	r0, [r5, #19]
    5422:	4c03      	ldr	r4, [pc, #12]	; (5430 <cdcdf_acm_stop_xfer+0x14>)
    5424:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    5426:	7d28      	ldrb	r0, [r5, #20]
    5428:	47a0      	blx	r4
}
    542a:	bd70      	pop	{r4, r5, r6, pc}
    542c:	200012ec 	.word	0x200012ec
    5430:	00002d85 	.word	0x00002d85

00005434 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    5434:	b510      	push	{r4, lr}
	switch (cb_type) {
    5436:	2801      	cmp	r0, #1
    5438:	d010      	beq.n	545c <cdcdf_acm_register_callback+0x28>
    543a:	2800      	cmp	r0, #0
    543c:	d006      	beq.n	544c <cdcdf_acm_register_callback+0x18>
    543e:	2802      	cmp	r0, #2
    5440:	d014      	beq.n	546c <cdcdf_acm_register_callback+0x38>
    5442:	2803      	cmp	r0, #3
    5444:	d016      	beq.n	5474 <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    5446:	200d      	movs	r0, #13
    5448:	4240      	negs	r0, r0
    544a:	e006      	b.n	545a <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    544c:	4b0b      	ldr	r3, [pc, #44]	; (547c <cdcdf_acm_register_callback+0x48>)
    544e:	7d18      	ldrb	r0, [r3, #20]
    5450:	000a      	movs	r2, r1
    5452:	2102      	movs	r1, #2
    5454:	4b0a      	ldr	r3, [pc, #40]	; (5480 <cdcdf_acm_register_callback+0x4c>)
    5456:	4798      	blx	r3
	}
	return ERR_NONE;
    5458:	2000      	movs	r0, #0
}
    545a:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    545c:	4b07      	ldr	r3, [pc, #28]	; (547c <cdcdf_acm_register_callback+0x48>)
    545e:	7cd8      	ldrb	r0, [r3, #19]
    5460:	000a      	movs	r2, r1
    5462:	2102      	movs	r1, #2
    5464:	4b06      	ldr	r3, [pc, #24]	; (5480 <cdcdf_acm_register_callback+0x4c>)
    5466:	4798      	blx	r3
	return ERR_NONE;
    5468:	2000      	movs	r0, #0
		break;
    546a:	e7f6      	b.n	545a <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    546c:	4b03      	ldr	r3, [pc, #12]	; (547c <cdcdf_acm_register_callback+0x48>)
    546e:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    5470:	2000      	movs	r0, #0
		break;
    5472:	e7f2      	b.n	545a <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    5474:	4b01      	ldr	r3, [pc, #4]	; (547c <cdcdf_acm_register_callback+0x48>)
    5476:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    5478:	2000      	movs	r0, #0
		break;
    547a:	e7ee      	b.n	545a <cdcdf_acm_register_callback+0x26>
    547c:	200012ec 	.word	0x200012ec
    5480:	00002e1d 	.word	0x00002e1d

00005484 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    5484:	4b01      	ldr	r3, [pc, #4]	; (548c <cdcdf_acm_is_enabled+0x8>)
    5486:	7d58      	ldrb	r0, [r3, #21]
}
    5488:	4770      	bx	lr
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	200012ec 	.word	0x200012ec

00005490 <cdcdf_acm_read>:
{
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	0004      	movs	r4, r0
    5494:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    5496:	4b07      	ldr	r3, [pc, #28]	; (54b4 <cdcdf_acm_read+0x24>)
    5498:	4798      	blx	r3
    549a:	2800      	cmp	r0, #0
    549c:	d007      	beq.n	54ae <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    549e:	4b06      	ldr	r3, [pc, #24]	; (54b8 <cdcdf_acm_read+0x28>)
    54a0:	7d18      	ldrb	r0, [r3, #20]
    54a2:	2300      	movs	r3, #0
    54a4:	002a      	movs	r2, r5
    54a6:	0021      	movs	r1, r4
    54a8:	4c04      	ldr	r4, [pc, #16]	; (54bc <cdcdf_acm_read+0x2c>)
    54aa:	47a0      	blx	r4
}
    54ac:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    54ae:	2011      	movs	r0, #17
    54b0:	4240      	negs	r0, r0
    54b2:	e7fb      	b.n	54ac <cdcdf_acm_read+0x1c>
    54b4:	00005485 	.word	0x00005485
    54b8:	200012ec 	.word	0x200012ec
    54bc:	0000575d 	.word	0x0000575d

000054c0 <cdcdf_acm_write>:
{
    54c0:	b570      	push	{r4, r5, r6, lr}
    54c2:	0004      	movs	r4, r0
    54c4:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    54c6:	4b07      	ldr	r3, [pc, #28]	; (54e4 <cdcdf_acm_write+0x24>)
    54c8:	4798      	blx	r3
    54ca:	2800      	cmp	r0, #0
    54cc:	d007      	beq.n	54de <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    54ce:	4b06      	ldr	r3, [pc, #24]	; (54e8 <cdcdf_acm_write+0x28>)
    54d0:	7cd8      	ldrb	r0, [r3, #19]
    54d2:	2301      	movs	r3, #1
    54d4:	002a      	movs	r2, r5
    54d6:	0021      	movs	r1, r4
    54d8:	4c04      	ldr	r4, [pc, #16]	; (54ec <cdcdf_acm_write+0x2c>)
    54da:	47a0      	blx	r4
}
    54dc:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    54de:	2011      	movs	r0, #17
    54e0:	4240      	negs	r0, r0
    54e2:	e7fb      	b.n	54dc <cdcdf_acm_write+0x1c>
    54e4:	00005485 	.word	0x00005485
    54e8:	200012ec 	.word	0x200012ec
    54ec:	0000575d 	.word	0x0000575d

000054f0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    54f0:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    54f2:	4b06      	ldr	r3, [pc, #24]	; (550c <usbdc_unconfig+0x1c>)
    54f4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    54f6:	e005      	b.n	5504 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    54f8:	2200      	movs	r2, #0
    54fa:	2101      	movs	r1, #1
    54fc:	0020      	movs	r0, r4
    54fe:	6863      	ldr	r3, [r4, #4]
    5500:	4798      	blx	r3
		func = func->next;
    5502:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    5504:	2c00      	cmp	r4, #0
    5506:	d1f7      	bne.n	54f8 <usbdc_unconfig+0x8>
	}
}
    5508:	bd10      	pop	{r4, pc}
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	20001310 	.word	0x20001310

00005510 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    5510:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    5512:	4b06      	ldr	r3, [pc, #24]	; (552c <usbdc_sof_notify+0x1c>)
    5514:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    5516:	e000      	b.n	551a <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    5518:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    551a:	2c00      	cmp	r4, #0
    551c:	d004      	beq.n	5528 <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    551e:	6863      	ldr	r3, [r4, #4]
    5520:	2b00      	cmp	r3, #0
    5522:	d0f9      	beq.n	5518 <usbdc_sof_notify+0x8>
			sof->cb();
    5524:	4798      	blx	r3
    5526:	e7f7      	b.n	5518 <usbdc_sof_notify+0x8>
	}
}
    5528:	bd10      	pop	{r4, pc}
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	20001310 	.word	0x20001310

00005530 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    5530:	b570      	push	{r4, r5, r6, lr}
    5532:	0006      	movs	r6, r0
    5534:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    5536:	4b07      	ldr	r3, [pc, #28]	; (5554 <usbdc_change_notify+0x24>)
    5538:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    553a:	e000      	b.n	553e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    553c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    553e:	2c00      	cmp	r4, #0
    5540:	d006      	beq.n	5550 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    5542:	6863      	ldr	r3, [r4, #4]
    5544:	2b00      	cmp	r3, #0
    5546:	d0f9      	beq.n	553c <usbdc_change_notify+0xc>
			cg->cb(change, value);
    5548:	0029      	movs	r1, r5
    554a:	0030      	movs	r0, r6
    554c:	4798      	blx	r3
    554e:	e7f5      	b.n	553c <usbdc_change_notify+0xc>
	}
}
    5550:	bd70      	pop	{r4, r5, r6, pc}
    5552:	46c0      	nop			; (mov r8, r8)
    5554:	20001310 	.word	0x20001310

00005558 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    555a:	0007      	movs	r7, r0
    555c:	000e      	movs	r6, r1
    555e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    5560:	4b0b      	ldr	r3, [pc, #44]	; (5590 <usbdc_request_handler+0x38>)
    5562:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    5564:	e000      	b.n	5568 <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    5566:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    5568:	2c00      	cmp	r4, #0
    556a:	d00d      	beq.n	5588 <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    556c:	6863      	ldr	r3, [r4, #4]
    556e:	2b00      	cmp	r3, #0
    5570:	d0f9      	beq.n	5566 <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    5572:	002a      	movs	r2, r5
    5574:	0031      	movs	r1, r6
    5576:	0038      	movs	r0, r7
    5578:	4798      	blx	r3
			if (0 == rc) {
    557a:	2800      	cmp	r0, #0
    557c:	d006      	beq.n	558c <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    557e:	300a      	adds	r0, #10
    5580:	d0f1      	beq.n	5566 <usbdc_request_handler+0xe>
				return -1;
    5582:	2001      	movs	r0, #1
    5584:	4240      	negs	r0, r0
    5586:	e000      	b.n	558a <usbdc_request_handler+0x32>
	}
	return false;
    5588:	2000      	movs	r0, #0
}
    558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    558c:	2001      	movs	r0, #1
    558e:	e7fc      	b.n	558a <usbdc_request_handler+0x32>
    5590:	20001310 	.word	0x20001310

00005594 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    5594:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    5596:	4b01      	ldr	r3, [pc, #4]	; (559c <usbd_sof_cb+0x8>)
    5598:	4798      	blx	r3
}
    559a:	bd10      	pop	{r4, pc}
    559c:	00005511 	.word	0x00005511

000055a0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    55a0:	b510      	push	{r4, lr}
    55a2:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    55a4:	2201      	movs	r2, #1
    55a6:	2000      	movs	r0, #0
    55a8:	4b01      	ldr	r3, [pc, #4]	; (55b0 <usbdc_ctrl_data_end+0x10>)
    55aa:	4798      	blx	r3
	return false;
}
    55ac:	2000      	movs	r0, #0
    55ae:	bd10      	pop	{r4, pc}
    55b0:	00005559 	.word	0x00005559

000055b4 <usbdc_set_address>:
{
    55b4:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    55b6:	4b01      	ldr	r3, [pc, #4]	; (55bc <usbdc_set_address+0x8>)
    55b8:	4798      	blx	r3
}
    55ba:	bd10      	pop	{r4, pc}
    55bc:	00002b71 	.word	0x00002b71

000055c0 <usbdc_ctrl_status_end>:
{
    55c0:	b510      	push	{r4, lr}
    55c2:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    55c4:	7803      	ldrb	r3, [r0, #0]
    55c6:	2b00      	cmp	r3, #0
    55c8:	d112      	bne.n	55f0 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    55ca:	7843      	ldrb	r3, [r0, #1]
    55cc:	2b05      	cmp	r3, #5
    55ce:	d012      	beq.n	55f6 <usbdc_ctrl_status_end+0x36>
    55d0:	2b09      	cmp	r3, #9
    55d2:	d10d      	bne.n	55f0 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    55d4:	7882      	ldrb	r2, [r0, #2]
    55d6:	4b10      	ldr	r3, [pc, #64]	; (5618 <usbdc_ctrl_status_end+0x58>)
    55d8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    55da:	7882      	ldrb	r2, [r0, #2]
    55dc:	78c3      	ldrb	r3, [r0, #3]
    55de:	021b      	lsls	r3, r3, #8
    55e0:	4313      	orrs	r3, r2
    55e2:	d106      	bne.n	55f2 <usbdc_ctrl_status_end+0x32>
    55e4:	2103      	movs	r1, #3
    55e6:	4b0c      	ldr	r3, [pc, #48]	; (5618 <usbdc_ctrl_status_end+0x58>)
    55e8:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    55ea:	2001      	movs	r0, #1
    55ec:	4b0b      	ldr	r3, [pc, #44]	; (561c <usbdc_ctrl_status_end+0x5c>)
    55ee:	4798      	blx	r3
}
    55f0:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    55f2:	2104      	movs	r1, #4
    55f4:	e7f7      	b.n	55e6 <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    55f6:	7880      	ldrb	r0, [r0, #2]
    55f8:	4b09      	ldr	r3, [pc, #36]	; (5620 <usbdc_ctrl_status_end+0x60>)
    55fa:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    55fc:	78a2      	ldrb	r2, [r4, #2]
    55fe:	78e3      	ldrb	r3, [r4, #3]
    5600:	021b      	lsls	r3, r3, #8
    5602:	4313      	orrs	r3, r2
    5604:	d006      	beq.n	5614 <usbdc_ctrl_status_end+0x54>
    5606:	2103      	movs	r1, #3
    5608:	4b03      	ldr	r3, [pc, #12]	; (5618 <usbdc_ctrl_status_end+0x58>)
    560a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    560c:	2001      	movs	r0, #1
    560e:	4b03      	ldr	r3, [pc, #12]	; (561c <usbdc_ctrl_status_end+0x5c>)
    5610:	4798      	blx	r3
		break;
    5612:	e7ed      	b.n	55f0 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5614:	2102      	movs	r1, #2
    5616:	e7f7      	b.n	5608 <usbdc_ctrl_status_end+0x48>
    5618:	20001310 	.word	0x20001310
    561c:	00005531 	.word	0x00005531
    5620:	000055b5 	.word	0x000055b5

00005624 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    5624:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    5626:	2900      	cmp	r1, #0
    5628:	d003      	beq.n	5632 <usbdc_cb_ctl_done+0xe>
    562a:	2901      	cmp	r1, #1
    562c:	d006      	beq.n	563c <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    562e:	2000      	movs	r0, #0
    5630:	e003      	b.n	563a <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    5632:	0010      	movs	r0, r2
    5634:	4b03      	ldr	r3, [pc, #12]	; (5644 <usbdc_cb_ctl_done+0x20>)
    5636:	4798      	blx	r3
	return false;
    5638:	2000      	movs	r0, #0
}
    563a:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    563c:	0010      	movs	r0, r2
    563e:	4b02      	ldr	r3, [pc, #8]	; (5648 <usbdc_cb_ctl_done+0x24>)
    5640:	4798      	blx	r3
    5642:	e7fa      	b.n	563a <usbdc_cb_ctl_done+0x16>
    5644:	000055c1 	.word	0x000055c1
    5648:	000055a1 	.word	0x000055a1

0000564c <usbdc_set_config>:
{
    564c:	b530      	push	{r4, r5, lr}
    564e:	b083      	sub	sp, #12
    5650:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    5652:	d014      	beq.n	567e <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    5654:	4b1e      	ldr	r3, [pc, #120]	; (56d0 <usbdc_set_config+0x84>)
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	6818      	ldr	r0, [r3, #0]
    565a:	6859      	ldr	r1, [r3, #4]
    565c:	4b1d      	ldr	r3, [pc, #116]	; (56d4 <usbdc_set_config+0x88>)
    565e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5660:	2800      	cmp	r0, #0
    5662:	d032      	beq.n	56ca <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    5664:	7881      	ldrb	r1, [r0, #2]
    5666:	78c3      	ldrb	r3, [r0, #3]
    5668:	021b      	lsls	r3, r3, #8
    566a:	18c9      	adds	r1, r1, r3
    566c:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    566e:	1841      	adds	r1, r0, r1
    5670:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    5672:	2204      	movs	r2, #4
    5674:	4b18      	ldr	r3, [pc, #96]	; (56d8 <usbdc_set_config+0x8c>)
    5676:	4798      	blx	r3
    5678:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    567a:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    567c:	e00d      	b.n	569a <usbdc_set_config+0x4e>
		usbdc_unconfig();
    567e:	4b17      	ldr	r3, [pc, #92]	; (56dc <usbdc_set_config+0x90>)
    5680:	4798      	blx	r3
		return true;
    5682:	2001      	movs	r0, #1
    5684:	e01f      	b.n	56c6 <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    5686:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    5688:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    568a:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    568c:	18c0      	adds	r0, r0, r3
    568e:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5690:	2204      	movs	r2, #4
    5692:	9901      	ldr	r1, [sp, #4]
    5694:	4b10      	ldr	r3, [pc, #64]	; (56d8 <usbdc_set_config+0x8c>)
    5696:	4798      	blx	r3
    5698:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    569a:	9b00      	ldr	r3, [sp, #0]
    569c:	2b00      	cmp	r3, #0
    569e:	d011      	beq.n	56c4 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    56a0:	789d      	ldrb	r5, [r3, #2]
    56a2:	42ac      	cmp	r4, r5
    56a4:	d0f0      	beq.n	5688 <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    56a6:	4b0a      	ldr	r3, [pc, #40]	; (56d0 <usbdc_set_config+0x84>)
    56a8:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    56aa:	2c00      	cmp	r4, #0
    56ac:	d0eb      	beq.n	5686 <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    56ae:	466a      	mov	r2, sp
    56b0:	2100      	movs	r1, #0
    56b2:	0020      	movs	r0, r4
    56b4:	6863      	ldr	r3, [r4, #4]
    56b6:	4798      	blx	r3
    56b8:	2800      	cmp	r0, #0
    56ba:	d001      	beq.n	56c0 <usbdc_set_config+0x74>
					func = func->next;
    56bc:	6824      	ldr	r4, [r4, #0]
    56be:	e7f4      	b.n	56aa <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    56c0:	002c      	movs	r4, r5
    56c2:	e7e1      	b.n	5688 <usbdc_set_config+0x3c>
	return true;
    56c4:	2001      	movs	r0, #1
}
    56c6:	b003      	add	sp, #12
    56c8:	bd30      	pop	{r4, r5, pc}
		return false;
    56ca:	2000      	movs	r0, #0
    56cc:	e7fb      	b.n	56c6 <usbdc_set_config+0x7a>
    56ce:	46c0      	nop			; (mov r8, r8)
    56d0:	20001310 	.word	0x20001310
    56d4:	00005d49 	.word	0x00005d49
    56d8:	00005d05 	.word	0x00005d05
    56dc:	000054f1 	.word	0x000054f1

000056e0 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    56e0:	b510      	push	{r4, lr}
	usbdc_unconfig();
    56e2:	4b0d      	ldr	r3, [pc, #52]	; (5718 <usbdc_reset+0x38>)
    56e4:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    56e6:	4c0d      	ldr	r4, [pc, #52]	; (571c <usbdc_reset+0x3c>)
    56e8:	2302      	movs	r3, #2
    56ea:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    56ec:	2300      	movs	r3, #0
    56ee:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    56f0:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    56f2:	2000      	movs	r0, #0
    56f4:	4b0a      	ldr	r3, [pc, #40]	; (5720 <usbdc_reset+0x40>)
    56f6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    56f8:	7f20      	ldrb	r0, [r4, #28]
    56fa:	4b0a      	ldr	r3, [pc, #40]	; (5724 <usbdc_reset+0x44>)
    56fc:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    56fe:	4a0a      	ldr	r2, [pc, #40]	; (5728 <usbdc_reset+0x48>)
    5700:	2100      	movs	r1, #0
    5702:	2000      	movs	r0, #0
    5704:	4c09      	ldr	r4, [pc, #36]	; (572c <usbdc_reset+0x4c>)
    5706:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5708:	4a09      	ldr	r2, [pc, #36]	; (5730 <usbdc_reset+0x50>)
    570a:	2102      	movs	r1, #2
    570c:	2000      	movs	r0, #0
    570e:	47a0      	blx	r4
	usb_d_ep_enable(0);
    5710:	2000      	movs	r0, #0
    5712:	4b08      	ldr	r3, [pc, #32]	; (5734 <usbdc_reset+0x54>)
    5714:	4798      	blx	r3
}
    5716:	bd10      	pop	{r4, pc}
    5718:	000054f1 	.word	0x000054f1
    571c:	20001310 	.word	0x20001310
    5720:	00002be5 	.word	0x00002be5
    5724:	00002bd1 	.word	0x00002bd1
    5728:	00005ba9 	.word	0x00005ba9
    572c:	00002e1d 	.word	0x00002e1d
    5730:	00005625 	.word	0x00005625
    5734:	00002c11 	.word	0x00002c11

00005738 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5738:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    573a:	2800      	cmp	r0, #0
    573c:	d002      	beq.n	5744 <usbd_event_cb+0xc>
    573e:	2801      	cmp	r0, #1
    5740:	d004      	beq.n	574c <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    5742:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    5744:	2000      	movs	r0, #0
    5746:	4b03      	ldr	r3, [pc, #12]	; (5754 <usbd_event_cb+0x1c>)
    5748:	4798      	blx	r3
		break;
    574a:	e7fa      	b.n	5742 <usbd_event_cb+0xa>
		usbdc_reset();
    574c:	4b02      	ldr	r3, [pc, #8]	; (5758 <usbd_event_cb+0x20>)
    574e:	4798      	blx	r3
}
    5750:	e7f7      	b.n	5742 <usbd_event_cb+0xa>
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	00005531 	.word	0x00005531
    5758:	000056e1 	.word	0x000056e1

0000575c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    575c:	b510      	push	{r4, lr}
    575e:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    5760:	ac01      	add	r4, sp, #4
    5762:	9101      	str	r1, [sp, #4]
    5764:	9202      	str	r2, [sp, #8]
    5766:	7220      	strb	r0, [r4, #8]
    5768:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    576a:	0020      	movs	r0, r4
    576c:	4b01      	ldr	r3, [pc, #4]	; (5774 <usbdc_xfer+0x18>)
    576e:	4798      	blx	r3
}
    5770:	b004      	add	sp, #16
    5772:	bd10      	pop	{r4, pc}
    5774:	00002c61 	.word	0x00002c61

00005778 <usbdc_clear_ftr_req>:
{
    5778:	b510      	push	{r4, lr}
    577a:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    577c:	780a      	ldrb	r2, [r1, #0]
    577e:	231f      	movs	r3, #31
    5780:	4013      	ands	r3, r2
    5782:	2b02      	cmp	r3, #2
    5784:	d112      	bne.n	57ac <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    5786:	798a      	ldrb	r2, [r1, #6]
    5788:	79cb      	ldrb	r3, [r1, #7]
    578a:	021b      	lsls	r3, r3, #8
    578c:	4313      	orrs	r3, r2
    578e:	d001      	beq.n	5794 <usbdc_clear_ftr_req+0x1c>
			return false;
    5790:	2000      	movs	r0, #0
    5792:	e00c      	b.n	57ae <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    5794:	7908      	ldrb	r0, [r1, #4]
    5796:	2100      	movs	r1, #0
    5798:	4b05      	ldr	r3, [pc, #20]	; (57b0 <usbdc_clear_ftr_req+0x38>)
    579a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    579c:	2301      	movs	r3, #1
    579e:	2200      	movs	r2, #0
    57a0:	2100      	movs	r1, #0
    57a2:	0020      	movs	r0, r4
    57a4:	4c03      	ldr	r4, [pc, #12]	; (57b4 <usbdc_clear_ftr_req+0x3c>)
    57a6:	47a0      	blx	r4
		return true;
    57a8:	2001      	movs	r0, #1
    57aa:	e000      	b.n	57ae <usbdc_clear_ftr_req+0x36>
		return false;
    57ac:	2000      	movs	r0, #0
}
    57ae:	bd10      	pop	{r4, pc}
    57b0:	00002db5 	.word	0x00002db5
    57b4:	0000575d 	.word	0x0000575d

000057b8 <usbdc_set_ftr_req>:
{
    57b8:	b510      	push	{r4, lr}
    57ba:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    57bc:	780a      	ldrb	r2, [r1, #0]
    57be:	231f      	movs	r3, #31
    57c0:	4013      	ands	r3, r2
    57c2:	2b02      	cmp	r3, #2
    57c4:	d112      	bne.n	57ec <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    57c6:	798a      	ldrb	r2, [r1, #6]
    57c8:	79cb      	ldrb	r3, [r1, #7]
    57ca:	021b      	lsls	r3, r3, #8
    57cc:	4313      	orrs	r3, r2
    57ce:	d001      	beq.n	57d4 <usbdc_set_ftr_req+0x1c>
			return false;
    57d0:	2000      	movs	r0, #0
    57d2:	e00c      	b.n	57ee <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    57d4:	7908      	ldrb	r0, [r1, #4]
    57d6:	2101      	movs	r1, #1
    57d8:	4b05      	ldr	r3, [pc, #20]	; (57f0 <usbdc_set_ftr_req+0x38>)
    57da:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    57dc:	2301      	movs	r3, #1
    57de:	2200      	movs	r2, #0
    57e0:	2100      	movs	r1, #0
    57e2:	0020      	movs	r0, r4
    57e4:	4c03      	ldr	r4, [pc, #12]	; (57f4 <usbdc_set_ftr_req+0x3c>)
    57e6:	47a0      	blx	r4
		return true;
    57e8:	2001      	movs	r0, #1
    57ea:	e000      	b.n	57ee <usbdc_set_ftr_req+0x36>
		return false;
    57ec:	2000      	movs	r0, #0
}
    57ee:	bd10      	pop	{r4, pc}
    57f0:	00002db5 	.word	0x00002db5
    57f4:	0000575d 	.word	0x0000575d

000057f8 <usbdc_set_interface>:
{
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	b082      	sub	sp, #8
    57fc:	0005      	movs	r5, r0
    57fe:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5800:	4b2a      	ldr	r3, [pc, #168]	; (58ac <usbdc_set_interface+0xb4>)
    5802:	681a      	ldr	r2, [r3, #0]
    5804:	6810      	ldr	r0, [r2, #0]
    5806:	6851      	ldr	r1, [r2, #4]
    5808:	7eda      	ldrb	r2, [r3, #27]
    580a:	4b29      	ldr	r3, [pc, #164]	; (58b0 <usbdc_set_interface+0xb8>)
    580c:	4798      	blx	r3
	if (NULL == ifc) {
    580e:	2800      	cmp	r0, #0
    5810:	d045      	beq.n	589e <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    5812:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    5814:	7881      	ldrb	r1, [r0, #2]
    5816:	78c3      	ldrb	r3, [r0, #3]
    5818:	021b      	lsls	r3, r3, #8
    581a:	18c9      	adds	r1, r1, r3
    581c:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    581e:	1841      	adds	r1, r0, r1
    5820:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5822:	2204      	movs	r2, #4
    5824:	4b23      	ldr	r3, [pc, #140]	; (58b4 <usbdc_set_interface+0xbc>)
    5826:	4798      	blx	r3
    5828:	2800      	cmp	r0, #0
    582a:	d10b      	bne.n	5844 <usbdc_set_interface+0x4c>
		return false;
    582c:	2000      	movs	r0, #0
    582e:	e039      	b.n	58a4 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    5830:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    5832:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    5834:	18c0      	adds	r0, r0, r3
    5836:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5838:	2204      	movs	r2, #4
    583a:	9901      	ldr	r1, [sp, #4]
    583c:	4b1d      	ldr	r3, [pc, #116]	; (58b4 <usbdc_set_interface+0xbc>)
    583e:	4798      	blx	r3
		if (NULL == ifc) {
    5840:	2800      	cmp	r0, #0
    5842:	d02e      	beq.n	58a2 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5844:	7883      	ldrb	r3, [r0, #2]
    5846:	42a3      	cmp	r3, r4
    5848:	d1f2      	bne.n	5830 <usbdc_set_interface+0x38>
    584a:	78c3      	ldrb	r3, [r0, #3]
    584c:	42ab      	cmp	r3, r5
    584e:	d1ef      	bne.n	5830 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    5850:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    5852:	4b16      	ldr	r3, [pc, #88]	; (58ac <usbdc_set_interface+0xb4>)
    5854:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    5856:	2e00      	cmp	r6, #0
    5858:	d01f      	beq.n	589a <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    585a:	466a      	mov	r2, sp
    585c:	2101      	movs	r1, #1
    585e:	0030      	movs	r0, r6
    5860:	6873      	ldr	r3, [r6, #4]
    5862:	4798      	blx	r3
    5864:	2800      	cmp	r0, #0
    5866:	d001      	beq.n	586c <usbdc_set_interface+0x74>
			func = func->next;
    5868:	6836      	ldr	r6, [r6, #0]
    586a:	e7f4      	b.n	5856 <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    586c:	6873      	ldr	r3, [r6, #4]
    586e:	466a      	mov	r2, sp
    5870:	2100      	movs	r1, #0
    5872:	0030      	movs	r0, r6
    5874:	4798      	blx	r3
    5876:	2800      	cmp	r0, #0
    5878:	d116      	bne.n	58a8 <usbdc_set_interface+0xb0>
			if (alt_set) {
    587a:	2d00      	cmp	r5, #0
    587c:	d005      	beq.n	588a <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    587e:	2201      	movs	r2, #1
    5880:	40a2      	lsls	r2, r4
    5882:	490a      	ldr	r1, [pc, #40]	; (58ac <usbdc_set_interface+0xb4>)
    5884:	7f4b      	ldrb	r3, [r1, #29]
    5886:	4313      	orrs	r3, r2
    5888:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    588a:	2300      	movs	r3, #0
    588c:	2200      	movs	r2, #0
    588e:	2100      	movs	r1, #0
    5890:	2000      	movs	r0, #0
    5892:	4c09      	ldr	r4, [pc, #36]	; (58b8 <usbdc_set_interface+0xc0>)
    5894:	47a0      	blx	r4
			return true;
    5896:	2001      	movs	r0, #1
    5898:	e004      	b.n	58a4 <usbdc_set_interface+0xac>
	return false;
    589a:	2000      	movs	r0, #0
    589c:	e002      	b.n	58a4 <usbdc_set_interface+0xac>
		return false;
    589e:	2000      	movs	r0, #0
    58a0:	e000      	b.n	58a4 <usbdc_set_interface+0xac>
			return false;
    58a2:	2000      	movs	r0, #0
}
    58a4:	b002      	add	sp, #8
    58a6:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    58a8:	2000      	movs	r0, #0
    58aa:	e7fb      	b.n	58a4 <usbdc_set_interface+0xac>
    58ac:	20001310 	.word	0x20001310
    58b0:	00005d49 	.word	0x00005d49
    58b4:	00005d05 	.word	0x00005d05
    58b8:	0000575d 	.word	0x0000575d

000058bc <usbdc_set_req>:
{
    58bc:	b510      	push	{r4, lr}
    58be:	0004      	movs	r4, r0
	switch (req->bRequest) {
    58c0:	784b      	ldrb	r3, [r1, #1]
    58c2:	2b0b      	cmp	r3, #11
    58c4:	d82d      	bhi.n	5922 <usbdc_set_req+0x66>
    58c6:	009b      	lsls	r3, r3, #2
    58c8:	4a17      	ldr	r2, [pc, #92]	; (5928 <usbdc_set_req+0x6c>)
    58ca:	58d3      	ldr	r3, [r2, r3]
    58cc:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    58ce:	2301      	movs	r3, #1
    58d0:	2200      	movs	r2, #0
    58d2:	2100      	movs	r1, #0
    58d4:	4c15      	ldr	r4, [pc, #84]	; (592c <usbdc_set_req+0x70>)
    58d6:	47a0      	blx	r4
    58d8:	4243      	negs	r3, r0
    58da:	4158      	adcs	r0, r3
    58dc:	b2c0      	uxtb	r0, r0
}
    58de:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    58e0:	7888      	ldrb	r0, [r1, #2]
    58e2:	4b13      	ldr	r3, [pc, #76]	; (5930 <usbdc_set_req+0x74>)
    58e4:	4798      	blx	r3
    58e6:	2800      	cmp	r0, #0
    58e8:	d0f9      	beq.n	58de <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    58ea:	2301      	movs	r3, #1
    58ec:	2200      	movs	r2, #0
    58ee:	2100      	movs	r1, #0
    58f0:	0020      	movs	r0, r4
    58f2:	4c0e      	ldr	r4, [pc, #56]	; (592c <usbdc_set_req+0x70>)
    58f4:	47a0      	blx	r4
    58f6:	4243      	negs	r3, r0
    58f8:	4158      	adcs	r0, r3
    58fa:	b2c0      	uxtb	r0, r0
    58fc:	e7ef      	b.n	58de <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    58fe:	4b0d      	ldr	r3, [pc, #52]	; (5934 <usbdc_set_req+0x78>)
    5900:	4798      	blx	r3
    5902:	e7ec      	b.n	58de <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    5904:	4b0c      	ldr	r3, [pc, #48]	; (5938 <usbdc_set_req+0x7c>)
    5906:	4798      	blx	r3
    5908:	e7e9      	b.n	58de <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    590a:	790a      	ldrb	r2, [r1, #4]
    590c:	794b      	ldrb	r3, [r1, #5]
    590e:	021b      	lsls	r3, r3, #8
    5910:	4313      	orrs	r3, r2
    5912:	788a      	ldrb	r2, [r1, #2]
    5914:	78c8      	ldrb	r0, [r1, #3]
    5916:	0200      	lsls	r0, r0, #8
    5918:	4310      	orrs	r0, r2
    591a:	0019      	movs	r1, r3
    591c:	4b07      	ldr	r3, [pc, #28]	; (593c <usbdc_set_req+0x80>)
    591e:	4798      	blx	r3
    5920:	e7dd      	b.n	58de <usbdc_set_req+0x22>
		return false;
    5922:	2000      	movs	r0, #0
    5924:	e7db      	b.n	58de <usbdc_set_req+0x22>
    5926:	46c0      	nop			; (mov r8, r8)
    5928:	000104e0 	.word	0x000104e0
    592c:	0000575d 	.word	0x0000575d
    5930:	0000564d 	.word	0x0000564d
    5934:	00005779 	.word	0x00005779
    5938:	000057b9 	.word	0x000057b9
    593c:	000057f9 	.word	0x000057f9

00005940 <usbdc_get_dev_desc>:
{
    5940:	b570      	push	{r4, r5, r6, lr}
    5942:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5944:	798b      	ldrb	r3, [r1, #6]
    5946:	79cc      	ldrb	r4, [r1, #7]
    5948:	0224      	lsls	r4, r4, #8
    594a:	431c      	orrs	r4, r3
	if (length > 0x12) {
    594c:	2c12      	cmp	r4, #18
    594e:	d900      	bls.n	5952 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    5950:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    5952:	4b0b      	ldr	r3, [pc, #44]	; (5980 <usbdc_get_dev_desc+0x40>)
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	6818      	ldr	r0, [r3, #0]
    5958:	6859      	ldr	r1, [r3, #4]
    595a:	2201      	movs	r2, #1
    595c:	4b09      	ldr	r3, [pc, #36]	; (5984 <usbdc_get_dev_desc+0x44>)
    595e:	4798      	blx	r3
	if (!dev_desc) {
    5960:	2800      	cmp	r0, #0
    5962:	d00b      	beq.n	597c <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    5964:	2300      	movs	r3, #0
    5966:	0022      	movs	r2, r4
    5968:	0001      	movs	r1, r0
    596a:	0028      	movs	r0, r5
    596c:	4c06      	ldr	r4, [pc, #24]	; (5988 <usbdc_get_dev_desc+0x48>)
    596e:	47a0      	blx	r4
    5970:	2800      	cmp	r0, #0
    5972:	d101      	bne.n	5978 <usbdc_get_dev_desc+0x38>
	return true;
    5974:	2001      	movs	r0, #1
}
    5976:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5978:	2000      	movs	r0, #0
    597a:	e7fc      	b.n	5976 <usbdc_get_dev_desc+0x36>
		return false;
    597c:	2000      	movs	r0, #0
    597e:	e7fa      	b.n	5976 <usbdc_get_dev_desc+0x36>
    5980:	20001310 	.word	0x20001310
    5984:	00005d05 	.word	0x00005d05
    5988:	0000575d 	.word	0x0000575d

0000598c <usbdc_get_cfg_desc>:
{
    598c:	b570      	push	{r4, r5, r6, lr}
    598e:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5990:	798b      	ldrb	r3, [r1, #6]
    5992:	79ce      	ldrb	r6, [r1, #7]
    5994:	0236      	lsls	r6, r6, #8
    5996:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    5998:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    599a:	4b13      	ldr	r3, [pc, #76]	; (59e8 <usbdc_get_cfg_desc+0x5c>)
    599c:	7f1c      	ldrb	r4, [r3, #28]
    599e:	3c01      	subs	r4, #1
    59a0:	4034      	ands	r4, r6
    59a2:	4261      	negs	r1, r4
    59a4:	414c      	adcs	r4, r1
    59a6:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    59a8:	681b      	ldr	r3, [r3, #0]
    59aa:	6818      	ldr	r0, [r3, #0]
    59ac:	6859      	ldr	r1, [r3, #4]
    59ae:	3201      	adds	r2, #1
    59b0:	b2d2      	uxtb	r2, r2
    59b2:	4b0e      	ldr	r3, [pc, #56]	; (59ec <usbdc_get_cfg_desc+0x60>)
    59b4:	4798      	blx	r3
	if (NULL == cfg_desc) {
    59b6:	2800      	cmp	r0, #0
    59b8:	d013      	beq.n	59e2 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    59ba:	7882      	ldrb	r2, [r0, #2]
    59bc:	78c3      	ldrb	r3, [r0, #3]
    59be:	021b      	lsls	r3, r3, #8
    59c0:	18d2      	adds	r2, r2, r3
    59c2:	b292      	uxth	r2, r2
	if (length <= total_len) {
    59c4:	4296      	cmp	r6, r2
    59c6:	d801      	bhi.n	59cc <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    59c8:	0032      	movs	r2, r6
		need_zlp = false;
    59ca:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    59cc:	0023      	movs	r3, r4
    59ce:	0001      	movs	r1, r0
    59d0:	0028      	movs	r0, r5
    59d2:	4c07      	ldr	r4, [pc, #28]	; (59f0 <usbdc_get_cfg_desc+0x64>)
    59d4:	47a0      	blx	r4
    59d6:	2800      	cmp	r0, #0
    59d8:	d101      	bne.n	59de <usbdc_get_cfg_desc+0x52>
	return true;
    59da:	2001      	movs	r0, #1
}
    59dc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    59de:	2000      	movs	r0, #0
    59e0:	e7fc      	b.n	59dc <usbdc_get_cfg_desc+0x50>
		return false;
    59e2:	2000      	movs	r0, #0
    59e4:	e7fa      	b.n	59dc <usbdc_get_cfg_desc+0x50>
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	20001310 	.word	0x20001310
    59ec:	00005d49 	.word	0x00005d49
    59f0:	0000575d 	.word	0x0000575d

000059f4 <usbdc_get_str_desc>:
{
    59f4:	b570      	push	{r4, r5, r6, lr}
    59f6:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    59f8:	798b      	ldrb	r3, [r1, #6]
    59fa:	79ce      	ldrb	r6, [r1, #7]
    59fc:	0236      	lsls	r6, r6, #8
    59fe:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    5a00:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5a02:	4b10      	ldr	r3, [pc, #64]	; (5a44 <usbdc_get_str_desc+0x50>)
    5a04:	7f1c      	ldrb	r4, [r3, #28]
    5a06:	3c01      	subs	r4, #1
    5a08:	4034      	ands	r4, r6
    5a0a:	4261      	negs	r1, r4
    5a0c:	414c      	adcs	r4, r1
    5a0e:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	6818      	ldr	r0, [r3, #0]
    5a14:	6859      	ldr	r1, [r3, #4]
    5a16:	4b0c      	ldr	r3, [pc, #48]	; (5a48 <usbdc_get_str_desc+0x54>)
    5a18:	4798      	blx	r3
	if (NULL == str_desc) {
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d00f      	beq.n	5a3e <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    5a1e:	7802      	ldrb	r2, [r0, #0]
    5a20:	4296      	cmp	r6, r2
    5a22:	d801      	bhi.n	5a28 <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    5a24:	0032      	movs	r2, r6
		need_zlp = false;
    5a26:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    5a28:	0023      	movs	r3, r4
    5a2a:	0001      	movs	r1, r0
    5a2c:	0028      	movs	r0, r5
    5a2e:	4c07      	ldr	r4, [pc, #28]	; (5a4c <usbdc_get_str_desc+0x58>)
    5a30:	47a0      	blx	r4
    5a32:	2800      	cmp	r0, #0
    5a34:	d101      	bne.n	5a3a <usbdc_get_str_desc+0x46>
	return true;
    5a36:	2001      	movs	r0, #1
}
    5a38:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5a3a:	2000      	movs	r0, #0
    5a3c:	e7fc      	b.n	5a38 <usbdc_get_str_desc+0x44>
		return false;
    5a3e:	2000      	movs	r0, #0
    5a40:	e7fa      	b.n	5a38 <usbdc_get_str_desc+0x44>
    5a42:	46c0      	nop			; (mov r8, r8)
    5a44:	20001310 	.word	0x20001310
    5a48:	00005d8d 	.word	0x00005d8d
    5a4c:	0000575d 	.word	0x0000575d

00005a50 <usbdc_get_desc_req>:
{
    5a50:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    5a52:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    5a54:	2b02      	cmp	r3, #2
    5a56:	d008      	beq.n	5a6a <usbdc_get_desc_req+0x1a>
    5a58:	2b03      	cmp	r3, #3
    5a5a:	d009      	beq.n	5a70 <usbdc_get_desc_req+0x20>
    5a5c:	2b01      	cmp	r3, #1
    5a5e:	d001      	beq.n	5a64 <usbdc_get_desc_req+0x14>
	return false;
    5a60:	2000      	movs	r0, #0
    5a62:	e001      	b.n	5a68 <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    5a64:	4b04      	ldr	r3, [pc, #16]	; (5a78 <usbdc_get_desc_req+0x28>)
    5a66:	4798      	blx	r3
}
    5a68:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    5a6a:	4b04      	ldr	r3, [pc, #16]	; (5a7c <usbdc_get_desc_req+0x2c>)
    5a6c:	4798      	blx	r3
    5a6e:	e7fb      	b.n	5a68 <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    5a70:	4b03      	ldr	r3, [pc, #12]	; (5a80 <usbdc_get_desc_req+0x30>)
    5a72:	4798      	blx	r3
    5a74:	e7f8      	b.n	5a68 <usbdc_get_desc_req+0x18>
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	00005941 	.word	0x00005941
    5a7c:	0000598d 	.word	0x0000598d
    5a80:	000059f5 	.word	0x000059f5

00005a84 <usbdc_get_status_req>:
{
    5a84:	b530      	push	{r4, r5, lr}
    5a86:	b083      	sub	sp, #12
    5a88:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5a8a:	780a      	ldrb	r2, [r1, #0]
    5a8c:	231f      	movs	r3, #31
    5a8e:	4013      	ands	r3, r2
    5a90:	b2da      	uxtb	r2, r3
    5a92:	2a01      	cmp	r2, #1
    5a94:	d903      	bls.n	5a9e <usbdc_get_status_req+0x1a>
    5a96:	2b02      	cmp	r3, #2
    5a98:	d012      	beq.n	5ac0 <usbdc_get_status_req+0x3c>
		return false;
    5a9a:	2000      	movs	r0, #0
    5a9c:	e00e      	b.n	5abc <usbdc_get_status_req+0x38>
		st = 0;
    5a9e:	2300      	movs	r3, #0
    5aa0:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    5aa2:	4d0d      	ldr	r5, [pc, #52]	; (5ad8 <usbdc_get_status_req+0x54>)
    5aa4:	2202      	movs	r2, #2
    5aa6:	a901      	add	r1, sp, #4
    5aa8:	6968      	ldr	r0, [r5, #20]
    5aaa:	4b0c      	ldr	r3, [pc, #48]	; (5adc <usbdc_get_status_req+0x58>)
    5aac:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    5aae:	6969      	ldr	r1, [r5, #20]
    5ab0:	2300      	movs	r3, #0
    5ab2:	2202      	movs	r2, #2
    5ab4:	0020      	movs	r0, r4
    5ab6:	4c0a      	ldr	r4, [pc, #40]	; (5ae0 <usbdc_get_status_req+0x5c>)
    5ab8:	47a0      	blx	r4
	return true;
    5aba:	2001      	movs	r0, #1
}
    5abc:	b003      	add	sp, #12
    5abe:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    5ac0:	7908      	ldrb	r0, [r1, #4]
    5ac2:	2102      	movs	r1, #2
    5ac4:	4b07      	ldr	r3, [pc, #28]	; (5ae4 <usbdc_get_status_req+0x60>)
    5ac6:	4798      	blx	r3
		if (st < 0) {
    5ac8:	2800      	cmp	r0, #0
    5aca:	db03      	blt.n	5ad4 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    5acc:	2301      	movs	r3, #1
    5ace:	4018      	ands	r0, r3
    5ad0:	9001      	str	r0, [sp, #4]
		break;
    5ad2:	e7e6      	b.n	5aa2 <usbdc_get_status_req+0x1e>
			return false;
    5ad4:	2000      	movs	r0, #0
    5ad6:	e7f1      	b.n	5abc <usbdc_get_status_req+0x38>
    5ad8:	20001310 	.word	0x20001310
    5adc:	0000b421 	.word	0x0000b421
    5ae0:	0000575d 	.word	0x0000575d
    5ae4:	00002db5 	.word	0x00002db5

00005ae8 <usbdc_get_interface>:
{
    5ae8:	b570      	push	{r4, r5, r6, lr}
    5aea:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5aec:	4b16      	ldr	r3, [pc, #88]	; (5b48 <usbdc_get_interface+0x60>)
    5aee:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    5af0:	7f5a      	ldrb	r2, [r3, #29]
    5af2:	7901      	ldrb	r1, [r0, #4]
    5af4:	7943      	ldrb	r3, [r0, #5]
    5af6:	021b      	lsls	r3, r3, #8
    5af8:	430b      	orrs	r3, r1
    5afa:	411a      	asrs	r2, r3
    5afc:	07d3      	lsls	r3, r2, #31
    5afe:	d50a      	bpl.n	5b16 <usbdc_get_interface+0x2e>
	while (NULL != func) {
    5b00:	2c00      	cmp	r4, #0
    5b02:	d01f      	beq.n	5b44 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    5b04:	002a      	movs	r2, r5
    5b06:	2102      	movs	r1, #2
    5b08:	0020      	movs	r0, r4
    5b0a:	6863      	ldr	r3, [r4, #4]
    5b0c:	4798      	blx	r3
    5b0e:	2800      	cmp	r0, #0
    5b10:	da0d      	bge.n	5b2e <usbdc_get_interface+0x46>
			func = func->next;
    5b12:	6824      	ldr	r4, [r4, #0]
    5b14:	e7f4      	b.n	5b00 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    5b16:	4b0c      	ldr	r3, [pc, #48]	; (5b48 <usbdc_get_interface+0x60>)
    5b18:	2200      	movs	r2, #0
    5b1a:	6959      	ldr	r1, [r3, #20]
    5b1c:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5b1e:	6959      	ldr	r1, [r3, #20]
    5b20:	2300      	movs	r3, #0
    5b22:	3201      	adds	r2, #1
    5b24:	2000      	movs	r0, #0
    5b26:	4c09      	ldr	r4, [pc, #36]	; (5b4c <usbdc_get_interface+0x64>)
    5b28:	47a0      	blx	r4
		return true;
    5b2a:	2001      	movs	r0, #1
    5b2c:	e00b      	b.n	5b46 <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    5b2e:	4b06      	ldr	r3, [pc, #24]	; (5b48 <usbdc_get_interface+0x60>)
    5b30:	695a      	ldr	r2, [r3, #20]
    5b32:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5b34:	6959      	ldr	r1, [r3, #20]
    5b36:	2300      	movs	r3, #0
    5b38:	2201      	movs	r2, #1
    5b3a:	2000      	movs	r0, #0
    5b3c:	4c03      	ldr	r4, [pc, #12]	; (5b4c <usbdc_get_interface+0x64>)
    5b3e:	47a0      	blx	r4
			return true;
    5b40:	2001      	movs	r0, #1
    5b42:	e000      	b.n	5b46 <usbdc_get_interface+0x5e>
	return false;
    5b44:	2000      	movs	r0, #0
}
    5b46:	bd70      	pop	{r4, r5, r6, pc}
    5b48:	20001310 	.word	0x20001310
    5b4c:	0000575d 	.word	0x0000575d

00005b50 <usbdc_get_req>:
{
    5b50:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    5b52:	784b      	ldrb	r3, [r1, #1]
    5b54:	2b06      	cmp	r3, #6
    5b56:	d00d      	beq.n	5b74 <usbdc_get_req+0x24>
    5b58:	d907      	bls.n	5b6a <usbdc_get_req+0x1a>
    5b5a:	2b08      	cmp	r3, #8
    5b5c:	d00d      	beq.n	5b7a <usbdc_get_req+0x2a>
    5b5e:	2b0a      	cmp	r3, #10
    5b60:	d116      	bne.n	5b90 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    5b62:	0008      	movs	r0, r1
    5b64:	4b0b      	ldr	r3, [pc, #44]	; (5b94 <usbdc_get_req+0x44>)
    5b66:	4798      	blx	r3
    5b68:	e006      	b.n	5b78 <usbdc_get_req+0x28>
	switch (req->bRequest) {
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d110      	bne.n	5b90 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    5b6e:	4b0a      	ldr	r3, [pc, #40]	; (5b98 <usbdc_get_req+0x48>)
    5b70:	4798      	blx	r3
    5b72:	e001      	b.n	5b78 <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    5b74:	4b09      	ldr	r3, [pc, #36]	; (5b9c <usbdc_get_req+0x4c>)
    5b76:	4798      	blx	r3
}
    5b78:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    5b7a:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <usbdc_get_req+0x50>)
    5b7c:	7eda      	ldrb	r2, [r3, #27]
    5b7e:	6959      	ldr	r1, [r3, #20]
    5b80:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    5b82:	6959      	ldr	r1, [r3, #20]
    5b84:	2300      	movs	r3, #0
    5b86:	2201      	movs	r2, #1
    5b88:	4c06      	ldr	r4, [pc, #24]	; (5ba4 <usbdc_get_req+0x54>)
    5b8a:	47a0      	blx	r4
		return true;
    5b8c:	2001      	movs	r0, #1
    5b8e:	e7f3      	b.n	5b78 <usbdc_get_req+0x28>
		return false;
    5b90:	2000      	movs	r0, #0
    5b92:	e7f1      	b.n	5b78 <usbdc_get_req+0x28>
    5b94:	00005ae9 	.word	0x00005ae9
    5b98:	00005a85 	.word	0x00005a85
    5b9c:	00005a51 	.word	0x00005a51
    5ba0:	20001310 	.word	0x20001310
    5ba4:	0000575d 	.word	0x0000575d

00005ba8 <usbdc_cb_ctl_req>:
{
    5ba8:	b570      	push	{r4, r5, r6, lr}
    5baa:	0005      	movs	r5, r0
    5bac:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    5bae:	2200      	movs	r2, #0
    5bb0:	4b0d      	ldr	r3, [pc, #52]	; (5be8 <usbdc_cb_ctl_req+0x40>)
    5bb2:	4798      	blx	r3
    5bb4:	1c43      	adds	r3, r0, #1
    5bb6:	d014      	beq.n	5be2 <usbdc_cb_ctl_req+0x3a>
    5bb8:	2801      	cmp	r0, #1
    5bba:	d013      	beq.n	5be4 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    5bbc:	7823      	ldrb	r3, [r4, #0]
    5bbe:	221f      	movs	r2, #31
    5bc0:	4393      	bics	r3, r2
    5bc2:	d004      	beq.n	5bce <usbdc_cb_ctl_req+0x26>
    5bc4:	b2db      	uxtb	r3, r3
    5bc6:	2b80      	cmp	r3, #128	; 0x80
    5bc8:	d006      	beq.n	5bd8 <usbdc_cb_ctl_req+0x30>
		return false;
    5bca:	2000      	movs	r0, #0
    5bcc:	e00a      	b.n	5be4 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    5bce:	0021      	movs	r1, r4
    5bd0:	0028      	movs	r0, r5
    5bd2:	4b06      	ldr	r3, [pc, #24]	; (5bec <usbdc_cb_ctl_req+0x44>)
    5bd4:	4798      	blx	r3
    5bd6:	e005      	b.n	5be4 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    5bd8:	0021      	movs	r1, r4
    5bda:	0028      	movs	r0, r5
    5bdc:	4b04      	ldr	r3, [pc, #16]	; (5bf0 <usbdc_cb_ctl_req+0x48>)
    5bde:	4798      	blx	r3
    5be0:	e000      	b.n	5be4 <usbdc_cb_ctl_req+0x3c>
		return false;
    5be2:	2000      	movs	r0, #0
}
    5be4:	bd70      	pop	{r4, r5, r6, pc}
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	00005559 	.word	0x00005559
    5bec:	000058bd 	.word	0x000058bd
    5bf0:	00005b51 	.word	0x00005b51

00005bf4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    5bf4:	b510      	push	{r4, lr}
	switch (type) {
    5bf6:	2801      	cmp	r0, #1
    5bf8:	d009      	beq.n	5c0e <usbdc_register_handler+0x1a>
    5bfa:	2800      	cmp	r0, #0
    5bfc:	d002      	beq.n	5c04 <usbdc_register_handler+0x10>
    5bfe:	2802      	cmp	r0, #2
    5c00:	d00a      	beq.n	5c18 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    5c02:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    5c04:	4807      	ldr	r0, [pc, #28]	; (5c24 <usbdc_register_handler+0x30>)
    5c06:	3004      	adds	r0, #4
    5c08:	4b07      	ldr	r3, [pc, #28]	; (5c28 <usbdc_register_handler+0x34>)
    5c0a:	4798      	blx	r3
		break;
    5c0c:	e7f9      	b.n	5c02 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    5c0e:	4805      	ldr	r0, [pc, #20]	; (5c24 <usbdc_register_handler+0x30>)
    5c10:	3008      	adds	r0, #8
    5c12:	4b05      	ldr	r3, [pc, #20]	; (5c28 <usbdc_register_handler+0x34>)
    5c14:	4798      	blx	r3
		break;
    5c16:	e7f4      	b.n	5c02 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    5c18:	4802      	ldr	r0, [pc, #8]	; (5c24 <usbdc_register_handler+0x30>)
    5c1a:	300c      	adds	r0, #12
    5c1c:	4b02      	ldr	r3, [pc, #8]	; (5c28 <usbdc_register_handler+0x34>)
    5c1e:	4798      	blx	r3
}
    5c20:	e7ef      	b.n	5c02 <usbdc_register_handler+0xe>
    5c22:	46c0      	nop			; (mov r8, r8)
    5c24:	20001310 	.word	0x20001310
    5c28:	00002ec1 	.word	0x00002ec1

00005c2c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    5c2c:	b570      	push	{r4, r5, r6, lr}
    5c2e:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    5c30:	1e43      	subs	r3, r0, #1
    5c32:	4198      	sbcs	r0, r3
    5c34:	b2c0      	uxtb	r0, r0
    5c36:	4a0c      	ldr	r2, [pc, #48]	; (5c68 <usbdc_init+0x3c>)
    5c38:	490c      	ldr	r1, [pc, #48]	; (5c6c <usbdc_init+0x40>)
    5c3a:	4b0d      	ldr	r3, [pc, #52]	; (5c70 <usbdc_init+0x44>)
    5c3c:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    5c3e:	4b0d      	ldr	r3, [pc, #52]	; (5c74 <usbdc_init+0x48>)
    5c40:	4798      	blx	r3
	if (rc < 0) {
    5c42:	2800      	cmp	r0, #0
    5c44:	db0e      	blt.n	5c64 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5c46:	4d0c      	ldr	r5, [pc, #48]	; (5c78 <usbdc_init+0x4c>)
    5c48:	2220      	movs	r2, #32
    5c4a:	2100      	movs	r1, #0
    5c4c:	0028      	movs	r0, r5
    5c4e:	4b0b      	ldr	r3, [pc, #44]	; (5c7c <usbdc_init+0x50>)
    5c50:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    5c52:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    5c54:	490a      	ldr	r1, [pc, #40]	; (5c80 <usbdc_init+0x54>)
    5c56:	2000      	movs	r0, #0
    5c58:	4c0a      	ldr	r4, [pc, #40]	; (5c84 <usbdc_init+0x58>)
    5c5a:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    5c5c:	490a      	ldr	r1, [pc, #40]	; (5c88 <usbdc_init+0x5c>)
    5c5e:	2001      	movs	r0, #1
    5c60:	47a0      	blx	r4

	return 0;
    5c62:	2000      	movs	r0, #0
}
    5c64:	bd70      	pop	{r4, r5, r6, pc}
    5c66:	46c0      	nop			; (mov r8, r8)
    5c68:	00000355 	.word	0x00000355
    5c6c:	00010510 	.word	0x00010510
    5c70:	00002e6d 	.word	0x00002e6d
    5c74:	00002ae1 	.word	0x00002ae1
    5c78:	20001310 	.word	0x20001310
    5c7c:	0000b4a5 	.word	0x0000b4a5
    5c80:	00005595 	.word	0x00005595
    5c84:	00002b4d 	.word	0x00002b4d
    5c88:	00005739 	.word	0x00005739

00005c8c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    5c8c:	b510      	push	{r4, lr}
    5c8e:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    5c90:	4802      	ldr	r0, [pc, #8]	; (5c9c <usbdc_register_function+0x10>)
    5c92:	3010      	adds	r0, #16
    5c94:	4b02      	ldr	r3, [pc, #8]	; (5ca0 <usbdc_register_function+0x14>)
    5c96:	4798      	blx	r3
}
    5c98:	bd10      	pop	{r4, pc}
    5c9a:	46c0      	nop			; (mov r8, r8)
    5c9c:	20001310 	.word	0x20001310
    5ca0:	00002ec1 	.word	0x00002ec1

00005ca4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    5ca4:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    5ca6:	4b0b      	ldr	r3, [pc, #44]	; (5cd4 <usbdc_start+0x30>)
    5ca8:	7e9b      	ldrb	r3, [r3, #26]
    5caa:	2b00      	cmp	r3, #0
    5cac:	d10c      	bne.n	5cc8 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    5cae:	2800      	cmp	r0, #0
    5cb0:	d00d      	beq.n	5cce <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    5cb2:	4b08      	ldr	r3, [pc, #32]	; (5cd4 <usbdc_start+0x30>)
    5cb4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    5cb6:	6802      	ldr	r2, [r0, #0]
    5cb8:	79d2      	ldrb	r2, [r2, #7]
    5cba:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    5cbc:	2201      	movs	r2, #1
    5cbe:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    5cc0:	4b05      	ldr	r3, [pc, #20]	; (5cd8 <usbdc_start+0x34>)
    5cc2:	4798      	blx	r3
	return ERR_NONE;
    5cc4:	2000      	movs	r0, #0
}
    5cc6:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    5cc8:	2004      	movs	r0, #4
    5cca:	4240      	negs	r0, r0
    5ccc:	e7fb      	b.n	5cc6 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    5cce:	2009      	movs	r0, #9
    5cd0:	4240      	negs	r0, r0
    5cd2:	e7f8      	b.n	5cc6 <usbdc_start+0x22>
    5cd4:	20001310 	.word	0x20001310
    5cd8:	00002b59 	.word	0x00002b59

00005cdc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    5cdc:	b510      	push	{r4, lr}
	usb_d_attach();
    5cde:	4b01      	ldr	r3, [pc, #4]	; (5ce4 <usbdc_attach+0x8>)
    5ce0:	4798      	blx	r3
}
    5ce2:	bd10      	pop	{r4, pc}
    5ce4:	00002b65 	.word	0x00002b65

00005ce8 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    5ce8:	4b01      	ldr	r3, [pc, #4]	; (5cf0 <usbdc_get_ctrl_buffer+0x8>)
    5cea:	6958      	ldr	r0, [r3, #20]
}
    5cec:	4770      	bx	lr
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	20001310 	.word	0x20001310

00005cf4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    5cf4:	4b02      	ldr	r3, [pc, #8]	; (5d00 <usbdc_get_state+0xc>)
    5cf6:	7e98      	ldrb	r0, [r3, #26]
    5cf8:	06c3      	lsls	r3, r0, #27
    5cfa:	d500      	bpl.n	5cfe <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    5cfc:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    5cfe:	4770      	bx	lr
    5d00:	20001310 	.word	0x20001310

00005d04 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    5d04:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5d06:	4288      	cmp	r0, r1
    5d08:	d207      	bcs.n	5d1a <usb_find_desc+0x16>
	return desc[0];
    5d0a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5d0c:	2b01      	cmp	r3, #1
    5d0e:	d906      	bls.n	5d1e <usb_find_desc+0x1a>
	return desc[1];
    5d10:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    5d12:	4294      	cmp	r4, r2
    5d14:	d002      	beq.n	5d1c <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    5d16:	18c0      	adds	r0, r0, r3
    5d18:	e7f5      	b.n	5d06 <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5d1a:	2000      	movs	r0, #0
}
    5d1c:	bd10      	pop	{r4, pc}
		_desc_len_check();
    5d1e:	2000      	movs	r0, #0
    5d20:	e7fc      	b.n	5d1c <usb_find_desc+0x18>

00005d22 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    5d22:	4288      	cmp	r0, r1
    5d24:	d209      	bcs.n	5d3a <usb_find_ep_desc+0x18>
	return desc[0];
    5d26:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5d28:	2b01      	cmp	r3, #1
    5d2a:	d908      	bls.n	5d3e <usb_find_ep_desc+0x1c>
	return desc[1];
    5d2c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    5d2e:	2a04      	cmp	r2, #4
    5d30:	d007      	beq.n	5d42 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    5d32:	2a05      	cmp	r2, #5
    5d34:	d002      	beq.n	5d3c <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    5d36:	18c0      	adds	r0, r0, r3
    5d38:	e7f3      	b.n	5d22 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    5d3a:	2000      	movs	r0, #0
}
    5d3c:	4770      	bx	lr
		_desc_len_check();
    5d3e:	2000      	movs	r0, #0
    5d40:	e7fc      	b.n	5d3c <usb_find_ep_desc+0x1a>
	return NULL;
    5d42:	2000      	movs	r0, #0
    5d44:	e7fa      	b.n	5d3c <usb_find_ep_desc+0x1a>
	...

00005d48 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    5d48:	b570      	push	{r4, r5, r6, lr}
    5d4a:	000c      	movs	r4, r1
    5d4c:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    5d4e:	2202      	movs	r2, #2
    5d50:	4b0d      	ldr	r3, [pc, #52]	; (5d88 <usb_find_cfg_desc+0x40>)
    5d52:	4798      	blx	r3
	if (!desc) {
    5d54:	2800      	cmp	r0, #0
    5d56:	d012      	beq.n	5d7e <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    5d58:	42a0      	cmp	r0, r4
    5d5a:	d20f      	bcs.n	5d7c <usb_find_cfg_desc+0x34>
	return desc[0];
    5d5c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    5d5e:	2b01      	cmp	r3, #1
    5d60:	d90e      	bls.n	5d80 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    5d62:	7843      	ldrb	r3, [r0, #1]
    5d64:	2b02      	cmp	r3, #2
    5d66:	d10d      	bne.n	5d84 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    5d68:	7943      	ldrb	r3, [r0, #5]
    5d6a:	42ab      	cmp	r3, r5
    5d6c:	d007      	beq.n	5d7e <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    5d6e:	7883      	ldrb	r3, [r0, #2]
    5d70:	78c2      	ldrb	r2, [r0, #3]
    5d72:	0212      	lsls	r2, r2, #8
    5d74:	189b      	adds	r3, r3, r2
    5d76:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    5d78:	18c0      	adds	r0, r0, r3
    5d7a:	e7ed      	b.n	5d58 <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    5d7c:	2000      	movs	r0, #0
}
    5d7e:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    5d80:	2000      	movs	r0, #0
    5d82:	e7fc      	b.n	5d7e <usb_find_cfg_desc+0x36>
	return NULL;
    5d84:	2000      	movs	r0, #0
    5d86:	e7fa      	b.n	5d7e <usb_find_cfg_desc+0x36>
    5d88:	00005d05 	.word	0x00005d05

00005d8c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	000d      	movs	r5, r1
    5d90:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    5d92:	2400      	movs	r4, #0
    5d94:	42a8      	cmp	r0, r5
    5d96:	d20e      	bcs.n	5db6 <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    5d98:	2203      	movs	r2, #3
    5d9a:	0029      	movs	r1, r5
    5d9c:	4b08      	ldr	r3, [pc, #32]	; (5dc0 <usb_find_str_desc+0x34>)
    5d9e:	4798      	blx	r3
		if (desc) {
    5da0:	2800      	cmp	r0, #0
    5da2:	d009      	beq.n	5db8 <usb_find_str_desc+0x2c>
	return desc[0];
    5da4:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    5da6:	2b01      	cmp	r3, #1
    5da8:	d907      	bls.n	5dba <usb_find_str_desc+0x2e>
			if (i == str_index) {
    5daa:	42b4      	cmp	r4, r6
    5dac:	d004      	beq.n	5db8 <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    5dae:	3401      	adds	r4, #1
    5db0:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    5db2:	18c0      	adds	r0, r0, r3
    5db4:	e7ee      	b.n	5d94 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    5db6:	2000      	movs	r0, #0
}
    5db8:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    5dba:	2000      	movs	r0, #0
    5dbc:	e7fc      	b.n	5db8 <usb_find_str_desc+0x2c>
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	00005d05 	.word	0x00005d05

00005dc4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    5dc4:	2000      	movs	r0, #0
    5dc6:	4770      	bx	lr

00005dc8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    5dc8:	4770      	bx	lr
	...

00005dcc <_ZL10USBTimeoutPK10timer_task>:
//#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
	ptrCDCClass->timeout=true;
    5dcc:	4b03      	ldr	r3, [pc, #12]	; (5ddc <_ZL10USBTimeoutPK10timer_task+0x10>)
    5dce:	681b      	ldr	r3, [r3, #0]
    5dd0:	2201      	movs	r2, #1
    5dd2:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    5dd4:	2200      	movs	r2, #0
    5dd6:	741a      	strb	r2, [r3, #16]
	
}
    5dd8:	4770      	bx	lr
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	20001330 	.word	0x20001330

00005de0 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
    5de0:	4b03      	ldr	r3, [pc, #12]	; (5df0 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
    5de2:	681b      	ldr	r3, [r3, #0]
    5de4:	2201      	movs	r2, #1
    5de6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    5de8:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    5dea:	741a      	strb	r2, [r3, #16]


	return false;
}
    5dec:	2000      	movs	r0, #0
    5dee:	4770      	bx	lr
    5df0:	20001330 	.word	0x20001330

00005df4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    5df4:	4b03      	ldr	r3, [pc, #12]	; (5e04 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
    5df6:	681b      	ldr	r3, [r3, #0]
    5df8:	2201      	movs	r2, #1
    5dfa:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    5dfc:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    5dfe:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
    5e00:	2000      	movs	r0, #0
    5e02:	4770      	bx	lr
    5e04:	20001330 	.word	0x20001330

00005e08 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    5e08:	b530      	push	{r4, r5, lr}
    5e0a:	b083      	sub	sp, #12
    5e0c:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
    5e0e:	6983      	ldr	r3, [r0, #24]
    5e10:	3301      	adds	r3, #1
    5e12:	d002      	beq.n	5e1a <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
    5e14:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
    5e16:	b003      	add	sp, #12
    5e18:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
    5e1a:	6803      	ldr	r3, [r0, #0]
    5e1c:	69db      	ldr	r3, [r3, #28]
    5e1e:	466a      	mov	r2, sp
    5e20:	1dd5      	adds	r5, r2, #7
    5e22:	2201      	movs	r2, #1
    5e24:	0029      	movs	r1, r5
    5e26:	4798      	blx	r3
    5e28:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
    5e2a:	782b      	ldrb	r3, [r5, #0]
    5e2c:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
    5e2e:	69a0      	ldr	r0, [r4, #24]
    5e30:	e7f1      	b.n	5e16 <_ZN9CDC_Class4peekEv+0xe>

00005e32 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
    5e32:	b500      	push	{lr}
    5e34:	b083      	sub	sp, #12
    5e36:	466b      	mov	r3, sp
    5e38:	71d9      	strb	r1, [r3, #7]
	if (connected){
    5e3a:	7c03      	ldrb	r3, [r0, #16]
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	d00a      	beq.n	5e56 <_ZN9CDC_Class5writeEh+0x24>
		while(!txReady);
    5e40:	7d03      	ldrb	r3, [r0, #20]
    5e42:	2b00      	cmp	r3, #0
    5e44:	d0fc      	beq.n	5e40 <_ZN9CDC_Class5writeEh+0xe>
		return writeData(&c, 1);
    5e46:	6803      	ldr	r3, [r0, #0]
    5e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e4a:	2201      	movs	r2, #1
    5e4c:	4669      	mov	r1, sp
    5e4e:	3107      	adds	r1, #7
    5e50:	4798      	blx	r3
	}else{
		return 0;
	}
		
}
    5e52:	b003      	add	sp, #12
    5e54:	bd00      	pop	{pc}
		return 0;
    5e56:	2000      	movs	r0, #0
    5e58:	e7fb      	b.n	5e52 <_ZN9CDC_Class5writeEh+0x20>

00005e5a <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
    5e5a:	7d43      	ldrb	r3, [r0, #21]
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d002      	beq.n	5e66 <_ZN9CDC_Class9availableEv+0xc>
    5e60:	7d00      	ldrb	r0, [r0, #20]
    5e62:	b2c0      	uxtb	r0, r0
	{
		
	return false;
	}
	
}
    5e64:	4770      	bx	lr
	if (rxReady && txReady)
    5e66:	2000      	movs	r0, #0
    5e68:	e7fc      	b.n	5e64 <_ZN9CDC_Class9availableEv+0xa>
	...

00005e6c <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
    5e6c:	b510      	push	{r4, lr}
    5e6e:	0004      	movs	r4, r0
    5e70:	4b03      	ldr	r3, [pc, #12]	; (5e80 <_ZN9CDC_ClassD1Ev+0x14>)
    5e72:	3308      	adds	r3, #8
    5e74:	6003      	str	r3, [r0, #0]
    5e76:	3010      	adds	r0, #16
    5e78:	4b02      	ldr	r3, [pc, #8]	; (5e84 <_ZN9CDC_ClassD1Ev+0x18>)
    5e7a:	4798      	blx	r3
} //~CDC_Class
    5e7c:	0020      	movs	r0, r4
    5e7e:	bd10      	pop	{r4, pc}
    5e80:	0001054c 	.word	0x0001054c
    5e84:	000062c1 	.word	0x000062c1

00005e88 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
    5e88:	b510      	push	{r4, lr}
    5e8a:	b082      	sub	sp, #8
    5e8c:	1c03      	adds	r3, r0, #0
    5e8e:	aa01      	add	r2, sp, #4
    5e90:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    5e92:	07db      	lsls	r3, r3, #31
    5e94:	d402      	bmi.n	5e9c <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
    5e96:	2000      	movs	r0, #0
    5e98:	b002      	add	sp, #8
    5e9a:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    5e9c:	4906      	ldr	r1, [pc, #24]	; (5eb8 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
    5e9e:	2000      	movs	r0, #0
    5ea0:	4c06      	ldr	r4, [pc, #24]	; (5ebc <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
    5ea2:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    5ea4:	4906      	ldr	r1, [pc, #24]	; (5ec0 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    5ea6:	2001      	movs	r0, #1
    5ea8:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
    5eaa:	4b06      	ldr	r3, [pc, #24]	; (5ec4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    5eac:	681b      	ldr	r3, [r3, #0]
    5eae:	2201      	movs	r2, #1
    5eb0:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    5eb2:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    5eb4:	741a      	strb	r2, [r3, #16]
    5eb6:	e7ee      	b.n	5e96 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
    5eb8:	00005de1 	.word	0x00005de1
    5ebc:	00005435 	.word	0x00005435
    5ec0:	00005df5 	.word	0x00005df5
    5ec4:	20001330 	.word	0x20001330

00005ec8 <_ZN9CDC_Class4readEv>:
{
    5ec8:	b510      	push	{r4, lr}
    5eca:	b082      	sub	sp, #8
    5ecc:	0004      	movs	r4, r0
	rxReady=false;
    5ece:	2300      	movs	r3, #0
    5ed0:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
    5ed2:	2101      	movs	r1, #1
    5ed4:	466b      	mov	r3, sp
    5ed6:	1dd8      	adds	r0, r3, #7
    5ed8:	4b04      	ldr	r3, [pc, #16]	; (5eec <_ZN9CDC_Class4readEv+0x24>)
    5eda:	4798      	blx	r3
	while(!rxReady);
    5edc:	7d63      	ldrb	r3, [r4, #21]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d0fc      	beq.n	5edc <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
    5ee2:	466b      	mov	r3, sp
    5ee4:	79d8      	ldrb	r0, [r3, #7]
}
    5ee6:	b002      	add	sp, #8
    5ee8:	bd10      	pop	{r4, pc}
    5eea:	46c0      	nop			; (mov r8, r8)
    5eec:	00005491 	.word	0x00005491

00005ef0 <_ZN9CDC_Class8readDataEPvl>:
{
    5ef0:	b570      	push	{r4, r5, r6, lr}
    5ef2:	0004      	movs	r4, r0
    5ef4:	000e      	movs	r6, r1
    5ef6:	0015      	movs	r5, r2
	if (connected)
    5ef8:	7c03      	ldrb	r3, [r0, #16]
    5efa:	2b00      	cmp	r3, #0
    5efc:	d102      	bne.n	5f04 <_ZN9CDC_Class8readDataEPvl+0x14>
		r=0;
    5efe:	2500      	movs	r5, #0
}
    5f00:	0028      	movs	r0, r5
    5f02:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    5f04:	0093      	lsls	r3, r2, #2
    5f06:	189b      	adds	r3, r3, r2
    5f08:	005a      	lsls	r2, r3, #1
    5f0a:	490f      	ldr	r1, [pc, #60]	; (5f48 <_ZN9CDC_Class8readDataEPvl+0x58>)
    5f0c:	480f      	ldr	r0, [pc, #60]	; (5f4c <_ZN9CDC_Class8readDataEPvl+0x5c>)
    5f0e:	4b10      	ldr	r3, [pc, #64]	; (5f50 <_ZN9CDC_Class8readDataEPvl+0x60>)
    5f10:	4798      	blx	r3
		rxReady=false;
    5f12:	2300      	movs	r3, #0
    5f14:	7563      	strb	r3, [r4, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    5f16:	0029      	movs	r1, r5
    5f18:	0030      	movs	r0, r6
    5f1a:	4b0e      	ldr	r3, [pc, #56]	; (5f54 <_ZN9CDC_Class8readDataEPvl+0x64>)
    5f1c:	4798      	blx	r3
    5f1e:	b2c5      	uxtb	r5, r0
    5f20:	e002      	b.n	5f28 <_ZN9CDC_Class8readDataEPvl+0x38>
		while((!rxReady)&&(connected));
    5f22:	2300      	movs	r3, #0
    5f24:	2b00      	cmp	r3, #0
    5f26:	d005      	beq.n	5f34 <_ZN9CDC_Class8readDataEPvl+0x44>
    5f28:	7d63      	ldrb	r3, [r4, #21]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d1f9      	bne.n	5f22 <_ZN9CDC_Class8readDataEPvl+0x32>
    5f2e:	7c23      	ldrb	r3, [r4, #16]
    5f30:	b2db      	uxtb	r3, r3
    5f32:	e7f7      	b.n	5f24 <_ZN9CDC_Class8readDataEPvl+0x34>
		usbTerminalTimer.Stop();
    5f34:	4c05      	ldr	r4, [pc, #20]	; (5f4c <_ZN9CDC_Class8readDataEPvl+0x5c>)
    5f36:	0020      	movs	r0, r4
    5f38:	4b07      	ldr	r3, [pc, #28]	; (5f58 <_ZN9CDC_Class8readDataEPvl+0x68>)
    5f3a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    5f3c:	4902      	ldr	r1, [pc, #8]	; (5f48 <_ZN9CDC_Class8readDataEPvl+0x58>)
    5f3e:	0020      	movs	r0, r4
    5f40:	4b06      	ldr	r3, [pc, #24]	; (5f5c <_ZN9CDC_Class8readDataEPvl+0x6c>)
    5f42:	4798      	blx	r3
    5f44:	e7dc      	b.n	5f00 <_ZN9CDC_Class8readDataEPvl+0x10>
    5f46:	46c0      	nop			; (mov r8, r8)
    5f48:	00005dcd 	.word	0x00005dcd
    5f4c:	2000139c 	.word	0x2000139c
    5f50:	0000649d 	.word	0x0000649d
    5f54:	00005491 	.word	0x00005491
    5f58:	0000640d 	.word	0x0000640d
    5f5c:	000064e5 	.word	0x000064e5

00005f60 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
    5f60:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    5f62:	301c      	adds	r0, #28
    5f64:	2140      	movs	r1, #64	; 0x40
    5f66:	4b01      	ldr	r3, [pc, #4]	; (5f6c <_ZN9CDC_Class5flushEv+0xc>)
    5f68:	4798      	blx	r3
}
    5f6a:	bd10      	pop	{r4, pc}
    5f6c:	000054c1 	.word	0x000054c1

00005f70 <_ZN9CDC_Class9writeDataEPKvl>:
{
    5f70:	b570      	push	{r4, r5, r6, lr}
    5f72:	0004      	movs	r4, r0
    5f74:	000e      	movs	r6, r1
    5f76:	0015      	movs	r5, r2
	if (connected)
    5f78:	7c03      	ldrb	r3, [r0, #16]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d102      	bne.n	5f84 <_ZN9CDC_Class9writeDataEPKvl+0x14>
		return 0;
    5f7e:	2500      	movs	r5, #0
}
    5f80:	0028      	movs	r0, r5
    5f82:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    5f84:	0093      	lsls	r3, r2, #2
    5f86:	189b      	adds	r3, r3, r2
    5f88:	005a      	lsls	r2, r3, #1
    5f8a:	490f      	ldr	r1, [pc, #60]	; (5fc8 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    5f8c:	480f      	ldr	r0, [pc, #60]	; (5fcc <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    5f8e:	4b10      	ldr	r3, [pc, #64]	; (5fd0 <_ZN9CDC_Class9writeDataEPKvl+0x60>)
    5f90:	4798      	blx	r3
		txReady=false;
    5f92:	2300      	movs	r3, #0
    5f94:	7523      	strb	r3, [r4, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    5f96:	0029      	movs	r1, r5
    5f98:	0030      	movs	r0, r6
    5f9a:	4b0e      	ldr	r3, [pc, #56]	; (5fd4 <_ZN9CDC_Class9writeDataEPKvl+0x64>)
    5f9c:	4798      	blx	r3
    5f9e:	0005      	movs	r5, r0
    5fa0:	e002      	b.n	5fa8 <_ZN9CDC_Class9writeDataEPKvl+0x38>
		while((!txReady)&&(connected)){
    5fa2:	2300      	movs	r3, #0
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d005      	beq.n	5fb4 <_ZN9CDC_Class9writeDataEPKvl+0x44>
    5fa8:	7d23      	ldrb	r3, [r4, #20]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d1f9      	bne.n	5fa2 <_ZN9CDC_Class9writeDataEPKvl+0x32>
    5fae:	7c23      	ldrb	r3, [r4, #16]
    5fb0:	b2db      	uxtb	r3, r3
    5fb2:	e7f7      	b.n	5fa4 <_ZN9CDC_Class9writeDataEPKvl+0x34>
			usbTerminalTimer.Stop();
    5fb4:	4c05      	ldr	r4, [pc, #20]	; (5fcc <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    5fb6:	0020      	movs	r0, r4
    5fb8:	4b07      	ldr	r3, [pc, #28]	; (5fd8 <_ZN9CDC_Class9writeDataEPKvl+0x68>)
    5fba:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    5fbc:	4902      	ldr	r1, [pc, #8]	; (5fc8 <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    5fbe:	0020      	movs	r0, r4
    5fc0:	4b06      	ldr	r3, [pc, #24]	; (5fdc <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    5fc2:	4798      	blx	r3
		return r;
    5fc4:	e7dc      	b.n	5f80 <_ZN9CDC_Class9writeDataEPKvl+0x10>
    5fc6:	46c0      	nop			; (mov r8, r8)
    5fc8:	00005dcd 	.word	0x00005dcd
    5fcc:	2000139c 	.word	0x2000139c
    5fd0:	0000649d 	.word	0x0000649d
    5fd4:	000054c1 	.word	0x000054c1
    5fd8:	0000640d 	.word	0x0000640d
    5fdc:	000064e5 	.word	0x000064e5

00005fe0 <_ZN9CDC_Class5writeEPKhj>:
{
    5fe0:	b570      	push	{r4, r5, r6, lr}
    5fe2:	0004      	movs	r4, r0
    5fe4:	000e      	movs	r6, r1
    5fe6:	0015      	movs	r5, r2
	txReady=false;
    5fe8:	2300      	movs	r3, #0
    5fea:	7503      	strb	r3, [r0, #20]
 	if (connected){
    5fec:	7c03      	ldrb	r3, [r0, #16]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d102      	bne.n	5ff8 <_ZN9CDC_Class5writeEPKhj+0x18>
 		r=0;
    5ff2:	2500      	movs	r5, #0
}
    5ff4:	0028      	movs	r0, r5
    5ff6:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    5ff8:	0093      	lsls	r3, r2, #2
    5ffa:	189b      	adds	r3, r3, r2
    5ffc:	005a      	lsls	r2, r3, #1
    5ffe:	490e      	ldr	r1, [pc, #56]	; (6038 <_ZN9CDC_Class5writeEPKhj+0x58>)
    6000:	480e      	ldr	r0, [pc, #56]	; (603c <_ZN9CDC_Class5writeEPKhj+0x5c>)
    6002:	4b0f      	ldr	r3, [pc, #60]	; (6040 <_ZN9CDC_Class5writeEPKhj+0x60>)
    6004:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    6006:	0029      	movs	r1, r5
    6008:	0030      	movs	r0, r6
    600a:	4b0e      	ldr	r3, [pc, #56]	; (6044 <_ZN9CDC_Class5writeEPKhj+0x64>)
    600c:	4798      	blx	r3
    600e:	0005      	movs	r5, r0
    6010:	e002      	b.n	6018 <_ZN9CDC_Class5writeEPKhj+0x38>
		while((!txReady)&&(connected));
    6012:	2300      	movs	r3, #0
    6014:	2b00      	cmp	r3, #0
    6016:	d005      	beq.n	6024 <_ZN9CDC_Class5writeEPKhj+0x44>
    6018:	7d23      	ldrb	r3, [r4, #20]
    601a:	2b00      	cmp	r3, #0
    601c:	d1f9      	bne.n	6012 <_ZN9CDC_Class5writeEPKhj+0x32>
    601e:	7c23      	ldrb	r3, [r4, #16]
    6020:	b2db      	uxtb	r3, r3
    6022:	e7f7      	b.n	6014 <_ZN9CDC_Class5writeEPKhj+0x34>
		usbTerminalTimer.Stop();
    6024:	4c05      	ldr	r4, [pc, #20]	; (603c <_ZN9CDC_Class5writeEPKhj+0x5c>)
    6026:	0020      	movs	r0, r4
    6028:	4b07      	ldr	r3, [pc, #28]	; (6048 <_ZN9CDC_Class5writeEPKhj+0x68>)
    602a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    602c:	4902      	ldr	r1, [pc, #8]	; (6038 <_ZN9CDC_Class5writeEPKhj+0x58>)
    602e:	0020      	movs	r0, r4
    6030:	4b06      	ldr	r3, [pc, #24]	; (604c <_ZN9CDC_Class5writeEPKhj+0x6c>)
    6032:	4798      	blx	r3
    6034:	e7de      	b.n	5ff4 <_ZN9CDC_Class5writeEPKhj+0x14>
    6036:	46c0      	nop			; (mov r8, r8)
    6038:	00005dcd 	.word	0x00005dcd
    603c:	2000139c 	.word	0x2000139c
    6040:	0000649d 	.word	0x0000649d
    6044:	000054c1 	.word	0x000054c1
    6048:	0000640d 	.word	0x0000640d
    604c:	000064e5 	.word	0x000064e5

00006050 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
    6050:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
    6052:	4b01      	ldr	r3, [pc, #4]	; (6058 <_ZN9CDC_Class5clearEv+0x8>)
    6054:	4798      	blx	r3
}
    6056:	bd10      	pop	{r4, pc}
    6058:	0000541d 	.word	0x0000541d

0000605c <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
    605c:	b510      	push	{r4, lr}
    605e:	0004      	movs	r4, r0
    Print() : write_error(0) {}
    6060:	2300      	movs	r3, #0
    6062:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    6064:	4b08      	ldr	r3, [pc, #32]	; (6088 <_ZN9CDC_ClassC1Ev+0x2c>)
    6066:	6003      	str	r3, [r0, #0]
    6068:	23fa      	movs	r3, #250	; 0xfa
    606a:	009b      	lsls	r3, r3, #2
    606c:	6083      	str	r3, [r0, #8]
    606e:	3010      	adds	r0, #16
    6070:	4b06      	ldr	r3, [pc, #24]	; (608c <_ZN9CDC_ClassC1Ev+0x30>)
    6072:	4798      	blx	r3
    6074:	4b06      	ldr	r3, [pc, #24]	; (6090 <_ZN9CDC_ClassC1Ev+0x34>)
    6076:	3308      	adds	r3, #8
    6078:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
    607a:	2301      	movs	r3, #1
    607c:	425b      	negs	r3, r3
    607e:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
    6080:	4b04      	ldr	r3, [pc, #16]	; (6094 <_ZN9CDC_ClassC1Ev+0x38>)
    6082:	601c      	str	r4, [r3, #0]
} //CDC_Class
    6084:	0020      	movs	r0, r4
    6086:	bd10      	pop	{r4, pc}
    6088:	00010530 	.word	0x00010530
    608c:	000062b5 	.word	0x000062b5
    6090:	0001054c 	.word	0x0001054c
    6094:	20001330 	.word	0x20001330

00006098 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    6098:	b510      	push	{r4, lr}
    609a:	2801      	cmp	r0, #1
    609c:	d000      	beq.n	60a0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    609e:	bd10      	pop	{r4, pc}
    60a0:	4b06      	ldr	r3, [pc, #24]	; (60bc <_Z41__static_initialization_and_destruction_0ii+0x24>)
    60a2:	4299      	cmp	r1, r3
    60a4:	d1fb      	bne.n	609e <_Z41__static_initialization_and_destruction_0ii+0x6>
    60a6:	4c06      	ldr	r4, [pc, #24]	; (60c0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    60a8:	3404      	adds	r4, #4
    60aa:	0020      	movs	r0, r4
    60ac:	4b05      	ldr	r3, [pc, #20]	; (60c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    60ae:	4798      	blx	r3
    60b0:	4a05      	ldr	r2, [pc, #20]	; (60c8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    60b2:	4906      	ldr	r1, [pc, #24]	; (60cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    60b4:	0020      	movs	r0, r4
    60b6:	4b06      	ldr	r3, [pc, #24]	; (60d0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    60b8:	4798      	blx	r3
    60ba:	e7f0      	b.n	609e <_Z41__static_initialization_and_destruction_0ii+0x6>
    60bc:	0000ffff 	.word	0x0000ffff
    60c0:	20001330 	.word	0x20001330
    60c4:	0000605d 	.word	0x0000605d
    60c8:	20000000 	.word	0x20000000
    60cc:	00005e6d 	.word	0x00005e6d
    60d0:	00006a25 	.word	0x00006a25

000060d4 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
    60d4:	b570      	push	{r4, r5, r6, lr}
    60d6:	0005      	movs	r5, r0
	OnInit();
    60d8:	3010      	adds	r0, #16
    60da:	4b06      	ldr	r3, [pc, #24]	; (60f4 <_ZN9CDC_Class4InitEv+0x20>)
    60dc:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    60de:	4906      	ldr	r1, [pc, #24]	; (60f8 <_ZN9CDC_Class4InitEv+0x24>)
    60e0:	2003      	movs	r0, #3
    60e2:	4b06      	ldr	r3, [pc, #24]	; (60fc <_ZN9CDC_Class4InitEv+0x28>)
    60e4:	4798      	blx	r3
	delay_ms(100);
    60e6:	2064      	movs	r0, #100	; 0x64
    60e8:	4c05      	ldr	r4, [pc, #20]	; (6100 <_ZN9CDC_Class4InitEv+0x2c>)
    60ea:	47a0      	blx	r4
	if (connected)
    60ec:	7c2b      	ldrb	r3, [r5, #16]
	delay_ms(100);
    60ee:	2064      	movs	r0, #100	; 0x64
    60f0:	47a0      	blx	r4
}
    60f2:	bd70      	pop	{r4, r5, r6, pc}
    60f4:	000062c5 	.word	0x000062c5
    60f8:	00005e89 	.word	0x00005e89
    60fc:	00005435 	.word	0x00005435
    6100:	0000206d 	.word	0x0000206d

00006104 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
    6104:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
    6106:	4b01      	ldr	r3, [pc, #4]	; (610c <_ZN9CDC_Class9IsEnabledEv+0x8>)
    6108:	4798      	blx	r3
}
    610a:	bd10      	pop	{r4, pc}
    610c:	00005485 	.word	0x00005485

00006110 <_GLOBAL__sub_I_ptrCDCClass>:
 CDC_Class	usb;
    6110:	b510      	push	{r4, lr}
    6112:	4902      	ldr	r1, [pc, #8]	; (611c <_GLOBAL__sub_I_ptrCDCClass+0xc>)
    6114:	2001      	movs	r0, #1
    6116:	4b02      	ldr	r3, [pc, #8]	; (6120 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    6118:	4798      	blx	r3
    611a:	bd10      	pop	{r4, pc}
    611c:	0000ffff 	.word	0x0000ffff
    6120:	00006099 	.word	0x00006099

00006124 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
    6124:	2000      	movs	r0, #0
    6126:	4770      	bx	lr

00006128 <_sbrk>:
	}

extern "C" void *_sbrk (ptrdiff_t)
	{
    return (void *)0;
	}
    6128:	2000      	movs	r0, #0
    612a:	4770      	bx	lr

0000612c <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
    612c:	4770      	bx	lr

0000612e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    612e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6130:	0005      	movs	r5, r0
  size_t n = 0;
    6132:	2400      	movs	r4, #0
  while (size--) {
    6134:	1e56      	subs	r6, r2, #1
    6136:	2a00      	cmp	r2, #0
    6138:	d00b      	beq.n	6152 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    613a:	682b      	ldr	r3, [r5, #0]
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	1c4f      	adds	r7, r1, #1
    6140:	7809      	ldrb	r1, [r1, #0]
    6142:	0028      	movs	r0, r5
    6144:	4798      	blx	r3
    6146:	2800      	cmp	r0, #0
    6148:	d003      	beq.n	6152 <_ZN5Print5writeEPKhj+0x24>
    614a:	3401      	adds	r4, #1
  while (size--) {
    614c:	0032      	movs	r2, r6
    if (write(*buffer++)) n++;
    614e:	0039      	movs	r1, r7
  while (size--) {
    6150:	e7f0      	b.n	6134 <_ZN5Print5writeEPKhj+0x6>
    else break;
  }
  return n;
}
    6152:	0020      	movs	r0, r4
    6154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006158 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    6158:	b570      	push	{r4, r5, r6, lr}
    615a:	0005      	movs	r5, r0
    615c:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
    615e:	d009      	beq.n	6174 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    6160:	0008      	movs	r0, r1
    6162:	4b05      	ldr	r3, [pc, #20]	; (6178 <_ZN5Print5printEPKc+0x20>)
    6164:	4798      	blx	r3
    6166:	0002      	movs	r2, r0
    6168:	682b      	ldr	r3, [r5, #0]
    616a:	685b      	ldr	r3, [r3, #4]
    616c:	0021      	movs	r1, r4
    616e:	0028      	movs	r0, r5
    6170:	4798      	blx	r3
  return write(str);
}
    6172:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
    6174:	2000      	movs	r0, #0
  return write(str);
    6176:	e7fc      	b.n	6172 <_ZN5Print5printEPKc+0x1a>
    6178:	0000b55d 	.word	0x0000b55d

0000617c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    617c:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
    617e:	6803      	ldr	r3, [r0, #0]
    6180:	685b      	ldr	r3, [r3, #4]
    6182:	2202      	movs	r2, #2
    6184:	4901      	ldr	r1, [pc, #4]	; (618c <_ZN5Print7printlnEv+0x10>)
    6186:	4798      	blx	r3
  return write("\r\n");
}
    6188:	bd10      	pop	{r4, pc}
    618a:	46c0      	nop			; (mov r8, r8)
    618c:	00010584 	.word	0x00010584

00006190 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    6190:	b570      	push	{r4, r5, r6, lr}
    6192:	0005      	movs	r5, r0
  size_t n = print(c);
    6194:	4b03      	ldr	r3, [pc, #12]	; (61a4 <_ZN5Print7printlnEPKc+0x14>)
    6196:	4798      	blx	r3
    6198:	0004      	movs	r4, r0
  n += println();
    619a:	0028      	movs	r0, r5
    619c:	4b02      	ldr	r3, [pc, #8]	; (61a8 <_ZN5Print7printlnEPKc+0x18>)
    619e:	4798      	blx	r3
    61a0:	1820      	adds	r0, r4, r0
  return n;
}
    61a2:	bd70      	pop	{r4, r5, r6, pc}
    61a4:	00006159 	.word	0x00006159
    61a8:	0000617d 	.word	0x0000617d

000061ac <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    61ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    61ae:	46ce      	mov	lr, r9
    61b0:	b500      	push	{lr}
    61b2:	b08c      	sub	sp, #48	; 0x30
    61b4:	4681      	mov	r9, r0
    61b6:	000d      	movs	r5, r1
    61b8:	0010      	movs	r0, r2
    61ba:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    61bc:	2100      	movs	r1, #0
    61be:	2320      	movs	r3, #32
    61c0:	aa03      	add	r2, sp, #12
    61c2:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    61c4:	2801      	cmp	r0, #1
    61c6:	dd01      	ble.n	61cc <_ZN5Print11printNumberEmh+0x20>
    61c8:	ae0b      	add	r6, sp, #44	; 0x2c
    61ca:	e007      	b.n	61dc <_ZN5Print11printNumberEmh+0x30>
    61cc:	230a      	movs	r3, #10
    61ce:	9301      	str	r3, [sp, #4]
    61d0:	e7fa      	b.n	61c8 <_ZN5Print11printNumberEmh+0x1c>

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    61d2:	3437      	adds	r4, #55	; 0x37
    61d4:	b2e4      	uxtb	r4, r4
    61d6:	7034      	strb	r4, [r6, #0]
  } while(n);
    61d8:	2d00      	cmp	r5, #0
    61da:	d012      	beq.n	6202 <_ZN5Print11printNumberEmh+0x56>
    char c = n % base;
    61dc:	9901      	ldr	r1, [sp, #4]
    61de:	0028      	movs	r0, r5
    61e0:	4b11      	ldr	r3, [pc, #68]	; (6228 <_ZN5Print11printNumberEmh+0x7c>)
    61e2:	4798      	blx	r3
    61e4:	000f      	movs	r7, r1
    61e6:	b2cc      	uxtb	r4, r1
    n /= base;
    61e8:	9901      	ldr	r1, [sp, #4]
    61ea:	0028      	movs	r0, r5
    61ec:	4b0f      	ldr	r3, [pc, #60]	; (622c <_ZN5Print11printNumberEmh+0x80>)
    61ee:	4798      	blx	r3
    61f0:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    61f2:	3e01      	subs	r6, #1
    61f4:	23ff      	movs	r3, #255	; 0xff
    61f6:	401f      	ands	r7, r3
    61f8:	2f09      	cmp	r7, #9
    61fa:	dcea      	bgt.n	61d2 <_ZN5Print11printNumberEmh+0x26>
    61fc:	3430      	adds	r4, #48	; 0x30
    61fe:	b2e4      	uxtb	r4, r4
    6200:	e7e9      	b.n	61d6 <_ZN5Print11printNumberEmh+0x2a>
      if (str == NULL) return 0;
    6202:	2e00      	cmp	r6, #0
    6204:	d00d      	beq.n	6222 <_ZN5Print11printNumberEmh+0x76>
      return write((const uint8_t *)str, strlen(str));
    6206:	0030      	movs	r0, r6
    6208:	4b09      	ldr	r3, [pc, #36]	; (6230 <_ZN5Print11printNumberEmh+0x84>)
    620a:	4798      	blx	r3
    620c:	0002      	movs	r2, r0
    620e:	464b      	mov	r3, r9
    6210:	681b      	ldr	r3, [r3, #0]
    6212:	685b      	ldr	r3, [r3, #4]
    6214:	0031      	movs	r1, r6
    6216:	4648      	mov	r0, r9
    6218:	4798      	blx	r3

  return write(str);
}
    621a:	b00c      	add	sp, #48	; 0x30
    621c:	bc04      	pop	{r2}
    621e:	4691      	mov	r9, r2
    6220:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
    6222:	2000      	movs	r0, #0
  return write(str);
    6224:	e7f9      	b.n	621a <_ZN5Print11printNumberEmh+0x6e>
    6226:	46c0      	nop			; (mov r8, r8)
    6228:	0000843d 	.word	0x0000843d
    622c:	00008331 	.word	0x00008331
    6230:	0000b55d 	.word	0x0000b55d

00006234 <_ZN5Print5printEmi>:
{
    6234:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    6236:	2a00      	cmp	r2, #0
    6238:	d003      	beq.n	6242 <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
    623a:	b2d2      	uxtb	r2, r2
    623c:	4b03      	ldr	r3, [pc, #12]	; (624c <_ZN5Print5printEmi+0x18>)
    623e:	4798      	blx	r3
}
    6240:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
    6242:	b2c9      	uxtb	r1, r1
    6244:	6803      	ldr	r3, [r0, #0]
    6246:	681b      	ldr	r3, [r3, #0]
    6248:	4798      	blx	r3
    624a:	e7f9      	b.n	6240 <_ZN5Print5printEmi+0xc>
    624c:	000061ad 	.word	0x000061ad

00006250 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
    6250:	4b03      	ldr	r3, [pc, #12]	; (6260 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
    6252:	2201      	movs	r2, #1
    6254:	6819      	ldr	r1, [r3, #0]
    6256:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->plugged=false;
    6258:	681b      	ldr	r3, [r3, #0]
    625a:	2200      	movs	r2, #0
    625c:	705a      	strb	r2, [r3, #1]
}
    625e:	4770      	bx	lr
    6260:	20001394 	.word	0x20001394

00006264 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    6264:	b510      	push	{r4, lr}
    6266:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    6268:	a801      	add	r0, sp, #4
    626a:	4b0e      	ldr	r3, [pc, #56]	; (62a4 <_ZL10USBPluggedv+0x40>)
    626c:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    626e:	23c0      	movs	r3, #192	; 0xc0
    6270:	05db      	lsls	r3, r3, #23
    6272:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6274:	4a0c      	ldr	r2, [pc, #48]	; (62a8 <_ZL10USBPluggedv+0x44>)
    6276:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6278:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    627a:	4053      	eors	r3, r2
    627c:	401c      	ands	r4, r3
    627e:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    6280:	a801      	add	r0, sp, #4
    6282:	4b0a      	ldr	r3, [pc, #40]	; (62ac <_ZL10USBPluggedv+0x48>)
    6284:	4798      	blx	r3
	if (gpio_get_pin_level(PIN_PA14))
    6286:	0463      	lsls	r3, r4, #17
    6288:	d407      	bmi.n	629a <_ZL10USBPluggedv+0x36>
	{
		ptrSerialTerminalClass->plugged=true;
	} 
	else
	{
		ptrSerialTerminalClass->plugged=false;
    628a:	4a09      	ldr	r2, [pc, #36]	; (62b0 <_ZL10USBPluggedv+0x4c>)
    628c:	2300      	movs	r3, #0
    628e:	6811      	ldr	r1, [r2, #0]
    6290:	704b      	strb	r3, [r1, #1]
		ptrSerialTerminalClass->connected=false;
    6292:	6812      	ldr	r2, [r2, #0]
    6294:	7013      	strb	r3, [r2, #0]
	}
	
}
    6296:	b002      	add	sp, #8
    6298:	bd10      	pop	{r4, pc}
		ptrSerialTerminalClass->plugged=true;
    629a:	4b05      	ldr	r3, [pc, #20]	; (62b0 <_ZL10USBPluggedv+0x4c>)
    629c:	681b      	ldr	r3, [r3, #0]
    629e:	2201      	movs	r2, #1
    62a0:	705a      	strb	r2, [r3, #1]
    62a2:	e7f8      	b.n	6296 <_ZL10USBPluggedv+0x32>
    62a4:	00001f19 	.word	0x00001f19
    62a8:	41004400 	.word	0x41004400
    62ac:	00001f27 	.word	0x00001f27
    62b0:	20001394 	.word	0x20001394

000062b4 <_ZN20SerialTerminal_ClassC1Ev>:


// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
    62b4:	4b01      	ldr	r3, [pc, #4]	; (62bc <_ZN20SerialTerminal_ClassC1Ev+0x8>)
    62b6:	6018      	str	r0, [r3, #0]
	
} //SerialTerminal_Class
    62b8:	4770      	bx	lr
    62ba:	46c0      	nop			; (mov r8, r8)
    62bc:	20001394 	.word	0x20001394

000062c0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
    62c0:	4770      	bx	lr
	...

000062c4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    62c4:	b530      	push	{r4, r5, lr}
    62c6:	b083      	sub	sp, #12
    62c8:	0005      	movs	r5, r0
		ext_irq_register(PIN_PA14, USBPlugged);
    62ca:	491e      	ldr	r1, [pc, #120]	; (6344 <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    62cc:	200e      	movs	r0, #14
    62ce:	4b1e      	ldr	r3, [pc, #120]	; (6348 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    62d0:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    62d2:	481e      	ldr	r0, [pc, #120]	; (634c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    62d4:	4b1e      	ldr	r3, [pc, #120]	; (6350 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    62d6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    62d8:	a801      	add	r0, sp, #4
    62da:	4b1e      	ldr	r3, [pc, #120]	; (6354 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    62dc:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    62de:	23c0      	movs	r3, #192	; 0xc0
    62e0:	05db      	lsls	r3, r3, #23
    62e2:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    62e4:	4a1c      	ldr	r2, [pc, #112]	; (6358 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    62e6:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    62e8:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    62ea:	4053      	eors	r3, r2
    62ec:	401c      	ands	r4, r3
    62ee:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    62f0:	a801      	add	r0, sp, #4
    62f2:	4b1a      	ldr	r3, [pc, #104]	; (635c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    62f4:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    62f6:	2380      	movs	r3, #128	; 0x80
    62f8:	01db      	lsls	r3, r3, #7
    62fa:	401c      	ands	r4, r3
    62fc:	1e63      	subs	r3, r4, #1
    62fe:	419c      	sbcs	r4, r3
    6300:	b2e4      	uxtb	r4, r4
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(PIN_PA14);
    6302:	70ec      	strb	r4, [r5, #3]
		if (vbusDetected)
    6304:	2c00      	cmp	r4, #0
    6306:	d104      	bne.n	6312 <_ZN20SerialTerminal_Class6OnInitEv+0x4e>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			connected=false;
    6308:	2300      	movs	r3, #0
    630a:	702b      	strb	r3, [r5, #0]
			plugged=false;
    630c:	706b      	strb	r3, [r5, #1]
		}
		
}
    630e:	b003      	add	sp, #12
    6310:	bd30      	pop	{r4, r5, pc}
			timeout=false;
    6312:	2300      	movs	r3, #0
    6314:	70ab      	strb	r3, [r5, #2]
			plugged=true;
    6316:	3301      	adds	r3, #1
    6318:	706b      	strb	r3, [r5, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    631a:	2296      	movs	r2, #150	; 0x96
    631c:	0092      	lsls	r2, r2, #2
    631e:	4910      	ldr	r1, [pc, #64]	; (6360 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    6320:	480a      	ldr	r0, [pc, #40]	; (634c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    6322:	4b10      	ldr	r3, [pc, #64]	; (6364 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    6324:	4798      	blx	r3
			while ((!usb.IsEnabled())){
    6326:	4810      	ldr	r0, [pc, #64]	; (6368 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    6328:	4b10      	ldr	r3, [pc, #64]	; (636c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    632a:	4798      	blx	r3
    632c:	2800      	cmp	r0, #0
    632e:	d105      	bne.n	633c <_ZN20SerialTerminal_Class6OnInitEv+0x78>
				if (timeout)
    6330:	78ab      	ldrb	r3, [r5, #2]
    6332:	2b00      	cmp	r3, #0
    6334:	d0f7      	beq.n	6326 <_ZN20SerialTerminal_Class6OnInitEv+0x62>
					connected=false;
    6336:	2300      	movs	r3, #0
    6338:	702b      	strb	r3, [r5, #0]
					return;
    633a:	e7e8      	b.n	630e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
			usbTerminalTimer.Stop();
    633c:	4803      	ldr	r0, [pc, #12]	; (634c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    633e:	4b0c      	ldr	r3, [pc, #48]	; (6370 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    6340:	4798      	blx	r3
    6342:	e7e4      	b.n	630e <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
    6344:	00006265 	.word	0x00006265
    6348:	00002105 	.word	0x00002105
    634c:	2000139c 	.word	0x2000139c
    6350:	000063ed 	.word	0x000063ed
    6354:	00001f19 	.word	0x00001f19
    6358:	41004400 	.word	0x41004400
    635c:	00001f27 	.word	0x00001f27
    6360:	00006251 	.word	0x00006251
    6364:	0000649d 	.word	0x0000649d
    6368:	20001334 	.word	0x20001334
    636c:	00006105 	.word	0x00006105
    6370:	0000640d 	.word	0x0000640d

00006374 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
    6374:	2300      	movs	r3, #0
    6376:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
    6378:	4770      	bx	lr
	...

0000637c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
    637c:	6101      	str	r1, [r0, #16]
	ptrTimerSerialClass=this;
    637e:	4b04      	ldr	r3, [pc, #16]	; (6390 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
    6380:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
    6382:	2380      	movs	r3, #128	; 0x80
    6384:	00db      	lsls	r3, r3, #3
    6386:	6183      	str	r3, [r0, #24]
	task->cb=task_cb;
    6388:	6883      	ldr	r3, [r0, #8]
    638a:	4a02      	ldr	r2, [pc, #8]	; (6394 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
    638c:	60da      	str	r2, [r3, #12]
} //Timer_Class
    638e:	4770      	bx	lr
    6390:	20001398 	.word	0x20001398
    6394:	00006429 	.word	0x00006429

00006398 <_Z41__static_initialization_and_destruction_0ii>:


}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    6398:	b510      	push	{r4, lr}
    639a:	2801      	cmp	r0, #1
    639c:	d000      	beq.n	63a0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    639e:	bd10      	pop	{r4, pc}
    63a0:	4b07      	ldr	r3, [pc, #28]	; (63c0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    63a2:	4299      	cmp	r1, r3
    63a4:	d1fb      	bne.n	639e <_Z41__static_initialization_and_destruction_0ii+0x6>
    63a6:	4c07      	ldr	r4, [pc, #28]	; (63c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    63a8:	3404      	adds	r4, #4
    63aa:	4907      	ldr	r1, [pc, #28]	; (63c8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    63ac:	0020      	movs	r0, r4
    63ae:	4b07      	ldr	r3, [pc, #28]	; (63cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    63b0:	4798      	blx	r3
    63b2:	4a07      	ldr	r2, [pc, #28]	; (63d0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    63b4:	4907      	ldr	r1, [pc, #28]	; (63d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    63b6:	0020      	movs	r0, r4
    63b8:	4b07      	ldr	r3, [pc, #28]	; (63d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    63ba:	4798      	blx	r3
    63bc:	e7ef      	b.n	639e <_Z41__static_initialization_and_destruction_0ii+0x6>
    63be:	46c0      	nop			; (mov r8, r8)
    63c0:	0000ffff 	.word	0x0000ffff
    63c4:	20001398 	.word	0x20001398
    63c8:	20001514 	.word	0x20001514
    63cc:	0000637d 	.word	0x0000637d
    63d0:	20000000 	.word	0x20000000
    63d4:	00006375 	.word	0x00006375
    63d8:	00006a25 	.word	0x00006a25

000063dc <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
    63dc:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
    63de:	6900      	ldr	r0, [r0, #16]
    63e0:	4b01      	ldr	r3, [pc, #4]	; (63e8 <_ZN17TimerSerial_Class5StartEv+0xc>)
    63e2:	4798      	blx	r3
}
    63e4:	bd10      	pop	{r4, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	000024bd 	.word	0x000024bd

000063ec <_ZN17TimerSerial_Class4InitEv>:
bool TimerSerial_Class::Init(void){
    63ec:	b510      	push	{r4, lr}
    63ee:	0004      	movs	r4, r0
	ticks=0;
    63f0:	2300      	movs	r3, #0
    63f2:	60c3      	str	r3, [r0, #12]
	isOK=Start()==0;
    63f4:	4b04      	ldr	r3, [pc, #16]	; (6408 <_ZN17TimerSerial_Class4InitEv+0x1c>)
    63f6:	4798      	blx	r3
    63f8:	4243      	negs	r3, r0
    63fa:	4158      	adcs	r0, r3
    63fc:	b2c0      	uxtb	r0, r0
    63fe:	70a0      	strb	r0, [r4, #2]
	return isOK;
    6400:	78a0      	ldrb	r0, [r4, #2]
    6402:	b2c0      	uxtb	r0, r0
}
    6404:	bd10      	pop	{r4, pc}
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	000063dd 	.word	0x000063dd

0000640c <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
    640c:	b510      	push	{r4, lr}
    640e:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
    6410:	6900      	ldr	r0, [r0, #16]
    6412:	4b02      	ldr	r3, [pc, #8]	; (641c <_ZN17TimerSerial_Class4StopEv+0x10>)
    6414:	4798      	blx	r3
	timeout=0;
    6416:	2300      	movs	r3, #0
    6418:	7063      	strb	r3, [r4, #1]
}
    641a:	bd10      	pop	{r4, pc}
    641c:	000024f9 	.word	0x000024f9

00006420 <_ZN17TimerSerial_Class10setTimeoutEv>:
	timeout=1;
    6420:	2301      	movs	r3, #1
    6422:	7043      	strb	r3, [r0, #1]
}
    6424:	4770      	bx	lr
	...

00006428 <_ZL7task_cbPK10timer_task>:
{
    6428:	b510      	push	{r4, lr}
	ptrTimerSerialClass->setTimeout();
    642a:	4b02      	ldr	r3, [pc, #8]	; (6434 <_ZL7task_cbPK10timer_task+0xc>)
    642c:	6818      	ldr	r0, [r3, #0]
    642e:	4b02      	ldr	r3, [pc, #8]	; (6438 <_ZL7task_cbPK10timer_task+0x10>)
    6430:	4798      	blx	r3
}
    6432:	bd10      	pop	{r4, pc}
    6434:	20001398 	.word	0x20001398
    6438:	00006421 	.word	0x00006421

0000643c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    643c:	b510      	push	{r4, lr}
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    643e:	2300      	movs	r3, #0
    6440:	2b03      	cmp	r3, #3
    6442:	dc0f      	bgt.n	6464 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x28>
			if (taskSerialArray[ii].cb==NULL)
    6444:	009a      	lsls	r2, r3, #2
    6446:	18d2      	adds	r2, r2, r3
    6448:	0091      	lsls	r1, r2, #2
    644a:	4a08      	ldr	r2, [pc, #32]	; (646c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    644c:	1852      	adds	r2, r2, r1
    644e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    6450:	2a00      	cmp	r2, #0
    6452:	d002      	beq.n	645a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x1e>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6454:	3301      	adds	r3, #1
    6456:	b2db      	uxtb	r3, r3
    6458:	e7f2      	b.n	6440 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4>
				task=&taskSerialArray[ii];
    645a:	4b04      	ldr	r3, [pc, #16]	; (646c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    645c:	3324      	adds	r3, #36	; 0x24
    645e:	185b      	adds	r3, r3, r1
    6460:	6083      	str	r3, [r0, #8]
			return;
    6462:	e002      	b.n	646a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x2e>
	task=&taskSerialArray[0];
    6464:	4b01      	ldr	r3, [pc, #4]	; (646c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    6466:	3324      	adds	r3, #36	; 0x24
    6468:	6083      	str	r3, [r0, #8]
}
    646a:	bd10      	pop	{r4, pc}
    646c:	20001398 	.word	0x20001398

00006470 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    6470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6472:	0004      	movs	r4, r0
    6474:	000e      	movs	r6, r1
    6476:	0017      	movs	r7, r2
    6478:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
    647a:	4b06      	ldr	r3, [pc, #24]	; (6494 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
    647c:	4798      	blx	r3
	task->interval = interval;
    647e:	68a3      	ldr	r3, [r4, #8]
    6480:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
    6482:	68a3      	ldr	r3, [r4, #8]
    6484:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
    6486:	68a3      	ldr	r3, [r4, #8]
    6488:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
    648a:	6920      	ldr	r0, [r4, #16]
    648c:	68a1      	ldr	r1, [r4, #8]
    648e:	4b02      	ldr	r3, [pc, #8]	; (6498 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
    6490:	4798      	blx	r3
}
    6492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6494:	0000643d 	.word	0x0000643d
    6498:	00002535 	.word	0x00002535

0000649c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    649c:	b570      	push	{r4, r5, r6, lr}
    649e:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    64a0:	2300      	movs	r3, #0
    64a2:	4d03      	ldr	r5, [pc, #12]	; (64b0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
    64a4:	47a8      	blx	r5
	status=timer_start(timer_descr);
    64a6:	6920      	ldr	r0, [r4, #16]
    64a8:	4b02      	ldr	r3, [pc, #8]	; (64b4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
    64aa:	4798      	blx	r3
}
    64ac:	bd70      	pop	{r4, r5, r6, pc}
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	00006471 	.word	0x00006471
    64b4:	000024bd 	.word	0x000024bd

000064b8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    64b8:	b530      	push	{r4, r5, lr}
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    64ba:	2300      	movs	r3, #0
    64bc:	2b03      	cmp	r3, #3
    64be:	dc0e      	bgt.n	64de <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x26>
		if (taskSerialArray[ii].cb==(timer_cb_t)func)
    64c0:	009a      	lsls	r2, r3, #2
    64c2:	18d2      	adds	r2, r2, r3
    64c4:	0094      	lsls	r4, r2, #2
    64c6:	4a06      	ldr	r2, [pc, #24]	; (64e0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    64c8:	1912      	adds	r2, r2, r4
    64ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
    64cc:	428a      	cmp	r2, r1
    64ce:	d002      	beq.n	64d6 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x1e>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    64d0:	3301      	adds	r3, #1
    64d2:	b2db      	uxtb	r3, r3
    64d4:	e7f2      	b.n	64bc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4>
			task=&taskSerialArray[ii];
    64d6:	4b02      	ldr	r3, [pc, #8]	; (64e0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    64d8:	3324      	adds	r3, #36	; 0x24
    64da:	191b      	adds	r3, r3, r4
    64dc:	6083      	str	r3, [r0, #8]
}
    64de:	bd30      	pop	{r4, r5, pc}
    64e0:	20001398 	.word	0x20001398

000064e4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    64e4:	b510      	push	{r4, lr}
    64e6:	0004      	movs	r4, r0
	GetTaskFunction(func);
    64e8:	4b08      	ldr	r3, [pc, #32]	; (650c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
    64ea:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
    64ec:	6920      	ldr	r0, [r4, #16]
    64ee:	3014      	adds	r0, #20
    64f0:	68a1      	ldr	r1, [r4, #8]
    64f2:	4b07      	ldr	r3, [pc, #28]	; (6510 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
    64f4:	4798      	blx	r3
    64f6:	2800      	cmp	r0, #0
    64f8:	d103      	bne.n	6502 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
    64fa:	68a3      	ldr	r3, [r4, #8]
    64fc:	2200      	movs	r2, #0
    64fe:	60da      	str	r2, [r3, #12]
}
    6500:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
    6502:	68a1      	ldr	r1, [r4, #8]
    6504:	6920      	ldr	r0, [r4, #16]
    6506:	4b03      	ldr	r3, [pc, #12]	; (6514 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
    6508:	4798      	blx	r3
    650a:	e7f6      	b.n	64fa <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
    650c:	000064b9 	.word	0x000064b9
    6510:	00002e75 	.word	0x00002e75
    6514:	000025e5 	.word	0x000025e5

00006518 <_GLOBAL__sub_I_ptrTimerSerialClass>:
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    6518:	b510      	push	{r4, lr}
    651a:	4902      	ldr	r1, [pc, #8]	; (6524 <_GLOBAL__sub_I_ptrTimerSerialClass+0xc>)
    651c:	2001      	movs	r0, #1
    651e:	4b02      	ldr	r3, [pc, #8]	; (6528 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    6520:	4798      	blx	r3
    6522:	bd10      	pop	{r4, pc}
    6524:	0000ffff 	.word	0x0000ffff
    6528:	00006399 	.word	0x00006399

0000652c <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    652c:	b580      	push	{r7, lr}
    652e:	b084      	sub	sp, #16
    6530:	af00      	add	r7, sp, #0
    6532:	60f8      	str	r0, [r7, #12]
    6534:	607a      	str	r2, [r7, #4]
    6536:	230b      	movs	r3, #11
    6538:	18fb      	adds	r3, r7, r3
    653a:	1c0a      	adds	r2, r1, #0
    653c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    653e:	230b      	movs	r3, #11
    6540:	18fb      	adds	r3, r7, r3
    6542:	781b      	ldrb	r3, [r3, #0]
    6544:	68fa      	ldr	r2, [r7, #12]
    6546:	01db      	lsls	r3, r3, #7
    6548:	18d3      	adds	r3, r2, r3
    654a:	331c      	adds	r3, #28
    654c:	687a      	ldr	r2, [r7, #4]
    654e:	601a      	str	r2, [r3, #0]
}
    6550:	46c0      	nop			; (mov r8, r8)
    6552:	46bd      	mov	sp, r7
    6554:	b004      	add	sp, #16
    6556:	bd80      	pop	{r7, pc}

00006558 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    6558:	b580      	push	{r7, lr}
    655a:	b082      	sub	sp, #8
    655c:	af00      	add	r7, sp, #0
    655e:	0002      	movs	r2, r0
    6560:	6039      	str	r1, [r7, #0]
    6562:	1dfb      	adds	r3, r7, #7
    6564:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
    6566:	683a      	ldr	r2, [r7, #0]
    6568:	1dfb      	adds	r3, r7, #7
    656a:	7819      	ldrb	r1, [r3, #0]
    656c:	23c0      	movs	r3, #192	; 0xc0
    656e:	05db      	lsls	r3, r3, #23
    6570:	0018      	movs	r0, r3
    6572:	4b03      	ldr	r3, [pc, #12]	; (6580 <_gpio_toggle_level+0x28>)
    6574:	4798      	blx	r3
}
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	46bd      	mov	sp, r7
    657a:	b002      	add	sp, #8
    657c:	bd80      	pop	{r7, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	0000652d 	.word	0x0000652d

00006584 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    6584:	b580      	push	{r7, lr}
    6586:	b082      	sub	sp, #8
    6588:	af00      	add	r7, sp, #0
    658a:	0002      	movs	r2, r0
    658c:	1dfb      	adds	r3, r7, #7
    658e:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    6590:	1dfb      	adds	r3, r7, #7
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	115b      	asrs	r3, r3, #5
    6596:	b2d8      	uxtb	r0, r3
    6598:	1dfb      	adds	r3, r7, #7
    659a:	781b      	ldrb	r3, [r3, #0]
    659c:	001a      	movs	r2, r3
    659e:	231f      	movs	r3, #31
    65a0:	4013      	ands	r3, r2
    65a2:	2201      	movs	r2, #1
    65a4:	409a      	lsls	r2, r3
    65a6:	0013      	movs	r3, r2
    65a8:	0019      	movs	r1, r3
    65aa:	4b03      	ldr	r3, [pc, #12]	; (65b8 <gpio_toggle_pin_level+0x34>)
    65ac:	4798      	blx	r3
}
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	46bd      	mov	sp, r7
    65b2:	b002      	add	sp, #8
    65b4:	bd80      	pop	{r7, pc}
    65b6:	46c0      	nop			; (mov r8, r8)
    65b8:	00006559 	.word	0x00006559

000065bc <_ZN11ZCD_HandlerC1Ev>:
#include "CDC_Class.h"

static SPI_Syn_ZCD_Class local_spi;

// default constructor
ZCD_Handler::ZCD_Handler()
    65bc:	b580      	push	{r7, lr}
    65be:	b082      	sub	sp, #8
    65c0:	af00      	add	r7, sp, #0
    65c2:	6078      	str	r0, [r7, #4]
{
	spi=&local_spi;
    65c4:	687b      	ldr	r3, [r7, #4]
    65c6:	4a05      	ldr	r2, [pc, #20]	; (65dc <_ZN11ZCD_HandlerC1Ev+0x20>)
    65c8:	605a      	str	r2, [r3, #4]
	tone=0;
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	2200      	movs	r2, #0
    65ce:	601a      	str	r2, [r3, #0]
} //ZCD_Handler
    65d0:	687b      	ldr	r3, [r7, #4]
    65d2:	0018      	movs	r0, r3
    65d4:	46bd      	mov	sp, r7
    65d6:	b002      	add	sp, #8
    65d8:	bd80      	pop	{r7, pc}
    65da:	46c0      	nop			; (mov r8, r8)
    65dc:	2000140c 	.word	0x2000140c

000065e0 <_ZN11ZCD_HandlerD1Ev>:

// default destructor
ZCD_Handler::~ZCD_Handler()
    65e0:	b580      	push	{r7, lr}
    65e2:	b082      	sub	sp, #8
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
{
} //~ZCD_Handler
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	0018      	movs	r0, r3
    65ec:	46bd      	mov	sp, r7
    65ee:	b002      	add	sp, #8
    65f0:	bd80      	pop	{r7, pc}
	...

000065f4 <_ZN11ZCD_Handler4InitEv>:

bool ZCD_Handler::Init(){
    65f4:	b580      	push	{r7, lr}
    65f6:	b082      	sub	sp, #8
    65f8:	af00      	add	r7, sp, #0
    65fa:	6078      	str	r0, [r7, #4]
	spi->Init();
    65fc:	687b      	ldr	r3, [r7, #4]
    65fe:	685b      	ldr	r3, [r3, #4]
    6600:	0018      	movs	r0, r3
    6602:	4b03      	ldr	r3, [pc, #12]	; (6610 <_ZN11ZCD_Handler4InitEv+0x1c>)
    6604:	4798      	blx	r3
	return true;
    6606:	2301      	movs	r3, #1
}
    6608:	0018      	movs	r0, r3
    660a:	46bd      	mov	sp, r7
    660c:	b002      	add	sp, #8
    660e:	bd80      	pop	{r7, pc}
    6610:	0000692d 	.word	0x0000692d

00006614 <_ZN11ZCD_Handler8Get_ToneEv>:

uint32_t ZCD_Handler::Get_Tone(){
    6614:	b580      	push	{r7, lr}
    6616:	b084      	sub	sp, #16
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
	command=0x01;
    661c:	687b      	ldr	r3, [r7, #4]
    661e:	2201      	movs	r2, #1
    6620:	721a      	strb	r2, [r3, #8]
	spi->SetCS(false);
    6622:	687b      	ldr	r3, [r7, #4]
    6624:	685b      	ldr	r3, [r3, #4]
    6626:	2100      	movs	r1, #0
    6628:	0018      	movs	r0, r3
    662a:	4b38      	ldr	r3, [pc, #224]	; (670c <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
    662c:	4798      	blx	r3
	spi->Write(&command,1);
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	6858      	ldr	r0, [r3, #4]
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	3308      	adds	r3, #8
    6636:	2201      	movs	r2, #1
    6638:	0019      	movs	r1, r3
    663a:	4b35      	ldr	r3, [pc, #212]	; (6710 <_ZN11ZCD_Handler8Get_ToneEv+0xfc>)
    663c:	4798      	blx	r3
	spi->SetCS(true);
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	685b      	ldr	r3, [r3, #4]
    6642:	2101      	movs	r1, #1
    6644:	0018      	movs	r0, r3
    6646:	4b31      	ldr	r3, [pc, #196]	; (670c <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
    6648:	4798      	blx	r3
	delay_ms(100);
    664a:	2064      	movs	r0, #100	; 0x64
    664c:	4b31      	ldr	r3, [pc, #196]	; (6714 <_ZN11ZCD_Handler8Get_ToneEv+0x100>)
    664e:	4798      	blx	r3
	spi->SetCS(false);
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	685b      	ldr	r3, [r3, #4]
    6654:	2100      	movs	r1, #0
    6656:	0018      	movs	r0, r3
    6658:	4b2c      	ldr	r3, [pc, #176]	; (670c <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
    665a:	4798      	blx	r3
	spi->Read(read_buffer,4);
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	6858      	ldr	r0, [r3, #4]
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	3309      	adds	r3, #9
    6664:	2204      	movs	r2, #4
    6666:	0019      	movs	r1, r3
    6668:	4b2b      	ldr	r3, [pc, #172]	; (6718 <_ZN11ZCD_Handler8Get_ToneEv+0x104>)
    666a:	4798      	blx	r3
	spi->SetCS(true);
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	685b      	ldr	r3, [r3, #4]
    6670:	2101      	movs	r1, #1
    6672:	0018      	movs	r0, r3
    6674:	4b25      	ldr	r3, [pc, #148]	; (670c <_ZN11ZCD_Handler8Get_ToneEv+0xf8>)
    6676:	4798      	blx	r3
	last_tone=tone;
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	681a      	ldr	r2, [r3, #0]
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	611a      	str	r2, [r3, #16]
	tone=0;
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	2200      	movs	r2, #0
    6684:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
    6686:	2300      	movs	r3, #0
    6688:	60fb      	str	r3, [r7, #12]
    668a:	68fb      	ldr	r3, [r7, #12]
    668c:	2b03      	cmp	r3, #3
    668e:	dc14      	bgt.n	66ba <_ZN11ZCD_Handler8Get_ToneEv+0xa6>
	{
		tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
    6690:	687b      	ldr	r3, [r7, #4]
    6692:	681b      	ldr	r3, [r3, #0]
    6694:	6879      	ldr	r1, [r7, #4]
    6696:	68fa      	ldr	r2, [r7, #12]
    6698:	188a      	adds	r2, r1, r2
    669a:	3209      	adds	r2, #9
    669c:	7812      	ldrb	r2, [r2, #0]
    669e:	0010      	movs	r0, r2
    66a0:	68fa      	ldr	r2, [r7, #12]
    66a2:	2103      	movs	r1, #3
    66a4:	1a8a      	subs	r2, r1, r2
    66a6:	00d2      	lsls	r2, r2, #3
    66a8:	4090      	lsls	r0, r2
    66aa:	0002      	movs	r2, r0
    66ac:	431a      	orrs	r2, r3
    66ae:	687b      	ldr	r3, [r7, #4]
    66b0:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
    66b2:	68fb      	ldr	r3, [r7, #12]
    66b4:	3301      	adds	r3, #1
    66b6:	60fb      	str	r3, [r7, #12]
    66b8:	e7e7      	b.n	668a <_ZN11ZCD_Handler8Get_ToneEv+0x76>
	}
	if (tone>0)
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	681b      	ldr	r3, [r3, #0]
    66be:	2b00      	cmp	r3, #0
    66c0:	d01a      	beq.n	66f8 <_ZN11ZCD_Handler8Get_ToneEv+0xe4>
	{
	
		if (tone<0xffffff)
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	681b      	ldr	r3, [r3, #0]
    66c6:	4a15      	ldr	r2, [pc, #84]	; (671c <_ZN11ZCD_Handler8Get_ToneEv+0x108>)
    66c8:	4293      	cmp	r3, r2
    66ca:	d819      	bhi.n	6700 <_ZN11ZCD_Handler8Get_ToneEv+0xec>
		{
			gpio_toggle_pin_level(LED0);
    66cc:	203e      	movs	r0, #62	; 0x3e
    66ce:	4b14      	ldr	r3, [pc, #80]	; (6720 <_ZN11ZCD_Handler8Get_ToneEv+0x10c>)
    66d0:	4798      	blx	r3
			usb<<"tone: "<<tone<<NEWLINE;
    66d2:	4a14      	ldr	r2, [pc, #80]	; (6724 <_ZN11ZCD_Handler8Get_ToneEv+0x110>)
    66d4:	4b14      	ldr	r3, [pc, #80]	; (6728 <_ZN11ZCD_Handler8Get_ToneEv+0x114>)
    66d6:	0011      	movs	r1, r2
    66d8:	0018      	movs	r0, r3
    66da:	4b14      	ldr	r3, [pc, #80]	; (672c <_ZN11ZCD_Handler8Get_ToneEv+0x118>)
    66dc:	4798      	blx	r3
    66de:	0002      	movs	r2, r0
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	0019      	movs	r1, r3
    66e4:	0010      	movs	r0, r2
    66e6:	4b12      	ldr	r3, [pc, #72]	; (6730 <_ZN11ZCD_Handler8Get_ToneEv+0x11c>)
    66e8:	4798      	blx	r3
    66ea:	0002      	movs	r2, r0
    66ec:	4b11      	ldr	r3, [pc, #68]	; (6734 <_ZN11ZCD_Handler8Get_ToneEv+0x120>)
    66ee:	0019      	movs	r1, r3
    66f0:	0010      	movs	r0, r2
    66f2:	4b11      	ldr	r3, [pc, #68]	; (6738 <_ZN11ZCD_Handler8Get_ToneEv+0x124>)
    66f4:	4798      	blx	r3
    66f6:	e003      	b.n	6700 <_ZN11ZCD_Handler8Get_ToneEv+0xec>
		}
		
	} 
	else
	{
		tone=last_tone;
    66f8:	687b      	ldr	r3, [r7, #4]
    66fa:	691a      	ldr	r2, [r3, #16]
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	601a      	str	r2, [r3, #0]
	}
	return tone;
    6700:	687b      	ldr	r3, [r7, #4]
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	0018      	movs	r0, r3
    6706:	46bd      	mov	sp, r7
    6708:	b004      	add	sp, #16
    670a:	bd80      	pop	{r7, pc}
    670c:	000069fd 	.word	0x000069fd
    6710:	0000698d 	.word	0x0000698d
    6714:	0000206d 	.word	0x0000206d
    6718:	000069c5 	.word	0x000069c5
    671c:	00fffffe 	.word	0x00fffffe
    6720:	00006585 	.word	0x00006585
    6724:	00010594 	.word	0x00010594
    6728:	20001334 	.word	0x20001334
    672c:	0000673d 	.word	0x0000673d
    6730:	00006761 	.word	0x00006761
    6734:	0001059c 	.word	0x0001059c
    6738:	00006789 	.word	0x00006789

0000673c <_ZlsIA7_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
    673c:	b580      	push	{r7, lr}
    673e:	b082      	sub	sp, #8
    6740:	af00      	add	r7, sp, #0
    6742:	6078      	str	r0, [r7, #4]
    6744:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    6746:	683a      	ldr	r2, [r7, #0]
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	0011      	movs	r1, r2
    674c:	0018      	movs	r0, r3
    674e:	4b03      	ldr	r3, [pc, #12]	; (675c <_ZlsIA7_cER5PrintS2_RKT_+0x20>)
    6750:	4798      	blx	r3
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	0018      	movs	r0, r3
    6756:	46bd      	mov	sp, r7
    6758:	b002      	add	sp, #8
    675a:	bd80      	pop	{r7, pc}
    675c:	00006159 	.word	0x00006159

00006760 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    6760:	b580      	push	{r7, lr}
    6762:	b082      	sub	sp, #8
    6764:	af00      	add	r7, sp, #0
    6766:	6078      	str	r0, [r7, #4]
    6768:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    676a:	683b      	ldr	r3, [r7, #0]
    676c:	6819      	ldr	r1, [r3, #0]
    676e:	687b      	ldr	r3, [r7, #4]
    6770:	220a      	movs	r2, #10
    6772:	0018      	movs	r0, r3
    6774:	4b03      	ldr	r3, [pc, #12]	; (6784 <_ZlsImER5PrintS1_RKT_+0x24>)
    6776:	4798      	blx	r3
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	0018      	movs	r0, r3
    677c:	46bd      	mov	sp, r7
    677e:	b002      	add	sp, #8
    6780:	bd80      	pop	{r7, pc}
    6782:	46c0      	nop			; (mov r8, r8)
    6784:	00006235 	.word	0x00006235

00006788 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    6788:	b580      	push	{r7, lr}
    678a:	b082      	sub	sp, #8
    678c:	af00      	add	r7, sp, #0
    678e:	6078      	str	r0, [r7, #4]
    6790:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    6792:	683a      	ldr	r2, [r7, #0]
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	0011      	movs	r1, r2
    6798:	0018      	movs	r0, r3
    679a:	4b03      	ldr	r3, [pc, #12]	; (67a8 <_ZlsIA3_cER5PrintS2_RKT_+0x20>)
    679c:	4798      	blx	r3
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	0018      	movs	r0, r3
    67a2:	46bd      	mov	sp, r7
    67a4:	b002      	add	sp, #8
    67a6:	bd80      	pop	{r7, pc}
    67a8:	00006159 	.word	0x00006159

000067ac <_Z41__static_initialization_and_destruction_0ii>:
    67ac:	b580      	push	{r7, lr}
    67ae:	b082      	sub	sp, #8
    67b0:	af00      	add	r7, sp, #0
    67b2:	6078      	str	r0, [r7, #4]
    67b4:	6039      	str	r1, [r7, #0]
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	2b01      	cmp	r3, #1
    67ba:	d10d      	bne.n	67d8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    67bc:	683b      	ldr	r3, [r7, #0]
    67be:	4a08      	ldr	r2, [pc, #32]	; (67e0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    67c0:	4293      	cmp	r3, r2
    67c2:	d109      	bne.n	67d8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static SPI_Syn_ZCD_Class local_spi;
    67c4:	4b07      	ldr	r3, [pc, #28]	; (67e4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    67c6:	0018      	movs	r0, r3
    67c8:	4b07      	ldr	r3, [pc, #28]	; (67e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    67ca:	4798      	blx	r3
    67cc:	4a07      	ldr	r2, [pc, #28]	; (67ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    67ce:	4908      	ldr	r1, [pc, #32]	; (67f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    67d0:	4b04      	ldr	r3, [pc, #16]	; (67e4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    67d2:	0018      	movs	r0, r3
    67d4:	4b07      	ldr	r3, [pc, #28]	; (67f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    67d6:	4798      	blx	r3
    67d8:	46c0      	nop			; (mov r8, r8)
    67da:	46bd      	mov	sp, r7
    67dc:	b002      	add	sp, #8
    67de:	bd80      	pop	{r7, pc}
    67e0:	0000ffff 	.word	0x0000ffff
    67e4:	2000140c 	.word	0x2000140c
    67e8:	000068fd 	.word	0x000068fd
    67ec:	20000000 	.word	0x20000000
    67f0:	00006919 	.word	0x00006919
    67f4:	00006a25 	.word	0x00006a25

000067f8 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev>:
    67f8:	b580      	push	{r7, lr}
    67fa:	af00      	add	r7, sp, #0
    67fc:	4b03      	ldr	r3, [pc, #12]	; (680c <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x14>)
    67fe:	0019      	movs	r1, r3
    6800:	2001      	movs	r0, #1
    6802:	4b03      	ldr	r3, [pc, #12]	; (6810 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x18>)
    6804:	4798      	blx	r3
    6806:	46bd      	mov	sp, r7
    6808:	bd80      	pop	{r7, pc}
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	0000ffff 	.word	0x0000ffff
    6810:	000067ad 	.word	0x000067ad

00006814 <hri_port_set_OUT_reg>:
{
    6814:	b580      	push	{r7, lr}
    6816:	b084      	sub	sp, #16
    6818:	af00      	add	r7, sp, #0
    681a:	60f8      	str	r0, [r7, #12]
    681c:	607a      	str	r2, [r7, #4]
    681e:	230b      	movs	r3, #11
    6820:	18fb      	adds	r3, r7, r3
    6822:	1c0a      	adds	r2, r1, #0
    6824:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6826:	230b      	movs	r3, #11
    6828:	18fb      	adds	r3, r7, r3
    682a:	781b      	ldrb	r3, [r3, #0]
    682c:	68fa      	ldr	r2, [r7, #12]
    682e:	01db      	lsls	r3, r3, #7
    6830:	18d3      	adds	r3, r2, r3
    6832:	3318      	adds	r3, #24
    6834:	687a      	ldr	r2, [r7, #4]
    6836:	601a      	str	r2, [r3, #0]
}
    6838:	46c0      	nop			; (mov r8, r8)
    683a:	46bd      	mov	sp, r7
    683c:	b004      	add	sp, #16
    683e:	bd80      	pop	{r7, pc}

00006840 <hri_port_clear_OUT_reg>:
{
    6840:	b580      	push	{r7, lr}
    6842:	b084      	sub	sp, #16
    6844:	af00      	add	r7, sp, #0
    6846:	60f8      	str	r0, [r7, #12]
    6848:	607a      	str	r2, [r7, #4]
    684a:	230b      	movs	r3, #11
    684c:	18fb      	adds	r3, r7, r3
    684e:	1c0a      	adds	r2, r1, #0
    6850:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6852:	230b      	movs	r3, #11
    6854:	18fb      	adds	r3, r7, r3
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	68fa      	ldr	r2, [r7, #12]
    685a:	01db      	lsls	r3, r3, #7
    685c:	18d3      	adds	r3, r2, r3
    685e:	3314      	adds	r3, #20
    6860:	687a      	ldr	r2, [r7, #4]
    6862:	601a      	str	r2, [r3, #0]
}
    6864:	46c0      	nop			; (mov r8, r8)
    6866:	46bd      	mov	sp, r7
    6868:	b004      	add	sp, #16
    686a:	bd80      	pop	{r7, pc}

0000686c <_gpio_set_level>:
{
    686c:	b580      	push	{r7, lr}
    686e:	b082      	sub	sp, #8
    6870:	af00      	add	r7, sp, #0
    6872:	6039      	str	r1, [r7, #0]
    6874:	0011      	movs	r1, r2
    6876:	1dfb      	adds	r3, r7, #7
    6878:	1c02      	adds	r2, r0, #0
    687a:	701a      	strb	r2, [r3, #0]
    687c:	1dbb      	adds	r3, r7, #6
    687e:	1c0a      	adds	r2, r1, #0
    6880:	701a      	strb	r2, [r3, #0]
	if (level) {
    6882:	1dbb      	adds	r3, r7, #6
    6884:	781b      	ldrb	r3, [r3, #0]
    6886:	2b00      	cmp	r3, #0
    6888:	d008      	beq.n	689c <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    688a:	683a      	ldr	r2, [r7, #0]
    688c:	1dfb      	adds	r3, r7, #7
    688e:	7819      	ldrb	r1, [r3, #0]
    6890:	23c0      	movs	r3, #192	; 0xc0
    6892:	05db      	lsls	r3, r3, #23
    6894:	0018      	movs	r0, r3
    6896:	4b07      	ldr	r3, [pc, #28]	; (68b4 <_gpio_set_level+0x48>)
    6898:	4798      	blx	r3
}
    689a:	e007      	b.n	68ac <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    689c:	683a      	ldr	r2, [r7, #0]
    689e:	1dfb      	adds	r3, r7, #7
    68a0:	7819      	ldrb	r1, [r3, #0]
    68a2:	23c0      	movs	r3, #192	; 0xc0
    68a4:	05db      	lsls	r3, r3, #23
    68a6:	0018      	movs	r0, r3
    68a8:	4b03      	ldr	r3, [pc, #12]	; (68b8 <_gpio_set_level+0x4c>)
    68aa:	4798      	blx	r3
}
    68ac:	46c0      	nop			; (mov r8, r8)
    68ae:	46bd      	mov	sp, r7
    68b0:	b002      	add	sp, #8
    68b2:	bd80      	pop	{r7, pc}
    68b4:	00006815 	.word	0x00006815
    68b8:	00006841 	.word	0x00006841

000068bc <gpio_set_pin_level>:
{
    68bc:	b580      	push	{r7, lr}
    68be:	b082      	sub	sp, #8
    68c0:	af00      	add	r7, sp, #0
    68c2:	0002      	movs	r2, r0
    68c4:	1dfb      	adds	r3, r7, #7
    68c6:	701a      	strb	r2, [r3, #0]
    68c8:	1dbb      	adds	r3, r7, #6
    68ca:	1c0a      	adds	r2, r1, #0
    68cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    68ce:	1dfb      	adds	r3, r7, #7
    68d0:	781b      	ldrb	r3, [r3, #0]
    68d2:	115b      	asrs	r3, r3, #5
    68d4:	b2d8      	uxtb	r0, r3
    68d6:	1dfb      	adds	r3, r7, #7
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	001a      	movs	r2, r3
    68dc:	231f      	movs	r3, #31
    68de:	4013      	ands	r3, r2
    68e0:	2201      	movs	r2, #1
    68e2:	409a      	lsls	r2, r3
    68e4:	0011      	movs	r1, r2
    68e6:	1dbb      	adds	r3, r7, #6
    68e8:	781b      	ldrb	r3, [r3, #0]
    68ea:	001a      	movs	r2, r3
    68ec:	4b02      	ldr	r3, [pc, #8]	; (68f8 <gpio_set_pin_level+0x3c>)
    68ee:	4798      	blx	r3
}
    68f0:	46c0      	nop			; (mov r8, r8)
    68f2:	46bd      	mov	sp, r7
    68f4:	b002      	add	sp, #8
    68f6:	bd80      	pop	{r7, pc}
    68f8:	0000686d 	.word	0x0000686d

000068fc <_ZN17SPI_Syn_ZCD_ClassC1Ev>:
SPI_Syn_ZCD_Class	*ptrSPISyncZCD;



// default constructor
SPI_Syn_ZCD_Class::SPI_Syn_ZCD_Class()
    68fc:	b580      	push	{r7, lr}
    68fe:	b082      	sub	sp, #8
    6900:	af00      	add	r7, sp, #0
    6902:	6078      	str	r0, [r7, #4]
{
		ptrSPISyncZCD=this;
    6904:	4b03      	ldr	r3, [pc, #12]	; (6914 <_ZN17SPI_Syn_ZCD_ClassC1Ev+0x18>)
    6906:	687a      	ldr	r2, [r7, #4]
    6908:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    690a:	687b      	ldr	r3, [r7, #4]
    690c:	0018      	movs	r0, r3
    690e:	46bd      	mov	sp, r7
    6910:	b002      	add	sp, #8
    6912:	bd80      	pop	{r7, pc}
    6914:	2000141c 	.word	0x2000141c

00006918 <_ZN17SPI_Syn_ZCD_ClassD1Ev>:



// default destructor
SPI_Syn_ZCD_Class::~SPI_Syn_ZCD_Class()
    6918:	b580      	push	{r7, lr}
    691a:	b082      	sub	sp, #8
    691c:	af00      	add	r7, sp, #0
    691e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	0018      	movs	r0, r3
    6924:	46bd      	mov	sp, r7
    6926:	b002      	add	sp, #8
    6928:	bd80      	pop	{r7, pc}
	...

0000692c <_ZN17SPI_Syn_ZCD_Class4InitEv>:

void SPI_Syn_ZCD_Class::Init(){
    692c:	b580      	push	{r7, lr}
    692e:	b082      	sub	sp, #8
    6930:	af00      	add	r7, sp, #0
    6932:	6078      	str	r0, [r7, #4]

		spi_m_sync_get_io_descriptor(&SPI_ZCD, &io);
    6934:	687b      	ldr	r3, [r7, #4]
    6936:	330c      	adds	r3, #12
    6938:	001a      	movs	r2, r3
    693a:	4b08      	ldr	r3, [pc, #32]	; (695c <_ZN17SPI_Syn_ZCD_Class4InitEv+0x30>)
    693c:	0011      	movs	r1, r2
    693e:	0018      	movs	r0, r3
    6940:	4b07      	ldr	r3, [pc, #28]	; (6960 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x34>)
    6942:	4798      	blx	r3

	Enable();
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	0018      	movs	r0, r3
    6948:	4b06      	ldr	r3, [pc, #24]	; (6964 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x38>)
    694a:	4798      	blx	r3
	ready=true;
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	2201      	movs	r2, #1
    6950:	701a      	strb	r2, [r3, #0]
	
}
    6952:	46c0      	nop			; (mov r8, r8)
    6954:	46bd      	mov	sp, r7
    6956:	b002      	add	sp, #8
    6958:	bd80      	pop	{r7, pc}
    695a:	46c0      	nop			; (mov r8, r8)
    695c:	200014fc 	.word	0x200014fc
    6960:	0000238d 	.word	0x0000238d
    6964:	00006969 	.word	0x00006969

00006968 <_ZN17SPI_Syn_ZCD_Class6EnableEv>:



uint8_t SPI_Syn_ZCD_Class::Enable(){
    6968:	b580      	push	{r7, lr}
    696a:	b082      	sub	sp, #8
    696c:	af00      	add	r7, sp, #0
    696e:	6078      	str	r0, [r7, #4]
	
	spi_m_sync_enable(&SPI_ZCD);
    6970:	4b04      	ldr	r3, [pc, #16]	; (6984 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x1c>)
    6972:	0018      	movs	r0, r3
    6974:	4b04      	ldr	r3, [pc, #16]	; (6988 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x20>)
    6976:	4798      	blx	r3
	return 0;
    6978:	2300      	movs	r3, #0
}
    697a:	0018      	movs	r0, r3
    697c:	46bd      	mov	sp, r7
    697e:	b002      	add	sp, #8
    6980:	bd80      	pop	{r7, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	200014fc 	.word	0x200014fc
    6988:	000022a5 	.word	0x000022a5

0000698c <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh>:

uint8_t  SPI_Syn_ZCD_Class::Write(const uint8_t * p, uint8_t n){
    698c:	b580      	push	{r7, lr}
    698e:	b084      	sub	sp, #16
    6990:	af00      	add	r7, sp, #0
    6992:	60f8      	str	r0, [r7, #12]
    6994:	60b9      	str	r1, [r7, #8]
    6996:	1dfb      	adds	r3, r7, #7
    6998:	701a      	strb	r2, [r3, #0]
	ready=false;
    699a:	68fb      	ldr	r3, [r7, #12]
    699c:	2200      	movs	r2, #0
    699e:	701a      	strb	r2, [r3, #0]
	io_write(io, p, (uint16_t)n);
    69a0:	68fb      	ldr	r3, [r7, #12]
    69a2:	68d8      	ldr	r0, [r3, #12]
    69a4:	1dfb      	adds	r3, r7, #7
    69a6:	781b      	ldrb	r3, [r3, #0]
    69a8:	b29a      	uxth	r2, r3
    69aa:	68bb      	ldr	r3, [r7, #8]
    69ac:	0019      	movs	r1, r3
    69ae:	4b04      	ldr	r3, [pc, #16]	; (69c0 <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh+0x34>)
    69b0:	4798      	blx	r3

	return n;
    69b2:	1dfb      	adds	r3, r7, #7
    69b4:	781b      	ldrb	r3, [r3, #0]
}
    69b6:	0018      	movs	r0, r3
    69b8:	46bd      	mov	sp, r7
    69ba:	b004      	add	sp, #16
    69bc:	bd80      	pop	{r7, pc}
    69be:	46c0      	nop			; (mov r8, r8)
    69c0:	000021dd 	.word	0x000021dd

000069c4 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh>:
uint8_t  SPI_Syn_ZCD_Class::Read(uint8_t * p, uint8_t n){
    69c4:	b580      	push	{r7, lr}
    69c6:	b084      	sub	sp, #16
    69c8:	af00      	add	r7, sp, #0
    69ca:	60f8      	str	r0, [r7, #12]
    69cc:	60b9      	str	r1, [r7, #8]
    69ce:	1dfb      	adds	r3, r7, #7
    69d0:	701a      	strb	r2, [r3, #0]
	ready=false;
    69d2:	68fb      	ldr	r3, [r7, #12]
    69d4:	2200      	movs	r2, #0
    69d6:	701a      	strb	r2, [r3, #0]
		io_read(io, p, (uint16_t)n);
    69d8:	68fb      	ldr	r3, [r7, #12]
    69da:	68d8      	ldr	r0, [r3, #12]
    69dc:	1dfb      	adds	r3, r7, #7
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	b29a      	uxth	r2, r3
    69e2:	68bb      	ldr	r3, [r7, #8]
    69e4:	0019      	movs	r1, r3
    69e6:	4b04      	ldr	r3, [pc, #16]	; (69f8 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh+0x34>)
    69e8:	4798      	blx	r3

	
	return n;
    69ea:	1dfb      	adds	r3, r7, #7
    69ec:	781b      	ldrb	r3, [r3, #0]
}
    69ee:	0018      	movs	r0, r3
    69f0:	46bd      	mov	sp, r7
    69f2:	b004      	add	sp, #16
    69f4:	bd80      	pop	{r7, pc}
    69f6:	46c0      	nop			; (mov r8, r8)
    69f8:	00002215 	.word	0x00002215

000069fc <_ZN17SPI_Syn_ZCD_Class5SetCSEb>:
void SPI_Syn_ZCD_Class::Disable(void){
	//SPI_LMX_disable();
	spi_m_sync_disable(&SPI_ZCD);
	
}
void SPI_Syn_ZCD_Class::SetCS(bool st){
    69fc:	b580      	push	{r7, lr}
    69fe:	b082      	sub	sp, #8
    6a00:	af00      	add	r7, sp, #0
    6a02:	6078      	str	r0, [r7, #4]
    6a04:	000a      	movs	r2, r1
    6a06:	1cfb      	adds	r3, r7, #3
    6a08:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(CS_ZCD,st);
    6a0a:	1cfb      	adds	r3, r7, #3
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	0019      	movs	r1, r3
    6a10:	2003      	movs	r0, #3
    6a12:	4b03      	ldr	r3, [pc, #12]	; (6a20 <_ZN17SPI_Syn_ZCD_Class5SetCSEb+0x24>)
    6a14:	4798      	blx	r3
}
    6a16:	46c0      	nop			; (mov r8, r8)
    6a18:	46bd      	mov	sp, r7
    6a1a:	b002      	add	sp, #8
    6a1c:	bd80      	pop	{r7, pc}
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	000068bd 	.word	0x000068bd

00006a24 <__aeabi_atexit>:
    6a24:	000b      	movs	r3, r1
    6a26:	b510      	push	{r4, lr}
    6a28:	0001      	movs	r1, r0
    6a2a:	0018      	movs	r0, r3
    6a2c:	f004 fcc6 	bl	b3bc <__cxa_atexit>
    6a30:	bd10      	pop	{r4, pc}
    6a32:	46c0      	nop			; (mov r8, r8)

00006a34 <floor>:
    6a34:	4a45      	ldr	r2, [pc, #276]	; (6b4c <floor+0x118>)
    6a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a38:	4657      	mov	r7, sl
    6a3a:	4692      	mov	sl, r2
    6a3c:	004b      	lsls	r3, r1, #1
    6a3e:	0d5b      	lsrs	r3, r3, #21
    6a40:	449a      	add	sl, r3
    6a42:	464e      	mov	r6, r9
    6a44:	4645      	mov	r5, r8
    6a46:	46de      	mov	lr, fp
    6a48:	4652      	mov	r2, sl
    6a4a:	b5e0      	push	{r5, r6, r7, lr}
    6a4c:	000c      	movs	r4, r1
    6a4e:	0005      	movs	r5, r0
    6a50:	000e      	movs	r6, r1
    6a52:	4689      	mov	r9, r1
    6a54:	0007      	movs	r7, r0
    6a56:	2a13      	cmp	r2, #19
    6a58:	dc22      	bgt.n	6aa0 <floor+0x6c>
    6a5a:	2a00      	cmp	r2, #0
    6a5c:	db47      	blt.n	6aee <floor+0xba>
    6a5e:	4652      	mov	r2, sl
    6a60:	4b3b      	ldr	r3, [pc, #236]	; (6b50 <floor+0x11c>)
    6a62:	4113      	asrs	r3, r2
    6a64:	4698      	mov	r8, r3
    6a66:	000b      	movs	r3, r1
    6a68:	4642      	mov	r2, r8
    6a6a:	4013      	ands	r3, r2
    6a6c:	4303      	orrs	r3, r0
    6a6e:	d011      	beq.n	6a94 <floor+0x60>
    6a70:	4a38      	ldr	r2, [pc, #224]	; (6b54 <floor+0x120>)
    6a72:	4b39      	ldr	r3, [pc, #228]	; (6b58 <floor+0x124>)
    6a74:	f002 fe5e 	bl	9734 <__aeabi_dadd>
    6a78:	2200      	movs	r2, #0
    6a7a:	2300      	movs	r3, #0
    6a7c:	f001 fdf8 	bl	8670 <__aeabi_dcmpgt>
    6a80:	2800      	cmp	r0, #0
    6a82:	d005      	beq.n	6a90 <floor+0x5c>
    6a84:	2c00      	cmp	r4, #0
    6a86:	db41      	blt.n	6b0c <floor+0xd8>
    6a88:	464e      	mov	r6, r9
    6a8a:	4643      	mov	r3, r8
    6a8c:	2700      	movs	r7, #0
    6a8e:	439e      	bics	r6, r3
    6a90:	0038      	movs	r0, r7
    6a92:	0031      	movs	r1, r6
    6a94:	bc3c      	pop	{r2, r3, r4, r5}
    6a96:	4690      	mov	r8, r2
    6a98:	4699      	mov	r9, r3
    6a9a:	46a2      	mov	sl, r4
    6a9c:	46ab      	mov	fp, r5
    6a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aa0:	4652      	mov	r2, sl
    6aa2:	2a33      	cmp	r2, #51	; 0x33
    6aa4:	dd08      	ble.n	6ab8 <floor+0x84>
    6aa6:	2380      	movs	r3, #128	; 0x80
    6aa8:	00db      	lsls	r3, r3, #3
    6aaa:	459a      	cmp	sl, r3
    6aac:	d1f2      	bne.n	6a94 <floor+0x60>
    6aae:	0002      	movs	r2, r0
    6ab0:	000b      	movs	r3, r1
    6ab2:	f002 fe3f 	bl	9734 <__aeabi_dadd>
    6ab6:	e7ed      	b.n	6a94 <floor+0x60>
    6ab8:	4a28      	ldr	r2, [pc, #160]	; (6b5c <floor+0x128>)
    6aba:	4694      	mov	ip, r2
    6abc:	2201      	movs	r2, #1
    6abe:	4463      	add	r3, ip
    6ac0:	4252      	negs	r2, r2
    6ac2:	40da      	lsrs	r2, r3
    6ac4:	4693      	mov	fp, r2
    6ac6:	4202      	tst	r2, r0
    6ac8:	d0e4      	beq.n	6a94 <floor+0x60>
    6aca:	4a22      	ldr	r2, [pc, #136]	; (6b54 <floor+0x120>)
    6acc:	4b22      	ldr	r3, [pc, #136]	; (6b58 <floor+0x124>)
    6ace:	f002 fe31 	bl	9734 <__aeabi_dadd>
    6ad2:	2200      	movs	r2, #0
    6ad4:	2300      	movs	r3, #0
    6ad6:	f001 fdcb 	bl	8670 <__aeabi_dcmpgt>
    6ada:	2800      	cmp	r0, #0
    6adc:	d0d8      	beq.n	6a90 <floor+0x5c>
    6ade:	2c00      	cmp	r4, #0
    6ae0:	db1a      	blt.n	6b18 <floor+0xe4>
    6ae2:	465b      	mov	r3, fp
    6ae4:	464e      	mov	r6, r9
    6ae6:	439f      	bics	r7, r3
    6ae8:	0038      	movs	r0, r7
    6aea:	0031      	movs	r1, r6
    6aec:	e7d2      	b.n	6a94 <floor+0x60>
    6aee:	4a19      	ldr	r2, [pc, #100]	; (6b54 <floor+0x120>)
    6af0:	4b19      	ldr	r3, [pc, #100]	; (6b58 <floor+0x124>)
    6af2:	f002 fe1f 	bl	9734 <__aeabi_dadd>
    6af6:	2200      	movs	r2, #0
    6af8:	2300      	movs	r3, #0
    6afa:	f001 fdb9 	bl	8670 <__aeabi_dcmpgt>
    6afe:	2800      	cmp	r0, #0
    6b00:	d0c6      	beq.n	6a90 <floor+0x5c>
    6b02:	2c00      	cmp	r4, #0
    6b04:	db16      	blt.n	6b34 <floor+0x100>
    6b06:	2700      	movs	r7, #0
    6b08:	2600      	movs	r6, #0
    6b0a:	e7c1      	b.n	6a90 <floor+0x5c>
    6b0c:	2380      	movs	r3, #128	; 0x80
    6b0e:	4652      	mov	r2, sl
    6b10:	035b      	lsls	r3, r3, #13
    6b12:	4113      	asrs	r3, r2
    6b14:	4499      	add	r9, r3
    6b16:	e7b7      	b.n	6a88 <floor+0x54>
    6b18:	4653      	mov	r3, sl
    6b1a:	2b14      	cmp	r3, #20
    6b1c:	d012      	beq.n	6b44 <floor+0x110>
    6b1e:	2334      	movs	r3, #52	; 0x34
    6b20:	4652      	mov	r2, sl
    6b22:	2701      	movs	r7, #1
    6b24:	1a9b      	subs	r3, r3, r2
    6b26:	409f      	lsls	r7, r3
    6b28:	197f      	adds	r7, r7, r5
    6b2a:	42af      	cmp	r7, r5
    6b2c:	419b      	sbcs	r3, r3
    6b2e:	425b      	negs	r3, r3
    6b30:	4499      	add	r9, r3
    6b32:	e7d6      	b.n	6ae2 <floor+0xae>
    6b34:	0064      	lsls	r4, r4, #1
    6b36:	0864      	lsrs	r4, r4, #1
    6b38:	4325      	orrs	r5, r4
    6b3a:	2700      	movs	r7, #0
    6b3c:	2d00      	cmp	r5, #0
    6b3e:	d0a7      	beq.n	6a90 <floor+0x5c>
    6b40:	4e07      	ldr	r6, [pc, #28]	; (6b60 <floor+0x12c>)
    6b42:	e7a5      	b.n	6a90 <floor+0x5c>
    6b44:	3b13      	subs	r3, #19
    6b46:	469c      	mov	ip, r3
    6b48:	44e1      	add	r9, ip
    6b4a:	e7ca      	b.n	6ae2 <floor+0xae>
    6b4c:	fffffc01 	.word	0xfffffc01
    6b50:	000fffff 	.word	0x000fffff
    6b54:	8800759c 	.word	0x8800759c
    6b58:	7e37e43c 	.word	0x7e37e43c
    6b5c:	fffffbed 	.word	0xfffffbed
    6b60:	bff00000 	.word	0xbff00000

00006b64 <floorf>:
    6b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b66:	46c6      	mov	lr, r8
    6b68:	0043      	lsls	r3, r0, #1
    6b6a:	085f      	lsrs	r7, r3, #1
    6b6c:	0e1b      	lsrs	r3, r3, #24
    6b6e:	3b7f      	subs	r3, #127	; 0x7f
    6b70:	b500      	push	{lr}
    6b72:	1c05      	adds	r5, r0, #0
    6b74:	001c      	movs	r4, r3
    6b76:	2b16      	cmp	r3, #22
    6b78:	dc18      	bgt.n	6bac <floorf+0x48>
    6b7a:	4680      	mov	r8, r0
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	db1e      	blt.n	6bbe <floorf+0x5a>
    6b80:	4f1b      	ldr	r7, [pc, #108]	; (6bf0 <floorf+0x8c>)
    6b82:	1c06      	adds	r6, r0, #0
    6b84:	411f      	asrs	r7, r3
    6b86:	4207      	tst	r7, r0
    6b88:	d00c      	beq.n	6ba4 <floorf+0x40>
    6b8a:	491a      	ldr	r1, [pc, #104]	; (6bf4 <floorf+0x90>)
    6b8c:	f001 fede 	bl	894c <__aeabi_fadd>
    6b90:	2100      	movs	r1, #0
    6b92:	f001 fda7 	bl	86e4 <__aeabi_fcmpgt>
    6b96:	2800      	cmp	r0, #0
    6b98:	d004      	beq.n	6ba4 <floorf+0x40>
    6b9a:	2d00      	cmp	r5, #0
    6b9c:	db1d      	blt.n	6bda <floorf+0x76>
    6b9e:	4643      	mov	r3, r8
    6ba0:	43bb      	bics	r3, r7
    6ba2:	001e      	movs	r6, r3
    6ba4:	1c30      	adds	r0, r6, #0
    6ba6:	bc04      	pop	{r2}
    6ba8:	4690      	mov	r8, r2
    6baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bac:	4b12      	ldr	r3, [pc, #72]	; (6bf8 <floorf+0x94>)
    6bae:	1c06      	adds	r6, r0, #0
    6bb0:	429f      	cmp	r7, r3
    6bb2:	d9f7      	bls.n	6ba4 <floorf+0x40>
    6bb4:	1c01      	adds	r1, r0, #0
    6bb6:	f001 fec9 	bl	894c <__aeabi_fadd>
    6bba:	1c06      	adds	r6, r0, #0
    6bbc:	e7f2      	b.n	6ba4 <floorf+0x40>
    6bbe:	490d      	ldr	r1, [pc, #52]	; (6bf4 <floorf+0x90>)
    6bc0:	f001 fec4 	bl	894c <__aeabi_fadd>
    6bc4:	2100      	movs	r1, #0
    6bc6:	f001 fd8d 	bl	86e4 <__aeabi_fcmpgt>
    6bca:	2800      	cmp	r0, #0
    6bcc:	d003      	beq.n	6bd6 <floorf+0x72>
    6bce:	2d00      	cmp	r5, #0
    6bd0:	db09      	blt.n	6be6 <floorf+0x82>
    6bd2:	2600      	movs	r6, #0
    6bd4:	e7e6      	b.n	6ba4 <floorf+0x40>
    6bd6:	1c2e      	adds	r6, r5, #0
    6bd8:	e7e4      	b.n	6ba4 <floorf+0x40>
    6bda:	2380      	movs	r3, #128	; 0x80
    6bdc:	041b      	lsls	r3, r3, #16
    6bde:	4123      	asrs	r3, r4
    6be0:	4698      	mov	r8, r3
    6be2:	44a8      	add	r8, r5
    6be4:	e7db      	b.n	6b9e <floorf+0x3a>
    6be6:	2f00      	cmp	r7, #0
    6be8:	d0f5      	beq.n	6bd6 <floorf+0x72>
    6bea:	4e04      	ldr	r6, [pc, #16]	; (6bfc <floorf+0x98>)
    6bec:	e7da      	b.n	6ba4 <floorf+0x40>
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	007fffff 	.word	0x007fffff
    6bf4:	7149f2ca 	.word	0x7149f2ca
    6bf8:	7f7fffff 	.word	0x7f7fffff
    6bfc:	bf800000 	.word	0xbf800000

00006c00 <roundf>:
    6c00:	0043      	lsls	r3, r0, #1
    6c02:	0e1b      	lsrs	r3, r3, #24
    6c04:	3b7f      	subs	r3, #127	; 0x7f
    6c06:	b510      	push	{r4, lr}
    6c08:	0002      	movs	r2, r0
    6c0a:	2b16      	cmp	r3, #22
    6c0c:	dc0b      	bgt.n	6c26 <roundf+0x26>
    6c0e:	2b00      	cmp	r3, #0
    6c10:	db0f      	blt.n	6c32 <roundf+0x32>
    6c12:	490c      	ldr	r1, [pc, #48]	; (6c44 <roundf+0x44>)
    6c14:	4119      	asrs	r1, r3
    6c16:	4201      	tst	r1, r0
    6c18:	d004      	beq.n	6c24 <roundf+0x24>
    6c1a:	2080      	movs	r0, #128	; 0x80
    6c1c:	03c0      	lsls	r0, r0, #15
    6c1e:	4118      	asrs	r0, r3
    6c20:	1880      	adds	r0, r0, r2
    6c22:	4388      	bics	r0, r1
    6c24:	bd10      	pop	{r4, pc}
    6c26:	2b80      	cmp	r3, #128	; 0x80
    6c28:	d1fc      	bne.n	6c24 <roundf+0x24>
    6c2a:	1c01      	adds	r1, r0, #0
    6c2c:	f001 fe8e 	bl	894c <__aeabi_fadd>
    6c30:	e7f8      	b.n	6c24 <roundf+0x24>
    6c32:	0fc0      	lsrs	r0, r0, #31
    6c34:	07c0      	lsls	r0, r0, #31
    6c36:	3301      	adds	r3, #1
    6c38:	d1f4      	bne.n	6c24 <roundf+0x24>
    6c3a:	23fe      	movs	r3, #254	; 0xfe
    6c3c:	059b      	lsls	r3, r3, #22
    6c3e:	4318      	orrs	r0, r3
    6c40:	e7f0      	b.n	6c24 <roundf+0x24>
    6c42:	46c0      	nop			; (mov r8, r8)
    6c44:	007fffff 	.word	0x007fffff

00006c48 <log>:
    6c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c4a:	46c6      	mov	lr, r8
    6c4c:	b500      	push	{lr}
    6c4e:	b08c      	sub	sp, #48	; 0x30
    6c50:	0004      	movs	r4, r0
    6c52:	000d      	movs	r5, r1
    6c54:	f000 fa2c 	bl	70b0 <__ieee754_log>
    6c58:	4b3a      	ldr	r3, [pc, #232]	; (6d44 <log+0xfc>)
    6c5a:	0006      	movs	r6, r0
    6c5c:	781b      	ldrb	r3, [r3, #0]
    6c5e:	000f      	movs	r7, r1
    6c60:	b25b      	sxtb	r3, r3
    6c62:	4698      	mov	r8, r3
    6c64:	3301      	adds	r3, #1
    6c66:	d00f      	beq.n	6c88 <log+0x40>
    6c68:	0022      	movs	r2, r4
    6c6a:	002b      	movs	r3, r5
    6c6c:	0020      	movs	r0, r4
    6c6e:	0029      	movs	r1, r5
    6c70:	f004 fa3a 	bl	b0e8 <__aeabi_dcmpun>
    6c74:	2800      	cmp	r0, #0
    6c76:	d107      	bne.n	6c88 <log+0x40>
    6c78:	2200      	movs	r2, #0
    6c7a:	2300      	movs	r3, #0
    6c7c:	0020      	movs	r0, r4
    6c7e:	0029      	movs	r1, r5
    6c80:	f001 fcf6 	bl	8670 <__aeabi_dcmpgt>
    6c84:	2800      	cmp	r0, #0
    6c86:	d005      	beq.n	6c94 <log+0x4c>
    6c88:	0030      	movs	r0, r6
    6c8a:	0039      	movs	r1, r7
    6c8c:	b00c      	add	sp, #48	; 0x30
    6c8e:	bc04      	pop	{r2}
    6c90:	4690      	mov	r8, r2
    6c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c94:	4b2c      	ldr	r3, [pc, #176]	; (6d48 <log+0x100>)
    6c96:	900a      	str	r0, [sp, #40]	; 0x28
    6c98:	9303      	str	r3, [sp, #12]
    6c9a:	4643      	mov	r3, r8
    6c9c:	9404      	str	r4, [sp, #16]
    6c9e:	9505      	str	r5, [sp, #20]
    6ca0:	9406      	str	r4, [sp, #24]
    6ca2:	9507      	str	r5, [sp, #28]
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d11a      	bne.n	6cde <log+0x96>
    6ca8:	22e0      	movs	r2, #224	; 0xe0
    6caa:	4b28      	ldr	r3, [pc, #160]	; (6d4c <log+0x104>)
    6cac:	0612      	lsls	r2, r2, #24
    6cae:	9208      	str	r2, [sp, #32]
    6cb0:	9309      	str	r3, [sp, #36]	; 0x24
    6cb2:	0020      	movs	r0, r4
    6cb4:	2200      	movs	r2, #0
    6cb6:	2300      	movs	r3, #0
    6cb8:	0029      	movs	r1, r5
    6cba:	f001 fcbf 	bl	863c <__aeabi_dcmpeq>
    6cbe:	2800      	cmp	r0, #0
    6cc0:	d038      	beq.n	6d34 <log+0xec>
    6cc2:	2302      	movs	r3, #2
    6cc4:	9302      	str	r3, [sp, #8]
    6cc6:	a802      	add	r0, sp, #8
    6cc8:	f001 fa18 	bl	80fc <matherr>
    6ccc:	2800      	cmp	r0, #0
    6cce:	d017      	beq.n	6d00 <log+0xb8>
    6cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6cd2:	9301      	str	r3, [sp, #4]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d118      	bne.n	6d0a <log+0xc2>
    6cd8:	9e08      	ldr	r6, [sp, #32]
    6cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6cdc:	e7d4      	b.n	6c88 <log+0x40>
    6cde:	2200      	movs	r2, #0
    6ce0:	4b1b      	ldr	r3, [pc, #108]	; (6d50 <log+0x108>)
    6ce2:	0020      	movs	r0, r4
    6ce4:	9208      	str	r2, [sp, #32]
    6ce6:	9309      	str	r3, [sp, #36]	; 0x24
    6ce8:	0029      	movs	r1, r5
    6cea:	2200      	movs	r2, #0
    6cec:	2300      	movs	r3, #0
    6cee:	f001 fca5 	bl	863c <__aeabi_dcmpeq>
    6cf2:	2800      	cmp	r0, #0
    6cf4:	d00f      	beq.n	6d16 <log+0xce>
    6cf6:	2302      	movs	r3, #2
    6cf8:	9302      	str	r3, [sp, #8]
    6cfa:	4643      	mov	r3, r8
    6cfc:	2b02      	cmp	r3, #2
    6cfe:	d1e2      	bne.n	6cc6 <log+0x7e>
    6d00:	f004 fb64 	bl	b3cc <__errno>
    6d04:	2322      	movs	r3, #34	; 0x22
    6d06:	6003      	str	r3, [r0, #0]
    6d08:	e7e2      	b.n	6cd0 <log+0x88>
    6d0a:	f004 fb5f 	bl	b3cc <__errno>
    6d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6d10:	9301      	str	r3, [sp, #4]
    6d12:	6003      	str	r3, [r0, #0]
    6d14:	e7e0      	b.n	6cd8 <log+0x90>
    6d16:	2301      	movs	r3, #1
    6d18:	9302      	str	r3, [sp, #8]
    6d1a:	4643      	mov	r3, r8
    6d1c:	2b02      	cmp	r3, #2
    6d1e:	d10b      	bne.n	6d38 <log+0xf0>
    6d20:	f004 fb54 	bl	b3cc <__errno>
    6d24:	2321      	movs	r3, #33	; 0x21
    6d26:	6003      	str	r3, [r0, #0]
    6d28:	480a      	ldr	r0, [pc, #40]	; (6d54 <log+0x10c>)
    6d2a:	f001 f9e9 	bl	8100 <nan>
    6d2e:	9008      	str	r0, [sp, #32]
    6d30:	9109      	str	r1, [sp, #36]	; 0x24
    6d32:	e7cd      	b.n	6cd0 <log+0x88>
    6d34:	2301      	movs	r3, #1
    6d36:	9302      	str	r3, [sp, #8]
    6d38:	a802      	add	r0, sp, #8
    6d3a:	f001 f9df 	bl	80fc <matherr>
    6d3e:	2800      	cmp	r0, #0
    6d40:	d1f2      	bne.n	6d28 <log+0xe0>
    6d42:	e7ed      	b.n	6d20 <log+0xd8>
    6d44:	2000006c 	.word	0x2000006c
    6d48:	000105a0 	.word	0x000105a0
    6d4c:	c7efffff 	.word	0xc7efffff
    6d50:	fff00000 	.word	0xfff00000
    6d54:	00010178 	.word	0x00010178

00006d58 <pow>:
    6d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d5a:	4657      	mov	r7, sl
    6d5c:	464e      	mov	r6, r9
    6d5e:	46de      	mov	lr, fp
    6d60:	4645      	mov	r5, r8
    6d62:	b5e0      	push	{r5, r6, r7, lr}
    6d64:	b08f      	sub	sp, #60	; 0x3c
    6d66:	001d      	movs	r5, r3
    6d68:	0006      	movs	r6, r0
    6d6a:	000f      	movs	r7, r1
    6d6c:	0014      	movs	r4, r2
    6d6e:	f000 fba1 	bl	74b4 <__ieee754_pow>
    6d72:	4bc7      	ldr	r3, [pc, #796]	; (7090 <pow+0x338>)
    6d74:	9000      	str	r0, [sp, #0]
    6d76:	9101      	str	r1, [sp, #4]
    6d78:	469a      	mov	sl, r3
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	b25b      	sxtb	r3, r3
    6d7e:	4699      	mov	r9, r3
    6d80:	3301      	adds	r3, #1
    6d82:	d03e      	beq.n	6e02 <pow+0xaa>
    6d84:	0022      	movs	r2, r4
    6d86:	002b      	movs	r3, r5
    6d88:	0020      	movs	r0, r4
    6d8a:	0029      	movs	r1, r5
    6d8c:	f004 f9ac 	bl	b0e8 <__aeabi_dcmpun>
    6d90:	4683      	mov	fp, r0
    6d92:	2800      	cmp	r0, #0
    6d94:	d135      	bne.n	6e02 <pow+0xaa>
    6d96:	0032      	movs	r2, r6
    6d98:	003b      	movs	r3, r7
    6d9a:	0030      	movs	r0, r6
    6d9c:	0039      	movs	r1, r7
    6d9e:	f004 f9a3 	bl	b0e8 <__aeabi_dcmpun>
    6da2:	2200      	movs	r2, #0
    6da4:	9003      	str	r0, [sp, #12]
    6da6:	2800      	cmp	r0, #0
    6da8:	d000      	beq.n	6dac <pow+0x54>
    6daa:	e0b6      	b.n	6f1a <pow+0x1c2>
    6dac:	2300      	movs	r3, #0
    6dae:	0030      	movs	r0, r6
    6db0:	0039      	movs	r1, r7
    6db2:	f001 fc43 	bl	863c <__aeabi_dcmpeq>
    6db6:	2800      	cmp	r0, #0
    6db8:	d02c      	beq.n	6e14 <pow+0xbc>
    6dba:	2200      	movs	r2, #0
    6dbc:	2300      	movs	r3, #0
    6dbe:	0020      	movs	r0, r4
    6dc0:	0029      	movs	r1, r5
    6dc2:	f001 fc3b 	bl	863c <__aeabi_dcmpeq>
    6dc6:	4683      	mov	fp, r0
    6dc8:	2800      	cmp	r0, #0
    6dca:	d100      	bne.n	6dce <pow+0x76>
    6dcc:	e077      	b.n	6ebe <pow+0x166>
    6dce:	ab04      	add	r3, sp, #16
    6dd0:	4698      	mov	r8, r3
    6dd2:	2301      	movs	r3, #1
    6dd4:	4642      	mov	r2, r8
    6dd6:	9304      	str	r3, [sp, #16]
    6dd8:	4bae      	ldr	r3, [pc, #696]	; (7094 <pow+0x33c>)
    6dda:	6053      	str	r3, [r2, #4]
    6ddc:	4643      	mov	r3, r8
    6dde:	9a03      	ldr	r2, [sp, #12]
    6de0:	611c      	str	r4, [r3, #16]
    6de2:	615d      	str	r5, [r3, #20]
    6de4:	621a      	str	r2, [r3, #32]
    6de6:	609e      	str	r6, [r3, #8]
    6de8:	60df      	str	r7, [r3, #12]
    6dea:	4642      	mov	r2, r8
    6dec:	2300      	movs	r3, #0
    6dee:	2400      	movs	r4, #0
    6df0:	6193      	str	r3, [r2, #24]
    6df2:	61d4      	str	r4, [r2, #28]
    6df4:	464b      	mov	r3, r9
    6df6:	2b00      	cmp	r3, #0
    6df8:	d04d      	beq.n	6e96 <pow+0x13e>
    6dfa:	2300      	movs	r3, #0
    6dfc:	4ca6      	ldr	r4, [pc, #664]	; (7098 <pow+0x340>)
    6dfe:	9300      	str	r3, [sp, #0]
    6e00:	9401      	str	r4, [sp, #4]
    6e02:	9800      	ldr	r0, [sp, #0]
    6e04:	9901      	ldr	r1, [sp, #4]
    6e06:	b00f      	add	sp, #60	; 0x3c
    6e08:	bc3c      	pop	{r2, r3, r4, r5}
    6e0a:	4690      	mov	r8, r2
    6e0c:	4699      	mov	r9, r3
    6e0e:	46a2      	mov	sl, r4
    6e10:	46ab      	mov	fp, r5
    6e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e14:	9800      	ldr	r0, [sp, #0]
    6e16:	9901      	ldr	r1, [sp, #4]
    6e18:	f001 f966 	bl	80e8 <finite>
    6e1c:	4681      	mov	r9, r0
    6e1e:	2800      	cmp	r0, #0
    6e20:	d100      	bne.n	6e24 <pow+0xcc>
    6e22:	e09b      	b.n	6f5c <pow+0x204>
    6e24:	9800      	ldr	r0, [sp, #0]
    6e26:	9901      	ldr	r1, [sp, #4]
    6e28:	2200      	movs	r2, #0
    6e2a:	2300      	movs	r3, #0
    6e2c:	f001 fc06 	bl	863c <__aeabi_dcmpeq>
    6e30:	2800      	cmp	r0, #0
    6e32:	d0e6      	beq.n	6e02 <pow+0xaa>
    6e34:	0030      	movs	r0, r6
    6e36:	0039      	movs	r1, r7
    6e38:	f001 f956 	bl	80e8 <finite>
    6e3c:	2800      	cmp	r0, #0
    6e3e:	d0e0      	beq.n	6e02 <pow+0xaa>
    6e40:	0020      	movs	r0, r4
    6e42:	0029      	movs	r1, r5
    6e44:	f001 f950 	bl	80e8 <finite>
    6e48:	2800      	cmp	r0, #0
    6e4a:	d0da      	beq.n	6e02 <pow+0xaa>
    6e4c:	ab04      	add	r3, sp, #16
    6e4e:	4698      	mov	r8, r3
    6e50:	2304      	movs	r3, #4
    6e52:	4642      	mov	r2, r8
    6e54:	9304      	str	r3, [sp, #16]
    6e56:	4b8f      	ldr	r3, [pc, #572]	; (7094 <pow+0x33c>)
    6e58:	6114      	str	r4, [r2, #16]
    6e5a:	6155      	str	r5, [r2, #20]
    6e5c:	6053      	str	r3, [r2, #4]
    6e5e:	2300      	movs	r3, #0
    6e60:	2400      	movs	r4, #0
    6e62:	6213      	str	r3, [r2, #32]
    6e64:	2300      	movs	r3, #0
    6e66:	6193      	str	r3, [r2, #24]
    6e68:	61d4      	str	r4, [r2, #28]
    6e6a:	4653      	mov	r3, sl
    6e6c:	781b      	ldrb	r3, [r3, #0]
    6e6e:	6096      	str	r6, [r2, #8]
    6e70:	60d7      	str	r7, [r2, #12]
    6e72:	b25b      	sxtb	r3, r3
    6e74:	2b02      	cmp	r3, #2
    6e76:	d004      	beq.n	6e82 <pow+0x12a>
    6e78:	4640      	mov	r0, r8
    6e7a:	f001 f93f 	bl	80fc <matherr>
    6e7e:	2800      	cmp	r0, #0
    6e80:	d10e      	bne.n	6ea0 <pow+0x148>
    6e82:	f004 faa3 	bl	b3cc <__errno>
    6e86:	2322      	movs	r3, #34	; 0x22
    6e88:	6003      	str	r3, [r0, #0]
    6e8a:	e009      	b.n	6ea0 <pow+0x148>
    6e8c:	4642      	mov	r2, r8
    6e8e:	2300      	movs	r3, #0
    6e90:	2400      	movs	r4, #0
    6e92:	6193      	str	r3, [r2, #24]
    6e94:	61d4      	str	r4, [r2, #28]
    6e96:	4640      	mov	r0, r8
    6e98:	f001 f930 	bl	80fc <matherr>
    6e9c:	2800      	cmp	r0, #0
    6e9e:	d037      	beq.n	6f10 <pow+0x1b8>
    6ea0:	4643      	mov	r3, r8
    6ea2:	6a1b      	ldr	r3, [r3, #32]
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d004      	beq.n	6eb2 <pow+0x15a>
    6ea8:	f004 fa90 	bl	b3cc <__errno>
    6eac:	4643      	mov	r3, r8
    6eae:	6a1b      	ldr	r3, [r3, #32]
    6eb0:	6003      	str	r3, [r0, #0]
    6eb2:	4643      	mov	r3, r8
    6eb4:	69dc      	ldr	r4, [r3, #28]
    6eb6:	699b      	ldr	r3, [r3, #24]
    6eb8:	9300      	str	r3, [sp, #0]
    6eba:	9401      	str	r4, [sp, #4]
    6ebc:	e7a1      	b.n	6e02 <pow+0xaa>
    6ebe:	0020      	movs	r0, r4
    6ec0:	0029      	movs	r1, r5
    6ec2:	f001 f911 	bl	80e8 <finite>
    6ec6:	2800      	cmp	r0, #0
    6ec8:	d09b      	beq.n	6e02 <pow+0xaa>
    6eca:	2200      	movs	r2, #0
    6ecc:	2300      	movs	r3, #0
    6ece:	0020      	movs	r0, r4
    6ed0:	0029      	movs	r1, r5
    6ed2:	f001 fbb9 	bl	8648 <__aeabi_dcmplt>
    6ed6:	2800      	cmp	r0, #0
    6ed8:	d100      	bne.n	6edc <pow+0x184>
    6eda:	e792      	b.n	6e02 <pow+0xaa>
    6edc:	ab04      	add	r3, sp, #16
    6ede:	4698      	mov	r8, r3
    6ee0:	2301      	movs	r3, #1
    6ee2:	4642      	mov	r2, r8
    6ee4:	9304      	str	r3, [sp, #16]
    6ee6:	4b6b      	ldr	r3, [pc, #428]	; (7094 <pow+0x33c>)
    6ee8:	6053      	str	r3, [r2, #4]
    6eea:	4643      	mov	r3, r8
    6eec:	465a      	mov	r2, fp
    6eee:	609e      	str	r6, [r3, #8]
    6ef0:	60df      	str	r7, [r3, #12]
    6ef2:	621a      	str	r2, [r3, #32]
    6ef4:	611c      	str	r4, [r3, #16]
    6ef6:	615d      	str	r5, [r3, #20]
    6ef8:	4653      	mov	r3, sl
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	b25b      	sxtb	r3, r3
    6efe:	2b00      	cmp	r3, #0
    6f00:	d0c4      	beq.n	6e8c <pow+0x134>
    6f02:	2000      	movs	r0, #0
    6f04:	4642      	mov	r2, r8
    6f06:	4965      	ldr	r1, [pc, #404]	; (709c <pow+0x344>)
    6f08:	6190      	str	r0, [r2, #24]
    6f0a:	61d1      	str	r1, [r2, #28]
    6f0c:	2b02      	cmp	r3, #2
    6f0e:	d1c2      	bne.n	6e96 <pow+0x13e>
    6f10:	f004 fa5c 	bl	b3cc <__errno>
    6f14:	2321      	movs	r3, #33	; 0x21
    6f16:	6003      	str	r3, [r0, #0]
    6f18:	e7c2      	b.n	6ea0 <pow+0x148>
    6f1a:	2300      	movs	r3, #0
    6f1c:	0020      	movs	r0, r4
    6f1e:	0029      	movs	r1, r5
    6f20:	f001 fb8c 	bl	863c <__aeabi_dcmpeq>
    6f24:	2800      	cmp	r0, #0
    6f26:	d100      	bne.n	6f2a <pow+0x1d2>
    6f28:	e76b      	b.n	6e02 <pow+0xaa>
    6f2a:	ab04      	add	r3, sp, #16
    6f2c:	4698      	mov	r8, r3
    6f2e:	2301      	movs	r3, #1
    6f30:	4642      	mov	r2, r8
    6f32:	9304      	str	r3, [sp, #16]
    6f34:	4b57      	ldr	r3, [pc, #348]	; (7094 <pow+0x33c>)
    6f36:	4641      	mov	r1, r8
    6f38:	6053      	str	r3, [r2, #4]
    6f3a:	4643      	mov	r3, r8
    6f3c:	465a      	mov	r2, fp
    6f3e:	621a      	str	r2, [r3, #32]
    6f40:	2200      	movs	r2, #0
    6f42:	609e      	str	r6, [r3, #8]
    6f44:	60df      	str	r7, [r3, #12]
    6f46:	611c      	str	r4, [r3, #16]
    6f48:	615d      	str	r5, [r3, #20]
    6f4a:	4b53      	ldr	r3, [pc, #332]	; (7098 <pow+0x340>)
    6f4c:	618a      	str	r2, [r1, #24]
    6f4e:	61cb      	str	r3, [r1, #28]
    6f50:	9200      	str	r2, [sp, #0]
    6f52:	9301      	str	r3, [sp, #4]
    6f54:	464b      	mov	r3, r9
    6f56:	2b02      	cmp	r3, #2
    6f58:	d19d      	bne.n	6e96 <pow+0x13e>
    6f5a:	e752      	b.n	6e02 <pow+0xaa>
    6f5c:	0030      	movs	r0, r6
    6f5e:	0039      	movs	r1, r7
    6f60:	f001 f8c2 	bl	80e8 <finite>
    6f64:	2800      	cmp	r0, #0
    6f66:	d100      	bne.n	6f6a <pow+0x212>
    6f68:	e75c      	b.n	6e24 <pow+0xcc>
    6f6a:	0020      	movs	r0, r4
    6f6c:	0029      	movs	r1, r5
    6f6e:	f001 f8bb 	bl	80e8 <finite>
    6f72:	2800      	cmp	r0, #0
    6f74:	d100      	bne.n	6f78 <pow+0x220>
    6f76:	e755      	b.n	6e24 <pow+0xcc>
    6f78:	9800      	ldr	r0, [sp, #0]
    6f7a:	9901      	ldr	r1, [sp, #4]
    6f7c:	000b      	movs	r3, r1
    6f7e:	0002      	movs	r2, r0
    6f80:	f004 f8b2 	bl	b0e8 <__aeabi_dcmpun>
    6f84:	ab04      	add	r3, sp, #16
    6f86:	4698      	mov	r8, r3
    6f88:	2800      	cmp	r0, #0
    6f8a:	d161      	bne.n	7050 <pow+0x2f8>
    6f8c:	2303      	movs	r3, #3
    6f8e:	4642      	mov	r2, r8
    6f90:	9304      	str	r3, [sp, #16]
    6f92:	4b40      	ldr	r3, [pc, #256]	; (7094 <pow+0x33c>)
    6f94:	6210      	str	r0, [r2, #32]
    6f96:	6053      	str	r3, [r2, #4]
    6f98:	4653      	mov	r3, sl
    6f9a:	781b      	ldrb	r3, [r3, #0]
    6f9c:	6096      	str	r6, [r2, #8]
    6f9e:	60d7      	str	r7, [r2, #12]
    6fa0:	b25b      	sxtb	r3, r3
    6fa2:	6114      	str	r4, [r2, #16]
    6fa4:	6155      	str	r5, [r2, #20]
    6fa6:	4699      	mov	r9, r3
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d12f      	bne.n	700c <pow+0x2b4>
    6fac:	22e0      	movs	r2, #224	; 0xe0
    6fae:	4641      	mov	r1, r8
    6fb0:	4b3b      	ldr	r3, [pc, #236]	; (70a0 <pow+0x348>)
    6fb2:	0612      	lsls	r2, r2, #24
    6fb4:	618a      	str	r2, [r1, #24]
    6fb6:	61cb      	str	r3, [r1, #28]
    6fb8:	0030      	movs	r0, r6
    6fba:	2200      	movs	r2, #0
    6fbc:	2300      	movs	r3, #0
    6fbe:	0039      	movs	r1, r7
    6fc0:	f001 fb42 	bl	8648 <__aeabi_dcmplt>
    6fc4:	2800      	cmp	r0, #0
    6fc6:	d100      	bne.n	6fca <pow+0x272>
    6fc8:	e756      	b.n	6e78 <pow+0x120>
    6fca:	2200      	movs	r2, #0
    6fcc:	4b35      	ldr	r3, [pc, #212]	; (70a4 <pow+0x34c>)
    6fce:	0020      	movs	r0, r4
    6fd0:	0029      	movs	r1, r5
    6fd2:	f003 faf3 	bl	a5bc <__aeabi_dmul>
    6fd6:	0004      	movs	r4, r0
    6fd8:	000d      	movs	r5, r1
    6fda:	f001 f897 	bl	810c <rint>
    6fde:	0002      	movs	r2, r0
    6fe0:	000b      	movs	r3, r1
    6fe2:	0020      	movs	r0, r4
    6fe4:	0029      	movs	r1, r5
    6fe6:	f001 fb29 	bl	863c <__aeabi_dcmpeq>
    6fea:	2800      	cmp	r0, #0
    6fec:	d105      	bne.n	6ffa <pow+0x2a2>
    6fee:	22e0      	movs	r2, #224	; 0xe0
    6ff0:	4b2d      	ldr	r3, [pc, #180]	; (70a8 <pow+0x350>)
    6ff2:	0612      	lsls	r2, r2, #24
    6ff4:	4641      	mov	r1, r8
    6ff6:	618a      	str	r2, [r1, #24]
    6ff8:	61cb      	str	r3, [r1, #28]
    6ffa:	4653      	mov	r3, sl
    6ffc:	781b      	ldrb	r3, [r3, #0]
    6ffe:	b25b      	sxtb	r3, r3
    7000:	4699      	mov	r9, r3
    7002:	464b      	mov	r3, r9
    7004:	2b02      	cmp	r3, #2
    7006:	d000      	beq.n	700a <pow+0x2b2>
    7008:	e736      	b.n	6e78 <pow+0x120>
    700a:	e73a      	b.n	6e82 <pow+0x12a>
    700c:	2200      	movs	r2, #0
    700e:	4641      	mov	r1, r8
    7010:	4b26      	ldr	r3, [pc, #152]	; (70ac <pow+0x354>)
    7012:	0030      	movs	r0, r6
    7014:	618a      	str	r2, [r1, #24]
    7016:	61cb      	str	r3, [r1, #28]
    7018:	2200      	movs	r2, #0
    701a:	2300      	movs	r3, #0
    701c:	0039      	movs	r1, r7
    701e:	f001 fb13 	bl	8648 <__aeabi_dcmplt>
    7022:	2800      	cmp	r0, #0
    7024:	d0ed      	beq.n	7002 <pow+0x2aa>
    7026:	2200      	movs	r2, #0
    7028:	4b1e      	ldr	r3, [pc, #120]	; (70a4 <pow+0x34c>)
    702a:	0020      	movs	r0, r4
    702c:	0029      	movs	r1, r5
    702e:	f003 fac5 	bl	a5bc <__aeabi_dmul>
    7032:	0004      	movs	r4, r0
    7034:	000d      	movs	r5, r1
    7036:	f001 f869 	bl	810c <rint>
    703a:	0002      	movs	r2, r0
    703c:	000b      	movs	r3, r1
    703e:	0020      	movs	r0, r4
    7040:	0029      	movs	r1, r5
    7042:	f001 fafb 	bl	863c <__aeabi_dcmpeq>
    7046:	2800      	cmp	r0, #0
    7048:	d1d7      	bne.n	6ffa <pow+0x2a2>
    704a:	2200      	movs	r2, #0
    704c:	4b13      	ldr	r3, [pc, #76]	; (709c <pow+0x344>)
    704e:	e7d1      	b.n	6ff4 <pow+0x29c>
    7050:	2301      	movs	r3, #1
    7052:	4642      	mov	r2, r8
    7054:	9304      	str	r3, [sp, #16]
    7056:	4b0f      	ldr	r3, [pc, #60]	; (7094 <pow+0x33c>)
    7058:	6053      	str	r3, [r2, #4]
    705a:	4643      	mov	r3, r8
    705c:	464a      	mov	r2, r9
    705e:	611c      	str	r4, [r3, #16]
    7060:	615d      	str	r5, [r3, #20]
    7062:	621a      	str	r2, [r3, #32]
    7064:	609e      	str	r6, [r3, #8]
    7066:	60df      	str	r7, [r3, #12]
    7068:	2400      	movs	r4, #0
    706a:	4653      	mov	r3, sl
    706c:	571c      	ldrsb	r4, [r3, r4]
    706e:	2c00      	cmp	r4, #0
    7070:	d100      	bne.n	7074 <pow+0x31c>
    7072:	e70b      	b.n	6e8c <pow+0x134>
    7074:	2300      	movs	r3, #0
    7076:	2200      	movs	r2, #0
    7078:	0019      	movs	r1, r3
    707a:	0010      	movs	r0, r2
    707c:	f002 fe6a 	bl	9d54 <__aeabi_ddiv>
    7080:	4643      	mov	r3, r8
    7082:	6198      	str	r0, [r3, #24]
    7084:	61d9      	str	r1, [r3, #28]
    7086:	2c02      	cmp	r4, #2
    7088:	d100      	bne.n	708c <pow+0x334>
    708a:	e741      	b.n	6f10 <pow+0x1b8>
    708c:	e703      	b.n	6e96 <pow+0x13e>
    708e:	46c0      	nop			; (mov r8, r8)
    7090:	2000006c 	.word	0x2000006c
    7094:	000105a4 	.word	0x000105a4
    7098:	3ff00000 	.word	0x3ff00000
    709c:	fff00000 	.word	0xfff00000
    70a0:	47efffff 	.word	0x47efffff
    70a4:	3fe00000 	.word	0x3fe00000
    70a8:	c7efffff 	.word	0xc7efffff
    70ac:	7ff00000 	.word	0x7ff00000

000070b0 <__ieee754_log>:
    70b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    70b2:	46d6      	mov	lr, sl
    70b4:	464f      	mov	r7, r9
    70b6:	4646      	mov	r6, r8
    70b8:	b5c0      	push	{r6, r7, lr}
    70ba:	4ada      	ldr	r2, [pc, #872]	; (7424 <__ieee754_log+0x374>)
    70bc:	b088      	sub	sp, #32
    70be:	000b      	movs	r3, r1
    70c0:	4291      	cmp	r1, r2
    70c2:	dc55      	bgt.n	7170 <__ieee754_log+0xc0>
    70c4:	004a      	lsls	r2, r1, #1
    70c6:	0852      	lsrs	r2, r2, #1
    70c8:	4302      	orrs	r2, r0
    70ca:	d100      	bne.n	70ce <__ieee754_log+0x1e>
    70cc:	e0ef      	b.n	72ae <__ieee754_log+0x1fe>
    70ce:	2900      	cmp	r1, #0
    70d0:	da00      	bge.n	70d4 <__ieee754_log+0x24>
    70d2:	e179      	b.n	73c8 <__ieee754_log+0x318>
    70d4:	4bd4      	ldr	r3, [pc, #848]	; (7428 <__ieee754_log+0x378>)
    70d6:	2200      	movs	r2, #0
    70d8:	f003 fa70 	bl	a5bc <__aeabi_dmul>
    70dc:	2536      	movs	r5, #54	; 0x36
    70de:	4cd3      	ldr	r4, [pc, #844]	; (742c <__ieee754_log+0x37c>)
    70e0:	000b      	movs	r3, r1
    70e2:	426d      	negs	r5, r5
    70e4:	42a3      	cmp	r3, r4
    70e6:	dc47      	bgt.n	7178 <__ieee754_log+0xc8>
    70e8:	151a      	asrs	r2, r3, #20
    70ea:	4cd1      	ldr	r4, [pc, #836]	; (7430 <__ieee754_log+0x380>)
    70ec:	031b      	lsls	r3, r3, #12
    70ee:	0b1b      	lsrs	r3, r3, #12
    70f0:	4698      	mov	r8, r3
    70f2:	46a4      	mov	ip, r4
    70f4:	2480      	movs	r4, #128	; 0x80
    70f6:	4bcf      	ldr	r3, [pc, #828]	; (7434 <__ieee754_log+0x384>)
    70f8:	0364      	lsls	r4, r4, #13
    70fa:	4443      	add	r3, r8
    70fc:	4023      	ands	r3, r4
    70fe:	4cce      	ldr	r4, [pc, #824]	; (7438 <__ieee754_log+0x388>)
    7100:	4462      	add	r2, ip
    7102:	1952      	adds	r2, r2, r5
    7104:	405c      	eors	r4, r3
    7106:	4645      	mov	r5, r8
    7108:	151b      	asrs	r3, r3, #20
    710a:	4699      	mov	r9, r3
    710c:	4325      	orrs	r5, r4
    710e:	4bca      	ldr	r3, [pc, #808]	; (7438 <__ieee754_log+0x388>)
    7110:	0029      	movs	r1, r5
    7112:	4491      	add	r9, r2
    7114:	2200      	movs	r2, #0
    7116:	f003 fcd1 	bl	aabc <__aeabi_dsub>
    711a:	4643      	mov	r3, r8
    711c:	3302      	adds	r3, #2
    711e:	031b      	lsls	r3, r3, #12
    7120:	0006      	movs	r6, r0
    7122:	000f      	movs	r7, r1
    7124:	0b1b      	lsrs	r3, r3, #12
    7126:	2200      	movs	r2, #0
    7128:	2b02      	cmp	r3, #2
    712a:	dc2f      	bgt.n	718c <__ieee754_log+0xdc>
    712c:	2300      	movs	r3, #0
    712e:	f001 fa85 	bl	863c <__aeabi_dcmpeq>
    7132:	2800      	cmp	r0, #0
    7134:	d100      	bne.n	7138 <__ieee754_log+0x88>
    7136:	e0c1      	b.n	72bc <__ieee754_log+0x20c>
    7138:	464b      	mov	r3, r9
    713a:	2b00      	cmp	r3, #0
    713c:	d100      	bne.n	7140 <__ieee754_log+0x90>
    713e:	e14c      	b.n	73da <__ieee754_log+0x32a>
    7140:	4648      	mov	r0, r9
    7142:	f004 f825 	bl	b190 <__aeabi_i2d>
    7146:	4abd      	ldr	r2, [pc, #756]	; (743c <__ieee754_log+0x38c>)
    7148:	4bbd      	ldr	r3, [pc, #756]	; (7440 <__ieee754_log+0x390>)
    714a:	0004      	movs	r4, r0
    714c:	000d      	movs	r5, r1
    714e:	f003 fa35 	bl	a5bc <__aeabi_dmul>
    7152:	4abc      	ldr	r2, [pc, #752]	; (7444 <__ieee754_log+0x394>)
    7154:	0006      	movs	r6, r0
    7156:	000f      	movs	r7, r1
    7158:	4bbb      	ldr	r3, [pc, #748]	; (7448 <__ieee754_log+0x398>)
    715a:	0020      	movs	r0, r4
    715c:	0029      	movs	r1, r5
    715e:	f003 fa2d 	bl	a5bc <__aeabi_dmul>
    7162:	0002      	movs	r2, r0
    7164:	000b      	movs	r3, r1
    7166:	0030      	movs	r0, r6
    7168:	0039      	movs	r1, r7
    716a:	f002 fae3 	bl	9734 <__aeabi_dadd>
    716e:	e007      	b.n	7180 <__ieee754_log+0xd0>
    7170:	4cae      	ldr	r4, [pc, #696]	; (742c <__ieee754_log+0x37c>)
    7172:	2500      	movs	r5, #0
    7174:	42a3      	cmp	r3, r4
    7176:	ddb7      	ble.n	70e8 <__ieee754_log+0x38>
    7178:	0002      	movs	r2, r0
    717a:	000b      	movs	r3, r1
    717c:	f002 fada 	bl	9734 <__aeabi_dadd>
    7180:	b008      	add	sp, #32
    7182:	bc1c      	pop	{r2, r3, r4}
    7184:	4690      	mov	r8, r2
    7186:	4699      	mov	r9, r3
    7188:	46a2      	mov	sl, r4
    718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    718c:	2380      	movs	r3, #128	; 0x80
    718e:	05db      	lsls	r3, r3, #23
    7190:	f002 fad0 	bl	9734 <__aeabi_dadd>
    7194:	0002      	movs	r2, r0
    7196:	000b      	movs	r3, r1
    7198:	0030      	movs	r0, r6
    719a:	0039      	movs	r1, r7
    719c:	f002 fdda 	bl	9d54 <__aeabi_ddiv>
    71a0:	0004      	movs	r4, r0
    71a2:	4648      	mov	r0, r9
    71a4:	000d      	movs	r5, r1
    71a6:	f003 fff3 	bl	b190 <__aeabi_i2d>
    71aa:	0022      	movs	r2, r4
    71ac:	9002      	str	r0, [sp, #8]
    71ae:	9103      	str	r1, [sp, #12]
    71b0:	002b      	movs	r3, r5
    71b2:	0020      	movs	r0, r4
    71b4:	0029      	movs	r1, r5
    71b6:	9404      	str	r4, [sp, #16]
    71b8:	9505      	str	r5, [sp, #20]
    71ba:	f003 f9ff 	bl	a5bc <__aeabi_dmul>
    71be:	0004      	movs	r4, r0
    71c0:	000d      	movs	r5, r1
    71c2:	4ba2      	ldr	r3, [pc, #648]	; (744c <__ieee754_log+0x39c>)
    71c4:	0002      	movs	r2, r0
    71c6:	4443      	add	r3, r8
    71c8:	469a      	mov	sl, r3
    71ca:	000b      	movs	r3, r1
    71cc:	9400      	str	r4, [sp, #0]
    71ce:	9501      	str	r5, [sp, #4]
    71d0:	f003 f9f4 	bl	a5bc <__aeabi_dmul>
    71d4:	0004      	movs	r4, r0
    71d6:	000d      	movs	r5, r1
    71d8:	4a9d      	ldr	r2, [pc, #628]	; (7450 <__ieee754_log+0x3a0>)
    71da:	4b9e      	ldr	r3, [pc, #632]	; (7454 <__ieee754_log+0x3a4>)
    71dc:	f003 f9ee 	bl	a5bc <__aeabi_dmul>
    71e0:	4a9d      	ldr	r2, [pc, #628]	; (7458 <__ieee754_log+0x3a8>)
    71e2:	4b9e      	ldr	r3, [pc, #632]	; (745c <__ieee754_log+0x3ac>)
    71e4:	f002 faa6 	bl	9734 <__aeabi_dadd>
    71e8:	0022      	movs	r2, r4
    71ea:	002b      	movs	r3, r5
    71ec:	f003 f9e6 	bl	a5bc <__aeabi_dmul>
    71f0:	4a9b      	ldr	r2, [pc, #620]	; (7460 <__ieee754_log+0x3b0>)
    71f2:	4b9c      	ldr	r3, [pc, #624]	; (7464 <__ieee754_log+0x3b4>)
    71f4:	f002 fa9e 	bl	9734 <__aeabi_dadd>
    71f8:	0022      	movs	r2, r4
    71fa:	002b      	movs	r3, r5
    71fc:	f003 f9de 	bl	a5bc <__aeabi_dmul>
    7200:	4a99      	ldr	r2, [pc, #612]	; (7468 <__ieee754_log+0x3b8>)
    7202:	4b9a      	ldr	r3, [pc, #616]	; (746c <__ieee754_log+0x3bc>)
    7204:	f002 fa96 	bl	9734 <__aeabi_dadd>
    7208:	9a00      	ldr	r2, [sp, #0]
    720a:	9b01      	ldr	r3, [sp, #4]
    720c:	f003 f9d6 	bl	a5bc <__aeabi_dmul>
    7210:	4a97      	ldr	r2, [pc, #604]	; (7470 <__ieee754_log+0x3c0>)
    7212:	9000      	str	r0, [sp, #0]
    7214:	9101      	str	r1, [sp, #4]
    7216:	4b97      	ldr	r3, [pc, #604]	; (7474 <__ieee754_log+0x3c4>)
    7218:	0020      	movs	r0, r4
    721a:	0029      	movs	r1, r5
    721c:	f003 f9ce 	bl	a5bc <__aeabi_dmul>
    7220:	4a95      	ldr	r2, [pc, #596]	; (7478 <__ieee754_log+0x3c8>)
    7222:	4b96      	ldr	r3, [pc, #600]	; (747c <__ieee754_log+0x3cc>)
    7224:	f002 fa86 	bl	9734 <__aeabi_dadd>
    7228:	0022      	movs	r2, r4
    722a:	002b      	movs	r3, r5
    722c:	f003 f9c6 	bl	a5bc <__aeabi_dmul>
    7230:	4a93      	ldr	r2, [pc, #588]	; (7480 <__ieee754_log+0x3d0>)
    7232:	4b94      	ldr	r3, [pc, #592]	; (7484 <__ieee754_log+0x3d4>)
    7234:	f002 fa7e 	bl	9734 <__aeabi_dadd>
    7238:	0022      	movs	r2, r4
    723a:	002b      	movs	r3, r5
    723c:	f003 f9be 	bl	a5bc <__aeabi_dmul>
    7240:	000b      	movs	r3, r1
    7242:	0002      	movs	r2, r0
    7244:	9800      	ldr	r0, [sp, #0]
    7246:	9901      	ldr	r1, [sp, #4]
    7248:	f002 fa74 	bl	9734 <__aeabi_dadd>
    724c:	000d      	movs	r5, r1
    724e:	4641      	mov	r1, r8
    7250:	4b8d      	ldr	r3, [pc, #564]	; (7488 <__ieee754_log+0x3d8>)
    7252:	0004      	movs	r4, r0
    7254:	1a5b      	subs	r3, r3, r1
    7256:	4651      	mov	r1, sl
    7258:	430b      	orrs	r3, r1
    725a:	2b00      	cmp	r3, #0
    725c:	dd54      	ble.n	7308 <__ieee754_log+0x258>
    725e:	2200      	movs	r2, #0
    7260:	4b8a      	ldr	r3, [pc, #552]	; (748c <__ieee754_log+0x3dc>)
    7262:	0030      	movs	r0, r6
    7264:	0039      	movs	r1, r7
    7266:	f003 f9a9 	bl	a5bc <__aeabi_dmul>
    726a:	0032      	movs	r2, r6
    726c:	003b      	movs	r3, r7
    726e:	f003 f9a5 	bl	a5bc <__aeabi_dmul>
    7272:	464b      	mov	r3, r9
    7274:	000a      	movs	r2, r1
    7276:	0001      	movs	r1, r0
    7278:	9100      	str	r1, [sp, #0]
    727a:	9201      	str	r2, [sp, #4]
    727c:	2b00      	cmp	r3, #0
    727e:	d172      	bne.n	7366 <__ieee754_log+0x2b6>
    7280:	0013      	movs	r3, r2
    7282:	0029      	movs	r1, r5
    7284:	0002      	movs	r2, r0
    7286:	0020      	movs	r0, r4
    7288:	f002 fa54 	bl	9734 <__aeabi_dadd>
    728c:	9a04      	ldr	r2, [sp, #16]
    728e:	9b05      	ldr	r3, [sp, #20]
    7290:	f003 f994 	bl	a5bc <__aeabi_dmul>
    7294:	0002      	movs	r2, r0
    7296:	000b      	movs	r3, r1
    7298:	9800      	ldr	r0, [sp, #0]
    729a:	9901      	ldr	r1, [sp, #4]
    729c:	f003 fc0e 	bl	aabc <__aeabi_dsub>
    72a0:	0002      	movs	r2, r0
    72a2:	000b      	movs	r3, r1
    72a4:	0030      	movs	r0, r6
    72a6:	0039      	movs	r1, r7
    72a8:	f003 fc08 	bl	aabc <__aeabi_dsub>
    72ac:	e768      	b.n	7180 <__ieee754_log+0xd0>
    72ae:	2200      	movs	r2, #0
    72b0:	2300      	movs	r3, #0
    72b2:	2000      	movs	r0, #0
    72b4:	4976      	ldr	r1, [pc, #472]	; (7490 <__ieee754_log+0x3e0>)
    72b6:	f002 fd4d 	bl	9d54 <__aeabi_ddiv>
    72ba:	e761      	b.n	7180 <__ieee754_log+0xd0>
    72bc:	4a75      	ldr	r2, [pc, #468]	; (7494 <__ieee754_log+0x3e4>)
    72be:	4b76      	ldr	r3, [pc, #472]	; (7498 <__ieee754_log+0x3e8>)
    72c0:	0030      	movs	r0, r6
    72c2:	0039      	movs	r1, r7
    72c4:	f003 f97a 	bl	a5bc <__aeabi_dmul>
    72c8:	0002      	movs	r2, r0
    72ca:	000b      	movs	r3, r1
    72cc:	2000      	movs	r0, #0
    72ce:	496f      	ldr	r1, [pc, #444]	; (748c <__ieee754_log+0x3dc>)
    72d0:	f003 fbf4 	bl	aabc <__aeabi_dsub>
    72d4:	0032      	movs	r2, r6
    72d6:	0004      	movs	r4, r0
    72d8:	000d      	movs	r5, r1
    72da:	003b      	movs	r3, r7
    72dc:	0030      	movs	r0, r6
    72de:	0039      	movs	r1, r7
    72e0:	f003 f96c 	bl	a5bc <__aeabi_dmul>
    72e4:	000b      	movs	r3, r1
    72e6:	0002      	movs	r2, r0
    72e8:	0029      	movs	r1, r5
    72ea:	0020      	movs	r0, r4
    72ec:	f003 f966 	bl	a5bc <__aeabi_dmul>
    72f0:	464b      	mov	r3, r9
    72f2:	0004      	movs	r4, r0
    72f4:	000d      	movs	r5, r1
    72f6:	2b00      	cmp	r3, #0
    72f8:	d172      	bne.n	73e0 <__ieee754_log+0x330>
    72fa:	0002      	movs	r2, r0
    72fc:	000b      	movs	r3, r1
    72fe:	0030      	movs	r0, r6
    7300:	0039      	movs	r1, r7
    7302:	f003 fbdb 	bl	aabc <__aeabi_dsub>
    7306:	e73b      	b.n	7180 <__ieee754_log+0xd0>
    7308:	464b      	mov	r3, r9
    730a:	2b00      	cmp	r3, #0
    730c:	d100      	bne.n	7310 <__ieee754_log+0x260>
    730e:	e0c5      	b.n	749c <__ieee754_log+0x3ec>
    7310:	9802      	ldr	r0, [sp, #8]
    7312:	9903      	ldr	r1, [sp, #12]
    7314:	4a49      	ldr	r2, [pc, #292]	; (743c <__ieee754_log+0x38c>)
    7316:	4b4a      	ldr	r3, [pc, #296]	; (7440 <__ieee754_log+0x390>)
    7318:	f003 f950 	bl	a5bc <__aeabi_dmul>
    731c:	0022      	movs	r2, r4
    731e:	9000      	str	r0, [sp, #0]
    7320:	9101      	str	r1, [sp, #4]
    7322:	002b      	movs	r3, r5
    7324:	0030      	movs	r0, r6
    7326:	0039      	movs	r1, r7
    7328:	f003 fbc8 	bl	aabc <__aeabi_dsub>
    732c:	9a04      	ldr	r2, [sp, #16]
    732e:	9b05      	ldr	r3, [sp, #20]
    7330:	f003 f944 	bl	a5bc <__aeabi_dmul>
    7334:	4a43      	ldr	r2, [pc, #268]	; (7444 <__ieee754_log+0x394>)
    7336:	0004      	movs	r4, r0
    7338:	000d      	movs	r5, r1
    733a:	9802      	ldr	r0, [sp, #8]
    733c:	9903      	ldr	r1, [sp, #12]
    733e:	4b42      	ldr	r3, [pc, #264]	; (7448 <__ieee754_log+0x398>)
    7340:	f003 f93c 	bl	a5bc <__aeabi_dmul>
    7344:	0002      	movs	r2, r0
    7346:	000b      	movs	r3, r1
    7348:	0020      	movs	r0, r4
    734a:	0029      	movs	r1, r5
    734c:	f003 fbb6 	bl	aabc <__aeabi_dsub>
    7350:	0032      	movs	r2, r6
    7352:	003b      	movs	r3, r7
    7354:	f003 fbb2 	bl	aabc <__aeabi_dsub>
    7358:	0002      	movs	r2, r0
    735a:	000b      	movs	r3, r1
    735c:	9800      	ldr	r0, [sp, #0]
    735e:	9901      	ldr	r1, [sp, #4]
    7360:	f003 fbac 	bl	aabc <__aeabi_dsub>
    7364:	e70c      	b.n	7180 <__ieee754_log+0xd0>
    7366:	4a35      	ldr	r2, [pc, #212]	; (743c <__ieee754_log+0x38c>)
    7368:	4b35      	ldr	r3, [pc, #212]	; (7440 <__ieee754_log+0x390>)
    736a:	9802      	ldr	r0, [sp, #8]
    736c:	9903      	ldr	r1, [sp, #12]
    736e:	f003 f925 	bl	a5bc <__aeabi_dmul>
    7372:	9a00      	ldr	r2, [sp, #0]
    7374:	9b01      	ldr	r3, [sp, #4]
    7376:	9006      	str	r0, [sp, #24]
    7378:	9107      	str	r1, [sp, #28]
    737a:	0020      	movs	r0, r4
    737c:	0029      	movs	r1, r5
    737e:	f002 f9d9 	bl	9734 <__aeabi_dadd>
    7382:	9a04      	ldr	r2, [sp, #16]
    7384:	9b05      	ldr	r3, [sp, #20]
    7386:	f003 f919 	bl	a5bc <__aeabi_dmul>
    738a:	4a2e      	ldr	r2, [pc, #184]	; (7444 <__ieee754_log+0x394>)
    738c:	0004      	movs	r4, r0
    738e:	000d      	movs	r5, r1
    7390:	9802      	ldr	r0, [sp, #8]
    7392:	9903      	ldr	r1, [sp, #12]
    7394:	4b2c      	ldr	r3, [pc, #176]	; (7448 <__ieee754_log+0x398>)
    7396:	f003 f911 	bl	a5bc <__aeabi_dmul>
    739a:	0002      	movs	r2, r0
    739c:	000b      	movs	r3, r1
    739e:	0020      	movs	r0, r4
    73a0:	0029      	movs	r1, r5
    73a2:	f002 f9c7 	bl	9734 <__aeabi_dadd>
    73a6:	0002      	movs	r2, r0
    73a8:	000b      	movs	r3, r1
    73aa:	9800      	ldr	r0, [sp, #0]
    73ac:	9901      	ldr	r1, [sp, #4]
    73ae:	f003 fb85 	bl	aabc <__aeabi_dsub>
    73b2:	0032      	movs	r2, r6
    73b4:	003b      	movs	r3, r7
    73b6:	f003 fb81 	bl	aabc <__aeabi_dsub>
    73ba:	0002      	movs	r2, r0
    73bc:	000b      	movs	r3, r1
    73be:	9806      	ldr	r0, [sp, #24]
    73c0:	9907      	ldr	r1, [sp, #28]
    73c2:	f003 fb7b 	bl	aabc <__aeabi_dsub>
    73c6:	e6db      	b.n	7180 <__ieee754_log+0xd0>
    73c8:	0002      	movs	r2, r0
    73ca:	000b      	movs	r3, r1
    73cc:	f003 fb76 	bl	aabc <__aeabi_dsub>
    73d0:	2200      	movs	r2, #0
    73d2:	2300      	movs	r3, #0
    73d4:	f002 fcbe 	bl	9d54 <__aeabi_ddiv>
    73d8:	e6d2      	b.n	7180 <__ieee754_log+0xd0>
    73da:	2000      	movs	r0, #0
    73dc:	2100      	movs	r1, #0
    73de:	e6cf      	b.n	7180 <__ieee754_log+0xd0>
    73e0:	4648      	mov	r0, r9
    73e2:	f003 fed5 	bl	b190 <__aeabi_i2d>
    73e6:	4a15      	ldr	r2, [pc, #84]	; (743c <__ieee754_log+0x38c>)
    73e8:	4b15      	ldr	r3, [pc, #84]	; (7440 <__ieee754_log+0x390>)
    73ea:	9000      	str	r0, [sp, #0]
    73ec:	9101      	str	r1, [sp, #4]
    73ee:	f003 f8e5 	bl	a5bc <__aeabi_dmul>
    73f2:	4a14      	ldr	r2, [pc, #80]	; (7444 <__ieee754_log+0x394>)
    73f4:	9002      	str	r0, [sp, #8]
    73f6:	9103      	str	r1, [sp, #12]
    73f8:	9800      	ldr	r0, [sp, #0]
    73fa:	9901      	ldr	r1, [sp, #4]
    73fc:	4b12      	ldr	r3, [pc, #72]	; (7448 <__ieee754_log+0x398>)
    73fe:	f003 f8dd 	bl	a5bc <__aeabi_dmul>
    7402:	0002      	movs	r2, r0
    7404:	000b      	movs	r3, r1
    7406:	0020      	movs	r0, r4
    7408:	0029      	movs	r1, r5
    740a:	f003 fb57 	bl	aabc <__aeabi_dsub>
    740e:	0032      	movs	r2, r6
    7410:	003b      	movs	r3, r7
    7412:	f003 fb53 	bl	aabc <__aeabi_dsub>
    7416:	0002      	movs	r2, r0
    7418:	000b      	movs	r3, r1
    741a:	9802      	ldr	r0, [sp, #8]
    741c:	9903      	ldr	r1, [sp, #12]
    741e:	f003 fb4d 	bl	aabc <__aeabi_dsub>
    7422:	e6ad      	b.n	7180 <__ieee754_log+0xd0>
    7424:	000fffff 	.word	0x000fffff
    7428:	43500000 	.word	0x43500000
    742c:	7fefffff 	.word	0x7fefffff
    7430:	fffffc01 	.word	0xfffffc01
    7434:	00095f64 	.word	0x00095f64
    7438:	3ff00000 	.word	0x3ff00000
    743c:	fee00000 	.word	0xfee00000
    7440:	3fe62e42 	.word	0x3fe62e42
    7444:	35793c76 	.word	0x35793c76
    7448:	3dea39ef 	.word	0x3dea39ef
    744c:	fff9eb86 	.word	0xfff9eb86
    7450:	df3e5244 	.word	0xdf3e5244
    7454:	3fc2f112 	.word	0x3fc2f112
    7458:	96cb03de 	.word	0x96cb03de
    745c:	3fc74664 	.word	0x3fc74664
    7460:	94229359 	.word	0x94229359
    7464:	3fd24924 	.word	0x3fd24924
    7468:	55555593 	.word	0x55555593
    746c:	3fe55555 	.word	0x3fe55555
    7470:	d078c69f 	.word	0xd078c69f
    7474:	3fc39a09 	.word	0x3fc39a09
    7478:	1d8e78af 	.word	0x1d8e78af
    747c:	3fcc71c5 	.word	0x3fcc71c5
    7480:	9997fa04 	.word	0x9997fa04
    7484:	3fd99999 	.word	0x3fd99999
    7488:	0006b851 	.word	0x0006b851
    748c:	3fe00000 	.word	0x3fe00000
    7490:	c3500000 	.word	0xc3500000
    7494:	55555555 	.word	0x55555555
    7498:	3fd55555 	.word	0x3fd55555
    749c:	0022      	movs	r2, r4
    749e:	002b      	movs	r3, r5
    74a0:	0030      	movs	r0, r6
    74a2:	0039      	movs	r1, r7
    74a4:	f003 fb0a 	bl	aabc <__aeabi_dsub>
    74a8:	9a04      	ldr	r2, [sp, #16]
    74aa:	9b05      	ldr	r3, [sp, #20]
    74ac:	f003 f886 	bl	a5bc <__aeabi_dmul>
    74b0:	e6f6      	b.n	72a0 <__ieee754_log+0x1f0>
    74b2:	46c0      	nop			; (mov r8, r8)

000074b4 <__ieee754_pow>:
    74b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74b6:	4657      	mov	r7, sl
    74b8:	464e      	mov	r6, r9
    74ba:	4645      	mov	r5, r8
    74bc:	46de      	mov	lr, fp
    74be:	001c      	movs	r4, r3
    74c0:	0013      	movs	r3, r2
    74c2:	b5e0      	push	{r5, r6, r7, lr}
    74c4:	0065      	lsls	r5, r4, #1
    74c6:	b091      	sub	sp, #68	; 0x44
    74c8:	086d      	lsrs	r5, r5, #1
    74ca:	9300      	str	r3, [sp, #0]
    74cc:	9401      	str	r4, [sp, #4]
    74ce:	0007      	movs	r7, r0
    74d0:	000e      	movs	r6, r1
    74d2:	4680      	mov	r8, r0
    74d4:	4689      	mov	r9, r1
    74d6:	46a2      	mov	sl, r4
    74d8:	432b      	orrs	r3, r5
    74da:	d031      	beq.n	7540 <__ieee754_pow+0x8c>
    74dc:	4b67      	ldr	r3, [pc, #412]	; (767c <__ieee754_pow+0x1c8>)
    74de:	0074      	lsls	r4, r6, #1
    74e0:	0864      	lsrs	r4, r4, #1
    74e2:	429c      	cmp	r4, r3
    74e4:	dc27      	bgt.n	7536 <__ieee754_pow+0x82>
    74e6:	d024      	beq.n	7532 <__ieee754_pow+0x7e>
    74e8:	429d      	cmp	r5, r3
    74ea:	dc24      	bgt.n	7536 <__ieee754_pow+0x82>
    74ec:	4b63      	ldr	r3, [pc, #396]	; (767c <__ieee754_pow+0x1c8>)
    74ee:	429d      	cmp	r5, r3
    74f0:	d100      	bne.n	74f4 <__ieee754_pow+0x40>
    74f2:	e081      	b.n	75f8 <__ieee754_pow+0x144>
    74f4:	2300      	movs	r3, #0
    74f6:	469b      	mov	fp, r3
    74f8:	464b      	mov	r3, r9
    74fa:	2b00      	cmp	r3, #0
    74fc:	da00      	bge.n	7500 <__ieee754_pow+0x4c>
    74fe:	e07f      	b.n	7600 <__ieee754_pow+0x14c>
    7500:	2a00      	cmp	r2, #0
    7502:	d12c      	bne.n	755e <__ieee754_pow+0xaa>
    7504:	4b5d      	ldr	r3, [pc, #372]	; (767c <__ieee754_pow+0x1c8>)
    7506:	429d      	cmp	r5, r3
    7508:	d100      	bne.n	750c <__ieee754_pow+0x58>
    750a:	e097      	b.n	763c <__ieee754_pow+0x188>
    750c:	4b5c      	ldr	r3, [pc, #368]	; (7680 <__ieee754_pow+0x1cc>)
    750e:	429d      	cmp	r5, r3
    7510:	d066      	beq.n	75e0 <__ieee754_pow+0x12c>
    7512:	2380      	movs	r3, #128	; 0x80
    7514:	05db      	lsls	r3, r3, #23
    7516:	459a      	cmp	sl, r3
    7518:	d100      	bne.n	751c <__ieee754_pow+0x68>
    751a:	e3b9      	b.n	7c90 <__ieee754_pow+0x7dc>
    751c:	4b59      	ldr	r3, [pc, #356]	; (7684 <__ieee754_pow+0x1d0>)
    751e:	459a      	cmp	sl, r3
    7520:	d11d      	bne.n	755e <__ieee754_pow+0xaa>
    7522:	464b      	mov	r3, r9
    7524:	2b00      	cmp	r3, #0
    7526:	db1a      	blt.n	755e <__ieee754_pow+0xaa>
    7528:	0038      	movs	r0, r7
    752a:	0031      	movs	r1, r6
    752c:	f000 fcf8 	bl	7f20 <__ieee754_sqrt>
    7530:	e008      	b.n	7544 <__ieee754_pow+0x90>
    7532:	2800      	cmp	r0, #0
    7534:	d00d      	beq.n	7552 <__ieee754_pow+0x9e>
    7536:	4b54      	ldr	r3, [pc, #336]	; (7688 <__ieee754_pow+0x1d4>)
    7538:	469c      	mov	ip, r3
    753a:	4464      	add	r4, ip
    753c:	4327      	orrs	r7, r4
    753e:	d10a      	bne.n	7556 <__ieee754_pow+0xa2>
    7540:	2000      	movs	r0, #0
    7542:	494f      	ldr	r1, [pc, #316]	; (7680 <__ieee754_pow+0x1cc>)
    7544:	b011      	add	sp, #68	; 0x44
    7546:	bc3c      	pop	{r2, r3, r4, r5}
    7548:	4690      	mov	r8, r2
    754a:	4699      	mov	r9, r3
    754c:	46a2      	mov	sl, r4
    754e:	46ab      	mov	fp, r5
    7550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7552:	42a5      	cmp	r5, r4
    7554:	ddca      	ble.n	74ec <__ieee754_pow+0x38>
    7556:	484d      	ldr	r0, [pc, #308]	; (768c <__ieee754_pow+0x1d8>)
    7558:	f000 fdd2 	bl	8100 <nan>
    755c:	e7f2      	b.n	7544 <__ieee754_pow+0x90>
    755e:	0038      	movs	r0, r7
    7560:	0031      	movs	r1, r6
    7562:	f000 fdbd 	bl	80e0 <fabs>
    7566:	4643      	mov	r3, r8
    7568:	2b00      	cmp	r3, #0
    756a:	d11d      	bne.n	75a8 <__ieee754_pow+0xf4>
    756c:	2c00      	cmp	r4, #0
    756e:	d004      	beq.n	757a <__ieee754_pow+0xc6>
    7570:	4a43      	ldr	r2, [pc, #268]	; (7680 <__ieee754_pow+0x1cc>)
    7572:	00b3      	lsls	r3, r6, #2
    7574:	089b      	lsrs	r3, r3, #2
    7576:	4293      	cmp	r3, r2
    7578:	d116      	bne.n	75a8 <__ieee754_pow+0xf4>
    757a:	4653      	mov	r3, sl
    757c:	2b00      	cmp	r3, #0
    757e:	da00      	bge.n	7582 <__ieee754_pow+0xce>
    7580:	e3c5      	b.n	7d0e <__ieee754_pow+0x85a>
    7582:	464b      	mov	r3, r9
    7584:	2b00      	cmp	r3, #0
    7586:	dadd      	bge.n	7544 <__ieee754_pow+0x90>
    7588:	4b3f      	ldr	r3, [pc, #252]	; (7688 <__ieee754_pow+0x1d4>)
    758a:	469c      	mov	ip, r3
    758c:	465b      	mov	r3, fp
    758e:	4464      	add	r4, ip
    7590:	431c      	orrs	r4, r3
    7592:	d101      	bne.n	7598 <__ieee754_pow+0xe4>
    7594:	f000 fc53 	bl	7e3e <__ieee754_pow+0x98a>
    7598:	465b      	mov	r3, fp
    759a:	2b01      	cmp	r3, #1
    759c:	d1d2      	bne.n	7544 <__ieee754_pow+0x90>
    759e:	2480      	movs	r4, #128	; 0x80
    75a0:	0624      	lsls	r4, r4, #24
    75a2:	190b      	adds	r3, r1, r4
    75a4:	0019      	movs	r1, r3
    75a6:	e7cd      	b.n	7544 <__ieee754_pow+0x90>
    75a8:	0ff3      	lsrs	r3, r6, #31
    75aa:	3b01      	subs	r3, #1
    75ac:	4698      	mov	r8, r3
    75ae:	465b      	mov	r3, fp
    75b0:	4642      	mov	r2, r8
    75b2:	4313      	orrs	r3, r2
    75b4:	d057      	beq.n	7666 <__ieee754_pow+0x1b2>
    75b6:	4b36      	ldr	r3, [pc, #216]	; (7690 <__ieee754_pow+0x1dc>)
    75b8:	429d      	cmp	r5, r3
    75ba:	dd77      	ble.n	76ac <__ieee754_pow+0x1f8>
    75bc:	4b35      	ldr	r3, [pc, #212]	; (7694 <__ieee754_pow+0x1e0>)
    75be:	429d      	cmp	r5, r3
    75c0:	dc00      	bgt.n	75c4 <__ieee754_pow+0x110>
    75c2:	e3b1      	b.n	7d28 <__ieee754_pow+0x874>
    75c4:	4b34      	ldr	r3, [pc, #208]	; (7698 <__ieee754_pow+0x1e4>)
    75c6:	429c      	cmp	r4, r3
    75c8:	dc00      	bgt.n	75cc <__ieee754_pow+0x118>
    75ca:	e3a8      	b.n	7d1e <__ieee754_pow+0x86a>
    75cc:	4653      	mov	r3, sl
    75ce:	2b00      	cmp	r3, #0
    75d0:	dd43      	ble.n	765a <__ieee754_pow+0x1a6>
    75d2:	4a32      	ldr	r2, [pc, #200]	; (769c <__ieee754_pow+0x1e8>)
    75d4:	4b32      	ldr	r3, [pc, #200]	; (76a0 <__ieee754_pow+0x1ec>)
    75d6:	0010      	movs	r0, r2
    75d8:	0019      	movs	r1, r3
    75da:	f002 ffef 	bl	a5bc <__aeabi_dmul>
    75de:	e7b1      	b.n	7544 <__ieee754_pow+0x90>
    75e0:	4653      	mov	r3, sl
    75e2:	0038      	movs	r0, r7
    75e4:	0031      	movs	r1, r6
    75e6:	2b00      	cmp	r3, #0
    75e8:	daac      	bge.n	7544 <__ieee754_pow+0x90>
    75ea:	003a      	movs	r2, r7
    75ec:	0033      	movs	r3, r6
    75ee:	2000      	movs	r0, #0
    75f0:	4923      	ldr	r1, [pc, #140]	; (7680 <__ieee754_pow+0x1cc>)
    75f2:	f002 fbaf 	bl	9d54 <__aeabi_ddiv>
    75f6:	e7a5      	b.n	7544 <__ieee754_pow+0x90>
    75f8:	2a00      	cmp	r2, #0
    75fa:	d100      	bne.n	75fe <__ieee754_pow+0x14a>
    75fc:	e77a      	b.n	74f4 <__ieee754_pow+0x40>
    75fe:	e79a      	b.n	7536 <__ieee754_pow+0x82>
    7600:	4b28      	ldr	r3, [pc, #160]	; (76a4 <__ieee754_pow+0x1f0>)
    7602:	429d      	cmp	r5, r3
    7604:	dc2c      	bgt.n	7660 <__ieee754_pow+0x1ac>
    7606:	4b24      	ldr	r3, [pc, #144]	; (7698 <__ieee754_pow+0x1e4>)
    7608:	429d      	cmp	r5, r3
    760a:	dc00      	bgt.n	760e <__ieee754_pow+0x15a>
    760c:	e778      	b.n	7500 <__ieee754_pow+0x4c>
    760e:	4926      	ldr	r1, [pc, #152]	; (76a8 <__ieee754_pow+0x1f4>)
    7610:	152b      	asrs	r3, r5, #20
    7612:	468c      	mov	ip, r1
    7614:	4463      	add	r3, ip
    7616:	2b14      	cmp	r3, #20
    7618:	dc01      	bgt.n	761e <__ieee754_pow+0x16a>
    761a:	f000 fbf3 	bl	7e04 <__ieee754_pow+0x950>
    761e:	2134      	movs	r1, #52	; 0x34
    7620:	1acb      	subs	r3, r1, r3
    7622:	9900      	ldr	r1, [sp, #0]
    7624:	40d9      	lsrs	r1, r3
    7626:	0008      	movs	r0, r1
    7628:	4098      	lsls	r0, r3
    762a:	4282      	cmp	r2, r0
    762c:	d000      	beq.n	7630 <__ieee754_pow+0x17c>
    762e:	e767      	b.n	7500 <__ieee754_pow+0x4c>
    7630:	2301      	movs	r3, #1
    7632:	4019      	ands	r1, r3
    7634:	3301      	adds	r3, #1
    7636:	1a5b      	subs	r3, r3, r1
    7638:	469b      	mov	fp, r3
    763a:	e761      	b.n	7500 <__ieee754_pow+0x4c>
    763c:	4b12      	ldr	r3, [pc, #72]	; (7688 <__ieee754_pow+0x1d4>)
    763e:	18e3      	adds	r3, r4, r3
    7640:	431f      	orrs	r7, r3
    7642:	d100      	bne.n	7646 <__ieee754_pow+0x192>
    7644:	e77c      	b.n	7540 <__ieee754_pow+0x8c>
    7646:	4b14      	ldr	r3, [pc, #80]	; (7698 <__ieee754_pow+0x1e4>)
    7648:	429c      	cmp	r4, r3
    764a:	dc00      	bgt.n	764e <__ieee754_pow+0x19a>
    764c:	e327      	b.n	7c9e <__ieee754_pow+0x7ea>
    764e:	9800      	ldr	r0, [sp, #0]
    7650:	9901      	ldr	r1, [sp, #4]
    7652:	4653      	mov	r3, sl
    7654:	2b00      	cmp	r3, #0
    7656:	db00      	blt.n	765a <__ieee754_pow+0x1a6>
    7658:	e774      	b.n	7544 <__ieee754_pow+0x90>
    765a:	2000      	movs	r0, #0
    765c:	2100      	movs	r1, #0
    765e:	e771      	b.n	7544 <__ieee754_pow+0x90>
    7660:	2302      	movs	r3, #2
    7662:	469b      	mov	fp, r3
    7664:	e74c      	b.n	7500 <__ieee754_pow+0x4c>
    7666:	003a      	movs	r2, r7
    7668:	0033      	movs	r3, r6
    766a:	0038      	movs	r0, r7
    766c:	0031      	movs	r1, r6
    766e:	f003 fa25 	bl	aabc <__aeabi_dsub>
    7672:	0002      	movs	r2, r0
    7674:	000b      	movs	r3, r1
    7676:	f002 fb6d 	bl	9d54 <__aeabi_ddiv>
    767a:	e763      	b.n	7544 <__ieee754_pow+0x90>
    767c:	7ff00000 	.word	0x7ff00000
    7680:	3ff00000 	.word	0x3ff00000
    7684:	3fe00000 	.word	0x3fe00000
    7688:	c0100000 	.word	0xc0100000
    768c:	00010178 	.word	0x00010178
    7690:	41e00000 	.word	0x41e00000
    7694:	43f00000 	.word	0x43f00000
    7698:	3fefffff 	.word	0x3fefffff
    769c:	8800759c 	.word	0x8800759c
    76a0:	7e37e43c 	.word	0x7e37e43c
    76a4:	433fffff 	.word	0x433fffff
    76a8:	fffffc01 	.word	0xfffffc01
    76ac:	4be9      	ldr	r3, [pc, #932]	; (7a54 <__ieee754_pow+0x5a0>)
    76ae:	2200      	movs	r2, #0
    76b0:	429c      	cmp	r4, r3
    76b2:	dc06      	bgt.n	76c2 <__ieee754_pow+0x20e>
    76b4:	2200      	movs	r2, #0
    76b6:	4be8      	ldr	r3, [pc, #928]	; (7a58 <__ieee754_pow+0x5a4>)
    76b8:	f002 ff80 	bl	a5bc <__aeabi_dmul>
    76bc:	2235      	movs	r2, #53	; 0x35
    76be:	000c      	movs	r4, r1
    76c0:	4252      	negs	r2, r2
    76c2:	4de6      	ldr	r5, [pc, #920]	; (7a5c <__ieee754_pow+0x5a8>)
    76c4:	1523      	asrs	r3, r4, #20
    76c6:	46ac      	mov	ip, r5
    76c8:	4463      	add	r3, ip
    76ca:	4699      	mov	r9, r3
    76cc:	0324      	lsls	r4, r4, #12
    76ce:	4de4      	ldr	r5, [pc, #912]	; (7a60 <__ieee754_pow+0x5ac>)
    76d0:	4be4      	ldr	r3, [pc, #912]	; (7a64 <__ieee754_pow+0x5b0>)
    76d2:	0b24      	lsrs	r4, r4, #12
    76d4:	4491      	add	r9, r2
    76d6:	4325      	orrs	r5, r4
    76d8:	429c      	cmp	r4, r3
    76da:	dd09      	ble.n	76f0 <__ieee754_pow+0x23c>
    76dc:	4be2      	ldr	r3, [pc, #904]	; (7a68 <__ieee754_pow+0x5b4>)
    76de:	429c      	cmp	r4, r3
    76e0:	dc00      	bgt.n	76e4 <__ieee754_pow+0x230>
    76e2:	e3b6      	b.n	7e52 <__ieee754_pow+0x99e>
    76e4:	2301      	movs	r3, #1
    76e6:	469c      	mov	ip, r3
    76e8:	4be0      	ldr	r3, [pc, #896]	; (7a6c <__ieee754_pow+0x5b8>)
    76ea:	44e1      	add	r9, ip
    76ec:	469c      	mov	ip, r3
    76ee:	4465      	add	r5, ip
    76f0:	2300      	movs	r3, #0
    76f2:	2400      	movs	r4, #0
    76f4:	2200      	movs	r2, #0
    76f6:	9308      	str	r3, [sp, #32]
    76f8:	9409      	str	r4, [sp, #36]	; 0x24
    76fa:	930c      	str	r3, [sp, #48]	; 0x30
    76fc:	940d      	str	r4, [sp, #52]	; 0x34
    76fe:	2400      	movs	r4, #0
    7700:	4bd7      	ldr	r3, [pc, #860]	; (7a60 <__ieee754_pow+0x5ac>)
    7702:	9206      	str	r2, [sp, #24]
    7704:	9307      	str	r3, [sp, #28]
    7706:	9a06      	ldr	r2, [sp, #24]
    7708:	9b07      	ldr	r3, [sp, #28]
    770a:	0029      	movs	r1, r5
    770c:	900a      	str	r0, [sp, #40]	; 0x28
    770e:	910b      	str	r1, [sp, #44]	; 0x2c
    7710:	f003 f9d4 	bl	aabc <__aeabi_dsub>
    7714:	9a06      	ldr	r2, [sp, #24]
    7716:	9b07      	ldr	r3, [sp, #28]
    7718:	0006      	movs	r6, r0
    771a:	000f      	movs	r7, r1
    771c:	980a      	ldr	r0, [sp, #40]	; 0x28
    771e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7720:	f002 f808 	bl	9734 <__aeabi_dadd>
    7724:	0002      	movs	r2, r0
    7726:	000b      	movs	r3, r1
    7728:	2000      	movs	r0, #0
    772a:	49cd      	ldr	r1, [pc, #820]	; (7a60 <__ieee754_pow+0x5ac>)
    772c:	f002 fb12 	bl	9d54 <__aeabi_ddiv>
    7730:	000a      	movs	r2, r1
    7732:	0001      	movs	r1, r0
    7734:	0013      	movs	r3, r2
    7736:	910e      	str	r1, [sp, #56]	; 0x38
    7738:	920f      	str	r2, [sp, #60]	; 0x3c
    773a:	0002      	movs	r2, r0
    773c:	0039      	movs	r1, r7
    773e:	0030      	movs	r0, r6
    7740:	f002 ff3c 	bl	a5bc <__aeabi_dmul>
    7744:	000a      	movs	r2, r1
    7746:	0001      	movs	r1, r0
    7748:	2080      	movs	r0, #128	; 0x80
    774a:	9104      	str	r1, [sp, #16]
    774c:	9205      	str	r2, [sp, #20]
    774e:	0013      	movs	r3, r2
    7750:	2200      	movs	r2, #0
    7752:	1069      	asrs	r1, r5, #1
    7754:	2580      	movs	r5, #128	; 0x80
    7756:	0300      	lsls	r0, r0, #12
    7758:	4684      	mov	ip, r0
    775a:	9202      	str	r2, [sp, #8]
    775c:	9303      	str	r3, [sp, #12]
    775e:	2200      	movs	r2, #0
    7760:	05ad      	lsls	r5, r5, #22
    7762:	430d      	orrs	r5, r1
    7764:	4465      	add	r5, ip
    7766:	192b      	adds	r3, r5, r4
    7768:	9802      	ldr	r0, [sp, #8]
    776a:	9903      	ldr	r1, [sp, #12]
    776c:	0014      	movs	r4, r2
    776e:	001d      	movs	r5, r3
    7770:	f002 ff24 	bl	a5bc <__aeabi_dmul>
    7774:	0002      	movs	r2, r0
    7776:	000b      	movs	r3, r1
    7778:	0030      	movs	r0, r6
    777a:	0039      	movs	r1, r7
    777c:	f003 f99e 	bl	aabc <__aeabi_dsub>
    7780:	9a06      	ldr	r2, [sp, #24]
    7782:	9b07      	ldr	r3, [sp, #28]
    7784:	0006      	movs	r6, r0
    7786:	000f      	movs	r7, r1
    7788:	0020      	movs	r0, r4
    778a:	0029      	movs	r1, r5
    778c:	f003 f996 	bl	aabc <__aeabi_dsub>
    7790:	0002      	movs	r2, r0
    7792:	000b      	movs	r3, r1
    7794:	980a      	ldr	r0, [sp, #40]	; 0x28
    7796:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7798:	f003 f990 	bl	aabc <__aeabi_dsub>
    779c:	9a02      	ldr	r2, [sp, #8]
    779e:	9b03      	ldr	r3, [sp, #12]
    77a0:	f002 ff0c 	bl	a5bc <__aeabi_dmul>
    77a4:	0002      	movs	r2, r0
    77a6:	000b      	movs	r3, r1
    77a8:	0030      	movs	r0, r6
    77aa:	0039      	movs	r1, r7
    77ac:	f003 f986 	bl	aabc <__aeabi_dsub>
    77b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    77b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    77b4:	f002 ff02 	bl	a5bc <__aeabi_dmul>
    77b8:	9d04      	ldr	r5, [sp, #16]
    77ba:	9e05      	ldr	r6, [sp, #20]
    77bc:	9006      	str	r0, [sp, #24]
    77be:	9107      	str	r1, [sp, #28]
    77c0:	002a      	movs	r2, r5
    77c2:	0033      	movs	r3, r6
    77c4:	0028      	movs	r0, r5
    77c6:	0031      	movs	r1, r6
    77c8:	f002 fef8 	bl	a5bc <__aeabi_dmul>
    77cc:	0006      	movs	r6, r0
    77ce:	000f      	movs	r7, r1
    77d0:	4aa7      	ldr	r2, [pc, #668]	; (7a70 <__ieee754_pow+0x5bc>)
    77d2:	4ba8      	ldr	r3, [pc, #672]	; (7a74 <__ieee754_pow+0x5c0>)
    77d4:	f002 fef2 	bl	a5bc <__aeabi_dmul>
    77d8:	4aa7      	ldr	r2, [pc, #668]	; (7a78 <__ieee754_pow+0x5c4>)
    77da:	4ba8      	ldr	r3, [pc, #672]	; (7a7c <__ieee754_pow+0x5c8>)
    77dc:	f001 ffaa 	bl	9734 <__aeabi_dadd>
    77e0:	0032      	movs	r2, r6
    77e2:	003b      	movs	r3, r7
    77e4:	f002 feea 	bl	a5bc <__aeabi_dmul>
    77e8:	4aa5      	ldr	r2, [pc, #660]	; (7a80 <__ieee754_pow+0x5cc>)
    77ea:	4ba6      	ldr	r3, [pc, #664]	; (7a84 <__ieee754_pow+0x5d0>)
    77ec:	f001 ffa2 	bl	9734 <__aeabi_dadd>
    77f0:	0032      	movs	r2, r6
    77f2:	003b      	movs	r3, r7
    77f4:	f002 fee2 	bl	a5bc <__aeabi_dmul>
    77f8:	4aa3      	ldr	r2, [pc, #652]	; (7a88 <__ieee754_pow+0x5d4>)
    77fa:	4ba4      	ldr	r3, [pc, #656]	; (7a8c <__ieee754_pow+0x5d8>)
    77fc:	f001 ff9a 	bl	9734 <__aeabi_dadd>
    7800:	0032      	movs	r2, r6
    7802:	003b      	movs	r3, r7
    7804:	f002 feda 	bl	a5bc <__aeabi_dmul>
    7808:	4aa1      	ldr	r2, [pc, #644]	; (7a90 <__ieee754_pow+0x5dc>)
    780a:	4ba2      	ldr	r3, [pc, #648]	; (7a94 <__ieee754_pow+0x5e0>)
    780c:	f001 ff92 	bl	9734 <__aeabi_dadd>
    7810:	0032      	movs	r2, r6
    7812:	003b      	movs	r3, r7
    7814:	f002 fed2 	bl	a5bc <__aeabi_dmul>
    7818:	4a9f      	ldr	r2, [pc, #636]	; (7a98 <__ieee754_pow+0x5e4>)
    781a:	4ba0      	ldr	r3, [pc, #640]	; (7a9c <__ieee754_pow+0x5e8>)
    781c:	f001 ff8a 	bl	9734 <__aeabi_dadd>
    7820:	0032      	movs	r2, r6
    7822:	0004      	movs	r4, r0
    7824:	000d      	movs	r5, r1
    7826:	003b      	movs	r3, r7
    7828:	0030      	movs	r0, r6
    782a:	0039      	movs	r1, r7
    782c:	f002 fec6 	bl	a5bc <__aeabi_dmul>
    7830:	0002      	movs	r2, r0
    7832:	000b      	movs	r3, r1
    7834:	0020      	movs	r0, r4
    7836:	0029      	movs	r1, r5
    7838:	f002 fec0 	bl	a5bc <__aeabi_dmul>
    783c:	9e02      	ldr	r6, [sp, #8]
    783e:	9f03      	ldr	r7, [sp, #12]
    7840:	0004      	movs	r4, r0
    7842:	000d      	movs	r5, r1
    7844:	9804      	ldr	r0, [sp, #16]
    7846:	9905      	ldr	r1, [sp, #20]
    7848:	0032      	movs	r2, r6
    784a:	003b      	movs	r3, r7
    784c:	f001 ff72 	bl	9734 <__aeabi_dadd>
    7850:	9a06      	ldr	r2, [sp, #24]
    7852:	9b07      	ldr	r3, [sp, #28]
    7854:	f002 feb2 	bl	a5bc <__aeabi_dmul>
    7858:	0022      	movs	r2, r4
    785a:	002b      	movs	r3, r5
    785c:	f001 ff6a 	bl	9734 <__aeabi_dadd>
    7860:	0032      	movs	r2, r6
    7862:	900a      	str	r0, [sp, #40]	; 0x28
    7864:	910b      	str	r1, [sp, #44]	; 0x2c
    7866:	003b      	movs	r3, r7
    7868:	0030      	movs	r0, r6
    786a:	0039      	movs	r1, r7
    786c:	9602      	str	r6, [sp, #8]
    786e:	9703      	str	r7, [sp, #12]
    7870:	f002 fea4 	bl	a5bc <__aeabi_dmul>
    7874:	2200      	movs	r2, #0
    7876:	4b8a      	ldr	r3, [pc, #552]	; (7aa0 <__ieee754_pow+0x5ec>)
    7878:	0004      	movs	r4, r0
    787a:	000d      	movs	r5, r1
    787c:	f001 ff5a 	bl	9734 <__aeabi_dadd>
    7880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7884:	f001 ff56 	bl	9734 <__aeabi_dadd>
    7888:	2600      	movs	r6, #0
    788a:	000f      	movs	r7, r1
    788c:	0032      	movs	r2, r6
    788e:	000b      	movs	r3, r1
    7890:	9802      	ldr	r0, [sp, #8]
    7892:	9903      	ldr	r1, [sp, #12]
    7894:	f002 fe92 	bl	a5bc <__aeabi_dmul>
    7898:	2200      	movs	r2, #0
    789a:	9002      	str	r0, [sp, #8]
    789c:	9103      	str	r1, [sp, #12]
    789e:	4b80      	ldr	r3, [pc, #512]	; (7aa0 <__ieee754_pow+0x5ec>)
    78a0:	0030      	movs	r0, r6
    78a2:	0039      	movs	r1, r7
    78a4:	f003 f90a 	bl	aabc <__aeabi_dsub>
    78a8:	0022      	movs	r2, r4
    78aa:	002b      	movs	r3, r5
    78ac:	f003 f906 	bl	aabc <__aeabi_dsub>
    78b0:	0002      	movs	r2, r0
    78b2:	000b      	movs	r3, r1
    78b4:	980a      	ldr	r0, [sp, #40]	; 0x28
    78b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    78b8:	f003 f900 	bl	aabc <__aeabi_dsub>
    78bc:	9a04      	ldr	r2, [sp, #16]
    78be:	9b05      	ldr	r3, [sp, #20]
    78c0:	f002 fe7c 	bl	a5bc <__aeabi_dmul>
    78c4:	0032      	movs	r2, r6
    78c6:	0004      	movs	r4, r0
    78c8:	000d      	movs	r5, r1
    78ca:	9806      	ldr	r0, [sp, #24]
    78cc:	9907      	ldr	r1, [sp, #28]
    78ce:	003b      	movs	r3, r7
    78d0:	f002 fe74 	bl	a5bc <__aeabi_dmul>
    78d4:	0002      	movs	r2, r0
    78d6:	000b      	movs	r3, r1
    78d8:	0020      	movs	r0, r4
    78da:	0029      	movs	r1, r5
    78dc:	f001 ff2a 	bl	9734 <__aeabi_dadd>
    78e0:	0004      	movs	r4, r0
    78e2:	000d      	movs	r5, r1
    78e4:	0002      	movs	r2, r0
    78e6:	000b      	movs	r3, r1
    78e8:	9802      	ldr	r0, [sp, #8]
    78ea:	9903      	ldr	r1, [sp, #12]
    78ec:	f001 ff22 	bl	9734 <__aeabi_dadd>
    78f0:	2600      	movs	r6, #0
    78f2:	22e0      	movs	r2, #224	; 0xe0
    78f4:	4b6b      	ldr	r3, [pc, #428]	; (7aa4 <__ieee754_pow+0x5f0>)
    78f6:	0612      	lsls	r2, r2, #24
    78f8:	0030      	movs	r0, r6
    78fa:	000f      	movs	r7, r1
    78fc:	f002 fe5e 	bl	a5bc <__aeabi_dmul>
    7900:	9a02      	ldr	r2, [sp, #8]
    7902:	9b03      	ldr	r3, [sp, #12]
    7904:	9004      	str	r0, [sp, #16]
    7906:	9105      	str	r1, [sp, #20]
    7908:	0030      	movs	r0, r6
    790a:	0039      	movs	r1, r7
    790c:	f003 f8d6 	bl	aabc <__aeabi_dsub>
    7910:	0002      	movs	r2, r0
    7912:	000b      	movs	r3, r1
    7914:	0020      	movs	r0, r4
    7916:	0029      	movs	r1, r5
    7918:	f003 f8d0 	bl	aabc <__aeabi_dsub>
    791c:	4a62      	ldr	r2, [pc, #392]	; (7aa8 <__ieee754_pow+0x5f4>)
    791e:	4b61      	ldr	r3, [pc, #388]	; (7aa4 <__ieee754_pow+0x5f0>)
    7920:	f002 fe4c 	bl	a5bc <__aeabi_dmul>
    7924:	4a61      	ldr	r2, [pc, #388]	; (7aac <__ieee754_pow+0x5f8>)
    7926:	0004      	movs	r4, r0
    7928:	000d      	movs	r5, r1
    792a:	4b61      	ldr	r3, [pc, #388]	; (7ab0 <__ieee754_pow+0x5fc>)
    792c:	0030      	movs	r0, r6
    792e:	0039      	movs	r1, r7
    7930:	f002 fe44 	bl	a5bc <__aeabi_dmul>
    7934:	0002      	movs	r2, r0
    7936:	000b      	movs	r3, r1
    7938:	0020      	movs	r0, r4
    793a:	0029      	movs	r1, r5
    793c:	f001 fefa 	bl	9734 <__aeabi_dadd>
    7940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7944:	f001 fef6 	bl	9734 <__aeabi_dadd>
    7948:	0006      	movs	r6, r0
    794a:	4648      	mov	r0, r9
    794c:	000f      	movs	r7, r1
    794e:	f003 fc1f 	bl	b190 <__aeabi_i2d>
    7952:	0004      	movs	r4, r0
    7954:	000d      	movs	r5, r1
    7956:	9804      	ldr	r0, [sp, #16]
    7958:	9905      	ldr	r1, [sp, #20]
    795a:	0032      	movs	r2, r6
    795c:	003b      	movs	r3, r7
    795e:	f001 fee9 	bl	9734 <__aeabi_dadd>
    7962:	9a08      	ldr	r2, [sp, #32]
    7964:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7966:	f001 fee5 	bl	9734 <__aeabi_dadd>
    796a:	0022      	movs	r2, r4
    796c:	002b      	movs	r3, r5
    796e:	f001 fee1 	bl	9734 <__aeabi_dadd>
    7972:	2000      	movs	r0, #0
    7974:	0022      	movs	r2, r4
    7976:	002b      	movs	r3, r5
    7978:	9002      	str	r0, [sp, #8]
    797a:	9103      	str	r1, [sp, #12]
    797c:	f003 f89e 	bl	aabc <__aeabi_dsub>
    7980:	9a08      	ldr	r2, [sp, #32]
    7982:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7984:	f003 f89a 	bl	aabc <__aeabi_dsub>
    7988:	9a04      	ldr	r2, [sp, #16]
    798a:	9b05      	ldr	r3, [sp, #20]
    798c:	f003 f896 	bl	aabc <__aeabi_dsub>
    7990:	0002      	movs	r2, r0
    7992:	000b      	movs	r3, r1
    7994:	0030      	movs	r0, r6
    7996:	0039      	movs	r1, r7
    7998:	f003 f890 	bl	aabc <__aeabi_dsub>
    799c:	9004      	str	r0, [sp, #16]
    799e:	9105      	str	r1, [sp, #20]
    79a0:	465b      	mov	r3, fp
    79a2:	4642      	mov	r2, r8
    79a4:	3b01      	subs	r3, #1
    79a6:	4313      	orrs	r3, r2
    79a8:	d100      	bne.n	79ac <__ieee754_pow+0x4f8>
    79aa:	e1ab      	b.n	7d04 <__ieee754_pow+0x850>
    79ac:	2300      	movs	r3, #0
    79ae:	4c2c      	ldr	r4, [pc, #176]	; (7a60 <__ieee754_pow+0x5ac>)
    79b0:	9306      	str	r3, [sp, #24]
    79b2:	9407      	str	r4, [sp, #28]
    79b4:	9800      	ldr	r0, [sp, #0]
    79b6:	9901      	ldr	r1, [sp, #4]
    79b8:	2600      	movs	r6, #0
    79ba:	000b      	movs	r3, r1
    79bc:	0032      	movs	r2, r6
    79be:	000f      	movs	r7, r1
    79c0:	f003 f87c 	bl	aabc <__aeabi_dsub>
    79c4:	9a02      	ldr	r2, [sp, #8]
    79c6:	9b03      	ldr	r3, [sp, #12]
    79c8:	f002 fdf8 	bl	a5bc <__aeabi_dmul>
    79cc:	9a00      	ldr	r2, [sp, #0]
    79ce:	9b01      	ldr	r3, [sp, #4]
    79d0:	0004      	movs	r4, r0
    79d2:	000d      	movs	r5, r1
    79d4:	9804      	ldr	r0, [sp, #16]
    79d6:	9905      	ldr	r1, [sp, #20]
    79d8:	f002 fdf0 	bl	a5bc <__aeabi_dmul>
    79dc:	0002      	movs	r2, r0
    79de:	000b      	movs	r3, r1
    79e0:	0020      	movs	r0, r4
    79e2:	0029      	movs	r1, r5
    79e4:	f001 fea6 	bl	9734 <__aeabi_dadd>
    79e8:	0004      	movs	r4, r0
    79ea:	000d      	movs	r5, r1
    79ec:	9802      	ldr	r0, [sp, #8]
    79ee:	9903      	ldr	r1, [sp, #12]
    79f0:	0032      	movs	r2, r6
    79f2:	003b      	movs	r3, r7
    79f4:	9400      	str	r4, [sp, #0]
    79f6:	9501      	str	r5, [sp, #4]
    79f8:	f002 fde0 	bl	a5bc <__aeabi_dmul>
    79fc:	0002      	movs	r2, r0
    79fe:	000b      	movs	r3, r1
    7a00:	0006      	movs	r6, r0
    7a02:	000f      	movs	r7, r1
    7a04:	0020      	movs	r0, r4
    7a06:	0029      	movs	r1, r5
    7a08:	f001 fe94 	bl	9734 <__aeabi_dadd>
    7a0c:	4b29      	ldr	r3, [pc, #164]	; (7ab4 <__ieee754_pow+0x600>)
    7a0e:	0004      	movs	r4, r0
    7a10:	000d      	movs	r5, r1
    7a12:	0002      	movs	r2, r0
    7a14:	468b      	mov	fp, r1
    7a16:	4299      	cmp	r1, r3
    7a18:	dc00      	bgt.n	7a1c <__ieee754_pow+0x568>
    7a1a:	e14f      	b.n	7cbc <__ieee754_pow+0x808>
    7a1c:	4b26      	ldr	r3, [pc, #152]	; (7ab8 <__ieee754_pow+0x604>)
    7a1e:	18cb      	adds	r3, r1, r3
    7a20:	4303      	orrs	r3, r0
    7a22:	d000      	beq.n	7a26 <__ieee754_pow+0x572>
    7a24:	e1e2      	b.n	7dec <__ieee754_pow+0x938>
    7a26:	9800      	ldr	r0, [sp, #0]
    7a28:	9901      	ldr	r1, [sp, #4]
    7a2a:	4a24      	ldr	r2, [pc, #144]	; (7abc <__ieee754_pow+0x608>)
    7a2c:	4b24      	ldr	r3, [pc, #144]	; (7ac0 <__ieee754_pow+0x60c>)
    7a2e:	f001 fe81 	bl	9734 <__aeabi_dadd>
    7a32:	0032      	movs	r2, r6
    7a34:	9002      	str	r0, [sp, #8]
    7a36:	9103      	str	r1, [sp, #12]
    7a38:	003b      	movs	r3, r7
    7a3a:	0020      	movs	r0, r4
    7a3c:	0029      	movs	r1, r5
    7a3e:	f003 f83d 	bl	aabc <__aeabi_dsub>
    7a42:	0002      	movs	r2, r0
    7a44:	000b      	movs	r3, r1
    7a46:	9802      	ldr	r0, [sp, #8]
    7a48:	9903      	ldr	r1, [sp, #12]
    7a4a:	f000 fe11 	bl	8670 <__aeabi_dcmpgt>
    7a4e:	46aa      	mov	sl, r5
    7a50:	e038      	b.n	7ac4 <__ieee754_pow+0x610>
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	000fffff 	.word	0x000fffff
    7a58:	43400000 	.word	0x43400000
    7a5c:	fffffc01 	.word	0xfffffc01
    7a60:	3ff00000 	.word	0x3ff00000
    7a64:	0003988e 	.word	0x0003988e
    7a68:	000bb679 	.word	0x000bb679
    7a6c:	fff00000 	.word	0xfff00000
    7a70:	4a454eef 	.word	0x4a454eef
    7a74:	3fca7e28 	.word	0x3fca7e28
    7a78:	93c9db65 	.word	0x93c9db65
    7a7c:	3fcd864a 	.word	0x3fcd864a
    7a80:	a91d4101 	.word	0xa91d4101
    7a84:	3fd17460 	.word	0x3fd17460
    7a88:	518f264d 	.word	0x518f264d
    7a8c:	3fd55555 	.word	0x3fd55555
    7a90:	db6fabff 	.word	0xdb6fabff
    7a94:	3fdb6db6 	.word	0x3fdb6db6
    7a98:	33333303 	.word	0x33333303
    7a9c:	3fe33333 	.word	0x3fe33333
    7aa0:	40080000 	.word	0x40080000
    7aa4:	3feec709 	.word	0x3feec709
    7aa8:	dc3a03fd 	.word	0xdc3a03fd
    7aac:	145b01f5 	.word	0x145b01f5
    7ab0:	be3e2fe0 	.word	0xbe3e2fe0
    7ab4:	408fffff 	.word	0x408fffff
    7ab8:	bf700000 	.word	0xbf700000
    7abc:	652b82fe 	.word	0x652b82fe
    7ac0:	3c971547 	.word	0x3c971547
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d000      	beq.n	7aca <__ieee754_pow+0x616>
    7ac8:	e190      	b.n	7dec <__ieee754_pow+0x938>
    7aca:	4aec      	ldr	r2, [pc, #944]	; (7e7c <__ieee754_pow+0x9c8>)
    7acc:	4653      	mov	r3, sl
    7ace:	4694      	mov	ip, r2
    7ad0:	2280      	movs	r2, #128	; 0x80
    7ad2:	0352      	lsls	r2, r2, #13
    7ad4:	0011      	movs	r1, r2
    7ad6:	151b      	asrs	r3, r3, #20
    7ad8:	4463      	add	r3, ip
    7ada:	4119      	asrs	r1, r3
    7adc:	000b      	movs	r3, r1
    7ade:	4690      	mov	r8, r2
    7ae0:	4ae7      	ldr	r2, [pc, #924]	; (7e80 <__ieee754_pow+0x9cc>)
    7ae2:	445b      	add	r3, fp
    7ae4:	4694      	mov	ip, r2
    7ae6:	005c      	lsls	r4, r3, #1
    7ae8:	0d64      	lsrs	r4, r4, #21
    7aea:	4de6      	ldr	r5, [pc, #920]	; (7e84 <__ieee754_pow+0x9d0>)
    7aec:	4464      	add	r4, ip
    7aee:	4125      	asrs	r5, r4
    7af0:	001a      	movs	r2, r3
    7af2:	43aa      	bics	r2, r5
    7af4:	0011      	movs	r1, r2
    7af6:	4642      	mov	r2, r8
    7af8:	031b      	lsls	r3, r3, #12
    7afa:	0b1b      	lsrs	r3, r3, #12
    7afc:	4313      	orrs	r3, r2
    7afe:	2214      	movs	r2, #20
    7b00:	1b14      	subs	r4, r2, r4
    7b02:	4123      	asrs	r3, r4
    7b04:	4699      	mov	r9, r3
    7b06:	465b      	mov	r3, fp
    7b08:	2000      	movs	r0, #0
    7b0a:	2b00      	cmp	r3, #0
    7b0c:	da00      	bge.n	7b10 <__ieee754_pow+0x65c>
    7b0e:	e1b0      	b.n	7e72 <__ieee754_pow+0x9be>
    7b10:	0002      	movs	r2, r0
    7b12:	000b      	movs	r3, r1
    7b14:	0030      	movs	r0, r6
    7b16:	0039      	movs	r1, r7
    7b18:	f002 ffd0 	bl	aabc <__aeabi_dsub>
    7b1c:	000b      	movs	r3, r1
    7b1e:	0002      	movs	r2, r0
    7b20:	0006      	movs	r6, r0
    7b22:	000f      	movs	r7, r1
    7b24:	9800      	ldr	r0, [sp, #0]
    7b26:	9901      	ldr	r1, [sp, #4]
    7b28:	f001 fe04 	bl	9734 <__aeabi_dadd>
    7b2c:	464b      	mov	r3, r9
    7b2e:	051b      	lsls	r3, r3, #20
    7b30:	000d      	movs	r5, r1
    7b32:	4698      	mov	r8, r3
    7b34:	2400      	movs	r4, #0
    7b36:	2200      	movs	r2, #0
    7b38:	4bd3      	ldr	r3, [pc, #844]	; (7e88 <__ieee754_pow+0x9d4>)
    7b3a:	0020      	movs	r0, r4
    7b3c:	0029      	movs	r1, r5
    7b3e:	f002 fd3d 	bl	a5bc <__aeabi_dmul>
    7b42:	0032      	movs	r2, r6
    7b44:	9002      	str	r0, [sp, #8]
    7b46:	9103      	str	r1, [sp, #12]
    7b48:	003b      	movs	r3, r7
    7b4a:	0020      	movs	r0, r4
    7b4c:	0029      	movs	r1, r5
    7b4e:	f002 ffb5 	bl	aabc <__aeabi_dsub>
    7b52:	0002      	movs	r2, r0
    7b54:	000b      	movs	r3, r1
    7b56:	9800      	ldr	r0, [sp, #0]
    7b58:	9901      	ldr	r1, [sp, #4]
    7b5a:	f002 ffaf 	bl	aabc <__aeabi_dsub>
    7b5e:	4acb      	ldr	r2, [pc, #812]	; (7e8c <__ieee754_pow+0x9d8>)
    7b60:	4bcb      	ldr	r3, [pc, #812]	; (7e90 <__ieee754_pow+0x9dc>)
    7b62:	f002 fd2b 	bl	a5bc <__aeabi_dmul>
    7b66:	4acb      	ldr	r2, [pc, #812]	; (7e94 <__ieee754_pow+0x9e0>)
    7b68:	0006      	movs	r6, r0
    7b6a:	000f      	movs	r7, r1
    7b6c:	4bca      	ldr	r3, [pc, #808]	; (7e98 <__ieee754_pow+0x9e4>)
    7b6e:	0020      	movs	r0, r4
    7b70:	0029      	movs	r1, r5
    7b72:	f002 fd23 	bl	a5bc <__aeabi_dmul>
    7b76:	0002      	movs	r2, r0
    7b78:	000b      	movs	r3, r1
    7b7a:	0030      	movs	r0, r6
    7b7c:	0039      	movs	r1, r7
    7b7e:	f001 fdd9 	bl	9734 <__aeabi_dadd>
    7b82:	0004      	movs	r4, r0
    7b84:	000d      	movs	r5, r1
    7b86:	0002      	movs	r2, r0
    7b88:	000b      	movs	r3, r1
    7b8a:	9802      	ldr	r0, [sp, #8]
    7b8c:	9903      	ldr	r1, [sp, #12]
    7b8e:	f001 fdd1 	bl	9734 <__aeabi_dadd>
    7b92:	9a02      	ldr	r2, [sp, #8]
    7b94:	9b03      	ldr	r3, [sp, #12]
    7b96:	0006      	movs	r6, r0
    7b98:	000f      	movs	r7, r1
    7b9a:	f002 ff8f 	bl	aabc <__aeabi_dsub>
    7b9e:	0002      	movs	r2, r0
    7ba0:	000b      	movs	r3, r1
    7ba2:	0020      	movs	r0, r4
    7ba4:	0029      	movs	r1, r5
    7ba6:	f002 ff89 	bl	aabc <__aeabi_dsub>
    7baa:	0032      	movs	r2, r6
    7bac:	9000      	str	r0, [sp, #0]
    7bae:	9101      	str	r1, [sp, #4]
    7bb0:	003b      	movs	r3, r7
    7bb2:	0030      	movs	r0, r6
    7bb4:	0039      	movs	r1, r7
    7bb6:	f002 fd01 	bl	a5bc <__aeabi_dmul>
    7bba:	0004      	movs	r4, r0
    7bbc:	000d      	movs	r5, r1
    7bbe:	4ab7      	ldr	r2, [pc, #732]	; (7e9c <__ieee754_pow+0x9e8>)
    7bc0:	4bb7      	ldr	r3, [pc, #732]	; (7ea0 <__ieee754_pow+0x9ec>)
    7bc2:	f002 fcfb 	bl	a5bc <__aeabi_dmul>
    7bc6:	4ab7      	ldr	r2, [pc, #732]	; (7ea4 <__ieee754_pow+0x9f0>)
    7bc8:	4bb7      	ldr	r3, [pc, #732]	; (7ea8 <__ieee754_pow+0x9f4>)
    7bca:	f002 ff77 	bl	aabc <__aeabi_dsub>
    7bce:	0022      	movs	r2, r4
    7bd0:	002b      	movs	r3, r5
    7bd2:	f002 fcf3 	bl	a5bc <__aeabi_dmul>
    7bd6:	4ab5      	ldr	r2, [pc, #724]	; (7eac <__ieee754_pow+0x9f8>)
    7bd8:	4bb5      	ldr	r3, [pc, #724]	; (7eb0 <__ieee754_pow+0x9fc>)
    7bda:	f001 fdab 	bl	9734 <__aeabi_dadd>
    7bde:	0022      	movs	r2, r4
    7be0:	002b      	movs	r3, r5
    7be2:	f002 fceb 	bl	a5bc <__aeabi_dmul>
    7be6:	4ab3      	ldr	r2, [pc, #716]	; (7eb4 <__ieee754_pow+0xa00>)
    7be8:	4bb3      	ldr	r3, [pc, #716]	; (7eb8 <__ieee754_pow+0xa04>)
    7bea:	f002 ff67 	bl	aabc <__aeabi_dsub>
    7bee:	0022      	movs	r2, r4
    7bf0:	002b      	movs	r3, r5
    7bf2:	f002 fce3 	bl	a5bc <__aeabi_dmul>
    7bf6:	4ab1      	ldr	r2, [pc, #708]	; (7ebc <__ieee754_pow+0xa08>)
    7bf8:	4bb1      	ldr	r3, [pc, #708]	; (7ec0 <__ieee754_pow+0xa0c>)
    7bfa:	f001 fd9b 	bl	9734 <__aeabi_dadd>
    7bfe:	0022      	movs	r2, r4
    7c00:	002b      	movs	r3, r5
    7c02:	f002 fcdb 	bl	a5bc <__aeabi_dmul>
    7c06:	0002      	movs	r2, r0
    7c08:	000b      	movs	r3, r1
    7c0a:	0030      	movs	r0, r6
    7c0c:	0039      	movs	r1, r7
    7c0e:	f002 ff55 	bl	aabc <__aeabi_dsub>
    7c12:	0004      	movs	r4, r0
    7c14:	000d      	movs	r5, r1
    7c16:	0002      	movs	r2, r0
    7c18:	000b      	movs	r3, r1
    7c1a:	0030      	movs	r0, r6
    7c1c:	0039      	movs	r1, r7
    7c1e:	f002 fccd 	bl	a5bc <__aeabi_dmul>
    7c22:	2380      	movs	r3, #128	; 0x80
    7c24:	9002      	str	r0, [sp, #8]
    7c26:	9103      	str	r1, [sp, #12]
    7c28:	2200      	movs	r2, #0
    7c2a:	05db      	lsls	r3, r3, #23
    7c2c:	0020      	movs	r0, r4
    7c2e:	0029      	movs	r1, r5
    7c30:	f002 ff44 	bl	aabc <__aeabi_dsub>
    7c34:	0002      	movs	r2, r0
    7c36:	000b      	movs	r3, r1
    7c38:	9802      	ldr	r0, [sp, #8]
    7c3a:	9903      	ldr	r1, [sp, #12]
    7c3c:	f002 f88a 	bl	9d54 <__aeabi_ddiv>
    7c40:	9a00      	ldr	r2, [sp, #0]
    7c42:	9b01      	ldr	r3, [sp, #4]
    7c44:	0004      	movs	r4, r0
    7c46:	000d      	movs	r5, r1
    7c48:	0030      	movs	r0, r6
    7c4a:	0039      	movs	r1, r7
    7c4c:	f002 fcb6 	bl	a5bc <__aeabi_dmul>
    7c50:	9a00      	ldr	r2, [sp, #0]
    7c52:	9b01      	ldr	r3, [sp, #4]
    7c54:	f001 fd6e 	bl	9734 <__aeabi_dadd>
    7c58:	0002      	movs	r2, r0
    7c5a:	000b      	movs	r3, r1
    7c5c:	0020      	movs	r0, r4
    7c5e:	0029      	movs	r1, r5
    7c60:	f002 ff2c 	bl	aabc <__aeabi_dsub>
    7c64:	0032      	movs	r2, r6
    7c66:	003b      	movs	r3, r7
    7c68:	f002 ff28 	bl	aabc <__aeabi_dsub>
    7c6c:	0002      	movs	r2, r0
    7c6e:	000b      	movs	r3, r1
    7c70:	2000      	movs	r0, #0
    7c72:	4994      	ldr	r1, [pc, #592]	; (7ec4 <__ieee754_pow+0xa10>)
    7c74:	f002 ff22 	bl	aabc <__aeabi_dsub>
    7c78:	4643      	mov	r3, r8
    7c7a:	185b      	adds	r3, r3, r1
    7c7c:	151a      	asrs	r2, r3, #20
    7c7e:	2a00      	cmp	r2, #0
    7c80:	dc00      	bgt.n	7c84 <__ieee754_pow+0x7d0>
    7c82:	e149      	b.n	7f18 <__ieee754_pow+0xa64>
    7c84:	0019      	movs	r1, r3
    7c86:	9a06      	ldr	r2, [sp, #24]
    7c88:	9b07      	ldr	r3, [sp, #28]
    7c8a:	f002 fc97 	bl	a5bc <__aeabi_dmul>
    7c8e:	e459      	b.n	7544 <__ieee754_pow+0x90>
    7c90:	003a      	movs	r2, r7
    7c92:	0033      	movs	r3, r6
    7c94:	0038      	movs	r0, r7
    7c96:	0031      	movs	r1, r6
    7c98:	f002 fc90 	bl	a5bc <__aeabi_dmul>
    7c9c:	e452      	b.n	7544 <__ieee754_pow+0x90>
    7c9e:	4653      	mov	r3, sl
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	db00      	blt.n	7ca6 <__ieee754_pow+0x7f2>
    7ca4:	e4d9      	b.n	765a <__ieee754_pow+0x1a6>
    7ca6:	9c00      	ldr	r4, [sp, #0]
    7ca8:	9d01      	ldr	r5, [sp, #4]
    7caa:	2280      	movs	r2, #128	; 0x80
    7cac:	0612      	lsls	r2, r2, #24
    7cae:	002b      	movs	r3, r5
    7cb0:	4694      	mov	ip, r2
    7cb2:	4463      	add	r3, ip
    7cb4:	0020      	movs	r0, r4
    7cb6:	0019      	movs	r1, r3
    7cb8:	f7ff fc44 	bl	7544 <__ieee754_pow+0x90>
    7cbc:	004b      	lsls	r3, r1, #1
    7cbe:	085b      	lsrs	r3, r3, #1
    7cc0:	469a      	mov	sl, r3
    7cc2:	4b81      	ldr	r3, [pc, #516]	; (7ec8 <__ieee754_pow+0xa14>)
    7cc4:	459a      	cmp	sl, r3
    7cc6:	dc00      	bgt.n	7cca <__ieee754_pow+0x816>
    7cc8:	e0b1      	b.n	7e2e <__ieee754_pow+0x97a>
    7cca:	4b80      	ldr	r3, [pc, #512]	; (7ecc <__ieee754_pow+0xa18>)
    7ccc:	445b      	add	r3, fp
    7cce:	431a      	orrs	r2, r3
    7cd0:	d10c      	bne.n	7cec <__ieee754_pow+0x838>
    7cd2:	0032      	movs	r2, r6
    7cd4:	003b      	movs	r3, r7
    7cd6:	f002 fef1 	bl	aabc <__aeabi_dsub>
    7cda:	0002      	movs	r2, r0
    7cdc:	000b      	movs	r3, r1
    7cde:	9800      	ldr	r0, [sp, #0]
    7ce0:	9901      	ldr	r1, [sp, #4]
    7ce2:	f000 fcbb 	bl	865c <__aeabi_dcmple>
    7ce6:	2800      	cmp	r0, #0
    7ce8:	d100      	bne.n	7cec <__ieee754_pow+0x838>
    7cea:	e6ee      	b.n	7aca <__ieee754_pow+0x616>
    7cec:	9806      	ldr	r0, [sp, #24]
    7cee:	9907      	ldr	r1, [sp, #28]
    7cf0:	4a77      	ldr	r2, [pc, #476]	; (7ed0 <__ieee754_pow+0xa1c>)
    7cf2:	4b78      	ldr	r3, [pc, #480]	; (7ed4 <__ieee754_pow+0xa20>)
    7cf4:	f002 fc62 	bl	a5bc <__aeabi_dmul>
    7cf8:	4a75      	ldr	r2, [pc, #468]	; (7ed0 <__ieee754_pow+0xa1c>)
    7cfa:	4b76      	ldr	r3, [pc, #472]	; (7ed4 <__ieee754_pow+0xa20>)
    7cfc:	f002 fc5e 	bl	a5bc <__aeabi_dmul>
    7d00:	f7ff fc20 	bl	7544 <__ieee754_pow+0x90>
    7d04:	2300      	movs	r3, #0
    7d06:	4c74      	ldr	r4, [pc, #464]	; (7ed8 <__ieee754_pow+0xa24>)
    7d08:	9306      	str	r3, [sp, #24]
    7d0a:	9407      	str	r4, [sp, #28]
    7d0c:	e652      	b.n	79b4 <__ieee754_pow+0x500>
    7d0e:	0002      	movs	r2, r0
    7d10:	000b      	movs	r3, r1
    7d12:	2000      	movs	r0, #0
    7d14:	496b      	ldr	r1, [pc, #428]	; (7ec4 <__ieee754_pow+0xa10>)
    7d16:	f002 f81d 	bl	9d54 <__aeabi_ddiv>
    7d1a:	f7ff fc32 	bl	7582 <__ieee754_pow+0xce>
    7d1e:	4653      	mov	r3, sl
    7d20:	2b00      	cmp	r3, #0
    7d22:	db00      	blt.n	7d26 <__ieee754_pow+0x872>
    7d24:	e499      	b.n	765a <__ieee754_pow+0x1a6>
    7d26:	e454      	b.n	75d2 <__ieee754_pow+0x11e>
    7d28:	4b6c      	ldr	r3, [pc, #432]	; (7edc <__ieee754_pow+0xa28>)
    7d2a:	429c      	cmp	r4, r3
    7d2c:	ddf7      	ble.n	7d1e <__ieee754_pow+0x86a>
    7d2e:	4b65      	ldr	r3, [pc, #404]	; (7ec4 <__ieee754_pow+0xa10>)
    7d30:	429c      	cmp	r4, r3
    7d32:	dd00      	ble.n	7d36 <__ieee754_pow+0x882>
    7d34:	e44a      	b.n	75cc <__ieee754_pow+0x118>
    7d36:	2200      	movs	r2, #0
    7d38:	4b62      	ldr	r3, [pc, #392]	; (7ec4 <__ieee754_pow+0xa10>)
    7d3a:	f002 febf 	bl	aabc <__aeabi_dsub>
    7d3e:	22c0      	movs	r2, #192	; 0xc0
    7d40:	4b67      	ldr	r3, [pc, #412]	; (7ee0 <__ieee754_pow+0xa2c>)
    7d42:	05d2      	lsls	r2, r2, #23
    7d44:	0004      	movs	r4, r0
    7d46:	000d      	movs	r5, r1
    7d48:	f002 fc38 	bl	a5bc <__aeabi_dmul>
    7d4c:	4a65      	ldr	r2, [pc, #404]	; (7ee4 <__ieee754_pow+0xa30>)
    7d4e:	0006      	movs	r6, r0
    7d50:	000f      	movs	r7, r1
    7d52:	4b65      	ldr	r3, [pc, #404]	; (7ee8 <__ieee754_pow+0xa34>)
    7d54:	0020      	movs	r0, r4
    7d56:	0029      	movs	r1, r5
    7d58:	f002 fc30 	bl	a5bc <__aeabi_dmul>
    7d5c:	2200      	movs	r2, #0
    7d5e:	9002      	str	r0, [sp, #8]
    7d60:	9103      	str	r1, [sp, #12]
    7d62:	4b62      	ldr	r3, [pc, #392]	; (7eec <__ieee754_pow+0xa38>)
    7d64:	0020      	movs	r0, r4
    7d66:	0029      	movs	r1, r5
    7d68:	f002 fc28 	bl	a5bc <__aeabi_dmul>
    7d6c:	0002      	movs	r2, r0
    7d6e:	000b      	movs	r3, r1
    7d70:	485f      	ldr	r0, [pc, #380]	; (7ef0 <__ieee754_pow+0xa3c>)
    7d72:	4960      	ldr	r1, [pc, #384]	; (7ef4 <__ieee754_pow+0xa40>)
    7d74:	f002 fea2 	bl	aabc <__aeabi_dsub>
    7d78:	0022      	movs	r2, r4
    7d7a:	002b      	movs	r3, r5
    7d7c:	f002 fc1e 	bl	a5bc <__aeabi_dmul>
    7d80:	0002      	movs	r2, r0
    7d82:	000b      	movs	r3, r1
    7d84:	2000      	movs	r0, #0
    7d86:	495c      	ldr	r1, [pc, #368]	; (7ef8 <__ieee754_pow+0xa44>)
    7d88:	f002 fe98 	bl	aabc <__aeabi_dsub>
    7d8c:	0022      	movs	r2, r4
    7d8e:	9004      	str	r0, [sp, #16]
    7d90:	9105      	str	r1, [sp, #20]
    7d92:	002b      	movs	r3, r5
    7d94:	0020      	movs	r0, r4
    7d96:	0029      	movs	r1, r5
    7d98:	f002 fc10 	bl	a5bc <__aeabi_dmul>
    7d9c:	0002      	movs	r2, r0
    7d9e:	000b      	movs	r3, r1
    7da0:	9804      	ldr	r0, [sp, #16]
    7da2:	9905      	ldr	r1, [sp, #20]
    7da4:	f002 fc0a 	bl	a5bc <__aeabi_dmul>
    7da8:	4a54      	ldr	r2, [pc, #336]	; (7efc <__ieee754_pow+0xa48>)
    7daa:	4b4d      	ldr	r3, [pc, #308]	; (7ee0 <__ieee754_pow+0xa2c>)
    7dac:	f002 fc06 	bl	a5bc <__aeabi_dmul>
    7db0:	0002      	movs	r2, r0
    7db2:	000b      	movs	r3, r1
    7db4:	9802      	ldr	r0, [sp, #8]
    7db6:	9903      	ldr	r1, [sp, #12]
    7db8:	f002 fe80 	bl	aabc <__aeabi_dsub>
    7dbc:	0002      	movs	r2, r0
    7dbe:	000b      	movs	r3, r1
    7dc0:	0004      	movs	r4, r0
    7dc2:	000d      	movs	r5, r1
    7dc4:	0030      	movs	r0, r6
    7dc6:	0039      	movs	r1, r7
    7dc8:	f001 fcb4 	bl	9734 <__aeabi_dadd>
    7dcc:	2000      	movs	r0, #0
    7dce:	0032      	movs	r2, r6
    7dd0:	003b      	movs	r3, r7
    7dd2:	9002      	str	r0, [sp, #8]
    7dd4:	9103      	str	r1, [sp, #12]
    7dd6:	f002 fe71 	bl	aabc <__aeabi_dsub>
    7dda:	0002      	movs	r2, r0
    7ddc:	000b      	movs	r3, r1
    7dde:	0020      	movs	r0, r4
    7de0:	0029      	movs	r1, r5
    7de2:	f002 fe6b 	bl	aabc <__aeabi_dsub>
    7de6:	9004      	str	r0, [sp, #16]
    7de8:	9105      	str	r1, [sp, #20]
    7dea:	e5d9      	b.n	79a0 <__ieee754_pow+0x4ec>
    7dec:	4a44      	ldr	r2, [pc, #272]	; (7f00 <__ieee754_pow+0xa4c>)
    7dee:	4b45      	ldr	r3, [pc, #276]	; (7f04 <__ieee754_pow+0xa50>)
    7df0:	9806      	ldr	r0, [sp, #24]
    7df2:	9907      	ldr	r1, [sp, #28]
    7df4:	f002 fbe2 	bl	a5bc <__aeabi_dmul>
    7df8:	4a41      	ldr	r2, [pc, #260]	; (7f00 <__ieee754_pow+0xa4c>)
    7dfa:	4b42      	ldr	r3, [pc, #264]	; (7f04 <__ieee754_pow+0xa50>)
    7dfc:	f002 fbde 	bl	a5bc <__aeabi_dmul>
    7e00:	f7ff fba0 	bl	7544 <__ieee754_pow+0x90>
    7e04:	2a00      	cmp	r2, #0
    7e06:	d001      	beq.n	7e0c <__ieee754_pow+0x958>
    7e08:	f7ff fba9 	bl	755e <__ieee754_pow+0xaa>
    7e0c:	3214      	adds	r2, #20
    7e0e:	1ad3      	subs	r3, r2, r3
    7e10:	002a      	movs	r2, r5
    7e12:	411a      	asrs	r2, r3
    7e14:	0011      	movs	r1, r2
    7e16:	4099      	lsls	r1, r3
    7e18:	428d      	cmp	r5, r1
    7e1a:	d001      	beq.n	7e20 <__ieee754_pow+0x96c>
    7e1c:	f7ff fb76 	bl	750c <__ieee754_pow+0x58>
    7e20:	2301      	movs	r3, #1
    7e22:	401a      	ands	r2, r3
    7e24:	18db      	adds	r3, r3, r3
    7e26:	1a9b      	subs	r3, r3, r2
    7e28:	469b      	mov	fp, r3
    7e2a:	f7ff fb6f 	bl	750c <__ieee754_pow+0x58>
    7e2e:	2200      	movs	r2, #0
    7e30:	4b31      	ldr	r3, [pc, #196]	; (7ef8 <__ieee754_pow+0xa44>)
    7e32:	4690      	mov	r8, r2
    7e34:	4691      	mov	r9, r2
    7e36:	459a      	cmp	sl, r3
    7e38:	dc00      	bgt.n	7e3c <__ieee754_pow+0x988>
    7e3a:	e67b      	b.n	7b34 <__ieee754_pow+0x680>
    7e3c:	e645      	b.n	7aca <__ieee754_pow+0x616>
    7e3e:	0002      	movs	r2, r0
    7e40:	000b      	movs	r3, r1
    7e42:	f002 fe3b 	bl	aabc <__aeabi_dsub>
    7e46:	0002      	movs	r2, r0
    7e48:	000b      	movs	r3, r1
    7e4a:	f001 ff83 	bl	9d54 <__aeabi_ddiv>
    7e4e:	f7ff fb79 	bl	7544 <__ieee754_pow+0x90>
    7e52:	2380      	movs	r3, #128	; 0x80
    7e54:	4c2c      	ldr	r4, [pc, #176]	; (7f08 <__ieee754_pow+0xa54>)
    7e56:	05db      	lsls	r3, r3, #23
    7e58:	9308      	str	r3, [sp, #32]
    7e5a:	9409      	str	r4, [sp, #36]	; 0x24
    7e5c:	4b2b      	ldr	r3, [pc, #172]	; (7f0c <__ieee754_pow+0xa58>)
    7e5e:	4c2c      	ldr	r4, [pc, #176]	; (7f10 <__ieee754_pow+0xa5c>)
    7e60:	2200      	movs	r2, #0
    7e62:	930c      	str	r3, [sp, #48]	; 0x30
    7e64:	940d      	str	r4, [sp, #52]	; 0x34
    7e66:	2480      	movs	r4, #128	; 0x80
    7e68:	4b2a      	ldr	r3, [pc, #168]	; (7f14 <__ieee754_pow+0xa60>)
    7e6a:	02e4      	lsls	r4, r4, #11
    7e6c:	9206      	str	r2, [sp, #24]
    7e6e:	9307      	str	r3, [sp, #28]
    7e70:	e449      	b.n	7706 <__ieee754_pow+0x252>
    7e72:	464b      	mov	r3, r9
    7e74:	425b      	negs	r3, r3
    7e76:	4699      	mov	r9, r3
    7e78:	e64a      	b.n	7b10 <__ieee754_pow+0x65c>
    7e7a:	46c0      	nop			; (mov r8, r8)
    7e7c:	fffffc02 	.word	0xfffffc02
    7e80:	fffffc01 	.word	0xfffffc01
    7e84:	000fffff 	.word	0x000fffff
    7e88:	3fe62e43 	.word	0x3fe62e43
    7e8c:	fefa39ef 	.word	0xfefa39ef
    7e90:	3fe62e42 	.word	0x3fe62e42
    7e94:	0ca86c39 	.word	0x0ca86c39
    7e98:	be205c61 	.word	0xbe205c61
    7e9c:	72bea4d0 	.word	0x72bea4d0
    7ea0:	3e663769 	.word	0x3e663769
    7ea4:	c5d26bf1 	.word	0xc5d26bf1
    7ea8:	3ebbbd41 	.word	0x3ebbbd41
    7eac:	af25de2c 	.word	0xaf25de2c
    7eb0:	3f11566a 	.word	0x3f11566a
    7eb4:	16bebd93 	.word	0x16bebd93
    7eb8:	3f66c16c 	.word	0x3f66c16c
    7ebc:	5555553e 	.word	0x5555553e
    7ec0:	3fc55555 	.word	0x3fc55555
    7ec4:	3ff00000 	.word	0x3ff00000
    7ec8:	4090cbff 	.word	0x4090cbff
    7ecc:	3f6f3400 	.word	0x3f6f3400
    7ed0:	c2f8f359 	.word	0xc2f8f359
    7ed4:	01a56e1f 	.word	0x01a56e1f
    7ed8:	bff00000 	.word	0xbff00000
    7edc:	3feffffe 	.word	0x3feffffe
    7ee0:	3ff71547 	.word	0x3ff71547
    7ee4:	f85ddf44 	.word	0xf85ddf44
    7ee8:	3e54ae0b 	.word	0x3e54ae0b
    7eec:	3fd00000 	.word	0x3fd00000
    7ef0:	55555555 	.word	0x55555555
    7ef4:	3fd55555 	.word	0x3fd55555
    7ef8:	3fe00000 	.word	0x3fe00000
    7efc:	652b82fe 	.word	0x652b82fe
    7f00:	8800759c 	.word	0x8800759c
    7f04:	7e37e43c 	.word	0x7e37e43c
    7f08:	3fe2b803 	.word	0x3fe2b803
    7f0c:	43cfd006 	.word	0x43cfd006
    7f10:	3e4cfdeb 	.word	0x3e4cfdeb
    7f14:	3ff80000 	.word	0x3ff80000
    7f18:	464a      	mov	r2, r9
    7f1a:	f000 f999 	bl	8250 <scalbn>
    7f1e:	e6b2      	b.n	7c86 <__ieee754_pow+0x7d2>

00007f20 <__ieee754_sqrt>:
    7f20:	4b6c      	ldr	r3, [pc, #432]	; (80d4 <__ieee754_sqrt+0x1b4>)
    7f22:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f24:	000a      	movs	r2, r1
    7f26:	4646      	mov	r6, r8
    7f28:	000d      	movs	r5, r1
    7f2a:	46d6      	mov	lr, sl
    7f2c:	464f      	mov	r7, r9
    7f2e:	0019      	movs	r1, r3
    7f30:	b5c0      	push	{r6, r7, lr}
    7f32:	0004      	movs	r4, r0
    7f34:	0006      	movs	r6, r0
    7f36:	4029      	ands	r1, r5
    7f38:	4299      	cmp	r1, r3
    7f3a:	d100      	bne.n	7f3e <__ieee754_sqrt+0x1e>
    7f3c:	e0a7      	b.n	808e <__ieee754_sqrt+0x16e>
    7f3e:	2d00      	cmp	r5, #0
    7f40:	dc00      	bgt.n	7f44 <__ieee754_sqrt+0x24>
    7f42:	e081      	b.n	8048 <__ieee754_sqrt+0x128>
    7f44:	152f      	asrs	r7, r5, #20
    7f46:	d100      	bne.n	7f4a <__ieee754_sqrt+0x2a>
    7f48:	e08e      	b.n	8068 <__ieee754_sqrt+0x148>
    7f4a:	4b63      	ldr	r3, [pc, #396]	; (80d8 <__ieee754_sqrt+0x1b8>)
    7f4c:	0312      	lsls	r2, r2, #12
    7f4e:	469c      	mov	ip, r3
    7f50:	2380      	movs	r3, #128	; 0x80
    7f52:	0b12      	lsrs	r2, r2, #12
    7f54:	035b      	lsls	r3, r3, #13
    7f56:	4467      	add	r7, ip
    7f58:	431a      	orrs	r2, r3
    7f5a:	07fb      	lsls	r3, r7, #31
    7f5c:	d468      	bmi.n	8030 <__ieee754_sqrt+0x110>
    7f5e:	107b      	asrs	r3, r7, #1
    7f60:	469c      	mov	ip, r3
    7f62:	0fe3      	lsrs	r3, r4, #31
    7f64:	189b      	adds	r3, r3, r2
    7f66:	189b      	adds	r3, r3, r2
    7f68:	2280      	movs	r2, #128	; 0x80
    7f6a:	2116      	movs	r1, #22
    7f6c:	2600      	movs	r6, #0
    7f6e:	2500      	movs	r5, #0
    7f70:	0064      	lsls	r4, r4, #1
    7f72:	0392      	lsls	r2, r2, #14
    7f74:	18a8      	adds	r0, r5, r2
    7f76:	4298      	cmp	r0, r3
    7f78:	dc02      	bgt.n	7f80 <__ieee754_sqrt+0x60>
    7f7a:	1885      	adds	r5, r0, r2
    7f7c:	1a1b      	subs	r3, r3, r0
    7f7e:	18b6      	adds	r6, r6, r2
    7f80:	0fe0      	lsrs	r0, r4, #31
    7f82:	005b      	lsls	r3, r3, #1
    7f84:	3901      	subs	r1, #1
    7f86:	181b      	adds	r3, r3, r0
    7f88:	0064      	lsls	r4, r4, #1
    7f8a:	0852      	lsrs	r2, r2, #1
    7f8c:	2900      	cmp	r1, #0
    7f8e:	d1f1      	bne.n	7f74 <__ieee754_sqrt+0x54>
    7f90:	2200      	movs	r2, #0
    7f92:	4692      	mov	sl, r2
    7f94:	4690      	mov	r8, r2
    7f96:	2280      	movs	r2, #128	; 0x80
    7f98:	2020      	movs	r0, #32
    7f9a:	0612      	lsls	r2, r2, #24
    7f9c:	e009      	b.n	7fb2 <__ieee754_sqrt+0x92>
    7f9e:	42ab      	cmp	r3, r5
    7fa0:	d038      	beq.n	8014 <__ieee754_sqrt+0xf4>
    7fa2:	0fe1      	lsrs	r1, r4, #31
    7fa4:	18c9      	adds	r1, r1, r3
    7fa6:	3801      	subs	r0, #1
    7fa8:	18cb      	adds	r3, r1, r3
    7faa:	0064      	lsls	r4, r4, #1
    7fac:	0852      	lsrs	r2, r2, #1
    7fae:	2800      	cmp	r0, #0
    7fb0:	d018      	beq.n	7fe4 <__ieee754_sqrt+0xc4>
    7fb2:	4641      	mov	r1, r8
    7fb4:	1851      	adds	r1, r2, r1
    7fb6:	42ab      	cmp	r3, r5
    7fb8:	ddf1      	ble.n	7f9e <__ieee754_sqrt+0x7e>
    7fba:	188f      	adds	r7, r1, r2
    7fbc:	46b8      	mov	r8, r7
    7fbe:	46a9      	mov	r9, r5
    7fc0:	2900      	cmp	r1, #0
    7fc2:	db30      	blt.n	8026 <__ieee754_sqrt+0x106>
    7fc4:	1b5b      	subs	r3, r3, r5
    7fc6:	428c      	cmp	r4, r1
    7fc8:	41ad      	sbcs	r5, r5
    7fca:	426d      	negs	r5, r5
    7fcc:	1b5b      	subs	r3, r3, r5
    7fce:	1a64      	subs	r4, r4, r1
    7fd0:	0fe1      	lsrs	r1, r4, #31
    7fd2:	18c9      	adds	r1, r1, r3
    7fd4:	3801      	subs	r0, #1
    7fd6:	4492      	add	sl, r2
    7fd8:	464d      	mov	r5, r9
    7fda:	18cb      	adds	r3, r1, r3
    7fdc:	0064      	lsls	r4, r4, #1
    7fde:	0852      	lsrs	r2, r2, #1
    7fe0:	2800      	cmp	r0, #0
    7fe2:	d1e6      	bne.n	7fb2 <__ieee754_sqrt+0x92>
    7fe4:	4323      	orrs	r3, r4
    7fe6:	d128      	bne.n	803a <__ieee754_sqrt+0x11a>
    7fe8:	4653      	mov	r3, sl
    7fea:	085b      	lsrs	r3, r3, #1
    7fec:	493b      	ldr	r1, [pc, #236]	; (80dc <__ieee754_sqrt+0x1bc>)
    7fee:	1072      	asrs	r2, r6, #1
    7ff0:	4688      	mov	r8, r1
    7ff2:	4442      	add	r2, r8
    7ff4:	07f1      	lsls	r1, r6, #31
    7ff6:	d502      	bpl.n	7ffe <__ieee754_sqrt+0xde>
    7ff8:	2180      	movs	r1, #128	; 0x80
    7ffa:	0609      	lsls	r1, r1, #24
    7ffc:	430b      	orrs	r3, r1
    7ffe:	4661      	mov	r1, ip
    8000:	001e      	movs	r6, r3
    8002:	050f      	lsls	r7, r1, #20
    8004:	18bd      	adds	r5, r7, r2
    8006:	0030      	movs	r0, r6
    8008:	0029      	movs	r1, r5
    800a:	bc1c      	pop	{r2, r3, r4}
    800c:	4690      	mov	r8, r2
    800e:	4699      	mov	r9, r3
    8010:	46a2      	mov	sl, r4
    8012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8014:	42a1      	cmp	r1, r4
    8016:	d8c4      	bhi.n	7fa2 <__ieee754_sqrt+0x82>
    8018:	188f      	adds	r7, r1, r2
    801a:	46b8      	mov	r8, r7
    801c:	2900      	cmp	r1, #0
    801e:	db42      	blt.n	80a6 <__ieee754_sqrt+0x186>
    8020:	4699      	mov	r9, r3
    8022:	2300      	movs	r3, #0
    8024:	e7d3      	b.n	7fce <__ieee754_sqrt+0xae>
    8026:	2f00      	cmp	r7, #0
    8028:	db2f      	blt.n	808a <__ieee754_sqrt+0x16a>
    802a:	1c6f      	adds	r7, r5, #1
    802c:	46b9      	mov	r9, r7
    802e:	e7c9      	b.n	7fc4 <__ieee754_sqrt+0xa4>
    8030:	0fe1      	lsrs	r1, r4, #31
    8032:	0052      	lsls	r2, r2, #1
    8034:	188a      	adds	r2, r1, r2
    8036:	0064      	lsls	r4, r4, #1
    8038:	e791      	b.n	7f5e <__ieee754_sqrt+0x3e>
    803a:	4653      	mov	r3, sl
    803c:	3301      	adds	r3, #1
    803e:	d035      	beq.n	80ac <__ieee754_sqrt+0x18c>
    8040:	4653      	mov	r3, sl
    8042:	3301      	adds	r3, #1
    8044:	085b      	lsrs	r3, r3, #1
    8046:	e7d1      	b.n	7fec <__ieee754_sqrt+0xcc>
    8048:	006b      	lsls	r3, r5, #1
    804a:	085b      	lsrs	r3, r3, #1
    804c:	4303      	orrs	r3, r0
    804e:	d0da      	beq.n	8006 <__ieee754_sqrt+0xe6>
    8050:	2700      	movs	r7, #0
    8052:	2d00      	cmp	r5, #0
    8054:	d132      	bne.n	80bc <__ieee754_sqrt+0x19c>
    8056:	0ae2      	lsrs	r2, r4, #11
    8058:	3f15      	subs	r7, #21
    805a:	0564      	lsls	r4, r4, #21
    805c:	2a00      	cmp	r2, #0
    805e:	d0fa      	beq.n	8056 <__ieee754_sqrt+0x136>
    8060:	2380      	movs	r3, #128	; 0x80
    8062:	035b      	lsls	r3, r3, #13
    8064:	421a      	tst	r2, r3
    8066:	d124      	bne.n	80b2 <__ieee754_sqrt+0x192>
    8068:	2080      	movs	r0, #128	; 0x80
    806a:	2300      	movs	r3, #0
    806c:	0340      	lsls	r0, r0, #13
    806e:	e000      	b.n	8072 <__ieee754_sqrt+0x152>
    8070:	000b      	movs	r3, r1
    8072:	0052      	lsls	r2, r2, #1
    8074:	1c59      	adds	r1, r3, #1
    8076:	4202      	tst	r2, r0
    8078:	d0fa      	beq.n	8070 <__ieee754_sqrt+0x150>
    807a:	2020      	movs	r0, #32
    807c:	1a40      	subs	r0, r0, r1
    807e:	1aff      	subs	r7, r7, r3
    8080:	0023      	movs	r3, r4
    8082:	40c3      	lsrs	r3, r0
    8084:	408c      	lsls	r4, r1
    8086:	431a      	orrs	r2, r3
    8088:	e75f      	b.n	7f4a <__ieee754_sqrt+0x2a>
    808a:	46a9      	mov	r9, r5
    808c:	e79a      	b.n	7fc4 <__ieee754_sqrt+0xa4>
    808e:	002b      	movs	r3, r5
    8090:	0002      	movs	r2, r0
    8092:	0029      	movs	r1, r5
    8094:	f002 fa92 	bl	a5bc <__aeabi_dmul>
    8098:	0032      	movs	r2, r6
    809a:	002b      	movs	r3, r5
    809c:	f001 fb4a 	bl	9734 <__aeabi_dadd>
    80a0:	0006      	movs	r6, r0
    80a2:	000d      	movs	r5, r1
    80a4:	e7af      	b.n	8006 <__ieee754_sqrt+0xe6>
    80a6:	2f00      	cmp	r7, #0
    80a8:	dabf      	bge.n	802a <__ieee754_sqrt+0x10a>
    80aa:	e7b9      	b.n	8020 <__ieee754_sqrt+0x100>
    80ac:	3601      	adds	r6, #1
    80ae:	2300      	movs	r3, #0
    80b0:	e79c      	b.n	7fec <__ieee754_sqrt+0xcc>
    80b2:	2301      	movs	r3, #1
    80b4:	2100      	movs	r1, #0
    80b6:	2020      	movs	r0, #32
    80b8:	425b      	negs	r3, r3
    80ba:	e7e0      	b.n	807e <__ieee754_sqrt+0x15e>
    80bc:	002b      	movs	r3, r5
    80be:	0002      	movs	r2, r0
    80c0:	0029      	movs	r1, r5
    80c2:	f002 fcfb 	bl	aabc <__aeabi_dsub>
    80c6:	0002      	movs	r2, r0
    80c8:	000b      	movs	r3, r1
    80ca:	f001 fe43 	bl	9d54 <__aeabi_ddiv>
    80ce:	0006      	movs	r6, r0
    80d0:	000d      	movs	r5, r1
    80d2:	e798      	b.n	8006 <__ieee754_sqrt+0xe6>
    80d4:	7ff00000 	.word	0x7ff00000
    80d8:	fffffc01 	.word	0xfffffc01
    80dc:	3fe00000 	.word	0x3fe00000

000080e0 <fabs>:
    80e0:	0049      	lsls	r1, r1, #1
    80e2:	084b      	lsrs	r3, r1, #1
    80e4:	0019      	movs	r1, r3
    80e6:	4770      	bx	lr

000080e8 <finite>:
    80e8:	4b03      	ldr	r3, [pc, #12]	; (80f8 <finite+0x10>)
    80ea:	0048      	lsls	r0, r1, #1
    80ec:	469c      	mov	ip, r3
    80ee:	0840      	lsrs	r0, r0, #1
    80f0:	4460      	add	r0, ip
    80f2:	0fc0      	lsrs	r0, r0, #31
    80f4:	4770      	bx	lr
    80f6:	46c0      	nop			; (mov r8, r8)
    80f8:	80100000 	.word	0x80100000

000080fc <matherr>:
    80fc:	2000      	movs	r0, #0
    80fe:	4770      	bx	lr

00008100 <nan>:
    8100:	2000      	movs	r0, #0
    8102:	4901      	ldr	r1, [pc, #4]	; (8108 <nan+0x8>)
    8104:	4770      	bx	lr
    8106:	46c0      	nop			; (mov r8, r8)
    8108:	7ff80000 	.word	0x7ff80000

0000810c <rint>:
    810c:	b5f0      	push	{r4, r5, r6, r7, lr}
    810e:	46c6      	mov	lr, r8
    8110:	b500      	push	{lr}
    8112:	0fcb      	lsrs	r3, r1, #31
    8114:	4698      	mov	r8, r3
    8116:	4c4a      	ldr	r4, [pc, #296]	; (8240 <rint+0x134>)
    8118:	004b      	lsls	r3, r1, #1
    811a:	0d5b      	lsrs	r3, r3, #21
    811c:	191e      	adds	r6, r3, r4
    811e:	b082      	sub	sp, #8
    8120:	0007      	movs	r7, r0
    8122:	000a      	movs	r2, r1
    8124:	2e13      	cmp	r6, #19
    8126:	dc35      	bgt.n	8194 <rint+0x88>
    8128:	2e00      	cmp	r6, #0
    812a:	db57      	blt.n	81dc <rint+0xd0>
    812c:	4b45      	ldr	r3, [pc, #276]	; (8244 <rint+0x138>)
    812e:	0004      	movs	r4, r0
    8130:	4133      	asrs	r3, r6
    8132:	001f      	movs	r7, r3
    8134:	400f      	ands	r7, r1
    8136:	4307      	orrs	r7, r0
    8138:	000d      	movs	r5, r1
    813a:	2f00      	cmp	r7, #0
    813c:	d024      	beq.n	8188 <rint+0x7c>
    813e:	085b      	lsrs	r3, r3, #1
    8140:	001c      	movs	r4, r3
    8142:	400c      	ands	r4, r1
    8144:	4320      	orrs	r0, r4
    8146:	2700      	movs	r7, #0
    8148:	2800      	cmp	r0, #0
    814a:	d007      	beq.n	815c <rint+0x50>
    814c:	2e13      	cmp	r6, #19
    814e:	d100      	bne.n	8152 <rint+0x46>
    8150:	e073      	b.n	823a <rint+0x12e>
    8152:	2280      	movs	r2, #128	; 0x80
    8154:	02d2      	lsls	r2, r2, #11
    8156:	4132      	asrs	r2, r6
    8158:	4399      	bics	r1, r3
    815a:	430a      	orrs	r2, r1
    815c:	4643      	mov	r3, r8
    815e:	00de      	lsls	r6, r3, #3
    8160:	4b39      	ldr	r3, [pc, #228]	; (8248 <rint+0x13c>)
    8162:	0011      	movs	r1, r2
    8164:	199e      	adds	r6, r3, r6
    8166:	6834      	ldr	r4, [r6, #0]
    8168:	6875      	ldr	r5, [r6, #4]
    816a:	0038      	movs	r0, r7
    816c:	0022      	movs	r2, r4
    816e:	002b      	movs	r3, r5
    8170:	f001 fae0 	bl	9734 <__aeabi_dadd>
    8174:	9000      	str	r0, [sp, #0]
    8176:	9101      	str	r1, [sp, #4]
    8178:	9800      	ldr	r0, [sp, #0]
    817a:	9901      	ldr	r1, [sp, #4]
    817c:	0022      	movs	r2, r4
    817e:	002b      	movs	r3, r5
    8180:	f002 fc9c 	bl	aabc <__aeabi_dsub>
    8184:	0004      	movs	r4, r0
    8186:	000d      	movs	r5, r1
    8188:	0020      	movs	r0, r4
    818a:	0029      	movs	r1, r5
    818c:	b002      	add	sp, #8
    818e:	bc04      	pop	{r2}
    8190:	4690      	mov	r8, r2
    8192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8194:	2e33      	cmp	r6, #51	; 0x33
    8196:	dd0c      	ble.n	81b2 <rint+0xa6>
    8198:	2380      	movs	r3, #128	; 0x80
    819a:	0004      	movs	r4, r0
    819c:	00db      	lsls	r3, r3, #3
    819e:	000d      	movs	r5, r1
    81a0:	429e      	cmp	r6, r3
    81a2:	d1f1      	bne.n	8188 <rint+0x7c>
    81a4:	0002      	movs	r2, r0
    81a6:	000b      	movs	r3, r1
    81a8:	f001 fac4 	bl	9734 <__aeabi_dadd>
    81ac:	0004      	movs	r4, r0
    81ae:	000d      	movs	r5, r1
    81b0:	e7ea      	b.n	8188 <rint+0x7c>
    81b2:	4c26      	ldr	r4, [pc, #152]	; (824c <rint+0x140>)
    81b4:	000d      	movs	r5, r1
    81b6:	46a4      	mov	ip, r4
    81b8:	2401      	movs	r4, #1
    81ba:	4463      	add	r3, ip
    81bc:	4264      	negs	r4, r4
    81be:	40dc      	lsrs	r4, r3
    81c0:	46a4      	mov	ip, r4
    81c2:	4661      	mov	r1, ip
    81c4:	0004      	movs	r4, r0
    81c6:	4201      	tst	r1, r0
    81c8:	d0de      	beq.n	8188 <rint+0x7c>
    81ca:	0849      	lsrs	r1, r1, #1
    81cc:	4201      	tst	r1, r0
    81ce:	d0c5      	beq.n	815c <rint+0x50>
    81d0:	2780      	movs	r7, #128	; 0x80
    81d2:	05ff      	lsls	r7, r7, #23
    81d4:	411f      	asrs	r7, r3
    81d6:	4388      	bics	r0, r1
    81d8:	4307      	orrs	r7, r0
    81da:	e7bf      	b.n	815c <rint+0x50>
    81dc:	004b      	lsls	r3, r1, #1
    81de:	085b      	lsrs	r3, r3, #1
    81e0:	4303      	orrs	r3, r0
    81e2:	0004      	movs	r4, r0
    81e4:	000d      	movs	r5, r1
    81e6:	2b00      	cmp	r3, #0
    81e8:	d0ce      	beq.n	8188 <rint+0x7c>
    81ea:	030b      	lsls	r3, r1, #12
    81ec:	0b1b      	lsrs	r3, r3, #12
    81ee:	4303      	orrs	r3, r0
    81f0:	001a      	movs	r2, r3
    81f2:	425b      	negs	r3, r3
    81f4:	4313      	orrs	r3, r2
    81f6:	2280      	movs	r2, #128	; 0x80
    81f8:	0b1b      	lsrs	r3, r3, #12
    81fa:	0312      	lsls	r2, r2, #12
    81fc:	4013      	ands	r3, r2
    81fe:	0c4a      	lsrs	r2, r1, #17
    8200:	0452      	lsls	r2, r2, #17
    8202:	4313      	orrs	r3, r2
    8204:	0019      	movs	r1, r3
    8206:	4643      	mov	r3, r8
    8208:	00da      	lsls	r2, r3, #3
    820a:	4b0f      	ldr	r3, [pc, #60]	; (8248 <rint+0x13c>)
    820c:	189b      	adds	r3, r3, r2
    820e:	681c      	ldr	r4, [r3, #0]
    8210:	685d      	ldr	r5, [r3, #4]
    8212:	0022      	movs	r2, r4
    8214:	002b      	movs	r3, r5
    8216:	f001 fa8d 	bl	9734 <__aeabi_dadd>
    821a:	9000      	str	r0, [sp, #0]
    821c:	9101      	str	r1, [sp, #4]
    821e:	9800      	ldr	r0, [sp, #0]
    8220:	9901      	ldr	r1, [sp, #4]
    8222:	0022      	movs	r2, r4
    8224:	002b      	movs	r3, r5
    8226:	f002 fc49 	bl	aabc <__aeabi_dsub>
    822a:	4642      	mov	r2, r8
    822c:	004b      	lsls	r3, r1, #1
    822e:	085b      	lsrs	r3, r3, #1
    8230:	07d6      	lsls	r6, r2, #31
    8232:	4333      	orrs	r3, r6
    8234:	0004      	movs	r4, r0
    8236:	001d      	movs	r5, r3
    8238:	e7a6      	b.n	8188 <rint+0x7c>
    823a:	2780      	movs	r7, #128	; 0x80
    823c:	063f      	lsls	r7, r7, #24
    823e:	e788      	b.n	8152 <rint+0x46>
    8240:	fffffc01 	.word	0xfffffc01
    8244:	000fffff 	.word	0x000fffff
    8248:	000105a8 	.word	0x000105a8
    824c:	fffffbed 	.word	0xfffffbed

00008250 <scalbn>:
    8250:	004b      	lsls	r3, r1, #1
    8252:	b570      	push	{r4, r5, r6, lr}
    8254:	0d5b      	lsrs	r3, r3, #21
    8256:	0014      	movs	r4, r2
    8258:	000a      	movs	r2, r1
    825a:	2b00      	cmp	r3, #0
    825c:	d11a      	bne.n	8294 <scalbn+0x44>
    825e:	004b      	lsls	r3, r1, #1
    8260:	085b      	lsrs	r3, r3, #1
    8262:	4303      	orrs	r3, r0
    8264:	d015      	beq.n	8292 <scalbn+0x42>
    8266:	2200      	movs	r2, #0
    8268:	4b22      	ldr	r3, [pc, #136]	; (82f4 <scalbn+0xa4>)
    826a:	f002 f9a7 	bl	a5bc <__aeabi_dmul>
    826e:	4b22      	ldr	r3, [pc, #136]	; (82f8 <scalbn+0xa8>)
    8270:	000a      	movs	r2, r1
    8272:	429c      	cmp	r4, r3
    8274:	db22      	blt.n	82bc <scalbn+0x6c>
    8276:	004b      	lsls	r3, r1, #1
    8278:	0d5b      	lsrs	r3, r3, #21
    827a:	3b36      	subs	r3, #54	; 0x36
    827c:	4d1f      	ldr	r5, [pc, #124]	; (82fc <scalbn+0xac>)
    827e:	18e3      	adds	r3, r4, r3
    8280:	42ab      	cmp	r3, r5
    8282:	dc20      	bgt.n	82c6 <scalbn+0x76>
    8284:	2b00      	cmp	r3, #0
    8286:	dd0d      	ble.n	82a4 <scalbn+0x54>
    8288:	4c1d      	ldr	r4, [pc, #116]	; (8300 <scalbn+0xb0>)
    828a:	051b      	lsls	r3, r3, #20
    828c:	4022      	ands	r2, r4
    828e:	431a      	orrs	r2, r3
    8290:	0011      	movs	r1, r2
    8292:	bd70      	pop	{r4, r5, r6, pc}
    8294:	4d1b      	ldr	r5, [pc, #108]	; (8304 <scalbn+0xb4>)
    8296:	42ab      	cmp	r3, r5
    8298:	d1f0      	bne.n	827c <scalbn+0x2c>
    829a:	0002      	movs	r2, r0
    829c:	000b      	movs	r3, r1
    829e:	f001 fa49 	bl	9734 <__aeabi_dadd>
    82a2:	e7f6      	b.n	8292 <scalbn+0x42>
    82a4:	001d      	movs	r5, r3
    82a6:	3535      	adds	r5, #53	; 0x35
    82a8:	da18      	bge.n	82dc <scalbn+0x8c>
    82aa:	4b17      	ldr	r3, [pc, #92]	; (8308 <scalbn+0xb8>)
    82ac:	0002      	movs	r2, r0
    82ae:	429c      	cmp	r4, r3
    82b0:	dc0a      	bgt.n	82c8 <scalbn+0x78>
    82b2:	000b      	movs	r3, r1
    82b4:	4815      	ldr	r0, [pc, #84]	; (830c <scalbn+0xbc>)
    82b6:	4916      	ldr	r1, [pc, #88]	; (8310 <scalbn+0xc0>)
    82b8:	f000 f832 	bl	8320 <copysign>
    82bc:	4a13      	ldr	r2, [pc, #76]	; (830c <scalbn+0xbc>)
    82be:	4b14      	ldr	r3, [pc, #80]	; (8310 <scalbn+0xc0>)
    82c0:	f002 f97c 	bl	a5bc <__aeabi_dmul>
    82c4:	e7e5      	b.n	8292 <scalbn+0x42>
    82c6:	0002      	movs	r2, r0
    82c8:	000b      	movs	r3, r1
    82ca:	4812      	ldr	r0, [pc, #72]	; (8314 <scalbn+0xc4>)
    82cc:	4912      	ldr	r1, [pc, #72]	; (8318 <scalbn+0xc8>)
    82ce:	f000 f827 	bl	8320 <copysign>
    82d2:	4a10      	ldr	r2, [pc, #64]	; (8314 <scalbn+0xc4>)
    82d4:	4b10      	ldr	r3, [pc, #64]	; (8318 <scalbn+0xc8>)
    82d6:	f002 f971 	bl	a5bc <__aeabi_dmul>
    82da:	e7da      	b.n	8292 <scalbn+0x42>
    82dc:	4c08      	ldr	r4, [pc, #32]	; (8300 <scalbn+0xb0>)
    82de:	3336      	adds	r3, #54	; 0x36
    82e0:	4022      	ands	r2, r4
    82e2:	051b      	lsls	r3, r3, #20
    82e4:	4313      	orrs	r3, r2
    82e6:	0019      	movs	r1, r3
    82e8:	2200      	movs	r2, #0
    82ea:	4b0c      	ldr	r3, [pc, #48]	; (831c <scalbn+0xcc>)
    82ec:	f002 f966 	bl	a5bc <__aeabi_dmul>
    82f0:	e7cf      	b.n	8292 <scalbn+0x42>
    82f2:	46c0      	nop			; (mov r8, r8)
    82f4:	43500000 	.word	0x43500000
    82f8:	ffff3cb0 	.word	0xffff3cb0
    82fc:	000007fe 	.word	0x000007fe
    8300:	800fffff 	.word	0x800fffff
    8304:	000007ff 	.word	0x000007ff
    8308:	0000c350 	.word	0x0000c350
    830c:	c2f8f359 	.word	0xc2f8f359
    8310:	01a56e1f 	.word	0x01a56e1f
    8314:	8800759c 	.word	0x8800759c
    8318:	7e37e43c 	.word	0x7e37e43c
    831c:	3c900000 	.word	0x3c900000

00008320 <copysign>:
    8320:	b530      	push	{r4, r5, lr}
    8322:	004a      	lsls	r2, r1, #1
    8324:	0fdb      	lsrs	r3, r3, #31
    8326:	07db      	lsls	r3, r3, #31
    8328:	0852      	lsrs	r2, r2, #1
    832a:	431a      	orrs	r2, r3
    832c:	0011      	movs	r1, r2
    832e:	bd30      	pop	{r4, r5, pc}

00008330 <__udivsi3>:
    8330:	2200      	movs	r2, #0
    8332:	0843      	lsrs	r3, r0, #1
    8334:	428b      	cmp	r3, r1
    8336:	d374      	bcc.n	8422 <__udivsi3+0xf2>
    8338:	0903      	lsrs	r3, r0, #4
    833a:	428b      	cmp	r3, r1
    833c:	d35f      	bcc.n	83fe <__udivsi3+0xce>
    833e:	0a03      	lsrs	r3, r0, #8
    8340:	428b      	cmp	r3, r1
    8342:	d344      	bcc.n	83ce <__udivsi3+0x9e>
    8344:	0b03      	lsrs	r3, r0, #12
    8346:	428b      	cmp	r3, r1
    8348:	d328      	bcc.n	839c <__udivsi3+0x6c>
    834a:	0c03      	lsrs	r3, r0, #16
    834c:	428b      	cmp	r3, r1
    834e:	d30d      	bcc.n	836c <__udivsi3+0x3c>
    8350:	22ff      	movs	r2, #255	; 0xff
    8352:	0209      	lsls	r1, r1, #8
    8354:	ba12      	rev	r2, r2
    8356:	0c03      	lsrs	r3, r0, #16
    8358:	428b      	cmp	r3, r1
    835a:	d302      	bcc.n	8362 <__udivsi3+0x32>
    835c:	1212      	asrs	r2, r2, #8
    835e:	0209      	lsls	r1, r1, #8
    8360:	d065      	beq.n	842e <__udivsi3+0xfe>
    8362:	0b03      	lsrs	r3, r0, #12
    8364:	428b      	cmp	r3, r1
    8366:	d319      	bcc.n	839c <__udivsi3+0x6c>
    8368:	e000      	b.n	836c <__udivsi3+0x3c>
    836a:	0a09      	lsrs	r1, r1, #8
    836c:	0bc3      	lsrs	r3, r0, #15
    836e:	428b      	cmp	r3, r1
    8370:	d301      	bcc.n	8376 <__udivsi3+0x46>
    8372:	03cb      	lsls	r3, r1, #15
    8374:	1ac0      	subs	r0, r0, r3
    8376:	4152      	adcs	r2, r2
    8378:	0b83      	lsrs	r3, r0, #14
    837a:	428b      	cmp	r3, r1
    837c:	d301      	bcc.n	8382 <__udivsi3+0x52>
    837e:	038b      	lsls	r3, r1, #14
    8380:	1ac0      	subs	r0, r0, r3
    8382:	4152      	adcs	r2, r2
    8384:	0b43      	lsrs	r3, r0, #13
    8386:	428b      	cmp	r3, r1
    8388:	d301      	bcc.n	838e <__udivsi3+0x5e>
    838a:	034b      	lsls	r3, r1, #13
    838c:	1ac0      	subs	r0, r0, r3
    838e:	4152      	adcs	r2, r2
    8390:	0b03      	lsrs	r3, r0, #12
    8392:	428b      	cmp	r3, r1
    8394:	d301      	bcc.n	839a <__udivsi3+0x6a>
    8396:	030b      	lsls	r3, r1, #12
    8398:	1ac0      	subs	r0, r0, r3
    839a:	4152      	adcs	r2, r2
    839c:	0ac3      	lsrs	r3, r0, #11
    839e:	428b      	cmp	r3, r1
    83a0:	d301      	bcc.n	83a6 <__udivsi3+0x76>
    83a2:	02cb      	lsls	r3, r1, #11
    83a4:	1ac0      	subs	r0, r0, r3
    83a6:	4152      	adcs	r2, r2
    83a8:	0a83      	lsrs	r3, r0, #10
    83aa:	428b      	cmp	r3, r1
    83ac:	d301      	bcc.n	83b2 <__udivsi3+0x82>
    83ae:	028b      	lsls	r3, r1, #10
    83b0:	1ac0      	subs	r0, r0, r3
    83b2:	4152      	adcs	r2, r2
    83b4:	0a43      	lsrs	r3, r0, #9
    83b6:	428b      	cmp	r3, r1
    83b8:	d301      	bcc.n	83be <__udivsi3+0x8e>
    83ba:	024b      	lsls	r3, r1, #9
    83bc:	1ac0      	subs	r0, r0, r3
    83be:	4152      	adcs	r2, r2
    83c0:	0a03      	lsrs	r3, r0, #8
    83c2:	428b      	cmp	r3, r1
    83c4:	d301      	bcc.n	83ca <__udivsi3+0x9a>
    83c6:	020b      	lsls	r3, r1, #8
    83c8:	1ac0      	subs	r0, r0, r3
    83ca:	4152      	adcs	r2, r2
    83cc:	d2cd      	bcs.n	836a <__udivsi3+0x3a>
    83ce:	09c3      	lsrs	r3, r0, #7
    83d0:	428b      	cmp	r3, r1
    83d2:	d301      	bcc.n	83d8 <__udivsi3+0xa8>
    83d4:	01cb      	lsls	r3, r1, #7
    83d6:	1ac0      	subs	r0, r0, r3
    83d8:	4152      	adcs	r2, r2
    83da:	0983      	lsrs	r3, r0, #6
    83dc:	428b      	cmp	r3, r1
    83de:	d301      	bcc.n	83e4 <__udivsi3+0xb4>
    83e0:	018b      	lsls	r3, r1, #6
    83e2:	1ac0      	subs	r0, r0, r3
    83e4:	4152      	adcs	r2, r2
    83e6:	0943      	lsrs	r3, r0, #5
    83e8:	428b      	cmp	r3, r1
    83ea:	d301      	bcc.n	83f0 <__udivsi3+0xc0>
    83ec:	014b      	lsls	r3, r1, #5
    83ee:	1ac0      	subs	r0, r0, r3
    83f0:	4152      	adcs	r2, r2
    83f2:	0903      	lsrs	r3, r0, #4
    83f4:	428b      	cmp	r3, r1
    83f6:	d301      	bcc.n	83fc <__udivsi3+0xcc>
    83f8:	010b      	lsls	r3, r1, #4
    83fa:	1ac0      	subs	r0, r0, r3
    83fc:	4152      	adcs	r2, r2
    83fe:	08c3      	lsrs	r3, r0, #3
    8400:	428b      	cmp	r3, r1
    8402:	d301      	bcc.n	8408 <__udivsi3+0xd8>
    8404:	00cb      	lsls	r3, r1, #3
    8406:	1ac0      	subs	r0, r0, r3
    8408:	4152      	adcs	r2, r2
    840a:	0883      	lsrs	r3, r0, #2
    840c:	428b      	cmp	r3, r1
    840e:	d301      	bcc.n	8414 <__udivsi3+0xe4>
    8410:	008b      	lsls	r3, r1, #2
    8412:	1ac0      	subs	r0, r0, r3
    8414:	4152      	adcs	r2, r2
    8416:	0843      	lsrs	r3, r0, #1
    8418:	428b      	cmp	r3, r1
    841a:	d301      	bcc.n	8420 <__udivsi3+0xf0>
    841c:	004b      	lsls	r3, r1, #1
    841e:	1ac0      	subs	r0, r0, r3
    8420:	4152      	adcs	r2, r2
    8422:	1a41      	subs	r1, r0, r1
    8424:	d200      	bcs.n	8428 <__udivsi3+0xf8>
    8426:	4601      	mov	r1, r0
    8428:	4152      	adcs	r2, r2
    842a:	4610      	mov	r0, r2
    842c:	4770      	bx	lr
    842e:	e7ff      	b.n	8430 <__udivsi3+0x100>
    8430:	b501      	push	{r0, lr}
    8432:	2000      	movs	r0, #0
    8434:	f000 f8f0 	bl	8618 <__aeabi_idiv0>
    8438:	bd02      	pop	{r1, pc}
    843a:	46c0      	nop			; (mov r8, r8)

0000843c <__aeabi_uidivmod>:
    843c:	2900      	cmp	r1, #0
    843e:	d0f7      	beq.n	8430 <__udivsi3+0x100>
    8440:	e776      	b.n	8330 <__udivsi3>
    8442:	4770      	bx	lr

00008444 <__divsi3>:
    8444:	4603      	mov	r3, r0
    8446:	430b      	orrs	r3, r1
    8448:	d47f      	bmi.n	854a <__divsi3+0x106>
    844a:	2200      	movs	r2, #0
    844c:	0843      	lsrs	r3, r0, #1
    844e:	428b      	cmp	r3, r1
    8450:	d374      	bcc.n	853c <__divsi3+0xf8>
    8452:	0903      	lsrs	r3, r0, #4
    8454:	428b      	cmp	r3, r1
    8456:	d35f      	bcc.n	8518 <__divsi3+0xd4>
    8458:	0a03      	lsrs	r3, r0, #8
    845a:	428b      	cmp	r3, r1
    845c:	d344      	bcc.n	84e8 <__divsi3+0xa4>
    845e:	0b03      	lsrs	r3, r0, #12
    8460:	428b      	cmp	r3, r1
    8462:	d328      	bcc.n	84b6 <__divsi3+0x72>
    8464:	0c03      	lsrs	r3, r0, #16
    8466:	428b      	cmp	r3, r1
    8468:	d30d      	bcc.n	8486 <__divsi3+0x42>
    846a:	22ff      	movs	r2, #255	; 0xff
    846c:	0209      	lsls	r1, r1, #8
    846e:	ba12      	rev	r2, r2
    8470:	0c03      	lsrs	r3, r0, #16
    8472:	428b      	cmp	r3, r1
    8474:	d302      	bcc.n	847c <__divsi3+0x38>
    8476:	1212      	asrs	r2, r2, #8
    8478:	0209      	lsls	r1, r1, #8
    847a:	d065      	beq.n	8548 <__divsi3+0x104>
    847c:	0b03      	lsrs	r3, r0, #12
    847e:	428b      	cmp	r3, r1
    8480:	d319      	bcc.n	84b6 <__divsi3+0x72>
    8482:	e000      	b.n	8486 <__divsi3+0x42>
    8484:	0a09      	lsrs	r1, r1, #8
    8486:	0bc3      	lsrs	r3, r0, #15
    8488:	428b      	cmp	r3, r1
    848a:	d301      	bcc.n	8490 <__divsi3+0x4c>
    848c:	03cb      	lsls	r3, r1, #15
    848e:	1ac0      	subs	r0, r0, r3
    8490:	4152      	adcs	r2, r2
    8492:	0b83      	lsrs	r3, r0, #14
    8494:	428b      	cmp	r3, r1
    8496:	d301      	bcc.n	849c <__divsi3+0x58>
    8498:	038b      	lsls	r3, r1, #14
    849a:	1ac0      	subs	r0, r0, r3
    849c:	4152      	adcs	r2, r2
    849e:	0b43      	lsrs	r3, r0, #13
    84a0:	428b      	cmp	r3, r1
    84a2:	d301      	bcc.n	84a8 <__divsi3+0x64>
    84a4:	034b      	lsls	r3, r1, #13
    84a6:	1ac0      	subs	r0, r0, r3
    84a8:	4152      	adcs	r2, r2
    84aa:	0b03      	lsrs	r3, r0, #12
    84ac:	428b      	cmp	r3, r1
    84ae:	d301      	bcc.n	84b4 <__divsi3+0x70>
    84b0:	030b      	lsls	r3, r1, #12
    84b2:	1ac0      	subs	r0, r0, r3
    84b4:	4152      	adcs	r2, r2
    84b6:	0ac3      	lsrs	r3, r0, #11
    84b8:	428b      	cmp	r3, r1
    84ba:	d301      	bcc.n	84c0 <__divsi3+0x7c>
    84bc:	02cb      	lsls	r3, r1, #11
    84be:	1ac0      	subs	r0, r0, r3
    84c0:	4152      	adcs	r2, r2
    84c2:	0a83      	lsrs	r3, r0, #10
    84c4:	428b      	cmp	r3, r1
    84c6:	d301      	bcc.n	84cc <__divsi3+0x88>
    84c8:	028b      	lsls	r3, r1, #10
    84ca:	1ac0      	subs	r0, r0, r3
    84cc:	4152      	adcs	r2, r2
    84ce:	0a43      	lsrs	r3, r0, #9
    84d0:	428b      	cmp	r3, r1
    84d2:	d301      	bcc.n	84d8 <__divsi3+0x94>
    84d4:	024b      	lsls	r3, r1, #9
    84d6:	1ac0      	subs	r0, r0, r3
    84d8:	4152      	adcs	r2, r2
    84da:	0a03      	lsrs	r3, r0, #8
    84dc:	428b      	cmp	r3, r1
    84de:	d301      	bcc.n	84e4 <__divsi3+0xa0>
    84e0:	020b      	lsls	r3, r1, #8
    84e2:	1ac0      	subs	r0, r0, r3
    84e4:	4152      	adcs	r2, r2
    84e6:	d2cd      	bcs.n	8484 <__divsi3+0x40>
    84e8:	09c3      	lsrs	r3, r0, #7
    84ea:	428b      	cmp	r3, r1
    84ec:	d301      	bcc.n	84f2 <__divsi3+0xae>
    84ee:	01cb      	lsls	r3, r1, #7
    84f0:	1ac0      	subs	r0, r0, r3
    84f2:	4152      	adcs	r2, r2
    84f4:	0983      	lsrs	r3, r0, #6
    84f6:	428b      	cmp	r3, r1
    84f8:	d301      	bcc.n	84fe <__divsi3+0xba>
    84fa:	018b      	lsls	r3, r1, #6
    84fc:	1ac0      	subs	r0, r0, r3
    84fe:	4152      	adcs	r2, r2
    8500:	0943      	lsrs	r3, r0, #5
    8502:	428b      	cmp	r3, r1
    8504:	d301      	bcc.n	850a <__divsi3+0xc6>
    8506:	014b      	lsls	r3, r1, #5
    8508:	1ac0      	subs	r0, r0, r3
    850a:	4152      	adcs	r2, r2
    850c:	0903      	lsrs	r3, r0, #4
    850e:	428b      	cmp	r3, r1
    8510:	d301      	bcc.n	8516 <__divsi3+0xd2>
    8512:	010b      	lsls	r3, r1, #4
    8514:	1ac0      	subs	r0, r0, r3
    8516:	4152      	adcs	r2, r2
    8518:	08c3      	lsrs	r3, r0, #3
    851a:	428b      	cmp	r3, r1
    851c:	d301      	bcc.n	8522 <__divsi3+0xde>
    851e:	00cb      	lsls	r3, r1, #3
    8520:	1ac0      	subs	r0, r0, r3
    8522:	4152      	adcs	r2, r2
    8524:	0883      	lsrs	r3, r0, #2
    8526:	428b      	cmp	r3, r1
    8528:	d301      	bcc.n	852e <__divsi3+0xea>
    852a:	008b      	lsls	r3, r1, #2
    852c:	1ac0      	subs	r0, r0, r3
    852e:	4152      	adcs	r2, r2
    8530:	0843      	lsrs	r3, r0, #1
    8532:	428b      	cmp	r3, r1
    8534:	d301      	bcc.n	853a <__divsi3+0xf6>
    8536:	004b      	lsls	r3, r1, #1
    8538:	1ac0      	subs	r0, r0, r3
    853a:	4152      	adcs	r2, r2
    853c:	1a41      	subs	r1, r0, r1
    853e:	d200      	bcs.n	8542 <__divsi3+0xfe>
    8540:	4601      	mov	r1, r0
    8542:	4152      	adcs	r2, r2
    8544:	4610      	mov	r0, r2
    8546:	4770      	bx	lr
    8548:	e05d      	b.n	8606 <__divsi3+0x1c2>
    854a:	0fca      	lsrs	r2, r1, #31
    854c:	d000      	beq.n	8550 <__divsi3+0x10c>
    854e:	4249      	negs	r1, r1
    8550:	1003      	asrs	r3, r0, #32
    8552:	d300      	bcc.n	8556 <__divsi3+0x112>
    8554:	4240      	negs	r0, r0
    8556:	4053      	eors	r3, r2
    8558:	2200      	movs	r2, #0
    855a:	469c      	mov	ip, r3
    855c:	0903      	lsrs	r3, r0, #4
    855e:	428b      	cmp	r3, r1
    8560:	d32d      	bcc.n	85be <__divsi3+0x17a>
    8562:	0a03      	lsrs	r3, r0, #8
    8564:	428b      	cmp	r3, r1
    8566:	d312      	bcc.n	858e <__divsi3+0x14a>
    8568:	22fc      	movs	r2, #252	; 0xfc
    856a:	0189      	lsls	r1, r1, #6
    856c:	ba12      	rev	r2, r2
    856e:	0a03      	lsrs	r3, r0, #8
    8570:	428b      	cmp	r3, r1
    8572:	d30c      	bcc.n	858e <__divsi3+0x14a>
    8574:	0189      	lsls	r1, r1, #6
    8576:	1192      	asrs	r2, r2, #6
    8578:	428b      	cmp	r3, r1
    857a:	d308      	bcc.n	858e <__divsi3+0x14a>
    857c:	0189      	lsls	r1, r1, #6
    857e:	1192      	asrs	r2, r2, #6
    8580:	428b      	cmp	r3, r1
    8582:	d304      	bcc.n	858e <__divsi3+0x14a>
    8584:	0189      	lsls	r1, r1, #6
    8586:	d03a      	beq.n	85fe <__divsi3+0x1ba>
    8588:	1192      	asrs	r2, r2, #6
    858a:	e000      	b.n	858e <__divsi3+0x14a>
    858c:	0989      	lsrs	r1, r1, #6
    858e:	09c3      	lsrs	r3, r0, #7
    8590:	428b      	cmp	r3, r1
    8592:	d301      	bcc.n	8598 <__divsi3+0x154>
    8594:	01cb      	lsls	r3, r1, #7
    8596:	1ac0      	subs	r0, r0, r3
    8598:	4152      	adcs	r2, r2
    859a:	0983      	lsrs	r3, r0, #6
    859c:	428b      	cmp	r3, r1
    859e:	d301      	bcc.n	85a4 <__divsi3+0x160>
    85a0:	018b      	lsls	r3, r1, #6
    85a2:	1ac0      	subs	r0, r0, r3
    85a4:	4152      	adcs	r2, r2
    85a6:	0943      	lsrs	r3, r0, #5
    85a8:	428b      	cmp	r3, r1
    85aa:	d301      	bcc.n	85b0 <__divsi3+0x16c>
    85ac:	014b      	lsls	r3, r1, #5
    85ae:	1ac0      	subs	r0, r0, r3
    85b0:	4152      	adcs	r2, r2
    85b2:	0903      	lsrs	r3, r0, #4
    85b4:	428b      	cmp	r3, r1
    85b6:	d301      	bcc.n	85bc <__divsi3+0x178>
    85b8:	010b      	lsls	r3, r1, #4
    85ba:	1ac0      	subs	r0, r0, r3
    85bc:	4152      	adcs	r2, r2
    85be:	08c3      	lsrs	r3, r0, #3
    85c0:	428b      	cmp	r3, r1
    85c2:	d301      	bcc.n	85c8 <__divsi3+0x184>
    85c4:	00cb      	lsls	r3, r1, #3
    85c6:	1ac0      	subs	r0, r0, r3
    85c8:	4152      	adcs	r2, r2
    85ca:	0883      	lsrs	r3, r0, #2
    85cc:	428b      	cmp	r3, r1
    85ce:	d301      	bcc.n	85d4 <__divsi3+0x190>
    85d0:	008b      	lsls	r3, r1, #2
    85d2:	1ac0      	subs	r0, r0, r3
    85d4:	4152      	adcs	r2, r2
    85d6:	d2d9      	bcs.n	858c <__divsi3+0x148>
    85d8:	0843      	lsrs	r3, r0, #1
    85da:	428b      	cmp	r3, r1
    85dc:	d301      	bcc.n	85e2 <__divsi3+0x19e>
    85de:	004b      	lsls	r3, r1, #1
    85e0:	1ac0      	subs	r0, r0, r3
    85e2:	4152      	adcs	r2, r2
    85e4:	1a41      	subs	r1, r0, r1
    85e6:	d200      	bcs.n	85ea <__divsi3+0x1a6>
    85e8:	4601      	mov	r1, r0
    85ea:	4663      	mov	r3, ip
    85ec:	4152      	adcs	r2, r2
    85ee:	105b      	asrs	r3, r3, #1
    85f0:	4610      	mov	r0, r2
    85f2:	d301      	bcc.n	85f8 <__divsi3+0x1b4>
    85f4:	4240      	negs	r0, r0
    85f6:	2b00      	cmp	r3, #0
    85f8:	d500      	bpl.n	85fc <__divsi3+0x1b8>
    85fa:	4249      	negs	r1, r1
    85fc:	4770      	bx	lr
    85fe:	4663      	mov	r3, ip
    8600:	105b      	asrs	r3, r3, #1
    8602:	d300      	bcc.n	8606 <__divsi3+0x1c2>
    8604:	4240      	negs	r0, r0
    8606:	b501      	push	{r0, lr}
    8608:	2000      	movs	r0, #0
    860a:	f000 f805 	bl	8618 <__aeabi_idiv0>
    860e:	bd02      	pop	{r1, pc}

00008610 <__aeabi_idivmod>:
    8610:	2900      	cmp	r1, #0
    8612:	d0f8      	beq.n	8606 <__divsi3+0x1c2>
    8614:	e716      	b.n	8444 <__divsi3>
    8616:	4770      	bx	lr

00008618 <__aeabi_idiv0>:
    8618:	4770      	bx	lr
    861a:	46c0      	nop			; (mov r8, r8)

0000861c <__aeabi_cdrcmple>:
    861c:	4684      	mov	ip, r0
    861e:	1c10      	adds	r0, r2, #0
    8620:	4662      	mov	r2, ip
    8622:	468c      	mov	ip, r1
    8624:	1c19      	adds	r1, r3, #0
    8626:	4663      	mov	r3, ip
    8628:	e000      	b.n	862c <__aeabi_cdcmpeq>
    862a:	46c0      	nop			; (mov r8, r8)

0000862c <__aeabi_cdcmpeq>:
    862c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    862e:	f001 ff63 	bl	a4f8 <__ledf2>
    8632:	2800      	cmp	r0, #0
    8634:	d401      	bmi.n	863a <__aeabi_cdcmpeq+0xe>
    8636:	2100      	movs	r1, #0
    8638:	42c8      	cmn	r0, r1
    863a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000863c <__aeabi_dcmpeq>:
    863c:	b510      	push	{r4, lr}
    863e:	f001 febd 	bl	a3bc <__eqdf2>
    8642:	4240      	negs	r0, r0
    8644:	3001      	adds	r0, #1
    8646:	bd10      	pop	{r4, pc}

00008648 <__aeabi_dcmplt>:
    8648:	b510      	push	{r4, lr}
    864a:	f001 ff55 	bl	a4f8 <__ledf2>
    864e:	2800      	cmp	r0, #0
    8650:	db01      	blt.n	8656 <__aeabi_dcmplt+0xe>
    8652:	2000      	movs	r0, #0
    8654:	bd10      	pop	{r4, pc}
    8656:	2001      	movs	r0, #1
    8658:	bd10      	pop	{r4, pc}
    865a:	46c0      	nop			; (mov r8, r8)

0000865c <__aeabi_dcmple>:
    865c:	b510      	push	{r4, lr}
    865e:	f001 ff4b 	bl	a4f8 <__ledf2>
    8662:	2800      	cmp	r0, #0
    8664:	dd01      	ble.n	866a <__aeabi_dcmple+0xe>
    8666:	2000      	movs	r0, #0
    8668:	bd10      	pop	{r4, pc}
    866a:	2001      	movs	r0, #1
    866c:	bd10      	pop	{r4, pc}
    866e:	46c0      	nop			; (mov r8, r8)

00008670 <__aeabi_dcmpgt>:
    8670:	b510      	push	{r4, lr}
    8672:	f001 fedd 	bl	a430 <__gedf2>
    8676:	2800      	cmp	r0, #0
    8678:	dc01      	bgt.n	867e <__aeabi_dcmpgt+0xe>
    867a:	2000      	movs	r0, #0
    867c:	bd10      	pop	{r4, pc}
    867e:	2001      	movs	r0, #1
    8680:	bd10      	pop	{r4, pc}
    8682:	46c0      	nop			; (mov r8, r8)

00008684 <__aeabi_dcmpge>:
    8684:	b510      	push	{r4, lr}
    8686:	f001 fed3 	bl	a430 <__gedf2>
    868a:	2800      	cmp	r0, #0
    868c:	da01      	bge.n	8692 <__aeabi_dcmpge+0xe>
    868e:	2000      	movs	r0, #0
    8690:	bd10      	pop	{r4, pc}
    8692:	2001      	movs	r0, #1
    8694:	bd10      	pop	{r4, pc}
    8696:	46c0      	nop			; (mov r8, r8)

00008698 <__aeabi_cfrcmple>:
    8698:	4684      	mov	ip, r0
    869a:	1c08      	adds	r0, r1, #0
    869c:	4661      	mov	r1, ip
    869e:	e7ff      	b.n	86a0 <__aeabi_cfcmpeq>

000086a0 <__aeabi_cfcmpeq>:
    86a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    86a2:	f000 fc93 	bl	8fcc <__lesf2>
    86a6:	2800      	cmp	r0, #0
    86a8:	d401      	bmi.n	86ae <__aeabi_cfcmpeq+0xe>
    86aa:	2100      	movs	r1, #0
    86ac:	42c8      	cmn	r0, r1
    86ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000086b0 <__aeabi_fcmpeq>:
    86b0:	b510      	push	{r4, lr}
    86b2:	f000 fc25 	bl	8f00 <__eqsf2>
    86b6:	4240      	negs	r0, r0
    86b8:	3001      	adds	r0, #1
    86ba:	bd10      	pop	{r4, pc}

000086bc <__aeabi_fcmplt>:
    86bc:	b510      	push	{r4, lr}
    86be:	f000 fc85 	bl	8fcc <__lesf2>
    86c2:	2800      	cmp	r0, #0
    86c4:	db01      	blt.n	86ca <__aeabi_fcmplt+0xe>
    86c6:	2000      	movs	r0, #0
    86c8:	bd10      	pop	{r4, pc}
    86ca:	2001      	movs	r0, #1
    86cc:	bd10      	pop	{r4, pc}
    86ce:	46c0      	nop			; (mov r8, r8)

000086d0 <__aeabi_fcmple>:
    86d0:	b510      	push	{r4, lr}
    86d2:	f000 fc7b 	bl	8fcc <__lesf2>
    86d6:	2800      	cmp	r0, #0
    86d8:	dd01      	ble.n	86de <__aeabi_fcmple+0xe>
    86da:	2000      	movs	r0, #0
    86dc:	bd10      	pop	{r4, pc}
    86de:	2001      	movs	r0, #1
    86e0:	bd10      	pop	{r4, pc}
    86e2:	46c0      	nop			; (mov r8, r8)

000086e4 <__aeabi_fcmpgt>:
    86e4:	b510      	push	{r4, lr}
    86e6:	f000 fc31 	bl	8f4c <__gesf2>
    86ea:	2800      	cmp	r0, #0
    86ec:	dc01      	bgt.n	86f2 <__aeabi_fcmpgt+0xe>
    86ee:	2000      	movs	r0, #0
    86f0:	bd10      	pop	{r4, pc}
    86f2:	2001      	movs	r0, #1
    86f4:	bd10      	pop	{r4, pc}
    86f6:	46c0      	nop			; (mov r8, r8)

000086f8 <__aeabi_fcmpge>:
    86f8:	b510      	push	{r4, lr}
    86fa:	f000 fc27 	bl	8f4c <__gesf2>
    86fe:	2800      	cmp	r0, #0
    8700:	da01      	bge.n	8706 <__aeabi_fcmpge+0xe>
    8702:	2000      	movs	r0, #0
    8704:	bd10      	pop	{r4, pc}
    8706:	2001      	movs	r0, #1
    8708:	bd10      	pop	{r4, pc}
    870a:	46c0      	nop			; (mov r8, r8)

0000870c <__aeabi_uldivmod>:
    870c:	2b00      	cmp	r3, #0
    870e:	d111      	bne.n	8734 <__aeabi_uldivmod+0x28>
    8710:	2a00      	cmp	r2, #0
    8712:	d10f      	bne.n	8734 <__aeabi_uldivmod+0x28>
    8714:	2900      	cmp	r1, #0
    8716:	d100      	bne.n	871a <__aeabi_uldivmod+0xe>
    8718:	2800      	cmp	r0, #0
    871a:	d002      	beq.n	8722 <__aeabi_uldivmod+0x16>
    871c:	2100      	movs	r1, #0
    871e:	43c9      	mvns	r1, r1
    8720:	1c08      	adds	r0, r1, #0
    8722:	b407      	push	{r0, r1, r2}
    8724:	4802      	ldr	r0, [pc, #8]	; (8730 <__aeabi_uldivmod+0x24>)
    8726:	a102      	add	r1, pc, #8	; (adr r1, 8730 <__aeabi_uldivmod+0x24>)
    8728:	1840      	adds	r0, r0, r1
    872a:	9002      	str	r0, [sp, #8]
    872c:	bd03      	pop	{r0, r1, pc}
    872e:	46c0      	nop			; (mov r8, r8)
    8730:	fffffee9 	.word	0xfffffee9
    8734:	b403      	push	{r0, r1}
    8736:	4668      	mov	r0, sp
    8738:	b501      	push	{r0, lr}
    873a:	9802      	ldr	r0, [sp, #8]
    873c:	f000 f846 	bl	87cc <__udivmoddi4>
    8740:	9b01      	ldr	r3, [sp, #4]
    8742:	469e      	mov	lr, r3
    8744:	b002      	add	sp, #8
    8746:	bc0c      	pop	{r2, r3}
    8748:	4770      	bx	lr
    874a:	46c0      	nop			; (mov r8, r8)

0000874c <__ffssi2>:
    874c:	b510      	push	{r4, lr}
    874e:	2300      	movs	r3, #0
    8750:	2800      	cmp	r0, #0
    8752:	d002      	beq.n	875a <__ffssi2+0xe>
    8754:	f002 fe12 	bl	b37c <__ctzsi2>
    8758:	1c43      	adds	r3, r0, #1
    875a:	0018      	movs	r0, r3
    875c:	bd10      	pop	{r4, pc}
    875e:	46c0      	nop			; (mov r8, r8)

00008760 <__aeabi_f2uiz>:
    8760:	219e      	movs	r1, #158	; 0x9e
    8762:	b510      	push	{r4, lr}
    8764:	05c9      	lsls	r1, r1, #23
    8766:	1c04      	adds	r4, r0, #0
    8768:	f7ff ffc6 	bl	86f8 <__aeabi_fcmpge>
    876c:	2800      	cmp	r0, #0
    876e:	d103      	bne.n	8778 <__aeabi_f2uiz+0x18>
    8770:	1c20      	adds	r0, r4, #0
    8772:	f000 ff29 	bl	95c8 <__aeabi_f2iz>
    8776:	bd10      	pop	{r4, pc}
    8778:	219e      	movs	r1, #158	; 0x9e
    877a:	1c20      	adds	r0, r4, #0
    877c:	05c9      	lsls	r1, r1, #23
    877e:	f000 fd87 	bl	9290 <__aeabi_fsub>
    8782:	f000 ff21 	bl	95c8 <__aeabi_f2iz>
    8786:	2380      	movs	r3, #128	; 0x80
    8788:	061b      	lsls	r3, r3, #24
    878a:	469c      	mov	ip, r3
    878c:	4460      	add	r0, ip
    878e:	e7f2      	b.n	8776 <__aeabi_f2uiz+0x16>

00008790 <__aeabi_d2uiz>:
    8790:	b570      	push	{r4, r5, r6, lr}
    8792:	2200      	movs	r2, #0
    8794:	4b0c      	ldr	r3, [pc, #48]	; (87c8 <__aeabi_d2uiz+0x38>)
    8796:	0004      	movs	r4, r0
    8798:	000d      	movs	r5, r1
    879a:	f7ff ff73 	bl	8684 <__aeabi_dcmpge>
    879e:	2800      	cmp	r0, #0
    87a0:	d104      	bne.n	87ac <__aeabi_d2uiz+0x1c>
    87a2:	0020      	movs	r0, r4
    87a4:	0029      	movs	r1, r5
    87a6:	f002 fcbf 	bl	b128 <__aeabi_d2iz>
    87aa:	bd70      	pop	{r4, r5, r6, pc}
    87ac:	4b06      	ldr	r3, [pc, #24]	; (87c8 <__aeabi_d2uiz+0x38>)
    87ae:	2200      	movs	r2, #0
    87b0:	0020      	movs	r0, r4
    87b2:	0029      	movs	r1, r5
    87b4:	f002 f982 	bl	aabc <__aeabi_dsub>
    87b8:	f002 fcb6 	bl	b128 <__aeabi_d2iz>
    87bc:	2380      	movs	r3, #128	; 0x80
    87be:	061b      	lsls	r3, r3, #24
    87c0:	469c      	mov	ip, r3
    87c2:	4460      	add	r0, ip
    87c4:	e7f1      	b.n	87aa <__aeabi_d2uiz+0x1a>
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	41e00000 	.word	0x41e00000

000087cc <__udivmoddi4>:
    87cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ce:	4657      	mov	r7, sl
    87d0:	464e      	mov	r6, r9
    87d2:	4645      	mov	r5, r8
    87d4:	46de      	mov	lr, fp
    87d6:	b5e0      	push	{r5, r6, r7, lr}
    87d8:	0004      	movs	r4, r0
    87da:	b083      	sub	sp, #12
    87dc:	000d      	movs	r5, r1
    87de:	4692      	mov	sl, r2
    87e0:	4699      	mov	r9, r3
    87e2:	428b      	cmp	r3, r1
    87e4:	d82f      	bhi.n	8846 <__udivmoddi4+0x7a>
    87e6:	d02c      	beq.n	8842 <__udivmoddi4+0x76>
    87e8:	4649      	mov	r1, r9
    87ea:	4650      	mov	r0, sl
    87ec:	f002 fdba 	bl	b364 <__clzdi2>
    87f0:	0029      	movs	r1, r5
    87f2:	0006      	movs	r6, r0
    87f4:	0020      	movs	r0, r4
    87f6:	f002 fdb5 	bl	b364 <__clzdi2>
    87fa:	1a33      	subs	r3, r6, r0
    87fc:	4698      	mov	r8, r3
    87fe:	3b20      	subs	r3, #32
    8800:	469b      	mov	fp, r3
    8802:	d500      	bpl.n	8806 <__udivmoddi4+0x3a>
    8804:	e074      	b.n	88f0 <__udivmoddi4+0x124>
    8806:	4653      	mov	r3, sl
    8808:	465a      	mov	r2, fp
    880a:	4093      	lsls	r3, r2
    880c:	001f      	movs	r7, r3
    880e:	4653      	mov	r3, sl
    8810:	4642      	mov	r2, r8
    8812:	4093      	lsls	r3, r2
    8814:	001e      	movs	r6, r3
    8816:	42af      	cmp	r7, r5
    8818:	d829      	bhi.n	886e <__udivmoddi4+0xa2>
    881a:	d026      	beq.n	886a <__udivmoddi4+0x9e>
    881c:	465b      	mov	r3, fp
    881e:	1ba4      	subs	r4, r4, r6
    8820:	41bd      	sbcs	r5, r7
    8822:	2b00      	cmp	r3, #0
    8824:	da00      	bge.n	8828 <__udivmoddi4+0x5c>
    8826:	e079      	b.n	891c <__udivmoddi4+0x150>
    8828:	2200      	movs	r2, #0
    882a:	2300      	movs	r3, #0
    882c:	9200      	str	r2, [sp, #0]
    882e:	9301      	str	r3, [sp, #4]
    8830:	2301      	movs	r3, #1
    8832:	465a      	mov	r2, fp
    8834:	4093      	lsls	r3, r2
    8836:	9301      	str	r3, [sp, #4]
    8838:	2301      	movs	r3, #1
    883a:	4642      	mov	r2, r8
    883c:	4093      	lsls	r3, r2
    883e:	9300      	str	r3, [sp, #0]
    8840:	e019      	b.n	8876 <__udivmoddi4+0xaa>
    8842:	4282      	cmp	r2, r0
    8844:	d9d0      	bls.n	87e8 <__udivmoddi4+0x1c>
    8846:	2200      	movs	r2, #0
    8848:	2300      	movs	r3, #0
    884a:	9200      	str	r2, [sp, #0]
    884c:	9301      	str	r3, [sp, #4]
    884e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8850:	2b00      	cmp	r3, #0
    8852:	d001      	beq.n	8858 <__udivmoddi4+0x8c>
    8854:	601c      	str	r4, [r3, #0]
    8856:	605d      	str	r5, [r3, #4]
    8858:	9800      	ldr	r0, [sp, #0]
    885a:	9901      	ldr	r1, [sp, #4]
    885c:	b003      	add	sp, #12
    885e:	bc3c      	pop	{r2, r3, r4, r5}
    8860:	4690      	mov	r8, r2
    8862:	4699      	mov	r9, r3
    8864:	46a2      	mov	sl, r4
    8866:	46ab      	mov	fp, r5
    8868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    886a:	42a3      	cmp	r3, r4
    886c:	d9d6      	bls.n	881c <__udivmoddi4+0x50>
    886e:	2200      	movs	r2, #0
    8870:	2300      	movs	r3, #0
    8872:	9200      	str	r2, [sp, #0]
    8874:	9301      	str	r3, [sp, #4]
    8876:	4643      	mov	r3, r8
    8878:	2b00      	cmp	r3, #0
    887a:	d0e8      	beq.n	884e <__udivmoddi4+0x82>
    887c:	07fb      	lsls	r3, r7, #31
    887e:	0872      	lsrs	r2, r6, #1
    8880:	431a      	orrs	r2, r3
    8882:	4646      	mov	r6, r8
    8884:	087b      	lsrs	r3, r7, #1
    8886:	e00e      	b.n	88a6 <__udivmoddi4+0xda>
    8888:	42ab      	cmp	r3, r5
    888a:	d101      	bne.n	8890 <__udivmoddi4+0xc4>
    888c:	42a2      	cmp	r2, r4
    888e:	d80c      	bhi.n	88aa <__udivmoddi4+0xde>
    8890:	1aa4      	subs	r4, r4, r2
    8892:	419d      	sbcs	r5, r3
    8894:	2001      	movs	r0, #1
    8896:	1924      	adds	r4, r4, r4
    8898:	416d      	adcs	r5, r5
    889a:	2100      	movs	r1, #0
    889c:	3e01      	subs	r6, #1
    889e:	1824      	adds	r4, r4, r0
    88a0:	414d      	adcs	r5, r1
    88a2:	2e00      	cmp	r6, #0
    88a4:	d006      	beq.n	88b4 <__udivmoddi4+0xe8>
    88a6:	42ab      	cmp	r3, r5
    88a8:	d9ee      	bls.n	8888 <__udivmoddi4+0xbc>
    88aa:	3e01      	subs	r6, #1
    88ac:	1924      	adds	r4, r4, r4
    88ae:	416d      	adcs	r5, r5
    88b0:	2e00      	cmp	r6, #0
    88b2:	d1f8      	bne.n	88a6 <__udivmoddi4+0xda>
    88b4:	465b      	mov	r3, fp
    88b6:	9800      	ldr	r0, [sp, #0]
    88b8:	9901      	ldr	r1, [sp, #4]
    88ba:	1900      	adds	r0, r0, r4
    88bc:	4169      	adcs	r1, r5
    88be:	2b00      	cmp	r3, #0
    88c0:	db22      	blt.n	8908 <__udivmoddi4+0x13c>
    88c2:	002b      	movs	r3, r5
    88c4:	465a      	mov	r2, fp
    88c6:	40d3      	lsrs	r3, r2
    88c8:	002a      	movs	r2, r5
    88ca:	4644      	mov	r4, r8
    88cc:	40e2      	lsrs	r2, r4
    88ce:	001c      	movs	r4, r3
    88d0:	465b      	mov	r3, fp
    88d2:	0015      	movs	r5, r2
    88d4:	2b00      	cmp	r3, #0
    88d6:	db2c      	blt.n	8932 <__udivmoddi4+0x166>
    88d8:	0026      	movs	r6, r4
    88da:	409e      	lsls	r6, r3
    88dc:	0033      	movs	r3, r6
    88de:	0026      	movs	r6, r4
    88e0:	4647      	mov	r7, r8
    88e2:	40be      	lsls	r6, r7
    88e4:	0032      	movs	r2, r6
    88e6:	1a80      	subs	r0, r0, r2
    88e8:	4199      	sbcs	r1, r3
    88ea:	9000      	str	r0, [sp, #0]
    88ec:	9101      	str	r1, [sp, #4]
    88ee:	e7ae      	b.n	884e <__udivmoddi4+0x82>
    88f0:	4642      	mov	r2, r8
    88f2:	2320      	movs	r3, #32
    88f4:	1a9b      	subs	r3, r3, r2
    88f6:	4652      	mov	r2, sl
    88f8:	40da      	lsrs	r2, r3
    88fa:	4641      	mov	r1, r8
    88fc:	0013      	movs	r3, r2
    88fe:	464a      	mov	r2, r9
    8900:	408a      	lsls	r2, r1
    8902:	0017      	movs	r7, r2
    8904:	431f      	orrs	r7, r3
    8906:	e782      	b.n	880e <__udivmoddi4+0x42>
    8908:	4642      	mov	r2, r8
    890a:	2320      	movs	r3, #32
    890c:	1a9b      	subs	r3, r3, r2
    890e:	002a      	movs	r2, r5
    8910:	4646      	mov	r6, r8
    8912:	409a      	lsls	r2, r3
    8914:	0023      	movs	r3, r4
    8916:	40f3      	lsrs	r3, r6
    8918:	4313      	orrs	r3, r2
    891a:	e7d5      	b.n	88c8 <__udivmoddi4+0xfc>
    891c:	4642      	mov	r2, r8
    891e:	2320      	movs	r3, #32
    8920:	2100      	movs	r1, #0
    8922:	1a9b      	subs	r3, r3, r2
    8924:	2200      	movs	r2, #0
    8926:	9100      	str	r1, [sp, #0]
    8928:	9201      	str	r2, [sp, #4]
    892a:	2201      	movs	r2, #1
    892c:	40da      	lsrs	r2, r3
    892e:	9201      	str	r2, [sp, #4]
    8930:	e782      	b.n	8838 <__udivmoddi4+0x6c>
    8932:	4642      	mov	r2, r8
    8934:	2320      	movs	r3, #32
    8936:	0026      	movs	r6, r4
    8938:	1a9b      	subs	r3, r3, r2
    893a:	40de      	lsrs	r6, r3
    893c:	002f      	movs	r7, r5
    893e:	46b4      	mov	ip, r6
    8940:	4097      	lsls	r7, r2
    8942:	4666      	mov	r6, ip
    8944:	003b      	movs	r3, r7
    8946:	4333      	orrs	r3, r6
    8948:	e7c9      	b.n	88de <__udivmoddi4+0x112>
    894a:	46c0      	nop			; (mov r8, r8)

0000894c <__aeabi_fadd>:
    894c:	b5f0      	push	{r4, r5, r6, r7, lr}
    894e:	46c6      	mov	lr, r8
    8950:	024e      	lsls	r6, r1, #9
    8952:	0247      	lsls	r7, r0, #9
    8954:	0a76      	lsrs	r6, r6, #9
    8956:	0a7b      	lsrs	r3, r7, #9
    8958:	0044      	lsls	r4, r0, #1
    895a:	0fc5      	lsrs	r5, r0, #31
    895c:	00f7      	lsls	r7, r6, #3
    895e:	0048      	lsls	r0, r1, #1
    8960:	4698      	mov	r8, r3
    8962:	b500      	push	{lr}
    8964:	0e24      	lsrs	r4, r4, #24
    8966:	002a      	movs	r2, r5
    8968:	00db      	lsls	r3, r3, #3
    896a:	0e00      	lsrs	r0, r0, #24
    896c:	0fc9      	lsrs	r1, r1, #31
    896e:	46bc      	mov	ip, r7
    8970:	428d      	cmp	r5, r1
    8972:	d067      	beq.n	8a44 <__aeabi_fadd+0xf8>
    8974:	1a22      	subs	r2, r4, r0
    8976:	2a00      	cmp	r2, #0
    8978:	dc00      	bgt.n	897c <__aeabi_fadd+0x30>
    897a:	e0a5      	b.n	8ac8 <__aeabi_fadd+0x17c>
    897c:	2800      	cmp	r0, #0
    897e:	d13a      	bne.n	89f6 <__aeabi_fadd+0xaa>
    8980:	2f00      	cmp	r7, #0
    8982:	d100      	bne.n	8986 <__aeabi_fadd+0x3a>
    8984:	e093      	b.n	8aae <__aeabi_fadd+0x162>
    8986:	1e51      	subs	r1, r2, #1
    8988:	2900      	cmp	r1, #0
    898a:	d000      	beq.n	898e <__aeabi_fadd+0x42>
    898c:	e0bc      	b.n	8b08 <__aeabi_fadd+0x1bc>
    898e:	2401      	movs	r4, #1
    8990:	1bdb      	subs	r3, r3, r7
    8992:	015a      	lsls	r2, r3, #5
    8994:	d546      	bpl.n	8a24 <__aeabi_fadd+0xd8>
    8996:	019b      	lsls	r3, r3, #6
    8998:	099e      	lsrs	r6, r3, #6
    899a:	0030      	movs	r0, r6
    899c:	f002 fcc4 	bl	b328 <__clzsi2>
    89a0:	3805      	subs	r0, #5
    89a2:	4086      	lsls	r6, r0
    89a4:	4284      	cmp	r4, r0
    89a6:	dd00      	ble.n	89aa <__aeabi_fadd+0x5e>
    89a8:	e09d      	b.n	8ae6 <__aeabi_fadd+0x19a>
    89aa:	1b04      	subs	r4, r0, r4
    89ac:	0032      	movs	r2, r6
    89ae:	2020      	movs	r0, #32
    89b0:	3401      	adds	r4, #1
    89b2:	40e2      	lsrs	r2, r4
    89b4:	1b04      	subs	r4, r0, r4
    89b6:	40a6      	lsls	r6, r4
    89b8:	0033      	movs	r3, r6
    89ba:	1e5e      	subs	r6, r3, #1
    89bc:	41b3      	sbcs	r3, r6
    89be:	2400      	movs	r4, #0
    89c0:	4313      	orrs	r3, r2
    89c2:	075a      	lsls	r2, r3, #29
    89c4:	d004      	beq.n	89d0 <__aeabi_fadd+0x84>
    89c6:	220f      	movs	r2, #15
    89c8:	401a      	ands	r2, r3
    89ca:	2a04      	cmp	r2, #4
    89cc:	d000      	beq.n	89d0 <__aeabi_fadd+0x84>
    89ce:	3304      	adds	r3, #4
    89d0:	015a      	lsls	r2, r3, #5
    89d2:	d529      	bpl.n	8a28 <__aeabi_fadd+0xdc>
    89d4:	3401      	adds	r4, #1
    89d6:	2cff      	cmp	r4, #255	; 0xff
    89d8:	d100      	bne.n	89dc <__aeabi_fadd+0x90>
    89da:	e081      	b.n	8ae0 <__aeabi_fadd+0x194>
    89dc:	002a      	movs	r2, r5
    89de:	019b      	lsls	r3, r3, #6
    89e0:	0a5b      	lsrs	r3, r3, #9
    89e2:	b2e4      	uxtb	r4, r4
    89e4:	025b      	lsls	r3, r3, #9
    89e6:	05e4      	lsls	r4, r4, #23
    89e8:	0a58      	lsrs	r0, r3, #9
    89ea:	07d2      	lsls	r2, r2, #31
    89ec:	4320      	orrs	r0, r4
    89ee:	4310      	orrs	r0, r2
    89f0:	bc04      	pop	{r2}
    89f2:	4690      	mov	r8, r2
    89f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89f6:	2cff      	cmp	r4, #255	; 0xff
    89f8:	d0e3      	beq.n	89c2 <__aeabi_fadd+0x76>
    89fa:	2180      	movs	r1, #128	; 0x80
    89fc:	0038      	movs	r0, r7
    89fe:	04c9      	lsls	r1, r1, #19
    8a00:	4308      	orrs	r0, r1
    8a02:	4684      	mov	ip, r0
    8a04:	2a1b      	cmp	r2, #27
    8a06:	dd00      	ble.n	8a0a <__aeabi_fadd+0xbe>
    8a08:	e082      	b.n	8b10 <__aeabi_fadd+0x1c4>
    8a0a:	2020      	movs	r0, #32
    8a0c:	4661      	mov	r1, ip
    8a0e:	40d1      	lsrs	r1, r2
    8a10:	1a82      	subs	r2, r0, r2
    8a12:	4660      	mov	r0, ip
    8a14:	4090      	lsls	r0, r2
    8a16:	0002      	movs	r2, r0
    8a18:	1e50      	subs	r0, r2, #1
    8a1a:	4182      	sbcs	r2, r0
    8a1c:	430a      	orrs	r2, r1
    8a1e:	1a9b      	subs	r3, r3, r2
    8a20:	015a      	lsls	r2, r3, #5
    8a22:	d4b8      	bmi.n	8996 <__aeabi_fadd+0x4a>
    8a24:	075a      	lsls	r2, r3, #29
    8a26:	d1ce      	bne.n	89c6 <__aeabi_fadd+0x7a>
    8a28:	08de      	lsrs	r6, r3, #3
    8a2a:	002a      	movs	r2, r5
    8a2c:	2cff      	cmp	r4, #255	; 0xff
    8a2e:	d13a      	bne.n	8aa6 <__aeabi_fadd+0x15a>
    8a30:	2e00      	cmp	r6, #0
    8a32:	d100      	bne.n	8a36 <__aeabi_fadd+0xea>
    8a34:	e0ae      	b.n	8b94 <__aeabi_fadd+0x248>
    8a36:	2380      	movs	r3, #128	; 0x80
    8a38:	03db      	lsls	r3, r3, #15
    8a3a:	4333      	orrs	r3, r6
    8a3c:	025b      	lsls	r3, r3, #9
    8a3e:	0a5b      	lsrs	r3, r3, #9
    8a40:	24ff      	movs	r4, #255	; 0xff
    8a42:	e7cf      	b.n	89e4 <__aeabi_fadd+0x98>
    8a44:	1a21      	subs	r1, r4, r0
    8a46:	2900      	cmp	r1, #0
    8a48:	dd52      	ble.n	8af0 <__aeabi_fadd+0x1a4>
    8a4a:	2800      	cmp	r0, #0
    8a4c:	d031      	beq.n	8ab2 <__aeabi_fadd+0x166>
    8a4e:	2cff      	cmp	r4, #255	; 0xff
    8a50:	d0b7      	beq.n	89c2 <__aeabi_fadd+0x76>
    8a52:	2080      	movs	r0, #128	; 0x80
    8a54:	003e      	movs	r6, r7
    8a56:	04c0      	lsls	r0, r0, #19
    8a58:	4306      	orrs	r6, r0
    8a5a:	46b4      	mov	ip, r6
    8a5c:	291b      	cmp	r1, #27
    8a5e:	dd00      	ble.n	8a62 <__aeabi_fadd+0x116>
    8a60:	e0aa      	b.n	8bb8 <__aeabi_fadd+0x26c>
    8a62:	2620      	movs	r6, #32
    8a64:	4660      	mov	r0, ip
    8a66:	40c8      	lsrs	r0, r1
    8a68:	1a71      	subs	r1, r6, r1
    8a6a:	4666      	mov	r6, ip
    8a6c:	408e      	lsls	r6, r1
    8a6e:	0031      	movs	r1, r6
    8a70:	1e4e      	subs	r6, r1, #1
    8a72:	41b1      	sbcs	r1, r6
    8a74:	4301      	orrs	r1, r0
    8a76:	185b      	adds	r3, r3, r1
    8a78:	0159      	lsls	r1, r3, #5
    8a7a:	d5d3      	bpl.n	8a24 <__aeabi_fadd+0xd8>
    8a7c:	3401      	adds	r4, #1
    8a7e:	2cff      	cmp	r4, #255	; 0xff
    8a80:	d100      	bne.n	8a84 <__aeabi_fadd+0x138>
    8a82:	e087      	b.n	8b94 <__aeabi_fadd+0x248>
    8a84:	2201      	movs	r2, #1
    8a86:	4978      	ldr	r1, [pc, #480]	; (8c68 <__aeabi_fadd+0x31c>)
    8a88:	401a      	ands	r2, r3
    8a8a:	085b      	lsrs	r3, r3, #1
    8a8c:	400b      	ands	r3, r1
    8a8e:	4313      	orrs	r3, r2
    8a90:	e797      	b.n	89c2 <__aeabi_fadd+0x76>
    8a92:	2c00      	cmp	r4, #0
    8a94:	d000      	beq.n	8a98 <__aeabi_fadd+0x14c>
    8a96:	e0a7      	b.n	8be8 <__aeabi_fadd+0x29c>
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d000      	beq.n	8a9e <__aeabi_fadd+0x152>
    8a9c:	e0b6      	b.n	8c0c <__aeabi_fadd+0x2c0>
    8a9e:	1e3b      	subs	r3, r7, #0
    8aa0:	d162      	bne.n	8b68 <__aeabi_fadd+0x21c>
    8aa2:	2600      	movs	r6, #0
    8aa4:	2200      	movs	r2, #0
    8aa6:	0273      	lsls	r3, r6, #9
    8aa8:	0a5b      	lsrs	r3, r3, #9
    8aaa:	b2e4      	uxtb	r4, r4
    8aac:	e79a      	b.n	89e4 <__aeabi_fadd+0x98>
    8aae:	0014      	movs	r4, r2
    8ab0:	e787      	b.n	89c2 <__aeabi_fadd+0x76>
    8ab2:	2f00      	cmp	r7, #0
    8ab4:	d04d      	beq.n	8b52 <__aeabi_fadd+0x206>
    8ab6:	1e48      	subs	r0, r1, #1
    8ab8:	2800      	cmp	r0, #0
    8aba:	d157      	bne.n	8b6c <__aeabi_fadd+0x220>
    8abc:	4463      	add	r3, ip
    8abe:	2401      	movs	r4, #1
    8ac0:	015a      	lsls	r2, r3, #5
    8ac2:	d5af      	bpl.n	8a24 <__aeabi_fadd+0xd8>
    8ac4:	2402      	movs	r4, #2
    8ac6:	e7dd      	b.n	8a84 <__aeabi_fadd+0x138>
    8ac8:	2a00      	cmp	r2, #0
    8aca:	d124      	bne.n	8b16 <__aeabi_fadd+0x1ca>
    8acc:	1c62      	adds	r2, r4, #1
    8ace:	b2d2      	uxtb	r2, r2
    8ad0:	2a01      	cmp	r2, #1
    8ad2:	ddde      	ble.n	8a92 <__aeabi_fadd+0x146>
    8ad4:	1bde      	subs	r6, r3, r7
    8ad6:	0172      	lsls	r2, r6, #5
    8ad8:	d535      	bpl.n	8b46 <__aeabi_fadd+0x1fa>
    8ada:	1afe      	subs	r6, r7, r3
    8adc:	000d      	movs	r5, r1
    8ade:	e75c      	b.n	899a <__aeabi_fadd+0x4e>
    8ae0:	002a      	movs	r2, r5
    8ae2:	2300      	movs	r3, #0
    8ae4:	e77e      	b.n	89e4 <__aeabi_fadd+0x98>
    8ae6:	0033      	movs	r3, r6
    8ae8:	4a60      	ldr	r2, [pc, #384]	; (8c6c <__aeabi_fadd+0x320>)
    8aea:	1a24      	subs	r4, r4, r0
    8aec:	4013      	ands	r3, r2
    8aee:	e768      	b.n	89c2 <__aeabi_fadd+0x76>
    8af0:	2900      	cmp	r1, #0
    8af2:	d163      	bne.n	8bbc <__aeabi_fadd+0x270>
    8af4:	1c61      	adds	r1, r4, #1
    8af6:	b2c8      	uxtb	r0, r1
    8af8:	2801      	cmp	r0, #1
    8afa:	dd4e      	ble.n	8b9a <__aeabi_fadd+0x24e>
    8afc:	29ff      	cmp	r1, #255	; 0xff
    8afe:	d049      	beq.n	8b94 <__aeabi_fadd+0x248>
    8b00:	4463      	add	r3, ip
    8b02:	085b      	lsrs	r3, r3, #1
    8b04:	000c      	movs	r4, r1
    8b06:	e75c      	b.n	89c2 <__aeabi_fadd+0x76>
    8b08:	2aff      	cmp	r2, #255	; 0xff
    8b0a:	d041      	beq.n	8b90 <__aeabi_fadd+0x244>
    8b0c:	000a      	movs	r2, r1
    8b0e:	e779      	b.n	8a04 <__aeabi_fadd+0xb8>
    8b10:	2201      	movs	r2, #1
    8b12:	1a9b      	subs	r3, r3, r2
    8b14:	e784      	b.n	8a20 <__aeabi_fadd+0xd4>
    8b16:	2c00      	cmp	r4, #0
    8b18:	d01d      	beq.n	8b56 <__aeabi_fadd+0x20a>
    8b1a:	28ff      	cmp	r0, #255	; 0xff
    8b1c:	d022      	beq.n	8b64 <__aeabi_fadd+0x218>
    8b1e:	2480      	movs	r4, #128	; 0x80
    8b20:	04e4      	lsls	r4, r4, #19
    8b22:	4252      	negs	r2, r2
    8b24:	4323      	orrs	r3, r4
    8b26:	2a1b      	cmp	r2, #27
    8b28:	dd00      	ble.n	8b2c <__aeabi_fadd+0x1e0>
    8b2a:	e08a      	b.n	8c42 <__aeabi_fadd+0x2f6>
    8b2c:	001c      	movs	r4, r3
    8b2e:	2520      	movs	r5, #32
    8b30:	40d4      	lsrs	r4, r2
    8b32:	1aaa      	subs	r2, r5, r2
    8b34:	4093      	lsls	r3, r2
    8b36:	1e5a      	subs	r2, r3, #1
    8b38:	4193      	sbcs	r3, r2
    8b3a:	4323      	orrs	r3, r4
    8b3c:	4662      	mov	r2, ip
    8b3e:	0004      	movs	r4, r0
    8b40:	1ad3      	subs	r3, r2, r3
    8b42:	000d      	movs	r5, r1
    8b44:	e725      	b.n	8992 <__aeabi_fadd+0x46>
    8b46:	2e00      	cmp	r6, #0
    8b48:	d000      	beq.n	8b4c <__aeabi_fadd+0x200>
    8b4a:	e726      	b.n	899a <__aeabi_fadd+0x4e>
    8b4c:	2200      	movs	r2, #0
    8b4e:	2400      	movs	r4, #0
    8b50:	e7a9      	b.n	8aa6 <__aeabi_fadd+0x15a>
    8b52:	000c      	movs	r4, r1
    8b54:	e735      	b.n	89c2 <__aeabi_fadd+0x76>
    8b56:	2b00      	cmp	r3, #0
    8b58:	d04d      	beq.n	8bf6 <__aeabi_fadd+0x2aa>
    8b5a:	43d2      	mvns	r2, r2
    8b5c:	2a00      	cmp	r2, #0
    8b5e:	d0ed      	beq.n	8b3c <__aeabi_fadd+0x1f0>
    8b60:	28ff      	cmp	r0, #255	; 0xff
    8b62:	d1e0      	bne.n	8b26 <__aeabi_fadd+0x1da>
    8b64:	4663      	mov	r3, ip
    8b66:	24ff      	movs	r4, #255	; 0xff
    8b68:	000d      	movs	r5, r1
    8b6a:	e72a      	b.n	89c2 <__aeabi_fadd+0x76>
    8b6c:	29ff      	cmp	r1, #255	; 0xff
    8b6e:	d00f      	beq.n	8b90 <__aeabi_fadd+0x244>
    8b70:	0001      	movs	r1, r0
    8b72:	e773      	b.n	8a5c <__aeabi_fadd+0x110>
    8b74:	2b00      	cmp	r3, #0
    8b76:	d061      	beq.n	8c3c <__aeabi_fadd+0x2f0>
    8b78:	24ff      	movs	r4, #255	; 0xff
    8b7a:	2f00      	cmp	r7, #0
    8b7c:	d100      	bne.n	8b80 <__aeabi_fadd+0x234>
    8b7e:	e720      	b.n	89c2 <__aeabi_fadd+0x76>
    8b80:	2280      	movs	r2, #128	; 0x80
    8b82:	4641      	mov	r1, r8
    8b84:	03d2      	lsls	r2, r2, #15
    8b86:	4211      	tst	r1, r2
    8b88:	d002      	beq.n	8b90 <__aeabi_fadd+0x244>
    8b8a:	4216      	tst	r6, r2
    8b8c:	d100      	bne.n	8b90 <__aeabi_fadd+0x244>
    8b8e:	003b      	movs	r3, r7
    8b90:	24ff      	movs	r4, #255	; 0xff
    8b92:	e716      	b.n	89c2 <__aeabi_fadd+0x76>
    8b94:	24ff      	movs	r4, #255	; 0xff
    8b96:	2300      	movs	r3, #0
    8b98:	e724      	b.n	89e4 <__aeabi_fadd+0x98>
    8b9a:	2c00      	cmp	r4, #0
    8b9c:	d1ea      	bne.n	8b74 <__aeabi_fadd+0x228>
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d058      	beq.n	8c54 <__aeabi_fadd+0x308>
    8ba2:	2f00      	cmp	r7, #0
    8ba4:	d100      	bne.n	8ba8 <__aeabi_fadd+0x25c>
    8ba6:	e70c      	b.n	89c2 <__aeabi_fadd+0x76>
    8ba8:	4463      	add	r3, ip
    8baa:	015a      	lsls	r2, r3, #5
    8bac:	d400      	bmi.n	8bb0 <__aeabi_fadd+0x264>
    8bae:	e739      	b.n	8a24 <__aeabi_fadd+0xd8>
    8bb0:	4a2e      	ldr	r2, [pc, #184]	; (8c6c <__aeabi_fadd+0x320>)
    8bb2:	000c      	movs	r4, r1
    8bb4:	4013      	ands	r3, r2
    8bb6:	e704      	b.n	89c2 <__aeabi_fadd+0x76>
    8bb8:	2101      	movs	r1, #1
    8bba:	e75c      	b.n	8a76 <__aeabi_fadd+0x12a>
    8bbc:	2c00      	cmp	r4, #0
    8bbe:	d11e      	bne.n	8bfe <__aeabi_fadd+0x2b2>
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	d040      	beq.n	8c46 <__aeabi_fadd+0x2fa>
    8bc4:	43c9      	mvns	r1, r1
    8bc6:	2900      	cmp	r1, #0
    8bc8:	d00b      	beq.n	8be2 <__aeabi_fadd+0x296>
    8bca:	28ff      	cmp	r0, #255	; 0xff
    8bcc:	d036      	beq.n	8c3c <__aeabi_fadd+0x2f0>
    8bce:	291b      	cmp	r1, #27
    8bd0:	dc47      	bgt.n	8c62 <__aeabi_fadd+0x316>
    8bd2:	001c      	movs	r4, r3
    8bd4:	2620      	movs	r6, #32
    8bd6:	40cc      	lsrs	r4, r1
    8bd8:	1a71      	subs	r1, r6, r1
    8bda:	408b      	lsls	r3, r1
    8bdc:	1e59      	subs	r1, r3, #1
    8bde:	418b      	sbcs	r3, r1
    8be0:	4323      	orrs	r3, r4
    8be2:	4463      	add	r3, ip
    8be4:	0004      	movs	r4, r0
    8be6:	e747      	b.n	8a78 <__aeabi_fadd+0x12c>
    8be8:	2b00      	cmp	r3, #0
    8bea:	d118      	bne.n	8c1e <__aeabi_fadd+0x2d2>
    8bec:	1e3b      	subs	r3, r7, #0
    8bee:	d02d      	beq.n	8c4c <__aeabi_fadd+0x300>
    8bf0:	000d      	movs	r5, r1
    8bf2:	24ff      	movs	r4, #255	; 0xff
    8bf4:	e6e5      	b.n	89c2 <__aeabi_fadd+0x76>
    8bf6:	003b      	movs	r3, r7
    8bf8:	0004      	movs	r4, r0
    8bfa:	000d      	movs	r5, r1
    8bfc:	e6e1      	b.n	89c2 <__aeabi_fadd+0x76>
    8bfe:	28ff      	cmp	r0, #255	; 0xff
    8c00:	d01c      	beq.n	8c3c <__aeabi_fadd+0x2f0>
    8c02:	2480      	movs	r4, #128	; 0x80
    8c04:	04e4      	lsls	r4, r4, #19
    8c06:	4249      	negs	r1, r1
    8c08:	4323      	orrs	r3, r4
    8c0a:	e7e0      	b.n	8bce <__aeabi_fadd+0x282>
    8c0c:	2f00      	cmp	r7, #0
    8c0e:	d100      	bne.n	8c12 <__aeabi_fadd+0x2c6>
    8c10:	e6d7      	b.n	89c2 <__aeabi_fadd+0x76>
    8c12:	1bde      	subs	r6, r3, r7
    8c14:	0172      	lsls	r2, r6, #5
    8c16:	d51f      	bpl.n	8c58 <__aeabi_fadd+0x30c>
    8c18:	1afb      	subs	r3, r7, r3
    8c1a:	000d      	movs	r5, r1
    8c1c:	e6d1      	b.n	89c2 <__aeabi_fadd+0x76>
    8c1e:	24ff      	movs	r4, #255	; 0xff
    8c20:	2f00      	cmp	r7, #0
    8c22:	d100      	bne.n	8c26 <__aeabi_fadd+0x2da>
    8c24:	e6cd      	b.n	89c2 <__aeabi_fadd+0x76>
    8c26:	2280      	movs	r2, #128	; 0x80
    8c28:	4640      	mov	r0, r8
    8c2a:	03d2      	lsls	r2, r2, #15
    8c2c:	4210      	tst	r0, r2
    8c2e:	d0af      	beq.n	8b90 <__aeabi_fadd+0x244>
    8c30:	4216      	tst	r6, r2
    8c32:	d1ad      	bne.n	8b90 <__aeabi_fadd+0x244>
    8c34:	003b      	movs	r3, r7
    8c36:	000d      	movs	r5, r1
    8c38:	24ff      	movs	r4, #255	; 0xff
    8c3a:	e6c2      	b.n	89c2 <__aeabi_fadd+0x76>
    8c3c:	4663      	mov	r3, ip
    8c3e:	24ff      	movs	r4, #255	; 0xff
    8c40:	e6bf      	b.n	89c2 <__aeabi_fadd+0x76>
    8c42:	2301      	movs	r3, #1
    8c44:	e77a      	b.n	8b3c <__aeabi_fadd+0x1f0>
    8c46:	003b      	movs	r3, r7
    8c48:	0004      	movs	r4, r0
    8c4a:	e6ba      	b.n	89c2 <__aeabi_fadd+0x76>
    8c4c:	2680      	movs	r6, #128	; 0x80
    8c4e:	2200      	movs	r2, #0
    8c50:	03f6      	lsls	r6, r6, #15
    8c52:	e6f0      	b.n	8a36 <__aeabi_fadd+0xea>
    8c54:	003b      	movs	r3, r7
    8c56:	e6b4      	b.n	89c2 <__aeabi_fadd+0x76>
    8c58:	1e33      	subs	r3, r6, #0
    8c5a:	d000      	beq.n	8c5e <__aeabi_fadd+0x312>
    8c5c:	e6e2      	b.n	8a24 <__aeabi_fadd+0xd8>
    8c5e:	2200      	movs	r2, #0
    8c60:	e721      	b.n	8aa6 <__aeabi_fadd+0x15a>
    8c62:	2301      	movs	r3, #1
    8c64:	e7bd      	b.n	8be2 <__aeabi_fadd+0x296>
    8c66:	46c0      	nop			; (mov r8, r8)
    8c68:	7dffffff 	.word	0x7dffffff
    8c6c:	fbffffff 	.word	0xfbffffff

00008c70 <__aeabi_fdiv>:
    8c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c72:	4657      	mov	r7, sl
    8c74:	464e      	mov	r6, r9
    8c76:	46de      	mov	lr, fp
    8c78:	4645      	mov	r5, r8
    8c7a:	b5e0      	push	{r5, r6, r7, lr}
    8c7c:	0244      	lsls	r4, r0, #9
    8c7e:	0043      	lsls	r3, r0, #1
    8c80:	0fc6      	lsrs	r6, r0, #31
    8c82:	b083      	sub	sp, #12
    8c84:	1c0f      	adds	r7, r1, #0
    8c86:	0a64      	lsrs	r4, r4, #9
    8c88:	0e1b      	lsrs	r3, r3, #24
    8c8a:	46b2      	mov	sl, r6
    8c8c:	d053      	beq.n	8d36 <__aeabi_fdiv+0xc6>
    8c8e:	2bff      	cmp	r3, #255	; 0xff
    8c90:	d027      	beq.n	8ce2 <__aeabi_fdiv+0x72>
    8c92:	2280      	movs	r2, #128	; 0x80
    8c94:	00e4      	lsls	r4, r4, #3
    8c96:	04d2      	lsls	r2, r2, #19
    8c98:	4314      	orrs	r4, r2
    8c9a:	227f      	movs	r2, #127	; 0x7f
    8c9c:	4252      	negs	r2, r2
    8c9e:	4690      	mov	r8, r2
    8ca0:	4498      	add	r8, r3
    8ca2:	2300      	movs	r3, #0
    8ca4:	4699      	mov	r9, r3
    8ca6:	469b      	mov	fp, r3
    8ca8:	027d      	lsls	r5, r7, #9
    8caa:	0078      	lsls	r0, r7, #1
    8cac:	0ffb      	lsrs	r3, r7, #31
    8cae:	0a6d      	lsrs	r5, r5, #9
    8cb0:	0e00      	lsrs	r0, r0, #24
    8cb2:	9300      	str	r3, [sp, #0]
    8cb4:	d024      	beq.n	8d00 <__aeabi_fdiv+0x90>
    8cb6:	28ff      	cmp	r0, #255	; 0xff
    8cb8:	d046      	beq.n	8d48 <__aeabi_fdiv+0xd8>
    8cba:	2380      	movs	r3, #128	; 0x80
    8cbc:	2100      	movs	r1, #0
    8cbe:	00ed      	lsls	r5, r5, #3
    8cc0:	04db      	lsls	r3, r3, #19
    8cc2:	431d      	orrs	r5, r3
    8cc4:	387f      	subs	r0, #127	; 0x7f
    8cc6:	4647      	mov	r7, r8
    8cc8:	1a38      	subs	r0, r7, r0
    8cca:	464f      	mov	r7, r9
    8ccc:	430f      	orrs	r7, r1
    8cce:	00bf      	lsls	r7, r7, #2
    8cd0:	46b9      	mov	r9, r7
    8cd2:	0033      	movs	r3, r6
    8cd4:	9a00      	ldr	r2, [sp, #0]
    8cd6:	4f87      	ldr	r7, [pc, #540]	; (8ef4 <__aeabi_fdiv+0x284>)
    8cd8:	4053      	eors	r3, r2
    8cda:	464a      	mov	r2, r9
    8cdc:	58ba      	ldr	r2, [r7, r2]
    8cde:	9301      	str	r3, [sp, #4]
    8ce0:	4697      	mov	pc, r2
    8ce2:	2c00      	cmp	r4, #0
    8ce4:	d14e      	bne.n	8d84 <__aeabi_fdiv+0x114>
    8ce6:	2308      	movs	r3, #8
    8ce8:	4699      	mov	r9, r3
    8cea:	33f7      	adds	r3, #247	; 0xf7
    8cec:	4698      	mov	r8, r3
    8cee:	3bfd      	subs	r3, #253	; 0xfd
    8cf0:	469b      	mov	fp, r3
    8cf2:	027d      	lsls	r5, r7, #9
    8cf4:	0078      	lsls	r0, r7, #1
    8cf6:	0ffb      	lsrs	r3, r7, #31
    8cf8:	0a6d      	lsrs	r5, r5, #9
    8cfa:	0e00      	lsrs	r0, r0, #24
    8cfc:	9300      	str	r3, [sp, #0]
    8cfe:	d1da      	bne.n	8cb6 <__aeabi_fdiv+0x46>
    8d00:	2d00      	cmp	r5, #0
    8d02:	d126      	bne.n	8d52 <__aeabi_fdiv+0xe2>
    8d04:	2000      	movs	r0, #0
    8d06:	2101      	movs	r1, #1
    8d08:	0033      	movs	r3, r6
    8d0a:	9a00      	ldr	r2, [sp, #0]
    8d0c:	4f7a      	ldr	r7, [pc, #488]	; (8ef8 <__aeabi_fdiv+0x288>)
    8d0e:	4053      	eors	r3, r2
    8d10:	4642      	mov	r2, r8
    8d12:	1a10      	subs	r0, r2, r0
    8d14:	464a      	mov	r2, r9
    8d16:	430a      	orrs	r2, r1
    8d18:	0092      	lsls	r2, r2, #2
    8d1a:	58ba      	ldr	r2, [r7, r2]
    8d1c:	001d      	movs	r5, r3
    8d1e:	4697      	mov	pc, r2
    8d20:	9b00      	ldr	r3, [sp, #0]
    8d22:	002c      	movs	r4, r5
    8d24:	469a      	mov	sl, r3
    8d26:	468b      	mov	fp, r1
    8d28:	465b      	mov	r3, fp
    8d2a:	2b02      	cmp	r3, #2
    8d2c:	d131      	bne.n	8d92 <__aeabi_fdiv+0x122>
    8d2e:	4653      	mov	r3, sl
    8d30:	21ff      	movs	r1, #255	; 0xff
    8d32:	2400      	movs	r4, #0
    8d34:	e038      	b.n	8da8 <__aeabi_fdiv+0x138>
    8d36:	2c00      	cmp	r4, #0
    8d38:	d117      	bne.n	8d6a <__aeabi_fdiv+0xfa>
    8d3a:	2304      	movs	r3, #4
    8d3c:	4699      	mov	r9, r3
    8d3e:	2300      	movs	r3, #0
    8d40:	4698      	mov	r8, r3
    8d42:	3301      	adds	r3, #1
    8d44:	469b      	mov	fp, r3
    8d46:	e7af      	b.n	8ca8 <__aeabi_fdiv+0x38>
    8d48:	20ff      	movs	r0, #255	; 0xff
    8d4a:	2d00      	cmp	r5, #0
    8d4c:	d10b      	bne.n	8d66 <__aeabi_fdiv+0xf6>
    8d4e:	2102      	movs	r1, #2
    8d50:	e7da      	b.n	8d08 <__aeabi_fdiv+0x98>
    8d52:	0028      	movs	r0, r5
    8d54:	f002 fae8 	bl	b328 <__clzsi2>
    8d58:	1f43      	subs	r3, r0, #5
    8d5a:	409d      	lsls	r5, r3
    8d5c:	2376      	movs	r3, #118	; 0x76
    8d5e:	425b      	negs	r3, r3
    8d60:	1a18      	subs	r0, r3, r0
    8d62:	2100      	movs	r1, #0
    8d64:	e7af      	b.n	8cc6 <__aeabi_fdiv+0x56>
    8d66:	2103      	movs	r1, #3
    8d68:	e7ad      	b.n	8cc6 <__aeabi_fdiv+0x56>
    8d6a:	0020      	movs	r0, r4
    8d6c:	f002 fadc 	bl	b328 <__clzsi2>
    8d70:	1f43      	subs	r3, r0, #5
    8d72:	409c      	lsls	r4, r3
    8d74:	2376      	movs	r3, #118	; 0x76
    8d76:	425b      	negs	r3, r3
    8d78:	1a1b      	subs	r3, r3, r0
    8d7a:	4698      	mov	r8, r3
    8d7c:	2300      	movs	r3, #0
    8d7e:	4699      	mov	r9, r3
    8d80:	469b      	mov	fp, r3
    8d82:	e791      	b.n	8ca8 <__aeabi_fdiv+0x38>
    8d84:	230c      	movs	r3, #12
    8d86:	4699      	mov	r9, r3
    8d88:	33f3      	adds	r3, #243	; 0xf3
    8d8a:	4698      	mov	r8, r3
    8d8c:	3bfc      	subs	r3, #252	; 0xfc
    8d8e:	469b      	mov	fp, r3
    8d90:	e78a      	b.n	8ca8 <__aeabi_fdiv+0x38>
    8d92:	2b03      	cmp	r3, #3
    8d94:	d100      	bne.n	8d98 <__aeabi_fdiv+0x128>
    8d96:	e0a5      	b.n	8ee4 <__aeabi_fdiv+0x274>
    8d98:	4655      	mov	r5, sl
    8d9a:	2b01      	cmp	r3, #1
    8d9c:	d000      	beq.n	8da0 <__aeabi_fdiv+0x130>
    8d9e:	e081      	b.n	8ea4 <__aeabi_fdiv+0x234>
    8da0:	2301      	movs	r3, #1
    8da2:	2100      	movs	r1, #0
    8da4:	2400      	movs	r4, #0
    8da6:	402b      	ands	r3, r5
    8da8:	0264      	lsls	r4, r4, #9
    8daa:	05c9      	lsls	r1, r1, #23
    8dac:	0a60      	lsrs	r0, r4, #9
    8dae:	07db      	lsls	r3, r3, #31
    8db0:	4308      	orrs	r0, r1
    8db2:	4318      	orrs	r0, r3
    8db4:	b003      	add	sp, #12
    8db6:	bc3c      	pop	{r2, r3, r4, r5}
    8db8:	4690      	mov	r8, r2
    8dba:	4699      	mov	r9, r3
    8dbc:	46a2      	mov	sl, r4
    8dbe:	46ab      	mov	fp, r5
    8dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dc2:	2480      	movs	r4, #128	; 0x80
    8dc4:	2300      	movs	r3, #0
    8dc6:	03e4      	lsls	r4, r4, #15
    8dc8:	21ff      	movs	r1, #255	; 0xff
    8dca:	e7ed      	b.n	8da8 <__aeabi_fdiv+0x138>
    8dcc:	21ff      	movs	r1, #255	; 0xff
    8dce:	2400      	movs	r4, #0
    8dd0:	e7ea      	b.n	8da8 <__aeabi_fdiv+0x138>
    8dd2:	2301      	movs	r3, #1
    8dd4:	1a59      	subs	r1, r3, r1
    8dd6:	291b      	cmp	r1, #27
    8dd8:	dd66      	ble.n	8ea8 <__aeabi_fdiv+0x238>
    8dda:	9a01      	ldr	r2, [sp, #4]
    8ddc:	4013      	ands	r3, r2
    8dde:	2100      	movs	r1, #0
    8de0:	2400      	movs	r4, #0
    8de2:	e7e1      	b.n	8da8 <__aeabi_fdiv+0x138>
    8de4:	2380      	movs	r3, #128	; 0x80
    8de6:	03db      	lsls	r3, r3, #15
    8de8:	421c      	tst	r4, r3
    8dea:	d038      	beq.n	8e5e <__aeabi_fdiv+0x1ee>
    8dec:	421d      	tst	r5, r3
    8dee:	d051      	beq.n	8e94 <__aeabi_fdiv+0x224>
    8df0:	431c      	orrs	r4, r3
    8df2:	0264      	lsls	r4, r4, #9
    8df4:	0a64      	lsrs	r4, r4, #9
    8df6:	0033      	movs	r3, r6
    8df8:	21ff      	movs	r1, #255	; 0xff
    8dfa:	e7d5      	b.n	8da8 <__aeabi_fdiv+0x138>
    8dfc:	0163      	lsls	r3, r4, #5
    8dfe:	016c      	lsls	r4, r5, #5
    8e00:	42a3      	cmp	r3, r4
    8e02:	d23b      	bcs.n	8e7c <__aeabi_fdiv+0x20c>
    8e04:	261b      	movs	r6, #27
    8e06:	2100      	movs	r1, #0
    8e08:	3801      	subs	r0, #1
    8e0a:	2501      	movs	r5, #1
    8e0c:	001f      	movs	r7, r3
    8e0e:	0049      	lsls	r1, r1, #1
    8e10:	005b      	lsls	r3, r3, #1
    8e12:	2f00      	cmp	r7, #0
    8e14:	db01      	blt.n	8e1a <__aeabi_fdiv+0x1aa>
    8e16:	429c      	cmp	r4, r3
    8e18:	d801      	bhi.n	8e1e <__aeabi_fdiv+0x1ae>
    8e1a:	1b1b      	subs	r3, r3, r4
    8e1c:	4329      	orrs	r1, r5
    8e1e:	3e01      	subs	r6, #1
    8e20:	2e00      	cmp	r6, #0
    8e22:	d1f3      	bne.n	8e0c <__aeabi_fdiv+0x19c>
    8e24:	001c      	movs	r4, r3
    8e26:	1e63      	subs	r3, r4, #1
    8e28:	419c      	sbcs	r4, r3
    8e2a:	430c      	orrs	r4, r1
    8e2c:	0001      	movs	r1, r0
    8e2e:	317f      	adds	r1, #127	; 0x7f
    8e30:	2900      	cmp	r1, #0
    8e32:	ddce      	ble.n	8dd2 <__aeabi_fdiv+0x162>
    8e34:	0763      	lsls	r3, r4, #29
    8e36:	d004      	beq.n	8e42 <__aeabi_fdiv+0x1d2>
    8e38:	230f      	movs	r3, #15
    8e3a:	4023      	ands	r3, r4
    8e3c:	2b04      	cmp	r3, #4
    8e3e:	d000      	beq.n	8e42 <__aeabi_fdiv+0x1d2>
    8e40:	3404      	adds	r4, #4
    8e42:	0123      	lsls	r3, r4, #4
    8e44:	d503      	bpl.n	8e4e <__aeabi_fdiv+0x1de>
    8e46:	0001      	movs	r1, r0
    8e48:	4b2c      	ldr	r3, [pc, #176]	; (8efc <__aeabi_fdiv+0x28c>)
    8e4a:	3180      	adds	r1, #128	; 0x80
    8e4c:	401c      	ands	r4, r3
    8e4e:	29fe      	cmp	r1, #254	; 0xfe
    8e50:	dd0d      	ble.n	8e6e <__aeabi_fdiv+0x1fe>
    8e52:	2301      	movs	r3, #1
    8e54:	9a01      	ldr	r2, [sp, #4]
    8e56:	21ff      	movs	r1, #255	; 0xff
    8e58:	4013      	ands	r3, r2
    8e5a:	2400      	movs	r4, #0
    8e5c:	e7a4      	b.n	8da8 <__aeabi_fdiv+0x138>
    8e5e:	2380      	movs	r3, #128	; 0x80
    8e60:	03db      	lsls	r3, r3, #15
    8e62:	431c      	orrs	r4, r3
    8e64:	0264      	lsls	r4, r4, #9
    8e66:	0a64      	lsrs	r4, r4, #9
    8e68:	0033      	movs	r3, r6
    8e6a:	21ff      	movs	r1, #255	; 0xff
    8e6c:	e79c      	b.n	8da8 <__aeabi_fdiv+0x138>
    8e6e:	2301      	movs	r3, #1
    8e70:	9a01      	ldr	r2, [sp, #4]
    8e72:	01a4      	lsls	r4, r4, #6
    8e74:	0a64      	lsrs	r4, r4, #9
    8e76:	b2c9      	uxtb	r1, r1
    8e78:	4013      	ands	r3, r2
    8e7a:	e795      	b.n	8da8 <__aeabi_fdiv+0x138>
    8e7c:	1b1b      	subs	r3, r3, r4
    8e7e:	261a      	movs	r6, #26
    8e80:	2101      	movs	r1, #1
    8e82:	e7c2      	b.n	8e0a <__aeabi_fdiv+0x19a>
    8e84:	9b00      	ldr	r3, [sp, #0]
    8e86:	468b      	mov	fp, r1
    8e88:	469a      	mov	sl, r3
    8e8a:	2400      	movs	r4, #0
    8e8c:	e74c      	b.n	8d28 <__aeabi_fdiv+0xb8>
    8e8e:	0263      	lsls	r3, r4, #9
    8e90:	d5e5      	bpl.n	8e5e <__aeabi_fdiv+0x1ee>
    8e92:	2500      	movs	r5, #0
    8e94:	2480      	movs	r4, #128	; 0x80
    8e96:	03e4      	lsls	r4, r4, #15
    8e98:	432c      	orrs	r4, r5
    8e9a:	0264      	lsls	r4, r4, #9
    8e9c:	0a64      	lsrs	r4, r4, #9
    8e9e:	9b00      	ldr	r3, [sp, #0]
    8ea0:	21ff      	movs	r1, #255	; 0xff
    8ea2:	e781      	b.n	8da8 <__aeabi_fdiv+0x138>
    8ea4:	9501      	str	r5, [sp, #4]
    8ea6:	e7c1      	b.n	8e2c <__aeabi_fdiv+0x1bc>
    8ea8:	0023      	movs	r3, r4
    8eaa:	2020      	movs	r0, #32
    8eac:	40cb      	lsrs	r3, r1
    8eae:	1a41      	subs	r1, r0, r1
    8eb0:	408c      	lsls	r4, r1
    8eb2:	1e61      	subs	r1, r4, #1
    8eb4:	418c      	sbcs	r4, r1
    8eb6:	431c      	orrs	r4, r3
    8eb8:	0763      	lsls	r3, r4, #29
    8eba:	d004      	beq.n	8ec6 <__aeabi_fdiv+0x256>
    8ebc:	230f      	movs	r3, #15
    8ebe:	4023      	ands	r3, r4
    8ec0:	2b04      	cmp	r3, #4
    8ec2:	d000      	beq.n	8ec6 <__aeabi_fdiv+0x256>
    8ec4:	3404      	adds	r4, #4
    8ec6:	0163      	lsls	r3, r4, #5
    8ec8:	d505      	bpl.n	8ed6 <__aeabi_fdiv+0x266>
    8eca:	2301      	movs	r3, #1
    8ecc:	9a01      	ldr	r2, [sp, #4]
    8ece:	2101      	movs	r1, #1
    8ed0:	4013      	ands	r3, r2
    8ed2:	2400      	movs	r4, #0
    8ed4:	e768      	b.n	8da8 <__aeabi_fdiv+0x138>
    8ed6:	2301      	movs	r3, #1
    8ed8:	9a01      	ldr	r2, [sp, #4]
    8eda:	01a4      	lsls	r4, r4, #6
    8edc:	0a64      	lsrs	r4, r4, #9
    8ede:	4013      	ands	r3, r2
    8ee0:	2100      	movs	r1, #0
    8ee2:	e761      	b.n	8da8 <__aeabi_fdiv+0x138>
    8ee4:	2380      	movs	r3, #128	; 0x80
    8ee6:	03db      	lsls	r3, r3, #15
    8ee8:	431c      	orrs	r4, r3
    8eea:	0264      	lsls	r4, r4, #9
    8eec:	0a64      	lsrs	r4, r4, #9
    8eee:	4653      	mov	r3, sl
    8ef0:	21ff      	movs	r1, #255	; 0xff
    8ef2:	e759      	b.n	8da8 <__aeabi_fdiv+0x138>
    8ef4:	000105b8 	.word	0x000105b8
    8ef8:	000105f8 	.word	0x000105f8
    8efc:	f7ffffff 	.word	0xf7ffffff

00008f00 <__eqsf2>:
    8f00:	b570      	push	{r4, r5, r6, lr}
    8f02:	0042      	lsls	r2, r0, #1
    8f04:	0245      	lsls	r5, r0, #9
    8f06:	024e      	lsls	r6, r1, #9
    8f08:	004c      	lsls	r4, r1, #1
    8f0a:	0fc3      	lsrs	r3, r0, #31
    8f0c:	0a6d      	lsrs	r5, r5, #9
    8f0e:	0e12      	lsrs	r2, r2, #24
    8f10:	0a76      	lsrs	r6, r6, #9
    8f12:	0e24      	lsrs	r4, r4, #24
    8f14:	0fc9      	lsrs	r1, r1, #31
    8f16:	2001      	movs	r0, #1
    8f18:	2aff      	cmp	r2, #255	; 0xff
    8f1a:	d006      	beq.n	8f2a <__eqsf2+0x2a>
    8f1c:	2cff      	cmp	r4, #255	; 0xff
    8f1e:	d003      	beq.n	8f28 <__eqsf2+0x28>
    8f20:	42a2      	cmp	r2, r4
    8f22:	d101      	bne.n	8f28 <__eqsf2+0x28>
    8f24:	42b5      	cmp	r5, r6
    8f26:	d006      	beq.n	8f36 <__eqsf2+0x36>
    8f28:	bd70      	pop	{r4, r5, r6, pc}
    8f2a:	2d00      	cmp	r5, #0
    8f2c:	d1fc      	bne.n	8f28 <__eqsf2+0x28>
    8f2e:	2cff      	cmp	r4, #255	; 0xff
    8f30:	d1fa      	bne.n	8f28 <__eqsf2+0x28>
    8f32:	2e00      	cmp	r6, #0
    8f34:	d1f8      	bne.n	8f28 <__eqsf2+0x28>
    8f36:	428b      	cmp	r3, r1
    8f38:	d006      	beq.n	8f48 <__eqsf2+0x48>
    8f3a:	2001      	movs	r0, #1
    8f3c:	2a00      	cmp	r2, #0
    8f3e:	d1f3      	bne.n	8f28 <__eqsf2+0x28>
    8f40:	0028      	movs	r0, r5
    8f42:	1e45      	subs	r5, r0, #1
    8f44:	41a8      	sbcs	r0, r5
    8f46:	e7ef      	b.n	8f28 <__eqsf2+0x28>
    8f48:	2000      	movs	r0, #0
    8f4a:	e7ed      	b.n	8f28 <__eqsf2+0x28>

00008f4c <__gesf2>:
    8f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f4e:	0042      	lsls	r2, r0, #1
    8f50:	0245      	lsls	r5, r0, #9
    8f52:	024c      	lsls	r4, r1, #9
    8f54:	0fc3      	lsrs	r3, r0, #31
    8f56:	0048      	lsls	r0, r1, #1
    8f58:	0a6d      	lsrs	r5, r5, #9
    8f5a:	0e12      	lsrs	r2, r2, #24
    8f5c:	0a64      	lsrs	r4, r4, #9
    8f5e:	0e00      	lsrs	r0, r0, #24
    8f60:	0fc9      	lsrs	r1, r1, #31
    8f62:	2aff      	cmp	r2, #255	; 0xff
    8f64:	d01e      	beq.n	8fa4 <__gesf2+0x58>
    8f66:	28ff      	cmp	r0, #255	; 0xff
    8f68:	d021      	beq.n	8fae <__gesf2+0x62>
    8f6a:	2a00      	cmp	r2, #0
    8f6c:	d10a      	bne.n	8f84 <__gesf2+0x38>
    8f6e:	426e      	negs	r6, r5
    8f70:	416e      	adcs	r6, r5
    8f72:	b2f6      	uxtb	r6, r6
    8f74:	2800      	cmp	r0, #0
    8f76:	d10f      	bne.n	8f98 <__gesf2+0x4c>
    8f78:	2c00      	cmp	r4, #0
    8f7a:	d10d      	bne.n	8f98 <__gesf2+0x4c>
    8f7c:	2000      	movs	r0, #0
    8f7e:	2d00      	cmp	r5, #0
    8f80:	d009      	beq.n	8f96 <__gesf2+0x4a>
    8f82:	e005      	b.n	8f90 <__gesf2+0x44>
    8f84:	2800      	cmp	r0, #0
    8f86:	d101      	bne.n	8f8c <__gesf2+0x40>
    8f88:	2c00      	cmp	r4, #0
    8f8a:	d001      	beq.n	8f90 <__gesf2+0x44>
    8f8c:	428b      	cmp	r3, r1
    8f8e:	d011      	beq.n	8fb4 <__gesf2+0x68>
    8f90:	2101      	movs	r1, #1
    8f92:	4258      	negs	r0, r3
    8f94:	4308      	orrs	r0, r1
    8f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f98:	2e00      	cmp	r6, #0
    8f9a:	d0f7      	beq.n	8f8c <__gesf2+0x40>
    8f9c:	2001      	movs	r0, #1
    8f9e:	3901      	subs	r1, #1
    8fa0:	4308      	orrs	r0, r1
    8fa2:	e7f8      	b.n	8f96 <__gesf2+0x4a>
    8fa4:	2d00      	cmp	r5, #0
    8fa6:	d0de      	beq.n	8f66 <__gesf2+0x1a>
    8fa8:	2002      	movs	r0, #2
    8faa:	4240      	negs	r0, r0
    8fac:	e7f3      	b.n	8f96 <__gesf2+0x4a>
    8fae:	2c00      	cmp	r4, #0
    8fb0:	d0db      	beq.n	8f6a <__gesf2+0x1e>
    8fb2:	e7f9      	b.n	8fa8 <__gesf2+0x5c>
    8fb4:	4282      	cmp	r2, r0
    8fb6:	dceb      	bgt.n	8f90 <__gesf2+0x44>
    8fb8:	db04      	blt.n	8fc4 <__gesf2+0x78>
    8fba:	42a5      	cmp	r5, r4
    8fbc:	d8e8      	bhi.n	8f90 <__gesf2+0x44>
    8fbe:	2000      	movs	r0, #0
    8fc0:	42a5      	cmp	r5, r4
    8fc2:	d2e8      	bcs.n	8f96 <__gesf2+0x4a>
    8fc4:	2101      	movs	r1, #1
    8fc6:	1e58      	subs	r0, r3, #1
    8fc8:	4308      	orrs	r0, r1
    8fca:	e7e4      	b.n	8f96 <__gesf2+0x4a>

00008fcc <__lesf2>:
    8fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fce:	0042      	lsls	r2, r0, #1
    8fd0:	024d      	lsls	r5, r1, #9
    8fd2:	004c      	lsls	r4, r1, #1
    8fd4:	0246      	lsls	r6, r0, #9
    8fd6:	0a76      	lsrs	r6, r6, #9
    8fd8:	0e12      	lsrs	r2, r2, #24
    8fda:	0fc3      	lsrs	r3, r0, #31
    8fdc:	0a6d      	lsrs	r5, r5, #9
    8fde:	0e24      	lsrs	r4, r4, #24
    8fe0:	0fc9      	lsrs	r1, r1, #31
    8fe2:	2aff      	cmp	r2, #255	; 0xff
    8fe4:	d016      	beq.n	9014 <__lesf2+0x48>
    8fe6:	2cff      	cmp	r4, #255	; 0xff
    8fe8:	d018      	beq.n	901c <__lesf2+0x50>
    8fea:	2a00      	cmp	r2, #0
    8fec:	d10a      	bne.n	9004 <__lesf2+0x38>
    8fee:	4270      	negs	r0, r6
    8ff0:	4170      	adcs	r0, r6
    8ff2:	b2c0      	uxtb	r0, r0
    8ff4:	2c00      	cmp	r4, #0
    8ff6:	d015      	beq.n	9024 <__lesf2+0x58>
    8ff8:	2800      	cmp	r0, #0
    8ffa:	d005      	beq.n	9008 <__lesf2+0x3c>
    8ffc:	2001      	movs	r0, #1
    8ffe:	3901      	subs	r1, #1
    9000:	4308      	orrs	r0, r1
    9002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9004:	2c00      	cmp	r4, #0
    9006:	d013      	beq.n	9030 <__lesf2+0x64>
    9008:	4299      	cmp	r1, r3
    900a:	d014      	beq.n	9036 <__lesf2+0x6a>
    900c:	2001      	movs	r0, #1
    900e:	425b      	negs	r3, r3
    9010:	4318      	orrs	r0, r3
    9012:	e7f6      	b.n	9002 <__lesf2+0x36>
    9014:	2002      	movs	r0, #2
    9016:	2e00      	cmp	r6, #0
    9018:	d1f3      	bne.n	9002 <__lesf2+0x36>
    901a:	e7e4      	b.n	8fe6 <__lesf2+0x1a>
    901c:	2002      	movs	r0, #2
    901e:	2d00      	cmp	r5, #0
    9020:	d1ef      	bne.n	9002 <__lesf2+0x36>
    9022:	e7e2      	b.n	8fea <__lesf2+0x1e>
    9024:	2d00      	cmp	r5, #0
    9026:	d1e7      	bne.n	8ff8 <__lesf2+0x2c>
    9028:	2000      	movs	r0, #0
    902a:	2e00      	cmp	r6, #0
    902c:	d0e9      	beq.n	9002 <__lesf2+0x36>
    902e:	e7ed      	b.n	900c <__lesf2+0x40>
    9030:	2d00      	cmp	r5, #0
    9032:	d1e9      	bne.n	9008 <__lesf2+0x3c>
    9034:	e7ea      	b.n	900c <__lesf2+0x40>
    9036:	42a2      	cmp	r2, r4
    9038:	dc06      	bgt.n	9048 <__lesf2+0x7c>
    903a:	dbdf      	blt.n	8ffc <__lesf2+0x30>
    903c:	42ae      	cmp	r6, r5
    903e:	d803      	bhi.n	9048 <__lesf2+0x7c>
    9040:	2000      	movs	r0, #0
    9042:	42ae      	cmp	r6, r5
    9044:	d3da      	bcc.n	8ffc <__lesf2+0x30>
    9046:	e7dc      	b.n	9002 <__lesf2+0x36>
    9048:	2001      	movs	r0, #1
    904a:	4249      	negs	r1, r1
    904c:	4308      	orrs	r0, r1
    904e:	e7d8      	b.n	9002 <__lesf2+0x36>

00009050 <__aeabi_fmul>:
    9050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9052:	4657      	mov	r7, sl
    9054:	464e      	mov	r6, r9
    9056:	4645      	mov	r5, r8
    9058:	46de      	mov	lr, fp
    905a:	b5e0      	push	{r5, r6, r7, lr}
    905c:	0247      	lsls	r7, r0, #9
    905e:	0046      	lsls	r6, r0, #1
    9060:	4688      	mov	r8, r1
    9062:	0a7f      	lsrs	r7, r7, #9
    9064:	0e36      	lsrs	r6, r6, #24
    9066:	0fc4      	lsrs	r4, r0, #31
    9068:	2e00      	cmp	r6, #0
    906a:	d047      	beq.n	90fc <__aeabi_fmul+0xac>
    906c:	2eff      	cmp	r6, #255	; 0xff
    906e:	d024      	beq.n	90ba <__aeabi_fmul+0x6a>
    9070:	00fb      	lsls	r3, r7, #3
    9072:	2780      	movs	r7, #128	; 0x80
    9074:	04ff      	lsls	r7, r7, #19
    9076:	431f      	orrs	r7, r3
    9078:	2300      	movs	r3, #0
    907a:	4699      	mov	r9, r3
    907c:	469a      	mov	sl, r3
    907e:	3e7f      	subs	r6, #127	; 0x7f
    9080:	4643      	mov	r3, r8
    9082:	025d      	lsls	r5, r3, #9
    9084:	0058      	lsls	r0, r3, #1
    9086:	0fdb      	lsrs	r3, r3, #31
    9088:	0a6d      	lsrs	r5, r5, #9
    908a:	0e00      	lsrs	r0, r0, #24
    908c:	4698      	mov	r8, r3
    908e:	d043      	beq.n	9118 <__aeabi_fmul+0xc8>
    9090:	28ff      	cmp	r0, #255	; 0xff
    9092:	d03b      	beq.n	910c <__aeabi_fmul+0xbc>
    9094:	00eb      	lsls	r3, r5, #3
    9096:	2580      	movs	r5, #128	; 0x80
    9098:	2200      	movs	r2, #0
    909a:	04ed      	lsls	r5, r5, #19
    909c:	431d      	orrs	r5, r3
    909e:	387f      	subs	r0, #127	; 0x7f
    90a0:	1836      	adds	r6, r6, r0
    90a2:	1c73      	adds	r3, r6, #1
    90a4:	4641      	mov	r1, r8
    90a6:	469b      	mov	fp, r3
    90a8:	464b      	mov	r3, r9
    90aa:	4061      	eors	r1, r4
    90ac:	4313      	orrs	r3, r2
    90ae:	2b0f      	cmp	r3, #15
    90b0:	d864      	bhi.n	917c <__aeabi_fmul+0x12c>
    90b2:	4875      	ldr	r0, [pc, #468]	; (9288 <__aeabi_fmul+0x238>)
    90b4:	009b      	lsls	r3, r3, #2
    90b6:	58c3      	ldr	r3, [r0, r3]
    90b8:	469f      	mov	pc, r3
    90ba:	2f00      	cmp	r7, #0
    90bc:	d142      	bne.n	9144 <__aeabi_fmul+0xf4>
    90be:	2308      	movs	r3, #8
    90c0:	4699      	mov	r9, r3
    90c2:	3b06      	subs	r3, #6
    90c4:	26ff      	movs	r6, #255	; 0xff
    90c6:	469a      	mov	sl, r3
    90c8:	e7da      	b.n	9080 <__aeabi_fmul+0x30>
    90ca:	4641      	mov	r1, r8
    90cc:	2a02      	cmp	r2, #2
    90ce:	d028      	beq.n	9122 <__aeabi_fmul+0xd2>
    90d0:	2a03      	cmp	r2, #3
    90d2:	d100      	bne.n	90d6 <__aeabi_fmul+0x86>
    90d4:	e0ce      	b.n	9274 <__aeabi_fmul+0x224>
    90d6:	2a01      	cmp	r2, #1
    90d8:	d000      	beq.n	90dc <__aeabi_fmul+0x8c>
    90da:	e0ac      	b.n	9236 <__aeabi_fmul+0x1e6>
    90dc:	4011      	ands	r1, r2
    90de:	2000      	movs	r0, #0
    90e0:	2200      	movs	r2, #0
    90e2:	b2cc      	uxtb	r4, r1
    90e4:	0240      	lsls	r0, r0, #9
    90e6:	05d2      	lsls	r2, r2, #23
    90e8:	0a40      	lsrs	r0, r0, #9
    90ea:	07e4      	lsls	r4, r4, #31
    90ec:	4310      	orrs	r0, r2
    90ee:	4320      	orrs	r0, r4
    90f0:	bc3c      	pop	{r2, r3, r4, r5}
    90f2:	4690      	mov	r8, r2
    90f4:	4699      	mov	r9, r3
    90f6:	46a2      	mov	sl, r4
    90f8:	46ab      	mov	fp, r5
    90fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90fc:	2f00      	cmp	r7, #0
    90fe:	d115      	bne.n	912c <__aeabi_fmul+0xdc>
    9100:	2304      	movs	r3, #4
    9102:	4699      	mov	r9, r3
    9104:	3b03      	subs	r3, #3
    9106:	2600      	movs	r6, #0
    9108:	469a      	mov	sl, r3
    910a:	e7b9      	b.n	9080 <__aeabi_fmul+0x30>
    910c:	20ff      	movs	r0, #255	; 0xff
    910e:	2202      	movs	r2, #2
    9110:	2d00      	cmp	r5, #0
    9112:	d0c5      	beq.n	90a0 <__aeabi_fmul+0x50>
    9114:	2203      	movs	r2, #3
    9116:	e7c3      	b.n	90a0 <__aeabi_fmul+0x50>
    9118:	2d00      	cmp	r5, #0
    911a:	d119      	bne.n	9150 <__aeabi_fmul+0x100>
    911c:	2000      	movs	r0, #0
    911e:	2201      	movs	r2, #1
    9120:	e7be      	b.n	90a0 <__aeabi_fmul+0x50>
    9122:	2401      	movs	r4, #1
    9124:	22ff      	movs	r2, #255	; 0xff
    9126:	400c      	ands	r4, r1
    9128:	2000      	movs	r0, #0
    912a:	e7db      	b.n	90e4 <__aeabi_fmul+0x94>
    912c:	0038      	movs	r0, r7
    912e:	f002 f8fb 	bl	b328 <__clzsi2>
    9132:	2676      	movs	r6, #118	; 0x76
    9134:	1f43      	subs	r3, r0, #5
    9136:	409f      	lsls	r7, r3
    9138:	2300      	movs	r3, #0
    913a:	4276      	negs	r6, r6
    913c:	1a36      	subs	r6, r6, r0
    913e:	4699      	mov	r9, r3
    9140:	469a      	mov	sl, r3
    9142:	e79d      	b.n	9080 <__aeabi_fmul+0x30>
    9144:	230c      	movs	r3, #12
    9146:	4699      	mov	r9, r3
    9148:	3b09      	subs	r3, #9
    914a:	26ff      	movs	r6, #255	; 0xff
    914c:	469a      	mov	sl, r3
    914e:	e797      	b.n	9080 <__aeabi_fmul+0x30>
    9150:	0028      	movs	r0, r5
    9152:	f002 f8e9 	bl	b328 <__clzsi2>
    9156:	1f43      	subs	r3, r0, #5
    9158:	409d      	lsls	r5, r3
    915a:	2376      	movs	r3, #118	; 0x76
    915c:	425b      	negs	r3, r3
    915e:	1a18      	subs	r0, r3, r0
    9160:	2200      	movs	r2, #0
    9162:	e79d      	b.n	90a0 <__aeabi_fmul+0x50>
    9164:	2080      	movs	r0, #128	; 0x80
    9166:	2400      	movs	r4, #0
    9168:	03c0      	lsls	r0, r0, #15
    916a:	22ff      	movs	r2, #255	; 0xff
    916c:	e7ba      	b.n	90e4 <__aeabi_fmul+0x94>
    916e:	003d      	movs	r5, r7
    9170:	4652      	mov	r2, sl
    9172:	e7ab      	b.n	90cc <__aeabi_fmul+0x7c>
    9174:	003d      	movs	r5, r7
    9176:	0021      	movs	r1, r4
    9178:	4652      	mov	r2, sl
    917a:	e7a7      	b.n	90cc <__aeabi_fmul+0x7c>
    917c:	0c3b      	lsrs	r3, r7, #16
    917e:	469c      	mov	ip, r3
    9180:	042a      	lsls	r2, r5, #16
    9182:	0c12      	lsrs	r2, r2, #16
    9184:	0c2b      	lsrs	r3, r5, #16
    9186:	0014      	movs	r4, r2
    9188:	4660      	mov	r0, ip
    918a:	4665      	mov	r5, ip
    918c:	043f      	lsls	r7, r7, #16
    918e:	0c3f      	lsrs	r7, r7, #16
    9190:	437c      	muls	r4, r7
    9192:	4342      	muls	r2, r0
    9194:	435d      	muls	r5, r3
    9196:	437b      	muls	r3, r7
    9198:	0c27      	lsrs	r7, r4, #16
    919a:	189b      	adds	r3, r3, r2
    919c:	18ff      	adds	r7, r7, r3
    919e:	42ba      	cmp	r2, r7
    91a0:	d903      	bls.n	91aa <__aeabi_fmul+0x15a>
    91a2:	2380      	movs	r3, #128	; 0x80
    91a4:	025b      	lsls	r3, r3, #9
    91a6:	469c      	mov	ip, r3
    91a8:	4465      	add	r5, ip
    91aa:	0424      	lsls	r4, r4, #16
    91ac:	043a      	lsls	r2, r7, #16
    91ae:	0c24      	lsrs	r4, r4, #16
    91b0:	1912      	adds	r2, r2, r4
    91b2:	0193      	lsls	r3, r2, #6
    91b4:	1e5c      	subs	r4, r3, #1
    91b6:	41a3      	sbcs	r3, r4
    91b8:	0c3f      	lsrs	r7, r7, #16
    91ba:	0e92      	lsrs	r2, r2, #26
    91bc:	197d      	adds	r5, r7, r5
    91be:	431a      	orrs	r2, r3
    91c0:	01ad      	lsls	r5, r5, #6
    91c2:	4315      	orrs	r5, r2
    91c4:	012b      	lsls	r3, r5, #4
    91c6:	d504      	bpl.n	91d2 <__aeabi_fmul+0x182>
    91c8:	2301      	movs	r3, #1
    91ca:	465e      	mov	r6, fp
    91cc:	086a      	lsrs	r2, r5, #1
    91ce:	401d      	ands	r5, r3
    91d0:	4315      	orrs	r5, r2
    91d2:	0032      	movs	r2, r6
    91d4:	327f      	adds	r2, #127	; 0x7f
    91d6:	2a00      	cmp	r2, #0
    91d8:	dd25      	ble.n	9226 <__aeabi_fmul+0x1d6>
    91da:	076b      	lsls	r3, r5, #29
    91dc:	d004      	beq.n	91e8 <__aeabi_fmul+0x198>
    91de:	230f      	movs	r3, #15
    91e0:	402b      	ands	r3, r5
    91e2:	2b04      	cmp	r3, #4
    91e4:	d000      	beq.n	91e8 <__aeabi_fmul+0x198>
    91e6:	3504      	adds	r5, #4
    91e8:	012b      	lsls	r3, r5, #4
    91ea:	d503      	bpl.n	91f4 <__aeabi_fmul+0x1a4>
    91ec:	0032      	movs	r2, r6
    91ee:	4b27      	ldr	r3, [pc, #156]	; (928c <__aeabi_fmul+0x23c>)
    91f0:	3280      	adds	r2, #128	; 0x80
    91f2:	401d      	ands	r5, r3
    91f4:	2afe      	cmp	r2, #254	; 0xfe
    91f6:	dc94      	bgt.n	9122 <__aeabi_fmul+0xd2>
    91f8:	2401      	movs	r4, #1
    91fa:	01a8      	lsls	r0, r5, #6
    91fc:	0a40      	lsrs	r0, r0, #9
    91fe:	b2d2      	uxtb	r2, r2
    9200:	400c      	ands	r4, r1
    9202:	e76f      	b.n	90e4 <__aeabi_fmul+0x94>
    9204:	2080      	movs	r0, #128	; 0x80
    9206:	03c0      	lsls	r0, r0, #15
    9208:	4207      	tst	r7, r0
    920a:	d007      	beq.n	921c <__aeabi_fmul+0x1cc>
    920c:	4205      	tst	r5, r0
    920e:	d105      	bne.n	921c <__aeabi_fmul+0x1cc>
    9210:	4328      	orrs	r0, r5
    9212:	0240      	lsls	r0, r0, #9
    9214:	0a40      	lsrs	r0, r0, #9
    9216:	4644      	mov	r4, r8
    9218:	22ff      	movs	r2, #255	; 0xff
    921a:	e763      	b.n	90e4 <__aeabi_fmul+0x94>
    921c:	4338      	orrs	r0, r7
    921e:	0240      	lsls	r0, r0, #9
    9220:	0a40      	lsrs	r0, r0, #9
    9222:	22ff      	movs	r2, #255	; 0xff
    9224:	e75e      	b.n	90e4 <__aeabi_fmul+0x94>
    9226:	2401      	movs	r4, #1
    9228:	1aa3      	subs	r3, r4, r2
    922a:	2b1b      	cmp	r3, #27
    922c:	dd05      	ble.n	923a <__aeabi_fmul+0x1ea>
    922e:	400c      	ands	r4, r1
    9230:	2200      	movs	r2, #0
    9232:	2000      	movs	r0, #0
    9234:	e756      	b.n	90e4 <__aeabi_fmul+0x94>
    9236:	465e      	mov	r6, fp
    9238:	e7cb      	b.n	91d2 <__aeabi_fmul+0x182>
    923a:	002a      	movs	r2, r5
    923c:	2020      	movs	r0, #32
    923e:	40da      	lsrs	r2, r3
    9240:	1ac3      	subs	r3, r0, r3
    9242:	409d      	lsls	r5, r3
    9244:	002b      	movs	r3, r5
    9246:	1e5d      	subs	r5, r3, #1
    9248:	41ab      	sbcs	r3, r5
    924a:	4313      	orrs	r3, r2
    924c:	075a      	lsls	r2, r3, #29
    924e:	d004      	beq.n	925a <__aeabi_fmul+0x20a>
    9250:	220f      	movs	r2, #15
    9252:	401a      	ands	r2, r3
    9254:	2a04      	cmp	r2, #4
    9256:	d000      	beq.n	925a <__aeabi_fmul+0x20a>
    9258:	3304      	adds	r3, #4
    925a:	015a      	lsls	r2, r3, #5
    925c:	d504      	bpl.n	9268 <__aeabi_fmul+0x218>
    925e:	2401      	movs	r4, #1
    9260:	2201      	movs	r2, #1
    9262:	400c      	ands	r4, r1
    9264:	2000      	movs	r0, #0
    9266:	e73d      	b.n	90e4 <__aeabi_fmul+0x94>
    9268:	2401      	movs	r4, #1
    926a:	019b      	lsls	r3, r3, #6
    926c:	0a58      	lsrs	r0, r3, #9
    926e:	400c      	ands	r4, r1
    9270:	2200      	movs	r2, #0
    9272:	e737      	b.n	90e4 <__aeabi_fmul+0x94>
    9274:	2080      	movs	r0, #128	; 0x80
    9276:	2401      	movs	r4, #1
    9278:	03c0      	lsls	r0, r0, #15
    927a:	4328      	orrs	r0, r5
    927c:	0240      	lsls	r0, r0, #9
    927e:	0a40      	lsrs	r0, r0, #9
    9280:	400c      	ands	r4, r1
    9282:	22ff      	movs	r2, #255	; 0xff
    9284:	e72e      	b.n	90e4 <__aeabi_fmul+0x94>
    9286:	46c0      	nop			; (mov r8, r8)
    9288:	00010638 	.word	0x00010638
    928c:	f7ffffff 	.word	0xf7ffffff

00009290 <__aeabi_fsub>:
    9290:	b5f0      	push	{r4, r5, r6, r7, lr}
    9292:	464f      	mov	r7, r9
    9294:	46d6      	mov	lr, sl
    9296:	4646      	mov	r6, r8
    9298:	0044      	lsls	r4, r0, #1
    929a:	b5c0      	push	{r6, r7, lr}
    929c:	0fc2      	lsrs	r2, r0, #31
    929e:	0247      	lsls	r7, r0, #9
    92a0:	0248      	lsls	r0, r1, #9
    92a2:	0a40      	lsrs	r0, r0, #9
    92a4:	4684      	mov	ip, r0
    92a6:	4666      	mov	r6, ip
    92a8:	0a7b      	lsrs	r3, r7, #9
    92aa:	0048      	lsls	r0, r1, #1
    92ac:	0fc9      	lsrs	r1, r1, #31
    92ae:	469a      	mov	sl, r3
    92b0:	0e24      	lsrs	r4, r4, #24
    92b2:	0015      	movs	r5, r2
    92b4:	00db      	lsls	r3, r3, #3
    92b6:	0e00      	lsrs	r0, r0, #24
    92b8:	4689      	mov	r9, r1
    92ba:	00f6      	lsls	r6, r6, #3
    92bc:	28ff      	cmp	r0, #255	; 0xff
    92be:	d100      	bne.n	92c2 <__aeabi_fsub+0x32>
    92c0:	e08f      	b.n	93e2 <__aeabi_fsub+0x152>
    92c2:	2101      	movs	r1, #1
    92c4:	464f      	mov	r7, r9
    92c6:	404f      	eors	r7, r1
    92c8:	0039      	movs	r1, r7
    92ca:	4291      	cmp	r1, r2
    92cc:	d066      	beq.n	939c <__aeabi_fsub+0x10c>
    92ce:	1a22      	subs	r2, r4, r0
    92d0:	2a00      	cmp	r2, #0
    92d2:	dc00      	bgt.n	92d6 <__aeabi_fsub+0x46>
    92d4:	e09d      	b.n	9412 <__aeabi_fsub+0x182>
    92d6:	2800      	cmp	r0, #0
    92d8:	d13d      	bne.n	9356 <__aeabi_fsub+0xc6>
    92da:	2e00      	cmp	r6, #0
    92dc:	d100      	bne.n	92e0 <__aeabi_fsub+0x50>
    92de:	e08b      	b.n	93f8 <__aeabi_fsub+0x168>
    92e0:	1e51      	subs	r1, r2, #1
    92e2:	2900      	cmp	r1, #0
    92e4:	d000      	beq.n	92e8 <__aeabi_fsub+0x58>
    92e6:	e0b5      	b.n	9454 <__aeabi_fsub+0x1c4>
    92e8:	2401      	movs	r4, #1
    92ea:	1b9b      	subs	r3, r3, r6
    92ec:	015a      	lsls	r2, r3, #5
    92ee:	d544      	bpl.n	937a <__aeabi_fsub+0xea>
    92f0:	019b      	lsls	r3, r3, #6
    92f2:	099f      	lsrs	r7, r3, #6
    92f4:	0038      	movs	r0, r7
    92f6:	f002 f817 	bl	b328 <__clzsi2>
    92fa:	3805      	subs	r0, #5
    92fc:	4087      	lsls	r7, r0
    92fe:	4284      	cmp	r4, r0
    9300:	dd00      	ble.n	9304 <__aeabi_fsub+0x74>
    9302:	e096      	b.n	9432 <__aeabi_fsub+0x1a2>
    9304:	1b04      	subs	r4, r0, r4
    9306:	003a      	movs	r2, r7
    9308:	2020      	movs	r0, #32
    930a:	3401      	adds	r4, #1
    930c:	40e2      	lsrs	r2, r4
    930e:	1b04      	subs	r4, r0, r4
    9310:	40a7      	lsls	r7, r4
    9312:	003b      	movs	r3, r7
    9314:	1e5f      	subs	r7, r3, #1
    9316:	41bb      	sbcs	r3, r7
    9318:	2400      	movs	r4, #0
    931a:	4313      	orrs	r3, r2
    931c:	075a      	lsls	r2, r3, #29
    931e:	d004      	beq.n	932a <__aeabi_fsub+0x9a>
    9320:	220f      	movs	r2, #15
    9322:	401a      	ands	r2, r3
    9324:	2a04      	cmp	r2, #4
    9326:	d000      	beq.n	932a <__aeabi_fsub+0x9a>
    9328:	3304      	adds	r3, #4
    932a:	015a      	lsls	r2, r3, #5
    932c:	d527      	bpl.n	937e <__aeabi_fsub+0xee>
    932e:	3401      	adds	r4, #1
    9330:	2cff      	cmp	r4, #255	; 0xff
    9332:	d100      	bne.n	9336 <__aeabi_fsub+0xa6>
    9334:	e079      	b.n	942a <__aeabi_fsub+0x19a>
    9336:	2201      	movs	r2, #1
    9338:	019b      	lsls	r3, r3, #6
    933a:	0a5b      	lsrs	r3, r3, #9
    933c:	b2e4      	uxtb	r4, r4
    933e:	402a      	ands	r2, r5
    9340:	025b      	lsls	r3, r3, #9
    9342:	05e4      	lsls	r4, r4, #23
    9344:	0a58      	lsrs	r0, r3, #9
    9346:	07d2      	lsls	r2, r2, #31
    9348:	4320      	orrs	r0, r4
    934a:	4310      	orrs	r0, r2
    934c:	bc1c      	pop	{r2, r3, r4}
    934e:	4690      	mov	r8, r2
    9350:	4699      	mov	r9, r3
    9352:	46a2      	mov	sl, r4
    9354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9356:	2cff      	cmp	r4, #255	; 0xff
    9358:	d0e0      	beq.n	931c <__aeabi_fsub+0x8c>
    935a:	2180      	movs	r1, #128	; 0x80
    935c:	04c9      	lsls	r1, r1, #19
    935e:	430e      	orrs	r6, r1
    9360:	2a1b      	cmp	r2, #27
    9362:	dc7b      	bgt.n	945c <__aeabi_fsub+0x1cc>
    9364:	0031      	movs	r1, r6
    9366:	2020      	movs	r0, #32
    9368:	40d1      	lsrs	r1, r2
    936a:	1a82      	subs	r2, r0, r2
    936c:	4096      	lsls	r6, r2
    936e:	1e72      	subs	r2, r6, #1
    9370:	4196      	sbcs	r6, r2
    9372:	430e      	orrs	r6, r1
    9374:	1b9b      	subs	r3, r3, r6
    9376:	015a      	lsls	r2, r3, #5
    9378:	d4ba      	bmi.n	92f0 <__aeabi_fsub+0x60>
    937a:	075a      	lsls	r2, r3, #29
    937c:	d1d0      	bne.n	9320 <__aeabi_fsub+0x90>
    937e:	2201      	movs	r2, #1
    9380:	08df      	lsrs	r7, r3, #3
    9382:	402a      	ands	r2, r5
    9384:	2cff      	cmp	r4, #255	; 0xff
    9386:	d133      	bne.n	93f0 <__aeabi_fsub+0x160>
    9388:	2f00      	cmp	r7, #0
    938a:	d100      	bne.n	938e <__aeabi_fsub+0xfe>
    938c:	e0a8      	b.n	94e0 <__aeabi_fsub+0x250>
    938e:	2380      	movs	r3, #128	; 0x80
    9390:	03db      	lsls	r3, r3, #15
    9392:	433b      	orrs	r3, r7
    9394:	025b      	lsls	r3, r3, #9
    9396:	0a5b      	lsrs	r3, r3, #9
    9398:	24ff      	movs	r4, #255	; 0xff
    939a:	e7d1      	b.n	9340 <__aeabi_fsub+0xb0>
    939c:	1a21      	subs	r1, r4, r0
    939e:	2900      	cmp	r1, #0
    93a0:	dd4c      	ble.n	943c <__aeabi_fsub+0x1ac>
    93a2:	2800      	cmp	r0, #0
    93a4:	d02a      	beq.n	93fc <__aeabi_fsub+0x16c>
    93a6:	2cff      	cmp	r4, #255	; 0xff
    93a8:	d0b8      	beq.n	931c <__aeabi_fsub+0x8c>
    93aa:	2080      	movs	r0, #128	; 0x80
    93ac:	04c0      	lsls	r0, r0, #19
    93ae:	4306      	orrs	r6, r0
    93b0:	291b      	cmp	r1, #27
    93b2:	dd00      	ble.n	93b6 <__aeabi_fsub+0x126>
    93b4:	e0af      	b.n	9516 <__aeabi_fsub+0x286>
    93b6:	0030      	movs	r0, r6
    93b8:	2720      	movs	r7, #32
    93ba:	40c8      	lsrs	r0, r1
    93bc:	1a79      	subs	r1, r7, r1
    93be:	408e      	lsls	r6, r1
    93c0:	1e71      	subs	r1, r6, #1
    93c2:	418e      	sbcs	r6, r1
    93c4:	4306      	orrs	r6, r0
    93c6:	199b      	adds	r3, r3, r6
    93c8:	0159      	lsls	r1, r3, #5
    93ca:	d5d6      	bpl.n	937a <__aeabi_fsub+0xea>
    93cc:	3401      	adds	r4, #1
    93ce:	2cff      	cmp	r4, #255	; 0xff
    93d0:	d100      	bne.n	93d4 <__aeabi_fsub+0x144>
    93d2:	e085      	b.n	94e0 <__aeabi_fsub+0x250>
    93d4:	2201      	movs	r2, #1
    93d6:	497a      	ldr	r1, [pc, #488]	; (95c0 <__aeabi_fsub+0x330>)
    93d8:	401a      	ands	r2, r3
    93da:	085b      	lsrs	r3, r3, #1
    93dc:	400b      	ands	r3, r1
    93de:	4313      	orrs	r3, r2
    93e0:	e79c      	b.n	931c <__aeabi_fsub+0x8c>
    93e2:	2e00      	cmp	r6, #0
    93e4:	d000      	beq.n	93e8 <__aeabi_fsub+0x158>
    93e6:	e770      	b.n	92ca <__aeabi_fsub+0x3a>
    93e8:	e76b      	b.n	92c2 <__aeabi_fsub+0x32>
    93ea:	1e3b      	subs	r3, r7, #0
    93ec:	d1c5      	bne.n	937a <__aeabi_fsub+0xea>
    93ee:	2200      	movs	r2, #0
    93f0:	027b      	lsls	r3, r7, #9
    93f2:	0a5b      	lsrs	r3, r3, #9
    93f4:	b2e4      	uxtb	r4, r4
    93f6:	e7a3      	b.n	9340 <__aeabi_fsub+0xb0>
    93f8:	0014      	movs	r4, r2
    93fa:	e78f      	b.n	931c <__aeabi_fsub+0x8c>
    93fc:	2e00      	cmp	r6, #0
    93fe:	d04d      	beq.n	949c <__aeabi_fsub+0x20c>
    9400:	1e48      	subs	r0, r1, #1
    9402:	2800      	cmp	r0, #0
    9404:	d157      	bne.n	94b6 <__aeabi_fsub+0x226>
    9406:	199b      	adds	r3, r3, r6
    9408:	2401      	movs	r4, #1
    940a:	015a      	lsls	r2, r3, #5
    940c:	d5b5      	bpl.n	937a <__aeabi_fsub+0xea>
    940e:	2402      	movs	r4, #2
    9410:	e7e0      	b.n	93d4 <__aeabi_fsub+0x144>
    9412:	2a00      	cmp	r2, #0
    9414:	d125      	bne.n	9462 <__aeabi_fsub+0x1d2>
    9416:	1c62      	adds	r2, r4, #1
    9418:	b2d2      	uxtb	r2, r2
    941a:	2a01      	cmp	r2, #1
    941c:	dd72      	ble.n	9504 <__aeabi_fsub+0x274>
    941e:	1b9f      	subs	r7, r3, r6
    9420:	017a      	lsls	r2, r7, #5
    9422:	d535      	bpl.n	9490 <__aeabi_fsub+0x200>
    9424:	1af7      	subs	r7, r6, r3
    9426:	000d      	movs	r5, r1
    9428:	e764      	b.n	92f4 <__aeabi_fsub+0x64>
    942a:	2201      	movs	r2, #1
    942c:	2300      	movs	r3, #0
    942e:	402a      	ands	r2, r5
    9430:	e786      	b.n	9340 <__aeabi_fsub+0xb0>
    9432:	003b      	movs	r3, r7
    9434:	4a63      	ldr	r2, [pc, #396]	; (95c4 <__aeabi_fsub+0x334>)
    9436:	1a24      	subs	r4, r4, r0
    9438:	4013      	ands	r3, r2
    943a:	e76f      	b.n	931c <__aeabi_fsub+0x8c>
    943c:	2900      	cmp	r1, #0
    943e:	d16c      	bne.n	951a <__aeabi_fsub+0x28a>
    9440:	1c61      	adds	r1, r4, #1
    9442:	b2c8      	uxtb	r0, r1
    9444:	2801      	cmp	r0, #1
    9446:	dd4e      	ble.n	94e6 <__aeabi_fsub+0x256>
    9448:	29ff      	cmp	r1, #255	; 0xff
    944a:	d049      	beq.n	94e0 <__aeabi_fsub+0x250>
    944c:	199b      	adds	r3, r3, r6
    944e:	085b      	lsrs	r3, r3, #1
    9450:	000c      	movs	r4, r1
    9452:	e763      	b.n	931c <__aeabi_fsub+0x8c>
    9454:	2aff      	cmp	r2, #255	; 0xff
    9456:	d041      	beq.n	94dc <__aeabi_fsub+0x24c>
    9458:	000a      	movs	r2, r1
    945a:	e781      	b.n	9360 <__aeabi_fsub+0xd0>
    945c:	2601      	movs	r6, #1
    945e:	1b9b      	subs	r3, r3, r6
    9460:	e789      	b.n	9376 <__aeabi_fsub+0xe6>
    9462:	2c00      	cmp	r4, #0
    9464:	d01c      	beq.n	94a0 <__aeabi_fsub+0x210>
    9466:	28ff      	cmp	r0, #255	; 0xff
    9468:	d021      	beq.n	94ae <__aeabi_fsub+0x21e>
    946a:	2480      	movs	r4, #128	; 0x80
    946c:	04e4      	lsls	r4, r4, #19
    946e:	4252      	negs	r2, r2
    9470:	4323      	orrs	r3, r4
    9472:	2a1b      	cmp	r2, #27
    9474:	dd00      	ble.n	9478 <__aeabi_fsub+0x1e8>
    9476:	e096      	b.n	95a6 <__aeabi_fsub+0x316>
    9478:	001c      	movs	r4, r3
    947a:	2520      	movs	r5, #32
    947c:	40d4      	lsrs	r4, r2
    947e:	1aaa      	subs	r2, r5, r2
    9480:	4093      	lsls	r3, r2
    9482:	1e5a      	subs	r2, r3, #1
    9484:	4193      	sbcs	r3, r2
    9486:	4323      	orrs	r3, r4
    9488:	1af3      	subs	r3, r6, r3
    948a:	0004      	movs	r4, r0
    948c:	000d      	movs	r5, r1
    948e:	e72d      	b.n	92ec <__aeabi_fsub+0x5c>
    9490:	2f00      	cmp	r7, #0
    9492:	d000      	beq.n	9496 <__aeabi_fsub+0x206>
    9494:	e72e      	b.n	92f4 <__aeabi_fsub+0x64>
    9496:	2200      	movs	r2, #0
    9498:	2400      	movs	r4, #0
    949a:	e7a9      	b.n	93f0 <__aeabi_fsub+0x160>
    949c:	000c      	movs	r4, r1
    949e:	e73d      	b.n	931c <__aeabi_fsub+0x8c>
    94a0:	2b00      	cmp	r3, #0
    94a2:	d058      	beq.n	9556 <__aeabi_fsub+0x2c6>
    94a4:	43d2      	mvns	r2, r2
    94a6:	2a00      	cmp	r2, #0
    94a8:	d0ee      	beq.n	9488 <__aeabi_fsub+0x1f8>
    94aa:	28ff      	cmp	r0, #255	; 0xff
    94ac:	d1e1      	bne.n	9472 <__aeabi_fsub+0x1e2>
    94ae:	0033      	movs	r3, r6
    94b0:	24ff      	movs	r4, #255	; 0xff
    94b2:	000d      	movs	r5, r1
    94b4:	e732      	b.n	931c <__aeabi_fsub+0x8c>
    94b6:	29ff      	cmp	r1, #255	; 0xff
    94b8:	d010      	beq.n	94dc <__aeabi_fsub+0x24c>
    94ba:	0001      	movs	r1, r0
    94bc:	e778      	b.n	93b0 <__aeabi_fsub+0x120>
    94be:	2b00      	cmp	r3, #0
    94c0:	d06e      	beq.n	95a0 <__aeabi_fsub+0x310>
    94c2:	24ff      	movs	r4, #255	; 0xff
    94c4:	2e00      	cmp	r6, #0
    94c6:	d100      	bne.n	94ca <__aeabi_fsub+0x23a>
    94c8:	e728      	b.n	931c <__aeabi_fsub+0x8c>
    94ca:	2280      	movs	r2, #128	; 0x80
    94cc:	4651      	mov	r1, sl
    94ce:	03d2      	lsls	r2, r2, #15
    94d0:	4211      	tst	r1, r2
    94d2:	d003      	beq.n	94dc <__aeabi_fsub+0x24c>
    94d4:	4661      	mov	r1, ip
    94d6:	4211      	tst	r1, r2
    94d8:	d100      	bne.n	94dc <__aeabi_fsub+0x24c>
    94da:	0033      	movs	r3, r6
    94dc:	24ff      	movs	r4, #255	; 0xff
    94de:	e71d      	b.n	931c <__aeabi_fsub+0x8c>
    94e0:	24ff      	movs	r4, #255	; 0xff
    94e2:	2300      	movs	r3, #0
    94e4:	e72c      	b.n	9340 <__aeabi_fsub+0xb0>
    94e6:	2c00      	cmp	r4, #0
    94e8:	d1e9      	bne.n	94be <__aeabi_fsub+0x22e>
    94ea:	2b00      	cmp	r3, #0
    94ec:	d063      	beq.n	95b6 <__aeabi_fsub+0x326>
    94ee:	2e00      	cmp	r6, #0
    94f0:	d100      	bne.n	94f4 <__aeabi_fsub+0x264>
    94f2:	e713      	b.n	931c <__aeabi_fsub+0x8c>
    94f4:	199b      	adds	r3, r3, r6
    94f6:	015a      	lsls	r2, r3, #5
    94f8:	d400      	bmi.n	94fc <__aeabi_fsub+0x26c>
    94fa:	e73e      	b.n	937a <__aeabi_fsub+0xea>
    94fc:	4a31      	ldr	r2, [pc, #196]	; (95c4 <__aeabi_fsub+0x334>)
    94fe:	000c      	movs	r4, r1
    9500:	4013      	ands	r3, r2
    9502:	e70b      	b.n	931c <__aeabi_fsub+0x8c>
    9504:	2c00      	cmp	r4, #0
    9506:	d11e      	bne.n	9546 <__aeabi_fsub+0x2b6>
    9508:	2b00      	cmp	r3, #0
    950a:	d12f      	bne.n	956c <__aeabi_fsub+0x2dc>
    950c:	2e00      	cmp	r6, #0
    950e:	d04f      	beq.n	95b0 <__aeabi_fsub+0x320>
    9510:	0033      	movs	r3, r6
    9512:	000d      	movs	r5, r1
    9514:	e702      	b.n	931c <__aeabi_fsub+0x8c>
    9516:	2601      	movs	r6, #1
    9518:	e755      	b.n	93c6 <__aeabi_fsub+0x136>
    951a:	2c00      	cmp	r4, #0
    951c:	d11f      	bne.n	955e <__aeabi_fsub+0x2ce>
    951e:	2b00      	cmp	r3, #0
    9520:	d043      	beq.n	95aa <__aeabi_fsub+0x31a>
    9522:	43c9      	mvns	r1, r1
    9524:	2900      	cmp	r1, #0
    9526:	d00b      	beq.n	9540 <__aeabi_fsub+0x2b0>
    9528:	28ff      	cmp	r0, #255	; 0xff
    952a:	d039      	beq.n	95a0 <__aeabi_fsub+0x310>
    952c:	291b      	cmp	r1, #27
    952e:	dc44      	bgt.n	95ba <__aeabi_fsub+0x32a>
    9530:	001c      	movs	r4, r3
    9532:	2720      	movs	r7, #32
    9534:	40cc      	lsrs	r4, r1
    9536:	1a79      	subs	r1, r7, r1
    9538:	408b      	lsls	r3, r1
    953a:	1e59      	subs	r1, r3, #1
    953c:	418b      	sbcs	r3, r1
    953e:	4323      	orrs	r3, r4
    9540:	199b      	adds	r3, r3, r6
    9542:	0004      	movs	r4, r0
    9544:	e740      	b.n	93c8 <__aeabi_fsub+0x138>
    9546:	2b00      	cmp	r3, #0
    9548:	d11a      	bne.n	9580 <__aeabi_fsub+0x2f0>
    954a:	2e00      	cmp	r6, #0
    954c:	d124      	bne.n	9598 <__aeabi_fsub+0x308>
    954e:	2780      	movs	r7, #128	; 0x80
    9550:	2200      	movs	r2, #0
    9552:	03ff      	lsls	r7, r7, #15
    9554:	e71b      	b.n	938e <__aeabi_fsub+0xfe>
    9556:	0033      	movs	r3, r6
    9558:	0004      	movs	r4, r0
    955a:	000d      	movs	r5, r1
    955c:	e6de      	b.n	931c <__aeabi_fsub+0x8c>
    955e:	28ff      	cmp	r0, #255	; 0xff
    9560:	d01e      	beq.n	95a0 <__aeabi_fsub+0x310>
    9562:	2480      	movs	r4, #128	; 0x80
    9564:	04e4      	lsls	r4, r4, #19
    9566:	4249      	negs	r1, r1
    9568:	4323      	orrs	r3, r4
    956a:	e7df      	b.n	952c <__aeabi_fsub+0x29c>
    956c:	2e00      	cmp	r6, #0
    956e:	d100      	bne.n	9572 <__aeabi_fsub+0x2e2>
    9570:	e6d4      	b.n	931c <__aeabi_fsub+0x8c>
    9572:	1b9f      	subs	r7, r3, r6
    9574:	017a      	lsls	r2, r7, #5
    9576:	d400      	bmi.n	957a <__aeabi_fsub+0x2ea>
    9578:	e737      	b.n	93ea <__aeabi_fsub+0x15a>
    957a:	1af3      	subs	r3, r6, r3
    957c:	000d      	movs	r5, r1
    957e:	e6cd      	b.n	931c <__aeabi_fsub+0x8c>
    9580:	24ff      	movs	r4, #255	; 0xff
    9582:	2e00      	cmp	r6, #0
    9584:	d100      	bne.n	9588 <__aeabi_fsub+0x2f8>
    9586:	e6c9      	b.n	931c <__aeabi_fsub+0x8c>
    9588:	2280      	movs	r2, #128	; 0x80
    958a:	4650      	mov	r0, sl
    958c:	03d2      	lsls	r2, r2, #15
    958e:	4210      	tst	r0, r2
    9590:	d0a4      	beq.n	94dc <__aeabi_fsub+0x24c>
    9592:	4660      	mov	r0, ip
    9594:	4210      	tst	r0, r2
    9596:	d1a1      	bne.n	94dc <__aeabi_fsub+0x24c>
    9598:	0033      	movs	r3, r6
    959a:	000d      	movs	r5, r1
    959c:	24ff      	movs	r4, #255	; 0xff
    959e:	e6bd      	b.n	931c <__aeabi_fsub+0x8c>
    95a0:	0033      	movs	r3, r6
    95a2:	24ff      	movs	r4, #255	; 0xff
    95a4:	e6ba      	b.n	931c <__aeabi_fsub+0x8c>
    95a6:	2301      	movs	r3, #1
    95a8:	e76e      	b.n	9488 <__aeabi_fsub+0x1f8>
    95aa:	0033      	movs	r3, r6
    95ac:	0004      	movs	r4, r0
    95ae:	e6b5      	b.n	931c <__aeabi_fsub+0x8c>
    95b0:	2700      	movs	r7, #0
    95b2:	2200      	movs	r2, #0
    95b4:	e71c      	b.n	93f0 <__aeabi_fsub+0x160>
    95b6:	0033      	movs	r3, r6
    95b8:	e6b0      	b.n	931c <__aeabi_fsub+0x8c>
    95ba:	2301      	movs	r3, #1
    95bc:	e7c0      	b.n	9540 <__aeabi_fsub+0x2b0>
    95be:	46c0      	nop			; (mov r8, r8)
    95c0:	7dffffff 	.word	0x7dffffff
    95c4:	fbffffff 	.word	0xfbffffff

000095c8 <__aeabi_f2iz>:
    95c8:	0241      	lsls	r1, r0, #9
    95ca:	0043      	lsls	r3, r0, #1
    95cc:	0fc2      	lsrs	r2, r0, #31
    95ce:	0a49      	lsrs	r1, r1, #9
    95d0:	0e1b      	lsrs	r3, r3, #24
    95d2:	2000      	movs	r0, #0
    95d4:	2b7e      	cmp	r3, #126	; 0x7e
    95d6:	dd0d      	ble.n	95f4 <__aeabi_f2iz+0x2c>
    95d8:	2b9d      	cmp	r3, #157	; 0x9d
    95da:	dc0c      	bgt.n	95f6 <__aeabi_f2iz+0x2e>
    95dc:	2080      	movs	r0, #128	; 0x80
    95de:	0400      	lsls	r0, r0, #16
    95e0:	4301      	orrs	r1, r0
    95e2:	2b95      	cmp	r3, #149	; 0x95
    95e4:	dc0a      	bgt.n	95fc <__aeabi_f2iz+0x34>
    95e6:	2096      	movs	r0, #150	; 0x96
    95e8:	1ac3      	subs	r3, r0, r3
    95ea:	40d9      	lsrs	r1, r3
    95ec:	4248      	negs	r0, r1
    95ee:	2a00      	cmp	r2, #0
    95f0:	d100      	bne.n	95f4 <__aeabi_f2iz+0x2c>
    95f2:	0008      	movs	r0, r1
    95f4:	4770      	bx	lr
    95f6:	4b03      	ldr	r3, [pc, #12]	; (9604 <__aeabi_f2iz+0x3c>)
    95f8:	18d0      	adds	r0, r2, r3
    95fa:	e7fb      	b.n	95f4 <__aeabi_f2iz+0x2c>
    95fc:	3b96      	subs	r3, #150	; 0x96
    95fe:	4099      	lsls	r1, r3
    9600:	e7f4      	b.n	95ec <__aeabi_f2iz+0x24>
    9602:	46c0      	nop			; (mov r8, r8)
    9604:	7fffffff 	.word	0x7fffffff

00009608 <__aeabi_i2f>:
    9608:	b570      	push	{r4, r5, r6, lr}
    960a:	2800      	cmp	r0, #0
    960c:	d030      	beq.n	9670 <__aeabi_i2f+0x68>
    960e:	17c3      	asrs	r3, r0, #31
    9610:	18c4      	adds	r4, r0, r3
    9612:	405c      	eors	r4, r3
    9614:	0fc5      	lsrs	r5, r0, #31
    9616:	0020      	movs	r0, r4
    9618:	f001 fe86 	bl	b328 <__clzsi2>
    961c:	239e      	movs	r3, #158	; 0x9e
    961e:	1a1b      	subs	r3, r3, r0
    9620:	2b96      	cmp	r3, #150	; 0x96
    9622:	dc0d      	bgt.n	9640 <__aeabi_i2f+0x38>
    9624:	2296      	movs	r2, #150	; 0x96
    9626:	1ad2      	subs	r2, r2, r3
    9628:	4094      	lsls	r4, r2
    962a:	002a      	movs	r2, r5
    962c:	0264      	lsls	r4, r4, #9
    962e:	0a64      	lsrs	r4, r4, #9
    9630:	b2db      	uxtb	r3, r3
    9632:	0264      	lsls	r4, r4, #9
    9634:	05db      	lsls	r3, r3, #23
    9636:	0a60      	lsrs	r0, r4, #9
    9638:	07d2      	lsls	r2, r2, #31
    963a:	4318      	orrs	r0, r3
    963c:	4310      	orrs	r0, r2
    963e:	bd70      	pop	{r4, r5, r6, pc}
    9640:	2b99      	cmp	r3, #153	; 0x99
    9642:	dc19      	bgt.n	9678 <__aeabi_i2f+0x70>
    9644:	2299      	movs	r2, #153	; 0x99
    9646:	1ad2      	subs	r2, r2, r3
    9648:	2a00      	cmp	r2, #0
    964a:	dd29      	ble.n	96a0 <__aeabi_i2f+0x98>
    964c:	4094      	lsls	r4, r2
    964e:	0022      	movs	r2, r4
    9650:	4c14      	ldr	r4, [pc, #80]	; (96a4 <__aeabi_i2f+0x9c>)
    9652:	4014      	ands	r4, r2
    9654:	0751      	lsls	r1, r2, #29
    9656:	d004      	beq.n	9662 <__aeabi_i2f+0x5a>
    9658:	210f      	movs	r1, #15
    965a:	400a      	ands	r2, r1
    965c:	2a04      	cmp	r2, #4
    965e:	d000      	beq.n	9662 <__aeabi_i2f+0x5a>
    9660:	3404      	adds	r4, #4
    9662:	0162      	lsls	r2, r4, #5
    9664:	d413      	bmi.n	968e <__aeabi_i2f+0x86>
    9666:	01a4      	lsls	r4, r4, #6
    9668:	0a64      	lsrs	r4, r4, #9
    966a:	b2db      	uxtb	r3, r3
    966c:	002a      	movs	r2, r5
    966e:	e7e0      	b.n	9632 <__aeabi_i2f+0x2a>
    9670:	2200      	movs	r2, #0
    9672:	2300      	movs	r3, #0
    9674:	2400      	movs	r4, #0
    9676:	e7dc      	b.n	9632 <__aeabi_i2f+0x2a>
    9678:	2205      	movs	r2, #5
    967a:	0021      	movs	r1, r4
    967c:	1a12      	subs	r2, r2, r0
    967e:	40d1      	lsrs	r1, r2
    9680:	22b9      	movs	r2, #185	; 0xb9
    9682:	1ad2      	subs	r2, r2, r3
    9684:	4094      	lsls	r4, r2
    9686:	1e62      	subs	r2, r4, #1
    9688:	4194      	sbcs	r4, r2
    968a:	430c      	orrs	r4, r1
    968c:	e7da      	b.n	9644 <__aeabi_i2f+0x3c>
    968e:	4b05      	ldr	r3, [pc, #20]	; (96a4 <__aeabi_i2f+0x9c>)
    9690:	002a      	movs	r2, r5
    9692:	401c      	ands	r4, r3
    9694:	239f      	movs	r3, #159	; 0x9f
    9696:	01a4      	lsls	r4, r4, #6
    9698:	1a1b      	subs	r3, r3, r0
    969a:	0a64      	lsrs	r4, r4, #9
    969c:	b2db      	uxtb	r3, r3
    969e:	e7c8      	b.n	9632 <__aeabi_i2f+0x2a>
    96a0:	0022      	movs	r2, r4
    96a2:	e7d5      	b.n	9650 <__aeabi_i2f+0x48>
    96a4:	fbffffff 	.word	0xfbffffff

000096a8 <__aeabi_ui2f>:
    96a8:	b510      	push	{r4, lr}
    96aa:	1e04      	subs	r4, r0, #0
    96ac:	d027      	beq.n	96fe <__aeabi_ui2f+0x56>
    96ae:	f001 fe3b 	bl	b328 <__clzsi2>
    96b2:	239e      	movs	r3, #158	; 0x9e
    96b4:	1a1b      	subs	r3, r3, r0
    96b6:	2b96      	cmp	r3, #150	; 0x96
    96b8:	dc0a      	bgt.n	96d0 <__aeabi_ui2f+0x28>
    96ba:	2296      	movs	r2, #150	; 0x96
    96bc:	1ad2      	subs	r2, r2, r3
    96be:	4094      	lsls	r4, r2
    96c0:	0264      	lsls	r4, r4, #9
    96c2:	0a64      	lsrs	r4, r4, #9
    96c4:	b2db      	uxtb	r3, r3
    96c6:	0264      	lsls	r4, r4, #9
    96c8:	05db      	lsls	r3, r3, #23
    96ca:	0a60      	lsrs	r0, r4, #9
    96cc:	4318      	orrs	r0, r3
    96ce:	bd10      	pop	{r4, pc}
    96d0:	2b99      	cmp	r3, #153	; 0x99
    96d2:	dc17      	bgt.n	9704 <__aeabi_ui2f+0x5c>
    96d4:	2299      	movs	r2, #153	; 0x99
    96d6:	1ad2      	subs	r2, r2, r3
    96d8:	2a00      	cmp	r2, #0
    96da:	dd27      	ble.n	972c <__aeabi_ui2f+0x84>
    96dc:	4094      	lsls	r4, r2
    96de:	0022      	movs	r2, r4
    96e0:	4c13      	ldr	r4, [pc, #76]	; (9730 <__aeabi_ui2f+0x88>)
    96e2:	4014      	ands	r4, r2
    96e4:	0751      	lsls	r1, r2, #29
    96e6:	d004      	beq.n	96f2 <__aeabi_ui2f+0x4a>
    96e8:	210f      	movs	r1, #15
    96ea:	400a      	ands	r2, r1
    96ec:	2a04      	cmp	r2, #4
    96ee:	d000      	beq.n	96f2 <__aeabi_ui2f+0x4a>
    96f0:	3404      	adds	r4, #4
    96f2:	0162      	lsls	r2, r4, #5
    96f4:	d412      	bmi.n	971c <__aeabi_ui2f+0x74>
    96f6:	01a4      	lsls	r4, r4, #6
    96f8:	0a64      	lsrs	r4, r4, #9
    96fa:	b2db      	uxtb	r3, r3
    96fc:	e7e3      	b.n	96c6 <__aeabi_ui2f+0x1e>
    96fe:	2300      	movs	r3, #0
    9700:	2400      	movs	r4, #0
    9702:	e7e0      	b.n	96c6 <__aeabi_ui2f+0x1e>
    9704:	22b9      	movs	r2, #185	; 0xb9
    9706:	0021      	movs	r1, r4
    9708:	1ad2      	subs	r2, r2, r3
    970a:	4091      	lsls	r1, r2
    970c:	000a      	movs	r2, r1
    970e:	1e51      	subs	r1, r2, #1
    9710:	418a      	sbcs	r2, r1
    9712:	2105      	movs	r1, #5
    9714:	1a09      	subs	r1, r1, r0
    9716:	40cc      	lsrs	r4, r1
    9718:	4314      	orrs	r4, r2
    971a:	e7db      	b.n	96d4 <__aeabi_ui2f+0x2c>
    971c:	4b04      	ldr	r3, [pc, #16]	; (9730 <__aeabi_ui2f+0x88>)
    971e:	401c      	ands	r4, r3
    9720:	239f      	movs	r3, #159	; 0x9f
    9722:	01a4      	lsls	r4, r4, #6
    9724:	1a1b      	subs	r3, r3, r0
    9726:	0a64      	lsrs	r4, r4, #9
    9728:	b2db      	uxtb	r3, r3
    972a:	e7cc      	b.n	96c6 <__aeabi_ui2f+0x1e>
    972c:	0022      	movs	r2, r4
    972e:	e7d7      	b.n	96e0 <__aeabi_ui2f+0x38>
    9730:	fbffffff 	.word	0xfbffffff

00009734 <__aeabi_dadd>:
    9734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9736:	4645      	mov	r5, r8
    9738:	46de      	mov	lr, fp
    973a:	4657      	mov	r7, sl
    973c:	464e      	mov	r6, r9
    973e:	030c      	lsls	r4, r1, #12
    9740:	b5e0      	push	{r5, r6, r7, lr}
    9742:	004e      	lsls	r6, r1, #1
    9744:	0fc9      	lsrs	r1, r1, #31
    9746:	4688      	mov	r8, r1
    9748:	000d      	movs	r5, r1
    974a:	0a61      	lsrs	r1, r4, #9
    974c:	0f44      	lsrs	r4, r0, #29
    974e:	430c      	orrs	r4, r1
    9750:	00c7      	lsls	r7, r0, #3
    9752:	0319      	lsls	r1, r3, #12
    9754:	0058      	lsls	r0, r3, #1
    9756:	0fdb      	lsrs	r3, r3, #31
    9758:	469b      	mov	fp, r3
    975a:	0a4b      	lsrs	r3, r1, #9
    975c:	0f51      	lsrs	r1, r2, #29
    975e:	430b      	orrs	r3, r1
    9760:	0d76      	lsrs	r6, r6, #21
    9762:	0d40      	lsrs	r0, r0, #21
    9764:	0019      	movs	r1, r3
    9766:	00d2      	lsls	r2, r2, #3
    9768:	45d8      	cmp	r8, fp
    976a:	d100      	bne.n	976e <__aeabi_dadd+0x3a>
    976c:	e0ae      	b.n	98cc <__aeabi_dadd+0x198>
    976e:	1a35      	subs	r5, r6, r0
    9770:	2d00      	cmp	r5, #0
    9772:	dc00      	bgt.n	9776 <__aeabi_dadd+0x42>
    9774:	e0f6      	b.n	9964 <__aeabi_dadd+0x230>
    9776:	2800      	cmp	r0, #0
    9778:	d10f      	bne.n	979a <__aeabi_dadd+0x66>
    977a:	4313      	orrs	r3, r2
    977c:	d100      	bne.n	9780 <__aeabi_dadd+0x4c>
    977e:	e0db      	b.n	9938 <__aeabi_dadd+0x204>
    9780:	1e6b      	subs	r3, r5, #1
    9782:	2b00      	cmp	r3, #0
    9784:	d000      	beq.n	9788 <__aeabi_dadd+0x54>
    9786:	e137      	b.n	99f8 <__aeabi_dadd+0x2c4>
    9788:	1aba      	subs	r2, r7, r2
    978a:	4297      	cmp	r7, r2
    978c:	41bf      	sbcs	r7, r7
    978e:	1a64      	subs	r4, r4, r1
    9790:	427f      	negs	r7, r7
    9792:	1be4      	subs	r4, r4, r7
    9794:	2601      	movs	r6, #1
    9796:	0017      	movs	r7, r2
    9798:	e024      	b.n	97e4 <__aeabi_dadd+0xb0>
    979a:	4bc6      	ldr	r3, [pc, #792]	; (9ab4 <__aeabi_dadd+0x380>)
    979c:	429e      	cmp	r6, r3
    979e:	d04d      	beq.n	983c <__aeabi_dadd+0x108>
    97a0:	2380      	movs	r3, #128	; 0x80
    97a2:	041b      	lsls	r3, r3, #16
    97a4:	4319      	orrs	r1, r3
    97a6:	2d38      	cmp	r5, #56	; 0x38
    97a8:	dd00      	ble.n	97ac <__aeabi_dadd+0x78>
    97aa:	e107      	b.n	99bc <__aeabi_dadd+0x288>
    97ac:	2d1f      	cmp	r5, #31
    97ae:	dd00      	ble.n	97b2 <__aeabi_dadd+0x7e>
    97b0:	e138      	b.n	9a24 <__aeabi_dadd+0x2f0>
    97b2:	2020      	movs	r0, #32
    97b4:	1b43      	subs	r3, r0, r5
    97b6:	469a      	mov	sl, r3
    97b8:	000b      	movs	r3, r1
    97ba:	4650      	mov	r0, sl
    97bc:	4083      	lsls	r3, r0
    97be:	4699      	mov	r9, r3
    97c0:	0013      	movs	r3, r2
    97c2:	4648      	mov	r0, r9
    97c4:	40eb      	lsrs	r3, r5
    97c6:	4318      	orrs	r0, r3
    97c8:	0003      	movs	r3, r0
    97ca:	4650      	mov	r0, sl
    97cc:	4082      	lsls	r2, r0
    97ce:	1e50      	subs	r0, r2, #1
    97d0:	4182      	sbcs	r2, r0
    97d2:	40e9      	lsrs	r1, r5
    97d4:	431a      	orrs	r2, r3
    97d6:	1aba      	subs	r2, r7, r2
    97d8:	1a61      	subs	r1, r4, r1
    97da:	4297      	cmp	r7, r2
    97dc:	41a4      	sbcs	r4, r4
    97de:	0017      	movs	r7, r2
    97e0:	4264      	negs	r4, r4
    97e2:	1b0c      	subs	r4, r1, r4
    97e4:	0223      	lsls	r3, r4, #8
    97e6:	d562      	bpl.n	98ae <__aeabi_dadd+0x17a>
    97e8:	0264      	lsls	r4, r4, #9
    97ea:	0a65      	lsrs	r5, r4, #9
    97ec:	2d00      	cmp	r5, #0
    97ee:	d100      	bne.n	97f2 <__aeabi_dadd+0xbe>
    97f0:	e0df      	b.n	99b2 <__aeabi_dadd+0x27e>
    97f2:	0028      	movs	r0, r5
    97f4:	f001 fd98 	bl	b328 <__clzsi2>
    97f8:	0003      	movs	r3, r0
    97fa:	3b08      	subs	r3, #8
    97fc:	2b1f      	cmp	r3, #31
    97fe:	dd00      	ble.n	9802 <__aeabi_dadd+0xce>
    9800:	e0d2      	b.n	99a8 <__aeabi_dadd+0x274>
    9802:	2220      	movs	r2, #32
    9804:	003c      	movs	r4, r7
    9806:	1ad2      	subs	r2, r2, r3
    9808:	409d      	lsls	r5, r3
    980a:	40d4      	lsrs	r4, r2
    980c:	409f      	lsls	r7, r3
    980e:	4325      	orrs	r5, r4
    9810:	429e      	cmp	r6, r3
    9812:	dd00      	ble.n	9816 <__aeabi_dadd+0xe2>
    9814:	e0c4      	b.n	99a0 <__aeabi_dadd+0x26c>
    9816:	1b9e      	subs	r6, r3, r6
    9818:	1c73      	adds	r3, r6, #1
    981a:	2b1f      	cmp	r3, #31
    981c:	dd00      	ble.n	9820 <__aeabi_dadd+0xec>
    981e:	e0f1      	b.n	9a04 <__aeabi_dadd+0x2d0>
    9820:	2220      	movs	r2, #32
    9822:	0038      	movs	r0, r7
    9824:	0029      	movs	r1, r5
    9826:	1ad2      	subs	r2, r2, r3
    9828:	40d8      	lsrs	r0, r3
    982a:	4091      	lsls	r1, r2
    982c:	4097      	lsls	r7, r2
    982e:	002c      	movs	r4, r5
    9830:	4301      	orrs	r1, r0
    9832:	1e78      	subs	r0, r7, #1
    9834:	4187      	sbcs	r7, r0
    9836:	40dc      	lsrs	r4, r3
    9838:	2600      	movs	r6, #0
    983a:	430f      	orrs	r7, r1
    983c:	077b      	lsls	r3, r7, #29
    983e:	d009      	beq.n	9854 <__aeabi_dadd+0x120>
    9840:	230f      	movs	r3, #15
    9842:	403b      	ands	r3, r7
    9844:	2b04      	cmp	r3, #4
    9846:	d005      	beq.n	9854 <__aeabi_dadd+0x120>
    9848:	1d3b      	adds	r3, r7, #4
    984a:	42bb      	cmp	r3, r7
    984c:	41bf      	sbcs	r7, r7
    984e:	427f      	negs	r7, r7
    9850:	19e4      	adds	r4, r4, r7
    9852:	001f      	movs	r7, r3
    9854:	0223      	lsls	r3, r4, #8
    9856:	d52c      	bpl.n	98b2 <__aeabi_dadd+0x17e>
    9858:	4b96      	ldr	r3, [pc, #600]	; (9ab4 <__aeabi_dadd+0x380>)
    985a:	3601      	adds	r6, #1
    985c:	429e      	cmp	r6, r3
    985e:	d100      	bne.n	9862 <__aeabi_dadd+0x12e>
    9860:	e09a      	b.n	9998 <__aeabi_dadd+0x264>
    9862:	4645      	mov	r5, r8
    9864:	4b94      	ldr	r3, [pc, #592]	; (9ab8 <__aeabi_dadd+0x384>)
    9866:	08ff      	lsrs	r7, r7, #3
    9868:	401c      	ands	r4, r3
    986a:	0760      	lsls	r0, r4, #29
    986c:	0576      	lsls	r6, r6, #21
    986e:	0264      	lsls	r4, r4, #9
    9870:	4307      	orrs	r7, r0
    9872:	0b24      	lsrs	r4, r4, #12
    9874:	0d76      	lsrs	r6, r6, #21
    9876:	2100      	movs	r1, #0
    9878:	0324      	lsls	r4, r4, #12
    987a:	0b23      	lsrs	r3, r4, #12
    987c:	0d0c      	lsrs	r4, r1, #20
    987e:	4a8f      	ldr	r2, [pc, #572]	; (9abc <__aeabi_dadd+0x388>)
    9880:	0524      	lsls	r4, r4, #20
    9882:	431c      	orrs	r4, r3
    9884:	4014      	ands	r4, r2
    9886:	0533      	lsls	r3, r6, #20
    9888:	4323      	orrs	r3, r4
    988a:	005b      	lsls	r3, r3, #1
    988c:	07ed      	lsls	r5, r5, #31
    988e:	085b      	lsrs	r3, r3, #1
    9890:	432b      	orrs	r3, r5
    9892:	0038      	movs	r0, r7
    9894:	0019      	movs	r1, r3
    9896:	bc3c      	pop	{r2, r3, r4, r5}
    9898:	4690      	mov	r8, r2
    989a:	4699      	mov	r9, r3
    989c:	46a2      	mov	sl, r4
    989e:	46ab      	mov	fp, r5
    98a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98a2:	4664      	mov	r4, ip
    98a4:	4304      	orrs	r4, r0
    98a6:	d100      	bne.n	98aa <__aeabi_dadd+0x176>
    98a8:	e211      	b.n	9cce <__aeabi_dadd+0x59a>
    98aa:	0004      	movs	r4, r0
    98ac:	4667      	mov	r7, ip
    98ae:	077b      	lsls	r3, r7, #29
    98b0:	d1c6      	bne.n	9840 <__aeabi_dadd+0x10c>
    98b2:	4645      	mov	r5, r8
    98b4:	0760      	lsls	r0, r4, #29
    98b6:	08ff      	lsrs	r7, r7, #3
    98b8:	4307      	orrs	r7, r0
    98ba:	08e4      	lsrs	r4, r4, #3
    98bc:	4b7d      	ldr	r3, [pc, #500]	; (9ab4 <__aeabi_dadd+0x380>)
    98be:	429e      	cmp	r6, r3
    98c0:	d030      	beq.n	9924 <__aeabi_dadd+0x1f0>
    98c2:	0324      	lsls	r4, r4, #12
    98c4:	0576      	lsls	r6, r6, #21
    98c6:	0b24      	lsrs	r4, r4, #12
    98c8:	0d76      	lsrs	r6, r6, #21
    98ca:	e7d4      	b.n	9876 <__aeabi_dadd+0x142>
    98cc:	1a33      	subs	r3, r6, r0
    98ce:	469a      	mov	sl, r3
    98d0:	2b00      	cmp	r3, #0
    98d2:	dd78      	ble.n	99c6 <__aeabi_dadd+0x292>
    98d4:	2800      	cmp	r0, #0
    98d6:	d031      	beq.n	993c <__aeabi_dadd+0x208>
    98d8:	4876      	ldr	r0, [pc, #472]	; (9ab4 <__aeabi_dadd+0x380>)
    98da:	4286      	cmp	r6, r0
    98dc:	d0ae      	beq.n	983c <__aeabi_dadd+0x108>
    98de:	2080      	movs	r0, #128	; 0x80
    98e0:	0400      	lsls	r0, r0, #16
    98e2:	4301      	orrs	r1, r0
    98e4:	4653      	mov	r3, sl
    98e6:	2b38      	cmp	r3, #56	; 0x38
    98e8:	dc00      	bgt.n	98ec <__aeabi_dadd+0x1b8>
    98ea:	e0e9      	b.n	9ac0 <__aeabi_dadd+0x38c>
    98ec:	430a      	orrs	r2, r1
    98ee:	1e51      	subs	r1, r2, #1
    98f0:	418a      	sbcs	r2, r1
    98f2:	2100      	movs	r1, #0
    98f4:	19d2      	adds	r2, r2, r7
    98f6:	42ba      	cmp	r2, r7
    98f8:	41bf      	sbcs	r7, r7
    98fa:	1909      	adds	r1, r1, r4
    98fc:	427c      	negs	r4, r7
    98fe:	0017      	movs	r7, r2
    9900:	190c      	adds	r4, r1, r4
    9902:	0223      	lsls	r3, r4, #8
    9904:	d5d3      	bpl.n	98ae <__aeabi_dadd+0x17a>
    9906:	4b6b      	ldr	r3, [pc, #428]	; (9ab4 <__aeabi_dadd+0x380>)
    9908:	3601      	adds	r6, #1
    990a:	429e      	cmp	r6, r3
    990c:	d100      	bne.n	9910 <__aeabi_dadd+0x1dc>
    990e:	e13a      	b.n	9b86 <__aeabi_dadd+0x452>
    9910:	2001      	movs	r0, #1
    9912:	4b69      	ldr	r3, [pc, #420]	; (9ab8 <__aeabi_dadd+0x384>)
    9914:	401c      	ands	r4, r3
    9916:	087b      	lsrs	r3, r7, #1
    9918:	4007      	ands	r7, r0
    991a:	431f      	orrs	r7, r3
    991c:	07e0      	lsls	r0, r4, #31
    991e:	4307      	orrs	r7, r0
    9920:	0864      	lsrs	r4, r4, #1
    9922:	e78b      	b.n	983c <__aeabi_dadd+0x108>
    9924:	0023      	movs	r3, r4
    9926:	433b      	orrs	r3, r7
    9928:	d100      	bne.n	992c <__aeabi_dadd+0x1f8>
    992a:	e1cb      	b.n	9cc4 <__aeabi_dadd+0x590>
    992c:	2280      	movs	r2, #128	; 0x80
    992e:	0312      	lsls	r2, r2, #12
    9930:	4314      	orrs	r4, r2
    9932:	0324      	lsls	r4, r4, #12
    9934:	0b24      	lsrs	r4, r4, #12
    9936:	e79e      	b.n	9876 <__aeabi_dadd+0x142>
    9938:	002e      	movs	r6, r5
    993a:	e77f      	b.n	983c <__aeabi_dadd+0x108>
    993c:	0008      	movs	r0, r1
    993e:	4310      	orrs	r0, r2
    9940:	d100      	bne.n	9944 <__aeabi_dadd+0x210>
    9942:	e0b4      	b.n	9aae <__aeabi_dadd+0x37a>
    9944:	1e58      	subs	r0, r3, #1
    9946:	2800      	cmp	r0, #0
    9948:	d000      	beq.n	994c <__aeabi_dadd+0x218>
    994a:	e0de      	b.n	9b0a <__aeabi_dadd+0x3d6>
    994c:	18ba      	adds	r2, r7, r2
    994e:	42ba      	cmp	r2, r7
    9950:	419b      	sbcs	r3, r3
    9952:	1864      	adds	r4, r4, r1
    9954:	425b      	negs	r3, r3
    9956:	18e4      	adds	r4, r4, r3
    9958:	0017      	movs	r7, r2
    995a:	2601      	movs	r6, #1
    995c:	0223      	lsls	r3, r4, #8
    995e:	d5a6      	bpl.n	98ae <__aeabi_dadd+0x17a>
    9960:	2602      	movs	r6, #2
    9962:	e7d5      	b.n	9910 <__aeabi_dadd+0x1dc>
    9964:	2d00      	cmp	r5, #0
    9966:	d16e      	bne.n	9a46 <__aeabi_dadd+0x312>
    9968:	1c70      	adds	r0, r6, #1
    996a:	0540      	lsls	r0, r0, #21
    996c:	0d40      	lsrs	r0, r0, #21
    996e:	2801      	cmp	r0, #1
    9970:	dc00      	bgt.n	9974 <__aeabi_dadd+0x240>
    9972:	e0f9      	b.n	9b68 <__aeabi_dadd+0x434>
    9974:	1ab8      	subs	r0, r7, r2
    9976:	4684      	mov	ip, r0
    9978:	4287      	cmp	r7, r0
    997a:	4180      	sbcs	r0, r0
    997c:	1ae5      	subs	r5, r4, r3
    997e:	4240      	negs	r0, r0
    9980:	1a2d      	subs	r5, r5, r0
    9982:	0228      	lsls	r0, r5, #8
    9984:	d400      	bmi.n	9988 <__aeabi_dadd+0x254>
    9986:	e089      	b.n	9a9c <__aeabi_dadd+0x368>
    9988:	1bd7      	subs	r7, r2, r7
    998a:	42ba      	cmp	r2, r7
    998c:	4192      	sbcs	r2, r2
    998e:	1b1c      	subs	r4, r3, r4
    9990:	4252      	negs	r2, r2
    9992:	1aa5      	subs	r5, r4, r2
    9994:	46d8      	mov	r8, fp
    9996:	e729      	b.n	97ec <__aeabi_dadd+0xb8>
    9998:	4645      	mov	r5, r8
    999a:	2400      	movs	r4, #0
    999c:	2700      	movs	r7, #0
    999e:	e76a      	b.n	9876 <__aeabi_dadd+0x142>
    99a0:	4c45      	ldr	r4, [pc, #276]	; (9ab8 <__aeabi_dadd+0x384>)
    99a2:	1af6      	subs	r6, r6, r3
    99a4:	402c      	ands	r4, r5
    99a6:	e749      	b.n	983c <__aeabi_dadd+0x108>
    99a8:	003d      	movs	r5, r7
    99aa:	3828      	subs	r0, #40	; 0x28
    99ac:	4085      	lsls	r5, r0
    99ae:	2700      	movs	r7, #0
    99b0:	e72e      	b.n	9810 <__aeabi_dadd+0xdc>
    99b2:	0038      	movs	r0, r7
    99b4:	f001 fcb8 	bl	b328 <__clzsi2>
    99b8:	3020      	adds	r0, #32
    99ba:	e71d      	b.n	97f8 <__aeabi_dadd+0xc4>
    99bc:	430a      	orrs	r2, r1
    99be:	1e51      	subs	r1, r2, #1
    99c0:	418a      	sbcs	r2, r1
    99c2:	2100      	movs	r1, #0
    99c4:	e707      	b.n	97d6 <__aeabi_dadd+0xa2>
    99c6:	2b00      	cmp	r3, #0
    99c8:	d000      	beq.n	99cc <__aeabi_dadd+0x298>
    99ca:	e0f3      	b.n	9bb4 <__aeabi_dadd+0x480>
    99cc:	1c70      	adds	r0, r6, #1
    99ce:	0543      	lsls	r3, r0, #21
    99d0:	0d5b      	lsrs	r3, r3, #21
    99d2:	2b01      	cmp	r3, #1
    99d4:	dc00      	bgt.n	99d8 <__aeabi_dadd+0x2a4>
    99d6:	e0ad      	b.n	9b34 <__aeabi_dadd+0x400>
    99d8:	4b36      	ldr	r3, [pc, #216]	; (9ab4 <__aeabi_dadd+0x380>)
    99da:	4298      	cmp	r0, r3
    99dc:	d100      	bne.n	99e0 <__aeabi_dadd+0x2ac>
    99de:	e0d1      	b.n	9b84 <__aeabi_dadd+0x450>
    99e0:	18ba      	adds	r2, r7, r2
    99e2:	42ba      	cmp	r2, r7
    99e4:	41bf      	sbcs	r7, r7
    99e6:	1864      	adds	r4, r4, r1
    99e8:	427f      	negs	r7, r7
    99ea:	19e4      	adds	r4, r4, r7
    99ec:	07e7      	lsls	r7, r4, #31
    99ee:	0852      	lsrs	r2, r2, #1
    99f0:	4317      	orrs	r7, r2
    99f2:	0864      	lsrs	r4, r4, #1
    99f4:	0006      	movs	r6, r0
    99f6:	e721      	b.n	983c <__aeabi_dadd+0x108>
    99f8:	482e      	ldr	r0, [pc, #184]	; (9ab4 <__aeabi_dadd+0x380>)
    99fa:	4285      	cmp	r5, r0
    99fc:	d100      	bne.n	9a00 <__aeabi_dadd+0x2cc>
    99fe:	e093      	b.n	9b28 <__aeabi_dadd+0x3f4>
    9a00:	001d      	movs	r5, r3
    9a02:	e6d0      	b.n	97a6 <__aeabi_dadd+0x72>
    9a04:	0029      	movs	r1, r5
    9a06:	3e1f      	subs	r6, #31
    9a08:	40f1      	lsrs	r1, r6
    9a0a:	2b20      	cmp	r3, #32
    9a0c:	d100      	bne.n	9a10 <__aeabi_dadd+0x2dc>
    9a0e:	e08d      	b.n	9b2c <__aeabi_dadd+0x3f8>
    9a10:	2240      	movs	r2, #64	; 0x40
    9a12:	1ad3      	subs	r3, r2, r3
    9a14:	409d      	lsls	r5, r3
    9a16:	432f      	orrs	r7, r5
    9a18:	1e7d      	subs	r5, r7, #1
    9a1a:	41af      	sbcs	r7, r5
    9a1c:	2400      	movs	r4, #0
    9a1e:	430f      	orrs	r7, r1
    9a20:	2600      	movs	r6, #0
    9a22:	e744      	b.n	98ae <__aeabi_dadd+0x17a>
    9a24:	002b      	movs	r3, r5
    9a26:	0008      	movs	r0, r1
    9a28:	3b20      	subs	r3, #32
    9a2a:	40d8      	lsrs	r0, r3
    9a2c:	0003      	movs	r3, r0
    9a2e:	2d20      	cmp	r5, #32
    9a30:	d100      	bne.n	9a34 <__aeabi_dadd+0x300>
    9a32:	e07d      	b.n	9b30 <__aeabi_dadd+0x3fc>
    9a34:	2040      	movs	r0, #64	; 0x40
    9a36:	1b45      	subs	r5, r0, r5
    9a38:	40a9      	lsls	r1, r5
    9a3a:	430a      	orrs	r2, r1
    9a3c:	1e51      	subs	r1, r2, #1
    9a3e:	418a      	sbcs	r2, r1
    9a40:	2100      	movs	r1, #0
    9a42:	431a      	orrs	r2, r3
    9a44:	e6c7      	b.n	97d6 <__aeabi_dadd+0xa2>
    9a46:	2e00      	cmp	r6, #0
    9a48:	d050      	beq.n	9aec <__aeabi_dadd+0x3b8>
    9a4a:	4e1a      	ldr	r6, [pc, #104]	; (9ab4 <__aeabi_dadd+0x380>)
    9a4c:	42b0      	cmp	r0, r6
    9a4e:	d057      	beq.n	9b00 <__aeabi_dadd+0x3cc>
    9a50:	2680      	movs	r6, #128	; 0x80
    9a52:	426b      	negs	r3, r5
    9a54:	4699      	mov	r9, r3
    9a56:	0436      	lsls	r6, r6, #16
    9a58:	4334      	orrs	r4, r6
    9a5a:	464b      	mov	r3, r9
    9a5c:	2b38      	cmp	r3, #56	; 0x38
    9a5e:	dd00      	ble.n	9a62 <__aeabi_dadd+0x32e>
    9a60:	e0d6      	b.n	9c10 <__aeabi_dadd+0x4dc>
    9a62:	2b1f      	cmp	r3, #31
    9a64:	dd00      	ble.n	9a68 <__aeabi_dadd+0x334>
    9a66:	e135      	b.n	9cd4 <__aeabi_dadd+0x5a0>
    9a68:	2620      	movs	r6, #32
    9a6a:	1af5      	subs	r5, r6, r3
    9a6c:	0026      	movs	r6, r4
    9a6e:	40ae      	lsls	r6, r5
    9a70:	46b2      	mov	sl, r6
    9a72:	003e      	movs	r6, r7
    9a74:	40de      	lsrs	r6, r3
    9a76:	46ac      	mov	ip, r5
    9a78:	0035      	movs	r5, r6
    9a7a:	4656      	mov	r6, sl
    9a7c:	432e      	orrs	r6, r5
    9a7e:	4665      	mov	r5, ip
    9a80:	40af      	lsls	r7, r5
    9a82:	1e7d      	subs	r5, r7, #1
    9a84:	41af      	sbcs	r7, r5
    9a86:	40dc      	lsrs	r4, r3
    9a88:	4337      	orrs	r7, r6
    9a8a:	1bd7      	subs	r7, r2, r7
    9a8c:	42ba      	cmp	r2, r7
    9a8e:	4192      	sbcs	r2, r2
    9a90:	1b0c      	subs	r4, r1, r4
    9a92:	4252      	negs	r2, r2
    9a94:	1aa4      	subs	r4, r4, r2
    9a96:	0006      	movs	r6, r0
    9a98:	46d8      	mov	r8, fp
    9a9a:	e6a3      	b.n	97e4 <__aeabi_dadd+0xb0>
    9a9c:	4664      	mov	r4, ip
    9a9e:	4667      	mov	r7, ip
    9aa0:	432c      	orrs	r4, r5
    9aa2:	d000      	beq.n	9aa6 <__aeabi_dadd+0x372>
    9aa4:	e6a2      	b.n	97ec <__aeabi_dadd+0xb8>
    9aa6:	2500      	movs	r5, #0
    9aa8:	2600      	movs	r6, #0
    9aaa:	2700      	movs	r7, #0
    9aac:	e706      	b.n	98bc <__aeabi_dadd+0x188>
    9aae:	001e      	movs	r6, r3
    9ab0:	e6c4      	b.n	983c <__aeabi_dadd+0x108>
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	000007ff 	.word	0x000007ff
    9ab8:	ff7fffff 	.word	0xff7fffff
    9abc:	800fffff 	.word	0x800fffff
    9ac0:	2b1f      	cmp	r3, #31
    9ac2:	dc63      	bgt.n	9b8c <__aeabi_dadd+0x458>
    9ac4:	2020      	movs	r0, #32
    9ac6:	1ac3      	subs	r3, r0, r3
    9ac8:	0008      	movs	r0, r1
    9aca:	4098      	lsls	r0, r3
    9acc:	469c      	mov	ip, r3
    9ace:	4683      	mov	fp, r0
    9ad0:	4653      	mov	r3, sl
    9ad2:	0010      	movs	r0, r2
    9ad4:	40d8      	lsrs	r0, r3
    9ad6:	0003      	movs	r3, r0
    9ad8:	4658      	mov	r0, fp
    9ada:	4318      	orrs	r0, r3
    9adc:	4663      	mov	r3, ip
    9ade:	409a      	lsls	r2, r3
    9ae0:	1e53      	subs	r3, r2, #1
    9ae2:	419a      	sbcs	r2, r3
    9ae4:	4653      	mov	r3, sl
    9ae6:	4302      	orrs	r2, r0
    9ae8:	40d9      	lsrs	r1, r3
    9aea:	e703      	b.n	98f4 <__aeabi_dadd+0x1c0>
    9aec:	0026      	movs	r6, r4
    9aee:	433e      	orrs	r6, r7
    9af0:	d006      	beq.n	9b00 <__aeabi_dadd+0x3cc>
    9af2:	43eb      	mvns	r3, r5
    9af4:	4699      	mov	r9, r3
    9af6:	2b00      	cmp	r3, #0
    9af8:	d0c7      	beq.n	9a8a <__aeabi_dadd+0x356>
    9afa:	4e94      	ldr	r6, [pc, #592]	; (9d4c <__aeabi_dadd+0x618>)
    9afc:	42b0      	cmp	r0, r6
    9afe:	d1ac      	bne.n	9a5a <__aeabi_dadd+0x326>
    9b00:	000c      	movs	r4, r1
    9b02:	0017      	movs	r7, r2
    9b04:	0006      	movs	r6, r0
    9b06:	46d8      	mov	r8, fp
    9b08:	e698      	b.n	983c <__aeabi_dadd+0x108>
    9b0a:	4b90      	ldr	r3, [pc, #576]	; (9d4c <__aeabi_dadd+0x618>)
    9b0c:	459a      	cmp	sl, r3
    9b0e:	d00b      	beq.n	9b28 <__aeabi_dadd+0x3f4>
    9b10:	4682      	mov	sl, r0
    9b12:	e6e7      	b.n	98e4 <__aeabi_dadd+0x1b0>
    9b14:	2800      	cmp	r0, #0
    9b16:	d000      	beq.n	9b1a <__aeabi_dadd+0x3e6>
    9b18:	e09e      	b.n	9c58 <__aeabi_dadd+0x524>
    9b1a:	0018      	movs	r0, r3
    9b1c:	4310      	orrs	r0, r2
    9b1e:	d100      	bne.n	9b22 <__aeabi_dadd+0x3ee>
    9b20:	e0e9      	b.n	9cf6 <__aeabi_dadd+0x5c2>
    9b22:	001c      	movs	r4, r3
    9b24:	0017      	movs	r7, r2
    9b26:	46d8      	mov	r8, fp
    9b28:	4e88      	ldr	r6, [pc, #544]	; (9d4c <__aeabi_dadd+0x618>)
    9b2a:	e687      	b.n	983c <__aeabi_dadd+0x108>
    9b2c:	2500      	movs	r5, #0
    9b2e:	e772      	b.n	9a16 <__aeabi_dadd+0x2e2>
    9b30:	2100      	movs	r1, #0
    9b32:	e782      	b.n	9a3a <__aeabi_dadd+0x306>
    9b34:	0023      	movs	r3, r4
    9b36:	433b      	orrs	r3, r7
    9b38:	2e00      	cmp	r6, #0
    9b3a:	d000      	beq.n	9b3e <__aeabi_dadd+0x40a>
    9b3c:	e0ab      	b.n	9c96 <__aeabi_dadd+0x562>
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d100      	bne.n	9b44 <__aeabi_dadd+0x410>
    9b42:	e0e7      	b.n	9d14 <__aeabi_dadd+0x5e0>
    9b44:	000b      	movs	r3, r1
    9b46:	4313      	orrs	r3, r2
    9b48:	d100      	bne.n	9b4c <__aeabi_dadd+0x418>
    9b4a:	e677      	b.n	983c <__aeabi_dadd+0x108>
    9b4c:	18ba      	adds	r2, r7, r2
    9b4e:	42ba      	cmp	r2, r7
    9b50:	41bf      	sbcs	r7, r7
    9b52:	1864      	adds	r4, r4, r1
    9b54:	427f      	negs	r7, r7
    9b56:	19e4      	adds	r4, r4, r7
    9b58:	0223      	lsls	r3, r4, #8
    9b5a:	d400      	bmi.n	9b5e <__aeabi_dadd+0x42a>
    9b5c:	e0f2      	b.n	9d44 <__aeabi_dadd+0x610>
    9b5e:	4b7c      	ldr	r3, [pc, #496]	; (9d50 <__aeabi_dadd+0x61c>)
    9b60:	0017      	movs	r7, r2
    9b62:	401c      	ands	r4, r3
    9b64:	0006      	movs	r6, r0
    9b66:	e669      	b.n	983c <__aeabi_dadd+0x108>
    9b68:	0020      	movs	r0, r4
    9b6a:	4338      	orrs	r0, r7
    9b6c:	2e00      	cmp	r6, #0
    9b6e:	d1d1      	bne.n	9b14 <__aeabi_dadd+0x3e0>
    9b70:	2800      	cmp	r0, #0
    9b72:	d15b      	bne.n	9c2c <__aeabi_dadd+0x4f8>
    9b74:	001c      	movs	r4, r3
    9b76:	4314      	orrs	r4, r2
    9b78:	d100      	bne.n	9b7c <__aeabi_dadd+0x448>
    9b7a:	e0a8      	b.n	9cce <__aeabi_dadd+0x59a>
    9b7c:	001c      	movs	r4, r3
    9b7e:	0017      	movs	r7, r2
    9b80:	46d8      	mov	r8, fp
    9b82:	e65b      	b.n	983c <__aeabi_dadd+0x108>
    9b84:	0006      	movs	r6, r0
    9b86:	2400      	movs	r4, #0
    9b88:	2700      	movs	r7, #0
    9b8a:	e697      	b.n	98bc <__aeabi_dadd+0x188>
    9b8c:	4650      	mov	r0, sl
    9b8e:	000b      	movs	r3, r1
    9b90:	3820      	subs	r0, #32
    9b92:	40c3      	lsrs	r3, r0
    9b94:	4699      	mov	r9, r3
    9b96:	4653      	mov	r3, sl
    9b98:	2b20      	cmp	r3, #32
    9b9a:	d100      	bne.n	9b9e <__aeabi_dadd+0x46a>
    9b9c:	e095      	b.n	9cca <__aeabi_dadd+0x596>
    9b9e:	2340      	movs	r3, #64	; 0x40
    9ba0:	4650      	mov	r0, sl
    9ba2:	1a1b      	subs	r3, r3, r0
    9ba4:	4099      	lsls	r1, r3
    9ba6:	430a      	orrs	r2, r1
    9ba8:	1e51      	subs	r1, r2, #1
    9baa:	418a      	sbcs	r2, r1
    9bac:	464b      	mov	r3, r9
    9bae:	2100      	movs	r1, #0
    9bb0:	431a      	orrs	r2, r3
    9bb2:	e69f      	b.n	98f4 <__aeabi_dadd+0x1c0>
    9bb4:	2e00      	cmp	r6, #0
    9bb6:	d130      	bne.n	9c1a <__aeabi_dadd+0x4e6>
    9bb8:	0026      	movs	r6, r4
    9bba:	433e      	orrs	r6, r7
    9bbc:	d067      	beq.n	9c8e <__aeabi_dadd+0x55a>
    9bbe:	43db      	mvns	r3, r3
    9bc0:	469a      	mov	sl, r3
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	d01c      	beq.n	9c00 <__aeabi_dadd+0x4cc>
    9bc6:	4e61      	ldr	r6, [pc, #388]	; (9d4c <__aeabi_dadd+0x618>)
    9bc8:	42b0      	cmp	r0, r6
    9bca:	d060      	beq.n	9c8e <__aeabi_dadd+0x55a>
    9bcc:	4653      	mov	r3, sl
    9bce:	2b38      	cmp	r3, #56	; 0x38
    9bd0:	dd00      	ble.n	9bd4 <__aeabi_dadd+0x4a0>
    9bd2:	e096      	b.n	9d02 <__aeabi_dadd+0x5ce>
    9bd4:	2b1f      	cmp	r3, #31
    9bd6:	dd00      	ble.n	9bda <__aeabi_dadd+0x4a6>
    9bd8:	e09f      	b.n	9d1a <__aeabi_dadd+0x5e6>
    9bda:	2620      	movs	r6, #32
    9bdc:	1af3      	subs	r3, r6, r3
    9bde:	0026      	movs	r6, r4
    9be0:	409e      	lsls	r6, r3
    9be2:	469c      	mov	ip, r3
    9be4:	46b3      	mov	fp, r6
    9be6:	4653      	mov	r3, sl
    9be8:	003e      	movs	r6, r7
    9bea:	40de      	lsrs	r6, r3
    9bec:	0033      	movs	r3, r6
    9bee:	465e      	mov	r6, fp
    9bf0:	431e      	orrs	r6, r3
    9bf2:	4663      	mov	r3, ip
    9bf4:	409f      	lsls	r7, r3
    9bf6:	1e7b      	subs	r3, r7, #1
    9bf8:	419f      	sbcs	r7, r3
    9bfa:	4653      	mov	r3, sl
    9bfc:	40dc      	lsrs	r4, r3
    9bfe:	4337      	orrs	r7, r6
    9c00:	18bf      	adds	r7, r7, r2
    9c02:	4297      	cmp	r7, r2
    9c04:	4192      	sbcs	r2, r2
    9c06:	1864      	adds	r4, r4, r1
    9c08:	4252      	negs	r2, r2
    9c0a:	18a4      	adds	r4, r4, r2
    9c0c:	0006      	movs	r6, r0
    9c0e:	e678      	b.n	9902 <__aeabi_dadd+0x1ce>
    9c10:	4327      	orrs	r7, r4
    9c12:	1e7c      	subs	r4, r7, #1
    9c14:	41a7      	sbcs	r7, r4
    9c16:	2400      	movs	r4, #0
    9c18:	e737      	b.n	9a8a <__aeabi_dadd+0x356>
    9c1a:	4e4c      	ldr	r6, [pc, #304]	; (9d4c <__aeabi_dadd+0x618>)
    9c1c:	42b0      	cmp	r0, r6
    9c1e:	d036      	beq.n	9c8e <__aeabi_dadd+0x55a>
    9c20:	2680      	movs	r6, #128	; 0x80
    9c22:	425b      	negs	r3, r3
    9c24:	0436      	lsls	r6, r6, #16
    9c26:	469a      	mov	sl, r3
    9c28:	4334      	orrs	r4, r6
    9c2a:	e7cf      	b.n	9bcc <__aeabi_dadd+0x498>
    9c2c:	0018      	movs	r0, r3
    9c2e:	4310      	orrs	r0, r2
    9c30:	d100      	bne.n	9c34 <__aeabi_dadd+0x500>
    9c32:	e603      	b.n	983c <__aeabi_dadd+0x108>
    9c34:	1ab8      	subs	r0, r7, r2
    9c36:	4684      	mov	ip, r0
    9c38:	4567      	cmp	r7, ip
    9c3a:	41ad      	sbcs	r5, r5
    9c3c:	1ae0      	subs	r0, r4, r3
    9c3e:	426d      	negs	r5, r5
    9c40:	1b40      	subs	r0, r0, r5
    9c42:	0205      	lsls	r5, r0, #8
    9c44:	d400      	bmi.n	9c48 <__aeabi_dadd+0x514>
    9c46:	e62c      	b.n	98a2 <__aeabi_dadd+0x16e>
    9c48:	1bd7      	subs	r7, r2, r7
    9c4a:	42ba      	cmp	r2, r7
    9c4c:	4192      	sbcs	r2, r2
    9c4e:	1b1c      	subs	r4, r3, r4
    9c50:	4252      	negs	r2, r2
    9c52:	1aa4      	subs	r4, r4, r2
    9c54:	46d8      	mov	r8, fp
    9c56:	e5f1      	b.n	983c <__aeabi_dadd+0x108>
    9c58:	0018      	movs	r0, r3
    9c5a:	4310      	orrs	r0, r2
    9c5c:	d100      	bne.n	9c60 <__aeabi_dadd+0x52c>
    9c5e:	e763      	b.n	9b28 <__aeabi_dadd+0x3f4>
    9c60:	08f8      	lsrs	r0, r7, #3
    9c62:	0767      	lsls	r7, r4, #29
    9c64:	4307      	orrs	r7, r0
    9c66:	2080      	movs	r0, #128	; 0x80
    9c68:	08e4      	lsrs	r4, r4, #3
    9c6a:	0300      	lsls	r0, r0, #12
    9c6c:	4204      	tst	r4, r0
    9c6e:	d008      	beq.n	9c82 <__aeabi_dadd+0x54e>
    9c70:	08dd      	lsrs	r5, r3, #3
    9c72:	4205      	tst	r5, r0
    9c74:	d105      	bne.n	9c82 <__aeabi_dadd+0x54e>
    9c76:	08d2      	lsrs	r2, r2, #3
    9c78:	0759      	lsls	r1, r3, #29
    9c7a:	4311      	orrs	r1, r2
    9c7c:	000f      	movs	r7, r1
    9c7e:	002c      	movs	r4, r5
    9c80:	46d8      	mov	r8, fp
    9c82:	0f7b      	lsrs	r3, r7, #29
    9c84:	00e4      	lsls	r4, r4, #3
    9c86:	431c      	orrs	r4, r3
    9c88:	00ff      	lsls	r7, r7, #3
    9c8a:	4e30      	ldr	r6, [pc, #192]	; (9d4c <__aeabi_dadd+0x618>)
    9c8c:	e5d6      	b.n	983c <__aeabi_dadd+0x108>
    9c8e:	000c      	movs	r4, r1
    9c90:	0017      	movs	r7, r2
    9c92:	0006      	movs	r6, r0
    9c94:	e5d2      	b.n	983c <__aeabi_dadd+0x108>
    9c96:	2b00      	cmp	r3, #0
    9c98:	d038      	beq.n	9d0c <__aeabi_dadd+0x5d8>
    9c9a:	000b      	movs	r3, r1
    9c9c:	4313      	orrs	r3, r2
    9c9e:	d100      	bne.n	9ca2 <__aeabi_dadd+0x56e>
    9ca0:	e742      	b.n	9b28 <__aeabi_dadd+0x3f4>
    9ca2:	08f8      	lsrs	r0, r7, #3
    9ca4:	0767      	lsls	r7, r4, #29
    9ca6:	4307      	orrs	r7, r0
    9ca8:	2080      	movs	r0, #128	; 0x80
    9caa:	08e4      	lsrs	r4, r4, #3
    9cac:	0300      	lsls	r0, r0, #12
    9cae:	4204      	tst	r4, r0
    9cb0:	d0e7      	beq.n	9c82 <__aeabi_dadd+0x54e>
    9cb2:	08cb      	lsrs	r3, r1, #3
    9cb4:	4203      	tst	r3, r0
    9cb6:	d1e4      	bne.n	9c82 <__aeabi_dadd+0x54e>
    9cb8:	08d2      	lsrs	r2, r2, #3
    9cba:	0749      	lsls	r1, r1, #29
    9cbc:	4311      	orrs	r1, r2
    9cbe:	000f      	movs	r7, r1
    9cc0:	001c      	movs	r4, r3
    9cc2:	e7de      	b.n	9c82 <__aeabi_dadd+0x54e>
    9cc4:	2700      	movs	r7, #0
    9cc6:	2400      	movs	r4, #0
    9cc8:	e5d5      	b.n	9876 <__aeabi_dadd+0x142>
    9cca:	2100      	movs	r1, #0
    9ccc:	e76b      	b.n	9ba6 <__aeabi_dadd+0x472>
    9cce:	2500      	movs	r5, #0
    9cd0:	2700      	movs	r7, #0
    9cd2:	e5f3      	b.n	98bc <__aeabi_dadd+0x188>
    9cd4:	464e      	mov	r6, r9
    9cd6:	0025      	movs	r5, r4
    9cd8:	3e20      	subs	r6, #32
    9cda:	40f5      	lsrs	r5, r6
    9cdc:	464b      	mov	r3, r9
    9cde:	002e      	movs	r6, r5
    9ce0:	2b20      	cmp	r3, #32
    9ce2:	d02d      	beq.n	9d40 <__aeabi_dadd+0x60c>
    9ce4:	2540      	movs	r5, #64	; 0x40
    9ce6:	1aed      	subs	r5, r5, r3
    9ce8:	40ac      	lsls	r4, r5
    9cea:	4327      	orrs	r7, r4
    9cec:	1e7c      	subs	r4, r7, #1
    9cee:	41a7      	sbcs	r7, r4
    9cf0:	2400      	movs	r4, #0
    9cf2:	4337      	orrs	r7, r6
    9cf4:	e6c9      	b.n	9a8a <__aeabi_dadd+0x356>
    9cf6:	2480      	movs	r4, #128	; 0x80
    9cf8:	2500      	movs	r5, #0
    9cfa:	0324      	lsls	r4, r4, #12
    9cfc:	4e13      	ldr	r6, [pc, #76]	; (9d4c <__aeabi_dadd+0x618>)
    9cfe:	2700      	movs	r7, #0
    9d00:	e5dc      	b.n	98bc <__aeabi_dadd+0x188>
    9d02:	4327      	orrs	r7, r4
    9d04:	1e7c      	subs	r4, r7, #1
    9d06:	41a7      	sbcs	r7, r4
    9d08:	2400      	movs	r4, #0
    9d0a:	e779      	b.n	9c00 <__aeabi_dadd+0x4cc>
    9d0c:	000c      	movs	r4, r1
    9d0e:	0017      	movs	r7, r2
    9d10:	4e0e      	ldr	r6, [pc, #56]	; (9d4c <__aeabi_dadd+0x618>)
    9d12:	e593      	b.n	983c <__aeabi_dadd+0x108>
    9d14:	000c      	movs	r4, r1
    9d16:	0017      	movs	r7, r2
    9d18:	e590      	b.n	983c <__aeabi_dadd+0x108>
    9d1a:	4656      	mov	r6, sl
    9d1c:	0023      	movs	r3, r4
    9d1e:	3e20      	subs	r6, #32
    9d20:	40f3      	lsrs	r3, r6
    9d22:	4699      	mov	r9, r3
    9d24:	4653      	mov	r3, sl
    9d26:	2b20      	cmp	r3, #32
    9d28:	d00e      	beq.n	9d48 <__aeabi_dadd+0x614>
    9d2a:	2340      	movs	r3, #64	; 0x40
    9d2c:	4656      	mov	r6, sl
    9d2e:	1b9b      	subs	r3, r3, r6
    9d30:	409c      	lsls	r4, r3
    9d32:	4327      	orrs	r7, r4
    9d34:	1e7c      	subs	r4, r7, #1
    9d36:	41a7      	sbcs	r7, r4
    9d38:	464b      	mov	r3, r9
    9d3a:	2400      	movs	r4, #0
    9d3c:	431f      	orrs	r7, r3
    9d3e:	e75f      	b.n	9c00 <__aeabi_dadd+0x4cc>
    9d40:	2400      	movs	r4, #0
    9d42:	e7d2      	b.n	9cea <__aeabi_dadd+0x5b6>
    9d44:	0017      	movs	r7, r2
    9d46:	e5b2      	b.n	98ae <__aeabi_dadd+0x17a>
    9d48:	2400      	movs	r4, #0
    9d4a:	e7f2      	b.n	9d32 <__aeabi_dadd+0x5fe>
    9d4c:	000007ff 	.word	0x000007ff
    9d50:	ff7fffff 	.word	0xff7fffff

00009d54 <__aeabi_ddiv>:
    9d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d56:	4657      	mov	r7, sl
    9d58:	4645      	mov	r5, r8
    9d5a:	46de      	mov	lr, fp
    9d5c:	464e      	mov	r6, r9
    9d5e:	b5e0      	push	{r5, r6, r7, lr}
    9d60:	004c      	lsls	r4, r1, #1
    9d62:	030e      	lsls	r6, r1, #12
    9d64:	b087      	sub	sp, #28
    9d66:	4683      	mov	fp, r0
    9d68:	4692      	mov	sl, r2
    9d6a:	001d      	movs	r5, r3
    9d6c:	4680      	mov	r8, r0
    9d6e:	0b36      	lsrs	r6, r6, #12
    9d70:	0d64      	lsrs	r4, r4, #21
    9d72:	0fcf      	lsrs	r7, r1, #31
    9d74:	2c00      	cmp	r4, #0
    9d76:	d04f      	beq.n	9e18 <__aeabi_ddiv+0xc4>
    9d78:	4b6f      	ldr	r3, [pc, #444]	; (9f38 <__aeabi_ddiv+0x1e4>)
    9d7a:	429c      	cmp	r4, r3
    9d7c:	d035      	beq.n	9dea <__aeabi_ddiv+0x96>
    9d7e:	2380      	movs	r3, #128	; 0x80
    9d80:	0f42      	lsrs	r2, r0, #29
    9d82:	041b      	lsls	r3, r3, #16
    9d84:	00f6      	lsls	r6, r6, #3
    9d86:	4313      	orrs	r3, r2
    9d88:	4333      	orrs	r3, r6
    9d8a:	4699      	mov	r9, r3
    9d8c:	00c3      	lsls	r3, r0, #3
    9d8e:	4698      	mov	r8, r3
    9d90:	4b6a      	ldr	r3, [pc, #424]	; (9f3c <__aeabi_ddiv+0x1e8>)
    9d92:	2600      	movs	r6, #0
    9d94:	469c      	mov	ip, r3
    9d96:	2300      	movs	r3, #0
    9d98:	4464      	add	r4, ip
    9d9a:	9303      	str	r3, [sp, #12]
    9d9c:	032b      	lsls	r3, r5, #12
    9d9e:	0b1b      	lsrs	r3, r3, #12
    9da0:	469b      	mov	fp, r3
    9da2:	006b      	lsls	r3, r5, #1
    9da4:	0fed      	lsrs	r5, r5, #31
    9da6:	4650      	mov	r0, sl
    9da8:	0d5b      	lsrs	r3, r3, #21
    9daa:	9501      	str	r5, [sp, #4]
    9dac:	d05e      	beq.n	9e6c <__aeabi_ddiv+0x118>
    9dae:	4a62      	ldr	r2, [pc, #392]	; (9f38 <__aeabi_ddiv+0x1e4>)
    9db0:	4293      	cmp	r3, r2
    9db2:	d053      	beq.n	9e5c <__aeabi_ddiv+0x108>
    9db4:	465a      	mov	r2, fp
    9db6:	00d1      	lsls	r1, r2, #3
    9db8:	2280      	movs	r2, #128	; 0x80
    9dba:	0f40      	lsrs	r0, r0, #29
    9dbc:	0412      	lsls	r2, r2, #16
    9dbe:	4302      	orrs	r2, r0
    9dc0:	430a      	orrs	r2, r1
    9dc2:	4693      	mov	fp, r2
    9dc4:	4652      	mov	r2, sl
    9dc6:	00d1      	lsls	r1, r2, #3
    9dc8:	4a5c      	ldr	r2, [pc, #368]	; (9f3c <__aeabi_ddiv+0x1e8>)
    9dca:	4694      	mov	ip, r2
    9dcc:	2200      	movs	r2, #0
    9dce:	4463      	add	r3, ip
    9dd0:	0038      	movs	r0, r7
    9dd2:	4068      	eors	r0, r5
    9dd4:	4684      	mov	ip, r0
    9dd6:	9002      	str	r0, [sp, #8]
    9dd8:	1ae4      	subs	r4, r4, r3
    9dda:	4316      	orrs	r6, r2
    9ddc:	2e0f      	cmp	r6, #15
    9dde:	d900      	bls.n	9de2 <__aeabi_ddiv+0x8e>
    9de0:	e0b4      	b.n	9f4c <__aeabi_ddiv+0x1f8>
    9de2:	4b57      	ldr	r3, [pc, #348]	; (9f40 <__aeabi_ddiv+0x1ec>)
    9de4:	00b6      	lsls	r6, r6, #2
    9de6:	599b      	ldr	r3, [r3, r6]
    9de8:	469f      	mov	pc, r3
    9dea:	0003      	movs	r3, r0
    9dec:	4333      	orrs	r3, r6
    9dee:	4699      	mov	r9, r3
    9df0:	d16c      	bne.n	9ecc <__aeabi_ddiv+0x178>
    9df2:	2300      	movs	r3, #0
    9df4:	4698      	mov	r8, r3
    9df6:	3302      	adds	r3, #2
    9df8:	2608      	movs	r6, #8
    9dfa:	9303      	str	r3, [sp, #12]
    9dfc:	e7ce      	b.n	9d9c <__aeabi_ddiv+0x48>
    9dfe:	46cb      	mov	fp, r9
    9e00:	4641      	mov	r1, r8
    9e02:	9a03      	ldr	r2, [sp, #12]
    9e04:	9701      	str	r7, [sp, #4]
    9e06:	2a02      	cmp	r2, #2
    9e08:	d165      	bne.n	9ed6 <__aeabi_ddiv+0x182>
    9e0a:	9b01      	ldr	r3, [sp, #4]
    9e0c:	4c4a      	ldr	r4, [pc, #296]	; (9f38 <__aeabi_ddiv+0x1e4>)
    9e0e:	469c      	mov	ip, r3
    9e10:	2300      	movs	r3, #0
    9e12:	2200      	movs	r2, #0
    9e14:	4698      	mov	r8, r3
    9e16:	e06b      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    9e18:	0003      	movs	r3, r0
    9e1a:	4333      	orrs	r3, r6
    9e1c:	4699      	mov	r9, r3
    9e1e:	d04e      	beq.n	9ebe <__aeabi_ddiv+0x16a>
    9e20:	2e00      	cmp	r6, #0
    9e22:	d100      	bne.n	9e26 <__aeabi_ddiv+0xd2>
    9e24:	e1bc      	b.n	a1a0 <__aeabi_ddiv+0x44c>
    9e26:	0030      	movs	r0, r6
    9e28:	f001 fa7e 	bl	b328 <__clzsi2>
    9e2c:	0003      	movs	r3, r0
    9e2e:	3b0b      	subs	r3, #11
    9e30:	2b1c      	cmp	r3, #28
    9e32:	dd00      	ble.n	9e36 <__aeabi_ddiv+0xe2>
    9e34:	e1ac      	b.n	a190 <__aeabi_ddiv+0x43c>
    9e36:	221d      	movs	r2, #29
    9e38:	1ad3      	subs	r3, r2, r3
    9e3a:	465a      	mov	r2, fp
    9e3c:	0001      	movs	r1, r0
    9e3e:	40da      	lsrs	r2, r3
    9e40:	3908      	subs	r1, #8
    9e42:	408e      	lsls	r6, r1
    9e44:	0013      	movs	r3, r2
    9e46:	4333      	orrs	r3, r6
    9e48:	4699      	mov	r9, r3
    9e4a:	465b      	mov	r3, fp
    9e4c:	408b      	lsls	r3, r1
    9e4e:	4698      	mov	r8, r3
    9e50:	2300      	movs	r3, #0
    9e52:	4c3c      	ldr	r4, [pc, #240]	; (9f44 <__aeabi_ddiv+0x1f0>)
    9e54:	2600      	movs	r6, #0
    9e56:	1a24      	subs	r4, r4, r0
    9e58:	9303      	str	r3, [sp, #12]
    9e5a:	e79f      	b.n	9d9c <__aeabi_ddiv+0x48>
    9e5c:	4651      	mov	r1, sl
    9e5e:	465a      	mov	r2, fp
    9e60:	4311      	orrs	r1, r2
    9e62:	d129      	bne.n	9eb8 <__aeabi_ddiv+0x164>
    9e64:	2200      	movs	r2, #0
    9e66:	4693      	mov	fp, r2
    9e68:	3202      	adds	r2, #2
    9e6a:	e7b1      	b.n	9dd0 <__aeabi_ddiv+0x7c>
    9e6c:	4659      	mov	r1, fp
    9e6e:	4301      	orrs	r1, r0
    9e70:	d01e      	beq.n	9eb0 <__aeabi_ddiv+0x15c>
    9e72:	465b      	mov	r3, fp
    9e74:	2b00      	cmp	r3, #0
    9e76:	d100      	bne.n	9e7a <__aeabi_ddiv+0x126>
    9e78:	e19e      	b.n	a1b8 <__aeabi_ddiv+0x464>
    9e7a:	4658      	mov	r0, fp
    9e7c:	f001 fa54 	bl	b328 <__clzsi2>
    9e80:	0003      	movs	r3, r0
    9e82:	3b0b      	subs	r3, #11
    9e84:	2b1c      	cmp	r3, #28
    9e86:	dd00      	ble.n	9e8a <__aeabi_ddiv+0x136>
    9e88:	e18f      	b.n	a1aa <__aeabi_ddiv+0x456>
    9e8a:	0002      	movs	r2, r0
    9e8c:	4659      	mov	r1, fp
    9e8e:	3a08      	subs	r2, #8
    9e90:	4091      	lsls	r1, r2
    9e92:	468b      	mov	fp, r1
    9e94:	211d      	movs	r1, #29
    9e96:	1acb      	subs	r3, r1, r3
    9e98:	4651      	mov	r1, sl
    9e9a:	40d9      	lsrs	r1, r3
    9e9c:	000b      	movs	r3, r1
    9e9e:	4659      	mov	r1, fp
    9ea0:	430b      	orrs	r3, r1
    9ea2:	4651      	mov	r1, sl
    9ea4:	469b      	mov	fp, r3
    9ea6:	4091      	lsls	r1, r2
    9ea8:	4b26      	ldr	r3, [pc, #152]	; (9f44 <__aeabi_ddiv+0x1f0>)
    9eaa:	2200      	movs	r2, #0
    9eac:	1a1b      	subs	r3, r3, r0
    9eae:	e78f      	b.n	9dd0 <__aeabi_ddiv+0x7c>
    9eb0:	2300      	movs	r3, #0
    9eb2:	2201      	movs	r2, #1
    9eb4:	469b      	mov	fp, r3
    9eb6:	e78b      	b.n	9dd0 <__aeabi_ddiv+0x7c>
    9eb8:	4651      	mov	r1, sl
    9eba:	2203      	movs	r2, #3
    9ebc:	e788      	b.n	9dd0 <__aeabi_ddiv+0x7c>
    9ebe:	2300      	movs	r3, #0
    9ec0:	4698      	mov	r8, r3
    9ec2:	3301      	adds	r3, #1
    9ec4:	2604      	movs	r6, #4
    9ec6:	2400      	movs	r4, #0
    9ec8:	9303      	str	r3, [sp, #12]
    9eca:	e767      	b.n	9d9c <__aeabi_ddiv+0x48>
    9ecc:	2303      	movs	r3, #3
    9ece:	46b1      	mov	r9, r6
    9ed0:	9303      	str	r3, [sp, #12]
    9ed2:	260c      	movs	r6, #12
    9ed4:	e762      	b.n	9d9c <__aeabi_ddiv+0x48>
    9ed6:	2a03      	cmp	r2, #3
    9ed8:	d100      	bne.n	9edc <__aeabi_ddiv+0x188>
    9eda:	e25c      	b.n	a396 <__aeabi_ddiv+0x642>
    9edc:	9b01      	ldr	r3, [sp, #4]
    9ede:	2a01      	cmp	r2, #1
    9ee0:	d000      	beq.n	9ee4 <__aeabi_ddiv+0x190>
    9ee2:	e1e4      	b.n	a2ae <__aeabi_ddiv+0x55a>
    9ee4:	4013      	ands	r3, r2
    9ee6:	469c      	mov	ip, r3
    9ee8:	2300      	movs	r3, #0
    9eea:	2400      	movs	r4, #0
    9eec:	2200      	movs	r2, #0
    9eee:	4698      	mov	r8, r3
    9ef0:	2100      	movs	r1, #0
    9ef2:	0312      	lsls	r2, r2, #12
    9ef4:	0b13      	lsrs	r3, r2, #12
    9ef6:	0d0a      	lsrs	r2, r1, #20
    9ef8:	0512      	lsls	r2, r2, #20
    9efa:	431a      	orrs	r2, r3
    9efc:	0523      	lsls	r3, r4, #20
    9efe:	4c12      	ldr	r4, [pc, #72]	; (9f48 <__aeabi_ddiv+0x1f4>)
    9f00:	4640      	mov	r0, r8
    9f02:	4022      	ands	r2, r4
    9f04:	4313      	orrs	r3, r2
    9f06:	4662      	mov	r2, ip
    9f08:	005b      	lsls	r3, r3, #1
    9f0a:	07d2      	lsls	r2, r2, #31
    9f0c:	085b      	lsrs	r3, r3, #1
    9f0e:	4313      	orrs	r3, r2
    9f10:	0019      	movs	r1, r3
    9f12:	b007      	add	sp, #28
    9f14:	bc3c      	pop	{r2, r3, r4, r5}
    9f16:	4690      	mov	r8, r2
    9f18:	4699      	mov	r9, r3
    9f1a:	46a2      	mov	sl, r4
    9f1c:	46ab      	mov	fp, r5
    9f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f20:	2300      	movs	r3, #0
    9f22:	2280      	movs	r2, #128	; 0x80
    9f24:	469c      	mov	ip, r3
    9f26:	0312      	lsls	r2, r2, #12
    9f28:	4698      	mov	r8, r3
    9f2a:	4c03      	ldr	r4, [pc, #12]	; (9f38 <__aeabi_ddiv+0x1e4>)
    9f2c:	e7e0      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    9f2e:	2300      	movs	r3, #0
    9f30:	4c01      	ldr	r4, [pc, #4]	; (9f38 <__aeabi_ddiv+0x1e4>)
    9f32:	2200      	movs	r2, #0
    9f34:	4698      	mov	r8, r3
    9f36:	e7db      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    9f38:	000007ff 	.word	0x000007ff
    9f3c:	fffffc01 	.word	0xfffffc01
    9f40:	00010678 	.word	0x00010678
    9f44:	fffffc0d 	.word	0xfffffc0d
    9f48:	800fffff 	.word	0x800fffff
    9f4c:	45d9      	cmp	r9, fp
    9f4e:	d900      	bls.n	9f52 <__aeabi_ddiv+0x1fe>
    9f50:	e139      	b.n	a1c6 <__aeabi_ddiv+0x472>
    9f52:	d100      	bne.n	9f56 <__aeabi_ddiv+0x202>
    9f54:	e134      	b.n	a1c0 <__aeabi_ddiv+0x46c>
    9f56:	2300      	movs	r3, #0
    9f58:	4646      	mov	r6, r8
    9f5a:	464d      	mov	r5, r9
    9f5c:	469a      	mov	sl, r3
    9f5e:	3c01      	subs	r4, #1
    9f60:	465b      	mov	r3, fp
    9f62:	0e0a      	lsrs	r2, r1, #24
    9f64:	021b      	lsls	r3, r3, #8
    9f66:	431a      	orrs	r2, r3
    9f68:	020b      	lsls	r3, r1, #8
    9f6a:	0c17      	lsrs	r7, r2, #16
    9f6c:	9303      	str	r3, [sp, #12]
    9f6e:	0413      	lsls	r3, r2, #16
    9f70:	0c1b      	lsrs	r3, r3, #16
    9f72:	0039      	movs	r1, r7
    9f74:	0028      	movs	r0, r5
    9f76:	4690      	mov	r8, r2
    9f78:	9301      	str	r3, [sp, #4]
    9f7a:	f7fe f9d9 	bl	8330 <__udivsi3>
    9f7e:	0002      	movs	r2, r0
    9f80:	9b01      	ldr	r3, [sp, #4]
    9f82:	4683      	mov	fp, r0
    9f84:	435a      	muls	r2, r3
    9f86:	0028      	movs	r0, r5
    9f88:	0039      	movs	r1, r7
    9f8a:	4691      	mov	r9, r2
    9f8c:	f7fe fa56 	bl	843c <__aeabi_uidivmod>
    9f90:	0c35      	lsrs	r5, r6, #16
    9f92:	0409      	lsls	r1, r1, #16
    9f94:	430d      	orrs	r5, r1
    9f96:	45a9      	cmp	r9, r5
    9f98:	d90d      	bls.n	9fb6 <__aeabi_ddiv+0x262>
    9f9a:	465b      	mov	r3, fp
    9f9c:	4445      	add	r5, r8
    9f9e:	3b01      	subs	r3, #1
    9fa0:	45a8      	cmp	r8, r5
    9fa2:	d900      	bls.n	9fa6 <__aeabi_ddiv+0x252>
    9fa4:	e13a      	b.n	a21c <__aeabi_ddiv+0x4c8>
    9fa6:	45a9      	cmp	r9, r5
    9fa8:	d800      	bhi.n	9fac <__aeabi_ddiv+0x258>
    9faa:	e137      	b.n	a21c <__aeabi_ddiv+0x4c8>
    9fac:	2302      	movs	r3, #2
    9fae:	425b      	negs	r3, r3
    9fb0:	469c      	mov	ip, r3
    9fb2:	4445      	add	r5, r8
    9fb4:	44e3      	add	fp, ip
    9fb6:	464b      	mov	r3, r9
    9fb8:	1aeb      	subs	r3, r5, r3
    9fba:	0039      	movs	r1, r7
    9fbc:	0018      	movs	r0, r3
    9fbe:	9304      	str	r3, [sp, #16]
    9fc0:	f7fe f9b6 	bl	8330 <__udivsi3>
    9fc4:	9b01      	ldr	r3, [sp, #4]
    9fc6:	0005      	movs	r5, r0
    9fc8:	4343      	muls	r3, r0
    9fca:	0039      	movs	r1, r7
    9fcc:	9804      	ldr	r0, [sp, #16]
    9fce:	4699      	mov	r9, r3
    9fd0:	f7fe fa34 	bl	843c <__aeabi_uidivmod>
    9fd4:	0433      	lsls	r3, r6, #16
    9fd6:	0409      	lsls	r1, r1, #16
    9fd8:	0c1b      	lsrs	r3, r3, #16
    9fda:	430b      	orrs	r3, r1
    9fdc:	4599      	cmp	r9, r3
    9fde:	d909      	bls.n	9ff4 <__aeabi_ddiv+0x2a0>
    9fe0:	4443      	add	r3, r8
    9fe2:	1e6a      	subs	r2, r5, #1
    9fe4:	4598      	cmp	r8, r3
    9fe6:	d900      	bls.n	9fea <__aeabi_ddiv+0x296>
    9fe8:	e11a      	b.n	a220 <__aeabi_ddiv+0x4cc>
    9fea:	4599      	cmp	r9, r3
    9fec:	d800      	bhi.n	9ff0 <__aeabi_ddiv+0x29c>
    9fee:	e117      	b.n	a220 <__aeabi_ddiv+0x4cc>
    9ff0:	3d02      	subs	r5, #2
    9ff2:	4443      	add	r3, r8
    9ff4:	464a      	mov	r2, r9
    9ff6:	1a9b      	subs	r3, r3, r2
    9ff8:	465a      	mov	r2, fp
    9ffa:	0412      	lsls	r2, r2, #16
    9ffc:	432a      	orrs	r2, r5
    9ffe:	9903      	ldr	r1, [sp, #12]
    a000:	4693      	mov	fp, r2
    a002:	0c10      	lsrs	r0, r2, #16
    a004:	0c0a      	lsrs	r2, r1, #16
    a006:	4691      	mov	r9, r2
    a008:	0409      	lsls	r1, r1, #16
    a00a:	465a      	mov	r2, fp
    a00c:	0c09      	lsrs	r1, r1, #16
    a00e:	464e      	mov	r6, r9
    a010:	000d      	movs	r5, r1
    a012:	0412      	lsls	r2, r2, #16
    a014:	0c12      	lsrs	r2, r2, #16
    a016:	4345      	muls	r5, r0
    a018:	9105      	str	r1, [sp, #20]
    a01a:	4351      	muls	r1, r2
    a01c:	4372      	muls	r2, r6
    a01e:	4370      	muls	r0, r6
    a020:	1952      	adds	r2, r2, r5
    a022:	0c0e      	lsrs	r6, r1, #16
    a024:	18b2      	adds	r2, r6, r2
    a026:	4295      	cmp	r5, r2
    a028:	d903      	bls.n	a032 <__aeabi_ddiv+0x2de>
    a02a:	2580      	movs	r5, #128	; 0x80
    a02c:	026d      	lsls	r5, r5, #9
    a02e:	46ac      	mov	ip, r5
    a030:	4460      	add	r0, ip
    a032:	0c15      	lsrs	r5, r2, #16
    a034:	0409      	lsls	r1, r1, #16
    a036:	0412      	lsls	r2, r2, #16
    a038:	0c09      	lsrs	r1, r1, #16
    a03a:	1828      	adds	r0, r5, r0
    a03c:	1852      	adds	r2, r2, r1
    a03e:	4283      	cmp	r3, r0
    a040:	d200      	bcs.n	a044 <__aeabi_ddiv+0x2f0>
    a042:	e0ce      	b.n	a1e2 <__aeabi_ddiv+0x48e>
    a044:	d100      	bne.n	a048 <__aeabi_ddiv+0x2f4>
    a046:	e0c8      	b.n	a1da <__aeabi_ddiv+0x486>
    a048:	1a1d      	subs	r5, r3, r0
    a04a:	4653      	mov	r3, sl
    a04c:	1a9e      	subs	r6, r3, r2
    a04e:	45b2      	cmp	sl, r6
    a050:	4192      	sbcs	r2, r2
    a052:	4252      	negs	r2, r2
    a054:	1aab      	subs	r3, r5, r2
    a056:	469a      	mov	sl, r3
    a058:	4598      	cmp	r8, r3
    a05a:	d100      	bne.n	a05e <__aeabi_ddiv+0x30a>
    a05c:	e117      	b.n	a28e <__aeabi_ddiv+0x53a>
    a05e:	0039      	movs	r1, r7
    a060:	0018      	movs	r0, r3
    a062:	f7fe f965 	bl	8330 <__udivsi3>
    a066:	9b01      	ldr	r3, [sp, #4]
    a068:	0005      	movs	r5, r0
    a06a:	4343      	muls	r3, r0
    a06c:	0039      	movs	r1, r7
    a06e:	4650      	mov	r0, sl
    a070:	9304      	str	r3, [sp, #16]
    a072:	f7fe f9e3 	bl	843c <__aeabi_uidivmod>
    a076:	9804      	ldr	r0, [sp, #16]
    a078:	040b      	lsls	r3, r1, #16
    a07a:	0c31      	lsrs	r1, r6, #16
    a07c:	4319      	orrs	r1, r3
    a07e:	4288      	cmp	r0, r1
    a080:	d909      	bls.n	a096 <__aeabi_ddiv+0x342>
    a082:	4441      	add	r1, r8
    a084:	1e6b      	subs	r3, r5, #1
    a086:	4588      	cmp	r8, r1
    a088:	d900      	bls.n	a08c <__aeabi_ddiv+0x338>
    a08a:	e107      	b.n	a29c <__aeabi_ddiv+0x548>
    a08c:	4288      	cmp	r0, r1
    a08e:	d800      	bhi.n	a092 <__aeabi_ddiv+0x33e>
    a090:	e104      	b.n	a29c <__aeabi_ddiv+0x548>
    a092:	3d02      	subs	r5, #2
    a094:	4441      	add	r1, r8
    a096:	9b04      	ldr	r3, [sp, #16]
    a098:	1acb      	subs	r3, r1, r3
    a09a:	0018      	movs	r0, r3
    a09c:	0039      	movs	r1, r7
    a09e:	9304      	str	r3, [sp, #16]
    a0a0:	f7fe f946 	bl	8330 <__udivsi3>
    a0a4:	9b01      	ldr	r3, [sp, #4]
    a0a6:	4682      	mov	sl, r0
    a0a8:	4343      	muls	r3, r0
    a0aa:	0039      	movs	r1, r7
    a0ac:	9804      	ldr	r0, [sp, #16]
    a0ae:	9301      	str	r3, [sp, #4]
    a0b0:	f7fe f9c4 	bl	843c <__aeabi_uidivmod>
    a0b4:	9801      	ldr	r0, [sp, #4]
    a0b6:	040b      	lsls	r3, r1, #16
    a0b8:	0431      	lsls	r1, r6, #16
    a0ba:	0c09      	lsrs	r1, r1, #16
    a0bc:	4319      	orrs	r1, r3
    a0be:	4288      	cmp	r0, r1
    a0c0:	d90d      	bls.n	a0de <__aeabi_ddiv+0x38a>
    a0c2:	4653      	mov	r3, sl
    a0c4:	4441      	add	r1, r8
    a0c6:	3b01      	subs	r3, #1
    a0c8:	4588      	cmp	r8, r1
    a0ca:	d900      	bls.n	a0ce <__aeabi_ddiv+0x37a>
    a0cc:	e0e8      	b.n	a2a0 <__aeabi_ddiv+0x54c>
    a0ce:	4288      	cmp	r0, r1
    a0d0:	d800      	bhi.n	a0d4 <__aeabi_ddiv+0x380>
    a0d2:	e0e5      	b.n	a2a0 <__aeabi_ddiv+0x54c>
    a0d4:	2302      	movs	r3, #2
    a0d6:	425b      	negs	r3, r3
    a0d8:	469c      	mov	ip, r3
    a0da:	4441      	add	r1, r8
    a0dc:	44e2      	add	sl, ip
    a0de:	9b01      	ldr	r3, [sp, #4]
    a0e0:	042d      	lsls	r5, r5, #16
    a0e2:	1ace      	subs	r6, r1, r3
    a0e4:	4651      	mov	r1, sl
    a0e6:	4329      	orrs	r1, r5
    a0e8:	9d05      	ldr	r5, [sp, #20]
    a0ea:	464f      	mov	r7, r9
    a0ec:	002a      	movs	r2, r5
    a0ee:	040b      	lsls	r3, r1, #16
    a0f0:	0c08      	lsrs	r0, r1, #16
    a0f2:	0c1b      	lsrs	r3, r3, #16
    a0f4:	435a      	muls	r2, r3
    a0f6:	4345      	muls	r5, r0
    a0f8:	437b      	muls	r3, r7
    a0fa:	4378      	muls	r0, r7
    a0fc:	195b      	adds	r3, r3, r5
    a0fe:	0c17      	lsrs	r7, r2, #16
    a100:	18fb      	adds	r3, r7, r3
    a102:	429d      	cmp	r5, r3
    a104:	d903      	bls.n	a10e <__aeabi_ddiv+0x3ba>
    a106:	2580      	movs	r5, #128	; 0x80
    a108:	026d      	lsls	r5, r5, #9
    a10a:	46ac      	mov	ip, r5
    a10c:	4460      	add	r0, ip
    a10e:	0c1d      	lsrs	r5, r3, #16
    a110:	0412      	lsls	r2, r2, #16
    a112:	041b      	lsls	r3, r3, #16
    a114:	0c12      	lsrs	r2, r2, #16
    a116:	1828      	adds	r0, r5, r0
    a118:	189b      	adds	r3, r3, r2
    a11a:	4286      	cmp	r6, r0
    a11c:	d200      	bcs.n	a120 <__aeabi_ddiv+0x3cc>
    a11e:	e093      	b.n	a248 <__aeabi_ddiv+0x4f4>
    a120:	d100      	bne.n	a124 <__aeabi_ddiv+0x3d0>
    a122:	e08e      	b.n	a242 <__aeabi_ddiv+0x4ee>
    a124:	2301      	movs	r3, #1
    a126:	4319      	orrs	r1, r3
    a128:	4ba0      	ldr	r3, [pc, #640]	; (a3ac <__aeabi_ddiv+0x658>)
    a12a:	18e3      	adds	r3, r4, r3
    a12c:	2b00      	cmp	r3, #0
    a12e:	dc00      	bgt.n	a132 <__aeabi_ddiv+0x3de>
    a130:	e099      	b.n	a266 <__aeabi_ddiv+0x512>
    a132:	074a      	lsls	r2, r1, #29
    a134:	d000      	beq.n	a138 <__aeabi_ddiv+0x3e4>
    a136:	e09e      	b.n	a276 <__aeabi_ddiv+0x522>
    a138:	465a      	mov	r2, fp
    a13a:	01d2      	lsls	r2, r2, #7
    a13c:	d506      	bpl.n	a14c <__aeabi_ddiv+0x3f8>
    a13e:	465a      	mov	r2, fp
    a140:	4b9b      	ldr	r3, [pc, #620]	; (a3b0 <__aeabi_ddiv+0x65c>)
    a142:	401a      	ands	r2, r3
    a144:	2380      	movs	r3, #128	; 0x80
    a146:	4693      	mov	fp, r2
    a148:	00db      	lsls	r3, r3, #3
    a14a:	18e3      	adds	r3, r4, r3
    a14c:	4a99      	ldr	r2, [pc, #612]	; (a3b4 <__aeabi_ddiv+0x660>)
    a14e:	4293      	cmp	r3, r2
    a150:	dd68      	ble.n	a224 <__aeabi_ddiv+0x4d0>
    a152:	2301      	movs	r3, #1
    a154:	9a02      	ldr	r2, [sp, #8]
    a156:	4c98      	ldr	r4, [pc, #608]	; (a3b8 <__aeabi_ddiv+0x664>)
    a158:	401a      	ands	r2, r3
    a15a:	2300      	movs	r3, #0
    a15c:	4694      	mov	ip, r2
    a15e:	4698      	mov	r8, r3
    a160:	2200      	movs	r2, #0
    a162:	e6c5      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a164:	2280      	movs	r2, #128	; 0x80
    a166:	464b      	mov	r3, r9
    a168:	0312      	lsls	r2, r2, #12
    a16a:	4213      	tst	r3, r2
    a16c:	d00a      	beq.n	a184 <__aeabi_ddiv+0x430>
    a16e:	465b      	mov	r3, fp
    a170:	4213      	tst	r3, r2
    a172:	d106      	bne.n	a182 <__aeabi_ddiv+0x42e>
    a174:	431a      	orrs	r2, r3
    a176:	0312      	lsls	r2, r2, #12
    a178:	0b12      	lsrs	r2, r2, #12
    a17a:	46ac      	mov	ip, r5
    a17c:	4688      	mov	r8, r1
    a17e:	4c8e      	ldr	r4, [pc, #568]	; (a3b8 <__aeabi_ddiv+0x664>)
    a180:	e6b6      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a182:	464b      	mov	r3, r9
    a184:	431a      	orrs	r2, r3
    a186:	0312      	lsls	r2, r2, #12
    a188:	0b12      	lsrs	r2, r2, #12
    a18a:	46bc      	mov	ip, r7
    a18c:	4c8a      	ldr	r4, [pc, #552]	; (a3b8 <__aeabi_ddiv+0x664>)
    a18e:	e6af      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a190:	0003      	movs	r3, r0
    a192:	465a      	mov	r2, fp
    a194:	3b28      	subs	r3, #40	; 0x28
    a196:	409a      	lsls	r2, r3
    a198:	2300      	movs	r3, #0
    a19a:	4691      	mov	r9, r2
    a19c:	4698      	mov	r8, r3
    a19e:	e657      	b.n	9e50 <__aeabi_ddiv+0xfc>
    a1a0:	4658      	mov	r0, fp
    a1a2:	f001 f8c1 	bl	b328 <__clzsi2>
    a1a6:	3020      	adds	r0, #32
    a1a8:	e640      	b.n	9e2c <__aeabi_ddiv+0xd8>
    a1aa:	0003      	movs	r3, r0
    a1ac:	4652      	mov	r2, sl
    a1ae:	3b28      	subs	r3, #40	; 0x28
    a1b0:	409a      	lsls	r2, r3
    a1b2:	2100      	movs	r1, #0
    a1b4:	4693      	mov	fp, r2
    a1b6:	e677      	b.n	9ea8 <__aeabi_ddiv+0x154>
    a1b8:	f001 f8b6 	bl	b328 <__clzsi2>
    a1bc:	3020      	adds	r0, #32
    a1be:	e65f      	b.n	9e80 <__aeabi_ddiv+0x12c>
    a1c0:	4588      	cmp	r8, r1
    a1c2:	d200      	bcs.n	a1c6 <__aeabi_ddiv+0x472>
    a1c4:	e6c7      	b.n	9f56 <__aeabi_ddiv+0x202>
    a1c6:	464b      	mov	r3, r9
    a1c8:	07de      	lsls	r6, r3, #31
    a1ca:	085d      	lsrs	r5, r3, #1
    a1cc:	4643      	mov	r3, r8
    a1ce:	085b      	lsrs	r3, r3, #1
    a1d0:	431e      	orrs	r6, r3
    a1d2:	4643      	mov	r3, r8
    a1d4:	07db      	lsls	r3, r3, #31
    a1d6:	469a      	mov	sl, r3
    a1d8:	e6c2      	b.n	9f60 <__aeabi_ddiv+0x20c>
    a1da:	2500      	movs	r5, #0
    a1dc:	4592      	cmp	sl, r2
    a1de:	d300      	bcc.n	a1e2 <__aeabi_ddiv+0x48e>
    a1e0:	e733      	b.n	a04a <__aeabi_ddiv+0x2f6>
    a1e2:	9e03      	ldr	r6, [sp, #12]
    a1e4:	4659      	mov	r1, fp
    a1e6:	46b4      	mov	ip, r6
    a1e8:	44e2      	add	sl, ip
    a1ea:	45b2      	cmp	sl, r6
    a1ec:	41ad      	sbcs	r5, r5
    a1ee:	426d      	negs	r5, r5
    a1f0:	4445      	add	r5, r8
    a1f2:	18eb      	adds	r3, r5, r3
    a1f4:	3901      	subs	r1, #1
    a1f6:	4598      	cmp	r8, r3
    a1f8:	d207      	bcs.n	a20a <__aeabi_ddiv+0x4b6>
    a1fa:	4298      	cmp	r0, r3
    a1fc:	d900      	bls.n	a200 <__aeabi_ddiv+0x4ac>
    a1fe:	e07f      	b.n	a300 <__aeabi_ddiv+0x5ac>
    a200:	d100      	bne.n	a204 <__aeabi_ddiv+0x4b0>
    a202:	e0bc      	b.n	a37e <__aeabi_ddiv+0x62a>
    a204:	1a1d      	subs	r5, r3, r0
    a206:	468b      	mov	fp, r1
    a208:	e71f      	b.n	a04a <__aeabi_ddiv+0x2f6>
    a20a:	4598      	cmp	r8, r3
    a20c:	d1fa      	bne.n	a204 <__aeabi_ddiv+0x4b0>
    a20e:	9d03      	ldr	r5, [sp, #12]
    a210:	4555      	cmp	r5, sl
    a212:	d9f2      	bls.n	a1fa <__aeabi_ddiv+0x4a6>
    a214:	4643      	mov	r3, r8
    a216:	468b      	mov	fp, r1
    a218:	1a1d      	subs	r5, r3, r0
    a21a:	e716      	b.n	a04a <__aeabi_ddiv+0x2f6>
    a21c:	469b      	mov	fp, r3
    a21e:	e6ca      	b.n	9fb6 <__aeabi_ddiv+0x262>
    a220:	0015      	movs	r5, r2
    a222:	e6e7      	b.n	9ff4 <__aeabi_ddiv+0x2a0>
    a224:	465a      	mov	r2, fp
    a226:	08c9      	lsrs	r1, r1, #3
    a228:	0752      	lsls	r2, r2, #29
    a22a:	430a      	orrs	r2, r1
    a22c:	055b      	lsls	r3, r3, #21
    a22e:	4690      	mov	r8, r2
    a230:	0d5c      	lsrs	r4, r3, #21
    a232:	465a      	mov	r2, fp
    a234:	2301      	movs	r3, #1
    a236:	9902      	ldr	r1, [sp, #8]
    a238:	0252      	lsls	r2, r2, #9
    a23a:	4019      	ands	r1, r3
    a23c:	0b12      	lsrs	r2, r2, #12
    a23e:	468c      	mov	ip, r1
    a240:	e656      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a242:	2b00      	cmp	r3, #0
    a244:	d100      	bne.n	a248 <__aeabi_ddiv+0x4f4>
    a246:	e76f      	b.n	a128 <__aeabi_ddiv+0x3d4>
    a248:	4446      	add	r6, r8
    a24a:	1e4a      	subs	r2, r1, #1
    a24c:	45b0      	cmp	r8, r6
    a24e:	d929      	bls.n	a2a4 <__aeabi_ddiv+0x550>
    a250:	0011      	movs	r1, r2
    a252:	4286      	cmp	r6, r0
    a254:	d000      	beq.n	a258 <__aeabi_ddiv+0x504>
    a256:	e765      	b.n	a124 <__aeabi_ddiv+0x3d0>
    a258:	9a03      	ldr	r2, [sp, #12]
    a25a:	4293      	cmp	r3, r2
    a25c:	d000      	beq.n	a260 <__aeabi_ddiv+0x50c>
    a25e:	e761      	b.n	a124 <__aeabi_ddiv+0x3d0>
    a260:	e762      	b.n	a128 <__aeabi_ddiv+0x3d4>
    a262:	2101      	movs	r1, #1
    a264:	4249      	negs	r1, r1
    a266:	2001      	movs	r0, #1
    a268:	1ac2      	subs	r2, r0, r3
    a26a:	2a38      	cmp	r2, #56	; 0x38
    a26c:	dd21      	ble.n	a2b2 <__aeabi_ddiv+0x55e>
    a26e:	9b02      	ldr	r3, [sp, #8]
    a270:	4003      	ands	r3, r0
    a272:	469c      	mov	ip, r3
    a274:	e638      	b.n	9ee8 <__aeabi_ddiv+0x194>
    a276:	220f      	movs	r2, #15
    a278:	400a      	ands	r2, r1
    a27a:	2a04      	cmp	r2, #4
    a27c:	d100      	bne.n	a280 <__aeabi_ddiv+0x52c>
    a27e:	e75b      	b.n	a138 <__aeabi_ddiv+0x3e4>
    a280:	000a      	movs	r2, r1
    a282:	1d11      	adds	r1, r2, #4
    a284:	4291      	cmp	r1, r2
    a286:	4192      	sbcs	r2, r2
    a288:	4252      	negs	r2, r2
    a28a:	4493      	add	fp, r2
    a28c:	e754      	b.n	a138 <__aeabi_ddiv+0x3e4>
    a28e:	4b47      	ldr	r3, [pc, #284]	; (a3ac <__aeabi_ddiv+0x658>)
    a290:	18e3      	adds	r3, r4, r3
    a292:	2b00      	cmp	r3, #0
    a294:	dde5      	ble.n	a262 <__aeabi_ddiv+0x50e>
    a296:	2201      	movs	r2, #1
    a298:	4252      	negs	r2, r2
    a29a:	e7f2      	b.n	a282 <__aeabi_ddiv+0x52e>
    a29c:	001d      	movs	r5, r3
    a29e:	e6fa      	b.n	a096 <__aeabi_ddiv+0x342>
    a2a0:	469a      	mov	sl, r3
    a2a2:	e71c      	b.n	a0de <__aeabi_ddiv+0x38a>
    a2a4:	42b0      	cmp	r0, r6
    a2a6:	d839      	bhi.n	a31c <__aeabi_ddiv+0x5c8>
    a2a8:	d06e      	beq.n	a388 <__aeabi_ddiv+0x634>
    a2aa:	0011      	movs	r1, r2
    a2ac:	e73a      	b.n	a124 <__aeabi_ddiv+0x3d0>
    a2ae:	9302      	str	r3, [sp, #8]
    a2b0:	e73a      	b.n	a128 <__aeabi_ddiv+0x3d4>
    a2b2:	2a1f      	cmp	r2, #31
    a2b4:	dc3c      	bgt.n	a330 <__aeabi_ddiv+0x5dc>
    a2b6:	2320      	movs	r3, #32
    a2b8:	1a9b      	subs	r3, r3, r2
    a2ba:	000c      	movs	r4, r1
    a2bc:	4658      	mov	r0, fp
    a2be:	4099      	lsls	r1, r3
    a2c0:	4098      	lsls	r0, r3
    a2c2:	1e4b      	subs	r3, r1, #1
    a2c4:	4199      	sbcs	r1, r3
    a2c6:	465b      	mov	r3, fp
    a2c8:	40d4      	lsrs	r4, r2
    a2ca:	40d3      	lsrs	r3, r2
    a2cc:	4320      	orrs	r0, r4
    a2ce:	4308      	orrs	r0, r1
    a2d0:	001a      	movs	r2, r3
    a2d2:	0743      	lsls	r3, r0, #29
    a2d4:	d009      	beq.n	a2ea <__aeabi_ddiv+0x596>
    a2d6:	230f      	movs	r3, #15
    a2d8:	4003      	ands	r3, r0
    a2da:	2b04      	cmp	r3, #4
    a2dc:	d005      	beq.n	a2ea <__aeabi_ddiv+0x596>
    a2de:	0001      	movs	r1, r0
    a2e0:	1d08      	adds	r0, r1, #4
    a2e2:	4288      	cmp	r0, r1
    a2e4:	419b      	sbcs	r3, r3
    a2e6:	425b      	negs	r3, r3
    a2e8:	18d2      	adds	r2, r2, r3
    a2ea:	0213      	lsls	r3, r2, #8
    a2ec:	d53a      	bpl.n	a364 <__aeabi_ddiv+0x610>
    a2ee:	2301      	movs	r3, #1
    a2f0:	9a02      	ldr	r2, [sp, #8]
    a2f2:	2401      	movs	r4, #1
    a2f4:	401a      	ands	r2, r3
    a2f6:	2300      	movs	r3, #0
    a2f8:	4694      	mov	ip, r2
    a2fa:	4698      	mov	r8, r3
    a2fc:	2200      	movs	r2, #0
    a2fe:	e5f7      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a300:	2102      	movs	r1, #2
    a302:	4249      	negs	r1, r1
    a304:	468c      	mov	ip, r1
    a306:	9d03      	ldr	r5, [sp, #12]
    a308:	44e3      	add	fp, ip
    a30a:	46ac      	mov	ip, r5
    a30c:	44e2      	add	sl, ip
    a30e:	45aa      	cmp	sl, r5
    a310:	41ad      	sbcs	r5, r5
    a312:	426d      	negs	r5, r5
    a314:	4445      	add	r5, r8
    a316:	18ed      	adds	r5, r5, r3
    a318:	1a2d      	subs	r5, r5, r0
    a31a:	e696      	b.n	a04a <__aeabi_ddiv+0x2f6>
    a31c:	1e8a      	subs	r2, r1, #2
    a31e:	9903      	ldr	r1, [sp, #12]
    a320:	004d      	lsls	r5, r1, #1
    a322:	428d      	cmp	r5, r1
    a324:	4189      	sbcs	r1, r1
    a326:	4249      	negs	r1, r1
    a328:	4441      	add	r1, r8
    a32a:	1876      	adds	r6, r6, r1
    a32c:	9503      	str	r5, [sp, #12]
    a32e:	e78f      	b.n	a250 <__aeabi_ddiv+0x4fc>
    a330:	201f      	movs	r0, #31
    a332:	4240      	negs	r0, r0
    a334:	1ac3      	subs	r3, r0, r3
    a336:	4658      	mov	r0, fp
    a338:	40d8      	lsrs	r0, r3
    a33a:	0003      	movs	r3, r0
    a33c:	2a20      	cmp	r2, #32
    a33e:	d028      	beq.n	a392 <__aeabi_ddiv+0x63e>
    a340:	2040      	movs	r0, #64	; 0x40
    a342:	465d      	mov	r5, fp
    a344:	1a82      	subs	r2, r0, r2
    a346:	4095      	lsls	r5, r2
    a348:	4329      	orrs	r1, r5
    a34a:	1e4a      	subs	r2, r1, #1
    a34c:	4191      	sbcs	r1, r2
    a34e:	4319      	orrs	r1, r3
    a350:	2307      	movs	r3, #7
    a352:	2200      	movs	r2, #0
    a354:	400b      	ands	r3, r1
    a356:	d009      	beq.n	a36c <__aeabi_ddiv+0x618>
    a358:	230f      	movs	r3, #15
    a35a:	2200      	movs	r2, #0
    a35c:	400b      	ands	r3, r1
    a35e:	0008      	movs	r0, r1
    a360:	2b04      	cmp	r3, #4
    a362:	d1bd      	bne.n	a2e0 <__aeabi_ddiv+0x58c>
    a364:	0001      	movs	r1, r0
    a366:	0753      	lsls	r3, r2, #29
    a368:	0252      	lsls	r2, r2, #9
    a36a:	0b12      	lsrs	r2, r2, #12
    a36c:	08c9      	lsrs	r1, r1, #3
    a36e:	4319      	orrs	r1, r3
    a370:	2301      	movs	r3, #1
    a372:	4688      	mov	r8, r1
    a374:	9902      	ldr	r1, [sp, #8]
    a376:	2400      	movs	r4, #0
    a378:	4019      	ands	r1, r3
    a37a:	468c      	mov	ip, r1
    a37c:	e5b8      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a37e:	4552      	cmp	r2, sl
    a380:	d8be      	bhi.n	a300 <__aeabi_ddiv+0x5ac>
    a382:	468b      	mov	fp, r1
    a384:	2500      	movs	r5, #0
    a386:	e660      	b.n	a04a <__aeabi_ddiv+0x2f6>
    a388:	9d03      	ldr	r5, [sp, #12]
    a38a:	429d      	cmp	r5, r3
    a38c:	d3c6      	bcc.n	a31c <__aeabi_ddiv+0x5c8>
    a38e:	0011      	movs	r1, r2
    a390:	e762      	b.n	a258 <__aeabi_ddiv+0x504>
    a392:	2500      	movs	r5, #0
    a394:	e7d8      	b.n	a348 <__aeabi_ddiv+0x5f4>
    a396:	2280      	movs	r2, #128	; 0x80
    a398:	465b      	mov	r3, fp
    a39a:	0312      	lsls	r2, r2, #12
    a39c:	431a      	orrs	r2, r3
    a39e:	9b01      	ldr	r3, [sp, #4]
    a3a0:	0312      	lsls	r2, r2, #12
    a3a2:	0b12      	lsrs	r2, r2, #12
    a3a4:	469c      	mov	ip, r3
    a3a6:	4688      	mov	r8, r1
    a3a8:	4c03      	ldr	r4, [pc, #12]	; (a3b8 <__aeabi_ddiv+0x664>)
    a3aa:	e5a1      	b.n	9ef0 <__aeabi_ddiv+0x19c>
    a3ac:	000003ff 	.word	0x000003ff
    a3b0:	feffffff 	.word	0xfeffffff
    a3b4:	000007fe 	.word	0x000007fe
    a3b8:	000007ff 	.word	0x000007ff

0000a3bc <__eqdf2>:
    a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3be:	464f      	mov	r7, r9
    a3c0:	4646      	mov	r6, r8
    a3c2:	46d6      	mov	lr, sl
    a3c4:	005c      	lsls	r4, r3, #1
    a3c6:	b5c0      	push	{r6, r7, lr}
    a3c8:	031f      	lsls	r7, r3, #12
    a3ca:	0fdb      	lsrs	r3, r3, #31
    a3cc:	469a      	mov	sl, r3
    a3ce:	4b17      	ldr	r3, [pc, #92]	; (a42c <__eqdf2+0x70>)
    a3d0:	030e      	lsls	r6, r1, #12
    a3d2:	004d      	lsls	r5, r1, #1
    a3d4:	4684      	mov	ip, r0
    a3d6:	4680      	mov	r8, r0
    a3d8:	0b36      	lsrs	r6, r6, #12
    a3da:	0d6d      	lsrs	r5, r5, #21
    a3dc:	0fc9      	lsrs	r1, r1, #31
    a3de:	4691      	mov	r9, r2
    a3e0:	0b3f      	lsrs	r7, r7, #12
    a3e2:	0d64      	lsrs	r4, r4, #21
    a3e4:	2001      	movs	r0, #1
    a3e6:	429d      	cmp	r5, r3
    a3e8:	d008      	beq.n	a3fc <__eqdf2+0x40>
    a3ea:	429c      	cmp	r4, r3
    a3ec:	d001      	beq.n	a3f2 <__eqdf2+0x36>
    a3ee:	42a5      	cmp	r5, r4
    a3f0:	d00b      	beq.n	a40a <__eqdf2+0x4e>
    a3f2:	bc1c      	pop	{r2, r3, r4}
    a3f4:	4690      	mov	r8, r2
    a3f6:	4699      	mov	r9, r3
    a3f8:	46a2      	mov	sl, r4
    a3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3fc:	4663      	mov	r3, ip
    a3fe:	4333      	orrs	r3, r6
    a400:	d1f7      	bne.n	a3f2 <__eqdf2+0x36>
    a402:	42ac      	cmp	r4, r5
    a404:	d1f5      	bne.n	a3f2 <__eqdf2+0x36>
    a406:	433a      	orrs	r2, r7
    a408:	d1f3      	bne.n	a3f2 <__eqdf2+0x36>
    a40a:	2001      	movs	r0, #1
    a40c:	42be      	cmp	r6, r7
    a40e:	d1f0      	bne.n	a3f2 <__eqdf2+0x36>
    a410:	45c8      	cmp	r8, r9
    a412:	d1ee      	bne.n	a3f2 <__eqdf2+0x36>
    a414:	4551      	cmp	r1, sl
    a416:	d007      	beq.n	a428 <__eqdf2+0x6c>
    a418:	2d00      	cmp	r5, #0
    a41a:	d1ea      	bne.n	a3f2 <__eqdf2+0x36>
    a41c:	4663      	mov	r3, ip
    a41e:	431e      	orrs	r6, r3
    a420:	0030      	movs	r0, r6
    a422:	1e46      	subs	r6, r0, #1
    a424:	41b0      	sbcs	r0, r6
    a426:	e7e4      	b.n	a3f2 <__eqdf2+0x36>
    a428:	2000      	movs	r0, #0
    a42a:	e7e2      	b.n	a3f2 <__eqdf2+0x36>
    a42c:	000007ff 	.word	0x000007ff

0000a430 <__gedf2>:
    a430:	b5f0      	push	{r4, r5, r6, r7, lr}
    a432:	4645      	mov	r5, r8
    a434:	46de      	mov	lr, fp
    a436:	4657      	mov	r7, sl
    a438:	464e      	mov	r6, r9
    a43a:	b5e0      	push	{r5, r6, r7, lr}
    a43c:	031f      	lsls	r7, r3, #12
    a43e:	0b3d      	lsrs	r5, r7, #12
    a440:	4f2c      	ldr	r7, [pc, #176]	; (a4f4 <__gedf2+0xc4>)
    a442:	030e      	lsls	r6, r1, #12
    a444:	004c      	lsls	r4, r1, #1
    a446:	46ab      	mov	fp, r5
    a448:	005d      	lsls	r5, r3, #1
    a44a:	4684      	mov	ip, r0
    a44c:	0b36      	lsrs	r6, r6, #12
    a44e:	0d64      	lsrs	r4, r4, #21
    a450:	0fc9      	lsrs	r1, r1, #31
    a452:	4690      	mov	r8, r2
    a454:	0d6d      	lsrs	r5, r5, #21
    a456:	0fdb      	lsrs	r3, r3, #31
    a458:	42bc      	cmp	r4, r7
    a45a:	d02a      	beq.n	a4b2 <__gedf2+0x82>
    a45c:	4f25      	ldr	r7, [pc, #148]	; (a4f4 <__gedf2+0xc4>)
    a45e:	42bd      	cmp	r5, r7
    a460:	d02d      	beq.n	a4be <__gedf2+0x8e>
    a462:	2c00      	cmp	r4, #0
    a464:	d10f      	bne.n	a486 <__gedf2+0x56>
    a466:	4330      	orrs	r0, r6
    a468:	0007      	movs	r7, r0
    a46a:	4681      	mov	r9, r0
    a46c:	4278      	negs	r0, r7
    a46e:	4178      	adcs	r0, r7
    a470:	b2c0      	uxtb	r0, r0
    a472:	2d00      	cmp	r5, #0
    a474:	d117      	bne.n	a4a6 <__gedf2+0x76>
    a476:	465f      	mov	r7, fp
    a478:	433a      	orrs	r2, r7
    a47a:	d114      	bne.n	a4a6 <__gedf2+0x76>
    a47c:	464b      	mov	r3, r9
    a47e:	2000      	movs	r0, #0
    a480:	2b00      	cmp	r3, #0
    a482:	d00a      	beq.n	a49a <__gedf2+0x6a>
    a484:	e006      	b.n	a494 <__gedf2+0x64>
    a486:	2d00      	cmp	r5, #0
    a488:	d102      	bne.n	a490 <__gedf2+0x60>
    a48a:	4658      	mov	r0, fp
    a48c:	4302      	orrs	r2, r0
    a48e:	d001      	beq.n	a494 <__gedf2+0x64>
    a490:	4299      	cmp	r1, r3
    a492:	d018      	beq.n	a4c6 <__gedf2+0x96>
    a494:	4248      	negs	r0, r1
    a496:	2101      	movs	r1, #1
    a498:	4308      	orrs	r0, r1
    a49a:	bc3c      	pop	{r2, r3, r4, r5}
    a49c:	4690      	mov	r8, r2
    a49e:	4699      	mov	r9, r3
    a4a0:	46a2      	mov	sl, r4
    a4a2:	46ab      	mov	fp, r5
    a4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d0f2      	beq.n	a490 <__gedf2+0x60>
    a4aa:	2001      	movs	r0, #1
    a4ac:	3b01      	subs	r3, #1
    a4ae:	4318      	orrs	r0, r3
    a4b0:	e7f3      	b.n	a49a <__gedf2+0x6a>
    a4b2:	0037      	movs	r7, r6
    a4b4:	4307      	orrs	r7, r0
    a4b6:	d0d1      	beq.n	a45c <__gedf2+0x2c>
    a4b8:	2002      	movs	r0, #2
    a4ba:	4240      	negs	r0, r0
    a4bc:	e7ed      	b.n	a49a <__gedf2+0x6a>
    a4be:	465f      	mov	r7, fp
    a4c0:	4317      	orrs	r7, r2
    a4c2:	d0ce      	beq.n	a462 <__gedf2+0x32>
    a4c4:	e7f8      	b.n	a4b8 <__gedf2+0x88>
    a4c6:	42ac      	cmp	r4, r5
    a4c8:	dce4      	bgt.n	a494 <__gedf2+0x64>
    a4ca:	da03      	bge.n	a4d4 <__gedf2+0xa4>
    a4cc:	1e48      	subs	r0, r1, #1
    a4ce:	2101      	movs	r1, #1
    a4d0:	4308      	orrs	r0, r1
    a4d2:	e7e2      	b.n	a49a <__gedf2+0x6a>
    a4d4:	455e      	cmp	r6, fp
    a4d6:	d8dd      	bhi.n	a494 <__gedf2+0x64>
    a4d8:	d006      	beq.n	a4e8 <__gedf2+0xb8>
    a4da:	2000      	movs	r0, #0
    a4dc:	455e      	cmp	r6, fp
    a4de:	d2dc      	bcs.n	a49a <__gedf2+0x6a>
    a4e0:	2301      	movs	r3, #1
    a4e2:	1e48      	subs	r0, r1, #1
    a4e4:	4318      	orrs	r0, r3
    a4e6:	e7d8      	b.n	a49a <__gedf2+0x6a>
    a4e8:	45c4      	cmp	ip, r8
    a4ea:	d8d3      	bhi.n	a494 <__gedf2+0x64>
    a4ec:	2000      	movs	r0, #0
    a4ee:	45c4      	cmp	ip, r8
    a4f0:	d3f6      	bcc.n	a4e0 <__gedf2+0xb0>
    a4f2:	e7d2      	b.n	a49a <__gedf2+0x6a>
    a4f4:	000007ff 	.word	0x000007ff

0000a4f8 <__ledf2>:
    a4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4fa:	464e      	mov	r6, r9
    a4fc:	4645      	mov	r5, r8
    a4fe:	46de      	mov	lr, fp
    a500:	4657      	mov	r7, sl
    a502:	005c      	lsls	r4, r3, #1
    a504:	b5e0      	push	{r5, r6, r7, lr}
    a506:	031f      	lsls	r7, r3, #12
    a508:	0fdb      	lsrs	r3, r3, #31
    a50a:	4699      	mov	r9, r3
    a50c:	4b2a      	ldr	r3, [pc, #168]	; (a5b8 <__ledf2+0xc0>)
    a50e:	030e      	lsls	r6, r1, #12
    a510:	004d      	lsls	r5, r1, #1
    a512:	0fc9      	lsrs	r1, r1, #31
    a514:	4684      	mov	ip, r0
    a516:	0b36      	lsrs	r6, r6, #12
    a518:	0d6d      	lsrs	r5, r5, #21
    a51a:	468b      	mov	fp, r1
    a51c:	4690      	mov	r8, r2
    a51e:	0b3f      	lsrs	r7, r7, #12
    a520:	0d64      	lsrs	r4, r4, #21
    a522:	429d      	cmp	r5, r3
    a524:	d020      	beq.n	a568 <__ledf2+0x70>
    a526:	4b24      	ldr	r3, [pc, #144]	; (a5b8 <__ledf2+0xc0>)
    a528:	429c      	cmp	r4, r3
    a52a:	d022      	beq.n	a572 <__ledf2+0x7a>
    a52c:	2d00      	cmp	r5, #0
    a52e:	d112      	bne.n	a556 <__ledf2+0x5e>
    a530:	4330      	orrs	r0, r6
    a532:	4243      	negs	r3, r0
    a534:	4143      	adcs	r3, r0
    a536:	b2db      	uxtb	r3, r3
    a538:	2c00      	cmp	r4, #0
    a53a:	d01f      	beq.n	a57c <__ledf2+0x84>
    a53c:	2b00      	cmp	r3, #0
    a53e:	d00c      	beq.n	a55a <__ledf2+0x62>
    a540:	464b      	mov	r3, r9
    a542:	2001      	movs	r0, #1
    a544:	3b01      	subs	r3, #1
    a546:	4303      	orrs	r3, r0
    a548:	0018      	movs	r0, r3
    a54a:	bc3c      	pop	{r2, r3, r4, r5}
    a54c:	4690      	mov	r8, r2
    a54e:	4699      	mov	r9, r3
    a550:	46a2      	mov	sl, r4
    a552:	46ab      	mov	fp, r5
    a554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a556:	2c00      	cmp	r4, #0
    a558:	d016      	beq.n	a588 <__ledf2+0x90>
    a55a:	45cb      	cmp	fp, r9
    a55c:	d017      	beq.n	a58e <__ledf2+0x96>
    a55e:	465b      	mov	r3, fp
    a560:	4259      	negs	r1, r3
    a562:	2301      	movs	r3, #1
    a564:	430b      	orrs	r3, r1
    a566:	e7ef      	b.n	a548 <__ledf2+0x50>
    a568:	0031      	movs	r1, r6
    a56a:	2302      	movs	r3, #2
    a56c:	4301      	orrs	r1, r0
    a56e:	d1eb      	bne.n	a548 <__ledf2+0x50>
    a570:	e7d9      	b.n	a526 <__ledf2+0x2e>
    a572:	0039      	movs	r1, r7
    a574:	2302      	movs	r3, #2
    a576:	4311      	orrs	r1, r2
    a578:	d1e6      	bne.n	a548 <__ledf2+0x50>
    a57a:	e7d7      	b.n	a52c <__ledf2+0x34>
    a57c:	433a      	orrs	r2, r7
    a57e:	d1dd      	bne.n	a53c <__ledf2+0x44>
    a580:	2300      	movs	r3, #0
    a582:	2800      	cmp	r0, #0
    a584:	d0e0      	beq.n	a548 <__ledf2+0x50>
    a586:	e7ea      	b.n	a55e <__ledf2+0x66>
    a588:	433a      	orrs	r2, r7
    a58a:	d1e6      	bne.n	a55a <__ledf2+0x62>
    a58c:	e7e7      	b.n	a55e <__ledf2+0x66>
    a58e:	42a5      	cmp	r5, r4
    a590:	dce5      	bgt.n	a55e <__ledf2+0x66>
    a592:	db05      	blt.n	a5a0 <__ledf2+0xa8>
    a594:	42be      	cmp	r6, r7
    a596:	d8e2      	bhi.n	a55e <__ledf2+0x66>
    a598:	d007      	beq.n	a5aa <__ledf2+0xb2>
    a59a:	2300      	movs	r3, #0
    a59c:	42be      	cmp	r6, r7
    a59e:	d2d3      	bcs.n	a548 <__ledf2+0x50>
    a5a0:	4659      	mov	r1, fp
    a5a2:	2301      	movs	r3, #1
    a5a4:	3901      	subs	r1, #1
    a5a6:	430b      	orrs	r3, r1
    a5a8:	e7ce      	b.n	a548 <__ledf2+0x50>
    a5aa:	45c4      	cmp	ip, r8
    a5ac:	d8d7      	bhi.n	a55e <__ledf2+0x66>
    a5ae:	2300      	movs	r3, #0
    a5b0:	45c4      	cmp	ip, r8
    a5b2:	d3f5      	bcc.n	a5a0 <__ledf2+0xa8>
    a5b4:	e7c8      	b.n	a548 <__ledf2+0x50>
    a5b6:	46c0      	nop			; (mov r8, r8)
    a5b8:	000007ff 	.word	0x000007ff

0000a5bc <__aeabi_dmul>:
    a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5be:	4657      	mov	r7, sl
    a5c0:	4645      	mov	r5, r8
    a5c2:	46de      	mov	lr, fp
    a5c4:	464e      	mov	r6, r9
    a5c6:	b5e0      	push	{r5, r6, r7, lr}
    a5c8:	030c      	lsls	r4, r1, #12
    a5ca:	4698      	mov	r8, r3
    a5cc:	004e      	lsls	r6, r1, #1
    a5ce:	0b23      	lsrs	r3, r4, #12
    a5d0:	b087      	sub	sp, #28
    a5d2:	0007      	movs	r7, r0
    a5d4:	4692      	mov	sl, r2
    a5d6:	469b      	mov	fp, r3
    a5d8:	0d76      	lsrs	r6, r6, #21
    a5da:	0fcd      	lsrs	r5, r1, #31
    a5dc:	2e00      	cmp	r6, #0
    a5de:	d06b      	beq.n	a6b8 <__aeabi_dmul+0xfc>
    a5e0:	4b6d      	ldr	r3, [pc, #436]	; (a798 <__aeabi_dmul+0x1dc>)
    a5e2:	429e      	cmp	r6, r3
    a5e4:	d035      	beq.n	a652 <__aeabi_dmul+0x96>
    a5e6:	2480      	movs	r4, #128	; 0x80
    a5e8:	465b      	mov	r3, fp
    a5ea:	0f42      	lsrs	r2, r0, #29
    a5ec:	0424      	lsls	r4, r4, #16
    a5ee:	00db      	lsls	r3, r3, #3
    a5f0:	4314      	orrs	r4, r2
    a5f2:	431c      	orrs	r4, r3
    a5f4:	00c3      	lsls	r3, r0, #3
    a5f6:	4699      	mov	r9, r3
    a5f8:	4b68      	ldr	r3, [pc, #416]	; (a79c <__aeabi_dmul+0x1e0>)
    a5fa:	46a3      	mov	fp, r4
    a5fc:	469c      	mov	ip, r3
    a5fe:	2300      	movs	r3, #0
    a600:	2700      	movs	r7, #0
    a602:	4466      	add	r6, ip
    a604:	9302      	str	r3, [sp, #8]
    a606:	4643      	mov	r3, r8
    a608:	031c      	lsls	r4, r3, #12
    a60a:	005a      	lsls	r2, r3, #1
    a60c:	0fdb      	lsrs	r3, r3, #31
    a60e:	4650      	mov	r0, sl
    a610:	0b24      	lsrs	r4, r4, #12
    a612:	0d52      	lsrs	r2, r2, #21
    a614:	4698      	mov	r8, r3
    a616:	d100      	bne.n	a61a <__aeabi_dmul+0x5e>
    a618:	e076      	b.n	a708 <__aeabi_dmul+0x14c>
    a61a:	4b5f      	ldr	r3, [pc, #380]	; (a798 <__aeabi_dmul+0x1dc>)
    a61c:	429a      	cmp	r2, r3
    a61e:	d06d      	beq.n	a6fc <__aeabi_dmul+0x140>
    a620:	2380      	movs	r3, #128	; 0x80
    a622:	0f41      	lsrs	r1, r0, #29
    a624:	041b      	lsls	r3, r3, #16
    a626:	430b      	orrs	r3, r1
    a628:	495c      	ldr	r1, [pc, #368]	; (a79c <__aeabi_dmul+0x1e0>)
    a62a:	00e4      	lsls	r4, r4, #3
    a62c:	468c      	mov	ip, r1
    a62e:	431c      	orrs	r4, r3
    a630:	00c3      	lsls	r3, r0, #3
    a632:	2000      	movs	r0, #0
    a634:	4462      	add	r2, ip
    a636:	4641      	mov	r1, r8
    a638:	18b6      	adds	r6, r6, r2
    a63a:	4069      	eors	r1, r5
    a63c:	1c72      	adds	r2, r6, #1
    a63e:	9101      	str	r1, [sp, #4]
    a640:	4694      	mov	ip, r2
    a642:	4307      	orrs	r7, r0
    a644:	2f0f      	cmp	r7, #15
    a646:	d900      	bls.n	a64a <__aeabi_dmul+0x8e>
    a648:	e0b0      	b.n	a7ac <__aeabi_dmul+0x1f0>
    a64a:	4a55      	ldr	r2, [pc, #340]	; (a7a0 <__aeabi_dmul+0x1e4>)
    a64c:	00bf      	lsls	r7, r7, #2
    a64e:	59d2      	ldr	r2, [r2, r7]
    a650:	4697      	mov	pc, r2
    a652:	465b      	mov	r3, fp
    a654:	4303      	orrs	r3, r0
    a656:	4699      	mov	r9, r3
    a658:	d000      	beq.n	a65c <__aeabi_dmul+0xa0>
    a65a:	e087      	b.n	a76c <__aeabi_dmul+0x1b0>
    a65c:	2300      	movs	r3, #0
    a65e:	469b      	mov	fp, r3
    a660:	3302      	adds	r3, #2
    a662:	2708      	movs	r7, #8
    a664:	9302      	str	r3, [sp, #8]
    a666:	e7ce      	b.n	a606 <__aeabi_dmul+0x4a>
    a668:	4642      	mov	r2, r8
    a66a:	9201      	str	r2, [sp, #4]
    a66c:	2802      	cmp	r0, #2
    a66e:	d067      	beq.n	a740 <__aeabi_dmul+0x184>
    a670:	2803      	cmp	r0, #3
    a672:	d100      	bne.n	a676 <__aeabi_dmul+0xba>
    a674:	e20e      	b.n	aa94 <__aeabi_dmul+0x4d8>
    a676:	2801      	cmp	r0, #1
    a678:	d000      	beq.n	a67c <__aeabi_dmul+0xc0>
    a67a:	e162      	b.n	a942 <__aeabi_dmul+0x386>
    a67c:	2300      	movs	r3, #0
    a67e:	2400      	movs	r4, #0
    a680:	2200      	movs	r2, #0
    a682:	4699      	mov	r9, r3
    a684:	9901      	ldr	r1, [sp, #4]
    a686:	4001      	ands	r1, r0
    a688:	b2cd      	uxtb	r5, r1
    a68a:	2100      	movs	r1, #0
    a68c:	0312      	lsls	r2, r2, #12
    a68e:	0d0b      	lsrs	r3, r1, #20
    a690:	0b12      	lsrs	r2, r2, #12
    a692:	051b      	lsls	r3, r3, #20
    a694:	4313      	orrs	r3, r2
    a696:	4a43      	ldr	r2, [pc, #268]	; (a7a4 <__aeabi_dmul+0x1e8>)
    a698:	0524      	lsls	r4, r4, #20
    a69a:	4013      	ands	r3, r2
    a69c:	431c      	orrs	r4, r3
    a69e:	0064      	lsls	r4, r4, #1
    a6a0:	07ed      	lsls	r5, r5, #31
    a6a2:	0864      	lsrs	r4, r4, #1
    a6a4:	432c      	orrs	r4, r5
    a6a6:	4648      	mov	r0, r9
    a6a8:	0021      	movs	r1, r4
    a6aa:	b007      	add	sp, #28
    a6ac:	bc3c      	pop	{r2, r3, r4, r5}
    a6ae:	4690      	mov	r8, r2
    a6b0:	4699      	mov	r9, r3
    a6b2:	46a2      	mov	sl, r4
    a6b4:	46ab      	mov	fp, r5
    a6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6b8:	4303      	orrs	r3, r0
    a6ba:	4699      	mov	r9, r3
    a6bc:	d04f      	beq.n	a75e <__aeabi_dmul+0x1a2>
    a6be:	465b      	mov	r3, fp
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	d100      	bne.n	a6c6 <__aeabi_dmul+0x10a>
    a6c4:	e189      	b.n	a9da <__aeabi_dmul+0x41e>
    a6c6:	4658      	mov	r0, fp
    a6c8:	f000 fe2e 	bl	b328 <__clzsi2>
    a6cc:	0003      	movs	r3, r0
    a6ce:	3b0b      	subs	r3, #11
    a6d0:	2b1c      	cmp	r3, #28
    a6d2:	dd00      	ble.n	a6d6 <__aeabi_dmul+0x11a>
    a6d4:	e17a      	b.n	a9cc <__aeabi_dmul+0x410>
    a6d6:	221d      	movs	r2, #29
    a6d8:	1ad3      	subs	r3, r2, r3
    a6da:	003a      	movs	r2, r7
    a6dc:	0001      	movs	r1, r0
    a6de:	465c      	mov	r4, fp
    a6e0:	40da      	lsrs	r2, r3
    a6e2:	3908      	subs	r1, #8
    a6e4:	408c      	lsls	r4, r1
    a6e6:	0013      	movs	r3, r2
    a6e8:	408f      	lsls	r7, r1
    a6ea:	4323      	orrs	r3, r4
    a6ec:	469b      	mov	fp, r3
    a6ee:	46b9      	mov	r9, r7
    a6f0:	2300      	movs	r3, #0
    a6f2:	4e2d      	ldr	r6, [pc, #180]	; (a7a8 <__aeabi_dmul+0x1ec>)
    a6f4:	2700      	movs	r7, #0
    a6f6:	1a36      	subs	r6, r6, r0
    a6f8:	9302      	str	r3, [sp, #8]
    a6fa:	e784      	b.n	a606 <__aeabi_dmul+0x4a>
    a6fc:	4653      	mov	r3, sl
    a6fe:	4323      	orrs	r3, r4
    a700:	d12a      	bne.n	a758 <__aeabi_dmul+0x19c>
    a702:	2400      	movs	r4, #0
    a704:	2002      	movs	r0, #2
    a706:	e796      	b.n	a636 <__aeabi_dmul+0x7a>
    a708:	4653      	mov	r3, sl
    a70a:	4323      	orrs	r3, r4
    a70c:	d020      	beq.n	a750 <__aeabi_dmul+0x194>
    a70e:	2c00      	cmp	r4, #0
    a710:	d100      	bne.n	a714 <__aeabi_dmul+0x158>
    a712:	e157      	b.n	a9c4 <__aeabi_dmul+0x408>
    a714:	0020      	movs	r0, r4
    a716:	f000 fe07 	bl	b328 <__clzsi2>
    a71a:	0003      	movs	r3, r0
    a71c:	3b0b      	subs	r3, #11
    a71e:	2b1c      	cmp	r3, #28
    a720:	dd00      	ble.n	a724 <__aeabi_dmul+0x168>
    a722:	e149      	b.n	a9b8 <__aeabi_dmul+0x3fc>
    a724:	211d      	movs	r1, #29
    a726:	1acb      	subs	r3, r1, r3
    a728:	4651      	mov	r1, sl
    a72a:	0002      	movs	r2, r0
    a72c:	40d9      	lsrs	r1, r3
    a72e:	4653      	mov	r3, sl
    a730:	3a08      	subs	r2, #8
    a732:	4094      	lsls	r4, r2
    a734:	4093      	lsls	r3, r2
    a736:	430c      	orrs	r4, r1
    a738:	4a1b      	ldr	r2, [pc, #108]	; (a7a8 <__aeabi_dmul+0x1ec>)
    a73a:	1a12      	subs	r2, r2, r0
    a73c:	2000      	movs	r0, #0
    a73e:	e77a      	b.n	a636 <__aeabi_dmul+0x7a>
    a740:	2501      	movs	r5, #1
    a742:	9b01      	ldr	r3, [sp, #4]
    a744:	4c14      	ldr	r4, [pc, #80]	; (a798 <__aeabi_dmul+0x1dc>)
    a746:	401d      	ands	r5, r3
    a748:	2300      	movs	r3, #0
    a74a:	2200      	movs	r2, #0
    a74c:	4699      	mov	r9, r3
    a74e:	e79c      	b.n	a68a <__aeabi_dmul+0xce>
    a750:	2400      	movs	r4, #0
    a752:	2200      	movs	r2, #0
    a754:	2001      	movs	r0, #1
    a756:	e76e      	b.n	a636 <__aeabi_dmul+0x7a>
    a758:	4653      	mov	r3, sl
    a75a:	2003      	movs	r0, #3
    a75c:	e76b      	b.n	a636 <__aeabi_dmul+0x7a>
    a75e:	2300      	movs	r3, #0
    a760:	469b      	mov	fp, r3
    a762:	3301      	adds	r3, #1
    a764:	2704      	movs	r7, #4
    a766:	2600      	movs	r6, #0
    a768:	9302      	str	r3, [sp, #8]
    a76a:	e74c      	b.n	a606 <__aeabi_dmul+0x4a>
    a76c:	2303      	movs	r3, #3
    a76e:	4681      	mov	r9, r0
    a770:	270c      	movs	r7, #12
    a772:	9302      	str	r3, [sp, #8]
    a774:	e747      	b.n	a606 <__aeabi_dmul+0x4a>
    a776:	2280      	movs	r2, #128	; 0x80
    a778:	2300      	movs	r3, #0
    a77a:	2500      	movs	r5, #0
    a77c:	0312      	lsls	r2, r2, #12
    a77e:	4699      	mov	r9, r3
    a780:	4c05      	ldr	r4, [pc, #20]	; (a798 <__aeabi_dmul+0x1dc>)
    a782:	e782      	b.n	a68a <__aeabi_dmul+0xce>
    a784:	465c      	mov	r4, fp
    a786:	464b      	mov	r3, r9
    a788:	9802      	ldr	r0, [sp, #8]
    a78a:	e76f      	b.n	a66c <__aeabi_dmul+0xb0>
    a78c:	465c      	mov	r4, fp
    a78e:	464b      	mov	r3, r9
    a790:	9501      	str	r5, [sp, #4]
    a792:	9802      	ldr	r0, [sp, #8]
    a794:	e76a      	b.n	a66c <__aeabi_dmul+0xb0>
    a796:	46c0      	nop			; (mov r8, r8)
    a798:	000007ff 	.word	0x000007ff
    a79c:	fffffc01 	.word	0xfffffc01
    a7a0:	000106b8 	.word	0x000106b8
    a7a4:	800fffff 	.word	0x800fffff
    a7a8:	fffffc0d 	.word	0xfffffc0d
    a7ac:	464a      	mov	r2, r9
    a7ae:	4649      	mov	r1, r9
    a7b0:	0c17      	lsrs	r7, r2, #16
    a7b2:	0c1a      	lsrs	r2, r3, #16
    a7b4:	041b      	lsls	r3, r3, #16
    a7b6:	0c1b      	lsrs	r3, r3, #16
    a7b8:	0408      	lsls	r0, r1, #16
    a7ba:	0019      	movs	r1, r3
    a7bc:	0c00      	lsrs	r0, r0, #16
    a7be:	4341      	muls	r1, r0
    a7c0:	0015      	movs	r5, r2
    a7c2:	4688      	mov	r8, r1
    a7c4:	0019      	movs	r1, r3
    a7c6:	437d      	muls	r5, r7
    a7c8:	4379      	muls	r1, r7
    a7ca:	9503      	str	r5, [sp, #12]
    a7cc:	4689      	mov	r9, r1
    a7ce:	0029      	movs	r1, r5
    a7d0:	0015      	movs	r5, r2
    a7d2:	4345      	muls	r5, r0
    a7d4:	444d      	add	r5, r9
    a7d6:	9502      	str	r5, [sp, #8]
    a7d8:	4645      	mov	r5, r8
    a7da:	0c2d      	lsrs	r5, r5, #16
    a7dc:	46aa      	mov	sl, r5
    a7de:	9d02      	ldr	r5, [sp, #8]
    a7e0:	4455      	add	r5, sl
    a7e2:	45a9      	cmp	r9, r5
    a7e4:	d906      	bls.n	a7f4 <__aeabi_dmul+0x238>
    a7e6:	468a      	mov	sl, r1
    a7e8:	2180      	movs	r1, #128	; 0x80
    a7ea:	0249      	lsls	r1, r1, #9
    a7ec:	4689      	mov	r9, r1
    a7ee:	44ca      	add	sl, r9
    a7f0:	4651      	mov	r1, sl
    a7f2:	9103      	str	r1, [sp, #12]
    a7f4:	0c29      	lsrs	r1, r5, #16
    a7f6:	9104      	str	r1, [sp, #16]
    a7f8:	4641      	mov	r1, r8
    a7fa:	0409      	lsls	r1, r1, #16
    a7fc:	042d      	lsls	r5, r5, #16
    a7fe:	0c09      	lsrs	r1, r1, #16
    a800:	4688      	mov	r8, r1
    a802:	0029      	movs	r1, r5
    a804:	0c25      	lsrs	r5, r4, #16
    a806:	0424      	lsls	r4, r4, #16
    a808:	4441      	add	r1, r8
    a80a:	0c24      	lsrs	r4, r4, #16
    a80c:	9105      	str	r1, [sp, #20]
    a80e:	0021      	movs	r1, r4
    a810:	4341      	muls	r1, r0
    a812:	4688      	mov	r8, r1
    a814:	0021      	movs	r1, r4
    a816:	4379      	muls	r1, r7
    a818:	468a      	mov	sl, r1
    a81a:	4368      	muls	r0, r5
    a81c:	4641      	mov	r1, r8
    a81e:	4450      	add	r0, sl
    a820:	4681      	mov	r9, r0
    a822:	0c08      	lsrs	r0, r1, #16
    a824:	4448      	add	r0, r9
    a826:	436f      	muls	r7, r5
    a828:	4582      	cmp	sl, r0
    a82a:	d903      	bls.n	a834 <__aeabi_dmul+0x278>
    a82c:	2180      	movs	r1, #128	; 0x80
    a82e:	0249      	lsls	r1, r1, #9
    a830:	4689      	mov	r9, r1
    a832:	444f      	add	r7, r9
    a834:	0c01      	lsrs	r1, r0, #16
    a836:	4689      	mov	r9, r1
    a838:	0039      	movs	r1, r7
    a83a:	4449      	add	r1, r9
    a83c:	9102      	str	r1, [sp, #8]
    a83e:	4641      	mov	r1, r8
    a840:	040f      	lsls	r7, r1, #16
    a842:	9904      	ldr	r1, [sp, #16]
    a844:	0c3f      	lsrs	r7, r7, #16
    a846:	4688      	mov	r8, r1
    a848:	0400      	lsls	r0, r0, #16
    a84a:	19c0      	adds	r0, r0, r7
    a84c:	4480      	add	r8, r0
    a84e:	4641      	mov	r1, r8
    a850:	9104      	str	r1, [sp, #16]
    a852:	4659      	mov	r1, fp
    a854:	0c0f      	lsrs	r7, r1, #16
    a856:	0409      	lsls	r1, r1, #16
    a858:	0c09      	lsrs	r1, r1, #16
    a85a:	4688      	mov	r8, r1
    a85c:	4359      	muls	r1, r3
    a85e:	468a      	mov	sl, r1
    a860:	0039      	movs	r1, r7
    a862:	4351      	muls	r1, r2
    a864:	4689      	mov	r9, r1
    a866:	4641      	mov	r1, r8
    a868:	434a      	muls	r2, r1
    a86a:	4651      	mov	r1, sl
    a86c:	0c09      	lsrs	r1, r1, #16
    a86e:	468b      	mov	fp, r1
    a870:	437b      	muls	r3, r7
    a872:	18d2      	adds	r2, r2, r3
    a874:	445a      	add	r2, fp
    a876:	4293      	cmp	r3, r2
    a878:	d903      	bls.n	a882 <__aeabi_dmul+0x2c6>
    a87a:	2380      	movs	r3, #128	; 0x80
    a87c:	025b      	lsls	r3, r3, #9
    a87e:	469b      	mov	fp, r3
    a880:	44d9      	add	r9, fp
    a882:	4651      	mov	r1, sl
    a884:	0409      	lsls	r1, r1, #16
    a886:	0c09      	lsrs	r1, r1, #16
    a888:	468a      	mov	sl, r1
    a88a:	4641      	mov	r1, r8
    a88c:	4361      	muls	r1, r4
    a88e:	437c      	muls	r4, r7
    a890:	0c13      	lsrs	r3, r2, #16
    a892:	0412      	lsls	r2, r2, #16
    a894:	444b      	add	r3, r9
    a896:	4452      	add	r2, sl
    a898:	46a1      	mov	r9, r4
    a89a:	468a      	mov	sl, r1
    a89c:	003c      	movs	r4, r7
    a89e:	4641      	mov	r1, r8
    a8a0:	436c      	muls	r4, r5
    a8a2:	434d      	muls	r5, r1
    a8a4:	4651      	mov	r1, sl
    a8a6:	444d      	add	r5, r9
    a8a8:	0c0f      	lsrs	r7, r1, #16
    a8aa:	197d      	adds	r5, r7, r5
    a8ac:	45a9      	cmp	r9, r5
    a8ae:	d903      	bls.n	a8b8 <__aeabi_dmul+0x2fc>
    a8b0:	2180      	movs	r1, #128	; 0x80
    a8b2:	0249      	lsls	r1, r1, #9
    a8b4:	4688      	mov	r8, r1
    a8b6:	4444      	add	r4, r8
    a8b8:	9f04      	ldr	r7, [sp, #16]
    a8ba:	9903      	ldr	r1, [sp, #12]
    a8bc:	46b8      	mov	r8, r7
    a8be:	4441      	add	r1, r8
    a8c0:	468b      	mov	fp, r1
    a8c2:	4583      	cmp	fp, r0
    a8c4:	4180      	sbcs	r0, r0
    a8c6:	4241      	negs	r1, r0
    a8c8:	4688      	mov	r8, r1
    a8ca:	4651      	mov	r1, sl
    a8cc:	0408      	lsls	r0, r1, #16
    a8ce:	042f      	lsls	r7, r5, #16
    a8d0:	0c00      	lsrs	r0, r0, #16
    a8d2:	183f      	adds	r7, r7, r0
    a8d4:	4658      	mov	r0, fp
    a8d6:	9902      	ldr	r1, [sp, #8]
    a8d8:	1810      	adds	r0, r2, r0
    a8da:	4689      	mov	r9, r1
    a8dc:	4290      	cmp	r0, r2
    a8de:	4192      	sbcs	r2, r2
    a8e0:	444f      	add	r7, r9
    a8e2:	46ba      	mov	sl, r7
    a8e4:	4252      	negs	r2, r2
    a8e6:	4699      	mov	r9, r3
    a8e8:	4693      	mov	fp, r2
    a8ea:	44c2      	add	sl, r8
    a8ec:	44d1      	add	r9, sl
    a8ee:	44cb      	add	fp, r9
    a8f0:	428f      	cmp	r7, r1
    a8f2:	41bf      	sbcs	r7, r7
    a8f4:	45c2      	cmp	sl, r8
    a8f6:	4189      	sbcs	r1, r1
    a8f8:	4599      	cmp	r9, r3
    a8fa:	419b      	sbcs	r3, r3
    a8fc:	4593      	cmp	fp, r2
    a8fe:	4192      	sbcs	r2, r2
    a900:	427f      	negs	r7, r7
    a902:	4249      	negs	r1, r1
    a904:	0c2d      	lsrs	r5, r5, #16
    a906:	4252      	negs	r2, r2
    a908:	430f      	orrs	r7, r1
    a90a:	425b      	negs	r3, r3
    a90c:	4313      	orrs	r3, r2
    a90e:	197f      	adds	r7, r7, r5
    a910:	18ff      	adds	r7, r7, r3
    a912:	465b      	mov	r3, fp
    a914:	193c      	adds	r4, r7, r4
    a916:	0ddb      	lsrs	r3, r3, #23
    a918:	9a05      	ldr	r2, [sp, #20]
    a91a:	0264      	lsls	r4, r4, #9
    a91c:	431c      	orrs	r4, r3
    a91e:	0243      	lsls	r3, r0, #9
    a920:	4313      	orrs	r3, r2
    a922:	1e5d      	subs	r5, r3, #1
    a924:	41ab      	sbcs	r3, r5
    a926:	465a      	mov	r2, fp
    a928:	0dc0      	lsrs	r0, r0, #23
    a92a:	4303      	orrs	r3, r0
    a92c:	0252      	lsls	r2, r2, #9
    a92e:	4313      	orrs	r3, r2
    a930:	01e2      	lsls	r2, r4, #7
    a932:	d556      	bpl.n	a9e2 <__aeabi_dmul+0x426>
    a934:	2001      	movs	r0, #1
    a936:	085a      	lsrs	r2, r3, #1
    a938:	4003      	ands	r3, r0
    a93a:	4313      	orrs	r3, r2
    a93c:	07e2      	lsls	r2, r4, #31
    a93e:	4313      	orrs	r3, r2
    a940:	0864      	lsrs	r4, r4, #1
    a942:	485a      	ldr	r0, [pc, #360]	; (aaac <__aeabi_dmul+0x4f0>)
    a944:	4460      	add	r0, ip
    a946:	2800      	cmp	r0, #0
    a948:	dd4d      	ble.n	a9e6 <__aeabi_dmul+0x42a>
    a94a:	075a      	lsls	r2, r3, #29
    a94c:	d009      	beq.n	a962 <__aeabi_dmul+0x3a6>
    a94e:	220f      	movs	r2, #15
    a950:	401a      	ands	r2, r3
    a952:	2a04      	cmp	r2, #4
    a954:	d005      	beq.n	a962 <__aeabi_dmul+0x3a6>
    a956:	1d1a      	adds	r2, r3, #4
    a958:	429a      	cmp	r2, r3
    a95a:	419b      	sbcs	r3, r3
    a95c:	425b      	negs	r3, r3
    a95e:	18e4      	adds	r4, r4, r3
    a960:	0013      	movs	r3, r2
    a962:	01e2      	lsls	r2, r4, #7
    a964:	d504      	bpl.n	a970 <__aeabi_dmul+0x3b4>
    a966:	2080      	movs	r0, #128	; 0x80
    a968:	4a51      	ldr	r2, [pc, #324]	; (aab0 <__aeabi_dmul+0x4f4>)
    a96a:	00c0      	lsls	r0, r0, #3
    a96c:	4014      	ands	r4, r2
    a96e:	4460      	add	r0, ip
    a970:	4a50      	ldr	r2, [pc, #320]	; (aab4 <__aeabi_dmul+0x4f8>)
    a972:	4290      	cmp	r0, r2
    a974:	dd00      	ble.n	a978 <__aeabi_dmul+0x3bc>
    a976:	e6e3      	b.n	a740 <__aeabi_dmul+0x184>
    a978:	2501      	movs	r5, #1
    a97a:	08db      	lsrs	r3, r3, #3
    a97c:	0762      	lsls	r2, r4, #29
    a97e:	431a      	orrs	r2, r3
    a980:	0264      	lsls	r4, r4, #9
    a982:	9b01      	ldr	r3, [sp, #4]
    a984:	4691      	mov	r9, r2
    a986:	0b22      	lsrs	r2, r4, #12
    a988:	0544      	lsls	r4, r0, #21
    a98a:	0d64      	lsrs	r4, r4, #21
    a98c:	401d      	ands	r5, r3
    a98e:	e67c      	b.n	a68a <__aeabi_dmul+0xce>
    a990:	2280      	movs	r2, #128	; 0x80
    a992:	4659      	mov	r1, fp
    a994:	0312      	lsls	r2, r2, #12
    a996:	4211      	tst	r1, r2
    a998:	d008      	beq.n	a9ac <__aeabi_dmul+0x3f0>
    a99a:	4214      	tst	r4, r2
    a99c:	d106      	bne.n	a9ac <__aeabi_dmul+0x3f0>
    a99e:	4322      	orrs	r2, r4
    a9a0:	0312      	lsls	r2, r2, #12
    a9a2:	0b12      	lsrs	r2, r2, #12
    a9a4:	4645      	mov	r5, r8
    a9a6:	4699      	mov	r9, r3
    a9a8:	4c43      	ldr	r4, [pc, #268]	; (aab8 <__aeabi_dmul+0x4fc>)
    a9aa:	e66e      	b.n	a68a <__aeabi_dmul+0xce>
    a9ac:	465b      	mov	r3, fp
    a9ae:	431a      	orrs	r2, r3
    a9b0:	0312      	lsls	r2, r2, #12
    a9b2:	0b12      	lsrs	r2, r2, #12
    a9b4:	4c40      	ldr	r4, [pc, #256]	; (aab8 <__aeabi_dmul+0x4fc>)
    a9b6:	e668      	b.n	a68a <__aeabi_dmul+0xce>
    a9b8:	0003      	movs	r3, r0
    a9ba:	4654      	mov	r4, sl
    a9bc:	3b28      	subs	r3, #40	; 0x28
    a9be:	409c      	lsls	r4, r3
    a9c0:	2300      	movs	r3, #0
    a9c2:	e6b9      	b.n	a738 <__aeabi_dmul+0x17c>
    a9c4:	f000 fcb0 	bl	b328 <__clzsi2>
    a9c8:	3020      	adds	r0, #32
    a9ca:	e6a6      	b.n	a71a <__aeabi_dmul+0x15e>
    a9cc:	0003      	movs	r3, r0
    a9ce:	3b28      	subs	r3, #40	; 0x28
    a9d0:	409f      	lsls	r7, r3
    a9d2:	2300      	movs	r3, #0
    a9d4:	46bb      	mov	fp, r7
    a9d6:	4699      	mov	r9, r3
    a9d8:	e68a      	b.n	a6f0 <__aeabi_dmul+0x134>
    a9da:	f000 fca5 	bl	b328 <__clzsi2>
    a9de:	3020      	adds	r0, #32
    a9e0:	e674      	b.n	a6cc <__aeabi_dmul+0x110>
    a9e2:	46b4      	mov	ip, r6
    a9e4:	e7ad      	b.n	a942 <__aeabi_dmul+0x386>
    a9e6:	2501      	movs	r5, #1
    a9e8:	1a2a      	subs	r2, r5, r0
    a9ea:	2a38      	cmp	r2, #56	; 0x38
    a9ec:	dd06      	ble.n	a9fc <__aeabi_dmul+0x440>
    a9ee:	9b01      	ldr	r3, [sp, #4]
    a9f0:	2400      	movs	r4, #0
    a9f2:	401d      	ands	r5, r3
    a9f4:	2300      	movs	r3, #0
    a9f6:	2200      	movs	r2, #0
    a9f8:	4699      	mov	r9, r3
    a9fa:	e646      	b.n	a68a <__aeabi_dmul+0xce>
    a9fc:	2a1f      	cmp	r2, #31
    a9fe:	dc21      	bgt.n	aa44 <__aeabi_dmul+0x488>
    aa00:	2520      	movs	r5, #32
    aa02:	0020      	movs	r0, r4
    aa04:	1aad      	subs	r5, r5, r2
    aa06:	001e      	movs	r6, r3
    aa08:	40ab      	lsls	r3, r5
    aa0a:	40a8      	lsls	r0, r5
    aa0c:	40d6      	lsrs	r6, r2
    aa0e:	1e5d      	subs	r5, r3, #1
    aa10:	41ab      	sbcs	r3, r5
    aa12:	4330      	orrs	r0, r6
    aa14:	4318      	orrs	r0, r3
    aa16:	40d4      	lsrs	r4, r2
    aa18:	0743      	lsls	r3, r0, #29
    aa1a:	d009      	beq.n	aa30 <__aeabi_dmul+0x474>
    aa1c:	230f      	movs	r3, #15
    aa1e:	4003      	ands	r3, r0
    aa20:	2b04      	cmp	r3, #4
    aa22:	d005      	beq.n	aa30 <__aeabi_dmul+0x474>
    aa24:	0003      	movs	r3, r0
    aa26:	1d18      	adds	r0, r3, #4
    aa28:	4298      	cmp	r0, r3
    aa2a:	419b      	sbcs	r3, r3
    aa2c:	425b      	negs	r3, r3
    aa2e:	18e4      	adds	r4, r4, r3
    aa30:	0223      	lsls	r3, r4, #8
    aa32:	d521      	bpl.n	aa78 <__aeabi_dmul+0x4bc>
    aa34:	2501      	movs	r5, #1
    aa36:	9b01      	ldr	r3, [sp, #4]
    aa38:	2401      	movs	r4, #1
    aa3a:	401d      	ands	r5, r3
    aa3c:	2300      	movs	r3, #0
    aa3e:	2200      	movs	r2, #0
    aa40:	4699      	mov	r9, r3
    aa42:	e622      	b.n	a68a <__aeabi_dmul+0xce>
    aa44:	251f      	movs	r5, #31
    aa46:	0021      	movs	r1, r4
    aa48:	426d      	negs	r5, r5
    aa4a:	1a28      	subs	r0, r5, r0
    aa4c:	40c1      	lsrs	r1, r0
    aa4e:	0008      	movs	r0, r1
    aa50:	2a20      	cmp	r2, #32
    aa52:	d01d      	beq.n	aa90 <__aeabi_dmul+0x4d4>
    aa54:	355f      	adds	r5, #95	; 0x5f
    aa56:	1aaa      	subs	r2, r5, r2
    aa58:	4094      	lsls	r4, r2
    aa5a:	4323      	orrs	r3, r4
    aa5c:	1e5c      	subs	r4, r3, #1
    aa5e:	41a3      	sbcs	r3, r4
    aa60:	2507      	movs	r5, #7
    aa62:	4303      	orrs	r3, r0
    aa64:	401d      	ands	r5, r3
    aa66:	2200      	movs	r2, #0
    aa68:	2d00      	cmp	r5, #0
    aa6a:	d009      	beq.n	aa80 <__aeabi_dmul+0x4c4>
    aa6c:	220f      	movs	r2, #15
    aa6e:	2400      	movs	r4, #0
    aa70:	401a      	ands	r2, r3
    aa72:	0018      	movs	r0, r3
    aa74:	2a04      	cmp	r2, #4
    aa76:	d1d6      	bne.n	aa26 <__aeabi_dmul+0x46a>
    aa78:	0003      	movs	r3, r0
    aa7a:	0765      	lsls	r5, r4, #29
    aa7c:	0264      	lsls	r4, r4, #9
    aa7e:	0b22      	lsrs	r2, r4, #12
    aa80:	08db      	lsrs	r3, r3, #3
    aa82:	432b      	orrs	r3, r5
    aa84:	2501      	movs	r5, #1
    aa86:	4699      	mov	r9, r3
    aa88:	9b01      	ldr	r3, [sp, #4]
    aa8a:	2400      	movs	r4, #0
    aa8c:	401d      	ands	r5, r3
    aa8e:	e5fc      	b.n	a68a <__aeabi_dmul+0xce>
    aa90:	2400      	movs	r4, #0
    aa92:	e7e2      	b.n	aa5a <__aeabi_dmul+0x49e>
    aa94:	2280      	movs	r2, #128	; 0x80
    aa96:	2501      	movs	r5, #1
    aa98:	0312      	lsls	r2, r2, #12
    aa9a:	4322      	orrs	r2, r4
    aa9c:	9901      	ldr	r1, [sp, #4]
    aa9e:	0312      	lsls	r2, r2, #12
    aaa0:	0b12      	lsrs	r2, r2, #12
    aaa2:	400d      	ands	r5, r1
    aaa4:	4699      	mov	r9, r3
    aaa6:	4c04      	ldr	r4, [pc, #16]	; (aab8 <__aeabi_dmul+0x4fc>)
    aaa8:	e5ef      	b.n	a68a <__aeabi_dmul+0xce>
    aaaa:	46c0      	nop			; (mov r8, r8)
    aaac:	000003ff 	.word	0x000003ff
    aab0:	feffffff 	.word	0xfeffffff
    aab4:	000007fe 	.word	0x000007fe
    aab8:	000007ff 	.word	0x000007ff

0000aabc <__aeabi_dsub>:
    aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aabe:	4646      	mov	r6, r8
    aac0:	46d6      	mov	lr, sl
    aac2:	464f      	mov	r7, r9
    aac4:	030c      	lsls	r4, r1, #12
    aac6:	b5c0      	push	{r6, r7, lr}
    aac8:	0fcd      	lsrs	r5, r1, #31
    aaca:	004e      	lsls	r6, r1, #1
    aacc:	0a61      	lsrs	r1, r4, #9
    aace:	0f44      	lsrs	r4, r0, #29
    aad0:	430c      	orrs	r4, r1
    aad2:	00c1      	lsls	r1, r0, #3
    aad4:	0058      	lsls	r0, r3, #1
    aad6:	0d40      	lsrs	r0, r0, #21
    aad8:	4684      	mov	ip, r0
    aada:	468a      	mov	sl, r1
    aadc:	000f      	movs	r7, r1
    aade:	0319      	lsls	r1, r3, #12
    aae0:	0f50      	lsrs	r0, r2, #29
    aae2:	0a49      	lsrs	r1, r1, #9
    aae4:	4301      	orrs	r1, r0
    aae6:	48c6      	ldr	r0, [pc, #792]	; (ae00 <__aeabi_dsub+0x344>)
    aae8:	0d76      	lsrs	r6, r6, #21
    aaea:	46a8      	mov	r8, r5
    aaec:	0fdb      	lsrs	r3, r3, #31
    aaee:	00d2      	lsls	r2, r2, #3
    aaf0:	4584      	cmp	ip, r0
    aaf2:	d100      	bne.n	aaf6 <__aeabi_dsub+0x3a>
    aaf4:	e0d8      	b.n	aca8 <__aeabi_dsub+0x1ec>
    aaf6:	2001      	movs	r0, #1
    aaf8:	4043      	eors	r3, r0
    aafa:	42ab      	cmp	r3, r5
    aafc:	d100      	bne.n	ab00 <__aeabi_dsub+0x44>
    aafe:	e0a6      	b.n	ac4e <__aeabi_dsub+0x192>
    ab00:	4660      	mov	r0, ip
    ab02:	1a35      	subs	r5, r6, r0
    ab04:	2d00      	cmp	r5, #0
    ab06:	dc00      	bgt.n	ab0a <__aeabi_dsub+0x4e>
    ab08:	e105      	b.n	ad16 <__aeabi_dsub+0x25a>
    ab0a:	2800      	cmp	r0, #0
    ab0c:	d110      	bne.n	ab30 <__aeabi_dsub+0x74>
    ab0e:	000b      	movs	r3, r1
    ab10:	4313      	orrs	r3, r2
    ab12:	d100      	bne.n	ab16 <__aeabi_dsub+0x5a>
    ab14:	e0d7      	b.n	acc6 <__aeabi_dsub+0x20a>
    ab16:	1e6b      	subs	r3, r5, #1
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d000      	beq.n	ab1e <__aeabi_dsub+0x62>
    ab1c:	e14b      	b.n	adb6 <__aeabi_dsub+0x2fa>
    ab1e:	4653      	mov	r3, sl
    ab20:	1a9f      	subs	r7, r3, r2
    ab22:	45ba      	cmp	sl, r7
    ab24:	4180      	sbcs	r0, r0
    ab26:	1a64      	subs	r4, r4, r1
    ab28:	4240      	negs	r0, r0
    ab2a:	1a24      	subs	r4, r4, r0
    ab2c:	2601      	movs	r6, #1
    ab2e:	e01e      	b.n	ab6e <__aeabi_dsub+0xb2>
    ab30:	4bb3      	ldr	r3, [pc, #716]	; (ae00 <__aeabi_dsub+0x344>)
    ab32:	429e      	cmp	r6, r3
    ab34:	d048      	beq.n	abc8 <__aeabi_dsub+0x10c>
    ab36:	2380      	movs	r3, #128	; 0x80
    ab38:	041b      	lsls	r3, r3, #16
    ab3a:	4319      	orrs	r1, r3
    ab3c:	2d38      	cmp	r5, #56	; 0x38
    ab3e:	dd00      	ble.n	ab42 <__aeabi_dsub+0x86>
    ab40:	e119      	b.n	ad76 <__aeabi_dsub+0x2ba>
    ab42:	2d1f      	cmp	r5, #31
    ab44:	dd00      	ble.n	ab48 <__aeabi_dsub+0x8c>
    ab46:	e14c      	b.n	ade2 <__aeabi_dsub+0x326>
    ab48:	2320      	movs	r3, #32
    ab4a:	000f      	movs	r7, r1
    ab4c:	1b5b      	subs	r3, r3, r5
    ab4e:	0010      	movs	r0, r2
    ab50:	409a      	lsls	r2, r3
    ab52:	409f      	lsls	r7, r3
    ab54:	40e8      	lsrs	r0, r5
    ab56:	1e53      	subs	r3, r2, #1
    ab58:	419a      	sbcs	r2, r3
    ab5a:	40e9      	lsrs	r1, r5
    ab5c:	4307      	orrs	r7, r0
    ab5e:	4317      	orrs	r7, r2
    ab60:	4653      	mov	r3, sl
    ab62:	1bdf      	subs	r7, r3, r7
    ab64:	1a61      	subs	r1, r4, r1
    ab66:	45ba      	cmp	sl, r7
    ab68:	41a4      	sbcs	r4, r4
    ab6a:	4264      	negs	r4, r4
    ab6c:	1b0c      	subs	r4, r1, r4
    ab6e:	0223      	lsls	r3, r4, #8
    ab70:	d400      	bmi.n	ab74 <__aeabi_dsub+0xb8>
    ab72:	e0c5      	b.n	ad00 <__aeabi_dsub+0x244>
    ab74:	0264      	lsls	r4, r4, #9
    ab76:	0a65      	lsrs	r5, r4, #9
    ab78:	2d00      	cmp	r5, #0
    ab7a:	d100      	bne.n	ab7e <__aeabi_dsub+0xc2>
    ab7c:	e0f6      	b.n	ad6c <__aeabi_dsub+0x2b0>
    ab7e:	0028      	movs	r0, r5
    ab80:	f000 fbd2 	bl	b328 <__clzsi2>
    ab84:	0003      	movs	r3, r0
    ab86:	3b08      	subs	r3, #8
    ab88:	2b1f      	cmp	r3, #31
    ab8a:	dd00      	ble.n	ab8e <__aeabi_dsub+0xd2>
    ab8c:	e0e9      	b.n	ad62 <__aeabi_dsub+0x2a6>
    ab8e:	2220      	movs	r2, #32
    ab90:	003c      	movs	r4, r7
    ab92:	1ad2      	subs	r2, r2, r3
    ab94:	409d      	lsls	r5, r3
    ab96:	40d4      	lsrs	r4, r2
    ab98:	409f      	lsls	r7, r3
    ab9a:	4325      	orrs	r5, r4
    ab9c:	429e      	cmp	r6, r3
    ab9e:	dd00      	ble.n	aba2 <__aeabi_dsub+0xe6>
    aba0:	e0db      	b.n	ad5a <__aeabi_dsub+0x29e>
    aba2:	1b9e      	subs	r6, r3, r6
    aba4:	1c73      	adds	r3, r6, #1
    aba6:	2b1f      	cmp	r3, #31
    aba8:	dd00      	ble.n	abac <__aeabi_dsub+0xf0>
    abaa:	e10a      	b.n	adc2 <__aeabi_dsub+0x306>
    abac:	2220      	movs	r2, #32
    abae:	0038      	movs	r0, r7
    abb0:	1ad2      	subs	r2, r2, r3
    abb2:	0029      	movs	r1, r5
    abb4:	4097      	lsls	r7, r2
    abb6:	002c      	movs	r4, r5
    abb8:	4091      	lsls	r1, r2
    abba:	40d8      	lsrs	r0, r3
    abbc:	1e7a      	subs	r2, r7, #1
    abbe:	4197      	sbcs	r7, r2
    abc0:	40dc      	lsrs	r4, r3
    abc2:	2600      	movs	r6, #0
    abc4:	4301      	orrs	r1, r0
    abc6:	430f      	orrs	r7, r1
    abc8:	077b      	lsls	r3, r7, #29
    abca:	d009      	beq.n	abe0 <__aeabi_dsub+0x124>
    abcc:	230f      	movs	r3, #15
    abce:	403b      	ands	r3, r7
    abd0:	2b04      	cmp	r3, #4
    abd2:	d005      	beq.n	abe0 <__aeabi_dsub+0x124>
    abd4:	1d3b      	adds	r3, r7, #4
    abd6:	42bb      	cmp	r3, r7
    abd8:	41bf      	sbcs	r7, r7
    abda:	427f      	negs	r7, r7
    abdc:	19e4      	adds	r4, r4, r7
    abde:	001f      	movs	r7, r3
    abe0:	0223      	lsls	r3, r4, #8
    abe2:	d525      	bpl.n	ac30 <__aeabi_dsub+0x174>
    abe4:	4b86      	ldr	r3, [pc, #536]	; (ae00 <__aeabi_dsub+0x344>)
    abe6:	3601      	adds	r6, #1
    abe8:	429e      	cmp	r6, r3
    abea:	d100      	bne.n	abee <__aeabi_dsub+0x132>
    abec:	e0af      	b.n	ad4e <__aeabi_dsub+0x292>
    abee:	4b85      	ldr	r3, [pc, #532]	; (ae04 <__aeabi_dsub+0x348>)
    abf0:	2501      	movs	r5, #1
    abf2:	401c      	ands	r4, r3
    abf4:	4643      	mov	r3, r8
    abf6:	0762      	lsls	r2, r4, #29
    abf8:	08ff      	lsrs	r7, r7, #3
    abfa:	0264      	lsls	r4, r4, #9
    abfc:	0576      	lsls	r6, r6, #21
    abfe:	4317      	orrs	r7, r2
    ac00:	0b24      	lsrs	r4, r4, #12
    ac02:	0d76      	lsrs	r6, r6, #21
    ac04:	401d      	ands	r5, r3
    ac06:	2100      	movs	r1, #0
    ac08:	0324      	lsls	r4, r4, #12
    ac0a:	0b23      	lsrs	r3, r4, #12
    ac0c:	0d0c      	lsrs	r4, r1, #20
    ac0e:	4a7e      	ldr	r2, [pc, #504]	; (ae08 <__aeabi_dsub+0x34c>)
    ac10:	0524      	lsls	r4, r4, #20
    ac12:	431c      	orrs	r4, r3
    ac14:	4014      	ands	r4, r2
    ac16:	0533      	lsls	r3, r6, #20
    ac18:	4323      	orrs	r3, r4
    ac1a:	005b      	lsls	r3, r3, #1
    ac1c:	07ed      	lsls	r5, r5, #31
    ac1e:	085b      	lsrs	r3, r3, #1
    ac20:	432b      	orrs	r3, r5
    ac22:	0038      	movs	r0, r7
    ac24:	0019      	movs	r1, r3
    ac26:	bc1c      	pop	{r2, r3, r4}
    ac28:	4690      	mov	r8, r2
    ac2a:	4699      	mov	r9, r3
    ac2c:	46a2      	mov	sl, r4
    ac2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac30:	2501      	movs	r5, #1
    ac32:	4643      	mov	r3, r8
    ac34:	0762      	lsls	r2, r4, #29
    ac36:	08ff      	lsrs	r7, r7, #3
    ac38:	4317      	orrs	r7, r2
    ac3a:	08e4      	lsrs	r4, r4, #3
    ac3c:	401d      	ands	r5, r3
    ac3e:	4b70      	ldr	r3, [pc, #448]	; (ae00 <__aeabi_dsub+0x344>)
    ac40:	429e      	cmp	r6, r3
    ac42:	d036      	beq.n	acb2 <__aeabi_dsub+0x1f6>
    ac44:	0324      	lsls	r4, r4, #12
    ac46:	0576      	lsls	r6, r6, #21
    ac48:	0b24      	lsrs	r4, r4, #12
    ac4a:	0d76      	lsrs	r6, r6, #21
    ac4c:	e7db      	b.n	ac06 <__aeabi_dsub+0x14a>
    ac4e:	4663      	mov	r3, ip
    ac50:	1af3      	subs	r3, r6, r3
    ac52:	2b00      	cmp	r3, #0
    ac54:	dc00      	bgt.n	ac58 <__aeabi_dsub+0x19c>
    ac56:	e094      	b.n	ad82 <__aeabi_dsub+0x2c6>
    ac58:	4660      	mov	r0, ip
    ac5a:	2800      	cmp	r0, #0
    ac5c:	d035      	beq.n	acca <__aeabi_dsub+0x20e>
    ac5e:	4868      	ldr	r0, [pc, #416]	; (ae00 <__aeabi_dsub+0x344>)
    ac60:	4286      	cmp	r6, r0
    ac62:	d0b1      	beq.n	abc8 <__aeabi_dsub+0x10c>
    ac64:	2780      	movs	r7, #128	; 0x80
    ac66:	043f      	lsls	r7, r7, #16
    ac68:	4339      	orrs	r1, r7
    ac6a:	2b38      	cmp	r3, #56	; 0x38
    ac6c:	dc00      	bgt.n	ac70 <__aeabi_dsub+0x1b4>
    ac6e:	e0fd      	b.n	ae6c <__aeabi_dsub+0x3b0>
    ac70:	430a      	orrs	r2, r1
    ac72:	0017      	movs	r7, r2
    ac74:	2100      	movs	r1, #0
    ac76:	1e7a      	subs	r2, r7, #1
    ac78:	4197      	sbcs	r7, r2
    ac7a:	4457      	add	r7, sl
    ac7c:	4557      	cmp	r7, sl
    ac7e:	4180      	sbcs	r0, r0
    ac80:	1909      	adds	r1, r1, r4
    ac82:	4244      	negs	r4, r0
    ac84:	190c      	adds	r4, r1, r4
    ac86:	0223      	lsls	r3, r4, #8
    ac88:	d53a      	bpl.n	ad00 <__aeabi_dsub+0x244>
    ac8a:	4b5d      	ldr	r3, [pc, #372]	; (ae00 <__aeabi_dsub+0x344>)
    ac8c:	3601      	adds	r6, #1
    ac8e:	429e      	cmp	r6, r3
    ac90:	d100      	bne.n	ac94 <__aeabi_dsub+0x1d8>
    ac92:	e14b      	b.n	af2c <__aeabi_dsub+0x470>
    ac94:	2201      	movs	r2, #1
    ac96:	4b5b      	ldr	r3, [pc, #364]	; (ae04 <__aeabi_dsub+0x348>)
    ac98:	401c      	ands	r4, r3
    ac9a:	087b      	lsrs	r3, r7, #1
    ac9c:	4017      	ands	r7, r2
    ac9e:	431f      	orrs	r7, r3
    aca0:	07e2      	lsls	r2, r4, #31
    aca2:	4317      	orrs	r7, r2
    aca4:	0864      	lsrs	r4, r4, #1
    aca6:	e78f      	b.n	abc8 <__aeabi_dsub+0x10c>
    aca8:	0008      	movs	r0, r1
    acaa:	4310      	orrs	r0, r2
    acac:	d000      	beq.n	acb0 <__aeabi_dsub+0x1f4>
    acae:	e724      	b.n	aafa <__aeabi_dsub+0x3e>
    acb0:	e721      	b.n	aaf6 <__aeabi_dsub+0x3a>
    acb2:	0023      	movs	r3, r4
    acb4:	433b      	orrs	r3, r7
    acb6:	d100      	bne.n	acba <__aeabi_dsub+0x1fe>
    acb8:	e1b9      	b.n	b02e <__aeabi_dsub+0x572>
    acba:	2280      	movs	r2, #128	; 0x80
    acbc:	0312      	lsls	r2, r2, #12
    acbe:	4314      	orrs	r4, r2
    acc0:	0324      	lsls	r4, r4, #12
    acc2:	0b24      	lsrs	r4, r4, #12
    acc4:	e79f      	b.n	ac06 <__aeabi_dsub+0x14a>
    acc6:	002e      	movs	r6, r5
    acc8:	e77e      	b.n	abc8 <__aeabi_dsub+0x10c>
    acca:	0008      	movs	r0, r1
    accc:	4310      	orrs	r0, r2
    acce:	d100      	bne.n	acd2 <__aeabi_dsub+0x216>
    acd0:	e0ca      	b.n	ae68 <__aeabi_dsub+0x3ac>
    acd2:	1e58      	subs	r0, r3, #1
    acd4:	4684      	mov	ip, r0
    acd6:	2800      	cmp	r0, #0
    acd8:	d000      	beq.n	acdc <__aeabi_dsub+0x220>
    acda:	e0e7      	b.n	aeac <__aeabi_dsub+0x3f0>
    acdc:	4452      	add	r2, sl
    acde:	4552      	cmp	r2, sl
    ace0:	4180      	sbcs	r0, r0
    ace2:	1864      	adds	r4, r4, r1
    ace4:	4240      	negs	r0, r0
    ace6:	1824      	adds	r4, r4, r0
    ace8:	0017      	movs	r7, r2
    acea:	2601      	movs	r6, #1
    acec:	0223      	lsls	r3, r4, #8
    acee:	d507      	bpl.n	ad00 <__aeabi_dsub+0x244>
    acf0:	2602      	movs	r6, #2
    acf2:	e7cf      	b.n	ac94 <__aeabi_dsub+0x1d8>
    acf4:	4664      	mov	r4, ip
    acf6:	432c      	orrs	r4, r5
    acf8:	d100      	bne.n	acfc <__aeabi_dsub+0x240>
    acfa:	e1b3      	b.n	b064 <__aeabi_dsub+0x5a8>
    acfc:	002c      	movs	r4, r5
    acfe:	4667      	mov	r7, ip
    ad00:	077b      	lsls	r3, r7, #29
    ad02:	d000      	beq.n	ad06 <__aeabi_dsub+0x24a>
    ad04:	e762      	b.n	abcc <__aeabi_dsub+0x110>
    ad06:	0763      	lsls	r3, r4, #29
    ad08:	08ff      	lsrs	r7, r7, #3
    ad0a:	431f      	orrs	r7, r3
    ad0c:	2501      	movs	r5, #1
    ad0e:	4643      	mov	r3, r8
    ad10:	08e4      	lsrs	r4, r4, #3
    ad12:	401d      	ands	r5, r3
    ad14:	e793      	b.n	ac3e <__aeabi_dsub+0x182>
    ad16:	2d00      	cmp	r5, #0
    ad18:	d178      	bne.n	ae0c <__aeabi_dsub+0x350>
    ad1a:	1c75      	adds	r5, r6, #1
    ad1c:	056d      	lsls	r5, r5, #21
    ad1e:	0d6d      	lsrs	r5, r5, #21
    ad20:	2d01      	cmp	r5, #1
    ad22:	dc00      	bgt.n	ad26 <__aeabi_dsub+0x26a>
    ad24:	e0f2      	b.n	af0c <__aeabi_dsub+0x450>
    ad26:	4650      	mov	r0, sl
    ad28:	1a80      	subs	r0, r0, r2
    ad2a:	4582      	cmp	sl, r0
    ad2c:	41bf      	sbcs	r7, r7
    ad2e:	1a65      	subs	r5, r4, r1
    ad30:	427f      	negs	r7, r7
    ad32:	1bed      	subs	r5, r5, r7
    ad34:	4684      	mov	ip, r0
    ad36:	0228      	lsls	r0, r5, #8
    ad38:	d400      	bmi.n	ad3c <__aeabi_dsub+0x280>
    ad3a:	e08c      	b.n	ae56 <__aeabi_dsub+0x39a>
    ad3c:	4650      	mov	r0, sl
    ad3e:	1a17      	subs	r7, r2, r0
    ad40:	42ba      	cmp	r2, r7
    ad42:	4192      	sbcs	r2, r2
    ad44:	1b0c      	subs	r4, r1, r4
    ad46:	4255      	negs	r5, r2
    ad48:	1b65      	subs	r5, r4, r5
    ad4a:	4698      	mov	r8, r3
    ad4c:	e714      	b.n	ab78 <__aeabi_dsub+0xbc>
    ad4e:	2501      	movs	r5, #1
    ad50:	4643      	mov	r3, r8
    ad52:	2400      	movs	r4, #0
    ad54:	401d      	ands	r5, r3
    ad56:	2700      	movs	r7, #0
    ad58:	e755      	b.n	ac06 <__aeabi_dsub+0x14a>
    ad5a:	4c2a      	ldr	r4, [pc, #168]	; (ae04 <__aeabi_dsub+0x348>)
    ad5c:	1af6      	subs	r6, r6, r3
    ad5e:	402c      	ands	r4, r5
    ad60:	e732      	b.n	abc8 <__aeabi_dsub+0x10c>
    ad62:	003d      	movs	r5, r7
    ad64:	3828      	subs	r0, #40	; 0x28
    ad66:	4085      	lsls	r5, r0
    ad68:	2700      	movs	r7, #0
    ad6a:	e717      	b.n	ab9c <__aeabi_dsub+0xe0>
    ad6c:	0038      	movs	r0, r7
    ad6e:	f000 fadb 	bl	b328 <__clzsi2>
    ad72:	3020      	adds	r0, #32
    ad74:	e706      	b.n	ab84 <__aeabi_dsub+0xc8>
    ad76:	430a      	orrs	r2, r1
    ad78:	0017      	movs	r7, r2
    ad7a:	2100      	movs	r1, #0
    ad7c:	1e7a      	subs	r2, r7, #1
    ad7e:	4197      	sbcs	r7, r2
    ad80:	e6ee      	b.n	ab60 <__aeabi_dsub+0xa4>
    ad82:	2b00      	cmp	r3, #0
    ad84:	d000      	beq.n	ad88 <__aeabi_dsub+0x2cc>
    ad86:	e0e5      	b.n	af54 <__aeabi_dsub+0x498>
    ad88:	1c73      	adds	r3, r6, #1
    ad8a:	469c      	mov	ip, r3
    ad8c:	055b      	lsls	r3, r3, #21
    ad8e:	0d5b      	lsrs	r3, r3, #21
    ad90:	2b01      	cmp	r3, #1
    ad92:	dc00      	bgt.n	ad96 <__aeabi_dsub+0x2da>
    ad94:	e09f      	b.n	aed6 <__aeabi_dsub+0x41a>
    ad96:	4b1a      	ldr	r3, [pc, #104]	; (ae00 <__aeabi_dsub+0x344>)
    ad98:	459c      	cmp	ip, r3
    ad9a:	d100      	bne.n	ad9e <__aeabi_dsub+0x2e2>
    ad9c:	e0c5      	b.n	af2a <__aeabi_dsub+0x46e>
    ad9e:	4452      	add	r2, sl
    ada0:	4552      	cmp	r2, sl
    ada2:	4180      	sbcs	r0, r0
    ada4:	1864      	adds	r4, r4, r1
    ada6:	4240      	negs	r0, r0
    ada8:	1824      	adds	r4, r4, r0
    adaa:	07e7      	lsls	r7, r4, #31
    adac:	0852      	lsrs	r2, r2, #1
    adae:	4317      	orrs	r7, r2
    adb0:	0864      	lsrs	r4, r4, #1
    adb2:	4666      	mov	r6, ip
    adb4:	e708      	b.n	abc8 <__aeabi_dsub+0x10c>
    adb6:	4812      	ldr	r0, [pc, #72]	; (ae00 <__aeabi_dsub+0x344>)
    adb8:	4285      	cmp	r5, r0
    adba:	d100      	bne.n	adbe <__aeabi_dsub+0x302>
    adbc:	e085      	b.n	aeca <__aeabi_dsub+0x40e>
    adbe:	001d      	movs	r5, r3
    adc0:	e6bc      	b.n	ab3c <__aeabi_dsub+0x80>
    adc2:	0029      	movs	r1, r5
    adc4:	3e1f      	subs	r6, #31
    adc6:	40f1      	lsrs	r1, r6
    adc8:	2b20      	cmp	r3, #32
    adca:	d100      	bne.n	adce <__aeabi_dsub+0x312>
    adcc:	e07f      	b.n	aece <__aeabi_dsub+0x412>
    adce:	2240      	movs	r2, #64	; 0x40
    add0:	1ad3      	subs	r3, r2, r3
    add2:	409d      	lsls	r5, r3
    add4:	432f      	orrs	r7, r5
    add6:	1e7d      	subs	r5, r7, #1
    add8:	41af      	sbcs	r7, r5
    adda:	2400      	movs	r4, #0
    addc:	430f      	orrs	r7, r1
    adde:	2600      	movs	r6, #0
    ade0:	e78e      	b.n	ad00 <__aeabi_dsub+0x244>
    ade2:	002b      	movs	r3, r5
    ade4:	000f      	movs	r7, r1
    ade6:	3b20      	subs	r3, #32
    ade8:	40df      	lsrs	r7, r3
    adea:	2d20      	cmp	r5, #32
    adec:	d071      	beq.n	aed2 <__aeabi_dsub+0x416>
    adee:	2340      	movs	r3, #64	; 0x40
    adf0:	1b5d      	subs	r5, r3, r5
    adf2:	40a9      	lsls	r1, r5
    adf4:	430a      	orrs	r2, r1
    adf6:	1e51      	subs	r1, r2, #1
    adf8:	418a      	sbcs	r2, r1
    adfa:	2100      	movs	r1, #0
    adfc:	4317      	orrs	r7, r2
    adfe:	e6af      	b.n	ab60 <__aeabi_dsub+0xa4>
    ae00:	000007ff 	.word	0x000007ff
    ae04:	ff7fffff 	.word	0xff7fffff
    ae08:	800fffff 	.word	0x800fffff
    ae0c:	2e00      	cmp	r6, #0
    ae0e:	d03e      	beq.n	ae8e <__aeabi_dsub+0x3d2>
    ae10:	4eb3      	ldr	r6, [pc, #716]	; (b0e0 <__aeabi_dsub+0x624>)
    ae12:	45b4      	cmp	ip, r6
    ae14:	d045      	beq.n	aea2 <__aeabi_dsub+0x3e6>
    ae16:	2680      	movs	r6, #128	; 0x80
    ae18:	0436      	lsls	r6, r6, #16
    ae1a:	426d      	negs	r5, r5
    ae1c:	4334      	orrs	r4, r6
    ae1e:	2d38      	cmp	r5, #56	; 0x38
    ae20:	dd00      	ble.n	ae24 <__aeabi_dsub+0x368>
    ae22:	e0a8      	b.n	af76 <__aeabi_dsub+0x4ba>
    ae24:	2d1f      	cmp	r5, #31
    ae26:	dd00      	ble.n	ae2a <__aeabi_dsub+0x36e>
    ae28:	e11f      	b.n	b06a <__aeabi_dsub+0x5ae>
    ae2a:	2620      	movs	r6, #32
    ae2c:	0027      	movs	r7, r4
    ae2e:	4650      	mov	r0, sl
    ae30:	1b76      	subs	r6, r6, r5
    ae32:	40b7      	lsls	r7, r6
    ae34:	40e8      	lsrs	r0, r5
    ae36:	4307      	orrs	r7, r0
    ae38:	4650      	mov	r0, sl
    ae3a:	40b0      	lsls	r0, r6
    ae3c:	1e46      	subs	r6, r0, #1
    ae3e:	41b0      	sbcs	r0, r6
    ae40:	40ec      	lsrs	r4, r5
    ae42:	4338      	orrs	r0, r7
    ae44:	1a17      	subs	r7, r2, r0
    ae46:	42ba      	cmp	r2, r7
    ae48:	4192      	sbcs	r2, r2
    ae4a:	1b0c      	subs	r4, r1, r4
    ae4c:	4252      	negs	r2, r2
    ae4e:	1aa4      	subs	r4, r4, r2
    ae50:	4666      	mov	r6, ip
    ae52:	4698      	mov	r8, r3
    ae54:	e68b      	b.n	ab6e <__aeabi_dsub+0xb2>
    ae56:	4664      	mov	r4, ip
    ae58:	4667      	mov	r7, ip
    ae5a:	432c      	orrs	r4, r5
    ae5c:	d000      	beq.n	ae60 <__aeabi_dsub+0x3a4>
    ae5e:	e68b      	b.n	ab78 <__aeabi_dsub+0xbc>
    ae60:	2500      	movs	r5, #0
    ae62:	2600      	movs	r6, #0
    ae64:	2700      	movs	r7, #0
    ae66:	e6ea      	b.n	ac3e <__aeabi_dsub+0x182>
    ae68:	001e      	movs	r6, r3
    ae6a:	e6ad      	b.n	abc8 <__aeabi_dsub+0x10c>
    ae6c:	2b1f      	cmp	r3, #31
    ae6e:	dc60      	bgt.n	af32 <__aeabi_dsub+0x476>
    ae70:	2720      	movs	r7, #32
    ae72:	1af8      	subs	r0, r7, r3
    ae74:	000f      	movs	r7, r1
    ae76:	4684      	mov	ip, r0
    ae78:	4087      	lsls	r7, r0
    ae7a:	0010      	movs	r0, r2
    ae7c:	40d8      	lsrs	r0, r3
    ae7e:	4307      	orrs	r7, r0
    ae80:	4660      	mov	r0, ip
    ae82:	4082      	lsls	r2, r0
    ae84:	1e50      	subs	r0, r2, #1
    ae86:	4182      	sbcs	r2, r0
    ae88:	40d9      	lsrs	r1, r3
    ae8a:	4317      	orrs	r7, r2
    ae8c:	e6f5      	b.n	ac7a <__aeabi_dsub+0x1be>
    ae8e:	0026      	movs	r6, r4
    ae90:	4650      	mov	r0, sl
    ae92:	4306      	orrs	r6, r0
    ae94:	d005      	beq.n	aea2 <__aeabi_dsub+0x3e6>
    ae96:	43ed      	mvns	r5, r5
    ae98:	2d00      	cmp	r5, #0
    ae9a:	d0d3      	beq.n	ae44 <__aeabi_dsub+0x388>
    ae9c:	4e90      	ldr	r6, [pc, #576]	; (b0e0 <__aeabi_dsub+0x624>)
    ae9e:	45b4      	cmp	ip, r6
    aea0:	d1bd      	bne.n	ae1e <__aeabi_dsub+0x362>
    aea2:	000c      	movs	r4, r1
    aea4:	0017      	movs	r7, r2
    aea6:	4666      	mov	r6, ip
    aea8:	4698      	mov	r8, r3
    aeaa:	e68d      	b.n	abc8 <__aeabi_dsub+0x10c>
    aeac:	488c      	ldr	r0, [pc, #560]	; (b0e0 <__aeabi_dsub+0x624>)
    aeae:	4283      	cmp	r3, r0
    aeb0:	d00b      	beq.n	aeca <__aeabi_dsub+0x40e>
    aeb2:	4663      	mov	r3, ip
    aeb4:	e6d9      	b.n	ac6a <__aeabi_dsub+0x1ae>
    aeb6:	2d00      	cmp	r5, #0
    aeb8:	d000      	beq.n	aebc <__aeabi_dsub+0x400>
    aeba:	e096      	b.n	afea <__aeabi_dsub+0x52e>
    aebc:	0008      	movs	r0, r1
    aebe:	4310      	orrs	r0, r2
    aec0:	d100      	bne.n	aec4 <__aeabi_dsub+0x408>
    aec2:	e0e2      	b.n	b08a <__aeabi_dsub+0x5ce>
    aec4:	000c      	movs	r4, r1
    aec6:	0017      	movs	r7, r2
    aec8:	4698      	mov	r8, r3
    aeca:	4e85      	ldr	r6, [pc, #532]	; (b0e0 <__aeabi_dsub+0x624>)
    aecc:	e67c      	b.n	abc8 <__aeabi_dsub+0x10c>
    aece:	2500      	movs	r5, #0
    aed0:	e780      	b.n	add4 <__aeabi_dsub+0x318>
    aed2:	2100      	movs	r1, #0
    aed4:	e78e      	b.n	adf4 <__aeabi_dsub+0x338>
    aed6:	0023      	movs	r3, r4
    aed8:	4650      	mov	r0, sl
    aeda:	4303      	orrs	r3, r0
    aedc:	2e00      	cmp	r6, #0
    aede:	d000      	beq.n	aee2 <__aeabi_dsub+0x426>
    aee0:	e0a8      	b.n	b034 <__aeabi_dsub+0x578>
    aee2:	2b00      	cmp	r3, #0
    aee4:	d100      	bne.n	aee8 <__aeabi_dsub+0x42c>
    aee6:	e0de      	b.n	b0a6 <__aeabi_dsub+0x5ea>
    aee8:	000b      	movs	r3, r1
    aeea:	4313      	orrs	r3, r2
    aeec:	d100      	bne.n	aef0 <__aeabi_dsub+0x434>
    aeee:	e66b      	b.n	abc8 <__aeabi_dsub+0x10c>
    aef0:	4452      	add	r2, sl
    aef2:	4552      	cmp	r2, sl
    aef4:	4180      	sbcs	r0, r0
    aef6:	1864      	adds	r4, r4, r1
    aef8:	4240      	negs	r0, r0
    aefa:	1824      	adds	r4, r4, r0
    aefc:	0017      	movs	r7, r2
    aefe:	0223      	lsls	r3, r4, #8
    af00:	d400      	bmi.n	af04 <__aeabi_dsub+0x448>
    af02:	e6fd      	b.n	ad00 <__aeabi_dsub+0x244>
    af04:	4b77      	ldr	r3, [pc, #476]	; (b0e4 <__aeabi_dsub+0x628>)
    af06:	4666      	mov	r6, ip
    af08:	401c      	ands	r4, r3
    af0a:	e65d      	b.n	abc8 <__aeabi_dsub+0x10c>
    af0c:	0025      	movs	r5, r4
    af0e:	4650      	mov	r0, sl
    af10:	4305      	orrs	r5, r0
    af12:	2e00      	cmp	r6, #0
    af14:	d1cf      	bne.n	aeb6 <__aeabi_dsub+0x3fa>
    af16:	2d00      	cmp	r5, #0
    af18:	d14f      	bne.n	afba <__aeabi_dsub+0x4fe>
    af1a:	000c      	movs	r4, r1
    af1c:	4314      	orrs	r4, r2
    af1e:	d100      	bne.n	af22 <__aeabi_dsub+0x466>
    af20:	e0a0      	b.n	b064 <__aeabi_dsub+0x5a8>
    af22:	000c      	movs	r4, r1
    af24:	0017      	movs	r7, r2
    af26:	4698      	mov	r8, r3
    af28:	e64e      	b.n	abc8 <__aeabi_dsub+0x10c>
    af2a:	4666      	mov	r6, ip
    af2c:	2400      	movs	r4, #0
    af2e:	2700      	movs	r7, #0
    af30:	e685      	b.n	ac3e <__aeabi_dsub+0x182>
    af32:	001f      	movs	r7, r3
    af34:	0008      	movs	r0, r1
    af36:	3f20      	subs	r7, #32
    af38:	40f8      	lsrs	r0, r7
    af3a:	0007      	movs	r7, r0
    af3c:	2b20      	cmp	r3, #32
    af3e:	d100      	bne.n	af42 <__aeabi_dsub+0x486>
    af40:	e08e      	b.n	b060 <__aeabi_dsub+0x5a4>
    af42:	2040      	movs	r0, #64	; 0x40
    af44:	1ac3      	subs	r3, r0, r3
    af46:	4099      	lsls	r1, r3
    af48:	430a      	orrs	r2, r1
    af4a:	1e51      	subs	r1, r2, #1
    af4c:	418a      	sbcs	r2, r1
    af4e:	2100      	movs	r1, #0
    af50:	4317      	orrs	r7, r2
    af52:	e692      	b.n	ac7a <__aeabi_dsub+0x1be>
    af54:	2e00      	cmp	r6, #0
    af56:	d114      	bne.n	af82 <__aeabi_dsub+0x4c6>
    af58:	0026      	movs	r6, r4
    af5a:	4650      	mov	r0, sl
    af5c:	4306      	orrs	r6, r0
    af5e:	d062      	beq.n	b026 <__aeabi_dsub+0x56a>
    af60:	43db      	mvns	r3, r3
    af62:	2b00      	cmp	r3, #0
    af64:	d15c      	bne.n	b020 <__aeabi_dsub+0x564>
    af66:	1887      	adds	r7, r0, r2
    af68:	4297      	cmp	r7, r2
    af6a:	4192      	sbcs	r2, r2
    af6c:	1864      	adds	r4, r4, r1
    af6e:	4252      	negs	r2, r2
    af70:	18a4      	adds	r4, r4, r2
    af72:	4666      	mov	r6, ip
    af74:	e687      	b.n	ac86 <__aeabi_dsub+0x1ca>
    af76:	4650      	mov	r0, sl
    af78:	4320      	orrs	r0, r4
    af7a:	1e44      	subs	r4, r0, #1
    af7c:	41a0      	sbcs	r0, r4
    af7e:	2400      	movs	r4, #0
    af80:	e760      	b.n	ae44 <__aeabi_dsub+0x388>
    af82:	4e57      	ldr	r6, [pc, #348]	; (b0e0 <__aeabi_dsub+0x624>)
    af84:	45b4      	cmp	ip, r6
    af86:	d04e      	beq.n	b026 <__aeabi_dsub+0x56a>
    af88:	2680      	movs	r6, #128	; 0x80
    af8a:	0436      	lsls	r6, r6, #16
    af8c:	425b      	negs	r3, r3
    af8e:	4334      	orrs	r4, r6
    af90:	2b38      	cmp	r3, #56	; 0x38
    af92:	dd00      	ble.n	af96 <__aeabi_dsub+0x4da>
    af94:	e07f      	b.n	b096 <__aeabi_dsub+0x5da>
    af96:	2b1f      	cmp	r3, #31
    af98:	dd00      	ble.n	af9c <__aeabi_dsub+0x4e0>
    af9a:	e08b      	b.n	b0b4 <__aeabi_dsub+0x5f8>
    af9c:	2620      	movs	r6, #32
    af9e:	0027      	movs	r7, r4
    afa0:	4650      	mov	r0, sl
    afa2:	1af6      	subs	r6, r6, r3
    afa4:	40b7      	lsls	r7, r6
    afa6:	40d8      	lsrs	r0, r3
    afa8:	4307      	orrs	r7, r0
    afaa:	4650      	mov	r0, sl
    afac:	40b0      	lsls	r0, r6
    afae:	1e46      	subs	r6, r0, #1
    afb0:	41b0      	sbcs	r0, r6
    afb2:	4307      	orrs	r7, r0
    afb4:	40dc      	lsrs	r4, r3
    afb6:	18bf      	adds	r7, r7, r2
    afb8:	e7d6      	b.n	af68 <__aeabi_dsub+0x4ac>
    afba:	000d      	movs	r5, r1
    afbc:	4315      	orrs	r5, r2
    afbe:	d100      	bne.n	afc2 <__aeabi_dsub+0x506>
    afc0:	e602      	b.n	abc8 <__aeabi_dsub+0x10c>
    afc2:	4650      	mov	r0, sl
    afc4:	1a80      	subs	r0, r0, r2
    afc6:	4582      	cmp	sl, r0
    afc8:	41bf      	sbcs	r7, r7
    afca:	1a65      	subs	r5, r4, r1
    afcc:	427f      	negs	r7, r7
    afce:	1bed      	subs	r5, r5, r7
    afd0:	4684      	mov	ip, r0
    afd2:	0228      	lsls	r0, r5, #8
    afd4:	d400      	bmi.n	afd8 <__aeabi_dsub+0x51c>
    afd6:	e68d      	b.n	acf4 <__aeabi_dsub+0x238>
    afd8:	4650      	mov	r0, sl
    afda:	1a17      	subs	r7, r2, r0
    afdc:	42ba      	cmp	r2, r7
    afde:	4192      	sbcs	r2, r2
    afe0:	1b0c      	subs	r4, r1, r4
    afe2:	4252      	negs	r2, r2
    afe4:	1aa4      	subs	r4, r4, r2
    afe6:	4698      	mov	r8, r3
    afe8:	e5ee      	b.n	abc8 <__aeabi_dsub+0x10c>
    afea:	000d      	movs	r5, r1
    afec:	4315      	orrs	r5, r2
    afee:	d100      	bne.n	aff2 <__aeabi_dsub+0x536>
    aff0:	e76b      	b.n	aeca <__aeabi_dsub+0x40e>
    aff2:	4650      	mov	r0, sl
    aff4:	0767      	lsls	r7, r4, #29
    aff6:	08c0      	lsrs	r0, r0, #3
    aff8:	4307      	orrs	r7, r0
    affa:	2080      	movs	r0, #128	; 0x80
    affc:	08e4      	lsrs	r4, r4, #3
    affe:	0300      	lsls	r0, r0, #12
    b000:	4204      	tst	r4, r0
    b002:	d007      	beq.n	b014 <__aeabi_dsub+0x558>
    b004:	08cd      	lsrs	r5, r1, #3
    b006:	4205      	tst	r5, r0
    b008:	d104      	bne.n	b014 <__aeabi_dsub+0x558>
    b00a:	002c      	movs	r4, r5
    b00c:	4698      	mov	r8, r3
    b00e:	08d7      	lsrs	r7, r2, #3
    b010:	0749      	lsls	r1, r1, #29
    b012:	430f      	orrs	r7, r1
    b014:	0f7b      	lsrs	r3, r7, #29
    b016:	00e4      	lsls	r4, r4, #3
    b018:	431c      	orrs	r4, r3
    b01a:	00ff      	lsls	r7, r7, #3
    b01c:	4e30      	ldr	r6, [pc, #192]	; (b0e0 <__aeabi_dsub+0x624>)
    b01e:	e5d3      	b.n	abc8 <__aeabi_dsub+0x10c>
    b020:	4e2f      	ldr	r6, [pc, #188]	; (b0e0 <__aeabi_dsub+0x624>)
    b022:	45b4      	cmp	ip, r6
    b024:	d1b4      	bne.n	af90 <__aeabi_dsub+0x4d4>
    b026:	000c      	movs	r4, r1
    b028:	0017      	movs	r7, r2
    b02a:	4666      	mov	r6, ip
    b02c:	e5cc      	b.n	abc8 <__aeabi_dsub+0x10c>
    b02e:	2700      	movs	r7, #0
    b030:	2400      	movs	r4, #0
    b032:	e5e8      	b.n	ac06 <__aeabi_dsub+0x14a>
    b034:	2b00      	cmp	r3, #0
    b036:	d039      	beq.n	b0ac <__aeabi_dsub+0x5f0>
    b038:	000b      	movs	r3, r1
    b03a:	4313      	orrs	r3, r2
    b03c:	d100      	bne.n	b040 <__aeabi_dsub+0x584>
    b03e:	e744      	b.n	aeca <__aeabi_dsub+0x40e>
    b040:	08c0      	lsrs	r0, r0, #3
    b042:	0767      	lsls	r7, r4, #29
    b044:	4307      	orrs	r7, r0
    b046:	2080      	movs	r0, #128	; 0x80
    b048:	08e4      	lsrs	r4, r4, #3
    b04a:	0300      	lsls	r0, r0, #12
    b04c:	4204      	tst	r4, r0
    b04e:	d0e1      	beq.n	b014 <__aeabi_dsub+0x558>
    b050:	08cb      	lsrs	r3, r1, #3
    b052:	4203      	tst	r3, r0
    b054:	d1de      	bne.n	b014 <__aeabi_dsub+0x558>
    b056:	08d7      	lsrs	r7, r2, #3
    b058:	0749      	lsls	r1, r1, #29
    b05a:	430f      	orrs	r7, r1
    b05c:	001c      	movs	r4, r3
    b05e:	e7d9      	b.n	b014 <__aeabi_dsub+0x558>
    b060:	2100      	movs	r1, #0
    b062:	e771      	b.n	af48 <__aeabi_dsub+0x48c>
    b064:	2500      	movs	r5, #0
    b066:	2700      	movs	r7, #0
    b068:	e5e9      	b.n	ac3e <__aeabi_dsub+0x182>
    b06a:	002e      	movs	r6, r5
    b06c:	0027      	movs	r7, r4
    b06e:	3e20      	subs	r6, #32
    b070:	40f7      	lsrs	r7, r6
    b072:	2d20      	cmp	r5, #32
    b074:	d02f      	beq.n	b0d6 <__aeabi_dsub+0x61a>
    b076:	2640      	movs	r6, #64	; 0x40
    b078:	1b75      	subs	r5, r6, r5
    b07a:	40ac      	lsls	r4, r5
    b07c:	4650      	mov	r0, sl
    b07e:	4320      	orrs	r0, r4
    b080:	1e44      	subs	r4, r0, #1
    b082:	41a0      	sbcs	r0, r4
    b084:	2400      	movs	r4, #0
    b086:	4338      	orrs	r0, r7
    b088:	e6dc      	b.n	ae44 <__aeabi_dsub+0x388>
    b08a:	2480      	movs	r4, #128	; 0x80
    b08c:	2500      	movs	r5, #0
    b08e:	0324      	lsls	r4, r4, #12
    b090:	4e13      	ldr	r6, [pc, #76]	; (b0e0 <__aeabi_dsub+0x624>)
    b092:	2700      	movs	r7, #0
    b094:	e5d3      	b.n	ac3e <__aeabi_dsub+0x182>
    b096:	4650      	mov	r0, sl
    b098:	4320      	orrs	r0, r4
    b09a:	0007      	movs	r7, r0
    b09c:	1e78      	subs	r0, r7, #1
    b09e:	4187      	sbcs	r7, r0
    b0a0:	2400      	movs	r4, #0
    b0a2:	18bf      	adds	r7, r7, r2
    b0a4:	e760      	b.n	af68 <__aeabi_dsub+0x4ac>
    b0a6:	000c      	movs	r4, r1
    b0a8:	0017      	movs	r7, r2
    b0aa:	e58d      	b.n	abc8 <__aeabi_dsub+0x10c>
    b0ac:	000c      	movs	r4, r1
    b0ae:	0017      	movs	r7, r2
    b0b0:	4e0b      	ldr	r6, [pc, #44]	; (b0e0 <__aeabi_dsub+0x624>)
    b0b2:	e589      	b.n	abc8 <__aeabi_dsub+0x10c>
    b0b4:	001e      	movs	r6, r3
    b0b6:	0027      	movs	r7, r4
    b0b8:	3e20      	subs	r6, #32
    b0ba:	40f7      	lsrs	r7, r6
    b0bc:	2b20      	cmp	r3, #32
    b0be:	d00c      	beq.n	b0da <__aeabi_dsub+0x61e>
    b0c0:	2640      	movs	r6, #64	; 0x40
    b0c2:	1af3      	subs	r3, r6, r3
    b0c4:	409c      	lsls	r4, r3
    b0c6:	4650      	mov	r0, sl
    b0c8:	4320      	orrs	r0, r4
    b0ca:	1e44      	subs	r4, r0, #1
    b0cc:	41a0      	sbcs	r0, r4
    b0ce:	4307      	orrs	r7, r0
    b0d0:	2400      	movs	r4, #0
    b0d2:	18bf      	adds	r7, r7, r2
    b0d4:	e748      	b.n	af68 <__aeabi_dsub+0x4ac>
    b0d6:	2400      	movs	r4, #0
    b0d8:	e7d0      	b.n	b07c <__aeabi_dsub+0x5c0>
    b0da:	2400      	movs	r4, #0
    b0dc:	e7f3      	b.n	b0c6 <__aeabi_dsub+0x60a>
    b0de:	46c0      	nop			; (mov r8, r8)
    b0e0:	000007ff 	.word	0x000007ff
    b0e4:	ff7fffff 	.word	0xff7fffff

0000b0e8 <__aeabi_dcmpun>:
    b0e8:	b570      	push	{r4, r5, r6, lr}
    b0ea:	4e0e      	ldr	r6, [pc, #56]	; (b124 <__aeabi_dcmpun+0x3c>)
    b0ec:	030d      	lsls	r5, r1, #12
    b0ee:	031c      	lsls	r4, r3, #12
    b0f0:	0049      	lsls	r1, r1, #1
    b0f2:	005b      	lsls	r3, r3, #1
    b0f4:	0b2d      	lsrs	r5, r5, #12
    b0f6:	0d49      	lsrs	r1, r1, #21
    b0f8:	0b24      	lsrs	r4, r4, #12
    b0fa:	0d5b      	lsrs	r3, r3, #21
    b0fc:	42b1      	cmp	r1, r6
    b0fe:	d004      	beq.n	b10a <__aeabi_dcmpun+0x22>
    b100:	4908      	ldr	r1, [pc, #32]	; (b124 <__aeabi_dcmpun+0x3c>)
    b102:	2000      	movs	r0, #0
    b104:	428b      	cmp	r3, r1
    b106:	d008      	beq.n	b11a <__aeabi_dcmpun+0x32>
    b108:	bd70      	pop	{r4, r5, r6, pc}
    b10a:	4305      	orrs	r5, r0
    b10c:	2001      	movs	r0, #1
    b10e:	2d00      	cmp	r5, #0
    b110:	d1fa      	bne.n	b108 <__aeabi_dcmpun+0x20>
    b112:	4904      	ldr	r1, [pc, #16]	; (b124 <__aeabi_dcmpun+0x3c>)
    b114:	2000      	movs	r0, #0
    b116:	428b      	cmp	r3, r1
    b118:	d1f6      	bne.n	b108 <__aeabi_dcmpun+0x20>
    b11a:	4314      	orrs	r4, r2
    b11c:	0020      	movs	r0, r4
    b11e:	1e44      	subs	r4, r0, #1
    b120:	41a0      	sbcs	r0, r4
    b122:	e7f1      	b.n	b108 <__aeabi_dcmpun+0x20>
    b124:	000007ff 	.word	0x000007ff

0000b128 <__aeabi_d2iz>:
    b128:	b530      	push	{r4, r5, lr}
    b12a:	4d13      	ldr	r5, [pc, #76]	; (b178 <__aeabi_d2iz+0x50>)
    b12c:	030a      	lsls	r2, r1, #12
    b12e:	004b      	lsls	r3, r1, #1
    b130:	0b12      	lsrs	r2, r2, #12
    b132:	0d5b      	lsrs	r3, r3, #21
    b134:	0fc9      	lsrs	r1, r1, #31
    b136:	2400      	movs	r4, #0
    b138:	42ab      	cmp	r3, r5
    b13a:	dd10      	ble.n	b15e <__aeabi_d2iz+0x36>
    b13c:	4c0f      	ldr	r4, [pc, #60]	; (b17c <__aeabi_d2iz+0x54>)
    b13e:	42a3      	cmp	r3, r4
    b140:	dc0f      	bgt.n	b162 <__aeabi_d2iz+0x3a>
    b142:	2480      	movs	r4, #128	; 0x80
    b144:	4d0e      	ldr	r5, [pc, #56]	; (b180 <__aeabi_d2iz+0x58>)
    b146:	0364      	lsls	r4, r4, #13
    b148:	4322      	orrs	r2, r4
    b14a:	1aed      	subs	r5, r5, r3
    b14c:	2d1f      	cmp	r5, #31
    b14e:	dd0b      	ble.n	b168 <__aeabi_d2iz+0x40>
    b150:	480c      	ldr	r0, [pc, #48]	; (b184 <__aeabi_d2iz+0x5c>)
    b152:	1ac3      	subs	r3, r0, r3
    b154:	40da      	lsrs	r2, r3
    b156:	4254      	negs	r4, r2
    b158:	2900      	cmp	r1, #0
    b15a:	d100      	bne.n	b15e <__aeabi_d2iz+0x36>
    b15c:	0014      	movs	r4, r2
    b15e:	0020      	movs	r0, r4
    b160:	bd30      	pop	{r4, r5, pc}
    b162:	4b09      	ldr	r3, [pc, #36]	; (b188 <__aeabi_d2iz+0x60>)
    b164:	18cc      	adds	r4, r1, r3
    b166:	e7fa      	b.n	b15e <__aeabi_d2iz+0x36>
    b168:	4c08      	ldr	r4, [pc, #32]	; (b18c <__aeabi_d2iz+0x64>)
    b16a:	40e8      	lsrs	r0, r5
    b16c:	46a4      	mov	ip, r4
    b16e:	4463      	add	r3, ip
    b170:	409a      	lsls	r2, r3
    b172:	4302      	orrs	r2, r0
    b174:	e7ef      	b.n	b156 <__aeabi_d2iz+0x2e>
    b176:	46c0      	nop			; (mov r8, r8)
    b178:	000003fe 	.word	0x000003fe
    b17c:	0000041d 	.word	0x0000041d
    b180:	00000433 	.word	0x00000433
    b184:	00000413 	.word	0x00000413
    b188:	7fffffff 	.word	0x7fffffff
    b18c:	fffffbed 	.word	0xfffffbed

0000b190 <__aeabi_i2d>:
    b190:	b570      	push	{r4, r5, r6, lr}
    b192:	2800      	cmp	r0, #0
    b194:	d030      	beq.n	b1f8 <__aeabi_i2d+0x68>
    b196:	17c3      	asrs	r3, r0, #31
    b198:	18c4      	adds	r4, r0, r3
    b19a:	405c      	eors	r4, r3
    b19c:	0fc5      	lsrs	r5, r0, #31
    b19e:	0020      	movs	r0, r4
    b1a0:	f000 f8c2 	bl	b328 <__clzsi2>
    b1a4:	4b17      	ldr	r3, [pc, #92]	; (b204 <__aeabi_i2d+0x74>)
    b1a6:	4a18      	ldr	r2, [pc, #96]	; (b208 <__aeabi_i2d+0x78>)
    b1a8:	1a1b      	subs	r3, r3, r0
    b1aa:	1ad2      	subs	r2, r2, r3
    b1ac:	2a1f      	cmp	r2, #31
    b1ae:	dd18      	ble.n	b1e2 <__aeabi_i2d+0x52>
    b1b0:	4a16      	ldr	r2, [pc, #88]	; (b20c <__aeabi_i2d+0x7c>)
    b1b2:	1ad2      	subs	r2, r2, r3
    b1b4:	4094      	lsls	r4, r2
    b1b6:	2200      	movs	r2, #0
    b1b8:	0324      	lsls	r4, r4, #12
    b1ba:	055b      	lsls	r3, r3, #21
    b1bc:	0b24      	lsrs	r4, r4, #12
    b1be:	0d5b      	lsrs	r3, r3, #21
    b1c0:	2100      	movs	r1, #0
    b1c2:	0010      	movs	r0, r2
    b1c4:	0324      	lsls	r4, r4, #12
    b1c6:	0d0a      	lsrs	r2, r1, #20
    b1c8:	0b24      	lsrs	r4, r4, #12
    b1ca:	0512      	lsls	r2, r2, #20
    b1cc:	4322      	orrs	r2, r4
    b1ce:	4c10      	ldr	r4, [pc, #64]	; (b210 <__aeabi_i2d+0x80>)
    b1d0:	051b      	lsls	r3, r3, #20
    b1d2:	4022      	ands	r2, r4
    b1d4:	4313      	orrs	r3, r2
    b1d6:	005b      	lsls	r3, r3, #1
    b1d8:	07ed      	lsls	r5, r5, #31
    b1da:	085b      	lsrs	r3, r3, #1
    b1dc:	432b      	orrs	r3, r5
    b1de:	0019      	movs	r1, r3
    b1e0:	bd70      	pop	{r4, r5, r6, pc}
    b1e2:	0021      	movs	r1, r4
    b1e4:	4091      	lsls	r1, r2
    b1e6:	000a      	movs	r2, r1
    b1e8:	210b      	movs	r1, #11
    b1ea:	1a08      	subs	r0, r1, r0
    b1ec:	40c4      	lsrs	r4, r0
    b1ee:	055b      	lsls	r3, r3, #21
    b1f0:	0324      	lsls	r4, r4, #12
    b1f2:	0b24      	lsrs	r4, r4, #12
    b1f4:	0d5b      	lsrs	r3, r3, #21
    b1f6:	e7e3      	b.n	b1c0 <__aeabi_i2d+0x30>
    b1f8:	2500      	movs	r5, #0
    b1fa:	2300      	movs	r3, #0
    b1fc:	2400      	movs	r4, #0
    b1fe:	2200      	movs	r2, #0
    b200:	e7de      	b.n	b1c0 <__aeabi_i2d+0x30>
    b202:	46c0      	nop			; (mov r8, r8)
    b204:	0000041e 	.word	0x0000041e
    b208:	00000433 	.word	0x00000433
    b20c:	00000413 	.word	0x00000413
    b210:	800fffff 	.word	0x800fffff

0000b214 <__aeabi_ui2d>:
    b214:	b510      	push	{r4, lr}
    b216:	1e04      	subs	r4, r0, #0
    b218:	d028      	beq.n	b26c <__aeabi_ui2d+0x58>
    b21a:	f000 f885 	bl	b328 <__clzsi2>
    b21e:	4b15      	ldr	r3, [pc, #84]	; (b274 <__aeabi_ui2d+0x60>)
    b220:	4a15      	ldr	r2, [pc, #84]	; (b278 <__aeabi_ui2d+0x64>)
    b222:	1a1b      	subs	r3, r3, r0
    b224:	1ad2      	subs	r2, r2, r3
    b226:	2a1f      	cmp	r2, #31
    b228:	dd15      	ble.n	b256 <__aeabi_ui2d+0x42>
    b22a:	4a14      	ldr	r2, [pc, #80]	; (b27c <__aeabi_ui2d+0x68>)
    b22c:	1ad2      	subs	r2, r2, r3
    b22e:	4094      	lsls	r4, r2
    b230:	2200      	movs	r2, #0
    b232:	0324      	lsls	r4, r4, #12
    b234:	055b      	lsls	r3, r3, #21
    b236:	0b24      	lsrs	r4, r4, #12
    b238:	0d5b      	lsrs	r3, r3, #21
    b23a:	2100      	movs	r1, #0
    b23c:	0010      	movs	r0, r2
    b23e:	0324      	lsls	r4, r4, #12
    b240:	0d0a      	lsrs	r2, r1, #20
    b242:	0b24      	lsrs	r4, r4, #12
    b244:	0512      	lsls	r2, r2, #20
    b246:	4322      	orrs	r2, r4
    b248:	4c0d      	ldr	r4, [pc, #52]	; (b280 <__aeabi_ui2d+0x6c>)
    b24a:	051b      	lsls	r3, r3, #20
    b24c:	4022      	ands	r2, r4
    b24e:	4313      	orrs	r3, r2
    b250:	005b      	lsls	r3, r3, #1
    b252:	0859      	lsrs	r1, r3, #1
    b254:	bd10      	pop	{r4, pc}
    b256:	0021      	movs	r1, r4
    b258:	4091      	lsls	r1, r2
    b25a:	000a      	movs	r2, r1
    b25c:	210b      	movs	r1, #11
    b25e:	1a08      	subs	r0, r1, r0
    b260:	40c4      	lsrs	r4, r0
    b262:	055b      	lsls	r3, r3, #21
    b264:	0324      	lsls	r4, r4, #12
    b266:	0b24      	lsrs	r4, r4, #12
    b268:	0d5b      	lsrs	r3, r3, #21
    b26a:	e7e6      	b.n	b23a <__aeabi_ui2d+0x26>
    b26c:	2300      	movs	r3, #0
    b26e:	2400      	movs	r4, #0
    b270:	2200      	movs	r2, #0
    b272:	e7e2      	b.n	b23a <__aeabi_ui2d+0x26>
    b274:	0000041e 	.word	0x0000041e
    b278:	00000433 	.word	0x00000433
    b27c:	00000413 	.word	0x00000413
    b280:	800fffff 	.word	0x800fffff

0000b284 <__aeabi_f2d>:
    b284:	0041      	lsls	r1, r0, #1
    b286:	0e09      	lsrs	r1, r1, #24
    b288:	1c4b      	adds	r3, r1, #1
    b28a:	b570      	push	{r4, r5, r6, lr}
    b28c:	b2db      	uxtb	r3, r3
    b28e:	0246      	lsls	r6, r0, #9
    b290:	0a75      	lsrs	r5, r6, #9
    b292:	0fc4      	lsrs	r4, r0, #31
    b294:	2b01      	cmp	r3, #1
    b296:	dd14      	ble.n	b2c2 <__aeabi_f2d+0x3e>
    b298:	23e0      	movs	r3, #224	; 0xe0
    b29a:	009b      	lsls	r3, r3, #2
    b29c:	076d      	lsls	r5, r5, #29
    b29e:	0b36      	lsrs	r6, r6, #12
    b2a0:	18cb      	adds	r3, r1, r3
    b2a2:	2100      	movs	r1, #0
    b2a4:	0d0a      	lsrs	r2, r1, #20
    b2a6:	0028      	movs	r0, r5
    b2a8:	0512      	lsls	r2, r2, #20
    b2aa:	4d1c      	ldr	r5, [pc, #112]	; (b31c <__aeabi_f2d+0x98>)
    b2ac:	4332      	orrs	r2, r6
    b2ae:	055b      	lsls	r3, r3, #21
    b2b0:	402a      	ands	r2, r5
    b2b2:	085b      	lsrs	r3, r3, #1
    b2b4:	4313      	orrs	r3, r2
    b2b6:	005b      	lsls	r3, r3, #1
    b2b8:	07e4      	lsls	r4, r4, #31
    b2ba:	085b      	lsrs	r3, r3, #1
    b2bc:	4323      	orrs	r3, r4
    b2be:	0019      	movs	r1, r3
    b2c0:	bd70      	pop	{r4, r5, r6, pc}
    b2c2:	2900      	cmp	r1, #0
    b2c4:	d114      	bne.n	b2f0 <__aeabi_f2d+0x6c>
    b2c6:	2d00      	cmp	r5, #0
    b2c8:	d01e      	beq.n	b308 <__aeabi_f2d+0x84>
    b2ca:	0028      	movs	r0, r5
    b2cc:	f000 f82c 	bl	b328 <__clzsi2>
    b2d0:	280a      	cmp	r0, #10
    b2d2:	dc1c      	bgt.n	b30e <__aeabi_f2d+0x8a>
    b2d4:	230b      	movs	r3, #11
    b2d6:	002a      	movs	r2, r5
    b2d8:	1a1b      	subs	r3, r3, r0
    b2da:	40da      	lsrs	r2, r3
    b2dc:	0003      	movs	r3, r0
    b2de:	3315      	adds	r3, #21
    b2e0:	409d      	lsls	r5, r3
    b2e2:	4b0f      	ldr	r3, [pc, #60]	; (b320 <__aeabi_f2d+0x9c>)
    b2e4:	0312      	lsls	r2, r2, #12
    b2e6:	1a1b      	subs	r3, r3, r0
    b2e8:	055b      	lsls	r3, r3, #21
    b2ea:	0b16      	lsrs	r6, r2, #12
    b2ec:	0d5b      	lsrs	r3, r3, #21
    b2ee:	e7d8      	b.n	b2a2 <__aeabi_f2d+0x1e>
    b2f0:	2d00      	cmp	r5, #0
    b2f2:	d006      	beq.n	b302 <__aeabi_f2d+0x7e>
    b2f4:	0b32      	lsrs	r2, r6, #12
    b2f6:	2680      	movs	r6, #128	; 0x80
    b2f8:	0336      	lsls	r6, r6, #12
    b2fa:	076d      	lsls	r5, r5, #29
    b2fc:	4316      	orrs	r6, r2
    b2fe:	4b09      	ldr	r3, [pc, #36]	; (b324 <__aeabi_f2d+0xa0>)
    b300:	e7cf      	b.n	b2a2 <__aeabi_f2d+0x1e>
    b302:	4b08      	ldr	r3, [pc, #32]	; (b324 <__aeabi_f2d+0xa0>)
    b304:	2600      	movs	r6, #0
    b306:	e7cc      	b.n	b2a2 <__aeabi_f2d+0x1e>
    b308:	2300      	movs	r3, #0
    b30a:	2600      	movs	r6, #0
    b30c:	e7c9      	b.n	b2a2 <__aeabi_f2d+0x1e>
    b30e:	0003      	movs	r3, r0
    b310:	002a      	movs	r2, r5
    b312:	3b0b      	subs	r3, #11
    b314:	409a      	lsls	r2, r3
    b316:	2500      	movs	r5, #0
    b318:	e7e3      	b.n	b2e2 <__aeabi_f2d+0x5e>
    b31a:	46c0      	nop			; (mov r8, r8)
    b31c:	800fffff 	.word	0x800fffff
    b320:	00000389 	.word	0x00000389
    b324:	000007ff 	.word	0x000007ff

0000b328 <__clzsi2>:
    b328:	211c      	movs	r1, #28
    b32a:	2301      	movs	r3, #1
    b32c:	041b      	lsls	r3, r3, #16
    b32e:	4298      	cmp	r0, r3
    b330:	d301      	bcc.n	b336 <__clzsi2+0xe>
    b332:	0c00      	lsrs	r0, r0, #16
    b334:	3910      	subs	r1, #16
    b336:	0a1b      	lsrs	r3, r3, #8
    b338:	4298      	cmp	r0, r3
    b33a:	d301      	bcc.n	b340 <__clzsi2+0x18>
    b33c:	0a00      	lsrs	r0, r0, #8
    b33e:	3908      	subs	r1, #8
    b340:	091b      	lsrs	r3, r3, #4
    b342:	4298      	cmp	r0, r3
    b344:	d301      	bcc.n	b34a <__clzsi2+0x22>
    b346:	0900      	lsrs	r0, r0, #4
    b348:	3904      	subs	r1, #4
    b34a:	a202      	add	r2, pc, #8	; (adr r2, b354 <__clzsi2+0x2c>)
    b34c:	5c10      	ldrb	r0, [r2, r0]
    b34e:	1840      	adds	r0, r0, r1
    b350:	4770      	bx	lr
    b352:	46c0      	nop			; (mov r8, r8)
    b354:	02020304 	.word	0x02020304
    b358:	01010101 	.word	0x01010101
	...

0000b364 <__clzdi2>:
    b364:	b510      	push	{r4, lr}
    b366:	2900      	cmp	r1, #0
    b368:	d103      	bne.n	b372 <__clzdi2+0xe>
    b36a:	f7ff ffdd 	bl	b328 <__clzsi2>
    b36e:	3020      	adds	r0, #32
    b370:	e002      	b.n	b378 <__clzdi2+0x14>
    b372:	1c08      	adds	r0, r1, #0
    b374:	f7ff ffd8 	bl	b328 <__clzsi2>
    b378:	bd10      	pop	{r4, pc}
    b37a:	46c0      	nop			; (mov r8, r8)

0000b37c <__ctzsi2>:
    b37c:	4241      	negs	r1, r0
    b37e:	4008      	ands	r0, r1
    b380:	211c      	movs	r1, #28
    b382:	2301      	movs	r3, #1
    b384:	041b      	lsls	r3, r3, #16
    b386:	4298      	cmp	r0, r3
    b388:	d301      	bcc.n	b38e <__ctzsi2+0x12>
    b38a:	0c00      	lsrs	r0, r0, #16
    b38c:	3910      	subs	r1, #16
    b38e:	0a1b      	lsrs	r3, r3, #8
    b390:	4298      	cmp	r0, r3
    b392:	d301      	bcc.n	b398 <__ctzsi2+0x1c>
    b394:	0a00      	lsrs	r0, r0, #8
    b396:	3908      	subs	r1, #8
    b398:	091b      	lsrs	r3, r3, #4
    b39a:	4298      	cmp	r0, r3
    b39c:	d301      	bcc.n	b3a2 <__ctzsi2+0x26>
    b39e:	0900      	lsrs	r0, r0, #4
    b3a0:	3904      	subs	r1, #4
    b3a2:	a202      	add	r2, pc, #8	; (adr r2, b3ac <__ctzsi2+0x30>)
    b3a4:	5c10      	ldrb	r0, [r2, r0]
    b3a6:	1a40      	subs	r0, r0, r1
    b3a8:	4770      	bx	lr
    b3aa:	46c0      	nop			; (mov r8, r8)
    b3ac:	1d1d1c1b 	.word	0x1d1d1c1b
    b3b0:	1e1e1e1e 	.word	0x1e1e1e1e
    b3b4:	1f1f1f1f 	.word	0x1f1f1f1f
    b3b8:	1f1f1f1f 	.word	0x1f1f1f1f

0000b3bc <__cxa_atexit>:
    b3bc:	b510      	push	{r4, lr}
    b3be:	0013      	movs	r3, r2
    b3c0:	000a      	movs	r2, r1
    b3c2:	0001      	movs	r1, r0
    b3c4:	2002      	movs	r0, #2
    b3c6:	f001 fd15 	bl	cdf4 <__register_exitproc>
    b3ca:	bd10      	pop	{r4, pc}

0000b3cc <__errno>:
    b3cc:	4b01      	ldr	r3, [pc, #4]	; (b3d4 <__errno+0x8>)
    b3ce:	6818      	ldr	r0, [r3, #0]
    b3d0:	4770      	bx	lr
    b3d2:	46c0      	nop			; (mov r8, r8)
    b3d4:	20000070 	.word	0x20000070

0000b3d8 <__libc_init_array>:
    b3d8:	b570      	push	{r4, r5, r6, lr}
    b3da:	4e0d      	ldr	r6, [pc, #52]	; (b410 <__libc_init_array+0x38>)
    b3dc:	4d0d      	ldr	r5, [pc, #52]	; (b414 <__libc_init_array+0x3c>)
    b3de:	2400      	movs	r4, #0
    b3e0:	1bad      	subs	r5, r5, r6
    b3e2:	10ad      	asrs	r5, r5, #2
    b3e4:	d005      	beq.n	b3f2 <__libc_init_array+0x1a>
    b3e6:	00a3      	lsls	r3, r4, #2
    b3e8:	58f3      	ldr	r3, [r6, r3]
    b3ea:	3401      	adds	r4, #1
    b3ec:	4798      	blx	r3
    b3ee:	42a5      	cmp	r5, r4
    b3f0:	d1f9      	bne.n	b3e6 <__libc_init_array+0xe>
    b3f2:	f005 fb75 	bl	10ae0 <_init>
    b3f6:	4e08      	ldr	r6, [pc, #32]	; (b418 <__libc_init_array+0x40>)
    b3f8:	4d08      	ldr	r5, [pc, #32]	; (b41c <__libc_init_array+0x44>)
    b3fa:	2400      	movs	r4, #0
    b3fc:	1bad      	subs	r5, r5, r6
    b3fe:	10ad      	asrs	r5, r5, #2
    b400:	d005      	beq.n	b40e <__libc_init_array+0x36>
    b402:	00a3      	lsls	r3, r4, #2
    b404:	58f3      	ldr	r3, [r6, r3]
    b406:	3401      	adds	r4, #1
    b408:	4798      	blx	r3
    b40a:	42a5      	cmp	r5, r4
    b40c:	d1f9      	bne.n	b402 <__libc_init_array+0x2a>
    b40e:	bd70      	pop	{r4, r5, r6, pc}
    b410:	00010aec 	.word	0x00010aec
    b414:	00010aec 	.word	0x00010aec
    b418:	00010aec 	.word	0x00010aec
    b41c:	00010b10 	.word	0x00010b10

0000b420 <memcpy>:
    b420:	b5f0      	push	{r4, r5, r6, r7, lr}
    b422:	0005      	movs	r5, r0
    b424:	2a0f      	cmp	r2, #15
    b426:	d92f      	bls.n	b488 <memcpy+0x68>
    b428:	000b      	movs	r3, r1
    b42a:	4303      	orrs	r3, r0
    b42c:	079b      	lsls	r3, r3, #30
    b42e:	d134      	bne.n	b49a <memcpy+0x7a>
    b430:	0016      	movs	r6, r2
    b432:	000c      	movs	r4, r1
    b434:	0003      	movs	r3, r0
    b436:	3e10      	subs	r6, #16
    b438:	0935      	lsrs	r5, r6, #4
    b43a:	3501      	adds	r5, #1
    b43c:	012d      	lsls	r5, r5, #4
    b43e:	1945      	adds	r5, r0, r5
    b440:	6827      	ldr	r7, [r4, #0]
    b442:	601f      	str	r7, [r3, #0]
    b444:	6867      	ldr	r7, [r4, #4]
    b446:	605f      	str	r7, [r3, #4]
    b448:	68a7      	ldr	r7, [r4, #8]
    b44a:	609f      	str	r7, [r3, #8]
    b44c:	68e7      	ldr	r7, [r4, #12]
    b44e:	3410      	adds	r4, #16
    b450:	60df      	str	r7, [r3, #12]
    b452:	3310      	adds	r3, #16
    b454:	429d      	cmp	r5, r3
    b456:	d1f3      	bne.n	b440 <memcpy+0x20>
    b458:	230f      	movs	r3, #15
    b45a:	439e      	bics	r6, r3
    b45c:	3610      	adds	r6, #16
    b45e:	1985      	adds	r5, r0, r6
    b460:	1989      	adds	r1, r1, r6
    b462:	4013      	ands	r3, r2
    b464:	2b03      	cmp	r3, #3
    b466:	d91a      	bls.n	b49e <memcpy+0x7e>
    b468:	1f1e      	subs	r6, r3, #4
    b46a:	2300      	movs	r3, #0
    b46c:	08b4      	lsrs	r4, r6, #2
    b46e:	3401      	adds	r4, #1
    b470:	00a4      	lsls	r4, r4, #2
    b472:	58cf      	ldr	r7, [r1, r3]
    b474:	50ef      	str	r7, [r5, r3]
    b476:	3304      	adds	r3, #4
    b478:	42a3      	cmp	r3, r4
    b47a:	d1fa      	bne.n	b472 <memcpy+0x52>
    b47c:	2403      	movs	r4, #3
    b47e:	43a6      	bics	r6, r4
    b480:	1d33      	adds	r3, r6, #4
    b482:	4022      	ands	r2, r4
    b484:	18c9      	adds	r1, r1, r3
    b486:	18ed      	adds	r5, r5, r3
    b488:	2a00      	cmp	r2, #0
    b48a:	d005      	beq.n	b498 <memcpy+0x78>
    b48c:	2300      	movs	r3, #0
    b48e:	5ccc      	ldrb	r4, [r1, r3]
    b490:	54ec      	strb	r4, [r5, r3]
    b492:	3301      	adds	r3, #1
    b494:	4293      	cmp	r3, r2
    b496:	d1fa      	bne.n	b48e <memcpy+0x6e>
    b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b49a:	0005      	movs	r5, r0
    b49c:	e7f6      	b.n	b48c <memcpy+0x6c>
    b49e:	001a      	movs	r2, r3
    b4a0:	e7f2      	b.n	b488 <memcpy+0x68>
    b4a2:	46c0      	nop			; (mov r8, r8)

0000b4a4 <memset>:
    b4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4a6:	0783      	lsls	r3, r0, #30
    b4a8:	d043      	beq.n	b532 <memset+0x8e>
    b4aa:	1e54      	subs	r4, r2, #1
    b4ac:	2a00      	cmp	r2, #0
    b4ae:	d03f      	beq.n	b530 <memset+0x8c>
    b4b0:	b2ce      	uxtb	r6, r1
    b4b2:	0002      	movs	r2, r0
    b4b4:	2503      	movs	r5, #3
    b4b6:	e002      	b.n	b4be <memset+0x1a>
    b4b8:	001a      	movs	r2, r3
    b4ba:	3c01      	subs	r4, #1
    b4bc:	d338      	bcc.n	b530 <memset+0x8c>
    b4be:	1c53      	adds	r3, r2, #1
    b4c0:	7016      	strb	r6, [r2, #0]
    b4c2:	422b      	tst	r3, r5
    b4c4:	d1f8      	bne.n	b4b8 <memset+0x14>
    b4c6:	2c03      	cmp	r4, #3
    b4c8:	d92a      	bls.n	b520 <memset+0x7c>
    b4ca:	22ff      	movs	r2, #255	; 0xff
    b4cc:	400a      	ands	r2, r1
    b4ce:	0215      	lsls	r5, r2, #8
    b4d0:	4315      	orrs	r5, r2
    b4d2:	042a      	lsls	r2, r5, #16
    b4d4:	4315      	orrs	r5, r2
    b4d6:	2c0f      	cmp	r4, #15
    b4d8:	d914      	bls.n	b504 <memset+0x60>
    b4da:	0027      	movs	r7, r4
    b4dc:	001a      	movs	r2, r3
    b4de:	3f10      	subs	r7, #16
    b4e0:	093e      	lsrs	r6, r7, #4
    b4e2:	3601      	adds	r6, #1
    b4e4:	0136      	lsls	r6, r6, #4
    b4e6:	199e      	adds	r6, r3, r6
    b4e8:	6015      	str	r5, [r2, #0]
    b4ea:	6055      	str	r5, [r2, #4]
    b4ec:	6095      	str	r5, [r2, #8]
    b4ee:	60d5      	str	r5, [r2, #12]
    b4f0:	3210      	adds	r2, #16
    b4f2:	4296      	cmp	r6, r2
    b4f4:	d1f8      	bne.n	b4e8 <memset+0x44>
    b4f6:	220f      	movs	r2, #15
    b4f8:	4397      	bics	r7, r2
    b4fa:	3710      	adds	r7, #16
    b4fc:	19db      	adds	r3, r3, r7
    b4fe:	4014      	ands	r4, r2
    b500:	2c03      	cmp	r4, #3
    b502:	d90d      	bls.n	b520 <memset+0x7c>
    b504:	001a      	movs	r2, r3
    b506:	1f27      	subs	r7, r4, #4
    b508:	08be      	lsrs	r6, r7, #2
    b50a:	3601      	adds	r6, #1
    b50c:	00b6      	lsls	r6, r6, #2
    b50e:	199e      	adds	r6, r3, r6
    b510:	c220      	stmia	r2!, {r5}
    b512:	42b2      	cmp	r2, r6
    b514:	d1fc      	bne.n	b510 <memset+0x6c>
    b516:	2203      	movs	r2, #3
    b518:	4397      	bics	r7, r2
    b51a:	3704      	adds	r7, #4
    b51c:	19db      	adds	r3, r3, r7
    b51e:	4014      	ands	r4, r2
    b520:	2c00      	cmp	r4, #0
    b522:	d005      	beq.n	b530 <memset+0x8c>
    b524:	b2c9      	uxtb	r1, r1
    b526:	191c      	adds	r4, r3, r4
    b528:	7019      	strb	r1, [r3, #0]
    b52a:	3301      	adds	r3, #1
    b52c:	429c      	cmp	r4, r3
    b52e:	d1fb      	bne.n	b528 <memset+0x84>
    b530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b532:	0014      	movs	r4, r2
    b534:	0003      	movs	r3, r0
    b536:	e7c6      	b.n	b4c6 <memset+0x22>

0000b538 <printf>:
    b538:	b40f      	push	{r0, r1, r2, r3}
    b53a:	b500      	push	{lr}
    b53c:	4906      	ldr	r1, [pc, #24]	; (b558 <printf+0x20>)
    b53e:	b083      	sub	sp, #12
    b540:	ab04      	add	r3, sp, #16
    b542:	6808      	ldr	r0, [r1, #0]
    b544:	cb04      	ldmia	r3!, {r2}
    b546:	6881      	ldr	r1, [r0, #8]
    b548:	9301      	str	r3, [sp, #4]
    b54a:	f000 f839 	bl	b5c0 <_vfprintf_r>
    b54e:	b003      	add	sp, #12
    b550:	bc08      	pop	{r3}
    b552:	b004      	add	sp, #16
    b554:	4718      	bx	r3
    b556:	46c0      	nop			; (mov r8, r8)
    b558:	20000070 	.word	0x20000070

0000b55c <strlen>:
    b55c:	b510      	push	{r4, lr}
    b55e:	0783      	lsls	r3, r0, #30
    b560:	d025      	beq.n	b5ae <strlen+0x52>
    b562:	7803      	ldrb	r3, [r0, #0]
    b564:	2b00      	cmp	r3, #0
    b566:	d024      	beq.n	b5b2 <strlen+0x56>
    b568:	0003      	movs	r3, r0
    b56a:	2103      	movs	r1, #3
    b56c:	e002      	b.n	b574 <strlen+0x18>
    b56e:	781a      	ldrb	r2, [r3, #0]
    b570:	2a00      	cmp	r2, #0
    b572:	d01a      	beq.n	b5aa <strlen+0x4e>
    b574:	3301      	adds	r3, #1
    b576:	420b      	tst	r3, r1
    b578:	d1f9      	bne.n	b56e <strlen+0x12>
    b57a:	6819      	ldr	r1, [r3, #0]
    b57c:	4a0e      	ldr	r2, [pc, #56]	; (b5b8 <strlen+0x5c>)
    b57e:	4c0f      	ldr	r4, [pc, #60]	; (b5bc <strlen+0x60>)
    b580:	188a      	adds	r2, r1, r2
    b582:	438a      	bics	r2, r1
    b584:	4222      	tst	r2, r4
    b586:	d106      	bne.n	b596 <strlen+0x3a>
    b588:	3304      	adds	r3, #4
    b58a:	6819      	ldr	r1, [r3, #0]
    b58c:	4a0a      	ldr	r2, [pc, #40]	; (b5b8 <strlen+0x5c>)
    b58e:	188a      	adds	r2, r1, r2
    b590:	438a      	bics	r2, r1
    b592:	4222      	tst	r2, r4
    b594:	d0f8      	beq.n	b588 <strlen+0x2c>
    b596:	001a      	movs	r2, r3
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	2b00      	cmp	r3, #0
    b59c:	d003      	beq.n	b5a6 <strlen+0x4a>
    b59e:	3201      	adds	r2, #1
    b5a0:	7811      	ldrb	r1, [r2, #0]
    b5a2:	2900      	cmp	r1, #0
    b5a4:	d1fb      	bne.n	b59e <strlen+0x42>
    b5a6:	1a10      	subs	r0, r2, r0
    b5a8:	bd10      	pop	{r4, pc}
    b5aa:	1a18      	subs	r0, r3, r0
    b5ac:	e7fc      	b.n	b5a8 <strlen+0x4c>
    b5ae:	0003      	movs	r3, r0
    b5b0:	e7e3      	b.n	b57a <strlen+0x1e>
    b5b2:	2000      	movs	r0, #0
    b5b4:	e7f8      	b.n	b5a8 <strlen+0x4c>
    b5b6:	46c0      	nop			; (mov r8, r8)
    b5b8:	fefefeff 	.word	0xfefefeff
    b5bc:	80808080 	.word	0x80808080

0000b5c0 <_vfprintf_r>:
    b5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5c2:	46de      	mov	lr, fp
    b5c4:	464e      	mov	r6, r9
    b5c6:	4645      	mov	r5, r8
    b5c8:	4657      	mov	r7, sl
    b5ca:	b5e0      	push	{r5, r6, r7, lr}
    b5cc:	b0c3      	sub	sp, #268	; 0x10c
    b5ce:	4689      	mov	r9, r1
    b5d0:	0014      	movs	r4, r2
    b5d2:	001d      	movs	r5, r3
    b5d4:	930f      	str	r3, [sp, #60]	; 0x3c
    b5d6:	0006      	movs	r6, r0
    b5d8:	9006      	str	r0, [sp, #24]
    b5da:	f003 f939 	bl	e850 <_localeconv_r>
    b5de:	6803      	ldr	r3, [r0, #0]
    b5e0:	0018      	movs	r0, r3
    b5e2:	9318      	str	r3, [sp, #96]	; 0x60
    b5e4:	f7ff ffba 	bl	b55c <strlen>
    b5e8:	9017      	str	r0, [sp, #92]	; 0x5c
    b5ea:	2e00      	cmp	r6, #0
    b5ec:	d004      	beq.n	b5f8 <_vfprintf_r+0x38>
    b5ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    b5f0:	9307      	str	r3, [sp, #28]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	d100      	bne.n	b5f8 <_vfprintf_r+0x38>
    b5f6:	e0a7      	b.n	b748 <_vfprintf_r+0x188>
    b5f8:	464b      	mov	r3, r9
    b5fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b5fc:	07db      	lsls	r3, r3, #31
    b5fe:	d478      	bmi.n	b6f2 <_vfprintf_r+0x132>
    b600:	464b      	mov	r3, r9
    b602:	210c      	movs	r1, #12
    b604:	5e59      	ldrsh	r1, [r3, r1]
    b606:	b28b      	uxth	r3, r1
    b608:	059a      	lsls	r2, r3, #22
    b60a:	d56e      	bpl.n	b6ea <_vfprintf_r+0x12a>
    b60c:	2280      	movs	r2, #128	; 0x80
    b60e:	0192      	lsls	r2, r2, #6
    b610:	4213      	tst	r3, r2
    b612:	d109      	bne.n	b628 <_vfprintf_r+0x68>
    b614:	430a      	orrs	r2, r1
    b616:	464b      	mov	r3, r9
    b618:	4649      	mov	r1, r9
    b61a:	819a      	strh	r2, [r3, #12]
    b61c:	6e49      	ldr	r1, [r1, #100]	; 0x64
    b61e:	4bcc      	ldr	r3, [pc, #816]	; (b950 <_vfprintf_r+0x390>)
    b620:	400b      	ands	r3, r1
    b622:	4649      	mov	r1, r9
    b624:	664b      	str	r3, [r1, #100]	; 0x64
    b626:	b293      	uxth	r3, r2
    b628:	071a      	lsls	r2, r3, #28
    b62a:	d567      	bpl.n	b6fc <_vfprintf_r+0x13c>
    b62c:	464a      	mov	r2, r9
    b62e:	6912      	ldr	r2, [r2, #16]
    b630:	2a00      	cmp	r2, #0
    b632:	d063      	beq.n	b6fc <_vfprintf_r+0x13c>
    b634:	221a      	movs	r2, #26
    b636:	401a      	ands	r2, r3
    b638:	2a0a      	cmp	r2, #10
    b63a:	d100      	bne.n	b63e <_vfprintf_r+0x7e>
    b63c:	e088      	b.n	b750 <_vfprintf_r+0x190>
    b63e:	ab32      	add	r3, sp, #200	; 0xc8
    b640:	9325      	str	r3, [sp, #148]	; 0x94
    b642:	2300      	movs	r3, #0
    b644:	46cb      	mov	fp, r9
    b646:	af25      	add	r7, sp, #148	; 0x94
    b648:	60bb      	str	r3, [r7, #8]
    b64a:	607b      	str	r3, [r7, #4]
    b64c:	9407      	str	r4, [sp, #28]
    b64e:	9314      	str	r3, [sp, #80]	; 0x50
    b650:	9316      	str	r3, [sp, #88]	; 0x58
    b652:	9315      	str	r3, [sp, #84]	; 0x54
    b654:	ae32      	add	r6, sp, #200	; 0xc8
    b656:	9319      	str	r3, [sp, #100]	; 0x64
    b658:	931a      	str	r3, [sp, #104]	; 0x68
    b65a:	930a      	str	r3, [sp, #40]	; 0x28
    b65c:	9c07      	ldr	r4, [sp, #28]
    b65e:	7823      	ldrb	r3, [r4, #0]
    b660:	2b00      	cmp	r3, #0
    b662:	d101      	bne.n	b668 <_vfprintf_r+0xa8>
    b664:	f000 fd9e 	bl	c1a4 <_vfprintf_r+0xbe4>
    b668:	2b25      	cmp	r3, #37	; 0x25
    b66a:	d103      	bne.n	b674 <_vfprintf_r+0xb4>
    b66c:	f000 fd9a 	bl	c1a4 <_vfprintf_r+0xbe4>
    b670:	2b25      	cmp	r3, #37	; 0x25
    b672:	d003      	beq.n	b67c <_vfprintf_r+0xbc>
    b674:	3401      	adds	r4, #1
    b676:	7823      	ldrb	r3, [r4, #0]
    b678:	2b00      	cmp	r3, #0
    b67a:	d1f9      	bne.n	b670 <_vfprintf_r+0xb0>
    b67c:	9b07      	ldr	r3, [sp, #28]
    b67e:	1ae5      	subs	r5, r4, r3
    b680:	d010      	beq.n	b6a4 <_vfprintf_r+0xe4>
    b682:	9b07      	ldr	r3, [sp, #28]
    b684:	6075      	str	r5, [r6, #4]
    b686:	6033      	str	r3, [r6, #0]
    b688:	68bb      	ldr	r3, [r7, #8]
    b68a:	195b      	adds	r3, r3, r5
    b68c:	60bb      	str	r3, [r7, #8]
    b68e:	687b      	ldr	r3, [r7, #4]
    b690:	3301      	adds	r3, #1
    b692:	607b      	str	r3, [r7, #4]
    b694:	2b07      	cmp	r3, #7
    b696:	dc4c      	bgt.n	b732 <_vfprintf_r+0x172>
    b698:	3608      	adds	r6, #8
    b69a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b69c:	469c      	mov	ip, r3
    b69e:	44ac      	add	ip, r5
    b6a0:	4663      	mov	r3, ip
    b6a2:	930a      	str	r3, [sp, #40]	; 0x28
    b6a4:	7823      	ldrb	r3, [r4, #0]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d101      	bne.n	b6ae <_vfprintf_r+0xee>
    b6aa:	f000 fc99 	bl	bfe0 <_vfprintf_r+0xa20>
    b6ae:	1c63      	adds	r3, r4, #1
    b6b0:	9307      	str	r3, [sp, #28]
    b6b2:	2300      	movs	r3, #0
    b6b4:	aa16      	add	r2, sp, #88	; 0x58
    b6b6:	77d3      	strb	r3, [r2, #31]
    b6b8:	2201      	movs	r2, #1
    b6ba:	4252      	negs	r2, r2
    b6bc:	4692      	mov	sl, r2
    b6be:	2200      	movs	r2, #0
    b6c0:	920b      	str	r2, [sp, #44]	; 0x2c
    b6c2:	3220      	adds	r2, #32
    b6c4:	4691      	mov	r9, r2
    b6c6:	3220      	adds	r2, #32
    b6c8:	7863      	ldrb	r3, [r4, #1]
    b6ca:	2100      	movs	r1, #0
    b6cc:	2000      	movs	r0, #0
    b6ce:	2400      	movs	r4, #0
    b6d0:	4694      	mov	ip, r2
    b6d2:	9a07      	ldr	r2, [sp, #28]
    b6d4:	3201      	adds	r2, #1
    b6d6:	9207      	str	r2, [sp, #28]
    b6d8:	001a      	movs	r2, r3
    b6da:	3a20      	subs	r2, #32
    b6dc:	2a58      	cmp	r2, #88	; 0x58
    b6de:	d900      	bls.n	b6e2 <_vfprintf_r+0x122>
    b6e0:	e2e7      	b.n	bcb2 <_vfprintf_r+0x6f2>
    b6e2:	4d9c      	ldr	r5, [pc, #624]	; (b954 <_vfprintf_r+0x394>)
    b6e4:	0092      	lsls	r2, r2, #2
    b6e6:	58aa      	ldr	r2, [r5, r2]
    b6e8:	4697      	mov	pc, r2
    b6ea:	464b      	mov	r3, r9
    b6ec:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b6ee:	f003 f8c1 	bl	e874 <__retarget_lock_acquire_recursive>
    b6f2:	464b      	mov	r3, r9
    b6f4:	210c      	movs	r1, #12
    b6f6:	5e59      	ldrsh	r1, [r3, r1]
    b6f8:	b28b      	uxth	r3, r1
    b6fa:	e787      	b.n	b60c <_vfprintf_r+0x4c>
    b6fc:	4649      	mov	r1, r9
    b6fe:	9806      	ldr	r0, [sp, #24]
    b700:	f001 fb0e 	bl	cd20 <__swsetup_r>
    b704:	464b      	mov	r3, r9
    b706:	2800      	cmp	r0, #0
    b708:	d03a      	beq.n	b780 <_vfprintf_r+0x1c0>
    b70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b70c:	07db      	lsls	r3, r3, #31
    b70e:	d405      	bmi.n	b71c <_vfprintf_r+0x15c>
    b710:	464b      	mov	r3, r9
    b712:	899b      	ldrh	r3, [r3, #12]
    b714:	059b      	lsls	r3, r3, #22
    b716:	d401      	bmi.n	b71c <_vfprintf_r+0x15c>
    b718:	f000 ffcf 	bl	c6ba <_vfprintf_r+0x10fa>
    b71c:	2301      	movs	r3, #1
    b71e:	425b      	negs	r3, r3
    b720:	930a      	str	r3, [sp, #40]	; 0x28
    b722:	980a      	ldr	r0, [sp, #40]	; 0x28
    b724:	b043      	add	sp, #268	; 0x10c
    b726:	bc3c      	pop	{r2, r3, r4, r5}
    b728:	4690      	mov	r8, r2
    b72a:	4699      	mov	r9, r3
    b72c:	46a2      	mov	sl, r4
    b72e:	46ab      	mov	fp, r5
    b730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b732:	003a      	movs	r2, r7
    b734:	4659      	mov	r1, fp
    b736:	9806      	ldr	r0, [sp, #24]
    b738:	f004 fa14 	bl	fb64 <__sprint_r>
    b73c:	2800      	cmp	r0, #0
    b73e:	d001      	beq.n	b744 <_vfprintf_r+0x184>
    b740:	f000 fcce 	bl	c0e0 <_vfprintf_r+0xb20>
    b744:	ae32      	add	r6, sp, #200	; 0xc8
    b746:	e7a8      	b.n	b69a <_vfprintf_r+0xda>
    b748:	9806      	ldr	r0, [sp, #24]
    b74a:	f002 fd51 	bl	e1f0 <__sinit>
    b74e:	e753      	b.n	b5f8 <_vfprintf_r+0x38>
    b750:	464a      	mov	r2, r9
    b752:	210e      	movs	r1, #14
    b754:	5e52      	ldrsh	r2, [r2, r1]
    b756:	2a00      	cmp	r2, #0
    b758:	da00      	bge.n	b75c <_vfprintf_r+0x19c>
    b75a:	e770      	b.n	b63e <_vfprintf_r+0x7e>
    b75c:	464a      	mov	r2, r9
    b75e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    b760:	07d2      	lsls	r2, r2, #31
    b762:	d405      	bmi.n	b770 <_vfprintf_r+0x1b0>
    b764:	059b      	lsls	r3, r3, #22
    b766:	d403      	bmi.n	b770 <_vfprintf_r+0x1b0>
    b768:	464b      	mov	r3, r9
    b76a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b76c:	f003 f884 	bl	e878 <__retarget_lock_release_recursive>
    b770:	002b      	movs	r3, r5
    b772:	0022      	movs	r2, r4
    b774:	4649      	mov	r1, r9
    b776:	9806      	ldr	r0, [sp, #24]
    b778:	f001 fa8e 	bl	cc98 <__sbprintf>
    b77c:	900a      	str	r0, [sp, #40]	; 0x28
    b77e:	e7d0      	b.n	b722 <_vfprintf_r+0x162>
    b780:	899b      	ldrh	r3, [r3, #12]
    b782:	e757      	b.n	b634 <_vfprintf_r+0x74>
    b784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b786:	920f      	str	r2, [sp, #60]	; 0x3c
    b788:	425b      	negs	r3, r3
    b78a:	930b      	str	r3, [sp, #44]	; 0x2c
    b78c:	2304      	movs	r3, #4
    b78e:	431c      	orrs	r4, r3
    b790:	9b07      	ldr	r3, [sp, #28]
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	e79d      	b.n	b6d2 <_vfprintf_r+0x112>
    b796:	9b07      	ldr	r3, [sp, #28]
    b798:	2101      	movs	r1, #1
    b79a:	781b      	ldrb	r3, [r3, #0]
    b79c:	202b      	movs	r0, #43	; 0x2b
    b79e:	e798      	b.n	b6d2 <_vfprintf_r+0x112>
    b7a0:	9b07      	ldr	r3, [sp, #28]
    b7a2:	1c5a      	adds	r2, r3, #1
    b7a4:	781b      	ldrb	r3, [r3, #0]
    b7a6:	4690      	mov	r8, r2
    b7a8:	2b2a      	cmp	r3, #42	; 0x2a
    b7aa:	d101      	bne.n	b7b0 <_vfprintf_r+0x1f0>
    b7ac:	f001 fa38 	bl	cc20 <_vfprintf_r+0x1660>
    b7b0:	001a      	movs	r2, r3
    b7b2:	2500      	movs	r5, #0
    b7b4:	3a30      	subs	r2, #48	; 0x30
    b7b6:	46aa      	mov	sl, r5
    b7b8:	2a09      	cmp	r2, #9
    b7ba:	d901      	bls.n	b7c0 <_vfprintf_r+0x200>
    b7bc:	f001 f96d 	bl	ca9a <_vfprintf_r+0x14da>
    b7c0:	0025      	movs	r5, r4
    b7c2:	4643      	mov	r3, r8
    b7c4:	4654      	mov	r4, sl
    b7c6:	4688      	mov	r8, r1
    b7c8:	4682      	mov	sl, r0
    b7ca:	00a1      	lsls	r1, r4, #2
    b7cc:	190c      	adds	r4, r1, r4
    b7ce:	7818      	ldrb	r0, [r3, #0]
    b7d0:	0064      	lsls	r4, r4, #1
    b7d2:	18a4      	adds	r4, r4, r2
    b7d4:	0002      	movs	r2, r0
    b7d6:	1c59      	adds	r1, r3, #1
    b7d8:	3a30      	subs	r2, #48	; 0x30
    b7da:	000b      	movs	r3, r1
    b7dc:	2a09      	cmp	r2, #9
    b7de:	d9f4      	bls.n	b7ca <_vfprintf_r+0x20a>
    b7e0:	9107      	str	r1, [sp, #28]
    b7e2:	0003      	movs	r3, r0
    b7e4:	4641      	mov	r1, r8
    b7e6:	4650      	mov	r0, sl
    b7e8:	46a2      	mov	sl, r4
    b7ea:	002c      	movs	r4, r5
    b7ec:	e774      	b.n	b6d8 <_vfprintf_r+0x118>
    b7ee:	9312      	str	r3, [sp, #72]	; 0x48
    b7f0:	2900      	cmp	r1, #0
    b7f2:	d001      	beq.n	b7f8 <_vfprintf_r+0x238>
    b7f4:	f001 fa2e 	bl	cc54 <_vfprintf_r+0x1694>
    b7f8:	4b57      	ldr	r3, [pc, #348]	; (b958 <_vfprintf_r+0x398>)
    b7fa:	9319      	str	r3, [sp, #100]	; 0x64
    b7fc:	06a3      	lsls	r3, r4, #26
    b7fe:	d501      	bpl.n	b804 <_vfprintf_r+0x244>
    b800:	f000 fe9a 	bl	c538 <_vfprintf_r+0xf78>
    b804:	06e3      	lsls	r3, r4, #27
    b806:	d501      	bpl.n	b80c <_vfprintf_r+0x24c>
    b808:	f000 fd9a 	bl	c340 <_vfprintf_r+0xd80>
    b80c:	0663      	lsls	r3, r4, #25
    b80e:	d401      	bmi.n	b814 <_vfprintf_r+0x254>
    b810:	f000 fd96 	bl	c340 <_vfprintf_r+0xd80>
    b814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b816:	881a      	ldrh	r2, [r3, #0]
    b818:	920c      	str	r2, [sp, #48]	; 0x30
    b81a:	2200      	movs	r2, #0
    b81c:	3304      	adds	r3, #4
    b81e:	920d      	str	r2, [sp, #52]	; 0x34
    b820:	930f      	str	r3, [sp, #60]	; 0x3c
    b822:	07e3      	lsls	r3, r4, #31
    b824:	d401      	bmi.n	b82a <_vfprintf_r+0x26a>
    b826:	f000 fd76 	bl	c316 <_vfprintf_r+0xd56>
    b82a:	990c      	ldr	r1, [sp, #48]	; 0x30
    b82c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b82e:	000b      	movs	r3, r1
    b830:	4313      	orrs	r3, r2
    b832:	001a      	movs	r2, r3
    b834:	2302      	movs	r3, #2
    b836:	2a00      	cmp	r2, #0
    b838:	d008      	beq.n	b84c <_vfprintf_r+0x28c>
    b83a:	2030      	movs	r0, #48	; 0x30
    b83c:	a91e      	add	r1, sp, #120	; 0x78
    b83e:	7008      	strb	r0, [r1, #0]
    b840:	2548      	movs	r5, #72	; 0x48
    b842:	4668      	mov	r0, sp
    b844:	1940      	adds	r0, r0, r5
    b846:	7800      	ldrb	r0, [r0, #0]
    b848:	431c      	orrs	r4, r3
    b84a:	7048      	strb	r0, [r1, #1]
    b84c:	2100      	movs	r1, #0
    b84e:	4688      	mov	r8, r1
    b850:	a816      	add	r0, sp, #88	; 0x58
    b852:	77c1      	strb	r1, [r0, #31]
    b854:	4651      	mov	r1, sl
    b856:	3101      	adds	r1, #1
    b858:	d100      	bne.n	b85c <_vfprintf_r+0x29c>
    b85a:	e0e6      	b.n	ba2a <_vfprintf_r+0x46a>
    b85c:	2180      	movs	r1, #128	; 0x80
    b85e:	0020      	movs	r0, r4
    b860:	4388      	bics	r0, r1
    b862:	9009      	str	r0, [sp, #36]	; 0x24
    b864:	2a00      	cmp	r2, #0
    b866:	d000      	beq.n	b86a <_vfprintf_r+0x2aa>
    b868:	e0e3      	b.n	ba32 <_vfprintf_r+0x472>
    b86a:	4652      	mov	r2, sl
    b86c:	2a00      	cmp	r2, #0
    b86e:	d001      	beq.n	b874 <_vfprintf_r+0x2b4>
    b870:	f000 fc38 	bl	c0e4 <_vfprintf_r+0xb24>
    b874:	2b00      	cmp	r3, #0
    b876:	d001      	beq.n	b87c <_vfprintf_r+0x2bc>
    b878:	f000 fd0c 	bl	c294 <_vfprintf_r+0xcd4>
    b87c:	2001      	movs	r0, #1
    b87e:	ab32      	add	r3, sp, #200	; 0xc8
    b880:	4020      	ands	r0, r4
    b882:	900e      	str	r0, [sp, #56]	; 0x38
    b884:	9311      	str	r3, [sp, #68]	; 0x44
    b886:	d008      	beq.n	b89a <_vfprintf_r+0x2da>
    b888:	2327      	movs	r3, #39	; 0x27
    b88a:	2130      	movs	r1, #48	; 0x30
    b88c:	aa28      	add	r2, sp, #160	; 0xa0
    b88e:	54d1      	strb	r1, [r2, r3]
    b890:	aa16      	add	r2, sp, #88	; 0x58
    b892:	4694      	mov	ip, r2
    b894:	3348      	adds	r3, #72	; 0x48
    b896:	4463      	add	r3, ip
    b898:	9311      	str	r3, [sp, #68]	; 0x44
    b89a:	4653      	mov	r3, sl
    b89c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b89e:	9308      	str	r3, [sp, #32]
    b8a0:	4592      	cmp	sl, r2
    b8a2:	da00      	bge.n	b8a6 <_vfprintf_r+0x2e6>
    b8a4:	9208      	str	r2, [sp, #32]
    b8a6:	2300      	movs	r3, #0
    b8a8:	9313      	str	r3, [sp, #76]	; 0x4c
    b8aa:	4643      	mov	r3, r8
    b8ac:	2b00      	cmp	r3, #0
    b8ae:	d002      	beq.n	b8b6 <_vfprintf_r+0x2f6>
    b8b0:	9b08      	ldr	r3, [sp, #32]
    b8b2:	3301      	adds	r3, #1
    b8b4:	9308      	str	r3, [sp, #32]
    b8b6:	2302      	movs	r3, #2
    b8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b8ba:	401a      	ands	r2, r3
    b8bc:	4691      	mov	r9, r2
    b8be:	d002      	beq.n	b8c6 <_vfprintf_r+0x306>
    b8c0:	9b08      	ldr	r3, [sp, #32]
    b8c2:	3302      	adds	r3, #2
    b8c4:	9308      	str	r3, [sp, #32]
    b8c6:	2384      	movs	r3, #132	; 0x84
    b8c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b8ca:	401a      	ands	r2, r3
    b8cc:	9210      	str	r2, [sp, #64]	; 0x40
    b8ce:	d000      	beq.n	b8d2 <_vfprintf_r+0x312>
    b8d0:	e207      	b.n	bce2 <_vfprintf_r+0x722>
    b8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b8d4:	9a08      	ldr	r2, [sp, #32]
    b8d6:	1a9c      	subs	r4, r3, r2
    b8d8:	2c00      	cmp	r4, #0
    b8da:	dc00      	bgt.n	b8de <_vfprintf_r+0x31e>
    b8dc:	e201      	b.n	bce2 <_vfprintf_r+0x722>
    b8de:	491f      	ldr	r1, [pc, #124]	; (b95c <_vfprintf_r+0x39c>)
    b8e0:	68ba      	ldr	r2, [r7, #8]
    b8e2:	687b      	ldr	r3, [r7, #4]
    b8e4:	4688      	mov	r8, r1
    b8e6:	2c10      	cmp	r4, #16
    b8e8:	dd21      	ble.n	b92e <_vfprintf_r+0x36e>
    b8ea:	0031      	movs	r1, r6
    b8ec:	2510      	movs	r5, #16
    b8ee:	465e      	mov	r6, fp
    b8f0:	e003      	b.n	b8fa <_vfprintf_r+0x33a>
    b8f2:	3c10      	subs	r4, #16
    b8f4:	3108      	adds	r1, #8
    b8f6:	2c10      	cmp	r4, #16
    b8f8:	dd17      	ble.n	b92a <_vfprintf_r+0x36a>
    b8fa:	4640      	mov	r0, r8
    b8fc:	3210      	adds	r2, #16
    b8fe:	3301      	adds	r3, #1
    b900:	6008      	str	r0, [r1, #0]
    b902:	604d      	str	r5, [r1, #4]
    b904:	60ba      	str	r2, [r7, #8]
    b906:	607b      	str	r3, [r7, #4]
    b908:	2b07      	cmp	r3, #7
    b90a:	ddf2      	ble.n	b8f2 <_vfprintf_r+0x332>
    b90c:	003a      	movs	r2, r7
    b90e:	0031      	movs	r1, r6
    b910:	9806      	ldr	r0, [sp, #24]
    b912:	f004 f927 	bl	fb64 <__sprint_r>
    b916:	2800      	cmp	r0, #0
    b918:	d001      	beq.n	b91e <_vfprintf_r+0x35e>
    b91a:	f000 fccf 	bl	c2bc <_vfprintf_r+0xcfc>
    b91e:	3c10      	subs	r4, #16
    b920:	68ba      	ldr	r2, [r7, #8]
    b922:	687b      	ldr	r3, [r7, #4]
    b924:	a932      	add	r1, sp, #200	; 0xc8
    b926:	2c10      	cmp	r4, #16
    b928:	dce7      	bgt.n	b8fa <_vfprintf_r+0x33a>
    b92a:	46b3      	mov	fp, r6
    b92c:	000e      	movs	r6, r1
    b92e:	4641      	mov	r1, r8
    b930:	6074      	str	r4, [r6, #4]
    b932:	3301      	adds	r3, #1
    b934:	18a4      	adds	r4, r4, r2
    b936:	6031      	str	r1, [r6, #0]
    b938:	60bc      	str	r4, [r7, #8]
    b93a:	607b      	str	r3, [r7, #4]
    b93c:	2b07      	cmp	r3, #7
    b93e:	dd01      	ble.n	b944 <_vfprintf_r+0x384>
    b940:	f000 fcae 	bl	c2a0 <_vfprintf_r+0xce0>
    b944:	ab16      	add	r3, sp, #88	; 0x58
    b946:	7fdb      	ldrb	r3, [r3, #31]
    b948:	3608      	adds	r6, #8
    b94a:	4698      	mov	r8, r3
    b94c:	e1ca      	b.n	bce4 <_vfprintf_r+0x724>
    b94e:	46c0      	nop			; (mov r8, r8)
    b950:	ffffdfff 	.word	0xffffdfff
    b954:	000106fc 	.word	0x000106fc
    b958:	0001087c 	.word	0x0001087c
    b95c:	0001089c 	.word	0x0001089c
    b960:	2200      	movs	r2, #0
    b962:	9d07      	ldr	r5, [sp, #28]
    b964:	3b30      	subs	r3, #48	; 0x30
    b966:	46a8      	mov	r8, r5
    b968:	920b      	str	r2, [sp, #44]	; 0x2c
    b96a:	001a      	movs	r2, r3
    b96c:	9408      	str	r4, [sp, #32]
    b96e:	002c      	movs	r4, r5
    b970:	4655      	mov	r5, sl
    b972:	4682      	mov	sl, r0
    b974:	4640      	mov	r0, r8
    b976:	4688      	mov	r8, r1
    b978:	0011      	movs	r1, r2
    b97a:	2200      	movs	r2, #0
    b97c:	0093      	lsls	r3, r2, #2
    b97e:	189a      	adds	r2, r3, r2
    b980:	7803      	ldrb	r3, [r0, #0]
    b982:	0052      	lsls	r2, r2, #1
    b984:	188a      	adds	r2, r1, r2
    b986:	0019      	movs	r1, r3
    b988:	3401      	adds	r4, #1
    b98a:	3930      	subs	r1, #48	; 0x30
    b98c:	0020      	movs	r0, r4
    b98e:	2909      	cmp	r1, #9
    b990:	d9f4      	bls.n	b97c <_vfprintf_r+0x3bc>
    b992:	9407      	str	r4, [sp, #28]
    b994:	4650      	mov	r0, sl
    b996:	9c08      	ldr	r4, [sp, #32]
    b998:	920b      	str	r2, [sp, #44]	; 0x2c
    b99a:	4641      	mov	r1, r8
    b99c:	46aa      	mov	sl, r5
    b99e:	e69b      	b.n	b6d8 <_vfprintf_r+0x118>
    b9a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b9a2:	9312      	str	r3, [sp, #72]	; 0x48
    b9a4:	6813      	ldr	r3, [r2, #0]
    b9a6:	2120      	movs	r1, #32
    b9a8:	9308      	str	r3, [sp, #32]
    b9aa:	466b      	mov	r3, sp
    b9ac:	185b      	adds	r3, r3, r1
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	ad28      	add	r5, sp, #160	; 0xa0
    b9b2:	702b      	strb	r3, [r5, #0]
    b9b4:	2300      	movs	r3, #0
    b9b6:	a916      	add	r1, sp, #88	; 0x58
    b9b8:	77cb      	strb	r3, [r1, #31]
    b9ba:	0013      	movs	r3, r2
    b9bc:	3304      	adds	r3, #4
    b9be:	930f      	str	r3, [sp, #60]	; 0x3c
    b9c0:	2300      	movs	r3, #0
    b9c2:	9409      	str	r4, [sp, #36]	; 0x24
    b9c4:	4698      	mov	r8, r3
    b9c6:	3301      	adds	r3, #1
    b9c8:	9308      	str	r3, [sp, #32]
    b9ca:	930e      	str	r3, [sp, #56]	; 0x38
    b9cc:	2300      	movs	r3, #0
    b9ce:	9511      	str	r5, [sp, #68]	; 0x44
    b9d0:	469a      	mov	sl, r3
    b9d2:	9313      	str	r3, [sp, #76]	; 0x4c
    b9d4:	e76f      	b.n	b8b6 <_vfprintf_r+0x2f6>
    b9d6:	9312      	str	r3, [sp, #72]	; 0x48
    b9d8:	2900      	cmp	r1, #0
    b9da:	d001      	beq.n	b9e0 <_vfprintf_r+0x420>
    b9dc:	f001 f94d 	bl	cc7a <_vfprintf_r+0x16ba>
    b9e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b9e2:	06a3      	lsls	r3, r4, #26
    b9e4:	d501      	bpl.n	b9ea <_vfprintf_r+0x42a>
    b9e6:	f000 fd5a 	bl	c49e <_vfprintf_r+0xede>
    b9ea:	06e3      	lsls	r3, r4, #27
    b9ec:	d501      	bpl.n	b9f2 <_vfprintf_r+0x432>
    b9ee:	f000 fcab 	bl	c348 <_vfprintf_r+0xd88>
    b9f2:	0663      	lsls	r3, r4, #25
    b9f4:	d401      	bmi.n	b9fa <_vfprintf_r+0x43a>
    b9f6:	f000 fca7 	bl	c348 <_vfprintf_r+0xd88>
    b9fa:	2100      	movs	r1, #0
    b9fc:	5e53      	ldrsh	r3, [r2, r1]
    b9fe:	930c      	str	r3, [sp, #48]	; 0x30
    ba00:	3204      	adds	r2, #4
    ba02:	17db      	asrs	r3, r3, #31
    ba04:	930d      	str	r3, [sp, #52]	; 0x34
    ba06:	920f      	str	r2, [sp, #60]	; 0x3c
    ba08:	2b00      	cmp	r3, #0
    ba0a:	da01      	bge.n	ba10 <_vfprintf_r+0x450>
    ba0c:	f000 fdb2 	bl	c574 <_vfprintf_r+0xfb4>
    ba10:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ba14:	0008      	movs	r0, r1
    ba16:	4651      	mov	r1, sl
    ba18:	ab16      	add	r3, sp, #88	; 0x58
    ba1a:	7fdb      	ldrb	r3, [r3, #31]
    ba1c:	4310      	orrs	r0, r2
    ba1e:	4698      	mov	r8, r3
    ba20:	0002      	movs	r2, r0
    ba22:	2301      	movs	r3, #1
    ba24:	3101      	adds	r1, #1
    ba26:	d000      	beq.n	ba2a <_vfprintf_r+0x46a>
    ba28:	e718      	b.n	b85c <_vfprintf_r+0x29c>
    ba2a:	2a00      	cmp	r2, #0
    ba2c:	d100      	bne.n	ba30 <_vfprintf_r+0x470>
    ba2e:	e35a      	b.n	c0e6 <_vfprintf_r+0xb26>
    ba30:	9409      	str	r4, [sp, #36]	; 0x24
    ba32:	2b01      	cmp	r3, #1
    ba34:	d101      	bne.n	ba3a <_vfprintf_r+0x47a>
    ba36:	f000 fc06 	bl	c246 <_vfprintf_r+0xc86>
    ba3a:	2b02      	cmp	r3, #2
    ba3c:	d000      	beq.n	ba40 <_vfprintf_r+0x480>
    ba3e:	e380      	b.n	c142 <_vfprintf_r+0xb82>
    ba40:	9c19      	ldr	r4, [sp, #100]	; 0x64
    ba42:	200f      	movs	r0, #15
    ba44:	46a1      	mov	r9, r4
    ba46:	46b4      	mov	ip, r6
    ba48:	ab32      	add	r3, sp, #200	; 0xc8
    ba4a:	0019      	movs	r1, r3
    ba4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ba4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ba50:	0004      	movs	r4, r0
    ba52:	464d      	mov	r5, r9
    ba54:	4014      	ands	r4, r2
    ba56:	5d2c      	ldrb	r4, [r5, r4]
    ba58:	071e      	lsls	r6, r3, #28
    ba5a:	0915      	lsrs	r5, r2, #4
    ba5c:	3901      	subs	r1, #1
    ba5e:	432e      	orrs	r6, r5
    ba60:	700c      	strb	r4, [r1, #0]
    ba62:	091c      	lsrs	r4, r3, #4
    ba64:	0023      	movs	r3, r4
    ba66:	0034      	movs	r4, r6
    ba68:	0032      	movs	r2, r6
    ba6a:	431c      	orrs	r4, r3
    ba6c:	d1f0      	bne.n	ba50 <_vfprintf_r+0x490>
    ba6e:	920c      	str	r2, [sp, #48]	; 0x30
    ba70:	930d      	str	r3, [sp, #52]	; 0x34
    ba72:	ab32      	add	r3, sp, #200	; 0xc8
    ba74:	1a5b      	subs	r3, r3, r1
    ba76:	9111      	str	r1, [sp, #68]	; 0x44
    ba78:	4666      	mov	r6, ip
    ba7a:	930e      	str	r3, [sp, #56]	; 0x38
    ba7c:	e70d      	b.n	b89a <_vfprintf_r+0x2da>
    ba7e:	4663      	mov	r3, ip
    ba80:	431c      	orrs	r4, r3
    ba82:	9b07      	ldr	r3, [sp, #28]
    ba84:	781b      	ldrb	r3, [r3, #0]
    ba86:	e624      	b.n	b6d2 <_vfprintf_r+0x112>
    ba88:	9b07      	ldr	r3, [sp, #28]
    ba8a:	781b      	ldrb	r3, [r3, #0]
    ba8c:	2b6c      	cmp	r3, #108	; 0x6c
    ba8e:	d101      	bne.n	ba94 <_vfprintf_r+0x4d4>
    ba90:	f000 fe8c 	bl	c7ac <_vfprintf_r+0x11ec>
    ba94:	2210      	movs	r2, #16
    ba96:	4314      	orrs	r4, r2
    ba98:	e61b      	b.n	b6d2 <_vfprintf_r+0x112>
    ba9a:	2900      	cmp	r1, #0
    ba9c:	d001      	beq.n	baa2 <_vfprintf_r+0x4e2>
    ba9e:	f001 f8d5 	bl	cc4c <_vfprintf_r+0x168c>
    baa2:	06a3      	lsls	r3, r4, #26
    baa4:	d501      	bpl.n	baaa <_vfprintf_r+0x4ea>
    baa6:	f000 fe76 	bl	c796 <_vfprintf_r+0x11d6>
    baaa:	06e3      	lsls	r3, r4, #27
    baac:	d500      	bpl.n	bab0 <_vfprintf_r+0x4f0>
    baae:	e110      	b.n	bcd2 <_vfprintf_r+0x712>
    bab0:	0663      	lsls	r3, r4, #25
    bab2:	d400      	bmi.n	bab6 <_vfprintf_r+0x4f6>
    bab4:	e10d      	b.n	bcd2 <_vfprintf_r+0x712>
    bab6:	4669      	mov	r1, sp
    bab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    baba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    babc:	681a      	ldr	r2, [r3, #0]
    babe:	3304      	adds	r3, #4
    bac0:	9208      	str	r2, [sp, #32]
    bac2:	8011      	strh	r1, [r2, #0]
    bac4:	930f      	str	r3, [sp, #60]	; 0x3c
    bac6:	e5c9      	b.n	b65c <_vfprintf_r+0x9c>
    bac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    baca:	2230      	movs	r2, #48	; 0x30
    bacc:	680b      	ldr	r3, [r1, #0]
    bace:	930c      	str	r3, [sp, #48]	; 0x30
    bad0:	2300      	movs	r3, #0
    bad2:	930d      	str	r3, [sp, #52]	; 0x34
    bad4:	3302      	adds	r3, #2
    bad6:	431c      	orrs	r4, r3
    bad8:	ab1e      	add	r3, sp, #120	; 0x78
    bada:	701a      	strb	r2, [r3, #0]
    badc:	3248      	adds	r2, #72	; 0x48
    bade:	705a      	strb	r2, [r3, #1]
    bae0:	000b      	movs	r3, r1
    bae2:	3304      	adds	r3, #4
    bae4:	930f      	str	r3, [sp, #60]	; 0x3c
    bae6:	4bc1      	ldr	r3, [pc, #772]	; (bdec <_vfprintf_r+0x82c>)
    bae8:	9212      	str	r2, [sp, #72]	; 0x48
    baea:	9319      	str	r3, [sp, #100]	; 0x64
    baec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    baee:	2302      	movs	r3, #2
    baf0:	e6ac      	b.n	b84c <_vfprintf_r+0x28c>
    baf2:	464b      	mov	r3, r9
    baf4:	431c      	orrs	r4, r3
    baf6:	9b07      	ldr	r3, [sp, #28]
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	e5ea      	b.n	b6d2 <_vfprintf_r+0x112>
    bafc:	9312      	str	r3, [sp, #72]	; 0x48
    bafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb00:	a916      	add	r1, sp, #88	; 0x58
    bb02:	1d1d      	adds	r5, r3, #4
    bb04:	681b      	ldr	r3, [r3, #0]
    bb06:	001a      	movs	r2, r3
    bb08:	9311      	str	r3, [sp, #68]	; 0x44
    bb0a:	2300      	movs	r3, #0
    bb0c:	77cb      	strb	r3, [r1, #31]
    bb0e:	2a00      	cmp	r2, #0
    bb10:	d101      	bne.n	bb16 <_vfprintf_r+0x556>
    bb12:	f000 ff01 	bl	c918 <_vfprintf_r+0x1358>
    bb16:	4653      	mov	r3, sl
    bb18:	3301      	adds	r3, #1
    bb1a:	d101      	bne.n	bb20 <_vfprintf_r+0x560>
    bb1c:	f000 fe64 	bl	c7e8 <_vfprintf_r+0x1228>
    bb20:	4652      	mov	r2, sl
    bb22:	2100      	movs	r1, #0
    bb24:	9811      	ldr	r0, [sp, #68]	; 0x44
    bb26:	f003 f9d5 	bl	eed4 <memchr>
    bb2a:	2800      	cmp	r0, #0
    bb2c:	d101      	bne.n	bb32 <_vfprintf_r+0x572>
    bb2e:	f000 ff78 	bl	ca22 <_vfprintf_r+0x1462>
    bb32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bb34:	1ac3      	subs	r3, r0, r3
    bb36:	001a      	movs	r2, r3
    bb38:	930e      	str	r3, [sp, #56]	; 0x38
    bb3a:	43db      	mvns	r3, r3
    bb3c:	17db      	asrs	r3, r3, #31
    bb3e:	401a      	ands	r2, r3
    bb40:	ab16      	add	r3, sp, #88	; 0x58
    bb42:	7fdb      	ldrb	r3, [r3, #31]
    bb44:	9208      	str	r2, [sp, #32]
    bb46:	4698      	mov	r8, r3
    bb48:	2300      	movs	r3, #0
    bb4a:	950f      	str	r5, [sp, #60]	; 0x3c
    bb4c:	9409      	str	r4, [sp, #36]	; 0x24
    bb4e:	469a      	mov	sl, r3
    bb50:	9313      	str	r3, [sp, #76]	; 0x4c
    bb52:	e6aa      	b.n	b8aa <_vfprintf_r+0x2ea>
    bb54:	2308      	movs	r3, #8
    bb56:	431c      	orrs	r4, r3
    bb58:	9b07      	ldr	r3, [sp, #28]
    bb5a:	781b      	ldrb	r3, [r3, #0]
    bb5c:	e5b9      	b.n	b6d2 <_vfprintf_r+0x112>
    bb5e:	9312      	str	r3, [sp, #72]	; 0x48
    bb60:	2310      	movs	r3, #16
    bb62:	431c      	orrs	r4, r3
    bb64:	06a3      	lsls	r3, r4, #26
    bb66:	d501      	bpl.n	bb6c <_vfprintf_r+0x5ac>
    bb68:	f000 fca7 	bl	c4ba <_vfprintf_r+0xefa>
    bb6c:	06e3      	lsls	r3, r4, #27
    bb6e:	d500      	bpl.n	bb72 <_vfprintf_r+0x5b2>
    bb70:	e3ee      	b.n	c350 <_vfprintf_r+0xd90>
    bb72:	0663      	lsls	r3, r4, #25
    bb74:	d400      	bmi.n	bb78 <_vfprintf_r+0x5b8>
    bb76:	e3eb      	b.n	c350 <_vfprintf_r+0xd90>
    bb78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb7a:	881a      	ldrh	r2, [r3, #0]
    bb7c:	920c      	str	r2, [sp, #48]	; 0x30
    bb7e:	2200      	movs	r2, #0
    bb80:	3304      	adds	r3, #4
    bb82:	920d      	str	r2, [sp, #52]	; 0x34
    bb84:	930f      	str	r3, [sp, #60]	; 0x3c
    bb86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bb88:	2300      	movs	r3, #0
    bb8a:	e65f      	b.n	b84c <_vfprintf_r+0x28c>
    bb8c:	9312      	str	r3, [sp, #72]	; 0x48
    bb8e:	2310      	movs	r3, #16
    bb90:	431c      	orrs	r4, r3
    bb92:	06a3      	lsls	r3, r4, #26
    bb94:	d501      	bpl.n	bb9a <_vfprintf_r+0x5da>
    bb96:	f000 fcba 	bl	c50e <_vfprintf_r+0xf4e>
    bb9a:	06e3      	lsls	r3, r4, #27
    bb9c:	d500      	bpl.n	bba0 <_vfprintf_r+0x5e0>
    bb9e:	e3da      	b.n	c356 <_vfprintf_r+0xd96>
    bba0:	0663      	lsls	r3, r4, #25
    bba2:	d400      	bmi.n	bba6 <_vfprintf_r+0x5e6>
    bba4:	e3d7      	b.n	c356 <_vfprintf_r+0xd96>
    bba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bba8:	881a      	ldrh	r2, [r3, #0]
    bbaa:	920c      	str	r2, [sp, #48]	; 0x30
    bbac:	2200      	movs	r2, #0
    bbae:	3304      	adds	r3, #4
    bbb0:	920d      	str	r2, [sp, #52]	; 0x34
    bbb2:	930f      	str	r3, [sp, #60]	; 0x3c
    bbb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bbb6:	2301      	movs	r3, #1
    bbb8:	e648      	b.n	b84c <_vfprintf_r+0x28c>
    bbba:	9312      	str	r3, [sp, #72]	; 0x48
    bbbc:	2900      	cmp	r1, #0
    bbbe:	d001      	beq.n	bbc4 <_vfprintf_r+0x604>
    bbc0:	f001 f857 	bl	cc72 <_vfprintf_r+0x16b2>
    bbc4:	4b8a      	ldr	r3, [pc, #552]	; (bdf0 <_vfprintf_r+0x830>)
    bbc6:	9319      	str	r3, [sp, #100]	; 0x64
    bbc8:	e618      	b.n	b7fc <_vfprintf_r+0x23c>
    bbca:	2301      	movs	r3, #1
    bbcc:	431c      	orrs	r4, r3
    bbce:	9b07      	ldr	r3, [sp, #28]
    bbd0:	781b      	ldrb	r3, [r3, #0]
    bbd2:	e57e      	b.n	b6d2 <_vfprintf_r+0x112>
    bbd4:	2380      	movs	r3, #128	; 0x80
    bbd6:	431c      	orrs	r4, r3
    bbd8:	9b07      	ldr	r3, [sp, #28]
    bbda:	781b      	ldrb	r3, [r3, #0]
    bbdc:	e579      	b.n	b6d2 <_vfprintf_r+0x112>
    bbde:	9b07      	ldr	r3, [sp, #28]
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	2800      	cmp	r0, #0
    bbe4:	d000      	beq.n	bbe8 <_vfprintf_r+0x628>
    bbe6:	e574      	b.n	b6d2 <_vfprintf_r+0x112>
    bbe8:	2101      	movs	r1, #1
    bbea:	3020      	adds	r0, #32
    bbec:	e571      	b.n	b6d2 <_vfprintf_r+0x112>
    bbee:	9312      	str	r3, [sp, #72]	; 0x48
    bbf0:	2900      	cmp	r1, #0
    bbf2:	d001      	beq.n	bbf8 <_vfprintf_r+0x638>
    bbf4:	f001 f839 	bl	cc6a <_vfprintf_r+0x16aa>
    bbf8:	2207      	movs	r2, #7
    bbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bbfc:	3307      	adds	r3, #7
    bbfe:	4393      	bics	r3, r2
    bc00:	3201      	adds	r2, #1
    bc02:	4694      	mov	ip, r2
    bc04:	449c      	add	ip, r3
    bc06:	4662      	mov	r2, ip
    bc08:	920f      	str	r2, [sp, #60]	; 0x3c
    bc0a:	681a      	ldr	r2, [r3, #0]
    bc0c:	9216      	str	r2, [sp, #88]	; 0x58
    bc0e:	685b      	ldr	r3, [r3, #4]
    bc10:	2201      	movs	r2, #1
    bc12:	9315      	str	r3, [sp, #84]	; 0x54
    bc14:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bc16:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bc18:	005b      	lsls	r3, r3, #1
    bc1a:	085b      	lsrs	r3, r3, #1
    bc1c:	4698      	mov	r8, r3
    bc1e:	4252      	negs	r2, r2
    bc20:	4b74      	ldr	r3, [pc, #464]	; (bdf4 <_vfprintf_r+0x834>)
    bc22:	0028      	movs	r0, r5
    bc24:	4641      	mov	r1, r8
    bc26:	f7ff fa5f 	bl	b0e8 <__aeabi_dcmpun>
    bc2a:	2800      	cmp	r0, #0
    bc2c:	d001      	beq.n	bc32 <_vfprintf_r+0x672>
    bc2e:	f000 fcb4 	bl	c59a <_vfprintf_r+0xfda>
    bc32:	2201      	movs	r2, #1
    bc34:	4b6f      	ldr	r3, [pc, #444]	; (bdf4 <_vfprintf_r+0x834>)
    bc36:	4252      	negs	r2, r2
    bc38:	0028      	movs	r0, r5
    bc3a:	4641      	mov	r1, r8
    bc3c:	f7fc fd0e 	bl	865c <__aeabi_dcmple>
    bc40:	2800      	cmp	r0, #0
    bc42:	d001      	beq.n	bc48 <_vfprintf_r+0x688>
    bc44:	f000 fca9 	bl	c59a <_vfprintf_r+0xfda>
    bc48:	2200      	movs	r2, #0
    bc4a:	2300      	movs	r3, #0
    bc4c:	9816      	ldr	r0, [sp, #88]	; 0x58
    bc4e:	9915      	ldr	r1, [sp, #84]	; 0x54
    bc50:	f7fc fcfa 	bl	8648 <__aeabi_dcmplt>
    bc54:	2800      	cmp	r0, #0
    bc56:	d001      	beq.n	bc5c <_vfprintf_r+0x69c>
    bc58:	f000 fd55 	bl	c706 <_vfprintf_r+0x1146>
    bc5c:	ab16      	add	r3, sp, #88	; 0x58
    bc5e:	7fdb      	ldrb	r3, [r3, #31]
    bc60:	4698      	mov	r8, r3
    bc62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bc64:	2b47      	cmp	r3, #71	; 0x47
    bc66:	dd01      	ble.n	bc6c <_vfprintf_r+0x6ac>
    bc68:	f000 fdb4 	bl	c7d4 <_vfprintf_r+0x1214>
    bc6c:	4b62      	ldr	r3, [pc, #392]	; (bdf8 <_vfprintf_r+0x838>)
    bc6e:	9311      	str	r3, [sp, #68]	; 0x44
    bc70:	2380      	movs	r3, #128	; 0x80
    bc72:	439c      	bics	r4, r3
    bc74:	3b7d      	subs	r3, #125	; 0x7d
    bc76:	9308      	str	r3, [sp, #32]
    bc78:	930e      	str	r3, [sp, #56]	; 0x38
    bc7a:	2300      	movs	r3, #0
    bc7c:	9409      	str	r4, [sp, #36]	; 0x24
    bc7e:	469a      	mov	sl, r3
    bc80:	9313      	str	r3, [sp, #76]	; 0x4c
    bc82:	e612      	b.n	b8aa <_vfprintf_r+0x2ea>
    bc84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bc86:	1d1a      	adds	r2, r3, #4
    bc88:	681b      	ldr	r3, [r3, #0]
    bc8a:	930b      	str	r3, [sp, #44]	; 0x2c
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	da00      	bge.n	bc92 <_vfprintf_r+0x6d2>
    bc90:	e578      	b.n	b784 <_vfprintf_r+0x1c4>
    bc92:	9b07      	ldr	r3, [sp, #28]
    bc94:	920f      	str	r2, [sp, #60]	; 0x3c
    bc96:	781b      	ldrb	r3, [r3, #0]
    bc98:	e51b      	b.n	b6d2 <_vfprintf_r+0x112>
    bc9a:	9312      	str	r3, [sp, #72]	; 0x48
    bc9c:	2900      	cmp	r1, #0
    bc9e:	d001      	beq.n	bca4 <_vfprintf_r+0x6e4>
    bca0:	f000 ffcc 	bl	cc3c <_vfprintf_r+0x167c>
    bca4:	2310      	movs	r3, #16
    bca6:	431c      	orrs	r4, r3
    bca8:	e69a      	b.n	b9e0 <_vfprintf_r+0x420>
    bcaa:	9312      	str	r3, [sp, #72]	; 0x48
    bcac:	e771      	b.n	bb92 <_vfprintf_r+0x5d2>
    bcae:	9312      	str	r3, [sp, #72]	; 0x48
    bcb0:	e758      	b.n	bb64 <_vfprintf_r+0x5a4>
    bcb2:	9312      	str	r3, [sp, #72]	; 0x48
    bcb4:	2900      	cmp	r1, #0
    bcb6:	d001      	beq.n	bcbc <_vfprintf_r+0x6fc>
    bcb8:	f000 ffd3 	bl	cc62 <_vfprintf_r+0x16a2>
    bcbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	d100      	bne.n	bcc4 <_vfprintf_r+0x704>
    bcc2:	e18d      	b.n	bfe0 <_vfprintf_r+0xa20>
    bcc4:	ad28      	add	r5, sp, #160	; 0xa0
    bcc6:	702b      	strb	r3, [r5, #0]
    bcc8:	2300      	movs	r3, #0
    bcca:	aa16      	add	r2, sp, #88	; 0x58
    bccc:	77d3      	strb	r3, [r2, #31]
    bcce:	9409      	str	r4, [sp, #36]	; 0x24
    bcd0:	e678      	b.n	b9c4 <_vfprintf_r+0x404>
    bcd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bcd4:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcd6:	6813      	ldr	r3, [r2, #0]
    bcd8:	6019      	str	r1, [r3, #0]
    bcda:	0013      	movs	r3, r2
    bcdc:	3304      	adds	r3, #4
    bcde:	930f      	str	r3, [sp, #60]	; 0x3c
    bce0:	e4bc      	b.n	b65c <_vfprintf_r+0x9c>
    bce2:	68bc      	ldr	r4, [r7, #8]
    bce4:	4643      	mov	r3, r8
    bce6:	2b00      	cmp	r3, #0
    bce8:	d00f      	beq.n	bd0a <_vfprintf_r+0x74a>
    bcea:	aa16      	add	r2, sp, #88	; 0x58
    bcec:	231f      	movs	r3, #31
    bcee:	4694      	mov	ip, r2
    bcf0:	4463      	add	r3, ip
    bcf2:	6033      	str	r3, [r6, #0]
    bcf4:	2301      	movs	r3, #1
    bcf6:	6073      	str	r3, [r6, #4]
    bcf8:	687b      	ldr	r3, [r7, #4]
    bcfa:	3401      	adds	r4, #1
    bcfc:	3301      	adds	r3, #1
    bcfe:	60bc      	str	r4, [r7, #8]
    bd00:	607b      	str	r3, [r7, #4]
    bd02:	2b07      	cmp	r3, #7
    bd04:	dd00      	ble.n	bd08 <_vfprintf_r+0x748>
    bd06:	e203      	b.n	c110 <_vfprintf_r+0xb50>
    bd08:	3608      	adds	r6, #8
    bd0a:	464b      	mov	r3, r9
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	d00c      	beq.n	bd2a <_vfprintf_r+0x76a>
    bd10:	ab1e      	add	r3, sp, #120	; 0x78
    bd12:	6033      	str	r3, [r6, #0]
    bd14:	2302      	movs	r3, #2
    bd16:	6073      	str	r3, [r6, #4]
    bd18:	687b      	ldr	r3, [r7, #4]
    bd1a:	3402      	adds	r4, #2
    bd1c:	3301      	adds	r3, #1
    bd1e:	60bc      	str	r4, [r7, #8]
    bd20:	607b      	str	r3, [r7, #4]
    bd22:	2b07      	cmp	r3, #7
    bd24:	dd00      	ble.n	bd28 <_vfprintf_r+0x768>
    bd26:	e1fd      	b.n	c124 <_vfprintf_r+0xb64>
    bd28:	3608      	adds	r6, #8
    bd2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bd2c:	2b80      	cmp	r3, #128	; 0x80
    bd2e:	d100      	bne.n	bd32 <_vfprintf_r+0x772>
    bd30:	e173      	b.n	c01a <_vfprintf_r+0xa5a>
    bd32:	4653      	mov	r3, sl
    bd34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bd36:	1a9d      	subs	r5, r3, r2
    bd38:	2d00      	cmp	r5, #0
    bd3a:	dd32      	ble.n	bda2 <_vfprintf_r+0x7e2>
    bd3c:	4a2f      	ldr	r2, [pc, #188]	; (bdfc <_vfprintf_r+0x83c>)
    bd3e:	687b      	ldr	r3, [r7, #4]
    bd40:	4691      	mov	r9, r2
    bd42:	2d10      	cmp	r5, #16
    bd44:	dd22      	ble.n	bd8c <_vfprintf_r+0x7cc>
    bd46:	2210      	movs	r2, #16
    bd48:	4692      	mov	sl, r2
    bd4a:	0022      	movs	r2, r4
    bd4c:	465c      	mov	r4, fp
    bd4e:	e003      	b.n	bd58 <_vfprintf_r+0x798>
    bd50:	3d10      	subs	r5, #16
    bd52:	3608      	adds	r6, #8
    bd54:	2d10      	cmp	r5, #16
    bd56:	dd17      	ble.n	bd88 <_vfprintf_r+0x7c8>
    bd58:	4649      	mov	r1, r9
    bd5a:	6031      	str	r1, [r6, #0]
    bd5c:	4651      	mov	r1, sl
    bd5e:	3210      	adds	r2, #16
    bd60:	3301      	adds	r3, #1
    bd62:	6071      	str	r1, [r6, #4]
    bd64:	60ba      	str	r2, [r7, #8]
    bd66:	607b      	str	r3, [r7, #4]
    bd68:	2b07      	cmp	r3, #7
    bd6a:	ddf1      	ble.n	bd50 <_vfprintf_r+0x790>
    bd6c:	003a      	movs	r2, r7
    bd6e:	0021      	movs	r1, r4
    bd70:	9806      	ldr	r0, [sp, #24]
    bd72:	f003 fef7 	bl	fb64 <__sprint_r>
    bd76:	2800      	cmp	r0, #0
    bd78:	d000      	beq.n	bd7c <_vfprintf_r+0x7bc>
    bd7a:	e18a      	b.n	c092 <_vfprintf_r+0xad2>
    bd7c:	3d10      	subs	r5, #16
    bd7e:	68ba      	ldr	r2, [r7, #8]
    bd80:	687b      	ldr	r3, [r7, #4]
    bd82:	ae32      	add	r6, sp, #200	; 0xc8
    bd84:	2d10      	cmp	r5, #16
    bd86:	dce7      	bgt.n	bd58 <_vfprintf_r+0x798>
    bd88:	46a3      	mov	fp, r4
    bd8a:	0014      	movs	r4, r2
    bd8c:	464a      	mov	r2, r9
    bd8e:	1964      	adds	r4, r4, r5
    bd90:	3301      	adds	r3, #1
    bd92:	6032      	str	r2, [r6, #0]
    bd94:	6075      	str	r5, [r6, #4]
    bd96:	60bc      	str	r4, [r7, #8]
    bd98:	607b      	str	r3, [r7, #4]
    bd9a:	2b07      	cmp	r3, #7
    bd9c:	dd00      	ble.n	bda0 <_vfprintf_r+0x7e0>
    bd9e:	e1ad      	b.n	c0fc <_vfprintf_r+0xb3c>
    bda0:	3608      	adds	r6, #8
    bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bda4:	05db      	lsls	r3, r3, #23
    bda6:	d500      	bpl.n	bdaa <_vfprintf_r+0x7ea>
    bda8:	e0be      	b.n	bf28 <_vfprintf_r+0x968>
    bdaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bdac:	6033      	str	r3, [r6, #0]
    bdae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bdb0:	469c      	mov	ip, r3
    bdb2:	6073      	str	r3, [r6, #4]
    bdb4:	687b      	ldr	r3, [r7, #4]
    bdb6:	4464      	add	r4, ip
    bdb8:	3301      	adds	r3, #1
    bdba:	60bc      	str	r4, [r7, #8]
    bdbc:	607b      	str	r3, [r7, #4]
    bdbe:	2b07      	cmp	r3, #7
    bdc0:	dd00      	ble.n	bdc4 <_vfprintf_r+0x804>
    bdc2:	e0a6      	b.n	bf12 <_vfprintf_r+0x952>
    bdc4:	3608      	adds	r6, #8
    bdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bdc8:	075b      	lsls	r3, r3, #29
    bdca:	d54a      	bpl.n	be62 <_vfprintf_r+0x8a2>
    bdcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bdce:	9a08      	ldr	r2, [sp, #32]
    bdd0:	1a9d      	subs	r5, r3, r2
    bdd2:	2d00      	cmp	r5, #0
    bdd4:	dd45      	ble.n	be62 <_vfprintf_r+0x8a2>
    bdd6:	4a0a      	ldr	r2, [pc, #40]	; (be00 <_vfprintf_r+0x840>)
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	4690      	mov	r8, r2
    bddc:	2d10      	cmp	r5, #16
    bdde:	dd2f      	ble.n	be40 <_vfprintf_r+0x880>
    bde0:	2210      	movs	r2, #16
    bde2:	4691      	mov	r9, r2
    bde4:	0022      	movs	r2, r4
    bde6:	465c      	mov	r4, fp
    bde8:	e010      	b.n	be0c <_vfprintf_r+0x84c>
    bdea:	46c0      	nop			; (mov r8, r8)
    bdec:	0001087c 	.word	0x0001087c
    bdf0:	00010868 	.word	0x00010868
    bdf4:	7fefffff 	.word	0x7fefffff
    bdf8:	00010860 	.word	0x00010860
    bdfc:	000108ac 	.word	0x000108ac
    be00:	0001089c 	.word	0x0001089c
    be04:	3d10      	subs	r5, #16
    be06:	3608      	adds	r6, #8
    be08:	2d10      	cmp	r5, #16
    be0a:	dd17      	ble.n	be3c <_vfprintf_r+0x87c>
    be0c:	49d1      	ldr	r1, [pc, #836]	; (c154 <_vfprintf_r+0xb94>)
    be0e:	3210      	adds	r2, #16
    be10:	6031      	str	r1, [r6, #0]
    be12:	4649      	mov	r1, r9
    be14:	3301      	adds	r3, #1
    be16:	6071      	str	r1, [r6, #4]
    be18:	60ba      	str	r2, [r7, #8]
    be1a:	607b      	str	r3, [r7, #4]
    be1c:	2b07      	cmp	r3, #7
    be1e:	ddf1      	ble.n	be04 <_vfprintf_r+0x844>
    be20:	003a      	movs	r2, r7
    be22:	0021      	movs	r1, r4
    be24:	9806      	ldr	r0, [sp, #24]
    be26:	f003 fe9d 	bl	fb64 <__sprint_r>
    be2a:	2800      	cmp	r0, #0
    be2c:	d000      	beq.n	be30 <_vfprintf_r+0x870>
    be2e:	e130      	b.n	c092 <_vfprintf_r+0xad2>
    be30:	3d10      	subs	r5, #16
    be32:	68ba      	ldr	r2, [r7, #8]
    be34:	687b      	ldr	r3, [r7, #4]
    be36:	ae32      	add	r6, sp, #200	; 0xc8
    be38:	2d10      	cmp	r5, #16
    be3a:	dce7      	bgt.n	be0c <_vfprintf_r+0x84c>
    be3c:	46a3      	mov	fp, r4
    be3e:	0014      	movs	r4, r2
    be40:	4642      	mov	r2, r8
    be42:	1964      	adds	r4, r4, r5
    be44:	3301      	adds	r3, #1
    be46:	c624      	stmia	r6!, {r2, r5}
    be48:	60bc      	str	r4, [r7, #8]
    be4a:	607b      	str	r3, [r7, #4]
    be4c:	2b07      	cmp	r3, #7
    be4e:	dd08      	ble.n	be62 <_vfprintf_r+0x8a2>
    be50:	003a      	movs	r2, r7
    be52:	4659      	mov	r1, fp
    be54:	9806      	ldr	r0, [sp, #24]
    be56:	f003 fe85 	bl	fb64 <__sprint_r>
    be5a:	2800      	cmp	r0, #0
    be5c:	d000      	beq.n	be60 <_vfprintf_r+0x8a0>
    be5e:	e13f      	b.n	c0e0 <_vfprintf_r+0xb20>
    be60:	68bc      	ldr	r4, [r7, #8]
    be62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be64:	9908      	ldr	r1, [sp, #32]
    be66:	428b      	cmp	r3, r1
    be68:	da00      	bge.n	be6c <_vfprintf_r+0x8ac>
    be6a:	000b      	movs	r3, r1
    be6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    be6e:	4694      	mov	ip, r2
    be70:	449c      	add	ip, r3
    be72:	4663      	mov	r3, ip
    be74:	930a      	str	r3, [sp, #40]	; 0x28
    be76:	2c00      	cmp	r4, #0
    be78:	d000      	beq.n	be7c <_vfprintf_r+0x8bc>
    be7a:	e129      	b.n	c0d0 <_vfprintf_r+0xb10>
    be7c:	2300      	movs	r3, #0
    be7e:	ae32      	add	r6, sp, #200	; 0xc8
    be80:	607b      	str	r3, [r7, #4]
    be82:	f7ff fbeb 	bl	b65c <_vfprintf_r+0x9c>
    be86:	9b14      	ldr	r3, [sp, #80]	; 0x50
    be88:	2b01      	cmp	r3, #1
    be8a:	dc00      	bgt.n	be8e <_vfprintf_r+0x8ce>
    be8c:	e103      	b.n	c096 <_vfprintf_r+0xad6>
    be8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be90:	3401      	adds	r4, #1
    be92:	6033      	str	r3, [r6, #0]
    be94:	2301      	movs	r3, #1
    be96:	6073      	str	r3, [r6, #4]
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	60bc      	str	r4, [r7, #8]
    be9c:	3301      	adds	r3, #1
    be9e:	607b      	str	r3, [r7, #4]
    bea0:	2b07      	cmp	r3, #7
    bea2:	dd00      	ble.n	bea6 <_vfprintf_r+0x8e6>
    bea4:	e2ef      	b.n	c486 <_vfprintf_r+0xec6>
    bea6:	3608      	adds	r6, #8
    bea8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    beaa:	3301      	adds	r3, #1
    beac:	6032      	str	r2, [r6, #0]
    beae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    beb0:	4698      	mov	r8, r3
    beb2:	4694      	mov	ip, r2
    beb4:	4464      	add	r4, ip
    beb6:	6072      	str	r2, [r6, #4]
    beb8:	60bc      	str	r4, [r7, #8]
    beba:	607b      	str	r3, [r7, #4]
    bebc:	2b07      	cmp	r3, #7
    bebe:	dd00      	ble.n	bec2 <_vfprintf_r+0x902>
    bec0:	e318      	b.n	c4f4 <_vfprintf_r+0xf34>
    bec2:	3608      	adds	r6, #8
    bec4:	2200      	movs	r2, #0
    bec6:	2300      	movs	r3, #0
    bec8:	9816      	ldr	r0, [sp, #88]	; 0x58
    beca:	9915      	ldr	r1, [sp, #84]	; 0x54
    becc:	f7fc fbb6 	bl	863c <__aeabi_dcmpeq>
    bed0:	2800      	cmp	r0, #0
    bed2:	d000      	beq.n	bed6 <_vfprintf_r+0x916>
    bed4:	e1f4      	b.n	c2c0 <_vfprintf_r+0xd00>
    bed6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    bed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    beda:	3501      	adds	r5, #1
    bedc:	3b01      	subs	r3, #1
    bede:	6035      	str	r5, [r6, #0]
    bee0:	6073      	str	r3, [r6, #4]
    bee2:	18e4      	adds	r4, r4, r3
    bee4:	2301      	movs	r3, #1
    bee6:	469c      	mov	ip, r3
    bee8:	44e0      	add	r8, ip
    beea:	4643      	mov	r3, r8
    beec:	60bc      	str	r4, [r7, #8]
    beee:	607b      	str	r3, [r7, #4]
    bef0:	2b07      	cmp	r3, #7
    bef2:	dd00      	ble.n	bef6 <_vfprintf_r+0x936>
    bef4:	e0e0      	b.n	c0b8 <_vfprintf_r+0xaf8>
    bef6:	3608      	adds	r6, #8
    bef8:	ab21      	add	r3, sp, #132	; 0x84
    befa:	6033      	str	r3, [r6, #0]
    befc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    befe:	469c      	mov	ip, r3
    bf00:	6073      	str	r3, [r6, #4]
    bf02:	4643      	mov	r3, r8
    bf04:	4464      	add	r4, ip
    bf06:	3301      	adds	r3, #1
    bf08:	60bc      	str	r4, [r7, #8]
    bf0a:	607b      	str	r3, [r7, #4]
    bf0c:	2b07      	cmp	r3, #7
    bf0e:	dc00      	bgt.n	bf12 <_vfprintf_r+0x952>
    bf10:	e758      	b.n	bdc4 <_vfprintf_r+0x804>
    bf12:	003a      	movs	r2, r7
    bf14:	4659      	mov	r1, fp
    bf16:	9806      	ldr	r0, [sp, #24]
    bf18:	f003 fe24 	bl	fb64 <__sprint_r>
    bf1c:	2800      	cmp	r0, #0
    bf1e:	d000      	beq.n	bf22 <_vfprintf_r+0x962>
    bf20:	e0de      	b.n	c0e0 <_vfprintf_r+0xb20>
    bf22:	68bc      	ldr	r4, [r7, #8]
    bf24:	ae32      	add	r6, sp, #200	; 0xc8
    bf26:	e74e      	b.n	bdc6 <_vfprintf_r+0x806>
    bf28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf2a:	2b65      	cmp	r3, #101	; 0x65
    bf2c:	ddab      	ble.n	be86 <_vfprintf_r+0x8c6>
    bf2e:	2200      	movs	r2, #0
    bf30:	2300      	movs	r3, #0
    bf32:	9816      	ldr	r0, [sp, #88]	; 0x58
    bf34:	9915      	ldr	r1, [sp, #84]	; 0x54
    bf36:	f7fc fb81 	bl	863c <__aeabi_dcmpeq>
    bf3a:	2800      	cmp	r0, #0
    bf3c:	d100      	bne.n	bf40 <_vfprintf_r+0x980>
    bf3e:	e134      	b.n	c1aa <_vfprintf_r+0xbea>
    bf40:	4b85      	ldr	r3, [pc, #532]	; (c158 <_vfprintf_r+0xb98>)
    bf42:	3401      	adds	r4, #1
    bf44:	6033      	str	r3, [r6, #0]
    bf46:	2301      	movs	r3, #1
    bf48:	6073      	str	r3, [r6, #4]
    bf4a:	687b      	ldr	r3, [r7, #4]
    bf4c:	60bc      	str	r4, [r7, #8]
    bf4e:	3301      	adds	r3, #1
    bf50:	607b      	str	r3, [r7, #4]
    bf52:	2b07      	cmp	r3, #7
    bf54:	dd00      	ble.n	bf58 <_vfprintf_r+0x998>
    bf56:	e3dc      	b.n	c712 <_vfprintf_r+0x1152>
    bf58:	3608      	adds	r6, #8
    bf5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bf5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    bf5e:	4293      	cmp	r3, r2
    bf60:	db03      	blt.n	bf6a <_vfprintf_r+0x9aa>
    bf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bf64:	07db      	lsls	r3, r3, #31
    bf66:	d400      	bmi.n	bf6a <_vfprintf_r+0x9aa>
    bf68:	e3b7      	b.n	c6da <_vfprintf_r+0x111a>
    bf6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bf6c:	68ba      	ldr	r2, [r7, #8]
    bf6e:	6033      	str	r3, [r6, #0]
    bf70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    bf72:	469c      	mov	ip, r3
    bf74:	6073      	str	r3, [r6, #4]
    bf76:	687b      	ldr	r3, [r7, #4]
    bf78:	4462      	add	r2, ip
    bf7a:	3301      	adds	r3, #1
    bf7c:	0014      	movs	r4, r2
    bf7e:	60ba      	str	r2, [r7, #8]
    bf80:	607b      	str	r3, [r7, #4]
    bf82:	2b07      	cmp	r3, #7
    bf84:	dd01      	ble.n	bf8a <_vfprintf_r+0x9ca>
    bf86:	f000 fc19 	bl	c7bc <_vfprintf_r+0x11fc>
    bf8a:	3608      	adds	r6, #8
    bf8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bf8e:	1e5d      	subs	r5, r3, #1
    bf90:	2d00      	cmp	r5, #0
    bf92:	dc00      	bgt.n	bf96 <_vfprintf_r+0x9d6>
    bf94:	e717      	b.n	bdc6 <_vfprintf_r+0x806>
    bf96:	4a71      	ldr	r2, [pc, #452]	; (c15c <_vfprintf_r+0xb9c>)
    bf98:	687b      	ldr	r3, [r7, #4]
    bf9a:	4691      	mov	r9, r2
    bf9c:	2d10      	cmp	r5, #16
    bf9e:	dc00      	bgt.n	bfa2 <_vfprintf_r+0x9e2>
    bfa0:	e1c3      	b.n	c32a <_vfprintf_r+0xd6a>
    bfa2:	2210      	movs	r2, #16
    bfa4:	4690      	mov	r8, r2
    bfa6:	0022      	movs	r2, r4
    bfa8:	464c      	mov	r4, r9
    bfaa:	46d9      	mov	r9, fp
    bfac:	e004      	b.n	bfb8 <_vfprintf_r+0x9f8>
    bfae:	3608      	adds	r6, #8
    bfb0:	3d10      	subs	r5, #16
    bfb2:	2d10      	cmp	r5, #16
    bfb4:	dc00      	bgt.n	bfb8 <_vfprintf_r+0x9f8>
    bfb6:	e37c      	b.n	c6b2 <_vfprintf_r+0x10f2>
    bfb8:	4641      	mov	r1, r8
    bfba:	3210      	adds	r2, #16
    bfbc:	3301      	adds	r3, #1
    bfbe:	6034      	str	r4, [r6, #0]
    bfc0:	6071      	str	r1, [r6, #4]
    bfc2:	60ba      	str	r2, [r7, #8]
    bfc4:	607b      	str	r3, [r7, #4]
    bfc6:	2b07      	cmp	r3, #7
    bfc8:	ddf1      	ble.n	bfae <_vfprintf_r+0x9ee>
    bfca:	003a      	movs	r2, r7
    bfcc:	4649      	mov	r1, r9
    bfce:	9806      	ldr	r0, [sp, #24]
    bfd0:	f003 fdc8 	bl	fb64 <__sprint_r>
    bfd4:	2800      	cmp	r0, #0
    bfd6:	d10b      	bne.n	bff0 <_vfprintf_r+0xa30>
    bfd8:	68ba      	ldr	r2, [r7, #8]
    bfda:	687b      	ldr	r3, [r7, #4]
    bfdc:	ae32      	add	r6, sp, #200	; 0xc8
    bfde:	e7e7      	b.n	bfb0 <_vfprintf_r+0x9f0>
    bfe0:	68bb      	ldr	r3, [r7, #8]
    bfe2:	46d9      	mov	r9, fp
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	d001      	beq.n	bfec <_vfprintf_r+0xa2c>
    bfe8:	f000 fd4c 	bl	ca84 <_vfprintf_r+0x14c4>
    bfec:	2300      	movs	r3, #0
    bfee:	607b      	str	r3, [r7, #4]
    bff0:	464b      	mov	r3, r9
    bff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bff4:	07db      	lsls	r3, r3, #31
    bff6:	d40d      	bmi.n	c014 <_vfprintf_r+0xa54>
    bff8:	464b      	mov	r3, r9
    bffa:	899b      	ldrh	r3, [r3, #12]
    bffc:	059a      	lsls	r2, r3, #22
    bffe:	d505      	bpl.n	c00c <_vfprintf_r+0xa4c>
    c000:	065b      	lsls	r3, r3, #25
    c002:	d401      	bmi.n	c008 <_vfprintf_r+0xa48>
    c004:	f7ff fb8d 	bl	b722 <_vfprintf_r+0x162>
    c008:	f7ff fb88 	bl	b71c <_vfprintf_r+0x15c>
    c00c:	464b      	mov	r3, r9
    c00e:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c010:	f002 fc32 	bl	e878 <__retarget_lock_release_recursive>
    c014:	464b      	mov	r3, r9
    c016:	899b      	ldrh	r3, [r3, #12]
    c018:	e7f2      	b.n	c000 <_vfprintf_r+0xa40>
    c01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c01c:	9a08      	ldr	r2, [sp, #32]
    c01e:	1a9d      	subs	r5, r3, r2
    c020:	2d00      	cmp	r5, #0
    c022:	dc00      	bgt.n	c026 <_vfprintf_r+0xa66>
    c024:	e685      	b.n	bd32 <_vfprintf_r+0x772>
    c026:	4a4d      	ldr	r2, [pc, #308]	; (c15c <_vfprintf_r+0xb9c>)
    c028:	687b      	ldr	r3, [r7, #4]
    c02a:	4691      	mov	r9, r2
    c02c:	2d10      	cmp	r5, #16
    c02e:	dd24      	ble.n	c07a <_vfprintf_r+0xaba>
    c030:	2210      	movs	r2, #16
    c032:	0021      	movs	r1, r4
    c034:	4690      	mov	r8, r2
    c036:	465c      	mov	r4, fp
    c038:	0032      	movs	r2, r6
    c03a:	464e      	mov	r6, r9
    c03c:	e003      	b.n	c046 <_vfprintf_r+0xa86>
    c03e:	3d10      	subs	r5, #16
    c040:	3208      	adds	r2, #8
    c042:	2d10      	cmp	r5, #16
    c044:	dd15      	ble.n	c072 <_vfprintf_r+0xab2>
    c046:	4640      	mov	r0, r8
    c048:	3110      	adds	r1, #16
    c04a:	3301      	adds	r3, #1
    c04c:	6016      	str	r6, [r2, #0]
    c04e:	6050      	str	r0, [r2, #4]
    c050:	60b9      	str	r1, [r7, #8]
    c052:	607b      	str	r3, [r7, #4]
    c054:	2b07      	cmp	r3, #7
    c056:	ddf2      	ble.n	c03e <_vfprintf_r+0xa7e>
    c058:	003a      	movs	r2, r7
    c05a:	0021      	movs	r1, r4
    c05c:	9806      	ldr	r0, [sp, #24]
    c05e:	f003 fd81 	bl	fb64 <__sprint_r>
    c062:	2800      	cmp	r0, #0
    c064:	d115      	bne.n	c092 <_vfprintf_r+0xad2>
    c066:	3d10      	subs	r5, #16
    c068:	68b9      	ldr	r1, [r7, #8]
    c06a:	687b      	ldr	r3, [r7, #4]
    c06c:	aa32      	add	r2, sp, #200	; 0xc8
    c06e:	2d10      	cmp	r5, #16
    c070:	dce9      	bgt.n	c046 <_vfprintf_r+0xa86>
    c072:	46a3      	mov	fp, r4
    c074:	46b1      	mov	r9, r6
    c076:	000c      	movs	r4, r1
    c078:	0016      	movs	r6, r2
    c07a:	464a      	mov	r2, r9
    c07c:	1964      	adds	r4, r4, r5
    c07e:	3301      	adds	r3, #1
    c080:	6032      	str	r2, [r6, #0]
    c082:	6075      	str	r5, [r6, #4]
    c084:	60bc      	str	r4, [r7, #8]
    c086:	607b      	str	r3, [r7, #4]
    c088:	2b07      	cmp	r3, #7
    c08a:	dd00      	ble.n	c08e <_vfprintf_r+0xace>
    c08c:	e263      	b.n	c556 <_vfprintf_r+0xf96>
    c08e:	3608      	adds	r6, #8
    c090:	e64f      	b.n	bd32 <_vfprintf_r+0x772>
    c092:	46a1      	mov	r9, r4
    c094:	e7ac      	b.n	bff0 <_vfprintf_r+0xa30>
    c096:	2301      	movs	r3, #1
    c098:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c09a:	4213      	tst	r3, r2
    c09c:	d000      	beq.n	c0a0 <_vfprintf_r+0xae0>
    c09e:	e6f6      	b.n	be8e <_vfprintf_r+0x8ce>
    c0a0:	6073      	str	r3, [r6, #4]
    c0a2:	687b      	ldr	r3, [r7, #4]
    c0a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c0a6:	3301      	adds	r3, #1
    c0a8:	3401      	adds	r4, #1
    c0aa:	6032      	str	r2, [r6, #0]
    c0ac:	60bc      	str	r4, [r7, #8]
    c0ae:	4698      	mov	r8, r3
    c0b0:	607b      	str	r3, [r7, #4]
    c0b2:	2b07      	cmp	r3, #7
    c0b4:	dc00      	bgt.n	c0b8 <_vfprintf_r+0xaf8>
    c0b6:	e71e      	b.n	bef6 <_vfprintf_r+0x936>
    c0b8:	003a      	movs	r2, r7
    c0ba:	4659      	mov	r1, fp
    c0bc:	9806      	ldr	r0, [sp, #24]
    c0be:	f003 fd51 	bl	fb64 <__sprint_r>
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d10c      	bne.n	c0e0 <_vfprintf_r+0xb20>
    c0c6:	687b      	ldr	r3, [r7, #4]
    c0c8:	68bc      	ldr	r4, [r7, #8]
    c0ca:	4698      	mov	r8, r3
    c0cc:	ae32      	add	r6, sp, #200	; 0xc8
    c0ce:	e713      	b.n	bef8 <_vfprintf_r+0x938>
    c0d0:	003a      	movs	r2, r7
    c0d2:	4659      	mov	r1, fp
    c0d4:	9806      	ldr	r0, [sp, #24]
    c0d6:	f003 fd45 	bl	fb64 <__sprint_r>
    c0da:	2800      	cmp	r0, #0
    c0dc:	d100      	bne.n	c0e0 <_vfprintf_r+0xb20>
    c0de:	e6cd      	b.n	be7c <_vfprintf_r+0x8bc>
    c0e0:	46d9      	mov	r9, fp
    c0e2:	e785      	b.n	bff0 <_vfprintf_r+0xa30>
    c0e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c0e6:	2b01      	cmp	r3, #1
    c0e8:	d100      	bne.n	c0ec <_vfprintf_r+0xb2c>
    c0ea:	e148      	b.n	c37e <_vfprintf_r+0xdbe>
    c0ec:	2b02      	cmp	r3, #2
    c0ee:	d123      	bne.n	c138 <_vfprintf_r+0xb78>
    c0f0:	9409      	str	r4, [sp, #36]	; 0x24
    c0f2:	2300      	movs	r3, #0
    c0f4:	2400      	movs	r4, #0
    c0f6:	930c      	str	r3, [sp, #48]	; 0x30
    c0f8:	940d      	str	r4, [sp, #52]	; 0x34
    c0fa:	e4a1      	b.n	ba40 <_vfprintf_r+0x480>
    c0fc:	003a      	movs	r2, r7
    c0fe:	4659      	mov	r1, fp
    c100:	9806      	ldr	r0, [sp, #24]
    c102:	f003 fd2f 	bl	fb64 <__sprint_r>
    c106:	2800      	cmp	r0, #0
    c108:	d1ea      	bne.n	c0e0 <_vfprintf_r+0xb20>
    c10a:	68bc      	ldr	r4, [r7, #8]
    c10c:	ae32      	add	r6, sp, #200	; 0xc8
    c10e:	e648      	b.n	bda2 <_vfprintf_r+0x7e2>
    c110:	003a      	movs	r2, r7
    c112:	4659      	mov	r1, fp
    c114:	9806      	ldr	r0, [sp, #24]
    c116:	f003 fd25 	bl	fb64 <__sprint_r>
    c11a:	2800      	cmp	r0, #0
    c11c:	d1e0      	bne.n	c0e0 <_vfprintf_r+0xb20>
    c11e:	68bc      	ldr	r4, [r7, #8]
    c120:	ae32      	add	r6, sp, #200	; 0xc8
    c122:	e5f2      	b.n	bd0a <_vfprintf_r+0x74a>
    c124:	003a      	movs	r2, r7
    c126:	4659      	mov	r1, fp
    c128:	9806      	ldr	r0, [sp, #24]
    c12a:	f003 fd1b 	bl	fb64 <__sprint_r>
    c12e:	2800      	cmp	r0, #0
    c130:	d1d6      	bne.n	c0e0 <_vfprintf_r+0xb20>
    c132:	68bc      	ldr	r4, [r7, #8]
    c134:	ae32      	add	r6, sp, #200	; 0xc8
    c136:	e5f8      	b.n	bd2a <_vfprintf_r+0x76a>
    c138:	9409      	str	r4, [sp, #36]	; 0x24
    c13a:	2300      	movs	r3, #0
    c13c:	2400      	movs	r4, #0
    c13e:	930c      	str	r3, [sp, #48]	; 0x30
    c140:	940d      	str	r4, [sp, #52]	; 0x34
    c142:	980c      	ldr	r0, [sp, #48]	; 0x30
    c144:	990d      	ldr	r1, [sp, #52]	; 0x34
    c146:	4653      	mov	r3, sl
    c148:	aa32      	add	r2, sp, #200	; 0xc8
    c14a:	4691      	mov	r9, r2
    c14c:	9308      	str	r3, [sp, #32]
    c14e:	46b2      	mov	sl, r6
    c150:	e007      	b.n	c162 <_vfprintf_r+0xba2>
    c152:	46c0      	nop			; (mov r8, r8)
    c154:	0001089c 	.word	0x0001089c
    c158:	00010898 	.word	0x00010898
    c15c:	000108ac 	.word	0x000108ac
    c160:	46a1      	mov	r9, r4
    c162:	074a      	lsls	r2, r1, #29
    c164:	4694      	mov	ip, r2
    c166:	464b      	mov	r3, r9
    c168:	4665      	mov	r5, ip
    c16a:	1e5c      	subs	r4, r3, #1
    c16c:	08c6      	lsrs	r6, r0, #3
    c16e:	2307      	movs	r3, #7
    c170:	08ca      	lsrs	r2, r1, #3
    c172:	4335      	orrs	r5, r6
    c174:	0011      	movs	r1, r2
    c176:	002a      	movs	r2, r5
    c178:	4003      	ands	r3, r0
    c17a:	3330      	adds	r3, #48	; 0x30
    c17c:	7023      	strb	r3, [r4, #0]
    c17e:	0028      	movs	r0, r5
    c180:	430a      	orrs	r2, r1
    c182:	d1ed      	bne.n	c160 <_vfprintf_r+0xba0>
    c184:	900c      	str	r0, [sp, #48]	; 0x30
    c186:	910d      	str	r1, [sp, #52]	; 0x34
    c188:	9908      	ldr	r1, [sp, #32]
    c18a:	4656      	mov	r6, sl
    c18c:	468a      	mov	sl, r1
    c18e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c190:	464a      	mov	r2, r9
    c192:	9411      	str	r4, [sp, #68]	; 0x44
    c194:	07c9      	lsls	r1, r1, #31
    c196:	d500      	bpl.n	c19a <_vfprintf_r+0xbda>
    c198:	e0e0      	b.n	c35c <_vfprintf_r+0xd9c>
    c19a:	ab32      	add	r3, sp, #200	; 0xc8
    c19c:	1b1b      	subs	r3, r3, r4
    c19e:	930e      	str	r3, [sp, #56]	; 0x38
    c1a0:	f7ff fb7b 	bl	b89a <_vfprintf_r+0x2da>
    c1a4:	9c07      	ldr	r4, [sp, #28]
    c1a6:	f7ff fa7d 	bl	b6a4 <_vfprintf_r+0xe4>
    c1aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
    c1ac:	2800      	cmp	r0, #0
    c1ae:	dc00      	bgt.n	c1b2 <_vfprintf_r+0xbf2>
    c1b0:	e2b9      	b.n	c726 <_vfprintf_r+0x1166>
    c1b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c1b4:	9914      	ldr	r1, [sp, #80]	; 0x50
    c1b6:	0013      	movs	r3, r2
    c1b8:	4690      	mov	r8, r2
    c1ba:	428b      	cmp	r3, r1
    c1bc:	dd00      	ble.n	c1c0 <_vfprintf_r+0xc00>
    c1be:	4688      	mov	r8, r1
    c1c0:	4643      	mov	r3, r8
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	dd0c      	ble.n	c1e0 <_vfprintf_r+0xc20>
    c1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1c8:	4444      	add	r4, r8
    c1ca:	6033      	str	r3, [r6, #0]
    c1cc:	4643      	mov	r3, r8
    c1ce:	6073      	str	r3, [r6, #4]
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	60bc      	str	r4, [r7, #8]
    c1d4:	3301      	adds	r3, #1
    c1d6:	607b      	str	r3, [r7, #4]
    c1d8:	2b07      	cmp	r3, #7
    c1da:	dd00      	ble.n	c1de <_vfprintf_r+0xc1e>
    c1dc:	e389      	b.n	c8f2 <_vfprintf_r+0x1332>
    c1de:	3608      	adds	r6, #8
    c1e0:	4643      	mov	r3, r8
    c1e2:	43db      	mvns	r3, r3
    c1e4:	4642      	mov	r2, r8
    c1e6:	17db      	asrs	r3, r3, #31
    c1e8:	4013      	ands	r3, r2
    c1ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c1ec:	1ad3      	subs	r3, r2, r3
    c1ee:	4698      	mov	r8, r3
    c1f0:	2b00      	cmp	r3, #0
    c1f2:	dc00      	bgt.n	c1f6 <_vfprintf_r+0xc36>
    c1f4:	e0eb      	b.n	c3ce <_vfprintf_r+0xe0e>
    c1f6:	2b10      	cmp	r3, #16
    c1f8:	dc01      	bgt.n	c1fe <_vfprintf_r+0xc3e>
    c1fa:	f000 fcd9 	bl	cbb0 <_vfprintf_r+0x15f0>
    c1fe:	4adc      	ldr	r2, [pc, #880]	; (c570 <_vfprintf_r+0xfb0>)
    c200:	687b      	ldr	r3, [r7, #4]
    c202:	4691      	mov	r9, r2
    c204:	2210      	movs	r2, #16
    c206:	464d      	mov	r5, r9
    c208:	4692      	mov	sl, r2
    c20a:	0022      	movs	r2, r4
    c20c:	4644      	mov	r4, r8
    c20e:	46d8      	mov	r8, fp
    c210:	e004      	b.n	c21c <_vfprintf_r+0xc5c>
    c212:	3608      	adds	r6, #8
    c214:	3c10      	subs	r4, #16
    c216:	2c10      	cmp	r4, #16
    c218:	dc00      	bgt.n	c21c <_vfprintf_r+0xc5c>
    c21a:	e0bf      	b.n	c39c <_vfprintf_r+0xddc>
    c21c:	4651      	mov	r1, sl
    c21e:	3210      	adds	r2, #16
    c220:	3301      	adds	r3, #1
    c222:	6035      	str	r5, [r6, #0]
    c224:	6071      	str	r1, [r6, #4]
    c226:	60ba      	str	r2, [r7, #8]
    c228:	607b      	str	r3, [r7, #4]
    c22a:	2b07      	cmp	r3, #7
    c22c:	ddf1      	ble.n	c212 <_vfprintf_r+0xc52>
    c22e:	003a      	movs	r2, r7
    c230:	4641      	mov	r1, r8
    c232:	9806      	ldr	r0, [sp, #24]
    c234:	f003 fc96 	bl	fb64 <__sprint_r>
    c238:	2800      	cmp	r0, #0
    c23a:	d000      	beq.n	c23e <_vfprintf_r+0xc7e>
    c23c:	e3b6      	b.n	c9ac <_vfprintf_r+0x13ec>
    c23e:	68ba      	ldr	r2, [r7, #8]
    c240:	687b      	ldr	r3, [r7, #4]
    c242:	ae32      	add	r6, sp, #200	; 0xc8
    c244:	e7e6      	b.n	c214 <_vfprintf_r+0xc54>
    c246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c248:	2b00      	cmp	r3, #0
    c24a:	d100      	bne.n	c24e <_vfprintf_r+0xc8e>
    c24c:	e092      	b.n	c374 <_vfprintf_r+0xdb4>
    c24e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c250:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c252:	ab32      	add	r3, sp, #200	; 0xc8
    c254:	46b1      	mov	r9, r6
    c256:	001e      	movs	r6, r3
    c258:	0020      	movs	r0, r4
    c25a:	0029      	movs	r1, r5
    c25c:	220a      	movs	r2, #10
    c25e:	2300      	movs	r3, #0
    c260:	f7fc fa54 	bl	870c <__aeabi_uldivmod>
    c264:	3e01      	subs	r6, #1
    c266:	3230      	adds	r2, #48	; 0x30
    c268:	7032      	strb	r2, [r6, #0]
    c26a:	2300      	movs	r3, #0
    c26c:	0020      	movs	r0, r4
    c26e:	0029      	movs	r1, r5
    c270:	220a      	movs	r2, #10
    c272:	f7fc fa4b 	bl	870c <__aeabi_uldivmod>
    c276:	0003      	movs	r3, r0
    c278:	0004      	movs	r4, r0
    c27a:	000d      	movs	r5, r1
    c27c:	430b      	orrs	r3, r1
    c27e:	d1eb      	bne.n	c258 <_vfprintf_r+0xc98>
    c280:	0032      	movs	r2, r6
    c282:	ab32      	add	r3, sp, #200	; 0xc8
    c284:	1a9b      	subs	r3, r3, r2
    c286:	9611      	str	r6, [sp, #68]	; 0x44
    c288:	940c      	str	r4, [sp, #48]	; 0x30
    c28a:	950d      	str	r5, [sp, #52]	; 0x34
    c28c:	464e      	mov	r6, r9
    c28e:	930e      	str	r3, [sp, #56]	; 0x38
    c290:	f7ff fb03 	bl	b89a <_vfprintf_r+0x2da>
    c294:	2300      	movs	r3, #0
    c296:	930e      	str	r3, [sp, #56]	; 0x38
    c298:	ab32      	add	r3, sp, #200	; 0xc8
    c29a:	9311      	str	r3, [sp, #68]	; 0x44
    c29c:	f7ff fafd 	bl	b89a <_vfprintf_r+0x2da>
    c2a0:	003a      	movs	r2, r7
    c2a2:	4659      	mov	r1, fp
    c2a4:	9806      	ldr	r0, [sp, #24]
    c2a6:	f003 fc5d 	bl	fb64 <__sprint_r>
    c2aa:	2800      	cmp	r0, #0
    c2ac:	d000      	beq.n	c2b0 <_vfprintf_r+0xcf0>
    c2ae:	e717      	b.n	c0e0 <_vfprintf_r+0xb20>
    c2b0:	ab16      	add	r3, sp, #88	; 0x58
    c2b2:	7fdb      	ldrb	r3, [r3, #31]
    c2b4:	68bc      	ldr	r4, [r7, #8]
    c2b6:	4698      	mov	r8, r3
    c2b8:	ae32      	add	r6, sp, #200	; 0xc8
    c2ba:	e513      	b.n	bce4 <_vfprintf_r+0x724>
    c2bc:	46b1      	mov	r9, r6
    c2be:	e697      	b.n	bff0 <_vfprintf_r+0xa30>
    c2c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c2c2:	1e5d      	subs	r5, r3, #1
    c2c4:	2d00      	cmp	r5, #0
    c2c6:	dc00      	bgt.n	c2ca <_vfprintf_r+0xd0a>
    c2c8:	e616      	b.n	bef8 <_vfprintf_r+0x938>
    c2ca:	4ba9      	ldr	r3, [pc, #676]	; (c570 <_vfprintf_r+0xfb0>)
    c2cc:	4699      	mov	r9, r3
    c2ce:	2d10      	cmp	r5, #16
    c2d0:	dc00      	bgt.n	c2d4 <_vfprintf_r+0xd14>
    c2d2:	e10a      	b.n	c4ea <_vfprintf_r+0xf2a>
    c2d4:	2310      	movs	r3, #16
    c2d6:	0022      	movs	r2, r4
    c2d8:	469a      	mov	sl, r3
    c2da:	465c      	mov	r4, fp
    c2dc:	4643      	mov	r3, r8
    c2de:	e004      	b.n	c2ea <_vfprintf_r+0xd2a>
    c2e0:	3608      	adds	r6, #8
    c2e2:	3d10      	subs	r5, #16
    c2e4:	2d10      	cmp	r5, #16
    c2e6:	dc00      	bgt.n	c2ea <_vfprintf_r+0xd2a>
    c2e8:	e0fc      	b.n	c4e4 <_vfprintf_r+0xf24>
    c2ea:	4649      	mov	r1, r9
    c2ec:	6031      	str	r1, [r6, #0]
    c2ee:	4651      	mov	r1, sl
    c2f0:	3210      	adds	r2, #16
    c2f2:	3301      	adds	r3, #1
    c2f4:	6071      	str	r1, [r6, #4]
    c2f6:	60ba      	str	r2, [r7, #8]
    c2f8:	607b      	str	r3, [r7, #4]
    c2fa:	2b07      	cmp	r3, #7
    c2fc:	ddf0      	ble.n	c2e0 <_vfprintf_r+0xd20>
    c2fe:	003a      	movs	r2, r7
    c300:	0021      	movs	r1, r4
    c302:	9806      	ldr	r0, [sp, #24]
    c304:	f003 fc2e 	bl	fb64 <__sprint_r>
    c308:	2800      	cmp	r0, #0
    c30a:	d000      	beq.n	c30e <_vfprintf_r+0xd4e>
    c30c:	e6c1      	b.n	c092 <_vfprintf_r+0xad2>
    c30e:	68ba      	ldr	r2, [r7, #8]
    c310:	687b      	ldr	r3, [r7, #4]
    c312:	ae32      	add	r6, sp, #200	; 0xc8
    c314:	e7e5      	b.n	c2e2 <_vfprintf_r+0xd22>
    c316:	990c      	ldr	r1, [sp, #48]	; 0x30
    c318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c31a:	0008      	movs	r0, r1
    c31c:	4310      	orrs	r0, r2
    c31e:	2302      	movs	r3, #2
    c320:	0002      	movs	r2, r0
    c322:	f7ff fa93 	bl	b84c <_vfprintf_r+0x28c>
    c326:	46a3      	mov	fp, r4
    c328:	0014      	movs	r4, r2
    c32a:	464a      	mov	r2, r9
    c32c:	1964      	adds	r4, r4, r5
    c32e:	3301      	adds	r3, #1
    c330:	6032      	str	r2, [r6, #0]
    c332:	6075      	str	r5, [r6, #4]
    c334:	60bc      	str	r4, [r7, #8]
    c336:	607b      	str	r3, [r7, #4]
    c338:	2b07      	cmp	r3, #7
    c33a:	dc00      	bgt.n	c33e <_vfprintf_r+0xd7e>
    c33c:	e542      	b.n	bdc4 <_vfprintf_r+0x804>
    c33e:	e5e8      	b.n	bf12 <_vfprintf_r+0x952>
    c340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c342:	681a      	ldr	r2, [r3, #0]
    c344:	f7ff fa68 	bl	b818 <_vfprintf_r+0x258>
    c348:	6813      	ldr	r3, [r2, #0]
    c34a:	9308      	str	r3, [sp, #32]
    c34c:	f7ff fb57 	bl	b9fe <_vfprintf_r+0x43e>
    c350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c352:	681a      	ldr	r2, [r3, #0]
    c354:	e412      	b.n	bb7c <_vfprintf_r+0x5bc>
    c356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c358:	681a      	ldr	r2, [r3, #0]
    c35a:	e426      	b.n	bbaa <_vfprintf_r+0x5ea>
    c35c:	2b30      	cmp	r3, #48	; 0x30
    c35e:	d100      	bne.n	c362 <_vfprintf_r+0xda2>
    c360:	e23c      	b.n	c7dc <_vfprintf_r+0x121c>
    c362:	2330      	movs	r3, #48	; 0x30
    c364:	3a02      	subs	r2, #2
    c366:	7013      	strb	r3, [r2, #0]
    c368:	ab32      	add	r3, sp, #200	; 0xc8
    c36a:	1a9b      	subs	r3, r3, r2
    c36c:	930e      	str	r3, [sp, #56]	; 0x38
    c36e:	9211      	str	r2, [sp, #68]	; 0x44
    c370:	f7ff fa93 	bl	b89a <_vfprintf_r+0x2da>
    c374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c376:	2b09      	cmp	r3, #9
    c378:	d900      	bls.n	c37c <_vfprintf_r+0xdbc>
    c37a:	e768      	b.n	c24e <_vfprintf_r+0xc8e>
    c37c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c37e:	2227      	movs	r2, #39	; 0x27
    c380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c382:	a928      	add	r1, sp, #160	; 0xa0
    c384:	3330      	adds	r3, #48	; 0x30
    c386:	548b      	strb	r3, [r1, r2]
    c388:	2301      	movs	r3, #1
    c38a:	aa16      	add	r2, sp, #88	; 0x58
    c38c:	4694      	mov	ip, r2
    c38e:	930e      	str	r3, [sp, #56]	; 0x38
    c390:	336e      	adds	r3, #110	; 0x6e
    c392:	4463      	add	r3, ip
    c394:	9409      	str	r4, [sp, #36]	; 0x24
    c396:	9311      	str	r3, [sp, #68]	; 0x44
    c398:	f7ff fa7f 	bl	b89a <_vfprintf_r+0x2da>
    c39c:	46c3      	mov	fp, r8
    c39e:	46a9      	mov	r9, r5
    c3a0:	46a0      	mov	r8, r4
    c3a2:	0014      	movs	r4, r2
    c3a4:	464a      	mov	r2, r9
    c3a6:	6032      	str	r2, [r6, #0]
    c3a8:	4642      	mov	r2, r8
    c3aa:	4444      	add	r4, r8
    c3ac:	3301      	adds	r3, #1
    c3ae:	6072      	str	r2, [r6, #4]
    c3b0:	60bc      	str	r4, [r7, #8]
    c3b2:	607b      	str	r3, [r7, #4]
    c3b4:	2b07      	cmp	r3, #7
    c3b6:	dc00      	bgt.n	c3ba <_vfprintf_r+0xdfa>
    c3b8:	e18d      	b.n	c6d6 <_vfprintf_r+0x1116>
    c3ba:	003a      	movs	r2, r7
    c3bc:	4659      	mov	r1, fp
    c3be:	9806      	ldr	r0, [sp, #24]
    c3c0:	f003 fbd0 	bl	fb64 <__sprint_r>
    c3c4:	2800      	cmp	r0, #0
    c3c6:	d000      	beq.n	c3ca <_vfprintf_r+0xe0a>
    c3c8:	e68a      	b.n	c0e0 <_vfprintf_r+0xb20>
    c3ca:	68bc      	ldr	r4, [r7, #8]
    c3cc:	ae32      	add	r6, sp, #200	; 0xc8
    c3ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c3d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c3d2:	4293      	cmp	r3, r2
    c3d4:	db00      	blt.n	c3d8 <_vfprintf_r+0xe18>
    c3d6:	e179      	b.n	c6cc <_vfprintf_r+0x110c>
    c3d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c3da:	6032      	str	r2, [r6, #0]
    c3dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c3de:	4694      	mov	ip, r2
    c3e0:	6072      	str	r2, [r6, #4]
    c3e2:	687a      	ldr	r2, [r7, #4]
    c3e4:	4464      	add	r4, ip
    c3e6:	3201      	adds	r2, #1
    c3e8:	60bc      	str	r4, [r7, #8]
    c3ea:	607a      	str	r2, [r7, #4]
    c3ec:	2a07      	cmp	r2, #7
    c3ee:	dd00      	ble.n	c3f2 <_vfprintf_r+0xe32>
    c3f0:	e176      	b.n	c6e0 <_vfprintf_r+0x1120>
    c3f2:	3608      	adds	r6, #8
    c3f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c3f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c3f8:	1ad3      	subs	r3, r2, r3
    c3fa:	1a52      	subs	r2, r2, r1
    c3fc:	4690      	mov	r8, r2
    c3fe:	429a      	cmp	r2, r3
    c400:	dd00      	ble.n	c404 <_vfprintf_r+0xe44>
    c402:	4698      	mov	r8, r3
    c404:	4642      	mov	r2, r8
    c406:	2a00      	cmp	r2, #0
    c408:	dd0f      	ble.n	c42a <_vfprintf_r+0xe6a>
    c40a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c40c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c40e:	468c      	mov	ip, r1
    c410:	4462      	add	r2, ip
    c412:	6032      	str	r2, [r6, #0]
    c414:	4642      	mov	r2, r8
    c416:	6072      	str	r2, [r6, #4]
    c418:	687a      	ldr	r2, [r7, #4]
    c41a:	4444      	add	r4, r8
    c41c:	3201      	adds	r2, #1
    c41e:	60bc      	str	r4, [r7, #8]
    c420:	607a      	str	r2, [r7, #4]
    c422:	2a07      	cmp	r2, #7
    c424:	dd00      	ble.n	c428 <_vfprintf_r+0xe68>
    c426:	e289      	b.n	c93c <_vfprintf_r+0x137c>
    c428:	3608      	adds	r6, #8
    c42a:	4642      	mov	r2, r8
    c42c:	43d5      	mvns	r5, r2
    c42e:	17ed      	asrs	r5, r5, #31
    c430:	4015      	ands	r5, r2
    c432:	1b5d      	subs	r5, r3, r5
    c434:	2d00      	cmp	r5, #0
    c436:	dc00      	bgt.n	c43a <_vfprintf_r+0xe7a>
    c438:	e4c5      	b.n	bdc6 <_vfprintf_r+0x806>
    c43a:	4a4d      	ldr	r2, [pc, #308]	; (c570 <_vfprintf_r+0xfb0>)
    c43c:	687b      	ldr	r3, [r7, #4]
    c43e:	4691      	mov	r9, r2
    c440:	2d10      	cmp	r5, #16
    c442:	dc00      	bgt.n	c446 <_vfprintf_r+0xe86>
    c444:	e771      	b.n	c32a <_vfprintf_r+0xd6a>
    c446:	2210      	movs	r2, #16
    c448:	4690      	mov	r8, r2
    c44a:	0022      	movs	r2, r4
    c44c:	465c      	mov	r4, fp
    c44e:	e004      	b.n	c45a <_vfprintf_r+0xe9a>
    c450:	3608      	adds	r6, #8
    c452:	3d10      	subs	r5, #16
    c454:	2d10      	cmp	r5, #16
    c456:	dc00      	bgt.n	c45a <_vfprintf_r+0xe9a>
    c458:	e765      	b.n	c326 <_vfprintf_r+0xd66>
    c45a:	4649      	mov	r1, r9
    c45c:	6031      	str	r1, [r6, #0]
    c45e:	4641      	mov	r1, r8
    c460:	3210      	adds	r2, #16
    c462:	3301      	adds	r3, #1
    c464:	6071      	str	r1, [r6, #4]
    c466:	60ba      	str	r2, [r7, #8]
    c468:	607b      	str	r3, [r7, #4]
    c46a:	2b07      	cmp	r3, #7
    c46c:	ddf0      	ble.n	c450 <_vfprintf_r+0xe90>
    c46e:	003a      	movs	r2, r7
    c470:	0021      	movs	r1, r4
    c472:	9806      	ldr	r0, [sp, #24]
    c474:	f003 fb76 	bl	fb64 <__sprint_r>
    c478:	2800      	cmp	r0, #0
    c47a:	d000      	beq.n	c47e <_vfprintf_r+0xebe>
    c47c:	e609      	b.n	c092 <_vfprintf_r+0xad2>
    c47e:	68ba      	ldr	r2, [r7, #8]
    c480:	687b      	ldr	r3, [r7, #4]
    c482:	ae32      	add	r6, sp, #200	; 0xc8
    c484:	e7e5      	b.n	c452 <_vfprintf_r+0xe92>
    c486:	003a      	movs	r2, r7
    c488:	4659      	mov	r1, fp
    c48a:	9806      	ldr	r0, [sp, #24]
    c48c:	f003 fb6a 	bl	fb64 <__sprint_r>
    c490:	2800      	cmp	r0, #0
    c492:	d000      	beq.n	c496 <_vfprintf_r+0xed6>
    c494:	e624      	b.n	c0e0 <_vfprintf_r+0xb20>
    c496:	68bc      	ldr	r4, [r7, #8]
    c498:	687b      	ldr	r3, [r7, #4]
    c49a:	ae32      	add	r6, sp, #200	; 0xc8
    c49c:	e504      	b.n	bea8 <_vfprintf_r+0x8e8>
    c49e:	2307      	movs	r3, #7
    c4a0:	3207      	adds	r2, #7
    c4a2:	439a      	bics	r2, r3
    c4a4:	3301      	adds	r3, #1
    c4a6:	469c      	mov	ip, r3
    c4a8:	4494      	add	ip, r2
    c4aa:	4663      	mov	r3, ip
    c4ac:	930f      	str	r3, [sp, #60]	; 0x3c
    c4ae:	6853      	ldr	r3, [r2, #4]
    c4b0:	6812      	ldr	r2, [r2, #0]
    c4b2:	930d      	str	r3, [sp, #52]	; 0x34
    c4b4:	920c      	str	r2, [sp, #48]	; 0x30
    c4b6:	f7ff faa7 	bl	ba08 <_vfprintf_r+0x448>
    c4ba:	2207      	movs	r2, #7
    c4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c4be:	3307      	adds	r3, #7
    c4c0:	4393      	bics	r3, r2
    c4c2:	3201      	adds	r2, #1
    c4c4:	4694      	mov	ip, r2
    c4c6:	449c      	add	ip, r3
    c4c8:	4662      	mov	r2, ip
    c4ca:	920f      	str	r2, [sp, #60]	; 0x3c
    c4cc:	681a      	ldr	r2, [r3, #0]
    c4ce:	685b      	ldr	r3, [r3, #4]
    c4d0:	0011      	movs	r1, r2
    c4d2:	001a      	movs	r2, r3
    c4d4:	0008      	movs	r0, r1
    c4d6:	4310      	orrs	r0, r2
    c4d8:	910c      	str	r1, [sp, #48]	; 0x30
    c4da:	920d      	str	r2, [sp, #52]	; 0x34
    c4dc:	2300      	movs	r3, #0
    c4de:	0002      	movs	r2, r0
    c4e0:	f7ff f9b4 	bl	b84c <_vfprintf_r+0x28c>
    c4e4:	46a3      	mov	fp, r4
    c4e6:	4698      	mov	r8, r3
    c4e8:	0014      	movs	r4, r2
    c4ea:	464b      	mov	r3, r9
    c4ec:	6075      	str	r5, [r6, #4]
    c4ee:	6033      	str	r3, [r6, #0]
    c4f0:	1964      	adds	r4, r4, r5
    c4f2:	e4f7      	b.n	bee4 <_vfprintf_r+0x924>
    c4f4:	003a      	movs	r2, r7
    c4f6:	4659      	mov	r1, fp
    c4f8:	9806      	ldr	r0, [sp, #24]
    c4fa:	f003 fb33 	bl	fb64 <__sprint_r>
    c4fe:	2800      	cmp	r0, #0
    c500:	d000      	beq.n	c504 <_vfprintf_r+0xf44>
    c502:	e5ed      	b.n	c0e0 <_vfprintf_r+0xb20>
    c504:	687b      	ldr	r3, [r7, #4]
    c506:	68bc      	ldr	r4, [r7, #8]
    c508:	4698      	mov	r8, r3
    c50a:	ae32      	add	r6, sp, #200	; 0xc8
    c50c:	e4da      	b.n	bec4 <_vfprintf_r+0x904>
    c50e:	2207      	movs	r2, #7
    c510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c512:	3307      	adds	r3, #7
    c514:	4393      	bics	r3, r2
    c516:	3201      	adds	r2, #1
    c518:	4694      	mov	ip, r2
    c51a:	449c      	add	ip, r3
    c51c:	4662      	mov	r2, ip
    c51e:	920f      	str	r2, [sp, #60]	; 0x3c
    c520:	681a      	ldr	r2, [r3, #0]
    c522:	685b      	ldr	r3, [r3, #4]
    c524:	0011      	movs	r1, r2
    c526:	001a      	movs	r2, r3
    c528:	0008      	movs	r0, r1
    c52a:	4310      	orrs	r0, r2
    c52c:	910c      	str	r1, [sp, #48]	; 0x30
    c52e:	920d      	str	r2, [sp, #52]	; 0x34
    c530:	2301      	movs	r3, #1
    c532:	0002      	movs	r2, r0
    c534:	f7ff f98a 	bl	b84c <_vfprintf_r+0x28c>
    c538:	2207      	movs	r2, #7
    c53a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c53c:	3307      	adds	r3, #7
    c53e:	4393      	bics	r3, r2
    c540:	3201      	adds	r2, #1
    c542:	4694      	mov	ip, r2
    c544:	449c      	add	ip, r3
    c546:	4662      	mov	r2, ip
    c548:	920f      	str	r2, [sp, #60]	; 0x3c
    c54a:	681a      	ldr	r2, [r3, #0]
    c54c:	685b      	ldr	r3, [r3, #4]
    c54e:	920c      	str	r2, [sp, #48]	; 0x30
    c550:	930d      	str	r3, [sp, #52]	; 0x34
    c552:	f7ff f966 	bl	b822 <_vfprintf_r+0x262>
    c556:	003a      	movs	r2, r7
    c558:	4659      	mov	r1, fp
    c55a:	9806      	ldr	r0, [sp, #24]
    c55c:	f003 fb02 	bl	fb64 <__sprint_r>
    c560:	2800      	cmp	r0, #0
    c562:	d000      	beq.n	c566 <_vfprintf_r+0xfa6>
    c564:	e5bc      	b.n	c0e0 <_vfprintf_r+0xb20>
    c566:	68bc      	ldr	r4, [r7, #8]
    c568:	ae32      	add	r6, sp, #200	; 0xc8
    c56a:	f7ff fbe2 	bl	bd32 <_vfprintf_r+0x772>
    c56e:	46c0      	nop			; (mov r8, r8)
    c570:	000108ac 	.word	0x000108ac
    c574:	980c      	ldr	r0, [sp, #48]	; 0x30
    c576:	990d      	ldr	r1, [sp, #52]	; 0x34
    c578:	2300      	movs	r3, #0
    c57a:	4242      	negs	r2, r0
    c57c:	418b      	sbcs	r3, r1
    c57e:	0011      	movs	r1, r2
    c580:	001a      	movs	r2, r3
    c582:	232d      	movs	r3, #45	; 0x2d
    c584:	a816      	add	r0, sp, #88	; 0x58
    c586:	77c3      	strb	r3, [r0, #31]
    c588:	0008      	movs	r0, r1
    c58a:	4310      	orrs	r0, r2
    c58c:	910c      	str	r1, [sp, #48]	; 0x30
    c58e:	920d      	str	r2, [sp, #52]	; 0x34
    c590:	4698      	mov	r8, r3
    c592:	0002      	movs	r2, r0
    c594:	3b2c      	subs	r3, #44	; 0x2c
    c596:	f7ff f95d 	bl	b854 <_vfprintf_r+0x294>
    c59a:	9916      	ldr	r1, [sp, #88]	; 0x58
    c59c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    c59e:	000a      	movs	r2, r1
    c5a0:	0008      	movs	r0, r1
    c5a2:	002b      	movs	r3, r5
    c5a4:	0029      	movs	r1, r5
    c5a6:	f7fe fd9f 	bl	b0e8 <__aeabi_dcmpun>
    c5aa:	2800      	cmp	r0, #0
    c5ac:	d000      	beq.n	c5b0 <_vfprintf_r+0xff0>
    c5ae:	e2c6      	b.n	cb3e <_vfprintf_r+0x157e>
    c5b0:	4653      	mov	r3, sl
    c5b2:	3301      	adds	r3, #1
    c5b4:	d100      	bne.n	c5b8 <_vfprintf_r+0xff8>
    c5b6:	e09f      	b.n	c6f8 <_vfprintf_r+0x1138>
    c5b8:	2320      	movs	r3, #32
    c5ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c5bc:	439a      	bics	r2, r3
    c5be:	920e      	str	r2, [sp, #56]	; 0x38
    c5c0:	2a47      	cmp	r2, #71	; 0x47
    c5c2:	d100      	bne.n	c5c6 <_vfprintf_r+0x1006>
    c5c4:	e1a1      	b.n	c90a <_vfprintf_r+0x134a>
    c5c6:	2380      	movs	r3, #128	; 0x80
    c5c8:	005b      	lsls	r3, r3, #1
    c5ca:	4323      	orrs	r3, r4
    c5cc:	9309      	str	r3, [sp, #36]	; 0x24
    c5ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c5d0:	2b00      	cmp	r3, #0
    c5d2:	da00      	bge.n	c5d6 <_vfprintf_r+0x1016>
    c5d4:	e1ed      	b.n	c9b2 <_vfprintf_r+0x13f2>
    c5d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c5d8:	9308      	str	r3, [sp, #32]
    c5da:	2300      	movs	r3, #0
    c5dc:	4691      	mov	r9, r2
    c5de:	9310      	str	r3, [sp, #64]	; 0x40
    c5e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c5e2:	2b66      	cmp	r3, #102	; 0x66
    c5e4:	d100      	bne.n	c5e8 <_vfprintf_r+0x1028>
    c5e6:	e1b8      	b.n	c95a <_vfprintf_r+0x139a>
    c5e8:	2b46      	cmp	r3, #70	; 0x46
    c5ea:	d100      	bne.n	c5ee <_vfprintf_r+0x102e>
    c5ec:	e237      	b.n	ca5e <_vfprintf_r+0x149e>
    c5ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c5f0:	9806      	ldr	r0, [sp, #24]
    c5f2:	3a45      	subs	r2, #69	; 0x45
    c5f4:	0013      	movs	r3, r2
    c5f6:	4259      	negs	r1, r3
    c5f8:	4159      	adcs	r1, r3
    c5fa:	ab20      	add	r3, sp, #128	; 0x80
    c5fc:	000d      	movs	r5, r1
    c5fe:	9303      	str	r3, [sp, #12]
    c600:	ab1f      	add	r3, sp, #124	; 0x7c
    c602:	9302      	str	r3, [sp, #8]
    c604:	2302      	movs	r3, #2
    c606:	aa23      	add	r2, sp, #140	; 0x8c
    c608:	4455      	add	r5, sl
    c60a:	921b      	str	r2, [sp, #108]	; 0x6c
    c60c:	9204      	str	r2, [sp, #16]
    c60e:	9300      	str	r3, [sp, #0]
    c610:	9501      	str	r5, [sp, #4]
    c612:	9b08      	ldr	r3, [sp, #32]
    c614:	464a      	mov	r2, r9
    c616:	f000 fd25 	bl	d064 <_dtoa_r>
    c61a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c61c:	9011      	str	r0, [sp, #68]	; 0x44
    c61e:	2b67      	cmp	r3, #103	; 0x67
    c620:	d000      	beq.n	c624 <_vfprintf_r+0x1064>
    c622:	e20b      	b.n	ca3c <_vfprintf_r+0x147c>
    c624:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c626:	4698      	mov	r8, r3
    c628:	44a8      	add	r8, r5
    c62a:	07e3      	lsls	r3, r4, #31
    c62c:	d400      	bmi.n	c630 <_vfprintf_r+0x1070>
    c62e:	e277      	b.n	cb20 <_vfprintf_r+0x1560>
    c630:	2300      	movs	r3, #0
    c632:	2200      	movs	r2, #0
    c634:	4648      	mov	r0, r9
    c636:	9908      	ldr	r1, [sp, #32]
    c638:	f7fc f800 	bl	863c <__aeabi_dcmpeq>
    c63c:	4643      	mov	r3, r8
    c63e:	2800      	cmp	r0, #0
    c640:	d10a      	bne.n	c658 <_vfprintf_r+0x1098>
    c642:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c644:	4543      	cmp	r3, r8
    c646:	d207      	bcs.n	c658 <_vfprintf_r+0x1098>
    c648:	2130      	movs	r1, #48	; 0x30
    c64a:	4640      	mov	r0, r8
    c64c:	1c5a      	adds	r2, r3, #1
    c64e:	9223      	str	r2, [sp, #140]	; 0x8c
    c650:	7019      	strb	r1, [r3, #0]
    c652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c654:	4298      	cmp	r0, r3
    c656:	d8f9      	bhi.n	c64c <_vfprintf_r+0x108c>
    c658:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c65a:	1a9b      	subs	r3, r3, r2
    c65c:	9314      	str	r3, [sp, #80]	; 0x50
    c65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c660:	2b47      	cmp	r3, #71	; 0x47
    c662:	d100      	bne.n	c666 <_vfprintf_r+0x10a6>
    c664:	e0d0      	b.n	c808 <_vfprintf_r+0x1248>
    c666:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c668:	2b65      	cmp	r3, #101	; 0x65
    c66a:	dc00      	bgt.n	c66e <_vfprintf_r+0x10ae>
    c66c:	e2d5      	b.n	cc1a <_vfprintf_r+0x165a>
    c66e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c670:	2b66      	cmp	r3, #102	; 0x66
    c672:	d100      	bne.n	c676 <_vfprintf_r+0x10b6>
    c674:	e1c6      	b.n	ca04 <_vfprintf_r+0x1444>
    c676:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c678:	9313      	str	r3, [sp, #76]	; 0x4c
    c67a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c67c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c67e:	0019      	movs	r1, r3
    c680:	4291      	cmp	r1, r2
    c682:	dd00      	ble.n	c686 <_vfprintf_r+0x10c6>
    c684:	e1a0      	b.n	c9c8 <_vfprintf_r+0x1408>
    c686:	07e3      	lsls	r3, r4, #31
    c688:	d500      	bpl.n	c68c <_vfprintf_r+0x10cc>
    c68a:	e242      	b.n	cb12 <_vfprintf_r+0x1552>
    c68c:	43d3      	mvns	r3, r2
    c68e:	17db      	asrs	r3, r3, #31
    c690:	0011      	movs	r1, r2
    c692:	401a      	ands	r2, r3
    c694:	2367      	movs	r3, #103	; 0x67
    c696:	9208      	str	r2, [sp, #32]
    c698:	910e      	str	r1, [sp, #56]	; 0x38
    c69a:	9312      	str	r3, [sp, #72]	; 0x48
    c69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c69e:	2b00      	cmp	r3, #0
    c6a0:	d000      	beq.n	c6a4 <_vfprintf_r+0x10e4>
    c6a2:	e0a9      	b.n	c7f8 <_vfprintf_r+0x1238>
    c6a4:	ab16      	add	r3, sp, #88	; 0x58
    c6a6:	7fdb      	ldrb	r3, [r3, #31]
    c6a8:	4698      	mov	r8, r3
    c6aa:	2300      	movs	r3, #0
    c6ac:	469a      	mov	sl, r3
    c6ae:	f7ff f8fc 	bl	b8aa <_vfprintf_r+0x2ea>
    c6b2:	46cb      	mov	fp, r9
    c6b4:	46a1      	mov	r9, r4
    c6b6:	0014      	movs	r4, r2
    c6b8:	e637      	b.n	c32a <_vfprintf_r+0xd6a>
    c6ba:	464b      	mov	r3, r9
    c6bc:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c6be:	f002 f8db 	bl	e878 <__retarget_lock_release_recursive>
    c6c2:	2301      	movs	r3, #1
    c6c4:	425b      	negs	r3, r3
    c6c6:	930a      	str	r3, [sp, #40]	; 0x28
    c6c8:	f7ff f82b 	bl	b722 <_vfprintf_r+0x162>
    c6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c6ce:	07d2      	lsls	r2, r2, #31
    c6d0:	d400      	bmi.n	c6d4 <_vfprintf_r+0x1114>
    c6d2:	e68f      	b.n	c3f4 <_vfprintf_r+0xe34>
    c6d4:	e680      	b.n	c3d8 <_vfprintf_r+0xe18>
    c6d6:	3608      	adds	r6, #8
    c6d8:	e679      	b.n	c3ce <_vfprintf_r+0xe0e>
    c6da:	68bc      	ldr	r4, [r7, #8]
    c6dc:	f7ff fb73 	bl	bdc6 <_vfprintf_r+0x806>
    c6e0:	003a      	movs	r2, r7
    c6e2:	4659      	mov	r1, fp
    c6e4:	9806      	ldr	r0, [sp, #24]
    c6e6:	f003 fa3d 	bl	fb64 <__sprint_r>
    c6ea:	2800      	cmp	r0, #0
    c6ec:	d000      	beq.n	c6f0 <_vfprintf_r+0x1130>
    c6ee:	e4f7      	b.n	c0e0 <_vfprintf_r+0xb20>
    c6f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c6f2:	68bc      	ldr	r4, [r7, #8]
    c6f4:	ae32      	add	r6, sp, #200	; 0xc8
    c6f6:	e67d      	b.n	c3f4 <_vfprintf_r+0xe34>
    c6f8:	2320      	movs	r3, #32
    c6fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c6fc:	439a      	bics	r2, r3
    c6fe:	3b1a      	subs	r3, #26
    c700:	920e      	str	r2, [sp, #56]	; 0x38
    c702:	469a      	mov	sl, r3
    c704:	e75f      	b.n	c5c6 <_vfprintf_r+0x1006>
    c706:	232d      	movs	r3, #45	; 0x2d
    c708:	aa16      	add	r2, sp, #88	; 0x58
    c70a:	77d3      	strb	r3, [r2, #31]
    c70c:	4698      	mov	r8, r3
    c70e:	f7ff faa8 	bl	bc62 <_vfprintf_r+0x6a2>
    c712:	003a      	movs	r2, r7
    c714:	4659      	mov	r1, fp
    c716:	9806      	ldr	r0, [sp, #24]
    c718:	f003 fa24 	bl	fb64 <__sprint_r>
    c71c:	2800      	cmp	r0, #0
    c71e:	d000      	beq.n	c722 <_vfprintf_r+0x1162>
    c720:	e4de      	b.n	c0e0 <_vfprintf_r+0xb20>
    c722:	ae32      	add	r6, sp, #200	; 0xc8
    c724:	e419      	b.n	bf5a <_vfprintf_r+0x99a>
    c726:	4be3      	ldr	r3, [pc, #908]	; (cab4 <_vfprintf_r+0x14f4>)
    c728:	3401      	adds	r4, #1
    c72a:	6033      	str	r3, [r6, #0]
    c72c:	2301      	movs	r3, #1
    c72e:	6073      	str	r3, [r6, #4]
    c730:	687b      	ldr	r3, [r7, #4]
    c732:	60bc      	str	r4, [r7, #8]
    c734:	3301      	adds	r3, #1
    c736:	607b      	str	r3, [r7, #4]
    c738:	2b07      	cmp	r3, #7
    c73a:	dd00      	ble.n	c73e <_vfprintf_r+0x117e>
    c73c:	e155      	b.n	c9ea <_vfprintf_r+0x142a>
    c73e:	3608      	adds	r6, #8
    c740:	2800      	cmp	r0, #0
    c742:	d107      	bne.n	c754 <_vfprintf_r+0x1194>
    c744:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c746:	2b00      	cmp	r3, #0
    c748:	d104      	bne.n	c754 <_vfprintf_r+0x1194>
    c74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c74c:	07db      	lsls	r3, r3, #31
    c74e:	d401      	bmi.n	c754 <_vfprintf_r+0x1194>
    c750:	f7ff fb39 	bl	bdc6 <_vfprintf_r+0x806>
    c754:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c756:	6033      	str	r3, [r6, #0]
    c758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c75a:	1919      	adds	r1, r3, r4
    c75c:	6073      	str	r3, [r6, #4]
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	60b9      	str	r1, [r7, #8]
    c762:	3301      	adds	r3, #1
    c764:	607b      	str	r3, [r7, #4]
    c766:	2b07      	cmp	r3, #7
    c768:	dd00      	ble.n	c76c <_vfprintf_r+0x11ac>
    c76a:	e1c4      	b.n	caf6 <_vfprintf_r+0x1536>
    c76c:	0032      	movs	r2, r6
    c76e:	3208      	adds	r2, #8
    c770:	2800      	cmp	r0, #0
    c772:	da00      	bge.n	c776 <_vfprintf_r+0x11b6>
    c774:	e195      	b.n	caa2 <_vfprintf_r+0x14e2>
    c776:	9811      	ldr	r0, [sp, #68]	; 0x44
    c778:	3301      	adds	r3, #1
    c77a:	6010      	str	r0, [r2, #0]
    c77c:	9814      	ldr	r0, [sp, #80]	; 0x50
    c77e:	607b      	str	r3, [r7, #4]
    c780:	1844      	adds	r4, r0, r1
    c782:	6050      	str	r0, [r2, #4]
    c784:	60bc      	str	r4, [r7, #8]
    c786:	2b07      	cmp	r3, #7
    c788:	dd01      	ble.n	c78e <_vfprintf_r+0x11ce>
    c78a:	f7ff fbc2 	bl	bf12 <_vfprintf_r+0x952>
    c78e:	3208      	adds	r2, #8
    c790:	0016      	movs	r6, r2
    c792:	f7ff fb18 	bl	bdc6 <_vfprintf_r+0x806>
    c796:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c79a:	680b      	ldr	r3, [r1, #0]
    c79c:	601a      	str	r2, [r3, #0]
    c79e:	17d2      	asrs	r2, r2, #31
    c7a0:	605a      	str	r2, [r3, #4]
    c7a2:	000b      	movs	r3, r1
    c7a4:	3304      	adds	r3, #4
    c7a6:	930f      	str	r3, [sp, #60]	; 0x3c
    c7a8:	f7fe ff58 	bl	b65c <_vfprintf_r+0x9c>
    c7ac:	464b      	mov	r3, r9
    c7ae:	9a07      	ldr	r2, [sp, #28]
    c7b0:	431c      	orrs	r4, r3
    c7b2:	3201      	adds	r2, #1
    c7b4:	7813      	ldrb	r3, [r2, #0]
    c7b6:	9207      	str	r2, [sp, #28]
    c7b8:	f7fe ff8b 	bl	b6d2 <_vfprintf_r+0x112>
    c7bc:	003a      	movs	r2, r7
    c7be:	4659      	mov	r1, fp
    c7c0:	9806      	ldr	r0, [sp, #24]
    c7c2:	f003 f9cf 	bl	fb64 <__sprint_r>
    c7c6:	2800      	cmp	r0, #0
    c7c8:	d000      	beq.n	c7cc <_vfprintf_r+0x120c>
    c7ca:	e489      	b.n	c0e0 <_vfprintf_r+0xb20>
    c7cc:	68bc      	ldr	r4, [r7, #8]
    c7ce:	ae32      	add	r6, sp, #200	; 0xc8
    c7d0:	f7ff fbdc 	bl	bf8c <_vfprintf_r+0x9cc>
    c7d4:	4bb8      	ldr	r3, [pc, #736]	; (cab8 <_vfprintf_r+0x14f8>)
    c7d6:	9311      	str	r3, [sp, #68]	; 0x44
    c7d8:	f7ff fa4a 	bl	bc70 <_vfprintf_r+0x6b0>
    c7dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c7de:	ab32      	add	r3, sp, #200	; 0xc8
    c7e0:	1a9b      	subs	r3, r3, r2
    c7e2:	930e      	str	r3, [sp, #56]	; 0x38
    c7e4:	f7ff f859 	bl	b89a <_vfprintf_r+0x2da>
    c7e8:	9811      	ldr	r0, [sp, #68]	; 0x44
    c7ea:	f7fe feb7 	bl	b55c <strlen>
    c7ee:	0002      	movs	r2, r0
    c7f0:	900e      	str	r0, [sp, #56]	; 0x38
    c7f2:	0003      	movs	r3, r0
    c7f4:	f7ff f9a1 	bl	bb3a <_vfprintf_r+0x57a>
    c7f8:	232d      	movs	r3, #45	; 0x2d
    c7fa:	aa16      	add	r2, sp, #88	; 0x58
    c7fc:	77d3      	strb	r3, [r2, #31]
    c7fe:	4698      	mov	r8, r3
    c800:	2300      	movs	r3, #0
    c802:	469a      	mov	sl, r3
    c804:	f7ff f854 	bl	b8b0 <_vfprintf_r+0x2f0>
    c808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c80a:	9313      	str	r3, [sp, #76]	; 0x4c
    c80c:	1cda      	adds	r2, r3, #3
    c80e:	db02      	blt.n	c816 <_vfprintf_r+0x1256>
    c810:	459a      	cmp	sl, r3
    c812:	db00      	blt.n	c816 <_vfprintf_r+0x1256>
    c814:	e731      	b.n	c67a <_vfprintf_r+0x10ba>
    c816:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c818:	3b02      	subs	r3, #2
    c81a:	9312      	str	r3, [sp, #72]	; 0x48
    c81c:	222c      	movs	r2, #44	; 0x2c
    c81e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c820:	2148      	movs	r1, #72	; 0x48
    c822:	1e5d      	subs	r5, r3, #1
    c824:	ab16      	add	r3, sp, #88	; 0x58
    c826:	189b      	adds	r3, r3, r2
    c828:	466a      	mov	r2, sp
    c82a:	1852      	adds	r2, r2, r1
    c82c:	7812      	ldrb	r2, [r2, #0]
    c82e:	951f      	str	r5, [sp, #124]	; 0x7c
    c830:	701a      	strb	r2, [r3, #0]
    c832:	2d00      	cmp	r5, #0
    c834:	da00      	bge.n	c838 <_vfprintf_r+0x1278>
    c836:	e1cb      	b.n	cbd0 <_vfprintf_r+0x1610>
    c838:	212d      	movs	r1, #45	; 0x2d
    c83a:	232b      	movs	r3, #43	; 0x2b
    c83c:	aa16      	add	r2, sp, #88	; 0x58
    c83e:	1852      	adds	r2, r2, r1
    c840:	7013      	strb	r3, [r2, #0]
    c842:	2d09      	cmp	r5, #9
    c844:	dc00      	bgt.n	c848 <_vfprintf_r+0x1288>
    c846:	e16d      	b.n	cb24 <_vfprintf_r+0x1564>
    c848:	aa16      	add	r2, sp, #88	; 0x58
    c84a:	233b      	movs	r3, #59	; 0x3b
    c84c:	4694      	mov	ip, r2
    c84e:	4463      	add	r3, ip
    c850:	469a      	mov	sl, r3
    c852:	46b1      	mov	r9, r6
    c854:	46a0      	mov	r8, r4
    c856:	4656      	mov	r6, sl
    c858:	e000      	b.n	c85c <_vfprintf_r+0x129c>
    c85a:	0026      	movs	r6, r4
    c85c:	0028      	movs	r0, r5
    c85e:	210a      	movs	r1, #10
    c860:	f7fb fed6 	bl	8610 <__aeabi_idivmod>
    c864:	1e74      	subs	r4, r6, #1
    c866:	3130      	adds	r1, #48	; 0x30
    c868:	7021      	strb	r1, [r4, #0]
    c86a:	0028      	movs	r0, r5
    c86c:	210a      	movs	r1, #10
    c86e:	f7fb fde9 	bl	8444 <__divsi3>
    c872:	0005      	movs	r5, r0
    c874:	2809      	cmp	r0, #9
    c876:	dcf0      	bgt.n	c85a <_vfprintf_r+0x129a>
    c878:	0023      	movs	r3, r4
    c87a:	4644      	mov	r4, r8
    c87c:	46b0      	mov	r8, r6
    c87e:	464e      	mov	r6, r9
    c880:	4699      	mov	r9, r3
    c882:	0003      	movs	r3, r0
    c884:	3330      	adds	r3, #48	; 0x30
    c886:	b2d8      	uxtb	r0, r3
    c888:	4643      	mov	r3, r8
    c88a:	3b02      	subs	r3, #2
    c88c:	7018      	strb	r0, [r3, #0]
    c88e:	459a      	cmp	sl, r3
    c890:	d800      	bhi.n	c894 <_vfprintf_r+0x12d4>
    c892:	e1f6      	b.n	cc82 <_vfprintf_r+0x16c2>
    c894:	4642      	mov	r2, r8
    c896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c898:	4645      	mov	r5, r8
    c89a:	1a99      	subs	r1, r3, r2
    c89c:	2301      	movs	r3, #1
    c89e:	3107      	adds	r1, #7
    c8a0:	425b      	negs	r3, r3
    c8a2:	e001      	b.n	c8a8 <_vfprintf_r+0x12e8>
    c8a4:	5ce8      	ldrb	r0, [r5, r3]
    c8a6:	3301      	adds	r3, #1
    c8a8:	aa21      	add	r2, sp, #132	; 0x84
    c8aa:	18d2      	adds	r2, r2, r3
    c8ac:	70d0      	strb	r0, [r2, #3]
    c8ae:	428b      	cmp	r3, r1
    c8b0:	d1f8      	bne.n	c8a4 <_vfprintf_r+0x12e4>
    c8b2:	a916      	add	r1, sp, #88	; 0x58
    c8b4:	468c      	mov	ip, r1
    c8b6:	222e      	movs	r2, #46	; 0x2e
    c8b8:	464b      	mov	r3, r9
    c8ba:	4462      	add	r2, ip
    c8bc:	4694      	mov	ip, r2
    c8be:	1afb      	subs	r3, r7, r3
    c8c0:	4463      	add	r3, ip
    c8c2:	aa21      	add	r2, sp, #132	; 0x84
    c8c4:	9914      	ldr	r1, [sp, #80]	; 0x50
    c8c6:	1a9b      	subs	r3, r3, r2
    c8c8:	469c      	mov	ip, r3
    c8ca:	000a      	movs	r2, r1
    c8cc:	4462      	add	r2, ip
    c8ce:	931a      	str	r3, [sp, #104]	; 0x68
    c8d0:	920e      	str	r2, [sp, #56]	; 0x38
    c8d2:	2901      	cmp	r1, #1
    c8d4:	dc00      	bgt.n	c8d8 <_vfprintf_r+0x1318>
    c8d6:	e170      	b.n	cbba <_vfprintf_r+0x15fa>
    c8d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8dc:	4694      	mov	ip, r2
    c8de:	4463      	add	r3, ip
    c8e0:	001a      	movs	r2, r3
    c8e2:	930e      	str	r3, [sp, #56]	; 0x38
    c8e4:	43db      	mvns	r3, r3
    c8e6:	17db      	asrs	r3, r3, #31
    c8e8:	401a      	ands	r2, r3
    c8ea:	2300      	movs	r3, #0
    c8ec:	9208      	str	r2, [sp, #32]
    c8ee:	9313      	str	r3, [sp, #76]	; 0x4c
    c8f0:	e6d4      	b.n	c69c <_vfprintf_r+0x10dc>
    c8f2:	003a      	movs	r2, r7
    c8f4:	4659      	mov	r1, fp
    c8f6:	9806      	ldr	r0, [sp, #24]
    c8f8:	f003 f934 	bl	fb64 <__sprint_r>
    c8fc:	2800      	cmp	r0, #0
    c8fe:	d001      	beq.n	c904 <_vfprintf_r+0x1344>
    c900:	f7ff fbee 	bl	c0e0 <_vfprintf_r+0xb20>
    c904:	68bc      	ldr	r4, [r7, #8]
    c906:	ae32      	add	r6, sp, #200	; 0xc8
    c908:	e46a      	b.n	c1e0 <_vfprintf_r+0xc20>
    c90a:	4653      	mov	r3, sl
    c90c:	2b00      	cmp	r3, #0
    c90e:	d000      	beq.n	c912 <_vfprintf_r+0x1352>
    c910:	e659      	b.n	c5c6 <_vfprintf_r+0x1006>
    c912:	3301      	adds	r3, #1
    c914:	469a      	mov	sl, r3
    c916:	e656      	b.n	c5c6 <_vfprintf_r+0x1006>
    c918:	4653      	mov	r3, sl
    c91a:	9308      	str	r3, [sp, #32]
    c91c:	2b06      	cmp	r3, #6
    c91e:	d901      	bls.n	c924 <_vfprintf_r+0x1364>
    c920:	2306      	movs	r3, #6
    c922:	9308      	str	r3, [sp, #32]
    c924:	9b08      	ldr	r3, [sp, #32]
    c926:	950f      	str	r5, [sp, #60]	; 0x3c
    c928:	930e      	str	r3, [sp, #56]	; 0x38
    c92a:	2300      	movs	r3, #0
    c92c:	4698      	mov	r8, r3
    c92e:	469a      	mov	sl, r3
    c930:	9313      	str	r3, [sp, #76]	; 0x4c
    c932:	4b62      	ldr	r3, [pc, #392]	; (cabc <_vfprintf_r+0x14fc>)
    c934:	9409      	str	r4, [sp, #36]	; 0x24
    c936:	9311      	str	r3, [sp, #68]	; 0x44
    c938:	f7fe ffbd 	bl	b8b6 <_vfprintf_r+0x2f6>
    c93c:	003a      	movs	r2, r7
    c93e:	4659      	mov	r1, fp
    c940:	9806      	ldr	r0, [sp, #24]
    c942:	f003 f90f 	bl	fb64 <__sprint_r>
    c946:	2800      	cmp	r0, #0
    c948:	d001      	beq.n	c94e <_vfprintf_r+0x138e>
    c94a:	f7ff fbc9 	bl	c0e0 <_vfprintf_r+0xb20>
    c94e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c950:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    c952:	68bc      	ldr	r4, [r7, #8]
    c954:	1a9b      	subs	r3, r3, r2
    c956:	ae32      	add	r6, sp, #200	; 0xc8
    c958:	e567      	b.n	c42a <_vfprintf_r+0xe6a>
    c95a:	ab23      	add	r3, sp, #140	; 0x8c
    c95c:	931b      	str	r3, [sp, #108]	; 0x6c
    c95e:	9304      	str	r3, [sp, #16]
    c960:	ab20      	add	r3, sp, #128	; 0x80
    c962:	9303      	str	r3, [sp, #12]
    c964:	ab1f      	add	r3, sp, #124	; 0x7c
    c966:	9302      	str	r3, [sp, #8]
    c968:	4653      	mov	r3, sl
    c96a:	9301      	str	r3, [sp, #4]
    c96c:	2303      	movs	r3, #3
    c96e:	464a      	mov	r2, r9
    c970:	9300      	str	r3, [sp, #0]
    c972:	9806      	ldr	r0, [sp, #24]
    c974:	9b08      	ldr	r3, [sp, #32]
    c976:	f000 fb75 	bl	d064 <_dtoa_r>
    c97a:	0003      	movs	r3, r0
    c97c:	4453      	add	r3, sl
    c97e:	4698      	mov	r8, r3
    c980:	4655      	mov	r5, sl
    c982:	9011      	str	r0, [sp, #68]	; 0x44
    c984:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c986:	781b      	ldrb	r3, [r3, #0]
    c988:	2b30      	cmp	r3, #48	; 0x30
    c98a:	d002      	beq.n	c992 <_vfprintf_r+0x13d2>
    c98c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c98e:	4498      	add	r8, r3
    c990:	e64e      	b.n	c630 <_vfprintf_r+0x1070>
    c992:	2200      	movs	r2, #0
    c994:	2300      	movs	r3, #0
    c996:	4648      	mov	r0, r9
    c998:	9908      	ldr	r1, [sp, #32]
    c99a:	f7fb fe4f 	bl	863c <__aeabi_dcmpeq>
    c99e:	2800      	cmp	r0, #0
    c9a0:	d1f4      	bne.n	c98c <_vfprintf_r+0x13cc>
    c9a2:	2301      	movs	r3, #1
    c9a4:	1b5b      	subs	r3, r3, r5
    c9a6:	931f      	str	r3, [sp, #124]	; 0x7c
    c9a8:	4498      	add	r8, r3
    c9aa:	e641      	b.n	c630 <_vfprintf_r+0x1070>
    c9ac:	46c1      	mov	r9, r8
    c9ae:	f7ff fb1f 	bl	bff0 <_vfprintf_r+0xa30>
    c9b2:	2280      	movs	r2, #128	; 0x80
    c9b4:	0612      	lsls	r2, r2, #24
    c9b6:	4694      	mov	ip, r2
    c9b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c9ba:	4699      	mov	r9, r3
    c9bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c9be:	4463      	add	r3, ip
    c9c0:	9308      	str	r3, [sp, #32]
    c9c2:	232d      	movs	r3, #45	; 0x2d
    c9c4:	9310      	str	r3, [sp, #64]	; 0x40
    c9c6:	e60b      	b.n	c5e0 <_vfprintf_r+0x1020>
    c9c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c9ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c9cc:	4694      	mov	ip, r2
    c9ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c9d0:	4463      	add	r3, ip
    c9d2:	930e      	str	r3, [sp, #56]	; 0x38
    c9d4:	2a00      	cmp	r2, #0
    c9d6:	dc00      	bgt.n	c9da <_vfprintf_r+0x141a>
    c9d8:	e0e3      	b.n	cba2 <_vfprintf_r+0x15e2>
    c9da:	001a      	movs	r2, r3
    c9dc:	43db      	mvns	r3, r3
    c9de:	17db      	asrs	r3, r3, #31
    c9e0:	401a      	ands	r2, r3
    c9e2:	2367      	movs	r3, #103	; 0x67
    c9e4:	9208      	str	r2, [sp, #32]
    c9e6:	9312      	str	r3, [sp, #72]	; 0x48
    c9e8:	e658      	b.n	c69c <_vfprintf_r+0x10dc>
    c9ea:	003a      	movs	r2, r7
    c9ec:	4659      	mov	r1, fp
    c9ee:	9806      	ldr	r0, [sp, #24]
    c9f0:	f003 f8b8 	bl	fb64 <__sprint_r>
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d001      	beq.n	c9fc <_vfprintf_r+0x143c>
    c9f8:	f7ff fb72 	bl	c0e0 <_vfprintf_r+0xb20>
    c9fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    c9fe:	68bc      	ldr	r4, [r7, #8]
    ca00:	ae32      	add	r6, sp, #200	; 0xc8
    ca02:	e69d      	b.n	c740 <_vfprintf_r+0x1180>
    ca04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ca06:	9313      	str	r3, [sp, #76]	; 0x4c
    ca08:	2b00      	cmp	r3, #0
    ca0a:	dc00      	bgt.n	ca0e <_vfprintf_r+0x144e>
    ca0c:	e0f2      	b.n	cbf4 <_vfprintf_r+0x1634>
    ca0e:	4652      	mov	r2, sl
    ca10:	2a00      	cmp	r2, #0
    ca12:	d000      	beq.n	ca16 <_vfprintf_r+0x1456>
    ca14:	e0a0      	b.n	cb58 <_vfprintf_r+0x1598>
    ca16:	07e2      	lsls	r2, r4, #31
    ca18:	d500      	bpl.n	ca1c <_vfprintf_r+0x145c>
    ca1a:	e09d      	b.n	cb58 <_vfprintf_r+0x1598>
    ca1c:	9308      	str	r3, [sp, #32]
    ca1e:	930e      	str	r3, [sp, #56]	; 0x38
    ca20:	e63c      	b.n	c69c <_vfprintf_r+0x10dc>
    ca22:	ab16      	add	r3, sp, #88	; 0x58
    ca24:	7fdb      	ldrb	r3, [r3, #31]
    ca26:	950f      	str	r5, [sp, #60]	; 0x3c
    ca28:	4698      	mov	r8, r3
    ca2a:	4653      	mov	r3, sl
    ca2c:	9308      	str	r3, [sp, #32]
    ca2e:	930e      	str	r3, [sp, #56]	; 0x38
    ca30:	2300      	movs	r3, #0
    ca32:	9409      	str	r4, [sp, #36]	; 0x24
    ca34:	469a      	mov	sl, r3
    ca36:	9313      	str	r3, [sp, #76]	; 0x4c
    ca38:	f7fe ff37 	bl	b8aa <_vfprintf_r+0x2ea>
    ca3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca3e:	4698      	mov	r8, r3
    ca40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ca42:	44a8      	add	r8, r5
    ca44:	2b47      	cmp	r3, #71	; 0x47
    ca46:	d000      	beq.n	ca4a <_vfprintf_r+0x148a>
    ca48:	e5f2      	b.n	c630 <_vfprintf_r+0x1070>
    ca4a:	07e3      	lsls	r3, r4, #31
    ca4c:	d400      	bmi.n	ca50 <_vfprintf_r+0x1490>
    ca4e:	e0dc      	b.n	cc0a <_vfprintf_r+0x164a>
    ca50:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca52:	4698      	mov	r8, r3
    ca54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ca56:	44a8      	add	r8, r5
    ca58:	2b46      	cmp	r3, #70	; 0x46
    ca5a:	d093      	beq.n	c984 <_vfprintf_r+0x13c4>
    ca5c:	e5e8      	b.n	c630 <_vfprintf_r+0x1070>
    ca5e:	ab23      	add	r3, sp, #140	; 0x8c
    ca60:	931b      	str	r3, [sp, #108]	; 0x6c
    ca62:	9304      	str	r3, [sp, #16]
    ca64:	ab20      	add	r3, sp, #128	; 0x80
    ca66:	9303      	str	r3, [sp, #12]
    ca68:	ab1f      	add	r3, sp, #124	; 0x7c
    ca6a:	9302      	str	r3, [sp, #8]
    ca6c:	4653      	mov	r3, sl
    ca6e:	9301      	str	r3, [sp, #4]
    ca70:	2303      	movs	r3, #3
    ca72:	464a      	mov	r2, r9
    ca74:	9300      	str	r3, [sp, #0]
    ca76:	9806      	ldr	r0, [sp, #24]
    ca78:	9b08      	ldr	r3, [sp, #32]
    ca7a:	f000 faf3 	bl	d064 <_dtoa_r>
    ca7e:	4655      	mov	r5, sl
    ca80:	9011      	str	r0, [sp, #68]	; 0x44
    ca82:	e7e5      	b.n	ca50 <_vfprintf_r+0x1490>
    ca84:	003a      	movs	r2, r7
    ca86:	4659      	mov	r1, fp
    ca88:	9806      	ldr	r0, [sp, #24]
    ca8a:	f003 f86b 	bl	fb64 <__sprint_r>
    ca8e:	2800      	cmp	r0, #0
    ca90:	d101      	bne.n	ca96 <_vfprintf_r+0x14d6>
    ca92:	f7ff faab 	bl	bfec <_vfprintf_r+0xa2c>
    ca96:	f7ff faab 	bl	bff0 <_vfprintf_r+0xa30>
    ca9a:	4642      	mov	r2, r8
    ca9c:	9207      	str	r2, [sp, #28]
    ca9e:	f7fe fe1b 	bl	b6d8 <_vfprintf_r+0x118>
    caa2:	4244      	negs	r4, r0
    caa4:	3010      	adds	r0, #16
    caa6:	db00      	blt.n	caaa <_vfprintf_r+0x14ea>
    caa8:	e0d8      	b.n	cc5c <_vfprintf_r+0x169c>
    caaa:	4805      	ldr	r0, [pc, #20]	; (cac0 <_vfprintf_r+0x1500>)
    caac:	2610      	movs	r6, #16
    caae:	0005      	movs	r5, r0
    cab0:	e00c      	b.n	cacc <_vfprintf_r+0x150c>
    cab2:	46c0      	nop			; (mov r8, r8)
    cab4:	00010898 	.word	0x00010898
    cab8:	0001058c 	.word	0x0001058c
    cabc:	00010890 	.word	0x00010890
    cac0:	000108ac 	.word	0x000108ac
    cac4:	3208      	adds	r2, #8
    cac6:	3c10      	subs	r4, #16
    cac8:	2c10      	cmp	r4, #16
    caca:	dd51      	ble.n	cb70 <_vfprintf_r+0x15b0>
    cacc:	3110      	adds	r1, #16
    cace:	3301      	adds	r3, #1
    cad0:	6015      	str	r5, [r2, #0]
    cad2:	6056      	str	r6, [r2, #4]
    cad4:	60b9      	str	r1, [r7, #8]
    cad6:	607b      	str	r3, [r7, #4]
    cad8:	2b07      	cmp	r3, #7
    cada:	ddf3      	ble.n	cac4 <_vfprintf_r+0x1504>
    cadc:	003a      	movs	r2, r7
    cade:	4659      	mov	r1, fp
    cae0:	9806      	ldr	r0, [sp, #24]
    cae2:	f003 f83f 	bl	fb64 <__sprint_r>
    cae6:	2800      	cmp	r0, #0
    cae8:	d001      	beq.n	caee <_vfprintf_r+0x152e>
    caea:	f7ff faf9 	bl	c0e0 <_vfprintf_r+0xb20>
    caee:	68b9      	ldr	r1, [r7, #8]
    caf0:	687b      	ldr	r3, [r7, #4]
    caf2:	aa32      	add	r2, sp, #200	; 0xc8
    caf4:	e7e7      	b.n	cac6 <_vfprintf_r+0x1506>
    caf6:	003a      	movs	r2, r7
    caf8:	4659      	mov	r1, fp
    cafa:	9806      	ldr	r0, [sp, #24]
    cafc:	f003 f832 	bl	fb64 <__sprint_r>
    cb00:	2800      	cmp	r0, #0
    cb02:	d001      	beq.n	cb08 <_vfprintf_r+0x1548>
    cb04:	f7ff faec 	bl	c0e0 <_vfprintf_r+0xb20>
    cb08:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cb0a:	68b9      	ldr	r1, [r7, #8]
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	aa32      	add	r2, sp, #200	; 0xc8
    cb10:	e62e      	b.n	c770 <_vfprintf_r+0x11b0>
    cb12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cb14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cb16:	4694      	mov	ip, r2
    cb18:	4463      	add	r3, ip
    cb1a:	001a      	movs	r2, r3
    cb1c:	930e      	str	r3, [sp, #56]	; 0x38
    cb1e:	e75d      	b.n	c9dc <_vfprintf_r+0x141c>
    cb20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cb22:	e599      	b.n	c658 <_vfprintf_r+0x1098>
    cb24:	212e      	movs	r1, #46	; 0x2e
    cb26:	2330      	movs	r3, #48	; 0x30
    cb28:	aa16      	add	r2, sp, #88	; 0x58
    cb2a:	1852      	adds	r2, r2, r1
    cb2c:	7013      	strb	r3, [r2, #0]
    cb2e:	002b      	movs	r3, r5
    cb30:	aa16      	add	r2, sp, #88	; 0x58
    cb32:	3101      	adds	r1, #1
    cb34:	3330      	adds	r3, #48	; 0x30
    cb36:	1852      	adds	r2, r2, r1
    cb38:	7013      	strb	r3, [r2, #0]
    cb3a:	ab22      	add	r3, sp, #136	; 0x88
    cb3c:	e6c1      	b.n	c8c2 <_vfprintf_r+0x1302>
    cb3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cb40:	2b00      	cmp	r3, #0
    cb42:	db52      	blt.n	cbea <_vfprintf_r+0x162a>
    cb44:	ab16      	add	r3, sp, #88	; 0x58
    cb46:	7fdb      	ldrb	r3, [r3, #31]
    cb48:	4698      	mov	r8, r3
    cb4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cb4c:	2b47      	cmp	r3, #71	; 0x47
    cb4e:	dc48      	bgt.n	cbe2 <_vfprintf_r+0x1622>
    cb50:	4b4e      	ldr	r3, [pc, #312]	; (cc8c <_vfprintf_r+0x16cc>)
    cb52:	9311      	str	r3, [sp, #68]	; 0x44
    cb54:	f7ff f88c 	bl	bc70 <_vfprintf_r+0x6b0>
    cb58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cb5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cb5c:	4694      	mov	ip, r2
    cb5e:	4463      	add	r3, ip
    cb60:	4453      	add	r3, sl
    cb62:	001a      	movs	r2, r3
    cb64:	930e      	str	r3, [sp, #56]	; 0x38
    cb66:	43db      	mvns	r3, r3
    cb68:	17db      	asrs	r3, r3, #31
    cb6a:	401a      	ands	r2, r3
    cb6c:	9208      	str	r2, [sp, #32]
    cb6e:	e595      	b.n	c69c <_vfprintf_r+0x10dc>
    cb70:	46a9      	mov	r9, r5
    cb72:	4648      	mov	r0, r9
    cb74:	1909      	adds	r1, r1, r4
    cb76:	3301      	adds	r3, #1
    cb78:	6010      	str	r0, [r2, #0]
    cb7a:	6054      	str	r4, [r2, #4]
    cb7c:	60b9      	str	r1, [r7, #8]
    cb7e:	3208      	adds	r2, #8
    cb80:	607b      	str	r3, [r7, #4]
    cb82:	2b07      	cmp	r3, #7
    cb84:	dc00      	bgt.n	cb88 <_vfprintf_r+0x15c8>
    cb86:	e5f6      	b.n	c776 <_vfprintf_r+0x11b6>
    cb88:	003a      	movs	r2, r7
    cb8a:	4659      	mov	r1, fp
    cb8c:	9806      	ldr	r0, [sp, #24]
    cb8e:	f002 ffe9 	bl	fb64 <__sprint_r>
    cb92:	2800      	cmp	r0, #0
    cb94:	d001      	beq.n	cb9a <_vfprintf_r+0x15da>
    cb96:	f7ff faa3 	bl	c0e0 <_vfprintf_r+0xb20>
    cb9a:	68b9      	ldr	r1, [r7, #8]
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	aa32      	add	r2, sp, #200	; 0xc8
    cba0:	e5e9      	b.n	c776 <_vfprintf_r+0x11b6>
    cba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cba4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cba6:	1a98      	subs	r0, r3, r2
    cba8:	1c43      	adds	r3, r0, #1
    cbaa:	001a      	movs	r2, r3
    cbac:	930e      	str	r3, [sp, #56]	; 0x38
    cbae:	e715      	b.n	c9dc <_vfprintf_r+0x141c>
    cbb0:	4a37      	ldr	r2, [pc, #220]	; (cc90 <_vfprintf_r+0x16d0>)
    cbb2:	687b      	ldr	r3, [r7, #4]
    cbb4:	4691      	mov	r9, r2
    cbb6:	f7ff fbf5 	bl	c3a4 <_vfprintf_r+0xde4>
    cbba:	2301      	movs	r3, #1
    cbbc:	4023      	ands	r3, r4
    cbbe:	9313      	str	r3, [sp, #76]	; 0x4c
    cbc0:	d000      	beq.n	cbc4 <_vfprintf_r+0x1604>
    cbc2:	e689      	b.n	c8d8 <_vfprintf_r+0x1318>
    cbc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cbc6:	43d3      	mvns	r3, r2
    cbc8:	17db      	asrs	r3, r3, #31
    cbca:	401a      	ands	r2, r3
    cbcc:	9208      	str	r2, [sp, #32]
    cbce:	e565      	b.n	c69c <_vfprintf_r+0x10dc>
    cbd0:	2301      	movs	r3, #1
    cbd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cbd4:	391b      	subs	r1, #27
    cbd6:	1a9d      	subs	r5, r3, r2
    cbd8:	aa16      	add	r2, sp, #88	; 0x58
    cbda:	332c      	adds	r3, #44	; 0x2c
    cbdc:	1852      	adds	r2, r2, r1
    cbde:	7013      	strb	r3, [r2, #0]
    cbe0:	e62f      	b.n	c842 <_vfprintf_r+0x1282>
    cbe2:	4b2c      	ldr	r3, [pc, #176]	; (cc94 <_vfprintf_r+0x16d4>)
    cbe4:	9311      	str	r3, [sp, #68]	; 0x44
    cbe6:	f7ff f843 	bl	bc70 <_vfprintf_r+0x6b0>
    cbea:	232d      	movs	r3, #45	; 0x2d
    cbec:	aa16      	add	r2, sp, #88	; 0x58
    cbee:	77d3      	strb	r3, [r2, #31]
    cbf0:	4698      	mov	r8, r3
    cbf2:	e7aa      	b.n	cb4a <_vfprintf_r+0x158a>
    cbf4:	4653      	mov	r3, sl
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d101      	bne.n	cbfe <_vfprintf_r+0x163e>
    cbfa:	07e3      	lsls	r3, r4, #31
    cbfc:	d503      	bpl.n	cc06 <_vfprintf_r+0x1646>
    cbfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cc00:	1c58      	adds	r0, r3, #1
    cc02:	0003      	movs	r3, r0
    cc04:	e7ac      	b.n	cb60 <_vfprintf_r+0x15a0>
    cc06:	2301      	movs	r3, #1
    cc08:	e708      	b.n	ca1c <_vfprintf_r+0x145c>
    cc0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cc0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cc0e:	1a9b      	subs	r3, r3, r2
    cc10:	9314      	str	r3, [sp, #80]	; 0x50
    cc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc14:	2b47      	cmp	r3, #71	; 0x47
    cc16:	d100      	bne.n	cc1a <_vfprintf_r+0x165a>
    cc18:	e5f6      	b.n	c808 <_vfprintf_r+0x1248>
    cc1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cc1c:	9313      	str	r3, [sp, #76]	; 0x4c
    cc1e:	e5fd      	b.n	c81c <_vfprintf_r+0x125c>
    cc20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc22:	1d1d      	adds	r5, r3, #4
    cc24:	681b      	ldr	r3, [r3, #0]
    cc26:	46a8      	mov	r8, r5
    cc28:	469a      	mov	sl, r3
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	db0a      	blt.n	cc44 <_vfprintf_r+0x1684>
    cc2e:	4645      	mov	r5, r8
    cc30:	9b07      	ldr	r3, [sp, #28]
    cc32:	950f      	str	r5, [sp, #60]	; 0x3c
    cc34:	785b      	ldrb	r3, [r3, #1]
    cc36:	9207      	str	r2, [sp, #28]
    cc38:	f7fe fd4b 	bl	b6d2 <_vfprintf_r+0x112>
    cc3c:	ab16      	add	r3, sp, #88	; 0x58
    cc3e:	77d8      	strb	r0, [r3, #31]
    cc40:	f7ff f830 	bl	bca4 <_vfprintf_r+0x6e4>
    cc44:	2301      	movs	r3, #1
    cc46:	425b      	negs	r3, r3
    cc48:	469a      	mov	sl, r3
    cc4a:	e7f0      	b.n	cc2e <_vfprintf_r+0x166e>
    cc4c:	ab16      	add	r3, sp, #88	; 0x58
    cc4e:	77d8      	strb	r0, [r3, #31]
    cc50:	f7fe ff27 	bl	baa2 <_vfprintf_r+0x4e2>
    cc54:	ab16      	add	r3, sp, #88	; 0x58
    cc56:	77d8      	strb	r0, [r3, #31]
    cc58:	f7fe fdce 	bl	b7f8 <_vfprintf_r+0x238>
    cc5c:	480c      	ldr	r0, [pc, #48]	; (cc90 <_vfprintf_r+0x16d0>)
    cc5e:	4681      	mov	r9, r0
    cc60:	e787      	b.n	cb72 <_vfprintf_r+0x15b2>
    cc62:	ab16      	add	r3, sp, #88	; 0x58
    cc64:	77d8      	strb	r0, [r3, #31]
    cc66:	f7ff f829 	bl	bcbc <_vfprintf_r+0x6fc>
    cc6a:	ab16      	add	r3, sp, #88	; 0x58
    cc6c:	77d8      	strb	r0, [r3, #31]
    cc6e:	f7fe ffc3 	bl	bbf8 <_vfprintf_r+0x638>
    cc72:	ab16      	add	r3, sp, #88	; 0x58
    cc74:	77d8      	strb	r0, [r3, #31]
    cc76:	f7fe ffa5 	bl	bbc4 <_vfprintf_r+0x604>
    cc7a:	ab16      	add	r3, sp, #88	; 0x58
    cc7c:	77d8      	strb	r0, [r3, #31]
    cc7e:	f7fe feaf 	bl	b9e0 <_vfprintf_r+0x420>
    cc82:	aa16      	add	r2, sp, #88	; 0x58
    cc84:	232e      	movs	r3, #46	; 0x2e
    cc86:	4694      	mov	ip, r2
    cc88:	4463      	add	r3, ip
    cc8a:	e61a      	b.n	c8c2 <_vfprintf_r+0x1302>
    cc8c:	00010864 	.word	0x00010864
    cc90:	000108ac 	.word	0x000108ac
    cc94:	00010588 	.word	0x00010588

0000cc98 <__sbprintf>:
    cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc9a:	0015      	movs	r5, r2
    cc9c:	2202      	movs	r2, #2
    cc9e:	4c1e      	ldr	r4, [pc, #120]	; (cd18 <__sbprintf+0x80>)
    cca0:	001f      	movs	r7, r3
    cca2:	898b      	ldrh	r3, [r1, #12]
    cca4:	44a5      	add	sp, r4
    cca6:	4393      	bics	r3, r2
    cca8:	466a      	mov	r2, sp
    ccaa:	8193      	strh	r3, [r2, #12]
    ccac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ccae:	0006      	movs	r6, r0
    ccb0:	9319      	str	r3, [sp, #100]	; 0x64
    ccb2:	89cb      	ldrh	r3, [r1, #14]
    ccb4:	a816      	add	r0, sp, #88	; 0x58
    ccb6:	81d3      	strh	r3, [r2, #14]
    ccb8:	69cb      	ldr	r3, [r1, #28]
    ccba:	000c      	movs	r4, r1
    ccbc:	9307      	str	r3, [sp, #28]
    ccbe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    ccc0:	9309      	str	r3, [sp, #36]	; 0x24
    ccc2:	ab1a      	add	r3, sp, #104	; 0x68
    ccc4:	9300      	str	r3, [sp, #0]
    ccc6:	9304      	str	r3, [sp, #16]
    ccc8:	2380      	movs	r3, #128	; 0x80
    ccca:	00db      	lsls	r3, r3, #3
    cccc:	9302      	str	r3, [sp, #8]
    ccce:	9305      	str	r3, [sp, #20]
    ccd0:	2300      	movs	r3, #0
    ccd2:	9306      	str	r3, [sp, #24]
    ccd4:	f001 fdca 	bl	e86c <__retarget_lock_init_recursive>
    ccd8:	002a      	movs	r2, r5
    ccda:	003b      	movs	r3, r7
    ccdc:	4669      	mov	r1, sp
    ccde:	0030      	movs	r0, r6
    cce0:	f7fe fc6e 	bl	b5c0 <_vfprintf_r>
    cce4:	1e05      	subs	r5, r0, #0
    cce6:	db05      	blt.n	ccf4 <__sbprintf+0x5c>
    cce8:	4669      	mov	r1, sp
    ccea:	0030      	movs	r0, r6
    ccec:	f001 fa26 	bl	e13c <_fflush_r>
    ccf0:	2800      	cmp	r0, #0
    ccf2:	d10e      	bne.n	cd12 <__sbprintf+0x7a>
    ccf4:	466b      	mov	r3, sp
    ccf6:	899b      	ldrh	r3, [r3, #12]
    ccf8:	065b      	lsls	r3, r3, #25
    ccfa:	d503      	bpl.n	cd04 <__sbprintf+0x6c>
    ccfc:	2240      	movs	r2, #64	; 0x40
    ccfe:	89a3      	ldrh	r3, [r4, #12]
    cd00:	4313      	orrs	r3, r2
    cd02:	81a3      	strh	r3, [r4, #12]
    cd04:	9816      	ldr	r0, [sp, #88]	; 0x58
    cd06:	f001 fdb3 	bl	e870 <__retarget_lock_close_recursive>
    cd0a:	0028      	movs	r0, r5
    cd0c:	4b03      	ldr	r3, [pc, #12]	; (cd1c <__sbprintf+0x84>)
    cd0e:	449d      	add	sp, r3
    cd10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd12:	2501      	movs	r5, #1
    cd14:	426d      	negs	r5, r5
    cd16:	e7ed      	b.n	ccf4 <__sbprintf+0x5c>
    cd18:	fffffb94 	.word	0xfffffb94
    cd1c:	0000046c 	.word	0x0000046c

0000cd20 <__swsetup_r>:
    cd20:	4b33      	ldr	r3, [pc, #204]	; (cdf0 <__swsetup_r+0xd0>)
    cd22:	b570      	push	{r4, r5, r6, lr}
    cd24:	0005      	movs	r5, r0
    cd26:	6818      	ldr	r0, [r3, #0]
    cd28:	000c      	movs	r4, r1
    cd2a:	2800      	cmp	r0, #0
    cd2c:	d002      	beq.n	cd34 <__swsetup_r+0x14>
    cd2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    cd30:	2b00      	cmp	r3, #0
    cd32:	d03c      	beq.n	cdae <__swsetup_r+0x8e>
    cd34:	230c      	movs	r3, #12
    cd36:	5ee2      	ldrsh	r2, [r4, r3]
    cd38:	b293      	uxth	r3, r2
    cd3a:	0719      	lsls	r1, r3, #28
    cd3c:	d50d      	bpl.n	cd5a <__swsetup_r+0x3a>
    cd3e:	6921      	ldr	r1, [r4, #16]
    cd40:	2900      	cmp	r1, #0
    cd42:	d015      	beq.n	cd70 <__swsetup_r+0x50>
    cd44:	07da      	lsls	r2, r3, #31
    cd46:	d521      	bpl.n	cd8c <__swsetup_r+0x6c>
    cd48:	2300      	movs	r3, #0
    cd4a:	60a3      	str	r3, [r4, #8]
    cd4c:	6963      	ldr	r3, [r4, #20]
    cd4e:	2000      	movs	r0, #0
    cd50:	425b      	negs	r3, r3
    cd52:	61a3      	str	r3, [r4, #24]
    cd54:	2900      	cmp	r1, #0
    cd56:	d021      	beq.n	cd9c <__swsetup_r+0x7c>
    cd58:	bd70      	pop	{r4, r5, r6, pc}
    cd5a:	06d9      	lsls	r1, r3, #27
    cd5c:	d53f      	bpl.n	cdde <__swsetup_r+0xbe>
    cd5e:	075b      	lsls	r3, r3, #29
    cd60:	d428      	bmi.n	cdb4 <__swsetup_r+0x94>
    cd62:	6921      	ldr	r1, [r4, #16]
    cd64:	2308      	movs	r3, #8
    cd66:	4313      	orrs	r3, r2
    cd68:	81a3      	strh	r3, [r4, #12]
    cd6a:	b29b      	uxth	r3, r3
    cd6c:	2900      	cmp	r1, #0
    cd6e:	d1e9      	bne.n	cd44 <__swsetup_r+0x24>
    cd70:	22a0      	movs	r2, #160	; 0xa0
    cd72:	2080      	movs	r0, #128	; 0x80
    cd74:	0092      	lsls	r2, r2, #2
    cd76:	0080      	lsls	r0, r0, #2
    cd78:	401a      	ands	r2, r3
    cd7a:	4282      	cmp	r2, r0
    cd7c:	d0e2      	beq.n	cd44 <__swsetup_r+0x24>
    cd7e:	0021      	movs	r1, r4
    cd80:	0028      	movs	r0, r5
    cd82:	f001 fdab 	bl	e8dc <__smakebuf_r>
    cd86:	89a3      	ldrh	r3, [r4, #12]
    cd88:	6921      	ldr	r1, [r4, #16]
    cd8a:	e7db      	b.n	cd44 <__swsetup_r+0x24>
    cd8c:	2200      	movs	r2, #0
    cd8e:	079b      	lsls	r3, r3, #30
    cd90:	d400      	bmi.n	cd94 <__swsetup_r+0x74>
    cd92:	6962      	ldr	r2, [r4, #20]
    cd94:	60a2      	str	r2, [r4, #8]
    cd96:	2000      	movs	r0, #0
    cd98:	2900      	cmp	r1, #0
    cd9a:	d1dd      	bne.n	cd58 <__swsetup_r+0x38>
    cd9c:	220c      	movs	r2, #12
    cd9e:	5ea3      	ldrsh	r3, [r4, r2]
    cda0:	061a      	lsls	r2, r3, #24
    cda2:	d5d9      	bpl.n	cd58 <__swsetup_r+0x38>
    cda4:	2240      	movs	r2, #64	; 0x40
    cda6:	4313      	orrs	r3, r2
    cda8:	81a3      	strh	r3, [r4, #12]
    cdaa:	3801      	subs	r0, #1
    cdac:	e7d4      	b.n	cd58 <__swsetup_r+0x38>
    cdae:	f001 fa1f 	bl	e1f0 <__sinit>
    cdb2:	e7bf      	b.n	cd34 <__swsetup_r+0x14>
    cdb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    cdb6:	2900      	cmp	r1, #0
    cdb8:	d00a      	beq.n	cdd0 <__swsetup_r+0xb0>
    cdba:	0023      	movs	r3, r4
    cdbc:	3340      	adds	r3, #64	; 0x40
    cdbe:	4299      	cmp	r1, r3
    cdc0:	d004      	beq.n	cdcc <__swsetup_r+0xac>
    cdc2:	0028      	movs	r0, r5
    cdc4:	f001 fabe 	bl	e344 <_free_r>
    cdc8:	230c      	movs	r3, #12
    cdca:	5ee2      	ldrsh	r2, [r4, r3]
    cdcc:	2300      	movs	r3, #0
    cdce:	6323      	str	r3, [r4, #48]	; 0x30
    cdd0:	2324      	movs	r3, #36	; 0x24
    cdd2:	439a      	bics	r2, r3
    cdd4:	2300      	movs	r3, #0
    cdd6:	6921      	ldr	r1, [r4, #16]
    cdd8:	6063      	str	r3, [r4, #4]
    cdda:	6021      	str	r1, [r4, #0]
    cddc:	e7c2      	b.n	cd64 <__swsetup_r+0x44>
    cdde:	2309      	movs	r3, #9
    cde0:	602b      	str	r3, [r5, #0]
    cde2:	2340      	movs	r3, #64	; 0x40
    cde4:	2001      	movs	r0, #1
    cde6:	431a      	orrs	r2, r3
    cde8:	81a2      	strh	r2, [r4, #12]
    cdea:	4240      	negs	r0, r0
    cdec:	e7b4      	b.n	cd58 <__swsetup_r+0x38>
    cdee:	46c0      	nop			; (mov r8, r8)
    cdf0:	20000070 	.word	0x20000070

0000cdf4 <__register_exitproc>:
    cdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdf6:	464e      	mov	r6, r9
    cdf8:	4645      	mov	r5, r8
    cdfa:	46de      	mov	lr, fp
    cdfc:	4657      	mov	r7, sl
    cdfe:	b5e0      	push	{r5, r6, r7, lr}
    ce00:	4d36      	ldr	r5, [pc, #216]	; (cedc <__register_exitproc+0xe8>)
    ce02:	b083      	sub	sp, #12
    ce04:	0006      	movs	r6, r0
    ce06:	6828      	ldr	r0, [r5, #0]
    ce08:	4698      	mov	r8, r3
    ce0a:	000f      	movs	r7, r1
    ce0c:	4691      	mov	r9, r2
    ce0e:	f001 fd31 	bl	e874 <__retarget_lock_acquire_recursive>
    ce12:	4b33      	ldr	r3, [pc, #204]	; (cee0 <__register_exitproc+0xec>)
    ce14:	681c      	ldr	r4, [r3, #0]
    ce16:	23a4      	movs	r3, #164	; 0xa4
    ce18:	005b      	lsls	r3, r3, #1
    ce1a:	58e0      	ldr	r0, [r4, r3]
    ce1c:	2800      	cmp	r0, #0
    ce1e:	d052      	beq.n	cec6 <__register_exitproc+0xd2>
    ce20:	6843      	ldr	r3, [r0, #4]
    ce22:	2b1f      	cmp	r3, #31
    ce24:	dc13      	bgt.n	ce4e <__register_exitproc+0x5a>
    ce26:	1c5a      	adds	r2, r3, #1
    ce28:	9201      	str	r2, [sp, #4]
    ce2a:	2e00      	cmp	r6, #0
    ce2c:	d128      	bne.n	ce80 <__register_exitproc+0x8c>
    ce2e:	9a01      	ldr	r2, [sp, #4]
    ce30:	3302      	adds	r3, #2
    ce32:	009b      	lsls	r3, r3, #2
    ce34:	6042      	str	r2, [r0, #4]
    ce36:	501f      	str	r7, [r3, r0]
    ce38:	6828      	ldr	r0, [r5, #0]
    ce3a:	f001 fd1d 	bl	e878 <__retarget_lock_release_recursive>
    ce3e:	2000      	movs	r0, #0
    ce40:	b003      	add	sp, #12
    ce42:	bc3c      	pop	{r2, r3, r4, r5}
    ce44:	4690      	mov	r8, r2
    ce46:	4699      	mov	r9, r3
    ce48:	46a2      	mov	sl, r4
    ce4a:	46ab      	mov	fp, r5
    ce4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce4e:	4b25      	ldr	r3, [pc, #148]	; (cee4 <__register_exitproc+0xf0>)
    ce50:	2b00      	cmp	r3, #0
    ce52:	d03d      	beq.n	ced0 <__register_exitproc+0xdc>
    ce54:	20c8      	movs	r0, #200	; 0xc8
    ce56:	0040      	lsls	r0, r0, #1
    ce58:	f7f9 f964 	bl	6124 <malloc>
    ce5c:	2800      	cmp	r0, #0
    ce5e:	d037      	beq.n	ced0 <__register_exitproc+0xdc>
    ce60:	22a4      	movs	r2, #164	; 0xa4
    ce62:	2300      	movs	r3, #0
    ce64:	0052      	lsls	r2, r2, #1
    ce66:	58a1      	ldr	r1, [r4, r2]
    ce68:	6043      	str	r3, [r0, #4]
    ce6a:	6001      	str	r1, [r0, #0]
    ce6c:	50a0      	str	r0, [r4, r2]
    ce6e:	3240      	adds	r2, #64	; 0x40
    ce70:	5083      	str	r3, [r0, r2]
    ce72:	3204      	adds	r2, #4
    ce74:	5083      	str	r3, [r0, r2]
    ce76:	3301      	adds	r3, #1
    ce78:	9301      	str	r3, [sp, #4]
    ce7a:	2300      	movs	r3, #0
    ce7c:	2e00      	cmp	r6, #0
    ce7e:	d0d6      	beq.n	ce2e <__register_exitproc+0x3a>
    ce80:	009a      	lsls	r2, r3, #2
    ce82:	4692      	mov	sl, r2
    ce84:	4482      	add	sl, r0
    ce86:	464a      	mov	r2, r9
    ce88:	2188      	movs	r1, #136	; 0x88
    ce8a:	4654      	mov	r4, sl
    ce8c:	5062      	str	r2, [r4, r1]
    ce8e:	22c4      	movs	r2, #196	; 0xc4
    ce90:	0052      	lsls	r2, r2, #1
    ce92:	4691      	mov	r9, r2
    ce94:	4481      	add	r9, r0
    ce96:	464a      	mov	r2, r9
    ce98:	3987      	subs	r1, #135	; 0x87
    ce9a:	4099      	lsls	r1, r3
    ce9c:	6812      	ldr	r2, [r2, #0]
    ce9e:	468b      	mov	fp, r1
    cea0:	430a      	orrs	r2, r1
    cea2:	4694      	mov	ip, r2
    cea4:	464a      	mov	r2, r9
    cea6:	4661      	mov	r1, ip
    cea8:	6011      	str	r1, [r2, #0]
    ceaa:	2284      	movs	r2, #132	; 0x84
    ceac:	4641      	mov	r1, r8
    ceae:	0052      	lsls	r2, r2, #1
    ceb0:	50a1      	str	r1, [r4, r2]
    ceb2:	2e02      	cmp	r6, #2
    ceb4:	d1bb      	bne.n	ce2e <__register_exitproc+0x3a>
    ceb6:	0002      	movs	r2, r0
    ceb8:	465c      	mov	r4, fp
    ceba:	328d      	adds	r2, #141	; 0x8d
    cebc:	32ff      	adds	r2, #255	; 0xff
    cebe:	6811      	ldr	r1, [r2, #0]
    cec0:	430c      	orrs	r4, r1
    cec2:	6014      	str	r4, [r2, #0]
    cec4:	e7b3      	b.n	ce2e <__register_exitproc+0x3a>
    cec6:	0020      	movs	r0, r4
    cec8:	304d      	adds	r0, #77	; 0x4d
    ceca:	30ff      	adds	r0, #255	; 0xff
    cecc:	50e0      	str	r0, [r4, r3]
    cece:	e7a7      	b.n	ce20 <__register_exitproc+0x2c>
    ced0:	6828      	ldr	r0, [r5, #0]
    ced2:	f001 fcd1 	bl	e878 <__retarget_lock_release_recursive>
    ced6:	2001      	movs	r0, #1
    ced8:	4240      	negs	r0, r0
    ceda:	e7b1      	b.n	ce40 <__register_exitproc+0x4c>
    cedc:	200004a0 	.word	0x200004a0
    cee0:	000106f8 	.word	0x000106f8
    cee4:	00006125 	.word	0x00006125

0000cee8 <register_fini>:
    cee8:	4b03      	ldr	r3, [pc, #12]	; (cef8 <register_fini+0x10>)
    ceea:	b510      	push	{r4, lr}
    ceec:	2b00      	cmp	r3, #0
    ceee:	d002      	beq.n	cef6 <register_fini+0xe>
    cef0:	4802      	ldr	r0, [pc, #8]	; (cefc <register_fini+0x14>)
    cef2:	f000 f805 	bl	cf00 <atexit>
    cef6:	bd10      	pop	{r4, pc}
    cef8:	00000000 	.word	0x00000000
    cefc:	0000e271 	.word	0x0000e271

0000cf00 <atexit>:
    cf00:	b510      	push	{r4, lr}
    cf02:	0001      	movs	r1, r0
    cf04:	2300      	movs	r3, #0
    cf06:	2200      	movs	r2, #0
    cf08:	2000      	movs	r0, #0
    cf0a:	f7ff ff73 	bl	cdf4 <__register_exitproc>
    cf0e:	bd10      	pop	{r4, pc}

0000cf10 <quorem>:
    cf10:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf12:	4645      	mov	r5, r8
    cf14:	4680      	mov	r8, r0
    cf16:	46de      	mov	lr, fp
    cf18:	4657      	mov	r7, sl
    cf1a:	464e      	mov	r6, r9
    cf1c:	4642      	mov	r2, r8
    cf1e:	b5e0      	push	{r5, r6, r7, lr}
    cf20:	690c      	ldr	r4, [r1, #16]
    cf22:	6912      	ldr	r2, [r2, #16]
    cf24:	b085      	sub	sp, #20
    cf26:	000b      	movs	r3, r1
    cf28:	9102      	str	r1, [sp, #8]
    cf2a:	2000      	movs	r0, #0
    cf2c:	4294      	cmp	r4, r2
    cf2e:	dd00      	ble.n	cf32 <quorem+0x22>
    cf30:	e090      	b.n	d054 <quorem+0x144>
    cf32:	2214      	movs	r2, #20
    cf34:	4694      	mov	ip, r2
    cf36:	4463      	add	r3, ip
    cf38:	4699      	mov	r9, r3
    cf3a:	464a      	mov	r2, r9
    cf3c:	3c01      	subs	r4, #1
    cf3e:	00a3      	lsls	r3, r4, #2
    cf40:	18d6      	adds	r6, r2, r3
    cf42:	2214      	movs	r2, #20
    cf44:	4442      	add	r2, r8
    cf46:	4693      	mov	fp, r2
    cf48:	449b      	add	fp, r3
    cf4a:	6833      	ldr	r3, [r6, #0]
    cf4c:	0015      	movs	r5, r2
    cf4e:	1c59      	adds	r1, r3, #1
    cf50:	465b      	mov	r3, fp
    cf52:	6818      	ldr	r0, [r3, #0]
    cf54:	9201      	str	r2, [sp, #4]
    cf56:	f7fb f9eb 	bl	8330 <__udivsi3>
    cf5a:	1e03      	subs	r3, r0, #0
    cf5c:	9000      	str	r0, [sp, #0]
    cf5e:	d042      	beq.n	cfe6 <quorem+0xd6>
    cf60:	0029      	movs	r1, r5
    cf62:	2700      	movs	r7, #0
    cf64:	464d      	mov	r5, r9
    cf66:	2000      	movs	r0, #0
    cf68:	46b1      	mov	r9, r6
    cf6a:	46a2      	mov	sl, r4
    cf6c:	003e      	movs	r6, r7
    cf6e:	0004      	movs	r4, r0
    cf70:	469c      	mov	ip, r3
    cf72:	002f      	movs	r7, r5
    cf74:	0008      	movs	r0, r1
    cf76:	9503      	str	r5, [sp, #12]
    cf78:	4663      	mov	r3, ip
    cf7a:	cf04      	ldmia	r7!, {r2}
    cf7c:	0415      	lsls	r5, r2, #16
    cf7e:	0c2d      	lsrs	r5, r5, #16
    cf80:	435d      	muls	r5, r3
    cf82:	0c12      	lsrs	r2, r2, #16
    cf84:	435a      	muls	r2, r3
    cf86:	19ad      	adds	r5, r5, r6
    cf88:	0c2b      	lsrs	r3, r5, #16
    cf8a:	18d2      	adds	r2, r2, r3
    cf8c:	6803      	ldr	r3, [r0, #0]
    cf8e:	042d      	lsls	r5, r5, #16
    cf90:	0419      	lsls	r1, r3, #16
    cf92:	0c09      	lsrs	r1, r1, #16
    cf94:	1909      	adds	r1, r1, r4
    cf96:	0c16      	lsrs	r6, r2, #16
    cf98:	0c2d      	lsrs	r5, r5, #16
    cf9a:	0412      	lsls	r2, r2, #16
    cf9c:	1b49      	subs	r1, r1, r5
    cf9e:	0c12      	lsrs	r2, r2, #16
    cfa0:	0c1b      	lsrs	r3, r3, #16
    cfa2:	1a9b      	subs	r3, r3, r2
    cfa4:	140a      	asrs	r2, r1, #16
    cfa6:	189b      	adds	r3, r3, r2
    cfa8:	0409      	lsls	r1, r1, #16
    cfaa:	141c      	asrs	r4, r3, #16
    cfac:	0c09      	lsrs	r1, r1, #16
    cfae:	041b      	lsls	r3, r3, #16
    cfb0:	4319      	orrs	r1, r3
    cfb2:	c002      	stmia	r0!, {r1}
    cfb4:	45b9      	cmp	r9, r7
    cfb6:	d2df      	bcs.n	cf78 <quorem+0x68>
    cfb8:	9b03      	ldr	r3, [sp, #12]
    cfba:	464e      	mov	r6, r9
    cfbc:	4699      	mov	r9, r3
    cfbe:	465b      	mov	r3, fp
    cfc0:	681b      	ldr	r3, [r3, #0]
    cfc2:	4654      	mov	r4, sl
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d10e      	bne.n	cfe6 <quorem+0xd6>
    cfc8:	465b      	mov	r3, fp
    cfca:	9a01      	ldr	r2, [sp, #4]
    cfcc:	3b04      	subs	r3, #4
    cfce:	429a      	cmp	r2, r3
    cfd0:	d304      	bcc.n	cfdc <quorem+0xcc>
    cfd2:	e006      	b.n	cfe2 <quorem+0xd2>
    cfd4:	3b04      	subs	r3, #4
    cfd6:	3c01      	subs	r4, #1
    cfd8:	429a      	cmp	r2, r3
    cfda:	d202      	bcs.n	cfe2 <quorem+0xd2>
    cfdc:	6819      	ldr	r1, [r3, #0]
    cfde:	2900      	cmp	r1, #0
    cfe0:	d0f8      	beq.n	cfd4 <quorem+0xc4>
    cfe2:	4643      	mov	r3, r8
    cfe4:	611c      	str	r4, [r3, #16]
    cfe6:	9902      	ldr	r1, [sp, #8]
    cfe8:	4640      	mov	r0, r8
    cfea:	f002 fa47 	bl	f47c <__mcmp>
    cfee:	2800      	cmp	r0, #0
    cff0:	db2f      	blt.n	d052 <quorem+0x142>
    cff2:	464f      	mov	r7, r9
    cff4:	2000      	movs	r0, #0
    cff6:	9b00      	ldr	r3, [sp, #0]
    cff8:	9d01      	ldr	r5, [sp, #4]
    cffa:	3301      	adds	r3, #1
    cffc:	9300      	str	r3, [sp, #0]
    cffe:	682b      	ldr	r3, [r5, #0]
    d000:	cf02      	ldmia	r7!, {r1}
    d002:	041a      	lsls	r2, r3, #16
    d004:	0c12      	lsrs	r2, r2, #16
    d006:	1810      	adds	r0, r2, r0
    d008:	040a      	lsls	r2, r1, #16
    d00a:	0c12      	lsrs	r2, r2, #16
    d00c:	1a82      	subs	r2, r0, r2
    d00e:	0c09      	lsrs	r1, r1, #16
    d010:	0c1b      	lsrs	r3, r3, #16
    d012:	1a5b      	subs	r3, r3, r1
    d014:	1411      	asrs	r1, r2, #16
    d016:	185b      	adds	r3, r3, r1
    d018:	0412      	lsls	r2, r2, #16
    d01a:	1418      	asrs	r0, r3, #16
    d01c:	0c12      	lsrs	r2, r2, #16
    d01e:	041b      	lsls	r3, r3, #16
    d020:	4313      	orrs	r3, r2
    d022:	c508      	stmia	r5!, {r3}
    d024:	42be      	cmp	r6, r7
    d026:	d2ea      	bcs.n	cffe <quorem+0xee>
    d028:	9901      	ldr	r1, [sp, #4]
    d02a:	00a3      	lsls	r3, r4, #2
    d02c:	468c      	mov	ip, r1
    d02e:	4463      	add	r3, ip
    d030:	681a      	ldr	r2, [r3, #0]
    d032:	2a00      	cmp	r2, #0
    d034:	d10d      	bne.n	d052 <quorem+0x142>
    d036:	3b04      	subs	r3, #4
    d038:	000a      	movs	r2, r1
    d03a:	4299      	cmp	r1, r3
    d03c:	d304      	bcc.n	d048 <quorem+0x138>
    d03e:	e006      	b.n	d04e <quorem+0x13e>
    d040:	3b04      	subs	r3, #4
    d042:	3c01      	subs	r4, #1
    d044:	429a      	cmp	r2, r3
    d046:	d202      	bcs.n	d04e <quorem+0x13e>
    d048:	6819      	ldr	r1, [r3, #0]
    d04a:	2900      	cmp	r1, #0
    d04c:	d0f8      	beq.n	d040 <quorem+0x130>
    d04e:	4643      	mov	r3, r8
    d050:	611c      	str	r4, [r3, #16]
    d052:	9800      	ldr	r0, [sp, #0]
    d054:	b005      	add	sp, #20
    d056:	bc3c      	pop	{r2, r3, r4, r5}
    d058:	4690      	mov	r8, r2
    d05a:	4699      	mov	r9, r3
    d05c:	46a2      	mov	sl, r4
    d05e:	46ab      	mov	fp, r5
    d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d062:	46c0      	nop			; (mov r8, r8)

0000d064 <_dtoa_r>:
    d064:	b5f0      	push	{r4, r5, r6, r7, lr}
    d066:	4657      	mov	r7, sl
    d068:	464e      	mov	r6, r9
    d06a:	4645      	mov	r5, r8
    d06c:	46de      	mov	lr, fp
    d06e:	b5e0      	push	{r5, r6, r7, lr}
    d070:	6c01      	ldr	r1, [r0, #64]	; 0x40
    d072:	b099      	sub	sp, #100	; 0x64
    d074:	4682      	mov	sl, r0
    d076:	001d      	movs	r5, r3
    d078:	0016      	movs	r6, r2
    d07a:	001f      	movs	r7, r3
    d07c:	2900      	cmp	r1, #0
    d07e:	d009      	beq.n	d094 <_dtoa_r+0x30>
    d080:	2301      	movs	r3, #1
    d082:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d084:	4093      	lsls	r3, r2
    d086:	604a      	str	r2, [r1, #4]
    d088:	608b      	str	r3, [r1, #8]
    d08a:	f001 ffeb 	bl	f064 <_Bfree>
    d08e:	2300      	movs	r3, #0
    d090:	4652      	mov	r2, sl
    d092:	6413      	str	r3, [r2, #64]	; 0x40
    d094:	46b8      	mov	r8, r7
    d096:	2f00      	cmp	r7, #0
    d098:	db37      	blt.n	d10a <_dtoa_r+0xa6>
    d09a:	2300      	movs	r3, #0
    d09c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d09e:	6013      	str	r3, [r2, #0]
    d0a0:	4642      	mov	r2, r8
    d0a2:	4bd6      	ldr	r3, [pc, #856]	; (d3fc <_dtoa_r+0x398>)
    d0a4:	401a      	ands	r2, r3
    d0a6:	429a      	cmp	r2, r3
    d0a8:	d018      	beq.n	d0dc <_dtoa_r+0x78>
    d0aa:	2200      	movs	r2, #0
    d0ac:	2300      	movs	r3, #0
    d0ae:	0030      	movs	r0, r6
    d0b0:	0039      	movs	r1, r7
    d0b2:	f7fb fac3 	bl	863c <__aeabi_dcmpeq>
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d02f      	beq.n	d11a <_dtoa_r+0xb6>
    d0ba:	2301      	movs	r3, #1
    d0bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d0be:	6013      	str	r3, [r2, #0]
    d0c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	d100      	bne.n	d0c8 <_dtoa_r+0x64>
    d0c6:	e22a      	b.n	d51e <_dtoa_r+0x4ba>
    d0c8:	48cd      	ldr	r0, [pc, #820]	; (d400 <_dtoa_r+0x39c>)
    d0ca:	6018      	str	r0, [r3, #0]
    d0cc:	3801      	subs	r0, #1
    d0ce:	b019      	add	sp, #100	; 0x64
    d0d0:	bc3c      	pop	{r2, r3, r4, r5}
    d0d2:	4690      	mov	r8, r2
    d0d4:	4699      	mov	r9, r3
    d0d6:	46a2      	mov	sl, r4
    d0d8:	46ab      	mov	fp, r5
    d0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0dc:	4bc9      	ldr	r3, [pc, #804]	; (d404 <_dtoa_r+0x3a0>)
    d0de:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d0e0:	6013      	str	r3, [r2, #0]
    d0e2:	2e00      	cmp	r6, #0
    d0e4:	d10b      	bne.n	d0fe <_dtoa_r+0x9a>
    d0e6:	4643      	mov	r3, r8
    d0e8:	0318      	lsls	r0, r3, #12
    d0ea:	d108      	bne.n	d0fe <_dtoa_r+0x9a>
    d0ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d0ee:	48c6      	ldr	r0, [pc, #792]	; (d408 <_dtoa_r+0x3a4>)
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d0ec      	beq.n	d0ce <_dtoa_r+0x6a>
    d0f4:	0003      	movs	r3, r0
    d0f6:	3308      	adds	r3, #8
    d0f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d0fa:	6013      	str	r3, [r2, #0]
    d0fc:	e7e7      	b.n	d0ce <_dtoa_r+0x6a>
    d0fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d100:	48c2      	ldr	r0, [pc, #776]	; (d40c <_dtoa_r+0x3a8>)
    d102:	2b00      	cmp	r3, #0
    d104:	d0e3      	beq.n	d0ce <_dtoa_r+0x6a>
    d106:	1cc3      	adds	r3, r0, #3
    d108:	e7f6      	b.n	d0f8 <_dtoa_r+0x94>
    d10a:	2301      	movs	r3, #1
    d10c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d10e:	0068      	lsls	r0, r5, #1
    d110:	6013      	str	r3, [r2, #0]
    d112:	0843      	lsrs	r3, r0, #1
    d114:	4698      	mov	r8, r3
    d116:	001f      	movs	r7, r3
    d118:	e7c2      	b.n	d0a0 <_dtoa_r+0x3c>
    d11a:	ab16      	add	r3, sp, #88	; 0x58
    d11c:	9301      	str	r3, [sp, #4]
    d11e:	ab17      	add	r3, sp, #92	; 0x5c
    d120:	9300      	str	r3, [sp, #0]
    d122:	0032      	movs	r2, r6
    d124:	003b      	movs	r3, r7
    d126:	4650      	mov	r0, sl
    d128:	f002 fa5e 	bl	f5e8 <__d2b>
    d12c:	4643      	mov	r3, r8
    d12e:	4683      	mov	fp, r0
    d130:	0d1a      	lsrs	r2, r3, #20
    d132:	d100      	bne.n	d136 <_dtoa_r+0xd2>
    d134:	e1d6      	b.n	d4e4 <_dtoa_r+0x480>
    d136:	033b      	lsls	r3, r7, #12
    d138:	4cb5      	ldr	r4, [pc, #724]	; (d410 <_dtoa_r+0x3ac>)
    d13a:	0b1b      	lsrs	r3, r3, #12
    d13c:	431c      	orrs	r4, r3
    d13e:	4bb5      	ldr	r3, [pc, #724]	; (d414 <_dtoa_r+0x3b0>)
    d140:	0030      	movs	r0, r6
    d142:	4698      	mov	r8, r3
    d144:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d146:	0021      	movs	r1, r4
    d148:	4699      	mov	r9, r3
    d14a:	2300      	movs	r3, #0
    d14c:	4490      	add	r8, r2
    d14e:	930f      	str	r3, [sp, #60]	; 0x3c
    d150:	2200      	movs	r2, #0
    d152:	4bb1      	ldr	r3, [pc, #708]	; (d418 <_dtoa_r+0x3b4>)
    d154:	f7fd fcb2 	bl	aabc <__aeabi_dsub>
    d158:	4ab0      	ldr	r2, [pc, #704]	; (d41c <_dtoa_r+0x3b8>)
    d15a:	4bb1      	ldr	r3, [pc, #708]	; (d420 <_dtoa_r+0x3bc>)
    d15c:	f7fd fa2e 	bl	a5bc <__aeabi_dmul>
    d160:	4ab0      	ldr	r2, [pc, #704]	; (d424 <_dtoa_r+0x3c0>)
    d162:	4bb1      	ldr	r3, [pc, #708]	; (d428 <_dtoa_r+0x3c4>)
    d164:	f7fc fae6 	bl	9734 <__aeabi_dadd>
    d168:	0004      	movs	r4, r0
    d16a:	4640      	mov	r0, r8
    d16c:	000d      	movs	r5, r1
    d16e:	f7fe f80f 	bl	b190 <__aeabi_i2d>
    d172:	4aae      	ldr	r2, [pc, #696]	; (d42c <_dtoa_r+0x3c8>)
    d174:	4bae      	ldr	r3, [pc, #696]	; (d430 <_dtoa_r+0x3cc>)
    d176:	f7fd fa21 	bl	a5bc <__aeabi_dmul>
    d17a:	0002      	movs	r2, r0
    d17c:	000b      	movs	r3, r1
    d17e:	0020      	movs	r0, r4
    d180:	0029      	movs	r1, r5
    d182:	f7fc fad7 	bl	9734 <__aeabi_dadd>
    d186:	0004      	movs	r4, r0
    d188:	000d      	movs	r5, r1
    d18a:	f7fd ffcd 	bl	b128 <__aeabi_d2iz>
    d18e:	2200      	movs	r2, #0
    d190:	9003      	str	r0, [sp, #12]
    d192:	2300      	movs	r3, #0
    d194:	0020      	movs	r0, r4
    d196:	0029      	movs	r1, r5
    d198:	f7fb fa56 	bl	8648 <__aeabi_dcmplt>
    d19c:	2800      	cmp	r0, #0
    d19e:	d000      	beq.n	d1a2 <_dtoa_r+0x13e>
    d1a0:	e2b1      	b.n	d706 <_dtoa_r+0x6a2>
    d1a2:	2301      	movs	r3, #1
    d1a4:	9c03      	ldr	r4, [sp, #12]
    d1a6:	930c      	str	r3, [sp, #48]	; 0x30
    d1a8:	2c16      	cmp	r4, #22
    d1aa:	d810      	bhi.n	d1ce <_dtoa_r+0x16a>
    d1ac:	49a1      	ldr	r1, [pc, #644]	; (d434 <_dtoa_r+0x3d0>)
    d1ae:	00e3      	lsls	r3, r4, #3
    d1b0:	18c9      	adds	r1, r1, r3
    d1b2:	0032      	movs	r2, r6
    d1b4:	6808      	ldr	r0, [r1, #0]
    d1b6:	6849      	ldr	r1, [r1, #4]
    d1b8:	003b      	movs	r3, r7
    d1ba:	f7fb fa59 	bl	8670 <__aeabi_dcmpgt>
    d1be:	2800      	cmp	r0, #0
    d1c0:	d100      	bne.n	d1c4 <_dtoa_r+0x160>
    d1c2:	e31d      	b.n	d800 <_dtoa_r+0x79c>
    d1c4:	0023      	movs	r3, r4
    d1c6:	3b01      	subs	r3, #1
    d1c8:	9303      	str	r3, [sp, #12]
    d1ca:	2300      	movs	r3, #0
    d1cc:	930c      	str	r3, [sp, #48]	; 0x30
    d1ce:	464b      	mov	r3, r9
    d1d0:	4642      	mov	r2, r8
    d1d2:	1a9a      	subs	r2, r3, r2
    d1d4:	2300      	movs	r3, #0
    d1d6:	9306      	str	r3, [sp, #24]
    d1d8:	0013      	movs	r3, r2
    d1da:	3b01      	subs	r3, #1
    d1dc:	9304      	str	r3, [sp, #16]
    d1de:	d500      	bpl.n	d1e2 <_dtoa_r+0x17e>
    d1e0:	e2a1      	b.n	d726 <_dtoa_r+0x6c2>
    d1e2:	9b03      	ldr	r3, [sp, #12]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	da00      	bge.n	d1ea <_dtoa_r+0x186>
    d1e8:	e284      	b.n	d6f4 <_dtoa_r+0x690>
    d1ea:	469c      	mov	ip, r3
    d1ec:	930d      	str	r3, [sp, #52]	; 0x34
    d1ee:	2300      	movs	r3, #0
    d1f0:	9a04      	ldr	r2, [sp, #16]
    d1f2:	4699      	mov	r9, r3
    d1f4:	0011      	movs	r1, r2
    d1f6:	4461      	add	r1, ip
    d1f8:	9104      	str	r1, [sp, #16]
    d1fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d1fc:	2b09      	cmp	r3, #9
    d1fe:	d900      	bls.n	d202 <_dtoa_r+0x19e>
    d200:	e18f      	b.n	d522 <_dtoa_r+0x4be>
    d202:	2401      	movs	r4, #1
    d204:	2b05      	cmp	r3, #5
    d206:	dd02      	ble.n	d20e <_dtoa_r+0x1aa>
    d208:	2400      	movs	r4, #0
    d20a:	3b04      	subs	r3, #4
    d20c:	9322      	str	r3, [sp, #136]	; 0x88
    d20e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d210:	2b03      	cmp	r3, #3
    d212:	d101      	bne.n	d218 <_dtoa_r+0x1b4>
    d214:	f000 fcce 	bl	dbb4 <_dtoa_r+0xb50>
    d218:	dc01      	bgt.n	d21e <_dtoa_r+0x1ba>
    d21a:	f000 fc92 	bl	db42 <_dtoa_r+0xade>
    d21e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d220:	2b04      	cmp	r3, #4
    d222:	d101      	bne.n	d228 <_dtoa_r+0x1c4>
    d224:	f000 fc40 	bl	daa8 <_dtoa_r+0xa44>
    d228:	2301      	movs	r3, #1
    d22a:	930b      	str	r3, [sp, #44]	; 0x2c
    d22c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d22e:	2b05      	cmp	r3, #5
    d230:	d001      	beq.n	d236 <_dtoa_r+0x1d2>
    d232:	f000 fc8b 	bl	db4c <_dtoa_r+0xae8>
    d236:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    d238:	9b03      	ldr	r3, [sp, #12]
    d23a:	4694      	mov	ip, r2
    d23c:	4463      	add	r3, ip
    d23e:	930e      	str	r3, [sp, #56]	; 0x38
    d240:	3301      	adds	r3, #1
    d242:	9307      	str	r3, [sp, #28]
    d244:	1e1d      	subs	r5, r3, #0
    d246:	dc01      	bgt.n	d24c <_dtoa_r+0x1e8>
    d248:	f000 fd49 	bl	dcde <_dtoa_r+0xc7a>
    d24c:	9b07      	ldr	r3, [sp, #28]
    d24e:	4698      	mov	r8, r3
    d250:	2300      	movs	r3, #0
    d252:	4652      	mov	r2, sl
    d254:	2100      	movs	r1, #0
    d256:	6453      	str	r3, [r2, #68]	; 0x44
    d258:	2d17      	cmp	r5, #23
    d25a:	d90a      	bls.n	d272 <_dtoa_r+0x20e>
    d25c:	2201      	movs	r2, #1
    d25e:	3304      	adds	r3, #4
    d260:	005b      	lsls	r3, r3, #1
    d262:	0018      	movs	r0, r3
    d264:	3014      	adds	r0, #20
    d266:	0011      	movs	r1, r2
    d268:	3201      	adds	r2, #1
    d26a:	4285      	cmp	r5, r0
    d26c:	d2f8      	bcs.n	d260 <_dtoa_r+0x1fc>
    d26e:	4653      	mov	r3, sl
    d270:	6459      	str	r1, [r3, #68]	; 0x44
    d272:	4650      	mov	r0, sl
    d274:	f001 fece 	bl	f014 <_Balloc>
    d278:	4653      	mov	r3, sl
    d27a:	6418      	str	r0, [r3, #64]	; 0x40
    d27c:	4643      	mov	r3, r8
    d27e:	900a      	str	r0, [sp, #40]	; 0x28
    d280:	2b0e      	cmp	r3, #14
    d282:	d900      	bls.n	d286 <_dtoa_r+0x222>
    d284:	e161      	b.n	d54a <_dtoa_r+0x4e6>
    d286:	2c00      	cmp	r4, #0
    d288:	d100      	bne.n	d28c <_dtoa_r+0x228>
    d28a:	e15e      	b.n	d54a <_dtoa_r+0x4e6>
    d28c:	9610      	str	r6, [sp, #64]	; 0x40
    d28e:	9711      	str	r7, [sp, #68]	; 0x44
    d290:	9e03      	ldr	r6, [sp, #12]
    d292:	2e00      	cmp	r6, #0
    d294:	dc01      	bgt.n	d29a <_dtoa_r+0x236>
    d296:	f000 fd25 	bl	dce4 <_dtoa_r+0xc80>
    d29a:	0032      	movs	r2, r6
    d29c:	210f      	movs	r1, #15
    d29e:	4b65      	ldr	r3, [pc, #404]	; (d434 <_dtoa_r+0x3d0>)
    d2a0:	400a      	ands	r2, r1
    d2a2:	00d2      	lsls	r2, r2, #3
    d2a4:	189b      	adds	r3, r3, r2
    d2a6:	1136      	asrs	r6, r6, #4
    d2a8:	681c      	ldr	r4, [r3, #0]
    d2aa:	685d      	ldr	r5, [r3, #4]
    d2ac:	06f3      	lsls	r3, r6, #27
    d2ae:	d401      	bmi.n	d2b4 <_dtoa_r+0x250>
    d2b0:	f000 fcca 	bl	dc48 <_dtoa_r+0xbe4>
    d2b4:	4b60      	ldr	r3, [pc, #384]	; (d438 <_dtoa_r+0x3d4>)
    d2b6:	400e      	ands	r6, r1
    d2b8:	6a1a      	ldr	r2, [r3, #32]
    d2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d2bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    d2be:	9911      	ldr	r1, [sp, #68]	; 0x44
    d2c0:	f7fc fd48 	bl	9d54 <__aeabi_ddiv>
    d2c4:	2303      	movs	r3, #3
    d2c6:	4698      	mov	r8, r3
    d2c8:	9008      	str	r0, [sp, #32]
    d2ca:	9109      	str	r1, [sp, #36]	; 0x24
    d2cc:	2e00      	cmp	r6, #0
    d2ce:	d011      	beq.n	d2f4 <_dtoa_r+0x290>
    d2d0:	4f59      	ldr	r7, [pc, #356]	; (d438 <_dtoa_r+0x3d4>)
    d2d2:	2301      	movs	r3, #1
    d2d4:	4233      	tst	r3, r6
    d2d6:	d009      	beq.n	d2ec <_dtoa_r+0x288>
    d2d8:	469c      	mov	ip, r3
    d2da:	683a      	ldr	r2, [r7, #0]
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	0020      	movs	r0, r4
    d2e0:	0029      	movs	r1, r5
    d2e2:	44e0      	add	r8, ip
    d2e4:	f7fd f96a 	bl	a5bc <__aeabi_dmul>
    d2e8:	0004      	movs	r4, r0
    d2ea:	000d      	movs	r5, r1
    d2ec:	1076      	asrs	r6, r6, #1
    d2ee:	3708      	adds	r7, #8
    d2f0:	2e00      	cmp	r6, #0
    d2f2:	d1ee      	bne.n	d2d2 <_dtoa_r+0x26e>
    d2f4:	0022      	movs	r2, r4
    d2f6:	9808      	ldr	r0, [sp, #32]
    d2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    d2fa:	002b      	movs	r3, r5
    d2fc:	f7fc fd2a 	bl	9d54 <__aeabi_ddiv>
    d300:	0006      	movs	r6, r0
    d302:	000f      	movs	r7, r1
    d304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d306:	2b00      	cmp	r3, #0
    d308:	d009      	beq.n	d31e <_dtoa_r+0x2ba>
    d30a:	2200      	movs	r2, #0
    d30c:	4b40      	ldr	r3, [pc, #256]	; (d410 <_dtoa_r+0x3ac>)
    d30e:	0030      	movs	r0, r6
    d310:	0039      	movs	r1, r7
    d312:	f7fb f999 	bl	8648 <__aeabi_dcmplt>
    d316:	2800      	cmp	r0, #0
    d318:	d001      	beq.n	d31e <_dtoa_r+0x2ba>
    d31a:	f000 fdc2 	bl	dea2 <_dtoa_r+0xe3e>
    d31e:	4640      	mov	r0, r8
    d320:	f7fd ff36 	bl	b190 <__aeabi_i2d>
    d324:	0032      	movs	r2, r6
    d326:	003b      	movs	r3, r7
    d328:	f7fd f948 	bl	a5bc <__aeabi_dmul>
    d32c:	2200      	movs	r2, #0
    d32e:	4b43      	ldr	r3, [pc, #268]	; (d43c <_dtoa_r+0x3d8>)
    d330:	f7fc fa00 	bl	9734 <__aeabi_dadd>
    d334:	4a42      	ldr	r2, [pc, #264]	; (d440 <_dtoa_r+0x3dc>)
    d336:	000b      	movs	r3, r1
    d338:	4694      	mov	ip, r2
    d33a:	4463      	add	r3, ip
    d33c:	9008      	str	r0, [sp, #32]
    d33e:	9109      	str	r1, [sp, #36]	; 0x24
    d340:	9309      	str	r3, [sp, #36]	; 0x24
    d342:	9b07      	ldr	r3, [sp, #28]
    d344:	2b00      	cmp	r3, #0
    d346:	d101      	bne.n	d34c <_dtoa_r+0x2e8>
    d348:	f000 fc50 	bl	dbec <_dtoa_r+0xb88>
    d34c:	9b03      	ldr	r3, [sp, #12]
    d34e:	9313      	str	r3, [sp, #76]	; 0x4c
    d350:	9b07      	ldr	r3, [sp, #28]
    d352:	9312      	str	r3, [sp, #72]	; 0x48
    d354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d356:	2b00      	cmp	r3, #0
    d358:	d101      	bne.n	d35e <_dtoa_r+0x2fa>
    d35a:	f000 fd1d 	bl	dd98 <_dtoa_r+0xd34>
    d35e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d360:	2000      	movs	r0, #0
    d362:	1e5a      	subs	r2, r3, #1
    d364:	4b33      	ldr	r3, [pc, #204]	; (d434 <_dtoa_r+0x3d0>)
    d366:	00d2      	lsls	r2, r2, #3
    d368:	189b      	adds	r3, r3, r2
    d36a:	681a      	ldr	r2, [r3, #0]
    d36c:	685b      	ldr	r3, [r3, #4]
    d36e:	4935      	ldr	r1, [pc, #212]	; (d444 <_dtoa_r+0x3e0>)
    d370:	f7fc fcf0 	bl	9d54 <__aeabi_ddiv>
    d374:	9a08      	ldr	r2, [sp, #32]
    d376:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d378:	f7fd fba0 	bl	aabc <__aeabi_dsub>
    d37c:	9008      	str	r0, [sp, #32]
    d37e:	9109      	str	r1, [sp, #36]	; 0x24
    d380:	0039      	movs	r1, r7
    d382:	0030      	movs	r0, r6
    d384:	f7fd fed0 	bl	b128 <__aeabi_d2iz>
    d388:	0004      	movs	r4, r0
    d38a:	f7fd ff01 	bl	b190 <__aeabi_i2d>
    d38e:	0002      	movs	r2, r0
    d390:	000b      	movs	r3, r1
    d392:	0030      	movs	r0, r6
    d394:	0039      	movs	r1, r7
    d396:	f7fd fb91 	bl	aabc <__aeabi_dsub>
    d39a:	0005      	movs	r5, r0
    d39c:	000e      	movs	r6, r1
    d39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d3a0:	3430      	adds	r4, #48	; 0x30
    d3a2:	1c51      	adds	r1, r2, #1
    d3a4:	b2e7      	uxtb	r7, r4
    d3a6:	9114      	str	r1, [sp, #80]	; 0x50
    d3a8:	7017      	strb	r7, [r2, #0]
    d3aa:	0033      	movs	r3, r6
    d3ac:	9808      	ldr	r0, [sp, #32]
    d3ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    d3b0:	002a      	movs	r2, r5
    d3b2:	f7fb f95d 	bl	8670 <__aeabi_dcmpgt>
    d3b6:	2800      	cmp	r0, #0
    d3b8:	d001      	beq.n	d3be <_dtoa_r+0x35a>
    d3ba:	f000 fdfe 	bl	dfba <_dtoa_r+0xf56>
    d3be:	002a      	movs	r2, r5
    d3c0:	0033      	movs	r3, r6
    d3c2:	2000      	movs	r0, #0
    d3c4:	4912      	ldr	r1, [pc, #72]	; (d410 <_dtoa_r+0x3ac>)
    d3c6:	f7fd fb79 	bl	aabc <__aeabi_dsub>
    d3ca:	0002      	movs	r2, r0
    d3cc:	000b      	movs	r3, r1
    d3ce:	9808      	ldr	r0, [sp, #32]
    d3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d3d2:	f7fb f94d 	bl	8670 <__aeabi_dcmpgt>
    d3d6:	2800      	cmp	r0, #0
    d3d8:	d001      	beq.n	d3de <_dtoa_r+0x37a>
    d3da:	f000 fde7 	bl	dfac <_dtoa_r+0xf48>
    d3de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d3e0:	2b01      	cmp	r3, #1
    d3e2:	d101      	bne.n	d3e8 <_dtoa_r+0x384>
    d3e4:	f000 fc78 	bl	dcd8 <_dtoa_r+0xc74>
    d3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d3ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d3ec:	4694      	mov	ip, r2
    d3ee:	4463      	add	r3, ip
    d3f0:	4698      	mov	r8, r3
    d3f2:	464b      	mov	r3, r9
    d3f4:	9312      	str	r3, [sp, #72]	; 0x48
    d3f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d3f8:	4699      	mov	r9, r3
    d3fa:	e038      	b.n	d46e <_dtoa_r+0x40a>
    d3fc:	7ff00000 	.word	0x7ff00000
    d400:	00010899 	.word	0x00010899
    d404:	0000270f 	.word	0x0000270f
    d408:	000108bc 	.word	0x000108bc
    d40c:	000108c8 	.word	0x000108c8
    d410:	3ff00000 	.word	0x3ff00000
    d414:	fffffc01 	.word	0xfffffc01
    d418:	3ff80000 	.word	0x3ff80000
    d41c:	636f4361 	.word	0x636f4361
    d420:	3fd287a7 	.word	0x3fd287a7
    d424:	8b60c8b3 	.word	0x8b60c8b3
    d428:	3fc68a28 	.word	0x3fc68a28
    d42c:	509f79fb 	.word	0x509f79fb
    d430:	3fd34413 	.word	0x3fd34413
    d434:	000108f8 	.word	0x000108f8
    d438:	000108d0 	.word	0x000108d0
    d43c:	401c0000 	.word	0x401c0000
    d440:	fcc00000 	.word	0xfcc00000
    d444:	3fe00000 	.word	0x3fe00000
    d448:	002a      	movs	r2, r5
    d44a:	0033      	movs	r3, r6
    d44c:	2000      	movs	r0, #0
    d44e:	49b9      	ldr	r1, [pc, #740]	; (d734 <_dtoa_r+0x6d0>)
    d450:	f7fd fb34 	bl	aabc <__aeabi_dsub>
    d454:	9a08      	ldr	r2, [sp, #32]
    d456:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d458:	f7fb f8f6 	bl	8648 <__aeabi_dcmplt>
    d45c:	2800      	cmp	r0, #0
    d45e:	d001      	beq.n	d464 <_dtoa_r+0x400>
    d460:	f000 fd74 	bl	df4c <_dtoa_r+0xee8>
    d464:	46a1      	mov	r9, r4
    d466:	4544      	cmp	r4, r8
    d468:	d101      	bne.n	d46e <_dtoa_r+0x40a>
    d46a:	f000 fc33 	bl	dcd4 <_dtoa_r+0xc70>
    d46e:	9808      	ldr	r0, [sp, #32]
    d470:	9909      	ldr	r1, [sp, #36]	; 0x24
    d472:	2200      	movs	r2, #0
    d474:	4bb0      	ldr	r3, [pc, #704]	; (d738 <_dtoa_r+0x6d4>)
    d476:	f7fd f8a1 	bl	a5bc <__aeabi_dmul>
    d47a:	2200      	movs	r2, #0
    d47c:	4bae      	ldr	r3, [pc, #696]	; (d738 <_dtoa_r+0x6d4>)
    d47e:	9008      	str	r0, [sp, #32]
    d480:	9109      	str	r1, [sp, #36]	; 0x24
    d482:	0028      	movs	r0, r5
    d484:	0031      	movs	r1, r6
    d486:	f7fd f899 	bl	a5bc <__aeabi_dmul>
    d48a:	000d      	movs	r5, r1
    d48c:	0004      	movs	r4, r0
    d48e:	f7fd fe4b 	bl	b128 <__aeabi_d2iz>
    d492:	0007      	movs	r7, r0
    d494:	f7fd fe7c 	bl	b190 <__aeabi_i2d>
    d498:	0002      	movs	r2, r0
    d49a:	000b      	movs	r3, r1
    d49c:	0020      	movs	r0, r4
    d49e:	0029      	movs	r1, r5
    d4a0:	f7fd fb0c 	bl	aabc <__aeabi_dsub>
    d4a4:	464b      	mov	r3, r9
    d4a6:	3730      	adds	r7, #48	; 0x30
    d4a8:	b2ff      	uxtb	r7, r7
    d4aa:	1c5c      	adds	r4, r3, #1
    d4ac:	701f      	strb	r7, [r3, #0]
    d4ae:	9a08      	ldr	r2, [sp, #32]
    d4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4b2:	0005      	movs	r5, r0
    d4b4:	000e      	movs	r6, r1
    d4b6:	f7fb f8c7 	bl	8648 <__aeabi_dcmplt>
    d4ba:	2800      	cmp	r0, #0
    d4bc:	d0c4      	beq.n	d448 <_dtoa_r+0x3e4>
    d4be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d4c0:	9303      	str	r3, [sp, #12]
    d4c2:	4659      	mov	r1, fp
    d4c4:	4650      	mov	r0, sl
    d4c6:	f001 fdcd 	bl	f064 <_Bfree>
    d4ca:	2300      	movs	r3, #0
    d4cc:	7023      	strb	r3, [r4, #0]
    d4ce:	9b03      	ldr	r3, [sp, #12]
    d4d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d4d2:	3301      	adds	r3, #1
    d4d4:	6013      	str	r3, [r2, #0]
    d4d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d100      	bne.n	d4de <_dtoa_r+0x47a>
    d4dc:	e3a8      	b.n	dc30 <_dtoa_r+0xbcc>
    d4de:	601c      	str	r4, [r3, #0]
    d4e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    d4e2:	e5f4      	b.n	d0ce <_dtoa_r+0x6a>
    d4e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d4e6:	4699      	mov	r9, r3
    d4e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d4ea:	444b      	add	r3, r9
    d4ec:	001c      	movs	r4, r3
    d4ee:	4b93      	ldr	r3, [pc, #588]	; (d73c <_dtoa_r+0x6d8>)
    d4f0:	18e3      	adds	r3, r4, r3
    d4f2:	2b20      	cmp	r3, #32
    d4f4:	dc00      	bgt.n	d4f8 <_dtoa_r+0x494>
    d4f6:	e17e      	b.n	d7f6 <_dtoa_r+0x792>
    d4f8:	0031      	movs	r1, r6
    d4fa:	4a91      	ldr	r2, [pc, #580]	; (d740 <_dtoa_r+0x6dc>)
    d4fc:	4640      	mov	r0, r8
    d4fe:	18a2      	adds	r2, r4, r2
    d500:	40d1      	lsrs	r1, r2
    d502:	000a      	movs	r2, r1
    d504:	2140      	movs	r1, #64	; 0x40
    d506:	1acb      	subs	r3, r1, r3
    d508:	4098      	lsls	r0, r3
    d50a:	4310      	orrs	r0, r2
    d50c:	f7fd fe82 	bl	b214 <__aeabi_ui2d>
    d510:	1e63      	subs	r3, r4, #1
    d512:	4698      	mov	r8, r3
    d514:	2301      	movs	r3, #1
    d516:	4d8b      	ldr	r5, [pc, #556]	; (d744 <_dtoa_r+0x6e0>)
    d518:	930f      	str	r3, [sp, #60]	; 0x3c
    d51a:	1949      	adds	r1, r1, r5
    d51c:	e618      	b.n	d150 <_dtoa_r+0xec>
    d51e:	488a      	ldr	r0, [pc, #552]	; (d748 <_dtoa_r+0x6e4>)
    d520:	e5d5      	b.n	d0ce <_dtoa_r+0x6a>
    d522:	2300      	movs	r3, #0
    d524:	4652      	mov	r2, sl
    d526:	2100      	movs	r1, #0
    d528:	6453      	str	r3, [r2, #68]	; 0x44
    d52a:	4650      	mov	r0, sl
    d52c:	f001 fd72 	bl	f014 <_Balloc>
    d530:	4653      	mov	r3, sl
    d532:	6418      	str	r0, [r3, #64]	; 0x40
    d534:	2301      	movs	r3, #1
    d536:	425b      	negs	r3, r3
    d538:	9307      	str	r3, [sp, #28]
    d53a:	930e      	str	r3, [sp, #56]	; 0x38
    d53c:	3302      	adds	r3, #2
    d53e:	2200      	movs	r2, #0
    d540:	930b      	str	r3, [sp, #44]	; 0x2c
    d542:	2300      	movs	r3, #0
    d544:	900a      	str	r0, [sp, #40]	; 0x28
    d546:	9223      	str	r2, [sp, #140]	; 0x8c
    d548:	9322      	str	r3, [sp, #136]	; 0x88
    d54a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d54c:	2b00      	cmp	r3, #0
    d54e:	da00      	bge.n	d552 <_dtoa_r+0x4ee>
    d550:	e0ab      	b.n	d6aa <_dtoa_r+0x646>
    d552:	9a03      	ldr	r2, [sp, #12]
    d554:	2a0e      	cmp	r2, #14
    d556:	dd00      	ble.n	d55a <_dtoa_r+0x4f6>
    d558:	e0a7      	b.n	d6aa <_dtoa_r+0x646>
    d55a:	4b7c      	ldr	r3, [pc, #496]	; (d74c <_dtoa_r+0x6e8>)
    d55c:	00d2      	lsls	r2, r2, #3
    d55e:	189b      	adds	r3, r3, r2
    d560:	685c      	ldr	r4, [r3, #4]
    d562:	681b      	ldr	r3, [r3, #0]
    d564:	9304      	str	r3, [sp, #16]
    d566:	9405      	str	r4, [sp, #20]
    d568:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d56a:	2b00      	cmp	r3, #0
    d56c:	da00      	bge.n	d570 <_dtoa_r+0x50c>
    d56e:	e2a7      	b.n	dac0 <_dtoa_r+0xa5c>
    d570:	9c04      	ldr	r4, [sp, #16]
    d572:	9d05      	ldr	r5, [sp, #20]
    d574:	0030      	movs	r0, r6
    d576:	0022      	movs	r2, r4
    d578:	002b      	movs	r3, r5
    d57a:	0039      	movs	r1, r7
    d57c:	f7fc fbea 	bl	9d54 <__aeabi_ddiv>
    d580:	f7fd fdd2 	bl	b128 <__aeabi_d2iz>
    d584:	4680      	mov	r8, r0
    d586:	f7fd fe03 	bl	b190 <__aeabi_i2d>
    d58a:	0022      	movs	r2, r4
    d58c:	002b      	movs	r3, r5
    d58e:	f7fd f815 	bl	a5bc <__aeabi_dmul>
    d592:	0002      	movs	r2, r0
    d594:	000b      	movs	r3, r1
    d596:	0030      	movs	r0, r6
    d598:	0039      	movs	r1, r7
    d59a:	f7fd fa8f 	bl	aabc <__aeabi_dsub>
    d59e:	4643      	mov	r3, r8
    d5a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d5a2:	3330      	adds	r3, #48	; 0x30
    d5a4:	7013      	strb	r3, [r2, #0]
    d5a6:	9b07      	ldr	r3, [sp, #28]
    d5a8:	0006      	movs	r6, r0
    d5aa:	000f      	movs	r7, r1
    d5ac:	1c54      	adds	r4, r2, #1
    d5ae:	2b01      	cmp	r3, #1
    d5b0:	d04e      	beq.n	d650 <_dtoa_r+0x5ec>
    d5b2:	2200      	movs	r2, #0
    d5b4:	4b60      	ldr	r3, [pc, #384]	; (d738 <_dtoa_r+0x6d4>)
    d5b6:	f7fd f801 	bl	a5bc <__aeabi_dmul>
    d5ba:	2200      	movs	r2, #0
    d5bc:	2300      	movs	r3, #0
    d5be:	0006      	movs	r6, r0
    d5c0:	000f      	movs	r7, r1
    d5c2:	f7fb f83b 	bl	863c <__aeabi_dcmpeq>
    d5c6:	2800      	cmp	r0, #0
    d5c8:	d000      	beq.n	d5cc <_dtoa_r+0x568>
    d5ca:	e77a      	b.n	d4c2 <_dtoa_r+0x45e>
    d5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d5ce:	9a07      	ldr	r2, [sp, #28]
    d5d0:	1c9d      	adds	r5, r3, #2
    d5d2:	469c      	mov	ip, r3
    d5d4:	465b      	mov	r3, fp
    d5d6:	9306      	str	r3, [sp, #24]
    d5d8:	4653      	mov	r3, sl
    d5da:	4462      	add	r2, ip
    d5dc:	46aa      	mov	sl, r5
    d5de:	9c04      	ldr	r4, [sp, #16]
    d5e0:	9d05      	ldr	r5, [sp, #20]
    d5e2:	4691      	mov	r9, r2
    d5e4:	9307      	str	r3, [sp, #28]
    d5e6:	e00f      	b.n	d608 <_dtoa_r+0x5a4>
    d5e8:	2200      	movs	r2, #0
    d5ea:	4b53      	ldr	r3, [pc, #332]	; (d738 <_dtoa_r+0x6d4>)
    d5ec:	f7fc ffe6 	bl	a5bc <__aeabi_dmul>
    d5f0:	2301      	movs	r3, #1
    d5f2:	469c      	mov	ip, r3
    d5f4:	2200      	movs	r2, #0
    d5f6:	2300      	movs	r3, #0
    d5f8:	0006      	movs	r6, r0
    d5fa:	000f      	movs	r7, r1
    d5fc:	44e2      	add	sl, ip
    d5fe:	f7fb f81d 	bl	863c <__aeabi_dcmpeq>
    d602:	2800      	cmp	r0, #0
    d604:	d000      	beq.n	d608 <_dtoa_r+0x5a4>
    d606:	e2d9      	b.n	dbbc <_dtoa_r+0xb58>
    d608:	0022      	movs	r2, r4
    d60a:	002b      	movs	r3, r5
    d60c:	0030      	movs	r0, r6
    d60e:	0039      	movs	r1, r7
    d610:	f7fc fba0 	bl	9d54 <__aeabi_ddiv>
    d614:	f7fd fd88 	bl	b128 <__aeabi_d2iz>
    d618:	4680      	mov	r8, r0
    d61a:	f7fd fdb9 	bl	b190 <__aeabi_i2d>
    d61e:	0022      	movs	r2, r4
    d620:	002b      	movs	r3, r5
    d622:	f7fc ffcb 	bl	a5bc <__aeabi_dmul>
    d626:	0002      	movs	r2, r0
    d628:	000b      	movs	r3, r1
    d62a:	0030      	movs	r0, r6
    d62c:	0039      	movs	r1, r7
    d62e:	f7fd fa45 	bl	aabc <__aeabi_dsub>
    d632:	4653      	mov	r3, sl
    d634:	4642      	mov	r2, r8
    d636:	3b01      	subs	r3, #1
    d638:	3230      	adds	r2, #48	; 0x30
    d63a:	0006      	movs	r6, r0
    d63c:	000f      	movs	r7, r1
    d63e:	46d3      	mov	fp, sl
    d640:	701a      	strb	r2, [r3, #0]
    d642:	45d1      	cmp	r9, sl
    d644:	d1d0      	bne.n	d5e8 <_dtoa_r+0x584>
    d646:	9b06      	ldr	r3, [sp, #24]
    d648:	4654      	mov	r4, sl
    d64a:	469b      	mov	fp, r3
    d64c:	9b07      	ldr	r3, [sp, #28]
    d64e:	469a      	mov	sl, r3
    d650:	0032      	movs	r2, r6
    d652:	003b      	movs	r3, r7
    d654:	0030      	movs	r0, r6
    d656:	0039      	movs	r1, r7
    d658:	f7fc f86c 	bl	9734 <__aeabi_dadd>
    d65c:	0006      	movs	r6, r0
    d65e:	000f      	movs	r7, r1
    d660:	0002      	movs	r2, r0
    d662:	000b      	movs	r3, r1
    d664:	9804      	ldr	r0, [sp, #16]
    d666:	9905      	ldr	r1, [sp, #20]
    d668:	f7fa ffee 	bl	8648 <__aeabi_dcmplt>
    d66c:	2800      	cmp	r0, #0
    d66e:	d10c      	bne.n	d68a <_dtoa_r+0x626>
    d670:	9804      	ldr	r0, [sp, #16]
    d672:	9905      	ldr	r1, [sp, #20]
    d674:	0032      	movs	r2, r6
    d676:	003b      	movs	r3, r7
    d678:	f7fa ffe0 	bl	863c <__aeabi_dcmpeq>
    d67c:	2800      	cmp	r0, #0
    d67e:	d100      	bne.n	d682 <_dtoa_r+0x61e>
    d680:	e71f      	b.n	d4c2 <_dtoa_r+0x45e>
    d682:	4643      	mov	r3, r8
    d684:	07db      	lsls	r3, r3, #31
    d686:	d400      	bmi.n	d68a <_dtoa_r+0x626>
    d688:	e71b      	b.n	d4c2 <_dtoa_r+0x45e>
    d68a:	1e65      	subs	r5, r4, #1
    d68c:	782f      	ldrb	r7, [r5, #0]
    d68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d690:	e006      	b.n	d6a0 <_dtoa_r+0x63c>
    d692:	429d      	cmp	r5, r3
    d694:	d100      	bne.n	d698 <_dtoa_r+0x634>
    d696:	e351      	b.n	dd3c <_dtoa_r+0xcd8>
    d698:	3c02      	subs	r4, #2
    d69a:	7827      	ldrb	r7, [r4, #0]
    d69c:	002c      	movs	r4, r5
    d69e:	3d01      	subs	r5, #1
    d6a0:	2f39      	cmp	r7, #57	; 0x39
    d6a2:	d0f6      	beq.n	d692 <_dtoa_r+0x62e>
    d6a4:	3701      	adds	r7, #1
    d6a6:	702f      	strb	r7, [r5, #0]
    d6a8:	e70b      	b.n	d4c2 <_dtoa_r+0x45e>
    d6aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d6ac:	2a00      	cmp	r2, #0
    d6ae:	d04f      	beq.n	d750 <_dtoa_r+0x6ec>
    d6b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d6b2:	2a01      	cmp	r2, #1
    d6b4:	dc00      	bgt.n	d6b8 <_dtoa_r+0x654>
    d6b6:	e22c      	b.n	db12 <_dtoa_r+0xaae>
    d6b8:	9b07      	ldr	r3, [sp, #28]
    d6ba:	1e5c      	subs	r4, r3, #1
    d6bc:	464b      	mov	r3, r9
    d6be:	45a1      	cmp	r9, r4
    d6c0:	da00      	bge.n	d6c4 <_dtoa_r+0x660>
    d6c2:	e2b8      	b.n	dc36 <_dtoa_r+0xbd2>
    d6c4:	1b1c      	subs	r4, r3, r4
    d6c6:	9b07      	ldr	r3, [sp, #28]
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	da00      	bge.n	d6ce <_dtoa_r+0x66a>
    d6cc:	e3d4      	b.n	de78 <_dtoa_r+0xe14>
    d6ce:	9b06      	ldr	r3, [sp, #24]
    d6d0:	9308      	str	r3, [sp, #32]
    d6d2:	9b07      	ldr	r3, [sp, #28]
    d6d4:	9a06      	ldr	r2, [sp, #24]
    d6d6:	2101      	movs	r1, #1
    d6d8:	4694      	mov	ip, r2
    d6da:	449c      	add	ip, r3
    d6dc:	4662      	mov	r2, ip
    d6de:	9206      	str	r2, [sp, #24]
    d6e0:	9a04      	ldr	r2, [sp, #16]
    d6e2:	4650      	mov	r0, sl
    d6e4:	4694      	mov	ip, r2
    d6e6:	449c      	add	ip, r3
    d6e8:	4663      	mov	r3, ip
    d6ea:	9304      	str	r3, [sp, #16]
    d6ec:	f001 fd52 	bl	f194 <__i2b>
    d6f0:	4680      	mov	r8, r0
    d6f2:	e032      	b.n	d75a <_dtoa_r+0x6f6>
    d6f4:	9a06      	ldr	r2, [sp, #24]
    d6f6:	9b03      	ldr	r3, [sp, #12]
    d6f8:	1ad2      	subs	r2, r2, r3
    d6fa:	425b      	negs	r3, r3
    d6fc:	4699      	mov	r9, r3
    d6fe:	2300      	movs	r3, #0
    d700:	9206      	str	r2, [sp, #24]
    d702:	930d      	str	r3, [sp, #52]	; 0x34
    d704:	e579      	b.n	d1fa <_dtoa_r+0x196>
    d706:	9803      	ldr	r0, [sp, #12]
    d708:	f7fd fd42 	bl	b190 <__aeabi_i2d>
    d70c:	000b      	movs	r3, r1
    d70e:	0002      	movs	r2, r0
    d710:	0029      	movs	r1, r5
    d712:	0020      	movs	r0, r4
    d714:	f7fa ff92 	bl	863c <__aeabi_dcmpeq>
    d718:	0002      	movs	r2, r0
    d71a:	4250      	negs	r0, r2
    d71c:	4150      	adcs	r0, r2
    d71e:	9b03      	ldr	r3, [sp, #12]
    d720:	1a1b      	subs	r3, r3, r0
    d722:	9303      	str	r3, [sp, #12]
    d724:	e53d      	b.n	d1a2 <_dtoa_r+0x13e>
    d726:	2301      	movs	r3, #1
    d728:	1a9b      	subs	r3, r3, r2
    d72a:	9306      	str	r3, [sp, #24]
    d72c:	2300      	movs	r3, #0
    d72e:	9304      	str	r3, [sp, #16]
    d730:	e557      	b.n	d1e2 <_dtoa_r+0x17e>
    d732:	46c0      	nop			; (mov r8, r8)
    d734:	3ff00000 	.word	0x3ff00000
    d738:	40240000 	.word	0x40240000
    d73c:	00000432 	.word	0x00000432
    d740:	00000412 	.word	0x00000412
    d744:	fe100000 	.word	0xfe100000
    d748:	00010898 	.word	0x00010898
    d74c:	000108f8 	.word	0x000108f8
    d750:	9b06      	ldr	r3, [sp, #24]
    d752:	464c      	mov	r4, r9
    d754:	9308      	str	r3, [sp, #32]
    d756:	2300      	movs	r3, #0
    d758:	4698      	mov	r8, r3
    d75a:	9908      	ldr	r1, [sp, #32]
    d75c:	1e0b      	subs	r3, r1, #0
    d75e:	dd0e      	ble.n	d77e <_dtoa_r+0x71a>
    d760:	9a04      	ldr	r2, [sp, #16]
    d762:	2a00      	cmp	r2, #0
    d764:	dd0b      	ble.n	d77e <_dtoa_r+0x71a>
    d766:	4293      	cmp	r3, r2
    d768:	dd00      	ble.n	d76c <_dtoa_r+0x708>
    d76a:	e187      	b.n	da7c <_dtoa_r+0xa18>
    d76c:	9a06      	ldr	r2, [sp, #24]
    d76e:	1ad2      	subs	r2, r2, r3
    d770:	9206      	str	r2, [sp, #24]
    d772:	9a08      	ldr	r2, [sp, #32]
    d774:	1ad2      	subs	r2, r2, r3
    d776:	9208      	str	r2, [sp, #32]
    d778:	9a04      	ldr	r2, [sp, #16]
    d77a:	1ad3      	subs	r3, r2, r3
    d77c:	9304      	str	r3, [sp, #16]
    d77e:	464b      	mov	r3, r9
    d780:	2b00      	cmp	r3, #0
    d782:	d01a      	beq.n	d7ba <_dtoa_r+0x756>
    d784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d786:	2b00      	cmp	r3, #0
    d788:	d100      	bne.n	d78c <_dtoa_r+0x728>
    d78a:	e1bb      	b.n	db04 <_dtoa_r+0xaa0>
    d78c:	2c00      	cmp	r4, #0
    d78e:	dd10      	ble.n	d7b2 <_dtoa_r+0x74e>
    d790:	4641      	mov	r1, r8
    d792:	0022      	movs	r2, r4
    d794:	4650      	mov	r0, sl
    d796:	f001 fdb1 	bl	f2fc <__pow5mult>
    d79a:	465a      	mov	r2, fp
    d79c:	0001      	movs	r1, r0
    d79e:	4680      	mov	r8, r0
    d7a0:	4650      	mov	r0, sl
    d7a2:	f001 fd01 	bl	f1a8 <__multiply>
    d7a6:	0005      	movs	r5, r0
    d7a8:	4659      	mov	r1, fp
    d7aa:	4650      	mov	r0, sl
    d7ac:	f001 fc5a 	bl	f064 <_Bfree>
    d7b0:	46ab      	mov	fp, r5
    d7b2:	464b      	mov	r3, r9
    d7b4:	1b1a      	subs	r2, r3, r4
    d7b6:	d000      	beq.n	d7ba <_dtoa_r+0x756>
    d7b8:	e1a5      	b.n	db06 <_dtoa_r+0xaa2>
    d7ba:	2101      	movs	r1, #1
    d7bc:	4650      	mov	r0, sl
    d7be:	f001 fce9 	bl	f194 <__i2b>
    d7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d7c4:	4681      	mov	r9, r0
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	dd1d      	ble.n	d806 <_dtoa_r+0x7a2>
    d7ca:	001a      	movs	r2, r3
    d7cc:	0001      	movs	r1, r0
    d7ce:	4650      	mov	r0, sl
    d7d0:	f001 fd94 	bl	f2fc <__pow5mult>
    d7d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d7d6:	4681      	mov	r9, r0
    d7d8:	2b01      	cmp	r3, #1
    d7da:	dc00      	bgt.n	d7de <_dtoa_r+0x77a>
    d7dc:	e150      	b.n	da80 <_dtoa_r+0xa1c>
    d7de:	2400      	movs	r4, #0
    d7e0:	464b      	mov	r3, r9
    d7e2:	691b      	ldr	r3, [r3, #16]
    d7e4:	3303      	adds	r3, #3
    d7e6:	009b      	lsls	r3, r3, #2
    d7e8:	444b      	add	r3, r9
    d7ea:	6858      	ldr	r0, [r3, #4]
    d7ec:	f001 fc8a 	bl	f104 <__hi0bits>
    d7f0:	2320      	movs	r3, #32
    d7f2:	1a1b      	subs	r3, r3, r0
    d7f4:	e010      	b.n	d818 <_dtoa_r+0x7b4>
    d7f6:	2220      	movs	r2, #32
    d7f8:	0030      	movs	r0, r6
    d7fa:	1ad3      	subs	r3, r2, r3
    d7fc:	4098      	lsls	r0, r3
    d7fe:	e685      	b.n	d50c <_dtoa_r+0x4a8>
    d800:	2300      	movs	r3, #0
    d802:	930c      	str	r3, [sp, #48]	; 0x30
    d804:	e4e3      	b.n	d1ce <_dtoa_r+0x16a>
    d806:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d808:	2400      	movs	r4, #0
    d80a:	2b01      	cmp	r3, #1
    d80c:	dc00      	bgt.n	d810 <_dtoa_r+0x7ac>
    d80e:	e18b      	b.n	db28 <_dtoa_r+0xac4>
    d810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d812:	2301      	movs	r3, #1
    d814:	2a00      	cmp	r2, #0
    d816:	d1e3      	bne.n	d7e0 <_dtoa_r+0x77c>
    d818:	9904      	ldr	r1, [sp, #16]
    d81a:	201f      	movs	r0, #31
    d81c:	468c      	mov	ip, r1
    d81e:	4463      	add	r3, ip
    d820:	4018      	ands	r0, r3
    d822:	d100      	bne.n	d826 <_dtoa_r+0x7c2>
    d824:	e0ae      	b.n	d984 <_dtoa_r+0x920>
    d826:	2320      	movs	r3, #32
    d828:	1a1b      	subs	r3, r3, r0
    d82a:	2b04      	cmp	r3, #4
    d82c:	dc00      	bgt.n	d830 <_dtoa_r+0x7cc>
    d82e:	e3cc      	b.n	dfca <_dtoa_r+0xf66>
    d830:	231c      	movs	r3, #28
    d832:	1a18      	subs	r0, r3, r0
    d834:	9b06      	ldr	r3, [sp, #24]
    d836:	469c      	mov	ip, r3
    d838:	4484      	add	ip, r0
    d83a:	4663      	mov	r3, ip
    d83c:	9306      	str	r3, [sp, #24]
    d83e:	9b08      	ldr	r3, [sp, #32]
    d840:	469c      	mov	ip, r3
    d842:	4484      	add	ip, r0
    d844:	4663      	mov	r3, ip
    d846:	468c      	mov	ip, r1
    d848:	4484      	add	ip, r0
    d84a:	9308      	str	r3, [sp, #32]
    d84c:	4663      	mov	r3, ip
    d84e:	9304      	str	r3, [sp, #16]
    d850:	9b06      	ldr	r3, [sp, #24]
    d852:	2b00      	cmp	r3, #0
    d854:	dd05      	ble.n	d862 <_dtoa_r+0x7fe>
    d856:	4659      	mov	r1, fp
    d858:	001a      	movs	r2, r3
    d85a:	4650      	mov	r0, sl
    d85c:	f001 fdae 	bl	f3bc <__lshift>
    d860:	4683      	mov	fp, r0
    d862:	9b04      	ldr	r3, [sp, #16]
    d864:	2b00      	cmp	r3, #0
    d866:	dd05      	ble.n	d874 <_dtoa_r+0x810>
    d868:	4649      	mov	r1, r9
    d86a:	001a      	movs	r2, r3
    d86c:	4650      	mov	r0, sl
    d86e:	f001 fda5 	bl	f3bc <__lshift>
    d872:	4681      	mov	r9, r0
    d874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d876:	2b00      	cmp	r3, #0
    d878:	d000      	beq.n	d87c <_dtoa_r+0x818>
    d87a:	e094      	b.n	d9a6 <_dtoa_r+0x942>
    d87c:	9b07      	ldr	r3, [sp, #28]
    d87e:	2b00      	cmp	r3, #0
    d880:	dc00      	bgt.n	d884 <_dtoa_r+0x820>
    d882:	e175      	b.n	db70 <_dtoa_r+0xb0c>
    d884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d886:	2b00      	cmp	r3, #0
    d888:	d100      	bne.n	d88c <_dtoa_r+0x828>
    d88a:	e0a6      	b.n	d9da <_dtoa_r+0x976>
    d88c:	9b08      	ldr	r3, [sp, #32]
    d88e:	2b00      	cmp	r3, #0
    d890:	dd05      	ble.n	d89e <_dtoa_r+0x83a>
    d892:	4641      	mov	r1, r8
    d894:	001a      	movs	r2, r3
    d896:	4650      	mov	r0, sl
    d898:	f001 fd90 	bl	f3bc <__lshift>
    d89c:	4680      	mov	r8, r0
    d89e:	4643      	mov	r3, r8
    d8a0:	930c      	str	r3, [sp, #48]	; 0x30
    d8a2:	2c00      	cmp	r4, #0
    d8a4:	d000      	beq.n	d8a8 <_dtoa_r+0x844>
    d8a6:	e250      	b.n	dd4a <_dtoa_r+0xce6>
    d8a8:	9c07      	ldr	r4, [sp, #28]
    d8aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d8ac:	3c01      	subs	r4, #1
    d8ae:	0023      	movs	r3, r4
    d8b0:	4694      	mov	ip, r2
    d8b2:	4463      	add	r3, ip
    d8b4:	9308      	str	r3, [sp, #32]
    d8b6:	2301      	movs	r3, #1
    d8b8:	4033      	ands	r3, r6
    d8ba:	9307      	str	r3, [sp, #28]
    d8bc:	464b      	mov	r3, r9
    d8be:	9306      	str	r3, [sp, #24]
    d8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d8c2:	4657      	mov	r7, sl
    d8c4:	4645      	mov	r5, r8
    d8c6:	465e      	mov	r6, fp
    d8c8:	4692      	mov	sl, r2
    d8ca:	4698      	mov	r8, r3
    d8cc:	9b06      	ldr	r3, [sp, #24]
    d8ce:	0030      	movs	r0, r6
    d8d0:	0019      	movs	r1, r3
    d8d2:	4699      	mov	r9, r3
    d8d4:	f7ff fb1c 	bl	cf10 <quorem>
    d8d8:	0003      	movs	r3, r0
    d8da:	900b      	str	r0, [sp, #44]	; 0x2c
    d8dc:	3330      	adds	r3, #48	; 0x30
    d8de:	0029      	movs	r1, r5
    d8e0:	0030      	movs	r0, r6
    d8e2:	9304      	str	r3, [sp, #16]
    d8e4:	f001 fdca 	bl	f47c <__mcmp>
    d8e8:	4649      	mov	r1, r9
    d8ea:	0004      	movs	r4, r0
    d8ec:	4642      	mov	r2, r8
    d8ee:	0038      	movs	r0, r7
    d8f0:	f001 fdde 	bl	f4b0 <__mdiff>
    d8f4:	68c3      	ldr	r3, [r0, #12]
    d8f6:	4681      	mov	r9, r0
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d000      	beq.n	d8fe <_dtoa_r+0x89a>
    d8fc:	e11e      	b.n	db3c <_dtoa_r+0xad8>
    d8fe:	0001      	movs	r1, r0
    d900:	0030      	movs	r0, r6
    d902:	f001 fdbb 	bl	f47c <__mcmp>
    d906:	4683      	mov	fp, r0
    d908:	4649      	mov	r1, r9
    d90a:	0038      	movs	r0, r7
    d90c:	f001 fbaa 	bl	f064 <_Bfree>
    d910:	465b      	mov	r3, fp
    d912:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d914:	4313      	orrs	r3, r2
    d916:	d103      	bne.n	d920 <_dtoa_r+0x8bc>
    d918:	9b07      	ldr	r3, [sp, #28]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d100      	bne.n	d920 <_dtoa_r+0x8bc>
    d91e:	e306      	b.n	df2e <_dtoa_r+0xeca>
    d920:	2c00      	cmp	r4, #0
    d922:	da00      	bge.n	d926 <_dtoa_r+0x8c2>
    d924:	e1a8      	b.n	dc78 <_dtoa_r+0xc14>
    d926:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d928:	431c      	orrs	r4, r3
    d92a:	d103      	bne.n	d934 <_dtoa_r+0x8d0>
    d92c:	9b07      	ldr	r3, [sp, #28]
    d92e:	2b00      	cmp	r3, #0
    d930:	d100      	bne.n	d934 <_dtoa_r+0x8d0>
    d932:	e1a1      	b.n	dc78 <_dtoa_r+0xc14>
    d934:	465b      	mov	r3, fp
    d936:	2b00      	cmp	r3, #0
    d938:	dd00      	ble.n	d93c <_dtoa_r+0x8d8>
    d93a:	e282      	b.n	de42 <_dtoa_r+0xdde>
    d93c:	4669      	mov	r1, sp
    d93e:	4652      	mov	r2, sl
    d940:	4653      	mov	r3, sl
    d942:	7c09      	ldrb	r1, [r1, #16]
    d944:	1c5c      	adds	r4, r3, #1
    d946:	7011      	strb	r1, [r2, #0]
    d948:	9a08      	ldr	r2, [sp, #32]
    d94a:	4552      	cmp	r2, sl
    d94c:	d100      	bne.n	d950 <_dtoa_r+0x8ec>
    d94e:	e28a      	b.n	de66 <_dtoa_r+0xe02>
    d950:	0031      	movs	r1, r6
    d952:	2300      	movs	r3, #0
    d954:	220a      	movs	r2, #10
    d956:	0038      	movs	r0, r7
    d958:	f001 fb8e 	bl	f078 <__multadd>
    d95c:	2300      	movs	r3, #0
    d95e:	0006      	movs	r6, r0
    d960:	220a      	movs	r2, #10
    d962:	0029      	movs	r1, r5
    d964:	0038      	movs	r0, r7
    d966:	4545      	cmp	r5, r8
    d968:	d100      	bne.n	d96c <_dtoa_r+0x908>
    d96a:	e0e1      	b.n	db30 <_dtoa_r+0xacc>
    d96c:	f001 fb84 	bl	f078 <__multadd>
    d970:	4641      	mov	r1, r8
    d972:	0005      	movs	r5, r0
    d974:	2300      	movs	r3, #0
    d976:	220a      	movs	r2, #10
    d978:	0038      	movs	r0, r7
    d97a:	f001 fb7d 	bl	f078 <__multadd>
    d97e:	46a2      	mov	sl, r4
    d980:	4680      	mov	r8, r0
    d982:	e7a3      	b.n	d8cc <_dtoa_r+0x868>
    d984:	201c      	movs	r0, #28
    d986:	9b06      	ldr	r3, [sp, #24]
    d988:	469c      	mov	ip, r3
    d98a:	4484      	add	ip, r0
    d98c:	4663      	mov	r3, ip
    d98e:	9306      	str	r3, [sp, #24]
    d990:	9b08      	ldr	r3, [sp, #32]
    d992:	469c      	mov	ip, r3
    d994:	4484      	add	ip, r0
    d996:	4663      	mov	r3, ip
    d998:	9308      	str	r3, [sp, #32]
    d99a:	9b04      	ldr	r3, [sp, #16]
    d99c:	469c      	mov	ip, r3
    d99e:	4484      	add	ip, r0
    d9a0:	4663      	mov	r3, ip
    d9a2:	9304      	str	r3, [sp, #16]
    d9a4:	e754      	b.n	d850 <_dtoa_r+0x7ec>
    d9a6:	4649      	mov	r1, r9
    d9a8:	4658      	mov	r0, fp
    d9aa:	f001 fd67 	bl	f47c <__mcmp>
    d9ae:	2800      	cmp	r0, #0
    d9b0:	db00      	blt.n	d9b4 <_dtoa_r+0x950>
    d9b2:	e763      	b.n	d87c <_dtoa_r+0x818>
    d9b4:	9b03      	ldr	r3, [sp, #12]
    d9b6:	4659      	mov	r1, fp
    d9b8:	3b01      	subs	r3, #1
    d9ba:	9303      	str	r3, [sp, #12]
    d9bc:	220a      	movs	r2, #10
    d9be:	2300      	movs	r3, #0
    d9c0:	4650      	mov	r0, sl
    d9c2:	f001 fb59 	bl	f078 <__multadd>
    d9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9c8:	4683      	mov	fp, r0
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	d000      	beq.n	d9d0 <_dtoa_r+0x96c>
    d9ce:	e2ca      	b.n	df66 <_dtoa_r+0xf02>
    d9d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	dc00      	bgt.n	d9d8 <_dtoa_r+0x974>
    d9d6:	e2d8      	b.n	df8a <_dtoa_r+0xf26>
    d9d8:	9307      	str	r3, [sp, #28]
    d9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d9dc:	465d      	mov	r5, fp
    d9de:	2400      	movs	r4, #0
    d9e0:	9f07      	ldr	r7, [sp, #28]
    d9e2:	469b      	mov	fp, r3
    d9e4:	e006      	b.n	d9f4 <_dtoa_r+0x990>
    d9e6:	0029      	movs	r1, r5
    d9e8:	2300      	movs	r3, #0
    d9ea:	220a      	movs	r2, #10
    d9ec:	4650      	mov	r0, sl
    d9ee:	f001 fb43 	bl	f078 <__multadd>
    d9f2:	0005      	movs	r5, r0
    d9f4:	4649      	mov	r1, r9
    d9f6:	0028      	movs	r0, r5
    d9f8:	f7ff fa8a 	bl	cf10 <quorem>
    d9fc:	465b      	mov	r3, fp
    d9fe:	3030      	adds	r0, #48	; 0x30
    da00:	5518      	strb	r0, [r3, r4]
    da02:	3401      	adds	r4, #1
    da04:	42bc      	cmp	r4, r7
    da06:	dbee      	blt.n	d9e6 <_dtoa_r+0x982>
    da08:	46ab      	mov	fp, r5
    da0a:	0006      	movs	r6, r0
    da0c:	9c07      	ldr	r4, [sp, #28]
    da0e:	2c00      	cmp	r4, #0
    da10:	dc00      	bgt.n	da14 <_dtoa_r+0x9b0>
    da12:	e237      	b.n	de84 <_dtoa_r+0xe20>
    da14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da16:	2700      	movs	r7, #0
    da18:	469c      	mov	ip, r3
    da1a:	4464      	add	r4, ip
    da1c:	4659      	mov	r1, fp
    da1e:	2201      	movs	r2, #1
    da20:	4650      	mov	r0, sl
    da22:	f001 fccb 	bl	f3bc <__lshift>
    da26:	4649      	mov	r1, r9
    da28:	4683      	mov	fp, r0
    da2a:	f001 fd27 	bl	f47c <__mcmp>
    da2e:	2800      	cmp	r0, #0
    da30:	dc00      	bgt.n	da34 <_dtoa_r+0x9d0>
    da32:	e144      	b.n	dcbe <_dtoa_r+0xc5a>
    da34:	1e65      	subs	r5, r4, #1
    da36:	782b      	ldrb	r3, [r5, #0]
    da38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    da3a:	e006      	b.n	da4a <_dtoa_r+0x9e6>
    da3c:	4295      	cmp	r5, r2
    da3e:	d100      	bne.n	da42 <_dtoa_r+0x9de>
    da40:	e0b1      	b.n	dba6 <_dtoa_r+0xb42>
    da42:	3c02      	subs	r4, #2
    da44:	7823      	ldrb	r3, [r4, #0]
    da46:	002c      	movs	r4, r5
    da48:	3d01      	subs	r5, #1
    da4a:	2b39      	cmp	r3, #57	; 0x39
    da4c:	d0f6      	beq.n	da3c <_dtoa_r+0x9d8>
    da4e:	3301      	adds	r3, #1
    da50:	702b      	strb	r3, [r5, #0]
    da52:	4649      	mov	r1, r9
    da54:	4650      	mov	r0, sl
    da56:	f001 fb05 	bl	f064 <_Bfree>
    da5a:	4643      	mov	r3, r8
    da5c:	2b00      	cmp	r3, #0
    da5e:	d100      	bne.n	da62 <_dtoa_r+0x9fe>
    da60:	e52f      	b.n	d4c2 <_dtoa_r+0x45e>
    da62:	2f00      	cmp	r7, #0
    da64:	d005      	beq.n	da72 <_dtoa_r+0xa0e>
    da66:	4547      	cmp	r7, r8
    da68:	d003      	beq.n	da72 <_dtoa_r+0xa0e>
    da6a:	0039      	movs	r1, r7
    da6c:	4650      	mov	r0, sl
    da6e:	f001 faf9 	bl	f064 <_Bfree>
    da72:	4641      	mov	r1, r8
    da74:	4650      	mov	r0, sl
    da76:	f001 faf5 	bl	f064 <_Bfree>
    da7a:	e522      	b.n	d4c2 <_dtoa_r+0x45e>
    da7c:	0013      	movs	r3, r2
    da7e:	e675      	b.n	d76c <_dtoa_r+0x708>
    da80:	2e00      	cmp	r6, #0
    da82:	d000      	beq.n	da86 <_dtoa_r+0xa22>
    da84:	e6ab      	b.n	d7de <_dtoa_r+0x77a>
    da86:	033b      	lsls	r3, r7, #12
    da88:	2400      	movs	r4, #0
    da8a:	2b00      	cmp	r3, #0
    da8c:	d000      	beq.n	da90 <_dtoa_r+0xa2c>
    da8e:	e6bf      	b.n	d810 <_dtoa_r+0x7ac>
    da90:	4bba      	ldr	r3, [pc, #744]	; (dd7c <_dtoa_r+0xd18>)
    da92:	423b      	tst	r3, r7
    da94:	d100      	bne.n	da98 <_dtoa_r+0xa34>
    da96:	e6bb      	b.n	d810 <_dtoa_r+0x7ac>
    da98:	9b06      	ldr	r3, [sp, #24]
    da9a:	3401      	adds	r4, #1
    da9c:	3301      	adds	r3, #1
    da9e:	9306      	str	r3, [sp, #24]
    daa0:	9b04      	ldr	r3, [sp, #16]
    daa2:	3301      	adds	r3, #1
    daa4:	9304      	str	r3, [sp, #16]
    daa6:	e6b3      	b.n	d810 <_dtoa_r+0x7ac>
    daa8:	2301      	movs	r3, #1
    daaa:	930b      	str	r3, [sp, #44]	; 0x2c
    daac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    daae:	2b00      	cmp	r3, #0
    dab0:	dc00      	bgt.n	dab4 <_dtoa_r+0xa50>
    dab2:	e0d1      	b.n	dc58 <_dtoa_r+0xbf4>
    dab4:	001d      	movs	r5, r3
    dab6:	4698      	mov	r8, r3
    dab8:	930e      	str	r3, [sp, #56]	; 0x38
    daba:	9307      	str	r3, [sp, #28]
    dabc:	f7ff fbc8 	bl	d250 <_dtoa_r+0x1ec>
    dac0:	9b07      	ldr	r3, [sp, #28]
    dac2:	2b00      	cmp	r3, #0
    dac4:	dd00      	ble.n	dac8 <_dtoa_r+0xa64>
    dac6:	e553      	b.n	d570 <_dtoa_r+0x50c>
    dac8:	d000      	beq.n	dacc <_dtoa_r+0xa68>
    daca:	e0ad      	b.n	dc28 <_dtoa_r+0xbc4>
    dacc:	9804      	ldr	r0, [sp, #16]
    dace:	9905      	ldr	r1, [sp, #20]
    dad0:	2200      	movs	r2, #0
    dad2:	4bab      	ldr	r3, [pc, #684]	; (dd80 <_dtoa_r+0xd1c>)
    dad4:	f7fc fd72 	bl	a5bc <__aeabi_dmul>
    dad8:	003b      	movs	r3, r7
    dada:	0032      	movs	r2, r6
    dadc:	f7fa fdd2 	bl	8684 <__aeabi_dcmpge>
    dae0:	2300      	movs	r3, #0
    dae2:	4699      	mov	r9, r3
    dae4:	4698      	mov	r8, r3
    dae6:	2800      	cmp	r0, #0
    dae8:	d055      	beq.n	db96 <_dtoa_r+0xb32>
    daea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    daec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    daee:	43db      	mvns	r3, r3
    daf0:	9303      	str	r3, [sp, #12]
    daf2:	4649      	mov	r1, r9
    daf4:	4650      	mov	r0, sl
    daf6:	f001 fab5 	bl	f064 <_Bfree>
    dafa:	4643      	mov	r3, r8
    dafc:	2b00      	cmp	r3, #0
    dafe:	d100      	bne.n	db02 <_dtoa_r+0xa9e>
    db00:	e4df      	b.n	d4c2 <_dtoa_r+0x45e>
    db02:	e7b6      	b.n	da72 <_dtoa_r+0xa0e>
    db04:	464a      	mov	r2, r9
    db06:	4659      	mov	r1, fp
    db08:	4650      	mov	r0, sl
    db0a:	f001 fbf7 	bl	f2fc <__pow5mult>
    db0e:	4683      	mov	fp, r0
    db10:	e653      	b.n	d7ba <_dtoa_r+0x756>
    db12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    db14:	2a00      	cmp	r2, #0
    db16:	d100      	bne.n	db1a <_dtoa_r+0xab6>
    db18:	e1b6      	b.n	de88 <_dtoa_r+0xe24>
    db1a:	4a9a      	ldr	r2, [pc, #616]	; (dd84 <_dtoa_r+0xd20>)
    db1c:	464c      	mov	r4, r9
    db1e:	4694      	mov	ip, r2
    db20:	9a06      	ldr	r2, [sp, #24]
    db22:	4463      	add	r3, ip
    db24:	9208      	str	r2, [sp, #32]
    db26:	e5d5      	b.n	d6d4 <_dtoa_r+0x670>
    db28:	2e00      	cmp	r6, #0
    db2a:	d000      	beq.n	db2e <_dtoa_r+0xaca>
    db2c:	e670      	b.n	d810 <_dtoa_r+0x7ac>
    db2e:	e7aa      	b.n	da86 <_dtoa_r+0xa22>
    db30:	f001 faa2 	bl	f078 <__multadd>
    db34:	46a2      	mov	sl, r4
    db36:	0005      	movs	r5, r0
    db38:	4680      	mov	r8, r0
    db3a:	e6c7      	b.n	d8cc <_dtoa_r+0x868>
    db3c:	2301      	movs	r3, #1
    db3e:	469b      	mov	fp, r3
    db40:	e6e2      	b.n	d908 <_dtoa_r+0x8a4>
    db42:	2300      	movs	r3, #0
    db44:	930b      	str	r3, [sp, #44]	; 0x2c
    db46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    db48:	2b02      	cmp	r3, #2
    db4a:	d0af      	beq.n	daac <_dtoa_r+0xa48>
    db4c:	2400      	movs	r4, #0
    db4e:	4653      	mov	r3, sl
    db50:	0021      	movs	r1, r4
    db52:	645c      	str	r4, [r3, #68]	; 0x44
    db54:	4650      	mov	r0, sl
    db56:	f001 fa5d 	bl	f014 <_Balloc>
    db5a:	4653      	mov	r3, sl
    db5c:	6418      	str	r0, [r3, #64]	; 0x40
    db5e:	2301      	movs	r3, #1
    db60:	425b      	negs	r3, r3
    db62:	9307      	str	r3, [sp, #28]
    db64:	930e      	str	r3, [sp, #56]	; 0x38
    db66:	3302      	adds	r3, #2
    db68:	900a      	str	r0, [sp, #40]	; 0x28
    db6a:	9423      	str	r4, [sp, #140]	; 0x8c
    db6c:	930b      	str	r3, [sp, #44]	; 0x2c
    db6e:	e4ec      	b.n	d54a <_dtoa_r+0x4e6>
    db70:	9b22      	ldr	r3, [sp, #136]	; 0x88
    db72:	2b02      	cmp	r3, #2
    db74:	dc00      	bgt.n	db78 <_dtoa_r+0xb14>
    db76:	e685      	b.n	d884 <_dtoa_r+0x820>
    db78:	9b07      	ldr	r3, [sp, #28]
    db7a:	2b00      	cmp	r3, #0
    db7c:	d1b5      	bne.n	daea <_dtoa_r+0xa86>
    db7e:	4649      	mov	r1, r9
    db80:	2205      	movs	r2, #5
    db82:	4650      	mov	r0, sl
    db84:	f001 fa78 	bl	f078 <__multadd>
    db88:	4681      	mov	r9, r0
    db8a:	0001      	movs	r1, r0
    db8c:	4658      	mov	r0, fp
    db8e:	f001 fc75 	bl	f47c <__mcmp>
    db92:	2800      	cmp	r0, #0
    db94:	dda9      	ble.n	daea <_dtoa_r+0xa86>
    db96:	2331      	movs	r3, #49	; 0x31
    db98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    db9a:	7013      	strb	r3, [r2, #0]
    db9c:	9b03      	ldr	r3, [sp, #12]
    db9e:	1c54      	adds	r4, r2, #1
    dba0:	3301      	adds	r3, #1
    dba2:	9303      	str	r3, [sp, #12]
    dba4:	e7a5      	b.n	daf2 <_dtoa_r+0xa8e>
    dba6:	9b03      	ldr	r3, [sp, #12]
    dba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dbaa:	3301      	adds	r3, #1
    dbac:	9303      	str	r3, [sp, #12]
    dbae:	2331      	movs	r3, #49	; 0x31
    dbb0:	7013      	strb	r3, [r2, #0]
    dbb2:	e74e      	b.n	da52 <_dtoa_r+0x9ee>
    dbb4:	2300      	movs	r3, #0
    dbb6:	930b      	str	r3, [sp, #44]	; 0x2c
    dbb8:	f7ff fb3d 	bl	d236 <_dtoa_r+0x1d2>
    dbbc:	9b06      	ldr	r3, [sp, #24]
    dbbe:	465c      	mov	r4, fp
    dbc0:	469b      	mov	fp, r3
    dbc2:	9b07      	ldr	r3, [sp, #28]
    dbc4:	469a      	mov	sl, r3
    dbc6:	e47c      	b.n	d4c2 <_dtoa_r+0x45e>
    dbc8:	4640      	mov	r0, r8
    dbca:	f7fd fae1 	bl	b190 <__aeabi_i2d>
    dbce:	0032      	movs	r2, r6
    dbd0:	003b      	movs	r3, r7
    dbd2:	f7fc fcf3 	bl	a5bc <__aeabi_dmul>
    dbd6:	2200      	movs	r2, #0
    dbd8:	4b6b      	ldr	r3, [pc, #428]	; (dd88 <_dtoa_r+0xd24>)
    dbda:	f7fb fdab 	bl	9734 <__aeabi_dadd>
    dbde:	4a6b      	ldr	r2, [pc, #428]	; (dd8c <_dtoa_r+0xd28>)
    dbe0:	000b      	movs	r3, r1
    dbe2:	4694      	mov	ip, r2
    dbe4:	4463      	add	r3, ip
    dbe6:	9008      	str	r0, [sp, #32]
    dbe8:	9109      	str	r1, [sp, #36]	; 0x24
    dbea:	9309      	str	r3, [sp, #36]	; 0x24
    dbec:	2200      	movs	r2, #0
    dbee:	4b64      	ldr	r3, [pc, #400]	; (dd80 <_dtoa_r+0xd1c>)
    dbf0:	0030      	movs	r0, r6
    dbf2:	0039      	movs	r1, r7
    dbf4:	f7fc ff62 	bl	aabc <__aeabi_dsub>
    dbf8:	9e08      	ldr	r6, [sp, #32]
    dbfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    dbfc:	0032      	movs	r2, r6
    dbfe:	003b      	movs	r3, r7
    dc00:	0004      	movs	r4, r0
    dc02:	000d      	movs	r5, r1
    dc04:	f7fa fd34 	bl	8670 <__aeabi_dcmpgt>
    dc08:	2800      	cmp	r0, #0
    dc0a:	d000      	beq.n	dc0e <_dtoa_r+0xbaa>
    dc0c:	e0b2      	b.n	dd74 <_dtoa_r+0xd10>
    dc0e:	2080      	movs	r0, #128	; 0x80
    dc10:	0600      	lsls	r0, r0, #24
    dc12:	4684      	mov	ip, r0
    dc14:	0039      	movs	r1, r7
    dc16:	4461      	add	r1, ip
    dc18:	000b      	movs	r3, r1
    dc1a:	0032      	movs	r2, r6
    dc1c:	0020      	movs	r0, r4
    dc1e:	0029      	movs	r1, r5
    dc20:	f7fa fd12 	bl	8648 <__aeabi_dcmplt>
    dc24:	2800      	cmp	r0, #0
    dc26:	d057      	beq.n	dcd8 <_dtoa_r+0xc74>
    dc28:	2300      	movs	r3, #0
    dc2a:	4699      	mov	r9, r3
    dc2c:	4698      	mov	r8, r3
    dc2e:	e75c      	b.n	daea <_dtoa_r+0xa86>
    dc30:	980a      	ldr	r0, [sp, #40]	; 0x28
    dc32:	f7ff fa4c 	bl	d0ce <_dtoa_r+0x6a>
    dc36:	1ae2      	subs	r2, r4, r3
    dc38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc3a:	46a1      	mov	r9, r4
    dc3c:	469c      	mov	ip, r3
    dc3e:	4494      	add	ip, r2
    dc40:	4663      	mov	r3, ip
    dc42:	2400      	movs	r4, #0
    dc44:	930d      	str	r3, [sp, #52]	; 0x34
    dc46:	e53e      	b.n	d6c6 <_dtoa_r+0x662>
    dc48:	9a10      	ldr	r2, [sp, #64]	; 0x40
    dc4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dc4c:	9208      	str	r2, [sp, #32]
    dc4e:	9309      	str	r3, [sp, #36]	; 0x24
    dc50:	2302      	movs	r3, #2
    dc52:	4698      	mov	r8, r3
    dc54:	f7ff fb3a 	bl	d2cc <_dtoa_r+0x268>
    dc58:	2300      	movs	r3, #0
    dc5a:	4652      	mov	r2, sl
    dc5c:	2100      	movs	r1, #0
    dc5e:	6453      	str	r3, [r2, #68]	; 0x44
    dc60:	4650      	mov	r0, sl
    dc62:	f001 f9d7 	bl	f014 <_Balloc>
    dc66:	4653      	mov	r3, sl
    dc68:	6418      	str	r0, [r3, #64]	; 0x40
    dc6a:	2301      	movs	r3, #1
    dc6c:	900a      	str	r0, [sp, #40]	; 0x28
    dc6e:	9307      	str	r3, [sp, #28]
    dc70:	9323      	str	r3, [sp, #140]	; 0x8c
    dc72:	930e      	str	r3, [sp, #56]	; 0x38
    dc74:	f7ff fb07 	bl	d286 <_dtoa_r+0x222>
    dc78:	4643      	mov	r3, r8
    dc7a:	930c      	str	r3, [sp, #48]	; 0x30
    dc7c:	465b      	mov	r3, fp
    dc7e:	9a06      	ldr	r2, [sp, #24]
    dc80:	46a8      	mov	r8, r5
    dc82:	46b3      	mov	fp, r6
    dc84:	4655      	mov	r5, sl
    dc86:	9e04      	ldr	r6, [sp, #16]
    dc88:	4691      	mov	r9, r2
    dc8a:	46ba      	mov	sl, r7
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	dd10      	ble.n	dcb2 <_dtoa_r+0xc4e>
    dc90:	4659      	mov	r1, fp
    dc92:	2201      	movs	r2, #1
    dc94:	0038      	movs	r0, r7
    dc96:	f001 fb91 	bl	f3bc <__lshift>
    dc9a:	4649      	mov	r1, r9
    dc9c:	4683      	mov	fp, r0
    dc9e:	f001 fbed 	bl	f47c <__mcmp>
    dca2:	2800      	cmp	r0, #0
    dca4:	dc00      	bgt.n	dca8 <_dtoa_r+0xc44>
    dca6:	e157      	b.n	df58 <_dtoa_r+0xef4>
    dca8:	2e39      	cmp	r6, #57	; 0x39
    dcaa:	d100      	bne.n	dcae <_dtoa_r+0xc4a>
    dcac:	e122      	b.n	def4 <_dtoa_r+0xe90>
    dcae:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    dcb0:	3631      	adds	r6, #49	; 0x31
    dcb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dcb4:	4647      	mov	r7, r8
    dcb6:	1c6c      	adds	r4, r5, #1
    dcb8:	702e      	strb	r6, [r5, #0]
    dcba:	4698      	mov	r8, r3
    dcbc:	e6c9      	b.n	da52 <_dtoa_r+0x9ee>
    dcbe:	2800      	cmp	r0, #0
    dcc0:	d103      	bne.n	dcca <_dtoa_r+0xc66>
    dcc2:	07f3      	lsls	r3, r6, #31
    dcc4:	d501      	bpl.n	dcca <_dtoa_r+0xc66>
    dcc6:	e6b5      	b.n	da34 <_dtoa_r+0x9d0>
    dcc8:	001c      	movs	r4, r3
    dcca:	1e63      	subs	r3, r4, #1
    dccc:	781a      	ldrb	r2, [r3, #0]
    dcce:	2a30      	cmp	r2, #48	; 0x30
    dcd0:	d0fa      	beq.n	dcc8 <_dtoa_r+0xc64>
    dcd2:	e6be      	b.n	da52 <_dtoa_r+0x9ee>
    dcd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dcd6:	4699      	mov	r9, r3
    dcd8:	9e10      	ldr	r6, [sp, #64]	; 0x40
    dcda:	9f11      	ldr	r7, [sp, #68]	; 0x44
    dcdc:	e435      	b.n	d54a <_dtoa_r+0x4e6>
    dcde:	2501      	movs	r5, #1
    dce0:	f7ff fab4 	bl	d24c <_dtoa_r+0x1e8>
    dce4:	9b03      	ldr	r3, [sp, #12]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d100      	bne.n	dcec <_dtoa_r+0xc88>
    dcea:	e0d4      	b.n	de96 <_dtoa_r+0xe32>
    dcec:	9810      	ldr	r0, [sp, #64]	; 0x40
    dcee:	9911      	ldr	r1, [sp, #68]	; 0x44
    dcf0:	425c      	negs	r4, r3
    dcf2:	230f      	movs	r3, #15
    dcf4:	4a26      	ldr	r2, [pc, #152]	; (dd90 <_dtoa_r+0xd2c>)
    dcf6:	4023      	ands	r3, r4
    dcf8:	00db      	lsls	r3, r3, #3
    dcfa:	18d3      	adds	r3, r2, r3
    dcfc:	681a      	ldr	r2, [r3, #0]
    dcfe:	685b      	ldr	r3, [r3, #4]
    dd00:	f7fc fc5c 	bl	a5bc <__aeabi_dmul>
    dd04:	1124      	asrs	r4, r4, #4
    dd06:	0006      	movs	r6, r0
    dd08:	000f      	movs	r7, r1
    dd0a:	2c00      	cmp	r4, #0
    dd0c:	d100      	bne.n	dd10 <_dtoa_r+0xcac>
    dd0e:	e149      	b.n	dfa4 <_dtoa_r+0xf40>
    dd10:	2302      	movs	r3, #2
    dd12:	4698      	mov	r8, r3
    dd14:	4d1f      	ldr	r5, [pc, #124]	; (dd94 <_dtoa_r+0xd30>)
    dd16:	2301      	movs	r3, #1
    dd18:	4223      	tst	r3, r4
    dd1a:	d009      	beq.n	dd30 <_dtoa_r+0xccc>
    dd1c:	469c      	mov	ip, r3
    dd1e:	682a      	ldr	r2, [r5, #0]
    dd20:	686b      	ldr	r3, [r5, #4]
    dd22:	0030      	movs	r0, r6
    dd24:	0039      	movs	r1, r7
    dd26:	44e0      	add	r8, ip
    dd28:	f7fc fc48 	bl	a5bc <__aeabi_dmul>
    dd2c:	0006      	movs	r6, r0
    dd2e:	000f      	movs	r7, r1
    dd30:	1064      	asrs	r4, r4, #1
    dd32:	3508      	adds	r5, #8
    dd34:	2c00      	cmp	r4, #0
    dd36:	d1ee      	bne.n	dd16 <_dtoa_r+0xcb2>
    dd38:	f7ff fae4 	bl	d304 <_dtoa_r+0x2a0>
    dd3c:	9b03      	ldr	r3, [sp, #12]
    dd3e:	2730      	movs	r7, #48	; 0x30
    dd40:	3301      	adds	r3, #1
    dd42:	9303      	str	r3, [sp, #12]
    dd44:	2330      	movs	r3, #48	; 0x30
    dd46:	702b      	strb	r3, [r5, #0]
    dd48:	e4ac      	b.n	d6a4 <_dtoa_r+0x640>
    dd4a:	6859      	ldr	r1, [r3, #4]
    dd4c:	4650      	mov	r0, sl
    dd4e:	f001 f961 	bl	f014 <_Balloc>
    dd52:	4643      	mov	r3, r8
    dd54:	4641      	mov	r1, r8
    dd56:	0004      	movs	r4, r0
    dd58:	691b      	ldr	r3, [r3, #16]
    dd5a:	310c      	adds	r1, #12
    dd5c:	1c9a      	adds	r2, r3, #2
    dd5e:	0092      	lsls	r2, r2, #2
    dd60:	300c      	adds	r0, #12
    dd62:	f7fd fb5d 	bl	b420 <memcpy>
    dd66:	2201      	movs	r2, #1
    dd68:	0021      	movs	r1, r4
    dd6a:	4650      	mov	r0, sl
    dd6c:	f001 fb26 	bl	f3bc <__lshift>
    dd70:	900c      	str	r0, [sp, #48]	; 0x30
    dd72:	e599      	b.n	d8a8 <_dtoa_r+0x844>
    dd74:	2300      	movs	r3, #0
    dd76:	4699      	mov	r9, r3
    dd78:	4698      	mov	r8, r3
    dd7a:	e70c      	b.n	db96 <_dtoa_r+0xb32>
    dd7c:	7ff00000 	.word	0x7ff00000
    dd80:	40140000 	.word	0x40140000
    dd84:	00000433 	.word	0x00000433
    dd88:	401c0000 	.word	0x401c0000
    dd8c:	fcc00000 	.word	0xfcc00000
    dd90:	000108f8 	.word	0x000108f8
    dd94:	000108d0 	.word	0x000108d0
    dd98:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dd9a:	498f      	ldr	r1, [pc, #572]	; (dfd8 <_dtoa_r+0xf74>)
    dd9c:	3b01      	subs	r3, #1
    dd9e:	00db      	lsls	r3, r3, #3
    dda0:	18c9      	adds	r1, r1, r3
    dda2:	6808      	ldr	r0, [r1, #0]
    dda4:	6849      	ldr	r1, [r1, #4]
    dda6:	9a08      	ldr	r2, [sp, #32]
    dda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddaa:	f7fc fc07 	bl	a5bc <__aeabi_dmul>
    ddae:	9014      	str	r0, [sp, #80]	; 0x50
    ddb0:	9115      	str	r1, [sp, #84]	; 0x54
    ddb2:	0039      	movs	r1, r7
    ddb4:	0030      	movs	r0, r6
    ddb6:	f7fd f9b7 	bl	b128 <__aeabi_d2iz>
    ddba:	0005      	movs	r5, r0
    ddbc:	f7fd f9e8 	bl	b190 <__aeabi_i2d>
    ddc0:	0002      	movs	r2, r0
    ddc2:	000b      	movs	r3, r1
    ddc4:	0030      	movs	r0, r6
    ddc6:	0039      	movs	r1, r7
    ddc8:	f7fc fe78 	bl	aabc <__aeabi_dsub>
    ddcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ddce:	9008      	str	r0, [sp, #32]
    ddd0:	9109      	str	r1, [sp, #36]	; 0x24
    ddd2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ddd4:	001a      	movs	r2, r3
    ddd6:	468c      	mov	ip, r1
    ddd8:	3530      	adds	r5, #48	; 0x30
    ddda:	4462      	add	r2, ip
    dddc:	1c4c      	adds	r4, r1, #1
    ddde:	700d      	strb	r5, [r1, #0]
    dde0:	4690      	mov	r8, r2
    dde2:	2b01      	cmp	r3, #1
    dde4:	d01b      	beq.n	de1e <_dtoa_r+0xdba>
    dde6:	9808      	ldr	r0, [sp, #32]
    dde8:	9909      	ldr	r1, [sp, #36]	; 0x24
    ddea:	0025      	movs	r5, r4
    ddec:	2200      	movs	r2, #0
    ddee:	4b7b      	ldr	r3, [pc, #492]	; (dfdc <_dtoa_r+0xf78>)
    ddf0:	f7fc fbe4 	bl	a5bc <__aeabi_dmul>
    ddf4:	000f      	movs	r7, r1
    ddf6:	0006      	movs	r6, r0
    ddf8:	f7fd f996 	bl	b128 <__aeabi_d2iz>
    ddfc:	0004      	movs	r4, r0
    ddfe:	f7fd f9c7 	bl	b190 <__aeabi_i2d>
    de02:	3430      	adds	r4, #48	; 0x30
    de04:	0002      	movs	r2, r0
    de06:	000b      	movs	r3, r1
    de08:	0030      	movs	r0, r6
    de0a:	0039      	movs	r1, r7
    de0c:	f7fc fe56 	bl	aabc <__aeabi_dsub>
    de10:	702c      	strb	r4, [r5, #0]
    de12:	3501      	adds	r5, #1
    de14:	45a8      	cmp	r8, r5
    de16:	d1e9      	bne.n	ddec <_dtoa_r+0xd88>
    de18:	4644      	mov	r4, r8
    de1a:	9008      	str	r0, [sp, #32]
    de1c:	9109      	str	r1, [sp, #36]	; 0x24
    de1e:	9814      	ldr	r0, [sp, #80]	; 0x50
    de20:	9915      	ldr	r1, [sp, #84]	; 0x54
    de22:	2200      	movs	r2, #0
    de24:	4b6e      	ldr	r3, [pc, #440]	; (dfe0 <_dtoa_r+0xf7c>)
    de26:	f7fb fc85 	bl	9734 <__aeabi_dadd>
    de2a:	9a08      	ldr	r2, [sp, #32]
    de2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de2e:	f7fa fc0b 	bl	8648 <__aeabi_dcmplt>
    de32:	2800      	cmp	r0, #0
    de34:	d067      	beq.n	df06 <_dtoa_r+0xea2>
    de36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    de38:	1e65      	subs	r5, r4, #1
    de3a:	9303      	str	r3, [sp, #12]
    de3c:	782f      	ldrb	r7, [r5, #0]
    de3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    de40:	e42e      	b.n	d6a0 <_dtoa_r+0x63c>
    de42:	4643      	mov	r3, r8
    de44:	46b3      	mov	fp, r6
    de46:	930c      	str	r3, [sp, #48]	; 0x30
    de48:	9e04      	ldr	r6, [sp, #16]
    de4a:	9b06      	ldr	r3, [sp, #24]
    de4c:	46a8      	mov	r8, r5
    de4e:	4699      	mov	r9, r3
    de50:	4655      	mov	r5, sl
    de52:	46ba      	mov	sl, r7
    de54:	2e39      	cmp	r6, #57	; 0x39
    de56:	d04d      	beq.n	def4 <_dtoa_r+0xe90>
    de58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de5a:	3601      	adds	r6, #1
    de5c:	4647      	mov	r7, r8
    de5e:	1c6c      	adds	r4, r5, #1
    de60:	702e      	strb	r6, [r5, #0]
    de62:	4698      	mov	r8, r3
    de64:	e5f5      	b.n	da52 <_dtoa_r+0x9ee>
    de66:	4642      	mov	r2, r8
    de68:	9b06      	ldr	r3, [sp, #24]
    de6a:	46b3      	mov	fp, r6
    de6c:	46ba      	mov	sl, r7
    de6e:	9e04      	ldr	r6, [sp, #16]
    de70:	4699      	mov	r9, r3
    de72:	002f      	movs	r7, r5
    de74:	4690      	mov	r8, r2
    de76:	e5d1      	b.n	da1c <_dtoa_r+0x9b8>
    de78:	9b06      	ldr	r3, [sp, #24]
    de7a:	9a07      	ldr	r2, [sp, #28]
    de7c:	1a9b      	subs	r3, r3, r2
    de7e:	9308      	str	r3, [sp, #32]
    de80:	2300      	movs	r3, #0
    de82:	e427      	b.n	d6d4 <_dtoa_r+0x670>
    de84:	2401      	movs	r4, #1
    de86:	e5c5      	b.n	da14 <_dtoa_r+0x9b0>
    de88:	2336      	movs	r3, #54	; 0x36
    de8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    de8c:	464c      	mov	r4, r9
    de8e:	1a9b      	subs	r3, r3, r2
    de90:	9a06      	ldr	r2, [sp, #24]
    de92:	9208      	str	r2, [sp, #32]
    de94:	e41e      	b.n	d6d4 <_dtoa_r+0x670>
    de96:	2302      	movs	r3, #2
    de98:	9e10      	ldr	r6, [sp, #64]	; 0x40
    de9a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    de9c:	4698      	mov	r8, r3
    de9e:	f7ff fa31 	bl	d304 <_dtoa_r+0x2a0>
    dea2:	9b07      	ldr	r3, [sp, #28]
    dea4:	2b00      	cmp	r3, #0
    dea6:	d100      	bne.n	deaa <_dtoa_r+0xe46>
    dea8:	e68e      	b.n	dbc8 <_dtoa_r+0xb64>
    deaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    deac:	2c00      	cmp	r4, #0
    deae:	dc00      	bgt.n	deb2 <_dtoa_r+0xe4e>
    deb0:	e712      	b.n	dcd8 <_dtoa_r+0xc74>
    deb2:	9b03      	ldr	r3, [sp, #12]
    deb4:	2200      	movs	r2, #0
    deb6:	3b01      	subs	r3, #1
    deb8:	9313      	str	r3, [sp, #76]	; 0x4c
    deba:	0030      	movs	r0, r6
    debc:	4b47      	ldr	r3, [pc, #284]	; (dfdc <_dtoa_r+0xf78>)
    debe:	0039      	movs	r1, r7
    dec0:	f7fc fb7c 	bl	a5bc <__aeabi_dmul>
    dec4:	0006      	movs	r6, r0
    dec6:	4640      	mov	r0, r8
    dec8:	000f      	movs	r7, r1
    deca:	3001      	adds	r0, #1
    decc:	f7fd f960 	bl	b190 <__aeabi_i2d>
    ded0:	0032      	movs	r2, r6
    ded2:	003b      	movs	r3, r7
    ded4:	f7fc fb72 	bl	a5bc <__aeabi_dmul>
    ded8:	2200      	movs	r2, #0
    deda:	4b42      	ldr	r3, [pc, #264]	; (dfe4 <_dtoa_r+0xf80>)
    dedc:	f7fb fc2a 	bl	9734 <__aeabi_dadd>
    dee0:	4a41      	ldr	r2, [pc, #260]	; (dfe8 <_dtoa_r+0xf84>)
    dee2:	000b      	movs	r3, r1
    dee4:	4694      	mov	ip, r2
    dee6:	4463      	add	r3, ip
    dee8:	9008      	str	r0, [sp, #32]
    deea:	9109      	str	r1, [sp, #36]	; 0x24
    deec:	9412      	str	r4, [sp, #72]	; 0x48
    deee:	9309      	str	r3, [sp, #36]	; 0x24
    def0:	f7ff fa30 	bl	d354 <_dtoa_r+0x2f0>
    def4:	2339      	movs	r3, #57	; 0x39
    def6:	702b      	strb	r3, [r5, #0]
    def8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    defa:	4647      	mov	r7, r8
    defc:	1c6c      	adds	r4, r5, #1
    defe:	4698      	mov	r8, r3
    df00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    df02:	2339      	movs	r3, #57	; 0x39
    df04:	e5a1      	b.n	da4a <_dtoa_r+0x9e6>
    df06:	9a14      	ldr	r2, [sp, #80]	; 0x50
    df08:	9b15      	ldr	r3, [sp, #84]	; 0x54
    df0a:	2000      	movs	r0, #0
    df0c:	4934      	ldr	r1, [pc, #208]	; (dfe0 <_dtoa_r+0xf7c>)
    df0e:	f7fc fdd5 	bl	aabc <__aeabi_dsub>
    df12:	9a08      	ldr	r2, [sp, #32]
    df14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df16:	f7fa fbab 	bl	8670 <__aeabi_dcmpgt>
    df1a:	2800      	cmp	r0, #0
    df1c:	d101      	bne.n	df22 <_dtoa_r+0xebe>
    df1e:	e6db      	b.n	dcd8 <_dtoa_r+0xc74>
    df20:	001c      	movs	r4, r3
    df22:	1e63      	subs	r3, r4, #1
    df24:	781a      	ldrb	r2, [r3, #0]
    df26:	2a30      	cmp	r2, #48	; 0x30
    df28:	d0fa      	beq.n	df20 <_dtoa_r+0xebc>
    df2a:	f7ff fac8 	bl	d4be <_dtoa_r+0x45a>
    df2e:	4643      	mov	r3, r8
    df30:	46b3      	mov	fp, r6
    df32:	930c      	str	r3, [sp, #48]	; 0x30
    df34:	9e04      	ldr	r6, [sp, #16]
    df36:	9b06      	ldr	r3, [sp, #24]
    df38:	46a8      	mov	r8, r5
    df3a:	4699      	mov	r9, r3
    df3c:	4655      	mov	r5, sl
    df3e:	46ba      	mov	sl, r7
    df40:	2e39      	cmp	r6, #57	; 0x39
    df42:	d0d7      	beq.n	def4 <_dtoa_r+0xe90>
    df44:	2c00      	cmp	r4, #0
    df46:	dd00      	ble.n	df4a <_dtoa_r+0xee6>
    df48:	e6b1      	b.n	dcae <_dtoa_r+0xc4a>
    df4a:	e6b2      	b.n	dcb2 <_dtoa_r+0xc4e>
    df4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    df4e:	464d      	mov	r5, r9
    df50:	9203      	str	r2, [sp, #12]
    df52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df54:	f7ff fba4 	bl	d6a0 <_dtoa_r+0x63c>
    df58:	2800      	cmp	r0, #0
    df5a:	d000      	beq.n	df5e <_dtoa_r+0xefa>
    df5c:	e6a9      	b.n	dcb2 <_dtoa_r+0xc4e>
    df5e:	07f3      	lsls	r3, r6, #31
    df60:	d400      	bmi.n	df64 <_dtoa_r+0xf00>
    df62:	e6a6      	b.n	dcb2 <_dtoa_r+0xc4e>
    df64:	e6a0      	b.n	dca8 <_dtoa_r+0xc44>
    df66:	2300      	movs	r3, #0
    df68:	4641      	mov	r1, r8
    df6a:	220a      	movs	r2, #10
    df6c:	4650      	mov	r0, sl
    df6e:	f001 f883 	bl	f078 <__multadd>
    df72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df74:	4680      	mov	r8, r0
    df76:	2b00      	cmp	r3, #0
    df78:	dd01      	ble.n	df7e <_dtoa_r+0xf1a>
    df7a:	9307      	str	r3, [sp, #28]
    df7c:	e486      	b.n	d88c <_dtoa_r+0x828>
    df7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df80:	2b02      	cmp	r3, #2
    df82:	dc1f      	bgt.n	dfc4 <_dtoa_r+0xf60>
    df84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df86:	9307      	str	r3, [sp, #28]
    df88:	e480      	b.n	d88c <_dtoa_r+0x828>
    df8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df8c:	2b02      	cmp	r3, #2
    df8e:	dc19      	bgt.n	dfc4 <_dtoa_r+0xf60>
    df90:	4649      	mov	r1, r9
    df92:	f7fe ffbd 	bl	cf10 <quorem>
    df96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df98:	3030      	adds	r0, #48	; 0x30
    df9a:	7018      	strb	r0, [r3, #0]
    df9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df9e:	0006      	movs	r6, r0
    dfa0:	9307      	str	r3, [sp, #28]
    dfa2:	e533      	b.n	da0c <_dtoa_r+0x9a8>
    dfa4:	2302      	movs	r3, #2
    dfa6:	4698      	mov	r8, r3
    dfa8:	f7ff f9ac 	bl	d304 <_dtoa_r+0x2a0>
    dfac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dfae:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dfb0:	9303      	str	r3, [sp, #12]
    dfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfb4:	001d      	movs	r5, r3
    dfb6:	f7ff fb73 	bl	d6a0 <_dtoa_r+0x63c>
    dfba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dfbc:	9c14      	ldr	r4, [sp, #80]	; 0x50
    dfbe:	9303      	str	r3, [sp, #12]
    dfc0:	f7ff fa7f 	bl	d4c2 <_dtoa_r+0x45e>
    dfc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dfc6:	9307      	str	r3, [sp, #28]
    dfc8:	e5d6      	b.n	db78 <_dtoa_r+0xb14>
    dfca:	2b04      	cmp	r3, #4
    dfcc:	d100      	bne.n	dfd0 <_dtoa_r+0xf6c>
    dfce:	e43f      	b.n	d850 <_dtoa_r+0x7ec>
    dfd0:	233c      	movs	r3, #60	; 0x3c
    dfd2:	1a18      	subs	r0, r3, r0
    dfd4:	e4d7      	b.n	d986 <_dtoa_r+0x922>
    dfd6:	46c0      	nop			; (mov r8, r8)
    dfd8:	000108f8 	.word	0x000108f8
    dfdc:	40240000 	.word	0x40240000
    dfe0:	3fe00000 	.word	0x3fe00000
    dfe4:	401c0000 	.word	0x401c0000
    dfe8:	fcc00000 	.word	0xfcc00000

0000dfec <__sflush_r>:
    dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfee:	46c6      	mov	lr, r8
    dff0:	b500      	push	{lr}
    dff2:	230c      	movs	r3, #12
    dff4:	5eca      	ldrsh	r2, [r1, r3]
    dff6:	4680      	mov	r8, r0
    dff8:	b293      	uxth	r3, r2
    dffa:	000c      	movs	r4, r1
    dffc:	0719      	lsls	r1, r3, #28
    dffe:	d440      	bmi.n	e082 <__sflush_r+0x96>
    e000:	2380      	movs	r3, #128	; 0x80
    e002:	011b      	lsls	r3, r3, #4
    e004:	4313      	orrs	r3, r2
    e006:	6862      	ldr	r2, [r4, #4]
    e008:	81a3      	strh	r3, [r4, #12]
    e00a:	2a00      	cmp	r2, #0
    e00c:	dc00      	bgt.n	e010 <__sflush_r+0x24>
    e00e:	e070      	b.n	e0f2 <__sflush_r+0x106>
    e010:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e012:	2e00      	cmp	r6, #0
    e014:	d031      	beq.n	e07a <__sflush_r+0x8e>
    e016:	4642      	mov	r2, r8
    e018:	4641      	mov	r1, r8
    e01a:	6815      	ldr	r5, [r2, #0]
    e01c:	2200      	movs	r2, #0
    e01e:	b29b      	uxth	r3, r3
    e020:	600a      	str	r2, [r1, #0]
    e022:	04da      	lsls	r2, r3, #19
    e024:	d400      	bmi.n	e028 <__sflush_r+0x3c>
    e026:	e069      	b.n	e0fc <__sflush_r+0x110>
    e028:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e02a:	075b      	lsls	r3, r3, #29
    e02c:	d506      	bpl.n	e03c <__sflush_r+0x50>
    e02e:	6863      	ldr	r3, [r4, #4]
    e030:	1ad2      	subs	r2, r2, r3
    e032:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e034:	2b00      	cmp	r3, #0
    e036:	d001      	beq.n	e03c <__sflush_r+0x50>
    e038:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e03a:	1ad2      	subs	r2, r2, r3
    e03c:	2300      	movs	r3, #0
    e03e:	69e1      	ldr	r1, [r4, #28]
    e040:	4640      	mov	r0, r8
    e042:	47b0      	blx	r6
    e044:	1c43      	adds	r3, r0, #1
    e046:	d03d      	beq.n	e0c4 <__sflush_r+0xd8>
    e048:	89a3      	ldrh	r3, [r4, #12]
    e04a:	4a3a      	ldr	r2, [pc, #232]	; (e134 <__sflush_r+0x148>)
    e04c:	4013      	ands	r3, r2
    e04e:	2200      	movs	r2, #0
    e050:	6062      	str	r2, [r4, #4]
    e052:	6922      	ldr	r2, [r4, #16]
    e054:	b21b      	sxth	r3, r3
    e056:	81a3      	strh	r3, [r4, #12]
    e058:	6022      	str	r2, [r4, #0]
    e05a:	04db      	lsls	r3, r3, #19
    e05c:	d447      	bmi.n	e0ee <__sflush_r+0x102>
    e05e:	4643      	mov	r3, r8
    e060:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e062:	601d      	str	r5, [r3, #0]
    e064:	2900      	cmp	r1, #0
    e066:	d008      	beq.n	e07a <__sflush_r+0x8e>
    e068:	0023      	movs	r3, r4
    e06a:	3340      	adds	r3, #64	; 0x40
    e06c:	4299      	cmp	r1, r3
    e06e:	d002      	beq.n	e076 <__sflush_r+0x8a>
    e070:	4640      	mov	r0, r8
    e072:	f000 f967 	bl	e344 <_free_r>
    e076:	2300      	movs	r3, #0
    e078:	6323      	str	r3, [r4, #48]	; 0x30
    e07a:	2000      	movs	r0, #0
    e07c:	bc04      	pop	{r2}
    e07e:	4690      	mov	r8, r2
    e080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e082:	6926      	ldr	r6, [r4, #16]
    e084:	2e00      	cmp	r6, #0
    e086:	d0f8      	beq.n	e07a <__sflush_r+0x8e>
    e088:	6822      	ldr	r2, [r4, #0]
    e08a:	6026      	str	r6, [r4, #0]
    e08c:	1b95      	subs	r5, r2, r6
    e08e:	2200      	movs	r2, #0
    e090:	079b      	lsls	r3, r3, #30
    e092:	d100      	bne.n	e096 <__sflush_r+0xaa>
    e094:	6962      	ldr	r2, [r4, #20]
    e096:	60a2      	str	r2, [r4, #8]
    e098:	2d00      	cmp	r5, #0
    e09a:	dc04      	bgt.n	e0a6 <__sflush_r+0xba>
    e09c:	e7ed      	b.n	e07a <__sflush_r+0x8e>
    e09e:	1836      	adds	r6, r6, r0
    e0a0:	1a2d      	subs	r5, r5, r0
    e0a2:	2d00      	cmp	r5, #0
    e0a4:	dde9      	ble.n	e07a <__sflush_r+0x8e>
    e0a6:	002b      	movs	r3, r5
    e0a8:	0032      	movs	r2, r6
    e0aa:	69e1      	ldr	r1, [r4, #28]
    e0ac:	4640      	mov	r0, r8
    e0ae:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e0b0:	47b8      	blx	r7
    e0b2:	2800      	cmp	r0, #0
    e0b4:	dcf3      	bgt.n	e09e <__sflush_r+0xb2>
    e0b6:	2240      	movs	r2, #64	; 0x40
    e0b8:	2001      	movs	r0, #1
    e0ba:	89a3      	ldrh	r3, [r4, #12]
    e0bc:	4240      	negs	r0, r0
    e0be:	4313      	orrs	r3, r2
    e0c0:	81a3      	strh	r3, [r4, #12]
    e0c2:	e7db      	b.n	e07c <__sflush_r+0x90>
    e0c4:	4643      	mov	r3, r8
    e0c6:	6819      	ldr	r1, [r3, #0]
    e0c8:	291d      	cmp	r1, #29
    e0ca:	d8f4      	bhi.n	e0b6 <__sflush_r+0xca>
    e0cc:	4b1a      	ldr	r3, [pc, #104]	; (e138 <__sflush_r+0x14c>)
    e0ce:	2201      	movs	r2, #1
    e0d0:	40cb      	lsrs	r3, r1
    e0d2:	439a      	bics	r2, r3
    e0d4:	d1ef      	bne.n	e0b6 <__sflush_r+0xca>
    e0d6:	89a3      	ldrh	r3, [r4, #12]
    e0d8:	4e16      	ldr	r6, [pc, #88]	; (e134 <__sflush_r+0x148>)
    e0da:	6062      	str	r2, [r4, #4]
    e0dc:	4033      	ands	r3, r6
    e0de:	6922      	ldr	r2, [r4, #16]
    e0e0:	b21b      	sxth	r3, r3
    e0e2:	81a3      	strh	r3, [r4, #12]
    e0e4:	6022      	str	r2, [r4, #0]
    e0e6:	04db      	lsls	r3, r3, #19
    e0e8:	d5b9      	bpl.n	e05e <__sflush_r+0x72>
    e0ea:	2900      	cmp	r1, #0
    e0ec:	d1b7      	bne.n	e05e <__sflush_r+0x72>
    e0ee:	6520      	str	r0, [r4, #80]	; 0x50
    e0f0:	e7b5      	b.n	e05e <__sflush_r+0x72>
    e0f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e0f4:	2a00      	cmp	r2, #0
    e0f6:	dd00      	ble.n	e0fa <__sflush_r+0x10e>
    e0f8:	e78a      	b.n	e010 <__sflush_r+0x24>
    e0fa:	e7be      	b.n	e07a <__sflush_r+0x8e>
    e0fc:	2200      	movs	r2, #0
    e0fe:	2301      	movs	r3, #1
    e100:	69e1      	ldr	r1, [r4, #28]
    e102:	4640      	mov	r0, r8
    e104:	47b0      	blx	r6
    e106:	0002      	movs	r2, r0
    e108:	1c43      	adds	r3, r0, #1
    e10a:	d002      	beq.n	e112 <__sflush_r+0x126>
    e10c:	89a3      	ldrh	r3, [r4, #12]
    e10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e110:	e78b      	b.n	e02a <__sflush_r+0x3e>
    e112:	4643      	mov	r3, r8
    e114:	681b      	ldr	r3, [r3, #0]
    e116:	2b00      	cmp	r3, #0
    e118:	d0f8      	beq.n	e10c <__sflush_r+0x120>
    e11a:	2b1d      	cmp	r3, #29
    e11c:	d001      	beq.n	e122 <__sflush_r+0x136>
    e11e:	2b16      	cmp	r3, #22
    e120:	d103      	bne.n	e12a <__sflush_r+0x13e>
    e122:	4643      	mov	r3, r8
    e124:	2000      	movs	r0, #0
    e126:	601d      	str	r5, [r3, #0]
    e128:	e7a8      	b.n	e07c <__sflush_r+0x90>
    e12a:	2140      	movs	r1, #64	; 0x40
    e12c:	89a3      	ldrh	r3, [r4, #12]
    e12e:	430b      	orrs	r3, r1
    e130:	81a3      	strh	r3, [r4, #12]
    e132:	e7a3      	b.n	e07c <__sflush_r+0x90>
    e134:	fffff7ff 	.word	0xfffff7ff
    e138:	20400001 	.word	0x20400001

0000e13c <_fflush_r>:
    e13c:	b570      	push	{r4, r5, r6, lr}
    e13e:	0005      	movs	r5, r0
    e140:	000c      	movs	r4, r1
    e142:	2800      	cmp	r0, #0
    e144:	d002      	beq.n	e14c <_fflush_r+0x10>
    e146:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e148:	2b00      	cmp	r3, #0
    e14a:	d016      	beq.n	e17a <_fflush_r+0x3e>
    e14c:	220c      	movs	r2, #12
    e14e:	5ea3      	ldrsh	r3, [r4, r2]
    e150:	2600      	movs	r6, #0
    e152:	2b00      	cmp	r3, #0
    e154:	d00f      	beq.n	e176 <_fflush_r+0x3a>
    e156:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e158:	07d2      	lsls	r2, r2, #31
    e15a:	d401      	bmi.n	e160 <_fflush_r+0x24>
    e15c:	059b      	lsls	r3, r3, #22
    e15e:	d513      	bpl.n	e188 <_fflush_r+0x4c>
    e160:	0021      	movs	r1, r4
    e162:	0028      	movs	r0, r5
    e164:	f7ff ff42 	bl	dfec <__sflush_r>
    e168:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e16a:	0006      	movs	r6, r0
    e16c:	07db      	lsls	r3, r3, #31
    e16e:	d402      	bmi.n	e176 <_fflush_r+0x3a>
    e170:	89a3      	ldrh	r3, [r4, #12]
    e172:	059b      	lsls	r3, r3, #22
    e174:	d504      	bpl.n	e180 <_fflush_r+0x44>
    e176:	0030      	movs	r0, r6
    e178:	bd70      	pop	{r4, r5, r6, pc}
    e17a:	f000 f839 	bl	e1f0 <__sinit>
    e17e:	e7e5      	b.n	e14c <_fflush_r+0x10>
    e180:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e182:	f000 fb79 	bl	e878 <__retarget_lock_release_recursive>
    e186:	e7f6      	b.n	e176 <_fflush_r+0x3a>
    e188:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e18a:	f000 fb73 	bl	e874 <__retarget_lock_acquire_recursive>
    e18e:	e7e7      	b.n	e160 <_fflush_r+0x24>

0000e190 <_cleanup_r>:
    e190:	b510      	push	{r4, lr}
    e192:	4902      	ldr	r1, [pc, #8]	; (e19c <_cleanup_r+0xc>)
    e194:	f000 fb36 	bl	e804 <_fwalk_reent>
    e198:	bd10      	pop	{r4, pc}
    e19a:	46c0      	nop			; (mov r8, r8)
    e19c:	0000fc1d 	.word	0x0000fc1d

0000e1a0 <std.isra.0>:
    e1a0:	2300      	movs	r3, #0
    e1a2:	b510      	push	{r4, lr}
    e1a4:	0004      	movs	r4, r0
    e1a6:	6003      	str	r3, [r0, #0]
    e1a8:	6043      	str	r3, [r0, #4]
    e1aa:	6083      	str	r3, [r0, #8]
    e1ac:	8181      	strh	r1, [r0, #12]
    e1ae:	6643      	str	r3, [r0, #100]	; 0x64
    e1b0:	81c2      	strh	r2, [r0, #14]
    e1b2:	6103      	str	r3, [r0, #16]
    e1b4:	6143      	str	r3, [r0, #20]
    e1b6:	6183      	str	r3, [r0, #24]
    e1b8:	2208      	movs	r2, #8
    e1ba:	2100      	movs	r1, #0
    e1bc:	305c      	adds	r0, #92	; 0x5c
    e1be:	f7fd f971 	bl	b4a4 <memset>
    e1c2:	0020      	movs	r0, r4
    e1c4:	4b06      	ldr	r3, [pc, #24]	; (e1e0 <std.isra.0+0x40>)
    e1c6:	61e4      	str	r4, [r4, #28]
    e1c8:	6223      	str	r3, [r4, #32]
    e1ca:	4b06      	ldr	r3, [pc, #24]	; (e1e4 <std.isra.0+0x44>)
    e1cc:	3058      	adds	r0, #88	; 0x58
    e1ce:	6263      	str	r3, [r4, #36]	; 0x24
    e1d0:	4b05      	ldr	r3, [pc, #20]	; (e1e8 <std.isra.0+0x48>)
    e1d2:	62a3      	str	r3, [r4, #40]	; 0x28
    e1d4:	4b05      	ldr	r3, [pc, #20]	; (e1ec <std.isra.0+0x4c>)
    e1d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    e1d8:	f000 fb48 	bl	e86c <__retarget_lock_init_recursive>
    e1dc:	bd10      	pop	{r4, pc}
    e1de:	46c0      	nop			; (mov r8, r8)
    e1e0:	0000fa45 	.word	0x0000fa45
    e1e4:	0000fa6d 	.word	0x0000fa6d
    e1e8:	0000faa9 	.word	0x0000faa9
    e1ec:	0000fad5 	.word	0x0000fad5

0000e1f0 <__sinit>:
    e1f0:	b570      	push	{r4, r5, r6, lr}
    e1f2:	0004      	movs	r4, r0
    e1f4:	4d14      	ldr	r5, [pc, #80]	; (e248 <__sinit+0x58>)
    e1f6:	0028      	movs	r0, r5
    e1f8:	f000 fb3c 	bl	e874 <__retarget_lock_acquire_recursive>
    e1fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e1fe:	2b00      	cmp	r3, #0
    e200:	d11d      	bne.n	e23e <__sinit+0x4e>
    e202:	4a12      	ldr	r2, [pc, #72]	; (e24c <__sinit+0x5c>)
    e204:	2104      	movs	r1, #4
    e206:	63e2      	str	r2, [r4, #60]	; 0x3c
    e208:	22b8      	movs	r2, #184	; 0xb8
    e20a:	0092      	lsls	r2, r2, #2
    e20c:	50a3      	str	r3, [r4, r2]
    e20e:	23b9      	movs	r3, #185	; 0xb9
    e210:	2203      	movs	r2, #3
    e212:	009b      	lsls	r3, r3, #2
    e214:	50e2      	str	r2, [r4, r3]
    e216:	3308      	adds	r3, #8
    e218:	18e2      	adds	r2, r4, r3
    e21a:	3b04      	subs	r3, #4
    e21c:	50e2      	str	r2, [r4, r3]
    e21e:	6860      	ldr	r0, [r4, #4]
    e220:	2200      	movs	r2, #0
    e222:	f7ff ffbd 	bl	e1a0 <std.isra.0>
    e226:	2201      	movs	r2, #1
    e228:	2109      	movs	r1, #9
    e22a:	68a0      	ldr	r0, [r4, #8]
    e22c:	f7ff ffb8 	bl	e1a0 <std.isra.0>
    e230:	2202      	movs	r2, #2
    e232:	2112      	movs	r1, #18
    e234:	68e0      	ldr	r0, [r4, #12]
    e236:	f7ff ffb3 	bl	e1a0 <std.isra.0>
    e23a:	2301      	movs	r3, #1
    e23c:	63a3      	str	r3, [r4, #56]	; 0x38
    e23e:	0028      	movs	r0, r5
    e240:	f000 fb1a 	bl	e878 <__retarget_lock_release_recursive>
    e244:	bd70      	pop	{r4, r5, r6, pc}
    e246:	46c0      	nop			; (mov r8, r8)
    e248:	2000153c 	.word	0x2000153c
    e24c:	0000e191 	.word	0x0000e191

0000e250 <__sfp_lock_acquire>:
    e250:	b510      	push	{r4, lr}
    e252:	4802      	ldr	r0, [pc, #8]	; (e25c <__sfp_lock_acquire+0xc>)
    e254:	f000 fb0e 	bl	e874 <__retarget_lock_acquire_recursive>
    e258:	bd10      	pop	{r4, pc}
    e25a:	46c0      	nop			; (mov r8, r8)
    e25c:	20001550 	.word	0x20001550

0000e260 <__sfp_lock_release>:
    e260:	b510      	push	{r4, lr}
    e262:	4802      	ldr	r0, [pc, #8]	; (e26c <__sfp_lock_release+0xc>)
    e264:	f000 fb08 	bl	e878 <__retarget_lock_release_recursive>
    e268:	bd10      	pop	{r4, pc}
    e26a:	46c0      	nop			; (mov r8, r8)
    e26c:	20001550 	.word	0x20001550

0000e270 <__libc_fini_array>:
    e270:	b570      	push	{r4, r5, r6, lr}
    e272:	4b09      	ldr	r3, [pc, #36]	; (e298 <__libc_fini_array+0x28>)
    e274:	4c09      	ldr	r4, [pc, #36]	; (e29c <__libc_fini_array+0x2c>)
    e276:	1ae4      	subs	r4, r4, r3
    e278:	10a4      	asrs	r4, r4, #2
    e27a:	d009      	beq.n	e290 <__libc_fini_array+0x20>
    e27c:	4a08      	ldr	r2, [pc, #32]	; (e2a0 <__libc_fini_array+0x30>)
    e27e:	18a5      	adds	r5, r4, r2
    e280:	00ad      	lsls	r5, r5, #2
    e282:	18ed      	adds	r5, r5, r3
    e284:	682b      	ldr	r3, [r5, #0]
    e286:	3c01      	subs	r4, #1
    e288:	4798      	blx	r3
    e28a:	3d04      	subs	r5, #4
    e28c:	2c00      	cmp	r4, #0
    e28e:	d1f9      	bne.n	e284 <__libc_fini_array+0x14>
    e290:	f002 fc3e 	bl	10b10 <_fini>
    e294:	bd70      	pop	{r4, r5, r6, pc}
    e296:	46c0      	nop			; (mov r8, r8)
    e298:	00010b1c 	.word	0x00010b1c
    e29c:	00010b20 	.word	0x00010b20
    e2a0:	3fffffff 	.word	0x3fffffff

0000e2a4 <_malloc_trim_r>:
    e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2a6:	000c      	movs	r4, r1
    e2a8:	0006      	movs	r6, r0
    e2aa:	f000 fea3 	bl	eff4 <__malloc_lock>
    e2ae:	4f20      	ldr	r7, [pc, #128]	; (e330 <_malloc_trim_r+0x8c>)
    e2b0:	68bb      	ldr	r3, [r7, #8]
    e2b2:	685d      	ldr	r5, [r3, #4]
    e2b4:	2303      	movs	r3, #3
    e2b6:	439d      	bics	r5, r3
    e2b8:	4b1e      	ldr	r3, [pc, #120]	; (e334 <_malloc_trim_r+0x90>)
    e2ba:	1b2c      	subs	r4, r5, r4
    e2bc:	469c      	mov	ip, r3
    e2be:	4464      	add	r4, ip
    e2c0:	0b24      	lsrs	r4, r4, #12
    e2c2:	4b1d      	ldr	r3, [pc, #116]	; (e338 <_malloc_trim_r+0x94>)
    e2c4:	3c01      	subs	r4, #1
    e2c6:	0324      	lsls	r4, r4, #12
    e2c8:	429c      	cmp	r4, r3
    e2ca:	dd07      	ble.n	e2dc <_malloc_trim_r+0x38>
    e2cc:	2100      	movs	r1, #0
    e2ce:	0030      	movs	r0, r6
    e2d0:	f001 fba6 	bl	fa20 <_sbrk_r>
    e2d4:	68bb      	ldr	r3, [r7, #8]
    e2d6:	195b      	adds	r3, r3, r5
    e2d8:	4298      	cmp	r0, r3
    e2da:	d004      	beq.n	e2e6 <_malloc_trim_r+0x42>
    e2dc:	0030      	movs	r0, r6
    e2de:	f000 fe91 	bl	f004 <__malloc_unlock>
    e2e2:	2000      	movs	r0, #0
    e2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2e6:	4261      	negs	r1, r4
    e2e8:	0030      	movs	r0, r6
    e2ea:	f001 fb99 	bl	fa20 <_sbrk_r>
    e2ee:	1c43      	adds	r3, r0, #1
    e2f0:	d00d      	beq.n	e30e <_malloc_trim_r+0x6a>
    e2f2:	2201      	movs	r2, #1
    e2f4:	68bb      	ldr	r3, [r7, #8]
    e2f6:	1b2d      	subs	r5, r5, r4
    e2f8:	4315      	orrs	r5, r2
    e2fa:	605d      	str	r5, [r3, #4]
    e2fc:	4b0f      	ldr	r3, [pc, #60]	; (e33c <_malloc_trim_r+0x98>)
    e2fe:	0030      	movs	r0, r6
    e300:	681a      	ldr	r2, [r3, #0]
    e302:	1b14      	subs	r4, r2, r4
    e304:	601c      	str	r4, [r3, #0]
    e306:	f000 fe7d 	bl	f004 <__malloc_unlock>
    e30a:	2001      	movs	r0, #1
    e30c:	e7ea      	b.n	e2e4 <_malloc_trim_r+0x40>
    e30e:	2100      	movs	r1, #0
    e310:	0030      	movs	r0, r6
    e312:	f001 fb85 	bl	fa20 <_sbrk_r>
    e316:	68ba      	ldr	r2, [r7, #8]
    e318:	1a83      	subs	r3, r0, r2
    e31a:	2b0f      	cmp	r3, #15
    e31c:	ddde      	ble.n	e2dc <_malloc_trim_r+0x38>
    e31e:	4908      	ldr	r1, [pc, #32]	; (e340 <_malloc_trim_r+0x9c>)
    e320:	6809      	ldr	r1, [r1, #0]
    e322:	1a40      	subs	r0, r0, r1
    e324:	4905      	ldr	r1, [pc, #20]	; (e33c <_malloc_trim_r+0x98>)
    e326:	6008      	str	r0, [r1, #0]
    e328:	2101      	movs	r1, #1
    e32a:	430b      	orrs	r3, r1
    e32c:	6053      	str	r3, [r2, #4]
    e32e:	e7d5      	b.n	e2dc <_malloc_trim_r+0x38>
    e330:	200004a4 	.word	0x200004a4
    e334:	00000fef 	.word	0x00000fef
    e338:	00000fff 	.word	0x00000fff
    e33c:	20001420 	.word	0x20001420
    e340:	200008ac 	.word	0x200008ac

0000e344 <_free_r>:
    e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e346:	0004      	movs	r4, r0
    e348:	1e0d      	subs	r5, r1, #0
    e34a:	d03c      	beq.n	e3c6 <_free_r+0x82>
    e34c:	f000 fe52 	bl	eff4 <__malloc_lock>
    e350:	0029      	movs	r1, r5
    e352:	3908      	subs	r1, #8
    e354:	6848      	ldr	r0, [r1, #4]
    e356:	2301      	movs	r3, #1
    e358:	0005      	movs	r5, r0
    e35a:	2603      	movs	r6, #3
    e35c:	439d      	bics	r5, r3
    e35e:	194a      	adds	r2, r1, r5
    e360:	469c      	mov	ip, r3
    e362:	4f61      	ldr	r7, [pc, #388]	; (e4e8 <_free_r+0x1a4>)
    e364:	6853      	ldr	r3, [r2, #4]
    e366:	43b3      	bics	r3, r6
    e368:	68be      	ldr	r6, [r7, #8]
    e36a:	42b2      	cmp	r2, r6
    e36c:	d056      	beq.n	e41c <_free_r+0xd8>
    e36e:	4666      	mov	r6, ip
    e370:	6053      	str	r3, [r2, #4]
    e372:	4206      	tst	r6, r0
    e374:	d10a      	bne.n	e38c <_free_r+0x48>
    e376:	003e      	movs	r6, r7
    e378:	6808      	ldr	r0, [r1, #0]
    e37a:	3608      	adds	r6, #8
    e37c:	1a09      	subs	r1, r1, r0
    e37e:	182d      	adds	r5, r5, r0
    e380:	6888      	ldr	r0, [r1, #8]
    e382:	42b0      	cmp	r0, r6
    e384:	d065      	beq.n	e452 <_free_r+0x10e>
    e386:	68ce      	ldr	r6, [r1, #12]
    e388:	60c6      	str	r6, [r0, #12]
    e38a:	60b0      	str	r0, [r6, #8]
    e38c:	2001      	movs	r0, #1
    e38e:	18d6      	adds	r6, r2, r3
    e390:	6876      	ldr	r6, [r6, #4]
    e392:	4206      	tst	r6, r0
    e394:	d033      	beq.n	e3fe <_free_r+0xba>
    e396:	4b55      	ldr	r3, [pc, #340]	; (e4ec <_free_r+0x1a8>)
    e398:	4328      	orrs	r0, r5
    e39a:	6048      	str	r0, [r1, #4]
    e39c:	514d      	str	r5, [r1, r5]
    e39e:	429d      	cmp	r5, r3
    e3a0:	d812      	bhi.n	e3c8 <_free_r+0x84>
    e3a2:	08ed      	lsrs	r5, r5, #3
    e3a4:	3bff      	subs	r3, #255	; 0xff
    e3a6:	10aa      	asrs	r2, r5, #2
    e3a8:	3bff      	subs	r3, #255	; 0xff
    e3aa:	4093      	lsls	r3, r2
    e3ac:	687a      	ldr	r2, [r7, #4]
    e3ae:	00ed      	lsls	r5, r5, #3
    e3b0:	4313      	orrs	r3, r2
    e3b2:	607b      	str	r3, [r7, #4]
    e3b4:	19ef      	adds	r7, r5, r7
    e3b6:	68bb      	ldr	r3, [r7, #8]
    e3b8:	60cf      	str	r7, [r1, #12]
    e3ba:	608b      	str	r3, [r1, #8]
    e3bc:	60b9      	str	r1, [r7, #8]
    e3be:	60d9      	str	r1, [r3, #12]
    e3c0:	0020      	movs	r0, r4
    e3c2:	f000 fe1f 	bl	f004 <__malloc_unlock>
    e3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3c8:	0a68      	lsrs	r0, r5, #9
    e3ca:	2804      	cmp	r0, #4
    e3cc:	d850      	bhi.n	e470 <_free_r+0x12c>
    e3ce:	09a8      	lsrs	r0, r5, #6
    e3d0:	0002      	movs	r2, r0
    e3d2:	3039      	adds	r0, #57	; 0x39
    e3d4:	3238      	adds	r2, #56	; 0x38
    e3d6:	00c0      	lsls	r0, r0, #3
    e3d8:	1838      	adds	r0, r7, r0
    e3da:	3808      	subs	r0, #8
    e3dc:	6883      	ldr	r3, [r0, #8]
    e3de:	2603      	movs	r6, #3
    e3e0:	4298      	cmp	r0, r3
    e3e2:	d04c      	beq.n	e47e <_free_r+0x13a>
    e3e4:	685a      	ldr	r2, [r3, #4]
    e3e6:	43b2      	bics	r2, r6
    e3e8:	4295      	cmp	r5, r2
    e3ea:	d230      	bcs.n	e44e <_free_r+0x10a>
    e3ec:	689b      	ldr	r3, [r3, #8]
    e3ee:	4298      	cmp	r0, r3
    e3f0:	d1f8      	bne.n	e3e4 <_free_r+0xa0>
    e3f2:	68c3      	ldr	r3, [r0, #12]
    e3f4:	60cb      	str	r3, [r1, #12]
    e3f6:	6088      	str	r0, [r1, #8]
    e3f8:	6099      	str	r1, [r3, #8]
    e3fa:	60c1      	str	r1, [r0, #12]
    e3fc:	e7e0      	b.n	e3c0 <_free_r+0x7c>
    e3fe:	18ed      	adds	r5, r5, r3
    e400:	4e3b      	ldr	r6, [pc, #236]	; (e4f0 <_free_r+0x1ac>)
    e402:	6893      	ldr	r3, [r2, #8]
    e404:	42b3      	cmp	r3, r6
    e406:	d042      	beq.n	e48e <_free_r+0x14a>
    e408:	68d2      	ldr	r2, [r2, #12]
    e40a:	4328      	orrs	r0, r5
    e40c:	60da      	str	r2, [r3, #12]
    e40e:	6093      	str	r3, [r2, #8]
    e410:	4b36      	ldr	r3, [pc, #216]	; (e4ec <_free_r+0x1a8>)
    e412:	6048      	str	r0, [r1, #4]
    e414:	514d      	str	r5, [r1, r5]
    e416:	429d      	cmp	r5, r3
    e418:	d8d6      	bhi.n	e3c8 <_free_r+0x84>
    e41a:	e7c2      	b.n	e3a2 <_free_r+0x5e>
    e41c:	4662      	mov	r2, ip
    e41e:	18eb      	adds	r3, r5, r3
    e420:	4202      	tst	r2, r0
    e422:	d106      	bne.n	e432 <_free_r+0xee>
    e424:	680a      	ldr	r2, [r1, #0]
    e426:	1a89      	subs	r1, r1, r2
    e428:	6888      	ldr	r0, [r1, #8]
    e42a:	189b      	adds	r3, r3, r2
    e42c:	68ca      	ldr	r2, [r1, #12]
    e42e:	60c2      	str	r2, [r0, #12]
    e430:	6090      	str	r0, [r2, #8]
    e432:	2201      	movs	r2, #1
    e434:	431a      	orrs	r2, r3
    e436:	604a      	str	r2, [r1, #4]
    e438:	4a2e      	ldr	r2, [pc, #184]	; (e4f4 <_free_r+0x1b0>)
    e43a:	60b9      	str	r1, [r7, #8]
    e43c:	6812      	ldr	r2, [r2, #0]
    e43e:	4293      	cmp	r3, r2
    e440:	d3be      	bcc.n	e3c0 <_free_r+0x7c>
    e442:	4b2d      	ldr	r3, [pc, #180]	; (e4f8 <_free_r+0x1b4>)
    e444:	0020      	movs	r0, r4
    e446:	6819      	ldr	r1, [r3, #0]
    e448:	f7ff ff2c 	bl	e2a4 <_malloc_trim_r>
    e44c:	e7b8      	b.n	e3c0 <_free_r+0x7c>
    e44e:	0018      	movs	r0, r3
    e450:	e7cf      	b.n	e3f2 <_free_r+0xae>
    e452:	4666      	mov	r6, ip
    e454:	18d0      	adds	r0, r2, r3
    e456:	6840      	ldr	r0, [r0, #4]
    e458:	4230      	tst	r0, r6
    e45a:	d13f      	bne.n	e4dc <_free_r+0x198>
    e45c:	6890      	ldr	r0, [r2, #8]
    e45e:	195d      	adds	r5, r3, r5
    e460:	68d3      	ldr	r3, [r2, #12]
    e462:	60c3      	str	r3, [r0, #12]
    e464:	6098      	str	r0, [r3, #8]
    e466:	4663      	mov	r3, ip
    e468:	432b      	orrs	r3, r5
    e46a:	604b      	str	r3, [r1, #4]
    e46c:	514d      	str	r5, [r1, r5]
    e46e:	e7a7      	b.n	e3c0 <_free_r+0x7c>
    e470:	2814      	cmp	r0, #20
    e472:	d814      	bhi.n	e49e <_free_r+0x15a>
    e474:	0002      	movs	r2, r0
    e476:	305c      	adds	r0, #92	; 0x5c
    e478:	325b      	adds	r2, #91	; 0x5b
    e47a:	00c0      	lsls	r0, r0, #3
    e47c:	e7ac      	b.n	e3d8 <_free_r+0x94>
    e47e:	2301      	movs	r3, #1
    e480:	1092      	asrs	r2, r2, #2
    e482:	4093      	lsls	r3, r2
    e484:	687a      	ldr	r2, [r7, #4]
    e486:	4313      	orrs	r3, r2
    e488:	607b      	str	r3, [r7, #4]
    e48a:	0003      	movs	r3, r0
    e48c:	e7b2      	b.n	e3f4 <_free_r+0xb0>
    e48e:	4328      	orrs	r0, r5
    e490:	60d9      	str	r1, [r3, #12]
    e492:	6099      	str	r1, [r3, #8]
    e494:	60cb      	str	r3, [r1, #12]
    e496:	608b      	str	r3, [r1, #8]
    e498:	6048      	str	r0, [r1, #4]
    e49a:	514d      	str	r5, [r1, r5]
    e49c:	e790      	b.n	e3c0 <_free_r+0x7c>
    e49e:	2854      	cmp	r0, #84	; 0x54
    e4a0:	d805      	bhi.n	e4ae <_free_r+0x16a>
    e4a2:	0b28      	lsrs	r0, r5, #12
    e4a4:	0002      	movs	r2, r0
    e4a6:	306f      	adds	r0, #111	; 0x6f
    e4a8:	326e      	adds	r2, #110	; 0x6e
    e4aa:	00c0      	lsls	r0, r0, #3
    e4ac:	e794      	b.n	e3d8 <_free_r+0x94>
    e4ae:	22aa      	movs	r2, #170	; 0xaa
    e4b0:	0052      	lsls	r2, r2, #1
    e4b2:	4290      	cmp	r0, r2
    e4b4:	d805      	bhi.n	e4c2 <_free_r+0x17e>
    e4b6:	0be8      	lsrs	r0, r5, #15
    e4b8:	0002      	movs	r2, r0
    e4ba:	3078      	adds	r0, #120	; 0x78
    e4bc:	3277      	adds	r2, #119	; 0x77
    e4be:	00c0      	lsls	r0, r0, #3
    e4c0:	e78a      	b.n	e3d8 <_free_r+0x94>
    e4c2:	4a0e      	ldr	r2, [pc, #56]	; (e4fc <_free_r+0x1b8>)
    e4c4:	4290      	cmp	r0, r2
    e4c6:	d805      	bhi.n	e4d4 <_free_r+0x190>
    e4c8:	0ca8      	lsrs	r0, r5, #18
    e4ca:	0002      	movs	r2, r0
    e4cc:	307d      	adds	r0, #125	; 0x7d
    e4ce:	327c      	adds	r2, #124	; 0x7c
    e4d0:	00c0      	lsls	r0, r0, #3
    e4d2:	e781      	b.n	e3d8 <_free_r+0x94>
    e4d4:	20fe      	movs	r0, #254	; 0xfe
    e4d6:	227e      	movs	r2, #126	; 0x7e
    e4d8:	0080      	lsls	r0, r0, #2
    e4da:	e77d      	b.n	e3d8 <_free_r+0x94>
    e4dc:	4663      	mov	r3, ip
    e4de:	432b      	orrs	r3, r5
    e4e0:	604b      	str	r3, [r1, #4]
    e4e2:	6015      	str	r5, [r2, #0]
    e4e4:	e76c      	b.n	e3c0 <_free_r+0x7c>
    e4e6:	46c0      	nop			; (mov r8, r8)
    e4e8:	200004a4 	.word	0x200004a4
    e4ec:	000001ff 	.word	0x000001ff
    e4f0:	200004ac 	.word	0x200004ac
    e4f4:	200008b0 	.word	0x200008b0
    e4f8:	20001450 	.word	0x20001450
    e4fc:	00000554 	.word	0x00000554

0000e500 <__sfvwrite_r>:
    e500:	b5f0      	push	{r4, r5, r6, r7, lr}
    e502:	464e      	mov	r6, r9
    e504:	46de      	mov	lr, fp
    e506:	4657      	mov	r7, sl
    e508:	4645      	mov	r5, r8
    e50a:	b5e0      	push	{r5, r6, r7, lr}
    e50c:	6893      	ldr	r3, [r2, #8]
    e50e:	b083      	sub	sp, #12
    e510:	9000      	str	r0, [sp, #0]
    e512:	000c      	movs	r4, r1
    e514:	0016      	movs	r6, r2
    e516:	2b00      	cmp	r3, #0
    e518:	d025      	beq.n	e566 <__sfvwrite_r+0x66>
    e51a:	898b      	ldrh	r3, [r1, #12]
    e51c:	071a      	lsls	r2, r3, #28
    e51e:	d52a      	bpl.n	e576 <__sfvwrite_r+0x76>
    e520:	690a      	ldr	r2, [r1, #16]
    e522:	2a00      	cmp	r2, #0
    e524:	d027      	beq.n	e576 <__sfvwrite_r+0x76>
    e526:	6832      	ldr	r2, [r6, #0]
    e528:	4693      	mov	fp, r2
    e52a:	079a      	lsls	r2, r3, #30
    e52c:	d52f      	bpl.n	e58e <__sfvwrite_r+0x8e>
    e52e:	4bb2      	ldr	r3, [pc, #712]	; (e7f8 <__sfvwrite_r+0x2f8>)
    e530:	2700      	movs	r7, #0
    e532:	2500      	movs	r5, #0
    e534:	4698      	mov	r8, r3
    e536:	46b1      	mov	r9, r6
    e538:	2d00      	cmp	r5, #0
    e53a:	d100      	bne.n	e53e <__sfvwrite_r+0x3e>
    e53c:	e072      	b.n	e624 <__sfvwrite_r+0x124>
    e53e:	002b      	movs	r3, r5
    e540:	4545      	cmp	r5, r8
    e542:	d900      	bls.n	e546 <__sfvwrite_r+0x46>
    e544:	4bac      	ldr	r3, [pc, #688]	; (e7f8 <__sfvwrite_r+0x2f8>)
    e546:	003a      	movs	r2, r7
    e548:	69e1      	ldr	r1, [r4, #28]
    e54a:	9800      	ldr	r0, [sp, #0]
    e54c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e54e:	47b0      	blx	r6
    e550:	2800      	cmp	r0, #0
    e552:	dc00      	bgt.n	e556 <__sfvwrite_r+0x56>
    e554:	e073      	b.n	e63e <__sfvwrite_r+0x13e>
    e556:	464b      	mov	r3, r9
    e558:	689b      	ldr	r3, [r3, #8]
    e55a:	183f      	adds	r7, r7, r0
    e55c:	1a2d      	subs	r5, r5, r0
    e55e:	1a18      	subs	r0, r3, r0
    e560:	464b      	mov	r3, r9
    e562:	6098      	str	r0, [r3, #8]
    e564:	d1e8      	bne.n	e538 <__sfvwrite_r+0x38>
    e566:	2000      	movs	r0, #0
    e568:	b003      	add	sp, #12
    e56a:	bc3c      	pop	{r2, r3, r4, r5}
    e56c:	4690      	mov	r8, r2
    e56e:	4699      	mov	r9, r3
    e570:	46a2      	mov	sl, r4
    e572:	46ab      	mov	fp, r5
    e574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e576:	0021      	movs	r1, r4
    e578:	9800      	ldr	r0, [sp, #0]
    e57a:	f7fe fbd1 	bl	cd20 <__swsetup_r>
    e57e:	2800      	cmp	r0, #0
    e580:	d000      	beq.n	e584 <__sfvwrite_r+0x84>
    e582:	e130      	b.n	e7e6 <__sfvwrite_r+0x2e6>
    e584:	6832      	ldr	r2, [r6, #0]
    e586:	89a3      	ldrh	r3, [r4, #12]
    e588:	4693      	mov	fp, r2
    e58a:	079a      	lsls	r2, r3, #30
    e58c:	d4cf      	bmi.n	e52e <__sfvwrite_r+0x2e>
    e58e:	07da      	lsls	r2, r3, #31
    e590:	d55d      	bpl.n	e64e <__sfvwrite_r+0x14e>
    e592:	2300      	movs	r3, #0
    e594:	2000      	movs	r0, #0
    e596:	469a      	mov	sl, r3
    e598:	2700      	movs	r7, #0
    e59a:	001d      	movs	r5, r3
    e59c:	46b1      	mov	r9, r6
    e59e:	e029      	b.n	e5f4 <__sfvwrite_r+0xf4>
    e5a0:	2800      	cmp	r0, #0
    e5a2:	d033      	beq.n	e60c <__sfvwrite_r+0x10c>
    e5a4:	46a8      	mov	r8, r5
    e5a6:	42bd      	cmp	r5, r7
    e5a8:	d900      	bls.n	e5ac <__sfvwrite_r+0xac>
    e5aa:	46b8      	mov	r8, r7
    e5ac:	6820      	ldr	r0, [r4, #0]
    e5ae:	6922      	ldr	r2, [r4, #16]
    e5b0:	4646      	mov	r6, r8
    e5b2:	6963      	ldr	r3, [r4, #20]
    e5b4:	4290      	cmp	r0, r2
    e5b6:	d907      	bls.n	e5c8 <__sfvwrite_r+0xc8>
    e5b8:	68a2      	ldr	r2, [r4, #8]
    e5ba:	4694      	mov	ip, r2
    e5bc:	449c      	add	ip, r3
    e5be:	4662      	mov	r2, ip
    e5c0:	9201      	str	r2, [sp, #4]
    e5c2:	45e0      	cmp	r8, ip
    e5c4:	dd00      	ble.n	e5c8 <__sfvwrite_r+0xc8>
    e5c6:	e0e9      	b.n	e79c <__sfvwrite_r+0x29c>
    e5c8:	4598      	cmp	r8, r3
    e5ca:	da00      	bge.n	e5ce <__sfvwrite_r+0xce>
    e5cc:	e08f      	b.n	e6ee <__sfvwrite_r+0x1ee>
    e5ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e5d0:	4652      	mov	r2, sl
    e5d2:	69e1      	ldr	r1, [r4, #28]
    e5d4:	9800      	ldr	r0, [sp, #0]
    e5d6:	47b0      	blx	r6
    e5d8:	1e06      	subs	r6, r0, #0
    e5da:	dd30      	ble.n	e63e <__sfvwrite_r+0x13e>
    e5dc:	1bad      	subs	r5, r5, r6
    e5de:	2001      	movs	r0, #1
    e5e0:	2d00      	cmp	r5, #0
    e5e2:	d026      	beq.n	e632 <__sfvwrite_r+0x132>
    e5e4:	464b      	mov	r3, r9
    e5e6:	689b      	ldr	r3, [r3, #8]
    e5e8:	44b2      	add	sl, r6
    e5ea:	1bbf      	subs	r7, r7, r6
    e5ec:	1b9e      	subs	r6, r3, r6
    e5ee:	464b      	mov	r3, r9
    e5f0:	609e      	str	r6, [r3, #8]
    e5f2:	d0b8      	beq.n	e566 <__sfvwrite_r+0x66>
    e5f4:	2f00      	cmp	r7, #0
    e5f6:	d1d3      	bne.n	e5a0 <__sfvwrite_r+0xa0>
    e5f8:	465b      	mov	r3, fp
    e5fa:	681b      	ldr	r3, [r3, #0]
    e5fc:	469a      	mov	sl, r3
    e5fe:	465b      	mov	r3, fp
    e600:	685f      	ldr	r7, [r3, #4]
    e602:	2308      	movs	r3, #8
    e604:	469c      	mov	ip, r3
    e606:	44e3      	add	fp, ip
    e608:	2f00      	cmp	r7, #0
    e60a:	d0f5      	beq.n	e5f8 <__sfvwrite_r+0xf8>
    e60c:	003a      	movs	r2, r7
    e60e:	210a      	movs	r1, #10
    e610:	4650      	mov	r0, sl
    e612:	f000 fc5f 	bl	eed4 <memchr>
    e616:	2800      	cmp	r0, #0
    e618:	d100      	bne.n	e61c <__sfvwrite_r+0x11c>
    e61a:	e0e2      	b.n	e7e2 <__sfvwrite_r+0x2e2>
    e61c:	4653      	mov	r3, sl
    e61e:	3001      	adds	r0, #1
    e620:	1ac5      	subs	r5, r0, r3
    e622:	e7bf      	b.n	e5a4 <__sfvwrite_r+0xa4>
    e624:	465b      	mov	r3, fp
    e626:	681f      	ldr	r7, [r3, #0]
    e628:	685d      	ldr	r5, [r3, #4]
    e62a:	2308      	movs	r3, #8
    e62c:	469c      	mov	ip, r3
    e62e:	44e3      	add	fp, ip
    e630:	e782      	b.n	e538 <__sfvwrite_r+0x38>
    e632:	0021      	movs	r1, r4
    e634:	9800      	ldr	r0, [sp, #0]
    e636:	f7ff fd81 	bl	e13c <_fflush_r>
    e63a:	2800      	cmp	r0, #0
    e63c:	d0d2      	beq.n	e5e4 <__sfvwrite_r+0xe4>
    e63e:	220c      	movs	r2, #12
    e640:	5ea3      	ldrsh	r3, [r4, r2]
    e642:	2240      	movs	r2, #64	; 0x40
    e644:	2001      	movs	r0, #1
    e646:	4313      	orrs	r3, r2
    e648:	81a3      	strh	r3, [r4, #12]
    e64a:	4240      	negs	r0, r0
    e64c:	e78c      	b.n	e568 <__sfvwrite_r+0x68>
    e64e:	2200      	movs	r2, #0
    e650:	4691      	mov	r9, r2
    e652:	464d      	mov	r5, r9
    e654:	2d00      	cmp	r5, #0
    e656:	d023      	beq.n	e6a0 <__sfvwrite_r+0x1a0>
    e658:	68a2      	ldr	r2, [r4, #8]
    e65a:	4690      	mov	r8, r2
    e65c:	2280      	movs	r2, #128	; 0x80
    e65e:	0092      	lsls	r2, r2, #2
    e660:	4213      	tst	r3, r2
    e662:	d026      	beq.n	e6b2 <__sfvwrite_r+0x1b2>
    e664:	46c2      	mov	sl, r8
    e666:	4545      	cmp	r5, r8
    e668:	d34d      	bcc.n	e706 <__sfvwrite_r+0x206>
    e66a:	2290      	movs	r2, #144	; 0x90
    e66c:	00d2      	lsls	r2, r2, #3
    e66e:	4213      	tst	r3, r2
    e670:	d14e      	bne.n	e710 <__sfvwrite_r+0x210>
    e672:	002f      	movs	r7, r5
    e674:	6820      	ldr	r0, [r4, #0]
    e676:	4652      	mov	r2, sl
    e678:	4649      	mov	r1, r9
    e67a:	f000 fc6b 	bl	ef54 <memmove>
    e67e:	4642      	mov	r2, r8
    e680:	68a3      	ldr	r3, [r4, #8]
    e682:	1a98      	subs	r0, r3, r2
    e684:	6823      	ldr	r3, [r4, #0]
    e686:	60a0      	str	r0, [r4, #8]
    e688:	4453      	add	r3, sl
    e68a:	6023      	str	r3, [r4, #0]
    e68c:	68b3      	ldr	r3, [r6, #8]
    e68e:	44b9      	add	r9, r7
    e690:	1bed      	subs	r5, r5, r7
    e692:	1bdf      	subs	r7, r3, r7
    e694:	60b7      	str	r7, [r6, #8]
    e696:	d100      	bne.n	e69a <__sfvwrite_r+0x19a>
    e698:	e765      	b.n	e566 <__sfvwrite_r+0x66>
    e69a:	89a3      	ldrh	r3, [r4, #12]
    e69c:	2d00      	cmp	r5, #0
    e69e:	d1db      	bne.n	e658 <__sfvwrite_r+0x158>
    e6a0:	465a      	mov	r2, fp
    e6a2:	6812      	ldr	r2, [r2, #0]
    e6a4:	4691      	mov	r9, r2
    e6a6:	465a      	mov	r2, fp
    e6a8:	6855      	ldr	r5, [r2, #4]
    e6aa:	2208      	movs	r2, #8
    e6ac:	4694      	mov	ip, r2
    e6ae:	44e3      	add	fp, ip
    e6b0:	e7d0      	b.n	e654 <__sfvwrite_r+0x154>
    e6b2:	6820      	ldr	r0, [r4, #0]
    e6b4:	6923      	ldr	r3, [r4, #16]
    e6b6:	4298      	cmp	r0, r3
    e6b8:	d802      	bhi.n	e6c0 <__sfvwrite_r+0x1c0>
    e6ba:	6967      	ldr	r7, [r4, #20]
    e6bc:	42bd      	cmp	r5, r7
    e6be:	d259      	bcs.n	e774 <__sfvwrite_r+0x274>
    e6c0:	4647      	mov	r7, r8
    e6c2:	42af      	cmp	r7, r5
    e6c4:	d900      	bls.n	e6c8 <__sfvwrite_r+0x1c8>
    e6c6:	002f      	movs	r7, r5
    e6c8:	003a      	movs	r2, r7
    e6ca:	4649      	mov	r1, r9
    e6cc:	f000 fc42 	bl	ef54 <memmove>
    e6d0:	68a3      	ldr	r3, [r4, #8]
    e6d2:	6822      	ldr	r2, [r4, #0]
    e6d4:	1bdb      	subs	r3, r3, r7
    e6d6:	19d2      	adds	r2, r2, r7
    e6d8:	60a3      	str	r3, [r4, #8]
    e6da:	6022      	str	r2, [r4, #0]
    e6dc:	2b00      	cmp	r3, #0
    e6de:	d1d5      	bne.n	e68c <__sfvwrite_r+0x18c>
    e6e0:	0021      	movs	r1, r4
    e6e2:	9800      	ldr	r0, [sp, #0]
    e6e4:	f7ff fd2a 	bl	e13c <_fflush_r>
    e6e8:	2800      	cmp	r0, #0
    e6ea:	d0cf      	beq.n	e68c <__sfvwrite_r+0x18c>
    e6ec:	e7a7      	b.n	e63e <__sfvwrite_r+0x13e>
    e6ee:	4642      	mov	r2, r8
    e6f0:	4651      	mov	r1, sl
    e6f2:	f000 fc2f 	bl	ef54 <memmove>
    e6f6:	4642      	mov	r2, r8
    e6f8:	68a3      	ldr	r3, [r4, #8]
    e6fa:	1a9b      	subs	r3, r3, r2
    e6fc:	60a3      	str	r3, [r4, #8]
    e6fe:	6823      	ldr	r3, [r4, #0]
    e700:	4443      	add	r3, r8
    e702:	6023      	str	r3, [r4, #0]
    e704:	e76a      	b.n	e5dc <__sfvwrite_r+0xdc>
    e706:	46a8      	mov	r8, r5
    e708:	6820      	ldr	r0, [r4, #0]
    e70a:	002f      	movs	r7, r5
    e70c:	46aa      	mov	sl, r5
    e70e:	e7b2      	b.n	e676 <__sfvwrite_r+0x176>
    e710:	6921      	ldr	r1, [r4, #16]
    e712:	6822      	ldr	r2, [r4, #0]
    e714:	1a52      	subs	r2, r2, r1
    e716:	4692      	mov	sl, r2
    e718:	6962      	ldr	r2, [r4, #20]
    e71a:	0057      	lsls	r7, r2, #1
    e71c:	18bf      	adds	r7, r7, r2
    e71e:	0ffa      	lsrs	r2, r7, #31
    e720:	19d7      	adds	r7, r2, r7
    e722:	4652      	mov	r2, sl
    e724:	1c50      	adds	r0, r2, #1
    e726:	107f      	asrs	r7, r7, #1
    e728:	1940      	adds	r0, r0, r5
    e72a:	003a      	movs	r2, r7
    e72c:	42b8      	cmp	r0, r7
    e72e:	d901      	bls.n	e734 <__sfvwrite_r+0x234>
    e730:	0007      	movs	r7, r0
    e732:	0002      	movs	r2, r0
    e734:	055b      	lsls	r3, r3, #21
    e736:	d542      	bpl.n	e7be <__sfvwrite_r+0x2be>
    e738:	0011      	movs	r1, r2
    e73a:	9800      	ldr	r0, [sp, #0]
    e73c:	f000 f916 	bl	e96c <_malloc_r>
    e740:	4680      	mov	r8, r0
    e742:	1e03      	subs	r3, r0, #0
    e744:	d052      	beq.n	e7ec <__sfvwrite_r+0x2ec>
    e746:	4652      	mov	r2, sl
    e748:	6921      	ldr	r1, [r4, #16]
    e74a:	f7fc fe69 	bl	b420 <memcpy>
    e74e:	89a3      	ldrh	r3, [r4, #12]
    e750:	4a2a      	ldr	r2, [pc, #168]	; (e7fc <__sfvwrite_r+0x2fc>)
    e752:	4013      	ands	r3, r2
    e754:	2280      	movs	r2, #128	; 0x80
    e756:	4313      	orrs	r3, r2
    e758:	81a3      	strh	r3, [r4, #12]
    e75a:	4643      	mov	r3, r8
    e75c:	4640      	mov	r0, r8
    e75e:	6123      	str	r3, [r4, #16]
    e760:	4653      	mov	r3, sl
    e762:	4450      	add	r0, sl
    e764:	6167      	str	r7, [r4, #20]
    e766:	1aff      	subs	r7, r7, r3
    e768:	60a7      	str	r7, [r4, #8]
    e76a:	6020      	str	r0, [r4, #0]
    e76c:	46a8      	mov	r8, r5
    e76e:	002f      	movs	r7, r5
    e770:	46aa      	mov	sl, r5
    e772:	e780      	b.n	e676 <__sfvwrite_r+0x176>
    e774:	4b22      	ldr	r3, [pc, #136]	; (e800 <__sfvwrite_r+0x300>)
    e776:	0028      	movs	r0, r5
    e778:	429d      	cmp	r5, r3
    e77a:	d900      	bls.n	e77e <__sfvwrite_r+0x27e>
    e77c:	0018      	movs	r0, r3
    e77e:	0039      	movs	r1, r7
    e780:	f7f9 fe60 	bl	8444 <__divsi3>
    e784:	003b      	movs	r3, r7
    e786:	464a      	mov	r2, r9
    e788:	4343      	muls	r3, r0
    e78a:	69e1      	ldr	r1, [r4, #28]
    e78c:	9800      	ldr	r0, [sp, #0]
    e78e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e790:	47b8      	blx	r7
    e792:	2800      	cmp	r0, #0
    e794:	dc00      	bgt.n	e798 <__sfvwrite_r+0x298>
    e796:	e752      	b.n	e63e <__sfvwrite_r+0x13e>
    e798:	0007      	movs	r7, r0
    e79a:	e777      	b.n	e68c <__sfvwrite_r+0x18c>
    e79c:	4666      	mov	r6, ip
    e79e:	4651      	mov	r1, sl
    e7a0:	f000 fbd8 	bl	ef54 <memmove>
    e7a4:	46b4      	mov	ip, r6
    e7a6:	6823      	ldr	r3, [r4, #0]
    e7a8:	0021      	movs	r1, r4
    e7aa:	4463      	add	r3, ip
    e7ac:	6023      	str	r3, [r4, #0]
    e7ae:	9800      	ldr	r0, [sp, #0]
    e7b0:	f7ff fcc4 	bl	e13c <_fflush_r>
    e7b4:	2800      	cmp	r0, #0
    e7b6:	d000      	beq.n	e7ba <__sfvwrite_r+0x2ba>
    e7b8:	e741      	b.n	e63e <__sfvwrite_r+0x13e>
    e7ba:	9e01      	ldr	r6, [sp, #4]
    e7bc:	e70e      	b.n	e5dc <__sfvwrite_r+0xdc>
    e7be:	9800      	ldr	r0, [sp, #0]
    e7c0:	f000 ff70 	bl	f6a4 <_realloc_r>
    e7c4:	4680      	mov	r8, r0
    e7c6:	2800      	cmp	r0, #0
    e7c8:	d1c7      	bne.n	e75a <__sfvwrite_r+0x25a>
    e7ca:	9d00      	ldr	r5, [sp, #0]
    e7cc:	6921      	ldr	r1, [r4, #16]
    e7ce:	0028      	movs	r0, r5
    e7d0:	f7ff fdb8 	bl	e344 <_free_r>
    e7d4:	2280      	movs	r2, #128	; 0x80
    e7d6:	89a3      	ldrh	r3, [r4, #12]
    e7d8:	4393      	bics	r3, r2
    e7da:	3a74      	subs	r2, #116	; 0x74
    e7dc:	b21b      	sxth	r3, r3
    e7de:	602a      	str	r2, [r5, #0]
    e7e0:	e72f      	b.n	e642 <__sfvwrite_r+0x142>
    e7e2:	1c7d      	adds	r5, r7, #1
    e7e4:	e6de      	b.n	e5a4 <__sfvwrite_r+0xa4>
    e7e6:	2001      	movs	r0, #1
    e7e8:	4240      	negs	r0, r0
    e7ea:	e6bd      	b.n	e568 <__sfvwrite_r+0x68>
    e7ec:	9a00      	ldr	r2, [sp, #0]
    e7ee:	330c      	adds	r3, #12
    e7f0:	6013      	str	r3, [r2, #0]
    e7f2:	220c      	movs	r2, #12
    e7f4:	5ea3      	ldrsh	r3, [r4, r2]
    e7f6:	e724      	b.n	e642 <__sfvwrite_r+0x142>
    e7f8:	7ffffc00 	.word	0x7ffffc00
    e7fc:	fffffb7f 	.word	0xfffffb7f
    e800:	7fffffff 	.word	0x7fffffff

0000e804 <_fwalk_reent>:
    e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e806:	4647      	mov	r7, r8
    e808:	46ce      	mov	lr, r9
    e80a:	b580      	push	{r7, lr}
    e80c:	27b8      	movs	r7, #184	; 0xb8
    e80e:	4680      	mov	r8, r0
    e810:	00bf      	lsls	r7, r7, #2
    e812:	4447      	add	r7, r8
    e814:	4689      	mov	r9, r1
    e816:	2600      	movs	r6, #0
    e818:	2f00      	cmp	r7, #0
    e81a:	d014      	beq.n	e846 <_fwalk_reent+0x42>
    e81c:	687b      	ldr	r3, [r7, #4]
    e81e:	68bc      	ldr	r4, [r7, #8]
    e820:	1e5d      	subs	r5, r3, #1
    e822:	d40d      	bmi.n	e840 <_fwalk_reent+0x3c>
    e824:	89a3      	ldrh	r3, [r4, #12]
    e826:	2b01      	cmp	r3, #1
    e828:	d907      	bls.n	e83a <_fwalk_reent+0x36>
    e82a:	220e      	movs	r2, #14
    e82c:	5ea3      	ldrsh	r3, [r4, r2]
    e82e:	3301      	adds	r3, #1
    e830:	d003      	beq.n	e83a <_fwalk_reent+0x36>
    e832:	0021      	movs	r1, r4
    e834:	4640      	mov	r0, r8
    e836:	47c8      	blx	r9
    e838:	4306      	orrs	r6, r0
    e83a:	3468      	adds	r4, #104	; 0x68
    e83c:	3d01      	subs	r5, #1
    e83e:	d2f1      	bcs.n	e824 <_fwalk_reent+0x20>
    e840:	683f      	ldr	r7, [r7, #0]
    e842:	2f00      	cmp	r7, #0
    e844:	d1ea      	bne.n	e81c <_fwalk_reent+0x18>
    e846:	0030      	movs	r0, r6
    e848:	bc0c      	pop	{r2, r3}
    e84a:	4690      	mov	r8, r2
    e84c:	4699      	mov	r9, r3
    e84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e850 <_localeconv_r>:
    e850:	4b04      	ldr	r3, [pc, #16]	; (e864 <_localeconv_r+0x14>)
    e852:	681b      	ldr	r3, [r3, #0]
    e854:	6b58      	ldr	r0, [r3, #52]	; 0x34
    e856:	2800      	cmp	r0, #0
    e858:	d001      	beq.n	e85e <_localeconv_r+0xe>
    e85a:	30f0      	adds	r0, #240	; 0xf0
    e85c:	4770      	bx	lr
    e85e:	4802      	ldr	r0, [pc, #8]	; (e868 <_localeconv_r+0x18>)
    e860:	e7fb      	b.n	e85a <_localeconv_r+0xa>
    e862:	46c0      	nop			; (mov r8, r8)
    e864:	20000070 	.word	0x20000070
    e868:	200008b4 	.word	0x200008b4

0000e86c <__retarget_lock_init_recursive>:
    e86c:	4770      	bx	lr
    e86e:	46c0      	nop			; (mov r8, r8)

0000e870 <__retarget_lock_close_recursive>:
    e870:	4770      	bx	lr
    e872:	46c0      	nop			; (mov r8, r8)

0000e874 <__retarget_lock_acquire_recursive>:
    e874:	4770      	bx	lr
    e876:	46c0      	nop			; (mov r8, r8)

0000e878 <__retarget_lock_release_recursive>:
    e878:	4770      	bx	lr
    e87a:	46c0      	nop			; (mov r8, r8)

0000e87c <__swhatbuf_r>:
    e87c:	b570      	push	{r4, r5, r6, lr}
    e87e:	000c      	movs	r4, r1
    e880:	001e      	movs	r6, r3
    e882:	230e      	movs	r3, #14
    e884:	5ec9      	ldrsh	r1, [r1, r3]
    e886:	b090      	sub	sp, #64	; 0x40
    e888:	0015      	movs	r5, r2
    e88a:	2900      	cmp	r1, #0
    e88c:	db15      	blt.n	e8ba <__swhatbuf_r+0x3e>
    e88e:	aa01      	add	r2, sp, #4
    e890:	f001 faa4 	bl	fddc <_fstat_r>
    e894:	2800      	cmp	r0, #0
    e896:	db10      	blt.n	e8ba <__swhatbuf_r+0x3e>
    e898:	22f0      	movs	r2, #240	; 0xf0
    e89a:	9b02      	ldr	r3, [sp, #8]
    e89c:	0212      	lsls	r2, r2, #8
    e89e:	4013      	ands	r3, r2
    e8a0:	4a0d      	ldr	r2, [pc, #52]	; (e8d8 <__swhatbuf_r+0x5c>)
    e8a2:	2080      	movs	r0, #128	; 0x80
    e8a4:	4694      	mov	ip, r2
    e8a6:	4463      	add	r3, ip
    e8a8:	425a      	negs	r2, r3
    e8aa:	4153      	adcs	r3, r2
    e8ac:	6033      	str	r3, [r6, #0]
    e8ae:	2380      	movs	r3, #128	; 0x80
    e8b0:	00db      	lsls	r3, r3, #3
    e8b2:	602b      	str	r3, [r5, #0]
    e8b4:	0100      	lsls	r0, r0, #4
    e8b6:	b010      	add	sp, #64	; 0x40
    e8b8:	bd70      	pop	{r4, r5, r6, pc}
    e8ba:	2300      	movs	r3, #0
    e8bc:	6033      	str	r3, [r6, #0]
    e8be:	89a3      	ldrh	r3, [r4, #12]
    e8c0:	061b      	lsls	r3, r3, #24
    e8c2:	d503      	bpl.n	e8cc <__swhatbuf_r+0x50>
    e8c4:	2340      	movs	r3, #64	; 0x40
    e8c6:	2000      	movs	r0, #0
    e8c8:	602b      	str	r3, [r5, #0]
    e8ca:	e7f4      	b.n	e8b6 <__swhatbuf_r+0x3a>
    e8cc:	2380      	movs	r3, #128	; 0x80
    e8ce:	00db      	lsls	r3, r3, #3
    e8d0:	602b      	str	r3, [r5, #0]
    e8d2:	2000      	movs	r0, #0
    e8d4:	e7ef      	b.n	e8b6 <__swhatbuf_r+0x3a>
    e8d6:	46c0      	nop			; (mov r8, r8)
    e8d8:	ffffe000 	.word	0xffffe000

0000e8dc <__smakebuf_r>:
    e8dc:	b570      	push	{r4, r5, r6, lr}
    e8de:	898b      	ldrh	r3, [r1, #12]
    e8e0:	b082      	sub	sp, #8
    e8e2:	0006      	movs	r6, r0
    e8e4:	000c      	movs	r4, r1
    e8e6:	079b      	lsls	r3, r3, #30
    e8e8:	d507      	bpl.n	e8fa <__smakebuf_r+0x1e>
    e8ea:	0023      	movs	r3, r4
    e8ec:	3343      	adds	r3, #67	; 0x43
    e8ee:	6023      	str	r3, [r4, #0]
    e8f0:	6123      	str	r3, [r4, #16]
    e8f2:	2301      	movs	r3, #1
    e8f4:	6163      	str	r3, [r4, #20]
    e8f6:	b002      	add	sp, #8
    e8f8:	bd70      	pop	{r4, r5, r6, pc}
    e8fa:	ab01      	add	r3, sp, #4
    e8fc:	466a      	mov	r2, sp
    e8fe:	f7ff ffbd 	bl	e87c <__swhatbuf_r>
    e902:	9900      	ldr	r1, [sp, #0]
    e904:	0005      	movs	r5, r0
    e906:	0030      	movs	r0, r6
    e908:	f000 f830 	bl	e96c <_malloc_r>
    e90c:	2800      	cmp	r0, #0
    e90e:	d01e      	beq.n	e94e <__smakebuf_r+0x72>
    e910:	2280      	movs	r2, #128	; 0x80
    e912:	4b15      	ldr	r3, [pc, #84]	; (e968 <__smakebuf_r+0x8c>)
    e914:	63f3      	str	r3, [r6, #60]	; 0x3c
    e916:	89a3      	ldrh	r3, [r4, #12]
    e918:	6020      	str	r0, [r4, #0]
    e91a:	4313      	orrs	r3, r2
    e91c:	9a00      	ldr	r2, [sp, #0]
    e91e:	b21b      	sxth	r3, r3
    e920:	6162      	str	r2, [r4, #20]
    e922:	9a01      	ldr	r2, [sp, #4]
    e924:	81a3      	strh	r3, [r4, #12]
    e926:	6120      	str	r0, [r4, #16]
    e928:	2a00      	cmp	r2, #0
    e92a:	d102      	bne.n	e932 <__smakebuf_r+0x56>
    e92c:	432b      	orrs	r3, r5
    e92e:	81a3      	strh	r3, [r4, #12]
    e930:	e7e1      	b.n	e8f6 <__smakebuf_r+0x1a>
    e932:	230e      	movs	r3, #14
    e934:	5ee1      	ldrsh	r1, [r4, r3]
    e936:	0030      	movs	r0, r6
    e938:	f001 fa64 	bl	fe04 <_isatty_r>
    e93c:	2800      	cmp	r0, #0
    e93e:	d010      	beq.n	e962 <__smakebuf_r+0x86>
    e940:	2203      	movs	r2, #3
    e942:	89a3      	ldrh	r3, [r4, #12]
    e944:	4393      	bics	r3, r2
    e946:	2201      	movs	r2, #1
    e948:	4313      	orrs	r3, r2
    e94a:	b21b      	sxth	r3, r3
    e94c:	e7ee      	b.n	e92c <__smakebuf_r+0x50>
    e94e:	220c      	movs	r2, #12
    e950:	5ea3      	ldrsh	r3, [r4, r2]
    e952:	059a      	lsls	r2, r3, #22
    e954:	d4cf      	bmi.n	e8f6 <__smakebuf_r+0x1a>
    e956:	2203      	movs	r2, #3
    e958:	4393      	bics	r3, r2
    e95a:	2202      	movs	r2, #2
    e95c:	4313      	orrs	r3, r2
    e95e:	81a3      	strh	r3, [r4, #12]
    e960:	e7c3      	b.n	e8ea <__smakebuf_r+0xe>
    e962:	220c      	movs	r2, #12
    e964:	5ea3      	ldrsh	r3, [r4, r2]
    e966:	e7e1      	b.n	e92c <__smakebuf_r+0x50>
    e968:	0000e191 	.word	0x0000e191

0000e96c <_malloc_r>:
    e96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e96e:	4657      	mov	r7, sl
    e970:	4645      	mov	r5, r8
    e972:	46de      	mov	lr, fp
    e974:	464e      	mov	r6, r9
    e976:	b5e0      	push	{r5, r6, r7, lr}
    e978:	000d      	movs	r5, r1
    e97a:	350b      	adds	r5, #11
    e97c:	b083      	sub	sp, #12
    e97e:	0007      	movs	r7, r0
    e980:	2d16      	cmp	r5, #22
    e982:	d800      	bhi.n	e986 <_malloc_r+0x1a>
    e984:	e09f      	b.n	eac6 <_malloc_r+0x15a>
    e986:	2307      	movs	r3, #7
    e988:	439d      	bics	r5, r3
    e98a:	d500      	bpl.n	e98e <_malloc_r+0x22>
    e98c:	e0c4      	b.n	eb18 <_malloc_r+0x1ac>
    e98e:	42a9      	cmp	r1, r5
    e990:	d900      	bls.n	e994 <_malloc_r+0x28>
    e992:	e0c1      	b.n	eb18 <_malloc_r+0x1ac>
    e994:	f000 fb2e 	bl	eff4 <__malloc_lock>
    e998:	23f8      	movs	r3, #248	; 0xf8
    e99a:	33ff      	adds	r3, #255	; 0xff
    e99c:	429d      	cmp	r5, r3
    e99e:	d800      	bhi.n	e9a2 <_malloc_r+0x36>
    e9a0:	e28f      	b.n	eec2 <_malloc_r+0x556>
    e9a2:	0a68      	lsrs	r0, r5, #9
    e9a4:	d100      	bne.n	e9a8 <_malloc_r+0x3c>
    e9a6:	e0bb      	b.n	eb20 <_malloc_r+0x1b4>
    e9a8:	2804      	cmp	r0, #4
    e9aa:	d900      	bls.n	e9ae <_malloc_r+0x42>
    e9ac:	e162      	b.n	ec74 <_malloc_r+0x308>
    e9ae:	2338      	movs	r3, #56	; 0x38
    e9b0:	4698      	mov	r8, r3
    e9b2:	09a8      	lsrs	r0, r5, #6
    e9b4:	4480      	add	r8, r0
    e9b6:	3039      	adds	r0, #57	; 0x39
    e9b8:	00c1      	lsls	r1, r0, #3
    e9ba:	4ed2      	ldr	r6, [pc, #840]	; (ed04 <_malloc_r+0x398>)
    e9bc:	1871      	adds	r1, r6, r1
    e9be:	3908      	subs	r1, #8
    e9c0:	68cc      	ldr	r4, [r1, #12]
    e9c2:	42a1      	cmp	r1, r4
    e9c4:	d019      	beq.n	e9fa <_malloc_r+0x8e>
    e9c6:	2303      	movs	r3, #3
    e9c8:	6862      	ldr	r2, [r4, #4]
    e9ca:	439a      	bics	r2, r3
    e9cc:	0013      	movs	r3, r2
    e9ce:	1b52      	subs	r2, r2, r5
    e9d0:	2a0f      	cmp	r2, #15
    e9d2:	dd00      	ble.n	e9d6 <_malloc_r+0x6a>
    e9d4:	e0aa      	b.n	eb2c <_malloc_r+0x1c0>
    e9d6:	2a00      	cmp	r2, #0
    e9d8:	db00      	blt.n	e9dc <_malloc_r+0x70>
    e9da:	e088      	b.n	eaee <_malloc_r+0x182>
    e9dc:	2303      	movs	r3, #3
    e9de:	469c      	mov	ip, r3
    e9e0:	e008      	b.n	e9f4 <_malloc_r+0x88>
    e9e2:	4662      	mov	r2, ip
    e9e4:	6863      	ldr	r3, [r4, #4]
    e9e6:	4393      	bics	r3, r2
    e9e8:	1b5a      	subs	r2, r3, r5
    e9ea:	2a0f      	cmp	r2, #15
    e9ec:	dd00      	ble.n	e9f0 <_malloc_r+0x84>
    e9ee:	e09d      	b.n	eb2c <_malloc_r+0x1c0>
    e9f0:	2a00      	cmp	r2, #0
    e9f2:	da7c      	bge.n	eaee <_malloc_r+0x182>
    e9f4:	68e4      	ldr	r4, [r4, #12]
    e9f6:	42a1      	cmp	r1, r4
    e9f8:	d1f3      	bne.n	e9e2 <_malloc_r+0x76>
    e9fa:	0032      	movs	r2, r6
    e9fc:	6934      	ldr	r4, [r6, #16]
    e9fe:	3208      	adds	r2, #8
    ea00:	4294      	cmp	r4, r2
    ea02:	d100      	bne.n	ea06 <_malloc_r+0x9a>
    ea04:	e190      	b.n	ed28 <_malloc_r+0x3bc>
    ea06:	2303      	movs	r3, #3
    ea08:	6861      	ldr	r1, [r4, #4]
    ea0a:	4399      	bics	r1, r3
    ea0c:	4689      	mov	r9, r1
    ea0e:	1b49      	subs	r1, r1, r5
    ea10:	290f      	cmp	r1, #15
    ea12:	dd00      	ble.n	ea16 <_malloc_r+0xaa>
    ea14:	e162      	b.n	ecdc <_malloc_r+0x370>
    ea16:	6172      	str	r2, [r6, #20]
    ea18:	6132      	str	r2, [r6, #16]
    ea1a:	2900      	cmp	r1, #0
    ea1c:	db00      	blt.n	ea20 <_malloc_r+0xb4>
    ea1e:	e087      	b.n	eb30 <_malloc_r+0x1c4>
    ea20:	4ab9      	ldr	r2, [pc, #740]	; (ed08 <_malloc_r+0x39c>)
    ea22:	464b      	mov	r3, r9
    ea24:	4591      	cmp	r9, r2
    ea26:	d900      	bls.n	ea2a <_malloc_r+0xbe>
    ea28:	e130      	b.n	ec8c <_malloc_r+0x320>
    ea2a:	08db      	lsrs	r3, r3, #3
    ea2c:	3aff      	subs	r2, #255	; 0xff
    ea2e:	1099      	asrs	r1, r3, #2
    ea30:	3aff      	subs	r2, #255	; 0xff
    ea32:	408a      	lsls	r2, r1
    ea34:	00db      	lsls	r3, r3, #3
    ea36:	6871      	ldr	r1, [r6, #4]
    ea38:	199b      	adds	r3, r3, r6
    ea3a:	430a      	orrs	r2, r1
    ea3c:	6899      	ldr	r1, [r3, #8]
    ea3e:	6072      	str	r2, [r6, #4]
    ea40:	60e3      	str	r3, [r4, #12]
    ea42:	60a1      	str	r1, [r4, #8]
    ea44:	609c      	str	r4, [r3, #8]
    ea46:	0013      	movs	r3, r2
    ea48:	60cc      	str	r4, [r1, #12]
    ea4a:	2101      	movs	r1, #1
    ea4c:	1082      	asrs	r2, r0, #2
    ea4e:	4091      	lsls	r1, r2
    ea50:	4299      	cmp	r1, r3
    ea52:	d86f      	bhi.n	eb34 <_malloc_r+0x1c8>
    ea54:	420b      	tst	r3, r1
    ea56:	d105      	bne.n	ea64 <_malloc_r+0xf8>
    ea58:	2203      	movs	r2, #3
    ea5a:	4390      	bics	r0, r2
    ea5c:	0049      	lsls	r1, r1, #1
    ea5e:	3004      	adds	r0, #4
    ea60:	420b      	tst	r3, r1
    ea62:	d0fb      	beq.n	ea5c <_malloc_r+0xf0>
    ea64:	2303      	movs	r3, #3
    ea66:	4698      	mov	r8, r3
    ea68:	00c3      	lsls	r3, r0, #3
    ea6a:	4699      	mov	r9, r3
    ea6c:	44b1      	add	r9, r6
    ea6e:	46cc      	mov	ip, r9
    ea70:	4682      	mov	sl, r0
    ea72:	4663      	mov	r3, ip
    ea74:	68dc      	ldr	r4, [r3, #12]
    ea76:	45a4      	cmp	ip, r4
    ea78:	d107      	bne.n	ea8a <_malloc_r+0x11e>
    ea7a:	e157      	b.n	ed2c <_malloc_r+0x3c0>
    ea7c:	2a00      	cmp	r2, #0
    ea7e:	db00      	blt.n	ea82 <_malloc_r+0x116>
    ea80:	e166      	b.n	ed50 <_malloc_r+0x3e4>
    ea82:	68e4      	ldr	r4, [r4, #12]
    ea84:	45a4      	cmp	ip, r4
    ea86:	d100      	bne.n	ea8a <_malloc_r+0x11e>
    ea88:	e150      	b.n	ed2c <_malloc_r+0x3c0>
    ea8a:	4642      	mov	r2, r8
    ea8c:	6863      	ldr	r3, [r4, #4]
    ea8e:	4393      	bics	r3, r2
    ea90:	1b5a      	subs	r2, r3, r5
    ea92:	2a0f      	cmp	r2, #15
    ea94:	ddf2      	ble.n	ea7c <_malloc_r+0x110>
    ea96:	2001      	movs	r0, #1
    ea98:	4680      	mov	r8, r0
    ea9a:	1961      	adds	r1, r4, r5
    ea9c:	4305      	orrs	r5, r0
    ea9e:	6065      	str	r5, [r4, #4]
    eaa0:	68a0      	ldr	r0, [r4, #8]
    eaa2:	68e5      	ldr	r5, [r4, #12]
    eaa4:	3608      	adds	r6, #8
    eaa6:	60c5      	str	r5, [r0, #12]
    eaa8:	60a8      	str	r0, [r5, #8]
    eaaa:	4640      	mov	r0, r8
    eaac:	60f1      	str	r1, [r6, #12]
    eaae:	60b1      	str	r1, [r6, #8]
    eab0:	4310      	orrs	r0, r2
    eab2:	6048      	str	r0, [r1, #4]
    eab4:	60ce      	str	r6, [r1, #12]
    eab6:	608e      	str	r6, [r1, #8]
    eab8:	0038      	movs	r0, r7
    eaba:	50e2      	str	r2, [r4, r3]
    eabc:	f000 faa2 	bl	f004 <__malloc_unlock>
    eac0:	0020      	movs	r0, r4
    eac2:	3008      	adds	r0, #8
    eac4:	e021      	b.n	eb0a <_malloc_r+0x19e>
    eac6:	2910      	cmp	r1, #16
    eac8:	d826      	bhi.n	eb18 <_malloc_r+0x1ac>
    eaca:	0038      	movs	r0, r7
    eacc:	f000 fa92 	bl	eff4 <__malloc_lock>
    ead0:	2510      	movs	r5, #16
    ead2:	2318      	movs	r3, #24
    ead4:	2002      	movs	r0, #2
    ead6:	4e8b      	ldr	r6, [pc, #556]	; (ed04 <_malloc_r+0x398>)
    ead8:	18f3      	adds	r3, r6, r3
    eada:	001a      	movs	r2, r3
    eadc:	685c      	ldr	r4, [r3, #4]
    eade:	3a08      	subs	r2, #8
    eae0:	4294      	cmp	r4, r2
    eae2:	d100      	bne.n	eae6 <_malloc_r+0x17a>
    eae4:	e12e      	b.n	ed44 <_malloc_r+0x3d8>
    eae6:	2303      	movs	r3, #3
    eae8:	6862      	ldr	r2, [r4, #4]
    eaea:	439a      	bics	r2, r3
    eaec:	0013      	movs	r3, r2
    eaee:	68e2      	ldr	r2, [r4, #12]
    eaf0:	68a1      	ldr	r1, [r4, #8]
    eaf2:	60ca      	str	r2, [r1, #12]
    eaf4:	6091      	str	r1, [r2, #8]
    eaf6:	2201      	movs	r2, #1
    eaf8:	18e3      	adds	r3, r4, r3
    eafa:	6859      	ldr	r1, [r3, #4]
    eafc:	0038      	movs	r0, r7
    eafe:	430a      	orrs	r2, r1
    eb00:	605a      	str	r2, [r3, #4]
    eb02:	f000 fa7f 	bl	f004 <__malloc_unlock>
    eb06:	0020      	movs	r0, r4
    eb08:	3008      	adds	r0, #8
    eb0a:	b003      	add	sp, #12
    eb0c:	bc3c      	pop	{r2, r3, r4, r5}
    eb0e:	4690      	mov	r8, r2
    eb10:	4699      	mov	r9, r3
    eb12:	46a2      	mov	sl, r4
    eb14:	46ab      	mov	fp, r5
    eb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb18:	230c      	movs	r3, #12
    eb1a:	2000      	movs	r0, #0
    eb1c:	603b      	str	r3, [r7, #0]
    eb1e:	e7f4      	b.n	eb0a <_malloc_r+0x19e>
    eb20:	2180      	movs	r1, #128	; 0x80
    eb22:	233f      	movs	r3, #63	; 0x3f
    eb24:	2040      	movs	r0, #64	; 0x40
    eb26:	0089      	lsls	r1, r1, #2
    eb28:	4698      	mov	r8, r3
    eb2a:	e746      	b.n	e9ba <_malloc_r+0x4e>
    eb2c:	4640      	mov	r0, r8
    eb2e:	e764      	b.n	e9fa <_malloc_r+0x8e>
    eb30:	464b      	mov	r3, r9
    eb32:	e7e0      	b.n	eaf6 <_malloc_r+0x18a>
    eb34:	2303      	movs	r3, #3
    eb36:	68b4      	ldr	r4, [r6, #8]
    eb38:	6862      	ldr	r2, [r4, #4]
    eb3a:	439a      	bics	r2, r3
    eb3c:	4690      	mov	r8, r2
    eb3e:	42aa      	cmp	r2, r5
    eb40:	d303      	bcc.n	eb4a <_malloc_r+0x1de>
    eb42:	1b53      	subs	r3, r2, r5
    eb44:	2b0f      	cmp	r3, #15
    eb46:	dd00      	ble.n	eb4a <_malloc_r+0x1de>
    eb48:	e086      	b.n	ec58 <_malloc_r+0x2ec>
    eb4a:	0023      	movs	r3, r4
    eb4c:	4443      	add	r3, r8
    eb4e:	4a6f      	ldr	r2, [pc, #444]	; (ed0c <_malloc_r+0x3a0>)
    eb50:	9301      	str	r3, [sp, #4]
    eb52:	4b6f      	ldr	r3, [pc, #444]	; (ed10 <_malloc_r+0x3a4>)
    eb54:	4693      	mov	fp, r2
    eb56:	681b      	ldr	r3, [r3, #0]
    eb58:	6812      	ldr	r2, [r2, #0]
    eb5a:	18eb      	adds	r3, r5, r3
    eb5c:	3201      	adds	r2, #1
    eb5e:	d100      	bne.n	eb62 <_malloc_r+0x1f6>
    eb60:	e168      	b.n	ee34 <_malloc_r+0x4c8>
    eb62:	4a6c      	ldr	r2, [pc, #432]	; (ed14 <_malloc_r+0x3a8>)
    eb64:	4694      	mov	ip, r2
    eb66:	4463      	add	r3, ip
    eb68:	0b1b      	lsrs	r3, r3, #12
    eb6a:	031b      	lsls	r3, r3, #12
    eb6c:	9300      	str	r3, [sp, #0]
    eb6e:	9900      	ldr	r1, [sp, #0]
    eb70:	0038      	movs	r0, r7
    eb72:	f000 ff55 	bl	fa20 <_sbrk_r>
    eb76:	0003      	movs	r3, r0
    eb78:	4681      	mov	r9, r0
    eb7a:	3301      	adds	r3, #1
    eb7c:	d061      	beq.n	ec42 <_malloc_r+0x2d6>
    eb7e:	9b01      	ldr	r3, [sp, #4]
    eb80:	4283      	cmp	r3, r0
    eb82:	d900      	bls.n	eb86 <_malloc_r+0x21a>
    eb84:	e0ff      	b.n	ed86 <_malloc_r+0x41a>
    eb86:	4b64      	ldr	r3, [pc, #400]	; (ed18 <_malloc_r+0x3ac>)
    eb88:	9a00      	ldr	r2, [sp, #0]
    eb8a:	469a      	mov	sl, r3
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	469c      	mov	ip, r3
    eb90:	4653      	mov	r3, sl
    eb92:	4462      	add	r2, ip
    eb94:	601a      	str	r2, [r3, #0]
    eb96:	9b01      	ldr	r3, [sp, #4]
    eb98:	0011      	movs	r1, r2
    eb9a:	4283      	cmp	r3, r0
    eb9c:	d100      	bne.n	eba0 <_malloc_r+0x234>
    eb9e:	e155      	b.n	ee4c <_malloc_r+0x4e0>
    eba0:	465b      	mov	r3, fp
    eba2:	681b      	ldr	r3, [r3, #0]
    eba4:	3301      	adds	r3, #1
    eba6:	d100      	bne.n	ebaa <_malloc_r+0x23e>
    eba8:	e16c      	b.n	ee84 <_malloc_r+0x518>
    ebaa:	464b      	mov	r3, r9
    ebac:	9a01      	ldr	r2, [sp, #4]
    ebae:	1a9b      	subs	r3, r3, r2
    ebb0:	1859      	adds	r1, r3, r1
    ebb2:	4653      	mov	r3, sl
    ebb4:	6019      	str	r1, [r3, #0]
    ebb6:	2307      	movs	r3, #7
    ebb8:	464a      	mov	r2, r9
    ebba:	4013      	ands	r3, r2
    ebbc:	d100      	bne.n	ebc0 <_malloc_r+0x254>
    ebbe:	e124      	b.n	ee0a <_malloc_r+0x49e>
    ebc0:	2108      	movs	r1, #8
    ebc2:	4689      	mov	r9, r1
    ebc4:	4955      	ldr	r1, [pc, #340]	; (ed1c <_malloc_r+0x3b0>)
    ebc6:	1ad2      	subs	r2, r2, r3
    ebc8:	4491      	add	r9, r2
    ebca:	1acb      	subs	r3, r1, r3
    ebcc:	9a00      	ldr	r2, [sp, #0]
    ebce:	0038      	movs	r0, r7
    ebd0:	444a      	add	r2, r9
    ebd2:	0511      	lsls	r1, r2, #20
    ebd4:	0d09      	lsrs	r1, r1, #20
    ebd6:	1a5b      	subs	r3, r3, r1
    ebd8:	0019      	movs	r1, r3
    ebda:	469b      	mov	fp, r3
    ebdc:	f000 ff20 	bl	fa20 <_sbrk_r>
    ebe0:	1c43      	adds	r3, r0, #1
    ebe2:	d100      	bne.n	ebe6 <_malloc_r+0x27a>
    ebe4:	e142      	b.n	ee6c <_malloc_r+0x500>
    ebe6:	464b      	mov	r3, r9
    ebe8:	1ac0      	subs	r0, r0, r3
    ebea:	2301      	movs	r3, #1
    ebec:	4458      	add	r0, fp
    ebee:	4318      	orrs	r0, r3
    ebf0:	4653      	mov	r3, sl
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	445b      	add	r3, fp
    ebf6:	0019      	movs	r1, r3
    ebf8:	4653      	mov	r3, sl
    ebfa:	6019      	str	r1, [r3, #0]
    ebfc:	464b      	mov	r3, r9
    ebfe:	60b3      	str	r3, [r6, #8]
    ec00:	6058      	str	r0, [r3, #4]
    ec02:	42b4      	cmp	r4, r6
    ec04:	d013      	beq.n	ec2e <_malloc_r+0x2c2>
    ec06:	4643      	mov	r3, r8
    ec08:	2b0f      	cmp	r3, #15
    ec0a:	d800      	bhi.n	ec0e <_malloc_r+0x2a2>
    ec0c:	e0e8      	b.n	ede0 <_malloc_r+0x474>
    ec0e:	4643      	mov	r3, r8
    ec10:	2207      	movs	r2, #7
    ec12:	6860      	ldr	r0, [r4, #4]
    ec14:	3b0c      	subs	r3, #12
    ec16:	4393      	bics	r3, r2
    ec18:	3a06      	subs	r2, #6
    ec1a:	4002      	ands	r2, r0
    ec1c:	2005      	movs	r0, #5
    ec1e:	431a      	orrs	r2, r3
    ec20:	6062      	str	r2, [r4, #4]
    ec22:	18e2      	adds	r2, r4, r3
    ec24:	6050      	str	r0, [r2, #4]
    ec26:	6090      	str	r0, [r2, #8]
    ec28:	2b0f      	cmp	r3, #15
    ec2a:	d900      	bls.n	ec2e <_malloc_r+0x2c2>
    ec2c:	e122      	b.n	ee74 <_malloc_r+0x508>
    ec2e:	4b3c      	ldr	r3, [pc, #240]	; (ed20 <_malloc_r+0x3b4>)
    ec30:	681a      	ldr	r2, [r3, #0]
    ec32:	4291      	cmp	r1, r2
    ec34:	d900      	bls.n	ec38 <_malloc_r+0x2cc>
    ec36:	6019      	str	r1, [r3, #0]
    ec38:	4b3a      	ldr	r3, [pc, #232]	; (ed24 <_malloc_r+0x3b8>)
    ec3a:	681a      	ldr	r2, [r3, #0]
    ec3c:	4291      	cmp	r1, r2
    ec3e:	d900      	bls.n	ec42 <_malloc_r+0x2d6>
    ec40:	6019      	str	r1, [r3, #0]
    ec42:	2303      	movs	r3, #3
    ec44:	68b4      	ldr	r4, [r6, #8]
    ec46:	6862      	ldr	r2, [r4, #4]
    ec48:	439a      	bics	r2, r3
    ec4a:	1b53      	subs	r3, r2, r5
    ec4c:	4295      	cmp	r5, r2
    ec4e:	d900      	bls.n	ec52 <_malloc_r+0x2e6>
    ec50:	e0c9      	b.n	ede6 <_malloc_r+0x47a>
    ec52:	2b0f      	cmp	r3, #15
    ec54:	dc00      	bgt.n	ec58 <_malloc_r+0x2ec>
    ec56:	e0c6      	b.n	ede6 <_malloc_r+0x47a>
    ec58:	2201      	movs	r2, #1
    ec5a:	0029      	movs	r1, r5
    ec5c:	4313      	orrs	r3, r2
    ec5e:	4311      	orrs	r1, r2
    ec60:	1965      	adds	r5, r4, r5
    ec62:	6061      	str	r1, [r4, #4]
    ec64:	0038      	movs	r0, r7
    ec66:	60b5      	str	r5, [r6, #8]
    ec68:	606b      	str	r3, [r5, #4]
    ec6a:	f000 f9cb 	bl	f004 <__malloc_unlock>
    ec6e:	0020      	movs	r0, r4
    ec70:	3008      	adds	r0, #8
    ec72:	e74a      	b.n	eb0a <_malloc_r+0x19e>
    ec74:	2814      	cmp	r0, #20
    ec76:	d97a      	bls.n	ed6e <_malloc_r+0x402>
    ec78:	2854      	cmp	r0, #84	; 0x54
    ec7a:	d900      	bls.n	ec7e <_malloc_r+0x312>
    ec7c:	e0ba      	b.n	edf4 <_malloc_r+0x488>
    ec7e:	236e      	movs	r3, #110	; 0x6e
    ec80:	4698      	mov	r8, r3
    ec82:	0b28      	lsrs	r0, r5, #12
    ec84:	4480      	add	r8, r0
    ec86:	306f      	adds	r0, #111	; 0x6f
    ec88:	00c1      	lsls	r1, r0, #3
    ec8a:	e696      	b.n	e9ba <_malloc_r+0x4e>
    ec8c:	0a5a      	lsrs	r2, r3, #9
    ec8e:	2a04      	cmp	r2, #4
    ec90:	d973      	bls.n	ed7a <_malloc_r+0x40e>
    ec92:	2a14      	cmp	r2, #20
    ec94:	d900      	bls.n	ec98 <_malloc_r+0x32c>
    ec96:	e0d0      	b.n	ee3a <_malloc_r+0x4ce>
    ec98:	0011      	movs	r1, r2
    ec9a:	325c      	adds	r2, #92	; 0x5c
    ec9c:	315b      	adds	r1, #91	; 0x5b
    ec9e:	00d2      	lsls	r2, r2, #3
    eca0:	2308      	movs	r3, #8
    eca2:	425b      	negs	r3, r3
    eca4:	469c      	mov	ip, r3
    eca6:	18b2      	adds	r2, r6, r2
    eca8:	4494      	add	ip, r2
    ecaa:	4663      	mov	r3, ip
    ecac:	689a      	ldr	r2, [r3, #8]
    ecae:	2303      	movs	r3, #3
    ecb0:	4698      	mov	r8, r3
    ecb2:	4594      	cmp	ip, r2
    ecb4:	d100      	bne.n	ecb8 <_malloc_r+0x34c>
    ecb6:	e0ab      	b.n	ee10 <_malloc_r+0x4a4>
    ecb8:	4643      	mov	r3, r8
    ecba:	6851      	ldr	r1, [r2, #4]
    ecbc:	4399      	bics	r1, r3
    ecbe:	4589      	cmp	r9, r1
    ecc0:	d300      	bcc.n	ecc4 <_malloc_r+0x358>
    ecc2:	e095      	b.n	edf0 <_malloc_r+0x484>
    ecc4:	6892      	ldr	r2, [r2, #8]
    ecc6:	4594      	cmp	ip, r2
    ecc8:	d1f6      	bne.n	ecb8 <_malloc_r+0x34c>
    ecca:	4663      	mov	r3, ip
    eccc:	68da      	ldr	r2, [r3, #12]
    ecce:	6873      	ldr	r3, [r6, #4]
    ecd0:	4661      	mov	r1, ip
    ecd2:	60e2      	str	r2, [r4, #12]
    ecd4:	60a1      	str	r1, [r4, #8]
    ecd6:	6094      	str	r4, [r2, #8]
    ecd8:	60cc      	str	r4, [r1, #12]
    ecda:	e6b6      	b.n	ea4a <_malloc_r+0xde>
    ecdc:	2301      	movs	r3, #1
    ecde:	1960      	adds	r0, r4, r5
    ece0:	431d      	orrs	r5, r3
    ece2:	6065      	str	r5, [r4, #4]
    ece4:	6170      	str	r0, [r6, #20]
    ece6:	6130      	str	r0, [r6, #16]
    ece8:	60c2      	str	r2, [r0, #12]
    ecea:	6082      	str	r2, [r0, #8]
    ecec:	001a      	movs	r2, r3
    ecee:	464b      	mov	r3, r9
    ecf0:	430a      	orrs	r2, r1
    ecf2:	6042      	str	r2, [r0, #4]
    ecf4:	0038      	movs	r0, r7
    ecf6:	50e1      	str	r1, [r4, r3]
    ecf8:	f000 f984 	bl	f004 <__malloc_unlock>
    ecfc:	0020      	movs	r0, r4
    ecfe:	3008      	adds	r0, #8
    ed00:	e703      	b.n	eb0a <_malloc_r+0x19e>
    ed02:	46c0      	nop			; (mov r8, r8)
    ed04:	200004a4 	.word	0x200004a4
    ed08:	000001ff 	.word	0x000001ff
    ed0c:	200008ac 	.word	0x200008ac
    ed10:	20001450 	.word	0x20001450
    ed14:	0000100f 	.word	0x0000100f
    ed18:	20001420 	.word	0x20001420
    ed1c:	00001008 	.word	0x00001008
    ed20:	20001448 	.word	0x20001448
    ed24:	2000144c 	.word	0x2000144c
    ed28:	6873      	ldr	r3, [r6, #4]
    ed2a:	e68e      	b.n	ea4a <_malloc_r+0xde>
    ed2c:	2308      	movs	r3, #8
    ed2e:	469b      	mov	fp, r3
    ed30:	3b07      	subs	r3, #7
    ed32:	44dc      	add	ip, fp
    ed34:	469b      	mov	fp, r3
    ed36:	44da      	add	sl, fp
    ed38:	4643      	mov	r3, r8
    ed3a:	4652      	mov	r2, sl
    ed3c:	4213      	tst	r3, r2
    ed3e:	d000      	beq.n	ed42 <_malloc_r+0x3d6>
    ed40:	e697      	b.n	ea72 <_malloc_r+0x106>
    ed42:	e037      	b.n	edb4 <_malloc_r+0x448>
    ed44:	68dc      	ldr	r4, [r3, #12]
    ed46:	3002      	adds	r0, #2
    ed48:	42a3      	cmp	r3, r4
    ed4a:	d100      	bne.n	ed4e <_malloc_r+0x3e2>
    ed4c:	e655      	b.n	e9fa <_malloc_r+0x8e>
    ed4e:	e6ca      	b.n	eae6 <_malloc_r+0x17a>
    ed50:	2201      	movs	r2, #1
    ed52:	18e3      	adds	r3, r4, r3
    ed54:	6859      	ldr	r1, [r3, #4]
    ed56:	0038      	movs	r0, r7
    ed58:	430a      	orrs	r2, r1
    ed5a:	605a      	str	r2, [r3, #4]
    ed5c:	68e3      	ldr	r3, [r4, #12]
    ed5e:	68a2      	ldr	r2, [r4, #8]
    ed60:	60d3      	str	r3, [r2, #12]
    ed62:	609a      	str	r2, [r3, #8]
    ed64:	f000 f94e 	bl	f004 <__malloc_unlock>
    ed68:	0020      	movs	r0, r4
    ed6a:	3008      	adds	r0, #8
    ed6c:	e6cd      	b.n	eb0a <_malloc_r+0x19e>
    ed6e:	235b      	movs	r3, #91	; 0x5b
    ed70:	4698      	mov	r8, r3
    ed72:	4480      	add	r8, r0
    ed74:	305c      	adds	r0, #92	; 0x5c
    ed76:	00c1      	lsls	r1, r0, #3
    ed78:	e61f      	b.n	e9ba <_malloc_r+0x4e>
    ed7a:	099a      	lsrs	r2, r3, #6
    ed7c:	0011      	movs	r1, r2
    ed7e:	3239      	adds	r2, #57	; 0x39
    ed80:	3138      	adds	r1, #56	; 0x38
    ed82:	00d2      	lsls	r2, r2, #3
    ed84:	e78c      	b.n	eca0 <_malloc_r+0x334>
    ed86:	42b4      	cmp	r4, r6
    ed88:	d000      	beq.n	ed8c <_malloc_r+0x420>
    ed8a:	e75a      	b.n	ec42 <_malloc_r+0x2d6>
    ed8c:	4b4f      	ldr	r3, [pc, #316]	; (eecc <_malloc_r+0x560>)
    ed8e:	9a00      	ldr	r2, [sp, #0]
    ed90:	469a      	mov	sl, r3
    ed92:	681b      	ldr	r3, [r3, #0]
    ed94:	469c      	mov	ip, r3
    ed96:	4653      	mov	r3, sl
    ed98:	4462      	add	r2, ip
    ed9a:	0011      	movs	r1, r2
    ed9c:	601a      	str	r2, [r3, #0]
    ed9e:	e6ff      	b.n	eba0 <_malloc_r+0x234>
    eda0:	2308      	movs	r3, #8
    eda2:	425b      	negs	r3, r3
    eda4:	469c      	mov	ip, r3
    eda6:	44e1      	add	r9, ip
    eda8:	464b      	mov	r3, r9
    edaa:	689b      	ldr	r3, [r3, #8]
    edac:	3801      	subs	r0, #1
    edae:	4599      	cmp	r9, r3
    edb0:	d000      	beq.n	edb4 <_malloc_r+0x448>
    edb2:	e084      	b.n	eebe <_malloc_r+0x552>
    edb4:	4643      	mov	r3, r8
    edb6:	4203      	tst	r3, r0
    edb8:	d1f2      	bne.n	eda0 <_malloc_r+0x434>
    edba:	6873      	ldr	r3, [r6, #4]
    edbc:	438b      	bics	r3, r1
    edbe:	6073      	str	r3, [r6, #4]
    edc0:	0049      	lsls	r1, r1, #1
    edc2:	4299      	cmp	r1, r3
    edc4:	d900      	bls.n	edc8 <_malloc_r+0x45c>
    edc6:	e6b5      	b.n	eb34 <_malloc_r+0x1c8>
    edc8:	2900      	cmp	r1, #0
    edca:	d100      	bne.n	edce <_malloc_r+0x462>
    edcc:	e6b2      	b.n	eb34 <_malloc_r+0x1c8>
    edce:	4650      	mov	r0, sl
    edd0:	420b      	tst	r3, r1
    edd2:	d000      	beq.n	edd6 <_malloc_r+0x46a>
    edd4:	e648      	b.n	ea68 <_malloc_r+0xfc>
    edd6:	0049      	lsls	r1, r1, #1
    edd8:	3004      	adds	r0, #4
    edda:	420b      	tst	r3, r1
    eddc:	d0fb      	beq.n	edd6 <_malloc_r+0x46a>
    edde:	e643      	b.n	ea68 <_malloc_r+0xfc>
    ede0:	2301      	movs	r3, #1
    ede2:	464a      	mov	r2, r9
    ede4:	6053      	str	r3, [r2, #4]
    ede6:	0038      	movs	r0, r7
    ede8:	f000 f90c 	bl	f004 <__malloc_unlock>
    edec:	2000      	movs	r0, #0
    edee:	e68c      	b.n	eb0a <_malloc_r+0x19e>
    edf0:	4694      	mov	ip, r2
    edf2:	e76a      	b.n	ecca <_malloc_r+0x35e>
    edf4:	23aa      	movs	r3, #170	; 0xaa
    edf6:	005b      	lsls	r3, r3, #1
    edf8:	4298      	cmp	r0, r3
    edfa:	d811      	bhi.n	ee20 <_malloc_r+0x4b4>
    edfc:	3bdd      	subs	r3, #221	; 0xdd
    edfe:	4698      	mov	r8, r3
    ee00:	0be8      	lsrs	r0, r5, #15
    ee02:	4480      	add	r8, r0
    ee04:	3078      	adds	r0, #120	; 0x78
    ee06:	00c1      	lsls	r1, r0, #3
    ee08:	e5d7      	b.n	e9ba <_malloc_r+0x4e>
    ee0a:	2380      	movs	r3, #128	; 0x80
    ee0c:	015b      	lsls	r3, r3, #5
    ee0e:	e6dd      	b.n	ebcc <_malloc_r+0x260>
    ee10:	1089      	asrs	r1, r1, #2
    ee12:	3b02      	subs	r3, #2
    ee14:	408b      	lsls	r3, r1
    ee16:	6872      	ldr	r2, [r6, #4]
    ee18:	4313      	orrs	r3, r2
    ee1a:	6073      	str	r3, [r6, #4]
    ee1c:	4662      	mov	r2, ip
    ee1e:	e757      	b.n	ecd0 <_malloc_r+0x364>
    ee20:	4b2b      	ldr	r3, [pc, #172]	; (eed0 <_malloc_r+0x564>)
    ee22:	4298      	cmp	r0, r3
    ee24:	d81c      	bhi.n	ee60 <_malloc_r+0x4f4>
    ee26:	237c      	movs	r3, #124	; 0x7c
    ee28:	4698      	mov	r8, r3
    ee2a:	0ca8      	lsrs	r0, r5, #18
    ee2c:	4480      	add	r8, r0
    ee2e:	307d      	adds	r0, #125	; 0x7d
    ee30:	00c1      	lsls	r1, r0, #3
    ee32:	e5c2      	b.n	e9ba <_malloc_r+0x4e>
    ee34:	3310      	adds	r3, #16
    ee36:	9300      	str	r3, [sp, #0]
    ee38:	e699      	b.n	eb6e <_malloc_r+0x202>
    ee3a:	2a54      	cmp	r2, #84	; 0x54
    ee3c:	d826      	bhi.n	ee8c <_malloc_r+0x520>
    ee3e:	464b      	mov	r3, r9
    ee40:	0b1a      	lsrs	r2, r3, #12
    ee42:	0011      	movs	r1, r2
    ee44:	326f      	adds	r2, #111	; 0x6f
    ee46:	316e      	adds	r1, #110	; 0x6e
    ee48:	00d2      	lsls	r2, r2, #3
    ee4a:	e729      	b.n	eca0 <_malloc_r+0x334>
    ee4c:	051b      	lsls	r3, r3, #20
    ee4e:	d000      	beq.n	ee52 <_malloc_r+0x4e6>
    ee50:	e6a6      	b.n	eba0 <_malloc_r+0x234>
    ee52:	2001      	movs	r0, #1
    ee54:	9b00      	ldr	r3, [sp, #0]
    ee56:	68b2      	ldr	r2, [r6, #8]
    ee58:	4443      	add	r3, r8
    ee5a:	4303      	orrs	r3, r0
    ee5c:	6053      	str	r3, [r2, #4]
    ee5e:	e6e6      	b.n	ec2e <_malloc_r+0x2c2>
    ee60:	21fe      	movs	r1, #254	; 0xfe
    ee62:	237e      	movs	r3, #126	; 0x7e
    ee64:	207f      	movs	r0, #127	; 0x7f
    ee66:	0089      	lsls	r1, r1, #2
    ee68:	4698      	mov	r8, r3
    ee6a:	e5a6      	b.n	e9ba <_malloc_r+0x4e>
    ee6c:	2300      	movs	r3, #0
    ee6e:	2001      	movs	r0, #1
    ee70:	469b      	mov	fp, r3
    ee72:	e6bd      	b.n	ebf0 <_malloc_r+0x284>
    ee74:	0021      	movs	r1, r4
    ee76:	0038      	movs	r0, r7
    ee78:	3108      	adds	r1, #8
    ee7a:	f7ff fa63 	bl	e344 <_free_r>
    ee7e:	4653      	mov	r3, sl
    ee80:	6819      	ldr	r1, [r3, #0]
    ee82:	e6d4      	b.n	ec2e <_malloc_r+0x2c2>
    ee84:	465b      	mov	r3, fp
    ee86:	464a      	mov	r2, r9
    ee88:	601a      	str	r2, [r3, #0]
    ee8a:	e694      	b.n	ebb6 <_malloc_r+0x24a>
    ee8c:	21aa      	movs	r1, #170	; 0xaa
    ee8e:	0049      	lsls	r1, r1, #1
    ee90:	428a      	cmp	r2, r1
    ee92:	d806      	bhi.n	eea2 <_malloc_r+0x536>
    ee94:	464b      	mov	r3, r9
    ee96:	0bda      	lsrs	r2, r3, #15
    ee98:	0011      	movs	r1, r2
    ee9a:	3278      	adds	r2, #120	; 0x78
    ee9c:	3177      	adds	r1, #119	; 0x77
    ee9e:	00d2      	lsls	r2, r2, #3
    eea0:	e6fe      	b.n	eca0 <_malloc_r+0x334>
    eea2:	490b      	ldr	r1, [pc, #44]	; (eed0 <_malloc_r+0x564>)
    eea4:	428a      	cmp	r2, r1
    eea6:	d806      	bhi.n	eeb6 <_malloc_r+0x54a>
    eea8:	464b      	mov	r3, r9
    eeaa:	0c9a      	lsrs	r2, r3, #18
    eeac:	0011      	movs	r1, r2
    eeae:	327d      	adds	r2, #125	; 0x7d
    eeb0:	317c      	adds	r1, #124	; 0x7c
    eeb2:	00d2      	lsls	r2, r2, #3
    eeb4:	e6f4      	b.n	eca0 <_malloc_r+0x334>
    eeb6:	22fe      	movs	r2, #254	; 0xfe
    eeb8:	217e      	movs	r1, #126	; 0x7e
    eeba:	0092      	lsls	r2, r2, #2
    eebc:	e6f0      	b.n	eca0 <_malloc_r+0x334>
    eebe:	6873      	ldr	r3, [r6, #4]
    eec0:	e77e      	b.n	edc0 <_malloc_r+0x454>
    eec2:	002b      	movs	r3, r5
    eec4:	08e8      	lsrs	r0, r5, #3
    eec6:	3308      	adds	r3, #8
    eec8:	e605      	b.n	ead6 <_malloc_r+0x16a>
    eeca:	46c0      	nop			; (mov r8, r8)
    eecc:	20001420 	.word	0x20001420
    eed0:	00000554 	.word	0x00000554

0000eed4 <memchr>:
    eed4:	b570      	push	{r4, r5, r6, lr}
    eed6:	b2cd      	uxtb	r5, r1
    eed8:	0783      	lsls	r3, r0, #30
    eeda:	d034      	beq.n	ef46 <memchr+0x72>
    eedc:	1e54      	subs	r4, r2, #1
    eede:	2a00      	cmp	r2, #0
    eee0:	d01b      	beq.n	ef1a <memchr+0x46>
    eee2:	7803      	ldrb	r3, [r0, #0]
    eee4:	42ab      	cmp	r3, r5
    eee6:	d019      	beq.n	ef1c <memchr+0x48>
    eee8:	2203      	movs	r2, #3
    eeea:	e004      	b.n	eef6 <memchr+0x22>
    eeec:	3c01      	subs	r4, #1
    eeee:	d314      	bcc.n	ef1a <memchr+0x46>
    eef0:	7803      	ldrb	r3, [r0, #0]
    eef2:	42ab      	cmp	r3, r5
    eef4:	d012      	beq.n	ef1c <memchr+0x48>
    eef6:	3001      	adds	r0, #1
    eef8:	4210      	tst	r0, r2
    eefa:	d1f7      	bne.n	eeec <memchr+0x18>
    eefc:	2c03      	cmp	r4, #3
    eefe:	d80e      	bhi.n	ef1e <memchr+0x4a>
    ef00:	2c00      	cmp	r4, #0
    ef02:	d00a      	beq.n	ef1a <memchr+0x46>
    ef04:	7803      	ldrb	r3, [r0, #0]
    ef06:	42ab      	cmp	r3, r5
    ef08:	d008      	beq.n	ef1c <memchr+0x48>
    ef0a:	1904      	adds	r4, r0, r4
    ef0c:	e002      	b.n	ef14 <memchr+0x40>
    ef0e:	7803      	ldrb	r3, [r0, #0]
    ef10:	42ab      	cmp	r3, r5
    ef12:	d003      	beq.n	ef1c <memchr+0x48>
    ef14:	3001      	adds	r0, #1
    ef16:	4284      	cmp	r4, r0
    ef18:	d1f9      	bne.n	ef0e <memchr+0x3a>
    ef1a:	2000      	movs	r0, #0
    ef1c:	bd70      	pop	{r4, r5, r6, pc}
    ef1e:	22ff      	movs	r2, #255	; 0xff
    ef20:	060b      	lsls	r3, r1, #24
    ef22:	0c1b      	lsrs	r3, r3, #16
    ef24:	4011      	ands	r1, r2
    ef26:	4319      	orrs	r1, r3
    ef28:	040b      	lsls	r3, r1, #16
    ef2a:	4e08      	ldr	r6, [pc, #32]	; (ef4c <memchr+0x78>)
    ef2c:	4319      	orrs	r1, r3
    ef2e:	6803      	ldr	r3, [r0, #0]
    ef30:	4a07      	ldr	r2, [pc, #28]	; (ef50 <memchr+0x7c>)
    ef32:	404b      	eors	r3, r1
    ef34:	189a      	adds	r2, r3, r2
    ef36:	439a      	bics	r2, r3
    ef38:	4232      	tst	r2, r6
    ef3a:	d1e3      	bne.n	ef04 <memchr+0x30>
    ef3c:	3c04      	subs	r4, #4
    ef3e:	3004      	adds	r0, #4
    ef40:	2c03      	cmp	r4, #3
    ef42:	d8f4      	bhi.n	ef2e <memchr+0x5a>
    ef44:	e7dc      	b.n	ef00 <memchr+0x2c>
    ef46:	0014      	movs	r4, r2
    ef48:	e7d8      	b.n	eefc <memchr+0x28>
    ef4a:	46c0      	nop			; (mov r8, r8)
    ef4c:	80808080 	.word	0x80808080
    ef50:	fefefeff 	.word	0xfefefeff

0000ef54 <memmove>:
    ef54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef56:	4288      	cmp	r0, r1
    ef58:	d90a      	bls.n	ef70 <memmove+0x1c>
    ef5a:	188b      	adds	r3, r1, r2
    ef5c:	4298      	cmp	r0, r3
    ef5e:	d207      	bcs.n	ef70 <memmove+0x1c>
    ef60:	1e53      	subs	r3, r2, #1
    ef62:	2a00      	cmp	r2, #0
    ef64:	d003      	beq.n	ef6e <memmove+0x1a>
    ef66:	5cca      	ldrb	r2, [r1, r3]
    ef68:	54c2      	strb	r2, [r0, r3]
    ef6a:	3b01      	subs	r3, #1
    ef6c:	d2fb      	bcs.n	ef66 <memmove+0x12>
    ef6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef70:	0005      	movs	r5, r0
    ef72:	2a0f      	cmp	r2, #15
    ef74:	d808      	bhi.n	ef88 <memmove+0x34>
    ef76:	2a00      	cmp	r2, #0
    ef78:	d0f9      	beq.n	ef6e <memmove+0x1a>
    ef7a:	2300      	movs	r3, #0
    ef7c:	5ccc      	ldrb	r4, [r1, r3]
    ef7e:	54ec      	strb	r4, [r5, r3]
    ef80:	3301      	adds	r3, #1
    ef82:	4293      	cmp	r3, r2
    ef84:	d1fa      	bne.n	ef7c <memmove+0x28>
    ef86:	e7f2      	b.n	ef6e <memmove+0x1a>
    ef88:	000b      	movs	r3, r1
    ef8a:	4303      	orrs	r3, r0
    ef8c:	079b      	lsls	r3, r3, #30
    ef8e:	d12d      	bne.n	efec <memmove+0x98>
    ef90:	0015      	movs	r5, r2
    ef92:	000c      	movs	r4, r1
    ef94:	0003      	movs	r3, r0
    ef96:	3d10      	subs	r5, #16
    ef98:	092f      	lsrs	r7, r5, #4
    ef9a:	3701      	adds	r7, #1
    ef9c:	013f      	lsls	r7, r7, #4
    ef9e:	19c7      	adds	r7, r0, r7
    efa0:	6826      	ldr	r6, [r4, #0]
    efa2:	601e      	str	r6, [r3, #0]
    efa4:	6866      	ldr	r6, [r4, #4]
    efa6:	605e      	str	r6, [r3, #4]
    efa8:	68a6      	ldr	r6, [r4, #8]
    efaa:	609e      	str	r6, [r3, #8]
    efac:	68e6      	ldr	r6, [r4, #12]
    efae:	3410      	adds	r4, #16
    efb0:	60de      	str	r6, [r3, #12]
    efb2:	3310      	adds	r3, #16
    efb4:	429f      	cmp	r7, r3
    efb6:	d1f3      	bne.n	efa0 <memmove+0x4c>
    efb8:	240f      	movs	r4, #15
    efba:	43a5      	bics	r5, r4
    efbc:	3510      	adds	r5, #16
    efbe:	1949      	adds	r1, r1, r5
    efc0:	4014      	ands	r4, r2
    efc2:	1945      	adds	r5, r0, r5
    efc4:	2c03      	cmp	r4, #3
    efc6:	d913      	bls.n	eff0 <memmove+0x9c>
    efc8:	2300      	movs	r3, #0
    efca:	1f27      	subs	r7, r4, #4
    efcc:	08be      	lsrs	r6, r7, #2
    efce:	3601      	adds	r6, #1
    efd0:	00b6      	lsls	r6, r6, #2
    efd2:	58cc      	ldr	r4, [r1, r3]
    efd4:	50ec      	str	r4, [r5, r3]
    efd6:	3304      	adds	r3, #4
    efd8:	42b3      	cmp	r3, r6
    efda:	d1fa      	bne.n	efd2 <memmove+0x7e>
    efdc:	2603      	movs	r6, #3
    efde:	43b7      	bics	r7, r6
    efe0:	1d3c      	adds	r4, r7, #4
    efe2:	1909      	adds	r1, r1, r4
    efe4:	192d      	adds	r5, r5, r4
    efe6:	4032      	ands	r2, r6
    efe8:	d1c7      	bne.n	ef7a <memmove+0x26>
    efea:	e7c0      	b.n	ef6e <memmove+0x1a>
    efec:	0005      	movs	r5, r0
    efee:	e7c4      	b.n	ef7a <memmove+0x26>
    eff0:	0022      	movs	r2, r4
    eff2:	e7c0      	b.n	ef76 <memmove+0x22>

0000eff4 <__malloc_lock>:
    eff4:	b510      	push	{r4, lr}
    eff6:	4802      	ldr	r0, [pc, #8]	; (f000 <__malloc_lock+0xc>)
    eff8:	f7ff fc3c 	bl	e874 <__retarget_lock_acquire_recursive>
    effc:	bd10      	pop	{r4, pc}
    effe:	46c0      	nop			; (mov r8, r8)
    f000:	20001540 	.word	0x20001540

0000f004 <__malloc_unlock>:
    f004:	b510      	push	{r4, lr}
    f006:	4802      	ldr	r0, [pc, #8]	; (f010 <__malloc_unlock+0xc>)
    f008:	f7ff fc36 	bl	e878 <__retarget_lock_release_recursive>
    f00c:	bd10      	pop	{r4, pc}
    f00e:	46c0      	nop			; (mov r8, r8)
    f010:	20001540 	.word	0x20001540

0000f014 <_Balloc>:
    f014:	b570      	push	{r4, r5, r6, lr}
    f016:	0004      	movs	r4, r0
    f018:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f01a:	000d      	movs	r5, r1
    f01c:	2800      	cmp	r0, #0
    f01e:	d00a      	beq.n	f036 <_Balloc+0x22>
    f020:	00ab      	lsls	r3, r5, #2
    f022:	18c3      	adds	r3, r0, r3
    f024:	6818      	ldr	r0, [r3, #0]
    f026:	2800      	cmp	r0, #0
    f028:	d00f      	beq.n	f04a <_Balloc+0x36>
    f02a:	6802      	ldr	r2, [r0, #0]
    f02c:	601a      	str	r2, [r3, #0]
    f02e:	2300      	movs	r3, #0
    f030:	6103      	str	r3, [r0, #16]
    f032:	60c3      	str	r3, [r0, #12]
    f034:	bd70      	pop	{r4, r5, r6, pc}
    f036:	2221      	movs	r2, #33	; 0x21
    f038:	2104      	movs	r1, #4
    f03a:	0020      	movs	r0, r4
    f03c:	f000 fdb0 	bl	fba0 <_calloc_r>
    f040:	64e0      	str	r0, [r4, #76]	; 0x4c
    f042:	2800      	cmp	r0, #0
    f044:	d1ec      	bne.n	f020 <_Balloc+0xc>
    f046:	2000      	movs	r0, #0
    f048:	e7f4      	b.n	f034 <_Balloc+0x20>
    f04a:	2601      	movs	r6, #1
    f04c:	40ae      	lsls	r6, r5
    f04e:	1d72      	adds	r2, r6, #5
    f050:	0092      	lsls	r2, r2, #2
    f052:	2101      	movs	r1, #1
    f054:	0020      	movs	r0, r4
    f056:	f000 fda3 	bl	fba0 <_calloc_r>
    f05a:	2800      	cmp	r0, #0
    f05c:	d0f3      	beq.n	f046 <_Balloc+0x32>
    f05e:	6045      	str	r5, [r0, #4]
    f060:	6086      	str	r6, [r0, #8]
    f062:	e7e4      	b.n	f02e <_Balloc+0x1a>

0000f064 <_Bfree>:
    f064:	2900      	cmp	r1, #0
    f066:	d006      	beq.n	f076 <_Bfree+0x12>
    f068:	684b      	ldr	r3, [r1, #4]
    f06a:	009a      	lsls	r2, r3, #2
    f06c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    f06e:	189b      	adds	r3, r3, r2
    f070:	681a      	ldr	r2, [r3, #0]
    f072:	600a      	str	r2, [r1, #0]
    f074:	6019      	str	r1, [r3, #0]
    f076:	4770      	bx	lr

0000f078 <__multadd>:
    f078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f07a:	46ce      	mov	lr, r9
    f07c:	4647      	mov	r7, r8
    f07e:	4681      	mov	r9, r0
    f080:	0008      	movs	r0, r1
    f082:	b580      	push	{r7, lr}
    f084:	000d      	movs	r5, r1
    f086:	690c      	ldr	r4, [r1, #16]
    f088:	001f      	movs	r7, r3
    f08a:	2100      	movs	r1, #0
    f08c:	3014      	adds	r0, #20
    f08e:	6803      	ldr	r3, [r0, #0]
    f090:	3101      	adds	r1, #1
    f092:	041e      	lsls	r6, r3, #16
    f094:	0c36      	lsrs	r6, r6, #16
    f096:	4356      	muls	r6, r2
    f098:	0c1b      	lsrs	r3, r3, #16
    f09a:	4353      	muls	r3, r2
    f09c:	19f6      	adds	r6, r6, r7
    f09e:	0c37      	lsrs	r7, r6, #16
    f0a0:	19db      	adds	r3, r3, r7
    f0a2:	0436      	lsls	r6, r6, #16
    f0a4:	0c1f      	lsrs	r7, r3, #16
    f0a6:	0c36      	lsrs	r6, r6, #16
    f0a8:	041b      	lsls	r3, r3, #16
    f0aa:	199b      	adds	r3, r3, r6
    f0ac:	c008      	stmia	r0!, {r3}
    f0ae:	428c      	cmp	r4, r1
    f0b0:	dced      	bgt.n	f08e <__multadd+0x16>
    f0b2:	2f00      	cmp	r7, #0
    f0b4:	d008      	beq.n	f0c8 <__multadd+0x50>
    f0b6:	68ab      	ldr	r3, [r5, #8]
    f0b8:	429c      	cmp	r4, r3
    f0ba:	da0a      	bge.n	f0d2 <__multadd+0x5a>
    f0bc:	1d23      	adds	r3, r4, #4
    f0be:	009b      	lsls	r3, r3, #2
    f0c0:	18eb      	adds	r3, r5, r3
    f0c2:	3401      	adds	r4, #1
    f0c4:	605f      	str	r7, [r3, #4]
    f0c6:	612c      	str	r4, [r5, #16]
    f0c8:	0028      	movs	r0, r5
    f0ca:	bc0c      	pop	{r2, r3}
    f0cc:	4690      	mov	r8, r2
    f0ce:	4699      	mov	r9, r3
    f0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0d2:	686b      	ldr	r3, [r5, #4]
    f0d4:	4648      	mov	r0, r9
    f0d6:	1c59      	adds	r1, r3, #1
    f0d8:	f7ff ff9c 	bl	f014 <_Balloc>
    f0dc:	0029      	movs	r1, r5
    f0de:	692b      	ldr	r3, [r5, #16]
    f0e0:	4680      	mov	r8, r0
    f0e2:	1c9a      	adds	r2, r3, #2
    f0e4:	0092      	lsls	r2, r2, #2
    f0e6:	310c      	adds	r1, #12
    f0e8:	300c      	adds	r0, #12
    f0ea:	f7fc f999 	bl	b420 <memcpy>
    f0ee:	686b      	ldr	r3, [r5, #4]
    f0f0:	009a      	lsls	r2, r3, #2
    f0f2:	464b      	mov	r3, r9
    f0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f0f6:	189b      	adds	r3, r3, r2
    f0f8:	681a      	ldr	r2, [r3, #0]
    f0fa:	602a      	str	r2, [r5, #0]
    f0fc:	601d      	str	r5, [r3, #0]
    f0fe:	4645      	mov	r5, r8
    f100:	e7dc      	b.n	f0bc <__multadd+0x44>
    f102:	46c0      	nop			; (mov r8, r8)

0000f104 <__hi0bits>:
    f104:	0003      	movs	r3, r0
    f106:	0c02      	lsrs	r2, r0, #16
    f108:	2000      	movs	r0, #0
    f10a:	2a00      	cmp	r2, #0
    f10c:	d101      	bne.n	f112 <__hi0bits+0xe>
    f10e:	041b      	lsls	r3, r3, #16
    f110:	3010      	adds	r0, #16
    f112:	0e1a      	lsrs	r2, r3, #24
    f114:	d101      	bne.n	f11a <__hi0bits+0x16>
    f116:	3008      	adds	r0, #8
    f118:	021b      	lsls	r3, r3, #8
    f11a:	0f1a      	lsrs	r2, r3, #28
    f11c:	d101      	bne.n	f122 <__hi0bits+0x1e>
    f11e:	3004      	adds	r0, #4
    f120:	011b      	lsls	r3, r3, #4
    f122:	0f9a      	lsrs	r2, r3, #30
    f124:	d101      	bne.n	f12a <__hi0bits+0x26>
    f126:	3002      	adds	r0, #2
    f128:	009b      	lsls	r3, r3, #2
    f12a:	2b00      	cmp	r3, #0
    f12c:	db03      	blt.n	f136 <__hi0bits+0x32>
    f12e:	3001      	adds	r0, #1
    f130:	005b      	lsls	r3, r3, #1
    f132:	d400      	bmi.n	f136 <__hi0bits+0x32>
    f134:	2020      	movs	r0, #32
    f136:	4770      	bx	lr

0000f138 <__lo0bits>:
    f138:	6803      	ldr	r3, [r0, #0]
    f13a:	075a      	lsls	r2, r3, #29
    f13c:	d009      	beq.n	f152 <__lo0bits+0x1a>
    f13e:	2200      	movs	r2, #0
    f140:	07d9      	lsls	r1, r3, #31
    f142:	d404      	bmi.n	f14e <__lo0bits+0x16>
    f144:	079a      	lsls	r2, r3, #30
    f146:	d420      	bmi.n	f18a <__lo0bits+0x52>
    f148:	2202      	movs	r2, #2
    f14a:	089b      	lsrs	r3, r3, #2
    f14c:	6003      	str	r3, [r0, #0]
    f14e:	0010      	movs	r0, r2
    f150:	4770      	bx	lr
    f152:	0419      	lsls	r1, r3, #16
    f154:	2200      	movs	r2, #0
    f156:	2900      	cmp	r1, #0
    f158:	d101      	bne.n	f15e <__lo0bits+0x26>
    f15a:	0c1b      	lsrs	r3, r3, #16
    f15c:	3210      	adds	r2, #16
    f15e:	21ff      	movs	r1, #255	; 0xff
    f160:	4219      	tst	r1, r3
    f162:	d101      	bne.n	f168 <__lo0bits+0x30>
    f164:	3208      	adds	r2, #8
    f166:	0a1b      	lsrs	r3, r3, #8
    f168:	0719      	lsls	r1, r3, #28
    f16a:	d101      	bne.n	f170 <__lo0bits+0x38>
    f16c:	3204      	adds	r2, #4
    f16e:	091b      	lsrs	r3, r3, #4
    f170:	0799      	lsls	r1, r3, #30
    f172:	d101      	bne.n	f178 <__lo0bits+0x40>
    f174:	3202      	adds	r2, #2
    f176:	089b      	lsrs	r3, r3, #2
    f178:	07d9      	lsls	r1, r3, #31
    f17a:	d404      	bmi.n	f186 <__lo0bits+0x4e>
    f17c:	085b      	lsrs	r3, r3, #1
    f17e:	d101      	bne.n	f184 <__lo0bits+0x4c>
    f180:	2220      	movs	r2, #32
    f182:	e7e4      	b.n	f14e <__lo0bits+0x16>
    f184:	3201      	adds	r2, #1
    f186:	6003      	str	r3, [r0, #0]
    f188:	e7e1      	b.n	f14e <__lo0bits+0x16>
    f18a:	085b      	lsrs	r3, r3, #1
    f18c:	6003      	str	r3, [r0, #0]
    f18e:	2201      	movs	r2, #1
    f190:	e7dd      	b.n	f14e <__lo0bits+0x16>
    f192:	46c0      	nop			; (mov r8, r8)

0000f194 <__i2b>:
    f194:	b510      	push	{r4, lr}
    f196:	000c      	movs	r4, r1
    f198:	2101      	movs	r1, #1
    f19a:	f7ff ff3b 	bl	f014 <_Balloc>
    f19e:	2301      	movs	r3, #1
    f1a0:	6144      	str	r4, [r0, #20]
    f1a2:	6103      	str	r3, [r0, #16]
    f1a4:	bd10      	pop	{r4, pc}
    f1a6:	46c0      	nop			; (mov r8, r8)

0000f1a8 <__multiply>:
    f1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1aa:	4657      	mov	r7, sl
    f1ac:	464e      	mov	r6, r9
    f1ae:	4645      	mov	r5, r8
    f1b0:	46de      	mov	lr, fp
    f1b2:	b5e0      	push	{r5, r6, r7, lr}
    f1b4:	6914      	ldr	r4, [r2, #16]
    f1b6:	690e      	ldr	r6, [r1, #16]
    f1b8:	b085      	sub	sp, #20
    f1ba:	000f      	movs	r7, r1
    f1bc:	0015      	movs	r5, r2
    f1be:	42a6      	cmp	r6, r4
    f1c0:	da04      	bge.n	f1cc <__multiply+0x24>
    f1c2:	0033      	movs	r3, r6
    f1c4:	0017      	movs	r7, r2
    f1c6:	0026      	movs	r6, r4
    f1c8:	000d      	movs	r5, r1
    f1ca:	001c      	movs	r4, r3
    f1cc:	1933      	adds	r3, r6, r4
    f1ce:	4698      	mov	r8, r3
    f1d0:	68bb      	ldr	r3, [r7, #8]
    f1d2:	6879      	ldr	r1, [r7, #4]
    f1d4:	4598      	cmp	r8, r3
    f1d6:	dd00      	ble.n	f1da <__multiply+0x32>
    f1d8:	3101      	adds	r1, #1
    f1da:	f7ff ff1b 	bl	f014 <_Balloc>
    f1de:	2214      	movs	r2, #20
    f1e0:	0003      	movs	r3, r0
    f1e2:	4694      	mov	ip, r2
    f1e4:	4463      	add	r3, ip
    f1e6:	469b      	mov	fp, r3
    f1e8:	4643      	mov	r3, r8
    f1ea:	009b      	lsls	r3, r3, #2
    f1ec:	445b      	add	r3, fp
    f1ee:	0019      	movs	r1, r3
    f1f0:	9302      	str	r3, [sp, #8]
    f1f2:	9003      	str	r0, [sp, #12]
    f1f4:	465b      	mov	r3, fp
    f1f6:	2200      	movs	r2, #0
    f1f8:	458b      	cmp	fp, r1
    f1fa:	d203      	bcs.n	f204 <__multiply+0x5c>
    f1fc:	9902      	ldr	r1, [sp, #8]
    f1fe:	c304      	stmia	r3!, {r2}
    f200:	4299      	cmp	r1, r3
    f202:	d8fc      	bhi.n	f1fe <__multiply+0x56>
    f204:	2314      	movs	r3, #20
    f206:	00a4      	lsls	r4, r4, #2
    f208:	469a      	mov	sl, r3
    f20a:	3714      	adds	r7, #20
    f20c:	0023      	movs	r3, r4
    f20e:	46bc      	mov	ip, r7
    f210:	44aa      	add	sl, r5
    f212:	00b6      	lsls	r6, r6, #2
    f214:	4453      	add	r3, sl
    f216:	9700      	str	r7, [sp, #0]
    f218:	44b4      	add	ip, r6
    f21a:	9301      	str	r3, [sp, #4]
    f21c:	459a      	cmp	sl, r3
    f21e:	d24f      	bcs.n	f2c0 <__multiply+0x118>
    f220:	4653      	mov	r3, sl
    f222:	681b      	ldr	r3, [r3, #0]
    f224:	041e      	lsls	r6, r3, #16
    f226:	0c36      	lsrs	r6, r6, #16
    f228:	d020      	beq.n	f26c <__multiply+0xc4>
    f22a:	465c      	mov	r4, fp
    f22c:	2700      	movs	r7, #0
    f22e:	9d00      	ldr	r5, [sp, #0]
    f230:	0021      	movs	r1, r4
    f232:	cc08      	ldmia	r4!, {r3}
    f234:	cd04      	ldmia	r5!, {r2}
    f236:	4699      	mov	r9, r3
    f238:	4648      	mov	r0, r9
    f23a:	0413      	lsls	r3, r2, #16
    f23c:	0c1b      	lsrs	r3, r3, #16
    f23e:	4373      	muls	r3, r6
    f240:	0400      	lsls	r0, r0, #16
    f242:	0c00      	lsrs	r0, r0, #16
    f244:	181b      	adds	r3, r3, r0
    f246:	19d8      	adds	r0, r3, r7
    f248:	0c13      	lsrs	r3, r2, #16
    f24a:	464a      	mov	r2, r9
    f24c:	4373      	muls	r3, r6
    f24e:	0c12      	lsrs	r2, r2, #16
    f250:	189b      	adds	r3, r3, r2
    f252:	0c02      	lsrs	r2, r0, #16
    f254:	189b      	adds	r3, r3, r2
    f256:	0402      	lsls	r2, r0, #16
    f258:	0c1f      	lsrs	r7, r3, #16
    f25a:	0c12      	lsrs	r2, r2, #16
    f25c:	041b      	lsls	r3, r3, #16
    f25e:	4313      	orrs	r3, r2
    f260:	600b      	str	r3, [r1, #0]
    f262:	45ac      	cmp	ip, r5
    f264:	d8e4      	bhi.n	f230 <__multiply+0x88>
    f266:	4653      	mov	r3, sl
    f268:	6027      	str	r7, [r4, #0]
    f26a:	681b      	ldr	r3, [r3, #0]
    f26c:	0c1e      	lsrs	r6, r3, #16
    f26e:	d020      	beq.n	f2b2 <__multiply+0x10a>
    f270:	465b      	mov	r3, fp
    f272:	2100      	movs	r1, #0
    f274:	681b      	ldr	r3, [r3, #0]
    f276:	465c      	mov	r4, fp
    f278:	0018      	movs	r0, r3
    f27a:	000f      	movs	r7, r1
    f27c:	4662      	mov	r2, ip
    f27e:	9d00      	ldr	r5, [sp, #0]
    f280:	8829      	ldrh	r1, [r5, #0]
    f282:	0c00      	lsrs	r0, r0, #16
    f284:	4371      	muls	r1, r6
    f286:	1809      	adds	r1, r1, r0
    f288:	19c9      	adds	r1, r1, r7
    f28a:	041b      	lsls	r3, r3, #16
    f28c:	0408      	lsls	r0, r1, #16
    f28e:	0c1b      	lsrs	r3, r3, #16
    f290:	4303      	orrs	r3, r0
    f292:	6023      	str	r3, [r4, #0]
    f294:	cd08      	ldmia	r5!, {r3}
    f296:	6860      	ldr	r0, [r4, #4]
    f298:	0c1b      	lsrs	r3, r3, #16
    f29a:	4373      	muls	r3, r6
    f29c:	0407      	lsls	r7, r0, #16
    f29e:	0c3f      	lsrs	r7, r7, #16
    f2a0:	19db      	adds	r3, r3, r7
    f2a2:	0c09      	lsrs	r1, r1, #16
    f2a4:	185b      	adds	r3, r3, r1
    f2a6:	0c1f      	lsrs	r7, r3, #16
    f2a8:	3404      	adds	r4, #4
    f2aa:	42aa      	cmp	r2, r5
    f2ac:	d8e8      	bhi.n	f280 <__multiply+0xd8>
    f2ae:	4694      	mov	ip, r2
    f2b0:	6023      	str	r3, [r4, #0]
    f2b2:	2304      	movs	r3, #4
    f2b4:	4699      	mov	r9, r3
    f2b6:	9b01      	ldr	r3, [sp, #4]
    f2b8:	44ca      	add	sl, r9
    f2ba:	44cb      	add	fp, r9
    f2bc:	4553      	cmp	r3, sl
    f2be:	d8af      	bhi.n	f220 <__multiply+0x78>
    f2c0:	4643      	mov	r3, r8
    f2c2:	2b00      	cmp	r3, #0
    f2c4:	dd0e      	ble.n	f2e4 <__multiply+0x13c>
    f2c6:	9b02      	ldr	r3, [sp, #8]
    f2c8:	3b04      	subs	r3, #4
    f2ca:	681a      	ldr	r2, [r3, #0]
    f2cc:	2a00      	cmp	r2, #0
    f2ce:	d109      	bne.n	f2e4 <__multiply+0x13c>
    f2d0:	4642      	mov	r2, r8
    f2d2:	e003      	b.n	f2dc <__multiply+0x134>
    f2d4:	3b04      	subs	r3, #4
    f2d6:	6819      	ldr	r1, [r3, #0]
    f2d8:	2900      	cmp	r1, #0
    f2da:	d102      	bne.n	f2e2 <__multiply+0x13a>
    f2dc:	3a01      	subs	r2, #1
    f2de:	2a00      	cmp	r2, #0
    f2e0:	d1f8      	bne.n	f2d4 <__multiply+0x12c>
    f2e2:	4690      	mov	r8, r2
    f2e4:	9b03      	ldr	r3, [sp, #12]
    f2e6:	4642      	mov	r2, r8
    f2e8:	0018      	movs	r0, r3
    f2ea:	611a      	str	r2, [r3, #16]
    f2ec:	b005      	add	sp, #20
    f2ee:	bc3c      	pop	{r2, r3, r4, r5}
    f2f0:	4690      	mov	r8, r2
    f2f2:	4699      	mov	r9, r3
    f2f4:	46a2      	mov	sl, r4
    f2f6:	46ab      	mov	fp, r5
    f2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2fa:	46c0      	nop			; (mov r8, r8)

0000f2fc <__pow5mult>:
    f2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2fe:	4647      	mov	r7, r8
    f300:	46ce      	mov	lr, r9
    f302:	2303      	movs	r3, #3
    f304:	b580      	push	{r7, lr}
    f306:	4680      	mov	r8, r0
    f308:	000f      	movs	r7, r1
    f30a:	0014      	movs	r4, r2
    f30c:	4013      	ands	r3, r2
    f30e:	d13a      	bne.n	f386 <__pow5mult+0x8a>
    f310:	10a4      	asrs	r4, r4, #2
    f312:	003e      	movs	r6, r7
    f314:	2c00      	cmp	r4, #0
    f316:	d025      	beq.n	f364 <__pow5mult+0x68>
    f318:	4643      	mov	r3, r8
    f31a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    f31c:	2d00      	cmp	r5, #0
    f31e:	d03b      	beq.n	f398 <__pow5mult+0x9c>
    f320:	003e      	movs	r6, r7
    f322:	2300      	movs	r3, #0
    f324:	2701      	movs	r7, #1
    f326:	4699      	mov	r9, r3
    f328:	4227      	tst	r7, r4
    f32a:	d107      	bne.n	f33c <__pow5mult+0x40>
    f32c:	1064      	asrs	r4, r4, #1
    f32e:	d019      	beq.n	f364 <__pow5mult+0x68>
    f330:	6828      	ldr	r0, [r5, #0]
    f332:	2800      	cmp	r0, #0
    f334:	d01b      	beq.n	f36e <__pow5mult+0x72>
    f336:	0005      	movs	r5, r0
    f338:	4227      	tst	r7, r4
    f33a:	d0f7      	beq.n	f32c <__pow5mult+0x30>
    f33c:	002a      	movs	r2, r5
    f33e:	0031      	movs	r1, r6
    f340:	4640      	mov	r0, r8
    f342:	f7ff ff31 	bl	f1a8 <__multiply>
    f346:	2e00      	cmp	r6, #0
    f348:	d01b      	beq.n	f382 <__pow5mult+0x86>
    f34a:	4642      	mov	r2, r8
    f34c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    f34e:	6873      	ldr	r3, [r6, #4]
    f350:	4694      	mov	ip, r2
    f352:	009b      	lsls	r3, r3, #2
    f354:	4463      	add	r3, ip
    f356:	681a      	ldr	r2, [r3, #0]
    f358:	1064      	asrs	r4, r4, #1
    f35a:	6032      	str	r2, [r6, #0]
    f35c:	601e      	str	r6, [r3, #0]
    f35e:	0006      	movs	r6, r0
    f360:	2c00      	cmp	r4, #0
    f362:	d1e5      	bne.n	f330 <__pow5mult+0x34>
    f364:	0030      	movs	r0, r6
    f366:	bc0c      	pop	{r2, r3}
    f368:	4690      	mov	r8, r2
    f36a:	4699      	mov	r9, r3
    f36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f36e:	002a      	movs	r2, r5
    f370:	0029      	movs	r1, r5
    f372:	4640      	mov	r0, r8
    f374:	f7ff ff18 	bl	f1a8 <__multiply>
    f378:	464b      	mov	r3, r9
    f37a:	6028      	str	r0, [r5, #0]
    f37c:	6003      	str	r3, [r0, #0]
    f37e:	0005      	movs	r5, r0
    f380:	e7da      	b.n	f338 <__pow5mult+0x3c>
    f382:	0006      	movs	r6, r0
    f384:	e7d2      	b.n	f32c <__pow5mult+0x30>
    f386:	4a0b      	ldr	r2, [pc, #44]	; (f3b4 <__pow5mult+0xb8>)
    f388:	3b01      	subs	r3, #1
    f38a:	009b      	lsls	r3, r3, #2
    f38c:	589a      	ldr	r2, [r3, r2]
    f38e:	2300      	movs	r3, #0
    f390:	f7ff fe72 	bl	f078 <__multadd>
    f394:	0007      	movs	r7, r0
    f396:	e7bb      	b.n	f310 <__pow5mult+0x14>
    f398:	2101      	movs	r1, #1
    f39a:	4640      	mov	r0, r8
    f39c:	f7ff fe3a 	bl	f014 <_Balloc>
    f3a0:	4b05      	ldr	r3, [pc, #20]	; (f3b8 <__pow5mult+0xbc>)
    f3a2:	0005      	movs	r5, r0
    f3a4:	6143      	str	r3, [r0, #20]
    f3a6:	2301      	movs	r3, #1
    f3a8:	6103      	str	r3, [r0, #16]
    f3aa:	4643      	mov	r3, r8
    f3ac:	6498      	str	r0, [r3, #72]	; 0x48
    f3ae:	2300      	movs	r3, #0
    f3b0:	6003      	str	r3, [r0, #0]
    f3b2:	e7b5      	b.n	f320 <__pow5mult+0x24>
    f3b4:	000109c0 	.word	0x000109c0
    f3b8:	00000271 	.word	0x00000271

0000f3bc <__lshift>:
    f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3be:	464e      	mov	r6, r9
    f3c0:	4645      	mov	r5, r8
    f3c2:	46de      	mov	lr, fp
    f3c4:	4657      	mov	r7, sl
    f3c6:	b5e0      	push	{r5, r6, r7, lr}
    f3c8:	000e      	movs	r6, r1
    f3ca:	6933      	ldr	r3, [r6, #16]
    f3cc:	1154      	asrs	r4, r2, #5
    f3ce:	4698      	mov	r8, r3
    f3d0:	44a0      	add	r8, r4
    f3d2:	4643      	mov	r3, r8
    f3d4:	1c5d      	adds	r5, r3, #1
    f3d6:	68b3      	ldr	r3, [r6, #8]
    f3d8:	4683      	mov	fp, r0
    f3da:	4691      	mov	r9, r2
    f3dc:	6849      	ldr	r1, [r1, #4]
    f3de:	429d      	cmp	r5, r3
    f3e0:	dd03      	ble.n	f3ea <__lshift+0x2e>
    f3e2:	3101      	adds	r1, #1
    f3e4:	005b      	lsls	r3, r3, #1
    f3e6:	429d      	cmp	r5, r3
    f3e8:	dcfb      	bgt.n	f3e2 <__lshift+0x26>
    f3ea:	4658      	mov	r0, fp
    f3ec:	f7ff fe12 	bl	f014 <_Balloc>
    f3f0:	0003      	movs	r3, r0
    f3f2:	4684      	mov	ip, r0
    f3f4:	3314      	adds	r3, #20
    f3f6:	2c00      	cmp	r4, #0
    f3f8:	dd06      	ble.n	f408 <__lshift+0x4c>
    f3fa:	2100      	movs	r1, #0
    f3fc:	00a4      	lsls	r4, r4, #2
    f3fe:	001a      	movs	r2, r3
    f400:	191b      	adds	r3, r3, r4
    f402:	c202      	stmia	r2!, {r1}
    f404:	4293      	cmp	r3, r2
    f406:	d1fc      	bne.n	f402 <__lshift+0x46>
    f408:	6932      	ldr	r2, [r6, #16]
    f40a:	4648      	mov	r0, r9
    f40c:	0097      	lsls	r7, r2, #2
    f40e:	0031      	movs	r1, r6
    f410:	221f      	movs	r2, #31
    f412:	3114      	adds	r1, #20
    f414:	4010      	ands	r0, r2
    f416:	19cf      	adds	r7, r1, r7
    f418:	4681      	mov	r9, r0
    f41a:	2800      	cmp	r0, #0
    f41c:	d025      	beq.n	f46a <__lshift+0xae>
    f41e:	2220      	movs	r2, #32
    f420:	1a12      	subs	r2, r2, r0
    f422:	4692      	mov	sl, r2
    f424:	2200      	movs	r2, #0
    f426:	4648      	mov	r0, r9
    f428:	680c      	ldr	r4, [r1, #0]
    f42a:	4084      	lsls	r4, r0
    f42c:	4650      	mov	r0, sl
    f42e:	4314      	orrs	r4, r2
    f430:	601c      	str	r4, [r3, #0]
    f432:	c904      	ldmia	r1!, {r2}
    f434:	3304      	adds	r3, #4
    f436:	40c2      	lsrs	r2, r0
    f438:	428f      	cmp	r7, r1
    f43a:	d8f4      	bhi.n	f426 <__lshift+0x6a>
    f43c:	601a      	str	r2, [r3, #0]
    f43e:	2a00      	cmp	r2, #0
    f440:	d001      	beq.n	f446 <__lshift+0x8a>
    f442:	4645      	mov	r5, r8
    f444:	3502      	adds	r5, #2
    f446:	4663      	mov	r3, ip
    f448:	3d01      	subs	r5, #1
    f44a:	611d      	str	r5, [r3, #16]
    f44c:	6873      	ldr	r3, [r6, #4]
    f44e:	4660      	mov	r0, ip
    f450:	009a      	lsls	r2, r3, #2
    f452:	465b      	mov	r3, fp
    f454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f456:	189b      	adds	r3, r3, r2
    f458:	681a      	ldr	r2, [r3, #0]
    f45a:	6032      	str	r2, [r6, #0]
    f45c:	601e      	str	r6, [r3, #0]
    f45e:	bc3c      	pop	{r2, r3, r4, r5}
    f460:	4690      	mov	r8, r2
    f462:	4699      	mov	r9, r3
    f464:	46a2      	mov	sl, r4
    f466:	46ab      	mov	fp, r5
    f468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f46a:	c904      	ldmia	r1!, {r2}
    f46c:	c304      	stmia	r3!, {r2}
    f46e:	428f      	cmp	r7, r1
    f470:	d9e9      	bls.n	f446 <__lshift+0x8a>
    f472:	c904      	ldmia	r1!, {r2}
    f474:	c304      	stmia	r3!, {r2}
    f476:	428f      	cmp	r7, r1
    f478:	d8f7      	bhi.n	f46a <__lshift+0xae>
    f47a:	e7e4      	b.n	f446 <__lshift+0x8a>

0000f47c <__mcmp>:
    f47c:	690a      	ldr	r2, [r1, #16]
    f47e:	6903      	ldr	r3, [r0, #16]
    f480:	b530      	push	{r4, r5, lr}
    f482:	0005      	movs	r5, r0
    f484:	1a98      	subs	r0, r3, r2
    f486:	d111      	bne.n	f4ac <__mcmp+0x30>
    f488:	0092      	lsls	r2, r2, #2
    f48a:	3514      	adds	r5, #20
    f48c:	3114      	adds	r1, #20
    f48e:	18ab      	adds	r3, r5, r2
    f490:	1889      	adds	r1, r1, r2
    f492:	e001      	b.n	f498 <__mcmp+0x1c>
    f494:	429d      	cmp	r5, r3
    f496:	d209      	bcs.n	f4ac <__mcmp+0x30>
    f498:	3b04      	subs	r3, #4
    f49a:	3904      	subs	r1, #4
    f49c:	681c      	ldr	r4, [r3, #0]
    f49e:	680a      	ldr	r2, [r1, #0]
    f4a0:	4294      	cmp	r4, r2
    f4a2:	d0f7      	beq.n	f494 <__mcmp+0x18>
    f4a4:	4294      	cmp	r4, r2
    f4a6:	4180      	sbcs	r0, r0
    f4a8:	2201      	movs	r2, #1
    f4aa:	4310      	orrs	r0, r2
    f4ac:	bd30      	pop	{r4, r5, pc}
    f4ae:	46c0      	nop			; (mov r8, r8)

0000f4b0 <__mdiff>:
    f4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4b2:	4645      	mov	r5, r8
    f4b4:	46de      	mov	lr, fp
    f4b6:	4657      	mov	r7, sl
    f4b8:	464e      	mov	r6, r9
    f4ba:	0014      	movs	r4, r2
    f4bc:	690b      	ldr	r3, [r1, #16]
    f4be:	6912      	ldr	r2, [r2, #16]
    f4c0:	b5e0      	push	{r5, r6, r7, lr}
    f4c2:	4688      	mov	r8, r1
    f4c4:	1a9d      	subs	r5, r3, r2
    f4c6:	d11a      	bne.n	f4fe <__mdiff+0x4e>
    f4c8:	000f      	movs	r7, r1
    f4ca:	2114      	movs	r1, #20
    f4cc:	468c      	mov	ip, r1
    f4ce:	0092      	lsls	r2, r2, #2
    f4d0:	3714      	adds	r7, #20
    f4d2:	44a4      	add	ip, r4
    f4d4:	18bb      	adds	r3, r7, r2
    f4d6:	4462      	add	r2, ip
    f4d8:	e002      	b.n	f4e0 <__mdiff+0x30>
    f4da:	429f      	cmp	r7, r3
    f4dc:	d300      	bcc.n	f4e0 <__mdiff+0x30>
    f4de:	e070      	b.n	f5c2 <__mdiff+0x112>
    f4e0:	3b04      	subs	r3, #4
    f4e2:	3a04      	subs	r2, #4
    f4e4:	681e      	ldr	r6, [r3, #0]
    f4e6:	6811      	ldr	r1, [r2, #0]
    f4e8:	428e      	cmp	r6, r1
    f4ea:	d0f6      	beq.n	f4da <__mdiff+0x2a>
    f4ec:	d300      	bcc.n	f4f0 <__mdiff+0x40>
    f4ee:	e071      	b.n	f5d4 <__mdiff+0x124>
    f4f0:	4643      	mov	r3, r8
    f4f2:	003e      	movs	r6, r7
    f4f4:	46a0      	mov	r8, r4
    f4f6:	4667      	mov	r7, ip
    f4f8:	001c      	movs	r4, r3
    f4fa:	2501      	movs	r5, #1
    f4fc:	e006      	b.n	f50c <__mdiff+0x5c>
    f4fe:	2d00      	cmp	r5, #0
    f500:	db6a      	blt.n	f5d8 <__mdiff+0x128>
    f502:	4647      	mov	r7, r8
    f504:	0026      	movs	r6, r4
    f506:	2500      	movs	r5, #0
    f508:	3714      	adds	r7, #20
    f50a:	3614      	adds	r6, #20
    f50c:	4643      	mov	r3, r8
    f50e:	6859      	ldr	r1, [r3, #4]
    f510:	f7ff fd80 	bl	f014 <_Balloc>
    f514:	4643      	mov	r3, r8
    f516:	4681      	mov	r9, r0
    f518:	60c5      	str	r5, [r0, #12]
    f51a:	6918      	ldr	r0, [r3, #16]
    f51c:	464d      	mov	r5, r9
    f51e:	0083      	lsls	r3, r0, #2
    f520:	469c      	mov	ip, r3
    f522:	6923      	ldr	r3, [r4, #16]
    f524:	44bc      	add	ip, r7
    f526:	009b      	lsls	r3, r3, #2
    f528:	4698      	mov	r8, r3
    f52a:	2300      	movs	r3, #0
    f52c:	44b0      	add	r8, r6
    f52e:	3514      	adds	r5, #20
    f530:	469a      	mov	sl, r3
    f532:	e000      	b.n	f536 <__mdiff+0x86>
    f534:	0027      	movs	r7, r4
    f536:	ce04      	ldmia	r6!, {r2}
    f538:	003c      	movs	r4, r7
    f53a:	4693      	mov	fp, r2
    f53c:	4659      	mov	r1, fp
    f53e:	cc08      	ldmia	r4!, {r3}
    f540:	0409      	lsls	r1, r1, #16
    f542:	041a      	lsls	r2, r3, #16
    f544:	0c12      	lsrs	r2, r2, #16
    f546:	4452      	add	r2, sl
    f548:	0c09      	lsrs	r1, r1, #16
    f54a:	1a52      	subs	r2, r2, r1
    f54c:	0c19      	lsrs	r1, r3, #16
    f54e:	465b      	mov	r3, fp
    f550:	0c1b      	lsrs	r3, r3, #16
    f552:	1acb      	subs	r3, r1, r3
    f554:	1411      	asrs	r1, r2, #16
    f556:	185b      	adds	r3, r3, r1
    f558:	0412      	lsls	r2, r2, #16
    f55a:	1419      	asrs	r1, r3, #16
    f55c:	0c12      	lsrs	r2, r2, #16
    f55e:	041b      	lsls	r3, r3, #16
    f560:	468a      	mov	sl, r1
    f562:	4313      	orrs	r3, r2
    f564:	1d29      	adds	r1, r5, #4
    f566:	602b      	str	r3, [r5, #0]
    f568:	000d      	movs	r5, r1
    f56a:	45b0      	cmp	r8, r6
    f56c:	d8e2      	bhi.n	f534 <__mdiff+0x84>
    f56e:	45a4      	cmp	ip, r4
    f570:	d916      	bls.n	f5a0 <__mdiff+0xf0>
    f572:	cc08      	ldmia	r4!, {r3}
    f574:	041a      	lsls	r2, r3, #16
    f576:	0c12      	lsrs	r2, r2, #16
    f578:	4452      	add	r2, sl
    f57a:	1416      	asrs	r6, r2, #16
    f57c:	0c1b      	lsrs	r3, r3, #16
    f57e:	199b      	adds	r3, r3, r6
    f580:	0412      	lsls	r2, r2, #16
    f582:	141e      	asrs	r6, r3, #16
    f584:	0c12      	lsrs	r2, r2, #16
    f586:	041b      	lsls	r3, r3, #16
    f588:	4313      	orrs	r3, r2
    f58a:	46b2      	mov	sl, r6
    f58c:	c508      	stmia	r5!, {r3}
    f58e:	45a4      	cmp	ip, r4
    f590:	d8ef      	bhi.n	f572 <__mdiff+0xc2>
    f592:	4662      	mov	r2, ip
    f594:	2403      	movs	r4, #3
    f596:	1bd2      	subs	r2, r2, r7
    f598:	3a05      	subs	r2, #5
    f59a:	43a2      	bics	r2, r4
    f59c:	3204      	adds	r2, #4
    f59e:	1889      	adds	r1, r1, r2
    f5a0:	3904      	subs	r1, #4
    f5a2:	2b00      	cmp	r3, #0
    f5a4:	d104      	bne.n	f5b0 <__mdiff+0x100>
    f5a6:	3904      	subs	r1, #4
    f5a8:	680b      	ldr	r3, [r1, #0]
    f5aa:	3801      	subs	r0, #1
    f5ac:	2b00      	cmp	r3, #0
    f5ae:	d0fa      	beq.n	f5a6 <__mdiff+0xf6>
    f5b0:	464b      	mov	r3, r9
    f5b2:	6118      	str	r0, [r3, #16]
    f5b4:	4648      	mov	r0, r9
    f5b6:	bc3c      	pop	{r2, r3, r4, r5}
    f5b8:	4690      	mov	r8, r2
    f5ba:	4699      	mov	r9, r3
    f5bc:	46a2      	mov	sl, r4
    f5be:	46ab      	mov	fp, r5
    f5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5c2:	2100      	movs	r1, #0
    f5c4:	f7ff fd26 	bl	f014 <_Balloc>
    f5c8:	2301      	movs	r3, #1
    f5ca:	6103      	str	r3, [r0, #16]
    f5cc:	2300      	movs	r3, #0
    f5ce:	4681      	mov	r9, r0
    f5d0:	6143      	str	r3, [r0, #20]
    f5d2:	e7ef      	b.n	f5b4 <__mdiff+0x104>
    f5d4:	4666      	mov	r6, ip
    f5d6:	e799      	b.n	f50c <__mdiff+0x5c>
    f5d8:	0027      	movs	r7, r4
    f5da:	000e      	movs	r6, r1
    f5dc:	46a0      	mov	r8, r4
    f5de:	3714      	adds	r7, #20
    f5e0:	3614      	adds	r6, #20
    f5e2:	000c      	movs	r4, r1
    f5e4:	2501      	movs	r5, #1
    f5e6:	e791      	b.n	f50c <__mdiff+0x5c>

0000f5e8 <__d2b>:
    f5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5ea:	2101      	movs	r1, #1
    f5ec:	001c      	movs	r4, r3
    f5ee:	b083      	sub	sp, #12
    f5f0:	9e08      	ldr	r6, [sp, #32]
    f5f2:	0015      	movs	r5, r2
    f5f4:	f7ff fd0e 	bl	f014 <_Balloc>
    f5f8:	0323      	lsls	r3, r4, #12
    f5fa:	0064      	lsls	r4, r4, #1
    f5fc:	0007      	movs	r7, r0
    f5fe:	0b1b      	lsrs	r3, r3, #12
    f600:	0d64      	lsrs	r4, r4, #21
    f602:	d002      	beq.n	f60a <__d2b+0x22>
    f604:	2280      	movs	r2, #128	; 0x80
    f606:	0352      	lsls	r2, r2, #13
    f608:	4313      	orrs	r3, r2
    f60a:	9301      	str	r3, [sp, #4]
    f60c:	2d00      	cmp	r5, #0
    f60e:	d019      	beq.n	f644 <__d2b+0x5c>
    f610:	4668      	mov	r0, sp
    f612:	9500      	str	r5, [sp, #0]
    f614:	f7ff fd90 	bl	f138 <__lo0bits>
    f618:	2800      	cmp	r0, #0
    f61a:	d130      	bne.n	f67e <__d2b+0x96>
    f61c:	9b00      	ldr	r3, [sp, #0]
    f61e:	617b      	str	r3, [r7, #20]
    f620:	9b01      	ldr	r3, [sp, #4]
    f622:	61bb      	str	r3, [r7, #24]
    f624:	1e5a      	subs	r2, r3, #1
    f626:	4193      	sbcs	r3, r2
    f628:	1c5d      	adds	r5, r3, #1
    f62a:	613d      	str	r5, [r7, #16]
    f62c:	2c00      	cmp	r4, #0
    f62e:	d014      	beq.n	f65a <__d2b+0x72>
    f630:	4b19      	ldr	r3, [pc, #100]	; (f698 <__d2b+0xb0>)
    f632:	469c      	mov	ip, r3
    f634:	2335      	movs	r3, #53	; 0x35
    f636:	4464      	add	r4, ip
    f638:	1824      	adds	r4, r4, r0
    f63a:	1a18      	subs	r0, r3, r0
    f63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f63e:	6034      	str	r4, [r6, #0]
    f640:	6018      	str	r0, [r3, #0]
    f642:	e019      	b.n	f678 <__d2b+0x90>
    f644:	a801      	add	r0, sp, #4
    f646:	f7ff fd77 	bl	f138 <__lo0bits>
    f64a:	9b01      	ldr	r3, [sp, #4]
    f64c:	3020      	adds	r0, #32
    f64e:	617b      	str	r3, [r7, #20]
    f650:	2301      	movs	r3, #1
    f652:	2501      	movs	r5, #1
    f654:	613b      	str	r3, [r7, #16]
    f656:	2c00      	cmp	r4, #0
    f658:	d1ea      	bne.n	f630 <__d2b+0x48>
    f65a:	4b10      	ldr	r3, [pc, #64]	; (f69c <__d2b+0xb4>)
    f65c:	469c      	mov	ip, r3
    f65e:	4b10      	ldr	r3, [pc, #64]	; (f6a0 <__d2b+0xb8>)
    f660:	4460      	add	r0, ip
    f662:	18eb      	adds	r3, r5, r3
    f664:	009b      	lsls	r3, r3, #2
    f666:	18fb      	adds	r3, r7, r3
    f668:	6030      	str	r0, [r6, #0]
    f66a:	6958      	ldr	r0, [r3, #20]
    f66c:	f7ff fd4a 	bl	f104 <__hi0bits>
    f670:	016b      	lsls	r3, r5, #5
    f672:	1a18      	subs	r0, r3, r0
    f674:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f676:	6018      	str	r0, [r3, #0]
    f678:	0038      	movs	r0, r7
    f67a:	b003      	add	sp, #12
    f67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f67e:	9b01      	ldr	r3, [sp, #4]
    f680:	2220      	movs	r2, #32
    f682:	0019      	movs	r1, r3
    f684:	1a12      	subs	r2, r2, r0
    f686:	4091      	lsls	r1, r2
    f688:	000a      	movs	r2, r1
    f68a:	40c3      	lsrs	r3, r0
    f68c:	9900      	ldr	r1, [sp, #0]
    f68e:	9301      	str	r3, [sp, #4]
    f690:	430a      	orrs	r2, r1
    f692:	617a      	str	r2, [r7, #20]
    f694:	e7c5      	b.n	f622 <__d2b+0x3a>
    f696:	46c0      	nop			; (mov r8, r8)
    f698:	fffffbcd 	.word	0xfffffbcd
    f69c:	fffffbce 	.word	0xfffffbce
    f6a0:	3fffffff 	.word	0x3fffffff

0000f6a4 <_realloc_r>:
    f6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6a6:	464e      	mov	r6, r9
    f6a8:	4645      	mov	r5, r8
    f6aa:	46de      	mov	lr, fp
    f6ac:	4657      	mov	r7, sl
    f6ae:	b5e0      	push	{r5, r6, r7, lr}
    f6b0:	b085      	sub	sp, #20
    f6b2:	9001      	str	r0, [sp, #4]
    f6b4:	000e      	movs	r6, r1
    f6b6:	0015      	movs	r5, r2
    f6b8:	2900      	cmp	r1, #0
    f6ba:	d100      	bne.n	f6be <_realloc_r+0x1a>
    f6bc:	e09e      	b.n	f7fc <_realloc_r+0x158>
    f6be:	0037      	movs	r7, r6
    f6c0:	9801      	ldr	r0, [sp, #4]
    f6c2:	3f08      	subs	r7, #8
    f6c4:	f7ff fc96 	bl	eff4 <__malloc_lock>
    f6c8:	687a      	ldr	r2, [r7, #4]
    f6ca:	2303      	movs	r3, #3
    f6cc:	0014      	movs	r4, r2
    f6ce:	439c      	bics	r4, r3
    f6d0:	002b      	movs	r3, r5
    f6d2:	330b      	adds	r3, #11
    f6d4:	46b9      	mov	r9, r7
    f6d6:	2b16      	cmp	r3, #22
    f6d8:	d847      	bhi.n	f76a <_realloc_r+0xc6>
    f6da:	2110      	movs	r1, #16
    f6dc:	2310      	movs	r3, #16
    f6de:	4688      	mov	r8, r1
    f6e0:	4545      	cmp	r5, r8
    f6e2:	d846      	bhi.n	f772 <_realloc_r+0xce>
    f6e4:	429c      	cmp	r4, r3
    f6e6:	da49      	bge.n	f77c <_realloc_r+0xd8>
    f6e8:	49cc      	ldr	r1, [pc, #816]	; (fa1c <_realloc_r+0x378>)
    f6ea:	1938      	adds	r0, r7, r4
    f6ec:	468b      	mov	fp, r1
    f6ee:	6889      	ldr	r1, [r1, #8]
    f6f0:	9002      	str	r0, [sp, #8]
    f6f2:	4288      	cmp	r0, r1
    f6f4:	d100      	bne.n	f6f8 <_realloc_r+0x54>
    f6f6:	e0c2      	b.n	f87e <_realloc_r+0x1da>
    f6f8:	2101      	movs	r1, #1
    f6fa:	468a      	mov	sl, r1
    f6fc:	6840      	ldr	r0, [r0, #4]
    f6fe:	0001      	movs	r1, r0
    f700:	9003      	str	r0, [sp, #12]
    f702:	4650      	mov	r0, sl
    f704:	4381      	bics	r1, r0
    f706:	468c      	mov	ip, r1
    f708:	9902      	ldr	r1, [sp, #8]
    f70a:	468b      	mov	fp, r1
    f70c:	44dc      	add	ip, fp
    f70e:	4661      	mov	r1, ip
    f710:	6849      	ldr	r1, [r1, #4]
    f712:	4201      	tst	r1, r0
    f714:	d04d      	beq.n	f7b2 <_realloc_r+0x10e>
    f716:	4210      	tst	r0, r2
    f718:	d100      	bne.n	f71c <_realloc_r+0x78>
    f71a:	e0a2      	b.n	f862 <_realloc_r+0x1be>
    f71c:	0029      	movs	r1, r5
    f71e:	9801      	ldr	r0, [sp, #4]
    f720:	f7ff f924 	bl	e96c <_malloc_r>
    f724:	1e05      	subs	r5, r0, #0
    f726:	d039      	beq.n	f79c <_realloc_r+0xf8>
    f728:	2301      	movs	r3, #1
    f72a:	0002      	movs	r2, r0
    f72c:	6879      	ldr	r1, [r7, #4]
    f72e:	3a08      	subs	r2, #8
    f730:	4399      	bics	r1, r3
    f732:	187f      	adds	r7, r7, r1
    f734:	42ba      	cmp	r2, r7
    f736:	d100      	bne.n	f73a <_realloc_r+0x96>
    f738:	e12e      	b.n	f998 <_realloc_r+0x2f4>
    f73a:	1f22      	subs	r2, r4, #4
    f73c:	2a24      	cmp	r2, #36	; 0x24
    f73e:	d900      	bls.n	f742 <_realloc_r+0x9e>
    f740:	e114      	b.n	f96c <_realloc_r+0x2c8>
    f742:	2a13      	cmp	r2, #19
    f744:	d900      	bls.n	f748 <_realloc_r+0xa4>
    f746:	e0e8      	b.n	f91a <_realloc_r+0x276>
    f748:	0003      	movs	r3, r0
    f74a:	0032      	movs	r2, r6
    f74c:	6811      	ldr	r1, [r2, #0]
    f74e:	6019      	str	r1, [r3, #0]
    f750:	6851      	ldr	r1, [r2, #4]
    f752:	6059      	str	r1, [r3, #4]
    f754:	6892      	ldr	r2, [r2, #8]
    f756:	609a      	str	r2, [r3, #8]
    f758:	9c01      	ldr	r4, [sp, #4]
    f75a:	0031      	movs	r1, r6
    f75c:	0020      	movs	r0, r4
    f75e:	f7fe fdf1 	bl	e344 <_free_r>
    f762:	0020      	movs	r0, r4
    f764:	f7ff fc4e 	bl	f004 <__malloc_unlock>
    f768:	e01b      	b.n	f7a2 <_realloc_r+0xfe>
    f76a:	2107      	movs	r1, #7
    f76c:	438b      	bics	r3, r1
    f76e:	4698      	mov	r8, r3
    f770:	d5b6      	bpl.n	f6e0 <_realloc_r+0x3c>
    f772:	230c      	movs	r3, #12
    f774:	9a01      	ldr	r2, [sp, #4]
    f776:	2500      	movs	r5, #0
    f778:	6013      	str	r3, [r2, #0]
    f77a:	e012      	b.n	f7a2 <_realloc_r+0xfe>
    f77c:	0035      	movs	r5, r6
    f77e:	4643      	mov	r3, r8
    f780:	1ae3      	subs	r3, r4, r3
    f782:	2b0f      	cmp	r3, #15
    f784:	d825      	bhi.n	f7d2 <_realloc_r+0x12e>
    f786:	464b      	mov	r3, r9
    f788:	2201      	movs	r2, #1
    f78a:	4649      	mov	r1, r9
    f78c:	685b      	ldr	r3, [r3, #4]
    f78e:	4013      	ands	r3, r2
    f790:	4323      	orrs	r3, r4
    f792:	604b      	str	r3, [r1, #4]
    f794:	444c      	add	r4, r9
    f796:	6863      	ldr	r3, [r4, #4]
    f798:	431a      	orrs	r2, r3
    f79a:	6062      	str	r2, [r4, #4]
    f79c:	9801      	ldr	r0, [sp, #4]
    f79e:	f7ff fc31 	bl	f004 <__malloc_unlock>
    f7a2:	0028      	movs	r0, r5
    f7a4:	b005      	add	sp, #20
    f7a6:	bc3c      	pop	{r2, r3, r4, r5}
    f7a8:	4690      	mov	r8, r2
    f7aa:	4699      	mov	r9, r3
    f7ac:	46a2      	mov	sl, r4
    f7ae:	46ab      	mov	fp, r5
    f7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7b2:	2103      	movs	r1, #3
    f7b4:	9803      	ldr	r0, [sp, #12]
    f7b6:	468c      	mov	ip, r1
    f7b8:	4388      	bics	r0, r1
    f7ba:	1821      	adds	r1, r4, r0
    f7bc:	468b      	mov	fp, r1
    f7be:	4299      	cmp	r1, r3
    f7c0:	db21      	blt.n	f806 <_realloc_r+0x162>
    f7c2:	9a02      	ldr	r2, [sp, #8]
    f7c4:	0035      	movs	r5, r6
    f7c6:	68d3      	ldr	r3, [r2, #12]
    f7c8:	6892      	ldr	r2, [r2, #8]
    f7ca:	465c      	mov	r4, fp
    f7cc:	60d3      	str	r3, [r2, #12]
    f7ce:	609a      	str	r2, [r3, #8]
    f7d0:	e7d5      	b.n	f77e <_realloc_r+0xda>
    f7d2:	464a      	mov	r2, r9
    f7d4:	2001      	movs	r0, #1
    f7d6:	4646      	mov	r6, r8
    f7d8:	6852      	ldr	r2, [r2, #4]
    f7da:	4649      	mov	r1, r9
    f7dc:	4002      	ands	r2, r0
    f7de:	4332      	orrs	r2, r6
    f7e0:	464e      	mov	r6, r9
    f7e2:	4441      	add	r1, r8
    f7e4:	4303      	orrs	r3, r0
    f7e6:	6072      	str	r2, [r6, #4]
    f7e8:	444c      	add	r4, r9
    f7ea:	604b      	str	r3, [r1, #4]
    f7ec:	6863      	ldr	r3, [r4, #4]
    f7ee:	3108      	adds	r1, #8
    f7f0:	4318      	orrs	r0, r3
    f7f2:	6060      	str	r0, [r4, #4]
    f7f4:	9801      	ldr	r0, [sp, #4]
    f7f6:	f7fe fda5 	bl	e344 <_free_r>
    f7fa:	e7cf      	b.n	f79c <_realloc_r+0xf8>
    f7fc:	0011      	movs	r1, r2
    f7fe:	f7ff f8b5 	bl	e96c <_malloc_r>
    f802:	0005      	movs	r5, r0
    f804:	e7cd      	b.n	f7a2 <_realloc_r+0xfe>
    f806:	4651      	mov	r1, sl
    f808:	4211      	tst	r1, r2
    f80a:	d000      	beq.n	f80e <_realloc_r+0x16a>
    f80c:	e786      	b.n	f71c <_realloc_r+0x78>
    f80e:	4661      	mov	r1, ip
    f810:	683a      	ldr	r2, [r7, #0]
    f812:	1aba      	subs	r2, r7, r2
    f814:	4692      	mov	sl, r2
    f816:	6852      	ldr	r2, [r2, #4]
    f818:	438a      	bics	r2, r1
    f81a:	1880      	adds	r0, r0, r2
    f81c:	4683      	mov	fp, r0
    f81e:	44a3      	add	fp, r4
    f820:	459b      	cmp	fp, r3
    f822:	db26      	blt.n	f872 <_realloc_r+0x1ce>
    f824:	9a02      	ldr	r2, [sp, #8]
    f826:	68d3      	ldr	r3, [r2, #12]
    f828:	6892      	ldr	r2, [r2, #8]
    f82a:	60d3      	str	r3, [r2, #12]
    f82c:	609a      	str	r2, [r3, #8]
    f82e:	4653      	mov	r3, sl
    f830:	4652      	mov	r2, sl
    f832:	4655      	mov	r5, sl
    f834:	6892      	ldr	r2, [r2, #8]
    f836:	68db      	ldr	r3, [r3, #12]
    f838:	3508      	adds	r5, #8
    f83a:	60d3      	str	r3, [r2, #12]
    f83c:	609a      	str	r2, [r3, #8]
    f83e:	1f22      	subs	r2, r4, #4
    f840:	2a24      	cmp	r2, #36	; 0x24
    f842:	d900      	bls.n	f846 <_realloc_r+0x1a2>
    f844:	e096      	b.n	f974 <_realloc_r+0x2d0>
    f846:	2a13      	cmp	r2, #19
    f848:	d972      	bls.n	f930 <_realloc_r+0x28c>
    f84a:	4653      	mov	r3, sl
    f84c:	6831      	ldr	r1, [r6, #0]
    f84e:	6099      	str	r1, [r3, #8]
    f850:	6871      	ldr	r1, [r6, #4]
    f852:	60d9      	str	r1, [r3, #12]
    f854:	2a1b      	cmp	r2, #27
    f856:	d900      	bls.n	f85a <_realloc_r+0x1b6>
    f858:	e0a4      	b.n	f9a4 <_realloc_r+0x300>
    f85a:	0032      	movs	r2, r6
    f85c:	3310      	adds	r3, #16
    f85e:	3208      	adds	r2, #8
    f860:	e068      	b.n	f934 <_realloc_r+0x290>
    f862:	683a      	ldr	r2, [r7, #0]
    f864:	1aba      	subs	r2, r7, r2
    f866:	4692      	mov	sl, r2
    f868:	4651      	mov	r1, sl
    f86a:	2203      	movs	r2, #3
    f86c:	6849      	ldr	r1, [r1, #4]
    f86e:	4391      	bics	r1, r2
    f870:	000a      	movs	r2, r1
    f872:	4693      	mov	fp, r2
    f874:	44a3      	add	fp, r4
    f876:	459b      	cmp	fp, r3
    f878:	da00      	bge.n	f87c <_realloc_r+0x1d8>
    f87a:	e74f      	b.n	f71c <_realloc_r+0x78>
    f87c:	e7d7      	b.n	f82e <_realloc_r+0x18a>
    f87e:	2003      	movs	r0, #3
    f880:	9902      	ldr	r1, [sp, #8]
    f882:	4684      	mov	ip, r0
    f884:	6849      	ldr	r1, [r1, #4]
    f886:	4381      	bics	r1, r0
    f888:	4640      	mov	r0, r8
    f88a:	1909      	adds	r1, r1, r4
    f88c:	3010      	adds	r0, #16
    f88e:	9002      	str	r0, [sp, #8]
    f890:	4281      	cmp	r1, r0
    f892:	da58      	bge.n	f946 <_realloc_r+0x2a2>
    f894:	07d2      	lsls	r2, r2, #31
    f896:	d500      	bpl.n	f89a <_realloc_r+0x1f6>
    f898:	e740      	b.n	f71c <_realloc_r+0x78>
    f89a:	4660      	mov	r0, ip
    f89c:	683a      	ldr	r2, [r7, #0]
    f89e:	1aba      	subs	r2, r7, r2
    f8a0:	4692      	mov	sl, r2
    f8a2:	6852      	ldr	r2, [r2, #4]
    f8a4:	4382      	bics	r2, r0
    f8a6:	9802      	ldr	r0, [sp, #8]
    f8a8:	1851      	adds	r1, r2, r1
    f8aa:	9103      	str	r1, [sp, #12]
    f8ac:	4288      	cmp	r0, r1
    f8ae:	dce0      	bgt.n	f872 <_realloc_r+0x1ce>
    f8b0:	4653      	mov	r3, sl
    f8b2:	4652      	mov	r2, sl
    f8b4:	4655      	mov	r5, sl
    f8b6:	6892      	ldr	r2, [r2, #8]
    f8b8:	68db      	ldr	r3, [r3, #12]
    f8ba:	3508      	adds	r5, #8
    f8bc:	60d3      	str	r3, [r2, #12]
    f8be:	609a      	str	r2, [r3, #8]
    f8c0:	1f22      	subs	r2, r4, #4
    f8c2:	2a24      	cmp	r2, #36	; 0x24
    f8c4:	d900      	bls.n	f8c8 <_realloc_r+0x224>
    f8c6:	e08e      	b.n	f9e6 <_realloc_r+0x342>
    f8c8:	2a13      	cmp	r2, #19
    f8ca:	d800      	bhi.n	f8ce <_realloc_r+0x22a>
    f8cc:	e088      	b.n	f9e0 <_realloc_r+0x33c>
    f8ce:	4653      	mov	r3, sl
    f8d0:	6831      	ldr	r1, [r6, #0]
    f8d2:	6099      	str	r1, [r3, #8]
    f8d4:	6871      	ldr	r1, [r6, #4]
    f8d6:	60d9      	str	r1, [r3, #12]
    f8d8:	2a1b      	cmp	r2, #27
    f8da:	d900      	bls.n	f8de <_realloc_r+0x23a>
    f8dc:	e088      	b.n	f9f0 <_realloc_r+0x34c>
    f8de:	0032      	movs	r2, r6
    f8e0:	3310      	adds	r3, #16
    f8e2:	3208      	adds	r2, #8
    f8e4:	6811      	ldr	r1, [r2, #0]
    f8e6:	6019      	str	r1, [r3, #0]
    f8e8:	6851      	ldr	r1, [r2, #4]
    f8ea:	6059      	str	r1, [r3, #4]
    f8ec:	6892      	ldr	r2, [r2, #8]
    f8ee:	609a      	str	r2, [r3, #8]
    f8f0:	4651      	mov	r1, sl
    f8f2:	465b      	mov	r3, fp
    f8f4:	4642      	mov	r2, r8
    f8f6:	4441      	add	r1, r8
    f8f8:	6099      	str	r1, [r3, #8]
    f8fa:	9b03      	ldr	r3, [sp, #12]
    f8fc:	9801      	ldr	r0, [sp, #4]
    f8fe:	1a9a      	subs	r2, r3, r2
    f900:	2301      	movs	r3, #1
    f902:	431a      	orrs	r2, r3
    f904:	604a      	str	r2, [r1, #4]
    f906:	4652      	mov	r2, sl
    f908:	6852      	ldr	r2, [r2, #4]
    f90a:	4013      	ands	r3, r2
    f90c:	4642      	mov	r2, r8
    f90e:	4313      	orrs	r3, r2
    f910:	4652      	mov	r2, sl
    f912:	6053      	str	r3, [r2, #4]
    f914:	f7ff fb76 	bl	f004 <__malloc_unlock>
    f918:	e743      	b.n	f7a2 <_realloc_r+0xfe>
    f91a:	6833      	ldr	r3, [r6, #0]
    f91c:	6003      	str	r3, [r0, #0]
    f91e:	6873      	ldr	r3, [r6, #4]
    f920:	6043      	str	r3, [r0, #4]
    f922:	2a1b      	cmp	r2, #27
    f924:	d82d      	bhi.n	f982 <_realloc_r+0x2de>
    f926:	0003      	movs	r3, r0
    f928:	0032      	movs	r2, r6
    f92a:	3308      	adds	r3, #8
    f92c:	3208      	adds	r2, #8
    f92e:	e70d      	b.n	f74c <_realloc_r+0xa8>
    f930:	002b      	movs	r3, r5
    f932:	0032      	movs	r2, r6
    f934:	6811      	ldr	r1, [r2, #0]
    f936:	465c      	mov	r4, fp
    f938:	6019      	str	r1, [r3, #0]
    f93a:	6851      	ldr	r1, [r2, #4]
    f93c:	46d1      	mov	r9, sl
    f93e:	6059      	str	r1, [r3, #4]
    f940:	6892      	ldr	r2, [r2, #8]
    f942:	609a      	str	r2, [r3, #8]
    f944:	e71b      	b.n	f77e <_realloc_r+0xda>
    f946:	4643      	mov	r3, r8
    f948:	18fa      	adds	r2, r7, r3
    f94a:	465b      	mov	r3, fp
    f94c:	609a      	str	r2, [r3, #8]
    f94e:	4643      	mov	r3, r8
    f950:	1ac9      	subs	r1, r1, r3
    f952:	2301      	movs	r3, #1
    f954:	4319      	orrs	r1, r3
    f956:	6051      	str	r1, [r2, #4]
    f958:	687a      	ldr	r2, [r7, #4]
    f95a:	9801      	ldr	r0, [sp, #4]
    f95c:	4013      	ands	r3, r2
    f95e:	4642      	mov	r2, r8
    f960:	4313      	orrs	r3, r2
    f962:	607b      	str	r3, [r7, #4]
    f964:	f7ff fb4e 	bl	f004 <__malloc_unlock>
    f968:	0035      	movs	r5, r6
    f96a:	e71a      	b.n	f7a2 <_realloc_r+0xfe>
    f96c:	0031      	movs	r1, r6
    f96e:	f7ff faf1 	bl	ef54 <memmove>
    f972:	e6f1      	b.n	f758 <_realloc_r+0xb4>
    f974:	0031      	movs	r1, r6
    f976:	0028      	movs	r0, r5
    f978:	f7ff faec 	bl	ef54 <memmove>
    f97c:	465c      	mov	r4, fp
    f97e:	46d1      	mov	r9, sl
    f980:	e6fd      	b.n	f77e <_realloc_r+0xda>
    f982:	68b3      	ldr	r3, [r6, #8]
    f984:	6083      	str	r3, [r0, #8]
    f986:	68f3      	ldr	r3, [r6, #12]
    f988:	60c3      	str	r3, [r0, #12]
    f98a:	2a24      	cmp	r2, #36	; 0x24
    f98c:	d015      	beq.n	f9ba <_realloc_r+0x316>
    f98e:	0003      	movs	r3, r0
    f990:	0032      	movs	r2, r6
    f992:	3310      	adds	r3, #16
    f994:	3210      	adds	r2, #16
    f996:	e6d9      	b.n	f74c <_realloc_r+0xa8>
    f998:	6853      	ldr	r3, [r2, #4]
    f99a:	2203      	movs	r2, #3
    f99c:	4393      	bics	r3, r2
    f99e:	18e4      	adds	r4, r4, r3
    f9a0:	0035      	movs	r5, r6
    f9a2:	e6ec      	b.n	f77e <_realloc_r+0xda>
    f9a4:	4653      	mov	r3, sl
    f9a6:	68b1      	ldr	r1, [r6, #8]
    f9a8:	6119      	str	r1, [r3, #16]
    f9aa:	68f1      	ldr	r1, [r6, #12]
    f9ac:	6159      	str	r1, [r3, #20]
    f9ae:	2a24      	cmp	r2, #36	; 0x24
    f9b0:	d00c      	beq.n	f9cc <_realloc_r+0x328>
    f9b2:	0032      	movs	r2, r6
    f9b4:	3318      	adds	r3, #24
    f9b6:	3210      	adds	r2, #16
    f9b8:	e7bc      	b.n	f934 <_realloc_r+0x290>
    f9ba:	6933      	ldr	r3, [r6, #16]
    f9bc:	0032      	movs	r2, r6
    f9be:	6103      	str	r3, [r0, #16]
    f9c0:	0003      	movs	r3, r0
    f9c2:	6971      	ldr	r1, [r6, #20]
    f9c4:	3318      	adds	r3, #24
    f9c6:	3218      	adds	r2, #24
    f9c8:	6141      	str	r1, [r0, #20]
    f9ca:	e6bf      	b.n	f74c <_realloc_r+0xa8>
    f9cc:	4653      	mov	r3, sl
    f9ce:	6932      	ldr	r2, [r6, #16]
    f9d0:	4651      	mov	r1, sl
    f9d2:	619a      	str	r2, [r3, #24]
    f9d4:	0032      	movs	r2, r6
    f9d6:	6970      	ldr	r0, [r6, #20]
    f9d8:	3320      	adds	r3, #32
    f9da:	3218      	adds	r2, #24
    f9dc:	61c8      	str	r0, [r1, #28]
    f9de:	e7a9      	b.n	f934 <_realloc_r+0x290>
    f9e0:	002b      	movs	r3, r5
    f9e2:	0032      	movs	r2, r6
    f9e4:	e77e      	b.n	f8e4 <_realloc_r+0x240>
    f9e6:	0031      	movs	r1, r6
    f9e8:	0028      	movs	r0, r5
    f9ea:	f7ff fab3 	bl	ef54 <memmove>
    f9ee:	e77f      	b.n	f8f0 <_realloc_r+0x24c>
    f9f0:	4653      	mov	r3, sl
    f9f2:	68b1      	ldr	r1, [r6, #8]
    f9f4:	6119      	str	r1, [r3, #16]
    f9f6:	68f1      	ldr	r1, [r6, #12]
    f9f8:	6159      	str	r1, [r3, #20]
    f9fa:	2a24      	cmp	r2, #36	; 0x24
    f9fc:	d003      	beq.n	fa06 <_realloc_r+0x362>
    f9fe:	0032      	movs	r2, r6
    fa00:	3318      	adds	r3, #24
    fa02:	3210      	adds	r2, #16
    fa04:	e76e      	b.n	f8e4 <_realloc_r+0x240>
    fa06:	4653      	mov	r3, sl
    fa08:	6932      	ldr	r2, [r6, #16]
    fa0a:	4651      	mov	r1, sl
    fa0c:	619a      	str	r2, [r3, #24]
    fa0e:	0032      	movs	r2, r6
    fa10:	6970      	ldr	r0, [r6, #20]
    fa12:	3320      	adds	r3, #32
    fa14:	3218      	adds	r2, #24
    fa16:	61c8      	str	r0, [r1, #28]
    fa18:	e764      	b.n	f8e4 <_realloc_r+0x240>
    fa1a:	46c0      	nop			; (mov r8, r8)
    fa1c:	200004a4 	.word	0x200004a4

0000fa20 <_sbrk_r>:
    fa20:	2300      	movs	r3, #0
    fa22:	b570      	push	{r4, r5, r6, lr}
    fa24:	4c06      	ldr	r4, [pc, #24]	; (fa40 <_sbrk_r+0x20>)
    fa26:	0005      	movs	r5, r0
    fa28:	0008      	movs	r0, r1
    fa2a:	6023      	str	r3, [r4, #0]
    fa2c:	f7f6 fb7c 	bl	6128 <_sbrk>
    fa30:	1c43      	adds	r3, r0, #1
    fa32:	d000      	beq.n	fa36 <_sbrk_r+0x16>
    fa34:	bd70      	pop	{r4, r5, r6, pc}
    fa36:	6823      	ldr	r3, [r4, #0]
    fa38:	2b00      	cmp	r3, #0
    fa3a:	d0fb      	beq.n	fa34 <_sbrk_r+0x14>
    fa3c:	602b      	str	r3, [r5, #0]
    fa3e:	e7f9      	b.n	fa34 <_sbrk_r+0x14>
    fa40:	20001554 	.word	0x20001554

0000fa44 <__sread>:
    fa44:	b570      	push	{r4, r5, r6, lr}
    fa46:	000c      	movs	r4, r1
    fa48:	250e      	movs	r5, #14
    fa4a:	5f49      	ldrsh	r1, [r1, r5]
    fa4c:	f000 fa26 	bl	fe9c <_read_r>
    fa50:	2800      	cmp	r0, #0
    fa52:	db03      	blt.n	fa5c <__sread+0x18>
    fa54:	6d23      	ldr	r3, [r4, #80]	; 0x50
    fa56:	181b      	adds	r3, r3, r0
    fa58:	6523      	str	r3, [r4, #80]	; 0x50
    fa5a:	bd70      	pop	{r4, r5, r6, pc}
    fa5c:	89a3      	ldrh	r3, [r4, #12]
    fa5e:	4a02      	ldr	r2, [pc, #8]	; (fa68 <__sread+0x24>)
    fa60:	4013      	ands	r3, r2
    fa62:	81a3      	strh	r3, [r4, #12]
    fa64:	e7f9      	b.n	fa5a <__sread+0x16>
    fa66:	46c0      	nop			; (mov r8, r8)
    fa68:	ffffefff 	.word	0xffffefff

0000fa6c <__swrite>:
    fa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa6e:	0016      	movs	r6, r2
    fa70:	001f      	movs	r7, r3
    fa72:	220c      	movs	r2, #12
    fa74:	5e8b      	ldrsh	r3, [r1, r2]
    fa76:	0005      	movs	r5, r0
    fa78:	000c      	movs	r4, r1
    fa7a:	05da      	lsls	r2, r3, #23
    fa7c:	d507      	bpl.n	fa8e <__swrite+0x22>
    fa7e:	230e      	movs	r3, #14
    fa80:	5ec9      	ldrsh	r1, [r1, r3]
    fa82:	2200      	movs	r2, #0
    fa84:	2302      	movs	r3, #2
    fa86:	f000 f9df 	bl	fe48 <_lseek_r>
    fa8a:	220c      	movs	r2, #12
    fa8c:	5ea3      	ldrsh	r3, [r4, r2]
    fa8e:	4a05      	ldr	r2, [pc, #20]	; (faa4 <__swrite+0x38>)
    fa90:	0028      	movs	r0, r5
    fa92:	4013      	ands	r3, r2
    fa94:	81a3      	strh	r3, [r4, #12]
    fa96:	0032      	movs	r2, r6
    fa98:	230e      	movs	r3, #14
    fa9a:	5ee1      	ldrsh	r1, [r4, r3]
    fa9c:	003b      	movs	r3, r7
    fa9e:	f000 f86b 	bl	fb78 <_write_r>
    faa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faa4:	ffffefff 	.word	0xffffefff

0000faa8 <__sseek>:
    faa8:	b570      	push	{r4, r5, r6, lr}
    faaa:	000c      	movs	r4, r1
    faac:	250e      	movs	r5, #14
    faae:	5f49      	ldrsh	r1, [r1, r5]
    fab0:	f000 f9ca 	bl	fe48 <_lseek_r>
    fab4:	1c43      	adds	r3, r0, #1
    fab6:	d006      	beq.n	fac6 <__sseek+0x1e>
    fab8:	2380      	movs	r3, #128	; 0x80
    faba:	89a2      	ldrh	r2, [r4, #12]
    fabc:	015b      	lsls	r3, r3, #5
    fabe:	4313      	orrs	r3, r2
    fac0:	81a3      	strh	r3, [r4, #12]
    fac2:	6520      	str	r0, [r4, #80]	; 0x50
    fac4:	bd70      	pop	{r4, r5, r6, pc}
    fac6:	89a3      	ldrh	r3, [r4, #12]
    fac8:	4a01      	ldr	r2, [pc, #4]	; (fad0 <__sseek+0x28>)
    faca:	4013      	ands	r3, r2
    facc:	81a3      	strh	r3, [r4, #12]
    face:	e7f9      	b.n	fac4 <__sseek+0x1c>
    fad0:	ffffefff 	.word	0xffffefff

0000fad4 <__sclose>:
    fad4:	b510      	push	{r4, lr}
    fad6:	230e      	movs	r3, #14
    fad8:	5ec9      	ldrsh	r1, [r1, r3]
    fada:	f000 f88d 	bl	fbf8 <_close_r>
    fade:	bd10      	pop	{r4, pc}

0000fae0 <__sprint_r.part.0>:
    fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fae2:	464e      	mov	r6, r9
    fae4:	4645      	mov	r5, r8
    fae6:	46de      	mov	lr, fp
    fae8:	4657      	mov	r7, sl
    faea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    faec:	b5e0      	push	{r5, r6, r7, lr}
    faee:	4680      	mov	r8, r0
    faf0:	000e      	movs	r6, r1
    faf2:	4691      	mov	r9, r2
    faf4:	049b      	lsls	r3, r3, #18
    faf6:	d531      	bpl.n	fb5c <__sprint_r.part.0+0x7c>
    faf8:	6813      	ldr	r3, [r2, #0]
    fafa:	469a      	mov	sl, r3
    fafc:	6893      	ldr	r3, [r2, #8]
    fafe:	2b00      	cmp	r3, #0
    fb00:	d02a      	beq.n	fb58 <__sprint_r.part.0+0x78>
    fb02:	4652      	mov	r2, sl
    fb04:	6852      	ldr	r2, [r2, #4]
    fb06:	2500      	movs	r5, #0
    fb08:	4693      	mov	fp, r2
    fb0a:	0897      	lsrs	r7, r2, #2
    fb0c:	4652      	mov	r2, sl
    fb0e:	6814      	ldr	r4, [r2, #0]
    fb10:	d104      	bne.n	fb1c <__sprint_r.part.0+0x3c>
    fb12:	e016      	b.n	fb42 <__sprint_r.part.0+0x62>
    fb14:	3501      	adds	r5, #1
    fb16:	3404      	adds	r4, #4
    fb18:	42af      	cmp	r7, r5
    fb1a:	d010      	beq.n	fb3e <__sprint_r.part.0+0x5e>
    fb1c:	0032      	movs	r2, r6
    fb1e:	6821      	ldr	r1, [r4, #0]
    fb20:	4640      	mov	r0, r8
    fb22:	f000 f92d 	bl	fd80 <_fputwc_r>
    fb26:	1c43      	adds	r3, r0, #1
    fb28:	d1f4      	bne.n	fb14 <__sprint_r.part.0+0x34>
    fb2a:	464a      	mov	r2, r9
    fb2c:	2300      	movs	r3, #0
    fb2e:	6093      	str	r3, [r2, #8]
    fb30:	6053      	str	r3, [r2, #4]
    fb32:	bc3c      	pop	{r2, r3, r4, r5}
    fb34:	4690      	mov	r8, r2
    fb36:	4699      	mov	r9, r3
    fb38:	46a2      	mov	sl, r4
    fb3a:	46ab      	mov	fp, r5
    fb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb3e:	464b      	mov	r3, r9
    fb40:	689b      	ldr	r3, [r3, #8]
    fb42:	465a      	mov	r2, fp
    fb44:	2103      	movs	r1, #3
    fb46:	438a      	bics	r2, r1
    fb48:	1a9b      	subs	r3, r3, r2
    fb4a:	464a      	mov	r2, r9
    fb4c:	6093      	str	r3, [r2, #8]
    fb4e:	2208      	movs	r2, #8
    fb50:	4694      	mov	ip, r2
    fb52:	44e2      	add	sl, ip
    fb54:	2b00      	cmp	r3, #0
    fb56:	d1d4      	bne.n	fb02 <__sprint_r.part.0+0x22>
    fb58:	2000      	movs	r0, #0
    fb5a:	e7e6      	b.n	fb2a <__sprint_r.part.0+0x4a>
    fb5c:	f7fe fcd0 	bl	e500 <__sfvwrite_r>
    fb60:	e7e3      	b.n	fb2a <__sprint_r.part.0+0x4a>
    fb62:	46c0      	nop			; (mov r8, r8)

0000fb64 <__sprint_r>:
    fb64:	6893      	ldr	r3, [r2, #8]
    fb66:	b510      	push	{r4, lr}
    fb68:	2b00      	cmp	r3, #0
    fb6a:	d002      	beq.n	fb72 <__sprint_r+0xe>
    fb6c:	f7ff ffb8 	bl	fae0 <__sprint_r.part.0>
    fb70:	bd10      	pop	{r4, pc}
    fb72:	6053      	str	r3, [r2, #4]
    fb74:	2000      	movs	r0, #0
    fb76:	e7fb      	b.n	fb70 <__sprint_r+0xc>

0000fb78 <_write_r>:
    fb78:	b570      	push	{r4, r5, r6, lr}
    fb7a:	0005      	movs	r5, r0
    fb7c:	0008      	movs	r0, r1
    fb7e:	0011      	movs	r1, r2
    fb80:	2200      	movs	r2, #0
    fb82:	4c06      	ldr	r4, [pc, #24]	; (fb9c <_write_r+0x24>)
    fb84:	6022      	str	r2, [r4, #0]
    fb86:	001a      	movs	r2, r3
    fb88:	f000 fa5a 	bl	10040 <_write>
    fb8c:	1c43      	adds	r3, r0, #1
    fb8e:	d000      	beq.n	fb92 <_write_r+0x1a>
    fb90:	bd70      	pop	{r4, r5, r6, pc}
    fb92:	6823      	ldr	r3, [r4, #0]
    fb94:	2b00      	cmp	r3, #0
    fb96:	d0fb      	beq.n	fb90 <_write_r+0x18>
    fb98:	602b      	str	r3, [r5, #0]
    fb9a:	e7f9      	b.n	fb90 <_write_r+0x18>
    fb9c:	20001554 	.word	0x20001554

0000fba0 <_calloc_r>:
    fba0:	b510      	push	{r4, lr}
    fba2:	4351      	muls	r1, r2
    fba4:	f7fe fee2 	bl	e96c <_malloc_r>
    fba8:	1e04      	subs	r4, r0, #0
    fbaa:	d01c      	beq.n	fbe6 <_calloc_r+0x46>
    fbac:	0003      	movs	r3, r0
    fbae:	3b08      	subs	r3, #8
    fbb0:	685a      	ldr	r2, [r3, #4]
    fbb2:	2303      	movs	r3, #3
    fbb4:	439a      	bics	r2, r3
    fbb6:	3a04      	subs	r2, #4
    fbb8:	2a24      	cmp	r2, #36	; 0x24
    fbba:	d816      	bhi.n	fbea <_calloc_r+0x4a>
    fbbc:	0003      	movs	r3, r0
    fbbe:	2a13      	cmp	r2, #19
    fbc0:	d90d      	bls.n	fbde <_calloc_r+0x3e>
    fbc2:	2100      	movs	r1, #0
    fbc4:	3308      	adds	r3, #8
    fbc6:	6001      	str	r1, [r0, #0]
    fbc8:	6041      	str	r1, [r0, #4]
    fbca:	2a1b      	cmp	r2, #27
    fbcc:	d907      	bls.n	fbde <_calloc_r+0x3e>
    fbce:	6081      	str	r1, [r0, #8]
    fbd0:	60c1      	str	r1, [r0, #12]
    fbd2:	2a24      	cmp	r2, #36	; 0x24
    fbd4:	d10d      	bne.n	fbf2 <_calloc_r+0x52>
    fbd6:	0003      	movs	r3, r0
    fbd8:	6101      	str	r1, [r0, #16]
    fbda:	3318      	adds	r3, #24
    fbdc:	6141      	str	r1, [r0, #20]
    fbde:	2200      	movs	r2, #0
    fbe0:	601a      	str	r2, [r3, #0]
    fbe2:	605a      	str	r2, [r3, #4]
    fbe4:	609a      	str	r2, [r3, #8]
    fbe6:	0020      	movs	r0, r4
    fbe8:	bd10      	pop	{r4, pc}
    fbea:	2100      	movs	r1, #0
    fbec:	f7fb fc5a 	bl	b4a4 <memset>
    fbf0:	e7f9      	b.n	fbe6 <_calloc_r+0x46>
    fbf2:	0003      	movs	r3, r0
    fbf4:	3310      	adds	r3, #16
    fbf6:	e7f2      	b.n	fbde <_calloc_r+0x3e>

0000fbf8 <_close_r>:
    fbf8:	2300      	movs	r3, #0
    fbfa:	b570      	push	{r4, r5, r6, lr}
    fbfc:	4c06      	ldr	r4, [pc, #24]	; (fc18 <_close_r+0x20>)
    fbfe:	0005      	movs	r5, r0
    fc00:	0008      	movs	r0, r1
    fc02:	6023      	str	r3, [r4, #0]
    fc04:	f000 f9f4 	bl	fff0 <_close>
    fc08:	1c43      	adds	r3, r0, #1
    fc0a:	d000      	beq.n	fc0e <_close_r+0x16>
    fc0c:	bd70      	pop	{r4, r5, r6, pc}
    fc0e:	6823      	ldr	r3, [r4, #0]
    fc10:	2b00      	cmp	r3, #0
    fc12:	d0fb      	beq.n	fc0c <_close_r+0x14>
    fc14:	602b      	str	r3, [r5, #0]
    fc16:	e7f9      	b.n	fc0c <_close_r+0x14>
    fc18:	20001554 	.word	0x20001554

0000fc1c <_fclose_r>:
    fc1c:	b570      	push	{r4, r5, r6, lr}
    fc1e:	0005      	movs	r5, r0
    fc20:	1e0c      	subs	r4, r1, #0
    fc22:	d040      	beq.n	fca6 <_fclose_r+0x8a>
    fc24:	2800      	cmp	r0, #0
    fc26:	d002      	beq.n	fc2e <_fclose_r+0x12>
    fc28:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d03e      	beq.n	fcac <_fclose_r+0x90>
    fc2e:	2601      	movs	r6, #1
    fc30:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fc32:	4233      	tst	r3, r6
    fc34:	d133      	bne.n	fc9e <_fclose_r+0x82>
    fc36:	89a3      	ldrh	r3, [r4, #12]
    fc38:	059b      	lsls	r3, r3, #22
    fc3a:	d543      	bpl.n	fcc4 <_fclose_r+0xa8>
    fc3c:	0021      	movs	r1, r4
    fc3e:	0028      	movs	r0, r5
    fc40:	f7fe f9d4 	bl	dfec <__sflush_r>
    fc44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fc46:	0006      	movs	r6, r0
    fc48:	2b00      	cmp	r3, #0
    fc4a:	d004      	beq.n	fc56 <_fclose_r+0x3a>
    fc4c:	69e1      	ldr	r1, [r4, #28]
    fc4e:	0028      	movs	r0, r5
    fc50:	4798      	blx	r3
    fc52:	2800      	cmp	r0, #0
    fc54:	db44      	blt.n	fce0 <_fclose_r+0xc4>
    fc56:	89a3      	ldrh	r3, [r4, #12]
    fc58:	061b      	lsls	r3, r3, #24
    fc5a:	d42a      	bmi.n	fcb2 <_fclose_r+0x96>
    fc5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fc5e:	2900      	cmp	r1, #0
    fc60:	d008      	beq.n	fc74 <_fclose_r+0x58>
    fc62:	0023      	movs	r3, r4
    fc64:	3340      	adds	r3, #64	; 0x40
    fc66:	4299      	cmp	r1, r3
    fc68:	d002      	beq.n	fc70 <_fclose_r+0x54>
    fc6a:	0028      	movs	r0, r5
    fc6c:	f7fe fb6a 	bl	e344 <_free_r>
    fc70:	2300      	movs	r3, #0
    fc72:	6323      	str	r3, [r4, #48]	; 0x30
    fc74:	6c61      	ldr	r1, [r4, #68]	; 0x44
    fc76:	2900      	cmp	r1, #0
    fc78:	d004      	beq.n	fc84 <_fclose_r+0x68>
    fc7a:	0028      	movs	r0, r5
    fc7c:	f7fe fb62 	bl	e344 <_free_r>
    fc80:	2300      	movs	r3, #0
    fc82:	6463      	str	r3, [r4, #68]	; 0x44
    fc84:	f7fe fae4 	bl	e250 <__sfp_lock_acquire>
    fc88:	2300      	movs	r3, #0
    fc8a:	81a3      	strh	r3, [r4, #12]
    fc8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fc8e:	07db      	lsls	r3, r3, #31
    fc90:	d514      	bpl.n	fcbc <_fclose_r+0xa0>
    fc92:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc94:	f7fe fdec 	bl	e870 <__retarget_lock_close_recursive>
    fc98:	f7fe fae2 	bl	e260 <__sfp_lock_release>
    fc9c:	e004      	b.n	fca8 <_fclose_r+0x8c>
    fc9e:	220c      	movs	r2, #12
    fca0:	5ea3      	ldrsh	r3, [r4, r2]
    fca2:	2b00      	cmp	r3, #0
    fca4:	d1ca      	bne.n	fc3c <_fclose_r+0x20>
    fca6:	2600      	movs	r6, #0
    fca8:	0030      	movs	r0, r6
    fcaa:	bd70      	pop	{r4, r5, r6, pc}
    fcac:	f7fe faa0 	bl	e1f0 <__sinit>
    fcb0:	e7bd      	b.n	fc2e <_fclose_r+0x12>
    fcb2:	6921      	ldr	r1, [r4, #16]
    fcb4:	0028      	movs	r0, r5
    fcb6:	f7fe fb45 	bl	e344 <_free_r>
    fcba:	e7cf      	b.n	fc5c <_fclose_r+0x40>
    fcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fcbe:	f7fe fddb 	bl	e878 <__retarget_lock_release_recursive>
    fcc2:	e7e6      	b.n	fc92 <_fclose_r+0x76>
    fcc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fcc6:	f7fe fdd5 	bl	e874 <__retarget_lock_acquire_recursive>
    fcca:	220c      	movs	r2, #12
    fccc:	5ea3      	ldrsh	r3, [r4, r2]
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d1b4      	bne.n	fc3c <_fclose_r+0x20>
    fcd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fcd4:	401e      	ands	r6, r3
    fcd6:	d1e6      	bne.n	fca6 <_fclose_r+0x8a>
    fcd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fcda:	f7fe fdcd 	bl	e878 <__retarget_lock_release_recursive>
    fcde:	e7e3      	b.n	fca8 <_fclose_r+0x8c>
    fce0:	2601      	movs	r6, #1
    fce2:	4276      	negs	r6, r6
    fce4:	e7b7      	b.n	fc56 <_fclose_r+0x3a>
    fce6:	46c0      	nop			; (mov r8, r8)

0000fce8 <__fputwc>:
    fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcea:	46ce      	mov	lr, r9
    fcec:	4647      	mov	r7, r8
    fcee:	b580      	push	{r7, lr}
    fcf0:	b085      	sub	sp, #20
    fcf2:	4680      	mov	r8, r0
    fcf4:	4689      	mov	r9, r1
    fcf6:	0014      	movs	r4, r2
    fcf8:	f000 f896 	bl	fe28 <__locale_mb_cur_max>
    fcfc:	2801      	cmp	r0, #1
    fcfe:	d031      	beq.n	fd64 <__fputwc+0x7c>
    fd00:	0023      	movs	r3, r4
    fd02:	af03      	add	r7, sp, #12
    fd04:	335c      	adds	r3, #92	; 0x5c
    fd06:	464a      	mov	r2, r9
    fd08:	0039      	movs	r1, r7
    fd0a:	4640      	mov	r0, r8
    fd0c:	f000 f938 	bl	ff80 <_wcrtomb_r>
    fd10:	0006      	movs	r6, r0
    fd12:	1c43      	adds	r3, r0, #1
    fd14:	d021      	beq.n	fd5a <__fputwc+0x72>
    fd16:	2800      	cmp	r0, #0
    fd18:	d030      	beq.n	fd7c <__fputwc+0x94>
    fd1a:	7839      	ldrb	r1, [r7, #0]
    fd1c:	2500      	movs	r5, #0
    fd1e:	e007      	b.n	fd30 <__fputwc+0x48>
    fd20:	6823      	ldr	r3, [r4, #0]
    fd22:	1c5a      	adds	r2, r3, #1
    fd24:	6022      	str	r2, [r4, #0]
    fd26:	7019      	strb	r1, [r3, #0]
    fd28:	3501      	adds	r5, #1
    fd2a:	42b5      	cmp	r5, r6
    fd2c:	d226      	bcs.n	fd7c <__fputwc+0x94>
    fd2e:	5d79      	ldrb	r1, [r7, r5]
    fd30:	68a3      	ldr	r3, [r4, #8]
    fd32:	3b01      	subs	r3, #1
    fd34:	60a3      	str	r3, [r4, #8]
    fd36:	2b00      	cmp	r3, #0
    fd38:	daf2      	bge.n	fd20 <__fputwc+0x38>
    fd3a:	69a2      	ldr	r2, [r4, #24]
    fd3c:	4293      	cmp	r3, r2
    fd3e:	db01      	blt.n	fd44 <__fputwc+0x5c>
    fd40:	290a      	cmp	r1, #10
    fd42:	d1ed      	bne.n	fd20 <__fputwc+0x38>
    fd44:	0022      	movs	r2, r4
    fd46:	4640      	mov	r0, r8
    fd48:	f000 f8bc 	bl	fec4 <__swbuf_r>
    fd4c:	1c43      	adds	r3, r0, #1
    fd4e:	d1eb      	bne.n	fd28 <__fputwc+0x40>
    fd50:	b005      	add	sp, #20
    fd52:	bc0c      	pop	{r2, r3}
    fd54:	4690      	mov	r8, r2
    fd56:	4699      	mov	r9, r3
    fd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd5a:	2240      	movs	r2, #64	; 0x40
    fd5c:	89a3      	ldrh	r3, [r4, #12]
    fd5e:	4313      	orrs	r3, r2
    fd60:	81a3      	strh	r3, [r4, #12]
    fd62:	e7f5      	b.n	fd50 <__fputwc+0x68>
    fd64:	464b      	mov	r3, r9
    fd66:	3b01      	subs	r3, #1
    fd68:	2bfe      	cmp	r3, #254	; 0xfe
    fd6a:	d8c9      	bhi.n	fd00 <__fputwc+0x18>
    fd6c:	466a      	mov	r2, sp
    fd6e:	464b      	mov	r3, r9
    fd70:	71d3      	strb	r3, [r2, #7]
    fd72:	79d1      	ldrb	r1, [r2, #7]
    fd74:	af03      	add	r7, sp, #12
    fd76:	7039      	strb	r1, [r7, #0]
    fd78:	2601      	movs	r6, #1
    fd7a:	e7cf      	b.n	fd1c <__fputwc+0x34>
    fd7c:	4648      	mov	r0, r9
    fd7e:	e7e7      	b.n	fd50 <__fputwc+0x68>

0000fd80 <_fputwc_r>:
    fd80:	6e53      	ldr	r3, [r2, #100]	; 0x64
    fd82:	b570      	push	{r4, r5, r6, lr}
    fd84:	0005      	movs	r5, r0
    fd86:	000e      	movs	r6, r1
    fd88:	0014      	movs	r4, r2
    fd8a:	07db      	lsls	r3, r3, #31
    fd8c:	d41e      	bmi.n	fdcc <_fputwc_r+0x4c>
    fd8e:	230c      	movs	r3, #12
    fd90:	5ed2      	ldrsh	r2, [r2, r3]
    fd92:	b291      	uxth	r1, r2
    fd94:	058b      	lsls	r3, r1, #22
    fd96:	d516      	bpl.n	fdc6 <_fputwc_r+0x46>
    fd98:	2380      	movs	r3, #128	; 0x80
    fd9a:	019b      	lsls	r3, r3, #6
    fd9c:	4219      	tst	r1, r3
    fd9e:	d104      	bne.n	fdaa <_fputwc_r+0x2a>
    fda0:	431a      	orrs	r2, r3
    fda2:	81a2      	strh	r2, [r4, #12]
    fda4:	6e62      	ldr	r2, [r4, #100]	; 0x64
    fda6:	4313      	orrs	r3, r2
    fda8:	6663      	str	r3, [r4, #100]	; 0x64
    fdaa:	0028      	movs	r0, r5
    fdac:	0022      	movs	r2, r4
    fdae:	0031      	movs	r1, r6
    fdb0:	f7ff ff9a 	bl	fce8 <__fputwc>
    fdb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fdb6:	0005      	movs	r5, r0
    fdb8:	07db      	lsls	r3, r3, #31
    fdba:	d402      	bmi.n	fdc2 <_fputwc_r+0x42>
    fdbc:	89a3      	ldrh	r3, [r4, #12]
    fdbe:	059b      	lsls	r3, r3, #22
    fdc0:	d508      	bpl.n	fdd4 <_fputwc_r+0x54>
    fdc2:	0028      	movs	r0, r5
    fdc4:	bd70      	pop	{r4, r5, r6, pc}
    fdc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fdc8:	f7fe fd54 	bl	e874 <__retarget_lock_acquire_recursive>
    fdcc:	230c      	movs	r3, #12
    fdce:	5ee2      	ldrsh	r2, [r4, r3]
    fdd0:	b291      	uxth	r1, r2
    fdd2:	e7e1      	b.n	fd98 <_fputwc_r+0x18>
    fdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fdd6:	f7fe fd4f 	bl	e878 <__retarget_lock_release_recursive>
    fdda:	e7f2      	b.n	fdc2 <_fputwc_r+0x42>

0000fddc <_fstat_r>:
    fddc:	2300      	movs	r3, #0
    fdde:	b570      	push	{r4, r5, r6, lr}
    fde0:	4c07      	ldr	r4, [pc, #28]	; (fe00 <_fstat_r+0x24>)
    fde2:	0005      	movs	r5, r0
    fde4:	0008      	movs	r0, r1
    fde6:	0011      	movs	r1, r2
    fde8:	6023      	str	r3, [r4, #0]
    fdea:	f000 f909 	bl	10000 <_fstat>
    fdee:	1c43      	adds	r3, r0, #1
    fdf0:	d000      	beq.n	fdf4 <_fstat_r+0x18>
    fdf2:	bd70      	pop	{r4, r5, r6, pc}
    fdf4:	6823      	ldr	r3, [r4, #0]
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	d0fb      	beq.n	fdf2 <_fstat_r+0x16>
    fdfa:	602b      	str	r3, [r5, #0]
    fdfc:	e7f9      	b.n	fdf2 <_fstat_r+0x16>
    fdfe:	46c0      	nop			; (mov r8, r8)
    fe00:	20001554 	.word	0x20001554

0000fe04 <_isatty_r>:
    fe04:	2300      	movs	r3, #0
    fe06:	b570      	push	{r4, r5, r6, lr}
    fe08:	4c06      	ldr	r4, [pc, #24]	; (fe24 <_isatty_r+0x20>)
    fe0a:	0005      	movs	r5, r0
    fe0c:	0008      	movs	r0, r1
    fe0e:	6023      	str	r3, [r4, #0]
    fe10:	f000 f8fe 	bl	10010 <_isatty>
    fe14:	1c43      	adds	r3, r0, #1
    fe16:	d000      	beq.n	fe1a <_isatty_r+0x16>
    fe18:	bd70      	pop	{r4, r5, r6, pc}
    fe1a:	6823      	ldr	r3, [r4, #0]
    fe1c:	2b00      	cmp	r3, #0
    fe1e:	d0fb      	beq.n	fe18 <_isatty_r+0x14>
    fe20:	602b      	str	r3, [r5, #0]
    fe22:	e7f9      	b.n	fe18 <_isatty_r+0x14>
    fe24:	20001554 	.word	0x20001554

0000fe28 <__locale_mb_cur_max>:
    fe28:	4b05      	ldr	r3, [pc, #20]	; (fe40 <__locale_mb_cur_max+0x18>)
    fe2a:	681b      	ldr	r3, [r3, #0]
    fe2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d003      	beq.n	fe3a <__locale_mb_cur_max+0x12>
    fe32:	2294      	movs	r2, #148	; 0x94
    fe34:	0052      	lsls	r2, r2, #1
    fe36:	5c98      	ldrb	r0, [r3, r2]
    fe38:	4770      	bx	lr
    fe3a:	4b02      	ldr	r3, [pc, #8]	; (fe44 <__locale_mb_cur_max+0x1c>)
    fe3c:	e7f9      	b.n	fe32 <__locale_mb_cur_max+0xa>
    fe3e:	46c0      	nop			; (mov r8, r8)
    fe40:	20000070 	.word	0x20000070
    fe44:	200008b4 	.word	0x200008b4

0000fe48 <_lseek_r>:
    fe48:	b570      	push	{r4, r5, r6, lr}
    fe4a:	0005      	movs	r5, r0
    fe4c:	0008      	movs	r0, r1
    fe4e:	0011      	movs	r1, r2
    fe50:	2200      	movs	r2, #0
    fe52:	4c06      	ldr	r4, [pc, #24]	; (fe6c <_lseek_r+0x24>)
    fe54:	6022      	str	r2, [r4, #0]
    fe56:	001a      	movs	r2, r3
    fe58:	f000 f8e2 	bl	10020 <_lseek>
    fe5c:	1c43      	adds	r3, r0, #1
    fe5e:	d000      	beq.n	fe62 <_lseek_r+0x1a>
    fe60:	bd70      	pop	{r4, r5, r6, pc}
    fe62:	6823      	ldr	r3, [r4, #0]
    fe64:	2b00      	cmp	r3, #0
    fe66:	d0fb      	beq.n	fe60 <_lseek_r+0x18>
    fe68:	602b      	str	r3, [r5, #0]
    fe6a:	e7f9      	b.n	fe60 <_lseek_r+0x18>
    fe6c:	20001554 	.word	0x20001554

0000fe70 <__ascii_mbtowc>:
    fe70:	b082      	sub	sp, #8
    fe72:	2900      	cmp	r1, #0
    fe74:	d00a      	beq.n	fe8c <__ascii_mbtowc+0x1c>
    fe76:	2a00      	cmp	r2, #0
    fe78:	d00b      	beq.n	fe92 <__ascii_mbtowc+0x22>
    fe7a:	2b00      	cmp	r3, #0
    fe7c:	d00b      	beq.n	fe96 <__ascii_mbtowc+0x26>
    fe7e:	7813      	ldrb	r3, [r2, #0]
    fe80:	600b      	str	r3, [r1, #0]
    fe82:	7810      	ldrb	r0, [r2, #0]
    fe84:	1e43      	subs	r3, r0, #1
    fe86:	4198      	sbcs	r0, r3
    fe88:	b002      	add	sp, #8
    fe8a:	4770      	bx	lr
    fe8c:	a901      	add	r1, sp, #4
    fe8e:	2a00      	cmp	r2, #0
    fe90:	d1f3      	bne.n	fe7a <__ascii_mbtowc+0xa>
    fe92:	2000      	movs	r0, #0
    fe94:	e7f8      	b.n	fe88 <__ascii_mbtowc+0x18>
    fe96:	2002      	movs	r0, #2
    fe98:	4240      	negs	r0, r0
    fe9a:	e7f5      	b.n	fe88 <__ascii_mbtowc+0x18>

0000fe9c <_read_r>:
    fe9c:	b570      	push	{r4, r5, r6, lr}
    fe9e:	0005      	movs	r5, r0
    fea0:	0008      	movs	r0, r1
    fea2:	0011      	movs	r1, r2
    fea4:	2200      	movs	r2, #0
    fea6:	4c06      	ldr	r4, [pc, #24]	; (fec0 <_read_r+0x24>)
    fea8:	6022      	str	r2, [r4, #0]
    feaa:	001a      	movs	r2, r3
    feac:	f000 f8c0 	bl	10030 <_read>
    feb0:	1c43      	adds	r3, r0, #1
    feb2:	d000      	beq.n	feb6 <_read_r+0x1a>
    feb4:	bd70      	pop	{r4, r5, r6, pc}
    feb6:	6823      	ldr	r3, [r4, #0]
    feb8:	2b00      	cmp	r3, #0
    feba:	d0fb      	beq.n	feb4 <_read_r+0x18>
    febc:	602b      	str	r3, [r5, #0]
    febe:	e7f9      	b.n	feb4 <_read_r+0x18>
    fec0:	20001554 	.word	0x20001554

0000fec4 <__swbuf_r>:
    fec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fec6:	0006      	movs	r6, r0
    fec8:	000d      	movs	r5, r1
    feca:	0014      	movs	r4, r2
    fecc:	2800      	cmp	r0, #0
    fece:	d002      	beq.n	fed6 <__swbuf_r+0x12>
    fed0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fed2:	2b00      	cmp	r3, #0
    fed4:	d04e      	beq.n	ff74 <__swbuf_r+0xb0>
    fed6:	69a3      	ldr	r3, [r4, #24]
    fed8:	60a3      	str	r3, [r4, #8]
    feda:	230c      	movs	r3, #12
    fedc:	5ee0      	ldrsh	r0, [r4, r3]
    fede:	b281      	uxth	r1, r0
    fee0:	070b      	lsls	r3, r1, #28
    fee2:	d53c      	bpl.n	ff5e <__swbuf_r+0x9a>
    fee4:	6923      	ldr	r3, [r4, #16]
    fee6:	2b00      	cmp	r3, #0
    fee8:	d039      	beq.n	ff5e <__swbuf_r+0x9a>
    feea:	22ff      	movs	r2, #255	; 0xff
    feec:	b2ef      	uxtb	r7, r5
    feee:	4015      	ands	r5, r2
    fef0:	2280      	movs	r2, #128	; 0x80
    fef2:	0192      	lsls	r2, r2, #6
    fef4:	4211      	tst	r1, r2
    fef6:	d015      	beq.n	ff24 <__swbuf_r+0x60>
    fef8:	6822      	ldr	r2, [r4, #0]
    fefa:	6961      	ldr	r1, [r4, #20]
    fefc:	1ad3      	subs	r3, r2, r3
    fefe:	428b      	cmp	r3, r1
    ff00:	da1b      	bge.n	ff3a <__swbuf_r+0x76>
    ff02:	3301      	adds	r3, #1
    ff04:	68a1      	ldr	r1, [r4, #8]
    ff06:	3901      	subs	r1, #1
    ff08:	60a1      	str	r1, [r4, #8]
    ff0a:	1c51      	adds	r1, r2, #1
    ff0c:	6021      	str	r1, [r4, #0]
    ff0e:	7017      	strb	r7, [r2, #0]
    ff10:	6962      	ldr	r2, [r4, #20]
    ff12:	429a      	cmp	r2, r3
    ff14:	d01a      	beq.n	ff4c <__swbuf_r+0x88>
    ff16:	89a3      	ldrh	r3, [r4, #12]
    ff18:	07db      	lsls	r3, r3, #31
    ff1a:	d501      	bpl.n	ff20 <__swbuf_r+0x5c>
    ff1c:	2d0a      	cmp	r5, #10
    ff1e:	d015      	beq.n	ff4c <__swbuf_r+0x88>
    ff20:	0028      	movs	r0, r5
    ff22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff24:	4302      	orrs	r2, r0
    ff26:	6e61      	ldr	r1, [r4, #100]	; 0x64
    ff28:	81a2      	strh	r2, [r4, #12]
    ff2a:	4a14      	ldr	r2, [pc, #80]	; (ff7c <__swbuf_r+0xb8>)
    ff2c:	400a      	ands	r2, r1
    ff2e:	6662      	str	r2, [r4, #100]	; 0x64
    ff30:	6961      	ldr	r1, [r4, #20]
    ff32:	6822      	ldr	r2, [r4, #0]
    ff34:	1ad3      	subs	r3, r2, r3
    ff36:	428b      	cmp	r3, r1
    ff38:	dbe3      	blt.n	ff02 <__swbuf_r+0x3e>
    ff3a:	0021      	movs	r1, r4
    ff3c:	0030      	movs	r0, r6
    ff3e:	f7fe f8fd 	bl	e13c <_fflush_r>
    ff42:	2800      	cmp	r0, #0
    ff44:	d108      	bne.n	ff58 <__swbuf_r+0x94>
    ff46:	6822      	ldr	r2, [r4, #0]
    ff48:	2301      	movs	r3, #1
    ff4a:	e7db      	b.n	ff04 <__swbuf_r+0x40>
    ff4c:	0021      	movs	r1, r4
    ff4e:	0030      	movs	r0, r6
    ff50:	f7fe f8f4 	bl	e13c <_fflush_r>
    ff54:	2800      	cmp	r0, #0
    ff56:	d0e3      	beq.n	ff20 <__swbuf_r+0x5c>
    ff58:	2501      	movs	r5, #1
    ff5a:	426d      	negs	r5, r5
    ff5c:	e7e0      	b.n	ff20 <__swbuf_r+0x5c>
    ff5e:	0021      	movs	r1, r4
    ff60:	0030      	movs	r0, r6
    ff62:	f7fc fedd 	bl	cd20 <__swsetup_r>
    ff66:	2800      	cmp	r0, #0
    ff68:	d1f6      	bne.n	ff58 <__swbuf_r+0x94>
    ff6a:	230c      	movs	r3, #12
    ff6c:	5ee0      	ldrsh	r0, [r4, r3]
    ff6e:	6923      	ldr	r3, [r4, #16]
    ff70:	b281      	uxth	r1, r0
    ff72:	e7ba      	b.n	feea <__swbuf_r+0x26>
    ff74:	f7fe f93c 	bl	e1f0 <__sinit>
    ff78:	e7ad      	b.n	fed6 <__swbuf_r+0x12>
    ff7a:	46c0      	nop			; (mov r8, r8)
    ff7c:	ffffdfff 	.word	0xffffdfff

0000ff80 <_wcrtomb_r>:
    ff80:	b570      	push	{r4, r5, r6, lr}
    ff82:	001d      	movs	r5, r3
    ff84:	4b11      	ldr	r3, [pc, #68]	; (ffcc <_wcrtomb_r+0x4c>)
    ff86:	b084      	sub	sp, #16
    ff88:	681b      	ldr	r3, [r3, #0]
    ff8a:	0004      	movs	r4, r0
    ff8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ff8e:	2900      	cmp	r1, #0
    ff90:	d00e      	beq.n	ffb0 <_wcrtomb_r+0x30>
    ff92:	2b00      	cmp	r3, #0
    ff94:	d016      	beq.n	ffc4 <_wcrtomb_r+0x44>
    ff96:	20e0      	movs	r0, #224	; 0xe0
    ff98:	581e      	ldr	r6, [r3, r0]
    ff9a:	002b      	movs	r3, r5
    ff9c:	0020      	movs	r0, r4
    ff9e:	47b0      	blx	r6
    ffa0:	1c43      	adds	r3, r0, #1
    ffa2:	d103      	bne.n	ffac <_wcrtomb_r+0x2c>
    ffa4:	2300      	movs	r3, #0
    ffa6:	602b      	str	r3, [r5, #0]
    ffa8:	338a      	adds	r3, #138	; 0x8a
    ffaa:	6023      	str	r3, [r4, #0]
    ffac:	b004      	add	sp, #16
    ffae:	bd70      	pop	{r4, r5, r6, pc}
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d009      	beq.n	ffc8 <_wcrtomb_r+0x48>
    ffb4:	22e0      	movs	r2, #224	; 0xe0
    ffb6:	a901      	add	r1, sp, #4
    ffb8:	589e      	ldr	r6, [r3, r2]
    ffba:	0020      	movs	r0, r4
    ffbc:	002b      	movs	r3, r5
    ffbe:	2200      	movs	r2, #0
    ffc0:	47b0      	blx	r6
    ffc2:	e7ed      	b.n	ffa0 <_wcrtomb_r+0x20>
    ffc4:	4b02      	ldr	r3, [pc, #8]	; (ffd0 <_wcrtomb_r+0x50>)
    ffc6:	e7e6      	b.n	ff96 <_wcrtomb_r+0x16>
    ffc8:	4b01      	ldr	r3, [pc, #4]	; (ffd0 <_wcrtomb_r+0x50>)
    ffca:	e7f3      	b.n	ffb4 <_wcrtomb_r+0x34>
    ffcc:	20000070 	.word	0x20000070
    ffd0:	200008b4 	.word	0x200008b4

0000ffd4 <__ascii_wctomb>:
    ffd4:	2900      	cmp	r1, #0
    ffd6:	d004      	beq.n	ffe2 <__ascii_wctomb+0xe>
    ffd8:	2aff      	cmp	r2, #255	; 0xff
    ffda:	d804      	bhi.n	ffe6 <__ascii_wctomb+0x12>
    ffdc:	2001      	movs	r0, #1
    ffde:	700a      	strb	r2, [r1, #0]
    ffe0:	4770      	bx	lr
    ffe2:	2000      	movs	r0, #0
    ffe4:	e7fc      	b.n	ffe0 <__ascii_wctomb+0xc>
    ffe6:	238a      	movs	r3, #138	; 0x8a
    ffe8:	6003      	str	r3, [r0, #0]
    ffea:	2001      	movs	r0, #1
    ffec:	4240      	negs	r0, r0
    ffee:	e7f7      	b.n	ffe0 <__ascii_wctomb+0xc>

0000fff0 <_close>:
    fff0:	2258      	movs	r2, #88	; 0x58
    fff2:	2001      	movs	r0, #1
    fff4:	4b01      	ldr	r3, [pc, #4]	; (fffc <_close+0xc>)
    fff6:	4240      	negs	r0, r0
    fff8:	601a      	str	r2, [r3, #0]
    fffa:	4770      	bx	lr
    fffc:	20001554 	.word	0x20001554

00010000 <_fstat>:
   10000:	2258      	movs	r2, #88	; 0x58
   10002:	2001      	movs	r0, #1
   10004:	4b01      	ldr	r3, [pc, #4]	; (1000c <_fstat+0xc>)
   10006:	4240      	negs	r0, r0
   10008:	601a      	str	r2, [r3, #0]
   1000a:	4770      	bx	lr
   1000c:	20001554 	.word	0x20001554

00010010 <_isatty>:
   10010:	2258      	movs	r2, #88	; 0x58
   10012:	4b02      	ldr	r3, [pc, #8]	; (1001c <_isatty+0xc>)
   10014:	2000      	movs	r0, #0
   10016:	601a      	str	r2, [r3, #0]
   10018:	4770      	bx	lr
   1001a:	46c0      	nop			; (mov r8, r8)
   1001c:	20001554 	.word	0x20001554

00010020 <_lseek>:
   10020:	2258      	movs	r2, #88	; 0x58
   10022:	2001      	movs	r0, #1
   10024:	4b01      	ldr	r3, [pc, #4]	; (1002c <_lseek+0xc>)
   10026:	4240      	negs	r0, r0
   10028:	601a      	str	r2, [r3, #0]
   1002a:	4770      	bx	lr
   1002c:	20001554 	.word	0x20001554

00010030 <_read>:
   10030:	2258      	movs	r2, #88	; 0x58
   10032:	2001      	movs	r0, #1
   10034:	4b01      	ldr	r3, [pc, #4]	; (1003c <_read+0xc>)
   10036:	4240      	negs	r0, r0
   10038:	601a      	str	r2, [r3, #0]
   1003a:	4770      	bx	lr
   1003c:	20001554 	.word	0x20001554

00010040 <_write>:
   10040:	2258      	movs	r2, #88	; 0x58
   10042:	2001      	movs	r0, #1
   10044:	4b01      	ldr	r3, [pc, #4]	; (1004c <_write+0xc>)
   10046:	4240      	negs	r0, r0
   10048:	601a      	str	r2, [r3, #0]
   1004a:	4770      	bx	lr
   1004c:	20001554 	.word	0x20001554
   10050:	74696e69 	.word	0x74696e69
   10054:	69746169 	.word	0x69746169
   10058:	4c20676e 	.word	0x4c20676e
   1005c:	4d204354 	.word	0x4d204354
   10060:	72657869 	.word	0x72657869
   10064:	00000000 	.word	0x00000000
   10068:	00000744 	.word	0x00000744
   1006c:	00000770 	.word	0x00000770
   10070:	0000077c 	.word	0x0000077c
   10074:	00000788 	.word	0x00000788
   10078:	00000794 	.word	0x00000794
   1007c:	000007a0 	.word	0x000007a0
   10080:	000007ac 	.word	0x000007ac
   10084:	000007b8 	.word	0x000007b8
   10088:	000007c4 	.word	0x000007c4
   1008c:	000007d0 	.word	0x000007d0
   10090:	000007dc 	.word	0x000007dc
   10094:	000007e8 	.word	0x000007e8
   10098:	00000834 	.word	0x00000834
   1009c:	00000834 	.word	0x00000834
   100a0:	00000834 	.word	0x00000834
   100a4:	000007f4 	.word	0x000007f4
   100a8:	00000800 	.word	0x00000800
   100ac:	00000834 	.word	0x00000834
   100b0:	00000834 	.word	0x00000834
   100b4:	00000834 	.word	0x00000834
   100b8:	0000080c 	.word	0x0000080c
   100bc:	0000081a 	.word	0x0000081a
   100c0:	00000826 	.word	0x00000826
   100c4:	00000974 	.word	0x00000974
   100c8:	000009a0 	.word	0x000009a0
   100cc:	000009b0 	.word	0x000009b0
   100d0:	0000098a 	.word	0x0000098a
   100d4:	0000098a 	.word	0x0000098a
   100d8:	000009c4 	.word	0x000009c4
   100dc:	0000098a 	.word	0x0000098a
   100e0:	0000098a 	.word	0x0000098a
   100e4:	0000098a 	.word	0x0000098a
   100e8:	0000098a 	.word	0x0000098a
   100ec:	0000098a 	.word	0x0000098a
   100f0:	0000098a 	.word	0x0000098a
   100f4:	0000098a 	.word	0x0000098a
   100f8:	0000098a 	.word	0x0000098a
   100fc:	0000098a 	.word	0x0000098a
   10100:	0000098a 	.word	0x0000098a
   10104:	0000098a 	.word	0x0000098a
   10108:	000009fa 	.word	0x000009fa
   1010c:	00000a0e 	.word	0x00000a0e
   10110:	00000a22 	.word	0x00000a22
   10114:	64616552 	.word	0x64616552
   10118:	64255220 	.word	0x64255220
   1011c:	00000000 	.word	0x00000000
   10120:	3020203a 	.word	0x3020203a
   10124:	38302578 	.word	0x38302578
   10128:	000a786c 	.word	0x000a786c
   1012c:	74697257 	.word	0x74697257
   10130:	25522065 	.word	0x25522065
   10134:	00000064 	.word	0x00000064
   10138:	3020203a 	.word	0x3020203a
   1013c:	38302578 	.word	0x38302578
   10140:	0009786c 	.word	0x0009786c
   10144:	72727543 	.word	0x72727543
   10148:	20746e65 	.word	0x20746e65
   1014c:	71657266 	.word	0x71657266
   10150:	636e6575 	.word	0x636e6575
   10154:	25203a65 	.word	0x25203a65
   10158:	000a666c 	.word	0x000a666c
   1015c:	2a2a2a2a 	.word	0x2a2a2a2a
   10160:	2a2a2a2a 	.word	0x2a2a2a2a
   10164:	2a2a2a2a 	.word	0x2a2a2a2a
   10168:	2a2a2a2a 	.word	0x2a2a2a2a
   1016c:	2a2a2a2a 	.word	0x2a2a2a2a
   10170:	2a2a2a2a 	.word	0x2a2a2a2a
   10174:	0d0a2a2a 	.word	0x0d0a2a2a
   10178:	00000000 	.word	0x00000000
   1017c:	20746f4e 	.word	0x20746f4e
   10180:	6b636f4c 	.word	0x6b636f4c
   10184:	61206465 	.word	0x61206465
   10188:	20203a74 	.word	0x20203a74
   1018c:	00666c25 	.word	0x00666c25
   10190:	7a484d20 	.word	0x7a484d20
   10194:	00000000 	.word	0x00000000
   10198:	2a2a2a2a 	.word	0x2a2a2a2a
   1019c:	2a2a2a2a 	.word	0x2a2a2a2a
   101a0:	2a2a2a2a 	.word	0x2a2a2a2a
   101a4:	2a2a2a2a 	.word	0x2a2a2a2a
   101a8:	2a2a2a2a 	.word	0x2a2a2a2a
   101ac:	2a2a2a2a 	.word	0x2a2a2a2a
   101b0:	00002a2a 	.word	0x00002a2a

000101b4 <_ZL22channel_divider_values>:
   101b4:	00000002 00000004 00000006 00000008     ................
   101c4:	0000000c 00000010 00000018 00000020     ............ ...
   101d4:	00000030 00000040 00000048 00000060     0...@...H...`...
   101e4:	00000080 000000c0                       ........

000101ec <_ZL17default_registers>:
	...
   101f8:	000000f1 44400007 00000000 00000000     ......@D........
	...
   10234:	00000064 0800000c 003f0000 00800001     d.........?.....
   10244:	0000c350 000003e8 000001f4 00001388     P...............
   10254:	00a80322 000109c4 00208001 00000000     "......... .....
   10264:	00000000 00800420 41800000 03000300     .... ......A....
   10274:	c8c207fc 00011f61 00000000 da800000     ....a...........
   10284:	8104fd51 00040028 1e210000 03ec0393     Q...(.....!.....
   10294:	318c318c 00020488 06240db0 007c071a     .1.1......$...|.
   102a4:	04010001 27b7f848 012c0064 064f0080     ....H..'d.,...O.
   102b4:	40001e70 00185001 160410d8 00b22000     p..@.P....... ..
   102c4:	03e87802 06420e43 080c0500 0000211c     .x..C.B......!..
   102d4:	682f2e2e 732f6c61 682f6372 645f6c61     ../hal/src/hal_d
   102e4:	735f6361 2e636e79 00000063 682f2e2e     ac_sync.c...../h
   102f4:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
   10304:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
   10314:	6d5f6970 6e79735f 00632e63 682f2e2e     pi_m_sync.c.../h
   10324:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
   10334:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   10344:	755f6c61 74726173 7973615f 632e636e     al_usart_async.c
   10354:	00000000 682f2e2e 752f6c61 736c6974     ....../hal/utils
   10364:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
   10374:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
   10384:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
   10394:	65666675 00632e72 682f2e2e 642f6c70     uffer.c.../hpl/d
   103a4:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000103b4 <_map>:
   103b4:	0000000e 0000000e 682f2e2e 652f6c70     ........../hpl/e
   103c4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000103d4 <_usarts>:
   103d4:	00000003 40100004 00030000 0000ff2e     .......@........
   103e4:	00000000                                ....

000103e8 <_i2cms>:
	...

00010400 <_i2css>:
	...

00010410 <sercomspi_regs>:
   10410:	0020000c 00020000 00000000 01ff003b     .. .........;...
   10420:	20000c00 02000000 00000000 ff000500     ... ............
   10430:	000c0101 00000030 00000002 00170000     ....0...........
   10440:	000201ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
   10450:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00010460 <_tcs>:
   10460:	03680003 00000000 00000000 00001770     ..h.........p...
   10470:	00000000 03680004 00000000 00000000     ......h.........
   10480:	0000007d 00000000 682f2e2e 742f6c70     }........./hpl/t
   10490:	70682f63 63745f6c 0000632e 00004a25     c/hpl_tc.c..%J..
   104a0:	00000804                                ....

000104a4 <_usb_ep_cfgs>:
   104a4:	2000122c 00000000 00000040 200011ec     ,.. ....@...... 
   104b4:	200011ac 00400040 2000116c 2000112c     ... @.@.l.. ,.. 
   104c4:	00400040 200010ec 200010ac 00400040     @.@.... ... @.@.
   104d4:	2000106c 00000000 00000040 00005922     l.. ....@..."Y..
   104e4:	000058fe 00005922 00005904 00005922     .X.."Y...Y.."Y..
   104f4:	000058ce 00005922 00005922 00005922     .X.."Y.."Y.."Y..
   10504:	000058e0 00005922 0000590a 752f2e2e     .X.."Y...Y..../u
   10514:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
   10524:	00000063                                c...

00010528 <_ZTV6Stream>:
	...
   10530:	0000612d 0000612f 00005dc5 00005dc9     -a../a...]...]..
   10540:	0000612d 0000612d 0000612d              -a..-a..-a..

0001054c <_ZTV9CDC_Class>:
	...
   10554:	00005e33 00005fe1 00005dc5 00005f61     3^..._...]..a_..
   10564:	00005e5b 00005ec9 00005e09 00005ef1     [^...^...^...^..
   10574:	00006051 00005f71 2e257830 00005838     Q`..q_..0x%.8X..
   10584:	00000a0d 006e616e 00666e69 0066766f     ....nan.inf.ovf.
   10594:	656e6f74 0000203a 00000a0d 00676f6c     tone: ......log.
   105a4:	00776f70                                pow.

000105a8 <TWO52>:
   105a8:	00000000 43300000 00000000 c3300000     ......0C......0.
   105b8:	00008dfc 00008dcc 00008dde 00008d20     ............ ...
   105c8:	00008dde 00008dc2 00008dde 00008d20     ............ ...
   105d8:	00008dcc 00008dcc 00008dc2 00008d20     ............ ...
   105e8:	00008d28 00008d28 00008d28 00008de4     (...(...(.......
   105f8:	00008dcc 00008dcc 00008da0 00008e84     ................
   10608:	00008da0 00008dc2 00008da0 00008e84     ................
   10618:	00008dcc 00008dcc 00008dc2 00008e84     ................
   10628:	00008d28 00008d28 00008d28 00008e8e     (...(...(.......
   10638:	0000917c 000090cc 000090cc 000090ca     |...............
   10648:	0000916e 0000916e 00009164 000090ca     n...n...d.......
   10658:	0000916e 00009164 0000916e 000090ca     n...d...n.......
   10668:	00009174 00009174 00009174 00009204     t...t...t.......
   10678:	00009f4c 00009f2e 00009ee8 00009e06     L...............
   10688:	00009ee8 00009f20 00009ee8 00009e06     .... ...........
   10698:	00009f2e 00009f2e 00009f20 00009e06     ........ .......
   106a8:	00009dfe 00009dfe 00009dfe 0000a164     ............d...
   106b8:	0000a7ac 0000a66c 0000a66c 0000a668     ....l...l...h...
   106c8:	0000a784 0000a784 0000a776 0000a668     ........v...h...
   106d8:	0000a784 0000a776 0000a784 0000a668     ....v.......h...
   106e8:	0000a78c 0000a78c 0000a78c 0000a990     ................

000106f8 <_global_impure_ptr>:
   106f8:	20000078 0000bbde 0000bcb2 0000bcb2     x.. ............
   10708:	0000bbca 0000bcb2 0000bcb2 0000bcb2     ................
   10718:	0000bcb2 0000bcb2 0000bcb2 0000bc84     ................
   10728:	0000b796 0000bcb2 0000b78c 0000b7a0     ................
   10738:	0000bcb2 0000bbd4 0000b960 0000b960     ........`...`...
   10748:	0000b960 0000b960 0000b960 0000b960     `...`...`...`...
   10758:	0000b960 0000b960 0000b960 0000bcb2     `...`...`.......
   10768:	0000bcb2 0000bcb2 0000bcb2 0000bcb2     ................
   10778:	0000bcb2 0000bcb2 0000bcb2 0000bcb2     ................
   10788:	0000bcb2 0000bc9a 0000bbee 0000bcb2     ................
   10798:	0000bbee 0000bcb2 0000bcb2 0000bcb2     ................
   107a8:	0000bcb2 0000bb54 0000bcb2 0000bcb2     ....T...........
   107b8:	0000bb5e 0000bcb2 0000bcb2 0000bcb2     ^...............
   107c8:	0000bcb2 0000bcb2 0000bb8c 0000bcb2     ................
   107d8:	0000bcb2 0000bbba 0000bcb2 0000bcb2     ................
   107e8:	0000bcb2 0000bcb2 0000bcb2 0000bcb2     ................
   107f8:	0000bcb2 0000bcb2 0000bcb2 0000bcb2     ................
   10808:	0000b9a0 0000b9d6 0000bbee 0000bbee     ................
   10818:	0000bbee 0000ba7e 0000b9d6 0000bcb2     ....~...........
   10828:	0000bcb2 0000ba88 0000bcb2 0000ba9a     ................
   10838:	0000bcae 0000bac8 0000baf2 0000bcb2     ................
   10848:	0000bafc 0000bcb2 0000bcaa 0000bcb2     ................
   10858:	0000bcb2 0000b7ee 00464e49 004e414e     ........INF.NAN.
   10868:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   10878:	00000000 33323130 37363534 62613938     ....0123456789ab
   10888:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   10898:	00000030                                0...

0001089c <blanks.7238>:
   1089c:	20202020 20202020 20202020 20202020                     

000108ac <zeroes.7239>:
   108ac:	30303030 30303030 30303030 30303030     0000000000000000
   108bc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   108cc:	00000000                                ....

000108d0 <__mprec_bigtens>:
   108d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   108e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   108f0:	7f73bf3c 75154fdd                       <.s..O.u

000108f8 <__mprec_tens>:
   108f8:	00000000 3ff00000 00000000 40240000     .......?......$@
   10908:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   10918:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   10928:	00000000 412e8480 00000000 416312d0     .......A......cA
   10938:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   10948:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   10958:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   10968:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10978:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10988:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10998:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   109a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   109b8:	79d99db4 44ea7843                       ...yCx.D

000109c0 <p05.6055>:
   109c0:	00000005 00000019 0000007d 00000043     ........}...C...
   109d0:	49534f50 00000058 0000002e              POSIX.......

000109dc <_ctype_>:
   109dc:	20202000 20202020 28282020 20282828     .         ((((( 
   109ec:	20202020 20202020 20202020 20202020                     
   109fc:	10108820 10101010 10101010 10101010      ...............
   10a0c:	04040410 04040404 10040404 10101010     ................
   10a1c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   10a2c:	01010101 01010101 01010101 10101010     ................
   10a3c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10a4c:	02020202 02020202 02020202 10101010     ................
   10a5c:	00000020 00000000 00000000 00000000      ...............
	...

00010ae0 <_init>:
   10ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ae2:	46c0      	nop			; (mov r8, r8)
   10ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10ae6:	bc08      	pop	{r3}
   10ae8:	469e      	mov	lr, r3
   10aea:	4770      	bx	lr

00010aec <__init_array_start>:
   10aec:	0000cee9 	.word	0x0000cee9

00010af0 <__frame_dummy_init_array_entry>:
   10af0:	000000dd 00000455 00000539 00000d85     ....U...9.......
   10b00:	00001765 00006111 00006519 000067f9     e....a...e...g..

00010b10 <_fini>:
   10b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b12:	46c0      	nop			; (mov r8, r8)
   10b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10b16:	bc08      	pop	{r3}
   10b18:	469e      	mov	lr, r3
   10b1a:	4770      	bx	lr

00010b1c <__fini_array_start>:
   10b1c:	000000b5 	.word	0x000000b5
