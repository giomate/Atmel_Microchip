
LTC_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001170c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001170c  0001170c  0002170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a20  20000000  00011714  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000b70  20000a20  00012138  00030a20  2**3
                  ALLOC
  4 .stack        00002000  20001590  00012ca8  00030a20  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005e0b0  00000000  00000000  00030aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009370  00000000  00000000  0008eb51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001e18b  00000000  00000000  00097ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001980  00000000  00000000  000b604c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b40  00000000  00000000  000b79cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029433  00000000  00000000  000b950c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025772  00000000  00000000  000e293f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009be6f  00000000  00000000  001080b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005d08  00000000  00000000  001a3f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  001a9c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  001a9cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 35 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .5. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 5d 35 00 00 15 01 00 00 15 01 00 00     ....]5..........
      5c:	09 54 00 00 15 01 00 00 15 01 00 00 15 01 00 00     .T..............
      6c:	15 01 00 00 9d 39 00 00 15 01 00 00 15 01 00 00     .....9..........
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 59 40 00 00     ............Y@..
      8c:	6d 40 00 00 15 01 00 00 15 01 00 00 15 01 00 00     m@..............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a20 	.word	0x20000a20
      d4:	00000000 	.word	0x00000000
      d8:	00011714 	.word	0x00011714

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a24 	.word	0x20000a24
     108:	00011714 	.word	0x00011714
     10c:	00011714 	.word	0x00011714
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00011714 	.word	0x00011714
     1ac:	20000000 	.word	0x20000000
     1b0:	20000a20 	.word	0x20000a20
     1b4:	20000a20 	.word	0x20000a20
     1b8:	20001590 	.word	0x20001590
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	0000becd 	.word	0x0000becd
     1d8:	00000615 	.word	0x00000615

000001dc <_ZN15LTC5548_HANDLERD1Ev>:
LTC5548_HANDLER::LTC5548_HANDLER() {
	// TODO Auto-generated constructor stub

}

LTC5548_HANDLER::~LTC5548_HANDLER() {
     1dc:	b510      	push	{r4, lr}
     1de:	0004      	movs	r4, r0
     1e0:	4b01      	ldr	r3, [pc, #4]	; (1e8 <_ZN15LTC5548_HANDLERD1Ev+0xc>)
     1e2:	4798      	blx	r3
	// TODO Auto-generated destructor stub
}
     1e4:	0020      	movs	r0, r4
     1e6:	bd10      	pop	{r4, pc}
     1e8:	000006c1 	.word	0x000006c1

000001ec <_ZN15LTC5548_HANDLERC1Ev>:
LTC5548_HANDLER::LTC5548_HANDLER() {
     1ec:	b510      	push	{r4, lr}
     1ee:	0004      	movs	r4, r0
     1f0:	4b04      	ldr	r3, [pc, #16]	; (204 <_ZN15LTC5548_HANDLERC1Ev+0x18>)
     1f2:	4798      	blx	r3
     1f4:	2300      	movs	r3, #0
     1f6:	64a3      	str	r3, [r4, #72]	; 0x48
     1f8:	64e3      	str	r3, [r4, #76]	; 0x4c
     1fa:	6523      	str	r3, [r4, #80]	; 0x50
     1fc:	6563      	str	r3, [r4, #84]	; 0x54
}
     1fe:	0020      	movs	r0, r4
     200:	bd10      	pop	{r4, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	00000699 	.word	0x00000699

00000208 <_Z41__static_initialization_and_destruction_0ii>:
		Check_Mixer();
	}
	
}

LTC5548_HANDLER ltc;
     208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     20a:	2801      	cmp	r0, #1
     20c:	d000      	beq.n	210 <_Z41__static_initialization_and_destruction_0ii+0x8>
     20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     210:	4b13      	ldr	r3, [pc, #76]	; (260 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     212:	4299      	cmp	r1, r3
     214:	d1fb      	bne.n	20e <_Z41__static_initialization_and_destruction_0ii+0x6>
static lmx2694_Handler local_lmx;
     216:	4c13      	ldr	r4, [pc, #76]	; (264 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     218:	0020      	movs	r0, r4
     21a:	4b13      	ldr	r3, [pc, #76]	; (268 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     21c:	4798      	blx	r3
     21e:	4d13      	ldr	r5, [pc, #76]	; (26c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     220:	002a      	movs	r2, r5
     222:	4913      	ldr	r1, [pc, #76]	; (270 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     224:	0020      	movs	r0, r4
     226:	4e13      	ldr	r6, [pc, #76]	; (274 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     228:	47b0      	blx	r6
static ADF5610_Driver local_adf;
     22a:	3458      	adds	r4, #88	; 0x58
     22c:	0020      	movs	r0, r4
     22e:	4b12      	ldr	r3, [pc, #72]	; (278 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     230:	4798      	blx	r3
     232:	002a      	movs	r2, r5
     234:	4911      	ldr	r1, [pc, #68]	; (27c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     236:	0020      	movs	r0, r4
     238:	47b0      	blx	r6
static ZCD_Handler local_counter;
     23a:	4c11      	ldr	r4, [pc, #68]	; (280 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     23c:	0027      	movs	r7, r4
     23e:	3760      	adds	r7, #96	; 0x60
     240:	0038      	movs	r0, r7
     242:	4b10      	ldr	r3, [pc, #64]	; (284 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     244:	4798      	blx	r3
     246:	002a      	movs	r2, r5
     248:	490f      	ldr	r1, [pc, #60]	; (288 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     24a:	0038      	movs	r0, r7
     24c:	47b0      	blx	r6
LTC5548_HANDLER ltc;
     24e:	3474      	adds	r4, #116	; 0x74
     250:	0020      	movs	r0, r4
     252:	4b0e      	ldr	r3, [pc, #56]	; (28c <_Z41__static_initialization_and_destruction_0ii+0x84>)
     254:	4798      	blx	r3
     256:	002a      	movs	r2, r5
     258:	490d      	ldr	r1, [pc, #52]	; (290 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     25a:	0020      	movs	r0, r4
     25c:	47b0      	blx	r6
     25e:	e7d6      	b.n	20e <_Z41__static_initialization_and_destruction_0ii+0x6>
     260:	0000ffff 	.word	0x0000ffff
     264:	20000a40 	.word	0x20000a40
     268:	00001269 	.word	0x00001269
     26c:	20000000 	.word	0x20000000
     270:	000012a9 	.word	0x000012a9
     274:	0000701d 	.word	0x0000701d
     278:	00000989 	.word	0x00000989
     27c:	000009d9 	.word	0x000009d9
     280:	20000bc0 	.word	0x20000bc0
     284:	00006b65 	.word	0x00006b65
     288:	00006b89 	.word	0x00006b89
     28c:	000001ed 	.word	0x000001ed
     290:	000001dd 	.word	0x000001dd

00000294 <_ZN15LTC5548_HANDLER8Start_RFEv>:
bool LTC5548_HANDLER::Start_RF(void){
     294:	b570      	push	{r4, r5, r6, lr}
     296:	0006      	movs	r6, r0
		while(!lmx->Init()){
     298:	6b30      	ldr	r0, [r6, #48]	; 0x30
     29a:	4b10      	ldr	r3, [pc, #64]	; (2dc <_ZN15LTC5548_HANDLER8Start_RFEv+0x48>)
     29c:	4798      	blx	r3
     29e:	2800      	cmp	r0, #0
     2a0:	d111      	bne.n	2c6 <_ZN15LTC5548_HANDLER8Start_RFEv+0x32>
			delay_ms(100);
     2a2:	3064      	adds	r0, #100	; 0x64
     2a4:	4b0e      	ldr	r3, [pc, #56]	; (2e0 <_ZN15LTC5548_HANDLER8Start_RFEv+0x4c>)
     2a6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     2a8:	2180      	movs	r1, #128	; 0x80
     2aa:	05c9      	lsls	r1, r1, #23
     2ac:	239c      	movs	r3, #156	; 0x9c
     2ae:	22c0      	movs	r2, #192	; 0xc0
     2b0:	05d2      	lsls	r2, r2, #23
     2b2:	50d1      	str	r1, [r2, r3]
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     2b4:	4d0b      	ldr	r5, [pc, #44]	; (2e4 <_ZN15LTC5548_HANDLER8Start_RFEv+0x50>)
     2b6:	490c      	ldr	r1, [pc, #48]	; (2e8 <_ZN15LTC5548_HANDLER8Start_RFEv+0x54>)
     2b8:	0028      	movs	r0, r5
     2ba:	4c0c      	ldr	r4, [pc, #48]	; (2ec <_ZN15LTC5548_HANDLER8Start_RFEv+0x58>)
     2bc:	47a0      	blx	r4
     2be:	490c      	ldr	r1, [pc, #48]	; (2f0 <_ZN15LTC5548_HANDLER8Start_RFEv+0x5c>)
     2c0:	0028      	movs	r0, r5
     2c2:	47a0      	blx	r4
     2c4:	e7e8      	b.n	298 <_ZN15LTC5548_HANDLER8Start_RFEv+0x4>
     2c6:	4d07      	ldr	r5, [pc, #28]	; (2e4 <_ZN15LTC5548_HANDLER8Start_RFEv+0x50>)
     2c8:	490a      	ldr	r1, [pc, #40]	; (2f4 <_ZN15LTC5548_HANDLER8Start_RFEv+0x60>)
     2ca:	0028      	movs	r0, r5
     2cc:	4c07      	ldr	r4, [pc, #28]	; (2ec <_ZN15LTC5548_HANDLER8Start_RFEv+0x58>)
     2ce:	47a0      	blx	r4
     2d0:	4907      	ldr	r1, [pc, #28]	; (2f0 <_ZN15LTC5548_HANDLER8Start_RFEv+0x5c>)
     2d2:	0028      	movs	r0, r5
     2d4:	47a0      	blx	r4
}
     2d6:	2001      	movs	r0, #1
     2d8:	bd70      	pop	{r4, r5, r6, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	00001911 	.word	0x00001911
     2e0:	000023d1 	.word	0x000023d1
     2e4:	2000136c 	.word	0x2000136c
     2e8:	00010b44 	.word	0x00010b44
     2ec:	0000649d 	.word	0x0000649d
     2f0:	00010b5c 	.word	0x00010b5c
     2f4:	00010b60 	.word	0x00010b60

000002f8 <_ZN15LTC5548_HANDLER8Start_LOEv>:
bool LTC5548_HANDLER::Start_LO(void){
     2f8:	b570      	push	{r4, r5, r6, lr}
     2fa:	0006      	movs	r6, r0
	while(!adf->Init()){
     2fc:	6b70      	ldr	r0, [r6, #52]	; 0x34
     2fe:	4b10      	ldr	r3, [pc, #64]	; (340 <_ZN15LTC5548_HANDLER8Start_LOEv+0x48>)
     300:	4798      	blx	r3
     302:	2800      	cmp	r0, #0
     304:	d111      	bne.n	32a <_ZN15LTC5548_HANDLER8Start_LOEv+0x32>
		delay_ms(100);
     306:	3064      	adds	r0, #100	; 0x64
     308:	4b0e      	ldr	r3, [pc, #56]	; (344 <_ZN15LTC5548_HANDLER8Start_LOEv+0x4c>)
     30a:	4798      	blx	r3
     30c:	2180      	movs	r1, #128	; 0x80
     30e:	05c9      	lsls	r1, r1, #23
     310:	239c      	movs	r3, #156	; 0x9c
     312:	22c0      	movs	r2, #192	; 0xc0
     314:	05d2      	lsls	r2, r2, #23
     316:	50d1      	str	r1, [r2, r3]
     318:	4d0b      	ldr	r5, [pc, #44]	; (348 <_ZN15LTC5548_HANDLER8Start_LOEv+0x50>)
     31a:	490c      	ldr	r1, [pc, #48]	; (34c <_ZN15LTC5548_HANDLER8Start_LOEv+0x54>)
     31c:	0028      	movs	r0, r5
     31e:	4c0c      	ldr	r4, [pc, #48]	; (350 <_ZN15LTC5548_HANDLER8Start_LOEv+0x58>)
     320:	47a0      	blx	r4
     322:	490c      	ldr	r1, [pc, #48]	; (354 <_ZN15LTC5548_HANDLER8Start_LOEv+0x5c>)
     324:	0028      	movs	r0, r5
     326:	47a0      	blx	r4
     328:	e7e8      	b.n	2fc <_ZN15LTC5548_HANDLER8Start_LOEv+0x4>
     32a:	4d07      	ldr	r5, [pc, #28]	; (348 <_ZN15LTC5548_HANDLER8Start_LOEv+0x50>)
     32c:	490a      	ldr	r1, [pc, #40]	; (358 <_ZN15LTC5548_HANDLER8Start_LOEv+0x60>)
     32e:	0028      	movs	r0, r5
     330:	4c07      	ldr	r4, [pc, #28]	; (350 <_ZN15LTC5548_HANDLER8Start_LOEv+0x58>)
     332:	47a0      	blx	r4
     334:	4907      	ldr	r1, [pc, #28]	; (354 <_ZN15LTC5548_HANDLER8Start_LOEv+0x5c>)
     336:	0028      	movs	r0, r5
     338:	47a0      	blx	r4
}
     33a:	2001      	movs	r0, #1
     33c:	bd70      	pop	{r4, r5, r6, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000010c9 	.word	0x000010c9
     344:	000023d1 	.word	0x000023d1
     348:	2000136c 	.word	0x2000136c
     34c:	00010b74 	.word	0x00010b74
     350:	0000649d 	.word	0x0000649d
     354:	00010b5c 	.word	0x00010b5c
     358:	00010b8c 	.word	0x00010b8c

0000035c <_ZN15LTC5548_HANDLER10Set_EnableEb>:
bool LTC5548_HANDLER::Set_Enable(bool st){
     35c:	b570      	push	{r4, r5, r6, lr}
     35e:	000c      	movs	r4, r1
	enable=st;
     360:	2340      	movs	r3, #64	; 0x40
     362:	54c1      	strb	r1, [r0, r3]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     364:	2900      	cmp	r1, #0
     366:	d013      	beq.n	390 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x34>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     368:	2180      	movs	r1, #128	; 0x80
     36a:	00c9      	lsls	r1, r1, #3
     36c:	3358      	adds	r3, #88	; 0x58
     36e:	22c0      	movs	r2, #192	; 0xc0
     370:	05d2      	lsls	r2, r2, #23
     372:	50d1      	str	r1, [r2, r3]
	if (enable)
     374:	2340      	movs	r3, #64	; 0x40
     376:	5cc3      	ldrb	r3, [r0, r3]
     378:	2b00      	cmp	r3, #0
     37a:	d110      	bne.n	39e <_ZN15LTC5548_HANDLER10Set_EnableEb+0x42>
     37c:	4e0c      	ldr	r6, [pc, #48]	; (3b0 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x54>)
     37e:	490d      	ldr	r1, [pc, #52]	; (3b4 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x58>)
     380:	0030      	movs	r0, r6
     382:	4d0d      	ldr	r5, [pc, #52]	; (3b8 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x5c>)
     384:	47a8      	blx	r5
     386:	490d      	ldr	r1, [pc, #52]	; (3bc <_ZN15LTC5548_HANDLER10Set_EnableEb+0x60>)
     388:	0030      	movs	r0, r6
     38a:	47a8      	blx	r5
}
     38c:	0020      	movs	r0, r4
     38e:	bd70      	pop	{r4, r5, r6, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     390:	2180      	movs	r1, #128	; 0x80
     392:	00c9      	lsls	r1, r1, #3
     394:	2394      	movs	r3, #148	; 0x94
     396:	22c0      	movs	r2, #192	; 0xc0
     398:	05d2      	lsls	r2, r2, #23
     39a:	50d1      	str	r1, [r2, r3]
     39c:	e7ea      	b.n	374 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x18>
     39e:	4e04      	ldr	r6, [pc, #16]	; (3b0 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x54>)
     3a0:	4907      	ldr	r1, [pc, #28]	; (3c0 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x64>)
     3a2:	0030      	movs	r0, r6
     3a4:	4d04      	ldr	r5, [pc, #16]	; (3b8 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x5c>)
     3a6:	47a8      	blx	r5
     3a8:	4904      	ldr	r1, [pc, #16]	; (3bc <_ZN15LTC5548_HANDLER10Set_EnableEb+0x60>)
     3aa:	0030      	movs	r0, r6
     3ac:	47a8      	blx	r5
     3ae:	e7ed      	b.n	38c <_ZN15LTC5548_HANDLER10Set_EnableEb+0x30>
     3b0:	2000136c 	.word	0x2000136c
     3b4:	00010bb0 	.word	0x00010bb0
     3b8:	0000649d 	.word	0x0000649d
     3bc:	00010b5c 	.word	0x00010b5c
     3c0:	00010ba0 	.word	0x00010ba0

000003c4 <_ZN15LTC5548_HANDLER11Start_MixerEv>:
bool LTC5548_HANDLER::Start_Mixer(void){
     3c4:	b510      	push	{r4, lr}
     3c6:	0004      	movs	r4, r0
	if(Start_LO()){
     3c8:	4b1f      	ldr	r3, [pc, #124]	; (448 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x84>)
     3ca:	4798      	blx	r3
     3cc:	2800      	cmp	r0, #0
     3ce:	d033      	beq.n	438 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x74>
		adf->Set_Target_Frequency(CENTER_FREQUENCY);
     3d0:	491e      	ldr	r1, [pc, #120]	; (44c <_ZN15LTC5548_HANDLER11Start_MixerEv+0x88>)
     3d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
     3d4:	4b1e      	ldr	r3, [pc, #120]	; (450 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x8c>)
     3d6:	4798      	blx	r3
		while (!adf->Is_Locked())
     3d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
     3da:	4b1e      	ldr	r3, [pc, #120]	; (454 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x90>)
     3dc:	4798      	blx	r3
     3de:	2800      	cmp	r0, #0
     3e0:	d107      	bne.n	3f2 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x2e>
			delay_ms(100);
     3e2:	3064      	adds	r0, #100	; 0x64
     3e4:	4b1c      	ldr	r3, [pc, #112]	; (458 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x94>)
     3e6:	4798      	blx	r3
			adf->Set_Target_Frequency(CENTER_FREQUENCY);
     3e8:	4918      	ldr	r1, [pc, #96]	; (44c <_ZN15LTC5548_HANDLER11Start_MixerEv+0x88>)
     3ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
     3ec:	4b18      	ldr	r3, [pc, #96]	; (450 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x8c>)
     3ee:	4798      	blx	r3
		while (!adf->Is_Locked())
     3f0:	e7f2      	b.n	3d8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x14>
		if (Start_RF())
     3f2:	0020      	movs	r0, r4
     3f4:	4b19      	ldr	r3, [pc, #100]	; (45c <_ZN15LTC5548_HANDLER11Start_MixerEv+0x98>)
     3f6:	4798      	blx	r3
     3f8:	2800      	cmp	r0, #0
     3fa:	d018      	beq.n	42e <_ZN15LTC5548_HANDLER11Start_MixerEv+0x6a>
			lmx->Set_Target_Frequency(OPTIMAL_FREQUENCY);
     3fc:	4918      	ldr	r1, [pc, #96]	; (460 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     3fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
     400:	4b18      	ldr	r3, [pc, #96]	; (464 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa0>)
     402:	4798      	blx	r3
			while (!lmx->Is_Locked())
     404:	6b20      	ldr	r0, [r4, #48]	; 0x30
     406:	4b18      	ldr	r3, [pc, #96]	; (468 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa4>)
     408:	4798      	blx	r3
     40a:	2800      	cmp	r0, #0
     40c:	d107      	bne.n	41e <_ZN15LTC5548_HANDLER11Start_MixerEv+0x5a>
				delay_ms(100);
     40e:	3064      	adds	r0, #100	; 0x64
     410:	4b11      	ldr	r3, [pc, #68]	; (458 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x94>)
     412:	4798      	blx	r3
				lmx->Set_Target_Frequency(OPTIMAL_FREQUENCY);
     414:	4912      	ldr	r1, [pc, #72]	; (460 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     416:	6b20      	ldr	r0, [r4, #48]	; 0x30
     418:	4b12      	ldr	r3, [pc, #72]	; (464 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa0>)
     41a:	4798      	blx	r3
			while (!lmx->Is_Locked())
     41c:	e7f2      	b.n	404 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x40>
			tune_rf_frequency=lmx->current_frequency;
     41e:	6b23      	ldr	r3, [r4, #48]	; 0x30
     420:	681b      	ldr	r3, [r3, #0]
     422:	63e3      	str	r3, [r4, #60]	; 0x3c
			Set_Enable(true);
     424:	2101      	movs	r1, #1
     426:	0020      	movs	r0, r4
     428:	4b10      	ldr	r3, [pc, #64]	; (46c <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa8>)
     42a:	4798      	blx	r3
     42c:	e008      	b.n	440 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x7c>
			Set_Enable(false);
     42e:	2100      	movs	r1, #0
     430:	0020      	movs	r0, r4
     432:	4b0e      	ldr	r3, [pc, #56]	; (46c <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa8>)
     434:	4798      	blx	r3
     436:	e003      	b.n	440 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x7c>
		Set_Enable(false);
     438:	2100      	movs	r1, #0
     43a:	0020      	movs	r0, r4
     43c:	4b0b      	ldr	r3, [pc, #44]	; (46c <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa8>)
     43e:	4798      	blx	r3
	return enable;
     440:	2340      	movs	r3, #64	; 0x40
     442:	5ce0      	ldrb	r0, [r4, r3]
}
     444:	bd10      	pop	{r4, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	000002f9 	.word	0x000002f9
     44c:	45610000 	.word	0x45610000
     450:	00001165 	.word	0x00001165
     454:	00000a41 	.word	0x00000a41
     458:	000023d1 	.word	0x000023d1
     45c:	00000295 	.word	0x00000295
     460:	456144f6 	.word	0x456144f6
     464:	00001a0d 	.word	0x00001a0d
     468:	00001839 	.word	0x00001839
     46c:	0000035d 	.word	0x0000035d

00000470 <_ZN15LTC5548_HANDLER4InitEv>:
bool LTC5548_HANDLER::Init(void){
     470:	b510      	push	{r4, lr}
     472:	0004      	movs	r4, r0
	Set_Enable(false);
     474:	2100      	movs	r1, #0
     476:	4b0a      	ldr	r3, [pc, #40]	; (4a0 <_ZN15LTC5548_HANDLER4InitEv+0x30>)
     478:	4798      	blx	r3
	lmx=&local_lmx;
     47a:	4b0a      	ldr	r3, [pc, #40]	; (4a4 <_ZN15LTC5548_HANDLER4InitEv+0x34>)
     47c:	6323      	str	r3, [r4, #48]	; 0x30
	adf=&local_adf;
     47e:	3358      	adds	r3, #88	; 0x58
     480:	6363      	str	r3, [r4, #52]	; 0x34
	zcd=&local_counter;
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <_ZN15LTC5548_HANDLER4InitEv+0x38>)
     484:	3360      	adds	r3, #96	; 0x60
     486:	63a3      	str	r3, [r4, #56]	; 0x38
	Start_Mixer();
     488:	0020      	movs	r0, r4
     48a:	4b08      	ldr	r3, [pc, #32]	; (4ac <_ZN15LTC5548_HANDLER4InitEv+0x3c>)
     48c:	4798      	blx	r3
	zcd->Init();
     48e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     490:	4b07      	ldr	r3, [pc, #28]	; (4b0 <_ZN15LTC5548_HANDLER4InitEv+0x40>)
     492:	4798      	blx	r3
	return !enable;
     494:	2340      	movs	r3, #64	; 0x40
     496:	5ce0      	ldrb	r0, [r4, r3]
     498:	2301      	movs	r3, #1
     49a:	4058      	eors	r0, r3
     49c:	b2c0      	uxtb	r0, r0
}
     49e:	bd10      	pop	{r4, pc}
     4a0:	0000035d 	.word	0x0000035d
     4a4:	20000a40 	.word	0x20000a40
     4a8:	20000bc0 	.word	0x20000bc0
     4ac:	000003c5 	.word	0x000003c5
     4b0:	00006b9d 	.word	0x00006b9d

000004b4 <_ZN15LTC5548_HANDLER11Check_MixerEv>:
bool LTC5548_HANDLER::Check_Mixer(void){
     4b4:	b510      	push	{r4, lr}
     4b6:	0004      	movs	r4, r0
	if(enable){
     4b8:	2340      	movs	r3, #64	; 0x40
     4ba:	5cc3      	ldrb	r3, [r0, r3]
     4bc:	2b00      	cmp	r3, #0
     4be:	d018      	beq.n	4f2 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x3e>
		if(adf->Is_Locked()){
     4c0:	6b40      	ldr	r0, [r0, #52]	; 0x34
     4c2:	4b17      	ldr	r3, [pc, #92]	; (520 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x6c>)
     4c4:	4798      	blx	r3
     4c6:	2800      	cmp	r0, #0
     4c8:	d00c      	beq.n	4e4 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x30>
			if (lmx->Is_Locked())
     4ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
     4cc:	4b15      	ldr	r3, [pc, #84]	; (524 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x70>)
     4ce:	4798      	blx	r3
     4d0:	2800      	cmp	r0, #0
     4d2:	d002      	beq.n	4da <_ZN15LTC5548_HANDLER11Check_MixerEv+0x26>
				return enable;
     4d4:	2340      	movs	r3, #64	; 0x40
     4d6:	5ce0      	ldrb	r0, [r4, r3]
     4d8:	e00a      	b.n	4f0 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x3c>
				Set_Enable(false);
     4da:	2100      	movs	r1, #0
     4dc:	0020      	movs	r0, r4
     4de:	4b12      	ldr	r3, [pc, #72]	; (528 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     4e0:	4798      	blx	r3
     4e2:	e003      	b.n	4ec <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
			Set_Enable(false);
     4e4:	2100      	movs	r1, #0
     4e6:	0020      	movs	r0, r4
     4e8:	4b0f      	ldr	r3, [pc, #60]	; (528 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     4ea:	4798      	blx	r3
	return enable;
     4ec:	2340      	movs	r3, #64	; 0x40
     4ee:	5ce0      	ldrb	r0, [r4, r3]
}
     4f0:	bd10      	pop	{r4, pc}
		if (adf->Is_Locked())
     4f2:	6b40      	ldr	r0, [r0, #52]	; 0x34
     4f4:	4b0a      	ldr	r3, [pc, #40]	; (520 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x6c>)
     4f6:	4798      	blx	r3
     4f8:	2800      	cmp	r0, #0
     4fa:	d00d      	beq.n	518 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x64>
			if (lmx->Is_Locked())
     4fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
     4fe:	4b09      	ldr	r3, [pc, #36]	; (524 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x70>)
     500:	4798      	blx	r3
     502:	2800      	cmp	r0, #0
     504:	d004      	beq.n	510 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x5c>
				Set_Enable(true);
     506:	2101      	movs	r1, #1
     508:	0020      	movs	r0, r4
     50a:	4b07      	ldr	r3, [pc, #28]	; (528 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     50c:	4798      	blx	r3
     50e:	e7ed      	b.n	4ec <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
				Start_RF();
     510:	0020      	movs	r0, r4
     512:	4b06      	ldr	r3, [pc, #24]	; (52c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x78>)
     514:	4798      	blx	r3
     516:	e7e9      	b.n	4ec <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
			Start_Mixer();
     518:	0020      	movs	r0, r4
     51a:	4b05      	ldr	r3, [pc, #20]	; (530 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x7c>)
     51c:	4798      	blx	r3
     51e:	e7e5      	b.n	4ec <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
     520:	00000a41 	.word	0x00000a41
     524:	00001839 	.word	0x00001839
     528:	0000035d 	.word	0x0000035d
     52c:	00000295 	.word	0x00000295
     530:	000003c5 	.word	0x000003c5

00000534 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv>:
float LTC5548_HANDLER::Tune_RF_Mixer(){
     534:	b570      	push	{r4, r5, r6, lr}
     536:	b082      	sub	sp, #8
     538:	0004      	movs	r4, r0
	if (Check_Mixer())
     53a:	4b24      	ldr	r3, [pc, #144]	; (5cc <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x98>)
     53c:	4798      	blx	r3
     53e:	2800      	cmp	r0, #0
     540:	d03f      	beq.n	5c2 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x8e>
		if (lmx->Is_Locked())
     542:	6b20      	ldr	r0, [r4, #48]	; 0x30
     544:	4b22      	ldr	r3, [pc, #136]	; (5d0 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x9c>)
     546:	4798      	blx	r3
     548:	2800      	cmp	r0, #0
     54a:	d10f      	bne.n	56c <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x38>
			if (error_counter==0xff)
     54c:	2360      	movs	r3, #96	; 0x60
     54e:	5ce3      	ldrb	r3, [r4, r3]
     550:	2bff      	cmp	r3, #255	; 0xff
     552:	d032      	beq.n	5ba <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x86>
				delay_ms(10);
     554:	200a      	movs	r0, #10
     556:	4b1f      	ldr	r3, [pc, #124]	; (5d4 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xa0>)
     558:	4798      	blx	r3
				lmx->Set_Target_Frequency(next_rf_frequency);
     55a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
     55c:	6b20      	ldr	r0, [r4, #48]	; 0x30
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xa4>)
     560:	4798      	blx	r3
			error_counter++;
     562:	2260      	movs	r2, #96	; 0x60
     564:	5ca3      	ldrb	r3, [r4, r2]
     566:	3301      	adds	r3, #1
     568:	54a3      	strb	r3, [r4, r2]
     56a:	e02d      	b.n	5c8 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x94>
     56c:	4d1b      	ldr	r5, [pc, #108]	; (5dc <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xa8>)
     56e:	491c      	ldr	r1, [pc, #112]	; (5e0 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xac>)
     570:	0028      	movs	r0, r5
     572:	4e1c      	ldr	r6, [pc, #112]	; (5e4 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xb0>)
     574:	47b0      	blx	r6
			usb<<"RF Frequency: "<<lmx->current_frequency<<TAB_SPACE;
     576:	6b23      	ldr	r3, [r4, #48]	; 0x30
     578:	6818      	ldr	r0, [r3, #0]
     57a:	4b1b      	ldr	r3, [pc, #108]	; (5e8 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xb4>)
     57c:	4798      	blx	r3
     57e:	0002      	movs	r2, r0
     580:	000b      	movs	r3, r1
     582:	2102      	movs	r1, #2
     584:	9100      	str	r1, [sp, #0]
     586:	0028      	movs	r0, r5
     588:	4918      	ldr	r1, [pc, #96]	; (5ec <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xb8>)
     58a:	4788      	blx	r1
     58c:	4918      	ldr	r1, [pc, #96]	; (5f0 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xbc>)
     58e:	0028      	movs	r0, r5
     590:	47b0      	blx	r6
			tone=zcd->Get_Tone();
     592:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     594:	4b17      	ldr	r3, [pc, #92]	; (5f4 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xc0>)
     596:	4798      	blx	r3
     598:	0001      	movs	r1, r0
     59a:	65a0      	str	r0, [r4, #88]	; 0x58
			tune_rf_frequency=lmx->current_frequency;
     59c:	6b23      	ldr	r3, [r4, #48]	; 0x30
     59e:	681b      	ldr	r3, [r3, #0]
     5a0:	63e3      	str	r3, [r4, #60]	; 0x3c
			next_rf_frequency=Calculate_Optimum(tone);
     5a2:	0020      	movs	r0, r4
     5a4:	4b14      	ldr	r3, [pc, #80]	; (5f8 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xc4>)
     5a6:	4798      	blx	r3
     5a8:	1c01      	adds	r1, r0, #0
     5aa:	65e0      	str	r0, [r4, #92]	; 0x5c
			lmx->Set_Target_Frequency(next_rf_frequency);
     5ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
     5ae:	4b0a      	ldr	r3, [pc, #40]	; (5d8 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xa4>)
     5b0:	4798      	blx	r3
			error_counter=0;
     5b2:	2200      	movs	r2, #0
     5b4:	2360      	movs	r3, #96	; 0x60
     5b6:	54e2      	strb	r2, [r4, r3]
     5b8:	e006      	b.n	5c8 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x94>
				Start_RF();
     5ba:	0020      	movs	r0, r4
     5bc:	4b0f      	ldr	r3, [pc, #60]	; (5fc <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0xc8>)
     5be:	4798      	blx	r3
     5c0:	e7cf      	b.n	562 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x2e>
		Check_Mixer();
     5c2:	0020      	movs	r0, r4
     5c4:	4b01      	ldr	r3, [pc, #4]	; (5cc <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x98>)
     5c6:	4798      	blx	r3
}
     5c8:	b002      	add	sp, #8
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	000004b5 	.word	0x000004b5
     5d0:	00001839 	.word	0x00001839
     5d4:	000023d1 	.word	0x000023d1
     5d8:	00001a0d 	.word	0x00001a0d
     5dc:	2000136c 	.word	0x2000136c
     5e0:	00010bc0 	.word	0x00010bc0
     5e4:	0000649d 	.word	0x0000649d
     5e8:	0000bc65 	.word	0x0000bc65
     5ec:	000067dd 	.word	0x000067dd
     5f0:	00010bd0 	.word	0x00010bd0
     5f4:	00006bbd 	.word	0x00006bbd
     5f8:	000006dd 	.word	0x000006dd
     5fc:	00000295 	.word	0x00000295

00000600 <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev>:
LTC5548_HANDLER ltc;
     600:	b510      	push	{r4, lr}
     602:	4902      	ldr	r1, [pc, #8]	; (60c <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev+0xc>)
     604:	2001      	movs	r0, #1
     606:	4b02      	ldr	r3, [pc, #8]	; (610 <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev+0x10>)
     608:	4798      	blx	r3
     60a:	bd10      	pop	{r4, pc}
     60c:	0000ffff 	.word	0x0000ffff
     610:	00000209 	.word	0x00000209

00000614 <main>:
#include "LTC5548HANDLER.h"
#include "CDC_Class.h"

static  uint16_t  dac_value=0;
int main(void)
{
     614:	b510      	push	{r4, lr}
	atmel_start_init();
     616:	4b12      	ldr	r3, [pc, #72]	; (660 <main+0x4c>)
     618:	4798      	blx	r3
		usb.Init();
     61a:	4c12      	ldr	r4, [pc, #72]	; (664 <main+0x50>)
     61c:	0020      	movs	r0, r4
     61e:	4b12      	ldr	r3, [pc, #72]	; (668 <main+0x54>)
     620:	4798      	blx	r3
		delay_ms(100);
     622:	2064      	movs	r0, #100	; 0x64
     624:	4b11      	ldr	r3, [pc, #68]	; (66c <main+0x58>)
     626:	4798      	blx	r3
		
		usb.print("[2J");
     628:	4911      	ldr	r1, [pc, #68]	; (670 <main+0x5c>)
     62a:	0020      	movs	r0, r4
     62c:	4b11      	ldr	r3, [pc, #68]	; (674 <main+0x60>)
     62e:	4798      	blx	r3
		usb.write(27);
     630:	211b      	movs	r1, #27
     632:	0020      	movs	r0, r4
     634:	4b10      	ldr	r3, [pc, #64]	; (678 <main+0x64>)
     636:	4798      	blx	r3
		usb.println("initiating LTC Mixer");
     638:	4910      	ldr	r1, [pc, #64]	; (67c <main+0x68>)
     63a:	0020      	movs	r0, r4
     63c:	4b10      	ldr	r3, [pc, #64]	; (680 <main+0x6c>)
     63e:	4798      	blx	r3
	dac_sync_enable_channel(&DAC_0, 0);
     640:	2100      	movs	r1, #0
     642:	4810      	ldr	r0, [pc, #64]	; (684 <main+0x70>)
     644:	4b10      	ldr	r3, [pc, #64]	; (688 <main+0x74>)
     646:	4798      	blx	r3
	
	ltc.Init();
     648:	4810      	ldr	r0, [pc, #64]	; (68c <main+0x78>)
     64a:	4b11      	ldr	r3, [pc, #68]	; (690 <main+0x7c>)
     64c:	4798      	blx	r3
	bool dir=true;
     64e:	2401      	movs	r4, #1

	/* Replace with your application code */
	while (1)
	{
		
		ltc.Tune_RF_Mixer();
     650:	480e      	ldr	r0, [pc, #56]	; (68c <main+0x78>)
     652:	4b10      	ldr	r3, [pc, #64]	; (694 <main+0x80>)
     654:	4798      	blx	r3
	//	ltc.Check_Mixer();
		
		dac_value=dir?0:0x3ff;
	//	dac_sync_write(&DAC_0, 0, &dac_value, 1);
		
		dir=!dir;
     656:	2301      	movs	r3, #1
     658:	405c      	eors	r4, r3
     65a:	b2e4      	uxtb	r4, r4
		ltc.Tune_RF_Mixer();
     65c:	e7f8      	b.n	650 <main+0x3c>
     65e:	46c0      	nop			; (mov r8, r8)
     660:	00001c11 	.word	0x00001c11
     664:	2000136c 	.word	0x2000136c
     668:	00006419 	.word	0x00006419
     66c:	000023d1 	.word	0x000023d1
     670:	00010bd4 	.word	0x00010bd4
     674:	0000649d 	.word	0x0000649d
     678:	00006177 	.word	0x00006177
     67c:	00010bd8 	.word	0x00010bd8
     680:	000064e1 	.word	0x000064e1
     684:	200014c0 	.word	0x200014c0
     688:	00002385 	.word	0x00002385
     68c:	20000c34 	.word	0x20000c34
     690:	00000471 	.word	0x00000471
     694:	00000535 	.word	0x00000535

00000698 <_ZN19MIXER_TUNNER_HELPERC1Ev>:
#include "CDC_Class.h"

// default constructor
MIXER_TUNNER_HELPER::MIXER_TUNNER_HELPER()
{
	minimum_tone=48000000.0;
     698:	4b05      	ldr	r3, [pc, #20]	; (6b0 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x18>)
     69a:	6143      	str	r3, [r0, #20]
	optimal_frequency=OPTIMAL_FREQUENCY;
     69c:	4b05      	ldr	r3, [pc, #20]	; (6b4 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x1c>)
     69e:	6183      	str	r3, [r0, #24]
	last_error_tune=240000;
     6a0:	4b05      	ldr	r3, [pc, #20]	; (6b8 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x20>)
     6a2:	6083      	str	r3, [r0, #8]
	error_tune=24000000;
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <_ZN19MIXER_TUNNER_HELPERC1Ev+0x24>)
     6a6:	6043      	str	r3, [r0, #4]
	direction=true;
     6a8:	2201      	movs	r2, #1
     6aa:	2328      	movs	r3, #40	; 0x28
     6ac:	54c2      	strb	r2, [r0, r3]
} //MIXER_TUNNER_HELPER
     6ae:	4770      	bx	lr
     6b0:	4c371b00 	.word	0x4c371b00
     6b4:	456144f6 	.word	0x456144f6
     6b8:	486a6000 	.word	0x486a6000
     6bc:	4bb71b00 	.word	0x4bb71b00

000006c0 <_ZN19MIXER_TUNNER_HELPERD1Ev>:

// default destructor
MIXER_TUNNER_HELPER::~MIXER_TUNNER_HELPER()
{
} //~MIXER_TUNNER_HELPER
     6c0:	4770      	bx	lr

000006c2 <_ZN19MIXER_TUNNER_HELPER18Calculate_GradientEm>:
	usb<<"gradient "<<gradient<<"\tdirection "<<direction<<"\terror "<<error_tune<<"\tgain "<<gain<<"\toptimum "<<optimum<<NEWLINE;
	return optimum;
}

bool MIXER_TUNNER_HELPER::Calculate_Gradient(uint32_t lv){
	tone_array[2]=tone_array[1];
     6c2:	6a03      	ldr	r3, [r0, #32]
     6c4:	6243      	str	r3, [r0, #36]	; 0x24
	tone_array[1]=tone_array[0];
     6c6:	69c2      	ldr	r2, [r0, #28]
     6c8:	6202      	str	r2, [r0, #32]
	tone_array[0]=lv;
     6ca:	61c1      	str	r1, [r0, #28]
	int32_t g1=tone_array[1]-tone_array[2];
     6cc:	1ad3      	subs	r3, r2, r3
	int32_t g0=tone_array[0]-tone_array[1];
     6ce:	1a89      	subs	r1, r1, r2
	gradient=g0-g1;
     6d0:	1ac9      	subs	r1, r1, r3
     6d2:	62c1      	str	r1, [r0, #44]	; 0x2c
	return gradient>0;
     6d4:	17c8      	asrs	r0, r1, #31
     6d6:	1a40      	subs	r0, r0, r1
     6d8:	0fc0      	lsrs	r0, r0, #31
	
}
     6da:	4770      	bx	lr

000006dc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm>:
float MIXER_TUNNER_HELPER::Calculate_Optimum(uint32_t tn){
     6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6de:	46ce      	mov	lr, r9
     6e0:	4647      	mov	r7, r8
     6e2:	b580      	push	{r7, lr}
     6e4:	b085      	sub	sp, #20
     6e6:	0005      	movs	r5, r0
     6e8:	000c      	movs	r4, r1
	if (tn>=24000000)
     6ea:	4b7a      	ldr	r3, [pc, #488]	; (8d4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1f8>)
     6ec:	4299      	cmp	r1, r3
     6ee:	d92e      	bls.n	74e <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x72>
		if (tn==24000000)
     6f0:	4b79      	ldr	r3, [pc, #484]	; (8d8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1fc>)
     6f2:	4299      	cmp	r1, r3
     6f4:	d00e      	beq.n	714 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x38>
			if (ltc.tune_rf_frequency>optimal_frequency)
     6f6:	4b79      	ldr	r3, [pc, #484]	; (8dc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     6f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
     6fa:	69ac      	ldr	r4, [r5, #24]
     6fc:	1c21      	adds	r1, r4, #0
     6fe:	4b78      	ldr	r3, [pc, #480]	; (8e0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     700:	4798      	blx	r3
     702:	2800      	cmp	r0, #0
     704:	d01c      	beq.n	740 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x64>
				optimum=optimal_frequency- float(1/2.0);
     706:	21fc      	movs	r1, #252	; 0xfc
     708:	0589      	lsls	r1, r1, #22
     70a:	1c20      	adds	r0, r4, #0
     70c:	4b75      	ldr	r3, [pc, #468]	; (8e4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     70e:	4798      	blx	r3
     710:	6028      	str	r0, [r5, #0]
     712:	e09e      	b.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
			if (ltc.tune_rf_frequency>optimal_frequency)
     714:	4b71      	ldr	r3, [pc, #452]	; (8dc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     716:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
     718:	69ac      	ldr	r4, [r5, #24]
     71a:	1c21      	adds	r1, r4, #0
     71c:	4b70      	ldr	r3, [pc, #448]	; (8e0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     71e:	4798      	blx	r3
     720:	2800      	cmp	r0, #0
     722:	d006      	beq.n	732 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x56>
				optimum=optimal_frequency- float(1/16.0);
     724:	21f6      	movs	r1, #246	; 0xf6
     726:	0589      	lsls	r1, r1, #22
     728:	1c20      	adds	r0, r4, #0
     72a:	4b6e      	ldr	r3, [pc, #440]	; (8e4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     72c:	4798      	blx	r3
     72e:	6028      	str	r0, [r5, #0]
     730:	e08f      	b.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
				optimum=optimal_frequency+ float(1/16.0);
     732:	21f6      	movs	r1, #246	; 0xf6
     734:	0589      	lsls	r1, r1, #22
     736:	1c20      	adds	r0, r4, #0
     738:	4b6b      	ldr	r3, [pc, #428]	; (8e8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x20c>)
     73a:	4798      	blx	r3
     73c:	6028      	str	r0, [r5, #0]
     73e:	e088      	b.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
				optimum=optimal_frequency+ float(1/2.0);
     740:	21fc      	movs	r1, #252	; 0xfc
     742:	0589      	lsls	r1, r1, #22
     744:	1c20      	adds	r0, r4, #0
     746:	4b68      	ldr	r3, [pc, #416]	; (8e8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x20c>)
     748:	4798      	blx	r3
     74a:	6028      	str	r0, [r5, #0]
     74c:	e081      	b.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
		if (tn>0)
     74e:	2900      	cmp	r1, #0
     750:	d07c      	beq.n	84c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x170>
			if ((tn!=0xffffff)&(tn!=0x6e3600))
     752:	4b66      	ldr	r3, [pc, #408]	; (8ec <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x210>)
     754:	18cb      	adds	r3, r1, r3
     756:	1e5a      	subs	r2, r3, #1
     758:	4193      	sbcs	r3, r2
     75a:	4a65      	ldr	r2, [pc, #404]	; (8f0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x214>)
     75c:	188a      	adds	r2, r1, r2
     75e:	1e51      	subs	r1, r2, #1
     760:	418a      	sbcs	r2, r1
     762:	421a      	tst	r2, r3
     764:	d075      	beq.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
				if (tn<minimum_tone)
     766:	0020      	movs	r0, r4
     768:	4b62      	ldr	r3, [pc, #392]	; (8f4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x218>)
     76a:	4798      	blx	r3
     76c:	1c06      	adds	r6, r0, #0
     76e:	6969      	ldr	r1, [r5, #20]
     770:	4b61      	ldr	r3, [pc, #388]	; (8f8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x21c>)
     772:	4798      	blx	r3
     774:	2800      	cmp	r0, #0
     776:	d003      	beq.n	780 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xa4>
					minimum_tone=float(tn);
     778:	616e      	str	r6, [r5, #20]
					optimal_frequency=ltc.tune_rf_frequency;
     77a:	4b58      	ldr	r3, [pc, #352]	; (8dc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     77e:	61ab      	str	r3, [r5, #24]
				direction=Calculate_Gradient(tn)?!direction:direction;
     780:	0021      	movs	r1, r4
     782:	0028      	movs	r0, r5
     784:	4b5d      	ldr	r3, [pc, #372]	; (8fc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x220>)
     786:	4798      	blx	r3
     788:	2800      	cmp	r0, #0
     78a:	d054      	beq.n	836 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x15a>
     78c:	2328      	movs	r3, #40	; 0x28
     78e:	5cec      	ldrb	r4, [r5, r3]
     790:	2301      	movs	r3, #1
     792:	405c      	eors	r4, r3
     794:	b2e4      	uxtb	r4, r4
     796:	2328      	movs	r3, #40	; 0x28
     798:	54ec      	strb	r4, [r5, r3]
				if (error_tune!=0)
     79a:	686f      	ldr	r7, [r5, #4]
     79c:	2100      	movs	r1, #0
     79e:	1c38      	adds	r0, r7, #0
     7a0:	4b57      	ldr	r3, [pc, #348]	; (900 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x224>)
     7a2:	4798      	blx	r3
     7a4:	2800      	cmp	r0, #0
     7a6:	d100      	bne.n	7aa <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xce>
					last_error_tune=error_tune;
     7a8:	60af      	str	r7, [r5, #8]
				if (direction)
     7aa:	2c00      	cmp	r4, #0
     7ac:	d046      	beq.n	83c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x160>
						error_tune=(float(tn))-minimum_tone;
     7ae:	6969      	ldr	r1, [r5, #20]
     7b0:	1c30      	adds	r0, r6, #0
     7b2:	4b4c      	ldr	r3, [pc, #304]	; (8e4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     7b4:	4798      	blx	r3
     7b6:	6068      	str	r0, [r5, #4]
				gain=exp((error_tune)/(abs(max(last_error_tune,error_tune))*8192.0));
     7b8:	686e      	ldr	r6, [r5, #4]
     7ba:	1c30      	adds	r0, r6, #0
     7bc:	4b51      	ldr	r3, [pc, #324]	; (904 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x228>)
     7be:	4798      	blx	r3
     7c0:	9002      	str	r0, [sp, #8]
     7c2:	9103      	str	r1, [sp, #12]
     7c4:	68ac      	ldr	r4, [r5, #8]
     7c6:	1c21      	adds	r1, r4, #0
     7c8:	1c30      	adds	r0, r6, #0
     7ca:	4b4b      	ldr	r3, [pc, #300]	; (8f8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x21c>)
     7cc:	4798      	blx	r3
     7ce:	2800      	cmp	r0, #0
     7d0:	d000      	beq.n	7d4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xf8>
     7d2:	1c26      	adds	r6, r4, #0
#endif

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
     7d4:	0070      	lsls	r0, r6, #1
     7d6:	0840      	lsrs	r0, r0, #1
     7d8:	4b4a      	ldr	r3, [pc, #296]	; (904 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x228>)
     7da:	4798      	blx	r3
     7dc:	2200      	movs	r2, #0
     7de:	4b4a      	ldr	r3, [pc, #296]	; (908 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x22c>)
     7e0:	4c4a      	ldr	r4, [pc, #296]	; (90c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x230>)
     7e2:	47a0      	blx	r4
     7e4:	0002      	movs	r2, r0
     7e6:	000b      	movs	r3, r1
     7e8:	9802      	ldr	r0, [sp, #8]
     7ea:	9903      	ldr	r1, [sp, #12]
     7ec:	4c48      	ldr	r4, [pc, #288]	; (910 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x234>)
     7ee:	47a0      	blx	r4
     7f0:	4b48      	ldr	r3, [pc, #288]	; (914 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x238>)
     7f2:	4798      	blx	r3
     7f4:	4b48      	ldr	r3, [pc, #288]	; (918 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x23c>)
     7f6:	4798      	blx	r3
     7f8:	60e8      	str	r0, [r5, #12]
				optimum=optimal_frequency*gain;
     7fa:	69ae      	ldr	r6, [r5, #24]
     7fc:	1c31      	adds	r1, r6, #0
     7fe:	4b47      	ldr	r3, [pc, #284]	; (91c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x240>)
     800:	4798      	blx	r3
     802:	1c04      	adds	r4, r0, #0
     804:	6028      	str	r0, [r5, #0]
				if (optimum>(optimal_frequency+TUNE_MAX_BAND))
     806:	4940      	ldr	r1, [pc, #256]	; (908 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x22c>)
     808:	1c30      	adds	r0, r6, #0
     80a:	4b37      	ldr	r3, [pc, #220]	; (8e8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x20c>)
     80c:	4798      	blx	r3
     80e:	1c07      	adds	r7, r0, #0
     810:	1c01      	adds	r1, r0, #0
     812:	1c20      	adds	r0, r4, #0
     814:	4b32      	ldr	r3, [pc, #200]	; (8e0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     816:	4798      	blx	r3
     818:	2800      	cmp	r0, #0
     81a:	d115      	bne.n	848 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x16c>
					if (optimum<(optimal_frequency-TUNE_MAX_BAND))
     81c:	493a      	ldr	r1, [pc, #232]	; (908 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x22c>)
     81e:	1c30      	adds	r0, r6, #0
     820:	4b30      	ldr	r3, [pc, #192]	; (8e4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     822:	4798      	blx	r3
     824:	1c06      	adds	r6, r0, #0
     826:	1c01      	adds	r1, r0, #0
     828:	1c20      	adds	r0, r4, #0
     82a:	4b33      	ldr	r3, [pc, #204]	; (8f8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x21c>)
     82c:	4798      	blx	r3
     82e:	2800      	cmp	r0, #0
     830:	d00f      	beq.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
						optimum=(optimal_frequency-TUNE_MAX_BAND);
     832:	602e      	str	r6, [r5, #0]
     834:	e00d      	b.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
				direction=Calculate_Gradient(tn)?!direction:direction;
     836:	2328      	movs	r3, #40	; 0x28
     838:	5cec      	ldrb	r4, [r5, r3]
     83a:	e7ac      	b.n	796 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xba>
						error_tune=minimum_tone-(float(tn));
     83c:	1c31      	adds	r1, r6, #0
     83e:	6968      	ldr	r0, [r5, #20]
     840:	4b28      	ldr	r3, [pc, #160]	; (8e4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     842:	4798      	blx	r3
     844:	6068      	str	r0, [r5, #4]
     846:	e7b7      	b.n	7b8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xdc>
					optimum=optimal_frequency+TUNE_MAX_BAND;
     848:	602f      	str	r7, [r5, #0]
     84a:	e002      	b.n	852 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x176>
			optimum=ltc.tune_rf_frequency;
     84c:	4b23      	ldr	r3, [pc, #140]	; (8dc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     850:	6003      	str	r3, [r0, #0]
     852:	4c33      	ldr	r4, [pc, #204]	; (920 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x244>)
     854:	4933      	ldr	r1, [pc, #204]	; (924 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x248>)
     856:	0020      	movs	r0, r4
     858:	4e33      	ldr	r6, [pc, #204]	; (928 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x24c>)
     85a:	47b0      	blx	r6
     85c:	220a      	movs	r2, #10
     85e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
     860:	0020      	movs	r0, r4
     862:	4b32      	ldr	r3, [pc, #200]	; (92c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x250>)
     864:	4798      	blx	r3
     866:	4932      	ldr	r1, [pc, #200]	; (930 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x254>)
     868:	0020      	movs	r0, r4
     86a:	47b0      	blx	r6
     86c:	2328      	movs	r3, #40	; 0x28
     86e:	5ce9      	ldrb	r1, [r5, r3]
     870:	220a      	movs	r2, #10
     872:	0020      	movs	r0, r4
     874:	4b2f      	ldr	r3, [pc, #188]	; (934 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x258>)
     876:	4798      	blx	r3
     878:	492f      	ldr	r1, [pc, #188]	; (938 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x25c>)
     87a:	0020      	movs	r0, r4
     87c:	47b0      	blx	r6
     87e:	4b21      	ldr	r3, [pc, #132]	; (904 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x228>)
     880:	4699      	mov	r9, r3
     882:	6868      	ldr	r0, [r5, #4]
     884:	4798      	blx	r3
     886:	0002      	movs	r2, r0
     888:	000b      	movs	r3, r1
     88a:	2102      	movs	r1, #2
     88c:	4688      	mov	r8, r1
     88e:	9100      	str	r1, [sp, #0]
     890:	0020      	movs	r0, r4
     892:	4f2a      	ldr	r7, [pc, #168]	; (93c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x260>)
     894:	47b8      	blx	r7
     896:	492a      	ldr	r1, [pc, #168]	; (940 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x264>)
     898:	0020      	movs	r0, r4
     89a:	47b0      	blx	r6
     89c:	68e8      	ldr	r0, [r5, #12]
     89e:	47c8      	blx	r9
     8a0:	0002      	movs	r2, r0
     8a2:	000b      	movs	r3, r1
     8a4:	4641      	mov	r1, r8
     8a6:	9100      	str	r1, [sp, #0]
     8a8:	0020      	movs	r0, r4
     8aa:	47b8      	blx	r7
     8ac:	4925      	ldr	r1, [pc, #148]	; (944 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x268>)
     8ae:	0020      	movs	r0, r4
     8b0:	47b0      	blx	r6
     8b2:	6828      	ldr	r0, [r5, #0]
     8b4:	47c8      	blx	r9
     8b6:	0002      	movs	r2, r0
     8b8:	000b      	movs	r3, r1
     8ba:	4641      	mov	r1, r8
     8bc:	9100      	str	r1, [sp, #0]
     8be:	0020      	movs	r0, r4
     8c0:	47b8      	blx	r7
     8c2:	4921      	ldr	r1, [pc, #132]	; (948 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x26c>)
     8c4:	0020      	movs	r0, r4
     8c6:	47b0      	blx	r6
	return optimum;
     8c8:	6828      	ldr	r0, [r5, #0]
}
     8ca:	b005      	add	sp, #20
     8cc:	bc0c      	pop	{r2, r3}
     8ce:	4690      	mov	r8, r2
     8d0:	4699      	mov	r9, r3
     8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8d4:	016e35ff 	.word	0x016e35ff
     8d8:	016e3600 	.word	0x016e3600
     8dc:	20000c34 	.word	0x20000c34
     8e0:	000090c5 	.word	0x000090c5
     8e4:	00009c71 	.word	0x00009c71
     8e8:	0000932d 	.word	0x0000932d
     8ec:	ff000001 	.word	0xff000001
     8f0:	ff91ca00 	.word	0xff91ca00
     8f4:	0000a089 	.word	0x0000a089
     8f8:	0000909d 	.word	0x0000909d
     8fc:	000006c3 	.word	0x000006c3
     900:	00009091 	.word	0x00009091
     904:	0000bc65 	.word	0x0000bc65
     908:	40c00000 	.word	0x40c00000
     90c:	0000af9d 	.word	0x0000af9d
     910:	0000a735 	.word	0x0000a735
     914:	00007241 	.word	0x00007241
     918:	0000bd09 	.word	0x0000bd09
     91c:	00009a31 	.word	0x00009a31
     920:	2000136c 	.word	0x2000136c
     924:	00010bf0 	.word	0x00010bf0
     928:	0000649d 	.word	0x0000649d
     92c:	00006585 	.word	0x00006585
     930:	00010bfc 	.word	0x00010bfc
     934:	000065d1 	.word	0x000065d1
     938:	00010c08 	.word	0x00010c08
     93c:	000067dd 	.word	0x000067dd
     940:	00010c10 	.word	0x00010c10
     944:	00010c18 	.word	0x00010c18
     948:	00010b5c 	.word	0x00010b5c

0000094c <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		delay_ms(1);
	}
	
}
     94c:	b510      	push	{r4, lr}
     94e:	2801      	cmp	r0, #1
     950:	d000      	beq.n	954 <_Z41__static_initialization_and_destruction_0ii+0x8>
     952:	bd10      	pop	{r4, pc}
     954:	4b06      	ldr	r3, [pc, #24]	; (970 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     956:	4299      	cmp	r1, r3
     958:	d1fb      	bne.n	952 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class_ADF staticSPI;
     95a:	4c06      	ldr	r4, [pc, #24]	; (974 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     95c:	0020      	movs	r0, r4
     95e:	4b06      	ldr	r3, [pc, #24]	; (978 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     960:	4798      	blx	r3
     962:	4a06      	ldr	r2, [pc, #24]	; (97c <_Z41__static_initialization_and_destruction_0ii+0x30>)
     964:	4906      	ldr	r1, [pc, #24]	; (980 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     966:	0020      	movs	r0, r4
     968:	4b06      	ldr	r3, [pc, #24]	; (984 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     96a:	4798      	blx	r3
}
     96c:	e7f1      	b.n	952 <_Z41__static_initialization_and_destruction_0ii+0x6>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	0000ffff 	.word	0x0000ffff
     974:	20000c98 	.word	0x20000c98
     978:	00001199 	.word	0x00001199
     97c:	20000000 	.word	0x20000000
     980:	000011a5 	.word	0x000011a5
     984:	0000701d 	.word	0x0000701d

00000988 <_ZN14ADF5610_DriverC1Ev>:
ADF5610_Driver::ADF5610_Driver() {
     988:	b510      	push	{r4, lr}
	 current_frequency=3600;
     98a:	4a0e      	ldr	r2, [pc, #56]	; (9c4 <_ZN14ADF5610_DriverC1Ev+0x3c>)
     98c:	6002      	str	r2, [r0, #0]
		 buffer32=0;
     98e:	2300      	movs	r3, #0
     990:	2192      	movs	r1, #146	; 0x92
     992:	0049      	lsls	r1, r1, #1
     994:	5043      	str	r3, [r0, r1]
		 dir=1;
     996:	2401      	movs	r4, #1
     998:	3114      	adds	r1, #20
     99a:	5044      	str	r4, [r0, r1]
		 spi_adf=&staticSPI;
     99c:	490a      	ldr	r1, [pc, #40]	; (9c8 <_ZN14ADF5610_DriverC1Ev+0x40>)
     99e:	6041      	str	r1, [r0, #4]
		 is_locked=false;
     9a0:	219e      	movs	r1, #158	; 0x9e
     9a2:	0049      	lsls	r1, r1, #1
     9a4:	5443      	strb	r3, [r0, r1]
		 upper_limit=4400;
     9a6:	4909      	ldr	r1, [pc, #36]	; (9cc <_ZN14ADF5610_DriverC1Ev+0x44>)
     9a8:	6081      	str	r1, [r0, #8]
		 lower_limit=3600;
     9aa:	60c2      	str	r2, [r0, #12]
		 step=(upper_limit-lower_limit)/1024.0*2;
     9ac:	4908      	ldr	r1, [pc, #32]	; (9d0 <_ZN14ADF5610_DriverC1Ev+0x48>)
     9ae:	2298      	movs	r2, #152	; 0x98
     9b0:	0052      	lsls	r2, r2, #1
     9b2:	5081      	str	r1, [r0, r2]
		 target_frequency=current_frequency+step;
     9b4:	4907      	ldr	r1, [pc, #28]	; (9d4 <_ZN14ADF5610_DriverC1Ev+0x4c>)
     9b6:	3204      	adds	r2, #4
     9b8:	5081      	str	r1, [r0, r2]
		 pll_started=false;
     9ba:	2256      	movs	r2, #86	; 0x56
     9bc:	32ff      	adds	r2, #255	; 0xff
     9be:	5483      	strb	r3, [r0, r2]
}
     9c0:	bd10      	pop	{r4, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	45610000 	.word	0x45610000
     9c8:	20000c98 	.word	0x20000c98
     9cc:	45898000 	.word	0x45898000
     9d0:	3fc80000 	.word	0x3fc80000
     9d4:	45611900 	.word	0x45611900

000009d8 <_ZN14ADF5610_DriverD1Ev>:
}
     9d8:	4770      	bx	lr
	...

000009dc <_ZN14ADF5610_Driver13ShowRegistersEi>:
void ADF5610_Driver::ShowRegisters(int index){
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	0005      	movs	r5, r0
     9e0:	1e0c      	subs	r4, r1, #0
	switch (index){
     9e2:	d006      	beq.n	9f2 <_ZN14ADF5610_Driver13ShowRegistersEi+0x16>
     9e4:	2900      	cmp	r1, #0
     9e6:	db0d      	blt.n	a04 <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
     9e8:	000b      	movs	r3, r1
     9ea:	3b12      	subs	r3, #18
     9ec:	2b01      	cmp	r3, #1
     9ee:	d809      	bhi.n	a04 <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
}
     9f0:	bd70      	pop	{r4, r5, r6, pc}
			  printf("Read R%d",index);
     9f2:	480e      	ldr	r0, [pc, #56]	; (a2c <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     9f4:	4e0e      	ldr	r6, [pc, #56]	; (a30 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     9f6:	47b0      	blx	r6
			  printf(":  0x%08lx\n" ,RegRead[index]);
     9f8:	3404      	adds	r4, #4
     9fa:	00a4      	lsls	r4, r4, #2
     9fc:	5961      	ldr	r1, [r4, r5]
     9fe:	480d      	ldr	r0, [pc, #52]	; (a34 <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     a00:	47b0      	blx	r6
			  break;
     a02:	e7f5      	b.n	9f0 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
			  printf("Write R%d",index);
     a04:	0021      	movs	r1, r4
     a06:	480c      	ldr	r0, [pc, #48]	; (a38 <_ZN14ADF5610_Driver13ShowRegistersEi+0x5c>)
     a08:	4e09      	ldr	r6, [pc, #36]	; (a30 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     a0a:	47b0      	blx	r6
			  printf(":  0x%08lx\t",RegWrite[index]);
     a0c:	0023      	movs	r3, r4
     a0e:	331a      	adds	r3, #26
     a10:	009b      	lsls	r3, r3, #2
     a12:	18eb      	adds	r3, r5, r3
     a14:	6859      	ldr	r1, [r3, #4]
     a16:	4809      	ldr	r0, [pc, #36]	; (a3c <_ZN14ADF5610_Driver13ShowRegistersEi+0x60>)
     a18:	47b0      	blx	r6
			  printf("Read R%d",index);
     a1a:	0021      	movs	r1, r4
     a1c:	4803      	ldr	r0, [pc, #12]	; (a2c <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     a1e:	47b0      	blx	r6
			  printf(":  0x%08lx\n",RegRead[index]);
     a20:	3404      	adds	r4, #4
     a22:	00a4      	lsls	r4, r4, #2
     a24:	5961      	ldr	r1, [r4, r5]
     a26:	4803      	ldr	r0, [pc, #12]	; (a34 <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     a28:	47b0      	blx	r6
}
     a2a:	e7e1      	b.n	9f0 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
     a2c:	00010cd0 	.word	0x00010cd0
     a30:	0000c02d 	.word	0x0000c02d
     a34:	00010cdc 	.word	0x00010cdc
     a38:	00010ce8 	.word	0x00010ce8
     a3c:	00010cf4 	.word	0x00010cf4

00000a40 <_ZN14ADF5610_Driver9Is_LockedEv>:
bool ADF5610_Driver::Is_Locked(void){
     a40:	b530      	push	{r4, r5, lr}
     a42:	b083      	sub	sp, #12
     a44:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     a46:	a801      	add	r0, sp, #4
     a48:	4b0b      	ldr	r3, [pc, #44]	; (a78 <_ZN14ADF5610_Driver9Is_LockedEv+0x38>)
     a4a:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     a4c:	22c0      	movs	r2, #192	; 0xc0
     a4e:	05d2      	lsls	r2, r2, #23
     a50:	6810      	ldr	r0, [r2, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     a52:	4b0a      	ldr	r3, [pc, #40]	; (a7c <_ZN14ADF5610_Driver9Is_LockedEv+0x3c>)
     a54:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     a56:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     a58:	405c      	eors	r4, r3
     a5a:	4004      	ands	r4, r0
     a5c:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     a5e:	a801      	add	r0, sp, #4
     a60:	4b07      	ldr	r3, [pc, #28]	; (a80 <_ZN14ADF5610_Driver9Is_LockedEv+0x40>)
     a62:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     a64:	2040      	movs	r0, #64	; 0x40
     a66:	4020      	ands	r0, r4
     a68:	1e43      	subs	r3, r0, #1
     a6a:	4198      	sbcs	r0, r3
     a6c:	b2c0      	uxtb	r0, r0
	is_locked= gpio_get_pin_level(PA06);
     a6e:	239e      	movs	r3, #158	; 0x9e
     a70:	005b      	lsls	r3, r3, #1
     a72:	54e8      	strb	r0, [r5, r3]
}
     a74:	b003      	add	sp, #12
     a76:	bd30      	pop	{r4, r5, pc}
     a78:	00002319 	.word	0x00002319
     a7c:	41004400 	.word	0x41004400
     a80:	00002327 	.word	0x00002327

00000a84 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>:
void ADF5610_Driver::ConvertU32FourByteArray(uint8_t *array,uint32_t  data){
     a84:	b510      	push	{r4, lr}
	for (int i =0;i<4;i++){
     a86:	2000      	movs	r0, #0
     a88:	2803      	cmp	r0, #3
     a8a:	dc07      	bgt.n	a9c <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x18>
		array[i]=(uint8_t)((data>>((3-i)*8)&0xff));
     a8c:	2303      	movs	r3, #3
     a8e:	1a1b      	subs	r3, r3, r0
     a90:	00db      	lsls	r3, r3, #3
     a92:	0014      	movs	r4, r2
     a94:	40dc      	lsrs	r4, r3
     a96:	540c      	strb	r4, [r1, r0]
	for (int i =0;i<4;i++){
     a98:	3001      	adds	r0, #1
     a9a:	e7f5      	b.n	a88 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x4>
}
     a9c:	bd10      	pop	{r4, pc}
	...

00000aa0 <_ZN14ADF5610_Driver13ReadRegistersEh>:
void ADF5610_Driver::ReadRegisters(uint8_t index) {
     aa0:	b570      	push	{r4, r5, r6, lr}
     aa2:	0004      	movs	r4, r0
     aa4:	000d      	movs	r5, r1
	spi_adf->SetCS(false);
     aa6:	2100      	movs	r1, #0
     aa8:	6840      	ldr	r0, [r0, #4]
     aaa:	4e20      	ldr	r6, [pc, #128]	; (b2c <_ZN14ADF5610_Driver13ReadRegistersEh+0x8c>)
     aac:	47b0      	blx	r6
	to_send[0]=0;
     aae:	2300      	movs	r3, #0
     ab0:	22a8      	movs	r2, #168	; 0xa8
     ab2:	0052      	lsls	r2, r2, #1
     ab4:	54a3      	strb	r3, [r4, r2]
	to_send[1]=0;
     ab6:	2252      	movs	r2, #82	; 0x52
     ab8:	32ff      	adds	r2, #255	; 0xff
     aba:	54a3      	strb	r3, [r4, r2]
	to_send[2]=index;
     abc:	3201      	adds	r2, #1
     abe:	54a5      	strb	r5, [r4, r2]
	to_send[3]=0;
     ac0:	2254      	movs	r2, #84	; 0x54
     ac2:	32ff      	adds	r2, #255	; 0xff
     ac4:	54a3      	strb	r3, [r4, r2]
	spi_adf->Write(to_send,4);
     ac6:	0021      	movs	r1, r4
     ac8:	3151      	adds	r1, #81	; 0x51
     aca:	31ff      	adds	r1, #255	; 0xff
     acc:	3a50      	subs	r2, #80	; 0x50
     ace:	3aff      	subs	r2, #255	; 0xff
     ad0:	6860      	ldr	r0, [r4, #4]
     ad2:	4b17      	ldr	r3, [pc, #92]	; (b30 <_ZN14ADF5610_Driver13ReadRegistersEh+0x90>)
     ad4:	4798      	blx	r3
	spi_adf->SetCS(true);
     ad6:	2101      	movs	r1, #1
     ad8:	6860      	ldr	r0, [r4, #4]
     ada:	47b0      	blx	r6
	delay_ms(1);
     adc:	2001      	movs	r0, #1
     ade:	4b15      	ldr	r3, [pc, #84]	; (b34 <_ZN14ADF5610_Driver13ReadRegistersEh+0x94>)
     ae0:	4798      	blx	r3
	spi_adf->SetCS(false);
     ae2:	2100      	movs	r1, #0
     ae4:	6860      	ldr	r0, [r4, #4]
     ae6:	47b0      	blx	r6
	spi_adf->Read((uint8_t*)&recibido32,4);
     ae8:	0021      	movs	r1, r4
     aea:	3149      	adds	r1, #73	; 0x49
     aec:	31ff      	adds	r1, #255	; 0xff
     aee:	2204      	movs	r2, #4
     af0:	6860      	ldr	r0, [r4, #4]
     af2:	4b11      	ldr	r3, [pc, #68]	; (b38 <_ZN14ADF5610_Driver13ReadRegistersEh+0x98>)
     af4:	4798      	blx	r3
	RegRead[index]=((recibido32&(0x000000FF))<<24)|((recibido32&(0x0000FF00))<<8);
     af6:	23a4      	movs	r3, #164	; 0xa4
     af8:	005b      	lsls	r3, r3, #1
     afa:	58e2      	ldr	r2, [r4, r3]
     afc:	0613      	lsls	r3, r2, #24
     afe:	0211      	lsls	r1, r2, #8
     b00:	20ff      	movs	r0, #255	; 0xff
     b02:	0400      	lsls	r0, r0, #16
     b04:	4001      	ands	r1, r0
     b06:	430b      	orrs	r3, r1
	RegRead[index]|=((recibido32&(0xFF000000))>>24)|((recibido32&(0x00FF0000))>>8);
     b08:	0e11      	lsrs	r1, r2, #24
     b0a:	0a12      	lsrs	r2, r2, #8
     b0c:	20ff      	movs	r0, #255	; 0xff
     b0e:	0200      	lsls	r0, r0, #8
     b10:	4002      	ands	r2, r0
     b12:	430a      	orrs	r2, r1
     b14:	4313      	orrs	r3, r2
	RegRead[index]>>=7;
     b16:	09db      	lsrs	r3, r3, #7
	bitClear(RegRead[index],24);
     b18:	4a08      	ldr	r2, [pc, #32]	; (b3c <_ZN14ADF5610_Driver13ReadRegistersEh+0x9c>)
     b1a:	4013      	ands	r3, r2
     b1c:	3504      	adds	r5, #4
     b1e:	00ad      	lsls	r5, r5, #2
     b20:	512b      	str	r3, [r5, r4]
	spi_adf->SetCS(true);
     b22:	6860      	ldr	r0, [r4, #4]
     b24:	2101      	movs	r1, #1
     b26:	47b0      	blx	r6
}
     b28:	bd70      	pop	{r4, r5, r6, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00001215 	.word	0x00001215
     b30:	000011e5 	.word	0x000011e5
     b34:	000023d1 	.word	0x000023d1
     b38:	000011fd 	.word	0x000011fd
     b3c:	feffffff 	.word	0xfeffffff

00000b40 <_ZN14ADF5610_Driver17InitiateRegistersEv>:
  for (int i = 0; i < 23; i++) {
     b40:	2300      	movs	r3, #0
     b42:	e00e      	b.n	b62 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x22>
          RegIni[i] = 0x20;
     b44:	001a      	movs	r2, r3
     b46:	3232      	adds	r2, #50	; 0x32
     b48:	0092      	lsls	r2, r2, #2
     b4a:	2120      	movs	r1, #32
     b4c:	5011      	str	r1, [r2, r0]
    RegWrite[i]=RegIni[i];
     b4e:	001a      	movs	r2, r3
     b50:	3232      	adds	r2, #50	; 0x32
     b52:	0092      	lsls	r2, r2, #2
     b54:	5811      	ldr	r1, [r2, r0]
     b56:	001a      	movs	r2, r3
     b58:	321a      	adds	r2, #26
     b5a:	0092      	lsls	r2, r2, #2
     b5c:	1882      	adds	r2, r0, r2
     b5e:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < 23; i++) {
     b60:	3301      	adds	r3, #1
     b62:	2b16      	cmp	r3, #22
     b64:	dc6c      	bgt.n	c40 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x100>
    switch (i) {
     b66:	d865      	bhi.n	c34 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xf4>
     b68:	009a      	lsls	r2, r3, #2
     b6a:	4936      	ldr	r1, [pc, #216]	; (c44 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x104>)
     b6c:	588a      	ldr	r2, [r1, r2]
     b6e:	4697      	mov	pc, r2
        RegIni[i] = 0x2;
     b70:	001a      	movs	r2, r3
     b72:	3232      	adds	r2, #50	; 0x32
     b74:	0092      	lsls	r2, r2, #2
     b76:	2102      	movs	r1, #2
     b78:	5011      	str	r1, [r2, r0]
        break;
     b7a:	e7e8      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x1;
     b7c:	001a      	movs	r2, r3
     b7e:	3232      	adds	r2, #50	; 0x32
     b80:	0092      	lsls	r2, r2, #2
     b82:	2101      	movs	r1, #1
     b84:	5011      	str	r1, [r2, r0]
        break;
     b86:	e7e2      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x31;
     b88:	001a      	movs	r2, r3
     b8a:	3232      	adds	r2, #50	; 0x32
     b8c:	0092      	lsls	r2, r2, #2
     b8e:	2131      	movs	r1, #49	; 0x31
     b90:	5011      	str	r1, [r2, r0]
        break;
     b92:	e7dc      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xFD70A3;
     b94:	001a      	movs	r2, r3
     b96:	3232      	adds	r2, #50	; 0x32
     b98:	0092      	lsls	r2, r2, #2
     b9a:	492b      	ldr	r1, [pc, #172]	; (c48 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x108>)
     b9c:	5011      	str	r1, [r2, r0]
        break;
     b9e:	e7d6      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x000;
     ba0:	001a      	movs	r2, r3
     ba2:	3232      	adds	r2, #50	; 0x32
     ba4:	0092      	lsls	r2, r2, #2
     ba6:	2100      	movs	r1, #0
     ba8:	5011      	str	r1, [r2, r0]
        break;
     baa:	e7d0      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2F4A;
     bac:	001a      	movs	r2, r3
     bae:	3232      	adds	r2, #50	; 0x32
     bb0:	0092      	lsls	r2, r2, #2
     bb2:	4926      	ldr	r1, [pc, #152]	; (c4c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x10c>)
     bb4:	5011      	str	r1, [r2, r0]
        break;
     bb6:	e7ca      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x214D;
     bb8:	001a      	movs	r2, r3
     bba:	3232      	adds	r2, #50	; 0x32
     bbc:	0092      	lsls	r2, r2, #2
     bbe:	4924      	ldr	r1, [pc, #144]	; (c50 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x110>)
     bc0:	5011      	str	r1, [r2, r0]
        break;
     bc2:	e7c4      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xC9BEFF;
     bc4:	001a      	movs	r2, r3
     bc6:	3232      	adds	r2, #50	; 0x32
     bc8:	0092      	lsls	r2, r2, #2
     bca:	4922      	ldr	r1, [pc, #136]	; (c54 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x114>)
     bcc:	5011      	str	r1, [r2, r0]
        break;
     bce:	e7be      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x3FFF;
     bd0:	001a      	movs	r2, r3
     bd2:	3232      	adds	r2, #50	; 0x32
     bd4:	0092      	lsls	r2, r2, #2
     bd6:	4920      	ldr	r1, [pc, #128]	; (c58 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x118>)
     bd8:	5011      	str	r1, [r2, r0]
        break;
     bda:	e7b8      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2047;
     bdc:	001a      	movs	r2, r3
     bde:	3232      	adds	r2, #50	; 0x32
     be0:	0092      	lsls	r2, r2, #2
     be2:	491e      	ldr	r1, [pc, #120]	; (c5c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x11c>)
     be4:	5011      	str	r1, [r2, r0]
        break;
     be6:	e7b2      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xF8061;
     be8:	001a      	movs	r2, r3
     bea:	3232      	adds	r2, #50	; 0x32
     bec:	0092      	lsls	r2, r2, #2
     bee:	491c      	ldr	r1, [pc, #112]	; (c60 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x120>)
     bf0:	5011      	str	r1, [r2, r0]
        break;
     bf2:	e7ac      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x081;
     bf4:	001a      	movs	r2, r3
     bf6:	3232      	adds	r2, #50	; 0x32
     bf8:	0092      	lsls	r2, r2, #2
     bfa:	2181      	movs	r1, #129	; 0x81
     bfc:	5011      	str	r1, [r2, r0]
        break;
     bfe:	e7a6      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
		RegIni[i] = 0x020;
     c00:	001a      	movs	r2, r3
     c02:	3232      	adds	r2, #50	; 0x32
     c04:	0092      	lsls	r2, r2, #2
     c06:	2120      	movs	r1, #32
     c08:	5011      	str	r1, [r2, r0]
		break;
     c0a:	e7a0      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = RegIni[5];
     c0c:	22dc      	movs	r2, #220	; 0xdc
     c0e:	5881      	ldr	r1, [r0, r2]
     c10:	001a      	movs	r2, r3
     c12:	3232      	adds	r2, #50	; 0x32
     c14:	0092      	lsls	r2, r2, #2
     c16:	5011      	str	r1, [r2, r0]
         break;
     c18:	e799      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
       RegIni[i] = (0x01<<3)|(0x00<<7)|(0x07<<9)|(0x03<<12)|(0x01<<15);
     c1a:	001a      	movs	r2, r3
     c1c:	3232      	adds	r2, #50	; 0x32
     c1e:	0092      	lsls	r2, r2, #2
     c20:	4910      	ldr	r1, [pc, #64]	; (c64 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x124>)
     c22:	5011      	str	r1, [r2, r0]
         break;
     c24:	e793      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
         RegIni[i] =(0x02<<3)|(0x07<<7)|(0x00);
     c26:	001a      	movs	r2, r3
     c28:	3232      	adds	r2, #50	; 0x32
     c2a:	0092      	lsls	r2, r2, #2
     c2c:	21e4      	movs	r1, #228	; 0xe4
     c2e:	0089      	lsls	r1, r1, #2
     c30:	5011      	str	r1, [r2, r0]
         break;
     c32:	e78c      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x0;
     c34:	001a      	movs	r2, r3
     c36:	3232      	adds	r2, #50	; 0x32
     c38:	0092      	lsls	r2, r2, #2
     c3a:	2100      	movs	r1, #0
     c3c:	5011      	str	r1, [r2, r0]
        break;
     c3e:	e786      	b.n	b4e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
}
     c40:	4770      	bx	lr
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	00010c24 	.word	0x00010c24
     c48:	00fd70a3 	.word	0x00fd70a3
     c4c:	00002f4a 	.word	0x00002f4a
     c50:	0000214d 	.word	0x0000214d
     c54:	00c9beff 	.word	0x00c9beff
     c58:	00003fff 	.word	0x00003fff
     c5c:	00002047 	.word	0x00002047
     c60:	000f8061 	.word	0x000f8061
     c64:	0000be08 	.word	0x0000be08

00000c68 <_ZN14ADF5610_Driver16ReadAllRegistersEv>:
void ADF5610_Driver::ReadAllRegisters(){
     c68:	b570      	push	{r4, r5, r6, lr}
     c6a:	0005      	movs	r5, r0
  for (int i=0; i<=19;i++){
     c6c:	2400      	movs	r4, #0
     c6e:	2c13      	cmp	r4, #19
     c70:	dc05      	bgt.n	c7e <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x16>
    ReadRegisters((uint8_t)i);
     c72:	b2e1      	uxtb	r1, r4
     c74:	0028      	movs	r0, r5
     c76:	4b02      	ldr	r3, [pc, #8]	; (c80 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x18>)
     c78:	4798      	blx	r3
  for (int i=0; i<=19;i++){
     c7a:	3401      	adds	r4, #1
     c7c:	e7f7      	b.n	c6e <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x6>
}
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	00000aa1 	.word	0x00000aa1

00000c84 <_ZN14ADF5610_Driver18CalculateVCOValuesEv>:
void ADF5610_Driver::CalculateVCOValues(void){
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	46ce      	mov	lr, r9
     c88:	4647      	mov	r7, r8
     c8a:	b580      	push	{r7, lr}
     c8c:	b085      	sub	sp, #20
     c8e:	0007      	movs	r7, r0
	 aux_register=0;
     c90:	2200      	movs	r2, #0
     c92:	23a0      	movs	r3, #160	; 0xa0
     c94:	005b      	lsls	r3, r3, #1
     c96:	50c2      	str	r2, [r0, r3]
		double  fDIV=target_frequency;
     c98:	259a      	movs	r5, #154	; 0x9a
     c9a:	006d      	lsls	r5, r5, #1
     c9c:	4c81      	ldr	r4, [pc, #516]	; (ea4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x220>)
     c9e:	5940      	ldr	r0, [r0, r5]
     ca0:	47a0      	blx	r4
     ca2:	0002      	movs	r2, r0
     ca4:	000b      	movs	r3, r1
		int k=floor(log((14600)/(fDIV))/log(2));
     ca6:	4980      	ldr	r1, [pc, #512]	; (ea8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     ca8:	4688      	mov	r8, r1
     caa:	2000      	movs	r0, #0
     cac:	497f      	ldr	r1, [pc, #508]	; (eac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     cae:	47c0      	blx	r8
     cb0:	4b7f      	ldr	r3, [pc, #508]	; (eb0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x22c>)
     cb2:	4798      	blx	r3
     cb4:	4a7f      	ldr	r2, [pc, #508]	; (eb4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x230>)
     cb6:	4b80      	ldr	r3, [pc, #512]	; (eb8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x234>)
     cb8:	47c0      	blx	r8
     cba:	4b80      	ldr	r3, [pc, #512]	; (ebc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     cbc:	4798      	blx	r3
     cbe:	4b80      	ldr	r3, [pc, #512]	; (ec0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     cc0:	4798      	blx	r3
		uint8_t kDIV=7-(uint8_t)(k);
     cc2:	2307      	movs	r3, #7
     cc4:	9000      	str	r0, [sp, #0]
     cc6:	1a1b      	subs	r3, r3, r0
     cc8:	b2de      	uxtb	r6, r3
	  double fVCO = 7300*((target_frequency*pow(2, k))/(14600)); //VCO
     cca:	5978      	ldr	r0, [r7, r5]
     ccc:	47a0      	blx	r4
     cce:	9002      	str	r0, [sp, #8]
     cd0:	9103      	str	r1, [sp, #12]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     cd2:	9800      	ldr	r0, [sp, #0]
     cd4:	4b7b      	ldr	r3, [pc, #492]	; (ec4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x240>)
     cd6:	4798      	blx	r3
     cd8:	0002      	movs	r2, r0
     cda:	000b      	movs	r3, r1
     cdc:	2000      	movs	r0, #0
     cde:	2180      	movs	r1, #128	; 0x80
     ce0:	05c9      	lsls	r1, r1, #23
     ce2:	4c79      	ldr	r4, [pc, #484]	; (ec8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x244>)
     ce4:	47a0      	blx	r4
     ce6:	0002      	movs	r2, r0
     ce8:	000b      	movs	r3, r1
     cea:	4c78      	ldr	r4, [pc, #480]	; (ecc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     cec:	9802      	ldr	r0, [sp, #8]
     cee:	9903      	ldr	r1, [sp, #12]
     cf0:	47a0      	blx	r4
     cf2:	2200      	movs	r2, #0
     cf4:	4b6d      	ldr	r3, [pc, #436]	; (eac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     cf6:	47c0      	blx	r8
     cf8:	2200      	movs	r2, #0
     cfa:	4b75      	ldr	r3, [pc, #468]	; (ed0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x24c>)
     cfc:	47a0      	blx	r4
     cfe:	9000      	str	r0, [sp, #0]
     d00:	9101      	str	r1, [sp, #4]
	  if (fVCO<4000){
     d02:	2200      	movs	r2, #0
     d04:	4b73      	ldr	r3, [pc, #460]	; (ed4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     d06:	4c74      	ldr	r4, [pc, #464]	; (ed8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     d08:	47a0      	blx	r4
     d0a:	2800      	cmp	r0, #0
     d0c:	d02f      	beq.n	d6e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xea>
		fPD = 1*fX; //Phase detector frequency
     d0e:	2200      	movs	r2, #0
     d10:	4b72      	ldr	r3, [pc, #456]	; (edc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x258>)
 N = fVCO /fPD;   // Calculate N
     d12:	9800      	ldr	r0, [sp, #0]
     d14:	9901      	ldr	r1, [sp, #4]
     d16:	4c64      	ldr	r4, [pc, #400]	; (ea8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     d18:	47a0      	blx	r4
     d1a:	0004      	movs	r4, r0
     d1c:	000d      	movs	r5, r1
     d1e:	003b      	movs	r3, r7
     d20:	3371      	adds	r3, #113	; 0x71
     d22:	33ff      	adds	r3, #255	; 0xff
     d24:	601c      	str	r4, [r3, #0]
     d26:	605d      	str	r5, [r3, #4]
  N_Int = floor(fVCO/fPD);   // N= 50 for 5 GHz   // Turn N into integer
     d28:	4b64      	ldr	r3, [pc, #400]	; (ebc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     d2a:	4798      	blx	r3
     d2c:	000a      	movs	r2, r1
     d2e:	0001      	movs	r1, r0
     d30:	9102      	str	r1, [sp, #8]
     d32:	9203      	str	r2, [sp, #12]
     d34:	003b      	movs	r3, r7
     d36:	3369      	adds	r3, #105	; 0x69
     d38:	33ff      	adds	r3, #255	; 0xff
     d3a:	6019      	str	r1, [r3, #0]
     d3c:	605a      	str	r2, [r3, #4]
 F_Frac1x = (N - N_Int) * pow(2, 24);   // Calculate Frac1 (N remainder * 2^24)
     d3e:	0013      	movs	r3, r2
     d40:	0002      	movs	r2, r0
     d42:	0020      	movs	r0, r4
     d44:	0029      	movs	r1, r5
     d46:	4c66      	ldr	r4, [pc, #408]	; (ee0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x25c>)
     d48:	47a0      	blx	r4
     d4a:	2200      	movs	r2, #0
     d4c:	4b65      	ldr	r3, [pc, #404]	; (ee4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x260>)
     d4e:	4c5f      	ldr	r4, [pc, #380]	; (ecc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     d50:	47a0      	blx	r4
     d52:	003b      	movs	r3, r7
     d54:	3379      	adds	r3, #121	; 0x79
     d56:	33ff      	adds	r3, #255	; 0xff
     d58:	6018      	str	r0, [r3, #0]
     d5a:	6059      	str	r1, [r3, #4]
   F_FracN = (uint32_t)F_Frac1x;  // turn Frac1 into an integer
     d5c:	4b62      	ldr	r3, [pc, #392]	; (ee8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x264>)
     d5e:	4798      	blx	r3
     d60:	23c0      	movs	r3, #192	; 0xc0
     d62:	005b      	lsls	r3, r3, #1
     d64:	50f8      	str	r0, [r7, r3]
  for (int i = 0; i < 23; i++) {
     d66:	2400      	movs	r4, #0
     d68:	46b1      	mov	r9, r6
     d6a:	0005      	movs	r5, r0
     d6c:	e00e      	b.n	d8c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x108>
		fPD = 2*fX; //Phase detector frequency
     d6e:	2200      	movs	r2, #0
     d70:	4b5e      	ldr	r3, [pc, #376]	; (eec <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x268>)
     d72:	e7ce      	b.n	d12 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x8e>
        RegWrite[i] =(uint32_t)(0x00FFFFFF&((long)N_Int));  //Fixed value (Phase control not needed)
     d74:	9802      	ldr	r0, [sp, #8]
     d76:	9903      	ldr	r1, [sp, #12]
     d78:	4b51      	ldr	r3, [pc, #324]	; (ec0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     d7a:	4798      	blx	r3
     d7c:	0200      	lsls	r0, r0, #8
     d7e:	0a00      	lsrs	r0, r0, #8
     d80:	0023      	movs	r3, r4
     d82:	331a      	adds	r3, #26
     d84:	009b      	lsls	r3, r3, #2
     d86:	18fb      	adds	r3, r7, r3
     d88:	6058      	str	r0, [r3, #4]
  for (int i = 0; i < 23; i++) {
     d8a:	3401      	adds	r4, #1
     d8c:	2c16      	cmp	r4, #22
     d8e:	dd00      	ble.n	d92 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x10e>
     d90:	e083      	b.n	e9a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x216>
    switch (i) {
     d92:	1ee3      	subs	r3, r4, #3
     d94:	2b13      	cmp	r3, #19
     d96:	d8f8      	bhi.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
     d98:	009b      	lsls	r3, r3, #2
     d9a:	4a55      	ldr	r2, [pc, #340]	; (ef0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x26c>)
     d9c:	58d3      	ldr	r3, [r2, r3]
     d9e:	469f      	mov	pc, r3
        RegWrite[i] =(uint32_t)(0x00FFFFFF&(F_FracN));
     da0:	022a      	lsls	r2, r5, #8
     da2:	0a12      	lsrs	r2, r2, #8
     da4:	0023      	movs	r3, r4
     da6:	331a      	adds	r3, #26
     da8:	009b      	lsls	r3, r3, #2
     daa:	18fb      	adds	r3, r7, r3
     dac:	605a      	str	r2, [r3, #4]
        break;
     dae:	e7ec      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
		 RegWrite[i]=RegIni[i];
     db0:	0023      	movs	r3, r4
     db2:	3332      	adds	r3, #50	; 0x32
     db4:	009b      	lsls	r3, r3, #2
     db6:	59da      	ldr	r2, [r3, r7]
     db8:	0023      	movs	r3, r4
     dba:	331a      	adds	r3, #26
     dbc:	009b      	lsls	r3, r3, #2
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	605a      	str	r2, [r3, #4]
        break;
     dc2:	e7e2      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        if (fVCO<4000){
     dc4:	2200      	movs	r2, #0
     dc6:	4b43      	ldr	r3, [pc, #268]	; (ed4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     dc8:	9800      	ldr	r0, [sp, #0]
     dca:	9901      	ldr	r1, [sp, #4]
     dcc:	4e42      	ldr	r6, [pc, #264]	; (ed8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     dce:	47b0      	blx	r6
     dd0:	2800      	cmp	r0, #0
     dd2:	d008      	beq.n	de6 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x162>
          bitWrite(RegWrite[i], 19, 0);
     dd4:	0023      	movs	r3, r4
     dd6:	331a      	adds	r3, #26
     dd8:	009b      	lsls	r3, r3, #2
     dda:	18fb      	adds	r3, r7, r3
     ddc:	4a45      	ldr	r2, [pc, #276]	; (ef4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x270>)
     dde:	6859      	ldr	r1, [r3, #4]
     de0:	400a      	ands	r2, r1
     de2:	605a      	str	r2, [r3, #4]
     de4:	e7d1      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
          bitWrite(RegWrite[i], 19, 1);
     de6:	0023      	movs	r3, r4
     de8:	331a      	adds	r3, #26
     dea:	009b      	lsls	r3, r3, #2
     dec:	18fb      	adds	r3, r7, r3
     dee:	2280      	movs	r2, #128	; 0x80
     df0:	0312      	lsls	r2, r2, #12
     df2:	6859      	ldr	r1, [r3, #4]
     df4:	430a      	orrs	r2, r1
     df6:	605a      	str	r2, [r3, #4]
     df8:	e7c7      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    	  aux_register=RegWrite[5];
     dfa:	2380      	movs	r3, #128	; 0x80
     dfc:	58fa      	ldr	r2, [r7, r3]
     dfe:	33c0      	adds	r3, #192	; 0xc0
     e00:	50fa      	str	r2, [r7, r3]
        RegWrite[i]=aux_register;
     e02:	0023      	movs	r3, r4
     e04:	331a      	adds	r3, #26
     e06:	009b      	lsls	r3, r3, #2
     e08:	18fb      	adds	r3, r7, r3
     e0a:	605a      	str	r2, [r3, #4]
        break;
     e0c:	e7bd      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        RegWrite[i]=RegIni[i];
     e0e:	0023      	movs	r3, r4
     e10:	3332      	adds	r3, #50	; 0x32
     e12:	009b      	lsls	r3, r3, #2
     e14:	59da      	ldr	r2, [r3, r7]
     e16:	0023      	movs	r3, r4
     e18:	331a      	adds	r3, #26
     e1a:	009b      	lsls	r3, r3, #2
     e1c:	18fb      	adds	r3, r7, r3
     e1e:	605a      	str	r2, [r3, #4]
        break;
     e20:	e7b3      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    switch (i) {
     e22:	2303      	movs	r3, #3
     e24:	464e      	mov	r6, r9
     e26:	e022      	b.n	e6e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1ea>
					bitWrite(RegWrite[i], j, bitRead(VCOAdd,j-3));
     e28:	1ed9      	subs	r1, r3, #3
     e2a:	2202      	movs	r2, #2
     e2c:	410a      	asrs	r2, r1
     e2e:	07d2      	lsls	r2, r2, #31
     e30:	d509      	bpl.n	e46 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1c2>
     e32:	2101      	movs	r1, #1
     e34:	4099      	lsls	r1, r3
     e36:	0022      	movs	r2, r4
     e38:	321a      	adds	r2, #26
     e3a:	0092      	lsls	r2, r2, #2
     e3c:	18ba      	adds	r2, r7, r2
     e3e:	6850      	ldr	r0, [r2, #4]
     e40:	4301      	orrs	r1, r0
     e42:	6051      	str	r1, [r2, #4]
     e44:	e012      	b.n	e6c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
     e46:	2101      	movs	r1, #1
     e48:	4099      	lsls	r1, r3
     e4a:	0022      	movs	r2, r4
     e4c:	321a      	adds	r2, #26
     e4e:	0092      	lsls	r2, r2, #2
     e50:	18ba      	adds	r2, r7, r2
     e52:	6850      	ldr	r0, [r2, #4]
     e54:	4388      	bics	r0, r1
     e56:	6050      	str	r0, [r2, #4]
     e58:	e008      	b.n	e6c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     e5a:	2101      	movs	r1, #1
     e5c:	4099      	lsls	r1, r3
     e5e:	0022      	movs	r2, r4
     e60:	321a      	adds	r2, #26
     e62:	0092      	lsls	r2, r2, #2
     e64:	18ba      	adds	r2, r7, r2
     e66:	6850      	ldr	r0, [r2, #4]
     e68:	4388      	bics	r0, r1
     e6a:	6050      	str	r0, [r2, #4]
			for (int j=3;j<16;j++){
     e6c:	3301      	adds	r3, #1
     e6e:	2b0f      	cmp	r3, #15
     e70:	dc11      	bgt.n	e96 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x212>
				if (j<7){
     e72:	2b06      	cmp	r3, #6
     e74:	ddd8      	ble.n	e28 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1a4>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
     e76:	1fda      	subs	r2, r3, #7
     e78:	0031      	movs	r1, r6
     e7a:	4111      	asrs	r1, r2
     e7c:	000a      	movs	r2, r1
     e7e:	07d2      	lsls	r2, r2, #31
     e80:	d5eb      	bpl.n	e5a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1d6>
     e82:	2101      	movs	r1, #1
     e84:	4099      	lsls	r1, r3
     e86:	0022      	movs	r2, r4
     e88:	321a      	adds	r2, #26
     e8a:	0092      	lsls	r2, r2, #2
     e8c:	18ba      	adds	r2, r7, r2
     e8e:	6850      	ldr	r0, [r2, #4]
     e90:	4301      	orrs	r1, r0
     e92:	6051      	str	r1, [r2, #4]
     e94:	e7ea      	b.n	e6c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
     e96:	46b1      	mov	r9, r6
     e98:	e777      	b.n	d8a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
}
     e9a:	b005      	add	sp, #20
     e9c:	bc0c      	pop	{r2, r3}
     e9e:	4690      	mov	r8, r2
     ea0:	4699      	mov	r9, r3
     ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ea4:	0000bc65 	.word	0x0000bc65
     ea8:	0000a735 	.word	0x0000a735
     eac:	40cc8400 	.word	0x40cc8400
     eb0:	00007345 	.word	0x00007345
     eb4:	fefa39ef 	.word	0xfefa39ef
     eb8:	3fe62e42 	.word	0x3fe62e42
     ebc:	0000702d 	.word	0x0000702d
     ec0:	0000bb09 	.word	0x0000bb09
     ec4:	0000bb71 	.word	0x0000bb71
     ec8:	00007455 	.word	0x00007455
     ecc:	0000af9d 	.word	0x0000af9d
     ed0:	40bc8400 	.word	0x40bc8400
     ed4:	40af4000 	.word	0x40af4000
     ed8:	00009029 	.word	0x00009029
     edc:	40490000 	.word	0x40490000
     ee0:	0000b49d 	.word	0x0000b49d
     ee4:	41700000 	.word	0x41700000
     ee8:	00009171 	.word	0x00009171
     eec:	40590000 	.word	0x40590000
     ef0:	00010c80 	.word	0x00010c80
     ef4:	fff7ffff 	.word	0xfff7ffff

00000ef8 <_ZN14ADF5610_Driver6usleepEl>:
void ADF5610_Driver::usleep(long us){
     ef8:	b510      	push	{r4, lr}
     efa:	0008      	movs	r0, r1
	if (us/1000>1)
     efc:	4b07      	ldr	r3, [pc, #28]	; (f1c <_ZN14ADF5610_Driver6usleepEl+0x24>)
     efe:	4299      	cmp	r1, r3
     f00:	dc03      	bgt.n	f0a <_ZN14ADF5610_Driver6usleepEl+0x12>
		delay_ms(1);
     f02:	2001      	movs	r0, #1
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <_ZN14ADF5610_Driver6usleepEl+0x28>)
     f06:	4798      	blx	r3
}
     f08:	bd10      	pop	{r4, pc}
		delay_ms(us/1000);
     f0a:	21fa      	movs	r1, #250	; 0xfa
     f0c:	0089      	lsls	r1, r1, #2
     f0e:	4b05      	ldr	r3, [pc, #20]	; (f24 <_ZN14ADF5610_Driver6usleepEl+0x2c>)
     f10:	4798      	blx	r3
     f12:	b280      	uxth	r0, r0
     f14:	4b02      	ldr	r3, [pc, #8]	; (f20 <_ZN14ADF5610_Driver6usleepEl+0x28>)
     f16:	4798      	blx	r3
     f18:	e7f6      	b.n	f08 <_ZN14ADF5610_Driver6usleepEl+0x10>
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	000007cf 	.word	0x000007cf
     f20:	000023d1 	.word	0x000023d1
     f24:	00008e25 	.word	0x00008e25

00000f28 <_ZN14ADF5610_Driver14WriteRegistersEh>:
void  ADF5610_Driver::WriteRegisters(uint8_t index) {
     f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f2a:	0004      	movs	r4, r0
     f2c:	000d      	movs	r5, r1
  local_index=0;
     f2e:	2300      	movs	r3, #0
     f30:	22a2      	movs	r2, #162	; 0xa2
     f32:	0052      	lsls	r2, r2, #1
     f34:	5483      	strb	r3, [r0, r2]
  buffer32 = 0;
     f36:	3a20      	subs	r2, #32
     f38:	5083      	str	r3, [r0, r2]
  if (index>19){
     f3a:	2913      	cmp	r1, #19
     f3c:	dd1a      	ble.n	f74 <_ZN14ADF5610_Driver14WriteRegistersEh+0x4c>
    if(index>22){
     f3e:	2916      	cmp	r1, #22
     f40:	dd13      	ble.n	f6a <_ZN14ADF5610_Driver14WriteRegistersEh+0x42>
		if (index>23)
     f42:	2917      	cmp	r1, #23
     f44:	dd0c      	ble.n	f60 <_ZN14ADF5610_Driver14WriteRegistersEh+0x38>
			if (index==24)
     f46:	2918      	cmp	r1, #24
     f48:	d004      	beq.n	f54 <_ZN14ADF5610_Driver14WriteRegistersEh+0x2c>
				 local_index=3;
     f4a:	2203      	movs	r2, #3
     f4c:	23a2      	movs	r3, #162	; 0xa2
     f4e:	005b      	lsls	r3, r3, #1
     f50:	54c2      	strb	r2, [r0, r3]
     f52:	e012      	b.n	f7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
				local_index=4;
     f54:	3a21      	subs	r2, #33	; 0x21
     f56:	3aff      	subs	r2, #255	; 0xff
     f58:	23a2      	movs	r3, #162	; 0xa2
     f5a:	005b      	lsls	r3, r3, #1
     f5c:	54c2      	strb	r2, [r0, r3]
     f5e:	e00c      	b.n	f7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
			 local_index=3;
     f60:	2203      	movs	r2, #3
     f62:	23a2      	movs	r3, #162	; 0xa2
     f64:	005b      	lsls	r3, r3, #1
     f66:	54c2      	strb	r2, [r0, r3]
     f68:	e007      	b.n	f7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
		 local_index=5;
     f6a:	2205      	movs	r2, #5
     f6c:	23a2      	movs	r3, #162	; 0xa2
     f6e:	005b      	lsls	r3, r3, #1
     f70:	54c2      	strb	r2, [r0, r3]
     f72:	e002      	b.n	f7a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
    local_index=index;
     f74:	23a2      	movs	r3, #162	; 0xa2
     f76:	005b      	lsls	r3, r3, #1
     f78:	54e1      	strb	r1, [r4, r3]
  switch (local_index){
     f7a:	23a2      	movs	r3, #162	; 0xa2
     f7c:	005b      	lsls	r3, r3, #1
     f7e:	5ce3      	ldrb	r3, [r4, r3]
     f80:	3b10      	subs	r3, #16
     f82:	b2db      	uxtb	r3, r3
     f84:	2b03      	cmp	r3, #3
     f86:	d800      	bhi.n	f8a <_ZN14ADF5610_Driver14WriteRegistersEh+0x62>
}
     f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    spi_adf->SetCS(false);
     f8a:	2100      	movs	r1, #0
     f8c:	6860      	ldr	r0, [r4, #4]
     f8e:	4e21      	ldr	r6, [pc, #132]	; (1014 <_ZN14ADF5610_Driver14WriteRegistersEh+0xec>)
     f90:	47b0      	blx	r6
			  buffer32 =((uint32_t)local_index <<3)|(RegWrite[index]<<8);
     f92:	23a2      	movs	r3, #162	; 0xa2
     f94:	005b      	lsls	r3, r3, #1
     f96:	5ce2      	ldrb	r2, [r4, r3]
     f98:	00d2      	lsls	r2, r2, #3
     f9a:	002b      	movs	r3, r5
     f9c:	331a      	adds	r3, #26
     f9e:	009b      	lsls	r3, r3, #2
     fa0:	18e3      	adds	r3, r4, r3
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	021b      	lsls	r3, r3, #8
     fa6:	431a      	orrs	r2, r3
     fa8:	2392      	movs	r3, #146	; 0x92
     faa:	005b      	lsls	r3, r3, #1
     fac:	50e2      	str	r2, [r4, r3]
			  ConvertU32FourByteArray(to_send,buffer32);
     fae:	0027      	movs	r7, r4
     fb0:	3751      	adds	r7, #81	; 0x51
     fb2:	37ff      	adds	r7, #255	; 0xff
     fb4:	0039      	movs	r1, r7
     fb6:	0020      	movs	r0, r4
     fb8:	4b17      	ldr	r3, [pc, #92]	; (1018 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf0>)
     fba:	4798      	blx	r3
		          spi_adf->Write(to_send,4);
     fbc:	2204      	movs	r2, #4
     fbe:	0039      	movs	r1, r7
     fc0:	6860      	ldr	r0, [r4, #4]
     fc2:	4b16      	ldr	r3, [pc, #88]	; (101c <_ZN14ADF5610_Driver14WriteRegistersEh+0xf4>)
     fc4:	4798      	blx	r3
			 usleep(1);
     fc6:	2101      	movs	r1, #1
     fc8:	0020      	movs	r0, r4
     fca:	4b15      	ldr	r3, [pc, #84]	; (1020 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     fcc:	4798      	blx	r3
		   spi_adf->SetCS(true);
     fce:	2101      	movs	r1, #1
     fd0:	6860      	ldr	r0, [r4, #4]
     fd2:	47b0      	blx	r6
		   if(!is_locked){
     fd4:	239e      	movs	r3, #158	; 0x9e
     fd6:	005b      	lsls	r3, r3, #1
     fd8:	5ce3      	ldrb	r3, [r4, r3]
     fda:	2b00      	cmp	r3, #0
     fdc:	d1d4      	bne.n	f88 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
			   usleep(1);
     fde:	2101      	movs	r1, #1
     fe0:	0020      	movs	r0, r4
     fe2:	4b0f      	ldr	r3, [pc, #60]	; (1020 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
     fe4:	4798      	blx	r3
			   ReadRegisters(local_index);
     fe6:	26a2      	movs	r6, #162	; 0xa2
     fe8:	0076      	lsls	r6, r6, #1
     fea:	5da1      	ldrb	r1, [r4, r6]
     fec:	0020      	movs	r0, r4
     fee:	4b0d      	ldr	r3, [pc, #52]	; (1024 <_ZN14ADF5610_Driver14WriteRegistersEh+0xfc>)
     ff0:	4798      	blx	r3
				   if(RegRead[local_index]!=RegWrite[index]){
     ff2:	5da3      	ldrb	r3, [r4, r6]
     ff4:	3304      	adds	r3, #4
     ff6:	009b      	lsls	r3, r3, #2
     ff8:	591a      	ldr	r2, [r3, r4]
     ffa:	002b      	movs	r3, r5
     ffc:	331a      	adds	r3, #26
     ffe:	009b      	lsls	r3, r3, #2
    1000:	18e3      	adds	r3, r4, r3
    1002:	685b      	ldr	r3, [r3, #4]
    1004:	429a      	cmp	r2, r3
    1006:	d0bf      	beq.n	f88 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
							   ShowRegisters(index);
    1008:	0029      	movs	r1, r5
    100a:	0020      	movs	r0, r4
    100c:	4b06      	ldr	r3, [pc, #24]	; (1028 <_ZN14ADF5610_Driver14WriteRegistersEh+0x100>)
    100e:	4798      	blx	r3
}
    1010:	e7ba      	b.n	f88 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	00001215 	.word	0x00001215
    1018:	00000a85 	.word	0x00000a85
    101c:	000011e5 	.word	0x000011e5
    1020:	00000ef9 	.word	0x00000ef9
    1024:	00000aa1 	.word	0x00000aa1
    1028:	000009dd 	.word	0x000009dd

0000102c <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>:
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	0005      	movs	r5, r0
    1030:	000c      	movs	r4, r1
    1032:	e00d      	b.n	1050 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x24>
    1034:	2616      	movs	r6, #22
      for(int j=22;j>19;j--){
    1036:	2e13      	cmp	r6, #19
    1038:	dd05      	ble.n	1046 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x1a>
        WriteRegisters(j);
    103a:	b2f1      	uxtb	r1, r6
    103c:	0028      	movs	r0, r5
    103e:	4b0d      	ldr	r3, [pc, #52]	; (1074 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    1040:	4798      	blx	r3
      for(int j=22;j>19;j--){
    1042:	3e01      	subs	r6, #1
    1044:	e7f7      	b.n	1036 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0xa>
	   WriteRegisters(5);
    1046:	2105      	movs	r1, #5
    1048:	0028      	movs	r0, r5
    104a:	4b0a      	ldr	r3, [pc, #40]	; (1074 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    104c:	4798      	blx	r3
  for (int i=k; i<20;i++){
    104e:	3401      	adds	r4, #1
    1050:	2c13      	cmp	r4, #19
    1052:	dc06      	bgt.n	1062 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x36>
    if (i==5){
    1054:	2c05      	cmp	r4, #5
    1056:	d0ed      	beq.n	1034 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x8>
      WriteRegisters(i);
    1058:	b2e1      	uxtb	r1, r4
    105a:	0028      	movs	r0, r5
    105c:	4b05      	ldr	r3, [pc, #20]	; (1074 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    105e:	4798      	blx	r3
    1060:	e7f5      	b.n	104e <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x22>
  WriteRegisters(3);
    1062:	2103      	movs	r1, #3
    1064:	0028      	movs	r0, r5
    1066:	4c03      	ldr	r4, [pc, #12]	; (1074 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    1068:	47a0      	blx	r4
  WriteRegisters(4);
    106a:	2104      	movs	r1, #4
    106c:	0028      	movs	r0, r5
    106e:	47a0      	blx	r4
}
    1070:	bd70      	pop	{r4, r5, r6, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00000f29 	.word	0x00000f29

00001078 <_ZN14ADF5610_Driver7InitPLLEv>:
bool  ADF5610_Driver::InitPLL(void){
    1078:	b570      	push	{r4, r5, r6, lr}
    107a:	0004      	movs	r4, r0
		CompleteConfigurationFlow(0);
    107c:	2100      	movs	r1, #0
    107e:	0020      	movs	r0, r4
    1080:	4b0d      	ldr	r3, [pc, #52]	; (10b8 <_ZN14ADF5610_Driver7InitPLLEv+0x40>)
    1082:	4798      	blx	r3
		ReadAllRegisters();
    1084:	0020      	movs	r0, r4
    1086:	4b0d      	ldr	r3, [pc, #52]	; (10bc <_ZN14ADF5610_Driver7InitPLLEv+0x44>)
    1088:	4798      	blx	r3
		pll_started= bitRead(RegRead[1],1)&(bitRead(RegRead[1],0)==0);
    108a:	6963      	ldr	r3, [r4, #20]
    108c:	0859      	lsrs	r1, r3, #1
    108e:	2201      	movs	r2, #1
    1090:	401a      	ands	r2, r3
    1092:	4253      	negs	r3, r2
    1094:	4153      	adcs	r3, r2
    1096:	400b      	ands	r3, r1
    1098:	2556      	movs	r5, #86	; 0x56
    109a:	35ff      	adds	r5, #255	; 0xff
    109c:	5563      	strb	r3, [r4, r5]
		delay_ms(100);
    109e:	2064      	movs	r0, #100	; 0x64
    10a0:	4b07      	ldr	r3, [pc, #28]	; (10c0 <_ZN14ADF5610_Driver7InitPLLEv+0x48>)
    10a2:	4798      	blx	r3
	}while((!Is_Locked())|((!pll_started)|false));
    10a4:	0020      	movs	r0, r4
    10a6:	4b07      	ldr	r3, [pc, #28]	; (10c4 <_ZN14ADF5610_Driver7InitPLLEv+0x4c>)
    10a8:	4798      	blx	r3
    10aa:	5d63      	ldrb	r3, [r4, r5]
	do{
    10ac:	2800      	cmp	r0, #0
    10ae:	d0e5      	beq.n	107c <_ZN14ADF5610_Driver7InitPLLEv+0x4>
    10b0:	2b00      	cmp	r3, #0
    10b2:	d0e3      	beq.n	107c <_ZN14ADF5610_Driver7InitPLLEv+0x4>
}
    10b4:	0018      	movs	r0, r3
    10b6:	bd70      	pop	{r4, r5, r6, pc}
    10b8:	0000102d 	.word	0x0000102d
    10bc:	00000c69 	.word	0x00000c69
    10c0:	000023d1 	.word	0x000023d1
    10c4:	00000a41 	.word	0x00000a41

000010c8 <_ZN14ADF5610_Driver4InitEv>:
bool ADF5610_Driver::Init(void){
    10c8:	b570      	push	{r4, r5, r6, lr}
    10ca:	0004      	movs	r4, r0
	spi_adf=&staticSPI;
    10cc:	480d      	ldr	r0, [pc, #52]	; (1104 <_ZN14ADF5610_Driver4InitEv+0x3c>)
    10ce:	6060      	str	r0, [r4, #4]
	spi_adf->Init();
    10d0:	4b0d      	ldr	r3, [pc, #52]	; (1108 <_ZN14ADF5610_Driver4InitEv+0x40>)
    10d2:	4798      	blx	r3
	memset(to_send,0,4);
    10d4:	0025      	movs	r5, r4
    10d6:	3551      	adds	r5, #81	; 0x51
    10d8:	35ff      	adds	r5, #255	; 0xff
    10da:	2204      	movs	r2, #4
    10dc:	2100      	movs	r1, #0
    10de:	0028      	movs	r0, r5
    10e0:	4b0a      	ldr	r3, [pc, #40]	; (110c <_ZN14ADF5610_Driver4InitEv+0x44>)
    10e2:	4798      	blx	r3
	spi_adf->Write(to_send,4);
    10e4:	2204      	movs	r2, #4
    10e6:	0029      	movs	r1, r5
    10e8:	6860      	ldr	r0, [r4, #4]
    10ea:	4b09      	ldr	r3, [pc, #36]	; (1110 <_ZN14ADF5610_Driver4InitEv+0x48>)
    10ec:	4798      	blx	r3
	spi_adf->SetCS(true);
    10ee:	2101      	movs	r1, #1
    10f0:	6860      	ldr	r0, [r4, #4]
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <_ZN14ADF5610_Driver4InitEv+0x4c>)
    10f4:	4798      	blx	r3
	 InitiateRegisters();
    10f6:	0020      	movs	r0, r4
    10f8:	4b07      	ldr	r3, [pc, #28]	; (1118 <_ZN14ADF5610_Driver4InitEv+0x50>)
    10fa:	4798      	blx	r3
	return InitPLL();
    10fc:	0020      	movs	r0, r4
    10fe:	4b07      	ldr	r3, [pc, #28]	; (111c <_ZN14ADF5610_Driver4InitEv+0x54>)
    1100:	4798      	blx	r3
}
    1102:	bd70      	pop	{r4, r5, r6, pc}
    1104:	20000c98 	.word	0x20000c98
    1108:	000011bd 	.word	0x000011bd
    110c:	0000bf99 	.word	0x0000bf99
    1110:	000011e5 	.word	0x000011e5
    1114:	00001215 	.word	0x00001215
    1118:	00000b41 	.word	0x00000b41
    111c:	00001079 	.word	0x00001079

00001120 <_ZN14ADF5610_Driver11WriteSubVCOEv>:
void ADF5610_Driver::WriteSubVCO(void){
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	0005      	movs	r5, r0
	WriteRegisters(22);
    1124:	2116      	movs	r1, #22
    1126:	4c04      	ldr	r4, [pc, #16]	; (1138 <_ZN14ADF5610_Driver11WriteSubVCOEv+0x18>)
    1128:	47a0      	blx	r4
	WriteRegisters(20);
    112a:	2114      	movs	r1, #20
    112c:	0028      	movs	r0, r5
    112e:	47a0      	blx	r4
	WriteRegisters(5);
    1130:	2105      	movs	r1, #5
    1132:	0028      	movs	r0, r5
    1134:	47a0      	blx	r4
}
    1136:	bd70      	pop	{r4, r5, r6, pc}
    1138:	00000f29 	.word	0x00000f29

0000113c <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>:
void ADF5610_Driver::ShortConfigurationFlow(void){
    113c:	b570      	push	{r4, r5, r6, lr}
    113e:	0004      	movs	r4, r0
  WriteRegisters(8);
    1140:	2108      	movs	r1, #8
    1142:	4d06      	ldr	r5, [pc, #24]	; (115c <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x20>)
    1144:	47a8      	blx	r5
  WriteSubVCO();
    1146:	0020      	movs	r0, r4
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x24>)
    114a:	4798      	blx	r3
  WriteRegisters(3);
    114c:	2103      	movs	r1, #3
    114e:	0020      	movs	r0, r4
    1150:	47a8      	blx	r5
  WriteRegisters(4);
    1152:	2104      	movs	r1, #4
    1154:	0020      	movs	r0, r4
    1156:	47a8      	blx	r5
}
    1158:	bd70      	pop	{r4, r5, r6, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	00000f29 	.word	0x00000f29
    1160:	00001121 	.word	0x00001121

00001164 <_ZN14ADF5610_Driver20Set_Target_FrequencyEf>:
{
    1164:	b510      	push	{r4, lr}
    1166:	0004      	movs	r4, r0
	target_frequency=tf;
    1168:	239a      	movs	r3, #154	; 0x9a
    116a:	005b      	lsls	r3, r3, #1
    116c:	50c1      	str	r1, [r0, r3]
	CalculateVCOValues();
    116e:	4b03      	ldr	r3, [pc, #12]	; (117c <_ZN14ADF5610_Driver20Set_Target_FrequencyEf+0x18>)
    1170:	4798      	blx	r3
	ShortConfigurationFlow();
    1172:	0020      	movs	r0, r4
    1174:	4b02      	ldr	r3, [pc, #8]	; (1180 <_ZN14ADF5610_Driver20Set_Target_FrequencyEf+0x1c>)
    1176:	4798      	blx	r3
}
    1178:	bd10      	pop	{r4, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	00000c85 	.word	0x00000c85
    1180:	0000113d 	.word	0x0000113d

00001184 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev>:
}
    1184:	b510      	push	{r4, lr}
    1186:	4902      	ldr	r1, [pc, #8]	; (1190 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0xc>)
    1188:	2001      	movs	r0, #1
    118a:	4b02      	ldr	r3, [pc, #8]	; (1194 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0x10>)
    118c:	4798      	blx	r3
    118e:	bd10      	pop	{r4, pc}
    1190:	0000ffff 	.word	0x0000ffff
    1194:	0000094d 	.word	0x0000094d

00001198 <_ZN17SPI_Syn_Class_ADFC1Ev>:


// default constructor
SPI_Syn_Class_ADF::SPI_Syn_Class_ADF()
{
		ptrSPISync_adf=this;
    1198:	4b01      	ldr	r3, [pc, #4]	; (11a0 <_ZN17SPI_Syn_Class_ADFC1Ev+0x8>)
    119a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class_ADF
    119c:	4770      	bx	lr
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	20000ca8 	.word	0x20000ca8

000011a4 <_ZN17SPI_Syn_Class_ADFD1Ev>:


// default destructor
SPI_Syn_Class_ADF::~SPI_Syn_Class_ADF()
{
} //~SPI_Syn_Class_ADF
    11a4:	4770      	bx	lr
	...

000011a8 <_ZN17SPI_Syn_Class_ADF6EnableEv>:
	
}



uint8_t SPI_Syn_Class_ADF::Enable(){
    11a8:	b510      	push	{r4, lr}
	spi_m_sync_enable(&SPI_ADF);
    11aa:	4802      	ldr	r0, [pc, #8]	; (11b4 <_ZN17SPI_Syn_Class_ADF6EnableEv+0xc>)
    11ac:	4b02      	ldr	r3, [pc, #8]	; (11b8 <_ZN17SPI_Syn_Class_ADF6EnableEv+0x10>)
    11ae:	4798      	blx	r3
	return 0;
}
    11b0:	2000      	movs	r0, #0
    11b2:	bd10      	pop	{r4, pc}
    11b4:	2000151c 	.word	0x2000151c
    11b8:	00002609 	.word	0x00002609

000011bc <_ZN17SPI_Syn_Class_ADF4InitEv>:
void SPI_Syn_Class_ADF::Init(){
    11bc:	b510      	push	{r4, lr}
    11be:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(&SPI_ADF, &io);
    11c0:	0001      	movs	r1, r0
    11c2:	310c      	adds	r1, #12
    11c4:	4804      	ldr	r0, [pc, #16]	; (11d8 <_ZN17SPI_Syn_Class_ADF4InitEv+0x1c>)
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <_ZN17SPI_Syn_Class_ADF4InitEv+0x20>)
    11c8:	4798      	blx	r3
	Enable();
    11ca:	0020      	movs	r0, r4
    11cc:	4b04      	ldr	r3, [pc, #16]	; (11e0 <_ZN17SPI_Syn_Class_ADF4InitEv+0x24>)
    11ce:	4798      	blx	r3
	ready=true;
    11d0:	2301      	movs	r3, #1
    11d2:	7023      	strb	r3, [r4, #0]
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	2000151c 	.word	0x2000151c
    11dc:	000026f1 	.word	0x000026f1
    11e0:	000011a9 	.word	0x000011a9

000011e4 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh>:

uint8_t  SPI_Syn_Class_ADF::Write(const uint8_t * p, uint8_t n){
    11e4:	b510      	push	{r4, lr}
    11e6:	0014      	movs	r4, r2
	ready=false;
    11e8:	2300      	movs	r3, #0
    11ea:	7003      	strb	r3, [r0, #0]

	io_write(io, p, (uint16_t)n);
    11ec:	68c0      	ldr	r0, [r0, #12]
    11ee:	b292      	uxth	r2, r2
    11f0:	4b01      	ldr	r3, [pc, #4]	; (11f8 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh+0x14>)
    11f2:	4798      	blx	r3

	return n;
}
    11f4:	0020      	movs	r0, r4
    11f6:	bd10      	pop	{r4, pc}
    11f8:	00002541 	.word	0x00002541

000011fc <_ZN17SPI_Syn_Class_ADF4ReadEPhh>:
uint8_t  SPI_Syn_Class_ADF::Read(uint8_t * p, uint8_t n){
    11fc:	b510      	push	{r4, lr}
    11fe:	0014      	movs	r4, r2
	ready=false;
    1200:	2300      	movs	r3, #0
    1202:	7003      	strb	r3, [r0, #0]
	io_read(io, p, (uint16_t)n);
    1204:	68c0      	ldr	r0, [r0, #12]
    1206:	b292      	uxth	r2, r2
    1208:	4b01      	ldr	r3, [pc, #4]	; (1210 <_ZN17SPI_Syn_Class_ADF4ReadEPhh+0x14>)
    120a:	4798      	blx	r3

	
	return n;
}
    120c:	0020      	movs	r0, r4
    120e:	bd10      	pop	{r4, pc}
    1210:	00002579 	.word	0x00002579

00001214 <_ZN17SPI_Syn_Class_ADF5SetCSEb>:
	if (level) {
    1214:	2900      	cmp	r1, #0
    1216:	d104      	bne.n	1222 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1218:	2280      	movs	r2, #128	; 0x80
    121a:	23c0      	movs	r3, #192	; 0xc0
    121c:	05db      	lsls	r3, r3, #23
    121e:	615a      	str	r2, [r3, #20]
	//spi_m_sync_disable(SPI);
	
}
void SPI_Syn_Class_ADF::SetCS(bool st){
	gpio_set_pin_level(CS_ADF,st);
}
    1220:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1222:	2280      	movs	r2, #128	; 0x80
    1224:	23c0      	movs	r3, #192	; 0xc0
    1226:	05db      	lsls	r3, r3, #23
    1228:	619a      	str	r2, [r3, #24]
    122a:	e7f9      	b.n	1220 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xc>

0000122c <_Z41__static_initialization_and_destruction_0ii>:
		else
		{
			return false;
		}

    122c:	b510      	push	{r4, lr}
    122e:	2801      	cmp	r0, #1
    1230:	d000      	beq.n	1234 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1232:	bd10      	pop	{r4, pc}
    1234:	4b06      	ldr	r3, [pc, #24]	; (1250 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    1236:	4299      	cmp	r1, r3
    1238:	d1fb      	bne.n	1232 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class staticSPI;
    123a:	4c06      	ldr	r4, [pc, #24]	; (1254 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    123c:	0020      	movs	r0, r4
    123e:	4b06      	ldr	r3, [pc, #24]	; (1258 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    1240:	4798      	blx	r3
    1242:	4a06      	ldr	r2, [pc, #24]	; (125c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    1244:	4906      	ldr	r1, [pc, #24]	; (1260 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1246:	0020      	movs	r0, r4
    1248:	4b06      	ldr	r3, [pc, #24]	; (1264 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    124a:	4798      	blx	r3
    124c:	e7f1      	b.n	1232 <_Z41__static_initialization_and_destruction_0ii+0x6>
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	0000ffff 	.word	0x0000ffff
    1254:	20000cac 	.word	0x20000cac
    1258:	00001b79 	.word	0x00001b79
    125c:	20000000 	.word	0x20000000
    1260:	00001b85 	.word	0x00001b85
    1264:	0000701d 	.word	0x0000701d

00001268 <_ZN15lmx2694_HandlerC1Ev>:
	write_registers=local_read_registers;
    1268:	4b0a      	ldr	r3, [pc, #40]	; (1294 <_ZN15lmx2694_HandlerC1Ev+0x2c>)
    126a:	3310      	adds	r3, #16
    126c:	6083      	str	r3, [r0, #8]
	read_registers=local_write_registers;
    126e:	4b0a      	ldr	r3, [pc, #40]	; (1298 <_ZN15lmx2694_HandlerC1Ev+0x30>)
    1270:	3378      	adds	r3, #120	; 0x78
    1272:	6043      	str	r3, [r0, #4]
	channel_divider=1;
    1274:	2301      	movs	r3, #1
    1276:	2221      	movs	r2, #33	; 0x21
    1278:	5483      	strb	r3, [r0, r2]
	channel_index=0;
    127a:	2200      	movs	r2, #0
    127c:	77c2      	strb	r2, [r0, #31]
	step=(MAX_SENSOR_FREQUENCY-MIN_WOOBLING_FREQUENCY)/(1024.0*2);
    127e:	4a07      	ldr	r2, [pc, #28]	; (129c <_ZN15lmx2694_HandlerC1Ev+0x34>)
    1280:	6442      	str	r2, [r0, #68]	; 0x44
	current_frequency=4000;
    1282:	4a07      	ldr	r2, [pc, #28]	; (12a0 <_ZN15lmx2694_HandlerC1Ev+0x38>)
    1284:	6002      	str	r2, [r0, #0]
	target_frequency=current_frequency+step;
    1286:	4a07      	ldr	r2, [pc, #28]	; (12a4 <_ZN15lmx2694_HandlerC1Ev+0x3c>)
    1288:	6342      	str	r2, [r0, #52]	; 0x34
	direction=true;
    128a:	2249      	movs	r2, #73	; 0x49
    128c:	5483      	strb	r3, [r0, r2]
	mash_order=1;
    128e:	3a29      	subs	r2, #41	; 0x29
    1290:	5483      	strb	r3, [r0, r2]
}
    1292:	4770      	bx	lr
    1294:	20000cac 	.word	0x20000cac
    1298:	20000d2c 	.word	0x20000d2c
    129c:	3ec80000 	.word	0x3ec80000
    12a0:	457a0000 	.word	0x457a0000
    12a4:	457a0640 	.word	0x457a0640

000012a8 <_ZN15lmx2694_HandlerD1Ev>:
}
    12a8:	4770      	bx	lr

000012aa <_ZN15lmx2694_Handler11Get_OUT_MUXEh>:
	if (ov==2)
    12aa:	2902      	cmp	r1, #2
    12ac:	d006      	beq.n	12bc <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x12>
		return	(uint8_t)((write_registers[45]>>11)&(0x03));
    12ae:	6882      	ldr	r2, [r0, #8]
    12b0:	235a      	movs	r3, #90	; 0x5a
    12b2:	5ad3      	ldrh	r3, [r2, r3]
    12b4:	0adb      	lsrs	r3, r3, #11
    12b6:	2003      	movs	r0, #3
    12b8:	4018      	ands	r0, r3
}
    12ba:	4770      	bx	lr
		return	(uint8_t)((write_registers[46])&(0x03));
    12bc:	6882      	ldr	r2, [r0, #8]
    12be:	235c      	movs	r3, #92	; 0x5c
    12c0:	5cd3      	ldrb	r3, [r2, r3]
    12c2:	2003      	movs	r0, #3
    12c4:	4018      	ands	r0, r3
    12c6:	e7f8      	b.n	12ba <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x10>

000012c8 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
	if (mbr)
    12c8:	2900      	cmp	r1, #0
    12ca:	d107      	bne.n	12dc <_ZN15lmx2694_Handler13Get_N_DividerEb+0x14>
		N_divider=(uint32_t)(((uint32_t)write_registers[34])<<16)+write_registers[36];
    12cc:	6882      	ldr	r2, [r0, #8]
    12ce:	2344      	movs	r3, #68	; 0x44
    12d0:	5ad3      	ldrh	r3, [r2, r3]
    12d2:	041b      	lsls	r3, r3, #16
    12d4:	3148      	adds	r1, #72	; 0x48
    12d6:	5a52      	ldrh	r2, [r2, r1]
    12d8:	189b      	adds	r3, r3, r2
    12da:	6243      	str	r3, [r0, #36]	; 0x24
	return N_divider;
    12dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    12de:	4770      	bx	lr

000012e0 <_ZN15lmx2694_Handler13Get_NumeratorEb>:
	if (mbr)
    12e0:	2900      	cmp	r1, #0
    12e2:	d107      	bne.n	12f4 <_ZN15lmx2694_Handler13Get_NumeratorEb+0x14>
		numerator=(uint32_t)(((uint32_t)write_registers[42])<<16)+write_registers[43];
    12e4:	6882      	ldr	r2, [r0, #8]
    12e6:	2354      	movs	r3, #84	; 0x54
    12e8:	5ad3      	ldrh	r3, [r2, r3]
    12ea:	041b      	lsls	r3, r3, #16
    12ec:	3156      	adds	r1, #86	; 0x56
    12ee:	5a52      	ldrh	r2, [r2, r1]
    12f0:	189b      	adds	r3, r3, r2
    12f2:	6283      	str	r3, [r0, #40]	; 0x28
	return numerator;
    12f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
    12f6:	4770      	bx	lr

000012f8 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
	if (mbr)
    12f8:	2900      	cmp	r1, #0
    12fa:	d107      	bne.n	130c <_ZN15lmx2694_Handler15Get_DenominatorEb+0x14>
		denominator=(uint32_t)(((uint32_t)write_registers[38])<<16)+write_registers[39];
    12fc:	6882      	ldr	r2, [r0, #8]
    12fe:	234c      	movs	r3, #76	; 0x4c
    1300:	5ad3      	ldrh	r3, [r2, r3]
    1302:	041b      	lsls	r3, r3, #16
    1304:	314e      	adds	r1, #78	; 0x4e
    1306:	5a52      	ldrh	r2, [r2, r1]
    1308:	189b      	adds	r3, r3, r2
    130a:	62c3      	str	r3, [r0, #44]	; 0x2c
	return denominator;
    130c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
    130e:	4770      	bx	lr

00001310 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
float lmx2694_Handler::Calculate_Current_Frequency(bool mbr){
    1310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1312:	0004      	movs	r4, r0
	if (mbr)
    1314:	2900      	cmp	r1, #0
    1316:	d001      	beq.n	131c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0xc>
	return vco_frequency;
    1318:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
    131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+(float(Get_Numerator(false))/float(Get_Denominator(false))));
    131c:	4b0e      	ldr	r3, [pc, #56]	; (1358 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x48>)
    131e:	4798      	blx	r3
    1320:	4d0e      	ldr	r5, [pc, #56]	; (135c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x4c>)
    1322:	47a8      	blx	r5
    1324:	1c06      	adds	r6, r0, #0
    1326:	2100      	movs	r1, #0
    1328:	0020      	movs	r0, r4
    132a:	4b0d      	ldr	r3, [pc, #52]	; (1360 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x50>)
    132c:	4798      	blx	r3
    132e:	47a8      	blx	r5
    1330:	1c07      	adds	r7, r0, #0
    1332:	2100      	movs	r1, #0
    1334:	0020      	movs	r0, r4
    1336:	4b0b      	ldr	r3, [pc, #44]	; (1364 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x54>)
    1338:	4798      	blx	r3
    133a:	47a8      	blx	r5
    133c:	1c01      	adds	r1, r0, #0
    133e:	1c38      	adds	r0, r7, #0
    1340:	4b09      	ldr	r3, [pc, #36]	; (1368 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x58>)
    1342:	4798      	blx	r3
    1344:	1c01      	adds	r1, r0, #0
    1346:	1c30      	adds	r0, r6, #0
    1348:	4b08      	ldr	r3, [pc, #32]	; (136c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x5c>)
    134a:	4798      	blx	r3
    134c:	4908      	ldr	r1, [pc, #32]	; (1370 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x60>)
    134e:	4b09      	ldr	r3, [pc, #36]	; (1374 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x64>)
    1350:	4798      	blx	r3
    1352:	63a0      	str	r0, [r4, #56]	; 0x38
    1354:	e7e0      	b.n	1318 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x8>
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	000012c9 	.word	0x000012c9
    135c:	0000a089 	.word	0x0000a089
    1360:	000012e1 	.word	0x000012e1
    1364:	000012f9 	.word	0x000012f9
    1368:	00009651 	.word	0x00009651
    136c:	0000932d 	.word	0x0000932d
    1370:	43480000 	.word	0x43480000
    1374:	00009a31 	.word	0x00009a31

00001378 <_ZN15lmx2694_Handler3GCDEmm>:
{
    1378:	b570      	push	{r4, r5, r6, lr}
    137a:	0006      	movs	r6, r0
    137c:	000d      	movs	r5, r1
    137e:	0014      	movs	r4, r2
	if (a == 0)
    1380:	2900      	cmp	r1, #0
    1382:	d016      	beq.n	13b2 <_ZN15lmx2694_Handler3GCDEmm+0x3a>
	else if (b == 0)
    1384:	2a00      	cmp	r2, #0
    1386:	d016      	beq.n	13b6 <_ZN15lmx2694_Handler3GCDEmm+0x3e>
	if (a < b)
    1388:	4291      	cmp	r1, r2
    138a:	d309      	bcc.n	13a0 <_ZN15lmx2694_Handler3GCDEmm+0x28>
	return GCD(b, a % b);
    138c:	0011      	movs	r1, r2
    138e:	0028      	movs	r0, r5
    1390:	4b0a      	ldr	r3, [pc, #40]	; (13bc <_ZN15lmx2694_Handler3GCDEmm+0x44>)
    1392:	4798      	blx	r3
    1394:	000a      	movs	r2, r1
    1396:	0021      	movs	r1, r4
    1398:	0030      	movs	r0, r6
    139a:	f7ff ffed 	bl	1378 <_ZN15lmx2694_Handler3GCDEmm>
    139e:	e009      	b.n	13b4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return GCD(a, b % a);
    13a0:	0010      	movs	r0, r2
    13a2:	4b06      	ldr	r3, [pc, #24]	; (13bc <_ZN15lmx2694_Handler3GCDEmm+0x44>)
    13a4:	4798      	blx	r3
    13a6:	000a      	movs	r2, r1
    13a8:	0029      	movs	r1, r5
    13aa:	0030      	movs	r0, r6
    13ac:	f7ff ffe4 	bl	1378 <_ZN15lmx2694_Handler3GCDEmm>
    13b0:	e000      	b.n	13b4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return b;
    13b2:	0010      	movs	r0, r2
}
    13b4:	bd70      	pop	{r4, r5, r6, pc}
	return a;
    13b6:	0008      	movs	r0, r1
    13b8:	e7fc      	b.n	13b4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	00008e1d 	.word	0x00008e1d

000013c0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
uint8_t lmx2694_Handler::Choose_Channel_Divider_Index(){
    13c0:	b570      	push	{r4, r5, r6, lr}
    13c2:	0005      	movs	r5, r0
	for ( int i = 0; i < channel_divider_size; i++)
    13c4:	2400      	movs	r4, #0
    13c6:	e00d      	b.n	13e4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x24>
				if (MAX_VCO_FREQUENCY/(channel_divider_values[i])>target_frequency)
    13c8:	00a3      	lsls	r3, r4, #2
    13ca:	4a17      	ldr	r2, [pc, #92]	; (1428 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    13cc:	5899      	ldr	r1, [r3, r2]
    13ce:	4817      	ldr	r0, [pc, #92]	; (142c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x6c>)
    13d0:	4b17      	ldr	r3, [pc, #92]	; (1430 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
    13d2:	4798      	blx	r3
    13d4:	4b17      	ldr	r3, [pc, #92]	; (1434 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
    13d6:	4798      	blx	r3
    13d8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    13da:	4b17      	ldr	r3, [pc, #92]	; (1438 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
    13dc:	4798      	blx	r3
    13de:	2800      	cmp	r0, #0
    13e0:	d01a      	beq.n	1418 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x58>
	for ( int i = 0; i < channel_divider_size; i++)
    13e2:	3401      	adds	r4, #1
    13e4:	2c0d      	cmp	r4, #13
    13e6:	dc10      	bgt.n	140a <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
		if (i<3)
    13e8:	2c02      	cmp	r4, #2
    13ea:	dded      	ble.n	13c8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x8>
				if (11500/(channel_divider_values[i])>target_frequency)
    13ec:	00a3      	lsls	r3, r4, #2
    13ee:	4a0e      	ldr	r2, [pc, #56]	; (1428 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    13f0:	5899      	ldr	r1, [r3, r2]
    13f2:	4812      	ldr	r0, [pc, #72]	; (143c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x7c>)
    13f4:	4b0e      	ldr	r3, [pc, #56]	; (1430 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
    13f6:	4798      	blx	r3
    13f8:	4b0e      	ldr	r3, [pc, #56]	; (1434 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
    13fa:	4798      	blx	r3
    13fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
    13fe:	4b0e      	ldr	r3, [pc, #56]	; (1438 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
    1400:	4798      	blx	r3
    1402:	2800      	cmp	r0, #0
    1404:	d1ed      	bne.n	13e2 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x22>
					channel_index= i-1;
    1406:	3c01      	subs	r4, #1
    1408:	77ec      	strb	r4, [r5, #31]
	channel_divider=channel_divider_values[channel_index];
    140a:	7fe8      	ldrb	r0, [r5, #31]
    140c:	0083      	lsls	r3, r0, #2
    140e:	4a06      	ldr	r2, [pc, #24]	; (1428 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    1410:	5cd2      	ldrb	r2, [r2, r3]
    1412:	2321      	movs	r3, #33	; 0x21
    1414:	54ea      	strb	r2, [r5, r3]
}
    1416:	bd70      	pop	{r4, r5, r6, pc}
					if (i>0)
    1418:	2c00      	cmp	r4, #0
    141a:	dd02      	ble.n	1422 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x62>
							channel_index=i-1;
    141c:	3c01      	subs	r4, #1
    141e:	77ec      	strb	r4, [r5, #31]
    1420:	e7f3      	b.n	140a <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
						 channel_index=0;
    1422:	2300      	movs	r3, #0
    1424:	77eb      	strb	r3, [r5, #31]
    1426:	e7f0      	b.n	140a <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
    1428:	00010d70 	.word	0x00010d70
    142c:	00003afc 	.word	0x00003afc
    1430:	00008e25 	.word	0x00008e25
    1434:	00009fe9 	.word	0x00009fe9
    1438:	000090c5 	.word	0x000090c5
    143c:	00002cec 	.word	0x00002cec

00001440 <_ZN15lmx2694_Handler18Calculate_FractionEf>:
void lmx2694_Handler::Calculate_Fraction(float fr){
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	b083      	sub	sp, #12
    1444:	0004      	movs	r4, r0
    1446:	1c08      	adds	r0, r1, #0
	gcd=GCD((uint32_t)(round(fr*PRECISION)),PRECISION);
    1448:	219f      	movs	r1, #159	; 0x9f
    144a:	05c9      	lsls	r1, r1, #23
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x4c>)
    144e:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x50>)
    1452:	4798      	blx	r3
    1454:	9001      	str	r0, [sp, #4]
    1456:	2601      	movs	r6, #1
    1458:	4276      	negs	r6, r6
    145a:	4f0e      	ldr	r7, [pc, #56]	; (1494 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x54>)
    145c:	47b8      	blx	r7
    145e:	0001      	movs	r1, r0
    1460:	0032      	movs	r2, r6
    1462:	0020      	movs	r0, r4
    1464:	4b0c      	ldr	r3, [pc, #48]	; (1498 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x58>)
    1466:	4798      	blx	r3
    1468:	0005      	movs	r5, r0
    146a:	6320      	str	r0, [r4, #48]	; 0x30
	numerator=(uint32_t)(round(fr*PRECISION)/gcd);
    146c:	4b0b      	ldr	r3, [pc, #44]	; (149c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x5c>)
    146e:	4798      	blx	r3
    1470:	1c01      	adds	r1, r0, #0
    1472:	9801      	ldr	r0, [sp, #4]
    1474:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x60>)
    1476:	4798      	blx	r3
    1478:	47b8      	blx	r7
    147a:	62a0      	str	r0, [r4, #40]	; 0x28
	denominator=PRECISION/gcd;
    147c:	0029      	movs	r1, r5
    147e:	0030      	movs	r0, r6
    1480:	4b08      	ldr	r3, [pc, #32]	; (14a4 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x64>)
    1482:	4798      	blx	r3
    1484:	62e0      	str	r0, [r4, #44]	; 0x2c
}
    1486:	b003      	add	sp, #12
    1488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	00009a31 	.word	0x00009a31
    1490:	000071f9 	.word	0x000071f9
    1494:	00009141 	.word	0x00009141
    1498:	00001379 	.word	0x00001379
    149c:	0000a089 	.word	0x0000a089
    14a0:	00009651 	.word	0x00009651
    14a4:	00008d11 	.word	0x00008d11

000014a8 <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
    14a8:	b530      	push	{r4, r5, lr}
	for(int i=0; i<3;i++){
    14aa:	2200      	movs	r2, #0
    14ac:	2a02      	cmp	r2, #2
    14ae:	dc08      	bgt.n	14c2 <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
    14b0:	2302      	movs	r3, #2
    14b2:	1a9b      	subs	r3, r3, r2
    14b4:	00d4      	lsls	r4, r2, #3
    14b6:	000d      	movs	r5, r1
    14b8:	40e5      	lsrs	r5, r4
    14ba:	18c3      	adds	r3, r0, r3
    14bc:	741d      	strb	r5, [r3, #16]
	for(int i=0; i<3;i++){
    14be:	3201      	adds	r2, #1
    14c0:	e7f4      	b.n	14ac <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x4>
}
    14c2:	bd30      	pop	{r4, r5, pc}

000014c4 <_ZN15lmx2694_Handler10Power_DownEv>:
bool lmx2694_Handler::Power_Down(){
    14c4:	b570      	push	{r4, r5, r6, lr}
    14c6:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
    14c8:	2100      	movs	r1, #0
    14ca:	68c0      	ldr	r0, [r0, #12]
    14cc:	4d0a      	ldr	r5, [pc, #40]	; (14f8 <_ZN15lmx2694_Handler10Power_DownEv+0x34>)
    14ce:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
    14d0:	490a      	ldr	r1, [pc, #40]	; (14fc <_ZN15lmx2694_Handler10Power_DownEv+0x38>)
    14d2:	0020      	movs	r0, r4
    14d4:	4b0a      	ldr	r3, [pc, #40]	; (1500 <_ZN15lmx2694_Handler10Power_DownEv+0x3c>)
    14d6:	4798      	blx	r3
	int_result=spi_lmx->Write(write_bytes,3);
    14d8:	0021      	movs	r1, r4
    14da:	3110      	adds	r1, #16
    14dc:	2203      	movs	r2, #3
    14de:	68e0      	ldr	r0, [r4, #12]
    14e0:	4b08      	ldr	r3, [pc, #32]	; (1504 <_ZN15lmx2694_Handler10Power_DownEv+0x40>)
    14e2:	4798      	blx	r3
    14e4:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
    14e6:	17c3      	asrs	r3, r0, #31
    14e8:	1a18      	subs	r0, r3, r0
    14ea:	0fc0      	lsrs	r0, r0, #31
    14ec:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
    14ee:	2101      	movs	r1, #1
    14f0:	68e0      	ldr	r0, [r4, #12]
    14f2:	47a8      	blx	r5
	return bool_result;
    14f4:	7da0      	ldrb	r0, [r4, #22]
}
    14f6:	bd70      	pop	{r4, r5, r6, pc}
    14f8:	00001bf5 	.word	0x00001bf5
    14fc:	00002119 	.word	0x00002119
    1500:	000014a9 	.word	0x000014a9
    1504:	00001bc5 	.word	0x00001bc5

00001508 <_ZN15lmx2694_Handler13Program_ResetEv>:
bool lmx2694_Handler::Program_Reset(){
    1508:	b5f0      	push	{r4, r5, r6, r7, lr}
    150a:	b083      	sub	sp, #12
    150c:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
    150e:	2100      	movs	r1, #0
    1510:	68c0      	ldr	r0, [r0, #12]
    1512:	4d16      	ldr	r5, [pc, #88]	; (156c <_ZN15lmx2694_Handler13Program_ResetEv+0x64>)
    1514:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
    1516:	4916      	ldr	r1, [pc, #88]	; (1570 <_ZN15lmx2694_Handler13Program_ResetEv+0x68>)
    1518:	0020      	movs	r0, r4
    151a:	4f16      	ldr	r7, [pc, #88]	; (1574 <_ZN15lmx2694_Handler13Program_ResetEv+0x6c>)
    151c:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
    151e:	2310      	movs	r3, #16
    1520:	469c      	mov	ip, r3
    1522:	44a4      	add	ip, r4
    1524:	4663      	mov	r3, ip
    1526:	2203      	movs	r2, #3
    1528:	9301      	str	r3, [sp, #4]
    152a:	4661      	mov	r1, ip
    152c:	68e0      	ldr	r0, [r4, #12]
    152e:	4e12      	ldr	r6, [pc, #72]	; (1578 <_ZN15lmx2694_Handler13Program_ResetEv+0x70>)
    1530:	47b0      	blx	r6
    1532:	61a0      	str	r0, [r4, #24]
	spi_lmx->SetCS(true);
    1534:	2101      	movs	r1, #1
    1536:	68e0      	ldr	r0, [r4, #12]
    1538:	47a8      	blx	r5
	delay_ms(100);
    153a:	2064      	movs	r0, #100	; 0x64
    153c:	4b0f      	ldr	r3, [pc, #60]	; (157c <_ZN15lmx2694_Handler13Program_ResetEv+0x74>)
    153e:	4798      	blx	r3
	spi_lmx->SetCS(false);
    1540:	2100      	movs	r1, #0
    1542:	68e0      	ldr	r0, [r4, #12]
    1544:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
    1546:	490e      	ldr	r1, [pc, #56]	; (1580 <_ZN15lmx2694_Handler13Program_ResetEv+0x78>)
    1548:	0020      	movs	r0, r4
    154a:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
    154c:	2203      	movs	r2, #3
    154e:	9901      	ldr	r1, [sp, #4]
    1550:	68e0      	ldr	r0, [r4, #12]
    1552:	47b0      	blx	r6
    1554:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
    1556:	17c3      	asrs	r3, r0, #31
    1558:	1a18      	subs	r0, r3, r0
    155a:	0fc0      	lsrs	r0, r0, #31
    155c:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
    155e:	2101      	movs	r1, #1
    1560:	68e0      	ldr	r0, [r4, #12]
    1562:	47a8      	blx	r5
	return bool_result;
    1564:	7da0      	ldrb	r0, [r4, #22]
}
    1566:	b003      	add	sp, #12
    1568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	00001bf5 	.word	0x00001bf5
    1570:	0000211e 	.word	0x0000211e
    1574:	000014a9 	.word	0x000014a9
    1578:	00001bc5 	.word	0x00001bc5
    157c:	000023d1 	.word	0x000023d1
    1580:	0000211c 	.word	0x0000211c

00001584 <_ZN15lmx2694_Handler16Make_Three_BytesEht>:
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16_t data){
    1584:	b570      	push	{r4, r5, r6, lr}
	for(int i=0; i<2;i++){
    1586:	2300      	movs	r3, #0
    1588:	2b01      	cmp	r3, #1
    158a:	dc08      	bgt.n	159e <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
    158c:	2402      	movs	r4, #2
    158e:	1ae4      	subs	r4, r4, r3
    1590:	00dd      	lsls	r5, r3, #3
    1592:	0016      	movs	r6, r2
    1594:	412e      	asrs	r6, r5
    1596:	1904      	adds	r4, r0, r4
    1598:	7426      	strb	r6, [r4, #16]
	for(int i=0; i<2;i++){
    159a:	3301      	adds	r3, #1
    159c:	e7f4      	b.n	1588 <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x4>
	write_bytes[0]=index;
    159e:	7401      	strb	r1, [r0, #16]
}
    15a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000015a4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht>:
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16_t data){
    15a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a6:	0004      	movs	r4, r0
    15a8:	000e      	movs	r6, r1
    15aa:	0015      	movs	r5, r2
	if ((write_registers[index]==data)&is_locked)
    15ac:	004f      	lsls	r7, r1, #1
    15ae:	6883      	ldr	r3, [r0, #8]
    15b0:	5bdb      	ldrh	r3, [r3, r7]
    15b2:	7dc2      	ldrb	r2, [r0, #23]
    15b4:	42ab      	cmp	r3, r5
    15b6:	d103      	bne.n	15c0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
    15b8:	2a00      	cmp	r2, #0
    15ba:	d001      	beq.n	15c0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
	return int_result;
    15bc:	69a0      	ldr	r0, [r4, #24]
}
    15be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_lmx->SetCS(false);
    15c0:	2100      	movs	r1, #0
    15c2:	68e0      	ldr	r0, [r4, #12]
    15c4:	4b0b      	ldr	r3, [pc, #44]	; (15f4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
    15c6:	4798      	blx	r3
		Make_Three_Bytes(index,data);
    15c8:	002a      	movs	r2, r5
    15ca:	0031      	movs	r1, r6
    15cc:	0020      	movs	r0, r4
    15ce:	4b0a      	ldr	r3, [pc, #40]	; (15f8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x54>)
    15d0:	4798      	blx	r3
		int_result=spi_lmx->Write(write_bytes,3);
    15d2:	0021      	movs	r1, r4
    15d4:	3110      	adds	r1, #16
    15d6:	2203      	movs	r2, #3
    15d8:	68e0      	ldr	r0, [r4, #12]
    15da:	4b08      	ldr	r3, [pc, #32]	; (15fc <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x58>)
    15dc:	4798      	blx	r3
    15de:	61a0      	str	r0, [r4, #24]
		if (int_result>0)
    15e0:	2800      	cmp	r0, #0
    15e2:	dd01      	ble.n	15e8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x44>
				write_registers[index]=data;
    15e4:	68a3      	ldr	r3, [r4, #8]
    15e6:	53dd      	strh	r5, [r3, r7]
		spi_lmx->SetCS(true);
    15e8:	2101      	movs	r1, #1
    15ea:	68e0      	ldr	r0, [r4, #12]
    15ec:	4b01      	ldr	r3, [pc, #4]	; (15f4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
    15ee:	4798      	blx	r3
    15f0:	e7e4      	b.n	15bc <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x18>
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	00001bf5 	.word	0x00001bf5
    15f8:	00001585 	.word	0x00001585
    15fc:	00001bc5 	.word	0x00001bc5

00001600 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
    1600:	b570      	push	{r4, r5, r6, lr}
    1602:	0004      	movs	r4, r0
    1604:	1c0d      	adds	r5, r1, #0
	if (mash_order)
    1606:	2320      	movs	r3, #32
    1608:	5cc3      	ldrb	r3, [r0, r3]
    160a:	2b00      	cmp	r3, #0
    160c:	d002      	beq.n	1614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
		switch (mash_order)
    160e:	d005      	beq.n	161c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1c>
    1610:	2b01      	cmp	r3, #1
    1612:	d015      	beq.n	1640 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x40>
	return write_registers[37];
    1614:	68a2      	ldr	r2, [r4, #8]
    1616:	234a      	movs	r3, #74	; 0x4a
    1618:	5ad0      	ldrh	r0, [r2, r3]
}
    161a:	bd70      	pop	{r4, r5, r6, pc}
				if (vcof>12500)
    161c:	4917      	ldr	r1, [pc, #92]	; (167c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
    161e:	1c28      	adds	r0, r5, #0
    1620:	4b17      	ldr	r3, [pc, #92]	; (1680 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1622:	4798      	blx	r3
    1624:	2800      	cmp	r0, #0
    1626:	d005      	beq.n	1634 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x34>
					Write_Single_Register(37,0x8204);
    1628:	4a16      	ldr	r2, [pc, #88]	; (1684 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
    162a:	2125      	movs	r1, #37	; 0x25
    162c:	0020      	movs	r0, r4
    162e:	4b16      	ldr	r3, [pc, #88]	; (1688 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1630:	4798      	blx	r3
    1632:	e7ef      	b.n	1614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8104);
    1634:	4a15      	ldr	r2, [pc, #84]	; (168c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
    1636:	2125      	movs	r1, #37	; 0x25
    1638:	0020      	movs	r0, r4
    163a:	4b13      	ldr	r3, [pc, #76]	; (1688 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    163c:	4798      	blx	r3
    163e:	e7e9      	b.n	1614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
				if (vcof>12500)
    1640:	490e      	ldr	r1, [pc, #56]	; (167c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
    1642:	1c28      	adds	r0, r5, #0
    1644:	4b0e      	ldr	r3, [pc, #56]	; (1680 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1646:	4798      	blx	r3
    1648:	2800      	cmp	r0, #0
    164a:	d10b      	bne.n	1664 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x64>
					if (vcof>10000)
    164c:	4910      	ldr	r1, [pc, #64]	; (1690 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x90>)
    164e:	1c28      	adds	r0, r5, #0
    1650:	4b0b      	ldr	r3, [pc, #44]	; (1680 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1652:	4798      	blx	r3
    1654:	2800      	cmp	r0, #0
    1656:	d10b      	bne.n	1670 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x70>
						Write_Single_Register(37,0x8104);
    1658:	4a0c      	ldr	r2, [pc, #48]	; (168c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
    165a:	2125      	movs	r1, #37	; 0x25
    165c:	0020      	movs	r0, r4
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1660:	4798      	blx	r3
    1662:	e7d7      	b.n	1614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8304);
    1664:	4a0b      	ldr	r2, [pc, #44]	; (1694 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x94>)
    1666:	2125      	movs	r1, #37	; 0x25
    1668:	0020      	movs	r0, r4
    166a:	4b07      	ldr	r3, [pc, #28]	; (1688 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    166c:	4798      	blx	r3
    166e:	e7d1      	b.n	1614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
						Write_Single_Register(37,0x8204);
    1670:	4a04      	ldr	r2, [pc, #16]	; (1684 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
    1672:	2125      	movs	r1, #37	; 0x25
    1674:	0020      	movs	r0, r4
    1676:	4b04      	ldr	r3, [pc, #16]	; (1688 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1678:	4798      	blx	r3
    167a:	e7cb      	b.n	1614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
    167c:	46435000 	.word	0x46435000
    1680:	000090c5 	.word	0x000090c5
    1684:	00008204 	.word	0x00008204
    1688:	000015a5 	.word	0x000015a5
    168c:	00008104 	.word	0x00008104
    1690:	461c4000 	.word	0x461c4000
    1694:	00008304 	.word	0x00008304

00001698 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
bool lmx2694_Handler::Write_FCAL_EN(bool st){
    1698:	b510      	push	{r4, lr}
    169a:	0004      	movs	r4, r0
	if(st){
    169c:	2900      	cmp	r1, #0
    169e:	d10e      	bne.n	16be <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x26>
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
    16a0:	6883      	ldr	r3, [r0, #8]
    16a2:	881b      	ldrh	r3, [r3, #0]
    16a4:	2208      	movs	r2, #8
    16a6:	4393      	bics	r3, r2
    16a8:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
    16aa:	8ba2      	ldrh	r2, [r4, #28]
    16ac:	2100      	movs	r1, #0
    16ae:	0020      	movs	r0, r4
    16b0:	4b06      	ldr	r3, [pc, #24]	; (16cc <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x34>)
    16b2:	4798      	blx	r3
    16b4:	61a0      	str	r0, [r4, #24]
	return int_result;
    16b6:	1e43      	subs	r3, r0, #1
    16b8:	4198      	sbcs	r0, r3
    16ba:	b2c0      	uxtb	r0, r0
}
    16bc:	bd10      	pop	{r4, pc}
		register_value=write_registers[0]|(0x01<<FCAL_EN);
    16be:	6883      	ldr	r3, [r0, #8]
    16c0:	881b      	ldrh	r3, [r3, #0]
    16c2:	2208      	movs	r2, #8
    16c4:	4313      	orrs	r3, r2
    16c6:	8383      	strh	r3, [r0, #28]
    16c8:	e7ef      	b.n	16aa <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x12>
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	000015a5 	.word	0x000015a5

000016d0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
    16d0:	b570      	push	{r4, r5, r6, lr}
    16d2:	0004      	movs	r4, r0
	Write_FCAL_EN(false);
    16d4:	2100      	movs	r1, #0
    16d6:	4d05      	ldr	r5, [pc, #20]	; (16ec <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x1c>)
    16d8:	47a8      	blx	r5
	delay_ms(100);
    16da:	2064      	movs	r0, #100	; 0x64
    16dc:	4b04      	ldr	r3, [pc, #16]	; (16f0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x20>)
    16de:	4798      	blx	r3
	bool_result=Write_FCAL_EN(true);
    16e0:	2101      	movs	r1, #1
    16e2:	0020      	movs	r0, r4
    16e4:	47a8      	blx	r5
    16e6:	75a0      	strb	r0, [r4, #22]
}
    16e8:	bd70      	pop	{r4, r5, r6, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	00001699 	.word	0x00001699
    16f0:	000023d1 	.word	0x000023d1

000016f4 <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
void lmx2694_Handler::Initiate_Registers(){
    16f4:	b570      	push	{r4, r5, r6, lr}
    16f6:	0005      	movs	r5, r0
	for (int i = 0; i < NUMBER_REGISTERS; i++)
    16f8:	2200      	movs	r2, #0
    16fa:	2a72      	cmp	r2, #114	; 0x72
    16fc:	dc0a      	bgt.n	1714 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x20>
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
    16fe:	0050      	lsls	r0, r2, #1
    1700:	2372      	movs	r3, #114	; 0x72
    1702:	1a9b      	subs	r3, r3, r2
    1704:	005b      	lsls	r3, r3, #1
    1706:	490b      	ldr	r1, [pc, #44]	; (1734 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x40>)
    1708:	18cb      	adds	r3, r1, r3
    170a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    170c:	6869      	ldr	r1, [r5, #4]
    170e:	520b      	strh	r3, [r1, r0]
	for (int i = 0; i < NUMBER_REGISTERS; i++)
    1710:	3201      	adds	r2, #1
    1712:	e7f2      	b.n	16fa <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x6>
    1714:	2473      	movs	r4, #115	; 0x73
	for(int i=NUMBER_REGISTERS; i>0;i--){
    1716:	2c00      	cmp	r4, #0
    1718:	dd0b      	ble.n	1732 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x3e>
		Write_Single_Register(i-1,read_registers[i-1]);
    171a:	1e61      	subs	r1, r4, #1
    171c:	b2c9      	uxtb	r1, r1
    171e:	4b06      	ldr	r3, [pc, #24]	; (1738 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x44>)
    1720:	18e3      	adds	r3, r4, r3
    1722:	005b      	lsls	r3, r3, #1
    1724:	686a      	ldr	r2, [r5, #4]
    1726:	5ad2      	ldrh	r2, [r2, r3]
    1728:	0028      	movs	r0, r5
    172a:	4b04      	ldr	r3, [pc, #16]	; (173c <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x48>)
    172c:	4798      	blx	r3
	for(int i=NUMBER_REGISTERS; i>0;i--){
    172e:	3c01      	subs	r4, #1
    1730:	e7f1      	b.n	1716 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x22>
}
    1732:	bd70      	pop	{r4, r5, r6, pc}
    1734:	00010d70 	.word	0x00010d70
    1738:	7fffffff 	.word	0x7fffffff
    173c:	000015a5 	.word	0x000015a5

00001740 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
    1740:	b510      	push	{r4, lr}
    1742:	0004      	movs	r4, r0
	if(st){
    1744:	2900      	cmp	r1, #0
    1746:	d10b      	bne.n	1760 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x20>
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
    1748:	6843      	ldr	r3, [r0, #4]
    174a:	881b      	ldrh	r3, [r3, #0]
    174c:	2204      	movs	r2, #4
    174e:	4393      	bics	r3, r2
    1750:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
    1752:	8ba2      	ldrh	r2, [r4, #28]
    1754:	2100      	movs	r1, #0
    1756:	0020      	movs	r0, r4
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x2c>)
    175a:	4798      	blx	r3
    175c:	61a0      	str	r0, [r4, #24]
}
    175e:	bd10      	pop	{r4, pc}
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
    1760:	6843      	ldr	r3, [r0, #4]
    1762:	881b      	ldrh	r3, [r3, #0]
    1764:	2204      	movs	r2, #4
    1766:	4313      	orrs	r3, r2
    1768:	8383      	strh	r3, [r0, #28]
    176a:	e7f2      	b.n	1752 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x12>
    176c:	000015a5 	.word	0x000015a5

00001770 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
    1770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1772:	0004      	movs	r4, r0
    1774:	000e      	movs	r6, r1
	Set_MUXOUT_READBACK(false);
    1776:	2100      	movs	r1, #0
    1778:	4b1b      	ldr	r3, [pc, #108]	; (17e8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
    177a:	4798      	blx	r3
	register_value=0;
    177c:	2300      	movs	r3, #0
    177e:	83a3      	strh	r3, [r4, #28]
	while((register_value==0)|(register_value==0xffff)){
    1780:	8ba2      	ldrh	r2, [r4, #28]
    1782:	1e53      	subs	r3, r2, #1
    1784:	b29b      	uxth	r3, r3
    1786:	4919      	ldr	r1, [pc, #100]	; (17ec <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x7c>)
    1788:	428b      	cmp	r3, r1
    178a:	d924      	bls.n	17d6 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x66>
		spi_lmx->SetCS(false);
    178c:	2100      	movs	r1, #0
    178e:	68e0      	ldr	r0, [r4, #12]
    1790:	4f17      	ldr	r7, [pc, #92]	; (17f0 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x80>)
    1792:	47b8      	blx	r7
			private_index=index|0x80;
    1794:	2380      	movs	r3, #128	; 0x80
    1796:	425b      	negs	r3, r3
    1798:	4333      	orrs	r3, r6
    179a:	77a3      	strb	r3, [r4, #30]
			memset(read_bytes,0,3);
    179c:	2203      	movs	r2, #3
    179e:	2100      	movs	r1, #0
    17a0:	0025      	movs	r5, r4
    17a2:	3513      	adds	r5, #19
    17a4:	0028      	movs	r0, r5
    17a6:	4b13      	ldr	r3, [pc, #76]	; (17f4 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x84>)
    17a8:	4798      	blx	r3
			int_result=spi_lmx->Write(&private_index,1);
    17aa:	2201      	movs	r2, #1
    17ac:	0021      	movs	r1, r4
    17ae:	311e      	adds	r1, #30
    17b0:	68e0      	ldr	r0, [r4, #12]
    17b2:	4b11      	ldr	r3, [pc, #68]	; (17f8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x88>)
    17b4:	4798      	blx	r3
    17b6:	61a0      	str	r0, [r4, #24]
			int_result=spi_lmx->Read(read_bytes,2);
    17b8:	2202      	movs	r2, #2
    17ba:	0029      	movs	r1, r5
    17bc:	68e0      	ldr	r0, [r4, #12]
    17be:	4b0f      	ldr	r3, [pc, #60]	; (17fc <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x8c>)
    17c0:	4798      	blx	r3
    17c2:	61a0      	str	r0, [r4, #24]
			register_value=read_bytes[0]*256+read_bytes[1];
    17c4:	7ce3      	ldrb	r3, [r4, #19]
    17c6:	021b      	lsls	r3, r3, #8
    17c8:	7d22      	ldrb	r2, [r4, #20]
    17ca:	189b      	adds	r3, r3, r2
    17cc:	83a3      	strh	r3, [r4, #28]
			spi_lmx->SetCS(true);
    17ce:	2101      	movs	r1, #1
    17d0:	68e0      	ldr	r0, [r4, #12]
    17d2:	47b8      	blx	r7
	while((register_value==0)|(register_value==0xffff)){
    17d4:	e7d4      	b.n	1780 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x10>
	read_registers[index]=register_value;
    17d6:	0076      	lsls	r6, r6, #1
    17d8:	6863      	ldr	r3, [r4, #4]
    17da:	539a      	strh	r2, [r3, r6]
	Set_MUXOUT_READBACK(true);
    17dc:	2101      	movs	r1, #1
    17de:	0020      	movs	r0, r4
    17e0:	4b01      	ldr	r3, [pc, #4]	; (17e8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
    17e2:	4798      	blx	r3
	return register_value;
    17e4:	8ba0      	ldrh	r0, [r4, #28]
}
    17e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17e8:	00001741 	.word	0x00001741
    17ec:	0000fffd 	.word	0x0000fffd
    17f0:	00001bf5 	.word	0x00001bf5
    17f4:	0000bf99 	.word	0x0000bf99
    17f8:	00001bc5 	.word	0x00001bc5
    17fc:	00001bdd 	.word	0x00001bdd

00001800 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
    1800:	b510      	push	{r4, lr}
    1802:	0004      	movs	r4, r0
	if (mbr)
    1804:	2900      	cmp	r1, #0
    1806:	d10b      	bne.n	1820 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x20>
		channel_index=((write_registers[75])>>6)&0x1f;
    1808:	2396      	movs	r3, #150	; 0x96
    180a:	6882      	ldr	r2, [r0, #8]
    180c:	5ad2      	ldrh	r2, [r2, r3]
    180e:	1192      	asrs	r2, r2, #6
    1810:	3b77      	subs	r3, #119	; 0x77
    1812:	4013      	ands	r3, r2
    1814:	77c3      	strb	r3, [r0, #31]
	return channel_divider_values[channel_index];
    1816:	7fe3      	ldrb	r3, [r4, #31]
    1818:	009b      	lsls	r3, r3, #2
    181a:	4a05      	ldr	r2, [pc, #20]	; (1830 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x30>)
    181c:	5898      	ldr	r0, [r3, r2]
}
    181e:	bd10      	pop	{r4, pc}
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
    1820:	214b      	movs	r1, #75	; 0x4b
    1822:	4b04      	ldr	r3, [pc, #16]	; (1834 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x34>)
    1824:	4798      	blx	r3
    1826:	1183      	asrs	r3, r0, #6
    1828:	201f      	movs	r0, #31
    182a:	4018      	ands	r0, r3
    182c:	77e0      	strb	r0, [r4, #31]
    182e:	e7f2      	b.n	1816 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x16>
    1830:	00010d70 	.word	0x00010d70
    1834:	00001771 	.word	0x00001771

00001838 <_ZN15lmx2694_Handler9Is_LockedEv>:
bool lmx2694_Handler::Is_Locked(void){
    1838:	b570      	push	{r4, r5, r6, lr}
    183a:	b082      	sub	sp, #8
    183c:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    183e:	4668      	mov	r0, sp
    1840:	4b2a      	ldr	r3, [pc, #168]	; (18ec <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
    1842:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1844:	23c0      	movs	r3, #192	; 0xc0
    1846:	05db      	lsls	r3, r3, #23
    1848:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    184a:	4a29      	ldr	r2, [pc, #164]	; (18f0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
    184c:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    184e:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1850:	4053      	eors	r3, r2
    1852:	401c      	ands	r4, r3
    1854:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1856:	4668      	mov	r0, sp
    1858:	4b26      	ldr	r3, [pc, #152]	; (18f4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
    185a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    185c:	2380      	movs	r3, #128	; 0x80
    185e:	02db      	lsls	r3, r3, #11
    1860:	401c      	ands	r4, r3
    1862:	1e63      	subs	r3, r4, #1
    1864:	419c      	sbcs	r4, r3
    1866:	b2e4      	uxtb	r4, r4
	is_locked=gpio_get_pin_level(PA18);
    1868:	75ec      	strb	r4, [r5, #23]
	if (is_locked)
    186a:	2c00      	cmp	r4, #0
    186c:	d010      	beq.n	1890 <_ZN15lmx2694_Handler9Is_LockedEv+0x58>
	if (is_locked)
    186e:	7deb      	ldrb	r3, [r5, #23]
    1870:	2b00      	cmp	r3, #0
    1872:	d00a      	beq.n	188a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
		if (Get_OUT_MUX(2)>0)
    1874:	2102      	movs	r1, #2
    1876:	0028      	movs	r0, r5
    1878:	4b1f      	ldr	r3, [pc, #124]	; (18f8 <_ZN15lmx2694_Handler9Is_LockedEv+0xc0>)
    187a:	4798      	blx	r3
    187c:	2800      	cmp	r0, #0
    187e:	dd20      	ble.n	18c2 <_ZN15lmx2694_Handler9Is_LockedEv+0x8a>
			current_frequency=Calculate_Current_Frequency(false)/1;
    1880:	2100      	movs	r1, #0
    1882:	0028      	movs	r0, r5
    1884:	4b1d      	ldr	r3, [pc, #116]	; (18fc <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
    1886:	4798      	blx	r3
    1888:	6028      	str	r0, [r5, #0]
	return is_locked;
    188a:	7de8      	ldrb	r0, [r5, #23]
}
    188c:	b002      	add	sp, #8
    188e:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(10);
    1890:	200a      	movs	r0, #10
    1892:	4b1b      	ldr	r3, [pc, #108]	; (1900 <_ZN15lmx2694_Handler9Is_LockedEv+0xc8>)
    1894:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1896:	a801      	add	r0, sp, #4
    1898:	4b14      	ldr	r3, [pc, #80]	; (18ec <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
    189a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    189c:	23c0      	movs	r3, #192	; 0xc0
    189e:	05db      	lsls	r3, r3, #23
    18a0:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    18a2:	4a13      	ldr	r2, [pc, #76]	; (18f0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
    18a4:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    18a6:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    18a8:	4053      	eors	r3, r2
    18aa:	401c      	ands	r4, r3
    18ac:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    18ae:	a801      	add	r0, sp, #4
    18b0:	4b10      	ldr	r3, [pc, #64]	; (18f4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
    18b2:	4798      	blx	r3
    18b4:	2380      	movs	r3, #128	; 0x80
    18b6:	02db      	lsls	r3, r3, #11
    18b8:	401c      	ands	r4, r3
    18ba:	1e63      	subs	r3, r4, #1
    18bc:	419c      	sbcs	r4, r3
		is_locked=gpio_get_pin_level(PA18);
    18be:	75ec      	strb	r4, [r5, #23]
    18c0:	e7d5      	b.n	186e <_ZN15lmx2694_Handler9Is_LockedEv+0x36>
			channel_divider=Get_Channel_Divider_Value(false);
    18c2:	2100      	movs	r1, #0
    18c4:	0028      	movs	r0, r5
    18c6:	4b0f      	ldr	r3, [pc, #60]	; (1904 <_ZN15lmx2694_Handler9Is_LockedEv+0xcc>)
    18c8:	4798      	blx	r3
    18ca:	2421      	movs	r4, #33	; 0x21
    18cc:	5528      	strb	r0, [r5, r4]
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
    18ce:	2100      	movs	r1, #0
    18d0:	0028      	movs	r0, r5
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
    18d4:	4798      	blx	r3
    18d6:	1c06      	adds	r6, r0, #0
    18d8:	5d28      	ldrb	r0, [r5, r4]
    18da:	4b0b      	ldr	r3, [pc, #44]	; (1908 <_ZN15lmx2694_Handler9Is_LockedEv+0xd0>)
    18dc:	4798      	blx	r3
    18de:	1c01      	adds	r1, r0, #0
    18e0:	1c30      	adds	r0, r6, #0
    18e2:	4b0a      	ldr	r3, [pc, #40]	; (190c <_ZN15lmx2694_Handler9Is_LockedEv+0xd4>)
    18e4:	4798      	blx	r3
    18e6:	6028      	str	r0, [r5, #0]
    18e8:	e7cf      	b.n	188a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
    18ea:	46c0      	nop			; (mov r8, r8)
    18ec:	00002319 	.word	0x00002319
    18f0:	41004400 	.word	0x41004400
    18f4:	00002327 	.word	0x00002327
    18f8:	000012ab 	.word	0x000012ab
    18fc:	00001311 	.word	0x00001311
    1900:	000023d1 	.word	0x000023d1
    1904:	00001801 	.word	0x00001801
    1908:	00009fe9 	.word	0x00009fe9
    190c:	00009651 	.word	0x00009651

00001910 <_ZN15lmx2694_Handler4InitEv>:
bool lmx2694_Handler::Init(){
    1910:	b570      	push	{r4, r5, r6, lr}
    1912:	0004      	movs	r4, r0
	spi_lmx=&staticSPI;
    1914:	4810      	ldr	r0, [pc, #64]	; (1958 <_ZN15lmx2694_Handler4InitEv+0x48>)
    1916:	60e0      	str	r0, [r4, #12]
	spi_lmx->Init();
    1918:	4b10      	ldr	r3, [pc, #64]	; (195c <_ZN15lmx2694_Handler4InitEv+0x4c>)
    191a:	4798      	blx	r3
	spi_lmx->SetCS(true);
    191c:	2101      	movs	r1, #1
    191e:	68e0      	ldr	r0, [r4, #12]
    1920:	4b0f      	ldr	r3, [pc, #60]	; (1960 <_ZN15lmx2694_Handler4InitEv+0x50>)
    1922:	4798      	blx	r3
	Power_Down();
    1924:	0020      	movs	r0, r4
    1926:	4b0f      	ldr	r3, [pc, #60]	; (1964 <_ZN15lmx2694_Handler4InitEv+0x54>)
    1928:	4798      	blx	r3
	delay_ms(10);
    192a:	200a      	movs	r0, #10
    192c:	4d0e      	ldr	r5, [pc, #56]	; (1968 <_ZN15lmx2694_Handler4InitEv+0x58>)
    192e:	47a8      	blx	r5
	Program_Reset();
    1930:	0020      	movs	r0, r4
    1932:	4b0e      	ldr	r3, [pc, #56]	; (196c <_ZN15lmx2694_Handler4InitEv+0x5c>)
    1934:	4798      	blx	r3
	delay_ms(100);
    1936:	2064      	movs	r0, #100	; 0x64
    1938:	47a8      	blx	r5
	Initiate_Registers();
    193a:	0020      	movs	r0, r4
    193c:	4b0c      	ldr	r3, [pc, #48]	; (1970 <_ZN15lmx2694_Handler4InitEv+0x60>)
    193e:	4798      	blx	r3
	delay_ms(10);
    1940:	200a      	movs	r0, #10
    1942:	47a8      	blx	r5
	Toggle_FCAL_EN();
    1944:	0020      	movs	r0, r4
    1946:	4b0b      	ldr	r3, [pc, #44]	; (1974 <_ZN15lmx2694_Handler4InitEv+0x64>)
    1948:	4798      	blx	r3
	delay_ms(100);
    194a:	2064      	movs	r0, #100	; 0x64
    194c:	47a8      	blx	r5
	return Is_Locked();
    194e:	0020      	movs	r0, r4
    1950:	4b09      	ldr	r3, [pc, #36]	; (1978 <_ZN15lmx2694_Handler4InitEv+0x68>)
    1952:	4798      	blx	r3
}
    1954:	bd70      	pop	{r4, r5, r6, pc}
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	20000cac 	.word	0x20000cac
    195c:	00001b9d 	.word	0x00001b9d
    1960:	00001bf5 	.word	0x00001bf5
    1964:	000014c5 	.word	0x000014c5
    1968:	000023d1 	.word	0x000023d1
    196c:	00001509 	.word	0x00001509
    1970:	000016f5 	.word	0x000016f5
    1974:	000016d1 	.word	0x000016d1
    1978:	00001839 	.word	0x00001839

0000197c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
    197c:	b570      	push	{r4, r5, r6, lr}
    197e:	0004      	movs	r4, r0
	if (target_frequency>MIN_VCO_FREQUENCY)
    1980:	6b45      	ldr	r5, [r0, #52]	; 0x34
    1982:	490b      	ldr	r1, [pc, #44]	; (19b0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>)
    1984:	1c28      	adds	r0, r5, #0
    1986:	4b0b      	ldr	r3, [pc, #44]	; (19b4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x38>)
    1988:	4798      	blx	r3
    198a:	2800      	cmp	r0, #0
    198c:	d005      	beq.n	199a <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x1e>
		vco_frequency=target_frequency;
    198e:	63a5      	str	r5, [r4, #56]	; 0x38
	Program_PFD_DLY_SEL(vco_frequency);
    1990:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1992:	0020      	movs	r0, r4
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x3c>)
    1996:	4798      	blx	r3
}
    1998:	bd70      	pop	{r4, r5, r6, pc}
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
    199a:	2100      	movs	r1, #0
    199c:	0020      	movs	r0, r4
    199e:	4b07      	ldr	r3, [pc, #28]	; (19bc <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x40>)
    19a0:	4798      	blx	r3
    19a2:	4b07      	ldr	r3, [pc, #28]	; (19c0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x44>)
    19a4:	4798      	blx	r3
    19a6:	1c29      	adds	r1, r5, #0
    19a8:	4b06      	ldr	r3, [pc, #24]	; (19c4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x48>)
    19aa:	4798      	blx	r3
    19ac:	63a0      	str	r0, [r4, #56]	; 0x38
    19ae:	e7ef      	b.n	1990 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x14>
    19b0:	45ebf000 	.word	0x45ebf000
    19b4:	000090c5 	.word	0x000090c5
    19b8:	00001601 	.word	0x00001601
    19bc:	00001801 	.word	0x00001801
    19c0:	00009fe9 	.word	0x00009fe9
    19c4:	00009a31 	.word	0x00009a31

000019c8 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
void  lmx2694_Handler::Write_Division_Registers(void){
    19c8:	b570      	push	{r4, r5, r6, lr}
    19ca:	0004      	movs	r4, r0
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
    19cc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    19ce:	212b      	movs	r1, #43	; 0x2b
    19d0:	4d0c      	ldr	r5, [pc, #48]	; (1a04 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x3c>)
    19d2:	47a8      	blx	r5
	Write_Single_Register(42,(uint16_t)(numerator>>16));
    19d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    19d6:	212a      	movs	r1, #42	; 0x2a
    19d8:	0020      	movs	r0, r4
    19da:	47a8      	blx	r5
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
    19dc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    19de:	2127      	movs	r1, #39	; 0x27
    19e0:	0020      	movs	r0, r4
    19e2:	47a8      	blx	r5
	Write_Single_Register(38,(uint16_t)(denominator>>16));
    19e4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    19e6:	2126      	movs	r1, #38	; 0x26
    19e8:	0020      	movs	r0, r4
    19ea:	47a8      	blx	r5
	Program_PFD_DLY_SEL();
    19ec:	0020      	movs	r0, r4
    19ee:	4b06      	ldr	r3, [pc, #24]	; (1a08 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x40>)
    19f0:	4798      	blx	r3
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
    19f2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    19f4:	2124      	movs	r1, #36	; 0x24
    19f6:	0020      	movs	r0, r4
    19f8:	47a8      	blx	r5
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
    19fa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    19fc:	2122      	movs	r1, #34	; 0x22
    19fe:	0020      	movs	r0, r4
    1a00:	47a8      	blx	r5
}
    1a02:	bd70      	pop	{r4, r5, r6, pc}
    1a04:	000015a5 	.word	0x000015a5
    1a08:	0000197d 	.word	0x0000197d

00001a0c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
float lmx2694_Handler::Set_Target_Frequency(float tf){
    1a0c:	b570      	push	{r4, r5, r6, lr}
    1a0e:	0004      	movs	r4, r0
    1a10:	1c0d      	adds	r5, r1, #0
	if (tf>MAX_VCO_FREQUENCY)
    1a12:	4940      	ldr	r1, [pc, #256]	; (1b14 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
    1a14:	1c28      	adds	r0, r5, #0
    1a16:	4b40      	ldr	r3, [pc, #256]	; (1b18 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1a18:	4798      	blx	r3
    1a1a:	2800      	cmp	r0, #0
    1a1c:	d138      	bne.n	1a90 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x84>
		if (tf>MIN_PLL_FREQUENCY)
    1a1e:	493f      	ldr	r1, [pc, #252]	; (1b1c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x110>)
    1a20:	1c28      	adds	r0, r5, #0
    1a22:	4b3d      	ldr	r3, [pc, #244]	; (1b18 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1a24:	4798      	blx	r3
    1a26:	2800      	cmp	r0, #0
    1a28:	d034      	beq.n	1a94 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
			target_frequency=tf;
    1a2a:	6365      	str	r5, [r4, #52]	; 0x34
			if (tf>MIN_VCO_FREQUENCY)
    1a2c:	493c      	ldr	r1, [pc, #240]	; (1b20 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    1a2e:	1c28      	adds	r0, r5, #0
    1a30:	4b39      	ldr	r3, [pc, #228]	; (1b18 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1a32:	4798      	blx	r3
    1a34:	2800      	cmp	r0, #0
    1a36:	d03a      	beq.n	1aae <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xa2>
				if (current_frequency>MIN_VCO_FREQUENCY)
    1a38:	4939      	ldr	r1, [pc, #228]	; (1b20 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    1a3a:	6820      	ldr	r0, [r4, #0]
    1a3c:	4b36      	ldr	r3, [pc, #216]	; (1b18 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1a3e:	4798      	blx	r3
    1a40:	2800      	cmp	r0, #0
    1a42:	d029      	beq.n	1a98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x8c>
				channel_divider=1;
    1a44:	2201      	movs	r2, #1
    1a46:	2321      	movs	r3, #33	; 0x21
    1a48:	54e2      	strb	r2, [r4, r3]
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
    1a4a:	2321      	movs	r3, #33	; 0x21
    1a4c:	5ce0      	ldrb	r0, [r4, r3]
    1a4e:	4b35      	ldr	r3, [pc, #212]	; (1b24 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x118>)
    1a50:	4798      	blx	r3
    1a52:	1c29      	adds	r1, r5, #0
    1a54:	4b34      	ldr	r3, [pc, #208]	; (1b28 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x11c>)
    1a56:	4798      	blx	r3
    1a58:	4934      	ldr	r1, [pc, #208]	; (1b2c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>)
    1a5a:	4b35      	ldr	r3, [pc, #212]	; (1b30 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x124>)
    1a5c:	4798      	blx	r3
    1a5e:	1c05      	adds	r5, r0, #0
    1a60:	63e0      	str	r0, [r4, #60]	; 0x3c
  { return __builtin_floorf(__x); }
    1a62:	4b34      	ldr	r3, [pc, #208]	; (1b34 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x128>)
    1a64:	4798      	blx	r3
			N_divider=(uint32_t)(floor(divider));
    1a66:	4b34      	ldr	r3, [pc, #208]	; (1b38 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x12c>)
    1a68:	4798      	blx	r3
    1a6a:	6260      	str	r0, [r4, #36]	; 0x24
			fraction=divider-N_divider;
    1a6c:	4b33      	ldr	r3, [pc, #204]	; (1b3c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x130>)
    1a6e:	4798      	blx	r3
    1a70:	1c01      	adds	r1, r0, #0
    1a72:	1c28      	adds	r0, r5, #0
    1a74:	4b32      	ldr	r3, [pc, #200]	; (1b40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x134>)
    1a76:	4798      	blx	r3
    1a78:	1c01      	adds	r1, r0, #0
    1a7a:	6420      	str	r0, [r4, #64]	; 0x40
			Calculate_Fraction(fraction);
    1a7c:	0020      	movs	r0, r4
    1a7e:	4b31      	ldr	r3, [pc, #196]	; (1b44 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x138>)
    1a80:	4798      	blx	r3
			Write_Division_Registers();
    1a82:	0020      	movs	r0, r4
    1a84:	4b30      	ldr	r3, [pc, #192]	; (1b48 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
    1a86:	4798      	blx	r3
			Toggle_FCAL_EN();
    1a88:	0020      	movs	r0, r4
    1a8a:	4b30      	ldr	r3, [pc, #192]	; (1b4c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x140>)
    1a8c:	4798      	blx	r3
    1a8e:	e001      	b.n	1a94 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
		target_frequency=MAX_VCO_FREQUENCY;
    1a90:	4b20      	ldr	r3, [pc, #128]	; (1b14 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
    1a92:	6363      	str	r3, [r4, #52]	; 0x34
	return fraction;
    1a94:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
    1a96:	bd70      	pop	{r4, r5, r6, pc}
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
    1a98:	235c      	movs	r3, #92	; 0x5c
    1a9a:	68a2      	ldr	r2, [r4, #8]
    1a9c:	5ad2      	ldrh	r2, [r2, r3]
    1a9e:	2301      	movs	r3, #1
    1aa0:	431a      	orrs	r2, r3
    1aa2:	b292      	uxth	r2, r2
    1aa4:	212e      	movs	r1, #46	; 0x2e
    1aa6:	0020      	movs	r0, r4
    1aa8:	4b29      	ldr	r3, [pc, #164]	; (1b50 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1aaa:	4798      	blx	r3
    1aac:	e7ca      	b.n	1a44 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x38>
				if (current_frequency<MIN_VCO_FREQUENCY)
    1aae:	491c      	ldr	r1, [pc, #112]	; (1b20 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    1ab0:	6820      	ldr	r0, [r4, #0]
    1ab2:	4b28      	ldr	r3, [pc, #160]	; (1b54 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x148>)
    1ab4:	4798      	blx	r3
    1ab6:	2800      	cmp	r0, #0
    1ab8:	d01a      	beq.n	1af0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xe4>
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
    1aba:	2396      	movs	r3, #150	; 0x96
    1abc:	68a2      	ldr	r2, [r4, #8]
    1abe:	5ad2      	ldrh	r2, [r2, r3]
    1ac0:	4b25      	ldr	r3, [pc, #148]	; (1b58 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x14c>)
    1ac2:	401a      	ands	r2, r3
    1ac4:	83a2      	strh	r2, [r4, #28]
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
    1ac6:	b216      	sxth	r6, r2
    1ac8:	0020      	movs	r0, r4
    1aca:	4b24      	ldr	r3, [pc, #144]	; (1b5c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x150>)
    1acc:	4798      	blx	r3
    1ace:	0182      	lsls	r2, r0, #6
    1ad0:	4332      	orrs	r2, r6
    1ad2:	b292      	uxth	r2, r2
    1ad4:	214b      	movs	r1, #75	; 0x4b
    1ad6:	0020      	movs	r0, r4
    1ad8:	4b1d      	ldr	r3, [pc, #116]	; (1b50 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1ada:	4798      	blx	r3
				if (channel_divider>2)
    1adc:	2321      	movs	r3, #33	; 0x21
    1ade:	5ce3      	ldrb	r3, [r4, r3]
    1ae0:	2b02      	cmp	r3, #2
    1ae2:	dd0f      	ble.n	1b04 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xf8>
					Write_Single_Register(31,0x43ec);
    1ae4:	4a1e      	ldr	r2, [pc, #120]	; (1b60 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x154>)
    1ae6:	211f      	movs	r1, #31
    1ae8:	0020      	movs	r0, r4
    1aea:	4b19      	ldr	r3, [pc, #100]	; (1b50 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1aec:	4798      	blx	r3
    1aee:	e7ac      	b.n	1a4a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
    1af0:	235c      	movs	r3, #92	; 0x5c
    1af2:	68a2      	ldr	r2, [r4, #8]
    1af4:	5ad2      	ldrh	r2, [r2, r3]
    1af6:	3b59      	subs	r3, #89	; 0x59
    1af8:	439a      	bics	r2, r3
    1afa:	212e      	movs	r1, #46	; 0x2e
    1afc:	0020      	movs	r0, r4
    1afe:	4b14      	ldr	r3, [pc, #80]	; (1b50 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1b00:	4798      	blx	r3
    1b02:	e7da      	b.n	1aba <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xae>
					Write_Single_Register(31,0x3ec);
    1b04:	22fb      	movs	r2, #251	; 0xfb
    1b06:	0092      	lsls	r2, r2, #2
    1b08:	211f      	movs	r1, #31
    1b0a:	0020      	movs	r0, r4
    1b0c:	4b10      	ldr	r3, [pc, #64]	; (1b50 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1b0e:	4798      	blx	r3
    1b10:	e79b      	b.n	1a4a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	466bf000 	.word	0x466bf000
    1b18:	000090c5 	.word	0x000090c5
    1b1c:	43c80000 	.word	0x43c80000
    1b20:	45ebf000 	.word	0x45ebf000
    1b24:	00009fe9 	.word	0x00009fe9
    1b28:	00009a31 	.word	0x00009a31
    1b2c:	43480000 	.word	0x43480000
    1b30:	00009651 	.word	0x00009651
    1b34:	0000715d 	.word	0x0000715d
    1b38:	00009141 	.word	0x00009141
    1b3c:	0000a089 	.word	0x0000a089
    1b40:	00009c71 	.word	0x00009c71
    1b44:	00001441 	.word	0x00001441
    1b48:	000019c9 	.word	0x000019c9
    1b4c:	000016d1 	.word	0x000016d1
    1b50:	000015a5 	.word	0x000015a5
    1b54:	0000909d 	.word	0x0000909d
    1b58:	fffff83f 	.word	0xfffff83f
    1b5c:	000013c1 	.word	0x000013c1
    1b60:	000043ec 	.word	0x000043ec

00001b64 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:
    1b64:	b510      	push	{r4, lr}
    1b66:	4902      	ldr	r1, [pc, #8]	; (1b70 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0xc>)
    1b68:	2001      	movs	r0, #1
    1b6a:	4b02      	ldr	r3, [pc, #8]	; (1b74 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x10>)
    1b6c:	4798      	blx	r3
    1b6e:	bd10      	pop	{r4, pc}
    1b70:	0000ffff 	.word	0x0000ffff
    1b74:	0000122d 	.word	0x0000122d

00001b78 <_ZN13SPI_Syn_ClassC1Ev>:


// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
    1b78:	4b01      	ldr	r3, [pc, #4]	; (1b80 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
    1b7a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    1b7c:	4770      	bx	lr
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	20000e8c 	.word	0x20000e8c

00001b84 <_ZN13SPI_Syn_ClassD1Ev>:


// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
    1b84:	4770      	bx	lr
	...

00001b88 <_ZN13SPI_Syn_Class6EnableEv>:
	
}



uint8_t SPI_Syn_Class::Enable(){
    1b88:	b510      	push	{r4, lr}
	
	spi_m_sync_enable(&SPI_LMX);
    1b8a:	4802      	ldr	r0, [pc, #8]	; (1b94 <_ZN13SPI_Syn_Class6EnableEv+0xc>)
    1b8c:	4b02      	ldr	r3, [pc, #8]	; (1b98 <_ZN13SPI_Syn_Class6EnableEv+0x10>)
    1b8e:	4798      	blx	r3
	return 0;
}
    1b90:	2000      	movs	r0, #0
    1b92:	bd10      	pop	{r4, pc}
    1b94:	200014a8 	.word	0x200014a8
    1b98:	00002609 	.word	0x00002609

00001b9c <_ZN13SPI_Syn_Class4InitEv>:
void SPI_Syn_Class::Init(){
    1b9c:	b510      	push	{r4, lr}
    1b9e:	0004      	movs	r4, r0
		spi_m_sync_get_io_descriptor(&SPI_LMX, &io);
    1ba0:	0001      	movs	r1, r0
    1ba2:	310c      	adds	r1, #12
    1ba4:	4804      	ldr	r0, [pc, #16]	; (1bb8 <_ZN13SPI_Syn_Class4InitEv+0x1c>)
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <_ZN13SPI_Syn_Class4InitEv+0x20>)
    1ba8:	4798      	blx	r3
	Enable();
    1baa:	0020      	movs	r0, r4
    1bac:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <_ZN13SPI_Syn_Class4InitEv+0x24>)
    1bae:	4798      	blx	r3
	ready=true;
    1bb0:	2301      	movs	r3, #1
    1bb2:	7023      	strb	r3, [r4, #0]
}
    1bb4:	bd10      	pop	{r4, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	200014a8 	.word	0x200014a8
    1bbc:	000026f1 	.word	0x000026f1
    1bc0:	00001b89 	.word	0x00001b89

00001bc4 <_ZN13SPI_Syn_Class5WriteEPKhh>:

uint8_t  SPI_Syn_Class::Write(const uint8_t * p, uint8_t n){
    1bc4:	b510      	push	{r4, lr}
    1bc6:	0014      	movs	r4, r2
	ready=false;
    1bc8:	2300      	movs	r3, #0
    1bca:	7003      	strb	r3, [r0, #0]
	io_write(io, p, (uint16_t)n);
    1bcc:	68c0      	ldr	r0, [r0, #12]
    1bce:	b292      	uxth	r2, r2
    1bd0:	4b01      	ldr	r3, [pc, #4]	; (1bd8 <_ZN13SPI_Syn_Class5WriteEPKhh+0x14>)
    1bd2:	4798      	blx	r3

	return n;
}
    1bd4:	0020      	movs	r0, r4
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	00002541 	.word	0x00002541

00001bdc <_ZN13SPI_Syn_Class4ReadEPhh>:
uint8_t  SPI_Syn_Class::Read(uint8_t * p, uint8_t n){
    1bdc:	b510      	push	{r4, lr}
    1bde:	0014      	movs	r4, r2
	ready=false;
    1be0:	2300      	movs	r3, #0
    1be2:	7003      	strb	r3, [r0, #0]
		io_read(io, p, (uint16_t)n);
    1be4:	68c0      	ldr	r0, [r0, #12]
    1be6:	b292      	uxth	r2, r2
    1be8:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <_ZN13SPI_Syn_Class4ReadEPhh+0x14>)
    1bea:	4798      	blx	r3

	
	return n;
}
    1bec:	0020      	movs	r0, r4
    1bee:	bd10      	pop	{r4, pc}
    1bf0:	00002579 	.word	0x00002579

00001bf4 <_ZN13SPI_Syn_Class5SetCSEb>:
	if (level) {
    1bf4:	2900      	cmp	r1, #0
    1bf6:	d105      	bne.n	1c04 <_ZN13SPI_Syn_Class5SetCSEb+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bf8:	2280      	movs	r2, #128	; 0x80
    1bfa:	0312      	lsls	r2, r2, #12
    1bfc:	23c0      	movs	r3, #192	; 0xc0
    1bfe:	05db      	lsls	r3, r3, #23
    1c00:	615a      	str	r2, [r3, #20]
	spi_m_sync_disable(&SPI_LMX);
	
}
void SPI_Syn_Class::SetCS(bool st){
	gpio_set_pin_level(CS_LMX,st);
}
    1c02:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c04:	2280      	movs	r2, #128	; 0x80
    1c06:	0312      	lsls	r2, r2, #12
    1c08:	23c0      	movs	r3, #192	; 0xc0
    1c0a:	05db      	lsls	r3, r3, #23
    1c0c:	619a      	str	r2, [r3, #24]
    1c0e:	e7f8      	b.n	1c02 <_ZN13SPI_Syn_Class5SetCSEb+0xe>

00001c10 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1c10:	b510      	push	{r4, lr}
	system_init();
    1c12:	4b02      	ldr	r3, [pc, #8]	; (1c1c <atmel_start_init+0xc>)
    1c14:	4798      	blx	r3
	usb_init();
    1c16:	4b02      	ldr	r3, [pc, #8]	; (1c20 <atmel_start_init+0x10>)
    1c18:	4798      	blx	r3
}
    1c1a:	bd10      	pop	{r4, pc}
    1c1c:	00002205 	.word	0x00002205
    1c20:	00005449 	.word	0x00005449

00001c24 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
    1c24:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1c26:	4a08      	ldr	r2, [pc, #32]	; (1c48 <TIMER_ZCD_init+0x24>)
    1c28:	6a11      	ldr	r1, [r2, #32]
    1c2a:	2380      	movs	r3, #128	; 0x80
    1c2c:	011b      	lsls	r3, r3, #4
    1c2e:	430b      	orrs	r3, r1
    1c30:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1c32:	4a06      	ldr	r2, [pc, #24]	; (1c4c <TIMER_ZCD_init+0x28>)
    1c34:	4b06      	ldr	r3, [pc, #24]	; (1c50 <TIMER_ZCD_init+0x2c>)
    1c36:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <TIMER_ZCD_init+0x30>)
    1c3a:	4798      	blx	r3
    1c3c:	0002      	movs	r2, r0
    1c3e:	4906      	ldr	r1, [pc, #24]	; (1c58 <TIMER_ZCD_init+0x34>)
    1c40:	4806      	ldr	r0, [pc, #24]	; (1c5c <TIMER_ZCD_init+0x38>)
    1c42:	4b07      	ldr	r3, [pc, #28]	; (1c60 <TIMER_ZCD_init+0x3c>)
    1c44:	4798      	blx	r3
}
    1c46:	bd10      	pop	{r4, pc}
    1c48:	40000400 	.word	0x40000400
    1c4c:	0000401b 	.word	0x0000401b
    1c50:	40000c00 	.word	0x40000c00
    1c54:	00004037 	.word	0x00004037
    1c58:	42002c00 	.word	0x42002c00
    1c5c:	2000148c 	.word	0x2000148c
    1c60:	000027dd 	.word	0x000027dd

00001c64 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1c64:	b510      	push	{r4, lr}
    1c66:	4a08      	ldr	r2, [pc, #32]	; (1c88 <TIMER_USB_init+0x24>)
    1c68:	6a11      	ldr	r1, [r2, #32]
    1c6a:	2380      	movs	r3, #128	; 0x80
    1c6c:	015b      	lsls	r3, r3, #5
    1c6e:	430b      	orrs	r3, r1
    1c70:	6213      	str	r3, [r2, #32]
    1c72:	4a06      	ldr	r2, [pc, #24]	; (1c8c <TIMER_USB_init+0x28>)
    1c74:	4b06      	ldr	r3, [pc, #24]	; (1c90 <TIMER_USB_init+0x2c>)
    1c76:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
    1c78:	4b06      	ldr	r3, [pc, #24]	; (1c94 <TIMER_USB_init+0x30>)
    1c7a:	4798      	blx	r3
    1c7c:	0002      	movs	r2, r0
    1c7e:	4906      	ldr	r1, [pc, #24]	; (1c98 <TIMER_USB_init+0x34>)
    1c80:	4806      	ldr	r0, [pc, #24]	; (1c9c <TIMER_USB_init+0x38>)
    1c82:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <TIMER_USB_init+0x3c>)
    1c84:	4798      	blx	r3
}
    1c86:	bd10      	pop	{r4, pc}
    1c88:	40000400 	.word	0x40000400
    1c8c:	0000431c 	.word	0x0000431c
    1c90:	40000c00 	.word	0x40000c00
    1c94:	00004037 	.word	0x00004037
    1c98:	42003000 	.word	0x42003000
    1c9c:	2000154c 	.word	0x2000154c
    1ca0:	000027dd 	.word	0x000027dd

00001ca4 <EXTERNAL_IRQ_0_init>:
{
    1ca4:	b510      	push	{r4, lr}
    1ca6:	4a0f      	ldr	r2, [pc, #60]	; (1ce4 <EXTERNAL_IRQ_0_init+0x40>)
    1ca8:	4b0f      	ldr	r3, [pc, #60]	; (1ce8 <EXTERNAL_IRQ_0_init+0x44>)
    1caa:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1cac:	3a05      	subs	r2, #5
    1cae:	23c0      	movs	r3, #192	; 0xc0
    1cb0:	05db      	lsls	r3, r3, #23
    1cb2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cb4:	4b0d      	ldr	r3, [pc, #52]	; (1cec <EXTERNAL_IRQ_0_init+0x48>)
    1cb6:	4a0e      	ldr	r2, [pc, #56]	; (1cf0 <EXTERNAL_IRQ_0_init+0x4c>)
    1cb8:	629a      	str	r2, [r3, #40]	; 0x28
    1cba:	4a0e      	ldr	r2, [pc, #56]	; (1cf4 <EXTERNAL_IRQ_0_init+0x50>)
    1cbc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1cbe:	214e      	movs	r1, #78	; 0x4e
    1cc0:	5c5a      	ldrb	r2, [r3, r1]
    1cc2:	2004      	movs	r0, #4
    1cc4:	4382      	bics	r2, r0
    1cc6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cc8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cca:	3803      	subs	r0, #3
    1ccc:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1cce:	4302      	orrs	r2, r0
    1cd0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cd2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1cd4:	3917      	subs	r1, #23
    1cd6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1cd8:	200f      	movs	r0, #15
    1cda:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1cdc:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    1cde:	4b06      	ldr	r3, [pc, #24]	; (1cf8 <EXTERNAL_IRQ_0_init+0x54>)
    1ce0:	4798      	blx	r3
}
    1ce2:	bd10      	pop	{r4, pc}
    1ce4:	00004005 	.word	0x00004005
    1ce8:	40000c00 	.word	0x40000c00
    1cec:	41004400 	.word	0x41004400
    1cf0:	40024000 	.word	0x40024000
    1cf4:	c0020000 	.word	0xc0020000
    1cf8:	00002435 	.word	0x00002435

00001cfc <SPI_ADF_PORT_init>:
{
    1cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfe:	46c6      	mov	lr, r8
    1d00:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d02:	22c0      	movs	r2, #192	; 0xc0
    1d04:	05d2      	lsls	r2, r2, #23
    1d06:	2310      	movs	r3, #16
    1d08:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d0a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d0c:	4b25      	ldr	r3, [pc, #148]	; (1da4 <SPI_ADF_PORT_init+0xa8>)
    1d0e:	4926      	ldr	r1, [pc, #152]	; (1da8 <SPI_ADF_PORT_init+0xac>)
    1d10:	6299      	str	r1, [r3, #40]	; 0x28
    1d12:	21c0      	movs	r1, #192	; 0xc0
    1d14:	0609      	lsls	r1, r1, #24
    1d16:	468c      	mov	ip, r1
    1d18:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d1a:	2044      	movs	r0, #68	; 0x44
    1d1c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d1e:	2701      	movs	r7, #1
    1d20:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d22:	2601      	movs	r6, #1
    1d24:	4331      	orrs	r1, r6
    1d26:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d28:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d2a:	2132      	movs	r1, #50	; 0x32
    1d2c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1d2e:	250f      	movs	r5, #15
    1d30:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1d32:	2403      	movs	r4, #3
    1d34:	46a0      	mov	r8, r4
    1d36:	4644      	mov	r4, r8
    1d38:	4320      	orrs	r0, r4
    1d3a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d3c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d3e:	2020      	movs	r0, #32
    1d40:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d42:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d44:	4819      	ldr	r0, [pc, #100]	; (1dac <SPI_ADF_PORT_init+0xb0>)
    1d46:	6298      	str	r0, [r3, #40]	; 0x28
    1d48:	4660      	mov	r0, ip
    1d4a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d4c:	2045      	movs	r0, #69	; 0x45
    1d4e:	4684      	mov	ip, r0
    1d50:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d52:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d54:	4330      	orrs	r0, r6
    1d56:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d58:	4664      	mov	r4, ip
    1d5a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d5c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1d5e:	3c36      	subs	r4, #54	; 0x36
    1d60:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
    1d62:	2430      	movs	r4, #48	; 0x30
    1d64:	46a4      	mov	ip, r4
    1d66:	4664      	mov	r4, ip
    1d68:	4320      	orrs	r0, r4
    1d6a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d6c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d6e:	310e      	adds	r1, #14
    1d70:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d72:	4a0f      	ldr	r2, [pc, #60]	; (1db0 <SPI_ADF_PORT_init+0xb4>)
    1d74:	629a      	str	r2, [r3, #40]	; 0x28
    1d76:	4a0f      	ldr	r2, [pc, #60]	; (1db4 <SPI_ADF_PORT_init+0xb8>)
    1d78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d7a:	2246      	movs	r2, #70	; 0x46
    1d7c:	5c99      	ldrb	r1, [r3, r2]
    1d7e:	2004      	movs	r0, #4
    1d80:	4381      	bics	r1, r0
    1d82:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d84:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d86:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d88:	4331      	orrs	r1, r6
    1d8a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d8c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d8e:	2133      	movs	r1, #51	; 0x33
    1d90:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1d92:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1d94:	4640      	mov	r0, r8
    1d96:	4302      	orrs	r2, r0
    1d98:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d9a:	545a      	strb	r2, [r3, r1]
}
    1d9c:	bc04      	pop	{r2}
    1d9e:	4690      	mov	r8, r2
    1da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	41004400 	.word	0x41004400
    1da8:	40000010 	.word	0x40000010
    1dac:	40000020 	.word	0x40000020
    1db0:	40020040 	.word	0x40020040
    1db4:	c0020000 	.word	0xc0020000

00001db8 <SPI_ADF_CLOCK_init>:
    1db8:	4a04      	ldr	r2, [pc, #16]	; (1dcc <SPI_ADF_CLOCK_init+0x14>)
    1dba:	6a13      	ldr	r3, [r2, #32]
    1dbc:	2104      	movs	r1, #4
    1dbe:	430b      	orrs	r3, r1
    1dc0:	6213      	str	r3, [r2, #32]
    1dc2:	4a03      	ldr	r2, [pc, #12]	; (1dd0 <SPI_ADF_CLOCK_init+0x18>)
    1dc4:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <SPI_ADF_CLOCK_init+0x1c>)
    1dc6:	805a      	strh	r2, [r3, #2]
}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	40000400 	.word	0x40000400
    1dd0:	00004014 	.word	0x00004014
    1dd4:	40000c00 	.word	0x40000c00

00001dd8 <SPI_ADF_init>:
{
    1dd8:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
    1dda:	4b04      	ldr	r3, [pc, #16]	; (1dec <SPI_ADF_init+0x14>)
    1ddc:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    1dde:	4904      	ldr	r1, [pc, #16]	; (1df0 <SPI_ADF_init+0x18>)
    1de0:	4804      	ldr	r0, [pc, #16]	; (1df4 <SPI_ADF_init+0x1c>)
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <SPI_ADF_init+0x20>)
    1de4:	4798      	blx	r3
	SPI_ADF_PORT_init();
    1de6:	4b05      	ldr	r3, [pc, #20]	; (1dfc <SPI_ADF_init+0x24>)
    1de8:	4798      	blx	r3
}
    1dea:	bd10      	pop	{r4, pc}
    1dec:	00001db9 	.word	0x00001db9
    1df0:	42000800 	.word	0x42000800
    1df4:	2000151c 	.word	0x2000151c
    1df8:	000025b1 	.word	0x000025b1
    1dfc:	00001cfd 	.word	0x00001cfd

00001e00 <SPI_LMX_PORT_init>:
{
    1e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e02:	46c6      	mov	lr, r8
    1e04:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e06:	22c0      	movs	r2, #192	; 0xc0
    1e08:	05d2      	lsls	r2, r2, #23
    1e0a:	2380      	movs	r3, #128	; 0x80
    1e0c:	025b      	lsls	r3, r3, #9
    1e0e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e10:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e12:	4b26      	ldr	r3, [pc, #152]	; (1eac <SPI_LMX_PORT_init+0xac>)
    1e14:	2180      	movs	r1, #128	; 0x80
    1e16:	05c9      	lsls	r1, r1, #23
    1e18:	468c      	mov	ip, r1
    1e1a:	6299      	str	r1, [r3, #40]	; 0x28
    1e1c:	4924      	ldr	r1, [pc, #144]	; (1eb0 <SPI_LMX_PORT_init+0xb0>)
    1e1e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e20:	2050      	movs	r0, #80	; 0x50
    1e22:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e24:	2701      	movs	r7, #1
    1e26:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e28:	2601      	movs	r6, #1
    1e2a:	4331      	orrs	r1, r6
    1e2c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e2e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e30:	2138      	movs	r1, #56	; 0x38
    1e32:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1e34:	250f      	movs	r5, #15
    1e36:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1e38:	2402      	movs	r4, #2
    1e3a:	46a0      	mov	r8, r4
    1e3c:	4644      	mov	r4, r8
    1e3e:	4320      	orrs	r0, r4
    1e40:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e42:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e44:	2080      	movs	r0, #128	; 0x80
    1e46:	0280      	lsls	r0, r0, #10
    1e48:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e4a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e4c:	4660      	mov	r0, ip
    1e4e:	6298      	str	r0, [r3, #40]	; 0x28
    1e50:	4818      	ldr	r0, [pc, #96]	; (1eb4 <SPI_LMX_PORT_init+0xb4>)
    1e52:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e54:	2051      	movs	r0, #81	; 0x51
    1e56:	4684      	mov	ip, r0
    1e58:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e5a:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e5c:	4330      	orrs	r0, r6
    1e5e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e60:	4664      	mov	r4, ip
    1e62:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e64:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1e66:	3c42      	subs	r4, #66	; 0x42
    1e68:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
    1e6a:	2420      	movs	r4, #32
    1e6c:	46a4      	mov	ip, r4
    1e6e:	4664      	mov	r4, ip
    1e70:	4320      	orrs	r0, r4
    1e72:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e74:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e76:	2180      	movs	r1, #128	; 0x80
    1e78:	02c9      	lsls	r1, r1, #11
    1e7a:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e7c:	4a0e      	ldr	r2, [pc, #56]	; (1eb8 <SPI_LMX_PORT_init+0xb8>)
    1e7e:	629a      	str	r2, [r3, #40]	; 0x28
    1e80:	4a0e      	ldr	r2, [pc, #56]	; (1ebc <SPI_LMX_PORT_init+0xbc>)
    1e82:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1e84:	2252      	movs	r2, #82	; 0x52
    1e86:	5c99      	ldrb	r1, [r3, r2]
    1e88:	2004      	movs	r0, #4
    1e8a:	4381      	bics	r1, r0
    1e8c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e8e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e90:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e92:	4331      	orrs	r1, r6
    1e94:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e96:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e98:	2139      	movs	r1, #57	; 0x39
    1e9a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1e9c:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1e9e:	4640      	mov	r0, r8
    1ea0:	4302      	orrs	r2, r0
    1ea2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1ea4:	545a      	strb	r2, [r3, r1]
}
    1ea6:	bc04      	pop	{r2}
    1ea8:	4690      	mov	r8, r2
    1eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1eac:	41004400 	.word	0x41004400
    1eb0:	c0000001 	.word	0xc0000001
    1eb4:	c0000002 	.word	0xc0000002
    1eb8:	40020000 	.word	0x40020000
    1ebc:	c0020004 	.word	0xc0020004

00001ec0 <SPI_LMX_CLOCK_init>:
    1ec0:	4a04      	ldr	r2, [pc, #16]	; (1ed4 <SPI_LMX_CLOCK_init+0x14>)
    1ec2:	6a13      	ldr	r3, [r2, #32]
    1ec4:	2108      	movs	r1, #8
    1ec6:	430b      	orrs	r3, r1
    1ec8:	6213      	str	r3, [r2, #32]
    1eca:	4a03      	ldr	r2, [pc, #12]	; (1ed8 <SPI_LMX_CLOCK_init+0x18>)
    1ecc:	4b03      	ldr	r3, [pc, #12]	; (1edc <SPI_LMX_CLOCK_init+0x1c>)
    1ece:	805a      	strh	r2, [r3, #2]
}
    1ed0:	4770      	bx	lr
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	40000400 	.word	0x40000400
    1ed8:	00004015 	.word	0x00004015
    1edc:	40000c00 	.word	0x40000c00

00001ee0 <SPI_LMX_init>:
{
    1ee0:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
    1ee2:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <SPI_LMX_init+0x14>)
    1ee4:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    1ee6:	4904      	ldr	r1, [pc, #16]	; (1ef8 <SPI_LMX_init+0x18>)
    1ee8:	4804      	ldr	r0, [pc, #16]	; (1efc <SPI_LMX_init+0x1c>)
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <SPI_LMX_init+0x20>)
    1eec:	4798      	blx	r3
	SPI_LMX_PORT_init();
    1eee:	4b05      	ldr	r3, [pc, #20]	; (1f04 <SPI_LMX_init+0x24>)
    1ef0:	4798      	blx	r3
}
    1ef2:	bd10      	pop	{r4, pc}
    1ef4:	00001ec1 	.word	0x00001ec1
    1ef8:	42000c00 	.word	0x42000c00
    1efc:	200014a8 	.word	0x200014a8
    1f00:	000025b1 	.word	0x000025b1
    1f04:	00001e01 	.word	0x00001e01

00001f08 <SPI_ZCD_PORT_init>:
{
    1f08:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f0a:	21c0      	movs	r1, #192	; 0xc0
    1f0c:	05c9      	lsls	r1, r1, #23
    1f0e:	2380      	movs	r3, #128	; 0x80
    1f10:	015b      	lsls	r3, r3, #5
    1f12:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f14:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f16:	4b22      	ldr	r3, [pc, #136]	; (1fa0 <SPI_ZCD_PORT_init+0x98>)
    1f18:	4a22      	ldr	r2, [pc, #136]	; (1fa4 <SPI_ZCD_PORT_init+0x9c>)
    1f1a:	629a      	str	r2, [r3, #40]	; 0x28
    1f1c:	20c0      	movs	r0, #192	; 0xc0
    1f1e:	0600      	lsls	r0, r0, #24
    1f20:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f22:	264c      	movs	r6, #76	; 0x4c
    1f24:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f26:	2501      	movs	r5, #1
    1f28:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f2a:	2401      	movs	r4, #1
    1f2c:	4322      	orrs	r2, r4
    1f2e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f30:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f32:	3e16      	subs	r6, #22
    1f34:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1f36:	270f      	movs	r7, #15
    1f38:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
    1f3a:	2702      	movs	r7, #2
    1f3c:	433a      	orrs	r2, r7
    1f3e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f40:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f42:	2280      	movs	r2, #128	; 0x80
    1f44:	0092      	lsls	r2, r2, #2
    1f46:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f48:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f4a:	4a17      	ldr	r2, [pc, #92]	; (1fa8 <SPI_ZCD_PORT_init+0xa0>)
    1f4c:	629a      	str	r2, [r3, #40]	; 0x28
    1f4e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f50:	2049      	movs	r0, #73	; 0x49
    1f52:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f54:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f56:	4322      	orrs	r2, r4
    1f58:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f5a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f5c:	2234      	movs	r2, #52	; 0x34
    1f5e:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1f60:	3e27      	subs	r6, #39	; 0x27
    1f62:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1f64:	2730      	movs	r7, #48	; 0x30
    1f66:	4338      	orrs	r0, r7
    1f68:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f6a:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f6c:	2280      	movs	r2, #128	; 0x80
    1f6e:	0212      	lsls	r2, r2, #8
    1f70:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f72:	4a0e      	ldr	r2, [pc, #56]	; (1fac <SPI_ZCD_PORT_init+0xa4>)
    1f74:	629a      	str	r2, [r3, #40]	; 0x28
    1f76:	4a0e      	ldr	r2, [pc, #56]	; (1fb0 <SPI_ZCD_PORT_init+0xa8>)
    1f78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f7a:	224f      	movs	r2, #79	; 0x4f
    1f7c:	5c99      	ldrb	r1, [r3, r2]
    1f7e:	2004      	movs	r0, #4
    1f80:	4381      	bics	r1, r0
    1f82:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f84:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f86:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f88:	4321      	orrs	r1, r4
    1f8a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f8c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f8e:	2137      	movs	r1, #55	; 0x37
    1f90:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1f92:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1f94:	2020      	movs	r0, #32
    1f96:	4302      	orrs	r2, r0
    1f98:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f9a:	545a      	strb	r2, [r3, r1]
}
    1f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	41004400 	.word	0x41004400
    1fa4:	40001000 	.word	0x40001000
    1fa8:	40000200 	.word	0x40000200
    1fac:	40028000 	.word	0x40028000
    1fb0:	c0020000 	.word	0xc0020000

00001fb4 <SPI_ZCD_CLOCK_init>:
    1fb4:	4a04      	ldr	r2, [pc, #16]	; (1fc8 <SPI_ZCD_CLOCK_init+0x14>)
    1fb6:	6a13      	ldr	r3, [r2, #32]
    1fb8:	2110      	movs	r1, #16
    1fba:	430b      	orrs	r3, r1
    1fbc:	6213      	str	r3, [r2, #32]
    1fbe:	4a03      	ldr	r2, [pc, #12]	; (1fcc <SPI_ZCD_CLOCK_init+0x18>)
    1fc0:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <SPI_ZCD_CLOCK_init+0x1c>)
    1fc2:	805a      	strh	r2, [r3, #2]
}
    1fc4:	4770      	bx	lr
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	40000400 	.word	0x40000400
    1fcc:	00004016 	.word	0x00004016
    1fd0:	40000c00 	.word	0x40000c00

00001fd4 <SPI_ZCD_init>:
{
    1fd4:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
    1fd6:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <SPI_ZCD_init+0x14>)
    1fd8:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
    1fda:	4904      	ldr	r1, [pc, #16]	; (1fec <SPI_ZCD_init+0x18>)
    1fdc:	4804      	ldr	r0, [pc, #16]	; (1ff0 <SPI_ZCD_init+0x1c>)
    1fde:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <SPI_ZCD_init+0x20>)
    1fe0:	4798      	blx	r3
	SPI_ZCD_PORT_init();
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <SPI_ZCD_init+0x24>)
    1fe4:	4798      	blx	r3
}
    1fe6:	bd10      	pop	{r4, pc}
    1fe8:	00001fb5 	.word	0x00001fb5
    1fec:	42001000 	.word	0x42001000
    1ff0:	20001534 	.word	0x20001534
    1ff4:	000025b1 	.word	0x000025b1
    1ff8:	00001f09 	.word	0x00001f09

00001ffc <USART_0_CLOCK_init>:
    1ffc:	4a04      	ldr	r2, [pc, #16]	; (2010 <STACK_SIZE+0x10>)
    1ffe:	6a13      	ldr	r3, [r2, #32]
    2000:	2120      	movs	r1, #32
    2002:	430b      	orrs	r3, r1
    2004:	6213      	str	r3, [r2, #32]
    2006:	4a03      	ldr	r2, [pc, #12]	; (2014 <STACK_SIZE+0x14>)
    2008:	4b03      	ldr	r3, [pc, #12]	; (2018 <STACK_SIZE+0x18>)
    200a:	805a      	strh	r2, [r3, #2]
}
    200c:	4770      	bx	lr
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	40000400 	.word	0x40000400
    2014:	00004017 	.word	0x00004017
    2018:	40000c00 	.word	0x40000c00

0000201c <USART_0_PORT_init>:
{
    201c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    201e:	4b0f      	ldr	r3, [pc, #60]	; (205c <USART_0_PORT_init+0x40>)
    2020:	2256      	movs	r2, #86	; 0x56
    2022:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2024:	2501      	movs	r5, #1
    2026:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2028:	2401      	movs	r4, #1
    202a:	4321      	orrs	r1, r4
    202c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    202e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2030:	203b      	movs	r0, #59	; 0x3b
    2032:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2034:	3a47      	subs	r2, #71	; 0x47
    2036:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2038:	2202      	movs	r2, #2
    203a:	4311      	orrs	r1, r2
    203c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    203e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2040:	2157      	movs	r1, #87	; 0x57
    2042:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2044:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2046:	4322      	orrs	r2, r4
    2048:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    204a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    204c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    204e:	3948      	subs	r1, #72	; 0x48
    2050:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2052:	2120      	movs	r1, #32
    2054:	430a      	orrs	r2, r1
    2056:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2058:	541a      	strb	r2, [r3, r0]
}
    205a:	bd30      	pop	{r4, r5, pc}
    205c:	41004400 	.word	0x41004400

00002060 <USART_0_init>:
{
    2060:	b510      	push	{r4, lr}
    2062:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
    2064:	4b06      	ldr	r3, [pc, #24]	; (2080 <USART_0_init+0x20>)
    2066:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    2068:	2300      	movs	r3, #0
    206a:	9300      	str	r3, [sp, #0]
    206c:	3310      	adds	r3, #16
    206e:	4a05      	ldr	r2, [pc, #20]	; (2084 <USART_0_init+0x24>)
    2070:	4905      	ldr	r1, [pc, #20]	; (2088 <USART_0_init+0x28>)
    2072:	4806      	ldr	r0, [pc, #24]	; (208c <USART_0_init+0x2c>)
    2074:	4c06      	ldr	r4, [pc, #24]	; (2090 <USART_0_init+0x30>)
    2076:	47a0      	blx	r4
	USART_0_PORT_init();
    2078:	4b06      	ldr	r3, [pc, #24]	; (2094 <USART_0_init+0x34>)
    207a:	4798      	blx	r3
}
    207c:	b002      	add	sp, #8
    207e:	bd10      	pop	{r4, pc}
    2080:	00001ffd 	.word	0x00001ffd
    2084:	20000e90 	.word	0x20000e90
    2088:	42001400 	.word	0x42001400
    208c:	200014cc 	.word	0x200014cc
    2090:	00002b5d 	.word	0x00002b5d
    2094:	0000201d 	.word	0x0000201d

00002098 <delay_driver_init>:
{
    2098:	b510      	push	{r4, lr}
	delay_init(SysTick);
    209a:	4802      	ldr	r0, [pc, #8]	; (20a4 <delay_driver_init+0xc>)
    209c:	4b02      	ldr	r3, [pc, #8]	; (20a8 <delay_driver_init+0x10>)
    209e:	4798      	blx	r3
}
    20a0:	bd10      	pop	{r4, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	e000e010 	.word	0xe000e010
    20a8:	000023bd 	.word	0x000023bd

000020ac <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
    20ac:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20ae:	2204      	movs	r2, #4
    20b0:	23c0      	movs	r3, #192	; 0xc0
    20b2:	05db      	lsls	r3, r3, #23
    20b4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20b6:	490a      	ldr	r1, [pc, #40]	; (20e0 <DAC_0_PORT_init+0x34>)
    20b8:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <DAC_0_PORT_init+0x38>)
    20ba:	628b      	str	r3, [r1, #40]	; 0x28
    20bc:	23c0      	movs	r3, #192	; 0xc0
    20be:	061b      	lsls	r3, r3, #24
    20c0:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20c2:	2342      	movs	r3, #66	; 0x42
    20c4:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20c6:	2001      	movs	r0, #1
    20c8:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20ca:	4302      	orrs	r2, r0
    20cc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20ce:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20d0:	2231      	movs	r2, #49	; 0x31
    20d2:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20d4:	240f      	movs	r4, #15
    20d6:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
    20d8:	4303      	orrs	r3, r0
    20da:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20dc:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
    20de:	bd10      	pop	{r4, pc}
    20e0:	41004400 	.word	0x41004400
    20e4:	40000004 	.word	0x40000004

000020e8 <DAC_0_CLOCK_init>:
    20e8:	4a04      	ldr	r2, [pc, #16]	; (20fc <DAC_0_CLOCK_init+0x14>)
    20ea:	6a11      	ldr	r1, [r2, #32]
    20ec:	2380      	movs	r3, #128	; 0x80
    20ee:	02db      	lsls	r3, r3, #11
    20f0:	430b      	orrs	r3, r1
    20f2:	6213      	str	r3, [r2, #32]
    20f4:	4a02      	ldr	r2, [pc, #8]	; (2100 <DAC_0_CLOCK_init+0x18>)
    20f6:	4b03      	ldr	r3, [pc, #12]	; (2104 <DAC_0_CLOCK_init+0x1c>)
    20f8:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
    20fa:	4770      	bx	lr
    20fc:	40000400 	.word	0x40000400
    2100:	00004021 	.word	0x00004021
    2104:	40000c00 	.word	0x40000c00

00002108 <DAC_0_init>:

void DAC_0_init(void)
{
    2108:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
    210a:	4b04      	ldr	r3, [pc, #16]	; (211c <DAC_0_init+0x14>)
    210c:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    210e:	4904      	ldr	r1, [pc, #16]	; (2120 <DAC_0_init+0x18>)
    2110:	4804      	ldr	r0, [pc, #16]	; (2124 <DAC_0_init+0x1c>)
    2112:	4b05      	ldr	r3, [pc, #20]	; (2128 <DAC_0_init+0x20>)
    2114:	4798      	blx	r3
	DAC_0_PORT_init();
    2116:	4b05      	ldr	r3, [pc, #20]	; (212c <DAC_0_init+0x24>)
    2118:	4798      	blx	r3
}
    211a:	bd10      	pop	{r4, pc}
    211c:	000020e9 	.word	0x000020e9
    2120:	42004800 	.word	0x42004800
    2124:	200014c0 	.word	0x200014c0
    2128:	00002335 	.word	0x00002335
    212c:	000020ad 	.word	0x000020ad

00002130 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    2130:	b5f0      	push	{r4, r5, r6, r7, lr}
    2132:	46c6      	mov	lr, r8
    2134:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2136:	24c0      	movs	r4, #192	; 0xc0
    2138:	05e4      	lsls	r4, r4, #23
    213a:	2280      	movs	r2, #128	; 0x80
    213c:	0452      	lsls	r2, r2, #17
    213e:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2140:	4b1c      	ldr	r3, [pc, #112]	; (21b4 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    2142:	2780      	movs	r7, #128	; 0x80
    2144:	05ff      	lsls	r7, r7, #23
    2146:	629f      	str	r7, [r3, #40]	; 0x28
    2148:	491b      	ldr	r1, [pc, #108]	; (21b8 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
    214a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    214c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    214e:	2058      	movs	r0, #88	; 0x58
    2150:	5c19      	ldrb	r1, [r3, r0]
    2152:	2204      	movs	r2, #4
    2154:	4690      	mov	r8, r2
    2156:	4391      	bics	r1, r2
    2158:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    215a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    215c:	2601      	movs	r6, #1
    215e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2160:	2501      	movs	r5, #1
    2162:	4329      	orrs	r1, r5
    2164:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2166:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2168:	381c      	subs	r0, #28
    216a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    216c:	320b      	adds	r2, #11
    216e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2170:	2206      	movs	r2, #6
    2172:	4694      	mov	ip, r2
    2174:	4662      	mov	r2, ip
    2176:	4311      	orrs	r1, r2
    2178:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    217a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    217c:	2180      	movs	r1, #128	; 0x80
    217e:	0489      	lsls	r1, r1, #18
    2180:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2182:	629f      	str	r7, [r3, #40]	; 0x28
    2184:	4f0d      	ldr	r7, [pc, #52]	; (21bc <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
    2186:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2188:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    218a:	2159      	movs	r1, #89	; 0x59
    218c:	5c5c      	ldrb	r4, [r3, r1]
    218e:	4642      	mov	r2, r8
    2190:	4394      	bics	r4, r2
    2192:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2194:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2196:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2198:	432a      	orrs	r2, r5
    219a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    219c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    219e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    21a0:	394a      	subs	r1, #74	; 0x4a
    21a2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    21a4:	2160      	movs	r1, #96	; 0x60
    21a6:	430a      	orrs	r2, r1
    21a8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21aa:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    21ac:	bc04      	pop	{r2}
    21ae:	4690      	mov	r8, r2
    21b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	41004400 	.word	0x41004400
    21b8:	c0000100 	.word	0xc0000100
    21bc:	c0000200 	.word	0xc0000200

000021c0 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    21c0:	4b06      	ldr	r3, [pc, #24]	; (21dc <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    21c2:	69da      	ldr	r2, [r3, #28]
    21c4:	2120      	movs	r1, #32
    21c6:	430a      	orrs	r2, r1
    21c8:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    21ca:	695a      	ldr	r2, [r3, #20]
    21cc:	3120      	adds	r1, #32
    21ce:	430a      	orrs	r2, r1
    21d0:	615a      	str	r2, [r3, #20]
    21d2:	4a03      	ldr	r2, [pc, #12]	; (21e0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    21d4:	4b03      	ldr	r3, [pc, #12]	; (21e4 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    21d6:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    21d8:	4770      	bx	lr
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	40000400 	.word	0x40000400
    21e0:	00004406 	.word	0x00004406
    21e4:	40000c00 	.word	0x40000c00

000021e8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    21e8:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    21ea:	4b03      	ldr	r3, [pc, #12]	; (21f8 <USB_DEVICE_INSTANCE_init+0x10>)
    21ec:	4798      	blx	r3
	usb_d_init();
    21ee:	4b03      	ldr	r3, [pc, #12]	; (21fc <USB_DEVICE_INSTANCE_init+0x14>)
    21f0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    21f2:	4b03      	ldr	r3, [pc, #12]	; (2200 <USB_DEVICE_INSTANCE_init+0x18>)
    21f4:	4798      	blx	r3
}
    21f6:	bd10      	pop	{r4, pc}
    21f8:	000021c1 	.word	0x000021c1
    21fc:	00002e45 	.word	0x00002e45
    2200:	00002131 	.word	0x00002131

00002204 <system_init>:

void system_init(void)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	46c6      	mov	lr, r8
    2208:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    220a:	4b32      	ldr	r3, [pc, #200]	; (22d4 <system_init+0xd0>)
    220c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    220e:	22c0      	movs	r2, #192	; 0xc0
    2210:	05d2      	lsls	r2, r2, #23
    2212:	2308      	movs	r3, #8
    2214:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2216:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2218:	4b2f      	ldr	r3, [pc, #188]	; (22d8 <system_init+0xd4>)
    221a:	4930      	ldr	r1, [pc, #192]	; (22dc <system_init+0xd8>)
    221c:	6299      	str	r1, [r3, #40]	; 0x28
    221e:	25c0      	movs	r5, #192	; 0xc0
    2220:	062d      	lsls	r5, r5, #24
    2222:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2224:	2443      	movs	r4, #67	; 0x43
    2226:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2228:	2001      	movs	r0, #1
    222a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    222c:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    222e:	2180      	movs	r1, #128	; 0x80
    2230:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2232:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2234:	492a      	ldr	r1, [pc, #168]	; (22e0 <system_init+0xdc>)
    2236:	6299      	str	r1, [r3, #40]	; 0x28
    2238:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    223a:	3404      	adds	r4, #4
    223c:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    223e:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2240:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2242:	2180      	movs	r1, #128	; 0x80
    2244:	0309      	lsls	r1, r1, #12
    2246:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2248:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    224a:	2180      	movs	r1, #128	; 0x80
    224c:	05c9      	lsls	r1, r1, #23
    224e:	6299      	str	r1, [r3, #40]	; 0x28
    2250:	4c24      	ldr	r4, [pc, #144]	; (22e4 <system_init+0xe0>)
    2252:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2254:	2653      	movs	r6, #83	; 0x53
    2256:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2258:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    225a:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    225c:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    225e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2260:	6299      	str	r1, [r3, #40]	; 0x28
    2262:	4c21      	ldr	r4, [pc, #132]	; (22e8 <system_init+0xe4>)
    2264:	46a0      	mov	r8, r4
    2266:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2268:	275e      	movs	r7, #94	; 0x5e
    226a:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    226c:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    226e:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2270:	2480      	movs	r4, #128	; 0x80
    2272:	00e4      	lsls	r4, r4, #3
    2274:	3736      	adds	r7, #54	; 0x36
    2276:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2278:	3f0c      	subs	r7, #12
    227a:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    227c:	24a8      	movs	r4, #168	; 0xa8
    227e:	4e1b      	ldr	r6, [pc, #108]	; (22ec <system_init+0xe8>)
    2280:	511e      	str	r6, [r3, r4]
    2282:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2284:	25ca      	movs	r5, #202	; 0xca
    2286:	46ac      	mov	ip, r5
    2288:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    228a:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    228c:	4666      	mov	r6, ip
    228e:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2290:	2598      	movs	r5, #152	; 0x98
    2292:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2294:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2296:	5119      	str	r1, [r3, r4]
    2298:	4642      	mov	r2, r8
    229a:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    229c:	21de      	movs	r1, #222	; 0xde
    229e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22a0:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22a2:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    22a4:	4b12      	ldr	r3, [pc, #72]	; (22f0 <system_init+0xec>)
    22a6:	4798      	blx	r3

	SPI_ADF_init();
    22a8:	4b12      	ldr	r3, [pc, #72]	; (22f4 <system_init+0xf0>)
    22aa:	4798      	blx	r3

	SPI_LMX_init();
    22ac:	4b12      	ldr	r3, [pc, #72]	; (22f8 <system_init+0xf4>)
    22ae:	4798      	blx	r3

	SPI_ZCD_init();
    22b0:	4b12      	ldr	r3, [pc, #72]	; (22fc <system_init+0xf8>)
    22b2:	4798      	blx	r3
	USART_0_init();
    22b4:	4b12      	ldr	r3, [pc, #72]	; (2300 <system_init+0xfc>)
    22b6:	4798      	blx	r3

	delay_driver_init();
    22b8:	4b12      	ldr	r3, [pc, #72]	; (2304 <system_init+0x100>)
    22ba:	4798      	blx	r3

	TIMER_ZCD_init();
    22bc:	4b12      	ldr	r3, [pc, #72]	; (2308 <system_init+0x104>)
    22be:	4798      	blx	r3
	TIMER_USB_init();
    22c0:	4b12      	ldr	r3, [pc, #72]	; (230c <system_init+0x108>)
    22c2:	4798      	blx	r3
	DAC_0_init();
    22c4:	4b12      	ldr	r3, [pc, #72]	; (2310 <system_init+0x10c>)
    22c6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    22c8:	4b12      	ldr	r3, [pc, #72]	; (2314 <system_init+0x110>)
    22ca:	4798      	blx	r3
}
    22cc:	bc04      	pop	{r2}
    22ce:	4690      	mov	r8, r2
    22d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	000033cd 	.word	0x000033cd
    22d8:	41004400 	.word	0x41004400
    22dc:	40000008 	.word	0x40000008
    22e0:	40000080 	.word	0x40000080
    22e4:	c0000008 	.word	0xc0000008
    22e8:	c0004000 	.word	0xc0004000
    22ec:	40000400 	.word	0x40000400
    22f0:	00001ca5 	.word	0x00001ca5
    22f4:	00001dd9 	.word	0x00001dd9
    22f8:	00001ee1 	.word	0x00001ee1
    22fc:	00001fd5 	.word	0x00001fd5
    2300:	00002061 	.word	0x00002061
    2304:	00002099 	.word	0x00002099
    2308:	00001c25 	.word	0x00001c25
    230c:	00001c65 	.word	0x00001c65
    2310:	00002109 	.word	0x00002109
    2314:	000021e9 	.word	0x000021e9

00002318 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2318:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    231c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    231e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2320:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2324:	4770      	bx	lr

00002326 <atomic_leave_critical>:
    2326:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    232a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    232c:	f383 8810 	msr	PRIMASK, r3
}
    2330:	4770      	bx	lr
	...

00002334 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    2334:	b570      	push	{r4, r5, r6, lr}
    2336:	0004      	movs	r4, r0
    2338:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    233a:	2800      	cmp	r0, #0
    233c:	d010      	beq.n	2360 <dac_sync_init+0x2c>
    233e:	2900      	cmp	r1, #0
    2340:	d00c      	beq.n	235c <dac_sync_init+0x28>
    2342:	2001      	movs	r0, #1
    2344:	2232      	movs	r2, #50	; 0x32
    2346:	490c      	ldr	r1, [pc, #48]	; (2378 <dac_sync_init+0x44>)
    2348:	4b0c      	ldr	r3, [pc, #48]	; (237c <dac_sync_init+0x48>)
    234a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    234c:	0029      	movs	r1, r5
    234e:	0020      	movs	r0, r4
    2350:	4b0b      	ldr	r3, [pc, #44]	; (2380 <dac_sync_init+0x4c>)
    2352:	4798      	blx	r3
	if (rc) {
    2354:	2800      	cmp	r0, #0
    2356:	d10e      	bne.n	2376 <dac_sync_init+0x42>
    2358:	2300      	movs	r3, #0
    235a:	e00a      	b.n	2372 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    235c:	2000      	movs	r0, #0
    235e:	e7f1      	b.n	2344 <dac_sync_init+0x10>
    2360:	2000      	movs	r0, #0
    2362:	e7ef      	b.n	2344 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    2364:	00da      	lsls	r2, r3, #3
    2366:	18a2      	adds	r2, r4, r2
    2368:	2100      	movs	r1, #0
    236a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    236c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    236e:	3301      	adds	r3, #1
    2370:	b2db      	uxtb	r3, r3
    2372:	2b00      	cmp	r3, #0
    2374:	d0f6      	beq.n	2364 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    2376:	bd70      	pop	{r4, r5, r6, pc}
    2378:	00010e90 	.word	0x00010e90
    237c:	000031d1 	.word	0x000031d1
    2380:	00003441 	.word	0x00003441

00002384 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
    2384:	b570      	push	{r4, r5, r6, lr}
    2386:	0004      	movs	r4, r0
    2388:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
    238a:	2800      	cmp	r0, #0
    238c:	d00c      	beq.n	23a8 <dac_sync_enable_channel+0x24>
    238e:	2900      	cmp	r1, #0
    2390:	d00c      	beq.n	23ac <dac_sync_enable_channel+0x28>
    2392:	2000      	movs	r0, #0
    2394:	2252      	movs	r2, #82	; 0x52
    2396:	4906      	ldr	r1, [pc, #24]	; (23b0 <dac_sync_enable_channel+0x2c>)
    2398:	4b06      	ldr	r3, [pc, #24]	; (23b4 <dac_sync_enable_channel+0x30>)
    239a:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
    239c:	0029      	movs	r1, r5
    239e:	0020      	movs	r0, r4
    23a0:	4b05      	ldr	r3, [pc, #20]	; (23b8 <dac_sync_enable_channel+0x34>)
    23a2:	4798      	blx	r3

	return ERR_NONE;
}
    23a4:	2000      	movs	r0, #0
    23a6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
    23a8:	2000      	movs	r0, #0
    23aa:	e7f3      	b.n	2394 <dac_sync_enable_channel+0x10>
    23ac:	2001      	movs	r0, #1
    23ae:	e7f1      	b.n	2394 <dac_sync_enable_channel+0x10>
    23b0:	00010e90 	.word	0x00010e90
    23b4:	000031d1 	.word	0x000031d1
    23b8:	0000346d 	.word	0x0000346d

000023bc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    23bc:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    23be:	4b02      	ldr	r3, [pc, #8]	; (23c8 <delay_init+0xc>)
    23c0:	6018      	str	r0, [r3, #0]
    23c2:	4b02      	ldr	r3, [pc, #8]	; (23cc <delay_init+0x10>)
    23c4:	4798      	blx	r3
}
    23c6:	bd10      	pop	{r4, pc}
    23c8:	20000ea0 	.word	0x20000ea0
    23cc:	00003e05 	.word	0x00003e05

000023d0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    23d0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    23d2:	4b04      	ldr	r3, [pc, #16]	; (23e4 <delay_ms+0x14>)
    23d4:	681c      	ldr	r4, [r3, #0]
    23d6:	4b04      	ldr	r3, [pc, #16]	; (23e8 <delay_ms+0x18>)
    23d8:	4798      	blx	r3
    23da:	0001      	movs	r1, r0
    23dc:	0020      	movs	r0, r4
    23de:	4b03      	ldr	r3, [pc, #12]	; (23ec <delay_ms+0x1c>)
    23e0:	4798      	blx	r3
}
    23e2:	bd10      	pop	{r4, pc}
    23e4:	20000ea0 	.word	0x20000ea0
    23e8:	000033c1 	.word	0x000033c1
    23ec:	00003e11 	.word	0x00003e11

000023f0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    23f0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    23f2:	2501      	movs	r5, #1
    23f4:	2400      	movs	r4, #0

	while (upper >= lower) {
    23f6:	e007      	b.n	2408 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    23f8:	4a0d      	ldr	r2, [pc, #52]	; (2430 <process_ext_irq+0x40>)
    23fa:	58b3      	ldr	r3, [r6, r2]
    23fc:	2b00      	cmp	r3, #0
    23fe:	d000      	beq.n	2402 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    2400:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    2402:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    2404:	3a01      	subs	r2, #1
    2406:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    2408:	42ac      	cmp	r4, r5
    240a:	d8fa      	bhi.n	2402 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    240c:	192b      	adds	r3, r5, r4
    240e:	105b      	asrs	r3, r3, #1
    2410:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    2412:	2a00      	cmp	r2, #0
    2414:	d1f5      	bne.n	2402 <process_ext_irq+0x12>
    2416:	21ff      	movs	r1, #255	; 0xff
    2418:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    241a:	00de      	lsls	r6, r3, #3
    241c:	4904      	ldr	r1, [pc, #16]	; (2430 <process_ext_irq+0x40>)
    241e:	1989      	adds	r1, r1, r6
    2420:	6849      	ldr	r1, [r1, #4]
    2422:	4281      	cmp	r1, r0
    2424:	d0e8      	beq.n	23f8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    2426:	d2ed      	bcs.n	2404 <process_ext_irq+0x14>
			lower = middle + 1;
    2428:	3201      	adds	r2, #1
    242a:	b2d4      	uxtb	r4, r2
    242c:	e7ec      	b.n	2408 <process_ext_irq+0x18>
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	20000ea4 	.word	0x20000ea4

00002434 <ext_irq_init>:
{
    2434:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2436:	2300      	movs	r3, #0
    2438:	2b00      	cmp	r3, #0
    243a:	d003      	beq.n	2444 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
    243c:	4807      	ldr	r0, [pc, #28]	; (245c <ext_irq_init+0x28>)
    243e:	4b08      	ldr	r3, [pc, #32]	; (2460 <ext_irq_init+0x2c>)
    2440:	4798      	blx	r3
}
    2442:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
    2444:	4a07      	ldr	r2, [pc, #28]	; (2464 <ext_irq_init+0x30>)
    2446:	00d9      	lsls	r1, r3, #3
    2448:	1850      	adds	r0, r2, r1
    244a:	2401      	movs	r4, #1
    244c:	4264      	negs	r4, r4
    244e:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    2450:	2000      	movs	r0, #0
    2452:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2454:	3301      	adds	r3, #1
    2456:	b29b      	uxth	r3, r3
    2458:	e7ee      	b.n	2438 <ext_irq_init+0x4>
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	000023f1 	.word	0x000023f1
    2460:	00003481 	.word	0x00003481
    2464:	20000ea4 	.word	0x20000ea4

00002468 <ext_irq_register>:
{
    2468:	b5f0      	push	{r4, r5, r6, r7, lr}
    246a:	46c6      	mov	lr, r8
    246c:	b500      	push	{lr}
    246e:	b084      	sub	sp, #16
    2470:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
    2472:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2474:	2b00      	cmp	r3, #0
    2476:	d010      	beq.n	249a <ext_irq_register+0x32>
	bool    found = false;
    2478:	2300      	movs	r3, #0
    247a:	4698      	mov	r8, r3
	if (NULL == cb) {
    247c:	2900      	cmp	r1, #0
    247e:	d01b      	beq.n	24b8 <ext_irq_register+0x50>
	if (!found) {
    2480:	4643      	mov	r3, r8
    2482:	2b00      	cmp	r3, #0
    2484:	d146      	bne.n	2514 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2486:	2b00      	cmp	r3, #0
    2488:	d124      	bne.n	24d4 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
    248a:	00da      	lsls	r2, r3, #3
    248c:	4c2a      	ldr	r4, [pc, #168]	; (2538 <ext_irq_register+0xd0>)
    248e:	5912      	ldr	r2, [r2, r4]
    2490:	2a00      	cmp	r2, #0
    2492:	d018      	beq.n	24c6 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2494:	3301      	adds	r3, #1
    2496:	b2db      	uxtb	r3, r3
    2498:	e7f5      	b.n	2486 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
    249a:	00dc      	lsls	r4, r3, #3
    249c:	4a26      	ldr	r2, [pc, #152]	; (2538 <ext_irq_register+0xd0>)
    249e:	1912      	adds	r2, r2, r4
    24a0:	6852      	ldr	r2, [r2, #4]
    24a2:	9801      	ldr	r0, [sp, #4]
    24a4:	4282      	cmp	r2, r0
    24a6:	d002      	beq.n	24ae <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    24a8:	3301      	adds	r3, #1
    24aa:	b2db      	uxtb	r3, r3
    24ac:	e7e2      	b.n	2474 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
    24ae:	4b22      	ldr	r3, [pc, #136]	; (2538 <ext_irq_register+0xd0>)
    24b0:	50e1      	str	r1, [r4, r3]
			found          = true;
    24b2:	2301      	movs	r3, #1
    24b4:	4698      	mov	r8, r3
			break;
    24b6:	e7e1      	b.n	247c <ext_irq_register+0x14>
		if (!found) {
    24b8:	4643      	mov	r3, r8
    24ba:	2b00      	cmp	r3, #0
    24bc:	d035      	beq.n	252a <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
    24be:	9801      	ldr	r0, [sp, #4]
    24c0:	4b1e      	ldr	r3, [pc, #120]	; (253c <ext_irq_register+0xd4>)
    24c2:	4798      	blx	r3
    24c4:	e02d      	b.n	2522 <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
    24c6:	00dd      	lsls	r5, r3, #3
    24c8:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
    24ca:	1965      	adds	r5, r4, r5
    24cc:	9a01      	ldr	r2, [sp, #4]
    24ce:	606a      	str	r2, [r5, #4]
				found           = true;
    24d0:	2201      	movs	r2, #1
    24d2:	4690      	mov	r8, r2
    24d4:	2200      	movs	r2, #0
    24d6:	e001      	b.n	24dc <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    24d8:	3201      	adds	r2, #1
    24da:	b2d2      	uxtb	r2, r2
    24dc:	0019      	movs	r1, r3
    24de:	4311      	orrs	r1, r2
    24e0:	d118      	bne.n	2514 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    24e2:	4915      	ldr	r1, [pc, #84]	; (2538 <ext_irq_register+0xd0>)
    24e4:	00dc      	lsls	r4, r3, #3
    24e6:	190c      	adds	r4, r1, r4
    24e8:	6867      	ldr	r7, [r4, #4]
    24ea:	00d4      	lsls	r4, r2, #3
    24ec:	1909      	adds	r1, r1, r4
    24ee:	6849      	ldr	r1, [r1, #4]
    24f0:	428f      	cmp	r7, r1
    24f2:	d2f1      	bcs.n	24d8 <ext_irq_register+0x70>
    24f4:	1c4c      	adds	r4, r1, #1
    24f6:	d0ef      	beq.n	24d8 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
    24f8:	a902      	add	r1, sp, #8
    24fa:	468c      	mov	ip, r1
    24fc:	4f0e      	ldr	r7, [pc, #56]	; (2538 <ext_irq_register+0xd0>)
    24fe:	00d1      	lsls	r1, r2, #3
    2500:	1879      	adds	r1, r7, r1
    2502:	4664      	mov	r4, ip
    2504:	c941      	ldmia	r1!, {r0, r6}
    2506:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
    2508:	00dd      	lsls	r5, r3, #3
    250a:	197d      	adds	r5, r7, r5
    250c:	4661      	mov	r1, ip
    250e:	c911      	ldmia	r1!, {r0, r4}
    2510:	c511      	stmia	r5!, {r0, r4}
    2512:	e7e1      	b.n	24d8 <ext_irq_register+0x70>
	if (!found) {
    2514:	4643      	mov	r3, r8
    2516:	2b00      	cmp	r3, #0
    2518:	d00a      	beq.n	2530 <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
    251a:	2101      	movs	r1, #1
    251c:	9801      	ldr	r0, [sp, #4]
    251e:	4b07      	ldr	r3, [pc, #28]	; (253c <ext_irq_register+0xd4>)
    2520:	4798      	blx	r3
}
    2522:	b004      	add	sp, #16
    2524:	bc04      	pop	{r2}
    2526:	4690      	mov	r8, r2
    2528:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    252a:	200d      	movs	r0, #13
    252c:	4240      	negs	r0, r0
    252e:	e7f8      	b.n	2522 <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
    2530:	200d      	movs	r0, #13
    2532:	4240      	negs	r0, r0
    2534:	e7f5      	b.n	2522 <ext_irq_register+0xba>
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	20000ea4 	.word	0x20000ea4
    253c:	00003511 	.word	0x00003511

00002540 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2540:	b570      	push	{r4, r5, r6, lr}
    2542:	0004      	movs	r4, r0
    2544:	000d      	movs	r5, r1
    2546:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2548:	2800      	cmp	r0, #0
    254a:	d00e      	beq.n	256a <io_write+0x2a>
    254c:	2900      	cmp	r1, #0
    254e:	d00a      	beq.n	2566 <io_write+0x26>
    2550:	2001      	movs	r0, #1
    2552:	2234      	movs	r2, #52	; 0x34
    2554:	4906      	ldr	r1, [pc, #24]	; (2570 <io_write+0x30>)
    2556:	4b07      	ldr	r3, [pc, #28]	; (2574 <io_write+0x34>)
    2558:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    255a:	6823      	ldr	r3, [r4, #0]
    255c:	0032      	movs	r2, r6
    255e:	0029      	movs	r1, r5
    2560:	0020      	movs	r0, r4
    2562:	4798      	blx	r3
}
    2564:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2566:	2000      	movs	r0, #0
    2568:	e7f3      	b.n	2552 <io_write+0x12>
    256a:	2000      	movs	r0, #0
    256c:	e7f1      	b.n	2552 <io_write+0x12>
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	00010eac 	.word	0x00010eac
    2574:	000031d1 	.word	0x000031d1

00002578 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2578:	b570      	push	{r4, r5, r6, lr}
    257a:	0004      	movs	r4, r0
    257c:	000d      	movs	r5, r1
    257e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2580:	2800      	cmp	r0, #0
    2582:	d00e      	beq.n	25a2 <io_read+0x2a>
    2584:	2900      	cmp	r1, #0
    2586:	d00a      	beq.n	259e <io_read+0x26>
    2588:	2001      	movs	r0, #1
    258a:	223d      	movs	r2, #61	; 0x3d
    258c:	4906      	ldr	r1, [pc, #24]	; (25a8 <io_read+0x30>)
    258e:	4b07      	ldr	r3, [pc, #28]	; (25ac <io_read+0x34>)
    2590:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    2592:	6863      	ldr	r3, [r4, #4]
    2594:	0032      	movs	r2, r6
    2596:	0029      	movs	r1, r5
    2598:	0020      	movs	r0, r4
    259a:	4798      	blx	r3
}
    259c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    259e:	2000      	movs	r0, #0
    25a0:	e7f3      	b.n	258a <io_read+0x12>
    25a2:	2000      	movs	r0, #0
    25a4:	e7f1      	b.n	258a <io_read+0x12>
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	00010eac 	.word	0x00010eac
    25ac:	000031d1 	.word	0x000031d1

000025b0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    25b0:	b570      	push	{r4, r5, r6, lr}
    25b2:	0004      	movs	r4, r0
    25b4:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    25b6:	2800      	cmp	r0, #0
    25b8:	d017      	beq.n	25ea <spi_m_sync_init+0x3a>
    25ba:	2900      	cmp	r1, #0
    25bc:	d013      	beq.n	25e6 <spi_m_sync_init+0x36>
    25be:	2001      	movs	r0, #1
    25c0:	2240      	movs	r2, #64	; 0x40
    25c2:	490b      	ldr	r1, [pc, #44]	; (25f0 <spi_m_sync_init+0x40>)
    25c4:	4b0b      	ldr	r3, [pc, #44]	; (25f4 <spi_m_sync_init+0x44>)
    25c6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    25c8:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    25ca:	1d20      	adds	r0, r4, #4
    25cc:	0029      	movs	r1, r5
    25ce:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <spi_m_sync_init+0x48>)
    25d0:	4798      	blx	r3

	if (rc < 0) {
    25d2:	2800      	cmp	r0, #0
    25d4:	db06      	blt.n	25e4 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    25d6:	4b09      	ldr	r3, [pc, #36]	; (25fc <spi_m_sync_init+0x4c>)
    25d8:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    25da:	4b09      	ldr	r3, [pc, #36]	; (2600 <spi_m_sync_init+0x50>)
    25dc:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    25de:	4b09      	ldr	r3, [pc, #36]	; (2604 <spi_m_sync_init+0x54>)
    25e0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    25e2:	2000      	movs	r0, #0
}
    25e4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    25e6:	2000      	movs	r0, #0
    25e8:	e7ea      	b.n	25c0 <spi_m_sync_init+0x10>
    25ea:	2000      	movs	r0, #0
    25ec:	e7e8      	b.n	25c0 <spi_m_sync_init+0x10>
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	00010ec0 	.word	0x00010ec0
    25f4:	000031d1 	.word	0x000031d1
    25f8:	000039b1 	.word	0x000039b1
    25fc:	ffff8000 	.word	0xffff8000
    2600:	000026b5 	.word	0x000026b5
    2604:	00002679 	.word	0x00002679

00002608 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2608:	b510      	push	{r4, lr}
    260a:	0004      	movs	r4, r0
	ASSERT(spi);
    260c:	1e43      	subs	r3, r0, #1
    260e:	4198      	sbcs	r0, r3
    2610:	b2c0      	uxtb	r0, r0
    2612:	2257      	movs	r2, #87	; 0x57
    2614:	4903      	ldr	r1, [pc, #12]	; (2624 <spi_m_sync_enable+0x1c>)
    2616:	4b04      	ldr	r3, [pc, #16]	; (2628 <spi_m_sync_enable+0x20>)
    2618:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    261a:	1d20      	adds	r0, r4, #4
    261c:	4b03      	ldr	r3, [pc, #12]	; (262c <spi_m_sync_enable+0x24>)
    261e:	4798      	blx	r3
}
    2620:	bd10      	pop	{r4, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	00010ec0 	.word	0x00010ec0
    2628:	000031d1 	.word	0x000031d1
    262c:	00003bb5 	.word	0x00003bb5

00002630 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2630:	b530      	push	{r4, r5, lr}
    2632:	b087      	sub	sp, #28
    2634:	0004      	movs	r4, r0
    2636:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2638:	2800      	cmp	r0, #0
    263a:	d015      	beq.n	2668 <spi_m_sync_transfer+0x38>
    263c:	2900      	cmp	r1, #0
    263e:	d011      	beq.n	2664 <spi_m_sync_transfer+0x34>
    2640:	2001      	movs	r0, #1
    2642:	22b3      	movs	r2, #179	; 0xb3
    2644:	4909      	ldr	r1, [pc, #36]	; (266c <spi_m_sync_transfer+0x3c>)
    2646:	4b0a      	ldr	r3, [pc, #40]	; (2670 <spi_m_sync_transfer+0x40>)
    2648:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    264a:	682b      	ldr	r3, [r5, #0]
    264c:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    264e:	686b      	ldr	r3, [r5, #4]
    2650:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    2652:	68ab      	ldr	r3, [r5, #8]
    2654:	9301      	str	r3, [sp, #4]
    2656:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2658:	1d20      	adds	r0, r4, #4
    265a:	a903      	add	r1, sp, #12
    265c:	4b05      	ldr	r3, [pc, #20]	; (2674 <spi_m_sync_transfer+0x44>)
    265e:	4798      	blx	r3
}
    2660:	b007      	add	sp, #28
    2662:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    2664:	2000      	movs	r0, #0
    2666:	e7ec      	b.n	2642 <spi_m_sync_transfer+0x12>
    2668:	2000      	movs	r0, #0
    266a:	e7ea      	b.n	2642 <spi_m_sync_transfer+0x12>
    266c:	00010ec0 	.word	0x00010ec0
    2670:	000031d1 	.word	0x000031d1
    2674:	00003bed 	.word	0x00003bed

00002678 <_spi_m_sync_io_write>:
{
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	b084      	sub	sp, #16
    267c:	0004      	movs	r4, r0
    267e:	000e      	movs	r6, r1
    2680:	0015      	movs	r5, r2
	ASSERT(io);
    2682:	1e43      	subs	r3, r0, #1
    2684:	4198      	sbcs	r0, r3
    2686:	b2c0      	uxtb	r0, r0
    2688:	22a3      	movs	r2, #163	; 0xa3
    268a:	4907      	ldr	r1, [pc, #28]	; (26a8 <_spi_m_sync_io_write+0x30>)
    268c:	4b07      	ldr	r3, [pc, #28]	; (26ac <_spi_m_sync_io_write+0x34>)
    268e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2690:	0020      	movs	r0, r4
    2692:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    2694:	2300      	movs	r3, #0
    2696:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    2698:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    269a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    269c:	a901      	add	r1, sp, #4
    269e:	4b04      	ldr	r3, [pc, #16]	; (26b0 <_spi_m_sync_io_write+0x38>)
    26a0:	4798      	blx	r3
}
    26a2:	b004      	add	sp, #16
    26a4:	bd70      	pop	{r4, r5, r6, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	00010ec0 	.word	0x00010ec0
    26ac:	000031d1 	.word	0x000031d1
    26b0:	00002631 	.word	0x00002631

000026b4 <_spi_m_sync_io_read>:
{
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	b084      	sub	sp, #16
    26b8:	0004      	movs	r4, r0
    26ba:	000e      	movs	r6, r1
    26bc:	0015      	movs	r5, r2
	ASSERT(io);
    26be:	1e43      	subs	r3, r0, #1
    26c0:	4198      	sbcs	r0, r3
    26c2:	b2c0      	uxtb	r0, r0
    26c4:	2287      	movs	r2, #135	; 0x87
    26c6:	4907      	ldr	r1, [pc, #28]	; (26e4 <_spi_m_sync_io_read+0x30>)
    26c8:	4b07      	ldr	r3, [pc, #28]	; (26e8 <_spi_m_sync_io_read+0x34>)
    26ca:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    26cc:	0020      	movs	r0, r4
    26ce:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    26d0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    26d2:	2300      	movs	r3, #0
    26d4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    26d6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    26d8:	a901      	add	r1, sp, #4
    26da:	4b04      	ldr	r3, [pc, #16]	; (26ec <_spi_m_sync_io_read+0x38>)
    26dc:	4798      	blx	r3
}
    26de:	b004      	add	sp, #16
    26e0:	bd70      	pop	{r4, r5, r6, pc}
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	00010ec0 	.word	0x00010ec0
    26e8:	000031d1 	.word	0x000031d1
    26ec:	00002631 	.word	0x00002631

000026f0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    26f0:	b570      	push	{r4, r5, r6, lr}
    26f2:	0004      	movs	r4, r0
    26f4:	000d      	movs	r5, r1
	ASSERT(spi && io);
    26f6:	2800      	cmp	r0, #0
    26f8:	d00c      	beq.n	2714 <spi_m_sync_get_io_descriptor+0x24>
    26fa:	2900      	cmp	r1, #0
    26fc:	d008      	beq.n	2710 <spi_m_sync_get_io_descriptor+0x20>
    26fe:	2001      	movs	r0, #1
    2700:	22bd      	movs	r2, #189	; 0xbd
    2702:	4905      	ldr	r1, [pc, #20]	; (2718 <spi_m_sync_get_io_descriptor+0x28>)
    2704:	4b05      	ldr	r3, [pc, #20]	; (271c <spi_m_sync_get_io_descriptor+0x2c>)
    2706:	4798      	blx	r3
	*io = &spi->io;
    2708:	340c      	adds	r4, #12
    270a:	602c      	str	r4, [r5, #0]
	return 0;
}
    270c:	2000      	movs	r0, #0
    270e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    2710:	2000      	movs	r0, #0
    2712:	e7f5      	b.n	2700 <spi_m_sync_get_io_descriptor+0x10>
    2714:	2000      	movs	r0, #0
    2716:	e7f3      	b.n	2700 <spi_m_sync_get_io_descriptor+0x10>
    2718:	00010ec0 	.word	0x00010ec0
    271c:	000031d1 	.word	0x000031d1

00002720 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2722:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2724:	2e00      	cmp	r6, #0
    2726:	d002      	beq.n	272e <timer_add_timer_task+0xe>
    2728:	0033      	movs	r3, r6
    272a:	2500      	movs	r5, #0
    272c:	e00c      	b.n	2748 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    272e:	4b10      	ldr	r3, [pc, #64]	; (2770 <timer_add_timer_task+0x50>)
    2730:	4798      	blx	r3
		return;
    2732:	e018      	b.n	2766 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2734:	689f      	ldr	r7, [r3, #8]
    2736:	46bc      	mov	ip, r7
    2738:	4464      	add	r4, ip
    273a:	1aa4      	subs	r4, r4, r2
    273c:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    273e:	688f      	ldr	r7, [r1, #8]
    2740:	42bc      	cmp	r4, r7
    2742:	d20b      	bcs.n	275c <timer_add_timer_task+0x3c>
			break;
		prev = it;
    2744:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2746:	681b      	ldr	r3, [r3, #0]
    2748:	2b00      	cmp	r3, #0
    274a:	d007      	beq.n	275c <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    274c:	685c      	ldr	r4, [r3, #4]
    274e:	4294      	cmp	r4, r2
    2750:	d8f0      	bhi.n	2734 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    2752:	1aa4      	subs	r4, r4, r2
    2754:	689f      	ldr	r7, [r3, #8]
    2756:	46bc      	mov	ip, r7
    2758:	4464      	add	r4, ip
    275a:	e7f0      	b.n	273e <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    275c:	42b3      	cmp	r3, r6
    275e:	d003      	beq.n	2768 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2760:	0028      	movs	r0, r5
    2762:	4b04      	ldr	r3, [pc, #16]	; (2774 <timer_add_timer_task+0x54>)
    2764:	4798      	blx	r3
	}
}
    2766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2768:	4b01      	ldr	r3, [pc, #4]	; (2770 <timer_add_timer_task+0x50>)
    276a:	4798      	blx	r3
    276c:	e7fb      	b.n	2766 <timer_add_timer_task+0x46>
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	000031f1 	.word	0x000031f1
    2774:	0000321d 	.word	0x0000321d

00002778 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    277a:	0005      	movs	r5, r0
    277c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    277e:	6903      	ldr	r3, [r0, #16]
    2780:	1c5e      	adds	r6, r3, #1
    2782:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2784:	7e03      	ldrb	r3, [r0, #24]
    2786:	07db      	lsls	r3, r3, #31
    2788:	d402      	bmi.n	2790 <timer_process_counted+0x18>
    278a:	7e03      	ldrb	r3, [r0, #24]
    278c:	079b      	lsls	r3, r3, #30
    278e:	d50a      	bpl.n	27a6 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2790:	7e2b      	ldrb	r3, [r5, #24]
    2792:	2202      	movs	r2, #2
    2794:	4313      	orrs	r3, r2
    2796:	b2db      	uxtb	r3, r3
    2798:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    279c:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    279e:	68e3      	ldr	r3, [r4, #12]
    27a0:	0020      	movs	r0, r4
    27a2:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    27a4:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    27a6:	2c00      	cmp	r4, #0
    27a8:	d0f7      	beq.n	279a <timer_process_counted+0x22>
    27aa:	6863      	ldr	r3, [r4, #4]
    27ac:	1af3      	subs	r3, r6, r3
    27ae:	68a2      	ldr	r2, [r4, #8]
    27b0:	4293      	cmp	r3, r2
    27b2:	d3f2      	bcc.n	279a <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    27b4:	002f      	movs	r7, r5
    27b6:	3714      	adds	r7, #20
    27b8:	0038      	movs	r0, r7
    27ba:	4b06      	ldr	r3, [pc, #24]	; (27d4 <timer_process_counted+0x5c>)
    27bc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    27be:	7c23      	ldrb	r3, [r4, #16]
    27c0:	2b01      	cmp	r3, #1
    27c2:	d1eb      	bne.n	279c <timer_process_counted+0x24>
			tmp->time_label = time;
    27c4:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    27c6:	0032      	movs	r2, r6
    27c8:	0021      	movs	r1, r4
    27ca:	0038      	movs	r0, r7
    27cc:	4b02      	ldr	r3, [pc, #8]	; (27d8 <timer_process_counted+0x60>)
    27ce:	4798      	blx	r3
    27d0:	e7e4      	b.n	279c <timer_process_counted+0x24>
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	00003265 	.word	0x00003265
    27d8:	00002721 	.word	0x00002721

000027dc <timer_init>:
{
    27dc:	b570      	push	{r4, r5, r6, lr}
    27de:	0004      	movs	r4, r0
    27e0:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    27e2:	2800      	cmp	r0, #0
    27e4:	d012      	beq.n	280c <timer_init+0x30>
    27e6:	2900      	cmp	r1, #0
    27e8:	d00e      	beq.n	2808 <timer_init+0x2c>
    27ea:	2001      	movs	r0, #1
    27ec:	223b      	movs	r2, #59	; 0x3b
    27ee:	4908      	ldr	r1, [pc, #32]	; (2810 <timer_init+0x34>)
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <timer_init+0x38>)
    27f2:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    27f4:	0029      	movs	r1, r5
    27f6:	0020      	movs	r0, r4
    27f8:	4b07      	ldr	r3, [pc, #28]	; (2818 <timer_init+0x3c>)
    27fa:	4798      	blx	r3
	descr->time                           = 0;
    27fc:	2300      	movs	r3, #0
    27fe:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <timer_init+0x40>)
    2802:	6023      	str	r3, [r4, #0]
}
    2804:	2000      	movs	r0, #0
    2806:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    2808:	2000      	movs	r0, #0
    280a:	e7ef      	b.n	27ec <timer_init+0x10>
    280c:	2000      	movs	r0, #0
    280e:	e7ed      	b.n	27ec <timer_init+0x10>
    2810:	00010edc 	.word	0x00010edc
    2814:	000031d1 	.word	0x000031d1
    2818:	00003eed 	.word	0x00003eed
    281c:	00002779 	.word	0x00002779

00002820 <timer_start>:
{
    2820:	b510      	push	{r4, lr}
    2822:	0004      	movs	r4, r0
	ASSERT(descr);
    2824:	1e43      	subs	r3, r0, #1
    2826:	4198      	sbcs	r0, r3
    2828:	b2c0      	uxtb	r0, r0
    282a:	2253      	movs	r2, #83	; 0x53
    282c:	4907      	ldr	r1, [pc, #28]	; (284c <timer_start+0x2c>)
    282e:	4b08      	ldr	r3, [pc, #32]	; (2850 <timer_start+0x30>)
    2830:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2832:	0020      	movs	r0, r4
    2834:	4b07      	ldr	r3, [pc, #28]	; (2854 <timer_start+0x34>)
    2836:	4798      	blx	r3
    2838:	2800      	cmp	r0, #0
    283a:	d104      	bne.n	2846 <timer_start+0x26>
	_timer_start(&descr->device);
    283c:	0020      	movs	r0, r4
    283e:	4b06      	ldr	r3, [pc, #24]	; (2858 <timer_start+0x38>)
    2840:	4798      	blx	r3
	return ERR_NONE;
    2842:	2000      	movs	r0, #0
}
    2844:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2846:	2011      	movs	r0, #17
    2848:	4240      	negs	r0, r0
    284a:	e7fb      	b.n	2844 <timer_start+0x24>
    284c:	00010edc 	.word	0x00010edc
    2850:	000031d1 	.word	0x000031d1
    2854:	0000402b 	.word	0x0000402b
    2858:	00004011 	.word	0x00004011

0000285c <timer_stop>:
{
    285c:	b510      	push	{r4, lr}
    285e:	0004      	movs	r4, r0
	ASSERT(descr);
    2860:	1e43      	subs	r3, r0, #1
    2862:	4198      	sbcs	r0, r3
    2864:	b2c0      	uxtb	r0, r0
    2866:	2261      	movs	r2, #97	; 0x61
    2868:	4907      	ldr	r1, [pc, #28]	; (2888 <timer_stop+0x2c>)
    286a:	4b08      	ldr	r3, [pc, #32]	; (288c <timer_stop+0x30>)
    286c:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    286e:	0020      	movs	r0, r4
    2870:	4b07      	ldr	r3, [pc, #28]	; (2890 <timer_stop+0x34>)
    2872:	4798      	blx	r3
    2874:	2800      	cmp	r0, #0
    2876:	d004      	beq.n	2882 <timer_stop+0x26>
	_timer_stop(&descr->device);
    2878:	0020      	movs	r0, r4
    287a:	4b06      	ldr	r3, [pc, #24]	; (2894 <timer_stop+0x38>)
    287c:	4798      	blx	r3
	return ERR_NONE;
    287e:	2000      	movs	r0, #0
}
    2880:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2882:	2011      	movs	r0, #17
    2884:	4240      	negs	r0, r0
    2886:	e7fb      	b.n	2880 <timer_stop+0x24>
    2888:	00010edc 	.word	0x00010edc
    288c:	000031d1 	.word	0x000031d1
    2890:	0000402b 	.word	0x0000402b
    2894:	0000401f 	.word	0x0000401f

00002898 <timer_add_task>:
{
    2898:	b570      	push	{r4, r5, r6, lr}
    289a:	b082      	sub	sp, #8
    289c:	0004      	movs	r4, r0
    289e:	000d      	movs	r5, r1
	ASSERT(descr && task);
    28a0:	2800      	cmp	r0, #0
    28a2:	d026      	beq.n	28f2 <timer_add_task+0x5a>
    28a4:	2900      	cmp	r1, #0
    28a6:	d022      	beq.n	28ee <timer_add_task+0x56>
    28a8:	2001      	movs	r0, #1
    28aa:	227a      	movs	r2, #122	; 0x7a
    28ac:	491f      	ldr	r1, [pc, #124]	; (292c <timer_add_task+0x94>)
    28ae:	4b20      	ldr	r3, [pc, #128]	; (2930 <timer_add_task+0x98>)
    28b0:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    28b2:	7e23      	ldrb	r3, [r4, #24]
    28b4:	2201      	movs	r2, #1
    28b6:	4313      	orrs	r3, r2
    28b8:	b2db      	uxtb	r3, r3
    28ba:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    28bc:	0026      	movs	r6, r4
    28be:	3614      	adds	r6, #20
    28c0:	0029      	movs	r1, r5
    28c2:	0030      	movs	r0, r6
    28c4:	4b1b      	ldr	r3, [pc, #108]	; (2934 <timer_add_task+0x9c>)
    28c6:	4798      	blx	r3
    28c8:	2800      	cmp	r0, #0
    28ca:	d114      	bne.n	28f6 <timer_add_task+0x5e>
	task->time_label = descr->time;
    28cc:	6923      	ldr	r3, [r4, #16]
    28ce:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    28d0:	6922      	ldr	r2, [r4, #16]
    28d2:	0029      	movs	r1, r5
    28d4:	0030      	movs	r0, r6
    28d6:	4b18      	ldr	r3, [pc, #96]	; (2938 <timer_add_task+0xa0>)
    28d8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28da:	7e23      	ldrb	r3, [r4, #24]
    28dc:	2201      	movs	r2, #1
    28de:	4393      	bics	r3, r2
    28e0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    28e2:	7e23      	ldrb	r3, [r4, #24]
    28e4:	079b      	lsls	r3, r3, #30
    28e6:	d412      	bmi.n	290e <timer_add_task+0x76>
	return ERR_NONE;
    28e8:	2000      	movs	r0, #0
}
    28ea:	b002      	add	sp, #8
    28ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    28ee:	2000      	movs	r0, #0
    28f0:	e7db      	b.n	28aa <timer_add_task+0x12>
    28f2:	2000      	movs	r0, #0
    28f4:	e7d9      	b.n	28aa <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    28f6:	7e23      	ldrb	r3, [r4, #24]
    28f8:	2201      	movs	r2, #1
    28fa:	4393      	bics	r3, r2
    28fc:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    28fe:	327e      	adds	r2, #126	; 0x7e
    2900:	490a      	ldr	r1, [pc, #40]	; (292c <timer_add_task+0x94>)
    2902:	2000      	movs	r0, #0
    2904:	4b0a      	ldr	r3, [pc, #40]	; (2930 <timer_add_task+0x98>)
    2906:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2908:	2012      	movs	r0, #18
    290a:	4240      	negs	r0, r0
    290c:	e7ed      	b.n	28ea <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    290e:	a801      	add	r0, sp, #4
    2910:	4b0a      	ldr	r3, [pc, #40]	; (293c <timer_add_task+0xa4>)
    2912:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2914:	7e23      	ldrb	r3, [r4, #24]
    2916:	2202      	movs	r2, #2
    2918:	4393      	bics	r3, r2
    291a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    291c:	0020      	movs	r0, r4
    291e:	4b08      	ldr	r3, [pc, #32]	; (2940 <timer_add_task+0xa8>)
    2920:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2922:	a801      	add	r0, sp, #4
    2924:	4b07      	ldr	r3, [pc, #28]	; (2944 <timer_add_task+0xac>)
    2926:	4798      	blx	r3
	return ERR_NONE;
    2928:	2000      	movs	r0, #0
    292a:	e7de      	b.n	28ea <timer_add_task+0x52>
    292c:	00010edc 	.word	0x00010edc
    2930:	000031d1 	.word	0x000031d1
    2934:	000031d9 	.word	0x000031d9
    2938:	00002721 	.word	0x00002721
    293c:	00002319 	.word	0x00002319
    2940:	0000403d 	.word	0x0000403d
    2944:	00002327 	.word	0x00002327

00002948 <timer_remove_task>:
{
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	b082      	sub	sp, #8
    294c:	0004      	movs	r4, r0
    294e:	000d      	movs	r5, r1
	ASSERT(descr && task);
    2950:	2800      	cmp	r0, #0
    2952:	d023      	beq.n	299c <timer_remove_task+0x54>
    2954:	2900      	cmp	r1, #0
    2956:	d01f      	beq.n	2998 <timer_remove_task+0x50>
    2958:	2001      	movs	r0, #1
    295a:	2295      	movs	r2, #149	; 0x95
    295c:	491d      	ldr	r1, [pc, #116]	; (29d4 <timer_remove_task+0x8c>)
    295e:	4b1e      	ldr	r3, [pc, #120]	; (29d8 <timer_remove_task+0x90>)
    2960:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2962:	7e23      	ldrb	r3, [r4, #24]
    2964:	2201      	movs	r2, #1
    2966:	4313      	orrs	r3, r2
    2968:	b2db      	uxtb	r3, r3
    296a:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    296c:	0026      	movs	r6, r4
    296e:	3614      	adds	r6, #20
    2970:	0029      	movs	r1, r5
    2972:	0030      	movs	r0, r6
    2974:	4b19      	ldr	r3, [pc, #100]	; (29dc <timer_remove_task+0x94>)
    2976:	4798      	blx	r3
    2978:	2800      	cmp	r0, #0
    297a:	d011      	beq.n	29a0 <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
    297c:	0029      	movs	r1, r5
    297e:	0030      	movs	r0, r6
    2980:	4b17      	ldr	r3, [pc, #92]	; (29e0 <timer_remove_task+0x98>)
    2982:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2984:	7e23      	ldrb	r3, [r4, #24]
    2986:	2201      	movs	r2, #1
    2988:	4393      	bics	r3, r2
    298a:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    298c:	7e23      	ldrb	r3, [r4, #24]
    298e:	079b      	lsls	r3, r3, #30
    2990:	d411      	bmi.n	29b6 <timer_remove_task+0x6e>
	return ERR_NONE;
    2992:	2000      	movs	r0, #0
}
    2994:	b002      	add	sp, #8
    2996:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2998:	2000      	movs	r0, #0
    299a:	e7de      	b.n	295a <timer_remove_task+0x12>
    299c:	2000      	movs	r0, #0
    299e:	e7dc      	b.n	295a <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    29a0:	7e23      	ldrb	r3, [r4, #24]
    29a2:	2201      	movs	r2, #1
    29a4:	4393      	bics	r3, r2
    29a6:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    29a8:	3299      	adds	r2, #153	; 0x99
    29aa:	490a      	ldr	r1, [pc, #40]	; (29d4 <timer_remove_task+0x8c>)
    29ac:	4b0a      	ldr	r3, [pc, #40]	; (29d8 <timer_remove_task+0x90>)
    29ae:	4798      	blx	r3
		return ERR_NOT_FOUND;
    29b0:	200a      	movs	r0, #10
    29b2:	4240      	negs	r0, r0
    29b4:	e7ee      	b.n	2994 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    29b6:	a801      	add	r0, sp, #4
    29b8:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <timer_remove_task+0x9c>)
    29ba:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    29bc:	7e23      	ldrb	r3, [r4, #24]
    29be:	2202      	movs	r2, #2
    29c0:	4393      	bics	r3, r2
    29c2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    29c4:	0020      	movs	r0, r4
    29c6:	4b08      	ldr	r3, [pc, #32]	; (29e8 <timer_remove_task+0xa0>)
    29c8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    29ca:	a801      	add	r0, sp, #4
    29cc:	4b07      	ldr	r3, [pc, #28]	; (29ec <timer_remove_task+0xa4>)
    29ce:	4798      	blx	r3
	return ERR_NONE;
    29d0:	2000      	movs	r0, #0
    29d2:	e7df      	b.n	2994 <timer_remove_task+0x4c>
    29d4:	00010edc 	.word	0x00010edc
    29d8:	000031d1 	.word	0x000031d1
    29dc:	000031d9 	.word	0x000031d9
    29e0:	00003277 	.word	0x00003277
    29e4:	00002319 	.word	0x00002319
    29e8:	0000403d 	.word	0x0000403d
    29ec:	00002327 	.word	0x00002327

000029f0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    29f0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    29f2:	3808      	subs	r0, #8

	descr->stat = 0;
    29f4:	2300      	movs	r3, #0
    29f6:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    29f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    29fa:	2b00      	cmp	r3, #0
    29fc:	d000      	beq.n	2a00 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    29fe:	4798      	blx	r3
	}
}
    2a00:	bd10      	pop	{r4, pc}

00002a02 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    2a02:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2a04:	3808      	subs	r0, #8

	descr->stat = 0;
    2a06:	2300      	movs	r3, #0
    2a08:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    2a0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d000      	beq.n	2a12 <usart_error+0x10>
		descr->usart_cb.error(descr);
    2a10:	4798      	blx	r3
	}
}
    2a12:	bd10      	pop	{r4, pc}

00002a14 <usart_fill_rx_buffer>:
{
    2a14:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2a16:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    2a18:	302c      	adds	r0, #44	; 0x2c
    2a1a:	4b04      	ldr	r3, [pc, #16]	; (2a2c <usart_fill_rx_buffer+0x18>)
    2a1c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    2a1e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2a20:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    2a22:	2b00      	cmp	r3, #0
    2a24:	d001      	beq.n	2a2a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    2a26:	0020      	movs	r0, r4
    2a28:	4798      	blx	r3
}
    2a2a:	bd10      	pop	{r4, pc}
    2a2c:	00003341 	.word	0x00003341

00002a30 <usart_async_write>:
{
    2a30:	b570      	push	{r4, r5, r6, lr}
    2a32:	0004      	movs	r4, r0
    2a34:	000e      	movs	r6, r1
    2a36:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    2a38:	2800      	cmp	r0, #0
    2a3a:	d01d      	beq.n	2a78 <usart_async_write+0x48>
    2a3c:	2900      	cmp	r1, #0
    2a3e:	d01d      	beq.n	2a7c <usart_async_write+0x4c>
    2a40:	2a00      	cmp	r2, #0
    2a42:	d11d      	bne.n	2a80 <usart_async_write+0x50>
    2a44:	2000      	movs	r0, #0
    2a46:	223c      	movs	r2, #60	; 0x3c
    2a48:	32ff      	adds	r2, #255	; 0xff
    2a4a:	4910      	ldr	r1, [pc, #64]	; (2a8c <usart_async_write+0x5c>)
    2a4c:	4b10      	ldr	r3, [pc, #64]	; (2a90 <usart_async_write+0x60>)
    2a4e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    2a50:	2344      	movs	r3, #68	; 0x44
    2a52:	5ae2      	ldrh	r2, [r4, r3]
    2a54:	3308      	adds	r3, #8
    2a56:	5ae3      	ldrh	r3, [r4, r3]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d113      	bne.n	2a84 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    2a5c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    2a5e:	234c      	movs	r3, #76	; 0x4c
    2a60:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    2a62:	2200      	movs	r2, #0
    2a64:	3b08      	subs	r3, #8
    2a66:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    2a68:	3b43      	subs	r3, #67	; 0x43
    2a6a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    2a6c:	0020      	movs	r0, r4
    2a6e:	3008      	adds	r0, #8
    2a70:	4b08      	ldr	r3, [pc, #32]	; (2a94 <usart_async_write+0x64>)
    2a72:	4798      	blx	r3
	return (int32_t)length;
    2a74:	0028      	movs	r0, r5
}
    2a76:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    2a78:	2000      	movs	r0, #0
    2a7a:	e7e4      	b.n	2a46 <usart_async_write+0x16>
    2a7c:	2000      	movs	r0, #0
    2a7e:	e7e2      	b.n	2a46 <usart_async_write+0x16>
    2a80:	2001      	movs	r0, #1
    2a82:	e7e0      	b.n	2a46 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    2a84:	201c      	movs	r0, #28
    2a86:	4240      	negs	r0, r0
    2a88:	e7f5      	b.n	2a76 <usart_async_write+0x46>
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	00010ef4 	.word	0x00010ef4
    2a90:	000031d1 	.word	0x000031d1
    2a94:	0000398d 	.word	0x0000398d

00002a98 <usart_process_byte_sent>:
{
    2a98:	b570      	push	{r4, r5, r6, lr}
    2a9a:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    2a9c:	0002      	movs	r2, r0
    2a9e:	3a08      	subs	r2, #8
    2aa0:	2344      	movs	r3, #68	; 0x44
    2aa2:	5ad3      	ldrh	r3, [r2, r3]
    2aa4:	214c      	movs	r1, #76	; 0x4c
    2aa6:	5a52      	ldrh	r2, [r2, r1]
    2aa8:	4293      	cmp	r3, r2
    2aaa:	d00d      	beq.n	2ac8 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    2aac:	0002      	movs	r2, r0
    2aae:	6c01      	ldr	r1, [r0, #64]	; 0x40
    2ab0:	3a08      	subs	r2, #8
    2ab2:	1c5d      	adds	r5, r3, #1
    2ab4:	2044      	movs	r0, #68	; 0x44
    2ab6:	5215      	strh	r5, [r2, r0]
    2ab8:	5cc9      	ldrb	r1, [r1, r3]
    2aba:	0020      	movs	r0, r4
    2abc:	4b04      	ldr	r3, [pc, #16]	; (2ad0 <usart_process_byte_sent+0x38>)
    2abe:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    2ac0:	0020      	movs	r0, r4
    2ac2:	4b04      	ldr	r3, [pc, #16]	; (2ad4 <usart_process_byte_sent+0x3c>)
    2ac4:	4798      	blx	r3
}
    2ac6:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    2ac8:	4b03      	ldr	r3, [pc, #12]	; (2ad8 <usart_process_byte_sent+0x40>)
    2aca:	4798      	blx	r3
}
    2acc:	e7fb      	b.n	2ac6 <usart_process_byte_sent+0x2e>
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	00003985 	.word	0x00003985
    2ad4:	0000398d 	.word	0x0000398d
    2ad8:	00003995 	.word	0x00003995

00002adc <usart_async_read>:
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ade:	b085      	sub	sp, #20
    2ae0:	0004      	movs	r4, r0
    2ae2:	000d      	movs	r5, r1
    2ae4:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d017      	beq.n	2b1a <usart_async_read+0x3e>
    2aea:	2900      	cmp	r1, #0
    2aec:	d017      	beq.n	2b1e <usart_async_read+0x42>
    2aee:	2a00      	cmp	r2, #0
    2af0:	d117      	bne.n	2b22 <usart_async_read+0x46>
    2af2:	2000      	movs	r0, #0
    2af4:	22ac      	movs	r2, #172	; 0xac
    2af6:	0052      	lsls	r2, r2, #1
    2af8:	4912      	ldr	r1, [pc, #72]	; (2b44 <usart_async_read+0x68>)
    2afa:	4b13      	ldr	r3, [pc, #76]	; (2b48 <usart_async_read+0x6c>)
    2afc:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    2afe:	a803      	add	r0, sp, #12
    2b00:	4b12      	ldr	r3, [pc, #72]	; (2b4c <usart_async_read+0x70>)
    2b02:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2b04:	3434      	adds	r4, #52	; 0x34
    2b06:	0020      	movs	r0, r4
    2b08:	9401      	str	r4, [sp, #4]
    2b0a:	4b11      	ldr	r3, [pc, #68]	; (2b50 <usart_async_read+0x74>)
    2b0c:	4798      	blx	r3
    2b0e:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    2b10:	a803      	add	r0, sp, #12
    2b12:	4b10      	ldr	r3, [pc, #64]	; (2b54 <usart_async_read+0x78>)
    2b14:	4798      	blx	r3
	uint16_t                       was_read = 0;
    2b16:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    2b18:	e00b      	b.n	2b32 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    2b1a:	2000      	movs	r0, #0
    2b1c:	e7ea      	b.n	2af4 <usart_async_read+0x18>
    2b1e:	2000      	movs	r0, #0
    2b20:	e7e8      	b.n	2af4 <usart_async_read+0x18>
    2b22:	2001      	movs	r0, #1
    2b24:	e7e6      	b.n	2af4 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    2b26:	3401      	adds	r4, #1
    2b28:	b2a4      	uxth	r4, r4
    2b2a:	1869      	adds	r1, r5, r1
    2b2c:	9801      	ldr	r0, [sp, #4]
    2b2e:	4b0a      	ldr	r3, [pc, #40]	; (2b58 <usart_async_read+0x7c>)
    2b30:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    2b32:	0021      	movs	r1, r4
    2b34:	42a7      	cmp	r7, r4
    2b36:	d901      	bls.n	2b3c <usart_async_read+0x60>
    2b38:	42b4      	cmp	r4, r6
    2b3a:	d3f4      	bcc.n	2b26 <usart_async_read+0x4a>
}
    2b3c:	0020      	movs	r0, r4
    2b3e:	b005      	add	sp, #20
    2b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	00010ef4 	.word	0x00010ef4
    2b48:	000031d1 	.word	0x000031d1
    2b4c:	00002319 	.word	0x00002319
    2b50:	00003381 	.word	0x00003381
    2b54:	00002327 	.word	0x00002327
    2b58:	000032f5 	.word	0x000032f5

00002b5c <usart_async_init>:
{
    2b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5e:	0004      	movs	r4, r0
    2b60:	000d      	movs	r5, r1
    2b62:	0016      	movs	r6, r2
    2b64:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2b66:	2800      	cmp	r0, #0
    2b68:	d026      	beq.n	2bb8 <usart_async_init+0x5c>
    2b6a:	2900      	cmp	r1, #0
    2b6c:	d026      	beq.n	2bbc <usart_async_init+0x60>
    2b6e:	2a00      	cmp	r2, #0
    2b70:	d026      	beq.n	2bc0 <usart_async_init+0x64>
    2b72:	2b00      	cmp	r3, #0
    2b74:	d126      	bne.n	2bc4 <usart_async_init+0x68>
    2b76:	2000      	movs	r0, #0
    2b78:	223a      	movs	r2, #58	; 0x3a
    2b7a:	4915      	ldr	r1, [pc, #84]	; (2bd0 <usart_async_init+0x74>)
    2b7c:	4b15      	ldr	r3, [pc, #84]	; (2bd4 <usart_async_init+0x78>)
    2b7e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    2b80:	0020      	movs	r0, r4
    2b82:	3034      	adds	r0, #52	; 0x34
    2b84:	003a      	movs	r2, r7
    2b86:	0031      	movs	r1, r6
    2b88:	4b13      	ldr	r3, [pc, #76]	; (2bd8 <usart_async_init+0x7c>)
    2b8a:	4798      	blx	r3
    2b8c:	2800      	cmp	r0, #0
    2b8e:	d11b      	bne.n	2bc8 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    2b90:	0020      	movs	r0, r4
    2b92:	3008      	adds	r0, #8
    2b94:	0029      	movs	r1, r5
    2b96:	4b11      	ldr	r3, [pc, #68]	; (2bdc <usart_async_init+0x80>)
    2b98:	4798      	blx	r3
	if (init_status) {
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d10b      	bne.n	2bb6 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    2b9e:	4b10      	ldr	r3, [pc, #64]	; (2be0 <usart_async_init+0x84>)
    2ba0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    2ba2:	4b10      	ldr	r3, [pc, #64]	; (2be4 <usart_async_init+0x88>)
    2ba4:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    2ba6:	4b10      	ldr	r3, [pc, #64]	; (2be8 <usart_async_init+0x8c>)
    2ba8:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2baa:	4b10      	ldr	r3, [pc, #64]	; (2bec <usart_async_init+0x90>)
    2bac:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    2bae:	4b10      	ldr	r3, [pc, #64]	; (2bf0 <usart_async_init+0x94>)
    2bb0:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    2bb2:	4b10      	ldr	r3, [pc, #64]	; (2bf4 <usart_async_init+0x98>)
    2bb4:	6163      	str	r3, [r4, #20]
}
    2bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2bb8:	2000      	movs	r0, #0
    2bba:	e7dd      	b.n	2b78 <usart_async_init+0x1c>
    2bbc:	2000      	movs	r0, #0
    2bbe:	e7db      	b.n	2b78 <usart_async_init+0x1c>
    2bc0:	2000      	movs	r0, #0
    2bc2:	e7d9      	b.n	2b78 <usart_async_init+0x1c>
    2bc4:	2001      	movs	r0, #1
    2bc6:	e7d7      	b.n	2b78 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    2bc8:	200d      	movs	r0, #13
    2bca:	4240      	negs	r0, r0
    2bcc:	e7f3      	b.n	2bb6 <usart_async_init+0x5a>
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	00010ef4 	.word	0x00010ef4
    2bd4:	000031d1 	.word	0x000031d1
    2bd8:	000032a9 	.word	0x000032a9
    2bdc:	000038f9 	.word	0x000038f9
    2be0:	00002add 	.word	0x00002add
    2be4:	00002a31 	.word	0x00002a31
    2be8:	00002a99 	.word	0x00002a99
    2bec:	00002a15 	.word	0x00002a15
    2bf0:	000029f1 	.word	0x000029f1
    2bf4:	00002a03 	.word	0x00002a03

00002bf8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2bf8:	b510      	push	{r4, lr}
    2bfa:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2bfc:	2000      	movs	r0, #0
    2bfe:	e001      	b.n	2c04 <_usb_d_find_ep+0xc>
    2c00:	3001      	adds	r0, #1
    2c02:	b240      	sxtb	r0, r0
    2c04:	2803      	cmp	r0, #3
    2c06:	dc0f      	bgt.n	2c28 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2c08:	0142      	lsls	r2, r0, #5
    2c0a:	4b09      	ldr	r3, [pc, #36]	; (2c30 <_usb_d_find_ep+0x38>)
    2c0c:	189b      	adds	r3, r3, r2
    2c0e:	785a      	ldrb	r2, [r3, #1]
    2c10:	428a      	cmp	r2, r1
    2c12:	d00b      	beq.n	2c2c <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2c14:	0143      	lsls	r3, r0, #5
    2c16:	4c06      	ldr	r4, [pc, #24]	; (2c30 <_usb_d_find_ep+0x38>)
    2c18:	5d1b      	ldrb	r3, [r3, r4]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d1f0      	bne.n	2c00 <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2c1e:	330f      	adds	r3, #15
    2c20:	400b      	ands	r3, r1
    2c22:	4293      	cmp	r3, r2
    2c24:	d1ec      	bne.n	2c00 <_usb_d_find_ep+0x8>
    2c26:	e001      	b.n	2c2c <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    2c28:	2001      	movs	r0, #1
    2c2a:	4240      	negs	r0, r0
}
    2c2c:	bd10      	pop	{r4, pc}
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	20000eac 	.word	0x20000eac

00002c34 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2c34:	2000      	movs	r0, #0
    2c36:	4770      	bx	lr

00002c38 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2c38:	b570      	push	{r4, r5, r6, lr}
    2c3a:	0004      	movs	r4, r0
    2c3c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c3e:	4b08      	ldr	r3, [pc, #32]	; (2c60 <usb_d_cb_trans_more+0x28>)
    2c40:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2c42:	0142      	lsls	r2, r0, #5
    2c44:	4b07      	ldr	r3, [pc, #28]	; (2c64 <usb_d_cb_trans_more+0x2c>)
    2c46:	189b      	adds	r3, r3, r2
    2c48:	789b      	ldrb	r3, [r3, #2]
    2c4a:	2b03      	cmp	r3, #3
    2c4c:	d001      	beq.n	2c52 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    2c4e:	2000      	movs	r0, #0
}
    2c50:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    2c52:	4b04      	ldr	r3, [pc, #16]	; (2c64 <usb_d_cb_trans_more+0x2c>)
    2c54:	1898      	adds	r0, r3, r2
    2c56:	6983      	ldr	r3, [r0, #24]
    2c58:	0029      	movs	r1, r5
    2c5a:	0020      	movs	r0, r4
    2c5c:	4798      	blx	r3
    2c5e:	e7f7      	b.n	2c50 <usb_d_cb_trans_more+0x18>
    2c60:	00002bf9 	.word	0x00002bf9
    2c64:	20000eac 	.word	0x20000eac

00002c68 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c6a:	b087      	sub	sp, #28
    2c6c:	0005      	movs	r5, r0
    2c6e:	000f      	movs	r7, r1
    2c70:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c72:	4b4a      	ldr	r3, [pc, #296]	; (2d9c <_usb_d_cb_trans_done+0x134>)
    2c74:	4798      	blx	r3
    2c76:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c78:	0146      	lsls	r6, r0, #5
    2c7a:	4a49      	ldr	r2, [pc, #292]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2c7c:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
    2c7e:	2f00      	cmp	r7, #0
    2c80:	d151      	bne.n	2d26 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2c82:	0013      	movs	r3, r2
    2c84:	0142      	lsls	r2, r0, #5
    2c86:	2000      	movs	r0, #0
    2c88:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2c8a:	5cd3      	ldrb	r3, [r2, r3]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d00e      	beq.n	2cae <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2c90:	0162      	lsls	r2, r4, #5
    2c92:	4b43      	ldr	r3, [pc, #268]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2c94:	189b      	adds	r3, r3, r2
    2c96:	2201      	movs	r2, #1
    2c98:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2c9a:	0164      	lsls	r4, r4, #5
    2c9c:	4b40      	ldr	r3, [pc, #256]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2c9e:	191c      	adds	r4, r3, r4
    2ca0:	69e3      	ldr	r3, [r4, #28]
    2ca2:	78e1      	ldrb	r1, [r4, #3]
    2ca4:	9a01      	ldr	r2, [sp, #4]
    2ca6:	0028      	movs	r0, r5
    2ca8:	4798      	blx	r3
}
    2caa:	b007      	add	sp, #28
    2cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
    2cae:	78b3      	ldrb	r3, [r6, #2]
    2cb0:	240c      	movs	r4, #12
    2cb2:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
    2cb4:	2b03      	cmp	r3, #3
    2cb6:	d008      	beq.n	2cca <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2cb8:	0032      	movs	r2, r6
    2cba:	320c      	adds	r2, #12
    2cbc:	7870      	ldrb	r0, [r6, #1]
    2cbe:	2100      	movs	r1, #0
    2cc0:	69f3      	ldr	r3, [r6, #28]
    2cc2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2cc4:	2302      	movs	r3, #2
    2cc6:	70b3      	strb	r3, [r6, #2]
    2cc8:	e7ef      	b.n	2caa <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2cca:	7870      	ldrb	r0, [r6, #1]
    2ccc:	0032      	movs	r2, r6
    2cce:	320c      	adds	r2, #12
    2cd0:	2101      	movs	r1, #1
    2cd2:	69f3      	ldr	r3, [r6, #28]
    2cd4:	4798      	blx	r3
		if (err) {
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d010      	beq.n	2cfc <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2cda:	2305      	movs	r3, #5
    2cdc:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2cde:	3b03      	subs	r3, #3
    2ce0:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2ce2:	2c00      	cmp	r4, #0
    2ce4:	db08      	blt.n	2cf8 <_usb_d_cb_trans_done+0x90>
    2ce6:	7873      	ldrb	r3, [r6, #1]
    2ce8:	2080      	movs	r0, #128	; 0x80
    2cea:	4240      	negs	r0, r0
    2cec:	4318      	orrs	r0, r3
    2cee:	b2c0      	uxtb	r0, r0
    2cf0:	2101      	movs	r1, #1
    2cf2:	4b2c      	ldr	r3, [pc, #176]	; (2da4 <_usb_d_cb_trans_done+0x13c>)
    2cf4:	4798      	blx	r3
    2cf6:	e7d8      	b.n	2caa <_usb_d_cb_trans_done+0x42>
    2cf8:	7870      	ldrb	r0, [r6, #1]
    2cfa:	e7f9      	b.n	2cf0 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2cfc:	2304      	movs	r3, #4
    2cfe:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2d00:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
    2d02:	2200      	movs	r2, #0
    2d04:	9203      	str	r2, [sp, #12]
    2d06:	9204      	str	r2, [sp, #16]
    2d08:	2c00      	cmp	r4, #0
    2d0a:	db09      	blt.n	2d20 <_usb_d_cb_trans_done+0xb8>
    2d0c:	3b84      	subs	r3, #132	; 0x84
    2d0e:	430b      	orrs	r3, r1
    2d10:	b2da      	uxtb	r2, r3
    2d12:	a803      	add	r0, sp, #12
    2d14:	7202      	strb	r2, [r0, #8]
    2d16:	2301      	movs	r3, #1
    2d18:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2d1a:	4b23      	ldr	r3, [pc, #140]	; (2da8 <_usb_d_cb_trans_done+0x140>)
    2d1c:	4798      	blx	r3
    2d1e:	e7c4      	b.n	2caa <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
    2d20:	220f      	movs	r2, #15
    2d22:	400a      	ands	r2, r1
    2d24:	e7f5      	b.n	2d12 <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
    2d26:	2f01      	cmp	r7, #1
    2d28:	d00a      	beq.n	2d40 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
    2d2a:	2f02      	cmp	r7, #2
    2d2c:	d01d      	beq.n	2d6a <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
    2d2e:	2f03      	cmp	r7, #3
    2d30:	d02c      	beq.n	2d8c <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2d32:	0142      	lsls	r2, r0, #5
    2d34:	4b1a      	ldr	r3, [pc, #104]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2d36:	189b      	adds	r3, r3, r2
    2d38:	2206      	movs	r2, #6
    2d3a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2d3c:	70da      	strb	r2, [r3, #3]
    2d3e:	e7ac      	b.n	2c9a <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2d40:	4b17      	ldr	r3, [pc, #92]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2d42:	0142      	lsls	r2, r0, #5
    2d44:	1899      	adds	r1, r3, r2
    2d46:	2002      	movs	r0, #2
    2d48:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d4a:	5cd3      	ldrb	r3, [r2, r3]
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d005      	beq.n	2d5c <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2d50:	0162      	lsls	r2, r4, #5
    2d52:	4b13      	ldr	r3, [pc, #76]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2d54:	189b      	adds	r3, r3, r2
    2d56:	2205      	movs	r2, #5
    2d58:	709a      	strb	r2, [r3, #2]
    2d5a:	e79e      	b.n	2c9a <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d5c:	2202      	movs	r2, #2
    2d5e:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2d60:	2100      	movs	r1, #0
    2d62:	0028      	movs	r0, r5
    2d64:	4b0f      	ldr	r3, [pc, #60]	; (2da4 <_usb_d_cb_trans_done+0x13c>)
    2d66:	4798      	blx	r3
    2d68:	e797      	b.n	2c9a <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2d6a:	4b0d      	ldr	r3, [pc, #52]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2d6c:	0142      	lsls	r2, r0, #5
    2d6e:	1899      	adds	r1, r3, r2
    2d70:	2004      	movs	r0, #4
    2d72:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2d74:	5cd3      	ldrb	r3, [r2, r3]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d005      	beq.n	2d86 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2d7a:	0162      	lsls	r2, r4, #5
    2d7c:	4b08      	ldr	r3, [pc, #32]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2d7e:	189b      	adds	r3, r3, r2
    2d80:	2201      	movs	r2, #1
    2d82:	709a      	strb	r2, [r3, #2]
    2d84:	e789      	b.n	2c9a <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2d86:	2302      	movs	r3, #2
    2d88:	708b      	strb	r3, [r1, #2]
			return;
    2d8a:	e78e      	b.n	2caa <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2d8c:	0142      	lsls	r2, r0, #5
    2d8e:	4b04      	ldr	r3, [pc, #16]	; (2da0 <_usb_d_cb_trans_done+0x138>)
    2d90:	189b      	adds	r3, r3, r2
    2d92:	2200      	movs	r2, #0
    2d94:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2d96:	3205      	adds	r2, #5
    2d98:	70da      	strb	r2, [r3, #3]
    2d9a:	e77e      	b.n	2c9a <_usb_d_cb_trans_done+0x32>
    2d9c:	00002bf9 	.word	0x00002bf9
    2da0:	20000eac 	.word	0x20000eac
    2da4:	00004fc5 	.word	0x00004fc5
    2da8:	00005195 	.word	0x00005195

00002dac <usb_d_cb_trans_setup>:
{
    2dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dae:	46c6      	mov	lr, r8
    2db0:	b500      	push	{lr}
    2db2:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2db4:	4b1f      	ldr	r3, [pc, #124]	; (2e34 <usb_d_cb_trans_setup+0x88>)
    2db6:	4798      	blx	r3
    2db8:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2dba:	0143      	lsls	r3, r0, #5
    2dbc:	3308      	adds	r3, #8
    2dbe:	4c1e      	ldr	r4, [pc, #120]	; (2e38 <usb_d_cb_trans_setup+0x8c>)
    2dc0:	18e4      	adds	r4, r4, r3
    2dc2:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2dc4:	0021      	movs	r1, r4
    2dc6:	0028      	movs	r0, r5
    2dc8:	4b1c      	ldr	r3, [pc, #112]	; (2e3c <usb_d_cb_trans_setup+0x90>)
    2dca:	4798      	blx	r3
    2dcc:	b2c0      	uxtb	r0, r0
	if (n != 8) {
    2dce:	2808      	cmp	r0, #8
    2dd0:	d00c      	beq.n	2dec <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2dd2:	2101      	movs	r1, #1
    2dd4:	0028      	movs	r0, r5
    2dd6:	4c1a      	ldr	r4, [pc, #104]	; (2e40 <usb_d_cb_trans_setup+0x94>)
    2dd8:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2dda:	2080      	movs	r0, #128	; 0x80
    2ddc:	4240      	negs	r0, r0
    2dde:	4328      	orrs	r0, r5
    2de0:	b2c0      	uxtb	r0, r0
    2de2:	2101      	movs	r1, #1
    2de4:	47a0      	blx	r4
}
    2de6:	bc04      	pop	{r2}
    2de8:	4690      	mov	r8, r2
    2dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2dec:	2100      	movs	r1, #0
    2dee:	0028      	movs	r0, r5
    2df0:	4b13      	ldr	r3, [pc, #76]	; (2e40 <usb_d_cb_trans_setup+0x94>)
    2df2:	4698      	mov	r8, r3
    2df4:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2df6:	2780      	movs	r7, #128	; 0x80
    2df8:	427f      	negs	r7, r7
    2dfa:	432f      	orrs	r7, r5
    2dfc:	b2ff      	uxtb	r7, r7
    2dfe:	2100      	movs	r1, #0
    2e00:	0038      	movs	r0, r7
    2e02:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2e04:	0172      	lsls	r2, r6, #5
    2e06:	4b0c      	ldr	r3, [pc, #48]	; (2e38 <usb_d_cb_trans_setup+0x8c>)
    2e08:	189b      	adds	r3, r3, r2
    2e0a:	2201      	movs	r2, #1
    2e0c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2e0e:	695b      	ldr	r3, [r3, #20]
    2e10:	0021      	movs	r1, r4
    2e12:	0028      	movs	r0, r5
    2e14:	4798      	blx	r3
    2e16:	2800      	cmp	r0, #0
    2e18:	d1e5      	bne.n	2de6 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2e1a:	0176      	lsls	r6, r6, #5
    2e1c:	4b06      	ldr	r3, [pc, #24]	; (2e38 <usb_d_cb_trans_setup+0x8c>)
    2e1e:	199e      	adds	r6, r3, r6
    2e20:	2305      	movs	r3, #5
    2e22:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2e24:	2101      	movs	r1, #1
    2e26:	0028      	movs	r0, r5
    2e28:	4c05      	ldr	r4, [pc, #20]	; (2e40 <usb_d_cb_trans_setup+0x94>)
    2e2a:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2e2c:	2101      	movs	r1, #1
    2e2e:	0038      	movs	r0, r7
    2e30:	47a0      	blx	r4
    2e32:	e7d8      	b.n	2de6 <usb_d_cb_trans_setup+0x3a>
    2e34:	00002bf9 	.word	0x00002bf9
    2e38:	20000eac 	.word	0x20000eac
    2e3c:	0000511d 	.word	0x0000511d
    2e40:	00004fc5 	.word	0x00004fc5

00002e44 <usb_d_init>:

int32_t usb_d_init(void)
{
    2e44:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    2e46:	4b12      	ldr	r3, [pc, #72]	; (2e90 <usb_d_init+0x4c>)
    2e48:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    2e4a:	2800      	cmp	r0, #0
    2e4c:	db1e      	blt.n	2e8c <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2e4e:	2280      	movs	r2, #128	; 0x80
    2e50:	2100      	movs	r1, #0
    2e52:	4810      	ldr	r0, [pc, #64]	; (2e94 <usb_d_init+0x50>)
    2e54:	4b10      	ldr	r3, [pc, #64]	; (2e98 <usb_d_init+0x54>)
    2e56:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e58:	2200      	movs	r2, #0
    2e5a:	e00a      	b.n	2e72 <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2e5c:	0151      	lsls	r1, r2, #5
    2e5e:	4b0d      	ldr	r3, [pc, #52]	; (2e94 <usb_d_init+0x50>)
    2e60:	185b      	adds	r3, r3, r1
    2e62:	21ff      	movs	r1, #255	; 0xff
    2e64:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2e66:	490d      	ldr	r1, [pc, #52]	; (2e9c <usb_d_init+0x58>)
    2e68:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2e6a:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2e6c:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2e6e:	3201      	adds	r2, #1
    2e70:	b2d2      	uxtb	r2, r2
    2e72:	2a03      	cmp	r2, #3
    2e74:	d9f2      	bls.n	2e5c <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2e76:	490a      	ldr	r1, [pc, #40]	; (2ea0 <usb_d_init+0x5c>)
    2e78:	2000      	movs	r0, #0
    2e7a:	4c0a      	ldr	r4, [pc, #40]	; (2ea4 <usb_d_init+0x60>)
    2e7c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2e7e:	490a      	ldr	r1, [pc, #40]	; (2ea8 <usb_d_init+0x64>)
    2e80:	2001      	movs	r0, #1
    2e82:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2e84:	4909      	ldr	r1, [pc, #36]	; (2eac <usb_d_init+0x68>)
    2e86:	2002      	movs	r0, #2
    2e88:	47a0      	blx	r4
	return ERR_NONE;
    2e8a:	2000      	movs	r0, #0
}
    2e8c:	bd10      	pop	{r4, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	00004991 	.word	0x00004991
    2e94:	20000eac 	.word	0x20000eac
    2e98:	0000bf99 	.word	0x0000bf99
    2e9c:	00002c35 	.word	0x00002c35
    2ea0:	00002dad 	.word	0x00002dad
    2ea4:	000053d9 	.word	0x000053d9
    2ea8:	00002c39 	.word	0x00002c39
    2eac:	00002c69 	.word	0x00002c69

00002eb0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2eb0:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2eb2:	4b01      	ldr	r3, [pc, #4]	; (2eb8 <usb_d_register_callback+0x8>)
    2eb4:	4798      	blx	r3
}
    2eb6:	bd10      	pop	{r4, pc}
    2eb8:	000053b5 	.word	0x000053b5

00002ebc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2ebc:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    2ebe:	4b01      	ldr	r3, [pc, #4]	; (2ec4 <usb_d_enable+0x8>)
    2ec0:	4798      	blx	r3
}
    2ec2:	bd10      	pop	{r4, pc}
    2ec4:	00004a39 	.word	0x00004a39

00002ec8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2ec8:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    2eca:	4b01      	ldr	r3, [pc, #4]	; (2ed0 <usb_d_attach+0x8>)
    2ecc:	4798      	blx	r3
}
    2ece:	bd10      	pop	{r4, pc}
    2ed0:	00004a89 	.word	0x00004a89

00002ed4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2ed4:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    2ed6:	4b01      	ldr	r3, [pc, #4]	; (2edc <usb_d_set_address+0x8>)
    2ed8:	4798      	blx	r3
}
    2eda:	bd10      	pop	{r4, pc}
    2edc:	00004a99 	.word	0x00004a99

00002ee0 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ee2:	0005      	movs	r5, r0
    2ee4:	000e      	movs	r6, r1
    2ee6:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ee8:	4b0f      	ldr	r3, [pc, #60]	; (2f28 <usb_d_ep_init+0x48>)
    2eea:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2eec:	2800      	cmp	r0, #0
    2eee:	da14      	bge.n	2f1a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2ef0:	20ff      	movs	r0, #255	; 0xff
    2ef2:	4b0d      	ldr	r3, [pc, #52]	; (2f28 <usb_d_ep_init+0x48>)
    2ef4:	4798      	blx	r3
    2ef6:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    2ef8:	db12      	blt.n	2f20 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2efa:	003a      	movs	r2, r7
    2efc:	0031      	movs	r1, r6
    2efe:	0028      	movs	r0, r5
    2f00:	4b0a      	ldr	r3, [pc, #40]	; (2f2c <usb_d_ep_init+0x4c>)
    2f02:	4798      	blx	r3
	if (rc < 0) {
    2f04:	2800      	cmp	r0, #0
    2f06:	db07      	blt.n	2f18 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2f08:	4a09      	ldr	r2, [pc, #36]	; (2f30 <usb_d_ep_init+0x50>)
    2f0a:	0164      	lsls	r4, r4, #5
    2f0c:	1913      	adds	r3, r2, r4
    2f0e:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2f10:	2303      	movs	r3, #3
    2f12:	401e      	ands	r6, r3
    2f14:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    2f16:	2000      	movs	r0, #0
}
    2f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2f1a:	2014      	movs	r0, #20
    2f1c:	4240      	negs	r0, r0
    2f1e:	e7fb      	b.n	2f18 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    2f20:	2015      	movs	r0, #21
    2f22:	4240      	negs	r0, r0
    2f24:	e7f8      	b.n	2f18 <usb_d_ep_init+0x38>
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	00002bf9 	.word	0x00002bf9
    2f2c:	00004aad 	.word	0x00004aad
    2f30:	20000eac 	.word	0x20000eac

00002f34 <usb_d_ep0_init>:
{
    2f34:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2f36:	b282      	uxth	r2, r0
    2f38:	2100      	movs	r1, #0
    2f3a:	2000      	movs	r0, #0
    2f3c:	4b01      	ldr	r3, [pc, #4]	; (2f44 <usb_d_ep0_init+0x10>)
    2f3e:	4798      	blx	r3
}
    2f40:	bd10      	pop	{r4, pc}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	00002ee1 	.word	0x00002ee1

00002f48 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2f48:	b570      	push	{r4, r5, r6, lr}
    2f4a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f4c:	4b06      	ldr	r3, [pc, #24]	; (2f68 <usb_d_ep_deinit+0x20>)
    2f4e:	4798      	blx	r3
    2f50:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2f52:	db07      	blt.n	2f64 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2f54:	0028      	movs	r0, r5
    2f56:	4b05      	ldr	r3, [pc, #20]	; (2f6c <usb_d_ep_deinit+0x24>)
    2f58:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2f5a:	0164      	lsls	r4, r4, #5
    2f5c:	4b04      	ldr	r3, [pc, #16]	; (2f70 <usb_d_ep_deinit+0x28>)
    2f5e:	191c      	adds	r4, r3, r4
    2f60:	23ff      	movs	r3, #255	; 0xff
    2f62:	7063      	strb	r3, [r4, #1]
}
    2f64:	bd70      	pop	{r4, r5, r6, pc}
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	00002bf9 	.word	0x00002bf9
    2f6c:	00004bf9 	.word	0x00004bf9
    2f70:	20000eac 	.word	0x20000eac

00002f74 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2f74:	b570      	push	{r4, r5, r6, lr}
    2f76:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f78:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <usb_d_ep_enable+0x44>)
    2f7a:	4798      	blx	r3
    2f7c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2f7e:	db17      	blt.n	2fb0 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2f80:	0143      	lsls	r3, r0, #5
    2f82:	4a0e      	ldr	r2, [pc, #56]	; (2fbc <usb_d_ep_enable+0x48>)
    2f84:	5c9b      	ldrb	r3, [r3, r2]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d10a      	bne.n	2fa0 <usb_d_ep_enable+0x2c>
    2f8a:	2102      	movs	r1, #2
    2f8c:	0162      	lsls	r2, r4, #5
    2f8e:	4b0b      	ldr	r3, [pc, #44]	; (2fbc <usb_d_ep_enable+0x48>)
    2f90:	189b      	adds	r3, r3, r2
    2f92:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2f94:	0028      	movs	r0, r5
    2f96:	4b0a      	ldr	r3, [pc, #40]	; (2fc0 <usb_d_ep_enable+0x4c>)
    2f98:	4798      	blx	r3
	if (rc < 0) {
    2f9a:	2800      	cmp	r0, #0
    2f9c:	db02      	blt.n	2fa4 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    2f9e:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2fa0:	2101      	movs	r1, #1
    2fa2:	e7f3      	b.n	2f8c <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2fa4:	0164      	lsls	r4, r4, #5
    2fa6:	4b05      	ldr	r3, [pc, #20]	; (2fbc <usb_d_ep_enable+0x48>)
    2fa8:	191c      	adds	r4, r3, r4
    2faa:	2300      	movs	r3, #0
    2fac:	70a3      	strb	r3, [r4, #2]
    2fae:	e7f6      	b.n	2f9e <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    2fb0:	2012      	movs	r0, #18
    2fb2:	4240      	negs	r0, r0
    2fb4:	e7f3      	b.n	2f9e <usb_d_ep_enable+0x2a>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	00002bf9 	.word	0x00002bf9
    2fbc:	20000eac 	.word	0x20000eac
    2fc0:	00004cbd 	.word	0x00004cbd

00002fc4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fc6:	46d6      	mov	lr, sl
    2fc8:	464f      	mov	r7, r9
    2fca:	4646      	mov	r6, r8
    2fcc:	b5c0      	push	{r6, r7, lr}
    2fce:	b086      	sub	sp, #24
    2fd0:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2fd2:	7a06      	ldrb	r6, [r0, #8]
    2fd4:	0030      	movs	r0, r6
    2fd6:	4b3f      	ldr	r3, [pc, #252]	; (30d4 <usb_d_ep_transfer+0x110>)
    2fd8:	4798      	blx	r3
    2fda:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2fdc:	09f6      	lsrs	r6, r6, #7
    2fde:	7a6b      	ldrb	r3, [r5, #9]
    2fe0:	1e5a      	subs	r2, r3, #1
    2fe2:	4193      	sbcs	r3, r2
    2fe4:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    2fe6:	686b      	ldr	r3, [r5, #4]
    2fe8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2fea:	2800      	cmp	r0, #0
    2fec:	db6b      	blt.n	30c6 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    2fee:	a804      	add	r0, sp, #16
    2ff0:	4b39      	ldr	r3, [pc, #228]	; (30d8 <usb_d_ep_transfer+0x114>)
    2ff2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2ff4:	017a      	lsls	r2, r7, #5
    2ff6:	4b39      	ldr	r3, [pc, #228]	; (30dc <usb_d_ep_transfer+0x118>)
    2ff8:	189b      	adds	r3, r3, r2
    2ffa:	789a      	ldrb	r2, [r3, #2]
    2ffc:	2317      	movs	r3, #23
    2ffe:	446b      	add	r3, sp
    3000:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    3002:	781b      	ldrb	r3, [r3, #0]
    3004:	2b01      	cmp	r3, #1
    3006:	d00e      	beq.n	3026 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    3008:	a804      	add	r0, sp, #16
    300a:	4b35      	ldr	r3, [pc, #212]	; (30e0 <usb_d_ep_transfer+0x11c>)
    300c:	4798      	blx	r3
		switch (state) {
    300e:	2317      	movs	r3, #23
    3010:	446b      	add	r3, sp
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	b2db      	uxtb	r3, r3
    3016:	2b05      	cmp	r3, #5
    3018:	d02b      	beq.n	3072 <usb_d_ep_transfer+0xae>
    301a:	2b06      	cmp	r3, #6
    301c:	d056      	beq.n	30cc <usb_d_ep_transfer+0x108>
    301e:	2b00      	cmp	r3, #0
    3020:	d029      	beq.n	3076 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    3022:	2001      	movs	r0, #1
    3024:	e01f      	b.n	3066 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3026:	4b2d      	ldr	r3, [pc, #180]	; (30dc <usb_d_ep_transfer+0x118>)
    3028:	4699      	mov	r9, r3
    302a:	017b      	lsls	r3, r7, #5
    302c:	469a      	mov	sl, r3
    302e:	464b      	mov	r3, r9
    3030:	4453      	add	r3, sl
    3032:	2203      	movs	r2, #3
    3034:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3036:	a804      	add	r0, sp, #16
    3038:	4b29      	ldr	r3, [pc, #164]	; (30e0 <usb_d_ep_transfer+0x11c>)
    303a:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    303c:	464b      	mov	r3, r9
    303e:	4652      	mov	r2, sl
    3040:	5cd3      	ldrb	r3, [r2, r3]
    3042:	2b00      	cmp	r3, #0
    3044:	d01a      	beq.n	307c <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3046:	7a29      	ldrb	r1, [r5, #8]
    3048:	682b      	ldr	r3, [r5, #0]
    304a:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    304c:	4643      	mov	r3, r8
    304e:	9302      	str	r3, [sp, #8]
    3050:	2e00      	cmp	r6, #0
    3052:	d035      	beq.n	30c0 <usb_d_ep_transfer+0xfc>
    3054:	2280      	movs	r2, #128	; 0x80
    3056:	4252      	negs	r2, r2
    3058:	430a      	orrs	r2, r1
    305a:	b2d2      	uxtb	r2, r2
    305c:	a801      	add	r0, sp, #4
    305e:	7202      	strb	r2, [r0, #8]
    3060:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    3062:	4b20      	ldr	r3, [pc, #128]	; (30e4 <usb_d_ep_transfer+0x120>)
    3064:	4798      	blx	r3
	return rc;
}
    3066:	b006      	add	sp, #24
    3068:	bc1c      	pop	{r2, r3, r4}
    306a:	4690      	mov	r8, r2
    306c:	4699      	mov	r9, r3
    306e:	46a2      	mov	sl, r4
    3070:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    3072:	2002      	movs	r0, #2
    3074:	e7f7      	b.n	3066 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
    3076:	2013      	movs	r0, #19
    3078:	4240      	negs	r0, r0
    307a:	e7f4      	b.n	3066 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    307c:	017b      	lsls	r3, r7, #5
    307e:	4a17      	ldr	r2, [pc, #92]	; (30dc <usb_d_ep_transfer+0x118>)
    3080:	18d2      	adds	r2, r2, r3
    3082:	7c93      	ldrb	r3, [r2, #18]
    3084:	7cd4      	ldrb	r4, [r2, #19]
    3086:	0224      	lsls	r4, r4, #8
    3088:	191b      	adds	r3, r3, r4
    308a:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    308c:	2b00      	cmp	r3, #0
    308e:	d106      	bne.n	309e <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3090:	2304      	movs	r3, #4
    3092:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    3094:	2300      	movs	r3, #0
    3096:	4698      	mov	r8, r3
			zlp                 = true;
    3098:	2401      	movs	r4, #1
			dir                 = true;
    309a:	2601      	movs	r6, #1
    309c:	e7d3      	b.n	3046 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    309e:	017f      	lsls	r7, r7, #5
    30a0:	4a0e      	ldr	r2, [pc, #56]	; (30dc <usb_d_ep_transfer+0x118>)
    30a2:	19d7      	adds	r7, r2, r7
    30a4:	220c      	movs	r2, #12
    30a6:	56ba      	ldrsb	r2, [r7, r2]
    30a8:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    30aa:	4598      	cmp	r8, r3
    30ac:	d900      	bls.n	30b0 <usb_d_ep_transfer+0xec>
				len = req_len;
    30ae:	4698      	mov	r8, r3
			if (dir) {
    30b0:	2a00      	cmp	r2, #0
    30b2:	db01      	blt.n	30b8 <usb_d_ep_transfer+0xf4>
				zlp = false;
    30b4:	2400      	movs	r4, #0
    30b6:	e7c6      	b.n	3046 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    30b8:	4598      	cmp	r8, r3
    30ba:	419b      	sbcs	r3, r3
    30bc:	425c      	negs	r4, r3
    30be:	e7c2      	b.n	3046 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    30c0:	220f      	movs	r2, #15
    30c2:	400a      	ands	r2, r1
    30c4:	e7ca      	b.n	305c <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    30c6:	2012      	movs	r0, #18
    30c8:	4240      	negs	r0, r0
    30ca:	e7cc      	b.n	3066 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    30cc:	2010      	movs	r0, #16
    30ce:	4240      	negs	r0, r0
    30d0:	e7c9      	b.n	3066 <usb_d_ep_transfer+0xa2>
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	00002bf9 	.word	0x00002bf9
    30d8:	00002319 	.word	0x00002319
    30dc:	20000eac 	.word	0x20000eac
    30e0:	00002327 	.word	0x00002327
    30e4:	00005195 	.word	0x00005195

000030e8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    30e8:	b570      	push	{r4, r5, r6, lr}
    30ea:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    30ec:	4b07      	ldr	r3, [pc, #28]	; (310c <usb_d_ep_abort+0x24>)
    30ee:	4798      	blx	r3
    30f0:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    30f2:	db09      	blt.n	3108 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    30f4:	0028      	movs	r0, r5
    30f6:	4b06      	ldr	r3, [pc, #24]	; (3110 <usb_d_ep_abort+0x28>)
    30f8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    30fa:	0164      	lsls	r4, r4, #5
    30fc:	4b05      	ldr	r3, [pc, #20]	; (3114 <usb_d_ep_abort+0x2c>)
    30fe:	191c      	adds	r4, r3, r4
    3100:	2301      	movs	r3, #1
    3102:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3104:	3303      	adds	r3, #3
    3106:	70e3      	strb	r3, [r4, #3]
}
    3108:	bd70      	pop	{r4, r5, r6, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	00002bf9 	.word	0x00002bf9
    3110:	00005371 	.word	0x00005371
    3114:	20000eac 	.word	0x20000eac

00003118 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3118:	b570      	push	{r4, r5, r6, lr}
    311a:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    311c:	2900      	cmp	r1, #0
    311e:	d005      	beq.n	312c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    3120:	2901      	cmp	r1, #1
    3122:	d024      	beq.n	316e <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3124:	2102      	movs	r1, #2
    3126:	4b13      	ldr	r3, [pc, #76]	; (3174 <usb_d_ep_halt+0x5c>)
    3128:	4798      	blx	r3
	}
}
    312a:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    312c:	4b12      	ldr	r3, [pc, #72]	; (3178 <usb_d_ep_halt+0x60>)
    312e:	4798      	blx	r3
    3130:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    3132:	db19      	blt.n	3168 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3134:	2102      	movs	r1, #2
    3136:	0020      	movs	r0, r4
    3138:	4b0e      	ldr	r3, [pc, #56]	; (3174 <usb_d_ep_halt+0x5c>)
    313a:	4798      	blx	r3
    313c:	2800      	cmp	r0, #0
    313e:	d0f4      	beq.n	312a <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3140:	2100      	movs	r1, #0
    3142:	0020      	movs	r0, r4
    3144:	4b0b      	ldr	r3, [pc, #44]	; (3174 <usb_d_ep_halt+0x5c>)
    3146:	4798      	blx	r3
		if (rc < 0) {
    3148:	2800      	cmp	r0, #0
    314a:	dbee      	blt.n	312a <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    314c:	016d      	lsls	r5, r5, #5
    314e:	4b0b      	ldr	r3, [pc, #44]	; (317c <usb_d_ep_halt+0x64>)
    3150:	195d      	adds	r5, r3, r5
    3152:	2301      	movs	r3, #1
    3154:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3156:	3302      	adds	r3, #2
    3158:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    315a:	69eb      	ldr	r3, [r5, #28]
    315c:	2200      	movs	r2, #0
    315e:	2103      	movs	r1, #3
    3160:	0020      	movs	r0, r4
    3162:	4798      	blx	r3
	return ERR_NONE;
    3164:	2000      	movs	r0, #0
    3166:	e7e0      	b.n	312a <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    3168:	2012      	movs	r0, #18
    316a:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    316c:	e7dd      	b.n	312a <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    316e:	4b01      	ldr	r3, [pc, #4]	; (3174 <usb_d_ep_halt+0x5c>)
    3170:	4798      	blx	r3
    3172:	e7da      	b.n	312a <usb_d_ep_halt+0x12>
    3174:	00004fc5 	.word	0x00004fc5
    3178:	00002bf9 	.word	0x00002bf9
    317c:	20000eac 	.word	0x20000eac

00003180 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3180:	b570      	push	{r4, r5, r6, lr}
    3182:	000d      	movs	r5, r1
    3184:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    3186:	4b0f      	ldr	r3, [pc, #60]	; (31c4 <usb_d_ep_register_callback+0x44>)
    3188:	4798      	blx	r3
    318a:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    318c:	2c00      	cmp	r4, #0
    318e:	d008      	beq.n	31a2 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    3190:	2b00      	cmp	r3, #0
    3192:	db05      	blt.n	31a0 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    3194:	2d01      	cmp	r5, #1
    3196:	d00b      	beq.n	31b0 <usb_d_ep_register_callback+0x30>
    3198:	2d00      	cmp	r5, #0
    319a:	d004      	beq.n	31a6 <usb_d_ep_register_callback+0x26>
    319c:	2d02      	cmp	r5, #2
    319e:	d00c      	beq.n	31ba <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    31a0:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    31a2:	4c09      	ldr	r4, [pc, #36]	; (31c8 <usb_d_ep_register_callback+0x48>)
    31a4:	e7f4      	b.n	3190 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    31a6:	0140      	lsls	r0, r0, #5
    31a8:	4b08      	ldr	r3, [pc, #32]	; (31cc <usb_d_ep_register_callback+0x4c>)
    31aa:	1818      	adds	r0, r3, r0
    31ac:	6144      	str	r4, [r0, #20]
		break;
    31ae:	e7f7      	b.n	31a0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    31b0:	0140      	lsls	r0, r0, #5
    31b2:	4b06      	ldr	r3, [pc, #24]	; (31cc <usb_d_ep_register_callback+0x4c>)
    31b4:	1818      	adds	r0, r3, r0
    31b6:	6184      	str	r4, [r0, #24]
		break;
    31b8:	e7f2      	b.n	31a0 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    31ba:	0140      	lsls	r0, r0, #5
    31bc:	4b03      	ldr	r3, [pc, #12]	; (31cc <usb_d_ep_register_callback+0x4c>)
    31be:	1818      	adds	r0, r3, r0
    31c0:	61c4      	str	r4, [r0, #28]
		break;
    31c2:	e7ed      	b.n	31a0 <usb_d_ep_register_callback+0x20>
    31c4:	00002bf9 	.word	0x00002bf9
    31c8:	00002c35 	.word	0x00002c35
    31cc:	20000eac 	.word	0x20000eac

000031d0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    31d0:	2800      	cmp	r0, #0
    31d2:	d100      	bne.n	31d6 <assert+0x6>
		__asm("BKPT #0");
    31d4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    31d6:	4770      	bx	lr

000031d8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    31d8:	6803      	ldr	r3, [r0, #0]
    31da:	2b00      	cmp	r3, #0
    31dc:	d003      	beq.n	31e6 <is_list_element+0xe>
		if (it == element) {
    31de:	428b      	cmp	r3, r1
    31e0:	d003      	beq.n	31ea <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	e7f9      	b.n	31da <is_list_element+0x2>
			return true;
		}
	}

	return false;
    31e6:	2000      	movs	r0, #0
}
    31e8:	4770      	bx	lr
			return true;
    31ea:	2001      	movs	r0, #1
    31ec:	e7fc      	b.n	31e8 <is_list_element+0x10>
	...

000031f0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    31f0:	b570      	push	{r4, r5, r6, lr}
    31f2:	0004      	movs	r4, r0
    31f4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    31f6:	4b06      	ldr	r3, [pc, #24]	; (3210 <list_insert_as_head+0x20>)
    31f8:	4798      	blx	r3
    31fa:	2301      	movs	r3, #1
    31fc:	4058      	eors	r0, r3
    31fe:	b2c0      	uxtb	r0, r0
    3200:	2239      	movs	r2, #57	; 0x39
    3202:	4904      	ldr	r1, [pc, #16]	; (3214 <list_insert_as_head+0x24>)
    3204:	4b04      	ldr	r3, [pc, #16]	; (3218 <list_insert_as_head+0x28>)
    3206:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3208:	6823      	ldr	r3, [r4, #0]
    320a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    320c:	6025      	str	r5, [r4, #0]
}
    320e:	bd70      	pop	{r4, r5, r6, pc}
    3210:	000031d9 	.word	0x000031d9
    3214:	00010f14 	.word	0x00010f14
    3218:	000031d1 	.word	0x000031d1

0000321c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    321c:	6803      	ldr	r3, [r0, #0]
    321e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3220:	6001      	str	r1, [r0, #0]
}
    3222:	4770      	bx	lr

00003224 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3224:	b570      	push	{r4, r5, r6, lr}
    3226:	0005      	movs	r5, r0
    3228:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    322a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    322c:	4b0a      	ldr	r3, [pc, #40]	; (3258 <list_insert_at_end+0x34>)
    322e:	4798      	blx	r3
    3230:	2301      	movs	r3, #1
    3232:	4058      	eors	r0, r3
    3234:	b2c0      	uxtb	r0, r0
    3236:	224f      	movs	r2, #79	; 0x4f
    3238:	4908      	ldr	r1, [pc, #32]	; (325c <list_insert_at_end+0x38>)
    323a:	4b09      	ldr	r3, [pc, #36]	; (3260 <list_insert_at_end+0x3c>)
    323c:	4798      	blx	r3

	if (!list->head) {
    323e:	682b      	ldr	r3, [r5, #0]
    3240:	2b00      	cmp	r3, #0
    3242:	d103      	bne.n	324c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    3244:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3246:	6033      	str	r3, [r6, #0]
		return;
    3248:	e005      	b.n	3256 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    324a:	001c      	movs	r4, r3
	while (it->next) {
    324c:	6823      	ldr	r3, [r4, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d1fb      	bne.n	324a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    3252:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3254:	6033      	str	r3, [r6, #0]
}
    3256:	bd70      	pop	{r4, r5, r6, pc}
    3258:	000031d9 	.word	0x000031d9
    325c:	00010f14 	.word	0x00010f14
    3260:	000031d1 	.word	0x000031d1

00003264 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    3264:	6803      	ldr	r3, [r0, #0]
    3266:	2b00      	cmp	r3, #0
    3268:	d003      	beq.n	3272 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    326a:	681a      	ldr	r2, [r3, #0]
    326c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    326e:	0018      	movs	r0, r3
	}

	return NULL;
}
    3270:	4770      	bx	lr
	return NULL;
    3272:	2000      	movs	r0, #0
    3274:	e7fc      	b.n	3270 <list_remove_head+0xc>

00003276 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    3276:	2900      	cmp	r1, #0
    3278:	d012      	beq.n	32a0 <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
    327a:	6803      	ldr	r3, [r0, #0]
    327c:	4299      	cmp	r1, r3
    327e:	d104      	bne.n	328a <list_delete_element+0x14>
		list->head = list->head->next;
    3280:	681b      	ldr	r3, [r3, #0]
    3282:	6003      	str	r3, [r0, #0]
		return true;
    3284:	2001      	movs	r0, #1
    3286:	e00a      	b.n	329e <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
    3288:	0013      	movs	r3, r2
		while (it && it->next != element) {
    328a:	2b00      	cmp	r3, #0
    328c:	d002      	beq.n	3294 <list_delete_element+0x1e>
    328e:	681a      	ldr	r2, [r3, #0]
    3290:	4291      	cmp	r1, r2
    3292:	d1f9      	bne.n	3288 <list_delete_element+0x12>
		}
		if (it) {
    3294:	2b00      	cmp	r3, #0
    3296:	d005      	beq.n	32a4 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
    3298:	680a      	ldr	r2, [r1, #0]
    329a:	601a      	str	r2, [r3, #0]
			return true;
    329c:	2001      	movs	r0, #1
		}
	}

	return false;
}
    329e:	4770      	bx	lr
		return false;
    32a0:	2000      	movs	r0, #0
    32a2:	e7fc      	b.n	329e <list_delete_element+0x28>
	return false;
    32a4:	2000      	movs	r0, #0
    32a6:	e7fa      	b.n	329e <list_delete_element+0x28>

000032a8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    32a8:	b570      	push	{r4, r5, r6, lr}
    32aa:	0004      	movs	r4, r0
    32ac:	000e      	movs	r6, r1
    32ae:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    32b0:	2800      	cmp	r0, #0
    32b2:	d012      	beq.n	32da <ringbuffer_init+0x32>
    32b4:	2900      	cmp	r1, #0
    32b6:	d012      	beq.n	32de <ringbuffer_init+0x36>
    32b8:	2a00      	cmp	r2, #0
    32ba:	d112      	bne.n	32e2 <ringbuffer_init+0x3a>
    32bc:	2000      	movs	r0, #0
    32be:	2228      	movs	r2, #40	; 0x28
    32c0:	490a      	ldr	r1, [pc, #40]	; (32ec <ringbuffer_init+0x44>)
    32c2:	4b0b      	ldr	r3, [pc, #44]	; (32f0 <ringbuffer_init+0x48>)
    32c4:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    32c6:	1e6b      	subs	r3, r5, #1
    32c8:	422b      	tst	r3, r5
    32ca:	d10c      	bne.n	32e6 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    32cc:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    32ce:	2300      	movs	r3, #0
    32d0:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    32d2:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    32d4:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    32d6:	2000      	movs	r0, #0
}
    32d8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    32da:	2000      	movs	r0, #0
    32dc:	e7ef      	b.n	32be <ringbuffer_init+0x16>
    32de:	2000      	movs	r0, #0
    32e0:	e7ed      	b.n	32be <ringbuffer_init+0x16>
    32e2:	2001      	movs	r0, #1
    32e4:	e7eb      	b.n	32be <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    32e6:	200d      	movs	r0, #13
    32e8:	4240      	negs	r0, r0
    32ea:	e7f5      	b.n	32d8 <ringbuffer_init+0x30>
    32ec:	00010f34 	.word	0x00010f34
    32f0:	000031d1 	.word	0x000031d1

000032f4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    32f4:	b570      	push	{r4, r5, r6, lr}
    32f6:	0004      	movs	r4, r0
    32f8:	000d      	movs	r5, r1
	ASSERT(rb && data);
    32fa:	2800      	cmp	r0, #0
    32fc:	d016      	beq.n	332c <ringbuffer_get+0x38>
    32fe:	2900      	cmp	r1, #0
    3300:	d012      	beq.n	3328 <ringbuffer_get+0x34>
    3302:	2001      	movs	r0, #1
    3304:	2240      	movs	r2, #64	; 0x40
    3306:	490c      	ldr	r1, [pc, #48]	; (3338 <ringbuffer_get+0x44>)
    3308:	4b0c      	ldr	r3, [pc, #48]	; (333c <ringbuffer_get+0x48>)
    330a:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    330c:	68a3      	ldr	r3, [r4, #8]
    330e:	68e2      	ldr	r2, [r4, #12]
    3310:	429a      	cmp	r2, r3
    3312:	d00d      	beq.n	3330 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    3314:	6862      	ldr	r2, [r4, #4]
    3316:	4013      	ands	r3, r2
    3318:	6822      	ldr	r2, [r4, #0]
    331a:	5cd3      	ldrb	r3, [r2, r3]
    331c:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    331e:	68a3      	ldr	r3, [r4, #8]
    3320:	3301      	adds	r3, #1
    3322:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    3324:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    3326:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    3328:	2000      	movs	r0, #0
    332a:	e7eb      	b.n	3304 <ringbuffer_get+0x10>
    332c:	2000      	movs	r0, #0
    332e:	e7e9      	b.n	3304 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    3330:	200a      	movs	r0, #10
    3332:	4240      	negs	r0, r0
    3334:	e7f7      	b.n	3326 <ringbuffer_get+0x32>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	00010f34 	.word	0x00010f34
    333c:	000031d1 	.word	0x000031d1

00003340 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    3340:	b570      	push	{r4, r5, r6, lr}
    3342:	0004      	movs	r4, r0
    3344:	000d      	movs	r5, r1
	ASSERT(rb);
    3346:	1e43      	subs	r3, r0, #1
    3348:	4198      	sbcs	r0, r3
    334a:	b2c0      	uxtb	r0, r0
    334c:	2251      	movs	r2, #81	; 0x51
    334e:	490a      	ldr	r1, [pc, #40]	; (3378 <ringbuffer_put+0x38>)
    3350:	4b0a      	ldr	r3, [pc, #40]	; (337c <ringbuffer_put+0x3c>)
    3352:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    3354:	6863      	ldr	r3, [r4, #4]
    3356:	68e2      	ldr	r2, [r4, #12]
    3358:	4013      	ands	r3, r2
    335a:	6822      	ldr	r2, [r4, #0]
    335c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    335e:	68e3      	ldr	r3, [r4, #12]
    3360:	68a2      	ldr	r2, [r4, #8]
    3362:	1a9a      	subs	r2, r3, r2
    3364:	6861      	ldr	r1, [r4, #4]
    3366:	428a      	cmp	r2, r1
    3368:	d901      	bls.n	336e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    336a:	1a59      	subs	r1, r3, r1
    336c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    336e:	3301      	adds	r3, #1
    3370:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    3372:	2000      	movs	r0, #0
    3374:	bd70      	pop	{r4, r5, r6, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	00010f34 	.word	0x00010f34
    337c:	000031d1 	.word	0x000031d1

00003380 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    3380:	b510      	push	{r4, lr}
    3382:	0004      	movs	r4, r0
	ASSERT(rb);
    3384:	1e43      	subs	r3, r0, #1
    3386:	4198      	sbcs	r0, r3
    3388:	b2c0      	uxtb	r0, r0
    338a:	2267      	movs	r2, #103	; 0x67
    338c:	4903      	ldr	r1, [pc, #12]	; (339c <ringbuffer_num+0x1c>)
    338e:	4b04      	ldr	r3, [pc, #16]	; (33a0 <ringbuffer_num+0x20>)
    3390:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    3392:	68e0      	ldr	r0, [r4, #12]
    3394:	68a3      	ldr	r3, [r4, #8]
    3396:	1ac0      	subs	r0, r0, r3
}
    3398:	bd10      	pop	{r4, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00010f34 	.word	0x00010f34
    33a0:	000031d1 	.word	0x000031d1

000033a4 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    33a4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    33a6:	2b00      	cmp	r3, #0
    33a8:	db07      	blt.n	33ba <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33aa:	231f      	movs	r3, #31
    33ac:	4018      	ands	r0, r3
    33ae:	3b1e      	subs	r3, #30
    33b0:	4083      	lsls	r3, r0
    33b2:	2280      	movs	r2, #128	; 0x80
    33b4:	0052      	lsls	r2, r2, #1
    33b6:	4901      	ldr	r1, [pc, #4]	; (33bc <_irq_set+0x18>)
    33b8:	508b      	str	r3, [r1, r2]
}
    33ba:	4770      	bx	lr
    33bc:	e000e100 	.word	0xe000e100

000033c0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    33c0:	0103      	lsls	r3, r0, #4
    33c2:	1a1b      	subs	r3, r3, r0
    33c4:	015a      	lsls	r2, r3, #5
    33c6:	2064      	movs	r0, #100	; 0x64
    33c8:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    33ca:	4770      	bx	lr

000033cc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    33cc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    33ce:	4b06      	ldr	r3, [pc, #24]	; (33e8 <_init_chip+0x1c>)
    33d0:	685a      	ldr	r2, [r3, #4]
    33d2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    33d4:	4b05      	ldr	r3, [pc, #20]	; (33ec <_init_chip+0x20>)
    33d6:	4798      	blx	r3
	_sysctrl_init_sources();
    33d8:	4b05      	ldr	r3, [pc, #20]	; (33f0 <_init_chip+0x24>)
    33da:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    33dc:	4b05      	ldr	r3, [pc, #20]	; (33f4 <_init_chip+0x28>)
    33de:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    33e0:	20ff      	movs	r0, #255	; 0xff
    33e2:	4b05      	ldr	r3, [pc, #20]	; (33f8 <_init_chip+0x2c>)
    33e4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    33e6:	bd10      	pop	{r4, pc}
    33e8:	41004000 	.word	0x41004000
    33ec:	000036e9 	.word	0x000036e9
    33f0:	00003d01 	.word	0x00003d01
    33f4:	00003d5d 	.word	0x00003d5d
    33f8:	00003615 	.word	0x00003615

000033fc <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    33fc:	79c3      	ldrb	r3, [r0, #7]
    33fe:	09db      	lsrs	r3, r3, #7
    3400:	d1fc      	bne.n	33fc <_dac_init>
    3402:	79c3      	ldrb	r3, [r0, #7]
    3404:	09db      	lsrs	r3, r3, #7
    3406:	d1fc      	bne.n	3402 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    3408:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    340a:	079b      	lsls	r3, r3, #30
    340c:	d507      	bpl.n	341e <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    340e:	2300      	movs	r3, #0
    3410:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3412:	79c3      	ldrb	r3, [r0, #7]
    3414:	09db      	lsrs	r3, r3, #7
    3416:	d1fc      	bne.n	3412 <_dac_init+0x16>
    3418:	79c3      	ldrb	r3, [r0, #7]
    341a:	09db      	lsrs	r3, r3, #7
    341c:	d1fc      	bne.n	3418 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    341e:	2301      	movs	r3, #1
    3420:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3422:	79c3      	ldrb	r3, [r0, #7]
    3424:	09db      	lsrs	r3, r3, #7
    3426:	d1fc      	bne.n	3422 <_dac_init+0x26>
    3428:	79c3      	ldrb	r3, [r0, #7]
    342a:	09db      	lsrs	r3, r3, #7
    342c:	d1fc      	bne.n	3428 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    342e:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    3430:	2241      	movs	r2, #65	; 0x41
    3432:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    3434:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3436:	79c3      	ldrb	r3, [r0, #7]
    3438:	09db      	lsrs	r3, r3, #7
    343a:	d1fc      	bne.n	3436 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    343c:	2000      	movs	r0, #0
    343e:	4770      	bx	lr

00003440 <_dac_sync_init>:
{
    3440:	b570      	push	{r4, r5, r6, lr}
    3442:	0005      	movs	r5, r0
    3444:	000c      	movs	r4, r1
	ASSERT(device);
    3446:	1e43      	subs	r3, r0, #1
    3448:	4198      	sbcs	r0, r3
    344a:	b2c0      	uxtb	r0, r0
    344c:	2249      	movs	r2, #73	; 0x49
    344e:	4904      	ldr	r1, [pc, #16]	; (3460 <_dac_sync_init+0x20>)
    3450:	4b04      	ldr	r3, [pc, #16]	; (3464 <_dac_sync_init+0x24>)
    3452:	4798      	blx	r3
	device->hw = hw;
    3454:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    3456:	0020      	movs	r0, r4
    3458:	4b03      	ldr	r3, [pc, #12]	; (3468 <_dac_sync_init+0x28>)
    345a:	4798      	blx	r3
}
    345c:	bd70      	pop	{r4, r5, r6, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00010f58 	.word	0x00010f58
    3464:	000031d1 	.word	0x000031d1
    3468:	000033fd 	.word	0x000033fd

0000346c <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    346c:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    346e:	7813      	ldrb	r3, [r2, #0]
    3470:	2102      	movs	r1, #2
    3472:	430b      	orrs	r3, r1
    3474:	b2db      	uxtb	r3, r3
    3476:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3478:	79d3      	ldrb	r3, [r2, #7]
    347a:	09db      	lsrs	r3, r3, #7
    347c:	d1fc      	bne.n	3478 <_dac_sync_enable_channel+0xc>
}
    347e:	4770      	bx	lr

00003480 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    3480:	4b20      	ldr	r3, [pc, #128]	; (3504 <_ext_irq_init+0x84>)
    3482:	785b      	ldrb	r3, [r3, #1]
    3484:	09db      	lsrs	r3, r3, #7
    3486:	d1fb      	bne.n	3480 <_ext_irq_init>
    3488:	4b1e      	ldr	r3, [pc, #120]	; (3504 <_ext_irq_init+0x84>)
    348a:	785b      	ldrb	r3, [r3, #1]
    348c:	09db      	lsrs	r3, r3, #7
    348e:	d1fb      	bne.n	3488 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    3490:	4b1c      	ldr	r3, [pc, #112]	; (3504 <_ext_irq_init+0x84>)
    3492:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    3494:	079b      	lsls	r3, r3, #30
    3496:	d50a      	bpl.n	34ae <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    3498:	2200      	movs	r2, #0
    349a:	4b1a      	ldr	r3, [pc, #104]	; (3504 <_ext_irq_init+0x84>)
    349c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    349e:	4b19      	ldr	r3, [pc, #100]	; (3504 <_ext_irq_init+0x84>)
    34a0:	785b      	ldrb	r3, [r3, #1]
    34a2:	09db      	lsrs	r3, r3, #7
    34a4:	d1fb      	bne.n	349e <_ext_irq_init+0x1e>
    34a6:	4b17      	ldr	r3, [pc, #92]	; (3504 <_ext_irq_init+0x84>)
    34a8:	785b      	ldrb	r3, [r3, #1]
    34aa:	09db      	lsrs	r3, r3, #7
    34ac:	d1fb      	bne.n	34a6 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    34ae:	2201      	movs	r2, #1
    34b0:	4b14      	ldr	r3, [pc, #80]	; (3504 <_ext_irq_init+0x84>)
    34b2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    34b4:	4b13      	ldr	r3, [pc, #76]	; (3504 <_ext_irq_init+0x84>)
    34b6:	785b      	ldrb	r3, [r3, #1]
    34b8:	09db      	lsrs	r3, r3, #7
    34ba:	d1fb      	bne.n	34b4 <_ext_irq_init+0x34>
    34bc:	4b11      	ldr	r3, [pc, #68]	; (3504 <_ext_irq_init+0x84>)
    34be:	785b      	ldrb	r3, [r3, #1]
    34c0:	09db      	lsrs	r3, r3, #7
    34c2:	d1fb      	bne.n	34bc <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    34c4:	4b0f      	ldr	r3, [pc, #60]	; (3504 <_ext_irq_init+0x84>)
    34c6:	2200      	movs	r2, #0
    34c8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    34ca:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    34cc:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    34ce:	619a      	str	r2, [r3, #24]
    34d0:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    34d2:	781a      	ldrb	r2, [r3, #0]
    34d4:	2102      	movs	r1, #2
    34d6:	430a      	orrs	r2, r1
    34d8:	b2d2      	uxtb	r2, r2
    34da:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    34dc:	4b09      	ldr	r3, [pc, #36]	; (3504 <_ext_irq_init+0x84>)
    34de:	785b      	ldrb	r3, [r3, #1]
    34e0:	09db      	lsrs	r3, r3, #7
    34e2:	d1fb      	bne.n	34dc <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34e4:	4b08      	ldr	r3, [pc, #32]	; (3508 <_ext_irq_init+0x88>)
    34e6:	2210      	movs	r2, #16
    34e8:	2180      	movs	r1, #128	; 0x80
    34ea:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    34ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34f0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34f4:	3101      	adds	r1, #1
    34f6:	31ff      	adds	r1, #255	; 0xff
    34f8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34fa:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    34fc:	4b03      	ldr	r3, [pc, #12]	; (350c <_ext_irq_init+0x8c>)
    34fe:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    3500:	2000      	movs	r0, #0
    3502:	4770      	bx	lr
    3504:	40001800 	.word	0x40001800
    3508:	e000e100 	.word	0xe000e100
    350c:	20000f2c 	.word	0x20000f2c

00003510 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    3510:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    3512:	2b00      	cmp	r3, #0
    3514:	d00b      	beq.n	352e <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    3516:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    3518:	2aff      	cmp	r2, #255	; 0xff
    351a:	d017      	beq.n	354c <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    351c:	2900      	cmp	r1, #0
    351e:	d10f      	bne.n	3540 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    3520:	2301      	movs	r3, #1
    3522:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    3524:	4a0b      	ldr	r2, [pc, #44]	; (3554 <_ext_irq_enable+0x44>)
    3526:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    3528:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    352a:	2000      	movs	r0, #0
}
    352c:	4770      	bx	lr
		if (_map[i].pin == pin) {
    352e:	280e      	cmp	r0, #14
    3530:	d002      	beq.n	3538 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
    3532:	3301      	adds	r3, #1
    3534:	b2db      	uxtb	r3, r3
    3536:	e7ec      	b.n	3512 <_ext_irq_enable+0x2>
			extint = _map[i].extint;
    3538:	00da      	lsls	r2, r3, #3
    353a:	4b07      	ldr	r3, [pc, #28]	; (3558 <_ext_irq_enable+0x48>)
    353c:	5cd2      	ldrb	r2, [r2, r3]
			break;
    353e:	e7eb      	b.n	3518 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    3540:	2301      	movs	r3, #1
    3542:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    3544:	4a03      	ldr	r2, [pc, #12]	; (3554 <_ext_irq_enable+0x44>)
    3546:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    3548:	2000      	movs	r0, #0
    354a:	e7ef      	b.n	352c <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
    354c:	200d      	movs	r0, #13
    354e:	4240      	negs	r0, r0
    3550:	e7ec      	b.n	352c <_ext_irq_enable+0x1c>
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	40001800 	.word	0x40001800
    3558:	00010f70 	.word	0x00010f70

0000355c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    355c:	b570      	push	{r4, r5, r6, lr}
    355e:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    3560:	4b26      	ldr	r3, [pc, #152]	; (35fc <EIC_Handler+0xa0>)
    3562:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    3564:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    3566:	400a      	ands	r2, r1
    3568:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    356a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    356c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    356e:	4b24      	ldr	r3, [pc, #144]	; (3600 <EIC_Handler+0xa4>)
    3570:	6818      	ldr	r0, [r3, #0]
    3572:	1e43      	subs	r3, r0, #1
    3574:	4198      	sbcs	r0, r3
    3576:	b2c0      	uxtb	r0, r0
    3578:	22d2      	movs	r2, #210	; 0xd2
    357a:	4922      	ldr	r1, [pc, #136]	; (3604 <EIC_Handler+0xa8>)
    357c:	4b22      	ldr	r3, [pc, #136]	; (3608 <EIC_Handler+0xac>)
    357e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    3580:	2501      	movs	r5, #1
    3582:	426d      	negs	r5, r5

	while (flags) {
    3584:	e02e      	b.n	35e4 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    3586:	3901      	subs	r1, #1
    3588:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    358a:	42b0      	cmp	r0, r6
    358c:	d80e      	bhi.n	35ac <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    358e:	1832      	adds	r2, r6, r0
    3590:	1052      	asrs	r2, r2, #1
    3592:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    3594:	23ff      	movs	r3, #255	; 0xff
    3596:	4013      	ands	r3, r2
    3598:	00db      	lsls	r3, r3, #3
    359a:	4a1c      	ldr	r2, [pc, #112]	; (360c <EIC_Handler+0xb0>)
    359c:	5c9b      	ldrb	r3, [r3, r2]
    359e:	42a3      	cmp	r3, r4
    35a0:	d003      	beq.n	35aa <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    35a2:	daf0      	bge.n	3586 <EIC_Handler+0x2a>
					lower = middle + 1;
    35a4:	3101      	adds	r1, #1
    35a6:	b2c8      	uxtb	r0, r1
    35a8:	e7ef      	b.n	358a <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    35aa:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    35ac:	1c6b      	adds	r3, r5, #1
    35ae:	d003      	beq.n	35b8 <EIC_Handler+0x5c>
				callback(pin);
    35b0:	4b13      	ldr	r3, [pc, #76]	; (3600 <EIC_Handler+0xa4>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	0028      	movs	r0, r5
    35b6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    35b8:	2201      	movs	r2, #1
    35ba:	40a2      	lsls	r2, r4
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	4393      	bics	r3, r2
    35c0:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    35c2:	9801      	ldr	r0, [sp, #4]
    35c4:	4b12      	ldr	r3, [pc, #72]	; (3610 <EIC_Handler+0xb4>)
    35c6:	4798      	blx	r3
    35c8:	3801      	subs	r0, #1
    35ca:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    35cc:	1c63      	adds	r3, r4, #1
    35ce:	d002      	beq.n	35d6 <EIC_Handler+0x7a>
    35d0:	2601      	movs	r6, #1
    35d2:	2000      	movs	r0, #0
    35d4:	e7d9      	b.n	358a <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    35d6:	4b09      	ldr	r3, [pc, #36]	; (35fc <EIC_Handler+0xa0>)
    35d8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    35da:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    35dc:	400a      	ands	r2, r1
    35de:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    35e0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    35e2:	611a      	str	r2, [r3, #16]
	while (flags) {
    35e4:	9b01      	ldr	r3, [sp, #4]
    35e6:	2b00      	cmp	r3, #0
    35e8:	d005      	beq.n	35f6 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    35ea:	9801      	ldr	r0, [sp, #4]
    35ec:	4b08      	ldr	r3, [pc, #32]	; (3610 <EIC_Handler+0xb4>)
    35ee:	4798      	blx	r3
    35f0:	3801      	subs	r0, #1
    35f2:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    35f4:	e7ea      	b.n	35cc <EIC_Handler+0x70>
	}
}
    35f6:	b002      	add	sp, #8
    35f8:	bd70      	pop	{r4, r5, r6, pc}
    35fa:	46c0      	nop			; (mov r8, r8)
    35fc:	40001800 	.word	0x40001800
    3600:	20000f2c 	.word	0x20000f2c
    3604:	00010f78 	.word	0x00010f78
    3608:	000031d1 	.word	0x000031d1
    360c:	00010f70 	.word	0x00010f70
    3610:	0000912d 	.word	0x0000912d

00003614 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3614:	07c3      	lsls	r3, r0, #31
    3616:	d509      	bpl.n	362c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    3618:	4b27      	ldr	r3, [pc, #156]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    361a:	2280      	movs	r2, #128	; 0x80
    361c:	0052      	lsls	r2, r2, #1
    361e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3620:	4a26      	ldr	r2, [pc, #152]	; (36bc <_gclk_init_generators_by_fref+0xa8>)
    3622:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3624:	4b24      	ldr	r3, [pc, #144]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3626:	785b      	ldrb	r3, [r3, #1]
    3628:	09db      	lsrs	r3, r3, #7
    362a:	d1fb      	bne.n	3624 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    362c:	0783      	lsls	r3, r0, #30
    362e:	d508      	bpl.n	3642 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    3630:	4b21      	ldr	r3, [pc, #132]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3632:	4a23      	ldr	r2, [pc, #140]	; (36c0 <_gclk_init_generators_by_fref+0xac>)
    3634:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3636:	4a23      	ldr	r2, [pc, #140]	; (36c4 <_gclk_init_generators_by_fref+0xb0>)
    3638:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    363a:	4b1f      	ldr	r3, [pc, #124]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    363c:	785b      	ldrb	r3, [r3, #1]
    363e:	09db      	lsrs	r3, r3, #7
    3640:	d1fb      	bne.n	363a <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    3642:	0743      	lsls	r3, r0, #29
    3644:	d508      	bpl.n	3658 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    3646:	4b1c      	ldr	r3, [pc, #112]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3648:	4a1f      	ldr	r2, [pc, #124]	; (36c8 <_gclk_init_generators_by_fref+0xb4>)
    364a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    364c:	4a1f      	ldr	r2, [pc, #124]	; (36cc <_gclk_init_generators_by_fref+0xb8>)
    364e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3650:	4b19      	ldr	r3, [pc, #100]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3652:	785b      	ldrb	r3, [r3, #1]
    3654:	09db      	lsrs	r3, r3, #7
    3656:	d1fb      	bne.n	3650 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    3658:	0703      	lsls	r3, r0, #28
    365a:	d508      	bpl.n	366e <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    365c:	4b16      	ldr	r3, [pc, #88]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    365e:	4a1c      	ldr	r2, [pc, #112]	; (36d0 <_gclk_init_generators_by_fref+0xbc>)
    3660:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3662:	4a1c      	ldr	r2, [pc, #112]	; (36d4 <_gclk_init_generators_by_fref+0xc0>)
    3664:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3666:	4b14      	ldr	r3, [pc, #80]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3668:	785b      	ldrb	r3, [r3, #1]
    366a:	09db      	lsrs	r3, r3, #7
    366c:	d1fb      	bne.n	3666 <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    366e:	06c3      	lsls	r3, r0, #27
    3670:	d509      	bpl.n	3686 <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    3672:	4b11      	ldr	r3, [pc, #68]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3674:	2282      	movs	r2, #130	; 0x82
    3676:	0052      	lsls	r2, r2, #1
    3678:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    367a:	4a17      	ldr	r2, [pc, #92]	; (36d8 <_gclk_init_generators_by_fref+0xc4>)
    367c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    367e:	4b0e      	ldr	r3, [pc, #56]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3680:	785b      	ldrb	r3, [r3, #1]
    3682:	09db      	lsrs	r3, r3, #7
    3684:	d1fb      	bne.n	367e <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    3686:	0683      	lsls	r3, r0, #26
    3688:	d508      	bpl.n	369c <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    368a:	4b0b      	ldr	r3, [pc, #44]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    368c:	4a13      	ldr	r2, [pc, #76]	; (36dc <_gclk_init_generators_by_fref+0xc8>)
    368e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3690:	4a13      	ldr	r2, [pc, #76]	; (36e0 <_gclk_init_generators_by_fref+0xcc>)
    3692:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3694:	4b08      	ldr	r3, [pc, #32]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    3696:	785b      	ldrb	r3, [r3, #1]
    3698:	09db      	lsrs	r3, r3, #7
    369a:	d1fb      	bne.n	3694 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    369c:	0643      	lsls	r3, r0, #25
    369e:	d509      	bpl.n	36b4 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    36a0:	4b05      	ldr	r3, [pc, #20]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    36a2:	2283      	movs	r2, #131	; 0x83
    36a4:	0052      	lsls	r2, r2, #1
    36a6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    36a8:	4a0e      	ldr	r2, [pc, #56]	; (36e4 <_gclk_init_generators_by_fref+0xd0>)
    36aa:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    36ac:	4b02      	ldr	r3, [pc, #8]	; (36b8 <_gclk_init_generators_by_fref+0xa4>)
    36ae:	785b      	ldrb	r3, [r3, #1]
    36b0:	09db      	lsrs	r3, r3, #7
    36b2:	d1fb      	bne.n	36ac <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    36b4:	4770      	bx	lr
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	40000c00 	.word	0x40000c00
    36bc:	00290800 	.word	0x00290800
    36c0:	00000601 	.word	0x00000601
    36c4:	00010801 	.word	0x00010801
    36c8:	00000402 	.word	0x00000402
    36cc:	00210602 	.word	0x00210602
    36d0:	00000803 	.word	0x00000803
    36d4:	00290603 	.word	0x00290603
    36d8:	00090704 	.word	0x00090704
    36dc:	00000305 	.word	0x00000305
    36e0:	00010805 	.word	0x00010805
    36e4:	00210406 	.word	0x00210406

000036e8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    36e8:	4b06      	ldr	r3, [pc, #24]	; (3704 <_pm_init+0x1c>)
    36ea:	7a1a      	ldrb	r2, [r3, #8]
    36ec:	b2d2      	uxtb	r2, r2
    36ee:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    36f0:	7a5a      	ldrb	r2, [r3, #9]
    36f2:	b2d2      	uxtb	r2, r2
    36f4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    36f6:	7a9a      	ldrb	r2, [r3, #10]
    36f8:	b2d2      	uxtb	r2, r2
    36fa:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    36fc:	7ada      	ldrb	r2, [r3, #11]
    36fe:	b2d2      	uxtb	r2, r2
    3700:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    3702:	4770      	bx	lr
    3704:	40000400 	.word	0x40000400

00003708 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3708:	4b02      	ldr	r3, [pc, #8]	; (3714 <_sercom_get_hardware_index+0xc>)
    370a:	469c      	mov	ip, r3
    370c:	4460      	add	r0, ip
    370e:	0a80      	lsrs	r0, r0, #10
    3710:	b2c0      	uxtb	r0, r0
}
    3712:	4770      	bx	lr
    3714:	bdfff800 	.word	0xbdfff800

00003718 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3718:	b510      	push	{r4, lr}
	void *hw = device->hw;
    371a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    371c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    371e:	07db      	lsls	r3, r3, #31
    3720:	d502      	bpl.n	3728 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    3722:	7da3      	ldrb	r3, [r4, #22]
    3724:	07db      	lsls	r3, r3, #31
    3726:	d40f      	bmi.n	3748 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3728:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    372a:	079b      	lsls	r3, r3, #30
    372c:	d502      	bpl.n	3734 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    372e:	7da3      	ldrb	r3, [r4, #22]
    3730:	079b      	lsls	r3, r3, #30
    3732:	d40e      	bmi.n	3752 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3734:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    3736:	075b      	lsls	r3, r3, #29
    3738:	d515      	bpl.n	3766 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    373a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    373c:	2337      	movs	r3, #55	; 0x37
    373e:	421a      	tst	r2, r3
    3740:	d00c      	beq.n	375c <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3742:	3308      	adds	r3, #8
    3744:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    3746:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3748:	2301      	movs	r3, #1
    374a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    374c:	6803      	ldr	r3, [r0, #0]
    374e:	4798      	blx	r3
    3750:	e7f9      	b.n	3746 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3752:	2302      	movs	r3, #2
    3754:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3756:	6883      	ldr	r3, [r0, #8]
    3758:	4798      	blx	r3
    375a:	e7f4      	b.n	3746 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    375c:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    375e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    3760:	b2c9      	uxtb	r1, r1
    3762:	4798      	blx	r3
    3764:	e7ef      	b.n	3746 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3766:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3768:	09db      	lsrs	r3, r3, #7
    376a:	d0ec      	beq.n	3746 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    376c:	2380      	movs	r3, #128	; 0x80
    376e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    3770:	68c3      	ldr	r3, [r0, #12]
    3772:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3774:	8b63      	ldrh	r3, [r4, #26]
    3776:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3778:	8363      	strh	r3, [r4, #26]
    377a:	e7e4      	b.n	3746 <_sercom_usart_interrupt_handler+0x2e>

0000377c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    377c:	4b03      	ldr	r3, [pc, #12]	; (378c <_sercom_init_irq_param+0x10>)
    377e:	4298      	cmp	r0, r3
    3780:	d000      	beq.n	3784 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    3782:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    3784:	4b02      	ldr	r3, [pc, #8]	; (3790 <_sercom_init_irq_param+0x14>)
    3786:	6019      	str	r1, [r3, #0]
}
    3788:	e7fb      	b.n	3782 <_sercom_init_irq_param+0x6>
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	42001400 	.word	0x42001400
    3790:	20000f30 	.word	0x20000f30

00003794 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3794:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    3796:	4b02      	ldr	r3, [pc, #8]	; (37a0 <_sercom_get_irq_num+0xc>)
    3798:	4798      	blx	r3
    379a:	3009      	adds	r0, #9
    379c:	b2c0      	uxtb	r0, r0
}
    379e:	bd10      	pop	{r4, pc}
    37a0:	00003709 	.word	0x00003709

000037a4 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    37a4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    37a6:	07db      	lsls	r3, r3, #31
    37a8:	d408      	bmi.n	37bc <_spi_sync_enable+0x18>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    37aa:	6803      	ldr	r3, [r0, #0]
    37ac:	2202      	movs	r2, #2
    37ae:	4313      	orrs	r3, r2
    37b0:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    37b2:	69c3      	ldr	r3, [r0, #28]
    37b4:	079b      	lsls	r3, r3, #30
    37b6:	d1fc      	bne.n	37b2 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    37b8:	2000      	movs	r0, #0
}
    37ba:	4770      	bx	lr
		return ERR_BUSY;
    37bc:	2004      	movs	r0, #4
    37be:	4240      	negs	r0, r0
    37c0:	e7fb      	b.n	37ba <_spi_sync_enable+0x16>
	...

000037c4 <_get_sercom_index>:
{
    37c4:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    37c6:	4b0b      	ldr	r3, [pc, #44]	; (37f4 <_get_sercom_index+0x30>)
    37c8:	4798      	blx	r3
    37ca:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    37cc:	2000      	movs	r0, #0
    37ce:	2800      	cmp	r0, #0
    37d0:	d006      	beq.n	37e0 <_get_sercom_index+0x1c>
	ASSERT(false);
    37d2:	4a09      	ldr	r2, [pc, #36]	; (37f8 <_get_sercom_index+0x34>)
    37d4:	4909      	ldr	r1, [pc, #36]	; (37fc <_get_sercom_index+0x38>)
    37d6:	2000      	movs	r0, #0
    37d8:	4b09      	ldr	r3, [pc, #36]	; (3800 <_get_sercom_index+0x3c>)
    37da:	4798      	blx	r3
	return 0;
    37dc:	2000      	movs	r0, #0
}
    37de:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    37e0:	0083      	lsls	r3, r0, #2
    37e2:	181b      	adds	r3, r3, r0
    37e4:	0099      	lsls	r1, r3, #2
    37e6:	4b07      	ldr	r3, [pc, #28]	; (3804 <_get_sercom_index+0x40>)
    37e8:	5ccb      	ldrb	r3, [r1, r3]
    37ea:	429a      	cmp	r2, r3
    37ec:	d0f7      	beq.n	37de <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    37ee:	3001      	adds	r0, #1
    37f0:	b2c0      	uxtb	r0, r0
    37f2:	e7ec      	b.n	37ce <_get_sercom_index+0xa>
    37f4:	00003709 	.word	0x00003709
    37f8:	0000025e 	.word	0x0000025e
    37fc:	00011000 	.word	0x00011000
    3800:	000031d1 	.word	0x000031d1
    3804:	00010f90 	.word	0x00010f90

00003808 <_usart_init>:
{
    3808:	b570      	push	{r4, r5, r6, lr}
    380a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    380c:	4b38      	ldr	r3, [pc, #224]	; (38f0 <_usart_init+0xe8>)
    380e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3810:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3812:	07db      	lsls	r3, r3, #31
    3814:	d41d      	bmi.n	3852 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3816:	0083      	lsls	r3, r0, #2
    3818:	181b      	adds	r3, r3, r0
    381a:	009a      	lsls	r2, r3, #2
    381c:	4b35      	ldr	r3, [pc, #212]	; (38f4 <_usart_init+0xec>)
    381e:	189b      	adds	r3, r3, r2
    3820:	685a      	ldr	r2, [r3, #4]
    3822:	231c      	movs	r3, #28
    3824:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3826:	69e3      	ldr	r3, [r4, #28]
    3828:	079b      	lsls	r3, r3, #30
    382a:	d1fc      	bne.n	3826 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    382c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    382e:	079b      	lsls	r3, r3, #30
    3830:	d509      	bpl.n	3846 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3832:	6823      	ldr	r3, [r4, #0]
    3834:	2102      	movs	r1, #2
    3836:	438b      	bics	r3, r1
    3838:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    383a:	69e3      	ldr	r3, [r4, #28]
    383c:	079b      	lsls	r3, r3, #30
    383e:	d1fc      	bne.n	383a <_usart_init+0x32>
    3840:	69e3      	ldr	r3, [r4, #28]
    3842:	079b      	lsls	r3, r3, #30
    3844:	d4fc      	bmi.n	3840 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3846:	2301      	movs	r3, #1
    3848:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    384a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    384c:	69e3      	ldr	r3, [r4, #28]
    384e:	079b      	lsls	r3, r3, #30
    3850:	d1fc      	bne.n	384c <_usart_init+0x44>
    3852:	69e3      	ldr	r3, [r4, #28]
    3854:	07db      	lsls	r3, r3, #31
    3856:	d4fc      	bmi.n	3852 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3858:	0083      	lsls	r3, r0, #2
    385a:	181b      	adds	r3, r3, r0
    385c:	009a      	lsls	r2, r3, #2
    385e:	4b25      	ldr	r3, [pc, #148]	; (38f4 <_usart_init+0xec>)
    3860:	189b      	adds	r3, r3, r2
    3862:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3864:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3866:	69e3      	ldr	r3, [r4, #28]
    3868:	079b      	lsls	r3, r3, #30
    386a:	d1fc      	bne.n	3866 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    386c:	0083      	lsls	r3, r0, #2
    386e:	181b      	adds	r3, r3, r0
    3870:	009a      	lsls	r2, r3, #2
    3872:	4b20      	ldr	r3, [pc, #128]	; (38f4 <_usart_init+0xec>)
    3874:	189b      	adds	r3, r3, r2
    3876:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3878:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    387a:	69e3      	ldr	r3, [r4, #28]
    387c:	075b      	lsls	r3, r3, #29
    387e:	d1fc      	bne.n	387a <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3880:	0083      	lsls	r3, r0, #2
    3882:	181b      	adds	r3, r3, r0
    3884:	009a      	lsls	r2, r3, #2
    3886:	4b1b      	ldr	r3, [pc, #108]	; (38f4 <_usart_init+0xec>)
    3888:	189b      	adds	r3, r3, r2
    388a:	685b      	ldr	r3, [r3, #4]
    388c:	049a      	lsls	r2, r3, #18
    388e:	d40b      	bmi.n	38a8 <_usart_init+0xa0>
    3890:	22c0      	movs	r2, #192	; 0xc0
    3892:	01d2      	lsls	r2, r2, #7
    3894:	4213      	tst	r3, r2
    3896:	d107      	bne.n	38a8 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3898:	0083      	lsls	r3, r0, #2
    389a:	181b      	adds	r3, r3, r0
    389c:	009a      	lsls	r2, r3, #2
    389e:	4b15      	ldr	r3, [pc, #84]	; (38f4 <_usart_init+0xec>)
    38a0:	189b      	adds	r3, r3, r2
    38a2:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    38a4:	81a3      	strh	r3, [r4, #12]
    38a6:	e015      	b.n	38d4 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    38a8:	0083      	lsls	r3, r0, #2
    38aa:	181b      	adds	r3, r3, r0
    38ac:	009a      	lsls	r2, r3, #2
    38ae:	4911      	ldr	r1, [pc, #68]	; (38f4 <_usart_init+0xec>)
    38b0:	1889      	adds	r1, r1, r2
    38b2:	898a      	ldrh	r2, [r1, #12]
    38b4:	89a3      	ldrh	r3, [r4, #12]
    38b6:	04d2      	lsls	r2, r2, #19
    38b8:	0cd2      	lsrs	r2, r2, #19
    38ba:	0b5b      	lsrs	r3, r3, #13
    38bc:	035b      	lsls	r3, r3, #13
    38be:	4313      	orrs	r3, r2
    38c0:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    38c2:	7b8b      	ldrb	r3, [r1, #14]
    38c4:	2207      	movs	r2, #7
    38c6:	401a      	ands	r2, r3
    38c8:	89a3      	ldrh	r3, [r4, #12]
    38ca:	0352      	lsls	r2, r2, #13
    38cc:	04db      	lsls	r3, r3, #19
    38ce:	0cdb      	lsrs	r3, r3, #19
    38d0:	4313      	orrs	r3, r2
    38d2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    38d4:	4a07      	ldr	r2, [pc, #28]	; (38f4 <_usart_init+0xec>)
    38d6:	0083      	lsls	r3, r0, #2
    38d8:	181d      	adds	r5, r3, r0
    38da:	00a9      	lsls	r1, r5, #2
    38dc:	000d      	movs	r5, r1
    38de:	1851      	adds	r1, r2, r1
    38e0:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    38e2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    38e4:	1952      	adds	r2, r2, r5
    38e6:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    38e8:	2330      	movs	r3, #48	; 0x30
    38ea:	54e2      	strb	r2, [r4, r3]
}
    38ec:	2000      	movs	r0, #0
    38ee:	bd70      	pop	{r4, r5, r6, pc}
    38f0:	000037c5 	.word	0x000037c5
    38f4:	00010f90 	.word	0x00010f90

000038f8 <_usart_async_init>:
{
    38f8:	b570      	push	{r4, r5, r6, lr}
    38fa:	0006      	movs	r6, r0
    38fc:	000c      	movs	r4, r1
	ASSERT(device);
    38fe:	1e43      	subs	r3, r0, #1
    3900:	4198      	sbcs	r0, r3
    3902:	b2c0      	uxtb	r0, r0
    3904:	22c4      	movs	r2, #196	; 0xc4
    3906:	4919      	ldr	r1, [pc, #100]	; (396c <_usart_async_init+0x74>)
    3908:	4b19      	ldr	r3, [pc, #100]	; (3970 <_usart_async_init+0x78>)
    390a:	4798      	blx	r3
	init_status = _usart_init(hw);
    390c:	0020      	movs	r0, r4
    390e:	4b19      	ldr	r3, [pc, #100]	; (3974 <_usart_async_init+0x7c>)
    3910:	4798      	blx	r3
    3912:	1e05      	subs	r5, r0, #0
	if (init_status) {
    3914:	d001      	beq.n	391a <_usart_async_init+0x22>
}
    3916:	0028      	movs	r0, r5
    3918:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    391a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    391c:	0031      	movs	r1, r6
    391e:	0020      	movs	r0, r4
    3920:	4b15      	ldr	r3, [pc, #84]	; (3978 <_usart_async_init+0x80>)
    3922:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3924:	0020      	movs	r0, r4
    3926:	4b15      	ldr	r3, [pc, #84]	; (397c <_usart_async_init+0x84>)
    3928:	4798      	blx	r3
    392a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    392c:	2b00      	cmp	r3, #0
    392e:	db0a      	blt.n	3946 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3930:	211f      	movs	r1, #31
    3932:	4001      	ands	r1, r0
    3934:	2201      	movs	r2, #1
    3936:	408a      	lsls	r2, r1
    3938:	2180      	movs	r1, #128	; 0x80
    393a:	4c11      	ldr	r4, [pc, #68]	; (3980 <_usart_async_init+0x88>)
    393c:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    393e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3942:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    3946:	2b00      	cmp	r3, #0
    3948:	db07      	blt.n	395a <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    394a:	211f      	movs	r1, #31
    394c:	4001      	ands	r1, r0
    394e:	2201      	movs	r2, #1
    3950:	408a      	lsls	r2, r1
    3952:	21c0      	movs	r1, #192	; 0xc0
    3954:	0049      	lsls	r1, r1, #1
    3956:	4c0a      	ldr	r4, [pc, #40]	; (3980 <_usart_async_init+0x88>)
    3958:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    395a:	2b00      	cmp	r3, #0
    395c:	dbdb      	blt.n	3916 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    395e:	231f      	movs	r3, #31
    3960:	4018      	ands	r0, r3
    3962:	3b1e      	subs	r3, #30
    3964:	4083      	lsls	r3, r0
    3966:	4a06      	ldr	r2, [pc, #24]	; (3980 <_usart_async_init+0x88>)
    3968:	6013      	str	r3, [r2, #0]
    396a:	e7d4      	b.n	3916 <_usart_async_init+0x1e>
    396c:	00011000 	.word	0x00011000
    3970:	000031d1 	.word	0x000031d1
    3974:	00003809 	.word	0x00003809
    3978:	0000377d 	.word	0x0000377d
    397c:	00003795 	.word	0x00003795
    3980:	e000e100 	.word	0xe000e100

00003984 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3984:	6983      	ldr	r3, [r0, #24]
    3986:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    3988:	8519      	strh	r1, [r3, #40]	; 0x28
}
    398a:	4770      	bx	lr

0000398c <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    398c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    398e:	2201      	movs	r2, #1
    3990:	759a      	strb	r2, [r3, #22]
}
    3992:	4770      	bx	lr

00003994 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3994:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3996:	2202      	movs	r2, #2
    3998:	759a      	strb	r2, [r3, #22]
}
    399a:	4770      	bx	lr

0000399c <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    399c:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    399e:	4b02      	ldr	r3, [pc, #8]	; (39a8 <SERCOM3_Handler+0xc>)
    39a0:	6818      	ldr	r0, [r3, #0]
    39a2:	4b02      	ldr	r3, [pc, #8]	; (39ac <SERCOM3_Handler+0x10>)
    39a4:	4798      	blx	r3
}
    39a6:	bd10      	pop	{r4, pc}
    39a8:	20000f30 	.word	0x20000f30
    39ac:	00003719 	.word	0x00003719

000039b0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    39b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39b2:	0006      	movs	r6, r0
    39b4:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    39b6:	0008      	movs	r0, r1
    39b8:	4b73      	ldr	r3, [pc, #460]	; (3b88 <_spi_m_sync_init+0x1d8>)
    39ba:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    39bc:	2300      	movs	r3, #0
    39be:	e001      	b.n	39c4 <_spi_m_sync_init+0x14>
    39c0:	3301      	adds	r3, #1
    39c2:	b2db      	uxtb	r3, r3
    39c4:	2b02      	cmp	r3, #2
    39c6:	d80b      	bhi.n	39e0 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    39c8:	0119      	lsls	r1, r3, #4
    39ca:	18c9      	adds	r1, r1, r3
    39cc:	4a6f      	ldr	r2, [pc, #444]	; (3b8c <_spi_m_sync_init+0x1dc>)
    39ce:	1852      	adds	r2, r2, r1
    39d0:	324c      	adds	r2, #76	; 0x4c
    39d2:	7812      	ldrb	r2, [r2, #0]
    39d4:	4290      	cmp	r0, r2
    39d6:	d1f3      	bne.n	39c0 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    39d8:	4d6c      	ldr	r5, [pc, #432]	; (3b8c <_spi_m_sync_init+0x1dc>)
    39da:	353c      	adds	r5, #60	; 0x3c
    39dc:	186d      	adds	r5, r5, r1
    39de:	e000      	b.n	39e2 <_spi_m_sync_init+0x32>
	return NULL;
    39e0:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    39e2:	2e00      	cmp	r6, #0
    39e4:	d100      	bne.n	39e8 <_spi_m_sync_init+0x38>
    39e6:	e082      	b.n	3aee <_spi_m_sync_init+0x13e>
    39e8:	2c00      	cmp	r4, #0
    39ea:	d100      	bne.n	39ee <_spi_m_sync_init+0x3e>
    39ec:	e07d      	b.n	3aea <_spi_m_sync_init+0x13a>
    39ee:	2001      	movs	r0, #1
    39f0:	4a67      	ldr	r2, [pc, #412]	; (3b90 <_spi_m_sync_init+0x1e0>)
    39f2:	4968      	ldr	r1, [pc, #416]	; (3b94 <_spi_m_sync_init+0x1e4>)
    39f4:	4b68      	ldr	r3, [pc, #416]	; (3b98 <_spi_m_sync_init+0x1e8>)
    39f6:	4798      	blx	r3

	if (regs == NULL) {
    39f8:	2d00      	cmp	r5, #0
    39fa:	d100      	bne.n	39fe <_spi_m_sync_init+0x4e>
    39fc:	e0c0      	b.n	3b80 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    39fe:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3a00:	07db      	lsls	r3, r3, #31
    3a02:	d421      	bmi.n	3a48 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3a04:	782a      	ldrb	r2, [r5, #0]
    3a06:	786b      	ldrb	r3, [r5, #1]
    3a08:	021b      	lsls	r3, r3, #8
    3a0a:	4313      	orrs	r3, r2
    3a0c:	78aa      	ldrb	r2, [r5, #2]
    3a0e:	0412      	lsls	r2, r2, #16
    3a10:	4313      	orrs	r3, r2
    3a12:	78ea      	ldrb	r2, [r5, #3]
    3a14:	0612      	lsls	r2, r2, #24
    3a16:	431a      	orrs	r2, r3
    3a18:	231c      	movs	r3, #28
    3a1a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3a1c:	69e3      	ldr	r3, [r4, #28]
    3a1e:	079b      	lsls	r3, r3, #30
    3a20:	d1fc      	bne.n	3a1c <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3a22:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3a24:	079b      	lsls	r3, r3, #30
    3a26:	d509      	bpl.n	3a3c <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3a28:	6823      	ldr	r3, [r4, #0]
    3a2a:	2102      	movs	r1, #2
    3a2c:	438b      	bics	r3, r1
    3a2e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3a30:	69e3      	ldr	r3, [r4, #28]
    3a32:	079b      	lsls	r3, r3, #30
    3a34:	d1fc      	bne.n	3a30 <_spi_m_sync_init+0x80>
    3a36:	69e3      	ldr	r3, [r4, #28]
    3a38:	079b      	lsls	r3, r3, #30
    3a3a:	d4fc      	bmi.n	3a36 <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3a3c:	2301      	movs	r3, #1
    3a3e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3a40:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3a42:	69e3      	ldr	r3, [r4, #28]
    3a44:	079b      	lsls	r3, r3, #30
    3a46:	d1fc      	bne.n	3a42 <_spi_m_sync_init+0x92>
    3a48:	69e3      	ldr	r3, [r4, #28]
    3a4a:	07db      	lsls	r3, r3, #31
    3a4c:	d4fc      	bmi.n	3a48 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3a4e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3a50:	782b      	ldrb	r3, [r5, #0]
    3a52:	786a      	ldrb	r2, [r5, #1]
    3a54:	0212      	lsls	r2, r2, #8
    3a56:	431a      	orrs	r2, r3
    3a58:	78ab      	ldrb	r3, [r5, #2]
    3a5a:	041b      	lsls	r3, r3, #16
    3a5c:	431a      	orrs	r2, r3
    3a5e:	78eb      	ldrb	r3, [r5, #3]
    3a60:	061b      	lsls	r3, r3, #24
    3a62:	4313      	orrs	r3, r2
    3a64:	221c      	movs	r2, #28
    3a66:	4013      	ands	r3, r2
    3a68:	2b08      	cmp	r3, #8
    3a6a:	d042      	beq.n	3af2 <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    3a6c:	2c00      	cmp	r4, #0
    3a6e:	d100      	bne.n	3a72 <_spi_m_sync_init+0xc2>
    3a70:	e082      	b.n	3b78 <_spi_m_sync_init+0x1c8>
    3a72:	2d00      	cmp	r5, #0
    3a74:	d100      	bne.n	3a78 <_spi_m_sync_init+0xc8>
    3a76:	e07d      	b.n	3b74 <_spi_m_sync_init+0x1c4>
    3a78:	2001      	movs	r0, #1
    3a7a:	4a48      	ldr	r2, [pc, #288]	; (3b9c <_spi_m_sync_init+0x1ec>)
    3a7c:	4945      	ldr	r1, [pc, #276]	; (3b94 <_spi_m_sync_init+0x1e4>)
    3a7e:	4b46      	ldr	r3, [pc, #280]	; (3b98 <_spi_m_sync_init+0x1e8>)
    3a80:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3a82:	782b      	ldrb	r3, [r5, #0]
    3a84:	786a      	ldrb	r2, [r5, #1]
    3a86:	0212      	lsls	r2, r2, #8
    3a88:	431a      	orrs	r2, r3
    3a8a:	78ab      	ldrb	r3, [r5, #2]
    3a8c:	041b      	lsls	r3, r3, #16
    3a8e:	431a      	orrs	r2, r3
    3a90:	78eb      	ldrb	r3, [r5, #3]
    3a92:	061b      	lsls	r3, r3, #24
    3a94:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    3a96:	4a42      	ldr	r2, [pc, #264]	; (3ba0 <_spi_m_sync_init+0x1f0>)
    3a98:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3a9a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3a9c:	69e3      	ldr	r3, [r4, #28]
    3a9e:	079b      	lsls	r3, r3, #30
    3aa0:	d1fc      	bne.n	3a9c <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    3aa2:	792b      	ldrb	r3, [r5, #4]
    3aa4:	796a      	ldrb	r2, [r5, #5]
    3aa6:	0212      	lsls	r2, r2, #8
    3aa8:	431a      	orrs	r2, r3
    3aaa:	79ab      	ldrb	r3, [r5, #6]
    3aac:	041b      	lsls	r3, r3, #16
    3aae:	431a      	orrs	r2, r3
    3ab0:	79eb      	ldrb	r3, [r5, #7]
    3ab2:	061b      	lsls	r3, r3, #24
    3ab4:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    3ab6:	4a3b      	ldr	r2, [pc, #236]	; (3ba4 <_spi_m_sync_init+0x1f4>)
    3ab8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    3aba:	2280      	movs	r2, #128	; 0x80
    3abc:	0292      	lsls	r2, r2, #10
    3abe:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3ac0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ac2:	69e3      	ldr	r3, [r4, #28]
    3ac4:	075b      	lsls	r3, r3, #29
    3ac6:	d1fc      	bne.n	3ac2 <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3ac8:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3aca:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3acc:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3ace:	2330      	movs	r3, #48	; 0x30
    3ad0:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3ad2:	792b      	ldrb	r3, [r5, #4]
    3ad4:	075b      	lsls	r3, r3, #29
    3ad6:	d151      	bne.n	3b7c <_spi_m_sync_init+0x1cc>
    3ad8:	2301      	movs	r3, #1
    3ada:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    3adc:	7baa      	ldrb	r2, [r5, #14]
    3ade:	7beb      	ldrb	r3, [r5, #15]
    3ae0:	021b      	lsls	r3, r3, #8
    3ae2:	4313      	orrs	r3, r2
    3ae4:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    3ae6:	2000      	movs	r0, #0
}
    3ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    3aea:	2000      	movs	r0, #0
    3aec:	e780      	b.n	39f0 <_spi_m_sync_init+0x40>
    3aee:	2000      	movs	r0, #0
    3af0:	e77e      	b.n	39f0 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    3af2:	2c00      	cmp	r4, #0
    3af4:	d03c      	beq.n	3b70 <_spi_m_sync_init+0x1c0>
    3af6:	2d00      	cmp	r5, #0
    3af8:	d038      	beq.n	3b6c <_spi_m_sync_init+0x1bc>
    3afa:	2001      	movs	r0, #1
    3afc:	4a2a      	ldr	r2, [pc, #168]	; (3ba8 <_spi_m_sync_init+0x1f8>)
    3afe:	4925      	ldr	r1, [pc, #148]	; (3b94 <_spi_m_sync_init+0x1e4>)
    3b00:	4b25      	ldr	r3, [pc, #148]	; (3b98 <_spi_m_sync_init+0x1e8>)
    3b02:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3b04:	782b      	ldrb	r3, [r5, #0]
    3b06:	786a      	ldrb	r2, [r5, #1]
    3b08:	0212      	lsls	r2, r2, #8
    3b0a:	431a      	orrs	r2, r3
    3b0c:	78ab      	ldrb	r3, [r5, #2]
    3b0e:	041b      	lsls	r3, r3, #16
    3b10:	431a      	orrs	r2, r3
    3b12:	78eb      	ldrb	r3, [r5, #3]
    3b14:	061b      	lsls	r3, r3, #24
    3b16:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    3b18:	4a21      	ldr	r2, [pc, #132]	; (3ba0 <_spi_m_sync_init+0x1f0>)
    3b1a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3b1c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b1e:	69e3      	ldr	r3, [r4, #28]
    3b20:	079b      	lsls	r3, r3, #30
    3b22:	d1fc      	bne.n	3b1e <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3b24:	792b      	ldrb	r3, [r5, #4]
    3b26:	796a      	ldrb	r2, [r5, #5]
    3b28:	0212      	lsls	r2, r2, #8
    3b2a:	431a      	orrs	r2, r3
    3b2c:	79ab      	ldrb	r3, [r5, #6]
    3b2e:	041b      	lsls	r3, r3, #16
    3b30:	431a      	orrs	r2, r3
    3b32:	79eb      	ldrb	r3, [r5, #7]
    3b34:	061b      	lsls	r3, r3, #24
    3b36:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3b38:	4a1c      	ldr	r2, [pc, #112]	; (3bac <_spi_m_sync_init+0x1fc>)
    3b3a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    3b3c:	4a1c      	ldr	r2, [pc, #112]	; (3bb0 <_spi_m_sync_init+0x200>)
    3b3e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3b40:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3b42:	69e3      	ldr	r3, [r4, #28]
    3b44:	075b      	lsls	r3, r3, #29
    3b46:	d1fc      	bne.n	3b42 <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3b48:	7a2b      	ldrb	r3, [r5, #8]
    3b4a:	7a6a      	ldrb	r2, [r5, #9]
    3b4c:	0212      	lsls	r2, r2, #8
    3b4e:	431a      	orrs	r2, r3
    3b50:	7aab      	ldrb	r3, [r5, #10]
    3b52:	041b      	lsls	r3, r3, #16
    3b54:	431a      	orrs	r2, r3
    3b56:	7aeb      	ldrb	r3, [r5, #11]
    3b58:	061b      	lsls	r3, r3, #24
    3b5a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3b5c:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3b5e:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3b60:	2330      	movs	r3, #48	; 0x30
    3b62:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3b64:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3b66:	2b00      	cmp	r3, #0
    3b68:	d1fc      	bne.n	3b64 <_spi_m_sync_init+0x1b4>
    3b6a:	e7b2      	b.n	3ad2 <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    3b6c:	2000      	movs	r0, #0
    3b6e:	e7c5      	b.n	3afc <_spi_m_sync_init+0x14c>
    3b70:	2000      	movs	r0, #0
    3b72:	e7c3      	b.n	3afc <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    3b74:	2000      	movs	r0, #0
    3b76:	e780      	b.n	3a7a <_spi_m_sync_init+0xca>
    3b78:	2000      	movs	r0, #0
    3b7a:	e77e      	b.n	3a7a <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3b7c:	2302      	movs	r3, #2
    3b7e:	e7ac      	b.n	3ada <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    3b80:	200d      	movs	r0, #13
    3b82:	4240      	negs	r0, r0
    3b84:	e7b0      	b.n	3ae8 <_spi_m_sync_init+0x138>
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	00003709 	.word	0x00003709
    3b8c:	00010f90 	.word	0x00010f90
    3b90:	00000952 	.word	0x00000952
    3b94:	00011000 	.word	0x00011000
    3b98:	000031d1 	.word	0x000031d1
    3b9c:	00000917 	.word	0x00000917
    3ba0:	fffffefc 	.word	0xfffffefc
    3ba4:	fffd1dbf 	.word	0xfffd1dbf
    3ba8:	0000092b 	.word	0x0000092b
    3bac:	fffdddbf 	.word	0xfffdddbf
    3bb0:	00020240 	.word	0x00020240

00003bb4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3bb4:	b510      	push	{r4, lr}
    3bb6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    3bb8:	d00d      	beq.n	3bd6 <_spi_m_sync_enable+0x22>
    3bba:	6803      	ldr	r3, [r0, #0]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d008      	beq.n	3bd2 <_spi_m_sync_enable+0x1e>
    3bc0:	2001      	movs	r0, #1
    3bc2:	4a06      	ldr	r2, [pc, #24]	; (3bdc <_spi_m_sync_enable+0x28>)
    3bc4:	4906      	ldr	r1, [pc, #24]	; (3be0 <_spi_m_sync_enable+0x2c>)
    3bc6:	4b07      	ldr	r3, [pc, #28]	; (3be4 <_spi_m_sync_enable+0x30>)
    3bc8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3bca:	6820      	ldr	r0, [r4, #0]
    3bcc:	4b06      	ldr	r3, [pc, #24]	; (3be8 <_spi_m_sync_enable+0x34>)
    3bce:	4798      	blx	r3
}
    3bd0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    3bd2:	2000      	movs	r0, #0
    3bd4:	e7f5      	b.n	3bc2 <_spi_m_sync_enable+0xe>
    3bd6:	2000      	movs	r0, #0
    3bd8:	e7f3      	b.n	3bc2 <_spi_m_sync_enable+0xe>
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	000009ad 	.word	0x000009ad
    3be0:	00011000 	.word	0x00011000
    3be4:	000031d1 	.word	0x000031d1
    3be8:	000037a5 	.word	0x000037a5

00003bec <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bee:	46ce      	mov	lr, r9
    3bf0:	4647      	mov	r7, r8
    3bf2:	b580      	push	{r7, lr}
    3bf4:	b089      	sub	sp, #36	; 0x24
    3bf6:	4681      	mov	r9, r0
    3bf8:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    3bfa:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3bfc:	680b      	ldr	r3, [r1, #0]
    3bfe:	9303      	str	r3, [sp, #12]
    3c00:	684b      	ldr	r3, [r1, #4]
    3c02:	9304      	str	r3, [sp, #16]
    3c04:	2300      	movs	r3, #0
    3c06:	9305      	str	r3, [sp, #20]
    3c08:	9306      	str	r3, [sp, #24]
    3c0a:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    3c0c:	2800      	cmp	r0, #0
    3c0e:	d014      	beq.n	3c3a <_spi_m_sync_trans+0x4e>
    3c10:	2c00      	cmp	r4, #0
    3c12:	d010      	beq.n	3c36 <_spi_m_sync_trans+0x4a>
    3c14:	2001      	movs	r0, #1
    3c16:	4a37      	ldr	r2, [pc, #220]	; (3cf4 <_spi_m_sync_trans+0x108>)
    3c18:	4937      	ldr	r1, [pc, #220]	; (3cf8 <_spi_m_sync_trans+0x10c>)
    3c1a:	4b38      	ldr	r3, [pc, #224]	; (3cfc <_spi_m_sync_trans+0x110>)
    3c1c:	4798      	blx	r3
    3c1e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3c20:	075b      	lsls	r3, r3, #29
    3c22:	d164      	bne.n	3cee <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c24:	69e3      	ldr	r3, [r4, #28]
    3c26:	079b      	lsls	r3, r3, #30
    3c28:	d1fc      	bne.n	3c24 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3c2a:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3c2c:	079b      	lsls	r3, r3, #30
    3c2e:	d420      	bmi.n	3c72 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    3c30:	2014      	movs	r0, #20
    3c32:	4240      	negs	r0, r0
    3c34:	e056      	b.n	3ce4 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    3c36:	2000      	movs	r0, #0
    3c38:	e7ed      	b.n	3c16 <_spi_m_sync_trans+0x2a>
    3c3a:	2000      	movs	r0, #0
    3c3c:	e7eb      	b.n	3c16 <_spi_m_sync_trans+0x2a>
		return false;
    3c3e:	2200      	movs	r2, #0
    3c40:	e02d      	b.n	3c9e <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    3c42:	7848      	ldrb	r0, [r1, #1]
    3c44:	0200      	lsls	r0, r0, #8
    3c46:	4647      	mov	r7, r8
    3c48:	4307      	orrs	r7, r0
    3c4a:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    3c4c:	3102      	adds	r1, #2
    3c4e:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    3c50:	3201      	adds	r2, #1
    3c52:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    3c54:	4642      	mov	r2, r8
    3c56:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3c58:	b25b      	sxtb	r3, r3
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	db35      	blt.n	3cca <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    3c5e:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    3c60:	2800      	cmp	r0, #0
    3c62:	db3a      	blt.n	3cda <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3c64:	9805      	ldr	r0, [sp, #20]
    3c66:	68ab      	ldr	r3, [r5, #8]
    3c68:	4298      	cmp	r0, r3
    3c6a:	d302      	bcc.n	3c72 <_spi_m_sync_trans+0x86>
    3c6c:	9a06      	ldr	r2, [sp, #24]
    3c6e:	4293      	cmp	r3, r2
    3c70:	d933      	bls.n	3cda <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3c72:	7e23      	ldrb	r3, [r4, #24]
    3c74:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3c76:	075a      	lsls	r2, r3, #29
    3c78:	d5e1      	bpl.n	3c3e <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3c7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3c7c:	9a04      	ldr	r2, [sp, #16]
    3c7e:	2a00      	cmp	r2, #0
    3c80:	d008      	beq.n	3c94 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    3c82:	1c50      	adds	r0, r2, #1
    3c84:	9004      	str	r0, [sp, #16]
    3c86:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    3c88:	2e01      	cmp	r6, #1
    3c8a:	d903      	bls.n	3c94 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3c8c:	1c90      	adds	r0, r2, #2
    3c8e:	9004      	str	r0, [sp, #16]
    3c90:	0a09      	lsrs	r1, r1, #8
    3c92:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    3c94:	9a06      	ldr	r2, [sp, #24]
    3c96:	9201      	str	r2, [sp, #4]
    3c98:	3201      	adds	r2, #1
    3c9a:	9206      	str	r2, [sp, #24]
	return true;
    3c9c:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3c9e:	2a00      	cmp	r2, #0
    3ca0:	d1da      	bne.n	3c58 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3ca2:	9906      	ldr	r1, [sp, #24]
    3ca4:	9a05      	ldr	r2, [sp, #20]
    3ca6:	4291      	cmp	r1, r2
    3ca8:	d3d6      	bcc.n	3c58 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3caa:	4649      	mov	r1, r9
    3cac:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3cae:	07d9      	lsls	r1, r3, #31
    3cb0:	d5d2      	bpl.n	3c58 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    3cb2:	9903      	ldr	r1, [sp, #12]
    3cb4:	2900      	cmp	r1, #0
    3cb6:	d006      	beq.n	3cc6 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    3cb8:	1c48      	adds	r0, r1, #1
    3cba:	9003      	str	r0, [sp, #12]
    3cbc:	7808      	ldrb	r0, [r1, #0]
    3cbe:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    3cc0:	2e01      	cmp	r6, #1
    3cc2:	d8be      	bhi.n	3c42 <_spi_m_sync_trans+0x56>
    3cc4:	e7c4      	b.n	3c50 <_spi_m_sync_trans+0x64>
		data = dummy;
    3cc6:	4680      	mov	r8, r0
    3cc8:	e7c2      	b.n	3c50 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3cca:	2301      	movs	r3, #1
    3ccc:	425b      	negs	r3, r3
    3cce:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3cd0:	3381      	adds	r3, #129	; 0x81
    3cd2:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3cd4:	2013      	movs	r0, #19
    3cd6:	4240      	negs	r0, r0
    3cd8:	e7c2      	b.n	3c60 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3cda:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3cdc:	079b      	lsls	r3, r3, #30
    3cde:	d0fc      	beq.n	3cda <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3ce0:	2303      	movs	r3, #3
    3ce2:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    3ce4:	b009      	add	sp, #36	; 0x24
    3ce6:	bc0c      	pop	{r2, r3}
    3ce8:	4690      	mov	r8, r2
    3cea:	4699      	mov	r9, r3
    3cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    3cee:	2004      	movs	r0, #4
    3cf0:	4240      	negs	r0, r0
    3cf2:	e7f7      	b.n	3ce4 <_spi_m_sync_trans+0xf8>
    3cf4:	00000ab2 	.word	0x00000ab2
    3cf8:	00011000 	.word	0x00011000
    3cfc:	000031d1 	.word	0x000031d1

00003d00 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    3d00:	4a14      	ldr	r2, [pc, #80]	; (3d54 <_sysctrl_init_sources+0x54>)
    3d02:	2366      	movs	r3, #102	; 0x66
    3d04:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3d06:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    3d08:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3d0a:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3d0c:	0f9b      	lsrs	r3, r3, #30
    3d0e:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3d10:	0409      	lsls	r1, r1, #16
    3d12:	4811      	ldr	r0, [pc, #68]	; (3d58 <_sysctrl_init_sources+0x58>)
    3d14:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    3d16:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    3d18:	2102      	movs	r1, #2
    3d1a:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3d1c:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    3d1e:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    3d20:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    3d22:	041b      	lsls	r3, r3, #16
    3d24:	21fe      	movs	r1, #254	; 0xfe
    3d26:	03c9      	lsls	r1, r1, #15
    3d28:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    3d2a:	2146      	movs	r1, #70	; 0x46
    3d2c:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    3d2e:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3d30:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    3d32:	3927      	subs	r1, #39	; 0x27
    3d34:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    3d36:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <_sysctrl_init_sources+0x54>)
    3d3a:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    3d3c:	079b      	lsls	r3, r3, #30
    3d3e:	d5fb      	bpl.n	3d38 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3d40:	4b04      	ldr	r3, [pc, #16]	; (3d54 <_sysctrl_init_sources+0x54>)
    3d42:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    3d44:	075b      	lsls	r3, r3, #29
    3d46:	d5fb      	bpl.n	3d40 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3d48:	4b02      	ldr	r3, [pc, #8]	; (3d54 <_sysctrl_init_sources+0x54>)
    3d4a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    3d4c:	071b      	lsls	r3, r3, #28
    3d4e:	d5fb      	bpl.n	3d48 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    3d50:	4770      	bx	lr
    3d52:	46c0      	nop			; (mov r8, r8)
    3d54:	40000800 	.word	0x40000800
    3d58:	0fff0000 	.word	0x0fff0000

00003d5c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3d5c:	2202      	movs	r2, #2
    3d5e:	4b1f      	ldr	r3, [pc, #124]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3d60:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3d62:	4b1e      	ldr	r3, [pc, #120]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3d64:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3d66:	06db      	lsls	r3, r3, #27
    3d68:	d5fb      	bpl.n	3d62 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    3d6a:	4a1d      	ldr	r2, [pc, #116]	; (3de0 <_sysctrl_init_referenced_generators+0x84>)
    3d6c:	4b1b      	ldr	r3, [pc, #108]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3d6e:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3d70:	4b1c      	ldr	r3, [pc, #112]	; (3de4 <_sysctrl_init_referenced_generators+0x88>)
    3d72:	681b      	ldr	r3, [r3, #0]
    3d74:	0e9b      	lsrs	r3, r3, #26
    3d76:	2b3f      	cmp	r3, #63	; 0x3f
    3d78:	d028      	beq.n	3dcc <_sysctrl_init_referenced_generators+0x70>
    3d7a:	029b      	lsls	r3, r3, #10
    3d7c:	2280      	movs	r2, #128	; 0x80
    3d7e:	0092      	lsls	r2, r2, #2
    3d80:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    3d82:	4b16      	ldr	r3, [pc, #88]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3d84:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3d86:	2293      	movs	r2, #147	; 0x93
    3d88:	0052      	lsls	r2, r2, #1
    3d8a:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    3d8c:	2142      	movs	r1, #66	; 0x42
    3d8e:	3ae2      	subs	r2, #226	; 0xe2
    3d90:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    3d92:	4a15      	ldr	r2, [pc, #84]	; (3de8 <_sysctrl_init_referenced_generators+0x8c>)
    3d94:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    3d96:	2200      	movs	r2, #0
    3d98:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    3d9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    3d9c:	075b      	lsls	r3, r3, #29
    3d9e:	d518      	bpl.n	3dd2 <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3da0:	4b0e      	ldr	r3, [pc, #56]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3da2:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    3da4:	06db      	lsls	r3, r3, #27
    3da6:	d5fb      	bpl.n	3da0 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    3da8:	2350      	movs	r3, #80	; 0x50
    3daa:	4a0c      	ldr	r2, [pc, #48]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3dac:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    3dae:	075b      	lsls	r3, r3, #29
    3db0:	d407      	bmi.n	3dc2 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    3db2:	2350      	movs	r3, #80	; 0x50
    3db4:	5cd3      	ldrb	r3, [r2, r3]
    3db6:	07db      	lsls	r3, r3, #31
    3db8:	d403      	bmi.n	3dc2 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    3dba:	2350      	movs	r3, #80	; 0x50
    3dbc:	5cd3      	ldrb	r3, [r2, r3]
    3dbe:	079b      	lsls	r3, r3, #30
    3dc0:	d5f2      	bpl.n	3da8 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3dc2:	4b0a      	ldr	r3, [pc, #40]	; (3dec <_sysctrl_init_referenced_generators+0x90>)
    3dc4:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    3dc6:	09db      	lsrs	r3, r3, #7
    3dc8:	d1fb      	bne.n	3dc2 <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3dca:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3dcc:	22fc      	movs	r2, #252	; 0xfc
    3dce:	01d2      	lsls	r2, r2, #7
    3dd0:	e7d7      	b.n	3d82 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3dd2:	4b02      	ldr	r3, [pc, #8]	; (3ddc <_sysctrl_init_referenced_generators+0x80>)
    3dd4:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3dd6:	06db      	lsls	r3, r3, #27
    3dd8:	d5fb      	bpl.n	3dd2 <_sysctrl_init_referenced_generators+0x76>
    3dda:	e7e5      	b.n	3da8 <_sysctrl_init_referenced_generators+0x4c>
    3ddc:	40000800 	.word	0x40000800
    3de0:	0401bb80 	.word	0x0401bb80
    3de4:	00806024 	.word	0x00806024
    3de8:	000e05b7 	.word	0x000e05b7
    3dec:	40000c00 	.word	0x40000c00

00003df0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3df0:	4b02      	ldr	r3, [pc, #8]	; (3dfc <_system_time_init+0xc>)
    3df2:	4a03      	ldr	r2, [pc, #12]	; (3e00 <_system_time_init+0x10>)
    3df4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3df6:	2205      	movs	r2, #5
    3df8:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    3dfa:	4770      	bx	lr
    3dfc:	e000e010 	.word	0xe000e010
    3e00:	00ffffff 	.word	0x00ffffff

00003e04 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3e04:	b510      	push	{r4, lr}
	_system_time_init(hw);
    3e06:	4b01      	ldr	r3, [pc, #4]	; (3e0c <_delay_init+0x8>)
    3e08:	4798      	blx	r3
}
    3e0a:	bd10      	pop	{r4, pc}
    3e0c:	00003df1 	.word	0x00003df1

00003e10 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3e10:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3e12:	e00b      	b.n	3e2c <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    3e14:	4b0b      	ldr	r3, [pc, #44]	; (3e44 <_delay_cycles+0x34>)
    3e16:	480c      	ldr	r0, [pc, #48]	; (3e48 <_delay_cycles+0x38>)
    3e18:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    3e1a:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e1c:	4b09      	ldr	r3, [pc, #36]	; (3e44 <_delay_cycles+0x34>)
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	03db      	lsls	r3, r3, #15
    3e22:	d5fb      	bpl.n	3e1c <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    3e24:	4b09      	ldr	r3, [pc, #36]	; (3e4c <_delay_cycles+0x3c>)
    3e26:	469c      	mov	ip, r3
    3e28:	4461      	add	r1, ip
	while (n--) {
    3e2a:	0010      	movs	r0, r2
    3e2c:	1e42      	subs	r2, r0, #1
    3e2e:	b2d2      	uxtb	r2, r2
    3e30:	2800      	cmp	r0, #0
    3e32:	d1ef      	bne.n	3e14 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    3e34:	4b03      	ldr	r3, [pc, #12]	; (3e44 <_delay_cycles+0x34>)
    3e36:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3e38:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3e3a:	4b02      	ldr	r3, [pc, #8]	; (3e44 <_delay_cycles+0x34>)
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	03db      	lsls	r3, r3, #15
    3e40:	d5fb      	bpl.n	3e3a <_delay_cycles+0x2a>
		;
}
    3e42:	4770      	bx	lr
    3e44:	e000e010 	.word	0xe000e010
    3e48:	00ffffff 	.word	0x00ffffff
    3e4c:	ff000001 	.word	0xff000001

00003e50 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3e50:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    3e52:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3e54:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3e56:	07d2      	lsls	r2, r2, #31
    3e58:	d400      	bmi.n	3e5c <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    3e5a:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3e5c:	2201      	movs	r2, #1
    3e5e:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    3e60:	6803      	ldr	r3, [r0, #0]
    3e62:	4798      	blx	r3
}
    3e64:	e7f9      	b.n	3e5a <tc_interrupt_handler+0xa>
	...

00003e68 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    3e68:	4b02      	ldr	r3, [pc, #8]	; (3e74 <tc_get_hardware_index+0xc>)
    3e6a:	469c      	mov	ip, r3
    3e6c:	4460      	add	r0, ip
    3e6e:	0a80      	lsrs	r0, r0, #10
    3e70:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    3e72:	4770      	bx	lr
    3e74:	bdffd400 	.word	0xbdffd400

00003e78 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    3e78:	4b06      	ldr	r3, [pc, #24]	; (3e94 <_tc_init_irq_param+0x1c>)
    3e7a:	4298      	cmp	r0, r3
    3e7c:	d003      	beq.n	3e86 <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    3e7e:	4b06      	ldr	r3, [pc, #24]	; (3e98 <_tc_init_irq_param+0x20>)
    3e80:	4298      	cmp	r0, r3
    3e82:	d003      	beq.n	3e8c <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    3e84:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    3e86:	4b05      	ldr	r3, [pc, #20]	; (3e9c <_tc_init_irq_param+0x24>)
    3e88:	6019      	str	r1, [r3, #0]
    3e8a:	e7f8      	b.n	3e7e <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    3e8c:	4b03      	ldr	r3, [pc, #12]	; (3e9c <_tc_init_irq_param+0x24>)
    3e8e:	6059      	str	r1, [r3, #4]
}
    3e90:	e7f8      	b.n	3e84 <_tc_init_irq_param+0xc>
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	42002c00 	.word	0x42002c00
    3e98:	42003000 	.word	0x42003000
    3e9c:	20000f34 	.word	0x20000f34

00003ea0 <get_tc_index>:
{
    3ea0:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    3ea2:	4b0e      	ldr	r3, [pc, #56]	; (3edc <get_tc_index+0x3c>)
    3ea4:	4798      	blx	r3
    3ea6:	3003      	adds	r0, #3
    3ea8:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3eaa:	2300      	movs	r3, #0
    3eac:	2b01      	cmp	r3, #1
    3eae:	d80b      	bhi.n	3ec8 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    3eb0:	009a      	lsls	r2, r3, #2
    3eb2:	18d2      	adds	r2, r2, r3
    3eb4:	0091      	lsls	r1, r2, #2
    3eb6:	4a0a      	ldr	r2, [pc, #40]	; (3ee0 <get_tc_index+0x40>)
    3eb8:	5c8a      	ldrb	r2, [r1, r2]
    3eba:	4290      	cmp	r0, r2
    3ebc:	d002      	beq.n	3ec4 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3ebe:	3301      	adds	r3, #1
    3ec0:	b2db      	uxtb	r3, r3
    3ec2:	e7f3      	b.n	3eac <get_tc_index+0xc>
			return i;
    3ec4:	b258      	sxtb	r0, r3
    3ec6:	e007      	b.n	3ed8 <get_tc_index+0x38>
	ASSERT(false);
    3ec8:	22a4      	movs	r2, #164	; 0xa4
    3eca:	0052      	lsls	r2, r2, #1
    3ecc:	4905      	ldr	r1, [pc, #20]	; (3ee4 <get_tc_index+0x44>)
    3ece:	2000      	movs	r0, #0
    3ed0:	4b05      	ldr	r3, [pc, #20]	; (3ee8 <get_tc_index+0x48>)
    3ed2:	4798      	blx	r3
	return -1;
    3ed4:	2001      	movs	r0, #1
    3ed6:	4240      	negs	r0, r0
}
    3ed8:	bd10      	pop	{r4, pc}
    3eda:	46c0      	nop			; (mov r8, r8)
    3edc:	00003e69 	.word	0x00003e69
    3ee0:	0001101c 	.word	0x0001101c
    3ee4:	00011044 	.word	0x00011044
    3ee8:	000031d1 	.word	0x000031d1

00003eec <_timer_init>:
{
    3eec:	b570      	push	{r4, r5, r6, lr}
    3eee:	0006      	movs	r6, r0
    3ef0:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    3ef2:	0008      	movs	r0, r1
    3ef4:	4b3f      	ldr	r3, [pc, #252]	; (3ff4 <_timer_init+0x108>)
    3ef6:	4798      	blx	r3
    3ef8:	0005      	movs	r5, r0
	device->hw = hw;
    3efa:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3efc:	228d      	movs	r2, #141	; 0x8d
    3efe:	493e      	ldr	r1, [pc, #248]	; (3ff8 <_timer_init+0x10c>)
    3f00:	2001      	movs	r0, #1
    3f02:	4b3e      	ldr	r3, [pc, #248]	; (3ffc <_timer_init+0x110>)
    3f04:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3f06:	7be3      	ldrb	r3, [r4, #15]
    3f08:	09db      	lsrs	r3, r3, #7
    3f0a:	d1fc      	bne.n	3f06 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3f0c:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3f0e:	079b      	lsls	r3, r3, #30
    3f10:	d504      	bpl.n	3f1c <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3f12:	2300      	movs	r3, #0
    3f14:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3f16:	7be3      	ldrb	r3, [r4, #15]
    3f18:	09db      	lsrs	r3, r3, #7
    3f1a:	d1fc      	bne.n	3f16 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3f1c:	2301      	movs	r3, #1
    3f1e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3f20:	7be3      	ldrb	r3, [r4, #15]
    3f22:	09db      	lsrs	r3, r3, #7
    3f24:	d1fc      	bne.n	3f20 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3f26:	00aa      	lsls	r2, r5, #2
    3f28:	1952      	adds	r2, r2, r5
    3f2a:	0091      	lsls	r1, r2, #2
    3f2c:	4b34      	ldr	r3, [pc, #208]	; (4000 <_timer_init+0x114>)
    3f2e:	185b      	adds	r3, r3, r1
    3f30:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3f32:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3f34:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    3f36:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3f38:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3f3a:	8163      	strh	r3, [r4, #10]
    3f3c:	230c      	movs	r3, #12
    3f3e:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3f40:	2b08      	cmp	r3, #8
    3f42:	d039      	beq.n	3fb8 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3f44:	2b00      	cmp	r3, #0
    3f46:	d143      	bne.n	3fd0 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    3f48:	4a2d      	ldr	r2, [pc, #180]	; (4000 <_timer_init+0x114>)
    3f4a:	00ab      	lsls	r3, r5, #2
    3f4c:	1958      	adds	r0, r3, r5
    3f4e:	0081      	lsls	r1, r0, #2
    3f50:	0008      	movs	r0, r1
    3f52:	1851      	adds	r1, r2, r1
    3f54:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3f56:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    3f58:	1812      	adds	r2, r2, r0
    3f5a:	8a13      	ldrh	r3, [r2, #16]
    3f5c:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    3f5e:	2301      	movs	r3, #1
    3f60:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    3f62:	0031      	movs	r1, r6
    3f64:	0020      	movs	r0, r4
    3f66:	4b27      	ldr	r3, [pc, #156]	; (4004 <_timer_init+0x118>)
    3f68:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    3f6a:	0020      	movs	r0, r4
    3f6c:	4b26      	ldr	r3, [pc, #152]	; (4008 <_timer_init+0x11c>)
    3f6e:	4798      	blx	r3
    3f70:	3012      	adds	r0, #18
    3f72:	b2c0      	uxtb	r0, r0
    3f74:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3f76:	2b00      	cmp	r3, #0
    3f78:	db0a      	blt.n	3f90 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f7a:	211f      	movs	r1, #31
    3f7c:	4001      	ands	r1, r0
    3f7e:	2201      	movs	r2, #1
    3f80:	408a      	lsls	r2, r1
    3f82:	2180      	movs	r1, #128	; 0x80
    3f84:	4c21      	ldr	r4, [pc, #132]	; (400c <_timer_init+0x120>)
    3f86:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f8c:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    3f90:	2b00      	cmp	r3, #0
    3f92:	db07      	blt.n	3fa4 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f94:	211f      	movs	r1, #31
    3f96:	4001      	ands	r1, r0
    3f98:	2201      	movs	r2, #1
    3f9a:	408a      	lsls	r2, r1
    3f9c:	21c0      	movs	r1, #192	; 0xc0
    3f9e:	0049      	lsls	r1, r1, #1
    3fa0:	4c1a      	ldr	r4, [pc, #104]	; (400c <_timer_init+0x120>)
    3fa2:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	db05      	blt.n	3fb4 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fa8:	231f      	movs	r3, #31
    3faa:	4018      	ands	r0, r3
    3fac:	3b1e      	subs	r3, #30
    3fae:	4083      	lsls	r3, r0
    3fb0:	4a16      	ldr	r2, [pc, #88]	; (400c <_timer_init+0x120>)
    3fb2:	6013      	str	r3, [r2, #0]
}
    3fb4:	2000      	movs	r0, #0
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3fb8:	4a11      	ldr	r2, [pc, #68]	; (4000 <_timer_init+0x114>)
    3fba:	00ab      	lsls	r3, r5, #2
    3fbc:	1958      	adds	r0, r3, r5
    3fbe:	0081      	lsls	r1, r0, #2
    3fc0:	0008      	movs	r0, r1
    3fc2:	1851      	adds	r1, r2, r1
    3fc4:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3fc6:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3fc8:	1812      	adds	r2, r2, r0
    3fca:	6913      	ldr	r3, [r2, #16]
    3fcc:	61e3      	str	r3, [r4, #28]
    3fce:	e7c6      	b.n	3f5e <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3fd0:	2b04      	cmp	r3, #4
    3fd2:	d1c4      	bne.n	3f5e <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    3fd4:	490a      	ldr	r1, [pc, #40]	; (4000 <_timer_init+0x114>)
    3fd6:	00ab      	lsls	r3, r5, #2
    3fd8:	1958      	adds	r0, r3, r5
    3fda:	0082      	lsls	r2, r0, #2
    3fdc:	188a      	adds	r2, r1, r2
    3fde:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3fe0:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    3fe2:	7c12      	ldrb	r2, [r2, #16]
    3fe4:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    3fe6:	195d      	adds	r5, r3, r5
    3fe8:	00ab      	lsls	r3, r5, #2
    3fea:	18c9      	adds	r1, r1, r3
    3fec:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3fee:	7523      	strb	r3, [r4, #20]
    3ff0:	e7b5      	b.n	3f5e <_timer_init+0x72>
    3ff2:	46c0      	nop			; (mov r8, r8)
    3ff4:	00003ea1 	.word	0x00003ea1
    3ff8:	00011044 	.word	0x00011044
    3ffc:	000031d1 	.word	0x000031d1
    4000:	0001101c 	.word	0x0001101c
    4004:	00003e79 	.word	0x00003e79
    4008:	00003e69 	.word	0x00003e69
    400c:	e000e100 	.word	0xe000e100

00004010 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4010:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    4012:	8813      	ldrh	r3, [r2, #0]
    4014:	2102      	movs	r1, #2
    4016:	430b      	orrs	r3, r1
    4018:	b29b      	uxth	r3, r3
    401a:	8013      	strh	r3, [r2, #0]
}
    401c:	4770      	bx	lr

0000401e <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    401e:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4020:	8813      	ldrh	r3, [r2, #0]
    4022:	2102      	movs	r1, #2
    4024:	438b      	bics	r3, r1
    4026:	8013      	strh	r3, [r2, #0]
}
    4028:	4770      	bx	lr

0000402a <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    402a:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    402c:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    402e:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    4030:	2001      	movs	r0, #1
    4032:	4018      	ands	r0, r3
}
    4034:	4770      	bx	lr

00004036 <_tc_get_timer>:
}
    4036:	2000      	movs	r0, #0
    4038:	4770      	bx	lr
	...

0000403c <_timer_set_irq>:
{
    403c:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    403e:	68c0      	ldr	r0, [r0, #12]
    4040:	4b03      	ldr	r3, [pc, #12]	; (4050 <_timer_set_irq+0x14>)
    4042:	4798      	blx	r3
    4044:	3012      	adds	r0, #18
    4046:	b2c0      	uxtb	r0, r0
    4048:	4b02      	ldr	r3, [pc, #8]	; (4054 <_timer_set_irq+0x18>)
    404a:	4798      	blx	r3
}
    404c:	bd10      	pop	{r4, pc}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	00003e69 	.word	0x00003e69
    4054:	000033a5 	.word	0x000033a5

00004058 <TC3_Handler>:
{
    4058:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    405a:	4b02      	ldr	r3, [pc, #8]	; (4064 <TC3_Handler+0xc>)
    405c:	6818      	ldr	r0, [r3, #0]
    405e:	4b02      	ldr	r3, [pc, #8]	; (4068 <TC3_Handler+0x10>)
    4060:	4798      	blx	r3
}
    4062:	bd10      	pop	{r4, pc}
    4064:	20000f34 	.word	0x20000f34
    4068:	00003e51 	.word	0x00003e51

0000406c <TC4_Handler>:
{
    406c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    406e:	4b02      	ldr	r3, [pc, #8]	; (4078 <TC4_Handler+0xc>)
    4070:	6858      	ldr	r0, [r3, #4]
    4072:	4b02      	ldr	r3, [pc, #8]	; (407c <TC4_Handler+0x10>)
    4074:	4798      	blx	r3
}
    4076:	bd10      	pop	{r4, pc}
    4078:	20000f34 	.word	0x20000f34
    407c:	00003e51 	.word	0x00003e51

00004080 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4080:	2000      	movs	r0, #0
    4082:	4770      	bx	lr

00004084 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4084:	4b12      	ldr	r3, [pc, #72]	; (40d0 <_usb_load_calib+0x4c>)
    4086:	681a      	ldr	r2, [r3, #0]
    4088:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    408a:	211f      	movs	r1, #31
    408c:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    408e:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    4090:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4092:	0dd0      	lsrs	r0, r2, #23
    4094:	2207      	movs	r2, #7
    4096:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    4098:	2b1f      	cmp	r3, #31
    409a:	d012      	beq.n	40c2 <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    409c:	291f      	cmp	r1, #31
    409e:	d012      	beq.n	40c6 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    40a0:	2a07      	cmp	r2, #7
    40a2:	d012      	beq.n	40ca <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    40a4:	019b      	lsls	r3, r3, #6
    40a6:	430b      	orrs	r3, r1
    40a8:	0312      	lsls	r2, r2, #12
    40aa:	4313      	orrs	r3, r2
    40ac:	4a09      	ldr	r2, [pc, #36]	; (40d4 <_usb_load_calib+0x50>)
    40ae:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    40b0:	78d3      	ldrb	r3, [r2, #3]
    40b2:	2103      	movs	r1, #3
    40b4:	430b      	orrs	r3, r1
    40b6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    40b8:	78d3      	ldrb	r3, [r2, #3]
    40ba:	210c      	movs	r1, #12
    40bc:	430b      	orrs	r3, r1
    40be:	70d3      	strb	r3, [r2, #3]
}
    40c0:	4770      	bx	lr
		pad_transn = 5;
    40c2:	3b1a      	subs	r3, #26
    40c4:	e7ea      	b.n	409c <_usb_load_calib+0x18>
		pad_transp = 29;
    40c6:	3902      	subs	r1, #2
    40c8:	e7ea      	b.n	40a0 <_usb_load_calib+0x1c>
		pad_trim = 5;
    40ca:	3a02      	subs	r2, #2
    40cc:	e7ea      	b.n	40a4 <_usb_load_calib+0x20>
    40ce:	46c0      	nop			; (mov r8, r8)
    40d0:	00806024 	.word	0x00806024
    40d4:	41005000 	.word	0x41005000

000040d8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    40d8:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    40da:	7c83      	ldrb	r3, [r0, #18]
    40dc:	220f      	movs	r2, #15
    40de:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    40e0:	7cc1      	ldrb	r1, [r0, #19]
    40e2:	3a08      	subs	r2, #8
    40e4:	400a      	ands	r2, r1

	if (!is_ctrl) {
    40e6:	2a01      	cmp	r2, #1
    40e8:	d00d      	beq.n	4106 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    40ea:	001a      	movs	r2, r3
    40ec:	3208      	adds	r2, #8
    40ee:	0152      	lsls	r2, r2, #5
    40f0:	4919      	ldr	r1, [pc, #100]	; (4158 <_usb_d_dev_handle_setup+0x80>)
    40f2:	468c      	mov	ip, r1
    40f4:	4462      	add	r2, ip
    40f6:	2110      	movs	r1, #16
    40f8:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    40fa:	015b      	lsls	r3, r3, #5
    40fc:	4a17      	ldr	r2, [pc, #92]	; (415c <_usb_d_dev_handle_setup+0x84>)
    40fe:	4694      	mov	ip, r2
    4100:	4463      	add	r3, ip
    4102:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    4104:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    4106:	064a      	lsls	r2, r1, #25
    4108:	d50c      	bpl.n	4124 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    410a:	7cc2      	ldrb	r2, [r0, #19]
    410c:	2140      	movs	r1, #64	; 0x40
    410e:	438a      	bics	r2, r1
    4110:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4112:	001a      	movs	r2, r3
    4114:	3208      	adds	r2, #8
    4116:	0152      	lsls	r2, r2, #5
    4118:	4c0f      	ldr	r4, [pc, #60]	; (4158 <_usb_d_dev_handle_setup+0x80>)
    411a:	46a4      	mov	ip, r4
    411c:	4462      	add	r2, ip
    411e:	2480      	movs	r4, #128	; 0x80
    4120:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4122:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    4124:	7cc2      	ldrb	r2, [r0, #19]
    4126:	2108      	movs	r1, #8
    4128:	438a      	bics	r2, r1
    412a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    412c:	015a      	lsls	r2, r3, #5
    412e:	490c      	ldr	r1, [pc, #48]	; (4160 <_usb_d_dev_handle_setup+0x88>)
    4130:	1889      	adds	r1, r1, r2
    4132:	2400      	movs	r4, #0
    4134:	728c      	strb	r4, [r1, #10]
    4136:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4138:	3308      	adds	r3, #8
    413a:	015b      	lsls	r3, r3, #5
    413c:	4906      	ldr	r1, [pc, #24]	; (4158 <_usb_d_dev_handle_setup+0x80>)
    413e:	468c      	mov	ip, r1
    4140:	4463      	add	r3, ip
    4142:	216f      	movs	r1, #111	; 0x6f
    4144:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4146:	4b05      	ldr	r3, [pc, #20]	; (415c <_usb_d_dev_handle_setup+0x84>)
    4148:	469c      	mov	ip, r3
    414a:	4462      	add	r2, ip
    414c:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    414e:	4b05      	ldr	r3, [pc, #20]	; (4164 <_usb_d_dev_handle_setup+0x8c>)
    4150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4152:	7c80      	ldrb	r0, [r0, #18]
    4154:	4798      	blx	r3
    4156:	e7d5      	b.n	4104 <_usb_d_dev_handle_setup+0x2c>
    4158:	41005000 	.word	0x41005000
    415c:	41005108 	.word	0x41005108
    4160:	20000f3c 	.word	0x20000f3c
    4164:	20000fbc 	.word	0x20000fbc

00004168 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    4168:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    416a:	7c82      	ldrb	r2, [r0, #18]
    416c:	230f      	movs	r3, #15
    416e:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4170:	2220      	movs	r2, #32
    4172:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4174:	b2d2      	uxtb	r2, r2
    4176:	015b      	lsls	r3, r3, #5
    4178:	4905      	ldr	r1, [pc, #20]	; (4190 <_usb_d_dev_handle_stall+0x28>)
    417a:	468c      	mov	ip, r1
    417c:	4463      	add	r3, ip
    417e:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    4180:	4b04      	ldr	r3, [pc, #16]	; (4194 <_usb_d_dev_handle_stall+0x2c>)
    4182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4184:	6882      	ldr	r2, [r0, #8]
    4186:	7c80      	ldrb	r0, [r0, #18]
    4188:	2101      	movs	r1, #1
    418a:	4798      	blx	r3
}
    418c:	bd10      	pop	{r4, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	41005108 	.word	0x41005108
    4194:	20000fbc 	.word	0x20000fbc

00004198 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4198:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    419a:	7c83      	ldrb	r3, [r0, #18]
    419c:	2bff      	cmp	r3, #255	; 0xff
    419e:	d002      	beq.n	41a6 <_usb_d_dev_trans_done+0xe>
    41a0:	7cc2      	ldrb	r2, [r0, #19]
    41a2:	0652      	lsls	r2, r2, #25
    41a4:	d400      	bmi.n	41a8 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    41a6:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    41a8:	7cc2      	ldrb	r2, [r0, #19]
    41aa:	2440      	movs	r4, #64	; 0x40
    41ac:	43a2      	bics	r2, r4
    41ae:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    41b0:	4a02      	ldr	r2, [pc, #8]	; (41bc <_usb_d_dev_trans_done+0x24>)
    41b2:	6b14      	ldr	r4, [r2, #48]	; 0x30
    41b4:	6882      	ldr	r2, [r0, #8]
    41b6:	0018      	movs	r0, r3
    41b8:	47a0      	blx	r4
    41ba:	e7f4      	b.n	41a6 <_usb_d_dev_trans_done+0xe>
    41bc:	20000fbc 	.word	0x20000fbc

000041c0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    41c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41c2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    41c4:	7c84      	ldrb	r4, [r0, #18]
    41c6:	230f      	movs	r3, #15
    41c8:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    41ca:	4d18      	ldr	r5, [pc, #96]	; (422c <_usb_d_dev_trans_stop+0x6c>)
    41cc:	882e      	ldrh	r6, [r5, #0]
    41ce:	ad01      	add	r5, sp, #4
    41d0:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    41d2:	2cff      	cmp	r4, #255	; 0xff
    41d4:	d01e      	beq.n	4214 <_usb_d_dev_trans_stop+0x54>
    41d6:	7cc4      	ldrb	r4, [r0, #19]
    41d8:	0664      	lsls	r4, r4, #25
    41da:	d51b      	bpl.n	4214 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    41dc:	2900      	cmp	r1, #0
    41de:	d01b      	beq.n	4218 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    41e0:	001c      	movs	r4, r3
    41e2:	3408      	adds	r4, #8
    41e4:	0164      	lsls	r4, r4, #5
    41e6:	4d12      	ldr	r5, [pc, #72]	; (4230 <_usb_d_dev_trans_stop+0x70>)
    41e8:	46ac      	mov	ip, r5
    41ea:	4464      	add	r4, ip
    41ec:	2580      	movs	r5, #128	; 0x80
    41ee:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    41f0:	ad01      	add	r5, sp, #4
    41f2:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    41f4:	001c      	movs	r4, r3
    41f6:	3408      	adds	r4, #8
    41f8:	0164      	lsls	r4, r4, #5
    41fa:	4f0d      	ldr	r7, [pc, #52]	; (4230 <_usb_d_dev_trans_stop+0x70>)
    41fc:	46bc      	mov	ip, r7
    41fe:	4464      	add	r4, ip
    4200:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    4202:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4204:	015b      	lsls	r3, r3, #5
    4206:	4c0b      	ldr	r4, [pc, #44]	; (4234 <_usb_d_dev_trans_stop+0x74>)
    4208:	46a4      	mov	ip, r4
    420a:	4463      	add	r3, ip
    420c:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    420e:	0011      	movs	r1, r2
    4210:	4b09      	ldr	r3, [pc, #36]	; (4238 <_usb_d_dev_trans_stop+0x78>)
    4212:	4798      	blx	r3
}
    4214:	b003      	add	sp, #12
    4216:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4218:	001c      	movs	r4, r3
    421a:	3408      	adds	r4, #8
    421c:	0164      	lsls	r4, r4, #5
    421e:	4d04      	ldr	r5, [pc, #16]	; (4230 <_usb_d_dev_trans_stop+0x70>)
    4220:	46ac      	mov	ip, r5
    4222:	4464      	add	r4, ip
    4224:	2540      	movs	r5, #64	; 0x40
    4226:	7165      	strb	r5, [r4, #5]
    4228:	e7e2      	b.n	41f0 <_usb_d_dev_trans_stop+0x30>
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	00011058 	.word	0x00011058
    4230:	41005000 	.word	0x41005000
    4234:	41005108 	.word	0x41005108
    4238:	00004199 	.word	0x00004199

0000423c <_usb_d_dev_handle_trfail>:
{
    423c:	b5f0      	push	{r4, r5, r6, r7, lr}
    423e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    4240:	7c83      	ldrb	r3, [r0, #18]
    4242:	220f      	movs	r2, #15
    4244:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    4246:	4a3c      	ldr	r2, [pc, #240]	; (4338 <_usb_d_dev_handle_trfail+0xfc>)
    4248:	8894      	ldrh	r4, [r2, #4]
    424a:	aa01      	add	r2, sp, #4
    424c:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    424e:	015a      	lsls	r2, r3, #5
    4250:	4c3a      	ldr	r4, [pc, #232]	; (433c <_usb_d_dev_handle_trfail+0x100>)
    4252:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    4254:	2900      	cmp	r1, #0
    4256:	d033      	beq.n	42c0 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4258:	001a      	movs	r2, r3
    425a:	3208      	adds	r2, #8
    425c:	0152      	lsls	r2, r2, #5
    425e:	4d38      	ldr	r5, [pc, #224]	; (4340 <_usb_d_dev_handle_trfail+0x104>)
    4260:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4262:	0912      	lsrs	r2, r2, #4
    4264:	2507      	movs	r5, #7
    4266:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4268:	7cc2      	ldrb	r2, [r0, #19]
    426a:	2607      	movs	r6, #7
    426c:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    426e:	010a      	lsls	r2, r1, #4
    4270:	18a2      	adds	r2, r4, r2
    4272:	7a94      	ldrb	r4, [r2, #10]
    4274:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4276:	2d02      	cmp	r5, #2
    4278:	d02a      	beq.n	42d0 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    427a:	07a4      	lsls	r4, r4, #30
    427c:	d544      	bpl.n	4308 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    427e:	7a94      	ldrb	r4, [r2, #10]
    4280:	2502      	movs	r5, #2
    4282:	43ac      	bics	r4, r5
    4284:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4286:	ac01      	add	r4, sp, #4
    4288:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    428a:	001a      	movs	r2, r3
    428c:	3208      	adds	r2, #8
    428e:	0152      	lsls	r2, r2, #5
    4290:	4f2b      	ldr	r7, [pc, #172]	; (4340 <_usb_d_dev_handle_trfail+0x104>)
    4292:	46bc      	mov	ip, r7
    4294:	4462      	add	r2, ip
    4296:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    4298:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    429a:	015b      	lsls	r3, r3, #5
    429c:	4c29      	ldr	r4, [pc, #164]	; (4344 <_usb_d_dev_handle_trfail+0x108>)
    429e:	46a4      	mov	ip, r4
    42a0:	4463      	add	r3, ip
    42a2:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    42a4:	2e01      	cmp	r6, #1
    42a6:	d145      	bne.n	4334 <_usb_d_dev_handle_trfail+0xf8>
    42a8:	7cc3      	ldrb	r3, [r0, #19]
    42aa:	065b      	lsls	r3, r3, #25
    42ac:	d542      	bpl.n	4334 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    42ae:	7cc3      	ldrb	r3, [r0, #19]
    42b0:	09db      	lsrs	r3, r3, #7
    42b2:	4299      	cmp	r1, r3
    42b4:	d03e      	beq.n	4334 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    42b6:	2200      	movs	r2, #0
    42b8:	0019      	movs	r1, r3
    42ba:	4b23      	ldr	r3, [pc, #140]	; (4348 <_usb_d_dev_handle_trfail+0x10c>)
    42bc:	4798      	blx	r3
    42be:	e039      	b.n	4334 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    42c0:	001a      	movs	r2, r3
    42c2:	3208      	adds	r2, #8
    42c4:	0152      	lsls	r2, r2, #5
    42c6:	4d1e      	ldr	r5, [pc, #120]	; (4340 <_usb_d_dev_handle_trfail+0x104>)
    42c8:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    42ca:	2207      	movs	r2, #7
    42cc:	4015      	ands	r5, r2
    42ce:	e7cb      	b.n	4268 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    42d0:	07e5      	lsls	r5, r4, #31
    42d2:	d5d2      	bpl.n	427a <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    42d4:	7a94      	ldrb	r4, [r2, #10]
    42d6:	2501      	movs	r5, #1
    42d8:	43ac      	bics	r4, r5
    42da:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    42dc:	ac01      	add	r4, sp, #4
    42de:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    42e0:	001a      	movs	r2, r3
    42e2:	3208      	adds	r2, #8
    42e4:	0152      	lsls	r2, r2, #5
    42e6:	4e16      	ldr	r6, [pc, #88]	; (4340 <_usb_d_dev_handle_trfail+0x104>)
    42e8:	46b4      	mov	ip, r6
    42ea:	4462      	add	r2, ip
    42ec:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    42ee:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    42f0:	015b      	lsls	r3, r3, #5
    42f2:	4c14      	ldr	r4, [pc, #80]	; (4344 <_usb_d_dev_handle_trfail+0x108>)
    42f4:	46a4      	mov	ip, r4
    42f6:	4463      	add	r3, ip
    42f8:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    42fa:	1e4b      	subs	r3, r1, #1
    42fc:	4199      	sbcs	r1, r3
    42fe:	b2c9      	uxtb	r1, r1
    4300:	2204      	movs	r2, #4
    4302:	4b11      	ldr	r3, [pc, #68]	; (4348 <_usb_d_dev_handle_trfail+0x10c>)
    4304:	4798      	blx	r3
    4306:	e015      	b.n	4334 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    4308:	005a      	lsls	r2, r3, #1
    430a:	1852      	adds	r2, r2, r1
    430c:	0112      	lsls	r2, r2, #4
    430e:	480b      	ldr	r0, [pc, #44]	; (433c <_usb_d_dev_handle_trfail+0x100>)
    4310:	1882      	adds	r2, r0, r2
    4312:	2000      	movs	r0, #0
    4314:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4316:	a801      	add	r0, sp, #4
    4318:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    431a:	001a      	movs	r2, r3
    431c:	3208      	adds	r2, #8
    431e:	0152      	lsls	r2, r2, #5
    4320:	4d07      	ldr	r5, [pc, #28]	; (4340 <_usb_d_dev_handle_trfail+0x104>)
    4322:	46ac      	mov	ip, r5
    4324:	4462      	add	r2, ip
    4326:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    4328:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    432a:	015b      	lsls	r3, r3, #5
    432c:	4905      	ldr	r1, [pc, #20]	; (4344 <_usb_d_dev_handle_trfail+0x108>)
    432e:	468c      	mov	ip, r1
    4330:	4463      	add	r3, ip
    4332:	701a      	strb	r2, [r3, #0]
}
    4334:	b003      	add	sp, #12
    4336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4338:	00011058 	.word	0x00011058
    433c:	20000f3c 	.word	0x20000f3c
    4340:	41005000 	.word	0x41005000
    4344:	41005108 	.word	0x41005108
    4348:	000041c1 	.word	0x000041c1

0000434c <_usb_d_dev_reset_epts>:
{
    434c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    434e:	2500      	movs	r5, #0
    4350:	e018      	b.n	4384 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4352:	4c10      	ldr	r4, [pc, #64]	; (4394 <_usb_d_dev_reset_epts+0x48>)
    4354:	3420      	adds	r4, #32
    4356:	00ae      	lsls	r6, r5, #2
    4358:	1973      	adds	r3, r6, r5
    435a:	0098      	lsls	r0, r3, #2
    435c:	3010      	adds	r0, #16
    435e:	1820      	adds	r0, r4, r0
    4360:	3004      	adds	r0, #4
    4362:	2103      	movs	r1, #3
    4364:	4b0c      	ldr	r3, [pc, #48]	; (4398 <_usb_d_dev_reset_epts+0x4c>)
    4366:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    4368:	1972      	adds	r2, r6, r5
    436a:	0093      	lsls	r3, r2, #2
    436c:	18e3      	adds	r3, r4, r3
    436e:	3326      	adds	r3, #38	; 0x26
    4370:	22ff      	movs	r2, #255	; 0xff
    4372:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    4374:	1976      	adds	r6, r6, r5
    4376:	00b3      	lsls	r3, r6, #2
    4378:	18e4      	adds	r4, r4, r3
    437a:	3427      	adds	r4, #39	; 0x27
    437c:	2300      	movs	r3, #0
    437e:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    4380:	3501      	adds	r5, #1
    4382:	b2ed      	uxtb	r5, r5
    4384:	2d08      	cmp	r5, #8
    4386:	d9e4      	bls.n	4352 <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4388:	22a0      	movs	r2, #160	; 0xa0
    438a:	2100      	movs	r1, #0
    438c:	4803      	ldr	r0, [pc, #12]	; (439c <_usb_d_dev_reset_epts+0x50>)
    438e:	4b04      	ldr	r3, [pc, #16]	; (43a0 <_usb_d_dev_reset_epts+0x54>)
    4390:	4798      	blx	r3
}
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	20000fbc 	.word	0x20000fbc
    4398:	00004199 	.word	0x00004199
    439c:	20000f3c 	.word	0x20000f3c
    43a0:	0000bf99 	.word	0x0000bf99

000043a4 <_usb_d_dev_in_next>:
{
    43a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43a6:	46c6      	mov	lr, r8
    43a8:	b500      	push	{lr}
    43aa:	0005      	movs	r5, r0
    43ac:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    43ae:	7c83      	ldrb	r3, [r0, #18]
    43b0:	240f      	movs	r4, #15
    43b2:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    43b4:	0162      	lsls	r2, r4, #5
    43b6:	4b56      	ldr	r3, [pc, #344]	; (4510 <_usb_d_dev_in_next+0x16c>)
    43b8:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    43ba:	2900      	cmp	r1, #0
    43bc:	d058      	beq.n	4470 <_usb_d_dev_in_next+0xcc>
    43be:	6959      	ldr	r1, [r3, #20]
    43c0:	0489      	lsls	r1, r1, #18
    43c2:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    43c4:	8a2b      	ldrh	r3, [r5, #16]
    43c6:	4a53      	ldr	r2, [pc, #332]	; (4514 <_usb_d_dev_in_next+0x170>)
    43c8:	4293      	cmp	r3, r2
    43ca:	d053      	beq.n	4474 <_usb_d_dev_in_next+0xd0>
    43cc:	3b01      	subs	r3, #1
    43ce:	b21b      	sxth	r3, r3
    43d0:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    43d2:	7cea      	ldrb	r2, [r5, #19]
    43d4:	2707      	movs	r7, #7
    43d6:	4017      	ands	r7, r2
	if (isr) {
    43d8:	2e00      	cmp	r6, #0
    43da:	d007      	beq.n	43ec <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    43dc:	0022      	movs	r2, r4
    43de:	3208      	adds	r2, #8
    43e0:	0152      	lsls	r2, r2, #5
    43e2:	484d      	ldr	r0, [pc, #308]	; (4518 <_usb_d_dev_in_next+0x174>)
    43e4:	4684      	mov	ip, r0
    43e6:	4462      	add	r2, ip
    43e8:	2002      	movs	r0, #2
    43ea:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    43ec:	68aa      	ldr	r2, [r5, #8]
    43ee:	4694      	mov	ip, r2
    43f0:	4461      	add	r1, ip
    43f2:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    43f4:	686a      	ldr	r2, [r5, #4]
    43f6:	4291      	cmp	r1, r2
    43f8:	d24e      	bcs.n	4498 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    43fa:	b292      	uxth	r2, r2
    43fc:	b28b      	uxth	r3, r1
    43fe:	1ad2      	subs	r2, r2, r3
    4400:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    4402:	7ceb      	ldrb	r3, [r5, #19]
    4404:	069b      	lsls	r3, r3, #26
    4406:	d537      	bpl.n	4478 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    4408:	8a2b      	ldrh	r3, [r5, #16]
    440a:	4698      	mov	r8, r3
    440c:	429a      	cmp	r2, r3
    440e:	d800      	bhi.n	4412 <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    4410:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4412:	682b      	ldr	r3, [r5, #0]
    4414:	469c      	mov	ip, r3
    4416:	4461      	add	r1, ip
    4418:	4642      	mov	r2, r8
    441a:	68e8      	ldr	r0, [r5, #12]
    441c:	4b3f      	ldr	r3, [pc, #252]	; (451c <_usb_d_dev_in_next+0x178>)
    441e:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4420:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    4422:	0162      	lsls	r2, r4, #5
    4424:	4b3a      	ldr	r3, [pc, #232]	; (4510 <_usb_d_dev_in_next+0x16c>)
    4426:	189b      	adds	r3, r3, r2
    4428:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    442a:	0163      	lsls	r3, r4, #5
    442c:	4a38      	ldr	r2, [pc, #224]	; (4510 <_usb_d_dev_in_next+0x16c>)
    442e:	18d2      	adds	r2, r2, r3
    4430:	6951      	ldr	r1, [r2, #20]
    4432:	4643      	mov	r3, r8
    4434:	049b      	lsls	r3, r3, #18
    4436:	0c9b      	lsrs	r3, r3, #18
    4438:	0b89      	lsrs	r1, r1, #14
    443a:	0389      	lsls	r1, r1, #14
    443c:	430b      	orrs	r3, r1
    443e:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4440:	6951      	ldr	r1, [r2, #20]
    4442:	4b37      	ldr	r3, [pc, #220]	; (4520 <_usb_d_dev_in_next+0x17c>)
    4444:	400b      	ands	r3, r1
    4446:	6153      	str	r3, [r2, #20]
	if (!isr) {
    4448:	2e00      	cmp	r6, #0
    444a:	d107      	bne.n	445c <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    444c:	2f01      	cmp	r7, #1
    444e:	d05d      	beq.n	450c <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    4450:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4452:	0163      	lsls	r3, r4, #5
    4454:	4933      	ldr	r1, [pc, #204]	; (4524 <_usb_d_dev_in_next+0x180>)
    4456:	468c      	mov	ip, r1
    4458:	4463      	add	r3, ip
    445a:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    445c:	3408      	adds	r4, #8
    445e:	0164      	lsls	r4, r4, #5
    4460:	4b2d      	ldr	r3, [pc, #180]	; (4518 <_usb_d_dev_in_next+0x174>)
    4462:	469c      	mov	ip, r3
    4464:	4464      	add	r4, ip
    4466:	2380      	movs	r3, #128	; 0x80
    4468:	7163      	strb	r3, [r4, #5]
}
    446a:	bc04      	pop	{r2}
    446c:	4690      	mov	r8, r2
    446e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4470:	2100      	movs	r1, #0
    4472:	e7a7      	b.n	43c4 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4474:	b21b      	sxth	r3, r3
    4476:	e7ab      	b.n	43d0 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    4478:	2380      	movs	r3, #128	; 0x80
    447a:	019b      	lsls	r3, r3, #6
    447c:	429a      	cmp	r2, r3
    447e:	d807      	bhi.n	4490 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    4480:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4482:	682b      	ldr	r3, [r5, #0]
    4484:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    4486:	0162      	lsls	r2, r4, #5
    4488:	4b21      	ldr	r3, [pc, #132]	; (4510 <_usb_d_dev_in_next+0x16c>)
    448a:	189b      	adds	r3, r3, r2
    448c:	6119      	str	r1, [r3, #16]
    448e:	e7cc      	b.n	442a <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    4490:	2380      	movs	r3, #128	; 0x80
    4492:	019b      	lsls	r3, r3, #6
    4494:	4698      	mov	r8, r3
    4496:	e7f4      	b.n	4482 <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    4498:	7cea      	ldrb	r2, [r5, #19]
    449a:	06d2      	lsls	r2, r2, #27
    449c:	d50f      	bpl.n	44be <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    449e:	7ceb      	ldrb	r3, [r5, #19]
    44a0:	2210      	movs	r2, #16
    44a2:	4393      	bics	r3, r2
    44a4:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    44a6:	0162      	lsls	r2, r4, #5
    44a8:	4b19      	ldr	r3, [pc, #100]	; (4510 <_usb_d_dev_in_next+0x16c>)
    44aa:	189b      	adds	r3, r3, r2
    44ac:	695a      	ldr	r2, [r3, #20]
    44ae:	0b92      	lsrs	r2, r2, #14
    44b0:	0391      	lsls	r1, r2, #14
    44b2:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    44b4:	6959      	ldr	r1, [r3, #20]
    44b6:	4a1a      	ldr	r2, [pc, #104]	; (4520 <_usb_d_dev_in_next+0x17c>)
    44b8:	400a      	ands	r2, r1
    44ba:	615a      	str	r2, [r3, #20]
    44bc:	e7c4      	b.n	4448 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    44be:	2f01      	cmp	r7, #1
    44c0:	d00d      	beq.n	44de <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    44c2:	0164      	lsls	r4, r4, #5
    44c4:	4a18      	ldr	r2, [pc, #96]	; (4528 <_usb_d_dev_in_next+0x184>)
    44c6:	4694      	mov	ip, r2
    44c8:	4464      	add	r4, ip
    44ca:	224a      	movs	r2, #74	; 0x4a
    44cc:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    44ce:	8a2a      	ldrh	r2, [r5, #16]
    44d0:	4293      	cmp	r3, r2
    44d2:	d00b      	beq.n	44ec <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    44d4:	2100      	movs	r1, #0
    44d6:	0028      	movs	r0, r5
    44d8:	4b14      	ldr	r3, [pc, #80]	; (452c <_usb_d_dev_in_next+0x188>)
    44da:	4798      	blx	r3
	return;
    44dc:	e7c5      	b.n	446a <_usb_d_dev_in_next+0xc6>
    44de:	0164      	lsls	r4, r4, #5
    44e0:	4a11      	ldr	r2, [pc, #68]	; (4528 <_usb_d_dev_in_next+0x184>)
    44e2:	4694      	mov	ip, r2
    44e4:	4464      	add	r4, ip
    44e6:	224b      	movs	r2, #75	; 0x4b
    44e8:	7022      	strb	r2, [r4, #0]
    44ea:	e7f0      	b.n	44ce <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    44ec:	7ceb      	ldrb	r3, [r5, #19]
    44ee:	2240      	movs	r2, #64	; 0x40
    44f0:	4393      	bics	r3, r2
    44f2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    44f4:	4b0e      	ldr	r3, [pc, #56]	; (4530 <_usb_d_dev_in_next+0x18c>)
    44f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44f8:	7ca8      	ldrb	r0, [r5, #18]
    44fa:	68a9      	ldr	r1, [r5, #8]
    44fc:	4798      	blx	r3
    44fe:	2800      	cmp	r0, #0
    4500:	d1b3      	bne.n	446a <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    4502:	7ceb      	ldrb	r3, [r5, #19]
    4504:	2240      	movs	r2, #64	; 0x40
    4506:	4313      	orrs	r3, r2
    4508:	74eb      	strb	r3, [r5, #19]
    450a:	e7e3      	b.n	44d4 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    450c:	224e      	movs	r2, #78	; 0x4e
    450e:	e7a0      	b.n	4452 <_usb_d_dev_in_next+0xae>
    4510:	20000f3c 	.word	0x20000f3c
    4514:	000003ff 	.word	0x000003ff
    4518:	41005000 	.word	0x41005000
    451c:	0000bf15 	.word	0x0000bf15
    4520:	f0003fff 	.word	0xf0003fff
    4524:	41005109 	.word	0x41005109
    4528:	41005108 	.word	0x41005108
    452c:	00004199 	.word	0x00004199
    4530:	20000fbc 	.word	0x20000fbc

00004534 <_usb_d_dev_out_next>:
{
    4534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4536:	46de      	mov	lr, fp
    4538:	4657      	mov	r7, sl
    453a:	464e      	mov	r6, r9
    453c:	4645      	mov	r5, r8
    453e:	b5e0      	push	{r5, r6, r7, lr}
    4540:	0004      	movs	r4, r0
    4542:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4544:	7c83      	ldrb	r3, [r0, #18]
    4546:	250f      	movs	r5, #15
    4548:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    454a:	2900      	cmp	r1, #0
    454c:	d059      	beq.n	4602 <_usb_d_dev_out_next+0xce>
    454e:	016a      	lsls	r2, r5, #5
    4550:	4b71      	ldr	r3, [pc, #452]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    4552:	189b      	adds	r3, r3, r2
    4554:	685b      	ldr	r3, [r3, #4]
    4556:	011b      	lsls	r3, r3, #4
    4558:	0c9b      	lsrs	r3, r3, #18
    455a:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    455c:	2f00      	cmp	r7, #0
    455e:	d053      	beq.n	4608 <_usb_d_dev_out_next+0xd4>
    4560:	016a      	lsls	r2, r5, #5
    4562:	4b6d      	ldr	r3, [pc, #436]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    4564:	189b      	adds	r3, r3, r2
    4566:	685b      	ldr	r3, [r3, #4]
    4568:	049b      	lsls	r3, r3, #18
    456a:	0c9b      	lsrs	r3, r3, #18
    456c:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    456e:	8a26      	ldrh	r6, [r4, #16]
    4570:	4b6a      	ldr	r3, [pc, #424]	; (471c <_usb_d_dev_out_next+0x1e8>)
    4572:	429e      	cmp	r6, r3
    4574:	d001      	beq.n	457a <_usb_d_dev_out_next+0x46>
    4576:	3e01      	subs	r6, #1
    4578:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    457a:	4643      	mov	r3, r8
    457c:	4033      	ands	r3, r6
    457e:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4580:	7ce3      	ldrb	r3, [r4, #19]
    4582:	2207      	movs	r2, #7
    4584:	401a      	ands	r2, r3
    4586:	4691      	mov	r9, r2
	if (isr) {
    4588:	2f00      	cmp	r7, #0
    458a:	d007      	beq.n	459c <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    458c:	002b      	movs	r3, r5
    458e:	3308      	adds	r3, #8
    4590:	015b      	lsls	r3, r3, #5
    4592:	4a63      	ldr	r2, [pc, #396]	; (4720 <_usb_d_dev_out_next+0x1ec>)
    4594:	4694      	mov	ip, r2
    4596:	4463      	add	r3, ip
    4598:	2201      	movs	r2, #1
    459a:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    459c:	7ce3      	ldrb	r3, [r4, #19]
    459e:	069b      	lsls	r3, r3, #26
    45a0:	d511      	bpl.n	45c6 <_usb_d_dev_out_next+0x92>
    45a2:	6862      	ldr	r2, [r4, #4]
    45a4:	2a00      	cmp	r2, #0
    45a6:	d00e      	beq.n	45c6 <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    45a8:	b292      	uxth	r2, r2
    45aa:	8923      	ldrh	r3, [r4, #8]
    45ac:	1ad2      	subs	r2, r2, r3
    45ae:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    45b0:	6823      	ldr	r3, [r4, #0]
    45b2:	68a1      	ldr	r1, [r4, #8]
    45b4:	468c      	mov	ip, r1
    45b6:	4463      	add	r3, ip
    45b8:	0018      	movs	r0, r3
    45ba:	68e1      	ldr	r1, [r4, #12]
    45bc:	4593      	cmp	fp, r2
    45be:	d200      	bcs.n	45c2 <_usb_d_dev_out_next+0x8e>
    45c0:	465a      	mov	r2, fp
    45c2:	4b58      	ldr	r3, [pc, #352]	; (4724 <_usb_d_dev_out_next+0x1f0>)
    45c4:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    45c6:	6863      	ldr	r3, [r4, #4]
    45c8:	2b00      	cmp	r3, #0
    45ca:	d120      	bne.n	460e <_usb_d_dev_out_next+0xda>
    45cc:	7ce2      	ldrb	r2, [r4, #19]
    45ce:	06d2      	lsls	r2, r2, #27
    45d0:	d51d      	bpl.n	460e <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    45d2:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    45d4:	2210      	movs	r2, #16
    45d6:	4393      	bics	r3, r2
    45d8:	2220      	movs	r2, #32
    45da:	4313      	orrs	r3, r2
    45dc:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    45de:	494e      	ldr	r1, [pc, #312]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    45e0:	016a      	lsls	r2, r5, #5
    45e2:	68e3      	ldr	r3, [r4, #12]
    45e4:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    45e6:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    45e8:	188a      	adds	r2, r1, r2
    45ea:	6851      	ldr	r1, [r2, #4]
    45ec:	049b      	lsls	r3, r3, #18
    45ee:	091b      	lsrs	r3, r3, #4
    45f0:	484d      	ldr	r0, [pc, #308]	; (4728 <_usb_d_dev_out_next+0x1f4>)
    45f2:	4001      	ands	r1, r0
    45f4:	430b      	orrs	r3, r1
    45f6:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    45f8:	6853      	ldr	r3, [r2, #4]
    45fa:	0b9b      	lsrs	r3, r3, #14
    45fc:	0399      	lsls	r1, r3, #14
    45fe:	6051      	str	r1, [r2, #4]
    4600:	e047      	b.n	4692 <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4602:	2300      	movs	r3, #0
    4604:	469a      	mov	sl, r3
    4606:	e7a9      	b.n	455c <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4608:	2300      	movs	r3, #0
    460a:	4698      	mov	r8, r3
    460c:	e7af      	b.n	456e <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    460e:	2f00      	cmp	r7, #0
    4610:	d01d      	beq.n	464e <_usb_d_dev_out_next+0x11a>
    4612:	8a22      	ldrh	r2, [r4, #16]
    4614:	4593      	cmp	fp, r2
    4616:	d21a      	bcs.n	464e <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    4618:	7ce3      	ldrb	r3, [r4, #19]
    461a:	2210      	movs	r2, #16
    461c:	4393      	bics	r3, r2
    461e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    4620:	68a3      	ldr	r3, [r4, #8]
    4622:	4443      	add	r3, r8
    4624:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    4626:	464b      	mov	r3, r9
    4628:	2b01      	cmp	r3, #1
    462a:	d066      	beq.n	46fa <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    462c:	016b      	lsls	r3, r5, #5
    462e:	4a3f      	ldr	r2, [pc, #252]	; (472c <_usb_d_dev_out_next+0x1f8>)
    4630:	4694      	mov	ip, r2
    4632:	4463      	add	r3, ip
    4634:	2225      	movs	r2, #37	; 0x25
    4636:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    4638:	2d00      	cmp	r5, #0
    463a:	d103      	bne.n	4644 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    463c:	016d      	lsls	r5, r5, #5
    463e:	4b36      	ldr	r3, [pc, #216]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    4640:	68e2      	ldr	r2, [r4, #12]
    4642:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4644:	2100      	movs	r1, #0
    4646:	0020      	movs	r0, r4
    4648:	4b39      	ldr	r3, [pc, #228]	; (4730 <_usb_d_dev_out_next+0x1fc>)
    464a:	4798      	blx	r3
	return;
    464c:	e033      	b.n	46b6 <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    464e:	68a2      	ldr	r2, [r4, #8]
    4650:	4452      	add	r2, sl
    4652:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4654:	4293      	cmp	r3, r2
    4656:	d9e6      	bls.n	4626 <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    4658:	b29b      	uxth	r3, r3
    465a:	b291      	uxth	r1, r2
    465c:	1a5b      	subs	r3, r3, r1
    465e:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4660:	7ce1      	ldrb	r1, [r4, #19]
    4662:	0689      	lsls	r1, r1, #26
    4664:	d52d      	bpl.n	46c2 <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    4666:	8a21      	ldrh	r1, [r4, #16]
    4668:	428b      	cmp	r3, r1
    466a:	d800      	bhi.n	466e <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    466c:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    466e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4670:	016b      	lsls	r3, r5, #5
    4672:	4a29      	ldr	r2, [pc, #164]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    4674:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4676:	016b      	lsls	r3, r5, #5
    4678:	4827      	ldr	r0, [pc, #156]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    467a:	18c0      	adds	r0, r0, r3
    467c:	6842      	ldr	r2, [r0, #4]
    467e:	048b      	lsls	r3, r1, #18
    4680:	091b      	lsrs	r3, r3, #4
    4682:	4929      	ldr	r1, [pc, #164]	; (4728 <_usb_d_dev_out_next+0x1f4>)
    4684:	400a      	ands	r2, r1
    4686:	4313      	orrs	r3, r2
    4688:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    468a:	6843      	ldr	r3, [r0, #4]
    468c:	0b9b      	lsrs	r3, r3, #14
    468e:	039a      	lsls	r2, r3, #14
    4690:	6042      	str	r2, [r0, #4]
	if (!isr) {
    4692:	2f00      	cmp	r7, #0
    4694:	d108      	bne.n	46a8 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    4696:	464b      	mov	r3, r9
    4698:	2b01      	cmp	r3, #1
    469a:	d035      	beq.n	4708 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    469c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    469e:	016b      	lsls	r3, r5, #5
    46a0:	4924      	ldr	r1, [pc, #144]	; (4734 <_usb_d_dev_out_next+0x200>)
    46a2:	468c      	mov	ip, r1
    46a4:	4463      	add	r3, ip
    46a6:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    46a8:	3508      	adds	r5, #8
    46aa:	016d      	lsls	r5, r5, #5
    46ac:	4b1c      	ldr	r3, [pc, #112]	; (4720 <_usb_d_dev_out_next+0x1ec>)
    46ae:	469c      	mov	ip, r3
    46b0:	4465      	add	r5, ip
    46b2:	2340      	movs	r3, #64	; 0x40
    46b4:	712b      	strb	r3, [r5, #4]
}
    46b6:	bc3c      	pop	{r2, r3, r4, r5}
    46b8:	4690      	mov	r8, r2
    46ba:	4699      	mov	r9, r3
    46bc:	46a2      	mov	sl, r4
    46be:	46ab      	mov	fp, r5
    46c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    46c2:	8a21      	ldrh	r1, [r4, #16]
    46c4:	428b      	cmp	r3, r1
    46c6:	d90b      	bls.n	46e0 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    46c8:	2180      	movs	r1, #128	; 0x80
    46ca:	0189      	lsls	r1, r1, #6
    46cc:	428b      	cmp	r3, r1
    46ce:	d80f      	bhi.n	46f0 <_usb_d_dev_out_next+0x1bc>
    46d0:	43b3      	bics	r3, r6
    46d2:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    46d4:	6823      	ldr	r3, [r4, #0]
    46d6:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    46d8:	016b      	lsls	r3, r5, #5
    46da:	480f      	ldr	r0, [pc, #60]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    46dc:	501a      	str	r2, [r3, r0]
    46de:	e7ca      	b.n	4676 <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    46e0:	428b      	cmp	r3, r1
    46e2:	d208      	bcs.n	46f6 <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    46e4:	7ce1      	ldrb	r1, [r4, #19]
    46e6:	2020      	movs	r0, #32
    46e8:	4301      	orrs	r1, r0
    46ea:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    46ec:	0019      	movs	r1, r3
    46ee:	e7f1      	b.n	46d4 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    46f0:	2180      	movs	r1, #128	; 0x80
    46f2:	0189      	lsls	r1, r1, #6
    46f4:	e7ee      	b.n	46d4 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    46f6:	0019      	movs	r1, r3
    46f8:	e7ec      	b.n	46d4 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    46fa:	016b      	lsls	r3, r5, #5
    46fc:	4a0b      	ldr	r2, [pc, #44]	; (472c <_usb_d_dev_out_next+0x1f8>)
    46fe:	4694      	mov	ip, r2
    4700:	4463      	add	r3, ip
    4702:	222d      	movs	r2, #45	; 0x2d
    4704:	701a      	strb	r2, [r3, #0]
    4706:	e797      	b.n	4638 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    4708:	016a      	lsls	r2, r5, #5
    470a:	4b03      	ldr	r3, [pc, #12]	; (4718 <_usb_d_dev_out_next+0x1e4>)
    470c:	189b      	adds	r3, r3, r2
    470e:	2200      	movs	r2, #0
    4710:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4712:	322d      	adds	r2, #45	; 0x2d
    4714:	e7c3      	b.n	469e <_usb_d_dev_out_next+0x16a>
    4716:	46c0      	nop			; (mov r8, r8)
    4718:	20000f3c 	.word	0x20000f3c
    471c:	000003ff 	.word	0x000003ff
    4720:	41005000 	.word	0x41005000
    4724:	0000bf15 	.word	0x0000bf15
    4728:	f0003fff 	.word	0xf0003fff
    472c:	41005108 	.word	0x41005108
    4730:	00004199 	.word	0x00004199
    4734:	41005109 	.word	0x41005109

00004738 <_usb_d_dev_handler>:
{
    4738:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    473a:	4b89      	ldr	r3, [pc, #548]	; (4960 <_usb_d_dev_handler+0x228>)
    473c:	8c1d      	ldrh	r5, [r3, #32]
    473e:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    4740:	2d00      	cmp	r5, #0
    4742:	d001      	beq.n	4748 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    4744:	2400      	movs	r4, #0
    4746:	e0bf      	b.n	48c8 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4748:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    474a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    474c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    474e:	075a      	lsls	r2, r3, #29
    4750:	d40d      	bmi.n	476e <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4752:	059a      	lsls	r2, r3, #22
    4754:	d415      	bmi.n	4782 <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4756:	061a      	lsls	r2, r3, #24
    4758:	d437      	bmi.n	47ca <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    475a:	2270      	movs	r2, #112	; 0x70
    475c:	421a      	tst	r2, r3
    475e:	d13e      	bne.n	47de <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4760:	071a      	lsls	r2, r3, #28
    4762:	d457      	bmi.n	4814 <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4764:	07db      	lsls	r3, r3, #31
    4766:	d500      	bpl.n	476a <_usb_d_dev_handler+0x32>
    4768:	e068      	b.n	483c <_usb_d_dev_handler+0x104>
		rc = false;
    476a:	2300      	movs	r3, #0
    476c:	e006      	b.n	477c <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    476e:	2204      	movs	r2, #4
    4770:	4b7b      	ldr	r3, [pc, #492]	; (4960 <_usb_d_dev_handler+0x228>)
    4772:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4774:	4b7b      	ldr	r3, [pc, #492]	; (4964 <_usb_d_dev_handler+0x22c>)
    4776:	6a1b      	ldr	r3, [r3, #32]
    4778:	4798      	blx	r3
		return true;
    477a:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    477c:	2b00      	cmp	r3, #0
    477e:	d0e1      	beq.n	4744 <_usb_d_dev_handler+0xc>
}
    4780:	bd70      	pop	{r4, r5, r6, pc}
    4782:	4b77      	ldr	r3, [pc, #476]	; (4960 <_usb_d_dev_handler+0x228>)
    4784:	4a78      	ldr	r2, [pc, #480]	; (4968 <_usb_d_dev_handler+0x230>)
    4786:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4788:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    478a:	3a92      	subs	r2, #146	; 0x92
    478c:	3aff      	subs	r2, #255	; 0xff
    478e:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4790:	2300      	movs	r3, #0
    4792:	2b03      	cmp	r3, #3
    4794:	d812      	bhi.n	47bc <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4796:	0158      	lsls	r0, r3, #5
    4798:	4a74      	ldr	r2, [pc, #464]	; (496c <_usb_d_dev_handler+0x234>)
    479a:	1812      	adds	r2, r2, r0
    479c:	8912      	ldrh	r2, [r2, #8]
    479e:	0712      	lsls	r2, r2, #28
    47a0:	0f12      	lsrs	r2, r2, #28
    47a2:	2a03      	cmp	r2, #3
    47a4:	d002      	beq.n	47ac <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    47a6:	3301      	adds	r3, #1
    47a8:	b2db      	uxtb	r3, r3
    47aa:	e7f2      	b.n	4792 <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    47ac:	4b6f      	ldr	r3, [pc, #444]	; (496c <_usb_d_dev_handler+0x234>)
    47ae:	181b      	adds	r3, r3, r0
    47b0:	8919      	ldrh	r1, [r3, #8]
    47b2:	0449      	lsls	r1, r1, #17
    47b4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    47b6:	2200      	movs	r2, #0
    47b8:	811a      	strh	r2, [r3, #8]
    47ba:	e000      	b.n	47be <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    47bc:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    47be:	4b69      	ldr	r3, [pc, #420]	; (4964 <_usb_d_dev_handler+0x22c>)
    47c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47c2:	2003      	movs	r0, #3
    47c4:	4798      	blx	r3
	bool     rc    = true;
    47c6:	2301      	movs	r3, #1
    47c8:	e7d8      	b.n	477c <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    47ca:	2280      	movs	r2, #128	; 0x80
    47cc:	4b64      	ldr	r3, [pc, #400]	; (4960 <_usb_d_dev_handler+0x228>)
    47ce:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    47d0:	4b64      	ldr	r3, [pc, #400]	; (4964 <_usb_d_dev_handler+0x22c>)
    47d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47d4:	2100      	movs	r1, #0
    47d6:	2005      	movs	r0, #5
    47d8:	4798      	blx	r3
	bool     rc    = true;
    47da:	2301      	movs	r3, #1
    47dc:	e7ce      	b.n	477c <_usb_d_dev_handler+0x44>
    47de:	4b60      	ldr	r3, [pc, #384]	; (4960 <_usb_d_dev_handler+0x228>)
    47e0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    47e2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    47e4:	4a60      	ldr	r2, [pc, #384]	; (4968 <_usb_d_dev_handler+0x230>)
    47e6:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    47e8:	4b61      	ldr	r3, [pc, #388]	; (4970 <_usb_d_dev_handler+0x238>)
    47ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    47ec:	069b      	lsls	r3, r3, #26
    47ee:	d40c      	bmi.n	480a <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    47f0:	4b5f      	ldr	r3, [pc, #380]	; (4970 <_usb_d_dev_handler+0x238>)
    47f2:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    47f4:	23d0      	movs	r3, #208	; 0xd0
    47f6:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    47f8:	2bd0      	cmp	r3, #208	; 0xd0
    47fa:	d1f9      	bne.n	47f0 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    47fc:	4b59      	ldr	r3, [pc, #356]	; (4964 <_usb_d_dev_handler+0x22c>)
    47fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4800:	2100      	movs	r1, #0
    4802:	2002      	movs	r0, #2
    4804:	4798      	blx	r3
	bool     rc    = true;
    4806:	2301      	movs	r3, #1
    4808:	e7b8      	b.n	477c <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    480a:	4b59      	ldr	r3, [pc, #356]	; (4970 <_usb_d_dev_handler+0x238>)
    480c:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    480e:	06db      	lsls	r3, r3, #27
    4810:	d5fb      	bpl.n	480a <_usb_d_dev_handler+0xd2>
    4812:	e7f3      	b.n	47fc <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4814:	4b52      	ldr	r3, [pc, #328]	; (4960 <_usb_d_dev_handler+0x228>)
    4816:	2100      	movs	r1, #0
    4818:	2280      	movs	r2, #128	; 0x80
    481a:	0052      	lsls	r2, r2, #1
    481c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    481e:	3af8      	subs	r2, #248	; 0xf8
    4820:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4822:	3268      	adds	r2, #104	; 0x68
    4824:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4826:	4a50      	ldr	r2, [pc, #320]	; (4968 <_usb_d_dev_handler+0x230>)
    4828:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    482a:	4b52      	ldr	r3, [pc, #328]	; (4974 <_usb_d_dev_handler+0x23c>)
    482c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    482e:	4b4d      	ldr	r3, [pc, #308]	; (4964 <_usb_d_dev_handler+0x22c>)
    4830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4832:	2100      	movs	r1, #0
    4834:	2001      	movs	r0, #1
    4836:	4798      	blx	r3
	bool     rc    = true;
    4838:	2301      	movs	r3, #1
    483a:	e79f      	b.n	477c <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    483c:	4b48      	ldr	r3, [pc, #288]	; (4960 <_usb_d_dev_handler+0x228>)
    483e:	4a4a      	ldr	r2, [pc, #296]	; (4968 <_usb_d_dev_handler+0x230>)
    4840:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4842:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4844:	3a92      	subs	r2, #146	; 0x92
    4846:	3aff      	subs	r2, #255	; 0xff
    4848:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    484a:	4b46      	ldr	r3, [pc, #280]	; (4964 <_usb_d_dev_handler+0x22c>)
    484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    484e:	2100      	movs	r1, #0
    4850:	2004      	movs	r0, #4
    4852:	4798      	blx	r3
	bool     rc    = true;
    4854:	2301      	movs	r3, #1
    4856:	e791      	b.n	477c <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4858:	06da      	lsls	r2, r3, #27
    485a:	d407      	bmi.n	486c <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    485c:	065a      	lsls	r2, r3, #25
    485e:	d408      	bmi.n	4872 <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4860:	069b      	lsls	r3, r3, #26
    4862:	d52f      	bpl.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    4864:	2100      	movs	r1, #0
    4866:	4b44      	ldr	r3, [pc, #272]	; (4978 <_usb_d_dev_handler+0x240>)
    4868:	4798      	blx	r3
    486a:	e02b      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    486c:	4b43      	ldr	r3, [pc, #268]	; (497c <_usb_d_dev_handler+0x244>)
    486e:	4798      	blx	r3
    4870:	e028      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    4872:	2101      	movs	r1, #1
    4874:	4b40      	ldr	r3, [pc, #256]	; (4978 <_usb_d_dev_handler+0x240>)
    4876:	4798      	blx	r3
    4878:	e024      	b.n	48c4 <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    487a:	065a      	lsls	r2, r3, #25
    487c:	d40f      	bmi.n	489e <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    487e:	071a      	lsls	r2, r3, #28
    4880:	d411      	bmi.n	48a6 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4882:	079a      	lsls	r2, r3, #30
    4884:	d413      	bmi.n	48ae <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4886:	7cc1      	ldrb	r1, [r0, #19]
    4888:	2207      	movs	r2, #7
    488a:	400a      	ands	r2, r1
    488c:	2a01      	cmp	r2, #1
    488e:	d119      	bne.n	48c4 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4890:	075a      	lsls	r2, r3, #29
    4892:	d410      	bmi.n	48b6 <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4894:	06db      	lsls	r3, r3, #27
    4896:	d515      	bpl.n	48c4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    4898:	4b38      	ldr	r3, [pc, #224]	; (497c <_usb_d_dev_handler+0x244>)
    489a:	4798      	blx	r3
    489c:	e012      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    489e:	2101      	movs	r1, #1
    48a0:	4b35      	ldr	r3, [pc, #212]	; (4978 <_usb_d_dev_handler+0x240>)
    48a2:	4798      	blx	r3
    48a4:	e00e      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    48a6:	2101      	movs	r1, #1
    48a8:	4b35      	ldr	r3, [pc, #212]	; (4980 <_usb_d_dev_handler+0x248>)
    48aa:	4798      	blx	r3
    48ac:	e00a      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    48ae:	2101      	movs	r1, #1
    48b0:	4b34      	ldr	r3, [pc, #208]	; (4984 <_usb_d_dev_handler+0x24c>)
    48b2:	4798      	blx	r3
    48b4:	e006      	b.n	48c4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    48b6:	2100      	movs	r1, #0
    48b8:	4b31      	ldr	r3, [pc, #196]	; (4980 <_usb_d_dev_handler+0x248>)
    48ba:	4798      	blx	r3
    48bc:	e002      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    48be:	2100      	movs	r1, #0
    48c0:	4b2d      	ldr	r3, [pc, #180]	; (4978 <_usb_d_dev_handler+0x240>)
    48c2:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    48c4:	3401      	adds	r4, #1
    48c6:	b2e4      	uxtb	r4, r4
    48c8:	2c08      	cmp	r4, #8
    48ca:	d900      	bls.n	48ce <_usb_d_dev_handler+0x196>
    48cc:	e758      	b.n	4780 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    48ce:	4b25      	ldr	r3, [pc, #148]	; (4964 <_usb_d_dev_handler+0x22c>)
    48d0:	3320      	adds	r3, #32
    48d2:	00a2      	lsls	r2, r4, #2
    48d4:	1911      	adds	r1, r2, r4
    48d6:	0088      	lsls	r0, r1, #2
    48d8:	0001      	movs	r1, r0
    48da:	3010      	adds	r0, #16
    48dc:	1818      	adds	r0, r3, r0
    48de:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    48e0:	185b      	adds	r3, r3, r1
    48e2:	3326      	adds	r3, #38	; 0x26
    48e4:	781b      	ldrb	r3, [r3, #0]
    48e6:	2bff      	cmp	r3, #255	; 0xff
    48e8:	d0ec      	beq.n	48c4 <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    48ea:	7c82      	ldrb	r2, [r0, #18]
    48ec:	230f      	movs	r3, #15
    48ee:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    48f0:	2201      	movs	r2, #1
    48f2:	409a      	lsls	r2, r3
    48f4:	422a      	tst	r2, r5
    48f6:	d0e5      	beq.n	48c4 <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    48f8:	001a      	movs	r2, r3
    48fa:	3208      	adds	r2, #8
    48fc:	0152      	lsls	r2, r2, #5
    48fe:	4918      	ldr	r1, [pc, #96]	; (4960 <_usb_d_dev_handler+0x228>)
    4900:	468c      	mov	ip, r1
    4902:	4462      	add	r2, ip
    4904:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4906:	015b      	lsls	r3, r3, #5
    4908:	491f      	ldr	r1, [pc, #124]	; (4988 <_usb_d_dev_handler+0x250>)
    490a:	468c      	mov	ip, r1
    490c:	4463      	add	r3, ip
    490e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    4910:	4013      	ands	r3, r2
	if (flags) {
    4912:	d0d7      	beq.n	48c4 <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4914:	7cc2      	ldrb	r2, [r0, #19]
    4916:	2147      	movs	r1, #71	; 0x47
    4918:	4011      	ands	r1, r2
    491a:	2901      	cmp	r1, #1
    491c:	d09c      	beq.n	4858 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    491e:	b252      	sxtb	r2, r2
    4920:	2a00      	cmp	r2, #0
    4922:	dbaa      	blt.n	487a <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4924:	069a      	lsls	r2, r3, #26
    4926:	d4ca      	bmi.n	48be <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4928:	075a      	lsls	r2, r3, #29
    492a:	d40d      	bmi.n	4948 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    492c:	07da      	lsls	r2, r3, #31
    492e:	d40f      	bmi.n	4950 <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4930:	7cc1      	ldrb	r1, [r0, #19]
    4932:	2207      	movs	r2, #7
    4934:	400a      	ands	r2, r1
    4936:	2a01      	cmp	r2, #1
    4938:	d1c4      	bne.n	48c4 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    493a:	071a      	lsls	r2, r3, #28
    493c:	d40c      	bmi.n	4958 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    493e:	06db      	lsls	r3, r3, #27
    4940:	d5c0      	bpl.n	48c4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    4942:	4b0e      	ldr	r3, [pc, #56]	; (497c <_usb_d_dev_handler+0x244>)
    4944:	4798      	blx	r3
    4946:	e7bd      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    4948:	2100      	movs	r1, #0
    494a:	4b0d      	ldr	r3, [pc, #52]	; (4980 <_usb_d_dev_handler+0x248>)
    494c:	4798      	blx	r3
    494e:	e7b9      	b.n	48c4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    4950:	2101      	movs	r1, #1
    4952:	4b0e      	ldr	r3, [pc, #56]	; (498c <_usb_d_dev_handler+0x254>)
    4954:	4798      	blx	r3
    4956:	e7b5      	b.n	48c4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    4958:	2101      	movs	r1, #1
    495a:	4b09      	ldr	r3, [pc, #36]	; (4980 <_usb_d_dev_handler+0x248>)
    495c:	4798      	blx	r3
    495e:	e7b1      	b.n	48c4 <_usb_d_dev_handler+0x18c>
    4960:	41005000 	.word	0x41005000
    4964:	20000fbc 	.word	0x20000fbc
    4968:	00000201 	.word	0x00000201
    496c:	20000f3c 	.word	0x20000f3c
    4970:	40000800 	.word	0x40000800
    4974:	0000434d 	.word	0x0000434d
    4978:	00004169 	.word	0x00004169
    497c:	000040d9 	.word	0x000040d9
    4980:	0000423d 	.word	0x0000423d
    4984:	000043a5 	.word	0x000043a5
    4988:	41005109 	.word	0x41005109
    498c:	00004535 	.word	0x00004535

00004990 <_usb_d_dev_init>:
{
    4990:	b500      	push	{lr}
    4992:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    4994:	2200      	movs	r2, #0
    4996:	ab01      	add	r3, sp, #4
    4998:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    499a:	4b21      	ldr	r3, [pc, #132]	; (4a20 <_usb_d_dev_init+0x90>)
    499c:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    499e:	07db      	lsls	r3, r3, #31
    49a0:	d41b      	bmi.n	49da <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    49a2:	4b1f      	ldr	r3, [pc, #124]	; (4a20 <_usb_d_dev_init+0x90>)
    49a4:	789b      	ldrb	r3, [r3, #2]
    49a6:	079b      	lsls	r3, r3, #30
    49a8:	d1fb      	bne.n	49a2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    49aa:	4b1d      	ldr	r3, [pc, #116]	; (4a20 <_usb_d_dev_init+0x90>)
    49ac:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    49ae:	079b      	lsls	r3, r3, #30
    49b0:	d50c      	bpl.n	49cc <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    49b2:	4a1b      	ldr	r2, [pc, #108]	; (4a20 <_usb_d_dev_init+0x90>)
    49b4:	7813      	ldrb	r3, [r2, #0]
    49b6:	2102      	movs	r1, #2
    49b8:	438b      	bics	r3, r1
    49ba:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    49bc:	4b18      	ldr	r3, [pc, #96]	; (4a20 <_usb_d_dev_init+0x90>)
    49be:	789b      	ldrb	r3, [r3, #2]
    49c0:	079b      	lsls	r3, r3, #30
    49c2:	d1fb      	bne.n	49bc <_usb_d_dev_init+0x2c>
    49c4:	4b16      	ldr	r3, [pc, #88]	; (4a20 <_usb_d_dev_init+0x90>)
    49c6:	789b      	ldrb	r3, [r3, #2]
    49c8:	079b      	lsls	r3, r3, #30
    49ca:	d4fb      	bmi.n	49c4 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    49cc:	2201      	movs	r2, #1
    49ce:	4b14      	ldr	r3, [pc, #80]	; (4a20 <_usb_d_dev_init+0x90>)
    49d0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    49d2:	4b13      	ldr	r3, [pc, #76]	; (4a20 <_usb_d_dev_init+0x90>)
    49d4:	789b      	ldrb	r3, [r3, #2]
    49d6:	079b      	lsls	r3, r3, #30
    49d8:	d1fb      	bne.n	49d2 <_usb_d_dev_init+0x42>
    49da:	4b11      	ldr	r3, [pc, #68]	; (4a20 <_usb_d_dev_init+0x90>)
    49dc:	789b      	ldrb	r3, [r3, #2]
    49de:	07db      	lsls	r3, r3, #31
    49e0:	d4fb      	bmi.n	49da <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    49e2:	4b10      	ldr	r3, [pc, #64]	; (4a24 <_usb_d_dev_init+0x94>)
    49e4:	4a10      	ldr	r2, [pc, #64]	; (4a28 <_usb_d_dev_init+0x98>)
    49e6:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    49e8:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    49ea:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    49ec:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    49ee:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    49f0:	4b0e      	ldr	r3, [pc, #56]	; (4a2c <_usb_d_dev_init+0x9c>)
    49f2:	4798      	blx	r3
	_usb_load_calib();
    49f4:	4b0e      	ldr	r3, [pc, #56]	; (4a30 <_usb_d_dev_init+0xa0>)
    49f6:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    49f8:	2204      	movs	r2, #4
    49fa:	4b09      	ldr	r3, [pc, #36]	; (4a20 <_usb_d_dev_init+0x90>)
    49fc:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    49fe:	4b08      	ldr	r3, [pc, #32]	; (4a20 <_usb_d_dev_init+0x90>)
    4a00:	789b      	ldrb	r3, [r3, #2]
    4a02:	079b      	lsls	r3, r3, #30
    4a04:	d1fb      	bne.n	49fe <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4a06:	4a06      	ldr	r2, [pc, #24]	; (4a20 <_usb_d_dev_init+0x90>)
    4a08:	4b0a      	ldr	r3, [pc, #40]	; (4a34 <_usb_d_dev_init+0xa4>)
    4a0a:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    4a0c:	ab01      	add	r3, sp, #4
    4a0e:	785b      	ldrb	r3, [r3, #1]
    4a10:	2101      	movs	r1, #1
    4a12:	430b      	orrs	r3, r1
    4a14:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4a16:	8113      	strh	r3, [r2, #8]
}
    4a18:	2000      	movs	r0, #0
    4a1a:	b003      	add	sp, #12
    4a1c:	bd00      	pop	{pc}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	41005000 	.word	0x41005000
    4a24:	20000fbc 	.word	0x20000fbc
    4a28:	00004081 	.word	0x00004081
    4a2c:	0000434d 	.word	0x0000434d
    4a30:	00004085 	.word	0x00004085
    4a34:	20000f3c 	.word	0x20000f3c

00004a38 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4a38:	4b10      	ldr	r3, [pc, #64]	; (4a7c <_usb_d_dev_enable+0x44>)
    4a3a:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4a3c:	079b      	lsls	r3, r3, #30
    4a3e:	d119      	bne.n	4a74 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4a40:	4b0e      	ldr	r3, [pc, #56]	; (4a7c <_usb_d_dev_enable+0x44>)
    4a42:	789b      	ldrb	r3, [r3, #2]
    4a44:	079b      	lsls	r3, r3, #30
    4a46:	d1fb      	bne.n	4a40 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4a48:	4b0c      	ldr	r3, [pc, #48]	; (4a7c <_usb_d_dev_enable+0x44>)
    4a4a:	781b      	ldrb	r3, [r3, #0]
    4a4c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4a4e:	079a      	lsls	r2, r3, #30
    4a50:	d408      	bmi.n	4a64 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4a52:	2202      	movs	r2, #2
    4a54:	4313      	orrs	r3, r2
    4a56:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4a58:	4a08      	ldr	r2, [pc, #32]	; (4a7c <_usb_d_dev_enable+0x44>)
    4a5a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4a5c:	4b07      	ldr	r3, [pc, #28]	; (4a7c <_usb_d_dev_enable+0x44>)
    4a5e:	789b      	ldrb	r3, [r3, #2]
    4a60:	079b      	lsls	r3, r3, #30
    4a62:	d1fb      	bne.n	4a5c <_usb_d_dev_enable+0x24>
    4a64:	2280      	movs	r2, #128	; 0x80
    4a66:	4b06      	ldr	r3, [pc, #24]	; (4a80 <_usb_d_dev_enable+0x48>)
    4a68:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4a6a:	4a06      	ldr	r2, [pc, #24]	; (4a84 <_usb_d_dev_enable+0x4c>)
    4a6c:	4b03      	ldr	r3, [pc, #12]	; (4a7c <_usb_d_dev_enable+0x44>)
    4a6e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4a70:	2000      	movs	r0, #0
}
    4a72:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4a74:	2011      	movs	r0, #17
    4a76:	4240      	negs	r0, r0
    4a78:	e7fb      	b.n	4a72 <_usb_d_dev_enable+0x3a>
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	41005000 	.word	0x41005000
    4a80:	e000e100 	.word	0xe000e100
    4a84:	0000028d 	.word	0x0000028d

00004a88 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4a88:	4a02      	ldr	r2, [pc, #8]	; (4a94 <_usb_d_dev_attach+0xc>)
    4a8a:	8913      	ldrh	r3, [r2, #8]
    4a8c:	2101      	movs	r1, #1
    4a8e:	438b      	bics	r3, r1
    4a90:	8113      	strh	r3, [r2, #8]
}
    4a92:	4770      	bx	lr
    4a94:	41005000 	.word	0x41005000

00004a98 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4a98:	2380      	movs	r3, #128	; 0x80
    4a9a:	425b      	negs	r3, r3
    4a9c:	4318      	orrs	r0, r3
    4a9e:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4aa0:	4b01      	ldr	r3, [pc, #4]	; (4aa8 <_usb_d_dev_set_address+0x10>)
    4aa2:	7298      	strb	r0, [r3, #10]
}
    4aa4:	4770      	bx	lr
    4aa6:	46c0      	nop			; (mov r8, r8)
    4aa8:	41005000 	.word	0x41005000

00004aac <_usb_d_dev_ep_init>:
{
    4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aae:	46c6      	mov	lr, r8
    4ab0:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    4ab2:	230f      	movs	r3, #15
    4ab4:	4003      	ands	r3, r0
    4ab6:	b244      	sxtb	r4, r0
    4ab8:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4aba:	2b00      	cmp	r3, #0
    4abc:	d005      	beq.n	4aca <_usb_d_dev_ep_init+0x1e>
    4abe:	2c00      	cmp	r4, #0
    4ac0:	db01      	blt.n	4ac6 <_usb_d_dev_ep_init+0x1a>
    4ac2:	001c      	movs	r4, r3
    4ac4:	e002      	b.n	4acc <_usb_d_dev_ep_init+0x20>
    4ac6:	1d1c      	adds	r4, r3, #4
    4ac8:	e000      	b.n	4acc <_usb_d_dev_ep_init+0x20>
    4aca:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    4acc:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4ace:	2503      	movs	r5, #3
    4ad0:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4ad2:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    4ad4:	2b04      	cmp	r3, #4
    4ad6:	d900      	bls.n	4ada <_usb_d_dev_ep_init+0x2e>
    4ad8:	e07a      	b.n	4bd0 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    4ada:	00a5      	lsls	r5, r4, #2
    4adc:	192d      	adds	r5, r5, r4
    4ade:	00ac      	lsls	r4, r5, #2
    4ae0:	46a0      	mov	r8, r4
    4ae2:	4c43      	ldr	r4, [pc, #268]	; (4bf0 <_usb_d_dev_ep_init+0x144>)
    4ae4:	3420      	adds	r4, #32
    4ae6:	4444      	add	r4, r8
    4ae8:	3426      	adds	r4, #38	; 0x26
    4aea:	7824      	ldrb	r4, [r4, #0]
    4aec:	2cff      	cmp	r4, #255	; 0xff
    4aee:	d000      	beq.n	4af2 <_usb_d_dev_ep_init+0x46>
    4af0:	e071      	b.n	4bd6 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4af2:	2900      	cmp	r1, #0
    4af4:	d118      	bne.n	4b28 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4af6:	2b00      	cmp	r3, #0
    4af8:	d004      	beq.n	4b04 <_usb_d_dev_ep_init+0x58>
    4afa:	4664      	mov	r4, ip
    4afc:	2c00      	cmp	r4, #0
    4afe:	db01      	blt.n	4b04 <_usb_d_dev_ep_init+0x58>
    4b00:	3304      	adds	r3, #4
    4b02:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    4b04:	009c      	lsls	r4, r3, #2
    4b06:	18e3      	adds	r3, r4, r3
    4b08:	009d      	lsls	r5, r3, #2
    4b0a:	4b39      	ldr	r3, [pc, #228]	; (4bf0 <_usb_d_dev_ep_init+0x144>)
    4b0c:	3320      	adds	r3, #32
    4b0e:	195b      	adds	r3, r3, r5
    4b10:	3326      	adds	r3, #38	; 0x26
    4b12:	781b      	ldrb	r3, [r3, #0]
    4b14:	2bff      	cmp	r3, #255	; 0xff
    4b16:	d161      	bne.n	4bdc <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    4b18:	007b      	lsls	r3, r7, #1
    4b1a:	19db      	adds	r3, r3, r7
    4b1c:	009c      	lsls	r4, r3, #2
    4b1e:	4b35      	ldr	r3, [pc, #212]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4b20:	191b      	adds	r3, r3, r4
    4b22:	689b      	ldr	r3, [r3, #8]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d05c      	beq.n	4be2 <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4b28:	4663      	mov	r3, ip
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	db37      	blt.n	4b9e <_usb_d_dev_ep_init+0xf2>
    4b2e:	007b      	lsls	r3, r7, #1
    4b30:	19db      	adds	r3, r3, r7
    4b32:	009c      	lsls	r4, r3, #2
    4b34:	4b2f      	ldr	r3, [pc, #188]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4b36:	191b      	adds	r3, r3, r4
    4b38:	689b      	ldr	r3, [r3, #8]
    4b3a:	1e5c      	subs	r4, r3, #1
    4b3c:	41a3      	sbcs	r3, r4
    4b3e:	b2db      	uxtb	r3, r3
    4b40:	2b00      	cmp	r3, #0
    4b42:	d00a      	beq.n	4b5a <_usb_d_dev_ep_init+0xae>
    4b44:	4663      	mov	r3, ip
    4b46:	2b00      	cmp	r3, #0
    4b48:	db33      	blt.n	4bb2 <_usb_d_dev_ep_init+0x106>
    4b4a:	007b      	lsls	r3, r7, #1
    4b4c:	19db      	adds	r3, r3, r7
    4b4e:	009c      	lsls	r4, r3, #2
    4b50:	4b28      	ldr	r3, [pc, #160]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4b52:	191b      	adds	r3, r3, r4
    4b54:	8a1b      	ldrh	r3, [r3, #16]
    4b56:	4293      	cmp	r3, r2
    4b58:	db46      	blt.n	4be8 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4b5a:	4663      	mov	r3, ip
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	db2f      	blt.n	4bc0 <_usb_d_dev_ep_init+0x114>
    4b60:	007b      	lsls	r3, r7, #1
    4b62:	19df      	adds	r7, r3, r7
    4b64:	00bc      	lsls	r4, r7, #2
    4b66:	4b23      	ldr	r3, [pc, #140]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4b68:	191b      	adds	r3, r3, r4
    4b6a:	689b      	ldr	r3, [r3, #8]
    4b6c:	469c      	mov	ip, r3
    4b6e:	4b20      	ldr	r3, [pc, #128]	; (4bf0 <_usb_d_dev_ep_init+0x144>)
    4b70:	00b5      	lsls	r5, r6, #2
    4b72:	19af      	adds	r7, r5, r6
    4b74:	00bc      	lsls	r4, r7, #2
    4b76:	191c      	adds	r4, r3, r4
    4b78:	4667      	mov	r7, ip
    4b7a:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    4b7c:	3444      	adds	r4, #68	; 0x44
    4b7e:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    4b80:	3101      	adds	r1, #1
    4b82:	3320      	adds	r3, #32
    4b84:	19ac      	adds	r4, r5, r6
    4b86:	00a2      	lsls	r2, r4, #2
    4b88:	0014      	movs	r4, r2
    4b8a:	189a      	adds	r2, r3, r2
    4b8c:	3227      	adds	r2, #39	; 0x27
    4b8e:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    4b90:	191b      	adds	r3, r3, r4
    4b92:	3326      	adds	r3, #38	; 0x26
    4b94:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    4b96:	2000      	movs	r0, #0
}
    4b98:	bc04      	pop	{r2}
    4b9a:	4690      	mov	r8, r2
    4b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4b9e:	007b      	lsls	r3, r7, #1
    4ba0:	19db      	adds	r3, r3, r7
    4ba2:	009c      	lsls	r4, r3, #2
    4ba4:	4b13      	ldr	r3, [pc, #76]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4ba6:	191b      	adds	r3, r3, r4
    4ba8:	68db      	ldr	r3, [r3, #12]
    4baa:	1e5c      	subs	r4, r3, #1
    4bac:	41a3      	sbcs	r3, r4
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	e7c6      	b.n	4b40 <_usb_d_dev_ep_init+0x94>
    4bb2:	007b      	lsls	r3, r7, #1
    4bb4:	19db      	adds	r3, r3, r7
    4bb6:	009c      	lsls	r4, r3, #2
    4bb8:	4b0e      	ldr	r3, [pc, #56]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4bba:	191b      	adds	r3, r3, r4
    4bbc:	8a5b      	ldrh	r3, [r3, #18]
    4bbe:	e7ca      	b.n	4b56 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4bc0:	007b      	lsls	r3, r7, #1
    4bc2:	19df      	adds	r7, r3, r7
    4bc4:	00bc      	lsls	r4, r7, #2
    4bc6:	4b0b      	ldr	r3, [pc, #44]	; (4bf4 <_usb_d_dev_ep_init+0x148>)
    4bc8:	191b      	adds	r3, r3, r4
    4bca:	68db      	ldr	r3, [r3, #12]
    4bcc:	469c      	mov	ip, r3
    4bce:	e7ce      	b.n	4b6e <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    4bd0:	2012      	movs	r0, #18
    4bd2:	4240      	negs	r0, r0
    4bd4:	e7e0      	b.n	4b98 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    4bd6:	2014      	movs	r0, #20
    4bd8:	4240      	negs	r0, r0
    4bda:	e7dd      	b.n	4b98 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    4bdc:	2014      	movs	r0, #20
    4bde:	4240      	negs	r0, r0
    4be0:	e7da      	b.n	4b98 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    4be2:	2013      	movs	r0, #19
    4be4:	4240      	negs	r0, r0
    4be6:	e7d7      	b.n	4b98 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    4be8:	2013      	movs	r0, #19
    4bea:	4240      	negs	r0, r0
    4bec:	e7d4      	b.n	4b98 <_usb_d_dev_ep_init+0xec>
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	20000fbc 	.word	0x20000fbc
    4bf4:	00011058 	.word	0x00011058

00004bf8 <_usb_d_dev_ep_deinit>:
{
    4bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bfa:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    4bfc:	250f      	movs	r5, #15
    4bfe:	4005      	ands	r5, r0
    4c00:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4c02:	0ffb      	lsrs	r3, r7, #31
    4c04:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4c06:	2d00      	cmp	r5, #0
    4c08:	d005      	beq.n	4c16 <_usb_d_dev_ep_deinit+0x1e>
    4c0a:	2f00      	cmp	r7, #0
    4c0c:	db01      	blt.n	4c12 <_usb_d_dev_ep_deinit+0x1a>
    4c0e:	002a      	movs	r2, r5
    4c10:	e002      	b.n	4c18 <_usb_d_dev_ep_deinit+0x20>
    4c12:	1d2a      	adds	r2, r5, #4
    4c14:	e000      	b.n	4c18 <_usb_d_dev_ep_deinit+0x20>
    4c16:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    4c18:	0016      	movs	r6, r2
    4c1a:	0093      	lsls	r3, r2, #2
    4c1c:	189b      	adds	r3, r3, r2
    4c1e:	0099      	lsls	r1, r3, #2
    4c20:	3110      	adds	r1, #16
    4c22:	4823      	ldr	r0, [pc, #140]	; (4cb0 <_usb_d_dev_ep_deinit+0xb8>)
    4c24:	3020      	adds	r0, #32
    4c26:	1840      	adds	r0, r0, r1
    4c28:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4c2a:	2d04      	cmp	r5, #4
    4c2c:	d830      	bhi.n	4c90 <_usb_d_dev_ep_deinit+0x98>
    4c2e:	0093      	lsls	r3, r2, #2
    4c30:	189a      	adds	r2, r3, r2
    4c32:	0091      	lsls	r1, r2, #2
    4c34:	4b1e      	ldr	r3, [pc, #120]	; (4cb0 <_usb_d_dev_ep_deinit+0xb8>)
    4c36:	3320      	adds	r3, #32
    4c38:	185b      	adds	r3, r3, r1
    4c3a:	3326      	adds	r3, #38	; 0x26
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	2bff      	cmp	r3, #255	; 0xff
    4c40:	d026      	beq.n	4c90 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    4c42:	2203      	movs	r2, #3
    4c44:	4661      	mov	r1, ip
    4c46:	4b1b      	ldr	r3, [pc, #108]	; (4cb4 <_usb_d_dev_ep_deinit+0xbc>)
    4c48:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4c4a:	00b2      	lsls	r2, r6, #2
    4c4c:	1992      	adds	r2, r2, r6
    4c4e:	0091      	lsls	r1, r2, #2
    4c50:	4b17      	ldr	r3, [pc, #92]	; (4cb0 <_usb_d_dev_ep_deinit+0xb8>)
    4c52:	185b      	adds	r3, r3, r1
    4c54:	3340      	adds	r3, #64	; 0x40
    4c56:	79da      	ldrb	r2, [r3, #7]
    4c58:	2307      	movs	r3, #7
    4c5a:	4013      	ands	r3, r2
    4c5c:	2b01      	cmp	r3, #1
    4c5e:	d018      	beq.n	4c92 <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    4c60:	2f00      	cmp	r7, #0
    4c62:	db1c      	blt.n	4c9e <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4c64:	4a14      	ldr	r2, [pc, #80]	; (4cb8 <_usb_d_dev_ep_deinit+0xc0>)
    4c66:	3408      	adds	r4, #8
    4c68:	0164      	lsls	r4, r4, #5
    4c6a:	5ca3      	ldrb	r3, [r4, r2]
    4c6c:	2107      	movs	r1, #7
    4c6e:	438b      	bics	r3, r1
    4c70:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    4c72:	4b0f      	ldr	r3, [pc, #60]	; (4cb0 <_usb_d_dev_ep_deinit+0xb8>)
    4c74:	3320      	adds	r3, #32
    4c76:	00b1      	lsls	r1, r6, #2
    4c78:	1988      	adds	r0, r1, r6
    4c7a:	0082      	lsls	r2, r0, #2
    4c7c:	189a      	adds	r2, r3, r2
    4c7e:	3227      	adds	r2, #39	; 0x27
    4c80:	2000      	movs	r0, #0
    4c82:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    4c84:	198e      	adds	r6, r1, r6
    4c86:	00b2      	lsls	r2, r6, #2
    4c88:	189b      	adds	r3, r3, r2
    4c8a:	3326      	adds	r3, #38	; 0x26
    4c8c:	22ff      	movs	r2, #255	; 0xff
    4c8e:	701a      	strb	r2, [r3, #0]
}
    4c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    4c92:	3408      	adds	r4, #8
    4c94:	0164      	lsls	r4, r4, #5
    4c96:	2200      	movs	r2, #0
    4c98:	4b07      	ldr	r3, [pc, #28]	; (4cb8 <_usb_d_dev_ep_deinit+0xc0>)
    4c9a:	54e2      	strb	r2, [r4, r3]
    4c9c:	e7e9      	b.n	4c72 <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4c9e:	4a06      	ldr	r2, [pc, #24]	; (4cb8 <_usb_d_dev_ep_deinit+0xc0>)
    4ca0:	3508      	adds	r5, #8
    4ca2:	016d      	lsls	r5, r5, #5
    4ca4:	5cab      	ldrb	r3, [r5, r2]
    4ca6:	2170      	movs	r1, #112	; 0x70
    4ca8:	438b      	bics	r3, r1
    4caa:	54ab      	strb	r3, [r5, r2]
    4cac:	e7e1      	b.n	4c72 <_usb_d_dev_ep_deinit+0x7a>
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	20000fbc 	.word	0x20000fbc
    4cb4:	000041c1 	.word	0x000041c1
    4cb8:	41005000 	.word	0x41005000

00004cbc <_usb_d_dev_ep_enable>:
{
    4cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    4cbe:	230f      	movs	r3, #15
    4cc0:	4003      	ands	r3, r0
    4cc2:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d005      	beq.n	4cd4 <_usb_d_dev_ep_enable+0x18>
    4cc8:	2800      	cmp	r0, #0
    4cca:	db01      	blt.n	4cd0 <_usb_d_dev_ep_enable+0x14>
    4ccc:	001e      	movs	r6, r3
    4cce:	e002      	b.n	4cd6 <_usb_d_dev_ep_enable+0x1a>
    4cd0:	1d1e      	adds	r6, r3, #4
    4cd2:	e000      	b.n	4cd6 <_usb_d_dev_ep_enable+0x1a>
    4cd4:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    4cd6:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4cd8:	001a      	movs	r2, r3
    4cda:	3208      	adds	r2, #8
    4cdc:	0152      	lsls	r2, r2, #5
    4cde:	49b3      	ldr	r1, [pc, #716]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4ce0:	5c55      	ldrb	r5, [r2, r1]
    4ce2:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4ce4:	2b04      	cmp	r3, #4
    4ce6:	d900      	bls.n	4cea <_usb_d_dev_ep_enable+0x2e>
    4ce8:	e151      	b.n	4f8e <_usb_d_dev_ep_enable+0x2d2>
    4cea:	00b1      	lsls	r1, r6, #2
    4cec:	1989      	adds	r1, r1, r6
    4cee:	008e      	lsls	r6, r1, #2
    4cf0:	4aaf      	ldr	r2, [pc, #700]	; (4fb0 <_usb_d_dev_ep_enable+0x2f4>)
    4cf2:	3220      	adds	r2, #32
    4cf4:	1992      	adds	r2, r2, r6
    4cf6:	3226      	adds	r2, #38	; 0x26
    4cf8:	7812      	ldrb	r2, [r2, #0]
    4cfa:	2aff      	cmp	r2, #255	; 0xff
    4cfc:	d100      	bne.n	4d00 <_usb_d_dev_ep_enable+0x44>
    4cfe:	e149      	b.n	4f94 <_usb_d_dev_ep_enable+0x2d8>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    4d00:	015a      	lsls	r2, r3, #5
    4d02:	4eac      	ldr	r6, [pc, #688]	; (4fb4 <_usb_d_dev_ep_enable+0x2f8>)
    4d04:	18b6      	adds	r6, r6, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    4d06:	00a1      	lsls	r1, r4, #2
    4d08:	1909      	adds	r1, r1, r4
    4d0a:	008f      	lsls	r7, r1, #2
    4d0c:	4aa8      	ldr	r2, [pc, #672]	; (4fb0 <_usb_d_dev_ep_enable+0x2f4>)
    4d0e:	19d2      	adds	r2, r2, r7
    4d10:	3240      	adds	r2, #64	; 0x40
    4d12:	79d1      	ldrb	r1, [r2, #7]
    4d14:	2207      	movs	r2, #7
    4d16:	400a      	ands	r2, r1
    4d18:	2a01      	cmp	r2, #1
    4d1a:	d037      	beq.n	4d8c <_usb_d_dev_ep_enable+0xd0>
	} else if (dir) {
    4d1c:	2800      	cmp	r0, #0
    4d1e:	da00      	bge.n	4d22 <_usb_d_dev_ep_enable+0x66>
    4d20:	e0cc      	b.n	4ebc <_usb_d_dev_ep_enable+0x200>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    4d22:	076a      	lsls	r2, r5, #29
    4d24:	d000      	beq.n	4d28 <_usb_d_dev_ep_enable+0x6c>
    4d26:	e13e      	b.n	4fa6 <_usb_d_dev_ep_enable+0x2ea>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    4d28:	4aa1      	ldr	r2, [pc, #644]	; (4fb0 <_usb_d_dev_ep_enable+0x2f4>)
    4d2a:	00a0      	lsls	r0, r4, #2
    4d2c:	1907      	adds	r7, r0, r4
    4d2e:	00b9      	lsls	r1, r7, #2
    4d30:	1851      	adds	r1, r2, r1
    4d32:	3140      	adds	r1, #64	; 0x40
    4d34:	79c9      	ldrb	r1, [r1, #7]
    4d36:	0749      	lsls	r1, r1, #29
    4d38:	0f49      	lsrs	r1, r1, #29
    4d3a:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4d3c:	0019      	movs	r1, r3
    4d3e:	3108      	adds	r1, #8
    4d40:	0149      	lsls	r1, r1, #5
    4d42:	4f9a      	ldr	r7, [pc, #616]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4d44:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4d46:	1904      	adds	r4, r0, r4
    4d48:	00a1      	lsls	r1, r4, #2
    4d4a:	1852      	adds	r2, r2, r1
    4d4c:	3244      	adds	r2, #68	; 0x44
    4d4e:	8810      	ldrh	r0, [r2, #0]
    4d50:	0382      	lsls	r2, r0, #14
    4d52:	4999      	ldr	r1, [pc, #612]	; (4fb8 <_usb_d_dev_ep_enable+0x2fc>)
    4d54:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4d56:	2180      	movs	r1, #128	; 0x80
    4d58:	0089      	lsls	r1, r1, #2
    4d5a:	4288      	cmp	r0, r1
    4d5c:	d900      	bls.n	4d60 <_usb_d_dev_ep_enable+0xa4>
    4d5e:	e0f9      	b.n	4f54 <_usb_d_dev_ep_enable+0x298>
    4d60:	3901      	subs	r1, #1
    4d62:	39ff      	subs	r1, #255	; 0xff
    4d64:	4288      	cmp	r0, r1
    4d66:	d900      	bls.n	4d6a <_usb_d_dev_ep_enable+0xae>
    4d68:	e107      	b.n	4f7a <_usb_d_dev_ep_enable+0x2be>
    4d6a:	2880      	cmp	r0, #128	; 0x80
    4d6c:	d900      	bls.n	4d70 <_usb_d_dev_ep_enable+0xb4>
    4d6e:	e106      	b.n	4f7e <_usb_d_dev_ep_enable+0x2c2>
    4d70:	2840      	cmp	r0, #64	; 0x40
    4d72:	d900      	bls.n	4d76 <_usb_d_dev_ep_enable+0xba>
    4d74:	e105      	b.n	4f82 <_usb_d_dev_ep_enable+0x2c6>
    4d76:	2820      	cmp	r0, #32
    4d78:	d900      	bls.n	4d7c <_usb_d_dev_ep_enable+0xc0>
    4d7a:	e104      	b.n	4f86 <_usb_d_dev_ep_enable+0x2ca>
    4d7c:	2810      	cmp	r0, #16
    4d7e:	d900      	bls.n	4d82 <_usb_d_dev_ep_enable+0xc6>
    4d80:	e103      	b.n	4f8a <_usb_d_dev_ep_enable+0x2ce>
    4d82:	39f8      	subs	r1, #248	; 0xf8
    4d84:	4281      	cmp	r1, r0
    4d86:	4189      	sbcs	r1, r1
    4d88:	4249      	negs	r1, r1
    4d8a:	e0e4      	b.n	4f56 <_usb_d_dev_ep_enable+0x29a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    4d8c:	3276      	adds	r2, #118	; 0x76
    4d8e:	422a      	tst	r2, r5
    4d90:	d000      	beq.n	4d94 <_usb_d_dev_ep_enable+0xd8>
    4d92:	e102      	b.n	4f9a <_usb_d_dev_ep_enable+0x2de>
    4d94:	001a      	movs	r2, r3
    4d96:	3208      	adds	r2, #8
    4d98:	0152      	lsls	r2, r2, #5
    4d9a:	2011      	movs	r0, #17
    4d9c:	4983      	ldr	r1, [pc, #524]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4d9e:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4da0:	4a83      	ldr	r2, [pc, #524]	; (4fb0 <_usb_d_dev_ep_enable+0x2f4>)
    4da2:	19d2      	adds	r2, r2, r7
    4da4:	3244      	adds	r2, #68	; 0x44
    4da6:	8812      	ldrh	r2, [r2, #0]
    4da8:	0391      	lsls	r1, r2, #14
    4daa:	4883      	ldr	r0, [pc, #524]	; (4fb8 <_usb_d_dev_ep_enable+0x2fc>)
    4dac:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4dae:	2080      	movs	r0, #128	; 0x80
    4db0:	0080      	lsls	r0, r0, #2
    4db2:	4282      	cmp	r2, r0
    4db4:	d810      	bhi.n	4dd8 <_usb_d_dev_ep_enable+0x11c>
    4db6:	3801      	subs	r0, #1
    4db8:	38ff      	subs	r0, #255	; 0xff
    4dba:	4282      	cmp	r2, r0
    4dbc:	d827      	bhi.n	4e0e <_usb_d_dev_ep_enable+0x152>
    4dbe:	2a80      	cmp	r2, #128	; 0x80
    4dc0:	d827      	bhi.n	4e12 <_usb_d_dev_ep_enable+0x156>
    4dc2:	2a40      	cmp	r2, #64	; 0x40
    4dc4:	d827      	bhi.n	4e16 <_usb_d_dev_ep_enable+0x15a>
    4dc6:	2a20      	cmp	r2, #32
    4dc8:	d827      	bhi.n	4e1a <_usb_d_dev_ep_enable+0x15e>
    4dca:	2a10      	cmp	r2, #16
    4dcc:	d827      	bhi.n	4e1e <_usb_d_dev_ep_enable+0x162>
    4dce:	38f8      	subs	r0, #248	; 0xf8
    4dd0:	4290      	cmp	r0, r2
    4dd2:	4180      	sbcs	r0, r0
    4dd4:	4240      	negs	r0, r0
    4dd6:	e000      	b.n	4dda <_usb_d_dev_ep_enable+0x11e>
    4dd8:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4dda:	0700      	lsls	r0, r0, #28
    4ddc:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4dde:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4de0:	0491      	lsls	r1, r2, #18
    4de2:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4de4:	2080      	movs	r0, #128	; 0x80
    4de6:	0080      	lsls	r0, r0, #2
    4de8:	4282      	cmp	r2, r0
    4dea:	d81a      	bhi.n	4e22 <_usb_d_dev_ep_enable+0x166>
    4dec:	3801      	subs	r0, #1
    4dee:	38ff      	subs	r0, #255	; 0xff
    4df0:	4282      	cmp	r2, r0
    4df2:	d859      	bhi.n	4ea8 <_usb_d_dev_ep_enable+0x1ec>
    4df4:	2a80      	cmp	r2, #128	; 0x80
    4df6:	d859      	bhi.n	4eac <_usb_d_dev_ep_enable+0x1f0>
    4df8:	2a40      	cmp	r2, #64	; 0x40
    4dfa:	d859      	bhi.n	4eb0 <_usb_d_dev_ep_enable+0x1f4>
    4dfc:	2a20      	cmp	r2, #32
    4dfe:	d859      	bhi.n	4eb4 <_usb_d_dev_ep_enable+0x1f8>
    4e00:	2a10      	cmp	r2, #16
    4e02:	d859      	bhi.n	4eb8 <_usb_d_dev_ep_enable+0x1fc>
    4e04:	38f8      	subs	r0, #248	; 0xf8
    4e06:	4290      	cmp	r0, r2
    4e08:	4192      	sbcs	r2, r2
    4e0a:	4252      	negs	r2, r2
    4e0c:	e00a      	b.n	4e24 <_usb_d_dev_ep_enable+0x168>
    4e0e:	2006      	movs	r0, #6
    4e10:	e7e3      	b.n	4dda <_usb_d_dev_ep_enable+0x11e>
    4e12:	2005      	movs	r0, #5
    4e14:	e7e1      	b.n	4dda <_usb_d_dev_ep_enable+0x11e>
    4e16:	2004      	movs	r0, #4
    4e18:	e7df      	b.n	4dda <_usb_d_dev_ep_enable+0x11e>
    4e1a:	2003      	movs	r0, #3
    4e1c:	e7dd      	b.n	4dda <_usb_d_dev_ep_enable+0x11e>
    4e1e:	2002      	movs	r0, #2
    4e20:	e7db      	b.n	4dda <_usb_d_dev_ep_enable+0x11e>
    4e22:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4e24:	0712      	lsls	r2, r2, #28
    4e26:	430a      	orrs	r2, r1
    4e28:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4e2a:	001a      	movs	r2, r3
    4e2c:	3208      	adds	r2, #8
    4e2e:	0152      	lsls	r2, r2, #5
    4e30:	495e      	ldr	r1, [pc, #376]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4e32:	468c      	mov	ip, r1
    4e34:	4462      	add	r2, ip
    4e36:	2040      	movs	r0, #64	; 0x40
    4e38:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4e3a:	2180      	movs	r1, #128	; 0x80
    4e3c:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    4e3e:	4a5d      	ldr	r2, [pc, #372]	; (4fb4 <_usb_d_dev_ep_enable+0x2f8>)
    4e40:	015b      	lsls	r3, r3, #5
    4e42:	18d3      	adds	r3, r2, r3
    4e44:	2100      	movs	r1, #0
    4e46:	7299      	strb	r1, [r3, #10]
    4e48:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4e4a:	4959      	ldr	r1, [pc, #356]	; (4fb0 <_usb_d_dev_ep_enable+0x2f4>)
    4e4c:	000b      	movs	r3, r1
    4e4e:	3320      	adds	r3, #32
    4e50:	00a6      	lsls	r6, r4, #2
    4e52:	1937      	adds	r7, r6, r4
    4e54:	00bd      	lsls	r5, r7, #2
    4e56:	195b      	adds	r3, r3, r5
    4e58:	3326      	adds	r3, #38	; 0x26
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	250f      	movs	r5, #15
    4e5e:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4e60:	1937      	adds	r7, r6, r4
    4e62:	00bd      	lsls	r5, r7, #2
    4e64:	194d      	adds	r5, r1, r5
    4e66:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	bank->ADDR.reg          = addr;
    4e68:	015d      	lsls	r5, r3, #5
    4e6a:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    4e6c:	1934      	adds	r4, r6, r4
    4e6e:	00a6      	lsls	r6, r4, #2
    4e70:	1989      	adds	r1, r1, r6
    4e72:	3144      	adds	r1, #68	; 0x44
    4e74:	8809      	ldrh	r1, [r1, #0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4e76:	1952      	adds	r2, r2, r5
    4e78:	6854      	ldr	r4, [r2, #4]
    4e7a:	0489      	lsls	r1, r1, #18
    4e7c:	0909      	lsrs	r1, r1, #4
    4e7e:	4e4f      	ldr	r6, [pc, #316]	; (4fbc <_usb_d_dev_ep_enable+0x300>)
    4e80:	4034      	ands	r4, r6
    4e82:	4321      	orrs	r1, r4
    4e84:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4e86:	6851      	ldr	r1, [r2, #4]
    4e88:	0b89      	lsrs	r1, r1, #14
    4e8a:	038c      	lsls	r4, r1, #14
    4e8c:	6054      	str	r4, [r2, #4]
    4e8e:	3308      	adds	r3, #8
    4e90:	015b      	lsls	r3, r3, #5
    4e92:	4463      	add	r3, ip
    4e94:	22b0      	movs	r2, #176	; 0xb0
    4e96:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4e98:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4e9a:	4b49      	ldr	r3, [pc, #292]	; (4fc0 <_usb_d_dev_ep_enable+0x304>)
    4e9c:	469c      	mov	ip, r3
    4e9e:	4465      	add	r5, ip
    4ea0:	2310      	movs	r3, #16
    4ea2:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    4ea4:	2000      	movs	r0, #0
    4ea6:	e067      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4ea8:	2206      	movs	r2, #6
    4eaa:	e7bb      	b.n	4e24 <_usb_d_dev_ep_enable+0x168>
    4eac:	2205      	movs	r2, #5
    4eae:	e7b9      	b.n	4e24 <_usb_d_dev_ep_enable+0x168>
    4eb0:	2204      	movs	r2, #4
    4eb2:	e7b7      	b.n	4e24 <_usb_d_dev_ep_enable+0x168>
    4eb4:	2203      	movs	r2, #3
    4eb6:	e7b5      	b.n	4e24 <_usb_d_dev_ep_enable+0x168>
    4eb8:	2202      	movs	r2, #2
    4eba:	e7b3      	b.n	4e24 <_usb_d_dev_ep_enable+0x168>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    4ebc:	2270      	movs	r2, #112	; 0x70
    4ebe:	422a      	tst	r2, r5
    4ec0:	d000      	beq.n	4ec4 <_usb_d_dev_ep_enable+0x208>
    4ec2:	e06d      	b.n	4fa0 <_usb_d_dev_ep_enable+0x2e4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    4ec4:	493a      	ldr	r1, [pc, #232]	; (4fb0 <_usb_d_dev_ep_enable+0x2f4>)
    4ec6:	00a0      	lsls	r0, r4, #2
    4ec8:	1907      	adds	r7, r0, r4
    4eca:	00ba      	lsls	r2, r7, #2
    4ecc:	188a      	adds	r2, r1, r2
    4ece:	3240      	adds	r2, #64	; 0x40
    4ed0:	79d2      	ldrb	r2, [r2, #7]
    4ed2:	0752      	lsls	r2, r2, #29
    4ed4:	0e52      	lsrs	r2, r2, #25
    4ed6:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4ed8:	001a      	movs	r2, r3
    4eda:	3208      	adds	r2, #8
    4edc:	0152      	lsls	r2, r2, #5
    4ede:	4f33      	ldr	r7, [pc, #204]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4ee0:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4ee2:	1904      	adds	r4, r0, r4
    4ee4:	00a2      	lsls	r2, r4, #2
    4ee6:	1889      	adds	r1, r1, r2
    4ee8:	3144      	adds	r1, #68	; 0x44
    4eea:	8809      	ldrh	r1, [r1, #0]
    4eec:	048a      	lsls	r2, r1, #18
    4eee:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4ef0:	2080      	movs	r0, #128	; 0x80
    4ef2:	0080      	lsls	r0, r0, #2
    4ef4:	4281      	cmp	r1, r0
    4ef6:	d810      	bhi.n	4f1a <_usb_d_dev_ep_enable+0x25e>
    4ef8:	3801      	subs	r0, #1
    4efa:	38ff      	subs	r0, #255	; 0xff
    4efc:	4281      	cmp	r1, r0
    4efe:	d81f      	bhi.n	4f40 <_usb_d_dev_ep_enable+0x284>
    4f00:	2980      	cmp	r1, #128	; 0x80
    4f02:	d81f      	bhi.n	4f44 <_usb_d_dev_ep_enable+0x288>
    4f04:	2940      	cmp	r1, #64	; 0x40
    4f06:	d81f      	bhi.n	4f48 <_usb_d_dev_ep_enable+0x28c>
    4f08:	2920      	cmp	r1, #32
    4f0a:	d81f      	bhi.n	4f4c <_usb_d_dev_ep_enable+0x290>
    4f0c:	2910      	cmp	r1, #16
    4f0e:	d81f      	bhi.n	4f50 <_usb_d_dev_ep_enable+0x294>
    4f10:	38f8      	subs	r0, #248	; 0xf8
    4f12:	4288      	cmp	r0, r1
    4f14:	4189      	sbcs	r1, r1
    4f16:	4249      	negs	r1, r1
    4f18:	e000      	b.n	4f1c <_usb_d_dev_ep_enable+0x260>
    4f1a:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f1c:	0709      	lsls	r1, r1, #28
    4f1e:	430a      	orrs	r2, r1
    4f20:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4f22:	001a      	movs	r2, r3
    4f24:	3208      	adds	r2, #8
    4f26:	0152      	lsls	r2, r2, #5
    4f28:	4920      	ldr	r1, [pc, #128]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4f2a:	468c      	mov	ip, r1
    4f2c:	4462      	add	r2, ip
    4f2e:	2180      	movs	r1, #128	; 0x80
    4f30:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    4f32:	015a      	lsls	r2, r3, #5
    4f34:	4b1f      	ldr	r3, [pc, #124]	; (4fb4 <_usb_d_dev_ep_enable+0x2f8>)
    4f36:	189b      	adds	r3, r3, r2
    4f38:	2200      	movs	r2, #0
    4f3a:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    4f3c:	2000      	movs	r0, #0
    4f3e:	e01b      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f40:	2106      	movs	r1, #6
    4f42:	e7eb      	b.n	4f1c <_usb_d_dev_ep_enable+0x260>
    4f44:	2105      	movs	r1, #5
    4f46:	e7e9      	b.n	4f1c <_usb_d_dev_ep_enable+0x260>
    4f48:	2104      	movs	r1, #4
    4f4a:	e7e7      	b.n	4f1c <_usb_d_dev_ep_enable+0x260>
    4f4c:	2103      	movs	r1, #3
    4f4e:	e7e5      	b.n	4f1c <_usb_d_dev_ep_enable+0x260>
    4f50:	2102      	movs	r1, #2
    4f52:	e7e3      	b.n	4f1c <_usb_d_dev_ep_enable+0x260>
    4f54:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4f56:	0709      	lsls	r1, r1, #28
    4f58:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f5a:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4f5c:	001a      	movs	r2, r3
    4f5e:	3208      	adds	r2, #8
    4f60:	0152      	lsls	r2, r2, #5
    4f62:	4912      	ldr	r1, [pc, #72]	; (4fac <_usb_d_dev_ep_enable+0x2f0>)
    4f64:	468c      	mov	ip, r1
    4f66:	4462      	add	r2, ip
    4f68:	2140      	movs	r1, #64	; 0x40
    4f6a:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    4f6c:	015b      	lsls	r3, r3, #5
    4f6e:	4a11      	ldr	r2, [pc, #68]	; (4fb4 <_usb_d_dev_ep_enable+0x2f8>)
    4f70:	18d3      	adds	r3, r2, r3
    4f72:	2200      	movs	r2, #0
    4f74:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    4f76:	2000      	movs	r0, #0
}
    4f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f7a:	2106      	movs	r1, #6
    4f7c:	e7eb      	b.n	4f56 <_usb_d_dev_ep_enable+0x29a>
    4f7e:	2105      	movs	r1, #5
    4f80:	e7e9      	b.n	4f56 <_usb_d_dev_ep_enable+0x29a>
    4f82:	2104      	movs	r1, #4
    4f84:	e7e7      	b.n	4f56 <_usb_d_dev_ep_enable+0x29a>
    4f86:	2103      	movs	r1, #3
    4f88:	e7e5      	b.n	4f56 <_usb_d_dev_ep_enable+0x29a>
    4f8a:	2102      	movs	r1, #2
    4f8c:	e7e3      	b.n	4f56 <_usb_d_dev_ep_enable+0x29a>
		return -USB_ERR_PARAM;
    4f8e:	2012      	movs	r0, #18
    4f90:	4240      	negs	r0, r0
    4f92:	e7f1      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
    4f94:	2012      	movs	r0, #18
    4f96:	4240      	negs	r0, r0
    4f98:	e7ee      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    4f9a:	2014      	movs	r0, #20
    4f9c:	4240      	negs	r0, r0
    4f9e:	e7eb      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    4fa0:	2014      	movs	r0, #20
    4fa2:	4240      	negs	r0, r0
    4fa4:	e7e8      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    4fa6:	2014      	movs	r0, #20
    4fa8:	4240      	negs	r0, r0
    4faa:	e7e5      	b.n	4f78 <_usb_d_dev_ep_enable+0x2bc>
    4fac:	41005000 	.word	0x41005000
    4fb0:	20000fbc 	.word	0x20000fbc
    4fb4:	20000f3c 	.word	0x20000f3c
    4fb8:	0fffc000 	.word	0x0fffc000
    4fbc:	f0003fff 	.word	0xf0003fff
    4fc0:	41005109 	.word	0x41005109

00004fc4 <_usb_d_dev_ep_stall>:
{
    4fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    4fc6:	220f      	movs	r2, #15
    4fc8:	4002      	ands	r2, r0
    4fca:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4fcc:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4fce:	2a00      	cmp	r2, #0
    4fd0:	d005      	beq.n	4fde <_usb_d_dev_ep_stall+0x1a>
    4fd2:	2800      	cmp	r0, #0
    4fd4:	db01      	blt.n	4fda <_usb_d_dev_ep_stall+0x16>
    4fd6:	0013      	movs	r3, r2
    4fd8:	e002      	b.n	4fe0 <_usb_d_dev_ep_stall+0x1c>
    4fda:	1d13      	adds	r3, r2, #4
    4fdc:	e000      	b.n	4fe0 <_usb_d_dev_ep_stall+0x1c>
    4fde:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    4fe0:	001d      	movs	r5, r3
    4fe2:	0098      	lsls	r0, r3, #2
    4fe4:	18c0      	adds	r0, r0, r3
    4fe6:	0083      	lsls	r3, r0, #2
    4fe8:	3310      	adds	r3, #16
    4fea:	0018      	movs	r0, r3
    4fec:	4b47      	ldr	r3, [pc, #284]	; (510c <_usb_d_dev_ep_stall+0x148>)
    4fee:	3320      	adds	r3, #32
    4ff0:	181b      	adds	r3, r3, r0
    4ff2:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    4ff4:	2a04      	cmp	r2, #4
    4ff6:	d900      	bls.n	4ffa <_usb_d_dev_ep_stall+0x36>
    4ff8:	e084      	b.n	5104 <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    4ffa:	2901      	cmp	r1, #1
    4ffc:	d018      	beq.n	5030 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    4ffe:	2900      	cmp	r1, #0
    5000:	d03d      	beq.n	507e <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5002:	00aa      	lsls	r2, r5, #2
    5004:	1952      	adds	r2, r2, r5
    5006:	0091      	lsls	r1, r2, #2
    5008:	4b40      	ldr	r3, [pc, #256]	; (510c <_usb_d_dev_ep_stall+0x148>)
    500a:	3320      	adds	r3, #32
    500c:	185b      	adds	r3, r3, r1
    500e:	3326      	adds	r3, #38	; 0x26
    5010:	781a      	ldrb	r2, [r3, #0]
    5012:	230f      	movs	r3, #15
    5014:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5016:	3308      	adds	r3, #8
    5018:	015b      	lsls	r3, r3, #5
    501a:	4a3d      	ldr	r2, [pc, #244]	; (5110 <_usb_d_dev_ep_stall+0x14c>)
    501c:	4694      	mov	ip, r2
    501e:	4463      	add	r3, ip
    5020:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5022:	2310      	movs	r3, #16
    5024:	40a3      	lsls	r3, r4
    5026:	4018      	ands	r0, r3
    5028:	1e43      	subs	r3, r0, #1
    502a:	4198      	sbcs	r0, r3
    502c:	b2c0      	uxtb	r0, r0
}
    502e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5030:	4836      	ldr	r0, [pc, #216]	; (510c <_usb_d_dev_ep_stall+0x148>)
    5032:	0003      	movs	r3, r0
    5034:	3320      	adds	r3, #32
    5036:	00aa      	lsls	r2, r5, #2
    5038:	1956      	adds	r6, r2, r5
    503a:	00b1      	lsls	r1, r6, #2
    503c:	185b      	adds	r3, r3, r1
    503e:	3326      	adds	r3, #38	; 0x26
    5040:	781b      	ldrb	r3, [r3, #0]
    5042:	210f      	movs	r1, #15
    5044:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5046:	2610      	movs	r6, #16
    5048:	40a6      	lsls	r6, r4
    504a:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    504c:	0019      	movs	r1, r3
    504e:	3108      	adds	r1, #8
    5050:	0149      	lsls	r1, r1, #5
    5052:	4f2f      	ldr	r7, [pc, #188]	; (5110 <_usb_d_dev_ep_stall+0x14c>)
    5054:	46bc      	mov	ip, r7
    5056:	4461      	add	r1, ip
    5058:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    505a:	2120      	movs	r1, #32
    505c:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    505e:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5060:	0159      	lsls	r1, r3, #5
    5062:	4b2c      	ldr	r3, [pc, #176]	; (5114 <_usb_d_dev_ep_stall+0x150>)
    5064:	469c      	mov	ip, r3
    5066:	4461      	add	r1, ip
    5068:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    506a:	1952      	adds	r2, r2, r5
    506c:	0093      	lsls	r3, r2, #2
    506e:	18c3      	adds	r3, r0, r3
    5070:	3340      	adds	r3, #64	; 0x40
    5072:	79da      	ldrb	r2, [r3, #7]
    5074:	2108      	movs	r1, #8
    5076:	430a      	orrs	r2, r1
    5078:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    507a:	2000      	movs	r0, #0
    507c:	e7d7      	b.n	502e <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    507e:	7c9a      	ldrb	r2, [r3, #18]
    5080:	310f      	adds	r1, #15
    5082:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5084:	0011      	movs	r1, r2
    5086:	3108      	adds	r1, #8
    5088:	0149      	lsls	r1, r1, #5
    508a:	4821      	ldr	r0, [pc, #132]	; (5110 <_usb_d_dev_ep_stall+0x14c>)
    508c:	4684      	mov	ip, r0
    508e:	4461      	add	r1, ip
    5090:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5092:	2110      	movs	r1, #16
    5094:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    5096:	4208      	tst	r0, r1
    5098:	d024      	beq.n	50e4 <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    509a:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    509c:	0010      	movs	r0, r2
    509e:	3008      	adds	r0, #8
    50a0:	0140      	lsls	r0, r0, #5
    50a2:	4460      	add	r0, ip
    50a4:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    50a6:	2120      	movs	r1, #32
    50a8:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    50aa:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    50ac:	0155      	lsls	r5, r2, #5
    50ae:	4f1a      	ldr	r7, [pc, #104]	; (5118 <_usb_d_dev_ep_stall+0x154>)
    50b0:	46bc      	mov	ip, r7
    50b2:	4465      	add	r5, ip
    50b4:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    50b6:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    50b8:	4208      	tst	r0, r1
    50ba:	d00a      	beq.n	50d2 <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    50bc:	0011      	movs	r1, r2
    50be:	3108      	adds	r1, #8
    50c0:	0149      	lsls	r1, r1, #5
    50c2:	4813      	ldr	r0, [pc, #76]	; (5110 <_usb_d_dev_ep_stall+0x14c>)
    50c4:	4684      	mov	ip, r0
    50c6:	4461      	add	r1, ip
    50c8:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    50ca:	2001      	movs	r0, #1
    50cc:	40a0      	lsls	r0, r4
    50ce:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    50d0:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    50d2:	7cd8      	ldrb	r0, [r3, #19]
    50d4:	2107      	movs	r1, #7
    50d6:	4001      	ands	r1, r0
    50d8:	2901      	cmp	r1, #1
    50da:	d005      	beq.n	50e8 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    50dc:	7cda      	ldrb	r2, [r3, #19]
    50de:	2108      	movs	r1, #8
    50e0:	438a      	bics	r2, r1
    50e2:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    50e4:	2000      	movs	r0, #0
    50e6:	e7a2      	b.n	502e <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    50e8:	3208      	adds	r2, #8
    50ea:	0152      	lsls	r2, r2, #5
    50ec:	4908      	ldr	r1, [pc, #32]	; (5110 <_usb_d_dev_ep_stall+0x14c>)
    50ee:	468c      	mov	ip, r1
    50f0:	4462      	add	r2, ip
    50f2:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    50f4:	2230      	movs	r2, #48	; 0x30
    50f6:	4211      	tst	r1, r2
    50f8:	d1f4      	bne.n	50e4 <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    50fa:	0002      	movs	r2, r0
    50fc:	2108      	movs	r1, #8
    50fe:	438a      	bics	r2, r1
    5100:	74da      	strb	r2, [r3, #19]
    5102:	e7ef      	b.n	50e4 <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    5104:	2012      	movs	r0, #18
    5106:	4240      	negs	r0, r0
    5108:	e791      	b.n	502e <_usb_d_dev_ep_stall+0x6a>
    510a:	46c0      	nop			; (mov r8, r8)
    510c:	20000fbc 	.word	0x20000fbc
    5110:	41005000 	.word	0x41005000
    5114:	41005109 	.word	0x41005109
    5118:	41005108 	.word	0x41005108

0000511c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    511c:	b570      	push	{r4, r5, r6, lr}
    511e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    5120:	240f      	movs	r4, #15
    5122:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5124:	0162      	lsls	r2, r4, #5
    5126:	4b18      	ldr	r3, [pc, #96]	; (5188 <_usb_d_dev_ep_read_req+0x6c>)
    5128:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    512a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    512c:	685d      	ldr	r5, [r3, #4]
    512e:	04ad      	lsls	r5, r5, #18
    5130:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5132:	2c04      	cmp	r4, #4
    5134:	d81f      	bhi.n	5176 <_usb_d_dev_ep_read_req+0x5a>
    5136:	2e00      	cmp	r6, #0
    5138:	d020      	beq.n	517c <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    513a:	0023      	movs	r3, r4
    513c:	3308      	adds	r3, #8
    513e:	015b      	lsls	r3, r3, #5
    5140:	4a12      	ldr	r2, [pc, #72]	; (518c <_usb_d_dev_ep_read_req+0x70>)
    5142:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5144:	2b11      	cmp	r3, #17
    5146:	d11c      	bne.n	5182 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5148:	0023      	movs	r3, r4
    514a:	3308      	adds	r3, #8
    514c:	015b      	lsls	r3, r3, #5
    514e:	4694      	mov	ip, r2
    5150:	4463      	add	r3, ip
    5152:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5154:	06db      	lsls	r3, r3, #27
    5156:	d401      	bmi.n	515c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    5158:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    515a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    515c:	2208      	movs	r2, #8
    515e:	0030      	movs	r0, r6
    5160:	4b0b      	ldr	r3, [pc, #44]	; (5190 <_usb_d_dev_ep_read_req+0x74>)
    5162:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5164:	3408      	adds	r4, #8
    5166:	0164      	lsls	r4, r4, #5
    5168:	4b08      	ldr	r3, [pc, #32]	; (518c <_usb_d_dev_ep_read_req+0x70>)
    516a:	469c      	mov	ip, r3
    516c:	4464      	add	r4, ip
    516e:	2310      	movs	r3, #16
    5170:	71e3      	strb	r3, [r4, #7]
	return bytes;
    5172:	0028      	movs	r0, r5
    5174:	e7f1      	b.n	515a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    5176:	2012      	movs	r0, #18
    5178:	4240      	negs	r0, r0
    517a:	e7ee      	b.n	515a <_usb_d_dev_ep_read_req+0x3e>
    517c:	2012      	movs	r0, #18
    517e:	4240      	negs	r0, r0
    5180:	e7eb      	b.n	515a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    5182:	2013      	movs	r0, #19
    5184:	4240      	negs	r0, r0
    5186:	e7e8      	b.n	515a <_usb_d_dev_ep_read_req+0x3e>
    5188:	20000f3c 	.word	0x20000f3c
    518c:	41005000 	.word	0x41005000
    5190:	0000bf15 	.word	0x0000bf15

00005194 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    5194:	b5f0      	push	{r4, r5, r6, r7, lr}
    5196:	46de      	mov	lr, fp
    5198:	4657      	mov	r7, sl
    519a:	464e      	mov	r6, r9
    519c:	4645      	mov	r5, r8
    519e:	b5e0      	push	{r5, r6, r7, lr}
    51a0:	b085      	sub	sp, #20
    51a2:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    51a4:	7a04      	ldrb	r4, [r0, #8]
    51a6:	220f      	movs	r2, #15
    51a8:	4022      	ands	r2, r4
    51aa:	b264      	sxtb	r4, r4
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    51ac:	0fe3      	lsrs	r3, r4, #31
    51ae:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    51b0:	2a00      	cmp	r2, #0
    51b2:	d005      	beq.n	51c0 <_usb_d_dev_ep_trans+0x2c>
    51b4:	2c00      	cmp	r4, #0
    51b6:	db01      	blt.n	51bc <_usb_d_dev_ep_trans+0x28>
    51b8:	0010      	movs	r0, r2
    51ba:	e002      	b.n	51c2 <_usb_d_dev_ep_trans+0x2e>
    51bc:	1d10      	adds	r0, r2, #4
    51be:	e000      	b.n	51c2 <_usb_d_dev_ep_trans+0x2e>
    51c0:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    51c2:	0005      	movs	r5, r0
    51c4:	4b62      	ldr	r3, [pc, #392]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    51c6:	001f      	movs	r7, r3
    51c8:	3720      	adds	r7, #32
    51ca:	0081      	lsls	r1, r0, #2
    51cc:	180e      	adds	r6, r1, r0
    51ce:	46b4      	mov	ip, r6
    51d0:	00b6      	lsls	r6, r6, #2
    51d2:	3610      	adds	r6, #16
    51d4:	19bf      	adds	r7, r7, r6
    51d6:	3704      	adds	r7, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    51d8:	4661      	mov	r1, ip
    51da:	0088      	lsls	r0, r1, #2
    51dc:	181b      	adds	r3, r3, r0
    51de:	3344      	adds	r3, #68	; 0x44
    51e0:	881b      	ldrh	r3, [r3, #0]
    51e2:	495c      	ldr	r1, [pc, #368]	; (5354 <_usb_d_dev_ep_trans+0x1c0>)
    51e4:	428b      	cmp	r3, r1
    51e6:	d042      	beq.n	526e <_usb_d_dev_ep_trans+0xda>
    51e8:	1e5e      	subs	r6, r3, #1
    51ea:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    51ec:	4641      	mov	r1, r8
    51ee:	6849      	ldr	r1, [r1, #4]
    51f0:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    51f2:	2a04      	cmp	r2, #4
    51f4:	d900      	bls.n	51f8 <_usb_d_dev_ep_trans+0x64>
    51f6:	e0a1      	b.n	533c <_usb_d_dev_ep_trans+0x1a8>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    51f8:	4642      	mov	r2, r8
    51fa:	6812      	ldr	r2, [r2, #0]
    51fc:	4856      	ldr	r0, [pc, #344]	; (5358 <_usb_d_dev_ep_trans+0x1c4>)
    51fe:	4282      	cmp	r2, r0
    5200:	d90c      	bls.n	521c <_usb_d_dev_ep_trans+0x88>
    5202:	1888      	adds	r0, r1, r2
    5204:	9001      	str	r0, [sp, #4]
    5206:	4855      	ldr	r0, [pc, #340]	; (535c <_usb_d_dev_ep_trans+0x1c8>)
    5208:	4684      	mov	ip, r0
    520a:	9801      	ldr	r0, [sp, #4]
    520c:	4560      	cmp	r0, ip
    520e:	d805      	bhi.n	521c <_usb_d_dev_ep_trans+0x88>
    5210:	0792      	lsls	r2, r2, #30
    5212:	d103      	bne.n	521c <_usb_d_dev_ep_trans+0x88>
	    || (!dir && (trans->size < ept->size))) {
    5214:	2c00      	cmp	r4, #0
    5216:	db2c      	blt.n	5272 <_usb_d_dev_ep_trans+0xde>
    5218:	4299      	cmp	r1, r3
    521a:	d22d      	bcs.n	5278 <_usb_d_dev_ep_trans+0xe4>
		if (!ept->cache) {
    521c:	00ab      	lsls	r3, r5, #2
    521e:	195b      	adds	r3, r3, r5
    5220:	009a      	lsls	r2, r3, #2
    5222:	4b4b      	ldr	r3, [pc, #300]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    5224:	189b      	adds	r3, r3, r2
    5226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5228:	2b00      	cmp	r3, #0
    522a:	d100      	bne.n	522e <_usb_d_dev_ep_trans+0x9a>
    522c:	e089      	b.n	5342 <_usb_d_dev_ep_trans+0x1ae>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    522e:	2301      	movs	r3, #1
    5230:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    5232:	2c00      	cmp	r4, #0
    5234:	db0a      	blt.n	524c <_usb_d_dev_ep_trans+0xb8>
    5236:	2e00      	cmp	r6, #0
    5238:	d008      	beq.n	524c <_usb_d_dev_ep_trans+0xb8>
		if (!ept->cache) {
    523a:	00ab      	lsls	r3, r5, #2
    523c:	195b      	adds	r3, r3, r5
    523e:	009a      	lsls	r2, r3, #2
    5240:	4b43      	ldr	r3, [pc, #268]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    5242:	189b      	adds	r3, r3, r2
    5244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5246:	2b00      	cmp	r3, #0
    5248:	d100      	bne.n	524c <_usb_d_dev_ep_trans+0xb8>
    524a:	e07d      	b.n	5348 <_usb_d_dev_ep_trans+0x1b4>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    524c:	00aa      	lsls	r2, r5, #2
    524e:	1952      	adds	r2, r2, r5
    5250:	0091      	lsls	r1, r2, #2
    5252:	4b3f      	ldr	r3, [pc, #252]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    5254:	185b      	adds	r3, r3, r1
    5256:	3340      	adds	r3, #64	; 0x40
    5258:	79db      	ldrb	r3, [r3, #7]
    525a:	071b      	lsls	r3, r3, #28
    525c:	d50f      	bpl.n	527e <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
    525e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5260:	b005      	add	sp, #20
    5262:	bc3c      	pop	{r2, r3, r4, r5}
    5264:	4690      	mov	r8, r2
    5266:	4699      	mov	r9, r3
    5268:	46a2      	mov	sl, r4
    526a:	46ab      	mov	fp, r5
    526c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    526e:	001e      	movs	r6, r3
    5270:	e7bc      	b.n	51ec <_usb_d_dev_ep_trans+0x58>
	bool use_cache = false;
    5272:	2300      	movs	r3, #0
    5274:	9301      	str	r3, [sp, #4]
    5276:	e7dc      	b.n	5232 <_usb_d_dev_ep_trans+0x9e>
    5278:	2300      	movs	r3, #0
    527a:	9301      	str	r3, [sp, #4]
    527c:	e7d9      	b.n	5232 <_usb_d_dev_ep_trans+0x9e>
	atomic_enter_critical(&flags);
    527e:	a803      	add	r0, sp, #12
    5280:	4b37      	ldr	r3, [pc, #220]	; (5360 <_usb_d_dev_ep_trans+0x1cc>)
    5282:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5284:	00aa      	lsls	r2, r5, #2
    5286:	1952      	adds	r2, r2, r5
    5288:	0091      	lsls	r1, r2, #2
    528a:	4b31      	ldr	r3, [pc, #196]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    528c:	185b      	adds	r3, r3, r1
    528e:	3340      	adds	r3, #64	; 0x40
    5290:	79db      	ldrb	r3, [r3, #7]
    5292:	065b      	lsls	r3, r3, #25
    5294:	d430      	bmi.n	52f8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5296:	00ab      	lsls	r3, r5, #2
    5298:	195b      	adds	r3, r3, r5
    529a:	009a      	lsls	r2, r3, #2
    529c:	4b2c      	ldr	r3, [pc, #176]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    529e:	469b      	mov	fp, r3
    52a0:	4493      	add	fp, r2
    52a2:	2340      	movs	r3, #64	; 0x40
    52a4:	445b      	add	r3, fp
    52a6:	469a      	mov	sl, r3
    52a8:	79db      	ldrb	r3, [r3, #7]
    52aa:	2240      	movs	r2, #64	; 0x40
    52ac:	4313      	orrs	r3, r2
    52ae:	4652      	mov	r2, sl
    52b0:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    52b2:	a803      	add	r0, sp, #12
    52b4:	4b2b      	ldr	r3, [pc, #172]	; (5364 <_usb_d_dev_ep_trans+0x1d0>)
    52b6:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    52b8:	465b      	mov	r3, fp
    52ba:	4642      	mov	r2, r8
    52bc:	6812      	ldr	r2, [r2, #0]
    52be:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    52c0:	4642      	mov	r2, r8
    52c2:	6852      	ldr	r2, [r2, #4]
    52c4:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    52c6:	2300      	movs	r3, #0
    52c8:	465a      	mov	r2, fp
    52ca:	63d3      	str	r3, [r2, #60]	; 0x3c
	ept->flags.bits.dir       = dir;
    52cc:	464b      	mov	r3, r9
    52ce:	01db      	lsls	r3, r3, #7
    52d0:	4652      	mov	r2, sl
    52d2:	79d2      	ldrb	r2, [r2, #7]
    52d4:	217f      	movs	r1, #127	; 0x7f
    52d6:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    52d8:	9a01      	ldr	r2, [sp, #4]
    52da:	0152      	lsls	r2, r2, #5
    52dc:	430b      	orrs	r3, r1
    52de:	2120      	movs	r1, #32
    52e0:	438b      	bics	r3, r1
    52e2:	431a      	orrs	r2, r3
    52e4:	4653      	mov	r3, sl
    52e6:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    52e8:	4643      	mov	r3, r8
    52ea:	7a5b      	ldrb	r3, [r3, #9]
    52ec:	2b00      	cmp	r3, #0
    52ee:	d008      	beq.n	5302 <_usb_d_dev_ep_trans+0x16e>
    52f0:	2e00      	cmp	r6, #0
    52f2:	d01b      	beq.n	532c <_usb_d_dev_ep_trans+0x198>
    52f4:	2200      	movs	r2, #0
    52f6:	e005      	b.n	5304 <_usb_d_dev_ep_trans+0x170>
		atomic_leave_critical(&flags);
    52f8:	a803      	add	r0, sp, #12
    52fa:	4b1a      	ldr	r3, [pc, #104]	; (5364 <_usb_d_dev_ep_trans+0x1d0>)
    52fc:	4798      	blx	r3
		return USB_BUSY;
    52fe:	2001      	movs	r0, #1
    5300:	e7ae      	b.n	5260 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    5302:	2200      	movs	r2, #0
    5304:	00ab      	lsls	r3, r5, #2
    5306:	195d      	adds	r5, r3, r5
    5308:	00a9      	lsls	r1, r5, #2
    530a:	4b11      	ldr	r3, [pc, #68]	; (5350 <_usb_d_dev_ep_trans+0x1bc>)
    530c:	185b      	adds	r3, r3, r1
    530e:	3340      	adds	r3, #64	; 0x40
    5310:	0111      	lsls	r1, r2, #4
    5312:	79da      	ldrb	r2, [r3, #7]
    5314:	2010      	movs	r0, #16
    5316:	4382      	bics	r2, r0
    5318:	430a      	orrs	r2, r1
    531a:	71da      	strb	r2, [r3, #7]
	if (dir) {
    531c:	2c00      	cmp	r4, #0
    531e:	db07      	blt.n	5330 <_usb_d_dev_ep_trans+0x19c>
		_usb_d_dev_out_next(ept, false);
    5320:	2100      	movs	r1, #0
    5322:	0038      	movs	r0, r7
    5324:	4b10      	ldr	r3, [pc, #64]	; (5368 <_usb_d_dev_ep_trans+0x1d4>)
    5326:	4798      	blx	r3
	return ERR_NONE;
    5328:	2000      	movs	r0, #0
    532a:	e799      	b.n	5260 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    532c:	2201      	movs	r2, #1
    532e:	e7e9      	b.n	5304 <_usb_d_dev_ep_trans+0x170>
		_usb_d_dev_in_next(ept, false);
    5330:	2100      	movs	r1, #0
    5332:	0038      	movs	r0, r7
    5334:	4b0d      	ldr	r3, [pc, #52]	; (536c <_usb_d_dev_ep_trans+0x1d8>)
    5336:	4798      	blx	r3
	return ERR_NONE;
    5338:	2000      	movs	r0, #0
    533a:	e791      	b.n	5260 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    533c:	2012      	movs	r0, #18
    533e:	4240      	negs	r0, r0
    5340:	e78e      	b.n	5260 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    5342:	2013      	movs	r0, #19
    5344:	4240      	negs	r0, r0
    5346:	e78b      	b.n	5260 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    5348:	2012      	movs	r0, #18
    534a:	4240      	negs	r0, r0
    534c:	e788      	b.n	5260 <_usb_d_dev_ep_trans+0xcc>
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	20000fbc 	.word	0x20000fbc
    5354:	000003ff 	.word	0x000003ff
    5358:	1fffffff 	.word	0x1fffffff
    535c:	20007fff 	.word	0x20007fff
    5360:	00002319 	.word	0x00002319
    5364:	00002327 	.word	0x00002327
    5368:	00004535 	.word	0x00004535
    536c:	000043a5 	.word	0x000043a5

00005370 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    5370:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    5372:	220f      	movs	r2, #15
    5374:	4002      	ands	r2, r0
    5376:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    5378:	0fc1      	lsrs	r1, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    537a:	2a00      	cmp	r2, #0
    537c:	d005      	beq.n	538a <_usb_d_dev_ep_abort+0x1a>
    537e:	2800      	cmp	r0, #0
    5380:	db01      	blt.n	5386 <_usb_d_dev_ep_abort+0x16>
    5382:	0010      	movs	r0, r2
    5384:	e002      	b.n	538c <_usb_d_dev_ep_abort+0x1c>
    5386:	1d10      	adds	r0, r2, #4
    5388:	e000      	b.n	538c <_usb_d_dev_ep_abort+0x1c>
    538a:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    538c:	0083      	lsls	r3, r0, #2
    538e:	181b      	adds	r3, r3, r0
    5390:	009c      	lsls	r4, r3, #2
    5392:	3410      	adds	r4, #16
    5394:	4805      	ldr	r0, [pc, #20]	; (53ac <_usb_d_dev_ep_abort+0x3c>)
    5396:	3020      	adds	r0, #32
    5398:	1900      	adds	r0, r0, r4
    539a:	3004      	adds	r0, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    539c:	2a04      	cmp	r2, #4
    539e:	d900      	bls.n	53a2 <_usb_d_dev_ep_abort+0x32>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    53a0:	bd10      	pop	{r4, pc}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    53a2:	2202      	movs	r2, #2
    53a4:	4b02      	ldr	r3, [pc, #8]	; (53b0 <_usb_d_dev_ep_abort+0x40>)
    53a6:	4798      	blx	r3
    53a8:	e7fa      	b.n	53a0 <_usb_d_dev_ep_abort+0x30>
    53aa:	46c0      	nop			; (mov r8, r8)
    53ac:	20000fbc 	.word	0x20000fbc
    53b0:	000041c1 	.word	0x000041c1

000053b4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    53b4:	2900      	cmp	r1, #0
    53b6:	d006      	beq.n	53c6 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    53b8:	2801      	cmp	r0, #1
    53ba:	d006      	beq.n	53ca <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    53bc:	2800      	cmp	r0, #0
    53be:	d101      	bne.n	53c4 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    53c0:	4b03      	ldr	r3, [pc, #12]	; (53d0 <_usb_d_dev_register_callback+0x1c>)
    53c2:	6219      	str	r1, [r3, #32]
	}
}
    53c4:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    53c6:	4903      	ldr	r1, [pc, #12]	; (53d4 <_usb_d_dev_register_callback+0x20>)
    53c8:	e7f6      	b.n	53b8 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    53ca:	4b01      	ldr	r3, [pc, #4]	; (53d0 <_usb_d_dev_register_callback+0x1c>)
    53cc:	6259      	str	r1, [r3, #36]	; 0x24
    53ce:	e7f9      	b.n	53c4 <_usb_d_dev_register_callback+0x10>
    53d0:	20000fbc 	.word	0x20000fbc
    53d4:	00004081 	.word	0x00004081

000053d8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    53d8:	2900      	cmp	r1, #0
    53da:	d008      	beq.n	53ee <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    53dc:	2800      	cmp	r0, #0
    53de:	d008      	beq.n	53f2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    53e0:	2801      	cmp	r0, #1
    53e2:	d009      	beq.n	53f8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    53e4:	2802      	cmp	r0, #2
    53e6:	d106      	bne.n	53f6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    53e8:	4b05      	ldr	r3, [pc, #20]	; (5400 <_usb_d_dev_register_ep_callback+0x28>)
    53ea:	6319      	str	r1, [r3, #48]	; 0x30
	}
}
    53ec:	e003      	b.n	53f6 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    53ee:	4905      	ldr	r1, [pc, #20]	; (5404 <_usb_d_dev_register_ep_callback+0x2c>)
    53f0:	e7f4      	b.n	53dc <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    53f2:	4b03      	ldr	r3, [pc, #12]	; (5400 <_usb_d_dev_register_ep_callback+0x28>)
    53f4:	6299      	str	r1, [r3, #40]	; 0x28
}
    53f6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    53f8:	4b01      	ldr	r3, [pc, #4]	; (5400 <_usb_d_dev_register_ep_callback+0x28>)
    53fa:	62d9      	str	r1, [r3, #44]	; 0x2c
    53fc:	e7fb      	b.n	53f6 <_usb_d_dev_register_ep_callback+0x1e>
    53fe:	46c0      	nop			; (mov r8, r8)
    5400:	20000fbc 	.word	0x20000fbc
    5404:	00004081 	.word	0x00004081

00005408 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    5408:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    540a:	4b01      	ldr	r3, [pc, #4]	; (5410 <USB_Handler+0x8>)
    540c:	4798      	blx	r3
}
    540e:	bd10      	pop	{r4, pc}
    5410:	00004739 	.word	0x00004739

00005414 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    5414:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    5416:	4806      	ldr	r0, [pc, #24]	; (5430 <cdc_device_acm_init+0x1c>)
    5418:	3040      	adds	r0, #64	; 0x40
    541a:	4b06      	ldr	r3, [pc, #24]	; (5434 <cdc_device_acm_init+0x20>)
    541c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    541e:	4b06      	ldr	r3, [pc, #24]	; (5438 <cdc_device_acm_init+0x24>)
    5420:	4798      	blx	r3

	usbdc_start(single_desc);
    5422:	4806      	ldr	r0, [pc, #24]	; (543c <cdc_device_acm_init+0x28>)
    5424:	4b06      	ldr	r3, [pc, #24]	; (5440 <cdc_device_acm_init+0x2c>)
    5426:	4798      	blx	r3
	usbdc_attach();
    5428:	4b06      	ldr	r3, [pc, #24]	; (5444 <cdc_device_acm_init+0x30>)
    542a:	4798      	blx	r3
}
    542c:	bd10      	pop	{r4, pc}
    542e:	46c0      	nop			; (mov r8, r8)
    5430:	200012a4 	.word	0x200012a4
    5434:	00005f71 	.word	0x00005f71
    5438:	00005719 	.word	0x00005719
    543c:	20000004 	.word	0x20000004
    5440:	00005fe9 	.word	0x00005fe9
    5444:	00006021 	.word	0x00006021

00005448 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    5448:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    544a:	4b01      	ldr	r3, [pc, #4]	; (5450 <usb_init+0x8>)
    544c:	4798      	blx	r3
}
    544e:	bd10      	pop	{r4, pc}
    5450:	00005415 	.word	0x00005415

00005454 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5454:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    5456:	798b      	ldrb	r3, [r1, #6]
    5458:	79cc      	ldrb	r4, [r1, #7]
    545a:	0224      	lsls	r4, r4, #8
    545c:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    545e:	2a01      	cmp	r2, #1
    5460:	d00a      	beq.n	5478 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    5462:	784b      	ldrb	r3, [r1, #1]
    5464:	2b21      	cmp	r3, #33	; 0x21
    5466:	d109      	bne.n	547c <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5468:	2c07      	cmp	r4, #7
    546a:	d10a      	bne.n	5482 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    546c:	2300      	movs	r3, #0
    546e:	0022      	movs	r2, r4
    5470:	4905      	ldr	r1, [pc, #20]	; (5488 <cdcdf_acm_get_req+0x34>)
    5472:	4c06      	ldr	r4, [pc, #24]	; (548c <cdcdf_acm_get_req+0x38>)
    5474:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    5476:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    5478:	2000      	movs	r0, #0
    547a:	e7fc      	b.n	5476 <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    547c:	200d      	movs	r0, #13
    547e:	4240      	negs	r0, r0
    5480:	e7f9      	b.n	5476 <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    5482:	2001      	movs	r0, #1
    5484:	4240      	negs	r0, r0
    5486:	e7f6      	b.n	5476 <cdcdf_acm_get_req+0x22>
    5488:	20001324 	.word	0x20001324
    548c:	00005aa1 	.word	0x00005aa1

00005490 <cdcdf_acm_set_req>:
{
    5490:	b5f0      	push	{r4, r5, r6, r7, lr}
    5492:	b083      	sub	sp, #12
    5494:	0005      	movs	r5, r0
    5496:	000f      	movs	r7, r1
    5498:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    549a:	798e      	ldrb	r6, [r1, #6]
    549c:	79cb      	ldrb	r3, [r1, #7]
    549e:	021b      	lsls	r3, r3, #8
    54a0:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    54a2:	4b23      	ldr	r3, [pc, #140]	; (5530 <cdcdf_acm_set_req+0xa0>)
    54a4:	4798      	blx	r3
	switch (req->bRequest) {
    54a6:	787b      	ldrb	r3, [r7, #1]
    54a8:	2b20      	cmp	r3, #32
    54aa:	d005      	beq.n	54b8 <cdcdf_acm_set_req+0x28>
    54ac:	2b22      	cmp	r3, #34	; 0x22
    54ae:	d026      	beq.n	54fe <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    54b0:	200d      	movs	r0, #13
    54b2:	4240      	negs	r0, r0
}
    54b4:	b003      	add	sp, #12
    54b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    54b8:	2e07      	cmp	r6, #7
    54ba:	d131      	bne.n	5520 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    54bc:	2c00      	cmp	r4, #0
    54be:	d017      	beq.n	54f0 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    54c0:	2207      	movs	r2, #7
    54c2:	0001      	movs	r1, r0
    54c4:	4668      	mov	r0, sp
    54c6:	4b1b      	ldr	r3, [pc, #108]	; (5534 <cdcdf_acm_set_req+0xa4>)
    54c8:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    54ca:	4b1b      	ldr	r3, [pc, #108]	; (5538 <cdcdf_acm_set_req+0xa8>)
    54cc:	689b      	ldr	r3, [r3, #8]
    54ce:	2b00      	cmp	r3, #0
    54d0:	d003      	beq.n	54da <cdcdf_acm_set_req+0x4a>
    54d2:	4668      	mov	r0, sp
    54d4:	4798      	blx	r3
    54d6:	2800      	cmp	r0, #0
    54d8:	d025      	beq.n	5526 <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    54da:	4b17      	ldr	r3, [pc, #92]	; (5538 <cdcdf_acm_set_req+0xa8>)
    54dc:	9a00      	ldr	r2, [sp, #0]
    54de:	601a      	str	r2, [r3, #0]
    54e0:	466a      	mov	r2, sp
    54e2:	8892      	ldrh	r2, [r2, #4]
    54e4:	809a      	strh	r2, [r3, #4]
    54e6:	466a      	mov	r2, sp
    54e8:	7992      	ldrb	r2, [r2, #6]
    54ea:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    54ec:	2000      	movs	r0, #0
    54ee:	e7e1      	b.n	54b4 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    54f0:	2300      	movs	r3, #0
    54f2:	0032      	movs	r2, r6
    54f4:	0001      	movs	r1, r0
    54f6:	0028      	movs	r0, r5
    54f8:	4c10      	ldr	r4, [pc, #64]	; (553c <cdcdf_acm_set_req+0xac>)
    54fa:	47a0      	blx	r4
    54fc:	e7da      	b.n	54b4 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    54fe:	2300      	movs	r3, #0
    5500:	2200      	movs	r2, #0
    5502:	2100      	movs	r1, #0
    5504:	2000      	movs	r0, #0
    5506:	4c0d      	ldr	r4, [pc, #52]	; (553c <cdcdf_acm_set_req+0xac>)
    5508:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    550a:	4b0b      	ldr	r3, [pc, #44]	; (5538 <cdcdf_acm_set_req+0xa8>)
    550c:	68db      	ldr	r3, [r3, #12]
    550e:	2b00      	cmp	r3, #0
    5510:	d00b      	beq.n	552a <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    5512:	78ba      	ldrb	r2, [r7, #2]
    5514:	78f8      	ldrb	r0, [r7, #3]
    5516:	0200      	lsls	r0, r0, #8
    5518:	4310      	orrs	r0, r2
    551a:	4798      	blx	r3
		return ERR_NONE;
    551c:	2000      	movs	r0, #0
    551e:	e7c9      	b.n	54b4 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    5520:	2001      	movs	r0, #1
    5522:	4240      	negs	r0, r0
    5524:	e7c6      	b.n	54b4 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    5526:	2000      	movs	r0, #0
    5528:	e7c4      	b.n	54b4 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    552a:	2000      	movs	r0, #0
    552c:	e7c2      	b.n	54b4 <cdcdf_acm_set_req+0x24>
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	0000602d 	.word	0x0000602d
    5534:	0000bf15 	.word	0x0000bf15
    5538:	20001324 	.word	0x20001324
    553c:	00005aa1 	.word	0x00005aa1

00005540 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5540:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5542:	780c      	ldrb	r4, [r1, #0]
    5544:	0965      	lsrs	r5, r4, #5
    5546:	2303      	movs	r3, #3
    5548:	402b      	ands	r3, r5
    554a:	2b01      	cmp	r3, #1
    554c:	d114      	bne.n	5578 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    554e:	790d      	ldrb	r5, [r1, #4]
    5550:	794b      	ldrb	r3, [r1, #5]
    5552:	021b      	lsls	r3, r3, #8
    5554:	432b      	orrs	r3, r5
    5556:	4d0b      	ldr	r5, [pc, #44]	; (5584 <cdcdf_acm_req+0x44>)
    5558:	7c2d      	ldrb	r5, [r5, #16]
    555a:	42ab      	cmp	r3, r5
    555c:	d003      	beq.n	5566 <cdcdf_acm_req+0x26>
    555e:	4d09      	ldr	r5, [pc, #36]	; (5584 <cdcdf_acm_req+0x44>)
    5560:	7c6d      	ldrb	r5, [r5, #17]
    5562:	42ab      	cmp	r3, r5
    5564:	d10b      	bne.n	557e <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    5566:	b264      	sxtb	r4, r4
    5568:	2c00      	cmp	r4, #0
    556a:	db02      	blt.n	5572 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    556c:	4b06      	ldr	r3, [pc, #24]	; (5588 <cdcdf_acm_req+0x48>)
    556e:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    5570:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    5572:	4b06      	ldr	r3, [pc, #24]	; (558c <cdcdf_acm_req+0x4c>)
    5574:	4798      	blx	r3
    5576:	e7fb      	b.n	5570 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    5578:	200a      	movs	r0, #10
    557a:	4240      	negs	r0, r0
    557c:	e7f8      	b.n	5570 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    557e:	200a      	movs	r0, #10
    5580:	4240      	negs	r0, r0
    5582:	e7f5      	b.n	5570 <cdcdf_acm_req+0x30>
    5584:	20001324 	.word	0x20001324
    5588:	00005491 	.word	0x00005491
    558c:	00005455 	.word	0x00005455

00005590 <cdcdf_acm_enable>:
{
    5590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5592:	46ce      	mov	lr, r9
    5594:	4647      	mov	r7, r8
    5596:	b580      	push	{r7, lr}
    5598:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    559a:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    559c:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    559e:	2300      	movs	r3, #0
    55a0:	4698      	mov	r8, r3
    55a2:	4643      	mov	r3, r8
    55a4:	2b01      	cmp	r3, #1
    55a6:	d845      	bhi.n	5634 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    55a8:	2800      	cmp	r0, #0
    55aa:	d04b      	beq.n	5644 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    55ac:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    55ae:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    55b0:	2a02      	cmp	r2, #2
    55b2:	d001      	beq.n	55b8 <cdcdf_acm_enable+0x28>
    55b4:	2a0a      	cmp	r2, #10
    55b6:	d148      	bne.n	564a <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    55b8:	46c1      	mov	r9, r8
    55ba:	4642      	mov	r2, r8
    55bc:	5cba      	ldrb	r2, [r7, r2]
    55be:	4293      	cmp	r3, r2
    55c0:	d046      	beq.n	5650 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    55c2:	2aff      	cmp	r2, #255	; 0xff
    55c4:	d147      	bne.n	5656 <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    55c6:	4642      	mov	r2, r8
    55c8:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    55ca:	2205      	movs	r2, #5
    55cc:	6871      	ldr	r1, [r6, #4]
    55ce:	4b25      	ldr	r3, [pc, #148]	; (5664 <cdcdf_acm_enable+0xd4>)
    55d0:	4798      	blx	r3
    55d2:	0004      	movs	r4, r0
		while (NULL != ep) {
    55d4:	e00c      	b.n	55f0 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    55d6:	464b      	mov	r3, r9
    55d8:	18fb      	adds	r3, r7, r3
    55da:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    55dc:	0028      	movs	r0, r5
    55de:	4b22      	ldr	r3, [pc, #136]	; (5668 <cdcdf_acm_enable+0xd8>)
    55e0:	4798      	blx	r3
			desc->sod = ep;
    55e2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    55e4:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    55e6:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    55e8:	6871      	ldr	r1, [r6, #4]
    55ea:	4b20      	ldr	r3, [pc, #128]	; (566c <cdcdf_acm_enable+0xdc>)
    55ec:	4798      	blx	r3
    55ee:	0004      	movs	r4, r0
		while (NULL != ep) {
    55f0:	2c00      	cmp	r4, #0
    55f2:	d013      	beq.n	561c <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    55f4:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    55f6:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    55f8:	7922      	ldrb	r2, [r4, #4]
    55fa:	7963      	ldrb	r3, [r4, #5]
    55fc:	021b      	lsls	r3, r3, #8
    55fe:	18d2      	adds	r2, r2, r3
    5600:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5602:	0028      	movs	r0, r5
    5604:	4b1a      	ldr	r3, [pc, #104]	; (5670 <cdcdf_acm_enable+0xe0>)
    5606:	4798      	blx	r3
    5608:	2800      	cmp	r0, #0
    560a:	d127      	bne.n	565c <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    560c:	b26b      	sxtb	r3, r5
    560e:	2b00      	cmp	r3, #0
    5610:	dbe1      	blt.n	55d6 <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    5612:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    5614:	0028      	movs	r0, r5
    5616:	4b14      	ldr	r3, [pc, #80]	; (5668 <cdcdf_acm_enable+0xd8>)
    5618:	4798      	blx	r3
    561a:	e7e2      	b.n	55e2 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    561c:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    561e:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    5620:	18c0      	adds	r0, r0, r3
    5622:	2204      	movs	r2, #4
    5624:	6871      	ldr	r1, [r6, #4]
    5626:	4b0f      	ldr	r3, [pc, #60]	; (5664 <cdcdf_acm_enable+0xd4>)
    5628:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    562a:	4643      	mov	r3, r8
    562c:	3301      	adds	r3, #1
    562e:	b2db      	uxtb	r3, r3
    5630:	4698      	mov	r8, r3
    5632:	e7b6      	b.n	55a2 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    5634:	2201      	movs	r2, #1
    5636:	4b0f      	ldr	r3, [pc, #60]	; (5674 <cdcdf_acm_enable+0xe4>)
    5638:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    563a:	2000      	movs	r0, #0
}
    563c:	bc0c      	pop	{r2, r3}
    563e:	4690      	mov	r8, r2
    5640:	4699      	mov	r9, r3
    5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    5644:	200a      	movs	r0, #10
    5646:	4240      	negs	r0, r0
    5648:	e7f8      	b.n	563c <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    564a:	200a      	movs	r0, #10
    564c:	4240      	negs	r0, r0
    564e:	e7f5      	b.n	563c <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    5650:	2012      	movs	r0, #18
    5652:	4240      	negs	r0, r0
    5654:	e7f2      	b.n	563c <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    5656:	201c      	movs	r0, #28
    5658:	4240      	negs	r0, r0
    565a:	e7ef      	b.n	563c <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    565c:	2014      	movs	r0, #20
    565e:	4240      	negs	r0, r0
    5660:	e7ec      	b.n	563c <cdcdf_acm_enable+0xac>
    5662:	46c0      	nop			; (mov r8, r8)
    5664:	00006049 	.word	0x00006049
    5668:	00002f75 	.word	0x00002f75
    566c:	00006067 	.word	0x00006067
    5670:	00002ee1 	.word	0x00002ee1
    5674:	20001324 	.word	0x20001324

00005678 <cdcdf_acm_disable>:
{
    5678:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    567a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    567c:	2900      	cmp	r1, #0
    567e:	d01a      	beq.n	56b6 <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    5680:	680b      	ldr	r3, [r1, #0]
    5682:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    5684:	2b02      	cmp	r3, #2
    5686:	d018      	beq.n	56ba <cdcdf_acm_disable+0x42>
    5688:	2b0a      	cmp	r3, #10
    568a:	d124      	bne.n	56d6 <cdcdf_acm_disable+0x5e>
    568c:	2400      	movs	r4, #0
    568e:	e001      	b.n	5694 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    5690:	3401      	adds	r4, #1
    5692:	b2e4      	uxtb	r4, r4
    5694:	2c01      	cmp	r4, #1
    5696:	d812      	bhi.n	56be <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    5698:	5d2b      	ldrb	r3, [r5, r4]
    569a:	2bff      	cmp	r3, #255	; 0xff
    569c:	d0f8      	beq.n	5690 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    569e:	23ff      	movs	r3, #255	; 0xff
    56a0:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    56a2:	192b      	adds	r3, r5, r4
    56a4:	7898      	ldrb	r0, [r3, #2]
    56a6:	28ff      	cmp	r0, #255	; 0xff
    56a8:	d0f2      	beq.n	5690 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    56aa:	4b0c      	ldr	r3, [pc, #48]	; (56dc <cdcdf_acm_disable+0x64>)
    56ac:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    56ae:	192e      	adds	r6, r5, r4
    56b0:	22ff      	movs	r2, #255	; 0xff
    56b2:	70b2      	strb	r2, [r6, #2]
    56b4:	e7ec      	b.n	5690 <cdcdf_acm_disable+0x18>
    56b6:	2400      	movs	r4, #0
    56b8:	e7ec      	b.n	5694 <cdcdf_acm_disable+0x1c>
    56ba:	2400      	movs	r4, #0
    56bc:	e7ea      	b.n	5694 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    56be:	7928      	ldrb	r0, [r5, #4]
    56c0:	28ff      	cmp	r0, #255	; 0xff
    56c2:	d003      	beq.n	56cc <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    56c4:	4b05      	ldr	r3, [pc, #20]	; (56dc <cdcdf_acm_disable+0x64>)
    56c6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    56c8:	23ff      	movs	r3, #255	; 0xff
    56ca:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    56cc:	2200      	movs	r2, #0
    56ce:	4b04      	ldr	r3, [pc, #16]	; (56e0 <cdcdf_acm_disable+0x68>)
    56d0:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    56d2:	2000      	movs	r0, #0
}
    56d4:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    56d6:	200a      	movs	r0, #10
    56d8:	4240      	negs	r0, r0
    56da:	e7fb      	b.n	56d4 <cdcdf_acm_disable+0x5c>
    56dc:	00002f49 	.word	0x00002f49
    56e0:	20001324 	.word	0x20001324

000056e4 <cdcdf_acm_ctrl>:
{
    56e4:	b510      	push	{r4, lr}
	switch (ctrl) {
    56e6:	2901      	cmp	r1, #1
    56e8:	d00a      	beq.n	5700 <cdcdf_acm_ctrl+0x1c>
    56ea:	2900      	cmp	r1, #0
    56ec:	d004      	beq.n	56f8 <cdcdf_acm_ctrl+0x14>
    56ee:	2902      	cmp	r1, #2
    56f0:	d10a      	bne.n	5708 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    56f2:	201b      	movs	r0, #27
    56f4:	4240      	negs	r0, r0
}
    56f6:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    56f8:	0011      	movs	r1, r2
    56fa:	4b05      	ldr	r3, [pc, #20]	; (5710 <cdcdf_acm_ctrl+0x2c>)
    56fc:	4798      	blx	r3
    56fe:	e7fa      	b.n	56f6 <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    5700:	0011      	movs	r1, r2
    5702:	4b04      	ldr	r3, [pc, #16]	; (5714 <cdcdf_acm_ctrl+0x30>)
    5704:	4798      	blx	r3
    5706:	e7f6      	b.n	56f6 <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    5708:	200d      	movs	r0, #13
    570a:	4240      	negs	r0, r0
    570c:	e7f3      	b.n	56f6 <cdcdf_acm_ctrl+0x12>
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	00005591 	.word	0x00005591
    5714:	00005679 	.word	0x00005679

00005718 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    5718:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    571a:	4b0b      	ldr	r3, [pc, #44]	; (5748 <cdcdf_acm_init+0x30>)
    571c:	4798      	blx	r3
    571e:	2801      	cmp	r0, #1
    5720:	d80e      	bhi.n	5740 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    5722:	480a      	ldr	r0, [pc, #40]	; (574c <cdcdf_acm_init+0x34>)
    5724:	4b0a      	ldr	r3, [pc, #40]	; (5750 <cdcdf_acm_init+0x38>)
    5726:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    5728:	0003      	movs	r3, r0
    572a:	3310      	adds	r3, #16
    572c:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    572e:	3018      	adds	r0, #24
    5730:	4b08      	ldr	r3, [pc, #32]	; (5754 <cdcdf_acm_init+0x3c>)
    5732:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    5734:	4908      	ldr	r1, [pc, #32]	; (5758 <cdcdf_acm_init+0x40>)
    5736:	2001      	movs	r0, #1
    5738:	4b08      	ldr	r3, [pc, #32]	; (575c <cdcdf_acm_init+0x44>)
    573a:	4798      	blx	r3
	return ERR_NONE;
    573c:	2000      	movs	r0, #0
}
    573e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    5740:	2011      	movs	r0, #17
    5742:	4240      	negs	r0, r0
    5744:	e7fb      	b.n	573e <cdcdf_acm_init+0x26>
    5746:	46c0      	nop			; (mov r8, r8)
    5748:	00006039 	.word	0x00006039
    574c:	20001324 	.word	0x20001324
    5750:	000056e5 	.word	0x000056e5
    5754:	00005fd1 	.word	0x00005fd1
    5758:	20000064 	.word	0x20000064
    575c:	00005f39 	.word	0x00005f39

00005760 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    5760:	b570      	push	{r4, r5, r6, lr}
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    5762:	4d03      	ldr	r5, [pc, #12]	; (5770 <cdcdf_acm_stop_xfer+0x10>)
    5764:	7ce8      	ldrb	r0, [r5, #19]
    5766:	4c03      	ldr	r4, [pc, #12]	; (5774 <cdcdf_acm_stop_xfer+0x14>)
    5768:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    576a:	7d28      	ldrb	r0, [r5, #20]
    576c:	47a0      	blx	r4
}
    576e:	bd70      	pop	{r4, r5, r6, pc}
    5770:	20001324 	.word	0x20001324
    5774:	000030e9 	.word	0x000030e9

00005778 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    5778:	b510      	push	{r4, lr}
	switch (cb_type) {
    577a:	2801      	cmp	r0, #1
    577c:	d010      	beq.n	57a0 <cdcdf_acm_register_callback+0x28>
    577e:	2800      	cmp	r0, #0
    5780:	d006      	beq.n	5790 <cdcdf_acm_register_callback+0x18>
    5782:	2802      	cmp	r0, #2
    5784:	d014      	beq.n	57b0 <cdcdf_acm_register_callback+0x38>
    5786:	2803      	cmp	r0, #3
    5788:	d016      	beq.n	57b8 <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    578a:	200d      	movs	r0, #13
    578c:	4240      	negs	r0, r0
    578e:	e006      	b.n	579e <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    5790:	4b0b      	ldr	r3, [pc, #44]	; (57c0 <cdcdf_acm_register_callback+0x48>)
    5792:	7d18      	ldrb	r0, [r3, #20]
    5794:	000a      	movs	r2, r1
    5796:	2102      	movs	r1, #2
    5798:	4b0a      	ldr	r3, [pc, #40]	; (57c4 <cdcdf_acm_register_callback+0x4c>)
    579a:	4798      	blx	r3
	}
	return ERR_NONE;
    579c:	2000      	movs	r0, #0
}
    579e:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    57a0:	4b07      	ldr	r3, [pc, #28]	; (57c0 <cdcdf_acm_register_callback+0x48>)
    57a2:	7cd8      	ldrb	r0, [r3, #19]
    57a4:	000a      	movs	r2, r1
    57a6:	2102      	movs	r1, #2
    57a8:	4b06      	ldr	r3, [pc, #24]	; (57c4 <cdcdf_acm_register_callback+0x4c>)
    57aa:	4798      	blx	r3
	return ERR_NONE;
    57ac:	2000      	movs	r0, #0
		break;
    57ae:	e7f6      	b.n	579e <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    57b0:	4b03      	ldr	r3, [pc, #12]	; (57c0 <cdcdf_acm_register_callback+0x48>)
    57b2:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    57b4:	2000      	movs	r0, #0
		break;
    57b6:	e7f2      	b.n	579e <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    57b8:	4b01      	ldr	r3, [pc, #4]	; (57c0 <cdcdf_acm_register_callback+0x48>)
    57ba:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    57bc:	2000      	movs	r0, #0
		break;
    57be:	e7ee      	b.n	579e <cdcdf_acm_register_callback+0x26>
    57c0:	20001324 	.word	0x20001324
    57c4:	00003181 	.word	0x00003181

000057c8 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    57c8:	4b01      	ldr	r3, [pc, #4]	; (57d0 <cdcdf_acm_is_enabled+0x8>)
    57ca:	7d58      	ldrb	r0, [r3, #21]
}
    57cc:	4770      	bx	lr
    57ce:	46c0      	nop			; (mov r8, r8)
    57d0:	20001324 	.word	0x20001324

000057d4 <cdcdf_acm_read>:
{
    57d4:	b570      	push	{r4, r5, r6, lr}
    57d6:	0004      	movs	r4, r0
    57d8:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    57da:	4b07      	ldr	r3, [pc, #28]	; (57f8 <cdcdf_acm_read+0x24>)
    57dc:	4798      	blx	r3
    57de:	2800      	cmp	r0, #0
    57e0:	d007      	beq.n	57f2 <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    57e2:	4b06      	ldr	r3, [pc, #24]	; (57fc <cdcdf_acm_read+0x28>)
    57e4:	7d18      	ldrb	r0, [r3, #20]
    57e6:	2300      	movs	r3, #0
    57e8:	002a      	movs	r2, r5
    57ea:	0021      	movs	r1, r4
    57ec:	4c04      	ldr	r4, [pc, #16]	; (5800 <cdcdf_acm_read+0x2c>)
    57ee:	47a0      	blx	r4
}
    57f0:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    57f2:	2011      	movs	r0, #17
    57f4:	4240      	negs	r0, r0
    57f6:	e7fb      	b.n	57f0 <cdcdf_acm_read+0x1c>
    57f8:	000057c9 	.word	0x000057c9
    57fc:	20001324 	.word	0x20001324
    5800:	00005aa1 	.word	0x00005aa1

00005804 <cdcdf_acm_write>:
{
    5804:	b570      	push	{r4, r5, r6, lr}
    5806:	0004      	movs	r4, r0
    5808:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    580a:	4b07      	ldr	r3, [pc, #28]	; (5828 <cdcdf_acm_write+0x24>)
    580c:	4798      	blx	r3
    580e:	2800      	cmp	r0, #0
    5810:	d007      	beq.n	5822 <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    5812:	4b06      	ldr	r3, [pc, #24]	; (582c <cdcdf_acm_write+0x28>)
    5814:	7cd8      	ldrb	r0, [r3, #19]
    5816:	2301      	movs	r3, #1
    5818:	002a      	movs	r2, r5
    581a:	0021      	movs	r1, r4
    581c:	4c04      	ldr	r4, [pc, #16]	; (5830 <cdcdf_acm_write+0x2c>)
    581e:	47a0      	blx	r4
}
    5820:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    5822:	2011      	movs	r0, #17
    5824:	4240      	negs	r0, r0
    5826:	e7fb      	b.n	5820 <cdcdf_acm_write+0x1c>
    5828:	000057c9 	.word	0x000057c9
    582c:	20001324 	.word	0x20001324
    5830:	00005aa1 	.word	0x00005aa1

00005834 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    5834:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5836:	4b06      	ldr	r3, [pc, #24]	; (5850 <usbdc_unconfig+0x1c>)
    5838:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    583a:	e005      	b.n	5848 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    583c:	2200      	movs	r2, #0
    583e:	2101      	movs	r1, #1
    5840:	0020      	movs	r0, r4
    5842:	6863      	ldr	r3, [r4, #4]
    5844:	4798      	blx	r3
		func = func->next;
    5846:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    5848:	2c00      	cmp	r4, #0
    584a:	d1f7      	bne.n	583c <usbdc_unconfig+0x8>
	}
}
    584c:	bd10      	pop	{r4, pc}
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	20001348 	.word	0x20001348

00005854 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    5854:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    5856:	4b06      	ldr	r3, [pc, #24]	; (5870 <usbdc_sof_notify+0x1c>)
    5858:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    585a:	e000      	b.n	585e <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    585c:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    585e:	2c00      	cmp	r4, #0
    5860:	d004      	beq.n	586c <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    5862:	6863      	ldr	r3, [r4, #4]
    5864:	2b00      	cmp	r3, #0
    5866:	d0f9      	beq.n	585c <usbdc_sof_notify+0x8>
			sof->cb();
    5868:	4798      	blx	r3
    586a:	e7f7      	b.n	585c <usbdc_sof_notify+0x8>
	}
}
    586c:	bd10      	pop	{r4, pc}
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	20001348 	.word	0x20001348

00005874 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    5874:	b570      	push	{r4, r5, r6, lr}
    5876:	0006      	movs	r6, r0
    5878:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    587a:	4b07      	ldr	r3, [pc, #28]	; (5898 <usbdc_change_notify+0x24>)
    587c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    587e:	e000      	b.n	5882 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    5880:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    5882:	2c00      	cmp	r4, #0
    5884:	d006      	beq.n	5894 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    5886:	6863      	ldr	r3, [r4, #4]
    5888:	2b00      	cmp	r3, #0
    588a:	d0f9      	beq.n	5880 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    588c:	0029      	movs	r1, r5
    588e:	0030      	movs	r0, r6
    5890:	4798      	blx	r3
    5892:	e7f5      	b.n	5880 <usbdc_change_notify+0xc>
	}
}
    5894:	bd70      	pop	{r4, r5, r6, pc}
    5896:	46c0      	nop			; (mov r8, r8)
    5898:	20001348 	.word	0x20001348

0000589c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    589e:	0007      	movs	r7, r0
    58a0:	000e      	movs	r6, r1
    58a2:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    58a4:	4b0b      	ldr	r3, [pc, #44]	; (58d4 <usbdc_request_handler+0x38>)
    58a6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    58a8:	e000      	b.n	58ac <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    58aa:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    58ac:	2c00      	cmp	r4, #0
    58ae:	d00d      	beq.n	58cc <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    58b0:	6863      	ldr	r3, [r4, #4]
    58b2:	2b00      	cmp	r3, #0
    58b4:	d0f9      	beq.n	58aa <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    58b6:	002a      	movs	r2, r5
    58b8:	0031      	movs	r1, r6
    58ba:	0038      	movs	r0, r7
    58bc:	4798      	blx	r3
			if (0 == rc) {
    58be:	2800      	cmp	r0, #0
    58c0:	d006      	beq.n	58d0 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    58c2:	300a      	adds	r0, #10
    58c4:	d0f1      	beq.n	58aa <usbdc_request_handler+0xe>
				return -1;
    58c6:	2001      	movs	r0, #1
    58c8:	4240      	negs	r0, r0
    58ca:	e000      	b.n	58ce <usbdc_request_handler+0x32>
	}
	return false;
    58cc:	2000      	movs	r0, #0
}
    58ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    58d0:	2001      	movs	r0, #1
    58d2:	e7fc      	b.n	58ce <usbdc_request_handler+0x32>
    58d4:	20001348 	.word	0x20001348

000058d8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    58d8:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    58da:	4b01      	ldr	r3, [pc, #4]	; (58e0 <usbd_sof_cb+0x8>)
    58dc:	4798      	blx	r3
}
    58de:	bd10      	pop	{r4, pc}
    58e0:	00005855 	.word	0x00005855

000058e4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    58e4:	b510      	push	{r4, lr}
    58e6:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    58e8:	2201      	movs	r2, #1
    58ea:	2000      	movs	r0, #0
    58ec:	4b01      	ldr	r3, [pc, #4]	; (58f4 <usbdc_ctrl_data_end+0x10>)
    58ee:	4798      	blx	r3
	return false;
}
    58f0:	2000      	movs	r0, #0
    58f2:	bd10      	pop	{r4, pc}
    58f4:	0000589d 	.word	0x0000589d

000058f8 <usbdc_set_address>:
{
    58f8:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    58fa:	4b01      	ldr	r3, [pc, #4]	; (5900 <usbdc_set_address+0x8>)
    58fc:	4798      	blx	r3
}
    58fe:	bd10      	pop	{r4, pc}
    5900:	00002ed5 	.word	0x00002ed5

00005904 <usbdc_ctrl_status_end>:
{
    5904:	b510      	push	{r4, lr}
    5906:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    5908:	7803      	ldrb	r3, [r0, #0]
    590a:	2b00      	cmp	r3, #0
    590c:	d112      	bne.n	5934 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    590e:	7843      	ldrb	r3, [r0, #1]
    5910:	2b05      	cmp	r3, #5
    5912:	d012      	beq.n	593a <usbdc_ctrl_status_end+0x36>
    5914:	2b09      	cmp	r3, #9
    5916:	d10d      	bne.n	5934 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    5918:	7882      	ldrb	r2, [r0, #2]
    591a:	4b10      	ldr	r3, [pc, #64]	; (595c <usbdc_ctrl_status_end+0x58>)
    591c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    591e:	7882      	ldrb	r2, [r0, #2]
    5920:	78c3      	ldrb	r3, [r0, #3]
    5922:	021b      	lsls	r3, r3, #8
    5924:	4313      	orrs	r3, r2
    5926:	d106      	bne.n	5936 <usbdc_ctrl_status_end+0x32>
    5928:	2103      	movs	r1, #3
    592a:	4b0c      	ldr	r3, [pc, #48]	; (595c <usbdc_ctrl_status_end+0x58>)
    592c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    592e:	2001      	movs	r0, #1
    5930:	4b0b      	ldr	r3, [pc, #44]	; (5960 <usbdc_ctrl_status_end+0x5c>)
    5932:	4798      	blx	r3
}
    5934:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    5936:	2104      	movs	r1, #4
    5938:	e7f7      	b.n	592a <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    593a:	7880      	ldrb	r0, [r0, #2]
    593c:	4b09      	ldr	r3, [pc, #36]	; (5964 <usbdc_ctrl_status_end+0x60>)
    593e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5940:	78a2      	ldrb	r2, [r4, #2]
    5942:	78e3      	ldrb	r3, [r4, #3]
    5944:	021b      	lsls	r3, r3, #8
    5946:	4313      	orrs	r3, r2
    5948:	d006      	beq.n	5958 <usbdc_ctrl_status_end+0x54>
    594a:	2103      	movs	r1, #3
    594c:	4b03      	ldr	r3, [pc, #12]	; (595c <usbdc_ctrl_status_end+0x58>)
    594e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5950:	2001      	movs	r0, #1
    5952:	4b03      	ldr	r3, [pc, #12]	; (5960 <usbdc_ctrl_status_end+0x5c>)
    5954:	4798      	blx	r3
		break;
    5956:	e7ed      	b.n	5934 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5958:	2102      	movs	r1, #2
    595a:	e7f7      	b.n	594c <usbdc_ctrl_status_end+0x48>
    595c:	20001348 	.word	0x20001348
    5960:	00005875 	.word	0x00005875
    5964:	000058f9 	.word	0x000058f9

00005968 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    5968:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    596a:	2900      	cmp	r1, #0
    596c:	d003      	beq.n	5976 <usbdc_cb_ctl_done+0xe>
    596e:	2901      	cmp	r1, #1
    5970:	d006      	beq.n	5980 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    5972:	2000      	movs	r0, #0
    5974:	e003      	b.n	597e <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    5976:	0010      	movs	r0, r2
    5978:	4b03      	ldr	r3, [pc, #12]	; (5988 <usbdc_cb_ctl_done+0x20>)
    597a:	4798      	blx	r3
	return false;
    597c:	2000      	movs	r0, #0
}
    597e:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    5980:	0010      	movs	r0, r2
    5982:	4b02      	ldr	r3, [pc, #8]	; (598c <usbdc_cb_ctl_done+0x24>)
    5984:	4798      	blx	r3
    5986:	e7fa      	b.n	597e <usbdc_cb_ctl_done+0x16>
    5988:	00005905 	.word	0x00005905
    598c:	000058e5 	.word	0x000058e5

00005990 <usbdc_set_config>:
{
    5990:	b530      	push	{r4, r5, lr}
    5992:	b083      	sub	sp, #12
    5994:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    5996:	d014      	beq.n	59c2 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    5998:	4b1e      	ldr	r3, [pc, #120]	; (5a14 <usbdc_set_config+0x84>)
    599a:	681b      	ldr	r3, [r3, #0]
    599c:	6818      	ldr	r0, [r3, #0]
    599e:	6859      	ldr	r1, [r3, #4]
    59a0:	4b1d      	ldr	r3, [pc, #116]	; (5a18 <usbdc_set_config+0x88>)
    59a2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    59a4:	2800      	cmp	r0, #0
    59a6:	d032      	beq.n	5a0e <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    59a8:	7881      	ldrb	r1, [r0, #2]
    59aa:	78c3      	ldrb	r3, [r0, #3]
    59ac:	021b      	lsls	r3, r3, #8
    59ae:	18c9      	adds	r1, r1, r3
    59b0:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    59b2:	1841      	adds	r1, r0, r1
    59b4:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    59b6:	2204      	movs	r2, #4
    59b8:	4b18      	ldr	r3, [pc, #96]	; (5a1c <usbdc_set_config+0x8c>)
    59ba:	4798      	blx	r3
    59bc:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    59be:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    59c0:	e00d      	b.n	59de <usbdc_set_config+0x4e>
		usbdc_unconfig();
    59c2:	4b17      	ldr	r3, [pc, #92]	; (5a20 <usbdc_set_config+0x90>)
    59c4:	4798      	blx	r3
		return true;
    59c6:	2001      	movs	r0, #1
    59c8:	e01f      	b.n	5a0a <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    59ca:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    59cc:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    59ce:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    59d0:	18c0      	adds	r0, r0, r3
    59d2:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    59d4:	2204      	movs	r2, #4
    59d6:	9901      	ldr	r1, [sp, #4]
    59d8:	4b10      	ldr	r3, [pc, #64]	; (5a1c <usbdc_set_config+0x8c>)
    59da:	4798      	blx	r3
    59dc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    59de:	9b00      	ldr	r3, [sp, #0]
    59e0:	2b00      	cmp	r3, #0
    59e2:	d011      	beq.n	5a08 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    59e4:	789d      	ldrb	r5, [r3, #2]
    59e6:	42ac      	cmp	r4, r5
    59e8:	d0f0      	beq.n	59cc <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    59ea:	4b0a      	ldr	r3, [pc, #40]	; (5a14 <usbdc_set_config+0x84>)
    59ec:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    59ee:	2c00      	cmp	r4, #0
    59f0:	d0eb      	beq.n	59ca <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    59f2:	466a      	mov	r2, sp
    59f4:	2100      	movs	r1, #0
    59f6:	0020      	movs	r0, r4
    59f8:	6863      	ldr	r3, [r4, #4]
    59fa:	4798      	blx	r3
    59fc:	2800      	cmp	r0, #0
    59fe:	d001      	beq.n	5a04 <usbdc_set_config+0x74>
					func = func->next;
    5a00:	6824      	ldr	r4, [r4, #0]
    5a02:	e7f4      	b.n	59ee <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    5a04:	002c      	movs	r4, r5
    5a06:	e7e1      	b.n	59cc <usbdc_set_config+0x3c>
	return true;
    5a08:	2001      	movs	r0, #1
}
    5a0a:	b003      	add	sp, #12
    5a0c:	bd30      	pop	{r4, r5, pc}
		return false;
    5a0e:	2000      	movs	r0, #0
    5a10:	e7fb      	b.n	5a0a <usbdc_set_config+0x7a>
    5a12:	46c0      	nop			; (mov r8, r8)
    5a14:	20001348 	.word	0x20001348
    5a18:	0000608d 	.word	0x0000608d
    5a1c:	00006049 	.word	0x00006049
    5a20:	00005835 	.word	0x00005835

00005a24 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    5a24:	b510      	push	{r4, lr}
	usbdc_unconfig();
    5a26:	4b0d      	ldr	r3, [pc, #52]	; (5a5c <usbdc_reset+0x38>)
    5a28:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    5a2a:	4c0d      	ldr	r4, [pc, #52]	; (5a60 <usbdc_reset+0x3c>)
    5a2c:	2302      	movs	r3, #2
    5a2e:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    5a30:	2300      	movs	r3, #0
    5a32:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    5a34:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    5a36:	2000      	movs	r0, #0
    5a38:	4b0a      	ldr	r3, [pc, #40]	; (5a64 <usbdc_reset+0x40>)
    5a3a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5a3c:	7f20      	ldrb	r0, [r4, #28]
    5a3e:	4b0a      	ldr	r3, [pc, #40]	; (5a68 <usbdc_reset+0x44>)
    5a40:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    5a42:	4a0a      	ldr	r2, [pc, #40]	; (5a6c <usbdc_reset+0x48>)
    5a44:	2100      	movs	r1, #0
    5a46:	2000      	movs	r0, #0
    5a48:	4c09      	ldr	r4, [pc, #36]	; (5a70 <usbdc_reset+0x4c>)
    5a4a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5a4c:	4a09      	ldr	r2, [pc, #36]	; (5a74 <usbdc_reset+0x50>)
    5a4e:	2102      	movs	r1, #2
    5a50:	2000      	movs	r0, #0
    5a52:	47a0      	blx	r4
	usb_d_ep_enable(0);
    5a54:	2000      	movs	r0, #0
    5a56:	4b08      	ldr	r3, [pc, #32]	; (5a78 <usbdc_reset+0x54>)
    5a58:	4798      	blx	r3
}
    5a5a:	bd10      	pop	{r4, pc}
    5a5c:	00005835 	.word	0x00005835
    5a60:	20001348 	.word	0x20001348
    5a64:	00002f49 	.word	0x00002f49
    5a68:	00002f35 	.word	0x00002f35
    5a6c:	00005eed 	.word	0x00005eed
    5a70:	00003181 	.word	0x00003181
    5a74:	00005969 	.word	0x00005969
    5a78:	00002f75 	.word	0x00002f75

00005a7c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5a7c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    5a7e:	2800      	cmp	r0, #0
    5a80:	d002      	beq.n	5a88 <usbd_event_cb+0xc>
    5a82:	2801      	cmp	r0, #1
    5a84:	d004      	beq.n	5a90 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    5a86:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    5a88:	2000      	movs	r0, #0
    5a8a:	4b03      	ldr	r3, [pc, #12]	; (5a98 <usbd_event_cb+0x1c>)
    5a8c:	4798      	blx	r3
		break;
    5a8e:	e7fa      	b.n	5a86 <usbd_event_cb+0xa>
		usbdc_reset();
    5a90:	4b02      	ldr	r3, [pc, #8]	; (5a9c <usbd_event_cb+0x20>)
    5a92:	4798      	blx	r3
}
    5a94:	e7f7      	b.n	5a86 <usbd_event_cb+0xa>
    5a96:	46c0      	nop			; (mov r8, r8)
    5a98:	00005875 	.word	0x00005875
    5a9c:	00005a25 	.word	0x00005a25

00005aa0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    5aa0:	b510      	push	{r4, lr}
    5aa2:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    5aa4:	ac01      	add	r4, sp, #4
    5aa6:	9101      	str	r1, [sp, #4]
    5aa8:	9202      	str	r2, [sp, #8]
    5aaa:	7220      	strb	r0, [r4, #8]
    5aac:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    5aae:	0020      	movs	r0, r4
    5ab0:	4b01      	ldr	r3, [pc, #4]	; (5ab8 <usbdc_xfer+0x18>)
    5ab2:	4798      	blx	r3
}
    5ab4:	b004      	add	sp, #16
    5ab6:	bd10      	pop	{r4, pc}
    5ab8:	00002fc5 	.word	0x00002fc5

00005abc <usbdc_clear_ftr_req>:
{
    5abc:	b510      	push	{r4, lr}
    5abe:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5ac0:	780a      	ldrb	r2, [r1, #0]
    5ac2:	231f      	movs	r3, #31
    5ac4:	4013      	ands	r3, r2
    5ac6:	2b02      	cmp	r3, #2
    5ac8:	d112      	bne.n	5af0 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    5aca:	798a      	ldrb	r2, [r1, #6]
    5acc:	79cb      	ldrb	r3, [r1, #7]
    5ace:	021b      	lsls	r3, r3, #8
    5ad0:	4313      	orrs	r3, r2
    5ad2:	d001      	beq.n	5ad8 <usbdc_clear_ftr_req+0x1c>
			return false;
    5ad4:	2000      	movs	r0, #0
    5ad6:	e00c      	b.n	5af2 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    5ad8:	7908      	ldrb	r0, [r1, #4]
    5ada:	2100      	movs	r1, #0
    5adc:	4b05      	ldr	r3, [pc, #20]	; (5af4 <usbdc_clear_ftr_req+0x38>)
    5ade:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5ae0:	2301      	movs	r3, #1
    5ae2:	2200      	movs	r2, #0
    5ae4:	2100      	movs	r1, #0
    5ae6:	0020      	movs	r0, r4
    5ae8:	4c03      	ldr	r4, [pc, #12]	; (5af8 <usbdc_clear_ftr_req+0x3c>)
    5aea:	47a0      	blx	r4
		return true;
    5aec:	2001      	movs	r0, #1
    5aee:	e000      	b.n	5af2 <usbdc_clear_ftr_req+0x36>
		return false;
    5af0:	2000      	movs	r0, #0
}
    5af2:	bd10      	pop	{r4, pc}
    5af4:	00003119 	.word	0x00003119
    5af8:	00005aa1 	.word	0x00005aa1

00005afc <usbdc_set_ftr_req>:
{
    5afc:	b510      	push	{r4, lr}
    5afe:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5b00:	780a      	ldrb	r2, [r1, #0]
    5b02:	231f      	movs	r3, #31
    5b04:	4013      	ands	r3, r2
    5b06:	2b02      	cmp	r3, #2
    5b08:	d112      	bne.n	5b30 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    5b0a:	798a      	ldrb	r2, [r1, #6]
    5b0c:	79cb      	ldrb	r3, [r1, #7]
    5b0e:	021b      	lsls	r3, r3, #8
    5b10:	4313      	orrs	r3, r2
    5b12:	d001      	beq.n	5b18 <usbdc_set_ftr_req+0x1c>
			return false;
    5b14:	2000      	movs	r0, #0
    5b16:	e00c      	b.n	5b32 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    5b18:	7908      	ldrb	r0, [r1, #4]
    5b1a:	2101      	movs	r1, #1
    5b1c:	4b05      	ldr	r3, [pc, #20]	; (5b34 <usbdc_set_ftr_req+0x38>)
    5b1e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5b20:	2301      	movs	r3, #1
    5b22:	2200      	movs	r2, #0
    5b24:	2100      	movs	r1, #0
    5b26:	0020      	movs	r0, r4
    5b28:	4c03      	ldr	r4, [pc, #12]	; (5b38 <usbdc_set_ftr_req+0x3c>)
    5b2a:	47a0      	blx	r4
		return true;
    5b2c:	2001      	movs	r0, #1
    5b2e:	e000      	b.n	5b32 <usbdc_set_ftr_req+0x36>
		return false;
    5b30:	2000      	movs	r0, #0
}
    5b32:	bd10      	pop	{r4, pc}
    5b34:	00003119 	.word	0x00003119
    5b38:	00005aa1 	.word	0x00005aa1

00005b3c <usbdc_set_interface>:
{
    5b3c:	b570      	push	{r4, r5, r6, lr}
    5b3e:	b082      	sub	sp, #8
    5b40:	0005      	movs	r5, r0
    5b42:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5b44:	4b2a      	ldr	r3, [pc, #168]	; (5bf0 <usbdc_set_interface+0xb4>)
    5b46:	681a      	ldr	r2, [r3, #0]
    5b48:	6810      	ldr	r0, [r2, #0]
    5b4a:	6851      	ldr	r1, [r2, #4]
    5b4c:	7eda      	ldrb	r2, [r3, #27]
    5b4e:	4b29      	ldr	r3, [pc, #164]	; (5bf4 <usbdc_set_interface+0xb8>)
    5b50:	4798      	blx	r3
	if (NULL == ifc) {
    5b52:	2800      	cmp	r0, #0
    5b54:	d045      	beq.n	5be2 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    5b56:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    5b58:	7881      	ldrb	r1, [r0, #2]
    5b5a:	78c3      	ldrb	r3, [r0, #3]
    5b5c:	021b      	lsls	r3, r3, #8
    5b5e:	18c9      	adds	r1, r1, r3
    5b60:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    5b62:	1841      	adds	r1, r0, r1
    5b64:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5b66:	2204      	movs	r2, #4
    5b68:	4b23      	ldr	r3, [pc, #140]	; (5bf8 <usbdc_set_interface+0xbc>)
    5b6a:	4798      	blx	r3
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d10b      	bne.n	5b88 <usbdc_set_interface+0x4c>
		return false;
    5b70:	2000      	movs	r0, #0
    5b72:	e039      	b.n	5be8 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    5b74:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    5b76:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    5b78:	18c0      	adds	r0, r0, r3
    5b7a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5b7c:	2204      	movs	r2, #4
    5b7e:	9901      	ldr	r1, [sp, #4]
    5b80:	4b1d      	ldr	r3, [pc, #116]	; (5bf8 <usbdc_set_interface+0xbc>)
    5b82:	4798      	blx	r3
		if (NULL == ifc) {
    5b84:	2800      	cmp	r0, #0
    5b86:	d02e      	beq.n	5be6 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5b88:	7883      	ldrb	r3, [r0, #2]
    5b8a:	42a3      	cmp	r3, r4
    5b8c:	d1f2      	bne.n	5b74 <usbdc_set_interface+0x38>
    5b8e:	78c3      	ldrb	r3, [r0, #3]
    5b90:	42ab      	cmp	r3, r5
    5b92:	d1ef      	bne.n	5b74 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    5b94:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    5b96:	4b16      	ldr	r3, [pc, #88]	; (5bf0 <usbdc_set_interface+0xb4>)
    5b98:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    5b9a:	2e00      	cmp	r6, #0
    5b9c:	d01f      	beq.n	5bde <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    5b9e:	466a      	mov	r2, sp
    5ba0:	2101      	movs	r1, #1
    5ba2:	0030      	movs	r0, r6
    5ba4:	6873      	ldr	r3, [r6, #4]
    5ba6:	4798      	blx	r3
    5ba8:	2800      	cmp	r0, #0
    5baa:	d001      	beq.n	5bb0 <usbdc_set_interface+0x74>
			func = func->next;
    5bac:	6836      	ldr	r6, [r6, #0]
    5bae:	e7f4      	b.n	5b9a <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    5bb0:	6873      	ldr	r3, [r6, #4]
    5bb2:	466a      	mov	r2, sp
    5bb4:	2100      	movs	r1, #0
    5bb6:	0030      	movs	r0, r6
    5bb8:	4798      	blx	r3
    5bba:	2800      	cmp	r0, #0
    5bbc:	d116      	bne.n	5bec <usbdc_set_interface+0xb0>
			if (alt_set) {
    5bbe:	2d00      	cmp	r5, #0
    5bc0:	d005      	beq.n	5bce <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    5bc2:	2201      	movs	r2, #1
    5bc4:	40a2      	lsls	r2, r4
    5bc6:	490a      	ldr	r1, [pc, #40]	; (5bf0 <usbdc_set_interface+0xb4>)
    5bc8:	7f4b      	ldrb	r3, [r1, #29]
    5bca:	4313      	orrs	r3, r2
    5bcc:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    5bce:	2300      	movs	r3, #0
    5bd0:	2200      	movs	r2, #0
    5bd2:	2100      	movs	r1, #0
    5bd4:	2000      	movs	r0, #0
    5bd6:	4c09      	ldr	r4, [pc, #36]	; (5bfc <usbdc_set_interface+0xc0>)
    5bd8:	47a0      	blx	r4
			return true;
    5bda:	2001      	movs	r0, #1
    5bdc:	e004      	b.n	5be8 <usbdc_set_interface+0xac>
	return false;
    5bde:	2000      	movs	r0, #0
    5be0:	e002      	b.n	5be8 <usbdc_set_interface+0xac>
		return false;
    5be2:	2000      	movs	r0, #0
    5be4:	e000      	b.n	5be8 <usbdc_set_interface+0xac>
			return false;
    5be6:	2000      	movs	r0, #0
}
    5be8:	b002      	add	sp, #8
    5bea:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    5bec:	2000      	movs	r0, #0
    5bee:	e7fb      	b.n	5be8 <usbdc_set_interface+0xac>
    5bf0:	20001348 	.word	0x20001348
    5bf4:	0000608d 	.word	0x0000608d
    5bf8:	00006049 	.word	0x00006049
    5bfc:	00005aa1 	.word	0x00005aa1

00005c00 <usbdc_set_req>:
{
    5c00:	b510      	push	{r4, lr}
    5c02:	0004      	movs	r4, r0
	switch (req->bRequest) {
    5c04:	784b      	ldrb	r3, [r1, #1]
    5c06:	2b0b      	cmp	r3, #11
    5c08:	d82d      	bhi.n	5c66 <usbdc_set_req+0x66>
    5c0a:	009b      	lsls	r3, r3, #2
    5c0c:	4a17      	ldr	r2, [pc, #92]	; (5c6c <usbdc_set_req+0x6c>)
    5c0e:	58d3      	ldr	r3, [r2, r3]
    5c10:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5c12:	2301      	movs	r3, #1
    5c14:	2200      	movs	r2, #0
    5c16:	2100      	movs	r1, #0
    5c18:	4c15      	ldr	r4, [pc, #84]	; (5c70 <usbdc_set_req+0x70>)
    5c1a:	47a0      	blx	r4
    5c1c:	4243      	negs	r3, r0
    5c1e:	4158      	adcs	r0, r3
    5c20:	b2c0      	uxtb	r0, r0
}
    5c22:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    5c24:	7888      	ldrb	r0, [r1, #2]
    5c26:	4b13      	ldr	r3, [pc, #76]	; (5c74 <usbdc_set_req+0x74>)
    5c28:	4798      	blx	r3
    5c2a:	2800      	cmp	r0, #0
    5c2c:	d0f9      	beq.n	5c22 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5c2e:	2301      	movs	r3, #1
    5c30:	2200      	movs	r2, #0
    5c32:	2100      	movs	r1, #0
    5c34:	0020      	movs	r0, r4
    5c36:	4c0e      	ldr	r4, [pc, #56]	; (5c70 <usbdc_set_req+0x70>)
    5c38:	47a0      	blx	r4
    5c3a:	4243      	negs	r3, r0
    5c3c:	4158      	adcs	r0, r3
    5c3e:	b2c0      	uxtb	r0, r0
    5c40:	e7ef      	b.n	5c22 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    5c42:	4b0d      	ldr	r3, [pc, #52]	; (5c78 <usbdc_set_req+0x78>)
    5c44:	4798      	blx	r3
    5c46:	e7ec      	b.n	5c22 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    5c48:	4b0c      	ldr	r3, [pc, #48]	; (5c7c <usbdc_set_req+0x7c>)
    5c4a:	4798      	blx	r3
    5c4c:	e7e9      	b.n	5c22 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    5c4e:	790a      	ldrb	r2, [r1, #4]
    5c50:	794b      	ldrb	r3, [r1, #5]
    5c52:	021b      	lsls	r3, r3, #8
    5c54:	4313      	orrs	r3, r2
    5c56:	788a      	ldrb	r2, [r1, #2]
    5c58:	78c8      	ldrb	r0, [r1, #3]
    5c5a:	0200      	lsls	r0, r0, #8
    5c5c:	4310      	orrs	r0, r2
    5c5e:	0019      	movs	r1, r3
    5c60:	4b07      	ldr	r3, [pc, #28]	; (5c80 <usbdc_set_req+0x80>)
    5c62:	4798      	blx	r3
    5c64:	e7dd      	b.n	5c22 <usbdc_set_req+0x22>
		return false;
    5c66:	2000      	movs	r0, #0
    5c68:	e7db      	b.n	5c22 <usbdc_set_req+0x22>
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	0001109c 	.word	0x0001109c
    5c70:	00005aa1 	.word	0x00005aa1
    5c74:	00005991 	.word	0x00005991
    5c78:	00005abd 	.word	0x00005abd
    5c7c:	00005afd 	.word	0x00005afd
    5c80:	00005b3d 	.word	0x00005b3d

00005c84 <usbdc_get_dev_desc>:
{
    5c84:	b570      	push	{r4, r5, r6, lr}
    5c86:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5c88:	798b      	ldrb	r3, [r1, #6]
    5c8a:	79cc      	ldrb	r4, [r1, #7]
    5c8c:	0224      	lsls	r4, r4, #8
    5c8e:	431c      	orrs	r4, r3
	if (length > 0x12) {
    5c90:	2c12      	cmp	r4, #18
    5c92:	d900      	bls.n	5c96 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    5c94:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    5c96:	4b0b      	ldr	r3, [pc, #44]	; (5cc4 <usbdc_get_dev_desc+0x40>)
    5c98:	681b      	ldr	r3, [r3, #0]
    5c9a:	6818      	ldr	r0, [r3, #0]
    5c9c:	6859      	ldr	r1, [r3, #4]
    5c9e:	2201      	movs	r2, #1
    5ca0:	4b09      	ldr	r3, [pc, #36]	; (5cc8 <usbdc_get_dev_desc+0x44>)
    5ca2:	4798      	blx	r3
	if (!dev_desc) {
    5ca4:	2800      	cmp	r0, #0
    5ca6:	d00b      	beq.n	5cc0 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    5ca8:	2300      	movs	r3, #0
    5caa:	0022      	movs	r2, r4
    5cac:	0001      	movs	r1, r0
    5cae:	0028      	movs	r0, r5
    5cb0:	4c06      	ldr	r4, [pc, #24]	; (5ccc <usbdc_get_dev_desc+0x48>)
    5cb2:	47a0      	blx	r4
    5cb4:	2800      	cmp	r0, #0
    5cb6:	d101      	bne.n	5cbc <usbdc_get_dev_desc+0x38>
	return true;
    5cb8:	2001      	movs	r0, #1
}
    5cba:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5cbc:	2000      	movs	r0, #0
    5cbe:	e7fc      	b.n	5cba <usbdc_get_dev_desc+0x36>
		return false;
    5cc0:	2000      	movs	r0, #0
    5cc2:	e7fa      	b.n	5cba <usbdc_get_dev_desc+0x36>
    5cc4:	20001348 	.word	0x20001348
    5cc8:	00006049 	.word	0x00006049
    5ccc:	00005aa1 	.word	0x00005aa1

00005cd0 <usbdc_get_cfg_desc>:
{
    5cd0:	b570      	push	{r4, r5, r6, lr}
    5cd2:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5cd4:	798b      	ldrb	r3, [r1, #6]
    5cd6:	79ce      	ldrb	r6, [r1, #7]
    5cd8:	0236      	lsls	r6, r6, #8
    5cda:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    5cdc:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5cde:	4b13      	ldr	r3, [pc, #76]	; (5d2c <usbdc_get_cfg_desc+0x5c>)
    5ce0:	7f1c      	ldrb	r4, [r3, #28]
    5ce2:	3c01      	subs	r4, #1
    5ce4:	4034      	ands	r4, r6
    5ce6:	4261      	negs	r1, r4
    5ce8:	414c      	adcs	r4, r1
    5cea:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    5cec:	681b      	ldr	r3, [r3, #0]
    5cee:	6818      	ldr	r0, [r3, #0]
    5cf0:	6859      	ldr	r1, [r3, #4]
    5cf2:	3201      	adds	r2, #1
    5cf4:	b2d2      	uxtb	r2, r2
    5cf6:	4b0e      	ldr	r3, [pc, #56]	; (5d30 <usbdc_get_cfg_desc+0x60>)
    5cf8:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5cfa:	2800      	cmp	r0, #0
    5cfc:	d013      	beq.n	5d26 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    5cfe:	7882      	ldrb	r2, [r0, #2]
    5d00:	78c3      	ldrb	r3, [r0, #3]
    5d02:	021b      	lsls	r3, r3, #8
    5d04:	18d2      	adds	r2, r2, r3
    5d06:	b292      	uxth	r2, r2
	if (length <= total_len) {
    5d08:	4296      	cmp	r6, r2
    5d0a:	d801      	bhi.n	5d10 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    5d0c:	0032      	movs	r2, r6
		need_zlp = false;
    5d0e:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    5d10:	0023      	movs	r3, r4
    5d12:	0001      	movs	r1, r0
    5d14:	0028      	movs	r0, r5
    5d16:	4c07      	ldr	r4, [pc, #28]	; (5d34 <usbdc_get_cfg_desc+0x64>)
    5d18:	47a0      	blx	r4
    5d1a:	2800      	cmp	r0, #0
    5d1c:	d101      	bne.n	5d22 <usbdc_get_cfg_desc+0x52>
	return true;
    5d1e:	2001      	movs	r0, #1
}
    5d20:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5d22:	2000      	movs	r0, #0
    5d24:	e7fc      	b.n	5d20 <usbdc_get_cfg_desc+0x50>
		return false;
    5d26:	2000      	movs	r0, #0
    5d28:	e7fa      	b.n	5d20 <usbdc_get_cfg_desc+0x50>
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	20001348 	.word	0x20001348
    5d30:	0000608d 	.word	0x0000608d
    5d34:	00005aa1 	.word	0x00005aa1

00005d38 <usbdc_get_str_desc>:
{
    5d38:	b570      	push	{r4, r5, r6, lr}
    5d3a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5d3c:	798b      	ldrb	r3, [r1, #6]
    5d3e:	79ce      	ldrb	r6, [r1, #7]
    5d40:	0236      	lsls	r6, r6, #8
    5d42:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    5d44:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5d46:	4b10      	ldr	r3, [pc, #64]	; (5d88 <usbdc_get_str_desc+0x50>)
    5d48:	7f1c      	ldrb	r4, [r3, #28]
    5d4a:	3c01      	subs	r4, #1
    5d4c:	4034      	ands	r4, r6
    5d4e:	4261      	negs	r1, r4
    5d50:	414c      	adcs	r4, r1
    5d52:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    5d54:	681b      	ldr	r3, [r3, #0]
    5d56:	6818      	ldr	r0, [r3, #0]
    5d58:	6859      	ldr	r1, [r3, #4]
    5d5a:	4b0c      	ldr	r3, [pc, #48]	; (5d8c <usbdc_get_str_desc+0x54>)
    5d5c:	4798      	blx	r3
	if (NULL == str_desc) {
    5d5e:	2800      	cmp	r0, #0
    5d60:	d00f      	beq.n	5d82 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    5d62:	7802      	ldrb	r2, [r0, #0]
    5d64:	4296      	cmp	r6, r2
    5d66:	d801      	bhi.n	5d6c <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    5d68:	0032      	movs	r2, r6
		need_zlp = false;
    5d6a:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    5d6c:	0023      	movs	r3, r4
    5d6e:	0001      	movs	r1, r0
    5d70:	0028      	movs	r0, r5
    5d72:	4c07      	ldr	r4, [pc, #28]	; (5d90 <usbdc_get_str_desc+0x58>)
    5d74:	47a0      	blx	r4
    5d76:	2800      	cmp	r0, #0
    5d78:	d101      	bne.n	5d7e <usbdc_get_str_desc+0x46>
	return true;
    5d7a:	2001      	movs	r0, #1
}
    5d7c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5d7e:	2000      	movs	r0, #0
    5d80:	e7fc      	b.n	5d7c <usbdc_get_str_desc+0x44>
		return false;
    5d82:	2000      	movs	r0, #0
    5d84:	e7fa      	b.n	5d7c <usbdc_get_str_desc+0x44>
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	20001348 	.word	0x20001348
    5d8c:	000060d1 	.word	0x000060d1
    5d90:	00005aa1 	.word	0x00005aa1

00005d94 <usbdc_get_desc_req>:
{
    5d94:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    5d96:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    5d98:	2b02      	cmp	r3, #2
    5d9a:	d008      	beq.n	5dae <usbdc_get_desc_req+0x1a>
    5d9c:	2b03      	cmp	r3, #3
    5d9e:	d009      	beq.n	5db4 <usbdc_get_desc_req+0x20>
    5da0:	2b01      	cmp	r3, #1
    5da2:	d001      	beq.n	5da8 <usbdc_get_desc_req+0x14>
	return false;
    5da4:	2000      	movs	r0, #0
    5da6:	e001      	b.n	5dac <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    5da8:	4b04      	ldr	r3, [pc, #16]	; (5dbc <usbdc_get_desc_req+0x28>)
    5daa:	4798      	blx	r3
}
    5dac:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    5dae:	4b04      	ldr	r3, [pc, #16]	; (5dc0 <usbdc_get_desc_req+0x2c>)
    5db0:	4798      	blx	r3
    5db2:	e7fb      	b.n	5dac <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    5db4:	4b03      	ldr	r3, [pc, #12]	; (5dc4 <usbdc_get_desc_req+0x30>)
    5db6:	4798      	blx	r3
    5db8:	e7f8      	b.n	5dac <usbdc_get_desc_req+0x18>
    5dba:	46c0      	nop			; (mov r8, r8)
    5dbc:	00005c85 	.word	0x00005c85
    5dc0:	00005cd1 	.word	0x00005cd1
    5dc4:	00005d39 	.word	0x00005d39

00005dc8 <usbdc_get_status_req>:
{
    5dc8:	b530      	push	{r4, r5, lr}
    5dca:	b083      	sub	sp, #12
    5dcc:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5dce:	780a      	ldrb	r2, [r1, #0]
    5dd0:	231f      	movs	r3, #31
    5dd2:	4013      	ands	r3, r2
    5dd4:	b2da      	uxtb	r2, r3
    5dd6:	2a01      	cmp	r2, #1
    5dd8:	d903      	bls.n	5de2 <usbdc_get_status_req+0x1a>
    5dda:	2b02      	cmp	r3, #2
    5ddc:	d012      	beq.n	5e04 <usbdc_get_status_req+0x3c>
		return false;
    5dde:	2000      	movs	r0, #0
    5de0:	e00e      	b.n	5e00 <usbdc_get_status_req+0x38>
		st = 0;
    5de2:	2300      	movs	r3, #0
    5de4:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    5de6:	4d0d      	ldr	r5, [pc, #52]	; (5e1c <usbdc_get_status_req+0x54>)
    5de8:	2202      	movs	r2, #2
    5dea:	a901      	add	r1, sp, #4
    5dec:	6968      	ldr	r0, [r5, #20]
    5dee:	4b0c      	ldr	r3, [pc, #48]	; (5e20 <usbdc_get_status_req+0x58>)
    5df0:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    5df2:	6969      	ldr	r1, [r5, #20]
    5df4:	2300      	movs	r3, #0
    5df6:	2202      	movs	r2, #2
    5df8:	0020      	movs	r0, r4
    5dfa:	4c0a      	ldr	r4, [pc, #40]	; (5e24 <usbdc_get_status_req+0x5c>)
    5dfc:	47a0      	blx	r4
	return true;
    5dfe:	2001      	movs	r0, #1
}
    5e00:	b003      	add	sp, #12
    5e02:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    5e04:	7908      	ldrb	r0, [r1, #4]
    5e06:	2102      	movs	r1, #2
    5e08:	4b07      	ldr	r3, [pc, #28]	; (5e28 <usbdc_get_status_req+0x60>)
    5e0a:	4798      	blx	r3
		if (st < 0) {
    5e0c:	2800      	cmp	r0, #0
    5e0e:	db03      	blt.n	5e18 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    5e10:	2301      	movs	r3, #1
    5e12:	4018      	ands	r0, r3
    5e14:	9001      	str	r0, [sp, #4]
		break;
    5e16:	e7e6      	b.n	5de6 <usbdc_get_status_req+0x1e>
			return false;
    5e18:	2000      	movs	r0, #0
    5e1a:	e7f1      	b.n	5e00 <usbdc_get_status_req+0x38>
    5e1c:	20001348 	.word	0x20001348
    5e20:	0000bf15 	.word	0x0000bf15
    5e24:	00005aa1 	.word	0x00005aa1
    5e28:	00003119 	.word	0x00003119

00005e2c <usbdc_get_interface>:
{
    5e2c:	b570      	push	{r4, r5, r6, lr}
    5e2e:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5e30:	4b16      	ldr	r3, [pc, #88]	; (5e8c <usbdc_get_interface+0x60>)
    5e32:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    5e34:	7f5a      	ldrb	r2, [r3, #29]
    5e36:	7901      	ldrb	r1, [r0, #4]
    5e38:	7943      	ldrb	r3, [r0, #5]
    5e3a:	021b      	lsls	r3, r3, #8
    5e3c:	430b      	orrs	r3, r1
    5e3e:	411a      	asrs	r2, r3
    5e40:	07d3      	lsls	r3, r2, #31
    5e42:	d50a      	bpl.n	5e5a <usbdc_get_interface+0x2e>
	while (NULL != func) {
    5e44:	2c00      	cmp	r4, #0
    5e46:	d01f      	beq.n	5e88 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    5e48:	002a      	movs	r2, r5
    5e4a:	2102      	movs	r1, #2
    5e4c:	0020      	movs	r0, r4
    5e4e:	6863      	ldr	r3, [r4, #4]
    5e50:	4798      	blx	r3
    5e52:	2800      	cmp	r0, #0
    5e54:	da0d      	bge.n	5e72 <usbdc_get_interface+0x46>
			func = func->next;
    5e56:	6824      	ldr	r4, [r4, #0]
    5e58:	e7f4      	b.n	5e44 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    5e5a:	4b0c      	ldr	r3, [pc, #48]	; (5e8c <usbdc_get_interface+0x60>)
    5e5c:	2200      	movs	r2, #0
    5e5e:	6959      	ldr	r1, [r3, #20]
    5e60:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5e62:	6959      	ldr	r1, [r3, #20]
    5e64:	2300      	movs	r3, #0
    5e66:	3201      	adds	r2, #1
    5e68:	2000      	movs	r0, #0
    5e6a:	4c09      	ldr	r4, [pc, #36]	; (5e90 <usbdc_get_interface+0x64>)
    5e6c:	47a0      	blx	r4
		return true;
    5e6e:	2001      	movs	r0, #1
    5e70:	e00b      	b.n	5e8a <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    5e72:	4b06      	ldr	r3, [pc, #24]	; (5e8c <usbdc_get_interface+0x60>)
    5e74:	695a      	ldr	r2, [r3, #20]
    5e76:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    5e78:	6959      	ldr	r1, [r3, #20]
    5e7a:	2300      	movs	r3, #0
    5e7c:	2201      	movs	r2, #1
    5e7e:	2000      	movs	r0, #0
    5e80:	4c03      	ldr	r4, [pc, #12]	; (5e90 <usbdc_get_interface+0x64>)
    5e82:	47a0      	blx	r4
			return true;
    5e84:	2001      	movs	r0, #1
    5e86:	e000      	b.n	5e8a <usbdc_get_interface+0x5e>
	return false;
    5e88:	2000      	movs	r0, #0
}
    5e8a:	bd70      	pop	{r4, r5, r6, pc}
    5e8c:	20001348 	.word	0x20001348
    5e90:	00005aa1 	.word	0x00005aa1

00005e94 <usbdc_get_req>:
{
    5e94:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    5e96:	784b      	ldrb	r3, [r1, #1]
    5e98:	2b06      	cmp	r3, #6
    5e9a:	d00d      	beq.n	5eb8 <usbdc_get_req+0x24>
    5e9c:	d907      	bls.n	5eae <usbdc_get_req+0x1a>
    5e9e:	2b08      	cmp	r3, #8
    5ea0:	d00d      	beq.n	5ebe <usbdc_get_req+0x2a>
    5ea2:	2b0a      	cmp	r3, #10
    5ea4:	d116      	bne.n	5ed4 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    5ea6:	0008      	movs	r0, r1
    5ea8:	4b0b      	ldr	r3, [pc, #44]	; (5ed8 <usbdc_get_req+0x44>)
    5eaa:	4798      	blx	r3
    5eac:	e006      	b.n	5ebc <usbdc_get_req+0x28>
	switch (req->bRequest) {
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d110      	bne.n	5ed4 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    5eb2:	4b0a      	ldr	r3, [pc, #40]	; (5edc <usbdc_get_req+0x48>)
    5eb4:	4798      	blx	r3
    5eb6:	e001      	b.n	5ebc <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    5eb8:	4b09      	ldr	r3, [pc, #36]	; (5ee0 <usbdc_get_req+0x4c>)
    5eba:	4798      	blx	r3
}
    5ebc:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    5ebe:	4b09      	ldr	r3, [pc, #36]	; (5ee4 <usbdc_get_req+0x50>)
    5ec0:	7eda      	ldrb	r2, [r3, #27]
    5ec2:	6959      	ldr	r1, [r3, #20]
    5ec4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    5ec6:	6959      	ldr	r1, [r3, #20]
    5ec8:	2300      	movs	r3, #0
    5eca:	2201      	movs	r2, #1
    5ecc:	4c06      	ldr	r4, [pc, #24]	; (5ee8 <usbdc_get_req+0x54>)
    5ece:	47a0      	blx	r4
		return true;
    5ed0:	2001      	movs	r0, #1
    5ed2:	e7f3      	b.n	5ebc <usbdc_get_req+0x28>
		return false;
    5ed4:	2000      	movs	r0, #0
    5ed6:	e7f1      	b.n	5ebc <usbdc_get_req+0x28>
    5ed8:	00005e2d 	.word	0x00005e2d
    5edc:	00005dc9 	.word	0x00005dc9
    5ee0:	00005d95 	.word	0x00005d95
    5ee4:	20001348 	.word	0x20001348
    5ee8:	00005aa1 	.word	0x00005aa1

00005eec <usbdc_cb_ctl_req>:
{
    5eec:	b570      	push	{r4, r5, r6, lr}
    5eee:	0005      	movs	r5, r0
    5ef0:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    5ef2:	2200      	movs	r2, #0
    5ef4:	4b0d      	ldr	r3, [pc, #52]	; (5f2c <usbdc_cb_ctl_req+0x40>)
    5ef6:	4798      	blx	r3
    5ef8:	1c43      	adds	r3, r0, #1
    5efa:	d014      	beq.n	5f26 <usbdc_cb_ctl_req+0x3a>
    5efc:	2801      	cmp	r0, #1
    5efe:	d013      	beq.n	5f28 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    5f00:	7823      	ldrb	r3, [r4, #0]
    5f02:	221f      	movs	r2, #31
    5f04:	4393      	bics	r3, r2
    5f06:	d004      	beq.n	5f12 <usbdc_cb_ctl_req+0x26>
    5f08:	b2db      	uxtb	r3, r3
    5f0a:	2b80      	cmp	r3, #128	; 0x80
    5f0c:	d006      	beq.n	5f1c <usbdc_cb_ctl_req+0x30>
		return false;
    5f0e:	2000      	movs	r0, #0
    5f10:	e00a      	b.n	5f28 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    5f12:	0021      	movs	r1, r4
    5f14:	0028      	movs	r0, r5
    5f16:	4b06      	ldr	r3, [pc, #24]	; (5f30 <usbdc_cb_ctl_req+0x44>)
    5f18:	4798      	blx	r3
    5f1a:	e005      	b.n	5f28 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    5f1c:	0021      	movs	r1, r4
    5f1e:	0028      	movs	r0, r5
    5f20:	4b04      	ldr	r3, [pc, #16]	; (5f34 <usbdc_cb_ctl_req+0x48>)
    5f22:	4798      	blx	r3
    5f24:	e000      	b.n	5f28 <usbdc_cb_ctl_req+0x3c>
		return false;
    5f26:	2000      	movs	r0, #0
}
    5f28:	bd70      	pop	{r4, r5, r6, pc}
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	0000589d 	.word	0x0000589d
    5f30:	00005c01 	.word	0x00005c01
    5f34:	00005e95 	.word	0x00005e95

00005f38 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    5f38:	b510      	push	{r4, lr}
	switch (type) {
    5f3a:	2801      	cmp	r0, #1
    5f3c:	d009      	beq.n	5f52 <usbdc_register_handler+0x1a>
    5f3e:	2800      	cmp	r0, #0
    5f40:	d002      	beq.n	5f48 <usbdc_register_handler+0x10>
    5f42:	2802      	cmp	r0, #2
    5f44:	d00a      	beq.n	5f5c <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    5f46:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    5f48:	4807      	ldr	r0, [pc, #28]	; (5f68 <usbdc_register_handler+0x30>)
    5f4a:	3004      	adds	r0, #4
    5f4c:	4b07      	ldr	r3, [pc, #28]	; (5f6c <usbdc_register_handler+0x34>)
    5f4e:	4798      	blx	r3
		break;
    5f50:	e7f9      	b.n	5f46 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    5f52:	4805      	ldr	r0, [pc, #20]	; (5f68 <usbdc_register_handler+0x30>)
    5f54:	3008      	adds	r0, #8
    5f56:	4b05      	ldr	r3, [pc, #20]	; (5f6c <usbdc_register_handler+0x34>)
    5f58:	4798      	blx	r3
		break;
    5f5a:	e7f4      	b.n	5f46 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    5f5c:	4802      	ldr	r0, [pc, #8]	; (5f68 <usbdc_register_handler+0x30>)
    5f5e:	300c      	adds	r0, #12
    5f60:	4b02      	ldr	r3, [pc, #8]	; (5f6c <usbdc_register_handler+0x34>)
    5f62:	4798      	blx	r3
}
    5f64:	e7ef      	b.n	5f46 <usbdc_register_handler+0xe>
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	20001348 	.word	0x20001348
    5f6c:	00003225 	.word	0x00003225

00005f70 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    5f70:	b570      	push	{r4, r5, r6, lr}
    5f72:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    5f74:	1e43      	subs	r3, r0, #1
    5f76:	4198      	sbcs	r0, r3
    5f78:	b2c0      	uxtb	r0, r0
    5f7a:	4a0c      	ldr	r2, [pc, #48]	; (5fac <usbdc_init+0x3c>)
    5f7c:	490c      	ldr	r1, [pc, #48]	; (5fb0 <usbdc_init+0x40>)
    5f7e:	4b0d      	ldr	r3, [pc, #52]	; (5fb4 <usbdc_init+0x44>)
    5f80:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    5f82:	4b0d      	ldr	r3, [pc, #52]	; (5fb8 <usbdc_init+0x48>)
    5f84:	4798      	blx	r3
	if (rc < 0) {
    5f86:	2800      	cmp	r0, #0
    5f88:	db0e      	blt.n	5fa8 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    5f8a:	4d0c      	ldr	r5, [pc, #48]	; (5fbc <usbdc_init+0x4c>)
    5f8c:	2220      	movs	r2, #32
    5f8e:	2100      	movs	r1, #0
    5f90:	0028      	movs	r0, r5
    5f92:	4b0b      	ldr	r3, [pc, #44]	; (5fc0 <usbdc_init+0x50>)
    5f94:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    5f96:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    5f98:	490a      	ldr	r1, [pc, #40]	; (5fc4 <usbdc_init+0x54>)
    5f9a:	2000      	movs	r0, #0
    5f9c:	4c0a      	ldr	r4, [pc, #40]	; (5fc8 <usbdc_init+0x58>)
    5f9e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    5fa0:	490a      	ldr	r1, [pc, #40]	; (5fcc <usbdc_init+0x5c>)
    5fa2:	2001      	movs	r0, #1
    5fa4:	47a0      	blx	r4

	return 0;
    5fa6:	2000      	movs	r0, #0
}
    5fa8:	bd70      	pop	{r4, r5, r6, pc}
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	00000355 	.word	0x00000355
    5fb0:	000110cc 	.word	0x000110cc
    5fb4:	000031d1 	.word	0x000031d1
    5fb8:	00002e45 	.word	0x00002e45
    5fbc:	20001348 	.word	0x20001348
    5fc0:	0000bf99 	.word	0x0000bf99
    5fc4:	000058d9 	.word	0x000058d9
    5fc8:	00002eb1 	.word	0x00002eb1
    5fcc:	00005a7d 	.word	0x00005a7d

00005fd0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    5fd0:	b510      	push	{r4, lr}
    5fd2:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    5fd4:	4802      	ldr	r0, [pc, #8]	; (5fe0 <usbdc_register_function+0x10>)
    5fd6:	3010      	adds	r0, #16
    5fd8:	4b02      	ldr	r3, [pc, #8]	; (5fe4 <usbdc_register_function+0x14>)
    5fda:	4798      	blx	r3
}
    5fdc:	bd10      	pop	{r4, pc}
    5fde:	46c0      	nop			; (mov r8, r8)
    5fe0:	20001348 	.word	0x20001348
    5fe4:	00003225 	.word	0x00003225

00005fe8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    5fe8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    5fea:	4b0b      	ldr	r3, [pc, #44]	; (6018 <usbdc_start+0x30>)
    5fec:	7e9b      	ldrb	r3, [r3, #26]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d10c      	bne.n	600c <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    5ff2:	2800      	cmp	r0, #0
    5ff4:	d00d      	beq.n	6012 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    5ff6:	4b08      	ldr	r3, [pc, #32]	; (6018 <usbdc_start+0x30>)
    5ff8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    5ffa:	6802      	ldr	r2, [r0, #0]
    5ffc:	79d2      	ldrb	r2, [r2, #7]
    5ffe:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    6000:	2201      	movs	r2, #1
    6002:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    6004:	4b05      	ldr	r3, [pc, #20]	; (601c <usbdc_start+0x34>)
    6006:	4798      	blx	r3
	return ERR_NONE;
    6008:	2000      	movs	r0, #0
}
    600a:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    600c:	2004      	movs	r0, #4
    600e:	4240      	negs	r0, r0
    6010:	e7fb      	b.n	600a <usbdc_start+0x22>
		return ERR_BAD_DATA;
    6012:	2009      	movs	r0, #9
    6014:	4240      	negs	r0, r0
    6016:	e7f8      	b.n	600a <usbdc_start+0x22>
    6018:	20001348 	.word	0x20001348
    601c:	00002ebd 	.word	0x00002ebd

00006020 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    6020:	b510      	push	{r4, lr}
	usb_d_attach();
    6022:	4b01      	ldr	r3, [pc, #4]	; (6028 <usbdc_attach+0x8>)
    6024:	4798      	blx	r3
}
    6026:	bd10      	pop	{r4, pc}
    6028:	00002ec9 	.word	0x00002ec9

0000602c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    602c:	4b01      	ldr	r3, [pc, #4]	; (6034 <usbdc_get_ctrl_buffer+0x8>)
    602e:	6958      	ldr	r0, [r3, #20]
}
    6030:	4770      	bx	lr
    6032:	46c0      	nop			; (mov r8, r8)
    6034:	20001348 	.word	0x20001348

00006038 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    6038:	4b02      	ldr	r3, [pc, #8]	; (6044 <usbdc_get_state+0xc>)
    603a:	7e98      	ldrb	r0, [r3, #26]
    603c:	06c3      	lsls	r3, r0, #27
    603e:	d500      	bpl.n	6042 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    6040:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    6042:	4770      	bx	lr
    6044:	20001348 	.word	0x20001348

00006048 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    6048:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    604a:	4288      	cmp	r0, r1
    604c:	d207      	bcs.n	605e <usb_find_desc+0x16>
	return desc[0];
    604e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6050:	2b01      	cmp	r3, #1
    6052:	d906      	bls.n	6062 <usb_find_desc+0x1a>
	return desc[1];
    6054:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    6056:	4294      	cmp	r4, r2
    6058:	d002      	beq.n	6060 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    605a:	18c0      	adds	r0, r0, r3
    605c:	e7f5      	b.n	604a <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    605e:	2000      	movs	r0, #0
}
    6060:	bd10      	pop	{r4, pc}
		_desc_len_check();
    6062:	2000      	movs	r0, #0
    6064:	e7fc      	b.n	6060 <usb_find_desc+0x18>

00006066 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    6066:	4288      	cmp	r0, r1
    6068:	d209      	bcs.n	607e <usb_find_ep_desc+0x18>
	return desc[0];
    606a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    606c:	2b01      	cmp	r3, #1
    606e:	d908      	bls.n	6082 <usb_find_ep_desc+0x1c>
	return desc[1];
    6070:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    6072:	2a04      	cmp	r2, #4
    6074:	d007      	beq.n	6086 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6076:	2a05      	cmp	r2, #5
    6078:	d002      	beq.n	6080 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    607a:	18c0      	adds	r0, r0, r3
    607c:	e7f3      	b.n	6066 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    607e:	2000      	movs	r0, #0
}
    6080:	4770      	bx	lr
		_desc_len_check();
    6082:	2000      	movs	r0, #0
    6084:	e7fc      	b.n	6080 <usb_find_ep_desc+0x1a>
	return NULL;
    6086:	2000      	movs	r0, #0
    6088:	e7fa      	b.n	6080 <usb_find_ep_desc+0x1a>
	...

0000608c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    608c:	b570      	push	{r4, r5, r6, lr}
    608e:	000c      	movs	r4, r1
    6090:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    6092:	2202      	movs	r2, #2
    6094:	4b0d      	ldr	r3, [pc, #52]	; (60cc <usb_find_cfg_desc+0x40>)
    6096:	4798      	blx	r3
	if (!desc) {
    6098:	2800      	cmp	r0, #0
    609a:	d012      	beq.n	60c2 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    609c:	42a0      	cmp	r0, r4
    609e:	d20f      	bcs.n	60c0 <usb_find_cfg_desc+0x34>
	return desc[0];
    60a0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    60a2:	2b01      	cmp	r3, #1
    60a4:	d90e      	bls.n	60c4 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    60a6:	7843      	ldrb	r3, [r0, #1]
    60a8:	2b02      	cmp	r3, #2
    60aa:	d10d      	bne.n	60c8 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    60ac:	7943      	ldrb	r3, [r0, #5]
    60ae:	42ab      	cmp	r3, r5
    60b0:	d007      	beq.n	60c2 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    60b2:	7883      	ldrb	r3, [r0, #2]
    60b4:	78c2      	ldrb	r2, [r0, #3]
    60b6:	0212      	lsls	r2, r2, #8
    60b8:	189b      	adds	r3, r3, r2
    60ba:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    60bc:	18c0      	adds	r0, r0, r3
    60be:	e7ed      	b.n	609c <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    60c0:	2000      	movs	r0, #0
}
    60c2:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    60c4:	2000      	movs	r0, #0
    60c6:	e7fc      	b.n	60c2 <usb_find_cfg_desc+0x36>
	return NULL;
    60c8:	2000      	movs	r0, #0
    60ca:	e7fa      	b.n	60c2 <usb_find_cfg_desc+0x36>
    60cc:	00006049 	.word	0x00006049

000060d0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    60d0:	b570      	push	{r4, r5, r6, lr}
    60d2:	000d      	movs	r5, r1
    60d4:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    60d6:	2400      	movs	r4, #0
    60d8:	42a8      	cmp	r0, r5
    60da:	d20e      	bcs.n	60fa <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    60dc:	2203      	movs	r2, #3
    60de:	0029      	movs	r1, r5
    60e0:	4b08      	ldr	r3, [pc, #32]	; (6104 <usb_find_str_desc+0x34>)
    60e2:	4798      	blx	r3
		if (desc) {
    60e4:	2800      	cmp	r0, #0
    60e6:	d009      	beq.n	60fc <usb_find_str_desc+0x2c>
	return desc[0];
    60e8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    60ea:	2b01      	cmp	r3, #1
    60ec:	d907      	bls.n	60fe <usb_find_str_desc+0x2e>
			if (i == str_index) {
    60ee:	42b4      	cmp	r4, r6
    60f0:	d004      	beq.n	60fc <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    60f2:	3401      	adds	r4, #1
    60f4:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    60f6:	18c0      	adds	r0, r0, r3
    60f8:	e7ee      	b.n	60d8 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    60fa:	2000      	movs	r0, #0
}
    60fc:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    60fe:	2000      	movs	r0, #0
    6100:	e7fc      	b.n	60fc <usb_find_str_desc+0x2c>
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	00006049 	.word	0x00006049

00006108 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    6108:	2000      	movs	r0, #0
    610a:	4770      	bx	lr

0000610c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    610c:	4770      	bx	lr
	...

00006110 <_ZL10USBTimeoutPK10timer_task>:
//#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
	ptrCDCClass->timeout=true;
    6110:	4b03      	ldr	r3, [pc, #12]	; (6120 <_ZL10USBTimeoutPK10timer_task+0x10>)
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	2201      	movs	r2, #1
    6116:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    6118:	2200      	movs	r2, #0
    611a:	741a      	strb	r2, [r3, #16]
	
}
    611c:	4770      	bx	lr
    611e:	46c0      	nop			; (mov r8, r8)
    6120:	20001368 	.word	0x20001368

00006124 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
    6124:	4b03      	ldr	r3, [pc, #12]	; (6134 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	2201      	movs	r2, #1
    612a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    612c:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    612e:	741a      	strb	r2, [r3, #16]


	return false;
}
    6130:	2000      	movs	r0, #0
    6132:	4770      	bx	lr
    6134:	20001368 	.word	0x20001368

00006138 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    6138:	4b03      	ldr	r3, [pc, #12]	; (6148 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
    613a:	681b      	ldr	r3, [r3, #0]
    613c:	2201      	movs	r2, #1
    613e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    6140:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    6142:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
    6144:	2000      	movs	r0, #0
    6146:	4770      	bx	lr
    6148:	20001368 	.word	0x20001368

0000614c <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    614c:	b530      	push	{r4, r5, lr}
    614e:	b083      	sub	sp, #12
    6150:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
    6152:	6983      	ldr	r3, [r0, #24]
    6154:	3301      	adds	r3, #1
    6156:	d002      	beq.n	615e <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
    6158:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
    615a:	b003      	add	sp, #12
    615c:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
    615e:	6803      	ldr	r3, [r0, #0]
    6160:	69db      	ldr	r3, [r3, #28]
    6162:	466a      	mov	r2, sp
    6164:	1dd5      	adds	r5, r2, #7
    6166:	2201      	movs	r2, #1
    6168:	0029      	movs	r1, r5
    616a:	4798      	blx	r3
    616c:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
    616e:	782b      	ldrb	r3, [r5, #0]
    6170:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
    6172:	69a0      	ldr	r0, [r4, #24]
    6174:	e7f1      	b.n	615a <_ZN9CDC_Class4peekEv+0xe>

00006176 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
    6176:	b500      	push	{lr}
    6178:	b083      	sub	sp, #12
    617a:	466b      	mov	r3, sp
    617c:	71d9      	strb	r1, [r3, #7]
	if (connected){
    617e:	7c03      	ldrb	r3, [r0, #16]
    6180:	2b00      	cmp	r3, #0
    6182:	d00a      	beq.n	619a <_ZN9CDC_Class5writeEh+0x24>
		while(!txReady);
    6184:	7d03      	ldrb	r3, [r0, #20]
    6186:	2b00      	cmp	r3, #0
    6188:	d0fc      	beq.n	6184 <_ZN9CDC_Class5writeEh+0xe>
		return writeData(&c, 1);
    618a:	6803      	ldr	r3, [r0, #0]
    618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    618e:	2201      	movs	r2, #1
    6190:	4669      	mov	r1, sp
    6192:	3107      	adds	r1, #7
    6194:	4798      	blx	r3
	}else{
		return 0;
	}
		
}
    6196:	b003      	add	sp, #12
    6198:	bd00      	pop	{pc}
		return 0;
    619a:	2000      	movs	r0, #0
    619c:	e7fb      	b.n	6196 <_ZN9CDC_Class5writeEh+0x20>

0000619e <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
    619e:	7d43      	ldrb	r3, [r0, #21]
    61a0:	2b00      	cmp	r3, #0
    61a2:	d002      	beq.n	61aa <_ZN9CDC_Class9availableEv+0xc>
    61a4:	7d00      	ldrb	r0, [r0, #20]
    61a6:	b2c0      	uxtb	r0, r0
	{
		
	return false;
	}
	
}
    61a8:	4770      	bx	lr
	if (rxReady && txReady)
    61aa:	2000      	movs	r0, #0
    61ac:	e7fc      	b.n	61a8 <_ZN9CDC_Class9availableEv+0xa>
	...

000061b0 <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
    61b0:	b510      	push	{r4, lr}
    61b2:	0004      	movs	r4, r0
    61b4:	4b03      	ldr	r3, [pc, #12]	; (61c4 <_ZN9CDC_ClassD1Ev+0x14>)
    61b6:	3308      	adds	r3, #8
    61b8:	6003      	str	r3, [r0, #0]
    61ba:	3010      	adds	r0, #16
    61bc:	4b02      	ldr	r3, [pc, #8]	; (61c8 <_ZN9CDC_ClassD1Ev+0x18>)
    61be:	4798      	blx	r3
} //~CDC_Class
    61c0:	0020      	movs	r0, r4
    61c2:	bd10      	pop	{r4, pc}
    61c4:	00011108 	.word	0x00011108
    61c8:	00006869 	.word	0x00006869

000061cc <_ZL10cb_state_c22usb_cdc_control_signal>:
{
    61cc:	b510      	push	{r4, lr}
    61ce:	b082      	sub	sp, #8
    61d0:	1c03      	adds	r3, r0, #0
    61d2:	aa01      	add	r2, sp, #4
    61d4:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    61d6:	07db      	lsls	r3, r3, #31
    61d8:	d402      	bmi.n	61e0 <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
    61da:	2000      	movs	r0, #0
    61dc:	b002      	add	sp, #8
    61de:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    61e0:	4906      	ldr	r1, [pc, #24]	; (61fc <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
    61e2:	2000      	movs	r0, #0
    61e4:	4c06      	ldr	r4, [pc, #24]	; (6200 <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
    61e6:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    61e8:	4906      	ldr	r1, [pc, #24]	; (6204 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    61ea:	2001      	movs	r0, #1
    61ec:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
    61ee:	4b06      	ldr	r3, [pc, #24]	; (6208 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	2201      	movs	r2, #1
    61f4:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    61f6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    61f8:	741a      	strb	r2, [r3, #16]
    61fa:	e7ee      	b.n	61da <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
    61fc:	00006125 	.word	0x00006125
    6200:	00005779 	.word	0x00005779
    6204:	00006139 	.word	0x00006139
    6208:	20001368 	.word	0x20001368

0000620c <_ZN9CDC_Class4readEv>:
{
    620c:	b510      	push	{r4, lr}
    620e:	b082      	sub	sp, #8
    6210:	0004      	movs	r4, r0
	rxReady=false;
    6212:	2300      	movs	r3, #0
    6214:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
    6216:	2101      	movs	r1, #1
    6218:	466b      	mov	r3, sp
    621a:	1dd8      	adds	r0, r3, #7
    621c:	4b04      	ldr	r3, [pc, #16]	; (6230 <_ZN9CDC_Class4readEv+0x24>)
    621e:	4798      	blx	r3
	while(!rxReady);
    6220:	7d63      	ldrb	r3, [r4, #21]
    6222:	2b00      	cmp	r3, #0
    6224:	d0fc      	beq.n	6220 <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
    6226:	466b      	mov	r3, sp
    6228:	79d8      	ldrb	r0, [r3, #7]
}
    622a:	b002      	add	sp, #8
    622c:	bd10      	pop	{r4, pc}
    622e:	46c0      	nop			; (mov r8, r8)
    6230:	000057d5 	.word	0x000057d5

00006234 <_ZN9CDC_Class8readDataEPvl>:
{
    6234:	b570      	push	{r4, r5, r6, lr}
    6236:	0004      	movs	r4, r0
    6238:	000e      	movs	r6, r1
    623a:	0015      	movs	r5, r2
	if (connected)
    623c:	7c03      	ldrb	r3, [r0, #16]
    623e:	2b00      	cmp	r3, #0
    6240:	d102      	bne.n	6248 <_ZN9CDC_Class8readDataEPvl+0x14>
		r=0;
    6242:	2500      	movs	r5, #0
}
    6244:	0028      	movs	r0, r5
    6246:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    6248:	0093      	lsls	r3, r2, #2
    624a:	189b      	adds	r3, r3, r2
    624c:	005a      	lsls	r2, r3, #1
    624e:	490f      	ldr	r1, [pc, #60]	; (628c <_ZN9CDC_Class8readDataEPvl+0x58>)
    6250:	480f      	ldr	r0, [pc, #60]	; (6290 <_ZN9CDC_Class8readDataEPvl+0x5c>)
    6252:	4b10      	ldr	r3, [pc, #64]	; (6294 <_ZN9CDC_Class8readDataEPvl+0x60>)
    6254:	4798      	blx	r3
		rxReady=false;
    6256:	2300      	movs	r3, #0
    6258:	7563      	strb	r3, [r4, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    625a:	0029      	movs	r1, r5
    625c:	0030      	movs	r0, r6
    625e:	4b0e      	ldr	r3, [pc, #56]	; (6298 <_ZN9CDC_Class8readDataEPvl+0x64>)
    6260:	4798      	blx	r3
    6262:	b2c5      	uxtb	r5, r0
    6264:	e002      	b.n	626c <_ZN9CDC_Class8readDataEPvl+0x38>
		while((!rxReady)&&(connected));
    6266:	2300      	movs	r3, #0
    6268:	2b00      	cmp	r3, #0
    626a:	d005      	beq.n	6278 <_ZN9CDC_Class8readDataEPvl+0x44>
    626c:	7d63      	ldrb	r3, [r4, #21]
    626e:	2b00      	cmp	r3, #0
    6270:	d1f9      	bne.n	6266 <_ZN9CDC_Class8readDataEPvl+0x32>
    6272:	7c23      	ldrb	r3, [r4, #16]
    6274:	b2db      	uxtb	r3, r3
    6276:	e7f7      	b.n	6268 <_ZN9CDC_Class8readDataEPvl+0x34>
		usbTerminalTimer.Stop();
    6278:	4c05      	ldr	r4, [pc, #20]	; (6290 <_ZN9CDC_Class8readDataEPvl+0x5c>)
    627a:	0020      	movs	r0, r4
    627c:	4b07      	ldr	r3, [pc, #28]	; (629c <_ZN9CDC_Class8readDataEPvl+0x68>)
    627e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    6280:	4902      	ldr	r1, [pc, #8]	; (628c <_ZN9CDC_Class8readDataEPvl+0x58>)
    6282:	0020      	movs	r0, r4
    6284:	4b06      	ldr	r3, [pc, #24]	; (62a0 <_ZN9CDC_Class8readDataEPvl+0x6c>)
    6286:	4798      	blx	r3
    6288:	e7dc      	b.n	6244 <_ZN9CDC_Class8readDataEPvl+0x10>
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	00006111 	.word	0x00006111
    6290:	200013d4 	.word	0x200013d4
    6294:	00006a45 	.word	0x00006a45
    6298:	000057d5 	.word	0x000057d5
    629c:	000069b5 	.word	0x000069b5
    62a0:	00006a8d 	.word	0x00006a8d

000062a4 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
    62a4:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    62a6:	301c      	adds	r0, #28
    62a8:	2140      	movs	r1, #64	; 0x40
    62aa:	4b01      	ldr	r3, [pc, #4]	; (62b0 <_ZN9CDC_Class5flushEv+0xc>)
    62ac:	4798      	blx	r3
}
    62ae:	bd10      	pop	{r4, pc}
    62b0:	00005805 	.word	0x00005805

000062b4 <_ZN9CDC_Class9writeDataEPKvl>:
{
    62b4:	b570      	push	{r4, r5, r6, lr}
    62b6:	0004      	movs	r4, r0
    62b8:	000e      	movs	r6, r1
    62ba:	0015      	movs	r5, r2
	if (connected)
    62bc:	7c03      	ldrb	r3, [r0, #16]
    62be:	2b00      	cmp	r3, #0
    62c0:	d102      	bne.n	62c8 <_ZN9CDC_Class9writeDataEPKvl+0x14>
		return 0;
    62c2:	2500      	movs	r5, #0
}
    62c4:	0028      	movs	r0, r5
    62c6:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    62c8:	0093      	lsls	r3, r2, #2
    62ca:	189b      	adds	r3, r3, r2
    62cc:	005a      	lsls	r2, r3, #1
    62ce:	490f      	ldr	r1, [pc, #60]	; (630c <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    62d0:	480f      	ldr	r0, [pc, #60]	; (6310 <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    62d2:	4b10      	ldr	r3, [pc, #64]	; (6314 <_ZN9CDC_Class9writeDataEPKvl+0x60>)
    62d4:	4798      	blx	r3
		txReady=false;
    62d6:	2300      	movs	r3, #0
    62d8:	7523      	strb	r3, [r4, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    62da:	0029      	movs	r1, r5
    62dc:	0030      	movs	r0, r6
    62de:	4b0e      	ldr	r3, [pc, #56]	; (6318 <_ZN9CDC_Class9writeDataEPKvl+0x64>)
    62e0:	4798      	blx	r3
    62e2:	0005      	movs	r5, r0
    62e4:	e002      	b.n	62ec <_ZN9CDC_Class9writeDataEPKvl+0x38>
		while((!txReady)&&(connected)){
    62e6:	2300      	movs	r3, #0
    62e8:	2b00      	cmp	r3, #0
    62ea:	d005      	beq.n	62f8 <_ZN9CDC_Class9writeDataEPKvl+0x44>
    62ec:	7d23      	ldrb	r3, [r4, #20]
    62ee:	2b00      	cmp	r3, #0
    62f0:	d1f9      	bne.n	62e6 <_ZN9CDC_Class9writeDataEPKvl+0x32>
    62f2:	7c23      	ldrb	r3, [r4, #16]
    62f4:	b2db      	uxtb	r3, r3
    62f6:	e7f7      	b.n	62e8 <_ZN9CDC_Class9writeDataEPKvl+0x34>
			usbTerminalTimer.Stop();
    62f8:	4c05      	ldr	r4, [pc, #20]	; (6310 <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    62fa:	0020      	movs	r0, r4
    62fc:	4b07      	ldr	r3, [pc, #28]	; (631c <_ZN9CDC_Class9writeDataEPKvl+0x68>)
    62fe:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    6300:	4902      	ldr	r1, [pc, #8]	; (630c <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    6302:	0020      	movs	r0, r4
    6304:	4b06      	ldr	r3, [pc, #24]	; (6320 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    6306:	4798      	blx	r3
		return r;
    6308:	e7dc      	b.n	62c4 <_ZN9CDC_Class9writeDataEPKvl+0x10>
    630a:	46c0      	nop			; (mov r8, r8)
    630c:	00006111 	.word	0x00006111
    6310:	200013d4 	.word	0x200013d4
    6314:	00006a45 	.word	0x00006a45
    6318:	00005805 	.word	0x00005805
    631c:	000069b5 	.word	0x000069b5
    6320:	00006a8d 	.word	0x00006a8d

00006324 <_ZN9CDC_Class5writeEPKhj>:
{
    6324:	b570      	push	{r4, r5, r6, lr}
    6326:	0004      	movs	r4, r0
    6328:	000e      	movs	r6, r1
    632a:	0015      	movs	r5, r2
	txReady=false;
    632c:	2300      	movs	r3, #0
    632e:	7503      	strb	r3, [r0, #20]
 	if (connected){
    6330:	7c03      	ldrb	r3, [r0, #16]
    6332:	2b00      	cmp	r3, #0
    6334:	d102      	bne.n	633c <_ZN9CDC_Class5writeEPKhj+0x18>
 		r=0;
    6336:	2500      	movs	r5, #0
}
    6338:	0028      	movs	r0, r5
    633a:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    633c:	0093      	lsls	r3, r2, #2
    633e:	189b      	adds	r3, r3, r2
    6340:	005a      	lsls	r2, r3, #1
    6342:	490e      	ldr	r1, [pc, #56]	; (637c <_ZN9CDC_Class5writeEPKhj+0x58>)
    6344:	480e      	ldr	r0, [pc, #56]	; (6380 <_ZN9CDC_Class5writeEPKhj+0x5c>)
    6346:	4b0f      	ldr	r3, [pc, #60]	; (6384 <_ZN9CDC_Class5writeEPKhj+0x60>)
    6348:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    634a:	0029      	movs	r1, r5
    634c:	0030      	movs	r0, r6
    634e:	4b0e      	ldr	r3, [pc, #56]	; (6388 <_ZN9CDC_Class5writeEPKhj+0x64>)
    6350:	4798      	blx	r3
    6352:	0005      	movs	r5, r0
    6354:	e002      	b.n	635c <_ZN9CDC_Class5writeEPKhj+0x38>
		while((!txReady)&&(connected));
    6356:	2300      	movs	r3, #0
    6358:	2b00      	cmp	r3, #0
    635a:	d005      	beq.n	6368 <_ZN9CDC_Class5writeEPKhj+0x44>
    635c:	7d23      	ldrb	r3, [r4, #20]
    635e:	2b00      	cmp	r3, #0
    6360:	d1f9      	bne.n	6356 <_ZN9CDC_Class5writeEPKhj+0x32>
    6362:	7c23      	ldrb	r3, [r4, #16]
    6364:	b2db      	uxtb	r3, r3
    6366:	e7f7      	b.n	6358 <_ZN9CDC_Class5writeEPKhj+0x34>
		usbTerminalTimer.Stop();
    6368:	4c05      	ldr	r4, [pc, #20]	; (6380 <_ZN9CDC_Class5writeEPKhj+0x5c>)
    636a:	0020      	movs	r0, r4
    636c:	4b07      	ldr	r3, [pc, #28]	; (638c <_ZN9CDC_Class5writeEPKhj+0x68>)
    636e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    6370:	4902      	ldr	r1, [pc, #8]	; (637c <_ZN9CDC_Class5writeEPKhj+0x58>)
    6372:	0020      	movs	r0, r4
    6374:	4b06      	ldr	r3, [pc, #24]	; (6390 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    6376:	4798      	blx	r3
    6378:	e7de      	b.n	6338 <_ZN9CDC_Class5writeEPKhj+0x14>
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	00006111 	.word	0x00006111
    6380:	200013d4 	.word	0x200013d4
    6384:	00006a45 	.word	0x00006a45
    6388:	00005805 	.word	0x00005805
    638c:	000069b5 	.word	0x000069b5
    6390:	00006a8d 	.word	0x00006a8d

00006394 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
    6394:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
    6396:	4b01      	ldr	r3, [pc, #4]	; (639c <_ZN9CDC_Class5clearEv+0x8>)
    6398:	4798      	blx	r3
}
    639a:	bd10      	pop	{r4, pc}
    639c:	00005761 	.word	0x00005761

000063a0 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
    63a0:	b510      	push	{r4, lr}
    63a2:	0004      	movs	r4, r0
    Print() : write_error(0) {}
    63a4:	2300      	movs	r3, #0
    63a6:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    63a8:	4b08      	ldr	r3, [pc, #32]	; (63cc <_ZN9CDC_ClassC1Ev+0x2c>)
    63aa:	6003      	str	r3, [r0, #0]
    63ac:	23fa      	movs	r3, #250	; 0xfa
    63ae:	009b      	lsls	r3, r3, #2
    63b0:	6083      	str	r3, [r0, #8]
    63b2:	3010      	adds	r0, #16
    63b4:	4b06      	ldr	r3, [pc, #24]	; (63d0 <_ZN9CDC_ClassC1Ev+0x30>)
    63b6:	4798      	blx	r3
    63b8:	4b06      	ldr	r3, [pc, #24]	; (63d4 <_ZN9CDC_ClassC1Ev+0x34>)
    63ba:	3308      	adds	r3, #8
    63bc:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
    63be:	2301      	movs	r3, #1
    63c0:	425b      	negs	r3, r3
    63c2:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
    63c4:	4b04      	ldr	r3, [pc, #16]	; (63d8 <_ZN9CDC_ClassC1Ev+0x38>)
    63c6:	601c      	str	r4, [r3, #0]
} //CDC_Class
    63c8:	0020      	movs	r0, r4
    63ca:	bd10      	pop	{r4, pc}
    63cc:	000110ec 	.word	0x000110ec
    63d0:	0000685d 	.word	0x0000685d
    63d4:	00011108 	.word	0x00011108
    63d8:	20001368 	.word	0x20001368

000063dc <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    63dc:	b510      	push	{r4, lr}
    63de:	2801      	cmp	r0, #1
    63e0:	d000      	beq.n	63e4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    63e2:	bd10      	pop	{r4, pc}
    63e4:	4b06      	ldr	r3, [pc, #24]	; (6400 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    63e6:	4299      	cmp	r1, r3
    63e8:	d1fb      	bne.n	63e2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    63ea:	4c06      	ldr	r4, [pc, #24]	; (6404 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    63ec:	3404      	adds	r4, #4
    63ee:	0020      	movs	r0, r4
    63f0:	4b05      	ldr	r3, [pc, #20]	; (6408 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    63f2:	4798      	blx	r3
    63f4:	4a05      	ldr	r2, [pc, #20]	; (640c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    63f6:	4906      	ldr	r1, [pc, #24]	; (6410 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    63f8:	0020      	movs	r0, r4
    63fa:	4b06      	ldr	r3, [pc, #24]	; (6414 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    63fc:	4798      	blx	r3
    63fe:	e7f0      	b.n	63e2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    6400:	0000ffff 	.word	0x0000ffff
    6404:	20001368 	.word	0x20001368
    6408:	000063a1 	.word	0x000063a1
    640c:	20000000 	.word	0x20000000
    6410:	000061b1 	.word	0x000061b1
    6414:	0000701d 	.word	0x0000701d

00006418 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
    6418:	b570      	push	{r4, r5, r6, lr}
    641a:	0005      	movs	r5, r0
	OnInit();
    641c:	3010      	adds	r0, #16
    641e:	4b06      	ldr	r3, [pc, #24]	; (6438 <_ZN9CDC_Class4InitEv+0x20>)
    6420:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    6422:	4906      	ldr	r1, [pc, #24]	; (643c <_ZN9CDC_Class4InitEv+0x24>)
    6424:	2003      	movs	r0, #3
    6426:	4b06      	ldr	r3, [pc, #24]	; (6440 <_ZN9CDC_Class4InitEv+0x28>)
    6428:	4798      	blx	r3
	delay_ms(100);
    642a:	2064      	movs	r0, #100	; 0x64
    642c:	4c05      	ldr	r4, [pc, #20]	; (6444 <_ZN9CDC_Class4InitEv+0x2c>)
    642e:	47a0      	blx	r4
	if (connected)
    6430:	7c2b      	ldrb	r3, [r5, #16]
	delay_ms(100);
    6432:	2064      	movs	r0, #100	; 0x64
    6434:	47a0      	blx	r4
}
    6436:	bd70      	pop	{r4, r5, r6, pc}
    6438:	0000686d 	.word	0x0000686d
    643c:	000061cd 	.word	0x000061cd
    6440:	00005779 	.word	0x00005779
    6444:	000023d1 	.word	0x000023d1

00006448 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
    6448:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
    644a:	4b01      	ldr	r3, [pc, #4]	; (6450 <_ZN9CDC_Class9IsEnabledEv+0x8>)
    644c:	4798      	blx	r3
}
    644e:	bd10      	pop	{r4, pc}
    6450:	000057c9 	.word	0x000057c9

00006454 <_GLOBAL__sub_I_ptrCDCClass>:
 CDC_Class	usb;
    6454:	b510      	push	{r4, lr}
    6456:	4902      	ldr	r1, [pc, #8]	; (6460 <_GLOBAL__sub_I_ptrCDCClass+0xc>)
    6458:	2001      	movs	r0, #1
    645a:	4b02      	ldr	r3, [pc, #8]	; (6464 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    645c:	4798      	blx	r3
    645e:	bd10      	pop	{r4, pc}
    6460:	0000ffff 	.word	0x0000ffff
    6464:	000063dd 	.word	0x000063dd

00006468 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
    6468:	2000      	movs	r0, #0
    646a:	4770      	bx	lr

0000646c <_sbrk>:
	}

extern "C" void *_sbrk (ptrdiff_t)
	{
    return (void *)0;
	}
    646c:	2000      	movs	r0, #0
    646e:	4770      	bx	lr

00006470 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
    6470:	4770      	bx	lr

00006472 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    6472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6474:	0005      	movs	r5, r0
  size_t n = 0;
    6476:	2400      	movs	r4, #0
  while (size--) {
    6478:	1e56      	subs	r6, r2, #1
    647a:	2a00      	cmp	r2, #0
    647c:	d00b      	beq.n	6496 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    647e:	682b      	ldr	r3, [r5, #0]
    6480:	681b      	ldr	r3, [r3, #0]
    6482:	1c4f      	adds	r7, r1, #1
    6484:	7809      	ldrb	r1, [r1, #0]
    6486:	0028      	movs	r0, r5
    6488:	4798      	blx	r3
    648a:	2800      	cmp	r0, #0
    648c:	d003      	beq.n	6496 <_ZN5Print5writeEPKhj+0x24>
    648e:	3401      	adds	r4, #1
  while (size--) {
    6490:	0032      	movs	r2, r6
    if (write(*buffer++)) n++;
    6492:	0039      	movs	r1, r7
  while (size--) {
    6494:	e7f0      	b.n	6478 <_ZN5Print5writeEPKhj+0x6>
    else break;
  }
  return n;
}
    6496:	0020      	movs	r0, r4
    6498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000649c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    649c:	b570      	push	{r4, r5, r6, lr}
    649e:	0005      	movs	r5, r0
    64a0:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
    64a2:	d009      	beq.n	64b8 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    64a4:	0008      	movs	r0, r1
    64a6:	4b05      	ldr	r3, [pc, #20]	; (64bc <_ZN5Print5printEPKc+0x20>)
    64a8:	4798      	blx	r3
    64aa:	0002      	movs	r2, r0
    64ac:	682b      	ldr	r3, [r5, #0]
    64ae:	685b      	ldr	r3, [r3, #4]
    64b0:	0021      	movs	r1, r4
    64b2:	0028      	movs	r0, r5
    64b4:	4798      	blx	r3
  return write(str);
}
    64b6:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
    64b8:	2000      	movs	r0, #0
  return write(str);
    64ba:	e7fc      	b.n	64b6 <_ZN5Print5printEPKc+0x1a>
    64bc:	0000c051 	.word	0x0000c051

000064c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    64c0:	b510      	push	{r4, lr}
  return write(c);
    64c2:	6803      	ldr	r3, [r0, #0]
    64c4:	681b      	ldr	r3, [r3, #0]
    64c6:	4798      	blx	r3
}
    64c8:	bd10      	pop	{r4, pc}
	...

000064cc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    64cc:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
    64ce:	6803      	ldr	r3, [r0, #0]
    64d0:	685b      	ldr	r3, [r3, #4]
    64d2:	2202      	movs	r2, #2
    64d4:	4901      	ldr	r1, [pc, #4]	; (64dc <_ZN5Print7printlnEv+0x10>)
    64d6:	4798      	blx	r3
  return write("\r\n");
}
    64d8:	bd10      	pop	{r4, pc}
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	00010b5c 	.word	0x00010b5c

000064e0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    64e0:	b570      	push	{r4, r5, r6, lr}
    64e2:	0005      	movs	r5, r0
  size_t n = print(c);
    64e4:	4b03      	ldr	r3, [pc, #12]	; (64f4 <_ZN5Print7printlnEPKc+0x14>)
    64e6:	4798      	blx	r3
    64e8:	0004      	movs	r4, r0
  n += println();
    64ea:	0028      	movs	r0, r5
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <_ZN5Print7printlnEPKc+0x18>)
    64ee:	4798      	blx	r3
    64f0:	1820      	adds	r0, r4, r0
  return n;
}
    64f2:	bd70      	pop	{r4, r5, r6, pc}
    64f4:	0000649d 	.word	0x0000649d
    64f8:	000064cd 	.word	0x000064cd

000064fc <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    64fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fe:	46ce      	mov	lr, r9
    6500:	b500      	push	{lr}
    6502:	b08c      	sub	sp, #48	; 0x30
    6504:	4681      	mov	r9, r0
    6506:	000d      	movs	r5, r1
    6508:	0010      	movs	r0, r2
    650a:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    650c:	2100      	movs	r1, #0
    650e:	2320      	movs	r3, #32
    6510:	aa03      	add	r2, sp, #12
    6512:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6514:	2801      	cmp	r0, #1
    6516:	dd01      	ble.n	651c <_ZN5Print11printNumberEmh+0x20>
    6518:	ae0b      	add	r6, sp, #44	; 0x2c
    651a:	e007      	b.n	652c <_ZN5Print11printNumberEmh+0x30>
    651c:	230a      	movs	r3, #10
    651e:	9301      	str	r3, [sp, #4]
    6520:	e7fa      	b.n	6518 <_ZN5Print11printNumberEmh+0x1c>

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6522:	3437      	adds	r4, #55	; 0x37
    6524:	b2e4      	uxtb	r4, r4
    6526:	7034      	strb	r4, [r6, #0]
  } while(n);
    6528:	2d00      	cmp	r5, #0
    652a:	d012      	beq.n	6552 <_ZN5Print11printNumberEmh+0x56>
    char c = n % base;
    652c:	9901      	ldr	r1, [sp, #4]
    652e:	0028      	movs	r0, r5
    6530:	4b11      	ldr	r3, [pc, #68]	; (6578 <_ZN5Print11printNumberEmh+0x7c>)
    6532:	4798      	blx	r3
    6534:	000f      	movs	r7, r1
    6536:	b2cc      	uxtb	r4, r1
    n /= base;
    6538:	9901      	ldr	r1, [sp, #4]
    653a:	0028      	movs	r0, r5
    653c:	4b0f      	ldr	r3, [pc, #60]	; (657c <_ZN5Print11printNumberEmh+0x80>)
    653e:	4798      	blx	r3
    6540:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6542:	3e01      	subs	r6, #1
    6544:	23ff      	movs	r3, #255	; 0xff
    6546:	401f      	ands	r7, r3
    6548:	2f09      	cmp	r7, #9
    654a:	dcea      	bgt.n	6522 <_ZN5Print11printNumberEmh+0x26>
    654c:	3430      	adds	r4, #48	; 0x30
    654e:	b2e4      	uxtb	r4, r4
    6550:	e7e9      	b.n	6526 <_ZN5Print11printNumberEmh+0x2a>
      if (str == NULL) return 0;
    6552:	2e00      	cmp	r6, #0
    6554:	d00d      	beq.n	6572 <_ZN5Print11printNumberEmh+0x76>
      return write((const uint8_t *)str, strlen(str));
    6556:	0030      	movs	r0, r6
    6558:	4b09      	ldr	r3, [pc, #36]	; (6580 <_ZN5Print11printNumberEmh+0x84>)
    655a:	4798      	blx	r3
    655c:	0002      	movs	r2, r0
    655e:	464b      	mov	r3, r9
    6560:	681b      	ldr	r3, [r3, #0]
    6562:	685b      	ldr	r3, [r3, #4]
    6564:	0031      	movs	r1, r6
    6566:	4648      	mov	r0, r9
    6568:	4798      	blx	r3

  return write(str);
}
    656a:	b00c      	add	sp, #48	; 0x30
    656c:	bc04      	pop	{r2}
    656e:	4691      	mov	r9, r2
    6570:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
    6572:	2000      	movs	r0, #0
  return write(str);
    6574:	e7f9      	b.n	656a <_ZN5Print11printNumberEmh+0x6e>
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	00008e1d 	.word	0x00008e1d
    657c:	00008d11 	.word	0x00008d11
    6580:	0000c051 	.word	0x0000c051

00006584 <_ZN5Print5printEli>:
{
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	0005      	movs	r5, r0
    6588:	000c      	movs	r4, r1
  if (base == 0) {
    658a:	2a00      	cmp	r2, #0
    658c:	d005      	beq.n	659a <_ZN5Print5printEli+0x16>
  } else if (base == 10) {
    658e:	2a0a      	cmp	r2, #10
    6590:	d008      	beq.n	65a4 <_ZN5Print5printEli+0x20>
    return printNumber(n, base);
    6592:	b2d2      	uxtb	r2, r2
    6594:	4b0c      	ldr	r3, [pc, #48]	; (65c8 <_ZN5Print5printEli+0x44>)
    6596:	4798      	blx	r3
}
    6598:	bd70      	pop	{r4, r5, r6, pc}
    return write(n);
    659a:	b2c9      	uxtb	r1, r1
    659c:	6803      	ldr	r3, [r0, #0]
    659e:	681b      	ldr	r3, [r3, #0]
    65a0:	4798      	blx	r3
    65a2:	e7f9      	b.n	6598 <_ZN5Print5printEli+0x14>
    if (n < 0) {
    65a4:	2900      	cmp	r1, #0
    65a6:	db03      	blt.n	65b0 <_ZN5Print5printEli+0x2c>
    return printNumber(n, 10);
    65a8:	220a      	movs	r2, #10
    65aa:	4b07      	ldr	r3, [pc, #28]	; (65c8 <_ZN5Print5printEli+0x44>)
    65ac:	4798      	blx	r3
    65ae:	e7f3      	b.n	6598 <_ZN5Print5printEli+0x14>
      int t = print('-');
    65b0:	212d      	movs	r1, #45	; 0x2d
    65b2:	4b06      	ldr	r3, [pc, #24]	; (65cc <_ZN5Print5printEli+0x48>)
    65b4:	4798      	blx	r3
    65b6:	0006      	movs	r6, r0
      n = -n;
    65b8:	4261      	negs	r1, r4
      return printNumber(n, 10) + t;
    65ba:	220a      	movs	r2, #10
    65bc:	0028      	movs	r0, r5
    65be:	4b02      	ldr	r3, [pc, #8]	; (65c8 <_ZN5Print5printEli+0x44>)
    65c0:	4798      	blx	r3
    65c2:	1830      	adds	r0, r6, r0
    65c4:	e7e8      	b.n	6598 <_ZN5Print5printEli+0x14>
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	000064fd 	.word	0x000064fd
    65cc:	000064c1 	.word	0x000064c1

000065d0 <_ZN5Print5printEii>:
{
    65d0:	b510      	push	{r4, lr}
  return print((long) n, base);
    65d2:	4b01      	ldr	r3, [pc, #4]	; (65d8 <_ZN5Print5printEii+0x8>)
    65d4:	4798      	blx	r3
}
    65d6:	bd10      	pop	{r4, pc}
    65d8:	00006585 	.word	0x00006585

000065dc <_ZN5Print5printEmi>:
{
    65dc:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    65de:	2a00      	cmp	r2, #0
    65e0:	d003      	beq.n	65ea <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
    65e2:	b2d2      	uxtb	r2, r2
    65e4:	4b03      	ldr	r3, [pc, #12]	; (65f4 <_ZN5Print5printEmi+0x18>)
    65e6:	4798      	blx	r3
}
    65e8:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
    65ea:	b2c9      	uxtb	r1, r1
    65ec:	6803      	ldr	r3, [r0, #0]
    65ee:	681b      	ldr	r3, [r3, #0]
    65f0:	4798      	blx	r3
    65f2:	e7f9      	b.n	65e8 <_ZN5Print5printEmi+0xc>
    65f4:	000064fd 	.word	0x000064fd

000065f8 <_ZN5Print5printEji>:
{
    65f8:	b510      	push	{r4, lr}
  return print((unsigned long) n, base);
    65fa:	4b01      	ldr	r3, [pc, #4]	; (6600 <_ZN5Print5printEji+0x8>)
    65fc:	4798      	blx	r3
}
    65fe:	bd10      	pop	{r4, pc}
    6600:	000065dd 	.word	0x000065dd

00006604 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
    6604:	b5f0      	push	{r4, r5, r6, r7, lr}
    6606:	46c6      	mov	lr, r8
    6608:	b500      	push	{lr}
    660a:	b084      	sub	sp, #16
    660c:	9003      	str	r0, [sp, #12]
    660e:	0014      	movs	r4, r2
    6610:	9200      	str	r2, [sp, #0]
    6612:	001e      	movs	r6, r3
    6614:	ab0a      	add	r3, sp, #40	; 0x28
    6616:	781d      	ldrb	r5, [r3, #0]
  { return __builtin_isnan(__x); }
    6618:	0022      	movs	r2, r4
    661a:	0033      	movs	r3, r6
    661c:	0020      	movs	r0, r4
    661e:	0031      	movs	r1, r6
    6620:	4f58      	ldr	r7, [pc, #352]	; (6784 <_ZN5Print10printFloatEdh+0x180>)
    6622:	47b8      	blx	r7
    6624:	2800      	cmp	r0, #0
    6626:	d13e      	bne.n	66a6 <_ZN5Print10printFloatEdh+0xa2>
    6628:	2300      	movs	r3, #0
  size_t n = 0;

  if (isnan(number)) return print("nan");
    662a:	2b00      	cmp	r3, #0
    662c:	d13d      	bne.n	66aa <_ZN5Print10printFloatEdh+0xa6>
  { return __builtin_isinf(__x); }
    662e:	0077      	lsls	r7, r6, #1
    6630:	087f      	lsrs	r7, r7, #1
  if (isinf(number)) return print("inf");
    6632:	2201      	movs	r2, #1
    6634:	4252      	negs	r2, r2
    6636:	4b54      	ldr	r3, [pc, #336]	; (6788 <_ZN5Print10printFloatEdh+0x184>)
    6638:	9800      	ldr	r0, [sp, #0]
    663a:	0039      	movs	r1, r7
    663c:	4c51      	ldr	r4, [pc, #324]	; (6784 <_ZN5Print10printFloatEdh+0x180>)
    663e:	47a0      	blx	r4
    6640:	2800      	cmp	r0, #0
    6642:	d108      	bne.n	6656 <_ZN5Print10printFloatEdh+0x52>
    6644:	2201      	movs	r2, #1
    6646:	4252      	negs	r2, r2
    6648:	4b4f      	ldr	r3, [pc, #316]	; (6788 <_ZN5Print10printFloatEdh+0x184>)
    664a:	9800      	ldr	r0, [sp, #0]
    664c:	0039      	movs	r1, r7
    664e:	4f4f      	ldr	r7, [pc, #316]	; (678c <_ZN5Print10printFloatEdh+0x188>)
    6650:	47b8      	blx	r7
    6652:	2800      	cmp	r0, #0
    6654:	d033      	beq.n	66be <_ZN5Print10printFloatEdh+0xba>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6656:	22e0      	movs	r2, #224	; 0xe0
    6658:	0612      	lsls	r2, r2, #24
    665a:	4b4d      	ldr	r3, [pc, #308]	; (6790 <_ZN5Print10printFloatEdh+0x18c>)
    665c:	9800      	ldr	r0, [sp, #0]
    665e:	0031      	movs	r1, r6
    6660:	4f4c      	ldr	r7, [pc, #304]	; (6794 <_ZN5Print10printFloatEdh+0x190>)
    6662:	47b8      	blx	r7
    6664:	2800      	cmp	r0, #0
    6666:	d130      	bne.n	66ca <_ZN5Print10printFloatEdh+0xc6>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6668:	22e0      	movs	r2, #224	; 0xe0
    666a:	0612      	lsls	r2, r2, #24
    666c:	4b4a      	ldr	r3, [pc, #296]	; (6798 <_ZN5Print10printFloatEdh+0x194>)
    666e:	9800      	ldr	r0, [sp, #0]
    6670:	0031      	movs	r1, r6
    6672:	4f4a      	ldr	r7, [pc, #296]	; (679c <_ZN5Print10printFloatEdh+0x198>)
    6674:	47b8      	blx	r7
    6676:	2800      	cmp	r0, #0
    6678:	d12d      	bne.n	66d6 <_ZN5Print10printFloatEdh+0xd2>

  // Handle negative numbers
  if (number < 0.0)
    667a:	2200      	movs	r2, #0
    667c:	2300      	movs	r3, #0
    667e:	9800      	ldr	r0, [sp, #0]
    6680:	0031      	movs	r1, r6
    6682:	4f46      	ldr	r7, [pc, #280]	; (679c <_ZN5Print10printFloatEdh+0x198>)
    6684:	47b8      	blx	r7
    6686:	2800      	cmp	r0, #0
    6688:	d12b      	bne.n	66e2 <_ZN5Print10printFloatEdh+0xde>
  size_t n = 0;
    668a:	2300      	movs	r3, #0
    668c:	4698      	mov	r8, r3
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    668e:	2400      	movs	r4, #0
  double rounding = 0.5;
    6690:	2000      	movs	r0, #0
    6692:	4943      	ldr	r1, [pc, #268]	; (67a0 <_ZN5Print10printFloatEdh+0x19c>)
  for (uint8_t i=0; i<digits; ++i)
    6694:	42ac      	cmp	r4, r5
    6696:	da2e      	bge.n	66f6 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
    6698:	2200      	movs	r2, #0
    669a:	4b42      	ldr	r3, [pc, #264]	; (67a4 <_ZN5Print10printFloatEdh+0x1a0>)
    669c:	4f42      	ldr	r7, [pc, #264]	; (67a8 <_ZN5Print10printFloatEdh+0x1a4>)
    669e:	47b8      	blx	r7
  for (uint8_t i=0; i<digits; ++i)
    66a0:	3401      	adds	r4, #1
    66a2:	b2e4      	uxtb	r4, r4
    66a4:	e7f6      	b.n	6694 <_ZN5Print10printFloatEdh+0x90>
  { return __builtin_isnan(__x); }
    66a6:	2301      	movs	r3, #1
    66a8:	e7bf      	b.n	662a <_ZN5Print10printFloatEdh+0x26>
  if (isnan(number)) return print("nan");
    66aa:	4940      	ldr	r1, [pc, #256]	; (67ac <_ZN5Print10printFloatEdh+0x1a8>)
    66ac:	9803      	ldr	r0, [sp, #12]
    66ae:	4b40      	ldr	r3, [pc, #256]	; (67b0 <_ZN5Print10printFloatEdh+0x1ac>)
    66b0:	4798      	blx	r3
    66b2:	0006      	movs	r6, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
    66b4:	0030      	movs	r0, r6
    66b6:	b004      	add	sp, #16
    66b8:	bc04      	pop	{r2}
    66ba:	4690      	mov	r8, r2
    66bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isinf(number)) return print("inf");
    66be:	493d      	ldr	r1, [pc, #244]	; (67b4 <_ZN5Print10printFloatEdh+0x1b0>)
    66c0:	9803      	ldr	r0, [sp, #12]
    66c2:	4b3b      	ldr	r3, [pc, #236]	; (67b0 <_ZN5Print10printFloatEdh+0x1ac>)
    66c4:	4798      	blx	r3
    66c6:	0006      	movs	r6, r0
    66c8:	e7f4      	b.n	66b4 <_ZN5Print10printFloatEdh+0xb0>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    66ca:	493b      	ldr	r1, [pc, #236]	; (67b8 <_ZN5Print10printFloatEdh+0x1b4>)
    66cc:	9803      	ldr	r0, [sp, #12]
    66ce:	4b38      	ldr	r3, [pc, #224]	; (67b0 <_ZN5Print10printFloatEdh+0x1ac>)
    66d0:	4798      	blx	r3
    66d2:	0006      	movs	r6, r0
    66d4:	e7ee      	b.n	66b4 <_ZN5Print10printFloatEdh+0xb0>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    66d6:	4938      	ldr	r1, [pc, #224]	; (67b8 <_ZN5Print10printFloatEdh+0x1b4>)
    66d8:	9803      	ldr	r0, [sp, #12]
    66da:	4b35      	ldr	r3, [pc, #212]	; (67b0 <_ZN5Print10printFloatEdh+0x1ac>)
    66dc:	4798      	blx	r3
    66de:	0006      	movs	r6, r0
    66e0:	e7e8      	b.n	66b4 <_ZN5Print10printFloatEdh+0xb0>
     n += print('-');
    66e2:	212d      	movs	r1, #45	; 0x2d
    66e4:	9803      	ldr	r0, [sp, #12]
    66e6:	4b35      	ldr	r3, [pc, #212]	; (67bc <_ZN5Print10printFloatEdh+0x1b8>)
    66e8:	4798      	blx	r3
    66ea:	4680      	mov	r8, r0
     number = -number;
    66ec:	2380      	movs	r3, #128	; 0x80
    66ee:	061b      	lsls	r3, r3, #24
    66f0:	469c      	mov	ip, r3
    66f2:	4466      	add	r6, ip
    66f4:	e7cb      	b.n	668e <_ZN5Print10printFloatEdh+0x8a>
  number += rounding;
    66f6:	0002      	movs	r2, r0
    66f8:	000b      	movs	r3, r1
    66fa:	9800      	ldr	r0, [sp, #0]
    66fc:	0031      	movs	r1, r6
    66fe:	4c30      	ldr	r4, [pc, #192]	; (67c0 <_ZN5Print10printFloatEdh+0x1bc>)
    6700:	47a0      	blx	r4
  unsigned long int_part = (unsigned long)number;
    6702:	9000      	str	r0, [sp, #0]
    6704:	9101      	str	r1, [sp, #4]
    6706:	4b2f      	ldr	r3, [pc, #188]	; (67c4 <_ZN5Print10printFloatEdh+0x1c0>)
    6708:	4798      	blx	r3
    670a:	0006      	movs	r6, r0
  double remainder = number - (double)int_part;
    670c:	4b2e      	ldr	r3, [pc, #184]	; (67c8 <_ZN5Print10printFloatEdh+0x1c4>)
    670e:	4798      	blx	r3
    6710:	0002      	movs	r2, r0
    6712:	000b      	movs	r3, r1
    6714:	9800      	ldr	r0, [sp, #0]
    6716:	9901      	ldr	r1, [sp, #4]
    6718:	4c2c      	ldr	r4, [pc, #176]	; (67cc <_ZN5Print10printFloatEdh+0x1c8>)
    671a:	47a0      	blx	r4
    671c:	9000      	str	r0, [sp, #0]
    671e:	9101      	str	r1, [sp, #4]
  n += print(int_part);
    6720:	220a      	movs	r2, #10
    6722:	0031      	movs	r1, r6
    6724:	9c03      	ldr	r4, [sp, #12]
    6726:	0020      	movs	r0, r4
    6728:	4b29      	ldr	r3, [pc, #164]	; (67d0 <_ZN5Print10printFloatEdh+0x1cc>)
    672a:	4798      	blx	r3
    672c:	4440      	add	r0, r8
    672e:	0006      	movs	r6, r0
  if (digits > 0) {
    6730:	2d00      	cmp	r5, #0
    6732:	dd04      	ble.n	673e <_ZN5Print10printFloatEdh+0x13a>
    n += print('.');
    6734:	212e      	movs	r1, #46	; 0x2e
    6736:	0020      	movs	r0, r4
    6738:	4b20      	ldr	r3, [pc, #128]	; (67bc <_ZN5Print10printFloatEdh+0x1b8>)
    673a:	4798      	blx	r3
    673c:	1836      	adds	r6, r6, r0
  while (digits-- > 0)
    673e:	1e6f      	subs	r7, r5, #1
    6740:	b2ff      	uxtb	r7, r7
    6742:	2d00      	cmp	r5, #0
    6744:	ddb6      	ble.n	66b4 <_ZN5Print10printFloatEdh+0xb0>
    remainder *= 10.0;
    6746:	2200      	movs	r2, #0
    6748:	4b16      	ldr	r3, [pc, #88]	; (67a4 <_ZN5Print10printFloatEdh+0x1a0>)
    674a:	9800      	ldr	r0, [sp, #0]
    674c:	9901      	ldr	r1, [sp, #4]
    674e:	4c21      	ldr	r4, [pc, #132]	; (67d4 <_ZN5Print10printFloatEdh+0x1d0>)
    6750:	47a0      	blx	r4
    6752:	0004      	movs	r4, r0
    6754:	000d      	movs	r5, r1
    unsigned int toPrint = (unsigned int)(remainder);
    6756:	4b1b      	ldr	r3, [pc, #108]	; (67c4 <_ZN5Print10printFloatEdh+0x1c0>)
    6758:	4798      	blx	r3
    n += print(toPrint);
    675a:	220a      	movs	r2, #10
    675c:	9000      	str	r0, [sp, #0]
    675e:	0001      	movs	r1, r0
    6760:	9803      	ldr	r0, [sp, #12]
    6762:	4b1d      	ldr	r3, [pc, #116]	; (67d8 <_ZN5Print10printFloatEdh+0x1d4>)
    6764:	4798      	blx	r3
    6766:	1836      	adds	r6, r6, r0
    remainder -= toPrint;
    6768:	9800      	ldr	r0, [sp, #0]
    676a:	4b17      	ldr	r3, [pc, #92]	; (67c8 <_ZN5Print10printFloatEdh+0x1c4>)
    676c:	4798      	blx	r3
    676e:	0002      	movs	r2, r0
    6770:	000b      	movs	r3, r1
    6772:	0020      	movs	r0, r4
    6774:	0029      	movs	r1, r5
    6776:	4c15      	ldr	r4, [pc, #84]	; (67cc <_ZN5Print10printFloatEdh+0x1c8>)
    6778:	47a0      	blx	r4
    677a:	9000      	str	r0, [sp, #0]
    677c:	9101      	str	r1, [sp, #4]
  while (digits-- > 0)
    677e:	003d      	movs	r5, r7
    6780:	e7dd      	b.n	673e <_ZN5Print10printFloatEdh+0x13a>
    6782:	46c0      	nop			; (mov r8, r8)
    6784:	0000bac9 	.word	0x0000bac9
    6788:	7fefffff 	.word	0x7fefffff
    678c:	0000903d 	.word	0x0000903d
    6790:	41efffff 	.word	0x41efffff
    6794:	00009051 	.word	0x00009051
    6798:	c1efffff 	.word	0xc1efffff
    679c:	00009029 	.word	0x00009029
    67a0:	3fe00000 	.word	0x3fe00000
    67a4:	40240000 	.word	0x40240000
    67a8:	0000a735 	.word	0x0000a735
    67ac:	00011140 	.word	0x00011140
    67b0:	0000649d 	.word	0x0000649d
    67b4:	00011144 	.word	0x00011144
    67b8:	00011148 	.word	0x00011148
    67bc:	000064c1 	.word	0x000064c1
    67c0:	0000a115 	.word	0x0000a115
    67c4:	00009171 	.word	0x00009171
    67c8:	0000bbf5 	.word	0x0000bbf5
    67cc:	0000b49d 	.word	0x0000b49d
    67d0:	000065dd 	.word	0x000065dd
    67d4:	0000af9d 	.word	0x0000af9d
    67d8:	000065f9 	.word	0x000065f9

000067dc <_ZN5Print5printEdi>:
{
    67dc:	b530      	push	{r4, r5, lr}
    67de:	b083      	sub	sp, #12
    67e0:	001d      	movs	r5, r3
  return printFloat(n, digits);
    67e2:	466b      	mov	r3, sp
    67e4:	7e1b      	ldrb	r3, [r3, #24]
    67e6:	9300      	str	r3, [sp, #0]
    67e8:	002b      	movs	r3, r5
    67ea:	4902      	ldr	r1, [pc, #8]	; (67f4 <_ZN5Print5printEdi+0x18>)
    67ec:	4788      	blx	r1
}
    67ee:	b003      	add	sp, #12
    67f0:	bd30      	pop	{r4, r5, pc}
    67f2:	46c0      	nop			; (mov r8, r8)
    67f4:	00006605 	.word	0x00006605

000067f8 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
    67f8:	4b03      	ldr	r3, [pc, #12]	; (6808 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
    67fa:	2201      	movs	r2, #1
    67fc:	6819      	ldr	r1, [r3, #0]
    67fe:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->plugged=false;
    6800:	681b      	ldr	r3, [r3, #0]
    6802:	2200      	movs	r2, #0
    6804:	705a      	strb	r2, [r3, #1]
}
    6806:	4770      	bx	lr
    6808:	200013cc 	.word	0x200013cc

0000680c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    680c:	b510      	push	{r4, lr}
    680e:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    6810:	a801      	add	r0, sp, #4
    6812:	4b0e      	ldr	r3, [pc, #56]	; (684c <_ZL10USBPluggedv+0x40>)
    6814:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6816:	23c0      	movs	r3, #192	; 0xc0
    6818:	05db      	lsls	r3, r3, #23
    681a:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    681c:	4a0c      	ldr	r2, [pc, #48]	; (6850 <_ZL10USBPluggedv+0x44>)
    681e:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6820:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    6822:	4053      	eors	r3, r2
    6824:	401c      	ands	r4, r3
    6826:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    6828:	a801      	add	r0, sp, #4
    682a:	4b0a      	ldr	r3, [pc, #40]	; (6854 <_ZL10USBPluggedv+0x48>)
    682c:	4798      	blx	r3
	if (gpio_get_pin_level(PIN_PA14))
    682e:	0463      	lsls	r3, r4, #17
    6830:	d407      	bmi.n	6842 <_ZL10USBPluggedv+0x36>
	{
		ptrSerialTerminalClass->plugged=true;
	} 
	else
	{
		ptrSerialTerminalClass->plugged=false;
    6832:	4a09      	ldr	r2, [pc, #36]	; (6858 <_ZL10USBPluggedv+0x4c>)
    6834:	2300      	movs	r3, #0
    6836:	6811      	ldr	r1, [r2, #0]
    6838:	704b      	strb	r3, [r1, #1]
		ptrSerialTerminalClass->connected=false;
    683a:	6812      	ldr	r2, [r2, #0]
    683c:	7013      	strb	r3, [r2, #0]
	}
	
}
    683e:	b002      	add	sp, #8
    6840:	bd10      	pop	{r4, pc}
		ptrSerialTerminalClass->plugged=true;
    6842:	4b05      	ldr	r3, [pc, #20]	; (6858 <_ZL10USBPluggedv+0x4c>)
    6844:	681b      	ldr	r3, [r3, #0]
    6846:	2201      	movs	r2, #1
    6848:	705a      	strb	r2, [r3, #1]
    684a:	e7f8      	b.n	683e <_ZL10USBPluggedv+0x32>
    684c:	00002319 	.word	0x00002319
    6850:	41004400 	.word	0x41004400
    6854:	00002327 	.word	0x00002327
    6858:	200013cc 	.word	0x200013cc

0000685c <_ZN20SerialTerminal_ClassC1Ev>:


// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
    685c:	4b01      	ldr	r3, [pc, #4]	; (6864 <_ZN20SerialTerminal_ClassC1Ev+0x8>)
    685e:	6018      	str	r0, [r3, #0]
	
} //SerialTerminal_Class
    6860:	4770      	bx	lr
    6862:	46c0      	nop			; (mov r8, r8)
    6864:	200013cc 	.word	0x200013cc

00006868 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
    6868:	4770      	bx	lr
	...

0000686c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    686c:	b530      	push	{r4, r5, lr}
    686e:	b083      	sub	sp, #12
    6870:	0005      	movs	r5, r0
		ext_irq_register(PIN_PA14, USBPlugged);
    6872:	491e      	ldr	r1, [pc, #120]	; (68ec <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    6874:	200e      	movs	r0, #14
    6876:	4b1e      	ldr	r3, [pc, #120]	; (68f0 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    6878:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    687a:	481e      	ldr	r0, [pc, #120]	; (68f4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    687c:	4b1e      	ldr	r3, [pc, #120]	; (68f8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    687e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    6880:	a801      	add	r0, sp, #4
    6882:	4b1e      	ldr	r3, [pc, #120]	; (68fc <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    6884:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6886:	23c0      	movs	r3, #192	; 0xc0
    6888:	05db      	lsls	r3, r3, #23
    688a:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    688c:	4a1c      	ldr	r2, [pc, #112]	; (6900 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    688e:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6890:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    6892:	4053      	eors	r3, r2
    6894:	401c      	ands	r4, r3
    6896:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    6898:	a801      	add	r0, sp, #4
    689a:	4b1a      	ldr	r3, [pc, #104]	; (6904 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    689c:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    689e:	2380      	movs	r3, #128	; 0x80
    68a0:	01db      	lsls	r3, r3, #7
    68a2:	401c      	ands	r4, r3
    68a4:	1e63      	subs	r3, r4, #1
    68a6:	419c      	sbcs	r4, r3
    68a8:	b2e4      	uxtb	r4, r4
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(PIN_PA14);
    68aa:	70ec      	strb	r4, [r5, #3]
		if (vbusDetected)
    68ac:	2c00      	cmp	r4, #0
    68ae:	d104      	bne.n	68ba <_ZN20SerialTerminal_Class6OnInitEv+0x4e>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			connected=false;
    68b0:	2300      	movs	r3, #0
    68b2:	702b      	strb	r3, [r5, #0]
			plugged=false;
    68b4:	706b      	strb	r3, [r5, #1]
		}
		
}
    68b6:	b003      	add	sp, #12
    68b8:	bd30      	pop	{r4, r5, pc}
			timeout=false;
    68ba:	2300      	movs	r3, #0
    68bc:	70ab      	strb	r3, [r5, #2]
			plugged=true;
    68be:	3301      	adds	r3, #1
    68c0:	706b      	strb	r3, [r5, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    68c2:	2296      	movs	r2, #150	; 0x96
    68c4:	0092      	lsls	r2, r2, #2
    68c6:	4910      	ldr	r1, [pc, #64]	; (6908 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    68c8:	480a      	ldr	r0, [pc, #40]	; (68f4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    68ca:	4b10      	ldr	r3, [pc, #64]	; (690c <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    68cc:	4798      	blx	r3
			while ((!usb.IsEnabled())){
    68ce:	4810      	ldr	r0, [pc, #64]	; (6910 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    68d0:	4b10      	ldr	r3, [pc, #64]	; (6914 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    68d2:	4798      	blx	r3
    68d4:	2800      	cmp	r0, #0
    68d6:	d105      	bne.n	68e4 <_ZN20SerialTerminal_Class6OnInitEv+0x78>
				if (timeout)
    68d8:	78ab      	ldrb	r3, [r5, #2]
    68da:	2b00      	cmp	r3, #0
    68dc:	d0f7      	beq.n	68ce <_ZN20SerialTerminal_Class6OnInitEv+0x62>
					connected=false;
    68de:	2300      	movs	r3, #0
    68e0:	702b      	strb	r3, [r5, #0]
					return;
    68e2:	e7e8      	b.n	68b6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
			usbTerminalTimer.Stop();
    68e4:	4803      	ldr	r0, [pc, #12]	; (68f4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    68e6:	4b0c      	ldr	r3, [pc, #48]	; (6918 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    68e8:	4798      	blx	r3
    68ea:	e7e4      	b.n	68b6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
    68ec:	0000680d 	.word	0x0000680d
    68f0:	00002469 	.word	0x00002469
    68f4:	200013d4 	.word	0x200013d4
    68f8:	00006995 	.word	0x00006995
    68fc:	00002319 	.word	0x00002319
    6900:	41004400 	.word	0x41004400
    6904:	00002327 	.word	0x00002327
    6908:	000067f9 	.word	0x000067f9
    690c:	00006a45 	.word	0x00006a45
    6910:	2000136c 	.word	0x2000136c
    6914:	00006449 	.word	0x00006449
    6918:	000069b5 	.word	0x000069b5

0000691c <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
    691c:	2300      	movs	r3, #0
    691e:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
    6920:	4770      	bx	lr
	...

00006924 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
    6924:	6101      	str	r1, [r0, #16]
	ptrTimerSerialClass=this;
    6926:	4b04      	ldr	r3, [pc, #16]	; (6938 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
    6928:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
    692a:	2380      	movs	r3, #128	; 0x80
    692c:	00db      	lsls	r3, r3, #3
    692e:	6183      	str	r3, [r0, #24]
	task->cb=task_cb;
    6930:	6883      	ldr	r3, [r0, #8]
    6932:	4a02      	ldr	r2, [pc, #8]	; (693c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
    6934:	60da      	str	r2, [r3, #12]
} //Timer_Class
    6936:	4770      	bx	lr
    6938:	200013d0 	.word	0x200013d0
    693c:	000069d1 	.word	0x000069d1

00006940 <_Z41__static_initialization_and_destruction_0ii>:


}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    6940:	b510      	push	{r4, lr}
    6942:	2801      	cmp	r0, #1
    6944:	d000      	beq.n	6948 <_Z41__static_initialization_and_destruction_0ii+0x8>
    6946:	bd10      	pop	{r4, pc}
    6948:	4b07      	ldr	r3, [pc, #28]	; (6968 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    694a:	4299      	cmp	r1, r3
    694c:	d1fb      	bne.n	6946 <_Z41__static_initialization_and_destruction_0ii+0x6>
    694e:	4c07      	ldr	r4, [pc, #28]	; (696c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    6950:	3404      	adds	r4, #4
    6952:	4907      	ldr	r1, [pc, #28]	; (6970 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    6954:	0020      	movs	r0, r4
    6956:	4b07      	ldr	r3, [pc, #28]	; (6974 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6958:	4798      	blx	r3
    695a:	4a07      	ldr	r2, [pc, #28]	; (6978 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    695c:	4907      	ldr	r1, [pc, #28]	; (697c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    695e:	0020      	movs	r0, r4
    6960:	4b07      	ldr	r3, [pc, #28]	; (6980 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    6962:	4798      	blx	r3
    6964:	e7ef      	b.n	6946 <_Z41__static_initialization_and_destruction_0ii+0x6>
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	0000ffff 	.word	0x0000ffff
    696c:	200013d0 	.word	0x200013d0
    6970:	2000154c 	.word	0x2000154c
    6974:	00006925 	.word	0x00006925
    6978:	20000000 	.word	0x20000000
    697c:	0000691d 	.word	0x0000691d
    6980:	0000701d 	.word	0x0000701d

00006984 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
    6984:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
    6986:	6900      	ldr	r0, [r0, #16]
    6988:	4b01      	ldr	r3, [pc, #4]	; (6990 <_ZN17TimerSerial_Class5StartEv+0xc>)
    698a:	4798      	blx	r3
}
    698c:	bd10      	pop	{r4, pc}
    698e:	46c0      	nop			; (mov r8, r8)
    6990:	00002821 	.word	0x00002821

00006994 <_ZN17TimerSerial_Class4InitEv>:
bool TimerSerial_Class::Init(void){
    6994:	b510      	push	{r4, lr}
    6996:	0004      	movs	r4, r0
	ticks=0;
    6998:	2300      	movs	r3, #0
    699a:	60c3      	str	r3, [r0, #12]
	isOK=Start()==0;
    699c:	4b04      	ldr	r3, [pc, #16]	; (69b0 <_ZN17TimerSerial_Class4InitEv+0x1c>)
    699e:	4798      	blx	r3
    69a0:	4243      	negs	r3, r0
    69a2:	4158      	adcs	r0, r3
    69a4:	b2c0      	uxtb	r0, r0
    69a6:	70a0      	strb	r0, [r4, #2]
	return isOK;
    69a8:	78a0      	ldrb	r0, [r4, #2]
    69aa:	b2c0      	uxtb	r0, r0
}
    69ac:	bd10      	pop	{r4, pc}
    69ae:	46c0      	nop			; (mov r8, r8)
    69b0:	00006985 	.word	0x00006985

000069b4 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
    69b4:	b510      	push	{r4, lr}
    69b6:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
    69b8:	6900      	ldr	r0, [r0, #16]
    69ba:	4b02      	ldr	r3, [pc, #8]	; (69c4 <_ZN17TimerSerial_Class4StopEv+0x10>)
    69bc:	4798      	blx	r3
	timeout=0;
    69be:	2300      	movs	r3, #0
    69c0:	7063      	strb	r3, [r4, #1]
}
    69c2:	bd10      	pop	{r4, pc}
    69c4:	0000285d 	.word	0x0000285d

000069c8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	timeout=1;
    69c8:	2301      	movs	r3, #1
    69ca:	7043      	strb	r3, [r0, #1]
}
    69cc:	4770      	bx	lr
	...

000069d0 <_ZL7task_cbPK10timer_task>:
{
    69d0:	b510      	push	{r4, lr}
	ptrTimerSerialClass->setTimeout();
    69d2:	4b02      	ldr	r3, [pc, #8]	; (69dc <_ZL7task_cbPK10timer_task+0xc>)
    69d4:	6818      	ldr	r0, [r3, #0]
    69d6:	4b02      	ldr	r3, [pc, #8]	; (69e0 <_ZL7task_cbPK10timer_task+0x10>)
    69d8:	4798      	blx	r3
}
    69da:	bd10      	pop	{r4, pc}
    69dc:	200013d0 	.word	0x200013d0
    69e0:	000069c9 	.word	0x000069c9

000069e4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    69e4:	b510      	push	{r4, lr}
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    69e6:	2300      	movs	r3, #0
    69e8:	2b03      	cmp	r3, #3
    69ea:	dc0f      	bgt.n	6a0c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x28>
			if (taskSerialArray[ii].cb==NULL)
    69ec:	009a      	lsls	r2, r3, #2
    69ee:	18d2      	adds	r2, r2, r3
    69f0:	0091      	lsls	r1, r2, #2
    69f2:	4a08      	ldr	r2, [pc, #32]	; (6a14 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    69f4:	1852      	adds	r2, r2, r1
    69f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    69f8:	2a00      	cmp	r2, #0
    69fa:	d002      	beq.n	6a02 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x1e>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    69fc:	3301      	adds	r3, #1
    69fe:	b2db      	uxtb	r3, r3
    6a00:	e7f2      	b.n	69e8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4>
				task=&taskSerialArray[ii];
    6a02:	4b04      	ldr	r3, [pc, #16]	; (6a14 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    6a04:	3324      	adds	r3, #36	; 0x24
    6a06:	185b      	adds	r3, r3, r1
    6a08:	6083      	str	r3, [r0, #8]
			return;
    6a0a:	e002      	b.n	6a12 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x2e>
	task=&taskSerialArray[0];
    6a0c:	4b01      	ldr	r3, [pc, #4]	; (6a14 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    6a0e:	3324      	adds	r3, #36	; 0x24
    6a10:	6083      	str	r3, [r0, #8]
}
    6a12:	bd10      	pop	{r4, pc}
    6a14:	200013d0 	.word	0x200013d0

00006a18 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    6a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a1a:	0004      	movs	r4, r0
    6a1c:	000e      	movs	r6, r1
    6a1e:	0017      	movs	r7, r2
    6a20:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
    6a22:	4b06      	ldr	r3, [pc, #24]	; (6a3c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
    6a24:	4798      	blx	r3
	task->interval = interval;
    6a26:	68a3      	ldr	r3, [r4, #8]
    6a28:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
    6a2a:	68a3      	ldr	r3, [r4, #8]
    6a2c:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
    6a2e:	68a3      	ldr	r3, [r4, #8]
    6a30:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
    6a32:	6920      	ldr	r0, [r4, #16]
    6a34:	68a1      	ldr	r1, [r4, #8]
    6a36:	4b02      	ldr	r3, [pc, #8]	; (6a40 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
    6a38:	4798      	blx	r3
}
    6a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a3c:	000069e5 	.word	0x000069e5
    6a40:	00002899 	.word	0x00002899

00006a44 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    6a44:	b570      	push	{r4, r5, r6, lr}
    6a46:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    6a48:	2300      	movs	r3, #0
    6a4a:	4d03      	ldr	r5, [pc, #12]	; (6a58 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
    6a4c:	47a8      	blx	r5
	status=timer_start(timer_descr);
    6a4e:	6920      	ldr	r0, [r4, #16]
    6a50:	4b02      	ldr	r3, [pc, #8]	; (6a5c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
    6a52:	4798      	blx	r3
}
    6a54:	bd70      	pop	{r4, r5, r6, pc}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	00006a19 	.word	0x00006a19
    6a5c:	00002821 	.word	0x00002821

00006a60 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    6a60:	b530      	push	{r4, r5, lr}
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6a62:	2300      	movs	r3, #0
    6a64:	2b03      	cmp	r3, #3
    6a66:	dc0e      	bgt.n	6a86 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x26>
		if (taskSerialArray[ii].cb==(timer_cb_t)func)
    6a68:	009a      	lsls	r2, r3, #2
    6a6a:	18d2      	adds	r2, r2, r3
    6a6c:	0094      	lsls	r4, r2, #2
    6a6e:	4a06      	ldr	r2, [pc, #24]	; (6a88 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    6a70:	1912      	adds	r2, r2, r4
    6a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
    6a74:	428a      	cmp	r2, r1
    6a76:	d002      	beq.n	6a7e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x1e>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6a78:	3301      	adds	r3, #1
    6a7a:	b2db      	uxtb	r3, r3
    6a7c:	e7f2      	b.n	6a64 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4>
			task=&taskSerialArray[ii];
    6a7e:	4b02      	ldr	r3, [pc, #8]	; (6a88 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    6a80:	3324      	adds	r3, #36	; 0x24
    6a82:	191b      	adds	r3, r3, r4
    6a84:	6083      	str	r3, [r0, #8]
}
    6a86:	bd30      	pop	{r4, r5, pc}
    6a88:	200013d0 	.word	0x200013d0

00006a8c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    6a8c:	b510      	push	{r4, lr}
    6a8e:	0004      	movs	r4, r0
	GetTaskFunction(func);
    6a90:	4b08      	ldr	r3, [pc, #32]	; (6ab4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
    6a92:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
    6a94:	6920      	ldr	r0, [r4, #16]
    6a96:	3014      	adds	r0, #20
    6a98:	68a1      	ldr	r1, [r4, #8]
    6a9a:	4b07      	ldr	r3, [pc, #28]	; (6ab8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
    6a9c:	4798      	blx	r3
    6a9e:	2800      	cmp	r0, #0
    6aa0:	d103      	bne.n	6aaa <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
    6aa2:	68a3      	ldr	r3, [r4, #8]
    6aa4:	2200      	movs	r2, #0
    6aa6:	60da      	str	r2, [r3, #12]
}
    6aa8:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
    6aaa:	68a1      	ldr	r1, [r4, #8]
    6aac:	6920      	ldr	r0, [r4, #16]
    6aae:	4b03      	ldr	r3, [pc, #12]	; (6abc <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
    6ab0:	4798      	blx	r3
    6ab2:	e7f6      	b.n	6aa2 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
    6ab4:	00006a61 	.word	0x00006a61
    6ab8:	000031d9 	.word	0x000031d9
    6abc:	00002949 	.word	0x00002949

00006ac0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    6ac0:	b510      	push	{r4, lr}
    6ac2:	4902      	ldr	r1, [pc, #8]	; (6acc <_GLOBAL__sub_I_ptrTimerSerialClass+0xc>)
    6ac4:	2001      	movs	r0, #1
    6ac6:	4b02      	ldr	r3, [pc, #8]	; (6ad0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    6ac8:	4798      	blx	r3
    6aca:	bd10      	pop	{r4, pc}
    6acc:	0000ffff 	.word	0x0000ffff
    6ad0:	00006941 	.word	0x00006941

00006ad4 <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b084      	sub	sp, #16
    6ad8:	af00      	add	r7, sp, #0
    6ada:	60f8      	str	r0, [r7, #12]
    6adc:	607a      	str	r2, [r7, #4]
    6ade:	230b      	movs	r3, #11
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	1c0a      	adds	r2, r1, #0
    6ae4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    6ae6:	230b      	movs	r3, #11
    6ae8:	18fb      	adds	r3, r7, r3
    6aea:	781b      	ldrb	r3, [r3, #0]
    6aec:	68fa      	ldr	r2, [r7, #12]
    6aee:	01db      	lsls	r3, r3, #7
    6af0:	18d3      	adds	r3, r2, r3
    6af2:	331c      	adds	r3, #28
    6af4:	687a      	ldr	r2, [r7, #4]
    6af6:	601a      	str	r2, [r3, #0]
}
    6af8:	46c0      	nop			; (mov r8, r8)
    6afa:	46bd      	mov	sp, r7
    6afc:	b004      	add	sp, #16
    6afe:	bd80      	pop	{r7, pc}

00006b00 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    6b00:	b580      	push	{r7, lr}
    6b02:	b082      	sub	sp, #8
    6b04:	af00      	add	r7, sp, #0
    6b06:	0002      	movs	r2, r0
    6b08:	6039      	str	r1, [r7, #0]
    6b0a:	1dfb      	adds	r3, r7, #7
    6b0c:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
    6b0e:	683a      	ldr	r2, [r7, #0]
    6b10:	1dfb      	adds	r3, r7, #7
    6b12:	7819      	ldrb	r1, [r3, #0]
    6b14:	23c0      	movs	r3, #192	; 0xc0
    6b16:	05db      	lsls	r3, r3, #23
    6b18:	0018      	movs	r0, r3
    6b1a:	4b03      	ldr	r3, [pc, #12]	; (6b28 <_gpio_toggle_level+0x28>)
    6b1c:	4798      	blx	r3
}
    6b1e:	46c0      	nop			; (mov r8, r8)
    6b20:	46bd      	mov	sp, r7
    6b22:	b002      	add	sp, #8
    6b24:	bd80      	pop	{r7, pc}
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	00006ad5 	.word	0x00006ad5

00006b2c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    6b2c:	b580      	push	{r7, lr}
    6b2e:	b082      	sub	sp, #8
    6b30:	af00      	add	r7, sp, #0
    6b32:	0002      	movs	r2, r0
    6b34:	1dfb      	adds	r3, r7, #7
    6b36:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    6b38:	1dfb      	adds	r3, r7, #7
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	115b      	asrs	r3, r3, #5
    6b3e:	b2d8      	uxtb	r0, r3
    6b40:	1dfb      	adds	r3, r7, #7
    6b42:	781b      	ldrb	r3, [r3, #0]
    6b44:	001a      	movs	r2, r3
    6b46:	231f      	movs	r3, #31
    6b48:	4013      	ands	r3, r2
    6b4a:	2201      	movs	r2, #1
    6b4c:	409a      	lsls	r2, r3
    6b4e:	0013      	movs	r3, r2
    6b50:	0019      	movs	r1, r3
    6b52:	4b03      	ldr	r3, [pc, #12]	; (6b60 <gpio_toggle_pin_level+0x34>)
    6b54:	4798      	blx	r3
}
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	46bd      	mov	sp, r7
    6b5a:	b002      	add	sp, #8
    6b5c:	bd80      	pop	{r7, pc}
    6b5e:	46c0      	nop			; (mov r8, r8)
    6b60:	00006b01 	.word	0x00006b01

00006b64 <_ZN11ZCD_HandlerC1Ev>:
#include "CDC_Class.h"

static SPI_Syn_ZCD_Class local_spi;

// default constructor
ZCD_Handler::ZCD_Handler()
    6b64:	b580      	push	{r7, lr}
    6b66:	b082      	sub	sp, #8
    6b68:	af00      	add	r7, sp, #0
    6b6a:	6078      	str	r0, [r7, #4]
{
	spi=&local_spi;
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	4a05      	ldr	r2, [pc, #20]	; (6b84 <_ZN11ZCD_HandlerC1Ev+0x20>)
    6b70:	605a      	str	r2, [r3, #4]
	tone=0;
    6b72:	687b      	ldr	r3, [r7, #4]
    6b74:	2200      	movs	r2, #0
    6b76:	601a      	str	r2, [r3, #0]
} //ZCD_Handler
    6b78:	687b      	ldr	r3, [r7, #4]
    6b7a:	0018      	movs	r0, r3
    6b7c:	46bd      	mov	sp, r7
    6b7e:	b002      	add	sp, #8
    6b80:	bd80      	pop	{r7, pc}
    6b82:	46c0      	nop			; (mov r8, r8)
    6b84:	20001444 	.word	0x20001444

00006b88 <_ZN11ZCD_HandlerD1Ev>:

// default destructor
ZCD_Handler::~ZCD_Handler()
    6b88:	b580      	push	{r7, lr}
    6b8a:	b082      	sub	sp, #8
    6b8c:	af00      	add	r7, sp, #0
    6b8e:	6078      	str	r0, [r7, #4]
{
} //~ZCD_Handler
    6b90:	687b      	ldr	r3, [r7, #4]
    6b92:	0018      	movs	r0, r3
    6b94:	46bd      	mov	sp, r7
    6b96:	b002      	add	sp, #8
    6b98:	bd80      	pop	{r7, pc}
	...

00006b9c <_ZN11ZCD_Handler4InitEv>:

bool ZCD_Handler::Init(){
    6b9c:	b580      	push	{r7, lr}
    6b9e:	b082      	sub	sp, #8
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	6078      	str	r0, [r7, #4]
	spi->Init();
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	685b      	ldr	r3, [r3, #4]
    6ba8:	0018      	movs	r0, r3
    6baa:	4b03      	ldr	r3, [pc, #12]	; (6bb8 <_ZN11ZCD_Handler4InitEv+0x1c>)
    6bac:	4798      	blx	r3
	return true;
    6bae:	2301      	movs	r3, #1
}
    6bb0:	0018      	movs	r0, r3
    6bb2:	46bd      	mov	sp, r7
    6bb4:	b002      	add	sp, #8
    6bb6:	bd80      	pop	{r7, pc}
    6bb8:	00006f25 	.word	0x00006f25

00006bbc <_ZN11ZCD_Handler8Get_ToneEv>:

uint32_t ZCD_Handler::Get_Tone(){
    6bbc:	b580      	push	{r7, lr}
    6bbe:	b084      	sub	sp, #16
    6bc0:	af00      	add	r7, sp, #0
    6bc2:	6078      	str	r0, [r7, #4]
	command=0x01;
    6bc4:	687b      	ldr	r3, [r7, #4]
    6bc6:	2201      	movs	r2, #1
    6bc8:	721a      	strb	r2, [r3, #8]
	spi->SetCS(false);
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	685b      	ldr	r3, [r3, #4]
    6bce:	2100      	movs	r1, #0
    6bd0:	0018      	movs	r0, r3
    6bd2:	4b4c      	ldr	r3, [pc, #304]	; (6d04 <_ZN11ZCD_Handler8Get_ToneEv+0x148>)
    6bd4:	4798      	blx	r3
	spi->Write(&command,1);
    6bd6:	687b      	ldr	r3, [r7, #4]
    6bd8:	6858      	ldr	r0, [r3, #4]
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	3308      	adds	r3, #8
    6bde:	2201      	movs	r2, #1
    6be0:	0019      	movs	r1, r3
    6be2:	4b49      	ldr	r3, [pc, #292]	; (6d08 <_ZN11ZCD_Handler8Get_ToneEv+0x14c>)
    6be4:	4798      	blx	r3
	spi->SetCS(true);
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	685b      	ldr	r3, [r3, #4]
    6bea:	2101      	movs	r1, #1
    6bec:	0018      	movs	r0, r3
    6bee:	4b45      	ldr	r3, [pc, #276]	; (6d04 <_ZN11ZCD_Handler8Get_ToneEv+0x148>)
    6bf0:	4798      	blx	r3
	delay_ms(10);
    6bf2:	200a      	movs	r0, #10
    6bf4:	4b45      	ldr	r3, [pc, #276]	; (6d0c <_ZN11ZCD_Handler8Get_ToneEv+0x150>)
    6bf6:	4798      	blx	r3
	spi->SetCS(false);
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	685b      	ldr	r3, [r3, #4]
    6bfc:	2100      	movs	r1, #0
    6bfe:	0018      	movs	r0, r3
    6c00:	4b40      	ldr	r3, [pc, #256]	; (6d04 <_ZN11ZCD_Handler8Get_ToneEv+0x148>)
    6c02:	4798      	blx	r3
	spi->Read(read_buffer,4);
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	6858      	ldr	r0, [r3, #4]
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	3309      	adds	r3, #9
    6c0c:	2204      	movs	r2, #4
    6c0e:	0019      	movs	r1, r3
    6c10:	4b3f      	ldr	r3, [pc, #252]	; (6d10 <_ZN11ZCD_Handler8Get_ToneEv+0x154>)
    6c12:	4798      	blx	r3
	spi->SetCS(true);
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	685b      	ldr	r3, [r3, #4]
    6c18:	2101      	movs	r1, #1
    6c1a:	0018      	movs	r0, r3
    6c1c:	4b39      	ldr	r3, [pc, #228]	; (6d04 <_ZN11ZCD_Handler8Get_ToneEv+0x148>)
    6c1e:	4798      	blx	r3
	last_tone=tone;
    6c20:	687b      	ldr	r3, [r7, #4]
    6c22:	681a      	ldr	r2, [r3, #0]
    6c24:	687b      	ldr	r3, [r7, #4]
    6c26:	611a      	str	r2, [r3, #16]
	tone=0;
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	2200      	movs	r2, #0
    6c2c:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
    6c2e:	2300      	movs	r3, #0
    6c30:	60fb      	str	r3, [r7, #12]
    6c32:	68fb      	ldr	r3, [r7, #12]
    6c34:	2b03      	cmp	r3, #3
    6c36:	dc3c      	bgt.n	6cb2 <_ZN11ZCD_Handler8Get_ToneEv+0xf6>
	{
		if (i==0)
    6c38:	68fb      	ldr	r3, [r7, #12]
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	d124      	bne.n	6c88 <_ZN11ZCD_Handler8Get_ToneEv+0xcc>
		{
			if (read_buffer[i]&0xa0)
    6c3e:	687a      	ldr	r2, [r7, #4]
    6c40:	68fb      	ldr	r3, [r7, #12]
    6c42:	18d3      	adds	r3, r2, r3
    6c44:	3309      	adds	r3, #9
    6c46:	781b      	ldrb	r3, [r3, #0]
    6c48:	001a      	movs	r2, r3
    6c4a:	23a0      	movs	r3, #160	; 0xa0
    6c4c:	4013      	ands	r3, r2
    6c4e:	d017      	beq.n	6c80 <_ZN11ZCD_Handler8Get_ToneEv+0xc4>
			{
				tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
    6c50:	687b      	ldr	r3, [r7, #4]
    6c52:	681b      	ldr	r3, [r3, #0]
    6c54:	6879      	ldr	r1, [r7, #4]
    6c56:	68fa      	ldr	r2, [r7, #12]
    6c58:	188a      	adds	r2, r1, r2
    6c5a:	3209      	adds	r2, #9
    6c5c:	7812      	ldrb	r2, [r2, #0]
    6c5e:	0010      	movs	r0, r2
    6c60:	68fa      	ldr	r2, [r7, #12]
    6c62:	2103      	movs	r1, #3
    6c64:	1a8a      	subs	r2, r1, r2
    6c66:	00d2      	lsls	r2, r2, #3
    6c68:	4090      	lsls	r0, r2
    6c6a:	0002      	movs	r2, r0
    6c6c:	431a      	orrs	r2, r3
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	601a      	str	r2, [r3, #0]
				tone&=0x0fffffff;
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	681b      	ldr	r3, [r3, #0]
    6c76:	011b      	lsls	r3, r3, #4
    6c78:	091a      	lsrs	r2, r3, #4
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	601a      	str	r2, [r3, #0]
    6c7e:	e014      	b.n	6caa <_ZN11ZCD_Handler8Get_ToneEv+0xee>
			} 
			else
			{
				tone=24000000;
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	4a24      	ldr	r2, [pc, #144]	; (6d14 <_ZN11ZCD_Handler8Get_ToneEv+0x158>)
    6c84:	601a      	str	r2, [r3, #0]
				break;
    6c86:	e014      	b.n	6cb2 <_ZN11ZCD_Handler8Get_ToneEv+0xf6>
			}
			
		} 
		else
		{
			tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	681b      	ldr	r3, [r3, #0]
    6c8c:	6879      	ldr	r1, [r7, #4]
    6c8e:	68fa      	ldr	r2, [r7, #12]
    6c90:	188a      	adds	r2, r1, r2
    6c92:	3209      	adds	r2, #9
    6c94:	7812      	ldrb	r2, [r2, #0]
    6c96:	0010      	movs	r0, r2
    6c98:	68fa      	ldr	r2, [r7, #12]
    6c9a:	2103      	movs	r1, #3
    6c9c:	1a8a      	subs	r2, r1, r2
    6c9e:	00d2      	lsls	r2, r2, #3
    6ca0:	4090      	lsls	r0, r2
    6ca2:	0002      	movs	r2, r0
    6ca4:	431a      	orrs	r2, r3
    6ca6:	687b      	ldr	r3, [r7, #4]
    6ca8:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
    6caa:	68fb      	ldr	r3, [r7, #12]
    6cac:	3301      	adds	r3, #1
    6cae:	60fb      	str	r3, [r7, #12]
    6cb0:	e7bf      	b.n	6c32 <_ZN11ZCD_Handler8Get_ToneEv+0x76>
		}
		
	}
	if (tone>0)
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	681b      	ldr	r3, [r3, #0]
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d008      	beq.n	6ccc <_ZN11ZCD_Handler8Get_ToneEv+0x110>
	{
	
		if (tone<24000001)
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	681b      	ldr	r3, [r3, #0]
    6cbe:	4a15      	ldr	r2, [pc, #84]	; (6d14 <_ZN11ZCD_Handler8Get_ToneEv+0x158>)
    6cc0:	4293      	cmp	r3, r2
    6cc2:	d807      	bhi.n	6cd4 <_ZN11ZCD_Handler8Get_ToneEv+0x118>
		{
			gpio_toggle_pin_level(LED0);
    6cc4:	203e      	movs	r0, #62	; 0x3e
    6cc6:	4b14      	ldr	r3, [pc, #80]	; (6d18 <_ZN11ZCD_Handler8Get_ToneEv+0x15c>)
    6cc8:	4798      	blx	r3
    6cca:	e003      	b.n	6cd4 <_ZN11ZCD_Handler8Get_ToneEv+0x118>
		}
		
	} 
	else
	{
		tone=last_tone;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	691a      	ldr	r2, [r3, #16]
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	601a      	str	r2, [r3, #0]
	}
	usb<<"tone: "<<tone<<TAB_SPACE;
    6cd4:	4a11      	ldr	r2, [pc, #68]	; (6d1c <_ZN11ZCD_Handler8Get_ToneEv+0x160>)
    6cd6:	4b12      	ldr	r3, [pc, #72]	; (6d20 <_ZN11ZCD_Handler8Get_ToneEv+0x164>)
    6cd8:	0011      	movs	r1, r2
    6cda:	0018      	movs	r0, r3
    6cdc:	4b11      	ldr	r3, [pc, #68]	; (6d24 <_ZN11ZCD_Handler8Get_ToneEv+0x168>)
    6cde:	4798      	blx	r3
    6ce0:	0002      	movs	r2, r0
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	0019      	movs	r1, r3
    6ce6:	0010      	movs	r0, r2
    6ce8:	4b0f      	ldr	r3, [pc, #60]	; (6d28 <_ZN11ZCD_Handler8Get_ToneEv+0x16c>)
    6cea:	4798      	blx	r3
    6cec:	0002      	movs	r2, r0
    6cee:	4b0f      	ldr	r3, [pc, #60]	; (6d2c <_ZN11ZCD_Handler8Get_ToneEv+0x170>)
    6cf0:	0019      	movs	r1, r3
    6cf2:	0010      	movs	r0, r2
    6cf4:	4b0e      	ldr	r3, [pc, #56]	; (6d30 <_ZN11ZCD_Handler8Get_ToneEv+0x174>)
    6cf6:	4798      	blx	r3
	return tone;
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	681b      	ldr	r3, [r3, #0]
    6cfc:	0018      	movs	r0, r3
    6cfe:	46bd      	mov	sp, r7
    6d00:	b004      	add	sp, #16
    6d02:	bd80      	pop	{r7, pc}
    6d04:	00006ff5 	.word	0x00006ff5
    6d08:	00006f85 	.word	0x00006f85
    6d0c:	000023d1 	.word	0x000023d1
    6d10:	00006fbd 	.word	0x00006fbd
    6d14:	016e3600 	.word	0x016e3600
    6d18:	00006b2d 	.word	0x00006b2d
    6d1c:	0001114c 	.word	0x0001114c
    6d20:	2000136c 	.word	0x2000136c
    6d24:	00006d35 	.word	0x00006d35
    6d28:	00006d59 	.word	0x00006d59
    6d2c:	00011154 	.word	0x00011154
    6d30:	00006d81 	.word	0x00006d81

00006d34 <_ZlsIA7_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
    6d34:	b580      	push	{r7, lr}
    6d36:	b082      	sub	sp, #8
    6d38:	af00      	add	r7, sp, #0
    6d3a:	6078      	str	r0, [r7, #4]
    6d3c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    6d3e:	683a      	ldr	r2, [r7, #0]
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	0011      	movs	r1, r2
    6d44:	0018      	movs	r0, r3
    6d46:	4b03      	ldr	r3, [pc, #12]	; (6d54 <_ZlsIA7_cER5PrintS2_RKT_+0x20>)
    6d48:	4798      	blx	r3
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	0018      	movs	r0, r3
    6d4e:	46bd      	mov	sp, r7
    6d50:	b002      	add	sp, #8
    6d52:	bd80      	pop	{r7, pc}
    6d54:	0000649d 	.word	0x0000649d

00006d58 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    6d58:	b580      	push	{r7, lr}
    6d5a:	b082      	sub	sp, #8
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
    6d60:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    6d62:	683b      	ldr	r3, [r7, #0]
    6d64:	6819      	ldr	r1, [r3, #0]
    6d66:	687b      	ldr	r3, [r7, #4]
    6d68:	220a      	movs	r2, #10
    6d6a:	0018      	movs	r0, r3
    6d6c:	4b03      	ldr	r3, [pc, #12]	; (6d7c <_ZlsImER5PrintS1_RKT_+0x24>)
    6d6e:	4798      	blx	r3
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	0018      	movs	r0, r3
    6d74:	46bd      	mov	sp, r7
    6d76:	b002      	add	sp, #8
    6d78:	bd80      	pop	{r7, pc}
    6d7a:	46c0      	nop			; (mov r8, r8)
    6d7c:	000065dd 	.word	0x000065dd

00006d80 <_ZlsIA2_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    6d80:	b580      	push	{r7, lr}
    6d82:	b082      	sub	sp, #8
    6d84:	af00      	add	r7, sp, #0
    6d86:	6078      	str	r0, [r7, #4]
    6d88:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    6d8a:	683a      	ldr	r2, [r7, #0]
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	0011      	movs	r1, r2
    6d90:	0018      	movs	r0, r3
    6d92:	4b03      	ldr	r3, [pc, #12]	; (6da0 <_ZlsIA2_cER5PrintS2_RKT_+0x20>)
    6d94:	4798      	blx	r3
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	0018      	movs	r0, r3
    6d9a:	46bd      	mov	sp, r7
    6d9c:	b002      	add	sp, #8
    6d9e:	bd80      	pop	{r7, pc}
    6da0:	0000649d 	.word	0x0000649d

00006da4 <_Z41__static_initialization_and_destruction_0ii>:
    6da4:	b580      	push	{r7, lr}
    6da6:	b082      	sub	sp, #8
    6da8:	af00      	add	r7, sp, #0
    6daa:	6078      	str	r0, [r7, #4]
    6dac:	6039      	str	r1, [r7, #0]
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	2b01      	cmp	r3, #1
    6db2:	d10d      	bne.n	6dd0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    6db4:	683b      	ldr	r3, [r7, #0]
    6db6:	4a08      	ldr	r2, [pc, #32]	; (6dd8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6db8:	4293      	cmp	r3, r2
    6dba:	d109      	bne.n	6dd0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static SPI_Syn_ZCD_Class local_spi;
    6dbc:	4b07      	ldr	r3, [pc, #28]	; (6ddc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6dbe:	0018      	movs	r0, r3
    6dc0:	4b07      	ldr	r3, [pc, #28]	; (6de0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    6dc2:	4798      	blx	r3
    6dc4:	4a07      	ldr	r2, [pc, #28]	; (6de4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    6dc6:	4908      	ldr	r1, [pc, #32]	; (6de8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    6dc8:	4b04      	ldr	r3, [pc, #16]	; (6ddc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6dca:	0018      	movs	r0, r3
    6dcc:	4b07      	ldr	r3, [pc, #28]	; (6dec <_Z41__static_initialization_and_destruction_0ii+0x48>)
    6dce:	4798      	blx	r3
    6dd0:	46c0      	nop			; (mov r8, r8)
    6dd2:	46bd      	mov	sp, r7
    6dd4:	b002      	add	sp, #8
    6dd6:	bd80      	pop	{r7, pc}
    6dd8:	0000ffff 	.word	0x0000ffff
    6ddc:	20001444 	.word	0x20001444
    6de0:	00006ef5 	.word	0x00006ef5
    6de4:	20000000 	.word	0x20000000
    6de8:	00006f11 	.word	0x00006f11
    6dec:	0000701d 	.word	0x0000701d

00006df0 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev>:
    6df0:	b580      	push	{r7, lr}
    6df2:	af00      	add	r7, sp, #0
    6df4:	4b03      	ldr	r3, [pc, #12]	; (6e04 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x14>)
    6df6:	0019      	movs	r1, r3
    6df8:	2001      	movs	r0, #1
    6dfa:	4b03      	ldr	r3, [pc, #12]	; (6e08 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x18>)
    6dfc:	4798      	blx	r3
    6dfe:	46bd      	mov	sp, r7
    6e00:	bd80      	pop	{r7, pc}
    6e02:	46c0      	nop			; (mov r8, r8)
    6e04:	0000ffff 	.word	0x0000ffff
    6e08:	00006da5 	.word	0x00006da5

00006e0c <hri_port_set_OUT_reg>:
{
    6e0c:	b580      	push	{r7, lr}
    6e0e:	b084      	sub	sp, #16
    6e10:	af00      	add	r7, sp, #0
    6e12:	60f8      	str	r0, [r7, #12]
    6e14:	607a      	str	r2, [r7, #4]
    6e16:	230b      	movs	r3, #11
    6e18:	18fb      	adds	r3, r7, r3
    6e1a:	1c0a      	adds	r2, r1, #0
    6e1c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e1e:	230b      	movs	r3, #11
    6e20:	18fb      	adds	r3, r7, r3
    6e22:	781b      	ldrb	r3, [r3, #0]
    6e24:	68fa      	ldr	r2, [r7, #12]
    6e26:	01db      	lsls	r3, r3, #7
    6e28:	18d3      	adds	r3, r2, r3
    6e2a:	3318      	adds	r3, #24
    6e2c:	687a      	ldr	r2, [r7, #4]
    6e2e:	601a      	str	r2, [r3, #0]
}
    6e30:	46c0      	nop			; (mov r8, r8)
    6e32:	46bd      	mov	sp, r7
    6e34:	b004      	add	sp, #16
    6e36:	bd80      	pop	{r7, pc}

00006e38 <hri_port_clear_OUT_reg>:
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b084      	sub	sp, #16
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	60f8      	str	r0, [r7, #12]
    6e40:	607a      	str	r2, [r7, #4]
    6e42:	230b      	movs	r3, #11
    6e44:	18fb      	adds	r3, r7, r3
    6e46:	1c0a      	adds	r2, r1, #0
    6e48:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6e4a:	230b      	movs	r3, #11
    6e4c:	18fb      	adds	r3, r7, r3
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	68fa      	ldr	r2, [r7, #12]
    6e52:	01db      	lsls	r3, r3, #7
    6e54:	18d3      	adds	r3, r2, r3
    6e56:	3314      	adds	r3, #20
    6e58:	687a      	ldr	r2, [r7, #4]
    6e5a:	601a      	str	r2, [r3, #0]
}
    6e5c:	46c0      	nop			; (mov r8, r8)
    6e5e:	46bd      	mov	sp, r7
    6e60:	b004      	add	sp, #16
    6e62:	bd80      	pop	{r7, pc}

00006e64 <_gpio_set_level>:
{
    6e64:	b580      	push	{r7, lr}
    6e66:	b082      	sub	sp, #8
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6039      	str	r1, [r7, #0]
    6e6c:	0011      	movs	r1, r2
    6e6e:	1dfb      	adds	r3, r7, #7
    6e70:	1c02      	adds	r2, r0, #0
    6e72:	701a      	strb	r2, [r3, #0]
    6e74:	1dbb      	adds	r3, r7, #6
    6e76:	1c0a      	adds	r2, r1, #0
    6e78:	701a      	strb	r2, [r3, #0]
	if (level) {
    6e7a:	1dbb      	adds	r3, r7, #6
    6e7c:	781b      	ldrb	r3, [r3, #0]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d008      	beq.n	6e94 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    6e82:	683a      	ldr	r2, [r7, #0]
    6e84:	1dfb      	adds	r3, r7, #7
    6e86:	7819      	ldrb	r1, [r3, #0]
    6e88:	23c0      	movs	r3, #192	; 0xc0
    6e8a:	05db      	lsls	r3, r3, #23
    6e8c:	0018      	movs	r0, r3
    6e8e:	4b07      	ldr	r3, [pc, #28]	; (6eac <_gpio_set_level+0x48>)
    6e90:	4798      	blx	r3
}
    6e92:	e007      	b.n	6ea4 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    6e94:	683a      	ldr	r2, [r7, #0]
    6e96:	1dfb      	adds	r3, r7, #7
    6e98:	7819      	ldrb	r1, [r3, #0]
    6e9a:	23c0      	movs	r3, #192	; 0xc0
    6e9c:	05db      	lsls	r3, r3, #23
    6e9e:	0018      	movs	r0, r3
    6ea0:	4b03      	ldr	r3, [pc, #12]	; (6eb0 <_gpio_set_level+0x4c>)
    6ea2:	4798      	blx	r3
}
    6ea4:	46c0      	nop			; (mov r8, r8)
    6ea6:	46bd      	mov	sp, r7
    6ea8:	b002      	add	sp, #8
    6eaa:	bd80      	pop	{r7, pc}
    6eac:	00006e0d 	.word	0x00006e0d
    6eb0:	00006e39 	.word	0x00006e39

00006eb4 <gpio_set_pin_level>:
{
    6eb4:	b580      	push	{r7, lr}
    6eb6:	b082      	sub	sp, #8
    6eb8:	af00      	add	r7, sp, #0
    6eba:	0002      	movs	r2, r0
    6ebc:	1dfb      	adds	r3, r7, #7
    6ebe:	701a      	strb	r2, [r3, #0]
    6ec0:	1dbb      	adds	r3, r7, #6
    6ec2:	1c0a      	adds	r2, r1, #0
    6ec4:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    6ec6:	1dfb      	adds	r3, r7, #7
    6ec8:	781b      	ldrb	r3, [r3, #0]
    6eca:	115b      	asrs	r3, r3, #5
    6ecc:	b2d8      	uxtb	r0, r3
    6ece:	1dfb      	adds	r3, r7, #7
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	001a      	movs	r2, r3
    6ed4:	231f      	movs	r3, #31
    6ed6:	4013      	ands	r3, r2
    6ed8:	2201      	movs	r2, #1
    6eda:	409a      	lsls	r2, r3
    6edc:	0011      	movs	r1, r2
    6ede:	1dbb      	adds	r3, r7, #6
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	001a      	movs	r2, r3
    6ee4:	4b02      	ldr	r3, [pc, #8]	; (6ef0 <gpio_set_pin_level+0x3c>)
    6ee6:	4798      	blx	r3
}
    6ee8:	46c0      	nop			; (mov r8, r8)
    6eea:	46bd      	mov	sp, r7
    6eec:	b002      	add	sp, #8
    6eee:	bd80      	pop	{r7, pc}
    6ef0:	00006e65 	.word	0x00006e65

00006ef4 <_ZN17SPI_Syn_ZCD_ClassC1Ev>:
SPI_Syn_ZCD_Class	*ptrSPISyncZCD;



// default constructor
SPI_Syn_ZCD_Class::SPI_Syn_ZCD_Class()
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b082      	sub	sp, #8
    6ef8:	af00      	add	r7, sp, #0
    6efa:	6078      	str	r0, [r7, #4]
{
		ptrSPISyncZCD=this;
    6efc:	4b03      	ldr	r3, [pc, #12]	; (6f0c <_ZN17SPI_Syn_ZCD_ClassC1Ev+0x18>)
    6efe:	687a      	ldr	r2, [r7, #4]
    6f00:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	0018      	movs	r0, r3
    6f06:	46bd      	mov	sp, r7
    6f08:	b002      	add	sp, #8
    6f0a:	bd80      	pop	{r7, pc}
    6f0c:	20001454 	.word	0x20001454

00006f10 <_ZN17SPI_Syn_ZCD_ClassD1Ev>:



// default destructor
SPI_Syn_ZCD_Class::~SPI_Syn_ZCD_Class()
    6f10:	b580      	push	{r7, lr}
    6f12:	b082      	sub	sp, #8
    6f14:	af00      	add	r7, sp, #0
    6f16:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    6f18:	687b      	ldr	r3, [r7, #4]
    6f1a:	0018      	movs	r0, r3
    6f1c:	46bd      	mov	sp, r7
    6f1e:	b002      	add	sp, #8
    6f20:	bd80      	pop	{r7, pc}
	...

00006f24 <_ZN17SPI_Syn_ZCD_Class4InitEv>:

void SPI_Syn_ZCD_Class::Init(){
    6f24:	b580      	push	{r7, lr}
    6f26:	b082      	sub	sp, #8
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]

		spi_m_sync_get_io_descriptor(&SPI_ZCD, &io);
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	330c      	adds	r3, #12
    6f30:	001a      	movs	r2, r3
    6f32:	4b08      	ldr	r3, [pc, #32]	; (6f54 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x30>)
    6f34:	0011      	movs	r1, r2
    6f36:	0018      	movs	r0, r3
    6f38:	4b07      	ldr	r3, [pc, #28]	; (6f58 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x34>)
    6f3a:	4798      	blx	r3

	Enable();
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	0018      	movs	r0, r3
    6f40:	4b06      	ldr	r3, [pc, #24]	; (6f5c <_ZN17SPI_Syn_ZCD_Class4InitEv+0x38>)
    6f42:	4798      	blx	r3
	ready=true;
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	2201      	movs	r2, #1
    6f48:	701a      	strb	r2, [r3, #0]
	
}
    6f4a:	46c0      	nop			; (mov r8, r8)
    6f4c:	46bd      	mov	sp, r7
    6f4e:	b002      	add	sp, #8
    6f50:	bd80      	pop	{r7, pc}
    6f52:	46c0      	nop			; (mov r8, r8)
    6f54:	20001534 	.word	0x20001534
    6f58:	000026f1 	.word	0x000026f1
    6f5c:	00006f61 	.word	0x00006f61

00006f60 <_ZN17SPI_Syn_ZCD_Class6EnableEv>:



uint8_t SPI_Syn_ZCD_Class::Enable(){
    6f60:	b580      	push	{r7, lr}
    6f62:	b082      	sub	sp, #8
    6f64:	af00      	add	r7, sp, #0
    6f66:	6078      	str	r0, [r7, #4]
	
	spi_m_sync_enable(&SPI_ZCD);
    6f68:	4b04      	ldr	r3, [pc, #16]	; (6f7c <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x1c>)
    6f6a:	0018      	movs	r0, r3
    6f6c:	4b04      	ldr	r3, [pc, #16]	; (6f80 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x20>)
    6f6e:	4798      	blx	r3
	return 0;
    6f70:	2300      	movs	r3, #0
}
    6f72:	0018      	movs	r0, r3
    6f74:	46bd      	mov	sp, r7
    6f76:	b002      	add	sp, #8
    6f78:	bd80      	pop	{r7, pc}
    6f7a:	46c0      	nop			; (mov r8, r8)
    6f7c:	20001534 	.word	0x20001534
    6f80:	00002609 	.word	0x00002609

00006f84 <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh>:

uint8_t  SPI_Syn_ZCD_Class::Write(const uint8_t * p, uint8_t n){
    6f84:	b580      	push	{r7, lr}
    6f86:	b084      	sub	sp, #16
    6f88:	af00      	add	r7, sp, #0
    6f8a:	60f8      	str	r0, [r7, #12]
    6f8c:	60b9      	str	r1, [r7, #8]
    6f8e:	1dfb      	adds	r3, r7, #7
    6f90:	701a      	strb	r2, [r3, #0]
	ready=false;
    6f92:	68fb      	ldr	r3, [r7, #12]
    6f94:	2200      	movs	r2, #0
    6f96:	701a      	strb	r2, [r3, #0]
	io_write(io, p, (uint16_t)n);
    6f98:	68fb      	ldr	r3, [r7, #12]
    6f9a:	68d8      	ldr	r0, [r3, #12]
    6f9c:	1dfb      	adds	r3, r7, #7
    6f9e:	781b      	ldrb	r3, [r3, #0]
    6fa0:	b29a      	uxth	r2, r3
    6fa2:	68bb      	ldr	r3, [r7, #8]
    6fa4:	0019      	movs	r1, r3
    6fa6:	4b04      	ldr	r3, [pc, #16]	; (6fb8 <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh+0x34>)
    6fa8:	4798      	blx	r3

	return n;
    6faa:	1dfb      	adds	r3, r7, #7
    6fac:	781b      	ldrb	r3, [r3, #0]
}
    6fae:	0018      	movs	r0, r3
    6fb0:	46bd      	mov	sp, r7
    6fb2:	b004      	add	sp, #16
    6fb4:	bd80      	pop	{r7, pc}
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	00002541 	.word	0x00002541

00006fbc <_ZN17SPI_Syn_ZCD_Class4ReadEPhh>:
uint8_t  SPI_Syn_ZCD_Class::Read(uint8_t * p, uint8_t n){
    6fbc:	b580      	push	{r7, lr}
    6fbe:	b084      	sub	sp, #16
    6fc0:	af00      	add	r7, sp, #0
    6fc2:	60f8      	str	r0, [r7, #12]
    6fc4:	60b9      	str	r1, [r7, #8]
    6fc6:	1dfb      	adds	r3, r7, #7
    6fc8:	701a      	strb	r2, [r3, #0]
	ready=false;
    6fca:	68fb      	ldr	r3, [r7, #12]
    6fcc:	2200      	movs	r2, #0
    6fce:	701a      	strb	r2, [r3, #0]
		io_read(io, p, (uint16_t)n);
    6fd0:	68fb      	ldr	r3, [r7, #12]
    6fd2:	68d8      	ldr	r0, [r3, #12]
    6fd4:	1dfb      	adds	r3, r7, #7
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	b29a      	uxth	r2, r3
    6fda:	68bb      	ldr	r3, [r7, #8]
    6fdc:	0019      	movs	r1, r3
    6fde:	4b04      	ldr	r3, [pc, #16]	; (6ff0 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh+0x34>)
    6fe0:	4798      	blx	r3

	
	return n;
    6fe2:	1dfb      	adds	r3, r7, #7
    6fe4:	781b      	ldrb	r3, [r3, #0]
}
    6fe6:	0018      	movs	r0, r3
    6fe8:	46bd      	mov	sp, r7
    6fea:	b004      	add	sp, #16
    6fec:	bd80      	pop	{r7, pc}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	00002579 	.word	0x00002579

00006ff4 <_ZN17SPI_Syn_ZCD_Class5SetCSEb>:
void SPI_Syn_ZCD_Class::Disable(void){
	//SPI_LMX_disable();
	spi_m_sync_disable(&SPI_ZCD);
	
}
void SPI_Syn_ZCD_Class::SetCS(bool st){
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b082      	sub	sp, #8
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]
    6ffc:	000a      	movs	r2, r1
    6ffe:	1cfb      	adds	r3, r7, #3
    7000:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(CS_ZCD,st);
    7002:	1cfb      	adds	r3, r7, #3
    7004:	781b      	ldrb	r3, [r3, #0]
    7006:	0019      	movs	r1, r3
    7008:	2003      	movs	r0, #3
    700a:	4b03      	ldr	r3, [pc, #12]	; (7018 <_ZN17SPI_Syn_ZCD_Class5SetCSEb+0x24>)
    700c:	4798      	blx	r3
}
    700e:	46c0      	nop			; (mov r8, r8)
    7010:	46bd      	mov	sp, r7
    7012:	b002      	add	sp, #8
    7014:	bd80      	pop	{r7, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	00006eb5 	.word	0x00006eb5

0000701c <__aeabi_atexit>:
    701c:	000b      	movs	r3, r1
    701e:	b510      	push	{r4, lr}
    7020:	0001      	movs	r1, r0
    7022:	0018      	movs	r0, r3
    7024:	f004 ff44 	bl	beb0 <__cxa_atexit>
    7028:	bd10      	pop	{r4, pc}
    702a:	46c0      	nop			; (mov r8, r8)

0000702c <floor>:
    702c:	4a45      	ldr	r2, [pc, #276]	; (7144 <floor+0x118>)
    702e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7030:	4657      	mov	r7, sl
    7032:	4692      	mov	sl, r2
    7034:	004b      	lsls	r3, r1, #1
    7036:	0d5b      	lsrs	r3, r3, #21
    7038:	449a      	add	sl, r3
    703a:	464e      	mov	r6, r9
    703c:	4645      	mov	r5, r8
    703e:	46de      	mov	lr, fp
    7040:	4652      	mov	r2, sl
    7042:	b5e0      	push	{r5, r6, r7, lr}
    7044:	000c      	movs	r4, r1
    7046:	0005      	movs	r5, r0
    7048:	000e      	movs	r6, r1
    704a:	4689      	mov	r9, r1
    704c:	0007      	movs	r7, r0
    704e:	2a13      	cmp	r2, #19
    7050:	dc22      	bgt.n	7098 <floor+0x6c>
    7052:	2a00      	cmp	r2, #0
    7054:	db47      	blt.n	70e6 <floor+0xba>
    7056:	4652      	mov	r2, sl
    7058:	4b3b      	ldr	r3, [pc, #236]	; (7148 <floor+0x11c>)
    705a:	4113      	asrs	r3, r2
    705c:	4698      	mov	r8, r3
    705e:	000b      	movs	r3, r1
    7060:	4642      	mov	r2, r8
    7062:	4013      	ands	r3, r2
    7064:	4303      	orrs	r3, r0
    7066:	d011      	beq.n	708c <floor+0x60>
    7068:	4a38      	ldr	r2, [pc, #224]	; (714c <floor+0x120>)
    706a:	4b39      	ldr	r3, [pc, #228]	; (7150 <floor+0x124>)
    706c:	f003 f852 	bl	a114 <__aeabi_dadd>
    7070:	2200      	movs	r2, #0
    7072:	2300      	movs	r3, #0
    7074:	f001 ffec 	bl	9050 <__aeabi_dcmpgt>
    7078:	2800      	cmp	r0, #0
    707a:	d005      	beq.n	7088 <floor+0x5c>
    707c:	2c00      	cmp	r4, #0
    707e:	db41      	blt.n	7104 <floor+0xd8>
    7080:	464e      	mov	r6, r9
    7082:	4643      	mov	r3, r8
    7084:	2700      	movs	r7, #0
    7086:	439e      	bics	r6, r3
    7088:	0038      	movs	r0, r7
    708a:	0031      	movs	r1, r6
    708c:	bc3c      	pop	{r2, r3, r4, r5}
    708e:	4690      	mov	r8, r2
    7090:	4699      	mov	r9, r3
    7092:	46a2      	mov	sl, r4
    7094:	46ab      	mov	fp, r5
    7096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7098:	4652      	mov	r2, sl
    709a:	2a33      	cmp	r2, #51	; 0x33
    709c:	dd08      	ble.n	70b0 <floor+0x84>
    709e:	2380      	movs	r3, #128	; 0x80
    70a0:	00db      	lsls	r3, r3, #3
    70a2:	459a      	cmp	sl, r3
    70a4:	d1f2      	bne.n	708c <floor+0x60>
    70a6:	0002      	movs	r2, r0
    70a8:	000b      	movs	r3, r1
    70aa:	f003 f833 	bl	a114 <__aeabi_dadd>
    70ae:	e7ed      	b.n	708c <floor+0x60>
    70b0:	4a28      	ldr	r2, [pc, #160]	; (7154 <floor+0x128>)
    70b2:	4694      	mov	ip, r2
    70b4:	2201      	movs	r2, #1
    70b6:	4463      	add	r3, ip
    70b8:	4252      	negs	r2, r2
    70ba:	40da      	lsrs	r2, r3
    70bc:	4693      	mov	fp, r2
    70be:	4202      	tst	r2, r0
    70c0:	d0e4      	beq.n	708c <floor+0x60>
    70c2:	4a22      	ldr	r2, [pc, #136]	; (714c <floor+0x120>)
    70c4:	4b22      	ldr	r3, [pc, #136]	; (7150 <floor+0x124>)
    70c6:	f003 f825 	bl	a114 <__aeabi_dadd>
    70ca:	2200      	movs	r2, #0
    70cc:	2300      	movs	r3, #0
    70ce:	f001 ffbf 	bl	9050 <__aeabi_dcmpgt>
    70d2:	2800      	cmp	r0, #0
    70d4:	d0d8      	beq.n	7088 <floor+0x5c>
    70d6:	2c00      	cmp	r4, #0
    70d8:	db1a      	blt.n	7110 <floor+0xe4>
    70da:	465b      	mov	r3, fp
    70dc:	464e      	mov	r6, r9
    70de:	439f      	bics	r7, r3
    70e0:	0038      	movs	r0, r7
    70e2:	0031      	movs	r1, r6
    70e4:	e7d2      	b.n	708c <floor+0x60>
    70e6:	4a19      	ldr	r2, [pc, #100]	; (714c <floor+0x120>)
    70e8:	4b19      	ldr	r3, [pc, #100]	; (7150 <floor+0x124>)
    70ea:	f003 f813 	bl	a114 <__aeabi_dadd>
    70ee:	2200      	movs	r2, #0
    70f0:	2300      	movs	r3, #0
    70f2:	f001 ffad 	bl	9050 <__aeabi_dcmpgt>
    70f6:	2800      	cmp	r0, #0
    70f8:	d0c6      	beq.n	7088 <floor+0x5c>
    70fa:	2c00      	cmp	r4, #0
    70fc:	db16      	blt.n	712c <floor+0x100>
    70fe:	2700      	movs	r7, #0
    7100:	2600      	movs	r6, #0
    7102:	e7c1      	b.n	7088 <floor+0x5c>
    7104:	2380      	movs	r3, #128	; 0x80
    7106:	4652      	mov	r2, sl
    7108:	035b      	lsls	r3, r3, #13
    710a:	4113      	asrs	r3, r2
    710c:	4499      	add	r9, r3
    710e:	e7b7      	b.n	7080 <floor+0x54>
    7110:	4653      	mov	r3, sl
    7112:	2b14      	cmp	r3, #20
    7114:	d012      	beq.n	713c <floor+0x110>
    7116:	2334      	movs	r3, #52	; 0x34
    7118:	4652      	mov	r2, sl
    711a:	2701      	movs	r7, #1
    711c:	1a9b      	subs	r3, r3, r2
    711e:	409f      	lsls	r7, r3
    7120:	197f      	adds	r7, r7, r5
    7122:	42af      	cmp	r7, r5
    7124:	419b      	sbcs	r3, r3
    7126:	425b      	negs	r3, r3
    7128:	4499      	add	r9, r3
    712a:	e7d6      	b.n	70da <floor+0xae>
    712c:	0064      	lsls	r4, r4, #1
    712e:	0864      	lsrs	r4, r4, #1
    7130:	4325      	orrs	r5, r4
    7132:	2700      	movs	r7, #0
    7134:	2d00      	cmp	r5, #0
    7136:	d0a7      	beq.n	7088 <floor+0x5c>
    7138:	4e07      	ldr	r6, [pc, #28]	; (7158 <floor+0x12c>)
    713a:	e7a5      	b.n	7088 <floor+0x5c>
    713c:	3b13      	subs	r3, #19
    713e:	469c      	mov	ip, r3
    7140:	44e1      	add	r9, ip
    7142:	e7ca      	b.n	70da <floor+0xae>
    7144:	fffffc01 	.word	0xfffffc01
    7148:	000fffff 	.word	0x000fffff
    714c:	8800759c 	.word	0x8800759c
    7150:	7e37e43c 	.word	0x7e37e43c
    7154:	fffffbed 	.word	0xfffffbed
    7158:	bff00000 	.word	0xbff00000

0000715c <floorf>:
    715c:	b5f0      	push	{r4, r5, r6, r7, lr}
    715e:	46c6      	mov	lr, r8
    7160:	0043      	lsls	r3, r0, #1
    7162:	085f      	lsrs	r7, r3, #1
    7164:	0e1b      	lsrs	r3, r3, #24
    7166:	3b7f      	subs	r3, #127	; 0x7f
    7168:	b500      	push	{lr}
    716a:	1c05      	adds	r5, r0, #0
    716c:	001c      	movs	r4, r3
    716e:	2b16      	cmp	r3, #22
    7170:	dc18      	bgt.n	71a4 <floorf+0x48>
    7172:	4680      	mov	r8, r0
    7174:	2b00      	cmp	r3, #0
    7176:	db1e      	blt.n	71b6 <floorf+0x5a>
    7178:	4f1b      	ldr	r7, [pc, #108]	; (71e8 <floorf+0x8c>)
    717a:	1c06      	adds	r6, r0, #0
    717c:	411f      	asrs	r7, r3
    717e:	4207      	tst	r7, r0
    7180:	d00c      	beq.n	719c <floorf+0x40>
    7182:	491a      	ldr	r1, [pc, #104]	; (71ec <floorf+0x90>)
    7184:	f002 f8d2 	bl	932c <__aeabi_fadd>
    7188:	2100      	movs	r1, #0
    718a:	f001 ff9b 	bl	90c4 <__aeabi_fcmpgt>
    718e:	2800      	cmp	r0, #0
    7190:	d004      	beq.n	719c <floorf+0x40>
    7192:	2d00      	cmp	r5, #0
    7194:	db1d      	blt.n	71d2 <floorf+0x76>
    7196:	4643      	mov	r3, r8
    7198:	43bb      	bics	r3, r7
    719a:	001e      	movs	r6, r3
    719c:	1c30      	adds	r0, r6, #0
    719e:	bc04      	pop	{r2}
    71a0:	4690      	mov	r8, r2
    71a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71a4:	4b12      	ldr	r3, [pc, #72]	; (71f0 <floorf+0x94>)
    71a6:	1c06      	adds	r6, r0, #0
    71a8:	429f      	cmp	r7, r3
    71aa:	d9f7      	bls.n	719c <floorf+0x40>
    71ac:	1c01      	adds	r1, r0, #0
    71ae:	f002 f8bd 	bl	932c <__aeabi_fadd>
    71b2:	1c06      	adds	r6, r0, #0
    71b4:	e7f2      	b.n	719c <floorf+0x40>
    71b6:	490d      	ldr	r1, [pc, #52]	; (71ec <floorf+0x90>)
    71b8:	f002 f8b8 	bl	932c <__aeabi_fadd>
    71bc:	2100      	movs	r1, #0
    71be:	f001 ff81 	bl	90c4 <__aeabi_fcmpgt>
    71c2:	2800      	cmp	r0, #0
    71c4:	d003      	beq.n	71ce <floorf+0x72>
    71c6:	2d00      	cmp	r5, #0
    71c8:	db09      	blt.n	71de <floorf+0x82>
    71ca:	2600      	movs	r6, #0
    71cc:	e7e6      	b.n	719c <floorf+0x40>
    71ce:	1c2e      	adds	r6, r5, #0
    71d0:	e7e4      	b.n	719c <floorf+0x40>
    71d2:	2380      	movs	r3, #128	; 0x80
    71d4:	041b      	lsls	r3, r3, #16
    71d6:	4123      	asrs	r3, r4
    71d8:	4698      	mov	r8, r3
    71da:	44a8      	add	r8, r5
    71dc:	e7db      	b.n	7196 <floorf+0x3a>
    71de:	2f00      	cmp	r7, #0
    71e0:	d0f5      	beq.n	71ce <floorf+0x72>
    71e2:	4e04      	ldr	r6, [pc, #16]	; (71f4 <floorf+0x98>)
    71e4:	e7da      	b.n	719c <floorf+0x40>
    71e6:	46c0      	nop			; (mov r8, r8)
    71e8:	007fffff 	.word	0x007fffff
    71ec:	7149f2ca 	.word	0x7149f2ca
    71f0:	7f7fffff 	.word	0x7f7fffff
    71f4:	bf800000 	.word	0xbf800000

000071f8 <roundf>:
    71f8:	0043      	lsls	r3, r0, #1
    71fa:	0e1b      	lsrs	r3, r3, #24
    71fc:	3b7f      	subs	r3, #127	; 0x7f
    71fe:	b510      	push	{r4, lr}
    7200:	0002      	movs	r2, r0
    7202:	2b16      	cmp	r3, #22
    7204:	dc0b      	bgt.n	721e <roundf+0x26>
    7206:	2b00      	cmp	r3, #0
    7208:	db0f      	blt.n	722a <roundf+0x32>
    720a:	490c      	ldr	r1, [pc, #48]	; (723c <roundf+0x44>)
    720c:	4119      	asrs	r1, r3
    720e:	4201      	tst	r1, r0
    7210:	d004      	beq.n	721c <roundf+0x24>
    7212:	2080      	movs	r0, #128	; 0x80
    7214:	03c0      	lsls	r0, r0, #15
    7216:	4118      	asrs	r0, r3
    7218:	1880      	adds	r0, r0, r2
    721a:	4388      	bics	r0, r1
    721c:	bd10      	pop	{r4, pc}
    721e:	2b80      	cmp	r3, #128	; 0x80
    7220:	d1fc      	bne.n	721c <roundf+0x24>
    7222:	1c01      	adds	r1, r0, #0
    7224:	f002 f882 	bl	932c <__aeabi_fadd>
    7228:	e7f8      	b.n	721c <roundf+0x24>
    722a:	0fc0      	lsrs	r0, r0, #31
    722c:	07c0      	lsls	r0, r0, #31
    722e:	3301      	adds	r3, #1
    7230:	d1f4      	bne.n	721c <roundf+0x24>
    7232:	23fe      	movs	r3, #254	; 0xfe
    7234:	059b      	lsls	r3, r3, #22
    7236:	4318      	orrs	r0, r3
    7238:	e7f0      	b.n	721c <roundf+0x24>
    723a:	46c0      	nop			; (mov r8, r8)
    723c:	007fffff 	.word	0x007fffff

00007240 <exp>:
    7240:	b5f0      	push	{r4, r5, r6, r7, lr}
    7242:	4647      	mov	r7, r8
    7244:	46ce      	mov	lr, r9
    7246:	b580      	push	{r7, lr}
    7248:	b08b      	sub	sp, #44	; 0x2c
    724a:	0004      	movs	r4, r0
    724c:	000d      	movs	r5, r1
    724e:	f000 faad 	bl	77ac <__ieee754_exp>
    7252:	4b34      	ldr	r3, [pc, #208]	; (7324 <exp+0xe4>)
    7254:	0006      	movs	r6, r0
    7256:	4698      	mov	r8, r3
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	000f      	movs	r7, r1
    725c:	b25b      	sxtb	r3, r3
    725e:	3301      	adds	r3, #1
    7260:	d038      	beq.n	72d4 <exp+0x94>
    7262:	0020      	movs	r0, r4
    7264:	0029      	movs	r1, r5
    7266:	f001 fc2f 	bl	8ac8 <finite>
    726a:	2800      	cmp	r0, #0
    726c:	d032      	beq.n	72d4 <exp+0x94>
    726e:	4a2e      	ldr	r2, [pc, #184]	; (7328 <exp+0xe8>)
    7270:	4b2e      	ldr	r3, [pc, #184]	; (732c <exp+0xec>)
    7272:	0020      	movs	r0, r4
    7274:	0029      	movs	r1, r5
    7276:	f001 feeb 	bl	9050 <__aeabi_dcmpgt>
    727a:	4681      	mov	r9, r0
    727c:	2800      	cmp	r0, #0
    727e:	d130      	bne.n	72e2 <exp+0xa2>
    7280:	4a2b      	ldr	r2, [pc, #172]	; (7330 <exp+0xf0>)
    7282:	4b2c      	ldr	r3, [pc, #176]	; (7334 <exp+0xf4>)
    7284:	0020      	movs	r0, r4
    7286:	0029      	movs	r1, r5
    7288:	f001 fece 	bl	9028 <__aeabi_dcmplt>
    728c:	2800      	cmp	r0, #0
    728e:	d021      	beq.n	72d4 <exp+0x94>
    7290:	2304      	movs	r3, #4
    7292:	9300      	str	r3, [sp, #0]
    7294:	4b28      	ldr	r3, [pc, #160]	; (7338 <exp+0xf8>)
    7296:	2200      	movs	r2, #0
    7298:	9301      	str	r3, [sp, #4]
    729a:	464b      	mov	r3, r9
    729c:	9308      	str	r3, [sp, #32]
    729e:	2300      	movs	r3, #0
    72a0:	9206      	str	r2, [sp, #24]
    72a2:	9307      	str	r3, [sp, #28]
    72a4:	4643      	mov	r3, r8
    72a6:	781b      	ldrb	r3, [r3, #0]
    72a8:	466e      	mov	r6, sp
    72aa:	b25b      	sxtb	r3, r3
    72ac:	9404      	str	r4, [sp, #16]
    72ae:	9505      	str	r5, [sp, #20]
    72b0:	9402      	str	r4, [sp, #8]
    72b2:	9503      	str	r5, [sp, #12]
    72b4:	2b02      	cmp	r3, #2
    72b6:	d030      	beq.n	731a <exp+0xda>
    72b8:	0030      	movs	r0, r6
    72ba:	f001 fc0f 	bl	8adc <matherr>
    72be:	2800      	cmp	r0, #0
    72c0:	d02b      	beq.n	731a <exp+0xda>
    72c2:	6a33      	ldr	r3, [r6, #32]
    72c4:	2b00      	cmp	r3, #0
    72c6:	d003      	beq.n	72d0 <exp+0x90>
    72c8:	f004 fdfa 	bl	bec0 <__errno>
    72cc:	6a33      	ldr	r3, [r6, #32]
    72ce:	6003      	str	r3, [r0, #0]
    72d0:	69f7      	ldr	r7, [r6, #28]
    72d2:	69b6      	ldr	r6, [r6, #24]
    72d4:	0030      	movs	r0, r6
    72d6:	0039      	movs	r1, r7
    72d8:	b00b      	add	sp, #44	; 0x2c
    72da:	bc0c      	pop	{r2, r3}
    72dc:	4690      	mov	r8, r2
    72de:	4699      	mov	r9, r3
    72e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72e2:	2303      	movs	r3, #3
    72e4:	9300      	str	r3, [sp, #0]
    72e6:	4b14      	ldr	r3, [pc, #80]	; (7338 <exp+0xf8>)
    72e8:	466e      	mov	r6, sp
    72ea:	9301      	str	r3, [sp, #4]
    72ec:	2300      	movs	r3, #0
    72ee:	9308      	str	r3, [sp, #32]
    72f0:	4643      	mov	r3, r8
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	9404      	str	r4, [sp, #16]
    72f6:	9505      	str	r5, [sp, #20]
    72f8:	b25b      	sxtb	r3, r3
    72fa:	9402      	str	r4, [sp, #8]
    72fc:	9503      	str	r5, [sp, #12]
    72fe:	2b00      	cmp	r3, #0
    7300:	d105      	bne.n	730e <exp+0xce>
    7302:	22e0      	movs	r2, #224	; 0xe0
    7304:	4b0d      	ldr	r3, [pc, #52]	; (733c <exp+0xfc>)
    7306:	0612      	lsls	r2, r2, #24
    7308:	9206      	str	r2, [sp, #24]
    730a:	9307      	str	r3, [sp, #28]
    730c:	e7d4      	b.n	72b8 <exp+0x78>
    730e:	2000      	movs	r0, #0
    7310:	490b      	ldr	r1, [pc, #44]	; (7340 <exp+0x100>)
    7312:	9006      	str	r0, [sp, #24]
    7314:	9107      	str	r1, [sp, #28]
    7316:	2b02      	cmp	r3, #2
    7318:	d1ce      	bne.n	72b8 <exp+0x78>
    731a:	f004 fdd1 	bl	bec0 <__errno>
    731e:	2322      	movs	r3, #34	; 0x22
    7320:	6003      	str	r3, [r0, #0]
    7322:	e7ce      	b.n	72c2 <exp+0x82>
    7324:	2000006c 	.word	0x2000006c
    7328:	fefa39ef 	.word	0xfefa39ef
    732c:	40862e42 	.word	0x40862e42
    7330:	d52d3051 	.word	0xd52d3051
    7334:	c0874910 	.word	0xc0874910
    7338:	00011158 	.word	0x00011158
    733c:	47efffff 	.word	0x47efffff
    7340:	7ff00000 	.word	0x7ff00000

00007344 <log>:
    7344:	b5f0      	push	{r4, r5, r6, r7, lr}
    7346:	46c6      	mov	lr, r8
    7348:	b500      	push	{lr}
    734a:	b08c      	sub	sp, #48	; 0x30
    734c:	0004      	movs	r4, r0
    734e:	000d      	movs	r5, r1
    7350:	f000 fb9e 	bl	7a90 <__ieee754_log>
    7354:	4b3a      	ldr	r3, [pc, #232]	; (7440 <log+0xfc>)
    7356:	0006      	movs	r6, r0
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	000f      	movs	r7, r1
    735c:	b25b      	sxtb	r3, r3
    735e:	4698      	mov	r8, r3
    7360:	3301      	adds	r3, #1
    7362:	d00f      	beq.n	7384 <log+0x40>
    7364:	0022      	movs	r2, r4
    7366:	002b      	movs	r3, r5
    7368:	0020      	movs	r0, r4
    736a:	0029      	movs	r1, r5
    736c:	f004 fbac 	bl	bac8 <__aeabi_dcmpun>
    7370:	2800      	cmp	r0, #0
    7372:	d107      	bne.n	7384 <log+0x40>
    7374:	2200      	movs	r2, #0
    7376:	2300      	movs	r3, #0
    7378:	0020      	movs	r0, r4
    737a:	0029      	movs	r1, r5
    737c:	f001 fe68 	bl	9050 <__aeabi_dcmpgt>
    7380:	2800      	cmp	r0, #0
    7382:	d005      	beq.n	7390 <log+0x4c>
    7384:	0030      	movs	r0, r6
    7386:	0039      	movs	r1, r7
    7388:	b00c      	add	sp, #48	; 0x30
    738a:	bc04      	pop	{r2}
    738c:	4690      	mov	r8, r2
    738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7390:	4b2c      	ldr	r3, [pc, #176]	; (7444 <log+0x100>)
    7392:	900a      	str	r0, [sp, #40]	; 0x28
    7394:	9303      	str	r3, [sp, #12]
    7396:	4643      	mov	r3, r8
    7398:	9404      	str	r4, [sp, #16]
    739a:	9505      	str	r5, [sp, #20]
    739c:	9406      	str	r4, [sp, #24]
    739e:	9507      	str	r5, [sp, #28]
    73a0:	2b00      	cmp	r3, #0
    73a2:	d11a      	bne.n	73da <log+0x96>
    73a4:	22e0      	movs	r2, #224	; 0xe0
    73a6:	4b28      	ldr	r3, [pc, #160]	; (7448 <log+0x104>)
    73a8:	0612      	lsls	r2, r2, #24
    73aa:	9208      	str	r2, [sp, #32]
    73ac:	9309      	str	r3, [sp, #36]	; 0x24
    73ae:	0020      	movs	r0, r4
    73b0:	2200      	movs	r2, #0
    73b2:	2300      	movs	r3, #0
    73b4:	0029      	movs	r1, r5
    73b6:	f001 fe31 	bl	901c <__aeabi_dcmpeq>
    73ba:	2800      	cmp	r0, #0
    73bc:	d038      	beq.n	7430 <log+0xec>
    73be:	2302      	movs	r3, #2
    73c0:	9302      	str	r3, [sp, #8]
    73c2:	a802      	add	r0, sp, #8
    73c4:	f001 fb8a 	bl	8adc <matherr>
    73c8:	2800      	cmp	r0, #0
    73ca:	d017      	beq.n	73fc <log+0xb8>
    73cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73ce:	9301      	str	r3, [sp, #4]
    73d0:	2b00      	cmp	r3, #0
    73d2:	d118      	bne.n	7406 <log+0xc2>
    73d4:	9e08      	ldr	r6, [sp, #32]
    73d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    73d8:	e7d4      	b.n	7384 <log+0x40>
    73da:	2200      	movs	r2, #0
    73dc:	4b1b      	ldr	r3, [pc, #108]	; (744c <log+0x108>)
    73de:	0020      	movs	r0, r4
    73e0:	9208      	str	r2, [sp, #32]
    73e2:	9309      	str	r3, [sp, #36]	; 0x24
    73e4:	0029      	movs	r1, r5
    73e6:	2200      	movs	r2, #0
    73e8:	2300      	movs	r3, #0
    73ea:	f001 fe17 	bl	901c <__aeabi_dcmpeq>
    73ee:	2800      	cmp	r0, #0
    73f0:	d00f      	beq.n	7412 <log+0xce>
    73f2:	2302      	movs	r3, #2
    73f4:	9302      	str	r3, [sp, #8]
    73f6:	4643      	mov	r3, r8
    73f8:	2b02      	cmp	r3, #2
    73fa:	d1e2      	bne.n	73c2 <log+0x7e>
    73fc:	f004 fd60 	bl	bec0 <__errno>
    7400:	2322      	movs	r3, #34	; 0x22
    7402:	6003      	str	r3, [r0, #0]
    7404:	e7e2      	b.n	73cc <log+0x88>
    7406:	f004 fd5b 	bl	bec0 <__errno>
    740a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    740c:	9301      	str	r3, [sp, #4]
    740e:	6003      	str	r3, [r0, #0]
    7410:	e7e0      	b.n	73d4 <log+0x90>
    7412:	2301      	movs	r3, #1
    7414:	9302      	str	r3, [sp, #8]
    7416:	4643      	mov	r3, r8
    7418:	2b02      	cmp	r3, #2
    741a:	d10b      	bne.n	7434 <log+0xf0>
    741c:	f004 fd50 	bl	bec0 <__errno>
    7420:	2321      	movs	r3, #33	; 0x21
    7422:	6003      	str	r3, [r0, #0]
    7424:	480a      	ldr	r0, [pc, #40]	; (7450 <log+0x10c>)
    7426:	f001 fb5b 	bl	8ae0 <nan>
    742a:	9008      	str	r0, [sp, #32]
    742c:	9109      	str	r1, [sp, #36]	; 0x24
    742e:	e7cd      	b.n	73cc <log+0x88>
    7430:	2301      	movs	r3, #1
    7432:	9302      	str	r3, [sp, #8]
    7434:	a802      	add	r0, sp, #8
    7436:	f001 fb51 	bl	8adc <matherr>
    743a:	2800      	cmp	r0, #0
    743c:	d1f2      	bne.n	7424 <log+0xe0>
    743e:	e7ed      	b.n	741c <log+0xd8>
    7440:	2000006c 	.word	0x2000006c
    7444:	0001115c 	.word	0x0001115c
    7448:	c7efffff 	.word	0xc7efffff
    744c:	fff00000 	.word	0xfff00000
    7450:	00010d34 	.word	0x00010d34

00007454 <pow>:
    7454:	b5f0      	push	{r4, r5, r6, r7, lr}
    7456:	4657      	mov	r7, sl
    7458:	464e      	mov	r6, r9
    745a:	46de      	mov	lr, fp
    745c:	4645      	mov	r5, r8
    745e:	b5e0      	push	{r5, r6, r7, lr}
    7460:	b08f      	sub	sp, #60	; 0x3c
    7462:	001d      	movs	r5, r3
    7464:	0006      	movs	r6, r0
    7466:	000f      	movs	r7, r1
    7468:	0014      	movs	r4, r2
    746a:	f000 fd13 	bl	7e94 <__ieee754_pow>
    746e:	4bc7      	ldr	r3, [pc, #796]	; (778c <pow+0x338>)
    7470:	9000      	str	r0, [sp, #0]
    7472:	9101      	str	r1, [sp, #4]
    7474:	469a      	mov	sl, r3
    7476:	781b      	ldrb	r3, [r3, #0]
    7478:	b25b      	sxtb	r3, r3
    747a:	4699      	mov	r9, r3
    747c:	3301      	adds	r3, #1
    747e:	d03e      	beq.n	74fe <pow+0xaa>
    7480:	0022      	movs	r2, r4
    7482:	002b      	movs	r3, r5
    7484:	0020      	movs	r0, r4
    7486:	0029      	movs	r1, r5
    7488:	f004 fb1e 	bl	bac8 <__aeabi_dcmpun>
    748c:	4683      	mov	fp, r0
    748e:	2800      	cmp	r0, #0
    7490:	d135      	bne.n	74fe <pow+0xaa>
    7492:	0032      	movs	r2, r6
    7494:	003b      	movs	r3, r7
    7496:	0030      	movs	r0, r6
    7498:	0039      	movs	r1, r7
    749a:	f004 fb15 	bl	bac8 <__aeabi_dcmpun>
    749e:	2200      	movs	r2, #0
    74a0:	9003      	str	r0, [sp, #12]
    74a2:	2800      	cmp	r0, #0
    74a4:	d000      	beq.n	74a8 <pow+0x54>
    74a6:	e0b6      	b.n	7616 <pow+0x1c2>
    74a8:	2300      	movs	r3, #0
    74aa:	0030      	movs	r0, r6
    74ac:	0039      	movs	r1, r7
    74ae:	f001 fdb5 	bl	901c <__aeabi_dcmpeq>
    74b2:	2800      	cmp	r0, #0
    74b4:	d02c      	beq.n	7510 <pow+0xbc>
    74b6:	2200      	movs	r2, #0
    74b8:	2300      	movs	r3, #0
    74ba:	0020      	movs	r0, r4
    74bc:	0029      	movs	r1, r5
    74be:	f001 fdad 	bl	901c <__aeabi_dcmpeq>
    74c2:	4683      	mov	fp, r0
    74c4:	2800      	cmp	r0, #0
    74c6:	d100      	bne.n	74ca <pow+0x76>
    74c8:	e077      	b.n	75ba <pow+0x166>
    74ca:	ab04      	add	r3, sp, #16
    74cc:	4698      	mov	r8, r3
    74ce:	2301      	movs	r3, #1
    74d0:	4642      	mov	r2, r8
    74d2:	9304      	str	r3, [sp, #16]
    74d4:	4bae      	ldr	r3, [pc, #696]	; (7790 <pow+0x33c>)
    74d6:	6053      	str	r3, [r2, #4]
    74d8:	4643      	mov	r3, r8
    74da:	9a03      	ldr	r2, [sp, #12]
    74dc:	611c      	str	r4, [r3, #16]
    74de:	615d      	str	r5, [r3, #20]
    74e0:	621a      	str	r2, [r3, #32]
    74e2:	609e      	str	r6, [r3, #8]
    74e4:	60df      	str	r7, [r3, #12]
    74e6:	4642      	mov	r2, r8
    74e8:	2300      	movs	r3, #0
    74ea:	2400      	movs	r4, #0
    74ec:	6193      	str	r3, [r2, #24]
    74ee:	61d4      	str	r4, [r2, #28]
    74f0:	464b      	mov	r3, r9
    74f2:	2b00      	cmp	r3, #0
    74f4:	d04d      	beq.n	7592 <pow+0x13e>
    74f6:	2300      	movs	r3, #0
    74f8:	4ca6      	ldr	r4, [pc, #664]	; (7794 <pow+0x340>)
    74fa:	9300      	str	r3, [sp, #0]
    74fc:	9401      	str	r4, [sp, #4]
    74fe:	9800      	ldr	r0, [sp, #0]
    7500:	9901      	ldr	r1, [sp, #4]
    7502:	b00f      	add	sp, #60	; 0x3c
    7504:	bc3c      	pop	{r2, r3, r4, r5}
    7506:	4690      	mov	r8, r2
    7508:	4699      	mov	r9, r3
    750a:	46a2      	mov	sl, r4
    750c:	46ab      	mov	fp, r5
    750e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7510:	9800      	ldr	r0, [sp, #0]
    7512:	9901      	ldr	r1, [sp, #4]
    7514:	f001 fad8 	bl	8ac8 <finite>
    7518:	4681      	mov	r9, r0
    751a:	2800      	cmp	r0, #0
    751c:	d100      	bne.n	7520 <pow+0xcc>
    751e:	e09b      	b.n	7658 <pow+0x204>
    7520:	9800      	ldr	r0, [sp, #0]
    7522:	9901      	ldr	r1, [sp, #4]
    7524:	2200      	movs	r2, #0
    7526:	2300      	movs	r3, #0
    7528:	f001 fd78 	bl	901c <__aeabi_dcmpeq>
    752c:	2800      	cmp	r0, #0
    752e:	d0e6      	beq.n	74fe <pow+0xaa>
    7530:	0030      	movs	r0, r6
    7532:	0039      	movs	r1, r7
    7534:	f001 fac8 	bl	8ac8 <finite>
    7538:	2800      	cmp	r0, #0
    753a:	d0e0      	beq.n	74fe <pow+0xaa>
    753c:	0020      	movs	r0, r4
    753e:	0029      	movs	r1, r5
    7540:	f001 fac2 	bl	8ac8 <finite>
    7544:	2800      	cmp	r0, #0
    7546:	d0da      	beq.n	74fe <pow+0xaa>
    7548:	ab04      	add	r3, sp, #16
    754a:	4698      	mov	r8, r3
    754c:	2304      	movs	r3, #4
    754e:	4642      	mov	r2, r8
    7550:	9304      	str	r3, [sp, #16]
    7552:	4b8f      	ldr	r3, [pc, #572]	; (7790 <pow+0x33c>)
    7554:	6114      	str	r4, [r2, #16]
    7556:	6155      	str	r5, [r2, #20]
    7558:	6053      	str	r3, [r2, #4]
    755a:	2300      	movs	r3, #0
    755c:	2400      	movs	r4, #0
    755e:	6213      	str	r3, [r2, #32]
    7560:	2300      	movs	r3, #0
    7562:	6193      	str	r3, [r2, #24]
    7564:	61d4      	str	r4, [r2, #28]
    7566:	4653      	mov	r3, sl
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	6096      	str	r6, [r2, #8]
    756c:	60d7      	str	r7, [r2, #12]
    756e:	b25b      	sxtb	r3, r3
    7570:	2b02      	cmp	r3, #2
    7572:	d004      	beq.n	757e <pow+0x12a>
    7574:	4640      	mov	r0, r8
    7576:	f001 fab1 	bl	8adc <matherr>
    757a:	2800      	cmp	r0, #0
    757c:	d10e      	bne.n	759c <pow+0x148>
    757e:	f004 fc9f 	bl	bec0 <__errno>
    7582:	2322      	movs	r3, #34	; 0x22
    7584:	6003      	str	r3, [r0, #0]
    7586:	e009      	b.n	759c <pow+0x148>
    7588:	4642      	mov	r2, r8
    758a:	2300      	movs	r3, #0
    758c:	2400      	movs	r4, #0
    758e:	6193      	str	r3, [r2, #24]
    7590:	61d4      	str	r4, [r2, #28]
    7592:	4640      	mov	r0, r8
    7594:	f001 faa2 	bl	8adc <matherr>
    7598:	2800      	cmp	r0, #0
    759a:	d037      	beq.n	760c <pow+0x1b8>
    759c:	4643      	mov	r3, r8
    759e:	6a1b      	ldr	r3, [r3, #32]
    75a0:	2b00      	cmp	r3, #0
    75a2:	d004      	beq.n	75ae <pow+0x15a>
    75a4:	f004 fc8c 	bl	bec0 <__errno>
    75a8:	4643      	mov	r3, r8
    75aa:	6a1b      	ldr	r3, [r3, #32]
    75ac:	6003      	str	r3, [r0, #0]
    75ae:	4643      	mov	r3, r8
    75b0:	69dc      	ldr	r4, [r3, #28]
    75b2:	699b      	ldr	r3, [r3, #24]
    75b4:	9300      	str	r3, [sp, #0]
    75b6:	9401      	str	r4, [sp, #4]
    75b8:	e7a1      	b.n	74fe <pow+0xaa>
    75ba:	0020      	movs	r0, r4
    75bc:	0029      	movs	r1, r5
    75be:	f001 fa83 	bl	8ac8 <finite>
    75c2:	2800      	cmp	r0, #0
    75c4:	d09b      	beq.n	74fe <pow+0xaa>
    75c6:	2200      	movs	r2, #0
    75c8:	2300      	movs	r3, #0
    75ca:	0020      	movs	r0, r4
    75cc:	0029      	movs	r1, r5
    75ce:	f001 fd2b 	bl	9028 <__aeabi_dcmplt>
    75d2:	2800      	cmp	r0, #0
    75d4:	d100      	bne.n	75d8 <pow+0x184>
    75d6:	e792      	b.n	74fe <pow+0xaa>
    75d8:	ab04      	add	r3, sp, #16
    75da:	4698      	mov	r8, r3
    75dc:	2301      	movs	r3, #1
    75de:	4642      	mov	r2, r8
    75e0:	9304      	str	r3, [sp, #16]
    75e2:	4b6b      	ldr	r3, [pc, #428]	; (7790 <pow+0x33c>)
    75e4:	6053      	str	r3, [r2, #4]
    75e6:	4643      	mov	r3, r8
    75e8:	465a      	mov	r2, fp
    75ea:	609e      	str	r6, [r3, #8]
    75ec:	60df      	str	r7, [r3, #12]
    75ee:	621a      	str	r2, [r3, #32]
    75f0:	611c      	str	r4, [r3, #16]
    75f2:	615d      	str	r5, [r3, #20]
    75f4:	4653      	mov	r3, sl
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	b25b      	sxtb	r3, r3
    75fa:	2b00      	cmp	r3, #0
    75fc:	d0c4      	beq.n	7588 <pow+0x134>
    75fe:	2000      	movs	r0, #0
    7600:	4642      	mov	r2, r8
    7602:	4965      	ldr	r1, [pc, #404]	; (7798 <pow+0x344>)
    7604:	6190      	str	r0, [r2, #24]
    7606:	61d1      	str	r1, [r2, #28]
    7608:	2b02      	cmp	r3, #2
    760a:	d1c2      	bne.n	7592 <pow+0x13e>
    760c:	f004 fc58 	bl	bec0 <__errno>
    7610:	2321      	movs	r3, #33	; 0x21
    7612:	6003      	str	r3, [r0, #0]
    7614:	e7c2      	b.n	759c <pow+0x148>
    7616:	2300      	movs	r3, #0
    7618:	0020      	movs	r0, r4
    761a:	0029      	movs	r1, r5
    761c:	f001 fcfe 	bl	901c <__aeabi_dcmpeq>
    7620:	2800      	cmp	r0, #0
    7622:	d100      	bne.n	7626 <pow+0x1d2>
    7624:	e76b      	b.n	74fe <pow+0xaa>
    7626:	ab04      	add	r3, sp, #16
    7628:	4698      	mov	r8, r3
    762a:	2301      	movs	r3, #1
    762c:	4642      	mov	r2, r8
    762e:	9304      	str	r3, [sp, #16]
    7630:	4b57      	ldr	r3, [pc, #348]	; (7790 <pow+0x33c>)
    7632:	4641      	mov	r1, r8
    7634:	6053      	str	r3, [r2, #4]
    7636:	4643      	mov	r3, r8
    7638:	465a      	mov	r2, fp
    763a:	621a      	str	r2, [r3, #32]
    763c:	2200      	movs	r2, #0
    763e:	609e      	str	r6, [r3, #8]
    7640:	60df      	str	r7, [r3, #12]
    7642:	611c      	str	r4, [r3, #16]
    7644:	615d      	str	r5, [r3, #20]
    7646:	4b53      	ldr	r3, [pc, #332]	; (7794 <pow+0x340>)
    7648:	618a      	str	r2, [r1, #24]
    764a:	61cb      	str	r3, [r1, #28]
    764c:	9200      	str	r2, [sp, #0]
    764e:	9301      	str	r3, [sp, #4]
    7650:	464b      	mov	r3, r9
    7652:	2b02      	cmp	r3, #2
    7654:	d19d      	bne.n	7592 <pow+0x13e>
    7656:	e752      	b.n	74fe <pow+0xaa>
    7658:	0030      	movs	r0, r6
    765a:	0039      	movs	r1, r7
    765c:	f001 fa34 	bl	8ac8 <finite>
    7660:	2800      	cmp	r0, #0
    7662:	d100      	bne.n	7666 <pow+0x212>
    7664:	e75c      	b.n	7520 <pow+0xcc>
    7666:	0020      	movs	r0, r4
    7668:	0029      	movs	r1, r5
    766a:	f001 fa2d 	bl	8ac8 <finite>
    766e:	2800      	cmp	r0, #0
    7670:	d100      	bne.n	7674 <pow+0x220>
    7672:	e755      	b.n	7520 <pow+0xcc>
    7674:	9800      	ldr	r0, [sp, #0]
    7676:	9901      	ldr	r1, [sp, #4]
    7678:	000b      	movs	r3, r1
    767a:	0002      	movs	r2, r0
    767c:	f004 fa24 	bl	bac8 <__aeabi_dcmpun>
    7680:	ab04      	add	r3, sp, #16
    7682:	4698      	mov	r8, r3
    7684:	2800      	cmp	r0, #0
    7686:	d161      	bne.n	774c <pow+0x2f8>
    7688:	2303      	movs	r3, #3
    768a:	4642      	mov	r2, r8
    768c:	9304      	str	r3, [sp, #16]
    768e:	4b40      	ldr	r3, [pc, #256]	; (7790 <pow+0x33c>)
    7690:	6210      	str	r0, [r2, #32]
    7692:	6053      	str	r3, [r2, #4]
    7694:	4653      	mov	r3, sl
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	6096      	str	r6, [r2, #8]
    769a:	60d7      	str	r7, [r2, #12]
    769c:	b25b      	sxtb	r3, r3
    769e:	6114      	str	r4, [r2, #16]
    76a0:	6155      	str	r5, [r2, #20]
    76a2:	4699      	mov	r9, r3
    76a4:	2b00      	cmp	r3, #0
    76a6:	d12f      	bne.n	7708 <pow+0x2b4>
    76a8:	22e0      	movs	r2, #224	; 0xe0
    76aa:	4641      	mov	r1, r8
    76ac:	4b3b      	ldr	r3, [pc, #236]	; (779c <pow+0x348>)
    76ae:	0612      	lsls	r2, r2, #24
    76b0:	618a      	str	r2, [r1, #24]
    76b2:	61cb      	str	r3, [r1, #28]
    76b4:	0030      	movs	r0, r6
    76b6:	2200      	movs	r2, #0
    76b8:	2300      	movs	r3, #0
    76ba:	0039      	movs	r1, r7
    76bc:	f001 fcb4 	bl	9028 <__aeabi_dcmplt>
    76c0:	2800      	cmp	r0, #0
    76c2:	d100      	bne.n	76c6 <pow+0x272>
    76c4:	e756      	b.n	7574 <pow+0x120>
    76c6:	2200      	movs	r2, #0
    76c8:	4b35      	ldr	r3, [pc, #212]	; (77a0 <pow+0x34c>)
    76ca:	0020      	movs	r0, r4
    76cc:	0029      	movs	r1, r5
    76ce:	f003 fc65 	bl	af9c <__aeabi_dmul>
    76d2:	0004      	movs	r4, r0
    76d4:	000d      	movs	r5, r1
    76d6:	f001 fa09 	bl	8aec <rint>
    76da:	0002      	movs	r2, r0
    76dc:	000b      	movs	r3, r1
    76de:	0020      	movs	r0, r4
    76e0:	0029      	movs	r1, r5
    76e2:	f001 fc9b 	bl	901c <__aeabi_dcmpeq>
    76e6:	2800      	cmp	r0, #0
    76e8:	d105      	bne.n	76f6 <pow+0x2a2>
    76ea:	22e0      	movs	r2, #224	; 0xe0
    76ec:	4b2d      	ldr	r3, [pc, #180]	; (77a4 <pow+0x350>)
    76ee:	0612      	lsls	r2, r2, #24
    76f0:	4641      	mov	r1, r8
    76f2:	618a      	str	r2, [r1, #24]
    76f4:	61cb      	str	r3, [r1, #28]
    76f6:	4653      	mov	r3, sl
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	b25b      	sxtb	r3, r3
    76fc:	4699      	mov	r9, r3
    76fe:	464b      	mov	r3, r9
    7700:	2b02      	cmp	r3, #2
    7702:	d000      	beq.n	7706 <pow+0x2b2>
    7704:	e736      	b.n	7574 <pow+0x120>
    7706:	e73a      	b.n	757e <pow+0x12a>
    7708:	2200      	movs	r2, #0
    770a:	4641      	mov	r1, r8
    770c:	4b26      	ldr	r3, [pc, #152]	; (77a8 <pow+0x354>)
    770e:	0030      	movs	r0, r6
    7710:	618a      	str	r2, [r1, #24]
    7712:	61cb      	str	r3, [r1, #28]
    7714:	2200      	movs	r2, #0
    7716:	2300      	movs	r3, #0
    7718:	0039      	movs	r1, r7
    771a:	f001 fc85 	bl	9028 <__aeabi_dcmplt>
    771e:	2800      	cmp	r0, #0
    7720:	d0ed      	beq.n	76fe <pow+0x2aa>
    7722:	2200      	movs	r2, #0
    7724:	4b1e      	ldr	r3, [pc, #120]	; (77a0 <pow+0x34c>)
    7726:	0020      	movs	r0, r4
    7728:	0029      	movs	r1, r5
    772a:	f003 fc37 	bl	af9c <__aeabi_dmul>
    772e:	0004      	movs	r4, r0
    7730:	000d      	movs	r5, r1
    7732:	f001 f9db 	bl	8aec <rint>
    7736:	0002      	movs	r2, r0
    7738:	000b      	movs	r3, r1
    773a:	0020      	movs	r0, r4
    773c:	0029      	movs	r1, r5
    773e:	f001 fc6d 	bl	901c <__aeabi_dcmpeq>
    7742:	2800      	cmp	r0, #0
    7744:	d1d7      	bne.n	76f6 <pow+0x2a2>
    7746:	2200      	movs	r2, #0
    7748:	4b13      	ldr	r3, [pc, #76]	; (7798 <pow+0x344>)
    774a:	e7d1      	b.n	76f0 <pow+0x29c>
    774c:	2301      	movs	r3, #1
    774e:	4642      	mov	r2, r8
    7750:	9304      	str	r3, [sp, #16]
    7752:	4b0f      	ldr	r3, [pc, #60]	; (7790 <pow+0x33c>)
    7754:	6053      	str	r3, [r2, #4]
    7756:	4643      	mov	r3, r8
    7758:	464a      	mov	r2, r9
    775a:	611c      	str	r4, [r3, #16]
    775c:	615d      	str	r5, [r3, #20]
    775e:	621a      	str	r2, [r3, #32]
    7760:	609e      	str	r6, [r3, #8]
    7762:	60df      	str	r7, [r3, #12]
    7764:	2400      	movs	r4, #0
    7766:	4653      	mov	r3, sl
    7768:	571c      	ldrsb	r4, [r3, r4]
    776a:	2c00      	cmp	r4, #0
    776c:	d100      	bne.n	7770 <pow+0x31c>
    776e:	e70b      	b.n	7588 <pow+0x134>
    7770:	2300      	movs	r3, #0
    7772:	2200      	movs	r2, #0
    7774:	0019      	movs	r1, r3
    7776:	0010      	movs	r0, r2
    7778:	f002 ffdc 	bl	a734 <__aeabi_ddiv>
    777c:	4643      	mov	r3, r8
    777e:	6198      	str	r0, [r3, #24]
    7780:	61d9      	str	r1, [r3, #28]
    7782:	2c02      	cmp	r4, #2
    7784:	d100      	bne.n	7788 <pow+0x334>
    7786:	e741      	b.n	760c <pow+0x1b8>
    7788:	e703      	b.n	7592 <pow+0x13e>
    778a:	46c0      	nop			; (mov r8, r8)
    778c:	2000006c 	.word	0x2000006c
    7790:	00011160 	.word	0x00011160
    7794:	3ff00000 	.word	0x3ff00000
    7798:	fff00000 	.word	0xfff00000
    779c:	47efffff 	.word	0x47efffff
    77a0:	3fe00000 	.word	0x3fe00000
    77a4:	c7efffff 	.word	0xc7efffff
    77a8:	7ff00000 	.word	0x7ff00000

000077ac <__ieee754_exp>:
    77ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ae:	46d6      	mov	lr, sl
    77b0:	b500      	push	{lr}
    77b2:	004b      	lsls	r3, r1, #1
    77b4:	000e      	movs	r6, r1
    77b6:	0fcc      	lsrs	r4, r1, #31
    77b8:	4995      	ldr	r1, [pc, #596]	; (7a10 <__ieee754_exp+0x264>)
    77ba:	b084      	sub	sp, #16
    77bc:	0007      	movs	r7, r0
    77be:	085b      	lsrs	r3, r3, #1
    77c0:	428b      	cmp	r3, r1
    77c2:	d90e      	bls.n	77e2 <__ieee754_exp+0x36>
    77c4:	4993      	ldr	r1, [pc, #588]	; (7a14 <__ieee754_exp+0x268>)
    77c6:	428b      	cmp	r3, r1
    77c8:	d800      	bhi.n	77cc <__ieee754_exp+0x20>
    77ca:	e084      	b.n	78d6 <__ieee754_exp+0x12a>
    77cc:	0332      	lsls	r2, r6, #12
    77ce:	0b12      	lsrs	r2, r2, #12
    77d0:	4302      	orrs	r2, r0
    77d2:	d000      	beq.n	77d6 <__ieee754_exp+0x2a>
    77d4:	e0f7      	b.n	79c6 <__ieee754_exp+0x21a>
    77d6:	0031      	movs	r1, r6
    77d8:	2c00      	cmp	r4, #0
    77da:	d078      	beq.n	78ce <__ieee754_exp+0x122>
    77dc:	2000      	movs	r0, #0
    77de:	2100      	movs	r1, #0
    77e0:	e075      	b.n	78ce <__ieee754_exp+0x122>
    77e2:	4a8d      	ldr	r2, [pc, #564]	; (7a18 <__ieee754_exp+0x26c>)
    77e4:	4293      	cmp	r3, r2
    77e6:	d900      	bls.n	77ea <__ieee754_exp+0x3e>
    77e8:	e0b6      	b.n	7958 <__ieee754_exp+0x1ac>
    77ea:	4a8c      	ldr	r2, [pc, #560]	; (7a1c <__ieee754_exp+0x270>)
    77ec:	4293      	cmp	r3, r2
    77ee:	d800      	bhi.n	77f2 <__ieee754_exp+0x46>
    77f0:	e0ca      	b.n	7988 <__ieee754_exp+0x1dc>
    77f2:	2300      	movs	r3, #0
    77f4:	469a      	mov	sl, r3
    77f6:	003a      	movs	r2, r7
    77f8:	0033      	movs	r3, r6
    77fa:	0038      	movs	r0, r7
    77fc:	0031      	movs	r1, r6
    77fe:	f003 fbcd 	bl	af9c <__aeabi_dmul>
    7802:	0004      	movs	r4, r0
    7804:	000d      	movs	r5, r1
    7806:	4a86      	ldr	r2, [pc, #536]	; (7a20 <__ieee754_exp+0x274>)
    7808:	4b86      	ldr	r3, [pc, #536]	; (7a24 <__ieee754_exp+0x278>)
    780a:	f003 fbc7 	bl	af9c <__aeabi_dmul>
    780e:	4a86      	ldr	r2, [pc, #536]	; (7a28 <__ieee754_exp+0x27c>)
    7810:	4b86      	ldr	r3, [pc, #536]	; (7a2c <__ieee754_exp+0x280>)
    7812:	f003 fe43 	bl	b49c <__aeabi_dsub>
    7816:	0022      	movs	r2, r4
    7818:	002b      	movs	r3, r5
    781a:	f003 fbbf 	bl	af9c <__aeabi_dmul>
    781e:	4a84      	ldr	r2, [pc, #528]	; (7a30 <__ieee754_exp+0x284>)
    7820:	4b84      	ldr	r3, [pc, #528]	; (7a34 <__ieee754_exp+0x288>)
    7822:	f002 fc77 	bl	a114 <__aeabi_dadd>
    7826:	0022      	movs	r2, r4
    7828:	002b      	movs	r3, r5
    782a:	f003 fbb7 	bl	af9c <__aeabi_dmul>
    782e:	4a82      	ldr	r2, [pc, #520]	; (7a38 <__ieee754_exp+0x28c>)
    7830:	4b82      	ldr	r3, [pc, #520]	; (7a3c <__ieee754_exp+0x290>)
    7832:	f003 fe33 	bl	b49c <__aeabi_dsub>
    7836:	0022      	movs	r2, r4
    7838:	002b      	movs	r3, r5
    783a:	f003 fbaf 	bl	af9c <__aeabi_dmul>
    783e:	4a80      	ldr	r2, [pc, #512]	; (7a40 <__ieee754_exp+0x294>)
    7840:	4b80      	ldr	r3, [pc, #512]	; (7a44 <__ieee754_exp+0x298>)
    7842:	f002 fc67 	bl	a114 <__aeabi_dadd>
    7846:	0022      	movs	r2, r4
    7848:	002b      	movs	r3, r5
    784a:	f003 fba7 	bl	af9c <__aeabi_dmul>
    784e:	0002      	movs	r2, r0
    7850:	000b      	movs	r3, r1
    7852:	0038      	movs	r0, r7
    7854:	0031      	movs	r1, r6
    7856:	f003 fe21 	bl	b49c <__aeabi_dsub>
    785a:	4653      	mov	r3, sl
    785c:	0004      	movs	r4, r0
    785e:	000d      	movs	r5, r1
    7860:	0002      	movs	r2, r0
    7862:	2b00      	cmp	r3, #0
    7864:	d100      	bne.n	7868 <__ieee754_exp+0xbc>
    7866:	e0b4      	b.n	79d2 <__ieee754_exp+0x226>
    7868:	000b      	movs	r3, r1
    786a:	0038      	movs	r0, r7
    786c:	0031      	movs	r1, r6
    786e:	f003 fb95 	bl	af9c <__aeabi_dmul>
    7872:	000f      	movs	r7, r1
    7874:	2180      	movs	r1, #128	; 0x80
    7876:	0006      	movs	r6, r0
    7878:	0022      	movs	r2, r4
    787a:	002b      	movs	r3, r5
    787c:	2000      	movs	r0, #0
    787e:	05c9      	lsls	r1, r1, #23
    7880:	f003 fe0c 	bl	b49c <__aeabi_dsub>
    7884:	0002      	movs	r2, r0
    7886:	000b      	movs	r3, r1
    7888:	0030      	movs	r0, r6
    788a:	0039      	movs	r1, r7
    788c:	f002 ff52 	bl	a734 <__aeabi_ddiv>
    7890:	0002      	movs	r2, r0
    7892:	000b      	movs	r3, r1
    7894:	9802      	ldr	r0, [sp, #8]
    7896:	9903      	ldr	r1, [sp, #12]
    7898:	f003 fe00 	bl	b49c <__aeabi_dsub>
    789c:	9a00      	ldr	r2, [sp, #0]
    789e:	9b01      	ldr	r3, [sp, #4]
    78a0:	f003 fdfc 	bl	b49c <__aeabi_dsub>
    78a4:	000b      	movs	r3, r1
    78a6:	0002      	movs	r2, r0
    78a8:	4967      	ldr	r1, [pc, #412]	; (7a48 <__ieee754_exp+0x29c>)
    78aa:	2000      	movs	r0, #0
    78ac:	f003 fdf6 	bl	b49c <__aeabi_dsub>
    78b0:	4b66      	ldr	r3, [pc, #408]	; (7a4c <__ieee754_exp+0x2a0>)
    78b2:	459a      	cmp	sl, r3
    78b4:	db00      	blt.n	78b8 <__ieee754_exp+0x10c>
    78b6:	e07a      	b.n	79ae <__ieee754_exp+0x202>
    78b8:	24fa      	movs	r4, #250	; 0xfa
    78ba:	00a4      	lsls	r4, r4, #2
    78bc:	4454      	add	r4, sl
    78be:	0524      	lsls	r4, r4, #20
    78c0:	1863      	adds	r3, r4, r1
    78c2:	0019      	movs	r1, r3
    78c4:	23b8      	movs	r3, #184	; 0xb8
    78c6:	2200      	movs	r2, #0
    78c8:	045b      	lsls	r3, r3, #17
    78ca:	f003 fb67 	bl	af9c <__aeabi_dmul>
    78ce:	b004      	add	sp, #16
    78d0:	bc04      	pop	{r2}
    78d2:	4692      	mov	sl, r2
    78d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78d6:	4a5e      	ldr	r2, [pc, #376]	; (7a50 <__ieee754_exp+0x2a4>)
    78d8:	4b5e      	ldr	r3, [pc, #376]	; (7a54 <__ieee754_exp+0x2a8>)
    78da:	0031      	movs	r1, r6
    78dc:	f001 fbb8 	bl	9050 <__aeabi_dcmpgt>
    78e0:	2800      	cmp	r0, #0
    78e2:	d169      	bne.n	79b8 <__ieee754_exp+0x20c>
    78e4:	4a5c      	ldr	r2, [pc, #368]	; (7a58 <__ieee754_exp+0x2ac>)
    78e6:	4b5d      	ldr	r3, [pc, #372]	; (7a5c <__ieee754_exp+0x2b0>)
    78e8:	0038      	movs	r0, r7
    78ea:	0031      	movs	r1, r6
    78ec:	f001 fb9c 	bl	9028 <__aeabi_dcmplt>
    78f0:	2800      	cmp	r0, #0
    78f2:	d000      	beq.n	78f6 <__ieee754_exp+0x14a>
    78f4:	e772      	b.n	77dc <__ieee754_exp+0x30>
    78f6:	4b5a      	ldr	r3, [pc, #360]	; (7a60 <__ieee754_exp+0x2b4>)
    78f8:	00e4      	lsls	r4, r4, #3
    78fa:	191c      	adds	r4, r3, r4
    78fc:	4a59      	ldr	r2, [pc, #356]	; (7a64 <__ieee754_exp+0x2b8>)
    78fe:	4b5a      	ldr	r3, [pc, #360]	; (7a68 <__ieee754_exp+0x2bc>)
    7900:	0038      	movs	r0, r7
    7902:	0031      	movs	r1, r6
    7904:	f003 fb4a 	bl	af9c <__aeabi_dmul>
    7908:	6822      	ldr	r2, [r4, #0]
    790a:	6863      	ldr	r3, [r4, #4]
    790c:	f002 fc02 	bl	a114 <__aeabi_dadd>
    7910:	f004 f8fa 	bl	bb08 <__aeabi_d2iz>
    7914:	4682      	mov	sl, r0
    7916:	f004 f92b 	bl	bb70 <__aeabi_i2d>
    791a:	4a54      	ldr	r2, [pc, #336]	; (7a6c <__ieee754_exp+0x2c0>)
    791c:	4b54      	ldr	r3, [pc, #336]	; (7a70 <__ieee754_exp+0x2c4>)
    791e:	0004      	movs	r4, r0
    7920:	000d      	movs	r5, r1
    7922:	f003 fb3b 	bl	af9c <__aeabi_dmul>
    7926:	0002      	movs	r2, r0
    7928:	000b      	movs	r3, r1
    792a:	0038      	movs	r0, r7
    792c:	0031      	movs	r1, r6
    792e:	f003 fdb5 	bl	b49c <__aeabi_dsub>
    7932:	4a50      	ldr	r2, [pc, #320]	; (7a74 <__ieee754_exp+0x2c8>)
    7934:	9000      	str	r0, [sp, #0]
    7936:	9101      	str	r1, [sp, #4]
    7938:	4b4f      	ldr	r3, [pc, #316]	; (7a78 <__ieee754_exp+0x2cc>)
    793a:	0020      	movs	r0, r4
    793c:	0029      	movs	r1, r5
    793e:	f003 fb2d 	bl	af9c <__aeabi_dmul>
    7942:	9002      	str	r0, [sp, #8]
    7944:	9103      	str	r1, [sp, #12]
    7946:	9a02      	ldr	r2, [sp, #8]
    7948:	9b03      	ldr	r3, [sp, #12]
    794a:	9800      	ldr	r0, [sp, #0]
    794c:	9901      	ldr	r1, [sp, #4]
    794e:	f003 fda5 	bl	b49c <__aeabi_dsub>
    7952:	0007      	movs	r7, r0
    7954:	000e      	movs	r6, r1
    7956:	e74e      	b.n	77f6 <__ieee754_exp+0x4a>
    7958:	4a48      	ldr	r2, [pc, #288]	; (7a7c <__ieee754_exp+0x2d0>)
    795a:	4293      	cmp	r3, r2
    795c:	d8cb      	bhi.n	78f6 <__ieee754_exp+0x14a>
    795e:	4b48      	ldr	r3, [pc, #288]	; (7a80 <__ieee754_exp+0x2d4>)
    7960:	00e5      	lsls	r5, r4, #3
    7962:	195b      	adds	r3, r3, r5
    7964:	681a      	ldr	r2, [r3, #0]
    7966:	685b      	ldr	r3, [r3, #4]
    7968:	0031      	movs	r1, r6
    796a:	f003 fd97 	bl	b49c <__aeabi_dsub>
    796e:	4b45      	ldr	r3, [pc, #276]	; (7a84 <__ieee754_exp+0x2d8>)
    7970:	9000      	str	r0, [sp, #0]
    7972:	9101      	str	r1, [sp, #4]
    7974:	195b      	adds	r3, r3, r5
    7976:	681a      	ldr	r2, [r3, #0]
    7978:	685b      	ldr	r3, [r3, #4]
    797a:	9202      	str	r2, [sp, #8]
    797c:	9303      	str	r3, [sp, #12]
    797e:	2301      	movs	r3, #1
    7980:	1b1b      	subs	r3, r3, r4
    7982:	1b1b      	subs	r3, r3, r4
    7984:	469a      	mov	sl, r3
    7986:	e7de      	b.n	7946 <__ieee754_exp+0x19a>
    7988:	4a3f      	ldr	r2, [pc, #252]	; (7a88 <__ieee754_exp+0x2dc>)
    798a:	4b40      	ldr	r3, [pc, #256]	; (7a8c <__ieee754_exp+0x2e0>)
    798c:	0031      	movs	r1, r6
    798e:	f002 fbc1 	bl	a114 <__aeabi_dadd>
    7992:	2200      	movs	r2, #0
    7994:	4b2c      	ldr	r3, [pc, #176]	; (7a48 <__ieee754_exp+0x29c>)
    7996:	f001 fb5b 	bl	9050 <__aeabi_dcmpgt>
    799a:	2800      	cmp	r0, #0
    799c:	d100      	bne.n	79a0 <__ieee754_exp+0x1f4>
    799e:	e728      	b.n	77f2 <__ieee754_exp+0x46>
    79a0:	2200      	movs	r2, #0
    79a2:	4b29      	ldr	r3, [pc, #164]	; (7a48 <__ieee754_exp+0x29c>)
    79a4:	0038      	movs	r0, r7
    79a6:	0031      	movs	r1, r6
    79a8:	f002 fbb4 	bl	a114 <__aeabi_dadd>
    79ac:	e78f      	b.n	78ce <__ieee754_exp+0x122>
    79ae:	4654      	mov	r4, sl
    79b0:	0524      	lsls	r4, r4, #20
    79b2:	1863      	adds	r3, r4, r1
    79b4:	0019      	movs	r1, r3
    79b6:	e78a      	b.n	78ce <__ieee754_exp+0x122>
    79b8:	4a33      	ldr	r2, [pc, #204]	; (7a88 <__ieee754_exp+0x2dc>)
    79ba:	4b34      	ldr	r3, [pc, #208]	; (7a8c <__ieee754_exp+0x2e0>)
    79bc:	0010      	movs	r0, r2
    79be:	0019      	movs	r1, r3
    79c0:	f003 faec 	bl	af9c <__aeabi_dmul>
    79c4:	e783      	b.n	78ce <__ieee754_exp+0x122>
    79c6:	0002      	movs	r2, r0
    79c8:	0033      	movs	r3, r6
    79ca:	0031      	movs	r1, r6
    79cc:	f002 fba2 	bl	a114 <__aeabi_dadd>
    79d0:	e77d      	b.n	78ce <__ieee754_exp+0x122>
    79d2:	000b      	movs	r3, r1
    79d4:	0038      	movs	r0, r7
    79d6:	0031      	movs	r1, r6
    79d8:	f003 fae0 	bl	af9c <__aeabi_dmul>
    79dc:	2380      	movs	r3, #128	; 0x80
    79de:	9000      	str	r0, [sp, #0]
    79e0:	9101      	str	r1, [sp, #4]
    79e2:	2200      	movs	r2, #0
    79e4:	05db      	lsls	r3, r3, #23
    79e6:	0020      	movs	r0, r4
    79e8:	0029      	movs	r1, r5
    79ea:	f003 fd57 	bl	b49c <__aeabi_dsub>
    79ee:	0002      	movs	r2, r0
    79f0:	000b      	movs	r3, r1
    79f2:	9800      	ldr	r0, [sp, #0]
    79f4:	9901      	ldr	r1, [sp, #4]
    79f6:	f002 fe9d 	bl	a734 <__aeabi_ddiv>
    79fa:	003a      	movs	r2, r7
    79fc:	0033      	movs	r3, r6
    79fe:	f003 fd4d 	bl	b49c <__aeabi_dsub>
    7a02:	0002      	movs	r2, r0
    7a04:	000b      	movs	r3, r1
    7a06:	2000      	movs	r0, #0
    7a08:	490f      	ldr	r1, [pc, #60]	; (7a48 <__ieee754_exp+0x29c>)
    7a0a:	f003 fd47 	bl	b49c <__aeabi_dsub>
    7a0e:	e75e      	b.n	78ce <__ieee754_exp+0x122>
    7a10:	40862e41 	.word	0x40862e41
    7a14:	7fefffff 	.word	0x7fefffff
    7a18:	3fd62e42 	.word	0x3fd62e42
    7a1c:	3e2fffff 	.word	0x3e2fffff
    7a20:	72bea4d0 	.word	0x72bea4d0
    7a24:	3e663769 	.word	0x3e663769
    7a28:	c5d26bf1 	.word	0xc5d26bf1
    7a2c:	3ebbbd41 	.word	0x3ebbbd41
    7a30:	af25de2c 	.word	0xaf25de2c
    7a34:	3f11566a 	.word	0x3f11566a
    7a38:	16bebd93 	.word	0x16bebd93
    7a3c:	3f66c16c 	.word	0x3f66c16c
    7a40:	5555553e 	.word	0x5555553e
    7a44:	3fc55555 	.word	0x3fc55555
    7a48:	3ff00000 	.word	0x3ff00000
    7a4c:	fffffc03 	.word	0xfffffc03
    7a50:	fefa39ef 	.word	0xfefa39ef
    7a54:	40862e42 	.word	0x40862e42
    7a58:	d52d3051 	.word	0xd52d3051
    7a5c:	c0874910 	.word	0xc0874910
    7a60:	00011168 	.word	0x00011168
    7a64:	652b82fe 	.word	0x652b82fe
    7a68:	3ff71547 	.word	0x3ff71547
    7a6c:	fee00000 	.word	0xfee00000
    7a70:	3fe62e42 	.word	0x3fe62e42
    7a74:	35793c76 	.word	0x35793c76
    7a78:	3dea39ef 	.word	0x3dea39ef
    7a7c:	3ff0a2b1 	.word	0x3ff0a2b1
    7a80:	00011178 	.word	0x00011178
    7a84:	00011188 	.word	0x00011188
    7a88:	8800759c 	.word	0x8800759c
    7a8c:	7e37e43c 	.word	0x7e37e43c

00007a90 <__ieee754_log>:
    7a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a92:	46d6      	mov	lr, sl
    7a94:	464f      	mov	r7, r9
    7a96:	4646      	mov	r6, r8
    7a98:	b5c0      	push	{r6, r7, lr}
    7a9a:	4ada      	ldr	r2, [pc, #872]	; (7e04 <__ieee754_log+0x374>)
    7a9c:	b088      	sub	sp, #32
    7a9e:	000b      	movs	r3, r1
    7aa0:	4291      	cmp	r1, r2
    7aa2:	dc55      	bgt.n	7b50 <__ieee754_log+0xc0>
    7aa4:	004a      	lsls	r2, r1, #1
    7aa6:	0852      	lsrs	r2, r2, #1
    7aa8:	4302      	orrs	r2, r0
    7aaa:	d100      	bne.n	7aae <__ieee754_log+0x1e>
    7aac:	e0ef      	b.n	7c8e <__ieee754_log+0x1fe>
    7aae:	2900      	cmp	r1, #0
    7ab0:	da00      	bge.n	7ab4 <__ieee754_log+0x24>
    7ab2:	e179      	b.n	7da8 <__ieee754_log+0x318>
    7ab4:	4bd4      	ldr	r3, [pc, #848]	; (7e08 <__ieee754_log+0x378>)
    7ab6:	2200      	movs	r2, #0
    7ab8:	f003 fa70 	bl	af9c <__aeabi_dmul>
    7abc:	2536      	movs	r5, #54	; 0x36
    7abe:	4cd3      	ldr	r4, [pc, #844]	; (7e0c <__ieee754_log+0x37c>)
    7ac0:	000b      	movs	r3, r1
    7ac2:	426d      	negs	r5, r5
    7ac4:	42a3      	cmp	r3, r4
    7ac6:	dc47      	bgt.n	7b58 <__ieee754_log+0xc8>
    7ac8:	151a      	asrs	r2, r3, #20
    7aca:	4cd1      	ldr	r4, [pc, #836]	; (7e10 <__ieee754_log+0x380>)
    7acc:	031b      	lsls	r3, r3, #12
    7ace:	0b1b      	lsrs	r3, r3, #12
    7ad0:	4698      	mov	r8, r3
    7ad2:	46a4      	mov	ip, r4
    7ad4:	2480      	movs	r4, #128	; 0x80
    7ad6:	4bcf      	ldr	r3, [pc, #828]	; (7e14 <__ieee754_log+0x384>)
    7ad8:	0364      	lsls	r4, r4, #13
    7ada:	4443      	add	r3, r8
    7adc:	4023      	ands	r3, r4
    7ade:	4cce      	ldr	r4, [pc, #824]	; (7e18 <__ieee754_log+0x388>)
    7ae0:	4462      	add	r2, ip
    7ae2:	1952      	adds	r2, r2, r5
    7ae4:	405c      	eors	r4, r3
    7ae6:	4645      	mov	r5, r8
    7ae8:	151b      	asrs	r3, r3, #20
    7aea:	4699      	mov	r9, r3
    7aec:	4325      	orrs	r5, r4
    7aee:	4bca      	ldr	r3, [pc, #808]	; (7e18 <__ieee754_log+0x388>)
    7af0:	0029      	movs	r1, r5
    7af2:	4491      	add	r9, r2
    7af4:	2200      	movs	r2, #0
    7af6:	f003 fcd1 	bl	b49c <__aeabi_dsub>
    7afa:	4643      	mov	r3, r8
    7afc:	3302      	adds	r3, #2
    7afe:	031b      	lsls	r3, r3, #12
    7b00:	0006      	movs	r6, r0
    7b02:	000f      	movs	r7, r1
    7b04:	0b1b      	lsrs	r3, r3, #12
    7b06:	2200      	movs	r2, #0
    7b08:	2b02      	cmp	r3, #2
    7b0a:	dc2f      	bgt.n	7b6c <__ieee754_log+0xdc>
    7b0c:	2300      	movs	r3, #0
    7b0e:	f001 fa85 	bl	901c <__aeabi_dcmpeq>
    7b12:	2800      	cmp	r0, #0
    7b14:	d100      	bne.n	7b18 <__ieee754_log+0x88>
    7b16:	e0c1      	b.n	7c9c <__ieee754_log+0x20c>
    7b18:	464b      	mov	r3, r9
    7b1a:	2b00      	cmp	r3, #0
    7b1c:	d100      	bne.n	7b20 <__ieee754_log+0x90>
    7b1e:	e14c      	b.n	7dba <__ieee754_log+0x32a>
    7b20:	4648      	mov	r0, r9
    7b22:	f004 f825 	bl	bb70 <__aeabi_i2d>
    7b26:	4abd      	ldr	r2, [pc, #756]	; (7e1c <__ieee754_log+0x38c>)
    7b28:	4bbd      	ldr	r3, [pc, #756]	; (7e20 <__ieee754_log+0x390>)
    7b2a:	0004      	movs	r4, r0
    7b2c:	000d      	movs	r5, r1
    7b2e:	f003 fa35 	bl	af9c <__aeabi_dmul>
    7b32:	4abc      	ldr	r2, [pc, #752]	; (7e24 <__ieee754_log+0x394>)
    7b34:	0006      	movs	r6, r0
    7b36:	000f      	movs	r7, r1
    7b38:	4bbb      	ldr	r3, [pc, #748]	; (7e28 <__ieee754_log+0x398>)
    7b3a:	0020      	movs	r0, r4
    7b3c:	0029      	movs	r1, r5
    7b3e:	f003 fa2d 	bl	af9c <__aeabi_dmul>
    7b42:	0002      	movs	r2, r0
    7b44:	000b      	movs	r3, r1
    7b46:	0030      	movs	r0, r6
    7b48:	0039      	movs	r1, r7
    7b4a:	f002 fae3 	bl	a114 <__aeabi_dadd>
    7b4e:	e007      	b.n	7b60 <__ieee754_log+0xd0>
    7b50:	4cae      	ldr	r4, [pc, #696]	; (7e0c <__ieee754_log+0x37c>)
    7b52:	2500      	movs	r5, #0
    7b54:	42a3      	cmp	r3, r4
    7b56:	ddb7      	ble.n	7ac8 <__ieee754_log+0x38>
    7b58:	0002      	movs	r2, r0
    7b5a:	000b      	movs	r3, r1
    7b5c:	f002 fada 	bl	a114 <__aeabi_dadd>
    7b60:	b008      	add	sp, #32
    7b62:	bc1c      	pop	{r2, r3, r4}
    7b64:	4690      	mov	r8, r2
    7b66:	4699      	mov	r9, r3
    7b68:	46a2      	mov	sl, r4
    7b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b6c:	2380      	movs	r3, #128	; 0x80
    7b6e:	05db      	lsls	r3, r3, #23
    7b70:	f002 fad0 	bl	a114 <__aeabi_dadd>
    7b74:	0002      	movs	r2, r0
    7b76:	000b      	movs	r3, r1
    7b78:	0030      	movs	r0, r6
    7b7a:	0039      	movs	r1, r7
    7b7c:	f002 fdda 	bl	a734 <__aeabi_ddiv>
    7b80:	0004      	movs	r4, r0
    7b82:	4648      	mov	r0, r9
    7b84:	000d      	movs	r5, r1
    7b86:	f003 fff3 	bl	bb70 <__aeabi_i2d>
    7b8a:	0022      	movs	r2, r4
    7b8c:	9002      	str	r0, [sp, #8]
    7b8e:	9103      	str	r1, [sp, #12]
    7b90:	002b      	movs	r3, r5
    7b92:	0020      	movs	r0, r4
    7b94:	0029      	movs	r1, r5
    7b96:	9404      	str	r4, [sp, #16]
    7b98:	9505      	str	r5, [sp, #20]
    7b9a:	f003 f9ff 	bl	af9c <__aeabi_dmul>
    7b9e:	0004      	movs	r4, r0
    7ba0:	000d      	movs	r5, r1
    7ba2:	4ba2      	ldr	r3, [pc, #648]	; (7e2c <__ieee754_log+0x39c>)
    7ba4:	0002      	movs	r2, r0
    7ba6:	4443      	add	r3, r8
    7ba8:	469a      	mov	sl, r3
    7baa:	000b      	movs	r3, r1
    7bac:	9400      	str	r4, [sp, #0]
    7bae:	9501      	str	r5, [sp, #4]
    7bb0:	f003 f9f4 	bl	af9c <__aeabi_dmul>
    7bb4:	0004      	movs	r4, r0
    7bb6:	000d      	movs	r5, r1
    7bb8:	4a9d      	ldr	r2, [pc, #628]	; (7e30 <__ieee754_log+0x3a0>)
    7bba:	4b9e      	ldr	r3, [pc, #632]	; (7e34 <__ieee754_log+0x3a4>)
    7bbc:	f003 f9ee 	bl	af9c <__aeabi_dmul>
    7bc0:	4a9d      	ldr	r2, [pc, #628]	; (7e38 <__ieee754_log+0x3a8>)
    7bc2:	4b9e      	ldr	r3, [pc, #632]	; (7e3c <__ieee754_log+0x3ac>)
    7bc4:	f002 faa6 	bl	a114 <__aeabi_dadd>
    7bc8:	0022      	movs	r2, r4
    7bca:	002b      	movs	r3, r5
    7bcc:	f003 f9e6 	bl	af9c <__aeabi_dmul>
    7bd0:	4a9b      	ldr	r2, [pc, #620]	; (7e40 <__ieee754_log+0x3b0>)
    7bd2:	4b9c      	ldr	r3, [pc, #624]	; (7e44 <__ieee754_log+0x3b4>)
    7bd4:	f002 fa9e 	bl	a114 <__aeabi_dadd>
    7bd8:	0022      	movs	r2, r4
    7bda:	002b      	movs	r3, r5
    7bdc:	f003 f9de 	bl	af9c <__aeabi_dmul>
    7be0:	4a99      	ldr	r2, [pc, #612]	; (7e48 <__ieee754_log+0x3b8>)
    7be2:	4b9a      	ldr	r3, [pc, #616]	; (7e4c <__ieee754_log+0x3bc>)
    7be4:	f002 fa96 	bl	a114 <__aeabi_dadd>
    7be8:	9a00      	ldr	r2, [sp, #0]
    7bea:	9b01      	ldr	r3, [sp, #4]
    7bec:	f003 f9d6 	bl	af9c <__aeabi_dmul>
    7bf0:	4a97      	ldr	r2, [pc, #604]	; (7e50 <__ieee754_log+0x3c0>)
    7bf2:	9000      	str	r0, [sp, #0]
    7bf4:	9101      	str	r1, [sp, #4]
    7bf6:	4b97      	ldr	r3, [pc, #604]	; (7e54 <__ieee754_log+0x3c4>)
    7bf8:	0020      	movs	r0, r4
    7bfa:	0029      	movs	r1, r5
    7bfc:	f003 f9ce 	bl	af9c <__aeabi_dmul>
    7c00:	4a95      	ldr	r2, [pc, #596]	; (7e58 <__ieee754_log+0x3c8>)
    7c02:	4b96      	ldr	r3, [pc, #600]	; (7e5c <__ieee754_log+0x3cc>)
    7c04:	f002 fa86 	bl	a114 <__aeabi_dadd>
    7c08:	0022      	movs	r2, r4
    7c0a:	002b      	movs	r3, r5
    7c0c:	f003 f9c6 	bl	af9c <__aeabi_dmul>
    7c10:	4a93      	ldr	r2, [pc, #588]	; (7e60 <__ieee754_log+0x3d0>)
    7c12:	4b94      	ldr	r3, [pc, #592]	; (7e64 <__ieee754_log+0x3d4>)
    7c14:	f002 fa7e 	bl	a114 <__aeabi_dadd>
    7c18:	0022      	movs	r2, r4
    7c1a:	002b      	movs	r3, r5
    7c1c:	f003 f9be 	bl	af9c <__aeabi_dmul>
    7c20:	000b      	movs	r3, r1
    7c22:	0002      	movs	r2, r0
    7c24:	9800      	ldr	r0, [sp, #0]
    7c26:	9901      	ldr	r1, [sp, #4]
    7c28:	f002 fa74 	bl	a114 <__aeabi_dadd>
    7c2c:	000d      	movs	r5, r1
    7c2e:	4641      	mov	r1, r8
    7c30:	4b8d      	ldr	r3, [pc, #564]	; (7e68 <__ieee754_log+0x3d8>)
    7c32:	0004      	movs	r4, r0
    7c34:	1a5b      	subs	r3, r3, r1
    7c36:	4651      	mov	r1, sl
    7c38:	430b      	orrs	r3, r1
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	dd54      	ble.n	7ce8 <__ieee754_log+0x258>
    7c3e:	2200      	movs	r2, #0
    7c40:	4b8a      	ldr	r3, [pc, #552]	; (7e6c <__ieee754_log+0x3dc>)
    7c42:	0030      	movs	r0, r6
    7c44:	0039      	movs	r1, r7
    7c46:	f003 f9a9 	bl	af9c <__aeabi_dmul>
    7c4a:	0032      	movs	r2, r6
    7c4c:	003b      	movs	r3, r7
    7c4e:	f003 f9a5 	bl	af9c <__aeabi_dmul>
    7c52:	464b      	mov	r3, r9
    7c54:	000a      	movs	r2, r1
    7c56:	0001      	movs	r1, r0
    7c58:	9100      	str	r1, [sp, #0]
    7c5a:	9201      	str	r2, [sp, #4]
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d172      	bne.n	7d46 <__ieee754_log+0x2b6>
    7c60:	0013      	movs	r3, r2
    7c62:	0029      	movs	r1, r5
    7c64:	0002      	movs	r2, r0
    7c66:	0020      	movs	r0, r4
    7c68:	f002 fa54 	bl	a114 <__aeabi_dadd>
    7c6c:	9a04      	ldr	r2, [sp, #16]
    7c6e:	9b05      	ldr	r3, [sp, #20]
    7c70:	f003 f994 	bl	af9c <__aeabi_dmul>
    7c74:	0002      	movs	r2, r0
    7c76:	000b      	movs	r3, r1
    7c78:	9800      	ldr	r0, [sp, #0]
    7c7a:	9901      	ldr	r1, [sp, #4]
    7c7c:	f003 fc0e 	bl	b49c <__aeabi_dsub>
    7c80:	0002      	movs	r2, r0
    7c82:	000b      	movs	r3, r1
    7c84:	0030      	movs	r0, r6
    7c86:	0039      	movs	r1, r7
    7c88:	f003 fc08 	bl	b49c <__aeabi_dsub>
    7c8c:	e768      	b.n	7b60 <__ieee754_log+0xd0>
    7c8e:	2200      	movs	r2, #0
    7c90:	2300      	movs	r3, #0
    7c92:	2000      	movs	r0, #0
    7c94:	4976      	ldr	r1, [pc, #472]	; (7e70 <__ieee754_log+0x3e0>)
    7c96:	f002 fd4d 	bl	a734 <__aeabi_ddiv>
    7c9a:	e761      	b.n	7b60 <__ieee754_log+0xd0>
    7c9c:	4a75      	ldr	r2, [pc, #468]	; (7e74 <__ieee754_log+0x3e4>)
    7c9e:	4b76      	ldr	r3, [pc, #472]	; (7e78 <__ieee754_log+0x3e8>)
    7ca0:	0030      	movs	r0, r6
    7ca2:	0039      	movs	r1, r7
    7ca4:	f003 f97a 	bl	af9c <__aeabi_dmul>
    7ca8:	0002      	movs	r2, r0
    7caa:	000b      	movs	r3, r1
    7cac:	2000      	movs	r0, #0
    7cae:	496f      	ldr	r1, [pc, #444]	; (7e6c <__ieee754_log+0x3dc>)
    7cb0:	f003 fbf4 	bl	b49c <__aeabi_dsub>
    7cb4:	0032      	movs	r2, r6
    7cb6:	0004      	movs	r4, r0
    7cb8:	000d      	movs	r5, r1
    7cba:	003b      	movs	r3, r7
    7cbc:	0030      	movs	r0, r6
    7cbe:	0039      	movs	r1, r7
    7cc0:	f003 f96c 	bl	af9c <__aeabi_dmul>
    7cc4:	000b      	movs	r3, r1
    7cc6:	0002      	movs	r2, r0
    7cc8:	0029      	movs	r1, r5
    7cca:	0020      	movs	r0, r4
    7ccc:	f003 f966 	bl	af9c <__aeabi_dmul>
    7cd0:	464b      	mov	r3, r9
    7cd2:	0004      	movs	r4, r0
    7cd4:	000d      	movs	r5, r1
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d172      	bne.n	7dc0 <__ieee754_log+0x330>
    7cda:	0002      	movs	r2, r0
    7cdc:	000b      	movs	r3, r1
    7cde:	0030      	movs	r0, r6
    7ce0:	0039      	movs	r1, r7
    7ce2:	f003 fbdb 	bl	b49c <__aeabi_dsub>
    7ce6:	e73b      	b.n	7b60 <__ieee754_log+0xd0>
    7ce8:	464b      	mov	r3, r9
    7cea:	2b00      	cmp	r3, #0
    7cec:	d100      	bne.n	7cf0 <__ieee754_log+0x260>
    7cee:	e0c5      	b.n	7e7c <__ieee754_log+0x3ec>
    7cf0:	9802      	ldr	r0, [sp, #8]
    7cf2:	9903      	ldr	r1, [sp, #12]
    7cf4:	4a49      	ldr	r2, [pc, #292]	; (7e1c <__ieee754_log+0x38c>)
    7cf6:	4b4a      	ldr	r3, [pc, #296]	; (7e20 <__ieee754_log+0x390>)
    7cf8:	f003 f950 	bl	af9c <__aeabi_dmul>
    7cfc:	0022      	movs	r2, r4
    7cfe:	9000      	str	r0, [sp, #0]
    7d00:	9101      	str	r1, [sp, #4]
    7d02:	002b      	movs	r3, r5
    7d04:	0030      	movs	r0, r6
    7d06:	0039      	movs	r1, r7
    7d08:	f003 fbc8 	bl	b49c <__aeabi_dsub>
    7d0c:	9a04      	ldr	r2, [sp, #16]
    7d0e:	9b05      	ldr	r3, [sp, #20]
    7d10:	f003 f944 	bl	af9c <__aeabi_dmul>
    7d14:	4a43      	ldr	r2, [pc, #268]	; (7e24 <__ieee754_log+0x394>)
    7d16:	0004      	movs	r4, r0
    7d18:	000d      	movs	r5, r1
    7d1a:	9802      	ldr	r0, [sp, #8]
    7d1c:	9903      	ldr	r1, [sp, #12]
    7d1e:	4b42      	ldr	r3, [pc, #264]	; (7e28 <__ieee754_log+0x398>)
    7d20:	f003 f93c 	bl	af9c <__aeabi_dmul>
    7d24:	0002      	movs	r2, r0
    7d26:	000b      	movs	r3, r1
    7d28:	0020      	movs	r0, r4
    7d2a:	0029      	movs	r1, r5
    7d2c:	f003 fbb6 	bl	b49c <__aeabi_dsub>
    7d30:	0032      	movs	r2, r6
    7d32:	003b      	movs	r3, r7
    7d34:	f003 fbb2 	bl	b49c <__aeabi_dsub>
    7d38:	0002      	movs	r2, r0
    7d3a:	000b      	movs	r3, r1
    7d3c:	9800      	ldr	r0, [sp, #0]
    7d3e:	9901      	ldr	r1, [sp, #4]
    7d40:	f003 fbac 	bl	b49c <__aeabi_dsub>
    7d44:	e70c      	b.n	7b60 <__ieee754_log+0xd0>
    7d46:	4a35      	ldr	r2, [pc, #212]	; (7e1c <__ieee754_log+0x38c>)
    7d48:	4b35      	ldr	r3, [pc, #212]	; (7e20 <__ieee754_log+0x390>)
    7d4a:	9802      	ldr	r0, [sp, #8]
    7d4c:	9903      	ldr	r1, [sp, #12]
    7d4e:	f003 f925 	bl	af9c <__aeabi_dmul>
    7d52:	9a00      	ldr	r2, [sp, #0]
    7d54:	9b01      	ldr	r3, [sp, #4]
    7d56:	9006      	str	r0, [sp, #24]
    7d58:	9107      	str	r1, [sp, #28]
    7d5a:	0020      	movs	r0, r4
    7d5c:	0029      	movs	r1, r5
    7d5e:	f002 f9d9 	bl	a114 <__aeabi_dadd>
    7d62:	9a04      	ldr	r2, [sp, #16]
    7d64:	9b05      	ldr	r3, [sp, #20]
    7d66:	f003 f919 	bl	af9c <__aeabi_dmul>
    7d6a:	4a2e      	ldr	r2, [pc, #184]	; (7e24 <__ieee754_log+0x394>)
    7d6c:	0004      	movs	r4, r0
    7d6e:	000d      	movs	r5, r1
    7d70:	9802      	ldr	r0, [sp, #8]
    7d72:	9903      	ldr	r1, [sp, #12]
    7d74:	4b2c      	ldr	r3, [pc, #176]	; (7e28 <__ieee754_log+0x398>)
    7d76:	f003 f911 	bl	af9c <__aeabi_dmul>
    7d7a:	0002      	movs	r2, r0
    7d7c:	000b      	movs	r3, r1
    7d7e:	0020      	movs	r0, r4
    7d80:	0029      	movs	r1, r5
    7d82:	f002 f9c7 	bl	a114 <__aeabi_dadd>
    7d86:	0002      	movs	r2, r0
    7d88:	000b      	movs	r3, r1
    7d8a:	9800      	ldr	r0, [sp, #0]
    7d8c:	9901      	ldr	r1, [sp, #4]
    7d8e:	f003 fb85 	bl	b49c <__aeabi_dsub>
    7d92:	0032      	movs	r2, r6
    7d94:	003b      	movs	r3, r7
    7d96:	f003 fb81 	bl	b49c <__aeabi_dsub>
    7d9a:	0002      	movs	r2, r0
    7d9c:	000b      	movs	r3, r1
    7d9e:	9806      	ldr	r0, [sp, #24]
    7da0:	9907      	ldr	r1, [sp, #28]
    7da2:	f003 fb7b 	bl	b49c <__aeabi_dsub>
    7da6:	e6db      	b.n	7b60 <__ieee754_log+0xd0>
    7da8:	0002      	movs	r2, r0
    7daa:	000b      	movs	r3, r1
    7dac:	f003 fb76 	bl	b49c <__aeabi_dsub>
    7db0:	2200      	movs	r2, #0
    7db2:	2300      	movs	r3, #0
    7db4:	f002 fcbe 	bl	a734 <__aeabi_ddiv>
    7db8:	e6d2      	b.n	7b60 <__ieee754_log+0xd0>
    7dba:	2000      	movs	r0, #0
    7dbc:	2100      	movs	r1, #0
    7dbe:	e6cf      	b.n	7b60 <__ieee754_log+0xd0>
    7dc0:	4648      	mov	r0, r9
    7dc2:	f003 fed5 	bl	bb70 <__aeabi_i2d>
    7dc6:	4a15      	ldr	r2, [pc, #84]	; (7e1c <__ieee754_log+0x38c>)
    7dc8:	4b15      	ldr	r3, [pc, #84]	; (7e20 <__ieee754_log+0x390>)
    7dca:	9000      	str	r0, [sp, #0]
    7dcc:	9101      	str	r1, [sp, #4]
    7dce:	f003 f8e5 	bl	af9c <__aeabi_dmul>
    7dd2:	4a14      	ldr	r2, [pc, #80]	; (7e24 <__ieee754_log+0x394>)
    7dd4:	9002      	str	r0, [sp, #8]
    7dd6:	9103      	str	r1, [sp, #12]
    7dd8:	9800      	ldr	r0, [sp, #0]
    7dda:	9901      	ldr	r1, [sp, #4]
    7ddc:	4b12      	ldr	r3, [pc, #72]	; (7e28 <__ieee754_log+0x398>)
    7dde:	f003 f8dd 	bl	af9c <__aeabi_dmul>
    7de2:	0002      	movs	r2, r0
    7de4:	000b      	movs	r3, r1
    7de6:	0020      	movs	r0, r4
    7de8:	0029      	movs	r1, r5
    7dea:	f003 fb57 	bl	b49c <__aeabi_dsub>
    7dee:	0032      	movs	r2, r6
    7df0:	003b      	movs	r3, r7
    7df2:	f003 fb53 	bl	b49c <__aeabi_dsub>
    7df6:	0002      	movs	r2, r0
    7df8:	000b      	movs	r3, r1
    7dfa:	9802      	ldr	r0, [sp, #8]
    7dfc:	9903      	ldr	r1, [sp, #12]
    7dfe:	f003 fb4d 	bl	b49c <__aeabi_dsub>
    7e02:	e6ad      	b.n	7b60 <__ieee754_log+0xd0>
    7e04:	000fffff 	.word	0x000fffff
    7e08:	43500000 	.word	0x43500000
    7e0c:	7fefffff 	.word	0x7fefffff
    7e10:	fffffc01 	.word	0xfffffc01
    7e14:	00095f64 	.word	0x00095f64
    7e18:	3ff00000 	.word	0x3ff00000
    7e1c:	fee00000 	.word	0xfee00000
    7e20:	3fe62e42 	.word	0x3fe62e42
    7e24:	35793c76 	.word	0x35793c76
    7e28:	3dea39ef 	.word	0x3dea39ef
    7e2c:	fff9eb86 	.word	0xfff9eb86
    7e30:	df3e5244 	.word	0xdf3e5244
    7e34:	3fc2f112 	.word	0x3fc2f112
    7e38:	96cb03de 	.word	0x96cb03de
    7e3c:	3fc74664 	.word	0x3fc74664
    7e40:	94229359 	.word	0x94229359
    7e44:	3fd24924 	.word	0x3fd24924
    7e48:	55555593 	.word	0x55555593
    7e4c:	3fe55555 	.word	0x3fe55555
    7e50:	d078c69f 	.word	0xd078c69f
    7e54:	3fc39a09 	.word	0x3fc39a09
    7e58:	1d8e78af 	.word	0x1d8e78af
    7e5c:	3fcc71c5 	.word	0x3fcc71c5
    7e60:	9997fa04 	.word	0x9997fa04
    7e64:	3fd99999 	.word	0x3fd99999
    7e68:	0006b851 	.word	0x0006b851
    7e6c:	3fe00000 	.word	0x3fe00000
    7e70:	c3500000 	.word	0xc3500000
    7e74:	55555555 	.word	0x55555555
    7e78:	3fd55555 	.word	0x3fd55555
    7e7c:	0022      	movs	r2, r4
    7e7e:	002b      	movs	r3, r5
    7e80:	0030      	movs	r0, r6
    7e82:	0039      	movs	r1, r7
    7e84:	f003 fb0a 	bl	b49c <__aeabi_dsub>
    7e88:	9a04      	ldr	r2, [sp, #16]
    7e8a:	9b05      	ldr	r3, [sp, #20]
    7e8c:	f003 f886 	bl	af9c <__aeabi_dmul>
    7e90:	e6f6      	b.n	7c80 <__ieee754_log+0x1f0>
    7e92:	46c0      	nop			; (mov r8, r8)

00007e94 <__ieee754_pow>:
    7e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e96:	4657      	mov	r7, sl
    7e98:	464e      	mov	r6, r9
    7e9a:	4645      	mov	r5, r8
    7e9c:	46de      	mov	lr, fp
    7e9e:	001c      	movs	r4, r3
    7ea0:	0013      	movs	r3, r2
    7ea2:	b5e0      	push	{r5, r6, r7, lr}
    7ea4:	0065      	lsls	r5, r4, #1
    7ea6:	b091      	sub	sp, #68	; 0x44
    7ea8:	086d      	lsrs	r5, r5, #1
    7eaa:	9300      	str	r3, [sp, #0]
    7eac:	9401      	str	r4, [sp, #4]
    7eae:	0007      	movs	r7, r0
    7eb0:	000e      	movs	r6, r1
    7eb2:	4680      	mov	r8, r0
    7eb4:	4689      	mov	r9, r1
    7eb6:	46a2      	mov	sl, r4
    7eb8:	432b      	orrs	r3, r5
    7eba:	d031      	beq.n	7f20 <__ieee754_pow+0x8c>
    7ebc:	4b67      	ldr	r3, [pc, #412]	; (805c <__ieee754_pow+0x1c8>)
    7ebe:	0074      	lsls	r4, r6, #1
    7ec0:	0864      	lsrs	r4, r4, #1
    7ec2:	429c      	cmp	r4, r3
    7ec4:	dc27      	bgt.n	7f16 <__ieee754_pow+0x82>
    7ec6:	d024      	beq.n	7f12 <__ieee754_pow+0x7e>
    7ec8:	429d      	cmp	r5, r3
    7eca:	dc24      	bgt.n	7f16 <__ieee754_pow+0x82>
    7ecc:	4b63      	ldr	r3, [pc, #396]	; (805c <__ieee754_pow+0x1c8>)
    7ece:	429d      	cmp	r5, r3
    7ed0:	d100      	bne.n	7ed4 <__ieee754_pow+0x40>
    7ed2:	e081      	b.n	7fd8 <__ieee754_pow+0x144>
    7ed4:	2300      	movs	r3, #0
    7ed6:	469b      	mov	fp, r3
    7ed8:	464b      	mov	r3, r9
    7eda:	2b00      	cmp	r3, #0
    7edc:	da00      	bge.n	7ee0 <__ieee754_pow+0x4c>
    7ede:	e07f      	b.n	7fe0 <__ieee754_pow+0x14c>
    7ee0:	2a00      	cmp	r2, #0
    7ee2:	d12c      	bne.n	7f3e <__ieee754_pow+0xaa>
    7ee4:	4b5d      	ldr	r3, [pc, #372]	; (805c <__ieee754_pow+0x1c8>)
    7ee6:	429d      	cmp	r5, r3
    7ee8:	d100      	bne.n	7eec <__ieee754_pow+0x58>
    7eea:	e097      	b.n	801c <__ieee754_pow+0x188>
    7eec:	4b5c      	ldr	r3, [pc, #368]	; (8060 <__ieee754_pow+0x1cc>)
    7eee:	429d      	cmp	r5, r3
    7ef0:	d066      	beq.n	7fc0 <__ieee754_pow+0x12c>
    7ef2:	2380      	movs	r3, #128	; 0x80
    7ef4:	05db      	lsls	r3, r3, #23
    7ef6:	459a      	cmp	sl, r3
    7ef8:	d100      	bne.n	7efc <__ieee754_pow+0x68>
    7efa:	e3b9      	b.n	8670 <__ieee754_pow+0x7dc>
    7efc:	4b59      	ldr	r3, [pc, #356]	; (8064 <__ieee754_pow+0x1d0>)
    7efe:	459a      	cmp	sl, r3
    7f00:	d11d      	bne.n	7f3e <__ieee754_pow+0xaa>
    7f02:	464b      	mov	r3, r9
    7f04:	2b00      	cmp	r3, #0
    7f06:	db1a      	blt.n	7f3e <__ieee754_pow+0xaa>
    7f08:	0038      	movs	r0, r7
    7f0a:	0031      	movs	r1, r6
    7f0c:	f000 fcf8 	bl	8900 <__ieee754_sqrt>
    7f10:	e008      	b.n	7f24 <__ieee754_pow+0x90>
    7f12:	2800      	cmp	r0, #0
    7f14:	d00d      	beq.n	7f32 <__ieee754_pow+0x9e>
    7f16:	4b54      	ldr	r3, [pc, #336]	; (8068 <__ieee754_pow+0x1d4>)
    7f18:	469c      	mov	ip, r3
    7f1a:	4464      	add	r4, ip
    7f1c:	4327      	orrs	r7, r4
    7f1e:	d10a      	bne.n	7f36 <__ieee754_pow+0xa2>
    7f20:	2000      	movs	r0, #0
    7f22:	494f      	ldr	r1, [pc, #316]	; (8060 <__ieee754_pow+0x1cc>)
    7f24:	b011      	add	sp, #68	; 0x44
    7f26:	bc3c      	pop	{r2, r3, r4, r5}
    7f28:	4690      	mov	r8, r2
    7f2a:	4699      	mov	r9, r3
    7f2c:	46a2      	mov	sl, r4
    7f2e:	46ab      	mov	fp, r5
    7f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f32:	42a5      	cmp	r5, r4
    7f34:	ddca      	ble.n	7ecc <__ieee754_pow+0x38>
    7f36:	484d      	ldr	r0, [pc, #308]	; (806c <__ieee754_pow+0x1d8>)
    7f38:	f000 fdd2 	bl	8ae0 <nan>
    7f3c:	e7f2      	b.n	7f24 <__ieee754_pow+0x90>
    7f3e:	0038      	movs	r0, r7
    7f40:	0031      	movs	r1, r6
    7f42:	f000 fdbd 	bl	8ac0 <fabs>
    7f46:	4643      	mov	r3, r8
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d11d      	bne.n	7f88 <__ieee754_pow+0xf4>
    7f4c:	2c00      	cmp	r4, #0
    7f4e:	d004      	beq.n	7f5a <__ieee754_pow+0xc6>
    7f50:	4a43      	ldr	r2, [pc, #268]	; (8060 <__ieee754_pow+0x1cc>)
    7f52:	00b3      	lsls	r3, r6, #2
    7f54:	089b      	lsrs	r3, r3, #2
    7f56:	4293      	cmp	r3, r2
    7f58:	d116      	bne.n	7f88 <__ieee754_pow+0xf4>
    7f5a:	4653      	mov	r3, sl
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	da00      	bge.n	7f62 <__ieee754_pow+0xce>
    7f60:	e3c5      	b.n	86ee <__ieee754_pow+0x85a>
    7f62:	464b      	mov	r3, r9
    7f64:	2b00      	cmp	r3, #0
    7f66:	dadd      	bge.n	7f24 <__ieee754_pow+0x90>
    7f68:	4b3f      	ldr	r3, [pc, #252]	; (8068 <__ieee754_pow+0x1d4>)
    7f6a:	469c      	mov	ip, r3
    7f6c:	465b      	mov	r3, fp
    7f6e:	4464      	add	r4, ip
    7f70:	431c      	orrs	r4, r3
    7f72:	d101      	bne.n	7f78 <__ieee754_pow+0xe4>
    7f74:	f000 fc53 	bl	881e <__ieee754_pow+0x98a>
    7f78:	465b      	mov	r3, fp
    7f7a:	2b01      	cmp	r3, #1
    7f7c:	d1d2      	bne.n	7f24 <__ieee754_pow+0x90>
    7f7e:	2480      	movs	r4, #128	; 0x80
    7f80:	0624      	lsls	r4, r4, #24
    7f82:	190b      	adds	r3, r1, r4
    7f84:	0019      	movs	r1, r3
    7f86:	e7cd      	b.n	7f24 <__ieee754_pow+0x90>
    7f88:	0ff3      	lsrs	r3, r6, #31
    7f8a:	3b01      	subs	r3, #1
    7f8c:	4698      	mov	r8, r3
    7f8e:	465b      	mov	r3, fp
    7f90:	4642      	mov	r2, r8
    7f92:	4313      	orrs	r3, r2
    7f94:	d057      	beq.n	8046 <__ieee754_pow+0x1b2>
    7f96:	4b36      	ldr	r3, [pc, #216]	; (8070 <__ieee754_pow+0x1dc>)
    7f98:	429d      	cmp	r5, r3
    7f9a:	dd77      	ble.n	808c <__ieee754_pow+0x1f8>
    7f9c:	4b35      	ldr	r3, [pc, #212]	; (8074 <__ieee754_pow+0x1e0>)
    7f9e:	429d      	cmp	r5, r3
    7fa0:	dc00      	bgt.n	7fa4 <__ieee754_pow+0x110>
    7fa2:	e3b1      	b.n	8708 <__ieee754_pow+0x874>
    7fa4:	4b34      	ldr	r3, [pc, #208]	; (8078 <__ieee754_pow+0x1e4>)
    7fa6:	429c      	cmp	r4, r3
    7fa8:	dc00      	bgt.n	7fac <__ieee754_pow+0x118>
    7faa:	e3a8      	b.n	86fe <__ieee754_pow+0x86a>
    7fac:	4653      	mov	r3, sl
    7fae:	2b00      	cmp	r3, #0
    7fb0:	dd43      	ble.n	803a <__ieee754_pow+0x1a6>
    7fb2:	4a32      	ldr	r2, [pc, #200]	; (807c <__ieee754_pow+0x1e8>)
    7fb4:	4b32      	ldr	r3, [pc, #200]	; (8080 <__ieee754_pow+0x1ec>)
    7fb6:	0010      	movs	r0, r2
    7fb8:	0019      	movs	r1, r3
    7fba:	f002 ffef 	bl	af9c <__aeabi_dmul>
    7fbe:	e7b1      	b.n	7f24 <__ieee754_pow+0x90>
    7fc0:	4653      	mov	r3, sl
    7fc2:	0038      	movs	r0, r7
    7fc4:	0031      	movs	r1, r6
    7fc6:	2b00      	cmp	r3, #0
    7fc8:	daac      	bge.n	7f24 <__ieee754_pow+0x90>
    7fca:	003a      	movs	r2, r7
    7fcc:	0033      	movs	r3, r6
    7fce:	2000      	movs	r0, #0
    7fd0:	4923      	ldr	r1, [pc, #140]	; (8060 <__ieee754_pow+0x1cc>)
    7fd2:	f002 fbaf 	bl	a734 <__aeabi_ddiv>
    7fd6:	e7a5      	b.n	7f24 <__ieee754_pow+0x90>
    7fd8:	2a00      	cmp	r2, #0
    7fda:	d100      	bne.n	7fde <__ieee754_pow+0x14a>
    7fdc:	e77a      	b.n	7ed4 <__ieee754_pow+0x40>
    7fde:	e79a      	b.n	7f16 <__ieee754_pow+0x82>
    7fe0:	4b28      	ldr	r3, [pc, #160]	; (8084 <__ieee754_pow+0x1f0>)
    7fe2:	429d      	cmp	r5, r3
    7fe4:	dc2c      	bgt.n	8040 <__ieee754_pow+0x1ac>
    7fe6:	4b24      	ldr	r3, [pc, #144]	; (8078 <__ieee754_pow+0x1e4>)
    7fe8:	429d      	cmp	r5, r3
    7fea:	dc00      	bgt.n	7fee <__ieee754_pow+0x15a>
    7fec:	e778      	b.n	7ee0 <__ieee754_pow+0x4c>
    7fee:	4926      	ldr	r1, [pc, #152]	; (8088 <__ieee754_pow+0x1f4>)
    7ff0:	152b      	asrs	r3, r5, #20
    7ff2:	468c      	mov	ip, r1
    7ff4:	4463      	add	r3, ip
    7ff6:	2b14      	cmp	r3, #20
    7ff8:	dc01      	bgt.n	7ffe <__ieee754_pow+0x16a>
    7ffa:	f000 fbf3 	bl	87e4 <__ieee754_pow+0x950>
    7ffe:	2134      	movs	r1, #52	; 0x34
    8000:	1acb      	subs	r3, r1, r3
    8002:	9900      	ldr	r1, [sp, #0]
    8004:	40d9      	lsrs	r1, r3
    8006:	0008      	movs	r0, r1
    8008:	4098      	lsls	r0, r3
    800a:	4282      	cmp	r2, r0
    800c:	d000      	beq.n	8010 <__ieee754_pow+0x17c>
    800e:	e767      	b.n	7ee0 <__ieee754_pow+0x4c>
    8010:	2301      	movs	r3, #1
    8012:	4019      	ands	r1, r3
    8014:	3301      	adds	r3, #1
    8016:	1a5b      	subs	r3, r3, r1
    8018:	469b      	mov	fp, r3
    801a:	e761      	b.n	7ee0 <__ieee754_pow+0x4c>
    801c:	4b12      	ldr	r3, [pc, #72]	; (8068 <__ieee754_pow+0x1d4>)
    801e:	18e3      	adds	r3, r4, r3
    8020:	431f      	orrs	r7, r3
    8022:	d100      	bne.n	8026 <__ieee754_pow+0x192>
    8024:	e77c      	b.n	7f20 <__ieee754_pow+0x8c>
    8026:	4b14      	ldr	r3, [pc, #80]	; (8078 <__ieee754_pow+0x1e4>)
    8028:	429c      	cmp	r4, r3
    802a:	dc00      	bgt.n	802e <__ieee754_pow+0x19a>
    802c:	e327      	b.n	867e <__ieee754_pow+0x7ea>
    802e:	9800      	ldr	r0, [sp, #0]
    8030:	9901      	ldr	r1, [sp, #4]
    8032:	4653      	mov	r3, sl
    8034:	2b00      	cmp	r3, #0
    8036:	db00      	blt.n	803a <__ieee754_pow+0x1a6>
    8038:	e774      	b.n	7f24 <__ieee754_pow+0x90>
    803a:	2000      	movs	r0, #0
    803c:	2100      	movs	r1, #0
    803e:	e771      	b.n	7f24 <__ieee754_pow+0x90>
    8040:	2302      	movs	r3, #2
    8042:	469b      	mov	fp, r3
    8044:	e74c      	b.n	7ee0 <__ieee754_pow+0x4c>
    8046:	003a      	movs	r2, r7
    8048:	0033      	movs	r3, r6
    804a:	0038      	movs	r0, r7
    804c:	0031      	movs	r1, r6
    804e:	f003 fa25 	bl	b49c <__aeabi_dsub>
    8052:	0002      	movs	r2, r0
    8054:	000b      	movs	r3, r1
    8056:	f002 fb6d 	bl	a734 <__aeabi_ddiv>
    805a:	e763      	b.n	7f24 <__ieee754_pow+0x90>
    805c:	7ff00000 	.word	0x7ff00000
    8060:	3ff00000 	.word	0x3ff00000
    8064:	3fe00000 	.word	0x3fe00000
    8068:	c0100000 	.word	0xc0100000
    806c:	00010d34 	.word	0x00010d34
    8070:	41e00000 	.word	0x41e00000
    8074:	43f00000 	.word	0x43f00000
    8078:	3fefffff 	.word	0x3fefffff
    807c:	8800759c 	.word	0x8800759c
    8080:	7e37e43c 	.word	0x7e37e43c
    8084:	433fffff 	.word	0x433fffff
    8088:	fffffc01 	.word	0xfffffc01
    808c:	4be9      	ldr	r3, [pc, #932]	; (8434 <__ieee754_pow+0x5a0>)
    808e:	2200      	movs	r2, #0
    8090:	429c      	cmp	r4, r3
    8092:	dc06      	bgt.n	80a2 <__ieee754_pow+0x20e>
    8094:	2200      	movs	r2, #0
    8096:	4be8      	ldr	r3, [pc, #928]	; (8438 <__ieee754_pow+0x5a4>)
    8098:	f002 ff80 	bl	af9c <__aeabi_dmul>
    809c:	2235      	movs	r2, #53	; 0x35
    809e:	000c      	movs	r4, r1
    80a0:	4252      	negs	r2, r2
    80a2:	4de6      	ldr	r5, [pc, #920]	; (843c <__ieee754_pow+0x5a8>)
    80a4:	1523      	asrs	r3, r4, #20
    80a6:	46ac      	mov	ip, r5
    80a8:	4463      	add	r3, ip
    80aa:	4699      	mov	r9, r3
    80ac:	0324      	lsls	r4, r4, #12
    80ae:	4de4      	ldr	r5, [pc, #912]	; (8440 <__ieee754_pow+0x5ac>)
    80b0:	4be4      	ldr	r3, [pc, #912]	; (8444 <__ieee754_pow+0x5b0>)
    80b2:	0b24      	lsrs	r4, r4, #12
    80b4:	4491      	add	r9, r2
    80b6:	4325      	orrs	r5, r4
    80b8:	429c      	cmp	r4, r3
    80ba:	dd09      	ble.n	80d0 <__ieee754_pow+0x23c>
    80bc:	4be2      	ldr	r3, [pc, #904]	; (8448 <__ieee754_pow+0x5b4>)
    80be:	429c      	cmp	r4, r3
    80c0:	dc00      	bgt.n	80c4 <__ieee754_pow+0x230>
    80c2:	e3b6      	b.n	8832 <__ieee754_pow+0x99e>
    80c4:	2301      	movs	r3, #1
    80c6:	469c      	mov	ip, r3
    80c8:	4be0      	ldr	r3, [pc, #896]	; (844c <__ieee754_pow+0x5b8>)
    80ca:	44e1      	add	r9, ip
    80cc:	469c      	mov	ip, r3
    80ce:	4465      	add	r5, ip
    80d0:	2300      	movs	r3, #0
    80d2:	2400      	movs	r4, #0
    80d4:	2200      	movs	r2, #0
    80d6:	9308      	str	r3, [sp, #32]
    80d8:	9409      	str	r4, [sp, #36]	; 0x24
    80da:	930c      	str	r3, [sp, #48]	; 0x30
    80dc:	940d      	str	r4, [sp, #52]	; 0x34
    80de:	2400      	movs	r4, #0
    80e0:	4bd7      	ldr	r3, [pc, #860]	; (8440 <__ieee754_pow+0x5ac>)
    80e2:	9206      	str	r2, [sp, #24]
    80e4:	9307      	str	r3, [sp, #28]
    80e6:	9a06      	ldr	r2, [sp, #24]
    80e8:	9b07      	ldr	r3, [sp, #28]
    80ea:	0029      	movs	r1, r5
    80ec:	900a      	str	r0, [sp, #40]	; 0x28
    80ee:	910b      	str	r1, [sp, #44]	; 0x2c
    80f0:	f003 f9d4 	bl	b49c <__aeabi_dsub>
    80f4:	9a06      	ldr	r2, [sp, #24]
    80f6:	9b07      	ldr	r3, [sp, #28]
    80f8:	0006      	movs	r6, r0
    80fa:	000f      	movs	r7, r1
    80fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    80fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8100:	f002 f808 	bl	a114 <__aeabi_dadd>
    8104:	0002      	movs	r2, r0
    8106:	000b      	movs	r3, r1
    8108:	2000      	movs	r0, #0
    810a:	49cd      	ldr	r1, [pc, #820]	; (8440 <__ieee754_pow+0x5ac>)
    810c:	f002 fb12 	bl	a734 <__aeabi_ddiv>
    8110:	000a      	movs	r2, r1
    8112:	0001      	movs	r1, r0
    8114:	0013      	movs	r3, r2
    8116:	910e      	str	r1, [sp, #56]	; 0x38
    8118:	920f      	str	r2, [sp, #60]	; 0x3c
    811a:	0002      	movs	r2, r0
    811c:	0039      	movs	r1, r7
    811e:	0030      	movs	r0, r6
    8120:	f002 ff3c 	bl	af9c <__aeabi_dmul>
    8124:	000a      	movs	r2, r1
    8126:	0001      	movs	r1, r0
    8128:	2080      	movs	r0, #128	; 0x80
    812a:	9104      	str	r1, [sp, #16]
    812c:	9205      	str	r2, [sp, #20]
    812e:	0013      	movs	r3, r2
    8130:	2200      	movs	r2, #0
    8132:	1069      	asrs	r1, r5, #1
    8134:	2580      	movs	r5, #128	; 0x80
    8136:	0300      	lsls	r0, r0, #12
    8138:	4684      	mov	ip, r0
    813a:	9202      	str	r2, [sp, #8]
    813c:	9303      	str	r3, [sp, #12]
    813e:	2200      	movs	r2, #0
    8140:	05ad      	lsls	r5, r5, #22
    8142:	430d      	orrs	r5, r1
    8144:	4465      	add	r5, ip
    8146:	192b      	adds	r3, r5, r4
    8148:	9802      	ldr	r0, [sp, #8]
    814a:	9903      	ldr	r1, [sp, #12]
    814c:	0014      	movs	r4, r2
    814e:	001d      	movs	r5, r3
    8150:	f002 ff24 	bl	af9c <__aeabi_dmul>
    8154:	0002      	movs	r2, r0
    8156:	000b      	movs	r3, r1
    8158:	0030      	movs	r0, r6
    815a:	0039      	movs	r1, r7
    815c:	f003 f99e 	bl	b49c <__aeabi_dsub>
    8160:	9a06      	ldr	r2, [sp, #24]
    8162:	9b07      	ldr	r3, [sp, #28]
    8164:	0006      	movs	r6, r0
    8166:	000f      	movs	r7, r1
    8168:	0020      	movs	r0, r4
    816a:	0029      	movs	r1, r5
    816c:	f003 f996 	bl	b49c <__aeabi_dsub>
    8170:	0002      	movs	r2, r0
    8172:	000b      	movs	r3, r1
    8174:	980a      	ldr	r0, [sp, #40]	; 0x28
    8176:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8178:	f003 f990 	bl	b49c <__aeabi_dsub>
    817c:	9a02      	ldr	r2, [sp, #8]
    817e:	9b03      	ldr	r3, [sp, #12]
    8180:	f002 ff0c 	bl	af9c <__aeabi_dmul>
    8184:	0002      	movs	r2, r0
    8186:	000b      	movs	r3, r1
    8188:	0030      	movs	r0, r6
    818a:	0039      	movs	r1, r7
    818c:	f003 f986 	bl	b49c <__aeabi_dsub>
    8190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8194:	f002 ff02 	bl	af9c <__aeabi_dmul>
    8198:	9d04      	ldr	r5, [sp, #16]
    819a:	9e05      	ldr	r6, [sp, #20]
    819c:	9006      	str	r0, [sp, #24]
    819e:	9107      	str	r1, [sp, #28]
    81a0:	002a      	movs	r2, r5
    81a2:	0033      	movs	r3, r6
    81a4:	0028      	movs	r0, r5
    81a6:	0031      	movs	r1, r6
    81a8:	f002 fef8 	bl	af9c <__aeabi_dmul>
    81ac:	0006      	movs	r6, r0
    81ae:	000f      	movs	r7, r1
    81b0:	4aa7      	ldr	r2, [pc, #668]	; (8450 <__ieee754_pow+0x5bc>)
    81b2:	4ba8      	ldr	r3, [pc, #672]	; (8454 <__ieee754_pow+0x5c0>)
    81b4:	f002 fef2 	bl	af9c <__aeabi_dmul>
    81b8:	4aa7      	ldr	r2, [pc, #668]	; (8458 <__ieee754_pow+0x5c4>)
    81ba:	4ba8      	ldr	r3, [pc, #672]	; (845c <__ieee754_pow+0x5c8>)
    81bc:	f001 ffaa 	bl	a114 <__aeabi_dadd>
    81c0:	0032      	movs	r2, r6
    81c2:	003b      	movs	r3, r7
    81c4:	f002 feea 	bl	af9c <__aeabi_dmul>
    81c8:	4aa5      	ldr	r2, [pc, #660]	; (8460 <__ieee754_pow+0x5cc>)
    81ca:	4ba6      	ldr	r3, [pc, #664]	; (8464 <__ieee754_pow+0x5d0>)
    81cc:	f001 ffa2 	bl	a114 <__aeabi_dadd>
    81d0:	0032      	movs	r2, r6
    81d2:	003b      	movs	r3, r7
    81d4:	f002 fee2 	bl	af9c <__aeabi_dmul>
    81d8:	4aa3      	ldr	r2, [pc, #652]	; (8468 <__ieee754_pow+0x5d4>)
    81da:	4ba4      	ldr	r3, [pc, #656]	; (846c <__ieee754_pow+0x5d8>)
    81dc:	f001 ff9a 	bl	a114 <__aeabi_dadd>
    81e0:	0032      	movs	r2, r6
    81e2:	003b      	movs	r3, r7
    81e4:	f002 feda 	bl	af9c <__aeabi_dmul>
    81e8:	4aa1      	ldr	r2, [pc, #644]	; (8470 <__ieee754_pow+0x5dc>)
    81ea:	4ba2      	ldr	r3, [pc, #648]	; (8474 <__ieee754_pow+0x5e0>)
    81ec:	f001 ff92 	bl	a114 <__aeabi_dadd>
    81f0:	0032      	movs	r2, r6
    81f2:	003b      	movs	r3, r7
    81f4:	f002 fed2 	bl	af9c <__aeabi_dmul>
    81f8:	4a9f      	ldr	r2, [pc, #636]	; (8478 <__ieee754_pow+0x5e4>)
    81fa:	4ba0      	ldr	r3, [pc, #640]	; (847c <__ieee754_pow+0x5e8>)
    81fc:	f001 ff8a 	bl	a114 <__aeabi_dadd>
    8200:	0032      	movs	r2, r6
    8202:	0004      	movs	r4, r0
    8204:	000d      	movs	r5, r1
    8206:	003b      	movs	r3, r7
    8208:	0030      	movs	r0, r6
    820a:	0039      	movs	r1, r7
    820c:	f002 fec6 	bl	af9c <__aeabi_dmul>
    8210:	0002      	movs	r2, r0
    8212:	000b      	movs	r3, r1
    8214:	0020      	movs	r0, r4
    8216:	0029      	movs	r1, r5
    8218:	f002 fec0 	bl	af9c <__aeabi_dmul>
    821c:	9e02      	ldr	r6, [sp, #8]
    821e:	9f03      	ldr	r7, [sp, #12]
    8220:	0004      	movs	r4, r0
    8222:	000d      	movs	r5, r1
    8224:	9804      	ldr	r0, [sp, #16]
    8226:	9905      	ldr	r1, [sp, #20]
    8228:	0032      	movs	r2, r6
    822a:	003b      	movs	r3, r7
    822c:	f001 ff72 	bl	a114 <__aeabi_dadd>
    8230:	9a06      	ldr	r2, [sp, #24]
    8232:	9b07      	ldr	r3, [sp, #28]
    8234:	f002 feb2 	bl	af9c <__aeabi_dmul>
    8238:	0022      	movs	r2, r4
    823a:	002b      	movs	r3, r5
    823c:	f001 ff6a 	bl	a114 <__aeabi_dadd>
    8240:	0032      	movs	r2, r6
    8242:	900a      	str	r0, [sp, #40]	; 0x28
    8244:	910b      	str	r1, [sp, #44]	; 0x2c
    8246:	003b      	movs	r3, r7
    8248:	0030      	movs	r0, r6
    824a:	0039      	movs	r1, r7
    824c:	9602      	str	r6, [sp, #8]
    824e:	9703      	str	r7, [sp, #12]
    8250:	f002 fea4 	bl	af9c <__aeabi_dmul>
    8254:	2200      	movs	r2, #0
    8256:	4b8a      	ldr	r3, [pc, #552]	; (8480 <__ieee754_pow+0x5ec>)
    8258:	0004      	movs	r4, r0
    825a:	000d      	movs	r5, r1
    825c:	f001 ff5a 	bl	a114 <__aeabi_dadd>
    8260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8264:	f001 ff56 	bl	a114 <__aeabi_dadd>
    8268:	2600      	movs	r6, #0
    826a:	000f      	movs	r7, r1
    826c:	0032      	movs	r2, r6
    826e:	000b      	movs	r3, r1
    8270:	9802      	ldr	r0, [sp, #8]
    8272:	9903      	ldr	r1, [sp, #12]
    8274:	f002 fe92 	bl	af9c <__aeabi_dmul>
    8278:	2200      	movs	r2, #0
    827a:	9002      	str	r0, [sp, #8]
    827c:	9103      	str	r1, [sp, #12]
    827e:	4b80      	ldr	r3, [pc, #512]	; (8480 <__ieee754_pow+0x5ec>)
    8280:	0030      	movs	r0, r6
    8282:	0039      	movs	r1, r7
    8284:	f003 f90a 	bl	b49c <__aeabi_dsub>
    8288:	0022      	movs	r2, r4
    828a:	002b      	movs	r3, r5
    828c:	f003 f906 	bl	b49c <__aeabi_dsub>
    8290:	0002      	movs	r2, r0
    8292:	000b      	movs	r3, r1
    8294:	980a      	ldr	r0, [sp, #40]	; 0x28
    8296:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8298:	f003 f900 	bl	b49c <__aeabi_dsub>
    829c:	9a04      	ldr	r2, [sp, #16]
    829e:	9b05      	ldr	r3, [sp, #20]
    82a0:	f002 fe7c 	bl	af9c <__aeabi_dmul>
    82a4:	0032      	movs	r2, r6
    82a6:	0004      	movs	r4, r0
    82a8:	000d      	movs	r5, r1
    82aa:	9806      	ldr	r0, [sp, #24]
    82ac:	9907      	ldr	r1, [sp, #28]
    82ae:	003b      	movs	r3, r7
    82b0:	f002 fe74 	bl	af9c <__aeabi_dmul>
    82b4:	0002      	movs	r2, r0
    82b6:	000b      	movs	r3, r1
    82b8:	0020      	movs	r0, r4
    82ba:	0029      	movs	r1, r5
    82bc:	f001 ff2a 	bl	a114 <__aeabi_dadd>
    82c0:	0004      	movs	r4, r0
    82c2:	000d      	movs	r5, r1
    82c4:	0002      	movs	r2, r0
    82c6:	000b      	movs	r3, r1
    82c8:	9802      	ldr	r0, [sp, #8]
    82ca:	9903      	ldr	r1, [sp, #12]
    82cc:	f001 ff22 	bl	a114 <__aeabi_dadd>
    82d0:	2600      	movs	r6, #0
    82d2:	22e0      	movs	r2, #224	; 0xe0
    82d4:	4b6b      	ldr	r3, [pc, #428]	; (8484 <__ieee754_pow+0x5f0>)
    82d6:	0612      	lsls	r2, r2, #24
    82d8:	0030      	movs	r0, r6
    82da:	000f      	movs	r7, r1
    82dc:	f002 fe5e 	bl	af9c <__aeabi_dmul>
    82e0:	9a02      	ldr	r2, [sp, #8]
    82e2:	9b03      	ldr	r3, [sp, #12]
    82e4:	9004      	str	r0, [sp, #16]
    82e6:	9105      	str	r1, [sp, #20]
    82e8:	0030      	movs	r0, r6
    82ea:	0039      	movs	r1, r7
    82ec:	f003 f8d6 	bl	b49c <__aeabi_dsub>
    82f0:	0002      	movs	r2, r0
    82f2:	000b      	movs	r3, r1
    82f4:	0020      	movs	r0, r4
    82f6:	0029      	movs	r1, r5
    82f8:	f003 f8d0 	bl	b49c <__aeabi_dsub>
    82fc:	4a62      	ldr	r2, [pc, #392]	; (8488 <__ieee754_pow+0x5f4>)
    82fe:	4b61      	ldr	r3, [pc, #388]	; (8484 <__ieee754_pow+0x5f0>)
    8300:	f002 fe4c 	bl	af9c <__aeabi_dmul>
    8304:	4a61      	ldr	r2, [pc, #388]	; (848c <__ieee754_pow+0x5f8>)
    8306:	0004      	movs	r4, r0
    8308:	000d      	movs	r5, r1
    830a:	4b61      	ldr	r3, [pc, #388]	; (8490 <__ieee754_pow+0x5fc>)
    830c:	0030      	movs	r0, r6
    830e:	0039      	movs	r1, r7
    8310:	f002 fe44 	bl	af9c <__aeabi_dmul>
    8314:	0002      	movs	r2, r0
    8316:	000b      	movs	r3, r1
    8318:	0020      	movs	r0, r4
    831a:	0029      	movs	r1, r5
    831c:	f001 fefa 	bl	a114 <__aeabi_dadd>
    8320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8324:	f001 fef6 	bl	a114 <__aeabi_dadd>
    8328:	0006      	movs	r6, r0
    832a:	4648      	mov	r0, r9
    832c:	000f      	movs	r7, r1
    832e:	f003 fc1f 	bl	bb70 <__aeabi_i2d>
    8332:	0004      	movs	r4, r0
    8334:	000d      	movs	r5, r1
    8336:	9804      	ldr	r0, [sp, #16]
    8338:	9905      	ldr	r1, [sp, #20]
    833a:	0032      	movs	r2, r6
    833c:	003b      	movs	r3, r7
    833e:	f001 fee9 	bl	a114 <__aeabi_dadd>
    8342:	9a08      	ldr	r2, [sp, #32]
    8344:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8346:	f001 fee5 	bl	a114 <__aeabi_dadd>
    834a:	0022      	movs	r2, r4
    834c:	002b      	movs	r3, r5
    834e:	f001 fee1 	bl	a114 <__aeabi_dadd>
    8352:	2000      	movs	r0, #0
    8354:	0022      	movs	r2, r4
    8356:	002b      	movs	r3, r5
    8358:	9002      	str	r0, [sp, #8]
    835a:	9103      	str	r1, [sp, #12]
    835c:	f003 f89e 	bl	b49c <__aeabi_dsub>
    8360:	9a08      	ldr	r2, [sp, #32]
    8362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8364:	f003 f89a 	bl	b49c <__aeabi_dsub>
    8368:	9a04      	ldr	r2, [sp, #16]
    836a:	9b05      	ldr	r3, [sp, #20]
    836c:	f003 f896 	bl	b49c <__aeabi_dsub>
    8370:	0002      	movs	r2, r0
    8372:	000b      	movs	r3, r1
    8374:	0030      	movs	r0, r6
    8376:	0039      	movs	r1, r7
    8378:	f003 f890 	bl	b49c <__aeabi_dsub>
    837c:	9004      	str	r0, [sp, #16]
    837e:	9105      	str	r1, [sp, #20]
    8380:	465b      	mov	r3, fp
    8382:	4642      	mov	r2, r8
    8384:	3b01      	subs	r3, #1
    8386:	4313      	orrs	r3, r2
    8388:	d100      	bne.n	838c <__ieee754_pow+0x4f8>
    838a:	e1ab      	b.n	86e4 <__ieee754_pow+0x850>
    838c:	2300      	movs	r3, #0
    838e:	4c2c      	ldr	r4, [pc, #176]	; (8440 <__ieee754_pow+0x5ac>)
    8390:	9306      	str	r3, [sp, #24]
    8392:	9407      	str	r4, [sp, #28]
    8394:	9800      	ldr	r0, [sp, #0]
    8396:	9901      	ldr	r1, [sp, #4]
    8398:	2600      	movs	r6, #0
    839a:	000b      	movs	r3, r1
    839c:	0032      	movs	r2, r6
    839e:	000f      	movs	r7, r1
    83a0:	f003 f87c 	bl	b49c <__aeabi_dsub>
    83a4:	9a02      	ldr	r2, [sp, #8]
    83a6:	9b03      	ldr	r3, [sp, #12]
    83a8:	f002 fdf8 	bl	af9c <__aeabi_dmul>
    83ac:	9a00      	ldr	r2, [sp, #0]
    83ae:	9b01      	ldr	r3, [sp, #4]
    83b0:	0004      	movs	r4, r0
    83b2:	000d      	movs	r5, r1
    83b4:	9804      	ldr	r0, [sp, #16]
    83b6:	9905      	ldr	r1, [sp, #20]
    83b8:	f002 fdf0 	bl	af9c <__aeabi_dmul>
    83bc:	0002      	movs	r2, r0
    83be:	000b      	movs	r3, r1
    83c0:	0020      	movs	r0, r4
    83c2:	0029      	movs	r1, r5
    83c4:	f001 fea6 	bl	a114 <__aeabi_dadd>
    83c8:	0004      	movs	r4, r0
    83ca:	000d      	movs	r5, r1
    83cc:	9802      	ldr	r0, [sp, #8]
    83ce:	9903      	ldr	r1, [sp, #12]
    83d0:	0032      	movs	r2, r6
    83d2:	003b      	movs	r3, r7
    83d4:	9400      	str	r4, [sp, #0]
    83d6:	9501      	str	r5, [sp, #4]
    83d8:	f002 fde0 	bl	af9c <__aeabi_dmul>
    83dc:	0002      	movs	r2, r0
    83de:	000b      	movs	r3, r1
    83e0:	0006      	movs	r6, r0
    83e2:	000f      	movs	r7, r1
    83e4:	0020      	movs	r0, r4
    83e6:	0029      	movs	r1, r5
    83e8:	f001 fe94 	bl	a114 <__aeabi_dadd>
    83ec:	4b29      	ldr	r3, [pc, #164]	; (8494 <__ieee754_pow+0x600>)
    83ee:	0004      	movs	r4, r0
    83f0:	000d      	movs	r5, r1
    83f2:	0002      	movs	r2, r0
    83f4:	468b      	mov	fp, r1
    83f6:	4299      	cmp	r1, r3
    83f8:	dc00      	bgt.n	83fc <__ieee754_pow+0x568>
    83fa:	e14f      	b.n	869c <__ieee754_pow+0x808>
    83fc:	4b26      	ldr	r3, [pc, #152]	; (8498 <__ieee754_pow+0x604>)
    83fe:	18cb      	adds	r3, r1, r3
    8400:	4303      	orrs	r3, r0
    8402:	d000      	beq.n	8406 <__ieee754_pow+0x572>
    8404:	e1e2      	b.n	87cc <__ieee754_pow+0x938>
    8406:	9800      	ldr	r0, [sp, #0]
    8408:	9901      	ldr	r1, [sp, #4]
    840a:	4a24      	ldr	r2, [pc, #144]	; (849c <__ieee754_pow+0x608>)
    840c:	4b24      	ldr	r3, [pc, #144]	; (84a0 <__ieee754_pow+0x60c>)
    840e:	f001 fe81 	bl	a114 <__aeabi_dadd>
    8412:	0032      	movs	r2, r6
    8414:	9002      	str	r0, [sp, #8]
    8416:	9103      	str	r1, [sp, #12]
    8418:	003b      	movs	r3, r7
    841a:	0020      	movs	r0, r4
    841c:	0029      	movs	r1, r5
    841e:	f003 f83d 	bl	b49c <__aeabi_dsub>
    8422:	0002      	movs	r2, r0
    8424:	000b      	movs	r3, r1
    8426:	9802      	ldr	r0, [sp, #8]
    8428:	9903      	ldr	r1, [sp, #12]
    842a:	f000 fe11 	bl	9050 <__aeabi_dcmpgt>
    842e:	46aa      	mov	sl, r5
    8430:	e038      	b.n	84a4 <__ieee754_pow+0x610>
    8432:	46c0      	nop			; (mov r8, r8)
    8434:	000fffff 	.word	0x000fffff
    8438:	43400000 	.word	0x43400000
    843c:	fffffc01 	.word	0xfffffc01
    8440:	3ff00000 	.word	0x3ff00000
    8444:	0003988e 	.word	0x0003988e
    8448:	000bb679 	.word	0x000bb679
    844c:	fff00000 	.word	0xfff00000
    8450:	4a454eef 	.word	0x4a454eef
    8454:	3fca7e28 	.word	0x3fca7e28
    8458:	93c9db65 	.word	0x93c9db65
    845c:	3fcd864a 	.word	0x3fcd864a
    8460:	a91d4101 	.word	0xa91d4101
    8464:	3fd17460 	.word	0x3fd17460
    8468:	518f264d 	.word	0x518f264d
    846c:	3fd55555 	.word	0x3fd55555
    8470:	db6fabff 	.word	0xdb6fabff
    8474:	3fdb6db6 	.word	0x3fdb6db6
    8478:	33333303 	.word	0x33333303
    847c:	3fe33333 	.word	0x3fe33333
    8480:	40080000 	.word	0x40080000
    8484:	3feec709 	.word	0x3feec709
    8488:	dc3a03fd 	.word	0xdc3a03fd
    848c:	145b01f5 	.word	0x145b01f5
    8490:	be3e2fe0 	.word	0xbe3e2fe0
    8494:	408fffff 	.word	0x408fffff
    8498:	bf700000 	.word	0xbf700000
    849c:	652b82fe 	.word	0x652b82fe
    84a0:	3c971547 	.word	0x3c971547
    84a4:	2800      	cmp	r0, #0
    84a6:	d000      	beq.n	84aa <__ieee754_pow+0x616>
    84a8:	e190      	b.n	87cc <__ieee754_pow+0x938>
    84aa:	4aec      	ldr	r2, [pc, #944]	; (885c <__ieee754_pow+0x9c8>)
    84ac:	4653      	mov	r3, sl
    84ae:	4694      	mov	ip, r2
    84b0:	2280      	movs	r2, #128	; 0x80
    84b2:	0352      	lsls	r2, r2, #13
    84b4:	0011      	movs	r1, r2
    84b6:	151b      	asrs	r3, r3, #20
    84b8:	4463      	add	r3, ip
    84ba:	4119      	asrs	r1, r3
    84bc:	000b      	movs	r3, r1
    84be:	4690      	mov	r8, r2
    84c0:	4ae7      	ldr	r2, [pc, #924]	; (8860 <__ieee754_pow+0x9cc>)
    84c2:	445b      	add	r3, fp
    84c4:	4694      	mov	ip, r2
    84c6:	005c      	lsls	r4, r3, #1
    84c8:	0d64      	lsrs	r4, r4, #21
    84ca:	4de6      	ldr	r5, [pc, #920]	; (8864 <__ieee754_pow+0x9d0>)
    84cc:	4464      	add	r4, ip
    84ce:	4125      	asrs	r5, r4
    84d0:	001a      	movs	r2, r3
    84d2:	43aa      	bics	r2, r5
    84d4:	0011      	movs	r1, r2
    84d6:	4642      	mov	r2, r8
    84d8:	031b      	lsls	r3, r3, #12
    84da:	0b1b      	lsrs	r3, r3, #12
    84dc:	4313      	orrs	r3, r2
    84de:	2214      	movs	r2, #20
    84e0:	1b14      	subs	r4, r2, r4
    84e2:	4123      	asrs	r3, r4
    84e4:	4699      	mov	r9, r3
    84e6:	465b      	mov	r3, fp
    84e8:	2000      	movs	r0, #0
    84ea:	2b00      	cmp	r3, #0
    84ec:	da00      	bge.n	84f0 <__ieee754_pow+0x65c>
    84ee:	e1b0      	b.n	8852 <__ieee754_pow+0x9be>
    84f0:	0002      	movs	r2, r0
    84f2:	000b      	movs	r3, r1
    84f4:	0030      	movs	r0, r6
    84f6:	0039      	movs	r1, r7
    84f8:	f002 ffd0 	bl	b49c <__aeabi_dsub>
    84fc:	000b      	movs	r3, r1
    84fe:	0002      	movs	r2, r0
    8500:	0006      	movs	r6, r0
    8502:	000f      	movs	r7, r1
    8504:	9800      	ldr	r0, [sp, #0]
    8506:	9901      	ldr	r1, [sp, #4]
    8508:	f001 fe04 	bl	a114 <__aeabi_dadd>
    850c:	464b      	mov	r3, r9
    850e:	051b      	lsls	r3, r3, #20
    8510:	000d      	movs	r5, r1
    8512:	4698      	mov	r8, r3
    8514:	2400      	movs	r4, #0
    8516:	2200      	movs	r2, #0
    8518:	4bd3      	ldr	r3, [pc, #844]	; (8868 <__ieee754_pow+0x9d4>)
    851a:	0020      	movs	r0, r4
    851c:	0029      	movs	r1, r5
    851e:	f002 fd3d 	bl	af9c <__aeabi_dmul>
    8522:	0032      	movs	r2, r6
    8524:	9002      	str	r0, [sp, #8]
    8526:	9103      	str	r1, [sp, #12]
    8528:	003b      	movs	r3, r7
    852a:	0020      	movs	r0, r4
    852c:	0029      	movs	r1, r5
    852e:	f002 ffb5 	bl	b49c <__aeabi_dsub>
    8532:	0002      	movs	r2, r0
    8534:	000b      	movs	r3, r1
    8536:	9800      	ldr	r0, [sp, #0]
    8538:	9901      	ldr	r1, [sp, #4]
    853a:	f002 ffaf 	bl	b49c <__aeabi_dsub>
    853e:	4acb      	ldr	r2, [pc, #812]	; (886c <__ieee754_pow+0x9d8>)
    8540:	4bcb      	ldr	r3, [pc, #812]	; (8870 <__ieee754_pow+0x9dc>)
    8542:	f002 fd2b 	bl	af9c <__aeabi_dmul>
    8546:	4acb      	ldr	r2, [pc, #812]	; (8874 <__ieee754_pow+0x9e0>)
    8548:	0006      	movs	r6, r0
    854a:	000f      	movs	r7, r1
    854c:	4bca      	ldr	r3, [pc, #808]	; (8878 <__ieee754_pow+0x9e4>)
    854e:	0020      	movs	r0, r4
    8550:	0029      	movs	r1, r5
    8552:	f002 fd23 	bl	af9c <__aeabi_dmul>
    8556:	0002      	movs	r2, r0
    8558:	000b      	movs	r3, r1
    855a:	0030      	movs	r0, r6
    855c:	0039      	movs	r1, r7
    855e:	f001 fdd9 	bl	a114 <__aeabi_dadd>
    8562:	0004      	movs	r4, r0
    8564:	000d      	movs	r5, r1
    8566:	0002      	movs	r2, r0
    8568:	000b      	movs	r3, r1
    856a:	9802      	ldr	r0, [sp, #8]
    856c:	9903      	ldr	r1, [sp, #12]
    856e:	f001 fdd1 	bl	a114 <__aeabi_dadd>
    8572:	9a02      	ldr	r2, [sp, #8]
    8574:	9b03      	ldr	r3, [sp, #12]
    8576:	0006      	movs	r6, r0
    8578:	000f      	movs	r7, r1
    857a:	f002 ff8f 	bl	b49c <__aeabi_dsub>
    857e:	0002      	movs	r2, r0
    8580:	000b      	movs	r3, r1
    8582:	0020      	movs	r0, r4
    8584:	0029      	movs	r1, r5
    8586:	f002 ff89 	bl	b49c <__aeabi_dsub>
    858a:	0032      	movs	r2, r6
    858c:	9000      	str	r0, [sp, #0]
    858e:	9101      	str	r1, [sp, #4]
    8590:	003b      	movs	r3, r7
    8592:	0030      	movs	r0, r6
    8594:	0039      	movs	r1, r7
    8596:	f002 fd01 	bl	af9c <__aeabi_dmul>
    859a:	0004      	movs	r4, r0
    859c:	000d      	movs	r5, r1
    859e:	4ab7      	ldr	r2, [pc, #732]	; (887c <__ieee754_pow+0x9e8>)
    85a0:	4bb7      	ldr	r3, [pc, #732]	; (8880 <__ieee754_pow+0x9ec>)
    85a2:	f002 fcfb 	bl	af9c <__aeabi_dmul>
    85a6:	4ab7      	ldr	r2, [pc, #732]	; (8884 <__ieee754_pow+0x9f0>)
    85a8:	4bb7      	ldr	r3, [pc, #732]	; (8888 <__ieee754_pow+0x9f4>)
    85aa:	f002 ff77 	bl	b49c <__aeabi_dsub>
    85ae:	0022      	movs	r2, r4
    85b0:	002b      	movs	r3, r5
    85b2:	f002 fcf3 	bl	af9c <__aeabi_dmul>
    85b6:	4ab5      	ldr	r2, [pc, #724]	; (888c <__ieee754_pow+0x9f8>)
    85b8:	4bb5      	ldr	r3, [pc, #724]	; (8890 <__ieee754_pow+0x9fc>)
    85ba:	f001 fdab 	bl	a114 <__aeabi_dadd>
    85be:	0022      	movs	r2, r4
    85c0:	002b      	movs	r3, r5
    85c2:	f002 fceb 	bl	af9c <__aeabi_dmul>
    85c6:	4ab3      	ldr	r2, [pc, #716]	; (8894 <__ieee754_pow+0xa00>)
    85c8:	4bb3      	ldr	r3, [pc, #716]	; (8898 <__ieee754_pow+0xa04>)
    85ca:	f002 ff67 	bl	b49c <__aeabi_dsub>
    85ce:	0022      	movs	r2, r4
    85d0:	002b      	movs	r3, r5
    85d2:	f002 fce3 	bl	af9c <__aeabi_dmul>
    85d6:	4ab1      	ldr	r2, [pc, #708]	; (889c <__ieee754_pow+0xa08>)
    85d8:	4bb1      	ldr	r3, [pc, #708]	; (88a0 <__ieee754_pow+0xa0c>)
    85da:	f001 fd9b 	bl	a114 <__aeabi_dadd>
    85de:	0022      	movs	r2, r4
    85e0:	002b      	movs	r3, r5
    85e2:	f002 fcdb 	bl	af9c <__aeabi_dmul>
    85e6:	0002      	movs	r2, r0
    85e8:	000b      	movs	r3, r1
    85ea:	0030      	movs	r0, r6
    85ec:	0039      	movs	r1, r7
    85ee:	f002 ff55 	bl	b49c <__aeabi_dsub>
    85f2:	0004      	movs	r4, r0
    85f4:	000d      	movs	r5, r1
    85f6:	0002      	movs	r2, r0
    85f8:	000b      	movs	r3, r1
    85fa:	0030      	movs	r0, r6
    85fc:	0039      	movs	r1, r7
    85fe:	f002 fccd 	bl	af9c <__aeabi_dmul>
    8602:	2380      	movs	r3, #128	; 0x80
    8604:	9002      	str	r0, [sp, #8]
    8606:	9103      	str	r1, [sp, #12]
    8608:	2200      	movs	r2, #0
    860a:	05db      	lsls	r3, r3, #23
    860c:	0020      	movs	r0, r4
    860e:	0029      	movs	r1, r5
    8610:	f002 ff44 	bl	b49c <__aeabi_dsub>
    8614:	0002      	movs	r2, r0
    8616:	000b      	movs	r3, r1
    8618:	9802      	ldr	r0, [sp, #8]
    861a:	9903      	ldr	r1, [sp, #12]
    861c:	f002 f88a 	bl	a734 <__aeabi_ddiv>
    8620:	9a00      	ldr	r2, [sp, #0]
    8622:	9b01      	ldr	r3, [sp, #4]
    8624:	0004      	movs	r4, r0
    8626:	000d      	movs	r5, r1
    8628:	0030      	movs	r0, r6
    862a:	0039      	movs	r1, r7
    862c:	f002 fcb6 	bl	af9c <__aeabi_dmul>
    8630:	9a00      	ldr	r2, [sp, #0]
    8632:	9b01      	ldr	r3, [sp, #4]
    8634:	f001 fd6e 	bl	a114 <__aeabi_dadd>
    8638:	0002      	movs	r2, r0
    863a:	000b      	movs	r3, r1
    863c:	0020      	movs	r0, r4
    863e:	0029      	movs	r1, r5
    8640:	f002 ff2c 	bl	b49c <__aeabi_dsub>
    8644:	0032      	movs	r2, r6
    8646:	003b      	movs	r3, r7
    8648:	f002 ff28 	bl	b49c <__aeabi_dsub>
    864c:	0002      	movs	r2, r0
    864e:	000b      	movs	r3, r1
    8650:	2000      	movs	r0, #0
    8652:	4994      	ldr	r1, [pc, #592]	; (88a4 <__ieee754_pow+0xa10>)
    8654:	f002 ff22 	bl	b49c <__aeabi_dsub>
    8658:	4643      	mov	r3, r8
    865a:	185b      	adds	r3, r3, r1
    865c:	151a      	asrs	r2, r3, #20
    865e:	2a00      	cmp	r2, #0
    8660:	dc00      	bgt.n	8664 <__ieee754_pow+0x7d0>
    8662:	e149      	b.n	88f8 <__ieee754_pow+0xa64>
    8664:	0019      	movs	r1, r3
    8666:	9a06      	ldr	r2, [sp, #24]
    8668:	9b07      	ldr	r3, [sp, #28]
    866a:	f002 fc97 	bl	af9c <__aeabi_dmul>
    866e:	e459      	b.n	7f24 <__ieee754_pow+0x90>
    8670:	003a      	movs	r2, r7
    8672:	0033      	movs	r3, r6
    8674:	0038      	movs	r0, r7
    8676:	0031      	movs	r1, r6
    8678:	f002 fc90 	bl	af9c <__aeabi_dmul>
    867c:	e452      	b.n	7f24 <__ieee754_pow+0x90>
    867e:	4653      	mov	r3, sl
    8680:	2b00      	cmp	r3, #0
    8682:	db00      	blt.n	8686 <__ieee754_pow+0x7f2>
    8684:	e4d9      	b.n	803a <__ieee754_pow+0x1a6>
    8686:	9c00      	ldr	r4, [sp, #0]
    8688:	9d01      	ldr	r5, [sp, #4]
    868a:	2280      	movs	r2, #128	; 0x80
    868c:	0612      	lsls	r2, r2, #24
    868e:	002b      	movs	r3, r5
    8690:	4694      	mov	ip, r2
    8692:	4463      	add	r3, ip
    8694:	0020      	movs	r0, r4
    8696:	0019      	movs	r1, r3
    8698:	f7ff fc44 	bl	7f24 <__ieee754_pow+0x90>
    869c:	004b      	lsls	r3, r1, #1
    869e:	085b      	lsrs	r3, r3, #1
    86a0:	469a      	mov	sl, r3
    86a2:	4b81      	ldr	r3, [pc, #516]	; (88a8 <__ieee754_pow+0xa14>)
    86a4:	459a      	cmp	sl, r3
    86a6:	dc00      	bgt.n	86aa <__ieee754_pow+0x816>
    86a8:	e0b1      	b.n	880e <__ieee754_pow+0x97a>
    86aa:	4b80      	ldr	r3, [pc, #512]	; (88ac <__ieee754_pow+0xa18>)
    86ac:	445b      	add	r3, fp
    86ae:	431a      	orrs	r2, r3
    86b0:	d10c      	bne.n	86cc <__ieee754_pow+0x838>
    86b2:	0032      	movs	r2, r6
    86b4:	003b      	movs	r3, r7
    86b6:	f002 fef1 	bl	b49c <__aeabi_dsub>
    86ba:	0002      	movs	r2, r0
    86bc:	000b      	movs	r3, r1
    86be:	9800      	ldr	r0, [sp, #0]
    86c0:	9901      	ldr	r1, [sp, #4]
    86c2:	f000 fcbb 	bl	903c <__aeabi_dcmple>
    86c6:	2800      	cmp	r0, #0
    86c8:	d100      	bne.n	86cc <__ieee754_pow+0x838>
    86ca:	e6ee      	b.n	84aa <__ieee754_pow+0x616>
    86cc:	9806      	ldr	r0, [sp, #24]
    86ce:	9907      	ldr	r1, [sp, #28]
    86d0:	4a77      	ldr	r2, [pc, #476]	; (88b0 <__ieee754_pow+0xa1c>)
    86d2:	4b78      	ldr	r3, [pc, #480]	; (88b4 <__ieee754_pow+0xa20>)
    86d4:	f002 fc62 	bl	af9c <__aeabi_dmul>
    86d8:	4a75      	ldr	r2, [pc, #468]	; (88b0 <__ieee754_pow+0xa1c>)
    86da:	4b76      	ldr	r3, [pc, #472]	; (88b4 <__ieee754_pow+0xa20>)
    86dc:	f002 fc5e 	bl	af9c <__aeabi_dmul>
    86e0:	f7ff fc20 	bl	7f24 <__ieee754_pow+0x90>
    86e4:	2300      	movs	r3, #0
    86e6:	4c74      	ldr	r4, [pc, #464]	; (88b8 <__ieee754_pow+0xa24>)
    86e8:	9306      	str	r3, [sp, #24]
    86ea:	9407      	str	r4, [sp, #28]
    86ec:	e652      	b.n	8394 <__ieee754_pow+0x500>
    86ee:	0002      	movs	r2, r0
    86f0:	000b      	movs	r3, r1
    86f2:	2000      	movs	r0, #0
    86f4:	496b      	ldr	r1, [pc, #428]	; (88a4 <__ieee754_pow+0xa10>)
    86f6:	f002 f81d 	bl	a734 <__aeabi_ddiv>
    86fa:	f7ff fc32 	bl	7f62 <__ieee754_pow+0xce>
    86fe:	4653      	mov	r3, sl
    8700:	2b00      	cmp	r3, #0
    8702:	db00      	blt.n	8706 <__ieee754_pow+0x872>
    8704:	e499      	b.n	803a <__ieee754_pow+0x1a6>
    8706:	e454      	b.n	7fb2 <__ieee754_pow+0x11e>
    8708:	4b6c      	ldr	r3, [pc, #432]	; (88bc <__ieee754_pow+0xa28>)
    870a:	429c      	cmp	r4, r3
    870c:	ddf7      	ble.n	86fe <__ieee754_pow+0x86a>
    870e:	4b65      	ldr	r3, [pc, #404]	; (88a4 <__ieee754_pow+0xa10>)
    8710:	429c      	cmp	r4, r3
    8712:	dd00      	ble.n	8716 <__ieee754_pow+0x882>
    8714:	e44a      	b.n	7fac <__ieee754_pow+0x118>
    8716:	2200      	movs	r2, #0
    8718:	4b62      	ldr	r3, [pc, #392]	; (88a4 <__ieee754_pow+0xa10>)
    871a:	f002 febf 	bl	b49c <__aeabi_dsub>
    871e:	22c0      	movs	r2, #192	; 0xc0
    8720:	4b67      	ldr	r3, [pc, #412]	; (88c0 <__ieee754_pow+0xa2c>)
    8722:	05d2      	lsls	r2, r2, #23
    8724:	0004      	movs	r4, r0
    8726:	000d      	movs	r5, r1
    8728:	f002 fc38 	bl	af9c <__aeabi_dmul>
    872c:	4a65      	ldr	r2, [pc, #404]	; (88c4 <__ieee754_pow+0xa30>)
    872e:	0006      	movs	r6, r0
    8730:	000f      	movs	r7, r1
    8732:	4b65      	ldr	r3, [pc, #404]	; (88c8 <__ieee754_pow+0xa34>)
    8734:	0020      	movs	r0, r4
    8736:	0029      	movs	r1, r5
    8738:	f002 fc30 	bl	af9c <__aeabi_dmul>
    873c:	2200      	movs	r2, #0
    873e:	9002      	str	r0, [sp, #8]
    8740:	9103      	str	r1, [sp, #12]
    8742:	4b62      	ldr	r3, [pc, #392]	; (88cc <__ieee754_pow+0xa38>)
    8744:	0020      	movs	r0, r4
    8746:	0029      	movs	r1, r5
    8748:	f002 fc28 	bl	af9c <__aeabi_dmul>
    874c:	0002      	movs	r2, r0
    874e:	000b      	movs	r3, r1
    8750:	485f      	ldr	r0, [pc, #380]	; (88d0 <__ieee754_pow+0xa3c>)
    8752:	4960      	ldr	r1, [pc, #384]	; (88d4 <__ieee754_pow+0xa40>)
    8754:	f002 fea2 	bl	b49c <__aeabi_dsub>
    8758:	0022      	movs	r2, r4
    875a:	002b      	movs	r3, r5
    875c:	f002 fc1e 	bl	af9c <__aeabi_dmul>
    8760:	0002      	movs	r2, r0
    8762:	000b      	movs	r3, r1
    8764:	2000      	movs	r0, #0
    8766:	495c      	ldr	r1, [pc, #368]	; (88d8 <__ieee754_pow+0xa44>)
    8768:	f002 fe98 	bl	b49c <__aeabi_dsub>
    876c:	0022      	movs	r2, r4
    876e:	9004      	str	r0, [sp, #16]
    8770:	9105      	str	r1, [sp, #20]
    8772:	002b      	movs	r3, r5
    8774:	0020      	movs	r0, r4
    8776:	0029      	movs	r1, r5
    8778:	f002 fc10 	bl	af9c <__aeabi_dmul>
    877c:	0002      	movs	r2, r0
    877e:	000b      	movs	r3, r1
    8780:	9804      	ldr	r0, [sp, #16]
    8782:	9905      	ldr	r1, [sp, #20]
    8784:	f002 fc0a 	bl	af9c <__aeabi_dmul>
    8788:	4a54      	ldr	r2, [pc, #336]	; (88dc <__ieee754_pow+0xa48>)
    878a:	4b4d      	ldr	r3, [pc, #308]	; (88c0 <__ieee754_pow+0xa2c>)
    878c:	f002 fc06 	bl	af9c <__aeabi_dmul>
    8790:	0002      	movs	r2, r0
    8792:	000b      	movs	r3, r1
    8794:	9802      	ldr	r0, [sp, #8]
    8796:	9903      	ldr	r1, [sp, #12]
    8798:	f002 fe80 	bl	b49c <__aeabi_dsub>
    879c:	0002      	movs	r2, r0
    879e:	000b      	movs	r3, r1
    87a0:	0004      	movs	r4, r0
    87a2:	000d      	movs	r5, r1
    87a4:	0030      	movs	r0, r6
    87a6:	0039      	movs	r1, r7
    87a8:	f001 fcb4 	bl	a114 <__aeabi_dadd>
    87ac:	2000      	movs	r0, #0
    87ae:	0032      	movs	r2, r6
    87b0:	003b      	movs	r3, r7
    87b2:	9002      	str	r0, [sp, #8]
    87b4:	9103      	str	r1, [sp, #12]
    87b6:	f002 fe71 	bl	b49c <__aeabi_dsub>
    87ba:	0002      	movs	r2, r0
    87bc:	000b      	movs	r3, r1
    87be:	0020      	movs	r0, r4
    87c0:	0029      	movs	r1, r5
    87c2:	f002 fe6b 	bl	b49c <__aeabi_dsub>
    87c6:	9004      	str	r0, [sp, #16]
    87c8:	9105      	str	r1, [sp, #20]
    87ca:	e5d9      	b.n	8380 <__ieee754_pow+0x4ec>
    87cc:	4a44      	ldr	r2, [pc, #272]	; (88e0 <__ieee754_pow+0xa4c>)
    87ce:	4b45      	ldr	r3, [pc, #276]	; (88e4 <__ieee754_pow+0xa50>)
    87d0:	9806      	ldr	r0, [sp, #24]
    87d2:	9907      	ldr	r1, [sp, #28]
    87d4:	f002 fbe2 	bl	af9c <__aeabi_dmul>
    87d8:	4a41      	ldr	r2, [pc, #260]	; (88e0 <__ieee754_pow+0xa4c>)
    87da:	4b42      	ldr	r3, [pc, #264]	; (88e4 <__ieee754_pow+0xa50>)
    87dc:	f002 fbde 	bl	af9c <__aeabi_dmul>
    87e0:	f7ff fba0 	bl	7f24 <__ieee754_pow+0x90>
    87e4:	2a00      	cmp	r2, #0
    87e6:	d001      	beq.n	87ec <__ieee754_pow+0x958>
    87e8:	f7ff fba9 	bl	7f3e <__ieee754_pow+0xaa>
    87ec:	3214      	adds	r2, #20
    87ee:	1ad3      	subs	r3, r2, r3
    87f0:	002a      	movs	r2, r5
    87f2:	411a      	asrs	r2, r3
    87f4:	0011      	movs	r1, r2
    87f6:	4099      	lsls	r1, r3
    87f8:	428d      	cmp	r5, r1
    87fa:	d001      	beq.n	8800 <__ieee754_pow+0x96c>
    87fc:	f7ff fb76 	bl	7eec <__ieee754_pow+0x58>
    8800:	2301      	movs	r3, #1
    8802:	401a      	ands	r2, r3
    8804:	18db      	adds	r3, r3, r3
    8806:	1a9b      	subs	r3, r3, r2
    8808:	469b      	mov	fp, r3
    880a:	f7ff fb6f 	bl	7eec <__ieee754_pow+0x58>
    880e:	2200      	movs	r2, #0
    8810:	4b31      	ldr	r3, [pc, #196]	; (88d8 <__ieee754_pow+0xa44>)
    8812:	4690      	mov	r8, r2
    8814:	4691      	mov	r9, r2
    8816:	459a      	cmp	sl, r3
    8818:	dc00      	bgt.n	881c <__ieee754_pow+0x988>
    881a:	e67b      	b.n	8514 <__ieee754_pow+0x680>
    881c:	e645      	b.n	84aa <__ieee754_pow+0x616>
    881e:	0002      	movs	r2, r0
    8820:	000b      	movs	r3, r1
    8822:	f002 fe3b 	bl	b49c <__aeabi_dsub>
    8826:	0002      	movs	r2, r0
    8828:	000b      	movs	r3, r1
    882a:	f001 ff83 	bl	a734 <__aeabi_ddiv>
    882e:	f7ff fb79 	bl	7f24 <__ieee754_pow+0x90>
    8832:	2380      	movs	r3, #128	; 0x80
    8834:	4c2c      	ldr	r4, [pc, #176]	; (88e8 <__ieee754_pow+0xa54>)
    8836:	05db      	lsls	r3, r3, #23
    8838:	9308      	str	r3, [sp, #32]
    883a:	9409      	str	r4, [sp, #36]	; 0x24
    883c:	4b2b      	ldr	r3, [pc, #172]	; (88ec <__ieee754_pow+0xa58>)
    883e:	4c2c      	ldr	r4, [pc, #176]	; (88f0 <__ieee754_pow+0xa5c>)
    8840:	2200      	movs	r2, #0
    8842:	930c      	str	r3, [sp, #48]	; 0x30
    8844:	940d      	str	r4, [sp, #52]	; 0x34
    8846:	2480      	movs	r4, #128	; 0x80
    8848:	4b2a      	ldr	r3, [pc, #168]	; (88f4 <__ieee754_pow+0xa60>)
    884a:	02e4      	lsls	r4, r4, #11
    884c:	9206      	str	r2, [sp, #24]
    884e:	9307      	str	r3, [sp, #28]
    8850:	e449      	b.n	80e6 <__ieee754_pow+0x252>
    8852:	464b      	mov	r3, r9
    8854:	425b      	negs	r3, r3
    8856:	4699      	mov	r9, r3
    8858:	e64a      	b.n	84f0 <__ieee754_pow+0x65c>
    885a:	46c0      	nop			; (mov r8, r8)
    885c:	fffffc02 	.word	0xfffffc02
    8860:	fffffc01 	.word	0xfffffc01
    8864:	000fffff 	.word	0x000fffff
    8868:	3fe62e43 	.word	0x3fe62e43
    886c:	fefa39ef 	.word	0xfefa39ef
    8870:	3fe62e42 	.word	0x3fe62e42
    8874:	0ca86c39 	.word	0x0ca86c39
    8878:	be205c61 	.word	0xbe205c61
    887c:	72bea4d0 	.word	0x72bea4d0
    8880:	3e663769 	.word	0x3e663769
    8884:	c5d26bf1 	.word	0xc5d26bf1
    8888:	3ebbbd41 	.word	0x3ebbbd41
    888c:	af25de2c 	.word	0xaf25de2c
    8890:	3f11566a 	.word	0x3f11566a
    8894:	16bebd93 	.word	0x16bebd93
    8898:	3f66c16c 	.word	0x3f66c16c
    889c:	5555553e 	.word	0x5555553e
    88a0:	3fc55555 	.word	0x3fc55555
    88a4:	3ff00000 	.word	0x3ff00000
    88a8:	4090cbff 	.word	0x4090cbff
    88ac:	3f6f3400 	.word	0x3f6f3400
    88b0:	c2f8f359 	.word	0xc2f8f359
    88b4:	01a56e1f 	.word	0x01a56e1f
    88b8:	bff00000 	.word	0xbff00000
    88bc:	3feffffe 	.word	0x3feffffe
    88c0:	3ff71547 	.word	0x3ff71547
    88c4:	f85ddf44 	.word	0xf85ddf44
    88c8:	3e54ae0b 	.word	0x3e54ae0b
    88cc:	3fd00000 	.word	0x3fd00000
    88d0:	55555555 	.word	0x55555555
    88d4:	3fd55555 	.word	0x3fd55555
    88d8:	3fe00000 	.word	0x3fe00000
    88dc:	652b82fe 	.word	0x652b82fe
    88e0:	8800759c 	.word	0x8800759c
    88e4:	7e37e43c 	.word	0x7e37e43c
    88e8:	3fe2b803 	.word	0x3fe2b803
    88ec:	43cfd006 	.word	0x43cfd006
    88f0:	3e4cfdeb 	.word	0x3e4cfdeb
    88f4:	3ff80000 	.word	0x3ff80000
    88f8:	464a      	mov	r2, r9
    88fa:	f000 f999 	bl	8c30 <scalbn>
    88fe:	e6b2      	b.n	8666 <__ieee754_pow+0x7d2>

00008900 <__ieee754_sqrt>:
    8900:	4b6c      	ldr	r3, [pc, #432]	; (8ab4 <__ieee754_sqrt+0x1b4>)
    8902:	b5f0      	push	{r4, r5, r6, r7, lr}
    8904:	000a      	movs	r2, r1
    8906:	4646      	mov	r6, r8
    8908:	000d      	movs	r5, r1
    890a:	46d6      	mov	lr, sl
    890c:	464f      	mov	r7, r9
    890e:	0019      	movs	r1, r3
    8910:	b5c0      	push	{r6, r7, lr}
    8912:	0004      	movs	r4, r0
    8914:	0006      	movs	r6, r0
    8916:	4029      	ands	r1, r5
    8918:	4299      	cmp	r1, r3
    891a:	d100      	bne.n	891e <__ieee754_sqrt+0x1e>
    891c:	e0a7      	b.n	8a6e <__ieee754_sqrt+0x16e>
    891e:	2d00      	cmp	r5, #0
    8920:	dc00      	bgt.n	8924 <__ieee754_sqrt+0x24>
    8922:	e081      	b.n	8a28 <__ieee754_sqrt+0x128>
    8924:	152f      	asrs	r7, r5, #20
    8926:	d100      	bne.n	892a <__ieee754_sqrt+0x2a>
    8928:	e08e      	b.n	8a48 <__ieee754_sqrt+0x148>
    892a:	4b63      	ldr	r3, [pc, #396]	; (8ab8 <__ieee754_sqrt+0x1b8>)
    892c:	0312      	lsls	r2, r2, #12
    892e:	469c      	mov	ip, r3
    8930:	2380      	movs	r3, #128	; 0x80
    8932:	0b12      	lsrs	r2, r2, #12
    8934:	035b      	lsls	r3, r3, #13
    8936:	4467      	add	r7, ip
    8938:	431a      	orrs	r2, r3
    893a:	07fb      	lsls	r3, r7, #31
    893c:	d468      	bmi.n	8a10 <__ieee754_sqrt+0x110>
    893e:	107b      	asrs	r3, r7, #1
    8940:	469c      	mov	ip, r3
    8942:	0fe3      	lsrs	r3, r4, #31
    8944:	189b      	adds	r3, r3, r2
    8946:	189b      	adds	r3, r3, r2
    8948:	2280      	movs	r2, #128	; 0x80
    894a:	2116      	movs	r1, #22
    894c:	2600      	movs	r6, #0
    894e:	2500      	movs	r5, #0
    8950:	0064      	lsls	r4, r4, #1
    8952:	0392      	lsls	r2, r2, #14
    8954:	18a8      	adds	r0, r5, r2
    8956:	4298      	cmp	r0, r3
    8958:	dc02      	bgt.n	8960 <__ieee754_sqrt+0x60>
    895a:	1885      	adds	r5, r0, r2
    895c:	1a1b      	subs	r3, r3, r0
    895e:	18b6      	adds	r6, r6, r2
    8960:	0fe0      	lsrs	r0, r4, #31
    8962:	005b      	lsls	r3, r3, #1
    8964:	3901      	subs	r1, #1
    8966:	181b      	adds	r3, r3, r0
    8968:	0064      	lsls	r4, r4, #1
    896a:	0852      	lsrs	r2, r2, #1
    896c:	2900      	cmp	r1, #0
    896e:	d1f1      	bne.n	8954 <__ieee754_sqrt+0x54>
    8970:	2200      	movs	r2, #0
    8972:	4692      	mov	sl, r2
    8974:	4690      	mov	r8, r2
    8976:	2280      	movs	r2, #128	; 0x80
    8978:	2020      	movs	r0, #32
    897a:	0612      	lsls	r2, r2, #24
    897c:	e009      	b.n	8992 <__ieee754_sqrt+0x92>
    897e:	42ab      	cmp	r3, r5
    8980:	d038      	beq.n	89f4 <__ieee754_sqrt+0xf4>
    8982:	0fe1      	lsrs	r1, r4, #31
    8984:	18c9      	adds	r1, r1, r3
    8986:	3801      	subs	r0, #1
    8988:	18cb      	adds	r3, r1, r3
    898a:	0064      	lsls	r4, r4, #1
    898c:	0852      	lsrs	r2, r2, #1
    898e:	2800      	cmp	r0, #0
    8990:	d018      	beq.n	89c4 <__ieee754_sqrt+0xc4>
    8992:	4641      	mov	r1, r8
    8994:	1851      	adds	r1, r2, r1
    8996:	42ab      	cmp	r3, r5
    8998:	ddf1      	ble.n	897e <__ieee754_sqrt+0x7e>
    899a:	188f      	adds	r7, r1, r2
    899c:	46b8      	mov	r8, r7
    899e:	46a9      	mov	r9, r5
    89a0:	2900      	cmp	r1, #0
    89a2:	db30      	blt.n	8a06 <__ieee754_sqrt+0x106>
    89a4:	1b5b      	subs	r3, r3, r5
    89a6:	428c      	cmp	r4, r1
    89a8:	41ad      	sbcs	r5, r5
    89aa:	426d      	negs	r5, r5
    89ac:	1b5b      	subs	r3, r3, r5
    89ae:	1a64      	subs	r4, r4, r1
    89b0:	0fe1      	lsrs	r1, r4, #31
    89b2:	18c9      	adds	r1, r1, r3
    89b4:	3801      	subs	r0, #1
    89b6:	4492      	add	sl, r2
    89b8:	464d      	mov	r5, r9
    89ba:	18cb      	adds	r3, r1, r3
    89bc:	0064      	lsls	r4, r4, #1
    89be:	0852      	lsrs	r2, r2, #1
    89c0:	2800      	cmp	r0, #0
    89c2:	d1e6      	bne.n	8992 <__ieee754_sqrt+0x92>
    89c4:	4323      	orrs	r3, r4
    89c6:	d128      	bne.n	8a1a <__ieee754_sqrt+0x11a>
    89c8:	4653      	mov	r3, sl
    89ca:	085b      	lsrs	r3, r3, #1
    89cc:	493b      	ldr	r1, [pc, #236]	; (8abc <__ieee754_sqrt+0x1bc>)
    89ce:	1072      	asrs	r2, r6, #1
    89d0:	4688      	mov	r8, r1
    89d2:	4442      	add	r2, r8
    89d4:	07f1      	lsls	r1, r6, #31
    89d6:	d502      	bpl.n	89de <__ieee754_sqrt+0xde>
    89d8:	2180      	movs	r1, #128	; 0x80
    89da:	0609      	lsls	r1, r1, #24
    89dc:	430b      	orrs	r3, r1
    89de:	4661      	mov	r1, ip
    89e0:	001e      	movs	r6, r3
    89e2:	050f      	lsls	r7, r1, #20
    89e4:	18bd      	adds	r5, r7, r2
    89e6:	0030      	movs	r0, r6
    89e8:	0029      	movs	r1, r5
    89ea:	bc1c      	pop	{r2, r3, r4}
    89ec:	4690      	mov	r8, r2
    89ee:	4699      	mov	r9, r3
    89f0:	46a2      	mov	sl, r4
    89f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89f4:	42a1      	cmp	r1, r4
    89f6:	d8c4      	bhi.n	8982 <__ieee754_sqrt+0x82>
    89f8:	188f      	adds	r7, r1, r2
    89fa:	46b8      	mov	r8, r7
    89fc:	2900      	cmp	r1, #0
    89fe:	db42      	blt.n	8a86 <__ieee754_sqrt+0x186>
    8a00:	4699      	mov	r9, r3
    8a02:	2300      	movs	r3, #0
    8a04:	e7d3      	b.n	89ae <__ieee754_sqrt+0xae>
    8a06:	2f00      	cmp	r7, #0
    8a08:	db2f      	blt.n	8a6a <__ieee754_sqrt+0x16a>
    8a0a:	1c6f      	adds	r7, r5, #1
    8a0c:	46b9      	mov	r9, r7
    8a0e:	e7c9      	b.n	89a4 <__ieee754_sqrt+0xa4>
    8a10:	0fe1      	lsrs	r1, r4, #31
    8a12:	0052      	lsls	r2, r2, #1
    8a14:	188a      	adds	r2, r1, r2
    8a16:	0064      	lsls	r4, r4, #1
    8a18:	e791      	b.n	893e <__ieee754_sqrt+0x3e>
    8a1a:	4653      	mov	r3, sl
    8a1c:	3301      	adds	r3, #1
    8a1e:	d035      	beq.n	8a8c <__ieee754_sqrt+0x18c>
    8a20:	4653      	mov	r3, sl
    8a22:	3301      	adds	r3, #1
    8a24:	085b      	lsrs	r3, r3, #1
    8a26:	e7d1      	b.n	89cc <__ieee754_sqrt+0xcc>
    8a28:	006b      	lsls	r3, r5, #1
    8a2a:	085b      	lsrs	r3, r3, #1
    8a2c:	4303      	orrs	r3, r0
    8a2e:	d0da      	beq.n	89e6 <__ieee754_sqrt+0xe6>
    8a30:	2700      	movs	r7, #0
    8a32:	2d00      	cmp	r5, #0
    8a34:	d132      	bne.n	8a9c <__ieee754_sqrt+0x19c>
    8a36:	0ae2      	lsrs	r2, r4, #11
    8a38:	3f15      	subs	r7, #21
    8a3a:	0564      	lsls	r4, r4, #21
    8a3c:	2a00      	cmp	r2, #0
    8a3e:	d0fa      	beq.n	8a36 <__ieee754_sqrt+0x136>
    8a40:	2380      	movs	r3, #128	; 0x80
    8a42:	035b      	lsls	r3, r3, #13
    8a44:	421a      	tst	r2, r3
    8a46:	d124      	bne.n	8a92 <__ieee754_sqrt+0x192>
    8a48:	2080      	movs	r0, #128	; 0x80
    8a4a:	2300      	movs	r3, #0
    8a4c:	0340      	lsls	r0, r0, #13
    8a4e:	e000      	b.n	8a52 <__ieee754_sqrt+0x152>
    8a50:	000b      	movs	r3, r1
    8a52:	0052      	lsls	r2, r2, #1
    8a54:	1c59      	adds	r1, r3, #1
    8a56:	4202      	tst	r2, r0
    8a58:	d0fa      	beq.n	8a50 <__ieee754_sqrt+0x150>
    8a5a:	2020      	movs	r0, #32
    8a5c:	1a40      	subs	r0, r0, r1
    8a5e:	1aff      	subs	r7, r7, r3
    8a60:	0023      	movs	r3, r4
    8a62:	40c3      	lsrs	r3, r0
    8a64:	408c      	lsls	r4, r1
    8a66:	431a      	orrs	r2, r3
    8a68:	e75f      	b.n	892a <__ieee754_sqrt+0x2a>
    8a6a:	46a9      	mov	r9, r5
    8a6c:	e79a      	b.n	89a4 <__ieee754_sqrt+0xa4>
    8a6e:	002b      	movs	r3, r5
    8a70:	0002      	movs	r2, r0
    8a72:	0029      	movs	r1, r5
    8a74:	f002 fa92 	bl	af9c <__aeabi_dmul>
    8a78:	0032      	movs	r2, r6
    8a7a:	002b      	movs	r3, r5
    8a7c:	f001 fb4a 	bl	a114 <__aeabi_dadd>
    8a80:	0006      	movs	r6, r0
    8a82:	000d      	movs	r5, r1
    8a84:	e7af      	b.n	89e6 <__ieee754_sqrt+0xe6>
    8a86:	2f00      	cmp	r7, #0
    8a88:	dabf      	bge.n	8a0a <__ieee754_sqrt+0x10a>
    8a8a:	e7b9      	b.n	8a00 <__ieee754_sqrt+0x100>
    8a8c:	3601      	adds	r6, #1
    8a8e:	2300      	movs	r3, #0
    8a90:	e79c      	b.n	89cc <__ieee754_sqrt+0xcc>
    8a92:	2301      	movs	r3, #1
    8a94:	2100      	movs	r1, #0
    8a96:	2020      	movs	r0, #32
    8a98:	425b      	negs	r3, r3
    8a9a:	e7e0      	b.n	8a5e <__ieee754_sqrt+0x15e>
    8a9c:	002b      	movs	r3, r5
    8a9e:	0002      	movs	r2, r0
    8aa0:	0029      	movs	r1, r5
    8aa2:	f002 fcfb 	bl	b49c <__aeabi_dsub>
    8aa6:	0002      	movs	r2, r0
    8aa8:	000b      	movs	r3, r1
    8aaa:	f001 fe43 	bl	a734 <__aeabi_ddiv>
    8aae:	0006      	movs	r6, r0
    8ab0:	000d      	movs	r5, r1
    8ab2:	e798      	b.n	89e6 <__ieee754_sqrt+0xe6>
    8ab4:	7ff00000 	.word	0x7ff00000
    8ab8:	fffffc01 	.word	0xfffffc01
    8abc:	3fe00000 	.word	0x3fe00000

00008ac0 <fabs>:
    8ac0:	0049      	lsls	r1, r1, #1
    8ac2:	084b      	lsrs	r3, r1, #1
    8ac4:	0019      	movs	r1, r3
    8ac6:	4770      	bx	lr

00008ac8 <finite>:
    8ac8:	4b03      	ldr	r3, [pc, #12]	; (8ad8 <finite+0x10>)
    8aca:	0048      	lsls	r0, r1, #1
    8acc:	469c      	mov	ip, r3
    8ace:	0840      	lsrs	r0, r0, #1
    8ad0:	4460      	add	r0, ip
    8ad2:	0fc0      	lsrs	r0, r0, #31
    8ad4:	4770      	bx	lr
    8ad6:	46c0      	nop			; (mov r8, r8)
    8ad8:	80100000 	.word	0x80100000

00008adc <matherr>:
    8adc:	2000      	movs	r0, #0
    8ade:	4770      	bx	lr

00008ae0 <nan>:
    8ae0:	2000      	movs	r0, #0
    8ae2:	4901      	ldr	r1, [pc, #4]	; (8ae8 <nan+0x8>)
    8ae4:	4770      	bx	lr
    8ae6:	46c0      	nop			; (mov r8, r8)
    8ae8:	7ff80000 	.word	0x7ff80000

00008aec <rint>:
    8aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aee:	46c6      	mov	lr, r8
    8af0:	b500      	push	{lr}
    8af2:	0fcb      	lsrs	r3, r1, #31
    8af4:	4698      	mov	r8, r3
    8af6:	4c4a      	ldr	r4, [pc, #296]	; (8c20 <rint+0x134>)
    8af8:	004b      	lsls	r3, r1, #1
    8afa:	0d5b      	lsrs	r3, r3, #21
    8afc:	191e      	adds	r6, r3, r4
    8afe:	b082      	sub	sp, #8
    8b00:	0007      	movs	r7, r0
    8b02:	000a      	movs	r2, r1
    8b04:	2e13      	cmp	r6, #19
    8b06:	dc35      	bgt.n	8b74 <rint+0x88>
    8b08:	2e00      	cmp	r6, #0
    8b0a:	db57      	blt.n	8bbc <rint+0xd0>
    8b0c:	4b45      	ldr	r3, [pc, #276]	; (8c24 <rint+0x138>)
    8b0e:	0004      	movs	r4, r0
    8b10:	4133      	asrs	r3, r6
    8b12:	001f      	movs	r7, r3
    8b14:	400f      	ands	r7, r1
    8b16:	4307      	orrs	r7, r0
    8b18:	000d      	movs	r5, r1
    8b1a:	2f00      	cmp	r7, #0
    8b1c:	d024      	beq.n	8b68 <rint+0x7c>
    8b1e:	085b      	lsrs	r3, r3, #1
    8b20:	001c      	movs	r4, r3
    8b22:	400c      	ands	r4, r1
    8b24:	4320      	orrs	r0, r4
    8b26:	2700      	movs	r7, #0
    8b28:	2800      	cmp	r0, #0
    8b2a:	d007      	beq.n	8b3c <rint+0x50>
    8b2c:	2e13      	cmp	r6, #19
    8b2e:	d100      	bne.n	8b32 <rint+0x46>
    8b30:	e073      	b.n	8c1a <rint+0x12e>
    8b32:	2280      	movs	r2, #128	; 0x80
    8b34:	02d2      	lsls	r2, r2, #11
    8b36:	4132      	asrs	r2, r6
    8b38:	4399      	bics	r1, r3
    8b3a:	430a      	orrs	r2, r1
    8b3c:	4643      	mov	r3, r8
    8b3e:	00de      	lsls	r6, r3, #3
    8b40:	4b39      	ldr	r3, [pc, #228]	; (8c28 <rint+0x13c>)
    8b42:	0011      	movs	r1, r2
    8b44:	199e      	adds	r6, r3, r6
    8b46:	6834      	ldr	r4, [r6, #0]
    8b48:	6875      	ldr	r5, [r6, #4]
    8b4a:	0038      	movs	r0, r7
    8b4c:	0022      	movs	r2, r4
    8b4e:	002b      	movs	r3, r5
    8b50:	f001 fae0 	bl	a114 <__aeabi_dadd>
    8b54:	9000      	str	r0, [sp, #0]
    8b56:	9101      	str	r1, [sp, #4]
    8b58:	9800      	ldr	r0, [sp, #0]
    8b5a:	9901      	ldr	r1, [sp, #4]
    8b5c:	0022      	movs	r2, r4
    8b5e:	002b      	movs	r3, r5
    8b60:	f002 fc9c 	bl	b49c <__aeabi_dsub>
    8b64:	0004      	movs	r4, r0
    8b66:	000d      	movs	r5, r1
    8b68:	0020      	movs	r0, r4
    8b6a:	0029      	movs	r1, r5
    8b6c:	b002      	add	sp, #8
    8b6e:	bc04      	pop	{r2}
    8b70:	4690      	mov	r8, r2
    8b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b74:	2e33      	cmp	r6, #51	; 0x33
    8b76:	dd0c      	ble.n	8b92 <rint+0xa6>
    8b78:	2380      	movs	r3, #128	; 0x80
    8b7a:	0004      	movs	r4, r0
    8b7c:	00db      	lsls	r3, r3, #3
    8b7e:	000d      	movs	r5, r1
    8b80:	429e      	cmp	r6, r3
    8b82:	d1f1      	bne.n	8b68 <rint+0x7c>
    8b84:	0002      	movs	r2, r0
    8b86:	000b      	movs	r3, r1
    8b88:	f001 fac4 	bl	a114 <__aeabi_dadd>
    8b8c:	0004      	movs	r4, r0
    8b8e:	000d      	movs	r5, r1
    8b90:	e7ea      	b.n	8b68 <rint+0x7c>
    8b92:	4c26      	ldr	r4, [pc, #152]	; (8c2c <rint+0x140>)
    8b94:	000d      	movs	r5, r1
    8b96:	46a4      	mov	ip, r4
    8b98:	2401      	movs	r4, #1
    8b9a:	4463      	add	r3, ip
    8b9c:	4264      	negs	r4, r4
    8b9e:	40dc      	lsrs	r4, r3
    8ba0:	46a4      	mov	ip, r4
    8ba2:	4661      	mov	r1, ip
    8ba4:	0004      	movs	r4, r0
    8ba6:	4201      	tst	r1, r0
    8ba8:	d0de      	beq.n	8b68 <rint+0x7c>
    8baa:	0849      	lsrs	r1, r1, #1
    8bac:	4201      	tst	r1, r0
    8bae:	d0c5      	beq.n	8b3c <rint+0x50>
    8bb0:	2780      	movs	r7, #128	; 0x80
    8bb2:	05ff      	lsls	r7, r7, #23
    8bb4:	411f      	asrs	r7, r3
    8bb6:	4388      	bics	r0, r1
    8bb8:	4307      	orrs	r7, r0
    8bba:	e7bf      	b.n	8b3c <rint+0x50>
    8bbc:	004b      	lsls	r3, r1, #1
    8bbe:	085b      	lsrs	r3, r3, #1
    8bc0:	4303      	orrs	r3, r0
    8bc2:	0004      	movs	r4, r0
    8bc4:	000d      	movs	r5, r1
    8bc6:	2b00      	cmp	r3, #0
    8bc8:	d0ce      	beq.n	8b68 <rint+0x7c>
    8bca:	030b      	lsls	r3, r1, #12
    8bcc:	0b1b      	lsrs	r3, r3, #12
    8bce:	4303      	orrs	r3, r0
    8bd0:	001a      	movs	r2, r3
    8bd2:	425b      	negs	r3, r3
    8bd4:	4313      	orrs	r3, r2
    8bd6:	2280      	movs	r2, #128	; 0x80
    8bd8:	0b1b      	lsrs	r3, r3, #12
    8bda:	0312      	lsls	r2, r2, #12
    8bdc:	4013      	ands	r3, r2
    8bde:	0c4a      	lsrs	r2, r1, #17
    8be0:	0452      	lsls	r2, r2, #17
    8be2:	4313      	orrs	r3, r2
    8be4:	0019      	movs	r1, r3
    8be6:	4643      	mov	r3, r8
    8be8:	00da      	lsls	r2, r3, #3
    8bea:	4b0f      	ldr	r3, [pc, #60]	; (8c28 <rint+0x13c>)
    8bec:	189b      	adds	r3, r3, r2
    8bee:	681c      	ldr	r4, [r3, #0]
    8bf0:	685d      	ldr	r5, [r3, #4]
    8bf2:	0022      	movs	r2, r4
    8bf4:	002b      	movs	r3, r5
    8bf6:	f001 fa8d 	bl	a114 <__aeabi_dadd>
    8bfa:	9000      	str	r0, [sp, #0]
    8bfc:	9101      	str	r1, [sp, #4]
    8bfe:	9800      	ldr	r0, [sp, #0]
    8c00:	9901      	ldr	r1, [sp, #4]
    8c02:	0022      	movs	r2, r4
    8c04:	002b      	movs	r3, r5
    8c06:	f002 fc49 	bl	b49c <__aeabi_dsub>
    8c0a:	4642      	mov	r2, r8
    8c0c:	004b      	lsls	r3, r1, #1
    8c0e:	085b      	lsrs	r3, r3, #1
    8c10:	07d6      	lsls	r6, r2, #31
    8c12:	4333      	orrs	r3, r6
    8c14:	0004      	movs	r4, r0
    8c16:	001d      	movs	r5, r3
    8c18:	e7a6      	b.n	8b68 <rint+0x7c>
    8c1a:	2780      	movs	r7, #128	; 0x80
    8c1c:	063f      	lsls	r7, r7, #24
    8c1e:	e788      	b.n	8b32 <rint+0x46>
    8c20:	fffffc01 	.word	0xfffffc01
    8c24:	000fffff 	.word	0x000fffff
    8c28:	00011198 	.word	0x00011198
    8c2c:	fffffbed 	.word	0xfffffbed

00008c30 <scalbn>:
    8c30:	004b      	lsls	r3, r1, #1
    8c32:	b570      	push	{r4, r5, r6, lr}
    8c34:	0d5b      	lsrs	r3, r3, #21
    8c36:	0014      	movs	r4, r2
    8c38:	000a      	movs	r2, r1
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d11a      	bne.n	8c74 <scalbn+0x44>
    8c3e:	004b      	lsls	r3, r1, #1
    8c40:	085b      	lsrs	r3, r3, #1
    8c42:	4303      	orrs	r3, r0
    8c44:	d015      	beq.n	8c72 <scalbn+0x42>
    8c46:	2200      	movs	r2, #0
    8c48:	4b22      	ldr	r3, [pc, #136]	; (8cd4 <scalbn+0xa4>)
    8c4a:	f002 f9a7 	bl	af9c <__aeabi_dmul>
    8c4e:	4b22      	ldr	r3, [pc, #136]	; (8cd8 <scalbn+0xa8>)
    8c50:	000a      	movs	r2, r1
    8c52:	429c      	cmp	r4, r3
    8c54:	db22      	blt.n	8c9c <scalbn+0x6c>
    8c56:	004b      	lsls	r3, r1, #1
    8c58:	0d5b      	lsrs	r3, r3, #21
    8c5a:	3b36      	subs	r3, #54	; 0x36
    8c5c:	4d1f      	ldr	r5, [pc, #124]	; (8cdc <scalbn+0xac>)
    8c5e:	18e3      	adds	r3, r4, r3
    8c60:	42ab      	cmp	r3, r5
    8c62:	dc20      	bgt.n	8ca6 <scalbn+0x76>
    8c64:	2b00      	cmp	r3, #0
    8c66:	dd0d      	ble.n	8c84 <scalbn+0x54>
    8c68:	4c1d      	ldr	r4, [pc, #116]	; (8ce0 <scalbn+0xb0>)
    8c6a:	051b      	lsls	r3, r3, #20
    8c6c:	4022      	ands	r2, r4
    8c6e:	431a      	orrs	r2, r3
    8c70:	0011      	movs	r1, r2
    8c72:	bd70      	pop	{r4, r5, r6, pc}
    8c74:	4d1b      	ldr	r5, [pc, #108]	; (8ce4 <scalbn+0xb4>)
    8c76:	42ab      	cmp	r3, r5
    8c78:	d1f0      	bne.n	8c5c <scalbn+0x2c>
    8c7a:	0002      	movs	r2, r0
    8c7c:	000b      	movs	r3, r1
    8c7e:	f001 fa49 	bl	a114 <__aeabi_dadd>
    8c82:	e7f6      	b.n	8c72 <scalbn+0x42>
    8c84:	001d      	movs	r5, r3
    8c86:	3535      	adds	r5, #53	; 0x35
    8c88:	da18      	bge.n	8cbc <scalbn+0x8c>
    8c8a:	4b17      	ldr	r3, [pc, #92]	; (8ce8 <scalbn+0xb8>)
    8c8c:	0002      	movs	r2, r0
    8c8e:	429c      	cmp	r4, r3
    8c90:	dc0a      	bgt.n	8ca8 <scalbn+0x78>
    8c92:	000b      	movs	r3, r1
    8c94:	4815      	ldr	r0, [pc, #84]	; (8cec <scalbn+0xbc>)
    8c96:	4916      	ldr	r1, [pc, #88]	; (8cf0 <scalbn+0xc0>)
    8c98:	f000 f832 	bl	8d00 <copysign>
    8c9c:	4a13      	ldr	r2, [pc, #76]	; (8cec <scalbn+0xbc>)
    8c9e:	4b14      	ldr	r3, [pc, #80]	; (8cf0 <scalbn+0xc0>)
    8ca0:	f002 f97c 	bl	af9c <__aeabi_dmul>
    8ca4:	e7e5      	b.n	8c72 <scalbn+0x42>
    8ca6:	0002      	movs	r2, r0
    8ca8:	000b      	movs	r3, r1
    8caa:	4812      	ldr	r0, [pc, #72]	; (8cf4 <scalbn+0xc4>)
    8cac:	4912      	ldr	r1, [pc, #72]	; (8cf8 <scalbn+0xc8>)
    8cae:	f000 f827 	bl	8d00 <copysign>
    8cb2:	4a10      	ldr	r2, [pc, #64]	; (8cf4 <scalbn+0xc4>)
    8cb4:	4b10      	ldr	r3, [pc, #64]	; (8cf8 <scalbn+0xc8>)
    8cb6:	f002 f971 	bl	af9c <__aeabi_dmul>
    8cba:	e7da      	b.n	8c72 <scalbn+0x42>
    8cbc:	4c08      	ldr	r4, [pc, #32]	; (8ce0 <scalbn+0xb0>)
    8cbe:	3336      	adds	r3, #54	; 0x36
    8cc0:	4022      	ands	r2, r4
    8cc2:	051b      	lsls	r3, r3, #20
    8cc4:	4313      	orrs	r3, r2
    8cc6:	0019      	movs	r1, r3
    8cc8:	2200      	movs	r2, #0
    8cca:	4b0c      	ldr	r3, [pc, #48]	; (8cfc <scalbn+0xcc>)
    8ccc:	f002 f966 	bl	af9c <__aeabi_dmul>
    8cd0:	e7cf      	b.n	8c72 <scalbn+0x42>
    8cd2:	46c0      	nop			; (mov r8, r8)
    8cd4:	43500000 	.word	0x43500000
    8cd8:	ffff3cb0 	.word	0xffff3cb0
    8cdc:	000007fe 	.word	0x000007fe
    8ce0:	800fffff 	.word	0x800fffff
    8ce4:	000007ff 	.word	0x000007ff
    8ce8:	0000c350 	.word	0x0000c350
    8cec:	c2f8f359 	.word	0xc2f8f359
    8cf0:	01a56e1f 	.word	0x01a56e1f
    8cf4:	8800759c 	.word	0x8800759c
    8cf8:	7e37e43c 	.word	0x7e37e43c
    8cfc:	3c900000 	.word	0x3c900000

00008d00 <copysign>:
    8d00:	b530      	push	{r4, r5, lr}
    8d02:	004a      	lsls	r2, r1, #1
    8d04:	0fdb      	lsrs	r3, r3, #31
    8d06:	07db      	lsls	r3, r3, #31
    8d08:	0852      	lsrs	r2, r2, #1
    8d0a:	431a      	orrs	r2, r3
    8d0c:	0011      	movs	r1, r2
    8d0e:	bd30      	pop	{r4, r5, pc}

00008d10 <__udivsi3>:
    8d10:	2200      	movs	r2, #0
    8d12:	0843      	lsrs	r3, r0, #1
    8d14:	428b      	cmp	r3, r1
    8d16:	d374      	bcc.n	8e02 <__udivsi3+0xf2>
    8d18:	0903      	lsrs	r3, r0, #4
    8d1a:	428b      	cmp	r3, r1
    8d1c:	d35f      	bcc.n	8dde <__udivsi3+0xce>
    8d1e:	0a03      	lsrs	r3, r0, #8
    8d20:	428b      	cmp	r3, r1
    8d22:	d344      	bcc.n	8dae <__udivsi3+0x9e>
    8d24:	0b03      	lsrs	r3, r0, #12
    8d26:	428b      	cmp	r3, r1
    8d28:	d328      	bcc.n	8d7c <__udivsi3+0x6c>
    8d2a:	0c03      	lsrs	r3, r0, #16
    8d2c:	428b      	cmp	r3, r1
    8d2e:	d30d      	bcc.n	8d4c <__udivsi3+0x3c>
    8d30:	22ff      	movs	r2, #255	; 0xff
    8d32:	0209      	lsls	r1, r1, #8
    8d34:	ba12      	rev	r2, r2
    8d36:	0c03      	lsrs	r3, r0, #16
    8d38:	428b      	cmp	r3, r1
    8d3a:	d302      	bcc.n	8d42 <__udivsi3+0x32>
    8d3c:	1212      	asrs	r2, r2, #8
    8d3e:	0209      	lsls	r1, r1, #8
    8d40:	d065      	beq.n	8e0e <__udivsi3+0xfe>
    8d42:	0b03      	lsrs	r3, r0, #12
    8d44:	428b      	cmp	r3, r1
    8d46:	d319      	bcc.n	8d7c <__udivsi3+0x6c>
    8d48:	e000      	b.n	8d4c <__udivsi3+0x3c>
    8d4a:	0a09      	lsrs	r1, r1, #8
    8d4c:	0bc3      	lsrs	r3, r0, #15
    8d4e:	428b      	cmp	r3, r1
    8d50:	d301      	bcc.n	8d56 <__udivsi3+0x46>
    8d52:	03cb      	lsls	r3, r1, #15
    8d54:	1ac0      	subs	r0, r0, r3
    8d56:	4152      	adcs	r2, r2
    8d58:	0b83      	lsrs	r3, r0, #14
    8d5a:	428b      	cmp	r3, r1
    8d5c:	d301      	bcc.n	8d62 <__udivsi3+0x52>
    8d5e:	038b      	lsls	r3, r1, #14
    8d60:	1ac0      	subs	r0, r0, r3
    8d62:	4152      	adcs	r2, r2
    8d64:	0b43      	lsrs	r3, r0, #13
    8d66:	428b      	cmp	r3, r1
    8d68:	d301      	bcc.n	8d6e <__udivsi3+0x5e>
    8d6a:	034b      	lsls	r3, r1, #13
    8d6c:	1ac0      	subs	r0, r0, r3
    8d6e:	4152      	adcs	r2, r2
    8d70:	0b03      	lsrs	r3, r0, #12
    8d72:	428b      	cmp	r3, r1
    8d74:	d301      	bcc.n	8d7a <__udivsi3+0x6a>
    8d76:	030b      	lsls	r3, r1, #12
    8d78:	1ac0      	subs	r0, r0, r3
    8d7a:	4152      	adcs	r2, r2
    8d7c:	0ac3      	lsrs	r3, r0, #11
    8d7e:	428b      	cmp	r3, r1
    8d80:	d301      	bcc.n	8d86 <__udivsi3+0x76>
    8d82:	02cb      	lsls	r3, r1, #11
    8d84:	1ac0      	subs	r0, r0, r3
    8d86:	4152      	adcs	r2, r2
    8d88:	0a83      	lsrs	r3, r0, #10
    8d8a:	428b      	cmp	r3, r1
    8d8c:	d301      	bcc.n	8d92 <__udivsi3+0x82>
    8d8e:	028b      	lsls	r3, r1, #10
    8d90:	1ac0      	subs	r0, r0, r3
    8d92:	4152      	adcs	r2, r2
    8d94:	0a43      	lsrs	r3, r0, #9
    8d96:	428b      	cmp	r3, r1
    8d98:	d301      	bcc.n	8d9e <__udivsi3+0x8e>
    8d9a:	024b      	lsls	r3, r1, #9
    8d9c:	1ac0      	subs	r0, r0, r3
    8d9e:	4152      	adcs	r2, r2
    8da0:	0a03      	lsrs	r3, r0, #8
    8da2:	428b      	cmp	r3, r1
    8da4:	d301      	bcc.n	8daa <__udivsi3+0x9a>
    8da6:	020b      	lsls	r3, r1, #8
    8da8:	1ac0      	subs	r0, r0, r3
    8daa:	4152      	adcs	r2, r2
    8dac:	d2cd      	bcs.n	8d4a <__udivsi3+0x3a>
    8dae:	09c3      	lsrs	r3, r0, #7
    8db0:	428b      	cmp	r3, r1
    8db2:	d301      	bcc.n	8db8 <__udivsi3+0xa8>
    8db4:	01cb      	lsls	r3, r1, #7
    8db6:	1ac0      	subs	r0, r0, r3
    8db8:	4152      	adcs	r2, r2
    8dba:	0983      	lsrs	r3, r0, #6
    8dbc:	428b      	cmp	r3, r1
    8dbe:	d301      	bcc.n	8dc4 <__udivsi3+0xb4>
    8dc0:	018b      	lsls	r3, r1, #6
    8dc2:	1ac0      	subs	r0, r0, r3
    8dc4:	4152      	adcs	r2, r2
    8dc6:	0943      	lsrs	r3, r0, #5
    8dc8:	428b      	cmp	r3, r1
    8dca:	d301      	bcc.n	8dd0 <__udivsi3+0xc0>
    8dcc:	014b      	lsls	r3, r1, #5
    8dce:	1ac0      	subs	r0, r0, r3
    8dd0:	4152      	adcs	r2, r2
    8dd2:	0903      	lsrs	r3, r0, #4
    8dd4:	428b      	cmp	r3, r1
    8dd6:	d301      	bcc.n	8ddc <__udivsi3+0xcc>
    8dd8:	010b      	lsls	r3, r1, #4
    8dda:	1ac0      	subs	r0, r0, r3
    8ddc:	4152      	adcs	r2, r2
    8dde:	08c3      	lsrs	r3, r0, #3
    8de0:	428b      	cmp	r3, r1
    8de2:	d301      	bcc.n	8de8 <__udivsi3+0xd8>
    8de4:	00cb      	lsls	r3, r1, #3
    8de6:	1ac0      	subs	r0, r0, r3
    8de8:	4152      	adcs	r2, r2
    8dea:	0883      	lsrs	r3, r0, #2
    8dec:	428b      	cmp	r3, r1
    8dee:	d301      	bcc.n	8df4 <__udivsi3+0xe4>
    8df0:	008b      	lsls	r3, r1, #2
    8df2:	1ac0      	subs	r0, r0, r3
    8df4:	4152      	adcs	r2, r2
    8df6:	0843      	lsrs	r3, r0, #1
    8df8:	428b      	cmp	r3, r1
    8dfa:	d301      	bcc.n	8e00 <__udivsi3+0xf0>
    8dfc:	004b      	lsls	r3, r1, #1
    8dfe:	1ac0      	subs	r0, r0, r3
    8e00:	4152      	adcs	r2, r2
    8e02:	1a41      	subs	r1, r0, r1
    8e04:	d200      	bcs.n	8e08 <__udivsi3+0xf8>
    8e06:	4601      	mov	r1, r0
    8e08:	4152      	adcs	r2, r2
    8e0a:	4610      	mov	r0, r2
    8e0c:	4770      	bx	lr
    8e0e:	e7ff      	b.n	8e10 <__udivsi3+0x100>
    8e10:	b501      	push	{r0, lr}
    8e12:	2000      	movs	r0, #0
    8e14:	f000 f8f0 	bl	8ff8 <__aeabi_idiv0>
    8e18:	bd02      	pop	{r1, pc}
    8e1a:	46c0      	nop			; (mov r8, r8)

00008e1c <__aeabi_uidivmod>:
    8e1c:	2900      	cmp	r1, #0
    8e1e:	d0f7      	beq.n	8e10 <__udivsi3+0x100>
    8e20:	e776      	b.n	8d10 <__udivsi3>
    8e22:	4770      	bx	lr

00008e24 <__divsi3>:
    8e24:	4603      	mov	r3, r0
    8e26:	430b      	orrs	r3, r1
    8e28:	d47f      	bmi.n	8f2a <__divsi3+0x106>
    8e2a:	2200      	movs	r2, #0
    8e2c:	0843      	lsrs	r3, r0, #1
    8e2e:	428b      	cmp	r3, r1
    8e30:	d374      	bcc.n	8f1c <__divsi3+0xf8>
    8e32:	0903      	lsrs	r3, r0, #4
    8e34:	428b      	cmp	r3, r1
    8e36:	d35f      	bcc.n	8ef8 <__divsi3+0xd4>
    8e38:	0a03      	lsrs	r3, r0, #8
    8e3a:	428b      	cmp	r3, r1
    8e3c:	d344      	bcc.n	8ec8 <__divsi3+0xa4>
    8e3e:	0b03      	lsrs	r3, r0, #12
    8e40:	428b      	cmp	r3, r1
    8e42:	d328      	bcc.n	8e96 <__divsi3+0x72>
    8e44:	0c03      	lsrs	r3, r0, #16
    8e46:	428b      	cmp	r3, r1
    8e48:	d30d      	bcc.n	8e66 <__divsi3+0x42>
    8e4a:	22ff      	movs	r2, #255	; 0xff
    8e4c:	0209      	lsls	r1, r1, #8
    8e4e:	ba12      	rev	r2, r2
    8e50:	0c03      	lsrs	r3, r0, #16
    8e52:	428b      	cmp	r3, r1
    8e54:	d302      	bcc.n	8e5c <__divsi3+0x38>
    8e56:	1212      	asrs	r2, r2, #8
    8e58:	0209      	lsls	r1, r1, #8
    8e5a:	d065      	beq.n	8f28 <__divsi3+0x104>
    8e5c:	0b03      	lsrs	r3, r0, #12
    8e5e:	428b      	cmp	r3, r1
    8e60:	d319      	bcc.n	8e96 <__divsi3+0x72>
    8e62:	e000      	b.n	8e66 <__divsi3+0x42>
    8e64:	0a09      	lsrs	r1, r1, #8
    8e66:	0bc3      	lsrs	r3, r0, #15
    8e68:	428b      	cmp	r3, r1
    8e6a:	d301      	bcc.n	8e70 <__divsi3+0x4c>
    8e6c:	03cb      	lsls	r3, r1, #15
    8e6e:	1ac0      	subs	r0, r0, r3
    8e70:	4152      	adcs	r2, r2
    8e72:	0b83      	lsrs	r3, r0, #14
    8e74:	428b      	cmp	r3, r1
    8e76:	d301      	bcc.n	8e7c <__divsi3+0x58>
    8e78:	038b      	lsls	r3, r1, #14
    8e7a:	1ac0      	subs	r0, r0, r3
    8e7c:	4152      	adcs	r2, r2
    8e7e:	0b43      	lsrs	r3, r0, #13
    8e80:	428b      	cmp	r3, r1
    8e82:	d301      	bcc.n	8e88 <__divsi3+0x64>
    8e84:	034b      	lsls	r3, r1, #13
    8e86:	1ac0      	subs	r0, r0, r3
    8e88:	4152      	adcs	r2, r2
    8e8a:	0b03      	lsrs	r3, r0, #12
    8e8c:	428b      	cmp	r3, r1
    8e8e:	d301      	bcc.n	8e94 <__divsi3+0x70>
    8e90:	030b      	lsls	r3, r1, #12
    8e92:	1ac0      	subs	r0, r0, r3
    8e94:	4152      	adcs	r2, r2
    8e96:	0ac3      	lsrs	r3, r0, #11
    8e98:	428b      	cmp	r3, r1
    8e9a:	d301      	bcc.n	8ea0 <__divsi3+0x7c>
    8e9c:	02cb      	lsls	r3, r1, #11
    8e9e:	1ac0      	subs	r0, r0, r3
    8ea0:	4152      	adcs	r2, r2
    8ea2:	0a83      	lsrs	r3, r0, #10
    8ea4:	428b      	cmp	r3, r1
    8ea6:	d301      	bcc.n	8eac <__divsi3+0x88>
    8ea8:	028b      	lsls	r3, r1, #10
    8eaa:	1ac0      	subs	r0, r0, r3
    8eac:	4152      	adcs	r2, r2
    8eae:	0a43      	lsrs	r3, r0, #9
    8eb0:	428b      	cmp	r3, r1
    8eb2:	d301      	bcc.n	8eb8 <__divsi3+0x94>
    8eb4:	024b      	lsls	r3, r1, #9
    8eb6:	1ac0      	subs	r0, r0, r3
    8eb8:	4152      	adcs	r2, r2
    8eba:	0a03      	lsrs	r3, r0, #8
    8ebc:	428b      	cmp	r3, r1
    8ebe:	d301      	bcc.n	8ec4 <__divsi3+0xa0>
    8ec0:	020b      	lsls	r3, r1, #8
    8ec2:	1ac0      	subs	r0, r0, r3
    8ec4:	4152      	adcs	r2, r2
    8ec6:	d2cd      	bcs.n	8e64 <__divsi3+0x40>
    8ec8:	09c3      	lsrs	r3, r0, #7
    8eca:	428b      	cmp	r3, r1
    8ecc:	d301      	bcc.n	8ed2 <__divsi3+0xae>
    8ece:	01cb      	lsls	r3, r1, #7
    8ed0:	1ac0      	subs	r0, r0, r3
    8ed2:	4152      	adcs	r2, r2
    8ed4:	0983      	lsrs	r3, r0, #6
    8ed6:	428b      	cmp	r3, r1
    8ed8:	d301      	bcc.n	8ede <__divsi3+0xba>
    8eda:	018b      	lsls	r3, r1, #6
    8edc:	1ac0      	subs	r0, r0, r3
    8ede:	4152      	adcs	r2, r2
    8ee0:	0943      	lsrs	r3, r0, #5
    8ee2:	428b      	cmp	r3, r1
    8ee4:	d301      	bcc.n	8eea <__divsi3+0xc6>
    8ee6:	014b      	lsls	r3, r1, #5
    8ee8:	1ac0      	subs	r0, r0, r3
    8eea:	4152      	adcs	r2, r2
    8eec:	0903      	lsrs	r3, r0, #4
    8eee:	428b      	cmp	r3, r1
    8ef0:	d301      	bcc.n	8ef6 <__divsi3+0xd2>
    8ef2:	010b      	lsls	r3, r1, #4
    8ef4:	1ac0      	subs	r0, r0, r3
    8ef6:	4152      	adcs	r2, r2
    8ef8:	08c3      	lsrs	r3, r0, #3
    8efa:	428b      	cmp	r3, r1
    8efc:	d301      	bcc.n	8f02 <__divsi3+0xde>
    8efe:	00cb      	lsls	r3, r1, #3
    8f00:	1ac0      	subs	r0, r0, r3
    8f02:	4152      	adcs	r2, r2
    8f04:	0883      	lsrs	r3, r0, #2
    8f06:	428b      	cmp	r3, r1
    8f08:	d301      	bcc.n	8f0e <__divsi3+0xea>
    8f0a:	008b      	lsls	r3, r1, #2
    8f0c:	1ac0      	subs	r0, r0, r3
    8f0e:	4152      	adcs	r2, r2
    8f10:	0843      	lsrs	r3, r0, #1
    8f12:	428b      	cmp	r3, r1
    8f14:	d301      	bcc.n	8f1a <__divsi3+0xf6>
    8f16:	004b      	lsls	r3, r1, #1
    8f18:	1ac0      	subs	r0, r0, r3
    8f1a:	4152      	adcs	r2, r2
    8f1c:	1a41      	subs	r1, r0, r1
    8f1e:	d200      	bcs.n	8f22 <__divsi3+0xfe>
    8f20:	4601      	mov	r1, r0
    8f22:	4152      	adcs	r2, r2
    8f24:	4610      	mov	r0, r2
    8f26:	4770      	bx	lr
    8f28:	e05d      	b.n	8fe6 <__divsi3+0x1c2>
    8f2a:	0fca      	lsrs	r2, r1, #31
    8f2c:	d000      	beq.n	8f30 <__divsi3+0x10c>
    8f2e:	4249      	negs	r1, r1
    8f30:	1003      	asrs	r3, r0, #32
    8f32:	d300      	bcc.n	8f36 <__divsi3+0x112>
    8f34:	4240      	negs	r0, r0
    8f36:	4053      	eors	r3, r2
    8f38:	2200      	movs	r2, #0
    8f3a:	469c      	mov	ip, r3
    8f3c:	0903      	lsrs	r3, r0, #4
    8f3e:	428b      	cmp	r3, r1
    8f40:	d32d      	bcc.n	8f9e <__divsi3+0x17a>
    8f42:	0a03      	lsrs	r3, r0, #8
    8f44:	428b      	cmp	r3, r1
    8f46:	d312      	bcc.n	8f6e <__divsi3+0x14a>
    8f48:	22fc      	movs	r2, #252	; 0xfc
    8f4a:	0189      	lsls	r1, r1, #6
    8f4c:	ba12      	rev	r2, r2
    8f4e:	0a03      	lsrs	r3, r0, #8
    8f50:	428b      	cmp	r3, r1
    8f52:	d30c      	bcc.n	8f6e <__divsi3+0x14a>
    8f54:	0189      	lsls	r1, r1, #6
    8f56:	1192      	asrs	r2, r2, #6
    8f58:	428b      	cmp	r3, r1
    8f5a:	d308      	bcc.n	8f6e <__divsi3+0x14a>
    8f5c:	0189      	lsls	r1, r1, #6
    8f5e:	1192      	asrs	r2, r2, #6
    8f60:	428b      	cmp	r3, r1
    8f62:	d304      	bcc.n	8f6e <__divsi3+0x14a>
    8f64:	0189      	lsls	r1, r1, #6
    8f66:	d03a      	beq.n	8fde <__divsi3+0x1ba>
    8f68:	1192      	asrs	r2, r2, #6
    8f6a:	e000      	b.n	8f6e <__divsi3+0x14a>
    8f6c:	0989      	lsrs	r1, r1, #6
    8f6e:	09c3      	lsrs	r3, r0, #7
    8f70:	428b      	cmp	r3, r1
    8f72:	d301      	bcc.n	8f78 <__divsi3+0x154>
    8f74:	01cb      	lsls	r3, r1, #7
    8f76:	1ac0      	subs	r0, r0, r3
    8f78:	4152      	adcs	r2, r2
    8f7a:	0983      	lsrs	r3, r0, #6
    8f7c:	428b      	cmp	r3, r1
    8f7e:	d301      	bcc.n	8f84 <__divsi3+0x160>
    8f80:	018b      	lsls	r3, r1, #6
    8f82:	1ac0      	subs	r0, r0, r3
    8f84:	4152      	adcs	r2, r2
    8f86:	0943      	lsrs	r3, r0, #5
    8f88:	428b      	cmp	r3, r1
    8f8a:	d301      	bcc.n	8f90 <__divsi3+0x16c>
    8f8c:	014b      	lsls	r3, r1, #5
    8f8e:	1ac0      	subs	r0, r0, r3
    8f90:	4152      	adcs	r2, r2
    8f92:	0903      	lsrs	r3, r0, #4
    8f94:	428b      	cmp	r3, r1
    8f96:	d301      	bcc.n	8f9c <__divsi3+0x178>
    8f98:	010b      	lsls	r3, r1, #4
    8f9a:	1ac0      	subs	r0, r0, r3
    8f9c:	4152      	adcs	r2, r2
    8f9e:	08c3      	lsrs	r3, r0, #3
    8fa0:	428b      	cmp	r3, r1
    8fa2:	d301      	bcc.n	8fa8 <__divsi3+0x184>
    8fa4:	00cb      	lsls	r3, r1, #3
    8fa6:	1ac0      	subs	r0, r0, r3
    8fa8:	4152      	adcs	r2, r2
    8faa:	0883      	lsrs	r3, r0, #2
    8fac:	428b      	cmp	r3, r1
    8fae:	d301      	bcc.n	8fb4 <__divsi3+0x190>
    8fb0:	008b      	lsls	r3, r1, #2
    8fb2:	1ac0      	subs	r0, r0, r3
    8fb4:	4152      	adcs	r2, r2
    8fb6:	d2d9      	bcs.n	8f6c <__divsi3+0x148>
    8fb8:	0843      	lsrs	r3, r0, #1
    8fba:	428b      	cmp	r3, r1
    8fbc:	d301      	bcc.n	8fc2 <__divsi3+0x19e>
    8fbe:	004b      	lsls	r3, r1, #1
    8fc0:	1ac0      	subs	r0, r0, r3
    8fc2:	4152      	adcs	r2, r2
    8fc4:	1a41      	subs	r1, r0, r1
    8fc6:	d200      	bcs.n	8fca <__divsi3+0x1a6>
    8fc8:	4601      	mov	r1, r0
    8fca:	4663      	mov	r3, ip
    8fcc:	4152      	adcs	r2, r2
    8fce:	105b      	asrs	r3, r3, #1
    8fd0:	4610      	mov	r0, r2
    8fd2:	d301      	bcc.n	8fd8 <__divsi3+0x1b4>
    8fd4:	4240      	negs	r0, r0
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d500      	bpl.n	8fdc <__divsi3+0x1b8>
    8fda:	4249      	negs	r1, r1
    8fdc:	4770      	bx	lr
    8fde:	4663      	mov	r3, ip
    8fe0:	105b      	asrs	r3, r3, #1
    8fe2:	d300      	bcc.n	8fe6 <__divsi3+0x1c2>
    8fe4:	4240      	negs	r0, r0
    8fe6:	b501      	push	{r0, lr}
    8fe8:	2000      	movs	r0, #0
    8fea:	f000 f805 	bl	8ff8 <__aeabi_idiv0>
    8fee:	bd02      	pop	{r1, pc}

00008ff0 <__aeabi_idivmod>:
    8ff0:	2900      	cmp	r1, #0
    8ff2:	d0f8      	beq.n	8fe6 <__divsi3+0x1c2>
    8ff4:	e716      	b.n	8e24 <__divsi3>
    8ff6:	4770      	bx	lr

00008ff8 <__aeabi_idiv0>:
    8ff8:	4770      	bx	lr
    8ffa:	46c0      	nop			; (mov r8, r8)

00008ffc <__aeabi_cdrcmple>:
    8ffc:	4684      	mov	ip, r0
    8ffe:	1c10      	adds	r0, r2, #0
    9000:	4662      	mov	r2, ip
    9002:	468c      	mov	ip, r1
    9004:	1c19      	adds	r1, r3, #0
    9006:	4663      	mov	r3, ip
    9008:	e000      	b.n	900c <__aeabi_cdcmpeq>
    900a:	46c0      	nop			; (mov r8, r8)

0000900c <__aeabi_cdcmpeq>:
    900c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    900e:	f001 ff63 	bl	aed8 <__ledf2>
    9012:	2800      	cmp	r0, #0
    9014:	d401      	bmi.n	901a <__aeabi_cdcmpeq+0xe>
    9016:	2100      	movs	r1, #0
    9018:	42c8      	cmn	r0, r1
    901a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000901c <__aeabi_dcmpeq>:
    901c:	b510      	push	{r4, lr}
    901e:	f001 febd 	bl	ad9c <__eqdf2>
    9022:	4240      	negs	r0, r0
    9024:	3001      	adds	r0, #1
    9026:	bd10      	pop	{r4, pc}

00009028 <__aeabi_dcmplt>:
    9028:	b510      	push	{r4, lr}
    902a:	f001 ff55 	bl	aed8 <__ledf2>
    902e:	2800      	cmp	r0, #0
    9030:	db01      	blt.n	9036 <__aeabi_dcmplt+0xe>
    9032:	2000      	movs	r0, #0
    9034:	bd10      	pop	{r4, pc}
    9036:	2001      	movs	r0, #1
    9038:	bd10      	pop	{r4, pc}
    903a:	46c0      	nop			; (mov r8, r8)

0000903c <__aeabi_dcmple>:
    903c:	b510      	push	{r4, lr}
    903e:	f001 ff4b 	bl	aed8 <__ledf2>
    9042:	2800      	cmp	r0, #0
    9044:	dd01      	ble.n	904a <__aeabi_dcmple+0xe>
    9046:	2000      	movs	r0, #0
    9048:	bd10      	pop	{r4, pc}
    904a:	2001      	movs	r0, #1
    904c:	bd10      	pop	{r4, pc}
    904e:	46c0      	nop			; (mov r8, r8)

00009050 <__aeabi_dcmpgt>:
    9050:	b510      	push	{r4, lr}
    9052:	f001 fedd 	bl	ae10 <__gedf2>
    9056:	2800      	cmp	r0, #0
    9058:	dc01      	bgt.n	905e <__aeabi_dcmpgt+0xe>
    905a:	2000      	movs	r0, #0
    905c:	bd10      	pop	{r4, pc}
    905e:	2001      	movs	r0, #1
    9060:	bd10      	pop	{r4, pc}
    9062:	46c0      	nop			; (mov r8, r8)

00009064 <__aeabi_dcmpge>:
    9064:	b510      	push	{r4, lr}
    9066:	f001 fed3 	bl	ae10 <__gedf2>
    906a:	2800      	cmp	r0, #0
    906c:	da01      	bge.n	9072 <__aeabi_dcmpge+0xe>
    906e:	2000      	movs	r0, #0
    9070:	bd10      	pop	{r4, pc}
    9072:	2001      	movs	r0, #1
    9074:	bd10      	pop	{r4, pc}
    9076:	46c0      	nop			; (mov r8, r8)

00009078 <__aeabi_cfrcmple>:
    9078:	4684      	mov	ip, r0
    907a:	1c08      	adds	r0, r1, #0
    907c:	4661      	mov	r1, ip
    907e:	e7ff      	b.n	9080 <__aeabi_cfcmpeq>

00009080 <__aeabi_cfcmpeq>:
    9080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9082:	f000 fc93 	bl	99ac <__lesf2>
    9086:	2800      	cmp	r0, #0
    9088:	d401      	bmi.n	908e <__aeabi_cfcmpeq+0xe>
    908a:	2100      	movs	r1, #0
    908c:	42c8      	cmn	r0, r1
    908e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009090 <__aeabi_fcmpeq>:
    9090:	b510      	push	{r4, lr}
    9092:	f000 fc25 	bl	98e0 <__eqsf2>
    9096:	4240      	negs	r0, r0
    9098:	3001      	adds	r0, #1
    909a:	bd10      	pop	{r4, pc}

0000909c <__aeabi_fcmplt>:
    909c:	b510      	push	{r4, lr}
    909e:	f000 fc85 	bl	99ac <__lesf2>
    90a2:	2800      	cmp	r0, #0
    90a4:	db01      	blt.n	90aa <__aeabi_fcmplt+0xe>
    90a6:	2000      	movs	r0, #0
    90a8:	bd10      	pop	{r4, pc}
    90aa:	2001      	movs	r0, #1
    90ac:	bd10      	pop	{r4, pc}
    90ae:	46c0      	nop			; (mov r8, r8)

000090b0 <__aeabi_fcmple>:
    90b0:	b510      	push	{r4, lr}
    90b2:	f000 fc7b 	bl	99ac <__lesf2>
    90b6:	2800      	cmp	r0, #0
    90b8:	dd01      	ble.n	90be <__aeabi_fcmple+0xe>
    90ba:	2000      	movs	r0, #0
    90bc:	bd10      	pop	{r4, pc}
    90be:	2001      	movs	r0, #1
    90c0:	bd10      	pop	{r4, pc}
    90c2:	46c0      	nop			; (mov r8, r8)

000090c4 <__aeabi_fcmpgt>:
    90c4:	b510      	push	{r4, lr}
    90c6:	f000 fc31 	bl	992c <__gesf2>
    90ca:	2800      	cmp	r0, #0
    90cc:	dc01      	bgt.n	90d2 <__aeabi_fcmpgt+0xe>
    90ce:	2000      	movs	r0, #0
    90d0:	bd10      	pop	{r4, pc}
    90d2:	2001      	movs	r0, #1
    90d4:	bd10      	pop	{r4, pc}
    90d6:	46c0      	nop			; (mov r8, r8)

000090d8 <__aeabi_fcmpge>:
    90d8:	b510      	push	{r4, lr}
    90da:	f000 fc27 	bl	992c <__gesf2>
    90de:	2800      	cmp	r0, #0
    90e0:	da01      	bge.n	90e6 <__aeabi_fcmpge+0xe>
    90e2:	2000      	movs	r0, #0
    90e4:	bd10      	pop	{r4, pc}
    90e6:	2001      	movs	r0, #1
    90e8:	bd10      	pop	{r4, pc}
    90ea:	46c0      	nop			; (mov r8, r8)

000090ec <__aeabi_uldivmod>:
    90ec:	2b00      	cmp	r3, #0
    90ee:	d111      	bne.n	9114 <__aeabi_uldivmod+0x28>
    90f0:	2a00      	cmp	r2, #0
    90f2:	d10f      	bne.n	9114 <__aeabi_uldivmod+0x28>
    90f4:	2900      	cmp	r1, #0
    90f6:	d100      	bne.n	90fa <__aeabi_uldivmod+0xe>
    90f8:	2800      	cmp	r0, #0
    90fa:	d002      	beq.n	9102 <__aeabi_uldivmod+0x16>
    90fc:	2100      	movs	r1, #0
    90fe:	43c9      	mvns	r1, r1
    9100:	1c08      	adds	r0, r1, #0
    9102:	b407      	push	{r0, r1, r2}
    9104:	4802      	ldr	r0, [pc, #8]	; (9110 <__aeabi_uldivmod+0x24>)
    9106:	a102      	add	r1, pc, #8	; (adr r1, 9110 <__aeabi_uldivmod+0x24>)
    9108:	1840      	adds	r0, r0, r1
    910a:	9002      	str	r0, [sp, #8]
    910c:	bd03      	pop	{r0, r1, pc}
    910e:	46c0      	nop			; (mov r8, r8)
    9110:	fffffee9 	.word	0xfffffee9
    9114:	b403      	push	{r0, r1}
    9116:	4668      	mov	r0, sp
    9118:	b501      	push	{r0, lr}
    911a:	9802      	ldr	r0, [sp, #8]
    911c:	f000 f846 	bl	91ac <__udivmoddi4>
    9120:	9b01      	ldr	r3, [sp, #4]
    9122:	469e      	mov	lr, r3
    9124:	b002      	add	sp, #8
    9126:	bc0c      	pop	{r2, r3}
    9128:	4770      	bx	lr
    912a:	46c0      	nop			; (mov r8, r8)

0000912c <__ffssi2>:
    912c:	b510      	push	{r4, lr}
    912e:	2300      	movs	r3, #0
    9130:	2800      	cmp	r0, #0
    9132:	d002      	beq.n	913a <__ffssi2+0xe>
    9134:	f002 fe9c 	bl	be70 <__ctzsi2>
    9138:	1c43      	adds	r3, r0, #1
    913a:	0018      	movs	r0, r3
    913c:	bd10      	pop	{r4, pc}
    913e:	46c0      	nop			; (mov r8, r8)

00009140 <__aeabi_f2uiz>:
    9140:	219e      	movs	r1, #158	; 0x9e
    9142:	b510      	push	{r4, lr}
    9144:	05c9      	lsls	r1, r1, #23
    9146:	1c04      	adds	r4, r0, #0
    9148:	f7ff ffc6 	bl	90d8 <__aeabi_fcmpge>
    914c:	2800      	cmp	r0, #0
    914e:	d103      	bne.n	9158 <__aeabi_f2uiz+0x18>
    9150:	1c20      	adds	r0, r4, #0
    9152:	f000 ff29 	bl	9fa8 <__aeabi_f2iz>
    9156:	bd10      	pop	{r4, pc}
    9158:	219e      	movs	r1, #158	; 0x9e
    915a:	1c20      	adds	r0, r4, #0
    915c:	05c9      	lsls	r1, r1, #23
    915e:	f000 fd87 	bl	9c70 <__aeabi_fsub>
    9162:	f000 ff21 	bl	9fa8 <__aeabi_f2iz>
    9166:	2380      	movs	r3, #128	; 0x80
    9168:	061b      	lsls	r3, r3, #24
    916a:	469c      	mov	ip, r3
    916c:	4460      	add	r0, ip
    916e:	e7f2      	b.n	9156 <__aeabi_f2uiz+0x16>

00009170 <__aeabi_d2uiz>:
    9170:	b570      	push	{r4, r5, r6, lr}
    9172:	2200      	movs	r2, #0
    9174:	4b0c      	ldr	r3, [pc, #48]	; (91a8 <__aeabi_d2uiz+0x38>)
    9176:	0004      	movs	r4, r0
    9178:	000d      	movs	r5, r1
    917a:	f7ff ff73 	bl	9064 <__aeabi_dcmpge>
    917e:	2800      	cmp	r0, #0
    9180:	d104      	bne.n	918c <__aeabi_d2uiz+0x1c>
    9182:	0020      	movs	r0, r4
    9184:	0029      	movs	r1, r5
    9186:	f002 fcbf 	bl	bb08 <__aeabi_d2iz>
    918a:	bd70      	pop	{r4, r5, r6, pc}
    918c:	4b06      	ldr	r3, [pc, #24]	; (91a8 <__aeabi_d2uiz+0x38>)
    918e:	2200      	movs	r2, #0
    9190:	0020      	movs	r0, r4
    9192:	0029      	movs	r1, r5
    9194:	f002 f982 	bl	b49c <__aeabi_dsub>
    9198:	f002 fcb6 	bl	bb08 <__aeabi_d2iz>
    919c:	2380      	movs	r3, #128	; 0x80
    919e:	061b      	lsls	r3, r3, #24
    91a0:	469c      	mov	ip, r3
    91a2:	4460      	add	r0, ip
    91a4:	e7f1      	b.n	918a <__aeabi_d2uiz+0x1a>
    91a6:	46c0      	nop			; (mov r8, r8)
    91a8:	41e00000 	.word	0x41e00000

000091ac <__udivmoddi4>:
    91ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ae:	4657      	mov	r7, sl
    91b0:	464e      	mov	r6, r9
    91b2:	4645      	mov	r5, r8
    91b4:	46de      	mov	lr, fp
    91b6:	b5e0      	push	{r5, r6, r7, lr}
    91b8:	0004      	movs	r4, r0
    91ba:	b083      	sub	sp, #12
    91bc:	000d      	movs	r5, r1
    91be:	4692      	mov	sl, r2
    91c0:	4699      	mov	r9, r3
    91c2:	428b      	cmp	r3, r1
    91c4:	d82f      	bhi.n	9226 <__udivmoddi4+0x7a>
    91c6:	d02c      	beq.n	9222 <__udivmoddi4+0x76>
    91c8:	4649      	mov	r1, r9
    91ca:	4650      	mov	r0, sl
    91cc:	f002 fe44 	bl	be58 <__clzdi2>
    91d0:	0029      	movs	r1, r5
    91d2:	0006      	movs	r6, r0
    91d4:	0020      	movs	r0, r4
    91d6:	f002 fe3f 	bl	be58 <__clzdi2>
    91da:	1a33      	subs	r3, r6, r0
    91dc:	4698      	mov	r8, r3
    91de:	3b20      	subs	r3, #32
    91e0:	469b      	mov	fp, r3
    91e2:	d500      	bpl.n	91e6 <__udivmoddi4+0x3a>
    91e4:	e074      	b.n	92d0 <__udivmoddi4+0x124>
    91e6:	4653      	mov	r3, sl
    91e8:	465a      	mov	r2, fp
    91ea:	4093      	lsls	r3, r2
    91ec:	001f      	movs	r7, r3
    91ee:	4653      	mov	r3, sl
    91f0:	4642      	mov	r2, r8
    91f2:	4093      	lsls	r3, r2
    91f4:	001e      	movs	r6, r3
    91f6:	42af      	cmp	r7, r5
    91f8:	d829      	bhi.n	924e <__udivmoddi4+0xa2>
    91fa:	d026      	beq.n	924a <__udivmoddi4+0x9e>
    91fc:	465b      	mov	r3, fp
    91fe:	1ba4      	subs	r4, r4, r6
    9200:	41bd      	sbcs	r5, r7
    9202:	2b00      	cmp	r3, #0
    9204:	da00      	bge.n	9208 <__udivmoddi4+0x5c>
    9206:	e079      	b.n	92fc <__udivmoddi4+0x150>
    9208:	2200      	movs	r2, #0
    920a:	2300      	movs	r3, #0
    920c:	9200      	str	r2, [sp, #0]
    920e:	9301      	str	r3, [sp, #4]
    9210:	2301      	movs	r3, #1
    9212:	465a      	mov	r2, fp
    9214:	4093      	lsls	r3, r2
    9216:	9301      	str	r3, [sp, #4]
    9218:	2301      	movs	r3, #1
    921a:	4642      	mov	r2, r8
    921c:	4093      	lsls	r3, r2
    921e:	9300      	str	r3, [sp, #0]
    9220:	e019      	b.n	9256 <__udivmoddi4+0xaa>
    9222:	4282      	cmp	r2, r0
    9224:	d9d0      	bls.n	91c8 <__udivmoddi4+0x1c>
    9226:	2200      	movs	r2, #0
    9228:	2300      	movs	r3, #0
    922a:	9200      	str	r2, [sp, #0]
    922c:	9301      	str	r3, [sp, #4]
    922e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9230:	2b00      	cmp	r3, #0
    9232:	d001      	beq.n	9238 <__udivmoddi4+0x8c>
    9234:	601c      	str	r4, [r3, #0]
    9236:	605d      	str	r5, [r3, #4]
    9238:	9800      	ldr	r0, [sp, #0]
    923a:	9901      	ldr	r1, [sp, #4]
    923c:	b003      	add	sp, #12
    923e:	bc3c      	pop	{r2, r3, r4, r5}
    9240:	4690      	mov	r8, r2
    9242:	4699      	mov	r9, r3
    9244:	46a2      	mov	sl, r4
    9246:	46ab      	mov	fp, r5
    9248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    924a:	42a3      	cmp	r3, r4
    924c:	d9d6      	bls.n	91fc <__udivmoddi4+0x50>
    924e:	2200      	movs	r2, #0
    9250:	2300      	movs	r3, #0
    9252:	9200      	str	r2, [sp, #0]
    9254:	9301      	str	r3, [sp, #4]
    9256:	4643      	mov	r3, r8
    9258:	2b00      	cmp	r3, #0
    925a:	d0e8      	beq.n	922e <__udivmoddi4+0x82>
    925c:	07fb      	lsls	r3, r7, #31
    925e:	0872      	lsrs	r2, r6, #1
    9260:	431a      	orrs	r2, r3
    9262:	4646      	mov	r6, r8
    9264:	087b      	lsrs	r3, r7, #1
    9266:	e00e      	b.n	9286 <__udivmoddi4+0xda>
    9268:	42ab      	cmp	r3, r5
    926a:	d101      	bne.n	9270 <__udivmoddi4+0xc4>
    926c:	42a2      	cmp	r2, r4
    926e:	d80c      	bhi.n	928a <__udivmoddi4+0xde>
    9270:	1aa4      	subs	r4, r4, r2
    9272:	419d      	sbcs	r5, r3
    9274:	2001      	movs	r0, #1
    9276:	1924      	adds	r4, r4, r4
    9278:	416d      	adcs	r5, r5
    927a:	2100      	movs	r1, #0
    927c:	3e01      	subs	r6, #1
    927e:	1824      	adds	r4, r4, r0
    9280:	414d      	adcs	r5, r1
    9282:	2e00      	cmp	r6, #0
    9284:	d006      	beq.n	9294 <__udivmoddi4+0xe8>
    9286:	42ab      	cmp	r3, r5
    9288:	d9ee      	bls.n	9268 <__udivmoddi4+0xbc>
    928a:	3e01      	subs	r6, #1
    928c:	1924      	adds	r4, r4, r4
    928e:	416d      	adcs	r5, r5
    9290:	2e00      	cmp	r6, #0
    9292:	d1f8      	bne.n	9286 <__udivmoddi4+0xda>
    9294:	465b      	mov	r3, fp
    9296:	9800      	ldr	r0, [sp, #0]
    9298:	9901      	ldr	r1, [sp, #4]
    929a:	1900      	adds	r0, r0, r4
    929c:	4169      	adcs	r1, r5
    929e:	2b00      	cmp	r3, #0
    92a0:	db22      	blt.n	92e8 <__udivmoddi4+0x13c>
    92a2:	002b      	movs	r3, r5
    92a4:	465a      	mov	r2, fp
    92a6:	40d3      	lsrs	r3, r2
    92a8:	002a      	movs	r2, r5
    92aa:	4644      	mov	r4, r8
    92ac:	40e2      	lsrs	r2, r4
    92ae:	001c      	movs	r4, r3
    92b0:	465b      	mov	r3, fp
    92b2:	0015      	movs	r5, r2
    92b4:	2b00      	cmp	r3, #0
    92b6:	db2c      	blt.n	9312 <__udivmoddi4+0x166>
    92b8:	0026      	movs	r6, r4
    92ba:	409e      	lsls	r6, r3
    92bc:	0033      	movs	r3, r6
    92be:	0026      	movs	r6, r4
    92c0:	4647      	mov	r7, r8
    92c2:	40be      	lsls	r6, r7
    92c4:	0032      	movs	r2, r6
    92c6:	1a80      	subs	r0, r0, r2
    92c8:	4199      	sbcs	r1, r3
    92ca:	9000      	str	r0, [sp, #0]
    92cc:	9101      	str	r1, [sp, #4]
    92ce:	e7ae      	b.n	922e <__udivmoddi4+0x82>
    92d0:	4642      	mov	r2, r8
    92d2:	2320      	movs	r3, #32
    92d4:	1a9b      	subs	r3, r3, r2
    92d6:	4652      	mov	r2, sl
    92d8:	40da      	lsrs	r2, r3
    92da:	4641      	mov	r1, r8
    92dc:	0013      	movs	r3, r2
    92de:	464a      	mov	r2, r9
    92e0:	408a      	lsls	r2, r1
    92e2:	0017      	movs	r7, r2
    92e4:	431f      	orrs	r7, r3
    92e6:	e782      	b.n	91ee <__udivmoddi4+0x42>
    92e8:	4642      	mov	r2, r8
    92ea:	2320      	movs	r3, #32
    92ec:	1a9b      	subs	r3, r3, r2
    92ee:	002a      	movs	r2, r5
    92f0:	4646      	mov	r6, r8
    92f2:	409a      	lsls	r2, r3
    92f4:	0023      	movs	r3, r4
    92f6:	40f3      	lsrs	r3, r6
    92f8:	4313      	orrs	r3, r2
    92fa:	e7d5      	b.n	92a8 <__udivmoddi4+0xfc>
    92fc:	4642      	mov	r2, r8
    92fe:	2320      	movs	r3, #32
    9300:	2100      	movs	r1, #0
    9302:	1a9b      	subs	r3, r3, r2
    9304:	2200      	movs	r2, #0
    9306:	9100      	str	r1, [sp, #0]
    9308:	9201      	str	r2, [sp, #4]
    930a:	2201      	movs	r2, #1
    930c:	40da      	lsrs	r2, r3
    930e:	9201      	str	r2, [sp, #4]
    9310:	e782      	b.n	9218 <__udivmoddi4+0x6c>
    9312:	4642      	mov	r2, r8
    9314:	2320      	movs	r3, #32
    9316:	0026      	movs	r6, r4
    9318:	1a9b      	subs	r3, r3, r2
    931a:	40de      	lsrs	r6, r3
    931c:	002f      	movs	r7, r5
    931e:	46b4      	mov	ip, r6
    9320:	4097      	lsls	r7, r2
    9322:	4666      	mov	r6, ip
    9324:	003b      	movs	r3, r7
    9326:	4333      	orrs	r3, r6
    9328:	e7c9      	b.n	92be <__udivmoddi4+0x112>
    932a:	46c0      	nop			; (mov r8, r8)

0000932c <__aeabi_fadd>:
    932c:	b5f0      	push	{r4, r5, r6, r7, lr}
    932e:	46c6      	mov	lr, r8
    9330:	024e      	lsls	r6, r1, #9
    9332:	0247      	lsls	r7, r0, #9
    9334:	0a76      	lsrs	r6, r6, #9
    9336:	0a7b      	lsrs	r3, r7, #9
    9338:	0044      	lsls	r4, r0, #1
    933a:	0fc5      	lsrs	r5, r0, #31
    933c:	00f7      	lsls	r7, r6, #3
    933e:	0048      	lsls	r0, r1, #1
    9340:	4698      	mov	r8, r3
    9342:	b500      	push	{lr}
    9344:	0e24      	lsrs	r4, r4, #24
    9346:	002a      	movs	r2, r5
    9348:	00db      	lsls	r3, r3, #3
    934a:	0e00      	lsrs	r0, r0, #24
    934c:	0fc9      	lsrs	r1, r1, #31
    934e:	46bc      	mov	ip, r7
    9350:	428d      	cmp	r5, r1
    9352:	d067      	beq.n	9424 <__aeabi_fadd+0xf8>
    9354:	1a22      	subs	r2, r4, r0
    9356:	2a00      	cmp	r2, #0
    9358:	dc00      	bgt.n	935c <__aeabi_fadd+0x30>
    935a:	e0a5      	b.n	94a8 <__aeabi_fadd+0x17c>
    935c:	2800      	cmp	r0, #0
    935e:	d13a      	bne.n	93d6 <__aeabi_fadd+0xaa>
    9360:	2f00      	cmp	r7, #0
    9362:	d100      	bne.n	9366 <__aeabi_fadd+0x3a>
    9364:	e093      	b.n	948e <__aeabi_fadd+0x162>
    9366:	1e51      	subs	r1, r2, #1
    9368:	2900      	cmp	r1, #0
    936a:	d000      	beq.n	936e <__aeabi_fadd+0x42>
    936c:	e0bc      	b.n	94e8 <__aeabi_fadd+0x1bc>
    936e:	2401      	movs	r4, #1
    9370:	1bdb      	subs	r3, r3, r7
    9372:	015a      	lsls	r2, r3, #5
    9374:	d546      	bpl.n	9404 <__aeabi_fadd+0xd8>
    9376:	019b      	lsls	r3, r3, #6
    9378:	099e      	lsrs	r6, r3, #6
    937a:	0030      	movs	r0, r6
    937c:	f002 fd4e 	bl	be1c <__clzsi2>
    9380:	3805      	subs	r0, #5
    9382:	4086      	lsls	r6, r0
    9384:	4284      	cmp	r4, r0
    9386:	dd00      	ble.n	938a <__aeabi_fadd+0x5e>
    9388:	e09d      	b.n	94c6 <__aeabi_fadd+0x19a>
    938a:	1b04      	subs	r4, r0, r4
    938c:	0032      	movs	r2, r6
    938e:	2020      	movs	r0, #32
    9390:	3401      	adds	r4, #1
    9392:	40e2      	lsrs	r2, r4
    9394:	1b04      	subs	r4, r0, r4
    9396:	40a6      	lsls	r6, r4
    9398:	0033      	movs	r3, r6
    939a:	1e5e      	subs	r6, r3, #1
    939c:	41b3      	sbcs	r3, r6
    939e:	2400      	movs	r4, #0
    93a0:	4313      	orrs	r3, r2
    93a2:	075a      	lsls	r2, r3, #29
    93a4:	d004      	beq.n	93b0 <__aeabi_fadd+0x84>
    93a6:	220f      	movs	r2, #15
    93a8:	401a      	ands	r2, r3
    93aa:	2a04      	cmp	r2, #4
    93ac:	d000      	beq.n	93b0 <__aeabi_fadd+0x84>
    93ae:	3304      	adds	r3, #4
    93b0:	015a      	lsls	r2, r3, #5
    93b2:	d529      	bpl.n	9408 <__aeabi_fadd+0xdc>
    93b4:	3401      	adds	r4, #1
    93b6:	2cff      	cmp	r4, #255	; 0xff
    93b8:	d100      	bne.n	93bc <__aeabi_fadd+0x90>
    93ba:	e081      	b.n	94c0 <__aeabi_fadd+0x194>
    93bc:	002a      	movs	r2, r5
    93be:	019b      	lsls	r3, r3, #6
    93c0:	0a5b      	lsrs	r3, r3, #9
    93c2:	b2e4      	uxtb	r4, r4
    93c4:	025b      	lsls	r3, r3, #9
    93c6:	05e4      	lsls	r4, r4, #23
    93c8:	0a58      	lsrs	r0, r3, #9
    93ca:	07d2      	lsls	r2, r2, #31
    93cc:	4320      	orrs	r0, r4
    93ce:	4310      	orrs	r0, r2
    93d0:	bc04      	pop	{r2}
    93d2:	4690      	mov	r8, r2
    93d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93d6:	2cff      	cmp	r4, #255	; 0xff
    93d8:	d0e3      	beq.n	93a2 <__aeabi_fadd+0x76>
    93da:	2180      	movs	r1, #128	; 0x80
    93dc:	0038      	movs	r0, r7
    93de:	04c9      	lsls	r1, r1, #19
    93e0:	4308      	orrs	r0, r1
    93e2:	4684      	mov	ip, r0
    93e4:	2a1b      	cmp	r2, #27
    93e6:	dd00      	ble.n	93ea <__aeabi_fadd+0xbe>
    93e8:	e082      	b.n	94f0 <__aeabi_fadd+0x1c4>
    93ea:	2020      	movs	r0, #32
    93ec:	4661      	mov	r1, ip
    93ee:	40d1      	lsrs	r1, r2
    93f0:	1a82      	subs	r2, r0, r2
    93f2:	4660      	mov	r0, ip
    93f4:	4090      	lsls	r0, r2
    93f6:	0002      	movs	r2, r0
    93f8:	1e50      	subs	r0, r2, #1
    93fa:	4182      	sbcs	r2, r0
    93fc:	430a      	orrs	r2, r1
    93fe:	1a9b      	subs	r3, r3, r2
    9400:	015a      	lsls	r2, r3, #5
    9402:	d4b8      	bmi.n	9376 <__aeabi_fadd+0x4a>
    9404:	075a      	lsls	r2, r3, #29
    9406:	d1ce      	bne.n	93a6 <__aeabi_fadd+0x7a>
    9408:	08de      	lsrs	r6, r3, #3
    940a:	002a      	movs	r2, r5
    940c:	2cff      	cmp	r4, #255	; 0xff
    940e:	d13a      	bne.n	9486 <__aeabi_fadd+0x15a>
    9410:	2e00      	cmp	r6, #0
    9412:	d100      	bne.n	9416 <__aeabi_fadd+0xea>
    9414:	e0ae      	b.n	9574 <__aeabi_fadd+0x248>
    9416:	2380      	movs	r3, #128	; 0x80
    9418:	03db      	lsls	r3, r3, #15
    941a:	4333      	orrs	r3, r6
    941c:	025b      	lsls	r3, r3, #9
    941e:	0a5b      	lsrs	r3, r3, #9
    9420:	24ff      	movs	r4, #255	; 0xff
    9422:	e7cf      	b.n	93c4 <__aeabi_fadd+0x98>
    9424:	1a21      	subs	r1, r4, r0
    9426:	2900      	cmp	r1, #0
    9428:	dd52      	ble.n	94d0 <__aeabi_fadd+0x1a4>
    942a:	2800      	cmp	r0, #0
    942c:	d031      	beq.n	9492 <__aeabi_fadd+0x166>
    942e:	2cff      	cmp	r4, #255	; 0xff
    9430:	d0b7      	beq.n	93a2 <__aeabi_fadd+0x76>
    9432:	2080      	movs	r0, #128	; 0x80
    9434:	003e      	movs	r6, r7
    9436:	04c0      	lsls	r0, r0, #19
    9438:	4306      	orrs	r6, r0
    943a:	46b4      	mov	ip, r6
    943c:	291b      	cmp	r1, #27
    943e:	dd00      	ble.n	9442 <__aeabi_fadd+0x116>
    9440:	e0aa      	b.n	9598 <__aeabi_fadd+0x26c>
    9442:	2620      	movs	r6, #32
    9444:	4660      	mov	r0, ip
    9446:	40c8      	lsrs	r0, r1
    9448:	1a71      	subs	r1, r6, r1
    944a:	4666      	mov	r6, ip
    944c:	408e      	lsls	r6, r1
    944e:	0031      	movs	r1, r6
    9450:	1e4e      	subs	r6, r1, #1
    9452:	41b1      	sbcs	r1, r6
    9454:	4301      	orrs	r1, r0
    9456:	185b      	adds	r3, r3, r1
    9458:	0159      	lsls	r1, r3, #5
    945a:	d5d3      	bpl.n	9404 <__aeabi_fadd+0xd8>
    945c:	3401      	adds	r4, #1
    945e:	2cff      	cmp	r4, #255	; 0xff
    9460:	d100      	bne.n	9464 <__aeabi_fadd+0x138>
    9462:	e087      	b.n	9574 <__aeabi_fadd+0x248>
    9464:	2201      	movs	r2, #1
    9466:	4978      	ldr	r1, [pc, #480]	; (9648 <__aeabi_fadd+0x31c>)
    9468:	401a      	ands	r2, r3
    946a:	085b      	lsrs	r3, r3, #1
    946c:	400b      	ands	r3, r1
    946e:	4313      	orrs	r3, r2
    9470:	e797      	b.n	93a2 <__aeabi_fadd+0x76>
    9472:	2c00      	cmp	r4, #0
    9474:	d000      	beq.n	9478 <__aeabi_fadd+0x14c>
    9476:	e0a7      	b.n	95c8 <__aeabi_fadd+0x29c>
    9478:	2b00      	cmp	r3, #0
    947a:	d000      	beq.n	947e <__aeabi_fadd+0x152>
    947c:	e0b6      	b.n	95ec <__aeabi_fadd+0x2c0>
    947e:	1e3b      	subs	r3, r7, #0
    9480:	d162      	bne.n	9548 <__aeabi_fadd+0x21c>
    9482:	2600      	movs	r6, #0
    9484:	2200      	movs	r2, #0
    9486:	0273      	lsls	r3, r6, #9
    9488:	0a5b      	lsrs	r3, r3, #9
    948a:	b2e4      	uxtb	r4, r4
    948c:	e79a      	b.n	93c4 <__aeabi_fadd+0x98>
    948e:	0014      	movs	r4, r2
    9490:	e787      	b.n	93a2 <__aeabi_fadd+0x76>
    9492:	2f00      	cmp	r7, #0
    9494:	d04d      	beq.n	9532 <__aeabi_fadd+0x206>
    9496:	1e48      	subs	r0, r1, #1
    9498:	2800      	cmp	r0, #0
    949a:	d157      	bne.n	954c <__aeabi_fadd+0x220>
    949c:	4463      	add	r3, ip
    949e:	2401      	movs	r4, #1
    94a0:	015a      	lsls	r2, r3, #5
    94a2:	d5af      	bpl.n	9404 <__aeabi_fadd+0xd8>
    94a4:	2402      	movs	r4, #2
    94a6:	e7dd      	b.n	9464 <__aeabi_fadd+0x138>
    94a8:	2a00      	cmp	r2, #0
    94aa:	d124      	bne.n	94f6 <__aeabi_fadd+0x1ca>
    94ac:	1c62      	adds	r2, r4, #1
    94ae:	b2d2      	uxtb	r2, r2
    94b0:	2a01      	cmp	r2, #1
    94b2:	ddde      	ble.n	9472 <__aeabi_fadd+0x146>
    94b4:	1bde      	subs	r6, r3, r7
    94b6:	0172      	lsls	r2, r6, #5
    94b8:	d535      	bpl.n	9526 <__aeabi_fadd+0x1fa>
    94ba:	1afe      	subs	r6, r7, r3
    94bc:	000d      	movs	r5, r1
    94be:	e75c      	b.n	937a <__aeabi_fadd+0x4e>
    94c0:	002a      	movs	r2, r5
    94c2:	2300      	movs	r3, #0
    94c4:	e77e      	b.n	93c4 <__aeabi_fadd+0x98>
    94c6:	0033      	movs	r3, r6
    94c8:	4a60      	ldr	r2, [pc, #384]	; (964c <__aeabi_fadd+0x320>)
    94ca:	1a24      	subs	r4, r4, r0
    94cc:	4013      	ands	r3, r2
    94ce:	e768      	b.n	93a2 <__aeabi_fadd+0x76>
    94d0:	2900      	cmp	r1, #0
    94d2:	d163      	bne.n	959c <__aeabi_fadd+0x270>
    94d4:	1c61      	adds	r1, r4, #1
    94d6:	b2c8      	uxtb	r0, r1
    94d8:	2801      	cmp	r0, #1
    94da:	dd4e      	ble.n	957a <__aeabi_fadd+0x24e>
    94dc:	29ff      	cmp	r1, #255	; 0xff
    94de:	d049      	beq.n	9574 <__aeabi_fadd+0x248>
    94e0:	4463      	add	r3, ip
    94e2:	085b      	lsrs	r3, r3, #1
    94e4:	000c      	movs	r4, r1
    94e6:	e75c      	b.n	93a2 <__aeabi_fadd+0x76>
    94e8:	2aff      	cmp	r2, #255	; 0xff
    94ea:	d041      	beq.n	9570 <__aeabi_fadd+0x244>
    94ec:	000a      	movs	r2, r1
    94ee:	e779      	b.n	93e4 <__aeabi_fadd+0xb8>
    94f0:	2201      	movs	r2, #1
    94f2:	1a9b      	subs	r3, r3, r2
    94f4:	e784      	b.n	9400 <__aeabi_fadd+0xd4>
    94f6:	2c00      	cmp	r4, #0
    94f8:	d01d      	beq.n	9536 <__aeabi_fadd+0x20a>
    94fa:	28ff      	cmp	r0, #255	; 0xff
    94fc:	d022      	beq.n	9544 <__aeabi_fadd+0x218>
    94fe:	2480      	movs	r4, #128	; 0x80
    9500:	04e4      	lsls	r4, r4, #19
    9502:	4252      	negs	r2, r2
    9504:	4323      	orrs	r3, r4
    9506:	2a1b      	cmp	r2, #27
    9508:	dd00      	ble.n	950c <__aeabi_fadd+0x1e0>
    950a:	e08a      	b.n	9622 <__aeabi_fadd+0x2f6>
    950c:	001c      	movs	r4, r3
    950e:	2520      	movs	r5, #32
    9510:	40d4      	lsrs	r4, r2
    9512:	1aaa      	subs	r2, r5, r2
    9514:	4093      	lsls	r3, r2
    9516:	1e5a      	subs	r2, r3, #1
    9518:	4193      	sbcs	r3, r2
    951a:	4323      	orrs	r3, r4
    951c:	4662      	mov	r2, ip
    951e:	0004      	movs	r4, r0
    9520:	1ad3      	subs	r3, r2, r3
    9522:	000d      	movs	r5, r1
    9524:	e725      	b.n	9372 <__aeabi_fadd+0x46>
    9526:	2e00      	cmp	r6, #0
    9528:	d000      	beq.n	952c <__aeabi_fadd+0x200>
    952a:	e726      	b.n	937a <__aeabi_fadd+0x4e>
    952c:	2200      	movs	r2, #0
    952e:	2400      	movs	r4, #0
    9530:	e7a9      	b.n	9486 <__aeabi_fadd+0x15a>
    9532:	000c      	movs	r4, r1
    9534:	e735      	b.n	93a2 <__aeabi_fadd+0x76>
    9536:	2b00      	cmp	r3, #0
    9538:	d04d      	beq.n	95d6 <__aeabi_fadd+0x2aa>
    953a:	43d2      	mvns	r2, r2
    953c:	2a00      	cmp	r2, #0
    953e:	d0ed      	beq.n	951c <__aeabi_fadd+0x1f0>
    9540:	28ff      	cmp	r0, #255	; 0xff
    9542:	d1e0      	bne.n	9506 <__aeabi_fadd+0x1da>
    9544:	4663      	mov	r3, ip
    9546:	24ff      	movs	r4, #255	; 0xff
    9548:	000d      	movs	r5, r1
    954a:	e72a      	b.n	93a2 <__aeabi_fadd+0x76>
    954c:	29ff      	cmp	r1, #255	; 0xff
    954e:	d00f      	beq.n	9570 <__aeabi_fadd+0x244>
    9550:	0001      	movs	r1, r0
    9552:	e773      	b.n	943c <__aeabi_fadd+0x110>
    9554:	2b00      	cmp	r3, #0
    9556:	d061      	beq.n	961c <__aeabi_fadd+0x2f0>
    9558:	24ff      	movs	r4, #255	; 0xff
    955a:	2f00      	cmp	r7, #0
    955c:	d100      	bne.n	9560 <__aeabi_fadd+0x234>
    955e:	e720      	b.n	93a2 <__aeabi_fadd+0x76>
    9560:	2280      	movs	r2, #128	; 0x80
    9562:	4641      	mov	r1, r8
    9564:	03d2      	lsls	r2, r2, #15
    9566:	4211      	tst	r1, r2
    9568:	d002      	beq.n	9570 <__aeabi_fadd+0x244>
    956a:	4216      	tst	r6, r2
    956c:	d100      	bne.n	9570 <__aeabi_fadd+0x244>
    956e:	003b      	movs	r3, r7
    9570:	24ff      	movs	r4, #255	; 0xff
    9572:	e716      	b.n	93a2 <__aeabi_fadd+0x76>
    9574:	24ff      	movs	r4, #255	; 0xff
    9576:	2300      	movs	r3, #0
    9578:	e724      	b.n	93c4 <__aeabi_fadd+0x98>
    957a:	2c00      	cmp	r4, #0
    957c:	d1ea      	bne.n	9554 <__aeabi_fadd+0x228>
    957e:	2b00      	cmp	r3, #0
    9580:	d058      	beq.n	9634 <__aeabi_fadd+0x308>
    9582:	2f00      	cmp	r7, #0
    9584:	d100      	bne.n	9588 <__aeabi_fadd+0x25c>
    9586:	e70c      	b.n	93a2 <__aeabi_fadd+0x76>
    9588:	4463      	add	r3, ip
    958a:	015a      	lsls	r2, r3, #5
    958c:	d400      	bmi.n	9590 <__aeabi_fadd+0x264>
    958e:	e739      	b.n	9404 <__aeabi_fadd+0xd8>
    9590:	4a2e      	ldr	r2, [pc, #184]	; (964c <__aeabi_fadd+0x320>)
    9592:	000c      	movs	r4, r1
    9594:	4013      	ands	r3, r2
    9596:	e704      	b.n	93a2 <__aeabi_fadd+0x76>
    9598:	2101      	movs	r1, #1
    959a:	e75c      	b.n	9456 <__aeabi_fadd+0x12a>
    959c:	2c00      	cmp	r4, #0
    959e:	d11e      	bne.n	95de <__aeabi_fadd+0x2b2>
    95a0:	2b00      	cmp	r3, #0
    95a2:	d040      	beq.n	9626 <__aeabi_fadd+0x2fa>
    95a4:	43c9      	mvns	r1, r1
    95a6:	2900      	cmp	r1, #0
    95a8:	d00b      	beq.n	95c2 <__aeabi_fadd+0x296>
    95aa:	28ff      	cmp	r0, #255	; 0xff
    95ac:	d036      	beq.n	961c <__aeabi_fadd+0x2f0>
    95ae:	291b      	cmp	r1, #27
    95b0:	dc47      	bgt.n	9642 <__aeabi_fadd+0x316>
    95b2:	001c      	movs	r4, r3
    95b4:	2620      	movs	r6, #32
    95b6:	40cc      	lsrs	r4, r1
    95b8:	1a71      	subs	r1, r6, r1
    95ba:	408b      	lsls	r3, r1
    95bc:	1e59      	subs	r1, r3, #1
    95be:	418b      	sbcs	r3, r1
    95c0:	4323      	orrs	r3, r4
    95c2:	4463      	add	r3, ip
    95c4:	0004      	movs	r4, r0
    95c6:	e747      	b.n	9458 <__aeabi_fadd+0x12c>
    95c8:	2b00      	cmp	r3, #0
    95ca:	d118      	bne.n	95fe <__aeabi_fadd+0x2d2>
    95cc:	1e3b      	subs	r3, r7, #0
    95ce:	d02d      	beq.n	962c <__aeabi_fadd+0x300>
    95d0:	000d      	movs	r5, r1
    95d2:	24ff      	movs	r4, #255	; 0xff
    95d4:	e6e5      	b.n	93a2 <__aeabi_fadd+0x76>
    95d6:	003b      	movs	r3, r7
    95d8:	0004      	movs	r4, r0
    95da:	000d      	movs	r5, r1
    95dc:	e6e1      	b.n	93a2 <__aeabi_fadd+0x76>
    95de:	28ff      	cmp	r0, #255	; 0xff
    95e0:	d01c      	beq.n	961c <__aeabi_fadd+0x2f0>
    95e2:	2480      	movs	r4, #128	; 0x80
    95e4:	04e4      	lsls	r4, r4, #19
    95e6:	4249      	negs	r1, r1
    95e8:	4323      	orrs	r3, r4
    95ea:	e7e0      	b.n	95ae <__aeabi_fadd+0x282>
    95ec:	2f00      	cmp	r7, #0
    95ee:	d100      	bne.n	95f2 <__aeabi_fadd+0x2c6>
    95f0:	e6d7      	b.n	93a2 <__aeabi_fadd+0x76>
    95f2:	1bde      	subs	r6, r3, r7
    95f4:	0172      	lsls	r2, r6, #5
    95f6:	d51f      	bpl.n	9638 <__aeabi_fadd+0x30c>
    95f8:	1afb      	subs	r3, r7, r3
    95fa:	000d      	movs	r5, r1
    95fc:	e6d1      	b.n	93a2 <__aeabi_fadd+0x76>
    95fe:	24ff      	movs	r4, #255	; 0xff
    9600:	2f00      	cmp	r7, #0
    9602:	d100      	bne.n	9606 <__aeabi_fadd+0x2da>
    9604:	e6cd      	b.n	93a2 <__aeabi_fadd+0x76>
    9606:	2280      	movs	r2, #128	; 0x80
    9608:	4640      	mov	r0, r8
    960a:	03d2      	lsls	r2, r2, #15
    960c:	4210      	tst	r0, r2
    960e:	d0af      	beq.n	9570 <__aeabi_fadd+0x244>
    9610:	4216      	tst	r6, r2
    9612:	d1ad      	bne.n	9570 <__aeabi_fadd+0x244>
    9614:	003b      	movs	r3, r7
    9616:	000d      	movs	r5, r1
    9618:	24ff      	movs	r4, #255	; 0xff
    961a:	e6c2      	b.n	93a2 <__aeabi_fadd+0x76>
    961c:	4663      	mov	r3, ip
    961e:	24ff      	movs	r4, #255	; 0xff
    9620:	e6bf      	b.n	93a2 <__aeabi_fadd+0x76>
    9622:	2301      	movs	r3, #1
    9624:	e77a      	b.n	951c <__aeabi_fadd+0x1f0>
    9626:	003b      	movs	r3, r7
    9628:	0004      	movs	r4, r0
    962a:	e6ba      	b.n	93a2 <__aeabi_fadd+0x76>
    962c:	2680      	movs	r6, #128	; 0x80
    962e:	2200      	movs	r2, #0
    9630:	03f6      	lsls	r6, r6, #15
    9632:	e6f0      	b.n	9416 <__aeabi_fadd+0xea>
    9634:	003b      	movs	r3, r7
    9636:	e6b4      	b.n	93a2 <__aeabi_fadd+0x76>
    9638:	1e33      	subs	r3, r6, #0
    963a:	d000      	beq.n	963e <__aeabi_fadd+0x312>
    963c:	e6e2      	b.n	9404 <__aeabi_fadd+0xd8>
    963e:	2200      	movs	r2, #0
    9640:	e721      	b.n	9486 <__aeabi_fadd+0x15a>
    9642:	2301      	movs	r3, #1
    9644:	e7bd      	b.n	95c2 <__aeabi_fadd+0x296>
    9646:	46c0      	nop			; (mov r8, r8)
    9648:	7dffffff 	.word	0x7dffffff
    964c:	fbffffff 	.word	0xfbffffff

00009650 <__aeabi_fdiv>:
    9650:	b5f0      	push	{r4, r5, r6, r7, lr}
    9652:	4657      	mov	r7, sl
    9654:	464e      	mov	r6, r9
    9656:	46de      	mov	lr, fp
    9658:	4645      	mov	r5, r8
    965a:	b5e0      	push	{r5, r6, r7, lr}
    965c:	0244      	lsls	r4, r0, #9
    965e:	0043      	lsls	r3, r0, #1
    9660:	0fc6      	lsrs	r6, r0, #31
    9662:	b083      	sub	sp, #12
    9664:	1c0f      	adds	r7, r1, #0
    9666:	0a64      	lsrs	r4, r4, #9
    9668:	0e1b      	lsrs	r3, r3, #24
    966a:	46b2      	mov	sl, r6
    966c:	d053      	beq.n	9716 <__aeabi_fdiv+0xc6>
    966e:	2bff      	cmp	r3, #255	; 0xff
    9670:	d027      	beq.n	96c2 <__aeabi_fdiv+0x72>
    9672:	2280      	movs	r2, #128	; 0x80
    9674:	00e4      	lsls	r4, r4, #3
    9676:	04d2      	lsls	r2, r2, #19
    9678:	4314      	orrs	r4, r2
    967a:	227f      	movs	r2, #127	; 0x7f
    967c:	4252      	negs	r2, r2
    967e:	4690      	mov	r8, r2
    9680:	4498      	add	r8, r3
    9682:	2300      	movs	r3, #0
    9684:	4699      	mov	r9, r3
    9686:	469b      	mov	fp, r3
    9688:	027d      	lsls	r5, r7, #9
    968a:	0078      	lsls	r0, r7, #1
    968c:	0ffb      	lsrs	r3, r7, #31
    968e:	0a6d      	lsrs	r5, r5, #9
    9690:	0e00      	lsrs	r0, r0, #24
    9692:	9300      	str	r3, [sp, #0]
    9694:	d024      	beq.n	96e0 <__aeabi_fdiv+0x90>
    9696:	28ff      	cmp	r0, #255	; 0xff
    9698:	d046      	beq.n	9728 <__aeabi_fdiv+0xd8>
    969a:	2380      	movs	r3, #128	; 0x80
    969c:	2100      	movs	r1, #0
    969e:	00ed      	lsls	r5, r5, #3
    96a0:	04db      	lsls	r3, r3, #19
    96a2:	431d      	orrs	r5, r3
    96a4:	387f      	subs	r0, #127	; 0x7f
    96a6:	4647      	mov	r7, r8
    96a8:	1a38      	subs	r0, r7, r0
    96aa:	464f      	mov	r7, r9
    96ac:	430f      	orrs	r7, r1
    96ae:	00bf      	lsls	r7, r7, #2
    96b0:	46b9      	mov	r9, r7
    96b2:	0033      	movs	r3, r6
    96b4:	9a00      	ldr	r2, [sp, #0]
    96b6:	4f87      	ldr	r7, [pc, #540]	; (98d4 <__aeabi_fdiv+0x284>)
    96b8:	4053      	eors	r3, r2
    96ba:	464a      	mov	r2, r9
    96bc:	58ba      	ldr	r2, [r7, r2]
    96be:	9301      	str	r3, [sp, #4]
    96c0:	4697      	mov	pc, r2
    96c2:	2c00      	cmp	r4, #0
    96c4:	d14e      	bne.n	9764 <__aeabi_fdiv+0x114>
    96c6:	2308      	movs	r3, #8
    96c8:	4699      	mov	r9, r3
    96ca:	33f7      	adds	r3, #247	; 0xf7
    96cc:	4698      	mov	r8, r3
    96ce:	3bfd      	subs	r3, #253	; 0xfd
    96d0:	469b      	mov	fp, r3
    96d2:	027d      	lsls	r5, r7, #9
    96d4:	0078      	lsls	r0, r7, #1
    96d6:	0ffb      	lsrs	r3, r7, #31
    96d8:	0a6d      	lsrs	r5, r5, #9
    96da:	0e00      	lsrs	r0, r0, #24
    96dc:	9300      	str	r3, [sp, #0]
    96de:	d1da      	bne.n	9696 <__aeabi_fdiv+0x46>
    96e0:	2d00      	cmp	r5, #0
    96e2:	d126      	bne.n	9732 <__aeabi_fdiv+0xe2>
    96e4:	2000      	movs	r0, #0
    96e6:	2101      	movs	r1, #1
    96e8:	0033      	movs	r3, r6
    96ea:	9a00      	ldr	r2, [sp, #0]
    96ec:	4f7a      	ldr	r7, [pc, #488]	; (98d8 <__aeabi_fdiv+0x288>)
    96ee:	4053      	eors	r3, r2
    96f0:	4642      	mov	r2, r8
    96f2:	1a10      	subs	r0, r2, r0
    96f4:	464a      	mov	r2, r9
    96f6:	430a      	orrs	r2, r1
    96f8:	0092      	lsls	r2, r2, #2
    96fa:	58ba      	ldr	r2, [r7, r2]
    96fc:	001d      	movs	r5, r3
    96fe:	4697      	mov	pc, r2
    9700:	9b00      	ldr	r3, [sp, #0]
    9702:	002c      	movs	r4, r5
    9704:	469a      	mov	sl, r3
    9706:	468b      	mov	fp, r1
    9708:	465b      	mov	r3, fp
    970a:	2b02      	cmp	r3, #2
    970c:	d131      	bne.n	9772 <__aeabi_fdiv+0x122>
    970e:	4653      	mov	r3, sl
    9710:	21ff      	movs	r1, #255	; 0xff
    9712:	2400      	movs	r4, #0
    9714:	e038      	b.n	9788 <__aeabi_fdiv+0x138>
    9716:	2c00      	cmp	r4, #0
    9718:	d117      	bne.n	974a <__aeabi_fdiv+0xfa>
    971a:	2304      	movs	r3, #4
    971c:	4699      	mov	r9, r3
    971e:	2300      	movs	r3, #0
    9720:	4698      	mov	r8, r3
    9722:	3301      	adds	r3, #1
    9724:	469b      	mov	fp, r3
    9726:	e7af      	b.n	9688 <__aeabi_fdiv+0x38>
    9728:	20ff      	movs	r0, #255	; 0xff
    972a:	2d00      	cmp	r5, #0
    972c:	d10b      	bne.n	9746 <__aeabi_fdiv+0xf6>
    972e:	2102      	movs	r1, #2
    9730:	e7da      	b.n	96e8 <__aeabi_fdiv+0x98>
    9732:	0028      	movs	r0, r5
    9734:	f002 fb72 	bl	be1c <__clzsi2>
    9738:	1f43      	subs	r3, r0, #5
    973a:	409d      	lsls	r5, r3
    973c:	2376      	movs	r3, #118	; 0x76
    973e:	425b      	negs	r3, r3
    9740:	1a18      	subs	r0, r3, r0
    9742:	2100      	movs	r1, #0
    9744:	e7af      	b.n	96a6 <__aeabi_fdiv+0x56>
    9746:	2103      	movs	r1, #3
    9748:	e7ad      	b.n	96a6 <__aeabi_fdiv+0x56>
    974a:	0020      	movs	r0, r4
    974c:	f002 fb66 	bl	be1c <__clzsi2>
    9750:	1f43      	subs	r3, r0, #5
    9752:	409c      	lsls	r4, r3
    9754:	2376      	movs	r3, #118	; 0x76
    9756:	425b      	negs	r3, r3
    9758:	1a1b      	subs	r3, r3, r0
    975a:	4698      	mov	r8, r3
    975c:	2300      	movs	r3, #0
    975e:	4699      	mov	r9, r3
    9760:	469b      	mov	fp, r3
    9762:	e791      	b.n	9688 <__aeabi_fdiv+0x38>
    9764:	230c      	movs	r3, #12
    9766:	4699      	mov	r9, r3
    9768:	33f3      	adds	r3, #243	; 0xf3
    976a:	4698      	mov	r8, r3
    976c:	3bfc      	subs	r3, #252	; 0xfc
    976e:	469b      	mov	fp, r3
    9770:	e78a      	b.n	9688 <__aeabi_fdiv+0x38>
    9772:	2b03      	cmp	r3, #3
    9774:	d100      	bne.n	9778 <__aeabi_fdiv+0x128>
    9776:	e0a5      	b.n	98c4 <__aeabi_fdiv+0x274>
    9778:	4655      	mov	r5, sl
    977a:	2b01      	cmp	r3, #1
    977c:	d000      	beq.n	9780 <__aeabi_fdiv+0x130>
    977e:	e081      	b.n	9884 <__aeabi_fdiv+0x234>
    9780:	2301      	movs	r3, #1
    9782:	2100      	movs	r1, #0
    9784:	2400      	movs	r4, #0
    9786:	402b      	ands	r3, r5
    9788:	0264      	lsls	r4, r4, #9
    978a:	05c9      	lsls	r1, r1, #23
    978c:	0a60      	lsrs	r0, r4, #9
    978e:	07db      	lsls	r3, r3, #31
    9790:	4308      	orrs	r0, r1
    9792:	4318      	orrs	r0, r3
    9794:	b003      	add	sp, #12
    9796:	bc3c      	pop	{r2, r3, r4, r5}
    9798:	4690      	mov	r8, r2
    979a:	4699      	mov	r9, r3
    979c:	46a2      	mov	sl, r4
    979e:	46ab      	mov	fp, r5
    97a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97a2:	2480      	movs	r4, #128	; 0x80
    97a4:	2300      	movs	r3, #0
    97a6:	03e4      	lsls	r4, r4, #15
    97a8:	21ff      	movs	r1, #255	; 0xff
    97aa:	e7ed      	b.n	9788 <__aeabi_fdiv+0x138>
    97ac:	21ff      	movs	r1, #255	; 0xff
    97ae:	2400      	movs	r4, #0
    97b0:	e7ea      	b.n	9788 <__aeabi_fdiv+0x138>
    97b2:	2301      	movs	r3, #1
    97b4:	1a59      	subs	r1, r3, r1
    97b6:	291b      	cmp	r1, #27
    97b8:	dd66      	ble.n	9888 <__aeabi_fdiv+0x238>
    97ba:	9a01      	ldr	r2, [sp, #4]
    97bc:	4013      	ands	r3, r2
    97be:	2100      	movs	r1, #0
    97c0:	2400      	movs	r4, #0
    97c2:	e7e1      	b.n	9788 <__aeabi_fdiv+0x138>
    97c4:	2380      	movs	r3, #128	; 0x80
    97c6:	03db      	lsls	r3, r3, #15
    97c8:	421c      	tst	r4, r3
    97ca:	d038      	beq.n	983e <__aeabi_fdiv+0x1ee>
    97cc:	421d      	tst	r5, r3
    97ce:	d051      	beq.n	9874 <__aeabi_fdiv+0x224>
    97d0:	431c      	orrs	r4, r3
    97d2:	0264      	lsls	r4, r4, #9
    97d4:	0a64      	lsrs	r4, r4, #9
    97d6:	0033      	movs	r3, r6
    97d8:	21ff      	movs	r1, #255	; 0xff
    97da:	e7d5      	b.n	9788 <__aeabi_fdiv+0x138>
    97dc:	0163      	lsls	r3, r4, #5
    97de:	016c      	lsls	r4, r5, #5
    97e0:	42a3      	cmp	r3, r4
    97e2:	d23b      	bcs.n	985c <__aeabi_fdiv+0x20c>
    97e4:	261b      	movs	r6, #27
    97e6:	2100      	movs	r1, #0
    97e8:	3801      	subs	r0, #1
    97ea:	2501      	movs	r5, #1
    97ec:	001f      	movs	r7, r3
    97ee:	0049      	lsls	r1, r1, #1
    97f0:	005b      	lsls	r3, r3, #1
    97f2:	2f00      	cmp	r7, #0
    97f4:	db01      	blt.n	97fa <__aeabi_fdiv+0x1aa>
    97f6:	429c      	cmp	r4, r3
    97f8:	d801      	bhi.n	97fe <__aeabi_fdiv+0x1ae>
    97fa:	1b1b      	subs	r3, r3, r4
    97fc:	4329      	orrs	r1, r5
    97fe:	3e01      	subs	r6, #1
    9800:	2e00      	cmp	r6, #0
    9802:	d1f3      	bne.n	97ec <__aeabi_fdiv+0x19c>
    9804:	001c      	movs	r4, r3
    9806:	1e63      	subs	r3, r4, #1
    9808:	419c      	sbcs	r4, r3
    980a:	430c      	orrs	r4, r1
    980c:	0001      	movs	r1, r0
    980e:	317f      	adds	r1, #127	; 0x7f
    9810:	2900      	cmp	r1, #0
    9812:	ddce      	ble.n	97b2 <__aeabi_fdiv+0x162>
    9814:	0763      	lsls	r3, r4, #29
    9816:	d004      	beq.n	9822 <__aeabi_fdiv+0x1d2>
    9818:	230f      	movs	r3, #15
    981a:	4023      	ands	r3, r4
    981c:	2b04      	cmp	r3, #4
    981e:	d000      	beq.n	9822 <__aeabi_fdiv+0x1d2>
    9820:	3404      	adds	r4, #4
    9822:	0123      	lsls	r3, r4, #4
    9824:	d503      	bpl.n	982e <__aeabi_fdiv+0x1de>
    9826:	0001      	movs	r1, r0
    9828:	4b2c      	ldr	r3, [pc, #176]	; (98dc <__aeabi_fdiv+0x28c>)
    982a:	3180      	adds	r1, #128	; 0x80
    982c:	401c      	ands	r4, r3
    982e:	29fe      	cmp	r1, #254	; 0xfe
    9830:	dd0d      	ble.n	984e <__aeabi_fdiv+0x1fe>
    9832:	2301      	movs	r3, #1
    9834:	9a01      	ldr	r2, [sp, #4]
    9836:	21ff      	movs	r1, #255	; 0xff
    9838:	4013      	ands	r3, r2
    983a:	2400      	movs	r4, #0
    983c:	e7a4      	b.n	9788 <__aeabi_fdiv+0x138>
    983e:	2380      	movs	r3, #128	; 0x80
    9840:	03db      	lsls	r3, r3, #15
    9842:	431c      	orrs	r4, r3
    9844:	0264      	lsls	r4, r4, #9
    9846:	0a64      	lsrs	r4, r4, #9
    9848:	0033      	movs	r3, r6
    984a:	21ff      	movs	r1, #255	; 0xff
    984c:	e79c      	b.n	9788 <__aeabi_fdiv+0x138>
    984e:	2301      	movs	r3, #1
    9850:	9a01      	ldr	r2, [sp, #4]
    9852:	01a4      	lsls	r4, r4, #6
    9854:	0a64      	lsrs	r4, r4, #9
    9856:	b2c9      	uxtb	r1, r1
    9858:	4013      	ands	r3, r2
    985a:	e795      	b.n	9788 <__aeabi_fdiv+0x138>
    985c:	1b1b      	subs	r3, r3, r4
    985e:	261a      	movs	r6, #26
    9860:	2101      	movs	r1, #1
    9862:	e7c2      	b.n	97ea <__aeabi_fdiv+0x19a>
    9864:	9b00      	ldr	r3, [sp, #0]
    9866:	468b      	mov	fp, r1
    9868:	469a      	mov	sl, r3
    986a:	2400      	movs	r4, #0
    986c:	e74c      	b.n	9708 <__aeabi_fdiv+0xb8>
    986e:	0263      	lsls	r3, r4, #9
    9870:	d5e5      	bpl.n	983e <__aeabi_fdiv+0x1ee>
    9872:	2500      	movs	r5, #0
    9874:	2480      	movs	r4, #128	; 0x80
    9876:	03e4      	lsls	r4, r4, #15
    9878:	432c      	orrs	r4, r5
    987a:	0264      	lsls	r4, r4, #9
    987c:	0a64      	lsrs	r4, r4, #9
    987e:	9b00      	ldr	r3, [sp, #0]
    9880:	21ff      	movs	r1, #255	; 0xff
    9882:	e781      	b.n	9788 <__aeabi_fdiv+0x138>
    9884:	9501      	str	r5, [sp, #4]
    9886:	e7c1      	b.n	980c <__aeabi_fdiv+0x1bc>
    9888:	0023      	movs	r3, r4
    988a:	2020      	movs	r0, #32
    988c:	40cb      	lsrs	r3, r1
    988e:	1a41      	subs	r1, r0, r1
    9890:	408c      	lsls	r4, r1
    9892:	1e61      	subs	r1, r4, #1
    9894:	418c      	sbcs	r4, r1
    9896:	431c      	orrs	r4, r3
    9898:	0763      	lsls	r3, r4, #29
    989a:	d004      	beq.n	98a6 <__aeabi_fdiv+0x256>
    989c:	230f      	movs	r3, #15
    989e:	4023      	ands	r3, r4
    98a0:	2b04      	cmp	r3, #4
    98a2:	d000      	beq.n	98a6 <__aeabi_fdiv+0x256>
    98a4:	3404      	adds	r4, #4
    98a6:	0163      	lsls	r3, r4, #5
    98a8:	d505      	bpl.n	98b6 <__aeabi_fdiv+0x266>
    98aa:	2301      	movs	r3, #1
    98ac:	9a01      	ldr	r2, [sp, #4]
    98ae:	2101      	movs	r1, #1
    98b0:	4013      	ands	r3, r2
    98b2:	2400      	movs	r4, #0
    98b4:	e768      	b.n	9788 <__aeabi_fdiv+0x138>
    98b6:	2301      	movs	r3, #1
    98b8:	9a01      	ldr	r2, [sp, #4]
    98ba:	01a4      	lsls	r4, r4, #6
    98bc:	0a64      	lsrs	r4, r4, #9
    98be:	4013      	ands	r3, r2
    98c0:	2100      	movs	r1, #0
    98c2:	e761      	b.n	9788 <__aeabi_fdiv+0x138>
    98c4:	2380      	movs	r3, #128	; 0x80
    98c6:	03db      	lsls	r3, r3, #15
    98c8:	431c      	orrs	r4, r3
    98ca:	0264      	lsls	r4, r4, #9
    98cc:	0a64      	lsrs	r4, r4, #9
    98ce:	4653      	mov	r3, sl
    98d0:	21ff      	movs	r1, #255	; 0xff
    98d2:	e759      	b.n	9788 <__aeabi_fdiv+0x138>
    98d4:	000111a8 	.word	0x000111a8
    98d8:	000111e8 	.word	0x000111e8
    98dc:	f7ffffff 	.word	0xf7ffffff

000098e0 <__eqsf2>:
    98e0:	b570      	push	{r4, r5, r6, lr}
    98e2:	0042      	lsls	r2, r0, #1
    98e4:	0245      	lsls	r5, r0, #9
    98e6:	024e      	lsls	r6, r1, #9
    98e8:	004c      	lsls	r4, r1, #1
    98ea:	0fc3      	lsrs	r3, r0, #31
    98ec:	0a6d      	lsrs	r5, r5, #9
    98ee:	0e12      	lsrs	r2, r2, #24
    98f0:	0a76      	lsrs	r6, r6, #9
    98f2:	0e24      	lsrs	r4, r4, #24
    98f4:	0fc9      	lsrs	r1, r1, #31
    98f6:	2001      	movs	r0, #1
    98f8:	2aff      	cmp	r2, #255	; 0xff
    98fa:	d006      	beq.n	990a <__eqsf2+0x2a>
    98fc:	2cff      	cmp	r4, #255	; 0xff
    98fe:	d003      	beq.n	9908 <__eqsf2+0x28>
    9900:	42a2      	cmp	r2, r4
    9902:	d101      	bne.n	9908 <__eqsf2+0x28>
    9904:	42b5      	cmp	r5, r6
    9906:	d006      	beq.n	9916 <__eqsf2+0x36>
    9908:	bd70      	pop	{r4, r5, r6, pc}
    990a:	2d00      	cmp	r5, #0
    990c:	d1fc      	bne.n	9908 <__eqsf2+0x28>
    990e:	2cff      	cmp	r4, #255	; 0xff
    9910:	d1fa      	bne.n	9908 <__eqsf2+0x28>
    9912:	2e00      	cmp	r6, #0
    9914:	d1f8      	bne.n	9908 <__eqsf2+0x28>
    9916:	428b      	cmp	r3, r1
    9918:	d006      	beq.n	9928 <__eqsf2+0x48>
    991a:	2001      	movs	r0, #1
    991c:	2a00      	cmp	r2, #0
    991e:	d1f3      	bne.n	9908 <__eqsf2+0x28>
    9920:	0028      	movs	r0, r5
    9922:	1e45      	subs	r5, r0, #1
    9924:	41a8      	sbcs	r0, r5
    9926:	e7ef      	b.n	9908 <__eqsf2+0x28>
    9928:	2000      	movs	r0, #0
    992a:	e7ed      	b.n	9908 <__eqsf2+0x28>

0000992c <__gesf2>:
    992c:	b5f0      	push	{r4, r5, r6, r7, lr}
    992e:	0042      	lsls	r2, r0, #1
    9930:	0245      	lsls	r5, r0, #9
    9932:	024c      	lsls	r4, r1, #9
    9934:	0fc3      	lsrs	r3, r0, #31
    9936:	0048      	lsls	r0, r1, #1
    9938:	0a6d      	lsrs	r5, r5, #9
    993a:	0e12      	lsrs	r2, r2, #24
    993c:	0a64      	lsrs	r4, r4, #9
    993e:	0e00      	lsrs	r0, r0, #24
    9940:	0fc9      	lsrs	r1, r1, #31
    9942:	2aff      	cmp	r2, #255	; 0xff
    9944:	d01e      	beq.n	9984 <__gesf2+0x58>
    9946:	28ff      	cmp	r0, #255	; 0xff
    9948:	d021      	beq.n	998e <__gesf2+0x62>
    994a:	2a00      	cmp	r2, #0
    994c:	d10a      	bne.n	9964 <__gesf2+0x38>
    994e:	426e      	negs	r6, r5
    9950:	416e      	adcs	r6, r5
    9952:	b2f6      	uxtb	r6, r6
    9954:	2800      	cmp	r0, #0
    9956:	d10f      	bne.n	9978 <__gesf2+0x4c>
    9958:	2c00      	cmp	r4, #0
    995a:	d10d      	bne.n	9978 <__gesf2+0x4c>
    995c:	2000      	movs	r0, #0
    995e:	2d00      	cmp	r5, #0
    9960:	d009      	beq.n	9976 <__gesf2+0x4a>
    9962:	e005      	b.n	9970 <__gesf2+0x44>
    9964:	2800      	cmp	r0, #0
    9966:	d101      	bne.n	996c <__gesf2+0x40>
    9968:	2c00      	cmp	r4, #0
    996a:	d001      	beq.n	9970 <__gesf2+0x44>
    996c:	428b      	cmp	r3, r1
    996e:	d011      	beq.n	9994 <__gesf2+0x68>
    9970:	2101      	movs	r1, #1
    9972:	4258      	negs	r0, r3
    9974:	4308      	orrs	r0, r1
    9976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9978:	2e00      	cmp	r6, #0
    997a:	d0f7      	beq.n	996c <__gesf2+0x40>
    997c:	2001      	movs	r0, #1
    997e:	3901      	subs	r1, #1
    9980:	4308      	orrs	r0, r1
    9982:	e7f8      	b.n	9976 <__gesf2+0x4a>
    9984:	2d00      	cmp	r5, #0
    9986:	d0de      	beq.n	9946 <__gesf2+0x1a>
    9988:	2002      	movs	r0, #2
    998a:	4240      	negs	r0, r0
    998c:	e7f3      	b.n	9976 <__gesf2+0x4a>
    998e:	2c00      	cmp	r4, #0
    9990:	d0db      	beq.n	994a <__gesf2+0x1e>
    9992:	e7f9      	b.n	9988 <__gesf2+0x5c>
    9994:	4282      	cmp	r2, r0
    9996:	dceb      	bgt.n	9970 <__gesf2+0x44>
    9998:	db04      	blt.n	99a4 <__gesf2+0x78>
    999a:	42a5      	cmp	r5, r4
    999c:	d8e8      	bhi.n	9970 <__gesf2+0x44>
    999e:	2000      	movs	r0, #0
    99a0:	42a5      	cmp	r5, r4
    99a2:	d2e8      	bcs.n	9976 <__gesf2+0x4a>
    99a4:	2101      	movs	r1, #1
    99a6:	1e58      	subs	r0, r3, #1
    99a8:	4308      	orrs	r0, r1
    99aa:	e7e4      	b.n	9976 <__gesf2+0x4a>

000099ac <__lesf2>:
    99ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    99ae:	0042      	lsls	r2, r0, #1
    99b0:	024d      	lsls	r5, r1, #9
    99b2:	004c      	lsls	r4, r1, #1
    99b4:	0246      	lsls	r6, r0, #9
    99b6:	0a76      	lsrs	r6, r6, #9
    99b8:	0e12      	lsrs	r2, r2, #24
    99ba:	0fc3      	lsrs	r3, r0, #31
    99bc:	0a6d      	lsrs	r5, r5, #9
    99be:	0e24      	lsrs	r4, r4, #24
    99c0:	0fc9      	lsrs	r1, r1, #31
    99c2:	2aff      	cmp	r2, #255	; 0xff
    99c4:	d016      	beq.n	99f4 <__lesf2+0x48>
    99c6:	2cff      	cmp	r4, #255	; 0xff
    99c8:	d018      	beq.n	99fc <__lesf2+0x50>
    99ca:	2a00      	cmp	r2, #0
    99cc:	d10a      	bne.n	99e4 <__lesf2+0x38>
    99ce:	4270      	negs	r0, r6
    99d0:	4170      	adcs	r0, r6
    99d2:	b2c0      	uxtb	r0, r0
    99d4:	2c00      	cmp	r4, #0
    99d6:	d015      	beq.n	9a04 <__lesf2+0x58>
    99d8:	2800      	cmp	r0, #0
    99da:	d005      	beq.n	99e8 <__lesf2+0x3c>
    99dc:	2001      	movs	r0, #1
    99de:	3901      	subs	r1, #1
    99e0:	4308      	orrs	r0, r1
    99e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99e4:	2c00      	cmp	r4, #0
    99e6:	d013      	beq.n	9a10 <__lesf2+0x64>
    99e8:	4299      	cmp	r1, r3
    99ea:	d014      	beq.n	9a16 <__lesf2+0x6a>
    99ec:	2001      	movs	r0, #1
    99ee:	425b      	negs	r3, r3
    99f0:	4318      	orrs	r0, r3
    99f2:	e7f6      	b.n	99e2 <__lesf2+0x36>
    99f4:	2002      	movs	r0, #2
    99f6:	2e00      	cmp	r6, #0
    99f8:	d1f3      	bne.n	99e2 <__lesf2+0x36>
    99fa:	e7e4      	b.n	99c6 <__lesf2+0x1a>
    99fc:	2002      	movs	r0, #2
    99fe:	2d00      	cmp	r5, #0
    9a00:	d1ef      	bne.n	99e2 <__lesf2+0x36>
    9a02:	e7e2      	b.n	99ca <__lesf2+0x1e>
    9a04:	2d00      	cmp	r5, #0
    9a06:	d1e7      	bne.n	99d8 <__lesf2+0x2c>
    9a08:	2000      	movs	r0, #0
    9a0a:	2e00      	cmp	r6, #0
    9a0c:	d0e9      	beq.n	99e2 <__lesf2+0x36>
    9a0e:	e7ed      	b.n	99ec <__lesf2+0x40>
    9a10:	2d00      	cmp	r5, #0
    9a12:	d1e9      	bne.n	99e8 <__lesf2+0x3c>
    9a14:	e7ea      	b.n	99ec <__lesf2+0x40>
    9a16:	42a2      	cmp	r2, r4
    9a18:	dc06      	bgt.n	9a28 <__lesf2+0x7c>
    9a1a:	dbdf      	blt.n	99dc <__lesf2+0x30>
    9a1c:	42ae      	cmp	r6, r5
    9a1e:	d803      	bhi.n	9a28 <__lesf2+0x7c>
    9a20:	2000      	movs	r0, #0
    9a22:	42ae      	cmp	r6, r5
    9a24:	d3da      	bcc.n	99dc <__lesf2+0x30>
    9a26:	e7dc      	b.n	99e2 <__lesf2+0x36>
    9a28:	2001      	movs	r0, #1
    9a2a:	4249      	negs	r1, r1
    9a2c:	4308      	orrs	r0, r1
    9a2e:	e7d8      	b.n	99e2 <__lesf2+0x36>

00009a30 <__aeabi_fmul>:
    9a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a32:	4657      	mov	r7, sl
    9a34:	464e      	mov	r6, r9
    9a36:	4645      	mov	r5, r8
    9a38:	46de      	mov	lr, fp
    9a3a:	b5e0      	push	{r5, r6, r7, lr}
    9a3c:	0247      	lsls	r7, r0, #9
    9a3e:	0046      	lsls	r6, r0, #1
    9a40:	4688      	mov	r8, r1
    9a42:	0a7f      	lsrs	r7, r7, #9
    9a44:	0e36      	lsrs	r6, r6, #24
    9a46:	0fc4      	lsrs	r4, r0, #31
    9a48:	2e00      	cmp	r6, #0
    9a4a:	d047      	beq.n	9adc <__aeabi_fmul+0xac>
    9a4c:	2eff      	cmp	r6, #255	; 0xff
    9a4e:	d024      	beq.n	9a9a <__aeabi_fmul+0x6a>
    9a50:	00fb      	lsls	r3, r7, #3
    9a52:	2780      	movs	r7, #128	; 0x80
    9a54:	04ff      	lsls	r7, r7, #19
    9a56:	431f      	orrs	r7, r3
    9a58:	2300      	movs	r3, #0
    9a5a:	4699      	mov	r9, r3
    9a5c:	469a      	mov	sl, r3
    9a5e:	3e7f      	subs	r6, #127	; 0x7f
    9a60:	4643      	mov	r3, r8
    9a62:	025d      	lsls	r5, r3, #9
    9a64:	0058      	lsls	r0, r3, #1
    9a66:	0fdb      	lsrs	r3, r3, #31
    9a68:	0a6d      	lsrs	r5, r5, #9
    9a6a:	0e00      	lsrs	r0, r0, #24
    9a6c:	4698      	mov	r8, r3
    9a6e:	d043      	beq.n	9af8 <__aeabi_fmul+0xc8>
    9a70:	28ff      	cmp	r0, #255	; 0xff
    9a72:	d03b      	beq.n	9aec <__aeabi_fmul+0xbc>
    9a74:	00eb      	lsls	r3, r5, #3
    9a76:	2580      	movs	r5, #128	; 0x80
    9a78:	2200      	movs	r2, #0
    9a7a:	04ed      	lsls	r5, r5, #19
    9a7c:	431d      	orrs	r5, r3
    9a7e:	387f      	subs	r0, #127	; 0x7f
    9a80:	1836      	adds	r6, r6, r0
    9a82:	1c73      	adds	r3, r6, #1
    9a84:	4641      	mov	r1, r8
    9a86:	469b      	mov	fp, r3
    9a88:	464b      	mov	r3, r9
    9a8a:	4061      	eors	r1, r4
    9a8c:	4313      	orrs	r3, r2
    9a8e:	2b0f      	cmp	r3, #15
    9a90:	d864      	bhi.n	9b5c <__aeabi_fmul+0x12c>
    9a92:	4875      	ldr	r0, [pc, #468]	; (9c68 <__aeabi_fmul+0x238>)
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	58c3      	ldr	r3, [r0, r3]
    9a98:	469f      	mov	pc, r3
    9a9a:	2f00      	cmp	r7, #0
    9a9c:	d142      	bne.n	9b24 <__aeabi_fmul+0xf4>
    9a9e:	2308      	movs	r3, #8
    9aa0:	4699      	mov	r9, r3
    9aa2:	3b06      	subs	r3, #6
    9aa4:	26ff      	movs	r6, #255	; 0xff
    9aa6:	469a      	mov	sl, r3
    9aa8:	e7da      	b.n	9a60 <__aeabi_fmul+0x30>
    9aaa:	4641      	mov	r1, r8
    9aac:	2a02      	cmp	r2, #2
    9aae:	d028      	beq.n	9b02 <__aeabi_fmul+0xd2>
    9ab0:	2a03      	cmp	r2, #3
    9ab2:	d100      	bne.n	9ab6 <__aeabi_fmul+0x86>
    9ab4:	e0ce      	b.n	9c54 <__aeabi_fmul+0x224>
    9ab6:	2a01      	cmp	r2, #1
    9ab8:	d000      	beq.n	9abc <__aeabi_fmul+0x8c>
    9aba:	e0ac      	b.n	9c16 <__aeabi_fmul+0x1e6>
    9abc:	4011      	ands	r1, r2
    9abe:	2000      	movs	r0, #0
    9ac0:	2200      	movs	r2, #0
    9ac2:	b2cc      	uxtb	r4, r1
    9ac4:	0240      	lsls	r0, r0, #9
    9ac6:	05d2      	lsls	r2, r2, #23
    9ac8:	0a40      	lsrs	r0, r0, #9
    9aca:	07e4      	lsls	r4, r4, #31
    9acc:	4310      	orrs	r0, r2
    9ace:	4320      	orrs	r0, r4
    9ad0:	bc3c      	pop	{r2, r3, r4, r5}
    9ad2:	4690      	mov	r8, r2
    9ad4:	4699      	mov	r9, r3
    9ad6:	46a2      	mov	sl, r4
    9ad8:	46ab      	mov	fp, r5
    9ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9adc:	2f00      	cmp	r7, #0
    9ade:	d115      	bne.n	9b0c <__aeabi_fmul+0xdc>
    9ae0:	2304      	movs	r3, #4
    9ae2:	4699      	mov	r9, r3
    9ae4:	3b03      	subs	r3, #3
    9ae6:	2600      	movs	r6, #0
    9ae8:	469a      	mov	sl, r3
    9aea:	e7b9      	b.n	9a60 <__aeabi_fmul+0x30>
    9aec:	20ff      	movs	r0, #255	; 0xff
    9aee:	2202      	movs	r2, #2
    9af0:	2d00      	cmp	r5, #0
    9af2:	d0c5      	beq.n	9a80 <__aeabi_fmul+0x50>
    9af4:	2203      	movs	r2, #3
    9af6:	e7c3      	b.n	9a80 <__aeabi_fmul+0x50>
    9af8:	2d00      	cmp	r5, #0
    9afa:	d119      	bne.n	9b30 <__aeabi_fmul+0x100>
    9afc:	2000      	movs	r0, #0
    9afe:	2201      	movs	r2, #1
    9b00:	e7be      	b.n	9a80 <__aeabi_fmul+0x50>
    9b02:	2401      	movs	r4, #1
    9b04:	22ff      	movs	r2, #255	; 0xff
    9b06:	400c      	ands	r4, r1
    9b08:	2000      	movs	r0, #0
    9b0a:	e7db      	b.n	9ac4 <__aeabi_fmul+0x94>
    9b0c:	0038      	movs	r0, r7
    9b0e:	f002 f985 	bl	be1c <__clzsi2>
    9b12:	2676      	movs	r6, #118	; 0x76
    9b14:	1f43      	subs	r3, r0, #5
    9b16:	409f      	lsls	r7, r3
    9b18:	2300      	movs	r3, #0
    9b1a:	4276      	negs	r6, r6
    9b1c:	1a36      	subs	r6, r6, r0
    9b1e:	4699      	mov	r9, r3
    9b20:	469a      	mov	sl, r3
    9b22:	e79d      	b.n	9a60 <__aeabi_fmul+0x30>
    9b24:	230c      	movs	r3, #12
    9b26:	4699      	mov	r9, r3
    9b28:	3b09      	subs	r3, #9
    9b2a:	26ff      	movs	r6, #255	; 0xff
    9b2c:	469a      	mov	sl, r3
    9b2e:	e797      	b.n	9a60 <__aeabi_fmul+0x30>
    9b30:	0028      	movs	r0, r5
    9b32:	f002 f973 	bl	be1c <__clzsi2>
    9b36:	1f43      	subs	r3, r0, #5
    9b38:	409d      	lsls	r5, r3
    9b3a:	2376      	movs	r3, #118	; 0x76
    9b3c:	425b      	negs	r3, r3
    9b3e:	1a18      	subs	r0, r3, r0
    9b40:	2200      	movs	r2, #0
    9b42:	e79d      	b.n	9a80 <__aeabi_fmul+0x50>
    9b44:	2080      	movs	r0, #128	; 0x80
    9b46:	2400      	movs	r4, #0
    9b48:	03c0      	lsls	r0, r0, #15
    9b4a:	22ff      	movs	r2, #255	; 0xff
    9b4c:	e7ba      	b.n	9ac4 <__aeabi_fmul+0x94>
    9b4e:	003d      	movs	r5, r7
    9b50:	4652      	mov	r2, sl
    9b52:	e7ab      	b.n	9aac <__aeabi_fmul+0x7c>
    9b54:	003d      	movs	r5, r7
    9b56:	0021      	movs	r1, r4
    9b58:	4652      	mov	r2, sl
    9b5a:	e7a7      	b.n	9aac <__aeabi_fmul+0x7c>
    9b5c:	0c3b      	lsrs	r3, r7, #16
    9b5e:	469c      	mov	ip, r3
    9b60:	042a      	lsls	r2, r5, #16
    9b62:	0c12      	lsrs	r2, r2, #16
    9b64:	0c2b      	lsrs	r3, r5, #16
    9b66:	0014      	movs	r4, r2
    9b68:	4660      	mov	r0, ip
    9b6a:	4665      	mov	r5, ip
    9b6c:	043f      	lsls	r7, r7, #16
    9b6e:	0c3f      	lsrs	r7, r7, #16
    9b70:	437c      	muls	r4, r7
    9b72:	4342      	muls	r2, r0
    9b74:	435d      	muls	r5, r3
    9b76:	437b      	muls	r3, r7
    9b78:	0c27      	lsrs	r7, r4, #16
    9b7a:	189b      	adds	r3, r3, r2
    9b7c:	18ff      	adds	r7, r7, r3
    9b7e:	42ba      	cmp	r2, r7
    9b80:	d903      	bls.n	9b8a <__aeabi_fmul+0x15a>
    9b82:	2380      	movs	r3, #128	; 0x80
    9b84:	025b      	lsls	r3, r3, #9
    9b86:	469c      	mov	ip, r3
    9b88:	4465      	add	r5, ip
    9b8a:	0424      	lsls	r4, r4, #16
    9b8c:	043a      	lsls	r2, r7, #16
    9b8e:	0c24      	lsrs	r4, r4, #16
    9b90:	1912      	adds	r2, r2, r4
    9b92:	0193      	lsls	r3, r2, #6
    9b94:	1e5c      	subs	r4, r3, #1
    9b96:	41a3      	sbcs	r3, r4
    9b98:	0c3f      	lsrs	r7, r7, #16
    9b9a:	0e92      	lsrs	r2, r2, #26
    9b9c:	197d      	adds	r5, r7, r5
    9b9e:	431a      	orrs	r2, r3
    9ba0:	01ad      	lsls	r5, r5, #6
    9ba2:	4315      	orrs	r5, r2
    9ba4:	012b      	lsls	r3, r5, #4
    9ba6:	d504      	bpl.n	9bb2 <__aeabi_fmul+0x182>
    9ba8:	2301      	movs	r3, #1
    9baa:	465e      	mov	r6, fp
    9bac:	086a      	lsrs	r2, r5, #1
    9bae:	401d      	ands	r5, r3
    9bb0:	4315      	orrs	r5, r2
    9bb2:	0032      	movs	r2, r6
    9bb4:	327f      	adds	r2, #127	; 0x7f
    9bb6:	2a00      	cmp	r2, #0
    9bb8:	dd25      	ble.n	9c06 <__aeabi_fmul+0x1d6>
    9bba:	076b      	lsls	r3, r5, #29
    9bbc:	d004      	beq.n	9bc8 <__aeabi_fmul+0x198>
    9bbe:	230f      	movs	r3, #15
    9bc0:	402b      	ands	r3, r5
    9bc2:	2b04      	cmp	r3, #4
    9bc4:	d000      	beq.n	9bc8 <__aeabi_fmul+0x198>
    9bc6:	3504      	adds	r5, #4
    9bc8:	012b      	lsls	r3, r5, #4
    9bca:	d503      	bpl.n	9bd4 <__aeabi_fmul+0x1a4>
    9bcc:	0032      	movs	r2, r6
    9bce:	4b27      	ldr	r3, [pc, #156]	; (9c6c <__aeabi_fmul+0x23c>)
    9bd0:	3280      	adds	r2, #128	; 0x80
    9bd2:	401d      	ands	r5, r3
    9bd4:	2afe      	cmp	r2, #254	; 0xfe
    9bd6:	dc94      	bgt.n	9b02 <__aeabi_fmul+0xd2>
    9bd8:	2401      	movs	r4, #1
    9bda:	01a8      	lsls	r0, r5, #6
    9bdc:	0a40      	lsrs	r0, r0, #9
    9bde:	b2d2      	uxtb	r2, r2
    9be0:	400c      	ands	r4, r1
    9be2:	e76f      	b.n	9ac4 <__aeabi_fmul+0x94>
    9be4:	2080      	movs	r0, #128	; 0x80
    9be6:	03c0      	lsls	r0, r0, #15
    9be8:	4207      	tst	r7, r0
    9bea:	d007      	beq.n	9bfc <__aeabi_fmul+0x1cc>
    9bec:	4205      	tst	r5, r0
    9bee:	d105      	bne.n	9bfc <__aeabi_fmul+0x1cc>
    9bf0:	4328      	orrs	r0, r5
    9bf2:	0240      	lsls	r0, r0, #9
    9bf4:	0a40      	lsrs	r0, r0, #9
    9bf6:	4644      	mov	r4, r8
    9bf8:	22ff      	movs	r2, #255	; 0xff
    9bfa:	e763      	b.n	9ac4 <__aeabi_fmul+0x94>
    9bfc:	4338      	orrs	r0, r7
    9bfe:	0240      	lsls	r0, r0, #9
    9c00:	0a40      	lsrs	r0, r0, #9
    9c02:	22ff      	movs	r2, #255	; 0xff
    9c04:	e75e      	b.n	9ac4 <__aeabi_fmul+0x94>
    9c06:	2401      	movs	r4, #1
    9c08:	1aa3      	subs	r3, r4, r2
    9c0a:	2b1b      	cmp	r3, #27
    9c0c:	dd05      	ble.n	9c1a <__aeabi_fmul+0x1ea>
    9c0e:	400c      	ands	r4, r1
    9c10:	2200      	movs	r2, #0
    9c12:	2000      	movs	r0, #0
    9c14:	e756      	b.n	9ac4 <__aeabi_fmul+0x94>
    9c16:	465e      	mov	r6, fp
    9c18:	e7cb      	b.n	9bb2 <__aeabi_fmul+0x182>
    9c1a:	002a      	movs	r2, r5
    9c1c:	2020      	movs	r0, #32
    9c1e:	40da      	lsrs	r2, r3
    9c20:	1ac3      	subs	r3, r0, r3
    9c22:	409d      	lsls	r5, r3
    9c24:	002b      	movs	r3, r5
    9c26:	1e5d      	subs	r5, r3, #1
    9c28:	41ab      	sbcs	r3, r5
    9c2a:	4313      	orrs	r3, r2
    9c2c:	075a      	lsls	r2, r3, #29
    9c2e:	d004      	beq.n	9c3a <__aeabi_fmul+0x20a>
    9c30:	220f      	movs	r2, #15
    9c32:	401a      	ands	r2, r3
    9c34:	2a04      	cmp	r2, #4
    9c36:	d000      	beq.n	9c3a <__aeabi_fmul+0x20a>
    9c38:	3304      	adds	r3, #4
    9c3a:	015a      	lsls	r2, r3, #5
    9c3c:	d504      	bpl.n	9c48 <__aeabi_fmul+0x218>
    9c3e:	2401      	movs	r4, #1
    9c40:	2201      	movs	r2, #1
    9c42:	400c      	ands	r4, r1
    9c44:	2000      	movs	r0, #0
    9c46:	e73d      	b.n	9ac4 <__aeabi_fmul+0x94>
    9c48:	2401      	movs	r4, #1
    9c4a:	019b      	lsls	r3, r3, #6
    9c4c:	0a58      	lsrs	r0, r3, #9
    9c4e:	400c      	ands	r4, r1
    9c50:	2200      	movs	r2, #0
    9c52:	e737      	b.n	9ac4 <__aeabi_fmul+0x94>
    9c54:	2080      	movs	r0, #128	; 0x80
    9c56:	2401      	movs	r4, #1
    9c58:	03c0      	lsls	r0, r0, #15
    9c5a:	4328      	orrs	r0, r5
    9c5c:	0240      	lsls	r0, r0, #9
    9c5e:	0a40      	lsrs	r0, r0, #9
    9c60:	400c      	ands	r4, r1
    9c62:	22ff      	movs	r2, #255	; 0xff
    9c64:	e72e      	b.n	9ac4 <__aeabi_fmul+0x94>
    9c66:	46c0      	nop			; (mov r8, r8)
    9c68:	00011228 	.word	0x00011228
    9c6c:	f7ffffff 	.word	0xf7ffffff

00009c70 <__aeabi_fsub>:
    9c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c72:	464f      	mov	r7, r9
    9c74:	46d6      	mov	lr, sl
    9c76:	4646      	mov	r6, r8
    9c78:	0044      	lsls	r4, r0, #1
    9c7a:	b5c0      	push	{r6, r7, lr}
    9c7c:	0fc2      	lsrs	r2, r0, #31
    9c7e:	0247      	lsls	r7, r0, #9
    9c80:	0248      	lsls	r0, r1, #9
    9c82:	0a40      	lsrs	r0, r0, #9
    9c84:	4684      	mov	ip, r0
    9c86:	4666      	mov	r6, ip
    9c88:	0a7b      	lsrs	r3, r7, #9
    9c8a:	0048      	lsls	r0, r1, #1
    9c8c:	0fc9      	lsrs	r1, r1, #31
    9c8e:	469a      	mov	sl, r3
    9c90:	0e24      	lsrs	r4, r4, #24
    9c92:	0015      	movs	r5, r2
    9c94:	00db      	lsls	r3, r3, #3
    9c96:	0e00      	lsrs	r0, r0, #24
    9c98:	4689      	mov	r9, r1
    9c9a:	00f6      	lsls	r6, r6, #3
    9c9c:	28ff      	cmp	r0, #255	; 0xff
    9c9e:	d100      	bne.n	9ca2 <__aeabi_fsub+0x32>
    9ca0:	e08f      	b.n	9dc2 <__aeabi_fsub+0x152>
    9ca2:	2101      	movs	r1, #1
    9ca4:	464f      	mov	r7, r9
    9ca6:	404f      	eors	r7, r1
    9ca8:	0039      	movs	r1, r7
    9caa:	4291      	cmp	r1, r2
    9cac:	d066      	beq.n	9d7c <__aeabi_fsub+0x10c>
    9cae:	1a22      	subs	r2, r4, r0
    9cb0:	2a00      	cmp	r2, #0
    9cb2:	dc00      	bgt.n	9cb6 <__aeabi_fsub+0x46>
    9cb4:	e09d      	b.n	9df2 <__aeabi_fsub+0x182>
    9cb6:	2800      	cmp	r0, #0
    9cb8:	d13d      	bne.n	9d36 <__aeabi_fsub+0xc6>
    9cba:	2e00      	cmp	r6, #0
    9cbc:	d100      	bne.n	9cc0 <__aeabi_fsub+0x50>
    9cbe:	e08b      	b.n	9dd8 <__aeabi_fsub+0x168>
    9cc0:	1e51      	subs	r1, r2, #1
    9cc2:	2900      	cmp	r1, #0
    9cc4:	d000      	beq.n	9cc8 <__aeabi_fsub+0x58>
    9cc6:	e0b5      	b.n	9e34 <__aeabi_fsub+0x1c4>
    9cc8:	2401      	movs	r4, #1
    9cca:	1b9b      	subs	r3, r3, r6
    9ccc:	015a      	lsls	r2, r3, #5
    9cce:	d544      	bpl.n	9d5a <__aeabi_fsub+0xea>
    9cd0:	019b      	lsls	r3, r3, #6
    9cd2:	099f      	lsrs	r7, r3, #6
    9cd4:	0038      	movs	r0, r7
    9cd6:	f002 f8a1 	bl	be1c <__clzsi2>
    9cda:	3805      	subs	r0, #5
    9cdc:	4087      	lsls	r7, r0
    9cde:	4284      	cmp	r4, r0
    9ce0:	dd00      	ble.n	9ce4 <__aeabi_fsub+0x74>
    9ce2:	e096      	b.n	9e12 <__aeabi_fsub+0x1a2>
    9ce4:	1b04      	subs	r4, r0, r4
    9ce6:	003a      	movs	r2, r7
    9ce8:	2020      	movs	r0, #32
    9cea:	3401      	adds	r4, #1
    9cec:	40e2      	lsrs	r2, r4
    9cee:	1b04      	subs	r4, r0, r4
    9cf0:	40a7      	lsls	r7, r4
    9cf2:	003b      	movs	r3, r7
    9cf4:	1e5f      	subs	r7, r3, #1
    9cf6:	41bb      	sbcs	r3, r7
    9cf8:	2400      	movs	r4, #0
    9cfa:	4313      	orrs	r3, r2
    9cfc:	075a      	lsls	r2, r3, #29
    9cfe:	d004      	beq.n	9d0a <__aeabi_fsub+0x9a>
    9d00:	220f      	movs	r2, #15
    9d02:	401a      	ands	r2, r3
    9d04:	2a04      	cmp	r2, #4
    9d06:	d000      	beq.n	9d0a <__aeabi_fsub+0x9a>
    9d08:	3304      	adds	r3, #4
    9d0a:	015a      	lsls	r2, r3, #5
    9d0c:	d527      	bpl.n	9d5e <__aeabi_fsub+0xee>
    9d0e:	3401      	adds	r4, #1
    9d10:	2cff      	cmp	r4, #255	; 0xff
    9d12:	d100      	bne.n	9d16 <__aeabi_fsub+0xa6>
    9d14:	e079      	b.n	9e0a <__aeabi_fsub+0x19a>
    9d16:	2201      	movs	r2, #1
    9d18:	019b      	lsls	r3, r3, #6
    9d1a:	0a5b      	lsrs	r3, r3, #9
    9d1c:	b2e4      	uxtb	r4, r4
    9d1e:	402a      	ands	r2, r5
    9d20:	025b      	lsls	r3, r3, #9
    9d22:	05e4      	lsls	r4, r4, #23
    9d24:	0a58      	lsrs	r0, r3, #9
    9d26:	07d2      	lsls	r2, r2, #31
    9d28:	4320      	orrs	r0, r4
    9d2a:	4310      	orrs	r0, r2
    9d2c:	bc1c      	pop	{r2, r3, r4}
    9d2e:	4690      	mov	r8, r2
    9d30:	4699      	mov	r9, r3
    9d32:	46a2      	mov	sl, r4
    9d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d36:	2cff      	cmp	r4, #255	; 0xff
    9d38:	d0e0      	beq.n	9cfc <__aeabi_fsub+0x8c>
    9d3a:	2180      	movs	r1, #128	; 0x80
    9d3c:	04c9      	lsls	r1, r1, #19
    9d3e:	430e      	orrs	r6, r1
    9d40:	2a1b      	cmp	r2, #27
    9d42:	dc7b      	bgt.n	9e3c <__aeabi_fsub+0x1cc>
    9d44:	0031      	movs	r1, r6
    9d46:	2020      	movs	r0, #32
    9d48:	40d1      	lsrs	r1, r2
    9d4a:	1a82      	subs	r2, r0, r2
    9d4c:	4096      	lsls	r6, r2
    9d4e:	1e72      	subs	r2, r6, #1
    9d50:	4196      	sbcs	r6, r2
    9d52:	430e      	orrs	r6, r1
    9d54:	1b9b      	subs	r3, r3, r6
    9d56:	015a      	lsls	r2, r3, #5
    9d58:	d4ba      	bmi.n	9cd0 <__aeabi_fsub+0x60>
    9d5a:	075a      	lsls	r2, r3, #29
    9d5c:	d1d0      	bne.n	9d00 <__aeabi_fsub+0x90>
    9d5e:	2201      	movs	r2, #1
    9d60:	08df      	lsrs	r7, r3, #3
    9d62:	402a      	ands	r2, r5
    9d64:	2cff      	cmp	r4, #255	; 0xff
    9d66:	d133      	bne.n	9dd0 <__aeabi_fsub+0x160>
    9d68:	2f00      	cmp	r7, #0
    9d6a:	d100      	bne.n	9d6e <__aeabi_fsub+0xfe>
    9d6c:	e0a8      	b.n	9ec0 <__aeabi_fsub+0x250>
    9d6e:	2380      	movs	r3, #128	; 0x80
    9d70:	03db      	lsls	r3, r3, #15
    9d72:	433b      	orrs	r3, r7
    9d74:	025b      	lsls	r3, r3, #9
    9d76:	0a5b      	lsrs	r3, r3, #9
    9d78:	24ff      	movs	r4, #255	; 0xff
    9d7a:	e7d1      	b.n	9d20 <__aeabi_fsub+0xb0>
    9d7c:	1a21      	subs	r1, r4, r0
    9d7e:	2900      	cmp	r1, #0
    9d80:	dd4c      	ble.n	9e1c <__aeabi_fsub+0x1ac>
    9d82:	2800      	cmp	r0, #0
    9d84:	d02a      	beq.n	9ddc <__aeabi_fsub+0x16c>
    9d86:	2cff      	cmp	r4, #255	; 0xff
    9d88:	d0b8      	beq.n	9cfc <__aeabi_fsub+0x8c>
    9d8a:	2080      	movs	r0, #128	; 0x80
    9d8c:	04c0      	lsls	r0, r0, #19
    9d8e:	4306      	orrs	r6, r0
    9d90:	291b      	cmp	r1, #27
    9d92:	dd00      	ble.n	9d96 <__aeabi_fsub+0x126>
    9d94:	e0af      	b.n	9ef6 <__aeabi_fsub+0x286>
    9d96:	0030      	movs	r0, r6
    9d98:	2720      	movs	r7, #32
    9d9a:	40c8      	lsrs	r0, r1
    9d9c:	1a79      	subs	r1, r7, r1
    9d9e:	408e      	lsls	r6, r1
    9da0:	1e71      	subs	r1, r6, #1
    9da2:	418e      	sbcs	r6, r1
    9da4:	4306      	orrs	r6, r0
    9da6:	199b      	adds	r3, r3, r6
    9da8:	0159      	lsls	r1, r3, #5
    9daa:	d5d6      	bpl.n	9d5a <__aeabi_fsub+0xea>
    9dac:	3401      	adds	r4, #1
    9dae:	2cff      	cmp	r4, #255	; 0xff
    9db0:	d100      	bne.n	9db4 <__aeabi_fsub+0x144>
    9db2:	e085      	b.n	9ec0 <__aeabi_fsub+0x250>
    9db4:	2201      	movs	r2, #1
    9db6:	497a      	ldr	r1, [pc, #488]	; (9fa0 <__aeabi_fsub+0x330>)
    9db8:	401a      	ands	r2, r3
    9dba:	085b      	lsrs	r3, r3, #1
    9dbc:	400b      	ands	r3, r1
    9dbe:	4313      	orrs	r3, r2
    9dc0:	e79c      	b.n	9cfc <__aeabi_fsub+0x8c>
    9dc2:	2e00      	cmp	r6, #0
    9dc4:	d000      	beq.n	9dc8 <__aeabi_fsub+0x158>
    9dc6:	e770      	b.n	9caa <__aeabi_fsub+0x3a>
    9dc8:	e76b      	b.n	9ca2 <__aeabi_fsub+0x32>
    9dca:	1e3b      	subs	r3, r7, #0
    9dcc:	d1c5      	bne.n	9d5a <__aeabi_fsub+0xea>
    9dce:	2200      	movs	r2, #0
    9dd0:	027b      	lsls	r3, r7, #9
    9dd2:	0a5b      	lsrs	r3, r3, #9
    9dd4:	b2e4      	uxtb	r4, r4
    9dd6:	e7a3      	b.n	9d20 <__aeabi_fsub+0xb0>
    9dd8:	0014      	movs	r4, r2
    9dda:	e78f      	b.n	9cfc <__aeabi_fsub+0x8c>
    9ddc:	2e00      	cmp	r6, #0
    9dde:	d04d      	beq.n	9e7c <__aeabi_fsub+0x20c>
    9de0:	1e48      	subs	r0, r1, #1
    9de2:	2800      	cmp	r0, #0
    9de4:	d157      	bne.n	9e96 <__aeabi_fsub+0x226>
    9de6:	199b      	adds	r3, r3, r6
    9de8:	2401      	movs	r4, #1
    9dea:	015a      	lsls	r2, r3, #5
    9dec:	d5b5      	bpl.n	9d5a <__aeabi_fsub+0xea>
    9dee:	2402      	movs	r4, #2
    9df0:	e7e0      	b.n	9db4 <__aeabi_fsub+0x144>
    9df2:	2a00      	cmp	r2, #0
    9df4:	d125      	bne.n	9e42 <__aeabi_fsub+0x1d2>
    9df6:	1c62      	adds	r2, r4, #1
    9df8:	b2d2      	uxtb	r2, r2
    9dfa:	2a01      	cmp	r2, #1
    9dfc:	dd72      	ble.n	9ee4 <__aeabi_fsub+0x274>
    9dfe:	1b9f      	subs	r7, r3, r6
    9e00:	017a      	lsls	r2, r7, #5
    9e02:	d535      	bpl.n	9e70 <__aeabi_fsub+0x200>
    9e04:	1af7      	subs	r7, r6, r3
    9e06:	000d      	movs	r5, r1
    9e08:	e764      	b.n	9cd4 <__aeabi_fsub+0x64>
    9e0a:	2201      	movs	r2, #1
    9e0c:	2300      	movs	r3, #0
    9e0e:	402a      	ands	r2, r5
    9e10:	e786      	b.n	9d20 <__aeabi_fsub+0xb0>
    9e12:	003b      	movs	r3, r7
    9e14:	4a63      	ldr	r2, [pc, #396]	; (9fa4 <__aeabi_fsub+0x334>)
    9e16:	1a24      	subs	r4, r4, r0
    9e18:	4013      	ands	r3, r2
    9e1a:	e76f      	b.n	9cfc <__aeabi_fsub+0x8c>
    9e1c:	2900      	cmp	r1, #0
    9e1e:	d16c      	bne.n	9efa <__aeabi_fsub+0x28a>
    9e20:	1c61      	adds	r1, r4, #1
    9e22:	b2c8      	uxtb	r0, r1
    9e24:	2801      	cmp	r0, #1
    9e26:	dd4e      	ble.n	9ec6 <__aeabi_fsub+0x256>
    9e28:	29ff      	cmp	r1, #255	; 0xff
    9e2a:	d049      	beq.n	9ec0 <__aeabi_fsub+0x250>
    9e2c:	199b      	adds	r3, r3, r6
    9e2e:	085b      	lsrs	r3, r3, #1
    9e30:	000c      	movs	r4, r1
    9e32:	e763      	b.n	9cfc <__aeabi_fsub+0x8c>
    9e34:	2aff      	cmp	r2, #255	; 0xff
    9e36:	d041      	beq.n	9ebc <__aeabi_fsub+0x24c>
    9e38:	000a      	movs	r2, r1
    9e3a:	e781      	b.n	9d40 <__aeabi_fsub+0xd0>
    9e3c:	2601      	movs	r6, #1
    9e3e:	1b9b      	subs	r3, r3, r6
    9e40:	e789      	b.n	9d56 <__aeabi_fsub+0xe6>
    9e42:	2c00      	cmp	r4, #0
    9e44:	d01c      	beq.n	9e80 <__aeabi_fsub+0x210>
    9e46:	28ff      	cmp	r0, #255	; 0xff
    9e48:	d021      	beq.n	9e8e <__aeabi_fsub+0x21e>
    9e4a:	2480      	movs	r4, #128	; 0x80
    9e4c:	04e4      	lsls	r4, r4, #19
    9e4e:	4252      	negs	r2, r2
    9e50:	4323      	orrs	r3, r4
    9e52:	2a1b      	cmp	r2, #27
    9e54:	dd00      	ble.n	9e58 <__aeabi_fsub+0x1e8>
    9e56:	e096      	b.n	9f86 <__aeabi_fsub+0x316>
    9e58:	001c      	movs	r4, r3
    9e5a:	2520      	movs	r5, #32
    9e5c:	40d4      	lsrs	r4, r2
    9e5e:	1aaa      	subs	r2, r5, r2
    9e60:	4093      	lsls	r3, r2
    9e62:	1e5a      	subs	r2, r3, #1
    9e64:	4193      	sbcs	r3, r2
    9e66:	4323      	orrs	r3, r4
    9e68:	1af3      	subs	r3, r6, r3
    9e6a:	0004      	movs	r4, r0
    9e6c:	000d      	movs	r5, r1
    9e6e:	e72d      	b.n	9ccc <__aeabi_fsub+0x5c>
    9e70:	2f00      	cmp	r7, #0
    9e72:	d000      	beq.n	9e76 <__aeabi_fsub+0x206>
    9e74:	e72e      	b.n	9cd4 <__aeabi_fsub+0x64>
    9e76:	2200      	movs	r2, #0
    9e78:	2400      	movs	r4, #0
    9e7a:	e7a9      	b.n	9dd0 <__aeabi_fsub+0x160>
    9e7c:	000c      	movs	r4, r1
    9e7e:	e73d      	b.n	9cfc <__aeabi_fsub+0x8c>
    9e80:	2b00      	cmp	r3, #0
    9e82:	d058      	beq.n	9f36 <__aeabi_fsub+0x2c6>
    9e84:	43d2      	mvns	r2, r2
    9e86:	2a00      	cmp	r2, #0
    9e88:	d0ee      	beq.n	9e68 <__aeabi_fsub+0x1f8>
    9e8a:	28ff      	cmp	r0, #255	; 0xff
    9e8c:	d1e1      	bne.n	9e52 <__aeabi_fsub+0x1e2>
    9e8e:	0033      	movs	r3, r6
    9e90:	24ff      	movs	r4, #255	; 0xff
    9e92:	000d      	movs	r5, r1
    9e94:	e732      	b.n	9cfc <__aeabi_fsub+0x8c>
    9e96:	29ff      	cmp	r1, #255	; 0xff
    9e98:	d010      	beq.n	9ebc <__aeabi_fsub+0x24c>
    9e9a:	0001      	movs	r1, r0
    9e9c:	e778      	b.n	9d90 <__aeabi_fsub+0x120>
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d06e      	beq.n	9f80 <__aeabi_fsub+0x310>
    9ea2:	24ff      	movs	r4, #255	; 0xff
    9ea4:	2e00      	cmp	r6, #0
    9ea6:	d100      	bne.n	9eaa <__aeabi_fsub+0x23a>
    9ea8:	e728      	b.n	9cfc <__aeabi_fsub+0x8c>
    9eaa:	2280      	movs	r2, #128	; 0x80
    9eac:	4651      	mov	r1, sl
    9eae:	03d2      	lsls	r2, r2, #15
    9eb0:	4211      	tst	r1, r2
    9eb2:	d003      	beq.n	9ebc <__aeabi_fsub+0x24c>
    9eb4:	4661      	mov	r1, ip
    9eb6:	4211      	tst	r1, r2
    9eb8:	d100      	bne.n	9ebc <__aeabi_fsub+0x24c>
    9eba:	0033      	movs	r3, r6
    9ebc:	24ff      	movs	r4, #255	; 0xff
    9ebe:	e71d      	b.n	9cfc <__aeabi_fsub+0x8c>
    9ec0:	24ff      	movs	r4, #255	; 0xff
    9ec2:	2300      	movs	r3, #0
    9ec4:	e72c      	b.n	9d20 <__aeabi_fsub+0xb0>
    9ec6:	2c00      	cmp	r4, #0
    9ec8:	d1e9      	bne.n	9e9e <__aeabi_fsub+0x22e>
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d063      	beq.n	9f96 <__aeabi_fsub+0x326>
    9ece:	2e00      	cmp	r6, #0
    9ed0:	d100      	bne.n	9ed4 <__aeabi_fsub+0x264>
    9ed2:	e713      	b.n	9cfc <__aeabi_fsub+0x8c>
    9ed4:	199b      	adds	r3, r3, r6
    9ed6:	015a      	lsls	r2, r3, #5
    9ed8:	d400      	bmi.n	9edc <__aeabi_fsub+0x26c>
    9eda:	e73e      	b.n	9d5a <__aeabi_fsub+0xea>
    9edc:	4a31      	ldr	r2, [pc, #196]	; (9fa4 <__aeabi_fsub+0x334>)
    9ede:	000c      	movs	r4, r1
    9ee0:	4013      	ands	r3, r2
    9ee2:	e70b      	b.n	9cfc <__aeabi_fsub+0x8c>
    9ee4:	2c00      	cmp	r4, #0
    9ee6:	d11e      	bne.n	9f26 <__aeabi_fsub+0x2b6>
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d12f      	bne.n	9f4c <__aeabi_fsub+0x2dc>
    9eec:	2e00      	cmp	r6, #0
    9eee:	d04f      	beq.n	9f90 <__aeabi_fsub+0x320>
    9ef0:	0033      	movs	r3, r6
    9ef2:	000d      	movs	r5, r1
    9ef4:	e702      	b.n	9cfc <__aeabi_fsub+0x8c>
    9ef6:	2601      	movs	r6, #1
    9ef8:	e755      	b.n	9da6 <__aeabi_fsub+0x136>
    9efa:	2c00      	cmp	r4, #0
    9efc:	d11f      	bne.n	9f3e <__aeabi_fsub+0x2ce>
    9efe:	2b00      	cmp	r3, #0
    9f00:	d043      	beq.n	9f8a <__aeabi_fsub+0x31a>
    9f02:	43c9      	mvns	r1, r1
    9f04:	2900      	cmp	r1, #0
    9f06:	d00b      	beq.n	9f20 <__aeabi_fsub+0x2b0>
    9f08:	28ff      	cmp	r0, #255	; 0xff
    9f0a:	d039      	beq.n	9f80 <__aeabi_fsub+0x310>
    9f0c:	291b      	cmp	r1, #27
    9f0e:	dc44      	bgt.n	9f9a <__aeabi_fsub+0x32a>
    9f10:	001c      	movs	r4, r3
    9f12:	2720      	movs	r7, #32
    9f14:	40cc      	lsrs	r4, r1
    9f16:	1a79      	subs	r1, r7, r1
    9f18:	408b      	lsls	r3, r1
    9f1a:	1e59      	subs	r1, r3, #1
    9f1c:	418b      	sbcs	r3, r1
    9f1e:	4323      	orrs	r3, r4
    9f20:	199b      	adds	r3, r3, r6
    9f22:	0004      	movs	r4, r0
    9f24:	e740      	b.n	9da8 <__aeabi_fsub+0x138>
    9f26:	2b00      	cmp	r3, #0
    9f28:	d11a      	bne.n	9f60 <__aeabi_fsub+0x2f0>
    9f2a:	2e00      	cmp	r6, #0
    9f2c:	d124      	bne.n	9f78 <__aeabi_fsub+0x308>
    9f2e:	2780      	movs	r7, #128	; 0x80
    9f30:	2200      	movs	r2, #0
    9f32:	03ff      	lsls	r7, r7, #15
    9f34:	e71b      	b.n	9d6e <__aeabi_fsub+0xfe>
    9f36:	0033      	movs	r3, r6
    9f38:	0004      	movs	r4, r0
    9f3a:	000d      	movs	r5, r1
    9f3c:	e6de      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f3e:	28ff      	cmp	r0, #255	; 0xff
    9f40:	d01e      	beq.n	9f80 <__aeabi_fsub+0x310>
    9f42:	2480      	movs	r4, #128	; 0x80
    9f44:	04e4      	lsls	r4, r4, #19
    9f46:	4249      	negs	r1, r1
    9f48:	4323      	orrs	r3, r4
    9f4a:	e7df      	b.n	9f0c <__aeabi_fsub+0x29c>
    9f4c:	2e00      	cmp	r6, #0
    9f4e:	d100      	bne.n	9f52 <__aeabi_fsub+0x2e2>
    9f50:	e6d4      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f52:	1b9f      	subs	r7, r3, r6
    9f54:	017a      	lsls	r2, r7, #5
    9f56:	d400      	bmi.n	9f5a <__aeabi_fsub+0x2ea>
    9f58:	e737      	b.n	9dca <__aeabi_fsub+0x15a>
    9f5a:	1af3      	subs	r3, r6, r3
    9f5c:	000d      	movs	r5, r1
    9f5e:	e6cd      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f60:	24ff      	movs	r4, #255	; 0xff
    9f62:	2e00      	cmp	r6, #0
    9f64:	d100      	bne.n	9f68 <__aeabi_fsub+0x2f8>
    9f66:	e6c9      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f68:	2280      	movs	r2, #128	; 0x80
    9f6a:	4650      	mov	r0, sl
    9f6c:	03d2      	lsls	r2, r2, #15
    9f6e:	4210      	tst	r0, r2
    9f70:	d0a4      	beq.n	9ebc <__aeabi_fsub+0x24c>
    9f72:	4660      	mov	r0, ip
    9f74:	4210      	tst	r0, r2
    9f76:	d1a1      	bne.n	9ebc <__aeabi_fsub+0x24c>
    9f78:	0033      	movs	r3, r6
    9f7a:	000d      	movs	r5, r1
    9f7c:	24ff      	movs	r4, #255	; 0xff
    9f7e:	e6bd      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f80:	0033      	movs	r3, r6
    9f82:	24ff      	movs	r4, #255	; 0xff
    9f84:	e6ba      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f86:	2301      	movs	r3, #1
    9f88:	e76e      	b.n	9e68 <__aeabi_fsub+0x1f8>
    9f8a:	0033      	movs	r3, r6
    9f8c:	0004      	movs	r4, r0
    9f8e:	e6b5      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f90:	2700      	movs	r7, #0
    9f92:	2200      	movs	r2, #0
    9f94:	e71c      	b.n	9dd0 <__aeabi_fsub+0x160>
    9f96:	0033      	movs	r3, r6
    9f98:	e6b0      	b.n	9cfc <__aeabi_fsub+0x8c>
    9f9a:	2301      	movs	r3, #1
    9f9c:	e7c0      	b.n	9f20 <__aeabi_fsub+0x2b0>
    9f9e:	46c0      	nop			; (mov r8, r8)
    9fa0:	7dffffff 	.word	0x7dffffff
    9fa4:	fbffffff 	.word	0xfbffffff

00009fa8 <__aeabi_f2iz>:
    9fa8:	0241      	lsls	r1, r0, #9
    9faa:	0043      	lsls	r3, r0, #1
    9fac:	0fc2      	lsrs	r2, r0, #31
    9fae:	0a49      	lsrs	r1, r1, #9
    9fb0:	0e1b      	lsrs	r3, r3, #24
    9fb2:	2000      	movs	r0, #0
    9fb4:	2b7e      	cmp	r3, #126	; 0x7e
    9fb6:	dd0d      	ble.n	9fd4 <__aeabi_f2iz+0x2c>
    9fb8:	2b9d      	cmp	r3, #157	; 0x9d
    9fba:	dc0c      	bgt.n	9fd6 <__aeabi_f2iz+0x2e>
    9fbc:	2080      	movs	r0, #128	; 0x80
    9fbe:	0400      	lsls	r0, r0, #16
    9fc0:	4301      	orrs	r1, r0
    9fc2:	2b95      	cmp	r3, #149	; 0x95
    9fc4:	dc0a      	bgt.n	9fdc <__aeabi_f2iz+0x34>
    9fc6:	2096      	movs	r0, #150	; 0x96
    9fc8:	1ac3      	subs	r3, r0, r3
    9fca:	40d9      	lsrs	r1, r3
    9fcc:	4248      	negs	r0, r1
    9fce:	2a00      	cmp	r2, #0
    9fd0:	d100      	bne.n	9fd4 <__aeabi_f2iz+0x2c>
    9fd2:	0008      	movs	r0, r1
    9fd4:	4770      	bx	lr
    9fd6:	4b03      	ldr	r3, [pc, #12]	; (9fe4 <__aeabi_f2iz+0x3c>)
    9fd8:	18d0      	adds	r0, r2, r3
    9fda:	e7fb      	b.n	9fd4 <__aeabi_f2iz+0x2c>
    9fdc:	3b96      	subs	r3, #150	; 0x96
    9fde:	4099      	lsls	r1, r3
    9fe0:	e7f4      	b.n	9fcc <__aeabi_f2iz+0x24>
    9fe2:	46c0      	nop			; (mov r8, r8)
    9fe4:	7fffffff 	.word	0x7fffffff

00009fe8 <__aeabi_i2f>:
    9fe8:	b570      	push	{r4, r5, r6, lr}
    9fea:	2800      	cmp	r0, #0
    9fec:	d030      	beq.n	a050 <__aeabi_i2f+0x68>
    9fee:	17c3      	asrs	r3, r0, #31
    9ff0:	18c4      	adds	r4, r0, r3
    9ff2:	405c      	eors	r4, r3
    9ff4:	0fc5      	lsrs	r5, r0, #31
    9ff6:	0020      	movs	r0, r4
    9ff8:	f001 ff10 	bl	be1c <__clzsi2>
    9ffc:	239e      	movs	r3, #158	; 0x9e
    9ffe:	1a1b      	subs	r3, r3, r0
    a000:	2b96      	cmp	r3, #150	; 0x96
    a002:	dc0d      	bgt.n	a020 <__aeabi_i2f+0x38>
    a004:	2296      	movs	r2, #150	; 0x96
    a006:	1ad2      	subs	r2, r2, r3
    a008:	4094      	lsls	r4, r2
    a00a:	002a      	movs	r2, r5
    a00c:	0264      	lsls	r4, r4, #9
    a00e:	0a64      	lsrs	r4, r4, #9
    a010:	b2db      	uxtb	r3, r3
    a012:	0264      	lsls	r4, r4, #9
    a014:	05db      	lsls	r3, r3, #23
    a016:	0a60      	lsrs	r0, r4, #9
    a018:	07d2      	lsls	r2, r2, #31
    a01a:	4318      	orrs	r0, r3
    a01c:	4310      	orrs	r0, r2
    a01e:	bd70      	pop	{r4, r5, r6, pc}
    a020:	2b99      	cmp	r3, #153	; 0x99
    a022:	dc19      	bgt.n	a058 <__aeabi_i2f+0x70>
    a024:	2299      	movs	r2, #153	; 0x99
    a026:	1ad2      	subs	r2, r2, r3
    a028:	2a00      	cmp	r2, #0
    a02a:	dd29      	ble.n	a080 <__aeabi_i2f+0x98>
    a02c:	4094      	lsls	r4, r2
    a02e:	0022      	movs	r2, r4
    a030:	4c14      	ldr	r4, [pc, #80]	; (a084 <__aeabi_i2f+0x9c>)
    a032:	4014      	ands	r4, r2
    a034:	0751      	lsls	r1, r2, #29
    a036:	d004      	beq.n	a042 <__aeabi_i2f+0x5a>
    a038:	210f      	movs	r1, #15
    a03a:	400a      	ands	r2, r1
    a03c:	2a04      	cmp	r2, #4
    a03e:	d000      	beq.n	a042 <__aeabi_i2f+0x5a>
    a040:	3404      	adds	r4, #4
    a042:	0162      	lsls	r2, r4, #5
    a044:	d413      	bmi.n	a06e <__aeabi_i2f+0x86>
    a046:	01a4      	lsls	r4, r4, #6
    a048:	0a64      	lsrs	r4, r4, #9
    a04a:	b2db      	uxtb	r3, r3
    a04c:	002a      	movs	r2, r5
    a04e:	e7e0      	b.n	a012 <__aeabi_i2f+0x2a>
    a050:	2200      	movs	r2, #0
    a052:	2300      	movs	r3, #0
    a054:	2400      	movs	r4, #0
    a056:	e7dc      	b.n	a012 <__aeabi_i2f+0x2a>
    a058:	2205      	movs	r2, #5
    a05a:	0021      	movs	r1, r4
    a05c:	1a12      	subs	r2, r2, r0
    a05e:	40d1      	lsrs	r1, r2
    a060:	22b9      	movs	r2, #185	; 0xb9
    a062:	1ad2      	subs	r2, r2, r3
    a064:	4094      	lsls	r4, r2
    a066:	1e62      	subs	r2, r4, #1
    a068:	4194      	sbcs	r4, r2
    a06a:	430c      	orrs	r4, r1
    a06c:	e7da      	b.n	a024 <__aeabi_i2f+0x3c>
    a06e:	4b05      	ldr	r3, [pc, #20]	; (a084 <__aeabi_i2f+0x9c>)
    a070:	002a      	movs	r2, r5
    a072:	401c      	ands	r4, r3
    a074:	239f      	movs	r3, #159	; 0x9f
    a076:	01a4      	lsls	r4, r4, #6
    a078:	1a1b      	subs	r3, r3, r0
    a07a:	0a64      	lsrs	r4, r4, #9
    a07c:	b2db      	uxtb	r3, r3
    a07e:	e7c8      	b.n	a012 <__aeabi_i2f+0x2a>
    a080:	0022      	movs	r2, r4
    a082:	e7d5      	b.n	a030 <__aeabi_i2f+0x48>
    a084:	fbffffff 	.word	0xfbffffff

0000a088 <__aeabi_ui2f>:
    a088:	b510      	push	{r4, lr}
    a08a:	1e04      	subs	r4, r0, #0
    a08c:	d027      	beq.n	a0de <__aeabi_ui2f+0x56>
    a08e:	f001 fec5 	bl	be1c <__clzsi2>
    a092:	239e      	movs	r3, #158	; 0x9e
    a094:	1a1b      	subs	r3, r3, r0
    a096:	2b96      	cmp	r3, #150	; 0x96
    a098:	dc0a      	bgt.n	a0b0 <__aeabi_ui2f+0x28>
    a09a:	2296      	movs	r2, #150	; 0x96
    a09c:	1ad2      	subs	r2, r2, r3
    a09e:	4094      	lsls	r4, r2
    a0a0:	0264      	lsls	r4, r4, #9
    a0a2:	0a64      	lsrs	r4, r4, #9
    a0a4:	b2db      	uxtb	r3, r3
    a0a6:	0264      	lsls	r4, r4, #9
    a0a8:	05db      	lsls	r3, r3, #23
    a0aa:	0a60      	lsrs	r0, r4, #9
    a0ac:	4318      	orrs	r0, r3
    a0ae:	bd10      	pop	{r4, pc}
    a0b0:	2b99      	cmp	r3, #153	; 0x99
    a0b2:	dc17      	bgt.n	a0e4 <__aeabi_ui2f+0x5c>
    a0b4:	2299      	movs	r2, #153	; 0x99
    a0b6:	1ad2      	subs	r2, r2, r3
    a0b8:	2a00      	cmp	r2, #0
    a0ba:	dd27      	ble.n	a10c <__aeabi_ui2f+0x84>
    a0bc:	4094      	lsls	r4, r2
    a0be:	0022      	movs	r2, r4
    a0c0:	4c13      	ldr	r4, [pc, #76]	; (a110 <__aeabi_ui2f+0x88>)
    a0c2:	4014      	ands	r4, r2
    a0c4:	0751      	lsls	r1, r2, #29
    a0c6:	d004      	beq.n	a0d2 <__aeabi_ui2f+0x4a>
    a0c8:	210f      	movs	r1, #15
    a0ca:	400a      	ands	r2, r1
    a0cc:	2a04      	cmp	r2, #4
    a0ce:	d000      	beq.n	a0d2 <__aeabi_ui2f+0x4a>
    a0d0:	3404      	adds	r4, #4
    a0d2:	0162      	lsls	r2, r4, #5
    a0d4:	d412      	bmi.n	a0fc <__aeabi_ui2f+0x74>
    a0d6:	01a4      	lsls	r4, r4, #6
    a0d8:	0a64      	lsrs	r4, r4, #9
    a0da:	b2db      	uxtb	r3, r3
    a0dc:	e7e3      	b.n	a0a6 <__aeabi_ui2f+0x1e>
    a0de:	2300      	movs	r3, #0
    a0e0:	2400      	movs	r4, #0
    a0e2:	e7e0      	b.n	a0a6 <__aeabi_ui2f+0x1e>
    a0e4:	22b9      	movs	r2, #185	; 0xb9
    a0e6:	0021      	movs	r1, r4
    a0e8:	1ad2      	subs	r2, r2, r3
    a0ea:	4091      	lsls	r1, r2
    a0ec:	000a      	movs	r2, r1
    a0ee:	1e51      	subs	r1, r2, #1
    a0f0:	418a      	sbcs	r2, r1
    a0f2:	2105      	movs	r1, #5
    a0f4:	1a09      	subs	r1, r1, r0
    a0f6:	40cc      	lsrs	r4, r1
    a0f8:	4314      	orrs	r4, r2
    a0fa:	e7db      	b.n	a0b4 <__aeabi_ui2f+0x2c>
    a0fc:	4b04      	ldr	r3, [pc, #16]	; (a110 <__aeabi_ui2f+0x88>)
    a0fe:	401c      	ands	r4, r3
    a100:	239f      	movs	r3, #159	; 0x9f
    a102:	01a4      	lsls	r4, r4, #6
    a104:	1a1b      	subs	r3, r3, r0
    a106:	0a64      	lsrs	r4, r4, #9
    a108:	b2db      	uxtb	r3, r3
    a10a:	e7cc      	b.n	a0a6 <__aeabi_ui2f+0x1e>
    a10c:	0022      	movs	r2, r4
    a10e:	e7d7      	b.n	a0c0 <__aeabi_ui2f+0x38>
    a110:	fbffffff 	.word	0xfbffffff

0000a114 <__aeabi_dadd>:
    a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a116:	4645      	mov	r5, r8
    a118:	46de      	mov	lr, fp
    a11a:	4657      	mov	r7, sl
    a11c:	464e      	mov	r6, r9
    a11e:	030c      	lsls	r4, r1, #12
    a120:	b5e0      	push	{r5, r6, r7, lr}
    a122:	004e      	lsls	r6, r1, #1
    a124:	0fc9      	lsrs	r1, r1, #31
    a126:	4688      	mov	r8, r1
    a128:	000d      	movs	r5, r1
    a12a:	0a61      	lsrs	r1, r4, #9
    a12c:	0f44      	lsrs	r4, r0, #29
    a12e:	430c      	orrs	r4, r1
    a130:	00c7      	lsls	r7, r0, #3
    a132:	0319      	lsls	r1, r3, #12
    a134:	0058      	lsls	r0, r3, #1
    a136:	0fdb      	lsrs	r3, r3, #31
    a138:	469b      	mov	fp, r3
    a13a:	0a4b      	lsrs	r3, r1, #9
    a13c:	0f51      	lsrs	r1, r2, #29
    a13e:	430b      	orrs	r3, r1
    a140:	0d76      	lsrs	r6, r6, #21
    a142:	0d40      	lsrs	r0, r0, #21
    a144:	0019      	movs	r1, r3
    a146:	00d2      	lsls	r2, r2, #3
    a148:	45d8      	cmp	r8, fp
    a14a:	d100      	bne.n	a14e <__aeabi_dadd+0x3a>
    a14c:	e0ae      	b.n	a2ac <__aeabi_dadd+0x198>
    a14e:	1a35      	subs	r5, r6, r0
    a150:	2d00      	cmp	r5, #0
    a152:	dc00      	bgt.n	a156 <__aeabi_dadd+0x42>
    a154:	e0f6      	b.n	a344 <__aeabi_dadd+0x230>
    a156:	2800      	cmp	r0, #0
    a158:	d10f      	bne.n	a17a <__aeabi_dadd+0x66>
    a15a:	4313      	orrs	r3, r2
    a15c:	d100      	bne.n	a160 <__aeabi_dadd+0x4c>
    a15e:	e0db      	b.n	a318 <__aeabi_dadd+0x204>
    a160:	1e6b      	subs	r3, r5, #1
    a162:	2b00      	cmp	r3, #0
    a164:	d000      	beq.n	a168 <__aeabi_dadd+0x54>
    a166:	e137      	b.n	a3d8 <__aeabi_dadd+0x2c4>
    a168:	1aba      	subs	r2, r7, r2
    a16a:	4297      	cmp	r7, r2
    a16c:	41bf      	sbcs	r7, r7
    a16e:	1a64      	subs	r4, r4, r1
    a170:	427f      	negs	r7, r7
    a172:	1be4      	subs	r4, r4, r7
    a174:	2601      	movs	r6, #1
    a176:	0017      	movs	r7, r2
    a178:	e024      	b.n	a1c4 <__aeabi_dadd+0xb0>
    a17a:	4bc6      	ldr	r3, [pc, #792]	; (a494 <__aeabi_dadd+0x380>)
    a17c:	429e      	cmp	r6, r3
    a17e:	d04d      	beq.n	a21c <__aeabi_dadd+0x108>
    a180:	2380      	movs	r3, #128	; 0x80
    a182:	041b      	lsls	r3, r3, #16
    a184:	4319      	orrs	r1, r3
    a186:	2d38      	cmp	r5, #56	; 0x38
    a188:	dd00      	ble.n	a18c <__aeabi_dadd+0x78>
    a18a:	e107      	b.n	a39c <__aeabi_dadd+0x288>
    a18c:	2d1f      	cmp	r5, #31
    a18e:	dd00      	ble.n	a192 <__aeabi_dadd+0x7e>
    a190:	e138      	b.n	a404 <__aeabi_dadd+0x2f0>
    a192:	2020      	movs	r0, #32
    a194:	1b43      	subs	r3, r0, r5
    a196:	469a      	mov	sl, r3
    a198:	000b      	movs	r3, r1
    a19a:	4650      	mov	r0, sl
    a19c:	4083      	lsls	r3, r0
    a19e:	4699      	mov	r9, r3
    a1a0:	0013      	movs	r3, r2
    a1a2:	4648      	mov	r0, r9
    a1a4:	40eb      	lsrs	r3, r5
    a1a6:	4318      	orrs	r0, r3
    a1a8:	0003      	movs	r3, r0
    a1aa:	4650      	mov	r0, sl
    a1ac:	4082      	lsls	r2, r0
    a1ae:	1e50      	subs	r0, r2, #1
    a1b0:	4182      	sbcs	r2, r0
    a1b2:	40e9      	lsrs	r1, r5
    a1b4:	431a      	orrs	r2, r3
    a1b6:	1aba      	subs	r2, r7, r2
    a1b8:	1a61      	subs	r1, r4, r1
    a1ba:	4297      	cmp	r7, r2
    a1bc:	41a4      	sbcs	r4, r4
    a1be:	0017      	movs	r7, r2
    a1c0:	4264      	negs	r4, r4
    a1c2:	1b0c      	subs	r4, r1, r4
    a1c4:	0223      	lsls	r3, r4, #8
    a1c6:	d562      	bpl.n	a28e <__aeabi_dadd+0x17a>
    a1c8:	0264      	lsls	r4, r4, #9
    a1ca:	0a65      	lsrs	r5, r4, #9
    a1cc:	2d00      	cmp	r5, #0
    a1ce:	d100      	bne.n	a1d2 <__aeabi_dadd+0xbe>
    a1d0:	e0df      	b.n	a392 <__aeabi_dadd+0x27e>
    a1d2:	0028      	movs	r0, r5
    a1d4:	f001 fe22 	bl	be1c <__clzsi2>
    a1d8:	0003      	movs	r3, r0
    a1da:	3b08      	subs	r3, #8
    a1dc:	2b1f      	cmp	r3, #31
    a1de:	dd00      	ble.n	a1e2 <__aeabi_dadd+0xce>
    a1e0:	e0d2      	b.n	a388 <__aeabi_dadd+0x274>
    a1e2:	2220      	movs	r2, #32
    a1e4:	003c      	movs	r4, r7
    a1e6:	1ad2      	subs	r2, r2, r3
    a1e8:	409d      	lsls	r5, r3
    a1ea:	40d4      	lsrs	r4, r2
    a1ec:	409f      	lsls	r7, r3
    a1ee:	4325      	orrs	r5, r4
    a1f0:	429e      	cmp	r6, r3
    a1f2:	dd00      	ble.n	a1f6 <__aeabi_dadd+0xe2>
    a1f4:	e0c4      	b.n	a380 <__aeabi_dadd+0x26c>
    a1f6:	1b9e      	subs	r6, r3, r6
    a1f8:	1c73      	adds	r3, r6, #1
    a1fa:	2b1f      	cmp	r3, #31
    a1fc:	dd00      	ble.n	a200 <__aeabi_dadd+0xec>
    a1fe:	e0f1      	b.n	a3e4 <__aeabi_dadd+0x2d0>
    a200:	2220      	movs	r2, #32
    a202:	0038      	movs	r0, r7
    a204:	0029      	movs	r1, r5
    a206:	1ad2      	subs	r2, r2, r3
    a208:	40d8      	lsrs	r0, r3
    a20a:	4091      	lsls	r1, r2
    a20c:	4097      	lsls	r7, r2
    a20e:	002c      	movs	r4, r5
    a210:	4301      	orrs	r1, r0
    a212:	1e78      	subs	r0, r7, #1
    a214:	4187      	sbcs	r7, r0
    a216:	40dc      	lsrs	r4, r3
    a218:	2600      	movs	r6, #0
    a21a:	430f      	orrs	r7, r1
    a21c:	077b      	lsls	r3, r7, #29
    a21e:	d009      	beq.n	a234 <__aeabi_dadd+0x120>
    a220:	230f      	movs	r3, #15
    a222:	403b      	ands	r3, r7
    a224:	2b04      	cmp	r3, #4
    a226:	d005      	beq.n	a234 <__aeabi_dadd+0x120>
    a228:	1d3b      	adds	r3, r7, #4
    a22a:	42bb      	cmp	r3, r7
    a22c:	41bf      	sbcs	r7, r7
    a22e:	427f      	negs	r7, r7
    a230:	19e4      	adds	r4, r4, r7
    a232:	001f      	movs	r7, r3
    a234:	0223      	lsls	r3, r4, #8
    a236:	d52c      	bpl.n	a292 <__aeabi_dadd+0x17e>
    a238:	4b96      	ldr	r3, [pc, #600]	; (a494 <__aeabi_dadd+0x380>)
    a23a:	3601      	adds	r6, #1
    a23c:	429e      	cmp	r6, r3
    a23e:	d100      	bne.n	a242 <__aeabi_dadd+0x12e>
    a240:	e09a      	b.n	a378 <__aeabi_dadd+0x264>
    a242:	4645      	mov	r5, r8
    a244:	4b94      	ldr	r3, [pc, #592]	; (a498 <__aeabi_dadd+0x384>)
    a246:	08ff      	lsrs	r7, r7, #3
    a248:	401c      	ands	r4, r3
    a24a:	0760      	lsls	r0, r4, #29
    a24c:	0576      	lsls	r6, r6, #21
    a24e:	0264      	lsls	r4, r4, #9
    a250:	4307      	orrs	r7, r0
    a252:	0b24      	lsrs	r4, r4, #12
    a254:	0d76      	lsrs	r6, r6, #21
    a256:	2100      	movs	r1, #0
    a258:	0324      	lsls	r4, r4, #12
    a25a:	0b23      	lsrs	r3, r4, #12
    a25c:	0d0c      	lsrs	r4, r1, #20
    a25e:	4a8f      	ldr	r2, [pc, #572]	; (a49c <__aeabi_dadd+0x388>)
    a260:	0524      	lsls	r4, r4, #20
    a262:	431c      	orrs	r4, r3
    a264:	4014      	ands	r4, r2
    a266:	0533      	lsls	r3, r6, #20
    a268:	4323      	orrs	r3, r4
    a26a:	005b      	lsls	r3, r3, #1
    a26c:	07ed      	lsls	r5, r5, #31
    a26e:	085b      	lsrs	r3, r3, #1
    a270:	432b      	orrs	r3, r5
    a272:	0038      	movs	r0, r7
    a274:	0019      	movs	r1, r3
    a276:	bc3c      	pop	{r2, r3, r4, r5}
    a278:	4690      	mov	r8, r2
    a27a:	4699      	mov	r9, r3
    a27c:	46a2      	mov	sl, r4
    a27e:	46ab      	mov	fp, r5
    a280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a282:	4664      	mov	r4, ip
    a284:	4304      	orrs	r4, r0
    a286:	d100      	bne.n	a28a <__aeabi_dadd+0x176>
    a288:	e211      	b.n	a6ae <__aeabi_dadd+0x59a>
    a28a:	0004      	movs	r4, r0
    a28c:	4667      	mov	r7, ip
    a28e:	077b      	lsls	r3, r7, #29
    a290:	d1c6      	bne.n	a220 <__aeabi_dadd+0x10c>
    a292:	4645      	mov	r5, r8
    a294:	0760      	lsls	r0, r4, #29
    a296:	08ff      	lsrs	r7, r7, #3
    a298:	4307      	orrs	r7, r0
    a29a:	08e4      	lsrs	r4, r4, #3
    a29c:	4b7d      	ldr	r3, [pc, #500]	; (a494 <__aeabi_dadd+0x380>)
    a29e:	429e      	cmp	r6, r3
    a2a0:	d030      	beq.n	a304 <__aeabi_dadd+0x1f0>
    a2a2:	0324      	lsls	r4, r4, #12
    a2a4:	0576      	lsls	r6, r6, #21
    a2a6:	0b24      	lsrs	r4, r4, #12
    a2a8:	0d76      	lsrs	r6, r6, #21
    a2aa:	e7d4      	b.n	a256 <__aeabi_dadd+0x142>
    a2ac:	1a33      	subs	r3, r6, r0
    a2ae:	469a      	mov	sl, r3
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	dd78      	ble.n	a3a6 <__aeabi_dadd+0x292>
    a2b4:	2800      	cmp	r0, #0
    a2b6:	d031      	beq.n	a31c <__aeabi_dadd+0x208>
    a2b8:	4876      	ldr	r0, [pc, #472]	; (a494 <__aeabi_dadd+0x380>)
    a2ba:	4286      	cmp	r6, r0
    a2bc:	d0ae      	beq.n	a21c <__aeabi_dadd+0x108>
    a2be:	2080      	movs	r0, #128	; 0x80
    a2c0:	0400      	lsls	r0, r0, #16
    a2c2:	4301      	orrs	r1, r0
    a2c4:	4653      	mov	r3, sl
    a2c6:	2b38      	cmp	r3, #56	; 0x38
    a2c8:	dc00      	bgt.n	a2cc <__aeabi_dadd+0x1b8>
    a2ca:	e0e9      	b.n	a4a0 <__aeabi_dadd+0x38c>
    a2cc:	430a      	orrs	r2, r1
    a2ce:	1e51      	subs	r1, r2, #1
    a2d0:	418a      	sbcs	r2, r1
    a2d2:	2100      	movs	r1, #0
    a2d4:	19d2      	adds	r2, r2, r7
    a2d6:	42ba      	cmp	r2, r7
    a2d8:	41bf      	sbcs	r7, r7
    a2da:	1909      	adds	r1, r1, r4
    a2dc:	427c      	negs	r4, r7
    a2de:	0017      	movs	r7, r2
    a2e0:	190c      	adds	r4, r1, r4
    a2e2:	0223      	lsls	r3, r4, #8
    a2e4:	d5d3      	bpl.n	a28e <__aeabi_dadd+0x17a>
    a2e6:	4b6b      	ldr	r3, [pc, #428]	; (a494 <__aeabi_dadd+0x380>)
    a2e8:	3601      	adds	r6, #1
    a2ea:	429e      	cmp	r6, r3
    a2ec:	d100      	bne.n	a2f0 <__aeabi_dadd+0x1dc>
    a2ee:	e13a      	b.n	a566 <__aeabi_dadd+0x452>
    a2f0:	2001      	movs	r0, #1
    a2f2:	4b69      	ldr	r3, [pc, #420]	; (a498 <__aeabi_dadd+0x384>)
    a2f4:	401c      	ands	r4, r3
    a2f6:	087b      	lsrs	r3, r7, #1
    a2f8:	4007      	ands	r7, r0
    a2fa:	431f      	orrs	r7, r3
    a2fc:	07e0      	lsls	r0, r4, #31
    a2fe:	4307      	orrs	r7, r0
    a300:	0864      	lsrs	r4, r4, #1
    a302:	e78b      	b.n	a21c <__aeabi_dadd+0x108>
    a304:	0023      	movs	r3, r4
    a306:	433b      	orrs	r3, r7
    a308:	d100      	bne.n	a30c <__aeabi_dadd+0x1f8>
    a30a:	e1cb      	b.n	a6a4 <__aeabi_dadd+0x590>
    a30c:	2280      	movs	r2, #128	; 0x80
    a30e:	0312      	lsls	r2, r2, #12
    a310:	4314      	orrs	r4, r2
    a312:	0324      	lsls	r4, r4, #12
    a314:	0b24      	lsrs	r4, r4, #12
    a316:	e79e      	b.n	a256 <__aeabi_dadd+0x142>
    a318:	002e      	movs	r6, r5
    a31a:	e77f      	b.n	a21c <__aeabi_dadd+0x108>
    a31c:	0008      	movs	r0, r1
    a31e:	4310      	orrs	r0, r2
    a320:	d100      	bne.n	a324 <__aeabi_dadd+0x210>
    a322:	e0b4      	b.n	a48e <__aeabi_dadd+0x37a>
    a324:	1e58      	subs	r0, r3, #1
    a326:	2800      	cmp	r0, #0
    a328:	d000      	beq.n	a32c <__aeabi_dadd+0x218>
    a32a:	e0de      	b.n	a4ea <__aeabi_dadd+0x3d6>
    a32c:	18ba      	adds	r2, r7, r2
    a32e:	42ba      	cmp	r2, r7
    a330:	419b      	sbcs	r3, r3
    a332:	1864      	adds	r4, r4, r1
    a334:	425b      	negs	r3, r3
    a336:	18e4      	adds	r4, r4, r3
    a338:	0017      	movs	r7, r2
    a33a:	2601      	movs	r6, #1
    a33c:	0223      	lsls	r3, r4, #8
    a33e:	d5a6      	bpl.n	a28e <__aeabi_dadd+0x17a>
    a340:	2602      	movs	r6, #2
    a342:	e7d5      	b.n	a2f0 <__aeabi_dadd+0x1dc>
    a344:	2d00      	cmp	r5, #0
    a346:	d16e      	bne.n	a426 <__aeabi_dadd+0x312>
    a348:	1c70      	adds	r0, r6, #1
    a34a:	0540      	lsls	r0, r0, #21
    a34c:	0d40      	lsrs	r0, r0, #21
    a34e:	2801      	cmp	r0, #1
    a350:	dc00      	bgt.n	a354 <__aeabi_dadd+0x240>
    a352:	e0f9      	b.n	a548 <__aeabi_dadd+0x434>
    a354:	1ab8      	subs	r0, r7, r2
    a356:	4684      	mov	ip, r0
    a358:	4287      	cmp	r7, r0
    a35a:	4180      	sbcs	r0, r0
    a35c:	1ae5      	subs	r5, r4, r3
    a35e:	4240      	negs	r0, r0
    a360:	1a2d      	subs	r5, r5, r0
    a362:	0228      	lsls	r0, r5, #8
    a364:	d400      	bmi.n	a368 <__aeabi_dadd+0x254>
    a366:	e089      	b.n	a47c <__aeabi_dadd+0x368>
    a368:	1bd7      	subs	r7, r2, r7
    a36a:	42ba      	cmp	r2, r7
    a36c:	4192      	sbcs	r2, r2
    a36e:	1b1c      	subs	r4, r3, r4
    a370:	4252      	negs	r2, r2
    a372:	1aa5      	subs	r5, r4, r2
    a374:	46d8      	mov	r8, fp
    a376:	e729      	b.n	a1cc <__aeabi_dadd+0xb8>
    a378:	4645      	mov	r5, r8
    a37a:	2400      	movs	r4, #0
    a37c:	2700      	movs	r7, #0
    a37e:	e76a      	b.n	a256 <__aeabi_dadd+0x142>
    a380:	4c45      	ldr	r4, [pc, #276]	; (a498 <__aeabi_dadd+0x384>)
    a382:	1af6      	subs	r6, r6, r3
    a384:	402c      	ands	r4, r5
    a386:	e749      	b.n	a21c <__aeabi_dadd+0x108>
    a388:	003d      	movs	r5, r7
    a38a:	3828      	subs	r0, #40	; 0x28
    a38c:	4085      	lsls	r5, r0
    a38e:	2700      	movs	r7, #0
    a390:	e72e      	b.n	a1f0 <__aeabi_dadd+0xdc>
    a392:	0038      	movs	r0, r7
    a394:	f001 fd42 	bl	be1c <__clzsi2>
    a398:	3020      	adds	r0, #32
    a39a:	e71d      	b.n	a1d8 <__aeabi_dadd+0xc4>
    a39c:	430a      	orrs	r2, r1
    a39e:	1e51      	subs	r1, r2, #1
    a3a0:	418a      	sbcs	r2, r1
    a3a2:	2100      	movs	r1, #0
    a3a4:	e707      	b.n	a1b6 <__aeabi_dadd+0xa2>
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d000      	beq.n	a3ac <__aeabi_dadd+0x298>
    a3aa:	e0f3      	b.n	a594 <__aeabi_dadd+0x480>
    a3ac:	1c70      	adds	r0, r6, #1
    a3ae:	0543      	lsls	r3, r0, #21
    a3b0:	0d5b      	lsrs	r3, r3, #21
    a3b2:	2b01      	cmp	r3, #1
    a3b4:	dc00      	bgt.n	a3b8 <__aeabi_dadd+0x2a4>
    a3b6:	e0ad      	b.n	a514 <__aeabi_dadd+0x400>
    a3b8:	4b36      	ldr	r3, [pc, #216]	; (a494 <__aeabi_dadd+0x380>)
    a3ba:	4298      	cmp	r0, r3
    a3bc:	d100      	bne.n	a3c0 <__aeabi_dadd+0x2ac>
    a3be:	e0d1      	b.n	a564 <__aeabi_dadd+0x450>
    a3c0:	18ba      	adds	r2, r7, r2
    a3c2:	42ba      	cmp	r2, r7
    a3c4:	41bf      	sbcs	r7, r7
    a3c6:	1864      	adds	r4, r4, r1
    a3c8:	427f      	negs	r7, r7
    a3ca:	19e4      	adds	r4, r4, r7
    a3cc:	07e7      	lsls	r7, r4, #31
    a3ce:	0852      	lsrs	r2, r2, #1
    a3d0:	4317      	orrs	r7, r2
    a3d2:	0864      	lsrs	r4, r4, #1
    a3d4:	0006      	movs	r6, r0
    a3d6:	e721      	b.n	a21c <__aeabi_dadd+0x108>
    a3d8:	482e      	ldr	r0, [pc, #184]	; (a494 <__aeabi_dadd+0x380>)
    a3da:	4285      	cmp	r5, r0
    a3dc:	d100      	bne.n	a3e0 <__aeabi_dadd+0x2cc>
    a3de:	e093      	b.n	a508 <__aeabi_dadd+0x3f4>
    a3e0:	001d      	movs	r5, r3
    a3e2:	e6d0      	b.n	a186 <__aeabi_dadd+0x72>
    a3e4:	0029      	movs	r1, r5
    a3e6:	3e1f      	subs	r6, #31
    a3e8:	40f1      	lsrs	r1, r6
    a3ea:	2b20      	cmp	r3, #32
    a3ec:	d100      	bne.n	a3f0 <__aeabi_dadd+0x2dc>
    a3ee:	e08d      	b.n	a50c <__aeabi_dadd+0x3f8>
    a3f0:	2240      	movs	r2, #64	; 0x40
    a3f2:	1ad3      	subs	r3, r2, r3
    a3f4:	409d      	lsls	r5, r3
    a3f6:	432f      	orrs	r7, r5
    a3f8:	1e7d      	subs	r5, r7, #1
    a3fa:	41af      	sbcs	r7, r5
    a3fc:	2400      	movs	r4, #0
    a3fe:	430f      	orrs	r7, r1
    a400:	2600      	movs	r6, #0
    a402:	e744      	b.n	a28e <__aeabi_dadd+0x17a>
    a404:	002b      	movs	r3, r5
    a406:	0008      	movs	r0, r1
    a408:	3b20      	subs	r3, #32
    a40a:	40d8      	lsrs	r0, r3
    a40c:	0003      	movs	r3, r0
    a40e:	2d20      	cmp	r5, #32
    a410:	d100      	bne.n	a414 <__aeabi_dadd+0x300>
    a412:	e07d      	b.n	a510 <__aeabi_dadd+0x3fc>
    a414:	2040      	movs	r0, #64	; 0x40
    a416:	1b45      	subs	r5, r0, r5
    a418:	40a9      	lsls	r1, r5
    a41a:	430a      	orrs	r2, r1
    a41c:	1e51      	subs	r1, r2, #1
    a41e:	418a      	sbcs	r2, r1
    a420:	2100      	movs	r1, #0
    a422:	431a      	orrs	r2, r3
    a424:	e6c7      	b.n	a1b6 <__aeabi_dadd+0xa2>
    a426:	2e00      	cmp	r6, #0
    a428:	d050      	beq.n	a4cc <__aeabi_dadd+0x3b8>
    a42a:	4e1a      	ldr	r6, [pc, #104]	; (a494 <__aeabi_dadd+0x380>)
    a42c:	42b0      	cmp	r0, r6
    a42e:	d057      	beq.n	a4e0 <__aeabi_dadd+0x3cc>
    a430:	2680      	movs	r6, #128	; 0x80
    a432:	426b      	negs	r3, r5
    a434:	4699      	mov	r9, r3
    a436:	0436      	lsls	r6, r6, #16
    a438:	4334      	orrs	r4, r6
    a43a:	464b      	mov	r3, r9
    a43c:	2b38      	cmp	r3, #56	; 0x38
    a43e:	dd00      	ble.n	a442 <__aeabi_dadd+0x32e>
    a440:	e0d6      	b.n	a5f0 <__aeabi_dadd+0x4dc>
    a442:	2b1f      	cmp	r3, #31
    a444:	dd00      	ble.n	a448 <__aeabi_dadd+0x334>
    a446:	e135      	b.n	a6b4 <__aeabi_dadd+0x5a0>
    a448:	2620      	movs	r6, #32
    a44a:	1af5      	subs	r5, r6, r3
    a44c:	0026      	movs	r6, r4
    a44e:	40ae      	lsls	r6, r5
    a450:	46b2      	mov	sl, r6
    a452:	003e      	movs	r6, r7
    a454:	40de      	lsrs	r6, r3
    a456:	46ac      	mov	ip, r5
    a458:	0035      	movs	r5, r6
    a45a:	4656      	mov	r6, sl
    a45c:	432e      	orrs	r6, r5
    a45e:	4665      	mov	r5, ip
    a460:	40af      	lsls	r7, r5
    a462:	1e7d      	subs	r5, r7, #1
    a464:	41af      	sbcs	r7, r5
    a466:	40dc      	lsrs	r4, r3
    a468:	4337      	orrs	r7, r6
    a46a:	1bd7      	subs	r7, r2, r7
    a46c:	42ba      	cmp	r2, r7
    a46e:	4192      	sbcs	r2, r2
    a470:	1b0c      	subs	r4, r1, r4
    a472:	4252      	negs	r2, r2
    a474:	1aa4      	subs	r4, r4, r2
    a476:	0006      	movs	r6, r0
    a478:	46d8      	mov	r8, fp
    a47a:	e6a3      	b.n	a1c4 <__aeabi_dadd+0xb0>
    a47c:	4664      	mov	r4, ip
    a47e:	4667      	mov	r7, ip
    a480:	432c      	orrs	r4, r5
    a482:	d000      	beq.n	a486 <__aeabi_dadd+0x372>
    a484:	e6a2      	b.n	a1cc <__aeabi_dadd+0xb8>
    a486:	2500      	movs	r5, #0
    a488:	2600      	movs	r6, #0
    a48a:	2700      	movs	r7, #0
    a48c:	e706      	b.n	a29c <__aeabi_dadd+0x188>
    a48e:	001e      	movs	r6, r3
    a490:	e6c4      	b.n	a21c <__aeabi_dadd+0x108>
    a492:	46c0      	nop			; (mov r8, r8)
    a494:	000007ff 	.word	0x000007ff
    a498:	ff7fffff 	.word	0xff7fffff
    a49c:	800fffff 	.word	0x800fffff
    a4a0:	2b1f      	cmp	r3, #31
    a4a2:	dc63      	bgt.n	a56c <__aeabi_dadd+0x458>
    a4a4:	2020      	movs	r0, #32
    a4a6:	1ac3      	subs	r3, r0, r3
    a4a8:	0008      	movs	r0, r1
    a4aa:	4098      	lsls	r0, r3
    a4ac:	469c      	mov	ip, r3
    a4ae:	4683      	mov	fp, r0
    a4b0:	4653      	mov	r3, sl
    a4b2:	0010      	movs	r0, r2
    a4b4:	40d8      	lsrs	r0, r3
    a4b6:	0003      	movs	r3, r0
    a4b8:	4658      	mov	r0, fp
    a4ba:	4318      	orrs	r0, r3
    a4bc:	4663      	mov	r3, ip
    a4be:	409a      	lsls	r2, r3
    a4c0:	1e53      	subs	r3, r2, #1
    a4c2:	419a      	sbcs	r2, r3
    a4c4:	4653      	mov	r3, sl
    a4c6:	4302      	orrs	r2, r0
    a4c8:	40d9      	lsrs	r1, r3
    a4ca:	e703      	b.n	a2d4 <__aeabi_dadd+0x1c0>
    a4cc:	0026      	movs	r6, r4
    a4ce:	433e      	orrs	r6, r7
    a4d0:	d006      	beq.n	a4e0 <__aeabi_dadd+0x3cc>
    a4d2:	43eb      	mvns	r3, r5
    a4d4:	4699      	mov	r9, r3
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d0c7      	beq.n	a46a <__aeabi_dadd+0x356>
    a4da:	4e94      	ldr	r6, [pc, #592]	; (a72c <__aeabi_dadd+0x618>)
    a4dc:	42b0      	cmp	r0, r6
    a4de:	d1ac      	bne.n	a43a <__aeabi_dadd+0x326>
    a4e0:	000c      	movs	r4, r1
    a4e2:	0017      	movs	r7, r2
    a4e4:	0006      	movs	r6, r0
    a4e6:	46d8      	mov	r8, fp
    a4e8:	e698      	b.n	a21c <__aeabi_dadd+0x108>
    a4ea:	4b90      	ldr	r3, [pc, #576]	; (a72c <__aeabi_dadd+0x618>)
    a4ec:	459a      	cmp	sl, r3
    a4ee:	d00b      	beq.n	a508 <__aeabi_dadd+0x3f4>
    a4f0:	4682      	mov	sl, r0
    a4f2:	e6e7      	b.n	a2c4 <__aeabi_dadd+0x1b0>
    a4f4:	2800      	cmp	r0, #0
    a4f6:	d000      	beq.n	a4fa <__aeabi_dadd+0x3e6>
    a4f8:	e09e      	b.n	a638 <__aeabi_dadd+0x524>
    a4fa:	0018      	movs	r0, r3
    a4fc:	4310      	orrs	r0, r2
    a4fe:	d100      	bne.n	a502 <__aeabi_dadd+0x3ee>
    a500:	e0e9      	b.n	a6d6 <__aeabi_dadd+0x5c2>
    a502:	001c      	movs	r4, r3
    a504:	0017      	movs	r7, r2
    a506:	46d8      	mov	r8, fp
    a508:	4e88      	ldr	r6, [pc, #544]	; (a72c <__aeabi_dadd+0x618>)
    a50a:	e687      	b.n	a21c <__aeabi_dadd+0x108>
    a50c:	2500      	movs	r5, #0
    a50e:	e772      	b.n	a3f6 <__aeabi_dadd+0x2e2>
    a510:	2100      	movs	r1, #0
    a512:	e782      	b.n	a41a <__aeabi_dadd+0x306>
    a514:	0023      	movs	r3, r4
    a516:	433b      	orrs	r3, r7
    a518:	2e00      	cmp	r6, #0
    a51a:	d000      	beq.n	a51e <__aeabi_dadd+0x40a>
    a51c:	e0ab      	b.n	a676 <__aeabi_dadd+0x562>
    a51e:	2b00      	cmp	r3, #0
    a520:	d100      	bne.n	a524 <__aeabi_dadd+0x410>
    a522:	e0e7      	b.n	a6f4 <__aeabi_dadd+0x5e0>
    a524:	000b      	movs	r3, r1
    a526:	4313      	orrs	r3, r2
    a528:	d100      	bne.n	a52c <__aeabi_dadd+0x418>
    a52a:	e677      	b.n	a21c <__aeabi_dadd+0x108>
    a52c:	18ba      	adds	r2, r7, r2
    a52e:	42ba      	cmp	r2, r7
    a530:	41bf      	sbcs	r7, r7
    a532:	1864      	adds	r4, r4, r1
    a534:	427f      	negs	r7, r7
    a536:	19e4      	adds	r4, r4, r7
    a538:	0223      	lsls	r3, r4, #8
    a53a:	d400      	bmi.n	a53e <__aeabi_dadd+0x42a>
    a53c:	e0f2      	b.n	a724 <__aeabi_dadd+0x610>
    a53e:	4b7c      	ldr	r3, [pc, #496]	; (a730 <__aeabi_dadd+0x61c>)
    a540:	0017      	movs	r7, r2
    a542:	401c      	ands	r4, r3
    a544:	0006      	movs	r6, r0
    a546:	e669      	b.n	a21c <__aeabi_dadd+0x108>
    a548:	0020      	movs	r0, r4
    a54a:	4338      	orrs	r0, r7
    a54c:	2e00      	cmp	r6, #0
    a54e:	d1d1      	bne.n	a4f4 <__aeabi_dadd+0x3e0>
    a550:	2800      	cmp	r0, #0
    a552:	d15b      	bne.n	a60c <__aeabi_dadd+0x4f8>
    a554:	001c      	movs	r4, r3
    a556:	4314      	orrs	r4, r2
    a558:	d100      	bne.n	a55c <__aeabi_dadd+0x448>
    a55a:	e0a8      	b.n	a6ae <__aeabi_dadd+0x59a>
    a55c:	001c      	movs	r4, r3
    a55e:	0017      	movs	r7, r2
    a560:	46d8      	mov	r8, fp
    a562:	e65b      	b.n	a21c <__aeabi_dadd+0x108>
    a564:	0006      	movs	r6, r0
    a566:	2400      	movs	r4, #0
    a568:	2700      	movs	r7, #0
    a56a:	e697      	b.n	a29c <__aeabi_dadd+0x188>
    a56c:	4650      	mov	r0, sl
    a56e:	000b      	movs	r3, r1
    a570:	3820      	subs	r0, #32
    a572:	40c3      	lsrs	r3, r0
    a574:	4699      	mov	r9, r3
    a576:	4653      	mov	r3, sl
    a578:	2b20      	cmp	r3, #32
    a57a:	d100      	bne.n	a57e <__aeabi_dadd+0x46a>
    a57c:	e095      	b.n	a6aa <__aeabi_dadd+0x596>
    a57e:	2340      	movs	r3, #64	; 0x40
    a580:	4650      	mov	r0, sl
    a582:	1a1b      	subs	r3, r3, r0
    a584:	4099      	lsls	r1, r3
    a586:	430a      	orrs	r2, r1
    a588:	1e51      	subs	r1, r2, #1
    a58a:	418a      	sbcs	r2, r1
    a58c:	464b      	mov	r3, r9
    a58e:	2100      	movs	r1, #0
    a590:	431a      	orrs	r2, r3
    a592:	e69f      	b.n	a2d4 <__aeabi_dadd+0x1c0>
    a594:	2e00      	cmp	r6, #0
    a596:	d130      	bne.n	a5fa <__aeabi_dadd+0x4e6>
    a598:	0026      	movs	r6, r4
    a59a:	433e      	orrs	r6, r7
    a59c:	d067      	beq.n	a66e <__aeabi_dadd+0x55a>
    a59e:	43db      	mvns	r3, r3
    a5a0:	469a      	mov	sl, r3
    a5a2:	2b00      	cmp	r3, #0
    a5a4:	d01c      	beq.n	a5e0 <__aeabi_dadd+0x4cc>
    a5a6:	4e61      	ldr	r6, [pc, #388]	; (a72c <__aeabi_dadd+0x618>)
    a5a8:	42b0      	cmp	r0, r6
    a5aa:	d060      	beq.n	a66e <__aeabi_dadd+0x55a>
    a5ac:	4653      	mov	r3, sl
    a5ae:	2b38      	cmp	r3, #56	; 0x38
    a5b0:	dd00      	ble.n	a5b4 <__aeabi_dadd+0x4a0>
    a5b2:	e096      	b.n	a6e2 <__aeabi_dadd+0x5ce>
    a5b4:	2b1f      	cmp	r3, #31
    a5b6:	dd00      	ble.n	a5ba <__aeabi_dadd+0x4a6>
    a5b8:	e09f      	b.n	a6fa <__aeabi_dadd+0x5e6>
    a5ba:	2620      	movs	r6, #32
    a5bc:	1af3      	subs	r3, r6, r3
    a5be:	0026      	movs	r6, r4
    a5c0:	409e      	lsls	r6, r3
    a5c2:	469c      	mov	ip, r3
    a5c4:	46b3      	mov	fp, r6
    a5c6:	4653      	mov	r3, sl
    a5c8:	003e      	movs	r6, r7
    a5ca:	40de      	lsrs	r6, r3
    a5cc:	0033      	movs	r3, r6
    a5ce:	465e      	mov	r6, fp
    a5d0:	431e      	orrs	r6, r3
    a5d2:	4663      	mov	r3, ip
    a5d4:	409f      	lsls	r7, r3
    a5d6:	1e7b      	subs	r3, r7, #1
    a5d8:	419f      	sbcs	r7, r3
    a5da:	4653      	mov	r3, sl
    a5dc:	40dc      	lsrs	r4, r3
    a5de:	4337      	orrs	r7, r6
    a5e0:	18bf      	adds	r7, r7, r2
    a5e2:	4297      	cmp	r7, r2
    a5e4:	4192      	sbcs	r2, r2
    a5e6:	1864      	adds	r4, r4, r1
    a5e8:	4252      	negs	r2, r2
    a5ea:	18a4      	adds	r4, r4, r2
    a5ec:	0006      	movs	r6, r0
    a5ee:	e678      	b.n	a2e2 <__aeabi_dadd+0x1ce>
    a5f0:	4327      	orrs	r7, r4
    a5f2:	1e7c      	subs	r4, r7, #1
    a5f4:	41a7      	sbcs	r7, r4
    a5f6:	2400      	movs	r4, #0
    a5f8:	e737      	b.n	a46a <__aeabi_dadd+0x356>
    a5fa:	4e4c      	ldr	r6, [pc, #304]	; (a72c <__aeabi_dadd+0x618>)
    a5fc:	42b0      	cmp	r0, r6
    a5fe:	d036      	beq.n	a66e <__aeabi_dadd+0x55a>
    a600:	2680      	movs	r6, #128	; 0x80
    a602:	425b      	negs	r3, r3
    a604:	0436      	lsls	r6, r6, #16
    a606:	469a      	mov	sl, r3
    a608:	4334      	orrs	r4, r6
    a60a:	e7cf      	b.n	a5ac <__aeabi_dadd+0x498>
    a60c:	0018      	movs	r0, r3
    a60e:	4310      	orrs	r0, r2
    a610:	d100      	bne.n	a614 <__aeabi_dadd+0x500>
    a612:	e603      	b.n	a21c <__aeabi_dadd+0x108>
    a614:	1ab8      	subs	r0, r7, r2
    a616:	4684      	mov	ip, r0
    a618:	4567      	cmp	r7, ip
    a61a:	41ad      	sbcs	r5, r5
    a61c:	1ae0      	subs	r0, r4, r3
    a61e:	426d      	negs	r5, r5
    a620:	1b40      	subs	r0, r0, r5
    a622:	0205      	lsls	r5, r0, #8
    a624:	d400      	bmi.n	a628 <__aeabi_dadd+0x514>
    a626:	e62c      	b.n	a282 <__aeabi_dadd+0x16e>
    a628:	1bd7      	subs	r7, r2, r7
    a62a:	42ba      	cmp	r2, r7
    a62c:	4192      	sbcs	r2, r2
    a62e:	1b1c      	subs	r4, r3, r4
    a630:	4252      	negs	r2, r2
    a632:	1aa4      	subs	r4, r4, r2
    a634:	46d8      	mov	r8, fp
    a636:	e5f1      	b.n	a21c <__aeabi_dadd+0x108>
    a638:	0018      	movs	r0, r3
    a63a:	4310      	orrs	r0, r2
    a63c:	d100      	bne.n	a640 <__aeabi_dadd+0x52c>
    a63e:	e763      	b.n	a508 <__aeabi_dadd+0x3f4>
    a640:	08f8      	lsrs	r0, r7, #3
    a642:	0767      	lsls	r7, r4, #29
    a644:	4307      	orrs	r7, r0
    a646:	2080      	movs	r0, #128	; 0x80
    a648:	08e4      	lsrs	r4, r4, #3
    a64a:	0300      	lsls	r0, r0, #12
    a64c:	4204      	tst	r4, r0
    a64e:	d008      	beq.n	a662 <__aeabi_dadd+0x54e>
    a650:	08dd      	lsrs	r5, r3, #3
    a652:	4205      	tst	r5, r0
    a654:	d105      	bne.n	a662 <__aeabi_dadd+0x54e>
    a656:	08d2      	lsrs	r2, r2, #3
    a658:	0759      	lsls	r1, r3, #29
    a65a:	4311      	orrs	r1, r2
    a65c:	000f      	movs	r7, r1
    a65e:	002c      	movs	r4, r5
    a660:	46d8      	mov	r8, fp
    a662:	0f7b      	lsrs	r3, r7, #29
    a664:	00e4      	lsls	r4, r4, #3
    a666:	431c      	orrs	r4, r3
    a668:	00ff      	lsls	r7, r7, #3
    a66a:	4e30      	ldr	r6, [pc, #192]	; (a72c <__aeabi_dadd+0x618>)
    a66c:	e5d6      	b.n	a21c <__aeabi_dadd+0x108>
    a66e:	000c      	movs	r4, r1
    a670:	0017      	movs	r7, r2
    a672:	0006      	movs	r6, r0
    a674:	e5d2      	b.n	a21c <__aeabi_dadd+0x108>
    a676:	2b00      	cmp	r3, #0
    a678:	d038      	beq.n	a6ec <__aeabi_dadd+0x5d8>
    a67a:	000b      	movs	r3, r1
    a67c:	4313      	orrs	r3, r2
    a67e:	d100      	bne.n	a682 <__aeabi_dadd+0x56e>
    a680:	e742      	b.n	a508 <__aeabi_dadd+0x3f4>
    a682:	08f8      	lsrs	r0, r7, #3
    a684:	0767      	lsls	r7, r4, #29
    a686:	4307      	orrs	r7, r0
    a688:	2080      	movs	r0, #128	; 0x80
    a68a:	08e4      	lsrs	r4, r4, #3
    a68c:	0300      	lsls	r0, r0, #12
    a68e:	4204      	tst	r4, r0
    a690:	d0e7      	beq.n	a662 <__aeabi_dadd+0x54e>
    a692:	08cb      	lsrs	r3, r1, #3
    a694:	4203      	tst	r3, r0
    a696:	d1e4      	bne.n	a662 <__aeabi_dadd+0x54e>
    a698:	08d2      	lsrs	r2, r2, #3
    a69a:	0749      	lsls	r1, r1, #29
    a69c:	4311      	orrs	r1, r2
    a69e:	000f      	movs	r7, r1
    a6a0:	001c      	movs	r4, r3
    a6a2:	e7de      	b.n	a662 <__aeabi_dadd+0x54e>
    a6a4:	2700      	movs	r7, #0
    a6a6:	2400      	movs	r4, #0
    a6a8:	e5d5      	b.n	a256 <__aeabi_dadd+0x142>
    a6aa:	2100      	movs	r1, #0
    a6ac:	e76b      	b.n	a586 <__aeabi_dadd+0x472>
    a6ae:	2500      	movs	r5, #0
    a6b0:	2700      	movs	r7, #0
    a6b2:	e5f3      	b.n	a29c <__aeabi_dadd+0x188>
    a6b4:	464e      	mov	r6, r9
    a6b6:	0025      	movs	r5, r4
    a6b8:	3e20      	subs	r6, #32
    a6ba:	40f5      	lsrs	r5, r6
    a6bc:	464b      	mov	r3, r9
    a6be:	002e      	movs	r6, r5
    a6c0:	2b20      	cmp	r3, #32
    a6c2:	d02d      	beq.n	a720 <__aeabi_dadd+0x60c>
    a6c4:	2540      	movs	r5, #64	; 0x40
    a6c6:	1aed      	subs	r5, r5, r3
    a6c8:	40ac      	lsls	r4, r5
    a6ca:	4327      	orrs	r7, r4
    a6cc:	1e7c      	subs	r4, r7, #1
    a6ce:	41a7      	sbcs	r7, r4
    a6d0:	2400      	movs	r4, #0
    a6d2:	4337      	orrs	r7, r6
    a6d4:	e6c9      	b.n	a46a <__aeabi_dadd+0x356>
    a6d6:	2480      	movs	r4, #128	; 0x80
    a6d8:	2500      	movs	r5, #0
    a6da:	0324      	lsls	r4, r4, #12
    a6dc:	4e13      	ldr	r6, [pc, #76]	; (a72c <__aeabi_dadd+0x618>)
    a6de:	2700      	movs	r7, #0
    a6e0:	e5dc      	b.n	a29c <__aeabi_dadd+0x188>
    a6e2:	4327      	orrs	r7, r4
    a6e4:	1e7c      	subs	r4, r7, #1
    a6e6:	41a7      	sbcs	r7, r4
    a6e8:	2400      	movs	r4, #0
    a6ea:	e779      	b.n	a5e0 <__aeabi_dadd+0x4cc>
    a6ec:	000c      	movs	r4, r1
    a6ee:	0017      	movs	r7, r2
    a6f0:	4e0e      	ldr	r6, [pc, #56]	; (a72c <__aeabi_dadd+0x618>)
    a6f2:	e593      	b.n	a21c <__aeabi_dadd+0x108>
    a6f4:	000c      	movs	r4, r1
    a6f6:	0017      	movs	r7, r2
    a6f8:	e590      	b.n	a21c <__aeabi_dadd+0x108>
    a6fa:	4656      	mov	r6, sl
    a6fc:	0023      	movs	r3, r4
    a6fe:	3e20      	subs	r6, #32
    a700:	40f3      	lsrs	r3, r6
    a702:	4699      	mov	r9, r3
    a704:	4653      	mov	r3, sl
    a706:	2b20      	cmp	r3, #32
    a708:	d00e      	beq.n	a728 <__aeabi_dadd+0x614>
    a70a:	2340      	movs	r3, #64	; 0x40
    a70c:	4656      	mov	r6, sl
    a70e:	1b9b      	subs	r3, r3, r6
    a710:	409c      	lsls	r4, r3
    a712:	4327      	orrs	r7, r4
    a714:	1e7c      	subs	r4, r7, #1
    a716:	41a7      	sbcs	r7, r4
    a718:	464b      	mov	r3, r9
    a71a:	2400      	movs	r4, #0
    a71c:	431f      	orrs	r7, r3
    a71e:	e75f      	b.n	a5e0 <__aeabi_dadd+0x4cc>
    a720:	2400      	movs	r4, #0
    a722:	e7d2      	b.n	a6ca <__aeabi_dadd+0x5b6>
    a724:	0017      	movs	r7, r2
    a726:	e5b2      	b.n	a28e <__aeabi_dadd+0x17a>
    a728:	2400      	movs	r4, #0
    a72a:	e7f2      	b.n	a712 <__aeabi_dadd+0x5fe>
    a72c:	000007ff 	.word	0x000007ff
    a730:	ff7fffff 	.word	0xff7fffff

0000a734 <__aeabi_ddiv>:
    a734:	b5f0      	push	{r4, r5, r6, r7, lr}
    a736:	4657      	mov	r7, sl
    a738:	4645      	mov	r5, r8
    a73a:	46de      	mov	lr, fp
    a73c:	464e      	mov	r6, r9
    a73e:	b5e0      	push	{r5, r6, r7, lr}
    a740:	004c      	lsls	r4, r1, #1
    a742:	030e      	lsls	r6, r1, #12
    a744:	b087      	sub	sp, #28
    a746:	4683      	mov	fp, r0
    a748:	4692      	mov	sl, r2
    a74a:	001d      	movs	r5, r3
    a74c:	4680      	mov	r8, r0
    a74e:	0b36      	lsrs	r6, r6, #12
    a750:	0d64      	lsrs	r4, r4, #21
    a752:	0fcf      	lsrs	r7, r1, #31
    a754:	2c00      	cmp	r4, #0
    a756:	d04f      	beq.n	a7f8 <__aeabi_ddiv+0xc4>
    a758:	4b6f      	ldr	r3, [pc, #444]	; (a918 <__aeabi_ddiv+0x1e4>)
    a75a:	429c      	cmp	r4, r3
    a75c:	d035      	beq.n	a7ca <__aeabi_ddiv+0x96>
    a75e:	2380      	movs	r3, #128	; 0x80
    a760:	0f42      	lsrs	r2, r0, #29
    a762:	041b      	lsls	r3, r3, #16
    a764:	00f6      	lsls	r6, r6, #3
    a766:	4313      	orrs	r3, r2
    a768:	4333      	orrs	r3, r6
    a76a:	4699      	mov	r9, r3
    a76c:	00c3      	lsls	r3, r0, #3
    a76e:	4698      	mov	r8, r3
    a770:	4b6a      	ldr	r3, [pc, #424]	; (a91c <__aeabi_ddiv+0x1e8>)
    a772:	2600      	movs	r6, #0
    a774:	469c      	mov	ip, r3
    a776:	2300      	movs	r3, #0
    a778:	4464      	add	r4, ip
    a77a:	9303      	str	r3, [sp, #12]
    a77c:	032b      	lsls	r3, r5, #12
    a77e:	0b1b      	lsrs	r3, r3, #12
    a780:	469b      	mov	fp, r3
    a782:	006b      	lsls	r3, r5, #1
    a784:	0fed      	lsrs	r5, r5, #31
    a786:	4650      	mov	r0, sl
    a788:	0d5b      	lsrs	r3, r3, #21
    a78a:	9501      	str	r5, [sp, #4]
    a78c:	d05e      	beq.n	a84c <__aeabi_ddiv+0x118>
    a78e:	4a62      	ldr	r2, [pc, #392]	; (a918 <__aeabi_ddiv+0x1e4>)
    a790:	4293      	cmp	r3, r2
    a792:	d053      	beq.n	a83c <__aeabi_ddiv+0x108>
    a794:	465a      	mov	r2, fp
    a796:	00d1      	lsls	r1, r2, #3
    a798:	2280      	movs	r2, #128	; 0x80
    a79a:	0f40      	lsrs	r0, r0, #29
    a79c:	0412      	lsls	r2, r2, #16
    a79e:	4302      	orrs	r2, r0
    a7a0:	430a      	orrs	r2, r1
    a7a2:	4693      	mov	fp, r2
    a7a4:	4652      	mov	r2, sl
    a7a6:	00d1      	lsls	r1, r2, #3
    a7a8:	4a5c      	ldr	r2, [pc, #368]	; (a91c <__aeabi_ddiv+0x1e8>)
    a7aa:	4694      	mov	ip, r2
    a7ac:	2200      	movs	r2, #0
    a7ae:	4463      	add	r3, ip
    a7b0:	0038      	movs	r0, r7
    a7b2:	4068      	eors	r0, r5
    a7b4:	4684      	mov	ip, r0
    a7b6:	9002      	str	r0, [sp, #8]
    a7b8:	1ae4      	subs	r4, r4, r3
    a7ba:	4316      	orrs	r6, r2
    a7bc:	2e0f      	cmp	r6, #15
    a7be:	d900      	bls.n	a7c2 <__aeabi_ddiv+0x8e>
    a7c0:	e0b4      	b.n	a92c <__aeabi_ddiv+0x1f8>
    a7c2:	4b57      	ldr	r3, [pc, #348]	; (a920 <__aeabi_ddiv+0x1ec>)
    a7c4:	00b6      	lsls	r6, r6, #2
    a7c6:	599b      	ldr	r3, [r3, r6]
    a7c8:	469f      	mov	pc, r3
    a7ca:	0003      	movs	r3, r0
    a7cc:	4333      	orrs	r3, r6
    a7ce:	4699      	mov	r9, r3
    a7d0:	d16c      	bne.n	a8ac <__aeabi_ddiv+0x178>
    a7d2:	2300      	movs	r3, #0
    a7d4:	4698      	mov	r8, r3
    a7d6:	3302      	adds	r3, #2
    a7d8:	2608      	movs	r6, #8
    a7da:	9303      	str	r3, [sp, #12]
    a7dc:	e7ce      	b.n	a77c <__aeabi_ddiv+0x48>
    a7de:	46cb      	mov	fp, r9
    a7e0:	4641      	mov	r1, r8
    a7e2:	9a03      	ldr	r2, [sp, #12]
    a7e4:	9701      	str	r7, [sp, #4]
    a7e6:	2a02      	cmp	r2, #2
    a7e8:	d165      	bne.n	a8b6 <__aeabi_ddiv+0x182>
    a7ea:	9b01      	ldr	r3, [sp, #4]
    a7ec:	4c4a      	ldr	r4, [pc, #296]	; (a918 <__aeabi_ddiv+0x1e4>)
    a7ee:	469c      	mov	ip, r3
    a7f0:	2300      	movs	r3, #0
    a7f2:	2200      	movs	r2, #0
    a7f4:	4698      	mov	r8, r3
    a7f6:	e06b      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    a7f8:	0003      	movs	r3, r0
    a7fa:	4333      	orrs	r3, r6
    a7fc:	4699      	mov	r9, r3
    a7fe:	d04e      	beq.n	a89e <__aeabi_ddiv+0x16a>
    a800:	2e00      	cmp	r6, #0
    a802:	d100      	bne.n	a806 <__aeabi_ddiv+0xd2>
    a804:	e1bc      	b.n	ab80 <__aeabi_ddiv+0x44c>
    a806:	0030      	movs	r0, r6
    a808:	f001 fb08 	bl	be1c <__clzsi2>
    a80c:	0003      	movs	r3, r0
    a80e:	3b0b      	subs	r3, #11
    a810:	2b1c      	cmp	r3, #28
    a812:	dd00      	ble.n	a816 <__aeabi_ddiv+0xe2>
    a814:	e1ac      	b.n	ab70 <__aeabi_ddiv+0x43c>
    a816:	221d      	movs	r2, #29
    a818:	1ad3      	subs	r3, r2, r3
    a81a:	465a      	mov	r2, fp
    a81c:	0001      	movs	r1, r0
    a81e:	40da      	lsrs	r2, r3
    a820:	3908      	subs	r1, #8
    a822:	408e      	lsls	r6, r1
    a824:	0013      	movs	r3, r2
    a826:	4333      	orrs	r3, r6
    a828:	4699      	mov	r9, r3
    a82a:	465b      	mov	r3, fp
    a82c:	408b      	lsls	r3, r1
    a82e:	4698      	mov	r8, r3
    a830:	2300      	movs	r3, #0
    a832:	4c3c      	ldr	r4, [pc, #240]	; (a924 <__aeabi_ddiv+0x1f0>)
    a834:	2600      	movs	r6, #0
    a836:	1a24      	subs	r4, r4, r0
    a838:	9303      	str	r3, [sp, #12]
    a83a:	e79f      	b.n	a77c <__aeabi_ddiv+0x48>
    a83c:	4651      	mov	r1, sl
    a83e:	465a      	mov	r2, fp
    a840:	4311      	orrs	r1, r2
    a842:	d129      	bne.n	a898 <__aeabi_ddiv+0x164>
    a844:	2200      	movs	r2, #0
    a846:	4693      	mov	fp, r2
    a848:	3202      	adds	r2, #2
    a84a:	e7b1      	b.n	a7b0 <__aeabi_ddiv+0x7c>
    a84c:	4659      	mov	r1, fp
    a84e:	4301      	orrs	r1, r0
    a850:	d01e      	beq.n	a890 <__aeabi_ddiv+0x15c>
    a852:	465b      	mov	r3, fp
    a854:	2b00      	cmp	r3, #0
    a856:	d100      	bne.n	a85a <__aeabi_ddiv+0x126>
    a858:	e19e      	b.n	ab98 <__aeabi_ddiv+0x464>
    a85a:	4658      	mov	r0, fp
    a85c:	f001 fade 	bl	be1c <__clzsi2>
    a860:	0003      	movs	r3, r0
    a862:	3b0b      	subs	r3, #11
    a864:	2b1c      	cmp	r3, #28
    a866:	dd00      	ble.n	a86a <__aeabi_ddiv+0x136>
    a868:	e18f      	b.n	ab8a <__aeabi_ddiv+0x456>
    a86a:	0002      	movs	r2, r0
    a86c:	4659      	mov	r1, fp
    a86e:	3a08      	subs	r2, #8
    a870:	4091      	lsls	r1, r2
    a872:	468b      	mov	fp, r1
    a874:	211d      	movs	r1, #29
    a876:	1acb      	subs	r3, r1, r3
    a878:	4651      	mov	r1, sl
    a87a:	40d9      	lsrs	r1, r3
    a87c:	000b      	movs	r3, r1
    a87e:	4659      	mov	r1, fp
    a880:	430b      	orrs	r3, r1
    a882:	4651      	mov	r1, sl
    a884:	469b      	mov	fp, r3
    a886:	4091      	lsls	r1, r2
    a888:	4b26      	ldr	r3, [pc, #152]	; (a924 <__aeabi_ddiv+0x1f0>)
    a88a:	2200      	movs	r2, #0
    a88c:	1a1b      	subs	r3, r3, r0
    a88e:	e78f      	b.n	a7b0 <__aeabi_ddiv+0x7c>
    a890:	2300      	movs	r3, #0
    a892:	2201      	movs	r2, #1
    a894:	469b      	mov	fp, r3
    a896:	e78b      	b.n	a7b0 <__aeabi_ddiv+0x7c>
    a898:	4651      	mov	r1, sl
    a89a:	2203      	movs	r2, #3
    a89c:	e788      	b.n	a7b0 <__aeabi_ddiv+0x7c>
    a89e:	2300      	movs	r3, #0
    a8a0:	4698      	mov	r8, r3
    a8a2:	3301      	adds	r3, #1
    a8a4:	2604      	movs	r6, #4
    a8a6:	2400      	movs	r4, #0
    a8a8:	9303      	str	r3, [sp, #12]
    a8aa:	e767      	b.n	a77c <__aeabi_ddiv+0x48>
    a8ac:	2303      	movs	r3, #3
    a8ae:	46b1      	mov	r9, r6
    a8b0:	9303      	str	r3, [sp, #12]
    a8b2:	260c      	movs	r6, #12
    a8b4:	e762      	b.n	a77c <__aeabi_ddiv+0x48>
    a8b6:	2a03      	cmp	r2, #3
    a8b8:	d100      	bne.n	a8bc <__aeabi_ddiv+0x188>
    a8ba:	e25c      	b.n	ad76 <__aeabi_ddiv+0x642>
    a8bc:	9b01      	ldr	r3, [sp, #4]
    a8be:	2a01      	cmp	r2, #1
    a8c0:	d000      	beq.n	a8c4 <__aeabi_ddiv+0x190>
    a8c2:	e1e4      	b.n	ac8e <__aeabi_ddiv+0x55a>
    a8c4:	4013      	ands	r3, r2
    a8c6:	469c      	mov	ip, r3
    a8c8:	2300      	movs	r3, #0
    a8ca:	2400      	movs	r4, #0
    a8cc:	2200      	movs	r2, #0
    a8ce:	4698      	mov	r8, r3
    a8d0:	2100      	movs	r1, #0
    a8d2:	0312      	lsls	r2, r2, #12
    a8d4:	0b13      	lsrs	r3, r2, #12
    a8d6:	0d0a      	lsrs	r2, r1, #20
    a8d8:	0512      	lsls	r2, r2, #20
    a8da:	431a      	orrs	r2, r3
    a8dc:	0523      	lsls	r3, r4, #20
    a8de:	4c12      	ldr	r4, [pc, #72]	; (a928 <__aeabi_ddiv+0x1f4>)
    a8e0:	4640      	mov	r0, r8
    a8e2:	4022      	ands	r2, r4
    a8e4:	4313      	orrs	r3, r2
    a8e6:	4662      	mov	r2, ip
    a8e8:	005b      	lsls	r3, r3, #1
    a8ea:	07d2      	lsls	r2, r2, #31
    a8ec:	085b      	lsrs	r3, r3, #1
    a8ee:	4313      	orrs	r3, r2
    a8f0:	0019      	movs	r1, r3
    a8f2:	b007      	add	sp, #28
    a8f4:	bc3c      	pop	{r2, r3, r4, r5}
    a8f6:	4690      	mov	r8, r2
    a8f8:	4699      	mov	r9, r3
    a8fa:	46a2      	mov	sl, r4
    a8fc:	46ab      	mov	fp, r5
    a8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a900:	2300      	movs	r3, #0
    a902:	2280      	movs	r2, #128	; 0x80
    a904:	469c      	mov	ip, r3
    a906:	0312      	lsls	r2, r2, #12
    a908:	4698      	mov	r8, r3
    a90a:	4c03      	ldr	r4, [pc, #12]	; (a918 <__aeabi_ddiv+0x1e4>)
    a90c:	e7e0      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    a90e:	2300      	movs	r3, #0
    a910:	4c01      	ldr	r4, [pc, #4]	; (a918 <__aeabi_ddiv+0x1e4>)
    a912:	2200      	movs	r2, #0
    a914:	4698      	mov	r8, r3
    a916:	e7db      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    a918:	000007ff 	.word	0x000007ff
    a91c:	fffffc01 	.word	0xfffffc01
    a920:	00011268 	.word	0x00011268
    a924:	fffffc0d 	.word	0xfffffc0d
    a928:	800fffff 	.word	0x800fffff
    a92c:	45d9      	cmp	r9, fp
    a92e:	d900      	bls.n	a932 <__aeabi_ddiv+0x1fe>
    a930:	e139      	b.n	aba6 <__aeabi_ddiv+0x472>
    a932:	d100      	bne.n	a936 <__aeabi_ddiv+0x202>
    a934:	e134      	b.n	aba0 <__aeabi_ddiv+0x46c>
    a936:	2300      	movs	r3, #0
    a938:	4646      	mov	r6, r8
    a93a:	464d      	mov	r5, r9
    a93c:	469a      	mov	sl, r3
    a93e:	3c01      	subs	r4, #1
    a940:	465b      	mov	r3, fp
    a942:	0e0a      	lsrs	r2, r1, #24
    a944:	021b      	lsls	r3, r3, #8
    a946:	431a      	orrs	r2, r3
    a948:	020b      	lsls	r3, r1, #8
    a94a:	0c17      	lsrs	r7, r2, #16
    a94c:	9303      	str	r3, [sp, #12]
    a94e:	0413      	lsls	r3, r2, #16
    a950:	0c1b      	lsrs	r3, r3, #16
    a952:	0039      	movs	r1, r7
    a954:	0028      	movs	r0, r5
    a956:	4690      	mov	r8, r2
    a958:	9301      	str	r3, [sp, #4]
    a95a:	f7fe f9d9 	bl	8d10 <__udivsi3>
    a95e:	0002      	movs	r2, r0
    a960:	9b01      	ldr	r3, [sp, #4]
    a962:	4683      	mov	fp, r0
    a964:	435a      	muls	r2, r3
    a966:	0028      	movs	r0, r5
    a968:	0039      	movs	r1, r7
    a96a:	4691      	mov	r9, r2
    a96c:	f7fe fa56 	bl	8e1c <__aeabi_uidivmod>
    a970:	0c35      	lsrs	r5, r6, #16
    a972:	0409      	lsls	r1, r1, #16
    a974:	430d      	orrs	r5, r1
    a976:	45a9      	cmp	r9, r5
    a978:	d90d      	bls.n	a996 <__aeabi_ddiv+0x262>
    a97a:	465b      	mov	r3, fp
    a97c:	4445      	add	r5, r8
    a97e:	3b01      	subs	r3, #1
    a980:	45a8      	cmp	r8, r5
    a982:	d900      	bls.n	a986 <__aeabi_ddiv+0x252>
    a984:	e13a      	b.n	abfc <__aeabi_ddiv+0x4c8>
    a986:	45a9      	cmp	r9, r5
    a988:	d800      	bhi.n	a98c <__aeabi_ddiv+0x258>
    a98a:	e137      	b.n	abfc <__aeabi_ddiv+0x4c8>
    a98c:	2302      	movs	r3, #2
    a98e:	425b      	negs	r3, r3
    a990:	469c      	mov	ip, r3
    a992:	4445      	add	r5, r8
    a994:	44e3      	add	fp, ip
    a996:	464b      	mov	r3, r9
    a998:	1aeb      	subs	r3, r5, r3
    a99a:	0039      	movs	r1, r7
    a99c:	0018      	movs	r0, r3
    a99e:	9304      	str	r3, [sp, #16]
    a9a0:	f7fe f9b6 	bl	8d10 <__udivsi3>
    a9a4:	9b01      	ldr	r3, [sp, #4]
    a9a6:	0005      	movs	r5, r0
    a9a8:	4343      	muls	r3, r0
    a9aa:	0039      	movs	r1, r7
    a9ac:	9804      	ldr	r0, [sp, #16]
    a9ae:	4699      	mov	r9, r3
    a9b0:	f7fe fa34 	bl	8e1c <__aeabi_uidivmod>
    a9b4:	0433      	lsls	r3, r6, #16
    a9b6:	0409      	lsls	r1, r1, #16
    a9b8:	0c1b      	lsrs	r3, r3, #16
    a9ba:	430b      	orrs	r3, r1
    a9bc:	4599      	cmp	r9, r3
    a9be:	d909      	bls.n	a9d4 <__aeabi_ddiv+0x2a0>
    a9c0:	4443      	add	r3, r8
    a9c2:	1e6a      	subs	r2, r5, #1
    a9c4:	4598      	cmp	r8, r3
    a9c6:	d900      	bls.n	a9ca <__aeabi_ddiv+0x296>
    a9c8:	e11a      	b.n	ac00 <__aeabi_ddiv+0x4cc>
    a9ca:	4599      	cmp	r9, r3
    a9cc:	d800      	bhi.n	a9d0 <__aeabi_ddiv+0x29c>
    a9ce:	e117      	b.n	ac00 <__aeabi_ddiv+0x4cc>
    a9d0:	3d02      	subs	r5, #2
    a9d2:	4443      	add	r3, r8
    a9d4:	464a      	mov	r2, r9
    a9d6:	1a9b      	subs	r3, r3, r2
    a9d8:	465a      	mov	r2, fp
    a9da:	0412      	lsls	r2, r2, #16
    a9dc:	432a      	orrs	r2, r5
    a9de:	9903      	ldr	r1, [sp, #12]
    a9e0:	4693      	mov	fp, r2
    a9e2:	0c10      	lsrs	r0, r2, #16
    a9e4:	0c0a      	lsrs	r2, r1, #16
    a9e6:	4691      	mov	r9, r2
    a9e8:	0409      	lsls	r1, r1, #16
    a9ea:	465a      	mov	r2, fp
    a9ec:	0c09      	lsrs	r1, r1, #16
    a9ee:	464e      	mov	r6, r9
    a9f0:	000d      	movs	r5, r1
    a9f2:	0412      	lsls	r2, r2, #16
    a9f4:	0c12      	lsrs	r2, r2, #16
    a9f6:	4345      	muls	r5, r0
    a9f8:	9105      	str	r1, [sp, #20]
    a9fa:	4351      	muls	r1, r2
    a9fc:	4372      	muls	r2, r6
    a9fe:	4370      	muls	r0, r6
    aa00:	1952      	adds	r2, r2, r5
    aa02:	0c0e      	lsrs	r6, r1, #16
    aa04:	18b2      	adds	r2, r6, r2
    aa06:	4295      	cmp	r5, r2
    aa08:	d903      	bls.n	aa12 <__aeabi_ddiv+0x2de>
    aa0a:	2580      	movs	r5, #128	; 0x80
    aa0c:	026d      	lsls	r5, r5, #9
    aa0e:	46ac      	mov	ip, r5
    aa10:	4460      	add	r0, ip
    aa12:	0c15      	lsrs	r5, r2, #16
    aa14:	0409      	lsls	r1, r1, #16
    aa16:	0412      	lsls	r2, r2, #16
    aa18:	0c09      	lsrs	r1, r1, #16
    aa1a:	1828      	adds	r0, r5, r0
    aa1c:	1852      	adds	r2, r2, r1
    aa1e:	4283      	cmp	r3, r0
    aa20:	d200      	bcs.n	aa24 <__aeabi_ddiv+0x2f0>
    aa22:	e0ce      	b.n	abc2 <__aeabi_ddiv+0x48e>
    aa24:	d100      	bne.n	aa28 <__aeabi_ddiv+0x2f4>
    aa26:	e0c8      	b.n	abba <__aeabi_ddiv+0x486>
    aa28:	1a1d      	subs	r5, r3, r0
    aa2a:	4653      	mov	r3, sl
    aa2c:	1a9e      	subs	r6, r3, r2
    aa2e:	45b2      	cmp	sl, r6
    aa30:	4192      	sbcs	r2, r2
    aa32:	4252      	negs	r2, r2
    aa34:	1aab      	subs	r3, r5, r2
    aa36:	469a      	mov	sl, r3
    aa38:	4598      	cmp	r8, r3
    aa3a:	d100      	bne.n	aa3e <__aeabi_ddiv+0x30a>
    aa3c:	e117      	b.n	ac6e <__aeabi_ddiv+0x53a>
    aa3e:	0039      	movs	r1, r7
    aa40:	0018      	movs	r0, r3
    aa42:	f7fe f965 	bl	8d10 <__udivsi3>
    aa46:	9b01      	ldr	r3, [sp, #4]
    aa48:	0005      	movs	r5, r0
    aa4a:	4343      	muls	r3, r0
    aa4c:	0039      	movs	r1, r7
    aa4e:	4650      	mov	r0, sl
    aa50:	9304      	str	r3, [sp, #16]
    aa52:	f7fe f9e3 	bl	8e1c <__aeabi_uidivmod>
    aa56:	9804      	ldr	r0, [sp, #16]
    aa58:	040b      	lsls	r3, r1, #16
    aa5a:	0c31      	lsrs	r1, r6, #16
    aa5c:	4319      	orrs	r1, r3
    aa5e:	4288      	cmp	r0, r1
    aa60:	d909      	bls.n	aa76 <__aeabi_ddiv+0x342>
    aa62:	4441      	add	r1, r8
    aa64:	1e6b      	subs	r3, r5, #1
    aa66:	4588      	cmp	r8, r1
    aa68:	d900      	bls.n	aa6c <__aeabi_ddiv+0x338>
    aa6a:	e107      	b.n	ac7c <__aeabi_ddiv+0x548>
    aa6c:	4288      	cmp	r0, r1
    aa6e:	d800      	bhi.n	aa72 <__aeabi_ddiv+0x33e>
    aa70:	e104      	b.n	ac7c <__aeabi_ddiv+0x548>
    aa72:	3d02      	subs	r5, #2
    aa74:	4441      	add	r1, r8
    aa76:	9b04      	ldr	r3, [sp, #16]
    aa78:	1acb      	subs	r3, r1, r3
    aa7a:	0018      	movs	r0, r3
    aa7c:	0039      	movs	r1, r7
    aa7e:	9304      	str	r3, [sp, #16]
    aa80:	f7fe f946 	bl	8d10 <__udivsi3>
    aa84:	9b01      	ldr	r3, [sp, #4]
    aa86:	4682      	mov	sl, r0
    aa88:	4343      	muls	r3, r0
    aa8a:	0039      	movs	r1, r7
    aa8c:	9804      	ldr	r0, [sp, #16]
    aa8e:	9301      	str	r3, [sp, #4]
    aa90:	f7fe f9c4 	bl	8e1c <__aeabi_uidivmod>
    aa94:	9801      	ldr	r0, [sp, #4]
    aa96:	040b      	lsls	r3, r1, #16
    aa98:	0431      	lsls	r1, r6, #16
    aa9a:	0c09      	lsrs	r1, r1, #16
    aa9c:	4319      	orrs	r1, r3
    aa9e:	4288      	cmp	r0, r1
    aaa0:	d90d      	bls.n	aabe <__aeabi_ddiv+0x38a>
    aaa2:	4653      	mov	r3, sl
    aaa4:	4441      	add	r1, r8
    aaa6:	3b01      	subs	r3, #1
    aaa8:	4588      	cmp	r8, r1
    aaaa:	d900      	bls.n	aaae <__aeabi_ddiv+0x37a>
    aaac:	e0e8      	b.n	ac80 <__aeabi_ddiv+0x54c>
    aaae:	4288      	cmp	r0, r1
    aab0:	d800      	bhi.n	aab4 <__aeabi_ddiv+0x380>
    aab2:	e0e5      	b.n	ac80 <__aeabi_ddiv+0x54c>
    aab4:	2302      	movs	r3, #2
    aab6:	425b      	negs	r3, r3
    aab8:	469c      	mov	ip, r3
    aaba:	4441      	add	r1, r8
    aabc:	44e2      	add	sl, ip
    aabe:	9b01      	ldr	r3, [sp, #4]
    aac0:	042d      	lsls	r5, r5, #16
    aac2:	1ace      	subs	r6, r1, r3
    aac4:	4651      	mov	r1, sl
    aac6:	4329      	orrs	r1, r5
    aac8:	9d05      	ldr	r5, [sp, #20]
    aaca:	464f      	mov	r7, r9
    aacc:	002a      	movs	r2, r5
    aace:	040b      	lsls	r3, r1, #16
    aad0:	0c08      	lsrs	r0, r1, #16
    aad2:	0c1b      	lsrs	r3, r3, #16
    aad4:	435a      	muls	r2, r3
    aad6:	4345      	muls	r5, r0
    aad8:	437b      	muls	r3, r7
    aada:	4378      	muls	r0, r7
    aadc:	195b      	adds	r3, r3, r5
    aade:	0c17      	lsrs	r7, r2, #16
    aae0:	18fb      	adds	r3, r7, r3
    aae2:	429d      	cmp	r5, r3
    aae4:	d903      	bls.n	aaee <__aeabi_ddiv+0x3ba>
    aae6:	2580      	movs	r5, #128	; 0x80
    aae8:	026d      	lsls	r5, r5, #9
    aaea:	46ac      	mov	ip, r5
    aaec:	4460      	add	r0, ip
    aaee:	0c1d      	lsrs	r5, r3, #16
    aaf0:	0412      	lsls	r2, r2, #16
    aaf2:	041b      	lsls	r3, r3, #16
    aaf4:	0c12      	lsrs	r2, r2, #16
    aaf6:	1828      	adds	r0, r5, r0
    aaf8:	189b      	adds	r3, r3, r2
    aafa:	4286      	cmp	r6, r0
    aafc:	d200      	bcs.n	ab00 <__aeabi_ddiv+0x3cc>
    aafe:	e093      	b.n	ac28 <__aeabi_ddiv+0x4f4>
    ab00:	d100      	bne.n	ab04 <__aeabi_ddiv+0x3d0>
    ab02:	e08e      	b.n	ac22 <__aeabi_ddiv+0x4ee>
    ab04:	2301      	movs	r3, #1
    ab06:	4319      	orrs	r1, r3
    ab08:	4ba0      	ldr	r3, [pc, #640]	; (ad8c <__aeabi_ddiv+0x658>)
    ab0a:	18e3      	adds	r3, r4, r3
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	dc00      	bgt.n	ab12 <__aeabi_ddiv+0x3de>
    ab10:	e099      	b.n	ac46 <__aeabi_ddiv+0x512>
    ab12:	074a      	lsls	r2, r1, #29
    ab14:	d000      	beq.n	ab18 <__aeabi_ddiv+0x3e4>
    ab16:	e09e      	b.n	ac56 <__aeabi_ddiv+0x522>
    ab18:	465a      	mov	r2, fp
    ab1a:	01d2      	lsls	r2, r2, #7
    ab1c:	d506      	bpl.n	ab2c <__aeabi_ddiv+0x3f8>
    ab1e:	465a      	mov	r2, fp
    ab20:	4b9b      	ldr	r3, [pc, #620]	; (ad90 <__aeabi_ddiv+0x65c>)
    ab22:	401a      	ands	r2, r3
    ab24:	2380      	movs	r3, #128	; 0x80
    ab26:	4693      	mov	fp, r2
    ab28:	00db      	lsls	r3, r3, #3
    ab2a:	18e3      	adds	r3, r4, r3
    ab2c:	4a99      	ldr	r2, [pc, #612]	; (ad94 <__aeabi_ddiv+0x660>)
    ab2e:	4293      	cmp	r3, r2
    ab30:	dd68      	ble.n	ac04 <__aeabi_ddiv+0x4d0>
    ab32:	2301      	movs	r3, #1
    ab34:	9a02      	ldr	r2, [sp, #8]
    ab36:	4c98      	ldr	r4, [pc, #608]	; (ad98 <__aeabi_ddiv+0x664>)
    ab38:	401a      	ands	r2, r3
    ab3a:	2300      	movs	r3, #0
    ab3c:	4694      	mov	ip, r2
    ab3e:	4698      	mov	r8, r3
    ab40:	2200      	movs	r2, #0
    ab42:	e6c5      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ab44:	2280      	movs	r2, #128	; 0x80
    ab46:	464b      	mov	r3, r9
    ab48:	0312      	lsls	r2, r2, #12
    ab4a:	4213      	tst	r3, r2
    ab4c:	d00a      	beq.n	ab64 <__aeabi_ddiv+0x430>
    ab4e:	465b      	mov	r3, fp
    ab50:	4213      	tst	r3, r2
    ab52:	d106      	bne.n	ab62 <__aeabi_ddiv+0x42e>
    ab54:	431a      	orrs	r2, r3
    ab56:	0312      	lsls	r2, r2, #12
    ab58:	0b12      	lsrs	r2, r2, #12
    ab5a:	46ac      	mov	ip, r5
    ab5c:	4688      	mov	r8, r1
    ab5e:	4c8e      	ldr	r4, [pc, #568]	; (ad98 <__aeabi_ddiv+0x664>)
    ab60:	e6b6      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ab62:	464b      	mov	r3, r9
    ab64:	431a      	orrs	r2, r3
    ab66:	0312      	lsls	r2, r2, #12
    ab68:	0b12      	lsrs	r2, r2, #12
    ab6a:	46bc      	mov	ip, r7
    ab6c:	4c8a      	ldr	r4, [pc, #552]	; (ad98 <__aeabi_ddiv+0x664>)
    ab6e:	e6af      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ab70:	0003      	movs	r3, r0
    ab72:	465a      	mov	r2, fp
    ab74:	3b28      	subs	r3, #40	; 0x28
    ab76:	409a      	lsls	r2, r3
    ab78:	2300      	movs	r3, #0
    ab7a:	4691      	mov	r9, r2
    ab7c:	4698      	mov	r8, r3
    ab7e:	e657      	b.n	a830 <__aeabi_ddiv+0xfc>
    ab80:	4658      	mov	r0, fp
    ab82:	f001 f94b 	bl	be1c <__clzsi2>
    ab86:	3020      	adds	r0, #32
    ab88:	e640      	b.n	a80c <__aeabi_ddiv+0xd8>
    ab8a:	0003      	movs	r3, r0
    ab8c:	4652      	mov	r2, sl
    ab8e:	3b28      	subs	r3, #40	; 0x28
    ab90:	409a      	lsls	r2, r3
    ab92:	2100      	movs	r1, #0
    ab94:	4693      	mov	fp, r2
    ab96:	e677      	b.n	a888 <__aeabi_ddiv+0x154>
    ab98:	f001 f940 	bl	be1c <__clzsi2>
    ab9c:	3020      	adds	r0, #32
    ab9e:	e65f      	b.n	a860 <__aeabi_ddiv+0x12c>
    aba0:	4588      	cmp	r8, r1
    aba2:	d200      	bcs.n	aba6 <__aeabi_ddiv+0x472>
    aba4:	e6c7      	b.n	a936 <__aeabi_ddiv+0x202>
    aba6:	464b      	mov	r3, r9
    aba8:	07de      	lsls	r6, r3, #31
    abaa:	085d      	lsrs	r5, r3, #1
    abac:	4643      	mov	r3, r8
    abae:	085b      	lsrs	r3, r3, #1
    abb0:	431e      	orrs	r6, r3
    abb2:	4643      	mov	r3, r8
    abb4:	07db      	lsls	r3, r3, #31
    abb6:	469a      	mov	sl, r3
    abb8:	e6c2      	b.n	a940 <__aeabi_ddiv+0x20c>
    abba:	2500      	movs	r5, #0
    abbc:	4592      	cmp	sl, r2
    abbe:	d300      	bcc.n	abc2 <__aeabi_ddiv+0x48e>
    abc0:	e733      	b.n	aa2a <__aeabi_ddiv+0x2f6>
    abc2:	9e03      	ldr	r6, [sp, #12]
    abc4:	4659      	mov	r1, fp
    abc6:	46b4      	mov	ip, r6
    abc8:	44e2      	add	sl, ip
    abca:	45b2      	cmp	sl, r6
    abcc:	41ad      	sbcs	r5, r5
    abce:	426d      	negs	r5, r5
    abd0:	4445      	add	r5, r8
    abd2:	18eb      	adds	r3, r5, r3
    abd4:	3901      	subs	r1, #1
    abd6:	4598      	cmp	r8, r3
    abd8:	d207      	bcs.n	abea <__aeabi_ddiv+0x4b6>
    abda:	4298      	cmp	r0, r3
    abdc:	d900      	bls.n	abe0 <__aeabi_ddiv+0x4ac>
    abde:	e07f      	b.n	ace0 <__aeabi_ddiv+0x5ac>
    abe0:	d100      	bne.n	abe4 <__aeabi_ddiv+0x4b0>
    abe2:	e0bc      	b.n	ad5e <__aeabi_ddiv+0x62a>
    abe4:	1a1d      	subs	r5, r3, r0
    abe6:	468b      	mov	fp, r1
    abe8:	e71f      	b.n	aa2a <__aeabi_ddiv+0x2f6>
    abea:	4598      	cmp	r8, r3
    abec:	d1fa      	bne.n	abe4 <__aeabi_ddiv+0x4b0>
    abee:	9d03      	ldr	r5, [sp, #12]
    abf0:	4555      	cmp	r5, sl
    abf2:	d9f2      	bls.n	abda <__aeabi_ddiv+0x4a6>
    abf4:	4643      	mov	r3, r8
    abf6:	468b      	mov	fp, r1
    abf8:	1a1d      	subs	r5, r3, r0
    abfa:	e716      	b.n	aa2a <__aeabi_ddiv+0x2f6>
    abfc:	469b      	mov	fp, r3
    abfe:	e6ca      	b.n	a996 <__aeabi_ddiv+0x262>
    ac00:	0015      	movs	r5, r2
    ac02:	e6e7      	b.n	a9d4 <__aeabi_ddiv+0x2a0>
    ac04:	465a      	mov	r2, fp
    ac06:	08c9      	lsrs	r1, r1, #3
    ac08:	0752      	lsls	r2, r2, #29
    ac0a:	430a      	orrs	r2, r1
    ac0c:	055b      	lsls	r3, r3, #21
    ac0e:	4690      	mov	r8, r2
    ac10:	0d5c      	lsrs	r4, r3, #21
    ac12:	465a      	mov	r2, fp
    ac14:	2301      	movs	r3, #1
    ac16:	9902      	ldr	r1, [sp, #8]
    ac18:	0252      	lsls	r2, r2, #9
    ac1a:	4019      	ands	r1, r3
    ac1c:	0b12      	lsrs	r2, r2, #12
    ac1e:	468c      	mov	ip, r1
    ac20:	e656      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ac22:	2b00      	cmp	r3, #0
    ac24:	d100      	bne.n	ac28 <__aeabi_ddiv+0x4f4>
    ac26:	e76f      	b.n	ab08 <__aeabi_ddiv+0x3d4>
    ac28:	4446      	add	r6, r8
    ac2a:	1e4a      	subs	r2, r1, #1
    ac2c:	45b0      	cmp	r8, r6
    ac2e:	d929      	bls.n	ac84 <__aeabi_ddiv+0x550>
    ac30:	0011      	movs	r1, r2
    ac32:	4286      	cmp	r6, r0
    ac34:	d000      	beq.n	ac38 <__aeabi_ddiv+0x504>
    ac36:	e765      	b.n	ab04 <__aeabi_ddiv+0x3d0>
    ac38:	9a03      	ldr	r2, [sp, #12]
    ac3a:	4293      	cmp	r3, r2
    ac3c:	d000      	beq.n	ac40 <__aeabi_ddiv+0x50c>
    ac3e:	e761      	b.n	ab04 <__aeabi_ddiv+0x3d0>
    ac40:	e762      	b.n	ab08 <__aeabi_ddiv+0x3d4>
    ac42:	2101      	movs	r1, #1
    ac44:	4249      	negs	r1, r1
    ac46:	2001      	movs	r0, #1
    ac48:	1ac2      	subs	r2, r0, r3
    ac4a:	2a38      	cmp	r2, #56	; 0x38
    ac4c:	dd21      	ble.n	ac92 <__aeabi_ddiv+0x55e>
    ac4e:	9b02      	ldr	r3, [sp, #8]
    ac50:	4003      	ands	r3, r0
    ac52:	469c      	mov	ip, r3
    ac54:	e638      	b.n	a8c8 <__aeabi_ddiv+0x194>
    ac56:	220f      	movs	r2, #15
    ac58:	400a      	ands	r2, r1
    ac5a:	2a04      	cmp	r2, #4
    ac5c:	d100      	bne.n	ac60 <__aeabi_ddiv+0x52c>
    ac5e:	e75b      	b.n	ab18 <__aeabi_ddiv+0x3e4>
    ac60:	000a      	movs	r2, r1
    ac62:	1d11      	adds	r1, r2, #4
    ac64:	4291      	cmp	r1, r2
    ac66:	4192      	sbcs	r2, r2
    ac68:	4252      	negs	r2, r2
    ac6a:	4493      	add	fp, r2
    ac6c:	e754      	b.n	ab18 <__aeabi_ddiv+0x3e4>
    ac6e:	4b47      	ldr	r3, [pc, #284]	; (ad8c <__aeabi_ddiv+0x658>)
    ac70:	18e3      	adds	r3, r4, r3
    ac72:	2b00      	cmp	r3, #0
    ac74:	dde5      	ble.n	ac42 <__aeabi_ddiv+0x50e>
    ac76:	2201      	movs	r2, #1
    ac78:	4252      	negs	r2, r2
    ac7a:	e7f2      	b.n	ac62 <__aeabi_ddiv+0x52e>
    ac7c:	001d      	movs	r5, r3
    ac7e:	e6fa      	b.n	aa76 <__aeabi_ddiv+0x342>
    ac80:	469a      	mov	sl, r3
    ac82:	e71c      	b.n	aabe <__aeabi_ddiv+0x38a>
    ac84:	42b0      	cmp	r0, r6
    ac86:	d839      	bhi.n	acfc <__aeabi_ddiv+0x5c8>
    ac88:	d06e      	beq.n	ad68 <__aeabi_ddiv+0x634>
    ac8a:	0011      	movs	r1, r2
    ac8c:	e73a      	b.n	ab04 <__aeabi_ddiv+0x3d0>
    ac8e:	9302      	str	r3, [sp, #8]
    ac90:	e73a      	b.n	ab08 <__aeabi_ddiv+0x3d4>
    ac92:	2a1f      	cmp	r2, #31
    ac94:	dc3c      	bgt.n	ad10 <__aeabi_ddiv+0x5dc>
    ac96:	2320      	movs	r3, #32
    ac98:	1a9b      	subs	r3, r3, r2
    ac9a:	000c      	movs	r4, r1
    ac9c:	4658      	mov	r0, fp
    ac9e:	4099      	lsls	r1, r3
    aca0:	4098      	lsls	r0, r3
    aca2:	1e4b      	subs	r3, r1, #1
    aca4:	4199      	sbcs	r1, r3
    aca6:	465b      	mov	r3, fp
    aca8:	40d4      	lsrs	r4, r2
    acaa:	40d3      	lsrs	r3, r2
    acac:	4320      	orrs	r0, r4
    acae:	4308      	orrs	r0, r1
    acb0:	001a      	movs	r2, r3
    acb2:	0743      	lsls	r3, r0, #29
    acb4:	d009      	beq.n	acca <__aeabi_ddiv+0x596>
    acb6:	230f      	movs	r3, #15
    acb8:	4003      	ands	r3, r0
    acba:	2b04      	cmp	r3, #4
    acbc:	d005      	beq.n	acca <__aeabi_ddiv+0x596>
    acbe:	0001      	movs	r1, r0
    acc0:	1d08      	adds	r0, r1, #4
    acc2:	4288      	cmp	r0, r1
    acc4:	419b      	sbcs	r3, r3
    acc6:	425b      	negs	r3, r3
    acc8:	18d2      	adds	r2, r2, r3
    acca:	0213      	lsls	r3, r2, #8
    accc:	d53a      	bpl.n	ad44 <__aeabi_ddiv+0x610>
    acce:	2301      	movs	r3, #1
    acd0:	9a02      	ldr	r2, [sp, #8]
    acd2:	2401      	movs	r4, #1
    acd4:	401a      	ands	r2, r3
    acd6:	2300      	movs	r3, #0
    acd8:	4694      	mov	ip, r2
    acda:	4698      	mov	r8, r3
    acdc:	2200      	movs	r2, #0
    acde:	e5f7      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ace0:	2102      	movs	r1, #2
    ace2:	4249      	negs	r1, r1
    ace4:	468c      	mov	ip, r1
    ace6:	9d03      	ldr	r5, [sp, #12]
    ace8:	44e3      	add	fp, ip
    acea:	46ac      	mov	ip, r5
    acec:	44e2      	add	sl, ip
    acee:	45aa      	cmp	sl, r5
    acf0:	41ad      	sbcs	r5, r5
    acf2:	426d      	negs	r5, r5
    acf4:	4445      	add	r5, r8
    acf6:	18ed      	adds	r5, r5, r3
    acf8:	1a2d      	subs	r5, r5, r0
    acfa:	e696      	b.n	aa2a <__aeabi_ddiv+0x2f6>
    acfc:	1e8a      	subs	r2, r1, #2
    acfe:	9903      	ldr	r1, [sp, #12]
    ad00:	004d      	lsls	r5, r1, #1
    ad02:	428d      	cmp	r5, r1
    ad04:	4189      	sbcs	r1, r1
    ad06:	4249      	negs	r1, r1
    ad08:	4441      	add	r1, r8
    ad0a:	1876      	adds	r6, r6, r1
    ad0c:	9503      	str	r5, [sp, #12]
    ad0e:	e78f      	b.n	ac30 <__aeabi_ddiv+0x4fc>
    ad10:	201f      	movs	r0, #31
    ad12:	4240      	negs	r0, r0
    ad14:	1ac3      	subs	r3, r0, r3
    ad16:	4658      	mov	r0, fp
    ad18:	40d8      	lsrs	r0, r3
    ad1a:	0003      	movs	r3, r0
    ad1c:	2a20      	cmp	r2, #32
    ad1e:	d028      	beq.n	ad72 <__aeabi_ddiv+0x63e>
    ad20:	2040      	movs	r0, #64	; 0x40
    ad22:	465d      	mov	r5, fp
    ad24:	1a82      	subs	r2, r0, r2
    ad26:	4095      	lsls	r5, r2
    ad28:	4329      	orrs	r1, r5
    ad2a:	1e4a      	subs	r2, r1, #1
    ad2c:	4191      	sbcs	r1, r2
    ad2e:	4319      	orrs	r1, r3
    ad30:	2307      	movs	r3, #7
    ad32:	2200      	movs	r2, #0
    ad34:	400b      	ands	r3, r1
    ad36:	d009      	beq.n	ad4c <__aeabi_ddiv+0x618>
    ad38:	230f      	movs	r3, #15
    ad3a:	2200      	movs	r2, #0
    ad3c:	400b      	ands	r3, r1
    ad3e:	0008      	movs	r0, r1
    ad40:	2b04      	cmp	r3, #4
    ad42:	d1bd      	bne.n	acc0 <__aeabi_ddiv+0x58c>
    ad44:	0001      	movs	r1, r0
    ad46:	0753      	lsls	r3, r2, #29
    ad48:	0252      	lsls	r2, r2, #9
    ad4a:	0b12      	lsrs	r2, r2, #12
    ad4c:	08c9      	lsrs	r1, r1, #3
    ad4e:	4319      	orrs	r1, r3
    ad50:	2301      	movs	r3, #1
    ad52:	4688      	mov	r8, r1
    ad54:	9902      	ldr	r1, [sp, #8]
    ad56:	2400      	movs	r4, #0
    ad58:	4019      	ands	r1, r3
    ad5a:	468c      	mov	ip, r1
    ad5c:	e5b8      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ad5e:	4552      	cmp	r2, sl
    ad60:	d8be      	bhi.n	ace0 <__aeabi_ddiv+0x5ac>
    ad62:	468b      	mov	fp, r1
    ad64:	2500      	movs	r5, #0
    ad66:	e660      	b.n	aa2a <__aeabi_ddiv+0x2f6>
    ad68:	9d03      	ldr	r5, [sp, #12]
    ad6a:	429d      	cmp	r5, r3
    ad6c:	d3c6      	bcc.n	acfc <__aeabi_ddiv+0x5c8>
    ad6e:	0011      	movs	r1, r2
    ad70:	e762      	b.n	ac38 <__aeabi_ddiv+0x504>
    ad72:	2500      	movs	r5, #0
    ad74:	e7d8      	b.n	ad28 <__aeabi_ddiv+0x5f4>
    ad76:	2280      	movs	r2, #128	; 0x80
    ad78:	465b      	mov	r3, fp
    ad7a:	0312      	lsls	r2, r2, #12
    ad7c:	431a      	orrs	r2, r3
    ad7e:	9b01      	ldr	r3, [sp, #4]
    ad80:	0312      	lsls	r2, r2, #12
    ad82:	0b12      	lsrs	r2, r2, #12
    ad84:	469c      	mov	ip, r3
    ad86:	4688      	mov	r8, r1
    ad88:	4c03      	ldr	r4, [pc, #12]	; (ad98 <__aeabi_ddiv+0x664>)
    ad8a:	e5a1      	b.n	a8d0 <__aeabi_ddiv+0x19c>
    ad8c:	000003ff 	.word	0x000003ff
    ad90:	feffffff 	.word	0xfeffffff
    ad94:	000007fe 	.word	0x000007fe
    ad98:	000007ff 	.word	0x000007ff

0000ad9c <__eqdf2>:
    ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad9e:	464f      	mov	r7, r9
    ada0:	4646      	mov	r6, r8
    ada2:	46d6      	mov	lr, sl
    ada4:	005c      	lsls	r4, r3, #1
    ada6:	b5c0      	push	{r6, r7, lr}
    ada8:	031f      	lsls	r7, r3, #12
    adaa:	0fdb      	lsrs	r3, r3, #31
    adac:	469a      	mov	sl, r3
    adae:	4b17      	ldr	r3, [pc, #92]	; (ae0c <__eqdf2+0x70>)
    adb0:	030e      	lsls	r6, r1, #12
    adb2:	004d      	lsls	r5, r1, #1
    adb4:	4684      	mov	ip, r0
    adb6:	4680      	mov	r8, r0
    adb8:	0b36      	lsrs	r6, r6, #12
    adba:	0d6d      	lsrs	r5, r5, #21
    adbc:	0fc9      	lsrs	r1, r1, #31
    adbe:	4691      	mov	r9, r2
    adc0:	0b3f      	lsrs	r7, r7, #12
    adc2:	0d64      	lsrs	r4, r4, #21
    adc4:	2001      	movs	r0, #1
    adc6:	429d      	cmp	r5, r3
    adc8:	d008      	beq.n	addc <__eqdf2+0x40>
    adca:	429c      	cmp	r4, r3
    adcc:	d001      	beq.n	add2 <__eqdf2+0x36>
    adce:	42a5      	cmp	r5, r4
    add0:	d00b      	beq.n	adea <__eqdf2+0x4e>
    add2:	bc1c      	pop	{r2, r3, r4}
    add4:	4690      	mov	r8, r2
    add6:	4699      	mov	r9, r3
    add8:	46a2      	mov	sl, r4
    adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    addc:	4663      	mov	r3, ip
    adde:	4333      	orrs	r3, r6
    ade0:	d1f7      	bne.n	add2 <__eqdf2+0x36>
    ade2:	42ac      	cmp	r4, r5
    ade4:	d1f5      	bne.n	add2 <__eqdf2+0x36>
    ade6:	433a      	orrs	r2, r7
    ade8:	d1f3      	bne.n	add2 <__eqdf2+0x36>
    adea:	2001      	movs	r0, #1
    adec:	42be      	cmp	r6, r7
    adee:	d1f0      	bne.n	add2 <__eqdf2+0x36>
    adf0:	45c8      	cmp	r8, r9
    adf2:	d1ee      	bne.n	add2 <__eqdf2+0x36>
    adf4:	4551      	cmp	r1, sl
    adf6:	d007      	beq.n	ae08 <__eqdf2+0x6c>
    adf8:	2d00      	cmp	r5, #0
    adfa:	d1ea      	bne.n	add2 <__eqdf2+0x36>
    adfc:	4663      	mov	r3, ip
    adfe:	431e      	orrs	r6, r3
    ae00:	0030      	movs	r0, r6
    ae02:	1e46      	subs	r6, r0, #1
    ae04:	41b0      	sbcs	r0, r6
    ae06:	e7e4      	b.n	add2 <__eqdf2+0x36>
    ae08:	2000      	movs	r0, #0
    ae0a:	e7e2      	b.n	add2 <__eqdf2+0x36>
    ae0c:	000007ff 	.word	0x000007ff

0000ae10 <__gedf2>:
    ae10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae12:	4645      	mov	r5, r8
    ae14:	46de      	mov	lr, fp
    ae16:	4657      	mov	r7, sl
    ae18:	464e      	mov	r6, r9
    ae1a:	b5e0      	push	{r5, r6, r7, lr}
    ae1c:	031f      	lsls	r7, r3, #12
    ae1e:	0b3d      	lsrs	r5, r7, #12
    ae20:	4f2c      	ldr	r7, [pc, #176]	; (aed4 <__gedf2+0xc4>)
    ae22:	030e      	lsls	r6, r1, #12
    ae24:	004c      	lsls	r4, r1, #1
    ae26:	46ab      	mov	fp, r5
    ae28:	005d      	lsls	r5, r3, #1
    ae2a:	4684      	mov	ip, r0
    ae2c:	0b36      	lsrs	r6, r6, #12
    ae2e:	0d64      	lsrs	r4, r4, #21
    ae30:	0fc9      	lsrs	r1, r1, #31
    ae32:	4690      	mov	r8, r2
    ae34:	0d6d      	lsrs	r5, r5, #21
    ae36:	0fdb      	lsrs	r3, r3, #31
    ae38:	42bc      	cmp	r4, r7
    ae3a:	d02a      	beq.n	ae92 <__gedf2+0x82>
    ae3c:	4f25      	ldr	r7, [pc, #148]	; (aed4 <__gedf2+0xc4>)
    ae3e:	42bd      	cmp	r5, r7
    ae40:	d02d      	beq.n	ae9e <__gedf2+0x8e>
    ae42:	2c00      	cmp	r4, #0
    ae44:	d10f      	bne.n	ae66 <__gedf2+0x56>
    ae46:	4330      	orrs	r0, r6
    ae48:	0007      	movs	r7, r0
    ae4a:	4681      	mov	r9, r0
    ae4c:	4278      	negs	r0, r7
    ae4e:	4178      	adcs	r0, r7
    ae50:	b2c0      	uxtb	r0, r0
    ae52:	2d00      	cmp	r5, #0
    ae54:	d117      	bne.n	ae86 <__gedf2+0x76>
    ae56:	465f      	mov	r7, fp
    ae58:	433a      	orrs	r2, r7
    ae5a:	d114      	bne.n	ae86 <__gedf2+0x76>
    ae5c:	464b      	mov	r3, r9
    ae5e:	2000      	movs	r0, #0
    ae60:	2b00      	cmp	r3, #0
    ae62:	d00a      	beq.n	ae7a <__gedf2+0x6a>
    ae64:	e006      	b.n	ae74 <__gedf2+0x64>
    ae66:	2d00      	cmp	r5, #0
    ae68:	d102      	bne.n	ae70 <__gedf2+0x60>
    ae6a:	4658      	mov	r0, fp
    ae6c:	4302      	orrs	r2, r0
    ae6e:	d001      	beq.n	ae74 <__gedf2+0x64>
    ae70:	4299      	cmp	r1, r3
    ae72:	d018      	beq.n	aea6 <__gedf2+0x96>
    ae74:	4248      	negs	r0, r1
    ae76:	2101      	movs	r1, #1
    ae78:	4308      	orrs	r0, r1
    ae7a:	bc3c      	pop	{r2, r3, r4, r5}
    ae7c:	4690      	mov	r8, r2
    ae7e:	4699      	mov	r9, r3
    ae80:	46a2      	mov	sl, r4
    ae82:	46ab      	mov	fp, r5
    ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae86:	2800      	cmp	r0, #0
    ae88:	d0f2      	beq.n	ae70 <__gedf2+0x60>
    ae8a:	2001      	movs	r0, #1
    ae8c:	3b01      	subs	r3, #1
    ae8e:	4318      	orrs	r0, r3
    ae90:	e7f3      	b.n	ae7a <__gedf2+0x6a>
    ae92:	0037      	movs	r7, r6
    ae94:	4307      	orrs	r7, r0
    ae96:	d0d1      	beq.n	ae3c <__gedf2+0x2c>
    ae98:	2002      	movs	r0, #2
    ae9a:	4240      	negs	r0, r0
    ae9c:	e7ed      	b.n	ae7a <__gedf2+0x6a>
    ae9e:	465f      	mov	r7, fp
    aea0:	4317      	orrs	r7, r2
    aea2:	d0ce      	beq.n	ae42 <__gedf2+0x32>
    aea4:	e7f8      	b.n	ae98 <__gedf2+0x88>
    aea6:	42ac      	cmp	r4, r5
    aea8:	dce4      	bgt.n	ae74 <__gedf2+0x64>
    aeaa:	da03      	bge.n	aeb4 <__gedf2+0xa4>
    aeac:	1e48      	subs	r0, r1, #1
    aeae:	2101      	movs	r1, #1
    aeb0:	4308      	orrs	r0, r1
    aeb2:	e7e2      	b.n	ae7a <__gedf2+0x6a>
    aeb4:	455e      	cmp	r6, fp
    aeb6:	d8dd      	bhi.n	ae74 <__gedf2+0x64>
    aeb8:	d006      	beq.n	aec8 <__gedf2+0xb8>
    aeba:	2000      	movs	r0, #0
    aebc:	455e      	cmp	r6, fp
    aebe:	d2dc      	bcs.n	ae7a <__gedf2+0x6a>
    aec0:	2301      	movs	r3, #1
    aec2:	1e48      	subs	r0, r1, #1
    aec4:	4318      	orrs	r0, r3
    aec6:	e7d8      	b.n	ae7a <__gedf2+0x6a>
    aec8:	45c4      	cmp	ip, r8
    aeca:	d8d3      	bhi.n	ae74 <__gedf2+0x64>
    aecc:	2000      	movs	r0, #0
    aece:	45c4      	cmp	ip, r8
    aed0:	d3f6      	bcc.n	aec0 <__gedf2+0xb0>
    aed2:	e7d2      	b.n	ae7a <__gedf2+0x6a>
    aed4:	000007ff 	.word	0x000007ff

0000aed8 <__ledf2>:
    aed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aeda:	464e      	mov	r6, r9
    aedc:	4645      	mov	r5, r8
    aede:	46de      	mov	lr, fp
    aee0:	4657      	mov	r7, sl
    aee2:	005c      	lsls	r4, r3, #1
    aee4:	b5e0      	push	{r5, r6, r7, lr}
    aee6:	031f      	lsls	r7, r3, #12
    aee8:	0fdb      	lsrs	r3, r3, #31
    aeea:	4699      	mov	r9, r3
    aeec:	4b2a      	ldr	r3, [pc, #168]	; (af98 <__ledf2+0xc0>)
    aeee:	030e      	lsls	r6, r1, #12
    aef0:	004d      	lsls	r5, r1, #1
    aef2:	0fc9      	lsrs	r1, r1, #31
    aef4:	4684      	mov	ip, r0
    aef6:	0b36      	lsrs	r6, r6, #12
    aef8:	0d6d      	lsrs	r5, r5, #21
    aefa:	468b      	mov	fp, r1
    aefc:	4690      	mov	r8, r2
    aefe:	0b3f      	lsrs	r7, r7, #12
    af00:	0d64      	lsrs	r4, r4, #21
    af02:	429d      	cmp	r5, r3
    af04:	d020      	beq.n	af48 <__ledf2+0x70>
    af06:	4b24      	ldr	r3, [pc, #144]	; (af98 <__ledf2+0xc0>)
    af08:	429c      	cmp	r4, r3
    af0a:	d022      	beq.n	af52 <__ledf2+0x7a>
    af0c:	2d00      	cmp	r5, #0
    af0e:	d112      	bne.n	af36 <__ledf2+0x5e>
    af10:	4330      	orrs	r0, r6
    af12:	4243      	negs	r3, r0
    af14:	4143      	adcs	r3, r0
    af16:	b2db      	uxtb	r3, r3
    af18:	2c00      	cmp	r4, #0
    af1a:	d01f      	beq.n	af5c <__ledf2+0x84>
    af1c:	2b00      	cmp	r3, #0
    af1e:	d00c      	beq.n	af3a <__ledf2+0x62>
    af20:	464b      	mov	r3, r9
    af22:	2001      	movs	r0, #1
    af24:	3b01      	subs	r3, #1
    af26:	4303      	orrs	r3, r0
    af28:	0018      	movs	r0, r3
    af2a:	bc3c      	pop	{r2, r3, r4, r5}
    af2c:	4690      	mov	r8, r2
    af2e:	4699      	mov	r9, r3
    af30:	46a2      	mov	sl, r4
    af32:	46ab      	mov	fp, r5
    af34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af36:	2c00      	cmp	r4, #0
    af38:	d016      	beq.n	af68 <__ledf2+0x90>
    af3a:	45cb      	cmp	fp, r9
    af3c:	d017      	beq.n	af6e <__ledf2+0x96>
    af3e:	465b      	mov	r3, fp
    af40:	4259      	negs	r1, r3
    af42:	2301      	movs	r3, #1
    af44:	430b      	orrs	r3, r1
    af46:	e7ef      	b.n	af28 <__ledf2+0x50>
    af48:	0031      	movs	r1, r6
    af4a:	2302      	movs	r3, #2
    af4c:	4301      	orrs	r1, r0
    af4e:	d1eb      	bne.n	af28 <__ledf2+0x50>
    af50:	e7d9      	b.n	af06 <__ledf2+0x2e>
    af52:	0039      	movs	r1, r7
    af54:	2302      	movs	r3, #2
    af56:	4311      	orrs	r1, r2
    af58:	d1e6      	bne.n	af28 <__ledf2+0x50>
    af5a:	e7d7      	b.n	af0c <__ledf2+0x34>
    af5c:	433a      	orrs	r2, r7
    af5e:	d1dd      	bne.n	af1c <__ledf2+0x44>
    af60:	2300      	movs	r3, #0
    af62:	2800      	cmp	r0, #0
    af64:	d0e0      	beq.n	af28 <__ledf2+0x50>
    af66:	e7ea      	b.n	af3e <__ledf2+0x66>
    af68:	433a      	orrs	r2, r7
    af6a:	d1e6      	bne.n	af3a <__ledf2+0x62>
    af6c:	e7e7      	b.n	af3e <__ledf2+0x66>
    af6e:	42a5      	cmp	r5, r4
    af70:	dce5      	bgt.n	af3e <__ledf2+0x66>
    af72:	db05      	blt.n	af80 <__ledf2+0xa8>
    af74:	42be      	cmp	r6, r7
    af76:	d8e2      	bhi.n	af3e <__ledf2+0x66>
    af78:	d007      	beq.n	af8a <__ledf2+0xb2>
    af7a:	2300      	movs	r3, #0
    af7c:	42be      	cmp	r6, r7
    af7e:	d2d3      	bcs.n	af28 <__ledf2+0x50>
    af80:	4659      	mov	r1, fp
    af82:	2301      	movs	r3, #1
    af84:	3901      	subs	r1, #1
    af86:	430b      	orrs	r3, r1
    af88:	e7ce      	b.n	af28 <__ledf2+0x50>
    af8a:	45c4      	cmp	ip, r8
    af8c:	d8d7      	bhi.n	af3e <__ledf2+0x66>
    af8e:	2300      	movs	r3, #0
    af90:	45c4      	cmp	ip, r8
    af92:	d3f5      	bcc.n	af80 <__ledf2+0xa8>
    af94:	e7c8      	b.n	af28 <__ledf2+0x50>
    af96:	46c0      	nop			; (mov r8, r8)
    af98:	000007ff 	.word	0x000007ff

0000af9c <__aeabi_dmul>:
    af9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af9e:	4657      	mov	r7, sl
    afa0:	4645      	mov	r5, r8
    afa2:	46de      	mov	lr, fp
    afa4:	464e      	mov	r6, r9
    afa6:	b5e0      	push	{r5, r6, r7, lr}
    afa8:	030c      	lsls	r4, r1, #12
    afaa:	4698      	mov	r8, r3
    afac:	004e      	lsls	r6, r1, #1
    afae:	0b23      	lsrs	r3, r4, #12
    afb0:	b087      	sub	sp, #28
    afb2:	0007      	movs	r7, r0
    afb4:	4692      	mov	sl, r2
    afb6:	469b      	mov	fp, r3
    afb8:	0d76      	lsrs	r6, r6, #21
    afba:	0fcd      	lsrs	r5, r1, #31
    afbc:	2e00      	cmp	r6, #0
    afbe:	d06b      	beq.n	b098 <__aeabi_dmul+0xfc>
    afc0:	4b6d      	ldr	r3, [pc, #436]	; (b178 <__aeabi_dmul+0x1dc>)
    afc2:	429e      	cmp	r6, r3
    afc4:	d035      	beq.n	b032 <__aeabi_dmul+0x96>
    afc6:	2480      	movs	r4, #128	; 0x80
    afc8:	465b      	mov	r3, fp
    afca:	0f42      	lsrs	r2, r0, #29
    afcc:	0424      	lsls	r4, r4, #16
    afce:	00db      	lsls	r3, r3, #3
    afd0:	4314      	orrs	r4, r2
    afd2:	431c      	orrs	r4, r3
    afd4:	00c3      	lsls	r3, r0, #3
    afd6:	4699      	mov	r9, r3
    afd8:	4b68      	ldr	r3, [pc, #416]	; (b17c <__aeabi_dmul+0x1e0>)
    afda:	46a3      	mov	fp, r4
    afdc:	469c      	mov	ip, r3
    afde:	2300      	movs	r3, #0
    afe0:	2700      	movs	r7, #0
    afe2:	4466      	add	r6, ip
    afe4:	9302      	str	r3, [sp, #8]
    afe6:	4643      	mov	r3, r8
    afe8:	031c      	lsls	r4, r3, #12
    afea:	005a      	lsls	r2, r3, #1
    afec:	0fdb      	lsrs	r3, r3, #31
    afee:	4650      	mov	r0, sl
    aff0:	0b24      	lsrs	r4, r4, #12
    aff2:	0d52      	lsrs	r2, r2, #21
    aff4:	4698      	mov	r8, r3
    aff6:	d100      	bne.n	affa <__aeabi_dmul+0x5e>
    aff8:	e076      	b.n	b0e8 <__aeabi_dmul+0x14c>
    affa:	4b5f      	ldr	r3, [pc, #380]	; (b178 <__aeabi_dmul+0x1dc>)
    affc:	429a      	cmp	r2, r3
    affe:	d06d      	beq.n	b0dc <__aeabi_dmul+0x140>
    b000:	2380      	movs	r3, #128	; 0x80
    b002:	0f41      	lsrs	r1, r0, #29
    b004:	041b      	lsls	r3, r3, #16
    b006:	430b      	orrs	r3, r1
    b008:	495c      	ldr	r1, [pc, #368]	; (b17c <__aeabi_dmul+0x1e0>)
    b00a:	00e4      	lsls	r4, r4, #3
    b00c:	468c      	mov	ip, r1
    b00e:	431c      	orrs	r4, r3
    b010:	00c3      	lsls	r3, r0, #3
    b012:	2000      	movs	r0, #0
    b014:	4462      	add	r2, ip
    b016:	4641      	mov	r1, r8
    b018:	18b6      	adds	r6, r6, r2
    b01a:	4069      	eors	r1, r5
    b01c:	1c72      	adds	r2, r6, #1
    b01e:	9101      	str	r1, [sp, #4]
    b020:	4694      	mov	ip, r2
    b022:	4307      	orrs	r7, r0
    b024:	2f0f      	cmp	r7, #15
    b026:	d900      	bls.n	b02a <__aeabi_dmul+0x8e>
    b028:	e0b0      	b.n	b18c <__aeabi_dmul+0x1f0>
    b02a:	4a55      	ldr	r2, [pc, #340]	; (b180 <__aeabi_dmul+0x1e4>)
    b02c:	00bf      	lsls	r7, r7, #2
    b02e:	59d2      	ldr	r2, [r2, r7]
    b030:	4697      	mov	pc, r2
    b032:	465b      	mov	r3, fp
    b034:	4303      	orrs	r3, r0
    b036:	4699      	mov	r9, r3
    b038:	d000      	beq.n	b03c <__aeabi_dmul+0xa0>
    b03a:	e087      	b.n	b14c <__aeabi_dmul+0x1b0>
    b03c:	2300      	movs	r3, #0
    b03e:	469b      	mov	fp, r3
    b040:	3302      	adds	r3, #2
    b042:	2708      	movs	r7, #8
    b044:	9302      	str	r3, [sp, #8]
    b046:	e7ce      	b.n	afe6 <__aeabi_dmul+0x4a>
    b048:	4642      	mov	r2, r8
    b04a:	9201      	str	r2, [sp, #4]
    b04c:	2802      	cmp	r0, #2
    b04e:	d067      	beq.n	b120 <__aeabi_dmul+0x184>
    b050:	2803      	cmp	r0, #3
    b052:	d100      	bne.n	b056 <__aeabi_dmul+0xba>
    b054:	e20e      	b.n	b474 <__aeabi_dmul+0x4d8>
    b056:	2801      	cmp	r0, #1
    b058:	d000      	beq.n	b05c <__aeabi_dmul+0xc0>
    b05a:	e162      	b.n	b322 <__aeabi_dmul+0x386>
    b05c:	2300      	movs	r3, #0
    b05e:	2400      	movs	r4, #0
    b060:	2200      	movs	r2, #0
    b062:	4699      	mov	r9, r3
    b064:	9901      	ldr	r1, [sp, #4]
    b066:	4001      	ands	r1, r0
    b068:	b2cd      	uxtb	r5, r1
    b06a:	2100      	movs	r1, #0
    b06c:	0312      	lsls	r2, r2, #12
    b06e:	0d0b      	lsrs	r3, r1, #20
    b070:	0b12      	lsrs	r2, r2, #12
    b072:	051b      	lsls	r3, r3, #20
    b074:	4313      	orrs	r3, r2
    b076:	4a43      	ldr	r2, [pc, #268]	; (b184 <__aeabi_dmul+0x1e8>)
    b078:	0524      	lsls	r4, r4, #20
    b07a:	4013      	ands	r3, r2
    b07c:	431c      	orrs	r4, r3
    b07e:	0064      	lsls	r4, r4, #1
    b080:	07ed      	lsls	r5, r5, #31
    b082:	0864      	lsrs	r4, r4, #1
    b084:	432c      	orrs	r4, r5
    b086:	4648      	mov	r0, r9
    b088:	0021      	movs	r1, r4
    b08a:	b007      	add	sp, #28
    b08c:	bc3c      	pop	{r2, r3, r4, r5}
    b08e:	4690      	mov	r8, r2
    b090:	4699      	mov	r9, r3
    b092:	46a2      	mov	sl, r4
    b094:	46ab      	mov	fp, r5
    b096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b098:	4303      	orrs	r3, r0
    b09a:	4699      	mov	r9, r3
    b09c:	d04f      	beq.n	b13e <__aeabi_dmul+0x1a2>
    b09e:	465b      	mov	r3, fp
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d100      	bne.n	b0a6 <__aeabi_dmul+0x10a>
    b0a4:	e189      	b.n	b3ba <__aeabi_dmul+0x41e>
    b0a6:	4658      	mov	r0, fp
    b0a8:	f000 feb8 	bl	be1c <__clzsi2>
    b0ac:	0003      	movs	r3, r0
    b0ae:	3b0b      	subs	r3, #11
    b0b0:	2b1c      	cmp	r3, #28
    b0b2:	dd00      	ble.n	b0b6 <__aeabi_dmul+0x11a>
    b0b4:	e17a      	b.n	b3ac <__aeabi_dmul+0x410>
    b0b6:	221d      	movs	r2, #29
    b0b8:	1ad3      	subs	r3, r2, r3
    b0ba:	003a      	movs	r2, r7
    b0bc:	0001      	movs	r1, r0
    b0be:	465c      	mov	r4, fp
    b0c0:	40da      	lsrs	r2, r3
    b0c2:	3908      	subs	r1, #8
    b0c4:	408c      	lsls	r4, r1
    b0c6:	0013      	movs	r3, r2
    b0c8:	408f      	lsls	r7, r1
    b0ca:	4323      	orrs	r3, r4
    b0cc:	469b      	mov	fp, r3
    b0ce:	46b9      	mov	r9, r7
    b0d0:	2300      	movs	r3, #0
    b0d2:	4e2d      	ldr	r6, [pc, #180]	; (b188 <__aeabi_dmul+0x1ec>)
    b0d4:	2700      	movs	r7, #0
    b0d6:	1a36      	subs	r6, r6, r0
    b0d8:	9302      	str	r3, [sp, #8]
    b0da:	e784      	b.n	afe6 <__aeabi_dmul+0x4a>
    b0dc:	4653      	mov	r3, sl
    b0de:	4323      	orrs	r3, r4
    b0e0:	d12a      	bne.n	b138 <__aeabi_dmul+0x19c>
    b0e2:	2400      	movs	r4, #0
    b0e4:	2002      	movs	r0, #2
    b0e6:	e796      	b.n	b016 <__aeabi_dmul+0x7a>
    b0e8:	4653      	mov	r3, sl
    b0ea:	4323      	orrs	r3, r4
    b0ec:	d020      	beq.n	b130 <__aeabi_dmul+0x194>
    b0ee:	2c00      	cmp	r4, #0
    b0f0:	d100      	bne.n	b0f4 <__aeabi_dmul+0x158>
    b0f2:	e157      	b.n	b3a4 <__aeabi_dmul+0x408>
    b0f4:	0020      	movs	r0, r4
    b0f6:	f000 fe91 	bl	be1c <__clzsi2>
    b0fa:	0003      	movs	r3, r0
    b0fc:	3b0b      	subs	r3, #11
    b0fe:	2b1c      	cmp	r3, #28
    b100:	dd00      	ble.n	b104 <__aeabi_dmul+0x168>
    b102:	e149      	b.n	b398 <__aeabi_dmul+0x3fc>
    b104:	211d      	movs	r1, #29
    b106:	1acb      	subs	r3, r1, r3
    b108:	4651      	mov	r1, sl
    b10a:	0002      	movs	r2, r0
    b10c:	40d9      	lsrs	r1, r3
    b10e:	4653      	mov	r3, sl
    b110:	3a08      	subs	r2, #8
    b112:	4094      	lsls	r4, r2
    b114:	4093      	lsls	r3, r2
    b116:	430c      	orrs	r4, r1
    b118:	4a1b      	ldr	r2, [pc, #108]	; (b188 <__aeabi_dmul+0x1ec>)
    b11a:	1a12      	subs	r2, r2, r0
    b11c:	2000      	movs	r0, #0
    b11e:	e77a      	b.n	b016 <__aeabi_dmul+0x7a>
    b120:	2501      	movs	r5, #1
    b122:	9b01      	ldr	r3, [sp, #4]
    b124:	4c14      	ldr	r4, [pc, #80]	; (b178 <__aeabi_dmul+0x1dc>)
    b126:	401d      	ands	r5, r3
    b128:	2300      	movs	r3, #0
    b12a:	2200      	movs	r2, #0
    b12c:	4699      	mov	r9, r3
    b12e:	e79c      	b.n	b06a <__aeabi_dmul+0xce>
    b130:	2400      	movs	r4, #0
    b132:	2200      	movs	r2, #0
    b134:	2001      	movs	r0, #1
    b136:	e76e      	b.n	b016 <__aeabi_dmul+0x7a>
    b138:	4653      	mov	r3, sl
    b13a:	2003      	movs	r0, #3
    b13c:	e76b      	b.n	b016 <__aeabi_dmul+0x7a>
    b13e:	2300      	movs	r3, #0
    b140:	469b      	mov	fp, r3
    b142:	3301      	adds	r3, #1
    b144:	2704      	movs	r7, #4
    b146:	2600      	movs	r6, #0
    b148:	9302      	str	r3, [sp, #8]
    b14a:	e74c      	b.n	afe6 <__aeabi_dmul+0x4a>
    b14c:	2303      	movs	r3, #3
    b14e:	4681      	mov	r9, r0
    b150:	270c      	movs	r7, #12
    b152:	9302      	str	r3, [sp, #8]
    b154:	e747      	b.n	afe6 <__aeabi_dmul+0x4a>
    b156:	2280      	movs	r2, #128	; 0x80
    b158:	2300      	movs	r3, #0
    b15a:	2500      	movs	r5, #0
    b15c:	0312      	lsls	r2, r2, #12
    b15e:	4699      	mov	r9, r3
    b160:	4c05      	ldr	r4, [pc, #20]	; (b178 <__aeabi_dmul+0x1dc>)
    b162:	e782      	b.n	b06a <__aeabi_dmul+0xce>
    b164:	465c      	mov	r4, fp
    b166:	464b      	mov	r3, r9
    b168:	9802      	ldr	r0, [sp, #8]
    b16a:	e76f      	b.n	b04c <__aeabi_dmul+0xb0>
    b16c:	465c      	mov	r4, fp
    b16e:	464b      	mov	r3, r9
    b170:	9501      	str	r5, [sp, #4]
    b172:	9802      	ldr	r0, [sp, #8]
    b174:	e76a      	b.n	b04c <__aeabi_dmul+0xb0>
    b176:	46c0      	nop			; (mov r8, r8)
    b178:	000007ff 	.word	0x000007ff
    b17c:	fffffc01 	.word	0xfffffc01
    b180:	000112a8 	.word	0x000112a8
    b184:	800fffff 	.word	0x800fffff
    b188:	fffffc0d 	.word	0xfffffc0d
    b18c:	464a      	mov	r2, r9
    b18e:	4649      	mov	r1, r9
    b190:	0c17      	lsrs	r7, r2, #16
    b192:	0c1a      	lsrs	r2, r3, #16
    b194:	041b      	lsls	r3, r3, #16
    b196:	0c1b      	lsrs	r3, r3, #16
    b198:	0408      	lsls	r0, r1, #16
    b19a:	0019      	movs	r1, r3
    b19c:	0c00      	lsrs	r0, r0, #16
    b19e:	4341      	muls	r1, r0
    b1a0:	0015      	movs	r5, r2
    b1a2:	4688      	mov	r8, r1
    b1a4:	0019      	movs	r1, r3
    b1a6:	437d      	muls	r5, r7
    b1a8:	4379      	muls	r1, r7
    b1aa:	9503      	str	r5, [sp, #12]
    b1ac:	4689      	mov	r9, r1
    b1ae:	0029      	movs	r1, r5
    b1b0:	0015      	movs	r5, r2
    b1b2:	4345      	muls	r5, r0
    b1b4:	444d      	add	r5, r9
    b1b6:	9502      	str	r5, [sp, #8]
    b1b8:	4645      	mov	r5, r8
    b1ba:	0c2d      	lsrs	r5, r5, #16
    b1bc:	46aa      	mov	sl, r5
    b1be:	9d02      	ldr	r5, [sp, #8]
    b1c0:	4455      	add	r5, sl
    b1c2:	45a9      	cmp	r9, r5
    b1c4:	d906      	bls.n	b1d4 <__aeabi_dmul+0x238>
    b1c6:	468a      	mov	sl, r1
    b1c8:	2180      	movs	r1, #128	; 0x80
    b1ca:	0249      	lsls	r1, r1, #9
    b1cc:	4689      	mov	r9, r1
    b1ce:	44ca      	add	sl, r9
    b1d0:	4651      	mov	r1, sl
    b1d2:	9103      	str	r1, [sp, #12]
    b1d4:	0c29      	lsrs	r1, r5, #16
    b1d6:	9104      	str	r1, [sp, #16]
    b1d8:	4641      	mov	r1, r8
    b1da:	0409      	lsls	r1, r1, #16
    b1dc:	042d      	lsls	r5, r5, #16
    b1de:	0c09      	lsrs	r1, r1, #16
    b1e0:	4688      	mov	r8, r1
    b1e2:	0029      	movs	r1, r5
    b1e4:	0c25      	lsrs	r5, r4, #16
    b1e6:	0424      	lsls	r4, r4, #16
    b1e8:	4441      	add	r1, r8
    b1ea:	0c24      	lsrs	r4, r4, #16
    b1ec:	9105      	str	r1, [sp, #20]
    b1ee:	0021      	movs	r1, r4
    b1f0:	4341      	muls	r1, r0
    b1f2:	4688      	mov	r8, r1
    b1f4:	0021      	movs	r1, r4
    b1f6:	4379      	muls	r1, r7
    b1f8:	468a      	mov	sl, r1
    b1fa:	4368      	muls	r0, r5
    b1fc:	4641      	mov	r1, r8
    b1fe:	4450      	add	r0, sl
    b200:	4681      	mov	r9, r0
    b202:	0c08      	lsrs	r0, r1, #16
    b204:	4448      	add	r0, r9
    b206:	436f      	muls	r7, r5
    b208:	4582      	cmp	sl, r0
    b20a:	d903      	bls.n	b214 <__aeabi_dmul+0x278>
    b20c:	2180      	movs	r1, #128	; 0x80
    b20e:	0249      	lsls	r1, r1, #9
    b210:	4689      	mov	r9, r1
    b212:	444f      	add	r7, r9
    b214:	0c01      	lsrs	r1, r0, #16
    b216:	4689      	mov	r9, r1
    b218:	0039      	movs	r1, r7
    b21a:	4449      	add	r1, r9
    b21c:	9102      	str	r1, [sp, #8]
    b21e:	4641      	mov	r1, r8
    b220:	040f      	lsls	r7, r1, #16
    b222:	9904      	ldr	r1, [sp, #16]
    b224:	0c3f      	lsrs	r7, r7, #16
    b226:	4688      	mov	r8, r1
    b228:	0400      	lsls	r0, r0, #16
    b22a:	19c0      	adds	r0, r0, r7
    b22c:	4480      	add	r8, r0
    b22e:	4641      	mov	r1, r8
    b230:	9104      	str	r1, [sp, #16]
    b232:	4659      	mov	r1, fp
    b234:	0c0f      	lsrs	r7, r1, #16
    b236:	0409      	lsls	r1, r1, #16
    b238:	0c09      	lsrs	r1, r1, #16
    b23a:	4688      	mov	r8, r1
    b23c:	4359      	muls	r1, r3
    b23e:	468a      	mov	sl, r1
    b240:	0039      	movs	r1, r7
    b242:	4351      	muls	r1, r2
    b244:	4689      	mov	r9, r1
    b246:	4641      	mov	r1, r8
    b248:	434a      	muls	r2, r1
    b24a:	4651      	mov	r1, sl
    b24c:	0c09      	lsrs	r1, r1, #16
    b24e:	468b      	mov	fp, r1
    b250:	437b      	muls	r3, r7
    b252:	18d2      	adds	r2, r2, r3
    b254:	445a      	add	r2, fp
    b256:	4293      	cmp	r3, r2
    b258:	d903      	bls.n	b262 <__aeabi_dmul+0x2c6>
    b25a:	2380      	movs	r3, #128	; 0x80
    b25c:	025b      	lsls	r3, r3, #9
    b25e:	469b      	mov	fp, r3
    b260:	44d9      	add	r9, fp
    b262:	4651      	mov	r1, sl
    b264:	0409      	lsls	r1, r1, #16
    b266:	0c09      	lsrs	r1, r1, #16
    b268:	468a      	mov	sl, r1
    b26a:	4641      	mov	r1, r8
    b26c:	4361      	muls	r1, r4
    b26e:	437c      	muls	r4, r7
    b270:	0c13      	lsrs	r3, r2, #16
    b272:	0412      	lsls	r2, r2, #16
    b274:	444b      	add	r3, r9
    b276:	4452      	add	r2, sl
    b278:	46a1      	mov	r9, r4
    b27a:	468a      	mov	sl, r1
    b27c:	003c      	movs	r4, r7
    b27e:	4641      	mov	r1, r8
    b280:	436c      	muls	r4, r5
    b282:	434d      	muls	r5, r1
    b284:	4651      	mov	r1, sl
    b286:	444d      	add	r5, r9
    b288:	0c0f      	lsrs	r7, r1, #16
    b28a:	197d      	adds	r5, r7, r5
    b28c:	45a9      	cmp	r9, r5
    b28e:	d903      	bls.n	b298 <__aeabi_dmul+0x2fc>
    b290:	2180      	movs	r1, #128	; 0x80
    b292:	0249      	lsls	r1, r1, #9
    b294:	4688      	mov	r8, r1
    b296:	4444      	add	r4, r8
    b298:	9f04      	ldr	r7, [sp, #16]
    b29a:	9903      	ldr	r1, [sp, #12]
    b29c:	46b8      	mov	r8, r7
    b29e:	4441      	add	r1, r8
    b2a0:	468b      	mov	fp, r1
    b2a2:	4583      	cmp	fp, r0
    b2a4:	4180      	sbcs	r0, r0
    b2a6:	4241      	negs	r1, r0
    b2a8:	4688      	mov	r8, r1
    b2aa:	4651      	mov	r1, sl
    b2ac:	0408      	lsls	r0, r1, #16
    b2ae:	042f      	lsls	r7, r5, #16
    b2b0:	0c00      	lsrs	r0, r0, #16
    b2b2:	183f      	adds	r7, r7, r0
    b2b4:	4658      	mov	r0, fp
    b2b6:	9902      	ldr	r1, [sp, #8]
    b2b8:	1810      	adds	r0, r2, r0
    b2ba:	4689      	mov	r9, r1
    b2bc:	4290      	cmp	r0, r2
    b2be:	4192      	sbcs	r2, r2
    b2c0:	444f      	add	r7, r9
    b2c2:	46ba      	mov	sl, r7
    b2c4:	4252      	negs	r2, r2
    b2c6:	4699      	mov	r9, r3
    b2c8:	4693      	mov	fp, r2
    b2ca:	44c2      	add	sl, r8
    b2cc:	44d1      	add	r9, sl
    b2ce:	44cb      	add	fp, r9
    b2d0:	428f      	cmp	r7, r1
    b2d2:	41bf      	sbcs	r7, r7
    b2d4:	45c2      	cmp	sl, r8
    b2d6:	4189      	sbcs	r1, r1
    b2d8:	4599      	cmp	r9, r3
    b2da:	419b      	sbcs	r3, r3
    b2dc:	4593      	cmp	fp, r2
    b2de:	4192      	sbcs	r2, r2
    b2e0:	427f      	negs	r7, r7
    b2e2:	4249      	negs	r1, r1
    b2e4:	0c2d      	lsrs	r5, r5, #16
    b2e6:	4252      	negs	r2, r2
    b2e8:	430f      	orrs	r7, r1
    b2ea:	425b      	negs	r3, r3
    b2ec:	4313      	orrs	r3, r2
    b2ee:	197f      	adds	r7, r7, r5
    b2f0:	18ff      	adds	r7, r7, r3
    b2f2:	465b      	mov	r3, fp
    b2f4:	193c      	adds	r4, r7, r4
    b2f6:	0ddb      	lsrs	r3, r3, #23
    b2f8:	9a05      	ldr	r2, [sp, #20]
    b2fa:	0264      	lsls	r4, r4, #9
    b2fc:	431c      	orrs	r4, r3
    b2fe:	0243      	lsls	r3, r0, #9
    b300:	4313      	orrs	r3, r2
    b302:	1e5d      	subs	r5, r3, #1
    b304:	41ab      	sbcs	r3, r5
    b306:	465a      	mov	r2, fp
    b308:	0dc0      	lsrs	r0, r0, #23
    b30a:	4303      	orrs	r3, r0
    b30c:	0252      	lsls	r2, r2, #9
    b30e:	4313      	orrs	r3, r2
    b310:	01e2      	lsls	r2, r4, #7
    b312:	d556      	bpl.n	b3c2 <__aeabi_dmul+0x426>
    b314:	2001      	movs	r0, #1
    b316:	085a      	lsrs	r2, r3, #1
    b318:	4003      	ands	r3, r0
    b31a:	4313      	orrs	r3, r2
    b31c:	07e2      	lsls	r2, r4, #31
    b31e:	4313      	orrs	r3, r2
    b320:	0864      	lsrs	r4, r4, #1
    b322:	485a      	ldr	r0, [pc, #360]	; (b48c <__aeabi_dmul+0x4f0>)
    b324:	4460      	add	r0, ip
    b326:	2800      	cmp	r0, #0
    b328:	dd4d      	ble.n	b3c6 <__aeabi_dmul+0x42a>
    b32a:	075a      	lsls	r2, r3, #29
    b32c:	d009      	beq.n	b342 <__aeabi_dmul+0x3a6>
    b32e:	220f      	movs	r2, #15
    b330:	401a      	ands	r2, r3
    b332:	2a04      	cmp	r2, #4
    b334:	d005      	beq.n	b342 <__aeabi_dmul+0x3a6>
    b336:	1d1a      	adds	r2, r3, #4
    b338:	429a      	cmp	r2, r3
    b33a:	419b      	sbcs	r3, r3
    b33c:	425b      	negs	r3, r3
    b33e:	18e4      	adds	r4, r4, r3
    b340:	0013      	movs	r3, r2
    b342:	01e2      	lsls	r2, r4, #7
    b344:	d504      	bpl.n	b350 <__aeabi_dmul+0x3b4>
    b346:	2080      	movs	r0, #128	; 0x80
    b348:	4a51      	ldr	r2, [pc, #324]	; (b490 <__aeabi_dmul+0x4f4>)
    b34a:	00c0      	lsls	r0, r0, #3
    b34c:	4014      	ands	r4, r2
    b34e:	4460      	add	r0, ip
    b350:	4a50      	ldr	r2, [pc, #320]	; (b494 <__aeabi_dmul+0x4f8>)
    b352:	4290      	cmp	r0, r2
    b354:	dd00      	ble.n	b358 <__aeabi_dmul+0x3bc>
    b356:	e6e3      	b.n	b120 <__aeabi_dmul+0x184>
    b358:	2501      	movs	r5, #1
    b35a:	08db      	lsrs	r3, r3, #3
    b35c:	0762      	lsls	r2, r4, #29
    b35e:	431a      	orrs	r2, r3
    b360:	0264      	lsls	r4, r4, #9
    b362:	9b01      	ldr	r3, [sp, #4]
    b364:	4691      	mov	r9, r2
    b366:	0b22      	lsrs	r2, r4, #12
    b368:	0544      	lsls	r4, r0, #21
    b36a:	0d64      	lsrs	r4, r4, #21
    b36c:	401d      	ands	r5, r3
    b36e:	e67c      	b.n	b06a <__aeabi_dmul+0xce>
    b370:	2280      	movs	r2, #128	; 0x80
    b372:	4659      	mov	r1, fp
    b374:	0312      	lsls	r2, r2, #12
    b376:	4211      	tst	r1, r2
    b378:	d008      	beq.n	b38c <__aeabi_dmul+0x3f0>
    b37a:	4214      	tst	r4, r2
    b37c:	d106      	bne.n	b38c <__aeabi_dmul+0x3f0>
    b37e:	4322      	orrs	r2, r4
    b380:	0312      	lsls	r2, r2, #12
    b382:	0b12      	lsrs	r2, r2, #12
    b384:	4645      	mov	r5, r8
    b386:	4699      	mov	r9, r3
    b388:	4c43      	ldr	r4, [pc, #268]	; (b498 <__aeabi_dmul+0x4fc>)
    b38a:	e66e      	b.n	b06a <__aeabi_dmul+0xce>
    b38c:	465b      	mov	r3, fp
    b38e:	431a      	orrs	r2, r3
    b390:	0312      	lsls	r2, r2, #12
    b392:	0b12      	lsrs	r2, r2, #12
    b394:	4c40      	ldr	r4, [pc, #256]	; (b498 <__aeabi_dmul+0x4fc>)
    b396:	e668      	b.n	b06a <__aeabi_dmul+0xce>
    b398:	0003      	movs	r3, r0
    b39a:	4654      	mov	r4, sl
    b39c:	3b28      	subs	r3, #40	; 0x28
    b39e:	409c      	lsls	r4, r3
    b3a0:	2300      	movs	r3, #0
    b3a2:	e6b9      	b.n	b118 <__aeabi_dmul+0x17c>
    b3a4:	f000 fd3a 	bl	be1c <__clzsi2>
    b3a8:	3020      	adds	r0, #32
    b3aa:	e6a6      	b.n	b0fa <__aeabi_dmul+0x15e>
    b3ac:	0003      	movs	r3, r0
    b3ae:	3b28      	subs	r3, #40	; 0x28
    b3b0:	409f      	lsls	r7, r3
    b3b2:	2300      	movs	r3, #0
    b3b4:	46bb      	mov	fp, r7
    b3b6:	4699      	mov	r9, r3
    b3b8:	e68a      	b.n	b0d0 <__aeabi_dmul+0x134>
    b3ba:	f000 fd2f 	bl	be1c <__clzsi2>
    b3be:	3020      	adds	r0, #32
    b3c0:	e674      	b.n	b0ac <__aeabi_dmul+0x110>
    b3c2:	46b4      	mov	ip, r6
    b3c4:	e7ad      	b.n	b322 <__aeabi_dmul+0x386>
    b3c6:	2501      	movs	r5, #1
    b3c8:	1a2a      	subs	r2, r5, r0
    b3ca:	2a38      	cmp	r2, #56	; 0x38
    b3cc:	dd06      	ble.n	b3dc <__aeabi_dmul+0x440>
    b3ce:	9b01      	ldr	r3, [sp, #4]
    b3d0:	2400      	movs	r4, #0
    b3d2:	401d      	ands	r5, r3
    b3d4:	2300      	movs	r3, #0
    b3d6:	2200      	movs	r2, #0
    b3d8:	4699      	mov	r9, r3
    b3da:	e646      	b.n	b06a <__aeabi_dmul+0xce>
    b3dc:	2a1f      	cmp	r2, #31
    b3de:	dc21      	bgt.n	b424 <__aeabi_dmul+0x488>
    b3e0:	2520      	movs	r5, #32
    b3e2:	0020      	movs	r0, r4
    b3e4:	1aad      	subs	r5, r5, r2
    b3e6:	001e      	movs	r6, r3
    b3e8:	40ab      	lsls	r3, r5
    b3ea:	40a8      	lsls	r0, r5
    b3ec:	40d6      	lsrs	r6, r2
    b3ee:	1e5d      	subs	r5, r3, #1
    b3f0:	41ab      	sbcs	r3, r5
    b3f2:	4330      	orrs	r0, r6
    b3f4:	4318      	orrs	r0, r3
    b3f6:	40d4      	lsrs	r4, r2
    b3f8:	0743      	lsls	r3, r0, #29
    b3fa:	d009      	beq.n	b410 <__aeabi_dmul+0x474>
    b3fc:	230f      	movs	r3, #15
    b3fe:	4003      	ands	r3, r0
    b400:	2b04      	cmp	r3, #4
    b402:	d005      	beq.n	b410 <__aeabi_dmul+0x474>
    b404:	0003      	movs	r3, r0
    b406:	1d18      	adds	r0, r3, #4
    b408:	4298      	cmp	r0, r3
    b40a:	419b      	sbcs	r3, r3
    b40c:	425b      	negs	r3, r3
    b40e:	18e4      	adds	r4, r4, r3
    b410:	0223      	lsls	r3, r4, #8
    b412:	d521      	bpl.n	b458 <__aeabi_dmul+0x4bc>
    b414:	2501      	movs	r5, #1
    b416:	9b01      	ldr	r3, [sp, #4]
    b418:	2401      	movs	r4, #1
    b41a:	401d      	ands	r5, r3
    b41c:	2300      	movs	r3, #0
    b41e:	2200      	movs	r2, #0
    b420:	4699      	mov	r9, r3
    b422:	e622      	b.n	b06a <__aeabi_dmul+0xce>
    b424:	251f      	movs	r5, #31
    b426:	0021      	movs	r1, r4
    b428:	426d      	negs	r5, r5
    b42a:	1a28      	subs	r0, r5, r0
    b42c:	40c1      	lsrs	r1, r0
    b42e:	0008      	movs	r0, r1
    b430:	2a20      	cmp	r2, #32
    b432:	d01d      	beq.n	b470 <__aeabi_dmul+0x4d4>
    b434:	355f      	adds	r5, #95	; 0x5f
    b436:	1aaa      	subs	r2, r5, r2
    b438:	4094      	lsls	r4, r2
    b43a:	4323      	orrs	r3, r4
    b43c:	1e5c      	subs	r4, r3, #1
    b43e:	41a3      	sbcs	r3, r4
    b440:	2507      	movs	r5, #7
    b442:	4303      	orrs	r3, r0
    b444:	401d      	ands	r5, r3
    b446:	2200      	movs	r2, #0
    b448:	2d00      	cmp	r5, #0
    b44a:	d009      	beq.n	b460 <__aeabi_dmul+0x4c4>
    b44c:	220f      	movs	r2, #15
    b44e:	2400      	movs	r4, #0
    b450:	401a      	ands	r2, r3
    b452:	0018      	movs	r0, r3
    b454:	2a04      	cmp	r2, #4
    b456:	d1d6      	bne.n	b406 <__aeabi_dmul+0x46a>
    b458:	0003      	movs	r3, r0
    b45a:	0765      	lsls	r5, r4, #29
    b45c:	0264      	lsls	r4, r4, #9
    b45e:	0b22      	lsrs	r2, r4, #12
    b460:	08db      	lsrs	r3, r3, #3
    b462:	432b      	orrs	r3, r5
    b464:	2501      	movs	r5, #1
    b466:	4699      	mov	r9, r3
    b468:	9b01      	ldr	r3, [sp, #4]
    b46a:	2400      	movs	r4, #0
    b46c:	401d      	ands	r5, r3
    b46e:	e5fc      	b.n	b06a <__aeabi_dmul+0xce>
    b470:	2400      	movs	r4, #0
    b472:	e7e2      	b.n	b43a <__aeabi_dmul+0x49e>
    b474:	2280      	movs	r2, #128	; 0x80
    b476:	2501      	movs	r5, #1
    b478:	0312      	lsls	r2, r2, #12
    b47a:	4322      	orrs	r2, r4
    b47c:	9901      	ldr	r1, [sp, #4]
    b47e:	0312      	lsls	r2, r2, #12
    b480:	0b12      	lsrs	r2, r2, #12
    b482:	400d      	ands	r5, r1
    b484:	4699      	mov	r9, r3
    b486:	4c04      	ldr	r4, [pc, #16]	; (b498 <__aeabi_dmul+0x4fc>)
    b488:	e5ef      	b.n	b06a <__aeabi_dmul+0xce>
    b48a:	46c0      	nop			; (mov r8, r8)
    b48c:	000003ff 	.word	0x000003ff
    b490:	feffffff 	.word	0xfeffffff
    b494:	000007fe 	.word	0x000007fe
    b498:	000007ff 	.word	0x000007ff

0000b49c <__aeabi_dsub>:
    b49c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b49e:	4646      	mov	r6, r8
    b4a0:	46d6      	mov	lr, sl
    b4a2:	464f      	mov	r7, r9
    b4a4:	030c      	lsls	r4, r1, #12
    b4a6:	b5c0      	push	{r6, r7, lr}
    b4a8:	0fcd      	lsrs	r5, r1, #31
    b4aa:	004e      	lsls	r6, r1, #1
    b4ac:	0a61      	lsrs	r1, r4, #9
    b4ae:	0f44      	lsrs	r4, r0, #29
    b4b0:	430c      	orrs	r4, r1
    b4b2:	00c1      	lsls	r1, r0, #3
    b4b4:	0058      	lsls	r0, r3, #1
    b4b6:	0d40      	lsrs	r0, r0, #21
    b4b8:	4684      	mov	ip, r0
    b4ba:	468a      	mov	sl, r1
    b4bc:	000f      	movs	r7, r1
    b4be:	0319      	lsls	r1, r3, #12
    b4c0:	0f50      	lsrs	r0, r2, #29
    b4c2:	0a49      	lsrs	r1, r1, #9
    b4c4:	4301      	orrs	r1, r0
    b4c6:	48c6      	ldr	r0, [pc, #792]	; (b7e0 <__aeabi_dsub+0x344>)
    b4c8:	0d76      	lsrs	r6, r6, #21
    b4ca:	46a8      	mov	r8, r5
    b4cc:	0fdb      	lsrs	r3, r3, #31
    b4ce:	00d2      	lsls	r2, r2, #3
    b4d0:	4584      	cmp	ip, r0
    b4d2:	d100      	bne.n	b4d6 <__aeabi_dsub+0x3a>
    b4d4:	e0d8      	b.n	b688 <__aeabi_dsub+0x1ec>
    b4d6:	2001      	movs	r0, #1
    b4d8:	4043      	eors	r3, r0
    b4da:	42ab      	cmp	r3, r5
    b4dc:	d100      	bne.n	b4e0 <__aeabi_dsub+0x44>
    b4de:	e0a6      	b.n	b62e <__aeabi_dsub+0x192>
    b4e0:	4660      	mov	r0, ip
    b4e2:	1a35      	subs	r5, r6, r0
    b4e4:	2d00      	cmp	r5, #0
    b4e6:	dc00      	bgt.n	b4ea <__aeabi_dsub+0x4e>
    b4e8:	e105      	b.n	b6f6 <__aeabi_dsub+0x25a>
    b4ea:	2800      	cmp	r0, #0
    b4ec:	d110      	bne.n	b510 <__aeabi_dsub+0x74>
    b4ee:	000b      	movs	r3, r1
    b4f0:	4313      	orrs	r3, r2
    b4f2:	d100      	bne.n	b4f6 <__aeabi_dsub+0x5a>
    b4f4:	e0d7      	b.n	b6a6 <__aeabi_dsub+0x20a>
    b4f6:	1e6b      	subs	r3, r5, #1
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d000      	beq.n	b4fe <__aeabi_dsub+0x62>
    b4fc:	e14b      	b.n	b796 <__aeabi_dsub+0x2fa>
    b4fe:	4653      	mov	r3, sl
    b500:	1a9f      	subs	r7, r3, r2
    b502:	45ba      	cmp	sl, r7
    b504:	4180      	sbcs	r0, r0
    b506:	1a64      	subs	r4, r4, r1
    b508:	4240      	negs	r0, r0
    b50a:	1a24      	subs	r4, r4, r0
    b50c:	2601      	movs	r6, #1
    b50e:	e01e      	b.n	b54e <__aeabi_dsub+0xb2>
    b510:	4bb3      	ldr	r3, [pc, #716]	; (b7e0 <__aeabi_dsub+0x344>)
    b512:	429e      	cmp	r6, r3
    b514:	d048      	beq.n	b5a8 <__aeabi_dsub+0x10c>
    b516:	2380      	movs	r3, #128	; 0x80
    b518:	041b      	lsls	r3, r3, #16
    b51a:	4319      	orrs	r1, r3
    b51c:	2d38      	cmp	r5, #56	; 0x38
    b51e:	dd00      	ble.n	b522 <__aeabi_dsub+0x86>
    b520:	e119      	b.n	b756 <__aeabi_dsub+0x2ba>
    b522:	2d1f      	cmp	r5, #31
    b524:	dd00      	ble.n	b528 <__aeabi_dsub+0x8c>
    b526:	e14c      	b.n	b7c2 <__aeabi_dsub+0x326>
    b528:	2320      	movs	r3, #32
    b52a:	000f      	movs	r7, r1
    b52c:	1b5b      	subs	r3, r3, r5
    b52e:	0010      	movs	r0, r2
    b530:	409a      	lsls	r2, r3
    b532:	409f      	lsls	r7, r3
    b534:	40e8      	lsrs	r0, r5
    b536:	1e53      	subs	r3, r2, #1
    b538:	419a      	sbcs	r2, r3
    b53a:	40e9      	lsrs	r1, r5
    b53c:	4307      	orrs	r7, r0
    b53e:	4317      	orrs	r7, r2
    b540:	4653      	mov	r3, sl
    b542:	1bdf      	subs	r7, r3, r7
    b544:	1a61      	subs	r1, r4, r1
    b546:	45ba      	cmp	sl, r7
    b548:	41a4      	sbcs	r4, r4
    b54a:	4264      	negs	r4, r4
    b54c:	1b0c      	subs	r4, r1, r4
    b54e:	0223      	lsls	r3, r4, #8
    b550:	d400      	bmi.n	b554 <__aeabi_dsub+0xb8>
    b552:	e0c5      	b.n	b6e0 <__aeabi_dsub+0x244>
    b554:	0264      	lsls	r4, r4, #9
    b556:	0a65      	lsrs	r5, r4, #9
    b558:	2d00      	cmp	r5, #0
    b55a:	d100      	bne.n	b55e <__aeabi_dsub+0xc2>
    b55c:	e0f6      	b.n	b74c <__aeabi_dsub+0x2b0>
    b55e:	0028      	movs	r0, r5
    b560:	f000 fc5c 	bl	be1c <__clzsi2>
    b564:	0003      	movs	r3, r0
    b566:	3b08      	subs	r3, #8
    b568:	2b1f      	cmp	r3, #31
    b56a:	dd00      	ble.n	b56e <__aeabi_dsub+0xd2>
    b56c:	e0e9      	b.n	b742 <__aeabi_dsub+0x2a6>
    b56e:	2220      	movs	r2, #32
    b570:	003c      	movs	r4, r7
    b572:	1ad2      	subs	r2, r2, r3
    b574:	409d      	lsls	r5, r3
    b576:	40d4      	lsrs	r4, r2
    b578:	409f      	lsls	r7, r3
    b57a:	4325      	orrs	r5, r4
    b57c:	429e      	cmp	r6, r3
    b57e:	dd00      	ble.n	b582 <__aeabi_dsub+0xe6>
    b580:	e0db      	b.n	b73a <__aeabi_dsub+0x29e>
    b582:	1b9e      	subs	r6, r3, r6
    b584:	1c73      	adds	r3, r6, #1
    b586:	2b1f      	cmp	r3, #31
    b588:	dd00      	ble.n	b58c <__aeabi_dsub+0xf0>
    b58a:	e10a      	b.n	b7a2 <__aeabi_dsub+0x306>
    b58c:	2220      	movs	r2, #32
    b58e:	0038      	movs	r0, r7
    b590:	1ad2      	subs	r2, r2, r3
    b592:	0029      	movs	r1, r5
    b594:	4097      	lsls	r7, r2
    b596:	002c      	movs	r4, r5
    b598:	4091      	lsls	r1, r2
    b59a:	40d8      	lsrs	r0, r3
    b59c:	1e7a      	subs	r2, r7, #1
    b59e:	4197      	sbcs	r7, r2
    b5a0:	40dc      	lsrs	r4, r3
    b5a2:	2600      	movs	r6, #0
    b5a4:	4301      	orrs	r1, r0
    b5a6:	430f      	orrs	r7, r1
    b5a8:	077b      	lsls	r3, r7, #29
    b5aa:	d009      	beq.n	b5c0 <__aeabi_dsub+0x124>
    b5ac:	230f      	movs	r3, #15
    b5ae:	403b      	ands	r3, r7
    b5b0:	2b04      	cmp	r3, #4
    b5b2:	d005      	beq.n	b5c0 <__aeabi_dsub+0x124>
    b5b4:	1d3b      	adds	r3, r7, #4
    b5b6:	42bb      	cmp	r3, r7
    b5b8:	41bf      	sbcs	r7, r7
    b5ba:	427f      	negs	r7, r7
    b5bc:	19e4      	adds	r4, r4, r7
    b5be:	001f      	movs	r7, r3
    b5c0:	0223      	lsls	r3, r4, #8
    b5c2:	d525      	bpl.n	b610 <__aeabi_dsub+0x174>
    b5c4:	4b86      	ldr	r3, [pc, #536]	; (b7e0 <__aeabi_dsub+0x344>)
    b5c6:	3601      	adds	r6, #1
    b5c8:	429e      	cmp	r6, r3
    b5ca:	d100      	bne.n	b5ce <__aeabi_dsub+0x132>
    b5cc:	e0af      	b.n	b72e <__aeabi_dsub+0x292>
    b5ce:	4b85      	ldr	r3, [pc, #532]	; (b7e4 <__aeabi_dsub+0x348>)
    b5d0:	2501      	movs	r5, #1
    b5d2:	401c      	ands	r4, r3
    b5d4:	4643      	mov	r3, r8
    b5d6:	0762      	lsls	r2, r4, #29
    b5d8:	08ff      	lsrs	r7, r7, #3
    b5da:	0264      	lsls	r4, r4, #9
    b5dc:	0576      	lsls	r6, r6, #21
    b5de:	4317      	orrs	r7, r2
    b5e0:	0b24      	lsrs	r4, r4, #12
    b5e2:	0d76      	lsrs	r6, r6, #21
    b5e4:	401d      	ands	r5, r3
    b5e6:	2100      	movs	r1, #0
    b5e8:	0324      	lsls	r4, r4, #12
    b5ea:	0b23      	lsrs	r3, r4, #12
    b5ec:	0d0c      	lsrs	r4, r1, #20
    b5ee:	4a7e      	ldr	r2, [pc, #504]	; (b7e8 <__aeabi_dsub+0x34c>)
    b5f0:	0524      	lsls	r4, r4, #20
    b5f2:	431c      	orrs	r4, r3
    b5f4:	4014      	ands	r4, r2
    b5f6:	0533      	lsls	r3, r6, #20
    b5f8:	4323      	orrs	r3, r4
    b5fa:	005b      	lsls	r3, r3, #1
    b5fc:	07ed      	lsls	r5, r5, #31
    b5fe:	085b      	lsrs	r3, r3, #1
    b600:	432b      	orrs	r3, r5
    b602:	0038      	movs	r0, r7
    b604:	0019      	movs	r1, r3
    b606:	bc1c      	pop	{r2, r3, r4}
    b608:	4690      	mov	r8, r2
    b60a:	4699      	mov	r9, r3
    b60c:	46a2      	mov	sl, r4
    b60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b610:	2501      	movs	r5, #1
    b612:	4643      	mov	r3, r8
    b614:	0762      	lsls	r2, r4, #29
    b616:	08ff      	lsrs	r7, r7, #3
    b618:	4317      	orrs	r7, r2
    b61a:	08e4      	lsrs	r4, r4, #3
    b61c:	401d      	ands	r5, r3
    b61e:	4b70      	ldr	r3, [pc, #448]	; (b7e0 <__aeabi_dsub+0x344>)
    b620:	429e      	cmp	r6, r3
    b622:	d036      	beq.n	b692 <__aeabi_dsub+0x1f6>
    b624:	0324      	lsls	r4, r4, #12
    b626:	0576      	lsls	r6, r6, #21
    b628:	0b24      	lsrs	r4, r4, #12
    b62a:	0d76      	lsrs	r6, r6, #21
    b62c:	e7db      	b.n	b5e6 <__aeabi_dsub+0x14a>
    b62e:	4663      	mov	r3, ip
    b630:	1af3      	subs	r3, r6, r3
    b632:	2b00      	cmp	r3, #0
    b634:	dc00      	bgt.n	b638 <__aeabi_dsub+0x19c>
    b636:	e094      	b.n	b762 <__aeabi_dsub+0x2c6>
    b638:	4660      	mov	r0, ip
    b63a:	2800      	cmp	r0, #0
    b63c:	d035      	beq.n	b6aa <__aeabi_dsub+0x20e>
    b63e:	4868      	ldr	r0, [pc, #416]	; (b7e0 <__aeabi_dsub+0x344>)
    b640:	4286      	cmp	r6, r0
    b642:	d0b1      	beq.n	b5a8 <__aeabi_dsub+0x10c>
    b644:	2780      	movs	r7, #128	; 0x80
    b646:	043f      	lsls	r7, r7, #16
    b648:	4339      	orrs	r1, r7
    b64a:	2b38      	cmp	r3, #56	; 0x38
    b64c:	dc00      	bgt.n	b650 <__aeabi_dsub+0x1b4>
    b64e:	e0fd      	b.n	b84c <__aeabi_dsub+0x3b0>
    b650:	430a      	orrs	r2, r1
    b652:	0017      	movs	r7, r2
    b654:	2100      	movs	r1, #0
    b656:	1e7a      	subs	r2, r7, #1
    b658:	4197      	sbcs	r7, r2
    b65a:	4457      	add	r7, sl
    b65c:	4557      	cmp	r7, sl
    b65e:	4180      	sbcs	r0, r0
    b660:	1909      	adds	r1, r1, r4
    b662:	4244      	negs	r4, r0
    b664:	190c      	adds	r4, r1, r4
    b666:	0223      	lsls	r3, r4, #8
    b668:	d53a      	bpl.n	b6e0 <__aeabi_dsub+0x244>
    b66a:	4b5d      	ldr	r3, [pc, #372]	; (b7e0 <__aeabi_dsub+0x344>)
    b66c:	3601      	adds	r6, #1
    b66e:	429e      	cmp	r6, r3
    b670:	d100      	bne.n	b674 <__aeabi_dsub+0x1d8>
    b672:	e14b      	b.n	b90c <__aeabi_dsub+0x470>
    b674:	2201      	movs	r2, #1
    b676:	4b5b      	ldr	r3, [pc, #364]	; (b7e4 <__aeabi_dsub+0x348>)
    b678:	401c      	ands	r4, r3
    b67a:	087b      	lsrs	r3, r7, #1
    b67c:	4017      	ands	r7, r2
    b67e:	431f      	orrs	r7, r3
    b680:	07e2      	lsls	r2, r4, #31
    b682:	4317      	orrs	r7, r2
    b684:	0864      	lsrs	r4, r4, #1
    b686:	e78f      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b688:	0008      	movs	r0, r1
    b68a:	4310      	orrs	r0, r2
    b68c:	d000      	beq.n	b690 <__aeabi_dsub+0x1f4>
    b68e:	e724      	b.n	b4da <__aeabi_dsub+0x3e>
    b690:	e721      	b.n	b4d6 <__aeabi_dsub+0x3a>
    b692:	0023      	movs	r3, r4
    b694:	433b      	orrs	r3, r7
    b696:	d100      	bne.n	b69a <__aeabi_dsub+0x1fe>
    b698:	e1b9      	b.n	ba0e <__aeabi_dsub+0x572>
    b69a:	2280      	movs	r2, #128	; 0x80
    b69c:	0312      	lsls	r2, r2, #12
    b69e:	4314      	orrs	r4, r2
    b6a0:	0324      	lsls	r4, r4, #12
    b6a2:	0b24      	lsrs	r4, r4, #12
    b6a4:	e79f      	b.n	b5e6 <__aeabi_dsub+0x14a>
    b6a6:	002e      	movs	r6, r5
    b6a8:	e77e      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b6aa:	0008      	movs	r0, r1
    b6ac:	4310      	orrs	r0, r2
    b6ae:	d100      	bne.n	b6b2 <__aeabi_dsub+0x216>
    b6b0:	e0ca      	b.n	b848 <__aeabi_dsub+0x3ac>
    b6b2:	1e58      	subs	r0, r3, #1
    b6b4:	4684      	mov	ip, r0
    b6b6:	2800      	cmp	r0, #0
    b6b8:	d000      	beq.n	b6bc <__aeabi_dsub+0x220>
    b6ba:	e0e7      	b.n	b88c <__aeabi_dsub+0x3f0>
    b6bc:	4452      	add	r2, sl
    b6be:	4552      	cmp	r2, sl
    b6c0:	4180      	sbcs	r0, r0
    b6c2:	1864      	adds	r4, r4, r1
    b6c4:	4240      	negs	r0, r0
    b6c6:	1824      	adds	r4, r4, r0
    b6c8:	0017      	movs	r7, r2
    b6ca:	2601      	movs	r6, #1
    b6cc:	0223      	lsls	r3, r4, #8
    b6ce:	d507      	bpl.n	b6e0 <__aeabi_dsub+0x244>
    b6d0:	2602      	movs	r6, #2
    b6d2:	e7cf      	b.n	b674 <__aeabi_dsub+0x1d8>
    b6d4:	4664      	mov	r4, ip
    b6d6:	432c      	orrs	r4, r5
    b6d8:	d100      	bne.n	b6dc <__aeabi_dsub+0x240>
    b6da:	e1b3      	b.n	ba44 <__aeabi_dsub+0x5a8>
    b6dc:	002c      	movs	r4, r5
    b6de:	4667      	mov	r7, ip
    b6e0:	077b      	lsls	r3, r7, #29
    b6e2:	d000      	beq.n	b6e6 <__aeabi_dsub+0x24a>
    b6e4:	e762      	b.n	b5ac <__aeabi_dsub+0x110>
    b6e6:	0763      	lsls	r3, r4, #29
    b6e8:	08ff      	lsrs	r7, r7, #3
    b6ea:	431f      	orrs	r7, r3
    b6ec:	2501      	movs	r5, #1
    b6ee:	4643      	mov	r3, r8
    b6f0:	08e4      	lsrs	r4, r4, #3
    b6f2:	401d      	ands	r5, r3
    b6f4:	e793      	b.n	b61e <__aeabi_dsub+0x182>
    b6f6:	2d00      	cmp	r5, #0
    b6f8:	d178      	bne.n	b7ec <__aeabi_dsub+0x350>
    b6fa:	1c75      	adds	r5, r6, #1
    b6fc:	056d      	lsls	r5, r5, #21
    b6fe:	0d6d      	lsrs	r5, r5, #21
    b700:	2d01      	cmp	r5, #1
    b702:	dc00      	bgt.n	b706 <__aeabi_dsub+0x26a>
    b704:	e0f2      	b.n	b8ec <__aeabi_dsub+0x450>
    b706:	4650      	mov	r0, sl
    b708:	1a80      	subs	r0, r0, r2
    b70a:	4582      	cmp	sl, r0
    b70c:	41bf      	sbcs	r7, r7
    b70e:	1a65      	subs	r5, r4, r1
    b710:	427f      	negs	r7, r7
    b712:	1bed      	subs	r5, r5, r7
    b714:	4684      	mov	ip, r0
    b716:	0228      	lsls	r0, r5, #8
    b718:	d400      	bmi.n	b71c <__aeabi_dsub+0x280>
    b71a:	e08c      	b.n	b836 <__aeabi_dsub+0x39a>
    b71c:	4650      	mov	r0, sl
    b71e:	1a17      	subs	r7, r2, r0
    b720:	42ba      	cmp	r2, r7
    b722:	4192      	sbcs	r2, r2
    b724:	1b0c      	subs	r4, r1, r4
    b726:	4255      	negs	r5, r2
    b728:	1b65      	subs	r5, r4, r5
    b72a:	4698      	mov	r8, r3
    b72c:	e714      	b.n	b558 <__aeabi_dsub+0xbc>
    b72e:	2501      	movs	r5, #1
    b730:	4643      	mov	r3, r8
    b732:	2400      	movs	r4, #0
    b734:	401d      	ands	r5, r3
    b736:	2700      	movs	r7, #0
    b738:	e755      	b.n	b5e6 <__aeabi_dsub+0x14a>
    b73a:	4c2a      	ldr	r4, [pc, #168]	; (b7e4 <__aeabi_dsub+0x348>)
    b73c:	1af6      	subs	r6, r6, r3
    b73e:	402c      	ands	r4, r5
    b740:	e732      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b742:	003d      	movs	r5, r7
    b744:	3828      	subs	r0, #40	; 0x28
    b746:	4085      	lsls	r5, r0
    b748:	2700      	movs	r7, #0
    b74a:	e717      	b.n	b57c <__aeabi_dsub+0xe0>
    b74c:	0038      	movs	r0, r7
    b74e:	f000 fb65 	bl	be1c <__clzsi2>
    b752:	3020      	adds	r0, #32
    b754:	e706      	b.n	b564 <__aeabi_dsub+0xc8>
    b756:	430a      	orrs	r2, r1
    b758:	0017      	movs	r7, r2
    b75a:	2100      	movs	r1, #0
    b75c:	1e7a      	subs	r2, r7, #1
    b75e:	4197      	sbcs	r7, r2
    b760:	e6ee      	b.n	b540 <__aeabi_dsub+0xa4>
    b762:	2b00      	cmp	r3, #0
    b764:	d000      	beq.n	b768 <__aeabi_dsub+0x2cc>
    b766:	e0e5      	b.n	b934 <__aeabi_dsub+0x498>
    b768:	1c73      	adds	r3, r6, #1
    b76a:	469c      	mov	ip, r3
    b76c:	055b      	lsls	r3, r3, #21
    b76e:	0d5b      	lsrs	r3, r3, #21
    b770:	2b01      	cmp	r3, #1
    b772:	dc00      	bgt.n	b776 <__aeabi_dsub+0x2da>
    b774:	e09f      	b.n	b8b6 <__aeabi_dsub+0x41a>
    b776:	4b1a      	ldr	r3, [pc, #104]	; (b7e0 <__aeabi_dsub+0x344>)
    b778:	459c      	cmp	ip, r3
    b77a:	d100      	bne.n	b77e <__aeabi_dsub+0x2e2>
    b77c:	e0c5      	b.n	b90a <__aeabi_dsub+0x46e>
    b77e:	4452      	add	r2, sl
    b780:	4552      	cmp	r2, sl
    b782:	4180      	sbcs	r0, r0
    b784:	1864      	adds	r4, r4, r1
    b786:	4240      	negs	r0, r0
    b788:	1824      	adds	r4, r4, r0
    b78a:	07e7      	lsls	r7, r4, #31
    b78c:	0852      	lsrs	r2, r2, #1
    b78e:	4317      	orrs	r7, r2
    b790:	0864      	lsrs	r4, r4, #1
    b792:	4666      	mov	r6, ip
    b794:	e708      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b796:	4812      	ldr	r0, [pc, #72]	; (b7e0 <__aeabi_dsub+0x344>)
    b798:	4285      	cmp	r5, r0
    b79a:	d100      	bne.n	b79e <__aeabi_dsub+0x302>
    b79c:	e085      	b.n	b8aa <__aeabi_dsub+0x40e>
    b79e:	001d      	movs	r5, r3
    b7a0:	e6bc      	b.n	b51c <__aeabi_dsub+0x80>
    b7a2:	0029      	movs	r1, r5
    b7a4:	3e1f      	subs	r6, #31
    b7a6:	40f1      	lsrs	r1, r6
    b7a8:	2b20      	cmp	r3, #32
    b7aa:	d100      	bne.n	b7ae <__aeabi_dsub+0x312>
    b7ac:	e07f      	b.n	b8ae <__aeabi_dsub+0x412>
    b7ae:	2240      	movs	r2, #64	; 0x40
    b7b0:	1ad3      	subs	r3, r2, r3
    b7b2:	409d      	lsls	r5, r3
    b7b4:	432f      	orrs	r7, r5
    b7b6:	1e7d      	subs	r5, r7, #1
    b7b8:	41af      	sbcs	r7, r5
    b7ba:	2400      	movs	r4, #0
    b7bc:	430f      	orrs	r7, r1
    b7be:	2600      	movs	r6, #0
    b7c0:	e78e      	b.n	b6e0 <__aeabi_dsub+0x244>
    b7c2:	002b      	movs	r3, r5
    b7c4:	000f      	movs	r7, r1
    b7c6:	3b20      	subs	r3, #32
    b7c8:	40df      	lsrs	r7, r3
    b7ca:	2d20      	cmp	r5, #32
    b7cc:	d071      	beq.n	b8b2 <__aeabi_dsub+0x416>
    b7ce:	2340      	movs	r3, #64	; 0x40
    b7d0:	1b5d      	subs	r5, r3, r5
    b7d2:	40a9      	lsls	r1, r5
    b7d4:	430a      	orrs	r2, r1
    b7d6:	1e51      	subs	r1, r2, #1
    b7d8:	418a      	sbcs	r2, r1
    b7da:	2100      	movs	r1, #0
    b7dc:	4317      	orrs	r7, r2
    b7de:	e6af      	b.n	b540 <__aeabi_dsub+0xa4>
    b7e0:	000007ff 	.word	0x000007ff
    b7e4:	ff7fffff 	.word	0xff7fffff
    b7e8:	800fffff 	.word	0x800fffff
    b7ec:	2e00      	cmp	r6, #0
    b7ee:	d03e      	beq.n	b86e <__aeabi_dsub+0x3d2>
    b7f0:	4eb3      	ldr	r6, [pc, #716]	; (bac0 <__aeabi_dsub+0x624>)
    b7f2:	45b4      	cmp	ip, r6
    b7f4:	d045      	beq.n	b882 <__aeabi_dsub+0x3e6>
    b7f6:	2680      	movs	r6, #128	; 0x80
    b7f8:	0436      	lsls	r6, r6, #16
    b7fa:	426d      	negs	r5, r5
    b7fc:	4334      	orrs	r4, r6
    b7fe:	2d38      	cmp	r5, #56	; 0x38
    b800:	dd00      	ble.n	b804 <__aeabi_dsub+0x368>
    b802:	e0a8      	b.n	b956 <__aeabi_dsub+0x4ba>
    b804:	2d1f      	cmp	r5, #31
    b806:	dd00      	ble.n	b80a <__aeabi_dsub+0x36e>
    b808:	e11f      	b.n	ba4a <__aeabi_dsub+0x5ae>
    b80a:	2620      	movs	r6, #32
    b80c:	0027      	movs	r7, r4
    b80e:	4650      	mov	r0, sl
    b810:	1b76      	subs	r6, r6, r5
    b812:	40b7      	lsls	r7, r6
    b814:	40e8      	lsrs	r0, r5
    b816:	4307      	orrs	r7, r0
    b818:	4650      	mov	r0, sl
    b81a:	40b0      	lsls	r0, r6
    b81c:	1e46      	subs	r6, r0, #1
    b81e:	41b0      	sbcs	r0, r6
    b820:	40ec      	lsrs	r4, r5
    b822:	4338      	orrs	r0, r7
    b824:	1a17      	subs	r7, r2, r0
    b826:	42ba      	cmp	r2, r7
    b828:	4192      	sbcs	r2, r2
    b82a:	1b0c      	subs	r4, r1, r4
    b82c:	4252      	negs	r2, r2
    b82e:	1aa4      	subs	r4, r4, r2
    b830:	4666      	mov	r6, ip
    b832:	4698      	mov	r8, r3
    b834:	e68b      	b.n	b54e <__aeabi_dsub+0xb2>
    b836:	4664      	mov	r4, ip
    b838:	4667      	mov	r7, ip
    b83a:	432c      	orrs	r4, r5
    b83c:	d000      	beq.n	b840 <__aeabi_dsub+0x3a4>
    b83e:	e68b      	b.n	b558 <__aeabi_dsub+0xbc>
    b840:	2500      	movs	r5, #0
    b842:	2600      	movs	r6, #0
    b844:	2700      	movs	r7, #0
    b846:	e6ea      	b.n	b61e <__aeabi_dsub+0x182>
    b848:	001e      	movs	r6, r3
    b84a:	e6ad      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b84c:	2b1f      	cmp	r3, #31
    b84e:	dc60      	bgt.n	b912 <__aeabi_dsub+0x476>
    b850:	2720      	movs	r7, #32
    b852:	1af8      	subs	r0, r7, r3
    b854:	000f      	movs	r7, r1
    b856:	4684      	mov	ip, r0
    b858:	4087      	lsls	r7, r0
    b85a:	0010      	movs	r0, r2
    b85c:	40d8      	lsrs	r0, r3
    b85e:	4307      	orrs	r7, r0
    b860:	4660      	mov	r0, ip
    b862:	4082      	lsls	r2, r0
    b864:	1e50      	subs	r0, r2, #1
    b866:	4182      	sbcs	r2, r0
    b868:	40d9      	lsrs	r1, r3
    b86a:	4317      	orrs	r7, r2
    b86c:	e6f5      	b.n	b65a <__aeabi_dsub+0x1be>
    b86e:	0026      	movs	r6, r4
    b870:	4650      	mov	r0, sl
    b872:	4306      	orrs	r6, r0
    b874:	d005      	beq.n	b882 <__aeabi_dsub+0x3e6>
    b876:	43ed      	mvns	r5, r5
    b878:	2d00      	cmp	r5, #0
    b87a:	d0d3      	beq.n	b824 <__aeabi_dsub+0x388>
    b87c:	4e90      	ldr	r6, [pc, #576]	; (bac0 <__aeabi_dsub+0x624>)
    b87e:	45b4      	cmp	ip, r6
    b880:	d1bd      	bne.n	b7fe <__aeabi_dsub+0x362>
    b882:	000c      	movs	r4, r1
    b884:	0017      	movs	r7, r2
    b886:	4666      	mov	r6, ip
    b888:	4698      	mov	r8, r3
    b88a:	e68d      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b88c:	488c      	ldr	r0, [pc, #560]	; (bac0 <__aeabi_dsub+0x624>)
    b88e:	4283      	cmp	r3, r0
    b890:	d00b      	beq.n	b8aa <__aeabi_dsub+0x40e>
    b892:	4663      	mov	r3, ip
    b894:	e6d9      	b.n	b64a <__aeabi_dsub+0x1ae>
    b896:	2d00      	cmp	r5, #0
    b898:	d000      	beq.n	b89c <__aeabi_dsub+0x400>
    b89a:	e096      	b.n	b9ca <__aeabi_dsub+0x52e>
    b89c:	0008      	movs	r0, r1
    b89e:	4310      	orrs	r0, r2
    b8a0:	d100      	bne.n	b8a4 <__aeabi_dsub+0x408>
    b8a2:	e0e2      	b.n	ba6a <__aeabi_dsub+0x5ce>
    b8a4:	000c      	movs	r4, r1
    b8a6:	0017      	movs	r7, r2
    b8a8:	4698      	mov	r8, r3
    b8aa:	4e85      	ldr	r6, [pc, #532]	; (bac0 <__aeabi_dsub+0x624>)
    b8ac:	e67c      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b8ae:	2500      	movs	r5, #0
    b8b0:	e780      	b.n	b7b4 <__aeabi_dsub+0x318>
    b8b2:	2100      	movs	r1, #0
    b8b4:	e78e      	b.n	b7d4 <__aeabi_dsub+0x338>
    b8b6:	0023      	movs	r3, r4
    b8b8:	4650      	mov	r0, sl
    b8ba:	4303      	orrs	r3, r0
    b8bc:	2e00      	cmp	r6, #0
    b8be:	d000      	beq.n	b8c2 <__aeabi_dsub+0x426>
    b8c0:	e0a8      	b.n	ba14 <__aeabi_dsub+0x578>
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d100      	bne.n	b8c8 <__aeabi_dsub+0x42c>
    b8c6:	e0de      	b.n	ba86 <__aeabi_dsub+0x5ea>
    b8c8:	000b      	movs	r3, r1
    b8ca:	4313      	orrs	r3, r2
    b8cc:	d100      	bne.n	b8d0 <__aeabi_dsub+0x434>
    b8ce:	e66b      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b8d0:	4452      	add	r2, sl
    b8d2:	4552      	cmp	r2, sl
    b8d4:	4180      	sbcs	r0, r0
    b8d6:	1864      	adds	r4, r4, r1
    b8d8:	4240      	negs	r0, r0
    b8da:	1824      	adds	r4, r4, r0
    b8dc:	0017      	movs	r7, r2
    b8de:	0223      	lsls	r3, r4, #8
    b8e0:	d400      	bmi.n	b8e4 <__aeabi_dsub+0x448>
    b8e2:	e6fd      	b.n	b6e0 <__aeabi_dsub+0x244>
    b8e4:	4b77      	ldr	r3, [pc, #476]	; (bac4 <__aeabi_dsub+0x628>)
    b8e6:	4666      	mov	r6, ip
    b8e8:	401c      	ands	r4, r3
    b8ea:	e65d      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b8ec:	0025      	movs	r5, r4
    b8ee:	4650      	mov	r0, sl
    b8f0:	4305      	orrs	r5, r0
    b8f2:	2e00      	cmp	r6, #0
    b8f4:	d1cf      	bne.n	b896 <__aeabi_dsub+0x3fa>
    b8f6:	2d00      	cmp	r5, #0
    b8f8:	d14f      	bne.n	b99a <__aeabi_dsub+0x4fe>
    b8fa:	000c      	movs	r4, r1
    b8fc:	4314      	orrs	r4, r2
    b8fe:	d100      	bne.n	b902 <__aeabi_dsub+0x466>
    b900:	e0a0      	b.n	ba44 <__aeabi_dsub+0x5a8>
    b902:	000c      	movs	r4, r1
    b904:	0017      	movs	r7, r2
    b906:	4698      	mov	r8, r3
    b908:	e64e      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b90a:	4666      	mov	r6, ip
    b90c:	2400      	movs	r4, #0
    b90e:	2700      	movs	r7, #0
    b910:	e685      	b.n	b61e <__aeabi_dsub+0x182>
    b912:	001f      	movs	r7, r3
    b914:	0008      	movs	r0, r1
    b916:	3f20      	subs	r7, #32
    b918:	40f8      	lsrs	r0, r7
    b91a:	0007      	movs	r7, r0
    b91c:	2b20      	cmp	r3, #32
    b91e:	d100      	bne.n	b922 <__aeabi_dsub+0x486>
    b920:	e08e      	b.n	ba40 <__aeabi_dsub+0x5a4>
    b922:	2040      	movs	r0, #64	; 0x40
    b924:	1ac3      	subs	r3, r0, r3
    b926:	4099      	lsls	r1, r3
    b928:	430a      	orrs	r2, r1
    b92a:	1e51      	subs	r1, r2, #1
    b92c:	418a      	sbcs	r2, r1
    b92e:	2100      	movs	r1, #0
    b930:	4317      	orrs	r7, r2
    b932:	e692      	b.n	b65a <__aeabi_dsub+0x1be>
    b934:	2e00      	cmp	r6, #0
    b936:	d114      	bne.n	b962 <__aeabi_dsub+0x4c6>
    b938:	0026      	movs	r6, r4
    b93a:	4650      	mov	r0, sl
    b93c:	4306      	orrs	r6, r0
    b93e:	d062      	beq.n	ba06 <__aeabi_dsub+0x56a>
    b940:	43db      	mvns	r3, r3
    b942:	2b00      	cmp	r3, #0
    b944:	d15c      	bne.n	ba00 <__aeabi_dsub+0x564>
    b946:	1887      	adds	r7, r0, r2
    b948:	4297      	cmp	r7, r2
    b94a:	4192      	sbcs	r2, r2
    b94c:	1864      	adds	r4, r4, r1
    b94e:	4252      	negs	r2, r2
    b950:	18a4      	adds	r4, r4, r2
    b952:	4666      	mov	r6, ip
    b954:	e687      	b.n	b666 <__aeabi_dsub+0x1ca>
    b956:	4650      	mov	r0, sl
    b958:	4320      	orrs	r0, r4
    b95a:	1e44      	subs	r4, r0, #1
    b95c:	41a0      	sbcs	r0, r4
    b95e:	2400      	movs	r4, #0
    b960:	e760      	b.n	b824 <__aeabi_dsub+0x388>
    b962:	4e57      	ldr	r6, [pc, #348]	; (bac0 <__aeabi_dsub+0x624>)
    b964:	45b4      	cmp	ip, r6
    b966:	d04e      	beq.n	ba06 <__aeabi_dsub+0x56a>
    b968:	2680      	movs	r6, #128	; 0x80
    b96a:	0436      	lsls	r6, r6, #16
    b96c:	425b      	negs	r3, r3
    b96e:	4334      	orrs	r4, r6
    b970:	2b38      	cmp	r3, #56	; 0x38
    b972:	dd00      	ble.n	b976 <__aeabi_dsub+0x4da>
    b974:	e07f      	b.n	ba76 <__aeabi_dsub+0x5da>
    b976:	2b1f      	cmp	r3, #31
    b978:	dd00      	ble.n	b97c <__aeabi_dsub+0x4e0>
    b97a:	e08b      	b.n	ba94 <__aeabi_dsub+0x5f8>
    b97c:	2620      	movs	r6, #32
    b97e:	0027      	movs	r7, r4
    b980:	4650      	mov	r0, sl
    b982:	1af6      	subs	r6, r6, r3
    b984:	40b7      	lsls	r7, r6
    b986:	40d8      	lsrs	r0, r3
    b988:	4307      	orrs	r7, r0
    b98a:	4650      	mov	r0, sl
    b98c:	40b0      	lsls	r0, r6
    b98e:	1e46      	subs	r6, r0, #1
    b990:	41b0      	sbcs	r0, r6
    b992:	4307      	orrs	r7, r0
    b994:	40dc      	lsrs	r4, r3
    b996:	18bf      	adds	r7, r7, r2
    b998:	e7d6      	b.n	b948 <__aeabi_dsub+0x4ac>
    b99a:	000d      	movs	r5, r1
    b99c:	4315      	orrs	r5, r2
    b99e:	d100      	bne.n	b9a2 <__aeabi_dsub+0x506>
    b9a0:	e602      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b9a2:	4650      	mov	r0, sl
    b9a4:	1a80      	subs	r0, r0, r2
    b9a6:	4582      	cmp	sl, r0
    b9a8:	41bf      	sbcs	r7, r7
    b9aa:	1a65      	subs	r5, r4, r1
    b9ac:	427f      	negs	r7, r7
    b9ae:	1bed      	subs	r5, r5, r7
    b9b0:	4684      	mov	ip, r0
    b9b2:	0228      	lsls	r0, r5, #8
    b9b4:	d400      	bmi.n	b9b8 <__aeabi_dsub+0x51c>
    b9b6:	e68d      	b.n	b6d4 <__aeabi_dsub+0x238>
    b9b8:	4650      	mov	r0, sl
    b9ba:	1a17      	subs	r7, r2, r0
    b9bc:	42ba      	cmp	r2, r7
    b9be:	4192      	sbcs	r2, r2
    b9c0:	1b0c      	subs	r4, r1, r4
    b9c2:	4252      	negs	r2, r2
    b9c4:	1aa4      	subs	r4, r4, r2
    b9c6:	4698      	mov	r8, r3
    b9c8:	e5ee      	b.n	b5a8 <__aeabi_dsub+0x10c>
    b9ca:	000d      	movs	r5, r1
    b9cc:	4315      	orrs	r5, r2
    b9ce:	d100      	bne.n	b9d2 <__aeabi_dsub+0x536>
    b9d0:	e76b      	b.n	b8aa <__aeabi_dsub+0x40e>
    b9d2:	4650      	mov	r0, sl
    b9d4:	0767      	lsls	r7, r4, #29
    b9d6:	08c0      	lsrs	r0, r0, #3
    b9d8:	4307      	orrs	r7, r0
    b9da:	2080      	movs	r0, #128	; 0x80
    b9dc:	08e4      	lsrs	r4, r4, #3
    b9de:	0300      	lsls	r0, r0, #12
    b9e0:	4204      	tst	r4, r0
    b9e2:	d007      	beq.n	b9f4 <__aeabi_dsub+0x558>
    b9e4:	08cd      	lsrs	r5, r1, #3
    b9e6:	4205      	tst	r5, r0
    b9e8:	d104      	bne.n	b9f4 <__aeabi_dsub+0x558>
    b9ea:	002c      	movs	r4, r5
    b9ec:	4698      	mov	r8, r3
    b9ee:	08d7      	lsrs	r7, r2, #3
    b9f0:	0749      	lsls	r1, r1, #29
    b9f2:	430f      	orrs	r7, r1
    b9f4:	0f7b      	lsrs	r3, r7, #29
    b9f6:	00e4      	lsls	r4, r4, #3
    b9f8:	431c      	orrs	r4, r3
    b9fa:	00ff      	lsls	r7, r7, #3
    b9fc:	4e30      	ldr	r6, [pc, #192]	; (bac0 <__aeabi_dsub+0x624>)
    b9fe:	e5d3      	b.n	b5a8 <__aeabi_dsub+0x10c>
    ba00:	4e2f      	ldr	r6, [pc, #188]	; (bac0 <__aeabi_dsub+0x624>)
    ba02:	45b4      	cmp	ip, r6
    ba04:	d1b4      	bne.n	b970 <__aeabi_dsub+0x4d4>
    ba06:	000c      	movs	r4, r1
    ba08:	0017      	movs	r7, r2
    ba0a:	4666      	mov	r6, ip
    ba0c:	e5cc      	b.n	b5a8 <__aeabi_dsub+0x10c>
    ba0e:	2700      	movs	r7, #0
    ba10:	2400      	movs	r4, #0
    ba12:	e5e8      	b.n	b5e6 <__aeabi_dsub+0x14a>
    ba14:	2b00      	cmp	r3, #0
    ba16:	d039      	beq.n	ba8c <__aeabi_dsub+0x5f0>
    ba18:	000b      	movs	r3, r1
    ba1a:	4313      	orrs	r3, r2
    ba1c:	d100      	bne.n	ba20 <__aeabi_dsub+0x584>
    ba1e:	e744      	b.n	b8aa <__aeabi_dsub+0x40e>
    ba20:	08c0      	lsrs	r0, r0, #3
    ba22:	0767      	lsls	r7, r4, #29
    ba24:	4307      	orrs	r7, r0
    ba26:	2080      	movs	r0, #128	; 0x80
    ba28:	08e4      	lsrs	r4, r4, #3
    ba2a:	0300      	lsls	r0, r0, #12
    ba2c:	4204      	tst	r4, r0
    ba2e:	d0e1      	beq.n	b9f4 <__aeabi_dsub+0x558>
    ba30:	08cb      	lsrs	r3, r1, #3
    ba32:	4203      	tst	r3, r0
    ba34:	d1de      	bne.n	b9f4 <__aeabi_dsub+0x558>
    ba36:	08d7      	lsrs	r7, r2, #3
    ba38:	0749      	lsls	r1, r1, #29
    ba3a:	430f      	orrs	r7, r1
    ba3c:	001c      	movs	r4, r3
    ba3e:	e7d9      	b.n	b9f4 <__aeabi_dsub+0x558>
    ba40:	2100      	movs	r1, #0
    ba42:	e771      	b.n	b928 <__aeabi_dsub+0x48c>
    ba44:	2500      	movs	r5, #0
    ba46:	2700      	movs	r7, #0
    ba48:	e5e9      	b.n	b61e <__aeabi_dsub+0x182>
    ba4a:	002e      	movs	r6, r5
    ba4c:	0027      	movs	r7, r4
    ba4e:	3e20      	subs	r6, #32
    ba50:	40f7      	lsrs	r7, r6
    ba52:	2d20      	cmp	r5, #32
    ba54:	d02f      	beq.n	bab6 <__aeabi_dsub+0x61a>
    ba56:	2640      	movs	r6, #64	; 0x40
    ba58:	1b75      	subs	r5, r6, r5
    ba5a:	40ac      	lsls	r4, r5
    ba5c:	4650      	mov	r0, sl
    ba5e:	4320      	orrs	r0, r4
    ba60:	1e44      	subs	r4, r0, #1
    ba62:	41a0      	sbcs	r0, r4
    ba64:	2400      	movs	r4, #0
    ba66:	4338      	orrs	r0, r7
    ba68:	e6dc      	b.n	b824 <__aeabi_dsub+0x388>
    ba6a:	2480      	movs	r4, #128	; 0x80
    ba6c:	2500      	movs	r5, #0
    ba6e:	0324      	lsls	r4, r4, #12
    ba70:	4e13      	ldr	r6, [pc, #76]	; (bac0 <__aeabi_dsub+0x624>)
    ba72:	2700      	movs	r7, #0
    ba74:	e5d3      	b.n	b61e <__aeabi_dsub+0x182>
    ba76:	4650      	mov	r0, sl
    ba78:	4320      	orrs	r0, r4
    ba7a:	0007      	movs	r7, r0
    ba7c:	1e78      	subs	r0, r7, #1
    ba7e:	4187      	sbcs	r7, r0
    ba80:	2400      	movs	r4, #0
    ba82:	18bf      	adds	r7, r7, r2
    ba84:	e760      	b.n	b948 <__aeabi_dsub+0x4ac>
    ba86:	000c      	movs	r4, r1
    ba88:	0017      	movs	r7, r2
    ba8a:	e58d      	b.n	b5a8 <__aeabi_dsub+0x10c>
    ba8c:	000c      	movs	r4, r1
    ba8e:	0017      	movs	r7, r2
    ba90:	4e0b      	ldr	r6, [pc, #44]	; (bac0 <__aeabi_dsub+0x624>)
    ba92:	e589      	b.n	b5a8 <__aeabi_dsub+0x10c>
    ba94:	001e      	movs	r6, r3
    ba96:	0027      	movs	r7, r4
    ba98:	3e20      	subs	r6, #32
    ba9a:	40f7      	lsrs	r7, r6
    ba9c:	2b20      	cmp	r3, #32
    ba9e:	d00c      	beq.n	baba <__aeabi_dsub+0x61e>
    baa0:	2640      	movs	r6, #64	; 0x40
    baa2:	1af3      	subs	r3, r6, r3
    baa4:	409c      	lsls	r4, r3
    baa6:	4650      	mov	r0, sl
    baa8:	4320      	orrs	r0, r4
    baaa:	1e44      	subs	r4, r0, #1
    baac:	41a0      	sbcs	r0, r4
    baae:	4307      	orrs	r7, r0
    bab0:	2400      	movs	r4, #0
    bab2:	18bf      	adds	r7, r7, r2
    bab4:	e748      	b.n	b948 <__aeabi_dsub+0x4ac>
    bab6:	2400      	movs	r4, #0
    bab8:	e7d0      	b.n	ba5c <__aeabi_dsub+0x5c0>
    baba:	2400      	movs	r4, #0
    babc:	e7f3      	b.n	baa6 <__aeabi_dsub+0x60a>
    babe:	46c0      	nop			; (mov r8, r8)
    bac0:	000007ff 	.word	0x000007ff
    bac4:	ff7fffff 	.word	0xff7fffff

0000bac8 <__aeabi_dcmpun>:
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	4e0e      	ldr	r6, [pc, #56]	; (bb04 <__aeabi_dcmpun+0x3c>)
    bacc:	030d      	lsls	r5, r1, #12
    bace:	031c      	lsls	r4, r3, #12
    bad0:	0049      	lsls	r1, r1, #1
    bad2:	005b      	lsls	r3, r3, #1
    bad4:	0b2d      	lsrs	r5, r5, #12
    bad6:	0d49      	lsrs	r1, r1, #21
    bad8:	0b24      	lsrs	r4, r4, #12
    bada:	0d5b      	lsrs	r3, r3, #21
    badc:	42b1      	cmp	r1, r6
    bade:	d004      	beq.n	baea <__aeabi_dcmpun+0x22>
    bae0:	4908      	ldr	r1, [pc, #32]	; (bb04 <__aeabi_dcmpun+0x3c>)
    bae2:	2000      	movs	r0, #0
    bae4:	428b      	cmp	r3, r1
    bae6:	d008      	beq.n	bafa <__aeabi_dcmpun+0x32>
    bae8:	bd70      	pop	{r4, r5, r6, pc}
    baea:	4305      	orrs	r5, r0
    baec:	2001      	movs	r0, #1
    baee:	2d00      	cmp	r5, #0
    baf0:	d1fa      	bne.n	bae8 <__aeabi_dcmpun+0x20>
    baf2:	4904      	ldr	r1, [pc, #16]	; (bb04 <__aeabi_dcmpun+0x3c>)
    baf4:	2000      	movs	r0, #0
    baf6:	428b      	cmp	r3, r1
    baf8:	d1f6      	bne.n	bae8 <__aeabi_dcmpun+0x20>
    bafa:	4314      	orrs	r4, r2
    bafc:	0020      	movs	r0, r4
    bafe:	1e44      	subs	r4, r0, #1
    bb00:	41a0      	sbcs	r0, r4
    bb02:	e7f1      	b.n	bae8 <__aeabi_dcmpun+0x20>
    bb04:	000007ff 	.word	0x000007ff

0000bb08 <__aeabi_d2iz>:
    bb08:	b530      	push	{r4, r5, lr}
    bb0a:	4d13      	ldr	r5, [pc, #76]	; (bb58 <__aeabi_d2iz+0x50>)
    bb0c:	030a      	lsls	r2, r1, #12
    bb0e:	004b      	lsls	r3, r1, #1
    bb10:	0b12      	lsrs	r2, r2, #12
    bb12:	0d5b      	lsrs	r3, r3, #21
    bb14:	0fc9      	lsrs	r1, r1, #31
    bb16:	2400      	movs	r4, #0
    bb18:	42ab      	cmp	r3, r5
    bb1a:	dd10      	ble.n	bb3e <__aeabi_d2iz+0x36>
    bb1c:	4c0f      	ldr	r4, [pc, #60]	; (bb5c <__aeabi_d2iz+0x54>)
    bb1e:	42a3      	cmp	r3, r4
    bb20:	dc0f      	bgt.n	bb42 <__aeabi_d2iz+0x3a>
    bb22:	2480      	movs	r4, #128	; 0x80
    bb24:	4d0e      	ldr	r5, [pc, #56]	; (bb60 <__aeabi_d2iz+0x58>)
    bb26:	0364      	lsls	r4, r4, #13
    bb28:	4322      	orrs	r2, r4
    bb2a:	1aed      	subs	r5, r5, r3
    bb2c:	2d1f      	cmp	r5, #31
    bb2e:	dd0b      	ble.n	bb48 <__aeabi_d2iz+0x40>
    bb30:	480c      	ldr	r0, [pc, #48]	; (bb64 <__aeabi_d2iz+0x5c>)
    bb32:	1ac3      	subs	r3, r0, r3
    bb34:	40da      	lsrs	r2, r3
    bb36:	4254      	negs	r4, r2
    bb38:	2900      	cmp	r1, #0
    bb3a:	d100      	bne.n	bb3e <__aeabi_d2iz+0x36>
    bb3c:	0014      	movs	r4, r2
    bb3e:	0020      	movs	r0, r4
    bb40:	bd30      	pop	{r4, r5, pc}
    bb42:	4b09      	ldr	r3, [pc, #36]	; (bb68 <__aeabi_d2iz+0x60>)
    bb44:	18cc      	adds	r4, r1, r3
    bb46:	e7fa      	b.n	bb3e <__aeabi_d2iz+0x36>
    bb48:	4c08      	ldr	r4, [pc, #32]	; (bb6c <__aeabi_d2iz+0x64>)
    bb4a:	40e8      	lsrs	r0, r5
    bb4c:	46a4      	mov	ip, r4
    bb4e:	4463      	add	r3, ip
    bb50:	409a      	lsls	r2, r3
    bb52:	4302      	orrs	r2, r0
    bb54:	e7ef      	b.n	bb36 <__aeabi_d2iz+0x2e>
    bb56:	46c0      	nop			; (mov r8, r8)
    bb58:	000003fe 	.word	0x000003fe
    bb5c:	0000041d 	.word	0x0000041d
    bb60:	00000433 	.word	0x00000433
    bb64:	00000413 	.word	0x00000413
    bb68:	7fffffff 	.word	0x7fffffff
    bb6c:	fffffbed 	.word	0xfffffbed

0000bb70 <__aeabi_i2d>:
    bb70:	b570      	push	{r4, r5, r6, lr}
    bb72:	2800      	cmp	r0, #0
    bb74:	d030      	beq.n	bbd8 <__aeabi_i2d+0x68>
    bb76:	17c3      	asrs	r3, r0, #31
    bb78:	18c4      	adds	r4, r0, r3
    bb7a:	405c      	eors	r4, r3
    bb7c:	0fc5      	lsrs	r5, r0, #31
    bb7e:	0020      	movs	r0, r4
    bb80:	f000 f94c 	bl	be1c <__clzsi2>
    bb84:	4b17      	ldr	r3, [pc, #92]	; (bbe4 <__aeabi_i2d+0x74>)
    bb86:	4a18      	ldr	r2, [pc, #96]	; (bbe8 <__aeabi_i2d+0x78>)
    bb88:	1a1b      	subs	r3, r3, r0
    bb8a:	1ad2      	subs	r2, r2, r3
    bb8c:	2a1f      	cmp	r2, #31
    bb8e:	dd18      	ble.n	bbc2 <__aeabi_i2d+0x52>
    bb90:	4a16      	ldr	r2, [pc, #88]	; (bbec <__aeabi_i2d+0x7c>)
    bb92:	1ad2      	subs	r2, r2, r3
    bb94:	4094      	lsls	r4, r2
    bb96:	2200      	movs	r2, #0
    bb98:	0324      	lsls	r4, r4, #12
    bb9a:	055b      	lsls	r3, r3, #21
    bb9c:	0b24      	lsrs	r4, r4, #12
    bb9e:	0d5b      	lsrs	r3, r3, #21
    bba0:	2100      	movs	r1, #0
    bba2:	0010      	movs	r0, r2
    bba4:	0324      	lsls	r4, r4, #12
    bba6:	0d0a      	lsrs	r2, r1, #20
    bba8:	0b24      	lsrs	r4, r4, #12
    bbaa:	0512      	lsls	r2, r2, #20
    bbac:	4322      	orrs	r2, r4
    bbae:	4c10      	ldr	r4, [pc, #64]	; (bbf0 <__aeabi_i2d+0x80>)
    bbb0:	051b      	lsls	r3, r3, #20
    bbb2:	4022      	ands	r2, r4
    bbb4:	4313      	orrs	r3, r2
    bbb6:	005b      	lsls	r3, r3, #1
    bbb8:	07ed      	lsls	r5, r5, #31
    bbba:	085b      	lsrs	r3, r3, #1
    bbbc:	432b      	orrs	r3, r5
    bbbe:	0019      	movs	r1, r3
    bbc0:	bd70      	pop	{r4, r5, r6, pc}
    bbc2:	0021      	movs	r1, r4
    bbc4:	4091      	lsls	r1, r2
    bbc6:	000a      	movs	r2, r1
    bbc8:	210b      	movs	r1, #11
    bbca:	1a08      	subs	r0, r1, r0
    bbcc:	40c4      	lsrs	r4, r0
    bbce:	055b      	lsls	r3, r3, #21
    bbd0:	0324      	lsls	r4, r4, #12
    bbd2:	0b24      	lsrs	r4, r4, #12
    bbd4:	0d5b      	lsrs	r3, r3, #21
    bbd6:	e7e3      	b.n	bba0 <__aeabi_i2d+0x30>
    bbd8:	2500      	movs	r5, #0
    bbda:	2300      	movs	r3, #0
    bbdc:	2400      	movs	r4, #0
    bbde:	2200      	movs	r2, #0
    bbe0:	e7de      	b.n	bba0 <__aeabi_i2d+0x30>
    bbe2:	46c0      	nop			; (mov r8, r8)
    bbe4:	0000041e 	.word	0x0000041e
    bbe8:	00000433 	.word	0x00000433
    bbec:	00000413 	.word	0x00000413
    bbf0:	800fffff 	.word	0x800fffff

0000bbf4 <__aeabi_ui2d>:
    bbf4:	b510      	push	{r4, lr}
    bbf6:	1e04      	subs	r4, r0, #0
    bbf8:	d028      	beq.n	bc4c <__aeabi_ui2d+0x58>
    bbfa:	f000 f90f 	bl	be1c <__clzsi2>
    bbfe:	4b15      	ldr	r3, [pc, #84]	; (bc54 <__aeabi_ui2d+0x60>)
    bc00:	4a15      	ldr	r2, [pc, #84]	; (bc58 <__aeabi_ui2d+0x64>)
    bc02:	1a1b      	subs	r3, r3, r0
    bc04:	1ad2      	subs	r2, r2, r3
    bc06:	2a1f      	cmp	r2, #31
    bc08:	dd15      	ble.n	bc36 <__aeabi_ui2d+0x42>
    bc0a:	4a14      	ldr	r2, [pc, #80]	; (bc5c <__aeabi_ui2d+0x68>)
    bc0c:	1ad2      	subs	r2, r2, r3
    bc0e:	4094      	lsls	r4, r2
    bc10:	2200      	movs	r2, #0
    bc12:	0324      	lsls	r4, r4, #12
    bc14:	055b      	lsls	r3, r3, #21
    bc16:	0b24      	lsrs	r4, r4, #12
    bc18:	0d5b      	lsrs	r3, r3, #21
    bc1a:	2100      	movs	r1, #0
    bc1c:	0010      	movs	r0, r2
    bc1e:	0324      	lsls	r4, r4, #12
    bc20:	0d0a      	lsrs	r2, r1, #20
    bc22:	0b24      	lsrs	r4, r4, #12
    bc24:	0512      	lsls	r2, r2, #20
    bc26:	4322      	orrs	r2, r4
    bc28:	4c0d      	ldr	r4, [pc, #52]	; (bc60 <__aeabi_ui2d+0x6c>)
    bc2a:	051b      	lsls	r3, r3, #20
    bc2c:	4022      	ands	r2, r4
    bc2e:	4313      	orrs	r3, r2
    bc30:	005b      	lsls	r3, r3, #1
    bc32:	0859      	lsrs	r1, r3, #1
    bc34:	bd10      	pop	{r4, pc}
    bc36:	0021      	movs	r1, r4
    bc38:	4091      	lsls	r1, r2
    bc3a:	000a      	movs	r2, r1
    bc3c:	210b      	movs	r1, #11
    bc3e:	1a08      	subs	r0, r1, r0
    bc40:	40c4      	lsrs	r4, r0
    bc42:	055b      	lsls	r3, r3, #21
    bc44:	0324      	lsls	r4, r4, #12
    bc46:	0b24      	lsrs	r4, r4, #12
    bc48:	0d5b      	lsrs	r3, r3, #21
    bc4a:	e7e6      	b.n	bc1a <__aeabi_ui2d+0x26>
    bc4c:	2300      	movs	r3, #0
    bc4e:	2400      	movs	r4, #0
    bc50:	2200      	movs	r2, #0
    bc52:	e7e2      	b.n	bc1a <__aeabi_ui2d+0x26>
    bc54:	0000041e 	.word	0x0000041e
    bc58:	00000433 	.word	0x00000433
    bc5c:	00000413 	.word	0x00000413
    bc60:	800fffff 	.word	0x800fffff

0000bc64 <__aeabi_f2d>:
    bc64:	0041      	lsls	r1, r0, #1
    bc66:	0e09      	lsrs	r1, r1, #24
    bc68:	1c4b      	adds	r3, r1, #1
    bc6a:	b570      	push	{r4, r5, r6, lr}
    bc6c:	b2db      	uxtb	r3, r3
    bc6e:	0246      	lsls	r6, r0, #9
    bc70:	0a75      	lsrs	r5, r6, #9
    bc72:	0fc4      	lsrs	r4, r0, #31
    bc74:	2b01      	cmp	r3, #1
    bc76:	dd14      	ble.n	bca2 <__aeabi_f2d+0x3e>
    bc78:	23e0      	movs	r3, #224	; 0xe0
    bc7a:	009b      	lsls	r3, r3, #2
    bc7c:	076d      	lsls	r5, r5, #29
    bc7e:	0b36      	lsrs	r6, r6, #12
    bc80:	18cb      	adds	r3, r1, r3
    bc82:	2100      	movs	r1, #0
    bc84:	0d0a      	lsrs	r2, r1, #20
    bc86:	0028      	movs	r0, r5
    bc88:	0512      	lsls	r2, r2, #20
    bc8a:	4d1c      	ldr	r5, [pc, #112]	; (bcfc <__aeabi_f2d+0x98>)
    bc8c:	4332      	orrs	r2, r6
    bc8e:	055b      	lsls	r3, r3, #21
    bc90:	402a      	ands	r2, r5
    bc92:	085b      	lsrs	r3, r3, #1
    bc94:	4313      	orrs	r3, r2
    bc96:	005b      	lsls	r3, r3, #1
    bc98:	07e4      	lsls	r4, r4, #31
    bc9a:	085b      	lsrs	r3, r3, #1
    bc9c:	4323      	orrs	r3, r4
    bc9e:	0019      	movs	r1, r3
    bca0:	bd70      	pop	{r4, r5, r6, pc}
    bca2:	2900      	cmp	r1, #0
    bca4:	d114      	bne.n	bcd0 <__aeabi_f2d+0x6c>
    bca6:	2d00      	cmp	r5, #0
    bca8:	d01e      	beq.n	bce8 <__aeabi_f2d+0x84>
    bcaa:	0028      	movs	r0, r5
    bcac:	f000 f8b6 	bl	be1c <__clzsi2>
    bcb0:	280a      	cmp	r0, #10
    bcb2:	dc1c      	bgt.n	bcee <__aeabi_f2d+0x8a>
    bcb4:	230b      	movs	r3, #11
    bcb6:	002a      	movs	r2, r5
    bcb8:	1a1b      	subs	r3, r3, r0
    bcba:	40da      	lsrs	r2, r3
    bcbc:	0003      	movs	r3, r0
    bcbe:	3315      	adds	r3, #21
    bcc0:	409d      	lsls	r5, r3
    bcc2:	4b0f      	ldr	r3, [pc, #60]	; (bd00 <__aeabi_f2d+0x9c>)
    bcc4:	0312      	lsls	r2, r2, #12
    bcc6:	1a1b      	subs	r3, r3, r0
    bcc8:	055b      	lsls	r3, r3, #21
    bcca:	0b16      	lsrs	r6, r2, #12
    bccc:	0d5b      	lsrs	r3, r3, #21
    bcce:	e7d8      	b.n	bc82 <__aeabi_f2d+0x1e>
    bcd0:	2d00      	cmp	r5, #0
    bcd2:	d006      	beq.n	bce2 <__aeabi_f2d+0x7e>
    bcd4:	0b32      	lsrs	r2, r6, #12
    bcd6:	2680      	movs	r6, #128	; 0x80
    bcd8:	0336      	lsls	r6, r6, #12
    bcda:	076d      	lsls	r5, r5, #29
    bcdc:	4316      	orrs	r6, r2
    bcde:	4b09      	ldr	r3, [pc, #36]	; (bd04 <__aeabi_f2d+0xa0>)
    bce0:	e7cf      	b.n	bc82 <__aeabi_f2d+0x1e>
    bce2:	4b08      	ldr	r3, [pc, #32]	; (bd04 <__aeabi_f2d+0xa0>)
    bce4:	2600      	movs	r6, #0
    bce6:	e7cc      	b.n	bc82 <__aeabi_f2d+0x1e>
    bce8:	2300      	movs	r3, #0
    bcea:	2600      	movs	r6, #0
    bcec:	e7c9      	b.n	bc82 <__aeabi_f2d+0x1e>
    bcee:	0003      	movs	r3, r0
    bcf0:	002a      	movs	r2, r5
    bcf2:	3b0b      	subs	r3, #11
    bcf4:	409a      	lsls	r2, r3
    bcf6:	2500      	movs	r5, #0
    bcf8:	e7e3      	b.n	bcc2 <__aeabi_f2d+0x5e>
    bcfa:	46c0      	nop			; (mov r8, r8)
    bcfc:	800fffff 	.word	0x800fffff
    bd00:	00000389 	.word	0x00000389
    bd04:	000007ff 	.word	0x000007ff

0000bd08 <__aeabi_d2f>:
    bd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd0a:	004c      	lsls	r4, r1, #1
    bd0c:	0d64      	lsrs	r4, r4, #21
    bd0e:	030b      	lsls	r3, r1, #12
    bd10:	1c62      	adds	r2, r4, #1
    bd12:	0f45      	lsrs	r5, r0, #29
    bd14:	0a5b      	lsrs	r3, r3, #9
    bd16:	0552      	lsls	r2, r2, #21
    bd18:	432b      	orrs	r3, r5
    bd1a:	0fc9      	lsrs	r1, r1, #31
    bd1c:	00c5      	lsls	r5, r0, #3
    bd1e:	0d52      	lsrs	r2, r2, #21
    bd20:	2a01      	cmp	r2, #1
    bd22:	dd28      	ble.n	bd76 <__aeabi_d2f+0x6e>
    bd24:	4a3a      	ldr	r2, [pc, #232]	; (be10 <__aeabi_d2f+0x108>)
    bd26:	18a6      	adds	r6, r4, r2
    bd28:	2efe      	cmp	r6, #254	; 0xfe
    bd2a:	dc1b      	bgt.n	bd64 <__aeabi_d2f+0x5c>
    bd2c:	2e00      	cmp	r6, #0
    bd2e:	dd3e      	ble.n	bdae <__aeabi_d2f+0xa6>
    bd30:	0180      	lsls	r0, r0, #6
    bd32:	0002      	movs	r2, r0
    bd34:	1e50      	subs	r0, r2, #1
    bd36:	4182      	sbcs	r2, r0
    bd38:	0f6d      	lsrs	r5, r5, #29
    bd3a:	432a      	orrs	r2, r5
    bd3c:	00db      	lsls	r3, r3, #3
    bd3e:	4313      	orrs	r3, r2
    bd40:	075a      	lsls	r2, r3, #29
    bd42:	d004      	beq.n	bd4e <__aeabi_d2f+0x46>
    bd44:	220f      	movs	r2, #15
    bd46:	401a      	ands	r2, r3
    bd48:	2a04      	cmp	r2, #4
    bd4a:	d000      	beq.n	bd4e <__aeabi_d2f+0x46>
    bd4c:	3304      	adds	r3, #4
    bd4e:	2280      	movs	r2, #128	; 0x80
    bd50:	04d2      	lsls	r2, r2, #19
    bd52:	401a      	ands	r2, r3
    bd54:	d05a      	beq.n	be0c <__aeabi_d2f+0x104>
    bd56:	3601      	adds	r6, #1
    bd58:	2eff      	cmp	r6, #255	; 0xff
    bd5a:	d003      	beq.n	bd64 <__aeabi_d2f+0x5c>
    bd5c:	019b      	lsls	r3, r3, #6
    bd5e:	0a5b      	lsrs	r3, r3, #9
    bd60:	b2f4      	uxtb	r4, r6
    bd62:	e001      	b.n	bd68 <__aeabi_d2f+0x60>
    bd64:	24ff      	movs	r4, #255	; 0xff
    bd66:	2300      	movs	r3, #0
    bd68:	0258      	lsls	r0, r3, #9
    bd6a:	05e4      	lsls	r4, r4, #23
    bd6c:	0a40      	lsrs	r0, r0, #9
    bd6e:	07c9      	lsls	r1, r1, #31
    bd70:	4320      	orrs	r0, r4
    bd72:	4308      	orrs	r0, r1
    bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd76:	2c00      	cmp	r4, #0
    bd78:	d007      	beq.n	bd8a <__aeabi_d2f+0x82>
    bd7a:	431d      	orrs	r5, r3
    bd7c:	d0f2      	beq.n	bd64 <__aeabi_d2f+0x5c>
    bd7e:	2080      	movs	r0, #128	; 0x80
    bd80:	00db      	lsls	r3, r3, #3
    bd82:	0480      	lsls	r0, r0, #18
    bd84:	4303      	orrs	r3, r0
    bd86:	26ff      	movs	r6, #255	; 0xff
    bd88:	e7da      	b.n	bd40 <__aeabi_d2f+0x38>
    bd8a:	432b      	orrs	r3, r5
    bd8c:	d003      	beq.n	bd96 <__aeabi_d2f+0x8e>
    bd8e:	2305      	movs	r3, #5
    bd90:	08db      	lsrs	r3, r3, #3
    bd92:	2cff      	cmp	r4, #255	; 0xff
    bd94:	d003      	beq.n	bd9e <__aeabi_d2f+0x96>
    bd96:	025b      	lsls	r3, r3, #9
    bd98:	0a5b      	lsrs	r3, r3, #9
    bd9a:	b2e4      	uxtb	r4, r4
    bd9c:	e7e4      	b.n	bd68 <__aeabi_d2f+0x60>
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d032      	beq.n	be08 <__aeabi_d2f+0x100>
    bda2:	2080      	movs	r0, #128	; 0x80
    bda4:	03c0      	lsls	r0, r0, #15
    bda6:	4303      	orrs	r3, r0
    bda8:	025b      	lsls	r3, r3, #9
    bdaa:	0a5b      	lsrs	r3, r3, #9
    bdac:	e7dc      	b.n	bd68 <__aeabi_d2f+0x60>
    bdae:	0032      	movs	r2, r6
    bdb0:	3217      	adds	r2, #23
    bdb2:	db14      	blt.n	bdde <__aeabi_d2f+0xd6>
    bdb4:	2280      	movs	r2, #128	; 0x80
    bdb6:	271e      	movs	r7, #30
    bdb8:	0412      	lsls	r2, r2, #16
    bdba:	4313      	orrs	r3, r2
    bdbc:	1bbf      	subs	r7, r7, r6
    bdbe:	2f1f      	cmp	r7, #31
    bdc0:	dc0f      	bgt.n	bde2 <__aeabi_d2f+0xda>
    bdc2:	4a14      	ldr	r2, [pc, #80]	; (be14 <__aeabi_d2f+0x10c>)
    bdc4:	4694      	mov	ip, r2
    bdc6:	4464      	add	r4, ip
    bdc8:	002a      	movs	r2, r5
    bdca:	40a5      	lsls	r5, r4
    bdcc:	002e      	movs	r6, r5
    bdce:	40a3      	lsls	r3, r4
    bdd0:	1e75      	subs	r5, r6, #1
    bdd2:	41ae      	sbcs	r6, r5
    bdd4:	40fa      	lsrs	r2, r7
    bdd6:	4333      	orrs	r3, r6
    bdd8:	4313      	orrs	r3, r2
    bdda:	2600      	movs	r6, #0
    bddc:	e7b0      	b.n	bd40 <__aeabi_d2f+0x38>
    bdde:	2400      	movs	r4, #0
    bde0:	e7d5      	b.n	bd8e <__aeabi_d2f+0x86>
    bde2:	2202      	movs	r2, #2
    bde4:	4252      	negs	r2, r2
    bde6:	1b96      	subs	r6, r2, r6
    bde8:	001a      	movs	r2, r3
    bdea:	40f2      	lsrs	r2, r6
    bdec:	2f20      	cmp	r7, #32
    bdee:	d009      	beq.n	be04 <__aeabi_d2f+0xfc>
    bdf0:	4809      	ldr	r0, [pc, #36]	; (be18 <__aeabi_d2f+0x110>)
    bdf2:	4684      	mov	ip, r0
    bdf4:	4464      	add	r4, ip
    bdf6:	40a3      	lsls	r3, r4
    bdf8:	432b      	orrs	r3, r5
    bdfa:	1e5d      	subs	r5, r3, #1
    bdfc:	41ab      	sbcs	r3, r5
    bdfe:	2600      	movs	r6, #0
    be00:	4313      	orrs	r3, r2
    be02:	e79d      	b.n	bd40 <__aeabi_d2f+0x38>
    be04:	2300      	movs	r3, #0
    be06:	e7f7      	b.n	bdf8 <__aeabi_d2f+0xf0>
    be08:	2300      	movs	r3, #0
    be0a:	e7ad      	b.n	bd68 <__aeabi_d2f+0x60>
    be0c:	0034      	movs	r4, r6
    be0e:	e7bf      	b.n	bd90 <__aeabi_d2f+0x88>
    be10:	fffffc80 	.word	0xfffffc80
    be14:	fffffc82 	.word	0xfffffc82
    be18:	fffffca2 	.word	0xfffffca2

0000be1c <__clzsi2>:
    be1c:	211c      	movs	r1, #28
    be1e:	2301      	movs	r3, #1
    be20:	041b      	lsls	r3, r3, #16
    be22:	4298      	cmp	r0, r3
    be24:	d301      	bcc.n	be2a <__clzsi2+0xe>
    be26:	0c00      	lsrs	r0, r0, #16
    be28:	3910      	subs	r1, #16
    be2a:	0a1b      	lsrs	r3, r3, #8
    be2c:	4298      	cmp	r0, r3
    be2e:	d301      	bcc.n	be34 <__clzsi2+0x18>
    be30:	0a00      	lsrs	r0, r0, #8
    be32:	3908      	subs	r1, #8
    be34:	091b      	lsrs	r3, r3, #4
    be36:	4298      	cmp	r0, r3
    be38:	d301      	bcc.n	be3e <__clzsi2+0x22>
    be3a:	0900      	lsrs	r0, r0, #4
    be3c:	3904      	subs	r1, #4
    be3e:	a202      	add	r2, pc, #8	; (adr r2, be48 <__clzsi2+0x2c>)
    be40:	5c10      	ldrb	r0, [r2, r0]
    be42:	1840      	adds	r0, r0, r1
    be44:	4770      	bx	lr
    be46:	46c0      	nop			; (mov r8, r8)
    be48:	02020304 	.word	0x02020304
    be4c:	01010101 	.word	0x01010101
	...

0000be58 <__clzdi2>:
    be58:	b510      	push	{r4, lr}
    be5a:	2900      	cmp	r1, #0
    be5c:	d103      	bne.n	be66 <__clzdi2+0xe>
    be5e:	f7ff ffdd 	bl	be1c <__clzsi2>
    be62:	3020      	adds	r0, #32
    be64:	e002      	b.n	be6c <__clzdi2+0x14>
    be66:	1c08      	adds	r0, r1, #0
    be68:	f7ff ffd8 	bl	be1c <__clzsi2>
    be6c:	bd10      	pop	{r4, pc}
    be6e:	46c0      	nop			; (mov r8, r8)

0000be70 <__ctzsi2>:
    be70:	4241      	negs	r1, r0
    be72:	4008      	ands	r0, r1
    be74:	211c      	movs	r1, #28
    be76:	2301      	movs	r3, #1
    be78:	041b      	lsls	r3, r3, #16
    be7a:	4298      	cmp	r0, r3
    be7c:	d301      	bcc.n	be82 <__ctzsi2+0x12>
    be7e:	0c00      	lsrs	r0, r0, #16
    be80:	3910      	subs	r1, #16
    be82:	0a1b      	lsrs	r3, r3, #8
    be84:	4298      	cmp	r0, r3
    be86:	d301      	bcc.n	be8c <__ctzsi2+0x1c>
    be88:	0a00      	lsrs	r0, r0, #8
    be8a:	3908      	subs	r1, #8
    be8c:	091b      	lsrs	r3, r3, #4
    be8e:	4298      	cmp	r0, r3
    be90:	d301      	bcc.n	be96 <__ctzsi2+0x26>
    be92:	0900      	lsrs	r0, r0, #4
    be94:	3904      	subs	r1, #4
    be96:	a202      	add	r2, pc, #8	; (adr r2, bea0 <__ctzsi2+0x30>)
    be98:	5c10      	ldrb	r0, [r2, r0]
    be9a:	1a40      	subs	r0, r0, r1
    be9c:	4770      	bx	lr
    be9e:	46c0      	nop			; (mov r8, r8)
    bea0:	1d1d1c1b 	.word	0x1d1d1c1b
    bea4:	1e1e1e1e 	.word	0x1e1e1e1e
    bea8:	1f1f1f1f 	.word	0x1f1f1f1f
    beac:	1f1f1f1f 	.word	0x1f1f1f1f

0000beb0 <__cxa_atexit>:
    beb0:	b510      	push	{r4, lr}
    beb2:	0013      	movs	r3, r2
    beb4:	000a      	movs	r2, r1
    beb6:	0001      	movs	r1, r0
    beb8:	2002      	movs	r0, #2
    beba:	f001 fd15 	bl	d8e8 <__register_exitproc>
    bebe:	bd10      	pop	{r4, pc}

0000bec0 <__errno>:
    bec0:	4b01      	ldr	r3, [pc, #4]	; (bec8 <__errno+0x8>)
    bec2:	6818      	ldr	r0, [r3, #0]
    bec4:	4770      	bx	lr
    bec6:	46c0      	nop			; (mov r8, r8)
    bec8:	20000070 	.word	0x20000070

0000becc <__libc_init_array>:
    becc:	b570      	push	{r4, r5, r6, lr}
    bece:	4e0d      	ldr	r6, [pc, #52]	; (bf04 <__libc_init_array+0x38>)
    bed0:	4d0d      	ldr	r5, [pc, #52]	; (bf08 <__libc_init_array+0x3c>)
    bed2:	2400      	movs	r4, #0
    bed4:	1bad      	subs	r5, r5, r6
    bed6:	10ad      	asrs	r5, r5, #2
    bed8:	d005      	beq.n	bee6 <__libc_init_array+0x1a>
    beda:	00a3      	lsls	r3, r4, #2
    bedc:	58f3      	ldr	r3, [r6, r3]
    bede:	3401      	adds	r4, #1
    bee0:	4798      	blx	r3
    bee2:	42a5      	cmp	r5, r4
    bee4:	d1f9      	bne.n	beda <__libc_init_array+0xe>
    bee6:	f005 fbf3 	bl	116d0 <_init>
    beea:	4e08      	ldr	r6, [pc, #32]	; (bf0c <__libc_init_array+0x40>)
    beec:	4d08      	ldr	r5, [pc, #32]	; (bf10 <__libc_init_array+0x44>)
    beee:	2400      	movs	r4, #0
    bef0:	1bad      	subs	r5, r5, r6
    bef2:	10ad      	asrs	r5, r5, #2
    bef4:	d005      	beq.n	bf02 <__libc_init_array+0x36>
    bef6:	00a3      	lsls	r3, r4, #2
    bef8:	58f3      	ldr	r3, [r6, r3]
    befa:	3401      	adds	r4, #1
    befc:	4798      	blx	r3
    befe:	42a5      	cmp	r5, r4
    bf00:	d1f9      	bne.n	bef6 <__libc_init_array+0x2a>
    bf02:	bd70      	pop	{r4, r5, r6, pc}
    bf04:	000116dc 	.word	0x000116dc
    bf08:	000116dc 	.word	0x000116dc
    bf0c:	000116dc 	.word	0x000116dc
    bf10:	000116fc 	.word	0x000116fc

0000bf14 <memcpy>:
    bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf16:	0005      	movs	r5, r0
    bf18:	2a0f      	cmp	r2, #15
    bf1a:	d92f      	bls.n	bf7c <memcpy+0x68>
    bf1c:	000b      	movs	r3, r1
    bf1e:	4303      	orrs	r3, r0
    bf20:	079b      	lsls	r3, r3, #30
    bf22:	d134      	bne.n	bf8e <memcpy+0x7a>
    bf24:	0016      	movs	r6, r2
    bf26:	000c      	movs	r4, r1
    bf28:	0003      	movs	r3, r0
    bf2a:	3e10      	subs	r6, #16
    bf2c:	0935      	lsrs	r5, r6, #4
    bf2e:	3501      	adds	r5, #1
    bf30:	012d      	lsls	r5, r5, #4
    bf32:	1945      	adds	r5, r0, r5
    bf34:	6827      	ldr	r7, [r4, #0]
    bf36:	601f      	str	r7, [r3, #0]
    bf38:	6867      	ldr	r7, [r4, #4]
    bf3a:	605f      	str	r7, [r3, #4]
    bf3c:	68a7      	ldr	r7, [r4, #8]
    bf3e:	609f      	str	r7, [r3, #8]
    bf40:	68e7      	ldr	r7, [r4, #12]
    bf42:	3410      	adds	r4, #16
    bf44:	60df      	str	r7, [r3, #12]
    bf46:	3310      	adds	r3, #16
    bf48:	429d      	cmp	r5, r3
    bf4a:	d1f3      	bne.n	bf34 <memcpy+0x20>
    bf4c:	230f      	movs	r3, #15
    bf4e:	439e      	bics	r6, r3
    bf50:	3610      	adds	r6, #16
    bf52:	1985      	adds	r5, r0, r6
    bf54:	1989      	adds	r1, r1, r6
    bf56:	4013      	ands	r3, r2
    bf58:	2b03      	cmp	r3, #3
    bf5a:	d91a      	bls.n	bf92 <memcpy+0x7e>
    bf5c:	1f1e      	subs	r6, r3, #4
    bf5e:	2300      	movs	r3, #0
    bf60:	08b4      	lsrs	r4, r6, #2
    bf62:	3401      	adds	r4, #1
    bf64:	00a4      	lsls	r4, r4, #2
    bf66:	58cf      	ldr	r7, [r1, r3]
    bf68:	50ef      	str	r7, [r5, r3]
    bf6a:	3304      	adds	r3, #4
    bf6c:	42a3      	cmp	r3, r4
    bf6e:	d1fa      	bne.n	bf66 <memcpy+0x52>
    bf70:	2403      	movs	r4, #3
    bf72:	43a6      	bics	r6, r4
    bf74:	1d33      	adds	r3, r6, #4
    bf76:	4022      	ands	r2, r4
    bf78:	18c9      	adds	r1, r1, r3
    bf7a:	18ed      	adds	r5, r5, r3
    bf7c:	2a00      	cmp	r2, #0
    bf7e:	d005      	beq.n	bf8c <memcpy+0x78>
    bf80:	2300      	movs	r3, #0
    bf82:	5ccc      	ldrb	r4, [r1, r3]
    bf84:	54ec      	strb	r4, [r5, r3]
    bf86:	3301      	adds	r3, #1
    bf88:	4293      	cmp	r3, r2
    bf8a:	d1fa      	bne.n	bf82 <memcpy+0x6e>
    bf8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf8e:	0005      	movs	r5, r0
    bf90:	e7f6      	b.n	bf80 <memcpy+0x6c>
    bf92:	001a      	movs	r2, r3
    bf94:	e7f2      	b.n	bf7c <memcpy+0x68>
    bf96:	46c0      	nop			; (mov r8, r8)

0000bf98 <memset>:
    bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf9a:	0783      	lsls	r3, r0, #30
    bf9c:	d043      	beq.n	c026 <memset+0x8e>
    bf9e:	1e54      	subs	r4, r2, #1
    bfa0:	2a00      	cmp	r2, #0
    bfa2:	d03f      	beq.n	c024 <memset+0x8c>
    bfa4:	b2ce      	uxtb	r6, r1
    bfa6:	0002      	movs	r2, r0
    bfa8:	2503      	movs	r5, #3
    bfaa:	e002      	b.n	bfb2 <memset+0x1a>
    bfac:	001a      	movs	r2, r3
    bfae:	3c01      	subs	r4, #1
    bfb0:	d338      	bcc.n	c024 <memset+0x8c>
    bfb2:	1c53      	adds	r3, r2, #1
    bfb4:	7016      	strb	r6, [r2, #0]
    bfb6:	422b      	tst	r3, r5
    bfb8:	d1f8      	bne.n	bfac <memset+0x14>
    bfba:	2c03      	cmp	r4, #3
    bfbc:	d92a      	bls.n	c014 <memset+0x7c>
    bfbe:	22ff      	movs	r2, #255	; 0xff
    bfc0:	400a      	ands	r2, r1
    bfc2:	0215      	lsls	r5, r2, #8
    bfc4:	4315      	orrs	r5, r2
    bfc6:	042a      	lsls	r2, r5, #16
    bfc8:	4315      	orrs	r5, r2
    bfca:	2c0f      	cmp	r4, #15
    bfcc:	d914      	bls.n	bff8 <memset+0x60>
    bfce:	0027      	movs	r7, r4
    bfd0:	001a      	movs	r2, r3
    bfd2:	3f10      	subs	r7, #16
    bfd4:	093e      	lsrs	r6, r7, #4
    bfd6:	3601      	adds	r6, #1
    bfd8:	0136      	lsls	r6, r6, #4
    bfda:	199e      	adds	r6, r3, r6
    bfdc:	6015      	str	r5, [r2, #0]
    bfde:	6055      	str	r5, [r2, #4]
    bfe0:	6095      	str	r5, [r2, #8]
    bfe2:	60d5      	str	r5, [r2, #12]
    bfe4:	3210      	adds	r2, #16
    bfe6:	4296      	cmp	r6, r2
    bfe8:	d1f8      	bne.n	bfdc <memset+0x44>
    bfea:	220f      	movs	r2, #15
    bfec:	4397      	bics	r7, r2
    bfee:	3710      	adds	r7, #16
    bff0:	19db      	adds	r3, r3, r7
    bff2:	4014      	ands	r4, r2
    bff4:	2c03      	cmp	r4, #3
    bff6:	d90d      	bls.n	c014 <memset+0x7c>
    bff8:	001a      	movs	r2, r3
    bffa:	1f27      	subs	r7, r4, #4
    bffc:	08be      	lsrs	r6, r7, #2
    bffe:	3601      	adds	r6, #1
    c000:	00b6      	lsls	r6, r6, #2
    c002:	199e      	adds	r6, r3, r6
    c004:	c220      	stmia	r2!, {r5}
    c006:	42b2      	cmp	r2, r6
    c008:	d1fc      	bne.n	c004 <memset+0x6c>
    c00a:	2203      	movs	r2, #3
    c00c:	4397      	bics	r7, r2
    c00e:	3704      	adds	r7, #4
    c010:	19db      	adds	r3, r3, r7
    c012:	4014      	ands	r4, r2
    c014:	2c00      	cmp	r4, #0
    c016:	d005      	beq.n	c024 <memset+0x8c>
    c018:	b2c9      	uxtb	r1, r1
    c01a:	191c      	adds	r4, r3, r4
    c01c:	7019      	strb	r1, [r3, #0]
    c01e:	3301      	adds	r3, #1
    c020:	429c      	cmp	r4, r3
    c022:	d1fb      	bne.n	c01c <memset+0x84>
    c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c026:	0014      	movs	r4, r2
    c028:	0003      	movs	r3, r0
    c02a:	e7c6      	b.n	bfba <memset+0x22>

0000c02c <printf>:
    c02c:	b40f      	push	{r0, r1, r2, r3}
    c02e:	b500      	push	{lr}
    c030:	4906      	ldr	r1, [pc, #24]	; (c04c <printf+0x20>)
    c032:	b083      	sub	sp, #12
    c034:	ab04      	add	r3, sp, #16
    c036:	6808      	ldr	r0, [r1, #0]
    c038:	cb04      	ldmia	r3!, {r2}
    c03a:	6881      	ldr	r1, [r0, #8]
    c03c:	9301      	str	r3, [sp, #4]
    c03e:	f000 f839 	bl	c0b4 <_vfprintf_r>
    c042:	b003      	add	sp, #12
    c044:	bc08      	pop	{r3}
    c046:	b004      	add	sp, #16
    c048:	4718      	bx	r3
    c04a:	46c0      	nop			; (mov r8, r8)
    c04c:	20000070 	.word	0x20000070

0000c050 <strlen>:
    c050:	b510      	push	{r4, lr}
    c052:	0783      	lsls	r3, r0, #30
    c054:	d025      	beq.n	c0a2 <strlen+0x52>
    c056:	7803      	ldrb	r3, [r0, #0]
    c058:	2b00      	cmp	r3, #0
    c05a:	d024      	beq.n	c0a6 <strlen+0x56>
    c05c:	0003      	movs	r3, r0
    c05e:	2103      	movs	r1, #3
    c060:	e002      	b.n	c068 <strlen+0x18>
    c062:	781a      	ldrb	r2, [r3, #0]
    c064:	2a00      	cmp	r2, #0
    c066:	d01a      	beq.n	c09e <strlen+0x4e>
    c068:	3301      	adds	r3, #1
    c06a:	420b      	tst	r3, r1
    c06c:	d1f9      	bne.n	c062 <strlen+0x12>
    c06e:	6819      	ldr	r1, [r3, #0]
    c070:	4a0e      	ldr	r2, [pc, #56]	; (c0ac <strlen+0x5c>)
    c072:	4c0f      	ldr	r4, [pc, #60]	; (c0b0 <strlen+0x60>)
    c074:	188a      	adds	r2, r1, r2
    c076:	438a      	bics	r2, r1
    c078:	4222      	tst	r2, r4
    c07a:	d106      	bne.n	c08a <strlen+0x3a>
    c07c:	3304      	adds	r3, #4
    c07e:	6819      	ldr	r1, [r3, #0]
    c080:	4a0a      	ldr	r2, [pc, #40]	; (c0ac <strlen+0x5c>)
    c082:	188a      	adds	r2, r1, r2
    c084:	438a      	bics	r2, r1
    c086:	4222      	tst	r2, r4
    c088:	d0f8      	beq.n	c07c <strlen+0x2c>
    c08a:	001a      	movs	r2, r3
    c08c:	781b      	ldrb	r3, [r3, #0]
    c08e:	2b00      	cmp	r3, #0
    c090:	d003      	beq.n	c09a <strlen+0x4a>
    c092:	3201      	adds	r2, #1
    c094:	7811      	ldrb	r1, [r2, #0]
    c096:	2900      	cmp	r1, #0
    c098:	d1fb      	bne.n	c092 <strlen+0x42>
    c09a:	1a10      	subs	r0, r2, r0
    c09c:	bd10      	pop	{r4, pc}
    c09e:	1a18      	subs	r0, r3, r0
    c0a0:	e7fc      	b.n	c09c <strlen+0x4c>
    c0a2:	0003      	movs	r3, r0
    c0a4:	e7e3      	b.n	c06e <strlen+0x1e>
    c0a6:	2000      	movs	r0, #0
    c0a8:	e7f8      	b.n	c09c <strlen+0x4c>
    c0aa:	46c0      	nop			; (mov r8, r8)
    c0ac:	fefefeff 	.word	0xfefefeff
    c0b0:	80808080 	.word	0x80808080

0000c0b4 <_vfprintf_r>:
    c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0b6:	46de      	mov	lr, fp
    c0b8:	464e      	mov	r6, r9
    c0ba:	4645      	mov	r5, r8
    c0bc:	4657      	mov	r7, sl
    c0be:	b5e0      	push	{r5, r6, r7, lr}
    c0c0:	b0c3      	sub	sp, #268	; 0x10c
    c0c2:	4689      	mov	r9, r1
    c0c4:	0014      	movs	r4, r2
    c0c6:	001d      	movs	r5, r3
    c0c8:	930f      	str	r3, [sp, #60]	; 0x3c
    c0ca:	0006      	movs	r6, r0
    c0cc:	9006      	str	r0, [sp, #24]
    c0ce:	f003 f939 	bl	f344 <_localeconv_r>
    c0d2:	6803      	ldr	r3, [r0, #0]
    c0d4:	0018      	movs	r0, r3
    c0d6:	9318      	str	r3, [sp, #96]	; 0x60
    c0d8:	f7ff ffba 	bl	c050 <strlen>
    c0dc:	9017      	str	r0, [sp, #92]	; 0x5c
    c0de:	2e00      	cmp	r6, #0
    c0e0:	d004      	beq.n	c0ec <_vfprintf_r+0x38>
    c0e2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    c0e4:	9307      	str	r3, [sp, #28]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d100      	bne.n	c0ec <_vfprintf_r+0x38>
    c0ea:	e0a7      	b.n	c23c <_vfprintf_r+0x188>
    c0ec:	464b      	mov	r3, r9
    c0ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c0f0:	07db      	lsls	r3, r3, #31
    c0f2:	d478      	bmi.n	c1e6 <_vfprintf_r+0x132>
    c0f4:	464b      	mov	r3, r9
    c0f6:	210c      	movs	r1, #12
    c0f8:	5e59      	ldrsh	r1, [r3, r1]
    c0fa:	b28b      	uxth	r3, r1
    c0fc:	059a      	lsls	r2, r3, #22
    c0fe:	d56e      	bpl.n	c1de <_vfprintf_r+0x12a>
    c100:	2280      	movs	r2, #128	; 0x80
    c102:	0192      	lsls	r2, r2, #6
    c104:	4213      	tst	r3, r2
    c106:	d109      	bne.n	c11c <_vfprintf_r+0x68>
    c108:	430a      	orrs	r2, r1
    c10a:	464b      	mov	r3, r9
    c10c:	4649      	mov	r1, r9
    c10e:	819a      	strh	r2, [r3, #12]
    c110:	6e49      	ldr	r1, [r1, #100]	; 0x64
    c112:	4bcc      	ldr	r3, [pc, #816]	; (c444 <_vfprintf_r+0x390>)
    c114:	400b      	ands	r3, r1
    c116:	4649      	mov	r1, r9
    c118:	664b      	str	r3, [r1, #100]	; 0x64
    c11a:	b293      	uxth	r3, r2
    c11c:	071a      	lsls	r2, r3, #28
    c11e:	d567      	bpl.n	c1f0 <_vfprintf_r+0x13c>
    c120:	464a      	mov	r2, r9
    c122:	6912      	ldr	r2, [r2, #16]
    c124:	2a00      	cmp	r2, #0
    c126:	d063      	beq.n	c1f0 <_vfprintf_r+0x13c>
    c128:	221a      	movs	r2, #26
    c12a:	401a      	ands	r2, r3
    c12c:	2a0a      	cmp	r2, #10
    c12e:	d100      	bne.n	c132 <_vfprintf_r+0x7e>
    c130:	e088      	b.n	c244 <_vfprintf_r+0x190>
    c132:	ab32      	add	r3, sp, #200	; 0xc8
    c134:	9325      	str	r3, [sp, #148]	; 0x94
    c136:	2300      	movs	r3, #0
    c138:	46cb      	mov	fp, r9
    c13a:	af25      	add	r7, sp, #148	; 0x94
    c13c:	60bb      	str	r3, [r7, #8]
    c13e:	607b      	str	r3, [r7, #4]
    c140:	9407      	str	r4, [sp, #28]
    c142:	9314      	str	r3, [sp, #80]	; 0x50
    c144:	9316      	str	r3, [sp, #88]	; 0x58
    c146:	9315      	str	r3, [sp, #84]	; 0x54
    c148:	ae32      	add	r6, sp, #200	; 0xc8
    c14a:	9319      	str	r3, [sp, #100]	; 0x64
    c14c:	931a      	str	r3, [sp, #104]	; 0x68
    c14e:	930a      	str	r3, [sp, #40]	; 0x28
    c150:	9c07      	ldr	r4, [sp, #28]
    c152:	7823      	ldrb	r3, [r4, #0]
    c154:	2b00      	cmp	r3, #0
    c156:	d101      	bne.n	c15c <_vfprintf_r+0xa8>
    c158:	f000 fd9e 	bl	cc98 <_vfprintf_r+0xbe4>
    c15c:	2b25      	cmp	r3, #37	; 0x25
    c15e:	d103      	bne.n	c168 <_vfprintf_r+0xb4>
    c160:	f000 fd9a 	bl	cc98 <_vfprintf_r+0xbe4>
    c164:	2b25      	cmp	r3, #37	; 0x25
    c166:	d003      	beq.n	c170 <_vfprintf_r+0xbc>
    c168:	3401      	adds	r4, #1
    c16a:	7823      	ldrb	r3, [r4, #0]
    c16c:	2b00      	cmp	r3, #0
    c16e:	d1f9      	bne.n	c164 <_vfprintf_r+0xb0>
    c170:	9b07      	ldr	r3, [sp, #28]
    c172:	1ae5      	subs	r5, r4, r3
    c174:	d010      	beq.n	c198 <_vfprintf_r+0xe4>
    c176:	9b07      	ldr	r3, [sp, #28]
    c178:	6075      	str	r5, [r6, #4]
    c17a:	6033      	str	r3, [r6, #0]
    c17c:	68bb      	ldr	r3, [r7, #8]
    c17e:	195b      	adds	r3, r3, r5
    c180:	60bb      	str	r3, [r7, #8]
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	3301      	adds	r3, #1
    c186:	607b      	str	r3, [r7, #4]
    c188:	2b07      	cmp	r3, #7
    c18a:	dc4c      	bgt.n	c226 <_vfprintf_r+0x172>
    c18c:	3608      	adds	r6, #8
    c18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c190:	469c      	mov	ip, r3
    c192:	44ac      	add	ip, r5
    c194:	4663      	mov	r3, ip
    c196:	930a      	str	r3, [sp, #40]	; 0x28
    c198:	7823      	ldrb	r3, [r4, #0]
    c19a:	2b00      	cmp	r3, #0
    c19c:	d101      	bne.n	c1a2 <_vfprintf_r+0xee>
    c19e:	f000 fc99 	bl	cad4 <_vfprintf_r+0xa20>
    c1a2:	1c63      	adds	r3, r4, #1
    c1a4:	9307      	str	r3, [sp, #28]
    c1a6:	2300      	movs	r3, #0
    c1a8:	aa16      	add	r2, sp, #88	; 0x58
    c1aa:	77d3      	strb	r3, [r2, #31]
    c1ac:	2201      	movs	r2, #1
    c1ae:	4252      	negs	r2, r2
    c1b0:	4692      	mov	sl, r2
    c1b2:	2200      	movs	r2, #0
    c1b4:	920b      	str	r2, [sp, #44]	; 0x2c
    c1b6:	3220      	adds	r2, #32
    c1b8:	4691      	mov	r9, r2
    c1ba:	3220      	adds	r2, #32
    c1bc:	7863      	ldrb	r3, [r4, #1]
    c1be:	2100      	movs	r1, #0
    c1c0:	2000      	movs	r0, #0
    c1c2:	2400      	movs	r4, #0
    c1c4:	4694      	mov	ip, r2
    c1c6:	9a07      	ldr	r2, [sp, #28]
    c1c8:	3201      	adds	r2, #1
    c1ca:	9207      	str	r2, [sp, #28]
    c1cc:	001a      	movs	r2, r3
    c1ce:	3a20      	subs	r2, #32
    c1d0:	2a58      	cmp	r2, #88	; 0x58
    c1d2:	d900      	bls.n	c1d6 <_vfprintf_r+0x122>
    c1d4:	e2e7      	b.n	c7a6 <_vfprintf_r+0x6f2>
    c1d6:	4d9c      	ldr	r5, [pc, #624]	; (c448 <_vfprintf_r+0x394>)
    c1d8:	0092      	lsls	r2, r2, #2
    c1da:	58aa      	ldr	r2, [r5, r2]
    c1dc:	4697      	mov	pc, r2
    c1de:	464b      	mov	r3, r9
    c1e0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c1e2:	f003 f8c1 	bl	f368 <__retarget_lock_acquire_recursive>
    c1e6:	464b      	mov	r3, r9
    c1e8:	210c      	movs	r1, #12
    c1ea:	5e59      	ldrsh	r1, [r3, r1]
    c1ec:	b28b      	uxth	r3, r1
    c1ee:	e787      	b.n	c100 <_vfprintf_r+0x4c>
    c1f0:	4649      	mov	r1, r9
    c1f2:	9806      	ldr	r0, [sp, #24]
    c1f4:	f001 fb0e 	bl	d814 <__swsetup_r>
    c1f8:	464b      	mov	r3, r9
    c1fa:	2800      	cmp	r0, #0
    c1fc:	d03a      	beq.n	c274 <_vfprintf_r+0x1c0>
    c1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c200:	07db      	lsls	r3, r3, #31
    c202:	d405      	bmi.n	c210 <_vfprintf_r+0x15c>
    c204:	464b      	mov	r3, r9
    c206:	899b      	ldrh	r3, [r3, #12]
    c208:	059b      	lsls	r3, r3, #22
    c20a:	d401      	bmi.n	c210 <_vfprintf_r+0x15c>
    c20c:	f000 ffcf 	bl	d1ae <_vfprintf_r+0x10fa>
    c210:	2301      	movs	r3, #1
    c212:	425b      	negs	r3, r3
    c214:	930a      	str	r3, [sp, #40]	; 0x28
    c216:	980a      	ldr	r0, [sp, #40]	; 0x28
    c218:	b043      	add	sp, #268	; 0x10c
    c21a:	bc3c      	pop	{r2, r3, r4, r5}
    c21c:	4690      	mov	r8, r2
    c21e:	4699      	mov	r9, r3
    c220:	46a2      	mov	sl, r4
    c222:	46ab      	mov	fp, r5
    c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c226:	003a      	movs	r2, r7
    c228:	4659      	mov	r1, fp
    c22a:	9806      	ldr	r0, [sp, #24]
    c22c:	f004 fa14 	bl	10658 <__sprint_r>
    c230:	2800      	cmp	r0, #0
    c232:	d001      	beq.n	c238 <_vfprintf_r+0x184>
    c234:	f000 fcce 	bl	cbd4 <_vfprintf_r+0xb20>
    c238:	ae32      	add	r6, sp, #200	; 0xc8
    c23a:	e7a8      	b.n	c18e <_vfprintf_r+0xda>
    c23c:	9806      	ldr	r0, [sp, #24]
    c23e:	f002 fd51 	bl	ece4 <__sinit>
    c242:	e753      	b.n	c0ec <_vfprintf_r+0x38>
    c244:	464a      	mov	r2, r9
    c246:	210e      	movs	r1, #14
    c248:	5e52      	ldrsh	r2, [r2, r1]
    c24a:	2a00      	cmp	r2, #0
    c24c:	da00      	bge.n	c250 <_vfprintf_r+0x19c>
    c24e:	e770      	b.n	c132 <_vfprintf_r+0x7e>
    c250:	464a      	mov	r2, r9
    c252:	6e52      	ldr	r2, [r2, #100]	; 0x64
    c254:	07d2      	lsls	r2, r2, #31
    c256:	d405      	bmi.n	c264 <_vfprintf_r+0x1b0>
    c258:	059b      	lsls	r3, r3, #22
    c25a:	d403      	bmi.n	c264 <_vfprintf_r+0x1b0>
    c25c:	464b      	mov	r3, r9
    c25e:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c260:	f003 f884 	bl	f36c <__retarget_lock_release_recursive>
    c264:	002b      	movs	r3, r5
    c266:	0022      	movs	r2, r4
    c268:	4649      	mov	r1, r9
    c26a:	9806      	ldr	r0, [sp, #24]
    c26c:	f001 fa8e 	bl	d78c <__sbprintf>
    c270:	900a      	str	r0, [sp, #40]	; 0x28
    c272:	e7d0      	b.n	c216 <_vfprintf_r+0x162>
    c274:	899b      	ldrh	r3, [r3, #12]
    c276:	e757      	b.n	c128 <_vfprintf_r+0x74>
    c278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c27a:	920f      	str	r2, [sp, #60]	; 0x3c
    c27c:	425b      	negs	r3, r3
    c27e:	930b      	str	r3, [sp, #44]	; 0x2c
    c280:	2304      	movs	r3, #4
    c282:	431c      	orrs	r4, r3
    c284:	9b07      	ldr	r3, [sp, #28]
    c286:	781b      	ldrb	r3, [r3, #0]
    c288:	e79d      	b.n	c1c6 <_vfprintf_r+0x112>
    c28a:	9b07      	ldr	r3, [sp, #28]
    c28c:	2101      	movs	r1, #1
    c28e:	781b      	ldrb	r3, [r3, #0]
    c290:	202b      	movs	r0, #43	; 0x2b
    c292:	e798      	b.n	c1c6 <_vfprintf_r+0x112>
    c294:	9b07      	ldr	r3, [sp, #28]
    c296:	1c5a      	adds	r2, r3, #1
    c298:	781b      	ldrb	r3, [r3, #0]
    c29a:	4690      	mov	r8, r2
    c29c:	2b2a      	cmp	r3, #42	; 0x2a
    c29e:	d101      	bne.n	c2a4 <_vfprintf_r+0x1f0>
    c2a0:	f001 fa38 	bl	d714 <_vfprintf_r+0x1660>
    c2a4:	001a      	movs	r2, r3
    c2a6:	2500      	movs	r5, #0
    c2a8:	3a30      	subs	r2, #48	; 0x30
    c2aa:	46aa      	mov	sl, r5
    c2ac:	2a09      	cmp	r2, #9
    c2ae:	d901      	bls.n	c2b4 <_vfprintf_r+0x200>
    c2b0:	f001 f96d 	bl	d58e <_vfprintf_r+0x14da>
    c2b4:	0025      	movs	r5, r4
    c2b6:	4643      	mov	r3, r8
    c2b8:	4654      	mov	r4, sl
    c2ba:	4688      	mov	r8, r1
    c2bc:	4682      	mov	sl, r0
    c2be:	00a1      	lsls	r1, r4, #2
    c2c0:	190c      	adds	r4, r1, r4
    c2c2:	7818      	ldrb	r0, [r3, #0]
    c2c4:	0064      	lsls	r4, r4, #1
    c2c6:	18a4      	adds	r4, r4, r2
    c2c8:	0002      	movs	r2, r0
    c2ca:	1c59      	adds	r1, r3, #1
    c2cc:	3a30      	subs	r2, #48	; 0x30
    c2ce:	000b      	movs	r3, r1
    c2d0:	2a09      	cmp	r2, #9
    c2d2:	d9f4      	bls.n	c2be <_vfprintf_r+0x20a>
    c2d4:	9107      	str	r1, [sp, #28]
    c2d6:	0003      	movs	r3, r0
    c2d8:	4641      	mov	r1, r8
    c2da:	4650      	mov	r0, sl
    c2dc:	46a2      	mov	sl, r4
    c2de:	002c      	movs	r4, r5
    c2e0:	e774      	b.n	c1cc <_vfprintf_r+0x118>
    c2e2:	9312      	str	r3, [sp, #72]	; 0x48
    c2e4:	2900      	cmp	r1, #0
    c2e6:	d001      	beq.n	c2ec <_vfprintf_r+0x238>
    c2e8:	f001 fa2e 	bl	d748 <_vfprintf_r+0x1694>
    c2ec:	4b57      	ldr	r3, [pc, #348]	; (c44c <_vfprintf_r+0x398>)
    c2ee:	9319      	str	r3, [sp, #100]	; 0x64
    c2f0:	06a3      	lsls	r3, r4, #26
    c2f2:	d501      	bpl.n	c2f8 <_vfprintf_r+0x244>
    c2f4:	f000 fe9a 	bl	d02c <_vfprintf_r+0xf78>
    c2f8:	06e3      	lsls	r3, r4, #27
    c2fa:	d501      	bpl.n	c300 <_vfprintf_r+0x24c>
    c2fc:	f000 fd9a 	bl	ce34 <_vfprintf_r+0xd80>
    c300:	0663      	lsls	r3, r4, #25
    c302:	d401      	bmi.n	c308 <_vfprintf_r+0x254>
    c304:	f000 fd96 	bl	ce34 <_vfprintf_r+0xd80>
    c308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c30a:	881a      	ldrh	r2, [r3, #0]
    c30c:	920c      	str	r2, [sp, #48]	; 0x30
    c30e:	2200      	movs	r2, #0
    c310:	3304      	adds	r3, #4
    c312:	920d      	str	r2, [sp, #52]	; 0x34
    c314:	930f      	str	r3, [sp, #60]	; 0x3c
    c316:	07e3      	lsls	r3, r4, #31
    c318:	d401      	bmi.n	c31e <_vfprintf_r+0x26a>
    c31a:	f000 fd76 	bl	ce0a <_vfprintf_r+0xd56>
    c31e:	990c      	ldr	r1, [sp, #48]	; 0x30
    c320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c322:	000b      	movs	r3, r1
    c324:	4313      	orrs	r3, r2
    c326:	001a      	movs	r2, r3
    c328:	2302      	movs	r3, #2
    c32a:	2a00      	cmp	r2, #0
    c32c:	d008      	beq.n	c340 <_vfprintf_r+0x28c>
    c32e:	2030      	movs	r0, #48	; 0x30
    c330:	a91e      	add	r1, sp, #120	; 0x78
    c332:	7008      	strb	r0, [r1, #0]
    c334:	2548      	movs	r5, #72	; 0x48
    c336:	4668      	mov	r0, sp
    c338:	1940      	adds	r0, r0, r5
    c33a:	7800      	ldrb	r0, [r0, #0]
    c33c:	431c      	orrs	r4, r3
    c33e:	7048      	strb	r0, [r1, #1]
    c340:	2100      	movs	r1, #0
    c342:	4688      	mov	r8, r1
    c344:	a816      	add	r0, sp, #88	; 0x58
    c346:	77c1      	strb	r1, [r0, #31]
    c348:	4651      	mov	r1, sl
    c34a:	3101      	adds	r1, #1
    c34c:	d100      	bne.n	c350 <_vfprintf_r+0x29c>
    c34e:	e0e6      	b.n	c51e <_vfprintf_r+0x46a>
    c350:	2180      	movs	r1, #128	; 0x80
    c352:	0020      	movs	r0, r4
    c354:	4388      	bics	r0, r1
    c356:	9009      	str	r0, [sp, #36]	; 0x24
    c358:	2a00      	cmp	r2, #0
    c35a:	d000      	beq.n	c35e <_vfprintf_r+0x2aa>
    c35c:	e0e3      	b.n	c526 <_vfprintf_r+0x472>
    c35e:	4652      	mov	r2, sl
    c360:	2a00      	cmp	r2, #0
    c362:	d001      	beq.n	c368 <_vfprintf_r+0x2b4>
    c364:	f000 fc38 	bl	cbd8 <_vfprintf_r+0xb24>
    c368:	2b00      	cmp	r3, #0
    c36a:	d001      	beq.n	c370 <_vfprintf_r+0x2bc>
    c36c:	f000 fd0c 	bl	cd88 <_vfprintf_r+0xcd4>
    c370:	2001      	movs	r0, #1
    c372:	ab32      	add	r3, sp, #200	; 0xc8
    c374:	4020      	ands	r0, r4
    c376:	900e      	str	r0, [sp, #56]	; 0x38
    c378:	9311      	str	r3, [sp, #68]	; 0x44
    c37a:	d008      	beq.n	c38e <_vfprintf_r+0x2da>
    c37c:	2327      	movs	r3, #39	; 0x27
    c37e:	2130      	movs	r1, #48	; 0x30
    c380:	aa28      	add	r2, sp, #160	; 0xa0
    c382:	54d1      	strb	r1, [r2, r3]
    c384:	aa16      	add	r2, sp, #88	; 0x58
    c386:	4694      	mov	ip, r2
    c388:	3348      	adds	r3, #72	; 0x48
    c38a:	4463      	add	r3, ip
    c38c:	9311      	str	r3, [sp, #68]	; 0x44
    c38e:	4653      	mov	r3, sl
    c390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c392:	9308      	str	r3, [sp, #32]
    c394:	4592      	cmp	sl, r2
    c396:	da00      	bge.n	c39a <_vfprintf_r+0x2e6>
    c398:	9208      	str	r2, [sp, #32]
    c39a:	2300      	movs	r3, #0
    c39c:	9313      	str	r3, [sp, #76]	; 0x4c
    c39e:	4643      	mov	r3, r8
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d002      	beq.n	c3aa <_vfprintf_r+0x2f6>
    c3a4:	9b08      	ldr	r3, [sp, #32]
    c3a6:	3301      	adds	r3, #1
    c3a8:	9308      	str	r3, [sp, #32]
    c3aa:	2302      	movs	r3, #2
    c3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c3ae:	401a      	ands	r2, r3
    c3b0:	4691      	mov	r9, r2
    c3b2:	d002      	beq.n	c3ba <_vfprintf_r+0x306>
    c3b4:	9b08      	ldr	r3, [sp, #32]
    c3b6:	3302      	adds	r3, #2
    c3b8:	9308      	str	r3, [sp, #32]
    c3ba:	2384      	movs	r3, #132	; 0x84
    c3bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c3be:	401a      	ands	r2, r3
    c3c0:	9210      	str	r2, [sp, #64]	; 0x40
    c3c2:	d000      	beq.n	c3c6 <_vfprintf_r+0x312>
    c3c4:	e207      	b.n	c7d6 <_vfprintf_r+0x722>
    c3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3c8:	9a08      	ldr	r2, [sp, #32]
    c3ca:	1a9c      	subs	r4, r3, r2
    c3cc:	2c00      	cmp	r4, #0
    c3ce:	dc00      	bgt.n	c3d2 <_vfprintf_r+0x31e>
    c3d0:	e201      	b.n	c7d6 <_vfprintf_r+0x722>
    c3d2:	491f      	ldr	r1, [pc, #124]	; (c450 <_vfprintf_r+0x39c>)
    c3d4:	68ba      	ldr	r2, [r7, #8]
    c3d6:	687b      	ldr	r3, [r7, #4]
    c3d8:	4688      	mov	r8, r1
    c3da:	2c10      	cmp	r4, #16
    c3dc:	dd21      	ble.n	c422 <_vfprintf_r+0x36e>
    c3de:	0031      	movs	r1, r6
    c3e0:	2510      	movs	r5, #16
    c3e2:	465e      	mov	r6, fp
    c3e4:	e003      	b.n	c3ee <_vfprintf_r+0x33a>
    c3e6:	3c10      	subs	r4, #16
    c3e8:	3108      	adds	r1, #8
    c3ea:	2c10      	cmp	r4, #16
    c3ec:	dd17      	ble.n	c41e <_vfprintf_r+0x36a>
    c3ee:	4640      	mov	r0, r8
    c3f0:	3210      	adds	r2, #16
    c3f2:	3301      	adds	r3, #1
    c3f4:	6008      	str	r0, [r1, #0]
    c3f6:	604d      	str	r5, [r1, #4]
    c3f8:	60ba      	str	r2, [r7, #8]
    c3fa:	607b      	str	r3, [r7, #4]
    c3fc:	2b07      	cmp	r3, #7
    c3fe:	ddf2      	ble.n	c3e6 <_vfprintf_r+0x332>
    c400:	003a      	movs	r2, r7
    c402:	0031      	movs	r1, r6
    c404:	9806      	ldr	r0, [sp, #24]
    c406:	f004 f927 	bl	10658 <__sprint_r>
    c40a:	2800      	cmp	r0, #0
    c40c:	d001      	beq.n	c412 <_vfprintf_r+0x35e>
    c40e:	f000 fccf 	bl	cdb0 <_vfprintf_r+0xcfc>
    c412:	3c10      	subs	r4, #16
    c414:	68ba      	ldr	r2, [r7, #8]
    c416:	687b      	ldr	r3, [r7, #4]
    c418:	a932      	add	r1, sp, #200	; 0xc8
    c41a:	2c10      	cmp	r4, #16
    c41c:	dce7      	bgt.n	c3ee <_vfprintf_r+0x33a>
    c41e:	46b3      	mov	fp, r6
    c420:	000e      	movs	r6, r1
    c422:	4641      	mov	r1, r8
    c424:	6074      	str	r4, [r6, #4]
    c426:	3301      	adds	r3, #1
    c428:	18a4      	adds	r4, r4, r2
    c42a:	6031      	str	r1, [r6, #0]
    c42c:	60bc      	str	r4, [r7, #8]
    c42e:	607b      	str	r3, [r7, #4]
    c430:	2b07      	cmp	r3, #7
    c432:	dd01      	ble.n	c438 <_vfprintf_r+0x384>
    c434:	f000 fcae 	bl	cd94 <_vfprintf_r+0xce0>
    c438:	ab16      	add	r3, sp, #88	; 0x58
    c43a:	7fdb      	ldrb	r3, [r3, #31]
    c43c:	3608      	adds	r6, #8
    c43e:	4698      	mov	r8, r3
    c440:	e1ca      	b.n	c7d8 <_vfprintf_r+0x724>
    c442:	46c0      	nop			; (mov r8, r8)
    c444:	ffffdfff 	.word	0xffffdfff
    c448:	000112ec 	.word	0x000112ec
    c44c:	0001146c 	.word	0x0001146c
    c450:	0001148c 	.word	0x0001148c
    c454:	2200      	movs	r2, #0
    c456:	9d07      	ldr	r5, [sp, #28]
    c458:	3b30      	subs	r3, #48	; 0x30
    c45a:	46a8      	mov	r8, r5
    c45c:	920b      	str	r2, [sp, #44]	; 0x2c
    c45e:	001a      	movs	r2, r3
    c460:	9408      	str	r4, [sp, #32]
    c462:	002c      	movs	r4, r5
    c464:	4655      	mov	r5, sl
    c466:	4682      	mov	sl, r0
    c468:	4640      	mov	r0, r8
    c46a:	4688      	mov	r8, r1
    c46c:	0011      	movs	r1, r2
    c46e:	2200      	movs	r2, #0
    c470:	0093      	lsls	r3, r2, #2
    c472:	189a      	adds	r2, r3, r2
    c474:	7803      	ldrb	r3, [r0, #0]
    c476:	0052      	lsls	r2, r2, #1
    c478:	188a      	adds	r2, r1, r2
    c47a:	0019      	movs	r1, r3
    c47c:	3401      	adds	r4, #1
    c47e:	3930      	subs	r1, #48	; 0x30
    c480:	0020      	movs	r0, r4
    c482:	2909      	cmp	r1, #9
    c484:	d9f4      	bls.n	c470 <_vfprintf_r+0x3bc>
    c486:	9407      	str	r4, [sp, #28]
    c488:	4650      	mov	r0, sl
    c48a:	9c08      	ldr	r4, [sp, #32]
    c48c:	920b      	str	r2, [sp, #44]	; 0x2c
    c48e:	4641      	mov	r1, r8
    c490:	46aa      	mov	sl, r5
    c492:	e69b      	b.n	c1cc <_vfprintf_r+0x118>
    c494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c496:	9312      	str	r3, [sp, #72]	; 0x48
    c498:	6813      	ldr	r3, [r2, #0]
    c49a:	2120      	movs	r1, #32
    c49c:	9308      	str	r3, [sp, #32]
    c49e:	466b      	mov	r3, sp
    c4a0:	185b      	adds	r3, r3, r1
    c4a2:	781b      	ldrb	r3, [r3, #0]
    c4a4:	ad28      	add	r5, sp, #160	; 0xa0
    c4a6:	702b      	strb	r3, [r5, #0]
    c4a8:	2300      	movs	r3, #0
    c4aa:	a916      	add	r1, sp, #88	; 0x58
    c4ac:	77cb      	strb	r3, [r1, #31]
    c4ae:	0013      	movs	r3, r2
    c4b0:	3304      	adds	r3, #4
    c4b2:	930f      	str	r3, [sp, #60]	; 0x3c
    c4b4:	2300      	movs	r3, #0
    c4b6:	9409      	str	r4, [sp, #36]	; 0x24
    c4b8:	4698      	mov	r8, r3
    c4ba:	3301      	adds	r3, #1
    c4bc:	9308      	str	r3, [sp, #32]
    c4be:	930e      	str	r3, [sp, #56]	; 0x38
    c4c0:	2300      	movs	r3, #0
    c4c2:	9511      	str	r5, [sp, #68]	; 0x44
    c4c4:	469a      	mov	sl, r3
    c4c6:	9313      	str	r3, [sp, #76]	; 0x4c
    c4c8:	e76f      	b.n	c3aa <_vfprintf_r+0x2f6>
    c4ca:	9312      	str	r3, [sp, #72]	; 0x48
    c4cc:	2900      	cmp	r1, #0
    c4ce:	d001      	beq.n	c4d4 <_vfprintf_r+0x420>
    c4d0:	f001 f94d 	bl	d76e <_vfprintf_r+0x16ba>
    c4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c4d6:	06a3      	lsls	r3, r4, #26
    c4d8:	d501      	bpl.n	c4de <_vfprintf_r+0x42a>
    c4da:	f000 fd5a 	bl	cf92 <_vfprintf_r+0xede>
    c4de:	06e3      	lsls	r3, r4, #27
    c4e0:	d501      	bpl.n	c4e6 <_vfprintf_r+0x432>
    c4e2:	f000 fcab 	bl	ce3c <_vfprintf_r+0xd88>
    c4e6:	0663      	lsls	r3, r4, #25
    c4e8:	d401      	bmi.n	c4ee <_vfprintf_r+0x43a>
    c4ea:	f000 fca7 	bl	ce3c <_vfprintf_r+0xd88>
    c4ee:	2100      	movs	r1, #0
    c4f0:	5e53      	ldrsh	r3, [r2, r1]
    c4f2:	930c      	str	r3, [sp, #48]	; 0x30
    c4f4:	3204      	adds	r2, #4
    c4f6:	17db      	asrs	r3, r3, #31
    c4f8:	930d      	str	r3, [sp, #52]	; 0x34
    c4fa:	920f      	str	r2, [sp, #60]	; 0x3c
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	da01      	bge.n	c504 <_vfprintf_r+0x450>
    c500:	f000 fdb2 	bl	d068 <_vfprintf_r+0xfb4>
    c504:	990c      	ldr	r1, [sp, #48]	; 0x30
    c506:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c508:	0008      	movs	r0, r1
    c50a:	4651      	mov	r1, sl
    c50c:	ab16      	add	r3, sp, #88	; 0x58
    c50e:	7fdb      	ldrb	r3, [r3, #31]
    c510:	4310      	orrs	r0, r2
    c512:	4698      	mov	r8, r3
    c514:	0002      	movs	r2, r0
    c516:	2301      	movs	r3, #1
    c518:	3101      	adds	r1, #1
    c51a:	d000      	beq.n	c51e <_vfprintf_r+0x46a>
    c51c:	e718      	b.n	c350 <_vfprintf_r+0x29c>
    c51e:	2a00      	cmp	r2, #0
    c520:	d100      	bne.n	c524 <_vfprintf_r+0x470>
    c522:	e35a      	b.n	cbda <_vfprintf_r+0xb26>
    c524:	9409      	str	r4, [sp, #36]	; 0x24
    c526:	2b01      	cmp	r3, #1
    c528:	d101      	bne.n	c52e <_vfprintf_r+0x47a>
    c52a:	f000 fc06 	bl	cd3a <_vfprintf_r+0xc86>
    c52e:	2b02      	cmp	r3, #2
    c530:	d000      	beq.n	c534 <_vfprintf_r+0x480>
    c532:	e380      	b.n	cc36 <_vfprintf_r+0xb82>
    c534:	9c19      	ldr	r4, [sp, #100]	; 0x64
    c536:	200f      	movs	r0, #15
    c538:	46a1      	mov	r9, r4
    c53a:	46b4      	mov	ip, r6
    c53c:	ab32      	add	r3, sp, #200	; 0xc8
    c53e:	0019      	movs	r1, r3
    c540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c544:	0004      	movs	r4, r0
    c546:	464d      	mov	r5, r9
    c548:	4014      	ands	r4, r2
    c54a:	5d2c      	ldrb	r4, [r5, r4]
    c54c:	071e      	lsls	r6, r3, #28
    c54e:	0915      	lsrs	r5, r2, #4
    c550:	3901      	subs	r1, #1
    c552:	432e      	orrs	r6, r5
    c554:	700c      	strb	r4, [r1, #0]
    c556:	091c      	lsrs	r4, r3, #4
    c558:	0023      	movs	r3, r4
    c55a:	0034      	movs	r4, r6
    c55c:	0032      	movs	r2, r6
    c55e:	431c      	orrs	r4, r3
    c560:	d1f0      	bne.n	c544 <_vfprintf_r+0x490>
    c562:	920c      	str	r2, [sp, #48]	; 0x30
    c564:	930d      	str	r3, [sp, #52]	; 0x34
    c566:	ab32      	add	r3, sp, #200	; 0xc8
    c568:	1a5b      	subs	r3, r3, r1
    c56a:	9111      	str	r1, [sp, #68]	; 0x44
    c56c:	4666      	mov	r6, ip
    c56e:	930e      	str	r3, [sp, #56]	; 0x38
    c570:	e70d      	b.n	c38e <_vfprintf_r+0x2da>
    c572:	4663      	mov	r3, ip
    c574:	431c      	orrs	r4, r3
    c576:	9b07      	ldr	r3, [sp, #28]
    c578:	781b      	ldrb	r3, [r3, #0]
    c57a:	e624      	b.n	c1c6 <_vfprintf_r+0x112>
    c57c:	9b07      	ldr	r3, [sp, #28]
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	2b6c      	cmp	r3, #108	; 0x6c
    c582:	d101      	bne.n	c588 <_vfprintf_r+0x4d4>
    c584:	f000 fe8c 	bl	d2a0 <_vfprintf_r+0x11ec>
    c588:	2210      	movs	r2, #16
    c58a:	4314      	orrs	r4, r2
    c58c:	e61b      	b.n	c1c6 <_vfprintf_r+0x112>
    c58e:	2900      	cmp	r1, #0
    c590:	d001      	beq.n	c596 <_vfprintf_r+0x4e2>
    c592:	f001 f8d5 	bl	d740 <_vfprintf_r+0x168c>
    c596:	06a3      	lsls	r3, r4, #26
    c598:	d501      	bpl.n	c59e <_vfprintf_r+0x4ea>
    c59a:	f000 fe76 	bl	d28a <_vfprintf_r+0x11d6>
    c59e:	06e3      	lsls	r3, r4, #27
    c5a0:	d500      	bpl.n	c5a4 <_vfprintf_r+0x4f0>
    c5a2:	e110      	b.n	c7c6 <_vfprintf_r+0x712>
    c5a4:	0663      	lsls	r3, r4, #25
    c5a6:	d400      	bmi.n	c5aa <_vfprintf_r+0x4f6>
    c5a8:	e10d      	b.n	c7c6 <_vfprintf_r+0x712>
    c5aa:	4669      	mov	r1, sp
    c5ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c5ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    c5b0:	681a      	ldr	r2, [r3, #0]
    c5b2:	3304      	adds	r3, #4
    c5b4:	9208      	str	r2, [sp, #32]
    c5b6:	8011      	strh	r1, [r2, #0]
    c5b8:	930f      	str	r3, [sp, #60]	; 0x3c
    c5ba:	e5c9      	b.n	c150 <_vfprintf_r+0x9c>
    c5bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c5be:	2230      	movs	r2, #48	; 0x30
    c5c0:	680b      	ldr	r3, [r1, #0]
    c5c2:	930c      	str	r3, [sp, #48]	; 0x30
    c5c4:	2300      	movs	r3, #0
    c5c6:	930d      	str	r3, [sp, #52]	; 0x34
    c5c8:	3302      	adds	r3, #2
    c5ca:	431c      	orrs	r4, r3
    c5cc:	ab1e      	add	r3, sp, #120	; 0x78
    c5ce:	701a      	strb	r2, [r3, #0]
    c5d0:	3248      	adds	r2, #72	; 0x48
    c5d2:	705a      	strb	r2, [r3, #1]
    c5d4:	000b      	movs	r3, r1
    c5d6:	3304      	adds	r3, #4
    c5d8:	930f      	str	r3, [sp, #60]	; 0x3c
    c5da:	4bc1      	ldr	r3, [pc, #772]	; (c8e0 <_vfprintf_r+0x82c>)
    c5dc:	9212      	str	r2, [sp, #72]	; 0x48
    c5de:	9319      	str	r3, [sp, #100]	; 0x64
    c5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c5e2:	2302      	movs	r3, #2
    c5e4:	e6ac      	b.n	c340 <_vfprintf_r+0x28c>
    c5e6:	464b      	mov	r3, r9
    c5e8:	431c      	orrs	r4, r3
    c5ea:	9b07      	ldr	r3, [sp, #28]
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	e5ea      	b.n	c1c6 <_vfprintf_r+0x112>
    c5f0:	9312      	str	r3, [sp, #72]	; 0x48
    c5f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c5f4:	a916      	add	r1, sp, #88	; 0x58
    c5f6:	1d1d      	adds	r5, r3, #4
    c5f8:	681b      	ldr	r3, [r3, #0]
    c5fa:	001a      	movs	r2, r3
    c5fc:	9311      	str	r3, [sp, #68]	; 0x44
    c5fe:	2300      	movs	r3, #0
    c600:	77cb      	strb	r3, [r1, #31]
    c602:	2a00      	cmp	r2, #0
    c604:	d101      	bne.n	c60a <_vfprintf_r+0x556>
    c606:	f000 ff01 	bl	d40c <_vfprintf_r+0x1358>
    c60a:	4653      	mov	r3, sl
    c60c:	3301      	adds	r3, #1
    c60e:	d101      	bne.n	c614 <_vfprintf_r+0x560>
    c610:	f000 fe64 	bl	d2dc <_vfprintf_r+0x1228>
    c614:	4652      	mov	r2, sl
    c616:	2100      	movs	r1, #0
    c618:	9811      	ldr	r0, [sp, #68]	; 0x44
    c61a:	f003 f9d5 	bl	f9c8 <memchr>
    c61e:	2800      	cmp	r0, #0
    c620:	d101      	bne.n	c626 <_vfprintf_r+0x572>
    c622:	f000 ff78 	bl	d516 <_vfprintf_r+0x1462>
    c626:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c628:	1ac3      	subs	r3, r0, r3
    c62a:	001a      	movs	r2, r3
    c62c:	930e      	str	r3, [sp, #56]	; 0x38
    c62e:	43db      	mvns	r3, r3
    c630:	17db      	asrs	r3, r3, #31
    c632:	401a      	ands	r2, r3
    c634:	ab16      	add	r3, sp, #88	; 0x58
    c636:	7fdb      	ldrb	r3, [r3, #31]
    c638:	9208      	str	r2, [sp, #32]
    c63a:	4698      	mov	r8, r3
    c63c:	2300      	movs	r3, #0
    c63e:	950f      	str	r5, [sp, #60]	; 0x3c
    c640:	9409      	str	r4, [sp, #36]	; 0x24
    c642:	469a      	mov	sl, r3
    c644:	9313      	str	r3, [sp, #76]	; 0x4c
    c646:	e6aa      	b.n	c39e <_vfprintf_r+0x2ea>
    c648:	2308      	movs	r3, #8
    c64a:	431c      	orrs	r4, r3
    c64c:	9b07      	ldr	r3, [sp, #28]
    c64e:	781b      	ldrb	r3, [r3, #0]
    c650:	e5b9      	b.n	c1c6 <_vfprintf_r+0x112>
    c652:	9312      	str	r3, [sp, #72]	; 0x48
    c654:	2310      	movs	r3, #16
    c656:	431c      	orrs	r4, r3
    c658:	06a3      	lsls	r3, r4, #26
    c65a:	d501      	bpl.n	c660 <_vfprintf_r+0x5ac>
    c65c:	f000 fca7 	bl	cfae <_vfprintf_r+0xefa>
    c660:	06e3      	lsls	r3, r4, #27
    c662:	d500      	bpl.n	c666 <_vfprintf_r+0x5b2>
    c664:	e3ee      	b.n	ce44 <_vfprintf_r+0xd90>
    c666:	0663      	lsls	r3, r4, #25
    c668:	d400      	bmi.n	c66c <_vfprintf_r+0x5b8>
    c66a:	e3eb      	b.n	ce44 <_vfprintf_r+0xd90>
    c66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c66e:	881a      	ldrh	r2, [r3, #0]
    c670:	920c      	str	r2, [sp, #48]	; 0x30
    c672:	2200      	movs	r2, #0
    c674:	3304      	adds	r3, #4
    c676:	920d      	str	r2, [sp, #52]	; 0x34
    c678:	930f      	str	r3, [sp, #60]	; 0x3c
    c67a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c67c:	2300      	movs	r3, #0
    c67e:	e65f      	b.n	c340 <_vfprintf_r+0x28c>
    c680:	9312      	str	r3, [sp, #72]	; 0x48
    c682:	2310      	movs	r3, #16
    c684:	431c      	orrs	r4, r3
    c686:	06a3      	lsls	r3, r4, #26
    c688:	d501      	bpl.n	c68e <_vfprintf_r+0x5da>
    c68a:	f000 fcba 	bl	d002 <_vfprintf_r+0xf4e>
    c68e:	06e3      	lsls	r3, r4, #27
    c690:	d500      	bpl.n	c694 <_vfprintf_r+0x5e0>
    c692:	e3da      	b.n	ce4a <_vfprintf_r+0xd96>
    c694:	0663      	lsls	r3, r4, #25
    c696:	d400      	bmi.n	c69a <_vfprintf_r+0x5e6>
    c698:	e3d7      	b.n	ce4a <_vfprintf_r+0xd96>
    c69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c69c:	881a      	ldrh	r2, [r3, #0]
    c69e:	920c      	str	r2, [sp, #48]	; 0x30
    c6a0:	2200      	movs	r2, #0
    c6a2:	3304      	adds	r3, #4
    c6a4:	920d      	str	r2, [sp, #52]	; 0x34
    c6a6:	930f      	str	r3, [sp, #60]	; 0x3c
    c6a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c6aa:	2301      	movs	r3, #1
    c6ac:	e648      	b.n	c340 <_vfprintf_r+0x28c>
    c6ae:	9312      	str	r3, [sp, #72]	; 0x48
    c6b0:	2900      	cmp	r1, #0
    c6b2:	d001      	beq.n	c6b8 <_vfprintf_r+0x604>
    c6b4:	f001 f857 	bl	d766 <_vfprintf_r+0x16b2>
    c6b8:	4b8a      	ldr	r3, [pc, #552]	; (c8e4 <_vfprintf_r+0x830>)
    c6ba:	9319      	str	r3, [sp, #100]	; 0x64
    c6bc:	e618      	b.n	c2f0 <_vfprintf_r+0x23c>
    c6be:	2301      	movs	r3, #1
    c6c0:	431c      	orrs	r4, r3
    c6c2:	9b07      	ldr	r3, [sp, #28]
    c6c4:	781b      	ldrb	r3, [r3, #0]
    c6c6:	e57e      	b.n	c1c6 <_vfprintf_r+0x112>
    c6c8:	2380      	movs	r3, #128	; 0x80
    c6ca:	431c      	orrs	r4, r3
    c6cc:	9b07      	ldr	r3, [sp, #28]
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	e579      	b.n	c1c6 <_vfprintf_r+0x112>
    c6d2:	9b07      	ldr	r3, [sp, #28]
    c6d4:	781b      	ldrb	r3, [r3, #0]
    c6d6:	2800      	cmp	r0, #0
    c6d8:	d000      	beq.n	c6dc <_vfprintf_r+0x628>
    c6da:	e574      	b.n	c1c6 <_vfprintf_r+0x112>
    c6dc:	2101      	movs	r1, #1
    c6de:	3020      	adds	r0, #32
    c6e0:	e571      	b.n	c1c6 <_vfprintf_r+0x112>
    c6e2:	9312      	str	r3, [sp, #72]	; 0x48
    c6e4:	2900      	cmp	r1, #0
    c6e6:	d001      	beq.n	c6ec <_vfprintf_r+0x638>
    c6e8:	f001 f839 	bl	d75e <_vfprintf_r+0x16aa>
    c6ec:	2207      	movs	r2, #7
    c6ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6f0:	3307      	adds	r3, #7
    c6f2:	4393      	bics	r3, r2
    c6f4:	3201      	adds	r2, #1
    c6f6:	4694      	mov	ip, r2
    c6f8:	449c      	add	ip, r3
    c6fa:	4662      	mov	r2, ip
    c6fc:	920f      	str	r2, [sp, #60]	; 0x3c
    c6fe:	681a      	ldr	r2, [r3, #0]
    c700:	9216      	str	r2, [sp, #88]	; 0x58
    c702:	685b      	ldr	r3, [r3, #4]
    c704:	2201      	movs	r2, #1
    c706:	9315      	str	r3, [sp, #84]	; 0x54
    c708:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c70a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    c70c:	005b      	lsls	r3, r3, #1
    c70e:	085b      	lsrs	r3, r3, #1
    c710:	4698      	mov	r8, r3
    c712:	4252      	negs	r2, r2
    c714:	4b74      	ldr	r3, [pc, #464]	; (c8e8 <_vfprintf_r+0x834>)
    c716:	0028      	movs	r0, r5
    c718:	4641      	mov	r1, r8
    c71a:	f7ff f9d5 	bl	bac8 <__aeabi_dcmpun>
    c71e:	2800      	cmp	r0, #0
    c720:	d001      	beq.n	c726 <_vfprintf_r+0x672>
    c722:	f000 fcb4 	bl	d08e <_vfprintf_r+0xfda>
    c726:	2201      	movs	r2, #1
    c728:	4b6f      	ldr	r3, [pc, #444]	; (c8e8 <_vfprintf_r+0x834>)
    c72a:	4252      	negs	r2, r2
    c72c:	0028      	movs	r0, r5
    c72e:	4641      	mov	r1, r8
    c730:	f7fc fc84 	bl	903c <__aeabi_dcmple>
    c734:	2800      	cmp	r0, #0
    c736:	d001      	beq.n	c73c <_vfprintf_r+0x688>
    c738:	f000 fca9 	bl	d08e <_vfprintf_r+0xfda>
    c73c:	2200      	movs	r2, #0
    c73e:	2300      	movs	r3, #0
    c740:	9816      	ldr	r0, [sp, #88]	; 0x58
    c742:	9915      	ldr	r1, [sp, #84]	; 0x54
    c744:	f7fc fc70 	bl	9028 <__aeabi_dcmplt>
    c748:	2800      	cmp	r0, #0
    c74a:	d001      	beq.n	c750 <_vfprintf_r+0x69c>
    c74c:	f000 fd55 	bl	d1fa <_vfprintf_r+0x1146>
    c750:	ab16      	add	r3, sp, #88	; 0x58
    c752:	7fdb      	ldrb	r3, [r3, #31]
    c754:	4698      	mov	r8, r3
    c756:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c758:	2b47      	cmp	r3, #71	; 0x47
    c75a:	dd01      	ble.n	c760 <_vfprintf_r+0x6ac>
    c75c:	f000 fdb4 	bl	d2c8 <_vfprintf_r+0x1214>
    c760:	4b62      	ldr	r3, [pc, #392]	; (c8ec <_vfprintf_r+0x838>)
    c762:	9311      	str	r3, [sp, #68]	; 0x44
    c764:	2380      	movs	r3, #128	; 0x80
    c766:	439c      	bics	r4, r3
    c768:	3b7d      	subs	r3, #125	; 0x7d
    c76a:	9308      	str	r3, [sp, #32]
    c76c:	930e      	str	r3, [sp, #56]	; 0x38
    c76e:	2300      	movs	r3, #0
    c770:	9409      	str	r4, [sp, #36]	; 0x24
    c772:	469a      	mov	sl, r3
    c774:	9313      	str	r3, [sp, #76]	; 0x4c
    c776:	e612      	b.n	c39e <_vfprintf_r+0x2ea>
    c778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c77a:	1d1a      	adds	r2, r3, #4
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	930b      	str	r3, [sp, #44]	; 0x2c
    c780:	2b00      	cmp	r3, #0
    c782:	da00      	bge.n	c786 <_vfprintf_r+0x6d2>
    c784:	e578      	b.n	c278 <_vfprintf_r+0x1c4>
    c786:	9b07      	ldr	r3, [sp, #28]
    c788:	920f      	str	r2, [sp, #60]	; 0x3c
    c78a:	781b      	ldrb	r3, [r3, #0]
    c78c:	e51b      	b.n	c1c6 <_vfprintf_r+0x112>
    c78e:	9312      	str	r3, [sp, #72]	; 0x48
    c790:	2900      	cmp	r1, #0
    c792:	d001      	beq.n	c798 <_vfprintf_r+0x6e4>
    c794:	f000 ffcc 	bl	d730 <_vfprintf_r+0x167c>
    c798:	2310      	movs	r3, #16
    c79a:	431c      	orrs	r4, r3
    c79c:	e69a      	b.n	c4d4 <_vfprintf_r+0x420>
    c79e:	9312      	str	r3, [sp, #72]	; 0x48
    c7a0:	e771      	b.n	c686 <_vfprintf_r+0x5d2>
    c7a2:	9312      	str	r3, [sp, #72]	; 0x48
    c7a4:	e758      	b.n	c658 <_vfprintf_r+0x5a4>
    c7a6:	9312      	str	r3, [sp, #72]	; 0x48
    c7a8:	2900      	cmp	r1, #0
    c7aa:	d001      	beq.n	c7b0 <_vfprintf_r+0x6fc>
    c7ac:	f000 ffd3 	bl	d756 <_vfprintf_r+0x16a2>
    c7b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	d100      	bne.n	c7b8 <_vfprintf_r+0x704>
    c7b6:	e18d      	b.n	cad4 <_vfprintf_r+0xa20>
    c7b8:	ad28      	add	r5, sp, #160	; 0xa0
    c7ba:	702b      	strb	r3, [r5, #0]
    c7bc:	2300      	movs	r3, #0
    c7be:	aa16      	add	r2, sp, #88	; 0x58
    c7c0:	77d3      	strb	r3, [r2, #31]
    c7c2:	9409      	str	r4, [sp, #36]	; 0x24
    c7c4:	e678      	b.n	c4b8 <_vfprintf_r+0x404>
    c7c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c7c8:	990a      	ldr	r1, [sp, #40]	; 0x28
    c7ca:	6813      	ldr	r3, [r2, #0]
    c7cc:	6019      	str	r1, [r3, #0]
    c7ce:	0013      	movs	r3, r2
    c7d0:	3304      	adds	r3, #4
    c7d2:	930f      	str	r3, [sp, #60]	; 0x3c
    c7d4:	e4bc      	b.n	c150 <_vfprintf_r+0x9c>
    c7d6:	68bc      	ldr	r4, [r7, #8]
    c7d8:	4643      	mov	r3, r8
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d00f      	beq.n	c7fe <_vfprintf_r+0x74a>
    c7de:	aa16      	add	r2, sp, #88	; 0x58
    c7e0:	231f      	movs	r3, #31
    c7e2:	4694      	mov	ip, r2
    c7e4:	4463      	add	r3, ip
    c7e6:	6033      	str	r3, [r6, #0]
    c7e8:	2301      	movs	r3, #1
    c7ea:	6073      	str	r3, [r6, #4]
    c7ec:	687b      	ldr	r3, [r7, #4]
    c7ee:	3401      	adds	r4, #1
    c7f0:	3301      	adds	r3, #1
    c7f2:	60bc      	str	r4, [r7, #8]
    c7f4:	607b      	str	r3, [r7, #4]
    c7f6:	2b07      	cmp	r3, #7
    c7f8:	dd00      	ble.n	c7fc <_vfprintf_r+0x748>
    c7fa:	e203      	b.n	cc04 <_vfprintf_r+0xb50>
    c7fc:	3608      	adds	r6, #8
    c7fe:	464b      	mov	r3, r9
    c800:	2b00      	cmp	r3, #0
    c802:	d00c      	beq.n	c81e <_vfprintf_r+0x76a>
    c804:	ab1e      	add	r3, sp, #120	; 0x78
    c806:	6033      	str	r3, [r6, #0]
    c808:	2302      	movs	r3, #2
    c80a:	6073      	str	r3, [r6, #4]
    c80c:	687b      	ldr	r3, [r7, #4]
    c80e:	3402      	adds	r4, #2
    c810:	3301      	adds	r3, #1
    c812:	60bc      	str	r4, [r7, #8]
    c814:	607b      	str	r3, [r7, #4]
    c816:	2b07      	cmp	r3, #7
    c818:	dd00      	ble.n	c81c <_vfprintf_r+0x768>
    c81a:	e1fd      	b.n	cc18 <_vfprintf_r+0xb64>
    c81c:	3608      	adds	r6, #8
    c81e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c820:	2b80      	cmp	r3, #128	; 0x80
    c822:	d100      	bne.n	c826 <_vfprintf_r+0x772>
    c824:	e173      	b.n	cb0e <_vfprintf_r+0xa5a>
    c826:	4653      	mov	r3, sl
    c828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c82a:	1a9d      	subs	r5, r3, r2
    c82c:	2d00      	cmp	r5, #0
    c82e:	dd32      	ble.n	c896 <_vfprintf_r+0x7e2>
    c830:	4a2f      	ldr	r2, [pc, #188]	; (c8f0 <_vfprintf_r+0x83c>)
    c832:	687b      	ldr	r3, [r7, #4]
    c834:	4691      	mov	r9, r2
    c836:	2d10      	cmp	r5, #16
    c838:	dd22      	ble.n	c880 <_vfprintf_r+0x7cc>
    c83a:	2210      	movs	r2, #16
    c83c:	4692      	mov	sl, r2
    c83e:	0022      	movs	r2, r4
    c840:	465c      	mov	r4, fp
    c842:	e003      	b.n	c84c <_vfprintf_r+0x798>
    c844:	3d10      	subs	r5, #16
    c846:	3608      	adds	r6, #8
    c848:	2d10      	cmp	r5, #16
    c84a:	dd17      	ble.n	c87c <_vfprintf_r+0x7c8>
    c84c:	4649      	mov	r1, r9
    c84e:	6031      	str	r1, [r6, #0]
    c850:	4651      	mov	r1, sl
    c852:	3210      	adds	r2, #16
    c854:	3301      	adds	r3, #1
    c856:	6071      	str	r1, [r6, #4]
    c858:	60ba      	str	r2, [r7, #8]
    c85a:	607b      	str	r3, [r7, #4]
    c85c:	2b07      	cmp	r3, #7
    c85e:	ddf1      	ble.n	c844 <_vfprintf_r+0x790>
    c860:	003a      	movs	r2, r7
    c862:	0021      	movs	r1, r4
    c864:	9806      	ldr	r0, [sp, #24]
    c866:	f003 fef7 	bl	10658 <__sprint_r>
    c86a:	2800      	cmp	r0, #0
    c86c:	d000      	beq.n	c870 <_vfprintf_r+0x7bc>
    c86e:	e18a      	b.n	cb86 <_vfprintf_r+0xad2>
    c870:	3d10      	subs	r5, #16
    c872:	68ba      	ldr	r2, [r7, #8]
    c874:	687b      	ldr	r3, [r7, #4]
    c876:	ae32      	add	r6, sp, #200	; 0xc8
    c878:	2d10      	cmp	r5, #16
    c87a:	dce7      	bgt.n	c84c <_vfprintf_r+0x798>
    c87c:	46a3      	mov	fp, r4
    c87e:	0014      	movs	r4, r2
    c880:	464a      	mov	r2, r9
    c882:	1964      	adds	r4, r4, r5
    c884:	3301      	adds	r3, #1
    c886:	6032      	str	r2, [r6, #0]
    c888:	6075      	str	r5, [r6, #4]
    c88a:	60bc      	str	r4, [r7, #8]
    c88c:	607b      	str	r3, [r7, #4]
    c88e:	2b07      	cmp	r3, #7
    c890:	dd00      	ble.n	c894 <_vfprintf_r+0x7e0>
    c892:	e1ad      	b.n	cbf0 <_vfprintf_r+0xb3c>
    c894:	3608      	adds	r6, #8
    c896:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c898:	05db      	lsls	r3, r3, #23
    c89a:	d500      	bpl.n	c89e <_vfprintf_r+0x7ea>
    c89c:	e0be      	b.n	ca1c <_vfprintf_r+0x968>
    c89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c8a0:	6033      	str	r3, [r6, #0]
    c8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8a4:	469c      	mov	ip, r3
    c8a6:	6073      	str	r3, [r6, #4]
    c8a8:	687b      	ldr	r3, [r7, #4]
    c8aa:	4464      	add	r4, ip
    c8ac:	3301      	adds	r3, #1
    c8ae:	60bc      	str	r4, [r7, #8]
    c8b0:	607b      	str	r3, [r7, #4]
    c8b2:	2b07      	cmp	r3, #7
    c8b4:	dd00      	ble.n	c8b8 <_vfprintf_r+0x804>
    c8b6:	e0a6      	b.n	ca06 <_vfprintf_r+0x952>
    c8b8:	3608      	adds	r6, #8
    c8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8bc:	075b      	lsls	r3, r3, #29
    c8be:	d54a      	bpl.n	c956 <_vfprintf_r+0x8a2>
    c8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8c2:	9a08      	ldr	r2, [sp, #32]
    c8c4:	1a9d      	subs	r5, r3, r2
    c8c6:	2d00      	cmp	r5, #0
    c8c8:	dd45      	ble.n	c956 <_vfprintf_r+0x8a2>
    c8ca:	4a0a      	ldr	r2, [pc, #40]	; (c8f4 <_vfprintf_r+0x840>)
    c8cc:	687b      	ldr	r3, [r7, #4]
    c8ce:	4690      	mov	r8, r2
    c8d0:	2d10      	cmp	r5, #16
    c8d2:	dd2f      	ble.n	c934 <_vfprintf_r+0x880>
    c8d4:	2210      	movs	r2, #16
    c8d6:	4691      	mov	r9, r2
    c8d8:	0022      	movs	r2, r4
    c8da:	465c      	mov	r4, fp
    c8dc:	e010      	b.n	c900 <_vfprintf_r+0x84c>
    c8de:	46c0      	nop			; (mov r8, r8)
    c8e0:	0001146c 	.word	0x0001146c
    c8e4:	00011458 	.word	0x00011458
    c8e8:	7fefffff 	.word	0x7fefffff
    c8ec:	00011450 	.word	0x00011450
    c8f0:	0001149c 	.word	0x0001149c
    c8f4:	0001148c 	.word	0x0001148c
    c8f8:	3d10      	subs	r5, #16
    c8fa:	3608      	adds	r6, #8
    c8fc:	2d10      	cmp	r5, #16
    c8fe:	dd17      	ble.n	c930 <_vfprintf_r+0x87c>
    c900:	49d1      	ldr	r1, [pc, #836]	; (cc48 <_vfprintf_r+0xb94>)
    c902:	3210      	adds	r2, #16
    c904:	6031      	str	r1, [r6, #0]
    c906:	4649      	mov	r1, r9
    c908:	3301      	adds	r3, #1
    c90a:	6071      	str	r1, [r6, #4]
    c90c:	60ba      	str	r2, [r7, #8]
    c90e:	607b      	str	r3, [r7, #4]
    c910:	2b07      	cmp	r3, #7
    c912:	ddf1      	ble.n	c8f8 <_vfprintf_r+0x844>
    c914:	003a      	movs	r2, r7
    c916:	0021      	movs	r1, r4
    c918:	9806      	ldr	r0, [sp, #24]
    c91a:	f003 fe9d 	bl	10658 <__sprint_r>
    c91e:	2800      	cmp	r0, #0
    c920:	d000      	beq.n	c924 <_vfprintf_r+0x870>
    c922:	e130      	b.n	cb86 <_vfprintf_r+0xad2>
    c924:	3d10      	subs	r5, #16
    c926:	68ba      	ldr	r2, [r7, #8]
    c928:	687b      	ldr	r3, [r7, #4]
    c92a:	ae32      	add	r6, sp, #200	; 0xc8
    c92c:	2d10      	cmp	r5, #16
    c92e:	dce7      	bgt.n	c900 <_vfprintf_r+0x84c>
    c930:	46a3      	mov	fp, r4
    c932:	0014      	movs	r4, r2
    c934:	4642      	mov	r2, r8
    c936:	1964      	adds	r4, r4, r5
    c938:	3301      	adds	r3, #1
    c93a:	c624      	stmia	r6!, {r2, r5}
    c93c:	60bc      	str	r4, [r7, #8]
    c93e:	607b      	str	r3, [r7, #4]
    c940:	2b07      	cmp	r3, #7
    c942:	dd08      	ble.n	c956 <_vfprintf_r+0x8a2>
    c944:	003a      	movs	r2, r7
    c946:	4659      	mov	r1, fp
    c948:	9806      	ldr	r0, [sp, #24]
    c94a:	f003 fe85 	bl	10658 <__sprint_r>
    c94e:	2800      	cmp	r0, #0
    c950:	d000      	beq.n	c954 <_vfprintf_r+0x8a0>
    c952:	e13f      	b.n	cbd4 <_vfprintf_r+0xb20>
    c954:	68bc      	ldr	r4, [r7, #8]
    c956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c958:	9908      	ldr	r1, [sp, #32]
    c95a:	428b      	cmp	r3, r1
    c95c:	da00      	bge.n	c960 <_vfprintf_r+0x8ac>
    c95e:	000b      	movs	r3, r1
    c960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c962:	4694      	mov	ip, r2
    c964:	449c      	add	ip, r3
    c966:	4663      	mov	r3, ip
    c968:	930a      	str	r3, [sp, #40]	; 0x28
    c96a:	2c00      	cmp	r4, #0
    c96c:	d000      	beq.n	c970 <_vfprintf_r+0x8bc>
    c96e:	e129      	b.n	cbc4 <_vfprintf_r+0xb10>
    c970:	2300      	movs	r3, #0
    c972:	ae32      	add	r6, sp, #200	; 0xc8
    c974:	607b      	str	r3, [r7, #4]
    c976:	f7ff fbeb 	bl	c150 <_vfprintf_r+0x9c>
    c97a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c97c:	2b01      	cmp	r3, #1
    c97e:	dc00      	bgt.n	c982 <_vfprintf_r+0x8ce>
    c980:	e103      	b.n	cb8a <_vfprintf_r+0xad6>
    c982:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c984:	3401      	adds	r4, #1
    c986:	6033      	str	r3, [r6, #0]
    c988:	2301      	movs	r3, #1
    c98a:	6073      	str	r3, [r6, #4]
    c98c:	687b      	ldr	r3, [r7, #4]
    c98e:	60bc      	str	r4, [r7, #8]
    c990:	3301      	adds	r3, #1
    c992:	607b      	str	r3, [r7, #4]
    c994:	2b07      	cmp	r3, #7
    c996:	dd00      	ble.n	c99a <_vfprintf_r+0x8e6>
    c998:	e2ef      	b.n	cf7a <_vfprintf_r+0xec6>
    c99a:	3608      	adds	r6, #8
    c99c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c99e:	3301      	adds	r3, #1
    c9a0:	6032      	str	r2, [r6, #0]
    c9a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c9a4:	4698      	mov	r8, r3
    c9a6:	4694      	mov	ip, r2
    c9a8:	4464      	add	r4, ip
    c9aa:	6072      	str	r2, [r6, #4]
    c9ac:	60bc      	str	r4, [r7, #8]
    c9ae:	607b      	str	r3, [r7, #4]
    c9b0:	2b07      	cmp	r3, #7
    c9b2:	dd00      	ble.n	c9b6 <_vfprintf_r+0x902>
    c9b4:	e318      	b.n	cfe8 <_vfprintf_r+0xf34>
    c9b6:	3608      	adds	r6, #8
    c9b8:	2200      	movs	r2, #0
    c9ba:	2300      	movs	r3, #0
    c9bc:	9816      	ldr	r0, [sp, #88]	; 0x58
    c9be:	9915      	ldr	r1, [sp, #84]	; 0x54
    c9c0:	f7fc fb2c 	bl	901c <__aeabi_dcmpeq>
    c9c4:	2800      	cmp	r0, #0
    c9c6:	d000      	beq.n	c9ca <_vfprintf_r+0x916>
    c9c8:	e1f4      	b.n	cdb4 <_vfprintf_r+0xd00>
    c9ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
    c9cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c9ce:	3501      	adds	r5, #1
    c9d0:	3b01      	subs	r3, #1
    c9d2:	6035      	str	r5, [r6, #0]
    c9d4:	6073      	str	r3, [r6, #4]
    c9d6:	18e4      	adds	r4, r4, r3
    c9d8:	2301      	movs	r3, #1
    c9da:	469c      	mov	ip, r3
    c9dc:	44e0      	add	r8, ip
    c9de:	4643      	mov	r3, r8
    c9e0:	60bc      	str	r4, [r7, #8]
    c9e2:	607b      	str	r3, [r7, #4]
    c9e4:	2b07      	cmp	r3, #7
    c9e6:	dd00      	ble.n	c9ea <_vfprintf_r+0x936>
    c9e8:	e0e0      	b.n	cbac <_vfprintf_r+0xaf8>
    c9ea:	3608      	adds	r6, #8
    c9ec:	ab21      	add	r3, sp, #132	; 0x84
    c9ee:	6033      	str	r3, [r6, #0]
    c9f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c9f2:	469c      	mov	ip, r3
    c9f4:	6073      	str	r3, [r6, #4]
    c9f6:	4643      	mov	r3, r8
    c9f8:	4464      	add	r4, ip
    c9fa:	3301      	adds	r3, #1
    c9fc:	60bc      	str	r4, [r7, #8]
    c9fe:	607b      	str	r3, [r7, #4]
    ca00:	2b07      	cmp	r3, #7
    ca02:	dc00      	bgt.n	ca06 <_vfprintf_r+0x952>
    ca04:	e758      	b.n	c8b8 <_vfprintf_r+0x804>
    ca06:	003a      	movs	r2, r7
    ca08:	4659      	mov	r1, fp
    ca0a:	9806      	ldr	r0, [sp, #24]
    ca0c:	f003 fe24 	bl	10658 <__sprint_r>
    ca10:	2800      	cmp	r0, #0
    ca12:	d000      	beq.n	ca16 <_vfprintf_r+0x962>
    ca14:	e0de      	b.n	cbd4 <_vfprintf_r+0xb20>
    ca16:	68bc      	ldr	r4, [r7, #8]
    ca18:	ae32      	add	r6, sp, #200	; 0xc8
    ca1a:	e74e      	b.n	c8ba <_vfprintf_r+0x806>
    ca1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ca1e:	2b65      	cmp	r3, #101	; 0x65
    ca20:	ddab      	ble.n	c97a <_vfprintf_r+0x8c6>
    ca22:	2200      	movs	r2, #0
    ca24:	2300      	movs	r3, #0
    ca26:	9816      	ldr	r0, [sp, #88]	; 0x58
    ca28:	9915      	ldr	r1, [sp, #84]	; 0x54
    ca2a:	f7fc faf7 	bl	901c <__aeabi_dcmpeq>
    ca2e:	2800      	cmp	r0, #0
    ca30:	d100      	bne.n	ca34 <_vfprintf_r+0x980>
    ca32:	e134      	b.n	cc9e <_vfprintf_r+0xbea>
    ca34:	4b85      	ldr	r3, [pc, #532]	; (cc4c <_vfprintf_r+0xb98>)
    ca36:	3401      	adds	r4, #1
    ca38:	6033      	str	r3, [r6, #0]
    ca3a:	2301      	movs	r3, #1
    ca3c:	6073      	str	r3, [r6, #4]
    ca3e:	687b      	ldr	r3, [r7, #4]
    ca40:	60bc      	str	r4, [r7, #8]
    ca42:	3301      	adds	r3, #1
    ca44:	607b      	str	r3, [r7, #4]
    ca46:	2b07      	cmp	r3, #7
    ca48:	dd00      	ble.n	ca4c <_vfprintf_r+0x998>
    ca4a:	e3dc      	b.n	d206 <_vfprintf_r+0x1152>
    ca4c:	3608      	adds	r6, #8
    ca4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ca50:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ca52:	4293      	cmp	r3, r2
    ca54:	db03      	blt.n	ca5e <_vfprintf_r+0x9aa>
    ca56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca58:	07db      	lsls	r3, r3, #31
    ca5a:	d400      	bmi.n	ca5e <_vfprintf_r+0x9aa>
    ca5c:	e3b7      	b.n	d1ce <_vfprintf_r+0x111a>
    ca5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ca60:	68ba      	ldr	r2, [r7, #8]
    ca62:	6033      	str	r3, [r6, #0]
    ca64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ca66:	469c      	mov	ip, r3
    ca68:	6073      	str	r3, [r6, #4]
    ca6a:	687b      	ldr	r3, [r7, #4]
    ca6c:	4462      	add	r2, ip
    ca6e:	3301      	adds	r3, #1
    ca70:	0014      	movs	r4, r2
    ca72:	60ba      	str	r2, [r7, #8]
    ca74:	607b      	str	r3, [r7, #4]
    ca76:	2b07      	cmp	r3, #7
    ca78:	dd01      	ble.n	ca7e <_vfprintf_r+0x9ca>
    ca7a:	f000 fc19 	bl	d2b0 <_vfprintf_r+0x11fc>
    ca7e:	3608      	adds	r6, #8
    ca80:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ca82:	1e5d      	subs	r5, r3, #1
    ca84:	2d00      	cmp	r5, #0
    ca86:	dc00      	bgt.n	ca8a <_vfprintf_r+0x9d6>
    ca88:	e717      	b.n	c8ba <_vfprintf_r+0x806>
    ca8a:	4a71      	ldr	r2, [pc, #452]	; (cc50 <_vfprintf_r+0xb9c>)
    ca8c:	687b      	ldr	r3, [r7, #4]
    ca8e:	4691      	mov	r9, r2
    ca90:	2d10      	cmp	r5, #16
    ca92:	dc00      	bgt.n	ca96 <_vfprintf_r+0x9e2>
    ca94:	e1c3      	b.n	ce1e <_vfprintf_r+0xd6a>
    ca96:	2210      	movs	r2, #16
    ca98:	4690      	mov	r8, r2
    ca9a:	0022      	movs	r2, r4
    ca9c:	464c      	mov	r4, r9
    ca9e:	46d9      	mov	r9, fp
    caa0:	e004      	b.n	caac <_vfprintf_r+0x9f8>
    caa2:	3608      	adds	r6, #8
    caa4:	3d10      	subs	r5, #16
    caa6:	2d10      	cmp	r5, #16
    caa8:	dc00      	bgt.n	caac <_vfprintf_r+0x9f8>
    caaa:	e37c      	b.n	d1a6 <_vfprintf_r+0x10f2>
    caac:	4641      	mov	r1, r8
    caae:	3210      	adds	r2, #16
    cab0:	3301      	adds	r3, #1
    cab2:	6034      	str	r4, [r6, #0]
    cab4:	6071      	str	r1, [r6, #4]
    cab6:	60ba      	str	r2, [r7, #8]
    cab8:	607b      	str	r3, [r7, #4]
    caba:	2b07      	cmp	r3, #7
    cabc:	ddf1      	ble.n	caa2 <_vfprintf_r+0x9ee>
    cabe:	003a      	movs	r2, r7
    cac0:	4649      	mov	r1, r9
    cac2:	9806      	ldr	r0, [sp, #24]
    cac4:	f003 fdc8 	bl	10658 <__sprint_r>
    cac8:	2800      	cmp	r0, #0
    caca:	d10b      	bne.n	cae4 <_vfprintf_r+0xa30>
    cacc:	68ba      	ldr	r2, [r7, #8]
    cace:	687b      	ldr	r3, [r7, #4]
    cad0:	ae32      	add	r6, sp, #200	; 0xc8
    cad2:	e7e7      	b.n	caa4 <_vfprintf_r+0x9f0>
    cad4:	68bb      	ldr	r3, [r7, #8]
    cad6:	46d9      	mov	r9, fp
    cad8:	2b00      	cmp	r3, #0
    cada:	d001      	beq.n	cae0 <_vfprintf_r+0xa2c>
    cadc:	f000 fd4c 	bl	d578 <_vfprintf_r+0x14c4>
    cae0:	2300      	movs	r3, #0
    cae2:	607b      	str	r3, [r7, #4]
    cae4:	464b      	mov	r3, r9
    cae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    cae8:	07db      	lsls	r3, r3, #31
    caea:	d40d      	bmi.n	cb08 <_vfprintf_r+0xa54>
    caec:	464b      	mov	r3, r9
    caee:	899b      	ldrh	r3, [r3, #12]
    caf0:	059a      	lsls	r2, r3, #22
    caf2:	d505      	bpl.n	cb00 <_vfprintf_r+0xa4c>
    caf4:	065b      	lsls	r3, r3, #25
    caf6:	d401      	bmi.n	cafc <_vfprintf_r+0xa48>
    caf8:	f7ff fb8d 	bl	c216 <_vfprintf_r+0x162>
    cafc:	f7ff fb88 	bl	c210 <_vfprintf_r+0x15c>
    cb00:	464b      	mov	r3, r9
    cb02:	6d98      	ldr	r0, [r3, #88]	; 0x58
    cb04:	f002 fc32 	bl	f36c <__retarget_lock_release_recursive>
    cb08:	464b      	mov	r3, r9
    cb0a:	899b      	ldrh	r3, [r3, #12]
    cb0c:	e7f2      	b.n	caf4 <_vfprintf_r+0xa40>
    cb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb10:	9a08      	ldr	r2, [sp, #32]
    cb12:	1a9d      	subs	r5, r3, r2
    cb14:	2d00      	cmp	r5, #0
    cb16:	dc00      	bgt.n	cb1a <_vfprintf_r+0xa66>
    cb18:	e685      	b.n	c826 <_vfprintf_r+0x772>
    cb1a:	4a4d      	ldr	r2, [pc, #308]	; (cc50 <_vfprintf_r+0xb9c>)
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	4691      	mov	r9, r2
    cb20:	2d10      	cmp	r5, #16
    cb22:	dd24      	ble.n	cb6e <_vfprintf_r+0xaba>
    cb24:	2210      	movs	r2, #16
    cb26:	0021      	movs	r1, r4
    cb28:	4690      	mov	r8, r2
    cb2a:	465c      	mov	r4, fp
    cb2c:	0032      	movs	r2, r6
    cb2e:	464e      	mov	r6, r9
    cb30:	e003      	b.n	cb3a <_vfprintf_r+0xa86>
    cb32:	3d10      	subs	r5, #16
    cb34:	3208      	adds	r2, #8
    cb36:	2d10      	cmp	r5, #16
    cb38:	dd15      	ble.n	cb66 <_vfprintf_r+0xab2>
    cb3a:	4640      	mov	r0, r8
    cb3c:	3110      	adds	r1, #16
    cb3e:	3301      	adds	r3, #1
    cb40:	6016      	str	r6, [r2, #0]
    cb42:	6050      	str	r0, [r2, #4]
    cb44:	60b9      	str	r1, [r7, #8]
    cb46:	607b      	str	r3, [r7, #4]
    cb48:	2b07      	cmp	r3, #7
    cb4a:	ddf2      	ble.n	cb32 <_vfprintf_r+0xa7e>
    cb4c:	003a      	movs	r2, r7
    cb4e:	0021      	movs	r1, r4
    cb50:	9806      	ldr	r0, [sp, #24]
    cb52:	f003 fd81 	bl	10658 <__sprint_r>
    cb56:	2800      	cmp	r0, #0
    cb58:	d115      	bne.n	cb86 <_vfprintf_r+0xad2>
    cb5a:	3d10      	subs	r5, #16
    cb5c:	68b9      	ldr	r1, [r7, #8]
    cb5e:	687b      	ldr	r3, [r7, #4]
    cb60:	aa32      	add	r2, sp, #200	; 0xc8
    cb62:	2d10      	cmp	r5, #16
    cb64:	dce9      	bgt.n	cb3a <_vfprintf_r+0xa86>
    cb66:	46a3      	mov	fp, r4
    cb68:	46b1      	mov	r9, r6
    cb6a:	000c      	movs	r4, r1
    cb6c:	0016      	movs	r6, r2
    cb6e:	464a      	mov	r2, r9
    cb70:	1964      	adds	r4, r4, r5
    cb72:	3301      	adds	r3, #1
    cb74:	6032      	str	r2, [r6, #0]
    cb76:	6075      	str	r5, [r6, #4]
    cb78:	60bc      	str	r4, [r7, #8]
    cb7a:	607b      	str	r3, [r7, #4]
    cb7c:	2b07      	cmp	r3, #7
    cb7e:	dd00      	ble.n	cb82 <_vfprintf_r+0xace>
    cb80:	e263      	b.n	d04a <_vfprintf_r+0xf96>
    cb82:	3608      	adds	r6, #8
    cb84:	e64f      	b.n	c826 <_vfprintf_r+0x772>
    cb86:	46a1      	mov	r9, r4
    cb88:	e7ac      	b.n	cae4 <_vfprintf_r+0xa30>
    cb8a:	2301      	movs	r3, #1
    cb8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb8e:	4213      	tst	r3, r2
    cb90:	d000      	beq.n	cb94 <_vfprintf_r+0xae0>
    cb92:	e6f6      	b.n	c982 <_vfprintf_r+0x8ce>
    cb94:	6073      	str	r3, [r6, #4]
    cb96:	687b      	ldr	r3, [r7, #4]
    cb98:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cb9a:	3301      	adds	r3, #1
    cb9c:	3401      	adds	r4, #1
    cb9e:	6032      	str	r2, [r6, #0]
    cba0:	60bc      	str	r4, [r7, #8]
    cba2:	4698      	mov	r8, r3
    cba4:	607b      	str	r3, [r7, #4]
    cba6:	2b07      	cmp	r3, #7
    cba8:	dc00      	bgt.n	cbac <_vfprintf_r+0xaf8>
    cbaa:	e71e      	b.n	c9ea <_vfprintf_r+0x936>
    cbac:	003a      	movs	r2, r7
    cbae:	4659      	mov	r1, fp
    cbb0:	9806      	ldr	r0, [sp, #24]
    cbb2:	f003 fd51 	bl	10658 <__sprint_r>
    cbb6:	2800      	cmp	r0, #0
    cbb8:	d10c      	bne.n	cbd4 <_vfprintf_r+0xb20>
    cbba:	687b      	ldr	r3, [r7, #4]
    cbbc:	68bc      	ldr	r4, [r7, #8]
    cbbe:	4698      	mov	r8, r3
    cbc0:	ae32      	add	r6, sp, #200	; 0xc8
    cbc2:	e713      	b.n	c9ec <_vfprintf_r+0x938>
    cbc4:	003a      	movs	r2, r7
    cbc6:	4659      	mov	r1, fp
    cbc8:	9806      	ldr	r0, [sp, #24]
    cbca:	f003 fd45 	bl	10658 <__sprint_r>
    cbce:	2800      	cmp	r0, #0
    cbd0:	d100      	bne.n	cbd4 <_vfprintf_r+0xb20>
    cbd2:	e6cd      	b.n	c970 <_vfprintf_r+0x8bc>
    cbd4:	46d9      	mov	r9, fp
    cbd6:	e785      	b.n	cae4 <_vfprintf_r+0xa30>
    cbd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cbda:	2b01      	cmp	r3, #1
    cbdc:	d100      	bne.n	cbe0 <_vfprintf_r+0xb2c>
    cbde:	e148      	b.n	ce72 <_vfprintf_r+0xdbe>
    cbe0:	2b02      	cmp	r3, #2
    cbe2:	d123      	bne.n	cc2c <_vfprintf_r+0xb78>
    cbe4:	9409      	str	r4, [sp, #36]	; 0x24
    cbe6:	2300      	movs	r3, #0
    cbe8:	2400      	movs	r4, #0
    cbea:	930c      	str	r3, [sp, #48]	; 0x30
    cbec:	940d      	str	r4, [sp, #52]	; 0x34
    cbee:	e4a1      	b.n	c534 <_vfprintf_r+0x480>
    cbf0:	003a      	movs	r2, r7
    cbf2:	4659      	mov	r1, fp
    cbf4:	9806      	ldr	r0, [sp, #24]
    cbf6:	f003 fd2f 	bl	10658 <__sprint_r>
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d1ea      	bne.n	cbd4 <_vfprintf_r+0xb20>
    cbfe:	68bc      	ldr	r4, [r7, #8]
    cc00:	ae32      	add	r6, sp, #200	; 0xc8
    cc02:	e648      	b.n	c896 <_vfprintf_r+0x7e2>
    cc04:	003a      	movs	r2, r7
    cc06:	4659      	mov	r1, fp
    cc08:	9806      	ldr	r0, [sp, #24]
    cc0a:	f003 fd25 	bl	10658 <__sprint_r>
    cc0e:	2800      	cmp	r0, #0
    cc10:	d1e0      	bne.n	cbd4 <_vfprintf_r+0xb20>
    cc12:	68bc      	ldr	r4, [r7, #8]
    cc14:	ae32      	add	r6, sp, #200	; 0xc8
    cc16:	e5f2      	b.n	c7fe <_vfprintf_r+0x74a>
    cc18:	003a      	movs	r2, r7
    cc1a:	4659      	mov	r1, fp
    cc1c:	9806      	ldr	r0, [sp, #24]
    cc1e:	f003 fd1b 	bl	10658 <__sprint_r>
    cc22:	2800      	cmp	r0, #0
    cc24:	d1d6      	bne.n	cbd4 <_vfprintf_r+0xb20>
    cc26:	68bc      	ldr	r4, [r7, #8]
    cc28:	ae32      	add	r6, sp, #200	; 0xc8
    cc2a:	e5f8      	b.n	c81e <_vfprintf_r+0x76a>
    cc2c:	9409      	str	r4, [sp, #36]	; 0x24
    cc2e:	2300      	movs	r3, #0
    cc30:	2400      	movs	r4, #0
    cc32:	930c      	str	r3, [sp, #48]	; 0x30
    cc34:	940d      	str	r4, [sp, #52]	; 0x34
    cc36:	980c      	ldr	r0, [sp, #48]	; 0x30
    cc38:	990d      	ldr	r1, [sp, #52]	; 0x34
    cc3a:	4653      	mov	r3, sl
    cc3c:	aa32      	add	r2, sp, #200	; 0xc8
    cc3e:	4691      	mov	r9, r2
    cc40:	9308      	str	r3, [sp, #32]
    cc42:	46b2      	mov	sl, r6
    cc44:	e007      	b.n	cc56 <_vfprintf_r+0xba2>
    cc46:	46c0      	nop			; (mov r8, r8)
    cc48:	0001148c 	.word	0x0001148c
    cc4c:	00011488 	.word	0x00011488
    cc50:	0001149c 	.word	0x0001149c
    cc54:	46a1      	mov	r9, r4
    cc56:	074a      	lsls	r2, r1, #29
    cc58:	4694      	mov	ip, r2
    cc5a:	464b      	mov	r3, r9
    cc5c:	4665      	mov	r5, ip
    cc5e:	1e5c      	subs	r4, r3, #1
    cc60:	08c6      	lsrs	r6, r0, #3
    cc62:	2307      	movs	r3, #7
    cc64:	08ca      	lsrs	r2, r1, #3
    cc66:	4335      	orrs	r5, r6
    cc68:	0011      	movs	r1, r2
    cc6a:	002a      	movs	r2, r5
    cc6c:	4003      	ands	r3, r0
    cc6e:	3330      	adds	r3, #48	; 0x30
    cc70:	7023      	strb	r3, [r4, #0]
    cc72:	0028      	movs	r0, r5
    cc74:	430a      	orrs	r2, r1
    cc76:	d1ed      	bne.n	cc54 <_vfprintf_r+0xba0>
    cc78:	900c      	str	r0, [sp, #48]	; 0x30
    cc7a:	910d      	str	r1, [sp, #52]	; 0x34
    cc7c:	9908      	ldr	r1, [sp, #32]
    cc7e:	4656      	mov	r6, sl
    cc80:	468a      	mov	sl, r1
    cc82:	9909      	ldr	r1, [sp, #36]	; 0x24
    cc84:	464a      	mov	r2, r9
    cc86:	9411      	str	r4, [sp, #68]	; 0x44
    cc88:	07c9      	lsls	r1, r1, #31
    cc8a:	d500      	bpl.n	cc8e <_vfprintf_r+0xbda>
    cc8c:	e0e0      	b.n	ce50 <_vfprintf_r+0xd9c>
    cc8e:	ab32      	add	r3, sp, #200	; 0xc8
    cc90:	1b1b      	subs	r3, r3, r4
    cc92:	930e      	str	r3, [sp, #56]	; 0x38
    cc94:	f7ff fb7b 	bl	c38e <_vfprintf_r+0x2da>
    cc98:	9c07      	ldr	r4, [sp, #28]
    cc9a:	f7ff fa7d 	bl	c198 <_vfprintf_r+0xe4>
    cc9e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cca0:	2800      	cmp	r0, #0
    cca2:	dc00      	bgt.n	cca6 <_vfprintf_r+0xbf2>
    cca4:	e2b9      	b.n	d21a <_vfprintf_r+0x1166>
    cca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cca8:	9914      	ldr	r1, [sp, #80]	; 0x50
    ccaa:	0013      	movs	r3, r2
    ccac:	4690      	mov	r8, r2
    ccae:	428b      	cmp	r3, r1
    ccb0:	dd00      	ble.n	ccb4 <_vfprintf_r+0xc00>
    ccb2:	4688      	mov	r8, r1
    ccb4:	4643      	mov	r3, r8
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	dd0c      	ble.n	ccd4 <_vfprintf_r+0xc20>
    ccba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ccbc:	4444      	add	r4, r8
    ccbe:	6033      	str	r3, [r6, #0]
    ccc0:	4643      	mov	r3, r8
    ccc2:	6073      	str	r3, [r6, #4]
    ccc4:	687b      	ldr	r3, [r7, #4]
    ccc6:	60bc      	str	r4, [r7, #8]
    ccc8:	3301      	adds	r3, #1
    ccca:	607b      	str	r3, [r7, #4]
    cccc:	2b07      	cmp	r3, #7
    ccce:	dd00      	ble.n	ccd2 <_vfprintf_r+0xc1e>
    ccd0:	e389      	b.n	d3e6 <_vfprintf_r+0x1332>
    ccd2:	3608      	adds	r6, #8
    ccd4:	4643      	mov	r3, r8
    ccd6:	43db      	mvns	r3, r3
    ccd8:	4642      	mov	r2, r8
    ccda:	17db      	asrs	r3, r3, #31
    ccdc:	4013      	ands	r3, r2
    ccde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cce0:	1ad3      	subs	r3, r2, r3
    cce2:	4698      	mov	r8, r3
    cce4:	2b00      	cmp	r3, #0
    cce6:	dc00      	bgt.n	ccea <_vfprintf_r+0xc36>
    cce8:	e0eb      	b.n	cec2 <_vfprintf_r+0xe0e>
    ccea:	2b10      	cmp	r3, #16
    ccec:	dc01      	bgt.n	ccf2 <_vfprintf_r+0xc3e>
    ccee:	f000 fcd9 	bl	d6a4 <_vfprintf_r+0x15f0>
    ccf2:	4adc      	ldr	r2, [pc, #880]	; (d064 <_vfprintf_r+0xfb0>)
    ccf4:	687b      	ldr	r3, [r7, #4]
    ccf6:	4691      	mov	r9, r2
    ccf8:	2210      	movs	r2, #16
    ccfa:	464d      	mov	r5, r9
    ccfc:	4692      	mov	sl, r2
    ccfe:	0022      	movs	r2, r4
    cd00:	4644      	mov	r4, r8
    cd02:	46d8      	mov	r8, fp
    cd04:	e004      	b.n	cd10 <_vfprintf_r+0xc5c>
    cd06:	3608      	adds	r6, #8
    cd08:	3c10      	subs	r4, #16
    cd0a:	2c10      	cmp	r4, #16
    cd0c:	dc00      	bgt.n	cd10 <_vfprintf_r+0xc5c>
    cd0e:	e0bf      	b.n	ce90 <_vfprintf_r+0xddc>
    cd10:	4651      	mov	r1, sl
    cd12:	3210      	adds	r2, #16
    cd14:	3301      	adds	r3, #1
    cd16:	6035      	str	r5, [r6, #0]
    cd18:	6071      	str	r1, [r6, #4]
    cd1a:	60ba      	str	r2, [r7, #8]
    cd1c:	607b      	str	r3, [r7, #4]
    cd1e:	2b07      	cmp	r3, #7
    cd20:	ddf1      	ble.n	cd06 <_vfprintf_r+0xc52>
    cd22:	003a      	movs	r2, r7
    cd24:	4641      	mov	r1, r8
    cd26:	9806      	ldr	r0, [sp, #24]
    cd28:	f003 fc96 	bl	10658 <__sprint_r>
    cd2c:	2800      	cmp	r0, #0
    cd2e:	d000      	beq.n	cd32 <_vfprintf_r+0xc7e>
    cd30:	e3b6      	b.n	d4a0 <_vfprintf_r+0x13ec>
    cd32:	68ba      	ldr	r2, [r7, #8]
    cd34:	687b      	ldr	r3, [r7, #4]
    cd36:	ae32      	add	r6, sp, #200	; 0xc8
    cd38:	e7e6      	b.n	cd08 <_vfprintf_r+0xc54>
    cd3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	d100      	bne.n	cd42 <_vfprintf_r+0xc8e>
    cd40:	e092      	b.n	ce68 <_vfprintf_r+0xdb4>
    cd42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cd44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cd46:	ab32      	add	r3, sp, #200	; 0xc8
    cd48:	46b1      	mov	r9, r6
    cd4a:	001e      	movs	r6, r3
    cd4c:	0020      	movs	r0, r4
    cd4e:	0029      	movs	r1, r5
    cd50:	220a      	movs	r2, #10
    cd52:	2300      	movs	r3, #0
    cd54:	f7fc f9ca 	bl	90ec <__aeabi_uldivmod>
    cd58:	3e01      	subs	r6, #1
    cd5a:	3230      	adds	r2, #48	; 0x30
    cd5c:	7032      	strb	r2, [r6, #0]
    cd5e:	2300      	movs	r3, #0
    cd60:	0020      	movs	r0, r4
    cd62:	0029      	movs	r1, r5
    cd64:	220a      	movs	r2, #10
    cd66:	f7fc f9c1 	bl	90ec <__aeabi_uldivmod>
    cd6a:	0003      	movs	r3, r0
    cd6c:	0004      	movs	r4, r0
    cd6e:	000d      	movs	r5, r1
    cd70:	430b      	orrs	r3, r1
    cd72:	d1eb      	bne.n	cd4c <_vfprintf_r+0xc98>
    cd74:	0032      	movs	r2, r6
    cd76:	ab32      	add	r3, sp, #200	; 0xc8
    cd78:	1a9b      	subs	r3, r3, r2
    cd7a:	9611      	str	r6, [sp, #68]	; 0x44
    cd7c:	940c      	str	r4, [sp, #48]	; 0x30
    cd7e:	950d      	str	r5, [sp, #52]	; 0x34
    cd80:	464e      	mov	r6, r9
    cd82:	930e      	str	r3, [sp, #56]	; 0x38
    cd84:	f7ff fb03 	bl	c38e <_vfprintf_r+0x2da>
    cd88:	2300      	movs	r3, #0
    cd8a:	930e      	str	r3, [sp, #56]	; 0x38
    cd8c:	ab32      	add	r3, sp, #200	; 0xc8
    cd8e:	9311      	str	r3, [sp, #68]	; 0x44
    cd90:	f7ff fafd 	bl	c38e <_vfprintf_r+0x2da>
    cd94:	003a      	movs	r2, r7
    cd96:	4659      	mov	r1, fp
    cd98:	9806      	ldr	r0, [sp, #24]
    cd9a:	f003 fc5d 	bl	10658 <__sprint_r>
    cd9e:	2800      	cmp	r0, #0
    cda0:	d000      	beq.n	cda4 <_vfprintf_r+0xcf0>
    cda2:	e717      	b.n	cbd4 <_vfprintf_r+0xb20>
    cda4:	ab16      	add	r3, sp, #88	; 0x58
    cda6:	7fdb      	ldrb	r3, [r3, #31]
    cda8:	68bc      	ldr	r4, [r7, #8]
    cdaa:	4698      	mov	r8, r3
    cdac:	ae32      	add	r6, sp, #200	; 0xc8
    cdae:	e513      	b.n	c7d8 <_vfprintf_r+0x724>
    cdb0:	46b1      	mov	r9, r6
    cdb2:	e697      	b.n	cae4 <_vfprintf_r+0xa30>
    cdb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cdb6:	1e5d      	subs	r5, r3, #1
    cdb8:	2d00      	cmp	r5, #0
    cdba:	dc00      	bgt.n	cdbe <_vfprintf_r+0xd0a>
    cdbc:	e616      	b.n	c9ec <_vfprintf_r+0x938>
    cdbe:	4ba9      	ldr	r3, [pc, #676]	; (d064 <_vfprintf_r+0xfb0>)
    cdc0:	4699      	mov	r9, r3
    cdc2:	2d10      	cmp	r5, #16
    cdc4:	dc00      	bgt.n	cdc8 <_vfprintf_r+0xd14>
    cdc6:	e10a      	b.n	cfde <_vfprintf_r+0xf2a>
    cdc8:	2310      	movs	r3, #16
    cdca:	0022      	movs	r2, r4
    cdcc:	469a      	mov	sl, r3
    cdce:	465c      	mov	r4, fp
    cdd0:	4643      	mov	r3, r8
    cdd2:	e004      	b.n	cdde <_vfprintf_r+0xd2a>
    cdd4:	3608      	adds	r6, #8
    cdd6:	3d10      	subs	r5, #16
    cdd8:	2d10      	cmp	r5, #16
    cdda:	dc00      	bgt.n	cdde <_vfprintf_r+0xd2a>
    cddc:	e0fc      	b.n	cfd8 <_vfprintf_r+0xf24>
    cdde:	4649      	mov	r1, r9
    cde0:	6031      	str	r1, [r6, #0]
    cde2:	4651      	mov	r1, sl
    cde4:	3210      	adds	r2, #16
    cde6:	3301      	adds	r3, #1
    cde8:	6071      	str	r1, [r6, #4]
    cdea:	60ba      	str	r2, [r7, #8]
    cdec:	607b      	str	r3, [r7, #4]
    cdee:	2b07      	cmp	r3, #7
    cdf0:	ddf0      	ble.n	cdd4 <_vfprintf_r+0xd20>
    cdf2:	003a      	movs	r2, r7
    cdf4:	0021      	movs	r1, r4
    cdf6:	9806      	ldr	r0, [sp, #24]
    cdf8:	f003 fc2e 	bl	10658 <__sprint_r>
    cdfc:	2800      	cmp	r0, #0
    cdfe:	d000      	beq.n	ce02 <_vfprintf_r+0xd4e>
    ce00:	e6c1      	b.n	cb86 <_vfprintf_r+0xad2>
    ce02:	68ba      	ldr	r2, [r7, #8]
    ce04:	687b      	ldr	r3, [r7, #4]
    ce06:	ae32      	add	r6, sp, #200	; 0xc8
    ce08:	e7e5      	b.n	cdd6 <_vfprintf_r+0xd22>
    ce0a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ce0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce0e:	0008      	movs	r0, r1
    ce10:	4310      	orrs	r0, r2
    ce12:	2302      	movs	r3, #2
    ce14:	0002      	movs	r2, r0
    ce16:	f7ff fa93 	bl	c340 <_vfprintf_r+0x28c>
    ce1a:	46a3      	mov	fp, r4
    ce1c:	0014      	movs	r4, r2
    ce1e:	464a      	mov	r2, r9
    ce20:	1964      	adds	r4, r4, r5
    ce22:	3301      	adds	r3, #1
    ce24:	6032      	str	r2, [r6, #0]
    ce26:	6075      	str	r5, [r6, #4]
    ce28:	60bc      	str	r4, [r7, #8]
    ce2a:	607b      	str	r3, [r7, #4]
    ce2c:	2b07      	cmp	r3, #7
    ce2e:	dc00      	bgt.n	ce32 <_vfprintf_r+0xd7e>
    ce30:	e542      	b.n	c8b8 <_vfprintf_r+0x804>
    ce32:	e5e8      	b.n	ca06 <_vfprintf_r+0x952>
    ce34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce36:	681a      	ldr	r2, [r3, #0]
    ce38:	f7ff fa68 	bl	c30c <_vfprintf_r+0x258>
    ce3c:	6813      	ldr	r3, [r2, #0]
    ce3e:	9308      	str	r3, [sp, #32]
    ce40:	f7ff fb57 	bl	c4f2 <_vfprintf_r+0x43e>
    ce44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce46:	681a      	ldr	r2, [r3, #0]
    ce48:	e412      	b.n	c670 <_vfprintf_r+0x5bc>
    ce4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce4c:	681a      	ldr	r2, [r3, #0]
    ce4e:	e426      	b.n	c69e <_vfprintf_r+0x5ea>
    ce50:	2b30      	cmp	r3, #48	; 0x30
    ce52:	d100      	bne.n	ce56 <_vfprintf_r+0xda2>
    ce54:	e23c      	b.n	d2d0 <_vfprintf_r+0x121c>
    ce56:	2330      	movs	r3, #48	; 0x30
    ce58:	3a02      	subs	r2, #2
    ce5a:	7013      	strb	r3, [r2, #0]
    ce5c:	ab32      	add	r3, sp, #200	; 0xc8
    ce5e:	1a9b      	subs	r3, r3, r2
    ce60:	930e      	str	r3, [sp, #56]	; 0x38
    ce62:	9211      	str	r2, [sp, #68]	; 0x44
    ce64:	f7ff fa93 	bl	c38e <_vfprintf_r+0x2da>
    ce68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce6a:	2b09      	cmp	r3, #9
    ce6c:	d900      	bls.n	ce70 <_vfprintf_r+0xdbc>
    ce6e:	e768      	b.n	cd42 <_vfprintf_r+0xc8e>
    ce70:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ce72:	2227      	movs	r2, #39	; 0x27
    ce74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce76:	a928      	add	r1, sp, #160	; 0xa0
    ce78:	3330      	adds	r3, #48	; 0x30
    ce7a:	548b      	strb	r3, [r1, r2]
    ce7c:	2301      	movs	r3, #1
    ce7e:	aa16      	add	r2, sp, #88	; 0x58
    ce80:	4694      	mov	ip, r2
    ce82:	930e      	str	r3, [sp, #56]	; 0x38
    ce84:	336e      	adds	r3, #110	; 0x6e
    ce86:	4463      	add	r3, ip
    ce88:	9409      	str	r4, [sp, #36]	; 0x24
    ce8a:	9311      	str	r3, [sp, #68]	; 0x44
    ce8c:	f7ff fa7f 	bl	c38e <_vfprintf_r+0x2da>
    ce90:	46c3      	mov	fp, r8
    ce92:	46a9      	mov	r9, r5
    ce94:	46a0      	mov	r8, r4
    ce96:	0014      	movs	r4, r2
    ce98:	464a      	mov	r2, r9
    ce9a:	6032      	str	r2, [r6, #0]
    ce9c:	4642      	mov	r2, r8
    ce9e:	4444      	add	r4, r8
    cea0:	3301      	adds	r3, #1
    cea2:	6072      	str	r2, [r6, #4]
    cea4:	60bc      	str	r4, [r7, #8]
    cea6:	607b      	str	r3, [r7, #4]
    cea8:	2b07      	cmp	r3, #7
    ceaa:	dc00      	bgt.n	ceae <_vfprintf_r+0xdfa>
    ceac:	e18d      	b.n	d1ca <_vfprintf_r+0x1116>
    ceae:	003a      	movs	r2, r7
    ceb0:	4659      	mov	r1, fp
    ceb2:	9806      	ldr	r0, [sp, #24]
    ceb4:	f003 fbd0 	bl	10658 <__sprint_r>
    ceb8:	2800      	cmp	r0, #0
    ceba:	d000      	beq.n	cebe <_vfprintf_r+0xe0a>
    cebc:	e68a      	b.n	cbd4 <_vfprintf_r+0xb20>
    cebe:	68bc      	ldr	r4, [r7, #8]
    cec0:	ae32      	add	r6, sp, #200	; 0xc8
    cec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cec6:	4293      	cmp	r3, r2
    cec8:	db00      	blt.n	cecc <_vfprintf_r+0xe18>
    ceca:	e179      	b.n	d1c0 <_vfprintf_r+0x110c>
    cecc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    cece:	6032      	str	r2, [r6, #0]
    ced0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ced2:	4694      	mov	ip, r2
    ced4:	6072      	str	r2, [r6, #4]
    ced6:	687a      	ldr	r2, [r7, #4]
    ced8:	4464      	add	r4, ip
    ceda:	3201      	adds	r2, #1
    cedc:	60bc      	str	r4, [r7, #8]
    cede:	607a      	str	r2, [r7, #4]
    cee0:	2a07      	cmp	r2, #7
    cee2:	dd00      	ble.n	cee6 <_vfprintf_r+0xe32>
    cee4:	e176      	b.n	d1d4 <_vfprintf_r+0x1120>
    cee6:	3608      	adds	r6, #8
    cee8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ceea:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ceec:	1ad3      	subs	r3, r2, r3
    ceee:	1a52      	subs	r2, r2, r1
    cef0:	4690      	mov	r8, r2
    cef2:	429a      	cmp	r2, r3
    cef4:	dd00      	ble.n	cef8 <_vfprintf_r+0xe44>
    cef6:	4698      	mov	r8, r3
    cef8:	4642      	mov	r2, r8
    cefa:	2a00      	cmp	r2, #0
    cefc:	dd0f      	ble.n	cf1e <_vfprintf_r+0xe6a>
    cefe:	9913      	ldr	r1, [sp, #76]	; 0x4c
    cf00:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf02:	468c      	mov	ip, r1
    cf04:	4462      	add	r2, ip
    cf06:	6032      	str	r2, [r6, #0]
    cf08:	4642      	mov	r2, r8
    cf0a:	6072      	str	r2, [r6, #4]
    cf0c:	687a      	ldr	r2, [r7, #4]
    cf0e:	4444      	add	r4, r8
    cf10:	3201      	adds	r2, #1
    cf12:	60bc      	str	r4, [r7, #8]
    cf14:	607a      	str	r2, [r7, #4]
    cf16:	2a07      	cmp	r2, #7
    cf18:	dd00      	ble.n	cf1c <_vfprintf_r+0xe68>
    cf1a:	e289      	b.n	d430 <_vfprintf_r+0x137c>
    cf1c:	3608      	adds	r6, #8
    cf1e:	4642      	mov	r2, r8
    cf20:	43d5      	mvns	r5, r2
    cf22:	17ed      	asrs	r5, r5, #31
    cf24:	4015      	ands	r5, r2
    cf26:	1b5d      	subs	r5, r3, r5
    cf28:	2d00      	cmp	r5, #0
    cf2a:	dc00      	bgt.n	cf2e <_vfprintf_r+0xe7a>
    cf2c:	e4c5      	b.n	c8ba <_vfprintf_r+0x806>
    cf2e:	4a4d      	ldr	r2, [pc, #308]	; (d064 <_vfprintf_r+0xfb0>)
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	4691      	mov	r9, r2
    cf34:	2d10      	cmp	r5, #16
    cf36:	dc00      	bgt.n	cf3a <_vfprintf_r+0xe86>
    cf38:	e771      	b.n	ce1e <_vfprintf_r+0xd6a>
    cf3a:	2210      	movs	r2, #16
    cf3c:	4690      	mov	r8, r2
    cf3e:	0022      	movs	r2, r4
    cf40:	465c      	mov	r4, fp
    cf42:	e004      	b.n	cf4e <_vfprintf_r+0xe9a>
    cf44:	3608      	adds	r6, #8
    cf46:	3d10      	subs	r5, #16
    cf48:	2d10      	cmp	r5, #16
    cf4a:	dc00      	bgt.n	cf4e <_vfprintf_r+0xe9a>
    cf4c:	e765      	b.n	ce1a <_vfprintf_r+0xd66>
    cf4e:	4649      	mov	r1, r9
    cf50:	6031      	str	r1, [r6, #0]
    cf52:	4641      	mov	r1, r8
    cf54:	3210      	adds	r2, #16
    cf56:	3301      	adds	r3, #1
    cf58:	6071      	str	r1, [r6, #4]
    cf5a:	60ba      	str	r2, [r7, #8]
    cf5c:	607b      	str	r3, [r7, #4]
    cf5e:	2b07      	cmp	r3, #7
    cf60:	ddf0      	ble.n	cf44 <_vfprintf_r+0xe90>
    cf62:	003a      	movs	r2, r7
    cf64:	0021      	movs	r1, r4
    cf66:	9806      	ldr	r0, [sp, #24]
    cf68:	f003 fb76 	bl	10658 <__sprint_r>
    cf6c:	2800      	cmp	r0, #0
    cf6e:	d000      	beq.n	cf72 <_vfprintf_r+0xebe>
    cf70:	e609      	b.n	cb86 <_vfprintf_r+0xad2>
    cf72:	68ba      	ldr	r2, [r7, #8]
    cf74:	687b      	ldr	r3, [r7, #4]
    cf76:	ae32      	add	r6, sp, #200	; 0xc8
    cf78:	e7e5      	b.n	cf46 <_vfprintf_r+0xe92>
    cf7a:	003a      	movs	r2, r7
    cf7c:	4659      	mov	r1, fp
    cf7e:	9806      	ldr	r0, [sp, #24]
    cf80:	f003 fb6a 	bl	10658 <__sprint_r>
    cf84:	2800      	cmp	r0, #0
    cf86:	d000      	beq.n	cf8a <_vfprintf_r+0xed6>
    cf88:	e624      	b.n	cbd4 <_vfprintf_r+0xb20>
    cf8a:	68bc      	ldr	r4, [r7, #8]
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	ae32      	add	r6, sp, #200	; 0xc8
    cf90:	e504      	b.n	c99c <_vfprintf_r+0x8e8>
    cf92:	2307      	movs	r3, #7
    cf94:	3207      	adds	r2, #7
    cf96:	439a      	bics	r2, r3
    cf98:	3301      	adds	r3, #1
    cf9a:	469c      	mov	ip, r3
    cf9c:	4494      	add	ip, r2
    cf9e:	4663      	mov	r3, ip
    cfa0:	930f      	str	r3, [sp, #60]	; 0x3c
    cfa2:	6853      	ldr	r3, [r2, #4]
    cfa4:	6812      	ldr	r2, [r2, #0]
    cfa6:	930d      	str	r3, [sp, #52]	; 0x34
    cfa8:	920c      	str	r2, [sp, #48]	; 0x30
    cfaa:	f7ff faa7 	bl	c4fc <_vfprintf_r+0x448>
    cfae:	2207      	movs	r2, #7
    cfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfb2:	3307      	adds	r3, #7
    cfb4:	4393      	bics	r3, r2
    cfb6:	3201      	adds	r2, #1
    cfb8:	4694      	mov	ip, r2
    cfba:	449c      	add	ip, r3
    cfbc:	4662      	mov	r2, ip
    cfbe:	920f      	str	r2, [sp, #60]	; 0x3c
    cfc0:	681a      	ldr	r2, [r3, #0]
    cfc2:	685b      	ldr	r3, [r3, #4]
    cfc4:	0011      	movs	r1, r2
    cfc6:	001a      	movs	r2, r3
    cfc8:	0008      	movs	r0, r1
    cfca:	4310      	orrs	r0, r2
    cfcc:	910c      	str	r1, [sp, #48]	; 0x30
    cfce:	920d      	str	r2, [sp, #52]	; 0x34
    cfd0:	2300      	movs	r3, #0
    cfd2:	0002      	movs	r2, r0
    cfd4:	f7ff f9b4 	bl	c340 <_vfprintf_r+0x28c>
    cfd8:	46a3      	mov	fp, r4
    cfda:	4698      	mov	r8, r3
    cfdc:	0014      	movs	r4, r2
    cfde:	464b      	mov	r3, r9
    cfe0:	6075      	str	r5, [r6, #4]
    cfe2:	6033      	str	r3, [r6, #0]
    cfe4:	1964      	adds	r4, r4, r5
    cfe6:	e4f7      	b.n	c9d8 <_vfprintf_r+0x924>
    cfe8:	003a      	movs	r2, r7
    cfea:	4659      	mov	r1, fp
    cfec:	9806      	ldr	r0, [sp, #24]
    cfee:	f003 fb33 	bl	10658 <__sprint_r>
    cff2:	2800      	cmp	r0, #0
    cff4:	d000      	beq.n	cff8 <_vfprintf_r+0xf44>
    cff6:	e5ed      	b.n	cbd4 <_vfprintf_r+0xb20>
    cff8:	687b      	ldr	r3, [r7, #4]
    cffa:	68bc      	ldr	r4, [r7, #8]
    cffc:	4698      	mov	r8, r3
    cffe:	ae32      	add	r6, sp, #200	; 0xc8
    d000:	e4da      	b.n	c9b8 <_vfprintf_r+0x904>
    d002:	2207      	movs	r2, #7
    d004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d006:	3307      	adds	r3, #7
    d008:	4393      	bics	r3, r2
    d00a:	3201      	adds	r2, #1
    d00c:	4694      	mov	ip, r2
    d00e:	449c      	add	ip, r3
    d010:	4662      	mov	r2, ip
    d012:	920f      	str	r2, [sp, #60]	; 0x3c
    d014:	681a      	ldr	r2, [r3, #0]
    d016:	685b      	ldr	r3, [r3, #4]
    d018:	0011      	movs	r1, r2
    d01a:	001a      	movs	r2, r3
    d01c:	0008      	movs	r0, r1
    d01e:	4310      	orrs	r0, r2
    d020:	910c      	str	r1, [sp, #48]	; 0x30
    d022:	920d      	str	r2, [sp, #52]	; 0x34
    d024:	2301      	movs	r3, #1
    d026:	0002      	movs	r2, r0
    d028:	f7ff f98a 	bl	c340 <_vfprintf_r+0x28c>
    d02c:	2207      	movs	r2, #7
    d02e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d030:	3307      	adds	r3, #7
    d032:	4393      	bics	r3, r2
    d034:	3201      	adds	r2, #1
    d036:	4694      	mov	ip, r2
    d038:	449c      	add	ip, r3
    d03a:	4662      	mov	r2, ip
    d03c:	920f      	str	r2, [sp, #60]	; 0x3c
    d03e:	681a      	ldr	r2, [r3, #0]
    d040:	685b      	ldr	r3, [r3, #4]
    d042:	920c      	str	r2, [sp, #48]	; 0x30
    d044:	930d      	str	r3, [sp, #52]	; 0x34
    d046:	f7ff f966 	bl	c316 <_vfprintf_r+0x262>
    d04a:	003a      	movs	r2, r7
    d04c:	4659      	mov	r1, fp
    d04e:	9806      	ldr	r0, [sp, #24]
    d050:	f003 fb02 	bl	10658 <__sprint_r>
    d054:	2800      	cmp	r0, #0
    d056:	d000      	beq.n	d05a <_vfprintf_r+0xfa6>
    d058:	e5bc      	b.n	cbd4 <_vfprintf_r+0xb20>
    d05a:	68bc      	ldr	r4, [r7, #8]
    d05c:	ae32      	add	r6, sp, #200	; 0xc8
    d05e:	f7ff fbe2 	bl	c826 <_vfprintf_r+0x772>
    d062:	46c0      	nop			; (mov r8, r8)
    d064:	0001149c 	.word	0x0001149c
    d068:	980c      	ldr	r0, [sp, #48]	; 0x30
    d06a:	990d      	ldr	r1, [sp, #52]	; 0x34
    d06c:	2300      	movs	r3, #0
    d06e:	4242      	negs	r2, r0
    d070:	418b      	sbcs	r3, r1
    d072:	0011      	movs	r1, r2
    d074:	001a      	movs	r2, r3
    d076:	232d      	movs	r3, #45	; 0x2d
    d078:	a816      	add	r0, sp, #88	; 0x58
    d07a:	77c3      	strb	r3, [r0, #31]
    d07c:	0008      	movs	r0, r1
    d07e:	4310      	orrs	r0, r2
    d080:	910c      	str	r1, [sp, #48]	; 0x30
    d082:	920d      	str	r2, [sp, #52]	; 0x34
    d084:	4698      	mov	r8, r3
    d086:	0002      	movs	r2, r0
    d088:	3b2c      	subs	r3, #44	; 0x2c
    d08a:	f7ff f95d 	bl	c348 <_vfprintf_r+0x294>
    d08e:	9916      	ldr	r1, [sp, #88]	; 0x58
    d090:	9d15      	ldr	r5, [sp, #84]	; 0x54
    d092:	000a      	movs	r2, r1
    d094:	0008      	movs	r0, r1
    d096:	002b      	movs	r3, r5
    d098:	0029      	movs	r1, r5
    d09a:	f7fe fd15 	bl	bac8 <__aeabi_dcmpun>
    d09e:	2800      	cmp	r0, #0
    d0a0:	d000      	beq.n	d0a4 <_vfprintf_r+0xff0>
    d0a2:	e2c6      	b.n	d632 <_vfprintf_r+0x157e>
    d0a4:	4653      	mov	r3, sl
    d0a6:	3301      	adds	r3, #1
    d0a8:	d100      	bne.n	d0ac <_vfprintf_r+0xff8>
    d0aa:	e09f      	b.n	d1ec <_vfprintf_r+0x1138>
    d0ac:	2320      	movs	r3, #32
    d0ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d0b0:	439a      	bics	r2, r3
    d0b2:	920e      	str	r2, [sp, #56]	; 0x38
    d0b4:	2a47      	cmp	r2, #71	; 0x47
    d0b6:	d100      	bne.n	d0ba <_vfprintf_r+0x1006>
    d0b8:	e1a1      	b.n	d3fe <_vfprintf_r+0x134a>
    d0ba:	2380      	movs	r3, #128	; 0x80
    d0bc:	005b      	lsls	r3, r3, #1
    d0be:	4323      	orrs	r3, r4
    d0c0:	9309      	str	r3, [sp, #36]	; 0x24
    d0c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d0c4:	2b00      	cmp	r3, #0
    d0c6:	da00      	bge.n	d0ca <_vfprintf_r+0x1016>
    d0c8:	e1ed      	b.n	d4a6 <_vfprintf_r+0x13f2>
    d0ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d0cc:	9308      	str	r3, [sp, #32]
    d0ce:	2300      	movs	r3, #0
    d0d0:	4691      	mov	r9, r2
    d0d2:	9310      	str	r3, [sp, #64]	; 0x40
    d0d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d0d6:	2b66      	cmp	r3, #102	; 0x66
    d0d8:	d100      	bne.n	d0dc <_vfprintf_r+0x1028>
    d0da:	e1b8      	b.n	d44e <_vfprintf_r+0x139a>
    d0dc:	2b46      	cmp	r3, #70	; 0x46
    d0de:	d100      	bne.n	d0e2 <_vfprintf_r+0x102e>
    d0e0:	e237      	b.n	d552 <_vfprintf_r+0x149e>
    d0e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d0e4:	9806      	ldr	r0, [sp, #24]
    d0e6:	3a45      	subs	r2, #69	; 0x45
    d0e8:	0013      	movs	r3, r2
    d0ea:	4259      	negs	r1, r3
    d0ec:	4159      	adcs	r1, r3
    d0ee:	ab20      	add	r3, sp, #128	; 0x80
    d0f0:	000d      	movs	r5, r1
    d0f2:	9303      	str	r3, [sp, #12]
    d0f4:	ab1f      	add	r3, sp, #124	; 0x7c
    d0f6:	9302      	str	r3, [sp, #8]
    d0f8:	2302      	movs	r3, #2
    d0fa:	aa23      	add	r2, sp, #140	; 0x8c
    d0fc:	4455      	add	r5, sl
    d0fe:	921b      	str	r2, [sp, #108]	; 0x6c
    d100:	9204      	str	r2, [sp, #16]
    d102:	9300      	str	r3, [sp, #0]
    d104:	9501      	str	r5, [sp, #4]
    d106:	9b08      	ldr	r3, [sp, #32]
    d108:	464a      	mov	r2, r9
    d10a:	f000 fd25 	bl	db58 <_dtoa_r>
    d10e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d110:	9011      	str	r0, [sp, #68]	; 0x44
    d112:	2b67      	cmp	r3, #103	; 0x67
    d114:	d000      	beq.n	d118 <_vfprintf_r+0x1064>
    d116:	e20b      	b.n	d530 <_vfprintf_r+0x147c>
    d118:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d11a:	4698      	mov	r8, r3
    d11c:	44a8      	add	r8, r5
    d11e:	07e3      	lsls	r3, r4, #31
    d120:	d400      	bmi.n	d124 <_vfprintf_r+0x1070>
    d122:	e277      	b.n	d614 <_vfprintf_r+0x1560>
    d124:	2300      	movs	r3, #0
    d126:	2200      	movs	r2, #0
    d128:	4648      	mov	r0, r9
    d12a:	9908      	ldr	r1, [sp, #32]
    d12c:	f7fb ff76 	bl	901c <__aeabi_dcmpeq>
    d130:	4643      	mov	r3, r8
    d132:	2800      	cmp	r0, #0
    d134:	d10a      	bne.n	d14c <_vfprintf_r+0x1098>
    d136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d138:	4543      	cmp	r3, r8
    d13a:	d207      	bcs.n	d14c <_vfprintf_r+0x1098>
    d13c:	2130      	movs	r1, #48	; 0x30
    d13e:	4640      	mov	r0, r8
    d140:	1c5a      	adds	r2, r3, #1
    d142:	9223      	str	r2, [sp, #140]	; 0x8c
    d144:	7019      	strb	r1, [r3, #0]
    d146:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d148:	4298      	cmp	r0, r3
    d14a:	d8f9      	bhi.n	d140 <_vfprintf_r+0x108c>
    d14c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d14e:	1a9b      	subs	r3, r3, r2
    d150:	9314      	str	r3, [sp, #80]	; 0x50
    d152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d154:	2b47      	cmp	r3, #71	; 0x47
    d156:	d100      	bne.n	d15a <_vfprintf_r+0x10a6>
    d158:	e0d0      	b.n	d2fc <_vfprintf_r+0x1248>
    d15a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d15c:	2b65      	cmp	r3, #101	; 0x65
    d15e:	dc00      	bgt.n	d162 <_vfprintf_r+0x10ae>
    d160:	e2d5      	b.n	d70e <_vfprintf_r+0x165a>
    d162:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d164:	2b66      	cmp	r3, #102	; 0x66
    d166:	d100      	bne.n	d16a <_vfprintf_r+0x10b6>
    d168:	e1c6      	b.n	d4f8 <_vfprintf_r+0x1444>
    d16a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d16c:	9313      	str	r3, [sp, #76]	; 0x4c
    d16e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d172:	0019      	movs	r1, r3
    d174:	4291      	cmp	r1, r2
    d176:	dd00      	ble.n	d17a <_vfprintf_r+0x10c6>
    d178:	e1a0      	b.n	d4bc <_vfprintf_r+0x1408>
    d17a:	07e3      	lsls	r3, r4, #31
    d17c:	d500      	bpl.n	d180 <_vfprintf_r+0x10cc>
    d17e:	e242      	b.n	d606 <_vfprintf_r+0x1552>
    d180:	43d3      	mvns	r3, r2
    d182:	17db      	asrs	r3, r3, #31
    d184:	0011      	movs	r1, r2
    d186:	401a      	ands	r2, r3
    d188:	2367      	movs	r3, #103	; 0x67
    d18a:	9208      	str	r2, [sp, #32]
    d18c:	910e      	str	r1, [sp, #56]	; 0x38
    d18e:	9312      	str	r3, [sp, #72]	; 0x48
    d190:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d192:	2b00      	cmp	r3, #0
    d194:	d000      	beq.n	d198 <_vfprintf_r+0x10e4>
    d196:	e0a9      	b.n	d2ec <_vfprintf_r+0x1238>
    d198:	ab16      	add	r3, sp, #88	; 0x58
    d19a:	7fdb      	ldrb	r3, [r3, #31]
    d19c:	4698      	mov	r8, r3
    d19e:	2300      	movs	r3, #0
    d1a0:	469a      	mov	sl, r3
    d1a2:	f7ff f8fc 	bl	c39e <_vfprintf_r+0x2ea>
    d1a6:	46cb      	mov	fp, r9
    d1a8:	46a1      	mov	r9, r4
    d1aa:	0014      	movs	r4, r2
    d1ac:	e637      	b.n	ce1e <_vfprintf_r+0xd6a>
    d1ae:	464b      	mov	r3, r9
    d1b0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d1b2:	f002 f8db 	bl	f36c <__retarget_lock_release_recursive>
    d1b6:	2301      	movs	r3, #1
    d1b8:	425b      	negs	r3, r3
    d1ba:	930a      	str	r3, [sp, #40]	; 0x28
    d1bc:	f7ff f82b 	bl	c216 <_vfprintf_r+0x162>
    d1c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d1c2:	07d2      	lsls	r2, r2, #31
    d1c4:	d400      	bmi.n	d1c8 <_vfprintf_r+0x1114>
    d1c6:	e68f      	b.n	cee8 <_vfprintf_r+0xe34>
    d1c8:	e680      	b.n	cecc <_vfprintf_r+0xe18>
    d1ca:	3608      	adds	r6, #8
    d1cc:	e679      	b.n	cec2 <_vfprintf_r+0xe0e>
    d1ce:	68bc      	ldr	r4, [r7, #8]
    d1d0:	f7ff fb73 	bl	c8ba <_vfprintf_r+0x806>
    d1d4:	003a      	movs	r2, r7
    d1d6:	4659      	mov	r1, fp
    d1d8:	9806      	ldr	r0, [sp, #24]
    d1da:	f003 fa3d 	bl	10658 <__sprint_r>
    d1de:	2800      	cmp	r0, #0
    d1e0:	d000      	beq.n	d1e4 <_vfprintf_r+0x1130>
    d1e2:	e4f7      	b.n	cbd4 <_vfprintf_r+0xb20>
    d1e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d1e6:	68bc      	ldr	r4, [r7, #8]
    d1e8:	ae32      	add	r6, sp, #200	; 0xc8
    d1ea:	e67d      	b.n	cee8 <_vfprintf_r+0xe34>
    d1ec:	2320      	movs	r3, #32
    d1ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d1f0:	439a      	bics	r2, r3
    d1f2:	3b1a      	subs	r3, #26
    d1f4:	920e      	str	r2, [sp, #56]	; 0x38
    d1f6:	469a      	mov	sl, r3
    d1f8:	e75f      	b.n	d0ba <_vfprintf_r+0x1006>
    d1fa:	232d      	movs	r3, #45	; 0x2d
    d1fc:	aa16      	add	r2, sp, #88	; 0x58
    d1fe:	77d3      	strb	r3, [r2, #31]
    d200:	4698      	mov	r8, r3
    d202:	f7ff faa8 	bl	c756 <_vfprintf_r+0x6a2>
    d206:	003a      	movs	r2, r7
    d208:	4659      	mov	r1, fp
    d20a:	9806      	ldr	r0, [sp, #24]
    d20c:	f003 fa24 	bl	10658 <__sprint_r>
    d210:	2800      	cmp	r0, #0
    d212:	d000      	beq.n	d216 <_vfprintf_r+0x1162>
    d214:	e4de      	b.n	cbd4 <_vfprintf_r+0xb20>
    d216:	ae32      	add	r6, sp, #200	; 0xc8
    d218:	e419      	b.n	ca4e <_vfprintf_r+0x99a>
    d21a:	4be3      	ldr	r3, [pc, #908]	; (d5a8 <_vfprintf_r+0x14f4>)
    d21c:	3401      	adds	r4, #1
    d21e:	6033      	str	r3, [r6, #0]
    d220:	2301      	movs	r3, #1
    d222:	6073      	str	r3, [r6, #4]
    d224:	687b      	ldr	r3, [r7, #4]
    d226:	60bc      	str	r4, [r7, #8]
    d228:	3301      	adds	r3, #1
    d22a:	607b      	str	r3, [r7, #4]
    d22c:	2b07      	cmp	r3, #7
    d22e:	dd00      	ble.n	d232 <_vfprintf_r+0x117e>
    d230:	e155      	b.n	d4de <_vfprintf_r+0x142a>
    d232:	3608      	adds	r6, #8
    d234:	2800      	cmp	r0, #0
    d236:	d107      	bne.n	d248 <_vfprintf_r+0x1194>
    d238:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d23a:	2b00      	cmp	r3, #0
    d23c:	d104      	bne.n	d248 <_vfprintf_r+0x1194>
    d23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d240:	07db      	lsls	r3, r3, #31
    d242:	d401      	bmi.n	d248 <_vfprintf_r+0x1194>
    d244:	f7ff fb39 	bl	c8ba <_vfprintf_r+0x806>
    d248:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d24a:	6033      	str	r3, [r6, #0]
    d24c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d24e:	1919      	adds	r1, r3, r4
    d250:	6073      	str	r3, [r6, #4]
    d252:	687b      	ldr	r3, [r7, #4]
    d254:	60b9      	str	r1, [r7, #8]
    d256:	3301      	adds	r3, #1
    d258:	607b      	str	r3, [r7, #4]
    d25a:	2b07      	cmp	r3, #7
    d25c:	dd00      	ble.n	d260 <_vfprintf_r+0x11ac>
    d25e:	e1c4      	b.n	d5ea <_vfprintf_r+0x1536>
    d260:	0032      	movs	r2, r6
    d262:	3208      	adds	r2, #8
    d264:	2800      	cmp	r0, #0
    d266:	da00      	bge.n	d26a <_vfprintf_r+0x11b6>
    d268:	e195      	b.n	d596 <_vfprintf_r+0x14e2>
    d26a:	9811      	ldr	r0, [sp, #68]	; 0x44
    d26c:	3301      	adds	r3, #1
    d26e:	6010      	str	r0, [r2, #0]
    d270:	9814      	ldr	r0, [sp, #80]	; 0x50
    d272:	607b      	str	r3, [r7, #4]
    d274:	1844      	adds	r4, r0, r1
    d276:	6050      	str	r0, [r2, #4]
    d278:	60bc      	str	r4, [r7, #8]
    d27a:	2b07      	cmp	r3, #7
    d27c:	dd01      	ble.n	d282 <_vfprintf_r+0x11ce>
    d27e:	f7ff fbc2 	bl	ca06 <_vfprintf_r+0x952>
    d282:	3208      	adds	r2, #8
    d284:	0016      	movs	r6, r2
    d286:	f7ff fb18 	bl	c8ba <_vfprintf_r+0x806>
    d28a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d28e:	680b      	ldr	r3, [r1, #0]
    d290:	601a      	str	r2, [r3, #0]
    d292:	17d2      	asrs	r2, r2, #31
    d294:	605a      	str	r2, [r3, #4]
    d296:	000b      	movs	r3, r1
    d298:	3304      	adds	r3, #4
    d29a:	930f      	str	r3, [sp, #60]	; 0x3c
    d29c:	f7fe ff58 	bl	c150 <_vfprintf_r+0x9c>
    d2a0:	464b      	mov	r3, r9
    d2a2:	9a07      	ldr	r2, [sp, #28]
    d2a4:	431c      	orrs	r4, r3
    d2a6:	3201      	adds	r2, #1
    d2a8:	7813      	ldrb	r3, [r2, #0]
    d2aa:	9207      	str	r2, [sp, #28]
    d2ac:	f7fe ff8b 	bl	c1c6 <_vfprintf_r+0x112>
    d2b0:	003a      	movs	r2, r7
    d2b2:	4659      	mov	r1, fp
    d2b4:	9806      	ldr	r0, [sp, #24]
    d2b6:	f003 f9cf 	bl	10658 <__sprint_r>
    d2ba:	2800      	cmp	r0, #0
    d2bc:	d000      	beq.n	d2c0 <_vfprintf_r+0x120c>
    d2be:	e489      	b.n	cbd4 <_vfprintf_r+0xb20>
    d2c0:	68bc      	ldr	r4, [r7, #8]
    d2c2:	ae32      	add	r6, sp, #200	; 0xc8
    d2c4:	f7ff fbdc 	bl	ca80 <_vfprintf_r+0x9cc>
    d2c8:	4bb8      	ldr	r3, [pc, #736]	; (d5ac <_vfprintf_r+0x14f8>)
    d2ca:	9311      	str	r3, [sp, #68]	; 0x44
    d2cc:	f7ff fa4a 	bl	c764 <_vfprintf_r+0x6b0>
    d2d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2d2:	ab32      	add	r3, sp, #200	; 0xc8
    d2d4:	1a9b      	subs	r3, r3, r2
    d2d6:	930e      	str	r3, [sp, #56]	; 0x38
    d2d8:	f7ff f859 	bl	c38e <_vfprintf_r+0x2da>
    d2dc:	9811      	ldr	r0, [sp, #68]	; 0x44
    d2de:	f7fe feb7 	bl	c050 <strlen>
    d2e2:	0002      	movs	r2, r0
    d2e4:	900e      	str	r0, [sp, #56]	; 0x38
    d2e6:	0003      	movs	r3, r0
    d2e8:	f7ff f9a1 	bl	c62e <_vfprintf_r+0x57a>
    d2ec:	232d      	movs	r3, #45	; 0x2d
    d2ee:	aa16      	add	r2, sp, #88	; 0x58
    d2f0:	77d3      	strb	r3, [r2, #31]
    d2f2:	4698      	mov	r8, r3
    d2f4:	2300      	movs	r3, #0
    d2f6:	469a      	mov	sl, r3
    d2f8:	f7ff f854 	bl	c3a4 <_vfprintf_r+0x2f0>
    d2fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d2fe:	9313      	str	r3, [sp, #76]	; 0x4c
    d300:	1cda      	adds	r2, r3, #3
    d302:	db02      	blt.n	d30a <_vfprintf_r+0x1256>
    d304:	459a      	cmp	sl, r3
    d306:	db00      	blt.n	d30a <_vfprintf_r+0x1256>
    d308:	e731      	b.n	d16e <_vfprintf_r+0x10ba>
    d30a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d30c:	3b02      	subs	r3, #2
    d30e:	9312      	str	r3, [sp, #72]	; 0x48
    d310:	222c      	movs	r2, #44	; 0x2c
    d312:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d314:	2148      	movs	r1, #72	; 0x48
    d316:	1e5d      	subs	r5, r3, #1
    d318:	ab16      	add	r3, sp, #88	; 0x58
    d31a:	189b      	adds	r3, r3, r2
    d31c:	466a      	mov	r2, sp
    d31e:	1852      	adds	r2, r2, r1
    d320:	7812      	ldrb	r2, [r2, #0]
    d322:	951f      	str	r5, [sp, #124]	; 0x7c
    d324:	701a      	strb	r2, [r3, #0]
    d326:	2d00      	cmp	r5, #0
    d328:	da00      	bge.n	d32c <_vfprintf_r+0x1278>
    d32a:	e1cb      	b.n	d6c4 <_vfprintf_r+0x1610>
    d32c:	212d      	movs	r1, #45	; 0x2d
    d32e:	232b      	movs	r3, #43	; 0x2b
    d330:	aa16      	add	r2, sp, #88	; 0x58
    d332:	1852      	adds	r2, r2, r1
    d334:	7013      	strb	r3, [r2, #0]
    d336:	2d09      	cmp	r5, #9
    d338:	dc00      	bgt.n	d33c <_vfprintf_r+0x1288>
    d33a:	e16d      	b.n	d618 <_vfprintf_r+0x1564>
    d33c:	aa16      	add	r2, sp, #88	; 0x58
    d33e:	233b      	movs	r3, #59	; 0x3b
    d340:	4694      	mov	ip, r2
    d342:	4463      	add	r3, ip
    d344:	469a      	mov	sl, r3
    d346:	46b1      	mov	r9, r6
    d348:	46a0      	mov	r8, r4
    d34a:	4656      	mov	r6, sl
    d34c:	e000      	b.n	d350 <_vfprintf_r+0x129c>
    d34e:	0026      	movs	r6, r4
    d350:	0028      	movs	r0, r5
    d352:	210a      	movs	r1, #10
    d354:	f7fb fe4c 	bl	8ff0 <__aeabi_idivmod>
    d358:	1e74      	subs	r4, r6, #1
    d35a:	3130      	adds	r1, #48	; 0x30
    d35c:	7021      	strb	r1, [r4, #0]
    d35e:	0028      	movs	r0, r5
    d360:	210a      	movs	r1, #10
    d362:	f7fb fd5f 	bl	8e24 <__divsi3>
    d366:	0005      	movs	r5, r0
    d368:	2809      	cmp	r0, #9
    d36a:	dcf0      	bgt.n	d34e <_vfprintf_r+0x129a>
    d36c:	0023      	movs	r3, r4
    d36e:	4644      	mov	r4, r8
    d370:	46b0      	mov	r8, r6
    d372:	464e      	mov	r6, r9
    d374:	4699      	mov	r9, r3
    d376:	0003      	movs	r3, r0
    d378:	3330      	adds	r3, #48	; 0x30
    d37a:	b2d8      	uxtb	r0, r3
    d37c:	4643      	mov	r3, r8
    d37e:	3b02      	subs	r3, #2
    d380:	7018      	strb	r0, [r3, #0]
    d382:	459a      	cmp	sl, r3
    d384:	d800      	bhi.n	d388 <_vfprintf_r+0x12d4>
    d386:	e1f6      	b.n	d776 <_vfprintf_r+0x16c2>
    d388:	4642      	mov	r2, r8
    d38a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d38c:	4645      	mov	r5, r8
    d38e:	1a99      	subs	r1, r3, r2
    d390:	2301      	movs	r3, #1
    d392:	3107      	adds	r1, #7
    d394:	425b      	negs	r3, r3
    d396:	e001      	b.n	d39c <_vfprintf_r+0x12e8>
    d398:	5ce8      	ldrb	r0, [r5, r3]
    d39a:	3301      	adds	r3, #1
    d39c:	aa21      	add	r2, sp, #132	; 0x84
    d39e:	18d2      	adds	r2, r2, r3
    d3a0:	70d0      	strb	r0, [r2, #3]
    d3a2:	428b      	cmp	r3, r1
    d3a4:	d1f8      	bne.n	d398 <_vfprintf_r+0x12e4>
    d3a6:	a916      	add	r1, sp, #88	; 0x58
    d3a8:	468c      	mov	ip, r1
    d3aa:	222e      	movs	r2, #46	; 0x2e
    d3ac:	464b      	mov	r3, r9
    d3ae:	4462      	add	r2, ip
    d3b0:	4694      	mov	ip, r2
    d3b2:	1afb      	subs	r3, r7, r3
    d3b4:	4463      	add	r3, ip
    d3b6:	aa21      	add	r2, sp, #132	; 0x84
    d3b8:	9914      	ldr	r1, [sp, #80]	; 0x50
    d3ba:	1a9b      	subs	r3, r3, r2
    d3bc:	469c      	mov	ip, r3
    d3be:	000a      	movs	r2, r1
    d3c0:	4462      	add	r2, ip
    d3c2:	931a      	str	r3, [sp, #104]	; 0x68
    d3c4:	920e      	str	r2, [sp, #56]	; 0x38
    d3c6:	2901      	cmp	r1, #1
    d3c8:	dc00      	bgt.n	d3cc <_vfprintf_r+0x1318>
    d3ca:	e170      	b.n	d6ae <_vfprintf_r+0x15fa>
    d3cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d3d0:	4694      	mov	ip, r2
    d3d2:	4463      	add	r3, ip
    d3d4:	001a      	movs	r2, r3
    d3d6:	930e      	str	r3, [sp, #56]	; 0x38
    d3d8:	43db      	mvns	r3, r3
    d3da:	17db      	asrs	r3, r3, #31
    d3dc:	401a      	ands	r2, r3
    d3de:	2300      	movs	r3, #0
    d3e0:	9208      	str	r2, [sp, #32]
    d3e2:	9313      	str	r3, [sp, #76]	; 0x4c
    d3e4:	e6d4      	b.n	d190 <_vfprintf_r+0x10dc>
    d3e6:	003a      	movs	r2, r7
    d3e8:	4659      	mov	r1, fp
    d3ea:	9806      	ldr	r0, [sp, #24]
    d3ec:	f003 f934 	bl	10658 <__sprint_r>
    d3f0:	2800      	cmp	r0, #0
    d3f2:	d001      	beq.n	d3f8 <_vfprintf_r+0x1344>
    d3f4:	f7ff fbee 	bl	cbd4 <_vfprintf_r+0xb20>
    d3f8:	68bc      	ldr	r4, [r7, #8]
    d3fa:	ae32      	add	r6, sp, #200	; 0xc8
    d3fc:	e46a      	b.n	ccd4 <_vfprintf_r+0xc20>
    d3fe:	4653      	mov	r3, sl
    d400:	2b00      	cmp	r3, #0
    d402:	d000      	beq.n	d406 <_vfprintf_r+0x1352>
    d404:	e659      	b.n	d0ba <_vfprintf_r+0x1006>
    d406:	3301      	adds	r3, #1
    d408:	469a      	mov	sl, r3
    d40a:	e656      	b.n	d0ba <_vfprintf_r+0x1006>
    d40c:	4653      	mov	r3, sl
    d40e:	9308      	str	r3, [sp, #32]
    d410:	2b06      	cmp	r3, #6
    d412:	d901      	bls.n	d418 <_vfprintf_r+0x1364>
    d414:	2306      	movs	r3, #6
    d416:	9308      	str	r3, [sp, #32]
    d418:	9b08      	ldr	r3, [sp, #32]
    d41a:	950f      	str	r5, [sp, #60]	; 0x3c
    d41c:	930e      	str	r3, [sp, #56]	; 0x38
    d41e:	2300      	movs	r3, #0
    d420:	4698      	mov	r8, r3
    d422:	469a      	mov	sl, r3
    d424:	9313      	str	r3, [sp, #76]	; 0x4c
    d426:	4b62      	ldr	r3, [pc, #392]	; (d5b0 <_vfprintf_r+0x14fc>)
    d428:	9409      	str	r4, [sp, #36]	; 0x24
    d42a:	9311      	str	r3, [sp, #68]	; 0x44
    d42c:	f7fe ffbd 	bl	c3aa <_vfprintf_r+0x2f6>
    d430:	003a      	movs	r2, r7
    d432:	4659      	mov	r1, fp
    d434:	9806      	ldr	r0, [sp, #24]
    d436:	f003 f90f 	bl	10658 <__sprint_r>
    d43a:	2800      	cmp	r0, #0
    d43c:	d001      	beq.n	d442 <_vfprintf_r+0x138e>
    d43e:	f7ff fbc9 	bl	cbd4 <_vfprintf_r+0xb20>
    d442:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d444:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    d446:	68bc      	ldr	r4, [r7, #8]
    d448:	1a9b      	subs	r3, r3, r2
    d44a:	ae32      	add	r6, sp, #200	; 0xc8
    d44c:	e567      	b.n	cf1e <_vfprintf_r+0xe6a>
    d44e:	ab23      	add	r3, sp, #140	; 0x8c
    d450:	931b      	str	r3, [sp, #108]	; 0x6c
    d452:	9304      	str	r3, [sp, #16]
    d454:	ab20      	add	r3, sp, #128	; 0x80
    d456:	9303      	str	r3, [sp, #12]
    d458:	ab1f      	add	r3, sp, #124	; 0x7c
    d45a:	9302      	str	r3, [sp, #8]
    d45c:	4653      	mov	r3, sl
    d45e:	9301      	str	r3, [sp, #4]
    d460:	2303      	movs	r3, #3
    d462:	464a      	mov	r2, r9
    d464:	9300      	str	r3, [sp, #0]
    d466:	9806      	ldr	r0, [sp, #24]
    d468:	9b08      	ldr	r3, [sp, #32]
    d46a:	f000 fb75 	bl	db58 <_dtoa_r>
    d46e:	0003      	movs	r3, r0
    d470:	4453      	add	r3, sl
    d472:	4698      	mov	r8, r3
    d474:	4655      	mov	r5, sl
    d476:	9011      	str	r0, [sp, #68]	; 0x44
    d478:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d47a:	781b      	ldrb	r3, [r3, #0]
    d47c:	2b30      	cmp	r3, #48	; 0x30
    d47e:	d002      	beq.n	d486 <_vfprintf_r+0x13d2>
    d480:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d482:	4498      	add	r8, r3
    d484:	e64e      	b.n	d124 <_vfprintf_r+0x1070>
    d486:	2200      	movs	r2, #0
    d488:	2300      	movs	r3, #0
    d48a:	4648      	mov	r0, r9
    d48c:	9908      	ldr	r1, [sp, #32]
    d48e:	f7fb fdc5 	bl	901c <__aeabi_dcmpeq>
    d492:	2800      	cmp	r0, #0
    d494:	d1f4      	bne.n	d480 <_vfprintf_r+0x13cc>
    d496:	2301      	movs	r3, #1
    d498:	1b5b      	subs	r3, r3, r5
    d49a:	931f      	str	r3, [sp, #124]	; 0x7c
    d49c:	4498      	add	r8, r3
    d49e:	e641      	b.n	d124 <_vfprintf_r+0x1070>
    d4a0:	46c1      	mov	r9, r8
    d4a2:	f7ff fb1f 	bl	cae4 <_vfprintf_r+0xa30>
    d4a6:	2280      	movs	r2, #128	; 0x80
    d4a8:	0612      	lsls	r2, r2, #24
    d4aa:	4694      	mov	ip, r2
    d4ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d4ae:	4699      	mov	r9, r3
    d4b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d4b2:	4463      	add	r3, ip
    d4b4:	9308      	str	r3, [sp, #32]
    d4b6:	232d      	movs	r3, #45	; 0x2d
    d4b8:	9310      	str	r3, [sp, #64]	; 0x40
    d4ba:	e60b      	b.n	d0d4 <_vfprintf_r+0x1020>
    d4bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d4be:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d4c0:	4694      	mov	ip, r2
    d4c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d4c4:	4463      	add	r3, ip
    d4c6:	930e      	str	r3, [sp, #56]	; 0x38
    d4c8:	2a00      	cmp	r2, #0
    d4ca:	dc00      	bgt.n	d4ce <_vfprintf_r+0x141a>
    d4cc:	e0e3      	b.n	d696 <_vfprintf_r+0x15e2>
    d4ce:	001a      	movs	r2, r3
    d4d0:	43db      	mvns	r3, r3
    d4d2:	17db      	asrs	r3, r3, #31
    d4d4:	401a      	ands	r2, r3
    d4d6:	2367      	movs	r3, #103	; 0x67
    d4d8:	9208      	str	r2, [sp, #32]
    d4da:	9312      	str	r3, [sp, #72]	; 0x48
    d4dc:	e658      	b.n	d190 <_vfprintf_r+0x10dc>
    d4de:	003a      	movs	r2, r7
    d4e0:	4659      	mov	r1, fp
    d4e2:	9806      	ldr	r0, [sp, #24]
    d4e4:	f003 f8b8 	bl	10658 <__sprint_r>
    d4e8:	2800      	cmp	r0, #0
    d4ea:	d001      	beq.n	d4f0 <_vfprintf_r+0x143c>
    d4ec:	f7ff fb72 	bl	cbd4 <_vfprintf_r+0xb20>
    d4f0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d4f2:	68bc      	ldr	r4, [r7, #8]
    d4f4:	ae32      	add	r6, sp, #200	; 0xc8
    d4f6:	e69d      	b.n	d234 <_vfprintf_r+0x1180>
    d4f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d4fa:	9313      	str	r3, [sp, #76]	; 0x4c
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	dc00      	bgt.n	d502 <_vfprintf_r+0x144e>
    d500:	e0f2      	b.n	d6e8 <_vfprintf_r+0x1634>
    d502:	4652      	mov	r2, sl
    d504:	2a00      	cmp	r2, #0
    d506:	d000      	beq.n	d50a <_vfprintf_r+0x1456>
    d508:	e0a0      	b.n	d64c <_vfprintf_r+0x1598>
    d50a:	07e2      	lsls	r2, r4, #31
    d50c:	d500      	bpl.n	d510 <_vfprintf_r+0x145c>
    d50e:	e09d      	b.n	d64c <_vfprintf_r+0x1598>
    d510:	9308      	str	r3, [sp, #32]
    d512:	930e      	str	r3, [sp, #56]	; 0x38
    d514:	e63c      	b.n	d190 <_vfprintf_r+0x10dc>
    d516:	ab16      	add	r3, sp, #88	; 0x58
    d518:	7fdb      	ldrb	r3, [r3, #31]
    d51a:	950f      	str	r5, [sp, #60]	; 0x3c
    d51c:	4698      	mov	r8, r3
    d51e:	4653      	mov	r3, sl
    d520:	9308      	str	r3, [sp, #32]
    d522:	930e      	str	r3, [sp, #56]	; 0x38
    d524:	2300      	movs	r3, #0
    d526:	9409      	str	r4, [sp, #36]	; 0x24
    d528:	469a      	mov	sl, r3
    d52a:	9313      	str	r3, [sp, #76]	; 0x4c
    d52c:	f7fe ff37 	bl	c39e <_vfprintf_r+0x2ea>
    d530:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d532:	4698      	mov	r8, r3
    d534:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d536:	44a8      	add	r8, r5
    d538:	2b47      	cmp	r3, #71	; 0x47
    d53a:	d000      	beq.n	d53e <_vfprintf_r+0x148a>
    d53c:	e5f2      	b.n	d124 <_vfprintf_r+0x1070>
    d53e:	07e3      	lsls	r3, r4, #31
    d540:	d400      	bmi.n	d544 <_vfprintf_r+0x1490>
    d542:	e0dc      	b.n	d6fe <_vfprintf_r+0x164a>
    d544:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d546:	4698      	mov	r8, r3
    d548:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d54a:	44a8      	add	r8, r5
    d54c:	2b46      	cmp	r3, #70	; 0x46
    d54e:	d093      	beq.n	d478 <_vfprintf_r+0x13c4>
    d550:	e5e8      	b.n	d124 <_vfprintf_r+0x1070>
    d552:	ab23      	add	r3, sp, #140	; 0x8c
    d554:	931b      	str	r3, [sp, #108]	; 0x6c
    d556:	9304      	str	r3, [sp, #16]
    d558:	ab20      	add	r3, sp, #128	; 0x80
    d55a:	9303      	str	r3, [sp, #12]
    d55c:	ab1f      	add	r3, sp, #124	; 0x7c
    d55e:	9302      	str	r3, [sp, #8]
    d560:	4653      	mov	r3, sl
    d562:	9301      	str	r3, [sp, #4]
    d564:	2303      	movs	r3, #3
    d566:	464a      	mov	r2, r9
    d568:	9300      	str	r3, [sp, #0]
    d56a:	9806      	ldr	r0, [sp, #24]
    d56c:	9b08      	ldr	r3, [sp, #32]
    d56e:	f000 faf3 	bl	db58 <_dtoa_r>
    d572:	4655      	mov	r5, sl
    d574:	9011      	str	r0, [sp, #68]	; 0x44
    d576:	e7e5      	b.n	d544 <_vfprintf_r+0x1490>
    d578:	003a      	movs	r2, r7
    d57a:	4659      	mov	r1, fp
    d57c:	9806      	ldr	r0, [sp, #24]
    d57e:	f003 f86b 	bl	10658 <__sprint_r>
    d582:	2800      	cmp	r0, #0
    d584:	d101      	bne.n	d58a <_vfprintf_r+0x14d6>
    d586:	f7ff faab 	bl	cae0 <_vfprintf_r+0xa2c>
    d58a:	f7ff faab 	bl	cae4 <_vfprintf_r+0xa30>
    d58e:	4642      	mov	r2, r8
    d590:	9207      	str	r2, [sp, #28]
    d592:	f7fe fe1b 	bl	c1cc <_vfprintf_r+0x118>
    d596:	4244      	negs	r4, r0
    d598:	3010      	adds	r0, #16
    d59a:	db00      	blt.n	d59e <_vfprintf_r+0x14ea>
    d59c:	e0d8      	b.n	d750 <_vfprintf_r+0x169c>
    d59e:	4805      	ldr	r0, [pc, #20]	; (d5b4 <_vfprintf_r+0x1500>)
    d5a0:	2610      	movs	r6, #16
    d5a2:	0005      	movs	r5, r0
    d5a4:	e00c      	b.n	d5c0 <_vfprintf_r+0x150c>
    d5a6:	46c0      	nop			; (mov r8, r8)
    d5a8:	00011488 	.word	0x00011488
    d5ac:	00011144 	.word	0x00011144
    d5b0:	00011480 	.word	0x00011480
    d5b4:	0001149c 	.word	0x0001149c
    d5b8:	3208      	adds	r2, #8
    d5ba:	3c10      	subs	r4, #16
    d5bc:	2c10      	cmp	r4, #16
    d5be:	dd51      	ble.n	d664 <_vfprintf_r+0x15b0>
    d5c0:	3110      	adds	r1, #16
    d5c2:	3301      	adds	r3, #1
    d5c4:	6015      	str	r5, [r2, #0]
    d5c6:	6056      	str	r6, [r2, #4]
    d5c8:	60b9      	str	r1, [r7, #8]
    d5ca:	607b      	str	r3, [r7, #4]
    d5cc:	2b07      	cmp	r3, #7
    d5ce:	ddf3      	ble.n	d5b8 <_vfprintf_r+0x1504>
    d5d0:	003a      	movs	r2, r7
    d5d2:	4659      	mov	r1, fp
    d5d4:	9806      	ldr	r0, [sp, #24]
    d5d6:	f003 f83f 	bl	10658 <__sprint_r>
    d5da:	2800      	cmp	r0, #0
    d5dc:	d001      	beq.n	d5e2 <_vfprintf_r+0x152e>
    d5de:	f7ff faf9 	bl	cbd4 <_vfprintf_r+0xb20>
    d5e2:	68b9      	ldr	r1, [r7, #8]
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	aa32      	add	r2, sp, #200	; 0xc8
    d5e8:	e7e7      	b.n	d5ba <_vfprintf_r+0x1506>
    d5ea:	003a      	movs	r2, r7
    d5ec:	4659      	mov	r1, fp
    d5ee:	9806      	ldr	r0, [sp, #24]
    d5f0:	f003 f832 	bl	10658 <__sprint_r>
    d5f4:	2800      	cmp	r0, #0
    d5f6:	d001      	beq.n	d5fc <_vfprintf_r+0x1548>
    d5f8:	f7ff faec 	bl	cbd4 <_vfprintf_r+0xb20>
    d5fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d5fe:	68b9      	ldr	r1, [r7, #8]
    d600:	687b      	ldr	r3, [r7, #4]
    d602:	aa32      	add	r2, sp, #200	; 0xc8
    d604:	e62e      	b.n	d264 <_vfprintf_r+0x11b0>
    d606:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d60a:	4694      	mov	ip, r2
    d60c:	4463      	add	r3, ip
    d60e:	001a      	movs	r2, r3
    d610:	930e      	str	r3, [sp, #56]	; 0x38
    d612:	e75d      	b.n	d4d0 <_vfprintf_r+0x141c>
    d614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d616:	e599      	b.n	d14c <_vfprintf_r+0x1098>
    d618:	212e      	movs	r1, #46	; 0x2e
    d61a:	2330      	movs	r3, #48	; 0x30
    d61c:	aa16      	add	r2, sp, #88	; 0x58
    d61e:	1852      	adds	r2, r2, r1
    d620:	7013      	strb	r3, [r2, #0]
    d622:	002b      	movs	r3, r5
    d624:	aa16      	add	r2, sp, #88	; 0x58
    d626:	3101      	adds	r1, #1
    d628:	3330      	adds	r3, #48	; 0x30
    d62a:	1852      	adds	r2, r2, r1
    d62c:	7013      	strb	r3, [r2, #0]
    d62e:	ab22      	add	r3, sp, #136	; 0x88
    d630:	e6c1      	b.n	d3b6 <_vfprintf_r+0x1302>
    d632:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d634:	2b00      	cmp	r3, #0
    d636:	db52      	blt.n	d6de <_vfprintf_r+0x162a>
    d638:	ab16      	add	r3, sp, #88	; 0x58
    d63a:	7fdb      	ldrb	r3, [r3, #31]
    d63c:	4698      	mov	r8, r3
    d63e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d640:	2b47      	cmp	r3, #71	; 0x47
    d642:	dc48      	bgt.n	d6d6 <_vfprintf_r+0x1622>
    d644:	4b4e      	ldr	r3, [pc, #312]	; (d780 <_vfprintf_r+0x16cc>)
    d646:	9311      	str	r3, [sp, #68]	; 0x44
    d648:	f7ff f88c 	bl	c764 <_vfprintf_r+0x6b0>
    d64c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d64e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d650:	4694      	mov	ip, r2
    d652:	4463      	add	r3, ip
    d654:	4453      	add	r3, sl
    d656:	001a      	movs	r2, r3
    d658:	930e      	str	r3, [sp, #56]	; 0x38
    d65a:	43db      	mvns	r3, r3
    d65c:	17db      	asrs	r3, r3, #31
    d65e:	401a      	ands	r2, r3
    d660:	9208      	str	r2, [sp, #32]
    d662:	e595      	b.n	d190 <_vfprintf_r+0x10dc>
    d664:	46a9      	mov	r9, r5
    d666:	4648      	mov	r0, r9
    d668:	1909      	adds	r1, r1, r4
    d66a:	3301      	adds	r3, #1
    d66c:	6010      	str	r0, [r2, #0]
    d66e:	6054      	str	r4, [r2, #4]
    d670:	60b9      	str	r1, [r7, #8]
    d672:	3208      	adds	r2, #8
    d674:	607b      	str	r3, [r7, #4]
    d676:	2b07      	cmp	r3, #7
    d678:	dc00      	bgt.n	d67c <_vfprintf_r+0x15c8>
    d67a:	e5f6      	b.n	d26a <_vfprintf_r+0x11b6>
    d67c:	003a      	movs	r2, r7
    d67e:	4659      	mov	r1, fp
    d680:	9806      	ldr	r0, [sp, #24]
    d682:	f002 ffe9 	bl	10658 <__sprint_r>
    d686:	2800      	cmp	r0, #0
    d688:	d001      	beq.n	d68e <_vfprintf_r+0x15da>
    d68a:	f7ff faa3 	bl	cbd4 <_vfprintf_r+0xb20>
    d68e:	68b9      	ldr	r1, [r7, #8]
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	aa32      	add	r2, sp, #200	; 0xc8
    d694:	e5e9      	b.n	d26a <_vfprintf_r+0x11b6>
    d696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d69a:	1a98      	subs	r0, r3, r2
    d69c:	1c43      	adds	r3, r0, #1
    d69e:	001a      	movs	r2, r3
    d6a0:	930e      	str	r3, [sp, #56]	; 0x38
    d6a2:	e715      	b.n	d4d0 <_vfprintf_r+0x141c>
    d6a4:	4a37      	ldr	r2, [pc, #220]	; (d784 <_vfprintf_r+0x16d0>)
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	4691      	mov	r9, r2
    d6aa:	f7ff fbf5 	bl	ce98 <_vfprintf_r+0xde4>
    d6ae:	2301      	movs	r3, #1
    d6b0:	4023      	ands	r3, r4
    d6b2:	9313      	str	r3, [sp, #76]	; 0x4c
    d6b4:	d000      	beq.n	d6b8 <_vfprintf_r+0x1604>
    d6b6:	e689      	b.n	d3cc <_vfprintf_r+0x1318>
    d6b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d6ba:	43d3      	mvns	r3, r2
    d6bc:	17db      	asrs	r3, r3, #31
    d6be:	401a      	ands	r2, r3
    d6c0:	9208      	str	r2, [sp, #32]
    d6c2:	e565      	b.n	d190 <_vfprintf_r+0x10dc>
    d6c4:	2301      	movs	r3, #1
    d6c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d6c8:	391b      	subs	r1, #27
    d6ca:	1a9d      	subs	r5, r3, r2
    d6cc:	aa16      	add	r2, sp, #88	; 0x58
    d6ce:	332c      	adds	r3, #44	; 0x2c
    d6d0:	1852      	adds	r2, r2, r1
    d6d2:	7013      	strb	r3, [r2, #0]
    d6d4:	e62f      	b.n	d336 <_vfprintf_r+0x1282>
    d6d6:	4b2c      	ldr	r3, [pc, #176]	; (d788 <_vfprintf_r+0x16d4>)
    d6d8:	9311      	str	r3, [sp, #68]	; 0x44
    d6da:	f7ff f843 	bl	c764 <_vfprintf_r+0x6b0>
    d6de:	232d      	movs	r3, #45	; 0x2d
    d6e0:	aa16      	add	r2, sp, #88	; 0x58
    d6e2:	77d3      	strb	r3, [r2, #31]
    d6e4:	4698      	mov	r8, r3
    d6e6:	e7aa      	b.n	d63e <_vfprintf_r+0x158a>
    d6e8:	4653      	mov	r3, sl
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d101      	bne.n	d6f2 <_vfprintf_r+0x163e>
    d6ee:	07e3      	lsls	r3, r4, #31
    d6f0:	d503      	bpl.n	d6fa <_vfprintf_r+0x1646>
    d6f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d6f4:	1c58      	adds	r0, r3, #1
    d6f6:	0003      	movs	r3, r0
    d6f8:	e7ac      	b.n	d654 <_vfprintf_r+0x15a0>
    d6fa:	2301      	movs	r3, #1
    d6fc:	e708      	b.n	d510 <_vfprintf_r+0x145c>
    d6fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d700:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d702:	1a9b      	subs	r3, r3, r2
    d704:	9314      	str	r3, [sp, #80]	; 0x50
    d706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d708:	2b47      	cmp	r3, #71	; 0x47
    d70a:	d100      	bne.n	d70e <_vfprintf_r+0x165a>
    d70c:	e5f6      	b.n	d2fc <_vfprintf_r+0x1248>
    d70e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d710:	9313      	str	r3, [sp, #76]	; 0x4c
    d712:	e5fd      	b.n	d310 <_vfprintf_r+0x125c>
    d714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d716:	1d1d      	adds	r5, r3, #4
    d718:	681b      	ldr	r3, [r3, #0]
    d71a:	46a8      	mov	r8, r5
    d71c:	469a      	mov	sl, r3
    d71e:	2b00      	cmp	r3, #0
    d720:	db0a      	blt.n	d738 <_vfprintf_r+0x1684>
    d722:	4645      	mov	r5, r8
    d724:	9b07      	ldr	r3, [sp, #28]
    d726:	950f      	str	r5, [sp, #60]	; 0x3c
    d728:	785b      	ldrb	r3, [r3, #1]
    d72a:	9207      	str	r2, [sp, #28]
    d72c:	f7fe fd4b 	bl	c1c6 <_vfprintf_r+0x112>
    d730:	ab16      	add	r3, sp, #88	; 0x58
    d732:	77d8      	strb	r0, [r3, #31]
    d734:	f7ff f830 	bl	c798 <_vfprintf_r+0x6e4>
    d738:	2301      	movs	r3, #1
    d73a:	425b      	negs	r3, r3
    d73c:	469a      	mov	sl, r3
    d73e:	e7f0      	b.n	d722 <_vfprintf_r+0x166e>
    d740:	ab16      	add	r3, sp, #88	; 0x58
    d742:	77d8      	strb	r0, [r3, #31]
    d744:	f7fe ff27 	bl	c596 <_vfprintf_r+0x4e2>
    d748:	ab16      	add	r3, sp, #88	; 0x58
    d74a:	77d8      	strb	r0, [r3, #31]
    d74c:	f7fe fdce 	bl	c2ec <_vfprintf_r+0x238>
    d750:	480c      	ldr	r0, [pc, #48]	; (d784 <_vfprintf_r+0x16d0>)
    d752:	4681      	mov	r9, r0
    d754:	e787      	b.n	d666 <_vfprintf_r+0x15b2>
    d756:	ab16      	add	r3, sp, #88	; 0x58
    d758:	77d8      	strb	r0, [r3, #31]
    d75a:	f7ff f829 	bl	c7b0 <_vfprintf_r+0x6fc>
    d75e:	ab16      	add	r3, sp, #88	; 0x58
    d760:	77d8      	strb	r0, [r3, #31]
    d762:	f7fe ffc3 	bl	c6ec <_vfprintf_r+0x638>
    d766:	ab16      	add	r3, sp, #88	; 0x58
    d768:	77d8      	strb	r0, [r3, #31]
    d76a:	f7fe ffa5 	bl	c6b8 <_vfprintf_r+0x604>
    d76e:	ab16      	add	r3, sp, #88	; 0x58
    d770:	77d8      	strb	r0, [r3, #31]
    d772:	f7fe feaf 	bl	c4d4 <_vfprintf_r+0x420>
    d776:	aa16      	add	r2, sp, #88	; 0x58
    d778:	232e      	movs	r3, #46	; 0x2e
    d77a:	4694      	mov	ip, r2
    d77c:	4463      	add	r3, ip
    d77e:	e61a      	b.n	d3b6 <_vfprintf_r+0x1302>
    d780:	00011454 	.word	0x00011454
    d784:	0001149c 	.word	0x0001149c
    d788:	00011140 	.word	0x00011140

0000d78c <__sbprintf>:
    d78c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d78e:	0015      	movs	r5, r2
    d790:	2202      	movs	r2, #2
    d792:	4c1e      	ldr	r4, [pc, #120]	; (d80c <__sbprintf+0x80>)
    d794:	001f      	movs	r7, r3
    d796:	898b      	ldrh	r3, [r1, #12]
    d798:	44a5      	add	sp, r4
    d79a:	4393      	bics	r3, r2
    d79c:	466a      	mov	r2, sp
    d79e:	8193      	strh	r3, [r2, #12]
    d7a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    d7a2:	0006      	movs	r6, r0
    d7a4:	9319      	str	r3, [sp, #100]	; 0x64
    d7a6:	89cb      	ldrh	r3, [r1, #14]
    d7a8:	a816      	add	r0, sp, #88	; 0x58
    d7aa:	81d3      	strh	r3, [r2, #14]
    d7ac:	69cb      	ldr	r3, [r1, #28]
    d7ae:	000c      	movs	r4, r1
    d7b0:	9307      	str	r3, [sp, #28]
    d7b2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    d7b4:	9309      	str	r3, [sp, #36]	; 0x24
    d7b6:	ab1a      	add	r3, sp, #104	; 0x68
    d7b8:	9300      	str	r3, [sp, #0]
    d7ba:	9304      	str	r3, [sp, #16]
    d7bc:	2380      	movs	r3, #128	; 0x80
    d7be:	00db      	lsls	r3, r3, #3
    d7c0:	9302      	str	r3, [sp, #8]
    d7c2:	9305      	str	r3, [sp, #20]
    d7c4:	2300      	movs	r3, #0
    d7c6:	9306      	str	r3, [sp, #24]
    d7c8:	f001 fdca 	bl	f360 <__retarget_lock_init_recursive>
    d7cc:	002a      	movs	r2, r5
    d7ce:	003b      	movs	r3, r7
    d7d0:	4669      	mov	r1, sp
    d7d2:	0030      	movs	r0, r6
    d7d4:	f7fe fc6e 	bl	c0b4 <_vfprintf_r>
    d7d8:	1e05      	subs	r5, r0, #0
    d7da:	db05      	blt.n	d7e8 <__sbprintf+0x5c>
    d7dc:	4669      	mov	r1, sp
    d7de:	0030      	movs	r0, r6
    d7e0:	f001 fa26 	bl	ec30 <_fflush_r>
    d7e4:	2800      	cmp	r0, #0
    d7e6:	d10e      	bne.n	d806 <__sbprintf+0x7a>
    d7e8:	466b      	mov	r3, sp
    d7ea:	899b      	ldrh	r3, [r3, #12]
    d7ec:	065b      	lsls	r3, r3, #25
    d7ee:	d503      	bpl.n	d7f8 <__sbprintf+0x6c>
    d7f0:	2240      	movs	r2, #64	; 0x40
    d7f2:	89a3      	ldrh	r3, [r4, #12]
    d7f4:	4313      	orrs	r3, r2
    d7f6:	81a3      	strh	r3, [r4, #12]
    d7f8:	9816      	ldr	r0, [sp, #88]	; 0x58
    d7fa:	f001 fdb3 	bl	f364 <__retarget_lock_close_recursive>
    d7fe:	0028      	movs	r0, r5
    d800:	4b03      	ldr	r3, [pc, #12]	; (d810 <__sbprintf+0x84>)
    d802:	449d      	add	sp, r3
    d804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d806:	2501      	movs	r5, #1
    d808:	426d      	negs	r5, r5
    d80a:	e7ed      	b.n	d7e8 <__sbprintf+0x5c>
    d80c:	fffffb94 	.word	0xfffffb94
    d810:	0000046c 	.word	0x0000046c

0000d814 <__swsetup_r>:
    d814:	4b33      	ldr	r3, [pc, #204]	; (d8e4 <__swsetup_r+0xd0>)
    d816:	b570      	push	{r4, r5, r6, lr}
    d818:	0005      	movs	r5, r0
    d81a:	6818      	ldr	r0, [r3, #0]
    d81c:	000c      	movs	r4, r1
    d81e:	2800      	cmp	r0, #0
    d820:	d002      	beq.n	d828 <__swsetup_r+0x14>
    d822:	6b83      	ldr	r3, [r0, #56]	; 0x38
    d824:	2b00      	cmp	r3, #0
    d826:	d03c      	beq.n	d8a2 <__swsetup_r+0x8e>
    d828:	230c      	movs	r3, #12
    d82a:	5ee2      	ldrsh	r2, [r4, r3]
    d82c:	b293      	uxth	r3, r2
    d82e:	0719      	lsls	r1, r3, #28
    d830:	d50d      	bpl.n	d84e <__swsetup_r+0x3a>
    d832:	6921      	ldr	r1, [r4, #16]
    d834:	2900      	cmp	r1, #0
    d836:	d015      	beq.n	d864 <__swsetup_r+0x50>
    d838:	07da      	lsls	r2, r3, #31
    d83a:	d521      	bpl.n	d880 <__swsetup_r+0x6c>
    d83c:	2300      	movs	r3, #0
    d83e:	60a3      	str	r3, [r4, #8]
    d840:	6963      	ldr	r3, [r4, #20]
    d842:	2000      	movs	r0, #0
    d844:	425b      	negs	r3, r3
    d846:	61a3      	str	r3, [r4, #24]
    d848:	2900      	cmp	r1, #0
    d84a:	d021      	beq.n	d890 <__swsetup_r+0x7c>
    d84c:	bd70      	pop	{r4, r5, r6, pc}
    d84e:	06d9      	lsls	r1, r3, #27
    d850:	d53f      	bpl.n	d8d2 <__swsetup_r+0xbe>
    d852:	075b      	lsls	r3, r3, #29
    d854:	d428      	bmi.n	d8a8 <__swsetup_r+0x94>
    d856:	6921      	ldr	r1, [r4, #16]
    d858:	2308      	movs	r3, #8
    d85a:	4313      	orrs	r3, r2
    d85c:	81a3      	strh	r3, [r4, #12]
    d85e:	b29b      	uxth	r3, r3
    d860:	2900      	cmp	r1, #0
    d862:	d1e9      	bne.n	d838 <__swsetup_r+0x24>
    d864:	22a0      	movs	r2, #160	; 0xa0
    d866:	2080      	movs	r0, #128	; 0x80
    d868:	0092      	lsls	r2, r2, #2
    d86a:	0080      	lsls	r0, r0, #2
    d86c:	401a      	ands	r2, r3
    d86e:	4282      	cmp	r2, r0
    d870:	d0e2      	beq.n	d838 <__swsetup_r+0x24>
    d872:	0021      	movs	r1, r4
    d874:	0028      	movs	r0, r5
    d876:	f001 fdab 	bl	f3d0 <__smakebuf_r>
    d87a:	89a3      	ldrh	r3, [r4, #12]
    d87c:	6921      	ldr	r1, [r4, #16]
    d87e:	e7db      	b.n	d838 <__swsetup_r+0x24>
    d880:	2200      	movs	r2, #0
    d882:	079b      	lsls	r3, r3, #30
    d884:	d400      	bmi.n	d888 <__swsetup_r+0x74>
    d886:	6962      	ldr	r2, [r4, #20]
    d888:	60a2      	str	r2, [r4, #8]
    d88a:	2000      	movs	r0, #0
    d88c:	2900      	cmp	r1, #0
    d88e:	d1dd      	bne.n	d84c <__swsetup_r+0x38>
    d890:	220c      	movs	r2, #12
    d892:	5ea3      	ldrsh	r3, [r4, r2]
    d894:	061a      	lsls	r2, r3, #24
    d896:	d5d9      	bpl.n	d84c <__swsetup_r+0x38>
    d898:	2240      	movs	r2, #64	; 0x40
    d89a:	4313      	orrs	r3, r2
    d89c:	81a3      	strh	r3, [r4, #12]
    d89e:	3801      	subs	r0, #1
    d8a0:	e7d4      	b.n	d84c <__swsetup_r+0x38>
    d8a2:	f001 fa1f 	bl	ece4 <__sinit>
    d8a6:	e7bf      	b.n	d828 <__swsetup_r+0x14>
    d8a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d8aa:	2900      	cmp	r1, #0
    d8ac:	d00a      	beq.n	d8c4 <__swsetup_r+0xb0>
    d8ae:	0023      	movs	r3, r4
    d8b0:	3340      	adds	r3, #64	; 0x40
    d8b2:	4299      	cmp	r1, r3
    d8b4:	d004      	beq.n	d8c0 <__swsetup_r+0xac>
    d8b6:	0028      	movs	r0, r5
    d8b8:	f001 fabe 	bl	ee38 <_free_r>
    d8bc:	230c      	movs	r3, #12
    d8be:	5ee2      	ldrsh	r2, [r4, r3]
    d8c0:	2300      	movs	r3, #0
    d8c2:	6323      	str	r3, [r4, #48]	; 0x30
    d8c4:	2324      	movs	r3, #36	; 0x24
    d8c6:	439a      	bics	r2, r3
    d8c8:	2300      	movs	r3, #0
    d8ca:	6921      	ldr	r1, [r4, #16]
    d8cc:	6063      	str	r3, [r4, #4]
    d8ce:	6021      	str	r1, [r4, #0]
    d8d0:	e7c2      	b.n	d858 <__swsetup_r+0x44>
    d8d2:	2309      	movs	r3, #9
    d8d4:	602b      	str	r3, [r5, #0]
    d8d6:	2340      	movs	r3, #64	; 0x40
    d8d8:	2001      	movs	r0, #1
    d8da:	431a      	orrs	r2, r3
    d8dc:	81a2      	strh	r2, [r4, #12]
    d8de:	4240      	negs	r0, r0
    d8e0:	e7b4      	b.n	d84c <__swsetup_r+0x38>
    d8e2:	46c0      	nop			; (mov r8, r8)
    d8e4:	20000070 	.word	0x20000070

0000d8e8 <__register_exitproc>:
    d8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8ea:	464e      	mov	r6, r9
    d8ec:	4645      	mov	r5, r8
    d8ee:	46de      	mov	lr, fp
    d8f0:	4657      	mov	r7, sl
    d8f2:	b5e0      	push	{r5, r6, r7, lr}
    d8f4:	4d36      	ldr	r5, [pc, #216]	; (d9d0 <__register_exitproc+0xe8>)
    d8f6:	b083      	sub	sp, #12
    d8f8:	0006      	movs	r6, r0
    d8fa:	6828      	ldr	r0, [r5, #0]
    d8fc:	4698      	mov	r8, r3
    d8fe:	000f      	movs	r7, r1
    d900:	4691      	mov	r9, r2
    d902:	f001 fd31 	bl	f368 <__retarget_lock_acquire_recursive>
    d906:	4b33      	ldr	r3, [pc, #204]	; (d9d4 <__register_exitproc+0xec>)
    d908:	681c      	ldr	r4, [r3, #0]
    d90a:	23a4      	movs	r3, #164	; 0xa4
    d90c:	005b      	lsls	r3, r3, #1
    d90e:	58e0      	ldr	r0, [r4, r3]
    d910:	2800      	cmp	r0, #0
    d912:	d052      	beq.n	d9ba <__register_exitproc+0xd2>
    d914:	6843      	ldr	r3, [r0, #4]
    d916:	2b1f      	cmp	r3, #31
    d918:	dc13      	bgt.n	d942 <__register_exitproc+0x5a>
    d91a:	1c5a      	adds	r2, r3, #1
    d91c:	9201      	str	r2, [sp, #4]
    d91e:	2e00      	cmp	r6, #0
    d920:	d128      	bne.n	d974 <__register_exitproc+0x8c>
    d922:	9a01      	ldr	r2, [sp, #4]
    d924:	3302      	adds	r3, #2
    d926:	009b      	lsls	r3, r3, #2
    d928:	6042      	str	r2, [r0, #4]
    d92a:	501f      	str	r7, [r3, r0]
    d92c:	6828      	ldr	r0, [r5, #0]
    d92e:	f001 fd1d 	bl	f36c <__retarget_lock_release_recursive>
    d932:	2000      	movs	r0, #0
    d934:	b003      	add	sp, #12
    d936:	bc3c      	pop	{r2, r3, r4, r5}
    d938:	4690      	mov	r8, r2
    d93a:	4699      	mov	r9, r3
    d93c:	46a2      	mov	sl, r4
    d93e:	46ab      	mov	fp, r5
    d940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d942:	4b25      	ldr	r3, [pc, #148]	; (d9d8 <__register_exitproc+0xf0>)
    d944:	2b00      	cmp	r3, #0
    d946:	d03d      	beq.n	d9c4 <__register_exitproc+0xdc>
    d948:	20c8      	movs	r0, #200	; 0xc8
    d94a:	0040      	lsls	r0, r0, #1
    d94c:	f7f8 fd8c 	bl	6468 <malloc>
    d950:	2800      	cmp	r0, #0
    d952:	d037      	beq.n	d9c4 <__register_exitproc+0xdc>
    d954:	22a4      	movs	r2, #164	; 0xa4
    d956:	2300      	movs	r3, #0
    d958:	0052      	lsls	r2, r2, #1
    d95a:	58a1      	ldr	r1, [r4, r2]
    d95c:	6043      	str	r3, [r0, #4]
    d95e:	6001      	str	r1, [r0, #0]
    d960:	50a0      	str	r0, [r4, r2]
    d962:	3240      	adds	r2, #64	; 0x40
    d964:	5083      	str	r3, [r0, r2]
    d966:	3204      	adds	r2, #4
    d968:	5083      	str	r3, [r0, r2]
    d96a:	3301      	adds	r3, #1
    d96c:	9301      	str	r3, [sp, #4]
    d96e:	2300      	movs	r3, #0
    d970:	2e00      	cmp	r6, #0
    d972:	d0d6      	beq.n	d922 <__register_exitproc+0x3a>
    d974:	009a      	lsls	r2, r3, #2
    d976:	4692      	mov	sl, r2
    d978:	4482      	add	sl, r0
    d97a:	464a      	mov	r2, r9
    d97c:	2188      	movs	r1, #136	; 0x88
    d97e:	4654      	mov	r4, sl
    d980:	5062      	str	r2, [r4, r1]
    d982:	22c4      	movs	r2, #196	; 0xc4
    d984:	0052      	lsls	r2, r2, #1
    d986:	4691      	mov	r9, r2
    d988:	4481      	add	r9, r0
    d98a:	464a      	mov	r2, r9
    d98c:	3987      	subs	r1, #135	; 0x87
    d98e:	4099      	lsls	r1, r3
    d990:	6812      	ldr	r2, [r2, #0]
    d992:	468b      	mov	fp, r1
    d994:	430a      	orrs	r2, r1
    d996:	4694      	mov	ip, r2
    d998:	464a      	mov	r2, r9
    d99a:	4661      	mov	r1, ip
    d99c:	6011      	str	r1, [r2, #0]
    d99e:	2284      	movs	r2, #132	; 0x84
    d9a0:	4641      	mov	r1, r8
    d9a2:	0052      	lsls	r2, r2, #1
    d9a4:	50a1      	str	r1, [r4, r2]
    d9a6:	2e02      	cmp	r6, #2
    d9a8:	d1bb      	bne.n	d922 <__register_exitproc+0x3a>
    d9aa:	0002      	movs	r2, r0
    d9ac:	465c      	mov	r4, fp
    d9ae:	328d      	adds	r2, #141	; 0x8d
    d9b0:	32ff      	adds	r2, #255	; 0xff
    d9b2:	6811      	ldr	r1, [r2, #0]
    d9b4:	430c      	orrs	r4, r1
    d9b6:	6014      	str	r4, [r2, #0]
    d9b8:	e7b3      	b.n	d922 <__register_exitproc+0x3a>
    d9ba:	0020      	movs	r0, r4
    d9bc:	304d      	adds	r0, #77	; 0x4d
    d9be:	30ff      	adds	r0, #255	; 0xff
    d9c0:	50e0      	str	r0, [r4, r3]
    d9c2:	e7a7      	b.n	d914 <__register_exitproc+0x2c>
    d9c4:	6828      	ldr	r0, [r5, #0]
    d9c6:	f001 fcd1 	bl	f36c <__retarget_lock_release_recursive>
    d9ca:	2001      	movs	r0, #1
    d9cc:	4240      	negs	r0, r0
    d9ce:	e7b1      	b.n	d934 <__register_exitproc+0x4c>
    d9d0:	200004a0 	.word	0x200004a0
    d9d4:	000112e8 	.word	0x000112e8
    d9d8:	00006469 	.word	0x00006469

0000d9dc <register_fini>:
    d9dc:	4b03      	ldr	r3, [pc, #12]	; (d9ec <register_fini+0x10>)
    d9de:	b510      	push	{r4, lr}
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d002      	beq.n	d9ea <register_fini+0xe>
    d9e4:	4802      	ldr	r0, [pc, #8]	; (d9f0 <register_fini+0x14>)
    d9e6:	f000 f805 	bl	d9f4 <atexit>
    d9ea:	bd10      	pop	{r4, pc}
    d9ec:	00000000 	.word	0x00000000
    d9f0:	0000ed65 	.word	0x0000ed65

0000d9f4 <atexit>:
    d9f4:	b510      	push	{r4, lr}
    d9f6:	0001      	movs	r1, r0
    d9f8:	2300      	movs	r3, #0
    d9fa:	2200      	movs	r2, #0
    d9fc:	2000      	movs	r0, #0
    d9fe:	f7ff ff73 	bl	d8e8 <__register_exitproc>
    da02:	bd10      	pop	{r4, pc}

0000da04 <quorem>:
    da04:	b5f0      	push	{r4, r5, r6, r7, lr}
    da06:	4645      	mov	r5, r8
    da08:	4680      	mov	r8, r0
    da0a:	46de      	mov	lr, fp
    da0c:	4657      	mov	r7, sl
    da0e:	464e      	mov	r6, r9
    da10:	4642      	mov	r2, r8
    da12:	b5e0      	push	{r5, r6, r7, lr}
    da14:	690c      	ldr	r4, [r1, #16]
    da16:	6912      	ldr	r2, [r2, #16]
    da18:	b085      	sub	sp, #20
    da1a:	000b      	movs	r3, r1
    da1c:	9102      	str	r1, [sp, #8]
    da1e:	2000      	movs	r0, #0
    da20:	4294      	cmp	r4, r2
    da22:	dd00      	ble.n	da26 <quorem+0x22>
    da24:	e090      	b.n	db48 <quorem+0x144>
    da26:	2214      	movs	r2, #20
    da28:	4694      	mov	ip, r2
    da2a:	4463      	add	r3, ip
    da2c:	4699      	mov	r9, r3
    da2e:	464a      	mov	r2, r9
    da30:	3c01      	subs	r4, #1
    da32:	00a3      	lsls	r3, r4, #2
    da34:	18d6      	adds	r6, r2, r3
    da36:	2214      	movs	r2, #20
    da38:	4442      	add	r2, r8
    da3a:	4693      	mov	fp, r2
    da3c:	449b      	add	fp, r3
    da3e:	6833      	ldr	r3, [r6, #0]
    da40:	0015      	movs	r5, r2
    da42:	1c59      	adds	r1, r3, #1
    da44:	465b      	mov	r3, fp
    da46:	6818      	ldr	r0, [r3, #0]
    da48:	9201      	str	r2, [sp, #4]
    da4a:	f7fb f961 	bl	8d10 <__udivsi3>
    da4e:	1e03      	subs	r3, r0, #0
    da50:	9000      	str	r0, [sp, #0]
    da52:	d042      	beq.n	dada <quorem+0xd6>
    da54:	0029      	movs	r1, r5
    da56:	2700      	movs	r7, #0
    da58:	464d      	mov	r5, r9
    da5a:	2000      	movs	r0, #0
    da5c:	46b1      	mov	r9, r6
    da5e:	46a2      	mov	sl, r4
    da60:	003e      	movs	r6, r7
    da62:	0004      	movs	r4, r0
    da64:	469c      	mov	ip, r3
    da66:	002f      	movs	r7, r5
    da68:	0008      	movs	r0, r1
    da6a:	9503      	str	r5, [sp, #12]
    da6c:	4663      	mov	r3, ip
    da6e:	cf04      	ldmia	r7!, {r2}
    da70:	0415      	lsls	r5, r2, #16
    da72:	0c2d      	lsrs	r5, r5, #16
    da74:	435d      	muls	r5, r3
    da76:	0c12      	lsrs	r2, r2, #16
    da78:	435a      	muls	r2, r3
    da7a:	19ad      	adds	r5, r5, r6
    da7c:	0c2b      	lsrs	r3, r5, #16
    da7e:	18d2      	adds	r2, r2, r3
    da80:	6803      	ldr	r3, [r0, #0]
    da82:	042d      	lsls	r5, r5, #16
    da84:	0419      	lsls	r1, r3, #16
    da86:	0c09      	lsrs	r1, r1, #16
    da88:	1909      	adds	r1, r1, r4
    da8a:	0c16      	lsrs	r6, r2, #16
    da8c:	0c2d      	lsrs	r5, r5, #16
    da8e:	0412      	lsls	r2, r2, #16
    da90:	1b49      	subs	r1, r1, r5
    da92:	0c12      	lsrs	r2, r2, #16
    da94:	0c1b      	lsrs	r3, r3, #16
    da96:	1a9b      	subs	r3, r3, r2
    da98:	140a      	asrs	r2, r1, #16
    da9a:	189b      	adds	r3, r3, r2
    da9c:	0409      	lsls	r1, r1, #16
    da9e:	141c      	asrs	r4, r3, #16
    daa0:	0c09      	lsrs	r1, r1, #16
    daa2:	041b      	lsls	r3, r3, #16
    daa4:	4319      	orrs	r1, r3
    daa6:	c002      	stmia	r0!, {r1}
    daa8:	45b9      	cmp	r9, r7
    daaa:	d2df      	bcs.n	da6c <quorem+0x68>
    daac:	9b03      	ldr	r3, [sp, #12]
    daae:	464e      	mov	r6, r9
    dab0:	4699      	mov	r9, r3
    dab2:	465b      	mov	r3, fp
    dab4:	681b      	ldr	r3, [r3, #0]
    dab6:	4654      	mov	r4, sl
    dab8:	2b00      	cmp	r3, #0
    daba:	d10e      	bne.n	dada <quorem+0xd6>
    dabc:	465b      	mov	r3, fp
    dabe:	9a01      	ldr	r2, [sp, #4]
    dac0:	3b04      	subs	r3, #4
    dac2:	429a      	cmp	r2, r3
    dac4:	d304      	bcc.n	dad0 <quorem+0xcc>
    dac6:	e006      	b.n	dad6 <quorem+0xd2>
    dac8:	3b04      	subs	r3, #4
    daca:	3c01      	subs	r4, #1
    dacc:	429a      	cmp	r2, r3
    dace:	d202      	bcs.n	dad6 <quorem+0xd2>
    dad0:	6819      	ldr	r1, [r3, #0]
    dad2:	2900      	cmp	r1, #0
    dad4:	d0f8      	beq.n	dac8 <quorem+0xc4>
    dad6:	4643      	mov	r3, r8
    dad8:	611c      	str	r4, [r3, #16]
    dada:	9902      	ldr	r1, [sp, #8]
    dadc:	4640      	mov	r0, r8
    dade:	f002 fa47 	bl	ff70 <__mcmp>
    dae2:	2800      	cmp	r0, #0
    dae4:	db2f      	blt.n	db46 <quorem+0x142>
    dae6:	464f      	mov	r7, r9
    dae8:	2000      	movs	r0, #0
    daea:	9b00      	ldr	r3, [sp, #0]
    daec:	9d01      	ldr	r5, [sp, #4]
    daee:	3301      	adds	r3, #1
    daf0:	9300      	str	r3, [sp, #0]
    daf2:	682b      	ldr	r3, [r5, #0]
    daf4:	cf02      	ldmia	r7!, {r1}
    daf6:	041a      	lsls	r2, r3, #16
    daf8:	0c12      	lsrs	r2, r2, #16
    dafa:	1810      	adds	r0, r2, r0
    dafc:	040a      	lsls	r2, r1, #16
    dafe:	0c12      	lsrs	r2, r2, #16
    db00:	1a82      	subs	r2, r0, r2
    db02:	0c09      	lsrs	r1, r1, #16
    db04:	0c1b      	lsrs	r3, r3, #16
    db06:	1a5b      	subs	r3, r3, r1
    db08:	1411      	asrs	r1, r2, #16
    db0a:	185b      	adds	r3, r3, r1
    db0c:	0412      	lsls	r2, r2, #16
    db0e:	1418      	asrs	r0, r3, #16
    db10:	0c12      	lsrs	r2, r2, #16
    db12:	041b      	lsls	r3, r3, #16
    db14:	4313      	orrs	r3, r2
    db16:	c508      	stmia	r5!, {r3}
    db18:	42be      	cmp	r6, r7
    db1a:	d2ea      	bcs.n	daf2 <quorem+0xee>
    db1c:	9901      	ldr	r1, [sp, #4]
    db1e:	00a3      	lsls	r3, r4, #2
    db20:	468c      	mov	ip, r1
    db22:	4463      	add	r3, ip
    db24:	681a      	ldr	r2, [r3, #0]
    db26:	2a00      	cmp	r2, #0
    db28:	d10d      	bne.n	db46 <quorem+0x142>
    db2a:	3b04      	subs	r3, #4
    db2c:	000a      	movs	r2, r1
    db2e:	4299      	cmp	r1, r3
    db30:	d304      	bcc.n	db3c <quorem+0x138>
    db32:	e006      	b.n	db42 <quorem+0x13e>
    db34:	3b04      	subs	r3, #4
    db36:	3c01      	subs	r4, #1
    db38:	429a      	cmp	r2, r3
    db3a:	d202      	bcs.n	db42 <quorem+0x13e>
    db3c:	6819      	ldr	r1, [r3, #0]
    db3e:	2900      	cmp	r1, #0
    db40:	d0f8      	beq.n	db34 <quorem+0x130>
    db42:	4643      	mov	r3, r8
    db44:	611c      	str	r4, [r3, #16]
    db46:	9800      	ldr	r0, [sp, #0]
    db48:	b005      	add	sp, #20
    db4a:	bc3c      	pop	{r2, r3, r4, r5}
    db4c:	4690      	mov	r8, r2
    db4e:	4699      	mov	r9, r3
    db50:	46a2      	mov	sl, r4
    db52:	46ab      	mov	fp, r5
    db54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db56:	46c0      	nop			; (mov r8, r8)

0000db58 <_dtoa_r>:
    db58:	b5f0      	push	{r4, r5, r6, r7, lr}
    db5a:	4657      	mov	r7, sl
    db5c:	464e      	mov	r6, r9
    db5e:	4645      	mov	r5, r8
    db60:	46de      	mov	lr, fp
    db62:	b5e0      	push	{r5, r6, r7, lr}
    db64:	6c01      	ldr	r1, [r0, #64]	; 0x40
    db66:	b099      	sub	sp, #100	; 0x64
    db68:	4682      	mov	sl, r0
    db6a:	001d      	movs	r5, r3
    db6c:	0016      	movs	r6, r2
    db6e:	001f      	movs	r7, r3
    db70:	2900      	cmp	r1, #0
    db72:	d009      	beq.n	db88 <_dtoa_r+0x30>
    db74:	2301      	movs	r3, #1
    db76:	6c42      	ldr	r2, [r0, #68]	; 0x44
    db78:	4093      	lsls	r3, r2
    db7a:	604a      	str	r2, [r1, #4]
    db7c:	608b      	str	r3, [r1, #8]
    db7e:	f001 ffeb 	bl	fb58 <_Bfree>
    db82:	2300      	movs	r3, #0
    db84:	4652      	mov	r2, sl
    db86:	6413      	str	r3, [r2, #64]	; 0x40
    db88:	46b8      	mov	r8, r7
    db8a:	2f00      	cmp	r7, #0
    db8c:	db37      	blt.n	dbfe <_dtoa_r+0xa6>
    db8e:	2300      	movs	r3, #0
    db90:	9a25      	ldr	r2, [sp, #148]	; 0x94
    db92:	6013      	str	r3, [r2, #0]
    db94:	4642      	mov	r2, r8
    db96:	4bd6      	ldr	r3, [pc, #856]	; (def0 <_dtoa_r+0x398>)
    db98:	401a      	ands	r2, r3
    db9a:	429a      	cmp	r2, r3
    db9c:	d018      	beq.n	dbd0 <_dtoa_r+0x78>
    db9e:	2200      	movs	r2, #0
    dba0:	2300      	movs	r3, #0
    dba2:	0030      	movs	r0, r6
    dba4:	0039      	movs	r1, r7
    dba6:	f7fb fa39 	bl	901c <__aeabi_dcmpeq>
    dbaa:	2800      	cmp	r0, #0
    dbac:	d02f      	beq.n	dc0e <_dtoa_r+0xb6>
    dbae:	2301      	movs	r3, #1
    dbb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dbb2:	6013      	str	r3, [r2, #0]
    dbb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d100      	bne.n	dbbc <_dtoa_r+0x64>
    dbba:	e22a      	b.n	e012 <_dtoa_r+0x4ba>
    dbbc:	48cd      	ldr	r0, [pc, #820]	; (def4 <_dtoa_r+0x39c>)
    dbbe:	6018      	str	r0, [r3, #0]
    dbc0:	3801      	subs	r0, #1
    dbc2:	b019      	add	sp, #100	; 0x64
    dbc4:	bc3c      	pop	{r2, r3, r4, r5}
    dbc6:	4690      	mov	r8, r2
    dbc8:	4699      	mov	r9, r3
    dbca:	46a2      	mov	sl, r4
    dbcc:	46ab      	mov	fp, r5
    dbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbd0:	4bc9      	ldr	r3, [pc, #804]	; (def8 <_dtoa_r+0x3a0>)
    dbd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dbd4:	6013      	str	r3, [r2, #0]
    dbd6:	2e00      	cmp	r6, #0
    dbd8:	d10b      	bne.n	dbf2 <_dtoa_r+0x9a>
    dbda:	4643      	mov	r3, r8
    dbdc:	0318      	lsls	r0, r3, #12
    dbde:	d108      	bne.n	dbf2 <_dtoa_r+0x9a>
    dbe0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dbe2:	48c6      	ldr	r0, [pc, #792]	; (defc <_dtoa_r+0x3a4>)
    dbe4:	2b00      	cmp	r3, #0
    dbe6:	d0ec      	beq.n	dbc2 <_dtoa_r+0x6a>
    dbe8:	0003      	movs	r3, r0
    dbea:	3308      	adds	r3, #8
    dbec:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dbee:	6013      	str	r3, [r2, #0]
    dbf0:	e7e7      	b.n	dbc2 <_dtoa_r+0x6a>
    dbf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dbf4:	48c2      	ldr	r0, [pc, #776]	; (df00 <_dtoa_r+0x3a8>)
    dbf6:	2b00      	cmp	r3, #0
    dbf8:	d0e3      	beq.n	dbc2 <_dtoa_r+0x6a>
    dbfa:	1cc3      	adds	r3, r0, #3
    dbfc:	e7f6      	b.n	dbec <_dtoa_r+0x94>
    dbfe:	2301      	movs	r3, #1
    dc00:	9a25      	ldr	r2, [sp, #148]	; 0x94
    dc02:	0068      	lsls	r0, r5, #1
    dc04:	6013      	str	r3, [r2, #0]
    dc06:	0843      	lsrs	r3, r0, #1
    dc08:	4698      	mov	r8, r3
    dc0a:	001f      	movs	r7, r3
    dc0c:	e7c2      	b.n	db94 <_dtoa_r+0x3c>
    dc0e:	ab16      	add	r3, sp, #88	; 0x58
    dc10:	9301      	str	r3, [sp, #4]
    dc12:	ab17      	add	r3, sp, #92	; 0x5c
    dc14:	9300      	str	r3, [sp, #0]
    dc16:	0032      	movs	r2, r6
    dc18:	003b      	movs	r3, r7
    dc1a:	4650      	mov	r0, sl
    dc1c:	f002 fa5e 	bl	100dc <__d2b>
    dc20:	4643      	mov	r3, r8
    dc22:	4683      	mov	fp, r0
    dc24:	0d1a      	lsrs	r2, r3, #20
    dc26:	d100      	bne.n	dc2a <_dtoa_r+0xd2>
    dc28:	e1d6      	b.n	dfd8 <_dtoa_r+0x480>
    dc2a:	033b      	lsls	r3, r7, #12
    dc2c:	4cb5      	ldr	r4, [pc, #724]	; (df04 <_dtoa_r+0x3ac>)
    dc2e:	0b1b      	lsrs	r3, r3, #12
    dc30:	431c      	orrs	r4, r3
    dc32:	4bb5      	ldr	r3, [pc, #724]	; (df08 <_dtoa_r+0x3b0>)
    dc34:	0030      	movs	r0, r6
    dc36:	4698      	mov	r8, r3
    dc38:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dc3a:	0021      	movs	r1, r4
    dc3c:	4699      	mov	r9, r3
    dc3e:	2300      	movs	r3, #0
    dc40:	4490      	add	r8, r2
    dc42:	930f      	str	r3, [sp, #60]	; 0x3c
    dc44:	2200      	movs	r2, #0
    dc46:	4bb1      	ldr	r3, [pc, #708]	; (df0c <_dtoa_r+0x3b4>)
    dc48:	f7fd fc28 	bl	b49c <__aeabi_dsub>
    dc4c:	4ab0      	ldr	r2, [pc, #704]	; (df10 <_dtoa_r+0x3b8>)
    dc4e:	4bb1      	ldr	r3, [pc, #708]	; (df14 <_dtoa_r+0x3bc>)
    dc50:	f7fd f9a4 	bl	af9c <__aeabi_dmul>
    dc54:	4ab0      	ldr	r2, [pc, #704]	; (df18 <_dtoa_r+0x3c0>)
    dc56:	4bb1      	ldr	r3, [pc, #708]	; (df1c <_dtoa_r+0x3c4>)
    dc58:	f7fc fa5c 	bl	a114 <__aeabi_dadd>
    dc5c:	0004      	movs	r4, r0
    dc5e:	4640      	mov	r0, r8
    dc60:	000d      	movs	r5, r1
    dc62:	f7fd ff85 	bl	bb70 <__aeabi_i2d>
    dc66:	4aae      	ldr	r2, [pc, #696]	; (df20 <_dtoa_r+0x3c8>)
    dc68:	4bae      	ldr	r3, [pc, #696]	; (df24 <_dtoa_r+0x3cc>)
    dc6a:	f7fd f997 	bl	af9c <__aeabi_dmul>
    dc6e:	0002      	movs	r2, r0
    dc70:	000b      	movs	r3, r1
    dc72:	0020      	movs	r0, r4
    dc74:	0029      	movs	r1, r5
    dc76:	f7fc fa4d 	bl	a114 <__aeabi_dadd>
    dc7a:	0004      	movs	r4, r0
    dc7c:	000d      	movs	r5, r1
    dc7e:	f7fd ff43 	bl	bb08 <__aeabi_d2iz>
    dc82:	2200      	movs	r2, #0
    dc84:	9003      	str	r0, [sp, #12]
    dc86:	2300      	movs	r3, #0
    dc88:	0020      	movs	r0, r4
    dc8a:	0029      	movs	r1, r5
    dc8c:	f7fb f9cc 	bl	9028 <__aeabi_dcmplt>
    dc90:	2800      	cmp	r0, #0
    dc92:	d000      	beq.n	dc96 <_dtoa_r+0x13e>
    dc94:	e2b1      	b.n	e1fa <_dtoa_r+0x6a2>
    dc96:	2301      	movs	r3, #1
    dc98:	9c03      	ldr	r4, [sp, #12]
    dc9a:	930c      	str	r3, [sp, #48]	; 0x30
    dc9c:	2c16      	cmp	r4, #22
    dc9e:	d810      	bhi.n	dcc2 <_dtoa_r+0x16a>
    dca0:	49a1      	ldr	r1, [pc, #644]	; (df28 <_dtoa_r+0x3d0>)
    dca2:	00e3      	lsls	r3, r4, #3
    dca4:	18c9      	adds	r1, r1, r3
    dca6:	0032      	movs	r2, r6
    dca8:	6808      	ldr	r0, [r1, #0]
    dcaa:	6849      	ldr	r1, [r1, #4]
    dcac:	003b      	movs	r3, r7
    dcae:	f7fb f9cf 	bl	9050 <__aeabi_dcmpgt>
    dcb2:	2800      	cmp	r0, #0
    dcb4:	d100      	bne.n	dcb8 <_dtoa_r+0x160>
    dcb6:	e31d      	b.n	e2f4 <_dtoa_r+0x79c>
    dcb8:	0023      	movs	r3, r4
    dcba:	3b01      	subs	r3, #1
    dcbc:	9303      	str	r3, [sp, #12]
    dcbe:	2300      	movs	r3, #0
    dcc0:	930c      	str	r3, [sp, #48]	; 0x30
    dcc2:	464b      	mov	r3, r9
    dcc4:	4642      	mov	r2, r8
    dcc6:	1a9a      	subs	r2, r3, r2
    dcc8:	2300      	movs	r3, #0
    dcca:	9306      	str	r3, [sp, #24]
    dccc:	0013      	movs	r3, r2
    dcce:	3b01      	subs	r3, #1
    dcd0:	9304      	str	r3, [sp, #16]
    dcd2:	d500      	bpl.n	dcd6 <_dtoa_r+0x17e>
    dcd4:	e2a1      	b.n	e21a <_dtoa_r+0x6c2>
    dcd6:	9b03      	ldr	r3, [sp, #12]
    dcd8:	2b00      	cmp	r3, #0
    dcda:	da00      	bge.n	dcde <_dtoa_r+0x186>
    dcdc:	e284      	b.n	e1e8 <_dtoa_r+0x690>
    dcde:	469c      	mov	ip, r3
    dce0:	930d      	str	r3, [sp, #52]	; 0x34
    dce2:	2300      	movs	r3, #0
    dce4:	9a04      	ldr	r2, [sp, #16]
    dce6:	4699      	mov	r9, r3
    dce8:	0011      	movs	r1, r2
    dcea:	4461      	add	r1, ip
    dcec:	9104      	str	r1, [sp, #16]
    dcee:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dcf0:	2b09      	cmp	r3, #9
    dcf2:	d900      	bls.n	dcf6 <_dtoa_r+0x19e>
    dcf4:	e18f      	b.n	e016 <_dtoa_r+0x4be>
    dcf6:	2401      	movs	r4, #1
    dcf8:	2b05      	cmp	r3, #5
    dcfa:	dd02      	ble.n	dd02 <_dtoa_r+0x1aa>
    dcfc:	2400      	movs	r4, #0
    dcfe:	3b04      	subs	r3, #4
    dd00:	9322      	str	r3, [sp, #136]	; 0x88
    dd02:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dd04:	2b03      	cmp	r3, #3
    dd06:	d101      	bne.n	dd0c <_dtoa_r+0x1b4>
    dd08:	f000 fcce 	bl	e6a8 <_dtoa_r+0xb50>
    dd0c:	dc01      	bgt.n	dd12 <_dtoa_r+0x1ba>
    dd0e:	f000 fc92 	bl	e636 <_dtoa_r+0xade>
    dd12:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dd14:	2b04      	cmp	r3, #4
    dd16:	d101      	bne.n	dd1c <_dtoa_r+0x1c4>
    dd18:	f000 fc40 	bl	e59c <_dtoa_r+0xa44>
    dd1c:	2301      	movs	r3, #1
    dd1e:	930b      	str	r3, [sp, #44]	; 0x2c
    dd20:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dd22:	2b05      	cmp	r3, #5
    dd24:	d001      	beq.n	dd2a <_dtoa_r+0x1d2>
    dd26:	f000 fc8b 	bl	e640 <_dtoa_r+0xae8>
    dd2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    dd2c:	9b03      	ldr	r3, [sp, #12]
    dd2e:	4694      	mov	ip, r2
    dd30:	4463      	add	r3, ip
    dd32:	930e      	str	r3, [sp, #56]	; 0x38
    dd34:	3301      	adds	r3, #1
    dd36:	9307      	str	r3, [sp, #28]
    dd38:	1e1d      	subs	r5, r3, #0
    dd3a:	dc01      	bgt.n	dd40 <_dtoa_r+0x1e8>
    dd3c:	f000 fd49 	bl	e7d2 <_dtoa_r+0xc7a>
    dd40:	9b07      	ldr	r3, [sp, #28]
    dd42:	4698      	mov	r8, r3
    dd44:	2300      	movs	r3, #0
    dd46:	4652      	mov	r2, sl
    dd48:	2100      	movs	r1, #0
    dd4a:	6453      	str	r3, [r2, #68]	; 0x44
    dd4c:	2d17      	cmp	r5, #23
    dd4e:	d90a      	bls.n	dd66 <_dtoa_r+0x20e>
    dd50:	2201      	movs	r2, #1
    dd52:	3304      	adds	r3, #4
    dd54:	005b      	lsls	r3, r3, #1
    dd56:	0018      	movs	r0, r3
    dd58:	3014      	adds	r0, #20
    dd5a:	0011      	movs	r1, r2
    dd5c:	3201      	adds	r2, #1
    dd5e:	4285      	cmp	r5, r0
    dd60:	d2f8      	bcs.n	dd54 <_dtoa_r+0x1fc>
    dd62:	4653      	mov	r3, sl
    dd64:	6459      	str	r1, [r3, #68]	; 0x44
    dd66:	4650      	mov	r0, sl
    dd68:	f001 fece 	bl	fb08 <_Balloc>
    dd6c:	4653      	mov	r3, sl
    dd6e:	6418      	str	r0, [r3, #64]	; 0x40
    dd70:	4643      	mov	r3, r8
    dd72:	900a      	str	r0, [sp, #40]	; 0x28
    dd74:	2b0e      	cmp	r3, #14
    dd76:	d900      	bls.n	dd7a <_dtoa_r+0x222>
    dd78:	e161      	b.n	e03e <_dtoa_r+0x4e6>
    dd7a:	2c00      	cmp	r4, #0
    dd7c:	d100      	bne.n	dd80 <_dtoa_r+0x228>
    dd7e:	e15e      	b.n	e03e <_dtoa_r+0x4e6>
    dd80:	9610      	str	r6, [sp, #64]	; 0x40
    dd82:	9711      	str	r7, [sp, #68]	; 0x44
    dd84:	9e03      	ldr	r6, [sp, #12]
    dd86:	2e00      	cmp	r6, #0
    dd88:	dc01      	bgt.n	dd8e <_dtoa_r+0x236>
    dd8a:	f000 fd25 	bl	e7d8 <_dtoa_r+0xc80>
    dd8e:	0032      	movs	r2, r6
    dd90:	210f      	movs	r1, #15
    dd92:	4b65      	ldr	r3, [pc, #404]	; (df28 <_dtoa_r+0x3d0>)
    dd94:	400a      	ands	r2, r1
    dd96:	00d2      	lsls	r2, r2, #3
    dd98:	189b      	adds	r3, r3, r2
    dd9a:	1136      	asrs	r6, r6, #4
    dd9c:	681c      	ldr	r4, [r3, #0]
    dd9e:	685d      	ldr	r5, [r3, #4]
    dda0:	06f3      	lsls	r3, r6, #27
    dda2:	d401      	bmi.n	dda8 <_dtoa_r+0x250>
    dda4:	f000 fcca 	bl	e73c <_dtoa_r+0xbe4>
    dda8:	4b60      	ldr	r3, [pc, #384]	; (df2c <_dtoa_r+0x3d4>)
    ddaa:	400e      	ands	r6, r1
    ddac:	6a1a      	ldr	r2, [r3, #32]
    ddae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ddb0:	9810      	ldr	r0, [sp, #64]	; 0x40
    ddb2:	9911      	ldr	r1, [sp, #68]	; 0x44
    ddb4:	f7fc fcbe 	bl	a734 <__aeabi_ddiv>
    ddb8:	2303      	movs	r3, #3
    ddba:	4698      	mov	r8, r3
    ddbc:	9008      	str	r0, [sp, #32]
    ddbe:	9109      	str	r1, [sp, #36]	; 0x24
    ddc0:	2e00      	cmp	r6, #0
    ddc2:	d011      	beq.n	dde8 <_dtoa_r+0x290>
    ddc4:	4f59      	ldr	r7, [pc, #356]	; (df2c <_dtoa_r+0x3d4>)
    ddc6:	2301      	movs	r3, #1
    ddc8:	4233      	tst	r3, r6
    ddca:	d009      	beq.n	dde0 <_dtoa_r+0x288>
    ddcc:	469c      	mov	ip, r3
    ddce:	683a      	ldr	r2, [r7, #0]
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	0020      	movs	r0, r4
    ddd4:	0029      	movs	r1, r5
    ddd6:	44e0      	add	r8, ip
    ddd8:	f7fd f8e0 	bl	af9c <__aeabi_dmul>
    dddc:	0004      	movs	r4, r0
    ddde:	000d      	movs	r5, r1
    dde0:	1076      	asrs	r6, r6, #1
    dde2:	3708      	adds	r7, #8
    dde4:	2e00      	cmp	r6, #0
    dde6:	d1ee      	bne.n	ddc6 <_dtoa_r+0x26e>
    dde8:	0022      	movs	r2, r4
    ddea:	9808      	ldr	r0, [sp, #32]
    ddec:	9909      	ldr	r1, [sp, #36]	; 0x24
    ddee:	002b      	movs	r3, r5
    ddf0:	f7fc fca0 	bl	a734 <__aeabi_ddiv>
    ddf4:	0006      	movs	r6, r0
    ddf6:	000f      	movs	r7, r1
    ddf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	d009      	beq.n	de12 <_dtoa_r+0x2ba>
    ddfe:	2200      	movs	r2, #0
    de00:	4b40      	ldr	r3, [pc, #256]	; (df04 <_dtoa_r+0x3ac>)
    de02:	0030      	movs	r0, r6
    de04:	0039      	movs	r1, r7
    de06:	f7fb f90f 	bl	9028 <__aeabi_dcmplt>
    de0a:	2800      	cmp	r0, #0
    de0c:	d001      	beq.n	de12 <_dtoa_r+0x2ba>
    de0e:	f000 fdc2 	bl	e996 <_dtoa_r+0xe3e>
    de12:	4640      	mov	r0, r8
    de14:	f7fd feac 	bl	bb70 <__aeabi_i2d>
    de18:	0032      	movs	r2, r6
    de1a:	003b      	movs	r3, r7
    de1c:	f7fd f8be 	bl	af9c <__aeabi_dmul>
    de20:	2200      	movs	r2, #0
    de22:	4b43      	ldr	r3, [pc, #268]	; (df30 <_dtoa_r+0x3d8>)
    de24:	f7fc f976 	bl	a114 <__aeabi_dadd>
    de28:	4a42      	ldr	r2, [pc, #264]	; (df34 <_dtoa_r+0x3dc>)
    de2a:	000b      	movs	r3, r1
    de2c:	4694      	mov	ip, r2
    de2e:	4463      	add	r3, ip
    de30:	9008      	str	r0, [sp, #32]
    de32:	9109      	str	r1, [sp, #36]	; 0x24
    de34:	9309      	str	r3, [sp, #36]	; 0x24
    de36:	9b07      	ldr	r3, [sp, #28]
    de38:	2b00      	cmp	r3, #0
    de3a:	d101      	bne.n	de40 <_dtoa_r+0x2e8>
    de3c:	f000 fc50 	bl	e6e0 <_dtoa_r+0xb88>
    de40:	9b03      	ldr	r3, [sp, #12]
    de42:	9313      	str	r3, [sp, #76]	; 0x4c
    de44:	9b07      	ldr	r3, [sp, #28]
    de46:	9312      	str	r3, [sp, #72]	; 0x48
    de48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de4a:	2b00      	cmp	r3, #0
    de4c:	d101      	bne.n	de52 <_dtoa_r+0x2fa>
    de4e:	f000 fd1d 	bl	e88c <_dtoa_r+0xd34>
    de52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    de54:	2000      	movs	r0, #0
    de56:	1e5a      	subs	r2, r3, #1
    de58:	4b33      	ldr	r3, [pc, #204]	; (df28 <_dtoa_r+0x3d0>)
    de5a:	00d2      	lsls	r2, r2, #3
    de5c:	189b      	adds	r3, r3, r2
    de5e:	681a      	ldr	r2, [r3, #0]
    de60:	685b      	ldr	r3, [r3, #4]
    de62:	4935      	ldr	r1, [pc, #212]	; (df38 <_dtoa_r+0x3e0>)
    de64:	f7fc fc66 	bl	a734 <__aeabi_ddiv>
    de68:	9a08      	ldr	r2, [sp, #32]
    de6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de6c:	f7fd fb16 	bl	b49c <__aeabi_dsub>
    de70:	9008      	str	r0, [sp, #32]
    de72:	9109      	str	r1, [sp, #36]	; 0x24
    de74:	0039      	movs	r1, r7
    de76:	0030      	movs	r0, r6
    de78:	f7fd fe46 	bl	bb08 <__aeabi_d2iz>
    de7c:	0004      	movs	r4, r0
    de7e:	f7fd fe77 	bl	bb70 <__aeabi_i2d>
    de82:	0002      	movs	r2, r0
    de84:	000b      	movs	r3, r1
    de86:	0030      	movs	r0, r6
    de88:	0039      	movs	r1, r7
    de8a:	f7fd fb07 	bl	b49c <__aeabi_dsub>
    de8e:	0005      	movs	r5, r0
    de90:	000e      	movs	r6, r1
    de92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de94:	3430      	adds	r4, #48	; 0x30
    de96:	1c51      	adds	r1, r2, #1
    de98:	b2e7      	uxtb	r7, r4
    de9a:	9114      	str	r1, [sp, #80]	; 0x50
    de9c:	7017      	strb	r7, [r2, #0]
    de9e:	0033      	movs	r3, r6
    dea0:	9808      	ldr	r0, [sp, #32]
    dea2:	9909      	ldr	r1, [sp, #36]	; 0x24
    dea4:	002a      	movs	r2, r5
    dea6:	f7fb f8d3 	bl	9050 <__aeabi_dcmpgt>
    deaa:	2800      	cmp	r0, #0
    deac:	d001      	beq.n	deb2 <_dtoa_r+0x35a>
    deae:	f000 fdfe 	bl	eaae <_dtoa_r+0xf56>
    deb2:	002a      	movs	r2, r5
    deb4:	0033      	movs	r3, r6
    deb6:	2000      	movs	r0, #0
    deb8:	4912      	ldr	r1, [pc, #72]	; (df04 <_dtoa_r+0x3ac>)
    deba:	f7fd faef 	bl	b49c <__aeabi_dsub>
    debe:	0002      	movs	r2, r0
    dec0:	000b      	movs	r3, r1
    dec2:	9808      	ldr	r0, [sp, #32]
    dec4:	9909      	ldr	r1, [sp, #36]	; 0x24
    dec6:	f7fb f8c3 	bl	9050 <__aeabi_dcmpgt>
    deca:	2800      	cmp	r0, #0
    decc:	d001      	beq.n	ded2 <_dtoa_r+0x37a>
    dece:	f000 fde7 	bl	eaa0 <_dtoa_r+0xf48>
    ded2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ded4:	2b01      	cmp	r3, #1
    ded6:	d101      	bne.n	dedc <_dtoa_r+0x384>
    ded8:	f000 fc78 	bl	e7cc <_dtoa_r+0xc74>
    dedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dede:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dee0:	4694      	mov	ip, r2
    dee2:	4463      	add	r3, ip
    dee4:	4698      	mov	r8, r3
    dee6:	464b      	mov	r3, r9
    dee8:	9312      	str	r3, [sp, #72]	; 0x48
    deea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    deec:	4699      	mov	r9, r3
    deee:	e038      	b.n	df62 <_dtoa_r+0x40a>
    def0:	7ff00000 	.word	0x7ff00000
    def4:	00011489 	.word	0x00011489
    def8:	0000270f 	.word	0x0000270f
    defc:	000114ac 	.word	0x000114ac
    df00:	000114b8 	.word	0x000114b8
    df04:	3ff00000 	.word	0x3ff00000
    df08:	fffffc01 	.word	0xfffffc01
    df0c:	3ff80000 	.word	0x3ff80000
    df10:	636f4361 	.word	0x636f4361
    df14:	3fd287a7 	.word	0x3fd287a7
    df18:	8b60c8b3 	.word	0x8b60c8b3
    df1c:	3fc68a28 	.word	0x3fc68a28
    df20:	509f79fb 	.word	0x509f79fb
    df24:	3fd34413 	.word	0x3fd34413
    df28:	000114e8 	.word	0x000114e8
    df2c:	000114c0 	.word	0x000114c0
    df30:	401c0000 	.word	0x401c0000
    df34:	fcc00000 	.word	0xfcc00000
    df38:	3fe00000 	.word	0x3fe00000
    df3c:	002a      	movs	r2, r5
    df3e:	0033      	movs	r3, r6
    df40:	2000      	movs	r0, #0
    df42:	49b9      	ldr	r1, [pc, #740]	; (e228 <_dtoa_r+0x6d0>)
    df44:	f7fd faaa 	bl	b49c <__aeabi_dsub>
    df48:	9a08      	ldr	r2, [sp, #32]
    df4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df4c:	f7fb f86c 	bl	9028 <__aeabi_dcmplt>
    df50:	2800      	cmp	r0, #0
    df52:	d001      	beq.n	df58 <_dtoa_r+0x400>
    df54:	f000 fd74 	bl	ea40 <_dtoa_r+0xee8>
    df58:	46a1      	mov	r9, r4
    df5a:	4544      	cmp	r4, r8
    df5c:	d101      	bne.n	df62 <_dtoa_r+0x40a>
    df5e:	f000 fc33 	bl	e7c8 <_dtoa_r+0xc70>
    df62:	9808      	ldr	r0, [sp, #32]
    df64:	9909      	ldr	r1, [sp, #36]	; 0x24
    df66:	2200      	movs	r2, #0
    df68:	4bb0      	ldr	r3, [pc, #704]	; (e22c <_dtoa_r+0x6d4>)
    df6a:	f7fd f817 	bl	af9c <__aeabi_dmul>
    df6e:	2200      	movs	r2, #0
    df70:	4bae      	ldr	r3, [pc, #696]	; (e22c <_dtoa_r+0x6d4>)
    df72:	9008      	str	r0, [sp, #32]
    df74:	9109      	str	r1, [sp, #36]	; 0x24
    df76:	0028      	movs	r0, r5
    df78:	0031      	movs	r1, r6
    df7a:	f7fd f80f 	bl	af9c <__aeabi_dmul>
    df7e:	000d      	movs	r5, r1
    df80:	0004      	movs	r4, r0
    df82:	f7fd fdc1 	bl	bb08 <__aeabi_d2iz>
    df86:	0007      	movs	r7, r0
    df88:	f7fd fdf2 	bl	bb70 <__aeabi_i2d>
    df8c:	0002      	movs	r2, r0
    df8e:	000b      	movs	r3, r1
    df90:	0020      	movs	r0, r4
    df92:	0029      	movs	r1, r5
    df94:	f7fd fa82 	bl	b49c <__aeabi_dsub>
    df98:	464b      	mov	r3, r9
    df9a:	3730      	adds	r7, #48	; 0x30
    df9c:	b2ff      	uxtb	r7, r7
    df9e:	1c5c      	adds	r4, r3, #1
    dfa0:	701f      	strb	r7, [r3, #0]
    dfa2:	9a08      	ldr	r2, [sp, #32]
    dfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfa6:	0005      	movs	r5, r0
    dfa8:	000e      	movs	r6, r1
    dfaa:	f7fb f83d 	bl	9028 <__aeabi_dcmplt>
    dfae:	2800      	cmp	r0, #0
    dfb0:	d0c4      	beq.n	df3c <_dtoa_r+0x3e4>
    dfb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dfb4:	9303      	str	r3, [sp, #12]
    dfb6:	4659      	mov	r1, fp
    dfb8:	4650      	mov	r0, sl
    dfba:	f001 fdcd 	bl	fb58 <_Bfree>
    dfbe:	2300      	movs	r3, #0
    dfc0:	7023      	strb	r3, [r4, #0]
    dfc2:	9b03      	ldr	r3, [sp, #12]
    dfc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dfc6:	3301      	adds	r3, #1
    dfc8:	6013      	str	r3, [r2, #0]
    dfca:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dfcc:	2b00      	cmp	r3, #0
    dfce:	d100      	bne.n	dfd2 <_dtoa_r+0x47a>
    dfd0:	e3a8      	b.n	e724 <_dtoa_r+0xbcc>
    dfd2:	601c      	str	r4, [r3, #0]
    dfd4:	980a      	ldr	r0, [sp, #40]	; 0x28
    dfd6:	e5f4      	b.n	dbc2 <_dtoa_r+0x6a>
    dfd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dfda:	4699      	mov	r9, r3
    dfdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dfde:	444b      	add	r3, r9
    dfe0:	001c      	movs	r4, r3
    dfe2:	4b93      	ldr	r3, [pc, #588]	; (e230 <_dtoa_r+0x6d8>)
    dfe4:	18e3      	adds	r3, r4, r3
    dfe6:	2b20      	cmp	r3, #32
    dfe8:	dc00      	bgt.n	dfec <_dtoa_r+0x494>
    dfea:	e17e      	b.n	e2ea <_dtoa_r+0x792>
    dfec:	0031      	movs	r1, r6
    dfee:	4a91      	ldr	r2, [pc, #580]	; (e234 <_dtoa_r+0x6dc>)
    dff0:	4640      	mov	r0, r8
    dff2:	18a2      	adds	r2, r4, r2
    dff4:	40d1      	lsrs	r1, r2
    dff6:	000a      	movs	r2, r1
    dff8:	2140      	movs	r1, #64	; 0x40
    dffa:	1acb      	subs	r3, r1, r3
    dffc:	4098      	lsls	r0, r3
    dffe:	4310      	orrs	r0, r2
    e000:	f7fd fdf8 	bl	bbf4 <__aeabi_ui2d>
    e004:	1e63      	subs	r3, r4, #1
    e006:	4698      	mov	r8, r3
    e008:	2301      	movs	r3, #1
    e00a:	4d8b      	ldr	r5, [pc, #556]	; (e238 <_dtoa_r+0x6e0>)
    e00c:	930f      	str	r3, [sp, #60]	; 0x3c
    e00e:	1949      	adds	r1, r1, r5
    e010:	e618      	b.n	dc44 <_dtoa_r+0xec>
    e012:	488a      	ldr	r0, [pc, #552]	; (e23c <_dtoa_r+0x6e4>)
    e014:	e5d5      	b.n	dbc2 <_dtoa_r+0x6a>
    e016:	2300      	movs	r3, #0
    e018:	4652      	mov	r2, sl
    e01a:	2100      	movs	r1, #0
    e01c:	6453      	str	r3, [r2, #68]	; 0x44
    e01e:	4650      	mov	r0, sl
    e020:	f001 fd72 	bl	fb08 <_Balloc>
    e024:	4653      	mov	r3, sl
    e026:	6418      	str	r0, [r3, #64]	; 0x40
    e028:	2301      	movs	r3, #1
    e02a:	425b      	negs	r3, r3
    e02c:	9307      	str	r3, [sp, #28]
    e02e:	930e      	str	r3, [sp, #56]	; 0x38
    e030:	3302      	adds	r3, #2
    e032:	2200      	movs	r2, #0
    e034:	930b      	str	r3, [sp, #44]	; 0x2c
    e036:	2300      	movs	r3, #0
    e038:	900a      	str	r0, [sp, #40]	; 0x28
    e03a:	9223      	str	r2, [sp, #140]	; 0x8c
    e03c:	9322      	str	r3, [sp, #136]	; 0x88
    e03e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e040:	2b00      	cmp	r3, #0
    e042:	da00      	bge.n	e046 <_dtoa_r+0x4ee>
    e044:	e0ab      	b.n	e19e <_dtoa_r+0x646>
    e046:	9a03      	ldr	r2, [sp, #12]
    e048:	2a0e      	cmp	r2, #14
    e04a:	dd00      	ble.n	e04e <_dtoa_r+0x4f6>
    e04c:	e0a7      	b.n	e19e <_dtoa_r+0x646>
    e04e:	4b7c      	ldr	r3, [pc, #496]	; (e240 <_dtoa_r+0x6e8>)
    e050:	00d2      	lsls	r2, r2, #3
    e052:	189b      	adds	r3, r3, r2
    e054:	685c      	ldr	r4, [r3, #4]
    e056:	681b      	ldr	r3, [r3, #0]
    e058:	9304      	str	r3, [sp, #16]
    e05a:	9405      	str	r4, [sp, #20]
    e05c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e05e:	2b00      	cmp	r3, #0
    e060:	da00      	bge.n	e064 <_dtoa_r+0x50c>
    e062:	e2a7      	b.n	e5b4 <_dtoa_r+0xa5c>
    e064:	9c04      	ldr	r4, [sp, #16]
    e066:	9d05      	ldr	r5, [sp, #20]
    e068:	0030      	movs	r0, r6
    e06a:	0022      	movs	r2, r4
    e06c:	002b      	movs	r3, r5
    e06e:	0039      	movs	r1, r7
    e070:	f7fc fb60 	bl	a734 <__aeabi_ddiv>
    e074:	f7fd fd48 	bl	bb08 <__aeabi_d2iz>
    e078:	4680      	mov	r8, r0
    e07a:	f7fd fd79 	bl	bb70 <__aeabi_i2d>
    e07e:	0022      	movs	r2, r4
    e080:	002b      	movs	r3, r5
    e082:	f7fc ff8b 	bl	af9c <__aeabi_dmul>
    e086:	0002      	movs	r2, r0
    e088:	000b      	movs	r3, r1
    e08a:	0030      	movs	r0, r6
    e08c:	0039      	movs	r1, r7
    e08e:	f7fd fa05 	bl	b49c <__aeabi_dsub>
    e092:	4643      	mov	r3, r8
    e094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e096:	3330      	adds	r3, #48	; 0x30
    e098:	7013      	strb	r3, [r2, #0]
    e09a:	9b07      	ldr	r3, [sp, #28]
    e09c:	0006      	movs	r6, r0
    e09e:	000f      	movs	r7, r1
    e0a0:	1c54      	adds	r4, r2, #1
    e0a2:	2b01      	cmp	r3, #1
    e0a4:	d04e      	beq.n	e144 <_dtoa_r+0x5ec>
    e0a6:	2200      	movs	r2, #0
    e0a8:	4b60      	ldr	r3, [pc, #384]	; (e22c <_dtoa_r+0x6d4>)
    e0aa:	f7fc ff77 	bl	af9c <__aeabi_dmul>
    e0ae:	2200      	movs	r2, #0
    e0b0:	2300      	movs	r3, #0
    e0b2:	0006      	movs	r6, r0
    e0b4:	000f      	movs	r7, r1
    e0b6:	f7fa ffb1 	bl	901c <__aeabi_dcmpeq>
    e0ba:	2800      	cmp	r0, #0
    e0bc:	d000      	beq.n	e0c0 <_dtoa_r+0x568>
    e0be:	e77a      	b.n	dfb6 <_dtoa_r+0x45e>
    e0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0c2:	9a07      	ldr	r2, [sp, #28]
    e0c4:	1c9d      	adds	r5, r3, #2
    e0c6:	469c      	mov	ip, r3
    e0c8:	465b      	mov	r3, fp
    e0ca:	9306      	str	r3, [sp, #24]
    e0cc:	4653      	mov	r3, sl
    e0ce:	4462      	add	r2, ip
    e0d0:	46aa      	mov	sl, r5
    e0d2:	9c04      	ldr	r4, [sp, #16]
    e0d4:	9d05      	ldr	r5, [sp, #20]
    e0d6:	4691      	mov	r9, r2
    e0d8:	9307      	str	r3, [sp, #28]
    e0da:	e00f      	b.n	e0fc <_dtoa_r+0x5a4>
    e0dc:	2200      	movs	r2, #0
    e0de:	4b53      	ldr	r3, [pc, #332]	; (e22c <_dtoa_r+0x6d4>)
    e0e0:	f7fc ff5c 	bl	af9c <__aeabi_dmul>
    e0e4:	2301      	movs	r3, #1
    e0e6:	469c      	mov	ip, r3
    e0e8:	2200      	movs	r2, #0
    e0ea:	2300      	movs	r3, #0
    e0ec:	0006      	movs	r6, r0
    e0ee:	000f      	movs	r7, r1
    e0f0:	44e2      	add	sl, ip
    e0f2:	f7fa ff93 	bl	901c <__aeabi_dcmpeq>
    e0f6:	2800      	cmp	r0, #0
    e0f8:	d000      	beq.n	e0fc <_dtoa_r+0x5a4>
    e0fa:	e2d9      	b.n	e6b0 <_dtoa_r+0xb58>
    e0fc:	0022      	movs	r2, r4
    e0fe:	002b      	movs	r3, r5
    e100:	0030      	movs	r0, r6
    e102:	0039      	movs	r1, r7
    e104:	f7fc fb16 	bl	a734 <__aeabi_ddiv>
    e108:	f7fd fcfe 	bl	bb08 <__aeabi_d2iz>
    e10c:	4680      	mov	r8, r0
    e10e:	f7fd fd2f 	bl	bb70 <__aeabi_i2d>
    e112:	0022      	movs	r2, r4
    e114:	002b      	movs	r3, r5
    e116:	f7fc ff41 	bl	af9c <__aeabi_dmul>
    e11a:	0002      	movs	r2, r0
    e11c:	000b      	movs	r3, r1
    e11e:	0030      	movs	r0, r6
    e120:	0039      	movs	r1, r7
    e122:	f7fd f9bb 	bl	b49c <__aeabi_dsub>
    e126:	4653      	mov	r3, sl
    e128:	4642      	mov	r2, r8
    e12a:	3b01      	subs	r3, #1
    e12c:	3230      	adds	r2, #48	; 0x30
    e12e:	0006      	movs	r6, r0
    e130:	000f      	movs	r7, r1
    e132:	46d3      	mov	fp, sl
    e134:	701a      	strb	r2, [r3, #0]
    e136:	45d1      	cmp	r9, sl
    e138:	d1d0      	bne.n	e0dc <_dtoa_r+0x584>
    e13a:	9b06      	ldr	r3, [sp, #24]
    e13c:	4654      	mov	r4, sl
    e13e:	469b      	mov	fp, r3
    e140:	9b07      	ldr	r3, [sp, #28]
    e142:	469a      	mov	sl, r3
    e144:	0032      	movs	r2, r6
    e146:	003b      	movs	r3, r7
    e148:	0030      	movs	r0, r6
    e14a:	0039      	movs	r1, r7
    e14c:	f7fb ffe2 	bl	a114 <__aeabi_dadd>
    e150:	0006      	movs	r6, r0
    e152:	000f      	movs	r7, r1
    e154:	0002      	movs	r2, r0
    e156:	000b      	movs	r3, r1
    e158:	9804      	ldr	r0, [sp, #16]
    e15a:	9905      	ldr	r1, [sp, #20]
    e15c:	f7fa ff64 	bl	9028 <__aeabi_dcmplt>
    e160:	2800      	cmp	r0, #0
    e162:	d10c      	bne.n	e17e <_dtoa_r+0x626>
    e164:	9804      	ldr	r0, [sp, #16]
    e166:	9905      	ldr	r1, [sp, #20]
    e168:	0032      	movs	r2, r6
    e16a:	003b      	movs	r3, r7
    e16c:	f7fa ff56 	bl	901c <__aeabi_dcmpeq>
    e170:	2800      	cmp	r0, #0
    e172:	d100      	bne.n	e176 <_dtoa_r+0x61e>
    e174:	e71f      	b.n	dfb6 <_dtoa_r+0x45e>
    e176:	4643      	mov	r3, r8
    e178:	07db      	lsls	r3, r3, #31
    e17a:	d400      	bmi.n	e17e <_dtoa_r+0x626>
    e17c:	e71b      	b.n	dfb6 <_dtoa_r+0x45e>
    e17e:	1e65      	subs	r5, r4, #1
    e180:	782f      	ldrb	r7, [r5, #0]
    e182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e184:	e006      	b.n	e194 <_dtoa_r+0x63c>
    e186:	429d      	cmp	r5, r3
    e188:	d100      	bne.n	e18c <_dtoa_r+0x634>
    e18a:	e351      	b.n	e830 <_dtoa_r+0xcd8>
    e18c:	3c02      	subs	r4, #2
    e18e:	7827      	ldrb	r7, [r4, #0]
    e190:	002c      	movs	r4, r5
    e192:	3d01      	subs	r5, #1
    e194:	2f39      	cmp	r7, #57	; 0x39
    e196:	d0f6      	beq.n	e186 <_dtoa_r+0x62e>
    e198:	3701      	adds	r7, #1
    e19a:	702f      	strb	r7, [r5, #0]
    e19c:	e70b      	b.n	dfb6 <_dtoa_r+0x45e>
    e19e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e1a0:	2a00      	cmp	r2, #0
    e1a2:	d04f      	beq.n	e244 <_dtoa_r+0x6ec>
    e1a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e1a6:	2a01      	cmp	r2, #1
    e1a8:	dc00      	bgt.n	e1ac <_dtoa_r+0x654>
    e1aa:	e22c      	b.n	e606 <_dtoa_r+0xaae>
    e1ac:	9b07      	ldr	r3, [sp, #28]
    e1ae:	1e5c      	subs	r4, r3, #1
    e1b0:	464b      	mov	r3, r9
    e1b2:	45a1      	cmp	r9, r4
    e1b4:	da00      	bge.n	e1b8 <_dtoa_r+0x660>
    e1b6:	e2b8      	b.n	e72a <_dtoa_r+0xbd2>
    e1b8:	1b1c      	subs	r4, r3, r4
    e1ba:	9b07      	ldr	r3, [sp, #28]
    e1bc:	2b00      	cmp	r3, #0
    e1be:	da00      	bge.n	e1c2 <_dtoa_r+0x66a>
    e1c0:	e3d4      	b.n	e96c <_dtoa_r+0xe14>
    e1c2:	9b06      	ldr	r3, [sp, #24]
    e1c4:	9308      	str	r3, [sp, #32]
    e1c6:	9b07      	ldr	r3, [sp, #28]
    e1c8:	9a06      	ldr	r2, [sp, #24]
    e1ca:	2101      	movs	r1, #1
    e1cc:	4694      	mov	ip, r2
    e1ce:	449c      	add	ip, r3
    e1d0:	4662      	mov	r2, ip
    e1d2:	9206      	str	r2, [sp, #24]
    e1d4:	9a04      	ldr	r2, [sp, #16]
    e1d6:	4650      	mov	r0, sl
    e1d8:	4694      	mov	ip, r2
    e1da:	449c      	add	ip, r3
    e1dc:	4663      	mov	r3, ip
    e1de:	9304      	str	r3, [sp, #16]
    e1e0:	f001 fd52 	bl	fc88 <__i2b>
    e1e4:	4680      	mov	r8, r0
    e1e6:	e032      	b.n	e24e <_dtoa_r+0x6f6>
    e1e8:	9a06      	ldr	r2, [sp, #24]
    e1ea:	9b03      	ldr	r3, [sp, #12]
    e1ec:	1ad2      	subs	r2, r2, r3
    e1ee:	425b      	negs	r3, r3
    e1f0:	4699      	mov	r9, r3
    e1f2:	2300      	movs	r3, #0
    e1f4:	9206      	str	r2, [sp, #24]
    e1f6:	930d      	str	r3, [sp, #52]	; 0x34
    e1f8:	e579      	b.n	dcee <_dtoa_r+0x196>
    e1fa:	9803      	ldr	r0, [sp, #12]
    e1fc:	f7fd fcb8 	bl	bb70 <__aeabi_i2d>
    e200:	000b      	movs	r3, r1
    e202:	0002      	movs	r2, r0
    e204:	0029      	movs	r1, r5
    e206:	0020      	movs	r0, r4
    e208:	f7fa ff08 	bl	901c <__aeabi_dcmpeq>
    e20c:	0002      	movs	r2, r0
    e20e:	4250      	negs	r0, r2
    e210:	4150      	adcs	r0, r2
    e212:	9b03      	ldr	r3, [sp, #12]
    e214:	1a1b      	subs	r3, r3, r0
    e216:	9303      	str	r3, [sp, #12]
    e218:	e53d      	b.n	dc96 <_dtoa_r+0x13e>
    e21a:	2301      	movs	r3, #1
    e21c:	1a9b      	subs	r3, r3, r2
    e21e:	9306      	str	r3, [sp, #24]
    e220:	2300      	movs	r3, #0
    e222:	9304      	str	r3, [sp, #16]
    e224:	e557      	b.n	dcd6 <_dtoa_r+0x17e>
    e226:	46c0      	nop			; (mov r8, r8)
    e228:	3ff00000 	.word	0x3ff00000
    e22c:	40240000 	.word	0x40240000
    e230:	00000432 	.word	0x00000432
    e234:	00000412 	.word	0x00000412
    e238:	fe100000 	.word	0xfe100000
    e23c:	00011488 	.word	0x00011488
    e240:	000114e8 	.word	0x000114e8
    e244:	9b06      	ldr	r3, [sp, #24]
    e246:	464c      	mov	r4, r9
    e248:	9308      	str	r3, [sp, #32]
    e24a:	2300      	movs	r3, #0
    e24c:	4698      	mov	r8, r3
    e24e:	9908      	ldr	r1, [sp, #32]
    e250:	1e0b      	subs	r3, r1, #0
    e252:	dd0e      	ble.n	e272 <_dtoa_r+0x71a>
    e254:	9a04      	ldr	r2, [sp, #16]
    e256:	2a00      	cmp	r2, #0
    e258:	dd0b      	ble.n	e272 <_dtoa_r+0x71a>
    e25a:	4293      	cmp	r3, r2
    e25c:	dd00      	ble.n	e260 <_dtoa_r+0x708>
    e25e:	e187      	b.n	e570 <_dtoa_r+0xa18>
    e260:	9a06      	ldr	r2, [sp, #24]
    e262:	1ad2      	subs	r2, r2, r3
    e264:	9206      	str	r2, [sp, #24]
    e266:	9a08      	ldr	r2, [sp, #32]
    e268:	1ad2      	subs	r2, r2, r3
    e26a:	9208      	str	r2, [sp, #32]
    e26c:	9a04      	ldr	r2, [sp, #16]
    e26e:	1ad3      	subs	r3, r2, r3
    e270:	9304      	str	r3, [sp, #16]
    e272:	464b      	mov	r3, r9
    e274:	2b00      	cmp	r3, #0
    e276:	d01a      	beq.n	e2ae <_dtoa_r+0x756>
    e278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e27a:	2b00      	cmp	r3, #0
    e27c:	d100      	bne.n	e280 <_dtoa_r+0x728>
    e27e:	e1bb      	b.n	e5f8 <_dtoa_r+0xaa0>
    e280:	2c00      	cmp	r4, #0
    e282:	dd10      	ble.n	e2a6 <_dtoa_r+0x74e>
    e284:	4641      	mov	r1, r8
    e286:	0022      	movs	r2, r4
    e288:	4650      	mov	r0, sl
    e28a:	f001 fdb1 	bl	fdf0 <__pow5mult>
    e28e:	465a      	mov	r2, fp
    e290:	0001      	movs	r1, r0
    e292:	4680      	mov	r8, r0
    e294:	4650      	mov	r0, sl
    e296:	f001 fd01 	bl	fc9c <__multiply>
    e29a:	0005      	movs	r5, r0
    e29c:	4659      	mov	r1, fp
    e29e:	4650      	mov	r0, sl
    e2a0:	f001 fc5a 	bl	fb58 <_Bfree>
    e2a4:	46ab      	mov	fp, r5
    e2a6:	464b      	mov	r3, r9
    e2a8:	1b1a      	subs	r2, r3, r4
    e2aa:	d000      	beq.n	e2ae <_dtoa_r+0x756>
    e2ac:	e1a5      	b.n	e5fa <_dtoa_r+0xaa2>
    e2ae:	2101      	movs	r1, #1
    e2b0:	4650      	mov	r0, sl
    e2b2:	f001 fce9 	bl	fc88 <__i2b>
    e2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e2b8:	4681      	mov	r9, r0
    e2ba:	2b00      	cmp	r3, #0
    e2bc:	dd1d      	ble.n	e2fa <_dtoa_r+0x7a2>
    e2be:	001a      	movs	r2, r3
    e2c0:	0001      	movs	r1, r0
    e2c2:	4650      	mov	r0, sl
    e2c4:	f001 fd94 	bl	fdf0 <__pow5mult>
    e2c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e2ca:	4681      	mov	r9, r0
    e2cc:	2b01      	cmp	r3, #1
    e2ce:	dc00      	bgt.n	e2d2 <_dtoa_r+0x77a>
    e2d0:	e150      	b.n	e574 <_dtoa_r+0xa1c>
    e2d2:	2400      	movs	r4, #0
    e2d4:	464b      	mov	r3, r9
    e2d6:	691b      	ldr	r3, [r3, #16]
    e2d8:	3303      	adds	r3, #3
    e2da:	009b      	lsls	r3, r3, #2
    e2dc:	444b      	add	r3, r9
    e2de:	6858      	ldr	r0, [r3, #4]
    e2e0:	f001 fc8a 	bl	fbf8 <__hi0bits>
    e2e4:	2320      	movs	r3, #32
    e2e6:	1a1b      	subs	r3, r3, r0
    e2e8:	e010      	b.n	e30c <_dtoa_r+0x7b4>
    e2ea:	2220      	movs	r2, #32
    e2ec:	0030      	movs	r0, r6
    e2ee:	1ad3      	subs	r3, r2, r3
    e2f0:	4098      	lsls	r0, r3
    e2f2:	e685      	b.n	e000 <_dtoa_r+0x4a8>
    e2f4:	2300      	movs	r3, #0
    e2f6:	930c      	str	r3, [sp, #48]	; 0x30
    e2f8:	e4e3      	b.n	dcc2 <_dtoa_r+0x16a>
    e2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e2fc:	2400      	movs	r4, #0
    e2fe:	2b01      	cmp	r3, #1
    e300:	dc00      	bgt.n	e304 <_dtoa_r+0x7ac>
    e302:	e18b      	b.n	e61c <_dtoa_r+0xac4>
    e304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e306:	2301      	movs	r3, #1
    e308:	2a00      	cmp	r2, #0
    e30a:	d1e3      	bne.n	e2d4 <_dtoa_r+0x77c>
    e30c:	9904      	ldr	r1, [sp, #16]
    e30e:	201f      	movs	r0, #31
    e310:	468c      	mov	ip, r1
    e312:	4463      	add	r3, ip
    e314:	4018      	ands	r0, r3
    e316:	d100      	bne.n	e31a <_dtoa_r+0x7c2>
    e318:	e0ae      	b.n	e478 <_dtoa_r+0x920>
    e31a:	2320      	movs	r3, #32
    e31c:	1a1b      	subs	r3, r3, r0
    e31e:	2b04      	cmp	r3, #4
    e320:	dc00      	bgt.n	e324 <_dtoa_r+0x7cc>
    e322:	e3cc      	b.n	eabe <_dtoa_r+0xf66>
    e324:	231c      	movs	r3, #28
    e326:	1a18      	subs	r0, r3, r0
    e328:	9b06      	ldr	r3, [sp, #24]
    e32a:	469c      	mov	ip, r3
    e32c:	4484      	add	ip, r0
    e32e:	4663      	mov	r3, ip
    e330:	9306      	str	r3, [sp, #24]
    e332:	9b08      	ldr	r3, [sp, #32]
    e334:	469c      	mov	ip, r3
    e336:	4484      	add	ip, r0
    e338:	4663      	mov	r3, ip
    e33a:	468c      	mov	ip, r1
    e33c:	4484      	add	ip, r0
    e33e:	9308      	str	r3, [sp, #32]
    e340:	4663      	mov	r3, ip
    e342:	9304      	str	r3, [sp, #16]
    e344:	9b06      	ldr	r3, [sp, #24]
    e346:	2b00      	cmp	r3, #0
    e348:	dd05      	ble.n	e356 <_dtoa_r+0x7fe>
    e34a:	4659      	mov	r1, fp
    e34c:	001a      	movs	r2, r3
    e34e:	4650      	mov	r0, sl
    e350:	f001 fdae 	bl	feb0 <__lshift>
    e354:	4683      	mov	fp, r0
    e356:	9b04      	ldr	r3, [sp, #16]
    e358:	2b00      	cmp	r3, #0
    e35a:	dd05      	ble.n	e368 <_dtoa_r+0x810>
    e35c:	4649      	mov	r1, r9
    e35e:	001a      	movs	r2, r3
    e360:	4650      	mov	r0, sl
    e362:	f001 fda5 	bl	feb0 <__lshift>
    e366:	4681      	mov	r9, r0
    e368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e36a:	2b00      	cmp	r3, #0
    e36c:	d000      	beq.n	e370 <_dtoa_r+0x818>
    e36e:	e094      	b.n	e49a <_dtoa_r+0x942>
    e370:	9b07      	ldr	r3, [sp, #28]
    e372:	2b00      	cmp	r3, #0
    e374:	dc00      	bgt.n	e378 <_dtoa_r+0x820>
    e376:	e175      	b.n	e664 <_dtoa_r+0xb0c>
    e378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e37a:	2b00      	cmp	r3, #0
    e37c:	d100      	bne.n	e380 <_dtoa_r+0x828>
    e37e:	e0a6      	b.n	e4ce <_dtoa_r+0x976>
    e380:	9b08      	ldr	r3, [sp, #32]
    e382:	2b00      	cmp	r3, #0
    e384:	dd05      	ble.n	e392 <_dtoa_r+0x83a>
    e386:	4641      	mov	r1, r8
    e388:	001a      	movs	r2, r3
    e38a:	4650      	mov	r0, sl
    e38c:	f001 fd90 	bl	feb0 <__lshift>
    e390:	4680      	mov	r8, r0
    e392:	4643      	mov	r3, r8
    e394:	930c      	str	r3, [sp, #48]	; 0x30
    e396:	2c00      	cmp	r4, #0
    e398:	d000      	beq.n	e39c <_dtoa_r+0x844>
    e39a:	e250      	b.n	e83e <_dtoa_r+0xce6>
    e39c:	9c07      	ldr	r4, [sp, #28]
    e39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e3a0:	3c01      	subs	r4, #1
    e3a2:	0023      	movs	r3, r4
    e3a4:	4694      	mov	ip, r2
    e3a6:	4463      	add	r3, ip
    e3a8:	9308      	str	r3, [sp, #32]
    e3aa:	2301      	movs	r3, #1
    e3ac:	4033      	ands	r3, r6
    e3ae:	9307      	str	r3, [sp, #28]
    e3b0:	464b      	mov	r3, r9
    e3b2:	9306      	str	r3, [sp, #24]
    e3b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3b6:	4657      	mov	r7, sl
    e3b8:	4645      	mov	r5, r8
    e3ba:	465e      	mov	r6, fp
    e3bc:	4692      	mov	sl, r2
    e3be:	4698      	mov	r8, r3
    e3c0:	9b06      	ldr	r3, [sp, #24]
    e3c2:	0030      	movs	r0, r6
    e3c4:	0019      	movs	r1, r3
    e3c6:	4699      	mov	r9, r3
    e3c8:	f7ff fb1c 	bl	da04 <quorem>
    e3cc:	0003      	movs	r3, r0
    e3ce:	900b      	str	r0, [sp, #44]	; 0x2c
    e3d0:	3330      	adds	r3, #48	; 0x30
    e3d2:	0029      	movs	r1, r5
    e3d4:	0030      	movs	r0, r6
    e3d6:	9304      	str	r3, [sp, #16]
    e3d8:	f001 fdca 	bl	ff70 <__mcmp>
    e3dc:	4649      	mov	r1, r9
    e3de:	0004      	movs	r4, r0
    e3e0:	4642      	mov	r2, r8
    e3e2:	0038      	movs	r0, r7
    e3e4:	f001 fdde 	bl	ffa4 <__mdiff>
    e3e8:	68c3      	ldr	r3, [r0, #12]
    e3ea:	4681      	mov	r9, r0
    e3ec:	2b00      	cmp	r3, #0
    e3ee:	d000      	beq.n	e3f2 <_dtoa_r+0x89a>
    e3f0:	e11e      	b.n	e630 <_dtoa_r+0xad8>
    e3f2:	0001      	movs	r1, r0
    e3f4:	0030      	movs	r0, r6
    e3f6:	f001 fdbb 	bl	ff70 <__mcmp>
    e3fa:	4683      	mov	fp, r0
    e3fc:	4649      	mov	r1, r9
    e3fe:	0038      	movs	r0, r7
    e400:	f001 fbaa 	bl	fb58 <_Bfree>
    e404:	465b      	mov	r3, fp
    e406:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e408:	4313      	orrs	r3, r2
    e40a:	d103      	bne.n	e414 <_dtoa_r+0x8bc>
    e40c:	9b07      	ldr	r3, [sp, #28]
    e40e:	2b00      	cmp	r3, #0
    e410:	d100      	bne.n	e414 <_dtoa_r+0x8bc>
    e412:	e306      	b.n	ea22 <_dtoa_r+0xeca>
    e414:	2c00      	cmp	r4, #0
    e416:	da00      	bge.n	e41a <_dtoa_r+0x8c2>
    e418:	e1a8      	b.n	e76c <_dtoa_r+0xc14>
    e41a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e41c:	431c      	orrs	r4, r3
    e41e:	d103      	bne.n	e428 <_dtoa_r+0x8d0>
    e420:	9b07      	ldr	r3, [sp, #28]
    e422:	2b00      	cmp	r3, #0
    e424:	d100      	bne.n	e428 <_dtoa_r+0x8d0>
    e426:	e1a1      	b.n	e76c <_dtoa_r+0xc14>
    e428:	465b      	mov	r3, fp
    e42a:	2b00      	cmp	r3, #0
    e42c:	dd00      	ble.n	e430 <_dtoa_r+0x8d8>
    e42e:	e282      	b.n	e936 <_dtoa_r+0xdde>
    e430:	4669      	mov	r1, sp
    e432:	4652      	mov	r2, sl
    e434:	4653      	mov	r3, sl
    e436:	7c09      	ldrb	r1, [r1, #16]
    e438:	1c5c      	adds	r4, r3, #1
    e43a:	7011      	strb	r1, [r2, #0]
    e43c:	9a08      	ldr	r2, [sp, #32]
    e43e:	4552      	cmp	r2, sl
    e440:	d100      	bne.n	e444 <_dtoa_r+0x8ec>
    e442:	e28a      	b.n	e95a <_dtoa_r+0xe02>
    e444:	0031      	movs	r1, r6
    e446:	2300      	movs	r3, #0
    e448:	220a      	movs	r2, #10
    e44a:	0038      	movs	r0, r7
    e44c:	f001 fb8e 	bl	fb6c <__multadd>
    e450:	2300      	movs	r3, #0
    e452:	0006      	movs	r6, r0
    e454:	220a      	movs	r2, #10
    e456:	0029      	movs	r1, r5
    e458:	0038      	movs	r0, r7
    e45a:	4545      	cmp	r5, r8
    e45c:	d100      	bne.n	e460 <_dtoa_r+0x908>
    e45e:	e0e1      	b.n	e624 <_dtoa_r+0xacc>
    e460:	f001 fb84 	bl	fb6c <__multadd>
    e464:	4641      	mov	r1, r8
    e466:	0005      	movs	r5, r0
    e468:	2300      	movs	r3, #0
    e46a:	220a      	movs	r2, #10
    e46c:	0038      	movs	r0, r7
    e46e:	f001 fb7d 	bl	fb6c <__multadd>
    e472:	46a2      	mov	sl, r4
    e474:	4680      	mov	r8, r0
    e476:	e7a3      	b.n	e3c0 <_dtoa_r+0x868>
    e478:	201c      	movs	r0, #28
    e47a:	9b06      	ldr	r3, [sp, #24]
    e47c:	469c      	mov	ip, r3
    e47e:	4484      	add	ip, r0
    e480:	4663      	mov	r3, ip
    e482:	9306      	str	r3, [sp, #24]
    e484:	9b08      	ldr	r3, [sp, #32]
    e486:	469c      	mov	ip, r3
    e488:	4484      	add	ip, r0
    e48a:	4663      	mov	r3, ip
    e48c:	9308      	str	r3, [sp, #32]
    e48e:	9b04      	ldr	r3, [sp, #16]
    e490:	469c      	mov	ip, r3
    e492:	4484      	add	ip, r0
    e494:	4663      	mov	r3, ip
    e496:	9304      	str	r3, [sp, #16]
    e498:	e754      	b.n	e344 <_dtoa_r+0x7ec>
    e49a:	4649      	mov	r1, r9
    e49c:	4658      	mov	r0, fp
    e49e:	f001 fd67 	bl	ff70 <__mcmp>
    e4a2:	2800      	cmp	r0, #0
    e4a4:	db00      	blt.n	e4a8 <_dtoa_r+0x950>
    e4a6:	e763      	b.n	e370 <_dtoa_r+0x818>
    e4a8:	9b03      	ldr	r3, [sp, #12]
    e4aa:	4659      	mov	r1, fp
    e4ac:	3b01      	subs	r3, #1
    e4ae:	9303      	str	r3, [sp, #12]
    e4b0:	220a      	movs	r2, #10
    e4b2:	2300      	movs	r3, #0
    e4b4:	4650      	mov	r0, sl
    e4b6:	f001 fb59 	bl	fb6c <__multadd>
    e4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e4bc:	4683      	mov	fp, r0
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d000      	beq.n	e4c4 <_dtoa_r+0x96c>
    e4c2:	e2ca      	b.n	ea5a <_dtoa_r+0xf02>
    e4c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	dc00      	bgt.n	e4cc <_dtoa_r+0x974>
    e4ca:	e2d8      	b.n	ea7e <_dtoa_r+0xf26>
    e4cc:	9307      	str	r3, [sp, #28]
    e4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e4d0:	465d      	mov	r5, fp
    e4d2:	2400      	movs	r4, #0
    e4d4:	9f07      	ldr	r7, [sp, #28]
    e4d6:	469b      	mov	fp, r3
    e4d8:	e006      	b.n	e4e8 <_dtoa_r+0x990>
    e4da:	0029      	movs	r1, r5
    e4dc:	2300      	movs	r3, #0
    e4de:	220a      	movs	r2, #10
    e4e0:	4650      	mov	r0, sl
    e4e2:	f001 fb43 	bl	fb6c <__multadd>
    e4e6:	0005      	movs	r5, r0
    e4e8:	4649      	mov	r1, r9
    e4ea:	0028      	movs	r0, r5
    e4ec:	f7ff fa8a 	bl	da04 <quorem>
    e4f0:	465b      	mov	r3, fp
    e4f2:	3030      	adds	r0, #48	; 0x30
    e4f4:	5518      	strb	r0, [r3, r4]
    e4f6:	3401      	adds	r4, #1
    e4f8:	42bc      	cmp	r4, r7
    e4fa:	dbee      	blt.n	e4da <_dtoa_r+0x982>
    e4fc:	46ab      	mov	fp, r5
    e4fe:	0006      	movs	r6, r0
    e500:	9c07      	ldr	r4, [sp, #28]
    e502:	2c00      	cmp	r4, #0
    e504:	dc00      	bgt.n	e508 <_dtoa_r+0x9b0>
    e506:	e237      	b.n	e978 <_dtoa_r+0xe20>
    e508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e50a:	2700      	movs	r7, #0
    e50c:	469c      	mov	ip, r3
    e50e:	4464      	add	r4, ip
    e510:	4659      	mov	r1, fp
    e512:	2201      	movs	r2, #1
    e514:	4650      	mov	r0, sl
    e516:	f001 fccb 	bl	feb0 <__lshift>
    e51a:	4649      	mov	r1, r9
    e51c:	4683      	mov	fp, r0
    e51e:	f001 fd27 	bl	ff70 <__mcmp>
    e522:	2800      	cmp	r0, #0
    e524:	dc00      	bgt.n	e528 <_dtoa_r+0x9d0>
    e526:	e144      	b.n	e7b2 <_dtoa_r+0xc5a>
    e528:	1e65      	subs	r5, r4, #1
    e52a:	782b      	ldrb	r3, [r5, #0]
    e52c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e52e:	e006      	b.n	e53e <_dtoa_r+0x9e6>
    e530:	4295      	cmp	r5, r2
    e532:	d100      	bne.n	e536 <_dtoa_r+0x9de>
    e534:	e0b1      	b.n	e69a <_dtoa_r+0xb42>
    e536:	3c02      	subs	r4, #2
    e538:	7823      	ldrb	r3, [r4, #0]
    e53a:	002c      	movs	r4, r5
    e53c:	3d01      	subs	r5, #1
    e53e:	2b39      	cmp	r3, #57	; 0x39
    e540:	d0f6      	beq.n	e530 <_dtoa_r+0x9d8>
    e542:	3301      	adds	r3, #1
    e544:	702b      	strb	r3, [r5, #0]
    e546:	4649      	mov	r1, r9
    e548:	4650      	mov	r0, sl
    e54a:	f001 fb05 	bl	fb58 <_Bfree>
    e54e:	4643      	mov	r3, r8
    e550:	2b00      	cmp	r3, #0
    e552:	d100      	bne.n	e556 <_dtoa_r+0x9fe>
    e554:	e52f      	b.n	dfb6 <_dtoa_r+0x45e>
    e556:	2f00      	cmp	r7, #0
    e558:	d005      	beq.n	e566 <_dtoa_r+0xa0e>
    e55a:	4547      	cmp	r7, r8
    e55c:	d003      	beq.n	e566 <_dtoa_r+0xa0e>
    e55e:	0039      	movs	r1, r7
    e560:	4650      	mov	r0, sl
    e562:	f001 faf9 	bl	fb58 <_Bfree>
    e566:	4641      	mov	r1, r8
    e568:	4650      	mov	r0, sl
    e56a:	f001 faf5 	bl	fb58 <_Bfree>
    e56e:	e522      	b.n	dfb6 <_dtoa_r+0x45e>
    e570:	0013      	movs	r3, r2
    e572:	e675      	b.n	e260 <_dtoa_r+0x708>
    e574:	2e00      	cmp	r6, #0
    e576:	d000      	beq.n	e57a <_dtoa_r+0xa22>
    e578:	e6ab      	b.n	e2d2 <_dtoa_r+0x77a>
    e57a:	033b      	lsls	r3, r7, #12
    e57c:	2400      	movs	r4, #0
    e57e:	2b00      	cmp	r3, #0
    e580:	d000      	beq.n	e584 <_dtoa_r+0xa2c>
    e582:	e6bf      	b.n	e304 <_dtoa_r+0x7ac>
    e584:	4bba      	ldr	r3, [pc, #744]	; (e870 <_dtoa_r+0xd18>)
    e586:	423b      	tst	r3, r7
    e588:	d100      	bne.n	e58c <_dtoa_r+0xa34>
    e58a:	e6bb      	b.n	e304 <_dtoa_r+0x7ac>
    e58c:	9b06      	ldr	r3, [sp, #24]
    e58e:	3401      	adds	r4, #1
    e590:	3301      	adds	r3, #1
    e592:	9306      	str	r3, [sp, #24]
    e594:	9b04      	ldr	r3, [sp, #16]
    e596:	3301      	adds	r3, #1
    e598:	9304      	str	r3, [sp, #16]
    e59a:	e6b3      	b.n	e304 <_dtoa_r+0x7ac>
    e59c:	2301      	movs	r3, #1
    e59e:	930b      	str	r3, [sp, #44]	; 0x2c
    e5a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	dc00      	bgt.n	e5a8 <_dtoa_r+0xa50>
    e5a6:	e0d1      	b.n	e74c <_dtoa_r+0xbf4>
    e5a8:	001d      	movs	r5, r3
    e5aa:	4698      	mov	r8, r3
    e5ac:	930e      	str	r3, [sp, #56]	; 0x38
    e5ae:	9307      	str	r3, [sp, #28]
    e5b0:	f7ff fbc8 	bl	dd44 <_dtoa_r+0x1ec>
    e5b4:	9b07      	ldr	r3, [sp, #28]
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	dd00      	ble.n	e5bc <_dtoa_r+0xa64>
    e5ba:	e553      	b.n	e064 <_dtoa_r+0x50c>
    e5bc:	d000      	beq.n	e5c0 <_dtoa_r+0xa68>
    e5be:	e0ad      	b.n	e71c <_dtoa_r+0xbc4>
    e5c0:	9804      	ldr	r0, [sp, #16]
    e5c2:	9905      	ldr	r1, [sp, #20]
    e5c4:	2200      	movs	r2, #0
    e5c6:	4bab      	ldr	r3, [pc, #684]	; (e874 <_dtoa_r+0xd1c>)
    e5c8:	f7fc fce8 	bl	af9c <__aeabi_dmul>
    e5cc:	003b      	movs	r3, r7
    e5ce:	0032      	movs	r2, r6
    e5d0:	f7fa fd48 	bl	9064 <__aeabi_dcmpge>
    e5d4:	2300      	movs	r3, #0
    e5d6:	4699      	mov	r9, r3
    e5d8:	4698      	mov	r8, r3
    e5da:	2800      	cmp	r0, #0
    e5dc:	d055      	beq.n	e68a <_dtoa_r+0xb32>
    e5de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e5e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e5e2:	43db      	mvns	r3, r3
    e5e4:	9303      	str	r3, [sp, #12]
    e5e6:	4649      	mov	r1, r9
    e5e8:	4650      	mov	r0, sl
    e5ea:	f001 fab5 	bl	fb58 <_Bfree>
    e5ee:	4643      	mov	r3, r8
    e5f0:	2b00      	cmp	r3, #0
    e5f2:	d100      	bne.n	e5f6 <_dtoa_r+0xa9e>
    e5f4:	e4df      	b.n	dfb6 <_dtoa_r+0x45e>
    e5f6:	e7b6      	b.n	e566 <_dtoa_r+0xa0e>
    e5f8:	464a      	mov	r2, r9
    e5fa:	4659      	mov	r1, fp
    e5fc:	4650      	mov	r0, sl
    e5fe:	f001 fbf7 	bl	fdf0 <__pow5mult>
    e602:	4683      	mov	fp, r0
    e604:	e653      	b.n	e2ae <_dtoa_r+0x756>
    e606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e608:	2a00      	cmp	r2, #0
    e60a:	d100      	bne.n	e60e <_dtoa_r+0xab6>
    e60c:	e1b6      	b.n	e97c <_dtoa_r+0xe24>
    e60e:	4a9a      	ldr	r2, [pc, #616]	; (e878 <_dtoa_r+0xd20>)
    e610:	464c      	mov	r4, r9
    e612:	4694      	mov	ip, r2
    e614:	9a06      	ldr	r2, [sp, #24]
    e616:	4463      	add	r3, ip
    e618:	9208      	str	r2, [sp, #32]
    e61a:	e5d5      	b.n	e1c8 <_dtoa_r+0x670>
    e61c:	2e00      	cmp	r6, #0
    e61e:	d000      	beq.n	e622 <_dtoa_r+0xaca>
    e620:	e670      	b.n	e304 <_dtoa_r+0x7ac>
    e622:	e7aa      	b.n	e57a <_dtoa_r+0xa22>
    e624:	f001 faa2 	bl	fb6c <__multadd>
    e628:	46a2      	mov	sl, r4
    e62a:	0005      	movs	r5, r0
    e62c:	4680      	mov	r8, r0
    e62e:	e6c7      	b.n	e3c0 <_dtoa_r+0x868>
    e630:	2301      	movs	r3, #1
    e632:	469b      	mov	fp, r3
    e634:	e6e2      	b.n	e3fc <_dtoa_r+0x8a4>
    e636:	2300      	movs	r3, #0
    e638:	930b      	str	r3, [sp, #44]	; 0x2c
    e63a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e63c:	2b02      	cmp	r3, #2
    e63e:	d0af      	beq.n	e5a0 <_dtoa_r+0xa48>
    e640:	2400      	movs	r4, #0
    e642:	4653      	mov	r3, sl
    e644:	0021      	movs	r1, r4
    e646:	645c      	str	r4, [r3, #68]	; 0x44
    e648:	4650      	mov	r0, sl
    e64a:	f001 fa5d 	bl	fb08 <_Balloc>
    e64e:	4653      	mov	r3, sl
    e650:	6418      	str	r0, [r3, #64]	; 0x40
    e652:	2301      	movs	r3, #1
    e654:	425b      	negs	r3, r3
    e656:	9307      	str	r3, [sp, #28]
    e658:	930e      	str	r3, [sp, #56]	; 0x38
    e65a:	3302      	adds	r3, #2
    e65c:	900a      	str	r0, [sp, #40]	; 0x28
    e65e:	9423      	str	r4, [sp, #140]	; 0x8c
    e660:	930b      	str	r3, [sp, #44]	; 0x2c
    e662:	e4ec      	b.n	e03e <_dtoa_r+0x4e6>
    e664:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e666:	2b02      	cmp	r3, #2
    e668:	dc00      	bgt.n	e66c <_dtoa_r+0xb14>
    e66a:	e685      	b.n	e378 <_dtoa_r+0x820>
    e66c:	9b07      	ldr	r3, [sp, #28]
    e66e:	2b00      	cmp	r3, #0
    e670:	d1b5      	bne.n	e5de <_dtoa_r+0xa86>
    e672:	4649      	mov	r1, r9
    e674:	2205      	movs	r2, #5
    e676:	4650      	mov	r0, sl
    e678:	f001 fa78 	bl	fb6c <__multadd>
    e67c:	4681      	mov	r9, r0
    e67e:	0001      	movs	r1, r0
    e680:	4658      	mov	r0, fp
    e682:	f001 fc75 	bl	ff70 <__mcmp>
    e686:	2800      	cmp	r0, #0
    e688:	dda9      	ble.n	e5de <_dtoa_r+0xa86>
    e68a:	2331      	movs	r3, #49	; 0x31
    e68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e68e:	7013      	strb	r3, [r2, #0]
    e690:	9b03      	ldr	r3, [sp, #12]
    e692:	1c54      	adds	r4, r2, #1
    e694:	3301      	adds	r3, #1
    e696:	9303      	str	r3, [sp, #12]
    e698:	e7a5      	b.n	e5e6 <_dtoa_r+0xa8e>
    e69a:	9b03      	ldr	r3, [sp, #12]
    e69c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e69e:	3301      	adds	r3, #1
    e6a0:	9303      	str	r3, [sp, #12]
    e6a2:	2331      	movs	r3, #49	; 0x31
    e6a4:	7013      	strb	r3, [r2, #0]
    e6a6:	e74e      	b.n	e546 <_dtoa_r+0x9ee>
    e6a8:	2300      	movs	r3, #0
    e6aa:	930b      	str	r3, [sp, #44]	; 0x2c
    e6ac:	f7ff fb3d 	bl	dd2a <_dtoa_r+0x1d2>
    e6b0:	9b06      	ldr	r3, [sp, #24]
    e6b2:	465c      	mov	r4, fp
    e6b4:	469b      	mov	fp, r3
    e6b6:	9b07      	ldr	r3, [sp, #28]
    e6b8:	469a      	mov	sl, r3
    e6ba:	e47c      	b.n	dfb6 <_dtoa_r+0x45e>
    e6bc:	4640      	mov	r0, r8
    e6be:	f7fd fa57 	bl	bb70 <__aeabi_i2d>
    e6c2:	0032      	movs	r2, r6
    e6c4:	003b      	movs	r3, r7
    e6c6:	f7fc fc69 	bl	af9c <__aeabi_dmul>
    e6ca:	2200      	movs	r2, #0
    e6cc:	4b6b      	ldr	r3, [pc, #428]	; (e87c <_dtoa_r+0xd24>)
    e6ce:	f7fb fd21 	bl	a114 <__aeabi_dadd>
    e6d2:	4a6b      	ldr	r2, [pc, #428]	; (e880 <_dtoa_r+0xd28>)
    e6d4:	000b      	movs	r3, r1
    e6d6:	4694      	mov	ip, r2
    e6d8:	4463      	add	r3, ip
    e6da:	9008      	str	r0, [sp, #32]
    e6dc:	9109      	str	r1, [sp, #36]	; 0x24
    e6de:	9309      	str	r3, [sp, #36]	; 0x24
    e6e0:	2200      	movs	r2, #0
    e6e2:	4b64      	ldr	r3, [pc, #400]	; (e874 <_dtoa_r+0xd1c>)
    e6e4:	0030      	movs	r0, r6
    e6e6:	0039      	movs	r1, r7
    e6e8:	f7fc fed8 	bl	b49c <__aeabi_dsub>
    e6ec:	9e08      	ldr	r6, [sp, #32]
    e6ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e6f0:	0032      	movs	r2, r6
    e6f2:	003b      	movs	r3, r7
    e6f4:	0004      	movs	r4, r0
    e6f6:	000d      	movs	r5, r1
    e6f8:	f7fa fcaa 	bl	9050 <__aeabi_dcmpgt>
    e6fc:	2800      	cmp	r0, #0
    e6fe:	d000      	beq.n	e702 <_dtoa_r+0xbaa>
    e700:	e0b2      	b.n	e868 <_dtoa_r+0xd10>
    e702:	2080      	movs	r0, #128	; 0x80
    e704:	0600      	lsls	r0, r0, #24
    e706:	4684      	mov	ip, r0
    e708:	0039      	movs	r1, r7
    e70a:	4461      	add	r1, ip
    e70c:	000b      	movs	r3, r1
    e70e:	0032      	movs	r2, r6
    e710:	0020      	movs	r0, r4
    e712:	0029      	movs	r1, r5
    e714:	f7fa fc88 	bl	9028 <__aeabi_dcmplt>
    e718:	2800      	cmp	r0, #0
    e71a:	d057      	beq.n	e7cc <_dtoa_r+0xc74>
    e71c:	2300      	movs	r3, #0
    e71e:	4699      	mov	r9, r3
    e720:	4698      	mov	r8, r3
    e722:	e75c      	b.n	e5de <_dtoa_r+0xa86>
    e724:	980a      	ldr	r0, [sp, #40]	; 0x28
    e726:	f7ff fa4c 	bl	dbc2 <_dtoa_r+0x6a>
    e72a:	1ae2      	subs	r2, r4, r3
    e72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e72e:	46a1      	mov	r9, r4
    e730:	469c      	mov	ip, r3
    e732:	4494      	add	ip, r2
    e734:	4663      	mov	r3, ip
    e736:	2400      	movs	r4, #0
    e738:	930d      	str	r3, [sp, #52]	; 0x34
    e73a:	e53e      	b.n	e1ba <_dtoa_r+0x662>
    e73c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e73e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e740:	9208      	str	r2, [sp, #32]
    e742:	9309      	str	r3, [sp, #36]	; 0x24
    e744:	2302      	movs	r3, #2
    e746:	4698      	mov	r8, r3
    e748:	f7ff fb3a 	bl	ddc0 <_dtoa_r+0x268>
    e74c:	2300      	movs	r3, #0
    e74e:	4652      	mov	r2, sl
    e750:	2100      	movs	r1, #0
    e752:	6453      	str	r3, [r2, #68]	; 0x44
    e754:	4650      	mov	r0, sl
    e756:	f001 f9d7 	bl	fb08 <_Balloc>
    e75a:	4653      	mov	r3, sl
    e75c:	6418      	str	r0, [r3, #64]	; 0x40
    e75e:	2301      	movs	r3, #1
    e760:	900a      	str	r0, [sp, #40]	; 0x28
    e762:	9307      	str	r3, [sp, #28]
    e764:	9323      	str	r3, [sp, #140]	; 0x8c
    e766:	930e      	str	r3, [sp, #56]	; 0x38
    e768:	f7ff fb07 	bl	dd7a <_dtoa_r+0x222>
    e76c:	4643      	mov	r3, r8
    e76e:	930c      	str	r3, [sp, #48]	; 0x30
    e770:	465b      	mov	r3, fp
    e772:	9a06      	ldr	r2, [sp, #24]
    e774:	46a8      	mov	r8, r5
    e776:	46b3      	mov	fp, r6
    e778:	4655      	mov	r5, sl
    e77a:	9e04      	ldr	r6, [sp, #16]
    e77c:	4691      	mov	r9, r2
    e77e:	46ba      	mov	sl, r7
    e780:	2b00      	cmp	r3, #0
    e782:	dd10      	ble.n	e7a6 <_dtoa_r+0xc4e>
    e784:	4659      	mov	r1, fp
    e786:	2201      	movs	r2, #1
    e788:	0038      	movs	r0, r7
    e78a:	f001 fb91 	bl	feb0 <__lshift>
    e78e:	4649      	mov	r1, r9
    e790:	4683      	mov	fp, r0
    e792:	f001 fbed 	bl	ff70 <__mcmp>
    e796:	2800      	cmp	r0, #0
    e798:	dc00      	bgt.n	e79c <_dtoa_r+0xc44>
    e79a:	e157      	b.n	ea4c <_dtoa_r+0xef4>
    e79c:	2e39      	cmp	r6, #57	; 0x39
    e79e:	d100      	bne.n	e7a2 <_dtoa_r+0xc4a>
    e7a0:	e122      	b.n	e9e8 <_dtoa_r+0xe90>
    e7a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e7a4:	3631      	adds	r6, #49	; 0x31
    e7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a8:	4647      	mov	r7, r8
    e7aa:	1c6c      	adds	r4, r5, #1
    e7ac:	702e      	strb	r6, [r5, #0]
    e7ae:	4698      	mov	r8, r3
    e7b0:	e6c9      	b.n	e546 <_dtoa_r+0x9ee>
    e7b2:	2800      	cmp	r0, #0
    e7b4:	d103      	bne.n	e7be <_dtoa_r+0xc66>
    e7b6:	07f3      	lsls	r3, r6, #31
    e7b8:	d501      	bpl.n	e7be <_dtoa_r+0xc66>
    e7ba:	e6b5      	b.n	e528 <_dtoa_r+0x9d0>
    e7bc:	001c      	movs	r4, r3
    e7be:	1e63      	subs	r3, r4, #1
    e7c0:	781a      	ldrb	r2, [r3, #0]
    e7c2:	2a30      	cmp	r2, #48	; 0x30
    e7c4:	d0fa      	beq.n	e7bc <_dtoa_r+0xc64>
    e7c6:	e6be      	b.n	e546 <_dtoa_r+0x9ee>
    e7c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e7ca:	4699      	mov	r9, r3
    e7cc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e7ce:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e7d0:	e435      	b.n	e03e <_dtoa_r+0x4e6>
    e7d2:	2501      	movs	r5, #1
    e7d4:	f7ff fab4 	bl	dd40 <_dtoa_r+0x1e8>
    e7d8:	9b03      	ldr	r3, [sp, #12]
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d100      	bne.n	e7e0 <_dtoa_r+0xc88>
    e7de:	e0d4      	b.n	e98a <_dtoa_r+0xe32>
    e7e0:	9810      	ldr	r0, [sp, #64]	; 0x40
    e7e2:	9911      	ldr	r1, [sp, #68]	; 0x44
    e7e4:	425c      	negs	r4, r3
    e7e6:	230f      	movs	r3, #15
    e7e8:	4a26      	ldr	r2, [pc, #152]	; (e884 <_dtoa_r+0xd2c>)
    e7ea:	4023      	ands	r3, r4
    e7ec:	00db      	lsls	r3, r3, #3
    e7ee:	18d3      	adds	r3, r2, r3
    e7f0:	681a      	ldr	r2, [r3, #0]
    e7f2:	685b      	ldr	r3, [r3, #4]
    e7f4:	f7fc fbd2 	bl	af9c <__aeabi_dmul>
    e7f8:	1124      	asrs	r4, r4, #4
    e7fa:	0006      	movs	r6, r0
    e7fc:	000f      	movs	r7, r1
    e7fe:	2c00      	cmp	r4, #0
    e800:	d100      	bne.n	e804 <_dtoa_r+0xcac>
    e802:	e149      	b.n	ea98 <_dtoa_r+0xf40>
    e804:	2302      	movs	r3, #2
    e806:	4698      	mov	r8, r3
    e808:	4d1f      	ldr	r5, [pc, #124]	; (e888 <_dtoa_r+0xd30>)
    e80a:	2301      	movs	r3, #1
    e80c:	4223      	tst	r3, r4
    e80e:	d009      	beq.n	e824 <_dtoa_r+0xccc>
    e810:	469c      	mov	ip, r3
    e812:	682a      	ldr	r2, [r5, #0]
    e814:	686b      	ldr	r3, [r5, #4]
    e816:	0030      	movs	r0, r6
    e818:	0039      	movs	r1, r7
    e81a:	44e0      	add	r8, ip
    e81c:	f7fc fbbe 	bl	af9c <__aeabi_dmul>
    e820:	0006      	movs	r6, r0
    e822:	000f      	movs	r7, r1
    e824:	1064      	asrs	r4, r4, #1
    e826:	3508      	adds	r5, #8
    e828:	2c00      	cmp	r4, #0
    e82a:	d1ee      	bne.n	e80a <_dtoa_r+0xcb2>
    e82c:	f7ff fae4 	bl	ddf8 <_dtoa_r+0x2a0>
    e830:	9b03      	ldr	r3, [sp, #12]
    e832:	2730      	movs	r7, #48	; 0x30
    e834:	3301      	adds	r3, #1
    e836:	9303      	str	r3, [sp, #12]
    e838:	2330      	movs	r3, #48	; 0x30
    e83a:	702b      	strb	r3, [r5, #0]
    e83c:	e4ac      	b.n	e198 <_dtoa_r+0x640>
    e83e:	6859      	ldr	r1, [r3, #4]
    e840:	4650      	mov	r0, sl
    e842:	f001 f961 	bl	fb08 <_Balloc>
    e846:	4643      	mov	r3, r8
    e848:	4641      	mov	r1, r8
    e84a:	0004      	movs	r4, r0
    e84c:	691b      	ldr	r3, [r3, #16]
    e84e:	310c      	adds	r1, #12
    e850:	1c9a      	adds	r2, r3, #2
    e852:	0092      	lsls	r2, r2, #2
    e854:	300c      	adds	r0, #12
    e856:	f7fd fb5d 	bl	bf14 <memcpy>
    e85a:	2201      	movs	r2, #1
    e85c:	0021      	movs	r1, r4
    e85e:	4650      	mov	r0, sl
    e860:	f001 fb26 	bl	feb0 <__lshift>
    e864:	900c      	str	r0, [sp, #48]	; 0x30
    e866:	e599      	b.n	e39c <_dtoa_r+0x844>
    e868:	2300      	movs	r3, #0
    e86a:	4699      	mov	r9, r3
    e86c:	4698      	mov	r8, r3
    e86e:	e70c      	b.n	e68a <_dtoa_r+0xb32>
    e870:	7ff00000 	.word	0x7ff00000
    e874:	40140000 	.word	0x40140000
    e878:	00000433 	.word	0x00000433
    e87c:	401c0000 	.word	0x401c0000
    e880:	fcc00000 	.word	0xfcc00000
    e884:	000114e8 	.word	0x000114e8
    e888:	000114c0 	.word	0x000114c0
    e88c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e88e:	498f      	ldr	r1, [pc, #572]	; (eacc <_dtoa_r+0xf74>)
    e890:	3b01      	subs	r3, #1
    e892:	00db      	lsls	r3, r3, #3
    e894:	18c9      	adds	r1, r1, r3
    e896:	6808      	ldr	r0, [r1, #0]
    e898:	6849      	ldr	r1, [r1, #4]
    e89a:	9a08      	ldr	r2, [sp, #32]
    e89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e89e:	f7fc fb7d 	bl	af9c <__aeabi_dmul>
    e8a2:	9014      	str	r0, [sp, #80]	; 0x50
    e8a4:	9115      	str	r1, [sp, #84]	; 0x54
    e8a6:	0039      	movs	r1, r7
    e8a8:	0030      	movs	r0, r6
    e8aa:	f7fd f92d 	bl	bb08 <__aeabi_d2iz>
    e8ae:	0005      	movs	r5, r0
    e8b0:	f7fd f95e 	bl	bb70 <__aeabi_i2d>
    e8b4:	0002      	movs	r2, r0
    e8b6:	000b      	movs	r3, r1
    e8b8:	0030      	movs	r0, r6
    e8ba:	0039      	movs	r1, r7
    e8bc:	f7fc fdee 	bl	b49c <__aeabi_dsub>
    e8c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e8c2:	9008      	str	r0, [sp, #32]
    e8c4:	9109      	str	r1, [sp, #36]	; 0x24
    e8c6:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8c8:	001a      	movs	r2, r3
    e8ca:	468c      	mov	ip, r1
    e8cc:	3530      	adds	r5, #48	; 0x30
    e8ce:	4462      	add	r2, ip
    e8d0:	1c4c      	adds	r4, r1, #1
    e8d2:	700d      	strb	r5, [r1, #0]
    e8d4:	4690      	mov	r8, r2
    e8d6:	2b01      	cmp	r3, #1
    e8d8:	d01b      	beq.n	e912 <_dtoa_r+0xdba>
    e8da:	9808      	ldr	r0, [sp, #32]
    e8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    e8de:	0025      	movs	r5, r4
    e8e0:	2200      	movs	r2, #0
    e8e2:	4b7b      	ldr	r3, [pc, #492]	; (ead0 <_dtoa_r+0xf78>)
    e8e4:	f7fc fb5a 	bl	af9c <__aeabi_dmul>
    e8e8:	000f      	movs	r7, r1
    e8ea:	0006      	movs	r6, r0
    e8ec:	f7fd f90c 	bl	bb08 <__aeabi_d2iz>
    e8f0:	0004      	movs	r4, r0
    e8f2:	f7fd f93d 	bl	bb70 <__aeabi_i2d>
    e8f6:	3430      	adds	r4, #48	; 0x30
    e8f8:	0002      	movs	r2, r0
    e8fa:	000b      	movs	r3, r1
    e8fc:	0030      	movs	r0, r6
    e8fe:	0039      	movs	r1, r7
    e900:	f7fc fdcc 	bl	b49c <__aeabi_dsub>
    e904:	702c      	strb	r4, [r5, #0]
    e906:	3501      	adds	r5, #1
    e908:	45a8      	cmp	r8, r5
    e90a:	d1e9      	bne.n	e8e0 <_dtoa_r+0xd88>
    e90c:	4644      	mov	r4, r8
    e90e:	9008      	str	r0, [sp, #32]
    e910:	9109      	str	r1, [sp, #36]	; 0x24
    e912:	9814      	ldr	r0, [sp, #80]	; 0x50
    e914:	9915      	ldr	r1, [sp, #84]	; 0x54
    e916:	2200      	movs	r2, #0
    e918:	4b6e      	ldr	r3, [pc, #440]	; (ead4 <_dtoa_r+0xf7c>)
    e91a:	f7fb fbfb 	bl	a114 <__aeabi_dadd>
    e91e:	9a08      	ldr	r2, [sp, #32]
    e920:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e922:	f7fa fb81 	bl	9028 <__aeabi_dcmplt>
    e926:	2800      	cmp	r0, #0
    e928:	d067      	beq.n	e9fa <_dtoa_r+0xea2>
    e92a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e92c:	1e65      	subs	r5, r4, #1
    e92e:	9303      	str	r3, [sp, #12]
    e930:	782f      	ldrb	r7, [r5, #0]
    e932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e934:	e42e      	b.n	e194 <_dtoa_r+0x63c>
    e936:	4643      	mov	r3, r8
    e938:	46b3      	mov	fp, r6
    e93a:	930c      	str	r3, [sp, #48]	; 0x30
    e93c:	9e04      	ldr	r6, [sp, #16]
    e93e:	9b06      	ldr	r3, [sp, #24]
    e940:	46a8      	mov	r8, r5
    e942:	4699      	mov	r9, r3
    e944:	4655      	mov	r5, sl
    e946:	46ba      	mov	sl, r7
    e948:	2e39      	cmp	r6, #57	; 0x39
    e94a:	d04d      	beq.n	e9e8 <_dtoa_r+0xe90>
    e94c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e94e:	3601      	adds	r6, #1
    e950:	4647      	mov	r7, r8
    e952:	1c6c      	adds	r4, r5, #1
    e954:	702e      	strb	r6, [r5, #0]
    e956:	4698      	mov	r8, r3
    e958:	e5f5      	b.n	e546 <_dtoa_r+0x9ee>
    e95a:	4642      	mov	r2, r8
    e95c:	9b06      	ldr	r3, [sp, #24]
    e95e:	46b3      	mov	fp, r6
    e960:	46ba      	mov	sl, r7
    e962:	9e04      	ldr	r6, [sp, #16]
    e964:	4699      	mov	r9, r3
    e966:	002f      	movs	r7, r5
    e968:	4690      	mov	r8, r2
    e96a:	e5d1      	b.n	e510 <_dtoa_r+0x9b8>
    e96c:	9b06      	ldr	r3, [sp, #24]
    e96e:	9a07      	ldr	r2, [sp, #28]
    e970:	1a9b      	subs	r3, r3, r2
    e972:	9308      	str	r3, [sp, #32]
    e974:	2300      	movs	r3, #0
    e976:	e427      	b.n	e1c8 <_dtoa_r+0x670>
    e978:	2401      	movs	r4, #1
    e97a:	e5c5      	b.n	e508 <_dtoa_r+0x9b0>
    e97c:	2336      	movs	r3, #54	; 0x36
    e97e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e980:	464c      	mov	r4, r9
    e982:	1a9b      	subs	r3, r3, r2
    e984:	9a06      	ldr	r2, [sp, #24]
    e986:	9208      	str	r2, [sp, #32]
    e988:	e41e      	b.n	e1c8 <_dtoa_r+0x670>
    e98a:	2302      	movs	r3, #2
    e98c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e98e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e990:	4698      	mov	r8, r3
    e992:	f7ff fa31 	bl	ddf8 <_dtoa_r+0x2a0>
    e996:	9b07      	ldr	r3, [sp, #28]
    e998:	2b00      	cmp	r3, #0
    e99a:	d100      	bne.n	e99e <_dtoa_r+0xe46>
    e99c:	e68e      	b.n	e6bc <_dtoa_r+0xb64>
    e99e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e9a0:	2c00      	cmp	r4, #0
    e9a2:	dc00      	bgt.n	e9a6 <_dtoa_r+0xe4e>
    e9a4:	e712      	b.n	e7cc <_dtoa_r+0xc74>
    e9a6:	9b03      	ldr	r3, [sp, #12]
    e9a8:	2200      	movs	r2, #0
    e9aa:	3b01      	subs	r3, #1
    e9ac:	9313      	str	r3, [sp, #76]	; 0x4c
    e9ae:	0030      	movs	r0, r6
    e9b0:	4b47      	ldr	r3, [pc, #284]	; (ead0 <_dtoa_r+0xf78>)
    e9b2:	0039      	movs	r1, r7
    e9b4:	f7fc faf2 	bl	af9c <__aeabi_dmul>
    e9b8:	0006      	movs	r6, r0
    e9ba:	4640      	mov	r0, r8
    e9bc:	000f      	movs	r7, r1
    e9be:	3001      	adds	r0, #1
    e9c0:	f7fd f8d6 	bl	bb70 <__aeabi_i2d>
    e9c4:	0032      	movs	r2, r6
    e9c6:	003b      	movs	r3, r7
    e9c8:	f7fc fae8 	bl	af9c <__aeabi_dmul>
    e9cc:	2200      	movs	r2, #0
    e9ce:	4b42      	ldr	r3, [pc, #264]	; (ead8 <_dtoa_r+0xf80>)
    e9d0:	f7fb fba0 	bl	a114 <__aeabi_dadd>
    e9d4:	4a41      	ldr	r2, [pc, #260]	; (eadc <_dtoa_r+0xf84>)
    e9d6:	000b      	movs	r3, r1
    e9d8:	4694      	mov	ip, r2
    e9da:	4463      	add	r3, ip
    e9dc:	9008      	str	r0, [sp, #32]
    e9de:	9109      	str	r1, [sp, #36]	; 0x24
    e9e0:	9412      	str	r4, [sp, #72]	; 0x48
    e9e2:	9309      	str	r3, [sp, #36]	; 0x24
    e9e4:	f7ff fa30 	bl	de48 <_dtoa_r+0x2f0>
    e9e8:	2339      	movs	r3, #57	; 0x39
    e9ea:	702b      	strb	r3, [r5, #0]
    e9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e9ee:	4647      	mov	r7, r8
    e9f0:	1c6c      	adds	r4, r5, #1
    e9f2:	4698      	mov	r8, r3
    e9f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e9f6:	2339      	movs	r3, #57	; 0x39
    e9f8:	e5a1      	b.n	e53e <_dtoa_r+0x9e6>
    e9fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e9fe:	2000      	movs	r0, #0
    ea00:	4934      	ldr	r1, [pc, #208]	; (ead4 <_dtoa_r+0xf7c>)
    ea02:	f7fc fd4b 	bl	b49c <__aeabi_dsub>
    ea06:	9a08      	ldr	r2, [sp, #32]
    ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea0a:	f7fa fb21 	bl	9050 <__aeabi_dcmpgt>
    ea0e:	2800      	cmp	r0, #0
    ea10:	d101      	bne.n	ea16 <_dtoa_r+0xebe>
    ea12:	e6db      	b.n	e7cc <_dtoa_r+0xc74>
    ea14:	001c      	movs	r4, r3
    ea16:	1e63      	subs	r3, r4, #1
    ea18:	781a      	ldrb	r2, [r3, #0]
    ea1a:	2a30      	cmp	r2, #48	; 0x30
    ea1c:	d0fa      	beq.n	ea14 <_dtoa_r+0xebc>
    ea1e:	f7ff fac8 	bl	dfb2 <_dtoa_r+0x45a>
    ea22:	4643      	mov	r3, r8
    ea24:	46b3      	mov	fp, r6
    ea26:	930c      	str	r3, [sp, #48]	; 0x30
    ea28:	9e04      	ldr	r6, [sp, #16]
    ea2a:	9b06      	ldr	r3, [sp, #24]
    ea2c:	46a8      	mov	r8, r5
    ea2e:	4699      	mov	r9, r3
    ea30:	4655      	mov	r5, sl
    ea32:	46ba      	mov	sl, r7
    ea34:	2e39      	cmp	r6, #57	; 0x39
    ea36:	d0d7      	beq.n	e9e8 <_dtoa_r+0xe90>
    ea38:	2c00      	cmp	r4, #0
    ea3a:	dd00      	ble.n	ea3e <_dtoa_r+0xee6>
    ea3c:	e6b1      	b.n	e7a2 <_dtoa_r+0xc4a>
    ea3e:	e6b2      	b.n	e7a6 <_dtoa_r+0xc4e>
    ea40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ea42:	464d      	mov	r5, r9
    ea44:	9203      	str	r2, [sp, #12]
    ea46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ea48:	f7ff fba4 	bl	e194 <_dtoa_r+0x63c>
    ea4c:	2800      	cmp	r0, #0
    ea4e:	d000      	beq.n	ea52 <_dtoa_r+0xefa>
    ea50:	e6a9      	b.n	e7a6 <_dtoa_r+0xc4e>
    ea52:	07f3      	lsls	r3, r6, #31
    ea54:	d400      	bmi.n	ea58 <_dtoa_r+0xf00>
    ea56:	e6a6      	b.n	e7a6 <_dtoa_r+0xc4e>
    ea58:	e6a0      	b.n	e79c <_dtoa_r+0xc44>
    ea5a:	2300      	movs	r3, #0
    ea5c:	4641      	mov	r1, r8
    ea5e:	220a      	movs	r2, #10
    ea60:	4650      	mov	r0, sl
    ea62:	f001 f883 	bl	fb6c <__multadd>
    ea66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea68:	4680      	mov	r8, r0
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	dd01      	ble.n	ea72 <_dtoa_r+0xf1a>
    ea6e:	9307      	str	r3, [sp, #28]
    ea70:	e486      	b.n	e380 <_dtoa_r+0x828>
    ea72:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ea74:	2b02      	cmp	r3, #2
    ea76:	dc1f      	bgt.n	eab8 <_dtoa_r+0xf60>
    ea78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea7a:	9307      	str	r3, [sp, #28]
    ea7c:	e480      	b.n	e380 <_dtoa_r+0x828>
    ea7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ea80:	2b02      	cmp	r3, #2
    ea82:	dc19      	bgt.n	eab8 <_dtoa_r+0xf60>
    ea84:	4649      	mov	r1, r9
    ea86:	f7fe ffbd 	bl	da04 <quorem>
    ea8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ea8c:	3030      	adds	r0, #48	; 0x30
    ea8e:	7018      	strb	r0, [r3, #0]
    ea90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea92:	0006      	movs	r6, r0
    ea94:	9307      	str	r3, [sp, #28]
    ea96:	e533      	b.n	e500 <_dtoa_r+0x9a8>
    ea98:	2302      	movs	r3, #2
    ea9a:	4698      	mov	r8, r3
    ea9c:	f7ff f9ac 	bl	ddf8 <_dtoa_r+0x2a0>
    eaa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eaa2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    eaa4:	9303      	str	r3, [sp, #12]
    eaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eaa8:	001d      	movs	r5, r3
    eaaa:	f7ff fb73 	bl	e194 <_dtoa_r+0x63c>
    eaae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eab0:	9c14      	ldr	r4, [sp, #80]	; 0x50
    eab2:	9303      	str	r3, [sp, #12]
    eab4:	f7ff fa7f 	bl	dfb6 <_dtoa_r+0x45e>
    eab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eaba:	9307      	str	r3, [sp, #28]
    eabc:	e5d6      	b.n	e66c <_dtoa_r+0xb14>
    eabe:	2b04      	cmp	r3, #4
    eac0:	d100      	bne.n	eac4 <_dtoa_r+0xf6c>
    eac2:	e43f      	b.n	e344 <_dtoa_r+0x7ec>
    eac4:	233c      	movs	r3, #60	; 0x3c
    eac6:	1a18      	subs	r0, r3, r0
    eac8:	e4d7      	b.n	e47a <_dtoa_r+0x922>
    eaca:	46c0      	nop			; (mov r8, r8)
    eacc:	000114e8 	.word	0x000114e8
    ead0:	40240000 	.word	0x40240000
    ead4:	3fe00000 	.word	0x3fe00000
    ead8:	401c0000 	.word	0x401c0000
    eadc:	fcc00000 	.word	0xfcc00000

0000eae0 <__sflush_r>:
    eae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eae2:	46c6      	mov	lr, r8
    eae4:	b500      	push	{lr}
    eae6:	230c      	movs	r3, #12
    eae8:	5eca      	ldrsh	r2, [r1, r3]
    eaea:	4680      	mov	r8, r0
    eaec:	b293      	uxth	r3, r2
    eaee:	000c      	movs	r4, r1
    eaf0:	0719      	lsls	r1, r3, #28
    eaf2:	d440      	bmi.n	eb76 <__sflush_r+0x96>
    eaf4:	2380      	movs	r3, #128	; 0x80
    eaf6:	011b      	lsls	r3, r3, #4
    eaf8:	4313      	orrs	r3, r2
    eafa:	6862      	ldr	r2, [r4, #4]
    eafc:	81a3      	strh	r3, [r4, #12]
    eafe:	2a00      	cmp	r2, #0
    eb00:	dc00      	bgt.n	eb04 <__sflush_r+0x24>
    eb02:	e070      	b.n	ebe6 <__sflush_r+0x106>
    eb04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    eb06:	2e00      	cmp	r6, #0
    eb08:	d031      	beq.n	eb6e <__sflush_r+0x8e>
    eb0a:	4642      	mov	r2, r8
    eb0c:	4641      	mov	r1, r8
    eb0e:	6815      	ldr	r5, [r2, #0]
    eb10:	2200      	movs	r2, #0
    eb12:	b29b      	uxth	r3, r3
    eb14:	600a      	str	r2, [r1, #0]
    eb16:	04da      	lsls	r2, r3, #19
    eb18:	d400      	bmi.n	eb1c <__sflush_r+0x3c>
    eb1a:	e069      	b.n	ebf0 <__sflush_r+0x110>
    eb1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    eb1e:	075b      	lsls	r3, r3, #29
    eb20:	d506      	bpl.n	eb30 <__sflush_r+0x50>
    eb22:	6863      	ldr	r3, [r4, #4]
    eb24:	1ad2      	subs	r2, r2, r3
    eb26:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d001      	beq.n	eb30 <__sflush_r+0x50>
    eb2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    eb2e:	1ad2      	subs	r2, r2, r3
    eb30:	2300      	movs	r3, #0
    eb32:	69e1      	ldr	r1, [r4, #28]
    eb34:	4640      	mov	r0, r8
    eb36:	47b0      	blx	r6
    eb38:	1c43      	adds	r3, r0, #1
    eb3a:	d03d      	beq.n	ebb8 <__sflush_r+0xd8>
    eb3c:	89a3      	ldrh	r3, [r4, #12]
    eb3e:	4a3a      	ldr	r2, [pc, #232]	; (ec28 <__sflush_r+0x148>)
    eb40:	4013      	ands	r3, r2
    eb42:	2200      	movs	r2, #0
    eb44:	6062      	str	r2, [r4, #4]
    eb46:	6922      	ldr	r2, [r4, #16]
    eb48:	b21b      	sxth	r3, r3
    eb4a:	81a3      	strh	r3, [r4, #12]
    eb4c:	6022      	str	r2, [r4, #0]
    eb4e:	04db      	lsls	r3, r3, #19
    eb50:	d447      	bmi.n	ebe2 <__sflush_r+0x102>
    eb52:	4643      	mov	r3, r8
    eb54:	6b21      	ldr	r1, [r4, #48]	; 0x30
    eb56:	601d      	str	r5, [r3, #0]
    eb58:	2900      	cmp	r1, #0
    eb5a:	d008      	beq.n	eb6e <__sflush_r+0x8e>
    eb5c:	0023      	movs	r3, r4
    eb5e:	3340      	adds	r3, #64	; 0x40
    eb60:	4299      	cmp	r1, r3
    eb62:	d002      	beq.n	eb6a <__sflush_r+0x8a>
    eb64:	4640      	mov	r0, r8
    eb66:	f000 f967 	bl	ee38 <_free_r>
    eb6a:	2300      	movs	r3, #0
    eb6c:	6323      	str	r3, [r4, #48]	; 0x30
    eb6e:	2000      	movs	r0, #0
    eb70:	bc04      	pop	{r2}
    eb72:	4690      	mov	r8, r2
    eb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb76:	6926      	ldr	r6, [r4, #16]
    eb78:	2e00      	cmp	r6, #0
    eb7a:	d0f8      	beq.n	eb6e <__sflush_r+0x8e>
    eb7c:	6822      	ldr	r2, [r4, #0]
    eb7e:	6026      	str	r6, [r4, #0]
    eb80:	1b95      	subs	r5, r2, r6
    eb82:	2200      	movs	r2, #0
    eb84:	079b      	lsls	r3, r3, #30
    eb86:	d100      	bne.n	eb8a <__sflush_r+0xaa>
    eb88:	6962      	ldr	r2, [r4, #20]
    eb8a:	60a2      	str	r2, [r4, #8]
    eb8c:	2d00      	cmp	r5, #0
    eb8e:	dc04      	bgt.n	eb9a <__sflush_r+0xba>
    eb90:	e7ed      	b.n	eb6e <__sflush_r+0x8e>
    eb92:	1836      	adds	r6, r6, r0
    eb94:	1a2d      	subs	r5, r5, r0
    eb96:	2d00      	cmp	r5, #0
    eb98:	dde9      	ble.n	eb6e <__sflush_r+0x8e>
    eb9a:	002b      	movs	r3, r5
    eb9c:	0032      	movs	r2, r6
    eb9e:	69e1      	ldr	r1, [r4, #28]
    eba0:	4640      	mov	r0, r8
    eba2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    eba4:	47b8      	blx	r7
    eba6:	2800      	cmp	r0, #0
    eba8:	dcf3      	bgt.n	eb92 <__sflush_r+0xb2>
    ebaa:	2240      	movs	r2, #64	; 0x40
    ebac:	2001      	movs	r0, #1
    ebae:	89a3      	ldrh	r3, [r4, #12]
    ebb0:	4240      	negs	r0, r0
    ebb2:	4313      	orrs	r3, r2
    ebb4:	81a3      	strh	r3, [r4, #12]
    ebb6:	e7db      	b.n	eb70 <__sflush_r+0x90>
    ebb8:	4643      	mov	r3, r8
    ebba:	6819      	ldr	r1, [r3, #0]
    ebbc:	291d      	cmp	r1, #29
    ebbe:	d8f4      	bhi.n	ebaa <__sflush_r+0xca>
    ebc0:	4b1a      	ldr	r3, [pc, #104]	; (ec2c <__sflush_r+0x14c>)
    ebc2:	2201      	movs	r2, #1
    ebc4:	40cb      	lsrs	r3, r1
    ebc6:	439a      	bics	r2, r3
    ebc8:	d1ef      	bne.n	ebaa <__sflush_r+0xca>
    ebca:	89a3      	ldrh	r3, [r4, #12]
    ebcc:	4e16      	ldr	r6, [pc, #88]	; (ec28 <__sflush_r+0x148>)
    ebce:	6062      	str	r2, [r4, #4]
    ebd0:	4033      	ands	r3, r6
    ebd2:	6922      	ldr	r2, [r4, #16]
    ebd4:	b21b      	sxth	r3, r3
    ebd6:	81a3      	strh	r3, [r4, #12]
    ebd8:	6022      	str	r2, [r4, #0]
    ebda:	04db      	lsls	r3, r3, #19
    ebdc:	d5b9      	bpl.n	eb52 <__sflush_r+0x72>
    ebde:	2900      	cmp	r1, #0
    ebe0:	d1b7      	bne.n	eb52 <__sflush_r+0x72>
    ebe2:	6520      	str	r0, [r4, #80]	; 0x50
    ebe4:	e7b5      	b.n	eb52 <__sflush_r+0x72>
    ebe6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    ebe8:	2a00      	cmp	r2, #0
    ebea:	dd00      	ble.n	ebee <__sflush_r+0x10e>
    ebec:	e78a      	b.n	eb04 <__sflush_r+0x24>
    ebee:	e7be      	b.n	eb6e <__sflush_r+0x8e>
    ebf0:	2200      	movs	r2, #0
    ebf2:	2301      	movs	r3, #1
    ebf4:	69e1      	ldr	r1, [r4, #28]
    ebf6:	4640      	mov	r0, r8
    ebf8:	47b0      	blx	r6
    ebfa:	0002      	movs	r2, r0
    ebfc:	1c43      	adds	r3, r0, #1
    ebfe:	d002      	beq.n	ec06 <__sflush_r+0x126>
    ec00:	89a3      	ldrh	r3, [r4, #12]
    ec02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ec04:	e78b      	b.n	eb1e <__sflush_r+0x3e>
    ec06:	4643      	mov	r3, r8
    ec08:	681b      	ldr	r3, [r3, #0]
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d0f8      	beq.n	ec00 <__sflush_r+0x120>
    ec0e:	2b1d      	cmp	r3, #29
    ec10:	d001      	beq.n	ec16 <__sflush_r+0x136>
    ec12:	2b16      	cmp	r3, #22
    ec14:	d103      	bne.n	ec1e <__sflush_r+0x13e>
    ec16:	4643      	mov	r3, r8
    ec18:	2000      	movs	r0, #0
    ec1a:	601d      	str	r5, [r3, #0]
    ec1c:	e7a8      	b.n	eb70 <__sflush_r+0x90>
    ec1e:	2140      	movs	r1, #64	; 0x40
    ec20:	89a3      	ldrh	r3, [r4, #12]
    ec22:	430b      	orrs	r3, r1
    ec24:	81a3      	strh	r3, [r4, #12]
    ec26:	e7a3      	b.n	eb70 <__sflush_r+0x90>
    ec28:	fffff7ff 	.word	0xfffff7ff
    ec2c:	20400001 	.word	0x20400001

0000ec30 <_fflush_r>:
    ec30:	b570      	push	{r4, r5, r6, lr}
    ec32:	0005      	movs	r5, r0
    ec34:	000c      	movs	r4, r1
    ec36:	2800      	cmp	r0, #0
    ec38:	d002      	beq.n	ec40 <_fflush_r+0x10>
    ec3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	d016      	beq.n	ec6e <_fflush_r+0x3e>
    ec40:	220c      	movs	r2, #12
    ec42:	5ea3      	ldrsh	r3, [r4, r2]
    ec44:	2600      	movs	r6, #0
    ec46:	2b00      	cmp	r3, #0
    ec48:	d00f      	beq.n	ec6a <_fflush_r+0x3a>
    ec4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ec4c:	07d2      	lsls	r2, r2, #31
    ec4e:	d401      	bmi.n	ec54 <_fflush_r+0x24>
    ec50:	059b      	lsls	r3, r3, #22
    ec52:	d513      	bpl.n	ec7c <_fflush_r+0x4c>
    ec54:	0021      	movs	r1, r4
    ec56:	0028      	movs	r0, r5
    ec58:	f7ff ff42 	bl	eae0 <__sflush_r>
    ec5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ec5e:	0006      	movs	r6, r0
    ec60:	07db      	lsls	r3, r3, #31
    ec62:	d402      	bmi.n	ec6a <_fflush_r+0x3a>
    ec64:	89a3      	ldrh	r3, [r4, #12]
    ec66:	059b      	lsls	r3, r3, #22
    ec68:	d504      	bpl.n	ec74 <_fflush_r+0x44>
    ec6a:	0030      	movs	r0, r6
    ec6c:	bd70      	pop	{r4, r5, r6, pc}
    ec6e:	f000 f839 	bl	ece4 <__sinit>
    ec72:	e7e5      	b.n	ec40 <_fflush_r+0x10>
    ec74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ec76:	f000 fb79 	bl	f36c <__retarget_lock_release_recursive>
    ec7a:	e7f6      	b.n	ec6a <_fflush_r+0x3a>
    ec7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ec7e:	f000 fb73 	bl	f368 <__retarget_lock_acquire_recursive>
    ec82:	e7e7      	b.n	ec54 <_fflush_r+0x24>

0000ec84 <_cleanup_r>:
    ec84:	b510      	push	{r4, lr}
    ec86:	4902      	ldr	r1, [pc, #8]	; (ec90 <_cleanup_r+0xc>)
    ec88:	f000 fb36 	bl	f2f8 <_fwalk_reent>
    ec8c:	bd10      	pop	{r4, pc}
    ec8e:	46c0      	nop			; (mov r8, r8)
    ec90:	00010711 	.word	0x00010711

0000ec94 <std.isra.0>:
    ec94:	2300      	movs	r3, #0
    ec96:	b510      	push	{r4, lr}
    ec98:	0004      	movs	r4, r0
    ec9a:	6003      	str	r3, [r0, #0]
    ec9c:	6043      	str	r3, [r0, #4]
    ec9e:	6083      	str	r3, [r0, #8]
    eca0:	8181      	strh	r1, [r0, #12]
    eca2:	6643      	str	r3, [r0, #100]	; 0x64
    eca4:	81c2      	strh	r2, [r0, #14]
    eca6:	6103      	str	r3, [r0, #16]
    eca8:	6143      	str	r3, [r0, #20]
    ecaa:	6183      	str	r3, [r0, #24]
    ecac:	2208      	movs	r2, #8
    ecae:	2100      	movs	r1, #0
    ecb0:	305c      	adds	r0, #92	; 0x5c
    ecb2:	f7fd f971 	bl	bf98 <memset>
    ecb6:	0020      	movs	r0, r4
    ecb8:	4b06      	ldr	r3, [pc, #24]	; (ecd4 <std.isra.0+0x40>)
    ecba:	61e4      	str	r4, [r4, #28]
    ecbc:	6223      	str	r3, [r4, #32]
    ecbe:	4b06      	ldr	r3, [pc, #24]	; (ecd8 <std.isra.0+0x44>)
    ecc0:	3058      	adds	r0, #88	; 0x58
    ecc2:	6263      	str	r3, [r4, #36]	; 0x24
    ecc4:	4b05      	ldr	r3, [pc, #20]	; (ecdc <std.isra.0+0x48>)
    ecc6:	62a3      	str	r3, [r4, #40]	; 0x28
    ecc8:	4b05      	ldr	r3, [pc, #20]	; (ece0 <std.isra.0+0x4c>)
    ecca:	62e3      	str	r3, [r4, #44]	; 0x2c
    eccc:	f000 fb48 	bl	f360 <__retarget_lock_init_recursive>
    ecd0:	bd10      	pop	{r4, pc}
    ecd2:	46c0      	nop			; (mov r8, r8)
    ecd4:	00010539 	.word	0x00010539
    ecd8:	00010561 	.word	0x00010561
    ecdc:	0001059d 	.word	0x0001059d
    ece0:	000105c9 	.word	0x000105c9

0000ece4 <__sinit>:
    ece4:	b570      	push	{r4, r5, r6, lr}
    ece6:	0004      	movs	r4, r0
    ece8:	4d14      	ldr	r5, [pc, #80]	; (ed3c <__sinit+0x58>)
    ecea:	0028      	movs	r0, r5
    ecec:	f000 fb3c 	bl	f368 <__retarget_lock_acquire_recursive>
    ecf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d11d      	bne.n	ed32 <__sinit+0x4e>
    ecf6:	4a12      	ldr	r2, [pc, #72]	; (ed40 <__sinit+0x5c>)
    ecf8:	2104      	movs	r1, #4
    ecfa:	63e2      	str	r2, [r4, #60]	; 0x3c
    ecfc:	22b8      	movs	r2, #184	; 0xb8
    ecfe:	0092      	lsls	r2, r2, #2
    ed00:	50a3      	str	r3, [r4, r2]
    ed02:	23b9      	movs	r3, #185	; 0xb9
    ed04:	2203      	movs	r2, #3
    ed06:	009b      	lsls	r3, r3, #2
    ed08:	50e2      	str	r2, [r4, r3]
    ed0a:	3308      	adds	r3, #8
    ed0c:	18e2      	adds	r2, r4, r3
    ed0e:	3b04      	subs	r3, #4
    ed10:	50e2      	str	r2, [r4, r3]
    ed12:	6860      	ldr	r0, [r4, #4]
    ed14:	2200      	movs	r2, #0
    ed16:	f7ff ffbd 	bl	ec94 <std.isra.0>
    ed1a:	2201      	movs	r2, #1
    ed1c:	2109      	movs	r1, #9
    ed1e:	68a0      	ldr	r0, [r4, #8]
    ed20:	f7ff ffb8 	bl	ec94 <std.isra.0>
    ed24:	2202      	movs	r2, #2
    ed26:	2112      	movs	r1, #18
    ed28:	68e0      	ldr	r0, [r4, #12]
    ed2a:	f7ff ffb3 	bl	ec94 <std.isra.0>
    ed2e:	2301      	movs	r3, #1
    ed30:	63a3      	str	r3, [r4, #56]	; 0x38
    ed32:	0028      	movs	r0, r5
    ed34:	f000 fb1a 	bl	f36c <__retarget_lock_release_recursive>
    ed38:	bd70      	pop	{r4, r5, r6, pc}
    ed3a:	46c0      	nop			; (mov r8, r8)
    ed3c:	20001574 	.word	0x20001574
    ed40:	0000ec85 	.word	0x0000ec85

0000ed44 <__sfp_lock_acquire>:
    ed44:	b510      	push	{r4, lr}
    ed46:	4802      	ldr	r0, [pc, #8]	; (ed50 <__sfp_lock_acquire+0xc>)
    ed48:	f000 fb0e 	bl	f368 <__retarget_lock_acquire_recursive>
    ed4c:	bd10      	pop	{r4, pc}
    ed4e:	46c0      	nop			; (mov r8, r8)
    ed50:	20001588 	.word	0x20001588

0000ed54 <__sfp_lock_release>:
    ed54:	b510      	push	{r4, lr}
    ed56:	4802      	ldr	r0, [pc, #8]	; (ed60 <__sfp_lock_release+0xc>)
    ed58:	f000 fb08 	bl	f36c <__retarget_lock_release_recursive>
    ed5c:	bd10      	pop	{r4, pc}
    ed5e:	46c0      	nop			; (mov r8, r8)
    ed60:	20001588 	.word	0x20001588

0000ed64 <__libc_fini_array>:
    ed64:	b570      	push	{r4, r5, r6, lr}
    ed66:	4b09      	ldr	r3, [pc, #36]	; (ed8c <__libc_fini_array+0x28>)
    ed68:	4c09      	ldr	r4, [pc, #36]	; (ed90 <__libc_fini_array+0x2c>)
    ed6a:	1ae4      	subs	r4, r4, r3
    ed6c:	10a4      	asrs	r4, r4, #2
    ed6e:	d009      	beq.n	ed84 <__libc_fini_array+0x20>
    ed70:	4a08      	ldr	r2, [pc, #32]	; (ed94 <__libc_fini_array+0x30>)
    ed72:	18a5      	adds	r5, r4, r2
    ed74:	00ad      	lsls	r5, r5, #2
    ed76:	18ed      	adds	r5, r5, r3
    ed78:	682b      	ldr	r3, [r5, #0]
    ed7a:	3c01      	subs	r4, #1
    ed7c:	4798      	blx	r3
    ed7e:	3d04      	subs	r5, #4
    ed80:	2c00      	cmp	r4, #0
    ed82:	d1f9      	bne.n	ed78 <__libc_fini_array+0x14>
    ed84:	f002 fcba 	bl	116fc <_fini>
    ed88:	bd70      	pop	{r4, r5, r6, pc}
    ed8a:	46c0      	nop			; (mov r8, r8)
    ed8c:	00011708 	.word	0x00011708
    ed90:	0001170c 	.word	0x0001170c
    ed94:	3fffffff 	.word	0x3fffffff

0000ed98 <_malloc_trim_r>:
    ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed9a:	000c      	movs	r4, r1
    ed9c:	0006      	movs	r6, r0
    ed9e:	f000 fea3 	bl	fae8 <__malloc_lock>
    eda2:	4f20      	ldr	r7, [pc, #128]	; (ee24 <_malloc_trim_r+0x8c>)
    eda4:	68bb      	ldr	r3, [r7, #8]
    eda6:	685d      	ldr	r5, [r3, #4]
    eda8:	2303      	movs	r3, #3
    edaa:	439d      	bics	r5, r3
    edac:	4b1e      	ldr	r3, [pc, #120]	; (ee28 <_malloc_trim_r+0x90>)
    edae:	1b2c      	subs	r4, r5, r4
    edb0:	469c      	mov	ip, r3
    edb2:	4464      	add	r4, ip
    edb4:	0b24      	lsrs	r4, r4, #12
    edb6:	4b1d      	ldr	r3, [pc, #116]	; (ee2c <_malloc_trim_r+0x94>)
    edb8:	3c01      	subs	r4, #1
    edba:	0324      	lsls	r4, r4, #12
    edbc:	429c      	cmp	r4, r3
    edbe:	dd07      	ble.n	edd0 <_malloc_trim_r+0x38>
    edc0:	2100      	movs	r1, #0
    edc2:	0030      	movs	r0, r6
    edc4:	f001 fba6 	bl	10514 <_sbrk_r>
    edc8:	68bb      	ldr	r3, [r7, #8]
    edca:	195b      	adds	r3, r3, r5
    edcc:	4298      	cmp	r0, r3
    edce:	d004      	beq.n	edda <_malloc_trim_r+0x42>
    edd0:	0030      	movs	r0, r6
    edd2:	f000 fe91 	bl	faf8 <__malloc_unlock>
    edd6:	2000      	movs	r0, #0
    edd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edda:	4261      	negs	r1, r4
    eddc:	0030      	movs	r0, r6
    edde:	f001 fb99 	bl	10514 <_sbrk_r>
    ede2:	1c43      	adds	r3, r0, #1
    ede4:	d00d      	beq.n	ee02 <_malloc_trim_r+0x6a>
    ede6:	2201      	movs	r2, #1
    ede8:	68bb      	ldr	r3, [r7, #8]
    edea:	1b2d      	subs	r5, r5, r4
    edec:	4315      	orrs	r5, r2
    edee:	605d      	str	r5, [r3, #4]
    edf0:	4b0f      	ldr	r3, [pc, #60]	; (ee30 <_malloc_trim_r+0x98>)
    edf2:	0030      	movs	r0, r6
    edf4:	681a      	ldr	r2, [r3, #0]
    edf6:	1b14      	subs	r4, r2, r4
    edf8:	601c      	str	r4, [r3, #0]
    edfa:	f000 fe7d 	bl	faf8 <__malloc_unlock>
    edfe:	2001      	movs	r0, #1
    ee00:	e7ea      	b.n	edd8 <_malloc_trim_r+0x40>
    ee02:	2100      	movs	r1, #0
    ee04:	0030      	movs	r0, r6
    ee06:	f001 fb85 	bl	10514 <_sbrk_r>
    ee0a:	68ba      	ldr	r2, [r7, #8]
    ee0c:	1a83      	subs	r3, r0, r2
    ee0e:	2b0f      	cmp	r3, #15
    ee10:	ddde      	ble.n	edd0 <_malloc_trim_r+0x38>
    ee12:	4908      	ldr	r1, [pc, #32]	; (ee34 <_malloc_trim_r+0x9c>)
    ee14:	6809      	ldr	r1, [r1, #0]
    ee16:	1a40      	subs	r0, r0, r1
    ee18:	4905      	ldr	r1, [pc, #20]	; (ee30 <_malloc_trim_r+0x98>)
    ee1a:	6008      	str	r0, [r1, #0]
    ee1c:	2101      	movs	r1, #1
    ee1e:	430b      	orrs	r3, r1
    ee20:	6053      	str	r3, [r2, #4]
    ee22:	e7d5      	b.n	edd0 <_malloc_trim_r+0x38>
    ee24:	200004a4 	.word	0x200004a4
    ee28:	00000fef 	.word	0x00000fef
    ee2c:	00000fff 	.word	0x00000fff
    ee30:	20001458 	.word	0x20001458
    ee34:	200008ac 	.word	0x200008ac

0000ee38 <_free_r>:
    ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee3a:	0004      	movs	r4, r0
    ee3c:	1e0d      	subs	r5, r1, #0
    ee3e:	d03c      	beq.n	eeba <_free_r+0x82>
    ee40:	f000 fe52 	bl	fae8 <__malloc_lock>
    ee44:	0029      	movs	r1, r5
    ee46:	3908      	subs	r1, #8
    ee48:	6848      	ldr	r0, [r1, #4]
    ee4a:	2301      	movs	r3, #1
    ee4c:	0005      	movs	r5, r0
    ee4e:	2603      	movs	r6, #3
    ee50:	439d      	bics	r5, r3
    ee52:	194a      	adds	r2, r1, r5
    ee54:	469c      	mov	ip, r3
    ee56:	4f61      	ldr	r7, [pc, #388]	; (efdc <_free_r+0x1a4>)
    ee58:	6853      	ldr	r3, [r2, #4]
    ee5a:	43b3      	bics	r3, r6
    ee5c:	68be      	ldr	r6, [r7, #8]
    ee5e:	42b2      	cmp	r2, r6
    ee60:	d056      	beq.n	ef10 <_free_r+0xd8>
    ee62:	4666      	mov	r6, ip
    ee64:	6053      	str	r3, [r2, #4]
    ee66:	4206      	tst	r6, r0
    ee68:	d10a      	bne.n	ee80 <_free_r+0x48>
    ee6a:	003e      	movs	r6, r7
    ee6c:	6808      	ldr	r0, [r1, #0]
    ee6e:	3608      	adds	r6, #8
    ee70:	1a09      	subs	r1, r1, r0
    ee72:	182d      	adds	r5, r5, r0
    ee74:	6888      	ldr	r0, [r1, #8]
    ee76:	42b0      	cmp	r0, r6
    ee78:	d065      	beq.n	ef46 <_free_r+0x10e>
    ee7a:	68ce      	ldr	r6, [r1, #12]
    ee7c:	60c6      	str	r6, [r0, #12]
    ee7e:	60b0      	str	r0, [r6, #8]
    ee80:	2001      	movs	r0, #1
    ee82:	18d6      	adds	r6, r2, r3
    ee84:	6876      	ldr	r6, [r6, #4]
    ee86:	4206      	tst	r6, r0
    ee88:	d033      	beq.n	eef2 <_free_r+0xba>
    ee8a:	4b55      	ldr	r3, [pc, #340]	; (efe0 <_free_r+0x1a8>)
    ee8c:	4328      	orrs	r0, r5
    ee8e:	6048      	str	r0, [r1, #4]
    ee90:	514d      	str	r5, [r1, r5]
    ee92:	429d      	cmp	r5, r3
    ee94:	d812      	bhi.n	eebc <_free_r+0x84>
    ee96:	08ed      	lsrs	r5, r5, #3
    ee98:	3bff      	subs	r3, #255	; 0xff
    ee9a:	10aa      	asrs	r2, r5, #2
    ee9c:	3bff      	subs	r3, #255	; 0xff
    ee9e:	4093      	lsls	r3, r2
    eea0:	687a      	ldr	r2, [r7, #4]
    eea2:	00ed      	lsls	r5, r5, #3
    eea4:	4313      	orrs	r3, r2
    eea6:	607b      	str	r3, [r7, #4]
    eea8:	19ef      	adds	r7, r5, r7
    eeaa:	68bb      	ldr	r3, [r7, #8]
    eeac:	60cf      	str	r7, [r1, #12]
    eeae:	608b      	str	r3, [r1, #8]
    eeb0:	60b9      	str	r1, [r7, #8]
    eeb2:	60d9      	str	r1, [r3, #12]
    eeb4:	0020      	movs	r0, r4
    eeb6:	f000 fe1f 	bl	faf8 <__malloc_unlock>
    eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eebc:	0a68      	lsrs	r0, r5, #9
    eebe:	2804      	cmp	r0, #4
    eec0:	d850      	bhi.n	ef64 <_free_r+0x12c>
    eec2:	09a8      	lsrs	r0, r5, #6
    eec4:	0002      	movs	r2, r0
    eec6:	3039      	adds	r0, #57	; 0x39
    eec8:	3238      	adds	r2, #56	; 0x38
    eeca:	00c0      	lsls	r0, r0, #3
    eecc:	1838      	adds	r0, r7, r0
    eece:	3808      	subs	r0, #8
    eed0:	6883      	ldr	r3, [r0, #8]
    eed2:	2603      	movs	r6, #3
    eed4:	4298      	cmp	r0, r3
    eed6:	d04c      	beq.n	ef72 <_free_r+0x13a>
    eed8:	685a      	ldr	r2, [r3, #4]
    eeda:	43b2      	bics	r2, r6
    eedc:	4295      	cmp	r5, r2
    eede:	d230      	bcs.n	ef42 <_free_r+0x10a>
    eee0:	689b      	ldr	r3, [r3, #8]
    eee2:	4298      	cmp	r0, r3
    eee4:	d1f8      	bne.n	eed8 <_free_r+0xa0>
    eee6:	68c3      	ldr	r3, [r0, #12]
    eee8:	60cb      	str	r3, [r1, #12]
    eeea:	6088      	str	r0, [r1, #8]
    eeec:	6099      	str	r1, [r3, #8]
    eeee:	60c1      	str	r1, [r0, #12]
    eef0:	e7e0      	b.n	eeb4 <_free_r+0x7c>
    eef2:	18ed      	adds	r5, r5, r3
    eef4:	4e3b      	ldr	r6, [pc, #236]	; (efe4 <_free_r+0x1ac>)
    eef6:	6893      	ldr	r3, [r2, #8]
    eef8:	42b3      	cmp	r3, r6
    eefa:	d042      	beq.n	ef82 <_free_r+0x14a>
    eefc:	68d2      	ldr	r2, [r2, #12]
    eefe:	4328      	orrs	r0, r5
    ef00:	60da      	str	r2, [r3, #12]
    ef02:	6093      	str	r3, [r2, #8]
    ef04:	4b36      	ldr	r3, [pc, #216]	; (efe0 <_free_r+0x1a8>)
    ef06:	6048      	str	r0, [r1, #4]
    ef08:	514d      	str	r5, [r1, r5]
    ef0a:	429d      	cmp	r5, r3
    ef0c:	d8d6      	bhi.n	eebc <_free_r+0x84>
    ef0e:	e7c2      	b.n	ee96 <_free_r+0x5e>
    ef10:	4662      	mov	r2, ip
    ef12:	18eb      	adds	r3, r5, r3
    ef14:	4202      	tst	r2, r0
    ef16:	d106      	bne.n	ef26 <_free_r+0xee>
    ef18:	680a      	ldr	r2, [r1, #0]
    ef1a:	1a89      	subs	r1, r1, r2
    ef1c:	6888      	ldr	r0, [r1, #8]
    ef1e:	189b      	adds	r3, r3, r2
    ef20:	68ca      	ldr	r2, [r1, #12]
    ef22:	60c2      	str	r2, [r0, #12]
    ef24:	6090      	str	r0, [r2, #8]
    ef26:	2201      	movs	r2, #1
    ef28:	431a      	orrs	r2, r3
    ef2a:	604a      	str	r2, [r1, #4]
    ef2c:	4a2e      	ldr	r2, [pc, #184]	; (efe8 <_free_r+0x1b0>)
    ef2e:	60b9      	str	r1, [r7, #8]
    ef30:	6812      	ldr	r2, [r2, #0]
    ef32:	4293      	cmp	r3, r2
    ef34:	d3be      	bcc.n	eeb4 <_free_r+0x7c>
    ef36:	4b2d      	ldr	r3, [pc, #180]	; (efec <_free_r+0x1b4>)
    ef38:	0020      	movs	r0, r4
    ef3a:	6819      	ldr	r1, [r3, #0]
    ef3c:	f7ff ff2c 	bl	ed98 <_malloc_trim_r>
    ef40:	e7b8      	b.n	eeb4 <_free_r+0x7c>
    ef42:	0018      	movs	r0, r3
    ef44:	e7cf      	b.n	eee6 <_free_r+0xae>
    ef46:	4666      	mov	r6, ip
    ef48:	18d0      	adds	r0, r2, r3
    ef4a:	6840      	ldr	r0, [r0, #4]
    ef4c:	4230      	tst	r0, r6
    ef4e:	d13f      	bne.n	efd0 <_free_r+0x198>
    ef50:	6890      	ldr	r0, [r2, #8]
    ef52:	195d      	adds	r5, r3, r5
    ef54:	68d3      	ldr	r3, [r2, #12]
    ef56:	60c3      	str	r3, [r0, #12]
    ef58:	6098      	str	r0, [r3, #8]
    ef5a:	4663      	mov	r3, ip
    ef5c:	432b      	orrs	r3, r5
    ef5e:	604b      	str	r3, [r1, #4]
    ef60:	514d      	str	r5, [r1, r5]
    ef62:	e7a7      	b.n	eeb4 <_free_r+0x7c>
    ef64:	2814      	cmp	r0, #20
    ef66:	d814      	bhi.n	ef92 <_free_r+0x15a>
    ef68:	0002      	movs	r2, r0
    ef6a:	305c      	adds	r0, #92	; 0x5c
    ef6c:	325b      	adds	r2, #91	; 0x5b
    ef6e:	00c0      	lsls	r0, r0, #3
    ef70:	e7ac      	b.n	eecc <_free_r+0x94>
    ef72:	2301      	movs	r3, #1
    ef74:	1092      	asrs	r2, r2, #2
    ef76:	4093      	lsls	r3, r2
    ef78:	687a      	ldr	r2, [r7, #4]
    ef7a:	4313      	orrs	r3, r2
    ef7c:	607b      	str	r3, [r7, #4]
    ef7e:	0003      	movs	r3, r0
    ef80:	e7b2      	b.n	eee8 <_free_r+0xb0>
    ef82:	4328      	orrs	r0, r5
    ef84:	60d9      	str	r1, [r3, #12]
    ef86:	6099      	str	r1, [r3, #8]
    ef88:	60cb      	str	r3, [r1, #12]
    ef8a:	608b      	str	r3, [r1, #8]
    ef8c:	6048      	str	r0, [r1, #4]
    ef8e:	514d      	str	r5, [r1, r5]
    ef90:	e790      	b.n	eeb4 <_free_r+0x7c>
    ef92:	2854      	cmp	r0, #84	; 0x54
    ef94:	d805      	bhi.n	efa2 <_free_r+0x16a>
    ef96:	0b28      	lsrs	r0, r5, #12
    ef98:	0002      	movs	r2, r0
    ef9a:	306f      	adds	r0, #111	; 0x6f
    ef9c:	326e      	adds	r2, #110	; 0x6e
    ef9e:	00c0      	lsls	r0, r0, #3
    efa0:	e794      	b.n	eecc <_free_r+0x94>
    efa2:	22aa      	movs	r2, #170	; 0xaa
    efa4:	0052      	lsls	r2, r2, #1
    efa6:	4290      	cmp	r0, r2
    efa8:	d805      	bhi.n	efb6 <_free_r+0x17e>
    efaa:	0be8      	lsrs	r0, r5, #15
    efac:	0002      	movs	r2, r0
    efae:	3078      	adds	r0, #120	; 0x78
    efb0:	3277      	adds	r2, #119	; 0x77
    efb2:	00c0      	lsls	r0, r0, #3
    efb4:	e78a      	b.n	eecc <_free_r+0x94>
    efb6:	4a0e      	ldr	r2, [pc, #56]	; (eff0 <_free_r+0x1b8>)
    efb8:	4290      	cmp	r0, r2
    efba:	d805      	bhi.n	efc8 <_free_r+0x190>
    efbc:	0ca8      	lsrs	r0, r5, #18
    efbe:	0002      	movs	r2, r0
    efc0:	307d      	adds	r0, #125	; 0x7d
    efc2:	327c      	adds	r2, #124	; 0x7c
    efc4:	00c0      	lsls	r0, r0, #3
    efc6:	e781      	b.n	eecc <_free_r+0x94>
    efc8:	20fe      	movs	r0, #254	; 0xfe
    efca:	227e      	movs	r2, #126	; 0x7e
    efcc:	0080      	lsls	r0, r0, #2
    efce:	e77d      	b.n	eecc <_free_r+0x94>
    efd0:	4663      	mov	r3, ip
    efd2:	432b      	orrs	r3, r5
    efd4:	604b      	str	r3, [r1, #4]
    efd6:	6015      	str	r5, [r2, #0]
    efd8:	e76c      	b.n	eeb4 <_free_r+0x7c>
    efda:	46c0      	nop			; (mov r8, r8)
    efdc:	200004a4 	.word	0x200004a4
    efe0:	000001ff 	.word	0x000001ff
    efe4:	200004ac 	.word	0x200004ac
    efe8:	200008b0 	.word	0x200008b0
    efec:	20001488 	.word	0x20001488
    eff0:	00000554 	.word	0x00000554

0000eff4 <__sfvwrite_r>:
    eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eff6:	464e      	mov	r6, r9
    eff8:	46de      	mov	lr, fp
    effa:	4657      	mov	r7, sl
    effc:	4645      	mov	r5, r8
    effe:	b5e0      	push	{r5, r6, r7, lr}
    f000:	6893      	ldr	r3, [r2, #8]
    f002:	b083      	sub	sp, #12
    f004:	9000      	str	r0, [sp, #0]
    f006:	000c      	movs	r4, r1
    f008:	0016      	movs	r6, r2
    f00a:	2b00      	cmp	r3, #0
    f00c:	d025      	beq.n	f05a <__sfvwrite_r+0x66>
    f00e:	898b      	ldrh	r3, [r1, #12]
    f010:	071a      	lsls	r2, r3, #28
    f012:	d52a      	bpl.n	f06a <__sfvwrite_r+0x76>
    f014:	690a      	ldr	r2, [r1, #16]
    f016:	2a00      	cmp	r2, #0
    f018:	d027      	beq.n	f06a <__sfvwrite_r+0x76>
    f01a:	6832      	ldr	r2, [r6, #0]
    f01c:	4693      	mov	fp, r2
    f01e:	079a      	lsls	r2, r3, #30
    f020:	d52f      	bpl.n	f082 <__sfvwrite_r+0x8e>
    f022:	4bb2      	ldr	r3, [pc, #712]	; (f2ec <__sfvwrite_r+0x2f8>)
    f024:	2700      	movs	r7, #0
    f026:	2500      	movs	r5, #0
    f028:	4698      	mov	r8, r3
    f02a:	46b1      	mov	r9, r6
    f02c:	2d00      	cmp	r5, #0
    f02e:	d100      	bne.n	f032 <__sfvwrite_r+0x3e>
    f030:	e072      	b.n	f118 <__sfvwrite_r+0x124>
    f032:	002b      	movs	r3, r5
    f034:	4545      	cmp	r5, r8
    f036:	d900      	bls.n	f03a <__sfvwrite_r+0x46>
    f038:	4bac      	ldr	r3, [pc, #688]	; (f2ec <__sfvwrite_r+0x2f8>)
    f03a:	003a      	movs	r2, r7
    f03c:	69e1      	ldr	r1, [r4, #28]
    f03e:	9800      	ldr	r0, [sp, #0]
    f040:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f042:	47b0      	blx	r6
    f044:	2800      	cmp	r0, #0
    f046:	dc00      	bgt.n	f04a <__sfvwrite_r+0x56>
    f048:	e073      	b.n	f132 <__sfvwrite_r+0x13e>
    f04a:	464b      	mov	r3, r9
    f04c:	689b      	ldr	r3, [r3, #8]
    f04e:	183f      	adds	r7, r7, r0
    f050:	1a2d      	subs	r5, r5, r0
    f052:	1a18      	subs	r0, r3, r0
    f054:	464b      	mov	r3, r9
    f056:	6098      	str	r0, [r3, #8]
    f058:	d1e8      	bne.n	f02c <__sfvwrite_r+0x38>
    f05a:	2000      	movs	r0, #0
    f05c:	b003      	add	sp, #12
    f05e:	bc3c      	pop	{r2, r3, r4, r5}
    f060:	4690      	mov	r8, r2
    f062:	4699      	mov	r9, r3
    f064:	46a2      	mov	sl, r4
    f066:	46ab      	mov	fp, r5
    f068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f06a:	0021      	movs	r1, r4
    f06c:	9800      	ldr	r0, [sp, #0]
    f06e:	f7fe fbd1 	bl	d814 <__swsetup_r>
    f072:	2800      	cmp	r0, #0
    f074:	d000      	beq.n	f078 <__sfvwrite_r+0x84>
    f076:	e130      	b.n	f2da <__sfvwrite_r+0x2e6>
    f078:	6832      	ldr	r2, [r6, #0]
    f07a:	89a3      	ldrh	r3, [r4, #12]
    f07c:	4693      	mov	fp, r2
    f07e:	079a      	lsls	r2, r3, #30
    f080:	d4cf      	bmi.n	f022 <__sfvwrite_r+0x2e>
    f082:	07da      	lsls	r2, r3, #31
    f084:	d55d      	bpl.n	f142 <__sfvwrite_r+0x14e>
    f086:	2300      	movs	r3, #0
    f088:	2000      	movs	r0, #0
    f08a:	469a      	mov	sl, r3
    f08c:	2700      	movs	r7, #0
    f08e:	001d      	movs	r5, r3
    f090:	46b1      	mov	r9, r6
    f092:	e029      	b.n	f0e8 <__sfvwrite_r+0xf4>
    f094:	2800      	cmp	r0, #0
    f096:	d033      	beq.n	f100 <__sfvwrite_r+0x10c>
    f098:	46a8      	mov	r8, r5
    f09a:	42bd      	cmp	r5, r7
    f09c:	d900      	bls.n	f0a0 <__sfvwrite_r+0xac>
    f09e:	46b8      	mov	r8, r7
    f0a0:	6820      	ldr	r0, [r4, #0]
    f0a2:	6922      	ldr	r2, [r4, #16]
    f0a4:	4646      	mov	r6, r8
    f0a6:	6963      	ldr	r3, [r4, #20]
    f0a8:	4290      	cmp	r0, r2
    f0aa:	d907      	bls.n	f0bc <__sfvwrite_r+0xc8>
    f0ac:	68a2      	ldr	r2, [r4, #8]
    f0ae:	4694      	mov	ip, r2
    f0b0:	449c      	add	ip, r3
    f0b2:	4662      	mov	r2, ip
    f0b4:	9201      	str	r2, [sp, #4]
    f0b6:	45e0      	cmp	r8, ip
    f0b8:	dd00      	ble.n	f0bc <__sfvwrite_r+0xc8>
    f0ba:	e0e9      	b.n	f290 <__sfvwrite_r+0x29c>
    f0bc:	4598      	cmp	r8, r3
    f0be:	da00      	bge.n	f0c2 <__sfvwrite_r+0xce>
    f0c0:	e08f      	b.n	f1e2 <__sfvwrite_r+0x1ee>
    f0c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f0c4:	4652      	mov	r2, sl
    f0c6:	69e1      	ldr	r1, [r4, #28]
    f0c8:	9800      	ldr	r0, [sp, #0]
    f0ca:	47b0      	blx	r6
    f0cc:	1e06      	subs	r6, r0, #0
    f0ce:	dd30      	ble.n	f132 <__sfvwrite_r+0x13e>
    f0d0:	1bad      	subs	r5, r5, r6
    f0d2:	2001      	movs	r0, #1
    f0d4:	2d00      	cmp	r5, #0
    f0d6:	d026      	beq.n	f126 <__sfvwrite_r+0x132>
    f0d8:	464b      	mov	r3, r9
    f0da:	689b      	ldr	r3, [r3, #8]
    f0dc:	44b2      	add	sl, r6
    f0de:	1bbf      	subs	r7, r7, r6
    f0e0:	1b9e      	subs	r6, r3, r6
    f0e2:	464b      	mov	r3, r9
    f0e4:	609e      	str	r6, [r3, #8]
    f0e6:	d0b8      	beq.n	f05a <__sfvwrite_r+0x66>
    f0e8:	2f00      	cmp	r7, #0
    f0ea:	d1d3      	bne.n	f094 <__sfvwrite_r+0xa0>
    f0ec:	465b      	mov	r3, fp
    f0ee:	681b      	ldr	r3, [r3, #0]
    f0f0:	469a      	mov	sl, r3
    f0f2:	465b      	mov	r3, fp
    f0f4:	685f      	ldr	r7, [r3, #4]
    f0f6:	2308      	movs	r3, #8
    f0f8:	469c      	mov	ip, r3
    f0fa:	44e3      	add	fp, ip
    f0fc:	2f00      	cmp	r7, #0
    f0fe:	d0f5      	beq.n	f0ec <__sfvwrite_r+0xf8>
    f100:	003a      	movs	r2, r7
    f102:	210a      	movs	r1, #10
    f104:	4650      	mov	r0, sl
    f106:	f000 fc5f 	bl	f9c8 <memchr>
    f10a:	2800      	cmp	r0, #0
    f10c:	d100      	bne.n	f110 <__sfvwrite_r+0x11c>
    f10e:	e0e2      	b.n	f2d6 <__sfvwrite_r+0x2e2>
    f110:	4653      	mov	r3, sl
    f112:	3001      	adds	r0, #1
    f114:	1ac5      	subs	r5, r0, r3
    f116:	e7bf      	b.n	f098 <__sfvwrite_r+0xa4>
    f118:	465b      	mov	r3, fp
    f11a:	681f      	ldr	r7, [r3, #0]
    f11c:	685d      	ldr	r5, [r3, #4]
    f11e:	2308      	movs	r3, #8
    f120:	469c      	mov	ip, r3
    f122:	44e3      	add	fp, ip
    f124:	e782      	b.n	f02c <__sfvwrite_r+0x38>
    f126:	0021      	movs	r1, r4
    f128:	9800      	ldr	r0, [sp, #0]
    f12a:	f7ff fd81 	bl	ec30 <_fflush_r>
    f12e:	2800      	cmp	r0, #0
    f130:	d0d2      	beq.n	f0d8 <__sfvwrite_r+0xe4>
    f132:	220c      	movs	r2, #12
    f134:	5ea3      	ldrsh	r3, [r4, r2]
    f136:	2240      	movs	r2, #64	; 0x40
    f138:	2001      	movs	r0, #1
    f13a:	4313      	orrs	r3, r2
    f13c:	81a3      	strh	r3, [r4, #12]
    f13e:	4240      	negs	r0, r0
    f140:	e78c      	b.n	f05c <__sfvwrite_r+0x68>
    f142:	2200      	movs	r2, #0
    f144:	4691      	mov	r9, r2
    f146:	464d      	mov	r5, r9
    f148:	2d00      	cmp	r5, #0
    f14a:	d023      	beq.n	f194 <__sfvwrite_r+0x1a0>
    f14c:	68a2      	ldr	r2, [r4, #8]
    f14e:	4690      	mov	r8, r2
    f150:	2280      	movs	r2, #128	; 0x80
    f152:	0092      	lsls	r2, r2, #2
    f154:	4213      	tst	r3, r2
    f156:	d026      	beq.n	f1a6 <__sfvwrite_r+0x1b2>
    f158:	46c2      	mov	sl, r8
    f15a:	4545      	cmp	r5, r8
    f15c:	d34d      	bcc.n	f1fa <__sfvwrite_r+0x206>
    f15e:	2290      	movs	r2, #144	; 0x90
    f160:	00d2      	lsls	r2, r2, #3
    f162:	4213      	tst	r3, r2
    f164:	d14e      	bne.n	f204 <__sfvwrite_r+0x210>
    f166:	002f      	movs	r7, r5
    f168:	6820      	ldr	r0, [r4, #0]
    f16a:	4652      	mov	r2, sl
    f16c:	4649      	mov	r1, r9
    f16e:	f000 fc6b 	bl	fa48 <memmove>
    f172:	4642      	mov	r2, r8
    f174:	68a3      	ldr	r3, [r4, #8]
    f176:	1a98      	subs	r0, r3, r2
    f178:	6823      	ldr	r3, [r4, #0]
    f17a:	60a0      	str	r0, [r4, #8]
    f17c:	4453      	add	r3, sl
    f17e:	6023      	str	r3, [r4, #0]
    f180:	68b3      	ldr	r3, [r6, #8]
    f182:	44b9      	add	r9, r7
    f184:	1bed      	subs	r5, r5, r7
    f186:	1bdf      	subs	r7, r3, r7
    f188:	60b7      	str	r7, [r6, #8]
    f18a:	d100      	bne.n	f18e <__sfvwrite_r+0x19a>
    f18c:	e765      	b.n	f05a <__sfvwrite_r+0x66>
    f18e:	89a3      	ldrh	r3, [r4, #12]
    f190:	2d00      	cmp	r5, #0
    f192:	d1db      	bne.n	f14c <__sfvwrite_r+0x158>
    f194:	465a      	mov	r2, fp
    f196:	6812      	ldr	r2, [r2, #0]
    f198:	4691      	mov	r9, r2
    f19a:	465a      	mov	r2, fp
    f19c:	6855      	ldr	r5, [r2, #4]
    f19e:	2208      	movs	r2, #8
    f1a0:	4694      	mov	ip, r2
    f1a2:	44e3      	add	fp, ip
    f1a4:	e7d0      	b.n	f148 <__sfvwrite_r+0x154>
    f1a6:	6820      	ldr	r0, [r4, #0]
    f1a8:	6923      	ldr	r3, [r4, #16]
    f1aa:	4298      	cmp	r0, r3
    f1ac:	d802      	bhi.n	f1b4 <__sfvwrite_r+0x1c0>
    f1ae:	6967      	ldr	r7, [r4, #20]
    f1b0:	42bd      	cmp	r5, r7
    f1b2:	d259      	bcs.n	f268 <__sfvwrite_r+0x274>
    f1b4:	4647      	mov	r7, r8
    f1b6:	42af      	cmp	r7, r5
    f1b8:	d900      	bls.n	f1bc <__sfvwrite_r+0x1c8>
    f1ba:	002f      	movs	r7, r5
    f1bc:	003a      	movs	r2, r7
    f1be:	4649      	mov	r1, r9
    f1c0:	f000 fc42 	bl	fa48 <memmove>
    f1c4:	68a3      	ldr	r3, [r4, #8]
    f1c6:	6822      	ldr	r2, [r4, #0]
    f1c8:	1bdb      	subs	r3, r3, r7
    f1ca:	19d2      	adds	r2, r2, r7
    f1cc:	60a3      	str	r3, [r4, #8]
    f1ce:	6022      	str	r2, [r4, #0]
    f1d0:	2b00      	cmp	r3, #0
    f1d2:	d1d5      	bne.n	f180 <__sfvwrite_r+0x18c>
    f1d4:	0021      	movs	r1, r4
    f1d6:	9800      	ldr	r0, [sp, #0]
    f1d8:	f7ff fd2a 	bl	ec30 <_fflush_r>
    f1dc:	2800      	cmp	r0, #0
    f1de:	d0cf      	beq.n	f180 <__sfvwrite_r+0x18c>
    f1e0:	e7a7      	b.n	f132 <__sfvwrite_r+0x13e>
    f1e2:	4642      	mov	r2, r8
    f1e4:	4651      	mov	r1, sl
    f1e6:	f000 fc2f 	bl	fa48 <memmove>
    f1ea:	4642      	mov	r2, r8
    f1ec:	68a3      	ldr	r3, [r4, #8]
    f1ee:	1a9b      	subs	r3, r3, r2
    f1f0:	60a3      	str	r3, [r4, #8]
    f1f2:	6823      	ldr	r3, [r4, #0]
    f1f4:	4443      	add	r3, r8
    f1f6:	6023      	str	r3, [r4, #0]
    f1f8:	e76a      	b.n	f0d0 <__sfvwrite_r+0xdc>
    f1fa:	46a8      	mov	r8, r5
    f1fc:	6820      	ldr	r0, [r4, #0]
    f1fe:	002f      	movs	r7, r5
    f200:	46aa      	mov	sl, r5
    f202:	e7b2      	b.n	f16a <__sfvwrite_r+0x176>
    f204:	6921      	ldr	r1, [r4, #16]
    f206:	6822      	ldr	r2, [r4, #0]
    f208:	1a52      	subs	r2, r2, r1
    f20a:	4692      	mov	sl, r2
    f20c:	6962      	ldr	r2, [r4, #20]
    f20e:	0057      	lsls	r7, r2, #1
    f210:	18bf      	adds	r7, r7, r2
    f212:	0ffa      	lsrs	r2, r7, #31
    f214:	19d7      	adds	r7, r2, r7
    f216:	4652      	mov	r2, sl
    f218:	1c50      	adds	r0, r2, #1
    f21a:	107f      	asrs	r7, r7, #1
    f21c:	1940      	adds	r0, r0, r5
    f21e:	003a      	movs	r2, r7
    f220:	42b8      	cmp	r0, r7
    f222:	d901      	bls.n	f228 <__sfvwrite_r+0x234>
    f224:	0007      	movs	r7, r0
    f226:	0002      	movs	r2, r0
    f228:	055b      	lsls	r3, r3, #21
    f22a:	d542      	bpl.n	f2b2 <__sfvwrite_r+0x2be>
    f22c:	0011      	movs	r1, r2
    f22e:	9800      	ldr	r0, [sp, #0]
    f230:	f000 f916 	bl	f460 <_malloc_r>
    f234:	4680      	mov	r8, r0
    f236:	1e03      	subs	r3, r0, #0
    f238:	d052      	beq.n	f2e0 <__sfvwrite_r+0x2ec>
    f23a:	4652      	mov	r2, sl
    f23c:	6921      	ldr	r1, [r4, #16]
    f23e:	f7fc fe69 	bl	bf14 <memcpy>
    f242:	89a3      	ldrh	r3, [r4, #12]
    f244:	4a2a      	ldr	r2, [pc, #168]	; (f2f0 <__sfvwrite_r+0x2fc>)
    f246:	4013      	ands	r3, r2
    f248:	2280      	movs	r2, #128	; 0x80
    f24a:	4313      	orrs	r3, r2
    f24c:	81a3      	strh	r3, [r4, #12]
    f24e:	4643      	mov	r3, r8
    f250:	4640      	mov	r0, r8
    f252:	6123      	str	r3, [r4, #16]
    f254:	4653      	mov	r3, sl
    f256:	4450      	add	r0, sl
    f258:	6167      	str	r7, [r4, #20]
    f25a:	1aff      	subs	r7, r7, r3
    f25c:	60a7      	str	r7, [r4, #8]
    f25e:	6020      	str	r0, [r4, #0]
    f260:	46a8      	mov	r8, r5
    f262:	002f      	movs	r7, r5
    f264:	46aa      	mov	sl, r5
    f266:	e780      	b.n	f16a <__sfvwrite_r+0x176>
    f268:	4b22      	ldr	r3, [pc, #136]	; (f2f4 <__sfvwrite_r+0x300>)
    f26a:	0028      	movs	r0, r5
    f26c:	429d      	cmp	r5, r3
    f26e:	d900      	bls.n	f272 <__sfvwrite_r+0x27e>
    f270:	0018      	movs	r0, r3
    f272:	0039      	movs	r1, r7
    f274:	f7f9 fdd6 	bl	8e24 <__divsi3>
    f278:	003b      	movs	r3, r7
    f27a:	464a      	mov	r2, r9
    f27c:	4343      	muls	r3, r0
    f27e:	69e1      	ldr	r1, [r4, #28]
    f280:	9800      	ldr	r0, [sp, #0]
    f282:	6a67      	ldr	r7, [r4, #36]	; 0x24
    f284:	47b8      	blx	r7
    f286:	2800      	cmp	r0, #0
    f288:	dc00      	bgt.n	f28c <__sfvwrite_r+0x298>
    f28a:	e752      	b.n	f132 <__sfvwrite_r+0x13e>
    f28c:	0007      	movs	r7, r0
    f28e:	e777      	b.n	f180 <__sfvwrite_r+0x18c>
    f290:	4666      	mov	r6, ip
    f292:	4651      	mov	r1, sl
    f294:	f000 fbd8 	bl	fa48 <memmove>
    f298:	46b4      	mov	ip, r6
    f29a:	6823      	ldr	r3, [r4, #0]
    f29c:	0021      	movs	r1, r4
    f29e:	4463      	add	r3, ip
    f2a0:	6023      	str	r3, [r4, #0]
    f2a2:	9800      	ldr	r0, [sp, #0]
    f2a4:	f7ff fcc4 	bl	ec30 <_fflush_r>
    f2a8:	2800      	cmp	r0, #0
    f2aa:	d000      	beq.n	f2ae <__sfvwrite_r+0x2ba>
    f2ac:	e741      	b.n	f132 <__sfvwrite_r+0x13e>
    f2ae:	9e01      	ldr	r6, [sp, #4]
    f2b0:	e70e      	b.n	f0d0 <__sfvwrite_r+0xdc>
    f2b2:	9800      	ldr	r0, [sp, #0]
    f2b4:	f000 ff70 	bl	10198 <_realloc_r>
    f2b8:	4680      	mov	r8, r0
    f2ba:	2800      	cmp	r0, #0
    f2bc:	d1c7      	bne.n	f24e <__sfvwrite_r+0x25a>
    f2be:	9d00      	ldr	r5, [sp, #0]
    f2c0:	6921      	ldr	r1, [r4, #16]
    f2c2:	0028      	movs	r0, r5
    f2c4:	f7ff fdb8 	bl	ee38 <_free_r>
    f2c8:	2280      	movs	r2, #128	; 0x80
    f2ca:	89a3      	ldrh	r3, [r4, #12]
    f2cc:	4393      	bics	r3, r2
    f2ce:	3a74      	subs	r2, #116	; 0x74
    f2d0:	b21b      	sxth	r3, r3
    f2d2:	602a      	str	r2, [r5, #0]
    f2d4:	e72f      	b.n	f136 <__sfvwrite_r+0x142>
    f2d6:	1c7d      	adds	r5, r7, #1
    f2d8:	e6de      	b.n	f098 <__sfvwrite_r+0xa4>
    f2da:	2001      	movs	r0, #1
    f2dc:	4240      	negs	r0, r0
    f2de:	e6bd      	b.n	f05c <__sfvwrite_r+0x68>
    f2e0:	9a00      	ldr	r2, [sp, #0]
    f2e2:	330c      	adds	r3, #12
    f2e4:	6013      	str	r3, [r2, #0]
    f2e6:	220c      	movs	r2, #12
    f2e8:	5ea3      	ldrsh	r3, [r4, r2]
    f2ea:	e724      	b.n	f136 <__sfvwrite_r+0x142>
    f2ec:	7ffffc00 	.word	0x7ffffc00
    f2f0:	fffffb7f 	.word	0xfffffb7f
    f2f4:	7fffffff 	.word	0x7fffffff

0000f2f8 <_fwalk_reent>:
    f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2fa:	4647      	mov	r7, r8
    f2fc:	46ce      	mov	lr, r9
    f2fe:	b580      	push	{r7, lr}
    f300:	27b8      	movs	r7, #184	; 0xb8
    f302:	4680      	mov	r8, r0
    f304:	00bf      	lsls	r7, r7, #2
    f306:	4447      	add	r7, r8
    f308:	4689      	mov	r9, r1
    f30a:	2600      	movs	r6, #0
    f30c:	2f00      	cmp	r7, #0
    f30e:	d014      	beq.n	f33a <_fwalk_reent+0x42>
    f310:	687b      	ldr	r3, [r7, #4]
    f312:	68bc      	ldr	r4, [r7, #8]
    f314:	1e5d      	subs	r5, r3, #1
    f316:	d40d      	bmi.n	f334 <_fwalk_reent+0x3c>
    f318:	89a3      	ldrh	r3, [r4, #12]
    f31a:	2b01      	cmp	r3, #1
    f31c:	d907      	bls.n	f32e <_fwalk_reent+0x36>
    f31e:	220e      	movs	r2, #14
    f320:	5ea3      	ldrsh	r3, [r4, r2]
    f322:	3301      	adds	r3, #1
    f324:	d003      	beq.n	f32e <_fwalk_reent+0x36>
    f326:	0021      	movs	r1, r4
    f328:	4640      	mov	r0, r8
    f32a:	47c8      	blx	r9
    f32c:	4306      	orrs	r6, r0
    f32e:	3468      	adds	r4, #104	; 0x68
    f330:	3d01      	subs	r5, #1
    f332:	d2f1      	bcs.n	f318 <_fwalk_reent+0x20>
    f334:	683f      	ldr	r7, [r7, #0]
    f336:	2f00      	cmp	r7, #0
    f338:	d1ea      	bne.n	f310 <_fwalk_reent+0x18>
    f33a:	0030      	movs	r0, r6
    f33c:	bc0c      	pop	{r2, r3}
    f33e:	4690      	mov	r8, r2
    f340:	4699      	mov	r9, r3
    f342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f344 <_localeconv_r>:
    f344:	4b04      	ldr	r3, [pc, #16]	; (f358 <_localeconv_r+0x14>)
    f346:	681b      	ldr	r3, [r3, #0]
    f348:	6b58      	ldr	r0, [r3, #52]	; 0x34
    f34a:	2800      	cmp	r0, #0
    f34c:	d001      	beq.n	f352 <_localeconv_r+0xe>
    f34e:	30f0      	adds	r0, #240	; 0xf0
    f350:	4770      	bx	lr
    f352:	4802      	ldr	r0, [pc, #8]	; (f35c <_localeconv_r+0x18>)
    f354:	e7fb      	b.n	f34e <_localeconv_r+0xa>
    f356:	46c0      	nop			; (mov r8, r8)
    f358:	20000070 	.word	0x20000070
    f35c:	200008b4 	.word	0x200008b4

0000f360 <__retarget_lock_init_recursive>:
    f360:	4770      	bx	lr
    f362:	46c0      	nop			; (mov r8, r8)

0000f364 <__retarget_lock_close_recursive>:
    f364:	4770      	bx	lr
    f366:	46c0      	nop			; (mov r8, r8)

0000f368 <__retarget_lock_acquire_recursive>:
    f368:	4770      	bx	lr
    f36a:	46c0      	nop			; (mov r8, r8)

0000f36c <__retarget_lock_release_recursive>:
    f36c:	4770      	bx	lr
    f36e:	46c0      	nop			; (mov r8, r8)

0000f370 <__swhatbuf_r>:
    f370:	b570      	push	{r4, r5, r6, lr}
    f372:	000c      	movs	r4, r1
    f374:	001e      	movs	r6, r3
    f376:	230e      	movs	r3, #14
    f378:	5ec9      	ldrsh	r1, [r1, r3]
    f37a:	b090      	sub	sp, #64	; 0x40
    f37c:	0015      	movs	r5, r2
    f37e:	2900      	cmp	r1, #0
    f380:	db15      	blt.n	f3ae <__swhatbuf_r+0x3e>
    f382:	aa01      	add	r2, sp, #4
    f384:	f001 faa4 	bl	108d0 <_fstat_r>
    f388:	2800      	cmp	r0, #0
    f38a:	db10      	blt.n	f3ae <__swhatbuf_r+0x3e>
    f38c:	22f0      	movs	r2, #240	; 0xf0
    f38e:	9b02      	ldr	r3, [sp, #8]
    f390:	0212      	lsls	r2, r2, #8
    f392:	4013      	ands	r3, r2
    f394:	4a0d      	ldr	r2, [pc, #52]	; (f3cc <__swhatbuf_r+0x5c>)
    f396:	2080      	movs	r0, #128	; 0x80
    f398:	4694      	mov	ip, r2
    f39a:	4463      	add	r3, ip
    f39c:	425a      	negs	r2, r3
    f39e:	4153      	adcs	r3, r2
    f3a0:	6033      	str	r3, [r6, #0]
    f3a2:	2380      	movs	r3, #128	; 0x80
    f3a4:	00db      	lsls	r3, r3, #3
    f3a6:	602b      	str	r3, [r5, #0]
    f3a8:	0100      	lsls	r0, r0, #4
    f3aa:	b010      	add	sp, #64	; 0x40
    f3ac:	bd70      	pop	{r4, r5, r6, pc}
    f3ae:	2300      	movs	r3, #0
    f3b0:	6033      	str	r3, [r6, #0]
    f3b2:	89a3      	ldrh	r3, [r4, #12]
    f3b4:	061b      	lsls	r3, r3, #24
    f3b6:	d503      	bpl.n	f3c0 <__swhatbuf_r+0x50>
    f3b8:	2340      	movs	r3, #64	; 0x40
    f3ba:	2000      	movs	r0, #0
    f3bc:	602b      	str	r3, [r5, #0]
    f3be:	e7f4      	b.n	f3aa <__swhatbuf_r+0x3a>
    f3c0:	2380      	movs	r3, #128	; 0x80
    f3c2:	00db      	lsls	r3, r3, #3
    f3c4:	602b      	str	r3, [r5, #0]
    f3c6:	2000      	movs	r0, #0
    f3c8:	e7ef      	b.n	f3aa <__swhatbuf_r+0x3a>
    f3ca:	46c0      	nop			; (mov r8, r8)
    f3cc:	ffffe000 	.word	0xffffe000

0000f3d0 <__smakebuf_r>:
    f3d0:	b570      	push	{r4, r5, r6, lr}
    f3d2:	898b      	ldrh	r3, [r1, #12]
    f3d4:	b082      	sub	sp, #8
    f3d6:	0006      	movs	r6, r0
    f3d8:	000c      	movs	r4, r1
    f3da:	079b      	lsls	r3, r3, #30
    f3dc:	d507      	bpl.n	f3ee <__smakebuf_r+0x1e>
    f3de:	0023      	movs	r3, r4
    f3e0:	3343      	adds	r3, #67	; 0x43
    f3e2:	6023      	str	r3, [r4, #0]
    f3e4:	6123      	str	r3, [r4, #16]
    f3e6:	2301      	movs	r3, #1
    f3e8:	6163      	str	r3, [r4, #20]
    f3ea:	b002      	add	sp, #8
    f3ec:	bd70      	pop	{r4, r5, r6, pc}
    f3ee:	ab01      	add	r3, sp, #4
    f3f0:	466a      	mov	r2, sp
    f3f2:	f7ff ffbd 	bl	f370 <__swhatbuf_r>
    f3f6:	9900      	ldr	r1, [sp, #0]
    f3f8:	0005      	movs	r5, r0
    f3fa:	0030      	movs	r0, r6
    f3fc:	f000 f830 	bl	f460 <_malloc_r>
    f400:	2800      	cmp	r0, #0
    f402:	d01e      	beq.n	f442 <__smakebuf_r+0x72>
    f404:	2280      	movs	r2, #128	; 0x80
    f406:	4b15      	ldr	r3, [pc, #84]	; (f45c <__smakebuf_r+0x8c>)
    f408:	63f3      	str	r3, [r6, #60]	; 0x3c
    f40a:	89a3      	ldrh	r3, [r4, #12]
    f40c:	6020      	str	r0, [r4, #0]
    f40e:	4313      	orrs	r3, r2
    f410:	9a00      	ldr	r2, [sp, #0]
    f412:	b21b      	sxth	r3, r3
    f414:	6162      	str	r2, [r4, #20]
    f416:	9a01      	ldr	r2, [sp, #4]
    f418:	81a3      	strh	r3, [r4, #12]
    f41a:	6120      	str	r0, [r4, #16]
    f41c:	2a00      	cmp	r2, #0
    f41e:	d102      	bne.n	f426 <__smakebuf_r+0x56>
    f420:	432b      	orrs	r3, r5
    f422:	81a3      	strh	r3, [r4, #12]
    f424:	e7e1      	b.n	f3ea <__smakebuf_r+0x1a>
    f426:	230e      	movs	r3, #14
    f428:	5ee1      	ldrsh	r1, [r4, r3]
    f42a:	0030      	movs	r0, r6
    f42c:	f001 fa64 	bl	108f8 <_isatty_r>
    f430:	2800      	cmp	r0, #0
    f432:	d010      	beq.n	f456 <__smakebuf_r+0x86>
    f434:	2203      	movs	r2, #3
    f436:	89a3      	ldrh	r3, [r4, #12]
    f438:	4393      	bics	r3, r2
    f43a:	2201      	movs	r2, #1
    f43c:	4313      	orrs	r3, r2
    f43e:	b21b      	sxth	r3, r3
    f440:	e7ee      	b.n	f420 <__smakebuf_r+0x50>
    f442:	220c      	movs	r2, #12
    f444:	5ea3      	ldrsh	r3, [r4, r2]
    f446:	059a      	lsls	r2, r3, #22
    f448:	d4cf      	bmi.n	f3ea <__smakebuf_r+0x1a>
    f44a:	2203      	movs	r2, #3
    f44c:	4393      	bics	r3, r2
    f44e:	2202      	movs	r2, #2
    f450:	4313      	orrs	r3, r2
    f452:	81a3      	strh	r3, [r4, #12]
    f454:	e7c3      	b.n	f3de <__smakebuf_r+0xe>
    f456:	220c      	movs	r2, #12
    f458:	5ea3      	ldrsh	r3, [r4, r2]
    f45a:	e7e1      	b.n	f420 <__smakebuf_r+0x50>
    f45c:	0000ec85 	.word	0x0000ec85

0000f460 <_malloc_r>:
    f460:	b5f0      	push	{r4, r5, r6, r7, lr}
    f462:	4657      	mov	r7, sl
    f464:	4645      	mov	r5, r8
    f466:	46de      	mov	lr, fp
    f468:	464e      	mov	r6, r9
    f46a:	b5e0      	push	{r5, r6, r7, lr}
    f46c:	000d      	movs	r5, r1
    f46e:	350b      	adds	r5, #11
    f470:	b083      	sub	sp, #12
    f472:	0007      	movs	r7, r0
    f474:	2d16      	cmp	r5, #22
    f476:	d800      	bhi.n	f47a <_malloc_r+0x1a>
    f478:	e09f      	b.n	f5ba <_malloc_r+0x15a>
    f47a:	2307      	movs	r3, #7
    f47c:	439d      	bics	r5, r3
    f47e:	d500      	bpl.n	f482 <_malloc_r+0x22>
    f480:	e0c4      	b.n	f60c <_malloc_r+0x1ac>
    f482:	42a9      	cmp	r1, r5
    f484:	d900      	bls.n	f488 <_malloc_r+0x28>
    f486:	e0c1      	b.n	f60c <_malloc_r+0x1ac>
    f488:	f000 fb2e 	bl	fae8 <__malloc_lock>
    f48c:	23f8      	movs	r3, #248	; 0xf8
    f48e:	33ff      	adds	r3, #255	; 0xff
    f490:	429d      	cmp	r5, r3
    f492:	d800      	bhi.n	f496 <_malloc_r+0x36>
    f494:	e28f      	b.n	f9b6 <_malloc_r+0x556>
    f496:	0a68      	lsrs	r0, r5, #9
    f498:	d100      	bne.n	f49c <_malloc_r+0x3c>
    f49a:	e0bb      	b.n	f614 <_malloc_r+0x1b4>
    f49c:	2804      	cmp	r0, #4
    f49e:	d900      	bls.n	f4a2 <_malloc_r+0x42>
    f4a0:	e162      	b.n	f768 <_malloc_r+0x308>
    f4a2:	2338      	movs	r3, #56	; 0x38
    f4a4:	4698      	mov	r8, r3
    f4a6:	09a8      	lsrs	r0, r5, #6
    f4a8:	4480      	add	r8, r0
    f4aa:	3039      	adds	r0, #57	; 0x39
    f4ac:	00c1      	lsls	r1, r0, #3
    f4ae:	4ed2      	ldr	r6, [pc, #840]	; (f7f8 <_malloc_r+0x398>)
    f4b0:	1871      	adds	r1, r6, r1
    f4b2:	3908      	subs	r1, #8
    f4b4:	68cc      	ldr	r4, [r1, #12]
    f4b6:	42a1      	cmp	r1, r4
    f4b8:	d019      	beq.n	f4ee <_malloc_r+0x8e>
    f4ba:	2303      	movs	r3, #3
    f4bc:	6862      	ldr	r2, [r4, #4]
    f4be:	439a      	bics	r2, r3
    f4c0:	0013      	movs	r3, r2
    f4c2:	1b52      	subs	r2, r2, r5
    f4c4:	2a0f      	cmp	r2, #15
    f4c6:	dd00      	ble.n	f4ca <_malloc_r+0x6a>
    f4c8:	e0aa      	b.n	f620 <_malloc_r+0x1c0>
    f4ca:	2a00      	cmp	r2, #0
    f4cc:	db00      	blt.n	f4d0 <_malloc_r+0x70>
    f4ce:	e088      	b.n	f5e2 <_malloc_r+0x182>
    f4d0:	2303      	movs	r3, #3
    f4d2:	469c      	mov	ip, r3
    f4d4:	e008      	b.n	f4e8 <_malloc_r+0x88>
    f4d6:	4662      	mov	r2, ip
    f4d8:	6863      	ldr	r3, [r4, #4]
    f4da:	4393      	bics	r3, r2
    f4dc:	1b5a      	subs	r2, r3, r5
    f4de:	2a0f      	cmp	r2, #15
    f4e0:	dd00      	ble.n	f4e4 <_malloc_r+0x84>
    f4e2:	e09d      	b.n	f620 <_malloc_r+0x1c0>
    f4e4:	2a00      	cmp	r2, #0
    f4e6:	da7c      	bge.n	f5e2 <_malloc_r+0x182>
    f4e8:	68e4      	ldr	r4, [r4, #12]
    f4ea:	42a1      	cmp	r1, r4
    f4ec:	d1f3      	bne.n	f4d6 <_malloc_r+0x76>
    f4ee:	0032      	movs	r2, r6
    f4f0:	6934      	ldr	r4, [r6, #16]
    f4f2:	3208      	adds	r2, #8
    f4f4:	4294      	cmp	r4, r2
    f4f6:	d100      	bne.n	f4fa <_malloc_r+0x9a>
    f4f8:	e190      	b.n	f81c <_malloc_r+0x3bc>
    f4fa:	2303      	movs	r3, #3
    f4fc:	6861      	ldr	r1, [r4, #4]
    f4fe:	4399      	bics	r1, r3
    f500:	4689      	mov	r9, r1
    f502:	1b49      	subs	r1, r1, r5
    f504:	290f      	cmp	r1, #15
    f506:	dd00      	ble.n	f50a <_malloc_r+0xaa>
    f508:	e162      	b.n	f7d0 <_malloc_r+0x370>
    f50a:	6172      	str	r2, [r6, #20]
    f50c:	6132      	str	r2, [r6, #16]
    f50e:	2900      	cmp	r1, #0
    f510:	db00      	blt.n	f514 <_malloc_r+0xb4>
    f512:	e087      	b.n	f624 <_malloc_r+0x1c4>
    f514:	4ab9      	ldr	r2, [pc, #740]	; (f7fc <_malloc_r+0x39c>)
    f516:	464b      	mov	r3, r9
    f518:	4591      	cmp	r9, r2
    f51a:	d900      	bls.n	f51e <_malloc_r+0xbe>
    f51c:	e130      	b.n	f780 <_malloc_r+0x320>
    f51e:	08db      	lsrs	r3, r3, #3
    f520:	3aff      	subs	r2, #255	; 0xff
    f522:	1099      	asrs	r1, r3, #2
    f524:	3aff      	subs	r2, #255	; 0xff
    f526:	408a      	lsls	r2, r1
    f528:	00db      	lsls	r3, r3, #3
    f52a:	6871      	ldr	r1, [r6, #4]
    f52c:	199b      	adds	r3, r3, r6
    f52e:	430a      	orrs	r2, r1
    f530:	6899      	ldr	r1, [r3, #8]
    f532:	6072      	str	r2, [r6, #4]
    f534:	60e3      	str	r3, [r4, #12]
    f536:	60a1      	str	r1, [r4, #8]
    f538:	609c      	str	r4, [r3, #8]
    f53a:	0013      	movs	r3, r2
    f53c:	60cc      	str	r4, [r1, #12]
    f53e:	2101      	movs	r1, #1
    f540:	1082      	asrs	r2, r0, #2
    f542:	4091      	lsls	r1, r2
    f544:	4299      	cmp	r1, r3
    f546:	d86f      	bhi.n	f628 <_malloc_r+0x1c8>
    f548:	420b      	tst	r3, r1
    f54a:	d105      	bne.n	f558 <_malloc_r+0xf8>
    f54c:	2203      	movs	r2, #3
    f54e:	4390      	bics	r0, r2
    f550:	0049      	lsls	r1, r1, #1
    f552:	3004      	adds	r0, #4
    f554:	420b      	tst	r3, r1
    f556:	d0fb      	beq.n	f550 <_malloc_r+0xf0>
    f558:	2303      	movs	r3, #3
    f55a:	4698      	mov	r8, r3
    f55c:	00c3      	lsls	r3, r0, #3
    f55e:	4699      	mov	r9, r3
    f560:	44b1      	add	r9, r6
    f562:	46cc      	mov	ip, r9
    f564:	4682      	mov	sl, r0
    f566:	4663      	mov	r3, ip
    f568:	68dc      	ldr	r4, [r3, #12]
    f56a:	45a4      	cmp	ip, r4
    f56c:	d107      	bne.n	f57e <_malloc_r+0x11e>
    f56e:	e157      	b.n	f820 <_malloc_r+0x3c0>
    f570:	2a00      	cmp	r2, #0
    f572:	db00      	blt.n	f576 <_malloc_r+0x116>
    f574:	e166      	b.n	f844 <_malloc_r+0x3e4>
    f576:	68e4      	ldr	r4, [r4, #12]
    f578:	45a4      	cmp	ip, r4
    f57a:	d100      	bne.n	f57e <_malloc_r+0x11e>
    f57c:	e150      	b.n	f820 <_malloc_r+0x3c0>
    f57e:	4642      	mov	r2, r8
    f580:	6863      	ldr	r3, [r4, #4]
    f582:	4393      	bics	r3, r2
    f584:	1b5a      	subs	r2, r3, r5
    f586:	2a0f      	cmp	r2, #15
    f588:	ddf2      	ble.n	f570 <_malloc_r+0x110>
    f58a:	2001      	movs	r0, #1
    f58c:	4680      	mov	r8, r0
    f58e:	1961      	adds	r1, r4, r5
    f590:	4305      	orrs	r5, r0
    f592:	6065      	str	r5, [r4, #4]
    f594:	68a0      	ldr	r0, [r4, #8]
    f596:	68e5      	ldr	r5, [r4, #12]
    f598:	3608      	adds	r6, #8
    f59a:	60c5      	str	r5, [r0, #12]
    f59c:	60a8      	str	r0, [r5, #8]
    f59e:	4640      	mov	r0, r8
    f5a0:	60f1      	str	r1, [r6, #12]
    f5a2:	60b1      	str	r1, [r6, #8]
    f5a4:	4310      	orrs	r0, r2
    f5a6:	6048      	str	r0, [r1, #4]
    f5a8:	60ce      	str	r6, [r1, #12]
    f5aa:	608e      	str	r6, [r1, #8]
    f5ac:	0038      	movs	r0, r7
    f5ae:	50e2      	str	r2, [r4, r3]
    f5b0:	f000 faa2 	bl	faf8 <__malloc_unlock>
    f5b4:	0020      	movs	r0, r4
    f5b6:	3008      	adds	r0, #8
    f5b8:	e021      	b.n	f5fe <_malloc_r+0x19e>
    f5ba:	2910      	cmp	r1, #16
    f5bc:	d826      	bhi.n	f60c <_malloc_r+0x1ac>
    f5be:	0038      	movs	r0, r7
    f5c0:	f000 fa92 	bl	fae8 <__malloc_lock>
    f5c4:	2510      	movs	r5, #16
    f5c6:	2318      	movs	r3, #24
    f5c8:	2002      	movs	r0, #2
    f5ca:	4e8b      	ldr	r6, [pc, #556]	; (f7f8 <_malloc_r+0x398>)
    f5cc:	18f3      	adds	r3, r6, r3
    f5ce:	001a      	movs	r2, r3
    f5d0:	685c      	ldr	r4, [r3, #4]
    f5d2:	3a08      	subs	r2, #8
    f5d4:	4294      	cmp	r4, r2
    f5d6:	d100      	bne.n	f5da <_malloc_r+0x17a>
    f5d8:	e12e      	b.n	f838 <_malloc_r+0x3d8>
    f5da:	2303      	movs	r3, #3
    f5dc:	6862      	ldr	r2, [r4, #4]
    f5de:	439a      	bics	r2, r3
    f5e0:	0013      	movs	r3, r2
    f5e2:	68e2      	ldr	r2, [r4, #12]
    f5e4:	68a1      	ldr	r1, [r4, #8]
    f5e6:	60ca      	str	r2, [r1, #12]
    f5e8:	6091      	str	r1, [r2, #8]
    f5ea:	2201      	movs	r2, #1
    f5ec:	18e3      	adds	r3, r4, r3
    f5ee:	6859      	ldr	r1, [r3, #4]
    f5f0:	0038      	movs	r0, r7
    f5f2:	430a      	orrs	r2, r1
    f5f4:	605a      	str	r2, [r3, #4]
    f5f6:	f000 fa7f 	bl	faf8 <__malloc_unlock>
    f5fa:	0020      	movs	r0, r4
    f5fc:	3008      	adds	r0, #8
    f5fe:	b003      	add	sp, #12
    f600:	bc3c      	pop	{r2, r3, r4, r5}
    f602:	4690      	mov	r8, r2
    f604:	4699      	mov	r9, r3
    f606:	46a2      	mov	sl, r4
    f608:	46ab      	mov	fp, r5
    f60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f60c:	230c      	movs	r3, #12
    f60e:	2000      	movs	r0, #0
    f610:	603b      	str	r3, [r7, #0]
    f612:	e7f4      	b.n	f5fe <_malloc_r+0x19e>
    f614:	2180      	movs	r1, #128	; 0x80
    f616:	233f      	movs	r3, #63	; 0x3f
    f618:	2040      	movs	r0, #64	; 0x40
    f61a:	0089      	lsls	r1, r1, #2
    f61c:	4698      	mov	r8, r3
    f61e:	e746      	b.n	f4ae <_malloc_r+0x4e>
    f620:	4640      	mov	r0, r8
    f622:	e764      	b.n	f4ee <_malloc_r+0x8e>
    f624:	464b      	mov	r3, r9
    f626:	e7e0      	b.n	f5ea <_malloc_r+0x18a>
    f628:	2303      	movs	r3, #3
    f62a:	68b4      	ldr	r4, [r6, #8]
    f62c:	6862      	ldr	r2, [r4, #4]
    f62e:	439a      	bics	r2, r3
    f630:	4690      	mov	r8, r2
    f632:	42aa      	cmp	r2, r5
    f634:	d303      	bcc.n	f63e <_malloc_r+0x1de>
    f636:	1b53      	subs	r3, r2, r5
    f638:	2b0f      	cmp	r3, #15
    f63a:	dd00      	ble.n	f63e <_malloc_r+0x1de>
    f63c:	e086      	b.n	f74c <_malloc_r+0x2ec>
    f63e:	0023      	movs	r3, r4
    f640:	4443      	add	r3, r8
    f642:	4a6f      	ldr	r2, [pc, #444]	; (f800 <_malloc_r+0x3a0>)
    f644:	9301      	str	r3, [sp, #4]
    f646:	4b6f      	ldr	r3, [pc, #444]	; (f804 <_malloc_r+0x3a4>)
    f648:	4693      	mov	fp, r2
    f64a:	681b      	ldr	r3, [r3, #0]
    f64c:	6812      	ldr	r2, [r2, #0]
    f64e:	18eb      	adds	r3, r5, r3
    f650:	3201      	adds	r2, #1
    f652:	d100      	bne.n	f656 <_malloc_r+0x1f6>
    f654:	e168      	b.n	f928 <_malloc_r+0x4c8>
    f656:	4a6c      	ldr	r2, [pc, #432]	; (f808 <_malloc_r+0x3a8>)
    f658:	4694      	mov	ip, r2
    f65a:	4463      	add	r3, ip
    f65c:	0b1b      	lsrs	r3, r3, #12
    f65e:	031b      	lsls	r3, r3, #12
    f660:	9300      	str	r3, [sp, #0]
    f662:	9900      	ldr	r1, [sp, #0]
    f664:	0038      	movs	r0, r7
    f666:	f000 ff55 	bl	10514 <_sbrk_r>
    f66a:	0003      	movs	r3, r0
    f66c:	4681      	mov	r9, r0
    f66e:	3301      	adds	r3, #1
    f670:	d061      	beq.n	f736 <_malloc_r+0x2d6>
    f672:	9b01      	ldr	r3, [sp, #4]
    f674:	4283      	cmp	r3, r0
    f676:	d900      	bls.n	f67a <_malloc_r+0x21a>
    f678:	e0ff      	b.n	f87a <_malloc_r+0x41a>
    f67a:	4b64      	ldr	r3, [pc, #400]	; (f80c <_malloc_r+0x3ac>)
    f67c:	9a00      	ldr	r2, [sp, #0]
    f67e:	469a      	mov	sl, r3
    f680:	681b      	ldr	r3, [r3, #0]
    f682:	469c      	mov	ip, r3
    f684:	4653      	mov	r3, sl
    f686:	4462      	add	r2, ip
    f688:	601a      	str	r2, [r3, #0]
    f68a:	9b01      	ldr	r3, [sp, #4]
    f68c:	0011      	movs	r1, r2
    f68e:	4283      	cmp	r3, r0
    f690:	d100      	bne.n	f694 <_malloc_r+0x234>
    f692:	e155      	b.n	f940 <_malloc_r+0x4e0>
    f694:	465b      	mov	r3, fp
    f696:	681b      	ldr	r3, [r3, #0]
    f698:	3301      	adds	r3, #1
    f69a:	d100      	bne.n	f69e <_malloc_r+0x23e>
    f69c:	e16c      	b.n	f978 <_malloc_r+0x518>
    f69e:	464b      	mov	r3, r9
    f6a0:	9a01      	ldr	r2, [sp, #4]
    f6a2:	1a9b      	subs	r3, r3, r2
    f6a4:	1859      	adds	r1, r3, r1
    f6a6:	4653      	mov	r3, sl
    f6a8:	6019      	str	r1, [r3, #0]
    f6aa:	2307      	movs	r3, #7
    f6ac:	464a      	mov	r2, r9
    f6ae:	4013      	ands	r3, r2
    f6b0:	d100      	bne.n	f6b4 <_malloc_r+0x254>
    f6b2:	e124      	b.n	f8fe <_malloc_r+0x49e>
    f6b4:	2108      	movs	r1, #8
    f6b6:	4689      	mov	r9, r1
    f6b8:	4955      	ldr	r1, [pc, #340]	; (f810 <_malloc_r+0x3b0>)
    f6ba:	1ad2      	subs	r2, r2, r3
    f6bc:	4491      	add	r9, r2
    f6be:	1acb      	subs	r3, r1, r3
    f6c0:	9a00      	ldr	r2, [sp, #0]
    f6c2:	0038      	movs	r0, r7
    f6c4:	444a      	add	r2, r9
    f6c6:	0511      	lsls	r1, r2, #20
    f6c8:	0d09      	lsrs	r1, r1, #20
    f6ca:	1a5b      	subs	r3, r3, r1
    f6cc:	0019      	movs	r1, r3
    f6ce:	469b      	mov	fp, r3
    f6d0:	f000 ff20 	bl	10514 <_sbrk_r>
    f6d4:	1c43      	adds	r3, r0, #1
    f6d6:	d100      	bne.n	f6da <_malloc_r+0x27a>
    f6d8:	e142      	b.n	f960 <_malloc_r+0x500>
    f6da:	464b      	mov	r3, r9
    f6dc:	1ac0      	subs	r0, r0, r3
    f6de:	2301      	movs	r3, #1
    f6e0:	4458      	add	r0, fp
    f6e2:	4318      	orrs	r0, r3
    f6e4:	4653      	mov	r3, sl
    f6e6:	681b      	ldr	r3, [r3, #0]
    f6e8:	445b      	add	r3, fp
    f6ea:	0019      	movs	r1, r3
    f6ec:	4653      	mov	r3, sl
    f6ee:	6019      	str	r1, [r3, #0]
    f6f0:	464b      	mov	r3, r9
    f6f2:	60b3      	str	r3, [r6, #8]
    f6f4:	6058      	str	r0, [r3, #4]
    f6f6:	42b4      	cmp	r4, r6
    f6f8:	d013      	beq.n	f722 <_malloc_r+0x2c2>
    f6fa:	4643      	mov	r3, r8
    f6fc:	2b0f      	cmp	r3, #15
    f6fe:	d800      	bhi.n	f702 <_malloc_r+0x2a2>
    f700:	e0e8      	b.n	f8d4 <_malloc_r+0x474>
    f702:	4643      	mov	r3, r8
    f704:	2207      	movs	r2, #7
    f706:	6860      	ldr	r0, [r4, #4]
    f708:	3b0c      	subs	r3, #12
    f70a:	4393      	bics	r3, r2
    f70c:	3a06      	subs	r2, #6
    f70e:	4002      	ands	r2, r0
    f710:	2005      	movs	r0, #5
    f712:	431a      	orrs	r2, r3
    f714:	6062      	str	r2, [r4, #4]
    f716:	18e2      	adds	r2, r4, r3
    f718:	6050      	str	r0, [r2, #4]
    f71a:	6090      	str	r0, [r2, #8]
    f71c:	2b0f      	cmp	r3, #15
    f71e:	d900      	bls.n	f722 <_malloc_r+0x2c2>
    f720:	e122      	b.n	f968 <_malloc_r+0x508>
    f722:	4b3c      	ldr	r3, [pc, #240]	; (f814 <_malloc_r+0x3b4>)
    f724:	681a      	ldr	r2, [r3, #0]
    f726:	4291      	cmp	r1, r2
    f728:	d900      	bls.n	f72c <_malloc_r+0x2cc>
    f72a:	6019      	str	r1, [r3, #0]
    f72c:	4b3a      	ldr	r3, [pc, #232]	; (f818 <_malloc_r+0x3b8>)
    f72e:	681a      	ldr	r2, [r3, #0]
    f730:	4291      	cmp	r1, r2
    f732:	d900      	bls.n	f736 <_malloc_r+0x2d6>
    f734:	6019      	str	r1, [r3, #0]
    f736:	2303      	movs	r3, #3
    f738:	68b4      	ldr	r4, [r6, #8]
    f73a:	6862      	ldr	r2, [r4, #4]
    f73c:	439a      	bics	r2, r3
    f73e:	1b53      	subs	r3, r2, r5
    f740:	4295      	cmp	r5, r2
    f742:	d900      	bls.n	f746 <_malloc_r+0x2e6>
    f744:	e0c9      	b.n	f8da <_malloc_r+0x47a>
    f746:	2b0f      	cmp	r3, #15
    f748:	dc00      	bgt.n	f74c <_malloc_r+0x2ec>
    f74a:	e0c6      	b.n	f8da <_malloc_r+0x47a>
    f74c:	2201      	movs	r2, #1
    f74e:	0029      	movs	r1, r5
    f750:	4313      	orrs	r3, r2
    f752:	4311      	orrs	r1, r2
    f754:	1965      	adds	r5, r4, r5
    f756:	6061      	str	r1, [r4, #4]
    f758:	0038      	movs	r0, r7
    f75a:	60b5      	str	r5, [r6, #8]
    f75c:	606b      	str	r3, [r5, #4]
    f75e:	f000 f9cb 	bl	faf8 <__malloc_unlock>
    f762:	0020      	movs	r0, r4
    f764:	3008      	adds	r0, #8
    f766:	e74a      	b.n	f5fe <_malloc_r+0x19e>
    f768:	2814      	cmp	r0, #20
    f76a:	d97a      	bls.n	f862 <_malloc_r+0x402>
    f76c:	2854      	cmp	r0, #84	; 0x54
    f76e:	d900      	bls.n	f772 <_malloc_r+0x312>
    f770:	e0ba      	b.n	f8e8 <_malloc_r+0x488>
    f772:	236e      	movs	r3, #110	; 0x6e
    f774:	4698      	mov	r8, r3
    f776:	0b28      	lsrs	r0, r5, #12
    f778:	4480      	add	r8, r0
    f77a:	306f      	adds	r0, #111	; 0x6f
    f77c:	00c1      	lsls	r1, r0, #3
    f77e:	e696      	b.n	f4ae <_malloc_r+0x4e>
    f780:	0a5a      	lsrs	r2, r3, #9
    f782:	2a04      	cmp	r2, #4
    f784:	d973      	bls.n	f86e <_malloc_r+0x40e>
    f786:	2a14      	cmp	r2, #20
    f788:	d900      	bls.n	f78c <_malloc_r+0x32c>
    f78a:	e0d0      	b.n	f92e <_malloc_r+0x4ce>
    f78c:	0011      	movs	r1, r2
    f78e:	325c      	adds	r2, #92	; 0x5c
    f790:	315b      	adds	r1, #91	; 0x5b
    f792:	00d2      	lsls	r2, r2, #3
    f794:	2308      	movs	r3, #8
    f796:	425b      	negs	r3, r3
    f798:	469c      	mov	ip, r3
    f79a:	18b2      	adds	r2, r6, r2
    f79c:	4494      	add	ip, r2
    f79e:	4663      	mov	r3, ip
    f7a0:	689a      	ldr	r2, [r3, #8]
    f7a2:	2303      	movs	r3, #3
    f7a4:	4698      	mov	r8, r3
    f7a6:	4594      	cmp	ip, r2
    f7a8:	d100      	bne.n	f7ac <_malloc_r+0x34c>
    f7aa:	e0ab      	b.n	f904 <_malloc_r+0x4a4>
    f7ac:	4643      	mov	r3, r8
    f7ae:	6851      	ldr	r1, [r2, #4]
    f7b0:	4399      	bics	r1, r3
    f7b2:	4589      	cmp	r9, r1
    f7b4:	d300      	bcc.n	f7b8 <_malloc_r+0x358>
    f7b6:	e095      	b.n	f8e4 <_malloc_r+0x484>
    f7b8:	6892      	ldr	r2, [r2, #8]
    f7ba:	4594      	cmp	ip, r2
    f7bc:	d1f6      	bne.n	f7ac <_malloc_r+0x34c>
    f7be:	4663      	mov	r3, ip
    f7c0:	68da      	ldr	r2, [r3, #12]
    f7c2:	6873      	ldr	r3, [r6, #4]
    f7c4:	4661      	mov	r1, ip
    f7c6:	60e2      	str	r2, [r4, #12]
    f7c8:	60a1      	str	r1, [r4, #8]
    f7ca:	6094      	str	r4, [r2, #8]
    f7cc:	60cc      	str	r4, [r1, #12]
    f7ce:	e6b6      	b.n	f53e <_malloc_r+0xde>
    f7d0:	2301      	movs	r3, #1
    f7d2:	1960      	adds	r0, r4, r5
    f7d4:	431d      	orrs	r5, r3
    f7d6:	6065      	str	r5, [r4, #4]
    f7d8:	6170      	str	r0, [r6, #20]
    f7da:	6130      	str	r0, [r6, #16]
    f7dc:	60c2      	str	r2, [r0, #12]
    f7de:	6082      	str	r2, [r0, #8]
    f7e0:	001a      	movs	r2, r3
    f7e2:	464b      	mov	r3, r9
    f7e4:	430a      	orrs	r2, r1
    f7e6:	6042      	str	r2, [r0, #4]
    f7e8:	0038      	movs	r0, r7
    f7ea:	50e1      	str	r1, [r4, r3]
    f7ec:	f000 f984 	bl	faf8 <__malloc_unlock>
    f7f0:	0020      	movs	r0, r4
    f7f2:	3008      	adds	r0, #8
    f7f4:	e703      	b.n	f5fe <_malloc_r+0x19e>
    f7f6:	46c0      	nop			; (mov r8, r8)
    f7f8:	200004a4 	.word	0x200004a4
    f7fc:	000001ff 	.word	0x000001ff
    f800:	200008ac 	.word	0x200008ac
    f804:	20001488 	.word	0x20001488
    f808:	0000100f 	.word	0x0000100f
    f80c:	20001458 	.word	0x20001458
    f810:	00001008 	.word	0x00001008
    f814:	20001480 	.word	0x20001480
    f818:	20001484 	.word	0x20001484
    f81c:	6873      	ldr	r3, [r6, #4]
    f81e:	e68e      	b.n	f53e <_malloc_r+0xde>
    f820:	2308      	movs	r3, #8
    f822:	469b      	mov	fp, r3
    f824:	3b07      	subs	r3, #7
    f826:	44dc      	add	ip, fp
    f828:	469b      	mov	fp, r3
    f82a:	44da      	add	sl, fp
    f82c:	4643      	mov	r3, r8
    f82e:	4652      	mov	r2, sl
    f830:	4213      	tst	r3, r2
    f832:	d000      	beq.n	f836 <_malloc_r+0x3d6>
    f834:	e697      	b.n	f566 <_malloc_r+0x106>
    f836:	e037      	b.n	f8a8 <_malloc_r+0x448>
    f838:	68dc      	ldr	r4, [r3, #12]
    f83a:	3002      	adds	r0, #2
    f83c:	42a3      	cmp	r3, r4
    f83e:	d100      	bne.n	f842 <_malloc_r+0x3e2>
    f840:	e655      	b.n	f4ee <_malloc_r+0x8e>
    f842:	e6ca      	b.n	f5da <_malloc_r+0x17a>
    f844:	2201      	movs	r2, #1
    f846:	18e3      	adds	r3, r4, r3
    f848:	6859      	ldr	r1, [r3, #4]
    f84a:	0038      	movs	r0, r7
    f84c:	430a      	orrs	r2, r1
    f84e:	605a      	str	r2, [r3, #4]
    f850:	68e3      	ldr	r3, [r4, #12]
    f852:	68a2      	ldr	r2, [r4, #8]
    f854:	60d3      	str	r3, [r2, #12]
    f856:	609a      	str	r2, [r3, #8]
    f858:	f000 f94e 	bl	faf8 <__malloc_unlock>
    f85c:	0020      	movs	r0, r4
    f85e:	3008      	adds	r0, #8
    f860:	e6cd      	b.n	f5fe <_malloc_r+0x19e>
    f862:	235b      	movs	r3, #91	; 0x5b
    f864:	4698      	mov	r8, r3
    f866:	4480      	add	r8, r0
    f868:	305c      	adds	r0, #92	; 0x5c
    f86a:	00c1      	lsls	r1, r0, #3
    f86c:	e61f      	b.n	f4ae <_malloc_r+0x4e>
    f86e:	099a      	lsrs	r2, r3, #6
    f870:	0011      	movs	r1, r2
    f872:	3239      	adds	r2, #57	; 0x39
    f874:	3138      	adds	r1, #56	; 0x38
    f876:	00d2      	lsls	r2, r2, #3
    f878:	e78c      	b.n	f794 <_malloc_r+0x334>
    f87a:	42b4      	cmp	r4, r6
    f87c:	d000      	beq.n	f880 <_malloc_r+0x420>
    f87e:	e75a      	b.n	f736 <_malloc_r+0x2d6>
    f880:	4b4f      	ldr	r3, [pc, #316]	; (f9c0 <_malloc_r+0x560>)
    f882:	9a00      	ldr	r2, [sp, #0]
    f884:	469a      	mov	sl, r3
    f886:	681b      	ldr	r3, [r3, #0]
    f888:	469c      	mov	ip, r3
    f88a:	4653      	mov	r3, sl
    f88c:	4462      	add	r2, ip
    f88e:	0011      	movs	r1, r2
    f890:	601a      	str	r2, [r3, #0]
    f892:	e6ff      	b.n	f694 <_malloc_r+0x234>
    f894:	2308      	movs	r3, #8
    f896:	425b      	negs	r3, r3
    f898:	469c      	mov	ip, r3
    f89a:	44e1      	add	r9, ip
    f89c:	464b      	mov	r3, r9
    f89e:	689b      	ldr	r3, [r3, #8]
    f8a0:	3801      	subs	r0, #1
    f8a2:	4599      	cmp	r9, r3
    f8a4:	d000      	beq.n	f8a8 <_malloc_r+0x448>
    f8a6:	e084      	b.n	f9b2 <_malloc_r+0x552>
    f8a8:	4643      	mov	r3, r8
    f8aa:	4203      	tst	r3, r0
    f8ac:	d1f2      	bne.n	f894 <_malloc_r+0x434>
    f8ae:	6873      	ldr	r3, [r6, #4]
    f8b0:	438b      	bics	r3, r1
    f8b2:	6073      	str	r3, [r6, #4]
    f8b4:	0049      	lsls	r1, r1, #1
    f8b6:	4299      	cmp	r1, r3
    f8b8:	d900      	bls.n	f8bc <_malloc_r+0x45c>
    f8ba:	e6b5      	b.n	f628 <_malloc_r+0x1c8>
    f8bc:	2900      	cmp	r1, #0
    f8be:	d100      	bne.n	f8c2 <_malloc_r+0x462>
    f8c0:	e6b2      	b.n	f628 <_malloc_r+0x1c8>
    f8c2:	4650      	mov	r0, sl
    f8c4:	420b      	tst	r3, r1
    f8c6:	d000      	beq.n	f8ca <_malloc_r+0x46a>
    f8c8:	e648      	b.n	f55c <_malloc_r+0xfc>
    f8ca:	0049      	lsls	r1, r1, #1
    f8cc:	3004      	adds	r0, #4
    f8ce:	420b      	tst	r3, r1
    f8d0:	d0fb      	beq.n	f8ca <_malloc_r+0x46a>
    f8d2:	e643      	b.n	f55c <_malloc_r+0xfc>
    f8d4:	2301      	movs	r3, #1
    f8d6:	464a      	mov	r2, r9
    f8d8:	6053      	str	r3, [r2, #4]
    f8da:	0038      	movs	r0, r7
    f8dc:	f000 f90c 	bl	faf8 <__malloc_unlock>
    f8e0:	2000      	movs	r0, #0
    f8e2:	e68c      	b.n	f5fe <_malloc_r+0x19e>
    f8e4:	4694      	mov	ip, r2
    f8e6:	e76a      	b.n	f7be <_malloc_r+0x35e>
    f8e8:	23aa      	movs	r3, #170	; 0xaa
    f8ea:	005b      	lsls	r3, r3, #1
    f8ec:	4298      	cmp	r0, r3
    f8ee:	d811      	bhi.n	f914 <_malloc_r+0x4b4>
    f8f0:	3bdd      	subs	r3, #221	; 0xdd
    f8f2:	4698      	mov	r8, r3
    f8f4:	0be8      	lsrs	r0, r5, #15
    f8f6:	4480      	add	r8, r0
    f8f8:	3078      	adds	r0, #120	; 0x78
    f8fa:	00c1      	lsls	r1, r0, #3
    f8fc:	e5d7      	b.n	f4ae <_malloc_r+0x4e>
    f8fe:	2380      	movs	r3, #128	; 0x80
    f900:	015b      	lsls	r3, r3, #5
    f902:	e6dd      	b.n	f6c0 <_malloc_r+0x260>
    f904:	1089      	asrs	r1, r1, #2
    f906:	3b02      	subs	r3, #2
    f908:	408b      	lsls	r3, r1
    f90a:	6872      	ldr	r2, [r6, #4]
    f90c:	4313      	orrs	r3, r2
    f90e:	6073      	str	r3, [r6, #4]
    f910:	4662      	mov	r2, ip
    f912:	e757      	b.n	f7c4 <_malloc_r+0x364>
    f914:	4b2b      	ldr	r3, [pc, #172]	; (f9c4 <_malloc_r+0x564>)
    f916:	4298      	cmp	r0, r3
    f918:	d81c      	bhi.n	f954 <_malloc_r+0x4f4>
    f91a:	237c      	movs	r3, #124	; 0x7c
    f91c:	4698      	mov	r8, r3
    f91e:	0ca8      	lsrs	r0, r5, #18
    f920:	4480      	add	r8, r0
    f922:	307d      	adds	r0, #125	; 0x7d
    f924:	00c1      	lsls	r1, r0, #3
    f926:	e5c2      	b.n	f4ae <_malloc_r+0x4e>
    f928:	3310      	adds	r3, #16
    f92a:	9300      	str	r3, [sp, #0]
    f92c:	e699      	b.n	f662 <_malloc_r+0x202>
    f92e:	2a54      	cmp	r2, #84	; 0x54
    f930:	d826      	bhi.n	f980 <_malloc_r+0x520>
    f932:	464b      	mov	r3, r9
    f934:	0b1a      	lsrs	r2, r3, #12
    f936:	0011      	movs	r1, r2
    f938:	326f      	adds	r2, #111	; 0x6f
    f93a:	316e      	adds	r1, #110	; 0x6e
    f93c:	00d2      	lsls	r2, r2, #3
    f93e:	e729      	b.n	f794 <_malloc_r+0x334>
    f940:	051b      	lsls	r3, r3, #20
    f942:	d000      	beq.n	f946 <_malloc_r+0x4e6>
    f944:	e6a6      	b.n	f694 <_malloc_r+0x234>
    f946:	2001      	movs	r0, #1
    f948:	9b00      	ldr	r3, [sp, #0]
    f94a:	68b2      	ldr	r2, [r6, #8]
    f94c:	4443      	add	r3, r8
    f94e:	4303      	orrs	r3, r0
    f950:	6053      	str	r3, [r2, #4]
    f952:	e6e6      	b.n	f722 <_malloc_r+0x2c2>
    f954:	21fe      	movs	r1, #254	; 0xfe
    f956:	237e      	movs	r3, #126	; 0x7e
    f958:	207f      	movs	r0, #127	; 0x7f
    f95a:	0089      	lsls	r1, r1, #2
    f95c:	4698      	mov	r8, r3
    f95e:	e5a6      	b.n	f4ae <_malloc_r+0x4e>
    f960:	2300      	movs	r3, #0
    f962:	2001      	movs	r0, #1
    f964:	469b      	mov	fp, r3
    f966:	e6bd      	b.n	f6e4 <_malloc_r+0x284>
    f968:	0021      	movs	r1, r4
    f96a:	0038      	movs	r0, r7
    f96c:	3108      	adds	r1, #8
    f96e:	f7ff fa63 	bl	ee38 <_free_r>
    f972:	4653      	mov	r3, sl
    f974:	6819      	ldr	r1, [r3, #0]
    f976:	e6d4      	b.n	f722 <_malloc_r+0x2c2>
    f978:	465b      	mov	r3, fp
    f97a:	464a      	mov	r2, r9
    f97c:	601a      	str	r2, [r3, #0]
    f97e:	e694      	b.n	f6aa <_malloc_r+0x24a>
    f980:	21aa      	movs	r1, #170	; 0xaa
    f982:	0049      	lsls	r1, r1, #1
    f984:	428a      	cmp	r2, r1
    f986:	d806      	bhi.n	f996 <_malloc_r+0x536>
    f988:	464b      	mov	r3, r9
    f98a:	0bda      	lsrs	r2, r3, #15
    f98c:	0011      	movs	r1, r2
    f98e:	3278      	adds	r2, #120	; 0x78
    f990:	3177      	adds	r1, #119	; 0x77
    f992:	00d2      	lsls	r2, r2, #3
    f994:	e6fe      	b.n	f794 <_malloc_r+0x334>
    f996:	490b      	ldr	r1, [pc, #44]	; (f9c4 <_malloc_r+0x564>)
    f998:	428a      	cmp	r2, r1
    f99a:	d806      	bhi.n	f9aa <_malloc_r+0x54a>
    f99c:	464b      	mov	r3, r9
    f99e:	0c9a      	lsrs	r2, r3, #18
    f9a0:	0011      	movs	r1, r2
    f9a2:	327d      	adds	r2, #125	; 0x7d
    f9a4:	317c      	adds	r1, #124	; 0x7c
    f9a6:	00d2      	lsls	r2, r2, #3
    f9a8:	e6f4      	b.n	f794 <_malloc_r+0x334>
    f9aa:	22fe      	movs	r2, #254	; 0xfe
    f9ac:	217e      	movs	r1, #126	; 0x7e
    f9ae:	0092      	lsls	r2, r2, #2
    f9b0:	e6f0      	b.n	f794 <_malloc_r+0x334>
    f9b2:	6873      	ldr	r3, [r6, #4]
    f9b4:	e77e      	b.n	f8b4 <_malloc_r+0x454>
    f9b6:	002b      	movs	r3, r5
    f9b8:	08e8      	lsrs	r0, r5, #3
    f9ba:	3308      	adds	r3, #8
    f9bc:	e605      	b.n	f5ca <_malloc_r+0x16a>
    f9be:	46c0      	nop			; (mov r8, r8)
    f9c0:	20001458 	.word	0x20001458
    f9c4:	00000554 	.word	0x00000554

0000f9c8 <memchr>:
    f9c8:	b570      	push	{r4, r5, r6, lr}
    f9ca:	b2cd      	uxtb	r5, r1
    f9cc:	0783      	lsls	r3, r0, #30
    f9ce:	d034      	beq.n	fa3a <memchr+0x72>
    f9d0:	1e54      	subs	r4, r2, #1
    f9d2:	2a00      	cmp	r2, #0
    f9d4:	d01b      	beq.n	fa0e <memchr+0x46>
    f9d6:	7803      	ldrb	r3, [r0, #0]
    f9d8:	42ab      	cmp	r3, r5
    f9da:	d019      	beq.n	fa10 <memchr+0x48>
    f9dc:	2203      	movs	r2, #3
    f9de:	e004      	b.n	f9ea <memchr+0x22>
    f9e0:	3c01      	subs	r4, #1
    f9e2:	d314      	bcc.n	fa0e <memchr+0x46>
    f9e4:	7803      	ldrb	r3, [r0, #0]
    f9e6:	42ab      	cmp	r3, r5
    f9e8:	d012      	beq.n	fa10 <memchr+0x48>
    f9ea:	3001      	adds	r0, #1
    f9ec:	4210      	tst	r0, r2
    f9ee:	d1f7      	bne.n	f9e0 <memchr+0x18>
    f9f0:	2c03      	cmp	r4, #3
    f9f2:	d80e      	bhi.n	fa12 <memchr+0x4a>
    f9f4:	2c00      	cmp	r4, #0
    f9f6:	d00a      	beq.n	fa0e <memchr+0x46>
    f9f8:	7803      	ldrb	r3, [r0, #0]
    f9fa:	42ab      	cmp	r3, r5
    f9fc:	d008      	beq.n	fa10 <memchr+0x48>
    f9fe:	1904      	adds	r4, r0, r4
    fa00:	e002      	b.n	fa08 <memchr+0x40>
    fa02:	7803      	ldrb	r3, [r0, #0]
    fa04:	42ab      	cmp	r3, r5
    fa06:	d003      	beq.n	fa10 <memchr+0x48>
    fa08:	3001      	adds	r0, #1
    fa0a:	4284      	cmp	r4, r0
    fa0c:	d1f9      	bne.n	fa02 <memchr+0x3a>
    fa0e:	2000      	movs	r0, #0
    fa10:	bd70      	pop	{r4, r5, r6, pc}
    fa12:	22ff      	movs	r2, #255	; 0xff
    fa14:	060b      	lsls	r3, r1, #24
    fa16:	0c1b      	lsrs	r3, r3, #16
    fa18:	4011      	ands	r1, r2
    fa1a:	4319      	orrs	r1, r3
    fa1c:	040b      	lsls	r3, r1, #16
    fa1e:	4e08      	ldr	r6, [pc, #32]	; (fa40 <memchr+0x78>)
    fa20:	4319      	orrs	r1, r3
    fa22:	6803      	ldr	r3, [r0, #0]
    fa24:	4a07      	ldr	r2, [pc, #28]	; (fa44 <memchr+0x7c>)
    fa26:	404b      	eors	r3, r1
    fa28:	189a      	adds	r2, r3, r2
    fa2a:	439a      	bics	r2, r3
    fa2c:	4232      	tst	r2, r6
    fa2e:	d1e3      	bne.n	f9f8 <memchr+0x30>
    fa30:	3c04      	subs	r4, #4
    fa32:	3004      	adds	r0, #4
    fa34:	2c03      	cmp	r4, #3
    fa36:	d8f4      	bhi.n	fa22 <memchr+0x5a>
    fa38:	e7dc      	b.n	f9f4 <memchr+0x2c>
    fa3a:	0014      	movs	r4, r2
    fa3c:	e7d8      	b.n	f9f0 <memchr+0x28>
    fa3e:	46c0      	nop			; (mov r8, r8)
    fa40:	80808080 	.word	0x80808080
    fa44:	fefefeff 	.word	0xfefefeff

0000fa48 <memmove>:
    fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa4a:	4288      	cmp	r0, r1
    fa4c:	d90a      	bls.n	fa64 <memmove+0x1c>
    fa4e:	188b      	adds	r3, r1, r2
    fa50:	4298      	cmp	r0, r3
    fa52:	d207      	bcs.n	fa64 <memmove+0x1c>
    fa54:	1e53      	subs	r3, r2, #1
    fa56:	2a00      	cmp	r2, #0
    fa58:	d003      	beq.n	fa62 <memmove+0x1a>
    fa5a:	5cca      	ldrb	r2, [r1, r3]
    fa5c:	54c2      	strb	r2, [r0, r3]
    fa5e:	3b01      	subs	r3, #1
    fa60:	d2fb      	bcs.n	fa5a <memmove+0x12>
    fa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa64:	0005      	movs	r5, r0
    fa66:	2a0f      	cmp	r2, #15
    fa68:	d808      	bhi.n	fa7c <memmove+0x34>
    fa6a:	2a00      	cmp	r2, #0
    fa6c:	d0f9      	beq.n	fa62 <memmove+0x1a>
    fa6e:	2300      	movs	r3, #0
    fa70:	5ccc      	ldrb	r4, [r1, r3]
    fa72:	54ec      	strb	r4, [r5, r3]
    fa74:	3301      	adds	r3, #1
    fa76:	4293      	cmp	r3, r2
    fa78:	d1fa      	bne.n	fa70 <memmove+0x28>
    fa7a:	e7f2      	b.n	fa62 <memmove+0x1a>
    fa7c:	000b      	movs	r3, r1
    fa7e:	4303      	orrs	r3, r0
    fa80:	079b      	lsls	r3, r3, #30
    fa82:	d12d      	bne.n	fae0 <memmove+0x98>
    fa84:	0015      	movs	r5, r2
    fa86:	000c      	movs	r4, r1
    fa88:	0003      	movs	r3, r0
    fa8a:	3d10      	subs	r5, #16
    fa8c:	092f      	lsrs	r7, r5, #4
    fa8e:	3701      	adds	r7, #1
    fa90:	013f      	lsls	r7, r7, #4
    fa92:	19c7      	adds	r7, r0, r7
    fa94:	6826      	ldr	r6, [r4, #0]
    fa96:	601e      	str	r6, [r3, #0]
    fa98:	6866      	ldr	r6, [r4, #4]
    fa9a:	605e      	str	r6, [r3, #4]
    fa9c:	68a6      	ldr	r6, [r4, #8]
    fa9e:	609e      	str	r6, [r3, #8]
    faa0:	68e6      	ldr	r6, [r4, #12]
    faa2:	3410      	adds	r4, #16
    faa4:	60de      	str	r6, [r3, #12]
    faa6:	3310      	adds	r3, #16
    faa8:	429f      	cmp	r7, r3
    faaa:	d1f3      	bne.n	fa94 <memmove+0x4c>
    faac:	240f      	movs	r4, #15
    faae:	43a5      	bics	r5, r4
    fab0:	3510      	adds	r5, #16
    fab2:	1949      	adds	r1, r1, r5
    fab4:	4014      	ands	r4, r2
    fab6:	1945      	adds	r5, r0, r5
    fab8:	2c03      	cmp	r4, #3
    faba:	d913      	bls.n	fae4 <memmove+0x9c>
    fabc:	2300      	movs	r3, #0
    fabe:	1f27      	subs	r7, r4, #4
    fac0:	08be      	lsrs	r6, r7, #2
    fac2:	3601      	adds	r6, #1
    fac4:	00b6      	lsls	r6, r6, #2
    fac6:	58cc      	ldr	r4, [r1, r3]
    fac8:	50ec      	str	r4, [r5, r3]
    faca:	3304      	adds	r3, #4
    facc:	42b3      	cmp	r3, r6
    face:	d1fa      	bne.n	fac6 <memmove+0x7e>
    fad0:	2603      	movs	r6, #3
    fad2:	43b7      	bics	r7, r6
    fad4:	1d3c      	adds	r4, r7, #4
    fad6:	1909      	adds	r1, r1, r4
    fad8:	192d      	adds	r5, r5, r4
    fada:	4032      	ands	r2, r6
    fadc:	d1c7      	bne.n	fa6e <memmove+0x26>
    fade:	e7c0      	b.n	fa62 <memmove+0x1a>
    fae0:	0005      	movs	r5, r0
    fae2:	e7c4      	b.n	fa6e <memmove+0x26>
    fae4:	0022      	movs	r2, r4
    fae6:	e7c0      	b.n	fa6a <memmove+0x22>

0000fae8 <__malloc_lock>:
    fae8:	b510      	push	{r4, lr}
    faea:	4802      	ldr	r0, [pc, #8]	; (faf4 <__malloc_lock+0xc>)
    faec:	f7ff fc3c 	bl	f368 <__retarget_lock_acquire_recursive>
    faf0:	bd10      	pop	{r4, pc}
    faf2:	46c0      	nop			; (mov r8, r8)
    faf4:	20001578 	.word	0x20001578

0000faf8 <__malloc_unlock>:
    faf8:	b510      	push	{r4, lr}
    fafa:	4802      	ldr	r0, [pc, #8]	; (fb04 <__malloc_unlock+0xc>)
    fafc:	f7ff fc36 	bl	f36c <__retarget_lock_release_recursive>
    fb00:	bd10      	pop	{r4, pc}
    fb02:	46c0      	nop			; (mov r8, r8)
    fb04:	20001578 	.word	0x20001578

0000fb08 <_Balloc>:
    fb08:	b570      	push	{r4, r5, r6, lr}
    fb0a:	0004      	movs	r4, r0
    fb0c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    fb0e:	000d      	movs	r5, r1
    fb10:	2800      	cmp	r0, #0
    fb12:	d00a      	beq.n	fb2a <_Balloc+0x22>
    fb14:	00ab      	lsls	r3, r5, #2
    fb16:	18c3      	adds	r3, r0, r3
    fb18:	6818      	ldr	r0, [r3, #0]
    fb1a:	2800      	cmp	r0, #0
    fb1c:	d00f      	beq.n	fb3e <_Balloc+0x36>
    fb1e:	6802      	ldr	r2, [r0, #0]
    fb20:	601a      	str	r2, [r3, #0]
    fb22:	2300      	movs	r3, #0
    fb24:	6103      	str	r3, [r0, #16]
    fb26:	60c3      	str	r3, [r0, #12]
    fb28:	bd70      	pop	{r4, r5, r6, pc}
    fb2a:	2221      	movs	r2, #33	; 0x21
    fb2c:	2104      	movs	r1, #4
    fb2e:	0020      	movs	r0, r4
    fb30:	f000 fdb0 	bl	10694 <_calloc_r>
    fb34:	64e0      	str	r0, [r4, #76]	; 0x4c
    fb36:	2800      	cmp	r0, #0
    fb38:	d1ec      	bne.n	fb14 <_Balloc+0xc>
    fb3a:	2000      	movs	r0, #0
    fb3c:	e7f4      	b.n	fb28 <_Balloc+0x20>
    fb3e:	2601      	movs	r6, #1
    fb40:	40ae      	lsls	r6, r5
    fb42:	1d72      	adds	r2, r6, #5
    fb44:	0092      	lsls	r2, r2, #2
    fb46:	2101      	movs	r1, #1
    fb48:	0020      	movs	r0, r4
    fb4a:	f000 fda3 	bl	10694 <_calloc_r>
    fb4e:	2800      	cmp	r0, #0
    fb50:	d0f3      	beq.n	fb3a <_Balloc+0x32>
    fb52:	6045      	str	r5, [r0, #4]
    fb54:	6086      	str	r6, [r0, #8]
    fb56:	e7e4      	b.n	fb22 <_Balloc+0x1a>

0000fb58 <_Bfree>:
    fb58:	2900      	cmp	r1, #0
    fb5a:	d006      	beq.n	fb6a <_Bfree+0x12>
    fb5c:	684b      	ldr	r3, [r1, #4]
    fb5e:	009a      	lsls	r2, r3, #2
    fb60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    fb62:	189b      	adds	r3, r3, r2
    fb64:	681a      	ldr	r2, [r3, #0]
    fb66:	600a      	str	r2, [r1, #0]
    fb68:	6019      	str	r1, [r3, #0]
    fb6a:	4770      	bx	lr

0000fb6c <__multadd>:
    fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb6e:	46ce      	mov	lr, r9
    fb70:	4647      	mov	r7, r8
    fb72:	4681      	mov	r9, r0
    fb74:	0008      	movs	r0, r1
    fb76:	b580      	push	{r7, lr}
    fb78:	000d      	movs	r5, r1
    fb7a:	690c      	ldr	r4, [r1, #16]
    fb7c:	001f      	movs	r7, r3
    fb7e:	2100      	movs	r1, #0
    fb80:	3014      	adds	r0, #20
    fb82:	6803      	ldr	r3, [r0, #0]
    fb84:	3101      	adds	r1, #1
    fb86:	041e      	lsls	r6, r3, #16
    fb88:	0c36      	lsrs	r6, r6, #16
    fb8a:	4356      	muls	r6, r2
    fb8c:	0c1b      	lsrs	r3, r3, #16
    fb8e:	4353      	muls	r3, r2
    fb90:	19f6      	adds	r6, r6, r7
    fb92:	0c37      	lsrs	r7, r6, #16
    fb94:	19db      	adds	r3, r3, r7
    fb96:	0436      	lsls	r6, r6, #16
    fb98:	0c1f      	lsrs	r7, r3, #16
    fb9a:	0c36      	lsrs	r6, r6, #16
    fb9c:	041b      	lsls	r3, r3, #16
    fb9e:	199b      	adds	r3, r3, r6
    fba0:	c008      	stmia	r0!, {r3}
    fba2:	428c      	cmp	r4, r1
    fba4:	dced      	bgt.n	fb82 <__multadd+0x16>
    fba6:	2f00      	cmp	r7, #0
    fba8:	d008      	beq.n	fbbc <__multadd+0x50>
    fbaa:	68ab      	ldr	r3, [r5, #8]
    fbac:	429c      	cmp	r4, r3
    fbae:	da0a      	bge.n	fbc6 <__multadd+0x5a>
    fbb0:	1d23      	adds	r3, r4, #4
    fbb2:	009b      	lsls	r3, r3, #2
    fbb4:	18eb      	adds	r3, r5, r3
    fbb6:	3401      	adds	r4, #1
    fbb8:	605f      	str	r7, [r3, #4]
    fbba:	612c      	str	r4, [r5, #16]
    fbbc:	0028      	movs	r0, r5
    fbbe:	bc0c      	pop	{r2, r3}
    fbc0:	4690      	mov	r8, r2
    fbc2:	4699      	mov	r9, r3
    fbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbc6:	686b      	ldr	r3, [r5, #4]
    fbc8:	4648      	mov	r0, r9
    fbca:	1c59      	adds	r1, r3, #1
    fbcc:	f7ff ff9c 	bl	fb08 <_Balloc>
    fbd0:	0029      	movs	r1, r5
    fbd2:	692b      	ldr	r3, [r5, #16]
    fbd4:	4680      	mov	r8, r0
    fbd6:	1c9a      	adds	r2, r3, #2
    fbd8:	0092      	lsls	r2, r2, #2
    fbda:	310c      	adds	r1, #12
    fbdc:	300c      	adds	r0, #12
    fbde:	f7fc f999 	bl	bf14 <memcpy>
    fbe2:	686b      	ldr	r3, [r5, #4]
    fbe4:	009a      	lsls	r2, r3, #2
    fbe6:	464b      	mov	r3, r9
    fbe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fbea:	189b      	adds	r3, r3, r2
    fbec:	681a      	ldr	r2, [r3, #0]
    fbee:	602a      	str	r2, [r5, #0]
    fbf0:	601d      	str	r5, [r3, #0]
    fbf2:	4645      	mov	r5, r8
    fbf4:	e7dc      	b.n	fbb0 <__multadd+0x44>
    fbf6:	46c0      	nop			; (mov r8, r8)

0000fbf8 <__hi0bits>:
    fbf8:	0003      	movs	r3, r0
    fbfa:	0c02      	lsrs	r2, r0, #16
    fbfc:	2000      	movs	r0, #0
    fbfe:	2a00      	cmp	r2, #0
    fc00:	d101      	bne.n	fc06 <__hi0bits+0xe>
    fc02:	041b      	lsls	r3, r3, #16
    fc04:	3010      	adds	r0, #16
    fc06:	0e1a      	lsrs	r2, r3, #24
    fc08:	d101      	bne.n	fc0e <__hi0bits+0x16>
    fc0a:	3008      	adds	r0, #8
    fc0c:	021b      	lsls	r3, r3, #8
    fc0e:	0f1a      	lsrs	r2, r3, #28
    fc10:	d101      	bne.n	fc16 <__hi0bits+0x1e>
    fc12:	3004      	adds	r0, #4
    fc14:	011b      	lsls	r3, r3, #4
    fc16:	0f9a      	lsrs	r2, r3, #30
    fc18:	d101      	bne.n	fc1e <__hi0bits+0x26>
    fc1a:	3002      	adds	r0, #2
    fc1c:	009b      	lsls	r3, r3, #2
    fc1e:	2b00      	cmp	r3, #0
    fc20:	db03      	blt.n	fc2a <__hi0bits+0x32>
    fc22:	3001      	adds	r0, #1
    fc24:	005b      	lsls	r3, r3, #1
    fc26:	d400      	bmi.n	fc2a <__hi0bits+0x32>
    fc28:	2020      	movs	r0, #32
    fc2a:	4770      	bx	lr

0000fc2c <__lo0bits>:
    fc2c:	6803      	ldr	r3, [r0, #0]
    fc2e:	075a      	lsls	r2, r3, #29
    fc30:	d009      	beq.n	fc46 <__lo0bits+0x1a>
    fc32:	2200      	movs	r2, #0
    fc34:	07d9      	lsls	r1, r3, #31
    fc36:	d404      	bmi.n	fc42 <__lo0bits+0x16>
    fc38:	079a      	lsls	r2, r3, #30
    fc3a:	d420      	bmi.n	fc7e <__lo0bits+0x52>
    fc3c:	2202      	movs	r2, #2
    fc3e:	089b      	lsrs	r3, r3, #2
    fc40:	6003      	str	r3, [r0, #0]
    fc42:	0010      	movs	r0, r2
    fc44:	4770      	bx	lr
    fc46:	0419      	lsls	r1, r3, #16
    fc48:	2200      	movs	r2, #0
    fc4a:	2900      	cmp	r1, #0
    fc4c:	d101      	bne.n	fc52 <__lo0bits+0x26>
    fc4e:	0c1b      	lsrs	r3, r3, #16
    fc50:	3210      	adds	r2, #16
    fc52:	21ff      	movs	r1, #255	; 0xff
    fc54:	4219      	tst	r1, r3
    fc56:	d101      	bne.n	fc5c <__lo0bits+0x30>
    fc58:	3208      	adds	r2, #8
    fc5a:	0a1b      	lsrs	r3, r3, #8
    fc5c:	0719      	lsls	r1, r3, #28
    fc5e:	d101      	bne.n	fc64 <__lo0bits+0x38>
    fc60:	3204      	adds	r2, #4
    fc62:	091b      	lsrs	r3, r3, #4
    fc64:	0799      	lsls	r1, r3, #30
    fc66:	d101      	bne.n	fc6c <__lo0bits+0x40>
    fc68:	3202      	adds	r2, #2
    fc6a:	089b      	lsrs	r3, r3, #2
    fc6c:	07d9      	lsls	r1, r3, #31
    fc6e:	d404      	bmi.n	fc7a <__lo0bits+0x4e>
    fc70:	085b      	lsrs	r3, r3, #1
    fc72:	d101      	bne.n	fc78 <__lo0bits+0x4c>
    fc74:	2220      	movs	r2, #32
    fc76:	e7e4      	b.n	fc42 <__lo0bits+0x16>
    fc78:	3201      	adds	r2, #1
    fc7a:	6003      	str	r3, [r0, #0]
    fc7c:	e7e1      	b.n	fc42 <__lo0bits+0x16>
    fc7e:	085b      	lsrs	r3, r3, #1
    fc80:	6003      	str	r3, [r0, #0]
    fc82:	2201      	movs	r2, #1
    fc84:	e7dd      	b.n	fc42 <__lo0bits+0x16>
    fc86:	46c0      	nop			; (mov r8, r8)

0000fc88 <__i2b>:
    fc88:	b510      	push	{r4, lr}
    fc8a:	000c      	movs	r4, r1
    fc8c:	2101      	movs	r1, #1
    fc8e:	f7ff ff3b 	bl	fb08 <_Balloc>
    fc92:	2301      	movs	r3, #1
    fc94:	6144      	str	r4, [r0, #20]
    fc96:	6103      	str	r3, [r0, #16]
    fc98:	bd10      	pop	{r4, pc}
    fc9a:	46c0      	nop			; (mov r8, r8)

0000fc9c <__multiply>:
    fc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc9e:	4657      	mov	r7, sl
    fca0:	464e      	mov	r6, r9
    fca2:	4645      	mov	r5, r8
    fca4:	46de      	mov	lr, fp
    fca6:	b5e0      	push	{r5, r6, r7, lr}
    fca8:	6914      	ldr	r4, [r2, #16]
    fcaa:	690e      	ldr	r6, [r1, #16]
    fcac:	b085      	sub	sp, #20
    fcae:	000f      	movs	r7, r1
    fcb0:	0015      	movs	r5, r2
    fcb2:	42a6      	cmp	r6, r4
    fcb4:	da04      	bge.n	fcc0 <__multiply+0x24>
    fcb6:	0033      	movs	r3, r6
    fcb8:	0017      	movs	r7, r2
    fcba:	0026      	movs	r6, r4
    fcbc:	000d      	movs	r5, r1
    fcbe:	001c      	movs	r4, r3
    fcc0:	1933      	adds	r3, r6, r4
    fcc2:	4698      	mov	r8, r3
    fcc4:	68bb      	ldr	r3, [r7, #8]
    fcc6:	6879      	ldr	r1, [r7, #4]
    fcc8:	4598      	cmp	r8, r3
    fcca:	dd00      	ble.n	fcce <__multiply+0x32>
    fccc:	3101      	adds	r1, #1
    fcce:	f7ff ff1b 	bl	fb08 <_Balloc>
    fcd2:	2214      	movs	r2, #20
    fcd4:	0003      	movs	r3, r0
    fcd6:	4694      	mov	ip, r2
    fcd8:	4463      	add	r3, ip
    fcda:	469b      	mov	fp, r3
    fcdc:	4643      	mov	r3, r8
    fcde:	009b      	lsls	r3, r3, #2
    fce0:	445b      	add	r3, fp
    fce2:	0019      	movs	r1, r3
    fce4:	9302      	str	r3, [sp, #8]
    fce6:	9003      	str	r0, [sp, #12]
    fce8:	465b      	mov	r3, fp
    fcea:	2200      	movs	r2, #0
    fcec:	458b      	cmp	fp, r1
    fcee:	d203      	bcs.n	fcf8 <__multiply+0x5c>
    fcf0:	9902      	ldr	r1, [sp, #8]
    fcf2:	c304      	stmia	r3!, {r2}
    fcf4:	4299      	cmp	r1, r3
    fcf6:	d8fc      	bhi.n	fcf2 <__multiply+0x56>
    fcf8:	2314      	movs	r3, #20
    fcfa:	00a4      	lsls	r4, r4, #2
    fcfc:	469a      	mov	sl, r3
    fcfe:	3714      	adds	r7, #20
    fd00:	0023      	movs	r3, r4
    fd02:	46bc      	mov	ip, r7
    fd04:	44aa      	add	sl, r5
    fd06:	00b6      	lsls	r6, r6, #2
    fd08:	4453      	add	r3, sl
    fd0a:	9700      	str	r7, [sp, #0]
    fd0c:	44b4      	add	ip, r6
    fd0e:	9301      	str	r3, [sp, #4]
    fd10:	459a      	cmp	sl, r3
    fd12:	d24f      	bcs.n	fdb4 <__multiply+0x118>
    fd14:	4653      	mov	r3, sl
    fd16:	681b      	ldr	r3, [r3, #0]
    fd18:	041e      	lsls	r6, r3, #16
    fd1a:	0c36      	lsrs	r6, r6, #16
    fd1c:	d020      	beq.n	fd60 <__multiply+0xc4>
    fd1e:	465c      	mov	r4, fp
    fd20:	2700      	movs	r7, #0
    fd22:	9d00      	ldr	r5, [sp, #0]
    fd24:	0021      	movs	r1, r4
    fd26:	cc08      	ldmia	r4!, {r3}
    fd28:	cd04      	ldmia	r5!, {r2}
    fd2a:	4699      	mov	r9, r3
    fd2c:	4648      	mov	r0, r9
    fd2e:	0413      	lsls	r3, r2, #16
    fd30:	0c1b      	lsrs	r3, r3, #16
    fd32:	4373      	muls	r3, r6
    fd34:	0400      	lsls	r0, r0, #16
    fd36:	0c00      	lsrs	r0, r0, #16
    fd38:	181b      	adds	r3, r3, r0
    fd3a:	19d8      	adds	r0, r3, r7
    fd3c:	0c13      	lsrs	r3, r2, #16
    fd3e:	464a      	mov	r2, r9
    fd40:	4373      	muls	r3, r6
    fd42:	0c12      	lsrs	r2, r2, #16
    fd44:	189b      	adds	r3, r3, r2
    fd46:	0c02      	lsrs	r2, r0, #16
    fd48:	189b      	adds	r3, r3, r2
    fd4a:	0402      	lsls	r2, r0, #16
    fd4c:	0c1f      	lsrs	r7, r3, #16
    fd4e:	0c12      	lsrs	r2, r2, #16
    fd50:	041b      	lsls	r3, r3, #16
    fd52:	4313      	orrs	r3, r2
    fd54:	600b      	str	r3, [r1, #0]
    fd56:	45ac      	cmp	ip, r5
    fd58:	d8e4      	bhi.n	fd24 <__multiply+0x88>
    fd5a:	4653      	mov	r3, sl
    fd5c:	6027      	str	r7, [r4, #0]
    fd5e:	681b      	ldr	r3, [r3, #0]
    fd60:	0c1e      	lsrs	r6, r3, #16
    fd62:	d020      	beq.n	fda6 <__multiply+0x10a>
    fd64:	465b      	mov	r3, fp
    fd66:	2100      	movs	r1, #0
    fd68:	681b      	ldr	r3, [r3, #0]
    fd6a:	465c      	mov	r4, fp
    fd6c:	0018      	movs	r0, r3
    fd6e:	000f      	movs	r7, r1
    fd70:	4662      	mov	r2, ip
    fd72:	9d00      	ldr	r5, [sp, #0]
    fd74:	8829      	ldrh	r1, [r5, #0]
    fd76:	0c00      	lsrs	r0, r0, #16
    fd78:	4371      	muls	r1, r6
    fd7a:	1809      	adds	r1, r1, r0
    fd7c:	19c9      	adds	r1, r1, r7
    fd7e:	041b      	lsls	r3, r3, #16
    fd80:	0408      	lsls	r0, r1, #16
    fd82:	0c1b      	lsrs	r3, r3, #16
    fd84:	4303      	orrs	r3, r0
    fd86:	6023      	str	r3, [r4, #0]
    fd88:	cd08      	ldmia	r5!, {r3}
    fd8a:	6860      	ldr	r0, [r4, #4]
    fd8c:	0c1b      	lsrs	r3, r3, #16
    fd8e:	4373      	muls	r3, r6
    fd90:	0407      	lsls	r7, r0, #16
    fd92:	0c3f      	lsrs	r7, r7, #16
    fd94:	19db      	adds	r3, r3, r7
    fd96:	0c09      	lsrs	r1, r1, #16
    fd98:	185b      	adds	r3, r3, r1
    fd9a:	0c1f      	lsrs	r7, r3, #16
    fd9c:	3404      	adds	r4, #4
    fd9e:	42aa      	cmp	r2, r5
    fda0:	d8e8      	bhi.n	fd74 <__multiply+0xd8>
    fda2:	4694      	mov	ip, r2
    fda4:	6023      	str	r3, [r4, #0]
    fda6:	2304      	movs	r3, #4
    fda8:	4699      	mov	r9, r3
    fdaa:	9b01      	ldr	r3, [sp, #4]
    fdac:	44ca      	add	sl, r9
    fdae:	44cb      	add	fp, r9
    fdb0:	4553      	cmp	r3, sl
    fdb2:	d8af      	bhi.n	fd14 <__multiply+0x78>
    fdb4:	4643      	mov	r3, r8
    fdb6:	2b00      	cmp	r3, #0
    fdb8:	dd0e      	ble.n	fdd8 <__multiply+0x13c>
    fdba:	9b02      	ldr	r3, [sp, #8]
    fdbc:	3b04      	subs	r3, #4
    fdbe:	681a      	ldr	r2, [r3, #0]
    fdc0:	2a00      	cmp	r2, #0
    fdc2:	d109      	bne.n	fdd8 <__multiply+0x13c>
    fdc4:	4642      	mov	r2, r8
    fdc6:	e003      	b.n	fdd0 <__multiply+0x134>
    fdc8:	3b04      	subs	r3, #4
    fdca:	6819      	ldr	r1, [r3, #0]
    fdcc:	2900      	cmp	r1, #0
    fdce:	d102      	bne.n	fdd6 <__multiply+0x13a>
    fdd0:	3a01      	subs	r2, #1
    fdd2:	2a00      	cmp	r2, #0
    fdd4:	d1f8      	bne.n	fdc8 <__multiply+0x12c>
    fdd6:	4690      	mov	r8, r2
    fdd8:	9b03      	ldr	r3, [sp, #12]
    fdda:	4642      	mov	r2, r8
    fddc:	0018      	movs	r0, r3
    fdde:	611a      	str	r2, [r3, #16]
    fde0:	b005      	add	sp, #20
    fde2:	bc3c      	pop	{r2, r3, r4, r5}
    fde4:	4690      	mov	r8, r2
    fde6:	4699      	mov	r9, r3
    fde8:	46a2      	mov	sl, r4
    fdea:	46ab      	mov	fp, r5
    fdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdee:	46c0      	nop			; (mov r8, r8)

0000fdf0 <__pow5mult>:
    fdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdf2:	4647      	mov	r7, r8
    fdf4:	46ce      	mov	lr, r9
    fdf6:	2303      	movs	r3, #3
    fdf8:	b580      	push	{r7, lr}
    fdfa:	4680      	mov	r8, r0
    fdfc:	000f      	movs	r7, r1
    fdfe:	0014      	movs	r4, r2
    fe00:	4013      	ands	r3, r2
    fe02:	d13a      	bne.n	fe7a <__pow5mult+0x8a>
    fe04:	10a4      	asrs	r4, r4, #2
    fe06:	003e      	movs	r6, r7
    fe08:	2c00      	cmp	r4, #0
    fe0a:	d025      	beq.n	fe58 <__pow5mult+0x68>
    fe0c:	4643      	mov	r3, r8
    fe0e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    fe10:	2d00      	cmp	r5, #0
    fe12:	d03b      	beq.n	fe8c <__pow5mult+0x9c>
    fe14:	003e      	movs	r6, r7
    fe16:	2300      	movs	r3, #0
    fe18:	2701      	movs	r7, #1
    fe1a:	4699      	mov	r9, r3
    fe1c:	4227      	tst	r7, r4
    fe1e:	d107      	bne.n	fe30 <__pow5mult+0x40>
    fe20:	1064      	asrs	r4, r4, #1
    fe22:	d019      	beq.n	fe58 <__pow5mult+0x68>
    fe24:	6828      	ldr	r0, [r5, #0]
    fe26:	2800      	cmp	r0, #0
    fe28:	d01b      	beq.n	fe62 <__pow5mult+0x72>
    fe2a:	0005      	movs	r5, r0
    fe2c:	4227      	tst	r7, r4
    fe2e:	d0f7      	beq.n	fe20 <__pow5mult+0x30>
    fe30:	002a      	movs	r2, r5
    fe32:	0031      	movs	r1, r6
    fe34:	4640      	mov	r0, r8
    fe36:	f7ff ff31 	bl	fc9c <__multiply>
    fe3a:	2e00      	cmp	r6, #0
    fe3c:	d01b      	beq.n	fe76 <__pow5mult+0x86>
    fe3e:	4642      	mov	r2, r8
    fe40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    fe42:	6873      	ldr	r3, [r6, #4]
    fe44:	4694      	mov	ip, r2
    fe46:	009b      	lsls	r3, r3, #2
    fe48:	4463      	add	r3, ip
    fe4a:	681a      	ldr	r2, [r3, #0]
    fe4c:	1064      	asrs	r4, r4, #1
    fe4e:	6032      	str	r2, [r6, #0]
    fe50:	601e      	str	r6, [r3, #0]
    fe52:	0006      	movs	r6, r0
    fe54:	2c00      	cmp	r4, #0
    fe56:	d1e5      	bne.n	fe24 <__pow5mult+0x34>
    fe58:	0030      	movs	r0, r6
    fe5a:	bc0c      	pop	{r2, r3}
    fe5c:	4690      	mov	r8, r2
    fe5e:	4699      	mov	r9, r3
    fe60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe62:	002a      	movs	r2, r5
    fe64:	0029      	movs	r1, r5
    fe66:	4640      	mov	r0, r8
    fe68:	f7ff ff18 	bl	fc9c <__multiply>
    fe6c:	464b      	mov	r3, r9
    fe6e:	6028      	str	r0, [r5, #0]
    fe70:	6003      	str	r3, [r0, #0]
    fe72:	0005      	movs	r5, r0
    fe74:	e7da      	b.n	fe2c <__pow5mult+0x3c>
    fe76:	0006      	movs	r6, r0
    fe78:	e7d2      	b.n	fe20 <__pow5mult+0x30>
    fe7a:	4a0b      	ldr	r2, [pc, #44]	; (fea8 <__pow5mult+0xb8>)
    fe7c:	3b01      	subs	r3, #1
    fe7e:	009b      	lsls	r3, r3, #2
    fe80:	589a      	ldr	r2, [r3, r2]
    fe82:	2300      	movs	r3, #0
    fe84:	f7ff fe72 	bl	fb6c <__multadd>
    fe88:	0007      	movs	r7, r0
    fe8a:	e7bb      	b.n	fe04 <__pow5mult+0x14>
    fe8c:	2101      	movs	r1, #1
    fe8e:	4640      	mov	r0, r8
    fe90:	f7ff fe3a 	bl	fb08 <_Balloc>
    fe94:	4b05      	ldr	r3, [pc, #20]	; (feac <__pow5mult+0xbc>)
    fe96:	0005      	movs	r5, r0
    fe98:	6143      	str	r3, [r0, #20]
    fe9a:	2301      	movs	r3, #1
    fe9c:	6103      	str	r3, [r0, #16]
    fe9e:	4643      	mov	r3, r8
    fea0:	6498      	str	r0, [r3, #72]	; 0x48
    fea2:	2300      	movs	r3, #0
    fea4:	6003      	str	r3, [r0, #0]
    fea6:	e7b5      	b.n	fe14 <__pow5mult+0x24>
    fea8:	000115b0 	.word	0x000115b0
    feac:	00000271 	.word	0x00000271

0000feb0 <__lshift>:
    feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    feb2:	464e      	mov	r6, r9
    feb4:	4645      	mov	r5, r8
    feb6:	46de      	mov	lr, fp
    feb8:	4657      	mov	r7, sl
    feba:	b5e0      	push	{r5, r6, r7, lr}
    febc:	000e      	movs	r6, r1
    febe:	6933      	ldr	r3, [r6, #16]
    fec0:	1154      	asrs	r4, r2, #5
    fec2:	4698      	mov	r8, r3
    fec4:	44a0      	add	r8, r4
    fec6:	4643      	mov	r3, r8
    fec8:	1c5d      	adds	r5, r3, #1
    feca:	68b3      	ldr	r3, [r6, #8]
    fecc:	4683      	mov	fp, r0
    fece:	4691      	mov	r9, r2
    fed0:	6849      	ldr	r1, [r1, #4]
    fed2:	429d      	cmp	r5, r3
    fed4:	dd03      	ble.n	fede <__lshift+0x2e>
    fed6:	3101      	adds	r1, #1
    fed8:	005b      	lsls	r3, r3, #1
    feda:	429d      	cmp	r5, r3
    fedc:	dcfb      	bgt.n	fed6 <__lshift+0x26>
    fede:	4658      	mov	r0, fp
    fee0:	f7ff fe12 	bl	fb08 <_Balloc>
    fee4:	0003      	movs	r3, r0
    fee6:	4684      	mov	ip, r0
    fee8:	3314      	adds	r3, #20
    feea:	2c00      	cmp	r4, #0
    feec:	dd06      	ble.n	fefc <__lshift+0x4c>
    feee:	2100      	movs	r1, #0
    fef0:	00a4      	lsls	r4, r4, #2
    fef2:	001a      	movs	r2, r3
    fef4:	191b      	adds	r3, r3, r4
    fef6:	c202      	stmia	r2!, {r1}
    fef8:	4293      	cmp	r3, r2
    fefa:	d1fc      	bne.n	fef6 <__lshift+0x46>
    fefc:	6932      	ldr	r2, [r6, #16]
    fefe:	4648      	mov	r0, r9
    ff00:	0097      	lsls	r7, r2, #2
    ff02:	0031      	movs	r1, r6
    ff04:	221f      	movs	r2, #31
    ff06:	3114      	adds	r1, #20
    ff08:	4010      	ands	r0, r2
    ff0a:	19cf      	adds	r7, r1, r7
    ff0c:	4681      	mov	r9, r0
    ff0e:	2800      	cmp	r0, #0
    ff10:	d025      	beq.n	ff5e <__lshift+0xae>
    ff12:	2220      	movs	r2, #32
    ff14:	1a12      	subs	r2, r2, r0
    ff16:	4692      	mov	sl, r2
    ff18:	2200      	movs	r2, #0
    ff1a:	4648      	mov	r0, r9
    ff1c:	680c      	ldr	r4, [r1, #0]
    ff1e:	4084      	lsls	r4, r0
    ff20:	4650      	mov	r0, sl
    ff22:	4314      	orrs	r4, r2
    ff24:	601c      	str	r4, [r3, #0]
    ff26:	c904      	ldmia	r1!, {r2}
    ff28:	3304      	adds	r3, #4
    ff2a:	40c2      	lsrs	r2, r0
    ff2c:	428f      	cmp	r7, r1
    ff2e:	d8f4      	bhi.n	ff1a <__lshift+0x6a>
    ff30:	601a      	str	r2, [r3, #0]
    ff32:	2a00      	cmp	r2, #0
    ff34:	d001      	beq.n	ff3a <__lshift+0x8a>
    ff36:	4645      	mov	r5, r8
    ff38:	3502      	adds	r5, #2
    ff3a:	4663      	mov	r3, ip
    ff3c:	3d01      	subs	r5, #1
    ff3e:	611d      	str	r5, [r3, #16]
    ff40:	6873      	ldr	r3, [r6, #4]
    ff42:	4660      	mov	r0, ip
    ff44:	009a      	lsls	r2, r3, #2
    ff46:	465b      	mov	r3, fp
    ff48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ff4a:	189b      	adds	r3, r3, r2
    ff4c:	681a      	ldr	r2, [r3, #0]
    ff4e:	6032      	str	r2, [r6, #0]
    ff50:	601e      	str	r6, [r3, #0]
    ff52:	bc3c      	pop	{r2, r3, r4, r5}
    ff54:	4690      	mov	r8, r2
    ff56:	4699      	mov	r9, r3
    ff58:	46a2      	mov	sl, r4
    ff5a:	46ab      	mov	fp, r5
    ff5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff5e:	c904      	ldmia	r1!, {r2}
    ff60:	c304      	stmia	r3!, {r2}
    ff62:	428f      	cmp	r7, r1
    ff64:	d9e9      	bls.n	ff3a <__lshift+0x8a>
    ff66:	c904      	ldmia	r1!, {r2}
    ff68:	c304      	stmia	r3!, {r2}
    ff6a:	428f      	cmp	r7, r1
    ff6c:	d8f7      	bhi.n	ff5e <__lshift+0xae>
    ff6e:	e7e4      	b.n	ff3a <__lshift+0x8a>

0000ff70 <__mcmp>:
    ff70:	690a      	ldr	r2, [r1, #16]
    ff72:	6903      	ldr	r3, [r0, #16]
    ff74:	b530      	push	{r4, r5, lr}
    ff76:	0005      	movs	r5, r0
    ff78:	1a98      	subs	r0, r3, r2
    ff7a:	d111      	bne.n	ffa0 <__mcmp+0x30>
    ff7c:	0092      	lsls	r2, r2, #2
    ff7e:	3514      	adds	r5, #20
    ff80:	3114      	adds	r1, #20
    ff82:	18ab      	adds	r3, r5, r2
    ff84:	1889      	adds	r1, r1, r2
    ff86:	e001      	b.n	ff8c <__mcmp+0x1c>
    ff88:	429d      	cmp	r5, r3
    ff8a:	d209      	bcs.n	ffa0 <__mcmp+0x30>
    ff8c:	3b04      	subs	r3, #4
    ff8e:	3904      	subs	r1, #4
    ff90:	681c      	ldr	r4, [r3, #0]
    ff92:	680a      	ldr	r2, [r1, #0]
    ff94:	4294      	cmp	r4, r2
    ff96:	d0f7      	beq.n	ff88 <__mcmp+0x18>
    ff98:	4294      	cmp	r4, r2
    ff9a:	4180      	sbcs	r0, r0
    ff9c:	2201      	movs	r2, #1
    ff9e:	4310      	orrs	r0, r2
    ffa0:	bd30      	pop	{r4, r5, pc}
    ffa2:	46c0      	nop			; (mov r8, r8)

0000ffa4 <__mdiff>:
    ffa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffa6:	4645      	mov	r5, r8
    ffa8:	46de      	mov	lr, fp
    ffaa:	4657      	mov	r7, sl
    ffac:	464e      	mov	r6, r9
    ffae:	0014      	movs	r4, r2
    ffb0:	690b      	ldr	r3, [r1, #16]
    ffb2:	6912      	ldr	r2, [r2, #16]
    ffb4:	b5e0      	push	{r5, r6, r7, lr}
    ffb6:	4688      	mov	r8, r1
    ffb8:	1a9d      	subs	r5, r3, r2
    ffba:	d11a      	bne.n	fff2 <__mdiff+0x4e>
    ffbc:	000f      	movs	r7, r1
    ffbe:	2114      	movs	r1, #20
    ffc0:	468c      	mov	ip, r1
    ffc2:	0092      	lsls	r2, r2, #2
    ffc4:	3714      	adds	r7, #20
    ffc6:	44a4      	add	ip, r4
    ffc8:	18bb      	adds	r3, r7, r2
    ffca:	4462      	add	r2, ip
    ffcc:	e002      	b.n	ffd4 <__mdiff+0x30>
    ffce:	429f      	cmp	r7, r3
    ffd0:	d300      	bcc.n	ffd4 <__mdiff+0x30>
    ffd2:	e070      	b.n	100b6 <__mdiff+0x112>
    ffd4:	3b04      	subs	r3, #4
    ffd6:	3a04      	subs	r2, #4
    ffd8:	681e      	ldr	r6, [r3, #0]
    ffda:	6811      	ldr	r1, [r2, #0]
    ffdc:	428e      	cmp	r6, r1
    ffde:	d0f6      	beq.n	ffce <__mdiff+0x2a>
    ffe0:	d300      	bcc.n	ffe4 <__mdiff+0x40>
    ffe2:	e071      	b.n	100c8 <__mdiff+0x124>
    ffe4:	4643      	mov	r3, r8
    ffe6:	003e      	movs	r6, r7
    ffe8:	46a0      	mov	r8, r4
    ffea:	4667      	mov	r7, ip
    ffec:	001c      	movs	r4, r3
    ffee:	2501      	movs	r5, #1
    fff0:	e006      	b.n	10000 <__mdiff+0x5c>
    fff2:	2d00      	cmp	r5, #0
    fff4:	db6a      	blt.n	100cc <__mdiff+0x128>
    fff6:	4647      	mov	r7, r8
    fff8:	0026      	movs	r6, r4
    fffa:	2500      	movs	r5, #0
    fffc:	3714      	adds	r7, #20
    fffe:	3614      	adds	r6, #20
   10000:	4643      	mov	r3, r8
   10002:	6859      	ldr	r1, [r3, #4]
   10004:	f7ff fd80 	bl	fb08 <_Balloc>
   10008:	4643      	mov	r3, r8
   1000a:	4681      	mov	r9, r0
   1000c:	60c5      	str	r5, [r0, #12]
   1000e:	6918      	ldr	r0, [r3, #16]
   10010:	464d      	mov	r5, r9
   10012:	0083      	lsls	r3, r0, #2
   10014:	469c      	mov	ip, r3
   10016:	6923      	ldr	r3, [r4, #16]
   10018:	44bc      	add	ip, r7
   1001a:	009b      	lsls	r3, r3, #2
   1001c:	4698      	mov	r8, r3
   1001e:	2300      	movs	r3, #0
   10020:	44b0      	add	r8, r6
   10022:	3514      	adds	r5, #20
   10024:	469a      	mov	sl, r3
   10026:	e000      	b.n	1002a <__mdiff+0x86>
   10028:	0027      	movs	r7, r4
   1002a:	ce04      	ldmia	r6!, {r2}
   1002c:	003c      	movs	r4, r7
   1002e:	4693      	mov	fp, r2
   10030:	4659      	mov	r1, fp
   10032:	cc08      	ldmia	r4!, {r3}
   10034:	0409      	lsls	r1, r1, #16
   10036:	041a      	lsls	r2, r3, #16
   10038:	0c12      	lsrs	r2, r2, #16
   1003a:	4452      	add	r2, sl
   1003c:	0c09      	lsrs	r1, r1, #16
   1003e:	1a52      	subs	r2, r2, r1
   10040:	0c19      	lsrs	r1, r3, #16
   10042:	465b      	mov	r3, fp
   10044:	0c1b      	lsrs	r3, r3, #16
   10046:	1acb      	subs	r3, r1, r3
   10048:	1411      	asrs	r1, r2, #16
   1004a:	185b      	adds	r3, r3, r1
   1004c:	0412      	lsls	r2, r2, #16
   1004e:	1419      	asrs	r1, r3, #16
   10050:	0c12      	lsrs	r2, r2, #16
   10052:	041b      	lsls	r3, r3, #16
   10054:	468a      	mov	sl, r1
   10056:	4313      	orrs	r3, r2
   10058:	1d29      	adds	r1, r5, #4
   1005a:	602b      	str	r3, [r5, #0]
   1005c:	000d      	movs	r5, r1
   1005e:	45b0      	cmp	r8, r6
   10060:	d8e2      	bhi.n	10028 <__mdiff+0x84>
   10062:	45a4      	cmp	ip, r4
   10064:	d916      	bls.n	10094 <__mdiff+0xf0>
   10066:	cc08      	ldmia	r4!, {r3}
   10068:	041a      	lsls	r2, r3, #16
   1006a:	0c12      	lsrs	r2, r2, #16
   1006c:	4452      	add	r2, sl
   1006e:	1416      	asrs	r6, r2, #16
   10070:	0c1b      	lsrs	r3, r3, #16
   10072:	199b      	adds	r3, r3, r6
   10074:	0412      	lsls	r2, r2, #16
   10076:	141e      	asrs	r6, r3, #16
   10078:	0c12      	lsrs	r2, r2, #16
   1007a:	041b      	lsls	r3, r3, #16
   1007c:	4313      	orrs	r3, r2
   1007e:	46b2      	mov	sl, r6
   10080:	c508      	stmia	r5!, {r3}
   10082:	45a4      	cmp	ip, r4
   10084:	d8ef      	bhi.n	10066 <__mdiff+0xc2>
   10086:	4662      	mov	r2, ip
   10088:	2403      	movs	r4, #3
   1008a:	1bd2      	subs	r2, r2, r7
   1008c:	3a05      	subs	r2, #5
   1008e:	43a2      	bics	r2, r4
   10090:	3204      	adds	r2, #4
   10092:	1889      	adds	r1, r1, r2
   10094:	3904      	subs	r1, #4
   10096:	2b00      	cmp	r3, #0
   10098:	d104      	bne.n	100a4 <__mdiff+0x100>
   1009a:	3904      	subs	r1, #4
   1009c:	680b      	ldr	r3, [r1, #0]
   1009e:	3801      	subs	r0, #1
   100a0:	2b00      	cmp	r3, #0
   100a2:	d0fa      	beq.n	1009a <__mdiff+0xf6>
   100a4:	464b      	mov	r3, r9
   100a6:	6118      	str	r0, [r3, #16]
   100a8:	4648      	mov	r0, r9
   100aa:	bc3c      	pop	{r2, r3, r4, r5}
   100ac:	4690      	mov	r8, r2
   100ae:	4699      	mov	r9, r3
   100b0:	46a2      	mov	sl, r4
   100b2:	46ab      	mov	fp, r5
   100b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100b6:	2100      	movs	r1, #0
   100b8:	f7ff fd26 	bl	fb08 <_Balloc>
   100bc:	2301      	movs	r3, #1
   100be:	6103      	str	r3, [r0, #16]
   100c0:	2300      	movs	r3, #0
   100c2:	4681      	mov	r9, r0
   100c4:	6143      	str	r3, [r0, #20]
   100c6:	e7ef      	b.n	100a8 <__mdiff+0x104>
   100c8:	4666      	mov	r6, ip
   100ca:	e799      	b.n	10000 <__mdiff+0x5c>
   100cc:	0027      	movs	r7, r4
   100ce:	000e      	movs	r6, r1
   100d0:	46a0      	mov	r8, r4
   100d2:	3714      	adds	r7, #20
   100d4:	3614      	adds	r6, #20
   100d6:	000c      	movs	r4, r1
   100d8:	2501      	movs	r5, #1
   100da:	e791      	b.n	10000 <__mdiff+0x5c>

000100dc <__d2b>:
   100dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   100de:	2101      	movs	r1, #1
   100e0:	001c      	movs	r4, r3
   100e2:	b083      	sub	sp, #12
   100e4:	9e08      	ldr	r6, [sp, #32]
   100e6:	0015      	movs	r5, r2
   100e8:	f7ff fd0e 	bl	fb08 <_Balloc>
   100ec:	0323      	lsls	r3, r4, #12
   100ee:	0064      	lsls	r4, r4, #1
   100f0:	0007      	movs	r7, r0
   100f2:	0b1b      	lsrs	r3, r3, #12
   100f4:	0d64      	lsrs	r4, r4, #21
   100f6:	d002      	beq.n	100fe <__d2b+0x22>
   100f8:	2280      	movs	r2, #128	; 0x80
   100fa:	0352      	lsls	r2, r2, #13
   100fc:	4313      	orrs	r3, r2
   100fe:	9301      	str	r3, [sp, #4]
   10100:	2d00      	cmp	r5, #0
   10102:	d019      	beq.n	10138 <__d2b+0x5c>
   10104:	4668      	mov	r0, sp
   10106:	9500      	str	r5, [sp, #0]
   10108:	f7ff fd90 	bl	fc2c <__lo0bits>
   1010c:	2800      	cmp	r0, #0
   1010e:	d130      	bne.n	10172 <__d2b+0x96>
   10110:	9b00      	ldr	r3, [sp, #0]
   10112:	617b      	str	r3, [r7, #20]
   10114:	9b01      	ldr	r3, [sp, #4]
   10116:	61bb      	str	r3, [r7, #24]
   10118:	1e5a      	subs	r2, r3, #1
   1011a:	4193      	sbcs	r3, r2
   1011c:	1c5d      	adds	r5, r3, #1
   1011e:	613d      	str	r5, [r7, #16]
   10120:	2c00      	cmp	r4, #0
   10122:	d014      	beq.n	1014e <__d2b+0x72>
   10124:	4b19      	ldr	r3, [pc, #100]	; (1018c <__d2b+0xb0>)
   10126:	469c      	mov	ip, r3
   10128:	2335      	movs	r3, #53	; 0x35
   1012a:	4464      	add	r4, ip
   1012c:	1824      	adds	r4, r4, r0
   1012e:	1a18      	subs	r0, r3, r0
   10130:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10132:	6034      	str	r4, [r6, #0]
   10134:	6018      	str	r0, [r3, #0]
   10136:	e019      	b.n	1016c <__d2b+0x90>
   10138:	a801      	add	r0, sp, #4
   1013a:	f7ff fd77 	bl	fc2c <__lo0bits>
   1013e:	9b01      	ldr	r3, [sp, #4]
   10140:	3020      	adds	r0, #32
   10142:	617b      	str	r3, [r7, #20]
   10144:	2301      	movs	r3, #1
   10146:	2501      	movs	r5, #1
   10148:	613b      	str	r3, [r7, #16]
   1014a:	2c00      	cmp	r4, #0
   1014c:	d1ea      	bne.n	10124 <__d2b+0x48>
   1014e:	4b10      	ldr	r3, [pc, #64]	; (10190 <__d2b+0xb4>)
   10150:	469c      	mov	ip, r3
   10152:	4b10      	ldr	r3, [pc, #64]	; (10194 <__d2b+0xb8>)
   10154:	4460      	add	r0, ip
   10156:	18eb      	adds	r3, r5, r3
   10158:	009b      	lsls	r3, r3, #2
   1015a:	18fb      	adds	r3, r7, r3
   1015c:	6030      	str	r0, [r6, #0]
   1015e:	6958      	ldr	r0, [r3, #20]
   10160:	f7ff fd4a 	bl	fbf8 <__hi0bits>
   10164:	016b      	lsls	r3, r5, #5
   10166:	1a18      	subs	r0, r3, r0
   10168:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1016a:	6018      	str	r0, [r3, #0]
   1016c:	0038      	movs	r0, r7
   1016e:	b003      	add	sp, #12
   10170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10172:	9b01      	ldr	r3, [sp, #4]
   10174:	2220      	movs	r2, #32
   10176:	0019      	movs	r1, r3
   10178:	1a12      	subs	r2, r2, r0
   1017a:	4091      	lsls	r1, r2
   1017c:	000a      	movs	r2, r1
   1017e:	40c3      	lsrs	r3, r0
   10180:	9900      	ldr	r1, [sp, #0]
   10182:	9301      	str	r3, [sp, #4]
   10184:	430a      	orrs	r2, r1
   10186:	617a      	str	r2, [r7, #20]
   10188:	e7c5      	b.n	10116 <__d2b+0x3a>
   1018a:	46c0      	nop			; (mov r8, r8)
   1018c:	fffffbcd 	.word	0xfffffbcd
   10190:	fffffbce 	.word	0xfffffbce
   10194:	3fffffff 	.word	0x3fffffff

00010198 <_realloc_r>:
   10198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1019a:	464e      	mov	r6, r9
   1019c:	4645      	mov	r5, r8
   1019e:	46de      	mov	lr, fp
   101a0:	4657      	mov	r7, sl
   101a2:	b5e0      	push	{r5, r6, r7, lr}
   101a4:	b085      	sub	sp, #20
   101a6:	9001      	str	r0, [sp, #4]
   101a8:	000e      	movs	r6, r1
   101aa:	0015      	movs	r5, r2
   101ac:	2900      	cmp	r1, #0
   101ae:	d100      	bne.n	101b2 <_realloc_r+0x1a>
   101b0:	e09e      	b.n	102f0 <_realloc_r+0x158>
   101b2:	0037      	movs	r7, r6
   101b4:	9801      	ldr	r0, [sp, #4]
   101b6:	3f08      	subs	r7, #8
   101b8:	f7ff fc96 	bl	fae8 <__malloc_lock>
   101bc:	687a      	ldr	r2, [r7, #4]
   101be:	2303      	movs	r3, #3
   101c0:	0014      	movs	r4, r2
   101c2:	439c      	bics	r4, r3
   101c4:	002b      	movs	r3, r5
   101c6:	330b      	adds	r3, #11
   101c8:	46b9      	mov	r9, r7
   101ca:	2b16      	cmp	r3, #22
   101cc:	d847      	bhi.n	1025e <_realloc_r+0xc6>
   101ce:	2110      	movs	r1, #16
   101d0:	2310      	movs	r3, #16
   101d2:	4688      	mov	r8, r1
   101d4:	4545      	cmp	r5, r8
   101d6:	d846      	bhi.n	10266 <_realloc_r+0xce>
   101d8:	429c      	cmp	r4, r3
   101da:	da49      	bge.n	10270 <_realloc_r+0xd8>
   101dc:	49cc      	ldr	r1, [pc, #816]	; (10510 <_realloc_r+0x378>)
   101de:	1938      	adds	r0, r7, r4
   101e0:	468b      	mov	fp, r1
   101e2:	6889      	ldr	r1, [r1, #8]
   101e4:	9002      	str	r0, [sp, #8]
   101e6:	4288      	cmp	r0, r1
   101e8:	d100      	bne.n	101ec <_realloc_r+0x54>
   101ea:	e0c2      	b.n	10372 <_realloc_r+0x1da>
   101ec:	2101      	movs	r1, #1
   101ee:	468a      	mov	sl, r1
   101f0:	6840      	ldr	r0, [r0, #4]
   101f2:	0001      	movs	r1, r0
   101f4:	9003      	str	r0, [sp, #12]
   101f6:	4650      	mov	r0, sl
   101f8:	4381      	bics	r1, r0
   101fa:	468c      	mov	ip, r1
   101fc:	9902      	ldr	r1, [sp, #8]
   101fe:	468b      	mov	fp, r1
   10200:	44dc      	add	ip, fp
   10202:	4661      	mov	r1, ip
   10204:	6849      	ldr	r1, [r1, #4]
   10206:	4201      	tst	r1, r0
   10208:	d04d      	beq.n	102a6 <_realloc_r+0x10e>
   1020a:	4210      	tst	r0, r2
   1020c:	d100      	bne.n	10210 <_realloc_r+0x78>
   1020e:	e0a2      	b.n	10356 <_realloc_r+0x1be>
   10210:	0029      	movs	r1, r5
   10212:	9801      	ldr	r0, [sp, #4]
   10214:	f7ff f924 	bl	f460 <_malloc_r>
   10218:	1e05      	subs	r5, r0, #0
   1021a:	d039      	beq.n	10290 <_realloc_r+0xf8>
   1021c:	2301      	movs	r3, #1
   1021e:	0002      	movs	r2, r0
   10220:	6879      	ldr	r1, [r7, #4]
   10222:	3a08      	subs	r2, #8
   10224:	4399      	bics	r1, r3
   10226:	187f      	adds	r7, r7, r1
   10228:	42ba      	cmp	r2, r7
   1022a:	d100      	bne.n	1022e <_realloc_r+0x96>
   1022c:	e12e      	b.n	1048c <_realloc_r+0x2f4>
   1022e:	1f22      	subs	r2, r4, #4
   10230:	2a24      	cmp	r2, #36	; 0x24
   10232:	d900      	bls.n	10236 <_realloc_r+0x9e>
   10234:	e114      	b.n	10460 <_realloc_r+0x2c8>
   10236:	2a13      	cmp	r2, #19
   10238:	d900      	bls.n	1023c <_realloc_r+0xa4>
   1023a:	e0e8      	b.n	1040e <_realloc_r+0x276>
   1023c:	0003      	movs	r3, r0
   1023e:	0032      	movs	r2, r6
   10240:	6811      	ldr	r1, [r2, #0]
   10242:	6019      	str	r1, [r3, #0]
   10244:	6851      	ldr	r1, [r2, #4]
   10246:	6059      	str	r1, [r3, #4]
   10248:	6892      	ldr	r2, [r2, #8]
   1024a:	609a      	str	r2, [r3, #8]
   1024c:	9c01      	ldr	r4, [sp, #4]
   1024e:	0031      	movs	r1, r6
   10250:	0020      	movs	r0, r4
   10252:	f7fe fdf1 	bl	ee38 <_free_r>
   10256:	0020      	movs	r0, r4
   10258:	f7ff fc4e 	bl	faf8 <__malloc_unlock>
   1025c:	e01b      	b.n	10296 <_realloc_r+0xfe>
   1025e:	2107      	movs	r1, #7
   10260:	438b      	bics	r3, r1
   10262:	4698      	mov	r8, r3
   10264:	d5b6      	bpl.n	101d4 <_realloc_r+0x3c>
   10266:	230c      	movs	r3, #12
   10268:	9a01      	ldr	r2, [sp, #4]
   1026a:	2500      	movs	r5, #0
   1026c:	6013      	str	r3, [r2, #0]
   1026e:	e012      	b.n	10296 <_realloc_r+0xfe>
   10270:	0035      	movs	r5, r6
   10272:	4643      	mov	r3, r8
   10274:	1ae3      	subs	r3, r4, r3
   10276:	2b0f      	cmp	r3, #15
   10278:	d825      	bhi.n	102c6 <_realloc_r+0x12e>
   1027a:	464b      	mov	r3, r9
   1027c:	2201      	movs	r2, #1
   1027e:	4649      	mov	r1, r9
   10280:	685b      	ldr	r3, [r3, #4]
   10282:	4013      	ands	r3, r2
   10284:	4323      	orrs	r3, r4
   10286:	604b      	str	r3, [r1, #4]
   10288:	444c      	add	r4, r9
   1028a:	6863      	ldr	r3, [r4, #4]
   1028c:	431a      	orrs	r2, r3
   1028e:	6062      	str	r2, [r4, #4]
   10290:	9801      	ldr	r0, [sp, #4]
   10292:	f7ff fc31 	bl	faf8 <__malloc_unlock>
   10296:	0028      	movs	r0, r5
   10298:	b005      	add	sp, #20
   1029a:	bc3c      	pop	{r2, r3, r4, r5}
   1029c:	4690      	mov	r8, r2
   1029e:	4699      	mov	r9, r3
   102a0:	46a2      	mov	sl, r4
   102a2:	46ab      	mov	fp, r5
   102a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102a6:	2103      	movs	r1, #3
   102a8:	9803      	ldr	r0, [sp, #12]
   102aa:	468c      	mov	ip, r1
   102ac:	4388      	bics	r0, r1
   102ae:	1821      	adds	r1, r4, r0
   102b0:	468b      	mov	fp, r1
   102b2:	4299      	cmp	r1, r3
   102b4:	db21      	blt.n	102fa <_realloc_r+0x162>
   102b6:	9a02      	ldr	r2, [sp, #8]
   102b8:	0035      	movs	r5, r6
   102ba:	68d3      	ldr	r3, [r2, #12]
   102bc:	6892      	ldr	r2, [r2, #8]
   102be:	465c      	mov	r4, fp
   102c0:	60d3      	str	r3, [r2, #12]
   102c2:	609a      	str	r2, [r3, #8]
   102c4:	e7d5      	b.n	10272 <_realloc_r+0xda>
   102c6:	464a      	mov	r2, r9
   102c8:	2001      	movs	r0, #1
   102ca:	4646      	mov	r6, r8
   102cc:	6852      	ldr	r2, [r2, #4]
   102ce:	4649      	mov	r1, r9
   102d0:	4002      	ands	r2, r0
   102d2:	4332      	orrs	r2, r6
   102d4:	464e      	mov	r6, r9
   102d6:	4441      	add	r1, r8
   102d8:	4303      	orrs	r3, r0
   102da:	6072      	str	r2, [r6, #4]
   102dc:	444c      	add	r4, r9
   102de:	604b      	str	r3, [r1, #4]
   102e0:	6863      	ldr	r3, [r4, #4]
   102e2:	3108      	adds	r1, #8
   102e4:	4318      	orrs	r0, r3
   102e6:	6060      	str	r0, [r4, #4]
   102e8:	9801      	ldr	r0, [sp, #4]
   102ea:	f7fe fda5 	bl	ee38 <_free_r>
   102ee:	e7cf      	b.n	10290 <_realloc_r+0xf8>
   102f0:	0011      	movs	r1, r2
   102f2:	f7ff f8b5 	bl	f460 <_malloc_r>
   102f6:	0005      	movs	r5, r0
   102f8:	e7cd      	b.n	10296 <_realloc_r+0xfe>
   102fa:	4651      	mov	r1, sl
   102fc:	4211      	tst	r1, r2
   102fe:	d000      	beq.n	10302 <_realloc_r+0x16a>
   10300:	e786      	b.n	10210 <_realloc_r+0x78>
   10302:	4661      	mov	r1, ip
   10304:	683a      	ldr	r2, [r7, #0]
   10306:	1aba      	subs	r2, r7, r2
   10308:	4692      	mov	sl, r2
   1030a:	6852      	ldr	r2, [r2, #4]
   1030c:	438a      	bics	r2, r1
   1030e:	1880      	adds	r0, r0, r2
   10310:	4683      	mov	fp, r0
   10312:	44a3      	add	fp, r4
   10314:	459b      	cmp	fp, r3
   10316:	db26      	blt.n	10366 <_realloc_r+0x1ce>
   10318:	9a02      	ldr	r2, [sp, #8]
   1031a:	68d3      	ldr	r3, [r2, #12]
   1031c:	6892      	ldr	r2, [r2, #8]
   1031e:	60d3      	str	r3, [r2, #12]
   10320:	609a      	str	r2, [r3, #8]
   10322:	4653      	mov	r3, sl
   10324:	4652      	mov	r2, sl
   10326:	4655      	mov	r5, sl
   10328:	6892      	ldr	r2, [r2, #8]
   1032a:	68db      	ldr	r3, [r3, #12]
   1032c:	3508      	adds	r5, #8
   1032e:	60d3      	str	r3, [r2, #12]
   10330:	609a      	str	r2, [r3, #8]
   10332:	1f22      	subs	r2, r4, #4
   10334:	2a24      	cmp	r2, #36	; 0x24
   10336:	d900      	bls.n	1033a <_realloc_r+0x1a2>
   10338:	e096      	b.n	10468 <_realloc_r+0x2d0>
   1033a:	2a13      	cmp	r2, #19
   1033c:	d972      	bls.n	10424 <_realloc_r+0x28c>
   1033e:	4653      	mov	r3, sl
   10340:	6831      	ldr	r1, [r6, #0]
   10342:	6099      	str	r1, [r3, #8]
   10344:	6871      	ldr	r1, [r6, #4]
   10346:	60d9      	str	r1, [r3, #12]
   10348:	2a1b      	cmp	r2, #27
   1034a:	d900      	bls.n	1034e <_realloc_r+0x1b6>
   1034c:	e0a4      	b.n	10498 <_realloc_r+0x300>
   1034e:	0032      	movs	r2, r6
   10350:	3310      	adds	r3, #16
   10352:	3208      	adds	r2, #8
   10354:	e068      	b.n	10428 <_realloc_r+0x290>
   10356:	683a      	ldr	r2, [r7, #0]
   10358:	1aba      	subs	r2, r7, r2
   1035a:	4692      	mov	sl, r2
   1035c:	4651      	mov	r1, sl
   1035e:	2203      	movs	r2, #3
   10360:	6849      	ldr	r1, [r1, #4]
   10362:	4391      	bics	r1, r2
   10364:	000a      	movs	r2, r1
   10366:	4693      	mov	fp, r2
   10368:	44a3      	add	fp, r4
   1036a:	459b      	cmp	fp, r3
   1036c:	da00      	bge.n	10370 <_realloc_r+0x1d8>
   1036e:	e74f      	b.n	10210 <_realloc_r+0x78>
   10370:	e7d7      	b.n	10322 <_realloc_r+0x18a>
   10372:	2003      	movs	r0, #3
   10374:	9902      	ldr	r1, [sp, #8]
   10376:	4684      	mov	ip, r0
   10378:	6849      	ldr	r1, [r1, #4]
   1037a:	4381      	bics	r1, r0
   1037c:	4640      	mov	r0, r8
   1037e:	1909      	adds	r1, r1, r4
   10380:	3010      	adds	r0, #16
   10382:	9002      	str	r0, [sp, #8]
   10384:	4281      	cmp	r1, r0
   10386:	da58      	bge.n	1043a <_realloc_r+0x2a2>
   10388:	07d2      	lsls	r2, r2, #31
   1038a:	d500      	bpl.n	1038e <_realloc_r+0x1f6>
   1038c:	e740      	b.n	10210 <_realloc_r+0x78>
   1038e:	4660      	mov	r0, ip
   10390:	683a      	ldr	r2, [r7, #0]
   10392:	1aba      	subs	r2, r7, r2
   10394:	4692      	mov	sl, r2
   10396:	6852      	ldr	r2, [r2, #4]
   10398:	4382      	bics	r2, r0
   1039a:	9802      	ldr	r0, [sp, #8]
   1039c:	1851      	adds	r1, r2, r1
   1039e:	9103      	str	r1, [sp, #12]
   103a0:	4288      	cmp	r0, r1
   103a2:	dce0      	bgt.n	10366 <_realloc_r+0x1ce>
   103a4:	4653      	mov	r3, sl
   103a6:	4652      	mov	r2, sl
   103a8:	4655      	mov	r5, sl
   103aa:	6892      	ldr	r2, [r2, #8]
   103ac:	68db      	ldr	r3, [r3, #12]
   103ae:	3508      	adds	r5, #8
   103b0:	60d3      	str	r3, [r2, #12]
   103b2:	609a      	str	r2, [r3, #8]
   103b4:	1f22      	subs	r2, r4, #4
   103b6:	2a24      	cmp	r2, #36	; 0x24
   103b8:	d900      	bls.n	103bc <_realloc_r+0x224>
   103ba:	e08e      	b.n	104da <_realloc_r+0x342>
   103bc:	2a13      	cmp	r2, #19
   103be:	d800      	bhi.n	103c2 <_realloc_r+0x22a>
   103c0:	e088      	b.n	104d4 <_realloc_r+0x33c>
   103c2:	4653      	mov	r3, sl
   103c4:	6831      	ldr	r1, [r6, #0]
   103c6:	6099      	str	r1, [r3, #8]
   103c8:	6871      	ldr	r1, [r6, #4]
   103ca:	60d9      	str	r1, [r3, #12]
   103cc:	2a1b      	cmp	r2, #27
   103ce:	d900      	bls.n	103d2 <_realloc_r+0x23a>
   103d0:	e088      	b.n	104e4 <_realloc_r+0x34c>
   103d2:	0032      	movs	r2, r6
   103d4:	3310      	adds	r3, #16
   103d6:	3208      	adds	r2, #8
   103d8:	6811      	ldr	r1, [r2, #0]
   103da:	6019      	str	r1, [r3, #0]
   103dc:	6851      	ldr	r1, [r2, #4]
   103de:	6059      	str	r1, [r3, #4]
   103e0:	6892      	ldr	r2, [r2, #8]
   103e2:	609a      	str	r2, [r3, #8]
   103e4:	4651      	mov	r1, sl
   103e6:	465b      	mov	r3, fp
   103e8:	4642      	mov	r2, r8
   103ea:	4441      	add	r1, r8
   103ec:	6099      	str	r1, [r3, #8]
   103ee:	9b03      	ldr	r3, [sp, #12]
   103f0:	9801      	ldr	r0, [sp, #4]
   103f2:	1a9a      	subs	r2, r3, r2
   103f4:	2301      	movs	r3, #1
   103f6:	431a      	orrs	r2, r3
   103f8:	604a      	str	r2, [r1, #4]
   103fa:	4652      	mov	r2, sl
   103fc:	6852      	ldr	r2, [r2, #4]
   103fe:	4013      	ands	r3, r2
   10400:	4642      	mov	r2, r8
   10402:	4313      	orrs	r3, r2
   10404:	4652      	mov	r2, sl
   10406:	6053      	str	r3, [r2, #4]
   10408:	f7ff fb76 	bl	faf8 <__malloc_unlock>
   1040c:	e743      	b.n	10296 <_realloc_r+0xfe>
   1040e:	6833      	ldr	r3, [r6, #0]
   10410:	6003      	str	r3, [r0, #0]
   10412:	6873      	ldr	r3, [r6, #4]
   10414:	6043      	str	r3, [r0, #4]
   10416:	2a1b      	cmp	r2, #27
   10418:	d82d      	bhi.n	10476 <_realloc_r+0x2de>
   1041a:	0003      	movs	r3, r0
   1041c:	0032      	movs	r2, r6
   1041e:	3308      	adds	r3, #8
   10420:	3208      	adds	r2, #8
   10422:	e70d      	b.n	10240 <_realloc_r+0xa8>
   10424:	002b      	movs	r3, r5
   10426:	0032      	movs	r2, r6
   10428:	6811      	ldr	r1, [r2, #0]
   1042a:	465c      	mov	r4, fp
   1042c:	6019      	str	r1, [r3, #0]
   1042e:	6851      	ldr	r1, [r2, #4]
   10430:	46d1      	mov	r9, sl
   10432:	6059      	str	r1, [r3, #4]
   10434:	6892      	ldr	r2, [r2, #8]
   10436:	609a      	str	r2, [r3, #8]
   10438:	e71b      	b.n	10272 <_realloc_r+0xda>
   1043a:	4643      	mov	r3, r8
   1043c:	18fa      	adds	r2, r7, r3
   1043e:	465b      	mov	r3, fp
   10440:	609a      	str	r2, [r3, #8]
   10442:	4643      	mov	r3, r8
   10444:	1ac9      	subs	r1, r1, r3
   10446:	2301      	movs	r3, #1
   10448:	4319      	orrs	r1, r3
   1044a:	6051      	str	r1, [r2, #4]
   1044c:	687a      	ldr	r2, [r7, #4]
   1044e:	9801      	ldr	r0, [sp, #4]
   10450:	4013      	ands	r3, r2
   10452:	4642      	mov	r2, r8
   10454:	4313      	orrs	r3, r2
   10456:	607b      	str	r3, [r7, #4]
   10458:	f7ff fb4e 	bl	faf8 <__malloc_unlock>
   1045c:	0035      	movs	r5, r6
   1045e:	e71a      	b.n	10296 <_realloc_r+0xfe>
   10460:	0031      	movs	r1, r6
   10462:	f7ff faf1 	bl	fa48 <memmove>
   10466:	e6f1      	b.n	1024c <_realloc_r+0xb4>
   10468:	0031      	movs	r1, r6
   1046a:	0028      	movs	r0, r5
   1046c:	f7ff faec 	bl	fa48 <memmove>
   10470:	465c      	mov	r4, fp
   10472:	46d1      	mov	r9, sl
   10474:	e6fd      	b.n	10272 <_realloc_r+0xda>
   10476:	68b3      	ldr	r3, [r6, #8]
   10478:	6083      	str	r3, [r0, #8]
   1047a:	68f3      	ldr	r3, [r6, #12]
   1047c:	60c3      	str	r3, [r0, #12]
   1047e:	2a24      	cmp	r2, #36	; 0x24
   10480:	d015      	beq.n	104ae <_realloc_r+0x316>
   10482:	0003      	movs	r3, r0
   10484:	0032      	movs	r2, r6
   10486:	3310      	adds	r3, #16
   10488:	3210      	adds	r2, #16
   1048a:	e6d9      	b.n	10240 <_realloc_r+0xa8>
   1048c:	6853      	ldr	r3, [r2, #4]
   1048e:	2203      	movs	r2, #3
   10490:	4393      	bics	r3, r2
   10492:	18e4      	adds	r4, r4, r3
   10494:	0035      	movs	r5, r6
   10496:	e6ec      	b.n	10272 <_realloc_r+0xda>
   10498:	4653      	mov	r3, sl
   1049a:	68b1      	ldr	r1, [r6, #8]
   1049c:	6119      	str	r1, [r3, #16]
   1049e:	68f1      	ldr	r1, [r6, #12]
   104a0:	6159      	str	r1, [r3, #20]
   104a2:	2a24      	cmp	r2, #36	; 0x24
   104a4:	d00c      	beq.n	104c0 <_realloc_r+0x328>
   104a6:	0032      	movs	r2, r6
   104a8:	3318      	adds	r3, #24
   104aa:	3210      	adds	r2, #16
   104ac:	e7bc      	b.n	10428 <_realloc_r+0x290>
   104ae:	6933      	ldr	r3, [r6, #16]
   104b0:	0032      	movs	r2, r6
   104b2:	6103      	str	r3, [r0, #16]
   104b4:	0003      	movs	r3, r0
   104b6:	6971      	ldr	r1, [r6, #20]
   104b8:	3318      	adds	r3, #24
   104ba:	3218      	adds	r2, #24
   104bc:	6141      	str	r1, [r0, #20]
   104be:	e6bf      	b.n	10240 <_realloc_r+0xa8>
   104c0:	4653      	mov	r3, sl
   104c2:	6932      	ldr	r2, [r6, #16]
   104c4:	4651      	mov	r1, sl
   104c6:	619a      	str	r2, [r3, #24]
   104c8:	0032      	movs	r2, r6
   104ca:	6970      	ldr	r0, [r6, #20]
   104cc:	3320      	adds	r3, #32
   104ce:	3218      	adds	r2, #24
   104d0:	61c8      	str	r0, [r1, #28]
   104d2:	e7a9      	b.n	10428 <_realloc_r+0x290>
   104d4:	002b      	movs	r3, r5
   104d6:	0032      	movs	r2, r6
   104d8:	e77e      	b.n	103d8 <_realloc_r+0x240>
   104da:	0031      	movs	r1, r6
   104dc:	0028      	movs	r0, r5
   104de:	f7ff fab3 	bl	fa48 <memmove>
   104e2:	e77f      	b.n	103e4 <_realloc_r+0x24c>
   104e4:	4653      	mov	r3, sl
   104e6:	68b1      	ldr	r1, [r6, #8]
   104e8:	6119      	str	r1, [r3, #16]
   104ea:	68f1      	ldr	r1, [r6, #12]
   104ec:	6159      	str	r1, [r3, #20]
   104ee:	2a24      	cmp	r2, #36	; 0x24
   104f0:	d003      	beq.n	104fa <_realloc_r+0x362>
   104f2:	0032      	movs	r2, r6
   104f4:	3318      	adds	r3, #24
   104f6:	3210      	adds	r2, #16
   104f8:	e76e      	b.n	103d8 <_realloc_r+0x240>
   104fa:	4653      	mov	r3, sl
   104fc:	6932      	ldr	r2, [r6, #16]
   104fe:	4651      	mov	r1, sl
   10500:	619a      	str	r2, [r3, #24]
   10502:	0032      	movs	r2, r6
   10504:	6970      	ldr	r0, [r6, #20]
   10506:	3320      	adds	r3, #32
   10508:	3218      	adds	r2, #24
   1050a:	61c8      	str	r0, [r1, #28]
   1050c:	e764      	b.n	103d8 <_realloc_r+0x240>
   1050e:	46c0      	nop			; (mov r8, r8)
   10510:	200004a4 	.word	0x200004a4

00010514 <_sbrk_r>:
   10514:	2300      	movs	r3, #0
   10516:	b570      	push	{r4, r5, r6, lr}
   10518:	4c06      	ldr	r4, [pc, #24]	; (10534 <_sbrk_r+0x20>)
   1051a:	0005      	movs	r5, r0
   1051c:	0008      	movs	r0, r1
   1051e:	6023      	str	r3, [r4, #0]
   10520:	f7f5 ffa4 	bl	646c <_sbrk>
   10524:	1c43      	adds	r3, r0, #1
   10526:	d000      	beq.n	1052a <_sbrk_r+0x16>
   10528:	bd70      	pop	{r4, r5, r6, pc}
   1052a:	6823      	ldr	r3, [r4, #0]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d0fb      	beq.n	10528 <_sbrk_r+0x14>
   10530:	602b      	str	r3, [r5, #0]
   10532:	e7f9      	b.n	10528 <_sbrk_r+0x14>
   10534:	2000158c 	.word	0x2000158c

00010538 <__sread>:
   10538:	b570      	push	{r4, r5, r6, lr}
   1053a:	000c      	movs	r4, r1
   1053c:	250e      	movs	r5, #14
   1053e:	5f49      	ldrsh	r1, [r1, r5]
   10540:	f000 fa26 	bl	10990 <_read_r>
   10544:	2800      	cmp	r0, #0
   10546:	db03      	blt.n	10550 <__sread+0x18>
   10548:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1054a:	181b      	adds	r3, r3, r0
   1054c:	6523      	str	r3, [r4, #80]	; 0x50
   1054e:	bd70      	pop	{r4, r5, r6, pc}
   10550:	89a3      	ldrh	r3, [r4, #12]
   10552:	4a02      	ldr	r2, [pc, #8]	; (1055c <__sread+0x24>)
   10554:	4013      	ands	r3, r2
   10556:	81a3      	strh	r3, [r4, #12]
   10558:	e7f9      	b.n	1054e <__sread+0x16>
   1055a:	46c0      	nop			; (mov r8, r8)
   1055c:	ffffefff 	.word	0xffffefff

00010560 <__swrite>:
   10560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10562:	0016      	movs	r6, r2
   10564:	001f      	movs	r7, r3
   10566:	220c      	movs	r2, #12
   10568:	5e8b      	ldrsh	r3, [r1, r2]
   1056a:	0005      	movs	r5, r0
   1056c:	000c      	movs	r4, r1
   1056e:	05da      	lsls	r2, r3, #23
   10570:	d507      	bpl.n	10582 <__swrite+0x22>
   10572:	230e      	movs	r3, #14
   10574:	5ec9      	ldrsh	r1, [r1, r3]
   10576:	2200      	movs	r2, #0
   10578:	2302      	movs	r3, #2
   1057a:	f000 f9df 	bl	1093c <_lseek_r>
   1057e:	220c      	movs	r2, #12
   10580:	5ea3      	ldrsh	r3, [r4, r2]
   10582:	4a05      	ldr	r2, [pc, #20]	; (10598 <__swrite+0x38>)
   10584:	0028      	movs	r0, r5
   10586:	4013      	ands	r3, r2
   10588:	81a3      	strh	r3, [r4, #12]
   1058a:	0032      	movs	r2, r6
   1058c:	230e      	movs	r3, #14
   1058e:	5ee1      	ldrsh	r1, [r4, r3]
   10590:	003b      	movs	r3, r7
   10592:	f000 f86b 	bl	1066c <_write_r>
   10596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10598:	ffffefff 	.word	0xffffefff

0001059c <__sseek>:
   1059c:	b570      	push	{r4, r5, r6, lr}
   1059e:	000c      	movs	r4, r1
   105a0:	250e      	movs	r5, #14
   105a2:	5f49      	ldrsh	r1, [r1, r5]
   105a4:	f000 f9ca 	bl	1093c <_lseek_r>
   105a8:	1c43      	adds	r3, r0, #1
   105aa:	d006      	beq.n	105ba <__sseek+0x1e>
   105ac:	2380      	movs	r3, #128	; 0x80
   105ae:	89a2      	ldrh	r2, [r4, #12]
   105b0:	015b      	lsls	r3, r3, #5
   105b2:	4313      	orrs	r3, r2
   105b4:	81a3      	strh	r3, [r4, #12]
   105b6:	6520      	str	r0, [r4, #80]	; 0x50
   105b8:	bd70      	pop	{r4, r5, r6, pc}
   105ba:	89a3      	ldrh	r3, [r4, #12]
   105bc:	4a01      	ldr	r2, [pc, #4]	; (105c4 <__sseek+0x28>)
   105be:	4013      	ands	r3, r2
   105c0:	81a3      	strh	r3, [r4, #12]
   105c2:	e7f9      	b.n	105b8 <__sseek+0x1c>
   105c4:	ffffefff 	.word	0xffffefff

000105c8 <__sclose>:
   105c8:	b510      	push	{r4, lr}
   105ca:	230e      	movs	r3, #14
   105cc:	5ec9      	ldrsh	r1, [r1, r3]
   105ce:	f000 f88d 	bl	106ec <_close_r>
   105d2:	bd10      	pop	{r4, pc}

000105d4 <__sprint_r.part.0>:
   105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105d6:	464e      	mov	r6, r9
   105d8:	4645      	mov	r5, r8
   105da:	46de      	mov	lr, fp
   105dc:	4657      	mov	r7, sl
   105de:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   105e0:	b5e0      	push	{r5, r6, r7, lr}
   105e2:	4680      	mov	r8, r0
   105e4:	000e      	movs	r6, r1
   105e6:	4691      	mov	r9, r2
   105e8:	049b      	lsls	r3, r3, #18
   105ea:	d531      	bpl.n	10650 <__sprint_r.part.0+0x7c>
   105ec:	6813      	ldr	r3, [r2, #0]
   105ee:	469a      	mov	sl, r3
   105f0:	6893      	ldr	r3, [r2, #8]
   105f2:	2b00      	cmp	r3, #0
   105f4:	d02a      	beq.n	1064c <__sprint_r.part.0+0x78>
   105f6:	4652      	mov	r2, sl
   105f8:	6852      	ldr	r2, [r2, #4]
   105fa:	2500      	movs	r5, #0
   105fc:	4693      	mov	fp, r2
   105fe:	0897      	lsrs	r7, r2, #2
   10600:	4652      	mov	r2, sl
   10602:	6814      	ldr	r4, [r2, #0]
   10604:	d104      	bne.n	10610 <__sprint_r.part.0+0x3c>
   10606:	e016      	b.n	10636 <__sprint_r.part.0+0x62>
   10608:	3501      	adds	r5, #1
   1060a:	3404      	adds	r4, #4
   1060c:	42af      	cmp	r7, r5
   1060e:	d010      	beq.n	10632 <__sprint_r.part.0+0x5e>
   10610:	0032      	movs	r2, r6
   10612:	6821      	ldr	r1, [r4, #0]
   10614:	4640      	mov	r0, r8
   10616:	f000 f92d 	bl	10874 <_fputwc_r>
   1061a:	1c43      	adds	r3, r0, #1
   1061c:	d1f4      	bne.n	10608 <__sprint_r.part.0+0x34>
   1061e:	464a      	mov	r2, r9
   10620:	2300      	movs	r3, #0
   10622:	6093      	str	r3, [r2, #8]
   10624:	6053      	str	r3, [r2, #4]
   10626:	bc3c      	pop	{r2, r3, r4, r5}
   10628:	4690      	mov	r8, r2
   1062a:	4699      	mov	r9, r3
   1062c:	46a2      	mov	sl, r4
   1062e:	46ab      	mov	fp, r5
   10630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10632:	464b      	mov	r3, r9
   10634:	689b      	ldr	r3, [r3, #8]
   10636:	465a      	mov	r2, fp
   10638:	2103      	movs	r1, #3
   1063a:	438a      	bics	r2, r1
   1063c:	1a9b      	subs	r3, r3, r2
   1063e:	464a      	mov	r2, r9
   10640:	6093      	str	r3, [r2, #8]
   10642:	2208      	movs	r2, #8
   10644:	4694      	mov	ip, r2
   10646:	44e2      	add	sl, ip
   10648:	2b00      	cmp	r3, #0
   1064a:	d1d4      	bne.n	105f6 <__sprint_r.part.0+0x22>
   1064c:	2000      	movs	r0, #0
   1064e:	e7e6      	b.n	1061e <__sprint_r.part.0+0x4a>
   10650:	f7fe fcd0 	bl	eff4 <__sfvwrite_r>
   10654:	e7e3      	b.n	1061e <__sprint_r.part.0+0x4a>
   10656:	46c0      	nop			; (mov r8, r8)

00010658 <__sprint_r>:
   10658:	6893      	ldr	r3, [r2, #8]
   1065a:	b510      	push	{r4, lr}
   1065c:	2b00      	cmp	r3, #0
   1065e:	d002      	beq.n	10666 <__sprint_r+0xe>
   10660:	f7ff ffb8 	bl	105d4 <__sprint_r.part.0>
   10664:	bd10      	pop	{r4, pc}
   10666:	6053      	str	r3, [r2, #4]
   10668:	2000      	movs	r0, #0
   1066a:	e7fb      	b.n	10664 <__sprint_r+0xc>

0001066c <_write_r>:
   1066c:	b570      	push	{r4, r5, r6, lr}
   1066e:	0005      	movs	r5, r0
   10670:	0008      	movs	r0, r1
   10672:	0011      	movs	r1, r2
   10674:	2200      	movs	r2, #0
   10676:	4c06      	ldr	r4, [pc, #24]	; (10690 <_write_r+0x24>)
   10678:	6022      	str	r2, [r4, #0]
   1067a:	001a      	movs	r2, r3
   1067c:	f000 fa5a 	bl	10b34 <_write>
   10680:	1c43      	adds	r3, r0, #1
   10682:	d000      	beq.n	10686 <_write_r+0x1a>
   10684:	bd70      	pop	{r4, r5, r6, pc}
   10686:	6823      	ldr	r3, [r4, #0]
   10688:	2b00      	cmp	r3, #0
   1068a:	d0fb      	beq.n	10684 <_write_r+0x18>
   1068c:	602b      	str	r3, [r5, #0]
   1068e:	e7f9      	b.n	10684 <_write_r+0x18>
   10690:	2000158c 	.word	0x2000158c

00010694 <_calloc_r>:
   10694:	b510      	push	{r4, lr}
   10696:	4351      	muls	r1, r2
   10698:	f7fe fee2 	bl	f460 <_malloc_r>
   1069c:	1e04      	subs	r4, r0, #0
   1069e:	d01c      	beq.n	106da <_calloc_r+0x46>
   106a0:	0003      	movs	r3, r0
   106a2:	3b08      	subs	r3, #8
   106a4:	685a      	ldr	r2, [r3, #4]
   106a6:	2303      	movs	r3, #3
   106a8:	439a      	bics	r2, r3
   106aa:	3a04      	subs	r2, #4
   106ac:	2a24      	cmp	r2, #36	; 0x24
   106ae:	d816      	bhi.n	106de <_calloc_r+0x4a>
   106b0:	0003      	movs	r3, r0
   106b2:	2a13      	cmp	r2, #19
   106b4:	d90d      	bls.n	106d2 <_calloc_r+0x3e>
   106b6:	2100      	movs	r1, #0
   106b8:	3308      	adds	r3, #8
   106ba:	6001      	str	r1, [r0, #0]
   106bc:	6041      	str	r1, [r0, #4]
   106be:	2a1b      	cmp	r2, #27
   106c0:	d907      	bls.n	106d2 <_calloc_r+0x3e>
   106c2:	6081      	str	r1, [r0, #8]
   106c4:	60c1      	str	r1, [r0, #12]
   106c6:	2a24      	cmp	r2, #36	; 0x24
   106c8:	d10d      	bne.n	106e6 <_calloc_r+0x52>
   106ca:	0003      	movs	r3, r0
   106cc:	6101      	str	r1, [r0, #16]
   106ce:	3318      	adds	r3, #24
   106d0:	6141      	str	r1, [r0, #20]
   106d2:	2200      	movs	r2, #0
   106d4:	601a      	str	r2, [r3, #0]
   106d6:	605a      	str	r2, [r3, #4]
   106d8:	609a      	str	r2, [r3, #8]
   106da:	0020      	movs	r0, r4
   106dc:	bd10      	pop	{r4, pc}
   106de:	2100      	movs	r1, #0
   106e0:	f7fb fc5a 	bl	bf98 <memset>
   106e4:	e7f9      	b.n	106da <_calloc_r+0x46>
   106e6:	0003      	movs	r3, r0
   106e8:	3310      	adds	r3, #16
   106ea:	e7f2      	b.n	106d2 <_calloc_r+0x3e>

000106ec <_close_r>:
   106ec:	2300      	movs	r3, #0
   106ee:	b570      	push	{r4, r5, r6, lr}
   106f0:	4c06      	ldr	r4, [pc, #24]	; (1070c <_close_r+0x20>)
   106f2:	0005      	movs	r5, r0
   106f4:	0008      	movs	r0, r1
   106f6:	6023      	str	r3, [r4, #0]
   106f8:	f000 f9f4 	bl	10ae4 <_close>
   106fc:	1c43      	adds	r3, r0, #1
   106fe:	d000      	beq.n	10702 <_close_r+0x16>
   10700:	bd70      	pop	{r4, r5, r6, pc}
   10702:	6823      	ldr	r3, [r4, #0]
   10704:	2b00      	cmp	r3, #0
   10706:	d0fb      	beq.n	10700 <_close_r+0x14>
   10708:	602b      	str	r3, [r5, #0]
   1070a:	e7f9      	b.n	10700 <_close_r+0x14>
   1070c:	2000158c 	.word	0x2000158c

00010710 <_fclose_r>:
   10710:	b570      	push	{r4, r5, r6, lr}
   10712:	0005      	movs	r5, r0
   10714:	1e0c      	subs	r4, r1, #0
   10716:	d040      	beq.n	1079a <_fclose_r+0x8a>
   10718:	2800      	cmp	r0, #0
   1071a:	d002      	beq.n	10722 <_fclose_r+0x12>
   1071c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1071e:	2b00      	cmp	r3, #0
   10720:	d03e      	beq.n	107a0 <_fclose_r+0x90>
   10722:	2601      	movs	r6, #1
   10724:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10726:	4233      	tst	r3, r6
   10728:	d133      	bne.n	10792 <_fclose_r+0x82>
   1072a:	89a3      	ldrh	r3, [r4, #12]
   1072c:	059b      	lsls	r3, r3, #22
   1072e:	d543      	bpl.n	107b8 <_fclose_r+0xa8>
   10730:	0021      	movs	r1, r4
   10732:	0028      	movs	r0, r5
   10734:	f7fe f9d4 	bl	eae0 <__sflush_r>
   10738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1073a:	0006      	movs	r6, r0
   1073c:	2b00      	cmp	r3, #0
   1073e:	d004      	beq.n	1074a <_fclose_r+0x3a>
   10740:	69e1      	ldr	r1, [r4, #28]
   10742:	0028      	movs	r0, r5
   10744:	4798      	blx	r3
   10746:	2800      	cmp	r0, #0
   10748:	db44      	blt.n	107d4 <_fclose_r+0xc4>
   1074a:	89a3      	ldrh	r3, [r4, #12]
   1074c:	061b      	lsls	r3, r3, #24
   1074e:	d42a      	bmi.n	107a6 <_fclose_r+0x96>
   10750:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10752:	2900      	cmp	r1, #0
   10754:	d008      	beq.n	10768 <_fclose_r+0x58>
   10756:	0023      	movs	r3, r4
   10758:	3340      	adds	r3, #64	; 0x40
   1075a:	4299      	cmp	r1, r3
   1075c:	d002      	beq.n	10764 <_fclose_r+0x54>
   1075e:	0028      	movs	r0, r5
   10760:	f7fe fb6a 	bl	ee38 <_free_r>
   10764:	2300      	movs	r3, #0
   10766:	6323      	str	r3, [r4, #48]	; 0x30
   10768:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1076a:	2900      	cmp	r1, #0
   1076c:	d004      	beq.n	10778 <_fclose_r+0x68>
   1076e:	0028      	movs	r0, r5
   10770:	f7fe fb62 	bl	ee38 <_free_r>
   10774:	2300      	movs	r3, #0
   10776:	6463      	str	r3, [r4, #68]	; 0x44
   10778:	f7fe fae4 	bl	ed44 <__sfp_lock_acquire>
   1077c:	2300      	movs	r3, #0
   1077e:	81a3      	strh	r3, [r4, #12]
   10780:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10782:	07db      	lsls	r3, r3, #31
   10784:	d514      	bpl.n	107b0 <_fclose_r+0xa0>
   10786:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10788:	f7fe fdec 	bl	f364 <__retarget_lock_close_recursive>
   1078c:	f7fe fae2 	bl	ed54 <__sfp_lock_release>
   10790:	e004      	b.n	1079c <_fclose_r+0x8c>
   10792:	220c      	movs	r2, #12
   10794:	5ea3      	ldrsh	r3, [r4, r2]
   10796:	2b00      	cmp	r3, #0
   10798:	d1ca      	bne.n	10730 <_fclose_r+0x20>
   1079a:	2600      	movs	r6, #0
   1079c:	0030      	movs	r0, r6
   1079e:	bd70      	pop	{r4, r5, r6, pc}
   107a0:	f7fe faa0 	bl	ece4 <__sinit>
   107a4:	e7bd      	b.n	10722 <_fclose_r+0x12>
   107a6:	6921      	ldr	r1, [r4, #16]
   107a8:	0028      	movs	r0, r5
   107aa:	f7fe fb45 	bl	ee38 <_free_r>
   107ae:	e7cf      	b.n	10750 <_fclose_r+0x40>
   107b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   107b2:	f7fe fddb 	bl	f36c <__retarget_lock_release_recursive>
   107b6:	e7e6      	b.n	10786 <_fclose_r+0x76>
   107b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   107ba:	f7fe fdd5 	bl	f368 <__retarget_lock_acquire_recursive>
   107be:	220c      	movs	r2, #12
   107c0:	5ea3      	ldrsh	r3, [r4, r2]
   107c2:	2b00      	cmp	r3, #0
   107c4:	d1b4      	bne.n	10730 <_fclose_r+0x20>
   107c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   107c8:	401e      	ands	r6, r3
   107ca:	d1e6      	bne.n	1079a <_fclose_r+0x8a>
   107cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   107ce:	f7fe fdcd 	bl	f36c <__retarget_lock_release_recursive>
   107d2:	e7e3      	b.n	1079c <_fclose_r+0x8c>
   107d4:	2601      	movs	r6, #1
   107d6:	4276      	negs	r6, r6
   107d8:	e7b7      	b.n	1074a <_fclose_r+0x3a>
   107da:	46c0      	nop			; (mov r8, r8)

000107dc <__fputwc>:
   107dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   107de:	46ce      	mov	lr, r9
   107e0:	4647      	mov	r7, r8
   107e2:	b580      	push	{r7, lr}
   107e4:	b085      	sub	sp, #20
   107e6:	4680      	mov	r8, r0
   107e8:	4689      	mov	r9, r1
   107ea:	0014      	movs	r4, r2
   107ec:	f000 f896 	bl	1091c <__locale_mb_cur_max>
   107f0:	2801      	cmp	r0, #1
   107f2:	d031      	beq.n	10858 <__fputwc+0x7c>
   107f4:	0023      	movs	r3, r4
   107f6:	af03      	add	r7, sp, #12
   107f8:	335c      	adds	r3, #92	; 0x5c
   107fa:	464a      	mov	r2, r9
   107fc:	0039      	movs	r1, r7
   107fe:	4640      	mov	r0, r8
   10800:	f000 f938 	bl	10a74 <_wcrtomb_r>
   10804:	0006      	movs	r6, r0
   10806:	1c43      	adds	r3, r0, #1
   10808:	d021      	beq.n	1084e <__fputwc+0x72>
   1080a:	2800      	cmp	r0, #0
   1080c:	d030      	beq.n	10870 <__fputwc+0x94>
   1080e:	7839      	ldrb	r1, [r7, #0]
   10810:	2500      	movs	r5, #0
   10812:	e007      	b.n	10824 <__fputwc+0x48>
   10814:	6823      	ldr	r3, [r4, #0]
   10816:	1c5a      	adds	r2, r3, #1
   10818:	6022      	str	r2, [r4, #0]
   1081a:	7019      	strb	r1, [r3, #0]
   1081c:	3501      	adds	r5, #1
   1081e:	42b5      	cmp	r5, r6
   10820:	d226      	bcs.n	10870 <__fputwc+0x94>
   10822:	5d79      	ldrb	r1, [r7, r5]
   10824:	68a3      	ldr	r3, [r4, #8]
   10826:	3b01      	subs	r3, #1
   10828:	60a3      	str	r3, [r4, #8]
   1082a:	2b00      	cmp	r3, #0
   1082c:	daf2      	bge.n	10814 <__fputwc+0x38>
   1082e:	69a2      	ldr	r2, [r4, #24]
   10830:	4293      	cmp	r3, r2
   10832:	db01      	blt.n	10838 <__fputwc+0x5c>
   10834:	290a      	cmp	r1, #10
   10836:	d1ed      	bne.n	10814 <__fputwc+0x38>
   10838:	0022      	movs	r2, r4
   1083a:	4640      	mov	r0, r8
   1083c:	f000 f8bc 	bl	109b8 <__swbuf_r>
   10840:	1c43      	adds	r3, r0, #1
   10842:	d1eb      	bne.n	1081c <__fputwc+0x40>
   10844:	b005      	add	sp, #20
   10846:	bc0c      	pop	{r2, r3}
   10848:	4690      	mov	r8, r2
   1084a:	4699      	mov	r9, r3
   1084c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1084e:	2240      	movs	r2, #64	; 0x40
   10850:	89a3      	ldrh	r3, [r4, #12]
   10852:	4313      	orrs	r3, r2
   10854:	81a3      	strh	r3, [r4, #12]
   10856:	e7f5      	b.n	10844 <__fputwc+0x68>
   10858:	464b      	mov	r3, r9
   1085a:	3b01      	subs	r3, #1
   1085c:	2bfe      	cmp	r3, #254	; 0xfe
   1085e:	d8c9      	bhi.n	107f4 <__fputwc+0x18>
   10860:	466a      	mov	r2, sp
   10862:	464b      	mov	r3, r9
   10864:	71d3      	strb	r3, [r2, #7]
   10866:	79d1      	ldrb	r1, [r2, #7]
   10868:	af03      	add	r7, sp, #12
   1086a:	7039      	strb	r1, [r7, #0]
   1086c:	2601      	movs	r6, #1
   1086e:	e7cf      	b.n	10810 <__fputwc+0x34>
   10870:	4648      	mov	r0, r9
   10872:	e7e7      	b.n	10844 <__fputwc+0x68>

00010874 <_fputwc_r>:
   10874:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10876:	b570      	push	{r4, r5, r6, lr}
   10878:	0005      	movs	r5, r0
   1087a:	000e      	movs	r6, r1
   1087c:	0014      	movs	r4, r2
   1087e:	07db      	lsls	r3, r3, #31
   10880:	d41e      	bmi.n	108c0 <_fputwc_r+0x4c>
   10882:	230c      	movs	r3, #12
   10884:	5ed2      	ldrsh	r2, [r2, r3]
   10886:	b291      	uxth	r1, r2
   10888:	058b      	lsls	r3, r1, #22
   1088a:	d516      	bpl.n	108ba <_fputwc_r+0x46>
   1088c:	2380      	movs	r3, #128	; 0x80
   1088e:	019b      	lsls	r3, r3, #6
   10890:	4219      	tst	r1, r3
   10892:	d104      	bne.n	1089e <_fputwc_r+0x2a>
   10894:	431a      	orrs	r2, r3
   10896:	81a2      	strh	r2, [r4, #12]
   10898:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1089a:	4313      	orrs	r3, r2
   1089c:	6663      	str	r3, [r4, #100]	; 0x64
   1089e:	0028      	movs	r0, r5
   108a0:	0022      	movs	r2, r4
   108a2:	0031      	movs	r1, r6
   108a4:	f7ff ff9a 	bl	107dc <__fputwc>
   108a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   108aa:	0005      	movs	r5, r0
   108ac:	07db      	lsls	r3, r3, #31
   108ae:	d402      	bmi.n	108b6 <_fputwc_r+0x42>
   108b0:	89a3      	ldrh	r3, [r4, #12]
   108b2:	059b      	lsls	r3, r3, #22
   108b4:	d508      	bpl.n	108c8 <_fputwc_r+0x54>
   108b6:	0028      	movs	r0, r5
   108b8:	bd70      	pop	{r4, r5, r6, pc}
   108ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108bc:	f7fe fd54 	bl	f368 <__retarget_lock_acquire_recursive>
   108c0:	230c      	movs	r3, #12
   108c2:	5ee2      	ldrsh	r2, [r4, r3]
   108c4:	b291      	uxth	r1, r2
   108c6:	e7e1      	b.n	1088c <_fputwc_r+0x18>
   108c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108ca:	f7fe fd4f 	bl	f36c <__retarget_lock_release_recursive>
   108ce:	e7f2      	b.n	108b6 <_fputwc_r+0x42>

000108d0 <_fstat_r>:
   108d0:	2300      	movs	r3, #0
   108d2:	b570      	push	{r4, r5, r6, lr}
   108d4:	4c07      	ldr	r4, [pc, #28]	; (108f4 <_fstat_r+0x24>)
   108d6:	0005      	movs	r5, r0
   108d8:	0008      	movs	r0, r1
   108da:	0011      	movs	r1, r2
   108dc:	6023      	str	r3, [r4, #0]
   108de:	f000 f909 	bl	10af4 <_fstat>
   108e2:	1c43      	adds	r3, r0, #1
   108e4:	d000      	beq.n	108e8 <_fstat_r+0x18>
   108e6:	bd70      	pop	{r4, r5, r6, pc}
   108e8:	6823      	ldr	r3, [r4, #0]
   108ea:	2b00      	cmp	r3, #0
   108ec:	d0fb      	beq.n	108e6 <_fstat_r+0x16>
   108ee:	602b      	str	r3, [r5, #0]
   108f0:	e7f9      	b.n	108e6 <_fstat_r+0x16>
   108f2:	46c0      	nop			; (mov r8, r8)
   108f4:	2000158c 	.word	0x2000158c

000108f8 <_isatty_r>:
   108f8:	2300      	movs	r3, #0
   108fa:	b570      	push	{r4, r5, r6, lr}
   108fc:	4c06      	ldr	r4, [pc, #24]	; (10918 <_isatty_r+0x20>)
   108fe:	0005      	movs	r5, r0
   10900:	0008      	movs	r0, r1
   10902:	6023      	str	r3, [r4, #0]
   10904:	f000 f8fe 	bl	10b04 <_isatty>
   10908:	1c43      	adds	r3, r0, #1
   1090a:	d000      	beq.n	1090e <_isatty_r+0x16>
   1090c:	bd70      	pop	{r4, r5, r6, pc}
   1090e:	6823      	ldr	r3, [r4, #0]
   10910:	2b00      	cmp	r3, #0
   10912:	d0fb      	beq.n	1090c <_isatty_r+0x14>
   10914:	602b      	str	r3, [r5, #0]
   10916:	e7f9      	b.n	1090c <_isatty_r+0x14>
   10918:	2000158c 	.word	0x2000158c

0001091c <__locale_mb_cur_max>:
   1091c:	4b05      	ldr	r3, [pc, #20]	; (10934 <__locale_mb_cur_max+0x18>)
   1091e:	681b      	ldr	r3, [r3, #0]
   10920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10922:	2b00      	cmp	r3, #0
   10924:	d003      	beq.n	1092e <__locale_mb_cur_max+0x12>
   10926:	2294      	movs	r2, #148	; 0x94
   10928:	0052      	lsls	r2, r2, #1
   1092a:	5c98      	ldrb	r0, [r3, r2]
   1092c:	4770      	bx	lr
   1092e:	4b02      	ldr	r3, [pc, #8]	; (10938 <__locale_mb_cur_max+0x1c>)
   10930:	e7f9      	b.n	10926 <__locale_mb_cur_max+0xa>
   10932:	46c0      	nop			; (mov r8, r8)
   10934:	20000070 	.word	0x20000070
   10938:	200008b4 	.word	0x200008b4

0001093c <_lseek_r>:
   1093c:	b570      	push	{r4, r5, r6, lr}
   1093e:	0005      	movs	r5, r0
   10940:	0008      	movs	r0, r1
   10942:	0011      	movs	r1, r2
   10944:	2200      	movs	r2, #0
   10946:	4c06      	ldr	r4, [pc, #24]	; (10960 <_lseek_r+0x24>)
   10948:	6022      	str	r2, [r4, #0]
   1094a:	001a      	movs	r2, r3
   1094c:	f000 f8e2 	bl	10b14 <_lseek>
   10950:	1c43      	adds	r3, r0, #1
   10952:	d000      	beq.n	10956 <_lseek_r+0x1a>
   10954:	bd70      	pop	{r4, r5, r6, pc}
   10956:	6823      	ldr	r3, [r4, #0]
   10958:	2b00      	cmp	r3, #0
   1095a:	d0fb      	beq.n	10954 <_lseek_r+0x18>
   1095c:	602b      	str	r3, [r5, #0]
   1095e:	e7f9      	b.n	10954 <_lseek_r+0x18>
   10960:	2000158c 	.word	0x2000158c

00010964 <__ascii_mbtowc>:
   10964:	b082      	sub	sp, #8
   10966:	2900      	cmp	r1, #0
   10968:	d00a      	beq.n	10980 <__ascii_mbtowc+0x1c>
   1096a:	2a00      	cmp	r2, #0
   1096c:	d00b      	beq.n	10986 <__ascii_mbtowc+0x22>
   1096e:	2b00      	cmp	r3, #0
   10970:	d00b      	beq.n	1098a <__ascii_mbtowc+0x26>
   10972:	7813      	ldrb	r3, [r2, #0]
   10974:	600b      	str	r3, [r1, #0]
   10976:	7810      	ldrb	r0, [r2, #0]
   10978:	1e43      	subs	r3, r0, #1
   1097a:	4198      	sbcs	r0, r3
   1097c:	b002      	add	sp, #8
   1097e:	4770      	bx	lr
   10980:	a901      	add	r1, sp, #4
   10982:	2a00      	cmp	r2, #0
   10984:	d1f3      	bne.n	1096e <__ascii_mbtowc+0xa>
   10986:	2000      	movs	r0, #0
   10988:	e7f8      	b.n	1097c <__ascii_mbtowc+0x18>
   1098a:	2002      	movs	r0, #2
   1098c:	4240      	negs	r0, r0
   1098e:	e7f5      	b.n	1097c <__ascii_mbtowc+0x18>

00010990 <_read_r>:
   10990:	b570      	push	{r4, r5, r6, lr}
   10992:	0005      	movs	r5, r0
   10994:	0008      	movs	r0, r1
   10996:	0011      	movs	r1, r2
   10998:	2200      	movs	r2, #0
   1099a:	4c06      	ldr	r4, [pc, #24]	; (109b4 <_read_r+0x24>)
   1099c:	6022      	str	r2, [r4, #0]
   1099e:	001a      	movs	r2, r3
   109a0:	f000 f8c0 	bl	10b24 <_read>
   109a4:	1c43      	adds	r3, r0, #1
   109a6:	d000      	beq.n	109aa <_read_r+0x1a>
   109a8:	bd70      	pop	{r4, r5, r6, pc}
   109aa:	6823      	ldr	r3, [r4, #0]
   109ac:	2b00      	cmp	r3, #0
   109ae:	d0fb      	beq.n	109a8 <_read_r+0x18>
   109b0:	602b      	str	r3, [r5, #0]
   109b2:	e7f9      	b.n	109a8 <_read_r+0x18>
   109b4:	2000158c 	.word	0x2000158c

000109b8 <__swbuf_r>:
   109b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109ba:	0006      	movs	r6, r0
   109bc:	000d      	movs	r5, r1
   109be:	0014      	movs	r4, r2
   109c0:	2800      	cmp	r0, #0
   109c2:	d002      	beq.n	109ca <__swbuf_r+0x12>
   109c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   109c6:	2b00      	cmp	r3, #0
   109c8:	d04e      	beq.n	10a68 <__swbuf_r+0xb0>
   109ca:	69a3      	ldr	r3, [r4, #24]
   109cc:	60a3      	str	r3, [r4, #8]
   109ce:	230c      	movs	r3, #12
   109d0:	5ee0      	ldrsh	r0, [r4, r3]
   109d2:	b281      	uxth	r1, r0
   109d4:	070b      	lsls	r3, r1, #28
   109d6:	d53c      	bpl.n	10a52 <__swbuf_r+0x9a>
   109d8:	6923      	ldr	r3, [r4, #16]
   109da:	2b00      	cmp	r3, #0
   109dc:	d039      	beq.n	10a52 <__swbuf_r+0x9a>
   109de:	22ff      	movs	r2, #255	; 0xff
   109e0:	b2ef      	uxtb	r7, r5
   109e2:	4015      	ands	r5, r2
   109e4:	2280      	movs	r2, #128	; 0x80
   109e6:	0192      	lsls	r2, r2, #6
   109e8:	4211      	tst	r1, r2
   109ea:	d015      	beq.n	10a18 <__swbuf_r+0x60>
   109ec:	6822      	ldr	r2, [r4, #0]
   109ee:	6961      	ldr	r1, [r4, #20]
   109f0:	1ad3      	subs	r3, r2, r3
   109f2:	428b      	cmp	r3, r1
   109f4:	da1b      	bge.n	10a2e <__swbuf_r+0x76>
   109f6:	3301      	adds	r3, #1
   109f8:	68a1      	ldr	r1, [r4, #8]
   109fa:	3901      	subs	r1, #1
   109fc:	60a1      	str	r1, [r4, #8]
   109fe:	1c51      	adds	r1, r2, #1
   10a00:	6021      	str	r1, [r4, #0]
   10a02:	7017      	strb	r7, [r2, #0]
   10a04:	6962      	ldr	r2, [r4, #20]
   10a06:	429a      	cmp	r2, r3
   10a08:	d01a      	beq.n	10a40 <__swbuf_r+0x88>
   10a0a:	89a3      	ldrh	r3, [r4, #12]
   10a0c:	07db      	lsls	r3, r3, #31
   10a0e:	d501      	bpl.n	10a14 <__swbuf_r+0x5c>
   10a10:	2d0a      	cmp	r5, #10
   10a12:	d015      	beq.n	10a40 <__swbuf_r+0x88>
   10a14:	0028      	movs	r0, r5
   10a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a18:	4302      	orrs	r2, r0
   10a1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10a1c:	81a2      	strh	r2, [r4, #12]
   10a1e:	4a14      	ldr	r2, [pc, #80]	; (10a70 <__swbuf_r+0xb8>)
   10a20:	400a      	ands	r2, r1
   10a22:	6662      	str	r2, [r4, #100]	; 0x64
   10a24:	6961      	ldr	r1, [r4, #20]
   10a26:	6822      	ldr	r2, [r4, #0]
   10a28:	1ad3      	subs	r3, r2, r3
   10a2a:	428b      	cmp	r3, r1
   10a2c:	dbe3      	blt.n	109f6 <__swbuf_r+0x3e>
   10a2e:	0021      	movs	r1, r4
   10a30:	0030      	movs	r0, r6
   10a32:	f7fe f8fd 	bl	ec30 <_fflush_r>
   10a36:	2800      	cmp	r0, #0
   10a38:	d108      	bne.n	10a4c <__swbuf_r+0x94>
   10a3a:	6822      	ldr	r2, [r4, #0]
   10a3c:	2301      	movs	r3, #1
   10a3e:	e7db      	b.n	109f8 <__swbuf_r+0x40>
   10a40:	0021      	movs	r1, r4
   10a42:	0030      	movs	r0, r6
   10a44:	f7fe f8f4 	bl	ec30 <_fflush_r>
   10a48:	2800      	cmp	r0, #0
   10a4a:	d0e3      	beq.n	10a14 <__swbuf_r+0x5c>
   10a4c:	2501      	movs	r5, #1
   10a4e:	426d      	negs	r5, r5
   10a50:	e7e0      	b.n	10a14 <__swbuf_r+0x5c>
   10a52:	0021      	movs	r1, r4
   10a54:	0030      	movs	r0, r6
   10a56:	f7fc fedd 	bl	d814 <__swsetup_r>
   10a5a:	2800      	cmp	r0, #0
   10a5c:	d1f6      	bne.n	10a4c <__swbuf_r+0x94>
   10a5e:	230c      	movs	r3, #12
   10a60:	5ee0      	ldrsh	r0, [r4, r3]
   10a62:	6923      	ldr	r3, [r4, #16]
   10a64:	b281      	uxth	r1, r0
   10a66:	e7ba      	b.n	109de <__swbuf_r+0x26>
   10a68:	f7fe f93c 	bl	ece4 <__sinit>
   10a6c:	e7ad      	b.n	109ca <__swbuf_r+0x12>
   10a6e:	46c0      	nop			; (mov r8, r8)
   10a70:	ffffdfff 	.word	0xffffdfff

00010a74 <_wcrtomb_r>:
   10a74:	b570      	push	{r4, r5, r6, lr}
   10a76:	001d      	movs	r5, r3
   10a78:	4b11      	ldr	r3, [pc, #68]	; (10ac0 <_wcrtomb_r+0x4c>)
   10a7a:	b084      	sub	sp, #16
   10a7c:	681b      	ldr	r3, [r3, #0]
   10a7e:	0004      	movs	r4, r0
   10a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10a82:	2900      	cmp	r1, #0
   10a84:	d00e      	beq.n	10aa4 <_wcrtomb_r+0x30>
   10a86:	2b00      	cmp	r3, #0
   10a88:	d016      	beq.n	10ab8 <_wcrtomb_r+0x44>
   10a8a:	20e0      	movs	r0, #224	; 0xe0
   10a8c:	581e      	ldr	r6, [r3, r0]
   10a8e:	002b      	movs	r3, r5
   10a90:	0020      	movs	r0, r4
   10a92:	47b0      	blx	r6
   10a94:	1c43      	adds	r3, r0, #1
   10a96:	d103      	bne.n	10aa0 <_wcrtomb_r+0x2c>
   10a98:	2300      	movs	r3, #0
   10a9a:	602b      	str	r3, [r5, #0]
   10a9c:	338a      	adds	r3, #138	; 0x8a
   10a9e:	6023      	str	r3, [r4, #0]
   10aa0:	b004      	add	sp, #16
   10aa2:	bd70      	pop	{r4, r5, r6, pc}
   10aa4:	2b00      	cmp	r3, #0
   10aa6:	d009      	beq.n	10abc <_wcrtomb_r+0x48>
   10aa8:	22e0      	movs	r2, #224	; 0xe0
   10aaa:	a901      	add	r1, sp, #4
   10aac:	589e      	ldr	r6, [r3, r2]
   10aae:	0020      	movs	r0, r4
   10ab0:	002b      	movs	r3, r5
   10ab2:	2200      	movs	r2, #0
   10ab4:	47b0      	blx	r6
   10ab6:	e7ed      	b.n	10a94 <_wcrtomb_r+0x20>
   10ab8:	4b02      	ldr	r3, [pc, #8]	; (10ac4 <_wcrtomb_r+0x50>)
   10aba:	e7e6      	b.n	10a8a <_wcrtomb_r+0x16>
   10abc:	4b01      	ldr	r3, [pc, #4]	; (10ac4 <_wcrtomb_r+0x50>)
   10abe:	e7f3      	b.n	10aa8 <_wcrtomb_r+0x34>
   10ac0:	20000070 	.word	0x20000070
   10ac4:	200008b4 	.word	0x200008b4

00010ac8 <__ascii_wctomb>:
   10ac8:	2900      	cmp	r1, #0
   10aca:	d004      	beq.n	10ad6 <__ascii_wctomb+0xe>
   10acc:	2aff      	cmp	r2, #255	; 0xff
   10ace:	d804      	bhi.n	10ada <__ascii_wctomb+0x12>
   10ad0:	2001      	movs	r0, #1
   10ad2:	700a      	strb	r2, [r1, #0]
   10ad4:	4770      	bx	lr
   10ad6:	2000      	movs	r0, #0
   10ad8:	e7fc      	b.n	10ad4 <__ascii_wctomb+0xc>
   10ada:	238a      	movs	r3, #138	; 0x8a
   10adc:	6003      	str	r3, [r0, #0]
   10ade:	2001      	movs	r0, #1
   10ae0:	4240      	negs	r0, r0
   10ae2:	e7f7      	b.n	10ad4 <__ascii_wctomb+0xc>

00010ae4 <_close>:
   10ae4:	2258      	movs	r2, #88	; 0x58
   10ae6:	2001      	movs	r0, #1
   10ae8:	4b01      	ldr	r3, [pc, #4]	; (10af0 <_close+0xc>)
   10aea:	4240      	negs	r0, r0
   10aec:	601a      	str	r2, [r3, #0]
   10aee:	4770      	bx	lr
   10af0:	2000158c 	.word	0x2000158c

00010af4 <_fstat>:
   10af4:	2258      	movs	r2, #88	; 0x58
   10af6:	2001      	movs	r0, #1
   10af8:	4b01      	ldr	r3, [pc, #4]	; (10b00 <_fstat+0xc>)
   10afa:	4240      	negs	r0, r0
   10afc:	601a      	str	r2, [r3, #0]
   10afe:	4770      	bx	lr
   10b00:	2000158c 	.word	0x2000158c

00010b04 <_isatty>:
   10b04:	2258      	movs	r2, #88	; 0x58
   10b06:	4b02      	ldr	r3, [pc, #8]	; (10b10 <_isatty+0xc>)
   10b08:	2000      	movs	r0, #0
   10b0a:	601a      	str	r2, [r3, #0]
   10b0c:	4770      	bx	lr
   10b0e:	46c0      	nop			; (mov r8, r8)
   10b10:	2000158c 	.word	0x2000158c

00010b14 <_lseek>:
   10b14:	2258      	movs	r2, #88	; 0x58
   10b16:	2001      	movs	r0, #1
   10b18:	4b01      	ldr	r3, [pc, #4]	; (10b20 <_lseek+0xc>)
   10b1a:	4240      	negs	r0, r0
   10b1c:	601a      	str	r2, [r3, #0]
   10b1e:	4770      	bx	lr
   10b20:	2000158c 	.word	0x2000158c

00010b24 <_read>:
   10b24:	2258      	movs	r2, #88	; 0x58
   10b26:	2001      	movs	r0, #1
   10b28:	4b01      	ldr	r3, [pc, #4]	; (10b30 <_read+0xc>)
   10b2a:	4240      	negs	r0, r0
   10b2c:	601a      	str	r2, [r3, #0]
   10b2e:	4770      	bx	lr
   10b30:	2000158c 	.word	0x2000158c

00010b34 <_write>:
   10b34:	2258      	movs	r2, #88	; 0x58
   10b36:	2001      	movs	r0, #1
   10b38:	4b01      	ldr	r3, [pc, #4]	; (10b40 <_write+0xc>)
   10b3a:	4240      	negs	r0, r0
   10b3c:	601a      	str	r2, [r3, #0]
   10b3e:	4770      	bx	lr
   10b40:	2000158c 	.word	0x2000158c
   10b44:	69646152 	.word	0x69646152
   10b48:	726f7461 	.word	0x726f7461
   10b4c:	544f4e20 	.word	0x544f4e20
   10b50:	61745320 	.word	0x61745320
   10b54:	64657472 	.word	0x64657472
   10b58:	00000000 	.word	0x00000000
   10b5c:	00000a0d 	.word	0x00000a0d
   10b60:	69646152 	.word	0x69646152
   10b64:	726f7461 	.word	0x726f7461
   10b68:	61745320 	.word	0x61745320
   10b6c:	64657472 	.word	0x64657472
   10b70:	00000000 	.word	0x00000000
   10b74:	6963734f 	.word	0x6963734f
   10b78:	74616c6c 	.word	0x74616c6c
   10b7c:	4e20726f 	.word	0x4e20726f
   10b80:	5320544f 	.word	0x5320544f
   10b84:	74726174 	.word	0x74726174
   10b88:	00006465 	.word	0x00006465
   10b8c:	6963734f 	.word	0x6963734f
   10b90:	74616c6c 	.word	0x74616c6c
   10b94:	5320726f 	.word	0x5320726f
   10b98:	74726174 	.word	0x74726174
   10b9c:	00006465 	.word	0x00006465
   10ba0:	6578694d 	.word	0x6578694d
   10ba4:	6e452072 	.word	0x6e452072
   10ba8:	656c6261 	.word	0x656c6261
   10bac:	00000064 	.word	0x00000064
   10bb0:	6578694d 	.word	0x6578694d
   10bb4:	69442072 	.word	0x69442072
   10bb8:	6c626173 	.word	0x6c626173
   10bbc:	00006465 	.word	0x00006465
   10bc0:	46204652 	.word	0x46204652
   10bc4:	75716572 	.word	0x75716572
   10bc8:	79636e65 	.word	0x79636e65
   10bcc:	0000203a 	.word	0x0000203a
   10bd0:	00000009 	.word	0x00000009
   10bd4:	004a325b 	.word	0x004a325b
   10bd8:	74696e69 	.word	0x74696e69
   10bdc:	69746169 	.word	0x69746169
   10be0:	4c20676e 	.word	0x4c20676e
   10be4:	4d204354 	.word	0x4d204354
   10be8:	72657869 	.word	0x72657869
   10bec:	00000000 	.word	0x00000000
   10bf0:	64617267 	.word	0x64617267
   10bf4:	746e6569 	.word	0x746e6569
   10bf8:	00000020 	.word	0x00000020
   10bfc:	72696409 	.word	0x72696409
   10c00:	69746365 	.word	0x69746365
   10c04:	00206e6f 	.word	0x00206e6f
   10c08:	72726509 	.word	0x72726509
   10c0c:	0020726f 	.word	0x0020726f
   10c10:	69616709 	.word	0x69616709
   10c14:	0000206e 	.word	0x0000206e
   10c18:	74706f09 	.word	0x74706f09
   10c1c:	6d756d69 	.word	0x6d756d69
   10c20:	00000020 	.word	0x00000020
   10c24:	00000b44 	.word	0x00000b44
   10c28:	00000b70 	.word	0x00000b70
   10c2c:	00000b7c 	.word	0x00000b7c
   10c30:	00000b88 	.word	0x00000b88
   10c34:	00000b94 	.word	0x00000b94
   10c38:	00000ba0 	.word	0x00000ba0
   10c3c:	00000bac 	.word	0x00000bac
   10c40:	00000bb8 	.word	0x00000bb8
   10c44:	00000bc4 	.word	0x00000bc4
   10c48:	00000bd0 	.word	0x00000bd0
   10c4c:	00000bdc 	.word	0x00000bdc
   10c50:	00000be8 	.word	0x00000be8
   10c54:	00000c34 	.word	0x00000c34
   10c58:	00000c34 	.word	0x00000c34
   10c5c:	00000c34 	.word	0x00000c34
   10c60:	00000bf4 	.word	0x00000bf4
   10c64:	00000c00 	.word	0x00000c00
   10c68:	00000c34 	.word	0x00000c34
   10c6c:	00000c34 	.word	0x00000c34
   10c70:	00000c34 	.word	0x00000c34
   10c74:	00000c0c 	.word	0x00000c0c
   10c78:	00000c1a 	.word	0x00000c1a
   10c7c:	00000c26 	.word	0x00000c26
   10c80:	00000d74 	.word	0x00000d74
   10c84:	00000da0 	.word	0x00000da0
   10c88:	00000db0 	.word	0x00000db0
   10c8c:	00000d8a 	.word	0x00000d8a
   10c90:	00000d8a 	.word	0x00000d8a
   10c94:	00000dc4 	.word	0x00000dc4
   10c98:	00000d8a 	.word	0x00000d8a
   10c9c:	00000d8a 	.word	0x00000d8a
   10ca0:	00000d8a 	.word	0x00000d8a
   10ca4:	00000d8a 	.word	0x00000d8a
   10ca8:	00000d8a 	.word	0x00000d8a
   10cac:	00000d8a 	.word	0x00000d8a
   10cb0:	00000d8a 	.word	0x00000d8a
   10cb4:	00000d8a 	.word	0x00000d8a
   10cb8:	00000d8a 	.word	0x00000d8a
   10cbc:	00000d8a 	.word	0x00000d8a
   10cc0:	00000d8a 	.word	0x00000d8a
   10cc4:	00000dfa 	.word	0x00000dfa
   10cc8:	00000e0e 	.word	0x00000e0e
   10ccc:	00000e22 	.word	0x00000e22
   10cd0:	64616552 	.word	0x64616552
   10cd4:	64255220 	.word	0x64255220
   10cd8:	00000000 	.word	0x00000000
   10cdc:	3020203a 	.word	0x3020203a
   10ce0:	38302578 	.word	0x38302578
   10ce4:	000a786c 	.word	0x000a786c
   10ce8:	74697257 	.word	0x74697257
   10cec:	25522065 	.word	0x25522065
   10cf0:	00000064 	.word	0x00000064
   10cf4:	3020203a 	.word	0x3020203a
   10cf8:	38302578 	.word	0x38302578
   10cfc:	0009786c 	.word	0x0009786c
   10d00:	72727543 	.word	0x72727543
   10d04:	20746e65 	.word	0x20746e65
   10d08:	71657266 	.word	0x71657266
   10d0c:	636e6575 	.word	0x636e6575
   10d10:	25203a65 	.word	0x25203a65
   10d14:	000a666c 	.word	0x000a666c
   10d18:	2a2a2a2a 	.word	0x2a2a2a2a
   10d1c:	2a2a2a2a 	.word	0x2a2a2a2a
   10d20:	2a2a2a2a 	.word	0x2a2a2a2a
   10d24:	2a2a2a2a 	.word	0x2a2a2a2a
   10d28:	2a2a2a2a 	.word	0x2a2a2a2a
   10d2c:	2a2a2a2a 	.word	0x2a2a2a2a
   10d30:	0d0a2a2a 	.word	0x0d0a2a2a
   10d34:	00000000 	.word	0x00000000
   10d38:	20746f4e 	.word	0x20746f4e
   10d3c:	6b636f4c 	.word	0x6b636f4c
   10d40:	61206465 	.word	0x61206465
   10d44:	20203a74 	.word	0x20203a74
   10d48:	00666c25 	.word	0x00666c25
   10d4c:	7a484d20 	.word	0x7a484d20
   10d50:	00000000 	.word	0x00000000
   10d54:	2a2a2a2a 	.word	0x2a2a2a2a
   10d58:	2a2a2a2a 	.word	0x2a2a2a2a
   10d5c:	2a2a2a2a 	.word	0x2a2a2a2a
   10d60:	2a2a2a2a 	.word	0x2a2a2a2a
   10d64:	2a2a2a2a 	.word	0x2a2a2a2a
   10d68:	2a2a2a2a 	.word	0x2a2a2a2a
   10d6c:	00002a2a 	.word	0x00002a2a

00010d70 <_ZL22channel_divider_values>:
   10d70:	00000002 00000004 00000006 00000008     ................
   10d80:	0000000c 00000010 00000018 00000020     ............ ...
   10d90:	00000030 00000040 00000048 00000060     0...@...H...`...
   10da0:	00000080 000000c0                       ........

00010da8 <_ZL17default_registers>:
	...
   10db4:	000000f1 44400007 00000000 00000000     ......@D........
	...
   10df0:	00000064 0800000c 003f0000 00800001     d.........?.....
   10e00:	0000c350 000003e8 000001f4 00001388     P...............
   10e10:	00a80322 000109c4 00208001 00000000     "......... .....
   10e20:	00000000 00800420 41800000 03000300     .... ......A....
   10e30:	c8c207fc 00011f61 00000000 da800000     ....a...........
   10e40:	8104fd51 00040028 1e210000 03ec0393     Q...(.....!.....
   10e50:	318c318c 00020488 06240db0 007c071a     .1.1......$...|.
   10e60:	04010001 27b7f848 012c0064 064f0080     ....H..'d.,...O.
   10e70:	40001e70 00185001 160410d8 00b22000     p..@.P....... ..
   10e80:	03e87802 06420e43 080c0500 0000211c     .x..C.B......!..
   10e90:	682f2e2e 732f6c61 682f6372 645f6c61     ../hal/src/hal_d
   10ea0:	735f6361 2e636e79 00000063 682f2e2e     ac_sync.c...../h
   10eb0:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
   10ec0:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
   10ed0:	6d5f6970 6e79735f 00632e63 682f2e2e     pi_m_sync.c.../h
   10ee0:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
   10ef0:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   10f00:	755f6c61 74726173 7973615f 632e636e     al_usart_async.c
   10f10:	00000000 682f2e2e 752f6c61 736c6974     ....../hal/utils
   10f20:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
   10f30:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
   10f40:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
   10f50:	65666675 00632e72 682f2e2e 642f6c70     uffer.c.../hpl/d
   10f60:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00010f70 <_map>:
   10f70:	0000000e 0000000e 682f2e2e 652f6c70     ........../hpl/e
   10f80:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

00010f90 <_usarts>:
   10f90:	00000003 40100004 00030000 0000ff2e     .......@........
   10fa0:	00000000                                ....

00010fa4 <_i2cms>:
	...

00010fbc <_i2css>:
	...

00010fcc <sercomspi_regs>:
   10fcc:	0020000c 00020000 00000000 01ff003b     .. .........;...
   10fdc:	20000c00 02000000 00000000 ff000500     ... ............
   10fec:	000c0101 00000030 00000002 00170000     ....0...........
   10ffc:	000201ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
   1100c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

0001101c <_tcs>:
   1101c:	03680003 00000000 00000000 00001770     ..h.........p...
   1102c:	00000000 03680004 00000000 00000000     ......h.........
   1103c:	0000007d 00000000 682f2e2e 742f6c70     }........./hpl/t
   1104c:	70682f63 63745f6c 0000632e 00004a25     c/hpl_tc.c..%J..
   1105c:	00000804                                ....

00011060 <_usb_ep_cfgs>:
   11060:	20001264 00000000 00000040 20001224     d.. ....@...$.. 
   11070:	200011e4 00400040 200011a4 20001164     ... @.@.... d.. 
   11080:	00400040 20001124 200010e4 00400040     @.@.$.. ... @.@.
   11090:	200010a4 00000000 00000040 00005c66     ... ....@...f\..
   110a0:	00005c42 00005c66 00005c48 00005c66     B\..f\..H\..f\..
   110b0:	00005c12 00005c66 00005c66 00005c66     .\..f\..f\..f\..
   110c0:	00005c24 00005c66 00005c4e 752f2e2e     $\..f\..N\..../u
   110d0:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
   110e0:	00000063                                c...

000110e4 <_ZTV6Stream>:
	...
   110ec:	00006471 00006473 00006109 0000610d     qd..sd...a...a..
   110fc:	00006471 00006471 00006471              qd..qd..qd..

00011108 <_ZTV9CDC_Class>:
	...
   11110:	00006177 00006325 00006109 000062a5     wa..%c...a...b..
   11120:	0000619f 0000620d 0000614d 00006235     .a...b..Ma..5b..
   11130:	00006395 000062b5 2e257830 00005838     .c...b..0x%.8X..
   11140:	006e616e 00666e69 0066766f 656e6f74     nan.inf.ovf.tone
   11150:	0000203a 00000009 00707865 00676f6c     : ......exp.log.
   11160:	00776f70 00000000                       pow.....

00011168 <halF>:
   11168:	00000000 3fe00000 00000000 bfe00000     .......?........

00011178 <ln2HI>:
   11178:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00011188 <ln2LO>:
   11188:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..

00011198 <TWO52>:
   11198:	00000000 43300000 00000000 c3300000     ......0C......0.
   111a8:	000097dc 000097ac 000097be 00009700     ................
   111b8:	000097be 000097a2 000097be 00009700     ................
   111c8:	000097ac 000097ac 000097a2 00009700     ................
   111d8:	00009708 00009708 00009708 000097c4     ................
   111e8:	000097ac 000097ac 00009780 00009864     ............d...
   111f8:	00009780 000097a2 00009780 00009864     ............d...
   11208:	000097ac 000097ac 000097a2 00009864     ............d...
   11218:	00009708 00009708 00009708 0000986e     ............n...
   11228:	00009b5c 00009aac 00009aac 00009aaa     \...............
   11238:	00009b4e 00009b4e 00009b44 00009aaa     N...N...D.......
   11248:	00009b4e 00009b44 00009b4e 00009aaa     N...D...N.......
   11258:	00009b54 00009b54 00009b54 00009be4     T...T...T.......
   11268:	0000a92c 0000a90e 0000a8c8 0000a7e6     ,...............
   11278:	0000a8c8 0000a900 0000a8c8 0000a7e6     ................
   11288:	0000a90e 0000a90e 0000a900 0000a7e6     ................
   11298:	0000a7de 0000a7de 0000a7de 0000ab44     ............D...
   112a8:	0000b18c 0000b04c 0000b04c 0000b048     ....L...L...H...
   112b8:	0000b164 0000b164 0000b156 0000b048     d...d...V...H...
   112c8:	0000b164 0000b156 0000b164 0000b048     d...V...d...H...
   112d8:	0000b16c 0000b16c 0000b16c 0000b370     l...l...l...p...

000112e8 <_global_impure_ptr>:
   112e8:	20000078 0000c6d2 0000c7a6 0000c7a6     x.. ............
   112f8:	0000c6be 0000c7a6 0000c7a6 0000c7a6     ................
   11308:	0000c7a6 0000c7a6 0000c7a6 0000c778     ............x...
   11318:	0000c28a 0000c7a6 0000c280 0000c294     ................
   11328:	0000c7a6 0000c6c8 0000c454 0000c454     ........T...T...
   11338:	0000c454 0000c454 0000c454 0000c454     T...T...T...T...
   11348:	0000c454 0000c454 0000c454 0000c7a6     T...T...T.......
   11358:	0000c7a6 0000c7a6 0000c7a6 0000c7a6     ................
   11368:	0000c7a6 0000c7a6 0000c7a6 0000c7a6     ................
   11378:	0000c7a6 0000c78e 0000c6e2 0000c7a6     ................
   11388:	0000c6e2 0000c7a6 0000c7a6 0000c7a6     ................
   11398:	0000c7a6 0000c648 0000c7a6 0000c7a6     ....H...........
   113a8:	0000c652 0000c7a6 0000c7a6 0000c7a6     R...............
   113b8:	0000c7a6 0000c7a6 0000c680 0000c7a6     ................
   113c8:	0000c7a6 0000c6ae 0000c7a6 0000c7a6     ................
   113d8:	0000c7a6 0000c7a6 0000c7a6 0000c7a6     ................
   113e8:	0000c7a6 0000c7a6 0000c7a6 0000c7a6     ................
   113f8:	0000c494 0000c4ca 0000c6e2 0000c6e2     ................
   11408:	0000c6e2 0000c572 0000c4ca 0000c7a6     ....r...........
   11418:	0000c7a6 0000c57c 0000c7a6 0000c58e     ....|...........
   11428:	0000c7a2 0000c5bc 0000c5e6 0000c7a6     ................
   11438:	0000c5f0 0000c7a6 0000c79e 0000c7a6     ................
   11448:	0000c7a6 0000c2e2 00464e49 004e414e     ........INF.NAN.
   11458:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   11468:	00000000 33323130 37363534 62613938     ....0123456789ab
   11478:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   11488:	00000030                                0...

0001148c <blanks.7238>:
   1148c:	20202020 20202020 20202020 20202020                     

0001149c <zeroes.7239>:
   1149c:	30303030 30303030 30303030 30303030     0000000000000000
   114ac:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   114bc:	00000000                                ....

000114c0 <__mprec_bigtens>:
   114c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   114d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   114e0:	7f73bf3c 75154fdd                       <.s..O.u

000114e8 <__mprec_tens>:
   114e8:	00000000 3ff00000 00000000 40240000     .......?......$@
   114f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   11508:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   11518:	00000000 412e8480 00000000 416312d0     .......A......cA
   11528:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   11538:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   11548:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   11558:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   11568:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   11578:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   11588:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   11598:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   115a8:	79d99db4 44ea7843                       ...yCx.D

000115b0 <p05.6055>:
   115b0:	00000005 00000019 0000007d 00000043     ........}...C...
   115c0:	49534f50 00000058 0000002e              POSIX.......

000115cc <_ctype_>:
   115cc:	20202000 20202020 28282020 20282828     .         ((((( 
   115dc:	20202020 20202020 20202020 20202020                     
   115ec:	10108820 10101010 10101010 10101010      ...............
   115fc:	04040410 04040404 10040404 10101010     ................
   1160c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1161c:	01010101 01010101 01010101 10101010     ................
   1162c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1163c:	02020202 02020202 02020202 10101010     ................
   1164c:	00000020 00000000 00000000 00000000      ...............
	...

000116d0 <_init>:
   116d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116d2:	46c0      	nop			; (mov r8, r8)
   116d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   116d6:	bc08      	pop	{r3}
   116d8:	469e      	mov	lr, r3
   116da:	4770      	bx	lr

000116dc <__init_array_start>:
   116dc:	0000d9dd 	.word	0x0000d9dd

000116e0 <__frame_dummy_init_array_entry>:
   116e0:	000000dd 00000601 00001185 00001b65     ............e...
   116f0:	00006455 00006ac1 00006df1              Ud...j...m..

000116fc <_fini>:
   116fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116fe:	46c0      	nop			; (mov r8, r8)
   11700:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11702:	bc08      	pop	{r3}
   11704:	469e      	mov	lr, r3
   11706:	4770      	bx	lr

00011708 <__fini_array_start>:
   11708:	000000b5 	.word	0x000000b5
