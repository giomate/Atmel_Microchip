
LTC_SAMD21_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011864  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00011864  00011864  00021864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a20  20000000  0001186c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ba4  20000a20  00012290  00030a20  2**3
                  ALLOC
  4 .stack        00002004  200015c4  00012e34  00030a20  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005f0ae  00000000  00000000  00030aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009372  00000000  00000000  0008fb4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001e67f  00000000  00000000  00098ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000019a8  00000000  00000000  000b7540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b68  00000000  00000000  000b8ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029432  00000000  00000000  000baa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000258ce  00000000  00000000  000e3e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c1d1  00000000  00000000  00109750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005d94  00000000  00000000  001a5924  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000009c  00000000  00000000  001ab6b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  001ab754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 35 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .5. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 4d 37 00 00 15 01 00 00 15 01 00 00     ....M7..........
      5c:	f9 55 00 00 15 01 00 00 15 01 00 00 15 01 00 00     .U..............
      6c:	15 01 00 00 8d 3b 00 00 15 01 00 00 15 01 00 00     .....;..........
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 49 42 00 00     ............IB..
      8c:	5d 42 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ]B..............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a20 	.word	0x20000a20
      d4:	00000000 	.word	0x00000000
      d8:	0001186c 	.word	0x0001186c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a24 	.word	0x20000a24
     108:	0001186c 	.word	0x0001186c
     10c:	0001186c 	.word	0x0001186c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	0001186c 	.word	0x0001186c
     1ac:	20000000 	.word	0x20000000
     1b0:	20000a20 	.word	0x20000a20
     1b4:	20000a20 	.word	0x20000a20
     1b8:	200015c4 	.word	0x200015c4
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	0000c011 	.word	0x0000c011
     1d8:	000007c1 	.word	0x000007c1

000001dc <_ZN15LTC5548_HANDLERD1Ev>:
	// TODO Auto-generated constructor stub
	direction=true;
	next_RF_frequency=3600;
}

LTC5548_HANDLER::~LTC5548_HANDLER() {
     1dc:	b510      	push	{r4, lr}
     1de:	0004      	movs	r4, r0
     1e0:	4b01      	ldr	r3, [pc, #4]	; (1e8 <_ZN15LTC5548_HANDLERD1Ev+0xc>)
     1e2:	4798      	blx	r3
	// TODO Auto-generated destructor stub
}
     1e4:	0020      	movs	r0, r4
     1e6:	bd10      	pop	{r4, pc}
     1e8:	000008a1 	.word	0x000008a1

000001ec <_ZN15LTC5548_HANDLERC1Ev>:
LTC5548_HANDLER::LTC5548_HANDLER() {
     1ec:	b510      	push	{r4, lr}
     1ee:	0004      	movs	r4, r0
     1f0:	4b06      	ldr	r3, [pc, #24]	; (20c <_ZN15LTC5548_HANDLERC1Ev+0x20>)
     1f2:	4798      	blx	r3
     1f4:	2300      	movs	r3, #0
     1f6:	6623      	str	r3, [r4, #96]	; 0x60
     1f8:	6663      	str	r3, [r4, #100]	; 0x64
     1fa:	66a3      	str	r3, [r4, #104]	; 0x68
     1fc:	66e3      	str	r3, [r4, #108]	; 0x6c
	direction=true;
     1fe:	2201      	movs	r2, #1
     200:	3394      	adds	r3, #148	; 0x94
     202:	54e2      	strb	r2, [r4, r3]
	next_RF_frequency=3600;
     204:	4b02      	ldr	r3, [pc, #8]	; (210 <_ZN15LTC5548_HANDLERC1Ev+0x24>)
     206:	6763      	str	r3, [r4, #116]	; 0x74
}
     208:	0020      	movs	r0, r4
     20a:	bd10      	pop	{r4, pc}
     20c:	0000085d 	.word	0x0000085d
     210:	45610000 	.word	0x45610000

00000214 <_Z41__static_initialization_and_destruction_0ii>:
	{
		Check_Mixer();
	}
}

LTC5548_HANDLER ltc;
     214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     216:	2801      	cmp	r0, #1
     218:	d000      	beq.n	21c <_Z41__static_initialization_and_destruction_0ii+0x8>
     21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     21c:	4b13      	ldr	r3, [pc, #76]	; (26c <_Z41__static_initialization_and_destruction_0ii+0x58>)
     21e:	4299      	cmp	r1, r3
     220:	d1fb      	bne.n	21a <_Z41__static_initialization_and_destruction_0ii+0x6>
static lmx2694_Handler local_lmx;
     222:	4c13      	ldr	r4, [pc, #76]	; (270 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     224:	0020      	movs	r0, r4
     226:	4b13      	ldr	r3, [pc, #76]	; (274 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     228:	4798      	blx	r3
     22a:	4d13      	ldr	r5, [pc, #76]	; (278 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     22c:	002a      	movs	r2, r5
     22e:	4913      	ldr	r1, [pc, #76]	; (27c <_Z41__static_initialization_and_destruction_0ii+0x68>)
     230:	0020      	movs	r0, r4
     232:	4e13      	ldr	r6, [pc, #76]	; (280 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     234:	47b0      	blx	r6
static ADF5610_Driver local_adf;
     236:	3458      	adds	r4, #88	; 0x58
     238:	0020      	movs	r0, r4
     23a:	4b12      	ldr	r3, [pc, #72]	; (284 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     23c:	4798      	blx	r3
     23e:	002a      	movs	r2, r5
     240:	4911      	ldr	r1, [pc, #68]	; (288 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     242:	0020      	movs	r0, r4
     244:	47b0      	blx	r6
static ZCD_Handler local_counter;
     246:	4c11      	ldr	r4, [pc, #68]	; (28c <_Z41__static_initialization_and_destruction_0ii+0x78>)
     248:	0027      	movs	r7, r4
     24a:	3760      	adds	r7, #96	; 0x60
     24c:	0038      	movs	r0, r7
     24e:	4b10      	ldr	r3, [pc, #64]	; (290 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     250:	4798      	blx	r3
     252:	002a      	movs	r2, r5
     254:	490f      	ldr	r1, [pc, #60]	; (294 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     256:	0038      	movs	r0, r7
     258:	47b0      	blx	r6
LTC5548_HANDLER ltc;
     25a:	3474      	adds	r4, #116	; 0x74
     25c:	0020      	movs	r0, r4
     25e:	4b0e      	ldr	r3, [pc, #56]	; (298 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     260:	4798      	blx	r3
     262:	002a      	movs	r2, r5
     264:	490d      	ldr	r1, [pc, #52]	; (29c <_Z41__static_initialization_and_destruction_0ii+0x88>)
     266:	0020      	movs	r0, r4
     268:	47b0      	blx	r6
     26a:	e7d6      	b.n	21a <_Z41__static_initialization_and_destruction_0ii+0x6>
     26c:	0000ffff 	.word	0x0000ffff
     270:	20000a40 	.word	0x20000a40
     274:	00001459 	.word	0x00001459
     278:	20000000 	.word	0x20000000
     27c:	00001499 	.word	0x00001499
     280:	00007161 	.word	0x00007161
     284:	00000b6d 	.word	0x00000b6d
     288:	00000bbd 	.word	0x00000bbd
     28c:	20000bc0 	.word	0x20000bc0
     290:	00006d55 	.word	0x00006d55
     294:	00006d79 	.word	0x00006d79
     298:	000001ed 	.word	0x000001ed
     29c:	000001dd 	.word	0x000001dd

000002a0 <_ZN15LTC5548_HANDLER8Start_RFEv>:
bool LTC5548_HANDLER::Start_RF(void){
     2a0:	b570      	push	{r4, r5, r6, lr}
     2a2:	0006      	movs	r6, r0
		while(!lmx->Init()){
     2a4:	6c70      	ldr	r0, [r6, #68]	; 0x44
     2a6:	4b10      	ldr	r3, [pc, #64]	; (2e8 <_ZN15LTC5548_HANDLER8Start_RFEv+0x48>)
     2a8:	4798      	blx	r3
     2aa:	2800      	cmp	r0, #0
     2ac:	d111      	bne.n	2d2 <_ZN15LTC5548_HANDLER8Start_RFEv+0x32>
			delay_ms(100);
     2ae:	3064      	adds	r0, #100	; 0x64
     2b0:	4b0e      	ldr	r3, [pc, #56]	; (2ec <_ZN15LTC5548_HANDLER8Start_RFEv+0x4c>)
     2b2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     2b4:	2180      	movs	r1, #128	; 0x80
     2b6:	05c9      	lsls	r1, r1, #23
     2b8:	239c      	movs	r3, #156	; 0x9c
     2ba:	22c0      	movs	r2, #192	; 0xc0
     2bc:	05d2      	lsls	r2, r2, #23
     2be:	50d1      	str	r1, [r2, r3]
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <_ZN15LTC5548_HANDLER8Start_RFEv+0x50>)
     2c2:	490c      	ldr	r1, [pc, #48]	; (2f4 <_ZN15LTC5548_HANDLER8Start_RFEv+0x54>)
     2c4:	0028      	movs	r0, r5
     2c6:	4c0c      	ldr	r4, [pc, #48]	; (2f8 <_ZN15LTC5548_HANDLER8Start_RFEv+0x58>)
     2c8:	47a0      	blx	r4
     2ca:	490c      	ldr	r1, [pc, #48]	; (2fc <_ZN15LTC5548_HANDLER8Start_RFEv+0x5c>)
     2cc:	0028      	movs	r0, r5
     2ce:	47a0      	blx	r4
     2d0:	e7e8      	b.n	2a4 <_ZN15LTC5548_HANDLER8Start_RFEv+0x4>
     2d2:	4d07      	ldr	r5, [pc, #28]	; (2f0 <_ZN15LTC5548_HANDLER8Start_RFEv+0x50>)
     2d4:	490a      	ldr	r1, [pc, #40]	; (300 <_ZN15LTC5548_HANDLER8Start_RFEv+0x60>)
     2d6:	0028      	movs	r0, r5
     2d8:	4c07      	ldr	r4, [pc, #28]	; (2f8 <_ZN15LTC5548_HANDLER8Start_RFEv+0x58>)
     2da:	47a0      	blx	r4
     2dc:	4907      	ldr	r1, [pc, #28]	; (2fc <_ZN15LTC5548_HANDLER8Start_RFEv+0x5c>)
     2de:	0028      	movs	r0, r5
     2e0:	47a0      	blx	r4
}
     2e2:	2001      	movs	r0, #1
     2e4:	bd70      	pop	{r4, r5, r6, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	00001b01 	.word	0x00001b01
     2ec:	000025c1 	.word	0x000025c1
     2f0:	200013a0 	.word	0x200013a0
     2f4:	00010c88 	.word	0x00010c88
     2f8:	0000668d 	.word	0x0000668d
     2fc:	00010ca0 	.word	0x00010ca0
     300:	00010ca4 	.word	0x00010ca4

00000304 <_ZN15LTC5548_HANDLER8Start_LOEv>:
bool LTC5548_HANDLER::Start_LO(void){
     304:	b570      	push	{r4, r5, r6, lr}
     306:	0006      	movs	r6, r0
	while(!adf->Init()){
     308:	6cb0      	ldr	r0, [r6, #72]	; 0x48
     30a:	4b10      	ldr	r3, [pc, #64]	; (34c <_ZN15LTC5548_HANDLER8Start_LOEv+0x48>)
     30c:	4798      	blx	r3
     30e:	2800      	cmp	r0, #0
     310:	d111      	bne.n	336 <_ZN15LTC5548_HANDLER8Start_LOEv+0x32>
		delay_ms(100);
     312:	3064      	adds	r0, #100	; 0x64
     314:	4b0e      	ldr	r3, [pc, #56]	; (350 <_ZN15LTC5548_HANDLER8Start_LOEv+0x4c>)
     316:	4798      	blx	r3
     318:	2180      	movs	r1, #128	; 0x80
     31a:	05c9      	lsls	r1, r1, #23
     31c:	239c      	movs	r3, #156	; 0x9c
     31e:	22c0      	movs	r2, #192	; 0xc0
     320:	05d2      	lsls	r2, r2, #23
     322:	50d1      	str	r1, [r2, r3]
     324:	4d0b      	ldr	r5, [pc, #44]	; (354 <_ZN15LTC5548_HANDLER8Start_LOEv+0x50>)
     326:	490c      	ldr	r1, [pc, #48]	; (358 <_ZN15LTC5548_HANDLER8Start_LOEv+0x54>)
     328:	0028      	movs	r0, r5
     32a:	4c0c      	ldr	r4, [pc, #48]	; (35c <_ZN15LTC5548_HANDLER8Start_LOEv+0x58>)
     32c:	47a0      	blx	r4
     32e:	490c      	ldr	r1, [pc, #48]	; (360 <_ZN15LTC5548_HANDLER8Start_LOEv+0x5c>)
     330:	0028      	movs	r0, r5
     332:	47a0      	blx	r4
     334:	e7e8      	b.n	308 <_ZN15LTC5548_HANDLER8Start_LOEv+0x4>
     336:	4d07      	ldr	r5, [pc, #28]	; (354 <_ZN15LTC5548_HANDLER8Start_LOEv+0x50>)
     338:	490a      	ldr	r1, [pc, #40]	; (364 <_ZN15LTC5548_HANDLER8Start_LOEv+0x60>)
     33a:	0028      	movs	r0, r5
     33c:	4c07      	ldr	r4, [pc, #28]	; (35c <_ZN15LTC5548_HANDLER8Start_LOEv+0x58>)
     33e:	47a0      	blx	r4
     340:	4907      	ldr	r1, [pc, #28]	; (360 <_ZN15LTC5548_HANDLER8Start_LOEv+0x5c>)
     342:	0028      	movs	r0, r5
     344:	47a0      	blx	r4
}
     346:	2001      	movs	r0, #1
     348:	bd70      	pop	{r4, r5, r6, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	000012b9 	.word	0x000012b9
     350:	000025c1 	.word	0x000025c1
     354:	200013a0 	.word	0x200013a0
     358:	00010cb8 	.word	0x00010cb8
     35c:	0000668d 	.word	0x0000668d
     360:	00010ca0 	.word	0x00010ca0
     364:	00010cd0 	.word	0x00010cd0

00000368 <_ZN15LTC5548_HANDLER6Set_RFEf>:
bool LTC5548_HANDLER::Set_RF(float f){
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	0004      	movs	r4, r0
     36c:	1c0d      	adds	r5, r1, #0
	lmx->Set_Target_Frequency(f);
     36e:	6c40      	ldr	r0, [r0, #68]	; 0x44
     370:	4b08      	ldr	r3, [pc, #32]	; (394 <_ZN15LTC5548_HANDLER6Set_RFEf+0x2c>)
     372:	4798      	blx	r3
	while (!lmx->Is_Locked())
     374:	6c60      	ldr	r0, [r4, #68]	; 0x44
     376:	4b08      	ldr	r3, [pc, #32]	; (398 <_ZN15LTC5548_HANDLER6Set_RFEf+0x30>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d107      	bne.n	38e <_ZN15LTC5548_HANDLER6Set_RFEf+0x26>
		delay_ms(100);
     37e:	3064      	adds	r0, #100	; 0x64
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <_ZN15LTC5548_HANDLER6Set_RFEf+0x34>)
     382:	4798      	blx	r3
		lmx->Set_Target_Frequency(f);
     384:	1c29      	adds	r1, r5, #0
     386:	6c60      	ldr	r0, [r4, #68]	; 0x44
     388:	4b02      	ldr	r3, [pc, #8]	; (394 <_ZN15LTC5548_HANDLER6Set_RFEf+0x2c>)
     38a:	4798      	blx	r3
	while (!lmx->Is_Locked())
     38c:	e7f2      	b.n	374 <_ZN15LTC5548_HANDLER6Set_RFEf+0xc>
}
     38e:	2001      	movs	r0, #1
     390:	bd70      	pop	{r4, r5, r6, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	00001bfd 	.word	0x00001bfd
     398:	00001a29 	.word	0x00001a29
     39c:	000025c1 	.word	0x000025c1

000003a0 <_ZN15LTC5548_HANDLER6Set_LOEf>:
bool LTC5548_HANDLER::Set_LO(float f){
     3a0:	b570      	push	{r4, r5, r6, lr}
     3a2:	0004      	movs	r4, r0
     3a4:	1c0d      	adds	r5, r1, #0
	adf->Set_Target_Frequency(f);
     3a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
     3a8:	4b08      	ldr	r3, [pc, #32]	; (3cc <_ZN15LTC5548_HANDLER6Set_LOEf+0x2c>)
     3aa:	4798      	blx	r3
	while (!adf->Is_Locked())
     3ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     3ae:	4b08      	ldr	r3, [pc, #32]	; (3d0 <_ZN15LTC5548_HANDLER6Set_LOEf+0x30>)
     3b0:	4798      	blx	r3
     3b2:	2800      	cmp	r0, #0
     3b4:	d107      	bne.n	3c6 <_ZN15LTC5548_HANDLER6Set_LOEf+0x26>
		delay_ms(100);
     3b6:	3064      	adds	r0, #100	; 0x64
     3b8:	4b06      	ldr	r3, [pc, #24]	; (3d4 <_ZN15LTC5548_HANDLER6Set_LOEf+0x34>)
     3ba:	4798      	blx	r3
		adf->Set_Target_Frequency(f);
     3bc:	1c29      	adds	r1, r5, #0
     3be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     3c0:	4b02      	ldr	r3, [pc, #8]	; (3cc <_ZN15LTC5548_HANDLER6Set_LOEf+0x2c>)
     3c2:	4798      	blx	r3
	while (!adf->Is_Locked())
     3c4:	e7f2      	b.n	3ac <_ZN15LTC5548_HANDLER6Set_LOEf+0xc>
}
     3c6:	2001      	movs	r0, #1
     3c8:	bd70      	pop	{r4, r5, r6, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	00001355 	.word	0x00001355
     3d0:	00000c25 	.word	0x00000c25
     3d4:	000025c1 	.word	0x000025c1

000003d8 <_ZN15LTC5548_HANDLER10Set_EnableEb>:
bool LTC5548_HANDLER::Set_Enable(bool st){
     3d8:	b570      	push	{r4, r5, r6, lr}
     3da:	000c      	movs	r4, r1
	enable=st;
     3dc:	2358      	movs	r3, #88	; 0x58
     3de:	54c1      	strb	r1, [r0, r3]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     3e0:	2900      	cmp	r1, #0
     3e2:	d013      	beq.n	40c <_ZN15LTC5548_HANDLER10Set_EnableEb+0x34>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3e4:	2180      	movs	r1, #128	; 0x80
     3e6:	00c9      	lsls	r1, r1, #3
     3e8:	3340      	adds	r3, #64	; 0x40
     3ea:	22c0      	movs	r2, #192	; 0xc0
     3ec:	05d2      	lsls	r2, r2, #23
     3ee:	50d1      	str	r1, [r2, r3]
	if (enable)
     3f0:	2358      	movs	r3, #88	; 0x58
     3f2:	5cc3      	ldrb	r3, [r0, r3]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d110      	bne.n	41a <_ZN15LTC5548_HANDLER10Set_EnableEb+0x42>
     3f8:	4e0c      	ldr	r6, [pc, #48]	; (42c <_ZN15LTC5548_HANDLER10Set_EnableEb+0x54>)
     3fa:	490d      	ldr	r1, [pc, #52]	; (430 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x58>)
     3fc:	0030      	movs	r0, r6
     3fe:	4d0d      	ldr	r5, [pc, #52]	; (434 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x5c>)
     400:	47a8      	blx	r5
     402:	490d      	ldr	r1, [pc, #52]	; (438 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x60>)
     404:	0030      	movs	r0, r6
     406:	47a8      	blx	r5
}
     408:	0020      	movs	r0, r4
     40a:	bd70      	pop	{r4, r5, r6, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     40c:	2180      	movs	r1, #128	; 0x80
     40e:	00c9      	lsls	r1, r1, #3
     410:	2394      	movs	r3, #148	; 0x94
     412:	22c0      	movs	r2, #192	; 0xc0
     414:	05d2      	lsls	r2, r2, #23
     416:	50d1      	str	r1, [r2, r3]
     418:	e7ea      	b.n	3f0 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x18>
     41a:	4e04      	ldr	r6, [pc, #16]	; (42c <_ZN15LTC5548_HANDLER10Set_EnableEb+0x54>)
     41c:	4907      	ldr	r1, [pc, #28]	; (43c <_ZN15LTC5548_HANDLER10Set_EnableEb+0x64>)
     41e:	0030      	movs	r0, r6
     420:	4d04      	ldr	r5, [pc, #16]	; (434 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x5c>)
     422:	47a8      	blx	r5
     424:	4904      	ldr	r1, [pc, #16]	; (438 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x60>)
     426:	0030      	movs	r0, r6
     428:	47a8      	blx	r5
     42a:	e7ed      	b.n	408 <_ZN15LTC5548_HANDLER10Set_EnableEb+0x30>
     42c:	200013a0 	.word	0x200013a0
     430:	00010cf4 	.word	0x00010cf4
     434:	0000668d 	.word	0x0000668d
     438:	00010ca0 	.word	0x00010ca0
     43c:	00010ce4 	.word	0x00010ce4

00000440 <_ZN15LTC5548_HANDLER11Start_MixerEv>:
bool LTC5548_HANDLER::Start_Mixer(void){
     440:	b510      	push	{r4, lr}
     442:	0004      	movs	r4, r0
	if(Start_LO()){
     444:	4b1f      	ldr	r3, [pc, #124]	; (4c4 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x84>)
     446:	4798      	blx	r3
     448:	2800      	cmp	r0, #0
     44a:	d033      	beq.n	4b4 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x74>
		adf->Set_Target_Frequency(CENTER_FREQUENCY);
     44c:	491e      	ldr	r1, [pc, #120]	; (4c8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x88>)
     44e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     450:	4b1e      	ldr	r3, [pc, #120]	; (4cc <_ZN15LTC5548_HANDLER11Start_MixerEv+0x8c>)
     452:	4798      	blx	r3
		while (!adf->Is_Locked())
     454:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     456:	4b1e      	ldr	r3, [pc, #120]	; (4d0 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x90>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d107      	bne.n	46e <_ZN15LTC5548_HANDLER11Start_MixerEv+0x2e>
			delay_ms(100);
     45e:	3064      	adds	r0, #100	; 0x64
     460:	4b1c      	ldr	r3, [pc, #112]	; (4d4 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x94>)
     462:	4798      	blx	r3
			adf->Set_Target_Frequency(CENTER_FREQUENCY);
     464:	4918      	ldr	r1, [pc, #96]	; (4c8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x88>)
     466:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     468:	4b18      	ldr	r3, [pc, #96]	; (4cc <_ZN15LTC5548_HANDLER11Start_MixerEv+0x8c>)
     46a:	4798      	blx	r3
		while (!adf->Is_Locked())
     46c:	e7f2      	b.n	454 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x14>
		if (Start_RF())
     46e:	0020      	movs	r0, r4
     470:	4b19      	ldr	r3, [pc, #100]	; (4d8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x98>)
     472:	4798      	blx	r3
     474:	2800      	cmp	r0, #0
     476:	d018      	beq.n	4aa <_ZN15LTC5548_HANDLER11Start_MixerEv+0x6a>
			lmx->Set_Target_Frequency(OPTIMAL_FREQUENCY);
     478:	4918      	ldr	r1, [pc, #96]	; (4dc <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     47a:	6c60      	ldr	r0, [r4, #68]	; 0x44
     47c:	4b18      	ldr	r3, [pc, #96]	; (4e0 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa0>)
     47e:	4798      	blx	r3
			while (!lmx->Is_Locked())
     480:	6c60      	ldr	r0, [r4, #68]	; 0x44
     482:	4b18      	ldr	r3, [pc, #96]	; (4e4 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa4>)
     484:	4798      	blx	r3
     486:	2800      	cmp	r0, #0
     488:	d107      	bne.n	49a <_ZN15LTC5548_HANDLER11Start_MixerEv+0x5a>
				delay_ms(100);
     48a:	3064      	adds	r0, #100	; 0x64
     48c:	4b11      	ldr	r3, [pc, #68]	; (4d4 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x94>)
     48e:	4798      	blx	r3
				lmx->Set_Target_Frequency(OPTIMAL_FREQUENCY);
     490:	4912      	ldr	r1, [pc, #72]	; (4dc <_ZN15LTC5548_HANDLER11Start_MixerEv+0x9c>)
     492:	6c60      	ldr	r0, [r4, #68]	; 0x44
     494:	4b12      	ldr	r3, [pc, #72]	; (4e0 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa0>)
     496:	4798      	blx	r3
			while (!lmx->Is_Locked())
     498:	e7f2      	b.n	480 <_ZN15LTC5548_HANDLER11Start_MixerEv+0x40>
			tune_rf_frequency=lmx->current_frequency;
     49a:	6c63      	ldr	r3, [r4, #68]	; 0x44
     49c:	681b      	ldr	r3, [r3, #0]
     49e:	6523      	str	r3, [r4, #80]	; 0x50
			Set_Enable(true);
     4a0:	2101      	movs	r1, #1
     4a2:	0020      	movs	r0, r4
     4a4:	4b10      	ldr	r3, [pc, #64]	; (4e8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa8>)
     4a6:	4798      	blx	r3
     4a8:	e008      	b.n	4bc <_ZN15LTC5548_HANDLER11Start_MixerEv+0x7c>
			Set_Enable(false);
     4aa:	2100      	movs	r1, #0
     4ac:	0020      	movs	r0, r4
     4ae:	4b0e      	ldr	r3, [pc, #56]	; (4e8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa8>)
     4b0:	4798      	blx	r3
     4b2:	e003      	b.n	4bc <_ZN15LTC5548_HANDLER11Start_MixerEv+0x7c>
		Set_Enable(false);
     4b4:	2100      	movs	r1, #0
     4b6:	0020      	movs	r0, r4
     4b8:	4b0b      	ldr	r3, [pc, #44]	; (4e8 <_ZN15LTC5548_HANDLER11Start_MixerEv+0xa8>)
     4ba:	4798      	blx	r3
	return enable;
     4bc:	2358      	movs	r3, #88	; 0x58
     4be:	5ce0      	ldrb	r0, [r4, r3]
}
     4c0:	bd10      	pop	{r4, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	00000305 	.word	0x00000305
     4c8:	460ca000 	.word	0x460ca000
     4cc:	00001355 	.word	0x00001355
     4d0:	00000c25 	.word	0x00000c25
     4d4:	000025c1 	.word	0x000025c1
     4d8:	000002a1 	.word	0x000002a1
     4dc:	460ca800 	.word	0x460ca800
     4e0:	00001bfd 	.word	0x00001bfd
     4e4:	00001a29 	.word	0x00001a29
     4e8:	000003d9 	.word	0x000003d9

000004ec <_ZN15LTC5548_HANDLER4InitEv>:
bool LTC5548_HANDLER::Init(void){
     4ec:	b510      	push	{r4, lr}
     4ee:	0004      	movs	r4, r0
	Set_Enable(false);
     4f0:	2100      	movs	r1, #0
     4f2:	4b0a      	ldr	r3, [pc, #40]	; (51c <_ZN15LTC5548_HANDLER4InitEv+0x30>)
     4f4:	4798      	blx	r3
	lmx=&local_lmx;
     4f6:	4b0a      	ldr	r3, [pc, #40]	; (520 <_ZN15LTC5548_HANDLER4InitEv+0x34>)
     4f8:	6463      	str	r3, [r4, #68]	; 0x44
	adf=&local_adf;
     4fa:	3358      	adds	r3, #88	; 0x58
     4fc:	64a3      	str	r3, [r4, #72]	; 0x48
	zcd=&local_counter;
     4fe:	4b09      	ldr	r3, [pc, #36]	; (524 <_ZN15LTC5548_HANDLER4InitEv+0x38>)
     500:	3360      	adds	r3, #96	; 0x60
     502:	64e3      	str	r3, [r4, #76]	; 0x4c
	Start_Mixer();
     504:	0020      	movs	r0, r4
     506:	4b08      	ldr	r3, [pc, #32]	; (528 <_ZN15LTC5548_HANDLER4InitEv+0x3c>)
     508:	4798      	blx	r3
	zcd->Init();
     50a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     50c:	4b07      	ldr	r3, [pc, #28]	; (52c <_ZN15LTC5548_HANDLER4InitEv+0x40>)
     50e:	4798      	blx	r3
	return !enable;
     510:	2358      	movs	r3, #88	; 0x58
     512:	5ce0      	ldrb	r0, [r4, r3]
     514:	2301      	movs	r3, #1
     516:	4058      	eors	r0, r3
     518:	b2c0      	uxtb	r0, r0
}
     51a:	bd10      	pop	{r4, pc}
     51c:	000003d9 	.word	0x000003d9
     520:	20000a40 	.word	0x20000a40
     524:	20000bc0 	.word	0x20000bc0
     528:	00000441 	.word	0x00000441
     52c:	00006d8d 	.word	0x00006d8d

00000530 <_ZN15LTC5548_HANDLER11Check_MixerEv>:
bool LTC5548_HANDLER::Check_Mixer(void){
     530:	b510      	push	{r4, lr}
     532:	0004      	movs	r4, r0
	if(enable){
     534:	2358      	movs	r3, #88	; 0x58
     536:	5cc3      	ldrb	r3, [r0, r3]
     538:	2b00      	cmp	r3, #0
     53a:	d018      	beq.n	56e <_ZN15LTC5548_HANDLER11Check_MixerEv+0x3e>
		if(adf->Is_Locked()){
     53c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     53e:	4b17      	ldr	r3, [pc, #92]	; (59c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x6c>)
     540:	4798      	blx	r3
     542:	2800      	cmp	r0, #0
     544:	d00c      	beq.n	560 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x30>
			if (lmx->Is_Locked())
     546:	6c60      	ldr	r0, [r4, #68]	; 0x44
     548:	4b15      	ldr	r3, [pc, #84]	; (5a0 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x70>)
     54a:	4798      	blx	r3
     54c:	2800      	cmp	r0, #0
     54e:	d002      	beq.n	556 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x26>
				return enable;
     550:	2358      	movs	r3, #88	; 0x58
     552:	5ce0      	ldrb	r0, [r4, r3]
     554:	e00a      	b.n	56c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x3c>
				Set_Enable(false);
     556:	2100      	movs	r1, #0
     558:	0020      	movs	r0, r4
     55a:	4b12      	ldr	r3, [pc, #72]	; (5a4 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     55c:	4798      	blx	r3
     55e:	e003      	b.n	568 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
			Set_Enable(false);
     560:	2100      	movs	r1, #0
     562:	0020      	movs	r0, r4
     564:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     566:	4798      	blx	r3
	return enable;
     568:	2358      	movs	r3, #88	; 0x58
     56a:	5ce0      	ldrb	r0, [r4, r3]
}
     56c:	bd10      	pop	{r4, pc}
		if (adf->Is_Locked())
     56e:	6c80      	ldr	r0, [r0, #72]	; 0x48
     570:	4b0a      	ldr	r3, [pc, #40]	; (59c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x6c>)
     572:	4798      	blx	r3
     574:	2800      	cmp	r0, #0
     576:	d00d      	beq.n	594 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x64>
			if (lmx->Is_Locked())
     578:	6c60      	ldr	r0, [r4, #68]	; 0x44
     57a:	4b09      	ldr	r3, [pc, #36]	; (5a0 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x70>)
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	d004      	beq.n	58c <_ZN15LTC5548_HANDLER11Check_MixerEv+0x5c>
				Set_Enable(true);
     582:	2101      	movs	r1, #1
     584:	0020      	movs	r0, r4
     586:	4b07      	ldr	r3, [pc, #28]	; (5a4 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x74>)
     588:	4798      	blx	r3
     58a:	e7ed      	b.n	568 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
				Start_RF();
     58c:	0020      	movs	r0, r4
     58e:	4b06      	ldr	r3, [pc, #24]	; (5a8 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x78>)
     590:	4798      	blx	r3
     592:	e7e9      	b.n	568 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
			Start_Mixer();
     594:	0020      	movs	r0, r4
     596:	4b05      	ldr	r3, [pc, #20]	; (5ac <_ZN15LTC5548_HANDLER11Check_MixerEv+0x7c>)
     598:	4798      	blx	r3
     59a:	e7e5      	b.n	568 <_ZN15LTC5548_HANDLER11Check_MixerEv+0x38>
     59c:	00000c25 	.word	0x00000c25
     5a0:	00001a29 	.word	0x00001a29
     5a4:	000003d9 	.word	0x000003d9
     5a8:	000002a1 	.word	0x000002a1
     5ac:	00000441 	.word	0x00000441

000005b0 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv>:
float LTC5548_HANDLER::Tune_RF_Mixer(){
     5b0:	b510      	push	{r4, lr}
     5b2:	0004      	movs	r4, r0
	if (Check_Mixer())
     5b4:	4b1a      	ldr	r3, [pc, #104]	; (620 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x70>)
     5b6:	4798      	blx	r3
     5b8:	2800      	cmp	r0, #0
     5ba:	d02c      	beq.n	616 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x66>
		if (lmx->Is_Locked())
     5bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
     5be:	4b19      	ldr	r3, [pc, #100]	; (624 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x74>)
     5c0:	4798      	blx	r3
     5c2:	2800      	cmp	r0, #0
     5c4:	d10f      	bne.n	5e6 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x36>
			if (error_counter==0xff)
     5c6:	2380      	movs	r3, #128	; 0x80
     5c8:	5ce3      	ldrb	r3, [r4, r3]
     5ca:	2bff      	cmp	r3, #255	; 0xff
     5cc:	d01f      	beq.n	60e <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x5e>
				delay_ms(10);
     5ce:	200a      	movs	r0, #10
     5d0:	4b15      	ldr	r3, [pc, #84]	; (628 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x78>)
     5d2:	4798      	blx	r3
				lmx->Set_Target_Frequency(next_RF_frequency);
     5d4:	6f61      	ldr	r1, [r4, #116]	; 0x74
     5d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
     5d8:	4b14      	ldr	r3, [pc, #80]	; (62c <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x7c>)
     5da:	4798      	blx	r3
			error_counter++;
     5dc:	2280      	movs	r2, #128	; 0x80
     5de:	5ca3      	ldrb	r3, [r4, r2]
     5e0:	3301      	adds	r3, #1
     5e2:	54a3      	strb	r3, [r4, r2]
     5e4:	e01a      	b.n	61c <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x6c>
			tone=zcd->Get_Tone();
     5e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     5e8:	4b11      	ldr	r3, [pc, #68]	; (630 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x80>)
     5ea:	4798      	blx	r3
     5ec:	0001      	movs	r1, r0
     5ee:	6720      	str	r0, [r4, #112]	; 0x70
			tune_rf_frequency=lmx->current_frequency;
     5f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
     5f2:	681b      	ldr	r3, [r3, #0]
     5f4:	6523      	str	r3, [r4, #80]	; 0x50
			next_RF_frequency=Calculate_Optimum(tone);
     5f6:	0020      	movs	r0, r4
     5f8:	4b0e      	ldr	r3, [pc, #56]	; (634 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x84>)
     5fa:	4798      	blx	r3
     5fc:	1c01      	adds	r1, r0, #0
     5fe:	6760      	str	r0, [r4, #116]	; 0x74
			lmx->Set_Target_Frequency(next_RF_frequency);
     600:	6c60      	ldr	r0, [r4, #68]	; 0x44
     602:	4b0a      	ldr	r3, [pc, #40]	; (62c <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x7c>)
     604:	4798      	blx	r3
			error_counter=0;
     606:	2200      	movs	r2, #0
     608:	2380      	movs	r3, #128	; 0x80
     60a:	54e2      	strb	r2, [r4, r3]
     60c:	e006      	b.n	61c <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x6c>
				Start_RF();
     60e:	0020      	movs	r0, r4
     610:	4b09      	ldr	r3, [pc, #36]	; (638 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x88>)
     612:	4798      	blx	r3
     614:	e7e2      	b.n	5dc <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x2c>
		Check_Mixer();
     616:	0020      	movs	r0, r4
     618:	4b01      	ldr	r3, [pc, #4]	; (620 <_ZN15LTC5548_HANDLER13Tune_RF_MixerEv+0x70>)
     61a:	4798      	blx	r3
	return next_RF_frequency;
     61c:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
     61e:	bd10      	pop	{r4, pc}
     620:	00000531 	.word	0x00000531
     624:	00001a29 	.word	0x00001a29
     628:	000025c1 	.word	0x000025c1
     62c:	00001bfd 	.word	0x00001bfd
     630:	00006dad 	.word	0x00006dad
     634:	000008bd 	.word	0x000008bd
     638:	000002a1 	.word	0x000002a1

0000063c <_ZN15LTC5548_HANDLER14Keep_SearchingEv>:
float LTC5548_HANDLER::Keep_Searching(){
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	0004      	movs	r4, r0
	if (Check_Mixer())
     640:	4b2f      	ldr	r3, [pc, #188]	; (700 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xc4>)
     642:	4798      	blx	r3
     644:	2800      	cmp	r0, #0
     646:	d057      	beq.n	6f8 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xbc>
		Tune_RF_Mixer();
     648:	0020      	movs	r0, r4
     64a:	4b2e      	ldr	r3, [pc, #184]	; (704 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xc8>)
     64c:	4798      	blx	r3
		if ((gradient!=0)&(abs(gradient)<2048))
     64e:	6822      	ldr	r2, [r4, #0]
  using ::wctomb;
#endif // _GLIBCXX_USE_WCHAR_T

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
     650:	17d3      	asrs	r3, r2, #31
     652:	18d1      	adds	r1, r2, r3
     654:	4059      	eors	r1, r3
     656:	0fcb      	lsrs	r3, r1, #31
     658:	2500      	movs	r5, #0
     65a:	482b      	ldr	r0, [pc, #172]	; (708 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xcc>)
     65c:	4288      	cmp	r0, r1
     65e:	416b      	adcs	r3, r5
     660:	b2db      	uxtb	r3, r3
     662:	2a00      	cmp	r2, #0
     664:	d04b      	beq.n	6fe <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xc2>
     666:	2b00      	cmp	r3, #0
     668:	d049      	beq.n	6fe <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xc2>
			current_LO_frequency=adf->current_frequency;
     66a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     66c:	681d      	ldr	r5, [r3, #0]
     66e:	67a5      	str	r5, [r4, #120]	; 0x78
			if (direction)
     670:	2394      	movs	r3, #148	; 0x94
     672:	5ce3      	ldrb	r3, [r4, r3]
     674:	2b00      	cmp	r3, #0
     676:	d029      	beq.n	6cc <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0x90>
				if ((current_LO_frequency+step)>upper_limit)
     678:	238c      	movs	r3, #140	; 0x8c
     67a:	58e1      	ldr	r1, [r4, r3]
     67c:	1c28      	adds	r0, r5, #0
     67e:	4b23      	ldr	r3, [pc, #140]	; (70c <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xd0>)
     680:	4798      	blx	r3
     682:	2384      	movs	r3, #132	; 0x84
     684:	58e1      	ldr	r1, [r4, r3]
     686:	4b22      	ldr	r3, [pc, #136]	; (710 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xd4>)
     688:	4798      	blx	r3
     68a:	2800      	cmp	r0, #0
     68c:	d002      	beq.n	694 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0x58>
					direction=false;
     68e:	2200      	movs	r2, #0
     690:	2394      	movs	r3, #148	; 0x94
     692:	54e2      	strb	r2, [r4, r3]
			next_LO_frequency=direction?current_LO_frequency+step:current_LO_frequency-step;
     694:	2394      	movs	r3, #148	; 0x94
     696:	5ce3      	ldrb	r3, [r4, r3]
     698:	2b00      	cmp	r3, #0
     69a:	d026      	beq.n	6ea <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xae>
     69c:	238c      	movs	r3, #140	; 0x8c
     69e:	58e1      	ldr	r1, [r4, r3]
     6a0:	1c28      	adds	r0, r5, #0
     6a2:	4b1a      	ldr	r3, [pc, #104]	; (70c <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xd0>)
     6a4:	4798      	blx	r3
     6a6:	1c01      	adds	r1, r0, #0
     6a8:	67e1      	str	r1, [r4, #124]	; 0x7c
			Set_LO(next_LO_frequency);
     6aa:	0020      	movs	r0, r4
     6ac:	4b19      	ldr	r3, [pc, #100]	; (714 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xd8>)
     6ae:	4798      	blx	r3
			Update_Optimal_Frequency(adf->current_frequency);
     6b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     6b2:	6818      	ldr	r0, [r3, #0]
//functions
public:
	MIXER_TUNNER_HELPER();
	~MIXER_TUNNER_HELPER();
	float Calculate_Optimum(uint32_t tn);
	void Update_Optimal_Frequency(float f){optimal_frequency=f+TUNE_START_BAND;}
     6b4:	2180      	movs	r1, #128	; 0x80
     6b6:	05c9      	lsls	r1, r1, #23
     6b8:	4b14      	ldr	r3, [pc, #80]	; (70c <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xd0>)
     6ba:	4798      	blx	r3
     6bc:	61e0      	str	r0, [r4, #28]
	void Set_Step_Resonance(float r){step_resonance=r;}
	float Calculate_Optimum_Resonance(void);
	void Set_Minimum_Tone(float f){minimum_tone=f;}
     6be:	4b16      	ldr	r3, [pc, #88]	; (718 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xdc>)
     6c0:	61a3      	str	r3, [r4, #24]
			Set_RF(next_LO_frequency);
     6c2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
     6c4:	0020      	movs	r0, r4
     6c6:	4b15      	ldr	r3, [pc, #84]	; (71c <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xe0>)
     6c8:	4798      	blx	r3
     6ca:	e018      	b.n	6fe <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xc2>
				if ((current_LO_frequency-step)<lower_limit)
     6cc:	238c      	movs	r3, #140	; 0x8c
     6ce:	58e1      	ldr	r1, [r4, r3]
     6d0:	1c28      	adds	r0, r5, #0
     6d2:	4b13      	ldr	r3, [pc, #76]	; (720 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xe4>)
     6d4:	4798      	blx	r3
     6d6:	2388      	movs	r3, #136	; 0x88
     6d8:	58e1      	ldr	r1, [r4, r3]
     6da:	4b12      	ldr	r3, [pc, #72]	; (724 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xe8>)
     6dc:	4798      	blx	r3
     6de:	2800      	cmp	r0, #0
     6e0:	d0d8      	beq.n	694 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0x58>
					direction=true;
     6e2:	2201      	movs	r2, #1
     6e4:	2394      	movs	r3, #148	; 0x94
     6e6:	54e2      	strb	r2, [r4, r3]
     6e8:	e7d4      	b.n	694 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0x58>
			next_LO_frequency=direction?current_LO_frequency+step:current_LO_frequency-step;
     6ea:	238c      	movs	r3, #140	; 0x8c
     6ec:	58e1      	ldr	r1, [r4, r3]
     6ee:	1c28      	adds	r0, r5, #0
     6f0:	4b0b      	ldr	r3, [pc, #44]	; (720 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xe4>)
     6f2:	4798      	blx	r3
     6f4:	1c01      	adds	r1, r0, #0
     6f6:	e7d7      	b.n	6a8 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0x6c>
		Check_Mixer();
     6f8:	0020      	movs	r0, r4
     6fa:	4b01      	ldr	r3, [pc, #4]	; (700 <_ZN15LTC5548_HANDLER14Keep_SearchingEv+0xc4>)
     6fc:	4798      	blx	r3
}
     6fe:	bd70      	pop	{r4, r5, r6, pc}
     700:	00000531 	.word	0x00000531
     704:	000005b1 	.word	0x000005b1
     708:	000007ff 	.word	0x000007ff
     70c:	00009471 	.word	0x00009471
     710:	00009209 	.word	0x00009209
     714:	000003a1 	.word	0x000003a1
     718:	4d221fe8 	.word	0x4d221fe8
     71c:	00000369 	.word	0x00000369
     720:	00009db5 	.word	0x00009db5
     724:	000091e1 	.word	0x000091e1

00000728 <_ZN15LTC5548_HANDLER15Start_SearchingEff>:
float LTC5548_HANDLER::Start_Searching( float downlimit,float uplimit){
     728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     72a:	0004      	movs	r4, r0
     72c:	1c0d      	adds	r5, r1, #0
     72e:	1c17      	adds	r7, r2, #0
	Set_Enable(false);
     730:	2100      	movs	r1, #0
     732:	4e17      	ldr	r6, [pc, #92]	; (790 <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x68>)
     734:	47b0      	blx	r6
	upper_limit=uplimit; lower_limit=downlimit;
     736:	2384      	movs	r3, #132	; 0x84
     738:	50e7      	str	r7, [r4, r3]
     73a:	3304      	adds	r3, #4
     73c:	50e5      	str	r5, [r4, r3]
	step=(upper_limit-lower_limit)/2048.0;
     73e:	1c29      	adds	r1, r5, #0
     740:	1c38      	adds	r0, r7, #0
     742:	4b14      	ldr	r3, [pc, #80]	; (794 <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x6c>)
     744:	4798      	blx	r3
     746:	21e8      	movs	r1, #232	; 0xe8
     748:	0589      	lsls	r1, r1, #22
     74a:	4b13      	ldr	r3, [pc, #76]	; (798 <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x70>)
     74c:	4798      	blx	r3
     74e:	238c      	movs	r3, #140	; 0x8c
     750:	50e0      	str	r0, [r4, r3]
	direction=true;
     752:	2201      	movs	r2, #1
     754:	3308      	adds	r3, #8
     756:	54e2      	strb	r2, [r4, r3]
	next_LO_frequency=lower_limit;
     758:	67e5      	str	r5, [r4, #124]	; 0x7c
	next_RF_frequency=next_LO_frequency;
     75a:	6765      	str	r5, [r4, #116]	; 0x74
	Set_LO(next_LO_frequency);
     75c:	1c29      	adds	r1, r5, #0
     75e:	0020      	movs	r0, r4
     760:	4b0e      	ldr	r3, [pc, #56]	; (79c <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x74>)
     762:	4798      	blx	r3
	Update_Optimal_Frequency(adf->current_frequency);
     764:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     766:	6818      	ldr	r0, [r3, #0]
	void Update_Optimal_Frequency(float f){optimal_frequency=f+TUNE_START_BAND;}
     768:	2180      	movs	r1, #128	; 0x80
     76a:	05c9      	lsls	r1, r1, #23
     76c:	4b0c      	ldr	r3, [pc, #48]	; (7a0 <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x78>)
     76e:	4798      	blx	r3
     770:	61e0      	str	r0, [r4, #28]
	Set_RF(next_LO_frequency);
     772:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
     774:	0020      	movs	r0, r4
     776:	4b0b      	ldr	r3, [pc, #44]	; (7a4 <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x7c>)
     778:	4798      	blx	r3
	current_LO_frequency=adf->current_frequency;
     77a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	67a3      	str	r3, [r4, #120]	; 0x78
	Set_Enable(true);
     780:	2101      	movs	r1, #1
     782:	0020      	movs	r0, r4
     784:	47b0      	blx	r6
	return Keep_Searching();
     786:	0020      	movs	r0, r4
     788:	4b07      	ldr	r3, [pc, #28]	; (7a8 <_ZN15LTC5548_HANDLER15Start_SearchingEff+0x80>)
     78a:	4798      	blx	r3
}
     78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	000003d9 	.word	0x000003d9
     794:	00009db5 	.word	0x00009db5
     798:	00009b75 	.word	0x00009b75
     79c:	000003a1 	.word	0x000003a1
     7a0:	00009471 	.word	0x00009471
     7a4:	00000369 	.word	0x00000369
     7a8:	0000063d 	.word	0x0000063d

000007ac <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev>:
LTC5548_HANDLER ltc;
     7ac:	b510      	push	{r4, lr}
     7ae:	4902      	ldr	r1, [pc, #8]	; (7b8 <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev+0xc>)
     7b0:	2001      	movs	r0, #1
     7b2:	4b02      	ldr	r3, [pc, #8]	; (7bc <_GLOBAL__sub_I__ZN15LTC5548_HANDLERC2Ev+0x10>)
     7b4:	4798      	blx	r3
     7b6:	bd10      	pop	{r4, pc}
     7b8:	0000ffff 	.word	0x0000ffff
     7bc:	00000215 	.word	0x00000215

000007c0 <main>:
#include "LTC5548HANDLER.h"
#include "CDC_Class.h"

static  uint16_t  dac_value=0;
int main(void)
{
     7c0:	b510      	push	{r4, lr}
	atmel_start_init();
     7c2:	4b15      	ldr	r3, [pc, #84]	; (818 <main+0x58>)
     7c4:	4798      	blx	r3
		usb.Init();
     7c6:	4c15      	ldr	r4, [pc, #84]	; (81c <main+0x5c>)
     7c8:	0020      	movs	r0, r4
     7ca:	4b15      	ldr	r3, [pc, #84]	; (820 <main+0x60>)
     7cc:	4798      	blx	r3
		delay_ms(100);
     7ce:	2064      	movs	r0, #100	; 0x64
     7d0:	4b14      	ldr	r3, [pc, #80]	; (824 <main+0x64>)
     7d2:	4798      	blx	r3
		
		usb.print("[2J");
     7d4:	4914      	ldr	r1, [pc, #80]	; (828 <main+0x68>)
     7d6:	0020      	movs	r0, r4
     7d8:	4b14      	ldr	r3, [pc, #80]	; (82c <main+0x6c>)
     7da:	4798      	blx	r3
		usb.write(0x0c);
     7dc:	210c      	movs	r1, #12
     7de:	0020      	movs	r0, r4
     7e0:	4b13      	ldr	r3, [pc, #76]	; (830 <main+0x70>)
     7e2:	4798      	blx	r3
		usb.println("initiating LTC Mixer");
     7e4:	4913      	ldr	r1, [pc, #76]	; (834 <main+0x74>)
     7e6:	0020      	movs	r0, r4
     7e8:	4b13      	ldr	r3, [pc, #76]	; (838 <main+0x78>)
     7ea:	4798      	blx	r3
	dac_sync_enable_channel(&DAC_0, 0);
     7ec:	2100      	movs	r1, #0
     7ee:	4813      	ldr	r0, [pc, #76]	; (83c <main+0x7c>)
     7f0:	4b13      	ldr	r3, [pc, #76]	; (840 <main+0x80>)
     7f2:	4798      	blx	r3
	
	ltc.Init();
     7f4:	4c13      	ldr	r4, [pc, #76]	; (844 <main+0x84>)
     7f6:	0020      	movs	r0, r4
     7f8:	4b13      	ldr	r3, [pc, #76]	; (848 <main+0x88>)
     7fa:	4798      	blx	r3
	bool dir=true;
	//ltc.lmx->Start_Woobling(CENTER_FREQUENCY+TUNE_MAX_BAND,CENTER_FREQUENCY-TUNE_MAX_BAND);
	ltc.Start_Searching(3000.0,14000.0);
     7fc:	4a13      	ldr	r2, [pc, #76]	; (84c <main+0x8c>)
     7fe:	4914      	ldr	r1, [pc, #80]	; (850 <main+0x90>)
     800:	0020      	movs	r0, r4
     802:	4b14      	ldr	r3, [pc, #80]	; (854 <main+0x94>)
     804:	4798      	blx	r3
	bool dir=true;
     806:	2401      	movs	r4, #1
	/* Replace with your application code */
	while (1)
	{
		ltc.Keep_Searching();
     808:	480e      	ldr	r0, [pc, #56]	; (844 <main+0x84>)
     80a:	4b13      	ldr	r3, [pc, #76]	; (858 <main+0x98>)
     80c:	4798      	blx	r3
	//	ltc.Check_Mixer();
		
		dac_value=dir?0:0x3ff;
	//	dac_sync_write(&DAC_0, 0, &dac_value, 1);
	//	delay_ms(1);
		dir=!dir;
     80e:	2301      	movs	r3, #1
     810:	405c      	eors	r4, r3
     812:	b2e4      	uxtb	r4, r4
		ltc.Keep_Searching();
     814:	e7f8      	b.n	808 <main+0x48>
     816:	46c0      	nop			; (mov r8, r8)
     818:	00001e01 	.word	0x00001e01
     81c:	200013a0 	.word	0x200013a0
     820:	00006609 	.word	0x00006609
     824:	000025c1 	.word	0x000025c1
     828:	00010d04 	.word	0x00010d04
     82c:	0000668d 	.word	0x0000668d
     830:	00006367 	.word	0x00006367
     834:	00010d08 	.word	0x00010d08
     838:	000066d1 	.word	0x000066d1
     83c:	200014f4 	.word	0x200014f4
     840:	00002575 	.word	0x00002575
     844:	20000c34 	.word	0x20000c34
     848:	000004ed 	.word	0x000004ed
     84c:	465ac000 	.word	0x465ac000
     850:	453b8000 	.word	0x453b8000
     854:	00000729 	.word	0x00000729
     858:	0000063d 	.word	0x0000063d

0000085c <_ZN19MIXER_TUNNER_HELPERC1Ev>:
#include "CDC_Class.h"

// default constructor
MIXER_TUNNER_HELPER::MIXER_TUNNER_HELPER()
{
	minimum_tone=48000000.0;
     85c:	4b0a      	ldr	r3, [pc, #40]	; (888 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x2c>)
     85e:	6183      	str	r3, [r0, #24]
	minimum_gradient=24000000;
     860:	4b0a      	ldr	r3, [pc, #40]	; (88c <_ZN19MIXER_TUNNER_HELPERC1Ev+0x30>)
     862:	6383      	str	r3, [r0, #56]	; 0x38
	last_gradient=648648;
     864:	4a0a      	ldr	r2, [pc, #40]	; (890 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x34>)
     866:	6402      	str	r2, [r0, #64]	; 0x40
	optimal_frequency=CENTER_FREQUENCY+TUNE_START_BAND;
     868:	4a0a      	ldr	r2, [pc, #40]	; (894 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x38>)
     86a:	61c2      	str	r2, [r0, #28]
	optimal_resonance=RESONANCE_SEED_FREQUENCY;
     86c:	4a0a      	ldr	r2, [pc, #40]	; (898 <_ZN19MIXER_TUNNER_HELPERC1Ev+0x3c>)
     86e:	6202      	str	r2, [r0, #32]
	last_error_tune=240000;
     870:	4a0a      	ldr	r2, [pc, #40]	; (89c <_ZN19MIXER_TUNNER_HELPERC1Ev+0x40>)
     872:	60c2      	str	r2, [r0, #12]
	error_tune=24000000;
     874:	6083      	str	r3, [r0, #8]
	direction=true;
     876:	2301      	movs	r3, #1
     878:	2234      	movs	r2, #52	; 0x34
     87a:	5483      	strb	r3, [r0, r2]
	direction_LO=true;
     87c:	3201      	adds	r2, #1
     87e:	5483      	strb	r3, [r0, r2]
	gradient=0;
     880:	2300      	movs	r3, #0
     882:	6003      	str	r3, [r0, #0]
} //MIXER_TUNNER_HELPER
     884:	4770      	bx	lr
     886:	46c0      	nop			; (mov r8, r8)
     888:	4c371b00 	.word	0x4c371b00
     88c:	4bb71b00 	.word	0x4bb71b00
     890:	491e5c80 	.word	0x491e5c80
     894:	460ca800 	.word	0x460ca800
     898:	46249e8f 	.word	0x46249e8f
     89c:	486a6000 	.word	0x486a6000

000008a0 <_ZN19MIXER_TUNNER_HELPERD1Ev>:

// default destructor
MIXER_TUNNER_HELPER::~MIXER_TUNNER_HELPER()
{
} //~MIXER_TUNNER_HELPER
     8a0:	4770      	bx	lr

000008a2 <_ZN19MIXER_TUNNER_HELPER18Calculate_GradientEm>:
	return optimum;
}	


bool MIXER_TUNNER_HELPER::Calculate_Gradient(uint32_t lv){
	tone_array[2]=tone_array[1];
     8a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     8a4:	6303      	str	r3, [r0, #48]	; 0x30
	tone_array[1]=tone_array[0];
     8a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
     8a8:	62c2      	str	r2, [r0, #44]	; 0x2c
	tone_array[0]=lv;
     8aa:	6281      	str	r1, [r0, #40]	; 0x28
	int32_t g1=tone_array[1]-tone_array[2];
     8ac:	1ad3      	subs	r3, r2, r3
	int32_t g0=tone_array[0]-tone_array[1];
     8ae:	1a89      	subs	r1, r1, r2
	gradient=g0-g1;
     8b0:	1ac9      	subs	r1, r1, r3
     8b2:	6001      	str	r1, [r0, #0]
	return gradient>0;
     8b4:	17c8      	asrs	r0, r1, #31
     8b6:	1a40      	subs	r0, r0, r1
     8b8:	0fc0      	lsrs	r0, r0, #31
	
}
     8ba:	4770      	bx	lr

000008bc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm>:
float MIXER_TUNNER_HELPER::Calculate_Optimum(uint32_t tn){
     8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8be:	46d6      	mov	lr, sl
     8c0:	464f      	mov	r7, r9
     8c2:	4646      	mov	r6, r8
     8c4:	b5c0      	push	{r6, r7, lr}
     8c6:	b082      	sub	sp, #8
     8c8:	0005      	movs	r5, r0
     8ca:	4688      	mov	r8, r1
	if (tn>=170000000)
     8cc:	4b78      	ldr	r3, [pc, #480]	; (ab0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1f4>)
     8ce:	4299      	cmp	r1, r3
     8d0:	d92e      	bls.n	930 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x74>
		if (tn==170000000)
     8d2:	4b78      	ldr	r3, [pc, #480]	; (ab4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1f8>)
     8d4:	4299      	cmp	r1, r3
     8d6:	d00e      	beq.n	8f6 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x3a>
			if (ltc.tune_rf_frequency>optimal_frequency)
     8d8:	4b77      	ldr	r3, [pc, #476]	; (ab8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1fc>)
     8da:	6d18      	ldr	r0, [r3, #80]	; 0x50
     8dc:	69ec      	ldr	r4, [r5, #28]
     8de:	1c21      	adds	r1, r4, #0
     8e0:	4b76      	ldr	r3, [pc, #472]	; (abc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     8e2:	4798      	blx	r3
     8e4:	2800      	cmp	r0, #0
     8e6:	d01c      	beq.n	922 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x66>
				optimum=optimal_frequency- float(1/2.0);
     8e8:	21fc      	movs	r1, #252	; 0xfc
     8ea:	0589      	lsls	r1, r1, #22
     8ec:	1c20      	adds	r0, r4, #0
     8ee:	4b74      	ldr	r3, [pc, #464]	; (ac0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     8f0:	4798      	blx	r3
     8f2:	6068      	str	r0, [r5, #4]
     8f4:	e085      	b.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
			if (ltc.tune_rf_frequency>optimal_frequency)
     8f6:	4b70      	ldr	r3, [pc, #448]	; (ab8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1fc>)
     8f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
     8fa:	69ec      	ldr	r4, [r5, #28]
     8fc:	1c21      	adds	r1, r4, #0
     8fe:	4b6f      	ldr	r3, [pc, #444]	; (abc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     900:	4798      	blx	r3
     902:	2800      	cmp	r0, #0
     904:	d006      	beq.n	914 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x58>
				optimum=optimal_frequency- float(1/16.0);
     906:	21f6      	movs	r1, #246	; 0xf6
     908:	0589      	lsls	r1, r1, #22
     90a:	1c20      	adds	r0, r4, #0
     90c:	4b6c      	ldr	r3, [pc, #432]	; (ac0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     90e:	4798      	blx	r3
     910:	6068      	str	r0, [r5, #4]
     912:	e076      	b.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
				optimum=optimal_frequency+ float(1/16.0);
     914:	21f6      	movs	r1, #246	; 0xf6
     916:	0589      	lsls	r1, r1, #22
     918:	1c20      	adds	r0, r4, #0
     91a:	4b6a      	ldr	r3, [pc, #424]	; (ac4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     91c:	4798      	blx	r3
     91e:	6068      	str	r0, [r5, #4]
     920:	e06f      	b.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
				optimum=optimal_frequency+ float(1/2.0);
     922:	21fc      	movs	r1, #252	; 0xfc
     924:	0589      	lsls	r1, r1, #22
     926:	1c20      	adds	r0, r4, #0
     928:	4b66      	ldr	r3, [pc, #408]	; (ac4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     92a:	4798      	blx	r3
     92c:	6068      	str	r0, [r5, #4]
     92e:	e068      	b.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
		if (tn>0)
     930:	2900      	cmp	r1, #0
     932:	d063      	beq.n	9fc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x140>
			if ((tn!=0xffffff))
     934:	4b64      	ldr	r3, [pc, #400]	; (ac8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x20c>)
     936:	4299      	cmp	r1, r3
     938:	d063      	beq.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
				if (tn<minimum_tone)
     93a:	0008      	movs	r0, r1
     93c:	4b63      	ldr	r3, [pc, #396]	; (acc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x210>)
     93e:	4798      	blx	r3
     940:	1c06      	adds	r6, r0, #0
     942:	69a9      	ldr	r1, [r5, #24]
     944:	4b62      	ldr	r3, [pc, #392]	; (ad0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x214>)
     946:	4798      	blx	r3
     948:	2800      	cmp	r0, #0
     94a:	d006      	beq.n	95a <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x9e>
					minimum_tone=float(tn);
     94c:	61ae      	str	r6, [r5, #24]
					optimal_frequency=ltc.tune_rf_frequency;
     94e:	4b5a      	ldr	r3, [pc, #360]	; (ab8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1fc>)
     950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     952:	61ea      	str	r2, [r5, #28]
					optimal_resonance=ltc.adf->current_frequency;
     954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     956:	681b      	ldr	r3, [r3, #0]
     958:	622b      	str	r3, [r5, #32]
				direction=Calculate_Gradient(tn)?!direction:direction;
     95a:	4641      	mov	r1, r8
     95c:	0028      	movs	r0, r5
     95e:	4b5d      	ldr	r3, [pc, #372]	; (ad4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x218>)
     960:	4798      	blx	r3
     962:	2800      	cmp	r0, #0
     964:	d03f      	beq.n	9e6 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x12a>
     966:	2334      	movs	r3, #52	; 0x34
     968:	5cec      	ldrb	r4, [r5, r3]
     96a:	2301      	movs	r3, #1
     96c:	405c      	eors	r4, r3
     96e:	b2e4      	uxtb	r4, r4
     970:	2334      	movs	r3, #52	; 0x34
     972:	54ec      	strb	r4, [r5, r3]
				if (error_tune!=0)
     974:	68af      	ldr	r7, [r5, #8]
     976:	2100      	movs	r1, #0
     978:	1c38      	adds	r0, r7, #0
     97a:	4b57      	ldr	r3, [pc, #348]	; (ad8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x21c>)
     97c:	4798      	blx	r3
     97e:	2800      	cmp	r0, #0
     980:	d100      	bne.n	984 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xc8>
					last_error_tune=error_tune;
     982:	60ef      	str	r7, [r5, #12]
				if (direction)
     984:	2c00      	cmp	r4, #0
     986:	d031      	beq.n	9ec <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x130>
						error_tune=(float(tn))-minimum_tone;
     988:	69a9      	ldr	r1, [r5, #24]
     98a:	1c30      	adds	r0, r6, #0
     98c:	4b4c      	ldr	r3, [pc, #304]	; (ac0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     98e:	4798      	blx	r3
     990:	60a8      	str	r0, [r5, #8]
				gain=exp((error_tune)/(170000000.0));
     992:	68a8      	ldr	r0, [r5, #8]
     994:	4b51      	ldr	r3, [pc, #324]	; (adc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x220>)
     996:	4798      	blx	r3
     998:	2200      	movs	r2, #0
     99a:	4b51      	ldr	r3, [pc, #324]	; (ae0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x224>)
     99c:	4c51      	ldr	r4, [pc, #324]	; (ae4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x228>)
     99e:	47a0      	blx	r4
     9a0:	4b51      	ldr	r3, [pc, #324]	; (ae8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x22c>)
     9a2:	4798      	blx	r3
     9a4:	4b51      	ldr	r3, [pc, #324]	; (aec <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x230>)
     9a6:	4798      	blx	r3
     9a8:	6128      	str	r0, [r5, #16]
				optimum=optimal_frequency*gain;
     9aa:	69ee      	ldr	r6, [r5, #28]
     9ac:	1c31      	adds	r1, r6, #0
     9ae:	4b50      	ldr	r3, [pc, #320]	; (af0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x234>)
     9b0:	4798      	blx	r3
     9b2:	1c04      	adds	r4, r0, #0
     9b4:	6068      	str	r0, [r5, #4]
				if (optimum>(optimal_frequency+TUNE_MAX_BAND))
     9b6:	494f      	ldr	r1, [pc, #316]	; (af4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x238>)
     9b8:	1c30      	adds	r0, r6, #0
     9ba:	4b42      	ldr	r3, [pc, #264]	; (ac4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x208>)
     9bc:	4798      	blx	r3
     9be:	1c07      	adds	r7, r0, #0
     9c0:	1c01      	adds	r1, r0, #0
     9c2:	1c20      	adds	r0, r4, #0
     9c4:	4b3d      	ldr	r3, [pc, #244]	; (abc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x200>)
     9c6:	4798      	blx	r3
     9c8:	2800      	cmp	r0, #0
     9ca:	d115      	bne.n	9f8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x13c>
					if (optimum<(optimal_frequency-TUNE_MAX_BAND))
     9cc:	4949      	ldr	r1, [pc, #292]	; (af4 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x238>)
     9ce:	1c30      	adds	r0, r6, #0
     9d0:	4b3b      	ldr	r3, [pc, #236]	; (ac0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     9d2:	4798      	blx	r3
     9d4:	1c06      	adds	r6, r0, #0
     9d6:	1c01      	adds	r1, r0, #0
     9d8:	1c20      	adds	r0, r4, #0
     9da:	4b3d      	ldr	r3, [pc, #244]	; (ad0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x214>)
     9dc:	4798      	blx	r3
     9de:	2800      	cmp	r0, #0
     9e0:	d00f      	beq.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
						optimum=(optimal_frequency-TUNE_MAX_BAND);
     9e2:	606e      	str	r6, [r5, #4]
     9e4:	e00d      	b.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
				direction=Calculate_Gradient(tn)?!direction:direction;
     9e6:	2334      	movs	r3, #52	; 0x34
     9e8:	5cec      	ldrb	r4, [r5, r3]
     9ea:	e7c1      	b.n	970 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xb4>
						error_tune=minimum_tone-(float(tn));
     9ec:	1c31      	adds	r1, r6, #0
     9ee:	69a8      	ldr	r0, [r5, #24]
     9f0:	4b33      	ldr	r3, [pc, #204]	; (ac0 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x204>)
     9f2:	4798      	blx	r3
     9f4:	60a8      	str	r0, [r5, #8]
     9f6:	e7cc      	b.n	992 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0xd6>
					optimum=optimal_frequency+TUNE_MAX_BAND;
     9f8:	606f      	str	r7, [r5, #4]
     9fa:	e002      	b.n	a02 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x146>
			optimum=ltc.tune_rf_frequency;
     9fc:	4b2e      	ldr	r3, [pc, #184]	; (ab8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1fc>)
     9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     a00:	6043      	str	r3, [r0, #4]
     a02:	4c3d      	ldr	r4, [pc, #244]	; (af8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x23c>)
     a04:	493d      	ldr	r1, [pc, #244]	; (afc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x240>)
     a06:	0020      	movs	r0, r4
     a08:	4e3d      	ldr	r6, [pc, #244]	; (b00 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x244>)
     a0a:	47b0      	blx	r6
	usb<<"RF Frequency: "<<ltc.lmx->current_frequency<<"\ttone "<<tn;
     a0c:	4b2a      	ldr	r3, [pc, #168]	; (ab8 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x1fc>)
     a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     a10:	4a32      	ldr	r2, [pc, #200]	; (adc <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x220>)
     a12:	4692      	mov	sl, r2
     a14:	6818      	ldr	r0, [r3, #0]
     a16:	4790      	blx	r2
     a18:	0002      	movs	r2, r0
     a1a:	000b      	movs	r3, r1
     a1c:	2102      	movs	r1, #2
     a1e:	4689      	mov	r9, r1
     a20:	9100      	str	r1, [sp, #0]
     a22:	0020      	movs	r0, r4
     a24:	4f37      	ldr	r7, [pc, #220]	; (b04 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x248>)
     a26:	47b8      	blx	r7
     a28:	4937      	ldr	r1, [pc, #220]	; (b08 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x24c>)
     a2a:	0020      	movs	r0, r4
     a2c:	47b0      	blx	r6
     a2e:	220a      	movs	r2, #10
     a30:	4641      	mov	r1, r8
     a32:	0020      	movs	r0, r4
     a34:	4b35      	ldr	r3, [pc, #212]	; (b0c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x250>)
     a36:	4798      	blx	r3
     a38:	4935      	ldr	r1, [pc, #212]	; (b10 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x254>)
     a3a:	0020      	movs	r0, r4
     a3c:	47b0      	blx	r6
     a3e:	220a      	movs	r2, #10
     a40:	6829      	ldr	r1, [r5, #0]
     a42:	0020      	movs	r0, r4
     a44:	4b33      	ldr	r3, [pc, #204]	; (b14 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x258>)
     a46:	4798      	blx	r3
     a48:	4933      	ldr	r1, [pc, #204]	; (b18 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x25c>)
     a4a:	0020      	movs	r0, r4
     a4c:	47b0      	blx	r6
     a4e:	2334      	movs	r3, #52	; 0x34
     a50:	5ce9      	ldrb	r1, [r5, r3]
     a52:	220a      	movs	r2, #10
     a54:	0020      	movs	r0, r4
     a56:	4b31      	ldr	r3, [pc, #196]	; (b1c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x260>)
     a58:	4798      	blx	r3
     a5a:	4931      	ldr	r1, [pc, #196]	; (b20 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x264>)
     a5c:	0020      	movs	r0, r4
     a5e:	47b0      	blx	r6
     a60:	68a8      	ldr	r0, [r5, #8]
     a62:	47d0      	blx	sl
     a64:	0002      	movs	r2, r0
     a66:	000b      	movs	r3, r1
     a68:	4649      	mov	r1, r9
     a6a:	9100      	str	r1, [sp, #0]
     a6c:	0020      	movs	r0, r4
     a6e:	47b8      	blx	r7
     a70:	492c      	ldr	r1, [pc, #176]	; (b24 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x268>)
     a72:	0020      	movs	r0, r4
     a74:	47b0      	blx	r6
     a76:	6928      	ldr	r0, [r5, #16]
     a78:	47d0      	blx	sl
     a7a:	0002      	movs	r2, r0
     a7c:	000b      	movs	r3, r1
     a7e:	4649      	mov	r1, r9
     a80:	9100      	str	r1, [sp, #0]
     a82:	0020      	movs	r0, r4
     a84:	47b8      	blx	r7
     a86:	4928      	ldr	r1, [pc, #160]	; (b28 <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x26c>)
     a88:	0020      	movs	r0, r4
     a8a:	47b0      	blx	r6
     a8c:	6868      	ldr	r0, [r5, #4]
     a8e:	47d0      	blx	sl
     a90:	0002      	movs	r2, r0
     a92:	000b      	movs	r3, r1
     a94:	4649      	mov	r1, r9
     a96:	9100      	str	r1, [sp, #0]
     a98:	0020      	movs	r0, r4
     a9a:	47b8      	blx	r7
     a9c:	4923      	ldr	r1, [pc, #140]	; (b2c <_ZN19MIXER_TUNNER_HELPER17Calculate_OptimumEm+0x270>)
     a9e:	0020      	movs	r0, r4
     aa0:	47b0      	blx	r6
	return optimum;
     aa2:	6868      	ldr	r0, [r5, #4]
}
     aa4:	b002      	add	sp, #8
     aa6:	bc1c      	pop	{r2, r3, r4}
     aa8:	4690      	mov	r8, r2
     aaa:	4699      	mov	r9, r3
     aac:	46a2      	mov	sl, r4
     aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ab0:	0a21fe7f 	.word	0x0a21fe7f
     ab4:	0a21fe80 	.word	0x0a21fe80
     ab8:	20000c34 	.word	0x20000c34
     abc:	00009209 	.word	0x00009209
     ac0:	00009db5 	.word	0x00009db5
     ac4:	00009471 	.word	0x00009471
     ac8:	00ffffff 	.word	0x00ffffff
     acc:	0000a1cd 	.word	0x0000a1cd
     ad0:	000091e1 	.word	0x000091e1
     ad4:	000008a3 	.word	0x000008a3
     ad8:	000091d5 	.word	0x000091d5
     adc:	0000bda9 	.word	0x0000bda9
     ae0:	41a443fd 	.word	0x41a443fd
     ae4:	0000a879 	.word	0x0000a879
     ae8:	00007385 	.word	0x00007385
     aec:	0000be4d 	.word	0x0000be4d
     af0:	00009b75 	.word	0x00009b75
     af4:	40c00000 	.word	0x40c00000
     af8:	200013a0 	.word	0x200013a0
     afc:	00010d68 	.word	0x00010d68
     b00:	0000668d 	.word	0x0000668d
     b04:	000069cd 	.word	0x000069cd
     b08:	00010d78 	.word	0x00010d78
     b0c:	000067cd 	.word	0x000067cd
     b10:	00010d30 	.word	0x00010d30
     b14:	00006775 	.word	0x00006775
     b18:	00010d80 	.word	0x00010d80
     b1c:	000067c1 	.word	0x000067c1
     b20:	00010d4c 	.word	0x00010d4c
     b24:	00010d54 	.word	0x00010d54
     b28:	00010d5c 	.word	0x00010d5c
     b2c:	00010ca0 	.word	0x00010ca0

00000b30 <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		delay_ms(1);
	}
	
}
     b30:	b510      	push	{r4, lr}
     b32:	2801      	cmp	r0, #1
     b34:	d000      	beq.n	b38 <_Z41__static_initialization_and_destruction_0ii+0x8>
     b36:	bd10      	pop	{r4, pc}
     b38:	4b06      	ldr	r3, [pc, #24]	; (b54 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     b3a:	4299      	cmp	r1, r3
     b3c:	d1fb      	bne.n	b36 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class_ADF staticSPI;
     b3e:	4c06      	ldr	r4, [pc, #24]	; (b58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
     b40:	0020      	movs	r0, r4
     b42:	4b06      	ldr	r3, [pc, #24]	; (b5c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     b44:	4798      	blx	r3
     b46:	4a06      	ldr	r2, [pc, #24]	; (b60 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     b48:	4906      	ldr	r1, [pc, #24]	; (b64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b4a:	0020      	movs	r0, r4
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b4e:	4798      	blx	r3
}
     b50:	e7f1      	b.n	b36 <_Z41__static_initialization_and_destruction_0ii+0x6>
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	0000ffff 	.word	0x0000ffff
     b58:	20000ccc 	.word	0x20000ccc
     b5c:	00001389 	.word	0x00001389
     b60:	20000000 	.word	0x20000000
     b64:	00001395 	.word	0x00001395
     b68:	00007161 	.word	0x00007161

00000b6c <_ZN14ADF5610_DriverC1Ev>:
ADF5610_Driver::ADF5610_Driver() {
     b6c:	b510      	push	{r4, lr}
	 current_frequency=3600;
     b6e:	4a0e      	ldr	r2, [pc, #56]	; (ba8 <_ZN14ADF5610_DriverC1Ev+0x3c>)
     b70:	6002      	str	r2, [r0, #0]
		 buffer32=0;
     b72:	2300      	movs	r3, #0
     b74:	2192      	movs	r1, #146	; 0x92
     b76:	0049      	lsls	r1, r1, #1
     b78:	5043      	str	r3, [r0, r1]
		 dir=1;
     b7a:	2401      	movs	r4, #1
     b7c:	3114      	adds	r1, #20
     b7e:	5044      	str	r4, [r0, r1]
		 spi_adf=&staticSPI;
     b80:	490a      	ldr	r1, [pc, #40]	; (bac <_ZN14ADF5610_DriverC1Ev+0x40>)
     b82:	6041      	str	r1, [r0, #4]
		 is_locked=false;
     b84:	219e      	movs	r1, #158	; 0x9e
     b86:	0049      	lsls	r1, r1, #1
     b88:	5443      	strb	r3, [r0, r1]
		 upper_limit=4400;
     b8a:	4909      	ldr	r1, [pc, #36]	; (bb0 <_ZN14ADF5610_DriverC1Ev+0x44>)
     b8c:	6081      	str	r1, [r0, #8]
		 lower_limit=3600;
     b8e:	60c2      	str	r2, [r0, #12]
		 step=(upper_limit-lower_limit)/1024.0*2;
     b90:	4908      	ldr	r1, [pc, #32]	; (bb4 <_ZN14ADF5610_DriverC1Ev+0x48>)
     b92:	2298      	movs	r2, #152	; 0x98
     b94:	0052      	lsls	r2, r2, #1
     b96:	5081      	str	r1, [r0, r2]
		 target_frequency=current_frequency+step;
     b98:	4907      	ldr	r1, [pc, #28]	; (bb8 <_ZN14ADF5610_DriverC1Ev+0x4c>)
     b9a:	3204      	adds	r2, #4
     b9c:	5081      	str	r1, [r0, r2]
		 pll_started=false;
     b9e:	2256      	movs	r2, #86	; 0x56
     ba0:	32ff      	adds	r2, #255	; 0xff
     ba2:	5483      	strb	r3, [r0, r2]
}
     ba4:	bd10      	pop	{r4, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	45610000 	.word	0x45610000
     bac:	20000ccc 	.word	0x20000ccc
     bb0:	45898000 	.word	0x45898000
     bb4:	3fc80000 	.word	0x3fc80000
     bb8:	45611900 	.word	0x45611900

00000bbc <_ZN14ADF5610_DriverD1Ev>:
}
     bbc:	4770      	bx	lr
	...

00000bc0 <_ZN14ADF5610_Driver13ShowRegistersEi>:
void ADF5610_Driver::ShowRegisters(int index){
     bc0:	b570      	push	{r4, r5, r6, lr}
     bc2:	0005      	movs	r5, r0
     bc4:	1e0c      	subs	r4, r1, #0
	switch (index){
     bc6:	d006      	beq.n	bd6 <_ZN14ADF5610_Driver13ShowRegistersEi+0x16>
     bc8:	2900      	cmp	r1, #0
     bca:	db0d      	blt.n	be8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
     bcc:	000b      	movs	r3, r1
     bce:	3b12      	subs	r3, #18
     bd0:	2b01      	cmp	r3, #1
     bd2:	d809      	bhi.n	be8 <_ZN14ADF5610_Driver13ShowRegistersEi+0x28>
}
     bd4:	bd70      	pop	{r4, r5, r6, pc}
			  printf("Read R%d",index);
     bd6:	480e      	ldr	r0, [pc, #56]	; (c10 <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     bd8:	4e0e      	ldr	r6, [pc, #56]	; (c14 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     bda:	47b0      	blx	r6
			  printf(":  0x%08lx\n" ,RegRead[index]);
     bdc:	3404      	adds	r4, #4
     bde:	00a4      	lsls	r4, r4, #2
     be0:	5961      	ldr	r1, [r4, r5]
     be2:	480d      	ldr	r0, [pc, #52]	; (c18 <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     be4:	47b0      	blx	r6
			  break;
     be6:	e7f5      	b.n	bd4 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
			  printf("Write R%d",index);
     be8:	0021      	movs	r1, r4
     bea:	480c      	ldr	r0, [pc, #48]	; (c1c <_ZN14ADF5610_Driver13ShowRegistersEi+0x5c>)
     bec:	4e09      	ldr	r6, [pc, #36]	; (c14 <_ZN14ADF5610_Driver13ShowRegistersEi+0x54>)
     bee:	47b0      	blx	r6
			  printf(":  0x%08lx\t",RegWrite[index]);
     bf0:	0023      	movs	r3, r4
     bf2:	331a      	adds	r3, #26
     bf4:	009b      	lsls	r3, r3, #2
     bf6:	18eb      	adds	r3, r5, r3
     bf8:	6859      	ldr	r1, [r3, #4]
     bfa:	4809      	ldr	r0, [pc, #36]	; (c20 <_ZN14ADF5610_Driver13ShowRegistersEi+0x60>)
     bfc:	47b0      	blx	r6
			  printf("Read R%d",index);
     bfe:	0021      	movs	r1, r4
     c00:	4803      	ldr	r0, [pc, #12]	; (c10 <_ZN14ADF5610_Driver13ShowRegistersEi+0x50>)
     c02:	47b0      	blx	r6
			  printf(":  0x%08lx\n",RegRead[index]);
     c04:	3404      	adds	r4, #4
     c06:	00a4      	lsls	r4, r4, #2
     c08:	5961      	ldr	r1, [r4, r5]
     c0a:	4803      	ldr	r0, [pc, #12]	; (c18 <_ZN14ADF5610_Driver13ShowRegistersEi+0x58>)
     c0c:	47b0      	blx	r6
}
     c0e:	e7e1      	b.n	bd4 <_ZN14ADF5610_Driver13ShowRegistersEi+0x14>
     c10:	00010e38 	.word	0x00010e38
     c14:	0000c171 	.word	0x0000c171
     c18:	00010e44 	.word	0x00010e44
     c1c:	00010e50 	.word	0x00010e50
     c20:	00010e5c 	.word	0x00010e5c

00000c24 <_ZN14ADF5610_Driver9Is_LockedEv>:
bool ADF5610_Driver::Is_Locked(void){
     c24:	b530      	push	{r4, r5, lr}
     c26:	b083      	sub	sp, #12
     c28:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     c2a:	a801      	add	r0, sp, #4
     c2c:	4b0e      	ldr	r3, [pc, #56]	; (c68 <_ZN14ADF5610_Driver9Is_LockedEv+0x44>)
     c2e:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     c30:	22c0      	movs	r2, #192	; 0xc0
     c32:	05d2      	lsls	r2, r2, #23
     c34:	6810      	ldr	r0, [r2, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     c36:	4b0d      	ldr	r3, [pc, #52]	; (c6c <_ZN14ADF5610_Driver9Is_LockedEv+0x48>)
     c38:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     c3a:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     c3c:	405c      	eors	r4, r3
     c3e:	4004      	ands	r4, r0
     c40:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     c42:	a801      	add	r0, sp, #4
     c44:	4b0a      	ldr	r3, [pc, #40]	; (c70 <_ZN14ADF5610_Driver9Is_LockedEv+0x4c>)
     c46:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     c48:	2040      	movs	r0, #64	; 0x40
     c4a:	4020      	ands	r0, r4
     c4c:	1e43      	subs	r3, r0, #1
     c4e:	4198      	sbcs	r0, r3
     c50:	b2c0      	uxtb	r0, r0
	is_locked= gpio_get_pin_level(PA06);
     c52:	239e      	movs	r3, #158	; 0x9e
     c54:	005b      	lsls	r3, r3, #1
     c56:	54e8      	strb	r0, [r5, r3]
	if (is_locked)
     c58:	2800      	cmp	r0, #0
     c5a:	d002      	beq.n	c62 <_ZN14ADF5610_Driver9Is_LockedEv+0x3e>
		current_frequency=target_frequency;
     c5c:	3b08      	subs	r3, #8
     c5e:	58eb      	ldr	r3, [r5, r3]
     c60:	602b      	str	r3, [r5, #0]
}
     c62:	b003      	add	sp, #12
     c64:	bd30      	pop	{r4, r5, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00002509 	.word	0x00002509
     c6c:	41004400 	.word	0x41004400
     c70:	00002517 	.word	0x00002517

00000c74 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm>:
void ADF5610_Driver::ConvertU32FourByteArray(uint8_t *array,uint32_t  data){
     c74:	b510      	push	{r4, lr}
	for (int i =0;i<4;i++){
     c76:	2000      	movs	r0, #0
     c78:	2803      	cmp	r0, #3
     c7a:	dc07      	bgt.n	c8c <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x18>
		array[i]=(uint8_t)((data>>((3-i)*8)&0xff));
     c7c:	2303      	movs	r3, #3
     c7e:	1a1b      	subs	r3, r3, r0
     c80:	00db      	lsls	r3, r3, #3
     c82:	0014      	movs	r4, r2
     c84:	40dc      	lsrs	r4, r3
     c86:	540c      	strb	r4, [r1, r0]
	for (int i =0;i<4;i++){
     c88:	3001      	adds	r0, #1
     c8a:	e7f5      	b.n	c78 <_ZN14ADF5610_Driver23ConvertU32FourByteArrayEPhm+0x4>
}
     c8c:	bd10      	pop	{r4, pc}
	...

00000c90 <_ZN14ADF5610_Driver13ReadRegistersEh>:
void ADF5610_Driver::ReadRegisters(uint8_t index) {
     c90:	b570      	push	{r4, r5, r6, lr}
     c92:	0004      	movs	r4, r0
     c94:	000d      	movs	r5, r1
	spi_adf->SetCS(false);
     c96:	2100      	movs	r1, #0
     c98:	6840      	ldr	r0, [r0, #4]
     c9a:	4e20      	ldr	r6, [pc, #128]	; (d1c <_ZN14ADF5610_Driver13ReadRegistersEh+0x8c>)
     c9c:	47b0      	blx	r6
	to_send[0]=0;
     c9e:	2300      	movs	r3, #0
     ca0:	22a8      	movs	r2, #168	; 0xa8
     ca2:	0052      	lsls	r2, r2, #1
     ca4:	54a3      	strb	r3, [r4, r2]
	to_send[1]=0;
     ca6:	2252      	movs	r2, #82	; 0x52
     ca8:	32ff      	adds	r2, #255	; 0xff
     caa:	54a3      	strb	r3, [r4, r2]
	to_send[2]=index;
     cac:	3201      	adds	r2, #1
     cae:	54a5      	strb	r5, [r4, r2]
	to_send[3]=0;
     cb0:	2254      	movs	r2, #84	; 0x54
     cb2:	32ff      	adds	r2, #255	; 0xff
     cb4:	54a3      	strb	r3, [r4, r2]
	spi_adf->Write(to_send,4);
     cb6:	0021      	movs	r1, r4
     cb8:	3151      	adds	r1, #81	; 0x51
     cba:	31ff      	adds	r1, #255	; 0xff
     cbc:	3a50      	subs	r2, #80	; 0x50
     cbe:	3aff      	subs	r2, #255	; 0xff
     cc0:	6860      	ldr	r0, [r4, #4]
     cc2:	4b17      	ldr	r3, [pc, #92]	; (d20 <_ZN14ADF5610_Driver13ReadRegistersEh+0x90>)
     cc4:	4798      	blx	r3
	spi_adf->SetCS(true);
     cc6:	2101      	movs	r1, #1
     cc8:	6860      	ldr	r0, [r4, #4]
     cca:	47b0      	blx	r6
	delay_ms(1);
     ccc:	2001      	movs	r0, #1
     cce:	4b15      	ldr	r3, [pc, #84]	; (d24 <_ZN14ADF5610_Driver13ReadRegistersEh+0x94>)
     cd0:	4798      	blx	r3
	spi_adf->SetCS(false);
     cd2:	2100      	movs	r1, #0
     cd4:	6860      	ldr	r0, [r4, #4]
     cd6:	47b0      	blx	r6
	spi_adf->Read((uint8_t*)&recibido32,4);
     cd8:	0021      	movs	r1, r4
     cda:	3149      	adds	r1, #73	; 0x49
     cdc:	31ff      	adds	r1, #255	; 0xff
     cde:	2204      	movs	r2, #4
     ce0:	6860      	ldr	r0, [r4, #4]
     ce2:	4b11      	ldr	r3, [pc, #68]	; (d28 <_ZN14ADF5610_Driver13ReadRegistersEh+0x98>)
     ce4:	4798      	blx	r3
	RegRead[index]=((recibido32&(0x000000FF))<<24)|((recibido32&(0x0000FF00))<<8);
     ce6:	23a4      	movs	r3, #164	; 0xa4
     ce8:	005b      	lsls	r3, r3, #1
     cea:	58e2      	ldr	r2, [r4, r3]
     cec:	0613      	lsls	r3, r2, #24
     cee:	0211      	lsls	r1, r2, #8
     cf0:	20ff      	movs	r0, #255	; 0xff
     cf2:	0400      	lsls	r0, r0, #16
     cf4:	4001      	ands	r1, r0
     cf6:	430b      	orrs	r3, r1
	RegRead[index]|=((recibido32&(0xFF000000))>>24)|((recibido32&(0x00FF0000))>>8);
     cf8:	0e11      	lsrs	r1, r2, #24
     cfa:	0a12      	lsrs	r2, r2, #8
     cfc:	20ff      	movs	r0, #255	; 0xff
     cfe:	0200      	lsls	r0, r0, #8
     d00:	4002      	ands	r2, r0
     d02:	430a      	orrs	r2, r1
     d04:	4313      	orrs	r3, r2
	RegRead[index]>>=7;
     d06:	09db      	lsrs	r3, r3, #7
	bitClear(RegRead[index],24);
     d08:	4a08      	ldr	r2, [pc, #32]	; (d2c <_ZN14ADF5610_Driver13ReadRegistersEh+0x9c>)
     d0a:	4013      	ands	r3, r2
     d0c:	3504      	adds	r5, #4
     d0e:	00ad      	lsls	r5, r5, #2
     d10:	512b      	str	r3, [r5, r4]
	spi_adf->SetCS(true);
     d12:	6860      	ldr	r0, [r4, #4]
     d14:	2101      	movs	r1, #1
     d16:	47b0      	blx	r6
}
     d18:	bd70      	pop	{r4, r5, r6, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	00001405 	.word	0x00001405
     d20:	000013d5 	.word	0x000013d5
     d24:	000025c1 	.word	0x000025c1
     d28:	000013ed 	.word	0x000013ed
     d2c:	feffffff 	.word	0xfeffffff

00000d30 <_ZN14ADF5610_Driver17InitiateRegistersEv>:
  for (int i = 0; i < 23; i++) {
     d30:	2300      	movs	r3, #0
     d32:	e00e      	b.n	d52 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x22>
          RegIni[i] = 0x20;
     d34:	001a      	movs	r2, r3
     d36:	3232      	adds	r2, #50	; 0x32
     d38:	0092      	lsls	r2, r2, #2
     d3a:	2120      	movs	r1, #32
     d3c:	5011      	str	r1, [r2, r0]
    RegWrite[i]=RegIni[i];
     d3e:	001a      	movs	r2, r3
     d40:	3232      	adds	r2, #50	; 0x32
     d42:	0092      	lsls	r2, r2, #2
     d44:	5811      	ldr	r1, [r2, r0]
     d46:	001a      	movs	r2, r3
     d48:	321a      	adds	r2, #26
     d4a:	0092      	lsls	r2, r2, #2
     d4c:	1882      	adds	r2, r0, r2
     d4e:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < 23; i++) {
     d50:	3301      	adds	r3, #1
     d52:	2b16      	cmp	r3, #22
     d54:	dc6c      	bgt.n	e30 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x100>
    switch (i) {
     d56:	d865      	bhi.n	e24 <_ZN14ADF5610_Driver17InitiateRegistersEv+0xf4>
     d58:	009a      	lsls	r2, r3, #2
     d5a:	4936      	ldr	r1, [pc, #216]	; (e34 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x104>)
     d5c:	588a      	ldr	r2, [r1, r2]
     d5e:	4697      	mov	pc, r2
        RegIni[i] = 0x2;
     d60:	001a      	movs	r2, r3
     d62:	3232      	adds	r2, #50	; 0x32
     d64:	0092      	lsls	r2, r2, #2
     d66:	2102      	movs	r1, #2
     d68:	5011      	str	r1, [r2, r0]
        break;
     d6a:	e7e8      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x1;
     d6c:	001a      	movs	r2, r3
     d6e:	3232      	adds	r2, #50	; 0x32
     d70:	0092      	lsls	r2, r2, #2
     d72:	2101      	movs	r1, #1
     d74:	5011      	str	r1, [r2, r0]
        break;
     d76:	e7e2      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x31;
     d78:	001a      	movs	r2, r3
     d7a:	3232      	adds	r2, #50	; 0x32
     d7c:	0092      	lsls	r2, r2, #2
     d7e:	2131      	movs	r1, #49	; 0x31
     d80:	5011      	str	r1, [r2, r0]
        break;
     d82:	e7dc      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xFD70A3;
     d84:	001a      	movs	r2, r3
     d86:	3232      	adds	r2, #50	; 0x32
     d88:	0092      	lsls	r2, r2, #2
     d8a:	492b      	ldr	r1, [pc, #172]	; (e38 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x108>)
     d8c:	5011      	str	r1, [r2, r0]
        break;
     d8e:	e7d6      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x000;
     d90:	001a      	movs	r2, r3
     d92:	3232      	adds	r2, #50	; 0x32
     d94:	0092      	lsls	r2, r2, #2
     d96:	2100      	movs	r1, #0
     d98:	5011      	str	r1, [r2, r0]
        break;
     d9a:	e7d0      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2F4A;
     d9c:	001a      	movs	r2, r3
     d9e:	3232      	adds	r2, #50	; 0x32
     da0:	0092      	lsls	r2, r2, #2
     da2:	4926      	ldr	r1, [pc, #152]	; (e3c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x10c>)
     da4:	5011      	str	r1, [r2, r0]
        break;
     da6:	e7ca      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x214D;
     da8:	001a      	movs	r2, r3
     daa:	3232      	adds	r2, #50	; 0x32
     dac:	0092      	lsls	r2, r2, #2
     dae:	4924      	ldr	r1, [pc, #144]	; (e40 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x110>)
     db0:	5011      	str	r1, [r2, r0]
        break;
     db2:	e7c4      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xC9BEFF;
     db4:	001a      	movs	r2, r3
     db6:	3232      	adds	r2, #50	; 0x32
     db8:	0092      	lsls	r2, r2, #2
     dba:	4922      	ldr	r1, [pc, #136]	; (e44 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x114>)
     dbc:	5011      	str	r1, [r2, r0]
        break;
     dbe:	e7be      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x3FFF;
     dc0:	001a      	movs	r2, r3
     dc2:	3232      	adds	r2, #50	; 0x32
     dc4:	0092      	lsls	r2, r2, #2
     dc6:	4920      	ldr	r1, [pc, #128]	; (e48 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x118>)
     dc8:	5011      	str	r1, [r2, r0]
        break;
     dca:	e7b8      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x2047;
     dcc:	001a      	movs	r2, r3
     dce:	3232      	adds	r2, #50	; 0x32
     dd0:	0092      	lsls	r2, r2, #2
     dd2:	491e      	ldr	r1, [pc, #120]	; (e4c <_ZN14ADF5610_Driver17InitiateRegistersEv+0x11c>)
     dd4:	5011      	str	r1, [r2, r0]
        break;
     dd6:	e7b2      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0xF8061;
     dd8:	001a      	movs	r2, r3
     dda:	3232      	adds	r2, #50	; 0x32
     ddc:	0092      	lsls	r2, r2, #2
     dde:	491c      	ldr	r1, [pc, #112]	; (e50 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x120>)
     de0:	5011      	str	r1, [r2, r0]
        break;
     de2:	e7ac      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x081;
     de4:	001a      	movs	r2, r3
     de6:	3232      	adds	r2, #50	; 0x32
     de8:	0092      	lsls	r2, r2, #2
     dea:	2181      	movs	r1, #129	; 0x81
     dec:	5011      	str	r1, [r2, r0]
        break;
     dee:	e7a6      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
		RegIni[i] = 0x020;
     df0:	001a      	movs	r2, r3
     df2:	3232      	adds	r2, #50	; 0x32
     df4:	0092      	lsls	r2, r2, #2
     df6:	2120      	movs	r1, #32
     df8:	5011      	str	r1, [r2, r0]
		break;
     dfa:	e7a0      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = RegIni[5];
     dfc:	22dc      	movs	r2, #220	; 0xdc
     dfe:	5881      	ldr	r1, [r0, r2]
     e00:	001a      	movs	r2, r3
     e02:	3232      	adds	r2, #50	; 0x32
     e04:	0092      	lsls	r2, r2, #2
     e06:	5011      	str	r1, [r2, r0]
         break;
     e08:	e799      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
       RegIni[i] = (0x01<<3)|(0x00<<7)|(0x07<<9)|(0x03<<12)|(0x01<<15);
     e0a:	001a      	movs	r2, r3
     e0c:	3232      	adds	r2, #50	; 0x32
     e0e:	0092      	lsls	r2, r2, #2
     e10:	4910      	ldr	r1, [pc, #64]	; (e54 <_ZN14ADF5610_Driver17InitiateRegistersEv+0x124>)
     e12:	5011      	str	r1, [r2, r0]
         break;
     e14:	e793      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
         RegIni[i] =(0x02<<3)|(0x07<<7)|(0x00);
     e16:	001a      	movs	r2, r3
     e18:	3232      	adds	r2, #50	; 0x32
     e1a:	0092      	lsls	r2, r2, #2
     e1c:	21e4      	movs	r1, #228	; 0xe4
     e1e:	0089      	lsls	r1, r1, #2
     e20:	5011      	str	r1, [r2, r0]
         break;
     e22:	e78c      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
        RegIni[i] = 0x0;
     e24:	001a      	movs	r2, r3
     e26:	3232      	adds	r2, #50	; 0x32
     e28:	0092      	lsls	r2, r2, #2
     e2a:	2100      	movs	r1, #0
     e2c:	5011      	str	r1, [r2, r0]
        break;
     e2e:	e786      	b.n	d3e <_ZN14ADF5610_Driver17InitiateRegistersEv+0xe>
}
     e30:	4770      	bx	lr
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	00010d8c 	.word	0x00010d8c
     e38:	00fd70a3 	.word	0x00fd70a3
     e3c:	00002f4a 	.word	0x00002f4a
     e40:	0000214d 	.word	0x0000214d
     e44:	00c9beff 	.word	0x00c9beff
     e48:	00003fff 	.word	0x00003fff
     e4c:	00002047 	.word	0x00002047
     e50:	000f8061 	.word	0x000f8061
     e54:	0000be08 	.word	0x0000be08

00000e58 <_ZN14ADF5610_Driver16ReadAllRegistersEv>:
void ADF5610_Driver::ReadAllRegisters(){
     e58:	b570      	push	{r4, r5, r6, lr}
     e5a:	0005      	movs	r5, r0
  for (int i=0; i<=19;i++){
     e5c:	2400      	movs	r4, #0
     e5e:	2c13      	cmp	r4, #19
     e60:	dc05      	bgt.n	e6e <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x16>
    ReadRegisters((uint8_t)i);
     e62:	b2e1      	uxtb	r1, r4
     e64:	0028      	movs	r0, r5
     e66:	4b02      	ldr	r3, [pc, #8]	; (e70 <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x18>)
     e68:	4798      	blx	r3
  for (int i=0; i<=19;i++){
     e6a:	3401      	adds	r4, #1
     e6c:	e7f7      	b.n	e5e <_ZN14ADF5610_Driver16ReadAllRegistersEv+0x6>
}
     e6e:	bd70      	pop	{r4, r5, r6, pc}
     e70:	00000c91 	.word	0x00000c91

00000e74 <_ZN14ADF5610_Driver18CalculateVCOValuesEv>:
void ADF5610_Driver::CalculateVCOValues(void){
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
     e76:	46ce      	mov	lr, r9
     e78:	4647      	mov	r7, r8
     e7a:	b580      	push	{r7, lr}
     e7c:	b085      	sub	sp, #20
     e7e:	0007      	movs	r7, r0
	 aux_register=0;
     e80:	2200      	movs	r2, #0
     e82:	23a0      	movs	r3, #160	; 0xa0
     e84:	005b      	lsls	r3, r3, #1
     e86:	50c2      	str	r2, [r0, r3]
		double  fDIV=target_frequency;
     e88:	259a      	movs	r5, #154	; 0x9a
     e8a:	006d      	lsls	r5, r5, #1
     e8c:	4c81      	ldr	r4, [pc, #516]	; (1094 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x220>)
     e8e:	5940      	ldr	r0, [r0, r5]
     e90:	47a0      	blx	r4
     e92:	0002      	movs	r2, r0
     e94:	000b      	movs	r3, r1
		int k=floor(log((14600)/(fDIV))/log(2));
     e96:	4980      	ldr	r1, [pc, #512]	; (1098 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     e98:	4688      	mov	r8, r1
     e9a:	2000      	movs	r0, #0
     e9c:	497f      	ldr	r1, [pc, #508]	; (109c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     e9e:	47c0      	blx	r8
     ea0:	4b7f      	ldr	r3, [pc, #508]	; (10a0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x22c>)
     ea2:	4798      	blx	r3
     ea4:	4a7f      	ldr	r2, [pc, #508]	; (10a4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x230>)
     ea6:	4b80      	ldr	r3, [pc, #512]	; (10a8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x234>)
     ea8:	47c0      	blx	r8
     eaa:	4b80      	ldr	r3, [pc, #512]	; (10ac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     eac:	4798      	blx	r3
     eae:	4b80      	ldr	r3, [pc, #512]	; (10b0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     eb0:	4798      	blx	r3
		uint8_t kDIV=7-(uint8_t)(k);
     eb2:	2307      	movs	r3, #7
     eb4:	9000      	str	r0, [sp, #0]
     eb6:	1a1b      	subs	r3, r3, r0
     eb8:	b2de      	uxtb	r6, r3
	  double fVCO = 7300*((target_frequency*pow(2, k))/(14600)); //VCO
     eba:	5978      	ldr	r0, [r7, r5]
     ebc:	47a0      	blx	r4
     ebe:	9002      	str	r0, [sp, #8]
     ec0:	9103      	str	r1, [sp, #12]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     ec2:	9800      	ldr	r0, [sp, #0]
     ec4:	4b7b      	ldr	r3, [pc, #492]	; (10b4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x240>)
     ec6:	4798      	blx	r3
     ec8:	0002      	movs	r2, r0
     eca:	000b      	movs	r3, r1
     ecc:	2000      	movs	r0, #0
     ece:	2180      	movs	r1, #128	; 0x80
     ed0:	05c9      	lsls	r1, r1, #23
     ed2:	4c79      	ldr	r4, [pc, #484]	; (10b8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x244>)
     ed4:	47a0      	blx	r4
     ed6:	0002      	movs	r2, r0
     ed8:	000b      	movs	r3, r1
     eda:	4c78      	ldr	r4, [pc, #480]	; (10bc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     edc:	9802      	ldr	r0, [sp, #8]
     ede:	9903      	ldr	r1, [sp, #12]
     ee0:	47a0      	blx	r4
     ee2:	2200      	movs	r2, #0
     ee4:	4b6d      	ldr	r3, [pc, #436]	; (109c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x228>)
     ee6:	47c0      	blx	r8
     ee8:	2200      	movs	r2, #0
     eea:	4b75      	ldr	r3, [pc, #468]	; (10c0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x24c>)
     eec:	47a0      	blx	r4
     eee:	9000      	str	r0, [sp, #0]
     ef0:	9101      	str	r1, [sp, #4]
	  if (fVCO<4000){
     ef2:	2200      	movs	r2, #0
     ef4:	4b73      	ldr	r3, [pc, #460]	; (10c4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     ef6:	4c74      	ldr	r4, [pc, #464]	; (10c8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     ef8:	47a0      	blx	r4
     efa:	2800      	cmp	r0, #0
     efc:	d02f      	beq.n	f5e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0xea>
		fPD = 1*fX; //Phase detector frequency
     efe:	2200      	movs	r2, #0
     f00:	4b72      	ldr	r3, [pc, #456]	; (10cc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x258>)
 N = fVCO /fPD;   // Calculate N
     f02:	9800      	ldr	r0, [sp, #0]
     f04:	9901      	ldr	r1, [sp, #4]
     f06:	4c64      	ldr	r4, [pc, #400]	; (1098 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x224>)
     f08:	47a0      	blx	r4
     f0a:	0004      	movs	r4, r0
     f0c:	000d      	movs	r5, r1
     f0e:	003b      	movs	r3, r7
     f10:	3371      	adds	r3, #113	; 0x71
     f12:	33ff      	adds	r3, #255	; 0xff
     f14:	601c      	str	r4, [r3, #0]
     f16:	605d      	str	r5, [r3, #4]
  N_Int = floor(fVCO/fPD);   // N= 50 for 5 GHz   // Turn N into integer
     f18:	4b64      	ldr	r3, [pc, #400]	; (10ac <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x238>)
     f1a:	4798      	blx	r3
     f1c:	000a      	movs	r2, r1
     f1e:	0001      	movs	r1, r0
     f20:	9102      	str	r1, [sp, #8]
     f22:	9203      	str	r2, [sp, #12]
     f24:	003b      	movs	r3, r7
     f26:	3369      	adds	r3, #105	; 0x69
     f28:	33ff      	adds	r3, #255	; 0xff
     f2a:	6019      	str	r1, [r3, #0]
     f2c:	605a      	str	r2, [r3, #4]
 F_Frac1x = (N - N_Int) * pow(2, 24);   // Calculate Frac1 (N remainder * 2^24)
     f2e:	0013      	movs	r3, r2
     f30:	0002      	movs	r2, r0
     f32:	0020      	movs	r0, r4
     f34:	0029      	movs	r1, r5
     f36:	4c66      	ldr	r4, [pc, #408]	; (10d0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x25c>)
     f38:	47a0      	blx	r4
     f3a:	2200      	movs	r2, #0
     f3c:	4b65      	ldr	r3, [pc, #404]	; (10d4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x260>)
     f3e:	4c5f      	ldr	r4, [pc, #380]	; (10bc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x248>)
     f40:	47a0      	blx	r4
     f42:	003b      	movs	r3, r7
     f44:	3379      	adds	r3, #121	; 0x79
     f46:	33ff      	adds	r3, #255	; 0xff
     f48:	6018      	str	r0, [r3, #0]
     f4a:	6059      	str	r1, [r3, #4]
   F_FracN = (uint32_t)F_Frac1x;  // turn Frac1 into an integer
     f4c:	4b62      	ldr	r3, [pc, #392]	; (10d8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x264>)
     f4e:	4798      	blx	r3
     f50:	23c0      	movs	r3, #192	; 0xc0
     f52:	005b      	lsls	r3, r3, #1
     f54:	50f8      	str	r0, [r7, r3]
  for (int i = 0; i < 23; i++) {
     f56:	2400      	movs	r4, #0
     f58:	46b1      	mov	r9, r6
     f5a:	0005      	movs	r5, r0
     f5c:	e00e      	b.n	f7c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x108>
		fPD = 2*fX; //Phase detector frequency
     f5e:	2200      	movs	r2, #0
     f60:	4b5e      	ldr	r3, [pc, #376]	; (10dc <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x268>)
     f62:	e7ce      	b.n	f02 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x8e>
        RegWrite[i] =(uint32_t)(0x00FFFFFF&((long)N_Int));  //Fixed value (Phase control not needed)
     f64:	9802      	ldr	r0, [sp, #8]
     f66:	9903      	ldr	r1, [sp, #12]
     f68:	4b51      	ldr	r3, [pc, #324]	; (10b0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x23c>)
     f6a:	4798      	blx	r3
     f6c:	0200      	lsls	r0, r0, #8
     f6e:	0a00      	lsrs	r0, r0, #8
     f70:	0023      	movs	r3, r4
     f72:	331a      	adds	r3, #26
     f74:	009b      	lsls	r3, r3, #2
     f76:	18fb      	adds	r3, r7, r3
     f78:	6058      	str	r0, [r3, #4]
  for (int i = 0; i < 23; i++) {
     f7a:	3401      	adds	r4, #1
     f7c:	2c16      	cmp	r4, #22
     f7e:	dd00      	ble.n	f82 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x10e>
     f80:	e083      	b.n	108a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x216>
    switch (i) {
     f82:	1ee3      	subs	r3, r4, #3
     f84:	2b13      	cmp	r3, #19
     f86:	d8f8      	bhi.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
     f88:	009b      	lsls	r3, r3, #2
     f8a:	4a55      	ldr	r2, [pc, #340]	; (10e0 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x26c>)
     f8c:	58d3      	ldr	r3, [r2, r3]
     f8e:	469f      	mov	pc, r3
        RegWrite[i] =(uint32_t)(0x00FFFFFF&(F_FracN));
     f90:	022a      	lsls	r2, r5, #8
     f92:	0a12      	lsrs	r2, r2, #8
     f94:	0023      	movs	r3, r4
     f96:	331a      	adds	r3, #26
     f98:	009b      	lsls	r3, r3, #2
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	605a      	str	r2, [r3, #4]
        break;
     f9e:	e7ec      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
		 RegWrite[i]=RegIni[i];
     fa0:	0023      	movs	r3, r4
     fa2:	3332      	adds	r3, #50	; 0x32
     fa4:	009b      	lsls	r3, r3, #2
     fa6:	59da      	ldr	r2, [r3, r7]
     fa8:	0023      	movs	r3, r4
     faa:	331a      	adds	r3, #26
     fac:	009b      	lsls	r3, r3, #2
     fae:	18fb      	adds	r3, r7, r3
     fb0:	605a      	str	r2, [r3, #4]
        break;
     fb2:	e7e2      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        if (fVCO<4000){
     fb4:	2200      	movs	r2, #0
     fb6:	4b43      	ldr	r3, [pc, #268]	; (10c4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x250>)
     fb8:	9800      	ldr	r0, [sp, #0]
     fba:	9901      	ldr	r1, [sp, #4]
     fbc:	4e42      	ldr	r6, [pc, #264]	; (10c8 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x254>)
     fbe:	47b0      	blx	r6
     fc0:	2800      	cmp	r0, #0
     fc2:	d008      	beq.n	fd6 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x162>
          bitWrite(RegWrite[i], 19, 0);
     fc4:	0023      	movs	r3, r4
     fc6:	331a      	adds	r3, #26
     fc8:	009b      	lsls	r3, r3, #2
     fca:	18fb      	adds	r3, r7, r3
     fcc:	4a45      	ldr	r2, [pc, #276]	; (10e4 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x270>)
     fce:	6859      	ldr	r1, [r3, #4]
     fd0:	400a      	ands	r2, r1
     fd2:	605a      	str	r2, [r3, #4]
     fd4:	e7d1      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
          bitWrite(RegWrite[i], 19, 1);
     fd6:	0023      	movs	r3, r4
     fd8:	331a      	adds	r3, #26
     fda:	009b      	lsls	r3, r3, #2
     fdc:	18fb      	adds	r3, r7, r3
     fde:	2280      	movs	r2, #128	; 0x80
     fe0:	0312      	lsls	r2, r2, #12
     fe2:	6859      	ldr	r1, [r3, #4]
     fe4:	430a      	orrs	r2, r1
     fe6:	605a      	str	r2, [r3, #4]
     fe8:	e7c7      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    	  aux_register=RegWrite[5];
     fea:	2380      	movs	r3, #128	; 0x80
     fec:	58fa      	ldr	r2, [r7, r3]
     fee:	33c0      	adds	r3, #192	; 0xc0
     ff0:	50fa      	str	r2, [r7, r3]
        RegWrite[i]=aux_register;
     ff2:	0023      	movs	r3, r4
     ff4:	331a      	adds	r3, #26
     ff6:	009b      	lsls	r3, r3, #2
     ff8:	18fb      	adds	r3, r7, r3
     ffa:	605a      	str	r2, [r3, #4]
        break;
     ffc:	e7bd      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
        RegWrite[i]=RegIni[i];
     ffe:	0023      	movs	r3, r4
    1000:	3332      	adds	r3, #50	; 0x32
    1002:	009b      	lsls	r3, r3, #2
    1004:	59da      	ldr	r2, [r3, r7]
    1006:	0023      	movs	r3, r4
    1008:	331a      	adds	r3, #26
    100a:	009b      	lsls	r3, r3, #2
    100c:	18fb      	adds	r3, r7, r3
    100e:	605a      	str	r2, [r3, #4]
        break;
    1010:	e7b3      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
    switch (i) {
    1012:	2303      	movs	r3, #3
    1014:	464e      	mov	r6, r9
    1016:	e022      	b.n	105e <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1ea>
					bitWrite(RegWrite[i], j, bitRead(VCOAdd,j-3));
    1018:	1ed9      	subs	r1, r3, #3
    101a:	2202      	movs	r2, #2
    101c:	410a      	asrs	r2, r1
    101e:	07d2      	lsls	r2, r2, #31
    1020:	d509      	bpl.n	1036 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1c2>
    1022:	2101      	movs	r1, #1
    1024:	4099      	lsls	r1, r3
    1026:	0022      	movs	r2, r4
    1028:	321a      	adds	r2, #26
    102a:	0092      	lsls	r2, r2, #2
    102c:	18ba      	adds	r2, r7, r2
    102e:	6850      	ldr	r0, [r2, #4]
    1030:	4301      	orrs	r1, r0
    1032:	6051      	str	r1, [r2, #4]
    1034:	e012      	b.n	105c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
    1036:	2101      	movs	r1, #1
    1038:	4099      	lsls	r1, r3
    103a:	0022      	movs	r2, r4
    103c:	321a      	adds	r2, #26
    103e:	0092      	lsls	r2, r2, #2
    1040:	18ba      	adds	r2, r7, r2
    1042:	6850      	ldr	r0, [r2, #4]
    1044:	4388      	bics	r0, r1
    1046:	6050      	str	r0, [r2, #4]
    1048:	e008      	b.n	105c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
    104a:	2101      	movs	r1, #1
    104c:	4099      	lsls	r1, r3
    104e:	0022      	movs	r2, r4
    1050:	321a      	adds	r2, #26
    1052:	0092      	lsls	r2, r2, #2
    1054:	18ba      	adds	r2, r7, r2
    1056:	6850      	ldr	r0, [r2, #4]
    1058:	4388      	bics	r0, r1
    105a:	6050      	str	r0, [r2, #4]
			for (int j=3;j<16;j++){
    105c:	3301      	adds	r3, #1
    105e:	2b0f      	cmp	r3, #15
    1060:	dc11      	bgt.n	1086 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x212>
				if (j<7){
    1062:	2b06      	cmp	r3, #6
    1064:	ddd8      	ble.n	1018 <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1a4>
					bitWrite(RegWrite[i], j, bitRead(kDIV,j-7));
    1066:	1fda      	subs	r2, r3, #7
    1068:	0031      	movs	r1, r6
    106a:	4111      	asrs	r1, r2
    106c:	000a      	movs	r2, r1
    106e:	07d2      	lsls	r2, r2, #31
    1070:	d5eb      	bpl.n	104a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1d6>
    1072:	2101      	movs	r1, #1
    1074:	4099      	lsls	r1, r3
    1076:	0022      	movs	r2, r4
    1078:	321a      	adds	r2, #26
    107a:	0092      	lsls	r2, r2, #2
    107c:	18ba      	adds	r2, r7, r2
    107e:	6850      	ldr	r0, [r2, #4]
    1080:	4301      	orrs	r1, r0
    1082:	6051      	str	r1, [r2, #4]
    1084:	e7ea      	b.n	105c <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x1e8>
    1086:	46b1      	mov	r9, r6
    1088:	e777      	b.n	f7a <_ZN14ADF5610_Driver18CalculateVCOValuesEv+0x106>
}
    108a:	b005      	add	sp, #20
    108c:	bc0c      	pop	{r2, r3}
    108e:	4690      	mov	r8, r2
    1090:	4699      	mov	r9, r3
    1092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1094:	0000bda9 	.word	0x0000bda9
    1098:	0000a879 	.word	0x0000a879
    109c:	40cc8400 	.word	0x40cc8400
    10a0:	00007489 	.word	0x00007489
    10a4:	fefa39ef 	.word	0xfefa39ef
    10a8:	3fe62e42 	.word	0x3fe62e42
    10ac:	00007171 	.word	0x00007171
    10b0:	0000bc4d 	.word	0x0000bc4d
    10b4:	0000bcb5 	.word	0x0000bcb5
    10b8:	00007599 	.word	0x00007599
    10bc:	0000b0e1 	.word	0x0000b0e1
    10c0:	40bc8400 	.word	0x40bc8400
    10c4:	40af4000 	.word	0x40af4000
    10c8:	0000916d 	.word	0x0000916d
    10cc:	40490000 	.word	0x40490000
    10d0:	0000b5e1 	.word	0x0000b5e1
    10d4:	41700000 	.word	0x41700000
    10d8:	000092b5 	.word	0x000092b5
    10dc:	40590000 	.word	0x40590000
    10e0:	00010de8 	.word	0x00010de8
    10e4:	fff7ffff 	.word	0xfff7ffff

000010e8 <_ZN14ADF5610_Driver6usleepEl>:
void ADF5610_Driver::usleep(long us){
    10e8:	b510      	push	{r4, lr}
    10ea:	0008      	movs	r0, r1
	if (us/1000>1)
    10ec:	4b07      	ldr	r3, [pc, #28]	; (110c <_ZN14ADF5610_Driver6usleepEl+0x24>)
    10ee:	4299      	cmp	r1, r3
    10f0:	dc03      	bgt.n	10fa <_ZN14ADF5610_Driver6usleepEl+0x12>
		delay_ms(1);
    10f2:	2001      	movs	r0, #1
    10f4:	4b06      	ldr	r3, [pc, #24]	; (1110 <_ZN14ADF5610_Driver6usleepEl+0x28>)
    10f6:	4798      	blx	r3
}
    10f8:	bd10      	pop	{r4, pc}
		delay_ms(us/1000);
    10fa:	21fa      	movs	r1, #250	; 0xfa
    10fc:	0089      	lsls	r1, r1, #2
    10fe:	4b05      	ldr	r3, [pc, #20]	; (1114 <_ZN14ADF5610_Driver6usleepEl+0x2c>)
    1100:	4798      	blx	r3
    1102:	b280      	uxth	r0, r0
    1104:	4b02      	ldr	r3, [pc, #8]	; (1110 <_ZN14ADF5610_Driver6usleepEl+0x28>)
    1106:	4798      	blx	r3
    1108:	e7f6      	b.n	10f8 <_ZN14ADF5610_Driver6usleepEl+0x10>
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	000007cf 	.word	0x000007cf
    1110:	000025c1 	.word	0x000025c1
    1114:	00008f69 	.word	0x00008f69

00001118 <_ZN14ADF5610_Driver14WriteRegistersEh>:
void  ADF5610_Driver::WriteRegisters(uint8_t index) {
    1118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    111a:	0004      	movs	r4, r0
    111c:	000d      	movs	r5, r1
  local_index=0;
    111e:	2300      	movs	r3, #0
    1120:	22a2      	movs	r2, #162	; 0xa2
    1122:	0052      	lsls	r2, r2, #1
    1124:	5483      	strb	r3, [r0, r2]
  buffer32 = 0;
    1126:	3a20      	subs	r2, #32
    1128:	5083      	str	r3, [r0, r2]
  if (index>19){
    112a:	2913      	cmp	r1, #19
    112c:	dd1a      	ble.n	1164 <_ZN14ADF5610_Driver14WriteRegistersEh+0x4c>
    if(index>22){
    112e:	2916      	cmp	r1, #22
    1130:	dd13      	ble.n	115a <_ZN14ADF5610_Driver14WriteRegistersEh+0x42>
		if (index>23)
    1132:	2917      	cmp	r1, #23
    1134:	dd0c      	ble.n	1150 <_ZN14ADF5610_Driver14WriteRegistersEh+0x38>
			if (index==24)
    1136:	2918      	cmp	r1, #24
    1138:	d004      	beq.n	1144 <_ZN14ADF5610_Driver14WriteRegistersEh+0x2c>
				 local_index=3;
    113a:	2203      	movs	r2, #3
    113c:	23a2      	movs	r3, #162	; 0xa2
    113e:	005b      	lsls	r3, r3, #1
    1140:	54c2      	strb	r2, [r0, r3]
    1142:	e012      	b.n	116a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
				local_index=4;
    1144:	3a21      	subs	r2, #33	; 0x21
    1146:	3aff      	subs	r2, #255	; 0xff
    1148:	23a2      	movs	r3, #162	; 0xa2
    114a:	005b      	lsls	r3, r3, #1
    114c:	54c2      	strb	r2, [r0, r3]
    114e:	e00c      	b.n	116a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
			 local_index=3;
    1150:	2203      	movs	r2, #3
    1152:	23a2      	movs	r3, #162	; 0xa2
    1154:	005b      	lsls	r3, r3, #1
    1156:	54c2      	strb	r2, [r0, r3]
    1158:	e007      	b.n	116a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
		 local_index=5;
    115a:	2205      	movs	r2, #5
    115c:	23a2      	movs	r3, #162	; 0xa2
    115e:	005b      	lsls	r3, r3, #1
    1160:	54c2      	strb	r2, [r0, r3]
    1162:	e002      	b.n	116a <_ZN14ADF5610_Driver14WriteRegistersEh+0x52>
    local_index=index;
    1164:	23a2      	movs	r3, #162	; 0xa2
    1166:	005b      	lsls	r3, r3, #1
    1168:	54e1      	strb	r1, [r4, r3]
  switch (local_index){
    116a:	23a2      	movs	r3, #162	; 0xa2
    116c:	005b      	lsls	r3, r3, #1
    116e:	5ce3      	ldrb	r3, [r4, r3]
    1170:	3b10      	subs	r3, #16
    1172:	b2db      	uxtb	r3, r3
    1174:	2b03      	cmp	r3, #3
    1176:	d800      	bhi.n	117a <_ZN14ADF5610_Driver14WriteRegistersEh+0x62>
}
    1178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    spi_adf->SetCS(false);
    117a:	2100      	movs	r1, #0
    117c:	6860      	ldr	r0, [r4, #4]
    117e:	4e21      	ldr	r6, [pc, #132]	; (1204 <_ZN14ADF5610_Driver14WriteRegistersEh+0xec>)
    1180:	47b0      	blx	r6
			  buffer32 =((uint32_t)local_index <<3)|(RegWrite[index]<<8);
    1182:	23a2      	movs	r3, #162	; 0xa2
    1184:	005b      	lsls	r3, r3, #1
    1186:	5ce2      	ldrb	r2, [r4, r3]
    1188:	00d2      	lsls	r2, r2, #3
    118a:	002b      	movs	r3, r5
    118c:	331a      	adds	r3, #26
    118e:	009b      	lsls	r3, r3, #2
    1190:	18e3      	adds	r3, r4, r3
    1192:	685b      	ldr	r3, [r3, #4]
    1194:	021b      	lsls	r3, r3, #8
    1196:	431a      	orrs	r2, r3
    1198:	2392      	movs	r3, #146	; 0x92
    119a:	005b      	lsls	r3, r3, #1
    119c:	50e2      	str	r2, [r4, r3]
			  ConvertU32FourByteArray(to_send,buffer32);
    119e:	0027      	movs	r7, r4
    11a0:	3751      	adds	r7, #81	; 0x51
    11a2:	37ff      	adds	r7, #255	; 0xff
    11a4:	0039      	movs	r1, r7
    11a6:	0020      	movs	r0, r4
    11a8:	4b17      	ldr	r3, [pc, #92]	; (1208 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf0>)
    11aa:	4798      	blx	r3
		          spi_adf->Write(to_send,4);
    11ac:	2204      	movs	r2, #4
    11ae:	0039      	movs	r1, r7
    11b0:	6860      	ldr	r0, [r4, #4]
    11b2:	4b16      	ldr	r3, [pc, #88]	; (120c <_ZN14ADF5610_Driver14WriteRegistersEh+0xf4>)
    11b4:	4798      	blx	r3
			 usleep(1);
    11b6:	2101      	movs	r1, #1
    11b8:	0020      	movs	r0, r4
    11ba:	4b15      	ldr	r3, [pc, #84]	; (1210 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
    11bc:	4798      	blx	r3
		   spi_adf->SetCS(true);
    11be:	2101      	movs	r1, #1
    11c0:	6860      	ldr	r0, [r4, #4]
    11c2:	47b0      	blx	r6
		   if(!is_locked){
    11c4:	239e      	movs	r3, #158	; 0x9e
    11c6:	005b      	lsls	r3, r3, #1
    11c8:	5ce3      	ldrb	r3, [r4, r3]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d1d4      	bne.n	1178 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
			   usleep(1);
    11ce:	2101      	movs	r1, #1
    11d0:	0020      	movs	r0, r4
    11d2:	4b0f      	ldr	r3, [pc, #60]	; (1210 <_ZN14ADF5610_Driver14WriteRegistersEh+0xf8>)
    11d4:	4798      	blx	r3
			   ReadRegisters(local_index);
    11d6:	26a2      	movs	r6, #162	; 0xa2
    11d8:	0076      	lsls	r6, r6, #1
    11da:	5da1      	ldrb	r1, [r4, r6]
    11dc:	0020      	movs	r0, r4
    11de:	4b0d      	ldr	r3, [pc, #52]	; (1214 <_ZN14ADF5610_Driver14WriteRegistersEh+0xfc>)
    11e0:	4798      	blx	r3
				   if(RegRead[local_index]!=RegWrite[index]){
    11e2:	5da3      	ldrb	r3, [r4, r6]
    11e4:	3304      	adds	r3, #4
    11e6:	009b      	lsls	r3, r3, #2
    11e8:	591a      	ldr	r2, [r3, r4]
    11ea:	002b      	movs	r3, r5
    11ec:	331a      	adds	r3, #26
    11ee:	009b      	lsls	r3, r3, #2
    11f0:	18e3      	adds	r3, r4, r3
    11f2:	685b      	ldr	r3, [r3, #4]
    11f4:	429a      	cmp	r2, r3
    11f6:	d0bf      	beq.n	1178 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
							   ShowRegisters(index);
    11f8:	0029      	movs	r1, r5
    11fa:	0020      	movs	r0, r4
    11fc:	4b06      	ldr	r3, [pc, #24]	; (1218 <_ZN14ADF5610_Driver14WriteRegistersEh+0x100>)
    11fe:	4798      	blx	r3
}
    1200:	e7ba      	b.n	1178 <_ZN14ADF5610_Driver14WriteRegistersEh+0x60>
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	00001405 	.word	0x00001405
    1208:	00000c75 	.word	0x00000c75
    120c:	000013d5 	.word	0x000013d5
    1210:	000010e9 	.word	0x000010e9
    1214:	00000c91 	.word	0x00000c91
    1218:	00000bc1 	.word	0x00000bc1

0000121c <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj>:
void ADF5610_Driver::CompleteConfigurationFlow(unsigned int k){
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	0005      	movs	r5, r0
    1220:	000c      	movs	r4, r1
    1222:	e00d      	b.n	1240 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x24>
    1224:	2616      	movs	r6, #22
      for(int j=22;j>19;j--){
    1226:	2e13      	cmp	r6, #19
    1228:	dd05      	ble.n	1236 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x1a>
        WriteRegisters(j);
    122a:	b2f1      	uxtb	r1, r6
    122c:	0028      	movs	r0, r5
    122e:	4b0d      	ldr	r3, [pc, #52]	; (1264 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    1230:	4798      	blx	r3
      for(int j=22;j>19;j--){
    1232:	3e01      	subs	r6, #1
    1234:	e7f7      	b.n	1226 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0xa>
	   WriteRegisters(5);
    1236:	2105      	movs	r1, #5
    1238:	0028      	movs	r0, r5
    123a:	4b0a      	ldr	r3, [pc, #40]	; (1264 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    123c:	4798      	blx	r3
  for (int i=k; i<20;i++){
    123e:	3401      	adds	r4, #1
    1240:	2c13      	cmp	r4, #19
    1242:	dc06      	bgt.n	1252 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x36>
    if (i==5){
    1244:	2c05      	cmp	r4, #5
    1246:	d0ed      	beq.n	1224 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x8>
      WriteRegisters(i);
    1248:	b2e1      	uxtb	r1, r4
    124a:	0028      	movs	r0, r5
    124c:	4b05      	ldr	r3, [pc, #20]	; (1264 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    124e:	4798      	blx	r3
    1250:	e7f5      	b.n	123e <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x22>
  WriteRegisters(3);
    1252:	2103      	movs	r1, #3
    1254:	0028      	movs	r0, r5
    1256:	4c03      	ldr	r4, [pc, #12]	; (1264 <_ZN14ADF5610_Driver25CompleteConfigurationFlowEj+0x48>)
    1258:	47a0      	blx	r4
  WriteRegisters(4);
    125a:	2104      	movs	r1, #4
    125c:	0028      	movs	r0, r5
    125e:	47a0      	blx	r4
}
    1260:	bd70      	pop	{r4, r5, r6, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	00001119 	.word	0x00001119

00001268 <_ZN14ADF5610_Driver7InitPLLEv>:
bool  ADF5610_Driver::InitPLL(void){
    1268:	b570      	push	{r4, r5, r6, lr}
    126a:	0004      	movs	r4, r0
		CompleteConfigurationFlow(0);
    126c:	2100      	movs	r1, #0
    126e:	0020      	movs	r0, r4
    1270:	4b0d      	ldr	r3, [pc, #52]	; (12a8 <_ZN14ADF5610_Driver7InitPLLEv+0x40>)
    1272:	4798      	blx	r3
		ReadAllRegisters();
    1274:	0020      	movs	r0, r4
    1276:	4b0d      	ldr	r3, [pc, #52]	; (12ac <_ZN14ADF5610_Driver7InitPLLEv+0x44>)
    1278:	4798      	blx	r3
		pll_started= bitRead(RegRead[1],1)&(bitRead(RegRead[1],0)==0);
    127a:	6963      	ldr	r3, [r4, #20]
    127c:	0859      	lsrs	r1, r3, #1
    127e:	2201      	movs	r2, #1
    1280:	401a      	ands	r2, r3
    1282:	4253      	negs	r3, r2
    1284:	4153      	adcs	r3, r2
    1286:	400b      	ands	r3, r1
    1288:	2556      	movs	r5, #86	; 0x56
    128a:	35ff      	adds	r5, #255	; 0xff
    128c:	5563      	strb	r3, [r4, r5]
		delay_ms(100);
    128e:	2064      	movs	r0, #100	; 0x64
    1290:	4b07      	ldr	r3, [pc, #28]	; (12b0 <_ZN14ADF5610_Driver7InitPLLEv+0x48>)
    1292:	4798      	blx	r3
	}while((!Is_Locked())|((!pll_started)|false));
    1294:	0020      	movs	r0, r4
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <_ZN14ADF5610_Driver7InitPLLEv+0x4c>)
    1298:	4798      	blx	r3
    129a:	5d63      	ldrb	r3, [r4, r5]
	do{
    129c:	2800      	cmp	r0, #0
    129e:	d0e5      	beq.n	126c <_ZN14ADF5610_Driver7InitPLLEv+0x4>
    12a0:	2b00      	cmp	r3, #0
    12a2:	d0e3      	beq.n	126c <_ZN14ADF5610_Driver7InitPLLEv+0x4>
}
    12a4:	0018      	movs	r0, r3
    12a6:	bd70      	pop	{r4, r5, r6, pc}
    12a8:	0000121d 	.word	0x0000121d
    12ac:	00000e59 	.word	0x00000e59
    12b0:	000025c1 	.word	0x000025c1
    12b4:	00000c25 	.word	0x00000c25

000012b8 <_ZN14ADF5610_Driver4InitEv>:
bool ADF5610_Driver::Init(void){
    12b8:	b570      	push	{r4, r5, r6, lr}
    12ba:	0004      	movs	r4, r0
	spi_adf=&staticSPI;
    12bc:	480d      	ldr	r0, [pc, #52]	; (12f4 <_ZN14ADF5610_Driver4InitEv+0x3c>)
    12be:	6060      	str	r0, [r4, #4]
	spi_adf->Init();
    12c0:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <_ZN14ADF5610_Driver4InitEv+0x40>)
    12c2:	4798      	blx	r3
	memset(to_send,0,4);
    12c4:	0025      	movs	r5, r4
    12c6:	3551      	adds	r5, #81	; 0x51
    12c8:	35ff      	adds	r5, #255	; 0xff
    12ca:	2204      	movs	r2, #4
    12cc:	2100      	movs	r1, #0
    12ce:	0028      	movs	r0, r5
    12d0:	4b0a      	ldr	r3, [pc, #40]	; (12fc <_ZN14ADF5610_Driver4InitEv+0x44>)
    12d2:	4798      	blx	r3
	spi_adf->Write(to_send,4);
    12d4:	2204      	movs	r2, #4
    12d6:	0029      	movs	r1, r5
    12d8:	6860      	ldr	r0, [r4, #4]
    12da:	4b09      	ldr	r3, [pc, #36]	; (1300 <_ZN14ADF5610_Driver4InitEv+0x48>)
    12dc:	4798      	blx	r3
	spi_adf->SetCS(true);
    12de:	2101      	movs	r1, #1
    12e0:	6860      	ldr	r0, [r4, #4]
    12e2:	4b08      	ldr	r3, [pc, #32]	; (1304 <_ZN14ADF5610_Driver4InitEv+0x4c>)
    12e4:	4798      	blx	r3
	 InitiateRegisters();
    12e6:	0020      	movs	r0, r4
    12e8:	4b07      	ldr	r3, [pc, #28]	; (1308 <_ZN14ADF5610_Driver4InitEv+0x50>)
    12ea:	4798      	blx	r3
	return InitPLL();
    12ec:	0020      	movs	r0, r4
    12ee:	4b07      	ldr	r3, [pc, #28]	; (130c <_ZN14ADF5610_Driver4InitEv+0x54>)
    12f0:	4798      	blx	r3
}
    12f2:	bd70      	pop	{r4, r5, r6, pc}
    12f4:	20000ccc 	.word	0x20000ccc
    12f8:	000013ad 	.word	0x000013ad
    12fc:	0000c0dd 	.word	0x0000c0dd
    1300:	000013d5 	.word	0x000013d5
    1304:	00001405 	.word	0x00001405
    1308:	00000d31 	.word	0x00000d31
    130c:	00001269 	.word	0x00001269

00001310 <_ZN14ADF5610_Driver11WriteSubVCOEv>:
void ADF5610_Driver::WriteSubVCO(void){
    1310:	b570      	push	{r4, r5, r6, lr}
    1312:	0005      	movs	r5, r0
	WriteRegisters(22);
    1314:	2116      	movs	r1, #22
    1316:	4c04      	ldr	r4, [pc, #16]	; (1328 <_ZN14ADF5610_Driver11WriteSubVCOEv+0x18>)
    1318:	47a0      	blx	r4
	WriteRegisters(20);
    131a:	2114      	movs	r1, #20
    131c:	0028      	movs	r0, r5
    131e:	47a0      	blx	r4
	WriteRegisters(5);
    1320:	2105      	movs	r1, #5
    1322:	0028      	movs	r0, r5
    1324:	47a0      	blx	r4
}
    1326:	bd70      	pop	{r4, r5, r6, pc}
    1328:	00001119 	.word	0x00001119

0000132c <_ZN14ADF5610_Driver22ShortConfigurationFlowEv>:
void ADF5610_Driver::ShortConfigurationFlow(void){
    132c:	b570      	push	{r4, r5, r6, lr}
    132e:	0004      	movs	r4, r0
  WriteRegisters(8);
    1330:	2108      	movs	r1, #8
    1332:	4d06      	ldr	r5, [pc, #24]	; (134c <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x20>)
    1334:	47a8      	blx	r5
  WriteSubVCO();
    1336:	0020      	movs	r0, r4
    1338:	4b05      	ldr	r3, [pc, #20]	; (1350 <_ZN14ADF5610_Driver22ShortConfigurationFlowEv+0x24>)
    133a:	4798      	blx	r3
  WriteRegisters(3);
    133c:	2103      	movs	r1, #3
    133e:	0020      	movs	r0, r4
    1340:	47a8      	blx	r5
  WriteRegisters(4);
    1342:	2104      	movs	r1, #4
    1344:	0020      	movs	r0, r4
    1346:	47a8      	blx	r5
}
    1348:	bd70      	pop	{r4, r5, r6, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	00001119 	.word	0x00001119
    1350:	00001311 	.word	0x00001311

00001354 <_ZN14ADF5610_Driver20Set_Target_FrequencyEf>:
{
    1354:	b510      	push	{r4, lr}
    1356:	0004      	movs	r4, r0
	target_frequency=tf;
    1358:	239a      	movs	r3, #154	; 0x9a
    135a:	005b      	lsls	r3, r3, #1
    135c:	50c1      	str	r1, [r0, r3]
	CalculateVCOValues();
    135e:	4b03      	ldr	r3, [pc, #12]	; (136c <_ZN14ADF5610_Driver20Set_Target_FrequencyEf+0x18>)
    1360:	4798      	blx	r3
	ShortConfigurationFlow();
    1362:	0020      	movs	r0, r4
    1364:	4b02      	ldr	r3, [pc, #8]	; (1370 <_ZN14ADF5610_Driver20Set_Target_FrequencyEf+0x1c>)
    1366:	4798      	blx	r3
}
    1368:	bd10      	pop	{r4, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	00000e75 	.word	0x00000e75
    1370:	0000132d 	.word	0x0000132d

00001374 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev>:
}
    1374:	b510      	push	{r4, lr}
    1376:	4902      	ldr	r1, [pc, #8]	; (1380 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0xc>)
    1378:	2001      	movs	r0, #1
    137a:	4b02      	ldr	r3, [pc, #8]	; (1384 <_GLOBAL__sub_I__ZN14ADF5610_DriverC2Ev+0x10>)
    137c:	4798      	blx	r3
    137e:	bd10      	pop	{r4, pc}
    1380:	0000ffff 	.word	0x0000ffff
    1384:	00000b31 	.word	0x00000b31

00001388 <_ZN17SPI_Syn_Class_ADFC1Ev>:


// default constructor
SPI_Syn_Class_ADF::SPI_Syn_Class_ADF()
{
		ptrSPISync_adf=this;
    1388:	4b01      	ldr	r3, [pc, #4]	; (1390 <_ZN17SPI_Syn_Class_ADFC1Ev+0x8>)
    138a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class_ADF
    138c:	4770      	bx	lr
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	20000cdc 	.word	0x20000cdc

00001394 <_ZN17SPI_Syn_Class_ADFD1Ev>:


// default destructor
SPI_Syn_Class_ADF::~SPI_Syn_Class_ADF()
{
} //~SPI_Syn_Class_ADF
    1394:	4770      	bx	lr
	...

00001398 <_ZN17SPI_Syn_Class_ADF6EnableEv>:
	
}



uint8_t SPI_Syn_Class_ADF::Enable(){
    1398:	b510      	push	{r4, lr}
	spi_m_sync_enable(&SPI_ADF);
    139a:	4802      	ldr	r0, [pc, #8]	; (13a4 <_ZN17SPI_Syn_Class_ADF6EnableEv+0xc>)
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <_ZN17SPI_Syn_Class_ADF6EnableEv+0x10>)
    139e:	4798      	blx	r3
	return 0;
}
    13a0:	2000      	movs	r0, #0
    13a2:	bd10      	pop	{r4, pc}
    13a4:	20001550 	.word	0x20001550
    13a8:	000027f9 	.word	0x000027f9

000013ac <_ZN17SPI_Syn_Class_ADF4InitEv>:
void SPI_Syn_Class_ADF::Init(){
    13ac:	b510      	push	{r4, lr}
    13ae:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(&SPI_ADF, &io);
    13b0:	0001      	movs	r1, r0
    13b2:	310c      	adds	r1, #12
    13b4:	4804      	ldr	r0, [pc, #16]	; (13c8 <_ZN17SPI_Syn_Class_ADF4InitEv+0x1c>)
    13b6:	4b05      	ldr	r3, [pc, #20]	; (13cc <_ZN17SPI_Syn_Class_ADF4InitEv+0x20>)
    13b8:	4798      	blx	r3
	Enable();
    13ba:	0020      	movs	r0, r4
    13bc:	4b04      	ldr	r3, [pc, #16]	; (13d0 <_ZN17SPI_Syn_Class_ADF4InitEv+0x24>)
    13be:	4798      	blx	r3
	ready=true;
    13c0:	2301      	movs	r3, #1
    13c2:	7023      	strb	r3, [r4, #0]
}
    13c4:	bd10      	pop	{r4, pc}
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	20001550 	.word	0x20001550
    13cc:	000028e1 	.word	0x000028e1
    13d0:	00001399 	.word	0x00001399

000013d4 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh>:

uint8_t  SPI_Syn_Class_ADF::Write(const uint8_t * p, uint8_t n){
    13d4:	b510      	push	{r4, lr}
    13d6:	0014      	movs	r4, r2
	ready=false;
    13d8:	2300      	movs	r3, #0
    13da:	7003      	strb	r3, [r0, #0]

	io_write(io, p, (uint16_t)n);
    13dc:	68c0      	ldr	r0, [r0, #12]
    13de:	b292      	uxth	r2, r2
    13e0:	4b01      	ldr	r3, [pc, #4]	; (13e8 <_ZN17SPI_Syn_Class_ADF5WriteEPKhh+0x14>)
    13e2:	4798      	blx	r3

	return n;
}
    13e4:	0020      	movs	r0, r4
    13e6:	bd10      	pop	{r4, pc}
    13e8:	00002731 	.word	0x00002731

000013ec <_ZN17SPI_Syn_Class_ADF4ReadEPhh>:
uint8_t  SPI_Syn_Class_ADF::Read(uint8_t * p, uint8_t n){
    13ec:	b510      	push	{r4, lr}
    13ee:	0014      	movs	r4, r2
	ready=false;
    13f0:	2300      	movs	r3, #0
    13f2:	7003      	strb	r3, [r0, #0]
	io_read(io, p, (uint16_t)n);
    13f4:	68c0      	ldr	r0, [r0, #12]
    13f6:	b292      	uxth	r2, r2
    13f8:	4b01      	ldr	r3, [pc, #4]	; (1400 <_ZN17SPI_Syn_Class_ADF4ReadEPhh+0x14>)
    13fa:	4798      	blx	r3

	
	return n;
}
    13fc:	0020      	movs	r0, r4
    13fe:	bd10      	pop	{r4, pc}
    1400:	00002769 	.word	0x00002769

00001404 <_ZN17SPI_Syn_Class_ADF5SetCSEb>:
	if (level) {
    1404:	2900      	cmp	r1, #0
    1406:	d104      	bne.n	1412 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1408:	2280      	movs	r2, #128	; 0x80
    140a:	23c0      	movs	r3, #192	; 0xc0
    140c:	05db      	lsls	r3, r3, #23
    140e:	615a      	str	r2, [r3, #20]
	//spi_m_sync_disable(SPI);
	
}
void SPI_Syn_Class_ADF::SetCS(bool st){
	gpio_set_pin_level(CS_ADF,st);
}
    1410:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1412:	2280      	movs	r2, #128	; 0x80
    1414:	23c0      	movs	r3, #192	; 0xc0
    1416:	05db      	lsls	r3, r3, #23
    1418:	619a      	str	r2, [r3, #24]
    141a:	e7f9      	b.n	1410 <_ZN17SPI_Syn_Class_ADF5SetCSEb+0xc>

0000141c <_Z41__static_initialization_and_destruction_0ii>:
		else
		{
			return false;
		}

    141c:	b510      	push	{r4, lr}
    141e:	2801      	cmp	r0, #1
    1420:	d000      	beq.n	1424 <_Z41__static_initialization_and_destruction_0ii+0x8>
    1422:	bd10      	pop	{r4, pc}
    1424:	4b06      	ldr	r3, [pc, #24]	; (1440 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    1426:	4299      	cmp	r1, r3
    1428:	d1fb      	bne.n	1422 <_Z41__static_initialization_and_destruction_0ii+0x6>
static SPI_Syn_Class staticSPI;
    142a:	4c06      	ldr	r4, [pc, #24]	; (1444 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    142c:	0020      	movs	r0, r4
    142e:	4b06      	ldr	r3, [pc, #24]	; (1448 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    1430:	4798      	blx	r3
    1432:	4a06      	ldr	r2, [pc, #24]	; (144c <_Z41__static_initialization_and_destruction_0ii+0x30>)
    1434:	4906      	ldr	r1, [pc, #24]	; (1450 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1436:	0020      	movs	r0, r4
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    143a:	4798      	blx	r3
    143c:	e7f1      	b.n	1422 <_Z41__static_initialization_and_destruction_0ii+0x6>
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	0000ffff 	.word	0x0000ffff
    1444:	20000ce0 	.word	0x20000ce0
    1448:	00001d69 	.word	0x00001d69
    144c:	20000000 	.word	0x20000000
    1450:	00001d75 	.word	0x00001d75
    1454:	00007161 	.word	0x00007161

00001458 <_ZN15lmx2694_HandlerC1Ev>:
	write_registers=local_read_registers;
    1458:	4b0a      	ldr	r3, [pc, #40]	; (1484 <_ZN15lmx2694_HandlerC1Ev+0x2c>)
    145a:	3310      	adds	r3, #16
    145c:	6083      	str	r3, [r0, #8]
	read_registers=local_write_registers;
    145e:	4b0a      	ldr	r3, [pc, #40]	; (1488 <_ZN15lmx2694_HandlerC1Ev+0x30>)
    1460:	3378      	adds	r3, #120	; 0x78
    1462:	6043      	str	r3, [r0, #4]
	channel_divider=1;
    1464:	2301      	movs	r3, #1
    1466:	2221      	movs	r2, #33	; 0x21
    1468:	5483      	strb	r3, [r0, r2]
	channel_index=0;
    146a:	2200      	movs	r2, #0
    146c:	77c2      	strb	r2, [r0, #31]
	step=(MAX_SENSOR_FREQUENCY-MIN_WOOBLING_FREQUENCY)/(1024.0*2);
    146e:	4a07      	ldr	r2, [pc, #28]	; (148c <_ZN15lmx2694_HandlerC1Ev+0x34>)
    1470:	6442      	str	r2, [r0, #68]	; 0x44
	current_frequency=4000;
    1472:	4a07      	ldr	r2, [pc, #28]	; (1490 <_ZN15lmx2694_HandlerC1Ev+0x38>)
    1474:	6002      	str	r2, [r0, #0]
	target_frequency=current_frequency+step;
    1476:	4a07      	ldr	r2, [pc, #28]	; (1494 <_ZN15lmx2694_HandlerC1Ev+0x3c>)
    1478:	6342      	str	r2, [r0, #52]	; 0x34
	direction=true;
    147a:	2249      	movs	r2, #73	; 0x49
    147c:	5483      	strb	r3, [r0, r2]
	mash_order=1;
    147e:	3a29      	subs	r2, #41	; 0x29
    1480:	5483      	strb	r3, [r0, r2]
}
    1482:	4770      	bx	lr
    1484:	20000ce0 	.word	0x20000ce0
    1488:	20000d60 	.word	0x20000d60
    148c:	3ec80000 	.word	0x3ec80000
    1490:	457a0000 	.word	0x457a0000
    1494:	457a0640 	.word	0x457a0640

00001498 <_ZN15lmx2694_HandlerD1Ev>:
}
    1498:	4770      	bx	lr

0000149a <_ZN15lmx2694_Handler11Get_OUT_MUXEh>:
	if (ov==2)
    149a:	2902      	cmp	r1, #2
    149c:	d006      	beq.n	14ac <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x12>
		return	(uint8_t)((write_registers[45]>>11)&(0x03));
    149e:	6882      	ldr	r2, [r0, #8]
    14a0:	235a      	movs	r3, #90	; 0x5a
    14a2:	5ad3      	ldrh	r3, [r2, r3]
    14a4:	0adb      	lsrs	r3, r3, #11
    14a6:	2003      	movs	r0, #3
    14a8:	4018      	ands	r0, r3
}
    14aa:	4770      	bx	lr
		return	(uint8_t)((write_registers[46])&(0x03));
    14ac:	6882      	ldr	r2, [r0, #8]
    14ae:	235c      	movs	r3, #92	; 0x5c
    14b0:	5cd3      	ldrb	r3, [r2, r3]
    14b2:	2003      	movs	r0, #3
    14b4:	4018      	ands	r0, r3
    14b6:	e7f8      	b.n	14aa <_ZN15lmx2694_Handler11Get_OUT_MUXEh+0x10>

000014b8 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
	if (mbr)
    14b8:	2900      	cmp	r1, #0
    14ba:	d107      	bne.n	14cc <_ZN15lmx2694_Handler13Get_N_DividerEb+0x14>
		N_divider=(uint32_t)(((uint32_t)write_registers[34])<<16)+write_registers[36];
    14bc:	6882      	ldr	r2, [r0, #8]
    14be:	2344      	movs	r3, #68	; 0x44
    14c0:	5ad3      	ldrh	r3, [r2, r3]
    14c2:	041b      	lsls	r3, r3, #16
    14c4:	3148      	adds	r1, #72	; 0x48
    14c6:	5a52      	ldrh	r2, [r2, r1]
    14c8:	189b      	adds	r3, r3, r2
    14ca:	6243      	str	r3, [r0, #36]	; 0x24
	return N_divider;
    14cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    14ce:	4770      	bx	lr

000014d0 <_ZN15lmx2694_Handler13Get_NumeratorEb>:
	if (mbr)
    14d0:	2900      	cmp	r1, #0
    14d2:	d107      	bne.n	14e4 <_ZN15lmx2694_Handler13Get_NumeratorEb+0x14>
		numerator=(uint32_t)(((uint32_t)write_registers[42])<<16)+write_registers[43];
    14d4:	6882      	ldr	r2, [r0, #8]
    14d6:	2354      	movs	r3, #84	; 0x54
    14d8:	5ad3      	ldrh	r3, [r2, r3]
    14da:	041b      	lsls	r3, r3, #16
    14dc:	3156      	adds	r1, #86	; 0x56
    14de:	5a52      	ldrh	r2, [r2, r1]
    14e0:	189b      	adds	r3, r3, r2
    14e2:	6283      	str	r3, [r0, #40]	; 0x28
	return numerator;
    14e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
    14e6:	4770      	bx	lr

000014e8 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
	if (mbr)
    14e8:	2900      	cmp	r1, #0
    14ea:	d107      	bne.n	14fc <_ZN15lmx2694_Handler15Get_DenominatorEb+0x14>
		denominator=(uint32_t)(((uint32_t)write_registers[38])<<16)+write_registers[39];
    14ec:	6882      	ldr	r2, [r0, #8]
    14ee:	234c      	movs	r3, #76	; 0x4c
    14f0:	5ad3      	ldrh	r3, [r2, r3]
    14f2:	041b      	lsls	r3, r3, #16
    14f4:	314e      	adds	r1, #78	; 0x4e
    14f6:	5a52      	ldrh	r2, [r2, r1]
    14f8:	189b      	adds	r3, r3, r2
    14fa:	62c3      	str	r3, [r0, #44]	; 0x2c
	return denominator;
    14fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
    14fe:	4770      	bx	lr

00001500 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
float lmx2694_Handler::Calculate_Current_Frequency(bool mbr){
    1500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1502:	0004      	movs	r4, r0
	if (mbr)
    1504:	2900      	cmp	r1, #0
    1506:	d001      	beq.n	150c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0xc>
	return vco_frequency;
    1508:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
    150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+(float(Get_Numerator(false))/float(Get_Denominator(false))));
    150c:	4b0e      	ldr	r3, [pc, #56]	; (1548 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x48>)
    150e:	4798      	blx	r3
    1510:	4d0e      	ldr	r5, [pc, #56]	; (154c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x4c>)
    1512:	47a8      	blx	r5
    1514:	1c06      	adds	r6, r0, #0
    1516:	2100      	movs	r1, #0
    1518:	0020      	movs	r0, r4
    151a:	4b0d      	ldr	r3, [pc, #52]	; (1550 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x50>)
    151c:	4798      	blx	r3
    151e:	47a8      	blx	r5
    1520:	1c07      	adds	r7, r0, #0
    1522:	2100      	movs	r1, #0
    1524:	0020      	movs	r0, r4
    1526:	4b0b      	ldr	r3, [pc, #44]	; (1554 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x54>)
    1528:	4798      	blx	r3
    152a:	47a8      	blx	r5
    152c:	1c01      	adds	r1, r0, #0
    152e:	1c38      	adds	r0, r7, #0
    1530:	4b09      	ldr	r3, [pc, #36]	; (1558 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x58>)
    1532:	4798      	blx	r3
    1534:	1c01      	adds	r1, r0, #0
    1536:	1c30      	adds	r0, r6, #0
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x5c>)
    153a:	4798      	blx	r3
    153c:	4908      	ldr	r1, [pc, #32]	; (1560 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x60>)
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x64>)
    1540:	4798      	blx	r3
    1542:	63a0      	str	r0, [r4, #56]	; 0x38
    1544:	e7e0      	b.n	1508 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x8>
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	000014b9 	.word	0x000014b9
    154c:	0000a1cd 	.word	0x0000a1cd
    1550:	000014d1 	.word	0x000014d1
    1554:	000014e9 	.word	0x000014e9
    1558:	00009795 	.word	0x00009795
    155c:	00009471 	.word	0x00009471
    1560:	43480000 	.word	0x43480000
    1564:	00009b75 	.word	0x00009b75

00001568 <_ZN15lmx2694_Handler3GCDEmm>:
{
    1568:	b570      	push	{r4, r5, r6, lr}
    156a:	0006      	movs	r6, r0
    156c:	000d      	movs	r5, r1
    156e:	0014      	movs	r4, r2
	if (a == 0)
    1570:	2900      	cmp	r1, #0
    1572:	d016      	beq.n	15a2 <_ZN15lmx2694_Handler3GCDEmm+0x3a>
	else if (b == 0)
    1574:	2a00      	cmp	r2, #0
    1576:	d016      	beq.n	15a6 <_ZN15lmx2694_Handler3GCDEmm+0x3e>
	if (a < b)
    1578:	4291      	cmp	r1, r2
    157a:	d309      	bcc.n	1590 <_ZN15lmx2694_Handler3GCDEmm+0x28>
	return GCD(b, a % b);
    157c:	0011      	movs	r1, r2
    157e:	0028      	movs	r0, r5
    1580:	4b0a      	ldr	r3, [pc, #40]	; (15ac <_ZN15lmx2694_Handler3GCDEmm+0x44>)
    1582:	4798      	blx	r3
    1584:	000a      	movs	r2, r1
    1586:	0021      	movs	r1, r4
    1588:	0030      	movs	r0, r6
    158a:	f7ff ffed 	bl	1568 <_ZN15lmx2694_Handler3GCDEmm>
    158e:	e009      	b.n	15a4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return GCD(a, b % a);
    1590:	0010      	movs	r0, r2
    1592:	4b06      	ldr	r3, [pc, #24]	; (15ac <_ZN15lmx2694_Handler3GCDEmm+0x44>)
    1594:	4798      	blx	r3
    1596:	000a      	movs	r2, r1
    1598:	0029      	movs	r1, r5
    159a:	0030      	movs	r0, r6
    159c:	f7ff ffe4 	bl	1568 <_ZN15lmx2694_Handler3GCDEmm>
    15a0:	e000      	b.n	15a4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
	return b;
    15a2:	0010      	movs	r0, r2
}
    15a4:	bd70      	pop	{r4, r5, r6, pc}
	return a;
    15a6:	0008      	movs	r0, r1
    15a8:	e7fc      	b.n	15a4 <_ZN15lmx2694_Handler3GCDEmm+0x3c>
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	00008f61 	.word	0x00008f61

000015b0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
uint8_t lmx2694_Handler::Choose_Channel_Divider_Index(){
    15b0:	b570      	push	{r4, r5, r6, lr}
    15b2:	0005      	movs	r5, r0
	for ( int i = 0; i < channel_divider_size; i++)
    15b4:	2400      	movs	r4, #0
    15b6:	e00d      	b.n	15d4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x24>
				if (MAX_VCO_FREQUENCY/(channel_divider_values[i])>target_frequency)
    15b8:	00a3      	lsls	r3, r4, #2
    15ba:	4a17      	ldr	r2, [pc, #92]	; (1618 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    15bc:	5899      	ldr	r1, [r3, r2]
    15be:	4817      	ldr	r0, [pc, #92]	; (161c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x6c>)
    15c0:	4b17      	ldr	r3, [pc, #92]	; (1620 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
    15c2:	4798      	blx	r3
    15c4:	4b17      	ldr	r3, [pc, #92]	; (1624 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
    15c6:	4798      	blx	r3
    15c8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    15ca:	4b17      	ldr	r3, [pc, #92]	; (1628 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
    15cc:	4798      	blx	r3
    15ce:	2800      	cmp	r0, #0
    15d0:	d01a      	beq.n	1608 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x58>
	for ( int i = 0; i < channel_divider_size; i++)
    15d2:	3401      	adds	r4, #1
    15d4:	2c0d      	cmp	r4, #13
    15d6:	dc10      	bgt.n	15fa <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
		if (i<3)
    15d8:	2c02      	cmp	r4, #2
    15da:	dded      	ble.n	15b8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x8>
				if (11500/(channel_divider_values[i])>target_frequency)
    15dc:	00a3      	lsls	r3, r4, #2
    15de:	4a0e      	ldr	r2, [pc, #56]	; (1618 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    15e0:	5899      	ldr	r1, [r3, r2]
    15e2:	4812      	ldr	r0, [pc, #72]	; (162c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x7c>)
    15e4:	4b0e      	ldr	r3, [pc, #56]	; (1620 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x70>)
    15e6:	4798      	blx	r3
    15e8:	4b0e      	ldr	r3, [pc, #56]	; (1624 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
    15ea:	4798      	blx	r3
    15ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
    15ee:	4b0e      	ldr	r3, [pc, #56]	; (1628 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
    15f0:	4798      	blx	r3
    15f2:	2800      	cmp	r0, #0
    15f4:	d1ed      	bne.n	15d2 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x22>
					channel_index= i-1;
    15f6:	3c01      	subs	r4, #1
    15f8:	77ec      	strb	r4, [r5, #31]
	channel_divider=channel_divider_values[channel_index];
    15fa:	7fe8      	ldrb	r0, [r5, #31]
    15fc:	0083      	lsls	r3, r0, #2
    15fe:	4a06      	ldr	r2, [pc, #24]	; (1618 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x68>)
    1600:	5cd2      	ldrb	r2, [r2, r3]
    1602:	2321      	movs	r3, #33	; 0x21
    1604:	54ea      	strb	r2, [r5, r3]
}
    1606:	bd70      	pop	{r4, r5, r6, pc}
					if (i>0)
    1608:	2c00      	cmp	r4, #0
    160a:	dd02      	ble.n	1612 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x62>
							channel_index=i-1;
    160c:	3c01      	subs	r4, #1
    160e:	77ec      	strb	r4, [r5, #31]
    1610:	e7f3      	b.n	15fa <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
						 channel_index=0;
    1612:	2300      	movs	r3, #0
    1614:	77eb      	strb	r3, [r5, #31]
    1616:	e7f0      	b.n	15fa <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
    1618:	00010ed8 	.word	0x00010ed8
    161c:	00003afc 	.word	0x00003afc
    1620:	00008f69 	.word	0x00008f69
    1624:	0000a12d 	.word	0x0000a12d
    1628:	00009209 	.word	0x00009209
    162c:	00002cec 	.word	0x00002cec

00001630 <_ZN15lmx2694_Handler18Calculate_FractionEf>:
void lmx2694_Handler::Calculate_Fraction(float fr){
    1630:	b5f0      	push	{r4, r5, r6, r7, lr}
    1632:	b083      	sub	sp, #12
    1634:	0004      	movs	r4, r0
    1636:	1c08      	adds	r0, r1, #0
	gcd=GCD((uint32_t)(round(fr*PRECISION)),PRECISION);
    1638:	219f      	movs	r1, #159	; 0x9f
    163a:	05c9      	lsls	r1, r1, #23
    163c:	4b0f      	ldr	r3, [pc, #60]	; (167c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x4c>)
    163e:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    1640:	4b0f      	ldr	r3, [pc, #60]	; (1680 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x50>)
    1642:	4798      	blx	r3
    1644:	9001      	str	r0, [sp, #4]
    1646:	2601      	movs	r6, #1
    1648:	4276      	negs	r6, r6
    164a:	4f0e      	ldr	r7, [pc, #56]	; (1684 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x54>)
    164c:	47b8      	blx	r7
    164e:	0001      	movs	r1, r0
    1650:	0032      	movs	r2, r6
    1652:	0020      	movs	r0, r4
    1654:	4b0c      	ldr	r3, [pc, #48]	; (1688 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x58>)
    1656:	4798      	blx	r3
    1658:	0005      	movs	r5, r0
    165a:	6320      	str	r0, [r4, #48]	; 0x30
	numerator=(uint32_t)(round(fr*PRECISION)/gcd);
    165c:	4b0b      	ldr	r3, [pc, #44]	; (168c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x5c>)
    165e:	4798      	blx	r3
    1660:	1c01      	adds	r1, r0, #0
    1662:	9801      	ldr	r0, [sp, #4]
    1664:	4b0a      	ldr	r3, [pc, #40]	; (1690 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x60>)
    1666:	4798      	blx	r3
    1668:	47b8      	blx	r7
    166a:	62a0      	str	r0, [r4, #40]	; 0x28
	denominator=PRECISION/gcd;
    166c:	0029      	movs	r1, r5
    166e:	0030      	movs	r0, r6
    1670:	4b08      	ldr	r3, [pc, #32]	; (1694 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x64>)
    1672:	4798      	blx	r3
    1674:	62e0      	str	r0, [r4, #44]	; 0x2c
}
    1676:	b003      	add	sp, #12
    1678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	00009b75 	.word	0x00009b75
    1680:	0000733d 	.word	0x0000733d
    1684:	00009285 	.word	0x00009285
    1688:	00001569 	.word	0x00001569
    168c:	0000a1cd 	.word	0x0000a1cd
    1690:	00009795 	.word	0x00009795
    1694:	00008e55 	.word	0x00008e55

00001698 <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
    1698:	b530      	push	{r4, r5, lr}
	for(int i=0; i<3;i++){
    169a:	2200      	movs	r2, #0
    169c:	2a02      	cmp	r2, #2
    169e:	dc08      	bgt.n	16b2 <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
    16a0:	2302      	movs	r3, #2
    16a2:	1a9b      	subs	r3, r3, r2
    16a4:	00d4      	lsls	r4, r2, #3
    16a6:	000d      	movs	r5, r1
    16a8:	40e5      	lsrs	r5, r4
    16aa:	18c3      	adds	r3, r0, r3
    16ac:	741d      	strb	r5, [r3, #16]
	for(int i=0; i<3;i++){
    16ae:	3201      	adds	r2, #1
    16b0:	e7f4      	b.n	169c <_ZN15lmx2694_Handler15Get_Three_BytesEm+0x4>
}
    16b2:	bd30      	pop	{r4, r5, pc}

000016b4 <_ZN15lmx2694_Handler10Power_DownEv>:
bool lmx2694_Handler::Power_Down(){
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
    16b8:	2100      	movs	r1, #0
    16ba:	68c0      	ldr	r0, [r0, #12]
    16bc:	4d0a      	ldr	r5, [pc, #40]	; (16e8 <_ZN15lmx2694_Handler10Power_DownEv+0x34>)
    16be:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
    16c0:	490a      	ldr	r1, [pc, #40]	; (16ec <_ZN15lmx2694_Handler10Power_DownEv+0x38>)
    16c2:	0020      	movs	r0, r4
    16c4:	4b0a      	ldr	r3, [pc, #40]	; (16f0 <_ZN15lmx2694_Handler10Power_DownEv+0x3c>)
    16c6:	4798      	blx	r3
	int_result=spi_lmx->Write(write_bytes,3);
    16c8:	0021      	movs	r1, r4
    16ca:	3110      	adds	r1, #16
    16cc:	2203      	movs	r2, #3
    16ce:	68e0      	ldr	r0, [r4, #12]
    16d0:	4b08      	ldr	r3, [pc, #32]	; (16f4 <_ZN15lmx2694_Handler10Power_DownEv+0x40>)
    16d2:	4798      	blx	r3
    16d4:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
    16d6:	17c3      	asrs	r3, r0, #31
    16d8:	1a18      	subs	r0, r3, r0
    16da:	0fc0      	lsrs	r0, r0, #31
    16dc:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
    16de:	2101      	movs	r1, #1
    16e0:	68e0      	ldr	r0, [r4, #12]
    16e2:	47a8      	blx	r5
	return bool_result;
    16e4:	7da0      	ldrb	r0, [r4, #22]
}
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	00001de5 	.word	0x00001de5
    16ec:	00002119 	.word	0x00002119
    16f0:	00001699 	.word	0x00001699
    16f4:	00001db5 	.word	0x00001db5

000016f8 <_ZN15lmx2694_Handler13Program_ResetEv>:
bool lmx2694_Handler::Program_Reset(){
    16f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fa:	b083      	sub	sp, #12
    16fc:	0004      	movs	r4, r0
	spi_lmx->SetCS(false);
    16fe:	2100      	movs	r1, #0
    1700:	68c0      	ldr	r0, [r0, #12]
    1702:	4d16      	ldr	r5, [pc, #88]	; (175c <_ZN15lmx2694_Handler13Program_ResetEv+0x64>)
    1704:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
    1706:	4916      	ldr	r1, [pc, #88]	; (1760 <_ZN15lmx2694_Handler13Program_ResetEv+0x68>)
    1708:	0020      	movs	r0, r4
    170a:	4f16      	ldr	r7, [pc, #88]	; (1764 <_ZN15lmx2694_Handler13Program_ResetEv+0x6c>)
    170c:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
    170e:	2310      	movs	r3, #16
    1710:	469c      	mov	ip, r3
    1712:	44a4      	add	ip, r4
    1714:	4663      	mov	r3, ip
    1716:	2203      	movs	r2, #3
    1718:	9301      	str	r3, [sp, #4]
    171a:	4661      	mov	r1, ip
    171c:	68e0      	ldr	r0, [r4, #12]
    171e:	4e12      	ldr	r6, [pc, #72]	; (1768 <_ZN15lmx2694_Handler13Program_ResetEv+0x70>)
    1720:	47b0      	blx	r6
    1722:	61a0      	str	r0, [r4, #24]
	spi_lmx->SetCS(true);
    1724:	2101      	movs	r1, #1
    1726:	68e0      	ldr	r0, [r4, #12]
    1728:	47a8      	blx	r5
	delay_ms(100);
    172a:	2064      	movs	r0, #100	; 0x64
    172c:	4b0f      	ldr	r3, [pc, #60]	; (176c <_ZN15lmx2694_Handler13Program_ResetEv+0x74>)
    172e:	4798      	blx	r3
	spi_lmx->SetCS(false);
    1730:	2100      	movs	r1, #0
    1732:	68e0      	ldr	r0, [r4, #12]
    1734:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
    1736:	490e      	ldr	r1, [pc, #56]	; (1770 <_ZN15lmx2694_Handler13Program_ResetEv+0x78>)
    1738:	0020      	movs	r0, r4
    173a:	47b8      	blx	r7
	int_result=spi_lmx->Write(write_bytes,3);
    173c:	2203      	movs	r2, #3
    173e:	9901      	ldr	r1, [sp, #4]
    1740:	68e0      	ldr	r0, [r4, #12]
    1742:	47b0      	blx	r6
    1744:	61a0      	str	r0, [r4, #24]
	bool_result=int_result>0;
    1746:	17c3      	asrs	r3, r0, #31
    1748:	1a18      	subs	r0, r3, r0
    174a:	0fc0      	lsrs	r0, r0, #31
    174c:	75a0      	strb	r0, [r4, #22]
	spi_lmx->SetCS(true);
    174e:	2101      	movs	r1, #1
    1750:	68e0      	ldr	r0, [r4, #12]
    1752:	47a8      	blx	r5
	return bool_result;
    1754:	7da0      	ldrb	r0, [r4, #22]
}
    1756:	b003      	add	sp, #12
    1758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	00001de5 	.word	0x00001de5
    1760:	0000211e 	.word	0x0000211e
    1764:	00001699 	.word	0x00001699
    1768:	00001db5 	.word	0x00001db5
    176c:	000025c1 	.word	0x000025c1
    1770:	0000211c 	.word	0x0000211c

00001774 <_ZN15lmx2694_Handler16Make_Three_BytesEht>:
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16_t data){
    1774:	b570      	push	{r4, r5, r6, lr}
	for(int i=0; i<2;i++){
    1776:	2300      	movs	r3, #0
    1778:	2b01      	cmp	r3, #1
    177a:	dc08      	bgt.n	178e <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x1a>
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
    177c:	2402      	movs	r4, #2
    177e:	1ae4      	subs	r4, r4, r3
    1780:	00dd      	lsls	r5, r3, #3
    1782:	0016      	movs	r6, r2
    1784:	412e      	asrs	r6, r5
    1786:	1904      	adds	r4, r0, r4
    1788:	7426      	strb	r6, [r4, #16]
	for(int i=0; i<2;i++){
    178a:	3301      	adds	r3, #1
    178c:	e7f4      	b.n	1778 <_ZN15lmx2694_Handler16Make_Three_BytesEht+0x4>
	write_bytes[0]=index;
    178e:	7401      	strb	r1, [r0, #16]
}
    1790:	bd70      	pop	{r4, r5, r6, pc}
	...

00001794 <_ZN15lmx2694_Handler21Write_Single_RegisterEht>:
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16_t data){
    1794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1796:	0004      	movs	r4, r0
    1798:	000e      	movs	r6, r1
    179a:	0015      	movs	r5, r2
	if ((write_registers[index]==data)&is_locked)
    179c:	004f      	lsls	r7, r1, #1
    179e:	6883      	ldr	r3, [r0, #8]
    17a0:	5bdb      	ldrh	r3, [r3, r7]
    17a2:	7dc2      	ldrb	r2, [r0, #23]
    17a4:	42ab      	cmp	r3, r5
    17a6:	d103      	bne.n	17b0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
    17a8:	2a00      	cmp	r2, #0
    17aa:	d001      	beq.n	17b0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
	return int_result;
    17ac:	69a0      	ldr	r0, [r4, #24]
}
    17ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_lmx->SetCS(false);
    17b0:	2100      	movs	r1, #0
    17b2:	68e0      	ldr	r0, [r4, #12]
    17b4:	4b0b      	ldr	r3, [pc, #44]	; (17e4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
    17b6:	4798      	blx	r3
		Make_Three_Bytes(index,data);
    17b8:	002a      	movs	r2, r5
    17ba:	0031      	movs	r1, r6
    17bc:	0020      	movs	r0, r4
    17be:	4b0a      	ldr	r3, [pc, #40]	; (17e8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x54>)
    17c0:	4798      	blx	r3
		int_result=spi_lmx->Write(write_bytes,3);
    17c2:	0021      	movs	r1, r4
    17c4:	3110      	adds	r1, #16
    17c6:	2203      	movs	r2, #3
    17c8:	68e0      	ldr	r0, [r4, #12]
    17ca:	4b08      	ldr	r3, [pc, #32]	; (17ec <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x58>)
    17cc:	4798      	blx	r3
    17ce:	61a0      	str	r0, [r4, #24]
		if (int_result>0)
    17d0:	2800      	cmp	r0, #0
    17d2:	dd01      	ble.n	17d8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x44>
				write_registers[index]=data;
    17d4:	68a3      	ldr	r3, [r4, #8]
    17d6:	53dd      	strh	r5, [r3, r7]
		spi_lmx->SetCS(true);
    17d8:	2101      	movs	r1, #1
    17da:	68e0      	ldr	r0, [r4, #12]
    17dc:	4b01      	ldr	r3, [pc, #4]	; (17e4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
    17de:	4798      	blx	r3
    17e0:	e7e4      	b.n	17ac <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x18>
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	00001de5 	.word	0x00001de5
    17e8:	00001775 	.word	0x00001775
    17ec:	00001db5 	.word	0x00001db5

000017f0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
    17f0:	b570      	push	{r4, r5, r6, lr}
    17f2:	0004      	movs	r4, r0
    17f4:	1c0d      	adds	r5, r1, #0
	if (mash_order)
    17f6:	2320      	movs	r3, #32
    17f8:	5cc3      	ldrb	r3, [r0, r3]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d002      	beq.n	1804 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
		switch (mash_order)
    17fe:	d005      	beq.n	180c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1c>
    1800:	2b01      	cmp	r3, #1
    1802:	d015      	beq.n	1830 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x40>
	return write_registers[37];
    1804:	68a2      	ldr	r2, [r4, #8]
    1806:	234a      	movs	r3, #74	; 0x4a
    1808:	5ad0      	ldrh	r0, [r2, r3]
}
    180a:	bd70      	pop	{r4, r5, r6, pc}
				if (vcof>12500)
    180c:	4917      	ldr	r1, [pc, #92]	; (186c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
    180e:	1c28      	adds	r0, r5, #0
    1810:	4b17      	ldr	r3, [pc, #92]	; (1870 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1812:	4798      	blx	r3
    1814:	2800      	cmp	r0, #0
    1816:	d005      	beq.n	1824 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x34>
					Write_Single_Register(37,0x8204);
    1818:	4a16      	ldr	r2, [pc, #88]	; (1874 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
    181a:	2125      	movs	r1, #37	; 0x25
    181c:	0020      	movs	r0, r4
    181e:	4b16      	ldr	r3, [pc, #88]	; (1878 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1820:	4798      	blx	r3
    1822:	e7ef      	b.n	1804 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8104);
    1824:	4a15      	ldr	r2, [pc, #84]	; (187c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
    1826:	2125      	movs	r1, #37	; 0x25
    1828:	0020      	movs	r0, r4
    182a:	4b13      	ldr	r3, [pc, #76]	; (1878 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    182c:	4798      	blx	r3
    182e:	e7e9      	b.n	1804 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
				if (vcof>12500)
    1830:	490e      	ldr	r1, [pc, #56]	; (186c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
    1832:	1c28      	adds	r0, r5, #0
    1834:	4b0e      	ldr	r3, [pc, #56]	; (1870 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1836:	4798      	blx	r3
    1838:	2800      	cmp	r0, #0
    183a:	d10b      	bne.n	1854 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x64>
					if (vcof>10000)
    183c:	4910      	ldr	r1, [pc, #64]	; (1880 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x90>)
    183e:	1c28      	adds	r0, r5, #0
    1840:	4b0b      	ldr	r3, [pc, #44]	; (1870 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
    1842:	4798      	blx	r3
    1844:	2800      	cmp	r0, #0
    1846:	d10b      	bne.n	1860 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x70>
						Write_Single_Register(37,0x8104);
    1848:	4a0c      	ldr	r2, [pc, #48]	; (187c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
    184a:	2125      	movs	r1, #37	; 0x25
    184c:	0020      	movs	r0, r4
    184e:	4b0a      	ldr	r3, [pc, #40]	; (1878 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1850:	4798      	blx	r3
    1852:	e7d7      	b.n	1804 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8304);
    1854:	4a0b      	ldr	r2, [pc, #44]	; (1884 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x94>)
    1856:	2125      	movs	r1, #37	; 0x25
    1858:	0020      	movs	r0, r4
    185a:	4b07      	ldr	r3, [pc, #28]	; (1878 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    185c:	4798      	blx	r3
    185e:	e7d1      	b.n	1804 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
						Write_Single_Register(37,0x8204);
    1860:	4a04      	ldr	r2, [pc, #16]	; (1874 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
    1862:	2125      	movs	r1, #37	; 0x25
    1864:	0020      	movs	r0, r4
    1866:	4b04      	ldr	r3, [pc, #16]	; (1878 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
    1868:	4798      	blx	r3
    186a:	e7cb      	b.n	1804 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
    186c:	46435000 	.word	0x46435000
    1870:	00009209 	.word	0x00009209
    1874:	00008204 	.word	0x00008204
    1878:	00001795 	.word	0x00001795
    187c:	00008104 	.word	0x00008104
    1880:	461c4000 	.word	0x461c4000
    1884:	00008304 	.word	0x00008304

00001888 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
bool lmx2694_Handler::Write_FCAL_EN(bool st){
    1888:	b510      	push	{r4, lr}
    188a:	0004      	movs	r4, r0
	if(st){
    188c:	2900      	cmp	r1, #0
    188e:	d10e      	bne.n	18ae <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x26>
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
    1890:	6883      	ldr	r3, [r0, #8]
    1892:	881b      	ldrh	r3, [r3, #0]
    1894:	2208      	movs	r2, #8
    1896:	4393      	bics	r3, r2
    1898:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
    189a:	8ba2      	ldrh	r2, [r4, #28]
    189c:	2100      	movs	r1, #0
    189e:	0020      	movs	r0, r4
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x34>)
    18a2:	4798      	blx	r3
    18a4:	61a0      	str	r0, [r4, #24]
	return int_result;
    18a6:	1e43      	subs	r3, r0, #1
    18a8:	4198      	sbcs	r0, r3
    18aa:	b2c0      	uxtb	r0, r0
}
    18ac:	bd10      	pop	{r4, pc}
		register_value=write_registers[0]|(0x01<<FCAL_EN);
    18ae:	6883      	ldr	r3, [r0, #8]
    18b0:	881b      	ldrh	r3, [r3, #0]
    18b2:	2208      	movs	r2, #8
    18b4:	4313      	orrs	r3, r2
    18b6:	8383      	strh	r3, [r0, #28]
    18b8:	e7ef      	b.n	189a <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x12>
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	00001795 	.word	0x00001795

000018c0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
    18c0:	b570      	push	{r4, r5, r6, lr}
    18c2:	0004      	movs	r4, r0
	Write_FCAL_EN(false);
    18c4:	2100      	movs	r1, #0
    18c6:	4d05      	ldr	r5, [pc, #20]	; (18dc <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x1c>)
    18c8:	47a8      	blx	r5
	delay_ms(100);
    18ca:	2064      	movs	r0, #100	; 0x64
    18cc:	4b04      	ldr	r3, [pc, #16]	; (18e0 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x20>)
    18ce:	4798      	blx	r3
	bool_result=Write_FCAL_EN(true);
    18d0:	2101      	movs	r1, #1
    18d2:	0020      	movs	r0, r4
    18d4:	47a8      	blx	r5
    18d6:	75a0      	strb	r0, [r4, #22]
}
    18d8:	bd70      	pop	{r4, r5, r6, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	00001889 	.word	0x00001889
    18e0:	000025c1 	.word	0x000025c1

000018e4 <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
void lmx2694_Handler::Initiate_Registers(){
    18e4:	b570      	push	{r4, r5, r6, lr}
    18e6:	0005      	movs	r5, r0
	for (int i = 0; i < NUMBER_REGISTERS; i++)
    18e8:	2200      	movs	r2, #0
    18ea:	2a72      	cmp	r2, #114	; 0x72
    18ec:	dc0a      	bgt.n	1904 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x20>
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
    18ee:	0050      	lsls	r0, r2, #1
    18f0:	2372      	movs	r3, #114	; 0x72
    18f2:	1a9b      	subs	r3, r3, r2
    18f4:	005b      	lsls	r3, r3, #1
    18f6:	490b      	ldr	r1, [pc, #44]	; (1924 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x40>)
    18f8:	18cb      	adds	r3, r1, r3
    18fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    18fc:	6869      	ldr	r1, [r5, #4]
    18fe:	520b      	strh	r3, [r1, r0]
	for (int i = 0; i < NUMBER_REGISTERS; i++)
    1900:	3201      	adds	r2, #1
    1902:	e7f2      	b.n	18ea <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x6>
    1904:	2473      	movs	r4, #115	; 0x73
	for(int i=NUMBER_REGISTERS; i>0;i--){
    1906:	2c00      	cmp	r4, #0
    1908:	dd0b      	ble.n	1922 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x3e>
		Write_Single_Register(i-1,read_registers[i-1]);
    190a:	1e61      	subs	r1, r4, #1
    190c:	b2c9      	uxtb	r1, r1
    190e:	4b06      	ldr	r3, [pc, #24]	; (1928 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x44>)
    1910:	18e3      	adds	r3, r4, r3
    1912:	005b      	lsls	r3, r3, #1
    1914:	686a      	ldr	r2, [r5, #4]
    1916:	5ad2      	ldrh	r2, [r2, r3]
    1918:	0028      	movs	r0, r5
    191a:	4b04      	ldr	r3, [pc, #16]	; (192c <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x48>)
    191c:	4798      	blx	r3
	for(int i=NUMBER_REGISTERS; i>0;i--){
    191e:	3c01      	subs	r4, #1
    1920:	e7f1      	b.n	1906 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x22>
}
    1922:	bd70      	pop	{r4, r5, r6, pc}
    1924:	00010ed8 	.word	0x00010ed8
    1928:	7fffffff 	.word	0x7fffffff
    192c:	00001795 	.word	0x00001795

00001930 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
    1930:	b510      	push	{r4, lr}
    1932:	0004      	movs	r4, r0
	if(st){
    1934:	2900      	cmp	r1, #0
    1936:	d10b      	bne.n	1950 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x20>
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
    1938:	6843      	ldr	r3, [r0, #4]
    193a:	881b      	ldrh	r3, [r3, #0]
    193c:	2204      	movs	r2, #4
    193e:	4393      	bics	r3, r2
    1940:	8383      	strh	r3, [r0, #28]
	int_result=Write_Single_Register(0,register_value);
    1942:	8ba2      	ldrh	r2, [r4, #28]
    1944:	2100      	movs	r1, #0
    1946:	0020      	movs	r0, r4
    1948:	4b04      	ldr	r3, [pc, #16]	; (195c <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x2c>)
    194a:	4798      	blx	r3
    194c:	61a0      	str	r0, [r4, #24]
}
    194e:	bd10      	pop	{r4, pc}
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
    1950:	6843      	ldr	r3, [r0, #4]
    1952:	881b      	ldrh	r3, [r3, #0]
    1954:	2204      	movs	r2, #4
    1956:	4313      	orrs	r3, r2
    1958:	8383      	strh	r3, [r0, #28]
    195a:	e7f2      	b.n	1942 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x12>
    195c:	00001795 	.word	0x00001795

00001960 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
    1960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1962:	0004      	movs	r4, r0
    1964:	000e      	movs	r6, r1
	Set_MUXOUT_READBACK(false);
    1966:	2100      	movs	r1, #0
    1968:	4b1b      	ldr	r3, [pc, #108]	; (19d8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
    196a:	4798      	blx	r3
	register_value=0;
    196c:	2300      	movs	r3, #0
    196e:	83a3      	strh	r3, [r4, #28]
	while((register_value==0)|(register_value==0xffff)){
    1970:	8ba2      	ldrh	r2, [r4, #28]
    1972:	1e53      	subs	r3, r2, #1
    1974:	b29b      	uxth	r3, r3
    1976:	4919      	ldr	r1, [pc, #100]	; (19dc <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x7c>)
    1978:	428b      	cmp	r3, r1
    197a:	d924      	bls.n	19c6 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x66>
		spi_lmx->SetCS(false);
    197c:	2100      	movs	r1, #0
    197e:	68e0      	ldr	r0, [r4, #12]
    1980:	4f17      	ldr	r7, [pc, #92]	; (19e0 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x80>)
    1982:	47b8      	blx	r7
			private_index=index|0x80;
    1984:	2380      	movs	r3, #128	; 0x80
    1986:	425b      	negs	r3, r3
    1988:	4333      	orrs	r3, r6
    198a:	77a3      	strb	r3, [r4, #30]
			memset(read_bytes,0,3);
    198c:	2203      	movs	r2, #3
    198e:	2100      	movs	r1, #0
    1990:	0025      	movs	r5, r4
    1992:	3513      	adds	r5, #19
    1994:	0028      	movs	r0, r5
    1996:	4b13      	ldr	r3, [pc, #76]	; (19e4 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x84>)
    1998:	4798      	blx	r3
			int_result=spi_lmx->Write(&private_index,1);
    199a:	2201      	movs	r2, #1
    199c:	0021      	movs	r1, r4
    199e:	311e      	adds	r1, #30
    19a0:	68e0      	ldr	r0, [r4, #12]
    19a2:	4b11      	ldr	r3, [pc, #68]	; (19e8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x88>)
    19a4:	4798      	blx	r3
    19a6:	61a0      	str	r0, [r4, #24]
			int_result=spi_lmx->Read(read_bytes,2);
    19a8:	2202      	movs	r2, #2
    19aa:	0029      	movs	r1, r5
    19ac:	68e0      	ldr	r0, [r4, #12]
    19ae:	4b0f      	ldr	r3, [pc, #60]	; (19ec <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x8c>)
    19b0:	4798      	blx	r3
    19b2:	61a0      	str	r0, [r4, #24]
			register_value=read_bytes[0]*256+read_bytes[1];
    19b4:	7ce3      	ldrb	r3, [r4, #19]
    19b6:	021b      	lsls	r3, r3, #8
    19b8:	7d22      	ldrb	r2, [r4, #20]
    19ba:	189b      	adds	r3, r3, r2
    19bc:	83a3      	strh	r3, [r4, #28]
			spi_lmx->SetCS(true);
    19be:	2101      	movs	r1, #1
    19c0:	68e0      	ldr	r0, [r4, #12]
    19c2:	47b8      	blx	r7
	while((register_value==0)|(register_value==0xffff)){
    19c4:	e7d4      	b.n	1970 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x10>
	read_registers[index]=register_value;
    19c6:	0076      	lsls	r6, r6, #1
    19c8:	6863      	ldr	r3, [r4, #4]
    19ca:	539a      	strh	r2, [r3, r6]
	Set_MUXOUT_READBACK(true);
    19cc:	2101      	movs	r1, #1
    19ce:	0020      	movs	r0, r4
    19d0:	4b01      	ldr	r3, [pc, #4]	; (19d8 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x78>)
    19d2:	4798      	blx	r3
	return register_value;
    19d4:	8ba0      	ldrh	r0, [r4, #28]
}
    19d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19d8:	00001931 	.word	0x00001931
    19dc:	0000fffd 	.word	0x0000fffd
    19e0:	00001de5 	.word	0x00001de5
    19e4:	0000c0dd 	.word	0x0000c0dd
    19e8:	00001db5 	.word	0x00001db5
    19ec:	00001dcd 	.word	0x00001dcd

000019f0 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
    19f0:	b510      	push	{r4, lr}
    19f2:	0004      	movs	r4, r0
	if (mbr)
    19f4:	2900      	cmp	r1, #0
    19f6:	d10b      	bne.n	1a10 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x20>
		channel_index=((write_registers[75])>>6)&0x1f;
    19f8:	2396      	movs	r3, #150	; 0x96
    19fa:	6882      	ldr	r2, [r0, #8]
    19fc:	5ad2      	ldrh	r2, [r2, r3]
    19fe:	1192      	asrs	r2, r2, #6
    1a00:	3b77      	subs	r3, #119	; 0x77
    1a02:	4013      	ands	r3, r2
    1a04:	77c3      	strb	r3, [r0, #31]
	return channel_divider_values[channel_index];
    1a06:	7fe3      	ldrb	r3, [r4, #31]
    1a08:	009b      	lsls	r3, r3, #2
    1a0a:	4a05      	ldr	r2, [pc, #20]	; (1a20 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x30>)
    1a0c:	5898      	ldr	r0, [r3, r2]
}
    1a0e:	bd10      	pop	{r4, pc}
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
    1a10:	214b      	movs	r1, #75	; 0x4b
    1a12:	4b04      	ldr	r3, [pc, #16]	; (1a24 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x34>)
    1a14:	4798      	blx	r3
    1a16:	1183      	asrs	r3, r0, #6
    1a18:	201f      	movs	r0, #31
    1a1a:	4018      	ands	r0, r3
    1a1c:	77e0      	strb	r0, [r4, #31]
    1a1e:	e7f2      	b.n	1a06 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x16>
    1a20:	00010ed8 	.word	0x00010ed8
    1a24:	00001961 	.word	0x00001961

00001a28 <_ZN15lmx2694_Handler9Is_LockedEv>:
bool lmx2694_Handler::Is_Locked(void){
    1a28:	b570      	push	{r4, r5, r6, lr}
    1a2a:	b082      	sub	sp, #8
    1a2c:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1a2e:	4668      	mov	r0, sp
    1a30:	4b2a      	ldr	r3, [pc, #168]	; (1adc <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
    1a32:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1a34:	23c0      	movs	r3, #192	; 0xc0
    1a36:	05db      	lsls	r3, r3, #23
    1a38:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1a3a:	4a29      	ldr	r2, [pc, #164]	; (1ae0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
    1a3c:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1a3e:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1a40:	4053      	eors	r3, r2
    1a42:	401c      	ands	r4, r3
    1a44:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1a46:	4668      	mov	r0, sp
    1a48:	4b26      	ldr	r3, [pc, #152]	; (1ae4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
    1a4a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    1a4c:	2380      	movs	r3, #128	; 0x80
    1a4e:	02db      	lsls	r3, r3, #11
    1a50:	401c      	ands	r4, r3
    1a52:	1e63      	subs	r3, r4, #1
    1a54:	419c      	sbcs	r4, r3
    1a56:	b2e4      	uxtb	r4, r4
	is_locked=gpio_get_pin_level(PA18);
    1a58:	75ec      	strb	r4, [r5, #23]
	if (is_locked)
    1a5a:	2c00      	cmp	r4, #0
    1a5c:	d010      	beq.n	1a80 <_ZN15lmx2694_Handler9Is_LockedEv+0x58>
	if (is_locked)
    1a5e:	7deb      	ldrb	r3, [r5, #23]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d00a      	beq.n	1a7a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
		if (Get_OUT_MUX(2)>0)
    1a64:	2102      	movs	r1, #2
    1a66:	0028      	movs	r0, r5
    1a68:	4b1f      	ldr	r3, [pc, #124]	; (1ae8 <_ZN15lmx2694_Handler9Is_LockedEv+0xc0>)
    1a6a:	4798      	blx	r3
    1a6c:	2800      	cmp	r0, #0
    1a6e:	dd20      	ble.n	1ab2 <_ZN15lmx2694_Handler9Is_LockedEv+0x8a>
			current_frequency=Calculate_Current_Frequency(false)/1;
    1a70:	2100      	movs	r1, #0
    1a72:	0028      	movs	r0, r5
    1a74:	4b1d      	ldr	r3, [pc, #116]	; (1aec <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
    1a76:	4798      	blx	r3
    1a78:	6028      	str	r0, [r5, #0]
	return is_locked;
    1a7a:	7de8      	ldrb	r0, [r5, #23]
}
    1a7c:	b002      	add	sp, #8
    1a7e:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(10);
    1a80:	200a      	movs	r0, #10
    1a82:	4b1b      	ldr	r3, [pc, #108]	; (1af0 <_ZN15lmx2694_Handler9Is_LockedEv+0xc8>)
    1a84:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    1a86:	a801      	add	r0, sp, #4
    1a88:	4b14      	ldr	r3, [pc, #80]	; (1adc <_ZN15lmx2694_Handler9Is_LockedEv+0xb4>)
    1a8a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1a8c:	23c0      	movs	r3, #192	; 0xc0
    1a8e:	05db      	lsls	r3, r3, #23
    1a90:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1a92:	4a13      	ldr	r2, [pc, #76]	; (1ae0 <_ZN15lmx2694_Handler9Is_LockedEv+0xb8>)
    1a94:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1a96:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    1a98:	4053      	eors	r3, r2
    1a9a:	401c      	ands	r4, r3
    1a9c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    1a9e:	a801      	add	r0, sp, #4
    1aa0:	4b10      	ldr	r3, [pc, #64]	; (1ae4 <_ZN15lmx2694_Handler9Is_LockedEv+0xbc>)
    1aa2:	4798      	blx	r3
    1aa4:	2380      	movs	r3, #128	; 0x80
    1aa6:	02db      	lsls	r3, r3, #11
    1aa8:	401c      	ands	r4, r3
    1aaa:	1e63      	subs	r3, r4, #1
    1aac:	419c      	sbcs	r4, r3
		is_locked=gpio_get_pin_level(PA18);
    1aae:	75ec      	strb	r4, [r5, #23]
    1ab0:	e7d5      	b.n	1a5e <_ZN15lmx2694_Handler9Is_LockedEv+0x36>
			channel_divider=Get_Channel_Divider_Value(false);
    1ab2:	2100      	movs	r1, #0
    1ab4:	0028      	movs	r0, r5
    1ab6:	4b0f      	ldr	r3, [pc, #60]	; (1af4 <_ZN15lmx2694_Handler9Is_LockedEv+0xcc>)
    1ab8:	4798      	blx	r3
    1aba:	2421      	movs	r4, #33	; 0x21
    1abc:	5528      	strb	r0, [r5, r4]
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
    1abe:	2100      	movs	r1, #0
    1ac0:	0028      	movs	r0, r5
    1ac2:	4b0a      	ldr	r3, [pc, #40]	; (1aec <_ZN15lmx2694_Handler9Is_LockedEv+0xc4>)
    1ac4:	4798      	blx	r3
    1ac6:	1c06      	adds	r6, r0, #0
    1ac8:	5d28      	ldrb	r0, [r5, r4]
    1aca:	4b0b      	ldr	r3, [pc, #44]	; (1af8 <_ZN15lmx2694_Handler9Is_LockedEv+0xd0>)
    1acc:	4798      	blx	r3
    1ace:	1c01      	adds	r1, r0, #0
    1ad0:	1c30      	adds	r0, r6, #0
    1ad2:	4b0a      	ldr	r3, [pc, #40]	; (1afc <_ZN15lmx2694_Handler9Is_LockedEv+0xd4>)
    1ad4:	4798      	blx	r3
    1ad6:	6028      	str	r0, [r5, #0]
    1ad8:	e7cf      	b.n	1a7a <_ZN15lmx2694_Handler9Is_LockedEv+0x52>
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	00002509 	.word	0x00002509
    1ae0:	41004400 	.word	0x41004400
    1ae4:	00002517 	.word	0x00002517
    1ae8:	0000149b 	.word	0x0000149b
    1aec:	00001501 	.word	0x00001501
    1af0:	000025c1 	.word	0x000025c1
    1af4:	000019f1 	.word	0x000019f1
    1af8:	0000a12d 	.word	0x0000a12d
    1afc:	00009795 	.word	0x00009795

00001b00 <_ZN15lmx2694_Handler4InitEv>:
bool lmx2694_Handler::Init(){
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	0004      	movs	r4, r0
	spi_lmx=&staticSPI;
    1b04:	4810      	ldr	r0, [pc, #64]	; (1b48 <_ZN15lmx2694_Handler4InitEv+0x48>)
    1b06:	60e0      	str	r0, [r4, #12]
	spi_lmx->Init();
    1b08:	4b10      	ldr	r3, [pc, #64]	; (1b4c <_ZN15lmx2694_Handler4InitEv+0x4c>)
    1b0a:	4798      	blx	r3
	spi_lmx->SetCS(true);
    1b0c:	2101      	movs	r1, #1
    1b0e:	68e0      	ldr	r0, [r4, #12]
    1b10:	4b0f      	ldr	r3, [pc, #60]	; (1b50 <_ZN15lmx2694_Handler4InitEv+0x50>)
    1b12:	4798      	blx	r3
	Power_Down();
    1b14:	0020      	movs	r0, r4
    1b16:	4b0f      	ldr	r3, [pc, #60]	; (1b54 <_ZN15lmx2694_Handler4InitEv+0x54>)
    1b18:	4798      	blx	r3
	delay_ms(10);
    1b1a:	200a      	movs	r0, #10
    1b1c:	4d0e      	ldr	r5, [pc, #56]	; (1b58 <_ZN15lmx2694_Handler4InitEv+0x58>)
    1b1e:	47a8      	blx	r5
	Program_Reset();
    1b20:	0020      	movs	r0, r4
    1b22:	4b0e      	ldr	r3, [pc, #56]	; (1b5c <_ZN15lmx2694_Handler4InitEv+0x5c>)
    1b24:	4798      	blx	r3
	delay_ms(100);
    1b26:	2064      	movs	r0, #100	; 0x64
    1b28:	47a8      	blx	r5
	Initiate_Registers();
    1b2a:	0020      	movs	r0, r4
    1b2c:	4b0c      	ldr	r3, [pc, #48]	; (1b60 <_ZN15lmx2694_Handler4InitEv+0x60>)
    1b2e:	4798      	blx	r3
	delay_ms(10);
    1b30:	200a      	movs	r0, #10
    1b32:	47a8      	blx	r5
	Toggle_FCAL_EN();
    1b34:	0020      	movs	r0, r4
    1b36:	4b0b      	ldr	r3, [pc, #44]	; (1b64 <_ZN15lmx2694_Handler4InitEv+0x64>)
    1b38:	4798      	blx	r3
	delay_ms(100);
    1b3a:	2064      	movs	r0, #100	; 0x64
    1b3c:	47a8      	blx	r5
	return Is_Locked();
    1b3e:	0020      	movs	r0, r4
    1b40:	4b09      	ldr	r3, [pc, #36]	; (1b68 <_ZN15lmx2694_Handler4InitEv+0x68>)
    1b42:	4798      	blx	r3
}
    1b44:	bd70      	pop	{r4, r5, r6, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	20000ce0 	.word	0x20000ce0
    1b4c:	00001d8d 	.word	0x00001d8d
    1b50:	00001de5 	.word	0x00001de5
    1b54:	000016b5 	.word	0x000016b5
    1b58:	000025c1 	.word	0x000025c1
    1b5c:	000016f9 	.word	0x000016f9
    1b60:	000018e5 	.word	0x000018e5
    1b64:	000018c1 	.word	0x000018c1
    1b68:	00001a29 	.word	0x00001a29

00001b6c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
    1b6c:	b570      	push	{r4, r5, r6, lr}
    1b6e:	0004      	movs	r4, r0
	if (target_frequency>MIN_VCO_FREQUENCY)
    1b70:	6b45      	ldr	r5, [r0, #52]	; 0x34
    1b72:	490b      	ldr	r1, [pc, #44]	; (1ba0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>)
    1b74:	1c28      	adds	r0, r5, #0
    1b76:	4b0b      	ldr	r3, [pc, #44]	; (1ba4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x38>)
    1b78:	4798      	blx	r3
    1b7a:	2800      	cmp	r0, #0
    1b7c:	d005      	beq.n	1b8a <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x1e>
		vco_frequency=target_frequency;
    1b7e:	63a5      	str	r5, [r4, #56]	; 0x38
	Program_PFD_DLY_SEL(vco_frequency);
    1b80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1b82:	0020      	movs	r0, r4
    1b84:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x3c>)
    1b86:	4798      	blx	r3
}
    1b88:	bd70      	pop	{r4, r5, r6, pc}
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
    1b8a:	2100      	movs	r1, #0
    1b8c:	0020      	movs	r0, r4
    1b8e:	4b07      	ldr	r3, [pc, #28]	; (1bac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x40>)
    1b90:	4798      	blx	r3
    1b92:	4b07      	ldr	r3, [pc, #28]	; (1bb0 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x44>)
    1b94:	4798      	blx	r3
    1b96:	1c29      	adds	r1, r5, #0
    1b98:	4b06      	ldr	r3, [pc, #24]	; (1bb4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x48>)
    1b9a:	4798      	blx	r3
    1b9c:	63a0      	str	r0, [r4, #56]	; 0x38
    1b9e:	e7ef      	b.n	1b80 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x14>
    1ba0:	45ebf000 	.word	0x45ebf000
    1ba4:	00009209 	.word	0x00009209
    1ba8:	000017f1 	.word	0x000017f1
    1bac:	000019f1 	.word	0x000019f1
    1bb0:	0000a12d 	.word	0x0000a12d
    1bb4:	00009b75 	.word	0x00009b75

00001bb8 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
void  lmx2694_Handler::Write_Division_Registers(void){
    1bb8:	b570      	push	{r4, r5, r6, lr}
    1bba:	0004      	movs	r4, r0
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
    1bbc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    1bbe:	212b      	movs	r1, #43	; 0x2b
    1bc0:	4d0c      	ldr	r5, [pc, #48]	; (1bf4 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x3c>)
    1bc2:	47a8      	blx	r5
	Write_Single_Register(42,(uint16_t)(numerator>>16));
    1bc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    1bc6:	212a      	movs	r1, #42	; 0x2a
    1bc8:	0020      	movs	r0, r4
    1bca:	47a8      	blx	r5
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
    1bcc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1bce:	2127      	movs	r1, #39	; 0x27
    1bd0:	0020      	movs	r0, r4
    1bd2:	47a8      	blx	r5
	Write_Single_Register(38,(uint16_t)(denominator>>16));
    1bd4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    1bd6:	2126      	movs	r1, #38	; 0x26
    1bd8:	0020      	movs	r0, r4
    1bda:	47a8      	blx	r5
	Program_PFD_DLY_SEL();
    1bdc:	0020      	movs	r0, r4
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x40>)
    1be0:	4798      	blx	r3
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
    1be2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    1be4:	2124      	movs	r1, #36	; 0x24
    1be6:	0020      	movs	r0, r4
    1be8:	47a8      	blx	r5
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
    1bea:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    1bec:	2122      	movs	r1, #34	; 0x22
    1bee:	0020      	movs	r0, r4
    1bf0:	47a8      	blx	r5
}
    1bf2:	bd70      	pop	{r4, r5, r6, pc}
    1bf4:	00001795 	.word	0x00001795
    1bf8:	00001b6d 	.word	0x00001b6d

00001bfc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
float lmx2694_Handler::Set_Target_Frequency(float tf){
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	0004      	movs	r4, r0
    1c00:	1c0d      	adds	r5, r1, #0
	if (tf>MAX_VCO_FREQUENCY)
    1c02:	4940      	ldr	r1, [pc, #256]	; (1d04 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
    1c04:	1c28      	adds	r0, r5, #0
    1c06:	4b40      	ldr	r3, [pc, #256]	; (1d08 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1c08:	4798      	blx	r3
    1c0a:	2800      	cmp	r0, #0
    1c0c:	d138      	bne.n	1c80 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x84>
		if (tf>MIN_PLL_FREQUENCY)
    1c0e:	493f      	ldr	r1, [pc, #252]	; (1d0c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x110>)
    1c10:	1c28      	adds	r0, r5, #0
    1c12:	4b3d      	ldr	r3, [pc, #244]	; (1d08 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1c14:	4798      	blx	r3
    1c16:	2800      	cmp	r0, #0
    1c18:	d034      	beq.n	1c84 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
			target_frequency=tf;
    1c1a:	6365      	str	r5, [r4, #52]	; 0x34
			if (tf>MIN_VCO_FREQUENCY)
    1c1c:	493c      	ldr	r1, [pc, #240]	; (1d10 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    1c1e:	1c28      	adds	r0, r5, #0
    1c20:	4b39      	ldr	r3, [pc, #228]	; (1d08 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1c22:	4798      	blx	r3
    1c24:	2800      	cmp	r0, #0
    1c26:	d03a      	beq.n	1c9e <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xa2>
				if (current_frequency>MIN_VCO_FREQUENCY)
    1c28:	4939      	ldr	r1, [pc, #228]	; (1d10 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    1c2a:	6820      	ldr	r0, [r4, #0]
    1c2c:	4b36      	ldr	r3, [pc, #216]	; (1d08 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
    1c2e:	4798      	blx	r3
    1c30:	2800      	cmp	r0, #0
    1c32:	d029      	beq.n	1c88 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x8c>
				channel_divider=1;
    1c34:	2201      	movs	r2, #1
    1c36:	2321      	movs	r3, #33	; 0x21
    1c38:	54e2      	strb	r2, [r4, r3]
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
    1c3a:	2321      	movs	r3, #33	; 0x21
    1c3c:	5ce0      	ldrb	r0, [r4, r3]
    1c3e:	4b35      	ldr	r3, [pc, #212]	; (1d14 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x118>)
    1c40:	4798      	blx	r3
    1c42:	1c29      	adds	r1, r5, #0
    1c44:	4b34      	ldr	r3, [pc, #208]	; (1d18 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x11c>)
    1c46:	4798      	blx	r3
    1c48:	4934      	ldr	r1, [pc, #208]	; (1d1c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>)
    1c4a:	4b35      	ldr	r3, [pc, #212]	; (1d20 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x124>)
    1c4c:	4798      	blx	r3
    1c4e:	1c05      	adds	r5, r0, #0
    1c50:	63e0      	str	r0, [r4, #60]	; 0x3c
  { return __builtin_floorf(__x); }
    1c52:	4b34      	ldr	r3, [pc, #208]	; (1d24 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x128>)
    1c54:	4798      	blx	r3
			N_divider=(uint32_t)(floor(divider));
    1c56:	4b34      	ldr	r3, [pc, #208]	; (1d28 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x12c>)
    1c58:	4798      	blx	r3
    1c5a:	6260      	str	r0, [r4, #36]	; 0x24
			fraction=divider-N_divider;
    1c5c:	4b33      	ldr	r3, [pc, #204]	; (1d2c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x130>)
    1c5e:	4798      	blx	r3
    1c60:	1c01      	adds	r1, r0, #0
    1c62:	1c28      	adds	r0, r5, #0
    1c64:	4b32      	ldr	r3, [pc, #200]	; (1d30 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x134>)
    1c66:	4798      	blx	r3
    1c68:	1c01      	adds	r1, r0, #0
    1c6a:	6420      	str	r0, [r4, #64]	; 0x40
			Calculate_Fraction(fraction);
    1c6c:	0020      	movs	r0, r4
    1c6e:	4b31      	ldr	r3, [pc, #196]	; (1d34 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x138>)
    1c70:	4798      	blx	r3
			Write_Division_Registers();
    1c72:	0020      	movs	r0, r4
    1c74:	4b30      	ldr	r3, [pc, #192]	; (1d38 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
    1c76:	4798      	blx	r3
			Toggle_FCAL_EN();
    1c78:	0020      	movs	r0, r4
    1c7a:	4b30      	ldr	r3, [pc, #192]	; (1d3c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x140>)
    1c7c:	4798      	blx	r3
    1c7e:	e001      	b.n	1c84 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
		target_frequency=MAX_VCO_FREQUENCY;
    1c80:	4b20      	ldr	r3, [pc, #128]	; (1d04 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
    1c82:	6363      	str	r3, [r4, #52]	; 0x34
	return fraction;
    1c84:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
    1c86:	bd70      	pop	{r4, r5, r6, pc}
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
    1c88:	235c      	movs	r3, #92	; 0x5c
    1c8a:	68a2      	ldr	r2, [r4, #8]
    1c8c:	5ad2      	ldrh	r2, [r2, r3]
    1c8e:	2301      	movs	r3, #1
    1c90:	431a      	orrs	r2, r3
    1c92:	b292      	uxth	r2, r2
    1c94:	212e      	movs	r1, #46	; 0x2e
    1c96:	0020      	movs	r0, r4
    1c98:	4b29      	ldr	r3, [pc, #164]	; (1d40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1c9a:	4798      	blx	r3
    1c9c:	e7ca      	b.n	1c34 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x38>
				if (current_frequency<MIN_VCO_FREQUENCY)
    1c9e:	491c      	ldr	r1, [pc, #112]	; (1d10 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
    1ca0:	6820      	ldr	r0, [r4, #0]
    1ca2:	4b28      	ldr	r3, [pc, #160]	; (1d44 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x148>)
    1ca4:	4798      	blx	r3
    1ca6:	2800      	cmp	r0, #0
    1ca8:	d01a      	beq.n	1ce0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xe4>
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
    1caa:	2396      	movs	r3, #150	; 0x96
    1cac:	68a2      	ldr	r2, [r4, #8]
    1cae:	5ad2      	ldrh	r2, [r2, r3]
    1cb0:	4b25      	ldr	r3, [pc, #148]	; (1d48 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x14c>)
    1cb2:	401a      	ands	r2, r3
    1cb4:	83a2      	strh	r2, [r4, #28]
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
    1cb6:	b216      	sxth	r6, r2
    1cb8:	0020      	movs	r0, r4
    1cba:	4b24      	ldr	r3, [pc, #144]	; (1d4c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x150>)
    1cbc:	4798      	blx	r3
    1cbe:	0182      	lsls	r2, r0, #6
    1cc0:	4332      	orrs	r2, r6
    1cc2:	b292      	uxth	r2, r2
    1cc4:	214b      	movs	r1, #75	; 0x4b
    1cc6:	0020      	movs	r0, r4
    1cc8:	4b1d      	ldr	r3, [pc, #116]	; (1d40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1cca:	4798      	blx	r3
				if (channel_divider>2)
    1ccc:	2321      	movs	r3, #33	; 0x21
    1cce:	5ce3      	ldrb	r3, [r4, r3]
    1cd0:	2b02      	cmp	r3, #2
    1cd2:	dd0f      	ble.n	1cf4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xf8>
					Write_Single_Register(31,0x43ec);
    1cd4:	4a1e      	ldr	r2, [pc, #120]	; (1d50 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x154>)
    1cd6:	211f      	movs	r1, #31
    1cd8:	0020      	movs	r0, r4
    1cda:	4b19      	ldr	r3, [pc, #100]	; (1d40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1cdc:	4798      	blx	r3
    1cde:	e7ac      	b.n	1c3a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
    1ce0:	235c      	movs	r3, #92	; 0x5c
    1ce2:	68a2      	ldr	r2, [r4, #8]
    1ce4:	5ad2      	ldrh	r2, [r2, r3]
    1ce6:	3b59      	subs	r3, #89	; 0x59
    1ce8:	439a      	bics	r2, r3
    1cea:	212e      	movs	r1, #46	; 0x2e
    1cec:	0020      	movs	r0, r4
    1cee:	4b14      	ldr	r3, [pc, #80]	; (1d40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1cf0:	4798      	blx	r3
    1cf2:	e7da      	b.n	1caa <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xae>
					Write_Single_Register(31,0x3ec);
    1cf4:	22fb      	movs	r2, #251	; 0xfb
    1cf6:	0092      	lsls	r2, r2, #2
    1cf8:	211f      	movs	r1, #31
    1cfa:	0020      	movs	r0, r4
    1cfc:	4b10      	ldr	r3, [pc, #64]	; (1d40 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
    1cfe:	4798      	blx	r3
    1d00:	e79b      	b.n	1c3a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	466bf000 	.word	0x466bf000
    1d08:	00009209 	.word	0x00009209
    1d0c:	43c80000 	.word	0x43c80000
    1d10:	45ebf000 	.word	0x45ebf000
    1d14:	0000a12d 	.word	0x0000a12d
    1d18:	00009b75 	.word	0x00009b75
    1d1c:	43480000 	.word	0x43480000
    1d20:	00009795 	.word	0x00009795
    1d24:	000072a1 	.word	0x000072a1
    1d28:	00009285 	.word	0x00009285
    1d2c:	0000a1cd 	.word	0x0000a1cd
    1d30:	00009db5 	.word	0x00009db5
    1d34:	00001631 	.word	0x00001631
    1d38:	00001bb9 	.word	0x00001bb9
    1d3c:	000018c1 	.word	0x000018c1
    1d40:	00001795 	.word	0x00001795
    1d44:	000091e1 	.word	0x000091e1
    1d48:	fffff83f 	.word	0xfffff83f
    1d4c:	000015b1 	.word	0x000015b1
    1d50:	000043ec 	.word	0x000043ec

00001d54 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:
    1d54:	b510      	push	{r4, lr}
    1d56:	4902      	ldr	r1, [pc, #8]	; (1d60 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0xc>)
    1d58:	2001      	movs	r0, #1
    1d5a:	4b02      	ldr	r3, [pc, #8]	; (1d64 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x10>)
    1d5c:	4798      	blx	r3
    1d5e:	bd10      	pop	{r4, pc}
    1d60:	0000ffff 	.word	0x0000ffff
    1d64:	0000141d 	.word	0x0000141d

00001d68 <_ZN13SPI_Syn_ClassC1Ev>:


// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
    1d68:	4b01      	ldr	r3, [pc, #4]	; (1d70 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
    1d6a:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    1d6c:	4770      	bx	lr
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	20000ec0 	.word	0x20000ec0

00001d74 <_ZN13SPI_Syn_ClassD1Ev>:


// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
    1d74:	4770      	bx	lr
	...

00001d78 <_ZN13SPI_Syn_Class6EnableEv>:
	
}



uint8_t SPI_Syn_Class::Enable(){
    1d78:	b510      	push	{r4, lr}
	
	spi_m_sync_enable(&SPI_LMX);
    1d7a:	4802      	ldr	r0, [pc, #8]	; (1d84 <_ZN13SPI_Syn_Class6EnableEv+0xc>)
    1d7c:	4b02      	ldr	r3, [pc, #8]	; (1d88 <_ZN13SPI_Syn_Class6EnableEv+0x10>)
    1d7e:	4798      	blx	r3
	return 0;
}
    1d80:	2000      	movs	r0, #0
    1d82:	bd10      	pop	{r4, pc}
    1d84:	200014dc 	.word	0x200014dc
    1d88:	000027f9 	.word	0x000027f9

00001d8c <_ZN13SPI_Syn_Class4InitEv>:
void SPI_Syn_Class::Init(){
    1d8c:	b510      	push	{r4, lr}
    1d8e:	0004      	movs	r4, r0
		spi_m_sync_get_io_descriptor(&SPI_LMX, &io);
    1d90:	0001      	movs	r1, r0
    1d92:	310c      	adds	r1, #12
    1d94:	4804      	ldr	r0, [pc, #16]	; (1da8 <_ZN13SPI_Syn_Class4InitEv+0x1c>)
    1d96:	4b05      	ldr	r3, [pc, #20]	; (1dac <_ZN13SPI_Syn_Class4InitEv+0x20>)
    1d98:	4798      	blx	r3
	Enable();
    1d9a:	0020      	movs	r0, r4
    1d9c:	4b04      	ldr	r3, [pc, #16]	; (1db0 <_ZN13SPI_Syn_Class4InitEv+0x24>)
    1d9e:	4798      	blx	r3
	ready=true;
    1da0:	2301      	movs	r3, #1
    1da2:	7023      	strb	r3, [r4, #0]
}
    1da4:	bd10      	pop	{r4, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	200014dc 	.word	0x200014dc
    1dac:	000028e1 	.word	0x000028e1
    1db0:	00001d79 	.word	0x00001d79

00001db4 <_ZN13SPI_Syn_Class5WriteEPKhh>:

uint8_t  SPI_Syn_Class::Write(const uint8_t * p, uint8_t n){
    1db4:	b510      	push	{r4, lr}
    1db6:	0014      	movs	r4, r2
	ready=false;
    1db8:	2300      	movs	r3, #0
    1dba:	7003      	strb	r3, [r0, #0]
	io_write(io, p, (uint16_t)n);
    1dbc:	68c0      	ldr	r0, [r0, #12]
    1dbe:	b292      	uxth	r2, r2
    1dc0:	4b01      	ldr	r3, [pc, #4]	; (1dc8 <_ZN13SPI_Syn_Class5WriteEPKhh+0x14>)
    1dc2:	4798      	blx	r3

	return n;
}
    1dc4:	0020      	movs	r0, r4
    1dc6:	bd10      	pop	{r4, pc}
    1dc8:	00002731 	.word	0x00002731

00001dcc <_ZN13SPI_Syn_Class4ReadEPhh>:
uint8_t  SPI_Syn_Class::Read(uint8_t * p, uint8_t n){
    1dcc:	b510      	push	{r4, lr}
    1dce:	0014      	movs	r4, r2
	ready=false;
    1dd0:	2300      	movs	r3, #0
    1dd2:	7003      	strb	r3, [r0, #0]
		io_read(io, p, (uint16_t)n);
    1dd4:	68c0      	ldr	r0, [r0, #12]
    1dd6:	b292      	uxth	r2, r2
    1dd8:	4b01      	ldr	r3, [pc, #4]	; (1de0 <_ZN13SPI_Syn_Class4ReadEPhh+0x14>)
    1dda:	4798      	blx	r3

	
	return n;
}
    1ddc:	0020      	movs	r0, r4
    1dde:	bd10      	pop	{r4, pc}
    1de0:	00002769 	.word	0x00002769

00001de4 <_ZN13SPI_Syn_Class5SetCSEb>:
	if (level) {
    1de4:	2900      	cmp	r1, #0
    1de6:	d105      	bne.n	1df4 <_ZN13SPI_Syn_Class5SetCSEb+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1de8:	2280      	movs	r2, #128	; 0x80
    1dea:	0312      	lsls	r2, r2, #12
    1dec:	23c0      	movs	r3, #192	; 0xc0
    1dee:	05db      	lsls	r3, r3, #23
    1df0:	615a      	str	r2, [r3, #20]
	spi_m_sync_disable(&SPI_LMX);
	
}
void SPI_Syn_Class::SetCS(bool st){
	gpio_set_pin_level(CS_LMX,st);
}
    1df2:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1df4:	2280      	movs	r2, #128	; 0x80
    1df6:	0312      	lsls	r2, r2, #12
    1df8:	23c0      	movs	r3, #192	; 0xc0
    1dfa:	05db      	lsls	r3, r3, #23
    1dfc:	619a      	str	r2, [r3, #24]
    1dfe:	e7f8      	b.n	1df2 <_ZN13SPI_Syn_Class5SetCSEb+0xe>

00001e00 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1e00:	b510      	push	{r4, lr}
	system_init();
    1e02:	4b02      	ldr	r3, [pc, #8]	; (1e0c <atmel_start_init+0xc>)
    1e04:	4798      	blx	r3
	usb_init();
    1e06:	4b02      	ldr	r3, [pc, #8]	; (1e10 <atmel_start_init+0x10>)
    1e08:	4798      	blx	r3
}
    1e0a:	bd10      	pop	{r4, pc}
    1e0c:	000023f5 	.word	0x000023f5
    1e10:	00005639 	.word	0x00005639

00001e14 <TIMER_ZCD_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ZCD_init(void)
{
    1e14:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1e16:	4a08      	ldr	r2, [pc, #32]	; (1e38 <TIMER_ZCD_init+0x24>)
    1e18:	6a11      	ldr	r1, [r2, #32]
    1e1a:	2380      	movs	r3, #128	; 0x80
    1e1c:	011b      	lsls	r3, r3, #4
    1e1e:	430b      	orrs	r3, r1
    1e20:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1e22:	4a06      	ldr	r2, [pc, #24]	; (1e3c <TIMER_ZCD_init+0x28>)
    1e24:	4b06      	ldr	r3, [pc, #24]	; (1e40 <TIMER_ZCD_init+0x2c>)
    1e26:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_ZCD, TC3, _tc_get_timer());
    1e28:	4b06      	ldr	r3, [pc, #24]	; (1e44 <TIMER_ZCD_init+0x30>)
    1e2a:	4798      	blx	r3
    1e2c:	0002      	movs	r2, r0
    1e2e:	4906      	ldr	r1, [pc, #24]	; (1e48 <TIMER_ZCD_init+0x34>)
    1e30:	4806      	ldr	r0, [pc, #24]	; (1e4c <TIMER_ZCD_init+0x38>)
    1e32:	4b07      	ldr	r3, [pc, #28]	; (1e50 <TIMER_ZCD_init+0x3c>)
    1e34:	4798      	blx	r3
}
    1e36:	bd10      	pop	{r4, pc}
    1e38:	40000400 	.word	0x40000400
    1e3c:	0000401b 	.word	0x0000401b
    1e40:	40000c00 	.word	0x40000c00
    1e44:	00004227 	.word	0x00004227
    1e48:	42002c00 	.word	0x42002c00
    1e4c:	200014c0 	.word	0x200014c0
    1e50:	000029cd 	.word	0x000029cd

00001e54 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1e54:	b510      	push	{r4, lr}
    1e56:	4a08      	ldr	r2, [pc, #32]	; (1e78 <TIMER_USB_init+0x24>)
    1e58:	6a11      	ldr	r1, [r2, #32]
    1e5a:	2380      	movs	r3, #128	; 0x80
    1e5c:	015b      	lsls	r3, r3, #5
    1e5e:	430b      	orrs	r3, r1
    1e60:	6213      	str	r3, [r2, #32]
    1e62:	4a06      	ldr	r2, [pc, #24]	; (1e7c <TIMER_USB_init+0x28>)
    1e64:	4b06      	ldr	r3, [pc, #24]	; (1e80 <TIMER_USB_init+0x2c>)
    1e66:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TIMER_USB, TC4, _tc_get_timer());
    1e68:	4b06      	ldr	r3, [pc, #24]	; (1e84 <TIMER_USB_init+0x30>)
    1e6a:	4798      	blx	r3
    1e6c:	0002      	movs	r2, r0
    1e6e:	4906      	ldr	r1, [pc, #24]	; (1e88 <TIMER_USB_init+0x34>)
    1e70:	4806      	ldr	r0, [pc, #24]	; (1e8c <TIMER_USB_init+0x38>)
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <TIMER_USB_init+0x3c>)
    1e74:	4798      	blx	r3
}
    1e76:	bd10      	pop	{r4, pc}
    1e78:	40000400 	.word	0x40000400
    1e7c:	0000431c 	.word	0x0000431c
    1e80:	40000c00 	.word	0x40000c00
    1e84:	00004227 	.word	0x00004227
    1e88:	42003000 	.word	0x42003000
    1e8c:	20001580 	.word	0x20001580
    1e90:	000029cd 	.word	0x000029cd

00001e94 <EXTERNAL_IRQ_0_init>:
{
    1e94:	b510      	push	{r4, lr}
    1e96:	4a0f      	ldr	r2, [pc, #60]	; (1ed4 <EXTERNAL_IRQ_0_init+0x40>)
    1e98:	4b0f      	ldr	r3, [pc, #60]	; (1ed8 <EXTERNAL_IRQ_0_init+0x44>)
    1e9a:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e9c:	3a05      	subs	r2, #5
    1e9e:	23c0      	movs	r3, #192	; 0xc0
    1ea0:	05db      	lsls	r3, r3, #23
    1ea2:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ea4:	4b0d      	ldr	r3, [pc, #52]	; (1edc <EXTERNAL_IRQ_0_init+0x48>)
    1ea6:	4a0e      	ldr	r2, [pc, #56]	; (1ee0 <EXTERNAL_IRQ_0_init+0x4c>)
    1ea8:	629a      	str	r2, [r3, #40]	; 0x28
    1eaa:	4a0e      	ldr	r2, [pc, #56]	; (1ee4 <EXTERNAL_IRQ_0_init+0x50>)
    1eac:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1eae:	214e      	movs	r1, #78	; 0x4e
    1eb0:	5c5a      	ldrb	r2, [r3, r1]
    1eb2:	2004      	movs	r0, #4
    1eb4:	4382      	bics	r2, r0
    1eb6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1eb8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1eba:	3803      	subs	r0, #3
    1ebc:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1ebe:	4302      	orrs	r2, r0
    1ec0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ec2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ec4:	3917      	subs	r1, #23
    1ec6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1ec8:	200f      	movs	r0, #15
    1eca:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1ecc:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    1ece:	4b06      	ldr	r3, [pc, #24]	; (1ee8 <EXTERNAL_IRQ_0_init+0x54>)
    1ed0:	4798      	blx	r3
}
    1ed2:	bd10      	pop	{r4, pc}
    1ed4:	00004005 	.word	0x00004005
    1ed8:	40000c00 	.word	0x40000c00
    1edc:	41004400 	.word	0x41004400
    1ee0:	40024000 	.word	0x40024000
    1ee4:	c0020000 	.word	0xc0020000
    1ee8:	00002625 	.word	0x00002625

00001eec <SPI_ADF_PORT_init>:
{
    1eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eee:	46c6      	mov	lr, r8
    1ef0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ef2:	22c0      	movs	r2, #192	; 0xc0
    1ef4:	05d2      	lsls	r2, r2, #23
    1ef6:	2310      	movs	r3, #16
    1ef8:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1efa:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1efc:	4b25      	ldr	r3, [pc, #148]	; (1f94 <SPI_ADF_PORT_init+0xa8>)
    1efe:	4926      	ldr	r1, [pc, #152]	; (1f98 <SPI_ADF_PORT_init+0xac>)
    1f00:	6299      	str	r1, [r3, #40]	; 0x28
    1f02:	21c0      	movs	r1, #192	; 0xc0
    1f04:	0609      	lsls	r1, r1, #24
    1f06:	468c      	mov	ip, r1
    1f08:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f0a:	2044      	movs	r0, #68	; 0x44
    1f0c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f0e:	2701      	movs	r7, #1
    1f10:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f12:	2601      	movs	r6, #1
    1f14:	4331      	orrs	r1, r6
    1f16:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f18:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f1a:	2132      	movs	r1, #50	; 0x32
    1f1c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1f1e:	250f      	movs	r5, #15
    1f20:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1f22:	2403      	movs	r4, #3
    1f24:	46a0      	mov	r8, r4
    1f26:	4644      	mov	r4, r8
    1f28:	4320      	orrs	r0, r4
    1f2a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f2c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f2e:	2020      	movs	r0, #32
    1f30:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f32:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f34:	4819      	ldr	r0, [pc, #100]	; (1f9c <SPI_ADF_PORT_init+0xb0>)
    1f36:	6298      	str	r0, [r3, #40]	; 0x28
    1f38:	4660      	mov	r0, ip
    1f3a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f3c:	2045      	movs	r0, #69	; 0x45
    1f3e:	4684      	mov	ip, r0
    1f40:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f42:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f44:	4330      	orrs	r0, r6
    1f46:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f48:	4664      	mov	r4, ip
    1f4a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f4c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1f4e:	3c36      	subs	r4, #54	; 0x36
    1f50:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
    1f52:	2430      	movs	r4, #48	; 0x30
    1f54:	46a4      	mov	ip, r4
    1f56:	4664      	mov	r4, ip
    1f58:	4320      	orrs	r0, r4
    1f5a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f5c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f5e:	310e      	adds	r1, #14
    1f60:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f62:	4a0f      	ldr	r2, [pc, #60]	; (1fa0 <SPI_ADF_PORT_init+0xb4>)
    1f64:	629a      	str	r2, [r3, #40]	; 0x28
    1f66:	4a0f      	ldr	r2, [pc, #60]	; (1fa4 <SPI_ADF_PORT_init+0xb8>)
    1f68:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f6a:	2246      	movs	r2, #70	; 0x46
    1f6c:	5c99      	ldrb	r1, [r3, r2]
    1f6e:	2004      	movs	r0, #4
    1f70:	4381      	bics	r1, r0
    1f72:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f74:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f76:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f78:	4331      	orrs	r1, r6
    1f7a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f7c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f7e:	2133      	movs	r1, #51	; 0x33
    1f80:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1f82:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1f84:	4640      	mov	r0, r8
    1f86:	4302      	orrs	r2, r0
    1f88:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f8a:	545a      	strb	r2, [r3, r1]
}
    1f8c:	bc04      	pop	{r2}
    1f8e:	4690      	mov	r8, r2
    1f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	41004400 	.word	0x41004400
    1f98:	40000010 	.word	0x40000010
    1f9c:	40000020 	.word	0x40000020
    1fa0:	40020040 	.word	0x40020040
    1fa4:	c0020000 	.word	0xc0020000

00001fa8 <SPI_ADF_CLOCK_init>:
    1fa8:	4a04      	ldr	r2, [pc, #16]	; (1fbc <SPI_ADF_CLOCK_init+0x14>)
    1faa:	6a13      	ldr	r3, [r2, #32]
    1fac:	2104      	movs	r1, #4
    1fae:	430b      	orrs	r3, r1
    1fb0:	6213      	str	r3, [r2, #32]
    1fb2:	4a03      	ldr	r2, [pc, #12]	; (1fc0 <SPI_ADF_CLOCK_init+0x18>)
    1fb4:	4b03      	ldr	r3, [pc, #12]	; (1fc4 <SPI_ADF_CLOCK_init+0x1c>)
    1fb6:	805a      	strh	r2, [r3, #2]
}
    1fb8:	4770      	bx	lr
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	40000400 	.word	0x40000400
    1fc0:	00004014 	.word	0x00004014
    1fc4:	40000c00 	.word	0x40000c00

00001fc8 <SPI_ADF_init>:
{
    1fc8:	b510      	push	{r4, lr}
	SPI_ADF_CLOCK_init();
    1fca:	4b04      	ldr	r3, [pc, #16]	; (1fdc <SPI_ADF_init+0x14>)
    1fcc:	4798      	blx	r3
	spi_m_sync_init(&SPI_ADF, SERCOM0);
    1fce:	4904      	ldr	r1, [pc, #16]	; (1fe0 <SPI_ADF_init+0x18>)
    1fd0:	4804      	ldr	r0, [pc, #16]	; (1fe4 <SPI_ADF_init+0x1c>)
    1fd2:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <SPI_ADF_init+0x20>)
    1fd4:	4798      	blx	r3
	SPI_ADF_PORT_init();
    1fd6:	4b05      	ldr	r3, [pc, #20]	; (1fec <SPI_ADF_init+0x24>)
    1fd8:	4798      	blx	r3
}
    1fda:	bd10      	pop	{r4, pc}
    1fdc:	00001fa9 	.word	0x00001fa9
    1fe0:	42000800 	.word	0x42000800
    1fe4:	20001550 	.word	0x20001550
    1fe8:	000027a1 	.word	0x000027a1
    1fec:	00001eed 	.word	0x00001eed

00001ff0 <SPI_LMX_PORT_init>:
{
    1ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ff2:	46c6      	mov	lr, r8
    1ff4:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ff6:	22c0      	movs	r2, #192	; 0xc0
    1ff8:	05d2      	lsls	r2, r2, #23
    1ffa:	2380      	movs	r3, #128	; 0x80
    1ffc:	025b      	lsls	r3, r3, #9
    1ffe:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2000:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2002:	4b26      	ldr	r3, [pc, #152]	; (209c <STACK_SIZE+0x9c>)
    2004:	2180      	movs	r1, #128	; 0x80
    2006:	05c9      	lsls	r1, r1, #23
    2008:	468c      	mov	ip, r1
    200a:	6299      	str	r1, [r3, #40]	; 0x28
    200c:	4924      	ldr	r1, [pc, #144]	; (20a0 <STACK_SIZE+0xa0>)
    200e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2010:	2050      	movs	r0, #80	; 0x50
    2012:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2014:	2701      	movs	r7, #1
    2016:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2018:	2601      	movs	r6, #1
    201a:	4331      	orrs	r1, r6
    201c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    201e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2020:	2138      	movs	r1, #56	; 0x38
    2022:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2024:	250f      	movs	r5, #15
    2026:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    2028:	2402      	movs	r4, #2
    202a:	46a0      	mov	r8, r4
    202c:	4644      	mov	r4, r8
    202e:	4320      	orrs	r0, r4
    2030:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2032:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2034:	2080      	movs	r0, #128	; 0x80
    2036:	0280      	lsls	r0, r0, #10
    2038:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    203a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    203c:	4660      	mov	r0, ip
    203e:	6298      	str	r0, [r3, #40]	; 0x28
    2040:	4818      	ldr	r0, [pc, #96]	; (20a4 <STACK_SIZE+0xa4>)
    2042:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2044:	2051      	movs	r0, #81	; 0x51
    2046:	4684      	mov	ip, r0
    2048:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    204a:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    204c:	4330      	orrs	r0, r6
    204e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2050:	4664      	mov	r4, ip
    2052:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2054:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2056:	3c42      	subs	r4, #66	; 0x42
    2058:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
    205a:	2420      	movs	r4, #32
    205c:	46a4      	mov	ip, r4
    205e:	4664      	mov	r4, ip
    2060:	4320      	orrs	r0, r4
    2062:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2064:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2066:	2180      	movs	r1, #128	; 0x80
    2068:	02c9      	lsls	r1, r1, #11
    206a:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    206c:	4a0e      	ldr	r2, [pc, #56]	; (20a8 <STACK_SIZE+0xa8>)
    206e:	629a      	str	r2, [r3, #40]	; 0x28
    2070:	4a0e      	ldr	r2, [pc, #56]	; (20ac <STACK_SIZE+0xac>)
    2072:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2074:	2252      	movs	r2, #82	; 0x52
    2076:	5c99      	ldrb	r1, [r3, r2]
    2078:	2004      	movs	r0, #4
    207a:	4381      	bics	r1, r0
    207c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    207e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2080:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2082:	4331      	orrs	r1, r6
    2084:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2086:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2088:	2139      	movs	r1, #57	; 0x39
    208a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    208c:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
    208e:	4640      	mov	r0, r8
    2090:	4302      	orrs	r2, r0
    2092:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2094:	545a      	strb	r2, [r3, r1]
}
    2096:	bc04      	pop	{r2}
    2098:	4690      	mov	r8, r2
    209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    209c:	41004400 	.word	0x41004400
    20a0:	c0000001 	.word	0xc0000001
    20a4:	c0000002 	.word	0xc0000002
    20a8:	40020000 	.word	0x40020000
    20ac:	c0020004 	.word	0xc0020004

000020b0 <SPI_LMX_CLOCK_init>:
    20b0:	4a04      	ldr	r2, [pc, #16]	; (20c4 <SPI_LMX_CLOCK_init+0x14>)
    20b2:	6a13      	ldr	r3, [r2, #32]
    20b4:	2108      	movs	r1, #8
    20b6:	430b      	orrs	r3, r1
    20b8:	6213      	str	r3, [r2, #32]
    20ba:	4a03      	ldr	r2, [pc, #12]	; (20c8 <SPI_LMX_CLOCK_init+0x18>)
    20bc:	4b03      	ldr	r3, [pc, #12]	; (20cc <SPI_LMX_CLOCK_init+0x1c>)
    20be:	805a      	strh	r2, [r3, #2]
}
    20c0:	4770      	bx	lr
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	40000400 	.word	0x40000400
    20c8:	00004015 	.word	0x00004015
    20cc:	40000c00 	.word	0x40000c00

000020d0 <SPI_LMX_init>:
{
    20d0:	b510      	push	{r4, lr}
	SPI_LMX_CLOCK_init();
    20d2:	4b04      	ldr	r3, [pc, #16]	; (20e4 <SPI_LMX_init+0x14>)
    20d4:	4798      	blx	r3
	spi_m_sync_init(&SPI_LMX, SERCOM1);
    20d6:	4904      	ldr	r1, [pc, #16]	; (20e8 <SPI_LMX_init+0x18>)
    20d8:	4804      	ldr	r0, [pc, #16]	; (20ec <SPI_LMX_init+0x1c>)
    20da:	4b05      	ldr	r3, [pc, #20]	; (20f0 <SPI_LMX_init+0x20>)
    20dc:	4798      	blx	r3
	SPI_LMX_PORT_init();
    20de:	4b05      	ldr	r3, [pc, #20]	; (20f4 <SPI_LMX_init+0x24>)
    20e0:	4798      	blx	r3
}
    20e2:	bd10      	pop	{r4, pc}
    20e4:	000020b1 	.word	0x000020b1
    20e8:	42000c00 	.word	0x42000c00
    20ec:	200014dc 	.word	0x200014dc
    20f0:	000027a1 	.word	0x000027a1
    20f4:	00001ff1 	.word	0x00001ff1

000020f8 <SPI_ZCD_PORT_init>:
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20fa:	21c0      	movs	r1, #192	; 0xc0
    20fc:	05c9      	lsls	r1, r1, #23
    20fe:	2380      	movs	r3, #128	; 0x80
    2100:	015b      	lsls	r3, r3, #5
    2102:	614b      	str	r3, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2104:	608b      	str	r3, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2106:	4b22      	ldr	r3, [pc, #136]	; (2190 <SPI_ZCD_PORT_init+0x98>)
    2108:	4a22      	ldr	r2, [pc, #136]	; (2194 <SPI_ZCD_PORT_init+0x9c>)
    210a:	629a      	str	r2, [r3, #40]	; 0x28
    210c:	20c0      	movs	r0, #192	; 0xc0
    210e:	0600      	lsls	r0, r0, #24
    2110:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2112:	264c      	movs	r6, #76	; 0x4c
    2114:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2116:	2501      	movs	r5, #1
    2118:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    211a:	2401      	movs	r4, #1
    211c:	4322      	orrs	r2, r4
    211e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2120:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2122:	3e16      	subs	r6, #22
    2124:	5d9a      	ldrb	r2, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2126:	270f      	movs	r7, #15
    2128:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
    212a:	2702      	movs	r7, #2
    212c:	433a      	orrs	r2, r7
    212e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2130:	559a      	strb	r2, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2132:	2280      	movs	r2, #128	; 0x80
    2134:	0092      	lsls	r2, r2, #2
    2136:	614a      	str	r2, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2138:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    213a:	4a17      	ldr	r2, [pc, #92]	; (2198 <SPI_ZCD_PORT_init+0xa0>)
    213c:	629a      	str	r2, [r3, #40]	; 0x28
    213e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2140:	2049      	movs	r0, #73	; 0x49
    2142:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2144:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2146:	4322      	orrs	r2, r4
    2148:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    214a:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    214c:	2234      	movs	r2, #52	; 0x34
    214e:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2150:	3e27      	subs	r6, #39	; 0x27
    2152:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    2154:	2730      	movs	r7, #48	; 0x30
    2156:	4338      	orrs	r0, r7
    2158:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    215a:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    215c:	2280      	movs	r2, #128	; 0x80
    215e:	0212      	lsls	r2, r2, #8
    2160:	604a      	str	r2, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2162:	4a0e      	ldr	r2, [pc, #56]	; (219c <SPI_ZCD_PORT_init+0xa4>)
    2164:	629a      	str	r2, [r3, #40]	; 0x28
    2166:	4a0e      	ldr	r2, [pc, #56]	; (21a0 <SPI_ZCD_PORT_init+0xa8>)
    2168:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    216a:	224f      	movs	r2, #79	; 0x4f
    216c:	5c99      	ldrb	r1, [r3, r2]
    216e:	2004      	movs	r0, #4
    2170:	4381      	bics	r1, r0
    2172:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2174:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2176:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2178:	4321      	orrs	r1, r4
    217a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    217c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    217e:	2137      	movs	r1, #55	; 0x37
    2180:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2182:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    2184:	2020      	movs	r0, #32
    2186:	4302      	orrs	r2, r0
    2188:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    218a:	545a      	strb	r2, [r3, r1]
}
    218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	41004400 	.word	0x41004400
    2194:	40001000 	.word	0x40001000
    2198:	40000200 	.word	0x40000200
    219c:	40028000 	.word	0x40028000
    21a0:	c0020000 	.word	0xc0020000

000021a4 <SPI_ZCD_CLOCK_init>:
    21a4:	4a04      	ldr	r2, [pc, #16]	; (21b8 <SPI_ZCD_CLOCK_init+0x14>)
    21a6:	6a13      	ldr	r3, [r2, #32]
    21a8:	2110      	movs	r1, #16
    21aa:	430b      	orrs	r3, r1
    21ac:	6213      	str	r3, [r2, #32]
    21ae:	4a03      	ldr	r2, [pc, #12]	; (21bc <SPI_ZCD_CLOCK_init+0x18>)
    21b0:	4b03      	ldr	r3, [pc, #12]	; (21c0 <SPI_ZCD_CLOCK_init+0x1c>)
    21b2:	805a      	strh	r2, [r3, #2]
}
    21b4:	4770      	bx	lr
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	40000400 	.word	0x40000400
    21bc:	00004016 	.word	0x00004016
    21c0:	40000c00 	.word	0x40000c00

000021c4 <SPI_ZCD_init>:
{
    21c4:	b510      	push	{r4, lr}
	SPI_ZCD_CLOCK_init();
    21c6:	4b04      	ldr	r3, [pc, #16]	; (21d8 <SPI_ZCD_init+0x14>)
    21c8:	4798      	blx	r3
	spi_m_sync_init(&SPI_ZCD, SERCOM2);
    21ca:	4904      	ldr	r1, [pc, #16]	; (21dc <SPI_ZCD_init+0x18>)
    21cc:	4804      	ldr	r0, [pc, #16]	; (21e0 <SPI_ZCD_init+0x1c>)
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <SPI_ZCD_init+0x20>)
    21d0:	4798      	blx	r3
	SPI_ZCD_PORT_init();
    21d2:	4b05      	ldr	r3, [pc, #20]	; (21e8 <SPI_ZCD_init+0x24>)
    21d4:	4798      	blx	r3
}
    21d6:	bd10      	pop	{r4, pc}
    21d8:	000021a5 	.word	0x000021a5
    21dc:	42001000 	.word	0x42001000
    21e0:	20001568 	.word	0x20001568
    21e4:	000027a1 	.word	0x000027a1
    21e8:	000020f9 	.word	0x000020f9

000021ec <USART_0_CLOCK_init>:
    21ec:	4a04      	ldr	r2, [pc, #16]	; (2200 <USART_0_CLOCK_init+0x14>)
    21ee:	6a13      	ldr	r3, [r2, #32]
    21f0:	2120      	movs	r1, #32
    21f2:	430b      	orrs	r3, r1
    21f4:	6213      	str	r3, [r2, #32]
    21f6:	4a03      	ldr	r2, [pc, #12]	; (2204 <USART_0_CLOCK_init+0x18>)
    21f8:	4b03      	ldr	r3, [pc, #12]	; (2208 <USART_0_CLOCK_init+0x1c>)
    21fa:	805a      	strh	r2, [r3, #2]
}
    21fc:	4770      	bx	lr
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	40000400 	.word	0x40000400
    2204:	00004017 	.word	0x00004017
    2208:	40000c00 	.word	0x40000c00

0000220c <USART_0_PORT_init>:
{
    220c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    220e:	4b0f      	ldr	r3, [pc, #60]	; (224c <USART_0_PORT_init+0x40>)
    2210:	2256      	movs	r2, #86	; 0x56
    2212:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2214:	2501      	movs	r5, #1
    2216:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2218:	2401      	movs	r4, #1
    221a:	4321      	orrs	r1, r4
    221c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    221e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2220:	203b      	movs	r0, #59	; 0x3b
    2222:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2224:	3a47      	subs	r2, #71	; 0x47
    2226:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2228:	2202      	movs	r2, #2
    222a:	4311      	orrs	r1, r2
    222c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    222e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2230:	2157      	movs	r1, #87	; 0x57
    2232:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2234:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2236:	4322      	orrs	r2, r4
    2238:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    223a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    223c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    223e:	3948      	subs	r1, #72	; 0x48
    2240:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2242:	2120      	movs	r1, #32
    2244:	430a      	orrs	r2, r1
    2246:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2248:	541a      	strb	r2, [r3, r0]
}
    224a:	bd30      	pop	{r4, r5, pc}
    224c:	41004400 	.word	0x41004400

00002250 <USART_0_init>:
{
    2250:	b510      	push	{r4, lr}
    2252:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
    2254:	4b06      	ldr	r3, [pc, #24]	; (2270 <USART_0_init+0x20>)
    2256:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM3, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    2258:	2300      	movs	r3, #0
    225a:	9300      	str	r3, [sp, #0]
    225c:	3310      	adds	r3, #16
    225e:	4a05      	ldr	r2, [pc, #20]	; (2274 <USART_0_init+0x24>)
    2260:	4905      	ldr	r1, [pc, #20]	; (2278 <USART_0_init+0x28>)
    2262:	4806      	ldr	r0, [pc, #24]	; (227c <USART_0_init+0x2c>)
    2264:	4c06      	ldr	r4, [pc, #24]	; (2280 <USART_0_init+0x30>)
    2266:	47a0      	blx	r4
	USART_0_PORT_init();
    2268:	4b06      	ldr	r3, [pc, #24]	; (2284 <USART_0_init+0x34>)
    226a:	4798      	blx	r3
}
    226c:	b002      	add	sp, #8
    226e:	bd10      	pop	{r4, pc}
    2270:	000021ed 	.word	0x000021ed
    2274:	20000ec4 	.word	0x20000ec4
    2278:	42001400 	.word	0x42001400
    227c:	20001500 	.word	0x20001500
    2280:	00002d4d 	.word	0x00002d4d
    2284:	0000220d 	.word	0x0000220d

00002288 <delay_driver_init>:
{
    2288:	b510      	push	{r4, lr}
	delay_init(SysTick);
    228a:	4802      	ldr	r0, [pc, #8]	; (2294 <delay_driver_init+0xc>)
    228c:	4b02      	ldr	r3, [pc, #8]	; (2298 <delay_driver_init+0x10>)
    228e:	4798      	blx	r3
}
    2290:	bd10      	pop	{r4, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	e000e010 	.word	0xe000e010
    2298:	000025ad 	.word	0x000025ad

0000229c <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
    229c:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    229e:	2204      	movs	r2, #4
    22a0:	23c0      	movs	r3, #192	; 0xc0
    22a2:	05db      	lsls	r3, r3, #23
    22a4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22a6:	490a      	ldr	r1, [pc, #40]	; (22d0 <DAC_0_PORT_init+0x34>)
    22a8:	4b0a      	ldr	r3, [pc, #40]	; (22d4 <DAC_0_PORT_init+0x38>)
    22aa:	628b      	str	r3, [r1, #40]	; 0x28
    22ac:	23c0      	movs	r3, #192	; 0xc0
    22ae:	061b      	lsls	r3, r3, #24
    22b0:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22b2:	2342      	movs	r3, #66	; 0x42
    22b4:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22b6:	2001      	movs	r0, #1
    22b8:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22ba:	4302      	orrs	r2, r0
    22bc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22be:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22c0:	2231      	movs	r2, #49	; 0x31
    22c2:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    22c4:	240f      	movs	r4, #15
    22c6:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
    22c8:	4303      	orrs	r3, r0
    22ca:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22cc:	548b      	strb	r3, [r1, r2]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA02, PINMUX_PA02B_DAC_VOUT);
}
    22ce:	bd10      	pop	{r4, pc}
    22d0:	41004400 	.word	0x41004400
    22d4:	40000004 	.word	0x40000004

000022d8 <DAC_0_CLOCK_init>:
    22d8:	4a04      	ldr	r2, [pc, #16]	; (22ec <DAC_0_CLOCK_init+0x14>)
    22da:	6a11      	ldr	r1, [r2, #32]
    22dc:	2380      	movs	r3, #128	; 0x80
    22de:	02db      	lsls	r3, r3, #11
    22e0:	430b      	orrs	r3, r1
    22e2:	6213      	str	r3, [r2, #32]
    22e4:	4a02      	ldr	r2, [pc, #8]	; (22f0 <DAC_0_CLOCK_init+0x18>)
    22e6:	4b03      	ldr	r3, [pc, #12]	; (22f4 <DAC_0_CLOCK_init+0x1c>)
    22e8:	805a      	strh	r2, [r3, #2]
void DAC_0_CLOCK_init(void)
{

	_pm_enable_bus_clock(PM_BUS_APBC, DAC);
	_gclk_enable_channel(DAC_GCLK_ID, CONF_GCLK_DAC_SRC);
}
    22ea:	4770      	bx	lr
    22ec:	40000400 	.word	0x40000400
    22f0:	00004021 	.word	0x00004021
    22f4:	40000c00 	.word	0x40000c00

000022f8 <DAC_0_init>:

void DAC_0_init(void)
{
    22f8:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
    22fa:	4b04      	ldr	r3, [pc, #16]	; (230c <DAC_0_init+0x14>)
    22fc:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    22fe:	4904      	ldr	r1, [pc, #16]	; (2310 <DAC_0_init+0x18>)
    2300:	4804      	ldr	r0, [pc, #16]	; (2314 <DAC_0_init+0x1c>)
    2302:	4b05      	ldr	r3, [pc, #20]	; (2318 <DAC_0_init+0x20>)
    2304:	4798      	blx	r3
	DAC_0_PORT_init();
    2306:	4b05      	ldr	r3, [pc, #20]	; (231c <DAC_0_init+0x24>)
    2308:	4798      	blx	r3
}
    230a:	bd10      	pop	{r4, pc}
    230c:	000022d9 	.word	0x000022d9
    2310:	42004800 	.word	0x42004800
    2314:	200014f4 	.word	0x200014f4
    2318:	00002525 	.word	0x00002525
    231c:	0000229d 	.word	0x0000229d

00002320 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    2320:	b5f0      	push	{r4, r5, r6, r7, lr}
    2322:	46c6      	mov	lr, r8
    2324:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2326:	24c0      	movs	r4, #192	; 0xc0
    2328:	05e4      	lsls	r4, r4, #23
    232a:	2280      	movs	r2, #128	; 0x80
    232c:	0452      	lsls	r2, r2, #17
    232e:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2330:	4b1c      	ldr	r3, [pc, #112]	; (23a4 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    2332:	2780      	movs	r7, #128	; 0x80
    2334:	05ff      	lsls	r7, r7, #23
    2336:	629f      	str	r7, [r3, #40]	; 0x28
    2338:	491b      	ldr	r1, [pc, #108]	; (23a8 <USB_DEVICE_INSTANCE_PORT_init+0x88>)
    233a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    233c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    233e:	2058      	movs	r0, #88	; 0x58
    2340:	5c19      	ldrb	r1, [r3, r0]
    2342:	2204      	movs	r2, #4
    2344:	4690      	mov	r8, r2
    2346:	4391      	bics	r1, r2
    2348:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    234a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    234c:	2601      	movs	r6, #1
    234e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2350:	2501      	movs	r5, #1
    2352:	4329      	orrs	r1, r5
    2354:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2356:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2358:	381c      	subs	r0, #28
    235a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    235c:	320b      	adds	r2, #11
    235e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2360:	2206      	movs	r2, #6
    2362:	4694      	mov	ip, r2
    2364:	4662      	mov	r2, ip
    2366:	4311      	orrs	r1, r2
    2368:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    236a:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    236c:	2180      	movs	r1, #128	; 0x80
    236e:	0489      	lsls	r1, r1, #18
    2370:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2372:	629f      	str	r7, [r3, #40]	; 0x28
    2374:	4f0d      	ldr	r7, [pc, #52]	; (23ac <USB_DEVICE_INSTANCE_PORT_init+0x8c>)
    2376:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2378:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    237a:	2159      	movs	r1, #89	; 0x59
    237c:	5c5c      	ldrb	r4, [r3, r1]
    237e:	4642      	mov	r2, r8
    2380:	4394      	bics	r4, r2
    2382:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2384:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2386:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2388:	432a      	orrs	r2, r5
    238a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    238c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    238e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2390:	394a      	subs	r1, #74	; 0x4a
    2392:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2394:	2160      	movs	r1, #96	; 0x60
    2396:	430a      	orrs	r2, r1
    2398:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    239a:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    239c:	bc04      	pop	{r2}
    239e:	4690      	mov	r8, r2
    23a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	41004400 	.word	0x41004400
    23a8:	c0000100 	.word	0xc0000100
    23ac:	c0000200 	.word	0xc0000200

000023b0 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    23b0:	4b06      	ldr	r3, [pc, #24]	; (23cc <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    23b2:	69da      	ldr	r2, [r3, #28]
    23b4:	2120      	movs	r1, #32
    23b6:	430a      	orrs	r2, r1
    23b8:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    23ba:	695a      	ldr	r2, [r3, #20]
    23bc:	3120      	adds	r1, #32
    23be:	430a      	orrs	r2, r1
    23c0:	615a      	str	r2, [r3, #20]
    23c2:	4a03      	ldr	r2, [pc, #12]	; (23d0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    23c4:	4b03      	ldr	r3, [pc, #12]	; (23d4 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    23c6:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    23c8:	4770      	bx	lr
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	40000400 	.word	0x40000400
    23d0:	00004406 	.word	0x00004406
    23d4:	40000c00 	.word	0x40000c00

000023d8 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    23d8:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    23da:	4b03      	ldr	r3, [pc, #12]	; (23e8 <USB_DEVICE_INSTANCE_init+0x10>)
    23dc:	4798      	blx	r3
	usb_d_init();
    23de:	4b03      	ldr	r3, [pc, #12]	; (23ec <USB_DEVICE_INSTANCE_init+0x14>)
    23e0:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    23e2:	4b03      	ldr	r3, [pc, #12]	; (23f0 <USB_DEVICE_INSTANCE_init+0x18>)
    23e4:	4798      	blx	r3
}
    23e6:	bd10      	pop	{r4, pc}
    23e8:	000023b1 	.word	0x000023b1
    23ec:	00003035 	.word	0x00003035
    23f0:	00002321 	.word	0x00002321

000023f4 <system_init>:

void system_init(void)
{
    23f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f6:	46c6      	mov	lr, r8
    23f8:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    23fa:	4b32      	ldr	r3, [pc, #200]	; (24c4 <system_init+0xd0>)
    23fc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23fe:	22c0      	movs	r2, #192	; 0xc0
    2400:	05d2      	lsls	r2, r2, #23
    2402:	2308      	movs	r3, #8
    2404:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2406:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2408:	4b2f      	ldr	r3, [pc, #188]	; (24c8 <system_init+0xd4>)
    240a:	4930      	ldr	r1, [pc, #192]	; (24cc <system_init+0xd8>)
    240c:	6299      	str	r1, [r3, #40]	; 0x28
    240e:	25c0      	movs	r5, #192	; 0xc0
    2410:	062d      	lsls	r5, r5, #24
    2412:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2414:	2443      	movs	r4, #67	; 0x43
    2416:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2418:	2001      	movs	r0, #1
    241a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    241c:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    241e:	2180      	movs	r1, #128	; 0x80
    2420:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2422:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2424:	492a      	ldr	r1, [pc, #168]	; (24d0 <system_init+0xdc>)
    2426:	6299      	str	r1, [r3, #40]	; 0x28
    2428:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    242a:	3404      	adds	r4, #4
    242c:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    242e:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2430:	5519      	strb	r1, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2432:	2180      	movs	r1, #128	; 0x80
    2434:	0309      	lsls	r1, r1, #12
    2436:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2438:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    243a:	2180      	movs	r1, #128	; 0x80
    243c:	05c9      	lsls	r1, r1, #23
    243e:	6299      	str	r1, [r3, #40]	; 0x28
    2440:	4c24      	ldr	r4, [pc, #144]	; (24d4 <system_init+0xe0>)
    2442:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2444:	2653      	movs	r6, #83	; 0x53
    2446:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2448:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    244a:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    244c:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    244e:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2450:	6299      	str	r1, [r3, #40]	; 0x28
    2452:	4c21      	ldr	r4, [pc, #132]	; (24d8 <system_init+0xe4>)
    2454:	46a0      	mov	r8, r4
    2456:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2458:	275e      	movs	r7, #94	; 0x5e
    245a:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    245c:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    245e:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2460:	2480      	movs	r4, #128	; 0x80
    2462:	00e4      	lsls	r4, r4, #3
    2464:	3736      	adds	r7, #54	; 0x36
    2466:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2468:	3f0c      	subs	r7, #12
    246a:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    246c:	24a8      	movs	r4, #168	; 0xa8
    246e:	4e1b      	ldr	r6, [pc, #108]	; (24dc <system_init+0xe8>)
    2470:	511e      	str	r6, [r3, r4]
    2472:	511d      	str	r5, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2474:	25ca      	movs	r5, #202	; 0xca
    2476:	46ac      	mov	ip, r5
    2478:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    247a:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    247c:	4666      	mov	r6, ip
    247e:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2480:	2598      	movs	r5, #152	; 0x98
    2482:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2484:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2486:	5119      	str	r1, [r3, r4]
    2488:	4642      	mov	r2, r8
    248a:	511a      	str	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    248c:	21de      	movs	r1, #222	; 0xde
    248e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2490:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2492:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    2494:	4b12      	ldr	r3, [pc, #72]	; (24e0 <system_init+0xec>)
    2496:	4798      	blx	r3

	SPI_ADF_init();
    2498:	4b12      	ldr	r3, [pc, #72]	; (24e4 <system_init+0xf0>)
    249a:	4798      	blx	r3

	SPI_LMX_init();
    249c:	4b12      	ldr	r3, [pc, #72]	; (24e8 <system_init+0xf4>)
    249e:	4798      	blx	r3

	SPI_ZCD_init();
    24a0:	4b12      	ldr	r3, [pc, #72]	; (24ec <system_init+0xf8>)
    24a2:	4798      	blx	r3
	USART_0_init();
    24a4:	4b12      	ldr	r3, [pc, #72]	; (24f0 <system_init+0xfc>)
    24a6:	4798      	blx	r3

	delay_driver_init();
    24a8:	4b12      	ldr	r3, [pc, #72]	; (24f4 <system_init+0x100>)
    24aa:	4798      	blx	r3

	TIMER_ZCD_init();
    24ac:	4b12      	ldr	r3, [pc, #72]	; (24f8 <system_init+0x104>)
    24ae:	4798      	blx	r3
	TIMER_USB_init();
    24b0:	4b12      	ldr	r3, [pc, #72]	; (24fc <system_init+0x108>)
    24b2:	4798      	blx	r3
	DAC_0_init();
    24b4:	4b12      	ldr	r3, [pc, #72]	; (2500 <system_init+0x10c>)
    24b6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    24b8:	4b12      	ldr	r3, [pc, #72]	; (2504 <system_init+0x110>)
    24ba:	4798      	blx	r3
}
    24bc:	bc04      	pop	{r2}
    24be:	4690      	mov	r8, r2
    24c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c2:	46c0      	nop			; (mov r8, r8)
    24c4:	000035bd 	.word	0x000035bd
    24c8:	41004400 	.word	0x41004400
    24cc:	40000008 	.word	0x40000008
    24d0:	40000080 	.word	0x40000080
    24d4:	c0000008 	.word	0xc0000008
    24d8:	c0004000 	.word	0xc0004000
    24dc:	40000400 	.word	0x40000400
    24e0:	00001e95 	.word	0x00001e95
    24e4:	00001fc9 	.word	0x00001fc9
    24e8:	000020d1 	.word	0x000020d1
    24ec:	000021c5 	.word	0x000021c5
    24f0:	00002251 	.word	0x00002251
    24f4:	00002289 	.word	0x00002289
    24f8:	00001e15 	.word	0x00001e15
    24fc:	00001e55 	.word	0x00001e55
    2500:	000022f9 	.word	0x000022f9
    2504:	000023d9 	.word	0x000023d9

00002508 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2508:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    250c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    250e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2510:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2514:	4770      	bx	lr

00002516 <atomic_leave_critical>:
    2516:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    251a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    251c:	f383 8810 	msr	PRIMASK, r3
}
    2520:	4770      	bx	lr
	...

00002524 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    2524:	b570      	push	{r4, r5, r6, lr}
    2526:	0004      	movs	r4, r0
    2528:	000d      	movs	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    252a:	2800      	cmp	r0, #0
    252c:	d010      	beq.n	2550 <dac_sync_init+0x2c>
    252e:	2900      	cmp	r1, #0
    2530:	d00c      	beq.n	254c <dac_sync_init+0x28>
    2532:	2001      	movs	r0, #1
    2534:	2232      	movs	r2, #50	; 0x32
    2536:	490c      	ldr	r1, [pc, #48]	; (2568 <dac_sync_init+0x44>)
    2538:	4b0c      	ldr	r3, [pc, #48]	; (256c <dac_sync_init+0x48>)
    253a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    253c:	0029      	movs	r1, r5
    253e:	0020      	movs	r0, r4
    2540:	4b0b      	ldr	r3, [pc, #44]	; (2570 <dac_sync_init+0x4c>)
    2542:	4798      	blx	r3
	if (rc) {
    2544:	2800      	cmp	r0, #0
    2546:	d10e      	bne.n	2566 <dac_sync_init+0x42>
    2548:	2300      	movs	r3, #0
    254a:	e00a      	b.n	2562 <dac_sync_init+0x3e>
	ASSERT(descr && hw);
    254c:	2000      	movs	r0, #0
    254e:	e7f1      	b.n	2534 <dac_sync_init+0x10>
    2550:	2000      	movs	r0, #0
    2552:	e7ef      	b.n	2534 <dac_sync_init+0x10>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    2554:	00da      	lsls	r2, r3, #3
    2556:	18a2      	adds	r2, r4, r2
    2558:	2100      	movs	r1, #0
    255a:	6051      	str	r1, [r2, #4]
		descr->sel_ch[i].length = 0;
    255c:	6091      	str	r1, [r2, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
    255e:	3301      	adds	r3, #1
    2560:	b2db      	uxtb	r3, r3
    2562:	2b00      	cmp	r3, #0
    2564:	d0f6      	beq.n	2554 <dac_sync_init+0x30>
	}

	return ERR_NONE;
}
    2566:	bd70      	pop	{r4, r5, r6, pc}
    2568:	00010ff8 	.word	0x00010ff8
    256c:	000033c1 	.word	0x000033c1
    2570:	00003631 	.word	0x00003631

00002574 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
    2574:	b570      	push	{r4, r5, r6, lr}
    2576:	0004      	movs	r4, r0
    2578:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
    257a:	2800      	cmp	r0, #0
    257c:	d00c      	beq.n	2598 <dac_sync_enable_channel+0x24>
    257e:	2900      	cmp	r1, #0
    2580:	d00c      	beq.n	259c <dac_sync_enable_channel+0x28>
    2582:	2000      	movs	r0, #0
    2584:	2252      	movs	r2, #82	; 0x52
    2586:	4906      	ldr	r1, [pc, #24]	; (25a0 <dac_sync_enable_channel+0x2c>)
    2588:	4b06      	ldr	r3, [pc, #24]	; (25a4 <dac_sync_enable_channel+0x30>)
    258a:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
    258c:	0029      	movs	r1, r5
    258e:	0020      	movs	r0, r4
    2590:	4b05      	ldr	r3, [pc, #20]	; (25a8 <dac_sync_enable_channel+0x34>)
    2592:	4798      	blx	r3

	return ERR_NONE;
}
    2594:	2000      	movs	r0, #0
    2596:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && (ch < CHANNEL_NUM));
    2598:	2000      	movs	r0, #0
    259a:	e7f3      	b.n	2584 <dac_sync_enable_channel+0x10>
    259c:	2001      	movs	r0, #1
    259e:	e7f1      	b.n	2584 <dac_sync_enable_channel+0x10>
    25a0:	00010ff8 	.word	0x00010ff8
    25a4:	000033c1 	.word	0x000033c1
    25a8:	0000365d 	.word	0x0000365d

000025ac <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    25ac:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    25ae:	4b02      	ldr	r3, [pc, #8]	; (25b8 <delay_init+0xc>)
    25b0:	6018      	str	r0, [r3, #0]
    25b2:	4b02      	ldr	r3, [pc, #8]	; (25bc <delay_init+0x10>)
    25b4:	4798      	blx	r3
}
    25b6:	bd10      	pop	{r4, pc}
    25b8:	20000ed4 	.word	0x20000ed4
    25bc:	00003ff5 	.word	0x00003ff5

000025c0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    25c0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    25c2:	4b04      	ldr	r3, [pc, #16]	; (25d4 <delay_ms+0x14>)
    25c4:	681c      	ldr	r4, [r3, #0]
    25c6:	4b04      	ldr	r3, [pc, #16]	; (25d8 <delay_ms+0x18>)
    25c8:	4798      	blx	r3
    25ca:	0001      	movs	r1, r0
    25cc:	0020      	movs	r0, r4
    25ce:	4b03      	ldr	r3, [pc, #12]	; (25dc <delay_ms+0x1c>)
    25d0:	4798      	blx	r3
}
    25d2:	bd10      	pop	{r4, pc}
    25d4:	20000ed4 	.word	0x20000ed4
    25d8:	000035b1 	.word	0x000035b1
    25dc:	00004001 	.word	0x00004001

000025e0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    25e0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    25e2:	2501      	movs	r5, #1
    25e4:	2400      	movs	r4, #0

	while (upper >= lower) {
    25e6:	e007      	b.n	25f8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    25e8:	4a0d      	ldr	r2, [pc, #52]	; (2620 <process_ext_irq+0x40>)
    25ea:	58b3      	ldr	r3, [r6, r2]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d000      	beq.n	25f2 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    25f0:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    25f2:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    25f4:	3a01      	subs	r2, #1
    25f6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    25f8:	42ac      	cmp	r4, r5
    25fa:	d8fa      	bhi.n	25f2 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    25fc:	192b      	adds	r3, r5, r4
    25fe:	105b      	asrs	r3, r3, #1
    2600:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    2602:	2a00      	cmp	r2, #0
    2604:	d1f5      	bne.n	25f2 <process_ext_irq+0x12>
    2606:	21ff      	movs	r1, #255	; 0xff
    2608:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    260a:	00de      	lsls	r6, r3, #3
    260c:	4904      	ldr	r1, [pc, #16]	; (2620 <process_ext_irq+0x40>)
    260e:	1989      	adds	r1, r1, r6
    2610:	6849      	ldr	r1, [r1, #4]
    2612:	4281      	cmp	r1, r0
    2614:	d0e8      	beq.n	25e8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    2616:	d2ed      	bcs.n	25f4 <process_ext_irq+0x14>
			lower = middle + 1;
    2618:	3201      	adds	r2, #1
    261a:	b2d4      	uxtb	r4, r2
    261c:	e7ec      	b.n	25f8 <process_ext_irq+0x18>
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	20000ed8 	.word	0x20000ed8

00002624 <ext_irq_init>:
{
    2624:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2626:	2300      	movs	r3, #0
    2628:	2b00      	cmp	r3, #0
    262a:	d003      	beq.n	2634 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
    262c:	4807      	ldr	r0, [pc, #28]	; (264c <ext_irq_init+0x28>)
    262e:	4b08      	ldr	r3, [pc, #32]	; (2650 <ext_irq_init+0x2c>)
    2630:	4798      	blx	r3
}
    2632:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
    2634:	4a07      	ldr	r2, [pc, #28]	; (2654 <ext_irq_init+0x30>)
    2636:	00d9      	lsls	r1, r3, #3
    2638:	1850      	adds	r0, r2, r1
    263a:	2401      	movs	r4, #1
    263c:	4264      	negs	r4, r4
    263e:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    2640:	2000      	movs	r0, #0
    2642:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2644:	3301      	adds	r3, #1
    2646:	b29b      	uxth	r3, r3
    2648:	e7ee      	b.n	2628 <ext_irq_init+0x4>
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	000025e1 	.word	0x000025e1
    2650:	00003671 	.word	0x00003671
    2654:	20000ed8 	.word	0x20000ed8

00002658 <ext_irq_register>:
{
    2658:	b5f0      	push	{r4, r5, r6, r7, lr}
    265a:	46c6      	mov	lr, r8
    265c:	b500      	push	{lr}
    265e:	b084      	sub	sp, #16
    2660:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
    2662:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2664:	2b00      	cmp	r3, #0
    2666:	d010      	beq.n	268a <ext_irq_register+0x32>
	bool    found = false;
    2668:	2300      	movs	r3, #0
    266a:	4698      	mov	r8, r3
	if (NULL == cb) {
    266c:	2900      	cmp	r1, #0
    266e:	d01b      	beq.n	26a8 <ext_irq_register+0x50>
	if (!found) {
    2670:	4643      	mov	r3, r8
    2672:	2b00      	cmp	r3, #0
    2674:	d146      	bne.n	2704 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2676:	2b00      	cmp	r3, #0
    2678:	d124      	bne.n	26c4 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
    267a:	00da      	lsls	r2, r3, #3
    267c:	4c2a      	ldr	r4, [pc, #168]	; (2728 <ext_irq_register+0xd0>)
    267e:	5912      	ldr	r2, [r2, r4]
    2680:	2a00      	cmp	r2, #0
    2682:	d018      	beq.n	26b6 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2684:	3301      	adds	r3, #1
    2686:	b2db      	uxtb	r3, r3
    2688:	e7f5      	b.n	2676 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
    268a:	00dc      	lsls	r4, r3, #3
    268c:	4a26      	ldr	r2, [pc, #152]	; (2728 <ext_irq_register+0xd0>)
    268e:	1912      	adds	r2, r2, r4
    2690:	6852      	ldr	r2, [r2, #4]
    2692:	9801      	ldr	r0, [sp, #4]
    2694:	4282      	cmp	r2, r0
    2696:	d002      	beq.n	269e <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2698:	3301      	adds	r3, #1
    269a:	b2db      	uxtb	r3, r3
    269c:	e7e2      	b.n	2664 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
    269e:	4b22      	ldr	r3, [pc, #136]	; (2728 <ext_irq_register+0xd0>)
    26a0:	50e1      	str	r1, [r4, r3]
			found          = true;
    26a2:	2301      	movs	r3, #1
    26a4:	4698      	mov	r8, r3
			break;
    26a6:	e7e1      	b.n	266c <ext_irq_register+0x14>
		if (!found) {
    26a8:	4643      	mov	r3, r8
    26aa:	2b00      	cmp	r3, #0
    26ac:	d035      	beq.n	271a <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
    26ae:	9801      	ldr	r0, [sp, #4]
    26b0:	4b1e      	ldr	r3, [pc, #120]	; (272c <ext_irq_register+0xd4>)
    26b2:	4798      	blx	r3
    26b4:	e02d      	b.n	2712 <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
    26b6:	00dd      	lsls	r5, r3, #3
    26b8:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
    26ba:	1965      	adds	r5, r4, r5
    26bc:	9a01      	ldr	r2, [sp, #4]
    26be:	606a      	str	r2, [r5, #4]
				found           = true;
    26c0:	2201      	movs	r2, #1
    26c2:	4690      	mov	r8, r2
    26c4:	2200      	movs	r2, #0
    26c6:	e001      	b.n	26cc <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    26c8:	3201      	adds	r2, #1
    26ca:	b2d2      	uxtb	r2, r2
    26cc:	0019      	movs	r1, r3
    26ce:	4311      	orrs	r1, r2
    26d0:	d118      	bne.n	2704 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    26d2:	4915      	ldr	r1, [pc, #84]	; (2728 <ext_irq_register+0xd0>)
    26d4:	00dc      	lsls	r4, r3, #3
    26d6:	190c      	adds	r4, r1, r4
    26d8:	6867      	ldr	r7, [r4, #4]
    26da:	00d4      	lsls	r4, r2, #3
    26dc:	1909      	adds	r1, r1, r4
    26de:	6849      	ldr	r1, [r1, #4]
    26e0:	428f      	cmp	r7, r1
    26e2:	d2f1      	bcs.n	26c8 <ext_irq_register+0x70>
    26e4:	1c4c      	adds	r4, r1, #1
    26e6:	d0ef      	beq.n	26c8 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
    26e8:	a902      	add	r1, sp, #8
    26ea:	468c      	mov	ip, r1
    26ec:	4f0e      	ldr	r7, [pc, #56]	; (2728 <ext_irq_register+0xd0>)
    26ee:	00d1      	lsls	r1, r2, #3
    26f0:	1879      	adds	r1, r7, r1
    26f2:	4664      	mov	r4, ip
    26f4:	c941      	ldmia	r1!, {r0, r6}
    26f6:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
    26f8:	00dd      	lsls	r5, r3, #3
    26fa:	197d      	adds	r5, r7, r5
    26fc:	4661      	mov	r1, ip
    26fe:	c911      	ldmia	r1!, {r0, r4}
    2700:	c511      	stmia	r5!, {r0, r4}
    2702:	e7e1      	b.n	26c8 <ext_irq_register+0x70>
	if (!found) {
    2704:	4643      	mov	r3, r8
    2706:	2b00      	cmp	r3, #0
    2708:	d00a      	beq.n	2720 <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
    270a:	2101      	movs	r1, #1
    270c:	9801      	ldr	r0, [sp, #4]
    270e:	4b07      	ldr	r3, [pc, #28]	; (272c <ext_irq_register+0xd4>)
    2710:	4798      	blx	r3
}
    2712:	b004      	add	sp, #16
    2714:	bc04      	pop	{r2}
    2716:	4690      	mov	r8, r2
    2718:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    271a:	200d      	movs	r0, #13
    271c:	4240      	negs	r0, r0
    271e:	e7f8      	b.n	2712 <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
    2720:	200d      	movs	r0, #13
    2722:	4240      	negs	r0, r0
    2724:	e7f5      	b.n	2712 <ext_irq_register+0xba>
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	20000ed8 	.word	0x20000ed8
    272c:	00003701 	.word	0x00003701

00002730 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2730:	b570      	push	{r4, r5, r6, lr}
    2732:	0004      	movs	r4, r0
    2734:	000d      	movs	r5, r1
    2736:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2738:	2800      	cmp	r0, #0
    273a:	d00e      	beq.n	275a <io_write+0x2a>
    273c:	2900      	cmp	r1, #0
    273e:	d00a      	beq.n	2756 <io_write+0x26>
    2740:	2001      	movs	r0, #1
    2742:	2234      	movs	r2, #52	; 0x34
    2744:	4906      	ldr	r1, [pc, #24]	; (2760 <io_write+0x30>)
    2746:	4b07      	ldr	r3, [pc, #28]	; (2764 <io_write+0x34>)
    2748:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    274a:	6823      	ldr	r3, [r4, #0]
    274c:	0032      	movs	r2, r6
    274e:	0029      	movs	r1, r5
    2750:	0020      	movs	r0, r4
    2752:	4798      	blx	r3
}
    2754:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2756:	2000      	movs	r0, #0
    2758:	e7f3      	b.n	2742 <io_write+0x12>
    275a:	2000      	movs	r0, #0
    275c:	e7f1      	b.n	2742 <io_write+0x12>
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00011014 	.word	0x00011014
    2764:	000033c1 	.word	0x000033c1

00002768 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2768:	b570      	push	{r4, r5, r6, lr}
    276a:	0004      	movs	r4, r0
    276c:	000d      	movs	r5, r1
    276e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2770:	2800      	cmp	r0, #0
    2772:	d00e      	beq.n	2792 <io_read+0x2a>
    2774:	2900      	cmp	r1, #0
    2776:	d00a      	beq.n	278e <io_read+0x26>
    2778:	2001      	movs	r0, #1
    277a:	223d      	movs	r2, #61	; 0x3d
    277c:	4906      	ldr	r1, [pc, #24]	; (2798 <io_read+0x30>)
    277e:	4b07      	ldr	r3, [pc, #28]	; (279c <io_read+0x34>)
    2780:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    2782:	6863      	ldr	r3, [r4, #4]
    2784:	0032      	movs	r2, r6
    2786:	0029      	movs	r1, r5
    2788:	0020      	movs	r0, r4
    278a:	4798      	blx	r3
}
    278c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    278e:	2000      	movs	r0, #0
    2790:	e7f3      	b.n	277a <io_read+0x12>
    2792:	2000      	movs	r0, #0
    2794:	e7f1      	b.n	277a <io_read+0x12>
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	00011014 	.word	0x00011014
    279c:	000033c1 	.word	0x000033c1

000027a0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    27a0:	b570      	push	{r4, r5, r6, lr}
    27a2:	0004      	movs	r4, r0
    27a4:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    27a6:	2800      	cmp	r0, #0
    27a8:	d017      	beq.n	27da <spi_m_sync_init+0x3a>
    27aa:	2900      	cmp	r1, #0
    27ac:	d013      	beq.n	27d6 <spi_m_sync_init+0x36>
    27ae:	2001      	movs	r0, #1
    27b0:	2240      	movs	r2, #64	; 0x40
    27b2:	490b      	ldr	r1, [pc, #44]	; (27e0 <spi_m_sync_init+0x40>)
    27b4:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <spi_m_sync_init+0x44>)
    27b6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    27b8:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    27ba:	1d20      	adds	r0, r4, #4
    27bc:	0029      	movs	r1, r5
    27be:	4b0a      	ldr	r3, [pc, #40]	; (27e8 <spi_m_sync_init+0x48>)
    27c0:	4798      	blx	r3

	if (rc < 0) {
    27c2:	2800      	cmp	r0, #0
    27c4:	db06      	blt.n	27d4 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    27c6:	4b09      	ldr	r3, [pc, #36]	; (27ec <spi_m_sync_init+0x4c>)
    27c8:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    27ca:	4b09      	ldr	r3, [pc, #36]	; (27f0 <spi_m_sync_init+0x50>)
    27cc:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    27ce:	4b09      	ldr	r3, [pc, #36]	; (27f4 <spi_m_sync_init+0x54>)
    27d0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    27d2:	2000      	movs	r0, #0
}
    27d4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    27d6:	2000      	movs	r0, #0
    27d8:	e7ea      	b.n	27b0 <spi_m_sync_init+0x10>
    27da:	2000      	movs	r0, #0
    27dc:	e7e8      	b.n	27b0 <spi_m_sync_init+0x10>
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	00011028 	.word	0x00011028
    27e4:	000033c1 	.word	0x000033c1
    27e8:	00003ba1 	.word	0x00003ba1
    27ec:	ffff8000 	.word	0xffff8000
    27f0:	000028a5 	.word	0x000028a5
    27f4:	00002869 	.word	0x00002869

000027f8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    27f8:	b510      	push	{r4, lr}
    27fa:	0004      	movs	r4, r0
	ASSERT(spi);
    27fc:	1e43      	subs	r3, r0, #1
    27fe:	4198      	sbcs	r0, r3
    2800:	b2c0      	uxtb	r0, r0
    2802:	2257      	movs	r2, #87	; 0x57
    2804:	4903      	ldr	r1, [pc, #12]	; (2814 <spi_m_sync_enable+0x1c>)
    2806:	4b04      	ldr	r3, [pc, #16]	; (2818 <spi_m_sync_enable+0x20>)
    2808:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    280a:	1d20      	adds	r0, r4, #4
    280c:	4b03      	ldr	r3, [pc, #12]	; (281c <spi_m_sync_enable+0x24>)
    280e:	4798      	blx	r3
}
    2810:	bd10      	pop	{r4, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	00011028 	.word	0x00011028
    2818:	000033c1 	.word	0x000033c1
    281c:	00003da5 	.word	0x00003da5

00002820 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2820:	b530      	push	{r4, r5, lr}
    2822:	b087      	sub	sp, #28
    2824:	0004      	movs	r4, r0
    2826:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2828:	2800      	cmp	r0, #0
    282a:	d015      	beq.n	2858 <spi_m_sync_transfer+0x38>
    282c:	2900      	cmp	r1, #0
    282e:	d011      	beq.n	2854 <spi_m_sync_transfer+0x34>
    2830:	2001      	movs	r0, #1
    2832:	22b3      	movs	r2, #179	; 0xb3
    2834:	4909      	ldr	r1, [pc, #36]	; (285c <spi_m_sync_transfer+0x3c>)
    2836:	4b0a      	ldr	r3, [pc, #40]	; (2860 <spi_m_sync_transfer+0x40>)
    2838:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    283a:	682b      	ldr	r3, [r5, #0]
    283c:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    283e:	686b      	ldr	r3, [r5, #4]
    2840:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    2842:	68ab      	ldr	r3, [r5, #8]
    2844:	9301      	str	r3, [sp, #4]
    2846:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2848:	1d20      	adds	r0, r4, #4
    284a:	a903      	add	r1, sp, #12
    284c:	4b05      	ldr	r3, [pc, #20]	; (2864 <spi_m_sync_transfer+0x44>)
    284e:	4798      	blx	r3
}
    2850:	b007      	add	sp, #28
    2852:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    2854:	2000      	movs	r0, #0
    2856:	e7ec      	b.n	2832 <spi_m_sync_transfer+0x12>
    2858:	2000      	movs	r0, #0
    285a:	e7ea      	b.n	2832 <spi_m_sync_transfer+0x12>
    285c:	00011028 	.word	0x00011028
    2860:	000033c1 	.word	0x000033c1
    2864:	00003ddd 	.word	0x00003ddd

00002868 <_spi_m_sync_io_write>:
{
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	b084      	sub	sp, #16
    286c:	0004      	movs	r4, r0
    286e:	000e      	movs	r6, r1
    2870:	0015      	movs	r5, r2
	ASSERT(io);
    2872:	1e43      	subs	r3, r0, #1
    2874:	4198      	sbcs	r0, r3
    2876:	b2c0      	uxtb	r0, r0
    2878:	22a3      	movs	r2, #163	; 0xa3
    287a:	4907      	ldr	r1, [pc, #28]	; (2898 <_spi_m_sync_io_write+0x30>)
    287c:	4b07      	ldr	r3, [pc, #28]	; (289c <_spi_m_sync_io_write+0x34>)
    287e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2880:	0020      	movs	r0, r4
    2882:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    2884:	2300      	movs	r3, #0
    2886:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    2888:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    288a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    288c:	a901      	add	r1, sp, #4
    288e:	4b04      	ldr	r3, [pc, #16]	; (28a0 <_spi_m_sync_io_write+0x38>)
    2890:	4798      	blx	r3
}
    2892:	b004      	add	sp, #16
    2894:	bd70      	pop	{r4, r5, r6, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	00011028 	.word	0x00011028
    289c:	000033c1 	.word	0x000033c1
    28a0:	00002821 	.word	0x00002821

000028a4 <_spi_m_sync_io_read>:
{
    28a4:	b570      	push	{r4, r5, r6, lr}
    28a6:	b084      	sub	sp, #16
    28a8:	0004      	movs	r4, r0
    28aa:	000e      	movs	r6, r1
    28ac:	0015      	movs	r5, r2
	ASSERT(io);
    28ae:	1e43      	subs	r3, r0, #1
    28b0:	4198      	sbcs	r0, r3
    28b2:	b2c0      	uxtb	r0, r0
    28b4:	2287      	movs	r2, #135	; 0x87
    28b6:	4907      	ldr	r1, [pc, #28]	; (28d4 <_spi_m_sync_io_read+0x30>)
    28b8:	4b07      	ldr	r3, [pc, #28]	; (28d8 <_spi_m_sync_io_read+0x34>)
    28ba:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    28bc:	0020      	movs	r0, r4
    28be:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    28c0:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    28c2:	2300      	movs	r3, #0
    28c4:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    28c6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    28c8:	a901      	add	r1, sp, #4
    28ca:	4b04      	ldr	r3, [pc, #16]	; (28dc <_spi_m_sync_io_read+0x38>)
    28cc:	4798      	blx	r3
}
    28ce:	b004      	add	sp, #16
    28d0:	bd70      	pop	{r4, r5, r6, pc}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	00011028 	.word	0x00011028
    28d8:	000033c1 	.word	0x000033c1
    28dc:	00002821 	.word	0x00002821

000028e0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	0004      	movs	r4, r0
    28e4:	000d      	movs	r5, r1
	ASSERT(spi && io);
    28e6:	2800      	cmp	r0, #0
    28e8:	d00c      	beq.n	2904 <spi_m_sync_get_io_descriptor+0x24>
    28ea:	2900      	cmp	r1, #0
    28ec:	d008      	beq.n	2900 <spi_m_sync_get_io_descriptor+0x20>
    28ee:	2001      	movs	r0, #1
    28f0:	22bd      	movs	r2, #189	; 0xbd
    28f2:	4905      	ldr	r1, [pc, #20]	; (2908 <spi_m_sync_get_io_descriptor+0x28>)
    28f4:	4b05      	ldr	r3, [pc, #20]	; (290c <spi_m_sync_get_io_descriptor+0x2c>)
    28f6:	4798      	blx	r3
	*io = &spi->io;
    28f8:	340c      	adds	r4, #12
    28fa:	602c      	str	r4, [r5, #0]
	return 0;
}
    28fc:	2000      	movs	r0, #0
    28fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    2900:	2000      	movs	r0, #0
    2902:	e7f5      	b.n	28f0 <spi_m_sync_get_io_descriptor+0x10>
    2904:	2000      	movs	r0, #0
    2906:	e7f3      	b.n	28f0 <spi_m_sync_get_io_descriptor+0x10>
    2908:	00011028 	.word	0x00011028
    290c:	000033c1 	.word	0x000033c1

00002910 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2912:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2914:	2e00      	cmp	r6, #0
    2916:	d002      	beq.n	291e <timer_add_timer_task+0xe>
    2918:	0033      	movs	r3, r6
    291a:	2500      	movs	r5, #0
    291c:	e00c      	b.n	2938 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    291e:	4b10      	ldr	r3, [pc, #64]	; (2960 <timer_add_timer_task+0x50>)
    2920:	4798      	blx	r3
		return;
    2922:	e018      	b.n	2956 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2924:	689f      	ldr	r7, [r3, #8]
    2926:	46bc      	mov	ip, r7
    2928:	4464      	add	r4, ip
    292a:	1aa4      	subs	r4, r4, r2
    292c:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    292e:	688f      	ldr	r7, [r1, #8]
    2930:	42bc      	cmp	r4, r7
    2932:	d20b      	bcs.n	294c <timer_add_timer_task+0x3c>
			break;
		prev = it;
    2934:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2936:	681b      	ldr	r3, [r3, #0]
    2938:	2b00      	cmp	r3, #0
    293a:	d007      	beq.n	294c <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    293c:	685c      	ldr	r4, [r3, #4]
    293e:	4294      	cmp	r4, r2
    2940:	d8f0      	bhi.n	2924 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    2942:	1aa4      	subs	r4, r4, r2
    2944:	689f      	ldr	r7, [r3, #8]
    2946:	46bc      	mov	ip, r7
    2948:	4464      	add	r4, ip
    294a:	e7f0      	b.n	292e <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    294c:	42b3      	cmp	r3, r6
    294e:	d003      	beq.n	2958 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2950:	0028      	movs	r0, r5
    2952:	4b04      	ldr	r3, [pc, #16]	; (2964 <timer_add_timer_task+0x54>)
    2954:	4798      	blx	r3
	}
}
    2956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2958:	4b01      	ldr	r3, [pc, #4]	; (2960 <timer_add_timer_task+0x50>)
    295a:	4798      	blx	r3
    295c:	e7fb      	b.n	2956 <timer_add_timer_task+0x46>
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	000033e1 	.word	0x000033e1
    2964:	0000340d 	.word	0x0000340d

00002968 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296a:	0005      	movs	r5, r0
    296c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    296e:	6903      	ldr	r3, [r0, #16]
    2970:	1c5e      	adds	r6, r3, #1
    2972:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2974:	7e03      	ldrb	r3, [r0, #24]
    2976:	07db      	lsls	r3, r3, #31
    2978:	d402      	bmi.n	2980 <timer_process_counted+0x18>
    297a:	7e03      	ldrb	r3, [r0, #24]
    297c:	079b      	lsls	r3, r3, #30
    297e:	d50a      	bpl.n	2996 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2980:	7e2b      	ldrb	r3, [r5, #24]
    2982:	2202      	movs	r2, #2
    2984:	4313      	orrs	r3, r2
    2986:	b2db      	uxtb	r3, r3
    2988:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    298c:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    298e:	68e3      	ldr	r3, [r4, #12]
    2990:	0020      	movs	r0, r4
    2992:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2994:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    2996:	2c00      	cmp	r4, #0
    2998:	d0f7      	beq.n	298a <timer_process_counted+0x22>
    299a:	6863      	ldr	r3, [r4, #4]
    299c:	1af3      	subs	r3, r6, r3
    299e:	68a2      	ldr	r2, [r4, #8]
    29a0:	4293      	cmp	r3, r2
    29a2:	d3f2      	bcc.n	298a <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    29a4:	002f      	movs	r7, r5
    29a6:	3714      	adds	r7, #20
    29a8:	0038      	movs	r0, r7
    29aa:	4b06      	ldr	r3, [pc, #24]	; (29c4 <timer_process_counted+0x5c>)
    29ac:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    29ae:	7c23      	ldrb	r3, [r4, #16]
    29b0:	2b01      	cmp	r3, #1
    29b2:	d1eb      	bne.n	298c <timer_process_counted+0x24>
			tmp->time_label = time;
    29b4:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    29b6:	0032      	movs	r2, r6
    29b8:	0021      	movs	r1, r4
    29ba:	0038      	movs	r0, r7
    29bc:	4b02      	ldr	r3, [pc, #8]	; (29c8 <timer_process_counted+0x60>)
    29be:	4798      	blx	r3
    29c0:	e7e4      	b.n	298c <timer_process_counted+0x24>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00003455 	.word	0x00003455
    29c8:	00002911 	.word	0x00002911

000029cc <timer_init>:
{
    29cc:	b570      	push	{r4, r5, r6, lr}
    29ce:	0004      	movs	r4, r0
    29d0:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    29d2:	2800      	cmp	r0, #0
    29d4:	d012      	beq.n	29fc <timer_init+0x30>
    29d6:	2900      	cmp	r1, #0
    29d8:	d00e      	beq.n	29f8 <timer_init+0x2c>
    29da:	2001      	movs	r0, #1
    29dc:	223b      	movs	r2, #59	; 0x3b
    29de:	4908      	ldr	r1, [pc, #32]	; (2a00 <timer_init+0x34>)
    29e0:	4b08      	ldr	r3, [pc, #32]	; (2a04 <timer_init+0x38>)
    29e2:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    29e4:	0029      	movs	r1, r5
    29e6:	0020      	movs	r0, r4
    29e8:	4b07      	ldr	r3, [pc, #28]	; (2a08 <timer_init+0x3c>)
    29ea:	4798      	blx	r3
	descr->time                           = 0;
    29ec:	2300      	movs	r3, #0
    29ee:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    29f0:	4b06      	ldr	r3, [pc, #24]	; (2a0c <timer_init+0x40>)
    29f2:	6023      	str	r3, [r4, #0]
}
    29f4:	2000      	movs	r0, #0
    29f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    29f8:	2000      	movs	r0, #0
    29fa:	e7ef      	b.n	29dc <timer_init+0x10>
    29fc:	2000      	movs	r0, #0
    29fe:	e7ed      	b.n	29dc <timer_init+0x10>
    2a00:	00011044 	.word	0x00011044
    2a04:	000033c1 	.word	0x000033c1
    2a08:	000040dd 	.word	0x000040dd
    2a0c:	00002969 	.word	0x00002969

00002a10 <timer_start>:
{
    2a10:	b510      	push	{r4, lr}
    2a12:	0004      	movs	r4, r0
	ASSERT(descr);
    2a14:	1e43      	subs	r3, r0, #1
    2a16:	4198      	sbcs	r0, r3
    2a18:	b2c0      	uxtb	r0, r0
    2a1a:	2253      	movs	r2, #83	; 0x53
    2a1c:	4907      	ldr	r1, [pc, #28]	; (2a3c <timer_start+0x2c>)
    2a1e:	4b08      	ldr	r3, [pc, #32]	; (2a40 <timer_start+0x30>)
    2a20:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2a22:	0020      	movs	r0, r4
    2a24:	4b07      	ldr	r3, [pc, #28]	; (2a44 <timer_start+0x34>)
    2a26:	4798      	blx	r3
    2a28:	2800      	cmp	r0, #0
    2a2a:	d104      	bne.n	2a36 <timer_start+0x26>
	_timer_start(&descr->device);
    2a2c:	0020      	movs	r0, r4
    2a2e:	4b06      	ldr	r3, [pc, #24]	; (2a48 <timer_start+0x38>)
    2a30:	4798      	blx	r3
	return ERR_NONE;
    2a32:	2000      	movs	r0, #0
}
    2a34:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2a36:	2011      	movs	r0, #17
    2a38:	4240      	negs	r0, r0
    2a3a:	e7fb      	b.n	2a34 <timer_start+0x24>
    2a3c:	00011044 	.word	0x00011044
    2a40:	000033c1 	.word	0x000033c1
    2a44:	0000421b 	.word	0x0000421b
    2a48:	00004201 	.word	0x00004201

00002a4c <timer_stop>:
{
    2a4c:	b510      	push	{r4, lr}
    2a4e:	0004      	movs	r4, r0
	ASSERT(descr);
    2a50:	1e43      	subs	r3, r0, #1
    2a52:	4198      	sbcs	r0, r3
    2a54:	b2c0      	uxtb	r0, r0
    2a56:	2261      	movs	r2, #97	; 0x61
    2a58:	4907      	ldr	r1, [pc, #28]	; (2a78 <timer_stop+0x2c>)
    2a5a:	4b08      	ldr	r3, [pc, #32]	; (2a7c <timer_stop+0x30>)
    2a5c:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    2a5e:	0020      	movs	r0, r4
    2a60:	4b07      	ldr	r3, [pc, #28]	; (2a80 <timer_stop+0x34>)
    2a62:	4798      	blx	r3
    2a64:	2800      	cmp	r0, #0
    2a66:	d004      	beq.n	2a72 <timer_stop+0x26>
	_timer_stop(&descr->device);
    2a68:	0020      	movs	r0, r4
    2a6a:	4b06      	ldr	r3, [pc, #24]	; (2a84 <timer_stop+0x38>)
    2a6c:	4798      	blx	r3
	return ERR_NONE;
    2a6e:	2000      	movs	r0, #0
}
    2a70:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2a72:	2011      	movs	r0, #17
    2a74:	4240      	negs	r0, r0
    2a76:	e7fb      	b.n	2a70 <timer_stop+0x24>
    2a78:	00011044 	.word	0x00011044
    2a7c:	000033c1 	.word	0x000033c1
    2a80:	0000421b 	.word	0x0000421b
    2a84:	0000420f 	.word	0x0000420f

00002a88 <timer_add_task>:
{
    2a88:	b570      	push	{r4, r5, r6, lr}
    2a8a:	b082      	sub	sp, #8
    2a8c:	0004      	movs	r4, r0
    2a8e:	000d      	movs	r5, r1
	ASSERT(descr && task);
    2a90:	2800      	cmp	r0, #0
    2a92:	d026      	beq.n	2ae2 <timer_add_task+0x5a>
    2a94:	2900      	cmp	r1, #0
    2a96:	d022      	beq.n	2ade <timer_add_task+0x56>
    2a98:	2001      	movs	r0, #1
    2a9a:	227a      	movs	r2, #122	; 0x7a
    2a9c:	491f      	ldr	r1, [pc, #124]	; (2b1c <timer_add_task+0x94>)
    2a9e:	4b20      	ldr	r3, [pc, #128]	; (2b20 <timer_add_task+0x98>)
    2aa0:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2aa2:	7e23      	ldrb	r3, [r4, #24]
    2aa4:	2201      	movs	r2, #1
    2aa6:	4313      	orrs	r3, r2
    2aa8:	b2db      	uxtb	r3, r3
    2aaa:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    2aac:	0026      	movs	r6, r4
    2aae:	3614      	adds	r6, #20
    2ab0:	0029      	movs	r1, r5
    2ab2:	0030      	movs	r0, r6
    2ab4:	4b1b      	ldr	r3, [pc, #108]	; (2b24 <timer_add_task+0x9c>)
    2ab6:	4798      	blx	r3
    2ab8:	2800      	cmp	r0, #0
    2aba:	d114      	bne.n	2ae6 <timer_add_task+0x5e>
	task->time_label = descr->time;
    2abc:	6923      	ldr	r3, [r4, #16]
    2abe:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2ac0:	6922      	ldr	r2, [r4, #16]
    2ac2:	0029      	movs	r1, r5
    2ac4:	0030      	movs	r0, r6
    2ac6:	4b18      	ldr	r3, [pc, #96]	; (2b28 <timer_add_task+0xa0>)
    2ac8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2aca:	7e23      	ldrb	r3, [r4, #24]
    2acc:	2201      	movs	r2, #1
    2ace:	4393      	bics	r3, r2
    2ad0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2ad2:	7e23      	ldrb	r3, [r4, #24]
    2ad4:	079b      	lsls	r3, r3, #30
    2ad6:	d412      	bmi.n	2afe <timer_add_task+0x76>
	return ERR_NONE;
    2ad8:	2000      	movs	r0, #0
}
    2ada:	b002      	add	sp, #8
    2adc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2ade:	2000      	movs	r0, #0
    2ae0:	e7db      	b.n	2a9a <timer_add_task+0x12>
    2ae2:	2000      	movs	r0, #0
    2ae4:	e7d9      	b.n	2a9a <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2ae6:	7e23      	ldrb	r3, [r4, #24]
    2ae8:	2201      	movs	r2, #1
    2aea:	4393      	bics	r3, r2
    2aec:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2aee:	327e      	adds	r2, #126	; 0x7e
    2af0:	490a      	ldr	r1, [pc, #40]	; (2b1c <timer_add_task+0x94>)
    2af2:	2000      	movs	r0, #0
    2af4:	4b0a      	ldr	r3, [pc, #40]	; (2b20 <timer_add_task+0x98>)
    2af6:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2af8:	2012      	movs	r0, #18
    2afa:	4240      	negs	r0, r0
    2afc:	e7ed      	b.n	2ada <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    2afe:	a801      	add	r0, sp, #4
    2b00:	4b0a      	ldr	r3, [pc, #40]	; (2b2c <timer_add_task+0xa4>)
    2b02:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b04:	7e23      	ldrb	r3, [r4, #24]
    2b06:	2202      	movs	r2, #2
    2b08:	4393      	bics	r3, r2
    2b0a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2b0c:	0020      	movs	r0, r4
    2b0e:	4b08      	ldr	r3, [pc, #32]	; (2b30 <timer_add_task+0xa8>)
    2b10:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2b12:	a801      	add	r0, sp, #4
    2b14:	4b07      	ldr	r3, [pc, #28]	; (2b34 <timer_add_task+0xac>)
    2b16:	4798      	blx	r3
	return ERR_NONE;
    2b18:	2000      	movs	r0, #0
    2b1a:	e7de      	b.n	2ada <timer_add_task+0x52>
    2b1c:	00011044 	.word	0x00011044
    2b20:	000033c1 	.word	0x000033c1
    2b24:	000033c9 	.word	0x000033c9
    2b28:	00002911 	.word	0x00002911
    2b2c:	00002509 	.word	0x00002509
    2b30:	0000422d 	.word	0x0000422d
    2b34:	00002517 	.word	0x00002517

00002b38 <timer_remove_task>:
{
    2b38:	b570      	push	{r4, r5, r6, lr}
    2b3a:	b082      	sub	sp, #8
    2b3c:	0004      	movs	r4, r0
    2b3e:	000d      	movs	r5, r1
	ASSERT(descr && task);
    2b40:	2800      	cmp	r0, #0
    2b42:	d023      	beq.n	2b8c <timer_remove_task+0x54>
    2b44:	2900      	cmp	r1, #0
    2b46:	d01f      	beq.n	2b88 <timer_remove_task+0x50>
    2b48:	2001      	movs	r0, #1
    2b4a:	2295      	movs	r2, #149	; 0x95
    2b4c:	491d      	ldr	r1, [pc, #116]	; (2bc4 <timer_remove_task+0x8c>)
    2b4e:	4b1e      	ldr	r3, [pc, #120]	; (2bc8 <timer_remove_task+0x90>)
    2b50:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2b52:	7e23      	ldrb	r3, [r4, #24]
    2b54:	2201      	movs	r2, #1
    2b56:	4313      	orrs	r3, r2
    2b58:	b2db      	uxtb	r3, r3
    2b5a:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    2b5c:	0026      	movs	r6, r4
    2b5e:	3614      	adds	r6, #20
    2b60:	0029      	movs	r1, r5
    2b62:	0030      	movs	r0, r6
    2b64:	4b19      	ldr	r3, [pc, #100]	; (2bcc <timer_remove_task+0x94>)
    2b66:	4798      	blx	r3
    2b68:	2800      	cmp	r0, #0
    2b6a:	d011      	beq.n	2b90 <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
    2b6c:	0029      	movs	r1, r5
    2b6e:	0030      	movs	r0, r6
    2b70:	4b17      	ldr	r3, [pc, #92]	; (2bd0 <timer_remove_task+0x98>)
    2b72:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2b74:	7e23      	ldrb	r3, [r4, #24]
    2b76:	2201      	movs	r2, #1
    2b78:	4393      	bics	r3, r2
    2b7a:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2b7c:	7e23      	ldrb	r3, [r4, #24]
    2b7e:	079b      	lsls	r3, r3, #30
    2b80:	d411      	bmi.n	2ba6 <timer_remove_task+0x6e>
	return ERR_NONE;
    2b82:	2000      	movs	r0, #0
}
    2b84:	b002      	add	sp, #8
    2b86:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2b88:	2000      	movs	r0, #0
    2b8a:	e7de      	b.n	2b4a <timer_remove_task+0x12>
    2b8c:	2000      	movs	r0, #0
    2b8e:	e7dc      	b.n	2b4a <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2b90:	7e23      	ldrb	r3, [r4, #24]
    2b92:	2201      	movs	r2, #1
    2b94:	4393      	bics	r3, r2
    2b96:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2b98:	3299      	adds	r2, #153	; 0x99
    2b9a:	490a      	ldr	r1, [pc, #40]	; (2bc4 <timer_remove_task+0x8c>)
    2b9c:	4b0a      	ldr	r3, [pc, #40]	; (2bc8 <timer_remove_task+0x90>)
    2b9e:	4798      	blx	r3
		return ERR_NOT_FOUND;
    2ba0:	200a      	movs	r0, #10
    2ba2:	4240      	negs	r0, r0
    2ba4:	e7ee      	b.n	2b84 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    2ba6:	a801      	add	r0, sp, #4
    2ba8:	4b0a      	ldr	r3, [pc, #40]	; (2bd4 <timer_remove_task+0x9c>)
    2baa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2bac:	7e23      	ldrb	r3, [r4, #24]
    2bae:	2202      	movs	r2, #2
    2bb0:	4393      	bics	r3, r2
    2bb2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2bb4:	0020      	movs	r0, r4
    2bb6:	4b08      	ldr	r3, [pc, #32]	; (2bd8 <timer_remove_task+0xa0>)
    2bb8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2bba:	a801      	add	r0, sp, #4
    2bbc:	4b07      	ldr	r3, [pc, #28]	; (2bdc <timer_remove_task+0xa4>)
    2bbe:	4798      	blx	r3
	return ERR_NONE;
    2bc0:	2000      	movs	r0, #0
    2bc2:	e7df      	b.n	2b84 <timer_remove_task+0x4c>
    2bc4:	00011044 	.word	0x00011044
    2bc8:	000033c1 	.word	0x000033c1
    2bcc:	000033c9 	.word	0x000033c9
    2bd0:	00003467 	.word	0x00003467
    2bd4:	00002509 	.word	0x00002509
    2bd8:	0000422d 	.word	0x0000422d
    2bdc:	00002517 	.word	0x00002517

00002be0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    2be0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2be2:	3808      	subs	r0, #8

	descr->stat = 0;
    2be4:	2300      	movs	r3, #0
    2be6:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    2be8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2bea:	2b00      	cmp	r3, #0
    2bec:	d000      	beq.n	2bf0 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    2bee:	4798      	blx	r3
	}
}
    2bf0:	bd10      	pop	{r4, pc}

00002bf2 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    2bf2:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2bf4:	3808      	subs	r0, #8

	descr->stat = 0;
    2bf6:	2300      	movs	r3, #0
    2bf8:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    2bfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d000      	beq.n	2c02 <usart_error+0x10>
		descr->usart_cb.error(descr);
    2c00:	4798      	blx	r3
	}
}
    2c02:	bd10      	pop	{r4, pc}

00002c04 <usart_fill_rx_buffer>:
{
    2c04:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2c06:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    2c08:	302c      	adds	r0, #44	; 0x2c
    2c0a:	4b04      	ldr	r3, [pc, #16]	; (2c1c <usart_fill_rx_buffer+0x18>)
    2c0c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    2c0e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2c10:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    2c12:	2b00      	cmp	r3, #0
    2c14:	d001      	beq.n	2c1a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    2c16:	0020      	movs	r0, r4
    2c18:	4798      	blx	r3
}
    2c1a:	bd10      	pop	{r4, pc}
    2c1c:	00003531 	.word	0x00003531

00002c20 <usart_async_write>:
{
    2c20:	b570      	push	{r4, r5, r6, lr}
    2c22:	0004      	movs	r4, r0
    2c24:	000e      	movs	r6, r1
    2c26:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    2c28:	2800      	cmp	r0, #0
    2c2a:	d01d      	beq.n	2c68 <usart_async_write+0x48>
    2c2c:	2900      	cmp	r1, #0
    2c2e:	d01d      	beq.n	2c6c <usart_async_write+0x4c>
    2c30:	2a00      	cmp	r2, #0
    2c32:	d11d      	bne.n	2c70 <usart_async_write+0x50>
    2c34:	2000      	movs	r0, #0
    2c36:	223c      	movs	r2, #60	; 0x3c
    2c38:	32ff      	adds	r2, #255	; 0xff
    2c3a:	4910      	ldr	r1, [pc, #64]	; (2c7c <usart_async_write+0x5c>)
    2c3c:	4b10      	ldr	r3, [pc, #64]	; (2c80 <usart_async_write+0x60>)
    2c3e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    2c40:	2344      	movs	r3, #68	; 0x44
    2c42:	5ae2      	ldrh	r2, [r4, r3]
    2c44:	3308      	adds	r3, #8
    2c46:	5ae3      	ldrh	r3, [r4, r3]
    2c48:	429a      	cmp	r2, r3
    2c4a:	d113      	bne.n	2c74 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
    2c4c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    2c4e:	234c      	movs	r3, #76	; 0x4c
    2c50:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    2c52:	2200      	movs	r2, #0
    2c54:	3b08      	subs	r3, #8
    2c56:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    2c58:	3b43      	subs	r3, #67	; 0x43
    2c5a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    2c5c:	0020      	movs	r0, r4
    2c5e:	3008      	adds	r0, #8
    2c60:	4b08      	ldr	r3, [pc, #32]	; (2c84 <usart_async_write+0x64>)
    2c62:	4798      	blx	r3
	return (int32_t)length;
    2c64:	0028      	movs	r0, r5
}
    2c66:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    2c68:	2000      	movs	r0, #0
    2c6a:	e7e4      	b.n	2c36 <usart_async_write+0x16>
    2c6c:	2000      	movs	r0, #0
    2c6e:	e7e2      	b.n	2c36 <usart_async_write+0x16>
    2c70:	2001      	movs	r0, #1
    2c72:	e7e0      	b.n	2c36 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    2c74:	201c      	movs	r0, #28
    2c76:	4240      	negs	r0, r0
    2c78:	e7f5      	b.n	2c66 <usart_async_write+0x46>
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	0001105c 	.word	0x0001105c
    2c80:	000033c1 	.word	0x000033c1
    2c84:	00003b7d 	.word	0x00003b7d

00002c88 <usart_process_byte_sent>:
{
    2c88:	b570      	push	{r4, r5, r6, lr}
    2c8a:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    2c8c:	0002      	movs	r2, r0
    2c8e:	3a08      	subs	r2, #8
    2c90:	2344      	movs	r3, #68	; 0x44
    2c92:	5ad3      	ldrh	r3, [r2, r3]
    2c94:	214c      	movs	r1, #76	; 0x4c
    2c96:	5a52      	ldrh	r2, [r2, r1]
    2c98:	4293      	cmp	r3, r2
    2c9a:	d00d      	beq.n	2cb8 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    2c9c:	0002      	movs	r2, r0
    2c9e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    2ca0:	3a08      	subs	r2, #8
    2ca2:	1c5d      	adds	r5, r3, #1
    2ca4:	2044      	movs	r0, #68	; 0x44
    2ca6:	5215      	strh	r5, [r2, r0]
    2ca8:	5cc9      	ldrb	r1, [r1, r3]
    2caa:	0020      	movs	r0, r4
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <usart_process_byte_sent+0x38>)
    2cae:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    2cb0:	0020      	movs	r0, r4
    2cb2:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <usart_process_byte_sent+0x3c>)
    2cb4:	4798      	blx	r3
}
    2cb6:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    2cb8:	4b03      	ldr	r3, [pc, #12]	; (2cc8 <usart_process_byte_sent+0x40>)
    2cba:	4798      	blx	r3
}
    2cbc:	e7fb      	b.n	2cb6 <usart_process_byte_sent+0x2e>
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	00003b75 	.word	0x00003b75
    2cc4:	00003b7d 	.word	0x00003b7d
    2cc8:	00003b85 	.word	0x00003b85

00002ccc <usart_async_read>:
{
    2ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cce:	b085      	sub	sp, #20
    2cd0:	0004      	movs	r4, r0
    2cd2:	000d      	movs	r5, r1
    2cd4:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d017      	beq.n	2d0a <usart_async_read+0x3e>
    2cda:	2900      	cmp	r1, #0
    2cdc:	d017      	beq.n	2d0e <usart_async_read+0x42>
    2cde:	2a00      	cmp	r2, #0
    2ce0:	d117      	bne.n	2d12 <usart_async_read+0x46>
    2ce2:	2000      	movs	r0, #0
    2ce4:	22ac      	movs	r2, #172	; 0xac
    2ce6:	0052      	lsls	r2, r2, #1
    2ce8:	4912      	ldr	r1, [pc, #72]	; (2d34 <usart_async_read+0x68>)
    2cea:	4b13      	ldr	r3, [pc, #76]	; (2d38 <usart_async_read+0x6c>)
    2cec:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    2cee:	a803      	add	r0, sp, #12
    2cf0:	4b12      	ldr	r3, [pc, #72]	; (2d3c <usart_async_read+0x70>)
    2cf2:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2cf4:	3434      	adds	r4, #52	; 0x34
    2cf6:	0020      	movs	r0, r4
    2cf8:	9401      	str	r4, [sp, #4]
    2cfa:	4b11      	ldr	r3, [pc, #68]	; (2d40 <usart_async_read+0x74>)
    2cfc:	4798      	blx	r3
    2cfe:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    2d00:	a803      	add	r0, sp, #12
    2d02:	4b10      	ldr	r3, [pc, #64]	; (2d44 <usart_async_read+0x78>)
    2d04:	4798      	blx	r3
	uint16_t                       was_read = 0;
    2d06:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
    2d08:	e00b      	b.n	2d22 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
    2d0a:	2000      	movs	r0, #0
    2d0c:	e7ea      	b.n	2ce4 <usart_async_read+0x18>
    2d0e:	2000      	movs	r0, #0
    2d10:	e7e8      	b.n	2ce4 <usart_async_read+0x18>
    2d12:	2001      	movs	r0, #1
    2d14:	e7e6      	b.n	2ce4 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    2d16:	3401      	adds	r4, #1
    2d18:	b2a4      	uxth	r4, r4
    2d1a:	1869      	adds	r1, r5, r1
    2d1c:	9801      	ldr	r0, [sp, #4]
    2d1e:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <usart_async_read+0x7c>)
    2d20:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    2d22:	0021      	movs	r1, r4
    2d24:	42a7      	cmp	r7, r4
    2d26:	d901      	bls.n	2d2c <usart_async_read+0x60>
    2d28:	42b4      	cmp	r4, r6
    2d2a:	d3f4      	bcc.n	2d16 <usart_async_read+0x4a>
}
    2d2c:	0020      	movs	r0, r4
    2d2e:	b005      	add	sp, #20
    2d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	0001105c 	.word	0x0001105c
    2d38:	000033c1 	.word	0x000033c1
    2d3c:	00002509 	.word	0x00002509
    2d40:	00003571 	.word	0x00003571
    2d44:	00002517 	.word	0x00002517
    2d48:	000034e5 	.word	0x000034e5

00002d4c <usart_async_init>:
{
    2d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d4e:	0004      	movs	r4, r0
    2d50:	000d      	movs	r5, r1
    2d52:	0016      	movs	r6, r2
    2d54:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2d56:	2800      	cmp	r0, #0
    2d58:	d026      	beq.n	2da8 <usart_async_init+0x5c>
    2d5a:	2900      	cmp	r1, #0
    2d5c:	d026      	beq.n	2dac <usart_async_init+0x60>
    2d5e:	2a00      	cmp	r2, #0
    2d60:	d026      	beq.n	2db0 <usart_async_init+0x64>
    2d62:	2b00      	cmp	r3, #0
    2d64:	d126      	bne.n	2db4 <usart_async_init+0x68>
    2d66:	2000      	movs	r0, #0
    2d68:	223a      	movs	r2, #58	; 0x3a
    2d6a:	4915      	ldr	r1, [pc, #84]	; (2dc0 <usart_async_init+0x74>)
    2d6c:	4b15      	ldr	r3, [pc, #84]	; (2dc4 <usart_async_init+0x78>)
    2d6e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    2d70:	0020      	movs	r0, r4
    2d72:	3034      	adds	r0, #52	; 0x34
    2d74:	003a      	movs	r2, r7
    2d76:	0031      	movs	r1, r6
    2d78:	4b13      	ldr	r3, [pc, #76]	; (2dc8 <usart_async_init+0x7c>)
    2d7a:	4798      	blx	r3
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d11b      	bne.n	2db8 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
    2d80:	0020      	movs	r0, r4
    2d82:	3008      	adds	r0, #8
    2d84:	0029      	movs	r1, r5
    2d86:	4b11      	ldr	r3, [pc, #68]	; (2dcc <usart_async_init+0x80>)
    2d88:	4798      	blx	r3
	if (init_status) {
    2d8a:	2800      	cmp	r0, #0
    2d8c:	d10b      	bne.n	2da6 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    2d8e:	4b10      	ldr	r3, [pc, #64]	; (2dd0 <usart_async_init+0x84>)
    2d90:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    2d92:	4b10      	ldr	r3, [pc, #64]	; (2dd4 <usart_async_init+0x88>)
    2d94:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    2d96:	4b10      	ldr	r3, [pc, #64]	; (2dd8 <usart_async_init+0x8c>)
    2d98:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2d9a:	4b10      	ldr	r3, [pc, #64]	; (2ddc <usart_async_init+0x90>)
    2d9c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    2d9e:	4b10      	ldr	r3, [pc, #64]	; (2de0 <usart_async_init+0x94>)
    2da0:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    2da2:	4b10      	ldr	r3, [pc, #64]	; (2de4 <usart_async_init+0x98>)
    2da4:	6163      	str	r3, [r4, #20]
}
    2da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2da8:	2000      	movs	r0, #0
    2daa:	e7dd      	b.n	2d68 <usart_async_init+0x1c>
    2dac:	2000      	movs	r0, #0
    2dae:	e7db      	b.n	2d68 <usart_async_init+0x1c>
    2db0:	2000      	movs	r0, #0
    2db2:	e7d9      	b.n	2d68 <usart_async_init+0x1c>
    2db4:	2001      	movs	r0, #1
    2db6:	e7d7      	b.n	2d68 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    2db8:	200d      	movs	r0, #13
    2dba:	4240      	negs	r0, r0
    2dbc:	e7f3      	b.n	2da6 <usart_async_init+0x5a>
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	0001105c 	.word	0x0001105c
    2dc4:	000033c1 	.word	0x000033c1
    2dc8:	00003499 	.word	0x00003499
    2dcc:	00003ae9 	.word	0x00003ae9
    2dd0:	00002ccd 	.word	0x00002ccd
    2dd4:	00002c21 	.word	0x00002c21
    2dd8:	00002c89 	.word	0x00002c89
    2ddc:	00002c05 	.word	0x00002c05
    2de0:	00002be1 	.word	0x00002be1
    2de4:	00002bf3 	.word	0x00002bf3

00002de8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2de8:	b510      	push	{r4, lr}
    2dea:	0001      	movs	r1, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2dec:	2000      	movs	r0, #0
    2dee:	e001      	b.n	2df4 <_usb_d_find_ep+0xc>
    2df0:	3001      	adds	r0, #1
    2df2:	b240      	sxtb	r0, r0
    2df4:	2803      	cmp	r0, #3
    2df6:	dc0f      	bgt.n	2e18 <_usb_d_find_ep+0x30>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2df8:	0142      	lsls	r2, r0, #5
    2dfa:	4b09      	ldr	r3, [pc, #36]	; (2e20 <_usb_d_find_ep+0x38>)
    2dfc:	189b      	adds	r3, r3, r2
    2dfe:	785a      	ldrb	r2, [r3, #1]
    2e00:	428a      	cmp	r2, r1
    2e02:	d00b      	beq.n	2e1c <_usb_d_find_ep+0x34>
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2e04:	0143      	lsls	r3, r0, #5
    2e06:	4c06      	ldr	r4, [pc, #24]	; (2e20 <_usb_d_find_ep+0x38>)
    2e08:	5d1b      	ldrb	r3, [r3, r4]
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	d1f0      	bne.n	2df0 <_usb_d_find_ep+0x8>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2e0e:	330f      	adds	r3, #15
    2e10:	400b      	ands	r3, r1
    2e12:	4293      	cmp	r3, r2
    2e14:	d1ec      	bne.n	2df0 <_usb_d_find_ep+0x8>
    2e16:	e001      	b.n	2e1c <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    2e18:	2001      	movs	r0, #1
    2e1a:	4240      	negs	r0, r0
}
    2e1c:	bd10      	pop	{r4, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	20000ee0 	.word	0x20000ee0

00002e24 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2e24:	2000      	movs	r0, #0
    2e26:	4770      	bx	lr

00002e28 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2e28:	b570      	push	{r4, r5, r6, lr}
    2e2a:	0004      	movs	r4, r0
    2e2c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e2e:	4b08      	ldr	r3, [pc, #32]	; (2e50 <usb_d_cb_trans_more+0x28>)
    2e30:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2e32:	0142      	lsls	r2, r0, #5
    2e34:	4b07      	ldr	r3, [pc, #28]	; (2e54 <usb_d_cb_trans_more+0x2c>)
    2e36:	189b      	adds	r3, r3, r2
    2e38:	789b      	ldrb	r3, [r3, #2]
    2e3a:	2b03      	cmp	r3, #3
    2e3c:	d001      	beq.n	2e42 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    2e3e:	2000      	movs	r0, #0
}
    2e40:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    2e42:	4b04      	ldr	r3, [pc, #16]	; (2e54 <usb_d_cb_trans_more+0x2c>)
    2e44:	1898      	adds	r0, r3, r2
    2e46:	6983      	ldr	r3, [r0, #24]
    2e48:	0029      	movs	r1, r5
    2e4a:	0020      	movs	r0, r4
    2e4c:	4798      	blx	r3
    2e4e:	e7f7      	b.n	2e40 <usb_d_cb_trans_more+0x18>
    2e50:	00002de9 	.word	0x00002de9
    2e54:	20000ee0 	.word	0x20000ee0

00002e58 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e5a:	b087      	sub	sp, #28
    2e5c:	0005      	movs	r5, r0
    2e5e:	000f      	movs	r7, r1
    2e60:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e62:	4b4a      	ldr	r3, [pc, #296]	; (2f8c <_usb_d_cb_trans_done+0x134>)
    2e64:	4798      	blx	r3
    2e66:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e68:	0146      	lsls	r6, r0, #5
    2e6a:	4a49      	ldr	r2, [pc, #292]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2e6c:	1996      	adds	r6, r2, r6

	if (code == USB_TRANS_DONE) {
    2e6e:	2f00      	cmp	r7, #0
    2e70:	d151      	bne.n	2f16 <_usb_d_cb_trans_done+0xbe>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2e72:	0013      	movs	r3, r2
    2e74:	0142      	lsls	r2, r0, #5
    2e76:	2000      	movs	r0, #0
    2e78:	70f0      	strb	r0, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e7a:	5cd3      	ldrb	r3, [r2, r3]
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d00e      	beq.n	2e9e <_usb_d_cb_trans_done+0x46>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2e80:	0162      	lsls	r2, r4, #5
    2e82:	4b43      	ldr	r3, [pc, #268]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2e84:	189b      	adds	r3, r3, r2
    2e86:	2201      	movs	r2, #1
    2e88:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2e8a:	0164      	lsls	r4, r4, #5
    2e8c:	4b40      	ldr	r3, [pc, #256]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2e8e:	191c      	adds	r4, r3, r4
    2e90:	69e3      	ldr	r3, [r4, #28]
    2e92:	78e1      	ldrb	r1, [r4, #3]
    2e94:	9a01      	ldr	r2, [sp, #4]
    2e96:	0028      	movs	r0, r5
    2e98:	4798      	blx	r3
}
    2e9a:	b007      	add	sp, #28
    2e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t state   = ept->xfer.hdr.state;
    2e9e:	78b3      	ldrb	r3, [r6, #2]
    2ea0:	240c      	movs	r4, #12
    2ea2:	5734      	ldrsb	r4, [r6, r4]
	if (state == USB_EP_S_X_DATA) {
    2ea4:	2b03      	cmp	r3, #3
    2ea6:	d008      	beq.n	2eba <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2ea8:	0032      	movs	r2, r6
    2eaa:	320c      	adds	r2, #12
    2eac:	7870      	ldrb	r0, [r6, #1]
    2eae:	2100      	movs	r1, #0
    2eb0:	69f3      	ldr	r3, [r6, #28]
    2eb2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2eb4:	2302      	movs	r3, #2
    2eb6:	70b3      	strb	r3, [r6, #2]
    2eb8:	e7ef      	b.n	2e9a <_usb_d_cb_trans_done+0x42>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2eba:	7870      	ldrb	r0, [r6, #1]
    2ebc:	0032      	movs	r2, r6
    2ebe:	320c      	adds	r2, #12
    2ec0:	2101      	movs	r1, #1
    2ec2:	69f3      	ldr	r3, [r6, #28]
    2ec4:	4798      	blx	r3
		if (err) {
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d010      	beq.n	2eec <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2eca:	2305      	movs	r3, #5
    2ecc:	70b3      	strb	r3, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2ece:	3b03      	subs	r3, #3
    2ed0:	70f3      	strb	r3, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2ed2:	2c00      	cmp	r4, #0
    2ed4:	db08      	blt.n	2ee8 <_usb_d_cb_trans_done+0x90>
    2ed6:	7873      	ldrb	r3, [r6, #1]
    2ed8:	2080      	movs	r0, #128	; 0x80
    2eda:	4240      	negs	r0, r0
    2edc:	4318      	orrs	r0, r3
    2ede:	b2c0      	uxtb	r0, r0
    2ee0:	2101      	movs	r1, #1
    2ee2:	4b2c      	ldr	r3, [pc, #176]	; (2f94 <_usb_d_cb_trans_done+0x13c>)
    2ee4:	4798      	blx	r3
    2ee6:	e7d8      	b.n	2e9a <_usb_d_cb_trans_done+0x42>
    2ee8:	7870      	ldrb	r0, [r6, #1]
    2eea:	e7f9      	b.n	2ee0 <_usb_d_cb_trans_done+0x88>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2eec:	2304      	movs	r3, #4
    2eee:	70b3      	strb	r3, [r6, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2ef0:	7871      	ldrb	r1, [r6, #1]
	struct usb_d_transfer trans
    2ef2:	2200      	movs	r2, #0
    2ef4:	9203      	str	r2, [sp, #12]
    2ef6:	9204      	str	r2, [sp, #16]
    2ef8:	2c00      	cmp	r4, #0
    2efa:	db09      	blt.n	2f10 <_usb_d_cb_trans_done+0xb8>
    2efc:	3b84      	subs	r3, #132	; 0x84
    2efe:	430b      	orrs	r3, r1
    2f00:	b2da      	uxtb	r2, r3
    2f02:	a803      	add	r0, sp, #12
    2f04:	7202      	strb	r2, [r0, #8]
    2f06:	2301      	movs	r3, #1
    2f08:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    2f0a:	4b23      	ldr	r3, [pc, #140]	; (2f98 <_usb_d_cb_trans_done+0x140>)
    2f0c:	4798      	blx	r3
    2f0e:	e7c4      	b.n	2e9a <_usb_d_cb_trans_done+0x42>
	struct usb_d_transfer trans
    2f10:	220f      	movs	r2, #15
    2f12:	400a      	ands	r2, r1
    2f14:	e7f5      	b.n	2f02 <_usb_d_cb_trans_done+0xaa>
	} else if (code == USB_TRANS_STALL) {
    2f16:	2f01      	cmp	r7, #1
    2f18:	d00a      	beq.n	2f30 <_usb_d_cb_trans_done+0xd8>
	} else if (code == USB_TRANS_ABORT) {
    2f1a:	2f02      	cmp	r7, #2
    2f1c:	d01d      	beq.n	2f5a <_usb_d_cb_trans_done+0x102>
	} else if (code == USB_TRANS_RESET) {
    2f1e:	2f03      	cmp	r7, #3
    2f20:	d02c      	beq.n	2f7c <_usb_d_cb_trans_done+0x124>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2f22:	0142      	lsls	r2, r0, #5
    2f24:	4b1a      	ldr	r3, [pc, #104]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2f26:	189b      	adds	r3, r3, r2
    2f28:	2206      	movs	r2, #6
    2f2a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2f2c:	70da      	strb	r2, [r3, #3]
    2f2e:	e7ac      	b.n	2e8a <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2f30:	4b17      	ldr	r3, [pc, #92]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2f32:	0142      	lsls	r2, r0, #5
    2f34:	1899      	adds	r1, r3, r2
    2f36:	2002      	movs	r0, #2
    2f38:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2f3a:	5cd3      	ldrb	r3, [r2, r3]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d005      	beq.n	2f4c <_usb_d_cb_trans_done+0xf4>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2f40:	0162      	lsls	r2, r4, #5
    2f42:	4b13      	ldr	r3, [pc, #76]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2f44:	189b      	adds	r3, r3, r2
    2f46:	2205      	movs	r2, #5
    2f48:	709a      	strb	r2, [r3, #2]
    2f4a:	e79e      	b.n	2e8a <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2f4c:	2202      	movs	r2, #2
    2f4e:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2f50:	2100      	movs	r1, #0
    2f52:	0028      	movs	r0, r5
    2f54:	4b0f      	ldr	r3, [pc, #60]	; (2f94 <_usb_d_cb_trans_done+0x13c>)
    2f56:	4798      	blx	r3
    2f58:	e797      	b.n	2e8a <_usb_d_cb_trans_done+0x32>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2f5a:	4b0d      	ldr	r3, [pc, #52]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2f5c:	0142      	lsls	r2, r0, #5
    2f5e:	1899      	adds	r1, r3, r2
    2f60:	2004      	movs	r0, #4
    2f62:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2f64:	5cd3      	ldrb	r3, [r2, r3]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d005      	beq.n	2f76 <_usb_d_cb_trans_done+0x11e>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2f6a:	0162      	lsls	r2, r4, #5
    2f6c:	4b08      	ldr	r3, [pc, #32]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2f6e:	189b      	adds	r3, r3, r2
    2f70:	2201      	movs	r2, #1
    2f72:	709a      	strb	r2, [r3, #2]
    2f74:	e789      	b.n	2e8a <_usb_d_cb_trans_done+0x32>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2f76:	2302      	movs	r3, #2
    2f78:	708b      	strb	r3, [r1, #2]
			return;
    2f7a:	e78e      	b.n	2e9a <_usb_d_cb_trans_done+0x42>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2f7c:	0142      	lsls	r2, r0, #5
    2f7e:	4b04      	ldr	r3, [pc, #16]	; (2f90 <_usb_d_cb_trans_done+0x138>)
    2f80:	189b      	adds	r3, r3, r2
    2f82:	2200      	movs	r2, #0
    2f84:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2f86:	3205      	adds	r2, #5
    2f88:	70da      	strb	r2, [r3, #3]
    2f8a:	e77e      	b.n	2e8a <_usb_d_cb_trans_done+0x32>
    2f8c:	00002de9 	.word	0x00002de9
    2f90:	20000ee0 	.word	0x20000ee0
    2f94:	000051b5 	.word	0x000051b5
    2f98:	00005385 	.word	0x00005385

00002f9c <usb_d_cb_trans_setup>:
{
    2f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f9e:	46c6      	mov	lr, r8
    2fa0:	b500      	push	{lr}
    2fa2:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2fa4:	4b1f      	ldr	r3, [pc, #124]	; (3024 <usb_d_cb_trans_setup+0x88>)
    2fa6:	4798      	blx	r3
    2fa8:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    2faa:	0143      	lsls	r3, r0, #5
    2fac:	3308      	adds	r3, #8
    2fae:	4c1e      	ldr	r4, [pc, #120]	; (3028 <usb_d_cb_trans_setup+0x8c>)
    2fb0:	18e4      	adds	r4, r4, r3
    2fb2:	3404      	adds	r4, #4
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2fb4:	0021      	movs	r1, r4
    2fb6:	0028      	movs	r0, r5
    2fb8:	4b1c      	ldr	r3, [pc, #112]	; (302c <usb_d_cb_trans_setup+0x90>)
    2fba:	4798      	blx	r3
    2fbc:	b2c0      	uxtb	r0, r0
	if (n != 8) {
    2fbe:	2808      	cmp	r0, #8
    2fc0:	d00c      	beq.n	2fdc <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2fc2:	2101      	movs	r1, #1
    2fc4:	0028      	movs	r0, r5
    2fc6:	4c1a      	ldr	r4, [pc, #104]	; (3030 <usb_d_cb_trans_setup+0x94>)
    2fc8:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2fca:	2080      	movs	r0, #128	; 0x80
    2fcc:	4240      	negs	r0, r0
    2fce:	4328      	orrs	r0, r5
    2fd0:	b2c0      	uxtb	r0, r0
    2fd2:	2101      	movs	r1, #1
    2fd4:	47a0      	blx	r4
}
    2fd6:	bc04      	pop	{r2}
    2fd8:	4690      	mov	r8, r2
    2fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2fdc:	2100      	movs	r1, #0
    2fde:	0028      	movs	r0, r5
    2fe0:	4b13      	ldr	r3, [pc, #76]	; (3030 <usb_d_cb_trans_setup+0x94>)
    2fe2:	4698      	mov	r8, r3
    2fe4:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2fe6:	2780      	movs	r7, #128	; 0x80
    2fe8:	427f      	negs	r7, r7
    2fea:	432f      	orrs	r7, r5
    2fec:	b2ff      	uxtb	r7, r7
    2fee:	2100      	movs	r1, #0
    2ff0:	0038      	movs	r0, r7
    2ff2:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ff4:	0172      	lsls	r2, r6, #5
    2ff6:	4b0c      	ldr	r3, [pc, #48]	; (3028 <usb_d_cb_trans_setup+0x8c>)
    2ff8:	189b      	adds	r3, r3, r2
    2ffa:	2201      	movs	r2, #1
    2ffc:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2ffe:	695b      	ldr	r3, [r3, #20]
    3000:	0021      	movs	r1, r4
    3002:	0028      	movs	r0, r5
    3004:	4798      	blx	r3
    3006:	2800      	cmp	r0, #0
    3008:	d1e5      	bne.n	2fd6 <usb_d_cb_trans_setup+0x3a>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    300a:	0176      	lsls	r6, r6, #5
    300c:	4b06      	ldr	r3, [pc, #24]	; (3028 <usb_d_cb_trans_setup+0x8c>)
    300e:	199e      	adds	r6, r3, r6
    3010:	2305      	movs	r3, #5
    3012:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3014:	2101      	movs	r1, #1
    3016:	0028      	movs	r0, r5
    3018:	4c05      	ldr	r4, [pc, #20]	; (3030 <usb_d_cb_trans_setup+0x94>)
    301a:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    301c:	2101      	movs	r1, #1
    301e:	0038      	movs	r0, r7
    3020:	47a0      	blx	r4
    3022:	e7d8      	b.n	2fd6 <usb_d_cb_trans_setup+0x3a>
    3024:	00002de9 	.word	0x00002de9
    3028:	20000ee0 	.word	0x20000ee0
    302c:	0000530d 	.word	0x0000530d
    3030:	000051b5 	.word	0x000051b5

00003034 <usb_d_init>:

int32_t usb_d_init(void)
{
    3034:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    3036:	4b12      	ldr	r3, [pc, #72]	; (3080 <usb_d_init+0x4c>)
    3038:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    303a:	2800      	cmp	r0, #0
    303c:	db1e      	blt.n	307c <usb_d_init+0x48>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    303e:	2280      	movs	r2, #128	; 0x80
    3040:	2100      	movs	r1, #0
    3042:	4810      	ldr	r0, [pc, #64]	; (3084 <usb_d_init+0x50>)
    3044:	4b10      	ldr	r3, [pc, #64]	; (3088 <usb_d_init+0x54>)
    3046:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3048:	2200      	movs	r2, #0
    304a:	e00a      	b.n	3062 <usb_d_init+0x2e>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    304c:	0151      	lsls	r1, r2, #5
    304e:	4b0d      	ldr	r3, [pc, #52]	; (3084 <usb_d_init+0x50>)
    3050:	185b      	adds	r3, r3, r1
    3052:	21ff      	movs	r1, #255	; 0xff
    3054:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3056:	490d      	ldr	r1, [pc, #52]	; (308c <usb_d_init+0x58>)
    3058:	6159      	str	r1, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    305a:	6199      	str	r1, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    305c:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    305e:	3201      	adds	r2, #1
    3060:	b2d2      	uxtb	r2, r2
    3062:	2a03      	cmp	r2, #3
    3064:	d9f2      	bls.n	304c <usb_d_init+0x18>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3066:	490a      	ldr	r1, [pc, #40]	; (3090 <usb_d_init+0x5c>)
    3068:	2000      	movs	r0, #0
    306a:	4c0a      	ldr	r4, [pc, #40]	; (3094 <usb_d_init+0x60>)
    306c:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    306e:	490a      	ldr	r1, [pc, #40]	; (3098 <usb_d_init+0x64>)
    3070:	2001      	movs	r0, #1
    3072:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3074:	4909      	ldr	r1, [pc, #36]	; (309c <usb_d_init+0x68>)
    3076:	2002      	movs	r0, #2
    3078:	47a0      	blx	r4
	return ERR_NONE;
    307a:	2000      	movs	r0, #0
}
    307c:	bd10      	pop	{r4, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	00004b81 	.word	0x00004b81
    3084:	20000ee0 	.word	0x20000ee0
    3088:	0000c0dd 	.word	0x0000c0dd
    308c:	00002e25 	.word	0x00002e25
    3090:	00002f9d 	.word	0x00002f9d
    3094:	000055c9 	.word	0x000055c9
    3098:	00002e29 	.word	0x00002e29
    309c:	00002e59 	.word	0x00002e59

000030a0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    30a0:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    30a2:	4b01      	ldr	r3, [pc, #4]	; (30a8 <usb_d_register_callback+0x8>)
    30a4:	4798      	blx	r3
}
    30a6:	bd10      	pop	{r4, pc}
    30a8:	000055a5 	.word	0x000055a5

000030ac <usb_d_enable>:

int32_t usb_d_enable(void)
{
    30ac:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    30ae:	4b01      	ldr	r3, [pc, #4]	; (30b4 <usb_d_enable+0x8>)
    30b0:	4798      	blx	r3
}
    30b2:	bd10      	pop	{r4, pc}
    30b4:	00004c29 	.word	0x00004c29

000030b8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    30b8:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    30ba:	4b01      	ldr	r3, [pc, #4]	; (30c0 <usb_d_attach+0x8>)
    30bc:	4798      	blx	r3
}
    30be:	bd10      	pop	{r4, pc}
    30c0:	00004c79 	.word	0x00004c79

000030c4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    30c4:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    30c6:	4b01      	ldr	r3, [pc, #4]	; (30cc <usb_d_set_address+0x8>)
    30c8:	4798      	blx	r3
}
    30ca:	bd10      	pop	{r4, pc}
    30cc:	00004c89 	.word	0x00004c89

000030d0 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    30d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30d2:	0005      	movs	r5, r0
    30d4:	000e      	movs	r6, r1
    30d6:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    30d8:	4b0f      	ldr	r3, [pc, #60]	; (3118 <usb_d_ep_init+0x48>)
    30da:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    30dc:	2800      	cmp	r0, #0
    30de:	da14      	bge.n	310a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    30e0:	20ff      	movs	r0, #255	; 0xff
    30e2:	4b0d      	ldr	r3, [pc, #52]	; (3118 <usb_d_ep_init+0x48>)
    30e4:	4798      	blx	r3
    30e6:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    30e8:	db12      	blt.n	3110 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    30ea:	003a      	movs	r2, r7
    30ec:	0031      	movs	r1, r6
    30ee:	0028      	movs	r0, r5
    30f0:	4b0a      	ldr	r3, [pc, #40]	; (311c <usb_d_ep_init+0x4c>)
    30f2:	4798      	blx	r3
	if (rc < 0) {
    30f4:	2800      	cmp	r0, #0
    30f6:	db07      	blt.n	3108 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    30f8:	4a09      	ldr	r2, [pc, #36]	; (3120 <usb_d_ep_init+0x50>)
    30fa:	0164      	lsls	r4, r4, #5
    30fc:	1913      	adds	r3, r2, r4
    30fe:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3100:	2303      	movs	r3, #3
    3102:	401e      	ands	r6, r3
    3104:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    3106:	2000      	movs	r0, #0
}
    3108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    310a:	2014      	movs	r0, #20
    310c:	4240      	negs	r0, r0
    310e:	e7fb      	b.n	3108 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    3110:	2015      	movs	r0, #21
    3112:	4240      	negs	r0, r0
    3114:	e7f8      	b.n	3108 <usb_d_ep_init+0x38>
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	00002de9 	.word	0x00002de9
    311c:	00004c9d 	.word	0x00004c9d
    3120:	20000ee0 	.word	0x20000ee0

00003124 <usb_d_ep0_init>:
{
    3124:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3126:	b282      	uxth	r2, r0
    3128:	2100      	movs	r1, #0
    312a:	2000      	movs	r0, #0
    312c:	4b01      	ldr	r3, [pc, #4]	; (3134 <usb_d_ep0_init+0x10>)
    312e:	4798      	blx	r3
}
    3130:	bd10      	pop	{r4, pc}
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	000030d1 	.word	0x000030d1

00003138 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3138:	b570      	push	{r4, r5, r6, lr}
    313a:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    313c:	4b06      	ldr	r3, [pc, #24]	; (3158 <usb_d_ep_deinit+0x20>)
    313e:	4798      	blx	r3
    3140:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    3142:	db07      	blt.n	3154 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3144:	0028      	movs	r0, r5
    3146:	4b05      	ldr	r3, [pc, #20]	; (315c <usb_d_ep_deinit+0x24>)
    3148:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    314a:	0164      	lsls	r4, r4, #5
    314c:	4b04      	ldr	r3, [pc, #16]	; (3160 <usb_d_ep_deinit+0x28>)
    314e:	191c      	adds	r4, r3, r4
    3150:	23ff      	movs	r3, #255	; 0xff
    3152:	7063      	strb	r3, [r4, #1]
}
    3154:	bd70      	pop	{r4, r5, r6, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	00002de9 	.word	0x00002de9
    315c:	00004de9 	.word	0x00004de9
    3160:	20000ee0 	.word	0x20000ee0

00003164 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3164:	b570      	push	{r4, r5, r6, lr}
    3166:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    3168:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <usb_d_ep_enable+0x44>)
    316a:	4798      	blx	r3
    316c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    316e:	db17      	blt.n	31a0 <usb_d_ep_enable+0x3c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3170:	0143      	lsls	r3, r0, #5
    3172:	4a0e      	ldr	r2, [pc, #56]	; (31ac <usb_d_ep_enable+0x48>)
    3174:	5c9b      	ldrb	r3, [r3, r2]
    3176:	2b00      	cmp	r3, #0
    3178:	d10a      	bne.n	3190 <usb_d_ep_enable+0x2c>
    317a:	2102      	movs	r1, #2
    317c:	0162      	lsls	r2, r4, #5
    317e:	4b0b      	ldr	r3, [pc, #44]	; (31ac <usb_d_ep_enable+0x48>)
    3180:	189b      	adds	r3, r3, r2
    3182:	7099      	strb	r1, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3184:	0028      	movs	r0, r5
    3186:	4b0a      	ldr	r3, [pc, #40]	; (31b0 <usb_d_ep_enable+0x4c>)
    3188:	4798      	blx	r3
	if (rc < 0) {
    318a:	2800      	cmp	r0, #0
    318c:	db02      	blt.n	3194 <usb_d_ep_enable+0x30>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    318e:	bd70      	pop	{r4, r5, r6, pc}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3190:	2101      	movs	r1, #1
    3192:	e7f3      	b.n	317c <usb_d_ep_enable+0x18>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3194:	0164      	lsls	r4, r4, #5
    3196:	4b05      	ldr	r3, [pc, #20]	; (31ac <usb_d_ep_enable+0x48>)
    3198:	191c      	adds	r4, r3, r4
    319a:	2300      	movs	r3, #0
    319c:	70a3      	strb	r3, [r4, #2]
    319e:	e7f6      	b.n	318e <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    31a0:	2012      	movs	r0, #18
    31a2:	4240      	negs	r0, r0
    31a4:	e7f3      	b.n	318e <usb_d_ep_enable+0x2a>
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	00002de9 	.word	0x00002de9
    31ac:	20000ee0 	.word	0x20000ee0
    31b0:	00004ead 	.word	0x00004ead

000031b4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    31b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31b6:	46d6      	mov	lr, sl
    31b8:	464f      	mov	r7, r9
    31ba:	4646      	mov	r6, r8
    31bc:	b5c0      	push	{r6, r7, lr}
    31be:	b086      	sub	sp, #24
    31c0:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    31c2:	7a06      	ldrb	r6, [r0, #8]
    31c4:	0030      	movs	r0, r6
    31c6:	4b3f      	ldr	r3, [pc, #252]	; (32c4 <usb_d_ep_transfer+0x110>)
    31c8:	4798      	blx	r3
    31ca:	0007      	movs	r7, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    31cc:	09f6      	lsrs	r6, r6, #7
    31ce:	7a6b      	ldrb	r3, [r5, #9]
    31d0:	1e5a      	subs	r2, r3, #1
    31d2:	4193      	sbcs	r3, r2
    31d4:	b2dc      	uxtb	r4, r3
	uint32_t              len = xfer->size;
    31d6:	686b      	ldr	r3, [r5, #4]
    31d8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    31da:	2800      	cmp	r0, #0
    31dc:	db6b      	blt.n	32b6 <usb_d_ep_transfer+0x102>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    31de:	a804      	add	r0, sp, #16
    31e0:	4b39      	ldr	r3, [pc, #228]	; (32c8 <usb_d_ep_transfer+0x114>)
    31e2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    31e4:	017a      	lsls	r2, r7, #5
    31e6:	4b39      	ldr	r3, [pc, #228]	; (32cc <usb_d_ep_transfer+0x118>)
    31e8:	189b      	adds	r3, r3, r2
    31ea:	789a      	ldrb	r2, [r3, #2]
    31ec:	2317      	movs	r3, #23
    31ee:	446b      	add	r3, sp
    31f0:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    31f2:	781b      	ldrb	r3, [r3, #0]
    31f4:	2b01      	cmp	r3, #1
    31f6:	d00e      	beq.n	3216 <usb_d_ep_transfer+0x62>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    31f8:	a804      	add	r0, sp, #16
    31fa:	4b35      	ldr	r3, [pc, #212]	; (32d0 <usb_d_ep_transfer+0x11c>)
    31fc:	4798      	blx	r3
		switch (state) {
    31fe:	2317      	movs	r3, #23
    3200:	446b      	add	r3, sp
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	b2db      	uxtb	r3, r3
    3206:	2b05      	cmp	r3, #5
    3208:	d02b      	beq.n	3262 <usb_d_ep_transfer+0xae>
    320a:	2b06      	cmp	r3, #6
    320c:	d056      	beq.n	32bc <usb_d_ep_transfer+0x108>
    320e:	2b00      	cmp	r3, #0
    3210:	d029      	beq.n	3266 <usb_d_ep_transfer+0xb2>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    3212:	2001      	movs	r0, #1
    3214:	e01f      	b.n	3256 <usb_d_ep_transfer+0xa2>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3216:	4b2d      	ldr	r3, [pc, #180]	; (32cc <usb_d_ep_transfer+0x118>)
    3218:	4699      	mov	r9, r3
    321a:	017b      	lsls	r3, r7, #5
    321c:	469a      	mov	sl, r3
    321e:	464b      	mov	r3, r9
    3220:	4453      	add	r3, sl
    3222:	2203      	movs	r2, #3
    3224:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3226:	a804      	add	r0, sp, #16
    3228:	4b29      	ldr	r3, [pc, #164]	; (32d0 <usb_d_ep_transfer+0x11c>)
    322a:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    322c:	464b      	mov	r3, r9
    322e:	4652      	mov	r2, sl
    3230:	5cd3      	ldrb	r3, [r2, r3]
    3232:	2b00      	cmp	r3, #0
    3234:	d01a      	beq.n	326c <usb_d_ep_transfer+0xb8>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3236:	7a29      	ldrb	r1, [r5, #8]
    3238:	682b      	ldr	r3, [r5, #0]
    323a:	9301      	str	r3, [sp, #4]
	struct usb_d_transfer trans
    323c:	4643      	mov	r3, r8
    323e:	9302      	str	r3, [sp, #8]
    3240:	2e00      	cmp	r6, #0
    3242:	d035      	beq.n	32b0 <usb_d_ep_transfer+0xfc>
    3244:	2280      	movs	r2, #128	; 0x80
    3246:	4252      	negs	r2, r2
    3248:	430a      	orrs	r2, r1
    324a:	b2d2      	uxtb	r2, r2
    324c:	a801      	add	r0, sp, #4
    324e:	7202      	strb	r2, [r0, #8]
    3250:	7244      	strb	r4, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    3252:	4b20      	ldr	r3, [pc, #128]	; (32d4 <usb_d_ep_transfer+0x120>)
    3254:	4798      	blx	r3
	return rc;
}
    3256:	b006      	add	sp, #24
    3258:	bc1c      	pop	{r2, r3, r4}
    325a:	4690      	mov	r8, r2
    325c:	4699      	mov	r9, r3
    325e:	46a2      	mov	sl, r4
    3260:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return USB_HALTED;
    3262:	2002      	movs	r0, #2
    3264:	e7f7      	b.n	3256 <usb_d_ep_transfer+0xa2>
			return -USB_ERR_FUNC;
    3266:	2013      	movs	r0, #19
    3268:	4240      	negs	r0, r0
    326a:	e7f4      	b.n	3256 <usb_d_ep_transfer+0xa2>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    326c:	017b      	lsls	r3, r7, #5
    326e:	4a17      	ldr	r2, [pc, #92]	; (32cc <usb_d_ep_transfer+0x118>)
    3270:	18d2      	adds	r2, r2, r3
    3272:	7c93      	ldrb	r3, [r2, #18]
    3274:	7cd4      	ldrb	r4, [r2, #19]
    3276:	0224      	lsls	r4, r4, #8
    3278:	191b      	adds	r3, r3, r4
    327a:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    327c:	2b00      	cmp	r3, #0
    327e:	d106      	bne.n	328e <usb_d_ep_transfer+0xda>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3280:	2304      	movs	r3, #4
    3282:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    3284:	2300      	movs	r3, #0
    3286:	4698      	mov	r8, r3
			zlp                 = true;
    3288:	2401      	movs	r4, #1
			dir                 = true;
    328a:	2601      	movs	r6, #1
    328c:	e7d3      	b.n	3236 <usb_d_ep_transfer+0x82>
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    328e:	017f      	lsls	r7, r7, #5
    3290:	4a0e      	ldr	r2, [pc, #56]	; (32cc <usb_d_ep_transfer+0x118>)
    3292:	19d7      	adds	r7, r2, r7
    3294:	220c      	movs	r2, #12
    3296:	56ba      	ldrsb	r2, [r7, r2]
    3298:	0fd6      	lsrs	r6, r2, #31
			if (len > req_len) {
    329a:	4598      	cmp	r8, r3
    329c:	d900      	bls.n	32a0 <usb_d_ep_transfer+0xec>
				len = req_len;
    329e:	4698      	mov	r8, r3
			if (dir) {
    32a0:	2a00      	cmp	r2, #0
    32a2:	db01      	blt.n	32a8 <usb_d_ep_transfer+0xf4>
				zlp = false;
    32a4:	2400      	movs	r4, #0
    32a6:	e7c6      	b.n	3236 <usb_d_ep_transfer+0x82>
				zlp = (req_len > len);
    32a8:	4598      	cmp	r8, r3
    32aa:	419b      	sbcs	r3, r3
    32ac:	425c      	negs	r4, r3
    32ae:	e7c2      	b.n	3236 <usb_d_ep_transfer+0x82>
	struct usb_d_transfer trans
    32b0:	220f      	movs	r2, #15
    32b2:	400a      	ands	r2, r1
    32b4:	e7ca      	b.n	324c <usb_d_ep_transfer+0x98>
		return -USB_ERR_PARAM;
    32b6:	2012      	movs	r0, #18
    32b8:	4240      	negs	r0, r0
    32ba:	e7cc      	b.n	3256 <usb_d_ep_transfer+0xa2>
			return -USB_ERROR;
    32bc:	2010      	movs	r0, #16
    32be:	4240      	negs	r0, r0
    32c0:	e7c9      	b.n	3256 <usb_d_ep_transfer+0xa2>
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	00002de9 	.word	0x00002de9
    32c8:	00002509 	.word	0x00002509
    32cc:	20000ee0 	.word	0x20000ee0
    32d0:	00002517 	.word	0x00002517
    32d4:	00005385 	.word	0x00005385

000032d8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    32d8:	b570      	push	{r4, r5, r6, lr}
    32da:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    32dc:	4b07      	ldr	r3, [pc, #28]	; (32fc <usb_d_ep_abort+0x24>)
    32de:	4798      	blx	r3
    32e0:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    32e2:	db09      	blt.n	32f8 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    32e4:	0028      	movs	r0, r5
    32e6:	4b06      	ldr	r3, [pc, #24]	; (3300 <usb_d_ep_abort+0x28>)
    32e8:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    32ea:	0164      	lsls	r4, r4, #5
    32ec:	4b05      	ldr	r3, [pc, #20]	; (3304 <usb_d_ep_abort+0x2c>)
    32ee:	191c      	adds	r4, r3, r4
    32f0:	2301      	movs	r3, #1
    32f2:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    32f4:	3303      	adds	r3, #3
    32f6:	70e3      	strb	r3, [r4, #3]
}
    32f8:	bd70      	pop	{r4, r5, r6, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	00002de9 	.word	0x00002de9
    3300:	00005561 	.word	0x00005561
    3304:	20000ee0 	.word	0x20000ee0

00003308 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3308:	b570      	push	{r4, r5, r6, lr}
    330a:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    330c:	2900      	cmp	r1, #0
    330e:	d005      	beq.n	331c <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    3310:	2901      	cmp	r1, #1
    3312:	d024      	beq.n	335e <usb_d_ep_halt+0x56>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3314:	2102      	movs	r1, #2
    3316:	4b13      	ldr	r3, [pc, #76]	; (3364 <usb_d_ep_halt+0x5c>)
    3318:	4798      	blx	r3
	}
}
    331a:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    331c:	4b12      	ldr	r3, [pc, #72]	; (3368 <usb_d_ep_halt+0x60>)
    331e:	4798      	blx	r3
    3320:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    3322:	db19      	blt.n	3358 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3324:	2102      	movs	r1, #2
    3326:	0020      	movs	r0, r4
    3328:	4b0e      	ldr	r3, [pc, #56]	; (3364 <usb_d_ep_halt+0x5c>)
    332a:	4798      	blx	r3
    332c:	2800      	cmp	r0, #0
    332e:	d0f4      	beq.n	331a <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3330:	2100      	movs	r1, #0
    3332:	0020      	movs	r0, r4
    3334:	4b0b      	ldr	r3, [pc, #44]	; (3364 <usb_d_ep_halt+0x5c>)
    3336:	4798      	blx	r3
		if (rc < 0) {
    3338:	2800      	cmp	r0, #0
    333a:	dbee      	blt.n	331a <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    333c:	016d      	lsls	r5, r5, #5
    333e:	4b0b      	ldr	r3, [pc, #44]	; (336c <usb_d_ep_halt+0x64>)
    3340:	195d      	adds	r5, r3, r5
    3342:	2301      	movs	r3, #1
    3344:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3346:	3302      	adds	r3, #2
    3348:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    334a:	69eb      	ldr	r3, [r5, #28]
    334c:	2200      	movs	r2, #0
    334e:	2103      	movs	r1, #3
    3350:	0020      	movs	r0, r4
    3352:	4798      	blx	r3
	return ERR_NONE;
    3354:	2000      	movs	r0, #0
    3356:	e7e0      	b.n	331a <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    3358:	2012      	movs	r0, #18
    335a:	4240      	negs	r0, r0
		return _usb_d_ep_halt_clr(ep);
    335c:	e7dd      	b.n	331a <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    335e:	4b01      	ldr	r3, [pc, #4]	; (3364 <usb_d_ep_halt+0x5c>)
    3360:	4798      	blx	r3
    3362:	e7da      	b.n	331a <usb_d_ep_halt+0x12>
    3364:	000051b5 	.word	0x000051b5
    3368:	00002de9 	.word	0x00002de9
    336c:	20000ee0 	.word	0x20000ee0

00003370 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3370:	b570      	push	{r4, r5, r6, lr}
    3372:	000d      	movs	r5, r1
    3374:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    3376:	4b0f      	ldr	r3, [pc, #60]	; (33b4 <usb_d_ep_register_callback+0x44>)
    3378:	4798      	blx	r3
    337a:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    337c:	2c00      	cmp	r4, #0
    337e:	d008      	beq.n	3392 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    3380:	2b00      	cmp	r3, #0
    3382:	db05      	blt.n	3390 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    3384:	2d01      	cmp	r5, #1
    3386:	d00b      	beq.n	33a0 <usb_d_ep_register_callback+0x30>
    3388:	2d00      	cmp	r5, #0
    338a:	d004      	beq.n	3396 <usb_d_ep_register_callback+0x26>
    338c:	2d02      	cmp	r5, #2
    338e:	d00c      	beq.n	33aa <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    3390:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3392:	4c09      	ldr	r4, [pc, #36]	; (33b8 <usb_d_ep_register_callback+0x48>)
    3394:	e7f4      	b.n	3380 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3396:	0140      	lsls	r0, r0, #5
    3398:	4b08      	ldr	r3, [pc, #32]	; (33bc <usb_d_ep_register_callback+0x4c>)
    339a:	1818      	adds	r0, r3, r0
    339c:	6144      	str	r4, [r0, #20]
		break;
    339e:	e7f7      	b.n	3390 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    33a0:	0140      	lsls	r0, r0, #5
    33a2:	4b06      	ldr	r3, [pc, #24]	; (33bc <usb_d_ep_register_callback+0x4c>)
    33a4:	1818      	adds	r0, r3, r0
    33a6:	6184      	str	r4, [r0, #24]
		break;
    33a8:	e7f2      	b.n	3390 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    33aa:	0140      	lsls	r0, r0, #5
    33ac:	4b03      	ldr	r3, [pc, #12]	; (33bc <usb_d_ep_register_callback+0x4c>)
    33ae:	1818      	adds	r0, r3, r0
    33b0:	61c4      	str	r4, [r0, #28]
		break;
    33b2:	e7ed      	b.n	3390 <usb_d_ep_register_callback+0x20>
    33b4:	00002de9 	.word	0x00002de9
    33b8:	00002e25 	.word	0x00002e25
    33bc:	20000ee0 	.word	0x20000ee0

000033c0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    33c0:	2800      	cmp	r0, #0
    33c2:	d100      	bne.n	33c6 <assert+0x6>
		__asm("BKPT #0");
    33c4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    33c6:	4770      	bx	lr

000033c8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    33c8:	6803      	ldr	r3, [r0, #0]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d003      	beq.n	33d6 <is_list_element+0xe>
		if (it == element) {
    33ce:	428b      	cmp	r3, r1
    33d0:	d003      	beq.n	33da <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	e7f9      	b.n	33ca <is_list_element+0x2>
			return true;
		}
	}

	return false;
    33d6:	2000      	movs	r0, #0
}
    33d8:	4770      	bx	lr
			return true;
    33da:	2001      	movs	r0, #1
    33dc:	e7fc      	b.n	33d8 <is_list_element+0x10>
	...

000033e0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    33e0:	b570      	push	{r4, r5, r6, lr}
    33e2:	0004      	movs	r4, r0
    33e4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    33e6:	4b06      	ldr	r3, [pc, #24]	; (3400 <list_insert_as_head+0x20>)
    33e8:	4798      	blx	r3
    33ea:	2301      	movs	r3, #1
    33ec:	4058      	eors	r0, r3
    33ee:	b2c0      	uxtb	r0, r0
    33f0:	2239      	movs	r2, #57	; 0x39
    33f2:	4904      	ldr	r1, [pc, #16]	; (3404 <list_insert_as_head+0x24>)
    33f4:	4b04      	ldr	r3, [pc, #16]	; (3408 <list_insert_as_head+0x28>)
    33f6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    33f8:	6823      	ldr	r3, [r4, #0]
    33fa:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    33fc:	6025      	str	r5, [r4, #0]
}
    33fe:	bd70      	pop	{r4, r5, r6, pc}
    3400:	000033c9 	.word	0x000033c9
    3404:	0001107c 	.word	0x0001107c
    3408:	000033c1 	.word	0x000033c1

0000340c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    340c:	6803      	ldr	r3, [r0, #0]
    340e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3410:	6001      	str	r1, [r0, #0]
}
    3412:	4770      	bx	lr

00003414 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3414:	b570      	push	{r4, r5, r6, lr}
    3416:	0005      	movs	r5, r0
    3418:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    341a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    341c:	4b0a      	ldr	r3, [pc, #40]	; (3448 <list_insert_at_end+0x34>)
    341e:	4798      	blx	r3
    3420:	2301      	movs	r3, #1
    3422:	4058      	eors	r0, r3
    3424:	b2c0      	uxtb	r0, r0
    3426:	224f      	movs	r2, #79	; 0x4f
    3428:	4908      	ldr	r1, [pc, #32]	; (344c <list_insert_at_end+0x38>)
    342a:	4b09      	ldr	r3, [pc, #36]	; (3450 <list_insert_at_end+0x3c>)
    342c:	4798      	blx	r3

	if (!list->head) {
    342e:	682b      	ldr	r3, [r5, #0]
    3430:	2b00      	cmp	r3, #0
    3432:	d103      	bne.n	343c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    3434:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3436:	6033      	str	r3, [r6, #0]
		return;
    3438:	e005      	b.n	3446 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    343a:	001c      	movs	r4, r3
	while (it->next) {
    343c:	6823      	ldr	r3, [r4, #0]
    343e:	2b00      	cmp	r3, #0
    3440:	d1fb      	bne.n	343a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    3442:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3444:	6033      	str	r3, [r6, #0]
}
    3446:	bd70      	pop	{r4, r5, r6, pc}
    3448:	000033c9 	.word	0x000033c9
    344c:	0001107c 	.word	0x0001107c
    3450:	000033c1 	.word	0x000033c1

00003454 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    3454:	6803      	ldr	r3, [r0, #0]
    3456:	2b00      	cmp	r3, #0
    3458:	d003      	beq.n	3462 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    345a:	681a      	ldr	r2, [r3, #0]
    345c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    345e:	0018      	movs	r0, r3
	}

	return NULL;
}
    3460:	4770      	bx	lr
	return NULL;
    3462:	2000      	movs	r0, #0
    3464:	e7fc      	b.n	3460 <list_remove_head+0xc>

00003466 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    3466:	2900      	cmp	r1, #0
    3468:	d012      	beq.n	3490 <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
    346a:	6803      	ldr	r3, [r0, #0]
    346c:	4299      	cmp	r1, r3
    346e:	d104      	bne.n	347a <list_delete_element+0x14>
		list->head = list->head->next;
    3470:	681b      	ldr	r3, [r3, #0]
    3472:	6003      	str	r3, [r0, #0]
		return true;
    3474:	2001      	movs	r0, #1
    3476:	e00a      	b.n	348e <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
    3478:	0013      	movs	r3, r2
		while (it && it->next != element) {
    347a:	2b00      	cmp	r3, #0
    347c:	d002      	beq.n	3484 <list_delete_element+0x1e>
    347e:	681a      	ldr	r2, [r3, #0]
    3480:	4291      	cmp	r1, r2
    3482:	d1f9      	bne.n	3478 <list_delete_element+0x12>
		}
		if (it) {
    3484:	2b00      	cmp	r3, #0
    3486:	d005      	beq.n	3494 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
    3488:	680a      	ldr	r2, [r1, #0]
    348a:	601a      	str	r2, [r3, #0]
			return true;
    348c:	2001      	movs	r0, #1
		}
	}

	return false;
}
    348e:	4770      	bx	lr
		return false;
    3490:	2000      	movs	r0, #0
    3492:	e7fc      	b.n	348e <list_delete_element+0x28>
	return false;
    3494:	2000      	movs	r0, #0
    3496:	e7fa      	b.n	348e <list_delete_element+0x28>

00003498 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	0004      	movs	r4, r0
    349c:	000e      	movs	r6, r1
    349e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    34a0:	2800      	cmp	r0, #0
    34a2:	d012      	beq.n	34ca <ringbuffer_init+0x32>
    34a4:	2900      	cmp	r1, #0
    34a6:	d012      	beq.n	34ce <ringbuffer_init+0x36>
    34a8:	2a00      	cmp	r2, #0
    34aa:	d112      	bne.n	34d2 <ringbuffer_init+0x3a>
    34ac:	2000      	movs	r0, #0
    34ae:	2228      	movs	r2, #40	; 0x28
    34b0:	490a      	ldr	r1, [pc, #40]	; (34dc <ringbuffer_init+0x44>)
    34b2:	4b0b      	ldr	r3, [pc, #44]	; (34e0 <ringbuffer_init+0x48>)
    34b4:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    34b6:	1e6b      	subs	r3, r5, #1
    34b8:	422b      	tst	r3, r5
    34ba:	d10c      	bne.n	34d6 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    34bc:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    34be:	2300      	movs	r3, #0
    34c0:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    34c2:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    34c4:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    34c6:	2000      	movs	r0, #0
}
    34c8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    34ca:	2000      	movs	r0, #0
    34cc:	e7ef      	b.n	34ae <ringbuffer_init+0x16>
    34ce:	2000      	movs	r0, #0
    34d0:	e7ed      	b.n	34ae <ringbuffer_init+0x16>
    34d2:	2001      	movs	r0, #1
    34d4:	e7eb      	b.n	34ae <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
    34d6:	200d      	movs	r0, #13
    34d8:	4240      	negs	r0, r0
    34da:	e7f5      	b.n	34c8 <ringbuffer_init+0x30>
    34dc:	0001109c 	.word	0x0001109c
    34e0:	000033c1 	.word	0x000033c1

000034e4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    34e4:	b570      	push	{r4, r5, r6, lr}
    34e6:	0004      	movs	r4, r0
    34e8:	000d      	movs	r5, r1
	ASSERT(rb && data);
    34ea:	2800      	cmp	r0, #0
    34ec:	d016      	beq.n	351c <ringbuffer_get+0x38>
    34ee:	2900      	cmp	r1, #0
    34f0:	d012      	beq.n	3518 <ringbuffer_get+0x34>
    34f2:	2001      	movs	r0, #1
    34f4:	2240      	movs	r2, #64	; 0x40
    34f6:	490c      	ldr	r1, [pc, #48]	; (3528 <ringbuffer_get+0x44>)
    34f8:	4b0c      	ldr	r3, [pc, #48]	; (352c <ringbuffer_get+0x48>)
    34fa:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    34fc:	68a3      	ldr	r3, [r4, #8]
    34fe:	68e2      	ldr	r2, [r4, #12]
    3500:	429a      	cmp	r2, r3
    3502:	d00d      	beq.n	3520 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
    3504:	6862      	ldr	r2, [r4, #4]
    3506:	4013      	ands	r3, r2
    3508:	6822      	ldr	r2, [r4, #0]
    350a:	5cd3      	ldrb	r3, [r2, r3]
    350c:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    350e:	68a3      	ldr	r3, [r4, #8]
    3510:	3301      	adds	r3, #1
    3512:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    3514:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    3516:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
    3518:	2000      	movs	r0, #0
    351a:	e7eb      	b.n	34f4 <ringbuffer_get+0x10>
    351c:	2000      	movs	r0, #0
    351e:	e7e9      	b.n	34f4 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
    3520:	200a      	movs	r0, #10
    3522:	4240      	negs	r0, r0
    3524:	e7f7      	b.n	3516 <ringbuffer_get+0x32>
    3526:	46c0      	nop			; (mov r8, r8)
    3528:	0001109c 	.word	0x0001109c
    352c:	000033c1 	.word	0x000033c1

00003530 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    3530:	b570      	push	{r4, r5, r6, lr}
    3532:	0004      	movs	r4, r0
    3534:	000d      	movs	r5, r1
	ASSERT(rb);
    3536:	1e43      	subs	r3, r0, #1
    3538:	4198      	sbcs	r0, r3
    353a:	b2c0      	uxtb	r0, r0
    353c:	2251      	movs	r2, #81	; 0x51
    353e:	490a      	ldr	r1, [pc, #40]	; (3568 <ringbuffer_put+0x38>)
    3540:	4b0a      	ldr	r3, [pc, #40]	; (356c <ringbuffer_put+0x3c>)
    3542:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    3544:	6863      	ldr	r3, [r4, #4]
    3546:	68e2      	ldr	r2, [r4, #12]
    3548:	4013      	ands	r3, r2
    354a:	6822      	ldr	r2, [r4, #0]
    354c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    354e:	68e3      	ldr	r3, [r4, #12]
    3550:	68a2      	ldr	r2, [r4, #8]
    3552:	1a9a      	subs	r2, r3, r2
    3554:	6861      	ldr	r1, [r4, #4]
    3556:	428a      	cmp	r2, r1
    3558:	d901      	bls.n	355e <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    355a:	1a59      	subs	r1, r3, r1
    355c:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    355e:	3301      	adds	r3, #1
    3560:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    3562:	2000      	movs	r0, #0
    3564:	bd70      	pop	{r4, r5, r6, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	0001109c 	.word	0x0001109c
    356c:	000033c1 	.word	0x000033c1

00003570 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    3570:	b510      	push	{r4, lr}
    3572:	0004      	movs	r4, r0
	ASSERT(rb);
    3574:	1e43      	subs	r3, r0, #1
    3576:	4198      	sbcs	r0, r3
    3578:	b2c0      	uxtb	r0, r0
    357a:	2267      	movs	r2, #103	; 0x67
    357c:	4903      	ldr	r1, [pc, #12]	; (358c <ringbuffer_num+0x1c>)
    357e:	4b04      	ldr	r3, [pc, #16]	; (3590 <ringbuffer_num+0x20>)
    3580:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    3582:	68e0      	ldr	r0, [r4, #12]
    3584:	68a3      	ldr	r3, [r4, #8]
    3586:	1ac0      	subs	r0, r0, r3
}
    3588:	bd10      	pop	{r4, pc}
    358a:	46c0      	nop			; (mov r8, r8)
    358c:	0001109c 	.word	0x0001109c
    3590:	000033c1 	.word	0x000033c1

00003594 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3594:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3596:	2b00      	cmp	r3, #0
    3598:	db07      	blt.n	35aa <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    359a:	231f      	movs	r3, #31
    359c:	4018      	ands	r0, r3
    359e:	3b1e      	subs	r3, #30
    35a0:	4083      	lsls	r3, r0
    35a2:	2280      	movs	r2, #128	; 0x80
    35a4:	0052      	lsls	r2, r2, #1
    35a6:	4901      	ldr	r1, [pc, #4]	; (35ac <_irq_set+0x18>)
    35a8:	508b      	str	r3, [r1, r2]
}
    35aa:	4770      	bx	lr
    35ac:	e000e100 	.word	0xe000e100

000035b0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
    35b0:	0103      	lsls	r3, r0, #4
    35b2:	1a1b      	subs	r3, r3, r0
    35b4:	015a      	lsls	r2, r3, #5
    35b6:	2064      	movs	r0, #100	; 0x64
    35b8:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    35ba:	4770      	bx	lr

000035bc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    35bc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    35be:	4b06      	ldr	r3, [pc, #24]	; (35d8 <_init_chip+0x1c>)
    35c0:	685a      	ldr	r2, [r3, #4]
    35c2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    35c4:	4b05      	ldr	r3, [pc, #20]	; (35dc <_init_chip+0x20>)
    35c6:	4798      	blx	r3
	_sysctrl_init_sources();
    35c8:	4b05      	ldr	r3, [pc, #20]	; (35e0 <_init_chip+0x24>)
    35ca:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    35cc:	4b05      	ldr	r3, [pc, #20]	; (35e4 <_init_chip+0x28>)
    35ce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    35d0:	20ff      	movs	r0, #255	; 0xff
    35d2:	4b05      	ldr	r3, [pc, #20]	; (35e8 <_init_chip+0x2c>)
    35d4:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    35d6:	bd10      	pop	{r4, pc}
    35d8:	41004000 	.word	0x41004000
    35dc:	000038d9 	.word	0x000038d9
    35e0:	00003ef1 	.word	0x00003ef1
    35e4:	00003f4d 	.word	0x00003f4d
    35e8:	00003805 	.word	0x00003805

000035ec <_dac_init>:
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw)
{
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    35ec:	79c3      	ldrb	r3, [r0, #7]
    35ee:	09db      	lsrs	r3, r3, #7
    35f0:	d1fc      	bne.n	35ec <_dac_init>
    35f2:	79c3      	ldrb	r3, [r0, #7]
    35f4:	09db      	lsrs	r3, r3, #7
    35f6:	d1fc      	bne.n	35f2 <_dac_init+0x6>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw);
	tmp = ((Dac *)hw)->CTRLA.reg;
    35f8:	7803      	ldrb	r3, [r0, #0]
 * param[in] hw The pointer to DAC hardware instance
 */
static int32_t _dac_init(void *const hw)
{
	hri_dac_wait_for_sync(hw);
	if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
    35fa:	079b      	lsls	r3, r3, #30
    35fc:	d507      	bpl.n	360e <_dac_init+0x22>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
    35fe:	2300      	movs	r3, #0
    3600:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3602:	79c3      	ldrb	r3, [r0, #7]
    3604:	09db      	lsrs	r3, r3, #7
    3606:	d1fc      	bne.n	3602 <_dac_init+0x16>
    3608:	79c3      	ldrb	r3, [r0, #7]
    360a:	09db      	lsrs	r3, r3, #7
    360c:	d1fc      	bne.n	3608 <_dac_init+0x1c>
	((Dac *)hw)->CTRLA.reg = data;
    360e:	2301      	movs	r3, #1
    3610:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3612:	79c3      	ldrb	r3, [r0, #7]
    3614:	09db      	lsrs	r3, r3, #7
    3616:	d1fc      	bne.n	3612 <_dac_init+0x26>
    3618:	79c3      	ldrb	r3, [r0, #7]
    361a:	09db      	lsrs	r3, r3, #7
    361c:	d1fc      	bne.n	3618 <_dac_init+0x2c>
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    361e:	7083      	strb	r3, [r0, #2]
	((Dac *)hw)->CTRLB.reg = data;
    3620:	2241      	movs	r2, #65	; 0x41
    3622:	7042      	strb	r2, [r0, #1]
	((Dac *)hw)->CTRLA.reg = data;
    3624:	7003      	strb	r3, [r0, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3626:	79c3      	ldrb	r3, [r0, #7]
    3628:	09db      	lsrs	r3, r3, #7
    362a:	d1fc      	bne.n	3626 <_dac_init+0x3a>

	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_CTRLB_reg(hw, _dac.ctrlb);
	hri_dac_write_CTRLA_reg(hw, _dac.ctrla);
	return ERR_NONE;
}
    362c:	2000      	movs	r0, #0
    362e:	4770      	bx	lr

00003630 <_dac_sync_init>:
{
    3630:	b570      	push	{r4, r5, r6, lr}
    3632:	0005      	movs	r5, r0
    3634:	000c      	movs	r4, r1
	ASSERT(device);
    3636:	1e43      	subs	r3, r0, #1
    3638:	4198      	sbcs	r0, r3
    363a:	b2c0      	uxtb	r0, r0
    363c:	2249      	movs	r2, #73	; 0x49
    363e:	4904      	ldr	r1, [pc, #16]	; (3650 <_dac_sync_init+0x20>)
    3640:	4b04      	ldr	r3, [pc, #16]	; (3654 <_dac_sync_init+0x24>)
    3642:	4798      	blx	r3
	device->hw = hw;
    3644:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    3646:	0020      	movs	r0, r4
    3648:	4b03      	ldr	r3, [pc, #12]	; (3658 <_dac_sync_init+0x28>)
    364a:	4798      	blx	r3
}
    364c:	bd70      	pop	{r4, r5, r6, pc}
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	000110c0 	.word	0x000110c0
    3654:	000033c1 	.word	0x000033c1
    3658:	000035ed 	.word	0x000035ed

0000365c <_dac_sync_enable_channel>:
 * \brief Enable DAC Channel
 */
void _dac_sync_enable_channel(struct _dac_sync_device *const device, const uint8_t ch)
{
	(void)ch;
	hri_dac_set_CTRLA_ENABLE_bit(device->hw);
    365c:	6802      	ldr	r2, [r0, #0]
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
    365e:	7813      	ldrb	r3, [r2, #0]
    3660:	2102      	movs	r1, #2
    3662:	430b      	orrs	r3, r1
    3664:	b2db      	uxtb	r3, r3
    3666:	7013      	strb	r3, [r2, #0]
	while (((const Dac *)hw)->STATUS.bit.SYNCBUSY)
    3668:	79d3      	ldrb	r3, [r2, #7]
    366a:	09db      	lsrs	r3, r3, #7
    366c:	d1fc      	bne.n	3668 <_dac_sync_enable_channel+0xc>
}
    366e:	4770      	bx	lr

00003670 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    3670:	4b20      	ldr	r3, [pc, #128]	; (36f4 <_ext_irq_init+0x84>)
    3672:	785b      	ldrb	r3, [r3, #1]
    3674:	09db      	lsrs	r3, r3, #7
    3676:	d1fb      	bne.n	3670 <_ext_irq_init>
    3678:	4b1e      	ldr	r3, [pc, #120]	; (36f4 <_ext_irq_init+0x84>)
    367a:	785b      	ldrb	r3, [r3, #1]
    367c:	09db      	lsrs	r3, r3, #7
    367e:	d1fb      	bne.n	3678 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    3680:	4b1c      	ldr	r3, [pc, #112]	; (36f4 <_ext_irq_init+0x84>)
    3682:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    3684:	079b      	lsls	r3, r3, #30
    3686:	d50a      	bpl.n	369e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    3688:	2200      	movs	r2, #0
    368a:	4b1a      	ldr	r3, [pc, #104]	; (36f4 <_ext_irq_init+0x84>)
    368c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    368e:	4b19      	ldr	r3, [pc, #100]	; (36f4 <_ext_irq_init+0x84>)
    3690:	785b      	ldrb	r3, [r3, #1]
    3692:	09db      	lsrs	r3, r3, #7
    3694:	d1fb      	bne.n	368e <_ext_irq_init+0x1e>
    3696:	4b17      	ldr	r3, [pc, #92]	; (36f4 <_ext_irq_init+0x84>)
    3698:	785b      	ldrb	r3, [r3, #1]
    369a:	09db      	lsrs	r3, r3, #7
    369c:	d1fb      	bne.n	3696 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    369e:	2201      	movs	r2, #1
    36a0:	4b14      	ldr	r3, [pc, #80]	; (36f4 <_ext_irq_init+0x84>)
    36a2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    36a4:	4b13      	ldr	r3, [pc, #76]	; (36f4 <_ext_irq_init+0x84>)
    36a6:	785b      	ldrb	r3, [r3, #1]
    36a8:	09db      	lsrs	r3, r3, #7
    36aa:	d1fb      	bne.n	36a4 <_ext_irq_init+0x34>
    36ac:	4b11      	ldr	r3, [pc, #68]	; (36f4 <_ext_irq_init+0x84>)
    36ae:	785b      	ldrb	r3, [r3, #1]
    36b0:	09db      	lsrs	r3, r3, #7
    36b2:	d1fb      	bne.n	36ac <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    36b4:	4b0f      	ldr	r3, [pc, #60]	; (36f4 <_ext_irq_init+0x84>)
    36b6:	2200      	movs	r2, #0
    36b8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    36ba:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    36bc:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    36be:	619a      	str	r2, [r3, #24]
    36c0:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    36c2:	781a      	ldrb	r2, [r3, #0]
    36c4:	2102      	movs	r1, #2
    36c6:	430a      	orrs	r2, r1
    36c8:	b2d2      	uxtb	r2, r2
    36ca:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    36cc:	4b09      	ldr	r3, [pc, #36]	; (36f4 <_ext_irq_init+0x84>)
    36ce:	785b      	ldrb	r3, [r3, #1]
    36d0:	09db      	lsrs	r3, r3, #7
    36d2:	d1fb      	bne.n	36cc <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36d4:	4b08      	ldr	r3, [pc, #32]	; (36f8 <_ext_irq_init+0x88>)
    36d6:	2210      	movs	r2, #16
    36d8:	2180      	movs	r1, #128	; 0x80
    36da:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    36dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36e0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36e4:	3101      	adds	r1, #1
    36e6:	31ff      	adds	r1, #255	; 0xff
    36e8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36ea:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    36ec:	4b03      	ldr	r3, [pc, #12]	; (36fc <_ext_irq_init+0x8c>)
    36ee:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    36f0:	2000      	movs	r0, #0
    36f2:	4770      	bx	lr
    36f4:	40001800 	.word	0x40001800
    36f8:	e000e100 	.word	0xe000e100
    36fc:	20000f60 	.word	0x20000f60

00003700 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    3700:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    3702:	2b00      	cmp	r3, #0
    3704:	d00b      	beq.n	371e <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    3706:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    3708:	2aff      	cmp	r2, #255	; 0xff
    370a:	d017      	beq.n	373c <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    370c:	2900      	cmp	r1, #0
    370e:	d10f      	bne.n	3730 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    3710:	2301      	movs	r3, #1
    3712:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    3714:	4a0b      	ldr	r2, [pc, #44]	; (3744 <_ext_irq_enable+0x44>)
    3716:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    3718:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    371a:	2000      	movs	r0, #0
}
    371c:	4770      	bx	lr
		if (_map[i].pin == pin) {
    371e:	280e      	cmp	r0, #14
    3720:	d002      	beq.n	3728 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
    3722:	3301      	adds	r3, #1
    3724:	b2db      	uxtb	r3, r3
    3726:	e7ec      	b.n	3702 <_ext_irq_enable+0x2>
			extint = _map[i].extint;
    3728:	00da      	lsls	r2, r3, #3
    372a:	4b07      	ldr	r3, [pc, #28]	; (3748 <_ext_irq_enable+0x48>)
    372c:	5cd2      	ldrb	r2, [r2, r3]
			break;
    372e:	e7eb      	b.n	3708 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    3730:	2301      	movs	r3, #1
    3732:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    3734:	4a03      	ldr	r2, [pc, #12]	; (3744 <_ext_irq_enable+0x44>)
    3736:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    3738:	2000      	movs	r0, #0
    373a:	e7ef      	b.n	371c <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
    373c:	200d      	movs	r0, #13
    373e:	4240      	negs	r0, r0
    3740:	e7ec      	b.n	371c <_ext_irq_enable+0x1c>
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	40001800 	.word	0x40001800
    3748:	000110d8 	.word	0x000110d8

0000374c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    374c:	b570      	push	{r4, r5, r6, lr}
    374e:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
    3750:	4b26      	ldr	r3, [pc, #152]	; (37ec <EIC_Handler+0xa0>)
    3752:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    3754:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    3756:	400a      	ands	r2, r1
    3758:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    375a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    375c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    375e:	4b24      	ldr	r3, [pc, #144]	; (37f0 <EIC_Handler+0xa4>)
    3760:	6818      	ldr	r0, [r3, #0]
    3762:	1e43      	subs	r3, r0, #1
    3764:	4198      	sbcs	r0, r3
    3766:	b2c0      	uxtb	r0, r0
    3768:	22d2      	movs	r2, #210	; 0xd2
    376a:	4922      	ldr	r1, [pc, #136]	; (37f4 <EIC_Handler+0xa8>)
    376c:	4b22      	ldr	r3, [pc, #136]	; (37f8 <EIC_Handler+0xac>)
    376e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    3770:	2501      	movs	r5, #1
    3772:	426d      	negs	r5, r5

	while (flags) {
    3774:	e02e      	b.n	37d4 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
    3776:	3901      	subs	r1, #1
    3778:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    377a:	42b0      	cmp	r0, r6
    377c:	d80e      	bhi.n	379c <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
    377e:	1832      	adds	r2, r6, r0
    3780:	1052      	asrs	r2, r2, #1
    3782:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
    3784:	23ff      	movs	r3, #255	; 0xff
    3786:	4013      	ands	r3, r2
    3788:	00db      	lsls	r3, r3, #3
    378a:	4a1c      	ldr	r2, [pc, #112]	; (37fc <EIC_Handler+0xb0>)
    378c:	5c9b      	ldrb	r3, [r3, r2]
    378e:	42a3      	cmp	r3, r4
    3790:	d003      	beq.n	379a <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
    3792:	daf0      	bge.n	3776 <EIC_Handler+0x2a>
					lower = middle + 1;
    3794:	3101      	adds	r1, #1
    3796:	b2c8      	uxtb	r0, r1
    3798:	e7ef      	b.n	377a <EIC_Handler+0x2e>
					pin = _map[middle].pin;
    379a:	250e      	movs	r5, #14
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    379c:	1c6b      	adds	r3, r5, #1
    379e:	d003      	beq.n	37a8 <EIC_Handler+0x5c>
				callback(pin);
    37a0:	4b13      	ldr	r3, [pc, #76]	; (37f0 <EIC_Handler+0xa4>)
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	0028      	movs	r0, r5
    37a6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    37a8:	2201      	movs	r2, #1
    37aa:	40a2      	lsls	r2, r4
    37ac:	9b01      	ldr	r3, [sp, #4]
    37ae:	4393      	bics	r3, r2
    37b0:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    37b2:	9801      	ldr	r0, [sp, #4]
    37b4:	4b12      	ldr	r3, [pc, #72]	; (3800 <EIC_Handler+0xb4>)
    37b6:	4798      	blx	r3
    37b8:	3801      	subs	r0, #1
    37ba:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    37bc:	1c63      	adds	r3, r4, #1
    37be:	d002      	beq.n	37c6 <EIC_Handler+0x7a>
    37c0:	2601      	movs	r6, #1
    37c2:	2000      	movs	r0, #0
    37c4:	e7d9      	b.n	377a <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
    37c6:	4b09      	ldr	r3, [pc, #36]	; (37ec <EIC_Handler+0xa0>)
    37c8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    37ca:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    37cc:	400a      	ands	r2, r1
    37ce:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    37d0:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    37d2:	611a      	str	r2, [r3, #16]
	while (flags) {
    37d4:	9b01      	ldr	r3, [sp, #4]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d005      	beq.n	37e6 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
    37da:	9801      	ldr	r0, [sp, #4]
    37dc:	4b08      	ldr	r3, [pc, #32]	; (3800 <EIC_Handler+0xb4>)
    37de:	4798      	blx	r3
    37e0:	3801      	subs	r0, #1
    37e2:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    37e4:	e7ea      	b.n	37bc <EIC_Handler+0x70>
	}
}
    37e6:	b002      	add	sp, #8
    37e8:	bd70      	pop	{r4, r5, r6, pc}
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	40001800 	.word	0x40001800
    37f0:	20000f60 	.word	0x20000f60
    37f4:	000110e0 	.word	0x000110e0
    37f8:	000033c1 	.word	0x000033c1
    37fc:	000110d8 	.word	0x000110d8
    3800:	00009271 	.word	0x00009271

00003804 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3804:	07c3      	lsls	r3, r0, #31
    3806:	d509      	bpl.n	381c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    3808:	4b27      	ldr	r3, [pc, #156]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    380a:	2280      	movs	r2, #128	; 0x80
    380c:	0052      	lsls	r2, r2, #1
    380e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3810:	4a26      	ldr	r2, [pc, #152]	; (38ac <_gclk_init_generators_by_fref+0xa8>)
    3812:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3814:	4b24      	ldr	r3, [pc, #144]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3816:	785b      	ldrb	r3, [r3, #1]
    3818:	09db      	lsrs	r3, r3, #7
    381a:	d1fb      	bne.n	3814 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    381c:	0783      	lsls	r3, r0, #30
    381e:	d508      	bpl.n	3832 <_gclk_init_generators_by_fref+0x2e>
	((Gclk *)hw)->GENDIV.reg = data;
    3820:	4b21      	ldr	r3, [pc, #132]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3822:	4a23      	ldr	r2, [pc, #140]	; (38b0 <_gclk_init_generators_by_fref+0xac>)
    3824:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3826:	4a23      	ldr	r2, [pc, #140]	; (38b4 <_gclk_init_generators_by_fref+0xb0>)
    3828:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    382a:	4b1f      	ldr	r3, [pc, #124]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    382c:	785b      	ldrb	r3, [r3, #1]
    382e:	09db      	lsrs	r3, r3, #7
    3830:	d1fb      	bne.n	382a <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    3832:	0743      	lsls	r3, r0, #29
    3834:	d508      	bpl.n	3848 <_gclk_init_generators_by_fref+0x44>
	((Gclk *)hw)->GENDIV.reg = data;
    3836:	4b1c      	ldr	r3, [pc, #112]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3838:	4a1f      	ldr	r2, [pc, #124]	; (38b8 <_gclk_init_generators_by_fref+0xb4>)
    383a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    383c:	4a1f      	ldr	r2, [pc, #124]	; (38bc <_gclk_init_generators_by_fref+0xb8>)
    383e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3840:	4b19      	ldr	r3, [pc, #100]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3842:	785b      	ldrb	r3, [r3, #1]
    3844:	09db      	lsrs	r3, r3, #7
    3846:	d1fb      	bne.n	3840 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    3848:	0703      	lsls	r3, r0, #28
    384a:	d508      	bpl.n	385e <_gclk_init_generators_by_fref+0x5a>
	((Gclk *)hw)->GENDIV.reg = data;
    384c:	4b16      	ldr	r3, [pc, #88]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    384e:	4a1c      	ldr	r2, [pc, #112]	; (38c0 <_gclk_init_generators_by_fref+0xbc>)
    3850:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3852:	4a1c      	ldr	r2, [pc, #112]	; (38c4 <_gclk_init_generators_by_fref+0xc0>)
    3854:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3856:	4b14      	ldr	r3, [pc, #80]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3858:	785b      	ldrb	r3, [r3, #1]
    385a:	09db      	lsrs	r3, r3, #7
    385c:	d1fb      	bne.n	3856 <_gclk_init_generators_by_fref+0x52>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SRC | GCLK_GENCTRL_ID(3));
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    385e:	06c3      	lsls	r3, r0, #27
    3860:	d509      	bpl.n	3876 <_gclk_init_generators_by_fref+0x72>
	((Gclk *)hw)->GENDIV.reg = data;
    3862:	4b11      	ldr	r3, [pc, #68]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3864:	2282      	movs	r2, #130	; 0x82
    3866:	0052      	lsls	r2, r2, #1
    3868:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    386a:	4a17      	ldr	r2, [pc, #92]	; (38c8 <_gclk_init_generators_by_fref+0xc4>)
    386c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    386e:	4b0e      	ldr	r3, [pc, #56]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3870:	785b      	ldrb	r3, [r3, #1]
    3872:	09db      	lsrs	r3, r3, #7
    3874:	d1fb      	bne.n	386e <_gclk_init_generators_by_fref+0x6a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SRC | GCLK_GENCTRL_ID(4));
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    3876:	0683      	lsls	r3, r0, #26
    3878:	d508      	bpl.n	388c <_gclk_init_generators_by_fref+0x88>
	((Gclk *)hw)->GENDIV.reg = data;
    387a:	4b0b      	ldr	r3, [pc, #44]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    387c:	4a13      	ldr	r2, [pc, #76]	; (38cc <_gclk_init_generators_by_fref+0xc8>)
    387e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3880:	4a13      	ldr	r2, [pc, #76]	; (38d0 <_gclk_init_generators_by_fref+0xcc>)
    3882:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3884:	4b08      	ldr	r3, [pc, #32]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3886:	785b      	ldrb	r3, [r3, #1]
    3888:	09db      	lsrs	r3, r3, #7
    388a:	d1fb      	bne.n	3884 <_gclk_init_generators_by_fref+0x80>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    388c:	0643      	lsls	r3, r0, #25
    388e:	d509      	bpl.n	38a4 <_gclk_init_generators_by_fref+0xa0>
	((Gclk *)hw)->GENDIV.reg = data;
    3890:	4b05      	ldr	r3, [pc, #20]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    3892:	2283      	movs	r2, #131	; 0x83
    3894:	0052      	lsls	r2, r2, #1
    3896:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3898:	4a0e      	ldr	r2, [pc, #56]	; (38d4 <_gclk_init_generators_by_fref+0xd0>)
    389a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    389c:	4b02      	ldr	r3, [pc, #8]	; (38a8 <_gclk_init_generators_by_fref+0xa4>)
    389e:	785b      	ldrb	r3, [r3, #1]
    38a0:	09db      	lsrs	r3, r3, #7
    38a2:	d1fb      	bne.n	389c <_gclk_init_generators_by_fref+0x98>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    38a4:	4770      	bx	lr
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	40000c00 	.word	0x40000c00
    38ac:	00290800 	.word	0x00290800
    38b0:	00000601 	.word	0x00000601
    38b4:	00010801 	.word	0x00010801
    38b8:	00000402 	.word	0x00000402
    38bc:	00210602 	.word	0x00210602
    38c0:	00000803 	.word	0x00000803
    38c4:	00290603 	.word	0x00290603
    38c8:	00090704 	.word	0x00090704
    38cc:	00000305 	.word	0x00000305
    38d0:	00010805 	.word	0x00010805
    38d4:	00210406 	.word	0x00210406

000038d8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    38d8:	4b06      	ldr	r3, [pc, #24]	; (38f4 <_pm_init+0x1c>)
    38da:	7a1a      	ldrb	r2, [r3, #8]
    38dc:	b2d2      	uxtb	r2, r2
    38de:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    38e0:	7a5a      	ldrb	r2, [r3, #9]
    38e2:	b2d2      	uxtb	r2, r2
    38e4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    38e6:	7a9a      	ldrb	r2, [r3, #10]
    38e8:	b2d2      	uxtb	r2, r2
    38ea:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    38ec:	7ada      	ldrb	r2, [r3, #11]
    38ee:	b2d2      	uxtb	r2, r2
    38f0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    38f2:	4770      	bx	lr
    38f4:	40000400 	.word	0x40000400

000038f8 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    38f8:	4b02      	ldr	r3, [pc, #8]	; (3904 <_sercom_get_hardware_index+0xc>)
    38fa:	469c      	mov	ip, r3
    38fc:	4460      	add	r0, ip
    38fe:	0a80      	lsrs	r0, r0, #10
    3900:	b2c0      	uxtb	r0, r0
}
    3902:	4770      	bx	lr
    3904:	bdfff800 	.word	0xbdfff800

00003908 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3908:	b510      	push	{r4, lr}
	void *hw = device->hw;
    390a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    390c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    390e:	07db      	lsls	r3, r3, #31
    3910:	d502      	bpl.n	3918 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    3912:	7da3      	ldrb	r3, [r4, #22]
    3914:	07db      	lsls	r3, r3, #31
    3916:	d40f      	bmi.n	3938 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3918:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    391a:	079b      	lsls	r3, r3, #30
    391c:	d502      	bpl.n	3924 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    391e:	7da3      	ldrb	r3, [r4, #22]
    3920:	079b      	lsls	r3, r3, #30
    3922:	d40e      	bmi.n	3942 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3924:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    3926:	075b      	lsls	r3, r3, #29
    3928:	d515      	bpl.n	3956 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    392a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    392c:	2337      	movs	r3, #55	; 0x37
    392e:	421a      	tst	r2, r3
    3930:	d00c      	beq.n	394c <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3932:	3308      	adds	r3, #8
    3934:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    3936:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3938:	2301      	movs	r3, #1
    393a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    393c:	6803      	ldr	r3, [r0, #0]
    393e:	4798      	blx	r3
    3940:	e7f9      	b.n	3936 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3942:	2302      	movs	r3, #2
    3944:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    3946:	6883      	ldr	r3, [r0, #8]
    3948:	4798      	blx	r3
    394a:	e7f4      	b.n	3936 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    394c:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    394e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    3950:	b2c9      	uxtb	r1, r1
    3952:	4798      	blx	r3
    3954:	e7ef      	b.n	3936 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3956:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3958:	09db      	lsrs	r3, r3, #7
    395a:	d0ec      	beq.n	3936 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    395c:	2380      	movs	r3, #128	; 0x80
    395e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    3960:	68c3      	ldr	r3, [r0, #12]
    3962:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3964:	8b63      	ldrh	r3, [r4, #26]
    3966:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3968:	8363      	strh	r3, [r4, #26]
    396a:	e7e4      	b.n	3936 <_sercom_usart_interrupt_handler+0x2e>

0000396c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    396c:	4b03      	ldr	r3, [pc, #12]	; (397c <_sercom_init_irq_param+0x10>)
    396e:	4298      	cmp	r0, r3
    3970:	d000      	beq.n	3974 <_sercom_init_irq_param+0x8>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}
}
    3972:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    3974:	4b02      	ldr	r3, [pc, #8]	; (3980 <_sercom_init_irq_param+0x14>)
    3976:	6019      	str	r1, [r3, #0]
}
    3978:	e7fb      	b.n	3972 <_sercom_init_irq_param+0x6>
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	42001400 	.word	0x42001400
    3980:	20000f64 	.word	0x20000f64

00003984 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3984:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    3986:	4b02      	ldr	r3, [pc, #8]	; (3990 <_sercom_get_irq_num+0xc>)
    3988:	4798      	blx	r3
    398a:	3009      	adds	r0, #9
    398c:	b2c0      	uxtb	r0, r0
}
    398e:	bd10      	pop	{r4, pc}
    3990:	000038f9 	.word	0x000038f9

00003994 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3994:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3996:	07db      	lsls	r3, r3, #31
    3998:	d408      	bmi.n	39ac <_spi_sync_enable+0x18>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    399a:	6803      	ldr	r3, [r0, #0]
    399c:	2202      	movs	r2, #2
    399e:	4313      	orrs	r3, r2
    39a0:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    39a2:	69c3      	ldr	r3, [r0, #28]
    39a4:	079b      	lsls	r3, r3, #30
    39a6:	d1fc      	bne.n	39a2 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    39a8:	2000      	movs	r0, #0
}
    39aa:	4770      	bx	lr
		return ERR_BUSY;
    39ac:	2004      	movs	r0, #4
    39ae:	4240      	negs	r0, r0
    39b0:	e7fb      	b.n	39aa <_spi_sync_enable+0x16>
	...

000039b4 <_get_sercom_index>:
{
    39b4:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    39b6:	4b0b      	ldr	r3, [pc, #44]	; (39e4 <_get_sercom_index+0x30>)
    39b8:	4798      	blx	r3
    39ba:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    39bc:	2000      	movs	r0, #0
    39be:	2800      	cmp	r0, #0
    39c0:	d006      	beq.n	39d0 <_get_sercom_index+0x1c>
	ASSERT(false);
    39c2:	4a09      	ldr	r2, [pc, #36]	; (39e8 <_get_sercom_index+0x34>)
    39c4:	4909      	ldr	r1, [pc, #36]	; (39ec <_get_sercom_index+0x38>)
    39c6:	2000      	movs	r0, #0
    39c8:	4b09      	ldr	r3, [pc, #36]	; (39f0 <_get_sercom_index+0x3c>)
    39ca:	4798      	blx	r3
	return 0;
    39cc:	2000      	movs	r0, #0
}
    39ce:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    39d0:	0083      	lsls	r3, r0, #2
    39d2:	181b      	adds	r3, r3, r0
    39d4:	0099      	lsls	r1, r3, #2
    39d6:	4b07      	ldr	r3, [pc, #28]	; (39f4 <_get_sercom_index+0x40>)
    39d8:	5ccb      	ldrb	r3, [r1, r3]
    39da:	429a      	cmp	r2, r3
    39dc:	d0f7      	beq.n	39ce <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    39de:	3001      	adds	r0, #1
    39e0:	b2c0      	uxtb	r0, r0
    39e2:	e7ec      	b.n	39be <_get_sercom_index+0xa>
    39e4:	000038f9 	.word	0x000038f9
    39e8:	0000025e 	.word	0x0000025e
    39ec:	00011168 	.word	0x00011168
    39f0:	000033c1 	.word	0x000033c1
    39f4:	000110f8 	.word	0x000110f8

000039f8 <_usart_init>:
{
    39f8:	b570      	push	{r4, r5, r6, lr}
    39fa:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    39fc:	4b38      	ldr	r3, [pc, #224]	; (3ae0 <_usart_init+0xe8>)
    39fe:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3a00:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3a02:	07db      	lsls	r3, r3, #31
    3a04:	d41d      	bmi.n	3a42 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3a06:	0083      	lsls	r3, r0, #2
    3a08:	181b      	adds	r3, r3, r0
    3a0a:	009a      	lsls	r2, r3, #2
    3a0c:	4b35      	ldr	r3, [pc, #212]	; (3ae4 <_usart_init+0xec>)
    3a0e:	189b      	adds	r3, r3, r2
    3a10:	685a      	ldr	r2, [r3, #4]
    3a12:	231c      	movs	r3, #28
    3a14:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a16:	69e3      	ldr	r3, [r4, #28]
    3a18:	079b      	lsls	r3, r3, #30
    3a1a:	d1fc      	bne.n	3a16 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3a1c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3a1e:	079b      	lsls	r3, r3, #30
    3a20:	d509      	bpl.n	3a36 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3a22:	6823      	ldr	r3, [r4, #0]
    3a24:	2102      	movs	r1, #2
    3a26:	438b      	bics	r3, r1
    3a28:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a2a:	69e3      	ldr	r3, [r4, #28]
    3a2c:	079b      	lsls	r3, r3, #30
    3a2e:	d1fc      	bne.n	3a2a <_usart_init+0x32>
    3a30:	69e3      	ldr	r3, [r4, #28]
    3a32:	079b      	lsls	r3, r3, #30
    3a34:	d4fc      	bmi.n	3a30 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    3a36:	2301      	movs	r3, #1
    3a38:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3a3a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a3c:	69e3      	ldr	r3, [r4, #28]
    3a3e:	079b      	lsls	r3, r3, #30
    3a40:	d1fc      	bne.n	3a3c <_usart_init+0x44>
    3a42:	69e3      	ldr	r3, [r4, #28]
    3a44:	07db      	lsls	r3, r3, #31
    3a46:	d4fc      	bmi.n	3a42 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3a48:	0083      	lsls	r3, r0, #2
    3a4a:	181b      	adds	r3, r3, r0
    3a4c:	009a      	lsls	r2, r3, #2
    3a4e:	4b25      	ldr	r3, [pc, #148]	; (3ae4 <_usart_init+0xec>)
    3a50:	189b      	adds	r3, r3, r2
    3a52:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3a54:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a56:	69e3      	ldr	r3, [r4, #28]
    3a58:	079b      	lsls	r3, r3, #30
    3a5a:	d1fc      	bne.n	3a56 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3a5c:	0083      	lsls	r3, r0, #2
    3a5e:	181b      	adds	r3, r3, r0
    3a60:	009a      	lsls	r2, r3, #2
    3a62:	4b20      	ldr	r3, [pc, #128]	; (3ae4 <_usart_init+0xec>)
    3a64:	189b      	adds	r3, r3, r2
    3a66:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3a68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3a6a:	69e3      	ldr	r3, [r4, #28]
    3a6c:	075b      	lsls	r3, r3, #29
    3a6e:	d1fc      	bne.n	3a6a <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3a70:	0083      	lsls	r3, r0, #2
    3a72:	181b      	adds	r3, r3, r0
    3a74:	009a      	lsls	r2, r3, #2
    3a76:	4b1b      	ldr	r3, [pc, #108]	; (3ae4 <_usart_init+0xec>)
    3a78:	189b      	adds	r3, r3, r2
    3a7a:	685b      	ldr	r3, [r3, #4]
    3a7c:	049a      	lsls	r2, r3, #18
    3a7e:	d40b      	bmi.n	3a98 <_usart_init+0xa0>
    3a80:	22c0      	movs	r2, #192	; 0xc0
    3a82:	01d2      	lsls	r2, r2, #7
    3a84:	4213      	tst	r3, r2
    3a86:	d107      	bne.n	3a98 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3a88:	0083      	lsls	r3, r0, #2
    3a8a:	181b      	adds	r3, r3, r0
    3a8c:	009a      	lsls	r2, r3, #2
    3a8e:	4b15      	ldr	r3, [pc, #84]	; (3ae4 <_usart_init+0xec>)
    3a90:	189b      	adds	r3, r3, r2
    3a92:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    3a94:	81a3      	strh	r3, [r4, #12]
    3a96:	e015      	b.n	3ac4 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3a98:	0083      	lsls	r3, r0, #2
    3a9a:	181b      	adds	r3, r3, r0
    3a9c:	009a      	lsls	r2, r3, #2
    3a9e:	4911      	ldr	r1, [pc, #68]	; (3ae4 <_usart_init+0xec>)
    3aa0:	1889      	adds	r1, r1, r2
    3aa2:	898a      	ldrh	r2, [r1, #12]
    3aa4:	89a3      	ldrh	r3, [r4, #12]
    3aa6:	04d2      	lsls	r2, r2, #19
    3aa8:	0cd2      	lsrs	r2, r2, #19
    3aaa:	0b5b      	lsrs	r3, r3, #13
    3aac:	035b      	lsls	r3, r3, #13
    3aae:	4313      	orrs	r3, r2
    3ab0:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3ab2:	7b8b      	ldrb	r3, [r1, #14]
    3ab4:	2207      	movs	r2, #7
    3ab6:	401a      	ands	r2, r3
    3ab8:	89a3      	ldrh	r3, [r4, #12]
    3aba:	0352      	lsls	r2, r2, #13
    3abc:	04db      	lsls	r3, r3, #19
    3abe:	0cdb      	lsrs	r3, r3, #19
    3ac0:	4313      	orrs	r3, r2
    3ac2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3ac4:	4a07      	ldr	r2, [pc, #28]	; (3ae4 <_usart_init+0xec>)
    3ac6:	0083      	lsls	r3, r0, #2
    3ac8:	181d      	adds	r5, r3, r0
    3aca:	00a9      	lsls	r1, r5, #2
    3acc:	000d      	movs	r5, r1
    3ace:	1851      	adds	r1, r2, r1
    3ad0:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    3ad2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3ad4:	1952      	adds	r2, r2, r5
    3ad6:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3ad8:	2330      	movs	r3, #48	; 0x30
    3ada:	54e2      	strb	r2, [r4, r3]
}
    3adc:	2000      	movs	r0, #0
    3ade:	bd70      	pop	{r4, r5, r6, pc}
    3ae0:	000039b5 	.word	0x000039b5
    3ae4:	000110f8 	.word	0x000110f8

00003ae8 <_usart_async_init>:
{
    3ae8:	b570      	push	{r4, r5, r6, lr}
    3aea:	0006      	movs	r6, r0
    3aec:	000c      	movs	r4, r1
	ASSERT(device);
    3aee:	1e43      	subs	r3, r0, #1
    3af0:	4198      	sbcs	r0, r3
    3af2:	b2c0      	uxtb	r0, r0
    3af4:	22c4      	movs	r2, #196	; 0xc4
    3af6:	4919      	ldr	r1, [pc, #100]	; (3b5c <_usart_async_init+0x74>)
    3af8:	4b19      	ldr	r3, [pc, #100]	; (3b60 <_usart_async_init+0x78>)
    3afa:	4798      	blx	r3
	init_status = _usart_init(hw);
    3afc:	0020      	movs	r0, r4
    3afe:	4b19      	ldr	r3, [pc, #100]	; (3b64 <_usart_async_init+0x7c>)
    3b00:	4798      	blx	r3
    3b02:	1e05      	subs	r5, r0, #0
	if (init_status) {
    3b04:	d001      	beq.n	3b0a <_usart_async_init+0x22>
}
    3b06:	0028      	movs	r0, r5
    3b08:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    3b0a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    3b0c:	0031      	movs	r1, r6
    3b0e:	0020      	movs	r0, r4
    3b10:	4b15      	ldr	r3, [pc, #84]	; (3b68 <_usart_async_init+0x80>)
    3b12:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3b14:	0020      	movs	r0, r4
    3b16:	4b15      	ldr	r3, [pc, #84]	; (3b6c <_usart_async_init+0x84>)
    3b18:	4798      	blx	r3
    3b1a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	db0a      	blt.n	3b36 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b20:	211f      	movs	r1, #31
    3b22:	4001      	ands	r1, r0
    3b24:	2201      	movs	r2, #1
    3b26:	408a      	lsls	r2, r1
    3b28:	2180      	movs	r1, #128	; 0x80
    3b2a:	4c11      	ldr	r4, [pc, #68]	; (3b70 <_usart_async_init+0x88>)
    3b2c:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3b2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b32:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    3b36:	2b00      	cmp	r3, #0
    3b38:	db07      	blt.n	3b4a <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b3a:	211f      	movs	r1, #31
    3b3c:	4001      	ands	r1, r0
    3b3e:	2201      	movs	r2, #1
    3b40:	408a      	lsls	r2, r1
    3b42:	21c0      	movs	r1, #192	; 0xc0
    3b44:	0049      	lsls	r1, r1, #1
    3b46:	4c0a      	ldr	r4, [pc, #40]	; (3b70 <_usart_async_init+0x88>)
    3b48:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	dbdb      	blt.n	3b06 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b4e:	231f      	movs	r3, #31
    3b50:	4018      	ands	r0, r3
    3b52:	3b1e      	subs	r3, #30
    3b54:	4083      	lsls	r3, r0
    3b56:	4a06      	ldr	r2, [pc, #24]	; (3b70 <_usart_async_init+0x88>)
    3b58:	6013      	str	r3, [r2, #0]
    3b5a:	e7d4      	b.n	3b06 <_usart_async_init+0x1e>
    3b5c:	00011168 	.word	0x00011168
    3b60:	000033c1 	.word	0x000033c1
    3b64:	000039f9 	.word	0x000039f9
    3b68:	0000396d 	.word	0x0000396d
    3b6c:	00003985 	.word	0x00003985
    3b70:	e000e100 	.word	0xe000e100

00003b74 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3b74:	6983      	ldr	r3, [r0, #24]
    3b76:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    3b78:	8519      	strh	r1, [r3, #40]	; 0x28
}
    3b7a:	4770      	bx	lr

00003b7c <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3b7c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3b7e:	2201      	movs	r2, #1
    3b80:	759a      	strb	r2, [r3, #22]
}
    3b82:	4770      	bx	lr

00003b84 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3b84:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3b86:	2202      	movs	r2, #2
    3b88:	759a      	strb	r2, [r3, #22]
}
    3b8a:	4770      	bx	lr

00003b8c <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    3b8c:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    3b8e:	4b02      	ldr	r3, [pc, #8]	; (3b98 <SERCOM3_Handler+0xc>)
    3b90:	6818      	ldr	r0, [r3, #0]
    3b92:	4b02      	ldr	r3, [pc, #8]	; (3b9c <SERCOM3_Handler+0x10>)
    3b94:	4798      	blx	r3
}
    3b96:	bd10      	pop	{r4, pc}
    3b98:	20000f64 	.word	0x20000f64
    3b9c:	00003909 	.word	0x00003909

00003ba0 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    3ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ba2:	0006      	movs	r6, r0
    3ba4:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3ba6:	0008      	movs	r0, r1
    3ba8:	4b73      	ldr	r3, [pc, #460]	; (3d78 <_spi_m_sync_init+0x1d8>)
    3baa:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    3bac:	2300      	movs	r3, #0
    3bae:	e001      	b.n	3bb4 <_spi_m_sync_init+0x14>
    3bb0:	3301      	adds	r3, #1
    3bb2:	b2db      	uxtb	r3, r3
    3bb4:	2b02      	cmp	r3, #2
    3bb6:	d80b      	bhi.n	3bd0 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    3bb8:	0119      	lsls	r1, r3, #4
    3bba:	18c9      	adds	r1, r1, r3
    3bbc:	4a6f      	ldr	r2, [pc, #444]	; (3d7c <_spi_m_sync_init+0x1dc>)
    3bbe:	1852      	adds	r2, r2, r1
    3bc0:	324c      	adds	r2, #76	; 0x4c
    3bc2:	7812      	ldrb	r2, [r2, #0]
    3bc4:	4290      	cmp	r0, r2
    3bc6:	d1f3      	bne.n	3bb0 <_spi_m_sync_init+0x10>
			return &sercomspi_regs[i];
    3bc8:	4d6c      	ldr	r5, [pc, #432]	; (3d7c <_spi_m_sync_init+0x1dc>)
    3bca:	353c      	adds	r5, #60	; 0x3c
    3bcc:	186d      	adds	r5, r5, r1
    3bce:	e000      	b.n	3bd2 <_spi_m_sync_init+0x32>
	return NULL;
    3bd0:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3bd2:	2e00      	cmp	r6, #0
    3bd4:	d100      	bne.n	3bd8 <_spi_m_sync_init+0x38>
    3bd6:	e082      	b.n	3cde <_spi_m_sync_init+0x13e>
    3bd8:	2c00      	cmp	r4, #0
    3bda:	d100      	bne.n	3bde <_spi_m_sync_init+0x3e>
    3bdc:	e07d      	b.n	3cda <_spi_m_sync_init+0x13a>
    3bde:	2001      	movs	r0, #1
    3be0:	4a67      	ldr	r2, [pc, #412]	; (3d80 <_spi_m_sync_init+0x1e0>)
    3be2:	4968      	ldr	r1, [pc, #416]	; (3d84 <_spi_m_sync_init+0x1e4>)
    3be4:	4b68      	ldr	r3, [pc, #416]	; (3d88 <_spi_m_sync_init+0x1e8>)
    3be6:	4798      	blx	r3

	if (regs == NULL) {
    3be8:	2d00      	cmp	r5, #0
    3bea:	d100      	bne.n	3bee <_spi_m_sync_init+0x4e>
    3bec:	e0c0      	b.n	3d70 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3bee:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3bf0:	07db      	lsls	r3, r3, #31
    3bf2:	d421      	bmi.n	3c38 <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3bf4:	782a      	ldrb	r2, [r5, #0]
    3bf6:	786b      	ldrb	r3, [r5, #1]
    3bf8:	021b      	lsls	r3, r3, #8
    3bfa:	4313      	orrs	r3, r2
    3bfc:	78aa      	ldrb	r2, [r5, #2]
    3bfe:	0412      	lsls	r2, r2, #16
    3c00:	4313      	orrs	r3, r2
    3c02:	78ea      	ldrb	r2, [r5, #3]
    3c04:	0612      	lsls	r2, r2, #24
    3c06:	431a      	orrs	r2, r3
    3c08:	231c      	movs	r3, #28
    3c0a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c0c:	69e3      	ldr	r3, [r4, #28]
    3c0e:	079b      	lsls	r3, r3, #30
    3c10:	d1fc      	bne.n	3c0c <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3c12:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3c14:	079b      	lsls	r3, r3, #30
    3c16:	d509      	bpl.n	3c2c <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3c18:	6823      	ldr	r3, [r4, #0]
    3c1a:	2102      	movs	r1, #2
    3c1c:	438b      	bics	r3, r1
    3c1e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c20:	69e3      	ldr	r3, [r4, #28]
    3c22:	079b      	lsls	r3, r3, #30
    3c24:	d1fc      	bne.n	3c20 <_spi_m_sync_init+0x80>
    3c26:	69e3      	ldr	r3, [r4, #28]
    3c28:	079b      	lsls	r3, r3, #30
    3c2a:	d4fc      	bmi.n	3c26 <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3c2c:	2301      	movs	r3, #1
    3c2e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3c30:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c32:	69e3      	ldr	r3, [r4, #28]
    3c34:	079b      	lsls	r3, r3, #30
    3c36:	d1fc      	bne.n	3c32 <_spi_m_sync_init+0x92>
    3c38:	69e3      	ldr	r3, [r4, #28]
    3c3a:	07db      	lsls	r3, r3, #31
    3c3c:	d4fc      	bmi.n	3c38 <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    3c3e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3c40:	782b      	ldrb	r3, [r5, #0]
    3c42:	786a      	ldrb	r2, [r5, #1]
    3c44:	0212      	lsls	r2, r2, #8
    3c46:	431a      	orrs	r2, r3
    3c48:	78ab      	ldrb	r3, [r5, #2]
    3c4a:	041b      	lsls	r3, r3, #16
    3c4c:	431a      	orrs	r2, r3
    3c4e:	78eb      	ldrb	r3, [r5, #3]
    3c50:	061b      	lsls	r3, r3, #24
    3c52:	4313      	orrs	r3, r2
    3c54:	221c      	movs	r2, #28
    3c56:	4013      	ands	r3, r2
    3c58:	2b08      	cmp	r3, #8
    3c5a:	d042      	beq.n	3ce2 <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    3c5c:	2c00      	cmp	r4, #0
    3c5e:	d100      	bne.n	3c62 <_spi_m_sync_init+0xc2>
    3c60:	e082      	b.n	3d68 <_spi_m_sync_init+0x1c8>
    3c62:	2d00      	cmp	r5, #0
    3c64:	d100      	bne.n	3c68 <_spi_m_sync_init+0xc8>
    3c66:	e07d      	b.n	3d64 <_spi_m_sync_init+0x1c4>
    3c68:	2001      	movs	r0, #1
    3c6a:	4a48      	ldr	r2, [pc, #288]	; (3d8c <_spi_m_sync_init+0x1ec>)
    3c6c:	4945      	ldr	r1, [pc, #276]	; (3d84 <_spi_m_sync_init+0x1e4>)
    3c6e:	4b46      	ldr	r3, [pc, #280]	; (3d88 <_spi_m_sync_init+0x1e8>)
    3c70:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3c72:	782b      	ldrb	r3, [r5, #0]
    3c74:	786a      	ldrb	r2, [r5, #1]
    3c76:	0212      	lsls	r2, r2, #8
    3c78:	431a      	orrs	r2, r3
    3c7a:	78ab      	ldrb	r3, [r5, #2]
    3c7c:	041b      	lsls	r3, r3, #16
    3c7e:	431a      	orrs	r2, r3
    3c80:	78eb      	ldrb	r3, [r5, #3]
    3c82:	061b      	lsls	r3, r3, #24
    3c84:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    3c86:	4a42      	ldr	r2, [pc, #264]	; (3d90 <_spi_m_sync_init+0x1f0>)
    3c88:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3c8a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3c8c:	69e3      	ldr	r3, [r4, #28]
    3c8e:	079b      	lsls	r3, r3, #30
    3c90:	d1fc      	bne.n	3c8c <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    3c92:	792b      	ldrb	r3, [r5, #4]
    3c94:	796a      	ldrb	r2, [r5, #5]
    3c96:	0212      	lsls	r2, r2, #8
    3c98:	431a      	orrs	r2, r3
    3c9a:	79ab      	ldrb	r3, [r5, #6]
    3c9c:	041b      	lsls	r3, r3, #16
    3c9e:	431a      	orrs	r2, r3
    3ca0:	79eb      	ldrb	r3, [r5, #7]
    3ca2:	061b      	lsls	r3, r3, #24
    3ca4:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    3ca6:	4a3b      	ldr	r2, [pc, #236]	; (3d94 <_spi_m_sync_init+0x1f4>)
    3ca8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    3caa:	2280      	movs	r2, #128	; 0x80
    3cac:	0292      	lsls	r2, r2, #10
    3cae:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3cb0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3cb2:	69e3      	ldr	r3, [r4, #28]
    3cb4:	075b      	lsls	r3, r3, #29
    3cb6:	d1fc      	bne.n	3cb2 <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    3cb8:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    3cba:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3cbc:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3cbe:	2330      	movs	r3, #48	; 0x30
    3cc0:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3cc2:	792b      	ldrb	r3, [r5, #4]
    3cc4:	075b      	lsls	r3, r3, #29
    3cc6:	d151      	bne.n	3d6c <_spi_m_sync_init+0x1cc>
    3cc8:	2301      	movs	r3, #1
    3cca:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    3ccc:	7baa      	ldrb	r2, [r5, #14]
    3cce:	7beb      	ldrb	r3, [r5, #15]
    3cd0:	021b      	lsls	r3, r3, #8
    3cd2:	4313      	orrs	r3, r2
    3cd4:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    3cd6:	2000      	movs	r0, #0
}
    3cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    3cda:	2000      	movs	r0, #0
    3cdc:	e780      	b.n	3be0 <_spi_m_sync_init+0x40>
    3cde:	2000      	movs	r0, #0
    3ce0:	e77e      	b.n	3be0 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    3ce2:	2c00      	cmp	r4, #0
    3ce4:	d03c      	beq.n	3d60 <_spi_m_sync_init+0x1c0>
    3ce6:	2d00      	cmp	r5, #0
    3ce8:	d038      	beq.n	3d5c <_spi_m_sync_init+0x1bc>
    3cea:	2001      	movs	r0, #1
    3cec:	4a2a      	ldr	r2, [pc, #168]	; (3d98 <_spi_m_sync_init+0x1f8>)
    3cee:	4925      	ldr	r1, [pc, #148]	; (3d84 <_spi_m_sync_init+0x1e4>)
    3cf0:	4b25      	ldr	r3, [pc, #148]	; (3d88 <_spi_m_sync_init+0x1e8>)
    3cf2:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3cf4:	782b      	ldrb	r3, [r5, #0]
    3cf6:	786a      	ldrb	r2, [r5, #1]
    3cf8:	0212      	lsls	r2, r2, #8
    3cfa:	431a      	orrs	r2, r3
    3cfc:	78ab      	ldrb	r3, [r5, #2]
    3cfe:	041b      	lsls	r3, r3, #16
    3d00:	431a      	orrs	r2, r3
    3d02:	78eb      	ldrb	r3, [r5, #3]
    3d04:	061b      	lsls	r3, r3, #24
    3d06:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    3d08:	4a21      	ldr	r2, [pc, #132]	; (3d90 <_spi_m_sync_init+0x1f0>)
    3d0a:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3d0c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d0e:	69e3      	ldr	r3, [r4, #28]
    3d10:	079b      	lsls	r3, r3, #30
    3d12:	d1fc      	bne.n	3d0e <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    3d14:	792b      	ldrb	r3, [r5, #4]
    3d16:	796a      	ldrb	r2, [r5, #5]
    3d18:	0212      	lsls	r2, r2, #8
    3d1a:	431a      	orrs	r2, r3
    3d1c:	79ab      	ldrb	r3, [r5, #6]
    3d1e:	041b      	lsls	r3, r3, #16
    3d20:	431a      	orrs	r2, r3
    3d22:	79eb      	ldrb	r3, [r5, #7]
    3d24:	061b      	lsls	r3, r3, #24
    3d26:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    3d28:	4a1c      	ldr	r2, [pc, #112]	; (3d9c <_spi_m_sync_init+0x1fc>)
    3d2a:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    3d2c:	4a1c      	ldr	r2, [pc, #112]	; (3da0 <_spi_m_sync_init+0x200>)
    3d2e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3d30:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3d32:	69e3      	ldr	r3, [r4, #28]
    3d34:	075b      	lsls	r3, r3, #29
    3d36:	d1fc      	bne.n	3d32 <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3d38:	7a2b      	ldrb	r3, [r5, #8]
    3d3a:	7a6a      	ldrb	r2, [r5, #9]
    3d3c:	0212      	lsls	r2, r2, #8
    3d3e:	431a      	orrs	r2, r3
    3d40:	7aab      	ldrb	r3, [r5, #10]
    3d42:	041b      	lsls	r3, r3, #16
    3d44:	431a      	orrs	r2, r3
    3d46:	7aeb      	ldrb	r3, [r5, #11]
    3d48:	061b      	lsls	r3, r3, #24
    3d4a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3d4c:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3d4e:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3d50:	2330      	movs	r3, #48	; 0x30
    3d52:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3d54:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    3d56:	2b00      	cmp	r3, #0
    3d58:	d1fc      	bne.n	3d54 <_spi_m_sync_init+0x1b4>
    3d5a:	e7b2      	b.n	3cc2 <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    3d5c:	2000      	movs	r0, #0
    3d5e:	e7c5      	b.n	3cec <_spi_m_sync_init+0x14c>
    3d60:	2000      	movs	r0, #0
    3d62:	e7c3      	b.n	3cec <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    3d64:	2000      	movs	r0, #0
    3d66:	e780      	b.n	3c6a <_spi_m_sync_init+0xca>
    3d68:	2000      	movs	r0, #0
    3d6a:	e77e      	b.n	3c6a <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3d6c:	2302      	movs	r3, #2
    3d6e:	e7ac      	b.n	3cca <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    3d70:	200d      	movs	r0, #13
    3d72:	4240      	negs	r0, r0
    3d74:	e7b0      	b.n	3cd8 <_spi_m_sync_init+0x138>
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	000038f9 	.word	0x000038f9
    3d7c:	000110f8 	.word	0x000110f8
    3d80:	00000952 	.word	0x00000952
    3d84:	00011168 	.word	0x00011168
    3d88:	000033c1 	.word	0x000033c1
    3d8c:	00000917 	.word	0x00000917
    3d90:	fffffefc 	.word	0xfffffefc
    3d94:	fffd1dbf 	.word	0xfffd1dbf
    3d98:	0000092b 	.word	0x0000092b
    3d9c:	fffdddbf 	.word	0xfffdddbf
    3da0:	00020240 	.word	0x00020240

00003da4 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3da4:	b510      	push	{r4, lr}
    3da6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    3da8:	d00d      	beq.n	3dc6 <_spi_m_sync_enable+0x22>
    3daa:	6803      	ldr	r3, [r0, #0]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d008      	beq.n	3dc2 <_spi_m_sync_enable+0x1e>
    3db0:	2001      	movs	r0, #1
    3db2:	4a06      	ldr	r2, [pc, #24]	; (3dcc <_spi_m_sync_enable+0x28>)
    3db4:	4906      	ldr	r1, [pc, #24]	; (3dd0 <_spi_m_sync_enable+0x2c>)
    3db6:	4b07      	ldr	r3, [pc, #28]	; (3dd4 <_spi_m_sync_enable+0x30>)
    3db8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    3dba:	6820      	ldr	r0, [r4, #0]
    3dbc:	4b06      	ldr	r3, [pc, #24]	; (3dd8 <_spi_m_sync_enable+0x34>)
    3dbe:	4798      	blx	r3
}
    3dc0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    3dc2:	2000      	movs	r0, #0
    3dc4:	e7f5      	b.n	3db2 <_spi_m_sync_enable+0xe>
    3dc6:	2000      	movs	r0, #0
    3dc8:	e7f3      	b.n	3db2 <_spi_m_sync_enable+0xe>
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	000009ad 	.word	0x000009ad
    3dd0:	00011168 	.word	0x00011168
    3dd4:	000033c1 	.word	0x000033c1
    3dd8:	00003995 	.word	0x00003995

00003ddc <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dde:	46ce      	mov	lr, r9
    3de0:	4647      	mov	r7, r8
    3de2:	b580      	push	{r7, lr}
    3de4:	b089      	sub	sp, #36	; 0x24
    3de6:	4681      	mov	r9, r0
    3de8:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    3dea:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3dec:	680b      	ldr	r3, [r1, #0]
    3dee:	9303      	str	r3, [sp, #12]
    3df0:	684b      	ldr	r3, [r1, #4]
    3df2:	9304      	str	r3, [sp, #16]
    3df4:	2300      	movs	r3, #0
    3df6:	9305      	str	r3, [sp, #20]
    3df8:	9306      	str	r3, [sp, #24]
    3dfa:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d014      	beq.n	3e2a <_spi_m_sync_trans+0x4e>
    3e00:	2c00      	cmp	r4, #0
    3e02:	d010      	beq.n	3e26 <_spi_m_sync_trans+0x4a>
    3e04:	2001      	movs	r0, #1
    3e06:	4a37      	ldr	r2, [pc, #220]	; (3ee4 <_spi_m_sync_trans+0x108>)
    3e08:	4937      	ldr	r1, [pc, #220]	; (3ee8 <_spi_m_sync_trans+0x10c>)
    3e0a:	4b38      	ldr	r3, [pc, #224]	; (3eec <_spi_m_sync_trans+0x110>)
    3e0c:	4798      	blx	r3
    3e0e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    3e10:	075b      	lsls	r3, r3, #29
    3e12:	d164      	bne.n	3ede <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3e14:	69e3      	ldr	r3, [r4, #28]
    3e16:	079b      	lsls	r3, r3, #30
    3e18:	d1fc      	bne.n	3e14 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3e1a:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3e1c:	079b      	lsls	r3, r3, #30
    3e1e:	d420      	bmi.n	3e62 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    3e20:	2014      	movs	r0, #20
    3e22:	4240      	negs	r0, r0
    3e24:	e056      	b.n	3ed4 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    3e26:	2000      	movs	r0, #0
    3e28:	e7ed      	b.n	3e06 <_spi_m_sync_trans+0x2a>
    3e2a:	2000      	movs	r0, #0
    3e2c:	e7eb      	b.n	3e06 <_spi_m_sync_trans+0x2a>
		return false;
    3e2e:	2200      	movs	r2, #0
    3e30:	e02d      	b.n	3e8e <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    3e32:	7848      	ldrb	r0, [r1, #1]
    3e34:	0200      	lsls	r0, r0, #8
    3e36:	4647      	mov	r7, r8
    3e38:	4307      	orrs	r7, r0
    3e3a:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    3e3c:	3102      	adds	r1, #2
    3e3e:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    3e40:	3201      	adds	r2, #1
    3e42:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    3e44:	4642      	mov	r2, r8
    3e46:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    3e48:	b25b      	sxtb	r3, r3
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	db35      	blt.n	3eba <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    3e4e:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    3e50:	2800      	cmp	r0, #0
    3e52:	db3a      	blt.n	3eca <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3e54:	9805      	ldr	r0, [sp, #20]
    3e56:	68ab      	ldr	r3, [r5, #8]
    3e58:	4298      	cmp	r0, r3
    3e5a:	d302      	bcc.n	3e62 <_spi_m_sync_trans+0x86>
    3e5c:	9a06      	ldr	r2, [sp, #24]
    3e5e:	4293      	cmp	r3, r2
    3e60:	d933      	bls.n	3eca <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3e62:	7e23      	ldrb	r3, [r4, #24]
    3e64:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3e66:	075a      	lsls	r2, r3, #29
    3e68:	d5e1      	bpl.n	3e2e <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    3e6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    3e6c:	9a04      	ldr	r2, [sp, #16]
    3e6e:	2a00      	cmp	r2, #0
    3e70:	d008      	beq.n	3e84 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    3e72:	1c50      	adds	r0, r2, #1
    3e74:	9004      	str	r0, [sp, #16]
    3e76:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    3e78:	2e01      	cmp	r6, #1
    3e7a:	d903      	bls.n	3e84 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    3e7c:	1c90      	adds	r0, r2, #2
    3e7e:	9004      	str	r0, [sp, #16]
    3e80:	0a09      	lsrs	r1, r1, #8
    3e82:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    3e84:	9a06      	ldr	r2, [sp, #24]
    3e86:	9201      	str	r2, [sp, #4]
    3e88:	3201      	adds	r2, #1
    3e8a:	9206      	str	r2, [sp, #24]
	return true;
    3e8c:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    3e8e:	2a00      	cmp	r2, #0
    3e90:	d1da      	bne.n	3e48 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    3e92:	9906      	ldr	r1, [sp, #24]
    3e94:	9a05      	ldr	r2, [sp, #20]
    3e96:	4291      	cmp	r1, r2
    3e98:	d3d6      	bcc.n	3e48 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    3e9a:	4649      	mov	r1, r9
    3e9c:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    3e9e:	07d9      	lsls	r1, r3, #31
    3ea0:	d5d2      	bpl.n	3e48 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    3ea2:	9903      	ldr	r1, [sp, #12]
    3ea4:	2900      	cmp	r1, #0
    3ea6:	d006      	beq.n	3eb6 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    3ea8:	1c48      	adds	r0, r1, #1
    3eaa:	9003      	str	r0, [sp, #12]
    3eac:	7808      	ldrb	r0, [r1, #0]
    3eae:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    3eb0:	2e01      	cmp	r6, #1
    3eb2:	d8be      	bhi.n	3e32 <_spi_m_sync_trans+0x56>
    3eb4:	e7c4      	b.n	3e40 <_spi_m_sync_trans+0x64>
		data = dummy;
    3eb6:	4680      	mov	r8, r0
    3eb8:	e7c2      	b.n	3e40 <_spi_m_sync_trans+0x64>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    3eba:	2301      	movs	r3, #1
    3ebc:	425b      	negs	r3, r3
    3ebe:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3ec0:	3381      	adds	r3, #129	; 0x81
    3ec2:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    3ec4:	2013      	movs	r0, #19
    3ec6:	4240      	negs	r0, r0
    3ec8:	e7c2      	b.n	3e50 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    3eca:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    3ecc:	079b      	lsls	r3, r3, #30
    3ece:	d0fc      	beq.n	3eca <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    3ed0:	2303      	movs	r3, #3
    3ed2:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    3ed4:	b009      	add	sp, #36	; 0x24
    3ed6:	bc0c      	pop	{r2, r3}
    3ed8:	4690      	mov	r8, r2
    3eda:	4699      	mov	r9, r3
    3edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    3ede:	2004      	movs	r0, #4
    3ee0:	4240      	negs	r0, r0
    3ee2:	e7f7      	b.n	3ed4 <_spi_m_sync_trans+0xf8>
    3ee4:	00000ab2 	.word	0x00000ab2
    3ee8:	00011168 	.word	0x00011168
    3eec:	000033c1 	.word	0x000033c1

00003ef0 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
    3ef0:	4a14      	ldr	r2, [pc, #80]	; (3f44 <_sysctrl_init_sources+0x54>)
    3ef2:	2366      	movs	r3, #102	; 0x66
    3ef4:	8293      	strh	r3, [r2, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3ef6:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    3ef8:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3efa:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3efc:	0f9b      	lsrs	r3, r3, #30
    3efe:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3f00:	0409      	lsls	r1, r1, #16
    3f02:	4811      	ldr	r0, [pc, #68]	; (3f48 <_sysctrl_init_sources+0x58>)
    3f04:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    3f06:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    3f08:	2102      	movs	r1, #2
    3f0a:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3f0c:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    3f0e:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    3f10:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    3f12:	041b      	lsls	r3, r3, #16
    3f14:	21fe      	movs	r1, #254	; 0xfe
    3f16:	03c9      	lsls	r1, r1, #15
    3f18:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    3f1a:	2146      	movs	r1, #70	; 0x46
    3f1c:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    3f1e:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3f20:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    3f22:	3927      	subs	r1, #39	; 0x27
    3f24:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    3f26:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
    3f28:	4b06      	ldr	r3, [pc, #24]	; (3f44 <_sysctrl_init_sources+0x54>)
    3f2a:	68db      	ldr	r3, [r3, #12]
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
    3f2c:	079b      	lsls	r3, r3, #30
    3f2e:	d5fb      	bpl.n	3f28 <_sysctrl_init_sources+0x38>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3f30:	4b04      	ldr	r3, [pc, #16]	; (3f44 <_sysctrl_init_sources+0x54>)
    3f32:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    3f34:	075b      	lsls	r3, r3, #29
    3f36:	d5fb      	bpl.n	3f30 <_sysctrl_init_sources+0x40>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3f38:	4b02      	ldr	r3, [pc, #8]	; (3f44 <_sysctrl_init_sources+0x54>)
    3f3a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    3f3c:	071b      	lsls	r3, r3, #28
    3f3e:	d5fb      	bpl.n	3f38 <_sysctrl_init_sources+0x48>
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    3f40:	4770      	bx	lr
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	40000800 	.word	0x40000800
    3f48:	0fff0000 	.word	0x0fff0000

00003f4c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3f4c:	2202      	movs	r2, #2
    3f4e:	4b1f      	ldr	r3, [pc, #124]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3f50:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3f52:	4b1e      	ldr	r3, [pc, #120]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3f54:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3f56:	06db      	lsls	r3, r3, #27
    3f58:	d5fb      	bpl.n	3f52 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    3f5a:	4a1d      	ldr	r2, [pc, #116]	; (3fd0 <_sysctrl_init_referenced_generators+0x84>)
    3f5c:	4b1b      	ldr	r3, [pc, #108]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3f5e:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3f60:	4b1c      	ldr	r3, [pc, #112]	; (3fd4 <_sysctrl_init_referenced_generators+0x88>)
    3f62:	681b      	ldr	r3, [r3, #0]
    3f64:	0e9b      	lsrs	r3, r3, #26
    3f66:	2b3f      	cmp	r3, #63	; 0x3f
    3f68:	d028      	beq.n	3fbc <_sysctrl_init_referenced_generators+0x70>
    3f6a:	029b      	lsls	r3, r3, #10
    3f6c:	2280      	movs	r2, #128	; 0x80
    3f6e:	0092      	lsls	r2, r2, #2
    3f70:	431a      	orrs	r2, r3
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    3f72:	4b16      	ldr	r3, [pc, #88]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3f74:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    3f76:	2293      	movs	r2, #147	; 0x93
    3f78:	0052      	lsls	r2, r2, #1
    3f7a:	849a      	strh	r2, [r3, #36]	; 0x24
}

static inline void hri_sysctrl_write_DPLLCTRLA_reg(const void *const hw, hri_sysctrl_dpllctrla_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLA.reg = data;
    3f7c:	2142      	movs	r1, #66	; 0x42
    3f7e:	3ae2      	subs	r2, #226	; 0xe2
    3f80:	5499      	strb	r1, [r3, r2]
}

static inline void hri_sysctrl_write_DPLLRATIO_reg(const void *const hw, hri_sysctrl_dpllratio_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLRATIO.reg = data;
    3f82:	4a15      	ldr	r2, [pc, #84]	; (3fd8 <_sysctrl_init_referenced_generators+0x8c>)
    3f84:	649a      	str	r2, [r3, #72]	; 0x48
}

static inline void hri_sysctrl_write_DPLLCTRLB_reg(const void *const hw, hri_sysctrl_dpllctrlb_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DPLLCTRLB.reg = data;
    3f86:	2200      	movs	r2, #0
    3f88:	64da      	str	r2, [r3, #76]	; 0x4c
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    3f8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    3f8c:	075b      	lsls	r3, r3, #29
    3f8e:	d518      	bpl.n	3fc2 <_sysctrl_init_referenced_generators+0x76>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3f90:	4b0e      	ldr	r3, [pc, #56]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3f92:	68db      	ldr	r3, [r3, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    3f94:	06db      	lsls	r3, r3, #27
    3f96:	d5fb      	bpl.n	3f90 <_sysctrl_init_referenced_generators+0x44>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE) >> SYSCTRL_DPLLSTATUS_ENABLE_Pos;
    3f98:	2350      	movs	r3, #80	; 0x50
    3f9a:	4a0c      	ldr	r2, [pc, #48]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3f9c:	5cd3      	ldrb	r3, [r2, r3]
#endif
#endif

#if CONF_DPLL_CONFIG == 1
#if CONF_DPLL_ENABLE == 1
	while (!(hri_sysctrl_get_DPLLSTATUS_ENABLE_bit(hw) || hri_sysctrl_get_DPLLSTATUS_LOCK_bit(hw)
    3f9e:	075b      	lsls	r3, r3, #29
    3fa0:	d407      	bmi.n	3fb2 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_LOCK) >> SYSCTRL_DPLLSTATUS_LOCK_Pos;
    3fa2:	2350      	movs	r3, #80	; 0x50
    3fa4:	5cd3      	ldrb	r3, [r2, r3]
    3fa6:	07db      	lsls	r3, r3, #31
    3fa8:	d403      	bmi.n	3fb2 <_sysctrl_init_referenced_generators+0x66>
	return (((Sysctrl *)hw)->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) >> SYSCTRL_DPLLSTATUS_CLKRDY_Pos;
    3faa:	2350      	movs	r3, #80	; 0x50
    3fac:	5cd3      	ldrb	r3, [r2, r3]
    3fae:	079b      	lsls	r3, r3, #30
    3fb0:	d5f2      	bpl.n	3f98 <_sysctrl_init_referenced_generators+0x4c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    3fb2:	4b0a      	ldr	r3, [pc, #40]	; (3fdc <_sysctrl_init_referenced_generators+0x90>)
    3fb4:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    3fb6:	09db      	lsrs	r3, r3, #7
    3fb8:	d1fb      	bne.n	3fb2 <_sysctrl_init_referenced_generators+0x66>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3fba:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    3fbc:	22fc      	movs	r2, #252	; 0xfc
    3fbe:	01d2      	lsls	r2, r2, #7
    3fc0:	e7d7      	b.n	3f72 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    3fc2:	4b02      	ldr	r3, [pc, #8]	; (3fcc <_sysctrl_init_referenced_generators+0x80>)
    3fc4:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    3fc6:	06db      	lsls	r3, r3, #27
    3fc8:	d5fb      	bpl.n	3fc2 <_sysctrl_init_referenced_generators+0x76>
    3fca:	e7e5      	b.n	3f98 <_sysctrl_init_referenced_generators+0x4c>
    3fcc:	40000800 	.word	0x40000800
    3fd0:	0401bb80 	.word	0x0401bb80
    3fd4:	00806024 	.word	0x00806024
    3fd8:	000e05b7 	.word	0x000e05b7
    3fdc:	40000c00 	.word	0x40000c00

00003fe0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3fe0:	4b02      	ldr	r3, [pc, #8]	; (3fec <_system_time_init+0xc>)
    3fe2:	4a03      	ldr	r2, [pc, #12]	; (3ff0 <_system_time_init+0x10>)
    3fe4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3fe6:	2205      	movs	r2, #5
    3fe8:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    3fea:	4770      	bx	lr
    3fec:	e000e010 	.word	0xe000e010
    3ff0:	00ffffff 	.word	0x00ffffff

00003ff4 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3ff4:	b510      	push	{r4, lr}
	_system_time_init(hw);
    3ff6:	4b01      	ldr	r3, [pc, #4]	; (3ffc <_delay_init+0x8>)
    3ff8:	4798      	blx	r3
}
    3ffa:	bd10      	pop	{r4, pc}
    3ffc:	00003fe1 	.word	0x00003fe1

00004000 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4000:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    4002:	e00b      	b.n	401c <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    4004:	4b0b      	ldr	r3, [pc, #44]	; (4034 <_delay_cycles+0x34>)
    4006:	480c      	ldr	r0, [pc, #48]	; (4038 <_delay_cycles+0x38>)
    4008:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    400a:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    400c:	4b09      	ldr	r3, [pc, #36]	; (4034 <_delay_cycles+0x34>)
    400e:	681b      	ldr	r3, [r3, #0]
    4010:	03db      	lsls	r3, r3, #15
    4012:	d5fb      	bpl.n	400c <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    4014:	4b09      	ldr	r3, [pc, #36]	; (403c <_delay_cycles+0x3c>)
    4016:	469c      	mov	ip, r3
    4018:	4461      	add	r1, ip
	while (n--) {
    401a:	0010      	movs	r0, r2
    401c:	1e42      	subs	r2, r0, #1
    401e:	b2d2      	uxtb	r2, r2
    4020:	2800      	cmp	r0, #0
    4022:	d1ef      	bne.n	4004 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    4024:	4b03      	ldr	r3, [pc, #12]	; (4034 <_delay_cycles+0x34>)
    4026:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4028:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    402a:	4b02      	ldr	r3, [pc, #8]	; (4034 <_delay_cycles+0x34>)
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	03db      	lsls	r3, r3, #15
    4030:	d5fb      	bpl.n	402a <_delay_cycles+0x2a>
		;
}
    4032:	4770      	bx	lr
    4034:	e000e010 	.word	0xe000e010
    4038:	00ffffff 	.word	0x00ffffff
    403c:	ff000001 	.word	0xff000001

00004040 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4040:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    4042:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4044:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4046:	07d2      	lsls	r2, r2, #31
    4048:	d400      	bmi.n	404c <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    404a:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    404c:	2201      	movs	r2, #1
    404e:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    4050:	6803      	ldr	r3, [r0, #0]
    4052:	4798      	blx	r3
}
    4054:	e7f9      	b.n	404a <tc_interrupt_handler+0xa>
	...

00004058 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    4058:	4b02      	ldr	r3, [pc, #8]	; (4064 <tc_get_hardware_index+0xc>)
    405a:	469c      	mov	ip, r3
    405c:	4460      	add	r0, ip
    405e:	0a80      	lsrs	r0, r0, #10
    4060:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    4062:	4770      	bx	lr
    4064:	bdffd400 	.word	0xbdffd400

00004068 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    4068:	4b06      	ldr	r3, [pc, #24]	; (4084 <_tc_init_irq_param+0x1c>)
    406a:	4298      	cmp	r0, r3
    406c:	d003      	beq.n	4076 <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    406e:	4b06      	ldr	r3, [pc, #24]	; (4088 <_tc_init_irq_param+0x20>)
    4070:	4298      	cmp	r0, r3
    4072:	d003      	beq.n	407c <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    4074:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    4076:	4b05      	ldr	r3, [pc, #20]	; (408c <_tc_init_irq_param+0x24>)
    4078:	6019      	str	r1, [r3, #0]
    407a:	e7f8      	b.n	406e <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    407c:	4b03      	ldr	r3, [pc, #12]	; (408c <_tc_init_irq_param+0x24>)
    407e:	6059      	str	r1, [r3, #4]
}
    4080:	e7f8      	b.n	4074 <_tc_init_irq_param+0xc>
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	42002c00 	.word	0x42002c00
    4088:	42003000 	.word	0x42003000
    408c:	20000f68 	.word	0x20000f68

00004090 <get_tc_index>:
{
    4090:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    4092:	4b0e      	ldr	r3, [pc, #56]	; (40cc <get_tc_index+0x3c>)
    4094:	4798      	blx	r3
    4096:	3003      	adds	r0, #3
    4098:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    409a:	2300      	movs	r3, #0
    409c:	2b01      	cmp	r3, #1
    409e:	d80b      	bhi.n	40b8 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    40a0:	009a      	lsls	r2, r3, #2
    40a2:	18d2      	adds	r2, r2, r3
    40a4:	0091      	lsls	r1, r2, #2
    40a6:	4a0a      	ldr	r2, [pc, #40]	; (40d0 <get_tc_index+0x40>)
    40a8:	5c8a      	ldrb	r2, [r1, r2]
    40aa:	4290      	cmp	r0, r2
    40ac:	d002      	beq.n	40b4 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    40ae:	3301      	adds	r3, #1
    40b0:	b2db      	uxtb	r3, r3
    40b2:	e7f3      	b.n	409c <get_tc_index+0xc>
			return i;
    40b4:	b258      	sxtb	r0, r3
    40b6:	e007      	b.n	40c8 <get_tc_index+0x38>
	ASSERT(false);
    40b8:	22a4      	movs	r2, #164	; 0xa4
    40ba:	0052      	lsls	r2, r2, #1
    40bc:	4905      	ldr	r1, [pc, #20]	; (40d4 <get_tc_index+0x44>)
    40be:	2000      	movs	r0, #0
    40c0:	4b05      	ldr	r3, [pc, #20]	; (40d8 <get_tc_index+0x48>)
    40c2:	4798      	blx	r3
	return -1;
    40c4:	2001      	movs	r0, #1
    40c6:	4240      	negs	r0, r0
}
    40c8:	bd10      	pop	{r4, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	00004059 	.word	0x00004059
    40d0:	00011184 	.word	0x00011184
    40d4:	000111ac 	.word	0x000111ac
    40d8:	000033c1 	.word	0x000033c1

000040dc <_timer_init>:
{
    40dc:	b570      	push	{r4, r5, r6, lr}
    40de:	0006      	movs	r6, r0
    40e0:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    40e2:	0008      	movs	r0, r1
    40e4:	4b3f      	ldr	r3, [pc, #252]	; (41e4 <_timer_init+0x108>)
    40e6:	4798      	blx	r3
    40e8:	0005      	movs	r5, r0
	device->hw = hw;
    40ea:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    40ec:	228d      	movs	r2, #141	; 0x8d
    40ee:	493e      	ldr	r1, [pc, #248]	; (41e8 <_timer_init+0x10c>)
    40f0:	2001      	movs	r0, #1
    40f2:	4b3e      	ldr	r3, [pc, #248]	; (41ec <_timer_init+0x110>)
    40f4:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    40f6:	7be3      	ldrb	r3, [r4, #15]
    40f8:	09db      	lsrs	r3, r3, #7
    40fa:	d1fc      	bne.n	40f6 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    40fc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    40fe:	079b      	lsls	r3, r3, #30
    4100:	d504      	bpl.n	410c <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4102:	2300      	movs	r3, #0
    4104:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    4106:	7be3      	ldrb	r3, [r4, #15]
    4108:	09db      	lsrs	r3, r3, #7
    410a:	d1fc      	bne.n	4106 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    410c:	2301      	movs	r3, #1
    410e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    4110:	7be3      	ldrb	r3, [r4, #15]
    4112:	09db      	lsrs	r3, r3, #7
    4114:	d1fc      	bne.n	4110 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4116:	00aa      	lsls	r2, r5, #2
    4118:	1952      	adds	r2, r2, r5
    411a:	0091      	lsls	r1, r2, #2
    411c:	4b34      	ldr	r3, [pc, #208]	; (41f0 <_timer_init+0x114>)
    411e:	185b      	adds	r3, r3, r1
    4120:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4122:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4124:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    4126:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4128:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    412a:	8163      	strh	r3, [r4, #10]
    412c:	230c      	movs	r3, #12
    412e:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4130:	2b08      	cmp	r3, #8
    4132:	d039      	beq.n	41a8 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4134:	2b00      	cmp	r3, #0
    4136:	d143      	bne.n	41c0 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    4138:	4a2d      	ldr	r2, [pc, #180]	; (41f0 <_timer_init+0x114>)
    413a:	00ab      	lsls	r3, r5, #2
    413c:	1958      	adds	r0, r3, r5
    413e:	0081      	lsls	r1, r0, #2
    4140:	0008      	movs	r0, r1
    4142:	1851      	adds	r1, r2, r1
    4144:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4146:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    4148:	1812      	adds	r2, r2, r0
    414a:	8a13      	ldrh	r3, [r2, #16]
    414c:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    414e:	2301      	movs	r3, #1
    4150:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    4152:	0031      	movs	r1, r6
    4154:	0020      	movs	r0, r4
    4156:	4b27      	ldr	r3, [pc, #156]	; (41f4 <_timer_init+0x118>)
    4158:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    415a:	0020      	movs	r0, r4
    415c:	4b26      	ldr	r3, [pc, #152]	; (41f8 <_timer_init+0x11c>)
    415e:	4798      	blx	r3
    4160:	3012      	adds	r0, #18
    4162:	b2c0      	uxtb	r0, r0
    4164:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4166:	2b00      	cmp	r3, #0
    4168:	db0a      	blt.n	4180 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    416a:	211f      	movs	r1, #31
    416c:	4001      	ands	r1, r0
    416e:	2201      	movs	r2, #1
    4170:	408a      	lsls	r2, r1
    4172:	2180      	movs	r1, #128	; 0x80
    4174:	4c21      	ldr	r4, [pc, #132]	; (41fc <_timer_init+0x120>)
    4176:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    4178:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    417c:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    4180:	2b00      	cmp	r3, #0
    4182:	db07      	blt.n	4194 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4184:	211f      	movs	r1, #31
    4186:	4001      	ands	r1, r0
    4188:	2201      	movs	r2, #1
    418a:	408a      	lsls	r2, r1
    418c:	21c0      	movs	r1, #192	; 0xc0
    418e:	0049      	lsls	r1, r1, #1
    4190:	4c1a      	ldr	r4, [pc, #104]	; (41fc <_timer_init+0x120>)
    4192:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    4194:	2b00      	cmp	r3, #0
    4196:	db05      	blt.n	41a4 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4198:	231f      	movs	r3, #31
    419a:	4018      	ands	r0, r3
    419c:	3b1e      	subs	r3, #30
    419e:	4083      	lsls	r3, r0
    41a0:	4a16      	ldr	r2, [pc, #88]	; (41fc <_timer_init+0x120>)
    41a2:	6013      	str	r3, [r2, #0]
}
    41a4:	2000      	movs	r0, #0
    41a6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    41a8:	4a11      	ldr	r2, [pc, #68]	; (41f0 <_timer_init+0x114>)
    41aa:	00ab      	lsls	r3, r5, #2
    41ac:	1958      	adds	r0, r3, r5
    41ae:	0081      	lsls	r1, r0, #2
    41b0:	0008      	movs	r0, r1
    41b2:	1851      	adds	r1, r2, r1
    41b4:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    41b6:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    41b8:	1812      	adds	r2, r2, r0
    41ba:	6913      	ldr	r3, [r2, #16]
    41bc:	61e3      	str	r3, [r4, #28]
    41be:	e7c6      	b.n	414e <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    41c0:	2b04      	cmp	r3, #4
    41c2:	d1c4      	bne.n	414e <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    41c4:	490a      	ldr	r1, [pc, #40]	; (41f0 <_timer_init+0x114>)
    41c6:	00ab      	lsls	r3, r5, #2
    41c8:	1958      	adds	r0, r3, r5
    41ca:	0082      	lsls	r2, r0, #2
    41cc:	188a      	adds	r2, r1, r2
    41ce:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    41d0:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    41d2:	7c12      	ldrb	r2, [r2, #16]
    41d4:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    41d6:	195d      	adds	r5, r3, r5
    41d8:	00ab      	lsls	r3, r5, #2
    41da:	18c9      	adds	r1, r1, r3
    41dc:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    41de:	7523      	strb	r3, [r4, #20]
    41e0:	e7b5      	b.n	414e <_timer_init+0x72>
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	00004091 	.word	0x00004091
    41e8:	000111ac 	.word	0x000111ac
    41ec:	000033c1 	.word	0x000033c1
    41f0:	00011184 	.word	0x00011184
    41f4:	00004069 	.word	0x00004069
    41f8:	00004059 	.word	0x00004059
    41fc:	e000e100 	.word	0xe000e100

00004200 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4200:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    4202:	8813      	ldrh	r3, [r2, #0]
    4204:	2102      	movs	r1, #2
    4206:	430b      	orrs	r3, r1
    4208:	b29b      	uxth	r3, r3
    420a:	8013      	strh	r3, [r2, #0]
}
    420c:	4770      	bx	lr

0000420e <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    420e:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4210:	8813      	ldrh	r3, [r2, #0]
    4212:	2102      	movs	r1, #2
    4214:	438b      	bics	r3, r1
    4216:	8013      	strh	r3, [r2, #0]
}
    4218:	4770      	bx	lr

0000421a <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    421a:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    421c:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    421e:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    4220:	2001      	movs	r0, #1
    4222:	4018      	ands	r0, r3
}
    4224:	4770      	bx	lr

00004226 <_tc_get_timer>:
}
    4226:	2000      	movs	r0, #0
    4228:	4770      	bx	lr
	...

0000422c <_timer_set_irq>:
{
    422c:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    422e:	68c0      	ldr	r0, [r0, #12]
    4230:	4b03      	ldr	r3, [pc, #12]	; (4240 <_timer_set_irq+0x14>)
    4232:	4798      	blx	r3
    4234:	3012      	adds	r0, #18
    4236:	b2c0      	uxtb	r0, r0
    4238:	4b02      	ldr	r3, [pc, #8]	; (4244 <_timer_set_irq+0x18>)
    423a:	4798      	blx	r3
}
    423c:	bd10      	pop	{r4, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	00004059 	.word	0x00004059
    4244:	00003595 	.word	0x00003595

00004248 <TC3_Handler>:
{
    4248:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    424a:	4b02      	ldr	r3, [pc, #8]	; (4254 <TC3_Handler+0xc>)
    424c:	6818      	ldr	r0, [r3, #0]
    424e:	4b02      	ldr	r3, [pc, #8]	; (4258 <TC3_Handler+0x10>)
    4250:	4798      	blx	r3
}
    4252:	bd10      	pop	{r4, pc}
    4254:	20000f68 	.word	0x20000f68
    4258:	00004041 	.word	0x00004041

0000425c <TC4_Handler>:
{
    425c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    425e:	4b02      	ldr	r3, [pc, #8]	; (4268 <TC4_Handler+0xc>)
    4260:	6858      	ldr	r0, [r3, #4]
    4262:	4b02      	ldr	r3, [pc, #8]	; (426c <TC4_Handler+0x10>)
    4264:	4798      	blx	r3
}
    4266:	bd10      	pop	{r4, pc}
    4268:	20000f68 	.word	0x20000f68
    426c:	00004041 	.word	0x00004041

00004270 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    4270:	2000      	movs	r0, #0
    4272:	4770      	bx	lr

00004274 <_usb_load_calib>:
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 55
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    4274:	4b12      	ldr	r3, [pc, #72]	; (42c0 <_usb_load_calib+0x4c>)
    4276:	681a      	ldr	r2, [r3, #0]
    4278:	0b53      	lsrs	r3, r2, #13
	uint32_t pad_transn
    427a:	211f      	movs	r1, #31
    427c:	400b      	ands	r3, r1
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    427e:	0c90      	lsrs	r0, r2, #18
	uint32_t pad_transp
    4280:	4001      	ands	r1, r0
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    4282:	0dd0      	lsrs	r0, r2, #23
    4284:	2207      	movs	r2, #7
    4286:	4002      	ands	r2, r0
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0x1F) {
    4288:	2b1f      	cmp	r3, #31
    428a:	d012      	beq.n	42b2 <_usb_load_calib+0x3e>
		pad_transn = 5;
	}
	if (pad_transp == 0x1F) {
    428c:	291f      	cmp	r1, #31
    428e:	d012      	beq.n	42b6 <_usb_load_calib+0x42>
		pad_transp = 29;
	}
	if (pad_trim == 0x7) {
    4290:	2a07      	cmp	r2, #7
    4292:	d012      	beq.n	42ba <_usb_load_calib+0x46>
		pad_trim = 5;
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    4294:	019b      	lsls	r3, r3, #6
    4296:	430b      	orrs	r3, r1
    4298:	0312      	lsls	r2, r2, #12
    429a:	4313      	orrs	r3, r2
    429c:	4a09      	ldr	r2, [pc, #36]	; (42c4 <_usb_load_calib+0x50>)
    429e:	8513      	strh	r3, [r2, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    42a0:	78d3      	ldrb	r3, [r2, #3]
    42a2:	2103      	movs	r1, #3
    42a4:	430b      	orrs	r3, r1
    42a6:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    42a8:	78d3      	ldrb	r3, [r2, #3]
    42aa:	210c      	movs	r1, #12
    42ac:	430b      	orrs	r3, r1
    42ae:	70d3      	strb	r3, [r2, #3]
}
    42b0:	4770      	bx	lr
		pad_transn = 5;
    42b2:	3b1a      	subs	r3, #26
    42b4:	e7ea      	b.n	428c <_usb_load_calib+0x18>
		pad_transp = 29;
    42b6:	3902      	subs	r1, #2
    42b8:	e7ea      	b.n	4290 <_usb_load_calib+0x1c>
		pad_trim = 5;
    42ba:	3a02      	subs	r2, #2
    42bc:	e7ea      	b.n	4294 <_usb_load_calib+0x20>
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	00806024 	.word	0x00806024
    42c4:	41005000 	.word	0x41005000

000042c8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    42c8:	b510      	push	{r4, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    42ca:	7c83      	ldrb	r3, [r0, #18]
    42cc:	220f      	movs	r2, #15
    42ce:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    42d0:	7cc1      	ldrb	r1, [r0, #19]
    42d2:	3a08      	subs	r2, #8
    42d4:	400a      	ands	r2, r1

	if (!is_ctrl) {
    42d6:	2a01      	cmp	r2, #1
    42d8:	d00d      	beq.n	42f6 <_usb_d_dev_handle_setup+0x2e>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    42da:	001a      	movs	r2, r3
    42dc:	3208      	adds	r2, #8
    42de:	0152      	lsls	r2, r2, #5
    42e0:	4919      	ldr	r1, [pc, #100]	; (4348 <_usb_d_dev_handle_setup+0x80>)
    42e2:	468c      	mov	ip, r1
    42e4:	4462      	add	r2, ip
    42e6:	2110      	movs	r1, #16
    42e8:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    42ea:	015b      	lsls	r3, r3, #5
    42ec:	4a17      	ldr	r2, [pc, #92]	; (434c <_usb_d_dev_handle_setup+0x84>)
    42ee:	4694      	mov	ip, r2
    42f0:	4463      	add	r3, ip
    42f2:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    42f4:	bd10      	pop	{r4, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    42f6:	064a      	lsls	r2, r1, #25
    42f8:	d50c      	bpl.n	4314 <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    42fa:	7cc2      	ldrb	r2, [r0, #19]
    42fc:	2140      	movs	r1, #64	; 0x40
    42fe:	438a      	bics	r2, r1
    4300:	74c2      	strb	r2, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4302:	001a      	movs	r2, r3
    4304:	3208      	adds	r2, #8
    4306:	0152      	lsls	r2, r2, #5
    4308:	4c0f      	ldr	r4, [pc, #60]	; (4348 <_usb_d_dev_handle_setup+0x80>)
    430a:	46a4      	mov	ip, r4
    430c:	4462      	add	r2, ip
    430e:	2480      	movs	r4, #128	; 0x80
    4310:	7114      	strb	r4, [r2, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4312:	7151      	strb	r1, [r2, #5]
	ept->flags.bits.is_stalled = 0;
    4314:	7cc2      	ldrb	r2, [r0, #19]
    4316:	2108      	movs	r1, #8
    4318:	438a      	bics	r2, r1
    431a:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    431c:	015a      	lsls	r2, r3, #5
    431e:	490c      	ldr	r1, [pc, #48]	; (4350 <_usb_d_dev_handle_setup+0x88>)
    4320:	1889      	adds	r1, r1, r2
    4322:	2400      	movs	r4, #0
    4324:	728c      	strb	r4, [r1, #10]
    4326:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4328:	3308      	adds	r3, #8
    432a:	015b      	lsls	r3, r3, #5
    432c:	4906      	ldr	r1, [pc, #24]	; (4348 <_usb_d_dev_handle_setup+0x80>)
    432e:	468c      	mov	ip, r1
    4330:	4463      	add	r3, ip
    4332:	216f      	movs	r1, #111	; 0x6f
    4334:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4336:	4b05      	ldr	r3, [pc, #20]	; (434c <_usb_d_dev_handle_setup+0x84>)
    4338:	469c      	mov	ip, r3
    433a:	4462      	add	r2, ip
    433c:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    433e:	4b05      	ldr	r3, [pc, #20]	; (4354 <_usb_d_dev_handle_setup+0x8c>)
    4340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4342:	7c80      	ldrb	r0, [r0, #18]
    4344:	4798      	blx	r3
    4346:	e7d5      	b.n	42f4 <_usb_d_dev_handle_setup+0x2c>
    4348:	41005000 	.word	0x41005000
    434c:	41005108 	.word	0x41005108
    4350:	20000f70 	.word	0x20000f70
    4354:	20000ff0 	.word	0x20000ff0

00004358 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    4358:	b510      	push	{r4, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    435a:	7c82      	ldrb	r2, [r0, #18]
    435c:	230f      	movs	r3, #15
    435e:	4013      	ands	r3, r2
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4360:	2220      	movs	r2, #32
    4362:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4364:	b2d2      	uxtb	r2, r2
    4366:	015b      	lsls	r3, r3, #5
    4368:	4905      	ldr	r1, [pc, #20]	; (4380 <_usb_d_dev_handle_stall+0x28>)
    436a:	468c      	mov	ip, r1
    436c:	4463      	add	r3, ip
    436e:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    4370:	4b04      	ldr	r3, [pc, #16]	; (4384 <_usb_d_dev_handle_stall+0x2c>)
    4372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4374:	6882      	ldr	r2, [r0, #8]
    4376:	7c80      	ldrb	r0, [r0, #18]
    4378:	2101      	movs	r1, #1
    437a:	4798      	blx	r3
}
    437c:	bd10      	pop	{r4, pc}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	41005108 	.word	0x41005108
    4384:	20000ff0 	.word	0x20000ff0

00004388 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4388:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    438a:	7c83      	ldrb	r3, [r0, #18]
    438c:	2bff      	cmp	r3, #255	; 0xff
    438e:	d002      	beq.n	4396 <_usb_d_dev_trans_done+0xe>
    4390:	7cc2      	ldrb	r2, [r0, #19]
    4392:	0652      	lsls	r2, r2, #25
    4394:	d400      	bmi.n	4398 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    4396:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    4398:	7cc2      	ldrb	r2, [r0, #19]
    439a:	2440      	movs	r4, #64	; 0x40
    439c:	43a2      	bics	r2, r4
    439e:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    43a0:	4a02      	ldr	r2, [pc, #8]	; (43ac <_usb_d_dev_trans_done+0x24>)
    43a2:	6b14      	ldr	r4, [r2, #48]	; 0x30
    43a4:	6882      	ldr	r2, [r0, #8]
    43a6:	0018      	movs	r0, r3
    43a8:	47a0      	blx	r4
    43aa:	e7f4      	b.n	4396 <_usb_d_dev_trans_done+0xe>
    43ac:	20000ff0 	.word	0x20000ff0

000043b0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    43b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b2:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    43b4:	7c84      	ldrb	r4, [r0, #18]
    43b6:	230f      	movs	r3, #15
    43b8:	4023      	ands	r3, r4
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    43ba:	4d18      	ldr	r5, [pc, #96]	; (441c <_usb_d_dev_trans_stop+0x6c>)
    43bc:	882e      	ldrh	r6, [r5, #0]
    43be:	ad01      	add	r5, sp, #4
    43c0:	802e      	strh	r6, [r5, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    43c2:	2cff      	cmp	r4, #255	; 0xff
    43c4:	d01e      	beq.n	4404 <_usb_d_dev_trans_stop+0x54>
    43c6:	7cc4      	ldrb	r4, [r0, #19]
    43c8:	0664      	lsls	r4, r4, #25
    43ca:	d51b      	bpl.n	4404 <_usb_d_dev_trans_stop+0x54>
		return;
	}
	/* Stop transfer */
	if (dir) {
    43cc:	2900      	cmp	r1, #0
    43ce:	d01b      	beq.n	4408 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    43d0:	001c      	movs	r4, r3
    43d2:	3408      	adds	r4, #8
    43d4:	0164      	lsls	r4, r4, #5
    43d6:	4d12      	ldr	r5, [pc, #72]	; (4420 <_usb_d_dev_trans_stop+0x70>)
    43d8:	46ac      	mov	ip, r5
    43da:	4464      	add	r4, ip
    43dc:	2580      	movs	r5, #128	; 0x80
    43de:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    43e0:	ad01      	add	r5, sp, #4
    43e2:	5c6e      	ldrb	r6, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    43e4:	001c      	movs	r4, r3
    43e6:	3408      	adds	r4, #8
    43e8:	0164      	lsls	r4, r4, #5
    43ea:	4f0d      	ldr	r7, [pc, #52]	; (4420 <_usb_d_dev_trans_stop+0x70>)
    43ec:	46bc      	mov	ip, r7
    43ee:	4464      	add	r4, ip
    43f0:	71e6      	strb	r6, [r4, #7]
	_usbd_ep_int_dis(epn, intflags[dir]);
    43f2:	5c69      	ldrb	r1, [r5, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    43f4:	015b      	lsls	r3, r3, #5
    43f6:	4c0b      	ldr	r4, [pc, #44]	; (4424 <_usb_d_dev_trans_stop+0x74>)
    43f8:	46a4      	mov	ip, r4
    43fa:	4463      	add	r3, ip
    43fc:	7019      	strb	r1, [r3, #0]
	_usb_d_dev_trans_done(ept, code);
    43fe:	0011      	movs	r1, r2
    4400:	4b09      	ldr	r3, [pc, #36]	; (4428 <_usb_d_dev_trans_stop+0x78>)
    4402:	4798      	blx	r3
}
    4404:	b003      	add	sp, #12
    4406:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4408:	001c      	movs	r4, r3
    440a:	3408      	adds	r4, #8
    440c:	0164      	lsls	r4, r4, #5
    440e:	4d04      	ldr	r5, [pc, #16]	; (4420 <_usb_d_dev_trans_stop+0x70>)
    4410:	46ac      	mov	ip, r5
    4412:	4464      	add	r4, ip
    4414:	2540      	movs	r5, #64	; 0x40
    4416:	7165      	strb	r5, [r4, #5]
    4418:	e7e2      	b.n	43e0 <_usb_d_dev_trans_stop+0x30>
    441a:	46c0      	nop			; (mov r8, r8)
    441c:	000111c0 	.word	0x000111c0
    4420:	41005000 	.word	0x41005000
    4424:	41005108 	.word	0x41005108
    4428:	00004389 	.word	0x00004389

0000442c <_usb_d_dev_handle_trfail>:
{
    442c:	b5f0      	push	{r4, r5, r6, r7, lr}
    442e:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    4430:	7c83      	ldrb	r3, [r0, #18]
    4432:	220f      	movs	r2, #15
    4434:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    4436:	4a3c      	ldr	r2, [pc, #240]	; (4528 <_usb_d_dev_handle_trfail+0xfc>)
    4438:	8894      	ldrh	r4, [r2, #4]
    443a:	aa01      	add	r2, sp, #4
    443c:	8014      	strh	r4, [r2, #0]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    443e:	015a      	lsls	r2, r3, #5
    4440:	4c3a      	ldr	r4, [pc, #232]	; (452c <_usb_d_dev_handle_trfail+0x100>)
    4442:	18a4      	adds	r4, r4, r2
	uint8_t            eptype
    4444:	2900      	cmp	r1, #0
    4446:	d033      	beq.n	44b0 <_usb_d_dev_handle_trfail+0x84>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4448:	001a      	movs	r2, r3
    444a:	3208      	adds	r2, #8
    444c:	0152      	lsls	r2, r2, #5
    444e:	4d38      	ldr	r5, [pc, #224]	; (4530 <_usb_d_dev_handle_trfail+0x104>)
    4450:	5d52      	ldrb	r2, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4452:	0912      	lsrs	r2, r2, #4
    4454:	2507      	movs	r5, #7
    4456:	4015      	ands	r5, r2
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4458:	7cc2      	ldrb	r2, [r0, #19]
    445a:	2607      	movs	r6, #7
    445c:	4016      	ands	r6, r2
	st.reg = bank[bank_n].STATUS_BK.reg;
    445e:	010a      	lsls	r2, r1, #4
    4460:	18a2      	adds	r2, r4, r2
    4462:	7a94      	ldrb	r4, [r2, #10]
    4464:	b2e4      	uxtb	r4, r4
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4466:	2d02      	cmp	r5, #2
    4468:	d02a      	beq.n	44c0 <_usb_d_dev_handle_trfail+0x94>
	} else if (st.bit.ERRORFLOW) {
    446a:	07a4      	lsls	r4, r4, #30
    446c:	d544      	bpl.n	44f8 <_usb_d_dev_handle_trfail+0xcc>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    446e:	7a94      	ldrb	r4, [r2, #10]
    4470:	2502      	movs	r5, #2
    4472:	43ac      	bics	r4, r5
    4474:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4476:	ac01      	add	r4, sp, #4
    4478:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    447a:	001a      	movs	r2, r3
    447c:	3208      	adds	r2, #8
    447e:	0152      	lsls	r2, r2, #5
    4480:	4f2b      	ldr	r7, [pc, #172]	; (4530 <_usb_d_dev_handle_trfail+0x104>)
    4482:	46bc      	mov	ip, r7
    4484:	4462      	add	r2, ip
    4486:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    4488:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    448a:	015b      	lsls	r3, r3, #5
    448c:	4c29      	ldr	r4, [pc, #164]	; (4534 <_usb_d_dev_handle_trfail+0x108>)
    448e:	46a4      	mov	ip, r4
    4490:	4463      	add	r3, ip
    4492:	701a      	strb	r2, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    4494:	2e01      	cmp	r6, #1
    4496:	d145      	bne.n	4524 <_usb_d_dev_handle_trfail+0xf8>
    4498:	7cc3      	ldrb	r3, [r0, #19]
    449a:	065b      	lsls	r3, r3, #25
    449c:	d542      	bpl.n	4524 <_usb_d_dev_handle_trfail+0xf8>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    449e:	7cc3      	ldrb	r3, [r0, #19]
    44a0:	09db      	lsrs	r3, r3, #7
    44a2:	4299      	cmp	r1, r3
    44a4:	d03e      	beq.n	4524 <_usb_d_dev_handle_trfail+0xf8>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    44a6:	2200      	movs	r2, #0
    44a8:	0019      	movs	r1, r3
    44aa:	4b23      	ldr	r3, [pc, #140]	; (4538 <_usb_d_dev_handle_trfail+0x10c>)
    44ac:	4798      	blx	r3
    44ae:	e039      	b.n	4524 <_usb_d_dev_handle_trfail+0xf8>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    44b0:	001a      	movs	r2, r3
    44b2:	3208      	adds	r2, #8
    44b4:	0152      	lsls	r2, r2, #5
    44b6:	4d1e      	ldr	r5, [pc, #120]	; (4530 <_usb_d_dev_handle_trfail+0x104>)
    44b8:	5d55      	ldrb	r5, [r2, r5]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    44ba:	2207      	movs	r2, #7
    44bc:	4015      	ands	r5, r2
    44be:	e7cb      	b.n	4458 <_usb_d_dev_handle_trfail+0x2c>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    44c0:	07e5      	lsls	r5, r4, #31
    44c2:	d5d2      	bpl.n	446a <_usb_d_dev_handle_trfail+0x3e>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    44c4:	7a94      	ldrb	r4, [r2, #10]
    44c6:	2501      	movs	r5, #1
    44c8:	43ac      	bics	r4, r5
    44ca:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    44cc:	ac01      	add	r4, sp, #4
    44ce:	5c65      	ldrb	r5, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    44d0:	001a      	movs	r2, r3
    44d2:	3208      	adds	r2, #8
    44d4:	0152      	lsls	r2, r2, #5
    44d6:	4e16      	ldr	r6, [pc, #88]	; (4530 <_usb_d_dev_handle_trfail+0x104>)
    44d8:	46b4      	mov	ip, r6
    44da:	4462      	add	r2, ip
    44dc:	71d5      	strb	r5, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    44de:	5c62      	ldrb	r2, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    44e0:	015b      	lsls	r3, r3, #5
    44e2:	4c14      	ldr	r4, [pc, #80]	; (4534 <_usb_d_dev_handle_trfail+0x108>)
    44e4:	46a4      	mov	ip, r4
    44e6:	4463      	add	r3, ip
    44e8:	701a      	strb	r2, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    44ea:	1e4b      	subs	r3, r1, #1
    44ec:	4199      	sbcs	r1, r3
    44ee:	b2c9      	uxtb	r1, r1
    44f0:	2204      	movs	r2, #4
    44f2:	4b11      	ldr	r3, [pc, #68]	; (4538 <_usb_d_dev_handle_trfail+0x10c>)
    44f4:	4798      	blx	r3
    44f6:	e015      	b.n	4524 <_usb_d_dev_handle_trfail+0xf8>
	bank->STATUS_BK.reg     = 0;
    44f8:	005a      	lsls	r2, r3, #1
    44fa:	1852      	adds	r2, r2, r1
    44fc:	0112      	lsls	r2, r2, #4
    44fe:	480b      	ldr	r0, [pc, #44]	; (452c <_usb_d_dev_handle_trfail+0x100>)
    4500:	1882      	adds	r2, r0, r2
    4502:	2000      	movs	r0, #0
    4504:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4506:	a801      	add	r0, sp, #4
    4508:	5c44      	ldrb	r4, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    450a:	001a      	movs	r2, r3
    450c:	3208      	adds	r2, #8
    450e:	0152      	lsls	r2, r2, #5
    4510:	4d07      	ldr	r5, [pc, #28]	; (4530 <_usb_d_dev_handle_trfail+0x104>)
    4512:	46ac      	mov	ip, r5
    4514:	4462      	add	r2, ip
    4516:	71d4      	strb	r4, [r2, #7]
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    4518:	5c42      	ldrb	r2, [r0, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    451a:	015b      	lsls	r3, r3, #5
    451c:	4905      	ldr	r1, [pc, #20]	; (4534 <_usb_d_dev_handle_trfail+0x108>)
    451e:	468c      	mov	ip, r1
    4520:	4463      	add	r3, ip
    4522:	701a      	strb	r2, [r3, #0]
}
    4524:	b003      	add	sp, #12
    4526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4528:	000111c0 	.word	0x000111c0
    452c:	20000f70 	.word	0x20000f70
    4530:	41005000 	.word	0x41005000
    4534:	41005108 	.word	0x41005108
    4538:	000043b1 	.word	0x000043b1

0000453c <_usb_d_dev_reset_epts>:
{
    453c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < USB_D_N_EP; i++) {
    453e:	2500      	movs	r5, #0
    4540:	e018      	b.n	4574 <_usb_d_dev_reset_epts+0x38>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4542:	4c10      	ldr	r4, [pc, #64]	; (4584 <_usb_d_dev_reset_epts+0x48>)
    4544:	3420      	adds	r4, #32
    4546:	00ae      	lsls	r6, r5, #2
    4548:	1973      	adds	r3, r6, r5
    454a:	0098      	lsls	r0, r3, #2
    454c:	3010      	adds	r0, #16
    454e:	1820      	adds	r0, r4, r0
    4550:	3004      	adds	r0, #4
    4552:	2103      	movs	r1, #3
    4554:	4b0c      	ldr	r3, [pc, #48]	; (4588 <_usb_d_dev_reset_epts+0x4c>)
    4556:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    4558:	1972      	adds	r2, r6, r5
    455a:	0093      	lsls	r3, r2, #2
    455c:	18e3      	adds	r3, r4, r3
    455e:	3326      	adds	r3, #38	; 0x26
    4560:	22ff      	movs	r2, #255	; 0xff
    4562:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    4564:	1976      	adds	r6, r6, r5
    4566:	00b3      	lsls	r3, r6, #2
    4568:	18e4      	adds	r4, r4, r3
    456a:	3427      	adds	r4, #39	; 0x27
    456c:	2300      	movs	r3, #0
    456e:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    4570:	3501      	adds	r5, #1
    4572:	b2ed      	uxtb	r5, r5
    4574:	2d08      	cmp	r5, #8
    4576:	d9e4      	bls.n	4542 <_usb_d_dev_reset_epts+0x6>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4578:	22a0      	movs	r2, #160	; 0xa0
    457a:	2100      	movs	r1, #0
    457c:	4803      	ldr	r0, [pc, #12]	; (458c <_usb_d_dev_reset_epts+0x50>)
    457e:	4b04      	ldr	r3, [pc, #16]	; (4590 <_usb_d_dev_reset_epts+0x54>)
    4580:	4798      	blx	r3
}
    4582:	bd70      	pop	{r4, r5, r6, pc}
    4584:	20000ff0 	.word	0x20000ff0
    4588:	00004389 	.word	0x00004389
    458c:	20000f70 	.word	0x20000f70
    4590:	0000c0dd 	.word	0x0000c0dd

00004594 <_usb_d_dev_in_next>:
{
    4594:	b5f0      	push	{r4, r5, r6, r7, lr}
    4596:	46c6      	mov	lr, r8
    4598:	b500      	push	{lr}
    459a:	0005      	movs	r5, r0
    459c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    459e:	7c83      	ldrb	r3, [r0, #18]
    45a0:	240f      	movs	r4, #15
    45a2:	401c      	ands	r4, r3
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    45a4:	0162      	lsls	r2, r4, #5
    45a6:	4b56      	ldr	r3, [pc, #344]	; (4700 <_usb_d_dev_in_next+0x16c>)
    45a8:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    45aa:	2900      	cmp	r1, #0
    45ac:	d058      	beq.n	4660 <_usb_d_dev_in_next+0xcc>
    45ae:	6959      	ldr	r1, [r3, #20]
    45b0:	0489      	lsls	r1, r1, #18
    45b2:	0c89      	lsrs	r1, r1, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    45b4:	8a2b      	ldrh	r3, [r5, #16]
    45b6:	4a53      	ldr	r2, [pc, #332]	; (4704 <_usb_d_dev_in_next+0x170>)
    45b8:	4293      	cmp	r3, r2
    45ba:	d053      	beq.n	4664 <_usb_d_dev_in_next+0xd0>
    45bc:	3b01      	subs	r3, #1
    45be:	b21b      	sxth	r3, r3
    45c0:	400b      	ands	r3, r1
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    45c2:	7cea      	ldrb	r2, [r5, #19]
    45c4:	2707      	movs	r7, #7
    45c6:	4017      	ands	r7, r2
	if (isr) {
    45c8:	2e00      	cmp	r6, #0
    45ca:	d007      	beq.n	45dc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    45cc:	0022      	movs	r2, r4
    45ce:	3208      	adds	r2, #8
    45d0:	0152      	lsls	r2, r2, #5
    45d2:	484d      	ldr	r0, [pc, #308]	; (4708 <_usb_d_dev_in_next+0x174>)
    45d4:	4684      	mov	ip, r0
    45d6:	4462      	add	r2, ip
    45d8:	2002      	movs	r0, #2
    45da:	71d0      	strb	r0, [r2, #7]
	ept->trans_count += trans_count;
    45dc:	68aa      	ldr	r2, [r5, #8]
    45de:	4694      	mov	ip, r2
    45e0:	4461      	add	r1, ip
    45e2:	60a9      	str	r1, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    45e4:	686a      	ldr	r2, [r5, #4]
    45e6:	4291      	cmp	r1, r2
    45e8:	d24e      	bcs.n	4688 <_usb_d_dev_in_next+0xf4>
		trans_next = ept->trans_size - ept->trans_count;
    45ea:	b292      	uxth	r2, r2
    45ec:	b28b      	uxth	r3, r1
    45ee:	1ad2      	subs	r2, r2, r3
    45f0:	b292      	uxth	r2, r2
		if (ept->flags.bits.use_cache) {
    45f2:	7ceb      	ldrb	r3, [r5, #19]
    45f4:	069b      	lsls	r3, r3, #26
    45f6:	d537      	bpl.n	4668 <_usb_d_dev_in_next+0xd4>
			if (trans_next > ept->size) {
    45f8:	8a2b      	ldrh	r3, [r5, #16]
    45fa:	4698      	mov	r8, r3
    45fc:	429a      	cmp	r2, r3
    45fe:	d800      	bhi.n	4602 <_usb_d_dev_in_next+0x6e>
		trans_next = ept->trans_size - ept->trans_count;
    4600:	4690      	mov	r8, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4602:	682b      	ldr	r3, [r5, #0]
    4604:	469c      	mov	ip, r3
    4606:	4461      	add	r1, ip
    4608:	4642      	mov	r2, r8
    460a:	68e8      	ldr	r0, [r5, #12]
    460c:	4b3f      	ldr	r3, [pc, #252]	; (470c <_usb_d_dev_in_next+0x178>)
    460e:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4610:	68e9      	ldr	r1, [r5, #12]
	bank->ADDR.reg          = addr;
    4612:	0162      	lsls	r2, r4, #5
    4614:	4b3a      	ldr	r3, [pc, #232]	; (4700 <_usb_d_dev_in_next+0x16c>)
    4616:	189b      	adds	r3, r3, r2
    4618:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    461a:	0163      	lsls	r3, r4, #5
    461c:	4a38      	ldr	r2, [pc, #224]	; (4700 <_usb_d_dev_in_next+0x16c>)
    461e:	18d2      	adds	r2, r2, r3
    4620:	6951      	ldr	r1, [r2, #20]
    4622:	4643      	mov	r3, r8
    4624:	049b      	lsls	r3, r3, #18
    4626:	0c9b      	lsrs	r3, r3, #18
    4628:	0b89      	lsrs	r1, r1, #14
    462a:	0389      	lsls	r1, r1, #14
    462c:	430b      	orrs	r3, r1
    462e:	6153      	str	r3, [r2, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4630:	6951      	ldr	r1, [r2, #20]
    4632:	4b37      	ldr	r3, [pc, #220]	; (4710 <_usb_d_dev_in_next+0x17c>)
    4634:	400b      	ands	r3, r1
    4636:	6153      	str	r3, [r2, #20]
	if (!isr) {
    4638:	2e00      	cmp	r6, #0
    463a:	d107      	bne.n	464c <_usb_d_dev_in_next+0xb8>
		if (is_ctrl) {
    463c:	2f01      	cmp	r7, #1
    463e:	d05d      	beq.n	46fc <_usb_d_dev_in_next+0x168>
			inten = USB_D_BANK1_INT_FLAGS;
    4640:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4642:	0163      	lsls	r3, r4, #5
    4644:	4933      	ldr	r1, [pc, #204]	; (4714 <_usb_d_dev_in_next+0x180>)
    4646:	468c      	mov	ip, r1
    4648:	4463      	add	r3, ip
    464a:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    464c:	3408      	adds	r4, #8
    464e:	0164      	lsls	r4, r4, #5
    4650:	4b2d      	ldr	r3, [pc, #180]	; (4708 <_usb_d_dev_in_next+0x174>)
    4652:	469c      	mov	ip, r3
    4654:	4464      	add	r4, ip
    4656:	2380      	movs	r3, #128	; 0x80
    4658:	7163      	strb	r3, [r4, #5]
}
    465a:	bc04      	pop	{r2}
    465c:	4690      	mov	r8, r2
    465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4660:	2100      	movs	r1, #0
    4662:	e7a7      	b.n	45b4 <_usb_d_dev_in_next+0x20>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4664:	b21b      	sxth	r3, r3
    4666:	e7ab      	b.n	45c0 <_usb_d_dev_in_next+0x2c>
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    4668:	2380      	movs	r3, #128	; 0x80
    466a:	019b      	lsls	r3, r3, #6
    466c:	429a      	cmp	r2, r3
    466e:	d807      	bhi.n	4680 <_usb_d_dev_in_next+0xec>
		trans_next = ept->trans_size - ept->trans_count;
    4670:	4690      	mov	r8, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4672:	682b      	ldr	r3, [r5, #0]
    4674:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    4676:	0162      	lsls	r2, r4, #5
    4678:	4b21      	ldr	r3, [pc, #132]	; (4700 <_usb_d_dev_in_next+0x16c>)
    467a:	189b      	adds	r3, r3, r2
    467c:	6119      	str	r1, [r3, #16]
    467e:	e7cc      	b.n	461a <_usb_d_dev_in_next+0x86>
				trans_next = USB_D_DEV_TRANS_MAX;
    4680:	2380      	movs	r3, #128	; 0x80
    4682:	019b      	lsls	r3, r3, #6
    4684:	4698      	mov	r8, r3
    4686:	e7f4      	b.n	4672 <_usb_d_dev_in_next+0xde>
	} else if (ept->flags.bits.need_zlp) {
    4688:	7cea      	ldrb	r2, [r5, #19]
    468a:	06d2      	lsls	r2, r2, #27
    468c:	d50f      	bpl.n	46ae <_usb_d_dev_in_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    468e:	7ceb      	ldrb	r3, [r5, #19]
    4690:	2210      	movs	r2, #16
    4692:	4393      	bics	r3, r2
    4694:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4696:	0162      	lsls	r2, r4, #5
    4698:	4b19      	ldr	r3, [pc, #100]	; (4700 <_usb_d_dev_in_next+0x16c>)
    469a:	189b      	adds	r3, r3, r2
    469c:	695a      	ldr	r2, [r3, #20]
    469e:	0b92      	lsrs	r2, r2, #14
    46a0:	0391      	lsls	r1, r2, #14
    46a2:	6159      	str	r1, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    46a4:	6959      	ldr	r1, [r3, #20]
    46a6:	4a1a      	ldr	r2, [pc, #104]	; (4710 <_usb_d_dev_in_next+0x17c>)
    46a8:	400a      	ands	r2, r1
    46aa:	615a      	str	r2, [r3, #20]
    46ac:	e7c4      	b.n	4638 <_usb_d_dev_in_next+0xa4>
	if (is_ctrl) {
    46ae:	2f01      	cmp	r7, #1
    46b0:	d00d      	beq.n	46ce <_usb_d_dev_in_next+0x13a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    46b2:	0164      	lsls	r4, r4, #5
    46b4:	4a18      	ldr	r2, [pc, #96]	; (4718 <_usb_d_dev_in_next+0x184>)
    46b6:	4694      	mov	ip, r2
    46b8:	4464      	add	r4, ip
    46ba:	224a      	movs	r2, #74	; 0x4a
    46bc:	7022      	strb	r2, [r4, #0]
	if (last_pkt == ept->size) {
    46be:	8a2a      	ldrh	r2, [r5, #16]
    46c0:	4293      	cmp	r3, r2
    46c2:	d00b      	beq.n	46dc <_usb_d_dev_in_next+0x148>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    46c4:	2100      	movs	r1, #0
    46c6:	0028      	movs	r0, r5
    46c8:	4b14      	ldr	r3, [pc, #80]	; (471c <_usb_d_dev_in_next+0x188>)
    46ca:	4798      	blx	r3
	return;
    46cc:	e7c5      	b.n	465a <_usb_d_dev_in_next+0xc6>
    46ce:	0164      	lsls	r4, r4, #5
    46d0:	4a11      	ldr	r2, [pc, #68]	; (4718 <_usb_d_dev_in_next+0x184>)
    46d2:	4694      	mov	ip, r2
    46d4:	4464      	add	r4, ip
    46d6:	224b      	movs	r2, #75	; 0x4b
    46d8:	7022      	strb	r2, [r4, #0]
    46da:	e7f0      	b.n	46be <_usb_d_dev_in_next+0x12a>
		ept->flags.bits.is_busy = 0;
    46dc:	7ceb      	ldrb	r3, [r5, #19]
    46de:	2240      	movs	r2, #64	; 0x40
    46e0:	4393      	bics	r3, r2
    46e2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    46e4:	4b0e      	ldr	r3, [pc, #56]	; (4720 <_usb_d_dev_in_next+0x18c>)
    46e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46e8:	7ca8      	ldrb	r0, [r5, #18]
    46ea:	68a9      	ldr	r1, [r5, #8]
    46ec:	4798      	blx	r3
    46ee:	2800      	cmp	r0, #0
    46f0:	d1b3      	bne.n	465a <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    46f2:	7ceb      	ldrb	r3, [r5, #19]
    46f4:	2240      	movs	r2, #64	; 0x40
    46f6:	4313      	orrs	r3, r2
    46f8:	74eb      	strb	r3, [r5, #19]
    46fa:	e7e3      	b.n	46c4 <_usb_d_dev_in_next+0x130>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    46fc:	224e      	movs	r2, #78	; 0x4e
    46fe:	e7a0      	b.n	4642 <_usb_d_dev_in_next+0xae>
    4700:	20000f70 	.word	0x20000f70
    4704:	000003ff 	.word	0x000003ff
    4708:	41005000 	.word	0x41005000
    470c:	0000c059 	.word	0x0000c059
    4710:	f0003fff 	.word	0xf0003fff
    4714:	41005109 	.word	0x41005109
    4718:	41005108 	.word	0x41005108
    471c:	00004389 	.word	0x00004389
    4720:	20000ff0 	.word	0x20000ff0

00004724 <_usb_d_dev_out_next>:
{
    4724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4726:	46de      	mov	lr, fp
    4728:	4657      	mov	r7, sl
    472a:	464e      	mov	r6, r9
    472c:	4645      	mov	r5, r8
    472e:	b5e0      	push	{r5, r6, r7, lr}
    4730:	0004      	movs	r4, r0
    4732:	000f      	movs	r7, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4734:	7c83      	ldrb	r3, [r0, #18]
    4736:	250f      	movs	r5, #15
    4738:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    473a:	2900      	cmp	r1, #0
    473c:	d059      	beq.n	47f2 <_usb_d_dev_out_next+0xce>
    473e:	016a      	lsls	r2, r5, #5
    4740:	4b71      	ldr	r3, [pc, #452]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    4742:	189b      	adds	r3, r3, r2
    4744:	685b      	ldr	r3, [r3, #4]
    4746:	011b      	lsls	r3, r3, #4
    4748:	0c9b      	lsrs	r3, r3, #18
    474a:	469a      	mov	sl, r3
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    474c:	2f00      	cmp	r7, #0
    474e:	d053      	beq.n	47f8 <_usb_d_dev_out_next+0xd4>
    4750:	016a      	lsls	r2, r5, #5
    4752:	4b6d      	ldr	r3, [pc, #436]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    4754:	189b      	adds	r3, r3, r2
    4756:	685b      	ldr	r3, [r3, #4]
    4758:	049b      	lsls	r3, r3, #18
    475a:	0c9b      	lsrs	r3, r3, #18
    475c:	4698      	mov	r8, r3
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    475e:	8a26      	ldrh	r6, [r4, #16]
    4760:	4b6a      	ldr	r3, [pc, #424]	; (490c <_usb_d_dev_out_next+0x1e8>)
    4762:	429e      	cmp	r6, r3
    4764:	d001      	beq.n	476a <_usb_d_dev_out_next+0x46>
    4766:	3e01      	subs	r6, #1
    4768:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    476a:	4643      	mov	r3, r8
    476c:	4033      	ands	r3, r6
    476e:	469b      	mov	fp, r3
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4770:	7ce3      	ldrb	r3, [r4, #19]
    4772:	2207      	movs	r2, #7
    4774:	401a      	ands	r2, r3
    4776:	4691      	mov	r9, r2
	if (isr) {
    4778:	2f00      	cmp	r7, #0
    477a:	d007      	beq.n	478c <_usb_d_dev_out_next+0x68>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    477c:	002b      	movs	r3, r5
    477e:	3308      	adds	r3, #8
    4780:	015b      	lsls	r3, r3, #5
    4782:	4a63      	ldr	r2, [pc, #396]	; (4910 <_usb_d_dev_out_next+0x1ec>)
    4784:	4694      	mov	ip, r2
    4786:	4463      	add	r3, ip
    4788:	2201      	movs	r2, #1
    478a:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    478c:	7ce3      	ldrb	r3, [r4, #19]
    478e:	069b      	lsls	r3, r3, #26
    4790:	d511      	bpl.n	47b6 <_usb_d_dev_out_next+0x92>
    4792:	6862      	ldr	r2, [r4, #4]
    4794:	2a00      	cmp	r2, #0
    4796:	d00e      	beq.n	47b6 <_usb_d_dev_out_next+0x92>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4798:	b292      	uxth	r2, r2
    479a:	8923      	ldrh	r3, [r4, #8]
    479c:	1ad2      	subs	r2, r2, r3
    479e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    47a0:	6823      	ldr	r3, [r4, #0]
    47a2:	68a1      	ldr	r1, [r4, #8]
    47a4:	468c      	mov	ip, r1
    47a6:	4463      	add	r3, ip
    47a8:	0018      	movs	r0, r3
    47aa:	68e1      	ldr	r1, [r4, #12]
    47ac:	4593      	cmp	fp, r2
    47ae:	d200      	bcs.n	47b2 <_usb_d_dev_out_next+0x8e>
    47b0:	465a      	mov	r2, fp
    47b2:	4b58      	ldr	r3, [pc, #352]	; (4914 <_usb_d_dev_out_next+0x1f0>)
    47b4:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    47b6:	6863      	ldr	r3, [r4, #4]
    47b8:	2b00      	cmp	r3, #0
    47ba:	d120      	bne.n	47fe <_usb_d_dev_out_next+0xda>
    47bc:	7ce2      	ldrb	r2, [r4, #19]
    47be:	06d2      	lsls	r2, r2, #27
    47c0:	d51d      	bpl.n	47fe <_usb_d_dev_out_next+0xda>
		ept->flags.bits.need_zlp  = 0;
    47c2:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    47c4:	2210      	movs	r2, #16
    47c6:	4393      	bics	r3, r2
    47c8:	2220      	movs	r2, #32
    47ca:	4313      	orrs	r3, r2
    47cc:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    47ce:	494e      	ldr	r1, [pc, #312]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    47d0:	016a      	lsls	r2, r5, #5
    47d2:	68e3      	ldr	r3, [r4, #12]
    47d4:	5053      	str	r3, [r2, r1]
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    47d6:	8a23      	ldrh	r3, [r4, #16]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    47d8:	188a      	adds	r2, r1, r2
    47da:	6851      	ldr	r1, [r2, #4]
    47dc:	049b      	lsls	r3, r3, #18
    47de:	091b      	lsrs	r3, r3, #4
    47e0:	484d      	ldr	r0, [pc, #308]	; (4918 <_usb_d_dev_out_next+0x1f4>)
    47e2:	4001      	ands	r1, r0
    47e4:	430b      	orrs	r3, r1
    47e6:	6053      	str	r3, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    47e8:	6853      	ldr	r3, [r2, #4]
    47ea:	0b9b      	lsrs	r3, r3, #14
    47ec:	0399      	lsls	r1, r3, #14
    47ee:	6051      	str	r1, [r2, #4]
    47f0:	e047      	b.n	4882 <_usb_d_dev_out_next+0x15e>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    47f2:	2300      	movs	r3, #0
    47f4:	469a      	mov	sl, r3
    47f6:	e7a9      	b.n	474c <_usb_d_dev_out_next+0x28>
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    47f8:	2300      	movs	r3, #0
    47fa:	4698      	mov	r8, r3
    47fc:	e7af      	b.n	475e <_usb_d_dev_out_next+0x3a>
	} else if (isr && last_pkt < ept->size) {
    47fe:	2f00      	cmp	r7, #0
    4800:	d01d      	beq.n	483e <_usb_d_dev_out_next+0x11a>
    4802:	8a22      	ldrh	r2, [r4, #16]
    4804:	4593      	cmp	fp, r2
    4806:	d21a      	bcs.n	483e <_usb_d_dev_out_next+0x11a>
		ept->flags.bits.need_zlp = 0;
    4808:	7ce3      	ldrb	r3, [r4, #19]
    480a:	2210      	movs	r2, #16
    480c:	4393      	bics	r3, r2
    480e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    4810:	68a3      	ldr	r3, [r4, #8]
    4812:	4443      	add	r3, r8
    4814:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    4816:	464b      	mov	r3, r9
    4818:	2b01      	cmp	r3, #1
    481a:	d066      	beq.n	48ea <_usb_d_dev_out_next+0x1c6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    481c:	016b      	lsls	r3, r5, #5
    481e:	4a3f      	ldr	r2, [pc, #252]	; (491c <_usb_d_dev_out_next+0x1f8>)
    4820:	4694      	mov	ip, r2
    4822:	4463      	add	r3, ip
    4824:	2225      	movs	r2, #37	; 0x25
    4826:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    4828:	2d00      	cmp	r5, #0
    482a:	d103      	bne.n	4834 <_usb_d_dev_out_next+0x110>
	bank->ADDR.reg          = addr;
    482c:	016d      	lsls	r5, r5, #5
    482e:	4b36      	ldr	r3, [pc, #216]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    4830:	68e2      	ldr	r2, [r4, #12]
    4832:	50ea      	str	r2, [r5, r3]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4834:	2100      	movs	r1, #0
    4836:	0020      	movs	r0, r4
    4838:	4b39      	ldr	r3, [pc, #228]	; (4920 <_usb_d_dev_out_next+0x1fc>)
    483a:	4798      	blx	r3
	return;
    483c:	e033      	b.n	48a6 <_usb_d_dev_out_next+0x182>
		ept->trans_count += trans_size;
    483e:	68a2      	ldr	r2, [r4, #8]
    4840:	4452      	add	r2, sl
    4842:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4844:	4293      	cmp	r3, r2
    4846:	d9e6      	bls.n	4816 <_usb_d_dev_out_next+0xf2>
			trans_next = ept->trans_size - ept->trans_count;
    4848:	b29b      	uxth	r3, r3
    484a:	b291      	uxth	r1, r2
    484c:	1a5b      	subs	r3, r3, r1
    484e:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4850:	7ce1      	ldrb	r1, [r4, #19]
    4852:	0689      	lsls	r1, r1, #26
    4854:	d52d      	bpl.n	48b2 <_usb_d_dev_out_next+0x18e>
				if (trans_next > ept->size) {
    4856:	8a21      	ldrh	r1, [r4, #16]
    4858:	428b      	cmp	r3, r1
    485a:	d800      	bhi.n	485e <_usb_d_dev_out_next+0x13a>
			trans_next = ept->trans_size - ept->trans_count;
    485c:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    485e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4860:	016b      	lsls	r3, r5, #5
    4862:	4a29      	ldr	r2, [pc, #164]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    4864:	5098      	str	r0, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4866:	016b      	lsls	r3, r5, #5
    4868:	4827      	ldr	r0, [pc, #156]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    486a:	18c0      	adds	r0, r0, r3
    486c:	6842      	ldr	r2, [r0, #4]
    486e:	048b      	lsls	r3, r1, #18
    4870:	091b      	lsrs	r3, r3, #4
    4872:	4929      	ldr	r1, [pc, #164]	; (4918 <_usb_d_dev_out_next+0x1f4>)
    4874:	400a      	ands	r2, r1
    4876:	4313      	orrs	r3, r2
    4878:	6043      	str	r3, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    487a:	6843      	ldr	r3, [r0, #4]
    487c:	0b9b      	lsrs	r3, r3, #14
    487e:	039a      	lsls	r2, r3, #14
    4880:	6042      	str	r2, [r0, #4]
	if (!isr) {
    4882:	2f00      	cmp	r7, #0
    4884:	d108      	bne.n	4898 <_usb_d_dev_out_next+0x174>
		if (is_ctrl) {
    4886:	464b      	mov	r3, r9
    4888:	2b01      	cmp	r3, #1
    488a:	d035      	beq.n	48f8 <_usb_d_dev_out_next+0x1d4>
			inten = USB_D_BANK0_INT_FLAGS;
    488c:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    488e:	016b      	lsls	r3, r5, #5
    4890:	4924      	ldr	r1, [pc, #144]	; (4924 <_usb_d_dev_out_next+0x200>)
    4892:	468c      	mov	ip, r1
    4894:	4463      	add	r3, ip
    4896:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4898:	3508      	adds	r5, #8
    489a:	016d      	lsls	r5, r5, #5
    489c:	4b1c      	ldr	r3, [pc, #112]	; (4910 <_usb_d_dev_out_next+0x1ec>)
    489e:	469c      	mov	ip, r3
    48a0:	4465      	add	r5, ip
    48a2:	2340      	movs	r3, #64	; 0x40
    48a4:	712b      	strb	r3, [r5, #4]
}
    48a6:	bc3c      	pop	{r2, r3, r4, r5}
    48a8:	4690      	mov	r8, r2
    48aa:	4699      	mov	r9, r3
    48ac:	46a2      	mov	sl, r4
    48ae:	46ab      	mov	fp, r5
    48b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    48b2:	8a21      	ldrh	r1, [r4, #16]
    48b4:	428b      	cmp	r3, r1
    48b6:	d90b      	bls.n	48d0 <_usb_d_dev_out_next+0x1ac>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    48b8:	2180      	movs	r1, #128	; 0x80
    48ba:	0189      	lsls	r1, r1, #6
    48bc:	428b      	cmp	r3, r1
    48be:	d80f      	bhi.n	48e0 <_usb_d_dev_out_next+0x1bc>
    48c0:	43b3      	bics	r3, r6
    48c2:	0019      	movs	r1, r3
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    48c4:	6823      	ldr	r3, [r4, #0]
    48c6:	189a      	adds	r2, r3, r2
	bank->ADDR.reg          = addr;
    48c8:	016b      	lsls	r3, r5, #5
    48ca:	480f      	ldr	r0, [pc, #60]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    48cc:	501a      	str	r2, [r3, r0]
    48ce:	e7ca      	b.n	4866 <_usb_d_dev_out_next+0x142>
				} else if (trans_next < ept->size) {
    48d0:	428b      	cmp	r3, r1
    48d2:	d208      	bcs.n	48e6 <_usb_d_dev_out_next+0x1c2>
					ept->flags.bits.use_cache = 1;
    48d4:	7ce1      	ldrb	r1, [r4, #19]
    48d6:	2020      	movs	r0, #32
    48d8:	4301      	orrs	r1, r0
    48da:	74e1      	strb	r1, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    48dc:	0019      	movs	r1, r3
    48de:	e7f1      	b.n	48c4 <_usb_d_dev_out_next+0x1a0>
						trans_next = USB_D_DEV_TRANS_MAX;
    48e0:	2180      	movs	r1, #128	; 0x80
    48e2:	0189      	lsls	r1, r1, #6
    48e4:	e7ee      	b.n	48c4 <_usb_d_dev_out_next+0x1a0>
			trans_next = ept->trans_size - ept->trans_count;
    48e6:	0019      	movs	r1, r3
    48e8:	e7ec      	b.n	48c4 <_usb_d_dev_out_next+0x1a0>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    48ea:	016b      	lsls	r3, r5, #5
    48ec:	4a0b      	ldr	r2, [pc, #44]	; (491c <_usb_d_dev_out_next+0x1f8>)
    48ee:	4694      	mov	ip, r2
    48f0:	4463      	add	r3, ip
    48f2:	222d      	movs	r2, #45	; 0x2d
    48f4:	701a      	strb	r2, [r3, #0]
    48f6:	e797      	b.n	4828 <_usb_d_dev_out_next+0x104>
	bank->STATUS_BK.reg     = 0;
    48f8:	016a      	lsls	r2, r5, #5
    48fa:	4b03      	ldr	r3, [pc, #12]	; (4908 <_usb_d_dev_out_next+0x1e4>)
    48fc:	189b      	adds	r3, r3, r2
    48fe:	2200      	movs	r2, #0
    4900:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4902:	322d      	adds	r2, #45	; 0x2d
    4904:	e7c3      	b.n	488e <_usb_d_dev_out_next+0x16a>
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	20000f70 	.word	0x20000f70
    490c:	000003ff 	.word	0x000003ff
    4910:	41005000 	.word	0x41005000
    4914:	0000c059 	.word	0x0000c059
    4918:	f0003fff 	.word	0xf0003fff
    491c:	41005108 	.word	0x41005108
    4920:	00004389 	.word	0x00004389
    4924:	41005109 	.word	0x41005109

00004928 <_usb_d_dev_handler>:
{
    4928:	b570      	push	{r4, r5, r6, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    492a:	4b89      	ldr	r3, [pc, #548]	; (4b50 <_usb_d_dev_handler+0x228>)
    492c:	8c1d      	ldrh	r5, [r3, #32]
    492e:	b2ad      	uxth	r5, r5
	if (0 == epint) {
    4930:	2d00      	cmp	r5, #0
    4932:	d001      	beq.n	4938 <_usb_d_dev_handler+0x10>
	bool     rc    = true;
    4934:	2400      	movs	r4, #0
    4936:	e0bf      	b.n	4ab8 <_usb_d_dev_handler+0x190>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    4938:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    493a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    493c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    493e:	075a      	lsls	r2, r3, #29
    4940:	d40d      	bmi.n	495e <_usb_d_dev_handler+0x36>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    4942:	059a      	lsls	r2, r3, #22
    4944:	d415      	bmi.n	4972 <_usb_d_dev_handler+0x4a>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    4946:	061a      	lsls	r2, r3, #24
    4948:	d437      	bmi.n	49ba <_usb_d_dev_handler+0x92>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    494a:	2270      	movs	r2, #112	; 0x70
    494c:	421a      	tst	r2, r3
    494e:	d13e      	bne.n	49ce <_usb_d_dev_handler+0xa6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    4950:	071a      	lsls	r2, r3, #28
    4952:	d457      	bmi.n	4a04 <_usb_d_dev_handler+0xdc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    4954:	07db      	lsls	r3, r3, #31
    4956:	d500      	bpl.n	495a <_usb_d_dev_handler+0x32>
    4958:	e068      	b.n	4a2c <_usb_d_dev_handler+0x104>
		rc = false;
    495a:	2300      	movs	r3, #0
    495c:	e006      	b.n	496c <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    495e:	2204      	movs	r2, #4
    4960:	4b7b      	ldr	r3, [pc, #492]	; (4b50 <_usb_d_dev_handler+0x228>)
    4962:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    4964:	4b7b      	ldr	r3, [pc, #492]	; (4b54 <_usb_d_dev_handler+0x22c>)
    4966:	6a1b      	ldr	r3, [r3, #32]
    4968:	4798      	blx	r3
		return true;
    496a:	2301      	movs	r3, #1
		if (_usb_d_dev_handle_nep()) {
    496c:	2b00      	cmp	r3, #0
    496e:	d0e1      	beq.n	4934 <_usb_d_dev_handler+0xc>
}
    4970:	bd70      	pop	{r4, r5, r6, pc}
    4972:	4b77      	ldr	r3, [pc, #476]	; (4b50 <_usb_d_dev_handler+0x228>)
    4974:	4a78      	ldr	r2, [pc, #480]	; (4b58 <_usb_d_dev_handler+0x230>)
    4976:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4978:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    497a:	3a92      	subs	r2, #146	; 0x92
    497c:	3aff      	subs	r2, #255	; 0xff
    497e:	831a      	strh	r2, [r3, #24]
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4980:	2300      	movs	r3, #0
    4982:	2b03      	cmp	r3, #3
    4984:	d812      	bhi.n	49ac <_usb_d_dev_handler+0x84>
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    4986:	0158      	lsls	r0, r3, #5
    4988:	4a74      	ldr	r2, [pc, #464]	; (4b5c <_usb_d_dev_handler+0x234>)
    498a:	1812      	adds	r2, r2, r0
    498c:	8912      	ldrh	r2, [r2, #8]
    498e:	0712      	lsls	r2, r2, #28
    4990:	0f12      	lsrs	r2, r2, #28
    4992:	2a03      	cmp	r2, #3
    4994:	d002      	beq.n	499c <_usb_d_dev_handler+0x74>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    4996:	3301      	adds	r3, #1
    4998:	b2db      	uxtb	r3, r3
    499a:	e7f2      	b.n	4982 <_usb_d_dev_handler+0x5a>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    499c:	4b6f      	ldr	r3, [pc, #444]	; (4b5c <_usb_d_dev_handler+0x234>)
    499e:	181b      	adds	r3, r3, r0
    49a0:	8919      	ldrh	r1, [r3, #8]
    49a2:	0449      	lsls	r1, r1, #17
    49a4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    49a6:	2200      	movs	r2, #0
    49a8:	811a      	strh	r2, [r3, #8]
    49aa:	e000      	b.n	49ae <_usb_d_dev_handler+0x86>
	uint32_t lpm_variable = 0;
    49ac:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    49ae:	4b69      	ldr	r3, [pc, #420]	; (4b54 <_usb_d_dev_handler+0x22c>)
    49b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49b2:	2003      	movs	r0, #3
    49b4:	4798      	blx	r3
	bool     rc    = true;
    49b6:	2301      	movs	r3, #1
    49b8:	e7d8      	b.n	496c <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    49ba:	2280      	movs	r2, #128	; 0x80
    49bc:	4b64      	ldr	r3, [pc, #400]	; (4b50 <_usb_d_dev_handler+0x228>)
    49be:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    49c0:	4b64      	ldr	r3, [pc, #400]	; (4b54 <_usb_d_dev_handler+0x22c>)
    49c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49c4:	2100      	movs	r1, #0
    49c6:	2005      	movs	r0, #5
    49c8:	4798      	blx	r3
	bool     rc    = true;
    49ca:	2301      	movs	r3, #1
    49cc:	e7ce      	b.n	496c <_usb_d_dev_handler+0x44>
    49ce:	4b60      	ldr	r3, [pc, #384]	; (4b50 <_usb_d_dev_handler+0x228>)
    49d0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    49d2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    49d4:	4a60      	ldr	r2, [pc, #384]	; (4b58 <_usb_d_dev_handler+0x230>)
    49d6:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    49d8:	4b61      	ldr	r3, [pc, #388]	; (4b60 <_usb_d_dev_handler+0x238>)
    49da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    49dc:	069b      	lsls	r3, r3, #26
    49de:	d40c      	bmi.n	49fa <_usb_d_dev_handler+0xd2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    49e0:	4b5f      	ldr	r3, [pc, #380]	; (4b60 <_usb_d_dev_handler+0x238>)
    49e2:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    49e4:	23d0      	movs	r3, #208	; 0xd0
    49e6:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    49e8:	2bd0      	cmp	r3, #208	; 0xd0
    49ea:	d1f9      	bne.n	49e0 <_usb_d_dev_handler+0xb8>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    49ec:	4b59      	ldr	r3, [pc, #356]	; (4b54 <_usb_d_dev_handler+0x22c>)
    49ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49f0:	2100      	movs	r1, #0
    49f2:	2002      	movs	r0, #2
    49f4:	4798      	blx	r3
	bool     rc    = true;
    49f6:	2301      	movs	r3, #1
    49f8:	e7b8      	b.n	496c <_usb_d_dev_handler+0x44>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    49fa:	4b59      	ldr	r3, [pc, #356]	; (4b60 <_usb_d_dev_handler+0x238>)
    49fc:	68db      	ldr	r3, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    49fe:	06db      	lsls	r3, r3, #27
    4a00:	d5fb      	bpl.n	49fa <_usb_d_dev_handler+0xd2>
    4a02:	e7f3      	b.n	49ec <_usb_d_dev_handler+0xc4>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4a04:	4b52      	ldr	r3, [pc, #328]	; (4b50 <_usb_d_dev_handler+0x228>)
    4a06:	2100      	movs	r1, #0
    4a08:	2280      	movs	r2, #128	; 0x80
    4a0a:	0052      	lsls	r2, r2, #1
    4a0c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4a0e:	3af8      	subs	r2, #248	; 0xf8
    4a10:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4a12:	3268      	adds	r2, #104	; 0x68
    4a14:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4a16:	4a50      	ldr	r2, [pc, #320]	; (4b58 <_usb_d_dev_handler+0x230>)
    4a18:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    4a1a:	4b52      	ldr	r3, [pc, #328]	; (4b64 <_usb_d_dev_handler+0x23c>)
    4a1c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    4a1e:	4b4d      	ldr	r3, [pc, #308]	; (4b54 <_usb_d_dev_handler+0x22c>)
    4a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4a22:	2100      	movs	r1, #0
    4a24:	2001      	movs	r0, #1
    4a26:	4798      	blx	r3
	bool     rc    = true;
    4a28:	2301      	movs	r3, #1
    4a2a:	e79f      	b.n	496c <_usb_d_dev_handler+0x44>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    4a2c:	4b48      	ldr	r3, [pc, #288]	; (4b50 <_usb_d_dev_handler+0x228>)
    4a2e:	4a4a      	ldr	r2, [pc, #296]	; (4b58 <_usb_d_dev_handler+0x230>)
    4a30:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    4a32:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4a34:	3a92      	subs	r2, #146	; 0x92
    4a36:	3aff      	subs	r2, #255	; 0xff
    4a38:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    4a3a:	4b46      	ldr	r3, [pc, #280]	; (4b54 <_usb_d_dev_handler+0x22c>)
    4a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4a3e:	2100      	movs	r1, #0
    4a40:	2004      	movs	r0, #4
    4a42:	4798      	blx	r3
	bool     rc    = true;
    4a44:	2301      	movs	r3, #1
    4a46:	e791      	b.n	496c <_usb_d_dev_handler+0x44>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4a48:	06da      	lsls	r2, r3, #27
    4a4a:	d407      	bmi.n	4a5c <_usb_d_dev_handler+0x134>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4a4c:	065a      	lsls	r2, r3, #25
    4a4e:	d408      	bmi.n	4a62 <_usb_d_dev_handler+0x13a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4a50:	069b      	lsls	r3, r3, #26
    4a52:	d52f      	bpl.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    4a54:	2100      	movs	r1, #0
    4a56:	4b44      	ldr	r3, [pc, #272]	; (4b68 <_usb_d_dev_handler+0x240>)
    4a58:	4798      	blx	r3
    4a5a:	e02b      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_setup(ept);
    4a5c:	4b43      	ldr	r3, [pc, #268]	; (4b6c <_usb_d_dev_handler+0x244>)
    4a5e:	4798      	blx	r3
    4a60:	e028      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    4a62:	2101      	movs	r1, #1
    4a64:	4b40      	ldr	r3, [pc, #256]	; (4b68 <_usb_d_dev_handler+0x240>)
    4a66:	4798      	blx	r3
    4a68:	e024      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    4a6a:	065a      	lsls	r2, r3, #25
    4a6c:	d40f      	bmi.n	4a8e <_usb_d_dev_handler+0x166>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4a6e:	071a      	lsls	r2, r3, #28
    4a70:	d411      	bmi.n	4a96 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4a72:	079a      	lsls	r2, r3, #30
    4a74:	d413      	bmi.n	4a9e <_usb_d_dev_handler+0x176>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4a76:	7cc1      	ldrb	r1, [r0, #19]
    4a78:	2207      	movs	r2, #7
    4a7a:	400a      	ands	r2, r1
    4a7c:	2a01      	cmp	r2, #1
    4a7e:	d119      	bne.n	4ab4 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4a80:	075a      	lsls	r2, r3, #29
    4a82:	d410      	bmi.n	4aa6 <_usb_d_dev_handler+0x17e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4a84:	06db      	lsls	r3, r3, #27
    4a86:	d515      	bpl.n	4ab4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    4a88:	4b38      	ldr	r3, [pc, #224]	; (4b6c <_usb_d_dev_handler+0x244>)
    4a8a:	4798      	blx	r3
    4a8c:	e012      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 1);
    4a8e:	2101      	movs	r1, #1
    4a90:	4b35      	ldr	r3, [pc, #212]	; (4b68 <_usb_d_dev_handler+0x240>)
    4a92:	4798      	blx	r3
    4a94:	e00e      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 1);
    4a96:	2101      	movs	r1, #1
    4a98:	4b35      	ldr	r3, [pc, #212]	; (4b70 <_usb_d_dev_handler+0x248>)
    4a9a:	4798      	blx	r3
    4a9c:	e00a      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_in_next(ept, true);
    4a9e:	2101      	movs	r1, #1
    4aa0:	4b34      	ldr	r3, [pc, #208]	; (4b74 <_usb_d_dev_handler+0x24c>)
    4aa2:	4798      	blx	r3
    4aa4:	e006      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 0);
    4aa6:	2100      	movs	r1, #0
    4aa8:	4b31      	ldr	r3, [pc, #196]	; (4b70 <_usb_d_dev_handler+0x248>)
    4aaa:	4798      	blx	r3
    4aac:	e002      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    4aae:	2100      	movs	r1, #0
    4ab0:	4b2d      	ldr	r3, [pc, #180]	; (4b68 <_usb_d_dev_handler+0x240>)
    4ab2:	4798      	blx	r3
	for (i = 0; i < USB_D_N_EP; i++) {
    4ab4:	3401      	adds	r4, #1
    4ab6:	b2e4      	uxtb	r4, r4
    4ab8:	2c08      	cmp	r4, #8
    4aba:	d900      	bls.n	4abe <_usb_d_dev_handler+0x196>
    4abc:	e758      	b.n	4970 <_usb_d_dev_handler+0x48>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    4abe:	4b25      	ldr	r3, [pc, #148]	; (4b54 <_usb_d_dev_handler+0x22c>)
    4ac0:	3320      	adds	r3, #32
    4ac2:	00a2      	lsls	r2, r4, #2
    4ac4:	1911      	adds	r1, r2, r4
    4ac6:	0088      	lsls	r0, r1, #2
    4ac8:	0001      	movs	r1, r0
    4aca:	3010      	adds	r0, #16
    4acc:	1818      	adds	r0, r3, r0
    4ace:	3004      	adds	r0, #4
		if (ept->ep == 0xFF) {
    4ad0:	185b      	adds	r3, r3, r1
    4ad2:	3326      	adds	r3, #38	; 0x26
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	2bff      	cmp	r3, #255	; 0xff
    4ad8:	d0ec      	beq.n	4ab4 <_usb_d_dev_handler+0x18c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4ada:	7c82      	ldrb	r2, [r0, #18]
    4adc:	230f      	movs	r3, #15
    4ade:	4013      	ands	r3, r2
	if (!(epint & (1u << epn))) {
    4ae0:	2201      	movs	r2, #1
    4ae2:	409a      	lsls	r2, r3
    4ae4:	422a      	tst	r2, r5
    4ae6:	d0e5      	beq.n	4ab4 <_usb_d_dev_handler+0x18c>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    4ae8:	001a      	movs	r2, r3
    4aea:	3208      	adds	r2, #8
    4aec:	0152      	lsls	r2, r2, #5
    4aee:	4918      	ldr	r1, [pc, #96]	; (4b50 <_usb_d_dev_handler+0x228>)
    4af0:	468c      	mov	ip, r1
    4af2:	4462      	add	r2, ip
    4af4:	79d2      	ldrb	r2, [r2, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    4af6:	015b      	lsls	r3, r3, #5
    4af8:	491f      	ldr	r1, [pc, #124]	; (4b78 <_usb_d_dev_handler+0x250>)
    4afa:	468c      	mov	ip, r1
    4afc:	4463      	add	r3, ip
    4afe:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    4b00:	4013      	ands	r3, r2
	if (flags) {
    4b02:	d0d7      	beq.n	4ab4 <_usb_d_dev_handler+0x18c>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    4b04:	7cc2      	ldrb	r2, [r0, #19]
    4b06:	2147      	movs	r1, #71	; 0x47
    4b08:	4011      	ands	r1, r2
    4b0a:	2901      	cmp	r1, #1
    4b0c:	d09c      	beq.n	4a48 <_usb_d_dev_handler+0x120>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    4b0e:	b252      	sxtb	r2, r2
    4b10:	2a00      	cmp	r2, #0
    4b12:	dbaa      	blt.n	4a6a <_usb_d_dev_handler+0x142>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    4b14:	069a      	lsls	r2, r3, #26
    4b16:	d4ca      	bmi.n	4aae <_usb_d_dev_handler+0x186>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4b18:	075a      	lsls	r2, r3, #29
    4b1a:	d40d      	bmi.n	4b38 <_usb_d_dev_handler+0x210>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4b1c:	07da      	lsls	r2, r3, #31
    4b1e:	d40f      	bmi.n	4b40 <_usb_d_dev_handler+0x218>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    4b20:	7cc1      	ldrb	r1, [r0, #19]
    4b22:	2207      	movs	r2, #7
    4b24:	400a      	ands	r2, r1
    4b26:	2a01      	cmp	r2, #1
    4b28:	d1c4      	bne.n	4ab4 <_usb_d_dev_handler+0x18c>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4b2a:	071a      	lsls	r2, r3, #28
    4b2c:	d40c      	bmi.n	4b48 <_usb_d_dev_handler+0x220>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4b2e:	06db      	lsls	r3, r3, #27
    4b30:	d5c0      	bpl.n	4ab4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_setup(ept);
    4b32:	4b0e      	ldr	r3, [pc, #56]	; (4b6c <_usb_d_dev_handler+0x244>)
    4b34:	4798      	blx	r3
    4b36:	e7bd      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_trfail(ept, 0);
    4b38:	2100      	movs	r1, #0
    4b3a:	4b0d      	ldr	r3, [pc, #52]	; (4b70 <_usb_d_dev_handler+0x248>)
    4b3c:	4798      	blx	r3
    4b3e:	e7b9      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_out_next(ept, true);
    4b40:	2101      	movs	r1, #1
    4b42:	4b0e      	ldr	r3, [pc, #56]	; (4b7c <_usb_d_dev_handler+0x254>)
    4b44:	4798      	blx	r3
    4b46:	e7b5      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
			_usb_d_dev_handle_trfail(ept, 1);
    4b48:	2101      	movs	r1, #1
    4b4a:	4b09      	ldr	r3, [pc, #36]	; (4b70 <_usb_d_dev_handler+0x248>)
    4b4c:	4798      	blx	r3
    4b4e:	e7b1      	b.n	4ab4 <_usb_d_dev_handler+0x18c>
    4b50:	41005000 	.word	0x41005000
    4b54:	20000ff0 	.word	0x20000ff0
    4b58:	00000201 	.word	0x00000201
    4b5c:	20000f70 	.word	0x20000f70
    4b60:	40000800 	.word	0x40000800
    4b64:	0000453d 	.word	0x0000453d
    4b68:	00004359 	.word	0x00004359
    4b6c:	000042c9 	.word	0x000042c9
    4b70:	0000442d 	.word	0x0000442d
    4b74:	00004595 	.word	0x00004595
    4b78:	41005109 	.word	0x41005109
    4b7c:	00004725 	.word	0x00004725

00004b80 <_usb_d_dev_init>:
{
    4b80:	b500      	push	{lr}
    4b82:	b083      	sub	sp, #12
	const uint8_t spdconf[4] = {
    4b84:	2200      	movs	r2, #0
    4b86:	ab01      	add	r3, sp, #4
    4b88:	705a      	strb	r2, [r3, #1]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    4b8a:	4b21      	ldr	r3, [pc, #132]	; (4c10 <_usb_d_dev_init+0x90>)
    4b8c:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    4b8e:	07db      	lsls	r3, r3, #31
    4b90:	d41b      	bmi.n	4bca <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4b92:	4b1f      	ldr	r3, [pc, #124]	; (4c10 <_usb_d_dev_init+0x90>)
    4b94:	789b      	ldrb	r3, [r3, #2]
    4b96:	079b      	lsls	r3, r3, #30
    4b98:	d1fb      	bne.n	4b92 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    4b9a:	4b1d      	ldr	r3, [pc, #116]	; (4c10 <_usb_d_dev_init+0x90>)
    4b9c:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    4b9e:	079b      	lsls	r3, r3, #30
    4ba0:	d50c      	bpl.n	4bbc <_usb_d_dev_init+0x3c>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    4ba2:	4a1b      	ldr	r2, [pc, #108]	; (4c10 <_usb_d_dev_init+0x90>)
    4ba4:	7813      	ldrb	r3, [r2, #0]
    4ba6:	2102      	movs	r1, #2
    4ba8:	438b      	bics	r3, r1
    4baa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4bac:	4b18      	ldr	r3, [pc, #96]	; (4c10 <_usb_d_dev_init+0x90>)
    4bae:	789b      	ldrb	r3, [r3, #2]
    4bb0:	079b      	lsls	r3, r3, #30
    4bb2:	d1fb      	bne.n	4bac <_usb_d_dev_init+0x2c>
    4bb4:	4b16      	ldr	r3, [pc, #88]	; (4c10 <_usb_d_dev_init+0x90>)
    4bb6:	789b      	ldrb	r3, [r3, #2]
    4bb8:	079b      	lsls	r3, r3, #30
    4bba:	d4fb      	bmi.n	4bb4 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4bbc:	2201      	movs	r2, #1
    4bbe:	4b14      	ldr	r3, [pc, #80]	; (4c10 <_usb_d_dev_init+0x90>)
    4bc0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4bc2:	4b13      	ldr	r3, [pc, #76]	; (4c10 <_usb_d_dev_init+0x90>)
    4bc4:	789b      	ldrb	r3, [r3, #2]
    4bc6:	079b      	lsls	r3, r3, #30
    4bc8:	d1fb      	bne.n	4bc2 <_usb_d_dev_init+0x42>
    4bca:	4b11      	ldr	r3, [pc, #68]	; (4c10 <_usb_d_dev_init+0x90>)
    4bcc:	789b      	ldrb	r3, [r3, #2]
    4bce:	07db      	lsls	r3, r3, #31
    4bd0:	d4fb      	bmi.n	4bca <_usb_d_dev_init+0x4a>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    4bd2:	4b10      	ldr	r3, [pc, #64]	; (4c14 <_usb_d_dev_init+0x94>)
    4bd4:	4a10      	ldr	r2, [pc, #64]	; (4c18 <_usb_d_dev_init+0x98>)
    4bd6:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    4bd8:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    4bda:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    4bdc:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    4bde:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    4be0:	4b0e      	ldr	r3, [pc, #56]	; (4c1c <_usb_d_dev_init+0x9c>)
    4be2:	4798      	blx	r3
	_usb_load_calib();
    4be4:	4b0e      	ldr	r3, [pc, #56]	; (4c20 <_usb_d_dev_init+0xa0>)
    4be6:	4798      	blx	r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4be8:	2204      	movs	r2, #4
    4bea:	4b09      	ldr	r3, [pc, #36]	; (4c10 <_usb_d_dev_init+0x90>)
    4bec:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4bee:	4b08      	ldr	r3, [pc, #32]	; (4c10 <_usb_d_dev_init+0x90>)
    4bf0:	789b      	ldrb	r3, [r3, #2]
    4bf2:	079b      	lsls	r3, r3, #30
    4bf4:	d1fb      	bne.n	4bee <_usb_d_dev_init+0x6e>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    4bf6:	4a06      	ldr	r2, [pc, #24]	; (4c10 <_usb_d_dev_init+0x90>)
    4bf8:	4b0a      	ldr	r3, [pc, #40]	; (4c24 <_usb_d_dev_init+0xa4>)
    4bfa:	6253      	str	r3, [r2, #36]	; 0x24
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    4bfc:	ab01      	add	r3, sp, #4
    4bfe:	785b      	ldrb	r3, [r3, #1]
    4c00:	2101      	movs	r1, #1
    4c02:	430b      	orrs	r3, r1
    4c04:	b2db      	uxtb	r3, r3
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    4c06:	8113      	strh	r3, [r2, #8]
}
    4c08:	2000      	movs	r0, #0
    4c0a:	b003      	add	sp, #12
    4c0c:	bd00      	pop	{pc}
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	41005000 	.word	0x41005000
    4c14:	20000ff0 	.word	0x20000ff0
    4c18:	00004271 	.word	0x00004271
    4c1c:	0000453d 	.word	0x0000453d
    4c20:	00004275 	.word	0x00004275
    4c24:	20000f70 	.word	0x20000f70

00004c28 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    4c28:	4b10      	ldr	r3, [pc, #64]	; (4c6c <_usb_d_dev_enable+0x44>)
    4c2a:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    4c2c:	079b      	lsls	r3, r3, #30
    4c2e:	d119      	bne.n	4c64 <_usb_d_dev_enable+0x3c>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4c30:	4b0e      	ldr	r3, [pc, #56]	; (4c6c <_usb_d_dev_enable+0x44>)
    4c32:	789b      	ldrb	r3, [r3, #2]
    4c34:	079b      	lsls	r3, r3, #30
    4c36:	d1fb      	bne.n	4c30 <_usb_d_dev_enable+0x8>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    4c38:	4b0c      	ldr	r3, [pc, #48]	; (4c6c <_usb_d_dev_enable+0x44>)
    4c3a:	781b      	ldrb	r3, [r3, #0]
    4c3c:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    4c3e:	079a      	lsls	r2, r3, #30
    4c40:	d408      	bmi.n	4c54 <_usb_d_dev_enable+0x2c>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    4c42:	2202      	movs	r2, #2
    4c44:	4313      	orrs	r3, r2
    4c46:	b2db      	uxtb	r3, r3
	((Usb *)hw)->HOST.CTRLA.reg = data;
    4c48:	4a08      	ldr	r2, [pc, #32]	; (4c6c <_usb_d_dev_enable+0x44>)
    4c4a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    4c4c:	4b07      	ldr	r3, [pc, #28]	; (4c6c <_usb_d_dev_enable+0x44>)
    4c4e:	789b      	ldrb	r3, [r3, #2]
    4c50:	079b      	lsls	r3, r3, #30
    4c52:	d1fb      	bne.n	4c4c <_usb_d_dev_enable+0x24>
    4c54:	2280      	movs	r2, #128	; 0x80
    4c56:	4b06      	ldr	r3, [pc, #24]	; (4c70 <_usb_d_dev_enable+0x48>)
    4c58:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    4c5a:	4a06      	ldr	r2, [pc, #24]	; (4c74 <_usb_d_dev_enable+0x4c>)
    4c5c:	4b03      	ldr	r3, [pc, #12]	; (4c6c <_usb_d_dev_enable+0x44>)
    4c5e:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    4c60:	2000      	movs	r0, #0
}
    4c62:	4770      	bx	lr
		return -USB_ERR_DENIED;
    4c64:	2011      	movs	r0, #17
    4c66:	4240      	negs	r0, r0
    4c68:	e7fb      	b.n	4c62 <_usb_d_dev_enable+0x3a>
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	41005000 	.word	0x41005000
    4c70:	e000e100 	.word	0xe000e100
    4c74:	0000028d 	.word	0x0000028d

00004c78 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4c78:	4a02      	ldr	r2, [pc, #8]	; (4c84 <_usb_d_dev_attach+0xc>)
    4c7a:	8913      	ldrh	r3, [r2, #8]
    4c7c:	2101      	movs	r1, #1
    4c7e:	438b      	bics	r3, r1
    4c80:	8113      	strh	r3, [r2, #8]
}
    4c82:	4770      	bx	lr
    4c84:	41005000 	.word	0x41005000

00004c88 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    4c88:	2380      	movs	r3, #128	; 0x80
    4c8a:	425b      	negs	r3, r3
    4c8c:	4318      	orrs	r0, r3
    4c8e:	b2c0      	uxtb	r0, r0
	((Usb *)hw)->DEVICE.DADD.reg = data;
    4c90:	4b01      	ldr	r3, [pc, #4]	; (4c98 <_usb_d_dev_set_address+0x10>)
    4c92:	7298      	strb	r0, [r3, #10]
}
    4c94:	4770      	bx	lr
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	41005000 	.word	0x41005000

00004c9c <_usb_d_dev_ep_init>:
{
    4c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c9e:	46c6      	mov	lr, r8
    4ca0:	b500      	push	{lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    4ca2:	230f      	movs	r3, #15
    4ca4:	4003      	ands	r3, r0
    4ca6:	b244      	sxtb	r4, r0
    4ca8:	46a4      	mov	ip, r4
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4caa:	2b00      	cmp	r3, #0
    4cac:	d005      	beq.n	4cba <_usb_d_dev_ep_init+0x1e>
    4cae:	2c00      	cmp	r4, #0
    4cb0:	db01      	blt.n	4cb6 <_usb_d_dev_ep_init+0x1a>
    4cb2:	001c      	movs	r4, r3
    4cb4:	e002      	b.n	4cbc <_usb_d_dev_ep_init+0x20>
    4cb6:	1d1c      	adds	r4, r3, #4
    4cb8:	e000      	b.n	4cbc <_usb_d_dev_ep_init+0x20>
    4cba:	001c      	movs	r4, r3
	return &dev_inst.ep[ep_index];
    4cbc:	0026      	movs	r6, r4
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    4cbe:	2503      	movs	r5, #3
    4cc0:	4029      	ands	r1, r5
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    4cc2:	001f      	movs	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    4cc4:	2b04      	cmp	r3, #4
    4cc6:	d900      	bls.n	4cca <_usb_d_dev_ep_init+0x2e>
    4cc8:	e07a      	b.n	4dc0 <_usb_d_dev_ep_init+0x124>
	if (ept->ep != 0xFF) {
    4cca:	00a5      	lsls	r5, r4, #2
    4ccc:	192d      	adds	r5, r5, r4
    4cce:	00ac      	lsls	r4, r5, #2
    4cd0:	46a0      	mov	r8, r4
    4cd2:	4c43      	ldr	r4, [pc, #268]	; (4de0 <_usb_d_dev_ep_init+0x144>)
    4cd4:	3420      	adds	r4, #32
    4cd6:	4444      	add	r4, r8
    4cd8:	3426      	adds	r4, #38	; 0x26
    4cda:	7824      	ldrb	r4, [r4, #0]
    4cdc:	2cff      	cmp	r4, #255	; 0xff
    4cde:	d000      	beq.n	4ce2 <_usb_d_dev_ep_init+0x46>
    4ce0:	e071      	b.n	4dc6 <_usb_d_dev_ep_init+0x12a>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    4ce2:	2900      	cmp	r1, #0
    4ce4:	d118      	bne.n	4d18 <_usb_d_dev_ep_init+0x7c>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d004      	beq.n	4cf4 <_usb_d_dev_ep_init+0x58>
    4cea:	4664      	mov	r4, ip
    4cec:	2c00      	cmp	r4, #0
    4cee:	db01      	blt.n	4cf4 <_usb_d_dev_ep_init+0x58>
    4cf0:	3304      	adds	r3, #4
    4cf2:	b2db      	uxtb	r3, r3
		if (ept_in->ep != 0xFF) {
    4cf4:	009c      	lsls	r4, r3, #2
    4cf6:	18e3      	adds	r3, r4, r3
    4cf8:	009d      	lsls	r5, r3, #2
    4cfa:	4b39      	ldr	r3, [pc, #228]	; (4de0 <_usb_d_dev_ep_init+0x144>)
    4cfc:	3320      	adds	r3, #32
    4cfe:	195b      	adds	r3, r3, r5
    4d00:	3326      	adds	r3, #38	; 0x26
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	2bff      	cmp	r3, #255	; 0xff
    4d06:	d161      	bne.n	4dcc <_usb_d_dev_ep_init+0x130>
		if (pcfg->cache == NULL) {
    4d08:	007b      	lsls	r3, r7, #1
    4d0a:	19db      	adds	r3, r3, r7
    4d0c:	009c      	lsls	r4, r3, #2
    4d0e:	4b35      	ldr	r3, [pc, #212]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4d10:	191b      	adds	r3, r3, r4
    4d12:	689b      	ldr	r3, [r3, #8]
    4d14:	2b00      	cmp	r3, #0
    4d16:	d05c      	beq.n	4dd2 <_usb_d_dev_ep_init+0x136>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4d18:	4663      	mov	r3, ip
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	db37      	blt.n	4d8e <_usb_d_dev_ep_init+0xf2>
    4d1e:	007b      	lsls	r3, r7, #1
    4d20:	19db      	adds	r3, r3, r7
    4d22:	009c      	lsls	r4, r3, #2
    4d24:	4b2f      	ldr	r3, [pc, #188]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4d26:	191b      	adds	r3, r3, r4
    4d28:	689b      	ldr	r3, [r3, #8]
    4d2a:	1e5c      	subs	r4, r3, #1
    4d2c:	41a3      	sbcs	r3, r4
    4d2e:	b2db      	uxtb	r3, r3
    4d30:	2b00      	cmp	r3, #0
    4d32:	d00a      	beq.n	4d4a <_usb_d_dev_ep_init+0xae>
    4d34:	4663      	mov	r3, ip
    4d36:	2b00      	cmp	r3, #0
    4d38:	db33      	blt.n	4da2 <_usb_d_dev_ep_init+0x106>
    4d3a:	007b      	lsls	r3, r7, #1
    4d3c:	19db      	adds	r3, r3, r7
    4d3e:	009c      	lsls	r4, r3, #2
    4d40:	4b28      	ldr	r3, [pc, #160]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4d42:	191b      	adds	r3, r3, r4
    4d44:	8a1b      	ldrh	r3, [r3, #16]
    4d46:	4293      	cmp	r3, r2
    4d48:	db46      	blt.n	4dd8 <_usb_d_dev_ep_init+0x13c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4d4a:	4663      	mov	r3, ip
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	db2f      	blt.n	4db0 <_usb_d_dev_ep_init+0x114>
    4d50:	007b      	lsls	r3, r7, #1
    4d52:	19df      	adds	r7, r3, r7
    4d54:	00bc      	lsls	r4, r7, #2
    4d56:	4b23      	ldr	r3, [pc, #140]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4d58:	191b      	adds	r3, r3, r4
    4d5a:	689b      	ldr	r3, [r3, #8]
    4d5c:	469c      	mov	ip, r3
    4d5e:	4b20      	ldr	r3, [pc, #128]	; (4de0 <_usb_d_dev_ep_init+0x144>)
    4d60:	00b5      	lsls	r5, r6, #2
    4d62:	19af      	adds	r7, r5, r6
    4d64:	00bc      	lsls	r4, r7, #2
    4d66:	191c      	adds	r4, r3, r4
    4d68:	4667      	mov	r7, ip
    4d6a:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    4d6c:	3444      	adds	r4, #68	; 0x44
    4d6e:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    4d70:	3101      	adds	r1, #1
    4d72:	3320      	adds	r3, #32
    4d74:	19ac      	adds	r4, r5, r6
    4d76:	00a2      	lsls	r2, r4, #2
    4d78:	0014      	movs	r4, r2
    4d7a:	189a      	adds	r2, r3, r2
    4d7c:	3227      	adds	r2, #39	; 0x27
    4d7e:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    4d80:	191b      	adds	r3, r3, r4
    4d82:	3326      	adds	r3, #38	; 0x26
    4d84:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    4d86:	2000      	movs	r0, #0
}
    4d88:	bc04      	pop	{r2}
    4d8a:	4690      	mov	r8, r2
    4d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    4d8e:	007b      	lsls	r3, r7, #1
    4d90:	19db      	adds	r3, r3, r7
    4d92:	009c      	lsls	r4, r3, #2
    4d94:	4b13      	ldr	r3, [pc, #76]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4d96:	191b      	adds	r3, r3, r4
    4d98:	68db      	ldr	r3, [r3, #12]
    4d9a:	1e5c      	subs	r4, r3, #1
    4d9c:	41a3      	sbcs	r3, r4
    4d9e:	b2db      	uxtb	r3, r3
    4da0:	e7c6      	b.n	4d30 <_usb_d_dev_ep_init+0x94>
    4da2:	007b      	lsls	r3, r7, #1
    4da4:	19db      	adds	r3, r3, r7
    4da6:	009c      	lsls	r4, r3, #2
    4da8:	4b0e      	ldr	r3, [pc, #56]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4daa:	191b      	adds	r3, r3, r4
    4dac:	8a5b      	ldrh	r3, [r3, #18]
    4dae:	e7ca      	b.n	4d46 <_usb_d_dev_ep_init+0xaa>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    4db0:	007b      	lsls	r3, r7, #1
    4db2:	19df      	adds	r7, r3, r7
    4db4:	00bc      	lsls	r4, r7, #2
    4db6:	4b0b      	ldr	r3, [pc, #44]	; (4de4 <_usb_d_dev_ep_init+0x148>)
    4db8:	191b      	adds	r3, r3, r4
    4dba:	68db      	ldr	r3, [r3, #12]
    4dbc:	469c      	mov	ip, r3
    4dbe:	e7ce      	b.n	4d5e <_usb_d_dev_ep_init+0xc2>
		return -USB_ERR_PARAM;
    4dc0:	2012      	movs	r0, #18
    4dc2:	4240      	negs	r0, r0
    4dc4:	e7e0      	b.n	4d88 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_REDO;
    4dc6:	2014      	movs	r0, #20
    4dc8:	4240      	negs	r0, r0
    4dca:	e7dd      	b.n	4d88 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_REDO;
    4dcc:	2014      	movs	r0, #20
    4dce:	4240      	negs	r0, r0
    4dd0:	e7da      	b.n	4d88 <_usb_d_dev_ep_init+0xec>
			return -USB_ERR_FUNC;
    4dd2:	2013      	movs	r0, #19
    4dd4:	4240      	negs	r0, r0
    4dd6:	e7d7      	b.n	4d88 <_usb_d_dev_ep_init+0xec>
		return -USB_ERR_FUNC;
    4dd8:	2013      	movs	r0, #19
    4dda:	4240      	negs	r0, r0
    4ddc:	e7d4      	b.n	4d88 <_usb_d_dev_ep_init+0xec>
    4dde:	46c0      	nop			; (mov r8, r8)
    4de0:	20000ff0 	.word	0x20000ff0
    4de4:	000111c0 	.word	0x000111c0

00004de8 <_usb_d_dev_ep_deinit>:
{
    4de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dea:	0004      	movs	r4, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    4dec:	250f      	movs	r5, #15
    4dee:	4005      	ands	r5, r0
    4df0:	b247      	sxtb	r7, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    4df2:	0ffb      	lsrs	r3, r7, #31
    4df4:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4df6:	2d00      	cmp	r5, #0
    4df8:	d005      	beq.n	4e06 <_usb_d_dev_ep_deinit+0x1e>
    4dfa:	2f00      	cmp	r7, #0
    4dfc:	db01      	blt.n	4e02 <_usb_d_dev_ep_deinit+0x1a>
    4dfe:	002a      	movs	r2, r5
    4e00:	e002      	b.n	4e08 <_usb_d_dev_ep_deinit+0x20>
    4e02:	1d2a      	adds	r2, r5, #4
    4e04:	e000      	b.n	4e08 <_usb_d_dev_ep_deinit+0x20>
    4e06:	002a      	movs	r2, r5
	return &dev_inst.ep[ep_index];
    4e08:	0016      	movs	r6, r2
    4e0a:	0093      	lsls	r3, r2, #2
    4e0c:	189b      	adds	r3, r3, r2
    4e0e:	0099      	lsls	r1, r3, #2
    4e10:	3110      	adds	r1, #16
    4e12:	4823      	ldr	r0, [pc, #140]	; (4ea0 <_usb_d_dev_ep_deinit+0xb8>)
    4e14:	3020      	adds	r0, #32
    4e16:	1840      	adds	r0, r0, r1
    4e18:	3004      	adds	r0, #4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4e1a:	2d04      	cmp	r5, #4
    4e1c:	d830      	bhi.n	4e80 <_usb_d_dev_ep_deinit+0x98>
    4e1e:	0093      	lsls	r3, r2, #2
    4e20:	189a      	adds	r2, r3, r2
    4e22:	0091      	lsls	r1, r2, #2
    4e24:	4b1e      	ldr	r3, [pc, #120]	; (4ea0 <_usb_d_dev_ep_deinit+0xb8>)
    4e26:	3320      	adds	r3, #32
    4e28:	185b      	adds	r3, r3, r1
    4e2a:	3326      	adds	r3, #38	; 0x26
    4e2c:	781b      	ldrb	r3, [r3, #0]
    4e2e:	2bff      	cmp	r3, #255	; 0xff
    4e30:	d026      	beq.n	4e80 <_usb_d_dev_ep_deinit+0x98>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    4e32:	2203      	movs	r2, #3
    4e34:	4661      	mov	r1, ip
    4e36:	4b1b      	ldr	r3, [pc, #108]	; (4ea4 <_usb_d_dev_ep_deinit+0xbc>)
    4e38:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    4e3a:	00b2      	lsls	r2, r6, #2
    4e3c:	1992      	adds	r2, r2, r6
    4e3e:	0091      	lsls	r1, r2, #2
    4e40:	4b17      	ldr	r3, [pc, #92]	; (4ea0 <_usb_d_dev_ep_deinit+0xb8>)
    4e42:	185b      	adds	r3, r3, r1
    4e44:	3340      	adds	r3, #64	; 0x40
    4e46:	79da      	ldrb	r2, [r3, #7]
    4e48:	2307      	movs	r3, #7
    4e4a:	4013      	ands	r3, r2
    4e4c:	2b01      	cmp	r3, #1
    4e4e:	d018      	beq.n	4e82 <_usb_d_dev_ep_deinit+0x9a>
	} else if (USB_EP_GET_DIR(ep)) {
    4e50:	2f00      	cmp	r7, #0
    4e52:	db1c      	blt.n	4e8e <_usb_d_dev_ep_deinit+0xa6>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    4e54:	4a14      	ldr	r2, [pc, #80]	; (4ea8 <_usb_d_dev_ep_deinit+0xc0>)
    4e56:	3408      	adds	r4, #8
    4e58:	0164      	lsls	r4, r4, #5
    4e5a:	5ca3      	ldrb	r3, [r4, r2]
    4e5c:	2107      	movs	r1, #7
    4e5e:	438b      	bics	r3, r1
    4e60:	54a3      	strb	r3, [r4, r2]
	ept->flags.u8 = 0;
    4e62:	4b0f      	ldr	r3, [pc, #60]	; (4ea0 <_usb_d_dev_ep_deinit+0xb8>)
    4e64:	3320      	adds	r3, #32
    4e66:	00b1      	lsls	r1, r6, #2
    4e68:	1988      	adds	r0, r1, r6
    4e6a:	0082      	lsls	r2, r0, #2
    4e6c:	189a      	adds	r2, r3, r2
    4e6e:	3227      	adds	r2, #39	; 0x27
    4e70:	2000      	movs	r0, #0
    4e72:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    4e74:	198e      	adds	r6, r1, r6
    4e76:	00b2      	lsls	r2, r6, #2
    4e78:	189b      	adds	r3, r3, r2
    4e7a:	3326      	adds	r3, #38	; 0x26
    4e7c:	22ff      	movs	r2, #255	; 0xff
    4e7e:	701a      	strb	r2, [r3, #0]
}
    4e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    4e82:	3408      	adds	r4, #8
    4e84:	0164      	lsls	r4, r4, #5
    4e86:	2200      	movs	r2, #0
    4e88:	4b07      	ldr	r3, [pc, #28]	; (4ea8 <_usb_d_dev_ep_deinit+0xc0>)
    4e8a:	54e2      	strb	r2, [r4, r3]
    4e8c:	e7e9      	b.n	4e62 <_usb_d_dev_ep_deinit+0x7a>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    4e8e:	4a06      	ldr	r2, [pc, #24]	; (4ea8 <_usb_d_dev_ep_deinit+0xc0>)
    4e90:	3508      	adds	r5, #8
    4e92:	016d      	lsls	r5, r5, #5
    4e94:	5cab      	ldrb	r3, [r5, r2]
    4e96:	2170      	movs	r1, #112	; 0x70
    4e98:	438b      	bics	r3, r1
    4e9a:	54ab      	strb	r3, [r5, r2]
    4e9c:	e7e1      	b.n	4e62 <_usb_d_dev_ep_deinit+0x7a>
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	20000ff0 	.word	0x20000ff0
    4ea4:	000043b1 	.word	0x000043b1
    4ea8:	41005000 	.word	0x41005000

00004eac <_usb_d_dev_ep_enable>:
{
    4eac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    4eae:	230f      	movs	r3, #15
    4eb0:	4003      	ands	r3, r0
    4eb2:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d005      	beq.n	4ec4 <_usb_d_dev_ep_enable+0x18>
    4eb8:	2800      	cmp	r0, #0
    4eba:	db01      	blt.n	4ec0 <_usb_d_dev_ep_enable+0x14>
    4ebc:	001e      	movs	r6, r3
    4ebe:	e002      	b.n	4ec6 <_usb_d_dev_ep_enable+0x1a>
    4ec0:	1d1e      	adds	r6, r3, #4
    4ec2:	e000      	b.n	4ec6 <_usb_d_dev_ep_enable+0x1a>
    4ec4:	001e      	movs	r6, r3
	return &dev_inst.ep[ep_index];
    4ec6:	0034      	movs	r4, r6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4ec8:	001a      	movs	r2, r3
    4eca:	3208      	adds	r2, #8
    4ecc:	0152      	lsls	r2, r2, #5
    4ece:	49b3      	ldr	r1, [pc, #716]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    4ed0:	5c55      	ldrb	r5, [r2, r1]
    4ed2:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    4ed4:	2b04      	cmp	r3, #4
    4ed6:	d900      	bls.n	4eda <_usb_d_dev_ep_enable+0x2e>
    4ed8:	e151      	b.n	517e <_usb_d_dev_ep_enable+0x2d2>
    4eda:	00b1      	lsls	r1, r6, #2
    4edc:	1989      	adds	r1, r1, r6
    4ede:	008e      	lsls	r6, r1, #2
    4ee0:	4aaf      	ldr	r2, [pc, #700]	; (51a0 <_usb_d_dev_ep_enable+0x2f4>)
    4ee2:	3220      	adds	r2, #32
    4ee4:	1992      	adds	r2, r2, r6
    4ee6:	3226      	adds	r2, #38	; 0x26
    4ee8:	7812      	ldrb	r2, [r2, #0]
    4eea:	2aff      	cmp	r2, #255	; 0xff
    4eec:	d100      	bne.n	4ef0 <_usb_d_dev_ep_enable+0x44>
    4eee:	e149      	b.n	5184 <_usb_d_dev_ep_enable+0x2d8>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    4ef0:	015a      	lsls	r2, r3, #5
    4ef2:	4eac      	ldr	r6, [pc, #688]	; (51a4 <_usb_d_dev_ep_enable+0x2f8>)
    4ef4:	18b6      	adds	r6, r6, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    4ef6:	00a1      	lsls	r1, r4, #2
    4ef8:	1909      	adds	r1, r1, r4
    4efa:	008f      	lsls	r7, r1, #2
    4efc:	4aa8      	ldr	r2, [pc, #672]	; (51a0 <_usb_d_dev_ep_enable+0x2f4>)
    4efe:	19d2      	adds	r2, r2, r7
    4f00:	3240      	adds	r2, #64	; 0x40
    4f02:	79d1      	ldrb	r1, [r2, #7]
    4f04:	2207      	movs	r2, #7
    4f06:	400a      	ands	r2, r1
    4f08:	2a01      	cmp	r2, #1
    4f0a:	d037      	beq.n	4f7c <_usb_d_dev_ep_enable+0xd0>
	} else if (dir) {
    4f0c:	2800      	cmp	r0, #0
    4f0e:	da00      	bge.n	4f12 <_usb_d_dev_ep_enable+0x66>
    4f10:	e0cc      	b.n	50ac <_usb_d_dev_ep_enable+0x200>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    4f12:	076a      	lsls	r2, r5, #29
    4f14:	d000      	beq.n	4f18 <_usb_d_dev_ep_enable+0x6c>
    4f16:	e13e      	b.n	5196 <_usb_d_dev_ep_enable+0x2ea>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    4f18:	4aa1      	ldr	r2, [pc, #644]	; (51a0 <_usb_d_dev_ep_enable+0x2f4>)
    4f1a:	00a0      	lsls	r0, r4, #2
    4f1c:	1907      	adds	r7, r0, r4
    4f1e:	00b9      	lsls	r1, r7, #2
    4f20:	1851      	adds	r1, r2, r1
    4f22:	3140      	adds	r1, #64	; 0x40
    4f24:	79c9      	ldrb	r1, [r1, #7]
    4f26:	0749      	lsls	r1, r1, #29
    4f28:	0f49      	lsrs	r1, r1, #29
    4f2a:	430d      	orrs	r5, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    4f2c:	0019      	movs	r1, r3
    4f2e:	3108      	adds	r1, #8
    4f30:	0149      	lsls	r1, r1, #5
    4f32:	4f9a      	ldr	r7, [pc, #616]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    4f34:	55cd      	strb	r5, [r1, r7]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f36:	1904      	adds	r4, r0, r4
    4f38:	00a1      	lsls	r1, r4, #2
    4f3a:	1852      	adds	r2, r2, r1
    4f3c:	3244      	adds	r2, #68	; 0x44
    4f3e:	8810      	ldrh	r0, [r2, #0]
    4f40:	0382      	lsls	r2, r0, #14
    4f42:	4999      	ldr	r1, [pc, #612]	; (51a8 <_usb_d_dev_ep_enable+0x2fc>)
    4f44:	400a      	ands	r2, r1
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f46:	2180      	movs	r1, #128	; 0x80
    4f48:	0089      	lsls	r1, r1, #2
    4f4a:	4288      	cmp	r0, r1
    4f4c:	d900      	bls.n	4f50 <_usb_d_dev_ep_enable+0xa4>
    4f4e:	e0f9      	b.n	5144 <_usb_d_dev_ep_enable+0x298>
    4f50:	3901      	subs	r1, #1
    4f52:	39ff      	subs	r1, #255	; 0xff
    4f54:	4288      	cmp	r0, r1
    4f56:	d900      	bls.n	4f5a <_usb_d_dev_ep_enable+0xae>
    4f58:	e107      	b.n	516a <_usb_d_dev_ep_enable+0x2be>
    4f5a:	2880      	cmp	r0, #128	; 0x80
    4f5c:	d900      	bls.n	4f60 <_usb_d_dev_ep_enable+0xb4>
    4f5e:	e106      	b.n	516e <_usb_d_dev_ep_enable+0x2c2>
    4f60:	2840      	cmp	r0, #64	; 0x40
    4f62:	d900      	bls.n	4f66 <_usb_d_dev_ep_enable+0xba>
    4f64:	e105      	b.n	5172 <_usb_d_dev_ep_enable+0x2c6>
    4f66:	2820      	cmp	r0, #32
    4f68:	d900      	bls.n	4f6c <_usb_d_dev_ep_enable+0xc0>
    4f6a:	e104      	b.n	5176 <_usb_d_dev_ep_enable+0x2ca>
    4f6c:	2810      	cmp	r0, #16
    4f6e:	d900      	bls.n	4f72 <_usb_d_dev_ep_enable+0xc6>
    4f70:	e103      	b.n	517a <_usb_d_dev_ep_enable+0x2ce>
    4f72:	39f8      	subs	r1, #248	; 0xf8
    4f74:	4281      	cmp	r1, r0
    4f76:	4189      	sbcs	r1, r1
    4f78:	4249      	negs	r1, r1
    4f7a:	e0e4      	b.n	5146 <_usb_d_dev_ep_enable+0x29a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    4f7c:	3276      	adds	r2, #118	; 0x76
    4f7e:	422a      	tst	r2, r5
    4f80:	d000      	beq.n	4f84 <_usb_d_dev_ep_enable+0xd8>
    4f82:	e102      	b.n	518a <_usb_d_dev_ep_enable+0x2de>
    4f84:	001a      	movs	r2, r3
    4f86:	3208      	adds	r2, #8
    4f88:	0152      	lsls	r2, r2, #5
    4f8a:	2011      	movs	r0, #17
    4f8c:	4983      	ldr	r1, [pc, #524]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    4f8e:	5450      	strb	r0, [r2, r1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4f90:	4a83      	ldr	r2, [pc, #524]	; (51a0 <_usb_d_dev_ep_enable+0x2f4>)
    4f92:	19d2      	adds	r2, r2, r7
    4f94:	3244      	adds	r2, #68	; 0x44
    4f96:	8812      	ldrh	r2, [r2, #0]
    4f98:	0391      	lsls	r1, r2, #14
    4f9a:	4883      	ldr	r0, [pc, #524]	; (51a8 <_usb_d_dev_ep_enable+0x2fc>)
    4f9c:	4001      	ands	r1, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4f9e:	2080      	movs	r0, #128	; 0x80
    4fa0:	0080      	lsls	r0, r0, #2
    4fa2:	4282      	cmp	r2, r0
    4fa4:	d810      	bhi.n	4fc8 <_usb_d_dev_ep_enable+0x11c>
    4fa6:	3801      	subs	r0, #1
    4fa8:	38ff      	subs	r0, #255	; 0xff
    4faa:	4282      	cmp	r2, r0
    4fac:	d827      	bhi.n	4ffe <_usb_d_dev_ep_enable+0x152>
    4fae:	2a80      	cmp	r2, #128	; 0x80
    4fb0:	d827      	bhi.n	5002 <_usb_d_dev_ep_enable+0x156>
    4fb2:	2a40      	cmp	r2, #64	; 0x40
    4fb4:	d827      	bhi.n	5006 <_usb_d_dev_ep_enable+0x15a>
    4fb6:	2a20      	cmp	r2, #32
    4fb8:	d827      	bhi.n	500a <_usb_d_dev_ep_enable+0x15e>
    4fba:	2a10      	cmp	r2, #16
    4fbc:	d827      	bhi.n	500e <_usb_d_dev_ep_enable+0x162>
    4fbe:	38f8      	subs	r0, #248	; 0xf8
    4fc0:	4290      	cmp	r0, r2
    4fc2:	4180      	sbcs	r0, r0
    4fc4:	4240      	negs	r0, r0
    4fc6:	e000      	b.n	4fca <_usb_d_dev_ep_enable+0x11e>
    4fc8:	2007      	movs	r0, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4fca:	0700      	lsls	r0, r0, #28
    4fcc:	4301      	orrs	r1, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    4fce:	6071      	str	r1, [r6, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    4fd0:	0491      	lsls	r1, r2, #18
    4fd2:	0c89      	lsrs	r1, r1, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    4fd4:	2080      	movs	r0, #128	; 0x80
    4fd6:	0080      	lsls	r0, r0, #2
    4fd8:	4282      	cmp	r2, r0
    4fda:	d81a      	bhi.n	5012 <_usb_d_dev_ep_enable+0x166>
    4fdc:	3801      	subs	r0, #1
    4fde:	38ff      	subs	r0, #255	; 0xff
    4fe0:	4282      	cmp	r2, r0
    4fe2:	d859      	bhi.n	5098 <_usb_d_dev_ep_enable+0x1ec>
    4fe4:	2a80      	cmp	r2, #128	; 0x80
    4fe6:	d859      	bhi.n	509c <_usb_d_dev_ep_enable+0x1f0>
    4fe8:	2a40      	cmp	r2, #64	; 0x40
    4fea:	d859      	bhi.n	50a0 <_usb_d_dev_ep_enable+0x1f4>
    4fec:	2a20      	cmp	r2, #32
    4fee:	d859      	bhi.n	50a4 <_usb_d_dev_ep_enable+0x1f8>
    4ff0:	2a10      	cmp	r2, #16
    4ff2:	d859      	bhi.n	50a8 <_usb_d_dev_ep_enable+0x1fc>
    4ff4:	38f8      	subs	r0, #248	; 0xf8
    4ff6:	4290      	cmp	r0, r2
    4ff8:	4192      	sbcs	r2, r2
    4ffa:	4252      	negs	r2, r2
    4ffc:	e00a      	b.n	5014 <_usb_d_dev_ep_enable+0x168>
    4ffe:	2006      	movs	r0, #6
    5000:	e7e3      	b.n	4fca <_usb_d_dev_ep_enable+0x11e>
    5002:	2005      	movs	r0, #5
    5004:	e7e1      	b.n	4fca <_usb_d_dev_ep_enable+0x11e>
    5006:	2004      	movs	r0, #4
    5008:	e7df      	b.n	4fca <_usb_d_dev_ep_enable+0x11e>
    500a:	2003      	movs	r0, #3
    500c:	e7dd      	b.n	4fca <_usb_d_dev_ep_enable+0x11e>
    500e:	2002      	movs	r0, #2
    5010:	e7db      	b.n	4fca <_usb_d_dev_ep_enable+0x11e>
    5012:	2207      	movs	r2, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5014:	0712      	lsls	r2, r2, #28
    5016:	430a      	orrs	r2, r1
    5018:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    501a:	001a      	movs	r2, r3
    501c:	3208      	adds	r2, #8
    501e:	0152      	lsls	r2, r2, #5
    5020:	495e      	ldr	r1, [pc, #376]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    5022:	468c      	mov	ip, r1
    5024:	4462      	add	r2, ip
    5026:	2040      	movs	r0, #64	; 0x40
    5028:	7150      	strb	r0, [r2, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    502a:	2180      	movs	r1, #128	; 0x80
    502c:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    502e:	4a5d      	ldr	r2, [pc, #372]	; (51a4 <_usb_d_dev_ep_enable+0x2f8>)
    5030:	015b      	lsls	r3, r3, #5
    5032:	18d3      	adds	r3, r2, r3
    5034:	2100      	movs	r1, #0
    5036:	7299      	strb	r1, [r3, #10]
    5038:	7699      	strb	r1, [r3, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    503a:	4959      	ldr	r1, [pc, #356]	; (51a0 <_usb_d_dev_ep_enable+0x2f4>)
    503c:	000b      	movs	r3, r1
    503e:	3320      	adds	r3, #32
    5040:	00a6      	lsls	r6, r4, #2
    5042:	1937      	adds	r7, r6, r4
    5044:	00bd      	lsls	r5, r7, #2
    5046:	195b      	adds	r3, r3, r5
    5048:	3326      	adds	r3, #38	; 0x26
    504a:	781b      	ldrb	r3, [r3, #0]
    504c:	250f      	movs	r5, #15
    504e:	402b      	ands	r3, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    5050:	1937      	adds	r7, r6, r4
    5052:	00bd      	lsls	r5, r7, #2
    5054:	194d      	adds	r5, r1, r5
    5056:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	bank->ADDR.reg          = addr;
    5058:	015d      	lsls	r5, r3, #5
    505a:	50af      	str	r7, [r5, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    505c:	1934      	adds	r4, r6, r4
    505e:	00a6      	lsls	r6, r4, #2
    5060:	1989      	adds	r1, r1, r6
    5062:	3144      	adds	r1, #68	; 0x44
    5064:	8809      	ldrh	r1, [r1, #0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    5066:	1952      	adds	r2, r2, r5
    5068:	6854      	ldr	r4, [r2, #4]
    506a:	0489      	lsls	r1, r1, #18
    506c:	0909      	lsrs	r1, r1, #4
    506e:	4e4f      	ldr	r6, [pc, #316]	; (51ac <_usb_d_dev_ep_enable+0x300>)
    5070:	4034      	ands	r4, r6
    5072:	4321      	orrs	r1, r4
    5074:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    5076:	6851      	ldr	r1, [r2, #4]
    5078:	0b89      	lsrs	r1, r1, #14
    507a:	038c      	lsls	r4, r1, #14
    507c:	6054      	str	r4, [r2, #4]
    507e:	3308      	adds	r3, #8
    5080:	015b      	lsls	r3, r3, #5
    5082:	4463      	add	r3, ip
    5084:	22b0      	movs	r2, #176	; 0xb0
    5086:	711a      	strb	r2, [r3, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5088:	7158      	strb	r0, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    508a:	4b49      	ldr	r3, [pc, #292]	; (51b0 <_usb_d_dev_ep_enable+0x304>)
    508c:	469c      	mov	ip, r3
    508e:	4465      	add	r5, ip
    5090:	2310      	movs	r3, #16
    5092:	702b      	strb	r3, [r5, #0]
	return USB_OK;
    5094:	2000      	movs	r0, #0
    5096:	e067      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5098:	2206      	movs	r2, #6
    509a:	e7bb      	b.n	5014 <_usb_d_dev_ep_enable+0x168>
    509c:	2205      	movs	r2, #5
    509e:	e7b9      	b.n	5014 <_usb_d_dev_ep_enable+0x168>
    50a0:	2204      	movs	r2, #4
    50a2:	e7b7      	b.n	5014 <_usb_d_dev_ep_enable+0x168>
    50a4:	2203      	movs	r2, #3
    50a6:	e7b5      	b.n	5014 <_usb_d_dev_ep_enable+0x168>
    50a8:	2202      	movs	r2, #2
    50aa:	e7b3      	b.n	5014 <_usb_d_dev_ep_enable+0x168>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    50ac:	2270      	movs	r2, #112	; 0x70
    50ae:	422a      	tst	r2, r5
    50b0:	d000      	beq.n	50b4 <_usb_d_dev_ep_enable+0x208>
    50b2:	e06d      	b.n	5190 <_usb_d_dev_ep_enable+0x2e4>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    50b4:	493a      	ldr	r1, [pc, #232]	; (51a0 <_usb_d_dev_ep_enable+0x2f4>)
    50b6:	00a0      	lsls	r0, r4, #2
    50b8:	1907      	adds	r7, r0, r4
    50ba:	00ba      	lsls	r2, r7, #2
    50bc:	188a      	adds	r2, r1, r2
    50be:	3240      	adds	r2, #64	; 0x40
    50c0:	79d2      	ldrb	r2, [r2, #7]
    50c2:	0752      	lsls	r2, r2, #29
    50c4:	0e52      	lsrs	r2, r2, #25
    50c6:	4315      	orrs	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    50c8:	001a      	movs	r2, r3
    50ca:	3208      	adds	r2, #8
    50cc:	0152      	lsls	r2, r2, #5
    50ce:	4f33      	ldr	r7, [pc, #204]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    50d0:	55d5      	strb	r5, [r2, r7]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    50d2:	1904      	adds	r4, r0, r4
    50d4:	00a2      	lsls	r2, r4, #2
    50d6:	1889      	adds	r1, r1, r2
    50d8:	3144      	adds	r1, #68	; 0x44
    50da:	8809      	ldrh	r1, [r1, #0]
    50dc:	048a      	lsls	r2, r1, #18
    50de:	0c92      	lsrs	r2, r2, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    50e0:	2080      	movs	r0, #128	; 0x80
    50e2:	0080      	lsls	r0, r0, #2
    50e4:	4281      	cmp	r1, r0
    50e6:	d810      	bhi.n	510a <_usb_d_dev_ep_enable+0x25e>
    50e8:	3801      	subs	r0, #1
    50ea:	38ff      	subs	r0, #255	; 0xff
    50ec:	4281      	cmp	r1, r0
    50ee:	d81f      	bhi.n	5130 <_usb_d_dev_ep_enable+0x284>
    50f0:	2980      	cmp	r1, #128	; 0x80
    50f2:	d81f      	bhi.n	5134 <_usb_d_dev_ep_enable+0x288>
    50f4:	2940      	cmp	r1, #64	; 0x40
    50f6:	d81f      	bhi.n	5138 <_usb_d_dev_ep_enable+0x28c>
    50f8:	2920      	cmp	r1, #32
    50fa:	d81f      	bhi.n	513c <_usb_d_dev_ep_enable+0x290>
    50fc:	2910      	cmp	r1, #16
    50fe:	d81f      	bhi.n	5140 <_usb_d_dev_ep_enable+0x294>
    5100:	38f8      	subs	r0, #248	; 0xf8
    5102:	4288      	cmp	r0, r1
    5104:	4189      	sbcs	r1, r1
    5106:	4249      	negs	r1, r1
    5108:	e000      	b.n	510c <_usb_d_dev_ep_enable+0x260>
    510a:	2107      	movs	r1, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    510c:	0709      	lsls	r1, r1, #28
    510e:	430a      	orrs	r2, r1
    5110:	6172      	str	r2, [r6, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5112:	001a      	movs	r2, r3
    5114:	3208      	adds	r2, #8
    5116:	0152      	lsls	r2, r2, #5
    5118:	4920      	ldr	r1, [pc, #128]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    511a:	468c      	mov	ip, r1
    511c:	4462      	add	r2, ip
    511e:	2180      	movs	r1, #128	; 0x80
    5120:	7111      	strb	r1, [r2, #4]
	bank->STATUS_BK.reg     = 0;
    5122:	015a      	lsls	r2, r3, #5
    5124:	4b1f      	ldr	r3, [pc, #124]	; (51a4 <_usb_d_dev_ep_enable+0x2f8>)
    5126:	189b      	adds	r3, r3, r2
    5128:	2200      	movs	r2, #0
    512a:	769a      	strb	r2, [r3, #26]
	return USB_OK;
    512c:	2000      	movs	r0, #0
    512e:	e01b      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5130:	2106      	movs	r1, #6
    5132:	e7eb      	b.n	510c <_usb_d_dev_ep_enable+0x260>
    5134:	2105      	movs	r1, #5
    5136:	e7e9      	b.n	510c <_usb_d_dev_ep_enable+0x260>
    5138:	2104      	movs	r1, #4
    513a:	e7e7      	b.n	510c <_usb_d_dev_ep_enable+0x260>
    513c:	2103      	movs	r1, #3
    513e:	e7e5      	b.n	510c <_usb_d_dev_ep_enable+0x260>
    5140:	2102      	movs	r1, #2
    5142:	e7e3      	b.n	510c <_usb_d_dev_ep_enable+0x260>
    5144:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5146:	0709      	lsls	r1, r1, #28
    5148:	430a      	orrs	r2, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    514a:	6072      	str	r2, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    514c:	001a      	movs	r2, r3
    514e:	3208      	adds	r2, #8
    5150:	0152      	lsls	r2, r2, #5
    5152:	4912      	ldr	r1, [pc, #72]	; (519c <_usb_d_dev_ep_enable+0x2f0>)
    5154:	468c      	mov	ip, r1
    5156:	4462      	add	r2, ip
    5158:	2140      	movs	r1, #64	; 0x40
    515a:	7151      	strb	r1, [r2, #5]
	bank->STATUS_BK.reg     = 0;
    515c:	015b      	lsls	r3, r3, #5
    515e:	4a11      	ldr	r2, [pc, #68]	; (51a4 <_usb_d_dev_ep_enable+0x2f8>)
    5160:	18d3      	adds	r3, r2, r3
    5162:	2200      	movs	r2, #0
    5164:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    5166:	2000      	movs	r0, #0
}
    5168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    516a:	2106      	movs	r1, #6
    516c:	e7eb      	b.n	5146 <_usb_d_dev_ep_enable+0x29a>
    516e:	2105      	movs	r1, #5
    5170:	e7e9      	b.n	5146 <_usb_d_dev_ep_enable+0x29a>
    5172:	2104      	movs	r1, #4
    5174:	e7e7      	b.n	5146 <_usb_d_dev_ep_enable+0x29a>
    5176:	2103      	movs	r1, #3
    5178:	e7e5      	b.n	5146 <_usb_d_dev_ep_enable+0x29a>
    517a:	2102      	movs	r1, #2
    517c:	e7e3      	b.n	5146 <_usb_d_dev_ep_enable+0x29a>
		return -USB_ERR_PARAM;
    517e:	2012      	movs	r0, #18
    5180:	4240      	negs	r0, r0
    5182:	e7f1      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
    5184:	2012      	movs	r0, #18
    5186:	4240      	negs	r0, r0
    5188:	e7ee      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    518a:	2014      	movs	r0, #20
    518c:	4240      	negs	r0, r0
    518e:	e7eb      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    5190:	2014      	movs	r0, #20
    5192:	4240      	negs	r0, r0
    5194:	e7e8      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
			return -USB_ERR_REDO;
    5196:	2014      	movs	r0, #20
    5198:	4240      	negs	r0, r0
    519a:	e7e5      	b.n	5168 <_usb_d_dev_ep_enable+0x2bc>
    519c:	41005000 	.word	0x41005000
    51a0:	20000ff0 	.word	0x20000ff0
    51a4:	20000f70 	.word	0x20000f70
    51a8:	0fffc000 	.word	0x0fffc000
    51ac:	f0003fff 	.word	0xf0003fff
    51b0:	41005109 	.word	0x41005109

000051b4 <_usb_d_dev_ep_stall>:
{
    51b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    51b6:	220f      	movs	r2, #15
    51b8:	4002      	ands	r2, r0
    51ba:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    51bc:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    51be:	2a00      	cmp	r2, #0
    51c0:	d005      	beq.n	51ce <_usb_d_dev_ep_stall+0x1a>
    51c2:	2800      	cmp	r0, #0
    51c4:	db01      	blt.n	51ca <_usb_d_dev_ep_stall+0x16>
    51c6:	0013      	movs	r3, r2
    51c8:	e002      	b.n	51d0 <_usb_d_dev_ep_stall+0x1c>
    51ca:	1d13      	adds	r3, r2, #4
    51cc:	e000      	b.n	51d0 <_usb_d_dev_ep_stall+0x1c>
    51ce:	0013      	movs	r3, r2
	return &dev_inst.ep[ep_index];
    51d0:	001d      	movs	r5, r3
    51d2:	0098      	lsls	r0, r3, #2
    51d4:	18c0      	adds	r0, r0, r3
    51d6:	0083      	lsls	r3, r0, #2
    51d8:	3310      	adds	r3, #16
    51da:	0018      	movs	r0, r3
    51dc:	4b47      	ldr	r3, [pc, #284]	; (52fc <_usb_d_dev_ep_stall+0x148>)
    51de:	3320      	adds	r3, #32
    51e0:	181b      	adds	r3, r3, r0
    51e2:	3304      	adds	r3, #4
	if (epn > CONF_USB_D_MAX_EP_N) {
    51e4:	2a04      	cmp	r2, #4
    51e6:	d900      	bls.n	51ea <_usb_d_dev_ep_stall+0x36>
    51e8:	e084      	b.n	52f4 <_usb_d_dev_ep_stall+0x140>
	if (USB_EP_STALL_SET == ctrl) {
    51ea:	2901      	cmp	r1, #1
    51ec:	d018      	beq.n	5220 <_usb_d_dev_ep_stall+0x6c>
	} else if (USB_EP_STALL_CLR == ctrl) {
    51ee:	2900      	cmp	r1, #0
    51f0:	d03d      	beq.n	526e <_usb_d_dev_ep_stall+0xba>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    51f2:	00aa      	lsls	r2, r5, #2
    51f4:	1952      	adds	r2, r2, r5
    51f6:	0091      	lsls	r1, r2, #2
    51f8:	4b40      	ldr	r3, [pc, #256]	; (52fc <_usb_d_dev_ep_stall+0x148>)
    51fa:	3320      	adds	r3, #32
    51fc:	185b      	adds	r3, r3, r1
    51fe:	3326      	adds	r3, #38	; 0x26
    5200:	781a      	ldrb	r2, [r3, #0]
    5202:	230f      	movs	r3, #15
    5204:	4013      	ands	r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5206:	3308      	adds	r3, #8
    5208:	015b      	lsls	r3, r3, #5
    520a:	4a3d      	ldr	r2, [pc, #244]	; (5300 <_usb_d_dev_ep_stall+0x14c>)
    520c:	4694      	mov	ip, r2
    520e:	4463      	add	r3, ip
    5210:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5212:	2310      	movs	r3, #16
    5214:	40a3      	lsls	r3, r4
    5216:	4018      	ands	r0, r3
    5218:	1e43      	subs	r3, r0, #1
    521a:	4198      	sbcs	r0, r3
    521c:	b2c0      	uxtb	r0, r0
}
    521e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5220:	4836      	ldr	r0, [pc, #216]	; (52fc <_usb_d_dev_ep_stall+0x148>)
    5222:	0003      	movs	r3, r0
    5224:	3320      	adds	r3, #32
    5226:	00aa      	lsls	r2, r5, #2
    5228:	1956      	adds	r6, r2, r5
    522a:	00b1      	lsls	r1, r6, #2
    522c:	185b      	adds	r3, r3, r1
    522e:	3326      	adds	r3, #38	; 0x26
    5230:	781b      	ldrb	r3, [r3, #0]
    5232:	210f      	movs	r1, #15
    5234:	400b      	ands	r3, r1
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5236:	2610      	movs	r6, #16
    5238:	40a6      	lsls	r6, r4
    523a:	b2f6      	uxtb	r6, r6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    523c:	0019      	movs	r1, r3
    523e:	3108      	adds	r1, #8
    5240:	0149      	lsls	r1, r1, #5
    5242:	4f2f      	ldr	r7, [pc, #188]	; (5300 <_usb_d_dev_ep_stall+0x14c>)
    5244:	46bc      	mov	ip, r7
    5246:	4461      	add	r1, ip
    5248:	714e      	strb	r6, [r1, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    524a:	2120      	movs	r1, #32
    524c:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    524e:	b2cc      	uxtb	r4, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    5250:	0159      	lsls	r1, r3, #5
    5252:	4b2c      	ldr	r3, [pc, #176]	; (5304 <_usb_d_dev_ep_stall+0x150>)
    5254:	469c      	mov	ip, r3
    5256:	4461      	add	r1, ip
    5258:	700c      	strb	r4, [r1, #0]
	ept->flags.bits.is_stalled = 1;
    525a:	1952      	adds	r2, r2, r5
    525c:	0093      	lsls	r3, r2, #2
    525e:	18c3      	adds	r3, r0, r3
    5260:	3340      	adds	r3, #64	; 0x40
    5262:	79da      	ldrb	r2, [r3, #7]
    5264:	2108      	movs	r1, #8
    5266:	430a      	orrs	r2, r1
    5268:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    526a:	2000      	movs	r0, #0
    526c:	e7d7      	b.n	521e <_usb_d_dev_ep_stall+0x6a>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    526e:	7c9a      	ldrb	r2, [r3, #18]
    5270:	310f      	adds	r1, #15
    5272:	400a      	ands	r2, r1
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5274:	0011      	movs	r1, r2
    5276:	3108      	adds	r1, #8
    5278:	0149      	lsls	r1, r1, #5
    527a:	4821      	ldr	r0, [pc, #132]	; (5300 <_usb_d_dev_ep_stall+0x14c>)
    527c:	4684      	mov	ip, r0
    527e:	4461      	add	r1, ip
    5280:	7988      	ldrb	r0, [r1, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5282:	2110      	movs	r1, #16
    5284:	40a1      	lsls	r1, r4
	if (!is_stalled) {
    5286:	4208      	tst	r0, r1
    5288:	d024      	beq.n	52d4 <_usb_d_dev_ep_stall+0x120>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    528a:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    528c:	0010      	movs	r0, r2
    528e:	3008      	adds	r0, #8
    5290:	0140      	lsls	r0, r0, #5
    5292:	4460      	add	r0, ip
    5294:	7101      	strb	r1, [r0, #4]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    5296:	2120      	movs	r1, #32
    5298:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    529a:	b2ce      	uxtb	r6, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    529c:	0155      	lsls	r5, r2, #5
    529e:	4f1a      	ldr	r7, [pc, #104]	; (5308 <_usb_d_dev_ep_stall+0x154>)
    52a0:	46bc      	mov	ip, r7
    52a2:	4465      	add	r5, ip
    52a4:	702e      	strb	r6, [r5, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    52a6:	79c0      	ldrb	r0, [r0, #7]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    52a8:	4208      	tst	r0, r1
    52aa:	d00a      	beq.n	52c2 <_usb_d_dev_ep_stall+0x10e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    52ac:	0011      	movs	r1, r2
    52ae:	3108      	adds	r1, #8
    52b0:	0149      	lsls	r1, r1, #5
    52b2:	4813      	ldr	r0, [pc, #76]	; (5300 <_usb_d_dev_ep_stall+0x14c>)
    52b4:	4684      	mov	ip, r0
    52b6:	4461      	add	r1, ip
    52b8:	71ce      	strb	r6, [r1, #7]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    52ba:	2001      	movs	r0, #1
    52bc:	40a0      	lsls	r0, r4
    52be:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    52c0:	7108      	strb	r0, [r1, #4]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    52c2:	7cd8      	ldrb	r0, [r3, #19]
    52c4:	2107      	movs	r1, #7
    52c6:	4001      	ands	r1, r0
    52c8:	2901      	cmp	r1, #1
    52ca:	d005      	beq.n	52d8 <_usb_d_dev_ep_stall+0x124>
		ept->flags.bits.is_stalled = 0;
    52cc:	7cda      	ldrb	r2, [r3, #19]
    52ce:	2108      	movs	r1, #8
    52d0:	438a      	bics	r2, r1
    52d2:	74da      	strb	r2, [r3, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    52d4:	2000      	movs	r0, #0
    52d6:	e7a2      	b.n	521e <_usb_d_dev_ep_stall+0x6a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    52d8:	3208      	adds	r2, #8
    52da:	0152      	lsls	r2, r2, #5
    52dc:	4908      	ldr	r1, [pc, #32]	; (5300 <_usb_d_dev_ep_stall+0x14c>)
    52de:	468c      	mov	ip, r1
    52e0:	4462      	add	r2, ip
    52e2:	7991      	ldrb	r1, [r2, #6]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    52e4:	2230      	movs	r2, #48	; 0x30
    52e6:	4211      	tst	r1, r2
    52e8:	d1f4      	bne.n	52d4 <_usb_d_dev_ep_stall+0x120>
			ept->flags.bits.is_stalled = 0;
    52ea:	0002      	movs	r2, r0
    52ec:	2108      	movs	r1, #8
    52ee:	438a      	bics	r2, r1
    52f0:	74da      	strb	r2, [r3, #19]
    52f2:	e7ef      	b.n	52d4 <_usb_d_dev_ep_stall+0x120>
		return -USB_ERR_PARAM;
    52f4:	2012      	movs	r0, #18
    52f6:	4240      	negs	r0, r0
    52f8:	e791      	b.n	521e <_usb_d_dev_ep_stall+0x6a>
    52fa:	46c0      	nop			; (mov r8, r8)
    52fc:	20000ff0 	.word	0x20000ff0
    5300:	41005000 	.word	0x41005000
    5304:	41005109 	.word	0x41005109
    5308:	41005108 	.word	0x41005108

0000530c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    530c:	b570      	push	{r4, r5, r6, lr}
    530e:	000e      	movs	r6, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    5310:	240f      	movs	r4, #15
    5312:	4004      	ands	r4, r0
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    5314:	0162      	lsls	r2, r4, #5
    5316:	4b18      	ldr	r3, [pc, #96]	; (5378 <_usb_d_dev_ep_read_req+0x6c>)
    5318:	189b      	adds	r3, r3, r2
	uint32_t           addr  = bank[0].ADDR.reg;
    531a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    531c:	685d      	ldr	r5, [r3, #4]
    531e:	04ad      	lsls	r5, r5, #18
    5320:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5322:	2c04      	cmp	r4, #4
    5324:	d81f      	bhi.n	5366 <_usb_d_dev_ep_read_req+0x5a>
    5326:	2e00      	cmp	r6, #0
    5328:	d020      	beq.n	536c <_usb_d_dev_ep_read_req+0x60>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    532a:	0023      	movs	r3, r4
    532c:	3308      	adds	r3, #8
    532e:	015b      	lsls	r3, r3, #5
    5330:	4a12      	ldr	r2, [pc, #72]	; (537c <_usb_d_dev_ep_read_req+0x70>)
    5332:	5c9b      	ldrb	r3, [r3, r2]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5334:	2b11      	cmp	r3, #17
    5336:	d11c      	bne.n	5372 <_usb_d_dev_ep_read_req+0x66>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    5338:	0023      	movs	r3, r4
    533a:	3308      	adds	r3, #8
    533c:	015b      	lsls	r3, r3, #5
    533e:	4694      	mov	ip, r2
    5340:	4463      	add	r3, ip
    5342:	79db      	ldrb	r3, [r3, #7]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    5344:	06db      	lsls	r3, r3, #27
    5346:	d401      	bmi.n	534c <_usb_d_dev_ep_read_req+0x40>
		return ERR_NONE;
    5348:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    534a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    534c:	2208      	movs	r2, #8
    534e:	0030      	movs	r0, r6
    5350:	4b0b      	ldr	r3, [pc, #44]	; (5380 <_usb_d_dev_ep_read_req+0x74>)
    5352:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5354:	3408      	adds	r4, #8
    5356:	0164      	lsls	r4, r4, #5
    5358:	4b08      	ldr	r3, [pc, #32]	; (537c <_usb_d_dev_ep_read_req+0x70>)
    535a:	469c      	mov	ip, r3
    535c:	4464      	add	r4, ip
    535e:	2310      	movs	r3, #16
    5360:	71e3      	strb	r3, [r4, #7]
	return bytes;
    5362:	0028      	movs	r0, r5
    5364:	e7f1      	b.n	534a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_PARAM;
    5366:	2012      	movs	r0, #18
    5368:	4240      	negs	r0, r0
    536a:	e7ee      	b.n	534a <_usb_d_dev_ep_read_req+0x3e>
    536c:	2012      	movs	r0, #18
    536e:	4240      	negs	r0, r0
    5370:	e7eb      	b.n	534a <_usb_d_dev_ep_read_req+0x3e>
		return -USB_ERR_FUNC;
    5372:	2013      	movs	r0, #19
    5374:	4240      	negs	r0, r0
    5376:	e7e8      	b.n	534a <_usb_d_dev_ep_read_req+0x3e>
    5378:	20000f70 	.word	0x20000f70
    537c:	41005000 	.word	0x41005000
    5380:	0000c059 	.word	0x0000c059

00005384 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    5384:	b5f0      	push	{r4, r5, r6, r7, lr}
    5386:	46de      	mov	lr, fp
    5388:	4657      	mov	r7, sl
    538a:	464e      	mov	r6, r9
    538c:	4645      	mov	r5, r8
    538e:	b5e0      	push	{r5, r6, r7, lr}
    5390:	b085      	sub	sp, #20
    5392:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    5394:	7a04      	ldrb	r4, [r0, #8]
    5396:	220f      	movs	r2, #15
    5398:	4022      	ands	r2, r4
    539a:	b264      	sxtb	r4, r4
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    539c:	0fe3      	lsrs	r3, r4, #31
    539e:	4699      	mov	r9, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    53a0:	2a00      	cmp	r2, #0
    53a2:	d005      	beq.n	53b0 <_usb_d_dev_ep_trans+0x2c>
    53a4:	2c00      	cmp	r4, #0
    53a6:	db01      	blt.n	53ac <_usb_d_dev_ep_trans+0x28>
    53a8:	0010      	movs	r0, r2
    53aa:	e002      	b.n	53b2 <_usb_d_dev_ep_trans+0x2e>
    53ac:	1d10      	adds	r0, r2, #4
    53ae:	e000      	b.n	53b2 <_usb_d_dev_ep_trans+0x2e>
    53b0:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    53b2:	0005      	movs	r5, r0
    53b4:	4b62      	ldr	r3, [pc, #392]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    53b6:	001f      	movs	r7, r3
    53b8:	3720      	adds	r7, #32
    53ba:	0081      	lsls	r1, r0, #2
    53bc:	180e      	adds	r6, r1, r0
    53be:	46b4      	mov	ip, r6
    53c0:	00b6      	lsls	r6, r6, #2
    53c2:	3610      	adds	r6, #16
    53c4:	19bf      	adds	r7, r7, r6
    53c6:	3704      	adds	r7, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    53c8:	4661      	mov	r1, ip
    53ca:	0088      	lsls	r0, r1, #2
    53cc:	181b      	adds	r3, r3, r0
    53ce:	3344      	adds	r3, #68	; 0x44
    53d0:	881b      	ldrh	r3, [r3, #0]
    53d2:	495c      	ldr	r1, [pc, #368]	; (5544 <_usb_d_dev_ep_trans+0x1c0>)
    53d4:	428b      	cmp	r3, r1
    53d6:	d042      	beq.n	545e <_usb_d_dev_ep_trans+0xda>
    53d8:	1e5e      	subs	r6, r3, #1
    53da:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    53dc:	4641      	mov	r1, r8
    53de:	6849      	ldr	r1, [r1, #4]
    53e0:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    53e2:	2a04      	cmp	r2, #4
    53e4:	d900      	bls.n	53e8 <_usb_d_dev_ep_trans+0x64>
    53e6:	e0a1      	b.n	552c <_usb_d_dev_ep_trans+0x1a8>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    53e8:	4642      	mov	r2, r8
    53ea:	6812      	ldr	r2, [r2, #0]
    53ec:	4856      	ldr	r0, [pc, #344]	; (5548 <_usb_d_dev_ep_trans+0x1c4>)
    53ee:	4282      	cmp	r2, r0
    53f0:	d90c      	bls.n	540c <_usb_d_dev_ep_trans+0x88>
    53f2:	1888      	adds	r0, r1, r2
    53f4:	9001      	str	r0, [sp, #4]
    53f6:	4855      	ldr	r0, [pc, #340]	; (554c <_usb_d_dev_ep_trans+0x1c8>)
    53f8:	4684      	mov	ip, r0
    53fa:	9801      	ldr	r0, [sp, #4]
    53fc:	4560      	cmp	r0, ip
    53fe:	d805      	bhi.n	540c <_usb_d_dev_ep_trans+0x88>
    5400:	0792      	lsls	r2, r2, #30
    5402:	d103      	bne.n	540c <_usb_d_dev_ep_trans+0x88>
	    || (!dir && (trans->size < ept->size))) {
    5404:	2c00      	cmp	r4, #0
    5406:	db2c      	blt.n	5462 <_usb_d_dev_ep_trans+0xde>
    5408:	4299      	cmp	r1, r3
    540a:	d22d      	bcs.n	5468 <_usb_d_dev_ep_trans+0xe4>
		if (!ept->cache) {
    540c:	00ab      	lsls	r3, r5, #2
    540e:	195b      	adds	r3, r3, r5
    5410:	009a      	lsls	r2, r3, #2
    5412:	4b4b      	ldr	r3, [pc, #300]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    5414:	189b      	adds	r3, r3, r2
    5416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5418:	2b00      	cmp	r3, #0
    541a:	d100      	bne.n	541e <_usb_d_dev_ep_trans+0x9a>
    541c:	e089      	b.n	5532 <_usb_d_dev_ep_trans+0x1ae>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    541e:	2301      	movs	r3, #1
    5420:	9301      	str	r3, [sp, #4]
	}
	if (!dir && size_n_aligned) {
    5422:	2c00      	cmp	r4, #0
    5424:	db0a      	blt.n	543c <_usb_d_dev_ep_trans+0xb8>
    5426:	2e00      	cmp	r6, #0
    5428:	d008      	beq.n	543c <_usb_d_dev_ep_trans+0xb8>
		if (!ept->cache) {
    542a:	00ab      	lsls	r3, r5, #2
    542c:	195b      	adds	r3, r3, r5
    542e:	009a      	lsls	r2, r3, #2
    5430:	4b43      	ldr	r3, [pc, #268]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    5432:	189b      	adds	r3, r3, r2
    5434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5436:	2b00      	cmp	r3, #0
    5438:	d100      	bne.n	543c <_usb_d_dev_ep_trans+0xb8>
    543a:	e07d      	b.n	5538 <_usb_d_dev_ep_trans+0x1b4>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    543c:	00aa      	lsls	r2, r5, #2
    543e:	1952      	adds	r2, r2, r5
    5440:	0091      	lsls	r1, r2, #2
    5442:	4b3f      	ldr	r3, [pc, #252]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    5444:	185b      	adds	r3, r3, r1
    5446:	3340      	adds	r3, #64	; 0x40
    5448:	79db      	ldrb	r3, [r3, #7]
    544a:	071b      	lsls	r3, r3, #28
    544c:	d50f      	bpl.n	546e <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
    544e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5450:	b005      	add	sp, #20
    5452:	bc3c      	pop	{r2, r3, r4, r5}
    5454:	4690      	mov	r8, r2
    5456:	4699      	mov	r9, r3
    5458:	46a2      	mov	sl, r4
    545a:	46ab      	mov	fp, r5
    545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    545e:	001e      	movs	r6, r3
    5460:	e7bc      	b.n	53dc <_usb_d_dev_ep_trans+0x58>
	bool use_cache = false;
    5462:	2300      	movs	r3, #0
    5464:	9301      	str	r3, [sp, #4]
    5466:	e7dc      	b.n	5422 <_usb_d_dev_ep_trans+0x9e>
    5468:	2300      	movs	r3, #0
    546a:	9301      	str	r3, [sp, #4]
    546c:	e7d9      	b.n	5422 <_usb_d_dev_ep_trans+0x9e>
	atomic_enter_critical(&flags);
    546e:	a803      	add	r0, sp, #12
    5470:	4b37      	ldr	r3, [pc, #220]	; (5550 <_usb_d_dev_ep_trans+0x1cc>)
    5472:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5474:	00aa      	lsls	r2, r5, #2
    5476:	1952      	adds	r2, r2, r5
    5478:	0091      	lsls	r1, r2, #2
    547a:	4b31      	ldr	r3, [pc, #196]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    547c:	185b      	adds	r3, r3, r1
    547e:	3340      	adds	r3, #64	; 0x40
    5480:	79db      	ldrb	r3, [r3, #7]
    5482:	065b      	lsls	r3, r3, #25
    5484:	d430      	bmi.n	54e8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5486:	00ab      	lsls	r3, r5, #2
    5488:	195b      	adds	r3, r3, r5
    548a:	009a      	lsls	r2, r3, #2
    548c:	4b2c      	ldr	r3, [pc, #176]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    548e:	469b      	mov	fp, r3
    5490:	4493      	add	fp, r2
    5492:	2340      	movs	r3, #64	; 0x40
    5494:	445b      	add	r3, fp
    5496:	469a      	mov	sl, r3
    5498:	79db      	ldrb	r3, [r3, #7]
    549a:	2240      	movs	r2, #64	; 0x40
    549c:	4313      	orrs	r3, r2
    549e:	4652      	mov	r2, sl
    54a0:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    54a2:	a803      	add	r0, sp, #12
    54a4:	4b2b      	ldr	r3, [pc, #172]	; (5554 <_usb_d_dev_ep_trans+0x1d0>)
    54a6:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    54a8:	465b      	mov	r3, fp
    54aa:	4642      	mov	r2, r8
    54ac:	6812      	ldr	r2, [r2, #0]
    54ae:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    54b0:	4642      	mov	r2, r8
    54b2:	6852      	ldr	r2, [r2, #4]
    54b4:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    54b6:	2300      	movs	r3, #0
    54b8:	465a      	mov	r2, fp
    54ba:	63d3      	str	r3, [r2, #60]	; 0x3c
	ept->flags.bits.dir       = dir;
    54bc:	464b      	mov	r3, r9
    54be:	01db      	lsls	r3, r3, #7
    54c0:	4652      	mov	r2, sl
    54c2:	79d2      	ldrb	r2, [r2, #7]
    54c4:	217f      	movs	r1, #127	; 0x7f
    54c6:	4011      	ands	r1, r2
	ept->flags.bits.use_cache = use_cache;
    54c8:	9a01      	ldr	r2, [sp, #4]
    54ca:	0152      	lsls	r2, r2, #5
    54cc:	430b      	orrs	r3, r1
    54ce:	2120      	movs	r1, #32
    54d0:	438b      	bics	r3, r1
    54d2:	431a      	orrs	r2, r3
    54d4:	4653      	mov	r3, sl
    54d6:	71da      	strb	r2, [r3, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    54d8:	4643      	mov	r3, r8
    54da:	7a5b      	ldrb	r3, [r3, #9]
    54dc:	2b00      	cmp	r3, #0
    54de:	d008      	beq.n	54f2 <_usb_d_dev_ep_trans+0x16e>
    54e0:	2e00      	cmp	r6, #0
    54e2:	d01b      	beq.n	551c <_usb_d_dev_ep_trans+0x198>
    54e4:	2200      	movs	r2, #0
    54e6:	e005      	b.n	54f4 <_usb_d_dev_ep_trans+0x170>
		atomic_leave_critical(&flags);
    54e8:	a803      	add	r0, sp, #12
    54ea:	4b1a      	ldr	r3, [pc, #104]	; (5554 <_usb_d_dev_ep_trans+0x1d0>)
    54ec:	4798      	blx	r3
		return USB_BUSY;
    54ee:	2001      	movs	r0, #1
    54f0:	e7ae      	b.n	5450 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    54f2:	2200      	movs	r2, #0
    54f4:	00ab      	lsls	r3, r5, #2
    54f6:	195d      	adds	r5, r3, r5
    54f8:	00a9      	lsls	r1, r5, #2
    54fa:	4b11      	ldr	r3, [pc, #68]	; (5540 <_usb_d_dev_ep_trans+0x1bc>)
    54fc:	185b      	adds	r3, r3, r1
    54fe:	3340      	adds	r3, #64	; 0x40
    5500:	0111      	lsls	r1, r2, #4
    5502:	79da      	ldrb	r2, [r3, #7]
    5504:	2010      	movs	r0, #16
    5506:	4382      	bics	r2, r0
    5508:	430a      	orrs	r2, r1
    550a:	71da      	strb	r2, [r3, #7]
	if (dir) {
    550c:	2c00      	cmp	r4, #0
    550e:	db07      	blt.n	5520 <_usb_d_dev_ep_trans+0x19c>
		_usb_d_dev_out_next(ept, false);
    5510:	2100      	movs	r1, #0
    5512:	0038      	movs	r0, r7
    5514:	4b10      	ldr	r3, [pc, #64]	; (5558 <_usb_d_dev_ep_trans+0x1d4>)
    5516:	4798      	blx	r3
	return ERR_NONE;
    5518:	2000      	movs	r0, #0
    551a:	e799      	b.n	5450 <_usb_d_dev_ep_trans+0xcc>
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    551c:	2201      	movs	r2, #1
    551e:	e7e9      	b.n	54f4 <_usb_d_dev_ep_trans+0x170>
		_usb_d_dev_in_next(ept, false);
    5520:	2100      	movs	r1, #0
    5522:	0038      	movs	r0, r7
    5524:	4b0d      	ldr	r3, [pc, #52]	; (555c <_usb_d_dev_ep_trans+0x1d8>)
    5526:	4798      	blx	r3
	return ERR_NONE;
    5528:	2000      	movs	r0, #0
    552a:	e791      	b.n	5450 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    552c:	2012      	movs	r0, #18
    552e:	4240      	negs	r0, r0
    5530:	e78e      	b.n	5450 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    5532:	2013      	movs	r0, #19
    5534:	4240      	negs	r0, r0
    5536:	e78b      	b.n	5450 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    5538:	2012      	movs	r0, #18
    553a:	4240      	negs	r0, r0
    553c:	e788      	b.n	5450 <_usb_d_dev_ep_trans+0xcc>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	20000ff0 	.word	0x20000ff0
    5544:	000003ff 	.word	0x000003ff
    5548:	1fffffff 	.word	0x1fffffff
    554c:	20007fff 	.word	0x20007fff
    5550:	00002509 	.word	0x00002509
    5554:	00002517 	.word	0x00002517
    5558:	00004725 	.word	0x00004725
    555c:	00004595 	.word	0x00004595

00005560 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    5560:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    5562:	220f      	movs	r2, #15
    5564:	4002      	ands	r2, r0
    5566:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    5568:	0fc1      	lsrs	r1, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    556a:	2a00      	cmp	r2, #0
    556c:	d005      	beq.n	557a <_usb_d_dev_ep_abort+0x1a>
    556e:	2800      	cmp	r0, #0
    5570:	db01      	blt.n	5576 <_usb_d_dev_ep_abort+0x16>
    5572:	0010      	movs	r0, r2
    5574:	e002      	b.n	557c <_usb_d_dev_ep_abort+0x1c>
    5576:	1d10      	adds	r0, r2, #4
    5578:	e000      	b.n	557c <_usb_d_dev_ep_abort+0x1c>
    557a:	0010      	movs	r0, r2
	return &dev_inst.ep[ep_index];
    557c:	0083      	lsls	r3, r0, #2
    557e:	181b      	adds	r3, r3, r0
    5580:	009c      	lsls	r4, r3, #2
    5582:	3410      	adds	r4, #16
    5584:	4805      	ldr	r0, [pc, #20]	; (559c <_usb_d_dev_ep_abort+0x3c>)
    5586:	3020      	adds	r0, #32
    5588:	1900      	adds	r0, r0, r4
    558a:	3004      	adds	r0, #4
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    558c:	2a04      	cmp	r2, #4
    558e:	d900      	bls.n	5592 <_usb_d_dev_ep_abort+0x32>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    5590:	bd10      	pop	{r4, pc}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    5592:	2202      	movs	r2, #2
    5594:	4b02      	ldr	r3, [pc, #8]	; (55a0 <_usb_d_dev_ep_abort+0x40>)
    5596:	4798      	blx	r3
    5598:	e7fa      	b.n	5590 <_usb_d_dev_ep_abort+0x30>
    559a:	46c0      	nop			; (mov r8, r8)
    559c:	20000ff0 	.word	0x20000ff0
    55a0:	000043b1 	.word	0x000043b1

000055a4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    55a4:	2900      	cmp	r1, #0
    55a6:	d006      	beq.n	55b6 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    55a8:	2801      	cmp	r0, #1
    55aa:	d006      	beq.n	55ba <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    55ac:	2800      	cmp	r0, #0
    55ae:	d101      	bne.n	55b4 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    55b0:	4b03      	ldr	r3, [pc, #12]	; (55c0 <_usb_d_dev_register_callback+0x1c>)
    55b2:	6219      	str	r1, [r3, #32]
	}
}
    55b4:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    55b6:	4903      	ldr	r1, [pc, #12]	; (55c4 <_usb_d_dev_register_callback+0x20>)
    55b8:	e7f6      	b.n	55a8 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    55ba:	4b01      	ldr	r3, [pc, #4]	; (55c0 <_usb_d_dev_register_callback+0x1c>)
    55bc:	6259      	str	r1, [r3, #36]	; 0x24
    55be:	e7f9      	b.n	55b4 <_usb_d_dev_register_callback+0x10>
    55c0:	20000ff0 	.word	0x20000ff0
    55c4:	00004271 	.word	0x00004271

000055c8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    55c8:	2900      	cmp	r1, #0
    55ca:	d008      	beq.n	55de <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    55cc:	2800      	cmp	r0, #0
    55ce:	d008      	beq.n	55e2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    55d0:	2801      	cmp	r0, #1
    55d2:	d009      	beq.n	55e8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    55d4:	2802      	cmp	r0, #2
    55d6:	d106      	bne.n	55e6 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    55d8:	4b05      	ldr	r3, [pc, #20]	; (55f0 <_usb_d_dev_register_ep_callback+0x28>)
    55da:	6319      	str	r1, [r3, #48]	; 0x30
	}
}
    55dc:	e003      	b.n	55e6 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    55de:	4905      	ldr	r1, [pc, #20]	; (55f4 <_usb_d_dev_register_ep_callback+0x2c>)
    55e0:	e7f4      	b.n	55cc <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    55e2:	4b03      	ldr	r3, [pc, #12]	; (55f0 <_usb_d_dev_register_ep_callback+0x28>)
    55e4:	6299      	str	r1, [r3, #40]	; 0x28
}
    55e6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    55e8:	4b01      	ldr	r3, [pc, #4]	; (55f0 <_usb_d_dev_register_ep_callback+0x28>)
    55ea:	62d9      	str	r1, [r3, #44]	; 0x2c
    55ec:	e7fb      	b.n	55e6 <_usb_d_dev_register_ep_callback+0x1e>
    55ee:	46c0      	nop			; (mov r8, r8)
    55f0:	20000ff0 	.word	0x20000ff0
    55f4:	00004271 	.word	0x00004271

000055f8 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    55f8:	b510      	push	{r4, lr}

	_usb_d_dev_handler();
    55fa:	4b01      	ldr	r3, [pc, #4]	; (5600 <USB_Handler+0x8>)
    55fc:	4798      	blx	r3
}
    55fe:	bd10      	pop	{r4, pc}
    5600:	00004929 	.word	0x00004929

00005604 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    5604:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    5606:	4806      	ldr	r0, [pc, #24]	; (5620 <cdc_device_acm_init+0x1c>)
    5608:	3040      	adds	r0, #64	; 0x40
    560a:	4b06      	ldr	r3, [pc, #24]	; (5624 <cdc_device_acm_init+0x20>)
    560c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    560e:	4b06      	ldr	r3, [pc, #24]	; (5628 <cdc_device_acm_init+0x24>)
    5610:	4798      	blx	r3

	usbdc_start(single_desc);
    5612:	4806      	ldr	r0, [pc, #24]	; (562c <cdc_device_acm_init+0x28>)
    5614:	4b06      	ldr	r3, [pc, #24]	; (5630 <cdc_device_acm_init+0x2c>)
    5616:	4798      	blx	r3
	usbdc_attach();
    5618:	4b06      	ldr	r3, [pc, #24]	; (5634 <cdc_device_acm_init+0x30>)
    561a:	4798      	blx	r3
}
    561c:	bd10      	pop	{r4, pc}
    561e:	46c0      	nop			; (mov r8, r8)
    5620:	200012d8 	.word	0x200012d8
    5624:	00006161 	.word	0x00006161
    5628:	00005909 	.word	0x00005909
    562c:	20000004 	.word	0x20000004
    5630:	000061d9 	.word	0x000061d9
    5634:	00006211 	.word	0x00006211

00005638 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    5638:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    563a:	4b01      	ldr	r3, [pc, #4]	; (5640 <usb_init+0x8>)
    563c:	4798      	blx	r3
}
    563e:	bd10      	pop	{r4, pc}
    5640:	00005605 	.word	0x00005605

00005644 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5644:	b510      	push	{r4, lr}
	uint16_t len = req->wLength;
    5646:	798b      	ldrb	r3, [r1, #6]
    5648:	79cc      	ldrb	r4, [r1, #7]
    564a:	0224      	lsls	r4, r4, #8
    564c:	431c      	orrs	r4, r3

	if (USB_DATA_STAGE == stage) {
    564e:	2a01      	cmp	r2, #1
    5650:	d00a      	beq.n	5668 <cdcdf_acm_get_req+0x24>
		return ERR_NONE;
	}

	switch (req->bRequest) {
    5652:	784b      	ldrb	r3, [r1, #1]
    5654:	2b21      	cmp	r3, #33	; 0x21
    5656:	d109      	bne.n	566c <cdcdf_acm_get_req+0x28>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5658:	2c07      	cmp	r4, #7
    565a:	d10a      	bne.n	5672 <cdcdf_acm_get_req+0x2e>
			return ERR_INVALID_DATA;
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    565c:	2300      	movs	r3, #0
    565e:	0022      	movs	r2, r4
    5660:	4905      	ldr	r1, [pc, #20]	; (5678 <cdcdf_acm_get_req+0x34>)
    5662:	4c06      	ldr	r4, [pc, #24]	; (567c <cdcdf_acm_get_req+0x38>)
    5664:	47a0      	blx	r4
	default:
		return ERR_INVALID_ARG;
	}
}
    5666:	bd10      	pop	{r4, pc}
		return ERR_NONE;
    5668:	2000      	movs	r0, #0
    566a:	e7fc      	b.n	5666 <cdcdf_acm_get_req+0x22>
		return ERR_INVALID_ARG;
    566c:	200d      	movs	r0, #13
    566e:	4240      	negs	r0, r0
    5670:	e7f9      	b.n	5666 <cdcdf_acm_get_req+0x22>
			return ERR_INVALID_DATA;
    5672:	2001      	movs	r0, #1
    5674:	4240      	negs	r0, r0
    5676:	e7f6      	b.n	5666 <cdcdf_acm_get_req+0x22>
    5678:	20001358 	.word	0x20001358
    567c:	00005c91 	.word	0x00005c91

00005680 <cdcdf_acm_set_req>:
{
    5680:	b5f0      	push	{r4, r5, r6, r7, lr}
    5682:	b083      	sub	sp, #12
    5684:	0005      	movs	r5, r0
    5686:	000f      	movs	r7, r1
    5688:	0014      	movs	r4, r2
	uint16_t                   len      = req->wLength;
    568a:	798e      	ldrb	r6, [r1, #6]
    568c:	79cb      	ldrb	r3, [r1, #7]
    568e:	021b      	lsls	r3, r3, #8
    5690:	431e      	orrs	r6, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    5692:	4b23      	ldr	r3, [pc, #140]	; (5720 <cdcdf_acm_set_req+0xa0>)
    5694:	4798      	blx	r3
	switch (req->bRequest) {
    5696:	787b      	ldrb	r3, [r7, #1]
    5698:	2b20      	cmp	r3, #32
    569a:	d005      	beq.n	56a8 <cdcdf_acm_set_req+0x28>
    569c:	2b22      	cmp	r3, #34	; 0x22
    569e:	d026      	beq.n	56ee <cdcdf_acm_set_req+0x6e>
		return ERR_INVALID_ARG;
    56a0:	200d      	movs	r0, #13
    56a2:	4240      	negs	r0, r0
}
    56a4:	b003      	add	sp, #12
    56a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sizeof(struct usb_cdc_line_coding) != len) {
    56a8:	2e07      	cmp	r6, #7
    56aa:	d131      	bne.n	5710 <cdcdf_acm_set_req+0x90>
		if (USB_SETUP_STAGE == stage) {
    56ac:	2c00      	cmp	r4, #0
    56ae:	d017      	beq.n	56e0 <cdcdf_acm_set_req+0x60>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    56b0:	2207      	movs	r2, #7
    56b2:	0001      	movs	r1, r0
    56b4:	4668      	mov	r0, sp
    56b6:	4b1b      	ldr	r3, [pc, #108]	; (5724 <cdcdf_acm_set_req+0xa4>)
    56b8:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    56ba:	4b1b      	ldr	r3, [pc, #108]	; (5728 <cdcdf_acm_set_req+0xa8>)
    56bc:	689b      	ldr	r3, [r3, #8]
    56be:	2b00      	cmp	r3, #0
    56c0:	d003      	beq.n	56ca <cdcdf_acm_set_req+0x4a>
    56c2:	4668      	mov	r0, sp
    56c4:	4798      	blx	r3
    56c6:	2800      	cmp	r0, #0
    56c8:	d025      	beq.n	5716 <cdcdf_acm_set_req+0x96>
				usbd_cdc_line_coding = line_coding_tmp;
    56ca:	4b17      	ldr	r3, [pc, #92]	; (5728 <cdcdf_acm_set_req+0xa8>)
    56cc:	9a00      	ldr	r2, [sp, #0]
    56ce:	601a      	str	r2, [r3, #0]
    56d0:	466a      	mov	r2, sp
    56d2:	8892      	ldrh	r2, [r2, #4]
    56d4:	809a      	strh	r2, [r3, #4]
    56d6:	466a      	mov	r2, sp
    56d8:	7992      	ldrb	r2, [r2, #6]
    56da:	719a      	strb	r2, [r3, #6]
			return ERR_NONE;
    56dc:	2000      	movs	r0, #0
    56de:	e7e1      	b.n	56a4 <cdcdf_acm_set_req+0x24>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    56e0:	2300      	movs	r3, #0
    56e2:	0032      	movs	r2, r6
    56e4:	0001      	movs	r1, r0
    56e6:	0028      	movs	r0, r5
    56e8:	4c10      	ldr	r4, [pc, #64]	; (572c <cdcdf_acm_set_req+0xac>)
    56ea:	47a0      	blx	r4
    56ec:	e7da      	b.n	56a4 <cdcdf_acm_set_req+0x24>
		usbdc_xfer(0, NULL, 0, 0);
    56ee:	2300      	movs	r3, #0
    56f0:	2200      	movs	r2, #0
    56f2:	2100      	movs	r1, #0
    56f4:	2000      	movs	r0, #0
    56f6:	4c0d      	ldr	r4, [pc, #52]	; (572c <cdcdf_acm_set_req+0xac>)
    56f8:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    56fa:	4b0b      	ldr	r3, [pc, #44]	; (5728 <cdcdf_acm_set_req+0xa8>)
    56fc:	68db      	ldr	r3, [r3, #12]
    56fe:	2b00      	cmp	r3, #0
    5700:	d00b      	beq.n	571a <cdcdf_acm_set_req+0x9a>
			cdcdf_acm_notify_state(req->wValue);
    5702:	78ba      	ldrb	r2, [r7, #2]
    5704:	78f8      	ldrb	r0, [r7, #3]
    5706:	0200      	lsls	r0, r0, #8
    5708:	4310      	orrs	r0, r2
    570a:	4798      	blx	r3
		return ERR_NONE;
    570c:	2000      	movs	r0, #0
    570e:	e7c9      	b.n	56a4 <cdcdf_acm_set_req+0x24>
			return ERR_INVALID_DATA;
    5710:	2001      	movs	r0, #1
    5712:	4240      	negs	r0, r0
    5714:	e7c6      	b.n	56a4 <cdcdf_acm_set_req+0x24>
			return ERR_NONE;
    5716:	2000      	movs	r0, #0
    5718:	e7c4      	b.n	56a4 <cdcdf_acm_set_req+0x24>
		return ERR_NONE;
    571a:	2000      	movs	r0, #0
    571c:	e7c2      	b.n	56a4 <cdcdf_acm_set_req+0x24>
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	0000621d 	.word	0x0000621d
    5724:	0000c059 	.word	0x0000c059
    5728:	20001358 	.word	0x20001358
    572c:	00005c91 	.word	0x00005c91

00005730 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5730:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5732:	780c      	ldrb	r4, [r1, #0]
    5734:	0965      	lsrs	r5, r4, #5
    5736:	2303      	movs	r3, #3
    5738:	402b      	ands	r3, r5
    573a:	2b01      	cmp	r3, #1
    573c:	d114      	bne.n	5768 <cdcdf_acm_req+0x38>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    573e:	790d      	ldrb	r5, [r1, #4]
    5740:	794b      	ldrb	r3, [r1, #5]
    5742:	021b      	lsls	r3, r3, #8
    5744:	432b      	orrs	r3, r5
    5746:	4d0b      	ldr	r5, [pc, #44]	; (5774 <cdcdf_acm_req+0x44>)
    5748:	7c2d      	ldrb	r5, [r5, #16]
    574a:	42ab      	cmp	r3, r5
    574c:	d003      	beq.n	5756 <cdcdf_acm_req+0x26>
    574e:	4d09      	ldr	r5, [pc, #36]	; (5774 <cdcdf_acm_req+0x44>)
    5750:	7c6d      	ldrb	r5, [r5, #17]
    5752:	42ab      	cmp	r3, r5
    5754:	d10b      	bne.n	576e <cdcdf_acm_req+0x3e>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    5756:	b264      	sxtb	r4, r4
    5758:	2c00      	cmp	r4, #0
    575a:	db02      	blt.n	5762 <cdcdf_acm_req+0x32>
			return cdcdf_acm_get_req(ep, req, stage);
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    575c:	4b06      	ldr	r3, [pc, #24]	; (5778 <cdcdf_acm_req+0x48>)
    575e:	4798      	blx	r3
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    5760:	bd70      	pop	{r4, r5, r6, pc}
			return cdcdf_acm_get_req(ep, req, stage);
    5762:	4b06      	ldr	r3, [pc, #24]	; (577c <cdcdf_acm_req+0x4c>)
    5764:	4798      	blx	r3
    5766:	e7fb      	b.n	5760 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    5768:	200a      	movs	r0, #10
    576a:	4240      	negs	r0, r0
    576c:	e7f8      	b.n	5760 <cdcdf_acm_req+0x30>
		return ERR_NOT_FOUND;
    576e:	200a      	movs	r0, #10
    5770:	4240      	negs	r0, r0
    5772:	e7f5      	b.n	5760 <cdcdf_acm_req+0x30>
    5774:	20001358 	.word	0x20001358
    5778:	00005681 	.word	0x00005681
    577c:	00005645 	.word	0x00005645

00005780 <cdcdf_acm_enable>:
{
    5780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5782:	46ce      	mov	lr, r9
    5784:	4647      	mov	r7, r8
    5786:	b580      	push	{r7, lr}
    5788:	000e      	movs	r6, r1
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    578a:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    578c:	6808      	ldr	r0, [r1, #0]
	for (i = 0; i < 2; i++) {
    578e:	2300      	movs	r3, #0
    5790:	4698      	mov	r8, r3
    5792:	4643      	mov	r3, r8
    5794:	2b01      	cmp	r3, #1
    5796:	d845      	bhi.n	5824 <cdcdf_acm_enable+0xa4>
		if (NULL == ifc) {
    5798:	2800      	cmp	r0, #0
    579a:	d04b      	beq.n	5834 <cdcdf_acm_enable+0xb4>
		ifc_desc.bInterfaceNumber = ifc[2];
    579c:	7883      	ldrb	r3, [r0, #2]
		ifc_desc.bInterfaceClass  = ifc[5];
    579e:	7942      	ldrb	r2, [r0, #5]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    57a0:	2a02      	cmp	r2, #2
    57a2:	d001      	beq.n	57a8 <cdcdf_acm_enable+0x28>
    57a4:	2a0a      	cmp	r2, #10
    57a6:	d148      	bne.n	583a <cdcdf_acm_enable+0xba>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    57a8:	46c1      	mov	r9, r8
    57aa:	4642      	mov	r2, r8
    57ac:	5cba      	ldrb	r2, [r7, r2]
    57ae:	4293      	cmp	r3, r2
    57b0:	d046      	beq.n	5840 <cdcdf_acm_enable+0xc0>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    57b2:	2aff      	cmp	r2, #255	; 0xff
    57b4:	d147      	bne.n	5846 <cdcdf_acm_enable+0xc6>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    57b6:	4642      	mov	r2, r8
    57b8:	54bb      	strb	r3, [r7, r2]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    57ba:	2205      	movs	r2, #5
    57bc:	6871      	ldr	r1, [r6, #4]
    57be:	4b25      	ldr	r3, [pc, #148]	; (5854 <cdcdf_acm_enable+0xd4>)
    57c0:	4798      	blx	r3
    57c2:	0004      	movs	r4, r0
		while (NULL != ep) {
    57c4:	e00c      	b.n	57e0 <cdcdf_acm_enable+0x60>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    57c6:	464b      	mov	r3, r9
    57c8:	18fb      	adds	r3, r7, r3
    57ca:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    57cc:	0028      	movs	r0, r5
    57ce:	4b22      	ldr	r3, [pc, #136]	; (5858 <cdcdf_acm_enable+0xd8>)
    57d0:	4798      	blx	r3
			desc->sod = ep;
    57d2:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
	return desc[0];
    57d4:	7820      	ldrb	r0, [r4, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    57d6:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    57d8:	6871      	ldr	r1, [r6, #4]
    57da:	4b20      	ldr	r3, [pc, #128]	; (585c <cdcdf_acm_enable+0xdc>)
    57dc:	4798      	blx	r3
    57de:	0004      	movs	r4, r0
		while (NULL != ep) {
    57e0:	2c00      	cmp	r4, #0
    57e2:	d013      	beq.n	580c <cdcdf_acm_enable+0x8c>
			ep_desc.bEndpointAddress = ep[2];
    57e4:	78a5      	ldrb	r5, [r4, #2]
			ep_desc.bmAttributes     = ep[3];
    57e6:	78e1      	ldrb	r1, [r4, #3]
	return (ptr[0] + (ptr[1] << 8));
    57e8:	7922      	ldrb	r2, [r4, #4]
    57ea:	7963      	ldrb	r3, [r4, #5]
    57ec:	021b      	lsls	r3, r3, #8
    57ee:	18d2      	adds	r2, r2, r3
    57f0:	b292      	uxth	r2, r2
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    57f2:	0028      	movs	r0, r5
    57f4:	4b1a      	ldr	r3, [pc, #104]	; (5860 <cdcdf_acm_enable+0xe0>)
    57f6:	4798      	blx	r3
    57f8:	2800      	cmp	r0, #0
    57fa:	d127      	bne.n	584c <cdcdf_acm_enable+0xcc>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    57fc:	b26b      	sxtb	r3, r5
    57fe:	2b00      	cmp	r3, #0
    5800:	dbe1      	blt.n	57c6 <cdcdf_acm_enable+0x46>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    5802:	713d      	strb	r5, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    5804:	0028      	movs	r0, r5
    5806:	4b14      	ldr	r3, [pc, #80]	; (5858 <cdcdf_acm_enable+0xd8>)
    5808:	4798      	blx	r3
    580a:	e7e2      	b.n	57d2 <cdcdf_acm_enable+0x52>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    580c:	6830      	ldr	r0, [r6, #0]
	return desc[0];
    580e:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    5810:	18c0      	adds	r0, r0, r3
    5812:	2204      	movs	r2, #4
    5814:	6871      	ldr	r1, [r6, #4]
    5816:	4b0f      	ldr	r3, [pc, #60]	; (5854 <cdcdf_acm_enable+0xd4>)
    5818:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    581a:	4643      	mov	r3, r8
    581c:	3301      	adds	r3, #1
    581e:	b2db      	uxtb	r3, r3
    5820:	4698      	mov	r8, r3
    5822:	e7b6      	b.n	5792 <cdcdf_acm_enable+0x12>
	_cdcdf_acm_funcd.enabled = true;
    5824:	2201      	movs	r2, #1
    5826:	4b0f      	ldr	r3, [pc, #60]	; (5864 <cdcdf_acm_enable+0xe4>)
    5828:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    582a:	2000      	movs	r0, #0
}
    582c:	bc0c      	pop	{r2, r3}
    582e:	4690      	mov	r8, r2
    5830:	4699      	mov	r9, r3
    5832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ERR_NOT_FOUND;
    5834:	200a      	movs	r0, #10
    5836:	4240      	negs	r0, r0
    5838:	e7f8      	b.n	582c <cdcdf_acm_enable+0xac>
			return ERR_NOT_FOUND;
    583a:	200a      	movs	r0, #10
    583c:	4240      	negs	r0, r0
    583e:	e7f5      	b.n	582c <cdcdf_acm_enable+0xac>
				return ERR_ALREADY_INITIALIZED;
    5840:	2012      	movs	r0, #18
    5842:	4240      	negs	r0, r0
    5844:	e7f2      	b.n	582c <cdcdf_acm_enable+0xac>
				return ERR_NO_RESOURCE;
    5846:	201c      	movs	r0, #28
    5848:	4240      	negs	r0, r0
    584a:	e7ef      	b.n	582c <cdcdf_acm_enable+0xac>
				return ERR_NOT_INITIALIZED;
    584c:	2014      	movs	r0, #20
    584e:	4240      	negs	r0, r0
    5850:	e7ec      	b.n	582c <cdcdf_acm_enable+0xac>
    5852:	46c0      	nop			; (mov r8, r8)
    5854:	00006239 	.word	0x00006239
    5858:	00003165 	.word	0x00003165
    585c:	00006257 	.word	0x00006257
    5860:	000030d1 	.word	0x000030d1
    5864:	20001358 	.word	0x20001358

00005868 <cdcdf_acm_disable>:
{
    5868:	b570      	push	{r4, r5, r6, lr}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    586a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    586c:	2900      	cmp	r1, #0
    586e:	d01a      	beq.n	58a6 <cdcdf_acm_disable+0x3e>
		ifc_desc.bInterfaceClass = desc->sod[5];
    5870:	680b      	ldr	r3, [r1, #0]
    5872:	795b      	ldrb	r3, [r3, #5]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    5874:	2b02      	cmp	r3, #2
    5876:	d018      	beq.n	58aa <cdcdf_acm_disable+0x42>
    5878:	2b0a      	cmp	r3, #10
    587a:	d124      	bne.n	58c6 <cdcdf_acm_disable+0x5e>
    587c:	2400      	movs	r4, #0
    587e:	e001      	b.n	5884 <cdcdf_acm_disable+0x1c>
	for (i = 0; i < 2; i++) {
    5880:	3401      	adds	r4, #1
    5882:	b2e4      	uxtb	r4, r4
    5884:	2c01      	cmp	r4, #1
    5886:	d812      	bhi.n	58ae <cdcdf_acm_disable+0x46>
		if (func_data->func_iface[i] == 0xFF) {
    5888:	5d2b      	ldrb	r3, [r5, r4]
    588a:	2bff      	cmp	r3, #255	; 0xff
    588c:	d0f8      	beq.n	5880 <cdcdf_acm_disable+0x18>
			func_data->func_iface[i] = 0xFF;
    588e:	23ff      	movs	r3, #255	; 0xff
    5890:	552b      	strb	r3, [r5, r4]
			if (func_data->func_ep_in[i] != 0xFF) {
    5892:	192b      	adds	r3, r5, r4
    5894:	7898      	ldrb	r0, [r3, #2]
    5896:	28ff      	cmp	r0, #255	; 0xff
    5898:	d0f2      	beq.n	5880 <cdcdf_acm_disable+0x18>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    589a:	4b0c      	ldr	r3, [pc, #48]	; (58cc <cdcdf_acm_disable+0x64>)
    589c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    589e:	192e      	adds	r6, r5, r4
    58a0:	22ff      	movs	r2, #255	; 0xff
    58a2:	70b2      	strb	r2, [r6, #2]
    58a4:	e7ec      	b.n	5880 <cdcdf_acm_disable+0x18>
    58a6:	2400      	movs	r4, #0
    58a8:	e7ec      	b.n	5884 <cdcdf_acm_disable+0x1c>
    58aa:	2400      	movs	r4, #0
    58ac:	e7ea      	b.n	5884 <cdcdf_acm_disable+0x1c>
	if (func_data->func_ep_out != 0xFF) {
    58ae:	7928      	ldrb	r0, [r5, #4]
    58b0:	28ff      	cmp	r0, #255	; 0xff
    58b2:	d003      	beq.n	58bc <cdcdf_acm_disable+0x54>
		usb_d_ep_deinit(func_data->func_ep_out);
    58b4:	4b05      	ldr	r3, [pc, #20]	; (58cc <cdcdf_acm_disable+0x64>)
    58b6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    58b8:	23ff      	movs	r3, #255	; 0xff
    58ba:	712b      	strb	r3, [r5, #4]
	_cdcdf_acm_funcd.enabled = false;
    58bc:	2200      	movs	r2, #0
    58be:	4b04      	ldr	r3, [pc, #16]	; (58d0 <cdcdf_acm_disable+0x68>)
    58c0:	755a      	strb	r2, [r3, #21]
	return ERR_NONE;
    58c2:	2000      	movs	r0, #0
}
    58c4:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_NOT_FOUND;
    58c6:	200a      	movs	r0, #10
    58c8:	4240      	negs	r0, r0
    58ca:	e7fb      	b.n	58c4 <cdcdf_acm_disable+0x5c>
    58cc:	00003139 	.word	0x00003139
    58d0:	20001358 	.word	0x20001358

000058d4 <cdcdf_acm_ctrl>:
{
    58d4:	b510      	push	{r4, lr}
	switch (ctrl) {
    58d6:	2901      	cmp	r1, #1
    58d8:	d00a      	beq.n	58f0 <cdcdf_acm_ctrl+0x1c>
    58da:	2900      	cmp	r1, #0
    58dc:	d004      	beq.n	58e8 <cdcdf_acm_ctrl+0x14>
    58de:	2902      	cmp	r1, #2
    58e0:	d10a      	bne.n	58f8 <cdcdf_acm_ctrl+0x24>
		return ERR_UNSUPPORTED_OP;
    58e2:	201b      	movs	r0, #27
    58e4:	4240      	negs	r0, r0
}
    58e6:	bd10      	pop	{r4, pc}
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    58e8:	0011      	movs	r1, r2
    58ea:	4b05      	ldr	r3, [pc, #20]	; (5900 <cdcdf_acm_ctrl+0x2c>)
    58ec:	4798      	blx	r3
    58ee:	e7fa      	b.n	58e6 <cdcdf_acm_ctrl+0x12>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    58f0:	0011      	movs	r1, r2
    58f2:	4b04      	ldr	r3, [pc, #16]	; (5904 <cdcdf_acm_ctrl+0x30>)
    58f4:	4798      	blx	r3
    58f6:	e7f6      	b.n	58e6 <cdcdf_acm_ctrl+0x12>
		return ERR_INVALID_ARG;
    58f8:	200d      	movs	r0, #13
    58fa:	4240      	negs	r0, r0
    58fc:	e7f3      	b.n	58e6 <cdcdf_acm_ctrl+0x12>
    58fe:	46c0      	nop			; (mov r8, r8)
    5900:	00005781 	.word	0x00005781
    5904:	00005869 	.word	0x00005869

00005908 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    5908:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    590a:	4b0b      	ldr	r3, [pc, #44]	; (5938 <cdcdf_acm_init+0x30>)
    590c:	4798      	blx	r3
    590e:	2801      	cmp	r0, #1
    5910:	d80e      	bhi.n	5930 <cdcdf_acm_init+0x28>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    5912:	480a      	ldr	r0, [pc, #40]	; (593c <cdcdf_acm_init+0x34>)
    5914:	4b0a      	ldr	r3, [pc, #40]	; (5940 <cdcdf_acm_init+0x38>)
    5916:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    5918:	0003      	movs	r3, r0
    591a:	3310      	adds	r3, #16
    591c:	6203      	str	r3, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    591e:	3018      	adds	r0, #24
    5920:	4b08      	ldr	r3, [pc, #32]	; (5944 <cdcdf_acm_init+0x3c>)
    5922:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    5924:	4908      	ldr	r1, [pc, #32]	; (5948 <cdcdf_acm_init+0x40>)
    5926:	2001      	movs	r0, #1
    5928:	4b08      	ldr	r3, [pc, #32]	; (594c <cdcdf_acm_init+0x44>)
    592a:	4798      	blx	r3
	return ERR_NONE;
    592c:	2000      	movs	r0, #0
}
    592e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    5930:	2011      	movs	r0, #17
    5932:	4240      	negs	r0, r0
    5934:	e7fb      	b.n	592e <cdcdf_acm_init+0x26>
    5936:	46c0      	nop			; (mov r8, r8)
    5938:	00006229 	.word	0x00006229
    593c:	20001358 	.word	0x20001358
    5940:	000058d5 	.word	0x000058d5
    5944:	000061c1 	.word	0x000061c1
    5948:	20000064 	.word	0x20000064
    594c:	00006129 	.word	0x00006129

00005950 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    5950:	b570      	push	{r4, r5, r6, lr}
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    5952:	4d03      	ldr	r5, [pc, #12]	; (5960 <cdcdf_acm_stop_xfer+0x10>)
    5954:	7ce8      	ldrb	r0, [r5, #19]
    5956:	4c03      	ldr	r4, [pc, #12]	; (5964 <cdcdf_acm_stop_xfer+0x14>)
    5958:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    595a:	7d28      	ldrb	r0, [r5, #20]
    595c:	47a0      	blx	r4
}
    595e:	bd70      	pop	{r4, r5, r6, pc}
    5960:	20001358 	.word	0x20001358
    5964:	000032d9 	.word	0x000032d9

00005968 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    5968:	b510      	push	{r4, lr}
	switch (cb_type) {
    596a:	2801      	cmp	r0, #1
    596c:	d010      	beq.n	5990 <cdcdf_acm_register_callback+0x28>
    596e:	2800      	cmp	r0, #0
    5970:	d006      	beq.n	5980 <cdcdf_acm_register_callback+0x18>
    5972:	2802      	cmp	r0, #2
    5974:	d014      	beq.n	59a0 <cdcdf_acm_register_callback+0x38>
    5976:	2803      	cmp	r0, #3
    5978:	d016      	beq.n	59a8 <cdcdf_acm_register_callback+0x40>
		break;
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
    597a:	200d      	movs	r0, #13
    597c:	4240      	negs	r0, r0
    597e:	e006      	b.n	598e <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    5980:	4b0b      	ldr	r3, [pc, #44]	; (59b0 <cdcdf_acm_register_callback+0x48>)
    5982:	7d18      	ldrb	r0, [r3, #20]
    5984:	000a      	movs	r2, r1
    5986:	2102      	movs	r1, #2
    5988:	4b0a      	ldr	r3, [pc, #40]	; (59b4 <cdcdf_acm_register_callback+0x4c>)
    598a:	4798      	blx	r3
	}
	return ERR_NONE;
    598c:	2000      	movs	r0, #0
}
    598e:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    5990:	4b07      	ldr	r3, [pc, #28]	; (59b0 <cdcdf_acm_register_callback+0x48>)
    5992:	7cd8      	ldrb	r0, [r3, #19]
    5994:	000a      	movs	r2, r1
    5996:	2102      	movs	r1, #2
    5998:	4b06      	ldr	r3, [pc, #24]	; (59b4 <cdcdf_acm_register_callback+0x4c>)
    599a:	4798      	blx	r3
	return ERR_NONE;
    599c:	2000      	movs	r0, #0
		break;
    599e:	e7f6      	b.n	598e <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    59a0:	4b03      	ldr	r3, [pc, #12]	; (59b0 <cdcdf_acm_register_callback+0x48>)
    59a2:	6099      	str	r1, [r3, #8]
	return ERR_NONE;
    59a4:	2000      	movs	r0, #0
		break;
    59a6:	e7f2      	b.n	598e <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    59a8:	4b01      	ldr	r3, [pc, #4]	; (59b0 <cdcdf_acm_register_callback+0x48>)
    59aa:	60d9      	str	r1, [r3, #12]
	return ERR_NONE;
    59ac:	2000      	movs	r0, #0
		break;
    59ae:	e7ee      	b.n	598e <cdcdf_acm_register_callback+0x26>
    59b0:	20001358 	.word	0x20001358
    59b4:	00003371 	.word	0x00003371

000059b8 <cdcdf_acm_is_enabled>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    59b8:	4b01      	ldr	r3, [pc, #4]	; (59c0 <cdcdf_acm_is_enabled+0x8>)
    59ba:	7d58      	ldrb	r0, [r3, #21]
}
    59bc:	4770      	bx	lr
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	20001358 	.word	0x20001358

000059c4 <cdcdf_acm_read>:
{
    59c4:	b570      	push	{r4, r5, r6, lr}
    59c6:	0004      	movs	r4, r0
    59c8:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    59ca:	4b07      	ldr	r3, [pc, #28]	; (59e8 <cdcdf_acm_read+0x24>)
    59cc:	4798      	blx	r3
    59ce:	2800      	cmp	r0, #0
    59d0:	d007      	beq.n	59e2 <cdcdf_acm_read+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    59d2:	4b06      	ldr	r3, [pc, #24]	; (59ec <cdcdf_acm_read+0x28>)
    59d4:	7d18      	ldrb	r0, [r3, #20]
    59d6:	2300      	movs	r3, #0
    59d8:	002a      	movs	r2, r5
    59da:	0021      	movs	r1, r4
    59dc:	4c04      	ldr	r4, [pc, #16]	; (59f0 <cdcdf_acm_read+0x2c>)
    59de:	47a0      	blx	r4
}
    59e0:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    59e2:	2011      	movs	r0, #17
    59e4:	4240      	negs	r0, r0
    59e6:	e7fb      	b.n	59e0 <cdcdf_acm_read+0x1c>
    59e8:	000059b9 	.word	0x000059b9
    59ec:	20001358 	.word	0x20001358
    59f0:	00005c91 	.word	0x00005c91

000059f4 <cdcdf_acm_write>:
{
    59f4:	b570      	push	{r4, r5, r6, lr}
    59f6:	0004      	movs	r4, r0
    59f8:	000d      	movs	r5, r1
	if (!cdcdf_acm_is_enabled()) {
    59fa:	4b07      	ldr	r3, [pc, #28]	; (5a18 <cdcdf_acm_write+0x24>)
    59fc:	4798      	blx	r3
    59fe:	2800      	cmp	r0, #0
    5a00:	d007      	beq.n	5a12 <cdcdf_acm_write+0x1e>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    5a02:	4b06      	ldr	r3, [pc, #24]	; (5a1c <cdcdf_acm_write+0x28>)
    5a04:	7cd8      	ldrb	r0, [r3, #19]
    5a06:	2301      	movs	r3, #1
    5a08:	002a      	movs	r2, r5
    5a0a:	0021      	movs	r1, r4
    5a0c:	4c04      	ldr	r4, [pc, #16]	; (5a20 <cdcdf_acm_write+0x2c>)
    5a0e:	47a0      	blx	r4
}
    5a10:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    5a12:	2011      	movs	r0, #17
    5a14:	4240      	negs	r0, r0
    5a16:	e7fb      	b.n	5a10 <cdcdf_acm_write+0x1c>
    5a18:	000059b9 	.word	0x000059b9
    5a1c:	20001358 	.word	0x20001358
    5a20:	00005c91 	.word	0x00005c91

00005a24 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    5a24:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    5a26:	4b06      	ldr	r3, [pc, #24]	; (5a40 <usbdc_unconfig+0x1c>)
    5a28:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    5a2a:	e005      	b.n	5a38 <usbdc_unconfig+0x14>
		func->ctrl(func, USBDF_DISABLE, NULL);
    5a2c:	2200      	movs	r2, #0
    5a2e:	2101      	movs	r1, #1
    5a30:	0020      	movs	r0, r4
    5a32:	6863      	ldr	r3, [r4, #4]
    5a34:	4798      	blx	r3
		func = func->next;
    5a36:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    5a38:	2c00      	cmp	r4, #0
    5a3a:	d1f7      	bne.n	5a2c <usbdc_unconfig+0x8>
	}
}
    5a3c:	bd10      	pop	{r4, pc}
    5a3e:	46c0      	nop			; (mov r8, r8)
    5a40:	2000137c 	.word	0x2000137c

00005a44 <usbdc_sof_notify>:
	}
}

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    5a44:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    5a46:	4b06      	ldr	r3, [pc, #24]	; (5a60 <usbdc_sof_notify+0x1c>)
    5a48:	685c      	ldr	r4, [r3, #4]

	while (sof != NULL) {
    5a4a:	e000      	b.n	5a4e <usbdc_sof_notify+0xa>
		if (NULL != sof->cb) {
			sof->cb();
		}
		sof = sof->next;
    5a4c:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    5a4e:	2c00      	cmp	r4, #0
    5a50:	d004      	beq.n	5a5c <usbdc_sof_notify+0x18>
		if (NULL != sof->cb) {
    5a52:	6863      	ldr	r3, [r4, #4]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d0f9      	beq.n	5a4c <usbdc_sof_notify+0x8>
			sof->cb();
    5a58:	4798      	blx	r3
    5a5a:	e7f7      	b.n	5a4c <usbdc_sof_notify+0x8>
	}
}
    5a5c:	bd10      	pop	{r4, pc}
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	2000137c 	.word	0x2000137c

00005a64 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    5a64:	b570      	push	{r4, r5, r6, lr}
    5a66:	0006      	movs	r6, r0
    5a68:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    5a6a:	4b07      	ldr	r3, [pc, #28]	; (5a88 <usbdc_change_notify+0x24>)
    5a6c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    5a6e:	e000      	b.n	5a72 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    5a70:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    5a72:	2c00      	cmp	r4, #0
    5a74:	d006      	beq.n	5a84 <usbdc_change_notify+0x20>
		if (NULL != cg->cb) {
    5a76:	6863      	ldr	r3, [r4, #4]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d0f9      	beq.n	5a70 <usbdc_change_notify+0xc>
			cg->cb(change, value);
    5a7c:	0029      	movs	r1, r5
    5a7e:	0030      	movs	r0, r6
    5a80:	4798      	blx	r3
    5a82:	e7f5      	b.n	5a70 <usbdc_change_notify+0xc>
	}
}
    5a84:	bd70      	pop	{r4, r5, r6, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	2000137c 	.word	0x2000137c

00005a8c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a8e:	0007      	movs	r7, r0
    5a90:	000e      	movs	r6, r1
    5a92:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    5a94:	4b0b      	ldr	r3, [pc, #44]	; (5ac4 <usbdc_request_handler+0x38>)
    5a96:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    5a98:	e000      	b.n	5a9c <usbdc_request_handler+0x10>
				return true;
			} else if (ERR_NOT_FOUND != rc) {
				return -1;
			}
		}
		h = h->next;
    5a9a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    5a9c:	2c00      	cmp	r4, #0
    5a9e:	d00d      	beq.n	5abc <usbdc_request_handler+0x30>
		if (NULL != h->cb) {
    5aa0:	6863      	ldr	r3, [r4, #4]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d0f9      	beq.n	5a9a <usbdc_request_handler+0xe>
			rc = h->cb(ep, req, stage);
    5aa6:	002a      	movs	r2, r5
    5aa8:	0031      	movs	r1, r6
    5aaa:	0038      	movs	r0, r7
    5aac:	4798      	blx	r3
			if (0 == rc) {
    5aae:	2800      	cmp	r0, #0
    5ab0:	d006      	beq.n	5ac0 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    5ab2:	300a      	adds	r0, #10
    5ab4:	d0f1      	beq.n	5a9a <usbdc_request_handler+0xe>
				return -1;
    5ab6:	2001      	movs	r0, #1
    5ab8:	4240      	negs	r0, r0
    5aba:	e000      	b.n	5abe <usbdc_request_handler+0x32>
	}
	return false;
    5abc:	2000      	movs	r0, #0
}
    5abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    5ac0:	2001      	movs	r0, #1
    5ac2:	e7fc      	b.n	5abe <usbdc_request_handler+0x32>
    5ac4:	2000137c 	.word	0x2000137c

00005ac8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    5ac8:	b510      	push	{r4, lr}
	usbdc_sof_notify();
    5aca:	4b01      	ldr	r3, [pc, #4]	; (5ad0 <usbd_sof_cb+0x8>)
    5acc:	4798      	blx	r3
}
    5ace:	bd10      	pop	{r4, pc}
    5ad0:	00005a45 	.word	0x00005a45

00005ad4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    5ad4:	b510      	push	{r4, lr}
    5ad6:	0001      	movs	r1, r0
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    5ad8:	2201      	movs	r2, #1
    5ada:	2000      	movs	r0, #0
    5adc:	4b01      	ldr	r3, [pc, #4]	; (5ae4 <usbdc_ctrl_data_end+0x10>)
    5ade:	4798      	blx	r3
	return false;
}
    5ae0:	2000      	movs	r0, #0
    5ae2:	bd10      	pop	{r4, pc}
    5ae4:	00005a8d 	.word	0x00005a8d

00005ae8 <usbdc_set_address>:
{
    5ae8:	b510      	push	{r4, lr}
	usb_d_set_address(addr);
    5aea:	4b01      	ldr	r3, [pc, #4]	; (5af0 <usbdc_set_address+0x8>)
    5aec:	4798      	blx	r3
}
    5aee:	bd10      	pop	{r4, pc}
    5af0:	000030c5 	.word	0x000030c5

00005af4 <usbdc_ctrl_status_end>:
{
    5af4:	b510      	push	{r4, lr}
    5af6:	0004      	movs	r4, r0
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    5af8:	7803      	ldrb	r3, [r0, #0]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d112      	bne.n	5b24 <usbdc_ctrl_status_end+0x30>
	switch (req->bRequest) {
    5afe:	7843      	ldrb	r3, [r0, #1]
    5b00:	2b05      	cmp	r3, #5
    5b02:	d012      	beq.n	5b2a <usbdc_ctrl_status_end+0x36>
    5b04:	2b09      	cmp	r3, #9
    5b06:	d10d      	bne.n	5b24 <usbdc_ctrl_status_end+0x30>
		usbdc.cfg_value = req->wValue;
    5b08:	7882      	ldrb	r2, [r0, #2]
    5b0a:	4b10      	ldr	r3, [pc, #64]	; (5b4c <usbdc_ctrl_status_end+0x58>)
    5b0c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    5b0e:	7882      	ldrb	r2, [r0, #2]
    5b10:	78c3      	ldrb	r3, [r0, #3]
    5b12:	021b      	lsls	r3, r3, #8
    5b14:	4313      	orrs	r3, r2
    5b16:	d106      	bne.n	5b26 <usbdc_ctrl_status_end+0x32>
    5b18:	2103      	movs	r1, #3
    5b1a:	4b0c      	ldr	r3, [pc, #48]	; (5b4c <usbdc_ctrl_status_end+0x58>)
    5b1c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5b1e:	2001      	movs	r0, #1
    5b20:	4b0b      	ldr	r3, [pc, #44]	; (5b50 <usbdc_ctrl_status_end+0x5c>)
    5b22:	4798      	blx	r3
}
    5b24:	bd10      	pop	{r4, pc}
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    5b26:	2104      	movs	r1, #4
    5b28:	e7f7      	b.n	5b1a <usbdc_ctrl_status_end+0x26>
		usbdc_set_address(req->wValue);
    5b2a:	7880      	ldrb	r0, [r0, #2]
    5b2c:	4b09      	ldr	r3, [pc, #36]	; (5b54 <usbdc_ctrl_status_end+0x60>)
    5b2e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5b30:	78a2      	ldrb	r2, [r4, #2]
    5b32:	78e3      	ldrb	r3, [r4, #3]
    5b34:	021b      	lsls	r3, r3, #8
    5b36:	4313      	orrs	r3, r2
    5b38:	d006      	beq.n	5b48 <usbdc_ctrl_status_end+0x54>
    5b3a:	2103      	movs	r1, #3
    5b3c:	4b03      	ldr	r3, [pc, #12]	; (5b4c <usbdc_ctrl_status_end+0x58>)
    5b3e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    5b40:	2001      	movs	r0, #1
    5b42:	4b03      	ldr	r3, [pc, #12]	; (5b50 <usbdc_ctrl_status_end+0x5c>)
    5b44:	4798      	blx	r3
		break;
    5b46:	e7ed      	b.n	5b24 <usbdc_ctrl_status_end+0x30>
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    5b48:	2102      	movs	r1, #2
    5b4a:	e7f7      	b.n	5b3c <usbdc_ctrl_status_end+0x48>
    5b4c:	2000137c 	.word	0x2000137c
    5b50:	00005a65 	.word	0x00005a65
    5b54:	00005ae9 	.word	0x00005ae9

00005b58 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    5b58:	b510      	push	{r4, lr}
	(void)ep;

	switch (code) {
    5b5a:	2900      	cmp	r1, #0
    5b5c:	d003      	beq.n	5b66 <usbdc_cb_ctl_done+0xe>
    5b5e:	2901      	cmp	r1, #1
    5b60:	d006      	beq.n	5b70 <usbdc_cb_ctl_done+0x18>
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
    5b62:	2000      	movs	r0, #0
    5b64:	e003      	b.n	5b6e <usbdc_cb_ctl_done+0x16>
		usbdc_ctrl_status_end(req);
    5b66:	0010      	movs	r0, r2
    5b68:	4b03      	ldr	r3, [pc, #12]	; (5b78 <usbdc_cb_ctl_done+0x20>)
    5b6a:	4798      	blx	r3
	return false;
    5b6c:	2000      	movs	r0, #0
}
    5b6e:	bd10      	pop	{r4, pc}
		return usbdc_ctrl_data_end(req);
    5b70:	0010      	movs	r0, r2
    5b72:	4b02      	ldr	r3, [pc, #8]	; (5b7c <usbdc_cb_ctl_done+0x24>)
    5b74:	4798      	blx	r3
    5b76:	e7fa      	b.n	5b6e <usbdc_cb_ctl_done+0x16>
    5b78:	00005af5 	.word	0x00005af5
    5b7c:	00005ad5 	.word	0x00005ad5

00005b80 <usbdc_set_config>:
{
    5b80:	b530      	push	{r4, r5, lr}
    5b82:	b083      	sub	sp, #12
    5b84:	1e02      	subs	r2, r0, #0
	if (cfg_value == 0) {
    5b86:	d014      	beq.n	5bb2 <usbdc_set_config+0x32>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    5b88:	4b1e      	ldr	r3, [pc, #120]	; (5c04 <usbdc_set_config+0x84>)
    5b8a:	681b      	ldr	r3, [r3, #0]
    5b8c:	6818      	ldr	r0, [r3, #0]
    5b8e:	6859      	ldr	r1, [r3, #4]
    5b90:	4b1d      	ldr	r3, [pc, #116]	; (5c08 <usbdc_set_config+0x88>)
    5b92:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5b94:	2800      	cmp	r0, #0
    5b96:	d032      	beq.n	5bfe <usbdc_set_config+0x7e>
	return (ptr[0] + (ptr[1] << 8));
    5b98:	7881      	ldrb	r1, [r0, #2]
    5b9a:	78c3      	ldrb	r3, [r0, #3]
    5b9c:	021b      	lsls	r3, r3, #8
    5b9e:	18c9      	adds	r1, r1, r3
    5ba0:	b289      	uxth	r1, r1
	desc.eod  = cfg_desc + total_len;
    5ba2:	1841      	adds	r1, r0, r1
    5ba4:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    5ba6:	2204      	movs	r2, #4
    5ba8:	4b18      	ldr	r3, [pc, #96]	; (5c0c <usbdc_set_config+0x8c>)
    5baa:	4798      	blx	r3
    5bac:	9000      	str	r0, [sp, #0]
	uint8_t                 last_iface = 0xFF;
    5bae:	24ff      	movs	r4, #255	; 0xff
	while (NULL != desc.sod) {
    5bb0:	e00d      	b.n	5bce <usbdc_set_config+0x4e>
		usbdc_unconfig();
    5bb2:	4b17      	ldr	r3, [pc, #92]	; (5c10 <usbdc_set_config+0x90>)
    5bb4:	4798      	blx	r3
		return true;
    5bb6:	2001      	movs	r0, #1
    5bb8:	e01f      	b.n	5bfa <usbdc_set_config+0x7a>
			last_iface = desc.sod[2];
    5bba:	002c      	movs	r4, r5
		desc.sod = usb_desc_next(desc.sod);
    5bbc:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    5bbe:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    5bc0:	18c0      	adds	r0, r0, r3
    5bc2:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5bc4:	2204      	movs	r2, #4
    5bc6:	9901      	ldr	r1, [sp, #4]
    5bc8:	4b10      	ldr	r3, [pc, #64]	; (5c0c <usbdc_set_config+0x8c>)
    5bca:	4798      	blx	r3
    5bcc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    5bce:	9b00      	ldr	r3, [sp, #0]
    5bd0:	2b00      	cmp	r3, #0
    5bd2:	d011      	beq.n	5bf8 <usbdc_set_config+0x78>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    5bd4:	789d      	ldrb	r5, [r3, #2]
    5bd6:	42ac      	cmp	r4, r5
    5bd8:	d0f0      	beq.n	5bbc <usbdc_set_config+0x3c>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    5bda:	4b0a      	ldr	r3, [pc, #40]	; (5c04 <usbdc_set_config+0x84>)
    5bdc:	691c      	ldr	r4, [r3, #16]
			while (NULL != func) {
    5bde:	2c00      	cmp	r4, #0
    5be0:	d0eb      	beq.n	5bba <usbdc_set_config+0x3a>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    5be2:	466a      	mov	r2, sp
    5be4:	2100      	movs	r1, #0
    5be6:	0020      	movs	r0, r4
    5be8:	6863      	ldr	r3, [r4, #4]
    5bea:	4798      	blx	r3
    5bec:	2800      	cmp	r0, #0
    5bee:	d001      	beq.n	5bf4 <usbdc_set_config+0x74>
					func = func->next;
    5bf0:	6824      	ldr	r4, [r4, #0]
    5bf2:	e7f4      	b.n	5bde <usbdc_set_config+0x5e>
			last_iface = desc.sod[2];
    5bf4:	002c      	movs	r4, r5
    5bf6:	e7e1      	b.n	5bbc <usbdc_set_config+0x3c>
	return true;
    5bf8:	2001      	movs	r0, #1
}
    5bfa:	b003      	add	sp, #12
    5bfc:	bd30      	pop	{r4, r5, pc}
		return false;
    5bfe:	2000      	movs	r0, #0
    5c00:	e7fb      	b.n	5bfa <usbdc_set_config+0x7a>
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	2000137c 	.word	0x2000137c
    5c08:	0000627d 	.word	0x0000627d
    5c0c:	00006239 	.word	0x00006239
    5c10:	00005a25 	.word	0x00005a25

00005c14 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    5c14:	b510      	push	{r4, lr}
	usbdc_unconfig();
    5c16:	4b0d      	ldr	r3, [pc, #52]	; (5c4c <usbdc_reset+0x38>)
    5c18:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    5c1a:	4c0d      	ldr	r4, [pc, #52]	; (5c50 <usbdc_reset+0x3c>)
    5c1c:	2302      	movs	r3, #2
    5c1e:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    5c20:	2300      	movs	r3, #0
    5c22:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    5c24:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    5c26:	2000      	movs	r0, #0
    5c28:	4b0a      	ldr	r3, [pc, #40]	; (5c54 <usbdc_reset+0x40>)
    5c2a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    5c2c:	7f20      	ldrb	r0, [r4, #28]
    5c2e:	4b0a      	ldr	r3, [pc, #40]	; (5c58 <usbdc_reset+0x44>)
    5c30:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    5c32:	4a0a      	ldr	r2, [pc, #40]	; (5c5c <usbdc_reset+0x48>)
    5c34:	2100      	movs	r1, #0
    5c36:	2000      	movs	r0, #0
    5c38:	4c09      	ldr	r4, [pc, #36]	; (5c60 <usbdc_reset+0x4c>)
    5c3a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    5c3c:	4a09      	ldr	r2, [pc, #36]	; (5c64 <usbdc_reset+0x50>)
    5c3e:	2102      	movs	r1, #2
    5c40:	2000      	movs	r0, #0
    5c42:	47a0      	blx	r4
	usb_d_ep_enable(0);
    5c44:	2000      	movs	r0, #0
    5c46:	4b08      	ldr	r3, [pc, #32]	; (5c68 <usbdc_reset+0x54>)
    5c48:	4798      	blx	r3
}
    5c4a:	bd10      	pop	{r4, pc}
    5c4c:	00005a25 	.word	0x00005a25
    5c50:	2000137c 	.word	0x2000137c
    5c54:	00003139 	.word	0x00003139
    5c58:	00003125 	.word	0x00003125
    5c5c:	000060dd 	.word	0x000060dd
    5c60:	00003371 	.word	0x00003371
    5c64:	00005b59 	.word	0x00005b59
    5c68:	00003165 	.word	0x00003165

00005c6c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    5c6c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    5c6e:	2800      	cmp	r0, #0
    5c70:	d002      	beq.n	5c78 <usbd_event_cb+0xc>
    5c72:	2801      	cmp	r0, #1
    5c74:	d004      	beq.n	5c80 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    5c76:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    5c78:	2000      	movs	r0, #0
    5c7a:	4b03      	ldr	r3, [pc, #12]	; (5c88 <usbd_event_cb+0x1c>)
    5c7c:	4798      	blx	r3
		break;
    5c7e:	e7fa      	b.n	5c76 <usbd_event_cb+0xa>
		usbdc_reset();
    5c80:	4b02      	ldr	r3, [pc, #8]	; (5c8c <usbd_event_cb+0x20>)
    5c82:	4798      	blx	r3
}
    5c84:	e7f7      	b.n	5c76 <usbd_event_cb+0xa>
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	00005a65 	.word	0x00005a65
    5c8c:	00005c15 	.word	0x00005c15

00005c90 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    5c90:	b510      	push	{r4, lr}
    5c92:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    5c94:	ac01      	add	r4, sp, #4
    5c96:	9101      	str	r1, [sp, #4]
    5c98:	9202      	str	r2, [sp, #8]
    5c9a:	7220      	strb	r0, [r4, #8]
    5c9c:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    5c9e:	0020      	movs	r0, r4
    5ca0:	4b01      	ldr	r3, [pc, #4]	; (5ca8 <usbdc_xfer+0x18>)
    5ca2:	4798      	blx	r3
}
    5ca4:	b004      	add	sp, #16
    5ca6:	bd10      	pop	{r4, pc}
    5ca8:	000031b5 	.word	0x000031b5

00005cac <usbdc_clear_ftr_req>:
{
    5cac:	b510      	push	{r4, lr}
    5cae:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5cb0:	780a      	ldrb	r2, [r1, #0]
    5cb2:	231f      	movs	r3, #31
    5cb4:	4013      	ands	r3, r2
    5cb6:	2b02      	cmp	r3, #2
    5cb8:	d112      	bne.n	5ce0 <usbdc_clear_ftr_req+0x34>
		if (req->wLength != 0) {
    5cba:	798a      	ldrb	r2, [r1, #6]
    5cbc:	79cb      	ldrb	r3, [r1, #7]
    5cbe:	021b      	lsls	r3, r3, #8
    5cc0:	4313      	orrs	r3, r2
    5cc2:	d001      	beq.n	5cc8 <usbdc_clear_ftr_req+0x1c>
			return false;
    5cc4:	2000      	movs	r0, #0
    5cc6:	e00c      	b.n	5ce2 <usbdc_clear_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    5cc8:	7908      	ldrb	r0, [r1, #4]
    5cca:	2100      	movs	r1, #0
    5ccc:	4b05      	ldr	r3, [pc, #20]	; (5ce4 <usbdc_clear_ftr_req+0x38>)
    5cce:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5cd0:	2301      	movs	r3, #1
    5cd2:	2200      	movs	r2, #0
    5cd4:	2100      	movs	r1, #0
    5cd6:	0020      	movs	r0, r4
    5cd8:	4c03      	ldr	r4, [pc, #12]	; (5ce8 <usbdc_clear_ftr_req+0x3c>)
    5cda:	47a0      	blx	r4
		return true;
    5cdc:	2001      	movs	r0, #1
    5cde:	e000      	b.n	5ce2 <usbdc_clear_ftr_req+0x36>
		return false;
    5ce0:	2000      	movs	r0, #0
}
    5ce2:	bd10      	pop	{r4, pc}
    5ce4:	00003309 	.word	0x00003309
    5ce8:	00005c91 	.word	0x00005c91

00005cec <usbdc_set_ftr_req>:
{
    5cec:	b510      	push	{r4, lr}
    5cee:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5cf0:	780a      	ldrb	r2, [r1, #0]
    5cf2:	231f      	movs	r3, #31
    5cf4:	4013      	ands	r3, r2
    5cf6:	2b02      	cmp	r3, #2
    5cf8:	d112      	bne.n	5d20 <usbdc_set_ftr_req+0x34>
		if (req->wLength != 0) {
    5cfa:	798a      	ldrb	r2, [r1, #6]
    5cfc:	79cb      	ldrb	r3, [r1, #7]
    5cfe:	021b      	lsls	r3, r3, #8
    5d00:	4313      	orrs	r3, r2
    5d02:	d001      	beq.n	5d08 <usbdc_set_ftr_req+0x1c>
			return false;
    5d04:	2000      	movs	r0, #0
    5d06:	e00c      	b.n	5d22 <usbdc_set_ftr_req+0x36>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    5d08:	7908      	ldrb	r0, [r1, #4]
    5d0a:	2101      	movs	r1, #1
    5d0c:	4b05      	ldr	r3, [pc, #20]	; (5d24 <usbdc_set_ftr_req+0x38>)
    5d0e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    5d10:	2301      	movs	r3, #1
    5d12:	2200      	movs	r2, #0
    5d14:	2100      	movs	r1, #0
    5d16:	0020      	movs	r0, r4
    5d18:	4c03      	ldr	r4, [pc, #12]	; (5d28 <usbdc_set_ftr_req+0x3c>)
    5d1a:	47a0      	blx	r4
		return true;
    5d1c:	2001      	movs	r0, #1
    5d1e:	e000      	b.n	5d22 <usbdc_set_ftr_req+0x36>
		return false;
    5d20:	2000      	movs	r0, #0
}
    5d22:	bd10      	pop	{r4, pc}
    5d24:	00003309 	.word	0x00003309
    5d28:	00005c91 	.word	0x00005c91

00005d2c <usbdc_set_interface>:
{
    5d2c:	b570      	push	{r4, r5, r6, lr}
    5d2e:	b082      	sub	sp, #8
    5d30:	0005      	movs	r5, r0
    5d32:	000c      	movs	r4, r1
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    5d34:	4b2a      	ldr	r3, [pc, #168]	; (5de0 <usbdc_set_interface+0xb4>)
    5d36:	681a      	ldr	r2, [r3, #0]
    5d38:	6810      	ldr	r0, [r2, #0]
    5d3a:	6851      	ldr	r1, [r2, #4]
    5d3c:	7eda      	ldrb	r2, [r3, #27]
    5d3e:	4b29      	ldr	r3, [pc, #164]	; (5de4 <usbdc_set_interface+0xb8>)
    5d40:	4798      	blx	r3
	if (NULL == ifc) {
    5d42:	2800      	cmp	r0, #0
    5d44:	d045      	beq.n	5dd2 <usbdc_set_interface+0xa6>
	desc.sod = ifc;
    5d46:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    5d48:	7881      	ldrb	r1, [r0, #2]
    5d4a:	78c3      	ldrb	r3, [r0, #3]
    5d4c:	021b      	lsls	r3, r3, #8
    5d4e:	18c9      	adds	r1, r1, r3
    5d50:	b289      	uxth	r1, r1
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    5d52:	1841      	adds	r1, r0, r1
    5d54:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    5d56:	2204      	movs	r2, #4
    5d58:	4b23      	ldr	r3, [pc, #140]	; (5de8 <usbdc_set_interface+0xbc>)
    5d5a:	4798      	blx	r3
    5d5c:	2800      	cmp	r0, #0
    5d5e:	d10b      	bne.n	5d78 <usbdc_set_interface+0x4c>
		return false;
    5d60:	2000      	movs	r0, #0
    5d62:	e039      	b.n	5dd8 <usbdc_set_interface+0xac>
		desc.sod = usb_desc_next(desc.sod);
    5d64:	9800      	ldr	r0, [sp, #0]
	return desc[0];
    5d66:	7803      	ldrb	r3, [r0, #0]
	return (desc + usb_desc_len(desc));
    5d68:	18c0      	adds	r0, r0, r3
    5d6a:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    5d6c:	2204      	movs	r2, #4
    5d6e:	9901      	ldr	r1, [sp, #4]
    5d70:	4b1d      	ldr	r3, [pc, #116]	; (5de8 <usbdc_set_interface+0xbc>)
    5d72:	4798      	blx	r3
		if (NULL == ifc) {
    5d74:	2800      	cmp	r0, #0
    5d76:	d02e      	beq.n	5dd6 <usbdc_set_interface+0xaa>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    5d78:	7883      	ldrb	r3, [r0, #2]
    5d7a:	42a3      	cmp	r3, r4
    5d7c:	d1f2      	bne.n	5d64 <usbdc_set_interface+0x38>
    5d7e:	78c3      	ldrb	r3, [r0, #3]
    5d80:	42ab      	cmp	r3, r5
    5d82:	d1ef      	bne.n	5d64 <usbdc_set_interface+0x38>
	desc.sod = ifc;
    5d84:	9000      	str	r0, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    5d86:	4b16      	ldr	r3, [pc, #88]	; (5de0 <usbdc_set_interface+0xb4>)
    5d88:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    5d8a:	2e00      	cmp	r6, #0
    5d8c:	d01f      	beq.n	5dce <usbdc_set_interface+0xa2>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    5d8e:	466a      	mov	r2, sp
    5d90:	2101      	movs	r1, #1
    5d92:	0030      	movs	r0, r6
    5d94:	6873      	ldr	r3, [r6, #4]
    5d96:	4798      	blx	r3
    5d98:	2800      	cmp	r0, #0
    5d9a:	d001      	beq.n	5da0 <usbdc_set_interface+0x74>
			func = func->next;
    5d9c:	6836      	ldr	r6, [r6, #0]
    5d9e:	e7f4      	b.n	5d8a <usbdc_set_interface+0x5e>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    5da0:	6873      	ldr	r3, [r6, #4]
    5da2:	466a      	mov	r2, sp
    5da4:	2100      	movs	r1, #0
    5da6:	0030      	movs	r0, r6
    5da8:	4798      	blx	r3
    5daa:	2800      	cmp	r0, #0
    5dac:	d116      	bne.n	5ddc <usbdc_set_interface+0xb0>
			if (alt_set) {
    5dae:	2d00      	cmp	r5, #0
    5db0:	d005      	beq.n	5dbe <usbdc_set_interface+0x92>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    5db2:	2201      	movs	r2, #1
    5db4:	40a2      	lsls	r2, r4
    5db6:	490a      	ldr	r1, [pc, #40]	; (5de0 <usbdc_set_interface+0xb4>)
    5db8:	7f4b      	ldrb	r3, [r1, #29]
    5dba:	4313      	orrs	r3, r2
    5dbc:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    5dbe:	2300      	movs	r3, #0
    5dc0:	2200      	movs	r2, #0
    5dc2:	2100      	movs	r1, #0
    5dc4:	2000      	movs	r0, #0
    5dc6:	4c09      	ldr	r4, [pc, #36]	; (5dec <usbdc_set_interface+0xc0>)
    5dc8:	47a0      	blx	r4
			return true;
    5dca:	2001      	movs	r0, #1
    5dcc:	e004      	b.n	5dd8 <usbdc_set_interface+0xac>
	return false;
    5dce:	2000      	movs	r0, #0
    5dd0:	e002      	b.n	5dd8 <usbdc_set_interface+0xac>
		return false;
    5dd2:	2000      	movs	r0, #0
    5dd4:	e000      	b.n	5dd8 <usbdc_set_interface+0xac>
			return false;
    5dd6:	2000      	movs	r0, #0
}
    5dd8:	b002      	add	sp, #8
    5dda:	bd70      	pop	{r4, r5, r6, pc}
			return false;
    5ddc:	2000      	movs	r0, #0
    5dde:	e7fb      	b.n	5dd8 <usbdc_set_interface+0xac>
    5de0:	2000137c 	.word	0x2000137c
    5de4:	0000627d 	.word	0x0000627d
    5de8:	00006239 	.word	0x00006239
    5dec:	00005c91 	.word	0x00005c91

00005df0 <usbdc_set_req>:
{
    5df0:	b510      	push	{r4, lr}
    5df2:	0004      	movs	r4, r0
	switch (req->bRequest) {
    5df4:	784b      	ldrb	r3, [r1, #1]
    5df6:	2b0b      	cmp	r3, #11
    5df8:	d82d      	bhi.n	5e56 <usbdc_set_req+0x66>
    5dfa:	009b      	lsls	r3, r3, #2
    5dfc:	4a17      	ldr	r2, [pc, #92]	; (5e5c <usbdc_set_req+0x6c>)
    5dfe:	58d3      	ldr	r3, [r2, r3]
    5e00:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5e02:	2301      	movs	r3, #1
    5e04:	2200      	movs	r2, #0
    5e06:	2100      	movs	r1, #0
    5e08:	4c15      	ldr	r4, [pc, #84]	; (5e60 <usbdc_set_req+0x70>)
    5e0a:	47a0      	blx	r4
    5e0c:	4243      	negs	r3, r0
    5e0e:	4158      	adcs	r0, r3
    5e10:	b2c0      	uxtb	r0, r0
}
    5e12:	bd10      	pop	{r4, pc}
		if (!usbdc_set_config(req->wValue)) {
    5e14:	7888      	ldrb	r0, [r1, #2]
    5e16:	4b13      	ldr	r3, [pc, #76]	; (5e64 <usbdc_set_req+0x74>)
    5e18:	4798      	blx	r3
    5e1a:	2800      	cmp	r0, #0
    5e1c:	d0f9      	beq.n	5e12 <usbdc_set_req+0x22>
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    5e1e:	2301      	movs	r3, #1
    5e20:	2200      	movs	r2, #0
    5e22:	2100      	movs	r1, #0
    5e24:	0020      	movs	r0, r4
    5e26:	4c0e      	ldr	r4, [pc, #56]	; (5e60 <usbdc_set_req+0x70>)
    5e28:	47a0      	blx	r4
    5e2a:	4243      	negs	r3, r0
    5e2c:	4158      	adcs	r0, r3
    5e2e:	b2c0      	uxtb	r0, r0
    5e30:	e7ef      	b.n	5e12 <usbdc_set_req+0x22>
		return usbdc_clear_ftr_req(ep, req);
    5e32:	4b0d      	ldr	r3, [pc, #52]	; (5e68 <usbdc_set_req+0x78>)
    5e34:	4798      	blx	r3
    5e36:	e7ec      	b.n	5e12 <usbdc_set_req+0x22>
		return usbdc_set_ftr_req(ep, req);
    5e38:	4b0c      	ldr	r3, [pc, #48]	; (5e6c <usbdc_set_req+0x7c>)
    5e3a:	4798      	blx	r3
    5e3c:	e7e9      	b.n	5e12 <usbdc_set_req+0x22>
		return usbdc_set_interface(req->wValue, req->wIndex);
    5e3e:	790a      	ldrb	r2, [r1, #4]
    5e40:	794b      	ldrb	r3, [r1, #5]
    5e42:	021b      	lsls	r3, r3, #8
    5e44:	4313      	orrs	r3, r2
    5e46:	788a      	ldrb	r2, [r1, #2]
    5e48:	78c8      	ldrb	r0, [r1, #3]
    5e4a:	0200      	lsls	r0, r0, #8
    5e4c:	4310      	orrs	r0, r2
    5e4e:	0019      	movs	r1, r3
    5e50:	4b07      	ldr	r3, [pc, #28]	; (5e70 <usbdc_set_req+0x80>)
    5e52:	4798      	blx	r3
    5e54:	e7dd      	b.n	5e12 <usbdc_set_req+0x22>
		return false;
    5e56:	2000      	movs	r0, #0
    5e58:	e7db      	b.n	5e12 <usbdc_set_req+0x22>
    5e5a:	46c0      	nop			; (mov r8, r8)
    5e5c:	00011204 	.word	0x00011204
    5e60:	00005c91 	.word	0x00005c91
    5e64:	00005b81 	.word	0x00005b81
    5e68:	00005cad 	.word	0x00005cad
    5e6c:	00005ced 	.word	0x00005ced
    5e70:	00005d2d 	.word	0x00005d2d

00005e74 <usbdc_get_dev_desc>:
{
    5e74:	b570      	push	{r4, r5, r6, lr}
    5e76:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5e78:	798b      	ldrb	r3, [r1, #6]
    5e7a:	79cc      	ldrb	r4, [r1, #7]
    5e7c:	0224      	lsls	r4, r4, #8
    5e7e:	431c      	orrs	r4, r3
	if (length > 0x12) {
    5e80:	2c12      	cmp	r4, #18
    5e82:	d900      	bls.n	5e86 <usbdc_get_dev_desc+0x12>
		length = 0x12;
    5e84:	2412      	movs	r4, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    5e86:	4b0b      	ldr	r3, [pc, #44]	; (5eb4 <usbdc_get_dev_desc+0x40>)
    5e88:	681b      	ldr	r3, [r3, #0]
    5e8a:	6818      	ldr	r0, [r3, #0]
    5e8c:	6859      	ldr	r1, [r3, #4]
    5e8e:	2201      	movs	r2, #1
    5e90:	4b09      	ldr	r3, [pc, #36]	; (5eb8 <usbdc_get_dev_desc+0x44>)
    5e92:	4798      	blx	r3
	if (!dev_desc) {
    5e94:	2800      	cmp	r0, #0
    5e96:	d00b      	beq.n	5eb0 <usbdc_get_dev_desc+0x3c>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    5e98:	2300      	movs	r3, #0
    5e9a:	0022      	movs	r2, r4
    5e9c:	0001      	movs	r1, r0
    5e9e:	0028      	movs	r0, r5
    5ea0:	4c06      	ldr	r4, [pc, #24]	; (5ebc <usbdc_get_dev_desc+0x48>)
    5ea2:	47a0      	blx	r4
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d101      	bne.n	5eac <usbdc_get_dev_desc+0x38>
	return true;
    5ea8:	2001      	movs	r0, #1
}
    5eaa:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5eac:	2000      	movs	r0, #0
    5eae:	e7fc      	b.n	5eaa <usbdc_get_dev_desc+0x36>
		return false;
    5eb0:	2000      	movs	r0, #0
    5eb2:	e7fa      	b.n	5eaa <usbdc_get_dev_desc+0x36>
    5eb4:	2000137c 	.word	0x2000137c
    5eb8:	00006239 	.word	0x00006239
    5ebc:	00005c91 	.word	0x00005c91

00005ec0 <usbdc_get_cfg_desc>:
{
    5ec0:	b570      	push	{r4, r5, r6, lr}
    5ec2:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5ec4:	798b      	ldrb	r3, [r1, #6]
    5ec6:	79ce      	ldrb	r6, [r1, #7]
    5ec8:	0236      	lsls	r6, r6, #8
    5eca:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    5ecc:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5ece:	4b13      	ldr	r3, [pc, #76]	; (5f1c <usbdc_get_cfg_desc+0x5c>)
    5ed0:	7f1c      	ldrb	r4, [r3, #28]
    5ed2:	3c01      	subs	r4, #1
    5ed4:	4034      	ands	r4, r6
    5ed6:	4261      	negs	r1, r4
    5ed8:	414c      	adcs	r4, r1
    5eda:	b2e4      	uxtb	r4, r4
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	6818      	ldr	r0, [r3, #0]
    5ee0:	6859      	ldr	r1, [r3, #4]
    5ee2:	3201      	adds	r2, #1
    5ee4:	b2d2      	uxtb	r2, r2
    5ee6:	4b0e      	ldr	r3, [pc, #56]	; (5f20 <usbdc_get_cfg_desc+0x60>)
    5ee8:	4798      	blx	r3
	if (NULL == cfg_desc) {
    5eea:	2800      	cmp	r0, #0
    5eec:	d013      	beq.n	5f16 <usbdc_get_cfg_desc+0x56>
	return (ptr[0] + (ptr[1] << 8));
    5eee:	7882      	ldrb	r2, [r0, #2]
    5ef0:	78c3      	ldrb	r3, [r0, #3]
    5ef2:	021b      	lsls	r3, r3, #8
    5ef4:	18d2      	adds	r2, r2, r3
    5ef6:	b292      	uxth	r2, r2
	if (length <= total_len) {
    5ef8:	4296      	cmp	r6, r2
    5efa:	d801      	bhi.n	5f00 <usbdc_get_cfg_desc+0x40>
	uint16_t length   = req->wLength;
    5efc:	0032      	movs	r2, r6
		need_zlp = false;
    5efe:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    5f00:	0023      	movs	r3, r4
    5f02:	0001      	movs	r1, r0
    5f04:	0028      	movs	r0, r5
    5f06:	4c07      	ldr	r4, [pc, #28]	; (5f24 <usbdc_get_cfg_desc+0x64>)
    5f08:	47a0      	blx	r4
    5f0a:	2800      	cmp	r0, #0
    5f0c:	d101      	bne.n	5f12 <usbdc_get_cfg_desc+0x52>
	return true;
    5f0e:	2001      	movs	r0, #1
}
    5f10:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5f12:	2000      	movs	r0, #0
    5f14:	e7fc      	b.n	5f10 <usbdc_get_cfg_desc+0x50>
		return false;
    5f16:	2000      	movs	r0, #0
    5f18:	e7fa      	b.n	5f10 <usbdc_get_cfg_desc+0x50>
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	2000137c 	.word	0x2000137c
    5f20:	0000627d 	.word	0x0000627d
    5f24:	00005c91 	.word	0x00005c91

00005f28 <usbdc_get_str_desc>:
{
    5f28:	b570      	push	{r4, r5, r6, lr}
    5f2a:	0005      	movs	r5, r0
	uint16_t length   = req->wLength;
    5f2c:	798b      	ldrb	r3, [r1, #6]
    5f2e:	79ce      	ldrb	r6, [r1, #7]
    5f30:	0236      	lsls	r6, r6, #8
    5f32:	431e      	orrs	r6, r3
	uint8_t  index    = req->wValue & 0x00FF;
    5f34:	788a      	ldrb	r2, [r1, #2]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    5f36:	4b10      	ldr	r3, [pc, #64]	; (5f78 <usbdc_get_str_desc+0x50>)
    5f38:	7f1c      	ldrb	r4, [r3, #28]
    5f3a:	3c01      	subs	r4, #1
    5f3c:	4034      	ands	r4, r6
    5f3e:	4261      	negs	r1, r4
    5f40:	414c      	adcs	r4, r1
    5f42:	b2e4      	uxtb	r4, r4
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    5f44:	681b      	ldr	r3, [r3, #0]
    5f46:	6818      	ldr	r0, [r3, #0]
    5f48:	6859      	ldr	r1, [r3, #4]
    5f4a:	4b0c      	ldr	r3, [pc, #48]	; (5f7c <usbdc_get_str_desc+0x54>)
    5f4c:	4798      	blx	r3
	if (NULL == str_desc) {
    5f4e:	2800      	cmp	r0, #0
    5f50:	d00f      	beq.n	5f72 <usbdc_get_str_desc+0x4a>
	if (length <= str_desc[0]) {
    5f52:	7802      	ldrb	r2, [r0, #0]
    5f54:	4296      	cmp	r6, r2
    5f56:	d801      	bhi.n	5f5c <usbdc_get_str_desc+0x34>
	uint16_t length   = req->wLength;
    5f58:	0032      	movs	r2, r6
		need_zlp = false;
    5f5a:	2400      	movs	r4, #0
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    5f5c:	0023      	movs	r3, r4
    5f5e:	0001      	movs	r1, r0
    5f60:	0028      	movs	r0, r5
    5f62:	4c07      	ldr	r4, [pc, #28]	; (5f80 <usbdc_get_str_desc+0x58>)
    5f64:	47a0      	blx	r4
    5f66:	2800      	cmp	r0, #0
    5f68:	d101      	bne.n	5f6e <usbdc_get_str_desc+0x46>
	return true;
    5f6a:	2001      	movs	r0, #1
}
    5f6c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    5f6e:	2000      	movs	r0, #0
    5f70:	e7fc      	b.n	5f6c <usbdc_get_str_desc+0x44>
		return false;
    5f72:	2000      	movs	r0, #0
    5f74:	e7fa      	b.n	5f6c <usbdc_get_str_desc+0x44>
    5f76:	46c0      	nop			; (mov r8, r8)
    5f78:	2000137c 	.word	0x2000137c
    5f7c:	000062c1 	.word	0x000062c1
    5f80:	00005c91 	.word	0x00005c91

00005f84 <usbdc_get_desc_req>:
{
    5f84:	b510      	push	{r4, lr}
	uint8_t type = (uint8_t)(req->wValue >> 8);
    5f86:	78cb      	ldrb	r3, [r1, #3]
	switch (type) {
    5f88:	2b02      	cmp	r3, #2
    5f8a:	d008      	beq.n	5f9e <usbdc_get_desc_req+0x1a>
    5f8c:	2b03      	cmp	r3, #3
    5f8e:	d009      	beq.n	5fa4 <usbdc_get_desc_req+0x20>
    5f90:	2b01      	cmp	r3, #1
    5f92:	d001      	beq.n	5f98 <usbdc_get_desc_req+0x14>
	return false;
    5f94:	2000      	movs	r0, #0
    5f96:	e001      	b.n	5f9c <usbdc_get_desc_req+0x18>
		return usbdc_get_dev_desc(ep, req);
    5f98:	4b04      	ldr	r3, [pc, #16]	; (5fac <usbdc_get_desc_req+0x28>)
    5f9a:	4798      	blx	r3
}
    5f9c:	bd10      	pop	{r4, pc}
		return usbdc_get_cfg_desc(ep, req);
    5f9e:	4b04      	ldr	r3, [pc, #16]	; (5fb0 <usbdc_get_desc_req+0x2c>)
    5fa0:	4798      	blx	r3
    5fa2:	e7fb      	b.n	5f9c <usbdc_get_desc_req+0x18>
		return usbdc_get_str_desc(ep, req);
    5fa4:	4b03      	ldr	r3, [pc, #12]	; (5fb4 <usbdc_get_desc_req+0x30>)
    5fa6:	4798      	blx	r3
    5fa8:	e7f8      	b.n	5f9c <usbdc_get_desc_req+0x18>
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	00005e75 	.word	0x00005e75
    5fb0:	00005ec1 	.word	0x00005ec1
    5fb4:	00005f29 	.word	0x00005f29

00005fb8 <usbdc_get_status_req>:
{
    5fb8:	b530      	push	{r4, r5, lr}
    5fba:	b083      	sub	sp, #12
    5fbc:	0004      	movs	r4, r0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    5fbe:	780a      	ldrb	r2, [r1, #0]
    5fc0:	231f      	movs	r3, #31
    5fc2:	4013      	ands	r3, r2
    5fc4:	b2da      	uxtb	r2, r3
    5fc6:	2a01      	cmp	r2, #1
    5fc8:	d903      	bls.n	5fd2 <usbdc_get_status_req+0x1a>
    5fca:	2b02      	cmp	r3, #2
    5fcc:	d012      	beq.n	5ff4 <usbdc_get_status_req+0x3c>
		return false;
    5fce:	2000      	movs	r0, #0
    5fd0:	e00e      	b.n	5ff0 <usbdc_get_status_req+0x38>
		st = 0;
    5fd2:	2300      	movs	r3, #0
    5fd4:	9301      	str	r3, [sp, #4]
	memcpy(usbdc.ctrl_buf, &st, 2);
    5fd6:	4d0d      	ldr	r5, [pc, #52]	; (600c <usbdc_get_status_req+0x54>)
    5fd8:	2202      	movs	r2, #2
    5fda:	a901      	add	r1, sp, #4
    5fdc:	6968      	ldr	r0, [r5, #20]
    5fde:	4b0c      	ldr	r3, [pc, #48]	; (6010 <usbdc_get_status_req+0x58>)
    5fe0:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    5fe2:	6969      	ldr	r1, [r5, #20]
    5fe4:	2300      	movs	r3, #0
    5fe6:	2202      	movs	r2, #2
    5fe8:	0020      	movs	r0, r4
    5fea:	4c0a      	ldr	r4, [pc, #40]	; (6014 <usbdc_get_status_req+0x5c>)
    5fec:	47a0      	blx	r4
	return true;
    5fee:	2001      	movs	r0, #1
}
    5ff0:	b003      	add	sp, #12
    5ff2:	bd30      	pop	{r4, r5, pc}
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    5ff4:	7908      	ldrb	r0, [r1, #4]
    5ff6:	2102      	movs	r1, #2
    5ff8:	4b07      	ldr	r3, [pc, #28]	; (6018 <usbdc_get_status_req+0x60>)
    5ffa:	4798      	blx	r3
		if (st < 0) {
    5ffc:	2800      	cmp	r0, #0
    5ffe:	db03      	blt.n	6008 <usbdc_get_status_req+0x50>
		st = st & 0x1;
    6000:	2301      	movs	r3, #1
    6002:	4018      	ands	r0, r3
    6004:	9001      	str	r0, [sp, #4]
		break;
    6006:	e7e6      	b.n	5fd6 <usbdc_get_status_req+0x1e>
			return false;
    6008:	2000      	movs	r0, #0
    600a:	e7f1      	b.n	5ff0 <usbdc_get_status_req+0x38>
    600c:	2000137c 	.word	0x2000137c
    6010:	0000c059 	.word	0x0000c059
    6014:	00005c91 	.word	0x00005c91
    6018:	00003309 	.word	0x00003309

0000601c <usbdc_get_interface>:
{
    601c:	b570      	push	{r4, r5, r6, lr}
    601e:	0005      	movs	r5, r0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    6020:	4b16      	ldr	r3, [pc, #88]	; (607c <usbdc_get_interface+0x60>)
    6022:	691c      	ldr	r4, [r3, #16]
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    6024:	7f5a      	ldrb	r2, [r3, #29]
    6026:	7901      	ldrb	r1, [r0, #4]
    6028:	7943      	ldrb	r3, [r0, #5]
    602a:	021b      	lsls	r3, r3, #8
    602c:	430b      	orrs	r3, r1
    602e:	411a      	asrs	r2, r3
    6030:	07d3      	lsls	r3, r2, #31
    6032:	d50a      	bpl.n	604a <usbdc_get_interface+0x2e>
	while (NULL != func) {
    6034:	2c00      	cmp	r4, #0
    6036:	d01f      	beq.n	6078 <usbdc_get_interface+0x5c>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    6038:	002a      	movs	r2, r5
    603a:	2102      	movs	r1, #2
    603c:	0020      	movs	r0, r4
    603e:	6863      	ldr	r3, [r4, #4]
    6040:	4798      	blx	r3
    6042:	2800      	cmp	r0, #0
    6044:	da0d      	bge.n	6062 <usbdc_get_interface+0x46>
			func = func->next;
    6046:	6824      	ldr	r4, [r4, #0]
    6048:	e7f4      	b.n	6034 <usbdc_get_interface+0x18>
		usbdc.ctrl_buf[0] = 0;
    604a:	4b0c      	ldr	r3, [pc, #48]	; (607c <usbdc_get_interface+0x60>)
    604c:	2200      	movs	r2, #0
    604e:	6959      	ldr	r1, [r3, #20]
    6050:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    6052:	6959      	ldr	r1, [r3, #20]
    6054:	2300      	movs	r3, #0
    6056:	3201      	adds	r2, #1
    6058:	2000      	movs	r0, #0
    605a:	4c09      	ldr	r4, [pc, #36]	; (6080 <usbdc_get_interface+0x64>)
    605c:	47a0      	blx	r4
		return true;
    605e:	2001      	movs	r0, #1
    6060:	e00b      	b.n	607a <usbdc_get_interface+0x5e>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    6062:	4b06      	ldr	r3, [pc, #24]	; (607c <usbdc_get_interface+0x60>)
    6064:	695a      	ldr	r2, [r3, #20]
    6066:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    6068:	6959      	ldr	r1, [r3, #20]
    606a:	2300      	movs	r3, #0
    606c:	2201      	movs	r2, #1
    606e:	2000      	movs	r0, #0
    6070:	4c03      	ldr	r4, [pc, #12]	; (6080 <usbdc_get_interface+0x64>)
    6072:	47a0      	blx	r4
			return true;
    6074:	2001      	movs	r0, #1
    6076:	e000      	b.n	607a <usbdc_get_interface+0x5e>
	return false;
    6078:	2000      	movs	r0, #0
}
    607a:	bd70      	pop	{r4, r5, r6, pc}
    607c:	2000137c 	.word	0x2000137c
    6080:	00005c91 	.word	0x00005c91

00006084 <usbdc_get_req>:
{
    6084:	b510      	push	{r4, lr}
	switch (req->bRequest) {
    6086:	784b      	ldrb	r3, [r1, #1]
    6088:	2b06      	cmp	r3, #6
    608a:	d00d      	beq.n	60a8 <usbdc_get_req+0x24>
    608c:	d907      	bls.n	609e <usbdc_get_req+0x1a>
    608e:	2b08      	cmp	r3, #8
    6090:	d00d      	beq.n	60ae <usbdc_get_req+0x2a>
    6092:	2b0a      	cmp	r3, #10
    6094:	d116      	bne.n	60c4 <usbdc_get_req+0x40>
		return usbdc_get_interface(req);
    6096:	0008      	movs	r0, r1
    6098:	4b0b      	ldr	r3, [pc, #44]	; (60c8 <usbdc_get_req+0x44>)
    609a:	4798      	blx	r3
    609c:	e006      	b.n	60ac <usbdc_get_req+0x28>
	switch (req->bRequest) {
    609e:	2b00      	cmp	r3, #0
    60a0:	d110      	bne.n	60c4 <usbdc_get_req+0x40>
		return usbdc_get_status_req(ep, req);
    60a2:	4b0a      	ldr	r3, [pc, #40]	; (60cc <usbdc_get_req+0x48>)
    60a4:	4798      	blx	r3
    60a6:	e001      	b.n	60ac <usbdc_get_req+0x28>
		return usbdc_get_desc_req(ep, req);
    60a8:	4b09      	ldr	r3, [pc, #36]	; (60d0 <usbdc_get_req+0x4c>)
    60aa:	4798      	blx	r3
}
    60ac:	bd10      	pop	{r4, pc}
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    60ae:	4b09      	ldr	r3, [pc, #36]	; (60d4 <usbdc_get_req+0x50>)
    60b0:	7eda      	ldrb	r2, [r3, #27]
    60b2:	6959      	ldr	r1, [r3, #20]
    60b4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    60b6:	6959      	ldr	r1, [r3, #20]
    60b8:	2300      	movs	r3, #0
    60ba:	2201      	movs	r2, #1
    60bc:	4c06      	ldr	r4, [pc, #24]	; (60d8 <usbdc_get_req+0x54>)
    60be:	47a0      	blx	r4
		return true;
    60c0:	2001      	movs	r0, #1
    60c2:	e7f3      	b.n	60ac <usbdc_get_req+0x28>
		return false;
    60c4:	2000      	movs	r0, #0
    60c6:	e7f1      	b.n	60ac <usbdc_get_req+0x28>
    60c8:	0000601d 	.word	0x0000601d
    60cc:	00005fb9 	.word	0x00005fb9
    60d0:	00005f85 	.word	0x00005f85
    60d4:	2000137c 	.word	0x2000137c
    60d8:	00005c91 	.word	0x00005c91

000060dc <usbdc_cb_ctl_req>:
{
    60dc:	b570      	push	{r4, r5, r6, lr}
    60de:	0005      	movs	r5, r0
    60e0:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    60e2:	2200      	movs	r2, #0
    60e4:	4b0d      	ldr	r3, [pc, #52]	; (611c <usbdc_cb_ctl_req+0x40>)
    60e6:	4798      	blx	r3
    60e8:	1c43      	adds	r3, r0, #1
    60ea:	d014      	beq.n	6116 <usbdc_cb_ctl_req+0x3a>
    60ec:	2801      	cmp	r0, #1
    60ee:	d013      	beq.n	6118 <usbdc_cb_ctl_req+0x3c>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    60f0:	7823      	ldrb	r3, [r4, #0]
    60f2:	221f      	movs	r2, #31
    60f4:	4393      	bics	r3, r2
    60f6:	d004      	beq.n	6102 <usbdc_cb_ctl_req+0x26>
    60f8:	b2db      	uxtb	r3, r3
    60fa:	2b80      	cmp	r3, #128	; 0x80
    60fc:	d006      	beq.n	610c <usbdc_cb_ctl_req+0x30>
		return false;
    60fe:	2000      	movs	r0, #0
    6100:	e00a      	b.n	6118 <usbdc_cb_ctl_req+0x3c>
		return usbdc_set_req(ep, req);
    6102:	0021      	movs	r1, r4
    6104:	0028      	movs	r0, r5
    6106:	4b06      	ldr	r3, [pc, #24]	; (6120 <usbdc_cb_ctl_req+0x44>)
    6108:	4798      	blx	r3
    610a:	e005      	b.n	6118 <usbdc_cb_ctl_req+0x3c>
		return usbdc_get_req(ep, req);
    610c:	0021      	movs	r1, r4
    610e:	0028      	movs	r0, r5
    6110:	4b04      	ldr	r3, [pc, #16]	; (6124 <usbdc_cb_ctl_req+0x48>)
    6112:	4798      	blx	r3
    6114:	e000      	b.n	6118 <usbdc_cb_ctl_req+0x3c>
		return false;
    6116:	2000      	movs	r0, #0
}
    6118:	bd70      	pop	{r4, r5, r6, pc}
    611a:	46c0      	nop			; (mov r8, r8)
    611c:	00005a8d 	.word	0x00005a8d
    6120:	00005df1 	.word	0x00005df1
    6124:	00006085 	.word	0x00006085

00006128 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    6128:	b510      	push	{r4, lr}
	switch (type) {
    612a:	2801      	cmp	r0, #1
    612c:	d009      	beq.n	6142 <usbdc_register_handler+0x1a>
    612e:	2800      	cmp	r0, #0
    6130:	d002      	beq.n	6138 <usbdc_register_handler+0x10>
    6132:	2802      	cmp	r0, #2
    6134:	d00a      	beq.n	614c <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    6136:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    6138:	4807      	ldr	r0, [pc, #28]	; (6158 <usbdc_register_handler+0x30>)
    613a:	3004      	adds	r0, #4
    613c:	4b07      	ldr	r3, [pc, #28]	; (615c <usbdc_register_handler+0x34>)
    613e:	4798      	blx	r3
		break;
    6140:	e7f9      	b.n	6136 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    6142:	4805      	ldr	r0, [pc, #20]	; (6158 <usbdc_register_handler+0x30>)
    6144:	3008      	adds	r0, #8
    6146:	4b05      	ldr	r3, [pc, #20]	; (615c <usbdc_register_handler+0x34>)
    6148:	4798      	blx	r3
		break;
    614a:	e7f4      	b.n	6136 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    614c:	4802      	ldr	r0, [pc, #8]	; (6158 <usbdc_register_handler+0x30>)
    614e:	300c      	adds	r0, #12
    6150:	4b02      	ldr	r3, [pc, #8]	; (615c <usbdc_register_handler+0x34>)
    6152:	4798      	blx	r3
}
    6154:	e7ef      	b.n	6136 <usbdc_register_handler+0xe>
    6156:	46c0      	nop			; (mov r8, r8)
    6158:	2000137c 	.word	0x2000137c
    615c:	00003415 	.word	0x00003415

00006160 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    6160:	b570      	push	{r4, r5, r6, lr}
    6162:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    6164:	1e43      	subs	r3, r0, #1
    6166:	4198      	sbcs	r0, r3
    6168:	b2c0      	uxtb	r0, r0
    616a:	4a0c      	ldr	r2, [pc, #48]	; (619c <usbdc_init+0x3c>)
    616c:	490c      	ldr	r1, [pc, #48]	; (61a0 <usbdc_init+0x40>)
    616e:	4b0d      	ldr	r3, [pc, #52]	; (61a4 <usbdc_init+0x44>)
    6170:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    6172:	4b0d      	ldr	r3, [pc, #52]	; (61a8 <usbdc_init+0x48>)
    6174:	4798      	blx	r3
	if (rc < 0) {
    6176:	2800      	cmp	r0, #0
    6178:	db0e      	blt.n	6198 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    617a:	4d0c      	ldr	r5, [pc, #48]	; (61ac <usbdc_init+0x4c>)
    617c:	2220      	movs	r2, #32
    617e:	2100      	movs	r1, #0
    6180:	0028      	movs	r0, r5
    6182:	4b0b      	ldr	r3, [pc, #44]	; (61b0 <usbdc_init+0x50>)
    6184:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    6186:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    6188:	490a      	ldr	r1, [pc, #40]	; (61b4 <usbdc_init+0x54>)
    618a:	2000      	movs	r0, #0
    618c:	4c0a      	ldr	r4, [pc, #40]	; (61b8 <usbdc_init+0x58>)
    618e:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    6190:	490a      	ldr	r1, [pc, #40]	; (61bc <usbdc_init+0x5c>)
    6192:	2001      	movs	r0, #1
    6194:	47a0      	blx	r4

	return 0;
    6196:	2000      	movs	r0, #0
}
    6198:	bd70      	pop	{r4, r5, r6, pc}
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	00000355 	.word	0x00000355
    61a0:	00011234 	.word	0x00011234
    61a4:	000033c1 	.word	0x000033c1
    61a8:	00003035 	.word	0x00003035
    61ac:	2000137c 	.word	0x2000137c
    61b0:	0000c0dd 	.word	0x0000c0dd
    61b4:	00005ac9 	.word	0x00005ac9
    61b8:	000030a1 	.word	0x000030a1
    61bc:	00005c6d 	.word	0x00005c6d

000061c0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    61c0:	b510      	push	{r4, lr}
    61c2:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    61c4:	4802      	ldr	r0, [pc, #8]	; (61d0 <usbdc_register_function+0x10>)
    61c6:	3010      	adds	r0, #16
    61c8:	4b02      	ldr	r3, [pc, #8]	; (61d4 <usbdc_register_function+0x14>)
    61ca:	4798      	blx	r3
}
    61cc:	bd10      	pop	{r4, pc}
    61ce:	46c0      	nop			; (mov r8, r8)
    61d0:	2000137c 	.word	0x2000137c
    61d4:	00003415 	.word	0x00003415

000061d8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    61d8:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    61da:	4b0b      	ldr	r3, [pc, #44]	; (6208 <usbdc_start+0x30>)
    61dc:	7e9b      	ldrb	r3, [r3, #26]
    61de:	2b00      	cmp	r3, #0
    61e0:	d10c      	bne.n	61fc <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    61e2:	2800      	cmp	r0, #0
    61e4:	d00d      	beq.n	6202 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    61e6:	4b08      	ldr	r3, [pc, #32]	; (6208 <usbdc_start+0x30>)
    61e8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    61ea:	6802      	ldr	r2, [r0, #0]
    61ec:	79d2      	ldrb	r2, [r2, #7]
    61ee:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    61f0:	2201      	movs	r2, #1
    61f2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    61f4:	4b05      	ldr	r3, [pc, #20]	; (620c <usbdc_start+0x34>)
    61f6:	4798      	blx	r3
	return ERR_NONE;
    61f8:	2000      	movs	r0, #0
}
    61fa:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    61fc:	2004      	movs	r0, #4
    61fe:	4240      	negs	r0, r0
    6200:	e7fb      	b.n	61fa <usbdc_start+0x22>
		return ERR_BAD_DATA;
    6202:	2009      	movs	r0, #9
    6204:	4240      	negs	r0, r0
    6206:	e7f8      	b.n	61fa <usbdc_start+0x22>
    6208:	2000137c 	.word	0x2000137c
    620c:	000030ad 	.word	0x000030ad

00006210 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    6210:	b510      	push	{r4, lr}
	usb_d_attach();
    6212:	4b01      	ldr	r3, [pc, #4]	; (6218 <usbdc_attach+0x8>)
    6214:	4798      	blx	r3
}
    6216:	bd10      	pop	{r4, pc}
    6218:	000030b9 	.word	0x000030b9

0000621c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    621c:	4b01      	ldr	r3, [pc, #4]	; (6224 <usbdc_get_ctrl_buffer+0x8>)
    621e:	6958      	ldr	r0, [r3, #20]
}
    6220:	4770      	bx	lr
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	2000137c 	.word	0x2000137c

00006228 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    6228:	4b02      	ldr	r3, [pc, #8]	; (6234 <usbdc_get_state+0xc>)
    622a:	7e98      	ldrb	r0, [r3, #26]
    622c:	06c3      	lsls	r3, r0, #27
    622e:	d500      	bpl.n	6232 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    6230:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    6232:	4770      	bx	lr
    6234:	2000137c 	.word	0x2000137c

00006238 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    6238:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    623a:	4288      	cmp	r0, r1
    623c:	d207      	bcs.n	624e <usb_find_desc+0x16>
	return desc[0];
    623e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6240:	2b01      	cmp	r3, #1
    6242:	d906      	bls.n	6252 <usb_find_desc+0x1a>
	return desc[1];
    6244:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    6246:	4294      	cmp	r4, r2
    6248:	d002      	beq.n	6250 <usb_find_desc+0x18>
	return (desc + usb_desc_len(desc));
    624a:	18c0      	adds	r0, r0, r3
    624c:	e7f5      	b.n	623a <usb_find_desc+0x2>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    624e:	2000      	movs	r0, #0
}
    6250:	bd10      	pop	{r4, pc}
		_desc_len_check();
    6252:	2000      	movs	r0, #0
    6254:	e7fc      	b.n	6250 <usb_find_desc+0x18>

00006256 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    6256:	4288      	cmp	r0, r1
    6258:	d209      	bcs.n	626e <usb_find_ep_desc+0x18>
	return desc[0];
    625a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    625c:	2b01      	cmp	r3, #1
    625e:	d908      	bls.n	6272 <usb_find_ep_desc+0x1c>
	return desc[1];
    6260:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    6262:	2a04      	cmp	r2, #4
    6264:	d007      	beq.n	6276 <usb_find_ep_desc+0x20>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6266:	2a05      	cmp	r2, #5
    6268:	d002      	beq.n	6270 <usb_find_ep_desc+0x1a>
	return (desc + usb_desc_len(desc));
    626a:	18c0      	adds	r0, r0, r3
    626c:	e7f3      	b.n	6256 <usb_find_ep_desc>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    626e:	2000      	movs	r0, #0
}
    6270:	4770      	bx	lr
		_desc_len_check();
    6272:	2000      	movs	r0, #0
    6274:	e7fc      	b.n	6270 <usb_find_ep_desc+0x1a>
	return NULL;
    6276:	2000      	movs	r0, #0
    6278:	e7fa      	b.n	6270 <usb_find_ep_desc+0x1a>
	...

0000627c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    627c:	b570      	push	{r4, r5, r6, lr}
    627e:	000c      	movs	r4, r1
    6280:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    6282:	2202      	movs	r2, #2
    6284:	4b0d      	ldr	r3, [pc, #52]	; (62bc <usb_find_cfg_desc+0x40>)
    6286:	4798      	blx	r3
	if (!desc) {
    6288:	2800      	cmp	r0, #0
    628a:	d012      	beq.n	62b2 <usb_find_cfg_desc+0x36>
		return NULL;
	}
	while (desc < eof) {
    628c:	42a0      	cmp	r0, r4
    628e:	d20f      	bcs.n	62b0 <usb_find_cfg_desc+0x34>
	return desc[0];
    6290:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6292:	2b01      	cmp	r3, #1
    6294:	d90e      	bls.n	62b4 <usb_find_cfg_desc+0x38>
		if (desc[1] != USB_DT_CONFIG) {
    6296:	7843      	ldrb	r3, [r0, #1]
    6298:	2b02      	cmp	r3, #2
    629a:	d10d      	bne.n	62b8 <usb_find_cfg_desc+0x3c>
			break;
		}
		if (desc[5] == cfg_value) {
    629c:	7943      	ldrb	r3, [r0, #5]
    629e:	42ab      	cmp	r3, r5
    62a0:	d007      	beq.n	62b2 <usb_find_cfg_desc+0x36>
	return (ptr[0] + (ptr[1] << 8));
    62a2:	7883      	ldrb	r3, [r0, #2]
    62a4:	78c2      	ldrb	r2, [r0, #3]
    62a6:	0212      	lsls	r2, r2, #8
    62a8:	189b      	adds	r3, r3, r2
    62aa:	b29b      	uxth	r3, r3
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    62ac:	18c0      	adds	r0, r0, r3
    62ae:	e7ed      	b.n	628c <usb_find_cfg_desc+0x10>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    62b0:	2000      	movs	r0, #0
}
    62b2:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    62b4:	2000      	movs	r0, #0
    62b6:	e7fc      	b.n	62b2 <usb_find_cfg_desc+0x36>
	return NULL;
    62b8:	2000      	movs	r0, #0
    62ba:	e7fa      	b.n	62b2 <usb_find_cfg_desc+0x36>
    62bc:	00006239 	.word	0x00006239

000062c0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    62c0:	b570      	push	{r4, r5, r6, lr}
    62c2:	000d      	movs	r5, r1
    62c4:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    62c6:	2400      	movs	r4, #0
    62c8:	42a8      	cmp	r0, r5
    62ca:	d20e      	bcs.n	62ea <usb_find_str_desc+0x2a>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    62cc:	2203      	movs	r2, #3
    62ce:	0029      	movs	r1, r5
    62d0:	4b08      	ldr	r3, [pc, #32]	; (62f4 <usb_find_str_desc+0x34>)
    62d2:	4798      	blx	r3
		if (desc) {
    62d4:	2800      	cmp	r0, #0
    62d6:	d009      	beq.n	62ec <usb_find_str_desc+0x2c>
	return desc[0];
    62d8:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    62da:	2b01      	cmp	r3, #1
    62dc:	d907      	bls.n	62ee <usb_find_str_desc+0x2e>
			if (i == str_index) {
    62de:	42b4      	cmp	r4, r6
    62e0:	d004      	beq.n	62ec <usb_find_str_desc+0x2c>
				return desc;
			}
			i++;
    62e2:	3401      	adds	r4, #1
    62e4:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    62e6:	18c0      	adds	r0, r0, r3
    62e8:	e7ee      	b.n	62c8 <usb_find_str_desc+0x8>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    62ea:	2000      	movs	r0, #0
}
    62ec:	bd70      	pop	{r4, r5, r6, pc}
			_desc_len_check();
    62ee:	2000      	movs	r0, #0
    62f0:	e7fc      	b.n	62ec <usb_find_str_desc+0x2c>
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	00006239 	.word	0x00006239

000062f8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    62f8:	2000      	movs	r0, #0
    62fa:	4770      	bx	lr

000062fc <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    62fc:	4770      	bx	lr
	...

00006300 <_ZL10USBTimeoutPK10timer_task>:
//#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
	ptrCDCClass->timeout=true;
    6300:	4b03      	ldr	r3, [pc, #12]	; (6310 <_ZL10USBTimeoutPK10timer_task+0x10>)
    6302:	681b      	ldr	r3, [r3, #0]
    6304:	2201      	movs	r2, #1
    6306:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    6308:	2200      	movs	r2, #0
    630a:	741a      	strb	r2, [r3, #16]
	
}
    630c:	4770      	bx	lr
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	2000139c 	.word	0x2000139c

00006314 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
    6314:	4b03      	ldr	r3, [pc, #12]	; (6324 <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	2201      	movs	r2, #1
    631a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    631c:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    631e:	741a      	strb	r2, [r3, #16]


	return false;
}
    6320:	2000      	movs	r0, #0
    6322:	4770      	bx	lr
    6324:	2000139c 	.word	0x2000139c

00006328 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    6328:	4b03      	ldr	r3, [pc, #12]	; (6338 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
    632a:	681b      	ldr	r3, [r3, #0]
    632c:	2201      	movs	r2, #1
    632e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    6330:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    6332:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
    6334:	2000      	movs	r0, #0
    6336:	4770      	bx	lr
    6338:	2000139c 	.word	0x2000139c

0000633c <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
    633c:	b530      	push	{r4, r5, lr}
    633e:	b083      	sub	sp, #12
    6340:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
    6342:	6983      	ldr	r3, [r0, #24]
    6344:	3301      	adds	r3, #1
    6346:	d002      	beq.n	634e <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
    6348:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
    634a:	b003      	add	sp, #12
    634c:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
    634e:	6803      	ldr	r3, [r0, #0]
    6350:	69db      	ldr	r3, [r3, #28]
    6352:	466a      	mov	r2, sp
    6354:	1dd5      	adds	r5, r2, #7
    6356:	2201      	movs	r2, #1
    6358:	0029      	movs	r1, r5
    635a:	4798      	blx	r3
    635c:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
    635e:	782b      	ldrb	r3, [r5, #0]
    6360:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
    6362:	69a0      	ldr	r0, [r4, #24]
    6364:	e7f1      	b.n	634a <_ZN9CDC_Class4peekEv+0xe>

00006366 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
    6366:	b500      	push	{lr}
    6368:	b083      	sub	sp, #12
    636a:	466b      	mov	r3, sp
    636c:	71d9      	strb	r1, [r3, #7]
	if (connected){
    636e:	7c03      	ldrb	r3, [r0, #16]
    6370:	2b00      	cmp	r3, #0
    6372:	d00a      	beq.n	638a <_ZN9CDC_Class5writeEh+0x24>
		while(!txReady);
    6374:	7d03      	ldrb	r3, [r0, #20]
    6376:	2b00      	cmp	r3, #0
    6378:	d0fc      	beq.n	6374 <_ZN9CDC_Class5writeEh+0xe>
		return writeData(&c, 1);
    637a:	6803      	ldr	r3, [r0, #0]
    637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    637e:	2201      	movs	r2, #1
    6380:	4669      	mov	r1, sp
    6382:	3107      	adds	r1, #7
    6384:	4798      	blx	r3
	}else{
		return 0;
	}
		
}
    6386:	b003      	add	sp, #12
    6388:	bd00      	pop	{pc}
		return 0;
    638a:	2000      	movs	r0, #0
    638c:	e7fb      	b.n	6386 <_ZN9CDC_Class5writeEh+0x20>

0000638e <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
    638e:	7d43      	ldrb	r3, [r0, #21]
    6390:	2b00      	cmp	r3, #0
    6392:	d002      	beq.n	639a <_ZN9CDC_Class9availableEv+0xc>
    6394:	7d00      	ldrb	r0, [r0, #20]
    6396:	b2c0      	uxtb	r0, r0
	{
		
	return false;
	}
	
}
    6398:	4770      	bx	lr
	if (rxReady && txReady)
    639a:	2000      	movs	r0, #0
    639c:	e7fc      	b.n	6398 <_ZN9CDC_Class9availableEv+0xa>
	...

000063a0 <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
    63a0:	b510      	push	{r4, lr}
    63a2:	0004      	movs	r4, r0
    63a4:	4b03      	ldr	r3, [pc, #12]	; (63b4 <_ZN9CDC_ClassD1Ev+0x14>)
    63a6:	3308      	adds	r3, #8
    63a8:	6003      	str	r3, [r0, #0]
    63aa:	3010      	adds	r0, #16
    63ac:	4b02      	ldr	r3, [pc, #8]	; (63b8 <_ZN9CDC_ClassD1Ev+0x18>)
    63ae:	4798      	blx	r3
} //~CDC_Class
    63b0:	0020      	movs	r0, r4
    63b2:	bd10      	pop	{r4, pc}
    63b4:	00011270 	.word	0x00011270
    63b8:	00006a59 	.word	0x00006a59

000063bc <_ZL10cb_state_c22usb_cdc_control_signal>:
{
    63bc:	b510      	push	{r4, lr}
    63be:	b082      	sub	sp, #8
    63c0:	1c03      	adds	r3, r0, #0
    63c2:	aa01      	add	r2, sp, #4
    63c4:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    63c6:	07db      	lsls	r3, r3, #31
    63c8:	d402      	bmi.n	63d0 <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
    63ca:	2000      	movs	r0, #0
    63cc:	b002      	add	sp, #8
    63ce:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    63d0:	4906      	ldr	r1, [pc, #24]	; (63ec <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
    63d2:	2000      	movs	r0, #0
    63d4:	4c06      	ldr	r4, [pc, #24]	; (63f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
    63d6:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    63d8:	4906      	ldr	r1, [pc, #24]	; (63f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
    63da:	2001      	movs	r0, #1
    63dc:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
    63de:	4b06      	ldr	r3, [pc, #24]	; (63f8 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
    63e0:	681b      	ldr	r3, [r3, #0]
    63e2:	2201      	movs	r2, #1
    63e4:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    63e6:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    63e8:	741a      	strb	r2, [r3, #16]
    63ea:	e7ee      	b.n	63ca <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
    63ec:	00006315 	.word	0x00006315
    63f0:	00005969 	.word	0x00005969
    63f4:	00006329 	.word	0x00006329
    63f8:	2000139c 	.word	0x2000139c

000063fc <_ZN9CDC_Class4readEv>:
{
    63fc:	b510      	push	{r4, lr}
    63fe:	b082      	sub	sp, #8
    6400:	0004      	movs	r4, r0
	rxReady=false;
    6402:	2300      	movs	r3, #0
    6404:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
    6406:	2101      	movs	r1, #1
    6408:	466b      	mov	r3, sp
    640a:	1dd8      	adds	r0, r3, #7
    640c:	4b04      	ldr	r3, [pc, #16]	; (6420 <_ZN9CDC_Class4readEv+0x24>)
    640e:	4798      	blx	r3
	while(!rxReady);
    6410:	7d63      	ldrb	r3, [r4, #21]
    6412:	2b00      	cmp	r3, #0
    6414:	d0fc      	beq.n	6410 <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
    6416:	466b      	mov	r3, sp
    6418:	79d8      	ldrb	r0, [r3, #7]
}
    641a:	b002      	add	sp, #8
    641c:	bd10      	pop	{r4, pc}
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	000059c5 	.word	0x000059c5

00006424 <_ZN9CDC_Class8readDataEPvl>:
{
    6424:	b570      	push	{r4, r5, r6, lr}
    6426:	0004      	movs	r4, r0
    6428:	000e      	movs	r6, r1
    642a:	0015      	movs	r5, r2
	if (connected)
    642c:	7c03      	ldrb	r3, [r0, #16]
    642e:	2b00      	cmp	r3, #0
    6430:	d102      	bne.n	6438 <_ZN9CDC_Class8readDataEPvl+0x14>
		r=0;
    6432:	2500      	movs	r5, #0
}
    6434:	0028      	movs	r0, r5
    6436:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    6438:	0093      	lsls	r3, r2, #2
    643a:	189b      	adds	r3, r3, r2
    643c:	005a      	lsls	r2, r3, #1
    643e:	490f      	ldr	r1, [pc, #60]	; (647c <_ZN9CDC_Class8readDataEPvl+0x58>)
    6440:	480f      	ldr	r0, [pc, #60]	; (6480 <_ZN9CDC_Class8readDataEPvl+0x5c>)
    6442:	4b10      	ldr	r3, [pc, #64]	; (6484 <_ZN9CDC_Class8readDataEPvl+0x60>)
    6444:	4798      	blx	r3
		rxReady=false;
    6446:	2300      	movs	r3, #0
    6448:	7563      	strb	r3, [r4, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    644a:	0029      	movs	r1, r5
    644c:	0030      	movs	r0, r6
    644e:	4b0e      	ldr	r3, [pc, #56]	; (6488 <_ZN9CDC_Class8readDataEPvl+0x64>)
    6450:	4798      	blx	r3
    6452:	b2c5      	uxtb	r5, r0
    6454:	e002      	b.n	645c <_ZN9CDC_Class8readDataEPvl+0x38>
		while((!rxReady)&&(connected));
    6456:	2300      	movs	r3, #0
    6458:	2b00      	cmp	r3, #0
    645a:	d005      	beq.n	6468 <_ZN9CDC_Class8readDataEPvl+0x44>
    645c:	7d63      	ldrb	r3, [r4, #21]
    645e:	2b00      	cmp	r3, #0
    6460:	d1f9      	bne.n	6456 <_ZN9CDC_Class8readDataEPvl+0x32>
    6462:	7c23      	ldrb	r3, [r4, #16]
    6464:	b2db      	uxtb	r3, r3
    6466:	e7f7      	b.n	6458 <_ZN9CDC_Class8readDataEPvl+0x34>
		usbTerminalTimer.Stop();
    6468:	4c05      	ldr	r4, [pc, #20]	; (6480 <_ZN9CDC_Class8readDataEPvl+0x5c>)
    646a:	0020      	movs	r0, r4
    646c:	4b07      	ldr	r3, [pc, #28]	; (648c <_ZN9CDC_Class8readDataEPvl+0x68>)
    646e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    6470:	4902      	ldr	r1, [pc, #8]	; (647c <_ZN9CDC_Class8readDataEPvl+0x58>)
    6472:	0020      	movs	r0, r4
    6474:	4b06      	ldr	r3, [pc, #24]	; (6490 <_ZN9CDC_Class8readDataEPvl+0x6c>)
    6476:	4798      	blx	r3
    6478:	e7dc      	b.n	6434 <_ZN9CDC_Class8readDataEPvl+0x10>
    647a:	46c0      	nop			; (mov r8, r8)
    647c:	00006301 	.word	0x00006301
    6480:	20001408 	.word	0x20001408
    6484:	00006c35 	.word	0x00006c35
    6488:	000059c5 	.word	0x000059c5
    648c:	00006ba5 	.word	0x00006ba5
    6490:	00006c7d 	.word	0x00006c7d

00006494 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
    6494:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    6496:	301c      	adds	r0, #28
    6498:	2140      	movs	r1, #64	; 0x40
    649a:	4b01      	ldr	r3, [pc, #4]	; (64a0 <_ZN9CDC_Class5flushEv+0xc>)
    649c:	4798      	blx	r3
}
    649e:	bd10      	pop	{r4, pc}
    64a0:	000059f5 	.word	0x000059f5

000064a4 <_ZN9CDC_Class9writeDataEPKvl>:
{
    64a4:	b570      	push	{r4, r5, r6, lr}
    64a6:	0004      	movs	r4, r0
    64a8:	000e      	movs	r6, r1
    64aa:	0015      	movs	r5, r2
	if (connected)
    64ac:	7c03      	ldrb	r3, [r0, #16]
    64ae:	2b00      	cmp	r3, #0
    64b0:	d102      	bne.n	64b8 <_ZN9CDC_Class9writeDataEPKvl+0x14>
		return 0;
    64b2:	2500      	movs	r5, #0
}
    64b4:	0028      	movs	r0, r5
    64b6:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    64b8:	0093      	lsls	r3, r2, #2
    64ba:	189b      	adds	r3, r3, r2
    64bc:	005a      	lsls	r2, r3, #1
    64be:	490f      	ldr	r1, [pc, #60]	; (64fc <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    64c0:	480f      	ldr	r0, [pc, #60]	; (6500 <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    64c2:	4b10      	ldr	r3, [pc, #64]	; (6504 <_ZN9CDC_Class9writeDataEPKvl+0x60>)
    64c4:	4798      	blx	r3
		txReady=false;
    64c6:	2300      	movs	r3, #0
    64c8:	7523      	strb	r3, [r4, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    64ca:	0029      	movs	r1, r5
    64cc:	0030      	movs	r0, r6
    64ce:	4b0e      	ldr	r3, [pc, #56]	; (6508 <_ZN9CDC_Class9writeDataEPKvl+0x64>)
    64d0:	4798      	blx	r3
    64d2:	0005      	movs	r5, r0
    64d4:	e002      	b.n	64dc <_ZN9CDC_Class9writeDataEPKvl+0x38>
		while((!txReady)&&(connected)){
    64d6:	2300      	movs	r3, #0
    64d8:	2b00      	cmp	r3, #0
    64da:	d005      	beq.n	64e8 <_ZN9CDC_Class9writeDataEPKvl+0x44>
    64dc:	7d23      	ldrb	r3, [r4, #20]
    64de:	2b00      	cmp	r3, #0
    64e0:	d1f9      	bne.n	64d6 <_ZN9CDC_Class9writeDataEPKvl+0x32>
    64e2:	7c23      	ldrb	r3, [r4, #16]
    64e4:	b2db      	uxtb	r3, r3
    64e6:	e7f7      	b.n	64d8 <_ZN9CDC_Class9writeDataEPKvl+0x34>
			usbTerminalTimer.Stop();
    64e8:	4c05      	ldr	r4, [pc, #20]	; (6500 <_ZN9CDC_Class9writeDataEPKvl+0x5c>)
    64ea:	0020      	movs	r0, r4
    64ec:	4b07      	ldr	r3, [pc, #28]	; (650c <_ZN9CDC_Class9writeDataEPKvl+0x68>)
    64ee:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    64f0:	4902      	ldr	r1, [pc, #8]	; (64fc <_ZN9CDC_Class9writeDataEPKvl+0x58>)
    64f2:	0020      	movs	r0, r4
    64f4:	4b06      	ldr	r3, [pc, #24]	; (6510 <_ZN9CDC_Class9writeDataEPKvl+0x6c>)
    64f6:	4798      	blx	r3
		return r;
    64f8:	e7dc      	b.n	64b4 <_ZN9CDC_Class9writeDataEPKvl+0x10>
    64fa:	46c0      	nop			; (mov r8, r8)
    64fc:	00006301 	.word	0x00006301
    6500:	20001408 	.word	0x20001408
    6504:	00006c35 	.word	0x00006c35
    6508:	000059f5 	.word	0x000059f5
    650c:	00006ba5 	.word	0x00006ba5
    6510:	00006c7d 	.word	0x00006c7d

00006514 <_ZN9CDC_Class5writeEPKhj>:
{
    6514:	b570      	push	{r4, r5, r6, lr}
    6516:	0004      	movs	r4, r0
    6518:	000e      	movs	r6, r1
    651a:	0015      	movs	r5, r2
	txReady=false;
    651c:	2300      	movs	r3, #0
    651e:	7503      	strb	r3, [r0, #20]
 	if (connected){
    6520:	7c03      	ldrb	r3, [r0, #16]
    6522:	2b00      	cmp	r3, #0
    6524:	d102      	bne.n	652c <_ZN9CDC_Class5writeEPKhj+0x18>
 		r=0;
    6526:	2500      	movs	r5, #0
}
    6528:	0028      	movs	r0, r5
    652a:	bd70      	pop	{r4, r5, r6, pc}
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    652c:	0093      	lsls	r3, r2, #2
    652e:	189b      	adds	r3, r3, r2
    6530:	005a      	lsls	r2, r3, #1
    6532:	490e      	ldr	r1, [pc, #56]	; (656c <_ZN9CDC_Class5writeEPKhj+0x58>)
    6534:	480e      	ldr	r0, [pc, #56]	; (6570 <_ZN9CDC_Class5writeEPKhj+0x5c>)
    6536:	4b0f      	ldr	r3, [pc, #60]	; (6574 <_ZN9CDC_Class5writeEPKhj+0x60>)
    6538:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    653a:	0029      	movs	r1, r5
    653c:	0030      	movs	r0, r6
    653e:	4b0e      	ldr	r3, [pc, #56]	; (6578 <_ZN9CDC_Class5writeEPKhj+0x64>)
    6540:	4798      	blx	r3
    6542:	0005      	movs	r5, r0
    6544:	e002      	b.n	654c <_ZN9CDC_Class5writeEPKhj+0x38>
		while((!txReady)&&(connected));
    6546:	2300      	movs	r3, #0
    6548:	2b00      	cmp	r3, #0
    654a:	d005      	beq.n	6558 <_ZN9CDC_Class5writeEPKhj+0x44>
    654c:	7d23      	ldrb	r3, [r4, #20]
    654e:	2b00      	cmp	r3, #0
    6550:	d1f9      	bne.n	6546 <_ZN9CDC_Class5writeEPKhj+0x32>
    6552:	7c23      	ldrb	r3, [r4, #16]
    6554:	b2db      	uxtb	r3, r3
    6556:	e7f7      	b.n	6548 <_ZN9CDC_Class5writeEPKhj+0x34>
		usbTerminalTimer.Stop();
    6558:	4c05      	ldr	r4, [pc, #20]	; (6570 <_ZN9CDC_Class5writeEPKhj+0x5c>)
    655a:	0020      	movs	r0, r4
    655c:	4b07      	ldr	r3, [pc, #28]	; (657c <_ZN9CDC_Class5writeEPKhj+0x68>)
    655e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    6560:	4902      	ldr	r1, [pc, #8]	; (656c <_ZN9CDC_Class5writeEPKhj+0x58>)
    6562:	0020      	movs	r0, r4
    6564:	4b06      	ldr	r3, [pc, #24]	; (6580 <_ZN9CDC_Class5writeEPKhj+0x6c>)
    6566:	4798      	blx	r3
    6568:	e7de      	b.n	6528 <_ZN9CDC_Class5writeEPKhj+0x14>
    656a:	46c0      	nop			; (mov r8, r8)
    656c:	00006301 	.word	0x00006301
    6570:	20001408 	.word	0x20001408
    6574:	00006c35 	.word	0x00006c35
    6578:	000059f5 	.word	0x000059f5
    657c:	00006ba5 	.word	0x00006ba5
    6580:	00006c7d 	.word	0x00006c7d

00006584 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
    6584:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
    6586:	4b01      	ldr	r3, [pc, #4]	; (658c <_ZN9CDC_Class5clearEv+0x8>)
    6588:	4798      	blx	r3
}
    658a:	bd10      	pop	{r4, pc}
    658c:	00005951 	.word	0x00005951

00006590 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
    6590:	b510      	push	{r4, lr}
    6592:	0004      	movs	r4, r0
    Print() : write_error(0) {}
    6594:	2300      	movs	r3, #0
    6596:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    6598:	4b08      	ldr	r3, [pc, #32]	; (65bc <_ZN9CDC_ClassC1Ev+0x2c>)
    659a:	6003      	str	r3, [r0, #0]
    659c:	23fa      	movs	r3, #250	; 0xfa
    659e:	009b      	lsls	r3, r3, #2
    65a0:	6083      	str	r3, [r0, #8]
    65a2:	3010      	adds	r0, #16
    65a4:	4b06      	ldr	r3, [pc, #24]	; (65c0 <_ZN9CDC_ClassC1Ev+0x30>)
    65a6:	4798      	blx	r3
    65a8:	4b06      	ldr	r3, [pc, #24]	; (65c4 <_ZN9CDC_ClassC1Ev+0x34>)
    65aa:	3308      	adds	r3, #8
    65ac:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
    65ae:	2301      	movs	r3, #1
    65b0:	425b      	negs	r3, r3
    65b2:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
    65b4:	4b04      	ldr	r3, [pc, #16]	; (65c8 <_ZN9CDC_ClassC1Ev+0x38>)
    65b6:	601c      	str	r4, [r3, #0]
} //CDC_Class
    65b8:	0020      	movs	r0, r4
    65ba:	bd10      	pop	{r4, pc}
    65bc:	00011254 	.word	0x00011254
    65c0:	00006a4d 	.word	0x00006a4d
    65c4:	00011270 	.word	0x00011270
    65c8:	2000139c 	.word	0x2000139c

000065cc <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    65cc:	b510      	push	{r4, lr}
    65ce:	2801      	cmp	r0, #1
    65d0:	d000      	beq.n	65d4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    65d2:	bd10      	pop	{r4, pc}
    65d4:	4b06      	ldr	r3, [pc, #24]	; (65f0 <_Z41__static_initialization_and_destruction_0ii+0x24>)
    65d6:	4299      	cmp	r1, r3
    65d8:	d1fb      	bne.n	65d2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    65da:	4c06      	ldr	r4, [pc, #24]	; (65f4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    65dc:	3404      	adds	r4, #4
    65de:	0020      	movs	r0, r4
    65e0:	4b05      	ldr	r3, [pc, #20]	; (65f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    65e2:	4798      	blx	r3
    65e4:	4a05      	ldr	r2, [pc, #20]	; (65fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
    65e6:	4906      	ldr	r1, [pc, #24]	; (6600 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    65e8:	0020      	movs	r0, r4
    65ea:	4b06      	ldr	r3, [pc, #24]	; (6604 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    65ec:	4798      	blx	r3
    65ee:	e7f0      	b.n	65d2 <_Z41__static_initialization_and_destruction_0ii+0x6>
    65f0:	0000ffff 	.word	0x0000ffff
    65f4:	2000139c 	.word	0x2000139c
    65f8:	00006591 	.word	0x00006591
    65fc:	20000000 	.word	0x20000000
    6600:	000063a1 	.word	0x000063a1
    6604:	00007161 	.word	0x00007161

00006608 <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
    6608:	b570      	push	{r4, r5, r6, lr}
    660a:	0005      	movs	r5, r0
	OnInit();
    660c:	3010      	adds	r0, #16
    660e:	4b06      	ldr	r3, [pc, #24]	; (6628 <_ZN9CDC_Class4InitEv+0x20>)
    6610:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    6612:	4906      	ldr	r1, [pc, #24]	; (662c <_ZN9CDC_Class4InitEv+0x24>)
    6614:	2003      	movs	r0, #3
    6616:	4b06      	ldr	r3, [pc, #24]	; (6630 <_ZN9CDC_Class4InitEv+0x28>)
    6618:	4798      	blx	r3
	delay_ms(100);
    661a:	2064      	movs	r0, #100	; 0x64
    661c:	4c05      	ldr	r4, [pc, #20]	; (6634 <_ZN9CDC_Class4InitEv+0x2c>)
    661e:	47a0      	blx	r4
	if (connected)
    6620:	7c2b      	ldrb	r3, [r5, #16]
	delay_ms(100);
    6622:	2064      	movs	r0, #100	; 0x64
    6624:	47a0      	blx	r4
}
    6626:	bd70      	pop	{r4, r5, r6, pc}
    6628:	00006a5d 	.word	0x00006a5d
    662c:	000063bd 	.word	0x000063bd
    6630:	00005969 	.word	0x00005969
    6634:	000025c1 	.word	0x000025c1

00006638 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
    6638:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
    663a:	4b01      	ldr	r3, [pc, #4]	; (6640 <_ZN9CDC_Class9IsEnabledEv+0x8>)
    663c:	4798      	blx	r3
}
    663e:	bd10      	pop	{r4, pc}
    6640:	000059b9 	.word	0x000059b9

00006644 <_GLOBAL__sub_I_ptrCDCClass>:
 CDC_Class	usb;
    6644:	b510      	push	{r4, lr}
    6646:	4902      	ldr	r1, [pc, #8]	; (6650 <_GLOBAL__sub_I_ptrCDCClass+0xc>)
    6648:	2001      	movs	r0, #1
    664a:	4b02      	ldr	r3, [pc, #8]	; (6654 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    664c:	4798      	blx	r3
    664e:	bd10      	pop	{r4, pc}
    6650:	0000ffff 	.word	0x0000ffff
    6654:	000065cd 	.word	0x000065cd

00006658 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
    6658:	2000      	movs	r0, #0
    665a:	4770      	bx	lr

0000665c <_sbrk>:
	}

extern "C" void *_sbrk (ptrdiff_t)
	{
    return (void *)0;
	}
    665c:	2000      	movs	r0, #0
    665e:	4770      	bx	lr

00006660 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
    6660:	4770      	bx	lr

00006662 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    6662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6664:	0005      	movs	r5, r0
  size_t n = 0;
    6666:	2400      	movs	r4, #0
  while (size--) {
    6668:	1e56      	subs	r6, r2, #1
    666a:	2a00      	cmp	r2, #0
    666c:	d00b      	beq.n	6686 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    666e:	682b      	ldr	r3, [r5, #0]
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	1c4f      	adds	r7, r1, #1
    6674:	7809      	ldrb	r1, [r1, #0]
    6676:	0028      	movs	r0, r5
    6678:	4798      	blx	r3
    667a:	2800      	cmp	r0, #0
    667c:	d003      	beq.n	6686 <_ZN5Print5writeEPKhj+0x24>
    667e:	3401      	adds	r4, #1
  while (size--) {
    6680:	0032      	movs	r2, r6
    if (write(*buffer++)) n++;
    6682:	0039      	movs	r1, r7
  while (size--) {
    6684:	e7f0      	b.n	6668 <_ZN5Print5writeEPKhj+0x6>
    else break;
  }
  return n;
}
    6686:	0020      	movs	r0, r4
    6688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000668c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	0005      	movs	r5, r0
    6690:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
    6692:	d009      	beq.n	66a8 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
    6694:	0008      	movs	r0, r1
    6696:	4b05      	ldr	r3, [pc, #20]	; (66ac <_ZN5Print5printEPKc+0x20>)
    6698:	4798      	blx	r3
    669a:	0002      	movs	r2, r0
    669c:	682b      	ldr	r3, [r5, #0]
    669e:	685b      	ldr	r3, [r3, #4]
    66a0:	0021      	movs	r1, r4
    66a2:	0028      	movs	r0, r5
    66a4:	4798      	blx	r3
  return write(str);
}
    66a6:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
    66a8:	2000      	movs	r0, #0
  return write(str);
    66aa:	e7fc      	b.n	66a6 <_ZN5Print5printEPKc+0x1a>
    66ac:	0000c195 	.word	0x0000c195

000066b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    66b0:	b510      	push	{r4, lr}
  return write(c);
    66b2:	6803      	ldr	r3, [r0, #0]
    66b4:	681b      	ldr	r3, [r3, #0]
    66b6:	4798      	blx	r3
}
    66b8:	bd10      	pop	{r4, pc}
	...

000066bc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    66bc:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
    66be:	6803      	ldr	r3, [r0, #0]
    66c0:	685b      	ldr	r3, [r3, #4]
    66c2:	2202      	movs	r2, #2
    66c4:	4901      	ldr	r1, [pc, #4]	; (66cc <_ZN5Print7printlnEv+0x10>)
    66c6:	4798      	blx	r3
  return write("\r\n");
}
    66c8:	bd10      	pop	{r4, pc}
    66ca:	46c0      	nop			; (mov r8, r8)
    66cc:	00010ca0 	.word	0x00010ca0

000066d0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    66d0:	b570      	push	{r4, r5, r6, lr}
    66d2:	0005      	movs	r5, r0
  size_t n = print(c);
    66d4:	4b03      	ldr	r3, [pc, #12]	; (66e4 <_ZN5Print7printlnEPKc+0x14>)
    66d6:	4798      	blx	r3
    66d8:	0004      	movs	r4, r0
  n += println();
    66da:	0028      	movs	r0, r5
    66dc:	4b02      	ldr	r3, [pc, #8]	; (66e8 <_ZN5Print7printlnEPKc+0x18>)
    66de:	4798      	blx	r3
    66e0:	1820      	adds	r0, r4, r0
  return n;
}
    66e2:	bd70      	pop	{r4, r5, r6, pc}
    66e4:	0000668d 	.word	0x0000668d
    66e8:	000066bd 	.word	0x000066bd

000066ec <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    66ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    66ee:	46ce      	mov	lr, r9
    66f0:	b500      	push	{lr}
    66f2:	b08c      	sub	sp, #48	; 0x30
    66f4:	4681      	mov	r9, r0
    66f6:	000d      	movs	r5, r1
    66f8:	0010      	movs	r0, r2
    66fa:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    66fc:	2100      	movs	r1, #0
    66fe:	2320      	movs	r3, #32
    6700:	aa03      	add	r2, sp, #12
    6702:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    6704:	2801      	cmp	r0, #1
    6706:	dd01      	ble.n	670c <_ZN5Print11printNumberEmh+0x20>
    6708:	ae0b      	add	r6, sp, #44	; 0x2c
    670a:	e007      	b.n	671c <_ZN5Print11printNumberEmh+0x30>
    670c:	230a      	movs	r3, #10
    670e:	9301      	str	r3, [sp, #4]
    6710:	e7fa      	b.n	6708 <_ZN5Print11printNumberEmh+0x1c>

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6712:	3437      	adds	r4, #55	; 0x37
    6714:	b2e4      	uxtb	r4, r4
    6716:	7034      	strb	r4, [r6, #0]
  } while(n);
    6718:	2d00      	cmp	r5, #0
    671a:	d012      	beq.n	6742 <_ZN5Print11printNumberEmh+0x56>
    char c = n % base;
    671c:	9901      	ldr	r1, [sp, #4]
    671e:	0028      	movs	r0, r5
    6720:	4b11      	ldr	r3, [pc, #68]	; (6768 <_ZN5Print11printNumberEmh+0x7c>)
    6722:	4798      	blx	r3
    6724:	000f      	movs	r7, r1
    6726:	b2cc      	uxtb	r4, r1
    n /= base;
    6728:	9901      	ldr	r1, [sp, #4]
    672a:	0028      	movs	r0, r5
    672c:	4b0f      	ldr	r3, [pc, #60]	; (676c <_ZN5Print11printNumberEmh+0x80>)
    672e:	4798      	blx	r3
    6730:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    6732:	3e01      	subs	r6, #1
    6734:	23ff      	movs	r3, #255	; 0xff
    6736:	401f      	ands	r7, r3
    6738:	2f09      	cmp	r7, #9
    673a:	dcea      	bgt.n	6712 <_ZN5Print11printNumberEmh+0x26>
    673c:	3430      	adds	r4, #48	; 0x30
    673e:	b2e4      	uxtb	r4, r4
    6740:	e7e9      	b.n	6716 <_ZN5Print11printNumberEmh+0x2a>
      if (str == NULL) return 0;
    6742:	2e00      	cmp	r6, #0
    6744:	d00d      	beq.n	6762 <_ZN5Print11printNumberEmh+0x76>
      return write((const uint8_t *)str, strlen(str));
    6746:	0030      	movs	r0, r6
    6748:	4b09      	ldr	r3, [pc, #36]	; (6770 <_ZN5Print11printNumberEmh+0x84>)
    674a:	4798      	blx	r3
    674c:	0002      	movs	r2, r0
    674e:	464b      	mov	r3, r9
    6750:	681b      	ldr	r3, [r3, #0]
    6752:	685b      	ldr	r3, [r3, #4]
    6754:	0031      	movs	r1, r6
    6756:	4648      	mov	r0, r9
    6758:	4798      	blx	r3

  return write(str);
}
    675a:	b00c      	add	sp, #48	; 0x30
    675c:	bc04      	pop	{r2}
    675e:	4691      	mov	r9, r2
    6760:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
    6762:	2000      	movs	r0, #0
  return write(str);
    6764:	e7f9      	b.n	675a <_ZN5Print11printNumberEmh+0x6e>
    6766:	46c0      	nop			; (mov r8, r8)
    6768:	00008f61 	.word	0x00008f61
    676c:	00008e55 	.word	0x00008e55
    6770:	0000c195 	.word	0x0000c195

00006774 <_ZN5Print5printEli>:
{
    6774:	b570      	push	{r4, r5, r6, lr}
    6776:	0005      	movs	r5, r0
    6778:	000c      	movs	r4, r1
  if (base == 0) {
    677a:	2a00      	cmp	r2, #0
    677c:	d005      	beq.n	678a <_ZN5Print5printEli+0x16>
  } else if (base == 10) {
    677e:	2a0a      	cmp	r2, #10
    6780:	d008      	beq.n	6794 <_ZN5Print5printEli+0x20>
    return printNumber(n, base);
    6782:	b2d2      	uxtb	r2, r2
    6784:	4b0c      	ldr	r3, [pc, #48]	; (67b8 <_ZN5Print5printEli+0x44>)
    6786:	4798      	blx	r3
}
    6788:	bd70      	pop	{r4, r5, r6, pc}
    return write(n);
    678a:	b2c9      	uxtb	r1, r1
    678c:	6803      	ldr	r3, [r0, #0]
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	4798      	blx	r3
    6792:	e7f9      	b.n	6788 <_ZN5Print5printEli+0x14>
    if (n < 0) {
    6794:	2900      	cmp	r1, #0
    6796:	db03      	blt.n	67a0 <_ZN5Print5printEli+0x2c>
    return printNumber(n, 10);
    6798:	220a      	movs	r2, #10
    679a:	4b07      	ldr	r3, [pc, #28]	; (67b8 <_ZN5Print5printEli+0x44>)
    679c:	4798      	blx	r3
    679e:	e7f3      	b.n	6788 <_ZN5Print5printEli+0x14>
      int t = print('-');
    67a0:	212d      	movs	r1, #45	; 0x2d
    67a2:	4b06      	ldr	r3, [pc, #24]	; (67bc <_ZN5Print5printEli+0x48>)
    67a4:	4798      	blx	r3
    67a6:	0006      	movs	r6, r0
      n = -n;
    67a8:	4261      	negs	r1, r4
      return printNumber(n, 10) + t;
    67aa:	220a      	movs	r2, #10
    67ac:	0028      	movs	r0, r5
    67ae:	4b02      	ldr	r3, [pc, #8]	; (67b8 <_ZN5Print5printEli+0x44>)
    67b0:	4798      	blx	r3
    67b2:	1830      	adds	r0, r6, r0
    67b4:	e7e8      	b.n	6788 <_ZN5Print5printEli+0x14>
    67b6:	46c0      	nop			; (mov r8, r8)
    67b8:	000066ed 	.word	0x000066ed
    67bc:	000066b1 	.word	0x000066b1

000067c0 <_ZN5Print5printEii>:
{
    67c0:	b510      	push	{r4, lr}
  return print((long) n, base);
    67c2:	4b01      	ldr	r3, [pc, #4]	; (67c8 <_ZN5Print5printEii+0x8>)
    67c4:	4798      	blx	r3
}
    67c6:	bd10      	pop	{r4, pc}
    67c8:	00006775 	.word	0x00006775

000067cc <_ZN5Print5printEmi>:
{
    67cc:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    67ce:	2a00      	cmp	r2, #0
    67d0:	d003      	beq.n	67da <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
    67d2:	b2d2      	uxtb	r2, r2
    67d4:	4b03      	ldr	r3, [pc, #12]	; (67e4 <_ZN5Print5printEmi+0x18>)
    67d6:	4798      	blx	r3
}
    67d8:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
    67da:	b2c9      	uxtb	r1, r1
    67dc:	6803      	ldr	r3, [r0, #0]
    67de:	681b      	ldr	r3, [r3, #0]
    67e0:	4798      	blx	r3
    67e2:	e7f9      	b.n	67d8 <_ZN5Print5printEmi+0xc>
    67e4:	000066ed 	.word	0x000066ed

000067e8 <_ZN5Print5printEji>:
{
    67e8:	b510      	push	{r4, lr}
  return print((unsigned long) n, base);
    67ea:	4b01      	ldr	r3, [pc, #4]	; (67f0 <_ZN5Print5printEji+0x8>)
    67ec:	4798      	blx	r3
}
    67ee:	bd10      	pop	{r4, pc}
    67f0:	000067cd 	.word	0x000067cd

000067f4 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
    67f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67f6:	46c6      	mov	lr, r8
    67f8:	b500      	push	{lr}
    67fa:	b084      	sub	sp, #16
    67fc:	9003      	str	r0, [sp, #12]
    67fe:	0014      	movs	r4, r2
    6800:	9200      	str	r2, [sp, #0]
    6802:	001e      	movs	r6, r3
    6804:	ab0a      	add	r3, sp, #40	; 0x28
    6806:	781d      	ldrb	r5, [r3, #0]
  { return __builtin_isnan(__x); }
    6808:	0022      	movs	r2, r4
    680a:	0033      	movs	r3, r6
    680c:	0020      	movs	r0, r4
    680e:	0031      	movs	r1, r6
    6810:	4f58      	ldr	r7, [pc, #352]	; (6974 <_ZN5Print10printFloatEdh+0x180>)
    6812:	47b8      	blx	r7
    6814:	2800      	cmp	r0, #0
    6816:	d13e      	bne.n	6896 <_ZN5Print10printFloatEdh+0xa2>
    6818:	2300      	movs	r3, #0
  size_t n = 0;

  if (isnan(number)) return print("nan");
    681a:	2b00      	cmp	r3, #0
    681c:	d13d      	bne.n	689a <_ZN5Print10printFloatEdh+0xa6>
  { return __builtin_isinf(__x); }
    681e:	0077      	lsls	r7, r6, #1
    6820:	087f      	lsrs	r7, r7, #1
  if (isinf(number)) return print("inf");
    6822:	2201      	movs	r2, #1
    6824:	4252      	negs	r2, r2
    6826:	4b54      	ldr	r3, [pc, #336]	; (6978 <_ZN5Print10printFloatEdh+0x184>)
    6828:	9800      	ldr	r0, [sp, #0]
    682a:	0039      	movs	r1, r7
    682c:	4c51      	ldr	r4, [pc, #324]	; (6974 <_ZN5Print10printFloatEdh+0x180>)
    682e:	47a0      	blx	r4
    6830:	2800      	cmp	r0, #0
    6832:	d108      	bne.n	6846 <_ZN5Print10printFloatEdh+0x52>
    6834:	2201      	movs	r2, #1
    6836:	4252      	negs	r2, r2
    6838:	4b4f      	ldr	r3, [pc, #316]	; (6978 <_ZN5Print10printFloatEdh+0x184>)
    683a:	9800      	ldr	r0, [sp, #0]
    683c:	0039      	movs	r1, r7
    683e:	4f4f      	ldr	r7, [pc, #316]	; (697c <_ZN5Print10printFloatEdh+0x188>)
    6840:	47b8      	blx	r7
    6842:	2800      	cmp	r0, #0
    6844:	d033      	beq.n	68ae <_ZN5Print10printFloatEdh+0xba>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6846:	22e0      	movs	r2, #224	; 0xe0
    6848:	0612      	lsls	r2, r2, #24
    684a:	4b4d      	ldr	r3, [pc, #308]	; (6980 <_ZN5Print10printFloatEdh+0x18c>)
    684c:	9800      	ldr	r0, [sp, #0]
    684e:	0031      	movs	r1, r6
    6850:	4f4c      	ldr	r7, [pc, #304]	; (6984 <_ZN5Print10printFloatEdh+0x190>)
    6852:	47b8      	blx	r7
    6854:	2800      	cmp	r0, #0
    6856:	d130      	bne.n	68ba <_ZN5Print10printFloatEdh+0xc6>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6858:	22e0      	movs	r2, #224	; 0xe0
    685a:	0612      	lsls	r2, r2, #24
    685c:	4b4a      	ldr	r3, [pc, #296]	; (6988 <_ZN5Print10printFloatEdh+0x194>)
    685e:	9800      	ldr	r0, [sp, #0]
    6860:	0031      	movs	r1, r6
    6862:	4f4a      	ldr	r7, [pc, #296]	; (698c <_ZN5Print10printFloatEdh+0x198>)
    6864:	47b8      	blx	r7
    6866:	2800      	cmp	r0, #0
    6868:	d12d      	bne.n	68c6 <_ZN5Print10printFloatEdh+0xd2>

  // Handle negative numbers
  if (number < 0.0)
    686a:	2200      	movs	r2, #0
    686c:	2300      	movs	r3, #0
    686e:	9800      	ldr	r0, [sp, #0]
    6870:	0031      	movs	r1, r6
    6872:	4f46      	ldr	r7, [pc, #280]	; (698c <_ZN5Print10printFloatEdh+0x198>)
    6874:	47b8      	blx	r7
    6876:	2800      	cmp	r0, #0
    6878:	d12b      	bne.n	68d2 <_ZN5Print10printFloatEdh+0xde>
  size_t n = 0;
    687a:	2300      	movs	r3, #0
    687c:	4698      	mov	r8, r3
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    687e:	2400      	movs	r4, #0
  double rounding = 0.5;
    6880:	2000      	movs	r0, #0
    6882:	4943      	ldr	r1, [pc, #268]	; (6990 <_ZN5Print10printFloatEdh+0x19c>)
  for (uint8_t i=0; i<digits; ++i)
    6884:	42ac      	cmp	r4, r5
    6886:	da2e      	bge.n	68e6 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
    6888:	2200      	movs	r2, #0
    688a:	4b42      	ldr	r3, [pc, #264]	; (6994 <_ZN5Print10printFloatEdh+0x1a0>)
    688c:	4f42      	ldr	r7, [pc, #264]	; (6998 <_ZN5Print10printFloatEdh+0x1a4>)
    688e:	47b8      	blx	r7
  for (uint8_t i=0; i<digits; ++i)
    6890:	3401      	adds	r4, #1
    6892:	b2e4      	uxtb	r4, r4
    6894:	e7f6      	b.n	6884 <_ZN5Print10printFloatEdh+0x90>
  { return __builtin_isnan(__x); }
    6896:	2301      	movs	r3, #1
    6898:	e7bf      	b.n	681a <_ZN5Print10printFloatEdh+0x26>
  if (isnan(number)) return print("nan");
    689a:	4940      	ldr	r1, [pc, #256]	; (699c <_ZN5Print10printFloatEdh+0x1a8>)
    689c:	9803      	ldr	r0, [sp, #12]
    689e:	4b40      	ldr	r3, [pc, #256]	; (69a0 <_ZN5Print10printFloatEdh+0x1ac>)
    68a0:	4798      	blx	r3
    68a2:	0006      	movs	r6, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
    68a4:	0030      	movs	r0, r6
    68a6:	b004      	add	sp, #16
    68a8:	bc04      	pop	{r2}
    68aa:	4690      	mov	r8, r2
    68ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isinf(number)) return print("inf");
    68ae:	493d      	ldr	r1, [pc, #244]	; (69a4 <_ZN5Print10printFloatEdh+0x1b0>)
    68b0:	9803      	ldr	r0, [sp, #12]
    68b2:	4b3b      	ldr	r3, [pc, #236]	; (69a0 <_ZN5Print10printFloatEdh+0x1ac>)
    68b4:	4798      	blx	r3
    68b6:	0006      	movs	r6, r0
    68b8:	e7f4      	b.n	68a4 <_ZN5Print10printFloatEdh+0xb0>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    68ba:	493b      	ldr	r1, [pc, #236]	; (69a8 <_ZN5Print10printFloatEdh+0x1b4>)
    68bc:	9803      	ldr	r0, [sp, #12]
    68be:	4b38      	ldr	r3, [pc, #224]	; (69a0 <_ZN5Print10printFloatEdh+0x1ac>)
    68c0:	4798      	blx	r3
    68c2:	0006      	movs	r6, r0
    68c4:	e7ee      	b.n	68a4 <_ZN5Print10printFloatEdh+0xb0>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    68c6:	4938      	ldr	r1, [pc, #224]	; (69a8 <_ZN5Print10printFloatEdh+0x1b4>)
    68c8:	9803      	ldr	r0, [sp, #12]
    68ca:	4b35      	ldr	r3, [pc, #212]	; (69a0 <_ZN5Print10printFloatEdh+0x1ac>)
    68cc:	4798      	blx	r3
    68ce:	0006      	movs	r6, r0
    68d0:	e7e8      	b.n	68a4 <_ZN5Print10printFloatEdh+0xb0>
     n += print('-');
    68d2:	212d      	movs	r1, #45	; 0x2d
    68d4:	9803      	ldr	r0, [sp, #12]
    68d6:	4b35      	ldr	r3, [pc, #212]	; (69ac <_ZN5Print10printFloatEdh+0x1b8>)
    68d8:	4798      	blx	r3
    68da:	4680      	mov	r8, r0
     number = -number;
    68dc:	2380      	movs	r3, #128	; 0x80
    68de:	061b      	lsls	r3, r3, #24
    68e0:	469c      	mov	ip, r3
    68e2:	4466      	add	r6, ip
    68e4:	e7cb      	b.n	687e <_ZN5Print10printFloatEdh+0x8a>
  number += rounding;
    68e6:	0002      	movs	r2, r0
    68e8:	000b      	movs	r3, r1
    68ea:	9800      	ldr	r0, [sp, #0]
    68ec:	0031      	movs	r1, r6
    68ee:	4c30      	ldr	r4, [pc, #192]	; (69b0 <_ZN5Print10printFloatEdh+0x1bc>)
    68f0:	47a0      	blx	r4
  unsigned long int_part = (unsigned long)number;
    68f2:	9000      	str	r0, [sp, #0]
    68f4:	9101      	str	r1, [sp, #4]
    68f6:	4b2f      	ldr	r3, [pc, #188]	; (69b4 <_ZN5Print10printFloatEdh+0x1c0>)
    68f8:	4798      	blx	r3
    68fa:	0006      	movs	r6, r0
  double remainder = number - (double)int_part;
    68fc:	4b2e      	ldr	r3, [pc, #184]	; (69b8 <_ZN5Print10printFloatEdh+0x1c4>)
    68fe:	4798      	blx	r3
    6900:	0002      	movs	r2, r0
    6902:	000b      	movs	r3, r1
    6904:	9800      	ldr	r0, [sp, #0]
    6906:	9901      	ldr	r1, [sp, #4]
    6908:	4c2c      	ldr	r4, [pc, #176]	; (69bc <_ZN5Print10printFloatEdh+0x1c8>)
    690a:	47a0      	blx	r4
    690c:	9000      	str	r0, [sp, #0]
    690e:	9101      	str	r1, [sp, #4]
  n += print(int_part);
    6910:	220a      	movs	r2, #10
    6912:	0031      	movs	r1, r6
    6914:	9c03      	ldr	r4, [sp, #12]
    6916:	0020      	movs	r0, r4
    6918:	4b29      	ldr	r3, [pc, #164]	; (69c0 <_ZN5Print10printFloatEdh+0x1cc>)
    691a:	4798      	blx	r3
    691c:	4440      	add	r0, r8
    691e:	0006      	movs	r6, r0
  if (digits > 0) {
    6920:	2d00      	cmp	r5, #0
    6922:	dd04      	ble.n	692e <_ZN5Print10printFloatEdh+0x13a>
    n += print('.');
    6924:	212e      	movs	r1, #46	; 0x2e
    6926:	0020      	movs	r0, r4
    6928:	4b20      	ldr	r3, [pc, #128]	; (69ac <_ZN5Print10printFloatEdh+0x1b8>)
    692a:	4798      	blx	r3
    692c:	1836      	adds	r6, r6, r0
  while (digits-- > 0)
    692e:	1e6f      	subs	r7, r5, #1
    6930:	b2ff      	uxtb	r7, r7
    6932:	2d00      	cmp	r5, #0
    6934:	ddb6      	ble.n	68a4 <_ZN5Print10printFloatEdh+0xb0>
    remainder *= 10.0;
    6936:	2200      	movs	r2, #0
    6938:	4b16      	ldr	r3, [pc, #88]	; (6994 <_ZN5Print10printFloatEdh+0x1a0>)
    693a:	9800      	ldr	r0, [sp, #0]
    693c:	9901      	ldr	r1, [sp, #4]
    693e:	4c21      	ldr	r4, [pc, #132]	; (69c4 <_ZN5Print10printFloatEdh+0x1d0>)
    6940:	47a0      	blx	r4
    6942:	0004      	movs	r4, r0
    6944:	000d      	movs	r5, r1
    unsigned int toPrint = (unsigned int)(remainder);
    6946:	4b1b      	ldr	r3, [pc, #108]	; (69b4 <_ZN5Print10printFloatEdh+0x1c0>)
    6948:	4798      	blx	r3
    n += print(toPrint);
    694a:	220a      	movs	r2, #10
    694c:	9000      	str	r0, [sp, #0]
    694e:	0001      	movs	r1, r0
    6950:	9803      	ldr	r0, [sp, #12]
    6952:	4b1d      	ldr	r3, [pc, #116]	; (69c8 <_ZN5Print10printFloatEdh+0x1d4>)
    6954:	4798      	blx	r3
    6956:	1836      	adds	r6, r6, r0
    remainder -= toPrint;
    6958:	9800      	ldr	r0, [sp, #0]
    695a:	4b17      	ldr	r3, [pc, #92]	; (69b8 <_ZN5Print10printFloatEdh+0x1c4>)
    695c:	4798      	blx	r3
    695e:	0002      	movs	r2, r0
    6960:	000b      	movs	r3, r1
    6962:	0020      	movs	r0, r4
    6964:	0029      	movs	r1, r5
    6966:	4c15      	ldr	r4, [pc, #84]	; (69bc <_ZN5Print10printFloatEdh+0x1c8>)
    6968:	47a0      	blx	r4
    696a:	9000      	str	r0, [sp, #0]
    696c:	9101      	str	r1, [sp, #4]
  while (digits-- > 0)
    696e:	003d      	movs	r5, r7
    6970:	e7dd      	b.n	692e <_ZN5Print10printFloatEdh+0x13a>
    6972:	46c0      	nop			; (mov r8, r8)
    6974:	0000bc0d 	.word	0x0000bc0d
    6978:	7fefffff 	.word	0x7fefffff
    697c:	00009181 	.word	0x00009181
    6980:	41efffff 	.word	0x41efffff
    6984:	00009195 	.word	0x00009195
    6988:	c1efffff 	.word	0xc1efffff
    698c:	0000916d 	.word	0x0000916d
    6990:	3fe00000 	.word	0x3fe00000
    6994:	40240000 	.word	0x40240000
    6998:	0000a879 	.word	0x0000a879
    699c:	000112a8 	.word	0x000112a8
    69a0:	0000668d 	.word	0x0000668d
    69a4:	000112ac 	.word	0x000112ac
    69a8:	000112b0 	.word	0x000112b0
    69ac:	000066b1 	.word	0x000066b1
    69b0:	0000a259 	.word	0x0000a259
    69b4:	000092b5 	.word	0x000092b5
    69b8:	0000bd39 	.word	0x0000bd39
    69bc:	0000b5e1 	.word	0x0000b5e1
    69c0:	000067cd 	.word	0x000067cd
    69c4:	0000b0e1 	.word	0x0000b0e1
    69c8:	000067e9 	.word	0x000067e9

000069cc <_ZN5Print5printEdi>:
{
    69cc:	b530      	push	{r4, r5, lr}
    69ce:	b083      	sub	sp, #12
    69d0:	001d      	movs	r5, r3
  return printFloat(n, digits);
    69d2:	466b      	mov	r3, sp
    69d4:	7e1b      	ldrb	r3, [r3, #24]
    69d6:	9300      	str	r3, [sp, #0]
    69d8:	002b      	movs	r3, r5
    69da:	4902      	ldr	r1, [pc, #8]	; (69e4 <_ZN5Print5printEdi+0x18>)
    69dc:	4788      	blx	r1
}
    69de:	b003      	add	sp, #12
    69e0:	bd30      	pop	{r4, r5, pc}
    69e2:	46c0      	nop			; (mov r8, r8)
    69e4:	000067f5 	.word	0x000067f5

000069e8 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
    69e8:	4b03      	ldr	r3, [pc, #12]	; (69f8 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
    69ea:	2201      	movs	r2, #1
    69ec:	6819      	ldr	r1, [r3, #0]
    69ee:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->plugged=false;
    69f0:	681b      	ldr	r3, [r3, #0]
    69f2:	2200      	movs	r2, #0
    69f4:	705a      	strb	r2, [r3, #1]
}
    69f6:	4770      	bx	lr
    69f8:	20001400 	.word	0x20001400

000069fc <_ZL10USBPluggedv>:

static void USBPlugged(void){
    69fc:	b510      	push	{r4, lr}
    69fe:	b082      	sub	sp, #8
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    6a00:	a801      	add	r0, sp, #4
    6a02:	4b0e      	ldr	r3, [pc, #56]	; (6a3c <_ZL10USBPluggedv+0x40>)
    6a04:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6a06:	23c0      	movs	r3, #192	; 0xc0
    6a08:	05db      	lsls	r3, r3, #23
    6a0a:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6a0c:	4a0c      	ldr	r2, [pc, #48]	; (6a40 <_ZL10USBPluggedv+0x44>)
    6a0e:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6a10:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    6a12:	4053      	eors	r3, r2
    6a14:	401c      	ands	r4, r3
    6a16:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    6a18:	a801      	add	r0, sp, #4
    6a1a:	4b0a      	ldr	r3, [pc, #40]	; (6a44 <_ZL10USBPluggedv+0x48>)
    6a1c:	4798      	blx	r3
	if (gpio_get_pin_level(PIN_PA14))
    6a1e:	0463      	lsls	r3, r4, #17
    6a20:	d407      	bmi.n	6a32 <_ZL10USBPluggedv+0x36>
	{
		ptrSerialTerminalClass->plugged=true;
	} 
	else
	{
		ptrSerialTerminalClass->plugged=false;
    6a22:	4a09      	ldr	r2, [pc, #36]	; (6a48 <_ZL10USBPluggedv+0x4c>)
    6a24:	2300      	movs	r3, #0
    6a26:	6811      	ldr	r1, [r2, #0]
    6a28:	704b      	strb	r3, [r1, #1]
		ptrSerialTerminalClass->connected=false;
    6a2a:	6812      	ldr	r2, [r2, #0]
    6a2c:	7013      	strb	r3, [r2, #0]
	}
	
}
    6a2e:	b002      	add	sp, #8
    6a30:	bd10      	pop	{r4, pc}
		ptrSerialTerminalClass->plugged=true;
    6a32:	4b05      	ldr	r3, [pc, #20]	; (6a48 <_ZL10USBPluggedv+0x4c>)
    6a34:	681b      	ldr	r3, [r3, #0]
    6a36:	2201      	movs	r2, #1
    6a38:	705a      	strb	r2, [r3, #1]
    6a3a:	e7f8      	b.n	6a2e <_ZL10USBPluggedv+0x32>
    6a3c:	00002509 	.word	0x00002509
    6a40:	41004400 	.word	0x41004400
    6a44:	00002517 	.word	0x00002517
    6a48:	20001400 	.word	0x20001400

00006a4c <_ZN20SerialTerminal_ClassC1Ev>:


// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
    6a4c:	4b01      	ldr	r3, [pc, #4]	; (6a54 <_ZN20SerialTerminal_ClassC1Ev+0x8>)
    6a4e:	6018      	str	r0, [r3, #0]
	
} //SerialTerminal_Class
    6a50:	4770      	bx	lr
    6a52:	46c0      	nop			; (mov r8, r8)
    6a54:	20001400 	.word	0x20001400

00006a58 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
    6a58:	4770      	bx	lr
	...

00006a5c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    6a5c:	b530      	push	{r4, r5, lr}
    6a5e:	b083      	sub	sp, #12
    6a60:	0005      	movs	r5, r0
		ext_irq_register(PIN_PA14, USBPlugged);
    6a62:	491e      	ldr	r1, [pc, #120]	; (6adc <_ZN20SerialTerminal_Class6OnInitEv+0x80>)
    6a64:	200e      	movs	r0, #14
    6a66:	4b1e      	ldr	r3, [pc, #120]	; (6ae0 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    6a68:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    6a6a:	481e      	ldr	r0, [pc, #120]	; (6ae4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    6a6c:	4b1e      	ldr	r3, [pc, #120]	; (6ae8 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    6a6e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    6a70:	a801      	add	r0, sp, #4
    6a72:	4b1e      	ldr	r3, [pc, #120]	; (6aec <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    6a74:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    6a76:	23c0      	movs	r3, #192	; 0xc0
    6a78:	05db      	lsls	r3, r3, #23
    6a7a:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    6a7c:	4a1c      	ldr	r2, [pc, #112]	; (6af0 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    6a7e:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    6a80:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    6a82:	4053      	eors	r3, r2
    6a84:	401c      	ands	r4, r3
    6a86:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    6a88:	a801      	add	r0, sp, #4
    6a8a:	4b1a      	ldr	r3, [pc, #104]	; (6af4 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    6a8c:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    6a8e:	2380      	movs	r3, #128	; 0x80
    6a90:	01db      	lsls	r3, r3, #7
    6a92:	401c      	ands	r4, r3
    6a94:	1e63      	subs	r3, r4, #1
    6a96:	419c      	sbcs	r4, r3
    6a98:	b2e4      	uxtb	r4, r4
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(PIN_PA14);
    6a9a:	70ec      	strb	r4, [r5, #3]
		if (vbusDetected)
    6a9c:	2c00      	cmp	r4, #0
    6a9e:	d104      	bne.n	6aaa <_ZN20SerialTerminal_Class6OnInitEv+0x4e>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			connected=false;
    6aa0:	2300      	movs	r3, #0
    6aa2:	702b      	strb	r3, [r5, #0]
			plugged=false;
    6aa4:	706b      	strb	r3, [r5, #1]
		}
		
}
    6aa6:	b003      	add	sp, #12
    6aa8:	bd30      	pop	{r4, r5, pc}
			timeout=false;
    6aaa:	2300      	movs	r3, #0
    6aac:	70ab      	strb	r3, [r5, #2]
			plugged=true;
    6aae:	3301      	adds	r3, #1
    6ab0:	706b      	strb	r3, [r5, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    6ab2:	2296      	movs	r2, #150	; 0x96
    6ab4:	0092      	lsls	r2, r2, #2
    6ab6:	4910      	ldr	r1, [pc, #64]	; (6af8 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    6ab8:	480a      	ldr	r0, [pc, #40]	; (6ae4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    6aba:	4b10      	ldr	r3, [pc, #64]	; (6afc <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    6abc:	4798      	blx	r3
			while ((!usb.IsEnabled())){
    6abe:	4810      	ldr	r0, [pc, #64]	; (6b00 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    6ac0:	4b10      	ldr	r3, [pc, #64]	; (6b04 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    6ac2:	4798      	blx	r3
    6ac4:	2800      	cmp	r0, #0
    6ac6:	d105      	bne.n	6ad4 <_ZN20SerialTerminal_Class6OnInitEv+0x78>
				if (timeout)
    6ac8:	78ab      	ldrb	r3, [r5, #2]
    6aca:	2b00      	cmp	r3, #0
    6acc:	d0f7      	beq.n	6abe <_ZN20SerialTerminal_Class6OnInitEv+0x62>
					connected=false;
    6ace:	2300      	movs	r3, #0
    6ad0:	702b      	strb	r3, [r5, #0]
					return;
    6ad2:	e7e8      	b.n	6aa6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
			usbTerminalTimer.Stop();
    6ad4:	4803      	ldr	r0, [pc, #12]	; (6ae4 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    6ad6:	4b0c      	ldr	r3, [pc, #48]	; (6b08 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    6ad8:	4798      	blx	r3
    6ada:	e7e4      	b.n	6aa6 <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
    6adc:	000069fd 	.word	0x000069fd
    6ae0:	00002659 	.word	0x00002659
    6ae4:	20001408 	.word	0x20001408
    6ae8:	00006b85 	.word	0x00006b85
    6aec:	00002509 	.word	0x00002509
    6af0:	41004400 	.word	0x41004400
    6af4:	00002517 	.word	0x00002517
    6af8:	000069e9 	.word	0x000069e9
    6afc:	00006c35 	.word	0x00006c35
    6b00:	200013a0 	.word	0x200013a0
    6b04:	00006639 	.word	0x00006639
    6b08:	00006ba5 	.word	0x00006ba5

00006b0c <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
    6b0c:	2300      	movs	r3, #0
    6b0e:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
    6b10:	4770      	bx	lr
	...

00006b14 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
    6b14:	6101      	str	r1, [r0, #16]
	ptrTimerSerialClass=this;
    6b16:	4b04      	ldr	r3, [pc, #16]	; (6b28 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
    6b18:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
    6b1a:	2380      	movs	r3, #128	; 0x80
    6b1c:	00db      	lsls	r3, r3, #3
    6b1e:	6183      	str	r3, [r0, #24]
	task->cb=task_cb;
    6b20:	6883      	ldr	r3, [r0, #8]
    6b22:	4a02      	ldr	r2, [pc, #8]	; (6b2c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
    6b24:	60da      	str	r2, [r3, #12]
} //Timer_Class
    6b26:	4770      	bx	lr
    6b28:	20001404 	.word	0x20001404
    6b2c:	00006bc1 	.word	0x00006bc1

00006b30 <_Z41__static_initialization_and_destruction_0ii>:


}


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    6b30:	b510      	push	{r4, lr}
    6b32:	2801      	cmp	r0, #1
    6b34:	d000      	beq.n	6b38 <_Z41__static_initialization_and_destruction_0ii+0x8>
    6b36:	bd10      	pop	{r4, pc}
    6b38:	4b07      	ldr	r3, [pc, #28]	; (6b58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
    6b3a:	4299      	cmp	r1, r3
    6b3c:	d1fb      	bne.n	6b36 <_Z41__static_initialization_and_destruction_0ii+0x6>
    6b3e:	4c07      	ldr	r4, [pc, #28]	; (6b5c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
    6b40:	3404      	adds	r4, #4
    6b42:	4907      	ldr	r1, [pc, #28]	; (6b60 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    6b44:	0020      	movs	r0, r4
    6b46:	4b07      	ldr	r3, [pc, #28]	; (6b64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6b48:	4798      	blx	r3
    6b4a:	4a07      	ldr	r2, [pc, #28]	; (6b68 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6b4c:	4907      	ldr	r1, [pc, #28]	; (6b6c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    6b4e:	0020      	movs	r0, r4
    6b50:	4b07      	ldr	r3, [pc, #28]	; (6b70 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    6b52:	4798      	blx	r3
    6b54:	e7ef      	b.n	6b36 <_Z41__static_initialization_and_destruction_0ii+0x6>
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	0000ffff 	.word	0x0000ffff
    6b5c:	20001404 	.word	0x20001404
    6b60:	20001580 	.word	0x20001580
    6b64:	00006b15 	.word	0x00006b15
    6b68:	20000000 	.word	0x20000000
    6b6c:	00006b0d 	.word	0x00006b0d
    6b70:	00007161 	.word	0x00007161

00006b74 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
    6b74:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
    6b76:	6900      	ldr	r0, [r0, #16]
    6b78:	4b01      	ldr	r3, [pc, #4]	; (6b80 <_ZN17TimerSerial_Class5StartEv+0xc>)
    6b7a:	4798      	blx	r3
}
    6b7c:	bd10      	pop	{r4, pc}
    6b7e:	46c0      	nop			; (mov r8, r8)
    6b80:	00002a11 	.word	0x00002a11

00006b84 <_ZN17TimerSerial_Class4InitEv>:
bool TimerSerial_Class::Init(void){
    6b84:	b510      	push	{r4, lr}
    6b86:	0004      	movs	r4, r0
	ticks=0;
    6b88:	2300      	movs	r3, #0
    6b8a:	60c3      	str	r3, [r0, #12]
	isOK=Start()==0;
    6b8c:	4b04      	ldr	r3, [pc, #16]	; (6ba0 <_ZN17TimerSerial_Class4InitEv+0x1c>)
    6b8e:	4798      	blx	r3
    6b90:	4243      	negs	r3, r0
    6b92:	4158      	adcs	r0, r3
    6b94:	b2c0      	uxtb	r0, r0
    6b96:	70a0      	strb	r0, [r4, #2]
	return isOK;
    6b98:	78a0      	ldrb	r0, [r4, #2]
    6b9a:	b2c0      	uxtb	r0, r0
}
    6b9c:	bd10      	pop	{r4, pc}
    6b9e:	46c0      	nop			; (mov r8, r8)
    6ba0:	00006b75 	.word	0x00006b75

00006ba4 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
    6ba4:	b510      	push	{r4, lr}
    6ba6:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
    6ba8:	6900      	ldr	r0, [r0, #16]
    6baa:	4b02      	ldr	r3, [pc, #8]	; (6bb4 <_ZN17TimerSerial_Class4StopEv+0x10>)
    6bac:	4798      	blx	r3
	timeout=0;
    6bae:	2300      	movs	r3, #0
    6bb0:	7063      	strb	r3, [r4, #1]
}
    6bb2:	bd10      	pop	{r4, pc}
    6bb4:	00002a4d 	.word	0x00002a4d

00006bb8 <_ZN17TimerSerial_Class10setTimeoutEv>:
	timeout=1;
    6bb8:	2301      	movs	r3, #1
    6bba:	7043      	strb	r3, [r0, #1]
}
    6bbc:	4770      	bx	lr
	...

00006bc0 <_ZL7task_cbPK10timer_task>:
{
    6bc0:	b510      	push	{r4, lr}
	ptrTimerSerialClass->setTimeout();
    6bc2:	4b02      	ldr	r3, [pc, #8]	; (6bcc <_ZL7task_cbPK10timer_task+0xc>)
    6bc4:	6818      	ldr	r0, [r3, #0]
    6bc6:	4b02      	ldr	r3, [pc, #8]	; (6bd0 <_ZL7task_cbPK10timer_task+0x10>)
    6bc8:	4798      	blx	r3
}
    6bca:	bd10      	pop	{r4, pc}
    6bcc:	20001404 	.word	0x20001404
    6bd0:	00006bb9 	.word	0x00006bb9

00006bd4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    6bd4:	b510      	push	{r4, lr}
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6bd6:	2300      	movs	r3, #0
    6bd8:	2b03      	cmp	r3, #3
    6bda:	dc0f      	bgt.n	6bfc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x28>
			if (taskSerialArray[ii].cb==NULL)
    6bdc:	009a      	lsls	r2, r3, #2
    6bde:	18d2      	adds	r2, r2, r3
    6be0:	0091      	lsls	r1, r2, #2
    6be2:	4a08      	ldr	r2, [pc, #32]	; (6c04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    6be4:	1852      	adds	r2, r2, r1
    6be6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    6be8:	2a00      	cmp	r2, #0
    6bea:	d002      	beq.n	6bf2 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x1e>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6bec:	3301      	adds	r3, #1
    6bee:	b2db      	uxtb	r3, r3
    6bf0:	e7f2      	b.n	6bd8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4>
				task=&taskSerialArray[ii];
    6bf2:	4b04      	ldr	r3, [pc, #16]	; (6c04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    6bf4:	3324      	adds	r3, #36	; 0x24
    6bf6:	185b      	adds	r3, r3, r1
    6bf8:	6083      	str	r3, [r0, #8]
			return;
    6bfa:	e002      	b.n	6c02 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x2e>
	task=&taskSerialArray[0];
    6bfc:	4b01      	ldr	r3, [pc, #4]	; (6c04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x30>)
    6bfe:	3324      	adds	r3, #36	; 0x24
    6c00:	6083      	str	r3, [r0, #8]
}
    6c02:	bd10      	pop	{r4, pc}
    6c04:	20001404 	.word	0x20001404

00006c08 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    6c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c0a:	0004      	movs	r4, r0
    6c0c:	000e      	movs	r6, r1
    6c0e:	0017      	movs	r7, r2
    6c10:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
    6c12:	4b06      	ldr	r3, [pc, #24]	; (6c2c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
    6c14:	4798      	blx	r3
	task->interval = interval;
    6c16:	68a3      	ldr	r3, [r4, #8]
    6c18:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
    6c1a:	68a3      	ldr	r3, [r4, #8]
    6c1c:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
    6c1e:	68a3      	ldr	r3, [r4, #8]
    6c20:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
    6c22:	6920      	ldr	r0, [r4, #16]
    6c24:	68a1      	ldr	r1, [r4, #8]
    6c26:	4b02      	ldr	r3, [pc, #8]	; (6c30 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
    6c28:	4798      	blx	r3
}
    6c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c2c:	00006bd5 	.word	0x00006bd5
    6c30:	00002a89 	.word	0x00002a89

00006c34 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    6c34:	b570      	push	{r4, r5, r6, lr}
    6c36:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    6c38:	2300      	movs	r3, #0
    6c3a:	4d03      	ldr	r5, [pc, #12]	; (6c48 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
    6c3c:	47a8      	blx	r5
	status=timer_start(timer_descr);
    6c3e:	6920      	ldr	r0, [r4, #16]
    6c40:	4b02      	ldr	r3, [pc, #8]	; (6c4c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
    6c42:	4798      	blx	r3
}
    6c44:	bd70      	pop	{r4, r5, r6, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	00006c09 	.word	0x00006c09
    6c4c:	00002a11 	.word	0x00002a11

00006c50 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    6c50:	b530      	push	{r4, r5, lr}
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6c52:	2300      	movs	r3, #0
    6c54:	2b03      	cmp	r3, #3
    6c56:	dc0e      	bgt.n	6c76 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x26>
		if (taskSerialArray[ii].cb==(timer_cb_t)func)
    6c58:	009a      	lsls	r2, r3, #2
    6c5a:	18d2      	adds	r2, r2, r3
    6c5c:	0094      	lsls	r4, r2, #2
    6c5e:	4a06      	ldr	r2, [pc, #24]	; (6c78 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    6c60:	1912      	adds	r2, r2, r4
    6c62:	6b12      	ldr	r2, [r2, #48]	; 0x30
    6c64:	428a      	cmp	r2, r1
    6c66:	d002      	beq.n	6c6e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x1e>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    6c68:	3301      	adds	r3, #1
    6c6a:	b2db      	uxtb	r3, r3
    6c6c:	e7f2      	b.n	6c54 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4>
			task=&taskSerialArray[ii];
    6c6e:	4b02      	ldr	r3, [pc, #8]	; (6c78 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x28>)
    6c70:	3324      	adds	r3, #36	; 0x24
    6c72:	191b      	adds	r3, r3, r4
    6c74:	6083      	str	r3, [r0, #8]
}
    6c76:	bd30      	pop	{r4, r5, pc}
    6c78:	20001404 	.word	0x20001404

00006c7c <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    6c7c:	b510      	push	{r4, lr}
    6c7e:	0004      	movs	r4, r0
	GetTaskFunction(func);
    6c80:	4b08      	ldr	r3, [pc, #32]	; (6ca4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
    6c82:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
    6c84:	6920      	ldr	r0, [r4, #16]
    6c86:	3014      	adds	r0, #20
    6c88:	68a1      	ldr	r1, [r4, #8]
    6c8a:	4b07      	ldr	r3, [pc, #28]	; (6ca8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
    6c8c:	4798      	blx	r3
    6c8e:	2800      	cmp	r0, #0
    6c90:	d103      	bne.n	6c9a <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
    6c92:	68a3      	ldr	r3, [r4, #8]
    6c94:	2200      	movs	r2, #0
    6c96:	60da      	str	r2, [r3, #12]
}
    6c98:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
    6c9a:	68a1      	ldr	r1, [r4, #8]
    6c9c:	6920      	ldr	r0, [r4, #16]
    6c9e:	4b03      	ldr	r3, [pc, #12]	; (6cac <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
    6ca0:	4798      	blx	r3
    6ca2:	e7f6      	b.n	6c92 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
    6ca4:	00006c51 	.word	0x00006c51
    6ca8:	000033c9 	.word	0x000033c9
    6cac:	00002b39 	.word	0x00002b39

00006cb0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    6cb0:	b510      	push	{r4, lr}
    6cb2:	4902      	ldr	r1, [pc, #8]	; (6cbc <_GLOBAL__sub_I_ptrTimerSerialClass+0xc>)
    6cb4:	2001      	movs	r0, #1
    6cb6:	4b02      	ldr	r3, [pc, #8]	; (6cc0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    6cb8:	4798      	blx	r3
    6cba:	bd10      	pop	{r4, pc}
    6cbc:	0000ffff 	.word	0x0000ffff
    6cc0:	00006b31 	.word	0x00006b31

00006cc4 <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    6cc4:	b580      	push	{r7, lr}
    6cc6:	b084      	sub	sp, #16
    6cc8:	af00      	add	r7, sp, #0
    6cca:	60f8      	str	r0, [r7, #12]
    6ccc:	607a      	str	r2, [r7, #4]
    6cce:	230b      	movs	r3, #11
    6cd0:	18fb      	adds	r3, r7, r3
    6cd2:	1c0a      	adds	r2, r1, #0
    6cd4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    6cd6:	230b      	movs	r3, #11
    6cd8:	18fb      	adds	r3, r7, r3
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	68fa      	ldr	r2, [r7, #12]
    6cde:	01db      	lsls	r3, r3, #7
    6ce0:	18d3      	adds	r3, r2, r3
    6ce2:	331c      	adds	r3, #28
    6ce4:	687a      	ldr	r2, [r7, #4]
    6ce6:	601a      	str	r2, [r3, #0]
}
    6ce8:	46c0      	nop			; (mov r8, r8)
    6cea:	46bd      	mov	sp, r7
    6cec:	b004      	add	sp, #16
    6cee:	bd80      	pop	{r7, pc}

00006cf0 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    6cf0:	b580      	push	{r7, lr}
    6cf2:	b082      	sub	sp, #8
    6cf4:	af00      	add	r7, sp, #0
    6cf6:	0002      	movs	r2, r0
    6cf8:	6039      	str	r1, [r7, #0]
    6cfa:	1dfb      	adds	r3, r7, #7
    6cfc:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(PORT_IOBUS, port, mask);
    6cfe:	683a      	ldr	r2, [r7, #0]
    6d00:	1dfb      	adds	r3, r7, #7
    6d02:	7819      	ldrb	r1, [r3, #0]
    6d04:	23c0      	movs	r3, #192	; 0xc0
    6d06:	05db      	lsls	r3, r3, #23
    6d08:	0018      	movs	r0, r3
    6d0a:	4b03      	ldr	r3, [pc, #12]	; (6d18 <_gpio_toggle_level+0x28>)
    6d0c:	4798      	blx	r3
}
    6d0e:	46c0      	nop			; (mov r8, r8)
    6d10:	46bd      	mov	sp, r7
    6d12:	b002      	add	sp, #8
    6d14:	bd80      	pop	{r7, pc}
    6d16:	46c0      	nop			; (mov r8, r8)
    6d18:	00006cc5 	.word	0x00006cc5

00006d1c <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    6d1c:	b580      	push	{r7, lr}
    6d1e:	b082      	sub	sp, #8
    6d20:	af00      	add	r7, sp, #0
    6d22:	0002      	movs	r2, r0
    6d24:	1dfb      	adds	r3, r7, #7
    6d26:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    6d28:	1dfb      	adds	r3, r7, #7
    6d2a:	781b      	ldrb	r3, [r3, #0]
    6d2c:	115b      	asrs	r3, r3, #5
    6d2e:	b2d8      	uxtb	r0, r3
    6d30:	1dfb      	adds	r3, r7, #7
    6d32:	781b      	ldrb	r3, [r3, #0]
    6d34:	001a      	movs	r2, r3
    6d36:	231f      	movs	r3, #31
    6d38:	4013      	ands	r3, r2
    6d3a:	2201      	movs	r2, #1
    6d3c:	409a      	lsls	r2, r3
    6d3e:	0013      	movs	r3, r2
    6d40:	0019      	movs	r1, r3
    6d42:	4b03      	ldr	r3, [pc, #12]	; (6d50 <gpio_toggle_pin_level+0x34>)
    6d44:	4798      	blx	r3
}
    6d46:	46c0      	nop			; (mov r8, r8)
    6d48:	46bd      	mov	sp, r7
    6d4a:	b002      	add	sp, #8
    6d4c:	bd80      	pop	{r7, pc}
    6d4e:	46c0      	nop			; (mov r8, r8)
    6d50:	00006cf1 	.word	0x00006cf1

00006d54 <_ZN11ZCD_HandlerC1Ev>:
#include "CDC_Class.h"

static SPI_Syn_ZCD_Class local_spi;

// default constructor
ZCD_Handler::ZCD_Handler()
    6d54:	b580      	push	{r7, lr}
    6d56:	b082      	sub	sp, #8
    6d58:	af00      	add	r7, sp, #0
    6d5a:	6078      	str	r0, [r7, #4]
{
	spi=&local_spi;
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	4a05      	ldr	r2, [pc, #20]	; (6d74 <_ZN11ZCD_HandlerC1Ev+0x20>)
    6d60:	605a      	str	r2, [r3, #4]
	tone=0;
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	2200      	movs	r2, #0
    6d66:	601a      	str	r2, [r3, #0]
} //ZCD_Handler
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	0018      	movs	r0, r3
    6d6c:	46bd      	mov	sp, r7
    6d6e:	b002      	add	sp, #8
    6d70:	bd80      	pop	{r7, pc}
    6d72:	46c0      	nop			; (mov r8, r8)
    6d74:	20001478 	.word	0x20001478

00006d78 <_ZN11ZCD_HandlerD1Ev>:

// default destructor
ZCD_Handler::~ZCD_Handler()
    6d78:	b580      	push	{r7, lr}
    6d7a:	b082      	sub	sp, #8
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
{
} //~ZCD_Handler
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	0018      	movs	r0, r3
    6d84:	46bd      	mov	sp, r7
    6d86:	b002      	add	sp, #8
    6d88:	bd80      	pop	{r7, pc}
	...

00006d8c <_ZN11ZCD_Handler4InitEv>:

bool ZCD_Handler::Init(){
    6d8c:	b580      	push	{r7, lr}
    6d8e:	b082      	sub	sp, #8
    6d90:	af00      	add	r7, sp, #0
    6d92:	6078      	str	r0, [r7, #4]
	spi->Init();
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	685b      	ldr	r3, [r3, #4]
    6d98:	0018      	movs	r0, r3
    6d9a:	4b03      	ldr	r3, [pc, #12]	; (6da8 <_ZN11ZCD_Handler4InitEv+0x1c>)
    6d9c:	4798      	blx	r3
	return true;
    6d9e:	2301      	movs	r3, #1
}
    6da0:	0018      	movs	r0, r3
    6da2:	46bd      	mov	sp, r7
    6da4:	b002      	add	sp, #8
    6da6:	bd80      	pop	{r7, pc}
    6da8:	00007069 	.word	0x00007069

00006dac <_ZN11ZCD_Handler8Get_ToneEv>:

uint32_t ZCD_Handler::Get_Tone(){
    6dac:	b580      	push	{r7, lr}
    6dae:	b084      	sub	sp, #16
    6db0:	af00      	add	r7, sp, #0
    6db2:	6078      	str	r0, [r7, #4]
	command=0x01;
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	2201      	movs	r2, #1
    6db8:	721a      	strb	r2, [r3, #8]
	spi->SetCS(false);
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	685b      	ldr	r3, [r3, #4]
    6dbe:	2100      	movs	r1, #0
    6dc0:	0018      	movs	r0, r3
    6dc2:	4b43      	ldr	r3, [pc, #268]	; (6ed0 <_ZN11ZCD_Handler8Get_ToneEv+0x124>)
    6dc4:	4798      	blx	r3
	spi->Write(&command,1);
    6dc6:	687b      	ldr	r3, [r7, #4]
    6dc8:	6858      	ldr	r0, [r3, #4]
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	3308      	adds	r3, #8
    6dce:	2201      	movs	r2, #1
    6dd0:	0019      	movs	r1, r3
    6dd2:	4b40      	ldr	r3, [pc, #256]	; (6ed4 <_ZN11ZCD_Handler8Get_ToneEv+0x128>)
    6dd4:	4798      	blx	r3
	spi->SetCS(true);
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	685b      	ldr	r3, [r3, #4]
    6dda:	2101      	movs	r1, #1
    6ddc:	0018      	movs	r0, r3
    6dde:	4b3c      	ldr	r3, [pc, #240]	; (6ed0 <_ZN11ZCD_Handler8Get_ToneEv+0x124>)
    6de0:	4798      	blx	r3
	delay_ms(10);
    6de2:	200a      	movs	r0, #10
    6de4:	4b3c      	ldr	r3, [pc, #240]	; (6ed8 <_ZN11ZCD_Handler8Get_ToneEv+0x12c>)
    6de6:	4798      	blx	r3
	spi->SetCS(false);
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	685b      	ldr	r3, [r3, #4]
    6dec:	2100      	movs	r1, #0
    6dee:	0018      	movs	r0, r3
    6df0:	4b37      	ldr	r3, [pc, #220]	; (6ed0 <_ZN11ZCD_Handler8Get_ToneEv+0x124>)
    6df2:	4798      	blx	r3
	spi->Read(read_buffer,4);
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	6858      	ldr	r0, [r3, #4]
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	3309      	adds	r3, #9
    6dfc:	2204      	movs	r2, #4
    6dfe:	0019      	movs	r1, r3
    6e00:	4b36      	ldr	r3, [pc, #216]	; (6edc <_ZN11ZCD_Handler8Get_ToneEv+0x130>)
    6e02:	4798      	blx	r3
	spi->SetCS(true);
    6e04:	687b      	ldr	r3, [r7, #4]
    6e06:	685b      	ldr	r3, [r3, #4]
    6e08:	2101      	movs	r1, #1
    6e0a:	0018      	movs	r0, r3
    6e0c:	4b30      	ldr	r3, [pc, #192]	; (6ed0 <_ZN11ZCD_Handler8Get_ToneEv+0x124>)
    6e0e:	4798      	blx	r3
	last_tone=tone;
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	681a      	ldr	r2, [r3, #0]
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	611a      	str	r2, [r3, #16]
	tone=0;
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	2200      	movs	r2, #0
    6e1c:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
    6e1e:	2300      	movs	r3, #0
    6e20:	60fb      	str	r3, [r7, #12]
    6e22:	68fb      	ldr	r3, [r7, #12]
    6e24:	2b03      	cmp	r3, #3
    6e26:	dc3c      	bgt.n	6ea2 <_ZN11ZCD_Handler8Get_ToneEv+0xf6>
	{
		if (i==0)
    6e28:	68fb      	ldr	r3, [r7, #12]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d124      	bne.n	6e78 <_ZN11ZCD_Handler8Get_ToneEv+0xcc>
		{
			if (read_buffer[i]&0xa0)
    6e2e:	687a      	ldr	r2, [r7, #4]
    6e30:	68fb      	ldr	r3, [r7, #12]
    6e32:	18d3      	adds	r3, r2, r3
    6e34:	3309      	adds	r3, #9
    6e36:	781b      	ldrb	r3, [r3, #0]
    6e38:	001a      	movs	r2, r3
    6e3a:	23a0      	movs	r3, #160	; 0xa0
    6e3c:	4013      	ands	r3, r2
    6e3e:	d017      	beq.n	6e70 <_ZN11ZCD_Handler8Get_ToneEv+0xc4>
			{
				tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	681b      	ldr	r3, [r3, #0]
    6e44:	6879      	ldr	r1, [r7, #4]
    6e46:	68fa      	ldr	r2, [r7, #12]
    6e48:	188a      	adds	r2, r1, r2
    6e4a:	3209      	adds	r2, #9
    6e4c:	7812      	ldrb	r2, [r2, #0]
    6e4e:	0010      	movs	r0, r2
    6e50:	68fa      	ldr	r2, [r7, #12]
    6e52:	2103      	movs	r1, #3
    6e54:	1a8a      	subs	r2, r1, r2
    6e56:	00d2      	lsls	r2, r2, #3
    6e58:	4090      	lsls	r0, r2
    6e5a:	0002      	movs	r2, r0
    6e5c:	431a      	orrs	r2, r3
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	601a      	str	r2, [r3, #0]
				tone&=0x0fffffff;
    6e62:	687b      	ldr	r3, [r7, #4]
    6e64:	681b      	ldr	r3, [r3, #0]
    6e66:	011b      	lsls	r3, r3, #4
    6e68:	091a      	lsrs	r2, r3, #4
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	601a      	str	r2, [r3, #0]
    6e6e:	e014      	b.n	6e9a <_ZN11ZCD_Handler8Get_ToneEv+0xee>
			} 
			else
			{
				tone=170000000;
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	4a1b      	ldr	r2, [pc, #108]	; (6ee0 <_ZN11ZCD_Handler8Get_ToneEv+0x134>)
    6e74:	601a      	str	r2, [r3, #0]
				break;
    6e76:	e014      	b.n	6ea2 <_ZN11ZCD_Handler8Get_ToneEv+0xf6>
			}
			
		} 
		else
		{
			tone|=(uint32_t)(read_buffer[i]<<(8*(3-i)));
    6e78:	687b      	ldr	r3, [r7, #4]
    6e7a:	681b      	ldr	r3, [r3, #0]
    6e7c:	6879      	ldr	r1, [r7, #4]
    6e7e:	68fa      	ldr	r2, [r7, #12]
    6e80:	188a      	adds	r2, r1, r2
    6e82:	3209      	adds	r2, #9
    6e84:	7812      	ldrb	r2, [r2, #0]
    6e86:	0010      	movs	r0, r2
    6e88:	68fa      	ldr	r2, [r7, #12]
    6e8a:	2103      	movs	r1, #3
    6e8c:	1a8a      	subs	r2, r1, r2
    6e8e:	00d2      	lsls	r2, r2, #3
    6e90:	4090      	lsls	r0, r2
    6e92:	0002      	movs	r2, r0
    6e94:	431a      	orrs	r2, r3
    6e96:	687b      	ldr	r3, [r7, #4]
    6e98:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < 4; i++)
    6e9a:	68fb      	ldr	r3, [r7, #12]
    6e9c:	3301      	adds	r3, #1
    6e9e:	60fb      	str	r3, [r7, #12]
    6ea0:	e7bf      	b.n	6e22 <_ZN11ZCD_Handler8Get_ToneEv+0x76>
		}
		
	}
	if (tone>0)
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	681b      	ldr	r3, [r3, #0]
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d008      	beq.n	6ebc <_ZN11ZCD_Handler8Get_ToneEv+0x110>
	{
	
		if (tone<170000001)
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	681b      	ldr	r3, [r3, #0]
    6eae:	4a0c      	ldr	r2, [pc, #48]	; (6ee0 <_ZN11ZCD_Handler8Get_ToneEv+0x134>)
    6eb0:	4293      	cmp	r3, r2
    6eb2:	d807      	bhi.n	6ec4 <_ZN11ZCD_Handler8Get_ToneEv+0x118>
		{
			gpio_toggle_pin_level(LED0);
    6eb4:	203e      	movs	r0, #62	; 0x3e
    6eb6:	4b0b      	ldr	r3, [pc, #44]	; (6ee4 <_ZN11ZCD_Handler8Get_ToneEv+0x138>)
    6eb8:	4798      	blx	r3
    6eba:	e003      	b.n	6ec4 <_ZN11ZCD_Handler8Get_ToneEv+0x118>
		}
		
	} 
	else
	{
		tone=last_tone;
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	691a      	ldr	r2, [r3, #16]
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	601a      	str	r2, [r3, #0]
	}
	//usb<<"tone: "<<tone<<TAB_SPACE;
	return tone;
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	681b      	ldr	r3, [r3, #0]
    6ec8:	0018      	movs	r0, r3
    6eca:	46bd      	mov	sp, r7
    6ecc:	b004      	add	sp, #16
    6ece:	bd80      	pop	{r7, pc}
    6ed0:	00007139 	.word	0x00007139
    6ed4:	000070c9 	.word	0x000070c9
    6ed8:	000025c1 	.word	0x000025c1
    6edc:	00007101 	.word	0x00007101
    6ee0:	0a21fe80 	.word	0x0a21fe80
    6ee4:	00006d1d 	.word	0x00006d1d

00006ee8 <_Z41__static_initialization_and_destruction_0ii>:
    6ee8:	b580      	push	{r7, lr}
    6eea:	b082      	sub	sp, #8
    6eec:	af00      	add	r7, sp, #0
    6eee:	6078      	str	r0, [r7, #4]
    6ef0:	6039      	str	r1, [r7, #0]
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	2b01      	cmp	r3, #1
    6ef6:	d10d      	bne.n	6f14 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    6ef8:	683b      	ldr	r3, [r7, #0]
    6efa:	4a08      	ldr	r2, [pc, #32]	; (6f1c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    6efc:	4293      	cmp	r3, r2
    6efe:	d109      	bne.n	6f14 <_Z41__static_initialization_and_destruction_0ii+0x2c>
static SPI_Syn_ZCD_Class local_spi;
    6f00:	4b07      	ldr	r3, [pc, #28]	; (6f20 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6f02:	0018      	movs	r0, r3
    6f04:	4b07      	ldr	r3, [pc, #28]	; (6f24 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    6f06:	4798      	blx	r3
    6f08:	4a07      	ldr	r2, [pc, #28]	; (6f28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    6f0a:	4908      	ldr	r1, [pc, #32]	; (6f2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    6f0c:	4b04      	ldr	r3, [pc, #16]	; (6f20 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    6f0e:	0018      	movs	r0, r3
    6f10:	4b07      	ldr	r3, [pc, #28]	; (6f30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    6f12:	4798      	blx	r3
    6f14:	46c0      	nop			; (mov r8, r8)
    6f16:	46bd      	mov	sp, r7
    6f18:	b002      	add	sp, #8
    6f1a:	bd80      	pop	{r7, pc}
    6f1c:	0000ffff 	.word	0x0000ffff
    6f20:	20001478 	.word	0x20001478
    6f24:	00007039 	.word	0x00007039
    6f28:	20000000 	.word	0x20000000
    6f2c:	00007055 	.word	0x00007055
    6f30:	00007161 	.word	0x00007161

00006f34 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev>:
    6f34:	b580      	push	{r7, lr}
    6f36:	af00      	add	r7, sp, #0
    6f38:	4b03      	ldr	r3, [pc, #12]	; (6f48 <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x14>)
    6f3a:	0019      	movs	r1, r3
    6f3c:	2001      	movs	r0, #1
    6f3e:	4b03      	ldr	r3, [pc, #12]	; (6f4c <_GLOBAL__sub_I__ZN11ZCD_HandlerC2Ev+0x18>)
    6f40:	4798      	blx	r3
    6f42:	46bd      	mov	sp, r7
    6f44:	bd80      	pop	{r7, pc}
    6f46:	46c0      	nop			; (mov r8, r8)
    6f48:	0000ffff 	.word	0x0000ffff
    6f4c:	00006ee9 	.word	0x00006ee9

00006f50 <hri_port_set_OUT_reg>:
{
    6f50:	b580      	push	{r7, lr}
    6f52:	b084      	sub	sp, #16
    6f54:	af00      	add	r7, sp, #0
    6f56:	60f8      	str	r0, [r7, #12]
    6f58:	607a      	str	r2, [r7, #4]
    6f5a:	230b      	movs	r3, #11
    6f5c:	18fb      	adds	r3, r7, r3
    6f5e:	1c0a      	adds	r2, r1, #0
    6f60:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f62:	230b      	movs	r3, #11
    6f64:	18fb      	adds	r3, r7, r3
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	68fa      	ldr	r2, [r7, #12]
    6f6a:	01db      	lsls	r3, r3, #7
    6f6c:	18d3      	adds	r3, r2, r3
    6f6e:	3318      	adds	r3, #24
    6f70:	687a      	ldr	r2, [r7, #4]
    6f72:	601a      	str	r2, [r3, #0]
}
    6f74:	46c0      	nop			; (mov r8, r8)
    6f76:	46bd      	mov	sp, r7
    6f78:	b004      	add	sp, #16
    6f7a:	bd80      	pop	{r7, pc}

00006f7c <hri_port_clear_OUT_reg>:
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b084      	sub	sp, #16
    6f80:	af00      	add	r7, sp, #0
    6f82:	60f8      	str	r0, [r7, #12]
    6f84:	607a      	str	r2, [r7, #4]
    6f86:	230b      	movs	r3, #11
    6f88:	18fb      	adds	r3, r7, r3
    6f8a:	1c0a      	adds	r2, r1, #0
    6f8c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6f8e:	230b      	movs	r3, #11
    6f90:	18fb      	adds	r3, r7, r3
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	68fa      	ldr	r2, [r7, #12]
    6f96:	01db      	lsls	r3, r3, #7
    6f98:	18d3      	adds	r3, r2, r3
    6f9a:	3314      	adds	r3, #20
    6f9c:	687a      	ldr	r2, [r7, #4]
    6f9e:	601a      	str	r2, [r3, #0]
}
    6fa0:	46c0      	nop			; (mov r8, r8)
    6fa2:	46bd      	mov	sp, r7
    6fa4:	b004      	add	sp, #16
    6fa6:	bd80      	pop	{r7, pc}

00006fa8 <_gpio_set_level>:
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b082      	sub	sp, #8
    6fac:	af00      	add	r7, sp, #0
    6fae:	6039      	str	r1, [r7, #0]
    6fb0:	0011      	movs	r1, r2
    6fb2:	1dfb      	adds	r3, r7, #7
    6fb4:	1c02      	adds	r2, r0, #0
    6fb6:	701a      	strb	r2, [r3, #0]
    6fb8:	1dbb      	adds	r3, r7, #6
    6fba:	1c0a      	adds	r2, r1, #0
    6fbc:	701a      	strb	r2, [r3, #0]
	if (level) {
    6fbe:	1dbb      	adds	r3, r7, #6
    6fc0:	781b      	ldrb	r3, [r3, #0]
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d008      	beq.n	6fd8 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    6fc6:	683a      	ldr	r2, [r7, #0]
    6fc8:	1dfb      	adds	r3, r7, #7
    6fca:	7819      	ldrb	r1, [r3, #0]
    6fcc:	23c0      	movs	r3, #192	; 0xc0
    6fce:	05db      	lsls	r3, r3, #23
    6fd0:	0018      	movs	r0, r3
    6fd2:	4b07      	ldr	r3, [pc, #28]	; (6ff0 <_gpio_set_level+0x48>)
    6fd4:	4798      	blx	r3
}
    6fd6:	e007      	b.n	6fe8 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    6fd8:	683a      	ldr	r2, [r7, #0]
    6fda:	1dfb      	adds	r3, r7, #7
    6fdc:	7819      	ldrb	r1, [r3, #0]
    6fde:	23c0      	movs	r3, #192	; 0xc0
    6fe0:	05db      	lsls	r3, r3, #23
    6fe2:	0018      	movs	r0, r3
    6fe4:	4b03      	ldr	r3, [pc, #12]	; (6ff4 <_gpio_set_level+0x4c>)
    6fe6:	4798      	blx	r3
}
    6fe8:	46c0      	nop			; (mov r8, r8)
    6fea:	46bd      	mov	sp, r7
    6fec:	b002      	add	sp, #8
    6fee:	bd80      	pop	{r7, pc}
    6ff0:	00006f51 	.word	0x00006f51
    6ff4:	00006f7d 	.word	0x00006f7d

00006ff8 <gpio_set_pin_level>:
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	b082      	sub	sp, #8
    6ffc:	af00      	add	r7, sp, #0
    6ffe:	0002      	movs	r2, r0
    7000:	1dfb      	adds	r3, r7, #7
    7002:	701a      	strb	r2, [r3, #0]
    7004:	1dbb      	adds	r3, r7, #6
    7006:	1c0a      	adds	r2, r1, #0
    7008:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    700a:	1dfb      	adds	r3, r7, #7
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	115b      	asrs	r3, r3, #5
    7010:	b2d8      	uxtb	r0, r3
    7012:	1dfb      	adds	r3, r7, #7
    7014:	781b      	ldrb	r3, [r3, #0]
    7016:	001a      	movs	r2, r3
    7018:	231f      	movs	r3, #31
    701a:	4013      	ands	r3, r2
    701c:	2201      	movs	r2, #1
    701e:	409a      	lsls	r2, r3
    7020:	0011      	movs	r1, r2
    7022:	1dbb      	adds	r3, r7, #6
    7024:	781b      	ldrb	r3, [r3, #0]
    7026:	001a      	movs	r2, r3
    7028:	4b02      	ldr	r3, [pc, #8]	; (7034 <gpio_set_pin_level+0x3c>)
    702a:	4798      	blx	r3
}
    702c:	46c0      	nop			; (mov r8, r8)
    702e:	46bd      	mov	sp, r7
    7030:	b002      	add	sp, #8
    7032:	bd80      	pop	{r7, pc}
    7034:	00006fa9 	.word	0x00006fa9

00007038 <_ZN17SPI_Syn_ZCD_ClassC1Ev>:
SPI_Syn_ZCD_Class	*ptrSPISyncZCD;



// default constructor
SPI_Syn_ZCD_Class::SPI_Syn_ZCD_Class()
    7038:	b580      	push	{r7, lr}
    703a:	b082      	sub	sp, #8
    703c:	af00      	add	r7, sp, #0
    703e:	6078      	str	r0, [r7, #4]
{
		ptrSPISyncZCD=this;
    7040:	4b03      	ldr	r3, [pc, #12]	; (7050 <_ZN17SPI_Syn_ZCD_ClassC1Ev+0x18>)
    7042:	687a      	ldr	r2, [r7, #4]
    7044:	601a      	str	r2, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	0018      	movs	r0, r3
    704a:	46bd      	mov	sp, r7
    704c:	b002      	add	sp, #8
    704e:	bd80      	pop	{r7, pc}
    7050:	20001488 	.word	0x20001488

00007054 <_ZN17SPI_Syn_ZCD_ClassD1Ev>:



// default destructor
SPI_Syn_ZCD_Class::~SPI_Syn_ZCD_Class()
    7054:	b580      	push	{r7, lr}
    7056:	b082      	sub	sp, #8
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	0018      	movs	r0, r3
    7060:	46bd      	mov	sp, r7
    7062:	b002      	add	sp, #8
    7064:	bd80      	pop	{r7, pc}
	...

00007068 <_ZN17SPI_Syn_ZCD_Class4InitEv>:

void SPI_Syn_ZCD_Class::Init(){
    7068:	b580      	push	{r7, lr}
    706a:	b082      	sub	sp, #8
    706c:	af00      	add	r7, sp, #0
    706e:	6078      	str	r0, [r7, #4]

		spi_m_sync_get_io_descriptor(&SPI_ZCD, &io);
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	330c      	adds	r3, #12
    7074:	001a      	movs	r2, r3
    7076:	4b08      	ldr	r3, [pc, #32]	; (7098 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x30>)
    7078:	0011      	movs	r1, r2
    707a:	0018      	movs	r0, r3
    707c:	4b07      	ldr	r3, [pc, #28]	; (709c <_ZN17SPI_Syn_ZCD_Class4InitEv+0x34>)
    707e:	4798      	blx	r3

	Enable();
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	0018      	movs	r0, r3
    7084:	4b06      	ldr	r3, [pc, #24]	; (70a0 <_ZN17SPI_Syn_ZCD_Class4InitEv+0x38>)
    7086:	4798      	blx	r3
	ready=true;
    7088:	687b      	ldr	r3, [r7, #4]
    708a:	2201      	movs	r2, #1
    708c:	701a      	strb	r2, [r3, #0]
	
}
    708e:	46c0      	nop			; (mov r8, r8)
    7090:	46bd      	mov	sp, r7
    7092:	b002      	add	sp, #8
    7094:	bd80      	pop	{r7, pc}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	20001568 	.word	0x20001568
    709c:	000028e1 	.word	0x000028e1
    70a0:	000070a5 	.word	0x000070a5

000070a4 <_ZN17SPI_Syn_ZCD_Class6EnableEv>:



uint8_t SPI_Syn_ZCD_Class::Enable(){
    70a4:	b580      	push	{r7, lr}
    70a6:	b082      	sub	sp, #8
    70a8:	af00      	add	r7, sp, #0
    70aa:	6078      	str	r0, [r7, #4]
	
	spi_m_sync_enable(&SPI_ZCD);
    70ac:	4b04      	ldr	r3, [pc, #16]	; (70c0 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x1c>)
    70ae:	0018      	movs	r0, r3
    70b0:	4b04      	ldr	r3, [pc, #16]	; (70c4 <_ZN17SPI_Syn_ZCD_Class6EnableEv+0x20>)
    70b2:	4798      	blx	r3
	return 0;
    70b4:	2300      	movs	r3, #0
}
    70b6:	0018      	movs	r0, r3
    70b8:	46bd      	mov	sp, r7
    70ba:	b002      	add	sp, #8
    70bc:	bd80      	pop	{r7, pc}
    70be:	46c0      	nop			; (mov r8, r8)
    70c0:	20001568 	.word	0x20001568
    70c4:	000027f9 	.word	0x000027f9

000070c8 <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh>:

uint8_t  SPI_Syn_ZCD_Class::Write(const uint8_t * p, uint8_t n){
    70c8:	b580      	push	{r7, lr}
    70ca:	b084      	sub	sp, #16
    70cc:	af00      	add	r7, sp, #0
    70ce:	60f8      	str	r0, [r7, #12]
    70d0:	60b9      	str	r1, [r7, #8]
    70d2:	1dfb      	adds	r3, r7, #7
    70d4:	701a      	strb	r2, [r3, #0]
	ready=false;
    70d6:	68fb      	ldr	r3, [r7, #12]
    70d8:	2200      	movs	r2, #0
    70da:	701a      	strb	r2, [r3, #0]
	io_write(io, p, (uint16_t)n);
    70dc:	68fb      	ldr	r3, [r7, #12]
    70de:	68d8      	ldr	r0, [r3, #12]
    70e0:	1dfb      	adds	r3, r7, #7
    70e2:	781b      	ldrb	r3, [r3, #0]
    70e4:	b29a      	uxth	r2, r3
    70e6:	68bb      	ldr	r3, [r7, #8]
    70e8:	0019      	movs	r1, r3
    70ea:	4b04      	ldr	r3, [pc, #16]	; (70fc <_ZN17SPI_Syn_ZCD_Class5WriteEPKhh+0x34>)
    70ec:	4798      	blx	r3

	return n;
    70ee:	1dfb      	adds	r3, r7, #7
    70f0:	781b      	ldrb	r3, [r3, #0]
}
    70f2:	0018      	movs	r0, r3
    70f4:	46bd      	mov	sp, r7
    70f6:	b004      	add	sp, #16
    70f8:	bd80      	pop	{r7, pc}
    70fa:	46c0      	nop			; (mov r8, r8)
    70fc:	00002731 	.word	0x00002731

00007100 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh>:
uint8_t  SPI_Syn_ZCD_Class::Read(uint8_t * p, uint8_t n){
    7100:	b580      	push	{r7, lr}
    7102:	b084      	sub	sp, #16
    7104:	af00      	add	r7, sp, #0
    7106:	60f8      	str	r0, [r7, #12]
    7108:	60b9      	str	r1, [r7, #8]
    710a:	1dfb      	adds	r3, r7, #7
    710c:	701a      	strb	r2, [r3, #0]
	ready=false;
    710e:	68fb      	ldr	r3, [r7, #12]
    7110:	2200      	movs	r2, #0
    7112:	701a      	strb	r2, [r3, #0]
		io_read(io, p, (uint16_t)n);
    7114:	68fb      	ldr	r3, [r7, #12]
    7116:	68d8      	ldr	r0, [r3, #12]
    7118:	1dfb      	adds	r3, r7, #7
    711a:	781b      	ldrb	r3, [r3, #0]
    711c:	b29a      	uxth	r2, r3
    711e:	68bb      	ldr	r3, [r7, #8]
    7120:	0019      	movs	r1, r3
    7122:	4b04      	ldr	r3, [pc, #16]	; (7134 <_ZN17SPI_Syn_ZCD_Class4ReadEPhh+0x34>)
    7124:	4798      	blx	r3

	
	return n;
    7126:	1dfb      	adds	r3, r7, #7
    7128:	781b      	ldrb	r3, [r3, #0]
}
    712a:	0018      	movs	r0, r3
    712c:	46bd      	mov	sp, r7
    712e:	b004      	add	sp, #16
    7130:	bd80      	pop	{r7, pc}
    7132:	46c0      	nop			; (mov r8, r8)
    7134:	00002769 	.word	0x00002769

00007138 <_ZN17SPI_Syn_ZCD_Class5SetCSEb>:
void SPI_Syn_ZCD_Class::Disable(void){
	//SPI_LMX_disable();
	spi_m_sync_disable(&SPI_ZCD);
	
}
void SPI_Syn_ZCD_Class::SetCS(bool st){
    7138:	b580      	push	{r7, lr}
    713a:	b082      	sub	sp, #8
    713c:	af00      	add	r7, sp, #0
    713e:	6078      	str	r0, [r7, #4]
    7140:	000a      	movs	r2, r1
    7142:	1cfb      	adds	r3, r7, #3
    7144:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(CS_ZCD,st);
    7146:	1cfb      	adds	r3, r7, #3
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	0019      	movs	r1, r3
    714c:	2003      	movs	r0, #3
    714e:	4b03      	ldr	r3, [pc, #12]	; (715c <_ZN17SPI_Syn_ZCD_Class5SetCSEb+0x24>)
    7150:	4798      	blx	r3
}
    7152:	46c0      	nop			; (mov r8, r8)
    7154:	46bd      	mov	sp, r7
    7156:	b002      	add	sp, #8
    7158:	bd80      	pop	{r7, pc}
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	00006ff9 	.word	0x00006ff9

00007160 <__aeabi_atexit>:
    7160:	000b      	movs	r3, r1
    7162:	b510      	push	{r4, lr}
    7164:	0001      	movs	r1, r0
    7166:	0018      	movs	r0, r3
    7168:	f004 ff44 	bl	bff4 <__cxa_atexit>
    716c:	bd10      	pop	{r4, pc}
    716e:	46c0      	nop			; (mov r8, r8)

00007170 <floor>:
    7170:	4a45      	ldr	r2, [pc, #276]	; (7288 <floor+0x118>)
    7172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7174:	4657      	mov	r7, sl
    7176:	4692      	mov	sl, r2
    7178:	004b      	lsls	r3, r1, #1
    717a:	0d5b      	lsrs	r3, r3, #21
    717c:	449a      	add	sl, r3
    717e:	464e      	mov	r6, r9
    7180:	4645      	mov	r5, r8
    7182:	46de      	mov	lr, fp
    7184:	4652      	mov	r2, sl
    7186:	b5e0      	push	{r5, r6, r7, lr}
    7188:	000c      	movs	r4, r1
    718a:	0005      	movs	r5, r0
    718c:	000e      	movs	r6, r1
    718e:	4689      	mov	r9, r1
    7190:	0007      	movs	r7, r0
    7192:	2a13      	cmp	r2, #19
    7194:	dc22      	bgt.n	71dc <floor+0x6c>
    7196:	2a00      	cmp	r2, #0
    7198:	db47      	blt.n	722a <floor+0xba>
    719a:	4652      	mov	r2, sl
    719c:	4b3b      	ldr	r3, [pc, #236]	; (728c <floor+0x11c>)
    719e:	4113      	asrs	r3, r2
    71a0:	4698      	mov	r8, r3
    71a2:	000b      	movs	r3, r1
    71a4:	4642      	mov	r2, r8
    71a6:	4013      	ands	r3, r2
    71a8:	4303      	orrs	r3, r0
    71aa:	d011      	beq.n	71d0 <floor+0x60>
    71ac:	4a38      	ldr	r2, [pc, #224]	; (7290 <floor+0x120>)
    71ae:	4b39      	ldr	r3, [pc, #228]	; (7294 <floor+0x124>)
    71b0:	f003 f852 	bl	a258 <__aeabi_dadd>
    71b4:	2200      	movs	r2, #0
    71b6:	2300      	movs	r3, #0
    71b8:	f001 ffec 	bl	9194 <__aeabi_dcmpgt>
    71bc:	2800      	cmp	r0, #0
    71be:	d005      	beq.n	71cc <floor+0x5c>
    71c0:	2c00      	cmp	r4, #0
    71c2:	db41      	blt.n	7248 <floor+0xd8>
    71c4:	464e      	mov	r6, r9
    71c6:	4643      	mov	r3, r8
    71c8:	2700      	movs	r7, #0
    71ca:	439e      	bics	r6, r3
    71cc:	0038      	movs	r0, r7
    71ce:	0031      	movs	r1, r6
    71d0:	bc3c      	pop	{r2, r3, r4, r5}
    71d2:	4690      	mov	r8, r2
    71d4:	4699      	mov	r9, r3
    71d6:	46a2      	mov	sl, r4
    71d8:	46ab      	mov	fp, r5
    71da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71dc:	4652      	mov	r2, sl
    71de:	2a33      	cmp	r2, #51	; 0x33
    71e0:	dd08      	ble.n	71f4 <floor+0x84>
    71e2:	2380      	movs	r3, #128	; 0x80
    71e4:	00db      	lsls	r3, r3, #3
    71e6:	459a      	cmp	sl, r3
    71e8:	d1f2      	bne.n	71d0 <floor+0x60>
    71ea:	0002      	movs	r2, r0
    71ec:	000b      	movs	r3, r1
    71ee:	f003 f833 	bl	a258 <__aeabi_dadd>
    71f2:	e7ed      	b.n	71d0 <floor+0x60>
    71f4:	4a28      	ldr	r2, [pc, #160]	; (7298 <floor+0x128>)
    71f6:	4694      	mov	ip, r2
    71f8:	2201      	movs	r2, #1
    71fa:	4463      	add	r3, ip
    71fc:	4252      	negs	r2, r2
    71fe:	40da      	lsrs	r2, r3
    7200:	4693      	mov	fp, r2
    7202:	4202      	tst	r2, r0
    7204:	d0e4      	beq.n	71d0 <floor+0x60>
    7206:	4a22      	ldr	r2, [pc, #136]	; (7290 <floor+0x120>)
    7208:	4b22      	ldr	r3, [pc, #136]	; (7294 <floor+0x124>)
    720a:	f003 f825 	bl	a258 <__aeabi_dadd>
    720e:	2200      	movs	r2, #0
    7210:	2300      	movs	r3, #0
    7212:	f001 ffbf 	bl	9194 <__aeabi_dcmpgt>
    7216:	2800      	cmp	r0, #0
    7218:	d0d8      	beq.n	71cc <floor+0x5c>
    721a:	2c00      	cmp	r4, #0
    721c:	db1a      	blt.n	7254 <floor+0xe4>
    721e:	465b      	mov	r3, fp
    7220:	464e      	mov	r6, r9
    7222:	439f      	bics	r7, r3
    7224:	0038      	movs	r0, r7
    7226:	0031      	movs	r1, r6
    7228:	e7d2      	b.n	71d0 <floor+0x60>
    722a:	4a19      	ldr	r2, [pc, #100]	; (7290 <floor+0x120>)
    722c:	4b19      	ldr	r3, [pc, #100]	; (7294 <floor+0x124>)
    722e:	f003 f813 	bl	a258 <__aeabi_dadd>
    7232:	2200      	movs	r2, #0
    7234:	2300      	movs	r3, #0
    7236:	f001 ffad 	bl	9194 <__aeabi_dcmpgt>
    723a:	2800      	cmp	r0, #0
    723c:	d0c6      	beq.n	71cc <floor+0x5c>
    723e:	2c00      	cmp	r4, #0
    7240:	db16      	blt.n	7270 <floor+0x100>
    7242:	2700      	movs	r7, #0
    7244:	2600      	movs	r6, #0
    7246:	e7c1      	b.n	71cc <floor+0x5c>
    7248:	2380      	movs	r3, #128	; 0x80
    724a:	4652      	mov	r2, sl
    724c:	035b      	lsls	r3, r3, #13
    724e:	4113      	asrs	r3, r2
    7250:	4499      	add	r9, r3
    7252:	e7b7      	b.n	71c4 <floor+0x54>
    7254:	4653      	mov	r3, sl
    7256:	2b14      	cmp	r3, #20
    7258:	d012      	beq.n	7280 <floor+0x110>
    725a:	2334      	movs	r3, #52	; 0x34
    725c:	4652      	mov	r2, sl
    725e:	2701      	movs	r7, #1
    7260:	1a9b      	subs	r3, r3, r2
    7262:	409f      	lsls	r7, r3
    7264:	197f      	adds	r7, r7, r5
    7266:	42af      	cmp	r7, r5
    7268:	419b      	sbcs	r3, r3
    726a:	425b      	negs	r3, r3
    726c:	4499      	add	r9, r3
    726e:	e7d6      	b.n	721e <floor+0xae>
    7270:	0064      	lsls	r4, r4, #1
    7272:	0864      	lsrs	r4, r4, #1
    7274:	4325      	orrs	r5, r4
    7276:	2700      	movs	r7, #0
    7278:	2d00      	cmp	r5, #0
    727a:	d0a7      	beq.n	71cc <floor+0x5c>
    727c:	4e07      	ldr	r6, [pc, #28]	; (729c <floor+0x12c>)
    727e:	e7a5      	b.n	71cc <floor+0x5c>
    7280:	3b13      	subs	r3, #19
    7282:	469c      	mov	ip, r3
    7284:	44e1      	add	r9, ip
    7286:	e7ca      	b.n	721e <floor+0xae>
    7288:	fffffc01 	.word	0xfffffc01
    728c:	000fffff 	.word	0x000fffff
    7290:	8800759c 	.word	0x8800759c
    7294:	7e37e43c 	.word	0x7e37e43c
    7298:	fffffbed 	.word	0xfffffbed
    729c:	bff00000 	.word	0xbff00000

000072a0 <floorf>:
    72a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72a2:	46c6      	mov	lr, r8
    72a4:	0043      	lsls	r3, r0, #1
    72a6:	085f      	lsrs	r7, r3, #1
    72a8:	0e1b      	lsrs	r3, r3, #24
    72aa:	3b7f      	subs	r3, #127	; 0x7f
    72ac:	b500      	push	{lr}
    72ae:	1c05      	adds	r5, r0, #0
    72b0:	001c      	movs	r4, r3
    72b2:	2b16      	cmp	r3, #22
    72b4:	dc18      	bgt.n	72e8 <floorf+0x48>
    72b6:	4680      	mov	r8, r0
    72b8:	2b00      	cmp	r3, #0
    72ba:	db1e      	blt.n	72fa <floorf+0x5a>
    72bc:	4f1b      	ldr	r7, [pc, #108]	; (732c <floorf+0x8c>)
    72be:	1c06      	adds	r6, r0, #0
    72c0:	411f      	asrs	r7, r3
    72c2:	4207      	tst	r7, r0
    72c4:	d00c      	beq.n	72e0 <floorf+0x40>
    72c6:	491a      	ldr	r1, [pc, #104]	; (7330 <floorf+0x90>)
    72c8:	f002 f8d2 	bl	9470 <__aeabi_fadd>
    72cc:	2100      	movs	r1, #0
    72ce:	f001 ff9b 	bl	9208 <__aeabi_fcmpgt>
    72d2:	2800      	cmp	r0, #0
    72d4:	d004      	beq.n	72e0 <floorf+0x40>
    72d6:	2d00      	cmp	r5, #0
    72d8:	db1d      	blt.n	7316 <floorf+0x76>
    72da:	4643      	mov	r3, r8
    72dc:	43bb      	bics	r3, r7
    72de:	001e      	movs	r6, r3
    72e0:	1c30      	adds	r0, r6, #0
    72e2:	bc04      	pop	{r2}
    72e4:	4690      	mov	r8, r2
    72e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72e8:	4b12      	ldr	r3, [pc, #72]	; (7334 <floorf+0x94>)
    72ea:	1c06      	adds	r6, r0, #0
    72ec:	429f      	cmp	r7, r3
    72ee:	d9f7      	bls.n	72e0 <floorf+0x40>
    72f0:	1c01      	adds	r1, r0, #0
    72f2:	f002 f8bd 	bl	9470 <__aeabi_fadd>
    72f6:	1c06      	adds	r6, r0, #0
    72f8:	e7f2      	b.n	72e0 <floorf+0x40>
    72fa:	490d      	ldr	r1, [pc, #52]	; (7330 <floorf+0x90>)
    72fc:	f002 f8b8 	bl	9470 <__aeabi_fadd>
    7300:	2100      	movs	r1, #0
    7302:	f001 ff81 	bl	9208 <__aeabi_fcmpgt>
    7306:	2800      	cmp	r0, #0
    7308:	d003      	beq.n	7312 <floorf+0x72>
    730a:	2d00      	cmp	r5, #0
    730c:	db09      	blt.n	7322 <floorf+0x82>
    730e:	2600      	movs	r6, #0
    7310:	e7e6      	b.n	72e0 <floorf+0x40>
    7312:	1c2e      	adds	r6, r5, #0
    7314:	e7e4      	b.n	72e0 <floorf+0x40>
    7316:	2380      	movs	r3, #128	; 0x80
    7318:	041b      	lsls	r3, r3, #16
    731a:	4123      	asrs	r3, r4
    731c:	4698      	mov	r8, r3
    731e:	44a8      	add	r8, r5
    7320:	e7db      	b.n	72da <floorf+0x3a>
    7322:	2f00      	cmp	r7, #0
    7324:	d0f5      	beq.n	7312 <floorf+0x72>
    7326:	4e04      	ldr	r6, [pc, #16]	; (7338 <floorf+0x98>)
    7328:	e7da      	b.n	72e0 <floorf+0x40>
    732a:	46c0      	nop			; (mov r8, r8)
    732c:	007fffff 	.word	0x007fffff
    7330:	7149f2ca 	.word	0x7149f2ca
    7334:	7f7fffff 	.word	0x7f7fffff
    7338:	bf800000 	.word	0xbf800000

0000733c <roundf>:
    733c:	0043      	lsls	r3, r0, #1
    733e:	0e1b      	lsrs	r3, r3, #24
    7340:	3b7f      	subs	r3, #127	; 0x7f
    7342:	b510      	push	{r4, lr}
    7344:	0002      	movs	r2, r0
    7346:	2b16      	cmp	r3, #22
    7348:	dc0b      	bgt.n	7362 <roundf+0x26>
    734a:	2b00      	cmp	r3, #0
    734c:	db0f      	blt.n	736e <roundf+0x32>
    734e:	490c      	ldr	r1, [pc, #48]	; (7380 <roundf+0x44>)
    7350:	4119      	asrs	r1, r3
    7352:	4201      	tst	r1, r0
    7354:	d004      	beq.n	7360 <roundf+0x24>
    7356:	2080      	movs	r0, #128	; 0x80
    7358:	03c0      	lsls	r0, r0, #15
    735a:	4118      	asrs	r0, r3
    735c:	1880      	adds	r0, r0, r2
    735e:	4388      	bics	r0, r1
    7360:	bd10      	pop	{r4, pc}
    7362:	2b80      	cmp	r3, #128	; 0x80
    7364:	d1fc      	bne.n	7360 <roundf+0x24>
    7366:	1c01      	adds	r1, r0, #0
    7368:	f002 f882 	bl	9470 <__aeabi_fadd>
    736c:	e7f8      	b.n	7360 <roundf+0x24>
    736e:	0fc0      	lsrs	r0, r0, #31
    7370:	07c0      	lsls	r0, r0, #31
    7372:	3301      	adds	r3, #1
    7374:	d1f4      	bne.n	7360 <roundf+0x24>
    7376:	23fe      	movs	r3, #254	; 0xfe
    7378:	059b      	lsls	r3, r3, #22
    737a:	4318      	orrs	r0, r3
    737c:	e7f0      	b.n	7360 <roundf+0x24>
    737e:	46c0      	nop			; (mov r8, r8)
    7380:	007fffff 	.word	0x007fffff

00007384 <exp>:
    7384:	b5f0      	push	{r4, r5, r6, r7, lr}
    7386:	4647      	mov	r7, r8
    7388:	46ce      	mov	lr, r9
    738a:	b580      	push	{r7, lr}
    738c:	b08b      	sub	sp, #44	; 0x2c
    738e:	0004      	movs	r4, r0
    7390:	000d      	movs	r5, r1
    7392:	f000 faad 	bl	78f0 <__ieee754_exp>
    7396:	4b34      	ldr	r3, [pc, #208]	; (7468 <exp+0xe4>)
    7398:	0006      	movs	r6, r0
    739a:	4698      	mov	r8, r3
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	000f      	movs	r7, r1
    73a0:	b25b      	sxtb	r3, r3
    73a2:	3301      	adds	r3, #1
    73a4:	d038      	beq.n	7418 <exp+0x94>
    73a6:	0020      	movs	r0, r4
    73a8:	0029      	movs	r1, r5
    73aa:	f001 fc2f 	bl	8c0c <finite>
    73ae:	2800      	cmp	r0, #0
    73b0:	d032      	beq.n	7418 <exp+0x94>
    73b2:	4a2e      	ldr	r2, [pc, #184]	; (746c <exp+0xe8>)
    73b4:	4b2e      	ldr	r3, [pc, #184]	; (7470 <exp+0xec>)
    73b6:	0020      	movs	r0, r4
    73b8:	0029      	movs	r1, r5
    73ba:	f001 feeb 	bl	9194 <__aeabi_dcmpgt>
    73be:	4681      	mov	r9, r0
    73c0:	2800      	cmp	r0, #0
    73c2:	d130      	bne.n	7426 <exp+0xa2>
    73c4:	4a2b      	ldr	r2, [pc, #172]	; (7474 <exp+0xf0>)
    73c6:	4b2c      	ldr	r3, [pc, #176]	; (7478 <exp+0xf4>)
    73c8:	0020      	movs	r0, r4
    73ca:	0029      	movs	r1, r5
    73cc:	f001 fece 	bl	916c <__aeabi_dcmplt>
    73d0:	2800      	cmp	r0, #0
    73d2:	d021      	beq.n	7418 <exp+0x94>
    73d4:	2304      	movs	r3, #4
    73d6:	9300      	str	r3, [sp, #0]
    73d8:	4b28      	ldr	r3, [pc, #160]	; (747c <exp+0xf8>)
    73da:	2200      	movs	r2, #0
    73dc:	9301      	str	r3, [sp, #4]
    73de:	464b      	mov	r3, r9
    73e0:	9308      	str	r3, [sp, #32]
    73e2:	2300      	movs	r3, #0
    73e4:	9206      	str	r2, [sp, #24]
    73e6:	9307      	str	r3, [sp, #28]
    73e8:	4643      	mov	r3, r8
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	466e      	mov	r6, sp
    73ee:	b25b      	sxtb	r3, r3
    73f0:	9404      	str	r4, [sp, #16]
    73f2:	9505      	str	r5, [sp, #20]
    73f4:	9402      	str	r4, [sp, #8]
    73f6:	9503      	str	r5, [sp, #12]
    73f8:	2b02      	cmp	r3, #2
    73fa:	d030      	beq.n	745e <exp+0xda>
    73fc:	0030      	movs	r0, r6
    73fe:	f001 fc0f 	bl	8c20 <matherr>
    7402:	2800      	cmp	r0, #0
    7404:	d02b      	beq.n	745e <exp+0xda>
    7406:	6a33      	ldr	r3, [r6, #32]
    7408:	2b00      	cmp	r3, #0
    740a:	d003      	beq.n	7414 <exp+0x90>
    740c:	f004 fdfa 	bl	c004 <__errno>
    7410:	6a33      	ldr	r3, [r6, #32]
    7412:	6003      	str	r3, [r0, #0]
    7414:	69f7      	ldr	r7, [r6, #28]
    7416:	69b6      	ldr	r6, [r6, #24]
    7418:	0030      	movs	r0, r6
    741a:	0039      	movs	r1, r7
    741c:	b00b      	add	sp, #44	; 0x2c
    741e:	bc0c      	pop	{r2, r3}
    7420:	4690      	mov	r8, r2
    7422:	4699      	mov	r9, r3
    7424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7426:	2303      	movs	r3, #3
    7428:	9300      	str	r3, [sp, #0]
    742a:	4b14      	ldr	r3, [pc, #80]	; (747c <exp+0xf8>)
    742c:	466e      	mov	r6, sp
    742e:	9301      	str	r3, [sp, #4]
    7430:	2300      	movs	r3, #0
    7432:	9308      	str	r3, [sp, #32]
    7434:	4643      	mov	r3, r8
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	9404      	str	r4, [sp, #16]
    743a:	9505      	str	r5, [sp, #20]
    743c:	b25b      	sxtb	r3, r3
    743e:	9402      	str	r4, [sp, #8]
    7440:	9503      	str	r5, [sp, #12]
    7442:	2b00      	cmp	r3, #0
    7444:	d105      	bne.n	7452 <exp+0xce>
    7446:	22e0      	movs	r2, #224	; 0xe0
    7448:	4b0d      	ldr	r3, [pc, #52]	; (7480 <exp+0xfc>)
    744a:	0612      	lsls	r2, r2, #24
    744c:	9206      	str	r2, [sp, #24]
    744e:	9307      	str	r3, [sp, #28]
    7450:	e7d4      	b.n	73fc <exp+0x78>
    7452:	2000      	movs	r0, #0
    7454:	490b      	ldr	r1, [pc, #44]	; (7484 <exp+0x100>)
    7456:	9006      	str	r0, [sp, #24]
    7458:	9107      	str	r1, [sp, #28]
    745a:	2b02      	cmp	r3, #2
    745c:	d1ce      	bne.n	73fc <exp+0x78>
    745e:	f004 fdd1 	bl	c004 <__errno>
    7462:	2322      	movs	r3, #34	; 0x22
    7464:	6003      	str	r3, [r0, #0]
    7466:	e7ce      	b.n	7406 <exp+0x82>
    7468:	2000006c 	.word	0x2000006c
    746c:	fefa39ef 	.word	0xfefa39ef
    7470:	40862e42 	.word	0x40862e42
    7474:	d52d3051 	.word	0xd52d3051
    7478:	c0874910 	.word	0xc0874910
    747c:	000112b4 	.word	0x000112b4
    7480:	47efffff 	.word	0x47efffff
    7484:	7ff00000 	.word	0x7ff00000

00007488 <log>:
    7488:	b5f0      	push	{r4, r5, r6, r7, lr}
    748a:	46c6      	mov	lr, r8
    748c:	b500      	push	{lr}
    748e:	b08c      	sub	sp, #48	; 0x30
    7490:	0004      	movs	r4, r0
    7492:	000d      	movs	r5, r1
    7494:	f000 fb9e 	bl	7bd4 <__ieee754_log>
    7498:	4b3a      	ldr	r3, [pc, #232]	; (7584 <log+0xfc>)
    749a:	0006      	movs	r6, r0
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	000f      	movs	r7, r1
    74a0:	b25b      	sxtb	r3, r3
    74a2:	4698      	mov	r8, r3
    74a4:	3301      	adds	r3, #1
    74a6:	d00f      	beq.n	74c8 <log+0x40>
    74a8:	0022      	movs	r2, r4
    74aa:	002b      	movs	r3, r5
    74ac:	0020      	movs	r0, r4
    74ae:	0029      	movs	r1, r5
    74b0:	f004 fbac 	bl	bc0c <__aeabi_dcmpun>
    74b4:	2800      	cmp	r0, #0
    74b6:	d107      	bne.n	74c8 <log+0x40>
    74b8:	2200      	movs	r2, #0
    74ba:	2300      	movs	r3, #0
    74bc:	0020      	movs	r0, r4
    74be:	0029      	movs	r1, r5
    74c0:	f001 fe68 	bl	9194 <__aeabi_dcmpgt>
    74c4:	2800      	cmp	r0, #0
    74c6:	d005      	beq.n	74d4 <log+0x4c>
    74c8:	0030      	movs	r0, r6
    74ca:	0039      	movs	r1, r7
    74cc:	b00c      	add	sp, #48	; 0x30
    74ce:	bc04      	pop	{r2}
    74d0:	4690      	mov	r8, r2
    74d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74d4:	4b2c      	ldr	r3, [pc, #176]	; (7588 <log+0x100>)
    74d6:	900a      	str	r0, [sp, #40]	; 0x28
    74d8:	9303      	str	r3, [sp, #12]
    74da:	4643      	mov	r3, r8
    74dc:	9404      	str	r4, [sp, #16]
    74de:	9505      	str	r5, [sp, #20]
    74e0:	9406      	str	r4, [sp, #24]
    74e2:	9507      	str	r5, [sp, #28]
    74e4:	2b00      	cmp	r3, #0
    74e6:	d11a      	bne.n	751e <log+0x96>
    74e8:	22e0      	movs	r2, #224	; 0xe0
    74ea:	4b28      	ldr	r3, [pc, #160]	; (758c <log+0x104>)
    74ec:	0612      	lsls	r2, r2, #24
    74ee:	9208      	str	r2, [sp, #32]
    74f0:	9309      	str	r3, [sp, #36]	; 0x24
    74f2:	0020      	movs	r0, r4
    74f4:	2200      	movs	r2, #0
    74f6:	2300      	movs	r3, #0
    74f8:	0029      	movs	r1, r5
    74fa:	f001 fe31 	bl	9160 <__aeabi_dcmpeq>
    74fe:	2800      	cmp	r0, #0
    7500:	d038      	beq.n	7574 <log+0xec>
    7502:	2302      	movs	r3, #2
    7504:	9302      	str	r3, [sp, #8]
    7506:	a802      	add	r0, sp, #8
    7508:	f001 fb8a 	bl	8c20 <matherr>
    750c:	2800      	cmp	r0, #0
    750e:	d017      	beq.n	7540 <log+0xb8>
    7510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7512:	9301      	str	r3, [sp, #4]
    7514:	2b00      	cmp	r3, #0
    7516:	d118      	bne.n	754a <log+0xc2>
    7518:	9e08      	ldr	r6, [sp, #32]
    751a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    751c:	e7d4      	b.n	74c8 <log+0x40>
    751e:	2200      	movs	r2, #0
    7520:	4b1b      	ldr	r3, [pc, #108]	; (7590 <log+0x108>)
    7522:	0020      	movs	r0, r4
    7524:	9208      	str	r2, [sp, #32]
    7526:	9309      	str	r3, [sp, #36]	; 0x24
    7528:	0029      	movs	r1, r5
    752a:	2200      	movs	r2, #0
    752c:	2300      	movs	r3, #0
    752e:	f001 fe17 	bl	9160 <__aeabi_dcmpeq>
    7532:	2800      	cmp	r0, #0
    7534:	d00f      	beq.n	7556 <log+0xce>
    7536:	2302      	movs	r3, #2
    7538:	9302      	str	r3, [sp, #8]
    753a:	4643      	mov	r3, r8
    753c:	2b02      	cmp	r3, #2
    753e:	d1e2      	bne.n	7506 <log+0x7e>
    7540:	f004 fd60 	bl	c004 <__errno>
    7544:	2322      	movs	r3, #34	; 0x22
    7546:	6003      	str	r3, [r0, #0]
    7548:	e7e2      	b.n	7510 <log+0x88>
    754a:	f004 fd5b 	bl	c004 <__errno>
    754e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7550:	9301      	str	r3, [sp, #4]
    7552:	6003      	str	r3, [r0, #0]
    7554:	e7e0      	b.n	7518 <log+0x90>
    7556:	2301      	movs	r3, #1
    7558:	9302      	str	r3, [sp, #8]
    755a:	4643      	mov	r3, r8
    755c:	2b02      	cmp	r3, #2
    755e:	d10b      	bne.n	7578 <log+0xf0>
    7560:	f004 fd50 	bl	c004 <__errno>
    7564:	2321      	movs	r3, #33	; 0x21
    7566:	6003      	str	r3, [r0, #0]
    7568:	480a      	ldr	r0, [pc, #40]	; (7594 <log+0x10c>)
    756a:	f001 fb5b 	bl	8c24 <nan>
    756e:	9008      	str	r0, [sp, #32]
    7570:	9109      	str	r1, [sp, #36]	; 0x24
    7572:	e7cd      	b.n	7510 <log+0x88>
    7574:	2301      	movs	r3, #1
    7576:	9302      	str	r3, [sp, #8]
    7578:	a802      	add	r0, sp, #8
    757a:	f001 fb51 	bl	8c20 <matherr>
    757e:	2800      	cmp	r0, #0
    7580:	d1f2      	bne.n	7568 <log+0xe0>
    7582:	e7ed      	b.n	7560 <log+0xd8>
    7584:	2000006c 	.word	0x2000006c
    7588:	000112b8 	.word	0x000112b8
    758c:	c7efffff 	.word	0xc7efffff
    7590:	fff00000 	.word	0xfff00000
    7594:	00010e9c 	.word	0x00010e9c

00007598 <pow>:
    7598:	b5f0      	push	{r4, r5, r6, r7, lr}
    759a:	4657      	mov	r7, sl
    759c:	464e      	mov	r6, r9
    759e:	46de      	mov	lr, fp
    75a0:	4645      	mov	r5, r8
    75a2:	b5e0      	push	{r5, r6, r7, lr}
    75a4:	b08f      	sub	sp, #60	; 0x3c
    75a6:	001d      	movs	r5, r3
    75a8:	0006      	movs	r6, r0
    75aa:	000f      	movs	r7, r1
    75ac:	0014      	movs	r4, r2
    75ae:	f000 fd13 	bl	7fd8 <__ieee754_pow>
    75b2:	4bc7      	ldr	r3, [pc, #796]	; (78d0 <pow+0x338>)
    75b4:	9000      	str	r0, [sp, #0]
    75b6:	9101      	str	r1, [sp, #4]
    75b8:	469a      	mov	sl, r3
    75ba:	781b      	ldrb	r3, [r3, #0]
    75bc:	b25b      	sxtb	r3, r3
    75be:	4699      	mov	r9, r3
    75c0:	3301      	adds	r3, #1
    75c2:	d03e      	beq.n	7642 <pow+0xaa>
    75c4:	0022      	movs	r2, r4
    75c6:	002b      	movs	r3, r5
    75c8:	0020      	movs	r0, r4
    75ca:	0029      	movs	r1, r5
    75cc:	f004 fb1e 	bl	bc0c <__aeabi_dcmpun>
    75d0:	4683      	mov	fp, r0
    75d2:	2800      	cmp	r0, #0
    75d4:	d135      	bne.n	7642 <pow+0xaa>
    75d6:	0032      	movs	r2, r6
    75d8:	003b      	movs	r3, r7
    75da:	0030      	movs	r0, r6
    75dc:	0039      	movs	r1, r7
    75de:	f004 fb15 	bl	bc0c <__aeabi_dcmpun>
    75e2:	2200      	movs	r2, #0
    75e4:	9003      	str	r0, [sp, #12]
    75e6:	2800      	cmp	r0, #0
    75e8:	d000      	beq.n	75ec <pow+0x54>
    75ea:	e0b6      	b.n	775a <pow+0x1c2>
    75ec:	2300      	movs	r3, #0
    75ee:	0030      	movs	r0, r6
    75f0:	0039      	movs	r1, r7
    75f2:	f001 fdb5 	bl	9160 <__aeabi_dcmpeq>
    75f6:	2800      	cmp	r0, #0
    75f8:	d02c      	beq.n	7654 <pow+0xbc>
    75fa:	2200      	movs	r2, #0
    75fc:	2300      	movs	r3, #0
    75fe:	0020      	movs	r0, r4
    7600:	0029      	movs	r1, r5
    7602:	f001 fdad 	bl	9160 <__aeabi_dcmpeq>
    7606:	4683      	mov	fp, r0
    7608:	2800      	cmp	r0, #0
    760a:	d100      	bne.n	760e <pow+0x76>
    760c:	e077      	b.n	76fe <pow+0x166>
    760e:	ab04      	add	r3, sp, #16
    7610:	4698      	mov	r8, r3
    7612:	2301      	movs	r3, #1
    7614:	4642      	mov	r2, r8
    7616:	9304      	str	r3, [sp, #16]
    7618:	4bae      	ldr	r3, [pc, #696]	; (78d4 <pow+0x33c>)
    761a:	6053      	str	r3, [r2, #4]
    761c:	4643      	mov	r3, r8
    761e:	9a03      	ldr	r2, [sp, #12]
    7620:	611c      	str	r4, [r3, #16]
    7622:	615d      	str	r5, [r3, #20]
    7624:	621a      	str	r2, [r3, #32]
    7626:	609e      	str	r6, [r3, #8]
    7628:	60df      	str	r7, [r3, #12]
    762a:	4642      	mov	r2, r8
    762c:	2300      	movs	r3, #0
    762e:	2400      	movs	r4, #0
    7630:	6193      	str	r3, [r2, #24]
    7632:	61d4      	str	r4, [r2, #28]
    7634:	464b      	mov	r3, r9
    7636:	2b00      	cmp	r3, #0
    7638:	d04d      	beq.n	76d6 <pow+0x13e>
    763a:	2300      	movs	r3, #0
    763c:	4ca6      	ldr	r4, [pc, #664]	; (78d8 <pow+0x340>)
    763e:	9300      	str	r3, [sp, #0]
    7640:	9401      	str	r4, [sp, #4]
    7642:	9800      	ldr	r0, [sp, #0]
    7644:	9901      	ldr	r1, [sp, #4]
    7646:	b00f      	add	sp, #60	; 0x3c
    7648:	bc3c      	pop	{r2, r3, r4, r5}
    764a:	4690      	mov	r8, r2
    764c:	4699      	mov	r9, r3
    764e:	46a2      	mov	sl, r4
    7650:	46ab      	mov	fp, r5
    7652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7654:	9800      	ldr	r0, [sp, #0]
    7656:	9901      	ldr	r1, [sp, #4]
    7658:	f001 fad8 	bl	8c0c <finite>
    765c:	4681      	mov	r9, r0
    765e:	2800      	cmp	r0, #0
    7660:	d100      	bne.n	7664 <pow+0xcc>
    7662:	e09b      	b.n	779c <pow+0x204>
    7664:	9800      	ldr	r0, [sp, #0]
    7666:	9901      	ldr	r1, [sp, #4]
    7668:	2200      	movs	r2, #0
    766a:	2300      	movs	r3, #0
    766c:	f001 fd78 	bl	9160 <__aeabi_dcmpeq>
    7670:	2800      	cmp	r0, #0
    7672:	d0e6      	beq.n	7642 <pow+0xaa>
    7674:	0030      	movs	r0, r6
    7676:	0039      	movs	r1, r7
    7678:	f001 fac8 	bl	8c0c <finite>
    767c:	2800      	cmp	r0, #0
    767e:	d0e0      	beq.n	7642 <pow+0xaa>
    7680:	0020      	movs	r0, r4
    7682:	0029      	movs	r1, r5
    7684:	f001 fac2 	bl	8c0c <finite>
    7688:	2800      	cmp	r0, #0
    768a:	d0da      	beq.n	7642 <pow+0xaa>
    768c:	ab04      	add	r3, sp, #16
    768e:	4698      	mov	r8, r3
    7690:	2304      	movs	r3, #4
    7692:	4642      	mov	r2, r8
    7694:	9304      	str	r3, [sp, #16]
    7696:	4b8f      	ldr	r3, [pc, #572]	; (78d4 <pow+0x33c>)
    7698:	6114      	str	r4, [r2, #16]
    769a:	6155      	str	r5, [r2, #20]
    769c:	6053      	str	r3, [r2, #4]
    769e:	2300      	movs	r3, #0
    76a0:	2400      	movs	r4, #0
    76a2:	6213      	str	r3, [r2, #32]
    76a4:	2300      	movs	r3, #0
    76a6:	6193      	str	r3, [r2, #24]
    76a8:	61d4      	str	r4, [r2, #28]
    76aa:	4653      	mov	r3, sl
    76ac:	781b      	ldrb	r3, [r3, #0]
    76ae:	6096      	str	r6, [r2, #8]
    76b0:	60d7      	str	r7, [r2, #12]
    76b2:	b25b      	sxtb	r3, r3
    76b4:	2b02      	cmp	r3, #2
    76b6:	d004      	beq.n	76c2 <pow+0x12a>
    76b8:	4640      	mov	r0, r8
    76ba:	f001 fab1 	bl	8c20 <matherr>
    76be:	2800      	cmp	r0, #0
    76c0:	d10e      	bne.n	76e0 <pow+0x148>
    76c2:	f004 fc9f 	bl	c004 <__errno>
    76c6:	2322      	movs	r3, #34	; 0x22
    76c8:	6003      	str	r3, [r0, #0]
    76ca:	e009      	b.n	76e0 <pow+0x148>
    76cc:	4642      	mov	r2, r8
    76ce:	2300      	movs	r3, #0
    76d0:	2400      	movs	r4, #0
    76d2:	6193      	str	r3, [r2, #24]
    76d4:	61d4      	str	r4, [r2, #28]
    76d6:	4640      	mov	r0, r8
    76d8:	f001 faa2 	bl	8c20 <matherr>
    76dc:	2800      	cmp	r0, #0
    76de:	d037      	beq.n	7750 <pow+0x1b8>
    76e0:	4643      	mov	r3, r8
    76e2:	6a1b      	ldr	r3, [r3, #32]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d004      	beq.n	76f2 <pow+0x15a>
    76e8:	f004 fc8c 	bl	c004 <__errno>
    76ec:	4643      	mov	r3, r8
    76ee:	6a1b      	ldr	r3, [r3, #32]
    76f0:	6003      	str	r3, [r0, #0]
    76f2:	4643      	mov	r3, r8
    76f4:	69dc      	ldr	r4, [r3, #28]
    76f6:	699b      	ldr	r3, [r3, #24]
    76f8:	9300      	str	r3, [sp, #0]
    76fa:	9401      	str	r4, [sp, #4]
    76fc:	e7a1      	b.n	7642 <pow+0xaa>
    76fe:	0020      	movs	r0, r4
    7700:	0029      	movs	r1, r5
    7702:	f001 fa83 	bl	8c0c <finite>
    7706:	2800      	cmp	r0, #0
    7708:	d09b      	beq.n	7642 <pow+0xaa>
    770a:	2200      	movs	r2, #0
    770c:	2300      	movs	r3, #0
    770e:	0020      	movs	r0, r4
    7710:	0029      	movs	r1, r5
    7712:	f001 fd2b 	bl	916c <__aeabi_dcmplt>
    7716:	2800      	cmp	r0, #0
    7718:	d100      	bne.n	771c <pow+0x184>
    771a:	e792      	b.n	7642 <pow+0xaa>
    771c:	ab04      	add	r3, sp, #16
    771e:	4698      	mov	r8, r3
    7720:	2301      	movs	r3, #1
    7722:	4642      	mov	r2, r8
    7724:	9304      	str	r3, [sp, #16]
    7726:	4b6b      	ldr	r3, [pc, #428]	; (78d4 <pow+0x33c>)
    7728:	6053      	str	r3, [r2, #4]
    772a:	4643      	mov	r3, r8
    772c:	465a      	mov	r2, fp
    772e:	609e      	str	r6, [r3, #8]
    7730:	60df      	str	r7, [r3, #12]
    7732:	621a      	str	r2, [r3, #32]
    7734:	611c      	str	r4, [r3, #16]
    7736:	615d      	str	r5, [r3, #20]
    7738:	4653      	mov	r3, sl
    773a:	781b      	ldrb	r3, [r3, #0]
    773c:	b25b      	sxtb	r3, r3
    773e:	2b00      	cmp	r3, #0
    7740:	d0c4      	beq.n	76cc <pow+0x134>
    7742:	2000      	movs	r0, #0
    7744:	4642      	mov	r2, r8
    7746:	4965      	ldr	r1, [pc, #404]	; (78dc <pow+0x344>)
    7748:	6190      	str	r0, [r2, #24]
    774a:	61d1      	str	r1, [r2, #28]
    774c:	2b02      	cmp	r3, #2
    774e:	d1c2      	bne.n	76d6 <pow+0x13e>
    7750:	f004 fc58 	bl	c004 <__errno>
    7754:	2321      	movs	r3, #33	; 0x21
    7756:	6003      	str	r3, [r0, #0]
    7758:	e7c2      	b.n	76e0 <pow+0x148>
    775a:	2300      	movs	r3, #0
    775c:	0020      	movs	r0, r4
    775e:	0029      	movs	r1, r5
    7760:	f001 fcfe 	bl	9160 <__aeabi_dcmpeq>
    7764:	2800      	cmp	r0, #0
    7766:	d100      	bne.n	776a <pow+0x1d2>
    7768:	e76b      	b.n	7642 <pow+0xaa>
    776a:	ab04      	add	r3, sp, #16
    776c:	4698      	mov	r8, r3
    776e:	2301      	movs	r3, #1
    7770:	4642      	mov	r2, r8
    7772:	9304      	str	r3, [sp, #16]
    7774:	4b57      	ldr	r3, [pc, #348]	; (78d4 <pow+0x33c>)
    7776:	4641      	mov	r1, r8
    7778:	6053      	str	r3, [r2, #4]
    777a:	4643      	mov	r3, r8
    777c:	465a      	mov	r2, fp
    777e:	621a      	str	r2, [r3, #32]
    7780:	2200      	movs	r2, #0
    7782:	609e      	str	r6, [r3, #8]
    7784:	60df      	str	r7, [r3, #12]
    7786:	611c      	str	r4, [r3, #16]
    7788:	615d      	str	r5, [r3, #20]
    778a:	4b53      	ldr	r3, [pc, #332]	; (78d8 <pow+0x340>)
    778c:	618a      	str	r2, [r1, #24]
    778e:	61cb      	str	r3, [r1, #28]
    7790:	9200      	str	r2, [sp, #0]
    7792:	9301      	str	r3, [sp, #4]
    7794:	464b      	mov	r3, r9
    7796:	2b02      	cmp	r3, #2
    7798:	d19d      	bne.n	76d6 <pow+0x13e>
    779a:	e752      	b.n	7642 <pow+0xaa>
    779c:	0030      	movs	r0, r6
    779e:	0039      	movs	r1, r7
    77a0:	f001 fa34 	bl	8c0c <finite>
    77a4:	2800      	cmp	r0, #0
    77a6:	d100      	bne.n	77aa <pow+0x212>
    77a8:	e75c      	b.n	7664 <pow+0xcc>
    77aa:	0020      	movs	r0, r4
    77ac:	0029      	movs	r1, r5
    77ae:	f001 fa2d 	bl	8c0c <finite>
    77b2:	2800      	cmp	r0, #0
    77b4:	d100      	bne.n	77b8 <pow+0x220>
    77b6:	e755      	b.n	7664 <pow+0xcc>
    77b8:	9800      	ldr	r0, [sp, #0]
    77ba:	9901      	ldr	r1, [sp, #4]
    77bc:	000b      	movs	r3, r1
    77be:	0002      	movs	r2, r0
    77c0:	f004 fa24 	bl	bc0c <__aeabi_dcmpun>
    77c4:	ab04      	add	r3, sp, #16
    77c6:	4698      	mov	r8, r3
    77c8:	2800      	cmp	r0, #0
    77ca:	d161      	bne.n	7890 <pow+0x2f8>
    77cc:	2303      	movs	r3, #3
    77ce:	4642      	mov	r2, r8
    77d0:	9304      	str	r3, [sp, #16]
    77d2:	4b40      	ldr	r3, [pc, #256]	; (78d4 <pow+0x33c>)
    77d4:	6210      	str	r0, [r2, #32]
    77d6:	6053      	str	r3, [r2, #4]
    77d8:	4653      	mov	r3, sl
    77da:	781b      	ldrb	r3, [r3, #0]
    77dc:	6096      	str	r6, [r2, #8]
    77de:	60d7      	str	r7, [r2, #12]
    77e0:	b25b      	sxtb	r3, r3
    77e2:	6114      	str	r4, [r2, #16]
    77e4:	6155      	str	r5, [r2, #20]
    77e6:	4699      	mov	r9, r3
    77e8:	2b00      	cmp	r3, #0
    77ea:	d12f      	bne.n	784c <pow+0x2b4>
    77ec:	22e0      	movs	r2, #224	; 0xe0
    77ee:	4641      	mov	r1, r8
    77f0:	4b3b      	ldr	r3, [pc, #236]	; (78e0 <pow+0x348>)
    77f2:	0612      	lsls	r2, r2, #24
    77f4:	618a      	str	r2, [r1, #24]
    77f6:	61cb      	str	r3, [r1, #28]
    77f8:	0030      	movs	r0, r6
    77fa:	2200      	movs	r2, #0
    77fc:	2300      	movs	r3, #0
    77fe:	0039      	movs	r1, r7
    7800:	f001 fcb4 	bl	916c <__aeabi_dcmplt>
    7804:	2800      	cmp	r0, #0
    7806:	d100      	bne.n	780a <pow+0x272>
    7808:	e756      	b.n	76b8 <pow+0x120>
    780a:	2200      	movs	r2, #0
    780c:	4b35      	ldr	r3, [pc, #212]	; (78e4 <pow+0x34c>)
    780e:	0020      	movs	r0, r4
    7810:	0029      	movs	r1, r5
    7812:	f003 fc65 	bl	b0e0 <__aeabi_dmul>
    7816:	0004      	movs	r4, r0
    7818:	000d      	movs	r5, r1
    781a:	f001 fa09 	bl	8c30 <rint>
    781e:	0002      	movs	r2, r0
    7820:	000b      	movs	r3, r1
    7822:	0020      	movs	r0, r4
    7824:	0029      	movs	r1, r5
    7826:	f001 fc9b 	bl	9160 <__aeabi_dcmpeq>
    782a:	2800      	cmp	r0, #0
    782c:	d105      	bne.n	783a <pow+0x2a2>
    782e:	22e0      	movs	r2, #224	; 0xe0
    7830:	4b2d      	ldr	r3, [pc, #180]	; (78e8 <pow+0x350>)
    7832:	0612      	lsls	r2, r2, #24
    7834:	4641      	mov	r1, r8
    7836:	618a      	str	r2, [r1, #24]
    7838:	61cb      	str	r3, [r1, #28]
    783a:	4653      	mov	r3, sl
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	b25b      	sxtb	r3, r3
    7840:	4699      	mov	r9, r3
    7842:	464b      	mov	r3, r9
    7844:	2b02      	cmp	r3, #2
    7846:	d000      	beq.n	784a <pow+0x2b2>
    7848:	e736      	b.n	76b8 <pow+0x120>
    784a:	e73a      	b.n	76c2 <pow+0x12a>
    784c:	2200      	movs	r2, #0
    784e:	4641      	mov	r1, r8
    7850:	4b26      	ldr	r3, [pc, #152]	; (78ec <pow+0x354>)
    7852:	0030      	movs	r0, r6
    7854:	618a      	str	r2, [r1, #24]
    7856:	61cb      	str	r3, [r1, #28]
    7858:	2200      	movs	r2, #0
    785a:	2300      	movs	r3, #0
    785c:	0039      	movs	r1, r7
    785e:	f001 fc85 	bl	916c <__aeabi_dcmplt>
    7862:	2800      	cmp	r0, #0
    7864:	d0ed      	beq.n	7842 <pow+0x2aa>
    7866:	2200      	movs	r2, #0
    7868:	4b1e      	ldr	r3, [pc, #120]	; (78e4 <pow+0x34c>)
    786a:	0020      	movs	r0, r4
    786c:	0029      	movs	r1, r5
    786e:	f003 fc37 	bl	b0e0 <__aeabi_dmul>
    7872:	0004      	movs	r4, r0
    7874:	000d      	movs	r5, r1
    7876:	f001 f9db 	bl	8c30 <rint>
    787a:	0002      	movs	r2, r0
    787c:	000b      	movs	r3, r1
    787e:	0020      	movs	r0, r4
    7880:	0029      	movs	r1, r5
    7882:	f001 fc6d 	bl	9160 <__aeabi_dcmpeq>
    7886:	2800      	cmp	r0, #0
    7888:	d1d7      	bne.n	783a <pow+0x2a2>
    788a:	2200      	movs	r2, #0
    788c:	4b13      	ldr	r3, [pc, #76]	; (78dc <pow+0x344>)
    788e:	e7d1      	b.n	7834 <pow+0x29c>
    7890:	2301      	movs	r3, #1
    7892:	4642      	mov	r2, r8
    7894:	9304      	str	r3, [sp, #16]
    7896:	4b0f      	ldr	r3, [pc, #60]	; (78d4 <pow+0x33c>)
    7898:	6053      	str	r3, [r2, #4]
    789a:	4643      	mov	r3, r8
    789c:	464a      	mov	r2, r9
    789e:	611c      	str	r4, [r3, #16]
    78a0:	615d      	str	r5, [r3, #20]
    78a2:	621a      	str	r2, [r3, #32]
    78a4:	609e      	str	r6, [r3, #8]
    78a6:	60df      	str	r7, [r3, #12]
    78a8:	2400      	movs	r4, #0
    78aa:	4653      	mov	r3, sl
    78ac:	571c      	ldrsb	r4, [r3, r4]
    78ae:	2c00      	cmp	r4, #0
    78b0:	d100      	bne.n	78b4 <pow+0x31c>
    78b2:	e70b      	b.n	76cc <pow+0x134>
    78b4:	2300      	movs	r3, #0
    78b6:	2200      	movs	r2, #0
    78b8:	0019      	movs	r1, r3
    78ba:	0010      	movs	r0, r2
    78bc:	f002 ffdc 	bl	a878 <__aeabi_ddiv>
    78c0:	4643      	mov	r3, r8
    78c2:	6198      	str	r0, [r3, #24]
    78c4:	61d9      	str	r1, [r3, #28]
    78c6:	2c02      	cmp	r4, #2
    78c8:	d100      	bne.n	78cc <pow+0x334>
    78ca:	e741      	b.n	7750 <pow+0x1b8>
    78cc:	e703      	b.n	76d6 <pow+0x13e>
    78ce:	46c0      	nop			; (mov r8, r8)
    78d0:	2000006c 	.word	0x2000006c
    78d4:	000112bc 	.word	0x000112bc
    78d8:	3ff00000 	.word	0x3ff00000
    78dc:	fff00000 	.word	0xfff00000
    78e0:	47efffff 	.word	0x47efffff
    78e4:	3fe00000 	.word	0x3fe00000
    78e8:	c7efffff 	.word	0xc7efffff
    78ec:	7ff00000 	.word	0x7ff00000

000078f0 <__ieee754_exp>:
    78f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78f2:	46d6      	mov	lr, sl
    78f4:	b500      	push	{lr}
    78f6:	004b      	lsls	r3, r1, #1
    78f8:	000e      	movs	r6, r1
    78fa:	0fcc      	lsrs	r4, r1, #31
    78fc:	4995      	ldr	r1, [pc, #596]	; (7b54 <__ieee754_exp+0x264>)
    78fe:	b084      	sub	sp, #16
    7900:	0007      	movs	r7, r0
    7902:	085b      	lsrs	r3, r3, #1
    7904:	428b      	cmp	r3, r1
    7906:	d90e      	bls.n	7926 <__ieee754_exp+0x36>
    7908:	4993      	ldr	r1, [pc, #588]	; (7b58 <__ieee754_exp+0x268>)
    790a:	428b      	cmp	r3, r1
    790c:	d800      	bhi.n	7910 <__ieee754_exp+0x20>
    790e:	e084      	b.n	7a1a <__ieee754_exp+0x12a>
    7910:	0332      	lsls	r2, r6, #12
    7912:	0b12      	lsrs	r2, r2, #12
    7914:	4302      	orrs	r2, r0
    7916:	d000      	beq.n	791a <__ieee754_exp+0x2a>
    7918:	e0f7      	b.n	7b0a <__ieee754_exp+0x21a>
    791a:	0031      	movs	r1, r6
    791c:	2c00      	cmp	r4, #0
    791e:	d078      	beq.n	7a12 <__ieee754_exp+0x122>
    7920:	2000      	movs	r0, #0
    7922:	2100      	movs	r1, #0
    7924:	e075      	b.n	7a12 <__ieee754_exp+0x122>
    7926:	4a8d      	ldr	r2, [pc, #564]	; (7b5c <__ieee754_exp+0x26c>)
    7928:	4293      	cmp	r3, r2
    792a:	d900      	bls.n	792e <__ieee754_exp+0x3e>
    792c:	e0b6      	b.n	7a9c <__ieee754_exp+0x1ac>
    792e:	4a8c      	ldr	r2, [pc, #560]	; (7b60 <__ieee754_exp+0x270>)
    7930:	4293      	cmp	r3, r2
    7932:	d800      	bhi.n	7936 <__ieee754_exp+0x46>
    7934:	e0ca      	b.n	7acc <__ieee754_exp+0x1dc>
    7936:	2300      	movs	r3, #0
    7938:	469a      	mov	sl, r3
    793a:	003a      	movs	r2, r7
    793c:	0033      	movs	r3, r6
    793e:	0038      	movs	r0, r7
    7940:	0031      	movs	r1, r6
    7942:	f003 fbcd 	bl	b0e0 <__aeabi_dmul>
    7946:	0004      	movs	r4, r0
    7948:	000d      	movs	r5, r1
    794a:	4a86      	ldr	r2, [pc, #536]	; (7b64 <__ieee754_exp+0x274>)
    794c:	4b86      	ldr	r3, [pc, #536]	; (7b68 <__ieee754_exp+0x278>)
    794e:	f003 fbc7 	bl	b0e0 <__aeabi_dmul>
    7952:	4a86      	ldr	r2, [pc, #536]	; (7b6c <__ieee754_exp+0x27c>)
    7954:	4b86      	ldr	r3, [pc, #536]	; (7b70 <__ieee754_exp+0x280>)
    7956:	f003 fe43 	bl	b5e0 <__aeabi_dsub>
    795a:	0022      	movs	r2, r4
    795c:	002b      	movs	r3, r5
    795e:	f003 fbbf 	bl	b0e0 <__aeabi_dmul>
    7962:	4a84      	ldr	r2, [pc, #528]	; (7b74 <__ieee754_exp+0x284>)
    7964:	4b84      	ldr	r3, [pc, #528]	; (7b78 <__ieee754_exp+0x288>)
    7966:	f002 fc77 	bl	a258 <__aeabi_dadd>
    796a:	0022      	movs	r2, r4
    796c:	002b      	movs	r3, r5
    796e:	f003 fbb7 	bl	b0e0 <__aeabi_dmul>
    7972:	4a82      	ldr	r2, [pc, #520]	; (7b7c <__ieee754_exp+0x28c>)
    7974:	4b82      	ldr	r3, [pc, #520]	; (7b80 <__ieee754_exp+0x290>)
    7976:	f003 fe33 	bl	b5e0 <__aeabi_dsub>
    797a:	0022      	movs	r2, r4
    797c:	002b      	movs	r3, r5
    797e:	f003 fbaf 	bl	b0e0 <__aeabi_dmul>
    7982:	4a80      	ldr	r2, [pc, #512]	; (7b84 <__ieee754_exp+0x294>)
    7984:	4b80      	ldr	r3, [pc, #512]	; (7b88 <__ieee754_exp+0x298>)
    7986:	f002 fc67 	bl	a258 <__aeabi_dadd>
    798a:	0022      	movs	r2, r4
    798c:	002b      	movs	r3, r5
    798e:	f003 fba7 	bl	b0e0 <__aeabi_dmul>
    7992:	0002      	movs	r2, r0
    7994:	000b      	movs	r3, r1
    7996:	0038      	movs	r0, r7
    7998:	0031      	movs	r1, r6
    799a:	f003 fe21 	bl	b5e0 <__aeabi_dsub>
    799e:	4653      	mov	r3, sl
    79a0:	0004      	movs	r4, r0
    79a2:	000d      	movs	r5, r1
    79a4:	0002      	movs	r2, r0
    79a6:	2b00      	cmp	r3, #0
    79a8:	d100      	bne.n	79ac <__ieee754_exp+0xbc>
    79aa:	e0b4      	b.n	7b16 <__ieee754_exp+0x226>
    79ac:	000b      	movs	r3, r1
    79ae:	0038      	movs	r0, r7
    79b0:	0031      	movs	r1, r6
    79b2:	f003 fb95 	bl	b0e0 <__aeabi_dmul>
    79b6:	000f      	movs	r7, r1
    79b8:	2180      	movs	r1, #128	; 0x80
    79ba:	0006      	movs	r6, r0
    79bc:	0022      	movs	r2, r4
    79be:	002b      	movs	r3, r5
    79c0:	2000      	movs	r0, #0
    79c2:	05c9      	lsls	r1, r1, #23
    79c4:	f003 fe0c 	bl	b5e0 <__aeabi_dsub>
    79c8:	0002      	movs	r2, r0
    79ca:	000b      	movs	r3, r1
    79cc:	0030      	movs	r0, r6
    79ce:	0039      	movs	r1, r7
    79d0:	f002 ff52 	bl	a878 <__aeabi_ddiv>
    79d4:	0002      	movs	r2, r0
    79d6:	000b      	movs	r3, r1
    79d8:	9802      	ldr	r0, [sp, #8]
    79da:	9903      	ldr	r1, [sp, #12]
    79dc:	f003 fe00 	bl	b5e0 <__aeabi_dsub>
    79e0:	9a00      	ldr	r2, [sp, #0]
    79e2:	9b01      	ldr	r3, [sp, #4]
    79e4:	f003 fdfc 	bl	b5e0 <__aeabi_dsub>
    79e8:	000b      	movs	r3, r1
    79ea:	0002      	movs	r2, r0
    79ec:	4967      	ldr	r1, [pc, #412]	; (7b8c <__ieee754_exp+0x29c>)
    79ee:	2000      	movs	r0, #0
    79f0:	f003 fdf6 	bl	b5e0 <__aeabi_dsub>
    79f4:	4b66      	ldr	r3, [pc, #408]	; (7b90 <__ieee754_exp+0x2a0>)
    79f6:	459a      	cmp	sl, r3
    79f8:	db00      	blt.n	79fc <__ieee754_exp+0x10c>
    79fa:	e07a      	b.n	7af2 <__ieee754_exp+0x202>
    79fc:	24fa      	movs	r4, #250	; 0xfa
    79fe:	00a4      	lsls	r4, r4, #2
    7a00:	4454      	add	r4, sl
    7a02:	0524      	lsls	r4, r4, #20
    7a04:	1863      	adds	r3, r4, r1
    7a06:	0019      	movs	r1, r3
    7a08:	23b8      	movs	r3, #184	; 0xb8
    7a0a:	2200      	movs	r2, #0
    7a0c:	045b      	lsls	r3, r3, #17
    7a0e:	f003 fb67 	bl	b0e0 <__aeabi_dmul>
    7a12:	b004      	add	sp, #16
    7a14:	bc04      	pop	{r2}
    7a16:	4692      	mov	sl, r2
    7a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a1a:	4a5e      	ldr	r2, [pc, #376]	; (7b94 <__ieee754_exp+0x2a4>)
    7a1c:	4b5e      	ldr	r3, [pc, #376]	; (7b98 <__ieee754_exp+0x2a8>)
    7a1e:	0031      	movs	r1, r6
    7a20:	f001 fbb8 	bl	9194 <__aeabi_dcmpgt>
    7a24:	2800      	cmp	r0, #0
    7a26:	d169      	bne.n	7afc <__ieee754_exp+0x20c>
    7a28:	4a5c      	ldr	r2, [pc, #368]	; (7b9c <__ieee754_exp+0x2ac>)
    7a2a:	4b5d      	ldr	r3, [pc, #372]	; (7ba0 <__ieee754_exp+0x2b0>)
    7a2c:	0038      	movs	r0, r7
    7a2e:	0031      	movs	r1, r6
    7a30:	f001 fb9c 	bl	916c <__aeabi_dcmplt>
    7a34:	2800      	cmp	r0, #0
    7a36:	d000      	beq.n	7a3a <__ieee754_exp+0x14a>
    7a38:	e772      	b.n	7920 <__ieee754_exp+0x30>
    7a3a:	4b5a      	ldr	r3, [pc, #360]	; (7ba4 <__ieee754_exp+0x2b4>)
    7a3c:	00e4      	lsls	r4, r4, #3
    7a3e:	191c      	adds	r4, r3, r4
    7a40:	4a59      	ldr	r2, [pc, #356]	; (7ba8 <__ieee754_exp+0x2b8>)
    7a42:	4b5a      	ldr	r3, [pc, #360]	; (7bac <__ieee754_exp+0x2bc>)
    7a44:	0038      	movs	r0, r7
    7a46:	0031      	movs	r1, r6
    7a48:	f003 fb4a 	bl	b0e0 <__aeabi_dmul>
    7a4c:	6822      	ldr	r2, [r4, #0]
    7a4e:	6863      	ldr	r3, [r4, #4]
    7a50:	f002 fc02 	bl	a258 <__aeabi_dadd>
    7a54:	f004 f8fa 	bl	bc4c <__aeabi_d2iz>
    7a58:	4682      	mov	sl, r0
    7a5a:	f004 f92b 	bl	bcb4 <__aeabi_i2d>
    7a5e:	4a54      	ldr	r2, [pc, #336]	; (7bb0 <__ieee754_exp+0x2c0>)
    7a60:	4b54      	ldr	r3, [pc, #336]	; (7bb4 <__ieee754_exp+0x2c4>)
    7a62:	0004      	movs	r4, r0
    7a64:	000d      	movs	r5, r1
    7a66:	f003 fb3b 	bl	b0e0 <__aeabi_dmul>
    7a6a:	0002      	movs	r2, r0
    7a6c:	000b      	movs	r3, r1
    7a6e:	0038      	movs	r0, r7
    7a70:	0031      	movs	r1, r6
    7a72:	f003 fdb5 	bl	b5e0 <__aeabi_dsub>
    7a76:	4a50      	ldr	r2, [pc, #320]	; (7bb8 <__ieee754_exp+0x2c8>)
    7a78:	9000      	str	r0, [sp, #0]
    7a7a:	9101      	str	r1, [sp, #4]
    7a7c:	4b4f      	ldr	r3, [pc, #316]	; (7bbc <__ieee754_exp+0x2cc>)
    7a7e:	0020      	movs	r0, r4
    7a80:	0029      	movs	r1, r5
    7a82:	f003 fb2d 	bl	b0e0 <__aeabi_dmul>
    7a86:	9002      	str	r0, [sp, #8]
    7a88:	9103      	str	r1, [sp, #12]
    7a8a:	9a02      	ldr	r2, [sp, #8]
    7a8c:	9b03      	ldr	r3, [sp, #12]
    7a8e:	9800      	ldr	r0, [sp, #0]
    7a90:	9901      	ldr	r1, [sp, #4]
    7a92:	f003 fda5 	bl	b5e0 <__aeabi_dsub>
    7a96:	0007      	movs	r7, r0
    7a98:	000e      	movs	r6, r1
    7a9a:	e74e      	b.n	793a <__ieee754_exp+0x4a>
    7a9c:	4a48      	ldr	r2, [pc, #288]	; (7bc0 <__ieee754_exp+0x2d0>)
    7a9e:	4293      	cmp	r3, r2
    7aa0:	d8cb      	bhi.n	7a3a <__ieee754_exp+0x14a>
    7aa2:	4b48      	ldr	r3, [pc, #288]	; (7bc4 <__ieee754_exp+0x2d4>)
    7aa4:	00e5      	lsls	r5, r4, #3
    7aa6:	195b      	adds	r3, r3, r5
    7aa8:	681a      	ldr	r2, [r3, #0]
    7aaa:	685b      	ldr	r3, [r3, #4]
    7aac:	0031      	movs	r1, r6
    7aae:	f003 fd97 	bl	b5e0 <__aeabi_dsub>
    7ab2:	4b45      	ldr	r3, [pc, #276]	; (7bc8 <__ieee754_exp+0x2d8>)
    7ab4:	9000      	str	r0, [sp, #0]
    7ab6:	9101      	str	r1, [sp, #4]
    7ab8:	195b      	adds	r3, r3, r5
    7aba:	681a      	ldr	r2, [r3, #0]
    7abc:	685b      	ldr	r3, [r3, #4]
    7abe:	9202      	str	r2, [sp, #8]
    7ac0:	9303      	str	r3, [sp, #12]
    7ac2:	2301      	movs	r3, #1
    7ac4:	1b1b      	subs	r3, r3, r4
    7ac6:	1b1b      	subs	r3, r3, r4
    7ac8:	469a      	mov	sl, r3
    7aca:	e7de      	b.n	7a8a <__ieee754_exp+0x19a>
    7acc:	4a3f      	ldr	r2, [pc, #252]	; (7bcc <__ieee754_exp+0x2dc>)
    7ace:	4b40      	ldr	r3, [pc, #256]	; (7bd0 <__ieee754_exp+0x2e0>)
    7ad0:	0031      	movs	r1, r6
    7ad2:	f002 fbc1 	bl	a258 <__aeabi_dadd>
    7ad6:	2200      	movs	r2, #0
    7ad8:	4b2c      	ldr	r3, [pc, #176]	; (7b8c <__ieee754_exp+0x29c>)
    7ada:	f001 fb5b 	bl	9194 <__aeabi_dcmpgt>
    7ade:	2800      	cmp	r0, #0
    7ae0:	d100      	bne.n	7ae4 <__ieee754_exp+0x1f4>
    7ae2:	e728      	b.n	7936 <__ieee754_exp+0x46>
    7ae4:	2200      	movs	r2, #0
    7ae6:	4b29      	ldr	r3, [pc, #164]	; (7b8c <__ieee754_exp+0x29c>)
    7ae8:	0038      	movs	r0, r7
    7aea:	0031      	movs	r1, r6
    7aec:	f002 fbb4 	bl	a258 <__aeabi_dadd>
    7af0:	e78f      	b.n	7a12 <__ieee754_exp+0x122>
    7af2:	4654      	mov	r4, sl
    7af4:	0524      	lsls	r4, r4, #20
    7af6:	1863      	adds	r3, r4, r1
    7af8:	0019      	movs	r1, r3
    7afa:	e78a      	b.n	7a12 <__ieee754_exp+0x122>
    7afc:	4a33      	ldr	r2, [pc, #204]	; (7bcc <__ieee754_exp+0x2dc>)
    7afe:	4b34      	ldr	r3, [pc, #208]	; (7bd0 <__ieee754_exp+0x2e0>)
    7b00:	0010      	movs	r0, r2
    7b02:	0019      	movs	r1, r3
    7b04:	f003 faec 	bl	b0e0 <__aeabi_dmul>
    7b08:	e783      	b.n	7a12 <__ieee754_exp+0x122>
    7b0a:	0002      	movs	r2, r0
    7b0c:	0033      	movs	r3, r6
    7b0e:	0031      	movs	r1, r6
    7b10:	f002 fba2 	bl	a258 <__aeabi_dadd>
    7b14:	e77d      	b.n	7a12 <__ieee754_exp+0x122>
    7b16:	000b      	movs	r3, r1
    7b18:	0038      	movs	r0, r7
    7b1a:	0031      	movs	r1, r6
    7b1c:	f003 fae0 	bl	b0e0 <__aeabi_dmul>
    7b20:	2380      	movs	r3, #128	; 0x80
    7b22:	9000      	str	r0, [sp, #0]
    7b24:	9101      	str	r1, [sp, #4]
    7b26:	2200      	movs	r2, #0
    7b28:	05db      	lsls	r3, r3, #23
    7b2a:	0020      	movs	r0, r4
    7b2c:	0029      	movs	r1, r5
    7b2e:	f003 fd57 	bl	b5e0 <__aeabi_dsub>
    7b32:	0002      	movs	r2, r0
    7b34:	000b      	movs	r3, r1
    7b36:	9800      	ldr	r0, [sp, #0]
    7b38:	9901      	ldr	r1, [sp, #4]
    7b3a:	f002 fe9d 	bl	a878 <__aeabi_ddiv>
    7b3e:	003a      	movs	r2, r7
    7b40:	0033      	movs	r3, r6
    7b42:	f003 fd4d 	bl	b5e0 <__aeabi_dsub>
    7b46:	0002      	movs	r2, r0
    7b48:	000b      	movs	r3, r1
    7b4a:	2000      	movs	r0, #0
    7b4c:	490f      	ldr	r1, [pc, #60]	; (7b8c <__ieee754_exp+0x29c>)
    7b4e:	f003 fd47 	bl	b5e0 <__aeabi_dsub>
    7b52:	e75e      	b.n	7a12 <__ieee754_exp+0x122>
    7b54:	40862e41 	.word	0x40862e41
    7b58:	7fefffff 	.word	0x7fefffff
    7b5c:	3fd62e42 	.word	0x3fd62e42
    7b60:	3e2fffff 	.word	0x3e2fffff
    7b64:	72bea4d0 	.word	0x72bea4d0
    7b68:	3e663769 	.word	0x3e663769
    7b6c:	c5d26bf1 	.word	0xc5d26bf1
    7b70:	3ebbbd41 	.word	0x3ebbbd41
    7b74:	af25de2c 	.word	0xaf25de2c
    7b78:	3f11566a 	.word	0x3f11566a
    7b7c:	16bebd93 	.word	0x16bebd93
    7b80:	3f66c16c 	.word	0x3f66c16c
    7b84:	5555553e 	.word	0x5555553e
    7b88:	3fc55555 	.word	0x3fc55555
    7b8c:	3ff00000 	.word	0x3ff00000
    7b90:	fffffc03 	.word	0xfffffc03
    7b94:	fefa39ef 	.word	0xfefa39ef
    7b98:	40862e42 	.word	0x40862e42
    7b9c:	d52d3051 	.word	0xd52d3051
    7ba0:	c0874910 	.word	0xc0874910
    7ba4:	000112c0 	.word	0x000112c0
    7ba8:	652b82fe 	.word	0x652b82fe
    7bac:	3ff71547 	.word	0x3ff71547
    7bb0:	fee00000 	.word	0xfee00000
    7bb4:	3fe62e42 	.word	0x3fe62e42
    7bb8:	35793c76 	.word	0x35793c76
    7bbc:	3dea39ef 	.word	0x3dea39ef
    7bc0:	3ff0a2b1 	.word	0x3ff0a2b1
    7bc4:	000112d0 	.word	0x000112d0
    7bc8:	000112e0 	.word	0x000112e0
    7bcc:	8800759c 	.word	0x8800759c
    7bd0:	7e37e43c 	.word	0x7e37e43c

00007bd4 <__ieee754_log>:
    7bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bd6:	46d6      	mov	lr, sl
    7bd8:	464f      	mov	r7, r9
    7bda:	4646      	mov	r6, r8
    7bdc:	b5c0      	push	{r6, r7, lr}
    7bde:	4ada      	ldr	r2, [pc, #872]	; (7f48 <__ieee754_log+0x374>)
    7be0:	b088      	sub	sp, #32
    7be2:	000b      	movs	r3, r1
    7be4:	4291      	cmp	r1, r2
    7be6:	dc55      	bgt.n	7c94 <__ieee754_log+0xc0>
    7be8:	004a      	lsls	r2, r1, #1
    7bea:	0852      	lsrs	r2, r2, #1
    7bec:	4302      	orrs	r2, r0
    7bee:	d100      	bne.n	7bf2 <__ieee754_log+0x1e>
    7bf0:	e0ef      	b.n	7dd2 <__ieee754_log+0x1fe>
    7bf2:	2900      	cmp	r1, #0
    7bf4:	da00      	bge.n	7bf8 <__ieee754_log+0x24>
    7bf6:	e179      	b.n	7eec <__ieee754_log+0x318>
    7bf8:	4bd4      	ldr	r3, [pc, #848]	; (7f4c <__ieee754_log+0x378>)
    7bfa:	2200      	movs	r2, #0
    7bfc:	f003 fa70 	bl	b0e0 <__aeabi_dmul>
    7c00:	2536      	movs	r5, #54	; 0x36
    7c02:	4cd3      	ldr	r4, [pc, #844]	; (7f50 <__ieee754_log+0x37c>)
    7c04:	000b      	movs	r3, r1
    7c06:	426d      	negs	r5, r5
    7c08:	42a3      	cmp	r3, r4
    7c0a:	dc47      	bgt.n	7c9c <__ieee754_log+0xc8>
    7c0c:	151a      	asrs	r2, r3, #20
    7c0e:	4cd1      	ldr	r4, [pc, #836]	; (7f54 <__ieee754_log+0x380>)
    7c10:	031b      	lsls	r3, r3, #12
    7c12:	0b1b      	lsrs	r3, r3, #12
    7c14:	4698      	mov	r8, r3
    7c16:	46a4      	mov	ip, r4
    7c18:	2480      	movs	r4, #128	; 0x80
    7c1a:	4bcf      	ldr	r3, [pc, #828]	; (7f58 <__ieee754_log+0x384>)
    7c1c:	0364      	lsls	r4, r4, #13
    7c1e:	4443      	add	r3, r8
    7c20:	4023      	ands	r3, r4
    7c22:	4cce      	ldr	r4, [pc, #824]	; (7f5c <__ieee754_log+0x388>)
    7c24:	4462      	add	r2, ip
    7c26:	1952      	adds	r2, r2, r5
    7c28:	405c      	eors	r4, r3
    7c2a:	4645      	mov	r5, r8
    7c2c:	151b      	asrs	r3, r3, #20
    7c2e:	4699      	mov	r9, r3
    7c30:	4325      	orrs	r5, r4
    7c32:	4bca      	ldr	r3, [pc, #808]	; (7f5c <__ieee754_log+0x388>)
    7c34:	0029      	movs	r1, r5
    7c36:	4491      	add	r9, r2
    7c38:	2200      	movs	r2, #0
    7c3a:	f003 fcd1 	bl	b5e0 <__aeabi_dsub>
    7c3e:	4643      	mov	r3, r8
    7c40:	3302      	adds	r3, #2
    7c42:	031b      	lsls	r3, r3, #12
    7c44:	0006      	movs	r6, r0
    7c46:	000f      	movs	r7, r1
    7c48:	0b1b      	lsrs	r3, r3, #12
    7c4a:	2200      	movs	r2, #0
    7c4c:	2b02      	cmp	r3, #2
    7c4e:	dc2f      	bgt.n	7cb0 <__ieee754_log+0xdc>
    7c50:	2300      	movs	r3, #0
    7c52:	f001 fa85 	bl	9160 <__aeabi_dcmpeq>
    7c56:	2800      	cmp	r0, #0
    7c58:	d100      	bne.n	7c5c <__ieee754_log+0x88>
    7c5a:	e0c1      	b.n	7de0 <__ieee754_log+0x20c>
    7c5c:	464b      	mov	r3, r9
    7c5e:	2b00      	cmp	r3, #0
    7c60:	d100      	bne.n	7c64 <__ieee754_log+0x90>
    7c62:	e14c      	b.n	7efe <__ieee754_log+0x32a>
    7c64:	4648      	mov	r0, r9
    7c66:	f004 f825 	bl	bcb4 <__aeabi_i2d>
    7c6a:	4abd      	ldr	r2, [pc, #756]	; (7f60 <__ieee754_log+0x38c>)
    7c6c:	4bbd      	ldr	r3, [pc, #756]	; (7f64 <__ieee754_log+0x390>)
    7c6e:	0004      	movs	r4, r0
    7c70:	000d      	movs	r5, r1
    7c72:	f003 fa35 	bl	b0e0 <__aeabi_dmul>
    7c76:	4abc      	ldr	r2, [pc, #752]	; (7f68 <__ieee754_log+0x394>)
    7c78:	0006      	movs	r6, r0
    7c7a:	000f      	movs	r7, r1
    7c7c:	4bbb      	ldr	r3, [pc, #748]	; (7f6c <__ieee754_log+0x398>)
    7c7e:	0020      	movs	r0, r4
    7c80:	0029      	movs	r1, r5
    7c82:	f003 fa2d 	bl	b0e0 <__aeabi_dmul>
    7c86:	0002      	movs	r2, r0
    7c88:	000b      	movs	r3, r1
    7c8a:	0030      	movs	r0, r6
    7c8c:	0039      	movs	r1, r7
    7c8e:	f002 fae3 	bl	a258 <__aeabi_dadd>
    7c92:	e007      	b.n	7ca4 <__ieee754_log+0xd0>
    7c94:	4cae      	ldr	r4, [pc, #696]	; (7f50 <__ieee754_log+0x37c>)
    7c96:	2500      	movs	r5, #0
    7c98:	42a3      	cmp	r3, r4
    7c9a:	ddb7      	ble.n	7c0c <__ieee754_log+0x38>
    7c9c:	0002      	movs	r2, r0
    7c9e:	000b      	movs	r3, r1
    7ca0:	f002 fada 	bl	a258 <__aeabi_dadd>
    7ca4:	b008      	add	sp, #32
    7ca6:	bc1c      	pop	{r2, r3, r4}
    7ca8:	4690      	mov	r8, r2
    7caa:	4699      	mov	r9, r3
    7cac:	46a2      	mov	sl, r4
    7cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cb0:	2380      	movs	r3, #128	; 0x80
    7cb2:	05db      	lsls	r3, r3, #23
    7cb4:	f002 fad0 	bl	a258 <__aeabi_dadd>
    7cb8:	0002      	movs	r2, r0
    7cba:	000b      	movs	r3, r1
    7cbc:	0030      	movs	r0, r6
    7cbe:	0039      	movs	r1, r7
    7cc0:	f002 fdda 	bl	a878 <__aeabi_ddiv>
    7cc4:	0004      	movs	r4, r0
    7cc6:	4648      	mov	r0, r9
    7cc8:	000d      	movs	r5, r1
    7cca:	f003 fff3 	bl	bcb4 <__aeabi_i2d>
    7cce:	0022      	movs	r2, r4
    7cd0:	9002      	str	r0, [sp, #8]
    7cd2:	9103      	str	r1, [sp, #12]
    7cd4:	002b      	movs	r3, r5
    7cd6:	0020      	movs	r0, r4
    7cd8:	0029      	movs	r1, r5
    7cda:	9404      	str	r4, [sp, #16]
    7cdc:	9505      	str	r5, [sp, #20]
    7cde:	f003 f9ff 	bl	b0e0 <__aeabi_dmul>
    7ce2:	0004      	movs	r4, r0
    7ce4:	000d      	movs	r5, r1
    7ce6:	4ba2      	ldr	r3, [pc, #648]	; (7f70 <__ieee754_log+0x39c>)
    7ce8:	0002      	movs	r2, r0
    7cea:	4443      	add	r3, r8
    7cec:	469a      	mov	sl, r3
    7cee:	000b      	movs	r3, r1
    7cf0:	9400      	str	r4, [sp, #0]
    7cf2:	9501      	str	r5, [sp, #4]
    7cf4:	f003 f9f4 	bl	b0e0 <__aeabi_dmul>
    7cf8:	0004      	movs	r4, r0
    7cfa:	000d      	movs	r5, r1
    7cfc:	4a9d      	ldr	r2, [pc, #628]	; (7f74 <__ieee754_log+0x3a0>)
    7cfe:	4b9e      	ldr	r3, [pc, #632]	; (7f78 <__ieee754_log+0x3a4>)
    7d00:	f003 f9ee 	bl	b0e0 <__aeabi_dmul>
    7d04:	4a9d      	ldr	r2, [pc, #628]	; (7f7c <__ieee754_log+0x3a8>)
    7d06:	4b9e      	ldr	r3, [pc, #632]	; (7f80 <__ieee754_log+0x3ac>)
    7d08:	f002 faa6 	bl	a258 <__aeabi_dadd>
    7d0c:	0022      	movs	r2, r4
    7d0e:	002b      	movs	r3, r5
    7d10:	f003 f9e6 	bl	b0e0 <__aeabi_dmul>
    7d14:	4a9b      	ldr	r2, [pc, #620]	; (7f84 <__ieee754_log+0x3b0>)
    7d16:	4b9c      	ldr	r3, [pc, #624]	; (7f88 <__ieee754_log+0x3b4>)
    7d18:	f002 fa9e 	bl	a258 <__aeabi_dadd>
    7d1c:	0022      	movs	r2, r4
    7d1e:	002b      	movs	r3, r5
    7d20:	f003 f9de 	bl	b0e0 <__aeabi_dmul>
    7d24:	4a99      	ldr	r2, [pc, #612]	; (7f8c <__ieee754_log+0x3b8>)
    7d26:	4b9a      	ldr	r3, [pc, #616]	; (7f90 <__ieee754_log+0x3bc>)
    7d28:	f002 fa96 	bl	a258 <__aeabi_dadd>
    7d2c:	9a00      	ldr	r2, [sp, #0]
    7d2e:	9b01      	ldr	r3, [sp, #4]
    7d30:	f003 f9d6 	bl	b0e0 <__aeabi_dmul>
    7d34:	4a97      	ldr	r2, [pc, #604]	; (7f94 <__ieee754_log+0x3c0>)
    7d36:	9000      	str	r0, [sp, #0]
    7d38:	9101      	str	r1, [sp, #4]
    7d3a:	4b97      	ldr	r3, [pc, #604]	; (7f98 <__ieee754_log+0x3c4>)
    7d3c:	0020      	movs	r0, r4
    7d3e:	0029      	movs	r1, r5
    7d40:	f003 f9ce 	bl	b0e0 <__aeabi_dmul>
    7d44:	4a95      	ldr	r2, [pc, #596]	; (7f9c <__ieee754_log+0x3c8>)
    7d46:	4b96      	ldr	r3, [pc, #600]	; (7fa0 <__ieee754_log+0x3cc>)
    7d48:	f002 fa86 	bl	a258 <__aeabi_dadd>
    7d4c:	0022      	movs	r2, r4
    7d4e:	002b      	movs	r3, r5
    7d50:	f003 f9c6 	bl	b0e0 <__aeabi_dmul>
    7d54:	4a93      	ldr	r2, [pc, #588]	; (7fa4 <__ieee754_log+0x3d0>)
    7d56:	4b94      	ldr	r3, [pc, #592]	; (7fa8 <__ieee754_log+0x3d4>)
    7d58:	f002 fa7e 	bl	a258 <__aeabi_dadd>
    7d5c:	0022      	movs	r2, r4
    7d5e:	002b      	movs	r3, r5
    7d60:	f003 f9be 	bl	b0e0 <__aeabi_dmul>
    7d64:	000b      	movs	r3, r1
    7d66:	0002      	movs	r2, r0
    7d68:	9800      	ldr	r0, [sp, #0]
    7d6a:	9901      	ldr	r1, [sp, #4]
    7d6c:	f002 fa74 	bl	a258 <__aeabi_dadd>
    7d70:	000d      	movs	r5, r1
    7d72:	4641      	mov	r1, r8
    7d74:	4b8d      	ldr	r3, [pc, #564]	; (7fac <__ieee754_log+0x3d8>)
    7d76:	0004      	movs	r4, r0
    7d78:	1a5b      	subs	r3, r3, r1
    7d7a:	4651      	mov	r1, sl
    7d7c:	430b      	orrs	r3, r1
    7d7e:	2b00      	cmp	r3, #0
    7d80:	dd54      	ble.n	7e2c <__ieee754_log+0x258>
    7d82:	2200      	movs	r2, #0
    7d84:	4b8a      	ldr	r3, [pc, #552]	; (7fb0 <__ieee754_log+0x3dc>)
    7d86:	0030      	movs	r0, r6
    7d88:	0039      	movs	r1, r7
    7d8a:	f003 f9a9 	bl	b0e0 <__aeabi_dmul>
    7d8e:	0032      	movs	r2, r6
    7d90:	003b      	movs	r3, r7
    7d92:	f003 f9a5 	bl	b0e0 <__aeabi_dmul>
    7d96:	464b      	mov	r3, r9
    7d98:	000a      	movs	r2, r1
    7d9a:	0001      	movs	r1, r0
    7d9c:	9100      	str	r1, [sp, #0]
    7d9e:	9201      	str	r2, [sp, #4]
    7da0:	2b00      	cmp	r3, #0
    7da2:	d172      	bne.n	7e8a <__ieee754_log+0x2b6>
    7da4:	0013      	movs	r3, r2
    7da6:	0029      	movs	r1, r5
    7da8:	0002      	movs	r2, r0
    7daa:	0020      	movs	r0, r4
    7dac:	f002 fa54 	bl	a258 <__aeabi_dadd>
    7db0:	9a04      	ldr	r2, [sp, #16]
    7db2:	9b05      	ldr	r3, [sp, #20]
    7db4:	f003 f994 	bl	b0e0 <__aeabi_dmul>
    7db8:	0002      	movs	r2, r0
    7dba:	000b      	movs	r3, r1
    7dbc:	9800      	ldr	r0, [sp, #0]
    7dbe:	9901      	ldr	r1, [sp, #4]
    7dc0:	f003 fc0e 	bl	b5e0 <__aeabi_dsub>
    7dc4:	0002      	movs	r2, r0
    7dc6:	000b      	movs	r3, r1
    7dc8:	0030      	movs	r0, r6
    7dca:	0039      	movs	r1, r7
    7dcc:	f003 fc08 	bl	b5e0 <__aeabi_dsub>
    7dd0:	e768      	b.n	7ca4 <__ieee754_log+0xd0>
    7dd2:	2200      	movs	r2, #0
    7dd4:	2300      	movs	r3, #0
    7dd6:	2000      	movs	r0, #0
    7dd8:	4976      	ldr	r1, [pc, #472]	; (7fb4 <__ieee754_log+0x3e0>)
    7dda:	f002 fd4d 	bl	a878 <__aeabi_ddiv>
    7dde:	e761      	b.n	7ca4 <__ieee754_log+0xd0>
    7de0:	4a75      	ldr	r2, [pc, #468]	; (7fb8 <__ieee754_log+0x3e4>)
    7de2:	4b76      	ldr	r3, [pc, #472]	; (7fbc <__ieee754_log+0x3e8>)
    7de4:	0030      	movs	r0, r6
    7de6:	0039      	movs	r1, r7
    7de8:	f003 f97a 	bl	b0e0 <__aeabi_dmul>
    7dec:	0002      	movs	r2, r0
    7dee:	000b      	movs	r3, r1
    7df0:	2000      	movs	r0, #0
    7df2:	496f      	ldr	r1, [pc, #444]	; (7fb0 <__ieee754_log+0x3dc>)
    7df4:	f003 fbf4 	bl	b5e0 <__aeabi_dsub>
    7df8:	0032      	movs	r2, r6
    7dfa:	0004      	movs	r4, r0
    7dfc:	000d      	movs	r5, r1
    7dfe:	003b      	movs	r3, r7
    7e00:	0030      	movs	r0, r6
    7e02:	0039      	movs	r1, r7
    7e04:	f003 f96c 	bl	b0e0 <__aeabi_dmul>
    7e08:	000b      	movs	r3, r1
    7e0a:	0002      	movs	r2, r0
    7e0c:	0029      	movs	r1, r5
    7e0e:	0020      	movs	r0, r4
    7e10:	f003 f966 	bl	b0e0 <__aeabi_dmul>
    7e14:	464b      	mov	r3, r9
    7e16:	0004      	movs	r4, r0
    7e18:	000d      	movs	r5, r1
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d172      	bne.n	7f04 <__ieee754_log+0x330>
    7e1e:	0002      	movs	r2, r0
    7e20:	000b      	movs	r3, r1
    7e22:	0030      	movs	r0, r6
    7e24:	0039      	movs	r1, r7
    7e26:	f003 fbdb 	bl	b5e0 <__aeabi_dsub>
    7e2a:	e73b      	b.n	7ca4 <__ieee754_log+0xd0>
    7e2c:	464b      	mov	r3, r9
    7e2e:	2b00      	cmp	r3, #0
    7e30:	d100      	bne.n	7e34 <__ieee754_log+0x260>
    7e32:	e0c5      	b.n	7fc0 <__ieee754_log+0x3ec>
    7e34:	9802      	ldr	r0, [sp, #8]
    7e36:	9903      	ldr	r1, [sp, #12]
    7e38:	4a49      	ldr	r2, [pc, #292]	; (7f60 <__ieee754_log+0x38c>)
    7e3a:	4b4a      	ldr	r3, [pc, #296]	; (7f64 <__ieee754_log+0x390>)
    7e3c:	f003 f950 	bl	b0e0 <__aeabi_dmul>
    7e40:	0022      	movs	r2, r4
    7e42:	9000      	str	r0, [sp, #0]
    7e44:	9101      	str	r1, [sp, #4]
    7e46:	002b      	movs	r3, r5
    7e48:	0030      	movs	r0, r6
    7e4a:	0039      	movs	r1, r7
    7e4c:	f003 fbc8 	bl	b5e0 <__aeabi_dsub>
    7e50:	9a04      	ldr	r2, [sp, #16]
    7e52:	9b05      	ldr	r3, [sp, #20]
    7e54:	f003 f944 	bl	b0e0 <__aeabi_dmul>
    7e58:	4a43      	ldr	r2, [pc, #268]	; (7f68 <__ieee754_log+0x394>)
    7e5a:	0004      	movs	r4, r0
    7e5c:	000d      	movs	r5, r1
    7e5e:	9802      	ldr	r0, [sp, #8]
    7e60:	9903      	ldr	r1, [sp, #12]
    7e62:	4b42      	ldr	r3, [pc, #264]	; (7f6c <__ieee754_log+0x398>)
    7e64:	f003 f93c 	bl	b0e0 <__aeabi_dmul>
    7e68:	0002      	movs	r2, r0
    7e6a:	000b      	movs	r3, r1
    7e6c:	0020      	movs	r0, r4
    7e6e:	0029      	movs	r1, r5
    7e70:	f003 fbb6 	bl	b5e0 <__aeabi_dsub>
    7e74:	0032      	movs	r2, r6
    7e76:	003b      	movs	r3, r7
    7e78:	f003 fbb2 	bl	b5e0 <__aeabi_dsub>
    7e7c:	0002      	movs	r2, r0
    7e7e:	000b      	movs	r3, r1
    7e80:	9800      	ldr	r0, [sp, #0]
    7e82:	9901      	ldr	r1, [sp, #4]
    7e84:	f003 fbac 	bl	b5e0 <__aeabi_dsub>
    7e88:	e70c      	b.n	7ca4 <__ieee754_log+0xd0>
    7e8a:	4a35      	ldr	r2, [pc, #212]	; (7f60 <__ieee754_log+0x38c>)
    7e8c:	4b35      	ldr	r3, [pc, #212]	; (7f64 <__ieee754_log+0x390>)
    7e8e:	9802      	ldr	r0, [sp, #8]
    7e90:	9903      	ldr	r1, [sp, #12]
    7e92:	f003 f925 	bl	b0e0 <__aeabi_dmul>
    7e96:	9a00      	ldr	r2, [sp, #0]
    7e98:	9b01      	ldr	r3, [sp, #4]
    7e9a:	9006      	str	r0, [sp, #24]
    7e9c:	9107      	str	r1, [sp, #28]
    7e9e:	0020      	movs	r0, r4
    7ea0:	0029      	movs	r1, r5
    7ea2:	f002 f9d9 	bl	a258 <__aeabi_dadd>
    7ea6:	9a04      	ldr	r2, [sp, #16]
    7ea8:	9b05      	ldr	r3, [sp, #20]
    7eaa:	f003 f919 	bl	b0e0 <__aeabi_dmul>
    7eae:	4a2e      	ldr	r2, [pc, #184]	; (7f68 <__ieee754_log+0x394>)
    7eb0:	0004      	movs	r4, r0
    7eb2:	000d      	movs	r5, r1
    7eb4:	9802      	ldr	r0, [sp, #8]
    7eb6:	9903      	ldr	r1, [sp, #12]
    7eb8:	4b2c      	ldr	r3, [pc, #176]	; (7f6c <__ieee754_log+0x398>)
    7eba:	f003 f911 	bl	b0e0 <__aeabi_dmul>
    7ebe:	0002      	movs	r2, r0
    7ec0:	000b      	movs	r3, r1
    7ec2:	0020      	movs	r0, r4
    7ec4:	0029      	movs	r1, r5
    7ec6:	f002 f9c7 	bl	a258 <__aeabi_dadd>
    7eca:	0002      	movs	r2, r0
    7ecc:	000b      	movs	r3, r1
    7ece:	9800      	ldr	r0, [sp, #0]
    7ed0:	9901      	ldr	r1, [sp, #4]
    7ed2:	f003 fb85 	bl	b5e0 <__aeabi_dsub>
    7ed6:	0032      	movs	r2, r6
    7ed8:	003b      	movs	r3, r7
    7eda:	f003 fb81 	bl	b5e0 <__aeabi_dsub>
    7ede:	0002      	movs	r2, r0
    7ee0:	000b      	movs	r3, r1
    7ee2:	9806      	ldr	r0, [sp, #24]
    7ee4:	9907      	ldr	r1, [sp, #28]
    7ee6:	f003 fb7b 	bl	b5e0 <__aeabi_dsub>
    7eea:	e6db      	b.n	7ca4 <__ieee754_log+0xd0>
    7eec:	0002      	movs	r2, r0
    7eee:	000b      	movs	r3, r1
    7ef0:	f003 fb76 	bl	b5e0 <__aeabi_dsub>
    7ef4:	2200      	movs	r2, #0
    7ef6:	2300      	movs	r3, #0
    7ef8:	f002 fcbe 	bl	a878 <__aeabi_ddiv>
    7efc:	e6d2      	b.n	7ca4 <__ieee754_log+0xd0>
    7efe:	2000      	movs	r0, #0
    7f00:	2100      	movs	r1, #0
    7f02:	e6cf      	b.n	7ca4 <__ieee754_log+0xd0>
    7f04:	4648      	mov	r0, r9
    7f06:	f003 fed5 	bl	bcb4 <__aeabi_i2d>
    7f0a:	4a15      	ldr	r2, [pc, #84]	; (7f60 <__ieee754_log+0x38c>)
    7f0c:	4b15      	ldr	r3, [pc, #84]	; (7f64 <__ieee754_log+0x390>)
    7f0e:	9000      	str	r0, [sp, #0]
    7f10:	9101      	str	r1, [sp, #4]
    7f12:	f003 f8e5 	bl	b0e0 <__aeabi_dmul>
    7f16:	4a14      	ldr	r2, [pc, #80]	; (7f68 <__ieee754_log+0x394>)
    7f18:	9002      	str	r0, [sp, #8]
    7f1a:	9103      	str	r1, [sp, #12]
    7f1c:	9800      	ldr	r0, [sp, #0]
    7f1e:	9901      	ldr	r1, [sp, #4]
    7f20:	4b12      	ldr	r3, [pc, #72]	; (7f6c <__ieee754_log+0x398>)
    7f22:	f003 f8dd 	bl	b0e0 <__aeabi_dmul>
    7f26:	0002      	movs	r2, r0
    7f28:	000b      	movs	r3, r1
    7f2a:	0020      	movs	r0, r4
    7f2c:	0029      	movs	r1, r5
    7f2e:	f003 fb57 	bl	b5e0 <__aeabi_dsub>
    7f32:	0032      	movs	r2, r6
    7f34:	003b      	movs	r3, r7
    7f36:	f003 fb53 	bl	b5e0 <__aeabi_dsub>
    7f3a:	0002      	movs	r2, r0
    7f3c:	000b      	movs	r3, r1
    7f3e:	9802      	ldr	r0, [sp, #8]
    7f40:	9903      	ldr	r1, [sp, #12]
    7f42:	f003 fb4d 	bl	b5e0 <__aeabi_dsub>
    7f46:	e6ad      	b.n	7ca4 <__ieee754_log+0xd0>
    7f48:	000fffff 	.word	0x000fffff
    7f4c:	43500000 	.word	0x43500000
    7f50:	7fefffff 	.word	0x7fefffff
    7f54:	fffffc01 	.word	0xfffffc01
    7f58:	00095f64 	.word	0x00095f64
    7f5c:	3ff00000 	.word	0x3ff00000
    7f60:	fee00000 	.word	0xfee00000
    7f64:	3fe62e42 	.word	0x3fe62e42
    7f68:	35793c76 	.word	0x35793c76
    7f6c:	3dea39ef 	.word	0x3dea39ef
    7f70:	fff9eb86 	.word	0xfff9eb86
    7f74:	df3e5244 	.word	0xdf3e5244
    7f78:	3fc2f112 	.word	0x3fc2f112
    7f7c:	96cb03de 	.word	0x96cb03de
    7f80:	3fc74664 	.word	0x3fc74664
    7f84:	94229359 	.word	0x94229359
    7f88:	3fd24924 	.word	0x3fd24924
    7f8c:	55555593 	.word	0x55555593
    7f90:	3fe55555 	.word	0x3fe55555
    7f94:	d078c69f 	.word	0xd078c69f
    7f98:	3fc39a09 	.word	0x3fc39a09
    7f9c:	1d8e78af 	.word	0x1d8e78af
    7fa0:	3fcc71c5 	.word	0x3fcc71c5
    7fa4:	9997fa04 	.word	0x9997fa04
    7fa8:	3fd99999 	.word	0x3fd99999
    7fac:	0006b851 	.word	0x0006b851
    7fb0:	3fe00000 	.word	0x3fe00000
    7fb4:	c3500000 	.word	0xc3500000
    7fb8:	55555555 	.word	0x55555555
    7fbc:	3fd55555 	.word	0x3fd55555
    7fc0:	0022      	movs	r2, r4
    7fc2:	002b      	movs	r3, r5
    7fc4:	0030      	movs	r0, r6
    7fc6:	0039      	movs	r1, r7
    7fc8:	f003 fb0a 	bl	b5e0 <__aeabi_dsub>
    7fcc:	9a04      	ldr	r2, [sp, #16]
    7fce:	9b05      	ldr	r3, [sp, #20]
    7fd0:	f003 f886 	bl	b0e0 <__aeabi_dmul>
    7fd4:	e6f6      	b.n	7dc4 <__ieee754_log+0x1f0>
    7fd6:	46c0      	nop			; (mov r8, r8)

00007fd8 <__ieee754_pow>:
    7fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fda:	4657      	mov	r7, sl
    7fdc:	464e      	mov	r6, r9
    7fde:	4645      	mov	r5, r8
    7fe0:	46de      	mov	lr, fp
    7fe2:	001c      	movs	r4, r3
    7fe4:	0013      	movs	r3, r2
    7fe6:	b5e0      	push	{r5, r6, r7, lr}
    7fe8:	0065      	lsls	r5, r4, #1
    7fea:	b091      	sub	sp, #68	; 0x44
    7fec:	086d      	lsrs	r5, r5, #1
    7fee:	9300      	str	r3, [sp, #0]
    7ff0:	9401      	str	r4, [sp, #4]
    7ff2:	0007      	movs	r7, r0
    7ff4:	000e      	movs	r6, r1
    7ff6:	4680      	mov	r8, r0
    7ff8:	4689      	mov	r9, r1
    7ffa:	46a2      	mov	sl, r4
    7ffc:	432b      	orrs	r3, r5
    7ffe:	d031      	beq.n	8064 <__ieee754_pow+0x8c>
    8000:	4b67      	ldr	r3, [pc, #412]	; (81a0 <__ieee754_pow+0x1c8>)
    8002:	0074      	lsls	r4, r6, #1
    8004:	0864      	lsrs	r4, r4, #1
    8006:	429c      	cmp	r4, r3
    8008:	dc27      	bgt.n	805a <__ieee754_pow+0x82>
    800a:	d024      	beq.n	8056 <__ieee754_pow+0x7e>
    800c:	429d      	cmp	r5, r3
    800e:	dc24      	bgt.n	805a <__ieee754_pow+0x82>
    8010:	4b63      	ldr	r3, [pc, #396]	; (81a0 <__ieee754_pow+0x1c8>)
    8012:	429d      	cmp	r5, r3
    8014:	d100      	bne.n	8018 <__ieee754_pow+0x40>
    8016:	e081      	b.n	811c <__ieee754_pow+0x144>
    8018:	2300      	movs	r3, #0
    801a:	469b      	mov	fp, r3
    801c:	464b      	mov	r3, r9
    801e:	2b00      	cmp	r3, #0
    8020:	da00      	bge.n	8024 <__ieee754_pow+0x4c>
    8022:	e07f      	b.n	8124 <__ieee754_pow+0x14c>
    8024:	2a00      	cmp	r2, #0
    8026:	d12c      	bne.n	8082 <__ieee754_pow+0xaa>
    8028:	4b5d      	ldr	r3, [pc, #372]	; (81a0 <__ieee754_pow+0x1c8>)
    802a:	429d      	cmp	r5, r3
    802c:	d100      	bne.n	8030 <__ieee754_pow+0x58>
    802e:	e097      	b.n	8160 <__ieee754_pow+0x188>
    8030:	4b5c      	ldr	r3, [pc, #368]	; (81a4 <__ieee754_pow+0x1cc>)
    8032:	429d      	cmp	r5, r3
    8034:	d066      	beq.n	8104 <__ieee754_pow+0x12c>
    8036:	2380      	movs	r3, #128	; 0x80
    8038:	05db      	lsls	r3, r3, #23
    803a:	459a      	cmp	sl, r3
    803c:	d100      	bne.n	8040 <__ieee754_pow+0x68>
    803e:	e3b9      	b.n	87b4 <__ieee754_pow+0x7dc>
    8040:	4b59      	ldr	r3, [pc, #356]	; (81a8 <__ieee754_pow+0x1d0>)
    8042:	459a      	cmp	sl, r3
    8044:	d11d      	bne.n	8082 <__ieee754_pow+0xaa>
    8046:	464b      	mov	r3, r9
    8048:	2b00      	cmp	r3, #0
    804a:	db1a      	blt.n	8082 <__ieee754_pow+0xaa>
    804c:	0038      	movs	r0, r7
    804e:	0031      	movs	r1, r6
    8050:	f000 fcf8 	bl	8a44 <__ieee754_sqrt>
    8054:	e008      	b.n	8068 <__ieee754_pow+0x90>
    8056:	2800      	cmp	r0, #0
    8058:	d00d      	beq.n	8076 <__ieee754_pow+0x9e>
    805a:	4b54      	ldr	r3, [pc, #336]	; (81ac <__ieee754_pow+0x1d4>)
    805c:	469c      	mov	ip, r3
    805e:	4464      	add	r4, ip
    8060:	4327      	orrs	r7, r4
    8062:	d10a      	bne.n	807a <__ieee754_pow+0xa2>
    8064:	2000      	movs	r0, #0
    8066:	494f      	ldr	r1, [pc, #316]	; (81a4 <__ieee754_pow+0x1cc>)
    8068:	b011      	add	sp, #68	; 0x44
    806a:	bc3c      	pop	{r2, r3, r4, r5}
    806c:	4690      	mov	r8, r2
    806e:	4699      	mov	r9, r3
    8070:	46a2      	mov	sl, r4
    8072:	46ab      	mov	fp, r5
    8074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8076:	42a5      	cmp	r5, r4
    8078:	ddca      	ble.n	8010 <__ieee754_pow+0x38>
    807a:	484d      	ldr	r0, [pc, #308]	; (81b0 <__ieee754_pow+0x1d8>)
    807c:	f000 fdd2 	bl	8c24 <nan>
    8080:	e7f2      	b.n	8068 <__ieee754_pow+0x90>
    8082:	0038      	movs	r0, r7
    8084:	0031      	movs	r1, r6
    8086:	f000 fdbd 	bl	8c04 <fabs>
    808a:	4643      	mov	r3, r8
    808c:	2b00      	cmp	r3, #0
    808e:	d11d      	bne.n	80cc <__ieee754_pow+0xf4>
    8090:	2c00      	cmp	r4, #0
    8092:	d004      	beq.n	809e <__ieee754_pow+0xc6>
    8094:	4a43      	ldr	r2, [pc, #268]	; (81a4 <__ieee754_pow+0x1cc>)
    8096:	00b3      	lsls	r3, r6, #2
    8098:	089b      	lsrs	r3, r3, #2
    809a:	4293      	cmp	r3, r2
    809c:	d116      	bne.n	80cc <__ieee754_pow+0xf4>
    809e:	4653      	mov	r3, sl
    80a0:	2b00      	cmp	r3, #0
    80a2:	da00      	bge.n	80a6 <__ieee754_pow+0xce>
    80a4:	e3c5      	b.n	8832 <__ieee754_pow+0x85a>
    80a6:	464b      	mov	r3, r9
    80a8:	2b00      	cmp	r3, #0
    80aa:	dadd      	bge.n	8068 <__ieee754_pow+0x90>
    80ac:	4b3f      	ldr	r3, [pc, #252]	; (81ac <__ieee754_pow+0x1d4>)
    80ae:	469c      	mov	ip, r3
    80b0:	465b      	mov	r3, fp
    80b2:	4464      	add	r4, ip
    80b4:	431c      	orrs	r4, r3
    80b6:	d101      	bne.n	80bc <__ieee754_pow+0xe4>
    80b8:	f000 fc53 	bl	8962 <__ieee754_pow+0x98a>
    80bc:	465b      	mov	r3, fp
    80be:	2b01      	cmp	r3, #1
    80c0:	d1d2      	bne.n	8068 <__ieee754_pow+0x90>
    80c2:	2480      	movs	r4, #128	; 0x80
    80c4:	0624      	lsls	r4, r4, #24
    80c6:	190b      	adds	r3, r1, r4
    80c8:	0019      	movs	r1, r3
    80ca:	e7cd      	b.n	8068 <__ieee754_pow+0x90>
    80cc:	0ff3      	lsrs	r3, r6, #31
    80ce:	3b01      	subs	r3, #1
    80d0:	4698      	mov	r8, r3
    80d2:	465b      	mov	r3, fp
    80d4:	4642      	mov	r2, r8
    80d6:	4313      	orrs	r3, r2
    80d8:	d057      	beq.n	818a <__ieee754_pow+0x1b2>
    80da:	4b36      	ldr	r3, [pc, #216]	; (81b4 <__ieee754_pow+0x1dc>)
    80dc:	429d      	cmp	r5, r3
    80de:	dd77      	ble.n	81d0 <__ieee754_pow+0x1f8>
    80e0:	4b35      	ldr	r3, [pc, #212]	; (81b8 <__ieee754_pow+0x1e0>)
    80e2:	429d      	cmp	r5, r3
    80e4:	dc00      	bgt.n	80e8 <__ieee754_pow+0x110>
    80e6:	e3b1      	b.n	884c <__ieee754_pow+0x874>
    80e8:	4b34      	ldr	r3, [pc, #208]	; (81bc <__ieee754_pow+0x1e4>)
    80ea:	429c      	cmp	r4, r3
    80ec:	dc00      	bgt.n	80f0 <__ieee754_pow+0x118>
    80ee:	e3a8      	b.n	8842 <__ieee754_pow+0x86a>
    80f0:	4653      	mov	r3, sl
    80f2:	2b00      	cmp	r3, #0
    80f4:	dd43      	ble.n	817e <__ieee754_pow+0x1a6>
    80f6:	4a32      	ldr	r2, [pc, #200]	; (81c0 <__ieee754_pow+0x1e8>)
    80f8:	4b32      	ldr	r3, [pc, #200]	; (81c4 <__ieee754_pow+0x1ec>)
    80fa:	0010      	movs	r0, r2
    80fc:	0019      	movs	r1, r3
    80fe:	f002 ffef 	bl	b0e0 <__aeabi_dmul>
    8102:	e7b1      	b.n	8068 <__ieee754_pow+0x90>
    8104:	4653      	mov	r3, sl
    8106:	0038      	movs	r0, r7
    8108:	0031      	movs	r1, r6
    810a:	2b00      	cmp	r3, #0
    810c:	daac      	bge.n	8068 <__ieee754_pow+0x90>
    810e:	003a      	movs	r2, r7
    8110:	0033      	movs	r3, r6
    8112:	2000      	movs	r0, #0
    8114:	4923      	ldr	r1, [pc, #140]	; (81a4 <__ieee754_pow+0x1cc>)
    8116:	f002 fbaf 	bl	a878 <__aeabi_ddiv>
    811a:	e7a5      	b.n	8068 <__ieee754_pow+0x90>
    811c:	2a00      	cmp	r2, #0
    811e:	d100      	bne.n	8122 <__ieee754_pow+0x14a>
    8120:	e77a      	b.n	8018 <__ieee754_pow+0x40>
    8122:	e79a      	b.n	805a <__ieee754_pow+0x82>
    8124:	4b28      	ldr	r3, [pc, #160]	; (81c8 <__ieee754_pow+0x1f0>)
    8126:	429d      	cmp	r5, r3
    8128:	dc2c      	bgt.n	8184 <__ieee754_pow+0x1ac>
    812a:	4b24      	ldr	r3, [pc, #144]	; (81bc <__ieee754_pow+0x1e4>)
    812c:	429d      	cmp	r5, r3
    812e:	dc00      	bgt.n	8132 <__ieee754_pow+0x15a>
    8130:	e778      	b.n	8024 <__ieee754_pow+0x4c>
    8132:	4926      	ldr	r1, [pc, #152]	; (81cc <__ieee754_pow+0x1f4>)
    8134:	152b      	asrs	r3, r5, #20
    8136:	468c      	mov	ip, r1
    8138:	4463      	add	r3, ip
    813a:	2b14      	cmp	r3, #20
    813c:	dc01      	bgt.n	8142 <__ieee754_pow+0x16a>
    813e:	f000 fbf3 	bl	8928 <__ieee754_pow+0x950>
    8142:	2134      	movs	r1, #52	; 0x34
    8144:	1acb      	subs	r3, r1, r3
    8146:	9900      	ldr	r1, [sp, #0]
    8148:	40d9      	lsrs	r1, r3
    814a:	0008      	movs	r0, r1
    814c:	4098      	lsls	r0, r3
    814e:	4282      	cmp	r2, r0
    8150:	d000      	beq.n	8154 <__ieee754_pow+0x17c>
    8152:	e767      	b.n	8024 <__ieee754_pow+0x4c>
    8154:	2301      	movs	r3, #1
    8156:	4019      	ands	r1, r3
    8158:	3301      	adds	r3, #1
    815a:	1a5b      	subs	r3, r3, r1
    815c:	469b      	mov	fp, r3
    815e:	e761      	b.n	8024 <__ieee754_pow+0x4c>
    8160:	4b12      	ldr	r3, [pc, #72]	; (81ac <__ieee754_pow+0x1d4>)
    8162:	18e3      	adds	r3, r4, r3
    8164:	431f      	orrs	r7, r3
    8166:	d100      	bne.n	816a <__ieee754_pow+0x192>
    8168:	e77c      	b.n	8064 <__ieee754_pow+0x8c>
    816a:	4b14      	ldr	r3, [pc, #80]	; (81bc <__ieee754_pow+0x1e4>)
    816c:	429c      	cmp	r4, r3
    816e:	dc00      	bgt.n	8172 <__ieee754_pow+0x19a>
    8170:	e327      	b.n	87c2 <__ieee754_pow+0x7ea>
    8172:	9800      	ldr	r0, [sp, #0]
    8174:	9901      	ldr	r1, [sp, #4]
    8176:	4653      	mov	r3, sl
    8178:	2b00      	cmp	r3, #0
    817a:	db00      	blt.n	817e <__ieee754_pow+0x1a6>
    817c:	e774      	b.n	8068 <__ieee754_pow+0x90>
    817e:	2000      	movs	r0, #0
    8180:	2100      	movs	r1, #0
    8182:	e771      	b.n	8068 <__ieee754_pow+0x90>
    8184:	2302      	movs	r3, #2
    8186:	469b      	mov	fp, r3
    8188:	e74c      	b.n	8024 <__ieee754_pow+0x4c>
    818a:	003a      	movs	r2, r7
    818c:	0033      	movs	r3, r6
    818e:	0038      	movs	r0, r7
    8190:	0031      	movs	r1, r6
    8192:	f003 fa25 	bl	b5e0 <__aeabi_dsub>
    8196:	0002      	movs	r2, r0
    8198:	000b      	movs	r3, r1
    819a:	f002 fb6d 	bl	a878 <__aeabi_ddiv>
    819e:	e763      	b.n	8068 <__ieee754_pow+0x90>
    81a0:	7ff00000 	.word	0x7ff00000
    81a4:	3ff00000 	.word	0x3ff00000
    81a8:	3fe00000 	.word	0x3fe00000
    81ac:	c0100000 	.word	0xc0100000
    81b0:	00010e9c 	.word	0x00010e9c
    81b4:	41e00000 	.word	0x41e00000
    81b8:	43f00000 	.word	0x43f00000
    81bc:	3fefffff 	.word	0x3fefffff
    81c0:	8800759c 	.word	0x8800759c
    81c4:	7e37e43c 	.word	0x7e37e43c
    81c8:	433fffff 	.word	0x433fffff
    81cc:	fffffc01 	.word	0xfffffc01
    81d0:	4be9      	ldr	r3, [pc, #932]	; (8578 <__ieee754_pow+0x5a0>)
    81d2:	2200      	movs	r2, #0
    81d4:	429c      	cmp	r4, r3
    81d6:	dc06      	bgt.n	81e6 <__ieee754_pow+0x20e>
    81d8:	2200      	movs	r2, #0
    81da:	4be8      	ldr	r3, [pc, #928]	; (857c <__ieee754_pow+0x5a4>)
    81dc:	f002 ff80 	bl	b0e0 <__aeabi_dmul>
    81e0:	2235      	movs	r2, #53	; 0x35
    81e2:	000c      	movs	r4, r1
    81e4:	4252      	negs	r2, r2
    81e6:	4de6      	ldr	r5, [pc, #920]	; (8580 <__ieee754_pow+0x5a8>)
    81e8:	1523      	asrs	r3, r4, #20
    81ea:	46ac      	mov	ip, r5
    81ec:	4463      	add	r3, ip
    81ee:	4699      	mov	r9, r3
    81f0:	0324      	lsls	r4, r4, #12
    81f2:	4de4      	ldr	r5, [pc, #912]	; (8584 <__ieee754_pow+0x5ac>)
    81f4:	4be4      	ldr	r3, [pc, #912]	; (8588 <__ieee754_pow+0x5b0>)
    81f6:	0b24      	lsrs	r4, r4, #12
    81f8:	4491      	add	r9, r2
    81fa:	4325      	orrs	r5, r4
    81fc:	429c      	cmp	r4, r3
    81fe:	dd09      	ble.n	8214 <__ieee754_pow+0x23c>
    8200:	4be2      	ldr	r3, [pc, #904]	; (858c <__ieee754_pow+0x5b4>)
    8202:	429c      	cmp	r4, r3
    8204:	dc00      	bgt.n	8208 <__ieee754_pow+0x230>
    8206:	e3b6      	b.n	8976 <__ieee754_pow+0x99e>
    8208:	2301      	movs	r3, #1
    820a:	469c      	mov	ip, r3
    820c:	4be0      	ldr	r3, [pc, #896]	; (8590 <__ieee754_pow+0x5b8>)
    820e:	44e1      	add	r9, ip
    8210:	469c      	mov	ip, r3
    8212:	4465      	add	r5, ip
    8214:	2300      	movs	r3, #0
    8216:	2400      	movs	r4, #0
    8218:	2200      	movs	r2, #0
    821a:	9308      	str	r3, [sp, #32]
    821c:	9409      	str	r4, [sp, #36]	; 0x24
    821e:	930c      	str	r3, [sp, #48]	; 0x30
    8220:	940d      	str	r4, [sp, #52]	; 0x34
    8222:	2400      	movs	r4, #0
    8224:	4bd7      	ldr	r3, [pc, #860]	; (8584 <__ieee754_pow+0x5ac>)
    8226:	9206      	str	r2, [sp, #24]
    8228:	9307      	str	r3, [sp, #28]
    822a:	9a06      	ldr	r2, [sp, #24]
    822c:	9b07      	ldr	r3, [sp, #28]
    822e:	0029      	movs	r1, r5
    8230:	900a      	str	r0, [sp, #40]	; 0x28
    8232:	910b      	str	r1, [sp, #44]	; 0x2c
    8234:	f003 f9d4 	bl	b5e0 <__aeabi_dsub>
    8238:	9a06      	ldr	r2, [sp, #24]
    823a:	9b07      	ldr	r3, [sp, #28]
    823c:	0006      	movs	r6, r0
    823e:	000f      	movs	r7, r1
    8240:	980a      	ldr	r0, [sp, #40]	; 0x28
    8242:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8244:	f002 f808 	bl	a258 <__aeabi_dadd>
    8248:	0002      	movs	r2, r0
    824a:	000b      	movs	r3, r1
    824c:	2000      	movs	r0, #0
    824e:	49cd      	ldr	r1, [pc, #820]	; (8584 <__ieee754_pow+0x5ac>)
    8250:	f002 fb12 	bl	a878 <__aeabi_ddiv>
    8254:	000a      	movs	r2, r1
    8256:	0001      	movs	r1, r0
    8258:	0013      	movs	r3, r2
    825a:	910e      	str	r1, [sp, #56]	; 0x38
    825c:	920f      	str	r2, [sp, #60]	; 0x3c
    825e:	0002      	movs	r2, r0
    8260:	0039      	movs	r1, r7
    8262:	0030      	movs	r0, r6
    8264:	f002 ff3c 	bl	b0e0 <__aeabi_dmul>
    8268:	000a      	movs	r2, r1
    826a:	0001      	movs	r1, r0
    826c:	2080      	movs	r0, #128	; 0x80
    826e:	9104      	str	r1, [sp, #16]
    8270:	9205      	str	r2, [sp, #20]
    8272:	0013      	movs	r3, r2
    8274:	2200      	movs	r2, #0
    8276:	1069      	asrs	r1, r5, #1
    8278:	2580      	movs	r5, #128	; 0x80
    827a:	0300      	lsls	r0, r0, #12
    827c:	4684      	mov	ip, r0
    827e:	9202      	str	r2, [sp, #8]
    8280:	9303      	str	r3, [sp, #12]
    8282:	2200      	movs	r2, #0
    8284:	05ad      	lsls	r5, r5, #22
    8286:	430d      	orrs	r5, r1
    8288:	4465      	add	r5, ip
    828a:	192b      	adds	r3, r5, r4
    828c:	9802      	ldr	r0, [sp, #8]
    828e:	9903      	ldr	r1, [sp, #12]
    8290:	0014      	movs	r4, r2
    8292:	001d      	movs	r5, r3
    8294:	f002 ff24 	bl	b0e0 <__aeabi_dmul>
    8298:	0002      	movs	r2, r0
    829a:	000b      	movs	r3, r1
    829c:	0030      	movs	r0, r6
    829e:	0039      	movs	r1, r7
    82a0:	f003 f99e 	bl	b5e0 <__aeabi_dsub>
    82a4:	9a06      	ldr	r2, [sp, #24]
    82a6:	9b07      	ldr	r3, [sp, #28]
    82a8:	0006      	movs	r6, r0
    82aa:	000f      	movs	r7, r1
    82ac:	0020      	movs	r0, r4
    82ae:	0029      	movs	r1, r5
    82b0:	f003 f996 	bl	b5e0 <__aeabi_dsub>
    82b4:	0002      	movs	r2, r0
    82b6:	000b      	movs	r3, r1
    82b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    82ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    82bc:	f003 f990 	bl	b5e0 <__aeabi_dsub>
    82c0:	9a02      	ldr	r2, [sp, #8]
    82c2:	9b03      	ldr	r3, [sp, #12]
    82c4:	f002 ff0c 	bl	b0e0 <__aeabi_dmul>
    82c8:	0002      	movs	r2, r0
    82ca:	000b      	movs	r3, r1
    82cc:	0030      	movs	r0, r6
    82ce:	0039      	movs	r1, r7
    82d0:	f003 f986 	bl	b5e0 <__aeabi_dsub>
    82d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    82d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    82d8:	f002 ff02 	bl	b0e0 <__aeabi_dmul>
    82dc:	9d04      	ldr	r5, [sp, #16]
    82de:	9e05      	ldr	r6, [sp, #20]
    82e0:	9006      	str	r0, [sp, #24]
    82e2:	9107      	str	r1, [sp, #28]
    82e4:	002a      	movs	r2, r5
    82e6:	0033      	movs	r3, r6
    82e8:	0028      	movs	r0, r5
    82ea:	0031      	movs	r1, r6
    82ec:	f002 fef8 	bl	b0e0 <__aeabi_dmul>
    82f0:	0006      	movs	r6, r0
    82f2:	000f      	movs	r7, r1
    82f4:	4aa7      	ldr	r2, [pc, #668]	; (8594 <__ieee754_pow+0x5bc>)
    82f6:	4ba8      	ldr	r3, [pc, #672]	; (8598 <__ieee754_pow+0x5c0>)
    82f8:	f002 fef2 	bl	b0e0 <__aeabi_dmul>
    82fc:	4aa7      	ldr	r2, [pc, #668]	; (859c <__ieee754_pow+0x5c4>)
    82fe:	4ba8      	ldr	r3, [pc, #672]	; (85a0 <__ieee754_pow+0x5c8>)
    8300:	f001 ffaa 	bl	a258 <__aeabi_dadd>
    8304:	0032      	movs	r2, r6
    8306:	003b      	movs	r3, r7
    8308:	f002 feea 	bl	b0e0 <__aeabi_dmul>
    830c:	4aa5      	ldr	r2, [pc, #660]	; (85a4 <__ieee754_pow+0x5cc>)
    830e:	4ba6      	ldr	r3, [pc, #664]	; (85a8 <__ieee754_pow+0x5d0>)
    8310:	f001 ffa2 	bl	a258 <__aeabi_dadd>
    8314:	0032      	movs	r2, r6
    8316:	003b      	movs	r3, r7
    8318:	f002 fee2 	bl	b0e0 <__aeabi_dmul>
    831c:	4aa3      	ldr	r2, [pc, #652]	; (85ac <__ieee754_pow+0x5d4>)
    831e:	4ba4      	ldr	r3, [pc, #656]	; (85b0 <__ieee754_pow+0x5d8>)
    8320:	f001 ff9a 	bl	a258 <__aeabi_dadd>
    8324:	0032      	movs	r2, r6
    8326:	003b      	movs	r3, r7
    8328:	f002 feda 	bl	b0e0 <__aeabi_dmul>
    832c:	4aa1      	ldr	r2, [pc, #644]	; (85b4 <__ieee754_pow+0x5dc>)
    832e:	4ba2      	ldr	r3, [pc, #648]	; (85b8 <__ieee754_pow+0x5e0>)
    8330:	f001 ff92 	bl	a258 <__aeabi_dadd>
    8334:	0032      	movs	r2, r6
    8336:	003b      	movs	r3, r7
    8338:	f002 fed2 	bl	b0e0 <__aeabi_dmul>
    833c:	4a9f      	ldr	r2, [pc, #636]	; (85bc <__ieee754_pow+0x5e4>)
    833e:	4ba0      	ldr	r3, [pc, #640]	; (85c0 <__ieee754_pow+0x5e8>)
    8340:	f001 ff8a 	bl	a258 <__aeabi_dadd>
    8344:	0032      	movs	r2, r6
    8346:	0004      	movs	r4, r0
    8348:	000d      	movs	r5, r1
    834a:	003b      	movs	r3, r7
    834c:	0030      	movs	r0, r6
    834e:	0039      	movs	r1, r7
    8350:	f002 fec6 	bl	b0e0 <__aeabi_dmul>
    8354:	0002      	movs	r2, r0
    8356:	000b      	movs	r3, r1
    8358:	0020      	movs	r0, r4
    835a:	0029      	movs	r1, r5
    835c:	f002 fec0 	bl	b0e0 <__aeabi_dmul>
    8360:	9e02      	ldr	r6, [sp, #8]
    8362:	9f03      	ldr	r7, [sp, #12]
    8364:	0004      	movs	r4, r0
    8366:	000d      	movs	r5, r1
    8368:	9804      	ldr	r0, [sp, #16]
    836a:	9905      	ldr	r1, [sp, #20]
    836c:	0032      	movs	r2, r6
    836e:	003b      	movs	r3, r7
    8370:	f001 ff72 	bl	a258 <__aeabi_dadd>
    8374:	9a06      	ldr	r2, [sp, #24]
    8376:	9b07      	ldr	r3, [sp, #28]
    8378:	f002 feb2 	bl	b0e0 <__aeabi_dmul>
    837c:	0022      	movs	r2, r4
    837e:	002b      	movs	r3, r5
    8380:	f001 ff6a 	bl	a258 <__aeabi_dadd>
    8384:	0032      	movs	r2, r6
    8386:	900a      	str	r0, [sp, #40]	; 0x28
    8388:	910b      	str	r1, [sp, #44]	; 0x2c
    838a:	003b      	movs	r3, r7
    838c:	0030      	movs	r0, r6
    838e:	0039      	movs	r1, r7
    8390:	9602      	str	r6, [sp, #8]
    8392:	9703      	str	r7, [sp, #12]
    8394:	f002 fea4 	bl	b0e0 <__aeabi_dmul>
    8398:	2200      	movs	r2, #0
    839a:	4b8a      	ldr	r3, [pc, #552]	; (85c4 <__ieee754_pow+0x5ec>)
    839c:	0004      	movs	r4, r0
    839e:	000d      	movs	r5, r1
    83a0:	f001 ff5a 	bl	a258 <__aeabi_dadd>
    83a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    83a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    83a8:	f001 ff56 	bl	a258 <__aeabi_dadd>
    83ac:	2600      	movs	r6, #0
    83ae:	000f      	movs	r7, r1
    83b0:	0032      	movs	r2, r6
    83b2:	000b      	movs	r3, r1
    83b4:	9802      	ldr	r0, [sp, #8]
    83b6:	9903      	ldr	r1, [sp, #12]
    83b8:	f002 fe92 	bl	b0e0 <__aeabi_dmul>
    83bc:	2200      	movs	r2, #0
    83be:	9002      	str	r0, [sp, #8]
    83c0:	9103      	str	r1, [sp, #12]
    83c2:	4b80      	ldr	r3, [pc, #512]	; (85c4 <__ieee754_pow+0x5ec>)
    83c4:	0030      	movs	r0, r6
    83c6:	0039      	movs	r1, r7
    83c8:	f003 f90a 	bl	b5e0 <__aeabi_dsub>
    83cc:	0022      	movs	r2, r4
    83ce:	002b      	movs	r3, r5
    83d0:	f003 f906 	bl	b5e0 <__aeabi_dsub>
    83d4:	0002      	movs	r2, r0
    83d6:	000b      	movs	r3, r1
    83d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    83da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    83dc:	f003 f900 	bl	b5e0 <__aeabi_dsub>
    83e0:	9a04      	ldr	r2, [sp, #16]
    83e2:	9b05      	ldr	r3, [sp, #20]
    83e4:	f002 fe7c 	bl	b0e0 <__aeabi_dmul>
    83e8:	0032      	movs	r2, r6
    83ea:	0004      	movs	r4, r0
    83ec:	000d      	movs	r5, r1
    83ee:	9806      	ldr	r0, [sp, #24]
    83f0:	9907      	ldr	r1, [sp, #28]
    83f2:	003b      	movs	r3, r7
    83f4:	f002 fe74 	bl	b0e0 <__aeabi_dmul>
    83f8:	0002      	movs	r2, r0
    83fa:	000b      	movs	r3, r1
    83fc:	0020      	movs	r0, r4
    83fe:	0029      	movs	r1, r5
    8400:	f001 ff2a 	bl	a258 <__aeabi_dadd>
    8404:	0004      	movs	r4, r0
    8406:	000d      	movs	r5, r1
    8408:	0002      	movs	r2, r0
    840a:	000b      	movs	r3, r1
    840c:	9802      	ldr	r0, [sp, #8]
    840e:	9903      	ldr	r1, [sp, #12]
    8410:	f001 ff22 	bl	a258 <__aeabi_dadd>
    8414:	2600      	movs	r6, #0
    8416:	22e0      	movs	r2, #224	; 0xe0
    8418:	4b6b      	ldr	r3, [pc, #428]	; (85c8 <__ieee754_pow+0x5f0>)
    841a:	0612      	lsls	r2, r2, #24
    841c:	0030      	movs	r0, r6
    841e:	000f      	movs	r7, r1
    8420:	f002 fe5e 	bl	b0e0 <__aeabi_dmul>
    8424:	9a02      	ldr	r2, [sp, #8]
    8426:	9b03      	ldr	r3, [sp, #12]
    8428:	9004      	str	r0, [sp, #16]
    842a:	9105      	str	r1, [sp, #20]
    842c:	0030      	movs	r0, r6
    842e:	0039      	movs	r1, r7
    8430:	f003 f8d6 	bl	b5e0 <__aeabi_dsub>
    8434:	0002      	movs	r2, r0
    8436:	000b      	movs	r3, r1
    8438:	0020      	movs	r0, r4
    843a:	0029      	movs	r1, r5
    843c:	f003 f8d0 	bl	b5e0 <__aeabi_dsub>
    8440:	4a62      	ldr	r2, [pc, #392]	; (85cc <__ieee754_pow+0x5f4>)
    8442:	4b61      	ldr	r3, [pc, #388]	; (85c8 <__ieee754_pow+0x5f0>)
    8444:	f002 fe4c 	bl	b0e0 <__aeabi_dmul>
    8448:	4a61      	ldr	r2, [pc, #388]	; (85d0 <__ieee754_pow+0x5f8>)
    844a:	0004      	movs	r4, r0
    844c:	000d      	movs	r5, r1
    844e:	4b61      	ldr	r3, [pc, #388]	; (85d4 <__ieee754_pow+0x5fc>)
    8450:	0030      	movs	r0, r6
    8452:	0039      	movs	r1, r7
    8454:	f002 fe44 	bl	b0e0 <__aeabi_dmul>
    8458:	0002      	movs	r2, r0
    845a:	000b      	movs	r3, r1
    845c:	0020      	movs	r0, r4
    845e:	0029      	movs	r1, r5
    8460:	f001 fefa 	bl	a258 <__aeabi_dadd>
    8464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8468:	f001 fef6 	bl	a258 <__aeabi_dadd>
    846c:	0006      	movs	r6, r0
    846e:	4648      	mov	r0, r9
    8470:	000f      	movs	r7, r1
    8472:	f003 fc1f 	bl	bcb4 <__aeabi_i2d>
    8476:	0004      	movs	r4, r0
    8478:	000d      	movs	r5, r1
    847a:	9804      	ldr	r0, [sp, #16]
    847c:	9905      	ldr	r1, [sp, #20]
    847e:	0032      	movs	r2, r6
    8480:	003b      	movs	r3, r7
    8482:	f001 fee9 	bl	a258 <__aeabi_dadd>
    8486:	9a08      	ldr	r2, [sp, #32]
    8488:	9b09      	ldr	r3, [sp, #36]	; 0x24
    848a:	f001 fee5 	bl	a258 <__aeabi_dadd>
    848e:	0022      	movs	r2, r4
    8490:	002b      	movs	r3, r5
    8492:	f001 fee1 	bl	a258 <__aeabi_dadd>
    8496:	2000      	movs	r0, #0
    8498:	0022      	movs	r2, r4
    849a:	002b      	movs	r3, r5
    849c:	9002      	str	r0, [sp, #8]
    849e:	9103      	str	r1, [sp, #12]
    84a0:	f003 f89e 	bl	b5e0 <__aeabi_dsub>
    84a4:	9a08      	ldr	r2, [sp, #32]
    84a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    84a8:	f003 f89a 	bl	b5e0 <__aeabi_dsub>
    84ac:	9a04      	ldr	r2, [sp, #16]
    84ae:	9b05      	ldr	r3, [sp, #20]
    84b0:	f003 f896 	bl	b5e0 <__aeabi_dsub>
    84b4:	0002      	movs	r2, r0
    84b6:	000b      	movs	r3, r1
    84b8:	0030      	movs	r0, r6
    84ba:	0039      	movs	r1, r7
    84bc:	f003 f890 	bl	b5e0 <__aeabi_dsub>
    84c0:	9004      	str	r0, [sp, #16]
    84c2:	9105      	str	r1, [sp, #20]
    84c4:	465b      	mov	r3, fp
    84c6:	4642      	mov	r2, r8
    84c8:	3b01      	subs	r3, #1
    84ca:	4313      	orrs	r3, r2
    84cc:	d100      	bne.n	84d0 <__ieee754_pow+0x4f8>
    84ce:	e1ab      	b.n	8828 <__ieee754_pow+0x850>
    84d0:	2300      	movs	r3, #0
    84d2:	4c2c      	ldr	r4, [pc, #176]	; (8584 <__ieee754_pow+0x5ac>)
    84d4:	9306      	str	r3, [sp, #24]
    84d6:	9407      	str	r4, [sp, #28]
    84d8:	9800      	ldr	r0, [sp, #0]
    84da:	9901      	ldr	r1, [sp, #4]
    84dc:	2600      	movs	r6, #0
    84de:	000b      	movs	r3, r1
    84e0:	0032      	movs	r2, r6
    84e2:	000f      	movs	r7, r1
    84e4:	f003 f87c 	bl	b5e0 <__aeabi_dsub>
    84e8:	9a02      	ldr	r2, [sp, #8]
    84ea:	9b03      	ldr	r3, [sp, #12]
    84ec:	f002 fdf8 	bl	b0e0 <__aeabi_dmul>
    84f0:	9a00      	ldr	r2, [sp, #0]
    84f2:	9b01      	ldr	r3, [sp, #4]
    84f4:	0004      	movs	r4, r0
    84f6:	000d      	movs	r5, r1
    84f8:	9804      	ldr	r0, [sp, #16]
    84fa:	9905      	ldr	r1, [sp, #20]
    84fc:	f002 fdf0 	bl	b0e0 <__aeabi_dmul>
    8500:	0002      	movs	r2, r0
    8502:	000b      	movs	r3, r1
    8504:	0020      	movs	r0, r4
    8506:	0029      	movs	r1, r5
    8508:	f001 fea6 	bl	a258 <__aeabi_dadd>
    850c:	0004      	movs	r4, r0
    850e:	000d      	movs	r5, r1
    8510:	9802      	ldr	r0, [sp, #8]
    8512:	9903      	ldr	r1, [sp, #12]
    8514:	0032      	movs	r2, r6
    8516:	003b      	movs	r3, r7
    8518:	9400      	str	r4, [sp, #0]
    851a:	9501      	str	r5, [sp, #4]
    851c:	f002 fde0 	bl	b0e0 <__aeabi_dmul>
    8520:	0002      	movs	r2, r0
    8522:	000b      	movs	r3, r1
    8524:	0006      	movs	r6, r0
    8526:	000f      	movs	r7, r1
    8528:	0020      	movs	r0, r4
    852a:	0029      	movs	r1, r5
    852c:	f001 fe94 	bl	a258 <__aeabi_dadd>
    8530:	4b29      	ldr	r3, [pc, #164]	; (85d8 <__ieee754_pow+0x600>)
    8532:	0004      	movs	r4, r0
    8534:	000d      	movs	r5, r1
    8536:	0002      	movs	r2, r0
    8538:	468b      	mov	fp, r1
    853a:	4299      	cmp	r1, r3
    853c:	dc00      	bgt.n	8540 <__ieee754_pow+0x568>
    853e:	e14f      	b.n	87e0 <__ieee754_pow+0x808>
    8540:	4b26      	ldr	r3, [pc, #152]	; (85dc <__ieee754_pow+0x604>)
    8542:	18cb      	adds	r3, r1, r3
    8544:	4303      	orrs	r3, r0
    8546:	d000      	beq.n	854a <__ieee754_pow+0x572>
    8548:	e1e2      	b.n	8910 <__ieee754_pow+0x938>
    854a:	9800      	ldr	r0, [sp, #0]
    854c:	9901      	ldr	r1, [sp, #4]
    854e:	4a24      	ldr	r2, [pc, #144]	; (85e0 <__ieee754_pow+0x608>)
    8550:	4b24      	ldr	r3, [pc, #144]	; (85e4 <__ieee754_pow+0x60c>)
    8552:	f001 fe81 	bl	a258 <__aeabi_dadd>
    8556:	0032      	movs	r2, r6
    8558:	9002      	str	r0, [sp, #8]
    855a:	9103      	str	r1, [sp, #12]
    855c:	003b      	movs	r3, r7
    855e:	0020      	movs	r0, r4
    8560:	0029      	movs	r1, r5
    8562:	f003 f83d 	bl	b5e0 <__aeabi_dsub>
    8566:	0002      	movs	r2, r0
    8568:	000b      	movs	r3, r1
    856a:	9802      	ldr	r0, [sp, #8]
    856c:	9903      	ldr	r1, [sp, #12]
    856e:	f000 fe11 	bl	9194 <__aeabi_dcmpgt>
    8572:	46aa      	mov	sl, r5
    8574:	e038      	b.n	85e8 <__ieee754_pow+0x610>
    8576:	46c0      	nop			; (mov r8, r8)
    8578:	000fffff 	.word	0x000fffff
    857c:	43400000 	.word	0x43400000
    8580:	fffffc01 	.word	0xfffffc01
    8584:	3ff00000 	.word	0x3ff00000
    8588:	0003988e 	.word	0x0003988e
    858c:	000bb679 	.word	0x000bb679
    8590:	fff00000 	.word	0xfff00000
    8594:	4a454eef 	.word	0x4a454eef
    8598:	3fca7e28 	.word	0x3fca7e28
    859c:	93c9db65 	.word	0x93c9db65
    85a0:	3fcd864a 	.word	0x3fcd864a
    85a4:	a91d4101 	.word	0xa91d4101
    85a8:	3fd17460 	.word	0x3fd17460
    85ac:	518f264d 	.word	0x518f264d
    85b0:	3fd55555 	.word	0x3fd55555
    85b4:	db6fabff 	.word	0xdb6fabff
    85b8:	3fdb6db6 	.word	0x3fdb6db6
    85bc:	33333303 	.word	0x33333303
    85c0:	3fe33333 	.word	0x3fe33333
    85c4:	40080000 	.word	0x40080000
    85c8:	3feec709 	.word	0x3feec709
    85cc:	dc3a03fd 	.word	0xdc3a03fd
    85d0:	145b01f5 	.word	0x145b01f5
    85d4:	be3e2fe0 	.word	0xbe3e2fe0
    85d8:	408fffff 	.word	0x408fffff
    85dc:	bf700000 	.word	0xbf700000
    85e0:	652b82fe 	.word	0x652b82fe
    85e4:	3c971547 	.word	0x3c971547
    85e8:	2800      	cmp	r0, #0
    85ea:	d000      	beq.n	85ee <__ieee754_pow+0x616>
    85ec:	e190      	b.n	8910 <__ieee754_pow+0x938>
    85ee:	4aec      	ldr	r2, [pc, #944]	; (89a0 <__ieee754_pow+0x9c8>)
    85f0:	4653      	mov	r3, sl
    85f2:	4694      	mov	ip, r2
    85f4:	2280      	movs	r2, #128	; 0x80
    85f6:	0352      	lsls	r2, r2, #13
    85f8:	0011      	movs	r1, r2
    85fa:	151b      	asrs	r3, r3, #20
    85fc:	4463      	add	r3, ip
    85fe:	4119      	asrs	r1, r3
    8600:	000b      	movs	r3, r1
    8602:	4690      	mov	r8, r2
    8604:	4ae7      	ldr	r2, [pc, #924]	; (89a4 <__ieee754_pow+0x9cc>)
    8606:	445b      	add	r3, fp
    8608:	4694      	mov	ip, r2
    860a:	005c      	lsls	r4, r3, #1
    860c:	0d64      	lsrs	r4, r4, #21
    860e:	4de6      	ldr	r5, [pc, #920]	; (89a8 <__ieee754_pow+0x9d0>)
    8610:	4464      	add	r4, ip
    8612:	4125      	asrs	r5, r4
    8614:	001a      	movs	r2, r3
    8616:	43aa      	bics	r2, r5
    8618:	0011      	movs	r1, r2
    861a:	4642      	mov	r2, r8
    861c:	031b      	lsls	r3, r3, #12
    861e:	0b1b      	lsrs	r3, r3, #12
    8620:	4313      	orrs	r3, r2
    8622:	2214      	movs	r2, #20
    8624:	1b14      	subs	r4, r2, r4
    8626:	4123      	asrs	r3, r4
    8628:	4699      	mov	r9, r3
    862a:	465b      	mov	r3, fp
    862c:	2000      	movs	r0, #0
    862e:	2b00      	cmp	r3, #0
    8630:	da00      	bge.n	8634 <__ieee754_pow+0x65c>
    8632:	e1b0      	b.n	8996 <__ieee754_pow+0x9be>
    8634:	0002      	movs	r2, r0
    8636:	000b      	movs	r3, r1
    8638:	0030      	movs	r0, r6
    863a:	0039      	movs	r1, r7
    863c:	f002 ffd0 	bl	b5e0 <__aeabi_dsub>
    8640:	000b      	movs	r3, r1
    8642:	0002      	movs	r2, r0
    8644:	0006      	movs	r6, r0
    8646:	000f      	movs	r7, r1
    8648:	9800      	ldr	r0, [sp, #0]
    864a:	9901      	ldr	r1, [sp, #4]
    864c:	f001 fe04 	bl	a258 <__aeabi_dadd>
    8650:	464b      	mov	r3, r9
    8652:	051b      	lsls	r3, r3, #20
    8654:	000d      	movs	r5, r1
    8656:	4698      	mov	r8, r3
    8658:	2400      	movs	r4, #0
    865a:	2200      	movs	r2, #0
    865c:	4bd3      	ldr	r3, [pc, #844]	; (89ac <__ieee754_pow+0x9d4>)
    865e:	0020      	movs	r0, r4
    8660:	0029      	movs	r1, r5
    8662:	f002 fd3d 	bl	b0e0 <__aeabi_dmul>
    8666:	0032      	movs	r2, r6
    8668:	9002      	str	r0, [sp, #8]
    866a:	9103      	str	r1, [sp, #12]
    866c:	003b      	movs	r3, r7
    866e:	0020      	movs	r0, r4
    8670:	0029      	movs	r1, r5
    8672:	f002 ffb5 	bl	b5e0 <__aeabi_dsub>
    8676:	0002      	movs	r2, r0
    8678:	000b      	movs	r3, r1
    867a:	9800      	ldr	r0, [sp, #0]
    867c:	9901      	ldr	r1, [sp, #4]
    867e:	f002 ffaf 	bl	b5e0 <__aeabi_dsub>
    8682:	4acb      	ldr	r2, [pc, #812]	; (89b0 <__ieee754_pow+0x9d8>)
    8684:	4bcb      	ldr	r3, [pc, #812]	; (89b4 <__ieee754_pow+0x9dc>)
    8686:	f002 fd2b 	bl	b0e0 <__aeabi_dmul>
    868a:	4acb      	ldr	r2, [pc, #812]	; (89b8 <__ieee754_pow+0x9e0>)
    868c:	0006      	movs	r6, r0
    868e:	000f      	movs	r7, r1
    8690:	4bca      	ldr	r3, [pc, #808]	; (89bc <__ieee754_pow+0x9e4>)
    8692:	0020      	movs	r0, r4
    8694:	0029      	movs	r1, r5
    8696:	f002 fd23 	bl	b0e0 <__aeabi_dmul>
    869a:	0002      	movs	r2, r0
    869c:	000b      	movs	r3, r1
    869e:	0030      	movs	r0, r6
    86a0:	0039      	movs	r1, r7
    86a2:	f001 fdd9 	bl	a258 <__aeabi_dadd>
    86a6:	0004      	movs	r4, r0
    86a8:	000d      	movs	r5, r1
    86aa:	0002      	movs	r2, r0
    86ac:	000b      	movs	r3, r1
    86ae:	9802      	ldr	r0, [sp, #8]
    86b0:	9903      	ldr	r1, [sp, #12]
    86b2:	f001 fdd1 	bl	a258 <__aeabi_dadd>
    86b6:	9a02      	ldr	r2, [sp, #8]
    86b8:	9b03      	ldr	r3, [sp, #12]
    86ba:	0006      	movs	r6, r0
    86bc:	000f      	movs	r7, r1
    86be:	f002 ff8f 	bl	b5e0 <__aeabi_dsub>
    86c2:	0002      	movs	r2, r0
    86c4:	000b      	movs	r3, r1
    86c6:	0020      	movs	r0, r4
    86c8:	0029      	movs	r1, r5
    86ca:	f002 ff89 	bl	b5e0 <__aeabi_dsub>
    86ce:	0032      	movs	r2, r6
    86d0:	9000      	str	r0, [sp, #0]
    86d2:	9101      	str	r1, [sp, #4]
    86d4:	003b      	movs	r3, r7
    86d6:	0030      	movs	r0, r6
    86d8:	0039      	movs	r1, r7
    86da:	f002 fd01 	bl	b0e0 <__aeabi_dmul>
    86de:	0004      	movs	r4, r0
    86e0:	000d      	movs	r5, r1
    86e2:	4ab7      	ldr	r2, [pc, #732]	; (89c0 <__ieee754_pow+0x9e8>)
    86e4:	4bb7      	ldr	r3, [pc, #732]	; (89c4 <__ieee754_pow+0x9ec>)
    86e6:	f002 fcfb 	bl	b0e0 <__aeabi_dmul>
    86ea:	4ab7      	ldr	r2, [pc, #732]	; (89c8 <__ieee754_pow+0x9f0>)
    86ec:	4bb7      	ldr	r3, [pc, #732]	; (89cc <__ieee754_pow+0x9f4>)
    86ee:	f002 ff77 	bl	b5e0 <__aeabi_dsub>
    86f2:	0022      	movs	r2, r4
    86f4:	002b      	movs	r3, r5
    86f6:	f002 fcf3 	bl	b0e0 <__aeabi_dmul>
    86fa:	4ab5      	ldr	r2, [pc, #724]	; (89d0 <__ieee754_pow+0x9f8>)
    86fc:	4bb5      	ldr	r3, [pc, #724]	; (89d4 <__ieee754_pow+0x9fc>)
    86fe:	f001 fdab 	bl	a258 <__aeabi_dadd>
    8702:	0022      	movs	r2, r4
    8704:	002b      	movs	r3, r5
    8706:	f002 fceb 	bl	b0e0 <__aeabi_dmul>
    870a:	4ab3      	ldr	r2, [pc, #716]	; (89d8 <__ieee754_pow+0xa00>)
    870c:	4bb3      	ldr	r3, [pc, #716]	; (89dc <__ieee754_pow+0xa04>)
    870e:	f002 ff67 	bl	b5e0 <__aeabi_dsub>
    8712:	0022      	movs	r2, r4
    8714:	002b      	movs	r3, r5
    8716:	f002 fce3 	bl	b0e0 <__aeabi_dmul>
    871a:	4ab1      	ldr	r2, [pc, #708]	; (89e0 <__ieee754_pow+0xa08>)
    871c:	4bb1      	ldr	r3, [pc, #708]	; (89e4 <__ieee754_pow+0xa0c>)
    871e:	f001 fd9b 	bl	a258 <__aeabi_dadd>
    8722:	0022      	movs	r2, r4
    8724:	002b      	movs	r3, r5
    8726:	f002 fcdb 	bl	b0e0 <__aeabi_dmul>
    872a:	0002      	movs	r2, r0
    872c:	000b      	movs	r3, r1
    872e:	0030      	movs	r0, r6
    8730:	0039      	movs	r1, r7
    8732:	f002 ff55 	bl	b5e0 <__aeabi_dsub>
    8736:	0004      	movs	r4, r0
    8738:	000d      	movs	r5, r1
    873a:	0002      	movs	r2, r0
    873c:	000b      	movs	r3, r1
    873e:	0030      	movs	r0, r6
    8740:	0039      	movs	r1, r7
    8742:	f002 fccd 	bl	b0e0 <__aeabi_dmul>
    8746:	2380      	movs	r3, #128	; 0x80
    8748:	9002      	str	r0, [sp, #8]
    874a:	9103      	str	r1, [sp, #12]
    874c:	2200      	movs	r2, #0
    874e:	05db      	lsls	r3, r3, #23
    8750:	0020      	movs	r0, r4
    8752:	0029      	movs	r1, r5
    8754:	f002 ff44 	bl	b5e0 <__aeabi_dsub>
    8758:	0002      	movs	r2, r0
    875a:	000b      	movs	r3, r1
    875c:	9802      	ldr	r0, [sp, #8]
    875e:	9903      	ldr	r1, [sp, #12]
    8760:	f002 f88a 	bl	a878 <__aeabi_ddiv>
    8764:	9a00      	ldr	r2, [sp, #0]
    8766:	9b01      	ldr	r3, [sp, #4]
    8768:	0004      	movs	r4, r0
    876a:	000d      	movs	r5, r1
    876c:	0030      	movs	r0, r6
    876e:	0039      	movs	r1, r7
    8770:	f002 fcb6 	bl	b0e0 <__aeabi_dmul>
    8774:	9a00      	ldr	r2, [sp, #0]
    8776:	9b01      	ldr	r3, [sp, #4]
    8778:	f001 fd6e 	bl	a258 <__aeabi_dadd>
    877c:	0002      	movs	r2, r0
    877e:	000b      	movs	r3, r1
    8780:	0020      	movs	r0, r4
    8782:	0029      	movs	r1, r5
    8784:	f002 ff2c 	bl	b5e0 <__aeabi_dsub>
    8788:	0032      	movs	r2, r6
    878a:	003b      	movs	r3, r7
    878c:	f002 ff28 	bl	b5e0 <__aeabi_dsub>
    8790:	0002      	movs	r2, r0
    8792:	000b      	movs	r3, r1
    8794:	2000      	movs	r0, #0
    8796:	4994      	ldr	r1, [pc, #592]	; (89e8 <__ieee754_pow+0xa10>)
    8798:	f002 ff22 	bl	b5e0 <__aeabi_dsub>
    879c:	4643      	mov	r3, r8
    879e:	185b      	adds	r3, r3, r1
    87a0:	151a      	asrs	r2, r3, #20
    87a2:	2a00      	cmp	r2, #0
    87a4:	dc00      	bgt.n	87a8 <__ieee754_pow+0x7d0>
    87a6:	e149      	b.n	8a3c <__ieee754_pow+0xa64>
    87a8:	0019      	movs	r1, r3
    87aa:	9a06      	ldr	r2, [sp, #24]
    87ac:	9b07      	ldr	r3, [sp, #28]
    87ae:	f002 fc97 	bl	b0e0 <__aeabi_dmul>
    87b2:	e459      	b.n	8068 <__ieee754_pow+0x90>
    87b4:	003a      	movs	r2, r7
    87b6:	0033      	movs	r3, r6
    87b8:	0038      	movs	r0, r7
    87ba:	0031      	movs	r1, r6
    87bc:	f002 fc90 	bl	b0e0 <__aeabi_dmul>
    87c0:	e452      	b.n	8068 <__ieee754_pow+0x90>
    87c2:	4653      	mov	r3, sl
    87c4:	2b00      	cmp	r3, #0
    87c6:	db00      	blt.n	87ca <__ieee754_pow+0x7f2>
    87c8:	e4d9      	b.n	817e <__ieee754_pow+0x1a6>
    87ca:	9c00      	ldr	r4, [sp, #0]
    87cc:	9d01      	ldr	r5, [sp, #4]
    87ce:	2280      	movs	r2, #128	; 0x80
    87d0:	0612      	lsls	r2, r2, #24
    87d2:	002b      	movs	r3, r5
    87d4:	4694      	mov	ip, r2
    87d6:	4463      	add	r3, ip
    87d8:	0020      	movs	r0, r4
    87da:	0019      	movs	r1, r3
    87dc:	f7ff fc44 	bl	8068 <__ieee754_pow+0x90>
    87e0:	004b      	lsls	r3, r1, #1
    87e2:	085b      	lsrs	r3, r3, #1
    87e4:	469a      	mov	sl, r3
    87e6:	4b81      	ldr	r3, [pc, #516]	; (89ec <__ieee754_pow+0xa14>)
    87e8:	459a      	cmp	sl, r3
    87ea:	dc00      	bgt.n	87ee <__ieee754_pow+0x816>
    87ec:	e0b1      	b.n	8952 <__ieee754_pow+0x97a>
    87ee:	4b80      	ldr	r3, [pc, #512]	; (89f0 <__ieee754_pow+0xa18>)
    87f0:	445b      	add	r3, fp
    87f2:	431a      	orrs	r2, r3
    87f4:	d10c      	bne.n	8810 <__ieee754_pow+0x838>
    87f6:	0032      	movs	r2, r6
    87f8:	003b      	movs	r3, r7
    87fa:	f002 fef1 	bl	b5e0 <__aeabi_dsub>
    87fe:	0002      	movs	r2, r0
    8800:	000b      	movs	r3, r1
    8802:	9800      	ldr	r0, [sp, #0]
    8804:	9901      	ldr	r1, [sp, #4]
    8806:	f000 fcbb 	bl	9180 <__aeabi_dcmple>
    880a:	2800      	cmp	r0, #0
    880c:	d100      	bne.n	8810 <__ieee754_pow+0x838>
    880e:	e6ee      	b.n	85ee <__ieee754_pow+0x616>
    8810:	9806      	ldr	r0, [sp, #24]
    8812:	9907      	ldr	r1, [sp, #28]
    8814:	4a77      	ldr	r2, [pc, #476]	; (89f4 <__ieee754_pow+0xa1c>)
    8816:	4b78      	ldr	r3, [pc, #480]	; (89f8 <__ieee754_pow+0xa20>)
    8818:	f002 fc62 	bl	b0e0 <__aeabi_dmul>
    881c:	4a75      	ldr	r2, [pc, #468]	; (89f4 <__ieee754_pow+0xa1c>)
    881e:	4b76      	ldr	r3, [pc, #472]	; (89f8 <__ieee754_pow+0xa20>)
    8820:	f002 fc5e 	bl	b0e0 <__aeabi_dmul>
    8824:	f7ff fc20 	bl	8068 <__ieee754_pow+0x90>
    8828:	2300      	movs	r3, #0
    882a:	4c74      	ldr	r4, [pc, #464]	; (89fc <__ieee754_pow+0xa24>)
    882c:	9306      	str	r3, [sp, #24]
    882e:	9407      	str	r4, [sp, #28]
    8830:	e652      	b.n	84d8 <__ieee754_pow+0x500>
    8832:	0002      	movs	r2, r0
    8834:	000b      	movs	r3, r1
    8836:	2000      	movs	r0, #0
    8838:	496b      	ldr	r1, [pc, #428]	; (89e8 <__ieee754_pow+0xa10>)
    883a:	f002 f81d 	bl	a878 <__aeabi_ddiv>
    883e:	f7ff fc32 	bl	80a6 <__ieee754_pow+0xce>
    8842:	4653      	mov	r3, sl
    8844:	2b00      	cmp	r3, #0
    8846:	db00      	blt.n	884a <__ieee754_pow+0x872>
    8848:	e499      	b.n	817e <__ieee754_pow+0x1a6>
    884a:	e454      	b.n	80f6 <__ieee754_pow+0x11e>
    884c:	4b6c      	ldr	r3, [pc, #432]	; (8a00 <__ieee754_pow+0xa28>)
    884e:	429c      	cmp	r4, r3
    8850:	ddf7      	ble.n	8842 <__ieee754_pow+0x86a>
    8852:	4b65      	ldr	r3, [pc, #404]	; (89e8 <__ieee754_pow+0xa10>)
    8854:	429c      	cmp	r4, r3
    8856:	dd00      	ble.n	885a <__ieee754_pow+0x882>
    8858:	e44a      	b.n	80f0 <__ieee754_pow+0x118>
    885a:	2200      	movs	r2, #0
    885c:	4b62      	ldr	r3, [pc, #392]	; (89e8 <__ieee754_pow+0xa10>)
    885e:	f002 febf 	bl	b5e0 <__aeabi_dsub>
    8862:	22c0      	movs	r2, #192	; 0xc0
    8864:	4b67      	ldr	r3, [pc, #412]	; (8a04 <__ieee754_pow+0xa2c>)
    8866:	05d2      	lsls	r2, r2, #23
    8868:	0004      	movs	r4, r0
    886a:	000d      	movs	r5, r1
    886c:	f002 fc38 	bl	b0e0 <__aeabi_dmul>
    8870:	4a65      	ldr	r2, [pc, #404]	; (8a08 <__ieee754_pow+0xa30>)
    8872:	0006      	movs	r6, r0
    8874:	000f      	movs	r7, r1
    8876:	4b65      	ldr	r3, [pc, #404]	; (8a0c <__ieee754_pow+0xa34>)
    8878:	0020      	movs	r0, r4
    887a:	0029      	movs	r1, r5
    887c:	f002 fc30 	bl	b0e0 <__aeabi_dmul>
    8880:	2200      	movs	r2, #0
    8882:	9002      	str	r0, [sp, #8]
    8884:	9103      	str	r1, [sp, #12]
    8886:	4b62      	ldr	r3, [pc, #392]	; (8a10 <__ieee754_pow+0xa38>)
    8888:	0020      	movs	r0, r4
    888a:	0029      	movs	r1, r5
    888c:	f002 fc28 	bl	b0e0 <__aeabi_dmul>
    8890:	0002      	movs	r2, r0
    8892:	000b      	movs	r3, r1
    8894:	485f      	ldr	r0, [pc, #380]	; (8a14 <__ieee754_pow+0xa3c>)
    8896:	4960      	ldr	r1, [pc, #384]	; (8a18 <__ieee754_pow+0xa40>)
    8898:	f002 fea2 	bl	b5e0 <__aeabi_dsub>
    889c:	0022      	movs	r2, r4
    889e:	002b      	movs	r3, r5
    88a0:	f002 fc1e 	bl	b0e0 <__aeabi_dmul>
    88a4:	0002      	movs	r2, r0
    88a6:	000b      	movs	r3, r1
    88a8:	2000      	movs	r0, #0
    88aa:	495c      	ldr	r1, [pc, #368]	; (8a1c <__ieee754_pow+0xa44>)
    88ac:	f002 fe98 	bl	b5e0 <__aeabi_dsub>
    88b0:	0022      	movs	r2, r4
    88b2:	9004      	str	r0, [sp, #16]
    88b4:	9105      	str	r1, [sp, #20]
    88b6:	002b      	movs	r3, r5
    88b8:	0020      	movs	r0, r4
    88ba:	0029      	movs	r1, r5
    88bc:	f002 fc10 	bl	b0e0 <__aeabi_dmul>
    88c0:	0002      	movs	r2, r0
    88c2:	000b      	movs	r3, r1
    88c4:	9804      	ldr	r0, [sp, #16]
    88c6:	9905      	ldr	r1, [sp, #20]
    88c8:	f002 fc0a 	bl	b0e0 <__aeabi_dmul>
    88cc:	4a54      	ldr	r2, [pc, #336]	; (8a20 <__ieee754_pow+0xa48>)
    88ce:	4b4d      	ldr	r3, [pc, #308]	; (8a04 <__ieee754_pow+0xa2c>)
    88d0:	f002 fc06 	bl	b0e0 <__aeabi_dmul>
    88d4:	0002      	movs	r2, r0
    88d6:	000b      	movs	r3, r1
    88d8:	9802      	ldr	r0, [sp, #8]
    88da:	9903      	ldr	r1, [sp, #12]
    88dc:	f002 fe80 	bl	b5e0 <__aeabi_dsub>
    88e0:	0002      	movs	r2, r0
    88e2:	000b      	movs	r3, r1
    88e4:	0004      	movs	r4, r0
    88e6:	000d      	movs	r5, r1
    88e8:	0030      	movs	r0, r6
    88ea:	0039      	movs	r1, r7
    88ec:	f001 fcb4 	bl	a258 <__aeabi_dadd>
    88f0:	2000      	movs	r0, #0
    88f2:	0032      	movs	r2, r6
    88f4:	003b      	movs	r3, r7
    88f6:	9002      	str	r0, [sp, #8]
    88f8:	9103      	str	r1, [sp, #12]
    88fa:	f002 fe71 	bl	b5e0 <__aeabi_dsub>
    88fe:	0002      	movs	r2, r0
    8900:	000b      	movs	r3, r1
    8902:	0020      	movs	r0, r4
    8904:	0029      	movs	r1, r5
    8906:	f002 fe6b 	bl	b5e0 <__aeabi_dsub>
    890a:	9004      	str	r0, [sp, #16]
    890c:	9105      	str	r1, [sp, #20]
    890e:	e5d9      	b.n	84c4 <__ieee754_pow+0x4ec>
    8910:	4a44      	ldr	r2, [pc, #272]	; (8a24 <__ieee754_pow+0xa4c>)
    8912:	4b45      	ldr	r3, [pc, #276]	; (8a28 <__ieee754_pow+0xa50>)
    8914:	9806      	ldr	r0, [sp, #24]
    8916:	9907      	ldr	r1, [sp, #28]
    8918:	f002 fbe2 	bl	b0e0 <__aeabi_dmul>
    891c:	4a41      	ldr	r2, [pc, #260]	; (8a24 <__ieee754_pow+0xa4c>)
    891e:	4b42      	ldr	r3, [pc, #264]	; (8a28 <__ieee754_pow+0xa50>)
    8920:	f002 fbde 	bl	b0e0 <__aeabi_dmul>
    8924:	f7ff fba0 	bl	8068 <__ieee754_pow+0x90>
    8928:	2a00      	cmp	r2, #0
    892a:	d001      	beq.n	8930 <__ieee754_pow+0x958>
    892c:	f7ff fba9 	bl	8082 <__ieee754_pow+0xaa>
    8930:	3214      	adds	r2, #20
    8932:	1ad3      	subs	r3, r2, r3
    8934:	002a      	movs	r2, r5
    8936:	411a      	asrs	r2, r3
    8938:	0011      	movs	r1, r2
    893a:	4099      	lsls	r1, r3
    893c:	428d      	cmp	r5, r1
    893e:	d001      	beq.n	8944 <__ieee754_pow+0x96c>
    8940:	f7ff fb76 	bl	8030 <__ieee754_pow+0x58>
    8944:	2301      	movs	r3, #1
    8946:	401a      	ands	r2, r3
    8948:	18db      	adds	r3, r3, r3
    894a:	1a9b      	subs	r3, r3, r2
    894c:	469b      	mov	fp, r3
    894e:	f7ff fb6f 	bl	8030 <__ieee754_pow+0x58>
    8952:	2200      	movs	r2, #0
    8954:	4b31      	ldr	r3, [pc, #196]	; (8a1c <__ieee754_pow+0xa44>)
    8956:	4690      	mov	r8, r2
    8958:	4691      	mov	r9, r2
    895a:	459a      	cmp	sl, r3
    895c:	dc00      	bgt.n	8960 <__ieee754_pow+0x988>
    895e:	e67b      	b.n	8658 <__ieee754_pow+0x680>
    8960:	e645      	b.n	85ee <__ieee754_pow+0x616>
    8962:	0002      	movs	r2, r0
    8964:	000b      	movs	r3, r1
    8966:	f002 fe3b 	bl	b5e0 <__aeabi_dsub>
    896a:	0002      	movs	r2, r0
    896c:	000b      	movs	r3, r1
    896e:	f001 ff83 	bl	a878 <__aeabi_ddiv>
    8972:	f7ff fb79 	bl	8068 <__ieee754_pow+0x90>
    8976:	2380      	movs	r3, #128	; 0x80
    8978:	4c2c      	ldr	r4, [pc, #176]	; (8a2c <__ieee754_pow+0xa54>)
    897a:	05db      	lsls	r3, r3, #23
    897c:	9308      	str	r3, [sp, #32]
    897e:	9409      	str	r4, [sp, #36]	; 0x24
    8980:	4b2b      	ldr	r3, [pc, #172]	; (8a30 <__ieee754_pow+0xa58>)
    8982:	4c2c      	ldr	r4, [pc, #176]	; (8a34 <__ieee754_pow+0xa5c>)
    8984:	2200      	movs	r2, #0
    8986:	930c      	str	r3, [sp, #48]	; 0x30
    8988:	940d      	str	r4, [sp, #52]	; 0x34
    898a:	2480      	movs	r4, #128	; 0x80
    898c:	4b2a      	ldr	r3, [pc, #168]	; (8a38 <__ieee754_pow+0xa60>)
    898e:	02e4      	lsls	r4, r4, #11
    8990:	9206      	str	r2, [sp, #24]
    8992:	9307      	str	r3, [sp, #28]
    8994:	e449      	b.n	822a <__ieee754_pow+0x252>
    8996:	464b      	mov	r3, r9
    8998:	425b      	negs	r3, r3
    899a:	4699      	mov	r9, r3
    899c:	e64a      	b.n	8634 <__ieee754_pow+0x65c>
    899e:	46c0      	nop			; (mov r8, r8)
    89a0:	fffffc02 	.word	0xfffffc02
    89a4:	fffffc01 	.word	0xfffffc01
    89a8:	000fffff 	.word	0x000fffff
    89ac:	3fe62e43 	.word	0x3fe62e43
    89b0:	fefa39ef 	.word	0xfefa39ef
    89b4:	3fe62e42 	.word	0x3fe62e42
    89b8:	0ca86c39 	.word	0x0ca86c39
    89bc:	be205c61 	.word	0xbe205c61
    89c0:	72bea4d0 	.word	0x72bea4d0
    89c4:	3e663769 	.word	0x3e663769
    89c8:	c5d26bf1 	.word	0xc5d26bf1
    89cc:	3ebbbd41 	.word	0x3ebbbd41
    89d0:	af25de2c 	.word	0xaf25de2c
    89d4:	3f11566a 	.word	0x3f11566a
    89d8:	16bebd93 	.word	0x16bebd93
    89dc:	3f66c16c 	.word	0x3f66c16c
    89e0:	5555553e 	.word	0x5555553e
    89e4:	3fc55555 	.word	0x3fc55555
    89e8:	3ff00000 	.word	0x3ff00000
    89ec:	4090cbff 	.word	0x4090cbff
    89f0:	3f6f3400 	.word	0x3f6f3400
    89f4:	c2f8f359 	.word	0xc2f8f359
    89f8:	01a56e1f 	.word	0x01a56e1f
    89fc:	bff00000 	.word	0xbff00000
    8a00:	3feffffe 	.word	0x3feffffe
    8a04:	3ff71547 	.word	0x3ff71547
    8a08:	f85ddf44 	.word	0xf85ddf44
    8a0c:	3e54ae0b 	.word	0x3e54ae0b
    8a10:	3fd00000 	.word	0x3fd00000
    8a14:	55555555 	.word	0x55555555
    8a18:	3fd55555 	.word	0x3fd55555
    8a1c:	3fe00000 	.word	0x3fe00000
    8a20:	652b82fe 	.word	0x652b82fe
    8a24:	8800759c 	.word	0x8800759c
    8a28:	7e37e43c 	.word	0x7e37e43c
    8a2c:	3fe2b803 	.word	0x3fe2b803
    8a30:	43cfd006 	.word	0x43cfd006
    8a34:	3e4cfdeb 	.word	0x3e4cfdeb
    8a38:	3ff80000 	.word	0x3ff80000
    8a3c:	464a      	mov	r2, r9
    8a3e:	f000 f999 	bl	8d74 <scalbn>
    8a42:	e6b2      	b.n	87aa <__ieee754_pow+0x7d2>

00008a44 <__ieee754_sqrt>:
    8a44:	4b6c      	ldr	r3, [pc, #432]	; (8bf8 <__ieee754_sqrt+0x1b4>)
    8a46:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a48:	000a      	movs	r2, r1
    8a4a:	4646      	mov	r6, r8
    8a4c:	000d      	movs	r5, r1
    8a4e:	46d6      	mov	lr, sl
    8a50:	464f      	mov	r7, r9
    8a52:	0019      	movs	r1, r3
    8a54:	b5c0      	push	{r6, r7, lr}
    8a56:	0004      	movs	r4, r0
    8a58:	0006      	movs	r6, r0
    8a5a:	4029      	ands	r1, r5
    8a5c:	4299      	cmp	r1, r3
    8a5e:	d100      	bne.n	8a62 <__ieee754_sqrt+0x1e>
    8a60:	e0a7      	b.n	8bb2 <__ieee754_sqrt+0x16e>
    8a62:	2d00      	cmp	r5, #0
    8a64:	dc00      	bgt.n	8a68 <__ieee754_sqrt+0x24>
    8a66:	e081      	b.n	8b6c <__ieee754_sqrt+0x128>
    8a68:	152f      	asrs	r7, r5, #20
    8a6a:	d100      	bne.n	8a6e <__ieee754_sqrt+0x2a>
    8a6c:	e08e      	b.n	8b8c <__ieee754_sqrt+0x148>
    8a6e:	4b63      	ldr	r3, [pc, #396]	; (8bfc <__ieee754_sqrt+0x1b8>)
    8a70:	0312      	lsls	r2, r2, #12
    8a72:	469c      	mov	ip, r3
    8a74:	2380      	movs	r3, #128	; 0x80
    8a76:	0b12      	lsrs	r2, r2, #12
    8a78:	035b      	lsls	r3, r3, #13
    8a7a:	4467      	add	r7, ip
    8a7c:	431a      	orrs	r2, r3
    8a7e:	07fb      	lsls	r3, r7, #31
    8a80:	d468      	bmi.n	8b54 <__ieee754_sqrt+0x110>
    8a82:	107b      	asrs	r3, r7, #1
    8a84:	469c      	mov	ip, r3
    8a86:	0fe3      	lsrs	r3, r4, #31
    8a88:	189b      	adds	r3, r3, r2
    8a8a:	189b      	adds	r3, r3, r2
    8a8c:	2280      	movs	r2, #128	; 0x80
    8a8e:	2116      	movs	r1, #22
    8a90:	2600      	movs	r6, #0
    8a92:	2500      	movs	r5, #0
    8a94:	0064      	lsls	r4, r4, #1
    8a96:	0392      	lsls	r2, r2, #14
    8a98:	18a8      	adds	r0, r5, r2
    8a9a:	4298      	cmp	r0, r3
    8a9c:	dc02      	bgt.n	8aa4 <__ieee754_sqrt+0x60>
    8a9e:	1885      	adds	r5, r0, r2
    8aa0:	1a1b      	subs	r3, r3, r0
    8aa2:	18b6      	adds	r6, r6, r2
    8aa4:	0fe0      	lsrs	r0, r4, #31
    8aa6:	005b      	lsls	r3, r3, #1
    8aa8:	3901      	subs	r1, #1
    8aaa:	181b      	adds	r3, r3, r0
    8aac:	0064      	lsls	r4, r4, #1
    8aae:	0852      	lsrs	r2, r2, #1
    8ab0:	2900      	cmp	r1, #0
    8ab2:	d1f1      	bne.n	8a98 <__ieee754_sqrt+0x54>
    8ab4:	2200      	movs	r2, #0
    8ab6:	4692      	mov	sl, r2
    8ab8:	4690      	mov	r8, r2
    8aba:	2280      	movs	r2, #128	; 0x80
    8abc:	2020      	movs	r0, #32
    8abe:	0612      	lsls	r2, r2, #24
    8ac0:	e009      	b.n	8ad6 <__ieee754_sqrt+0x92>
    8ac2:	42ab      	cmp	r3, r5
    8ac4:	d038      	beq.n	8b38 <__ieee754_sqrt+0xf4>
    8ac6:	0fe1      	lsrs	r1, r4, #31
    8ac8:	18c9      	adds	r1, r1, r3
    8aca:	3801      	subs	r0, #1
    8acc:	18cb      	adds	r3, r1, r3
    8ace:	0064      	lsls	r4, r4, #1
    8ad0:	0852      	lsrs	r2, r2, #1
    8ad2:	2800      	cmp	r0, #0
    8ad4:	d018      	beq.n	8b08 <__ieee754_sqrt+0xc4>
    8ad6:	4641      	mov	r1, r8
    8ad8:	1851      	adds	r1, r2, r1
    8ada:	42ab      	cmp	r3, r5
    8adc:	ddf1      	ble.n	8ac2 <__ieee754_sqrt+0x7e>
    8ade:	188f      	adds	r7, r1, r2
    8ae0:	46b8      	mov	r8, r7
    8ae2:	46a9      	mov	r9, r5
    8ae4:	2900      	cmp	r1, #0
    8ae6:	db30      	blt.n	8b4a <__ieee754_sqrt+0x106>
    8ae8:	1b5b      	subs	r3, r3, r5
    8aea:	428c      	cmp	r4, r1
    8aec:	41ad      	sbcs	r5, r5
    8aee:	426d      	negs	r5, r5
    8af0:	1b5b      	subs	r3, r3, r5
    8af2:	1a64      	subs	r4, r4, r1
    8af4:	0fe1      	lsrs	r1, r4, #31
    8af6:	18c9      	adds	r1, r1, r3
    8af8:	3801      	subs	r0, #1
    8afa:	4492      	add	sl, r2
    8afc:	464d      	mov	r5, r9
    8afe:	18cb      	adds	r3, r1, r3
    8b00:	0064      	lsls	r4, r4, #1
    8b02:	0852      	lsrs	r2, r2, #1
    8b04:	2800      	cmp	r0, #0
    8b06:	d1e6      	bne.n	8ad6 <__ieee754_sqrt+0x92>
    8b08:	4323      	orrs	r3, r4
    8b0a:	d128      	bne.n	8b5e <__ieee754_sqrt+0x11a>
    8b0c:	4653      	mov	r3, sl
    8b0e:	085b      	lsrs	r3, r3, #1
    8b10:	493b      	ldr	r1, [pc, #236]	; (8c00 <__ieee754_sqrt+0x1bc>)
    8b12:	1072      	asrs	r2, r6, #1
    8b14:	4688      	mov	r8, r1
    8b16:	4442      	add	r2, r8
    8b18:	07f1      	lsls	r1, r6, #31
    8b1a:	d502      	bpl.n	8b22 <__ieee754_sqrt+0xde>
    8b1c:	2180      	movs	r1, #128	; 0x80
    8b1e:	0609      	lsls	r1, r1, #24
    8b20:	430b      	orrs	r3, r1
    8b22:	4661      	mov	r1, ip
    8b24:	001e      	movs	r6, r3
    8b26:	050f      	lsls	r7, r1, #20
    8b28:	18bd      	adds	r5, r7, r2
    8b2a:	0030      	movs	r0, r6
    8b2c:	0029      	movs	r1, r5
    8b2e:	bc1c      	pop	{r2, r3, r4}
    8b30:	4690      	mov	r8, r2
    8b32:	4699      	mov	r9, r3
    8b34:	46a2      	mov	sl, r4
    8b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b38:	42a1      	cmp	r1, r4
    8b3a:	d8c4      	bhi.n	8ac6 <__ieee754_sqrt+0x82>
    8b3c:	188f      	adds	r7, r1, r2
    8b3e:	46b8      	mov	r8, r7
    8b40:	2900      	cmp	r1, #0
    8b42:	db42      	blt.n	8bca <__ieee754_sqrt+0x186>
    8b44:	4699      	mov	r9, r3
    8b46:	2300      	movs	r3, #0
    8b48:	e7d3      	b.n	8af2 <__ieee754_sqrt+0xae>
    8b4a:	2f00      	cmp	r7, #0
    8b4c:	db2f      	blt.n	8bae <__ieee754_sqrt+0x16a>
    8b4e:	1c6f      	adds	r7, r5, #1
    8b50:	46b9      	mov	r9, r7
    8b52:	e7c9      	b.n	8ae8 <__ieee754_sqrt+0xa4>
    8b54:	0fe1      	lsrs	r1, r4, #31
    8b56:	0052      	lsls	r2, r2, #1
    8b58:	188a      	adds	r2, r1, r2
    8b5a:	0064      	lsls	r4, r4, #1
    8b5c:	e791      	b.n	8a82 <__ieee754_sqrt+0x3e>
    8b5e:	4653      	mov	r3, sl
    8b60:	3301      	adds	r3, #1
    8b62:	d035      	beq.n	8bd0 <__ieee754_sqrt+0x18c>
    8b64:	4653      	mov	r3, sl
    8b66:	3301      	adds	r3, #1
    8b68:	085b      	lsrs	r3, r3, #1
    8b6a:	e7d1      	b.n	8b10 <__ieee754_sqrt+0xcc>
    8b6c:	006b      	lsls	r3, r5, #1
    8b6e:	085b      	lsrs	r3, r3, #1
    8b70:	4303      	orrs	r3, r0
    8b72:	d0da      	beq.n	8b2a <__ieee754_sqrt+0xe6>
    8b74:	2700      	movs	r7, #0
    8b76:	2d00      	cmp	r5, #0
    8b78:	d132      	bne.n	8be0 <__ieee754_sqrt+0x19c>
    8b7a:	0ae2      	lsrs	r2, r4, #11
    8b7c:	3f15      	subs	r7, #21
    8b7e:	0564      	lsls	r4, r4, #21
    8b80:	2a00      	cmp	r2, #0
    8b82:	d0fa      	beq.n	8b7a <__ieee754_sqrt+0x136>
    8b84:	2380      	movs	r3, #128	; 0x80
    8b86:	035b      	lsls	r3, r3, #13
    8b88:	421a      	tst	r2, r3
    8b8a:	d124      	bne.n	8bd6 <__ieee754_sqrt+0x192>
    8b8c:	2080      	movs	r0, #128	; 0x80
    8b8e:	2300      	movs	r3, #0
    8b90:	0340      	lsls	r0, r0, #13
    8b92:	e000      	b.n	8b96 <__ieee754_sqrt+0x152>
    8b94:	000b      	movs	r3, r1
    8b96:	0052      	lsls	r2, r2, #1
    8b98:	1c59      	adds	r1, r3, #1
    8b9a:	4202      	tst	r2, r0
    8b9c:	d0fa      	beq.n	8b94 <__ieee754_sqrt+0x150>
    8b9e:	2020      	movs	r0, #32
    8ba0:	1a40      	subs	r0, r0, r1
    8ba2:	1aff      	subs	r7, r7, r3
    8ba4:	0023      	movs	r3, r4
    8ba6:	40c3      	lsrs	r3, r0
    8ba8:	408c      	lsls	r4, r1
    8baa:	431a      	orrs	r2, r3
    8bac:	e75f      	b.n	8a6e <__ieee754_sqrt+0x2a>
    8bae:	46a9      	mov	r9, r5
    8bb0:	e79a      	b.n	8ae8 <__ieee754_sqrt+0xa4>
    8bb2:	002b      	movs	r3, r5
    8bb4:	0002      	movs	r2, r0
    8bb6:	0029      	movs	r1, r5
    8bb8:	f002 fa92 	bl	b0e0 <__aeabi_dmul>
    8bbc:	0032      	movs	r2, r6
    8bbe:	002b      	movs	r3, r5
    8bc0:	f001 fb4a 	bl	a258 <__aeabi_dadd>
    8bc4:	0006      	movs	r6, r0
    8bc6:	000d      	movs	r5, r1
    8bc8:	e7af      	b.n	8b2a <__ieee754_sqrt+0xe6>
    8bca:	2f00      	cmp	r7, #0
    8bcc:	dabf      	bge.n	8b4e <__ieee754_sqrt+0x10a>
    8bce:	e7b9      	b.n	8b44 <__ieee754_sqrt+0x100>
    8bd0:	3601      	adds	r6, #1
    8bd2:	2300      	movs	r3, #0
    8bd4:	e79c      	b.n	8b10 <__ieee754_sqrt+0xcc>
    8bd6:	2301      	movs	r3, #1
    8bd8:	2100      	movs	r1, #0
    8bda:	2020      	movs	r0, #32
    8bdc:	425b      	negs	r3, r3
    8bde:	e7e0      	b.n	8ba2 <__ieee754_sqrt+0x15e>
    8be0:	002b      	movs	r3, r5
    8be2:	0002      	movs	r2, r0
    8be4:	0029      	movs	r1, r5
    8be6:	f002 fcfb 	bl	b5e0 <__aeabi_dsub>
    8bea:	0002      	movs	r2, r0
    8bec:	000b      	movs	r3, r1
    8bee:	f001 fe43 	bl	a878 <__aeabi_ddiv>
    8bf2:	0006      	movs	r6, r0
    8bf4:	000d      	movs	r5, r1
    8bf6:	e798      	b.n	8b2a <__ieee754_sqrt+0xe6>
    8bf8:	7ff00000 	.word	0x7ff00000
    8bfc:	fffffc01 	.word	0xfffffc01
    8c00:	3fe00000 	.word	0x3fe00000

00008c04 <fabs>:
    8c04:	0049      	lsls	r1, r1, #1
    8c06:	084b      	lsrs	r3, r1, #1
    8c08:	0019      	movs	r1, r3
    8c0a:	4770      	bx	lr

00008c0c <finite>:
    8c0c:	4b03      	ldr	r3, [pc, #12]	; (8c1c <finite+0x10>)
    8c0e:	0048      	lsls	r0, r1, #1
    8c10:	469c      	mov	ip, r3
    8c12:	0840      	lsrs	r0, r0, #1
    8c14:	4460      	add	r0, ip
    8c16:	0fc0      	lsrs	r0, r0, #31
    8c18:	4770      	bx	lr
    8c1a:	46c0      	nop			; (mov r8, r8)
    8c1c:	80100000 	.word	0x80100000

00008c20 <matherr>:
    8c20:	2000      	movs	r0, #0
    8c22:	4770      	bx	lr

00008c24 <nan>:
    8c24:	2000      	movs	r0, #0
    8c26:	4901      	ldr	r1, [pc, #4]	; (8c2c <nan+0x8>)
    8c28:	4770      	bx	lr
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	7ff80000 	.word	0x7ff80000

00008c30 <rint>:
    8c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c32:	46c6      	mov	lr, r8
    8c34:	b500      	push	{lr}
    8c36:	0fcb      	lsrs	r3, r1, #31
    8c38:	4698      	mov	r8, r3
    8c3a:	4c4a      	ldr	r4, [pc, #296]	; (8d64 <rint+0x134>)
    8c3c:	004b      	lsls	r3, r1, #1
    8c3e:	0d5b      	lsrs	r3, r3, #21
    8c40:	191e      	adds	r6, r3, r4
    8c42:	b082      	sub	sp, #8
    8c44:	0007      	movs	r7, r0
    8c46:	000a      	movs	r2, r1
    8c48:	2e13      	cmp	r6, #19
    8c4a:	dc35      	bgt.n	8cb8 <rint+0x88>
    8c4c:	2e00      	cmp	r6, #0
    8c4e:	db57      	blt.n	8d00 <rint+0xd0>
    8c50:	4b45      	ldr	r3, [pc, #276]	; (8d68 <rint+0x138>)
    8c52:	0004      	movs	r4, r0
    8c54:	4133      	asrs	r3, r6
    8c56:	001f      	movs	r7, r3
    8c58:	400f      	ands	r7, r1
    8c5a:	4307      	orrs	r7, r0
    8c5c:	000d      	movs	r5, r1
    8c5e:	2f00      	cmp	r7, #0
    8c60:	d024      	beq.n	8cac <rint+0x7c>
    8c62:	085b      	lsrs	r3, r3, #1
    8c64:	001c      	movs	r4, r3
    8c66:	400c      	ands	r4, r1
    8c68:	4320      	orrs	r0, r4
    8c6a:	2700      	movs	r7, #0
    8c6c:	2800      	cmp	r0, #0
    8c6e:	d007      	beq.n	8c80 <rint+0x50>
    8c70:	2e13      	cmp	r6, #19
    8c72:	d100      	bne.n	8c76 <rint+0x46>
    8c74:	e073      	b.n	8d5e <rint+0x12e>
    8c76:	2280      	movs	r2, #128	; 0x80
    8c78:	02d2      	lsls	r2, r2, #11
    8c7a:	4132      	asrs	r2, r6
    8c7c:	4399      	bics	r1, r3
    8c7e:	430a      	orrs	r2, r1
    8c80:	4643      	mov	r3, r8
    8c82:	00de      	lsls	r6, r3, #3
    8c84:	4b39      	ldr	r3, [pc, #228]	; (8d6c <rint+0x13c>)
    8c86:	0011      	movs	r1, r2
    8c88:	199e      	adds	r6, r3, r6
    8c8a:	6834      	ldr	r4, [r6, #0]
    8c8c:	6875      	ldr	r5, [r6, #4]
    8c8e:	0038      	movs	r0, r7
    8c90:	0022      	movs	r2, r4
    8c92:	002b      	movs	r3, r5
    8c94:	f001 fae0 	bl	a258 <__aeabi_dadd>
    8c98:	9000      	str	r0, [sp, #0]
    8c9a:	9101      	str	r1, [sp, #4]
    8c9c:	9800      	ldr	r0, [sp, #0]
    8c9e:	9901      	ldr	r1, [sp, #4]
    8ca0:	0022      	movs	r2, r4
    8ca2:	002b      	movs	r3, r5
    8ca4:	f002 fc9c 	bl	b5e0 <__aeabi_dsub>
    8ca8:	0004      	movs	r4, r0
    8caa:	000d      	movs	r5, r1
    8cac:	0020      	movs	r0, r4
    8cae:	0029      	movs	r1, r5
    8cb0:	b002      	add	sp, #8
    8cb2:	bc04      	pop	{r2}
    8cb4:	4690      	mov	r8, r2
    8cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cb8:	2e33      	cmp	r6, #51	; 0x33
    8cba:	dd0c      	ble.n	8cd6 <rint+0xa6>
    8cbc:	2380      	movs	r3, #128	; 0x80
    8cbe:	0004      	movs	r4, r0
    8cc0:	00db      	lsls	r3, r3, #3
    8cc2:	000d      	movs	r5, r1
    8cc4:	429e      	cmp	r6, r3
    8cc6:	d1f1      	bne.n	8cac <rint+0x7c>
    8cc8:	0002      	movs	r2, r0
    8cca:	000b      	movs	r3, r1
    8ccc:	f001 fac4 	bl	a258 <__aeabi_dadd>
    8cd0:	0004      	movs	r4, r0
    8cd2:	000d      	movs	r5, r1
    8cd4:	e7ea      	b.n	8cac <rint+0x7c>
    8cd6:	4c26      	ldr	r4, [pc, #152]	; (8d70 <rint+0x140>)
    8cd8:	000d      	movs	r5, r1
    8cda:	46a4      	mov	ip, r4
    8cdc:	2401      	movs	r4, #1
    8cde:	4463      	add	r3, ip
    8ce0:	4264      	negs	r4, r4
    8ce2:	40dc      	lsrs	r4, r3
    8ce4:	46a4      	mov	ip, r4
    8ce6:	4661      	mov	r1, ip
    8ce8:	0004      	movs	r4, r0
    8cea:	4201      	tst	r1, r0
    8cec:	d0de      	beq.n	8cac <rint+0x7c>
    8cee:	0849      	lsrs	r1, r1, #1
    8cf0:	4201      	tst	r1, r0
    8cf2:	d0c5      	beq.n	8c80 <rint+0x50>
    8cf4:	2780      	movs	r7, #128	; 0x80
    8cf6:	05ff      	lsls	r7, r7, #23
    8cf8:	411f      	asrs	r7, r3
    8cfa:	4388      	bics	r0, r1
    8cfc:	4307      	orrs	r7, r0
    8cfe:	e7bf      	b.n	8c80 <rint+0x50>
    8d00:	004b      	lsls	r3, r1, #1
    8d02:	085b      	lsrs	r3, r3, #1
    8d04:	4303      	orrs	r3, r0
    8d06:	0004      	movs	r4, r0
    8d08:	000d      	movs	r5, r1
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d0ce      	beq.n	8cac <rint+0x7c>
    8d0e:	030b      	lsls	r3, r1, #12
    8d10:	0b1b      	lsrs	r3, r3, #12
    8d12:	4303      	orrs	r3, r0
    8d14:	001a      	movs	r2, r3
    8d16:	425b      	negs	r3, r3
    8d18:	4313      	orrs	r3, r2
    8d1a:	2280      	movs	r2, #128	; 0x80
    8d1c:	0b1b      	lsrs	r3, r3, #12
    8d1e:	0312      	lsls	r2, r2, #12
    8d20:	4013      	ands	r3, r2
    8d22:	0c4a      	lsrs	r2, r1, #17
    8d24:	0452      	lsls	r2, r2, #17
    8d26:	4313      	orrs	r3, r2
    8d28:	0019      	movs	r1, r3
    8d2a:	4643      	mov	r3, r8
    8d2c:	00da      	lsls	r2, r3, #3
    8d2e:	4b0f      	ldr	r3, [pc, #60]	; (8d6c <rint+0x13c>)
    8d30:	189b      	adds	r3, r3, r2
    8d32:	681c      	ldr	r4, [r3, #0]
    8d34:	685d      	ldr	r5, [r3, #4]
    8d36:	0022      	movs	r2, r4
    8d38:	002b      	movs	r3, r5
    8d3a:	f001 fa8d 	bl	a258 <__aeabi_dadd>
    8d3e:	9000      	str	r0, [sp, #0]
    8d40:	9101      	str	r1, [sp, #4]
    8d42:	9800      	ldr	r0, [sp, #0]
    8d44:	9901      	ldr	r1, [sp, #4]
    8d46:	0022      	movs	r2, r4
    8d48:	002b      	movs	r3, r5
    8d4a:	f002 fc49 	bl	b5e0 <__aeabi_dsub>
    8d4e:	4642      	mov	r2, r8
    8d50:	004b      	lsls	r3, r1, #1
    8d52:	085b      	lsrs	r3, r3, #1
    8d54:	07d6      	lsls	r6, r2, #31
    8d56:	4333      	orrs	r3, r6
    8d58:	0004      	movs	r4, r0
    8d5a:	001d      	movs	r5, r3
    8d5c:	e7a6      	b.n	8cac <rint+0x7c>
    8d5e:	2780      	movs	r7, #128	; 0x80
    8d60:	063f      	lsls	r7, r7, #24
    8d62:	e788      	b.n	8c76 <rint+0x46>
    8d64:	fffffc01 	.word	0xfffffc01
    8d68:	000fffff 	.word	0x000fffff
    8d6c:	000112f0 	.word	0x000112f0
    8d70:	fffffbed 	.word	0xfffffbed

00008d74 <scalbn>:
    8d74:	004b      	lsls	r3, r1, #1
    8d76:	b570      	push	{r4, r5, r6, lr}
    8d78:	0d5b      	lsrs	r3, r3, #21
    8d7a:	0014      	movs	r4, r2
    8d7c:	000a      	movs	r2, r1
    8d7e:	2b00      	cmp	r3, #0
    8d80:	d11a      	bne.n	8db8 <scalbn+0x44>
    8d82:	004b      	lsls	r3, r1, #1
    8d84:	085b      	lsrs	r3, r3, #1
    8d86:	4303      	orrs	r3, r0
    8d88:	d015      	beq.n	8db6 <scalbn+0x42>
    8d8a:	2200      	movs	r2, #0
    8d8c:	4b22      	ldr	r3, [pc, #136]	; (8e18 <scalbn+0xa4>)
    8d8e:	f002 f9a7 	bl	b0e0 <__aeabi_dmul>
    8d92:	4b22      	ldr	r3, [pc, #136]	; (8e1c <scalbn+0xa8>)
    8d94:	000a      	movs	r2, r1
    8d96:	429c      	cmp	r4, r3
    8d98:	db22      	blt.n	8de0 <scalbn+0x6c>
    8d9a:	004b      	lsls	r3, r1, #1
    8d9c:	0d5b      	lsrs	r3, r3, #21
    8d9e:	3b36      	subs	r3, #54	; 0x36
    8da0:	4d1f      	ldr	r5, [pc, #124]	; (8e20 <scalbn+0xac>)
    8da2:	18e3      	adds	r3, r4, r3
    8da4:	42ab      	cmp	r3, r5
    8da6:	dc20      	bgt.n	8dea <scalbn+0x76>
    8da8:	2b00      	cmp	r3, #0
    8daa:	dd0d      	ble.n	8dc8 <scalbn+0x54>
    8dac:	4c1d      	ldr	r4, [pc, #116]	; (8e24 <scalbn+0xb0>)
    8dae:	051b      	lsls	r3, r3, #20
    8db0:	4022      	ands	r2, r4
    8db2:	431a      	orrs	r2, r3
    8db4:	0011      	movs	r1, r2
    8db6:	bd70      	pop	{r4, r5, r6, pc}
    8db8:	4d1b      	ldr	r5, [pc, #108]	; (8e28 <scalbn+0xb4>)
    8dba:	42ab      	cmp	r3, r5
    8dbc:	d1f0      	bne.n	8da0 <scalbn+0x2c>
    8dbe:	0002      	movs	r2, r0
    8dc0:	000b      	movs	r3, r1
    8dc2:	f001 fa49 	bl	a258 <__aeabi_dadd>
    8dc6:	e7f6      	b.n	8db6 <scalbn+0x42>
    8dc8:	001d      	movs	r5, r3
    8dca:	3535      	adds	r5, #53	; 0x35
    8dcc:	da18      	bge.n	8e00 <scalbn+0x8c>
    8dce:	4b17      	ldr	r3, [pc, #92]	; (8e2c <scalbn+0xb8>)
    8dd0:	0002      	movs	r2, r0
    8dd2:	429c      	cmp	r4, r3
    8dd4:	dc0a      	bgt.n	8dec <scalbn+0x78>
    8dd6:	000b      	movs	r3, r1
    8dd8:	4815      	ldr	r0, [pc, #84]	; (8e30 <scalbn+0xbc>)
    8dda:	4916      	ldr	r1, [pc, #88]	; (8e34 <scalbn+0xc0>)
    8ddc:	f000 f832 	bl	8e44 <copysign>
    8de0:	4a13      	ldr	r2, [pc, #76]	; (8e30 <scalbn+0xbc>)
    8de2:	4b14      	ldr	r3, [pc, #80]	; (8e34 <scalbn+0xc0>)
    8de4:	f002 f97c 	bl	b0e0 <__aeabi_dmul>
    8de8:	e7e5      	b.n	8db6 <scalbn+0x42>
    8dea:	0002      	movs	r2, r0
    8dec:	000b      	movs	r3, r1
    8dee:	4812      	ldr	r0, [pc, #72]	; (8e38 <scalbn+0xc4>)
    8df0:	4912      	ldr	r1, [pc, #72]	; (8e3c <scalbn+0xc8>)
    8df2:	f000 f827 	bl	8e44 <copysign>
    8df6:	4a10      	ldr	r2, [pc, #64]	; (8e38 <scalbn+0xc4>)
    8df8:	4b10      	ldr	r3, [pc, #64]	; (8e3c <scalbn+0xc8>)
    8dfa:	f002 f971 	bl	b0e0 <__aeabi_dmul>
    8dfe:	e7da      	b.n	8db6 <scalbn+0x42>
    8e00:	4c08      	ldr	r4, [pc, #32]	; (8e24 <scalbn+0xb0>)
    8e02:	3336      	adds	r3, #54	; 0x36
    8e04:	4022      	ands	r2, r4
    8e06:	051b      	lsls	r3, r3, #20
    8e08:	4313      	orrs	r3, r2
    8e0a:	0019      	movs	r1, r3
    8e0c:	2200      	movs	r2, #0
    8e0e:	4b0c      	ldr	r3, [pc, #48]	; (8e40 <scalbn+0xcc>)
    8e10:	f002 f966 	bl	b0e0 <__aeabi_dmul>
    8e14:	e7cf      	b.n	8db6 <scalbn+0x42>
    8e16:	46c0      	nop			; (mov r8, r8)
    8e18:	43500000 	.word	0x43500000
    8e1c:	ffff3cb0 	.word	0xffff3cb0
    8e20:	000007fe 	.word	0x000007fe
    8e24:	800fffff 	.word	0x800fffff
    8e28:	000007ff 	.word	0x000007ff
    8e2c:	0000c350 	.word	0x0000c350
    8e30:	c2f8f359 	.word	0xc2f8f359
    8e34:	01a56e1f 	.word	0x01a56e1f
    8e38:	8800759c 	.word	0x8800759c
    8e3c:	7e37e43c 	.word	0x7e37e43c
    8e40:	3c900000 	.word	0x3c900000

00008e44 <copysign>:
    8e44:	b530      	push	{r4, r5, lr}
    8e46:	004a      	lsls	r2, r1, #1
    8e48:	0fdb      	lsrs	r3, r3, #31
    8e4a:	07db      	lsls	r3, r3, #31
    8e4c:	0852      	lsrs	r2, r2, #1
    8e4e:	431a      	orrs	r2, r3
    8e50:	0011      	movs	r1, r2
    8e52:	bd30      	pop	{r4, r5, pc}

00008e54 <__udivsi3>:
    8e54:	2200      	movs	r2, #0
    8e56:	0843      	lsrs	r3, r0, #1
    8e58:	428b      	cmp	r3, r1
    8e5a:	d374      	bcc.n	8f46 <__udivsi3+0xf2>
    8e5c:	0903      	lsrs	r3, r0, #4
    8e5e:	428b      	cmp	r3, r1
    8e60:	d35f      	bcc.n	8f22 <__udivsi3+0xce>
    8e62:	0a03      	lsrs	r3, r0, #8
    8e64:	428b      	cmp	r3, r1
    8e66:	d344      	bcc.n	8ef2 <__udivsi3+0x9e>
    8e68:	0b03      	lsrs	r3, r0, #12
    8e6a:	428b      	cmp	r3, r1
    8e6c:	d328      	bcc.n	8ec0 <__udivsi3+0x6c>
    8e6e:	0c03      	lsrs	r3, r0, #16
    8e70:	428b      	cmp	r3, r1
    8e72:	d30d      	bcc.n	8e90 <__udivsi3+0x3c>
    8e74:	22ff      	movs	r2, #255	; 0xff
    8e76:	0209      	lsls	r1, r1, #8
    8e78:	ba12      	rev	r2, r2
    8e7a:	0c03      	lsrs	r3, r0, #16
    8e7c:	428b      	cmp	r3, r1
    8e7e:	d302      	bcc.n	8e86 <__udivsi3+0x32>
    8e80:	1212      	asrs	r2, r2, #8
    8e82:	0209      	lsls	r1, r1, #8
    8e84:	d065      	beq.n	8f52 <__udivsi3+0xfe>
    8e86:	0b03      	lsrs	r3, r0, #12
    8e88:	428b      	cmp	r3, r1
    8e8a:	d319      	bcc.n	8ec0 <__udivsi3+0x6c>
    8e8c:	e000      	b.n	8e90 <__udivsi3+0x3c>
    8e8e:	0a09      	lsrs	r1, r1, #8
    8e90:	0bc3      	lsrs	r3, r0, #15
    8e92:	428b      	cmp	r3, r1
    8e94:	d301      	bcc.n	8e9a <__udivsi3+0x46>
    8e96:	03cb      	lsls	r3, r1, #15
    8e98:	1ac0      	subs	r0, r0, r3
    8e9a:	4152      	adcs	r2, r2
    8e9c:	0b83      	lsrs	r3, r0, #14
    8e9e:	428b      	cmp	r3, r1
    8ea0:	d301      	bcc.n	8ea6 <__udivsi3+0x52>
    8ea2:	038b      	lsls	r3, r1, #14
    8ea4:	1ac0      	subs	r0, r0, r3
    8ea6:	4152      	adcs	r2, r2
    8ea8:	0b43      	lsrs	r3, r0, #13
    8eaa:	428b      	cmp	r3, r1
    8eac:	d301      	bcc.n	8eb2 <__udivsi3+0x5e>
    8eae:	034b      	lsls	r3, r1, #13
    8eb0:	1ac0      	subs	r0, r0, r3
    8eb2:	4152      	adcs	r2, r2
    8eb4:	0b03      	lsrs	r3, r0, #12
    8eb6:	428b      	cmp	r3, r1
    8eb8:	d301      	bcc.n	8ebe <__udivsi3+0x6a>
    8eba:	030b      	lsls	r3, r1, #12
    8ebc:	1ac0      	subs	r0, r0, r3
    8ebe:	4152      	adcs	r2, r2
    8ec0:	0ac3      	lsrs	r3, r0, #11
    8ec2:	428b      	cmp	r3, r1
    8ec4:	d301      	bcc.n	8eca <__udivsi3+0x76>
    8ec6:	02cb      	lsls	r3, r1, #11
    8ec8:	1ac0      	subs	r0, r0, r3
    8eca:	4152      	adcs	r2, r2
    8ecc:	0a83      	lsrs	r3, r0, #10
    8ece:	428b      	cmp	r3, r1
    8ed0:	d301      	bcc.n	8ed6 <__udivsi3+0x82>
    8ed2:	028b      	lsls	r3, r1, #10
    8ed4:	1ac0      	subs	r0, r0, r3
    8ed6:	4152      	adcs	r2, r2
    8ed8:	0a43      	lsrs	r3, r0, #9
    8eda:	428b      	cmp	r3, r1
    8edc:	d301      	bcc.n	8ee2 <__udivsi3+0x8e>
    8ede:	024b      	lsls	r3, r1, #9
    8ee0:	1ac0      	subs	r0, r0, r3
    8ee2:	4152      	adcs	r2, r2
    8ee4:	0a03      	lsrs	r3, r0, #8
    8ee6:	428b      	cmp	r3, r1
    8ee8:	d301      	bcc.n	8eee <__udivsi3+0x9a>
    8eea:	020b      	lsls	r3, r1, #8
    8eec:	1ac0      	subs	r0, r0, r3
    8eee:	4152      	adcs	r2, r2
    8ef0:	d2cd      	bcs.n	8e8e <__udivsi3+0x3a>
    8ef2:	09c3      	lsrs	r3, r0, #7
    8ef4:	428b      	cmp	r3, r1
    8ef6:	d301      	bcc.n	8efc <__udivsi3+0xa8>
    8ef8:	01cb      	lsls	r3, r1, #7
    8efa:	1ac0      	subs	r0, r0, r3
    8efc:	4152      	adcs	r2, r2
    8efe:	0983      	lsrs	r3, r0, #6
    8f00:	428b      	cmp	r3, r1
    8f02:	d301      	bcc.n	8f08 <__udivsi3+0xb4>
    8f04:	018b      	lsls	r3, r1, #6
    8f06:	1ac0      	subs	r0, r0, r3
    8f08:	4152      	adcs	r2, r2
    8f0a:	0943      	lsrs	r3, r0, #5
    8f0c:	428b      	cmp	r3, r1
    8f0e:	d301      	bcc.n	8f14 <__udivsi3+0xc0>
    8f10:	014b      	lsls	r3, r1, #5
    8f12:	1ac0      	subs	r0, r0, r3
    8f14:	4152      	adcs	r2, r2
    8f16:	0903      	lsrs	r3, r0, #4
    8f18:	428b      	cmp	r3, r1
    8f1a:	d301      	bcc.n	8f20 <__udivsi3+0xcc>
    8f1c:	010b      	lsls	r3, r1, #4
    8f1e:	1ac0      	subs	r0, r0, r3
    8f20:	4152      	adcs	r2, r2
    8f22:	08c3      	lsrs	r3, r0, #3
    8f24:	428b      	cmp	r3, r1
    8f26:	d301      	bcc.n	8f2c <__udivsi3+0xd8>
    8f28:	00cb      	lsls	r3, r1, #3
    8f2a:	1ac0      	subs	r0, r0, r3
    8f2c:	4152      	adcs	r2, r2
    8f2e:	0883      	lsrs	r3, r0, #2
    8f30:	428b      	cmp	r3, r1
    8f32:	d301      	bcc.n	8f38 <__udivsi3+0xe4>
    8f34:	008b      	lsls	r3, r1, #2
    8f36:	1ac0      	subs	r0, r0, r3
    8f38:	4152      	adcs	r2, r2
    8f3a:	0843      	lsrs	r3, r0, #1
    8f3c:	428b      	cmp	r3, r1
    8f3e:	d301      	bcc.n	8f44 <__udivsi3+0xf0>
    8f40:	004b      	lsls	r3, r1, #1
    8f42:	1ac0      	subs	r0, r0, r3
    8f44:	4152      	adcs	r2, r2
    8f46:	1a41      	subs	r1, r0, r1
    8f48:	d200      	bcs.n	8f4c <__udivsi3+0xf8>
    8f4a:	4601      	mov	r1, r0
    8f4c:	4152      	adcs	r2, r2
    8f4e:	4610      	mov	r0, r2
    8f50:	4770      	bx	lr
    8f52:	e7ff      	b.n	8f54 <__udivsi3+0x100>
    8f54:	b501      	push	{r0, lr}
    8f56:	2000      	movs	r0, #0
    8f58:	f000 f8f0 	bl	913c <__aeabi_idiv0>
    8f5c:	bd02      	pop	{r1, pc}
    8f5e:	46c0      	nop			; (mov r8, r8)

00008f60 <__aeabi_uidivmod>:
    8f60:	2900      	cmp	r1, #0
    8f62:	d0f7      	beq.n	8f54 <__udivsi3+0x100>
    8f64:	e776      	b.n	8e54 <__udivsi3>
    8f66:	4770      	bx	lr

00008f68 <__divsi3>:
    8f68:	4603      	mov	r3, r0
    8f6a:	430b      	orrs	r3, r1
    8f6c:	d47f      	bmi.n	906e <__divsi3+0x106>
    8f6e:	2200      	movs	r2, #0
    8f70:	0843      	lsrs	r3, r0, #1
    8f72:	428b      	cmp	r3, r1
    8f74:	d374      	bcc.n	9060 <__divsi3+0xf8>
    8f76:	0903      	lsrs	r3, r0, #4
    8f78:	428b      	cmp	r3, r1
    8f7a:	d35f      	bcc.n	903c <__divsi3+0xd4>
    8f7c:	0a03      	lsrs	r3, r0, #8
    8f7e:	428b      	cmp	r3, r1
    8f80:	d344      	bcc.n	900c <__divsi3+0xa4>
    8f82:	0b03      	lsrs	r3, r0, #12
    8f84:	428b      	cmp	r3, r1
    8f86:	d328      	bcc.n	8fda <__divsi3+0x72>
    8f88:	0c03      	lsrs	r3, r0, #16
    8f8a:	428b      	cmp	r3, r1
    8f8c:	d30d      	bcc.n	8faa <__divsi3+0x42>
    8f8e:	22ff      	movs	r2, #255	; 0xff
    8f90:	0209      	lsls	r1, r1, #8
    8f92:	ba12      	rev	r2, r2
    8f94:	0c03      	lsrs	r3, r0, #16
    8f96:	428b      	cmp	r3, r1
    8f98:	d302      	bcc.n	8fa0 <__divsi3+0x38>
    8f9a:	1212      	asrs	r2, r2, #8
    8f9c:	0209      	lsls	r1, r1, #8
    8f9e:	d065      	beq.n	906c <__divsi3+0x104>
    8fa0:	0b03      	lsrs	r3, r0, #12
    8fa2:	428b      	cmp	r3, r1
    8fa4:	d319      	bcc.n	8fda <__divsi3+0x72>
    8fa6:	e000      	b.n	8faa <__divsi3+0x42>
    8fa8:	0a09      	lsrs	r1, r1, #8
    8faa:	0bc3      	lsrs	r3, r0, #15
    8fac:	428b      	cmp	r3, r1
    8fae:	d301      	bcc.n	8fb4 <__divsi3+0x4c>
    8fb0:	03cb      	lsls	r3, r1, #15
    8fb2:	1ac0      	subs	r0, r0, r3
    8fb4:	4152      	adcs	r2, r2
    8fb6:	0b83      	lsrs	r3, r0, #14
    8fb8:	428b      	cmp	r3, r1
    8fba:	d301      	bcc.n	8fc0 <__divsi3+0x58>
    8fbc:	038b      	lsls	r3, r1, #14
    8fbe:	1ac0      	subs	r0, r0, r3
    8fc0:	4152      	adcs	r2, r2
    8fc2:	0b43      	lsrs	r3, r0, #13
    8fc4:	428b      	cmp	r3, r1
    8fc6:	d301      	bcc.n	8fcc <__divsi3+0x64>
    8fc8:	034b      	lsls	r3, r1, #13
    8fca:	1ac0      	subs	r0, r0, r3
    8fcc:	4152      	adcs	r2, r2
    8fce:	0b03      	lsrs	r3, r0, #12
    8fd0:	428b      	cmp	r3, r1
    8fd2:	d301      	bcc.n	8fd8 <__divsi3+0x70>
    8fd4:	030b      	lsls	r3, r1, #12
    8fd6:	1ac0      	subs	r0, r0, r3
    8fd8:	4152      	adcs	r2, r2
    8fda:	0ac3      	lsrs	r3, r0, #11
    8fdc:	428b      	cmp	r3, r1
    8fde:	d301      	bcc.n	8fe4 <__divsi3+0x7c>
    8fe0:	02cb      	lsls	r3, r1, #11
    8fe2:	1ac0      	subs	r0, r0, r3
    8fe4:	4152      	adcs	r2, r2
    8fe6:	0a83      	lsrs	r3, r0, #10
    8fe8:	428b      	cmp	r3, r1
    8fea:	d301      	bcc.n	8ff0 <__divsi3+0x88>
    8fec:	028b      	lsls	r3, r1, #10
    8fee:	1ac0      	subs	r0, r0, r3
    8ff0:	4152      	adcs	r2, r2
    8ff2:	0a43      	lsrs	r3, r0, #9
    8ff4:	428b      	cmp	r3, r1
    8ff6:	d301      	bcc.n	8ffc <__divsi3+0x94>
    8ff8:	024b      	lsls	r3, r1, #9
    8ffa:	1ac0      	subs	r0, r0, r3
    8ffc:	4152      	adcs	r2, r2
    8ffe:	0a03      	lsrs	r3, r0, #8
    9000:	428b      	cmp	r3, r1
    9002:	d301      	bcc.n	9008 <__divsi3+0xa0>
    9004:	020b      	lsls	r3, r1, #8
    9006:	1ac0      	subs	r0, r0, r3
    9008:	4152      	adcs	r2, r2
    900a:	d2cd      	bcs.n	8fa8 <__divsi3+0x40>
    900c:	09c3      	lsrs	r3, r0, #7
    900e:	428b      	cmp	r3, r1
    9010:	d301      	bcc.n	9016 <__divsi3+0xae>
    9012:	01cb      	lsls	r3, r1, #7
    9014:	1ac0      	subs	r0, r0, r3
    9016:	4152      	adcs	r2, r2
    9018:	0983      	lsrs	r3, r0, #6
    901a:	428b      	cmp	r3, r1
    901c:	d301      	bcc.n	9022 <__divsi3+0xba>
    901e:	018b      	lsls	r3, r1, #6
    9020:	1ac0      	subs	r0, r0, r3
    9022:	4152      	adcs	r2, r2
    9024:	0943      	lsrs	r3, r0, #5
    9026:	428b      	cmp	r3, r1
    9028:	d301      	bcc.n	902e <__divsi3+0xc6>
    902a:	014b      	lsls	r3, r1, #5
    902c:	1ac0      	subs	r0, r0, r3
    902e:	4152      	adcs	r2, r2
    9030:	0903      	lsrs	r3, r0, #4
    9032:	428b      	cmp	r3, r1
    9034:	d301      	bcc.n	903a <__divsi3+0xd2>
    9036:	010b      	lsls	r3, r1, #4
    9038:	1ac0      	subs	r0, r0, r3
    903a:	4152      	adcs	r2, r2
    903c:	08c3      	lsrs	r3, r0, #3
    903e:	428b      	cmp	r3, r1
    9040:	d301      	bcc.n	9046 <__divsi3+0xde>
    9042:	00cb      	lsls	r3, r1, #3
    9044:	1ac0      	subs	r0, r0, r3
    9046:	4152      	adcs	r2, r2
    9048:	0883      	lsrs	r3, r0, #2
    904a:	428b      	cmp	r3, r1
    904c:	d301      	bcc.n	9052 <__divsi3+0xea>
    904e:	008b      	lsls	r3, r1, #2
    9050:	1ac0      	subs	r0, r0, r3
    9052:	4152      	adcs	r2, r2
    9054:	0843      	lsrs	r3, r0, #1
    9056:	428b      	cmp	r3, r1
    9058:	d301      	bcc.n	905e <__divsi3+0xf6>
    905a:	004b      	lsls	r3, r1, #1
    905c:	1ac0      	subs	r0, r0, r3
    905e:	4152      	adcs	r2, r2
    9060:	1a41      	subs	r1, r0, r1
    9062:	d200      	bcs.n	9066 <__divsi3+0xfe>
    9064:	4601      	mov	r1, r0
    9066:	4152      	adcs	r2, r2
    9068:	4610      	mov	r0, r2
    906a:	4770      	bx	lr
    906c:	e05d      	b.n	912a <__divsi3+0x1c2>
    906e:	0fca      	lsrs	r2, r1, #31
    9070:	d000      	beq.n	9074 <__divsi3+0x10c>
    9072:	4249      	negs	r1, r1
    9074:	1003      	asrs	r3, r0, #32
    9076:	d300      	bcc.n	907a <__divsi3+0x112>
    9078:	4240      	negs	r0, r0
    907a:	4053      	eors	r3, r2
    907c:	2200      	movs	r2, #0
    907e:	469c      	mov	ip, r3
    9080:	0903      	lsrs	r3, r0, #4
    9082:	428b      	cmp	r3, r1
    9084:	d32d      	bcc.n	90e2 <__divsi3+0x17a>
    9086:	0a03      	lsrs	r3, r0, #8
    9088:	428b      	cmp	r3, r1
    908a:	d312      	bcc.n	90b2 <__divsi3+0x14a>
    908c:	22fc      	movs	r2, #252	; 0xfc
    908e:	0189      	lsls	r1, r1, #6
    9090:	ba12      	rev	r2, r2
    9092:	0a03      	lsrs	r3, r0, #8
    9094:	428b      	cmp	r3, r1
    9096:	d30c      	bcc.n	90b2 <__divsi3+0x14a>
    9098:	0189      	lsls	r1, r1, #6
    909a:	1192      	asrs	r2, r2, #6
    909c:	428b      	cmp	r3, r1
    909e:	d308      	bcc.n	90b2 <__divsi3+0x14a>
    90a0:	0189      	lsls	r1, r1, #6
    90a2:	1192      	asrs	r2, r2, #6
    90a4:	428b      	cmp	r3, r1
    90a6:	d304      	bcc.n	90b2 <__divsi3+0x14a>
    90a8:	0189      	lsls	r1, r1, #6
    90aa:	d03a      	beq.n	9122 <__divsi3+0x1ba>
    90ac:	1192      	asrs	r2, r2, #6
    90ae:	e000      	b.n	90b2 <__divsi3+0x14a>
    90b0:	0989      	lsrs	r1, r1, #6
    90b2:	09c3      	lsrs	r3, r0, #7
    90b4:	428b      	cmp	r3, r1
    90b6:	d301      	bcc.n	90bc <__divsi3+0x154>
    90b8:	01cb      	lsls	r3, r1, #7
    90ba:	1ac0      	subs	r0, r0, r3
    90bc:	4152      	adcs	r2, r2
    90be:	0983      	lsrs	r3, r0, #6
    90c0:	428b      	cmp	r3, r1
    90c2:	d301      	bcc.n	90c8 <__divsi3+0x160>
    90c4:	018b      	lsls	r3, r1, #6
    90c6:	1ac0      	subs	r0, r0, r3
    90c8:	4152      	adcs	r2, r2
    90ca:	0943      	lsrs	r3, r0, #5
    90cc:	428b      	cmp	r3, r1
    90ce:	d301      	bcc.n	90d4 <__divsi3+0x16c>
    90d0:	014b      	lsls	r3, r1, #5
    90d2:	1ac0      	subs	r0, r0, r3
    90d4:	4152      	adcs	r2, r2
    90d6:	0903      	lsrs	r3, r0, #4
    90d8:	428b      	cmp	r3, r1
    90da:	d301      	bcc.n	90e0 <__divsi3+0x178>
    90dc:	010b      	lsls	r3, r1, #4
    90de:	1ac0      	subs	r0, r0, r3
    90e0:	4152      	adcs	r2, r2
    90e2:	08c3      	lsrs	r3, r0, #3
    90e4:	428b      	cmp	r3, r1
    90e6:	d301      	bcc.n	90ec <__divsi3+0x184>
    90e8:	00cb      	lsls	r3, r1, #3
    90ea:	1ac0      	subs	r0, r0, r3
    90ec:	4152      	adcs	r2, r2
    90ee:	0883      	lsrs	r3, r0, #2
    90f0:	428b      	cmp	r3, r1
    90f2:	d301      	bcc.n	90f8 <__divsi3+0x190>
    90f4:	008b      	lsls	r3, r1, #2
    90f6:	1ac0      	subs	r0, r0, r3
    90f8:	4152      	adcs	r2, r2
    90fa:	d2d9      	bcs.n	90b0 <__divsi3+0x148>
    90fc:	0843      	lsrs	r3, r0, #1
    90fe:	428b      	cmp	r3, r1
    9100:	d301      	bcc.n	9106 <__divsi3+0x19e>
    9102:	004b      	lsls	r3, r1, #1
    9104:	1ac0      	subs	r0, r0, r3
    9106:	4152      	adcs	r2, r2
    9108:	1a41      	subs	r1, r0, r1
    910a:	d200      	bcs.n	910e <__divsi3+0x1a6>
    910c:	4601      	mov	r1, r0
    910e:	4663      	mov	r3, ip
    9110:	4152      	adcs	r2, r2
    9112:	105b      	asrs	r3, r3, #1
    9114:	4610      	mov	r0, r2
    9116:	d301      	bcc.n	911c <__divsi3+0x1b4>
    9118:	4240      	negs	r0, r0
    911a:	2b00      	cmp	r3, #0
    911c:	d500      	bpl.n	9120 <__divsi3+0x1b8>
    911e:	4249      	negs	r1, r1
    9120:	4770      	bx	lr
    9122:	4663      	mov	r3, ip
    9124:	105b      	asrs	r3, r3, #1
    9126:	d300      	bcc.n	912a <__divsi3+0x1c2>
    9128:	4240      	negs	r0, r0
    912a:	b501      	push	{r0, lr}
    912c:	2000      	movs	r0, #0
    912e:	f000 f805 	bl	913c <__aeabi_idiv0>
    9132:	bd02      	pop	{r1, pc}

00009134 <__aeabi_idivmod>:
    9134:	2900      	cmp	r1, #0
    9136:	d0f8      	beq.n	912a <__divsi3+0x1c2>
    9138:	e716      	b.n	8f68 <__divsi3>
    913a:	4770      	bx	lr

0000913c <__aeabi_idiv0>:
    913c:	4770      	bx	lr
    913e:	46c0      	nop			; (mov r8, r8)

00009140 <__aeabi_cdrcmple>:
    9140:	4684      	mov	ip, r0
    9142:	1c10      	adds	r0, r2, #0
    9144:	4662      	mov	r2, ip
    9146:	468c      	mov	ip, r1
    9148:	1c19      	adds	r1, r3, #0
    914a:	4663      	mov	r3, ip
    914c:	e000      	b.n	9150 <__aeabi_cdcmpeq>
    914e:	46c0      	nop			; (mov r8, r8)

00009150 <__aeabi_cdcmpeq>:
    9150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9152:	f001 ff63 	bl	b01c <__ledf2>
    9156:	2800      	cmp	r0, #0
    9158:	d401      	bmi.n	915e <__aeabi_cdcmpeq+0xe>
    915a:	2100      	movs	r1, #0
    915c:	42c8      	cmn	r0, r1
    915e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009160 <__aeabi_dcmpeq>:
    9160:	b510      	push	{r4, lr}
    9162:	f001 febd 	bl	aee0 <__eqdf2>
    9166:	4240      	negs	r0, r0
    9168:	3001      	adds	r0, #1
    916a:	bd10      	pop	{r4, pc}

0000916c <__aeabi_dcmplt>:
    916c:	b510      	push	{r4, lr}
    916e:	f001 ff55 	bl	b01c <__ledf2>
    9172:	2800      	cmp	r0, #0
    9174:	db01      	blt.n	917a <__aeabi_dcmplt+0xe>
    9176:	2000      	movs	r0, #0
    9178:	bd10      	pop	{r4, pc}
    917a:	2001      	movs	r0, #1
    917c:	bd10      	pop	{r4, pc}
    917e:	46c0      	nop			; (mov r8, r8)

00009180 <__aeabi_dcmple>:
    9180:	b510      	push	{r4, lr}
    9182:	f001 ff4b 	bl	b01c <__ledf2>
    9186:	2800      	cmp	r0, #0
    9188:	dd01      	ble.n	918e <__aeabi_dcmple+0xe>
    918a:	2000      	movs	r0, #0
    918c:	bd10      	pop	{r4, pc}
    918e:	2001      	movs	r0, #1
    9190:	bd10      	pop	{r4, pc}
    9192:	46c0      	nop			; (mov r8, r8)

00009194 <__aeabi_dcmpgt>:
    9194:	b510      	push	{r4, lr}
    9196:	f001 fedd 	bl	af54 <__gedf2>
    919a:	2800      	cmp	r0, #0
    919c:	dc01      	bgt.n	91a2 <__aeabi_dcmpgt+0xe>
    919e:	2000      	movs	r0, #0
    91a0:	bd10      	pop	{r4, pc}
    91a2:	2001      	movs	r0, #1
    91a4:	bd10      	pop	{r4, pc}
    91a6:	46c0      	nop			; (mov r8, r8)

000091a8 <__aeabi_dcmpge>:
    91a8:	b510      	push	{r4, lr}
    91aa:	f001 fed3 	bl	af54 <__gedf2>
    91ae:	2800      	cmp	r0, #0
    91b0:	da01      	bge.n	91b6 <__aeabi_dcmpge+0xe>
    91b2:	2000      	movs	r0, #0
    91b4:	bd10      	pop	{r4, pc}
    91b6:	2001      	movs	r0, #1
    91b8:	bd10      	pop	{r4, pc}
    91ba:	46c0      	nop			; (mov r8, r8)

000091bc <__aeabi_cfrcmple>:
    91bc:	4684      	mov	ip, r0
    91be:	1c08      	adds	r0, r1, #0
    91c0:	4661      	mov	r1, ip
    91c2:	e7ff      	b.n	91c4 <__aeabi_cfcmpeq>

000091c4 <__aeabi_cfcmpeq>:
    91c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    91c6:	f000 fc93 	bl	9af0 <__lesf2>
    91ca:	2800      	cmp	r0, #0
    91cc:	d401      	bmi.n	91d2 <__aeabi_cfcmpeq+0xe>
    91ce:	2100      	movs	r1, #0
    91d0:	42c8      	cmn	r0, r1
    91d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000091d4 <__aeabi_fcmpeq>:
    91d4:	b510      	push	{r4, lr}
    91d6:	f000 fc25 	bl	9a24 <__eqsf2>
    91da:	4240      	negs	r0, r0
    91dc:	3001      	adds	r0, #1
    91de:	bd10      	pop	{r4, pc}

000091e0 <__aeabi_fcmplt>:
    91e0:	b510      	push	{r4, lr}
    91e2:	f000 fc85 	bl	9af0 <__lesf2>
    91e6:	2800      	cmp	r0, #0
    91e8:	db01      	blt.n	91ee <__aeabi_fcmplt+0xe>
    91ea:	2000      	movs	r0, #0
    91ec:	bd10      	pop	{r4, pc}
    91ee:	2001      	movs	r0, #1
    91f0:	bd10      	pop	{r4, pc}
    91f2:	46c0      	nop			; (mov r8, r8)

000091f4 <__aeabi_fcmple>:
    91f4:	b510      	push	{r4, lr}
    91f6:	f000 fc7b 	bl	9af0 <__lesf2>
    91fa:	2800      	cmp	r0, #0
    91fc:	dd01      	ble.n	9202 <__aeabi_fcmple+0xe>
    91fe:	2000      	movs	r0, #0
    9200:	bd10      	pop	{r4, pc}
    9202:	2001      	movs	r0, #1
    9204:	bd10      	pop	{r4, pc}
    9206:	46c0      	nop			; (mov r8, r8)

00009208 <__aeabi_fcmpgt>:
    9208:	b510      	push	{r4, lr}
    920a:	f000 fc31 	bl	9a70 <__gesf2>
    920e:	2800      	cmp	r0, #0
    9210:	dc01      	bgt.n	9216 <__aeabi_fcmpgt+0xe>
    9212:	2000      	movs	r0, #0
    9214:	bd10      	pop	{r4, pc}
    9216:	2001      	movs	r0, #1
    9218:	bd10      	pop	{r4, pc}
    921a:	46c0      	nop			; (mov r8, r8)

0000921c <__aeabi_fcmpge>:
    921c:	b510      	push	{r4, lr}
    921e:	f000 fc27 	bl	9a70 <__gesf2>
    9222:	2800      	cmp	r0, #0
    9224:	da01      	bge.n	922a <__aeabi_fcmpge+0xe>
    9226:	2000      	movs	r0, #0
    9228:	bd10      	pop	{r4, pc}
    922a:	2001      	movs	r0, #1
    922c:	bd10      	pop	{r4, pc}
    922e:	46c0      	nop			; (mov r8, r8)

00009230 <__aeabi_uldivmod>:
    9230:	2b00      	cmp	r3, #0
    9232:	d111      	bne.n	9258 <__aeabi_uldivmod+0x28>
    9234:	2a00      	cmp	r2, #0
    9236:	d10f      	bne.n	9258 <__aeabi_uldivmod+0x28>
    9238:	2900      	cmp	r1, #0
    923a:	d100      	bne.n	923e <__aeabi_uldivmod+0xe>
    923c:	2800      	cmp	r0, #0
    923e:	d002      	beq.n	9246 <__aeabi_uldivmod+0x16>
    9240:	2100      	movs	r1, #0
    9242:	43c9      	mvns	r1, r1
    9244:	1c08      	adds	r0, r1, #0
    9246:	b407      	push	{r0, r1, r2}
    9248:	4802      	ldr	r0, [pc, #8]	; (9254 <__aeabi_uldivmod+0x24>)
    924a:	a102      	add	r1, pc, #8	; (adr r1, 9254 <__aeabi_uldivmod+0x24>)
    924c:	1840      	adds	r0, r0, r1
    924e:	9002      	str	r0, [sp, #8]
    9250:	bd03      	pop	{r0, r1, pc}
    9252:	46c0      	nop			; (mov r8, r8)
    9254:	fffffee9 	.word	0xfffffee9
    9258:	b403      	push	{r0, r1}
    925a:	4668      	mov	r0, sp
    925c:	b501      	push	{r0, lr}
    925e:	9802      	ldr	r0, [sp, #8]
    9260:	f000 f846 	bl	92f0 <__udivmoddi4>
    9264:	9b01      	ldr	r3, [sp, #4]
    9266:	469e      	mov	lr, r3
    9268:	b002      	add	sp, #8
    926a:	bc0c      	pop	{r2, r3}
    926c:	4770      	bx	lr
    926e:	46c0      	nop			; (mov r8, r8)

00009270 <__ffssi2>:
    9270:	b510      	push	{r4, lr}
    9272:	2300      	movs	r3, #0
    9274:	2800      	cmp	r0, #0
    9276:	d002      	beq.n	927e <__ffssi2+0xe>
    9278:	f002 fe9c 	bl	bfb4 <__ctzsi2>
    927c:	1c43      	adds	r3, r0, #1
    927e:	0018      	movs	r0, r3
    9280:	bd10      	pop	{r4, pc}
    9282:	46c0      	nop			; (mov r8, r8)

00009284 <__aeabi_f2uiz>:
    9284:	219e      	movs	r1, #158	; 0x9e
    9286:	b510      	push	{r4, lr}
    9288:	05c9      	lsls	r1, r1, #23
    928a:	1c04      	adds	r4, r0, #0
    928c:	f7ff ffc6 	bl	921c <__aeabi_fcmpge>
    9290:	2800      	cmp	r0, #0
    9292:	d103      	bne.n	929c <__aeabi_f2uiz+0x18>
    9294:	1c20      	adds	r0, r4, #0
    9296:	f000 ff29 	bl	a0ec <__aeabi_f2iz>
    929a:	bd10      	pop	{r4, pc}
    929c:	219e      	movs	r1, #158	; 0x9e
    929e:	1c20      	adds	r0, r4, #0
    92a0:	05c9      	lsls	r1, r1, #23
    92a2:	f000 fd87 	bl	9db4 <__aeabi_fsub>
    92a6:	f000 ff21 	bl	a0ec <__aeabi_f2iz>
    92aa:	2380      	movs	r3, #128	; 0x80
    92ac:	061b      	lsls	r3, r3, #24
    92ae:	469c      	mov	ip, r3
    92b0:	4460      	add	r0, ip
    92b2:	e7f2      	b.n	929a <__aeabi_f2uiz+0x16>

000092b4 <__aeabi_d2uiz>:
    92b4:	b570      	push	{r4, r5, r6, lr}
    92b6:	2200      	movs	r2, #0
    92b8:	4b0c      	ldr	r3, [pc, #48]	; (92ec <__aeabi_d2uiz+0x38>)
    92ba:	0004      	movs	r4, r0
    92bc:	000d      	movs	r5, r1
    92be:	f7ff ff73 	bl	91a8 <__aeabi_dcmpge>
    92c2:	2800      	cmp	r0, #0
    92c4:	d104      	bne.n	92d0 <__aeabi_d2uiz+0x1c>
    92c6:	0020      	movs	r0, r4
    92c8:	0029      	movs	r1, r5
    92ca:	f002 fcbf 	bl	bc4c <__aeabi_d2iz>
    92ce:	bd70      	pop	{r4, r5, r6, pc}
    92d0:	4b06      	ldr	r3, [pc, #24]	; (92ec <__aeabi_d2uiz+0x38>)
    92d2:	2200      	movs	r2, #0
    92d4:	0020      	movs	r0, r4
    92d6:	0029      	movs	r1, r5
    92d8:	f002 f982 	bl	b5e0 <__aeabi_dsub>
    92dc:	f002 fcb6 	bl	bc4c <__aeabi_d2iz>
    92e0:	2380      	movs	r3, #128	; 0x80
    92e2:	061b      	lsls	r3, r3, #24
    92e4:	469c      	mov	ip, r3
    92e6:	4460      	add	r0, ip
    92e8:	e7f1      	b.n	92ce <__aeabi_d2uiz+0x1a>
    92ea:	46c0      	nop			; (mov r8, r8)
    92ec:	41e00000 	.word	0x41e00000

000092f0 <__udivmoddi4>:
    92f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    92f2:	4657      	mov	r7, sl
    92f4:	464e      	mov	r6, r9
    92f6:	4645      	mov	r5, r8
    92f8:	46de      	mov	lr, fp
    92fa:	b5e0      	push	{r5, r6, r7, lr}
    92fc:	0004      	movs	r4, r0
    92fe:	b083      	sub	sp, #12
    9300:	000d      	movs	r5, r1
    9302:	4692      	mov	sl, r2
    9304:	4699      	mov	r9, r3
    9306:	428b      	cmp	r3, r1
    9308:	d82f      	bhi.n	936a <__udivmoddi4+0x7a>
    930a:	d02c      	beq.n	9366 <__udivmoddi4+0x76>
    930c:	4649      	mov	r1, r9
    930e:	4650      	mov	r0, sl
    9310:	f002 fe44 	bl	bf9c <__clzdi2>
    9314:	0029      	movs	r1, r5
    9316:	0006      	movs	r6, r0
    9318:	0020      	movs	r0, r4
    931a:	f002 fe3f 	bl	bf9c <__clzdi2>
    931e:	1a33      	subs	r3, r6, r0
    9320:	4698      	mov	r8, r3
    9322:	3b20      	subs	r3, #32
    9324:	469b      	mov	fp, r3
    9326:	d500      	bpl.n	932a <__udivmoddi4+0x3a>
    9328:	e074      	b.n	9414 <__udivmoddi4+0x124>
    932a:	4653      	mov	r3, sl
    932c:	465a      	mov	r2, fp
    932e:	4093      	lsls	r3, r2
    9330:	001f      	movs	r7, r3
    9332:	4653      	mov	r3, sl
    9334:	4642      	mov	r2, r8
    9336:	4093      	lsls	r3, r2
    9338:	001e      	movs	r6, r3
    933a:	42af      	cmp	r7, r5
    933c:	d829      	bhi.n	9392 <__udivmoddi4+0xa2>
    933e:	d026      	beq.n	938e <__udivmoddi4+0x9e>
    9340:	465b      	mov	r3, fp
    9342:	1ba4      	subs	r4, r4, r6
    9344:	41bd      	sbcs	r5, r7
    9346:	2b00      	cmp	r3, #0
    9348:	da00      	bge.n	934c <__udivmoddi4+0x5c>
    934a:	e079      	b.n	9440 <__udivmoddi4+0x150>
    934c:	2200      	movs	r2, #0
    934e:	2300      	movs	r3, #0
    9350:	9200      	str	r2, [sp, #0]
    9352:	9301      	str	r3, [sp, #4]
    9354:	2301      	movs	r3, #1
    9356:	465a      	mov	r2, fp
    9358:	4093      	lsls	r3, r2
    935a:	9301      	str	r3, [sp, #4]
    935c:	2301      	movs	r3, #1
    935e:	4642      	mov	r2, r8
    9360:	4093      	lsls	r3, r2
    9362:	9300      	str	r3, [sp, #0]
    9364:	e019      	b.n	939a <__udivmoddi4+0xaa>
    9366:	4282      	cmp	r2, r0
    9368:	d9d0      	bls.n	930c <__udivmoddi4+0x1c>
    936a:	2200      	movs	r2, #0
    936c:	2300      	movs	r3, #0
    936e:	9200      	str	r2, [sp, #0]
    9370:	9301      	str	r3, [sp, #4]
    9372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9374:	2b00      	cmp	r3, #0
    9376:	d001      	beq.n	937c <__udivmoddi4+0x8c>
    9378:	601c      	str	r4, [r3, #0]
    937a:	605d      	str	r5, [r3, #4]
    937c:	9800      	ldr	r0, [sp, #0]
    937e:	9901      	ldr	r1, [sp, #4]
    9380:	b003      	add	sp, #12
    9382:	bc3c      	pop	{r2, r3, r4, r5}
    9384:	4690      	mov	r8, r2
    9386:	4699      	mov	r9, r3
    9388:	46a2      	mov	sl, r4
    938a:	46ab      	mov	fp, r5
    938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    938e:	42a3      	cmp	r3, r4
    9390:	d9d6      	bls.n	9340 <__udivmoddi4+0x50>
    9392:	2200      	movs	r2, #0
    9394:	2300      	movs	r3, #0
    9396:	9200      	str	r2, [sp, #0]
    9398:	9301      	str	r3, [sp, #4]
    939a:	4643      	mov	r3, r8
    939c:	2b00      	cmp	r3, #0
    939e:	d0e8      	beq.n	9372 <__udivmoddi4+0x82>
    93a0:	07fb      	lsls	r3, r7, #31
    93a2:	0872      	lsrs	r2, r6, #1
    93a4:	431a      	orrs	r2, r3
    93a6:	4646      	mov	r6, r8
    93a8:	087b      	lsrs	r3, r7, #1
    93aa:	e00e      	b.n	93ca <__udivmoddi4+0xda>
    93ac:	42ab      	cmp	r3, r5
    93ae:	d101      	bne.n	93b4 <__udivmoddi4+0xc4>
    93b0:	42a2      	cmp	r2, r4
    93b2:	d80c      	bhi.n	93ce <__udivmoddi4+0xde>
    93b4:	1aa4      	subs	r4, r4, r2
    93b6:	419d      	sbcs	r5, r3
    93b8:	2001      	movs	r0, #1
    93ba:	1924      	adds	r4, r4, r4
    93bc:	416d      	adcs	r5, r5
    93be:	2100      	movs	r1, #0
    93c0:	3e01      	subs	r6, #1
    93c2:	1824      	adds	r4, r4, r0
    93c4:	414d      	adcs	r5, r1
    93c6:	2e00      	cmp	r6, #0
    93c8:	d006      	beq.n	93d8 <__udivmoddi4+0xe8>
    93ca:	42ab      	cmp	r3, r5
    93cc:	d9ee      	bls.n	93ac <__udivmoddi4+0xbc>
    93ce:	3e01      	subs	r6, #1
    93d0:	1924      	adds	r4, r4, r4
    93d2:	416d      	adcs	r5, r5
    93d4:	2e00      	cmp	r6, #0
    93d6:	d1f8      	bne.n	93ca <__udivmoddi4+0xda>
    93d8:	465b      	mov	r3, fp
    93da:	9800      	ldr	r0, [sp, #0]
    93dc:	9901      	ldr	r1, [sp, #4]
    93de:	1900      	adds	r0, r0, r4
    93e0:	4169      	adcs	r1, r5
    93e2:	2b00      	cmp	r3, #0
    93e4:	db22      	blt.n	942c <__udivmoddi4+0x13c>
    93e6:	002b      	movs	r3, r5
    93e8:	465a      	mov	r2, fp
    93ea:	40d3      	lsrs	r3, r2
    93ec:	002a      	movs	r2, r5
    93ee:	4644      	mov	r4, r8
    93f0:	40e2      	lsrs	r2, r4
    93f2:	001c      	movs	r4, r3
    93f4:	465b      	mov	r3, fp
    93f6:	0015      	movs	r5, r2
    93f8:	2b00      	cmp	r3, #0
    93fa:	db2c      	blt.n	9456 <__udivmoddi4+0x166>
    93fc:	0026      	movs	r6, r4
    93fe:	409e      	lsls	r6, r3
    9400:	0033      	movs	r3, r6
    9402:	0026      	movs	r6, r4
    9404:	4647      	mov	r7, r8
    9406:	40be      	lsls	r6, r7
    9408:	0032      	movs	r2, r6
    940a:	1a80      	subs	r0, r0, r2
    940c:	4199      	sbcs	r1, r3
    940e:	9000      	str	r0, [sp, #0]
    9410:	9101      	str	r1, [sp, #4]
    9412:	e7ae      	b.n	9372 <__udivmoddi4+0x82>
    9414:	4642      	mov	r2, r8
    9416:	2320      	movs	r3, #32
    9418:	1a9b      	subs	r3, r3, r2
    941a:	4652      	mov	r2, sl
    941c:	40da      	lsrs	r2, r3
    941e:	4641      	mov	r1, r8
    9420:	0013      	movs	r3, r2
    9422:	464a      	mov	r2, r9
    9424:	408a      	lsls	r2, r1
    9426:	0017      	movs	r7, r2
    9428:	431f      	orrs	r7, r3
    942a:	e782      	b.n	9332 <__udivmoddi4+0x42>
    942c:	4642      	mov	r2, r8
    942e:	2320      	movs	r3, #32
    9430:	1a9b      	subs	r3, r3, r2
    9432:	002a      	movs	r2, r5
    9434:	4646      	mov	r6, r8
    9436:	409a      	lsls	r2, r3
    9438:	0023      	movs	r3, r4
    943a:	40f3      	lsrs	r3, r6
    943c:	4313      	orrs	r3, r2
    943e:	e7d5      	b.n	93ec <__udivmoddi4+0xfc>
    9440:	4642      	mov	r2, r8
    9442:	2320      	movs	r3, #32
    9444:	2100      	movs	r1, #0
    9446:	1a9b      	subs	r3, r3, r2
    9448:	2200      	movs	r2, #0
    944a:	9100      	str	r1, [sp, #0]
    944c:	9201      	str	r2, [sp, #4]
    944e:	2201      	movs	r2, #1
    9450:	40da      	lsrs	r2, r3
    9452:	9201      	str	r2, [sp, #4]
    9454:	e782      	b.n	935c <__udivmoddi4+0x6c>
    9456:	4642      	mov	r2, r8
    9458:	2320      	movs	r3, #32
    945a:	0026      	movs	r6, r4
    945c:	1a9b      	subs	r3, r3, r2
    945e:	40de      	lsrs	r6, r3
    9460:	002f      	movs	r7, r5
    9462:	46b4      	mov	ip, r6
    9464:	4097      	lsls	r7, r2
    9466:	4666      	mov	r6, ip
    9468:	003b      	movs	r3, r7
    946a:	4333      	orrs	r3, r6
    946c:	e7c9      	b.n	9402 <__udivmoddi4+0x112>
    946e:	46c0      	nop			; (mov r8, r8)

00009470 <__aeabi_fadd>:
    9470:	b5f0      	push	{r4, r5, r6, r7, lr}
    9472:	46c6      	mov	lr, r8
    9474:	024e      	lsls	r6, r1, #9
    9476:	0247      	lsls	r7, r0, #9
    9478:	0a76      	lsrs	r6, r6, #9
    947a:	0a7b      	lsrs	r3, r7, #9
    947c:	0044      	lsls	r4, r0, #1
    947e:	0fc5      	lsrs	r5, r0, #31
    9480:	00f7      	lsls	r7, r6, #3
    9482:	0048      	lsls	r0, r1, #1
    9484:	4698      	mov	r8, r3
    9486:	b500      	push	{lr}
    9488:	0e24      	lsrs	r4, r4, #24
    948a:	002a      	movs	r2, r5
    948c:	00db      	lsls	r3, r3, #3
    948e:	0e00      	lsrs	r0, r0, #24
    9490:	0fc9      	lsrs	r1, r1, #31
    9492:	46bc      	mov	ip, r7
    9494:	428d      	cmp	r5, r1
    9496:	d067      	beq.n	9568 <__aeabi_fadd+0xf8>
    9498:	1a22      	subs	r2, r4, r0
    949a:	2a00      	cmp	r2, #0
    949c:	dc00      	bgt.n	94a0 <__aeabi_fadd+0x30>
    949e:	e0a5      	b.n	95ec <__aeabi_fadd+0x17c>
    94a0:	2800      	cmp	r0, #0
    94a2:	d13a      	bne.n	951a <__aeabi_fadd+0xaa>
    94a4:	2f00      	cmp	r7, #0
    94a6:	d100      	bne.n	94aa <__aeabi_fadd+0x3a>
    94a8:	e093      	b.n	95d2 <__aeabi_fadd+0x162>
    94aa:	1e51      	subs	r1, r2, #1
    94ac:	2900      	cmp	r1, #0
    94ae:	d000      	beq.n	94b2 <__aeabi_fadd+0x42>
    94b0:	e0bc      	b.n	962c <__aeabi_fadd+0x1bc>
    94b2:	2401      	movs	r4, #1
    94b4:	1bdb      	subs	r3, r3, r7
    94b6:	015a      	lsls	r2, r3, #5
    94b8:	d546      	bpl.n	9548 <__aeabi_fadd+0xd8>
    94ba:	019b      	lsls	r3, r3, #6
    94bc:	099e      	lsrs	r6, r3, #6
    94be:	0030      	movs	r0, r6
    94c0:	f002 fd4e 	bl	bf60 <__clzsi2>
    94c4:	3805      	subs	r0, #5
    94c6:	4086      	lsls	r6, r0
    94c8:	4284      	cmp	r4, r0
    94ca:	dd00      	ble.n	94ce <__aeabi_fadd+0x5e>
    94cc:	e09d      	b.n	960a <__aeabi_fadd+0x19a>
    94ce:	1b04      	subs	r4, r0, r4
    94d0:	0032      	movs	r2, r6
    94d2:	2020      	movs	r0, #32
    94d4:	3401      	adds	r4, #1
    94d6:	40e2      	lsrs	r2, r4
    94d8:	1b04      	subs	r4, r0, r4
    94da:	40a6      	lsls	r6, r4
    94dc:	0033      	movs	r3, r6
    94de:	1e5e      	subs	r6, r3, #1
    94e0:	41b3      	sbcs	r3, r6
    94e2:	2400      	movs	r4, #0
    94e4:	4313      	orrs	r3, r2
    94e6:	075a      	lsls	r2, r3, #29
    94e8:	d004      	beq.n	94f4 <__aeabi_fadd+0x84>
    94ea:	220f      	movs	r2, #15
    94ec:	401a      	ands	r2, r3
    94ee:	2a04      	cmp	r2, #4
    94f0:	d000      	beq.n	94f4 <__aeabi_fadd+0x84>
    94f2:	3304      	adds	r3, #4
    94f4:	015a      	lsls	r2, r3, #5
    94f6:	d529      	bpl.n	954c <__aeabi_fadd+0xdc>
    94f8:	3401      	adds	r4, #1
    94fa:	2cff      	cmp	r4, #255	; 0xff
    94fc:	d100      	bne.n	9500 <__aeabi_fadd+0x90>
    94fe:	e081      	b.n	9604 <__aeabi_fadd+0x194>
    9500:	002a      	movs	r2, r5
    9502:	019b      	lsls	r3, r3, #6
    9504:	0a5b      	lsrs	r3, r3, #9
    9506:	b2e4      	uxtb	r4, r4
    9508:	025b      	lsls	r3, r3, #9
    950a:	05e4      	lsls	r4, r4, #23
    950c:	0a58      	lsrs	r0, r3, #9
    950e:	07d2      	lsls	r2, r2, #31
    9510:	4320      	orrs	r0, r4
    9512:	4310      	orrs	r0, r2
    9514:	bc04      	pop	{r2}
    9516:	4690      	mov	r8, r2
    9518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    951a:	2cff      	cmp	r4, #255	; 0xff
    951c:	d0e3      	beq.n	94e6 <__aeabi_fadd+0x76>
    951e:	2180      	movs	r1, #128	; 0x80
    9520:	0038      	movs	r0, r7
    9522:	04c9      	lsls	r1, r1, #19
    9524:	4308      	orrs	r0, r1
    9526:	4684      	mov	ip, r0
    9528:	2a1b      	cmp	r2, #27
    952a:	dd00      	ble.n	952e <__aeabi_fadd+0xbe>
    952c:	e082      	b.n	9634 <__aeabi_fadd+0x1c4>
    952e:	2020      	movs	r0, #32
    9530:	4661      	mov	r1, ip
    9532:	40d1      	lsrs	r1, r2
    9534:	1a82      	subs	r2, r0, r2
    9536:	4660      	mov	r0, ip
    9538:	4090      	lsls	r0, r2
    953a:	0002      	movs	r2, r0
    953c:	1e50      	subs	r0, r2, #1
    953e:	4182      	sbcs	r2, r0
    9540:	430a      	orrs	r2, r1
    9542:	1a9b      	subs	r3, r3, r2
    9544:	015a      	lsls	r2, r3, #5
    9546:	d4b8      	bmi.n	94ba <__aeabi_fadd+0x4a>
    9548:	075a      	lsls	r2, r3, #29
    954a:	d1ce      	bne.n	94ea <__aeabi_fadd+0x7a>
    954c:	08de      	lsrs	r6, r3, #3
    954e:	002a      	movs	r2, r5
    9550:	2cff      	cmp	r4, #255	; 0xff
    9552:	d13a      	bne.n	95ca <__aeabi_fadd+0x15a>
    9554:	2e00      	cmp	r6, #0
    9556:	d100      	bne.n	955a <__aeabi_fadd+0xea>
    9558:	e0ae      	b.n	96b8 <__aeabi_fadd+0x248>
    955a:	2380      	movs	r3, #128	; 0x80
    955c:	03db      	lsls	r3, r3, #15
    955e:	4333      	orrs	r3, r6
    9560:	025b      	lsls	r3, r3, #9
    9562:	0a5b      	lsrs	r3, r3, #9
    9564:	24ff      	movs	r4, #255	; 0xff
    9566:	e7cf      	b.n	9508 <__aeabi_fadd+0x98>
    9568:	1a21      	subs	r1, r4, r0
    956a:	2900      	cmp	r1, #0
    956c:	dd52      	ble.n	9614 <__aeabi_fadd+0x1a4>
    956e:	2800      	cmp	r0, #0
    9570:	d031      	beq.n	95d6 <__aeabi_fadd+0x166>
    9572:	2cff      	cmp	r4, #255	; 0xff
    9574:	d0b7      	beq.n	94e6 <__aeabi_fadd+0x76>
    9576:	2080      	movs	r0, #128	; 0x80
    9578:	003e      	movs	r6, r7
    957a:	04c0      	lsls	r0, r0, #19
    957c:	4306      	orrs	r6, r0
    957e:	46b4      	mov	ip, r6
    9580:	291b      	cmp	r1, #27
    9582:	dd00      	ble.n	9586 <__aeabi_fadd+0x116>
    9584:	e0aa      	b.n	96dc <__aeabi_fadd+0x26c>
    9586:	2620      	movs	r6, #32
    9588:	4660      	mov	r0, ip
    958a:	40c8      	lsrs	r0, r1
    958c:	1a71      	subs	r1, r6, r1
    958e:	4666      	mov	r6, ip
    9590:	408e      	lsls	r6, r1
    9592:	0031      	movs	r1, r6
    9594:	1e4e      	subs	r6, r1, #1
    9596:	41b1      	sbcs	r1, r6
    9598:	4301      	orrs	r1, r0
    959a:	185b      	adds	r3, r3, r1
    959c:	0159      	lsls	r1, r3, #5
    959e:	d5d3      	bpl.n	9548 <__aeabi_fadd+0xd8>
    95a0:	3401      	adds	r4, #1
    95a2:	2cff      	cmp	r4, #255	; 0xff
    95a4:	d100      	bne.n	95a8 <__aeabi_fadd+0x138>
    95a6:	e087      	b.n	96b8 <__aeabi_fadd+0x248>
    95a8:	2201      	movs	r2, #1
    95aa:	4978      	ldr	r1, [pc, #480]	; (978c <__aeabi_fadd+0x31c>)
    95ac:	401a      	ands	r2, r3
    95ae:	085b      	lsrs	r3, r3, #1
    95b0:	400b      	ands	r3, r1
    95b2:	4313      	orrs	r3, r2
    95b4:	e797      	b.n	94e6 <__aeabi_fadd+0x76>
    95b6:	2c00      	cmp	r4, #0
    95b8:	d000      	beq.n	95bc <__aeabi_fadd+0x14c>
    95ba:	e0a7      	b.n	970c <__aeabi_fadd+0x29c>
    95bc:	2b00      	cmp	r3, #0
    95be:	d000      	beq.n	95c2 <__aeabi_fadd+0x152>
    95c0:	e0b6      	b.n	9730 <__aeabi_fadd+0x2c0>
    95c2:	1e3b      	subs	r3, r7, #0
    95c4:	d162      	bne.n	968c <__aeabi_fadd+0x21c>
    95c6:	2600      	movs	r6, #0
    95c8:	2200      	movs	r2, #0
    95ca:	0273      	lsls	r3, r6, #9
    95cc:	0a5b      	lsrs	r3, r3, #9
    95ce:	b2e4      	uxtb	r4, r4
    95d0:	e79a      	b.n	9508 <__aeabi_fadd+0x98>
    95d2:	0014      	movs	r4, r2
    95d4:	e787      	b.n	94e6 <__aeabi_fadd+0x76>
    95d6:	2f00      	cmp	r7, #0
    95d8:	d04d      	beq.n	9676 <__aeabi_fadd+0x206>
    95da:	1e48      	subs	r0, r1, #1
    95dc:	2800      	cmp	r0, #0
    95de:	d157      	bne.n	9690 <__aeabi_fadd+0x220>
    95e0:	4463      	add	r3, ip
    95e2:	2401      	movs	r4, #1
    95e4:	015a      	lsls	r2, r3, #5
    95e6:	d5af      	bpl.n	9548 <__aeabi_fadd+0xd8>
    95e8:	2402      	movs	r4, #2
    95ea:	e7dd      	b.n	95a8 <__aeabi_fadd+0x138>
    95ec:	2a00      	cmp	r2, #0
    95ee:	d124      	bne.n	963a <__aeabi_fadd+0x1ca>
    95f0:	1c62      	adds	r2, r4, #1
    95f2:	b2d2      	uxtb	r2, r2
    95f4:	2a01      	cmp	r2, #1
    95f6:	ddde      	ble.n	95b6 <__aeabi_fadd+0x146>
    95f8:	1bde      	subs	r6, r3, r7
    95fa:	0172      	lsls	r2, r6, #5
    95fc:	d535      	bpl.n	966a <__aeabi_fadd+0x1fa>
    95fe:	1afe      	subs	r6, r7, r3
    9600:	000d      	movs	r5, r1
    9602:	e75c      	b.n	94be <__aeabi_fadd+0x4e>
    9604:	002a      	movs	r2, r5
    9606:	2300      	movs	r3, #0
    9608:	e77e      	b.n	9508 <__aeabi_fadd+0x98>
    960a:	0033      	movs	r3, r6
    960c:	4a60      	ldr	r2, [pc, #384]	; (9790 <__aeabi_fadd+0x320>)
    960e:	1a24      	subs	r4, r4, r0
    9610:	4013      	ands	r3, r2
    9612:	e768      	b.n	94e6 <__aeabi_fadd+0x76>
    9614:	2900      	cmp	r1, #0
    9616:	d163      	bne.n	96e0 <__aeabi_fadd+0x270>
    9618:	1c61      	adds	r1, r4, #1
    961a:	b2c8      	uxtb	r0, r1
    961c:	2801      	cmp	r0, #1
    961e:	dd4e      	ble.n	96be <__aeabi_fadd+0x24e>
    9620:	29ff      	cmp	r1, #255	; 0xff
    9622:	d049      	beq.n	96b8 <__aeabi_fadd+0x248>
    9624:	4463      	add	r3, ip
    9626:	085b      	lsrs	r3, r3, #1
    9628:	000c      	movs	r4, r1
    962a:	e75c      	b.n	94e6 <__aeabi_fadd+0x76>
    962c:	2aff      	cmp	r2, #255	; 0xff
    962e:	d041      	beq.n	96b4 <__aeabi_fadd+0x244>
    9630:	000a      	movs	r2, r1
    9632:	e779      	b.n	9528 <__aeabi_fadd+0xb8>
    9634:	2201      	movs	r2, #1
    9636:	1a9b      	subs	r3, r3, r2
    9638:	e784      	b.n	9544 <__aeabi_fadd+0xd4>
    963a:	2c00      	cmp	r4, #0
    963c:	d01d      	beq.n	967a <__aeabi_fadd+0x20a>
    963e:	28ff      	cmp	r0, #255	; 0xff
    9640:	d022      	beq.n	9688 <__aeabi_fadd+0x218>
    9642:	2480      	movs	r4, #128	; 0x80
    9644:	04e4      	lsls	r4, r4, #19
    9646:	4252      	negs	r2, r2
    9648:	4323      	orrs	r3, r4
    964a:	2a1b      	cmp	r2, #27
    964c:	dd00      	ble.n	9650 <__aeabi_fadd+0x1e0>
    964e:	e08a      	b.n	9766 <__aeabi_fadd+0x2f6>
    9650:	001c      	movs	r4, r3
    9652:	2520      	movs	r5, #32
    9654:	40d4      	lsrs	r4, r2
    9656:	1aaa      	subs	r2, r5, r2
    9658:	4093      	lsls	r3, r2
    965a:	1e5a      	subs	r2, r3, #1
    965c:	4193      	sbcs	r3, r2
    965e:	4323      	orrs	r3, r4
    9660:	4662      	mov	r2, ip
    9662:	0004      	movs	r4, r0
    9664:	1ad3      	subs	r3, r2, r3
    9666:	000d      	movs	r5, r1
    9668:	e725      	b.n	94b6 <__aeabi_fadd+0x46>
    966a:	2e00      	cmp	r6, #0
    966c:	d000      	beq.n	9670 <__aeabi_fadd+0x200>
    966e:	e726      	b.n	94be <__aeabi_fadd+0x4e>
    9670:	2200      	movs	r2, #0
    9672:	2400      	movs	r4, #0
    9674:	e7a9      	b.n	95ca <__aeabi_fadd+0x15a>
    9676:	000c      	movs	r4, r1
    9678:	e735      	b.n	94e6 <__aeabi_fadd+0x76>
    967a:	2b00      	cmp	r3, #0
    967c:	d04d      	beq.n	971a <__aeabi_fadd+0x2aa>
    967e:	43d2      	mvns	r2, r2
    9680:	2a00      	cmp	r2, #0
    9682:	d0ed      	beq.n	9660 <__aeabi_fadd+0x1f0>
    9684:	28ff      	cmp	r0, #255	; 0xff
    9686:	d1e0      	bne.n	964a <__aeabi_fadd+0x1da>
    9688:	4663      	mov	r3, ip
    968a:	24ff      	movs	r4, #255	; 0xff
    968c:	000d      	movs	r5, r1
    968e:	e72a      	b.n	94e6 <__aeabi_fadd+0x76>
    9690:	29ff      	cmp	r1, #255	; 0xff
    9692:	d00f      	beq.n	96b4 <__aeabi_fadd+0x244>
    9694:	0001      	movs	r1, r0
    9696:	e773      	b.n	9580 <__aeabi_fadd+0x110>
    9698:	2b00      	cmp	r3, #0
    969a:	d061      	beq.n	9760 <__aeabi_fadd+0x2f0>
    969c:	24ff      	movs	r4, #255	; 0xff
    969e:	2f00      	cmp	r7, #0
    96a0:	d100      	bne.n	96a4 <__aeabi_fadd+0x234>
    96a2:	e720      	b.n	94e6 <__aeabi_fadd+0x76>
    96a4:	2280      	movs	r2, #128	; 0x80
    96a6:	4641      	mov	r1, r8
    96a8:	03d2      	lsls	r2, r2, #15
    96aa:	4211      	tst	r1, r2
    96ac:	d002      	beq.n	96b4 <__aeabi_fadd+0x244>
    96ae:	4216      	tst	r6, r2
    96b0:	d100      	bne.n	96b4 <__aeabi_fadd+0x244>
    96b2:	003b      	movs	r3, r7
    96b4:	24ff      	movs	r4, #255	; 0xff
    96b6:	e716      	b.n	94e6 <__aeabi_fadd+0x76>
    96b8:	24ff      	movs	r4, #255	; 0xff
    96ba:	2300      	movs	r3, #0
    96bc:	e724      	b.n	9508 <__aeabi_fadd+0x98>
    96be:	2c00      	cmp	r4, #0
    96c0:	d1ea      	bne.n	9698 <__aeabi_fadd+0x228>
    96c2:	2b00      	cmp	r3, #0
    96c4:	d058      	beq.n	9778 <__aeabi_fadd+0x308>
    96c6:	2f00      	cmp	r7, #0
    96c8:	d100      	bne.n	96cc <__aeabi_fadd+0x25c>
    96ca:	e70c      	b.n	94e6 <__aeabi_fadd+0x76>
    96cc:	4463      	add	r3, ip
    96ce:	015a      	lsls	r2, r3, #5
    96d0:	d400      	bmi.n	96d4 <__aeabi_fadd+0x264>
    96d2:	e739      	b.n	9548 <__aeabi_fadd+0xd8>
    96d4:	4a2e      	ldr	r2, [pc, #184]	; (9790 <__aeabi_fadd+0x320>)
    96d6:	000c      	movs	r4, r1
    96d8:	4013      	ands	r3, r2
    96da:	e704      	b.n	94e6 <__aeabi_fadd+0x76>
    96dc:	2101      	movs	r1, #1
    96de:	e75c      	b.n	959a <__aeabi_fadd+0x12a>
    96e0:	2c00      	cmp	r4, #0
    96e2:	d11e      	bne.n	9722 <__aeabi_fadd+0x2b2>
    96e4:	2b00      	cmp	r3, #0
    96e6:	d040      	beq.n	976a <__aeabi_fadd+0x2fa>
    96e8:	43c9      	mvns	r1, r1
    96ea:	2900      	cmp	r1, #0
    96ec:	d00b      	beq.n	9706 <__aeabi_fadd+0x296>
    96ee:	28ff      	cmp	r0, #255	; 0xff
    96f0:	d036      	beq.n	9760 <__aeabi_fadd+0x2f0>
    96f2:	291b      	cmp	r1, #27
    96f4:	dc47      	bgt.n	9786 <__aeabi_fadd+0x316>
    96f6:	001c      	movs	r4, r3
    96f8:	2620      	movs	r6, #32
    96fa:	40cc      	lsrs	r4, r1
    96fc:	1a71      	subs	r1, r6, r1
    96fe:	408b      	lsls	r3, r1
    9700:	1e59      	subs	r1, r3, #1
    9702:	418b      	sbcs	r3, r1
    9704:	4323      	orrs	r3, r4
    9706:	4463      	add	r3, ip
    9708:	0004      	movs	r4, r0
    970a:	e747      	b.n	959c <__aeabi_fadd+0x12c>
    970c:	2b00      	cmp	r3, #0
    970e:	d118      	bne.n	9742 <__aeabi_fadd+0x2d2>
    9710:	1e3b      	subs	r3, r7, #0
    9712:	d02d      	beq.n	9770 <__aeabi_fadd+0x300>
    9714:	000d      	movs	r5, r1
    9716:	24ff      	movs	r4, #255	; 0xff
    9718:	e6e5      	b.n	94e6 <__aeabi_fadd+0x76>
    971a:	003b      	movs	r3, r7
    971c:	0004      	movs	r4, r0
    971e:	000d      	movs	r5, r1
    9720:	e6e1      	b.n	94e6 <__aeabi_fadd+0x76>
    9722:	28ff      	cmp	r0, #255	; 0xff
    9724:	d01c      	beq.n	9760 <__aeabi_fadd+0x2f0>
    9726:	2480      	movs	r4, #128	; 0x80
    9728:	04e4      	lsls	r4, r4, #19
    972a:	4249      	negs	r1, r1
    972c:	4323      	orrs	r3, r4
    972e:	e7e0      	b.n	96f2 <__aeabi_fadd+0x282>
    9730:	2f00      	cmp	r7, #0
    9732:	d100      	bne.n	9736 <__aeabi_fadd+0x2c6>
    9734:	e6d7      	b.n	94e6 <__aeabi_fadd+0x76>
    9736:	1bde      	subs	r6, r3, r7
    9738:	0172      	lsls	r2, r6, #5
    973a:	d51f      	bpl.n	977c <__aeabi_fadd+0x30c>
    973c:	1afb      	subs	r3, r7, r3
    973e:	000d      	movs	r5, r1
    9740:	e6d1      	b.n	94e6 <__aeabi_fadd+0x76>
    9742:	24ff      	movs	r4, #255	; 0xff
    9744:	2f00      	cmp	r7, #0
    9746:	d100      	bne.n	974a <__aeabi_fadd+0x2da>
    9748:	e6cd      	b.n	94e6 <__aeabi_fadd+0x76>
    974a:	2280      	movs	r2, #128	; 0x80
    974c:	4640      	mov	r0, r8
    974e:	03d2      	lsls	r2, r2, #15
    9750:	4210      	tst	r0, r2
    9752:	d0af      	beq.n	96b4 <__aeabi_fadd+0x244>
    9754:	4216      	tst	r6, r2
    9756:	d1ad      	bne.n	96b4 <__aeabi_fadd+0x244>
    9758:	003b      	movs	r3, r7
    975a:	000d      	movs	r5, r1
    975c:	24ff      	movs	r4, #255	; 0xff
    975e:	e6c2      	b.n	94e6 <__aeabi_fadd+0x76>
    9760:	4663      	mov	r3, ip
    9762:	24ff      	movs	r4, #255	; 0xff
    9764:	e6bf      	b.n	94e6 <__aeabi_fadd+0x76>
    9766:	2301      	movs	r3, #1
    9768:	e77a      	b.n	9660 <__aeabi_fadd+0x1f0>
    976a:	003b      	movs	r3, r7
    976c:	0004      	movs	r4, r0
    976e:	e6ba      	b.n	94e6 <__aeabi_fadd+0x76>
    9770:	2680      	movs	r6, #128	; 0x80
    9772:	2200      	movs	r2, #0
    9774:	03f6      	lsls	r6, r6, #15
    9776:	e6f0      	b.n	955a <__aeabi_fadd+0xea>
    9778:	003b      	movs	r3, r7
    977a:	e6b4      	b.n	94e6 <__aeabi_fadd+0x76>
    977c:	1e33      	subs	r3, r6, #0
    977e:	d000      	beq.n	9782 <__aeabi_fadd+0x312>
    9780:	e6e2      	b.n	9548 <__aeabi_fadd+0xd8>
    9782:	2200      	movs	r2, #0
    9784:	e721      	b.n	95ca <__aeabi_fadd+0x15a>
    9786:	2301      	movs	r3, #1
    9788:	e7bd      	b.n	9706 <__aeabi_fadd+0x296>
    978a:	46c0      	nop			; (mov r8, r8)
    978c:	7dffffff 	.word	0x7dffffff
    9790:	fbffffff 	.word	0xfbffffff

00009794 <__aeabi_fdiv>:
    9794:	b5f0      	push	{r4, r5, r6, r7, lr}
    9796:	4657      	mov	r7, sl
    9798:	464e      	mov	r6, r9
    979a:	46de      	mov	lr, fp
    979c:	4645      	mov	r5, r8
    979e:	b5e0      	push	{r5, r6, r7, lr}
    97a0:	0244      	lsls	r4, r0, #9
    97a2:	0043      	lsls	r3, r0, #1
    97a4:	0fc6      	lsrs	r6, r0, #31
    97a6:	b083      	sub	sp, #12
    97a8:	1c0f      	adds	r7, r1, #0
    97aa:	0a64      	lsrs	r4, r4, #9
    97ac:	0e1b      	lsrs	r3, r3, #24
    97ae:	46b2      	mov	sl, r6
    97b0:	d053      	beq.n	985a <__aeabi_fdiv+0xc6>
    97b2:	2bff      	cmp	r3, #255	; 0xff
    97b4:	d027      	beq.n	9806 <__aeabi_fdiv+0x72>
    97b6:	2280      	movs	r2, #128	; 0x80
    97b8:	00e4      	lsls	r4, r4, #3
    97ba:	04d2      	lsls	r2, r2, #19
    97bc:	4314      	orrs	r4, r2
    97be:	227f      	movs	r2, #127	; 0x7f
    97c0:	4252      	negs	r2, r2
    97c2:	4690      	mov	r8, r2
    97c4:	4498      	add	r8, r3
    97c6:	2300      	movs	r3, #0
    97c8:	4699      	mov	r9, r3
    97ca:	469b      	mov	fp, r3
    97cc:	027d      	lsls	r5, r7, #9
    97ce:	0078      	lsls	r0, r7, #1
    97d0:	0ffb      	lsrs	r3, r7, #31
    97d2:	0a6d      	lsrs	r5, r5, #9
    97d4:	0e00      	lsrs	r0, r0, #24
    97d6:	9300      	str	r3, [sp, #0]
    97d8:	d024      	beq.n	9824 <__aeabi_fdiv+0x90>
    97da:	28ff      	cmp	r0, #255	; 0xff
    97dc:	d046      	beq.n	986c <__aeabi_fdiv+0xd8>
    97de:	2380      	movs	r3, #128	; 0x80
    97e0:	2100      	movs	r1, #0
    97e2:	00ed      	lsls	r5, r5, #3
    97e4:	04db      	lsls	r3, r3, #19
    97e6:	431d      	orrs	r5, r3
    97e8:	387f      	subs	r0, #127	; 0x7f
    97ea:	4647      	mov	r7, r8
    97ec:	1a38      	subs	r0, r7, r0
    97ee:	464f      	mov	r7, r9
    97f0:	430f      	orrs	r7, r1
    97f2:	00bf      	lsls	r7, r7, #2
    97f4:	46b9      	mov	r9, r7
    97f6:	0033      	movs	r3, r6
    97f8:	9a00      	ldr	r2, [sp, #0]
    97fa:	4f87      	ldr	r7, [pc, #540]	; (9a18 <__aeabi_fdiv+0x284>)
    97fc:	4053      	eors	r3, r2
    97fe:	464a      	mov	r2, r9
    9800:	58ba      	ldr	r2, [r7, r2]
    9802:	9301      	str	r3, [sp, #4]
    9804:	4697      	mov	pc, r2
    9806:	2c00      	cmp	r4, #0
    9808:	d14e      	bne.n	98a8 <__aeabi_fdiv+0x114>
    980a:	2308      	movs	r3, #8
    980c:	4699      	mov	r9, r3
    980e:	33f7      	adds	r3, #247	; 0xf7
    9810:	4698      	mov	r8, r3
    9812:	3bfd      	subs	r3, #253	; 0xfd
    9814:	469b      	mov	fp, r3
    9816:	027d      	lsls	r5, r7, #9
    9818:	0078      	lsls	r0, r7, #1
    981a:	0ffb      	lsrs	r3, r7, #31
    981c:	0a6d      	lsrs	r5, r5, #9
    981e:	0e00      	lsrs	r0, r0, #24
    9820:	9300      	str	r3, [sp, #0]
    9822:	d1da      	bne.n	97da <__aeabi_fdiv+0x46>
    9824:	2d00      	cmp	r5, #0
    9826:	d126      	bne.n	9876 <__aeabi_fdiv+0xe2>
    9828:	2000      	movs	r0, #0
    982a:	2101      	movs	r1, #1
    982c:	0033      	movs	r3, r6
    982e:	9a00      	ldr	r2, [sp, #0]
    9830:	4f7a      	ldr	r7, [pc, #488]	; (9a1c <__aeabi_fdiv+0x288>)
    9832:	4053      	eors	r3, r2
    9834:	4642      	mov	r2, r8
    9836:	1a10      	subs	r0, r2, r0
    9838:	464a      	mov	r2, r9
    983a:	430a      	orrs	r2, r1
    983c:	0092      	lsls	r2, r2, #2
    983e:	58ba      	ldr	r2, [r7, r2]
    9840:	001d      	movs	r5, r3
    9842:	4697      	mov	pc, r2
    9844:	9b00      	ldr	r3, [sp, #0]
    9846:	002c      	movs	r4, r5
    9848:	469a      	mov	sl, r3
    984a:	468b      	mov	fp, r1
    984c:	465b      	mov	r3, fp
    984e:	2b02      	cmp	r3, #2
    9850:	d131      	bne.n	98b6 <__aeabi_fdiv+0x122>
    9852:	4653      	mov	r3, sl
    9854:	21ff      	movs	r1, #255	; 0xff
    9856:	2400      	movs	r4, #0
    9858:	e038      	b.n	98cc <__aeabi_fdiv+0x138>
    985a:	2c00      	cmp	r4, #0
    985c:	d117      	bne.n	988e <__aeabi_fdiv+0xfa>
    985e:	2304      	movs	r3, #4
    9860:	4699      	mov	r9, r3
    9862:	2300      	movs	r3, #0
    9864:	4698      	mov	r8, r3
    9866:	3301      	adds	r3, #1
    9868:	469b      	mov	fp, r3
    986a:	e7af      	b.n	97cc <__aeabi_fdiv+0x38>
    986c:	20ff      	movs	r0, #255	; 0xff
    986e:	2d00      	cmp	r5, #0
    9870:	d10b      	bne.n	988a <__aeabi_fdiv+0xf6>
    9872:	2102      	movs	r1, #2
    9874:	e7da      	b.n	982c <__aeabi_fdiv+0x98>
    9876:	0028      	movs	r0, r5
    9878:	f002 fb72 	bl	bf60 <__clzsi2>
    987c:	1f43      	subs	r3, r0, #5
    987e:	409d      	lsls	r5, r3
    9880:	2376      	movs	r3, #118	; 0x76
    9882:	425b      	negs	r3, r3
    9884:	1a18      	subs	r0, r3, r0
    9886:	2100      	movs	r1, #0
    9888:	e7af      	b.n	97ea <__aeabi_fdiv+0x56>
    988a:	2103      	movs	r1, #3
    988c:	e7ad      	b.n	97ea <__aeabi_fdiv+0x56>
    988e:	0020      	movs	r0, r4
    9890:	f002 fb66 	bl	bf60 <__clzsi2>
    9894:	1f43      	subs	r3, r0, #5
    9896:	409c      	lsls	r4, r3
    9898:	2376      	movs	r3, #118	; 0x76
    989a:	425b      	negs	r3, r3
    989c:	1a1b      	subs	r3, r3, r0
    989e:	4698      	mov	r8, r3
    98a0:	2300      	movs	r3, #0
    98a2:	4699      	mov	r9, r3
    98a4:	469b      	mov	fp, r3
    98a6:	e791      	b.n	97cc <__aeabi_fdiv+0x38>
    98a8:	230c      	movs	r3, #12
    98aa:	4699      	mov	r9, r3
    98ac:	33f3      	adds	r3, #243	; 0xf3
    98ae:	4698      	mov	r8, r3
    98b0:	3bfc      	subs	r3, #252	; 0xfc
    98b2:	469b      	mov	fp, r3
    98b4:	e78a      	b.n	97cc <__aeabi_fdiv+0x38>
    98b6:	2b03      	cmp	r3, #3
    98b8:	d100      	bne.n	98bc <__aeabi_fdiv+0x128>
    98ba:	e0a5      	b.n	9a08 <__aeabi_fdiv+0x274>
    98bc:	4655      	mov	r5, sl
    98be:	2b01      	cmp	r3, #1
    98c0:	d000      	beq.n	98c4 <__aeabi_fdiv+0x130>
    98c2:	e081      	b.n	99c8 <__aeabi_fdiv+0x234>
    98c4:	2301      	movs	r3, #1
    98c6:	2100      	movs	r1, #0
    98c8:	2400      	movs	r4, #0
    98ca:	402b      	ands	r3, r5
    98cc:	0264      	lsls	r4, r4, #9
    98ce:	05c9      	lsls	r1, r1, #23
    98d0:	0a60      	lsrs	r0, r4, #9
    98d2:	07db      	lsls	r3, r3, #31
    98d4:	4308      	orrs	r0, r1
    98d6:	4318      	orrs	r0, r3
    98d8:	b003      	add	sp, #12
    98da:	bc3c      	pop	{r2, r3, r4, r5}
    98dc:	4690      	mov	r8, r2
    98de:	4699      	mov	r9, r3
    98e0:	46a2      	mov	sl, r4
    98e2:	46ab      	mov	fp, r5
    98e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98e6:	2480      	movs	r4, #128	; 0x80
    98e8:	2300      	movs	r3, #0
    98ea:	03e4      	lsls	r4, r4, #15
    98ec:	21ff      	movs	r1, #255	; 0xff
    98ee:	e7ed      	b.n	98cc <__aeabi_fdiv+0x138>
    98f0:	21ff      	movs	r1, #255	; 0xff
    98f2:	2400      	movs	r4, #0
    98f4:	e7ea      	b.n	98cc <__aeabi_fdiv+0x138>
    98f6:	2301      	movs	r3, #1
    98f8:	1a59      	subs	r1, r3, r1
    98fa:	291b      	cmp	r1, #27
    98fc:	dd66      	ble.n	99cc <__aeabi_fdiv+0x238>
    98fe:	9a01      	ldr	r2, [sp, #4]
    9900:	4013      	ands	r3, r2
    9902:	2100      	movs	r1, #0
    9904:	2400      	movs	r4, #0
    9906:	e7e1      	b.n	98cc <__aeabi_fdiv+0x138>
    9908:	2380      	movs	r3, #128	; 0x80
    990a:	03db      	lsls	r3, r3, #15
    990c:	421c      	tst	r4, r3
    990e:	d038      	beq.n	9982 <__aeabi_fdiv+0x1ee>
    9910:	421d      	tst	r5, r3
    9912:	d051      	beq.n	99b8 <__aeabi_fdiv+0x224>
    9914:	431c      	orrs	r4, r3
    9916:	0264      	lsls	r4, r4, #9
    9918:	0a64      	lsrs	r4, r4, #9
    991a:	0033      	movs	r3, r6
    991c:	21ff      	movs	r1, #255	; 0xff
    991e:	e7d5      	b.n	98cc <__aeabi_fdiv+0x138>
    9920:	0163      	lsls	r3, r4, #5
    9922:	016c      	lsls	r4, r5, #5
    9924:	42a3      	cmp	r3, r4
    9926:	d23b      	bcs.n	99a0 <__aeabi_fdiv+0x20c>
    9928:	261b      	movs	r6, #27
    992a:	2100      	movs	r1, #0
    992c:	3801      	subs	r0, #1
    992e:	2501      	movs	r5, #1
    9930:	001f      	movs	r7, r3
    9932:	0049      	lsls	r1, r1, #1
    9934:	005b      	lsls	r3, r3, #1
    9936:	2f00      	cmp	r7, #0
    9938:	db01      	blt.n	993e <__aeabi_fdiv+0x1aa>
    993a:	429c      	cmp	r4, r3
    993c:	d801      	bhi.n	9942 <__aeabi_fdiv+0x1ae>
    993e:	1b1b      	subs	r3, r3, r4
    9940:	4329      	orrs	r1, r5
    9942:	3e01      	subs	r6, #1
    9944:	2e00      	cmp	r6, #0
    9946:	d1f3      	bne.n	9930 <__aeabi_fdiv+0x19c>
    9948:	001c      	movs	r4, r3
    994a:	1e63      	subs	r3, r4, #1
    994c:	419c      	sbcs	r4, r3
    994e:	430c      	orrs	r4, r1
    9950:	0001      	movs	r1, r0
    9952:	317f      	adds	r1, #127	; 0x7f
    9954:	2900      	cmp	r1, #0
    9956:	ddce      	ble.n	98f6 <__aeabi_fdiv+0x162>
    9958:	0763      	lsls	r3, r4, #29
    995a:	d004      	beq.n	9966 <__aeabi_fdiv+0x1d2>
    995c:	230f      	movs	r3, #15
    995e:	4023      	ands	r3, r4
    9960:	2b04      	cmp	r3, #4
    9962:	d000      	beq.n	9966 <__aeabi_fdiv+0x1d2>
    9964:	3404      	adds	r4, #4
    9966:	0123      	lsls	r3, r4, #4
    9968:	d503      	bpl.n	9972 <__aeabi_fdiv+0x1de>
    996a:	0001      	movs	r1, r0
    996c:	4b2c      	ldr	r3, [pc, #176]	; (9a20 <__aeabi_fdiv+0x28c>)
    996e:	3180      	adds	r1, #128	; 0x80
    9970:	401c      	ands	r4, r3
    9972:	29fe      	cmp	r1, #254	; 0xfe
    9974:	dd0d      	ble.n	9992 <__aeabi_fdiv+0x1fe>
    9976:	2301      	movs	r3, #1
    9978:	9a01      	ldr	r2, [sp, #4]
    997a:	21ff      	movs	r1, #255	; 0xff
    997c:	4013      	ands	r3, r2
    997e:	2400      	movs	r4, #0
    9980:	e7a4      	b.n	98cc <__aeabi_fdiv+0x138>
    9982:	2380      	movs	r3, #128	; 0x80
    9984:	03db      	lsls	r3, r3, #15
    9986:	431c      	orrs	r4, r3
    9988:	0264      	lsls	r4, r4, #9
    998a:	0a64      	lsrs	r4, r4, #9
    998c:	0033      	movs	r3, r6
    998e:	21ff      	movs	r1, #255	; 0xff
    9990:	e79c      	b.n	98cc <__aeabi_fdiv+0x138>
    9992:	2301      	movs	r3, #1
    9994:	9a01      	ldr	r2, [sp, #4]
    9996:	01a4      	lsls	r4, r4, #6
    9998:	0a64      	lsrs	r4, r4, #9
    999a:	b2c9      	uxtb	r1, r1
    999c:	4013      	ands	r3, r2
    999e:	e795      	b.n	98cc <__aeabi_fdiv+0x138>
    99a0:	1b1b      	subs	r3, r3, r4
    99a2:	261a      	movs	r6, #26
    99a4:	2101      	movs	r1, #1
    99a6:	e7c2      	b.n	992e <__aeabi_fdiv+0x19a>
    99a8:	9b00      	ldr	r3, [sp, #0]
    99aa:	468b      	mov	fp, r1
    99ac:	469a      	mov	sl, r3
    99ae:	2400      	movs	r4, #0
    99b0:	e74c      	b.n	984c <__aeabi_fdiv+0xb8>
    99b2:	0263      	lsls	r3, r4, #9
    99b4:	d5e5      	bpl.n	9982 <__aeabi_fdiv+0x1ee>
    99b6:	2500      	movs	r5, #0
    99b8:	2480      	movs	r4, #128	; 0x80
    99ba:	03e4      	lsls	r4, r4, #15
    99bc:	432c      	orrs	r4, r5
    99be:	0264      	lsls	r4, r4, #9
    99c0:	0a64      	lsrs	r4, r4, #9
    99c2:	9b00      	ldr	r3, [sp, #0]
    99c4:	21ff      	movs	r1, #255	; 0xff
    99c6:	e781      	b.n	98cc <__aeabi_fdiv+0x138>
    99c8:	9501      	str	r5, [sp, #4]
    99ca:	e7c1      	b.n	9950 <__aeabi_fdiv+0x1bc>
    99cc:	0023      	movs	r3, r4
    99ce:	2020      	movs	r0, #32
    99d0:	40cb      	lsrs	r3, r1
    99d2:	1a41      	subs	r1, r0, r1
    99d4:	408c      	lsls	r4, r1
    99d6:	1e61      	subs	r1, r4, #1
    99d8:	418c      	sbcs	r4, r1
    99da:	431c      	orrs	r4, r3
    99dc:	0763      	lsls	r3, r4, #29
    99de:	d004      	beq.n	99ea <__aeabi_fdiv+0x256>
    99e0:	230f      	movs	r3, #15
    99e2:	4023      	ands	r3, r4
    99e4:	2b04      	cmp	r3, #4
    99e6:	d000      	beq.n	99ea <__aeabi_fdiv+0x256>
    99e8:	3404      	adds	r4, #4
    99ea:	0163      	lsls	r3, r4, #5
    99ec:	d505      	bpl.n	99fa <__aeabi_fdiv+0x266>
    99ee:	2301      	movs	r3, #1
    99f0:	9a01      	ldr	r2, [sp, #4]
    99f2:	2101      	movs	r1, #1
    99f4:	4013      	ands	r3, r2
    99f6:	2400      	movs	r4, #0
    99f8:	e768      	b.n	98cc <__aeabi_fdiv+0x138>
    99fa:	2301      	movs	r3, #1
    99fc:	9a01      	ldr	r2, [sp, #4]
    99fe:	01a4      	lsls	r4, r4, #6
    9a00:	0a64      	lsrs	r4, r4, #9
    9a02:	4013      	ands	r3, r2
    9a04:	2100      	movs	r1, #0
    9a06:	e761      	b.n	98cc <__aeabi_fdiv+0x138>
    9a08:	2380      	movs	r3, #128	; 0x80
    9a0a:	03db      	lsls	r3, r3, #15
    9a0c:	431c      	orrs	r4, r3
    9a0e:	0264      	lsls	r4, r4, #9
    9a10:	0a64      	lsrs	r4, r4, #9
    9a12:	4653      	mov	r3, sl
    9a14:	21ff      	movs	r1, #255	; 0xff
    9a16:	e759      	b.n	98cc <__aeabi_fdiv+0x138>
    9a18:	00011300 	.word	0x00011300
    9a1c:	00011340 	.word	0x00011340
    9a20:	f7ffffff 	.word	0xf7ffffff

00009a24 <__eqsf2>:
    9a24:	b570      	push	{r4, r5, r6, lr}
    9a26:	0042      	lsls	r2, r0, #1
    9a28:	0245      	lsls	r5, r0, #9
    9a2a:	024e      	lsls	r6, r1, #9
    9a2c:	004c      	lsls	r4, r1, #1
    9a2e:	0fc3      	lsrs	r3, r0, #31
    9a30:	0a6d      	lsrs	r5, r5, #9
    9a32:	0e12      	lsrs	r2, r2, #24
    9a34:	0a76      	lsrs	r6, r6, #9
    9a36:	0e24      	lsrs	r4, r4, #24
    9a38:	0fc9      	lsrs	r1, r1, #31
    9a3a:	2001      	movs	r0, #1
    9a3c:	2aff      	cmp	r2, #255	; 0xff
    9a3e:	d006      	beq.n	9a4e <__eqsf2+0x2a>
    9a40:	2cff      	cmp	r4, #255	; 0xff
    9a42:	d003      	beq.n	9a4c <__eqsf2+0x28>
    9a44:	42a2      	cmp	r2, r4
    9a46:	d101      	bne.n	9a4c <__eqsf2+0x28>
    9a48:	42b5      	cmp	r5, r6
    9a4a:	d006      	beq.n	9a5a <__eqsf2+0x36>
    9a4c:	bd70      	pop	{r4, r5, r6, pc}
    9a4e:	2d00      	cmp	r5, #0
    9a50:	d1fc      	bne.n	9a4c <__eqsf2+0x28>
    9a52:	2cff      	cmp	r4, #255	; 0xff
    9a54:	d1fa      	bne.n	9a4c <__eqsf2+0x28>
    9a56:	2e00      	cmp	r6, #0
    9a58:	d1f8      	bne.n	9a4c <__eqsf2+0x28>
    9a5a:	428b      	cmp	r3, r1
    9a5c:	d006      	beq.n	9a6c <__eqsf2+0x48>
    9a5e:	2001      	movs	r0, #1
    9a60:	2a00      	cmp	r2, #0
    9a62:	d1f3      	bne.n	9a4c <__eqsf2+0x28>
    9a64:	0028      	movs	r0, r5
    9a66:	1e45      	subs	r5, r0, #1
    9a68:	41a8      	sbcs	r0, r5
    9a6a:	e7ef      	b.n	9a4c <__eqsf2+0x28>
    9a6c:	2000      	movs	r0, #0
    9a6e:	e7ed      	b.n	9a4c <__eqsf2+0x28>

00009a70 <__gesf2>:
    9a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a72:	0042      	lsls	r2, r0, #1
    9a74:	0245      	lsls	r5, r0, #9
    9a76:	024c      	lsls	r4, r1, #9
    9a78:	0fc3      	lsrs	r3, r0, #31
    9a7a:	0048      	lsls	r0, r1, #1
    9a7c:	0a6d      	lsrs	r5, r5, #9
    9a7e:	0e12      	lsrs	r2, r2, #24
    9a80:	0a64      	lsrs	r4, r4, #9
    9a82:	0e00      	lsrs	r0, r0, #24
    9a84:	0fc9      	lsrs	r1, r1, #31
    9a86:	2aff      	cmp	r2, #255	; 0xff
    9a88:	d01e      	beq.n	9ac8 <__gesf2+0x58>
    9a8a:	28ff      	cmp	r0, #255	; 0xff
    9a8c:	d021      	beq.n	9ad2 <__gesf2+0x62>
    9a8e:	2a00      	cmp	r2, #0
    9a90:	d10a      	bne.n	9aa8 <__gesf2+0x38>
    9a92:	426e      	negs	r6, r5
    9a94:	416e      	adcs	r6, r5
    9a96:	b2f6      	uxtb	r6, r6
    9a98:	2800      	cmp	r0, #0
    9a9a:	d10f      	bne.n	9abc <__gesf2+0x4c>
    9a9c:	2c00      	cmp	r4, #0
    9a9e:	d10d      	bne.n	9abc <__gesf2+0x4c>
    9aa0:	2000      	movs	r0, #0
    9aa2:	2d00      	cmp	r5, #0
    9aa4:	d009      	beq.n	9aba <__gesf2+0x4a>
    9aa6:	e005      	b.n	9ab4 <__gesf2+0x44>
    9aa8:	2800      	cmp	r0, #0
    9aaa:	d101      	bne.n	9ab0 <__gesf2+0x40>
    9aac:	2c00      	cmp	r4, #0
    9aae:	d001      	beq.n	9ab4 <__gesf2+0x44>
    9ab0:	428b      	cmp	r3, r1
    9ab2:	d011      	beq.n	9ad8 <__gesf2+0x68>
    9ab4:	2101      	movs	r1, #1
    9ab6:	4258      	negs	r0, r3
    9ab8:	4308      	orrs	r0, r1
    9aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9abc:	2e00      	cmp	r6, #0
    9abe:	d0f7      	beq.n	9ab0 <__gesf2+0x40>
    9ac0:	2001      	movs	r0, #1
    9ac2:	3901      	subs	r1, #1
    9ac4:	4308      	orrs	r0, r1
    9ac6:	e7f8      	b.n	9aba <__gesf2+0x4a>
    9ac8:	2d00      	cmp	r5, #0
    9aca:	d0de      	beq.n	9a8a <__gesf2+0x1a>
    9acc:	2002      	movs	r0, #2
    9ace:	4240      	negs	r0, r0
    9ad0:	e7f3      	b.n	9aba <__gesf2+0x4a>
    9ad2:	2c00      	cmp	r4, #0
    9ad4:	d0db      	beq.n	9a8e <__gesf2+0x1e>
    9ad6:	e7f9      	b.n	9acc <__gesf2+0x5c>
    9ad8:	4282      	cmp	r2, r0
    9ada:	dceb      	bgt.n	9ab4 <__gesf2+0x44>
    9adc:	db04      	blt.n	9ae8 <__gesf2+0x78>
    9ade:	42a5      	cmp	r5, r4
    9ae0:	d8e8      	bhi.n	9ab4 <__gesf2+0x44>
    9ae2:	2000      	movs	r0, #0
    9ae4:	42a5      	cmp	r5, r4
    9ae6:	d2e8      	bcs.n	9aba <__gesf2+0x4a>
    9ae8:	2101      	movs	r1, #1
    9aea:	1e58      	subs	r0, r3, #1
    9aec:	4308      	orrs	r0, r1
    9aee:	e7e4      	b.n	9aba <__gesf2+0x4a>

00009af0 <__lesf2>:
    9af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9af2:	0042      	lsls	r2, r0, #1
    9af4:	024d      	lsls	r5, r1, #9
    9af6:	004c      	lsls	r4, r1, #1
    9af8:	0246      	lsls	r6, r0, #9
    9afa:	0a76      	lsrs	r6, r6, #9
    9afc:	0e12      	lsrs	r2, r2, #24
    9afe:	0fc3      	lsrs	r3, r0, #31
    9b00:	0a6d      	lsrs	r5, r5, #9
    9b02:	0e24      	lsrs	r4, r4, #24
    9b04:	0fc9      	lsrs	r1, r1, #31
    9b06:	2aff      	cmp	r2, #255	; 0xff
    9b08:	d016      	beq.n	9b38 <__lesf2+0x48>
    9b0a:	2cff      	cmp	r4, #255	; 0xff
    9b0c:	d018      	beq.n	9b40 <__lesf2+0x50>
    9b0e:	2a00      	cmp	r2, #0
    9b10:	d10a      	bne.n	9b28 <__lesf2+0x38>
    9b12:	4270      	negs	r0, r6
    9b14:	4170      	adcs	r0, r6
    9b16:	b2c0      	uxtb	r0, r0
    9b18:	2c00      	cmp	r4, #0
    9b1a:	d015      	beq.n	9b48 <__lesf2+0x58>
    9b1c:	2800      	cmp	r0, #0
    9b1e:	d005      	beq.n	9b2c <__lesf2+0x3c>
    9b20:	2001      	movs	r0, #1
    9b22:	3901      	subs	r1, #1
    9b24:	4308      	orrs	r0, r1
    9b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b28:	2c00      	cmp	r4, #0
    9b2a:	d013      	beq.n	9b54 <__lesf2+0x64>
    9b2c:	4299      	cmp	r1, r3
    9b2e:	d014      	beq.n	9b5a <__lesf2+0x6a>
    9b30:	2001      	movs	r0, #1
    9b32:	425b      	negs	r3, r3
    9b34:	4318      	orrs	r0, r3
    9b36:	e7f6      	b.n	9b26 <__lesf2+0x36>
    9b38:	2002      	movs	r0, #2
    9b3a:	2e00      	cmp	r6, #0
    9b3c:	d1f3      	bne.n	9b26 <__lesf2+0x36>
    9b3e:	e7e4      	b.n	9b0a <__lesf2+0x1a>
    9b40:	2002      	movs	r0, #2
    9b42:	2d00      	cmp	r5, #0
    9b44:	d1ef      	bne.n	9b26 <__lesf2+0x36>
    9b46:	e7e2      	b.n	9b0e <__lesf2+0x1e>
    9b48:	2d00      	cmp	r5, #0
    9b4a:	d1e7      	bne.n	9b1c <__lesf2+0x2c>
    9b4c:	2000      	movs	r0, #0
    9b4e:	2e00      	cmp	r6, #0
    9b50:	d0e9      	beq.n	9b26 <__lesf2+0x36>
    9b52:	e7ed      	b.n	9b30 <__lesf2+0x40>
    9b54:	2d00      	cmp	r5, #0
    9b56:	d1e9      	bne.n	9b2c <__lesf2+0x3c>
    9b58:	e7ea      	b.n	9b30 <__lesf2+0x40>
    9b5a:	42a2      	cmp	r2, r4
    9b5c:	dc06      	bgt.n	9b6c <__lesf2+0x7c>
    9b5e:	dbdf      	blt.n	9b20 <__lesf2+0x30>
    9b60:	42ae      	cmp	r6, r5
    9b62:	d803      	bhi.n	9b6c <__lesf2+0x7c>
    9b64:	2000      	movs	r0, #0
    9b66:	42ae      	cmp	r6, r5
    9b68:	d3da      	bcc.n	9b20 <__lesf2+0x30>
    9b6a:	e7dc      	b.n	9b26 <__lesf2+0x36>
    9b6c:	2001      	movs	r0, #1
    9b6e:	4249      	negs	r1, r1
    9b70:	4308      	orrs	r0, r1
    9b72:	e7d8      	b.n	9b26 <__lesf2+0x36>

00009b74 <__aeabi_fmul>:
    9b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b76:	4657      	mov	r7, sl
    9b78:	464e      	mov	r6, r9
    9b7a:	4645      	mov	r5, r8
    9b7c:	46de      	mov	lr, fp
    9b7e:	b5e0      	push	{r5, r6, r7, lr}
    9b80:	0247      	lsls	r7, r0, #9
    9b82:	0046      	lsls	r6, r0, #1
    9b84:	4688      	mov	r8, r1
    9b86:	0a7f      	lsrs	r7, r7, #9
    9b88:	0e36      	lsrs	r6, r6, #24
    9b8a:	0fc4      	lsrs	r4, r0, #31
    9b8c:	2e00      	cmp	r6, #0
    9b8e:	d047      	beq.n	9c20 <__aeabi_fmul+0xac>
    9b90:	2eff      	cmp	r6, #255	; 0xff
    9b92:	d024      	beq.n	9bde <__aeabi_fmul+0x6a>
    9b94:	00fb      	lsls	r3, r7, #3
    9b96:	2780      	movs	r7, #128	; 0x80
    9b98:	04ff      	lsls	r7, r7, #19
    9b9a:	431f      	orrs	r7, r3
    9b9c:	2300      	movs	r3, #0
    9b9e:	4699      	mov	r9, r3
    9ba0:	469a      	mov	sl, r3
    9ba2:	3e7f      	subs	r6, #127	; 0x7f
    9ba4:	4643      	mov	r3, r8
    9ba6:	025d      	lsls	r5, r3, #9
    9ba8:	0058      	lsls	r0, r3, #1
    9baa:	0fdb      	lsrs	r3, r3, #31
    9bac:	0a6d      	lsrs	r5, r5, #9
    9bae:	0e00      	lsrs	r0, r0, #24
    9bb0:	4698      	mov	r8, r3
    9bb2:	d043      	beq.n	9c3c <__aeabi_fmul+0xc8>
    9bb4:	28ff      	cmp	r0, #255	; 0xff
    9bb6:	d03b      	beq.n	9c30 <__aeabi_fmul+0xbc>
    9bb8:	00eb      	lsls	r3, r5, #3
    9bba:	2580      	movs	r5, #128	; 0x80
    9bbc:	2200      	movs	r2, #0
    9bbe:	04ed      	lsls	r5, r5, #19
    9bc0:	431d      	orrs	r5, r3
    9bc2:	387f      	subs	r0, #127	; 0x7f
    9bc4:	1836      	adds	r6, r6, r0
    9bc6:	1c73      	adds	r3, r6, #1
    9bc8:	4641      	mov	r1, r8
    9bca:	469b      	mov	fp, r3
    9bcc:	464b      	mov	r3, r9
    9bce:	4061      	eors	r1, r4
    9bd0:	4313      	orrs	r3, r2
    9bd2:	2b0f      	cmp	r3, #15
    9bd4:	d864      	bhi.n	9ca0 <__aeabi_fmul+0x12c>
    9bd6:	4875      	ldr	r0, [pc, #468]	; (9dac <__aeabi_fmul+0x238>)
    9bd8:	009b      	lsls	r3, r3, #2
    9bda:	58c3      	ldr	r3, [r0, r3]
    9bdc:	469f      	mov	pc, r3
    9bde:	2f00      	cmp	r7, #0
    9be0:	d142      	bne.n	9c68 <__aeabi_fmul+0xf4>
    9be2:	2308      	movs	r3, #8
    9be4:	4699      	mov	r9, r3
    9be6:	3b06      	subs	r3, #6
    9be8:	26ff      	movs	r6, #255	; 0xff
    9bea:	469a      	mov	sl, r3
    9bec:	e7da      	b.n	9ba4 <__aeabi_fmul+0x30>
    9bee:	4641      	mov	r1, r8
    9bf0:	2a02      	cmp	r2, #2
    9bf2:	d028      	beq.n	9c46 <__aeabi_fmul+0xd2>
    9bf4:	2a03      	cmp	r2, #3
    9bf6:	d100      	bne.n	9bfa <__aeabi_fmul+0x86>
    9bf8:	e0ce      	b.n	9d98 <__aeabi_fmul+0x224>
    9bfa:	2a01      	cmp	r2, #1
    9bfc:	d000      	beq.n	9c00 <__aeabi_fmul+0x8c>
    9bfe:	e0ac      	b.n	9d5a <__aeabi_fmul+0x1e6>
    9c00:	4011      	ands	r1, r2
    9c02:	2000      	movs	r0, #0
    9c04:	2200      	movs	r2, #0
    9c06:	b2cc      	uxtb	r4, r1
    9c08:	0240      	lsls	r0, r0, #9
    9c0a:	05d2      	lsls	r2, r2, #23
    9c0c:	0a40      	lsrs	r0, r0, #9
    9c0e:	07e4      	lsls	r4, r4, #31
    9c10:	4310      	orrs	r0, r2
    9c12:	4320      	orrs	r0, r4
    9c14:	bc3c      	pop	{r2, r3, r4, r5}
    9c16:	4690      	mov	r8, r2
    9c18:	4699      	mov	r9, r3
    9c1a:	46a2      	mov	sl, r4
    9c1c:	46ab      	mov	fp, r5
    9c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c20:	2f00      	cmp	r7, #0
    9c22:	d115      	bne.n	9c50 <__aeabi_fmul+0xdc>
    9c24:	2304      	movs	r3, #4
    9c26:	4699      	mov	r9, r3
    9c28:	3b03      	subs	r3, #3
    9c2a:	2600      	movs	r6, #0
    9c2c:	469a      	mov	sl, r3
    9c2e:	e7b9      	b.n	9ba4 <__aeabi_fmul+0x30>
    9c30:	20ff      	movs	r0, #255	; 0xff
    9c32:	2202      	movs	r2, #2
    9c34:	2d00      	cmp	r5, #0
    9c36:	d0c5      	beq.n	9bc4 <__aeabi_fmul+0x50>
    9c38:	2203      	movs	r2, #3
    9c3a:	e7c3      	b.n	9bc4 <__aeabi_fmul+0x50>
    9c3c:	2d00      	cmp	r5, #0
    9c3e:	d119      	bne.n	9c74 <__aeabi_fmul+0x100>
    9c40:	2000      	movs	r0, #0
    9c42:	2201      	movs	r2, #1
    9c44:	e7be      	b.n	9bc4 <__aeabi_fmul+0x50>
    9c46:	2401      	movs	r4, #1
    9c48:	22ff      	movs	r2, #255	; 0xff
    9c4a:	400c      	ands	r4, r1
    9c4c:	2000      	movs	r0, #0
    9c4e:	e7db      	b.n	9c08 <__aeabi_fmul+0x94>
    9c50:	0038      	movs	r0, r7
    9c52:	f002 f985 	bl	bf60 <__clzsi2>
    9c56:	2676      	movs	r6, #118	; 0x76
    9c58:	1f43      	subs	r3, r0, #5
    9c5a:	409f      	lsls	r7, r3
    9c5c:	2300      	movs	r3, #0
    9c5e:	4276      	negs	r6, r6
    9c60:	1a36      	subs	r6, r6, r0
    9c62:	4699      	mov	r9, r3
    9c64:	469a      	mov	sl, r3
    9c66:	e79d      	b.n	9ba4 <__aeabi_fmul+0x30>
    9c68:	230c      	movs	r3, #12
    9c6a:	4699      	mov	r9, r3
    9c6c:	3b09      	subs	r3, #9
    9c6e:	26ff      	movs	r6, #255	; 0xff
    9c70:	469a      	mov	sl, r3
    9c72:	e797      	b.n	9ba4 <__aeabi_fmul+0x30>
    9c74:	0028      	movs	r0, r5
    9c76:	f002 f973 	bl	bf60 <__clzsi2>
    9c7a:	1f43      	subs	r3, r0, #5
    9c7c:	409d      	lsls	r5, r3
    9c7e:	2376      	movs	r3, #118	; 0x76
    9c80:	425b      	negs	r3, r3
    9c82:	1a18      	subs	r0, r3, r0
    9c84:	2200      	movs	r2, #0
    9c86:	e79d      	b.n	9bc4 <__aeabi_fmul+0x50>
    9c88:	2080      	movs	r0, #128	; 0x80
    9c8a:	2400      	movs	r4, #0
    9c8c:	03c0      	lsls	r0, r0, #15
    9c8e:	22ff      	movs	r2, #255	; 0xff
    9c90:	e7ba      	b.n	9c08 <__aeabi_fmul+0x94>
    9c92:	003d      	movs	r5, r7
    9c94:	4652      	mov	r2, sl
    9c96:	e7ab      	b.n	9bf0 <__aeabi_fmul+0x7c>
    9c98:	003d      	movs	r5, r7
    9c9a:	0021      	movs	r1, r4
    9c9c:	4652      	mov	r2, sl
    9c9e:	e7a7      	b.n	9bf0 <__aeabi_fmul+0x7c>
    9ca0:	0c3b      	lsrs	r3, r7, #16
    9ca2:	469c      	mov	ip, r3
    9ca4:	042a      	lsls	r2, r5, #16
    9ca6:	0c12      	lsrs	r2, r2, #16
    9ca8:	0c2b      	lsrs	r3, r5, #16
    9caa:	0014      	movs	r4, r2
    9cac:	4660      	mov	r0, ip
    9cae:	4665      	mov	r5, ip
    9cb0:	043f      	lsls	r7, r7, #16
    9cb2:	0c3f      	lsrs	r7, r7, #16
    9cb4:	437c      	muls	r4, r7
    9cb6:	4342      	muls	r2, r0
    9cb8:	435d      	muls	r5, r3
    9cba:	437b      	muls	r3, r7
    9cbc:	0c27      	lsrs	r7, r4, #16
    9cbe:	189b      	adds	r3, r3, r2
    9cc0:	18ff      	adds	r7, r7, r3
    9cc2:	42ba      	cmp	r2, r7
    9cc4:	d903      	bls.n	9cce <__aeabi_fmul+0x15a>
    9cc6:	2380      	movs	r3, #128	; 0x80
    9cc8:	025b      	lsls	r3, r3, #9
    9cca:	469c      	mov	ip, r3
    9ccc:	4465      	add	r5, ip
    9cce:	0424      	lsls	r4, r4, #16
    9cd0:	043a      	lsls	r2, r7, #16
    9cd2:	0c24      	lsrs	r4, r4, #16
    9cd4:	1912      	adds	r2, r2, r4
    9cd6:	0193      	lsls	r3, r2, #6
    9cd8:	1e5c      	subs	r4, r3, #1
    9cda:	41a3      	sbcs	r3, r4
    9cdc:	0c3f      	lsrs	r7, r7, #16
    9cde:	0e92      	lsrs	r2, r2, #26
    9ce0:	197d      	adds	r5, r7, r5
    9ce2:	431a      	orrs	r2, r3
    9ce4:	01ad      	lsls	r5, r5, #6
    9ce6:	4315      	orrs	r5, r2
    9ce8:	012b      	lsls	r3, r5, #4
    9cea:	d504      	bpl.n	9cf6 <__aeabi_fmul+0x182>
    9cec:	2301      	movs	r3, #1
    9cee:	465e      	mov	r6, fp
    9cf0:	086a      	lsrs	r2, r5, #1
    9cf2:	401d      	ands	r5, r3
    9cf4:	4315      	orrs	r5, r2
    9cf6:	0032      	movs	r2, r6
    9cf8:	327f      	adds	r2, #127	; 0x7f
    9cfa:	2a00      	cmp	r2, #0
    9cfc:	dd25      	ble.n	9d4a <__aeabi_fmul+0x1d6>
    9cfe:	076b      	lsls	r3, r5, #29
    9d00:	d004      	beq.n	9d0c <__aeabi_fmul+0x198>
    9d02:	230f      	movs	r3, #15
    9d04:	402b      	ands	r3, r5
    9d06:	2b04      	cmp	r3, #4
    9d08:	d000      	beq.n	9d0c <__aeabi_fmul+0x198>
    9d0a:	3504      	adds	r5, #4
    9d0c:	012b      	lsls	r3, r5, #4
    9d0e:	d503      	bpl.n	9d18 <__aeabi_fmul+0x1a4>
    9d10:	0032      	movs	r2, r6
    9d12:	4b27      	ldr	r3, [pc, #156]	; (9db0 <__aeabi_fmul+0x23c>)
    9d14:	3280      	adds	r2, #128	; 0x80
    9d16:	401d      	ands	r5, r3
    9d18:	2afe      	cmp	r2, #254	; 0xfe
    9d1a:	dc94      	bgt.n	9c46 <__aeabi_fmul+0xd2>
    9d1c:	2401      	movs	r4, #1
    9d1e:	01a8      	lsls	r0, r5, #6
    9d20:	0a40      	lsrs	r0, r0, #9
    9d22:	b2d2      	uxtb	r2, r2
    9d24:	400c      	ands	r4, r1
    9d26:	e76f      	b.n	9c08 <__aeabi_fmul+0x94>
    9d28:	2080      	movs	r0, #128	; 0x80
    9d2a:	03c0      	lsls	r0, r0, #15
    9d2c:	4207      	tst	r7, r0
    9d2e:	d007      	beq.n	9d40 <__aeabi_fmul+0x1cc>
    9d30:	4205      	tst	r5, r0
    9d32:	d105      	bne.n	9d40 <__aeabi_fmul+0x1cc>
    9d34:	4328      	orrs	r0, r5
    9d36:	0240      	lsls	r0, r0, #9
    9d38:	0a40      	lsrs	r0, r0, #9
    9d3a:	4644      	mov	r4, r8
    9d3c:	22ff      	movs	r2, #255	; 0xff
    9d3e:	e763      	b.n	9c08 <__aeabi_fmul+0x94>
    9d40:	4338      	orrs	r0, r7
    9d42:	0240      	lsls	r0, r0, #9
    9d44:	0a40      	lsrs	r0, r0, #9
    9d46:	22ff      	movs	r2, #255	; 0xff
    9d48:	e75e      	b.n	9c08 <__aeabi_fmul+0x94>
    9d4a:	2401      	movs	r4, #1
    9d4c:	1aa3      	subs	r3, r4, r2
    9d4e:	2b1b      	cmp	r3, #27
    9d50:	dd05      	ble.n	9d5e <__aeabi_fmul+0x1ea>
    9d52:	400c      	ands	r4, r1
    9d54:	2200      	movs	r2, #0
    9d56:	2000      	movs	r0, #0
    9d58:	e756      	b.n	9c08 <__aeabi_fmul+0x94>
    9d5a:	465e      	mov	r6, fp
    9d5c:	e7cb      	b.n	9cf6 <__aeabi_fmul+0x182>
    9d5e:	002a      	movs	r2, r5
    9d60:	2020      	movs	r0, #32
    9d62:	40da      	lsrs	r2, r3
    9d64:	1ac3      	subs	r3, r0, r3
    9d66:	409d      	lsls	r5, r3
    9d68:	002b      	movs	r3, r5
    9d6a:	1e5d      	subs	r5, r3, #1
    9d6c:	41ab      	sbcs	r3, r5
    9d6e:	4313      	orrs	r3, r2
    9d70:	075a      	lsls	r2, r3, #29
    9d72:	d004      	beq.n	9d7e <__aeabi_fmul+0x20a>
    9d74:	220f      	movs	r2, #15
    9d76:	401a      	ands	r2, r3
    9d78:	2a04      	cmp	r2, #4
    9d7a:	d000      	beq.n	9d7e <__aeabi_fmul+0x20a>
    9d7c:	3304      	adds	r3, #4
    9d7e:	015a      	lsls	r2, r3, #5
    9d80:	d504      	bpl.n	9d8c <__aeabi_fmul+0x218>
    9d82:	2401      	movs	r4, #1
    9d84:	2201      	movs	r2, #1
    9d86:	400c      	ands	r4, r1
    9d88:	2000      	movs	r0, #0
    9d8a:	e73d      	b.n	9c08 <__aeabi_fmul+0x94>
    9d8c:	2401      	movs	r4, #1
    9d8e:	019b      	lsls	r3, r3, #6
    9d90:	0a58      	lsrs	r0, r3, #9
    9d92:	400c      	ands	r4, r1
    9d94:	2200      	movs	r2, #0
    9d96:	e737      	b.n	9c08 <__aeabi_fmul+0x94>
    9d98:	2080      	movs	r0, #128	; 0x80
    9d9a:	2401      	movs	r4, #1
    9d9c:	03c0      	lsls	r0, r0, #15
    9d9e:	4328      	orrs	r0, r5
    9da0:	0240      	lsls	r0, r0, #9
    9da2:	0a40      	lsrs	r0, r0, #9
    9da4:	400c      	ands	r4, r1
    9da6:	22ff      	movs	r2, #255	; 0xff
    9da8:	e72e      	b.n	9c08 <__aeabi_fmul+0x94>
    9daa:	46c0      	nop			; (mov r8, r8)
    9dac:	00011380 	.word	0x00011380
    9db0:	f7ffffff 	.word	0xf7ffffff

00009db4 <__aeabi_fsub>:
    9db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9db6:	464f      	mov	r7, r9
    9db8:	46d6      	mov	lr, sl
    9dba:	4646      	mov	r6, r8
    9dbc:	0044      	lsls	r4, r0, #1
    9dbe:	b5c0      	push	{r6, r7, lr}
    9dc0:	0fc2      	lsrs	r2, r0, #31
    9dc2:	0247      	lsls	r7, r0, #9
    9dc4:	0248      	lsls	r0, r1, #9
    9dc6:	0a40      	lsrs	r0, r0, #9
    9dc8:	4684      	mov	ip, r0
    9dca:	4666      	mov	r6, ip
    9dcc:	0a7b      	lsrs	r3, r7, #9
    9dce:	0048      	lsls	r0, r1, #1
    9dd0:	0fc9      	lsrs	r1, r1, #31
    9dd2:	469a      	mov	sl, r3
    9dd4:	0e24      	lsrs	r4, r4, #24
    9dd6:	0015      	movs	r5, r2
    9dd8:	00db      	lsls	r3, r3, #3
    9dda:	0e00      	lsrs	r0, r0, #24
    9ddc:	4689      	mov	r9, r1
    9dde:	00f6      	lsls	r6, r6, #3
    9de0:	28ff      	cmp	r0, #255	; 0xff
    9de2:	d100      	bne.n	9de6 <__aeabi_fsub+0x32>
    9de4:	e08f      	b.n	9f06 <__aeabi_fsub+0x152>
    9de6:	2101      	movs	r1, #1
    9de8:	464f      	mov	r7, r9
    9dea:	404f      	eors	r7, r1
    9dec:	0039      	movs	r1, r7
    9dee:	4291      	cmp	r1, r2
    9df0:	d066      	beq.n	9ec0 <__aeabi_fsub+0x10c>
    9df2:	1a22      	subs	r2, r4, r0
    9df4:	2a00      	cmp	r2, #0
    9df6:	dc00      	bgt.n	9dfa <__aeabi_fsub+0x46>
    9df8:	e09d      	b.n	9f36 <__aeabi_fsub+0x182>
    9dfa:	2800      	cmp	r0, #0
    9dfc:	d13d      	bne.n	9e7a <__aeabi_fsub+0xc6>
    9dfe:	2e00      	cmp	r6, #0
    9e00:	d100      	bne.n	9e04 <__aeabi_fsub+0x50>
    9e02:	e08b      	b.n	9f1c <__aeabi_fsub+0x168>
    9e04:	1e51      	subs	r1, r2, #1
    9e06:	2900      	cmp	r1, #0
    9e08:	d000      	beq.n	9e0c <__aeabi_fsub+0x58>
    9e0a:	e0b5      	b.n	9f78 <__aeabi_fsub+0x1c4>
    9e0c:	2401      	movs	r4, #1
    9e0e:	1b9b      	subs	r3, r3, r6
    9e10:	015a      	lsls	r2, r3, #5
    9e12:	d544      	bpl.n	9e9e <__aeabi_fsub+0xea>
    9e14:	019b      	lsls	r3, r3, #6
    9e16:	099f      	lsrs	r7, r3, #6
    9e18:	0038      	movs	r0, r7
    9e1a:	f002 f8a1 	bl	bf60 <__clzsi2>
    9e1e:	3805      	subs	r0, #5
    9e20:	4087      	lsls	r7, r0
    9e22:	4284      	cmp	r4, r0
    9e24:	dd00      	ble.n	9e28 <__aeabi_fsub+0x74>
    9e26:	e096      	b.n	9f56 <__aeabi_fsub+0x1a2>
    9e28:	1b04      	subs	r4, r0, r4
    9e2a:	003a      	movs	r2, r7
    9e2c:	2020      	movs	r0, #32
    9e2e:	3401      	adds	r4, #1
    9e30:	40e2      	lsrs	r2, r4
    9e32:	1b04      	subs	r4, r0, r4
    9e34:	40a7      	lsls	r7, r4
    9e36:	003b      	movs	r3, r7
    9e38:	1e5f      	subs	r7, r3, #1
    9e3a:	41bb      	sbcs	r3, r7
    9e3c:	2400      	movs	r4, #0
    9e3e:	4313      	orrs	r3, r2
    9e40:	075a      	lsls	r2, r3, #29
    9e42:	d004      	beq.n	9e4e <__aeabi_fsub+0x9a>
    9e44:	220f      	movs	r2, #15
    9e46:	401a      	ands	r2, r3
    9e48:	2a04      	cmp	r2, #4
    9e4a:	d000      	beq.n	9e4e <__aeabi_fsub+0x9a>
    9e4c:	3304      	adds	r3, #4
    9e4e:	015a      	lsls	r2, r3, #5
    9e50:	d527      	bpl.n	9ea2 <__aeabi_fsub+0xee>
    9e52:	3401      	adds	r4, #1
    9e54:	2cff      	cmp	r4, #255	; 0xff
    9e56:	d100      	bne.n	9e5a <__aeabi_fsub+0xa6>
    9e58:	e079      	b.n	9f4e <__aeabi_fsub+0x19a>
    9e5a:	2201      	movs	r2, #1
    9e5c:	019b      	lsls	r3, r3, #6
    9e5e:	0a5b      	lsrs	r3, r3, #9
    9e60:	b2e4      	uxtb	r4, r4
    9e62:	402a      	ands	r2, r5
    9e64:	025b      	lsls	r3, r3, #9
    9e66:	05e4      	lsls	r4, r4, #23
    9e68:	0a58      	lsrs	r0, r3, #9
    9e6a:	07d2      	lsls	r2, r2, #31
    9e6c:	4320      	orrs	r0, r4
    9e6e:	4310      	orrs	r0, r2
    9e70:	bc1c      	pop	{r2, r3, r4}
    9e72:	4690      	mov	r8, r2
    9e74:	4699      	mov	r9, r3
    9e76:	46a2      	mov	sl, r4
    9e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e7a:	2cff      	cmp	r4, #255	; 0xff
    9e7c:	d0e0      	beq.n	9e40 <__aeabi_fsub+0x8c>
    9e7e:	2180      	movs	r1, #128	; 0x80
    9e80:	04c9      	lsls	r1, r1, #19
    9e82:	430e      	orrs	r6, r1
    9e84:	2a1b      	cmp	r2, #27
    9e86:	dc7b      	bgt.n	9f80 <__aeabi_fsub+0x1cc>
    9e88:	0031      	movs	r1, r6
    9e8a:	2020      	movs	r0, #32
    9e8c:	40d1      	lsrs	r1, r2
    9e8e:	1a82      	subs	r2, r0, r2
    9e90:	4096      	lsls	r6, r2
    9e92:	1e72      	subs	r2, r6, #1
    9e94:	4196      	sbcs	r6, r2
    9e96:	430e      	orrs	r6, r1
    9e98:	1b9b      	subs	r3, r3, r6
    9e9a:	015a      	lsls	r2, r3, #5
    9e9c:	d4ba      	bmi.n	9e14 <__aeabi_fsub+0x60>
    9e9e:	075a      	lsls	r2, r3, #29
    9ea0:	d1d0      	bne.n	9e44 <__aeabi_fsub+0x90>
    9ea2:	2201      	movs	r2, #1
    9ea4:	08df      	lsrs	r7, r3, #3
    9ea6:	402a      	ands	r2, r5
    9ea8:	2cff      	cmp	r4, #255	; 0xff
    9eaa:	d133      	bne.n	9f14 <__aeabi_fsub+0x160>
    9eac:	2f00      	cmp	r7, #0
    9eae:	d100      	bne.n	9eb2 <__aeabi_fsub+0xfe>
    9eb0:	e0a8      	b.n	a004 <__aeabi_fsub+0x250>
    9eb2:	2380      	movs	r3, #128	; 0x80
    9eb4:	03db      	lsls	r3, r3, #15
    9eb6:	433b      	orrs	r3, r7
    9eb8:	025b      	lsls	r3, r3, #9
    9eba:	0a5b      	lsrs	r3, r3, #9
    9ebc:	24ff      	movs	r4, #255	; 0xff
    9ebe:	e7d1      	b.n	9e64 <__aeabi_fsub+0xb0>
    9ec0:	1a21      	subs	r1, r4, r0
    9ec2:	2900      	cmp	r1, #0
    9ec4:	dd4c      	ble.n	9f60 <__aeabi_fsub+0x1ac>
    9ec6:	2800      	cmp	r0, #0
    9ec8:	d02a      	beq.n	9f20 <__aeabi_fsub+0x16c>
    9eca:	2cff      	cmp	r4, #255	; 0xff
    9ecc:	d0b8      	beq.n	9e40 <__aeabi_fsub+0x8c>
    9ece:	2080      	movs	r0, #128	; 0x80
    9ed0:	04c0      	lsls	r0, r0, #19
    9ed2:	4306      	orrs	r6, r0
    9ed4:	291b      	cmp	r1, #27
    9ed6:	dd00      	ble.n	9eda <__aeabi_fsub+0x126>
    9ed8:	e0af      	b.n	a03a <__aeabi_fsub+0x286>
    9eda:	0030      	movs	r0, r6
    9edc:	2720      	movs	r7, #32
    9ede:	40c8      	lsrs	r0, r1
    9ee0:	1a79      	subs	r1, r7, r1
    9ee2:	408e      	lsls	r6, r1
    9ee4:	1e71      	subs	r1, r6, #1
    9ee6:	418e      	sbcs	r6, r1
    9ee8:	4306      	orrs	r6, r0
    9eea:	199b      	adds	r3, r3, r6
    9eec:	0159      	lsls	r1, r3, #5
    9eee:	d5d6      	bpl.n	9e9e <__aeabi_fsub+0xea>
    9ef0:	3401      	adds	r4, #1
    9ef2:	2cff      	cmp	r4, #255	; 0xff
    9ef4:	d100      	bne.n	9ef8 <__aeabi_fsub+0x144>
    9ef6:	e085      	b.n	a004 <__aeabi_fsub+0x250>
    9ef8:	2201      	movs	r2, #1
    9efa:	497a      	ldr	r1, [pc, #488]	; (a0e4 <__aeabi_fsub+0x330>)
    9efc:	401a      	ands	r2, r3
    9efe:	085b      	lsrs	r3, r3, #1
    9f00:	400b      	ands	r3, r1
    9f02:	4313      	orrs	r3, r2
    9f04:	e79c      	b.n	9e40 <__aeabi_fsub+0x8c>
    9f06:	2e00      	cmp	r6, #0
    9f08:	d000      	beq.n	9f0c <__aeabi_fsub+0x158>
    9f0a:	e770      	b.n	9dee <__aeabi_fsub+0x3a>
    9f0c:	e76b      	b.n	9de6 <__aeabi_fsub+0x32>
    9f0e:	1e3b      	subs	r3, r7, #0
    9f10:	d1c5      	bne.n	9e9e <__aeabi_fsub+0xea>
    9f12:	2200      	movs	r2, #0
    9f14:	027b      	lsls	r3, r7, #9
    9f16:	0a5b      	lsrs	r3, r3, #9
    9f18:	b2e4      	uxtb	r4, r4
    9f1a:	e7a3      	b.n	9e64 <__aeabi_fsub+0xb0>
    9f1c:	0014      	movs	r4, r2
    9f1e:	e78f      	b.n	9e40 <__aeabi_fsub+0x8c>
    9f20:	2e00      	cmp	r6, #0
    9f22:	d04d      	beq.n	9fc0 <__aeabi_fsub+0x20c>
    9f24:	1e48      	subs	r0, r1, #1
    9f26:	2800      	cmp	r0, #0
    9f28:	d157      	bne.n	9fda <__aeabi_fsub+0x226>
    9f2a:	199b      	adds	r3, r3, r6
    9f2c:	2401      	movs	r4, #1
    9f2e:	015a      	lsls	r2, r3, #5
    9f30:	d5b5      	bpl.n	9e9e <__aeabi_fsub+0xea>
    9f32:	2402      	movs	r4, #2
    9f34:	e7e0      	b.n	9ef8 <__aeabi_fsub+0x144>
    9f36:	2a00      	cmp	r2, #0
    9f38:	d125      	bne.n	9f86 <__aeabi_fsub+0x1d2>
    9f3a:	1c62      	adds	r2, r4, #1
    9f3c:	b2d2      	uxtb	r2, r2
    9f3e:	2a01      	cmp	r2, #1
    9f40:	dd72      	ble.n	a028 <__aeabi_fsub+0x274>
    9f42:	1b9f      	subs	r7, r3, r6
    9f44:	017a      	lsls	r2, r7, #5
    9f46:	d535      	bpl.n	9fb4 <__aeabi_fsub+0x200>
    9f48:	1af7      	subs	r7, r6, r3
    9f4a:	000d      	movs	r5, r1
    9f4c:	e764      	b.n	9e18 <__aeabi_fsub+0x64>
    9f4e:	2201      	movs	r2, #1
    9f50:	2300      	movs	r3, #0
    9f52:	402a      	ands	r2, r5
    9f54:	e786      	b.n	9e64 <__aeabi_fsub+0xb0>
    9f56:	003b      	movs	r3, r7
    9f58:	4a63      	ldr	r2, [pc, #396]	; (a0e8 <__aeabi_fsub+0x334>)
    9f5a:	1a24      	subs	r4, r4, r0
    9f5c:	4013      	ands	r3, r2
    9f5e:	e76f      	b.n	9e40 <__aeabi_fsub+0x8c>
    9f60:	2900      	cmp	r1, #0
    9f62:	d16c      	bne.n	a03e <__aeabi_fsub+0x28a>
    9f64:	1c61      	adds	r1, r4, #1
    9f66:	b2c8      	uxtb	r0, r1
    9f68:	2801      	cmp	r0, #1
    9f6a:	dd4e      	ble.n	a00a <__aeabi_fsub+0x256>
    9f6c:	29ff      	cmp	r1, #255	; 0xff
    9f6e:	d049      	beq.n	a004 <__aeabi_fsub+0x250>
    9f70:	199b      	adds	r3, r3, r6
    9f72:	085b      	lsrs	r3, r3, #1
    9f74:	000c      	movs	r4, r1
    9f76:	e763      	b.n	9e40 <__aeabi_fsub+0x8c>
    9f78:	2aff      	cmp	r2, #255	; 0xff
    9f7a:	d041      	beq.n	a000 <__aeabi_fsub+0x24c>
    9f7c:	000a      	movs	r2, r1
    9f7e:	e781      	b.n	9e84 <__aeabi_fsub+0xd0>
    9f80:	2601      	movs	r6, #1
    9f82:	1b9b      	subs	r3, r3, r6
    9f84:	e789      	b.n	9e9a <__aeabi_fsub+0xe6>
    9f86:	2c00      	cmp	r4, #0
    9f88:	d01c      	beq.n	9fc4 <__aeabi_fsub+0x210>
    9f8a:	28ff      	cmp	r0, #255	; 0xff
    9f8c:	d021      	beq.n	9fd2 <__aeabi_fsub+0x21e>
    9f8e:	2480      	movs	r4, #128	; 0x80
    9f90:	04e4      	lsls	r4, r4, #19
    9f92:	4252      	negs	r2, r2
    9f94:	4323      	orrs	r3, r4
    9f96:	2a1b      	cmp	r2, #27
    9f98:	dd00      	ble.n	9f9c <__aeabi_fsub+0x1e8>
    9f9a:	e096      	b.n	a0ca <__aeabi_fsub+0x316>
    9f9c:	001c      	movs	r4, r3
    9f9e:	2520      	movs	r5, #32
    9fa0:	40d4      	lsrs	r4, r2
    9fa2:	1aaa      	subs	r2, r5, r2
    9fa4:	4093      	lsls	r3, r2
    9fa6:	1e5a      	subs	r2, r3, #1
    9fa8:	4193      	sbcs	r3, r2
    9faa:	4323      	orrs	r3, r4
    9fac:	1af3      	subs	r3, r6, r3
    9fae:	0004      	movs	r4, r0
    9fb0:	000d      	movs	r5, r1
    9fb2:	e72d      	b.n	9e10 <__aeabi_fsub+0x5c>
    9fb4:	2f00      	cmp	r7, #0
    9fb6:	d000      	beq.n	9fba <__aeabi_fsub+0x206>
    9fb8:	e72e      	b.n	9e18 <__aeabi_fsub+0x64>
    9fba:	2200      	movs	r2, #0
    9fbc:	2400      	movs	r4, #0
    9fbe:	e7a9      	b.n	9f14 <__aeabi_fsub+0x160>
    9fc0:	000c      	movs	r4, r1
    9fc2:	e73d      	b.n	9e40 <__aeabi_fsub+0x8c>
    9fc4:	2b00      	cmp	r3, #0
    9fc6:	d058      	beq.n	a07a <__aeabi_fsub+0x2c6>
    9fc8:	43d2      	mvns	r2, r2
    9fca:	2a00      	cmp	r2, #0
    9fcc:	d0ee      	beq.n	9fac <__aeabi_fsub+0x1f8>
    9fce:	28ff      	cmp	r0, #255	; 0xff
    9fd0:	d1e1      	bne.n	9f96 <__aeabi_fsub+0x1e2>
    9fd2:	0033      	movs	r3, r6
    9fd4:	24ff      	movs	r4, #255	; 0xff
    9fd6:	000d      	movs	r5, r1
    9fd8:	e732      	b.n	9e40 <__aeabi_fsub+0x8c>
    9fda:	29ff      	cmp	r1, #255	; 0xff
    9fdc:	d010      	beq.n	a000 <__aeabi_fsub+0x24c>
    9fde:	0001      	movs	r1, r0
    9fe0:	e778      	b.n	9ed4 <__aeabi_fsub+0x120>
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d06e      	beq.n	a0c4 <__aeabi_fsub+0x310>
    9fe6:	24ff      	movs	r4, #255	; 0xff
    9fe8:	2e00      	cmp	r6, #0
    9fea:	d100      	bne.n	9fee <__aeabi_fsub+0x23a>
    9fec:	e728      	b.n	9e40 <__aeabi_fsub+0x8c>
    9fee:	2280      	movs	r2, #128	; 0x80
    9ff0:	4651      	mov	r1, sl
    9ff2:	03d2      	lsls	r2, r2, #15
    9ff4:	4211      	tst	r1, r2
    9ff6:	d003      	beq.n	a000 <__aeabi_fsub+0x24c>
    9ff8:	4661      	mov	r1, ip
    9ffa:	4211      	tst	r1, r2
    9ffc:	d100      	bne.n	a000 <__aeabi_fsub+0x24c>
    9ffe:	0033      	movs	r3, r6
    a000:	24ff      	movs	r4, #255	; 0xff
    a002:	e71d      	b.n	9e40 <__aeabi_fsub+0x8c>
    a004:	24ff      	movs	r4, #255	; 0xff
    a006:	2300      	movs	r3, #0
    a008:	e72c      	b.n	9e64 <__aeabi_fsub+0xb0>
    a00a:	2c00      	cmp	r4, #0
    a00c:	d1e9      	bne.n	9fe2 <__aeabi_fsub+0x22e>
    a00e:	2b00      	cmp	r3, #0
    a010:	d063      	beq.n	a0da <__aeabi_fsub+0x326>
    a012:	2e00      	cmp	r6, #0
    a014:	d100      	bne.n	a018 <__aeabi_fsub+0x264>
    a016:	e713      	b.n	9e40 <__aeabi_fsub+0x8c>
    a018:	199b      	adds	r3, r3, r6
    a01a:	015a      	lsls	r2, r3, #5
    a01c:	d400      	bmi.n	a020 <__aeabi_fsub+0x26c>
    a01e:	e73e      	b.n	9e9e <__aeabi_fsub+0xea>
    a020:	4a31      	ldr	r2, [pc, #196]	; (a0e8 <__aeabi_fsub+0x334>)
    a022:	000c      	movs	r4, r1
    a024:	4013      	ands	r3, r2
    a026:	e70b      	b.n	9e40 <__aeabi_fsub+0x8c>
    a028:	2c00      	cmp	r4, #0
    a02a:	d11e      	bne.n	a06a <__aeabi_fsub+0x2b6>
    a02c:	2b00      	cmp	r3, #0
    a02e:	d12f      	bne.n	a090 <__aeabi_fsub+0x2dc>
    a030:	2e00      	cmp	r6, #0
    a032:	d04f      	beq.n	a0d4 <__aeabi_fsub+0x320>
    a034:	0033      	movs	r3, r6
    a036:	000d      	movs	r5, r1
    a038:	e702      	b.n	9e40 <__aeabi_fsub+0x8c>
    a03a:	2601      	movs	r6, #1
    a03c:	e755      	b.n	9eea <__aeabi_fsub+0x136>
    a03e:	2c00      	cmp	r4, #0
    a040:	d11f      	bne.n	a082 <__aeabi_fsub+0x2ce>
    a042:	2b00      	cmp	r3, #0
    a044:	d043      	beq.n	a0ce <__aeabi_fsub+0x31a>
    a046:	43c9      	mvns	r1, r1
    a048:	2900      	cmp	r1, #0
    a04a:	d00b      	beq.n	a064 <__aeabi_fsub+0x2b0>
    a04c:	28ff      	cmp	r0, #255	; 0xff
    a04e:	d039      	beq.n	a0c4 <__aeabi_fsub+0x310>
    a050:	291b      	cmp	r1, #27
    a052:	dc44      	bgt.n	a0de <__aeabi_fsub+0x32a>
    a054:	001c      	movs	r4, r3
    a056:	2720      	movs	r7, #32
    a058:	40cc      	lsrs	r4, r1
    a05a:	1a79      	subs	r1, r7, r1
    a05c:	408b      	lsls	r3, r1
    a05e:	1e59      	subs	r1, r3, #1
    a060:	418b      	sbcs	r3, r1
    a062:	4323      	orrs	r3, r4
    a064:	199b      	adds	r3, r3, r6
    a066:	0004      	movs	r4, r0
    a068:	e740      	b.n	9eec <__aeabi_fsub+0x138>
    a06a:	2b00      	cmp	r3, #0
    a06c:	d11a      	bne.n	a0a4 <__aeabi_fsub+0x2f0>
    a06e:	2e00      	cmp	r6, #0
    a070:	d124      	bne.n	a0bc <__aeabi_fsub+0x308>
    a072:	2780      	movs	r7, #128	; 0x80
    a074:	2200      	movs	r2, #0
    a076:	03ff      	lsls	r7, r7, #15
    a078:	e71b      	b.n	9eb2 <__aeabi_fsub+0xfe>
    a07a:	0033      	movs	r3, r6
    a07c:	0004      	movs	r4, r0
    a07e:	000d      	movs	r5, r1
    a080:	e6de      	b.n	9e40 <__aeabi_fsub+0x8c>
    a082:	28ff      	cmp	r0, #255	; 0xff
    a084:	d01e      	beq.n	a0c4 <__aeabi_fsub+0x310>
    a086:	2480      	movs	r4, #128	; 0x80
    a088:	04e4      	lsls	r4, r4, #19
    a08a:	4249      	negs	r1, r1
    a08c:	4323      	orrs	r3, r4
    a08e:	e7df      	b.n	a050 <__aeabi_fsub+0x29c>
    a090:	2e00      	cmp	r6, #0
    a092:	d100      	bne.n	a096 <__aeabi_fsub+0x2e2>
    a094:	e6d4      	b.n	9e40 <__aeabi_fsub+0x8c>
    a096:	1b9f      	subs	r7, r3, r6
    a098:	017a      	lsls	r2, r7, #5
    a09a:	d400      	bmi.n	a09e <__aeabi_fsub+0x2ea>
    a09c:	e737      	b.n	9f0e <__aeabi_fsub+0x15a>
    a09e:	1af3      	subs	r3, r6, r3
    a0a0:	000d      	movs	r5, r1
    a0a2:	e6cd      	b.n	9e40 <__aeabi_fsub+0x8c>
    a0a4:	24ff      	movs	r4, #255	; 0xff
    a0a6:	2e00      	cmp	r6, #0
    a0a8:	d100      	bne.n	a0ac <__aeabi_fsub+0x2f8>
    a0aa:	e6c9      	b.n	9e40 <__aeabi_fsub+0x8c>
    a0ac:	2280      	movs	r2, #128	; 0x80
    a0ae:	4650      	mov	r0, sl
    a0b0:	03d2      	lsls	r2, r2, #15
    a0b2:	4210      	tst	r0, r2
    a0b4:	d0a4      	beq.n	a000 <__aeabi_fsub+0x24c>
    a0b6:	4660      	mov	r0, ip
    a0b8:	4210      	tst	r0, r2
    a0ba:	d1a1      	bne.n	a000 <__aeabi_fsub+0x24c>
    a0bc:	0033      	movs	r3, r6
    a0be:	000d      	movs	r5, r1
    a0c0:	24ff      	movs	r4, #255	; 0xff
    a0c2:	e6bd      	b.n	9e40 <__aeabi_fsub+0x8c>
    a0c4:	0033      	movs	r3, r6
    a0c6:	24ff      	movs	r4, #255	; 0xff
    a0c8:	e6ba      	b.n	9e40 <__aeabi_fsub+0x8c>
    a0ca:	2301      	movs	r3, #1
    a0cc:	e76e      	b.n	9fac <__aeabi_fsub+0x1f8>
    a0ce:	0033      	movs	r3, r6
    a0d0:	0004      	movs	r4, r0
    a0d2:	e6b5      	b.n	9e40 <__aeabi_fsub+0x8c>
    a0d4:	2700      	movs	r7, #0
    a0d6:	2200      	movs	r2, #0
    a0d8:	e71c      	b.n	9f14 <__aeabi_fsub+0x160>
    a0da:	0033      	movs	r3, r6
    a0dc:	e6b0      	b.n	9e40 <__aeabi_fsub+0x8c>
    a0de:	2301      	movs	r3, #1
    a0e0:	e7c0      	b.n	a064 <__aeabi_fsub+0x2b0>
    a0e2:	46c0      	nop			; (mov r8, r8)
    a0e4:	7dffffff 	.word	0x7dffffff
    a0e8:	fbffffff 	.word	0xfbffffff

0000a0ec <__aeabi_f2iz>:
    a0ec:	0241      	lsls	r1, r0, #9
    a0ee:	0043      	lsls	r3, r0, #1
    a0f0:	0fc2      	lsrs	r2, r0, #31
    a0f2:	0a49      	lsrs	r1, r1, #9
    a0f4:	0e1b      	lsrs	r3, r3, #24
    a0f6:	2000      	movs	r0, #0
    a0f8:	2b7e      	cmp	r3, #126	; 0x7e
    a0fa:	dd0d      	ble.n	a118 <__aeabi_f2iz+0x2c>
    a0fc:	2b9d      	cmp	r3, #157	; 0x9d
    a0fe:	dc0c      	bgt.n	a11a <__aeabi_f2iz+0x2e>
    a100:	2080      	movs	r0, #128	; 0x80
    a102:	0400      	lsls	r0, r0, #16
    a104:	4301      	orrs	r1, r0
    a106:	2b95      	cmp	r3, #149	; 0x95
    a108:	dc0a      	bgt.n	a120 <__aeabi_f2iz+0x34>
    a10a:	2096      	movs	r0, #150	; 0x96
    a10c:	1ac3      	subs	r3, r0, r3
    a10e:	40d9      	lsrs	r1, r3
    a110:	4248      	negs	r0, r1
    a112:	2a00      	cmp	r2, #0
    a114:	d100      	bne.n	a118 <__aeabi_f2iz+0x2c>
    a116:	0008      	movs	r0, r1
    a118:	4770      	bx	lr
    a11a:	4b03      	ldr	r3, [pc, #12]	; (a128 <__aeabi_f2iz+0x3c>)
    a11c:	18d0      	adds	r0, r2, r3
    a11e:	e7fb      	b.n	a118 <__aeabi_f2iz+0x2c>
    a120:	3b96      	subs	r3, #150	; 0x96
    a122:	4099      	lsls	r1, r3
    a124:	e7f4      	b.n	a110 <__aeabi_f2iz+0x24>
    a126:	46c0      	nop			; (mov r8, r8)
    a128:	7fffffff 	.word	0x7fffffff

0000a12c <__aeabi_i2f>:
    a12c:	b570      	push	{r4, r5, r6, lr}
    a12e:	2800      	cmp	r0, #0
    a130:	d030      	beq.n	a194 <__aeabi_i2f+0x68>
    a132:	17c3      	asrs	r3, r0, #31
    a134:	18c4      	adds	r4, r0, r3
    a136:	405c      	eors	r4, r3
    a138:	0fc5      	lsrs	r5, r0, #31
    a13a:	0020      	movs	r0, r4
    a13c:	f001 ff10 	bl	bf60 <__clzsi2>
    a140:	239e      	movs	r3, #158	; 0x9e
    a142:	1a1b      	subs	r3, r3, r0
    a144:	2b96      	cmp	r3, #150	; 0x96
    a146:	dc0d      	bgt.n	a164 <__aeabi_i2f+0x38>
    a148:	2296      	movs	r2, #150	; 0x96
    a14a:	1ad2      	subs	r2, r2, r3
    a14c:	4094      	lsls	r4, r2
    a14e:	002a      	movs	r2, r5
    a150:	0264      	lsls	r4, r4, #9
    a152:	0a64      	lsrs	r4, r4, #9
    a154:	b2db      	uxtb	r3, r3
    a156:	0264      	lsls	r4, r4, #9
    a158:	05db      	lsls	r3, r3, #23
    a15a:	0a60      	lsrs	r0, r4, #9
    a15c:	07d2      	lsls	r2, r2, #31
    a15e:	4318      	orrs	r0, r3
    a160:	4310      	orrs	r0, r2
    a162:	bd70      	pop	{r4, r5, r6, pc}
    a164:	2b99      	cmp	r3, #153	; 0x99
    a166:	dc19      	bgt.n	a19c <__aeabi_i2f+0x70>
    a168:	2299      	movs	r2, #153	; 0x99
    a16a:	1ad2      	subs	r2, r2, r3
    a16c:	2a00      	cmp	r2, #0
    a16e:	dd29      	ble.n	a1c4 <__aeabi_i2f+0x98>
    a170:	4094      	lsls	r4, r2
    a172:	0022      	movs	r2, r4
    a174:	4c14      	ldr	r4, [pc, #80]	; (a1c8 <__aeabi_i2f+0x9c>)
    a176:	4014      	ands	r4, r2
    a178:	0751      	lsls	r1, r2, #29
    a17a:	d004      	beq.n	a186 <__aeabi_i2f+0x5a>
    a17c:	210f      	movs	r1, #15
    a17e:	400a      	ands	r2, r1
    a180:	2a04      	cmp	r2, #4
    a182:	d000      	beq.n	a186 <__aeabi_i2f+0x5a>
    a184:	3404      	adds	r4, #4
    a186:	0162      	lsls	r2, r4, #5
    a188:	d413      	bmi.n	a1b2 <__aeabi_i2f+0x86>
    a18a:	01a4      	lsls	r4, r4, #6
    a18c:	0a64      	lsrs	r4, r4, #9
    a18e:	b2db      	uxtb	r3, r3
    a190:	002a      	movs	r2, r5
    a192:	e7e0      	b.n	a156 <__aeabi_i2f+0x2a>
    a194:	2200      	movs	r2, #0
    a196:	2300      	movs	r3, #0
    a198:	2400      	movs	r4, #0
    a19a:	e7dc      	b.n	a156 <__aeabi_i2f+0x2a>
    a19c:	2205      	movs	r2, #5
    a19e:	0021      	movs	r1, r4
    a1a0:	1a12      	subs	r2, r2, r0
    a1a2:	40d1      	lsrs	r1, r2
    a1a4:	22b9      	movs	r2, #185	; 0xb9
    a1a6:	1ad2      	subs	r2, r2, r3
    a1a8:	4094      	lsls	r4, r2
    a1aa:	1e62      	subs	r2, r4, #1
    a1ac:	4194      	sbcs	r4, r2
    a1ae:	430c      	orrs	r4, r1
    a1b0:	e7da      	b.n	a168 <__aeabi_i2f+0x3c>
    a1b2:	4b05      	ldr	r3, [pc, #20]	; (a1c8 <__aeabi_i2f+0x9c>)
    a1b4:	002a      	movs	r2, r5
    a1b6:	401c      	ands	r4, r3
    a1b8:	239f      	movs	r3, #159	; 0x9f
    a1ba:	01a4      	lsls	r4, r4, #6
    a1bc:	1a1b      	subs	r3, r3, r0
    a1be:	0a64      	lsrs	r4, r4, #9
    a1c0:	b2db      	uxtb	r3, r3
    a1c2:	e7c8      	b.n	a156 <__aeabi_i2f+0x2a>
    a1c4:	0022      	movs	r2, r4
    a1c6:	e7d5      	b.n	a174 <__aeabi_i2f+0x48>
    a1c8:	fbffffff 	.word	0xfbffffff

0000a1cc <__aeabi_ui2f>:
    a1cc:	b510      	push	{r4, lr}
    a1ce:	1e04      	subs	r4, r0, #0
    a1d0:	d027      	beq.n	a222 <__aeabi_ui2f+0x56>
    a1d2:	f001 fec5 	bl	bf60 <__clzsi2>
    a1d6:	239e      	movs	r3, #158	; 0x9e
    a1d8:	1a1b      	subs	r3, r3, r0
    a1da:	2b96      	cmp	r3, #150	; 0x96
    a1dc:	dc0a      	bgt.n	a1f4 <__aeabi_ui2f+0x28>
    a1de:	2296      	movs	r2, #150	; 0x96
    a1e0:	1ad2      	subs	r2, r2, r3
    a1e2:	4094      	lsls	r4, r2
    a1e4:	0264      	lsls	r4, r4, #9
    a1e6:	0a64      	lsrs	r4, r4, #9
    a1e8:	b2db      	uxtb	r3, r3
    a1ea:	0264      	lsls	r4, r4, #9
    a1ec:	05db      	lsls	r3, r3, #23
    a1ee:	0a60      	lsrs	r0, r4, #9
    a1f0:	4318      	orrs	r0, r3
    a1f2:	bd10      	pop	{r4, pc}
    a1f4:	2b99      	cmp	r3, #153	; 0x99
    a1f6:	dc17      	bgt.n	a228 <__aeabi_ui2f+0x5c>
    a1f8:	2299      	movs	r2, #153	; 0x99
    a1fa:	1ad2      	subs	r2, r2, r3
    a1fc:	2a00      	cmp	r2, #0
    a1fe:	dd27      	ble.n	a250 <__aeabi_ui2f+0x84>
    a200:	4094      	lsls	r4, r2
    a202:	0022      	movs	r2, r4
    a204:	4c13      	ldr	r4, [pc, #76]	; (a254 <__aeabi_ui2f+0x88>)
    a206:	4014      	ands	r4, r2
    a208:	0751      	lsls	r1, r2, #29
    a20a:	d004      	beq.n	a216 <__aeabi_ui2f+0x4a>
    a20c:	210f      	movs	r1, #15
    a20e:	400a      	ands	r2, r1
    a210:	2a04      	cmp	r2, #4
    a212:	d000      	beq.n	a216 <__aeabi_ui2f+0x4a>
    a214:	3404      	adds	r4, #4
    a216:	0162      	lsls	r2, r4, #5
    a218:	d412      	bmi.n	a240 <__aeabi_ui2f+0x74>
    a21a:	01a4      	lsls	r4, r4, #6
    a21c:	0a64      	lsrs	r4, r4, #9
    a21e:	b2db      	uxtb	r3, r3
    a220:	e7e3      	b.n	a1ea <__aeabi_ui2f+0x1e>
    a222:	2300      	movs	r3, #0
    a224:	2400      	movs	r4, #0
    a226:	e7e0      	b.n	a1ea <__aeabi_ui2f+0x1e>
    a228:	22b9      	movs	r2, #185	; 0xb9
    a22a:	0021      	movs	r1, r4
    a22c:	1ad2      	subs	r2, r2, r3
    a22e:	4091      	lsls	r1, r2
    a230:	000a      	movs	r2, r1
    a232:	1e51      	subs	r1, r2, #1
    a234:	418a      	sbcs	r2, r1
    a236:	2105      	movs	r1, #5
    a238:	1a09      	subs	r1, r1, r0
    a23a:	40cc      	lsrs	r4, r1
    a23c:	4314      	orrs	r4, r2
    a23e:	e7db      	b.n	a1f8 <__aeabi_ui2f+0x2c>
    a240:	4b04      	ldr	r3, [pc, #16]	; (a254 <__aeabi_ui2f+0x88>)
    a242:	401c      	ands	r4, r3
    a244:	239f      	movs	r3, #159	; 0x9f
    a246:	01a4      	lsls	r4, r4, #6
    a248:	1a1b      	subs	r3, r3, r0
    a24a:	0a64      	lsrs	r4, r4, #9
    a24c:	b2db      	uxtb	r3, r3
    a24e:	e7cc      	b.n	a1ea <__aeabi_ui2f+0x1e>
    a250:	0022      	movs	r2, r4
    a252:	e7d7      	b.n	a204 <__aeabi_ui2f+0x38>
    a254:	fbffffff 	.word	0xfbffffff

0000a258 <__aeabi_dadd>:
    a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a25a:	4645      	mov	r5, r8
    a25c:	46de      	mov	lr, fp
    a25e:	4657      	mov	r7, sl
    a260:	464e      	mov	r6, r9
    a262:	030c      	lsls	r4, r1, #12
    a264:	b5e0      	push	{r5, r6, r7, lr}
    a266:	004e      	lsls	r6, r1, #1
    a268:	0fc9      	lsrs	r1, r1, #31
    a26a:	4688      	mov	r8, r1
    a26c:	000d      	movs	r5, r1
    a26e:	0a61      	lsrs	r1, r4, #9
    a270:	0f44      	lsrs	r4, r0, #29
    a272:	430c      	orrs	r4, r1
    a274:	00c7      	lsls	r7, r0, #3
    a276:	0319      	lsls	r1, r3, #12
    a278:	0058      	lsls	r0, r3, #1
    a27a:	0fdb      	lsrs	r3, r3, #31
    a27c:	469b      	mov	fp, r3
    a27e:	0a4b      	lsrs	r3, r1, #9
    a280:	0f51      	lsrs	r1, r2, #29
    a282:	430b      	orrs	r3, r1
    a284:	0d76      	lsrs	r6, r6, #21
    a286:	0d40      	lsrs	r0, r0, #21
    a288:	0019      	movs	r1, r3
    a28a:	00d2      	lsls	r2, r2, #3
    a28c:	45d8      	cmp	r8, fp
    a28e:	d100      	bne.n	a292 <__aeabi_dadd+0x3a>
    a290:	e0ae      	b.n	a3f0 <__aeabi_dadd+0x198>
    a292:	1a35      	subs	r5, r6, r0
    a294:	2d00      	cmp	r5, #0
    a296:	dc00      	bgt.n	a29a <__aeabi_dadd+0x42>
    a298:	e0f6      	b.n	a488 <__aeabi_dadd+0x230>
    a29a:	2800      	cmp	r0, #0
    a29c:	d10f      	bne.n	a2be <__aeabi_dadd+0x66>
    a29e:	4313      	orrs	r3, r2
    a2a0:	d100      	bne.n	a2a4 <__aeabi_dadd+0x4c>
    a2a2:	e0db      	b.n	a45c <__aeabi_dadd+0x204>
    a2a4:	1e6b      	subs	r3, r5, #1
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d000      	beq.n	a2ac <__aeabi_dadd+0x54>
    a2aa:	e137      	b.n	a51c <__aeabi_dadd+0x2c4>
    a2ac:	1aba      	subs	r2, r7, r2
    a2ae:	4297      	cmp	r7, r2
    a2b0:	41bf      	sbcs	r7, r7
    a2b2:	1a64      	subs	r4, r4, r1
    a2b4:	427f      	negs	r7, r7
    a2b6:	1be4      	subs	r4, r4, r7
    a2b8:	2601      	movs	r6, #1
    a2ba:	0017      	movs	r7, r2
    a2bc:	e024      	b.n	a308 <__aeabi_dadd+0xb0>
    a2be:	4bc6      	ldr	r3, [pc, #792]	; (a5d8 <__aeabi_dadd+0x380>)
    a2c0:	429e      	cmp	r6, r3
    a2c2:	d04d      	beq.n	a360 <__aeabi_dadd+0x108>
    a2c4:	2380      	movs	r3, #128	; 0x80
    a2c6:	041b      	lsls	r3, r3, #16
    a2c8:	4319      	orrs	r1, r3
    a2ca:	2d38      	cmp	r5, #56	; 0x38
    a2cc:	dd00      	ble.n	a2d0 <__aeabi_dadd+0x78>
    a2ce:	e107      	b.n	a4e0 <__aeabi_dadd+0x288>
    a2d0:	2d1f      	cmp	r5, #31
    a2d2:	dd00      	ble.n	a2d6 <__aeabi_dadd+0x7e>
    a2d4:	e138      	b.n	a548 <__aeabi_dadd+0x2f0>
    a2d6:	2020      	movs	r0, #32
    a2d8:	1b43      	subs	r3, r0, r5
    a2da:	469a      	mov	sl, r3
    a2dc:	000b      	movs	r3, r1
    a2de:	4650      	mov	r0, sl
    a2e0:	4083      	lsls	r3, r0
    a2e2:	4699      	mov	r9, r3
    a2e4:	0013      	movs	r3, r2
    a2e6:	4648      	mov	r0, r9
    a2e8:	40eb      	lsrs	r3, r5
    a2ea:	4318      	orrs	r0, r3
    a2ec:	0003      	movs	r3, r0
    a2ee:	4650      	mov	r0, sl
    a2f0:	4082      	lsls	r2, r0
    a2f2:	1e50      	subs	r0, r2, #1
    a2f4:	4182      	sbcs	r2, r0
    a2f6:	40e9      	lsrs	r1, r5
    a2f8:	431a      	orrs	r2, r3
    a2fa:	1aba      	subs	r2, r7, r2
    a2fc:	1a61      	subs	r1, r4, r1
    a2fe:	4297      	cmp	r7, r2
    a300:	41a4      	sbcs	r4, r4
    a302:	0017      	movs	r7, r2
    a304:	4264      	negs	r4, r4
    a306:	1b0c      	subs	r4, r1, r4
    a308:	0223      	lsls	r3, r4, #8
    a30a:	d562      	bpl.n	a3d2 <__aeabi_dadd+0x17a>
    a30c:	0264      	lsls	r4, r4, #9
    a30e:	0a65      	lsrs	r5, r4, #9
    a310:	2d00      	cmp	r5, #0
    a312:	d100      	bne.n	a316 <__aeabi_dadd+0xbe>
    a314:	e0df      	b.n	a4d6 <__aeabi_dadd+0x27e>
    a316:	0028      	movs	r0, r5
    a318:	f001 fe22 	bl	bf60 <__clzsi2>
    a31c:	0003      	movs	r3, r0
    a31e:	3b08      	subs	r3, #8
    a320:	2b1f      	cmp	r3, #31
    a322:	dd00      	ble.n	a326 <__aeabi_dadd+0xce>
    a324:	e0d2      	b.n	a4cc <__aeabi_dadd+0x274>
    a326:	2220      	movs	r2, #32
    a328:	003c      	movs	r4, r7
    a32a:	1ad2      	subs	r2, r2, r3
    a32c:	409d      	lsls	r5, r3
    a32e:	40d4      	lsrs	r4, r2
    a330:	409f      	lsls	r7, r3
    a332:	4325      	orrs	r5, r4
    a334:	429e      	cmp	r6, r3
    a336:	dd00      	ble.n	a33a <__aeabi_dadd+0xe2>
    a338:	e0c4      	b.n	a4c4 <__aeabi_dadd+0x26c>
    a33a:	1b9e      	subs	r6, r3, r6
    a33c:	1c73      	adds	r3, r6, #1
    a33e:	2b1f      	cmp	r3, #31
    a340:	dd00      	ble.n	a344 <__aeabi_dadd+0xec>
    a342:	e0f1      	b.n	a528 <__aeabi_dadd+0x2d0>
    a344:	2220      	movs	r2, #32
    a346:	0038      	movs	r0, r7
    a348:	0029      	movs	r1, r5
    a34a:	1ad2      	subs	r2, r2, r3
    a34c:	40d8      	lsrs	r0, r3
    a34e:	4091      	lsls	r1, r2
    a350:	4097      	lsls	r7, r2
    a352:	002c      	movs	r4, r5
    a354:	4301      	orrs	r1, r0
    a356:	1e78      	subs	r0, r7, #1
    a358:	4187      	sbcs	r7, r0
    a35a:	40dc      	lsrs	r4, r3
    a35c:	2600      	movs	r6, #0
    a35e:	430f      	orrs	r7, r1
    a360:	077b      	lsls	r3, r7, #29
    a362:	d009      	beq.n	a378 <__aeabi_dadd+0x120>
    a364:	230f      	movs	r3, #15
    a366:	403b      	ands	r3, r7
    a368:	2b04      	cmp	r3, #4
    a36a:	d005      	beq.n	a378 <__aeabi_dadd+0x120>
    a36c:	1d3b      	adds	r3, r7, #4
    a36e:	42bb      	cmp	r3, r7
    a370:	41bf      	sbcs	r7, r7
    a372:	427f      	negs	r7, r7
    a374:	19e4      	adds	r4, r4, r7
    a376:	001f      	movs	r7, r3
    a378:	0223      	lsls	r3, r4, #8
    a37a:	d52c      	bpl.n	a3d6 <__aeabi_dadd+0x17e>
    a37c:	4b96      	ldr	r3, [pc, #600]	; (a5d8 <__aeabi_dadd+0x380>)
    a37e:	3601      	adds	r6, #1
    a380:	429e      	cmp	r6, r3
    a382:	d100      	bne.n	a386 <__aeabi_dadd+0x12e>
    a384:	e09a      	b.n	a4bc <__aeabi_dadd+0x264>
    a386:	4645      	mov	r5, r8
    a388:	4b94      	ldr	r3, [pc, #592]	; (a5dc <__aeabi_dadd+0x384>)
    a38a:	08ff      	lsrs	r7, r7, #3
    a38c:	401c      	ands	r4, r3
    a38e:	0760      	lsls	r0, r4, #29
    a390:	0576      	lsls	r6, r6, #21
    a392:	0264      	lsls	r4, r4, #9
    a394:	4307      	orrs	r7, r0
    a396:	0b24      	lsrs	r4, r4, #12
    a398:	0d76      	lsrs	r6, r6, #21
    a39a:	2100      	movs	r1, #0
    a39c:	0324      	lsls	r4, r4, #12
    a39e:	0b23      	lsrs	r3, r4, #12
    a3a0:	0d0c      	lsrs	r4, r1, #20
    a3a2:	4a8f      	ldr	r2, [pc, #572]	; (a5e0 <__aeabi_dadd+0x388>)
    a3a4:	0524      	lsls	r4, r4, #20
    a3a6:	431c      	orrs	r4, r3
    a3a8:	4014      	ands	r4, r2
    a3aa:	0533      	lsls	r3, r6, #20
    a3ac:	4323      	orrs	r3, r4
    a3ae:	005b      	lsls	r3, r3, #1
    a3b0:	07ed      	lsls	r5, r5, #31
    a3b2:	085b      	lsrs	r3, r3, #1
    a3b4:	432b      	orrs	r3, r5
    a3b6:	0038      	movs	r0, r7
    a3b8:	0019      	movs	r1, r3
    a3ba:	bc3c      	pop	{r2, r3, r4, r5}
    a3bc:	4690      	mov	r8, r2
    a3be:	4699      	mov	r9, r3
    a3c0:	46a2      	mov	sl, r4
    a3c2:	46ab      	mov	fp, r5
    a3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3c6:	4664      	mov	r4, ip
    a3c8:	4304      	orrs	r4, r0
    a3ca:	d100      	bne.n	a3ce <__aeabi_dadd+0x176>
    a3cc:	e211      	b.n	a7f2 <__aeabi_dadd+0x59a>
    a3ce:	0004      	movs	r4, r0
    a3d0:	4667      	mov	r7, ip
    a3d2:	077b      	lsls	r3, r7, #29
    a3d4:	d1c6      	bne.n	a364 <__aeabi_dadd+0x10c>
    a3d6:	4645      	mov	r5, r8
    a3d8:	0760      	lsls	r0, r4, #29
    a3da:	08ff      	lsrs	r7, r7, #3
    a3dc:	4307      	orrs	r7, r0
    a3de:	08e4      	lsrs	r4, r4, #3
    a3e0:	4b7d      	ldr	r3, [pc, #500]	; (a5d8 <__aeabi_dadd+0x380>)
    a3e2:	429e      	cmp	r6, r3
    a3e4:	d030      	beq.n	a448 <__aeabi_dadd+0x1f0>
    a3e6:	0324      	lsls	r4, r4, #12
    a3e8:	0576      	lsls	r6, r6, #21
    a3ea:	0b24      	lsrs	r4, r4, #12
    a3ec:	0d76      	lsrs	r6, r6, #21
    a3ee:	e7d4      	b.n	a39a <__aeabi_dadd+0x142>
    a3f0:	1a33      	subs	r3, r6, r0
    a3f2:	469a      	mov	sl, r3
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	dd78      	ble.n	a4ea <__aeabi_dadd+0x292>
    a3f8:	2800      	cmp	r0, #0
    a3fa:	d031      	beq.n	a460 <__aeabi_dadd+0x208>
    a3fc:	4876      	ldr	r0, [pc, #472]	; (a5d8 <__aeabi_dadd+0x380>)
    a3fe:	4286      	cmp	r6, r0
    a400:	d0ae      	beq.n	a360 <__aeabi_dadd+0x108>
    a402:	2080      	movs	r0, #128	; 0x80
    a404:	0400      	lsls	r0, r0, #16
    a406:	4301      	orrs	r1, r0
    a408:	4653      	mov	r3, sl
    a40a:	2b38      	cmp	r3, #56	; 0x38
    a40c:	dc00      	bgt.n	a410 <__aeabi_dadd+0x1b8>
    a40e:	e0e9      	b.n	a5e4 <__aeabi_dadd+0x38c>
    a410:	430a      	orrs	r2, r1
    a412:	1e51      	subs	r1, r2, #1
    a414:	418a      	sbcs	r2, r1
    a416:	2100      	movs	r1, #0
    a418:	19d2      	adds	r2, r2, r7
    a41a:	42ba      	cmp	r2, r7
    a41c:	41bf      	sbcs	r7, r7
    a41e:	1909      	adds	r1, r1, r4
    a420:	427c      	negs	r4, r7
    a422:	0017      	movs	r7, r2
    a424:	190c      	adds	r4, r1, r4
    a426:	0223      	lsls	r3, r4, #8
    a428:	d5d3      	bpl.n	a3d2 <__aeabi_dadd+0x17a>
    a42a:	4b6b      	ldr	r3, [pc, #428]	; (a5d8 <__aeabi_dadd+0x380>)
    a42c:	3601      	adds	r6, #1
    a42e:	429e      	cmp	r6, r3
    a430:	d100      	bne.n	a434 <__aeabi_dadd+0x1dc>
    a432:	e13a      	b.n	a6aa <__aeabi_dadd+0x452>
    a434:	2001      	movs	r0, #1
    a436:	4b69      	ldr	r3, [pc, #420]	; (a5dc <__aeabi_dadd+0x384>)
    a438:	401c      	ands	r4, r3
    a43a:	087b      	lsrs	r3, r7, #1
    a43c:	4007      	ands	r7, r0
    a43e:	431f      	orrs	r7, r3
    a440:	07e0      	lsls	r0, r4, #31
    a442:	4307      	orrs	r7, r0
    a444:	0864      	lsrs	r4, r4, #1
    a446:	e78b      	b.n	a360 <__aeabi_dadd+0x108>
    a448:	0023      	movs	r3, r4
    a44a:	433b      	orrs	r3, r7
    a44c:	d100      	bne.n	a450 <__aeabi_dadd+0x1f8>
    a44e:	e1cb      	b.n	a7e8 <__aeabi_dadd+0x590>
    a450:	2280      	movs	r2, #128	; 0x80
    a452:	0312      	lsls	r2, r2, #12
    a454:	4314      	orrs	r4, r2
    a456:	0324      	lsls	r4, r4, #12
    a458:	0b24      	lsrs	r4, r4, #12
    a45a:	e79e      	b.n	a39a <__aeabi_dadd+0x142>
    a45c:	002e      	movs	r6, r5
    a45e:	e77f      	b.n	a360 <__aeabi_dadd+0x108>
    a460:	0008      	movs	r0, r1
    a462:	4310      	orrs	r0, r2
    a464:	d100      	bne.n	a468 <__aeabi_dadd+0x210>
    a466:	e0b4      	b.n	a5d2 <__aeabi_dadd+0x37a>
    a468:	1e58      	subs	r0, r3, #1
    a46a:	2800      	cmp	r0, #0
    a46c:	d000      	beq.n	a470 <__aeabi_dadd+0x218>
    a46e:	e0de      	b.n	a62e <__aeabi_dadd+0x3d6>
    a470:	18ba      	adds	r2, r7, r2
    a472:	42ba      	cmp	r2, r7
    a474:	419b      	sbcs	r3, r3
    a476:	1864      	adds	r4, r4, r1
    a478:	425b      	negs	r3, r3
    a47a:	18e4      	adds	r4, r4, r3
    a47c:	0017      	movs	r7, r2
    a47e:	2601      	movs	r6, #1
    a480:	0223      	lsls	r3, r4, #8
    a482:	d5a6      	bpl.n	a3d2 <__aeabi_dadd+0x17a>
    a484:	2602      	movs	r6, #2
    a486:	e7d5      	b.n	a434 <__aeabi_dadd+0x1dc>
    a488:	2d00      	cmp	r5, #0
    a48a:	d16e      	bne.n	a56a <__aeabi_dadd+0x312>
    a48c:	1c70      	adds	r0, r6, #1
    a48e:	0540      	lsls	r0, r0, #21
    a490:	0d40      	lsrs	r0, r0, #21
    a492:	2801      	cmp	r0, #1
    a494:	dc00      	bgt.n	a498 <__aeabi_dadd+0x240>
    a496:	e0f9      	b.n	a68c <__aeabi_dadd+0x434>
    a498:	1ab8      	subs	r0, r7, r2
    a49a:	4684      	mov	ip, r0
    a49c:	4287      	cmp	r7, r0
    a49e:	4180      	sbcs	r0, r0
    a4a0:	1ae5      	subs	r5, r4, r3
    a4a2:	4240      	negs	r0, r0
    a4a4:	1a2d      	subs	r5, r5, r0
    a4a6:	0228      	lsls	r0, r5, #8
    a4a8:	d400      	bmi.n	a4ac <__aeabi_dadd+0x254>
    a4aa:	e089      	b.n	a5c0 <__aeabi_dadd+0x368>
    a4ac:	1bd7      	subs	r7, r2, r7
    a4ae:	42ba      	cmp	r2, r7
    a4b0:	4192      	sbcs	r2, r2
    a4b2:	1b1c      	subs	r4, r3, r4
    a4b4:	4252      	negs	r2, r2
    a4b6:	1aa5      	subs	r5, r4, r2
    a4b8:	46d8      	mov	r8, fp
    a4ba:	e729      	b.n	a310 <__aeabi_dadd+0xb8>
    a4bc:	4645      	mov	r5, r8
    a4be:	2400      	movs	r4, #0
    a4c0:	2700      	movs	r7, #0
    a4c2:	e76a      	b.n	a39a <__aeabi_dadd+0x142>
    a4c4:	4c45      	ldr	r4, [pc, #276]	; (a5dc <__aeabi_dadd+0x384>)
    a4c6:	1af6      	subs	r6, r6, r3
    a4c8:	402c      	ands	r4, r5
    a4ca:	e749      	b.n	a360 <__aeabi_dadd+0x108>
    a4cc:	003d      	movs	r5, r7
    a4ce:	3828      	subs	r0, #40	; 0x28
    a4d0:	4085      	lsls	r5, r0
    a4d2:	2700      	movs	r7, #0
    a4d4:	e72e      	b.n	a334 <__aeabi_dadd+0xdc>
    a4d6:	0038      	movs	r0, r7
    a4d8:	f001 fd42 	bl	bf60 <__clzsi2>
    a4dc:	3020      	adds	r0, #32
    a4de:	e71d      	b.n	a31c <__aeabi_dadd+0xc4>
    a4e0:	430a      	orrs	r2, r1
    a4e2:	1e51      	subs	r1, r2, #1
    a4e4:	418a      	sbcs	r2, r1
    a4e6:	2100      	movs	r1, #0
    a4e8:	e707      	b.n	a2fa <__aeabi_dadd+0xa2>
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d000      	beq.n	a4f0 <__aeabi_dadd+0x298>
    a4ee:	e0f3      	b.n	a6d8 <__aeabi_dadd+0x480>
    a4f0:	1c70      	adds	r0, r6, #1
    a4f2:	0543      	lsls	r3, r0, #21
    a4f4:	0d5b      	lsrs	r3, r3, #21
    a4f6:	2b01      	cmp	r3, #1
    a4f8:	dc00      	bgt.n	a4fc <__aeabi_dadd+0x2a4>
    a4fa:	e0ad      	b.n	a658 <__aeabi_dadd+0x400>
    a4fc:	4b36      	ldr	r3, [pc, #216]	; (a5d8 <__aeabi_dadd+0x380>)
    a4fe:	4298      	cmp	r0, r3
    a500:	d100      	bne.n	a504 <__aeabi_dadd+0x2ac>
    a502:	e0d1      	b.n	a6a8 <__aeabi_dadd+0x450>
    a504:	18ba      	adds	r2, r7, r2
    a506:	42ba      	cmp	r2, r7
    a508:	41bf      	sbcs	r7, r7
    a50a:	1864      	adds	r4, r4, r1
    a50c:	427f      	negs	r7, r7
    a50e:	19e4      	adds	r4, r4, r7
    a510:	07e7      	lsls	r7, r4, #31
    a512:	0852      	lsrs	r2, r2, #1
    a514:	4317      	orrs	r7, r2
    a516:	0864      	lsrs	r4, r4, #1
    a518:	0006      	movs	r6, r0
    a51a:	e721      	b.n	a360 <__aeabi_dadd+0x108>
    a51c:	482e      	ldr	r0, [pc, #184]	; (a5d8 <__aeabi_dadd+0x380>)
    a51e:	4285      	cmp	r5, r0
    a520:	d100      	bne.n	a524 <__aeabi_dadd+0x2cc>
    a522:	e093      	b.n	a64c <__aeabi_dadd+0x3f4>
    a524:	001d      	movs	r5, r3
    a526:	e6d0      	b.n	a2ca <__aeabi_dadd+0x72>
    a528:	0029      	movs	r1, r5
    a52a:	3e1f      	subs	r6, #31
    a52c:	40f1      	lsrs	r1, r6
    a52e:	2b20      	cmp	r3, #32
    a530:	d100      	bne.n	a534 <__aeabi_dadd+0x2dc>
    a532:	e08d      	b.n	a650 <__aeabi_dadd+0x3f8>
    a534:	2240      	movs	r2, #64	; 0x40
    a536:	1ad3      	subs	r3, r2, r3
    a538:	409d      	lsls	r5, r3
    a53a:	432f      	orrs	r7, r5
    a53c:	1e7d      	subs	r5, r7, #1
    a53e:	41af      	sbcs	r7, r5
    a540:	2400      	movs	r4, #0
    a542:	430f      	orrs	r7, r1
    a544:	2600      	movs	r6, #0
    a546:	e744      	b.n	a3d2 <__aeabi_dadd+0x17a>
    a548:	002b      	movs	r3, r5
    a54a:	0008      	movs	r0, r1
    a54c:	3b20      	subs	r3, #32
    a54e:	40d8      	lsrs	r0, r3
    a550:	0003      	movs	r3, r0
    a552:	2d20      	cmp	r5, #32
    a554:	d100      	bne.n	a558 <__aeabi_dadd+0x300>
    a556:	e07d      	b.n	a654 <__aeabi_dadd+0x3fc>
    a558:	2040      	movs	r0, #64	; 0x40
    a55a:	1b45      	subs	r5, r0, r5
    a55c:	40a9      	lsls	r1, r5
    a55e:	430a      	orrs	r2, r1
    a560:	1e51      	subs	r1, r2, #1
    a562:	418a      	sbcs	r2, r1
    a564:	2100      	movs	r1, #0
    a566:	431a      	orrs	r2, r3
    a568:	e6c7      	b.n	a2fa <__aeabi_dadd+0xa2>
    a56a:	2e00      	cmp	r6, #0
    a56c:	d050      	beq.n	a610 <__aeabi_dadd+0x3b8>
    a56e:	4e1a      	ldr	r6, [pc, #104]	; (a5d8 <__aeabi_dadd+0x380>)
    a570:	42b0      	cmp	r0, r6
    a572:	d057      	beq.n	a624 <__aeabi_dadd+0x3cc>
    a574:	2680      	movs	r6, #128	; 0x80
    a576:	426b      	negs	r3, r5
    a578:	4699      	mov	r9, r3
    a57a:	0436      	lsls	r6, r6, #16
    a57c:	4334      	orrs	r4, r6
    a57e:	464b      	mov	r3, r9
    a580:	2b38      	cmp	r3, #56	; 0x38
    a582:	dd00      	ble.n	a586 <__aeabi_dadd+0x32e>
    a584:	e0d6      	b.n	a734 <__aeabi_dadd+0x4dc>
    a586:	2b1f      	cmp	r3, #31
    a588:	dd00      	ble.n	a58c <__aeabi_dadd+0x334>
    a58a:	e135      	b.n	a7f8 <__aeabi_dadd+0x5a0>
    a58c:	2620      	movs	r6, #32
    a58e:	1af5      	subs	r5, r6, r3
    a590:	0026      	movs	r6, r4
    a592:	40ae      	lsls	r6, r5
    a594:	46b2      	mov	sl, r6
    a596:	003e      	movs	r6, r7
    a598:	40de      	lsrs	r6, r3
    a59a:	46ac      	mov	ip, r5
    a59c:	0035      	movs	r5, r6
    a59e:	4656      	mov	r6, sl
    a5a0:	432e      	orrs	r6, r5
    a5a2:	4665      	mov	r5, ip
    a5a4:	40af      	lsls	r7, r5
    a5a6:	1e7d      	subs	r5, r7, #1
    a5a8:	41af      	sbcs	r7, r5
    a5aa:	40dc      	lsrs	r4, r3
    a5ac:	4337      	orrs	r7, r6
    a5ae:	1bd7      	subs	r7, r2, r7
    a5b0:	42ba      	cmp	r2, r7
    a5b2:	4192      	sbcs	r2, r2
    a5b4:	1b0c      	subs	r4, r1, r4
    a5b6:	4252      	negs	r2, r2
    a5b8:	1aa4      	subs	r4, r4, r2
    a5ba:	0006      	movs	r6, r0
    a5bc:	46d8      	mov	r8, fp
    a5be:	e6a3      	b.n	a308 <__aeabi_dadd+0xb0>
    a5c0:	4664      	mov	r4, ip
    a5c2:	4667      	mov	r7, ip
    a5c4:	432c      	orrs	r4, r5
    a5c6:	d000      	beq.n	a5ca <__aeabi_dadd+0x372>
    a5c8:	e6a2      	b.n	a310 <__aeabi_dadd+0xb8>
    a5ca:	2500      	movs	r5, #0
    a5cc:	2600      	movs	r6, #0
    a5ce:	2700      	movs	r7, #0
    a5d0:	e706      	b.n	a3e0 <__aeabi_dadd+0x188>
    a5d2:	001e      	movs	r6, r3
    a5d4:	e6c4      	b.n	a360 <__aeabi_dadd+0x108>
    a5d6:	46c0      	nop			; (mov r8, r8)
    a5d8:	000007ff 	.word	0x000007ff
    a5dc:	ff7fffff 	.word	0xff7fffff
    a5e0:	800fffff 	.word	0x800fffff
    a5e4:	2b1f      	cmp	r3, #31
    a5e6:	dc63      	bgt.n	a6b0 <__aeabi_dadd+0x458>
    a5e8:	2020      	movs	r0, #32
    a5ea:	1ac3      	subs	r3, r0, r3
    a5ec:	0008      	movs	r0, r1
    a5ee:	4098      	lsls	r0, r3
    a5f0:	469c      	mov	ip, r3
    a5f2:	4683      	mov	fp, r0
    a5f4:	4653      	mov	r3, sl
    a5f6:	0010      	movs	r0, r2
    a5f8:	40d8      	lsrs	r0, r3
    a5fa:	0003      	movs	r3, r0
    a5fc:	4658      	mov	r0, fp
    a5fe:	4318      	orrs	r0, r3
    a600:	4663      	mov	r3, ip
    a602:	409a      	lsls	r2, r3
    a604:	1e53      	subs	r3, r2, #1
    a606:	419a      	sbcs	r2, r3
    a608:	4653      	mov	r3, sl
    a60a:	4302      	orrs	r2, r0
    a60c:	40d9      	lsrs	r1, r3
    a60e:	e703      	b.n	a418 <__aeabi_dadd+0x1c0>
    a610:	0026      	movs	r6, r4
    a612:	433e      	orrs	r6, r7
    a614:	d006      	beq.n	a624 <__aeabi_dadd+0x3cc>
    a616:	43eb      	mvns	r3, r5
    a618:	4699      	mov	r9, r3
    a61a:	2b00      	cmp	r3, #0
    a61c:	d0c7      	beq.n	a5ae <__aeabi_dadd+0x356>
    a61e:	4e94      	ldr	r6, [pc, #592]	; (a870 <__aeabi_dadd+0x618>)
    a620:	42b0      	cmp	r0, r6
    a622:	d1ac      	bne.n	a57e <__aeabi_dadd+0x326>
    a624:	000c      	movs	r4, r1
    a626:	0017      	movs	r7, r2
    a628:	0006      	movs	r6, r0
    a62a:	46d8      	mov	r8, fp
    a62c:	e698      	b.n	a360 <__aeabi_dadd+0x108>
    a62e:	4b90      	ldr	r3, [pc, #576]	; (a870 <__aeabi_dadd+0x618>)
    a630:	459a      	cmp	sl, r3
    a632:	d00b      	beq.n	a64c <__aeabi_dadd+0x3f4>
    a634:	4682      	mov	sl, r0
    a636:	e6e7      	b.n	a408 <__aeabi_dadd+0x1b0>
    a638:	2800      	cmp	r0, #0
    a63a:	d000      	beq.n	a63e <__aeabi_dadd+0x3e6>
    a63c:	e09e      	b.n	a77c <__aeabi_dadd+0x524>
    a63e:	0018      	movs	r0, r3
    a640:	4310      	orrs	r0, r2
    a642:	d100      	bne.n	a646 <__aeabi_dadd+0x3ee>
    a644:	e0e9      	b.n	a81a <__aeabi_dadd+0x5c2>
    a646:	001c      	movs	r4, r3
    a648:	0017      	movs	r7, r2
    a64a:	46d8      	mov	r8, fp
    a64c:	4e88      	ldr	r6, [pc, #544]	; (a870 <__aeabi_dadd+0x618>)
    a64e:	e687      	b.n	a360 <__aeabi_dadd+0x108>
    a650:	2500      	movs	r5, #0
    a652:	e772      	b.n	a53a <__aeabi_dadd+0x2e2>
    a654:	2100      	movs	r1, #0
    a656:	e782      	b.n	a55e <__aeabi_dadd+0x306>
    a658:	0023      	movs	r3, r4
    a65a:	433b      	orrs	r3, r7
    a65c:	2e00      	cmp	r6, #0
    a65e:	d000      	beq.n	a662 <__aeabi_dadd+0x40a>
    a660:	e0ab      	b.n	a7ba <__aeabi_dadd+0x562>
    a662:	2b00      	cmp	r3, #0
    a664:	d100      	bne.n	a668 <__aeabi_dadd+0x410>
    a666:	e0e7      	b.n	a838 <__aeabi_dadd+0x5e0>
    a668:	000b      	movs	r3, r1
    a66a:	4313      	orrs	r3, r2
    a66c:	d100      	bne.n	a670 <__aeabi_dadd+0x418>
    a66e:	e677      	b.n	a360 <__aeabi_dadd+0x108>
    a670:	18ba      	adds	r2, r7, r2
    a672:	42ba      	cmp	r2, r7
    a674:	41bf      	sbcs	r7, r7
    a676:	1864      	adds	r4, r4, r1
    a678:	427f      	negs	r7, r7
    a67a:	19e4      	adds	r4, r4, r7
    a67c:	0223      	lsls	r3, r4, #8
    a67e:	d400      	bmi.n	a682 <__aeabi_dadd+0x42a>
    a680:	e0f2      	b.n	a868 <__aeabi_dadd+0x610>
    a682:	4b7c      	ldr	r3, [pc, #496]	; (a874 <__aeabi_dadd+0x61c>)
    a684:	0017      	movs	r7, r2
    a686:	401c      	ands	r4, r3
    a688:	0006      	movs	r6, r0
    a68a:	e669      	b.n	a360 <__aeabi_dadd+0x108>
    a68c:	0020      	movs	r0, r4
    a68e:	4338      	orrs	r0, r7
    a690:	2e00      	cmp	r6, #0
    a692:	d1d1      	bne.n	a638 <__aeabi_dadd+0x3e0>
    a694:	2800      	cmp	r0, #0
    a696:	d15b      	bne.n	a750 <__aeabi_dadd+0x4f8>
    a698:	001c      	movs	r4, r3
    a69a:	4314      	orrs	r4, r2
    a69c:	d100      	bne.n	a6a0 <__aeabi_dadd+0x448>
    a69e:	e0a8      	b.n	a7f2 <__aeabi_dadd+0x59a>
    a6a0:	001c      	movs	r4, r3
    a6a2:	0017      	movs	r7, r2
    a6a4:	46d8      	mov	r8, fp
    a6a6:	e65b      	b.n	a360 <__aeabi_dadd+0x108>
    a6a8:	0006      	movs	r6, r0
    a6aa:	2400      	movs	r4, #0
    a6ac:	2700      	movs	r7, #0
    a6ae:	e697      	b.n	a3e0 <__aeabi_dadd+0x188>
    a6b0:	4650      	mov	r0, sl
    a6b2:	000b      	movs	r3, r1
    a6b4:	3820      	subs	r0, #32
    a6b6:	40c3      	lsrs	r3, r0
    a6b8:	4699      	mov	r9, r3
    a6ba:	4653      	mov	r3, sl
    a6bc:	2b20      	cmp	r3, #32
    a6be:	d100      	bne.n	a6c2 <__aeabi_dadd+0x46a>
    a6c0:	e095      	b.n	a7ee <__aeabi_dadd+0x596>
    a6c2:	2340      	movs	r3, #64	; 0x40
    a6c4:	4650      	mov	r0, sl
    a6c6:	1a1b      	subs	r3, r3, r0
    a6c8:	4099      	lsls	r1, r3
    a6ca:	430a      	orrs	r2, r1
    a6cc:	1e51      	subs	r1, r2, #1
    a6ce:	418a      	sbcs	r2, r1
    a6d0:	464b      	mov	r3, r9
    a6d2:	2100      	movs	r1, #0
    a6d4:	431a      	orrs	r2, r3
    a6d6:	e69f      	b.n	a418 <__aeabi_dadd+0x1c0>
    a6d8:	2e00      	cmp	r6, #0
    a6da:	d130      	bne.n	a73e <__aeabi_dadd+0x4e6>
    a6dc:	0026      	movs	r6, r4
    a6de:	433e      	orrs	r6, r7
    a6e0:	d067      	beq.n	a7b2 <__aeabi_dadd+0x55a>
    a6e2:	43db      	mvns	r3, r3
    a6e4:	469a      	mov	sl, r3
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d01c      	beq.n	a724 <__aeabi_dadd+0x4cc>
    a6ea:	4e61      	ldr	r6, [pc, #388]	; (a870 <__aeabi_dadd+0x618>)
    a6ec:	42b0      	cmp	r0, r6
    a6ee:	d060      	beq.n	a7b2 <__aeabi_dadd+0x55a>
    a6f0:	4653      	mov	r3, sl
    a6f2:	2b38      	cmp	r3, #56	; 0x38
    a6f4:	dd00      	ble.n	a6f8 <__aeabi_dadd+0x4a0>
    a6f6:	e096      	b.n	a826 <__aeabi_dadd+0x5ce>
    a6f8:	2b1f      	cmp	r3, #31
    a6fa:	dd00      	ble.n	a6fe <__aeabi_dadd+0x4a6>
    a6fc:	e09f      	b.n	a83e <__aeabi_dadd+0x5e6>
    a6fe:	2620      	movs	r6, #32
    a700:	1af3      	subs	r3, r6, r3
    a702:	0026      	movs	r6, r4
    a704:	409e      	lsls	r6, r3
    a706:	469c      	mov	ip, r3
    a708:	46b3      	mov	fp, r6
    a70a:	4653      	mov	r3, sl
    a70c:	003e      	movs	r6, r7
    a70e:	40de      	lsrs	r6, r3
    a710:	0033      	movs	r3, r6
    a712:	465e      	mov	r6, fp
    a714:	431e      	orrs	r6, r3
    a716:	4663      	mov	r3, ip
    a718:	409f      	lsls	r7, r3
    a71a:	1e7b      	subs	r3, r7, #1
    a71c:	419f      	sbcs	r7, r3
    a71e:	4653      	mov	r3, sl
    a720:	40dc      	lsrs	r4, r3
    a722:	4337      	orrs	r7, r6
    a724:	18bf      	adds	r7, r7, r2
    a726:	4297      	cmp	r7, r2
    a728:	4192      	sbcs	r2, r2
    a72a:	1864      	adds	r4, r4, r1
    a72c:	4252      	negs	r2, r2
    a72e:	18a4      	adds	r4, r4, r2
    a730:	0006      	movs	r6, r0
    a732:	e678      	b.n	a426 <__aeabi_dadd+0x1ce>
    a734:	4327      	orrs	r7, r4
    a736:	1e7c      	subs	r4, r7, #1
    a738:	41a7      	sbcs	r7, r4
    a73a:	2400      	movs	r4, #0
    a73c:	e737      	b.n	a5ae <__aeabi_dadd+0x356>
    a73e:	4e4c      	ldr	r6, [pc, #304]	; (a870 <__aeabi_dadd+0x618>)
    a740:	42b0      	cmp	r0, r6
    a742:	d036      	beq.n	a7b2 <__aeabi_dadd+0x55a>
    a744:	2680      	movs	r6, #128	; 0x80
    a746:	425b      	negs	r3, r3
    a748:	0436      	lsls	r6, r6, #16
    a74a:	469a      	mov	sl, r3
    a74c:	4334      	orrs	r4, r6
    a74e:	e7cf      	b.n	a6f0 <__aeabi_dadd+0x498>
    a750:	0018      	movs	r0, r3
    a752:	4310      	orrs	r0, r2
    a754:	d100      	bne.n	a758 <__aeabi_dadd+0x500>
    a756:	e603      	b.n	a360 <__aeabi_dadd+0x108>
    a758:	1ab8      	subs	r0, r7, r2
    a75a:	4684      	mov	ip, r0
    a75c:	4567      	cmp	r7, ip
    a75e:	41ad      	sbcs	r5, r5
    a760:	1ae0      	subs	r0, r4, r3
    a762:	426d      	negs	r5, r5
    a764:	1b40      	subs	r0, r0, r5
    a766:	0205      	lsls	r5, r0, #8
    a768:	d400      	bmi.n	a76c <__aeabi_dadd+0x514>
    a76a:	e62c      	b.n	a3c6 <__aeabi_dadd+0x16e>
    a76c:	1bd7      	subs	r7, r2, r7
    a76e:	42ba      	cmp	r2, r7
    a770:	4192      	sbcs	r2, r2
    a772:	1b1c      	subs	r4, r3, r4
    a774:	4252      	negs	r2, r2
    a776:	1aa4      	subs	r4, r4, r2
    a778:	46d8      	mov	r8, fp
    a77a:	e5f1      	b.n	a360 <__aeabi_dadd+0x108>
    a77c:	0018      	movs	r0, r3
    a77e:	4310      	orrs	r0, r2
    a780:	d100      	bne.n	a784 <__aeabi_dadd+0x52c>
    a782:	e763      	b.n	a64c <__aeabi_dadd+0x3f4>
    a784:	08f8      	lsrs	r0, r7, #3
    a786:	0767      	lsls	r7, r4, #29
    a788:	4307      	orrs	r7, r0
    a78a:	2080      	movs	r0, #128	; 0x80
    a78c:	08e4      	lsrs	r4, r4, #3
    a78e:	0300      	lsls	r0, r0, #12
    a790:	4204      	tst	r4, r0
    a792:	d008      	beq.n	a7a6 <__aeabi_dadd+0x54e>
    a794:	08dd      	lsrs	r5, r3, #3
    a796:	4205      	tst	r5, r0
    a798:	d105      	bne.n	a7a6 <__aeabi_dadd+0x54e>
    a79a:	08d2      	lsrs	r2, r2, #3
    a79c:	0759      	lsls	r1, r3, #29
    a79e:	4311      	orrs	r1, r2
    a7a0:	000f      	movs	r7, r1
    a7a2:	002c      	movs	r4, r5
    a7a4:	46d8      	mov	r8, fp
    a7a6:	0f7b      	lsrs	r3, r7, #29
    a7a8:	00e4      	lsls	r4, r4, #3
    a7aa:	431c      	orrs	r4, r3
    a7ac:	00ff      	lsls	r7, r7, #3
    a7ae:	4e30      	ldr	r6, [pc, #192]	; (a870 <__aeabi_dadd+0x618>)
    a7b0:	e5d6      	b.n	a360 <__aeabi_dadd+0x108>
    a7b2:	000c      	movs	r4, r1
    a7b4:	0017      	movs	r7, r2
    a7b6:	0006      	movs	r6, r0
    a7b8:	e5d2      	b.n	a360 <__aeabi_dadd+0x108>
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d038      	beq.n	a830 <__aeabi_dadd+0x5d8>
    a7be:	000b      	movs	r3, r1
    a7c0:	4313      	orrs	r3, r2
    a7c2:	d100      	bne.n	a7c6 <__aeabi_dadd+0x56e>
    a7c4:	e742      	b.n	a64c <__aeabi_dadd+0x3f4>
    a7c6:	08f8      	lsrs	r0, r7, #3
    a7c8:	0767      	lsls	r7, r4, #29
    a7ca:	4307      	orrs	r7, r0
    a7cc:	2080      	movs	r0, #128	; 0x80
    a7ce:	08e4      	lsrs	r4, r4, #3
    a7d0:	0300      	lsls	r0, r0, #12
    a7d2:	4204      	tst	r4, r0
    a7d4:	d0e7      	beq.n	a7a6 <__aeabi_dadd+0x54e>
    a7d6:	08cb      	lsrs	r3, r1, #3
    a7d8:	4203      	tst	r3, r0
    a7da:	d1e4      	bne.n	a7a6 <__aeabi_dadd+0x54e>
    a7dc:	08d2      	lsrs	r2, r2, #3
    a7de:	0749      	lsls	r1, r1, #29
    a7e0:	4311      	orrs	r1, r2
    a7e2:	000f      	movs	r7, r1
    a7e4:	001c      	movs	r4, r3
    a7e6:	e7de      	b.n	a7a6 <__aeabi_dadd+0x54e>
    a7e8:	2700      	movs	r7, #0
    a7ea:	2400      	movs	r4, #0
    a7ec:	e5d5      	b.n	a39a <__aeabi_dadd+0x142>
    a7ee:	2100      	movs	r1, #0
    a7f0:	e76b      	b.n	a6ca <__aeabi_dadd+0x472>
    a7f2:	2500      	movs	r5, #0
    a7f4:	2700      	movs	r7, #0
    a7f6:	e5f3      	b.n	a3e0 <__aeabi_dadd+0x188>
    a7f8:	464e      	mov	r6, r9
    a7fa:	0025      	movs	r5, r4
    a7fc:	3e20      	subs	r6, #32
    a7fe:	40f5      	lsrs	r5, r6
    a800:	464b      	mov	r3, r9
    a802:	002e      	movs	r6, r5
    a804:	2b20      	cmp	r3, #32
    a806:	d02d      	beq.n	a864 <__aeabi_dadd+0x60c>
    a808:	2540      	movs	r5, #64	; 0x40
    a80a:	1aed      	subs	r5, r5, r3
    a80c:	40ac      	lsls	r4, r5
    a80e:	4327      	orrs	r7, r4
    a810:	1e7c      	subs	r4, r7, #1
    a812:	41a7      	sbcs	r7, r4
    a814:	2400      	movs	r4, #0
    a816:	4337      	orrs	r7, r6
    a818:	e6c9      	b.n	a5ae <__aeabi_dadd+0x356>
    a81a:	2480      	movs	r4, #128	; 0x80
    a81c:	2500      	movs	r5, #0
    a81e:	0324      	lsls	r4, r4, #12
    a820:	4e13      	ldr	r6, [pc, #76]	; (a870 <__aeabi_dadd+0x618>)
    a822:	2700      	movs	r7, #0
    a824:	e5dc      	b.n	a3e0 <__aeabi_dadd+0x188>
    a826:	4327      	orrs	r7, r4
    a828:	1e7c      	subs	r4, r7, #1
    a82a:	41a7      	sbcs	r7, r4
    a82c:	2400      	movs	r4, #0
    a82e:	e779      	b.n	a724 <__aeabi_dadd+0x4cc>
    a830:	000c      	movs	r4, r1
    a832:	0017      	movs	r7, r2
    a834:	4e0e      	ldr	r6, [pc, #56]	; (a870 <__aeabi_dadd+0x618>)
    a836:	e593      	b.n	a360 <__aeabi_dadd+0x108>
    a838:	000c      	movs	r4, r1
    a83a:	0017      	movs	r7, r2
    a83c:	e590      	b.n	a360 <__aeabi_dadd+0x108>
    a83e:	4656      	mov	r6, sl
    a840:	0023      	movs	r3, r4
    a842:	3e20      	subs	r6, #32
    a844:	40f3      	lsrs	r3, r6
    a846:	4699      	mov	r9, r3
    a848:	4653      	mov	r3, sl
    a84a:	2b20      	cmp	r3, #32
    a84c:	d00e      	beq.n	a86c <__aeabi_dadd+0x614>
    a84e:	2340      	movs	r3, #64	; 0x40
    a850:	4656      	mov	r6, sl
    a852:	1b9b      	subs	r3, r3, r6
    a854:	409c      	lsls	r4, r3
    a856:	4327      	orrs	r7, r4
    a858:	1e7c      	subs	r4, r7, #1
    a85a:	41a7      	sbcs	r7, r4
    a85c:	464b      	mov	r3, r9
    a85e:	2400      	movs	r4, #0
    a860:	431f      	orrs	r7, r3
    a862:	e75f      	b.n	a724 <__aeabi_dadd+0x4cc>
    a864:	2400      	movs	r4, #0
    a866:	e7d2      	b.n	a80e <__aeabi_dadd+0x5b6>
    a868:	0017      	movs	r7, r2
    a86a:	e5b2      	b.n	a3d2 <__aeabi_dadd+0x17a>
    a86c:	2400      	movs	r4, #0
    a86e:	e7f2      	b.n	a856 <__aeabi_dadd+0x5fe>
    a870:	000007ff 	.word	0x000007ff
    a874:	ff7fffff 	.word	0xff7fffff

0000a878 <__aeabi_ddiv>:
    a878:	b5f0      	push	{r4, r5, r6, r7, lr}
    a87a:	4657      	mov	r7, sl
    a87c:	4645      	mov	r5, r8
    a87e:	46de      	mov	lr, fp
    a880:	464e      	mov	r6, r9
    a882:	b5e0      	push	{r5, r6, r7, lr}
    a884:	004c      	lsls	r4, r1, #1
    a886:	030e      	lsls	r6, r1, #12
    a888:	b087      	sub	sp, #28
    a88a:	4683      	mov	fp, r0
    a88c:	4692      	mov	sl, r2
    a88e:	001d      	movs	r5, r3
    a890:	4680      	mov	r8, r0
    a892:	0b36      	lsrs	r6, r6, #12
    a894:	0d64      	lsrs	r4, r4, #21
    a896:	0fcf      	lsrs	r7, r1, #31
    a898:	2c00      	cmp	r4, #0
    a89a:	d04f      	beq.n	a93c <__aeabi_ddiv+0xc4>
    a89c:	4b6f      	ldr	r3, [pc, #444]	; (aa5c <__aeabi_ddiv+0x1e4>)
    a89e:	429c      	cmp	r4, r3
    a8a0:	d035      	beq.n	a90e <__aeabi_ddiv+0x96>
    a8a2:	2380      	movs	r3, #128	; 0x80
    a8a4:	0f42      	lsrs	r2, r0, #29
    a8a6:	041b      	lsls	r3, r3, #16
    a8a8:	00f6      	lsls	r6, r6, #3
    a8aa:	4313      	orrs	r3, r2
    a8ac:	4333      	orrs	r3, r6
    a8ae:	4699      	mov	r9, r3
    a8b0:	00c3      	lsls	r3, r0, #3
    a8b2:	4698      	mov	r8, r3
    a8b4:	4b6a      	ldr	r3, [pc, #424]	; (aa60 <__aeabi_ddiv+0x1e8>)
    a8b6:	2600      	movs	r6, #0
    a8b8:	469c      	mov	ip, r3
    a8ba:	2300      	movs	r3, #0
    a8bc:	4464      	add	r4, ip
    a8be:	9303      	str	r3, [sp, #12]
    a8c0:	032b      	lsls	r3, r5, #12
    a8c2:	0b1b      	lsrs	r3, r3, #12
    a8c4:	469b      	mov	fp, r3
    a8c6:	006b      	lsls	r3, r5, #1
    a8c8:	0fed      	lsrs	r5, r5, #31
    a8ca:	4650      	mov	r0, sl
    a8cc:	0d5b      	lsrs	r3, r3, #21
    a8ce:	9501      	str	r5, [sp, #4]
    a8d0:	d05e      	beq.n	a990 <__aeabi_ddiv+0x118>
    a8d2:	4a62      	ldr	r2, [pc, #392]	; (aa5c <__aeabi_ddiv+0x1e4>)
    a8d4:	4293      	cmp	r3, r2
    a8d6:	d053      	beq.n	a980 <__aeabi_ddiv+0x108>
    a8d8:	465a      	mov	r2, fp
    a8da:	00d1      	lsls	r1, r2, #3
    a8dc:	2280      	movs	r2, #128	; 0x80
    a8de:	0f40      	lsrs	r0, r0, #29
    a8e0:	0412      	lsls	r2, r2, #16
    a8e2:	4302      	orrs	r2, r0
    a8e4:	430a      	orrs	r2, r1
    a8e6:	4693      	mov	fp, r2
    a8e8:	4652      	mov	r2, sl
    a8ea:	00d1      	lsls	r1, r2, #3
    a8ec:	4a5c      	ldr	r2, [pc, #368]	; (aa60 <__aeabi_ddiv+0x1e8>)
    a8ee:	4694      	mov	ip, r2
    a8f0:	2200      	movs	r2, #0
    a8f2:	4463      	add	r3, ip
    a8f4:	0038      	movs	r0, r7
    a8f6:	4068      	eors	r0, r5
    a8f8:	4684      	mov	ip, r0
    a8fa:	9002      	str	r0, [sp, #8]
    a8fc:	1ae4      	subs	r4, r4, r3
    a8fe:	4316      	orrs	r6, r2
    a900:	2e0f      	cmp	r6, #15
    a902:	d900      	bls.n	a906 <__aeabi_ddiv+0x8e>
    a904:	e0b4      	b.n	aa70 <__aeabi_ddiv+0x1f8>
    a906:	4b57      	ldr	r3, [pc, #348]	; (aa64 <__aeabi_ddiv+0x1ec>)
    a908:	00b6      	lsls	r6, r6, #2
    a90a:	599b      	ldr	r3, [r3, r6]
    a90c:	469f      	mov	pc, r3
    a90e:	0003      	movs	r3, r0
    a910:	4333      	orrs	r3, r6
    a912:	4699      	mov	r9, r3
    a914:	d16c      	bne.n	a9f0 <__aeabi_ddiv+0x178>
    a916:	2300      	movs	r3, #0
    a918:	4698      	mov	r8, r3
    a91a:	3302      	adds	r3, #2
    a91c:	2608      	movs	r6, #8
    a91e:	9303      	str	r3, [sp, #12]
    a920:	e7ce      	b.n	a8c0 <__aeabi_ddiv+0x48>
    a922:	46cb      	mov	fp, r9
    a924:	4641      	mov	r1, r8
    a926:	9a03      	ldr	r2, [sp, #12]
    a928:	9701      	str	r7, [sp, #4]
    a92a:	2a02      	cmp	r2, #2
    a92c:	d165      	bne.n	a9fa <__aeabi_ddiv+0x182>
    a92e:	9b01      	ldr	r3, [sp, #4]
    a930:	4c4a      	ldr	r4, [pc, #296]	; (aa5c <__aeabi_ddiv+0x1e4>)
    a932:	469c      	mov	ip, r3
    a934:	2300      	movs	r3, #0
    a936:	2200      	movs	r2, #0
    a938:	4698      	mov	r8, r3
    a93a:	e06b      	b.n	aa14 <__aeabi_ddiv+0x19c>
    a93c:	0003      	movs	r3, r0
    a93e:	4333      	orrs	r3, r6
    a940:	4699      	mov	r9, r3
    a942:	d04e      	beq.n	a9e2 <__aeabi_ddiv+0x16a>
    a944:	2e00      	cmp	r6, #0
    a946:	d100      	bne.n	a94a <__aeabi_ddiv+0xd2>
    a948:	e1bc      	b.n	acc4 <__aeabi_ddiv+0x44c>
    a94a:	0030      	movs	r0, r6
    a94c:	f001 fb08 	bl	bf60 <__clzsi2>
    a950:	0003      	movs	r3, r0
    a952:	3b0b      	subs	r3, #11
    a954:	2b1c      	cmp	r3, #28
    a956:	dd00      	ble.n	a95a <__aeabi_ddiv+0xe2>
    a958:	e1ac      	b.n	acb4 <__aeabi_ddiv+0x43c>
    a95a:	221d      	movs	r2, #29
    a95c:	1ad3      	subs	r3, r2, r3
    a95e:	465a      	mov	r2, fp
    a960:	0001      	movs	r1, r0
    a962:	40da      	lsrs	r2, r3
    a964:	3908      	subs	r1, #8
    a966:	408e      	lsls	r6, r1
    a968:	0013      	movs	r3, r2
    a96a:	4333      	orrs	r3, r6
    a96c:	4699      	mov	r9, r3
    a96e:	465b      	mov	r3, fp
    a970:	408b      	lsls	r3, r1
    a972:	4698      	mov	r8, r3
    a974:	2300      	movs	r3, #0
    a976:	4c3c      	ldr	r4, [pc, #240]	; (aa68 <__aeabi_ddiv+0x1f0>)
    a978:	2600      	movs	r6, #0
    a97a:	1a24      	subs	r4, r4, r0
    a97c:	9303      	str	r3, [sp, #12]
    a97e:	e79f      	b.n	a8c0 <__aeabi_ddiv+0x48>
    a980:	4651      	mov	r1, sl
    a982:	465a      	mov	r2, fp
    a984:	4311      	orrs	r1, r2
    a986:	d129      	bne.n	a9dc <__aeabi_ddiv+0x164>
    a988:	2200      	movs	r2, #0
    a98a:	4693      	mov	fp, r2
    a98c:	3202      	adds	r2, #2
    a98e:	e7b1      	b.n	a8f4 <__aeabi_ddiv+0x7c>
    a990:	4659      	mov	r1, fp
    a992:	4301      	orrs	r1, r0
    a994:	d01e      	beq.n	a9d4 <__aeabi_ddiv+0x15c>
    a996:	465b      	mov	r3, fp
    a998:	2b00      	cmp	r3, #0
    a99a:	d100      	bne.n	a99e <__aeabi_ddiv+0x126>
    a99c:	e19e      	b.n	acdc <__aeabi_ddiv+0x464>
    a99e:	4658      	mov	r0, fp
    a9a0:	f001 fade 	bl	bf60 <__clzsi2>
    a9a4:	0003      	movs	r3, r0
    a9a6:	3b0b      	subs	r3, #11
    a9a8:	2b1c      	cmp	r3, #28
    a9aa:	dd00      	ble.n	a9ae <__aeabi_ddiv+0x136>
    a9ac:	e18f      	b.n	acce <__aeabi_ddiv+0x456>
    a9ae:	0002      	movs	r2, r0
    a9b0:	4659      	mov	r1, fp
    a9b2:	3a08      	subs	r2, #8
    a9b4:	4091      	lsls	r1, r2
    a9b6:	468b      	mov	fp, r1
    a9b8:	211d      	movs	r1, #29
    a9ba:	1acb      	subs	r3, r1, r3
    a9bc:	4651      	mov	r1, sl
    a9be:	40d9      	lsrs	r1, r3
    a9c0:	000b      	movs	r3, r1
    a9c2:	4659      	mov	r1, fp
    a9c4:	430b      	orrs	r3, r1
    a9c6:	4651      	mov	r1, sl
    a9c8:	469b      	mov	fp, r3
    a9ca:	4091      	lsls	r1, r2
    a9cc:	4b26      	ldr	r3, [pc, #152]	; (aa68 <__aeabi_ddiv+0x1f0>)
    a9ce:	2200      	movs	r2, #0
    a9d0:	1a1b      	subs	r3, r3, r0
    a9d2:	e78f      	b.n	a8f4 <__aeabi_ddiv+0x7c>
    a9d4:	2300      	movs	r3, #0
    a9d6:	2201      	movs	r2, #1
    a9d8:	469b      	mov	fp, r3
    a9da:	e78b      	b.n	a8f4 <__aeabi_ddiv+0x7c>
    a9dc:	4651      	mov	r1, sl
    a9de:	2203      	movs	r2, #3
    a9e0:	e788      	b.n	a8f4 <__aeabi_ddiv+0x7c>
    a9e2:	2300      	movs	r3, #0
    a9e4:	4698      	mov	r8, r3
    a9e6:	3301      	adds	r3, #1
    a9e8:	2604      	movs	r6, #4
    a9ea:	2400      	movs	r4, #0
    a9ec:	9303      	str	r3, [sp, #12]
    a9ee:	e767      	b.n	a8c0 <__aeabi_ddiv+0x48>
    a9f0:	2303      	movs	r3, #3
    a9f2:	46b1      	mov	r9, r6
    a9f4:	9303      	str	r3, [sp, #12]
    a9f6:	260c      	movs	r6, #12
    a9f8:	e762      	b.n	a8c0 <__aeabi_ddiv+0x48>
    a9fa:	2a03      	cmp	r2, #3
    a9fc:	d100      	bne.n	aa00 <__aeabi_ddiv+0x188>
    a9fe:	e25c      	b.n	aeba <__aeabi_ddiv+0x642>
    aa00:	9b01      	ldr	r3, [sp, #4]
    aa02:	2a01      	cmp	r2, #1
    aa04:	d000      	beq.n	aa08 <__aeabi_ddiv+0x190>
    aa06:	e1e4      	b.n	add2 <__aeabi_ddiv+0x55a>
    aa08:	4013      	ands	r3, r2
    aa0a:	469c      	mov	ip, r3
    aa0c:	2300      	movs	r3, #0
    aa0e:	2400      	movs	r4, #0
    aa10:	2200      	movs	r2, #0
    aa12:	4698      	mov	r8, r3
    aa14:	2100      	movs	r1, #0
    aa16:	0312      	lsls	r2, r2, #12
    aa18:	0b13      	lsrs	r3, r2, #12
    aa1a:	0d0a      	lsrs	r2, r1, #20
    aa1c:	0512      	lsls	r2, r2, #20
    aa1e:	431a      	orrs	r2, r3
    aa20:	0523      	lsls	r3, r4, #20
    aa22:	4c12      	ldr	r4, [pc, #72]	; (aa6c <__aeabi_ddiv+0x1f4>)
    aa24:	4640      	mov	r0, r8
    aa26:	4022      	ands	r2, r4
    aa28:	4313      	orrs	r3, r2
    aa2a:	4662      	mov	r2, ip
    aa2c:	005b      	lsls	r3, r3, #1
    aa2e:	07d2      	lsls	r2, r2, #31
    aa30:	085b      	lsrs	r3, r3, #1
    aa32:	4313      	orrs	r3, r2
    aa34:	0019      	movs	r1, r3
    aa36:	b007      	add	sp, #28
    aa38:	bc3c      	pop	{r2, r3, r4, r5}
    aa3a:	4690      	mov	r8, r2
    aa3c:	4699      	mov	r9, r3
    aa3e:	46a2      	mov	sl, r4
    aa40:	46ab      	mov	fp, r5
    aa42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa44:	2300      	movs	r3, #0
    aa46:	2280      	movs	r2, #128	; 0x80
    aa48:	469c      	mov	ip, r3
    aa4a:	0312      	lsls	r2, r2, #12
    aa4c:	4698      	mov	r8, r3
    aa4e:	4c03      	ldr	r4, [pc, #12]	; (aa5c <__aeabi_ddiv+0x1e4>)
    aa50:	e7e0      	b.n	aa14 <__aeabi_ddiv+0x19c>
    aa52:	2300      	movs	r3, #0
    aa54:	4c01      	ldr	r4, [pc, #4]	; (aa5c <__aeabi_ddiv+0x1e4>)
    aa56:	2200      	movs	r2, #0
    aa58:	4698      	mov	r8, r3
    aa5a:	e7db      	b.n	aa14 <__aeabi_ddiv+0x19c>
    aa5c:	000007ff 	.word	0x000007ff
    aa60:	fffffc01 	.word	0xfffffc01
    aa64:	000113c0 	.word	0x000113c0
    aa68:	fffffc0d 	.word	0xfffffc0d
    aa6c:	800fffff 	.word	0x800fffff
    aa70:	45d9      	cmp	r9, fp
    aa72:	d900      	bls.n	aa76 <__aeabi_ddiv+0x1fe>
    aa74:	e139      	b.n	acea <__aeabi_ddiv+0x472>
    aa76:	d100      	bne.n	aa7a <__aeabi_ddiv+0x202>
    aa78:	e134      	b.n	ace4 <__aeabi_ddiv+0x46c>
    aa7a:	2300      	movs	r3, #0
    aa7c:	4646      	mov	r6, r8
    aa7e:	464d      	mov	r5, r9
    aa80:	469a      	mov	sl, r3
    aa82:	3c01      	subs	r4, #1
    aa84:	465b      	mov	r3, fp
    aa86:	0e0a      	lsrs	r2, r1, #24
    aa88:	021b      	lsls	r3, r3, #8
    aa8a:	431a      	orrs	r2, r3
    aa8c:	020b      	lsls	r3, r1, #8
    aa8e:	0c17      	lsrs	r7, r2, #16
    aa90:	9303      	str	r3, [sp, #12]
    aa92:	0413      	lsls	r3, r2, #16
    aa94:	0c1b      	lsrs	r3, r3, #16
    aa96:	0039      	movs	r1, r7
    aa98:	0028      	movs	r0, r5
    aa9a:	4690      	mov	r8, r2
    aa9c:	9301      	str	r3, [sp, #4]
    aa9e:	f7fe f9d9 	bl	8e54 <__udivsi3>
    aaa2:	0002      	movs	r2, r0
    aaa4:	9b01      	ldr	r3, [sp, #4]
    aaa6:	4683      	mov	fp, r0
    aaa8:	435a      	muls	r2, r3
    aaaa:	0028      	movs	r0, r5
    aaac:	0039      	movs	r1, r7
    aaae:	4691      	mov	r9, r2
    aab0:	f7fe fa56 	bl	8f60 <__aeabi_uidivmod>
    aab4:	0c35      	lsrs	r5, r6, #16
    aab6:	0409      	lsls	r1, r1, #16
    aab8:	430d      	orrs	r5, r1
    aaba:	45a9      	cmp	r9, r5
    aabc:	d90d      	bls.n	aada <__aeabi_ddiv+0x262>
    aabe:	465b      	mov	r3, fp
    aac0:	4445      	add	r5, r8
    aac2:	3b01      	subs	r3, #1
    aac4:	45a8      	cmp	r8, r5
    aac6:	d900      	bls.n	aaca <__aeabi_ddiv+0x252>
    aac8:	e13a      	b.n	ad40 <__aeabi_ddiv+0x4c8>
    aaca:	45a9      	cmp	r9, r5
    aacc:	d800      	bhi.n	aad0 <__aeabi_ddiv+0x258>
    aace:	e137      	b.n	ad40 <__aeabi_ddiv+0x4c8>
    aad0:	2302      	movs	r3, #2
    aad2:	425b      	negs	r3, r3
    aad4:	469c      	mov	ip, r3
    aad6:	4445      	add	r5, r8
    aad8:	44e3      	add	fp, ip
    aada:	464b      	mov	r3, r9
    aadc:	1aeb      	subs	r3, r5, r3
    aade:	0039      	movs	r1, r7
    aae0:	0018      	movs	r0, r3
    aae2:	9304      	str	r3, [sp, #16]
    aae4:	f7fe f9b6 	bl	8e54 <__udivsi3>
    aae8:	9b01      	ldr	r3, [sp, #4]
    aaea:	0005      	movs	r5, r0
    aaec:	4343      	muls	r3, r0
    aaee:	0039      	movs	r1, r7
    aaf0:	9804      	ldr	r0, [sp, #16]
    aaf2:	4699      	mov	r9, r3
    aaf4:	f7fe fa34 	bl	8f60 <__aeabi_uidivmod>
    aaf8:	0433      	lsls	r3, r6, #16
    aafa:	0409      	lsls	r1, r1, #16
    aafc:	0c1b      	lsrs	r3, r3, #16
    aafe:	430b      	orrs	r3, r1
    ab00:	4599      	cmp	r9, r3
    ab02:	d909      	bls.n	ab18 <__aeabi_ddiv+0x2a0>
    ab04:	4443      	add	r3, r8
    ab06:	1e6a      	subs	r2, r5, #1
    ab08:	4598      	cmp	r8, r3
    ab0a:	d900      	bls.n	ab0e <__aeabi_ddiv+0x296>
    ab0c:	e11a      	b.n	ad44 <__aeabi_ddiv+0x4cc>
    ab0e:	4599      	cmp	r9, r3
    ab10:	d800      	bhi.n	ab14 <__aeabi_ddiv+0x29c>
    ab12:	e117      	b.n	ad44 <__aeabi_ddiv+0x4cc>
    ab14:	3d02      	subs	r5, #2
    ab16:	4443      	add	r3, r8
    ab18:	464a      	mov	r2, r9
    ab1a:	1a9b      	subs	r3, r3, r2
    ab1c:	465a      	mov	r2, fp
    ab1e:	0412      	lsls	r2, r2, #16
    ab20:	432a      	orrs	r2, r5
    ab22:	9903      	ldr	r1, [sp, #12]
    ab24:	4693      	mov	fp, r2
    ab26:	0c10      	lsrs	r0, r2, #16
    ab28:	0c0a      	lsrs	r2, r1, #16
    ab2a:	4691      	mov	r9, r2
    ab2c:	0409      	lsls	r1, r1, #16
    ab2e:	465a      	mov	r2, fp
    ab30:	0c09      	lsrs	r1, r1, #16
    ab32:	464e      	mov	r6, r9
    ab34:	000d      	movs	r5, r1
    ab36:	0412      	lsls	r2, r2, #16
    ab38:	0c12      	lsrs	r2, r2, #16
    ab3a:	4345      	muls	r5, r0
    ab3c:	9105      	str	r1, [sp, #20]
    ab3e:	4351      	muls	r1, r2
    ab40:	4372      	muls	r2, r6
    ab42:	4370      	muls	r0, r6
    ab44:	1952      	adds	r2, r2, r5
    ab46:	0c0e      	lsrs	r6, r1, #16
    ab48:	18b2      	adds	r2, r6, r2
    ab4a:	4295      	cmp	r5, r2
    ab4c:	d903      	bls.n	ab56 <__aeabi_ddiv+0x2de>
    ab4e:	2580      	movs	r5, #128	; 0x80
    ab50:	026d      	lsls	r5, r5, #9
    ab52:	46ac      	mov	ip, r5
    ab54:	4460      	add	r0, ip
    ab56:	0c15      	lsrs	r5, r2, #16
    ab58:	0409      	lsls	r1, r1, #16
    ab5a:	0412      	lsls	r2, r2, #16
    ab5c:	0c09      	lsrs	r1, r1, #16
    ab5e:	1828      	adds	r0, r5, r0
    ab60:	1852      	adds	r2, r2, r1
    ab62:	4283      	cmp	r3, r0
    ab64:	d200      	bcs.n	ab68 <__aeabi_ddiv+0x2f0>
    ab66:	e0ce      	b.n	ad06 <__aeabi_ddiv+0x48e>
    ab68:	d100      	bne.n	ab6c <__aeabi_ddiv+0x2f4>
    ab6a:	e0c8      	b.n	acfe <__aeabi_ddiv+0x486>
    ab6c:	1a1d      	subs	r5, r3, r0
    ab6e:	4653      	mov	r3, sl
    ab70:	1a9e      	subs	r6, r3, r2
    ab72:	45b2      	cmp	sl, r6
    ab74:	4192      	sbcs	r2, r2
    ab76:	4252      	negs	r2, r2
    ab78:	1aab      	subs	r3, r5, r2
    ab7a:	469a      	mov	sl, r3
    ab7c:	4598      	cmp	r8, r3
    ab7e:	d100      	bne.n	ab82 <__aeabi_ddiv+0x30a>
    ab80:	e117      	b.n	adb2 <__aeabi_ddiv+0x53a>
    ab82:	0039      	movs	r1, r7
    ab84:	0018      	movs	r0, r3
    ab86:	f7fe f965 	bl	8e54 <__udivsi3>
    ab8a:	9b01      	ldr	r3, [sp, #4]
    ab8c:	0005      	movs	r5, r0
    ab8e:	4343      	muls	r3, r0
    ab90:	0039      	movs	r1, r7
    ab92:	4650      	mov	r0, sl
    ab94:	9304      	str	r3, [sp, #16]
    ab96:	f7fe f9e3 	bl	8f60 <__aeabi_uidivmod>
    ab9a:	9804      	ldr	r0, [sp, #16]
    ab9c:	040b      	lsls	r3, r1, #16
    ab9e:	0c31      	lsrs	r1, r6, #16
    aba0:	4319      	orrs	r1, r3
    aba2:	4288      	cmp	r0, r1
    aba4:	d909      	bls.n	abba <__aeabi_ddiv+0x342>
    aba6:	4441      	add	r1, r8
    aba8:	1e6b      	subs	r3, r5, #1
    abaa:	4588      	cmp	r8, r1
    abac:	d900      	bls.n	abb0 <__aeabi_ddiv+0x338>
    abae:	e107      	b.n	adc0 <__aeabi_ddiv+0x548>
    abb0:	4288      	cmp	r0, r1
    abb2:	d800      	bhi.n	abb6 <__aeabi_ddiv+0x33e>
    abb4:	e104      	b.n	adc0 <__aeabi_ddiv+0x548>
    abb6:	3d02      	subs	r5, #2
    abb8:	4441      	add	r1, r8
    abba:	9b04      	ldr	r3, [sp, #16]
    abbc:	1acb      	subs	r3, r1, r3
    abbe:	0018      	movs	r0, r3
    abc0:	0039      	movs	r1, r7
    abc2:	9304      	str	r3, [sp, #16]
    abc4:	f7fe f946 	bl	8e54 <__udivsi3>
    abc8:	9b01      	ldr	r3, [sp, #4]
    abca:	4682      	mov	sl, r0
    abcc:	4343      	muls	r3, r0
    abce:	0039      	movs	r1, r7
    abd0:	9804      	ldr	r0, [sp, #16]
    abd2:	9301      	str	r3, [sp, #4]
    abd4:	f7fe f9c4 	bl	8f60 <__aeabi_uidivmod>
    abd8:	9801      	ldr	r0, [sp, #4]
    abda:	040b      	lsls	r3, r1, #16
    abdc:	0431      	lsls	r1, r6, #16
    abde:	0c09      	lsrs	r1, r1, #16
    abe0:	4319      	orrs	r1, r3
    abe2:	4288      	cmp	r0, r1
    abe4:	d90d      	bls.n	ac02 <__aeabi_ddiv+0x38a>
    abe6:	4653      	mov	r3, sl
    abe8:	4441      	add	r1, r8
    abea:	3b01      	subs	r3, #1
    abec:	4588      	cmp	r8, r1
    abee:	d900      	bls.n	abf2 <__aeabi_ddiv+0x37a>
    abf0:	e0e8      	b.n	adc4 <__aeabi_ddiv+0x54c>
    abf2:	4288      	cmp	r0, r1
    abf4:	d800      	bhi.n	abf8 <__aeabi_ddiv+0x380>
    abf6:	e0e5      	b.n	adc4 <__aeabi_ddiv+0x54c>
    abf8:	2302      	movs	r3, #2
    abfa:	425b      	negs	r3, r3
    abfc:	469c      	mov	ip, r3
    abfe:	4441      	add	r1, r8
    ac00:	44e2      	add	sl, ip
    ac02:	9b01      	ldr	r3, [sp, #4]
    ac04:	042d      	lsls	r5, r5, #16
    ac06:	1ace      	subs	r6, r1, r3
    ac08:	4651      	mov	r1, sl
    ac0a:	4329      	orrs	r1, r5
    ac0c:	9d05      	ldr	r5, [sp, #20]
    ac0e:	464f      	mov	r7, r9
    ac10:	002a      	movs	r2, r5
    ac12:	040b      	lsls	r3, r1, #16
    ac14:	0c08      	lsrs	r0, r1, #16
    ac16:	0c1b      	lsrs	r3, r3, #16
    ac18:	435a      	muls	r2, r3
    ac1a:	4345      	muls	r5, r0
    ac1c:	437b      	muls	r3, r7
    ac1e:	4378      	muls	r0, r7
    ac20:	195b      	adds	r3, r3, r5
    ac22:	0c17      	lsrs	r7, r2, #16
    ac24:	18fb      	adds	r3, r7, r3
    ac26:	429d      	cmp	r5, r3
    ac28:	d903      	bls.n	ac32 <__aeabi_ddiv+0x3ba>
    ac2a:	2580      	movs	r5, #128	; 0x80
    ac2c:	026d      	lsls	r5, r5, #9
    ac2e:	46ac      	mov	ip, r5
    ac30:	4460      	add	r0, ip
    ac32:	0c1d      	lsrs	r5, r3, #16
    ac34:	0412      	lsls	r2, r2, #16
    ac36:	041b      	lsls	r3, r3, #16
    ac38:	0c12      	lsrs	r2, r2, #16
    ac3a:	1828      	adds	r0, r5, r0
    ac3c:	189b      	adds	r3, r3, r2
    ac3e:	4286      	cmp	r6, r0
    ac40:	d200      	bcs.n	ac44 <__aeabi_ddiv+0x3cc>
    ac42:	e093      	b.n	ad6c <__aeabi_ddiv+0x4f4>
    ac44:	d100      	bne.n	ac48 <__aeabi_ddiv+0x3d0>
    ac46:	e08e      	b.n	ad66 <__aeabi_ddiv+0x4ee>
    ac48:	2301      	movs	r3, #1
    ac4a:	4319      	orrs	r1, r3
    ac4c:	4ba0      	ldr	r3, [pc, #640]	; (aed0 <__aeabi_ddiv+0x658>)
    ac4e:	18e3      	adds	r3, r4, r3
    ac50:	2b00      	cmp	r3, #0
    ac52:	dc00      	bgt.n	ac56 <__aeabi_ddiv+0x3de>
    ac54:	e099      	b.n	ad8a <__aeabi_ddiv+0x512>
    ac56:	074a      	lsls	r2, r1, #29
    ac58:	d000      	beq.n	ac5c <__aeabi_ddiv+0x3e4>
    ac5a:	e09e      	b.n	ad9a <__aeabi_ddiv+0x522>
    ac5c:	465a      	mov	r2, fp
    ac5e:	01d2      	lsls	r2, r2, #7
    ac60:	d506      	bpl.n	ac70 <__aeabi_ddiv+0x3f8>
    ac62:	465a      	mov	r2, fp
    ac64:	4b9b      	ldr	r3, [pc, #620]	; (aed4 <__aeabi_ddiv+0x65c>)
    ac66:	401a      	ands	r2, r3
    ac68:	2380      	movs	r3, #128	; 0x80
    ac6a:	4693      	mov	fp, r2
    ac6c:	00db      	lsls	r3, r3, #3
    ac6e:	18e3      	adds	r3, r4, r3
    ac70:	4a99      	ldr	r2, [pc, #612]	; (aed8 <__aeabi_ddiv+0x660>)
    ac72:	4293      	cmp	r3, r2
    ac74:	dd68      	ble.n	ad48 <__aeabi_ddiv+0x4d0>
    ac76:	2301      	movs	r3, #1
    ac78:	9a02      	ldr	r2, [sp, #8]
    ac7a:	4c98      	ldr	r4, [pc, #608]	; (aedc <__aeabi_ddiv+0x664>)
    ac7c:	401a      	ands	r2, r3
    ac7e:	2300      	movs	r3, #0
    ac80:	4694      	mov	ip, r2
    ac82:	4698      	mov	r8, r3
    ac84:	2200      	movs	r2, #0
    ac86:	e6c5      	b.n	aa14 <__aeabi_ddiv+0x19c>
    ac88:	2280      	movs	r2, #128	; 0x80
    ac8a:	464b      	mov	r3, r9
    ac8c:	0312      	lsls	r2, r2, #12
    ac8e:	4213      	tst	r3, r2
    ac90:	d00a      	beq.n	aca8 <__aeabi_ddiv+0x430>
    ac92:	465b      	mov	r3, fp
    ac94:	4213      	tst	r3, r2
    ac96:	d106      	bne.n	aca6 <__aeabi_ddiv+0x42e>
    ac98:	431a      	orrs	r2, r3
    ac9a:	0312      	lsls	r2, r2, #12
    ac9c:	0b12      	lsrs	r2, r2, #12
    ac9e:	46ac      	mov	ip, r5
    aca0:	4688      	mov	r8, r1
    aca2:	4c8e      	ldr	r4, [pc, #568]	; (aedc <__aeabi_ddiv+0x664>)
    aca4:	e6b6      	b.n	aa14 <__aeabi_ddiv+0x19c>
    aca6:	464b      	mov	r3, r9
    aca8:	431a      	orrs	r2, r3
    acaa:	0312      	lsls	r2, r2, #12
    acac:	0b12      	lsrs	r2, r2, #12
    acae:	46bc      	mov	ip, r7
    acb0:	4c8a      	ldr	r4, [pc, #552]	; (aedc <__aeabi_ddiv+0x664>)
    acb2:	e6af      	b.n	aa14 <__aeabi_ddiv+0x19c>
    acb4:	0003      	movs	r3, r0
    acb6:	465a      	mov	r2, fp
    acb8:	3b28      	subs	r3, #40	; 0x28
    acba:	409a      	lsls	r2, r3
    acbc:	2300      	movs	r3, #0
    acbe:	4691      	mov	r9, r2
    acc0:	4698      	mov	r8, r3
    acc2:	e657      	b.n	a974 <__aeabi_ddiv+0xfc>
    acc4:	4658      	mov	r0, fp
    acc6:	f001 f94b 	bl	bf60 <__clzsi2>
    acca:	3020      	adds	r0, #32
    accc:	e640      	b.n	a950 <__aeabi_ddiv+0xd8>
    acce:	0003      	movs	r3, r0
    acd0:	4652      	mov	r2, sl
    acd2:	3b28      	subs	r3, #40	; 0x28
    acd4:	409a      	lsls	r2, r3
    acd6:	2100      	movs	r1, #0
    acd8:	4693      	mov	fp, r2
    acda:	e677      	b.n	a9cc <__aeabi_ddiv+0x154>
    acdc:	f001 f940 	bl	bf60 <__clzsi2>
    ace0:	3020      	adds	r0, #32
    ace2:	e65f      	b.n	a9a4 <__aeabi_ddiv+0x12c>
    ace4:	4588      	cmp	r8, r1
    ace6:	d200      	bcs.n	acea <__aeabi_ddiv+0x472>
    ace8:	e6c7      	b.n	aa7a <__aeabi_ddiv+0x202>
    acea:	464b      	mov	r3, r9
    acec:	07de      	lsls	r6, r3, #31
    acee:	085d      	lsrs	r5, r3, #1
    acf0:	4643      	mov	r3, r8
    acf2:	085b      	lsrs	r3, r3, #1
    acf4:	431e      	orrs	r6, r3
    acf6:	4643      	mov	r3, r8
    acf8:	07db      	lsls	r3, r3, #31
    acfa:	469a      	mov	sl, r3
    acfc:	e6c2      	b.n	aa84 <__aeabi_ddiv+0x20c>
    acfe:	2500      	movs	r5, #0
    ad00:	4592      	cmp	sl, r2
    ad02:	d300      	bcc.n	ad06 <__aeabi_ddiv+0x48e>
    ad04:	e733      	b.n	ab6e <__aeabi_ddiv+0x2f6>
    ad06:	9e03      	ldr	r6, [sp, #12]
    ad08:	4659      	mov	r1, fp
    ad0a:	46b4      	mov	ip, r6
    ad0c:	44e2      	add	sl, ip
    ad0e:	45b2      	cmp	sl, r6
    ad10:	41ad      	sbcs	r5, r5
    ad12:	426d      	negs	r5, r5
    ad14:	4445      	add	r5, r8
    ad16:	18eb      	adds	r3, r5, r3
    ad18:	3901      	subs	r1, #1
    ad1a:	4598      	cmp	r8, r3
    ad1c:	d207      	bcs.n	ad2e <__aeabi_ddiv+0x4b6>
    ad1e:	4298      	cmp	r0, r3
    ad20:	d900      	bls.n	ad24 <__aeabi_ddiv+0x4ac>
    ad22:	e07f      	b.n	ae24 <__aeabi_ddiv+0x5ac>
    ad24:	d100      	bne.n	ad28 <__aeabi_ddiv+0x4b0>
    ad26:	e0bc      	b.n	aea2 <__aeabi_ddiv+0x62a>
    ad28:	1a1d      	subs	r5, r3, r0
    ad2a:	468b      	mov	fp, r1
    ad2c:	e71f      	b.n	ab6e <__aeabi_ddiv+0x2f6>
    ad2e:	4598      	cmp	r8, r3
    ad30:	d1fa      	bne.n	ad28 <__aeabi_ddiv+0x4b0>
    ad32:	9d03      	ldr	r5, [sp, #12]
    ad34:	4555      	cmp	r5, sl
    ad36:	d9f2      	bls.n	ad1e <__aeabi_ddiv+0x4a6>
    ad38:	4643      	mov	r3, r8
    ad3a:	468b      	mov	fp, r1
    ad3c:	1a1d      	subs	r5, r3, r0
    ad3e:	e716      	b.n	ab6e <__aeabi_ddiv+0x2f6>
    ad40:	469b      	mov	fp, r3
    ad42:	e6ca      	b.n	aada <__aeabi_ddiv+0x262>
    ad44:	0015      	movs	r5, r2
    ad46:	e6e7      	b.n	ab18 <__aeabi_ddiv+0x2a0>
    ad48:	465a      	mov	r2, fp
    ad4a:	08c9      	lsrs	r1, r1, #3
    ad4c:	0752      	lsls	r2, r2, #29
    ad4e:	430a      	orrs	r2, r1
    ad50:	055b      	lsls	r3, r3, #21
    ad52:	4690      	mov	r8, r2
    ad54:	0d5c      	lsrs	r4, r3, #21
    ad56:	465a      	mov	r2, fp
    ad58:	2301      	movs	r3, #1
    ad5a:	9902      	ldr	r1, [sp, #8]
    ad5c:	0252      	lsls	r2, r2, #9
    ad5e:	4019      	ands	r1, r3
    ad60:	0b12      	lsrs	r2, r2, #12
    ad62:	468c      	mov	ip, r1
    ad64:	e656      	b.n	aa14 <__aeabi_ddiv+0x19c>
    ad66:	2b00      	cmp	r3, #0
    ad68:	d100      	bne.n	ad6c <__aeabi_ddiv+0x4f4>
    ad6a:	e76f      	b.n	ac4c <__aeabi_ddiv+0x3d4>
    ad6c:	4446      	add	r6, r8
    ad6e:	1e4a      	subs	r2, r1, #1
    ad70:	45b0      	cmp	r8, r6
    ad72:	d929      	bls.n	adc8 <__aeabi_ddiv+0x550>
    ad74:	0011      	movs	r1, r2
    ad76:	4286      	cmp	r6, r0
    ad78:	d000      	beq.n	ad7c <__aeabi_ddiv+0x504>
    ad7a:	e765      	b.n	ac48 <__aeabi_ddiv+0x3d0>
    ad7c:	9a03      	ldr	r2, [sp, #12]
    ad7e:	4293      	cmp	r3, r2
    ad80:	d000      	beq.n	ad84 <__aeabi_ddiv+0x50c>
    ad82:	e761      	b.n	ac48 <__aeabi_ddiv+0x3d0>
    ad84:	e762      	b.n	ac4c <__aeabi_ddiv+0x3d4>
    ad86:	2101      	movs	r1, #1
    ad88:	4249      	negs	r1, r1
    ad8a:	2001      	movs	r0, #1
    ad8c:	1ac2      	subs	r2, r0, r3
    ad8e:	2a38      	cmp	r2, #56	; 0x38
    ad90:	dd21      	ble.n	add6 <__aeabi_ddiv+0x55e>
    ad92:	9b02      	ldr	r3, [sp, #8]
    ad94:	4003      	ands	r3, r0
    ad96:	469c      	mov	ip, r3
    ad98:	e638      	b.n	aa0c <__aeabi_ddiv+0x194>
    ad9a:	220f      	movs	r2, #15
    ad9c:	400a      	ands	r2, r1
    ad9e:	2a04      	cmp	r2, #4
    ada0:	d100      	bne.n	ada4 <__aeabi_ddiv+0x52c>
    ada2:	e75b      	b.n	ac5c <__aeabi_ddiv+0x3e4>
    ada4:	000a      	movs	r2, r1
    ada6:	1d11      	adds	r1, r2, #4
    ada8:	4291      	cmp	r1, r2
    adaa:	4192      	sbcs	r2, r2
    adac:	4252      	negs	r2, r2
    adae:	4493      	add	fp, r2
    adb0:	e754      	b.n	ac5c <__aeabi_ddiv+0x3e4>
    adb2:	4b47      	ldr	r3, [pc, #284]	; (aed0 <__aeabi_ddiv+0x658>)
    adb4:	18e3      	adds	r3, r4, r3
    adb6:	2b00      	cmp	r3, #0
    adb8:	dde5      	ble.n	ad86 <__aeabi_ddiv+0x50e>
    adba:	2201      	movs	r2, #1
    adbc:	4252      	negs	r2, r2
    adbe:	e7f2      	b.n	ada6 <__aeabi_ddiv+0x52e>
    adc0:	001d      	movs	r5, r3
    adc2:	e6fa      	b.n	abba <__aeabi_ddiv+0x342>
    adc4:	469a      	mov	sl, r3
    adc6:	e71c      	b.n	ac02 <__aeabi_ddiv+0x38a>
    adc8:	42b0      	cmp	r0, r6
    adca:	d839      	bhi.n	ae40 <__aeabi_ddiv+0x5c8>
    adcc:	d06e      	beq.n	aeac <__aeabi_ddiv+0x634>
    adce:	0011      	movs	r1, r2
    add0:	e73a      	b.n	ac48 <__aeabi_ddiv+0x3d0>
    add2:	9302      	str	r3, [sp, #8]
    add4:	e73a      	b.n	ac4c <__aeabi_ddiv+0x3d4>
    add6:	2a1f      	cmp	r2, #31
    add8:	dc3c      	bgt.n	ae54 <__aeabi_ddiv+0x5dc>
    adda:	2320      	movs	r3, #32
    addc:	1a9b      	subs	r3, r3, r2
    adde:	000c      	movs	r4, r1
    ade0:	4658      	mov	r0, fp
    ade2:	4099      	lsls	r1, r3
    ade4:	4098      	lsls	r0, r3
    ade6:	1e4b      	subs	r3, r1, #1
    ade8:	4199      	sbcs	r1, r3
    adea:	465b      	mov	r3, fp
    adec:	40d4      	lsrs	r4, r2
    adee:	40d3      	lsrs	r3, r2
    adf0:	4320      	orrs	r0, r4
    adf2:	4308      	orrs	r0, r1
    adf4:	001a      	movs	r2, r3
    adf6:	0743      	lsls	r3, r0, #29
    adf8:	d009      	beq.n	ae0e <__aeabi_ddiv+0x596>
    adfa:	230f      	movs	r3, #15
    adfc:	4003      	ands	r3, r0
    adfe:	2b04      	cmp	r3, #4
    ae00:	d005      	beq.n	ae0e <__aeabi_ddiv+0x596>
    ae02:	0001      	movs	r1, r0
    ae04:	1d08      	adds	r0, r1, #4
    ae06:	4288      	cmp	r0, r1
    ae08:	419b      	sbcs	r3, r3
    ae0a:	425b      	negs	r3, r3
    ae0c:	18d2      	adds	r2, r2, r3
    ae0e:	0213      	lsls	r3, r2, #8
    ae10:	d53a      	bpl.n	ae88 <__aeabi_ddiv+0x610>
    ae12:	2301      	movs	r3, #1
    ae14:	9a02      	ldr	r2, [sp, #8]
    ae16:	2401      	movs	r4, #1
    ae18:	401a      	ands	r2, r3
    ae1a:	2300      	movs	r3, #0
    ae1c:	4694      	mov	ip, r2
    ae1e:	4698      	mov	r8, r3
    ae20:	2200      	movs	r2, #0
    ae22:	e5f7      	b.n	aa14 <__aeabi_ddiv+0x19c>
    ae24:	2102      	movs	r1, #2
    ae26:	4249      	negs	r1, r1
    ae28:	468c      	mov	ip, r1
    ae2a:	9d03      	ldr	r5, [sp, #12]
    ae2c:	44e3      	add	fp, ip
    ae2e:	46ac      	mov	ip, r5
    ae30:	44e2      	add	sl, ip
    ae32:	45aa      	cmp	sl, r5
    ae34:	41ad      	sbcs	r5, r5
    ae36:	426d      	negs	r5, r5
    ae38:	4445      	add	r5, r8
    ae3a:	18ed      	adds	r5, r5, r3
    ae3c:	1a2d      	subs	r5, r5, r0
    ae3e:	e696      	b.n	ab6e <__aeabi_ddiv+0x2f6>
    ae40:	1e8a      	subs	r2, r1, #2
    ae42:	9903      	ldr	r1, [sp, #12]
    ae44:	004d      	lsls	r5, r1, #1
    ae46:	428d      	cmp	r5, r1
    ae48:	4189      	sbcs	r1, r1
    ae4a:	4249      	negs	r1, r1
    ae4c:	4441      	add	r1, r8
    ae4e:	1876      	adds	r6, r6, r1
    ae50:	9503      	str	r5, [sp, #12]
    ae52:	e78f      	b.n	ad74 <__aeabi_ddiv+0x4fc>
    ae54:	201f      	movs	r0, #31
    ae56:	4240      	negs	r0, r0
    ae58:	1ac3      	subs	r3, r0, r3
    ae5a:	4658      	mov	r0, fp
    ae5c:	40d8      	lsrs	r0, r3
    ae5e:	0003      	movs	r3, r0
    ae60:	2a20      	cmp	r2, #32
    ae62:	d028      	beq.n	aeb6 <__aeabi_ddiv+0x63e>
    ae64:	2040      	movs	r0, #64	; 0x40
    ae66:	465d      	mov	r5, fp
    ae68:	1a82      	subs	r2, r0, r2
    ae6a:	4095      	lsls	r5, r2
    ae6c:	4329      	orrs	r1, r5
    ae6e:	1e4a      	subs	r2, r1, #1
    ae70:	4191      	sbcs	r1, r2
    ae72:	4319      	orrs	r1, r3
    ae74:	2307      	movs	r3, #7
    ae76:	2200      	movs	r2, #0
    ae78:	400b      	ands	r3, r1
    ae7a:	d009      	beq.n	ae90 <__aeabi_ddiv+0x618>
    ae7c:	230f      	movs	r3, #15
    ae7e:	2200      	movs	r2, #0
    ae80:	400b      	ands	r3, r1
    ae82:	0008      	movs	r0, r1
    ae84:	2b04      	cmp	r3, #4
    ae86:	d1bd      	bne.n	ae04 <__aeabi_ddiv+0x58c>
    ae88:	0001      	movs	r1, r0
    ae8a:	0753      	lsls	r3, r2, #29
    ae8c:	0252      	lsls	r2, r2, #9
    ae8e:	0b12      	lsrs	r2, r2, #12
    ae90:	08c9      	lsrs	r1, r1, #3
    ae92:	4319      	orrs	r1, r3
    ae94:	2301      	movs	r3, #1
    ae96:	4688      	mov	r8, r1
    ae98:	9902      	ldr	r1, [sp, #8]
    ae9a:	2400      	movs	r4, #0
    ae9c:	4019      	ands	r1, r3
    ae9e:	468c      	mov	ip, r1
    aea0:	e5b8      	b.n	aa14 <__aeabi_ddiv+0x19c>
    aea2:	4552      	cmp	r2, sl
    aea4:	d8be      	bhi.n	ae24 <__aeabi_ddiv+0x5ac>
    aea6:	468b      	mov	fp, r1
    aea8:	2500      	movs	r5, #0
    aeaa:	e660      	b.n	ab6e <__aeabi_ddiv+0x2f6>
    aeac:	9d03      	ldr	r5, [sp, #12]
    aeae:	429d      	cmp	r5, r3
    aeb0:	d3c6      	bcc.n	ae40 <__aeabi_ddiv+0x5c8>
    aeb2:	0011      	movs	r1, r2
    aeb4:	e762      	b.n	ad7c <__aeabi_ddiv+0x504>
    aeb6:	2500      	movs	r5, #0
    aeb8:	e7d8      	b.n	ae6c <__aeabi_ddiv+0x5f4>
    aeba:	2280      	movs	r2, #128	; 0x80
    aebc:	465b      	mov	r3, fp
    aebe:	0312      	lsls	r2, r2, #12
    aec0:	431a      	orrs	r2, r3
    aec2:	9b01      	ldr	r3, [sp, #4]
    aec4:	0312      	lsls	r2, r2, #12
    aec6:	0b12      	lsrs	r2, r2, #12
    aec8:	469c      	mov	ip, r3
    aeca:	4688      	mov	r8, r1
    aecc:	4c03      	ldr	r4, [pc, #12]	; (aedc <__aeabi_ddiv+0x664>)
    aece:	e5a1      	b.n	aa14 <__aeabi_ddiv+0x19c>
    aed0:	000003ff 	.word	0x000003ff
    aed4:	feffffff 	.word	0xfeffffff
    aed8:	000007fe 	.word	0x000007fe
    aedc:	000007ff 	.word	0x000007ff

0000aee0 <__eqdf2>:
    aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aee2:	464f      	mov	r7, r9
    aee4:	4646      	mov	r6, r8
    aee6:	46d6      	mov	lr, sl
    aee8:	005c      	lsls	r4, r3, #1
    aeea:	b5c0      	push	{r6, r7, lr}
    aeec:	031f      	lsls	r7, r3, #12
    aeee:	0fdb      	lsrs	r3, r3, #31
    aef0:	469a      	mov	sl, r3
    aef2:	4b17      	ldr	r3, [pc, #92]	; (af50 <__eqdf2+0x70>)
    aef4:	030e      	lsls	r6, r1, #12
    aef6:	004d      	lsls	r5, r1, #1
    aef8:	4684      	mov	ip, r0
    aefa:	4680      	mov	r8, r0
    aefc:	0b36      	lsrs	r6, r6, #12
    aefe:	0d6d      	lsrs	r5, r5, #21
    af00:	0fc9      	lsrs	r1, r1, #31
    af02:	4691      	mov	r9, r2
    af04:	0b3f      	lsrs	r7, r7, #12
    af06:	0d64      	lsrs	r4, r4, #21
    af08:	2001      	movs	r0, #1
    af0a:	429d      	cmp	r5, r3
    af0c:	d008      	beq.n	af20 <__eqdf2+0x40>
    af0e:	429c      	cmp	r4, r3
    af10:	d001      	beq.n	af16 <__eqdf2+0x36>
    af12:	42a5      	cmp	r5, r4
    af14:	d00b      	beq.n	af2e <__eqdf2+0x4e>
    af16:	bc1c      	pop	{r2, r3, r4}
    af18:	4690      	mov	r8, r2
    af1a:	4699      	mov	r9, r3
    af1c:	46a2      	mov	sl, r4
    af1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af20:	4663      	mov	r3, ip
    af22:	4333      	orrs	r3, r6
    af24:	d1f7      	bne.n	af16 <__eqdf2+0x36>
    af26:	42ac      	cmp	r4, r5
    af28:	d1f5      	bne.n	af16 <__eqdf2+0x36>
    af2a:	433a      	orrs	r2, r7
    af2c:	d1f3      	bne.n	af16 <__eqdf2+0x36>
    af2e:	2001      	movs	r0, #1
    af30:	42be      	cmp	r6, r7
    af32:	d1f0      	bne.n	af16 <__eqdf2+0x36>
    af34:	45c8      	cmp	r8, r9
    af36:	d1ee      	bne.n	af16 <__eqdf2+0x36>
    af38:	4551      	cmp	r1, sl
    af3a:	d007      	beq.n	af4c <__eqdf2+0x6c>
    af3c:	2d00      	cmp	r5, #0
    af3e:	d1ea      	bne.n	af16 <__eqdf2+0x36>
    af40:	4663      	mov	r3, ip
    af42:	431e      	orrs	r6, r3
    af44:	0030      	movs	r0, r6
    af46:	1e46      	subs	r6, r0, #1
    af48:	41b0      	sbcs	r0, r6
    af4a:	e7e4      	b.n	af16 <__eqdf2+0x36>
    af4c:	2000      	movs	r0, #0
    af4e:	e7e2      	b.n	af16 <__eqdf2+0x36>
    af50:	000007ff 	.word	0x000007ff

0000af54 <__gedf2>:
    af54:	b5f0      	push	{r4, r5, r6, r7, lr}
    af56:	4645      	mov	r5, r8
    af58:	46de      	mov	lr, fp
    af5a:	4657      	mov	r7, sl
    af5c:	464e      	mov	r6, r9
    af5e:	b5e0      	push	{r5, r6, r7, lr}
    af60:	031f      	lsls	r7, r3, #12
    af62:	0b3d      	lsrs	r5, r7, #12
    af64:	4f2c      	ldr	r7, [pc, #176]	; (b018 <__gedf2+0xc4>)
    af66:	030e      	lsls	r6, r1, #12
    af68:	004c      	lsls	r4, r1, #1
    af6a:	46ab      	mov	fp, r5
    af6c:	005d      	lsls	r5, r3, #1
    af6e:	4684      	mov	ip, r0
    af70:	0b36      	lsrs	r6, r6, #12
    af72:	0d64      	lsrs	r4, r4, #21
    af74:	0fc9      	lsrs	r1, r1, #31
    af76:	4690      	mov	r8, r2
    af78:	0d6d      	lsrs	r5, r5, #21
    af7a:	0fdb      	lsrs	r3, r3, #31
    af7c:	42bc      	cmp	r4, r7
    af7e:	d02a      	beq.n	afd6 <__gedf2+0x82>
    af80:	4f25      	ldr	r7, [pc, #148]	; (b018 <__gedf2+0xc4>)
    af82:	42bd      	cmp	r5, r7
    af84:	d02d      	beq.n	afe2 <__gedf2+0x8e>
    af86:	2c00      	cmp	r4, #0
    af88:	d10f      	bne.n	afaa <__gedf2+0x56>
    af8a:	4330      	orrs	r0, r6
    af8c:	0007      	movs	r7, r0
    af8e:	4681      	mov	r9, r0
    af90:	4278      	negs	r0, r7
    af92:	4178      	adcs	r0, r7
    af94:	b2c0      	uxtb	r0, r0
    af96:	2d00      	cmp	r5, #0
    af98:	d117      	bne.n	afca <__gedf2+0x76>
    af9a:	465f      	mov	r7, fp
    af9c:	433a      	orrs	r2, r7
    af9e:	d114      	bne.n	afca <__gedf2+0x76>
    afa0:	464b      	mov	r3, r9
    afa2:	2000      	movs	r0, #0
    afa4:	2b00      	cmp	r3, #0
    afa6:	d00a      	beq.n	afbe <__gedf2+0x6a>
    afa8:	e006      	b.n	afb8 <__gedf2+0x64>
    afaa:	2d00      	cmp	r5, #0
    afac:	d102      	bne.n	afb4 <__gedf2+0x60>
    afae:	4658      	mov	r0, fp
    afb0:	4302      	orrs	r2, r0
    afb2:	d001      	beq.n	afb8 <__gedf2+0x64>
    afb4:	4299      	cmp	r1, r3
    afb6:	d018      	beq.n	afea <__gedf2+0x96>
    afb8:	4248      	negs	r0, r1
    afba:	2101      	movs	r1, #1
    afbc:	4308      	orrs	r0, r1
    afbe:	bc3c      	pop	{r2, r3, r4, r5}
    afc0:	4690      	mov	r8, r2
    afc2:	4699      	mov	r9, r3
    afc4:	46a2      	mov	sl, r4
    afc6:	46ab      	mov	fp, r5
    afc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    afca:	2800      	cmp	r0, #0
    afcc:	d0f2      	beq.n	afb4 <__gedf2+0x60>
    afce:	2001      	movs	r0, #1
    afd0:	3b01      	subs	r3, #1
    afd2:	4318      	orrs	r0, r3
    afd4:	e7f3      	b.n	afbe <__gedf2+0x6a>
    afd6:	0037      	movs	r7, r6
    afd8:	4307      	orrs	r7, r0
    afda:	d0d1      	beq.n	af80 <__gedf2+0x2c>
    afdc:	2002      	movs	r0, #2
    afde:	4240      	negs	r0, r0
    afe0:	e7ed      	b.n	afbe <__gedf2+0x6a>
    afe2:	465f      	mov	r7, fp
    afe4:	4317      	orrs	r7, r2
    afe6:	d0ce      	beq.n	af86 <__gedf2+0x32>
    afe8:	e7f8      	b.n	afdc <__gedf2+0x88>
    afea:	42ac      	cmp	r4, r5
    afec:	dce4      	bgt.n	afb8 <__gedf2+0x64>
    afee:	da03      	bge.n	aff8 <__gedf2+0xa4>
    aff0:	1e48      	subs	r0, r1, #1
    aff2:	2101      	movs	r1, #1
    aff4:	4308      	orrs	r0, r1
    aff6:	e7e2      	b.n	afbe <__gedf2+0x6a>
    aff8:	455e      	cmp	r6, fp
    affa:	d8dd      	bhi.n	afb8 <__gedf2+0x64>
    affc:	d006      	beq.n	b00c <__gedf2+0xb8>
    affe:	2000      	movs	r0, #0
    b000:	455e      	cmp	r6, fp
    b002:	d2dc      	bcs.n	afbe <__gedf2+0x6a>
    b004:	2301      	movs	r3, #1
    b006:	1e48      	subs	r0, r1, #1
    b008:	4318      	orrs	r0, r3
    b00a:	e7d8      	b.n	afbe <__gedf2+0x6a>
    b00c:	45c4      	cmp	ip, r8
    b00e:	d8d3      	bhi.n	afb8 <__gedf2+0x64>
    b010:	2000      	movs	r0, #0
    b012:	45c4      	cmp	ip, r8
    b014:	d3f6      	bcc.n	b004 <__gedf2+0xb0>
    b016:	e7d2      	b.n	afbe <__gedf2+0x6a>
    b018:	000007ff 	.word	0x000007ff

0000b01c <__ledf2>:
    b01c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b01e:	464e      	mov	r6, r9
    b020:	4645      	mov	r5, r8
    b022:	46de      	mov	lr, fp
    b024:	4657      	mov	r7, sl
    b026:	005c      	lsls	r4, r3, #1
    b028:	b5e0      	push	{r5, r6, r7, lr}
    b02a:	031f      	lsls	r7, r3, #12
    b02c:	0fdb      	lsrs	r3, r3, #31
    b02e:	4699      	mov	r9, r3
    b030:	4b2a      	ldr	r3, [pc, #168]	; (b0dc <__ledf2+0xc0>)
    b032:	030e      	lsls	r6, r1, #12
    b034:	004d      	lsls	r5, r1, #1
    b036:	0fc9      	lsrs	r1, r1, #31
    b038:	4684      	mov	ip, r0
    b03a:	0b36      	lsrs	r6, r6, #12
    b03c:	0d6d      	lsrs	r5, r5, #21
    b03e:	468b      	mov	fp, r1
    b040:	4690      	mov	r8, r2
    b042:	0b3f      	lsrs	r7, r7, #12
    b044:	0d64      	lsrs	r4, r4, #21
    b046:	429d      	cmp	r5, r3
    b048:	d020      	beq.n	b08c <__ledf2+0x70>
    b04a:	4b24      	ldr	r3, [pc, #144]	; (b0dc <__ledf2+0xc0>)
    b04c:	429c      	cmp	r4, r3
    b04e:	d022      	beq.n	b096 <__ledf2+0x7a>
    b050:	2d00      	cmp	r5, #0
    b052:	d112      	bne.n	b07a <__ledf2+0x5e>
    b054:	4330      	orrs	r0, r6
    b056:	4243      	negs	r3, r0
    b058:	4143      	adcs	r3, r0
    b05a:	b2db      	uxtb	r3, r3
    b05c:	2c00      	cmp	r4, #0
    b05e:	d01f      	beq.n	b0a0 <__ledf2+0x84>
    b060:	2b00      	cmp	r3, #0
    b062:	d00c      	beq.n	b07e <__ledf2+0x62>
    b064:	464b      	mov	r3, r9
    b066:	2001      	movs	r0, #1
    b068:	3b01      	subs	r3, #1
    b06a:	4303      	orrs	r3, r0
    b06c:	0018      	movs	r0, r3
    b06e:	bc3c      	pop	{r2, r3, r4, r5}
    b070:	4690      	mov	r8, r2
    b072:	4699      	mov	r9, r3
    b074:	46a2      	mov	sl, r4
    b076:	46ab      	mov	fp, r5
    b078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b07a:	2c00      	cmp	r4, #0
    b07c:	d016      	beq.n	b0ac <__ledf2+0x90>
    b07e:	45cb      	cmp	fp, r9
    b080:	d017      	beq.n	b0b2 <__ledf2+0x96>
    b082:	465b      	mov	r3, fp
    b084:	4259      	negs	r1, r3
    b086:	2301      	movs	r3, #1
    b088:	430b      	orrs	r3, r1
    b08a:	e7ef      	b.n	b06c <__ledf2+0x50>
    b08c:	0031      	movs	r1, r6
    b08e:	2302      	movs	r3, #2
    b090:	4301      	orrs	r1, r0
    b092:	d1eb      	bne.n	b06c <__ledf2+0x50>
    b094:	e7d9      	b.n	b04a <__ledf2+0x2e>
    b096:	0039      	movs	r1, r7
    b098:	2302      	movs	r3, #2
    b09a:	4311      	orrs	r1, r2
    b09c:	d1e6      	bne.n	b06c <__ledf2+0x50>
    b09e:	e7d7      	b.n	b050 <__ledf2+0x34>
    b0a0:	433a      	orrs	r2, r7
    b0a2:	d1dd      	bne.n	b060 <__ledf2+0x44>
    b0a4:	2300      	movs	r3, #0
    b0a6:	2800      	cmp	r0, #0
    b0a8:	d0e0      	beq.n	b06c <__ledf2+0x50>
    b0aa:	e7ea      	b.n	b082 <__ledf2+0x66>
    b0ac:	433a      	orrs	r2, r7
    b0ae:	d1e6      	bne.n	b07e <__ledf2+0x62>
    b0b0:	e7e7      	b.n	b082 <__ledf2+0x66>
    b0b2:	42a5      	cmp	r5, r4
    b0b4:	dce5      	bgt.n	b082 <__ledf2+0x66>
    b0b6:	db05      	blt.n	b0c4 <__ledf2+0xa8>
    b0b8:	42be      	cmp	r6, r7
    b0ba:	d8e2      	bhi.n	b082 <__ledf2+0x66>
    b0bc:	d007      	beq.n	b0ce <__ledf2+0xb2>
    b0be:	2300      	movs	r3, #0
    b0c0:	42be      	cmp	r6, r7
    b0c2:	d2d3      	bcs.n	b06c <__ledf2+0x50>
    b0c4:	4659      	mov	r1, fp
    b0c6:	2301      	movs	r3, #1
    b0c8:	3901      	subs	r1, #1
    b0ca:	430b      	orrs	r3, r1
    b0cc:	e7ce      	b.n	b06c <__ledf2+0x50>
    b0ce:	45c4      	cmp	ip, r8
    b0d0:	d8d7      	bhi.n	b082 <__ledf2+0x66>
    b0d2:	2300      	movs	r3, #0
    b0d4:	45c4      	cmp	ip, r8
    b0d6:	d3f5      	bcc.n	b0c4 <__ledf2+0xa8>
    b0d8:	e7c8      	b.n	b06c <__ledf2+0x50>
    b0da:	46c0      	nop			; (mov r8, r8)
    b0dc:	000007ff 	.word	0x000007ff

0000b0e0 <__aeabi_dmul>:
    b0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0e2:	4657      	mov	r7, sl
    b0e4:	4645      	mov	r5, r8
    b0e6:	46de      	mov	lr, fp
    b0e8:	464e      	mov	r6, r9
    b0ea:	b5e0      	push	{r5, r6, r7, lr}
    b0ec:	030c      	lsls	r4, r1, #12
    b0ee:	4698      	mov	r8, r3
    b0f0:	004e      	lsls	r6, r1, #1
    b0f2:	0b23      	lsrs	r3, r4, #12
    b0f4:	b087      	sub	sp, #28
    b0f6:	0007      	movs	r7, r0
    b0f8:	4692      	mov	sl, r2
    b0fa:	469b      	mov	fp, r3
    b0fc:	0d76      	lsrs	r6, r6, #21
    b0fe:	0fcd      	lsrs	r5, r1, #31
    b100:	2e00      	cmp	r6, #0
    b102:	d06b      	beq.n	b1dc <__aeabi_dmul+0xfc>
    b104:	4b6d      	ldr	r3, [pc, #436]	; (b2bc <__aeabi_dmul+0x1dc>)
    b106:	429e      	cmp	r6, r3
    b108:	d035      	beq.n	b176 <__aeabi_dmul+0x96>
    b10a:	2480      	movs	r4, #128	; 0x80
    b10c:	465b      	mov	r3, fp
    b10e:	0f42      	lsrs	r2, r0, #29
    b110:	0424      	lsls	r4, r4, #16
    b112:	00db      	lsls	r3, r3, #3
    b114:	4314      	orrs	r4, r2
    b116:	431c      	orrs	r4, r3
    b118:	00c3      	lsls	r3, r0, #3
    b11a:	4699      	mov	r9, r3
    b11c:	4b68      	ldr	r3, [pc, #416]	; (b2c0 <__aeabi_dmul+0x1e0>)
    b11e:	46a3      	mov	fp, r4
    b120:	469c      	mov	ip, r3
    b122:	2300      	movs	r3, #0
    b124:	2700      	movs	r7, #0
    b126:	4466      	add	r6, ip
    b128:	9302      	str	r3, [sp, #8]
    b12a:	4643      	mov	r3, r8
    b12c:	031c      	lsls	r4, r3, #12
    b12e:	005a      	lsls	r2, r3, #1
    b130:	0fdb      	lsrs	r3, r3, #31
    b132:	4650      	mov	r0, sl
    b134:	0b24      	lsrs	r4, r4, #12
    b136:	0d52      	lsrs	r2, r2, #21
    b138:	4698      	mov	r8, r3
    b13a:	d100      	bne.n	b13e <__aeabi_dmul+0x5e>
    b13c:	e076      	b.n	b22c <__aeabi_dmul+0x14c>
    b13e:	4b5f      	ldr	r3, [pc, #380]	; (b2bc <__aeabi_dmul+0x1dc>)
    b140:	429a      	cmp	r2, r3
    b142:	d06d      	beq.n	b220 <__aeabi_dmul+0x140>
    b144:	2380      	movs	r3, #128	; 0x80
    b146:	0f41      	lsrs	r1, r0, #29
    b148:	041b      	lsls	r3, r3, #16
    b14a:	430b      	orrs	r3, r1
    b14c:	495c      	ldr	r1, [pc, #368]	; (b2c0 <__aeabi_dmul+0x1e0>)
    b14e:	00e4      	lsls	r4, r4, #3
    b150:	468c      	mov	ip, r1
    b152:	431c      	orrs	r4, r3
    b154:	00c3      	lsls	r3, r0, #3
    b156:	2000      	movs	r0, #0
    b158:	4462      	add	r2, ip
    b15a:	4641      	mov	r1, r8
    b15c:	18b6      	adds	r6, r6, r2
    b15e:	4069      	eors	r1, r5
    b160:	1c72      	adds	r2, r6, #1
    b162:	9101      	str	r1, [sp, #4]
    b164:	4694      	mov	ip, r2
    b166:	4307      	orrs	r7, r0
    b168:	2f0f      	cmp	r7, #15
    b16a:	d900      	bls.n	b16e <__aeabi_dmul+0x8e>
    b16c:	e0b0      	b.n	b2d0 <__aeabi_dmul+0x1f0>
    b16e:	4a55      	ldr	r2, [pc, #340]	; (b2c4 <__aeabi_dmul+0x1e4>)
    b170:	00bf      	lsls	r7, r7, #2
    b172:	59d2      	ldr	r2, [r2, r7]
    b174:	4697      	mov	pc, r2
    b176:	465b      	mov	r3, fp
    b178:	4303      	orrs	r3, r0
    b17a:	4699      	mov	r9, r3
    b17c:	d000      	beq.n	b180 <__aeabi_dmul+0xa0>
    b17e:	e087      	b.n	b290 <__aeabi_dmul+0x1b0>
    b180:	2300      	movs	r3, #0
    b182:	469b      	mov	fp, r3
    b184:	3302      	adds	r3, #2
    b186:	2708      	movs	r7, #8
    b188:	9302      	str	r3, [sp, #8]
    b18a:	e7ce      	b.n	b12a <__aeabi_dmul+0x4a>
    b18c:	4642      	mov	r2, r8
    b18e:	9201      	str	r2, [sp, #4]
    b190:	2802      	cmp	r0, #2
    b192:	d067      	beq.n	b264 <__aeabi_dmul+0x184>
    b194:	2803      	cmp	r0, #3
    b196:	d100      	bne.n	b19a <__aeabi_dmul+0xba>
    b198:	e20e      	b.n	b5b8 <__aeabi_dmul+0x4d8>
    b19a:	2801      	cmp	r0, #1
    b19c:	d000      	beq.n	b1a0 <__aeabi_dmul+0xc0>
    b19e:	e162      	b.n	b466 <__aeabi_dmul+0x386>
    b1a0:	2300      	movs	r3, #0
    b1a2:	2400      	movs	r4, #0
    b1a4:	2200      	movs	r2, #0
    b1a6:	4699      	mov	r9, r3
    b1a8:	9901      	ldr	r1, [sp, #4]
    b1aa:	4001      	ands	r1, r0
    b1ac:	b2cd      	uxtb	r5, r1
    b1ae:	2100      	movs	r1, #0
    b1b0:	0312      	lsls	r2, r2, #12
    b1b2:	0d0b      	lsrs	r3, r1, #20
    b1b4:	0b12      	lsrs	r2, r2, #12
    b1b6:	051b      	lsls	r3, r3, #20
    b1b8:	4313      	orrs	r3, r2
    b1ba:	4a43      	ldr	r2, [pc, #268]	; (b2c8 <__aeabi_dmul+0x1e8>)
    b1bc:	0524      	lsls	r4, r4, #20
    b1be:	4013      	ands	r3, r2
    b1c0:	431c      	orrs	r4, r3
    b1c2:	0064      	lsls	r4, r4, #1
    b1c4:	07ed      	lsls	r5, r5, #31
    b1c6:	0864      	lsrs	r4, r4, #1
    b1c8:	432c      	orrs	r4, r5
    b1ca:	4648      	mov	r0, r9
    b1cc:	0021      	movs	r1, r4
    b1ce:	b007      	add	sp, #28
    b1d0:	bc3c      	pop	{r2, r3, r4, r5}
    b1d2:	4690      	mov	r8, r2
    b1d4:	4699      	mov	r9, r3
    b1d6:	46a2      	mov	sl, r4
    b1d8:	46ab      	mov	fp, r5
    b1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1dc:	4303      	orrs	r3, r0
    b1de:	4699      	mov	r9, r3
    b1e0:	d04f      	beq.n	b282 <__aeabi_dmul+0x1a2>
    b1e2:	465b      	mov	r3, fp
    b1e4:	2b00      	cmp	r3, #0
    b1e6:	d100      	bne.n	b1ea <__aeabi_dmul+0x10a>
    b1e8:	e189      	b.n	b4fe <__aeabi_dmul+0x41e>
    b1ea:	4658      	mov	r0, fp
    b1ec:	f000 feb8 	bl	bf60 <__clzsi2>
    b1f0:	0003      	movs	r3, r0
    b1f2:	3b0b      	subs	r3, #11
    b1f4:	2b1c      	cmp	r3, #28
    b1f6:	dd00      	ble.n	b1fa <__aeabi_dmul+0x11a>
    b1f8:	e17a      	b.n	b4f0 <__aeabi_dmul+0x410>
    b1fa:	221d      	movs	r2, #29
    b1fc:	1ad3      	subs	r3, r2, r3
    b1fe:	003a      	movs	r2, r7
    b200:	0001      	movs	r1, r0
    b202:	465c      	mov	r4, fp
    b204:	40da      	lsrs	r2, r3
    b206:	3908      	subs	r1, #8
    b208:	408c      	lsls	r4, r1
    b20a:	0013      	movs	r3, r2
    b20c:	408f      	lsls	r7, r1
    b20e:	4323      	orrs	r3, r4
    b210:	469b      	mov	fp, r3
    b212:	46b9      	mov	r9, r7
    b214:	2300      	movs	r3, #0
    b216:	4e2d      	ldr	r6, [pc, #180]	; (b2cc <__aeabi_dmul+0x1ec>)
    b218:	2700      	movs	r7, #0
    b21a:	1a36      	subs	r6, r6, r0
    b21c:	9302      	str	r3, [sp, #8]
    b21e:	e784      	b.n	b12a <__aeabi_dmul+0x4a>
    b220:	4653      	mov	r3, sl
    b222:	4323      	orrs	r3, r4
    b224:	d12a      	bne.n	b27c <__aeabi_dmul+0x19c>
    b226:	2400      	movs	r4, #0
    b228:	2002      	movs	r0, #2
    b22a:	e796      	b.n	b15a <__aeabi_dmul+0x7a>
    b22c:	4653      	mov	r3, sl
    b22e:	4323      	orrs	r3, r4
    b230:	d020      	beq.n	b274 <__aeabi_dmul+0x194>
    b232:	2c00      	cmp	r4, #0
    b234:	d100      	bne.n	b238 <__aeabi_dmul+0x158>
    b236:	e157      	b.n	b4e8 <__aeabi_dmul+0x408>
    b238:	0020      	movs	r0, r4
    b23a:	f000 fe91 	bl	bf60 <__clzsi2>
    b23e:	0003      	movs	r3, r0
    b240:	3b0b      	subs	r3, #11
    b242:	2b1c      	cmp	r3, #28
    b244:	dd00      	ble.n	b248 <__aeabi_dmul+0x168>
    b246:	e149      	b.n	b4dc <__aeabi_dmul+0x3fc>
    b248:	211d      	movs	r1, #29
    b24a:	1acb      	subs	r3, r1, r3
    b24c:	4651      	mov	r1, sl
    b24e:	0002      	movs	r2, r0
    b250:	40d9      	lsrs	r1, r3
    b252:	4653      	mov	r3, sl
    b254:	3a08      	subs	r2, #8
    b256:	4094      	lsls	r4, r2
    b258:	4093      	lsls	r3, r2
    b25a:	430c      	orrs	r4, r1
    b25c:	4a1b      	ldr	r2, [pc, #108]	; (b2cc <__aeabi_dmul+0x1ec>)
    b25e:	1a12      	subs	r2, r2, r0
    b260:	2000      	movs	r0, #0
    b262:	e77a      	b.n	b15a <__aeabi_dmul+0x7a>
    b264:	2501      	movs	r5, #1
    b266:	9b01      	ldr	r3, [sp, #4]
    b268:	4c14      	ldr	r4, [pc, #80]	; (b2bc <__aeabi_dmul+0x1dc>)
    b26a:	401d      	ands	r5, r3
    b26c:	2300      	movs	r3, #0
    b26e:	2200      	movs	r2, #0
    b270:	4699      	mov	r9, r3
    b272:	e79c      	b.n	b1ae <__aeabi_dmul+0xce>
    b274:	2400      	movs	r4, #0
    b276:	2200      	movs	r2, #0
    b278:	2001      	movs	r0, #1
    b27a:	e76e      	b.n	b15a <__aeabi_dmul+0x7a>
    b27c:	4653      	mov	r3, sl
    b27e:	2003      	movs	r0, #3
    b280:	e76b      	b.n	b15a <__aeabi_dmul+0x7a>
    b282:	2300      	movs	r3, #0
    b284:	469b      	mov	fp, r3
    b286:	3301      	adds	r3, #1
    b288:	2704      	movs	r7, #4
    b28a:	2600      	movs	r6, #0
    b28c:	9302      	str	r3, [sp, #8]
    b28e:	e74c      	b.n	b12a <__aeabi_dmul+0x4a>
    b290:	2303      	movs	r3, #3
    b292:	4681      	mov	r9, r0
    b294:	270c      	movs	r7, #12
    b296:	9302      	str	r3, [sp, #8]
    b298:	e747      	b.n	b12a <__aeabi_dmul+0x4a>
    b29a:	2280      	movs	r2, #128	; 0x80
    b29c:	2300      	movs	r3, #0
    b29e:	2500      	movs	r5, #0
    b2a0:	0312      	lsls	r2, r2, #12
    b2a2:	4699      	mov	r9, r3
    b2a4:	4c05      	ldr	r4, [pc, #20]	; (b2bc <__aeabi_dmul+0x1dc>)
    b2a6:	e782      	b.n	b1ae <__aeabi_dmul+0xce>
    b2a8:	465c      	mov	r4, fp
    b2aa:	464b      	mov	r3, r9
    b2ac:	9802      	ldr	r0, [sp, #8]
    b2ae:	e76f      	b.n	b190 <__aeabi_dmul+0xb0>
    b2b0:	465c      	mov	r4, fp
    b2b2:	464b      	mov	r3, r9
    b2b4:	9501      	str	r5, [sp, #4]
    b2b6:	9802      	ldr	r0, [sp, #8]
    b2b8:	e76a      	b.n	b190 <__aeabi_dmul+0xb0>
    b2ba:	46c0      	nop			; (mov r8, r8)
    b2bc:	000007ff 	.word	0x000007ff
    b2c0:	fffffc01 	.word	0xfffffc01
    b2c4:	00011400 	.word	0x00011400
    b2c8:	800fffff 	.word	0x800fffff
    b2cc:	fffffc0d 	.word	0xfffffc0d
    b2d0:	464a      	mov	r2, r9
    b2d2:	4649      	mov	r1, r9
    b2d4:	0c17      	lsrs	r7, r2, #16
    b2d6:	0c1a      	lsrs	r2, r3, #16
    b2d8:	041b      	lsls	r3, r3, #16
    b2da:	0c1b      	lsrs	r3, r3, #16
    b2dc:	0408      	lsls	r0, r1, #16
    b2de:	0019      	movs	r1, r3
    b2e0:	0c00      	lsrs	r0, r0, #16
    b2e2:	4341      	muls	r1, r0
    b2e4:	0015      	movs	r5, r2
    b2e6:	4688      	mov	r8, r1
    b2e8:	0019      	movs	r1, r3
    b2ea:	437d      	muls	r5, r7
    b2ec:	4379      	muls	r1, r7
    b2ee:	9503      	str	r5, [sp, #12]
    b2f0:	4689      	mov	r9, r1
    b2f2:	0029      	movs	r1, r5
    b2f4:	0015      	movs	r5, r2
    b2f6:	4345      	muls	r5, r0
    b2f8:	444d      	add	r5, r9
    b2fa:	9502      	str	r5, [sp, #8]
    b2fc:	4645      	mov	r5, r8
    b2fe:	0c2d      	lsrs	r5, r5, #16
    b300:	46aa      	mov	sl, r5
    b302:	9d02      	ldr	r5, [sp, #8]
    b304:	4455      	add	r5, sl
    b306:	45a9      	cmp	r9, r5
    b308:	d906      	bls.n	b318 <__aeabi_dmul+0x238>
    b30a:	468a      	mov	sl, r1
    b30c:	2180      	movs	r1, #128	; 0x80
    b30e:	0249      	lsls	r1, r1, #9
    b310:	4689      	mov	r9, r1
    b312:	44ca      	add	sl, r9
    b314:	4651      	mov	r1, sl
    b316:	9103      	str	r1, [sp, #12]
    b318:	0c29      	lsrs	r1, r5, #16
    b31a:	9104      	str	r1, [sp, #16]
    b31c:	4641      	mov	r1, r8
    b31e:	0409      	lsls	r1, r1, #16
    b320:	042d      	lsls	r5, r5, #16
    b322:	0c09      	lsrs	r1, r1, #16
    b324:	4688      	mov	r8, r1
    b326:	0029      	movs	r1, r5
    b328:	0c25      	lsrs	r5, r4, #16
    b32a:	0424      	lsls	r4, r4, #16
    b32c:	4441      	add	r1, r8
    b32e:	0c24      	lsrs	r4, r4, #16
    b330:	9105      	str	r1, [sp, #20]
    b332:	0021      	movs	r1, r4
    b334:	4341      	muls	r1, r0
    b336:	4688      	mov	r8, r1
    b338:	0021      	movs	r1, r4
    b33a:	4379      	muls	r1, r7
    b33c:	468a      	mov	sl, r1
    b33e:	4368      	muls	r0, r5
    b340:	4641      	mov	r1, r8
    b342:	4450      	add	r0, sl
    b344:	4681      	mov	r9, r0
    b346:	0c08      	lsrs	r0, r1, #16
    b348:	4448      	add	r0, r9
    b34a:	436f      	muls	r7, r5
    b34c:	4582      	cmp	sl, r0
    b34e:	d903      	bls.n	b358 <__aeabi_dmul+0x278>
    b350:	2180      	movs	r1, #128	; 0x80
    b352:	0249      	lsls	r1, r1, #9
    b354:	4689      	mov	r9, r1
    b356:	444f      	add	r7, r9
    b358:	0c01      	lsrs	r1, r0, #16
    b35a:	4689      	mov	r9, r1
    b35c:	0039      	movs	r1, r7
    b35e:	4449      	add	r1, r9
    b360:	9102      	str	r1, [sp, #8]
    b362:	4641      	mov	r1, r8
    b364:	040f      	lsls	r7, r1, #16
    b366:	9904      	ldr	r1, [sp, #16]
    b368:	0c3f      	lsrs	r7, r7, #16
    b36a:	4688      	mov	r8, r1
    b36c:	0400      	lsls	r0, r0, #16
    b36e:	19c0      	adds	r0, r0, r7
    b370:	4480      	add	r8, r0
    b372:	4641      	mov	r1, r8
    b374:	9104      	str	r1, [sp, #16]
    b376:	4659      	mov	r1, fp
    b378:	0c0f      	lsrs	r7, r1, #16
    b37a:	0409      	lsls	r1, r1, #16
    b37c:	0c09      	lsrs	r1, r1, #16
    b37e:	4688      	mov	r8, r1
    b380:	4359      	muls	r1, r3
    b382:	468a      	mov	sl, r1
    b384:	0039      	movs	r1, r7
    b386:	4351      	muls	r1, r2
    b388:	4689      	mov	r9, r1
    b38a:	4641      	mov	r1, r8
    b38c:	434a      	muls	r2, r1
    b38e:	4651      	mov	r1, sl
    b390:	0c09      	lsrs	r1, r1, #16
    b392:	468b      	mov	fp, r1
    b394:	437b      	muls	r3, r7
    b396:	18d2      	adds	r2, r2, r3
    b398:	445a      	add	r2, fp
    b39a:	4293      	cmp	r3, r2
    b39c:	d903      	bls.n	b3a6 <__aeabi_dmul+0x2c6>
    b39e:	2380      	movs	r3, #128	; 0x80
    b3a0:	025b      	lsls	r3, r3, #9
    b3a2:	469b      	mov	fp, r3
    b3a4:	44d9      	add	r9, fp
    b3a6:	4651      	mov	r1, sl
    b3a8:	0409      	lsls	r1, r1, #16
    b3aa:	0c09      	lsrs	r1, r1, #16
    b3ac:	468a      	mov	sl, r1
    b3ae:	4641      	mov	r1, r8
    b3b0:	4361      	muls	r1, r4
    b3b2:	437c      	muls	r4, r7
    b3b4:	0c13      	lsrs	r3, r2, #16
    b3b6:	0412      	lsls	r2, r2, #16
    b3b8:	444b      	add	r3, r9
    b3ba:	4452      	add	r2, sl
    b3bc:	46a1      	mov	r9, r4
    b3be:	468a      	mov	sl, r1
    b3c0:	003c      	movs	r4, r7
    b3c2:	4641      	mov	r1, r8
    b3c4:	436c      	muls	r4, r5
    b3c6:	434d      	muls	r5, r1
    b3c8:	4651      	mov	r1, sl
    b3ca:	444d      	add	r5, r9
    b3cc:	0c0f      	lsrs	r7, r1, #16
    b3ce:	197d      	adds	r5, r7, r5
    b3d0:	45a9      	cmp	r9, r5
    b3d2:	d903      	bls.n	b3dc <__aeabi_dmul+0x2fc>
    b3d4:	2180      	movs	r1, #128	; 0x80
    b3d6:	0249      	lsls	r1, r1, #9
    b3d8:	4688      	mov	r8, r1
    b3da:	4444      	add	r4, r8
    b3dc:	9f04      	ldr	r7, [sp, #16]
    b3de:	9903      	ldr	r1, [sp, #12]
    b3e0:	46b8      	mov	r8, r7
    b3e2:	4441      	add	r1, r8
    b3e4:	468b      	mov	fp, r1
    b3e6:	4583      	cmp	fp, r0
    b3e8:	4180      	sbcs	r0, r0
    b3ea:	4241      	negs	r1, r0
    b3ec:	4688      	mov	r8, r1
    b3ee:	4651      	mov	r1, sl
    b3f0:	0408      	lsls	r0, r1, #16
    b3f2:	042f      	lsls	r7, r5, #16
    b3f4:	0c00      	lsrs	r0, r0, #16
    b3f6:	183f      	adds	r7, r7, r0
    b3f8:	4658      	mov	r0, fp
    b3fa:	9902      	ldr	r1, [sp, #8]
    b3fc:	1810      	adds	r0, r2, r0
    b3fe:	4689      	mov	r9, r1
    b400:	4290      	cmp	r0, r2
    b402:	4192      	sbcs	r2, r2
    b404:	444f      	add	r7, r9
    b406:	46ba      	mov	sl, r7
    b408:	4252      	negs	r2, r2
    b40a:	4699      	mov	r9, r3
    b40c:	4693      	mov	fp, r2
    b40e:	44c2      	add	sl, r8
    b410:	44d1      	add	r9, sl
    b412:	44cb      	add	fp, r9
    b414:	428f      	cmp	r7, r1
    b416:	41bf      	sbcs	r7, r7
    b418:	45c2      	cmp	sl, r8
    b41a:	4189      	sbcs	r1, r1
    b41c:	4599      	cmp	r9, r3
    b41e:	419b      	sbcs	r3, r3
    b420:	4593      	cmp	fp, r2
    b422:	4192      	sbcs	r2, r2
    b424:	427f      	negs	r7, r7
    b426:	4249      	negs	r1, r1
    b428:	0c2d      	lsrs	r5, r5, #16
    b42a:	4252      	negs	r2, r2
    b42c:	430f      	orrs	r7, r1
    b42e:	425b      	negs	r3, r3
    b430:	4313      	orrs	r3, r2
    b432:	197f      	adds	r7, r7, r5
    b434:	18ff      	adds	r7, r7, r3
    b436:	465b      	mov	r3, fp
    b438:	193c      	adds	r4, r7, r4
    b43a:	0ddb      	lsrs	r3, r3, #23
    b43c:	9a05      	ldr	r2, [sp, #20]
    b43e:	0264      	lsls	r4, r4, #9
    b440:	431c      	orrs	r4, r3
    b442:	0243      	lsls	r3, r0, #9
    b444:	4313      	orrs	r3, r2
    b446:	1e5d      	subs	r5, r3, #1
    b448:	41ab      	sbcs	r3, r5
    b44a:	465a      	mov	r2, fp
    b44c:	0dc0      	lsrs	r0, r0, #23
    b44e:	4303      	orrs	r3, r0
    b450:	0252      	lsls	r2, r2, #9
    b452:	4313      	orrs	r3, r2
    b454:	01e2      	lsls	r2, r4, #7
    b456:	d556      	bpl.n	b506 <__aeabi_dmul+0x426>
    b458:	2001      	movs	r0, #1
    b45a:	085a      	lsrs	r2, r3, #1
    b45c:	4003      	ands	r3, r0
    b45e:	4313      	orrs	r3, r2
    b460:	07e2      	lsls	r2, r4, #31
    b462:	4313      	orrs	r3, r2
    b464:	0864      	lsrs	r4, r4, #1
    b466:	485a      	ldr	r0, [pc, #360]	; (b5d0 <__aeabi_dmul+0x4f0>)
    b468:	4460      	add	r0, ip
    b46a:	2800      	cmp	r0, #0
    b46c:	dd4d      	ble.n	b50a <__aeabi_dmul+0x42a>
    b46e:	075a      	lsls	r2, r3, #29
    b470:	d009      	beq.n	b486 <__aeabi_dmul+0x3a6>
    b472:	220f      	movs	r2, #15
    b474:	401a      	ands	r2, r3
    b476:	2a04      	cmp	r2, #4
    b478:	d005      	beq.n	b486 <__aeabi_dmul+0x3a6>
    b47a:	1d1a      	adds	r2, r3, #4
    b47c:	429a      	cmp	r2, r3
    b47e:	419b      	sbcs	r3, r3
    b480:	425b      	negs	r3, r3
    b482:	18e4      	adds	r4, r4, r3
    b484:	0013      	movs	r3, r2
    b486:	01e2      	lsls	r2, r4, #7
    b488:	d504      	bpl.n	b494 <__aeabi_dmul+0x3b4>
    b48a:	2080      	movs	r0, #128	; 0x80
    b48c:	4a51      	ldr	r2, [pc, #324]	; (b5d4 <__aeabi_dmul+0x4f4>)
    b48e:	00c0      	lsls	r0, r0, #3
    b490:	4014      	ands	r4, r2
    b492:	4460      	add	r0, ip
    b494:	4a50      	ldr	r2, [pc, #320]	; (b5d8 <__aeabi_dmul+0x4f8>)
    b496:	4290      	cmp	r0, r2
    b498:	dd00      	ble.n	b49c <__aeabi_dmul+0x3bc>
    b49a:	e6e3      	b.n	b264 <__aeabi_dmul+0x184>
    b49c:	2501      	movs	r5, #1
    b49e:	08db      	lsrs	r3, r3, #3
    b4a0:	0762      	lsls	r2, r4, #29
    b4a2:	431a      	orrs	r2, r3
    b4a4:	0264      	lsls	r4, r4, #9
    b4a6:	9b01      	ldr	r3, [sp, #4]
    b4a8:	4691      	mov	r9, r2
    b4aa:	0b22      	lsrs	r2, r4, #12
    b4ac:	0544      	lsls	r4, r0, #21
    b4ae:	0d64      	lsrs	r4, r4, #21
    b4b0:	401d      	ands	r5, r3
    b4b2:	e67c      	b.n	b1ae <__aeabi_dmul+0xce>
    b4b4:	2280      	movs	r2, #128	; 0x80
    b4b6:	4659      	mov	r1, fp
    b4b8:	0312      	lsls	r2, r2, #12
    b4ba:	4211      	tst	r1, r2
    b4bc:	d008      	beq.n	b4d0 <__aeabi_dmul+0x3f0>
    b4be:	4214      	tst	r4, r2
    b4c0:	d106      	bne.n	b4d0 <__aeabi_dmul+0x3f0>
    b4c2:	4322      	orrs	r2, r4
    b4c4:	0312      	lsls	r2, r2, #12
    b4c6:	0b12      	lsrs	r2, r2, #12
    b4c8:	4645      	mov	r5, r8
    b4ca:	4699      	mov	r9, r3
    b4cc:	4c43      	ldr	r4, [pc, #268]	; (b5dc <__aeabi_dmul+0x4fc>)
    b4ce:	e66e      	b.n	b1ae <__aeabi_dmul+0xce>
    b4d0:	465b      	mov	r3, fp
    b4d2:	431a      	orrs	r2, r3
    b4d4:	0312      	lsls	r2, r2, #12
    b4d6:	0b12      	lsrs	r2, r2, #12
    b4d8:	4c40      	ldr	r4, [pc, #256]	; (b5dc <__aeabi_dmul+0x4fc>)
    b4da:	e668      	b.n	b1ae <__aeabi_dmul+0xce>
    b4dc:	0003      	movs	r3, r0
    b4de:	4654      	mov	r4, sl
    b4e0:	3b28      	subs	r3, #40	; 0x28
    b4e2:	409c      	lsls	r4, r3
    b4e4:	2300      	movs	r3, #0
    b4e6:	e6b9      	b.n	b25c <__aeabi_dmul+0x17c>
    b4e8:	f000 fd3a 	bl	bf60 <__clzsi2>
    b4ec:	3020      	adds	r0, #32
    b4ee:	e6a6      	b.n	b23e <__aeabi_dmul+0x15e>
    b4f0:	0003      	movs	r3, r0
    b4f2:	3b28      	subs	r3, #40	; 0x28
    b4f4:	409f      	lsls	r7, r3
    b4f6:	2300      	movs	r3, #0
    b4f8:	46bb      	mov	fp, r7
    b4fa:	4699      	mov	r9, r3
    b4fc:	e68a      	b.n	b214 <__aeabi_dmul+0x134>
    b4fe:	f000 fd2f 	bl	bf60 <__clzsi2>
    b502:	3020      	adds	r0, #32
    b504:	e674      	b.n	b1f0 <__aeabi_dmul+0x110>
    b506:	46b4      	mov	ip, r6
    b508:	e7ad      	b.n	b466 <__aeabi_dmul+0x386>
    b50a:	2501      	movs	r5, #1
    b50c:	1a2a      	subs	r2, r5, r0
    b50e:	2a38      	cmp	r2, #56	; 0x38
    b510:	dd06      	ble.n	b520 <__aeabi_dmul+0x440>
    b512:	9b01      	ldr	r3, [sp, #4]
    b514:	2400      	movs	r4, #0
    b516:	401d      	ands	r5, r3
    b518:	2300      	movs	r3, #0
    b51a:	2200      	movs	r2, #0
    b51c:	4699      	mov	r9, r3
    b51e:	e646      	b.n	b1ae <__aeabi_dmul+0xce>
    b520:	2a1f      	cmp	r2, #31
    b522:	dc21      	bgt.n	b568 <__aeabi_dmul+0x488>
    b524:	2520      	movs	r5, #32
    b526:	0020      	movs	r0, r4
    b528:	1aad      	subs	r5, r5, r2
    b52a:	001e      	movs	r6, r3
    b52c:	40ab      	lsls	r3, r5
    b52e:	40a8      	lsls	r0, r5
    b530:	40d6      	lsrs	r6, r2
    b532:	1e5d      	subs	r5, r3, #1
    b534:	41ab      	sbcs	r3, r5
    b536:	4330      	orrs	r0, r6
    b538:	4318      	orrs	r0, r3
    b53a:	40d4      	lsrs	r4, r2
    b53c:	0743      	lsls	r3, r0, #29
    b53e:	d009      	beq.n	b554 <__aeabi_dmul+0x474>
    b540:	230f      	movs	r3, #15
    b542:	4003      	ands	r3, r0
    b544:	2b04      	cmp	r3, #4
    b546:	d005      	beq.n	b554 <__aeabi_dmul+0x474>
    b548:	0003      	movs	r3, r0
    b54a:	1d18      	adds	r0, r3, #4
    b54c:	4298      	cmp	r0, r3
    b54e:	419b      	sbcs	r3, r3
    b550:	425b      	negs	r3, r3
    b552:	18e4      	adds	r4, r4, r3
    b554:	0223      	lsls	r3, r4, #8
    b556:	d521      	bpl.n	b59c <__aeabi_dmul+0x4bc>
    b558:	2501      	movs	r5, #1
    b55a:	9b01      	ldr	r3, [sp, #4]
    b55c:	2401      	movs	r4, #1
    b55e:	401d      	ands	r5, r3
    b560:	2300      	movs	r3, #0
    b562:	2200      	movs	r2, #0
    b564:	4699      	mov	r9, r3
    b566:	e622      	b.n	b1ae <__aeabi_dmul+0xce>
    b568:	251f      	movs	r5, #31
    b56a:	0021      	movs	r1, r4
    b56c:	426d      	negs	r5, r5
    b56e:	1a28      	subs	r0, r5, r0
    b570:	40c1      	lsrs	r1, r0
    b572:	0008      	movs	r0, r1
    b574:	2a20      	cmp	r2, #32
    b576:	d01d      	beq.n	b5b4 <__aeabi_dmul+0x4d4>
    b578:	355f      	adds	r5, #95	; 0x5f
    b57a:	1aaa      	subs	r2, r5, r2
    b57c:	4094      	lsls	r4, r2
    b57e:	4323      	orrs	r3, r4
    b580:	1e5c      	subs	r4, r3, #1
    b582:	41a3      	sbcs	r3, r4
    b584:	2507      	movs	r5, #7
    b586:	4303      	orrs	r3, r0
    b588:	401d      	ands	r5, r3
    b58a:	2200      	movs	r2, #0
    b58c:	2d00      	cmp	r5, #0
    b58e:	d009      	beq.n	b5a4 <__aeabi_dmul+0x4c4>
    b590:	220f      	movs	r2, #15
    b592:	2400      	movs	r4, #0
    b594:	401a      	ands	r2, r3
    b596:	0018      	movs	r0, r3
    b598:	2a04      	cmp	r2, #4
    b59a:	d1d6      	bne.n	b54a <__aeabi_dmul+0x46a>
    b59c:	0003      	movs	r3, r0
    b59e:	0765      	lsls	r5, r4, #29
    b5a0:	0264      	lsls	r4, r4, #9
    b5a2:	0b22      	lsrs	r2, r4, #12
    b5a4:	08db      	lsrs	r3, r3, #3
    b5a6:	432b      	orrs	r3, r5
    b5a8:	2501      	movs	r5, #1
    b5aa:	4699      	mov	r9, r3
    b5ac:	9b01      	ldr	r3, [sp, #4]
    b5ae:	2400      	movs	r4, #0
    b5b0:	401d      	ands	r5, r3
    b5b2:	e5fc      	b.n	b1ae <__aeabi_dmul+0xce>
    b5b4:	2400      	movs	r4, #0
    b5b6:	e7e2      	b.n	b57e <__aeabi_dmul+0x49e>
    b5b8:	2280      	movs	r2, #128	; 0x80
    b5ba:	2501      	movs	r5, #1
    b5bc:	0312      	lsls	r2, r2, #12
    b5be:	4322      	orrs	r2, r4
    b5c0:	9901      	ldr	r1, [sp, #4]
    b5c2:	0312      	lsls	r2, r2, #12
    b5c4:	0b12      	lsrs	r2, r2, #12
    b5c6:	400d      	ands	r5, r1
    b5c8:	4699      	mov	r9, r3
    b5ca:	4c04      	ldr	r4, [pc, #16]	; (b5dc <__aeabi_dmul+0x4fc>)
    b5cc:	e5ef      	b.n	b1ae <__aeabi_dmul+0xce>
    b5ce:	46c0      	nop			; (mov r8, r8)
    b5d0:	000003ff 	.word	0x000003ff
    b5d4:	feffffff 	.word	0xfeffffff
    b5d8:	000007fe 	.word	0x000007fe
    b5dc:	000007ff 	.word	0x000007ff

0000b5e0 <__aeabi_dsub>:
    b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5e2:	4646      	mov	r6, r8
    b5e4:	46d6      	mov	lr, sl
    b5e6:	464f      	mov	r7, r9
    b5e8:	030c      	lsls	r4, r1, #12
    b5ea:	b5c0      	push	{r6, r7, lr}
    b5ec:	0fcd      	lsrs	r5, r1, #31
    b5ee:	004e      	lsls	r6, r1, #1
    b5f0:	0a61      	lsrs	r1, r4, #9
    b5f2:	0f44      	lsrs	r4, r0, #29
    b5f4:	430c      	orrs	r4, r1
    b5f6:	00c1      	lsls	r1, r0, #3
    b5f8:	0058      	lsls	r0, r3, #1
    b5fa:	0d40      	lsrs	r0, r0, #21
    b5fc:	4684      	mov	ip, r0
    b5fe:	468a      	mov	sl, r1
    b600:	000f      	movs	r7, r1
    b602:	0319      	lsls	r1, r3, #12
    b604:	0f50      	lsrs	r0, r2, #29
    b606:	0a49      	lsrs	r1, r1, #9
    b608:	4301      	orrs	r1, r0
    b60a:	48c6      	ldr	r0, [pc, #792]	; (b924 <__aeabi_dsub+0x344>)
    b60c:	0d76      	lsrs	r6, r6, #21
    b60e:	46a8      	mov	r8, r5
    b610:	0fdb      	lsrs	r3, r3, #31
    b612:	00d2      	lsls	r2, r2, #3
    b614:	4584      	cmp	ip, r0
    b616:	d100      	bne.n	b61a <__aeabi_dsub+0x3a>
    b618:	e0d8      	b.n	b7cc <__aeabi_dsub+0x1ec>
    b61a:	2001      	movs	r0, #1
    b61c:	4043      	eors	r3, r0
    b61e:	42ab      	cmp	r3, r5
    b620:	d100      	bne.n	b624 <__aeabi_dsub+0x44>
    b622:	e0a6      	b.n	b772 <__aeabi_dsub+0x192>
    b624:	4660      	mov	r0, ip
    b626:	1a35      	subs	r5, r6, r0
    b628:	2d00      	cmp	r5, #0
    b62a:	dc00      	bgt.n	b62e <__aeabi_dsub+0x4e>
    b62c:	e105      	b.n	b83a <__aeabi_dsub+0x25a>
    b62e:	2800      	cmp	r0, #0
    b630:	d110      	bne.n	b654 <__aeabi_dsub+0x74>
    b632:	000b      	movs	r3, r1
    b634:	4313      	orrs	r3, r2
    b636:	d100      	bne.n	b63a <__aeabi_dsub+0x5a>
    b638:	e0d7      	b.n	b7ea <__aeabi_dsub+0x20a>
    b63a:	1e6b      	subs	r3, r5, #1
    b63c:	2b00      	cmp	r3, #0
    b63e:	d000      	beq.n	b642 <__aeabi_dsub+0x62>
    b640:	e14b      	b.n	b8da <__aeabi_dsub+0x2fa>
    b642:	4653      	mov	r3, sl
    b644:	1a9f      	subs	r7, r3, r2
    b646:	45ba      	cmp	sl, r7
    b648:	4180      	sbcs	r0, r0
    b64a:	1a64      	subs	r4, r4, r1
    b64c:	4240      	negs	r0, r0
    b64e:	1a24      	subs	r4, r4, r0
    b650:	2601      	movs	r6, #1
    b652:	e01e      	b.n	b692 <__aeabi_dsub+0xb2>
    b654:	4bb3      	ldr	r3, [pc, #716]	; (b924 <__aeabi_dsub+0x344>)
    b656:	429e      	cmp	r6, r3
    b658:	d048      	beq.n	b6ec <__aeabi_dsub+0x10c>
    b65a:	2380      	movs	r3, #128	; 0x80
    b65c:	041b      	lsls	r3, r3, #16
    b65e:	4319      	orrs	r1, r3
    b660:	2d38      	cmp	r5, #56	; 0x38
    b662:	dd00      	ble.n	b666 <__aeabi_dsub+0x86>
    b664:	e119      	b.n	b89a <__aeabi_dsub+0x2ba>
    b666:	2d1f      	cmp	r5, #31
    b668:	dd00      	ble.n	b66c <__aeabi_dsub+0x8c>
    b66a:	e14c      	b.n	b906 <__aeabi_dsub+0x326>
    b66c:	2320      	movs	r3, #32
    b66e:	000f      	movs	r7, r1
    b670:	1b5b      	subs	r3, r3, r5
    b672:	0010      	movs	r0, r2
    b674:	409a      	lsls	r2, r3
    b676:	409f      	lsls	r7, r3
    b678:	40e8      	lsrs	r0, r5
    b67a:	1e53      	subs	r3, r2, #1
    b67c:	419a      	sbcs	r2, r3
    b67e:	40e9      	lsrs	r1, r5
    b680:	4307      	orrs	r7, r0
    b682:	4317      	orrs	r7, r2
    b684:	4653      	mov	r3, sl
    b686:	1bdf      	subs	r7, r3, r7
    b688:	1a61      	subs	r1, r4, r1
    b68a:	45ba      	cmp	sl, r7
    b68c:	41a4      	sbcs	r4, r4
    b68e:	4264      	negs	r4, r4
    b690:	1b0c      	subs	r4, r1, r4
    b692:	0223      	lsls	r3, r4, #8
    b694:	d400      	bmi.n	b698 <__aeabi_dsub+0xb8>
    b696:	e0c5      	b.n	b824 <__aeabi_dsub+0x244>
    b698:	0264      	lsls	r4, r4, #9
    b69a:	0a65      	lsrs	r5, r4, #9
    b69c:	2d00      	cmp	r5, #0
    b69e:	d100      	bne.n	b6a2 <__aeabi_dsub+0xc2>
    b6a0:	e0f6      	b.n	b890 <__aeabi_dsub+0x2b0>
    b6a2:	0028      	movs	r0, r5
    b6a4:	f000 fc5c 	bl	bf60 <__clzsi2>
    b6a8:	0003      	movs	r3, r0
    b6aa:	3b08      	subs	r3, #8
    b6ac:	2b1f      	cmp	r3, #31
    b6ae:	dd00      	ble.n	b6b2 <__aeabi_dsub+0xd2>
    b6b0:	e0e9      	b.n	b886 <__aeabi_dsub+0x2a6>
    b6b2:	2220      	movs	r2, #32
    b6b4:	003c      	movs	r4, r7
    b6b6:	1ad2      	subs	r2, r2, r3
    b6b8:	409d      	lsls	r5, r3
    b6ba:	40d4      	lsrs	r4, r2
    b6bc:	409f      	lsls	r7, r3
    b6be:	4325      	orrs	r5, r4
    b6c0:	429e      	cmp	r6, r3
    b6c2:	dd00      	ble.n	b6c6 <__aeabi_dsub+0xe6>
    b6c4:	e0db      	b.n	b87e <__aeabi_dsub+0x29e>
    b6c6:	1b9e      	subs	r6, r3, r6
    b6c8:	1c73      	adds	r3, r6, #1
    b6ca:	2b1f      	cmp	r3, #31
    b6cc:	dd00      	ble.n	b6d0 <__aeabi_dsub+0xf0>
    b6ce:	e10a      	b.n	b8e6 <__aeabi_dsub+0x306>
    b6d0:	2220      	movs	r2, #32
    b6d2:	0038      	movs	r0, r7
    b6d4:	1ad2      	subs	r2, r2, r3
    b6d6:	0029      	movs	r1, r5
    b6d8:	4097      	lsls	r7, r2
    b6da:	002c      	movs	r4, r5
    b6dc:	4091      	lsls	r1, r2
    b6de:	40d8      	lsrs	r0, r3
    b6e0:	1e7a      	subs	r2, r7, #1
    b6e2:	4197      	sbcs	r7, r2
    b6e4:	40dc      	lsrs	r4, r3
    b6e6:	2600      	movs	r6, #0
    b6e8:	4301      	orrs	r1, r0
    b6ea:	430f      	orrs	r7, r1
    b6ec:	077b      	lsls	r3, r7, #29
    b6ee:	d009      	beq.n	b704 <__aeabi_dsub+0x124>
    b6f0:	230f      	movs	r3, #15
    b6f2:	403b      	ands	r3, r7
    b6f4:	2b04      	cmp	r3, #4
    b6f6:	d005      	beq.n	b704 <__aeabi_dsub+0x124>
    b6f8:	1d3b      	adds	r3, r7, #4
    b6fa:	42bb      	cmp	r3, r7
    b6fc:	41bf      	sbcs	r7, r7
    b6fe:	427f      	negs	r7, r7
    b700:	19e4      	adds	r4, r4, r7
    b702:	001f      	movs	r7, r3
    b704:	0223      	lsls	r3, r4, #8
    b706:	d525      	bpl.n	b754 <__aeabi_dsub+0x174>
    b708:	4b86      	ldr	r3, [pc, #536]	; (b924 <__aeabi_dsub+0x344>)
    b70a:	3601      	adds	r6, #1
    b70c:	429e      	cmp	r6, r3
    b70e:	d100      	bne.n	b712 <__aeabi_dsub+0x132>
    b710:	e0af      	b.n	b872 <__aeabi_dsub+0x292>
    b712:	4b85      	ldr	r3, [pc, #532]	; (b928 <__aeabi_dsub+0x348>)
    b714:	2501      	movs	r5, #1
    b716:	401c      	ands	r4, r3
    b718:	4643      	mov	r3, r8
    b71a:	0762      	lsls	r2, r4, #29
    b71c:	08ff      	lsrs	r7, r7, #3
    b71e:	0264      	lsls	r4, r4, #9
    b720:	0576      	lsls	r6, r6, #21
    b722:	4317      	orrs	r7, r2
    b724:	0b24      	lsrs	r4, r4, #12
    b726:	0d76      	lsrs	r6, r6, #21
    b728:	401d      	ands	r5, r3
    b72a:	2100      	movs	r1, #0
    b72c:	0324      	lsls	r4, r4, #12
    b72e:	0b23      	lsrs	r3, r4, #12
    b730:	0d0c      	lsrs	r4, r1, #20
    b732:	4a7e      	ldr	r2, [pc, #504]	; (b92c <__aeabi_dsub+0x34c>)
    b734:	0524      	lsls	r4, r4, #20
    b736:	431c      	orrs	r4, r3
    b738:	4014      	ands	r4, r2
    b73a:	0533      	lsls	r3, r6, #20
    b73c:	4323      	orrs	r3, r4
    b73e:	005b      	lsls	r3, r3, #1
    b740:	07ed      	lsls	r5, r5, #31
    b742:	085b      	lsrs	r3, r3, #1
    b744:	432b      	orrs	r3, r5
    b746:	0038      	movs	r0, r7
    b748:	0019      	movs	r1, r3
    b74a:	bc1c      	pop	{r2, r3, r4}
    b74c:	4690      	mov	r8, r2
    b74e:	4699      	mov	r9, r3
    b750:	46a2      	mov	sl, r4
    b752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b754:	2501      	movs	r5, #1
    b756:	4643      	mov	r3, r8
    b758:	0762      	lsls	r2, r4, #29
    b75a:	08ff      	lsrs	r7, r7, #3
    b75c:	4317      	orrs	r7, r2
    b75e:	08e4      	lsrs	r4, r4, #3
    b760:	401d      	ands	r5, r3
    b762:	4b70      	ldr	r3, [pc, #448]	; (b924 <__aeabi_dsub+0x344>)
    b764:	429e      	cmp	r6, r3
    b766:	d036      	beq.n	b7d6 <__aeabi_dsub+0x1f6>
    b768:	0324      	lsls	r4, r4, #12
    b76a:	0576      	lsls	r6, r6, #21
    b76c:	0b24      	lsrs	r4, r4, #12
    b76e:	0d76      	lsrs	r6, r6, #21
    b770:	e7db      	b.n	b72a <__aeabi_dsub+0x14a>
    b772:	4663      	mov	r3, ip
    b774:	1af3      	subs	r3, r6, r3
    b776:	2b00      	cmp	r3, #0
    b778:	dc00      	bgt.n	b77c <__aeabi_dsub+0x19c>
    b77a:	e094      	b.n	b8a6 <__aeabi_dsub+0x2c6>
    b77c:	4660      	mov	r0, ip
    b77e:	2800      	cmp	r0, #0
    b780:	d035      	beq.n	b7ee <__aeabi_dsub+0x20e>
    b782:	4868      	ldr	r0, [pc, #416]	; (b924 <__aeabi_dsub+0x344>)
    b784:	4286      	cmp	r6, r0
    b786:	d0b1      	beq.n	b6ec <__aeabi_dsub+0x10c>
    b788:	2780      	movs	r7, #128	; 0x80
    b78a:	043f      	lsls	r7, r7, #16
    b78c:	4339      	orrs	r1, r7
    b78e:	2b38      	cmp	r3, #56	; 0x38
    b790:	dc00      	bgt.n	b794 <__aeabi_dsub+0x1b4>
    b792:	e0fd      	b.n	b990 <__aeabi_dsub+0x3b0>
    b794:	430a      	orrs	r2, r1
    b796:	0017      	movs	r7, r2
    b798:	2100      	movs	r1, #0
    b79a:	1e7a      	subs	r2, r7, #1
    b79c:	4197      	sbcs	r7, r2
    b79e:	4457      	add	r7, sl
    b7a0:	4557      	cmp	r7, sl
    b7a2:	4180      	sbcs	r0, r0
    b7a4:	1909      	adds	r1, r1, r4
    b7a6:	4244      	negs	r4, r0
    b7a8:	190c      	adds	r4, r1, r4
    b7aa:	0223      	lsls	r3, r4, #8
    b7ac:	d53a      	bpl.n	b824 <__aeabi_dsub+0x244>
    b7ae:	4b5d      	ldr	r3, [pc, #372]	; (b924 <__aeabi_dsub+0x344>)
    b7b0:	3601      	adds	r6, #1
    b7b2:	429e      	cmp	r6, r3
    b7b4:	d100      	bne.n	b7b8 <__aeabi_dsub+0x1d8>
    b7b6:	e14b      	b.n	ba50 <__aeabi_dsub+0x470>
    b7b8:	2201      	movs	r2, #1
    b7ba:	4b5b      	ldr	r3, [pc, #364]	; (b928 <__aeabi_dsub+0x348>)
    b7bc:	401c      	ands	r4, r3
    b7be:	087b      	lsrs	r3, r7, #1
    b7c0:	4017      	ands	r7, r2
    b7c2:	431f      	orrs	r7, r3
    b7c4:	07e2      	lsls	r2, r4, #31
    b7c6:	4317      	orrs	r7, r2
    b7c8:	0864      	lsrs	r4, r4, #1
    b7ca:	e78f      	b.n	b6ec <__aeabi_dsub+0x10c>
    b7cc:	0008      	movs	r0, r1
    b7ce:	4310      	orrs	r0, r2
    b7d0:	d000      	beq.n	b7d4 <__aeabi_dsub+0x1f4>
    b7d2:	e724      	b.n	b61e <__aeabi_dsub+0x3e>
    b7d4:	e721      	b.n	b61a <__aeabi_dsub+0x3a>
    b7d6:	0023      	movs	r3, r4
    b7d8:	433b      	orrs	r3, r7
    b7da:	d100      	bne.n	b7de <__aeabi_dsub+0x1fe>
    b7dc:	e1b9      	b.n	bb52 <__aeabi_dsub+0x572>
    b7de:	2280      	movs	r2, #128	; 0x80
    b7e0:	0312      	lsls	r2, r2, #12
    b7e2:	4314      	orrs	r4, r2
    b7e4:	0324      	lsls	r4, r4, #12
    b7e6:	0b24      	lsrs	r4, r4, #12
    b7e8:	e79f      	b.n	b72a <__aeabi_dsub+0x14a>
    b7ea:	002e      	movs	r6, r5
    b7ec:	e77e      	b.n	b6ec <__aeabi_dsub+0x10c>
    b7ee:	0008      	movs	r0, r1
    b7f0:	4310      	orrs	r0, r2
    b7f2:	d100      	bne.n	b7f6 <__aeabi_dsub+0x216>
    b7f4:	e0ca      	b.n	b98c <__aeabi_dsub+0x3ac>
    b7f6:	1e58      	subs	r0, r3, #1
    b7f8:	4684      	mov	ip, r0
    b7fa:	2800      	cmp	r0, #0
    b7fc:	d000      	beq.n	b800 <__aeabi_dsub+0x220>
    b7fe:	e0e7      	b.n	b9d0 <__aeabi_dsub+0x3f0>
    b800:	4452      	add	r2, sl
    b802:	4552      	cmp	r2, sl
    b804:	4180      	sbcs	r0, r0
    b806:	1864      	adds	r4, r4, r1
    b808:	4240      	negs	r0, r0
    b80a:	1824      	adds	r4, r4, r0
    b80c:	0017      	movs	r7, r2
    b80e:	2601      	movs	r6, #1
    b810:	0223      	lsls	r3, r4, #8
    b812:	d507      	bpl.n	b824 <__aeabi_dsub+0x244>
    b814:	2602      	movs	r6, #2
    b816:	e7cf      	b.n	b7b8 <__aeabi_dsub+0x1d8>
    b818:	4664      	mov	r4, ip
    b81a:	432c      	orrs	r4, r5
    b81c:	d100      	bne.n	b820 <__aeabi_dsub+0x240>
    b81e:	e1b3      	b.n	bb88 <__aeabi_dsub+0x5a8>
    b820:	002c      	movs	r4, r5
    b822:	4667      	mov	r7, ip
    b824:	077b      	lsls	r3, r7, #29
    b826:	d000      	beq.n	b82a <__aeabi_dsub+0x24a>
    b828:	e762      	b.n	b6f0 <__aeabi_dsub+0x110>
    b82a:	0763      	lsls	r3, r4, #29
    b82c:	08ff      	lsrs	r7, r7, #3
    b82e:	431f      	orrs	r7, r3
    b830:	2501      	movs	r5, #1
    b832:	4643      	mov	r3, r8
    b834:	08e4      	lsrs	r4, r4, #3
    b836:	401d      	ands	r5, r3
    b838:	e793      	b.n	b762 <__aeabi_dsub+0x182>
    b83a:	2d00      	cmp	r5, #0
    b83c:	d178      	bne.n	b930 <__aeabi_dsub+0x350>
    b83e:	1c75      	adds	r5, r6, #1
    b840:	056d      	lsls	r5, r5, #21
    b842:	0d6d      	lsrs	r5, r5, #21
    b844:	2d01      	cmp	r5, #1
    b846:	dc00      	bgt.n	b84a <__aeabi_dsub+0x26a>
    b848:	e0f2      	b.n	ba30 <__aeabi_dsub+0x450>
    b84a:	4650      	mov	r0, sl
    b84c:	1a80      	subs	r0, r0, r2
    b84e:	4582      	cmp	sl, r0
    b850:	41bf      	sbcs	r7, r7
    b852:	1a65      	subs	r5, r4, r1
    b854:	427f      	negs	r7, r7
    b856:	1bed      	subs	r5, r5, r7
    b858:	4684      	mov	ip, r0
    b85a:	0228      	lsls	r0, r5, #8
    b85c:	d400      	bmi.n	b860 <__aeabi_dsub+0x280>
    b85e:	e08c      	b.n	b97a <__aeabi_dsub+0x39a>
    b860:	4650      	mov	r0, sl
    b862:	1a17      	subs	r7, r2, r0
    b864:	42ba      	cmp	r2, r7
    b866:	4192      	sbcs	r2, r2
    b868:	1b0c      	subs	r4, r1, r4
    b86a:	4255      	negs	r5, r2
    b86c:	1b65      	subs	r5, r4, r5
    b86e:	4698      	mov	r8, r3
    b870:	e714      	b.n	b69c <__aeabi_dsub+0xbc>
    b872:	2501      	movs	r5, #1
    b874:	4643      	mov	r3, r8
    b876:	2400      	movs	r4, #0
    b878:	401d      	ands	r5, r3
    b87a:	2700      	movs	r7, #0
    b87c:	e755      	b.n	b72a <__aeabi_dsub+0x14a>
    b87e:	4c2a      	ldr	r4, [pc, #168]	; (b928 <__aeabi_dsub+0x348>)
    b880:	1af6      	subs	r6, r6, r3
    b882:	402c      	ands	r4, r5
    b884:	e732      	b.n	b6ec <__aeabi_dsub+0x10c>
    b886:	003d      	movs	r5, r7
    b888:	3828      	subs	r0, #40	; 0x28
    b88a:	4085      	lsls	r5, r0
    b88c:	2700      	movs	r7, #0
    b88e:	e717      	b.n	b6c0 <__aeabi_dsub+0xe0>
    b890:	0038      	movs	r0, r7
    b892:	f000 fb65 	bl	bf60 <__clzsi2>
    b896:	3020      	adds	r0, #32
    b898:	e706      	b.n	b6a8 <__aeabi_dsub+0xc8>
    b89a:	430a      	orrs	r2, r1
    b89c:	0017      	movs	r7, r2
    b89e:	2100      	movs	r1, #0
    b8a0:	1e7a      	subs	r2, r7, #1
    b8a2:	4197      	sbcs	r7, r2
    b8a4:	e6ee      	b.n	b684 <__aeabi_dsub+0xa4>
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	d000      	beq.n	b8ac <__aeabi_dsub+0x2cc>
    b8aa:	e0e5      	b.n	ba78 <__aeabi_dsub+0x498>
    b8ac:	1c73      	adds	r3, r6, #1
    b8ae:	469c      	mov	ip, r3
    b8b0:	055b      	lsls	r3, r3, #21
    b8b2:	0d5b      	lsrs	r3, r3, #21
    b8b4:	2b01      	cmp	r3, #1
    b8b6:	dc00      	bgt.n	b8ba <__aeabi_dsub+0x2da>
    b8b8:	e09f      	b.n	b9fa <__aeabi_dsub+0x41a>
    b8ba:	4b1a      	ldr	r3, [pc, #104]	; (b924 <__aeabi_dsub+0x344>)
    b8bc:	459c      	cmp	ip, r3
    b8be:	d100      	bne.n	b8c2 <__aeabi_dsub+0x2e2>
    b8c0:	e0c5      	b.n	ba4e <__aeabi_dsub+0x46e>
    b8c2:	4452      	add	r2, sl
    b8c4:	4552      	cmp	r2, sl
    b8c6:	4180      	sbcs	r0, r0
    b8c8:	1864      	adds	r4, r4, r1
    b8ca:	4240      	negs	r0, r0
    b8cc:	1824      	adds	r4, r4, r0
    b8ce:	07e7      	lsls	r7, r4, #31
    b8d0:	0852      	lsrs	r2, r2, #1
    b8d2:	4317      	orrs	r7, r2
    b8d4:	0864      	lsrs	r4, r4, #1
    b8d6:	4666      	mov	r6, ip
    b8d8:	e708      	b.n	b6ec <__aeabi_dsub+0x10c>
    b8da:	4812      	ldr	r0, [pc, #72]	; (b924 <__aeabi_dsub+0x344>)
    b8dc:	4285      	cmp	r5, r0
    b8de:	d100      	bne.n	b8e2 <__aeabi_dsub+0x302>
    b8e0:	e085      	b.n	b9ee <__aeabi_dsub+0x40e>
    b8e2:	001d      	movs	r5, r3
    b8e4:	e6bc      	b.n	b660 <__aeabi_dsub+0x80>
    b8e6:	0029      	movs	r1, r5
    b8e8:	3e1f      	subs	r6, #31
    b8ea:	40f1      	lsrs	r1, r6
    b8ec:	2b20      	cmp	r3, #32
    b8ee:	d100      	bne.n	b8f2 <__aeabi_dsub+0x312>
    b8f0:	e07f      	b.n	b9f2 <__aeabi_dsub+0x412>
    b8f2:	2240      	movs	r2, #64	; 0x40
    b8f4:	1ad3      	subs	r3, r2, r3
    b8f6:	409d      	lsls	r5, r3
    b8f8:	432f      	orrs	r7, r5
    b8fa:	1e7d      	subs	r5, r7, #1
    b8fc:	41af      	sbcs	r7, r5
    b8fe:	2400      	movs	r4, #0
    b900:	430f      	orrs	r7, r1
    b902:	2600      	movs	r6, #0
    b904:	e78e      	b.n	b824 <__aeabi_dsub+0x244>
    b906:	002b      	movs	r3, r5
    b908:	000f      	movs	r7, r1
    b90a:	3b20      	subs	r3, #32
    b90c:	40df      	lsrs	r7, r3
    b90e:	2d20      	cmp	r5, #32
    b910:	d071      	beq.n	b9f6 <__aeabi_dsub+0x416>
    b912:	2340      	movs	r3, #64	; 0x40
    b914:	1b5d      	subs	r5, r3, r5
    b916:	40a9      	lsls	r1, r5
    b918:	430a      	orrs	r2, r1
    b91a:	1e51      	subs	r1, r2, #1
    b91c:	418a      	sbcs	r2, r1
    b91e:	2100      	movs	r1, #0
    b920:	4317      	orrs	r7, r2
    b922:	e6af      	b.n	b684 <__aeabi_dsub+0xa4>
    b924:	000007ff 	.word	0x000007ff
    b928:	ff7fffff 	.word	0xff7fffff
    b92c:	800fffff 	.word	0x800fffff
    b930:	2e00      	cmp	r6, #0
    b932:	d03e      	beq.n	b9b2 <__aeabi_dsub+0x3d2>
    b934:	4eb3      	ldr	r6, [pc, #716]	; (bc04 <__aeabi_dsub+0x624>)
    b936:	45b4      	cmp	ip, r6
    b938:	d045      	beq.n	b9c6 <__aeabi_dsub+0x3e6>
    b93a:	2680      	movs	r6, #128	; 0x80
    b93c:	0436      	lsls	r6, r6, #16
    b93e:	426d      	negs	r5, r5
    b940:	4334      	orrs	r4, r6
    b942:	2d38      	cmp	r5, #56	; 0x38
    b944:	dd00      	ble.n	b948 <__aeabi_dsub+0x368>
    b946:	e0a8      	b.n	ba9a <__aeabi_dsub+0x4ba>
    b948:	2d1f      	cmp	r5, #31
    b94a:	dd00      	ble.n	b94e <__aeabi_dsub+0x36e>
    b94c:	e11f      	b.n	bb8e <__aeabi_dsub+0x5ae>
    b94e:	2620      	movs	r6, #32
    b950:	0027      	movs	r7, r4
    b952:	4650      	mov	r0, sl
    b954:	1b76      	subs	r6, r6, r5
    b956:	40b7      	lsls	r7, r6
    b958:	40e8      	lsrs	r0, r5
    b95a:	4307      	orrs	r7, r0
    b95c:	4650      	mov	r0, sl
    b95e:	40b0      	lsls	r0, r6
    b960:	1e46      	subs	r6, r0, #1
    b962:	41b0      	sbcs	r0, r6
    b964:	40ec      	lsrs	r4, r5
    b966:	4338      	orrs	r0, r7
    b968:	1a17      	subs	r7, r2, r0
    b96a:	42ba      	cmp	r2, r7
    b96c:	4192      	sbcs	r2, r2
    b96e:	1b0c      	subs	r4, r1, r4
    b970:	4252      	negs	r2, r2
    b972:	1aa4      	subs	r4, r4, r2
    b974:	4666      	mov	r6, ip
    b976:	4698      	mov	r8, r3
    b978:	e68b      	b.n	b692 <__aeabi_dsub+0xb2>
    b97a:	4664      	mov	r4, ip
    b97c:	4667      	mov	r7, ip
    b97e:	432c      	orrs	r4, r5
    b980:	d000      	beq.n	b984 <__aeabi_dsub+0x3a4>
    b982:	e68b      	b.n	b69c <__aeabi_dsub+0xbc>
    b984:	2500      	movs	r5, #0
    b986:	2600      	movs	r6, #0
    b988:	2700      	movs	r7, #0
    b98a:	e6ea      	b.n	b762 <__aeabi_dsub+0x182>
    b98c:	001e      	movs	r6, r3
    b98e:	e6ad      	b.n	b6ec <__aeabi_dsub+0x10c>
    b990:	2b1f      	cmp	r3, #31
    b992:	dc60      	bgt.n	ba56 <__aeabi_dsub+0x476>
    b994:	2720      	movs	r7, #32
    b996:	1af8      	subs	r0, r7, r3
    b998:	000f      	movs	r7, r1
    b99a:	4684      	mov	ip, r0
    b99c:	4087      	lsls	r7, r0
    b99e:	0010      	movs	r0, r2
    b9a0:	40d8      	lsrs	r0, r3
    b9a2:	4307      	orrs	r7, r0
    b9a4:	4660      	mov	r0, ip
    b9a6:	4082      	lsls	r2, r0
    b9a8:	1e50      	subs	r0, r2, #1
    b9aa:	4182      	sbcs	r2, r0
    b9ac:	40d9      	lsrs	r1, r3
    b9ae:	4317      	orrs	r7, r2
    b9b0:	e6f5      	b.n	b79e <__aeabi_dsub+0x1be>
    b9b2:	0026      	movs	r6, r4
    b9b4:	4650      	mov	r0, sl
    b9b6:	4306      	orrs	r6, r0
    b9b8:	d005      	beq.n	b9c6 <__aeabi_dsub+0x3e6>
    b9ba:	43ed      	mvns	r5, r5
    b9bc:	2d00      	cmp	r5, #0
    b9be:	d0d3      	beq.n	b968 <__aeabi_dsub+0x388>
    b9c0:	4e90      	ldr	r6, [pc, #576]	; (bc04 <__aeabi_dsub+0x624>)
    b9c2:	45b4      	cmp	ip, r6
    b9c4:	d1bd      	bne.n	b942 <__aeabi_dsub+0x362>
    b9c6:	000c      	movs	r4, r1
    b9c8:	0017      	movs	r7, r2
    b9ca:	4666      	mov	r6, ip
    b9cc:	4698      	mov	r8, r3
    b9ce:	e68d      	b.n	b6ec <__aeabi_dsub+0x10c>
    b9d0:	488c      	ldr	r0, [pc, #560]	; (bc04 <__aeabi_dsub+0x624>)
    b9d2:	4283      	cmp	r3, r0
    b9d4:	d00b      	beq.n	b9ee <__aeabi_dsub+0x40e>
    b9d6:	4663      	mov	r3, ip
    b9d8:	e6d9      	b.n	b78e <__aeabi_dsub+0x1ae>
    b9da:	2d00      	cmp	r5, #0
    b9dc:	d000      	beq.n	b9e0 <__aeabi_dsub+0x400>
    b9de:	e096      	b.n	bb0e <__aeabi_dsub+0x52e>
    b9e0:	0008      	movs	r0, r1
    b9e2:	4310      	orrs	r0, r2
    b9e4:	d100      	bne.n	b9e8 <__aeabi_dsub+0x408>
    b9e6:	e0e2      	b.n	bbae <__aeabi_dsub+0x5ce>
    b9e8:	000c      	movs	r4, r1
    b9ea:	0017      	movs	r7, r2
    b9ec:	4698      	mov	r8, r3
    b9ee:	4e85      	ldr	r6, [pc, #532]	; (bc04 <__aeabi_dsub+0x624>)
    b9f0:	e67c      	b.n	b6ec <__aeabi_dsub+0x10c>
    b9f2:	2500      	movs	r5, #0
    b9f4:	e780      	b.n	b8f8 <__aeabi_dsub+0x318>
    b9f6:	2100      	movs	r1, #0
    b9f8:	e78e      	b.n	b918 <__aeabi_dsub+0x338>
    b9fa:	0023      	movs	r3, r4
    b9fc:	4650      	mov	r0, sl
    b9fe:	4303      	orrs	r3, r0
    ba00:	2e00      	cmp	r6, #0
    ba02:	d000      	beq.n	ba06 <__aeabi_dsub+0x426>
    ba04:	e0a8      	b.n	bb58 <__aeabi_dsub+0x578>
    ba06:	2b00      	cmp	r3, #0
    ba08:	d100      	bne.n	ba0c <__aeabi_dsub+0x42c>
    ba0a:	e0de      	b.n	bbca <__aeabi_dsub+0x5ea>
    ba0c:	000b      	movs	r3, r1
    ba0e:	4313      	orrs	r3, r2
    ba10:	d100      	bne.n	ba14 <__aeabi_dsub+0x434>
    ba12:	e66b      	b.n	b6ec <__aeabi_dsub+0x10c>
    ba14:	4452      	add	r2, sl
    ba16:	4552      	cmp	r2, sl
    ba18:	4180      	sbcs	r0, r0
    ba1a:	1864      	adds	r4, r4, r1
    ba1c:	4240      	negs	r0, r0
    ba1e:	1824      	adds	r4, r4, r0
    ba20:	0017      	movs	r7, r2
    ba22:	0223      	lsls	r3, r4, #8
    ba24:	d400      	bmi.n	ba28 <__aeabi_dsub+0x448>
    ba26:	e6fd      	b.n	b824 <__aeabi_dsub+0x244>
    ba28:	4b77      	ldr	r3, [pc, #476]	; (bc08 <__aeabi_dsub+0x628>)
    ba2a:	4666      	mov	r6, ip
    ba2c:	401c      	ands	r4, r3
    ba2e:	e65d      	b.n	b6ec <__aeabi_dsub+0x10c>
    ba30:	0025      	movs	r5, r4
    ba32:	4650      	mov	r0, sl
    ba34:	4305      	orrs	r5, r0
    ba36:	2e00      	cmp	r6, #0
    ba38:	d1cf      	bne.n	b9da <__aeabi_dsub+0x3fa>
    ba3a:	2d00      	cmp	r5, #0
    ba3c:	d14f      	bne.n	bade <__aeabi_dsub+0x4fe>
    ba3e:	000c      	movs	r4, r1
    ba40:	4314      	orrs	r4, r2
    ba42:	d100      	bne.n	ba46 <__aeabi_dsub+0x466>
    ba44:	e0a0      	b.n	bb88 <__aeabi_dsub+0x5a8>
    ba46:	000c      	movs	r4, r1
    ba48:	0017      	movs	r7, r2
    ba4a:	4698      	mov	r8, r3
    ba4c:	e64e      	b.n	b6ec <__aeabi_dsub+0x10c>
    ba4e:	4666      	mov	r6, ip
    ba50:	2400      	movs	r4, #0
    ba52:	2700      	movs	r7, #0
    ba54:	e685      	b.n	b762 <__aeabi_dsub+0x182>
    ba56:	001f      	movs	r7, r3
    ba58:	0008      	movs	r0, r1
    ba5a:	3f20      	subs	r7, #32
    ba5c:	40f8      	lsrs	r0, r7
    ba5e:	0007      	movs	r7, r0
    ba60:	2b20      	cmp	r3, #32
    ba62:	d100      	bne.n	ba66 <__aeabi_dsub+0x486>
    ba64:	e08e      	b.n	bb84 <__aeabi_dsub+0x5a4>
    ba66:	2040      	movs	r0, #64	; 0x40
    ba68:	1ac3      	subs	r3, r0, r3
    ba6a:	4099      	lsls	r1, r3
    ba6c:	430a      	orrs	r2, r1
    ba6e:	1e51      	subs	r1, r2, #1
    ba70:	418a      	sbcs	r2, r1
    ba72:	2100      	movs	r1, #0
    ba74:	4317      	orrs	r7, r2
    ba76:	e692      	b.n	b79e <__aeabi_dsub+0x1be>
    ba78:	2e00      	cmp	r6, #0
    ba7a:	d114      	bne.n	baa6 <__aeabi_dsub+0x4c6>
    ba7c:	0026      	movs	r6, r4
    ba7e:	4650      	mov	r0, sl
    ba80:	4306      	orrs	r6, r0
    ba82:	d062      	beq.n	bb4a <__aeabi_dsub+0x56a>
    ba84:	43db      	mvns	r3, r3
    ba86:	2b00      	cmp	r3, #0
    ba88:	d15c      	bne.n	bb44 <__aeabi_dsub+0x564>
    ba8a:	1887      	adds	r7, r0, r2
    ba8c:	4297      	cmp	r7, r2
    ba8e:	4192      	sbcs	r2, r2
    ba90:	1864      	adds	r4, r4, r1
    ba92:	4252      	negs	r2, r2
    ba94:	18a4      	adds	r4, r4, r2
    ba96:	4666      	mov	r6, ip
    ba98:	e687      	b.n	b7aa <__aeabi_dsub+0x1ca>
    ba9a:	4650      	mov	r0, sl
    ba9c:	4320      	orrs	r0, r4
    ba9e:	1e44      	subs	r4, r0, #1
    baa0:	41a0      	sbcs	r0, r4
    baa2:	2400      	movs	r4, #0
    baa4:	e760      	b.n	b968 <__aeabi_dsub+0x388>
    baa6:	4e57      	ldr	r6, [pc, #348]	; (bc04 <__aeabi_dsub+0x624>)
    baa8:	45b4      	cmp	ip, r6
    baaa:	d04e      	beq.n	bb4a <__aeabi_dsub+0x56a>
    baac:	2680      	movs	r6, #128	; 0x80
    baae:	0436      	lsls	r6, r6, #16
    bab0:	425b      	negs	r3, r3
    bab2:	4334      	orrs	r4, r6
    bab4:	2b38      	cmp	r3, #56	; 0x38
    bab6:	dd00      	ble.n	baba <__aeabi_dsub+0x4da>
    bab8:	e07f      	b.n	bbba <__aeabi_dsub+0x5da>
    baba:	2b1f      	cmp	r3, #31
    babc:	dd00      	ble.n	bac0 <__aeabi_dsub+0x4e0>
    babe:	e08b      	b.n	bbd8 <__aeabi_dsub+0x5f8>
    bac0:	2620      	movs	r6, #32
    bac2:	0027      	movs	r7, r4
    bac4:	4650      	mov	r0, sl
    bac6:	1af6      	subs	r6, r6, r3
    bac8:	40b7      	lsls	r7, r6
    baca:	40d8      	lsrs	r0, r3
    bacc:	4307      	orrs	r7, r0
    bace:	4650      	mov	r0, sl
    bad0:	40b0      	lsls	r0, r6
    bad2:	1e46      	subs	r6, r0, #1
    bad4:	41b0      	sbcs	r0, r6
    bad6:	4307      	orrs	r7, r0
    bad8:	40dc      	lsrs	r4, r3
    bada:	18bf      	adds	r7, r7, r2
    badc:	e7d6      	b.n	ba8c <__aeabi_dsub+0x4ac>
    bade:	000d      	movs	r5, r1
    bae0:	4315      	orrs	r5, r2
    bae2:	d100      	bne.n	bae6 <__aeabi_dsub+0x506>
    bae4:	e602      	b.n	b6ec <__aeabi_dsub+0x10c>
    bae6:	4650      	mov	r0, sl
    bae8:	1a80      	subs	r0, r0, r2
    baea:	4582      	cmp	sl, r0
    baec:	41bf      	sbcs	r7, r7
    baee:	1a65      	subs	r5, r4, r1
    baf0:	427f      	negs	r7, r7
    baf2:	1bed      	subs	r5, r5, r7
    baf4:	4684      	mov	ip, r0
    baf6:	0228      	lsls	r0, r5, #8
    baf8:	d400      	bmi.n	bafc <__aeabi_dsub+0x51c>
    bafa:	e68d      	b.n	b818 <__aeabi_dsub+0x238>
    bafc:	4650      	mov	r0, sl
    bafe:	1a17      	subs	r7, r2, r0
    bb00:	42ba      	cmp	r2, r7
    bb02:	4192      	sbcs	r2, r2
    bb04:	1b0c      	subs	r4, r1, r4
    bb06:	4252      	negs	r2, r2
    bb08:	1aa4      	subs	r4, r4, r2
    bb0a:	4698      	mov	r8, r3
    bb0c:	e5ee      	b.n	b6ec <__aeabi_dsub+0x10c>
    bb0e:	000d      	movs	r5, r1
    bb10:	4315      	orrs	r5, r2
    bb12:	d100      	bne.n	bb16 <__aeabi_dsub+0x536>
    bb14:	e76b      	b.n	b9ee <__aeabi_dsub+0x40e>
    bb16:	4650      	mov	r0, sl
    bb18:	0767      	lsls	r7, r4, #29
    bb1a:	08c0      	lsrs	r0, r0, #3
    bb1c:	4307      	orrs	r7, r0
    bb1e:	2080      	movs	r0, #128	; 0x80
    bb20:	08e4      	lsrs	r4, r4, #3
    bb22:	0300      	lsls	r0, r0, #12
    bb24:	4204      	tst	r4, r0
    bb26:	d007      	beq.n	bb38 <__aeabi_dsub+0x558>
    bb28:	08cd      	lsrs	r5, r1, #3
    bb2a:	4205      	tst	r5, r0
    bb2c:	d104      	bne.n	bb38 <__aeabi_dsub+0x558>
    bb2e:	002c      	movs	r4, r5
    bb30:	4698      	mov	r8, r3
    bb32:	08d7      	lsrs	r7, r2, #3
    bb34:	0749      	lsls	r1, r1, #29
    bb36:	430f      	orrs	r7, r1
    bb38:	0f7b      	lsrs	r3, r7, #29
    bb3a:	00e4      	lsls	r4, r4, #3
    bb3c:	431c      	orrs	r4, r3
    bb3e:	00ff      	lsls	r7, r7, #3
    bb40:	4e30      	ldr	r6, [pc, #192]	; (bc04 <__aeabi_dsub+0x624>)
    bb42:	e5d3      	b.n	b6ec <__aeabi_dsub+0x10c>
    bb44:	4e2f      	ldr	r6, [pc, #188]	; (bc04 <__aeabi_dsub+0x624>)
    bb46:	45b4      	cmp	ip, r6
    bb48:	d1b4      	bne.n	bab4 <__aeabi_dsub+0x4d4>
    bb4a:	000c      	movs	r4, r1
    bb4c:	0017      	movs	r7, r2
    bb4e:	4666      	mov	r6, ip
    bb50:	e5cc      	b.n	b6ec <__aeabi_dsub+0x10c>
    bb52:	2700      	movs	r7, #0
    bb54:	2400      	movs	r4, #0
    bb56:	e5e8      	b.n	b72a <__aeabi_dsub+0x14a>
    bb58:	2b00      	cmp	r3, #0
    bb5a:	d039      	beq.n	bbd0 <__aeabi_dsub+0x5f0>
    bb5c:	000b      	movs	r3, r1
    bb5e:	4313      	orrs	r3, r2
    bb60:	d100      	bne.n	bb64 <__aeabi_dsub+0x584>
    bb62:	e744      	b.n	b9ee <__aeabi_dsub+0x40e>
    bb64:	08c0      	lsrs	r0, r0, #3
    bb66:	0767      	lsls	r7, r4, #29
    bb68:	4307      	orrs	r7, r0
    bb6a:	2080      	movs	r0, #128	; 0x80
    bb6c:	08e4      	lsrs	r4, r4, #3
    bb6e:	0300      	lsls	r0, r0, #12
    bb70:	4204      	tst	r4, r0
    bb72:	d0e1      	beq.n	bb38 <__aeabi_dsub+0x558>
    bb74:	08cb      	lsrs	r3, r1, #3
    bb76:	4203      	tst	r3, r0
    bb78:	d1de      	bne.n	bb38 <__aeabi_dsub+0x558>
    bb7a:	08d7      	lsrs	r7, r2, #3
    bb7c:	0749      	lsls	r1, r1, #29
    bb7e:	430f      	orrs	r7, r1
    bb80:	001c      	movs	r4, r3
    bb82:	e7d9      	b.n	bb38 <__aeabi_dsub+0x558>
    bb84:	2100      	movs	r1, #0
    bb86:	e771      	b.n	ba6c <__aeabi_dsub+0x48c>
    bb88:	2500      	movs	r5, #0
    bb8a:	2700      	movs	r7, #0
    bb8c:	e5e9      	b.n	b762 <__aeabi_dsub+0x182>
    bb8e:	002e      	movs	r6, r5
    bb90:	0027      	movs	r7, r4
    bb92:	3e20      	subs	r6, #32
    bb94:	40f7      	lsrs	r7, r6
    bb96:	2d20      	cmp	r5, #32
    bb98:	d02f      	beq.n	bbfa <__aeabi_dsub+0x61a>
    bb9a:	2640      	movs	r6, #64	; 0x40
    bb9c:	1b75      	subs	r5, r6, r5
    bb9e:	40ac      	lsls	r4, r5
    bba0:	4650      	mov	r0, sl
    bba2:	4320      	orrs	r0, r4
    bba4:	1e44      	subs	r4, r0, #1
    bba6:	41a0      	sbcs	r0, r4
    bba8:	2400      	movs	r4, #0
    bbaa:	4338      	orrs	r0, r7
    bbac:	e6dc      	b.n	b968 <__aeabi_dsub+0x388>
    bbae:	2480      	movs	r4, #128	; 0x80
    bbb0:	2500      	movs	r5, #0
    bbb2:	0324      	lsls	r4, r4, #12
    bbb4:	4e13      	ldr	r6, [pc, #76]	; (bc04 <__aeabi_dsub+0x624>)
    bbb6:	2700      	movs	r7, #0
    bbb8:	e5d3      	b.n	b762 <__aeabi_dsub+0x182>
    bbba:	4650      	mov	r0, sl
    bbbc:	4320      	orrs	r0, r4
    bbbe:	0007      	movs	r7, r0
    bbc0:	1e78      	subs	r0, r7, #1
    bbc2:	4187      	sbcs	r7, r0
    bbc4:	2400      	movs	r4, #0
    bbc6:	18bf      	adds	r7, r7, r2
    bbc8:	e760      	b.n	ba8c <__aeabi_dsub+0x4ac>
    bbca:	000c      	movs	r4, r1
    bbcc:	0017      	movs	r7, r2
    bbce:	e58d      	b.n	b6ec <__aeabi_dsub+0x10c>
    bbd0:	000c      	movs	r4, r1
    bbd2:	0017      	movs	r7, r2
    bbd4:	4e0b      	ldr	r6, [pc, #44]	; (bc04 <__aeabi_dsub+0x624>)
    bbd6:	e589      	b.n	b6ec <__aeabi_dsub+0x10c>
    bbd8:	001e      	movs	r6, r3
    bbda:	0027      	movs	r7, r4
    bbdc:	3e20      	subs	r6, #32
    bbde:	40f7      	lsrs	r7, r6
    bbe0:	2b20      	cmp	r3, #32
    bbe2:	d00c      	beq.n	bbfe <__aeabi_dsub+0x61e>
    bbe4:	2640      	movs	r6, #64	; 0x40
    bbe6:	1af3      	subs	r3, r6, r3
    bbe8:	409c      	lsls	r4, r3
    bbea:	4650      	mov	r0, sl
    bbec:	4320      	orrs	r0, r4
    bbee:	1e44      	subs	r4, r0, #1
    bbf0:	41a0      	sbcs	r0, r4
    bbf2:	4307      	orrs	r7, r0
    bbf4:	2400      	movs	r4, #0
    bbf6:	18bf      	adds	r7, r7, r2
    bbf8:	e748      	b.n	ba8c <__aeabi_dsub+0x4ac>
    bbfa:	2400      	movs	r4, #0
    bbfc:	e7d0      	b.n	bba0 <__aeabi_dsub+0x5c0>
    bbfe:	2400      	movs	r4, #0
    bc00:	e7f3      	b.n	bbea <__aeabi_dsub+0x60a>
    bc02:	46c0      	nop			; (mov r8, r8)
    bc04:	000007ff 	.word	0x000007ff
    bc08:	ff7fffff 	.word	0xff7fffff

0000bc0c <__aeabi_dcmpun>:
    bc0c:	b570      	push	{r4, r5, r6, lr}
    bc0e:	4e0e      	ldr	r6, [pc, #56]	; (bc48 <__aeabi_dcmpun+0x3c>)
    bc10:	030d      	lsls	r5, r1, #12
    bc12:	031c      	lsls	r4, r3, #12
    bc14:	0049      	lsls	r1, r1, #1
    bc16:	005b      	lsls	r3, r3, #1
    bc18:	0b2d      	lsrs	r5, r5, #12
    bc1a:	0d49      	lsrs	r1, r1, #21
    bc1c:	0b24      	lsrs	r4, r4, #12
    bc1e:	0d5b      	lsrs	r3, r3, #21
    bc20:	42b1      	cmp	r1, r6
    bc22:	d004      	beq.n	bc2e <__aeabi_dcmpun+0x22>
    bc24:	4908      	ldr	r1, [pc, #32]	; (bc48 <__aeabi_dcmpun+0x3c>)
    bc26:	2000      	movs	r0, #0
    bc28:	428b      	cmp	r3, r1
    bc2a:	d008      	beq.n	bc3e <__aeabi_dcmpun+0x32>
    bc2c:	bd70      	pop	{r4, r5, r6, pc}
    bc2e:	4305      	orrs	r5, r0
    bc30:	2001      	movs	r0, #1
    bc32:	2d00      	cmp	r5, #0
    bc34:	d1fa      	bne.n	bc2c <__aeabi_dcmpun+0x20>
    bc36:	4904      	ldr	r1, [pc, #16]	; (bc48 <__aeabi_dcmpun+0x3c>)
    bc38:	2000      	movs	r0, #0
    bc3a:	428b      	cmp	r3, r1
    bc3c:	d1f6      	bne.n	bc2c <__aeabi_dcmpun+0x20>
    bc3e:	4314      	orrs	r4, r2
    bc40:	0020      	movs	r0, r4
    bc42:	1e44      	subs	r4, r0, #1
    bc44:	41a0      	sbcs	r0, r4
    bc46:	e7f1      	b.n	bc2c <__aeabi_dcmpun+0x20>
    bc48:	000007ff 	.word	0x000007ff

0000bc4c <__aeabi_d2iz>:
    bc4c:	b530      	push	{r4, r5, lr}
    bc4e:	4d13      	ldr	r5, [pc, #76]	; (bc9c <__aeabi_d2iz+0x50>)
    bc50:	030a      	lsls	r2, r1, #12
    bc52:	004b      	lsls	r3, r1, #1
    bc54:	0b12      	lsrs	r2, r2, #12
    bc56:	0d5b      	lsrs	r3, r3, #21
    bc58:	0fc9      	lsrs	r1, r1, #31
    bc5a:	2400      	movs	r4, #0
    bc5c:	42ab      	cmp	r3, r5
    bc5e:	dd10      	ble.n	bc82 <__aeabi_d2iz+0x36>
    bc60:	4c0f      	ldr	r4, [pc, #60]	; (bca0 <__aeabi_d2iz+0x54>)
    bc62:	42a3      	cmp	r3, r4
    bc64:	dc0f      	bgt.n	bc86 <__aeabi_d2iz+0x3a>
    bc66:	2480      	movs	r4, #128	; 0x80
    bc68:	4d0e      	ldr	r5, [pc, #56]	; (bca4 <__aeabi_d2iz+0x58>)
    bc6a:	0364      	lsls	r4, r4, #13
    bc6c:	4322      	orrs	r2, r4
    bc6e:	1aed      	subs	r5, r5, r3
    bc70:	2d1f      	cmp	r5, #31
    bc72:	dd0b      	ble.n	bc8c <__aeabi_d2iz+0x40>
    bc74:	480c      	ldr	r0, [pc, #48]	; (bca8 <__aeabi_d2iz+0x5c>)
    bc76:	1ac3      	subs	r3, r0, r3
    bc78:	40da      	lsrs	r2, r3
    bc7a:	4254      	negs	r4, r2
    bc7c:	2900      	cmp	r1, #0
    bc7e:	d100      	bne.n	bc82 <__aeabi_d2iz+0x36>
    bc80:	0014      	movs	r4, r2
    bc82:	0020      	movs	r0, r4
    bc84:	bd30      	pop	{r4, r5, pc}
    bc86:	4b09      	ldr	r3, [pc, #36]	; (bcac <__aeabi_d2iz+0x60>)
    bc88:	18cc      	adds	r4, r1, r3
    bc8a:	e7fa      	b.n	bc82 <__aeabi_d2iz+0x36>
    bc8c:	4c08      	ldr	r4, [pc, #32]	; (bcb0 <__aeabi_d2iz+0x64>)
    bc8e:	40e8      	lsrs	r0, r5
    bc90:	46a4      	mov	ip, r4
    bc92:	4463      	add	r3, ip
    bc94:	409a      	lsls	r2, r3
    bc96:	4302      	orrs	r2, r0
    bc98:	e7ef      	b.n	bc7a <__aeabi_d2iz+0x2e>
    bc9a:	46c0      	nop			; (mov r8, r8)
    bc9c:	000003fe 	.word	0x000003fe
    bca0:	0000041d 	.word	0x0000041d
    bca4:	00000433 	.word	0x00000433
    bca8:	00000413 	.word	0x00000413
    bcac:	7fffffff 	.word	0x7fffffff
    bcb0:	fffffbed 	.word	0xfffffbed

0000bcb4 <__aeabi_i2d>:
    bcb4:	b570      	push	{r4, r5, r6, lr}
    bcb6:	2800      	cmp	r0, #0
    bcb8:	d030      	beq.n	bd1c <__aeabi_i2d+0x68>
    bcba:	17c3      	asrs	r3, r0, #31
    bcbc:	18c4      	adds	r4, r0, r3
    bcbe:	405c      	eors	r4, r3
    bcc0:	0fc5      	lsrs	r5, r0, #31
    bcc2:	0020      	movs	r0, r4
    bcc4:	f000 f94c 	bl	bf60 <__clzsi2>
    bcc8:	4b17      	ldr	r3, [pc, #92]	; (bd28 <__aeabi_i2d+0x74>)
    bcca:	4a18      	ldr	r2, [pc, #96]	; (bd2c <__aeabi_i2d+0x78>)
    bccc:	1a1b      	subs	r3, r3, r0
    bcce:	1ad2      	subs	r2, r2, r3
    bcd0:	2a1f      	cmp	r2, #31
    bcd2:	dd18      	ble.n	bd06 <__aeabi_i2d+0x52>
    bcd4:	4a16      	ldr	r2, [pc, #88]	; (bd30 <__aeabi_i2d+0x7c>)
    bcd6:	1ad2      	subs	r2, r2, r3
    bcd8:	4094      	lsls	r4, r2
    bcda:	2200      	movs	r2, #0
    bcdc:	0324      	lsls	r4, r4, #12
    bcde:	055b      	lsls	r3, r3, #21
    bce0:	0b24      	lsrs	r4, r4, #12
    bce2:	0d5b      	lsrs	r3, r3, #21
    bce4:	2100      	movs	r1, #0
    bce6:	0010      	movs	r0, r2
    bce8:	0324      	lsls	r4, r4, #12
    bcea:	0d0a      	lsrs	r2, r1, #20
    bcec:	0b24      	lsrs	r4, r4, #12
    bcee:	0512      	lsls	r2, r2, #20
    bcf0:	4322      	orrs	r2, r4
    bcf2:	4c10      	ldr	r4, [pc, #64]	; (bd34 <__aeabi_i2d+0x80>)
    bcf4:	051b      	lsls	r3, r3, #20
    bcf6:	4022      	ands	r2, r4
    bcf8:	4313      	orrs	r3, r2
    bcfa:	005b      	lsls	r3, r3, #1
    bcfc:	07ed      	lsls	r5, r5, #31
    bcfe:	085b      	lsrs	r3, r3, #1
    bd00:	432b      	orrs	r3, r5
    bd02:	0019      	movs	r1, r3
    bd04:	bd70      	pop	{r4, r5, r6, pc}
    bd06:	0021      	movs	r1, r4
    bd08:	4091      	lsls	r1, r2
    bd0a:	000a      	movs	r2, r1
    bd0c:	210b      	movs	r1, #11
    bd0e:	1a08      	subs	r0, r1, r0
    bd10:	40c4      	lsrs	r4, r0
    bd12:	055b      	lsls	r3, r3, #21
    bd14:	0324      	lsls	r4, r4, #12
    bd16:	0b24      	lsrs	r4, r4, #12
    bd18:	0d5b      	lsrs	r3, r3, #21
    bd1a:	e7e3      	b.n	bce4 <__aeabi_i2d+0x30>
    bd1c:	2500      	movs	r5, #0
    bd1e:	2300      	movs	r3, #0
    bd20:	2400      	movs	r4, #0
    bd22:	2200      	movs	r2, #0
    bd24:	e7de      	b.n	bce4 <__aeabi_i2d+0x30>
    bd26:	46c0      	nop			; (mov r8, r8)
    bd28:	0000041e 	.word	0x0000041e
    bd2c:	00000433 	.word	0x00000433
    bd30:	00000413 	.word	0x00000413
    bd34:	800fffff 	.word	0x800fffff

0000bd38 <__aeabi_ui2d>:
    bd38:	b510      	push	{r4, lr}
    bd3a:	1e04      	subs	r4, r0, #0
    bd3c:	d028      	beq.n	bd90 <__aeabi_ui2d+0x58>
    bd3e:	f000 f90f 	bl	bf60 <__clzsi2>
    bd42:	4b15      	ldr	r3, [pc, #84]	; (bd98 <__aeabi_ui2d+0x60>)
    bd44:	4a15      	ldr	r2, [pc, #84]	; (bd9c <__aeabi_ui2d+0x64>)
    bd46:	1a1b      	subs	r3, r3, r0
    bd48:	1ad2      	subs	r2, r2, r3
    bd4a:	2a1f      	cmp	r2, #31
    bd4c:	dd15      	ble.n	bd7a <__aeabi_ui2d+0x42>
    bd4e:	4a14      	ldr	r2, [pc, #80]	; (bda0 <__aeabi_ui2d+0x68>)
    bd50:	1ad2      	subs	r2, r2, r3
    bd52:	4094      	lsls	r4, r2
    bd54:	2200      	movs	r2, #0
    bd56:	0324      	lsls	r4, r4, #12
    bd58:	055b      	lsls	r3, r3, #21
    bd5a:	0b24      	lsrs	r4, r4, #12
    bd5c:	0d5b      	lsrs	r3, r3, #21
    bd5e:	2100      	movs	r1, #0
    bd60:	0010      	movs	r0, r2
    bd62:	0324      	lsls	r4, r4, #12
    bd64:	0d0a      	lsrs	r2, r1, #20
    bd66:	0b24      	lsrs	r4, r4, #12
    bd68:	0512      	lsls	r2, r2, #20
    bd6a:	4322      	orrs	r2, r4
    bd6c:	4c0d      	ldr	r4, [pc, #52]	; (bda4 <__aeabi_ui2d+0x6c>)
    bd6e:	051b      	lsls	r3, r3, #20
    bd70:	4022      	ands	r2, r4
    bd72:	4313      	orrs	r3, r2
    bd74:	005b      	lsls	r3, r3, #1
    bd76:	0859      	lsrs	r1, r3, #1
    bd78:	bd10      	pop	{r4, pc}
    bd7a:	0021      	movs	r1, r4
    bd7c:	4091      	lsls	r1, r2
    bd7e:	000a      	movs	r2, r1
    bd80:	210b      	movs	r1, #11
    bd82:	1a08      	subs	r0, r1, r0
    bd84:	40c4      	lsrs	r4, r0
    bd86:	055b      	lsls	r3, r3, #21
    bd88:	0324      	lsls	r4, r4, #12
    bd8a:	0b24      	lsrs	r4, r4, #12
    bd8c:	0d5b      	lsrs	r3, r3, #21
    bd8e:	e7e6      	b.n	bd5e <__aeabi_ui2d+0x26>
    bd90:	2300      	movs	r3, #0
    bd92:	2400      	movs	r4, #0
    bd94:	2200      	movs	r2, #0
    bd96:	e7e2      	b.n	bd5e <__aeabi_ui2d+0x26>
    bd98:	0000041e 	.word	0x0000041e
    bd9c:	00000433 	.word	0x00000433
    bda0:	00000413 	.word	0x00000413
    bda4:	800fffff 	.word	0x800fffff

0000bda8 <__aeabi_f2d>:
    bda8:	0041      	lsls	r1, r0, #1
    bdaa:	0e09      	lsrs	r1, r1, #24
    bdac:	1c4b      	adds	r3, r1, #1
    bdae:	b570      	push	{r4, r5, r6, lr}
    bdb0:	b2db      	uxtb	r3, r3
    bdb2:	0246      	lsls	r6, r0, #9
    bdb4:	0a75      	lsrs	r5, r6, #9
    bdb6:	0fc4      	lsrs	r4, r0, #31
    bdb8:	2b01      	cmp	r3, #1
    bdba:	dd14      	ble.n	bde6 <__aeabi_f2d+0x3e>
    bdbc:	23e0      	movs	r3, #224	; 0xe0
    bdbe:	009b      	lsls	r3, r3, #2
    bdc0:	076d      	lsls	r5, r5, #29
    bdc2:	0b36      	lsrs	r6, r6, #12
    bdc4:	18cb      	adds	r3, r1, r3
    bdc6:	2100      	movs	r1, #0
    bdc8:	0d0a      	lsrs	r2, r1, #20
    bdca:	0028      	movs	r0, r5
    bdcc:	0512      	lsls	r2, r2, #20
    bdce:	4d1c      	ldr	r5, [pc, #112]	; (be40 <__aeabi_f2d+0x98>)
    bdd0:	4332      	orrs	r2, r6
    bdd2:	055b      	lsls	r3, r3, #21
    bdd4:	402a      	ands	r2, r5
    bdd6:	085b      	lsrs	r3, r3, #1
    bdd8:	4313      	orrs	r3, r2
    bdda:	005b      	lsls	r3, r3, #1
    bddc:	07e4      	lsls	r4, r4, #31
    bdde:	085b      	lsrs	r3, r3, #1
    bde0:	4323      	orrs	r3, r4
    bde2:	0019      	movs	r1, r3
    bde4:	bd70      	pop	{r4, r5, r6, pc}
    bde6:	2900      	cmp	r1, #0
    bde8:	d114      	bne.n	be14 <__aeabi_f2d+0x6c>
    bdea:	2d00      	cmp	r5, #0
    bdec:	d01e      	beq.n	be2c <__aeabi_f2d+0x84>
    bdee:	0028      	movs	r0, r5
    bdf0:	f000 f8b6 	bl	bf60 <__clzsi2>
    bdf4:	280a      	cmp	r0, #10
    bdf6:	dc1c      	bgt.n	be32 <__aeabi_f2d+0x8a>
    bdf8:	230b      	movs	r3, #11
    bdfa:	002a      	movs	r2, r5
    bdfc:	1a1b      	subs	r3, r3, r0
    bdfe:	40da      	lsrs	r2, r3
    be00:	0003      	movs	r3, r0
    be02:	3315      	adds	r3, #21
    be04:	409d      	lsls	r5, r3
    be06:	4b0f      	ldr	r3, [pc, #60]	; (be44 <__aeabi_f2d+0x9c>)
    be08:	0312      	lsls	r2, r2, #12
    be0a:	1a1b      	subs	r3, r3, r0
    be0c:	055b      	lsls	r3, r3, #21
    be0e:	0b16      	lsrs	r6, r2, #12
    be10:	0d5b      	lsrs	r3, r3, #21
    be12:	e7d8      	b.n	bdc6 <__aeabi_f2d+0x1e>
    be14:	2d00      	cmp	r5, #0
    be16:	d006      	beq.n	be26 <__aeabi_f2d+0x7e>
    be18:	0b32      	lsrs	r2, r6, #12
    be1a:	2680      	movs	r6, #128	; 0x80
    be1c:	0336      	lsls	r6, r6, #12
    be1e:	076d      	lsls	r5, r5, #29
    be20:	4316      	orrs	r6, r2
    be22:	4b09      	ldr	r3, [pc, #36]	; (be48 <__aeabi_f2d+0xa0>)
    be24:	e7cf      	b.n	bdc6 <__aeabi_f2d+0x1e>
    be26:	4b08      	ldr	r3, [pc, #32]	; (be48 <__aeabi_f2d+0xa0>)
    be28:	2600      	movs	r6, #0
    be2a:	e7cc      	b.n	bdc6 <__aeabi_f2d+0x1e>
    be2c:	2300      	movs	r3, #0
    be2e:	2600      	movs	r6, #0
    be30:	e7c9      	b.n	bdc6 <__aeabi_f2d+0x1e>
    be32:	0003      	movs	r3, r0
    be34:	002a      	movs	r2, r5
    be36:	3b0b      	subs	r3, #11
    be38:	409a      	lsls	r2, r3
    be3a:	2500      	movs	r5, #0
    be3c:	e7e3      	b.n	be06 <__aeabi_f2d+0x5e>
    be3e:	46c0      	nop			; (mov r8, r8)
    be40:	800fffff 	.word	0x800fffff
    be44:	00000389 	.word	0x00000389
    be48:	000007ff 	.word	0x000007ff

0000be4c <__aeabi_d2f>:
    be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4e:	004c      	lsls	r4, r1, #1
    be50:	0d64      	lsrs	r4, r4, #21
    be52:	030b      	lsls	r3, r1, #12
    be54:	1c62      	adds	r2, r4, #1
    be56:	0f45      	lsrs	r5, r0, #29
    be58:	0a5b      	lsrs	r3, r3, #9
    be5a:	0552      	lsls	r2, r2, #21
    be5c:	432b      	orrs	r3, r5
    be5e:	0fc9      	lsrs	r1, r1, #31
    be60:	00c5      	lsls	r5, r0, #3
    be62:	0d52      	lsrs	r2, r2, #21
    be64:	2a01      	cmp	r2, #1
    be66:	dd28      	ble.n	beba <__aeabi_d2f+0x6e>
    be68:	4a3a      	ldr	r2, [pc, #232]	; (bf54 <__aeabi_d2f+0x108>)
    be6a:	18a6      	adds	r6, r4, r2
    be6c:	2efe      	cmp	r6, #254	; 0xfe
    be6e:	dc1b      	bgt.n	bea8 <__aeabi_d2f+0x5c>
    be70:	2e00      	cmp	r6, #0
    be72:	dd3e      	ble.n	bef2 <__aeabi_d2f+0xa6>
    be74:	0180      	lsls	r0, r0, #6
    be76:	0002      	movs	r2, r0
    be78:	1e50      	subs	r0, r2, #1
    be7a:	4182      	sbcs	r2, r0
    be7c:	0f6d      	lsrs	r5, r5, #29
    be7e:	432a      	orrs	r2, r5
    be80:	00db      	lsls	r3, r3, #3
    be82:	4313      	orrs	r3, r2
    be84:	075a      	lsls	r2, r3, #29
    be86:	d004      	beq.n	be92 <__aeabi_d2f+0x46>
    be88:	220f      	movs	r2, #15
    be8a:	401a      	ands	r2, r3
    be8c:	2a04      	cmp	r2, #4
    be8e:	d000      	beq.n	be92 <__aeabi_d2f+0x46>
    be90:	3304      	adds	r3, #4
    be92:	2280      	movs	r2, #128	; 0x80
    be94:	04d2      	lsls	r2, r2, #19
    be96:	401a      	ands	r2, r3
    be98:	d05a      	beq.n	bf50 <__aeabi_d2f+0x104>
    be9a:	3601      	adds	r6, #1
    be9c:	2eff      	cmp	r6, #255	; 0xff
    be9e:	d003      	beq.n	bea8 <__aeabi_d2f+0x5c>
    bea0:	019b      	lsls	r3, r3, #6
    bea2:	0a5b      	lsrs	r3, r3, #9
    bea4:	b2f4      	uxtb	r4, r6
    bea6:	e001      	b.n	beac <__aeabi_d2f+0x60>
    bea8:	24ff      	movs	r4, #255	; 0xff
    beaa:	2300      	movs	r3, #0
    beac:	0258      	lsls	r0, r3, #9
    beae:	05e4      	lsls	r4, r4, #23
    beb0:	0a40      	lsrs	r0, r0, #9
    beb2:	07c9      	lsls	r1, r1, #31
    beb4:	4320      	orrs	r0, r4
    beb6:	4308      	orrs	r0, r1
    beb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    beba:	2c00      	cmp	r4, #0
    bebc:	d007      	beq.n	bece <__aeabi_d2f+0x82>
    bebe:	431d      	orrs	r5, r3
    bec0:	d0f2      	beq.n	bea8 <__aeabi_d2f+0x5c>
    bec2:	2080      	movs	r0, #128	; 0x80
    bec4:	00db      	lsls	r3, r3, #3
    bec6:	0480      	lsls	r0, r0, #18
    bec8:	4303      	orrs	r3, r0
    beca:	26ff      	movs	r6, #255	; 0xff
    becc:	e7da      	b.n	be84 <__aeabi_d2f+0x38>
    bece:	432b      	orrs	r3, r5
    bed0:	d003      	beq.n	beda <__aeabi_d2f+0x8e>
    bed2:	2305      	movs	r3, #5
    bed4:	08db      	lsrs	r3, r3, #3
    bed6:	2cff      	cmp	r4, #255	; 0xff
    bed8:	d003      	beq.n	bee2 <__aeabi_d2f+0x96>
    beda:	025b      	lsls	r3, r3, #9
    bedc:	0a5b      	lsrs	r3, r3, #9
    bede:	b2e4      	uxtb	r4, r4
    bee0:	e7e4      	b.n	beac <__aeabi_d2f+0x60>
    bee2:	2b00      	cmp	r3, #0
    bee4:	d032      	beq.n	bf4c <__aeabi_d2f+0x100>
    bee6:	2080      	movs	r0, #128	; 0x80
    bee8:	03c0      	lsls	r0, r0, #15
    beea:	4303      	orrs	r3, r0
    beec:	025b      	lsls	r3, r3, #9
    beee:	0a5b      	lsrs	r3, r3, #9
    bef0:	e7dc      	b.n	beac <__aeabi_d2f+0x60>
    bef2:	0032      	movs	r2, r6
    bef4:	3217      	adds	r2, #23
    bef6:	db14      	blt.n	bf22 <__aeabi_d2f+0xd6>
    bef8:	2280      	movs	r2, #128	; 0x80
    befa:	271e      	movs	r7, #30
    befc:	0412      	lsls	r2, r2, #16
    befe:	4313      	orrs	r3, r2
    bf00:	1bbf      	subs	r7, r7, r6
    bf02:	2f1f      	cmp	r7, #31
    bf04:	dc0f      	bgt.n	bf26 <__aeabi_d2f+0xda>
    bf06:	4a14      	ldr	r2, [pc, #80]	; (bf58 <__aeabi_d2f+0x10c>)
    bf08:	4694      	mov	ip, r2
    bf0a:	4464      	add	r4, ip
    bf0c:	002a      	movs	r2, r5
    bf0e:	40a5      	lsls	r5, r4
    bf10:	002e      	movs	r6, r5
    bf12:	40a3      	lsls	r3, r4
    bf14:	1e75      	subs	r5, r6, #1
    bf16:	41ae      	sbcs	r6, r5
    bf18:	40fa      	lsrs	r2, r7
    bf1a:	4333      	orrs	r3, r6
    bf1c:	4313      	orrs	r3, r2
    bf1e:	2600      	movs	r6, #0
    bf20:	e7b0      	b.n	be84 <__aeabi_d2f+0x38>
    bf22:	2400      	movs	r4, #0
    bf24:	e7d5      	b.n	bed2 <__aeabi_d2f+0x86>
    bf26:	2202      	movs	r2, #2
    bf28:	4252      	negs	r2, r2
    bf2a:	1b96      	subs	r6, r2, r6
    bf2c:	001a      	movs	r2, r3
    bf2e:	40f2      	lsrs	r2, r6
    bf30:	2f20      	cmp	r7, #32
    bf32:	d009      	beq.n	bf48 <__aeabi_d2f+0xfc>
    bf34:	4809      	ldr	r0, [pc, #36]	; (bf5c <__aeabi_d2f+0x110>)
    bf36:	4684      	mov	ip, r0
    bf38:	4464      	add	r4, ip
    bf3a:	40a3      	lsls	r3, r4
    bf3c:	432b      	orrs	r3, r5
    bf3e:	1e5d      	subs	r5, r3, #1
    bf40:	41ab      	sbcs	r3, r5
    bf42:	2600      	movs	r6, #0
    bf44:	4313      	orrs	r3, r2
    bf46:	e79d      	b.n	be84 <__aeabi_d2f+0x38>
    bf48:	2300      	movs	r3, #0
    bf4a:	e7f7      	b.n	bf3c <__aeabi_d2f+0xf0>
    bf4c:	2300      	movs	r3, #0
    bf4e:	e7ad      	b.n	beac <__aeabi_d2f+0x60>
    bf50:	0034      	movs	r4, r6
    bf52:	e7bf      	b.n	bed4 <__aeabi_d2f+0x88>
    bf54:	fffffc80 	.word	0xfffffc80
    bf58:	fffffc82 	.word	0xfffffc82
    bf5c:	fffffca2 	.word	0xfffffca2

0000bf60 <__clzsi2>:
    bf60:	211c      	movs	r1, #28
    bf62:	2301      	movs	r3, #1
    bf64:	041b      	lsls	r3, r3, #16
    bf66:	4298      	cmp	r0, r3
    bf68:	d301      	bcc.n	bf6e <__clzsi2+0xe>
    bf6a:	0c00      	lsrs	r0, r0, #16
    bf6c:	3910      	subs	r1, #16
    bf6e:	0a1b      	lsrs	r3, r3, #8
    bf70:	4298      	cmp	r0, r3
    bf72:	d301      	bcc.n	bf78 <__clzsi2+0x18>
    bf74:	0a00      	lsrs	r0, r0, #8
    bf76:	3908      	subs	r1, #8
    bf78:	091b      	lsrs	r3, r3, #4
    bf7a:	4298      	cmp	r0, r3
    bf7c:	d301      	bcc.n	bf82 <__clzsi2+0x22>
    bf7e:	0900      	lsrs	r0, r0, #4
    bf80:	3904      	subs	r1, #4
    bf82:	a202      	add	r2, pc, #8	; (adr r2, bf8c <__clzsi2+0x2c>)
    bf84:	5c10      	ldrb	r0, [r2, r0]
    bf86:	1840      	adds	r0, r0, r1
    bf88:	4770      	bx	lr
    bf8a:	46c0      	nop			; (mov r8, r8)
    bf8c:	02020304 	.word	0x02020304
    bf90:	01010101 	.word	0x01010101
	...

0000bf9c <__clzdi2>:
    bf9c:	b510      	push	{r4, lr}
    bf9e:	2900      	cmp	r1, #0
    bfa0:	d103      	bne.n	bfaa <__clzdi2+0xe>
    bfa2:	f7ff ffdd 	bl	bf60 <__clzsi2>
    bfa6:	3020      	adds	r0, #32
    bfa8:	e002      	b.n	bfb0 <__clzdi2+0x14>
    bfaa:	1c08      	adds	r0, r1, #0
    bfac:	f7ff ffd8 	bl	bf60 <__clzsi2>
    bfb0:	bd10      	pop	{r4, pc}
    bfb2:	46c0      	nop			; (mov r8, r8)

0000bfb4 <__ctzsi2>:
    bfb4:	4241      	negs	r1, r0
    bfb6:	4008      	ands	r0, r1
    bfb8:	211c      	movs	r1, #28
    bfba:	2301      	movs	r3, #1
    bfbc:	041b      	lsls	r3, r3, #16
    bfbe:	4298      	cmp	r0, r3
    bfc0:	d301      	bcc.n	bfc6 <__ctzsi2+0x12>
    bfc2:	0c00      	lsrs	r0, r0, #16
    bfc4:	3910      	subs	r1, #16
    bfc6:	0a1b      	lsrs	r3, r3, #8
    bfc8:	4298      	cmp	r0, r3
    bfca:	d301      	bcc.n	bfd0 <__ctzsi2+0x1c>
    bfcc:	0a00      	lsrs	r0, r0, #8
    bfce:	3908      	subs	r1, #8
    bfd0:	091b      	lsrs	r3, r3, #4
    bfd2:	4298      	cmp	r0, r3
    bfd4:	d301      	bcc.n	bfda <__ctzsi2+0x26>
    bfd6:	0900      	lsrs	r0, r0, #4
    bfd8:	3904      	subs	r1, #4
    bfda:	a202      	add	r2, pc, #8	; (adr r2, bfe4 <__ctzsi2+0x30>)
    bfdc:	5c10      	ldrb	r0, [r2, r0]
    bfde:	1a40      	subs	r0, r0, r1
    bfe0:	4770      	bx	lr
    bfe2:	46c0      	nop			; (mov r8, r8)
    bfe4:	1d1d1c1b 	.word	0x1d1d1c1b
    bfe8:	1e1e1e1e 	.word	0x1e1e1e1e
    bfec:	1f1f1f1f 	.word	0x1f1f1f1f
    bff0:	1f1f1f1f 	.word	0x1f1f1f1f

0000bff4 <__cxa_atexit>:
    bff4:	b510      	push	{r4, lr}
    bff6:	0013      	movs	r3, r2
    bff8:	000a      	movs	r2, r1
    bffa:	0001      	movs	r1, r0
    bffc:	2002      	movs	r0, #2
    bffe:	f001 fd15 	bl	da2c <__register_exitproc>
    c002:	bd10      	pop	{r4, pc}

0000c004 <__errno>:
    c004:	4b01      	ldr	r3, [pc, #4]	; (c00c <__errno+0x8>)
    c006:	6818      	ldr	r0, [r3, #0]
    c008:	4770      	bx	lr
    c00a:	46c0      	nop			; (mov r8, r8)
    c00c:	20000070 	.word	0x20000070

0000c010 <__libc_init_array>:
    c010:	b570      	push	{r4, r5, r6, lr}
    c012:	4e0d      	ldr	r6, [pc, #52]	; (c048 <__libc_init_array+0x38>)
    c014:	4d0d      	ldr	r5, [pc, #52]	; (c04c <__libc_init_array+0x3c>)
    c016:	2400      	movs	r4, #0
    c018:	1bad      	subs	r5, r5, r6
    c01a:	10ad      	asrs	r5, r5, #2
    c01c:	d005      	beq.n	c02a <__libc_init_array+0x1a>
    c01e:	00a3      	lsls	r3, r4, #2
    c020:	58f3      	ldr	r3, [r6, r3]
    c022:	3401      	adds	r4, #1
    c024:	4798      	blx	r3
    c026:	42a5      	cmp	r5, r4
    c028:	d1f9      	bne.n	c01e <__libc_init_array+0xe>
    c02a:	f005 fbfd 	bl	11828 <_init>
    c02e:	4e08      	ldr	r6, [pc, #32]	; (c050 <__libc_init_array+0x40>)
    c030:	4d08      	ldr	r5, [pc, #32]	; (c054 <__libc_init_array+0x44>)
    c032:	2400      	movs	r4, #0
    c034:	1bad      	subs	r5, r5, r6
    c036:	10ad      	asrs	r5, r5, #2
    c038:	d005      	beq.n	c046 <__libc_init_array+0x36>
    c03a:	00a3      	lsls	r3, r4, #2
    c03c:	58f3      	ldr	r3, [r6, r3]
    c03e:	3401      	adds	r4, #1
    c040:	4798      	blx	r3
    c042:	42a5      	cmp	r5, r4
    c044:	d1f9      	bne.n	c03a <__libc_init_array+0x2a>
    c046:	bd70      	pop	{r4, r5, r6, pc}
    c048:	00011834 	.word	0x00011834
    c04c:	00011834 	.word	0x00011834
    c050:	00011834 	.word	0x00011834
    c054:	00011854 	.word	0x00011854

0000c058 <memcpy>:
    c058:	b5f0      	push	{r4, r5, r6, r7, lr}
    c05a:	0005      	movs	r5, r0
    c05c:	2a0f      	cmp	r2, #15
    c05e:	d92f      	bls.n	c0c0 <memcpy+0x68>
    c060:	000b      	movs	r3, r1
    c062:	4303      	orrs	r3, r0
    c064:	079b      	lsls	r3, r3, #30
    c066:	d134      	bne.n	c0d2 <memcpy+0x7a>
    c068:	0016      	movs	r6, r2
    c06a:	000c      	movs	r4, r1
    c06c:	0003      	movs	r3, r0
    c06e:	3e10      	subs	r6, #16
    c070:	0935      	lsrs	r5, r6, #4
    c072:	3501      	adds	r5, #1
    c074:	012d      	lsls	r5, r5, #4
    c076:	1945      	adds	r5, r0, r5
    c078:	6827      	ldr	r7, [r4, #0]
    c07a:	601f      	str	r7, [r3, #0]
    c07c:	6867      	ldr	r7, [r4, #4]
    c07e:	605f      	str	r7, [r3, #4]
    c080:	68a7      	ldr	r7, [r4, #8]
    c082:	609f      	str	r7, [r3, #8]
    c084:	68e7      	ldr	r7, [r4, #12]
    c086:	3410      	adds	r4, #16
    c088:	60df      	str	r7, [r3, #12]
    c08a:	3310      	adds	r3, #16
    c08c:	429d      	cmp	r5, r3
    c08e:	d1f3      	bne.n	c078 <memcpy+0x20>
    c090:	230f      	movs	r3, #15
    c092:	439e      	bics	r6, r3
    c094:	3610      	adds	r6, #16
    c096:	1985      	adds	r5, r0, r6
    c098:	1989      	adds	r1, r1, r6
    c09a:	4013      	ands	r3, r2
    c09c:	2b03      	cmp	r3, #3
    c09e:	d91a      	bls.n	c0d6 <memcpy+0x7e>
    c0a0:	1f1e      	subs	r6, r3, #4
    c0a2:	2300      	movs	r3, #0
    c0a4:	08b4      	lsrs	r4, r6, #2
    c0a6:	3401      	adds	r4, #1
    c0a8:	00a4      	lsls	r4, r4, #2
    c0aa:	58cf      	ldr	r7, [r1, r3]
    c0ac:	50ef      	str	r7, [r5, r3]
    c0ae:	3304      	adds	r3, #4
    c0b0:	42a3      	cmp	r3, r4
    c0b2:	d1fa      	bne.n	c0aa <memcpy+0x52>
    c0b4:	2403      	movs	r4, #3
    c0b6:	43a6      	bics	r6, r4
    c0b8:	1d33      	adds	r3, r6, #4
    c0ba:	4022      	ands	r2, r4
    c0bc:	18c9      	adds	r1, r1, r3
    c0be:	18ed      	adds	r5, r5, r3
    c0c0:	2a00      	cmp	r2, #0
    c0c2:	d005      	beq.n	c0d0 <memcpy+0x78>
    c0c4:	2300      	movs	r3, #0
    c0c6:	5ccc      	ldrb	r4, [r1, r3]
    c0c8:	54ec      	strb	r4, [r5, r3]
    c0ca:	3301      	adds	r3, #1
    c0cc:	4293      	cmp	r3, r2
    c0ce:	d1fa      	bne.n	c0c6 <memcpy+0x6e>
    c0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0d2:	0005      	movs	r5, r0
    c0d4:	e7f6      	b.n	c0c4 <memcpy+0x6c>
    c0d6:	001a      	movs	r2, r3
    c0d8:	e7f2      	b.n	c0c0 <memcpy+0x68>
    c0da:	46c0      	nop			; (mov r8, r8)

0000c0dc <memset>:
    c0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0de:	0783      	lsls	r3, r0, #30
    c0e0:	d043      	beq.n	c16a <memset+0x8e>
    c0e2:	1e54      	subs	r4, r2, #1
    c0e4:	2a00      	cmp	r2, #0
    c0e6:	d03f      	beq.n	c168 <memset+0x8c>
    c0e8:	b2ce      	uxtb	r6, r1
    c0ea:	0002      	movs	r2, r0
    c0ec:	2503      	movs	r5, #3
    c0ee:	e002      	b.n	c0f6 <memset+0x1a>
    c0f0:	001a      	movs	r2, r3
    c0f2:	3c01      	subs	r4, #1
    c0f4:	d338      	bcc.n	c168 <memset+0x8c>
    c0f6:	1c53      	adds	r3, r2, #1
    c0f8:	7016      	strb	r6, [r2, #0]
    c0fa:	422b      	tst	r3, r5
    c0fc:	d1f8      	bne.n	c0f0 <memset+0x14>
    c0fe:	2c03      	cmp	r4, #3
    c100:	d92a      	bls.n	c158 <memset+0x7c>
    c102:	22ff      	movs	r2, #255	; 0xff
    c104:	400a      	ands	r2, r1
    c106:	0215      	lsls	r5, r2, #8
    c108:	4315      	orrs	r5, r2
    c10a:	042a      	lsls	r2, r5, #16
    c10c:	4315      	orrs	r5, r2
    c10e:	2c0f      	cmp	r4, #15
    c110:	d914      	bls.n	c13c <memset+0x60>
    c112:	0027      	movs	r7, r4
    c114:	001a      	movs	r2, r3
    c116:	3f10      	subs	r7, #16
    c118:	093e      	lsrs	r6, r7, #4
    c11a:	3601      	adds	r6, #1
    c11c:	0136      	lsls	r6, r6, #4
    c11e:	199e      	adds	r6, r3, r6
    c120:	6015      	str	r5, [r2, #0]
    c122:	6055      	str	r5, [r2, #4]
    c124:	6095      	str	r5, [r2, #8]
    c126:	60d5      	str	r5, [r2, #12]
    c128:	3210      	adds	r2, #16
    c12a:	4296      	cmp	r6, r2
    c12c:	d1f8      	bne.n	c120 <memset+0x44>
    c12e:	220f      	movs	r2, #15
    c130:	4397      	bics	r7, r2
    c132:	3710      	adds	r7, #16
    c134:	19db      	adds	r3, r3, r7
    c136:	4014      	ands	r4, r2
    c138:	2c03      	cmp	r4, #3
    c13a:	d90d      	bls.n	c158 <memset+0x7c>
    c13c:	001a      	movs	r2, r3
    c13e:	1f27      	subs	r7, r4, #4
    c140:	08be      	lsrs	r6, r7, #2
    c142:	3601      	adds	r6, #1
    c144:	00b6      	lsls	r6, r6, #2
    c146:	199e      	adds	r6, r3, r6
    c148:	c220      	stmia	r2!, {r5}
    c14a:	42b2      	cmp	r2, r6
    c14c:	d1fc      	bne.n	c148 <memset+0x6c>
    c14e:	2203      	movs	r2, #3
    c150:	4397      	bics	r7, r2
    c152:	3704      	adds	r7, #4
    c154:	19db      	adds	r3, r3, r7
    c156:	4014      	ands	r4, r2
    c158:	2c00      	cmp	r4, #0
    c15a:	d005      	beq.n	c168 <memset+0x8c>
    c15c:	b2c9      	uxtb	r1, r1
    c15e:	191c      	adds	r4, r3, r4
    c160:	7019      	strb	r1, [r3, #0]
    c162:	3301      	adds	r3, #1
    c164:	429c      	cmp	r4, r3
    c166:	d1fb      	bne.n	c160 <memset+0x84>
    c168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c16a:	0014      	movs	r4, r2
    c16c:	0003      	movs	r3, r0
    c16e:	e7c6      	b.n	c0fe <memset+0x22>

0000c170 <printf>:
    c170:	b40f      	push	{r0, r1, r2, r3}
    c172:	b500      	push	{lr}
    c174:	4906      	ldr	r1, [pc, #24]	; (c190 <printf+0x20>)
    c176:	b083      	sub	sp, #12
    c178:	ab04      	add	r3, sp, #16
    c17a:	6808      	ldr	r0, [r1, #0]
    c17c:	cb04      	ldmia	r3!, {r2}
    c17e:	6881      	ldr	r1, [r0, #8]
    c180:	9301      	str	r3, [sp, #4]
    c182:	f000 f839 	bl	c1f8 <_vfprintf_r>
    c186:	b003      	add	sp, #12
    c188:	bc08      	pop	{r3}
    c18a:	b004      	add	sp, #16
    c18c:	4718      	bx	r3
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	20000070 	.word	0x20000070

0000c194 <strlen>:
    c194:	b510      	push	{r4, lr}
    c196:	0783      	lsls	r3, r0, #30
    c198:	d025      	beq.n	c1e6 <strlen+0x52>
    c19a:	7803      	ldrb	r3, [r0, #0]
    c19c:	2b00      	cmp	r3, #0
    c19e:	d024      	beq.n	c1ea <strlen+0x56>
    c1a0:	0003      	movs	r3, r0
    c1a2:	2103      	movs	r1, #3
    c1a4:	e002      	b.n	c1ac <strlen+0x18>
    c1a6:	781a      	ldrb	r2, [r3, #0]
    c1a8:	2a00      	cmp	r2, #0
    c1aa:	d01a      	beq.n	c1e2 <strlen+0x4e>
    c1ac:	3301      	adds	r3, #1
    c1ae:	420b      	tst	r3, r1
    c1b0:	d1f9      	bne.n	c1a6 <strlen+0x12>
    c1b2:	6819      	ldr	r1, [r3, #0]
    c1b4:	4a0e      	ldr	r2, [pc, #56]	; (c1f0 <strlen+0x5c>)
    c1b6:	4c0f      	ldr	r4, [pc, #60]	; (c1f4 <strlen+0x60>)
    c1b8:	188a      	adds	r2, r1, r2
    c1ba:	438a      	bics	r2, r1
    c1bc:	4222      	tst	r2, r4
    c1be:	d106      	bne.n	c1ce <strlen+0x3a>
    c1c0:	3304      	adds	r3, #4
    c1c2:	6819      	ldr	r1, [r3, #0]
    c1c4:	4a0a      	ldr	r2, [pc, #40]	; (c1f0 <strlen+0x5c>)
    c1c6:	188a      	adds	r2, r1, r2
    c1c8:	438a      	bics	r2, r1
    c1ca:	4222      	tst	r2, r4
    c1cc:	d0f8      	beq.n	c1c0 <strlen+0x2c>
    c1ce:	001a      	movs	r2, r3
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d003      	beq.n	c1de <strlen+0x4a>
    c1d6:	3201      	adds	r2, #1
    c1d8:	7811      	ldrb	r1, [r2, #0]
    c1da:	2900      	cmp	r1, #0
    c1dc:	d1fb      	bne.n	c1d6 <strlen+0x42>
    c1de:	1a10      	subs	r0, r2, r0
    c1e0:	bd10      	pop	{r4, pc}
    c1e2:	1a18      	subs	r0, r3, r0
    c1e4:	e7fc      	b.n	c1e0 <strlen+0x4c>
    c1e6:	0003      	movs	r3, r0
    c1e8:	e7e3      	b.n	c1b2 <strlen+0x1e>
    c1ea:	2000      	movs	r0, #0
    c1ec:	e7f8      	b.n	c1e0 <strlen+0x4c>
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	fefefeff 	.word	0xfefefeff
    c1f4:	80808080 	.word	0x80808080

0000c1f8 <_vfprintf_r>:
    c1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1fa:	46de      	mov	lr, fp
    c1fc:	464e      	mov	r6, r9
    c1fe:	4645      	mov	r5, r8
    c200:	4657      	mov	r7, sl
    c202:	b5e0      	push	{r5, r6, r7, lr}
    c204:	b0c3      	sub	sp, #268	; 0x10c
    c206:	4689      	mov	r9, r1
    c208:	0014      	movs	r4, r2
    c20a:	001d      	movs	r5, r3
    c20c:	930f      	str	r3, [sp, #60]	; 0x3c
    c20e:	0006      	movs	r6, r0
    c210:	9006      	str	r0, [sp, #24]
    c212:	f003 f939 	bl	f488 <_localeconv_r>
    c216:	6803      	ldr	r3, [r0, #0]
    c218:	0018      	movs	r0, r3
    c21a:	9318      	str	r3, [sp, #96]	; 0x60
    c21c:	f7ff ffba 	bl	c194 <strlen>
    c220:	9017      	str	r0, [sp, #92]	; 0x5c
    c222:	2e00      	cmp	r6, #0
    c224:	d004      	beq.n	c230 <_vfprintf_r+0x38>
    c226:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    c228:	9307      	str	r3, [sp, #28]
    c22a:	2b00      	cmp	r3, #0
    c22c:	d100      	bne.n	c230 <_vfprintf_r+0x38>
    c22e:	e0a7      	b.n	c380 <_vfprintf_r+0x188>
    c230:	464b      	mov	r3, r9
    c232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c234:	07db      	lsls	r3, r3, #31
    c236:	d478      	bmi.n	c32a <_vfprintf_r+0x132>
    c238:	464b      	mov	r3, r9
    c23a:	210c      	movs	r1, #12
    c23c:	5e59      	ldrsh	r1, [r3, r1]
    c23e:	b28b      	uxth	r3, r1
    c240:	059a      	lsls	r2, r3, #22
    c242:	d56e      	bpl.n	c322 <_vfprintf_r+0x12a>
    c244:	2280      	movs	r2, #128	; 0x80
    c246:	0192      	lsls	r2, r2, #6
    c248:	4213      	tst	r3, r2
    c24a:	d109      	bne.n	c260 <_vfprintf_r+0x68>
    c24c:	430a      	orrs	r2, r1
    c24e:	464b      	mov	r3, r9
    c250:	4649      	mov	r1, r9
    c252:	819a      	strh	r2, [r3, #12]
    c254:	6e49      	ldr	r1, [r1, #100]	; 0x64
    c256:	4bcc      	ldr	r3, [pc, #816]	; (c588 <_vfprintf_r+0x390>)
    c258:	400b      	ands	r3, r1
    c25a:	4649      	mov	r1, r9
    c25c:	664b      	str	r3, [r1, #100]	; 0x64
    c25e:	b293      	uxth	r3, r2
    c260:	071a      	lsls	r2, r3, #28
    c262:	d567      	bpl.n	c334 <_vfprintf_r+0x13c>
    c264:	464a      	mov	r2, r9
    c266:	6912      	ldr	r2, [r2, #16]
    c268:	2a00      	cmp	r2, #0
    c26a:	d063      	beq.n	c334 <_vfprintf_r+0x13c>
    c26c:	221a      	movs	r2, #26
    c26e:	401a      	ands	r2, r3
    c270:	2a0a      	cmp	r2, #10
    c272:	d100      	bne.n	c276 <_vfprintf_r+0x7e>
    c274:	e088      	b.n	c388 <_vfprintf_r+0x190>
    c276:	ab32      	add	r3, sp, #200	; 0xc8
    c278:	9325      	str	r3, [sp, #148]	; 0x94
    c27a:	2300      	movs	r3, #0
    c27c:	46cb      	mov	fp, r9
    c27e:	af25      	add	r7, sp, #148	; 0x94
    c280:	60bb      	str	r3, [r7, #8]
    c282:	607b      	str	r3, [r7, #4]
    c284:	9407      	str	r4, [sp, #28]
    c286:	9314      	str	r3, [sp, #80]	; 0x50
    c288:	9316      	str	r3, [sp, #88]	; 0x58
    c28a:	9315      	str	r3, [sp, #84]	; 0x54
    c28c:	ae32      	add	r6, sp, #200	; 0xc8
    c28e:	9319      	str	r3, [sp, #100]	; 0x64
    c290:	931a      	str	r3, [sp, #104]	; 0x68
    c292:	930a      	str	r3, [sp, #40]	; 0x28
    c294:	9c07      	ldr	r4, [sp, #28]
    c296:	7823      	ldrb	r3, [r4, #0]
    c298:	2b00      	cmp	r3, #0
    c29a:	d101      	bne.n	c2a0 <_vfprintf_r+0xa8>
    c29c:	f000 fd9e 	bl	cddc <_vfprintf_r+0xbe4>
    c2a0:	2b25      	cmp	r3, #37	; 0x25
    c2a2:	d103      	bne.n	c2ac <_vfprintf_r+0xb4>
    c2a4:	f000 fd9a 	bl	cddc <_vfprintf_r+0xbe4>
    c2a8:	2b25      	cmp	r3, #37	; 0x25
    c2aa:	d003      	beq.n	c2b4 <_vfprintf_r+0xbc>
    c2ac:	3401      	adds	r4, #1
    c2ae:	7823      	ldrb	r3, [r4, #0]
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d1f9      	bne.n	c2a8 <_vfprintf_r+0xb0>
    c2b4:	9b07      	ldr	r3, [sp, #28]
    c2b6:	1ae5      	subs	r5, r4, r3
    c2b8:	d010      	beq.n	c2dc <_vfprintf_r+0xe4>
    c2ba:	9b07      	ldr	r3, [sp, #28]
    c2bc:	6075      	str	r5, [r6, #4]
    c2be:	6033      	str	r3, [r6, #0]
    c2c0:	68bb      	ldr	r3, [r7, #8]
    c2c2:	195b      	adds	r3, r3, r5
    c2c4:	60bb      	str	r3, [r7, #8]
    c2c6:	687b      	ldr	r3, [r7, #4]
    c2c8:	3301      	adds	r3, #1
    c2ca:	607b      	str	r3, [r7, #4]
    c2cc:	2b07      	cmp	r3, #7
    c2ce:	dc4c      	bgt.n	c36a <_vfprintf_r+0x172>
    c2d0:	3608      	adds	r6, #8
    c2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c2d4:	469c      	mov	ip, r3
    c2d6:	44ac      	add	ip, r5
    c2d8:	4663      	mov	r3, ip
    c2da:	930a      	str	r3, [sp, #40]	; 0x28
    c2dc:	7823      	ldrb	r3, [r4, #0]
    c2de:	2b00      	cmp	r3, #0
    c2e0:	d101      	bne.n	c2e6 <_vfprintf_r+0xee>
    c2e2:	f000 fc99 	bl	cc18 <_vfprintf_r+0xa20>
    c2e6:	1c63      	adds	r3, r4, #1
    c2e8:	9307      	str	r3, [sp, #28]
    c2ea:	2300      	movs	r3, #0
    c2ec:	aa16      	add	r2, sp, #88	; 0x58
    c2ee:	77d3      	strb	r3, [r2, #31]
    c2f0:	2201      	movs	r2, #1
    c2f2:	4252      	negs	r2, r2
    c2f4:	4692      	mov	sl, r2
    c2f6:	2200      	movs	r2, #0
    c2f8:	920b      	str	r2, [sp, #44]	; 0x2c
    c2fa:	3220      	adds	r2, #32
    c2fc:	4691      	mov	r9, r2
    c2fe:	3220      	adds	r2, #32
    c300:	7863      	ldrb	r3, [r4, #1]
    c302:	2100      	movs	r1, #0
    c304:	2000      	movs	r0, #0
    c306:	2400      	movs	r4, #0
    c308:	4694      	mov	ip, r2
    c30a:	9a07      	ldr	r2, [sp, #28]
    c30c:	3201      	adds	r2, #1
    c30e:	9207      	str	r2, [sp, #28]
    c310:	001a      	movs	r2, r3
    c312:	3a20      	subs	r2, #32
    c314:	2a58      	cmp	r2, #88	; 0x58
    c316:	d900      	bls.n	c31a <_vfprintf_r+0x122>
    c318:	e2e7      	b.n	c8ea <_vfprintf_r+0x6f2>
    c31a:	4d9c      	ldr	r5, [pc, #624]	; (c58c <_vfprintf_r+0x394>)
    c31c:	0092      	lsls	r2, r2, #2
    c31e:	58aa      	ldr	r2, [r5, r2]
    c320:	4697      	mov	pc, r2
    c322:	464b      	mov	r3, r9
    c324:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c326:	f003 f8c1 	bl	f4ac <__retarget_lock_acquire_recursive>
    c32a:	464b      	mov	r3, r9
    c32c:	210c      	movs	r1, #12
    c32e:	5e59      	ldrsh	r1, [r3, r1]
    c330:	b28b      	uxth	r3, r1
    c332:	e787      	b.n	c244 <_vfprintf_r+0x4c>
    c334:	4649      	mov	r1, r9
    c336:	9806      	ldr	r0, [sp, #24]
    c338:	f001 fb0e 	bl	d958 <__swsetup_r>
    c33c:	464b      	mov	r3, r9
    c33e:	2800      	cmp	r0, #0
    c340:	d03a      	beq.n	c3b8 <_vfprintf_r+0x1c0>
    c342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c344:	07db      	lsls	r3, r3, #31
    c346:	d405      	bmi.n	c354 <_vfprintf_r+0x15c>
    c348:	464b      	mov	r3, r9
    c34a:	899b      	ldrh	r3, [r3, #12]
    c34c:	059b      	lsls	r3, r3, #22
    c34e:	d401      	bmi.n	c354 <_vfprintf_r+0x15c>
    c350:	f000 ffcf 	bl	d2f2 <_vfprintf_r+0x10fa>
    c354:	2301      	movs	r3, #1
    c356:	425b      	negs	r3, r3
    c358:	930a      	str	r3, [sp, #40]	; 0x28
    c35a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c35c:	b043      	add	sp, #268	; 0x10c
    c35e:	bc3c      	pop	{r2, r3, r4, r5}
    c360:	4690      	mov	r8, r2
    c362:	4699      	mov	r9, r3
    c364:	46a2      	mov	sl, r4
    c366:	46ab      	mov	fp, r5
    c368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c36a:	003a      	movs	r2, r7
    c36c:	4659      	mov	r1, fp
    c36e:	9806      	ldr	r0, [sp, #24]
    c370:	f004 fa14 	bl	1079c <__sprint_r>
    c374:	2800      	cmp	r0, #0
    c376:	d001      	beq.n	c37c <_vfprintf_r+0x184>
    c378:	f000 fcce 	bl	cd18 <_vfprintf_r+0xb20>
    c37c:	ae32      	add	r6, sp, #200	; 0xc8
    c37e:	e7a8      	b.n	c2d2 <_vfprintf_r+0xda>
    c380:	9806      	ldr	r0, [sp, #24]
    c382:	f002 fd51 	bl	ee28 <__sinit>
    c386:	e753      	b.n	c230 <_vfprintf_r+0x38>
    c388:	464a      	mov	r2, r9
    c38a:	210e      	movs	r1, #14
    c38c:	5e52      	ldrsh	r2, [r2, r1]
    c38e:	2a00      	cmp	r2, #0
    c390:	da00      	bge.n	c394 <_vfprintf_r+0x19c>
    c392:	e770      	b.n	c276 <_vfprintf_r+0x7e>
    c394:	464a      	mov	r2, r9
    c396:	6e52      	ldr	r2, [r2, #100]	; 0x64
    c398:	07d2      	lsls	r2, r2, #31
    c39a:	d405      	bmi.n	c3a8 <_vfprintf_r+0x1b0>
    c39c:	059b      	lsls	r3, r3, #22
    c39e:	d403      	bmi.n	c3a8 <_vfprintf_r+0x1b0>
    c3a0:	464b      	mov	r3, r9
    c3a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c3a4:	f003 f884 	bl	f4b0 <__retarget_lock_release_recursive>
    c3a8:	002b      	movs	r3, r5
    c3aa:	0022      	movs	r2, r4
    c3ac:	4649      	mov	r1, r9
    c3ae:	9806      	ldr	r0, [sp, #24]
    c3b0:	f001 fa8e 	bl	d8d0 <__sbprintf>
    c3b4:	900a      	str	r0, [sp, #40]	; 0x28
    c3b6:	e7d0      	b.n	c35a <_vfprintf_r+0x162>
    c3b8:	899b      	ldrh	r3, [r3, #12]
    c3ba:	e757      	b.n	c26c <_vfprintf_r+0x74>
    c3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3be:	920f      	str	r2, [sp, #60]	; 0x3c
    c3c0:	425b      	negs	r3, r3
    c3c2:	930b      	str	r3, [sp, #44]	; 0x2c
    c3c4:	2304      	movs	r3, #4
    c3c6:	431c      	orrs	r4, r3
    c3c8:	9b07      	ldr	r3, [sp, #28]
    c3ca:	781b      	ldrb	r3, [r3, #0]
    c3cc:	e79d      	b.n	c30a <_vfprintf_r+0x112>
    c3ce:	9b07      	ldr	r3, [sp, #28]
    c3d0:	2101      	movs	r1, #1
    c3d2:	781b      	ldrb	r3, [r3, #0]
    c3d4:	202b      	movs	r0, #43	; 0x2b
    c3d6:	e798      	b.n	c30a <_vfprintf_r+0x112>
    c3d8:	9b07      	ldr	r3, [sp, #28]
    c3da:	1c5a      	adds	r2, r3, #1
    c3dc:	781b      	ldrb	r3, [r3, #0]
    c3de:	4690      	mov	r8, r2
    c3e0:	2b2a      	cmp	r3, #42	; 0x2a
    c3e2:	d101      	bne.n	c3e8 <_vfprintf_r+0x1f0>
    c3e4:	f001 fa38 	bl	d858 <_vfprintf_r+0x1660>
    c3e8:	001a      	movs	r2, r3
    c3ea:	2500      	movs	r5, #0
    c3ec:	3a30      	subs	r2, #48	; 0x30
    c3ee:	46aa      	mov	sl, r5
    c3f0:	2a09      	cmp	r2, #9
    c3f2:	d901      	bls.n	c3f8 <_vfprintf_r+0x200>
    c3f4:	f001 f96d 	bl	d6d2 <_vfprintf_r+0x14da>
    c3f8:	0025      	movs	r5, r4
    c3fa:	4643      	mov	r3, r8
    c3fc:	4654      	mov	r4, sl
    c3fe:	4688      	mov	r8, r1
    c400:	4682      	mov	sl, r0
    c402:	00a1      	lsls	r1, r4, #2
    c404:	190c      	adds	r4, r1, r4
    c406:	7818      	ldrb	r0, [r3, #0]
    c408:	0064      	lsls	r4, r4, #1
    c40a:	18a4      	adds	r4, r4, r2
    c40c:	0002      	movs	r2, r0
    c40e:	1c59      	adds	r1, r3, #1
    c410:	3a30      	subs	r2, #48	; 0x30
    c412:	000b      	movs	r3, r1
    c414:	2a09      	cmp	r2, #9
    c416:	d9f4      	bls.n	c402 <_vfprintf_r+0x20a>
    c418:	9107      	str	r1, [sp, #28]
    c41a:	0003      	movs	r3, r0
    c41c:	4641      	mov	r1, r8
    c41e:	4650      	mov	r0, sl
    c420:	46a2      	mov	sl, r4
    c422:	002c      	movs	r4, r5
    c424:	e774      	b.n	c310 <_vfprintf_r+0x118>
    c426:	9312      	str	r3, [sp, #72]	; 0x48
    c428:	2900      	cmp	r1, #0
    c42a:	d001      	beq.n	c430 <_vfprintf_r+0x238>
    c42c:	f001 fa2e 	bl	d88c <_vfprintf_r+0x1694>
    c430:	4b57      	ldr	r3, [pc, #348]	; (c590 <_vfprintf_r+0x398>)
    c432:	9319      	str	r3, [sp, #100]	; 0x64
    c434:	06a3      	lsls	r3, r4, #26
    c436:	d501      	bpl.n	c43c <_vfprintf_r+0x244>
    c438:	f000 fe9a 	bl	d170 <_vfprintf_r+0xf78>
    c43c:	06e3      	lsls	r3, r4, #27
    c43e:	d501      	bpl.n	c444 <_vfprintf_r+0x24c>
    c440:	f000 fd9a 	bl	cf78 <_vfprintf_r+0xd80>
    c444:	0663      	lsls	r3, r4, #25
    c446:	d401      	bmi.n	c44c <_vfprintf_r+0x254>
    c448:	f000 fd96 	bl	cf78 <_vfprintf_r+0xd80>
    c44c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c44e:	881a      	ldrh	r2, [r3, #0]
    c450:	920c      	str	r2, [sp, #48]	; 0x30
    c452:	2200      	movs	r2, #0
    c454:	3304      	adds	r3, #4
    c456:	920d      	str	r2, [sp, #52]	; 0x34
    c458:	930f      	str	r3, [sp, #60]	; 0x3c
    c45a:	07e3      	lsls	r3, r4, #31
    c45c:	d401      	bmi.n	c462 <_vfprintf_r+0x26a>
    c45e:	f000 fd76 	bl	cf4e <_vfprintf_r+0xd56>
    c462:	990c      	ldr	r1, [sp, #48]	; 0x30
    c464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c466:	000b      	movs	r3, r1
    c468:	4313      	orrs	r3, r2
    c46a:	001a      	movs	r2, r3
    c46c:	2302      	movs	r3, #2
    c46e:	2a00      	cmp	r2, #0
    c470:	d008      	beq.n	c484 <_vfprintf_r+0x28c>
    c472:	2030      	movs	r0, #48	; 0x30
    c474:	a91e      	add	r1, sp, #120	; 0x78
    c476:	7008      	strb	r0, [r1, #0]
    c478:	2548      	movs	r5, #72	; 0x48
    c47a:	4668      	mov	r0, sp
    c47c:	1940      	adds	r0, r0, r5
    c47e:	7800      	ldrb	r0, [r0, #0]
    c480:	431c      	orrs	r4, r3
    c482:	7048      	strb	r0, [r1, #1]
    c484:	2100      	movs	r1, #0
    c486:	4688      	mov	r8, r1
    c488:	a816      	add	r0, sp, #88	; 0x58
    c48a:	77c1      	strb	r1, [r0, #31]
    c48c:	4651      	mov	r1, sl
    c48e:	3101      	adds	r1, #1
    c490:	d100      	bne.n	c494 <_vfprintf_r+0x29c>
    c492:	e0e6      	b.n	c662 <_vfprintf_r+0x46a>
    c494:	2180      	movs	r1, #128	; 0x80
    c496:	0020      	movs	r0, r4
    c498:	4388      	bics	r0, r1
    c49a:	9009      	str	r0, [sp, #36]	; 0x24
    c49c:	2a00      	cmp	r2, #0
    c49e:	d000      	beq.n	c4a2 <_vfprintf_r+0x2aa>
    c4a0:	e0e3      	b.n	c66a <_vfprintf_r+0x472>
    c4a2:	4652      	mov	r2, sl
    c4a4:	2a00      	cmp	r2, #0
    c4a6:	d001      	beq.n	c4ac <_vfprintf_r+0x2b4>
    c4a8:	f000 fc38 	bl	cd1c <_vfprintf_r+0xb24>
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d001      	beq.n	c4b4 <_vfprintf_r+0x2bc>
    c4b0:	f000 fd0c 	bl	cecc <_vfprintf_r+0xcd4>
    c4b4:	2001      	movs	r0, #1
    c4b6:	ab32      	add	r3, sp, #200	; 0xc8
    c4b8:	4020      	ands	r0, r4
    c4ba:	900e      	str	r0, [sp, #56]	; 0x38
    c4bc:	9311      	str	r3, [sp, #68]	; 0x44
    c4be:	d008      	beq.n	c4d2 <_vfprintf_r+0x2da>
    c4c0:	2327      	movs	r3, #39	; 0x27
    c4c2:	2130      	movs	r1, #48	; 0x30
    c4c4:	aa28      	add	r2, sp, #160	; 0xa0
    c4c6:	54d1      	strb	r1, [r2, r3]
    c4c8:	aa16      	add	r2, sp, #88	; 0x58
    c4ca:	4694      	mov	ip, r2
    c4cc:	3348      	adds	r3, #72	; 0x48
    c4ce:	4463      	add	r3, ip
    c4d0:	9311      	str	r3, [sp, #68]	; 0x44
    c4d2:	4653      	mov	r3, sl
    c4d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c4d6:	9308      	str	r3, [sp, #32]
    c4d8:	4592      	cmp	sl, r2
    c4da:	da00      	bge.n	c4de <_vfprintf_r+0x2e6>
    c4dc:	9208      	str	r2, [sp, #32]
    c4de:	2300      	movs	r3, #0
    c4e0:	9313      	str	r3, [sp, #76]	; 0x4c
    c4e2:	4643      	mov	r3, r8
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d002      	beq.n	c4ee <_vfprintf_r+0x2f6>
    c4e8:	9b08      	ldr	r3, [sp, #32]
    c4ea:	3301      	adds	r3, #1
    c4ec:	9308      	str	r3, [sp, #32]
    c4ee:	2302      	movs	r3, #2
    c4f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c4f2:	401a      	ands	r2, r3
    c4f4:	4691      	mov	r9, r2
    c4f6:	d002      	beq.n	c4fe <_vfprintf_r+0x306>
    c4f8:	9b08      	ldr	r3, [sp, #32]
    c4fa:	3302      	adds	r3, #2
    c4fc:	9308      	str	r3, [sp, #32]
    c4fe:	2384      	movs	r3, #132	; 0x84
    c500:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c502:	401a      	ands	r2, r3
    c504:	9210      	str	r2, [sp, #64]	; 0x40
    c506:	d000      	beq.n	c50a <_vfprintf_r+0x312>
    c508:	e207      	b.n	c91a <_vfprintf_r+0x722>
    c50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c50c:	9a08      	ldr	r2, [sp, #32]
    c50e:	1a9c      	subs	r4, r3, r2
    c510:	2c00      	cmp	r4, #0
    c512:	dc00      	bgt.n	c516 <_vfprintf_r+0x31e>
    c514:	e201      	b.n	c91a <_vfprintf_r+0x722>
    c516:	491f      	ldr	r1, [pc, #124]	; (c594 <_vfprintf_r+0x39c>)
    c518:	68ba      	ldr	r2, [r7, #8]
    c51a:	687b      	ldr	r3, [r7, #4]
    c51c:	4688      	mov	r8, r1
    c51e:	2c10      	cmp	r4, #16
    c520:	dd21      	ble.n	c566 <_vfprintf_r+0x36e>
    c522:	0031      	movs	r1, r6
    c524:	2510      	movs	r5, #16
    c526:	465e      	mov	r6, fp
    c528:	e003      	b.n	c532 <_vfprintf_r+0x33a>
    c52a:	3c10      	subs	r4, #16
    c52c:	3108      	adds	r1, #8
    c52e:	2c10      	cmp	r4, #16
    c530:	dd17      	ble.n	c562 <_vfprintf_r+0x36a>
    c532:	4640      	mov	r0, r8
    c534:	3210      	adds	r2, #16
    c536:	3301      	adds	r3, #1
    c538:	6008      	str	r0, [r1, #0]
    c53a:	604d      	str	r5, [r1, #4]
    c53c:	60ba      	str	r2, [r7, #8]
    c53e:	607b      	str	r3, [r7, #4]
    c540:	2b07      	cmp	r3, #7
    c542:	ddf2      	ble.n	c52a <_vfprintf_r+0x332>
    c544:	003a      	movs	r2, r7
    c546:	0031      	movs	r1, r6
    c548:	9806      	ldr	r0, [sp, #24]
    c54a:	f004 f927 	bl	1079c <__sprint_r>
    c54e:	2800      	cmp	r0, #0
    c550:	d001      	beq.n	c556 <_vfprintf_r+0x35e>
    c552:	f000 fccf 	bl	cef4 <_vfprintf_r+0xcfc>
    c556:	3c10      	subs	r4, #16
    c558:	68ba      	ldr	r2, [r7, #8]
    c55a:	687b      	ldr	r3, [r7, #4]
    c55c:	a932      	add	r1, sp, #200	; 0xc8
    c55e:	2c10      	cmp	r4, #16
    c560:	dce7      	bgt.n	c532 <_vfprintf_r+0x33a>
    c562:	46b3      	mov	fp, r6
    c564:	000e      	movs	r6, r1
    c566:	4641      	mov	r1, r8
    c568:	6074      	str	r4, [r6, #4]
    c56a:	3301      	adds	r3, #1
    c56c:	18a4      	adds	r4, r4, r2
    c56e:	6031      	str	r1, [r6, #0]
    c570:	60bc      	str	r4, [r7, #8]
    c572:	607b      	str	r3, [r7, #4]
    c574:	2b07      	cmp	r3, #7
    c576:	dd01      	ble.n	c57c <_vfprintf_r+0x384>
    c578:	f000 fcae 	bl	ced8 <_vfprintf_r+0xce0>
    c57c:	ab16      	add	r3, sp, #88	; 0x58
    c57e:	7fdb      	ldrb	r3, [r3, #31]
    c580:	3608      	adds	r6, #8
    c582:	4698      	mov	r8, r3
    c584:	e1ca      	b.n	c91c <_vfprintf_r+0x724>
    c586:	46c0      	nop			; (mov r8, r8)
    c588:	ffffdfff 	.word	0xffffdfff
    c58c:	00011444 	.word	0x00011444
    c590:	000115c4 	.word	0x000115c4
    c594:	000115e4 	.word	0x000115e4
    c598:	2200      	movs	r2, #0
    c59a:	9d07      	ldr	r5, [sp, #28]
    c59c:	3b30      	subs	r3, #48	; 0x30
    c59e:	46a8      	mov	r8, r5
    c5a0:	920b      	str	r2, [sp, #44]	; 0x2c
    c5a2:	001a      	movs	r2, r3
    c5a4:	9408      	str	r4, [sp, #32]
    c5a6:	002c      	movs	r4, r5
    c5a8:	4655      	mov	r5, sl
    c5aa:	4682      	mov	sl, r0
    c5ac:	4640      	mov	r0, r8
    c5ae:	4688      	mov	r8, r1
    c5b0:	0011      	movs	r1, r2
    c5b2:	2200      	movs	r2, #0
    c5b4:	0093      	lsls	r3, r2, #2
    c5b6:	189a      	adds	r2, r3, r2
    c5b8:	7803      	ldrb	r3, [r0, #0]
    c5ba:	0052      	lsls	r2, r2, #1
    c5bc:	188a      	adds	r2, r1, r2
    c5be:	0019      	movs	r1, r3
    c5c0:	3401      	adds	r4, #1
    c5c2:	3930      	subs	r1, #48	; 0x30
    c5c4:	0020      	movs	r0, r4
    c5c6:	2909      	cmp	r1, #9
    c5c8:	d9f4      	bls.n	c5b4 <_vfprintf_r+0x3bc>
    c5ca:	9407      	str	r4, [sp, #28]
    c5cc:	4650      	mov	r0, sl
    c5ce:	9c08      	ldr	r4, [sp, #32]
    c5d0:	920b      	str	r2, [sp, #44]	; 0x2c
    c5d2:	4641      	mov	r1, r8
    c5d4:	46aa      	mov	sl, r5
    c5d6:	e69b      	b.n	c310 <_vfprintf_r+0x118>
    c5d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c5da:	9312      	str	r3, [sp, #72]	; 0x48
    c5dc:	6813      	ldr	r3, [r2, #0]
    c5de:	2120      	movs	r1, #32
    c5e0:	9308      	str	r3, [sp, #32]
    c5e2:	466b      	mov	r3, sp
    c5e4:	185b      	adds	r3, r3, r1
    c5e6:	781b      	ldrb	r3, [r3, #0]
    c5e8:	ad28      	add	r5, sp, #160	; 0xa0
    c5ea:	702b      	strb	r3, [r5, #0]
    c5ec:	2300      	movs	r3, #0
    c5ee:	a916      	add	r1, sp, #88	; 0x58
    c5f0:	77cb      	strb	r3, [r1, #31]
    c5f2:	0013      	movs	r3, r2
    c5f4:	3304      	adds	r3, #4
    c5f6:	930f      	str	r3, [sp, #60]	; 0x3c
    c5f8:	2300      	movs	r3, #0
    c5fa:	9409      	str	r4, [sp, #36]	; 0x24
    c5fc:	4698      	mov	r8, r3
    c5fe:	3301      	adds	r3, #1
    c600:	9308      	str	r3, [sp, #32]
    c602:	930e      	str	r3, [sp, #56]	; 0x38
    c604:	2300      	movs	r3, #0
    c606:	9511      	str	r5, [sp, #68]	; 0x44
    c608:	469a      	mov	sl, r3
    c60a:	9313      	str	r3, [sp, #76]	; 0x4c
    c60c:	e76f      	b.n	c4ee <_vfprintf_r+0x2f6>
    c60e:	9312      	str	r3, [sp, #72]	; 0x48
    c610:	2900      	cmp	r1, #0
    c612:	d001      	beq.n	c618 <_vfprintf_r+0x420>
    c614:	f001 f94d 	bl	d8b2 <_vfprintf_r+0x16ba>
    c618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c61a:	06a3      	lsls	r3, r4, #26
    c61c:	d501      	bpl.n	c622 <_vfprintf_r+0x42a>
    c61e:	f000 fd5a 	bl	d0d6 <_vfprintf_r+0xede>
    c622:	06e3      	lsls	r3, r4, #27
    c624:	d501      	bpl.n	c62a <_vfprintf_r+0x432>
    c626:	f000 fcab 	bl	cf80 <_vfprintf_r+0xd88>
    c62a:	0663      	lsls	r3, r4, #25
    c62c:	d401      	bmi.n	c632 <_vfprintf_r+0x43a>
    c62e:	f000 fca7 	bl	cf80 <_vfprintf_r+0xd88>
    c632:	2100      	movs	r1, #0
    c634:	5e53      	ldrsh	r3, [r2, r1]
    c636:	930c      	str	r3, [sp, #48]	; 0x30
    c638:	3204      	adds	r2, #4
    c63a:	17db      	asrs	r3, r3, #31
    c63c:	930d      	str	r3, [sp, #52]	; 0x34
    c63e:	920f      	str	r2, [sp, #60]	; 0x3c
    c640:	2b00      	cmp	r3, #0
    c642:	da01      	bge.n	c648 <_vfprintf_r+0x450>
    c644:	f000 fdb2 	bl	d1ac <_vfprintf_r+0xfb4>
    c648:	990c      	ldr	r1, [sp, #48]	; 0x30
    c64a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c64c:	0008      	movs	r0, r1
    c64e:	4651      	mov	r1, sl
    c650:	ab16      	add	r3, sp, #88	; 0x58
    c652:	7fdb      	ldrb	r3, [r3, #31]
    c654:	4310      	orrs	r0, r2
    c656:	4698      	mov	r8, r3
    c658:	0002      	movs	r2, r0
    c65a:	2301      	movs	r3, #1
    c65c:	3101      	adds	r1, #1
    c65e:	d000      	beq.n	c662 <_vfprintf_r+0x46a>
    c660:	e718      	b.n	c494 <_vfprintf_r+0x29c>
    c662:	2a00      	cmp	r2, #0
    c664:	d100      	bne.n	c668 <_vfprintf_r+0x470>
    c666:	e35a      	b.n	cd1e <_vfprintf_r+0xb26>
    c668:	9409      	str	r4, [sp, #36]	; 0x24
    c66a:	2b01      	cmp	r3, #1
    c66c:	d101      	bne.n	c672 <_vfprintf_r+0x47a>
    c66e:	f000 fc06 	bl	ce7e <_vfprintf_r+0xc86>
    c672:	2b02      	cmp	r3, #2
    c674:	d000      	beq.n	c678 <_vfprintf_r+0x480>
    c676:	e380      	b.n	cd7a <_vfprintf_r+0xb82>
    c678:	9c19      	ldr	r4, [sp, #100]	; 0x64
    c67a:	200f      	movs	r0, #15
    c67c:	46a1      	mov	r9, r4
    c67e:	46b4      	mov	ip, r6
    c680:	ab32      	add	r3, sp, #200	; 0xc8
    c682:	0019      	movs	r1, r3
    c684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c688:	0004      	movs	r4, r0
    c68a:	464d      	mov	r5, r9
    c68c:	4014      	ands	r4, r2
    c68e:	5d2c      	ldrb	r4, [r5, r4]
    c690:	071e      	lsls	r6, r3, #28
    c692:	0915      	lsrs	r5, r2, #4
    c694:	3901      	subs	r1, #1
    c696:	432e      	orrs	r6, r5
    c698:	700c      	strb	r4, [r1, #0]
    c69a:	091c      	lsrs	r4, r3, #4
    c69c:	0023      	movs	r3, r4
    c69e:	0034      	movs	r4, r6
    c6a0:	0032      	movs	r2, r6
    c6a2:	431c      	orrs	r4, r3
    c6a4:	d1f0      	bne.n	c688 <_vfprintf_r+0x490>
    c6a6:	920c      	str	r2, [sp, #48]	; 0x30
    c6a8:	930d      	str	r3, [sp, #52]	; 0x34
    c6aa:	ab32      	add	r3, sp, #200	; 0xc8
    c6ac:	1a5b      	subs	r3, r3, r1
    c6ae:	9111      	str	r1, [sp, #68]	; 0x44
    c6b0:	4666      	mov	r6, ip
    c6b2:	930e      	str	r3, [sp, #56]	; 0x38
    c6b4:	e70d      	b.n	c4d2 <_vfprintf_r+0x2da>
    c6b6:	4663      	mov	r3, ip
    c6b8:	431c      	orrs	r4, r3
    c6ba:	9b07      	ldr	r3, [sp, #28]
    c6bc:	781b      	ldrb	r3, [r3, #0]
    c6be:	e624      	b.n	c30a <_vfprintf_r+0x112>
    c6c0:	9b07      	ldr	r3, [sp, #28]
    c6c2:	781b      	ldrb	r3, [r3, #0]
    c6c4:	2b6c      	cmp	r3, #108	; 0x6c
    c6c6:	d101      	bne.n	c6cc <_vfprintf_r+0x4d4>
    c6c8:	f000 fe8c 	bl	d3e4 <_vfprintf_r+0x11ec>
    c6cc:	2210      	movs	r2, #16
    c6ce:	4314      	orrs	r4, r2
    c6d0:	e61b      	b.n	c30a <_vfprintf_r+0x112>
    c6d2:	2900      	cmp	r1, #0
    c6d4:	d001      	beq.n	c6da <_vfprintf_r+0x4e2>
    c6d6:	f001 f8d5 	bl	d884 <_vfprintf_r+0x168c>
    c6da:	06a3      	lsls	r3, r4, #26
    c6dc:	d501      	bpl.n	c6e2 <_vfprintf_r+0x4ea>
    c6de:	f000 fe76 	bl	d3ce <_vfprintf_r+0x11d6>
    c6e2:	06e3      	lsls	r3, r4, #27
    c6e4:	d500      	bpl.n	c6e8 <_vfprintf_r+0x4f0>
    c6e6:	e110      	b.n	c90a <_vfprintf_r+0x712>
    c6e8:	0663      	lsls	r3, r4, #25
    c6ea:	d400      	bmi.n	c6ee <_vfprintf_r+0x4f6>
    c6ec:	e10d      	b.n	c90a <_vfprintf_r+0x712>
    c6ee:	4669      	mov	r1, sp
    c6f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    c6f4:	681a      	ldr	r2, [r3, #0]
    c6f6:	3304      	adds	r3, #4
    c6f8:	9208      	str	r2, [sp, #32]
    c6fa:	8011      	strh	r1, [r2, #0]
    c6fc:	930f      	str	r3, [sp, #60]	; 0x3c
    c6fe:	e5c9      	b.n	c294 <_vfprintf_r+0x9c>
    c700:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c702:	2230      	movs	r2, #48	; 0x30
    c704:	680b      	ldr	r3, [r1, #0]
    c706:	930c      	str	r3, [sp, #48]	; 0x30
    c708:	2300      	movs	r3, #0
    c70a:	930d      	str	r3, [sp, #52]	; 0x34
    c70c:	3302      	adds	r3, #2
    c70e:	431c      	orrs	r4, r3
    c710:	ab1e      	add	r3, sp, #120	; 0x78
    c712:	701a      	strb	r2, [r3, #0]
    c714:	3248      	adds	r2, #72	; 0x48
    c716:	705a      	strb	r2, [r3, #1]
    c718:	000b      	movs	r3, r1
    c71a:	3304      	adds	r3, #4
    c71c:	930f      	str	r3, [sp, #60]	; 0x3c
    c71e:	4bc1      	ldr	r3, [pc, #772]	; (ca24 <_vfprintf_r+0x82c>)
    c720:	9212      	str	r2, [sp, #72]	; 0x48
    c722:	9319      	str	r3, [sp, #100]	; 0x64
    c724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c726:	2302      	movs	r3, #2
    c728:	e6ac      	b.n	c484 <_vfprintf_r+0x28c>
    c72a:	464b      	mov	r3, r9
    c72c:	431c      	orrs	r4, r3
    c72e:	9b07      	ldr	r3, [sp, #28]
    c730:	781b      	ldrb	r3, [r3, #0]
    c732:	e5ea      	b.n	c30a <_vfprintf_r+0x112>
    c734:	9312      	str	r3, [sp, #72]	; 0x48
    c736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c738:	a916      	add	r1, sp, #88	; 0x58
    c73a:	1d1d      	adds	r5, r3, #4
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	001a      	movs	r2, r3
    c740:	9311      	str	r3, [sp, #68]	; 0x44
    c742:	2300      	movs	r3, #0
    c744:	77cb      	strb	r3, [r1, #31]
    c746:	2a00      	cmp	r2, #0
    c748:	d101      	bne.n	c74e <_vfprintf_r+0x556>
    c74a:	f000 ff01 	bl	d550 <_vfprintf_r+0x1358>
    c74e:	4653      	mov	r3, sl
    c750:	3301      	adds	r3, #1
    c752:	d101      	bne.n	c758 <_vfprintf_r+0x560>
    c754:	f000 fe64 	bl	d420 <_vfprintf_r+0x1228>
    c758:	4652      	mov	r2, sl
    c75a:	2100      	movs	r1, #0
    c75c:	9811      	ldr	r0, [sp, #68]	; 0x44
    c75e:	f003 f9d5 	bl	fb0c <memchr>
    c762:	2800      	cmp	r0, #0
    c764:	d101      	bne.n	c76a <_vfprintf_r+0x572>
    c766:	f000 ff78 	bl	d65a <_vfprintf_r+0x1462>
    c76a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c76c:	1ac3      	subs	r3, r0, r3
    c76e:	001a      	movs	r2, r3
    c770:	930e      	str	r3, [sp, #56]	; 0x38
    c772:	43db      	mvns	r3, r3
    c774:	17db      	asrs	r3, r3, #31
    c776:	401a      	ands	r2, r3
    c778:	ab16      	add	r3, sp, #88	; 0x58
    c77a:	7fdb      	ldrb	r3, [r3, #31]
    c77c:	9208      	str	r2, [sp, #32]
    c77e:	4698      	mov	r8, r3
    c780:	2300      	movs	r3, #0
    c782:	950f      	str	r5, [sp, #60]	; 0x3c
    c784:	9409      	str	r4, [sp, #36]	; 0x24
    c786:	469a      	mov	sl, r3
    c788:	9313      	str	r3, [sp, #76]	; 0x4c
    c78a:	e6aa      	b.n	c4e2 <_vfprintf_r+0x2ea>
    c78c:	2308      	movs	r3, #8
    c78e:	431c      	orrs	r4, r3
    c790:	9b07      	ldr	r3, [sp, #28]
    c792:	781b      	ldrb	r3, [r3, #0]
    c794:	e5b9      	b.n	c30a <_vfprintf_r+0x112>
    c796:	9312      	str	r3, [sp, #72]	; 0x48
    c798:	2310      	movs	r3, #16
    c79a:	431c      	orrs	r4, r3
    c79c:	06a3      	lsls	r3, r4, #26
    c79e:	d501      	bpl.n	c7a4 <_vfprintf_r+0x5ac>
    c7a0:	f000 fca7 	bl	d0f2 <_vfprintf_r+0xefa>
    c7a4:	06e3      	lsls	r3, r4, #27
    c7a6:	d500      	bpl.n	c7aa <_vfprintf_r+0x5b2>
    c7a8:	e3ee      	b.n	cf88 <_vfprintf_r+0xd90>
    c7aa:	0663      	lsls	r3, r4, #25
    c7ac:	d400      	bmi.n	c7b0 <_vfprintf_r+0x5b8>
    c7ae:	e3eb      	b.n	cf88 <_vfprintf_r+0xd90>
    c7b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7b2:	881a      	ldrh	r2, [r3, #0]
    c7b4:	920c      	str	r2, [sp, #48]	; 0x30
    c7b6:	2200      	movs	r2, #0
    c7b8:	3304      	adds	r3, #4
    c7ba:	920d      	str	r2, [sp, #52]	; 0x34
    c7bc:	930f      	str	r3, [sp, #60]	; 0x3c
    c7be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7c0:	2300      	movs	r3, #0
    c7c2:	e65f      	b.n	c484 <_vfprintf_r+0x28c>
    c7c4:	9312      	str	r3, [sp, #72]	; 0x48
    c7c6:	2310      	movs	r3, #16
    c7c8:	431c      	orrs	r4, r3
    c7ca:	06a3      	lsls	r3, r4, #26
    c7cc:	d501      	bpl.n	c7d2 <_vfprintf_r+0x5da>
    c7ce:	f000 fcba 	bl	d146 <_vfprintf_r+0xf4e>
    c7d2:	06e3      	lsls	r3, r4, #27
    c7d4:	d500      	bpl.n	c7d8 <_vfprintf_r+0x5e0>
    c7d6:	e3da      	b.n	cf8e <_vfprintf_r+0xd96>
    c7d8:	0663      	lsls	r3, r4, #25
    c7da:	d400      	bmi.n	c7de <_vfprintf_r+0x5e6>
    c7dc:	e3d7      	b.n	cf8e <_vfprintf_r+0xd96>
    c7de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7e0:	881a      	ldrh	r2, [r3, #0]
    c7e2:	920c      	str	r2, [sp, #48]	; 0x30
    c7e4:	2200      	movs	r2, #0
    c7e6:	3304      	adds	r3, #4
    c7e8:	920d      	str	r2, [sp, #52]	; 0x34
    c7ea:	930f      	str	r3, [sp, #60]	; 0x3c
    c7ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7ee:	2301      	movs	r3, #1
    c7f0:	e648      	b.n	c484 <_vfprintf_r+0x28c>
    c7f2:	9312      	str	r3, [sp, #72]	; 0x48
    c7f4:	2900      	cmp	r1, #0
    c7f6:	d001      	beq.n	c7fc <_vfprintf_r+0x604>
    c7f8:	f001 f857 	bl	d8aa <_vfprintf_r+0x16b2>
    c7fc:	4b8a      	ldr	r3, [pc, #552]	; (ca28 <_vfprintf_r+0x830>)
    c7fe:	9319      	str	r3, [sp, #100]	; 0x64
    c800:	e618      	b.n	c434 <_vfprintf_r+0x23c>
    c802:	2301      	movs	r3, #1
    c804:	431c      	orrs	r4, r3
    c806:	9b07      	ldr	r3, [sp, #28]
    c808:	781b      	ldrb	r3, [r3, #0]
    c80a:	e57e      	b.n	c30a <_vfprintf_r+0x112>
    c80c:	2380      	movs	r3, #128	; 0x80
    c80e:	431c      	orrs	r4, r3
    c810:	9b07      	ldr	r3, [sp, #28]
    c812:	781b      	ldrb	r3, [r3, #0]
    c814:	e579      	b.n	c30a <_vfprintf_r+0x112>
    c816:	9b07      	ldr	r3, [sp, #28]
    c818:	781b      	ldrb	r3, [r3, #0]
    c81a:	2800      	cmp	r0, #0
    c81c:	d000      	beq.n	c820 <_vfprintf_r+0x628>
    c81e:	e574      	b.n	c30a <_vfprintf_r+0x112>
    c820:	2101      	movs	r1, #1
    c822:	3020      	adds	r0, #32
    c824:	e571      	b.n	c30a <_vfprintf_r+0x112>
    c826:	9312      	str	r3, [sp, #72]	; 0x48
    c828:	2900      	cmp	r1, #0
    c82a:	d001      	beq.n	c830 <_vfprintf_r+0x638>
    c82c:	f001 f839 	bl	d8a2 <_vfprintf_r+0x16aa>
    c830:	2207      	movs	r2, #7
    c832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c834:	3307      	adds	r3, #7
    c836:	4393      	bics	r3, r2
    c838:	3201      	adds	r2, #1
    c83a:	4694      	mov	ip, r2
    c83c:	449c      	add	ip, r3
    c83e:	4662      	mov	r2, ip
    c840:	920f      	str	r2, [sp, #60]	; 0x3c
    c842:	681a      	ldr	r2, [r3, #0]
    c844:	9216      	str	r2, [sp, #88]	; 0x58
    c846:	685b      	ldr	r3, [r3, #4]
    c848:	2201      	movs	r2, #1
    c84a:	9315      	str	r3, [sp, #84]	; 0x54
    c84c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c84e:	9d16      	ldr	r5, [sp, #88]	; 0x58
    c850:	005b      	lsls	r3, r3, #1
    c852:	085b      	lsrs	r3, r3, #1
    c854:	4698      	mov	r8, r3
    c856:	4252      	negs	r2, r2
    c858:	4b74      	ldr	r3, [pc, #464]	; (ca2c <_vfprintf_r+0x834>)
    c85a:	0028      	movs	r0, r5
    c85c:	4641      	mov	r1, r8
    c85e:	f7ff f9d5 	bl	bc0c <__aeabi_dcmpun>
    c862:	2800      	cmp	r0, #0
    c864:	d001      	beq.n	c86a <_vfprintf_r+0x672>
    c866:	f000 fcb4 	bl	d1d2 <_vfprintf_r+0xfda>
    c86a:	2201      	movs	r2, #1
    c86c:	4b6f      	ldr	r3, [pc, #444]	; (ca2c <_vfprintf_r+0x834>)
    c86e:	4252      	negs	r2, r2
    c870:	0028      	movs	r0, r5
    c872:	4641      	mov	r1, r8
    c874:	f7fc fc84 	bl	9180 <__aeabi_dcmple>
    c878:	2800      	cmp	r0, #0
    c87a:	d001      	beq.n	c880 <_vfprintf_r+0x688>
    c87c:	f000 fca9 	bl	d1d2 <_vfprintf_r+0xfda>
    c880:	2200      	movs	r2, #0
    c882:	2300      	movs	r3, #0
    c884:	9816      	ldr	r0, [sp, #88]	; 0x58
    c886:	9915      	ldr	r1, [sp, #84]	; 0x54
    c888:	f7fc fc70 	bl	916c <__aeabi_dcmplt>
    c88c:	2800      	cmp	r0, #0
    c88e:	d001      	beq.n	c894 <_vfprintf_r+0x69c>
    c890:	f000 fd55 	bl	d33e <_vfprintf_r+0x1146>
    c894:	ab16      	add	r3, sp, #88	; 0x58
    c896:	7fdb      	ldrb	r3, [r3, #31]
    c898:	4698      	mov	r8, r3
    c89a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c89c:	2b47      	cmp	r3, #71	; 0x47
    c89e:	dd01      	ble.n	c8a4 <_vfprintf_r+0x6ac>
    c8a0:	f000 fdb4 	bl	d40c <_vfprintf_r+0x1214>
    c8a4:	4b62      	ldr	r3, [pc, #392]	; (ca30 <_vfprintf_r+0x838>)
    c8a6:	9311      	str	r3, [sp, #68]	; 0x44
    c8a8:	2380      	movs	r3, #128	; 0x80
    c8aa:	439c      	bics	r4, r3
    c8ac:	3b7d      	subs	r3, #125	; 0x7d
    c8ae:	9308      	str	r3, [sp, #32]
    c8b0:	930e      	str	r3, [sp, #56]	; 0x38
    c8b2:	2300      	movs	r3, #0
    c8b4:	9409      	str	r4, [sp, #36]	; 0x24
    c8b6:	469a      	mov	sl, r3
    c8b8:	9313      	str	r3, [sp, #76]	; 0x4c
    c8ba:	e612      	b.n	c4e2 <_vfprintf_r+0x2ea>
    c8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c8be:	1d1a      	adds	r2, r3, #4
    c8c0:	681b      	ldr	r3, [r3, #0]
    c8c2:	930b      	str	r3, [sp, #44]	; 0x2c
    c8c4:	2b00      	cmp	r3, #0
    c8c6:	da00      	bge.n	c8ca <_vfprintf_r+0x6d2>
    c8c8:	e578      	b.n	c3bc <_vfprintf_r+0x1c4>
    c8ca:	9b07      	ldr	r3, [sp, #28]
    c8cc:	920f      	str	r2, [sp, #60]	; 0x3c
    c8ce:	781b      	ldrb	r3, [r3, #0]
    c8d0:	e51b      	b.n	c30a <_vfprintf_r+0x112>
    c8d2:	9312      	str	r3, [sp, #72]	; 0x48
    c8d4:	2900      	cmp	r1, #0
    c8d6:	d001      	beq.n	c8dc <_vfprintf_r+0x6e4>
    c8d8:	f000 ffcc 	bl	d874 <_vfprintf_r+0x167c>
    c8dc:	2310      	movs	r3, #16
    c8de:	431c      	orrs	r4, r3
    c8e0:	e69a      	b.n	c618 <_vfprintf_r+0x420>
    c8e2:	9312      	str	r3, [sp, #72]	; 0x48
    c8e4:	e771      	b.n	c7ca <_vfprintf_r+0x5d2>
    c8e6:	9312      	str	r3, [sp, #72]	; 0x48
    c8e8:	e758      	b.n	c79c <_vfprintf_r+0x5a4>
    c8ea:	9312      	str	r3, [sp, #72]	; 0x48
    c8ec:	2900      	cmp	r1, #0
    c8ee:	d001      	beq.n	c8f4 <_vfprintf_r+0x6fc>
    c8f0:	f000 ffd3 	bl	d89a <_vfprintf_r+0x16a2>
    c8f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d100      	bne.n	c8fc <_vfprintf_r+0x704>
    c8fa:	e18d      	b.n	cc18 <_vfprintf_r+0xa20>
    c8fc:	ad28      	add	r5, sp, #160	; 0xa0
    c8fe:	702b      	strb	r3, [r5, #0]
    c900:	2300      	movs	r3, #0
    c902:	aa16      	add	r2, sp, #88	; 0x58
    c904:	77d3      	strb	r3, [r2, #31]
    c906:	9409      	str	r4, [sp, #36]	; 0x24
    c908:	e678      	b.n	c5fc <_vfprintf_r+0x404>
    c90a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c90c:	990a      	ldr	r1, [sp, #40]	; 0x28
    c90e:	6813      	ldr	r3, [r2, #0]
    c910:	6019      	str	r1, [r3, #0]
    c912:	0013      	movs	r3, r2
    c914:	3304      	adds	r3, #4
    c916:	930f      	str	r3, [sp, #60]	; 0x3c
    c918:	e4bc      	b.n	c294 <_vfprintf_r+0x9c>
    c91a:	68bc      	ldr	r4, [r7, #8]
    c91c:	4643      	mov	r3, r8
    c91e:	2b00      	cmp	r3, #0
    c920:	d00f      	beq.n	c942 <_vfprintf_r+0x74a>
    c922:	aa16      	add	r2, sp, #88	; 0x58
    c924:	231f      	movs	r3, #31
    c926:	4694      	mov	ip, r2
    c928:	4463      	add	r3, ip
    c92a:	6033      	str	r3, [r6, #0]
    c92c:	2301      	movs	r3, #1
    c92e:	6073      	str	r3, [r6, #4]
    c930:	687b      	ldr	r3, [r7, #4]
    c932:	3401      	adds	r4, #1
    c934:	3301      	adds	r3, #1
    c936:	60bc      	str	r4, [r7, #8]
    c938:	607b      	str	r3, [r7, #4]
    c93a:	2b07      	cmp	r3, #7
    c93c:	dd00      	ble.n	c940 <_vfprintf_r+0x748>
    c93e:	e203      	b.n	cd48 <_vfprintf_r+0xb50>
    c940:	3608      	adds	r6, #8
    c942:	464b      	mov	r3, r9
    c944:	2b00      	cmp	r3, #0
    c946:	d00c      	beq.n	c962 <_vfprintf_r+0x76a>
    c948:	ab1e      	add	r3, sp, #120	; 0x78
    c94a:	6033      	str	r3, [r6, #0]
    c94c:	2302      	movs	r3, #2
    c94e:	6073      	str	r3, [r6, #4]
    c950:	687b      	ldr	r3, [r7, #4]
    c952:	3402      	adds	r4, #2
    c954:	3301      	adds	r3, #1
    c956:	60bc      	str	r4, [r7, #8]
    c958:	607b      	str	r3, [r7, #4]
    c95a:	2b07      	cmp	r3, #7
    c95c:	dd00      	ble.n	c960 <_vfprintf_r+0x768>
    c95e:	e1fd      	b.n	cd5c <_vfprintf_r+0xb64>
    c960:	3608      	adds	r6, #8
    c962:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c964:	2b80      	cmp	r3, #128	; 0x80
    c966:	d100      	bne.n	c96a <_vfprintf_r+0x772>
    c968:	e173      	b.n	cc52 <_vfprintf_r+0xa5a>
    c96a:	4653      	mov	r3, sl
    c96c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c96e:	1a9d      	subs	r5, r3, r2
    c970:	2d00      	cmp	r5, #0
    c972:	dd32      	ble.n	c9da <_vfprintf_r+0x7e2>
    c974:	4a2f      	ldr	r2, [pc, #188]	; (ca34 <_vfprintf_r+0x83c>)
    c976:	687b      	ldr	r3, [r7, #4]
    c978:	4691      	mov	r9, r2
    c97a:	2d10      	cmp	r5, #16
    c97c:	dd22      	ble.n	c9c4 <_vfprintf_r+0x7cc>
    c97e:	2210      	movs	r2, #16
    c980:	4692      	mov	sl, r2
    c982:	0022      	movs	r2, r4
    c984:	465c      	mov	r4, fp
    c986:	e003      	b.n	c990 <_vfprintf_r+0x798>
    c988:	3d10      	subs	r5, #16
    c98a:	3608      	adds	r6, #8
    c98c:	2d10      	cmp	r5, #16
    c98e:	dd17      	ble.n	c9c0 <_vfprintf_r+0x7c8>
    c990:	4649      	mov	r1, r9
    c992:	6031      	str	r1, [r6, #0]
    c994:	4651      	mov	r1, sl
    c996:	3210      	adds	r2, #16
    c998:	3301      	adds	r3, #1
    c99a:	6071      	str	r1, [r6, #4]
    c99c:	60ba      	str	r2, [r7, #8]
    c99e:	607b      	str	r3, [r7, #4]
    c9a0:	2b07      	cmp	r3, #7
    c9a2:	ddf1      	ble.n	c988 <_vfprintf_r+0x790>
    c9a4:	003a      	movs	r2, r7
    c9a6:	0021      	movs	r1, r4
    c9a8:	9806      	ldr	r0, [sp, #24]
    c9aa:	f003 fef7 	bl	1079c <__sprint_r>
    c9ae:	2800      	cmp	r0, #0
    c9b0:	d000      	beq.n	c9b4 <_vfprintf_r+0x7bc>
    c9b2:	e18a      	b.n	ccca <_vfprintf_r+0xad2>
    c9b4:	3d10      	subs	r5, #16
    c9b6:	68ba      	ldr	r2, [r7, #8]
    c9b8:	687b      	ldr	r3, [r7, #4]
    c9ba:	ae32      	add	r6, sp, #200	; 0xc8
    c9bc:	2d10      	cmp	r5, #16
    c9be:	dce7      	bgt.n	c990 <_vfprintf_r+0x798>
    c9c0:	46a3      	mov	fp, r4
    c9c2:	0014      	movs	r4, r2
    c9c4:	464a      	mov	r2, r9
    c9c6:	1964      	adds	r4, r4, r5
    c9c8:	3301      	adds	r3, #1
    c9ca:	6032      	str	r2, [r6, #0]
    c9cc:	6075      	str	r5, [r6, #4]
    c9ce:	60bc      	str	r4, [r7, #8]
    c9d0:	607b      	str	r3, [r7, #4]
    c9d2:	2b07      	cmp	r3, #7
    c9d4:	dd00      	ble.n	c9d8 <_vfprintf_r+0x7e0>
    c9d6:	e1ad      	b.n	cd34 <_vfprintf_r+0xb3c>
    c9d8:	3608      	adds	r6, #8
    c9da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9dc:	05db      	lsls	r3, r3, #23
    c9de:	d500      	bpl.n	c9e2 <_vfprintf_r+0x7ea>
    c9e0:	e0be      	b.n	cb60 <_vfprintf_r+0x968>
    c9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9e4:	6033      	str	r3, [r6, #0]
    c9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c9e8:	469c      	mov	ip, r3
    c9ea:	6073      	str	r3, [r6, #4]
    c9ec:	687b      	ldr	r3, [r7, #4]
    c9ee:	4464      	add	r4, ip
    c9f0:	3301      	adds	r3, #1
    c9f2:	60bc      	str	r4, [r7, #8]
    c9f4:	607b      	str	r3, [r7, #4]
    c9f6:	2b07      	cmp	r3, #7
    c9f8:	dd00      	ble.n	c9fc <_vfprintf_r+0x804>
    c9fa:	e0a6      	b.n	cb4a <_vfprintf_r+0x952>
    c9fc:	3608      	adds	r6, #8
    c9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca00:	075b      	lsls	r3, r3, #29
    ca02:	d54a      	bpl.n	ca9a <_vfprintf_r+0x8a2>
    ca04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca06:	9a08      	ldr	r2, [sp, #32]
    ca08:	1a9d      	subs	r5, r3, r2
    ca0a:	2d00      	cmp	r5, #0
    ca0c:	dd45      	ble.n	ca9a <_vfprintf_r+0x8a2>
    ca0e:	4a0a      	ldr	r2, [pc, #40]	; (ca38 <_vfprintf_r+0x840>)
    ca10:	687b      	ldr	r3, [r7, #4]
    ca12:	4690      	mov	r8, r2
    ca14:	2d10      	cmp	r5, #16
    ca16:	dd2f      	ble.n	ca78 <_vfprintf_r+0x880>
    ca18:	2210      	movs	r2, #16
    ca1a:	4691      	mov	r9, r2
    ca1c:	0022      	movs	r2, r4
    ca1e:	465c      	mov	r4, fp
    ca20:	e010      	b.n	ca44 <_vfprintf_r+0x84c>
    ca22:	46c0      	nop			; (mov r8, r8)
    ca24:	000115c4 	.word	0x000115c4
    ca28:	000115b0 	.word	0x000115b0
    ca2c:	7fefffff 	.word	0x7fefffff
    ca30:	000115a8 	.word	0x000115a8
    ca34:	000115f4 	.word	0x000115f4
    ca38:	000115e4 	.word	0x000115e4
    ca3c:	3d10      	subs	r5, #16
    ca3e:	3608      	adds	r6, #8
    ca40:	2d10      	cmp	r5, #16
    ca42:	dd17      	ble.n	ca74 <_vfprintf_r+0x87c>
    ca44:	49d1      	ldr	r1, [pc, #836]	; (cd8c <_vfprintf_r+0xb94>)
    ca46:	3210      	adds	r2, #16
    ca48:	6031      	str	r1, [r6, #0]
    ca4a:	4649      	mov	r1, r9
    ca4c:	3301      	adds	r3, #1
    ca4e:	6071      	str	r1, [r6, #4]
    ca50:	60ba      	str	r2, [r7, #8]
    ca52:	607b      	str	r3, [r7, #4]
    ca54:	2b07      	cmp	r3, #7
    ca56:	ddf1      	ble.n	ca3c <_vfprintf_r+0x844>
    ca58:	003a      	movs	r2, r7
    ca5a:	0021      	movs	r1, r4
    ca5c:	9806      	ldr	r0, [sp, #24]
    ca5e:	f003 fe9d 	bl	1079c <__sprint_r>
    ca62:	2800      	cmp	r0, #0
    ca64:	d000      	beq.n	ca68 <_vfprintf_r+0x870>
    ca66:	e130      	b.n	ccca <_vfprintf_r+0xad2>
    ca68:	3d10      	subs	r5, #16
    ca6a:	68ba      	ldr	r2, [r7, #8]
    ca6c:	687b      	ldr	r3, [r7, #4]
    ca6e:	ae32      	add	r6, sp, #200	; 0xc8
    ca70:	2d10      	cmp	r5, #16
    ca72:	dce7      	bgt.n	ca44 <_vfprintf_r+0x84c>
    ca74:	46a3      	mov	fp, r4
    ca76:	0014      	movs	r4, r2
    ca78:	4642      	mov	r2, r8
    ca7a:	1964      	adds	r4, r4, r5
    ca7c:	3301      	adds	r3, #1
    ca7e:	c624      	stmia	r6!, {r2, r5}
    ca80:	60bc      	str	r4, [r7, #8]
    ca82:	607b      	str	r3, [r7, #4]
    ca84:	2b07      	cmp	r3, #7
    ca86:	dd08      	ble.n	ca9a <_vfprintf_r+0x8a2>
    ca88:	003a      	movs	r2, r7
    ca8a:	4659      	mov	r1, fp
    ca8c:	9806      	ldr	r0, [sp, #24]
    ca8e:	f003 fe85 	bl	1079c <__sprint_r>
    ca92:	2800      	cmp	r0, #0
    ca94:	d000      	beq.n	ca98 <_vfprintf_r+0x8a0>
    ca96:	e13f      	b.n	cd18 <_vfprintf_r+0xb20>
    ca98:	68bc      	ldr	r4, [r7, #8]
    ca9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca9c:	9908      	ldr	r1, [sp, #32]
    ca9e:	428b      	cmp	r3, r1
    caa0:	da00      	bge.n	caa4 <_vfprintf_r+0x8ac>
    caa2:	000b      	movs	r3, r1
    caa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    caa6:	4694      	mov	ip, r2
    caa8:	449c      	add	ip, r3
    caaa:	4663      	mov	r3, ip
    caac:	930a      	str	r3, [sp, #40]	; 0x28
    caae:	2c00      	cmp	r4, #0
    cab0:	d000      	beq.n	cab4 <_vfprintf_r+0x8bc>
    cab2:	e129      	b.n	cd08 <_vfprintf_r+0xb10>
    cab4:	2300      	movs	r3, #0
    cab6:	ae32      	add	r6, sp, #200	; 0xc8
    cab8:	607b      	str	r3, [r7, #4]
    caba:	f7ff fbeb 	bl	c294 <_vfprintf_r+0x9c>
    cabe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cac0:	2b01      	cmp	r3, #1
    cac2:	dc00      	bgt.n	cac6 <_vfprintf_r+0x8ce>
    cac4:	e103      	b.n	ccce <_vfprintf_r+0xad6>
    cac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cac8:	3401      	adds	r4, #1
    caca:	6033      	str	r3, [r6, #0]
    cacc:	2301      	movs	r3, #1
    cace:	6073      	str	r3, [r6, #4]
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	60bc      	str	r4, [r7, #8]
    cad4:	3301      	adds	r3, #1
    cad6:	607b      	str	r3, [r7, #4]
    cad8:	2b07      	cmp	r3, #7
    cada:	dd00      	ble.n	cade <_vfprintf_r+0x8e6>
    cadc:	e2ef      	b.n	d0be <_vfprintf_r+0xec6>
    cade:	3608      	adds	r6, #8
    cae0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    cae2:	3301      	adds	r3, #1
    cae4:	6032      	str	r2, [r6, #0]
    cae6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cae8:	4698      	mov	r8, r3
    caea:	4694      	mov	ip, r2
    caec:	4464      	add	r4, ip
    caee:	6072      	str	r2, [r6, #4]
    caf0:	60bc      	str	r4, [r7, #8]
    caf2:	607b      	str	r3, [r7, #4]
    caf4:	2b07      	cmp	r3, #7
    caf6:	dd00      	ble.n	cafa <_vfprintf_r+0x902>
    caf8:	e318      	b.n	d12c <_vfprintf_r+0xf34>
    cafa:	3608      	adds	r6, #8
    cafc:	2200      	movs	r2, #0
    cafe:	2300      	movs	r3, #0
    cb00:	9816      	ldr	r0, [sp, #88]	; 0x58
    cb02:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb04:	f7fc fb2c 	bl	9160 <__aeabi_dcmpeq>
    cb08:	2800      	cmp	r0, #0
    cb0a:	d000      	beq.n	cb0e <_vfprintf_r+0x916>
    cb0c:	e1f4      	b.n	cef8 <_vfprintf_r+0xd00>
    cb0e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    cb10:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb12:	3501      	adds	r5, #1
    cb14:	3b01      	subs	r3, #1
    cb16:	6035      	str	r5, [r6, #0]
    cb18:	6073      	str	r3, [r6, #4]
    cb1a:	18e4      	adds	r4, r4, r3
    cb1c:	2301      	movs	r3, #1
    cb1e:	469c      	mov	ip, r3
    cb20:	44e0      	add	r8, ip
    cb22:	4643      	mov	r3, r8
    cb24:	60bc      	str	r4, [r7, #8]
    cb26:	607b      	str	r3, [r7, #4]
    cb28:	2b07      	cmp	r3, #7
    cb2a:	dd00      	ble.n	cb2e <_vfprintf_r+0x936>
    cb2c:	e0e0      	b.n	ccf0 <_vfprintf_r+0xaf8>
    cb2e:	3608      	adds	r6, #8
    cb30:	ab21      	add	r3, sp, #132	; 0x84
    cb32:	6033      	str	r3, [r6, #0]
    cb34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cb36:	469c      	mov	ip, r3
    cb38:	6073      	str	r3, [r6, #4]
    cb3a:	4643      	mov	r3, r8
    cb3c:	4464      	add	r4, ip
    cb3e:	3301      	adds	r3, #1
    cb40:	60bc      	str	r4, [r7, #8]
    cb42:	607b      	str	r3, [r7, #4]
    cb44:	2b07      	cmp	r3, #7
    cb46:	dc00      	bgt.n	cb4a <_vfprintf_r+0x952>
    cb48:	e758      	b.n	c9fc <_vfprintf_r+0x804>
    cb4a:	003a      	movs	r2, r7
    cb4c:	4659      	mov	r1, fp
    cb4e:	9806      	ldr	r0, [sp, #24]
    cb50:	f003 fe24 	bl	1079c <__sprint_r>
    cb54:	2800      	cmp	r0, #0
    cb56:	d000      	beq.n	cb5a <_vfprintf_r+0x962>
    cb58:	e0de      	b.n	cd18 <_vfprintf_r+0xb20>
    cb5a:	68bc      	ldr	r4, [r7, #8]
    cb5c:	ae32      	add	r6, sp, #200	; 0xc8
    cb5e:	e74e      	b.n	c9fe <_vfprintf_r+0x806>
    cb60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cb62:	2b65      	cmp	r3, #101	; 0x65
    cb64:	ddab      	ble.n	cabe <_vfprintf_r+0x8c6>
    cb66:	2200      	movs	r2, #0
    cb68:	2300      	movs	r3, #0
    cb6a:	9816      	ldr	r0, [sp, #88]	; 0x58
    cb6c:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb6e:	f7fc faf7 	bl	9160 <__aeabi_dcmpeq>
    cb72:	2800      	cmp	r0, #0
    cb74:	d100      	bne.n	cb78 <_vfprintf_r+0x980>
    cb76:	e134      	b.n	cde2 <_vfprintf_r+0xbea>
    cb78:	4b85      	ldr	r3, [pc, #532]	; (cd90 <_vfprintf_r+0xb98>)
    cb7a:	3401      	adds	r4, #1
    cb7c:	6033      	str	r3, [r6, #0]
    cb7e:	2301      	movs	r3, #1
    cb80:	6073      	str	r3, [r6, #4]
    cb82:	687b      	ldr	r3, [r7, #4]
    cb84:	60bc      	str	r4, [r7, #8]
    cb86:	3301      	adds	r3, #1
    cb88:	607b      	str	r3, [r7, #4]
    cb8a:	2b07      	cmp	r3, #7
    cb8c:	dd00      	ble.n	cb90 <_vfprintf_r+0x998>
    cb8e:	e3dc      	b.n	d34a <_vfprintf_r+0x1152>
    cb90:	3608      	adds	r6, #8
    cb92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cb94:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cb96:	4293      	cmp	r3, r2
    cb98:	db03      	blt.n	cba2 <_vfprintf_r+0x9aa>
    cb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb9c:	07db      	lsls	r3, r3, #31
    cb9e:	d400      	bmi.n	cba2 <_vfprintf_r+0x9aa>
    cba0:	e3b7      	b.n	d312 <_vfprintf_r+0x111a>
    cba2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    cba4:	68ba      	ldr	r2, [r7, #8]
    cba6:	6033      	str	r3, [r6, #0]
    cba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cbaa:	469c      	mov	ip, r3
    cbac:	6073      	str	r3, [r6, #4]
    cbae:	687b      	ldr	r3, [r7, #4]
    cbb0:	4462      	add	r2, ip
    cbb2:	3301      	adds	r3, #1
    cbb4:	0014      	movs	r4, r2
    cbb6:	60ba      	str	r2, [r7, #8]
    cbb8:	607b      	str	r3, [r7, #4]
    cbba:	2b07      	cmp	r3, #7
    cbbc:	dd01      	ble.n	cbc2 <_vfprintf_r+0x9ca>
    cbbe:	f000 fc19 	bl	d3f4 <_vfprintf_r+0x11fc>
    cbc2:	3608      	adds	r6, #8
    cbc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbc6:	1e5d      	subs	r5, r3, #1
    cbc8:	2d00      	cmp	r5, #0
    cbca:	dc00      	bgt.n	cbce <_vfprintf_r+0x9d6>
    cbcc:	e717      	b.n	c9fe <_vfprintf_r+0x806>
    cbce:	4a71      	ldr	r2, [pc, #452]	; (cd94 <_vfprintf_r+0xb9c>)
    cbd0:	687b      	ldr	r3, [r7, #4]
    cbd2:	4691      	mov	r9, r2
    cbd4:	2d10      	cmp	r5, #16
    cbd6:	dc00      	bgt.n	cbda <_vfprintf_r+0x9e2>
    cbd8:	e1c3      	b.n	cf62 <_vfprintf_r+0xd6a>
    cbda:	2210      	movs	r2, #16
    cbdc:	4690      	mov	r8, r2
    cbde:	0022      	movs	r2, r4
    cbe0:	464c      	mov	r4, r9
    cbe2:	46d9      	mov	r9, fp
    cbe4:	e004      	b.n	cbf0 <_vfprintf_r+0x9f8>
    cbe6:	3608      	adds	r6, #8
    cbe8:	3d10      	subs	r5, #16
    cbea:	2d10      	cmp	r5, #16
    cbec:	dc00      	bgt.n	cbf0 <_vfprintf_r+0x9f8>
    cbee:	e37c      	b.n	d2ea <_vfprintf_r+0x10f2>
    cbf0:	4641      	mov	r1, r8
    cbf2:	3210      	adds	r2, #16
    cbf4:	3301      	adds	r3, #1
    cbf6:	6034      	str	r4, [r6, #0]
    cbf8:	6071      	str	r1, [r6, #4]
    cbfa:	60ba      	str	r2, [r7, #8]
    cbfc:	607b      	str	r3, [r7, #4]
    cbfe:	2b07      	cmp	r3, #7
    cc00:	ddf1      	ble.n	cbe6 <_vfprintf_r+0x9ee>
    cc02:	003a      	movs	r2, r7
    cc04:	4649      	mov	r1, r9
    cc06:	9806      	ldr	r0, [sp, #24]
    cc08:	f003 fdc8 	bl	1079c <__sprint_r>
    cc0c:	2800      	cmp	r0, #0
    cc0e:	d10b      	bne.n	cc28 <_vfprintf_r+0xa30>
    cc10:	68ba      	ldr	r2, [r7, #8]
    cc12:	687b      	ldr	r3, [r7, #4]
    cc14:	ae32      	add	r6, sp, #200	; 0xc8
    cc16:	e7e7      	b.n	cbe8 <_vfprintf_r+0x9f0>
    cc18:	68bb      	ldr	r3, [r7, #8]
    cc1a:	46d9      	mov	r9, fp
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d001      	beq.n	cc24 <_vfprintf_r+0xa2c>
    cc20:	f000 fd4c 	bl	d6bc <_vfprintf_r+0x14c4>
    cc24:	2300      	movs	r3, #0
    cc26:	607b      	str	r3, [r7, #4]
    cc28:	464b      	mov	r3, r9
    cc2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    cc2c:	07db      	lsls	r3, r3, #31
    cc2e:	d40d      	bmi.n	cc4c <_vfprintf_r+0xa54>
    cc30:	464b      	mov	r3, r9
    cc32:	899b      	ldrh	r3, [r3, #12]
    cc34:	059a      	lsls	r2, r3, #22
    cc36:	d505      	bpl.n	cc44 <_vfprintf_r+0xa4c>
    cc38:	065b      	lsls	r3, r3, #25
    cc3a:	d401      	bmi.n	cc40 <_vfprintf_r+0xa48>
    cc3c:	f7ff fb8d 	bl	c35a <_vfprintf_r+0x162>
    cc40:	f7ff fb88 	bl	c354 <_vfprintf_r+0x15c>
    cc44:	464b      	mov	r3, r9
    cc46:	6d98      	ldr	r0, [r3, #88]	; 0x58
    cc48:	f002 fc32 	bl	f4b0 <__retarget_lock_release_recursive>
    cc4c:	464b      	mov	r3, r9
    cc4e:	899b      	ldrh	r3, [r3, #12]
    cc50:	e7f2      	b.n	cc38 <_vfprintf_r+0xa40>
    cc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc54:	9a08      	ldr	r2, [sp, #32]
    cc56:	1a9d      	subs	r5, r3, r2
    cc58:	2d00      	cmp	r5, #0
    cc5a:	dc00      	bgt.n	cc5e <_vfprintf_r+0xa66>
    cc5c:	e685      	b.n	c96a <_vfprintf_r+0x772>
    cc5e:	4a4d      	ldr	r2, [pc, #308]	; (cd94 <_vfprintf_r+0xb9c>)
    cc60:	687b      	ldr	r3, [r7, #4]
    cc62:	4691      	mov	r9, r2
    cc64:	2d10      	cmp	r5, #16
    cc66:	dd24      	ble.n	ccb2 <_vfprintf_r+0xaba>
    cc68:	2210      	movs	r2, #16
    cc6a:	0021      	movs	r1, r4
    cc6c:	4690      	mov	r8, r2
    cc6e:	465c      	mov	r4, fp
    cc70:	0032      	movs	r2, r6
    cc72:	464e      	mov	r6, r9
    cc74:	e003      	b.n	cc7e <_vfprintf_r+0xa86>
    cc76:	3d10      	subs	r5, #16
    cc78:	3208      	adds	r2, #8
    cc7a:	2d10      	cmp	r5, #16
    cc7c:	dd15      	ble.n	ccaa <_vfprintf_r+0xab2>
    cc7e:	4640      	mov	r0, r8
    cc80:	3110      	adds	r1, #16
    cc82:	3301      	adds	r3, #1
    cc84:	6016      	str	r6, [r2, #0]
    cc86:	6050      	str	r0, [r2, #4]
    cc88:	60b9      	str	r1, [r7, #8]
    cc8a:	607b      	str	r3, [r7, #4]
    cc8c:	2b07      	cmp	r3, #7
    cc8e:	ddf2      	ble.n	cc76 <_vfprintf_r+0xa7e>
    cc90:	003a      	movs	r2, r7
    cc92:	0021      	movs	r1, r4
    cc94:	9806      	ldr	r0, [sp, #24]
    cc96:	f003 fd81 	bl	1079c <__sprint_r>
    cc9a:	2800      	cmp	r0, #0
    cc9c:	d115      	bne.n	ccca <_vfprintf_r+0xad2>
    cc9e:	3d10      	subs	r5, #16
    cca0:	68b9      	ldr	r1, [r7, #8]
    cca2:	687b      	ldr	r3, [r7, #4]
    cca4:	aa32      	add	r2, sp, #200	; 0xc8
    cca6:	2d10      	cmp	r5, #16
    cca8:	dce9      	bgt.n	cc7e <_vfprintf_r+0xa86>
    ccaa:	46a3      	mov	fp, r4
    ccac:	46b1      	mov	r9, r6
    ccae:	000c      	movs	r4, r1
    ccb0:	0016      	movs	r6, r2
    ccb2:	464a      	mov	r2, r9
    ccb4:	1964      	adds	r4, r4, r5
    ccb6:	3301      	adds	r3, #1
    ccb8:	6032      	str	r2, [r6, #0]
    ccba:	6075      	str	r5, [r6, #4]
    ccbc:	60bc      	str	r4, [r7, #8]
    ccbe:	607b      	str	r3, [r7, #4]
    ccc0:	2b07      	cmp	r3, #7
    ccc2:	dd00      	ble.n	ccc6 <_vfprintf_r+0xace>
    ccc4:	e263      	b.n	d18e <_vfprintf_r+0xf96>
    ccc6:	3608      	adds	r6, #8
    ccc8:	e64f      	b.n	c96a <_vfprintf_r+0x772>
    ccca:	46a1      	mov	r9, r4
    cccc:	e7ac      	b.n	cc28 <_vfprintf_r+0xa30>
    ccce:	2301      	movs	r3, #1
    ccd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ccd2:	4213      	tst	r3, r2
    ccd4:	d000      	beq.n	ccd8 <_vfprintf_r+0xae0>
    ccd6:	e6f6      	b.n	cac6 <_vfprintf_r+0x8ce>
    ccd8:	6073      	str	r3, [r6, #4]
    ccda:	687b      	ldr	r3, [r7, #4]
    ccdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ccde:	3301      	adds	r3, #1
    cce0:	3401      	adds	r4, #1
    cce2:	6032      	str	r2, [r6, #0]
    cce4:	60bc      	str	r4, [r7, #8]
    cce6:	4698      	mov	r8, r3
    cce8:	607b      	str	r3, [r7, #4]
    ccea:	2b07      	cmp	r3, #7
    ccec:	dc00      	bgt.n	ccf0 <_vfprintf_r+0xaf8>
    ccee:	e71e      	b.n	cb2e <_vfprintf_r+0x936>
    ccf0:	003a      	movs	r2, r7
    ccf2:	4659      	mov	r1, fp
    ccf4:	9806      	ldr	r0, [sp, #24]
    ccf6:	f003 fd51 	bl	1079c <__sprint_r>
    ccfa:	2800      	cmp	r0, #0
    ccfc:	d10c      	bne.n	cd18 <_vfprintf_r+0xb20>
    ccfe:	687b      	ldr	r3, [r7, #4]
    cd00:	68bc      	ldr	r4, [r7, #8]
    cd02:	4698      	mov	r8, r3
    cd04:	ae32      	add	r6, sp, #200	; 0xc8
    cd06:	e713      	b.n	cb30 <_vfprintf_r+0x938>
    cd08:	003a      	movs	r2, r7
    cd0a:	4659      	mov	r1, fp
    cd0c:	9806      	ldr	r0, [sp, #24]
    cd0e:	f003 fd45 	bl	1079c <__sprint_r>
    cd12:	2800      	cmp	r0, #0
    cd14:	d100      	bne.n	cd18 <_vfprintf_r+0xb20>
    cd16:	e6cd      	b.n	cab4 <_vfprintf_r+0x8bc>
    cd18:	46d9      	mov	r9, fp
    cd1a:	e785      	b.n	cc28 <_vfprintf_r+0xa30>
    cd1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cd1e:	2b01      	cmp	r3, #1
    cd20:	d100      	bne.n	cd24 <_vfprintf_r+0xb2c>
    cd22:	e148      	b.n	cfb6 <_vfprintf_r+0xdbe>
    cd24:	2b02      	cmp	r3, #2
    cd26:	d123      	bne.n	cd70 <_vfprintf_r+0xb78>
    cd28:	9409      	str	r4, [sp, #36]	; 0x24
    cd2a:	2300      	movs	r3, #0
    cd2c:	2400      	movs	r4, #0
    cd2e:	930c      	str	r3, [sp, #48]	; 0x30
    cd30:	940d      	str	r4, [sp, #52]	; 0x34
    cd32:	e4a1      	b.n	c678 <_vfprintf_r+0x480>
    cd34:	003a      	movs	r2, r7
    cd36:	4659      	mov	r1, fp
    cd38:	9806      	ldr	r0, [sp, #24]
    cd3a:	f003 fd2f 	bl	1079c <__sprint_r>
    cd3e:	2800      	cmp	r0, #0
    cd40:	d1ea      	bne.n	cd18 <_vfprintf_r+0xb20>
    cd42:	68bc      	ldr	r4, [r7, #8]
    cd44:	ae32      	add	r6, sp, #200	; 0xc8
    cd46:	e648      	b.n	c9da <_vfprintf_r+0x7e2>
    cd48:	003a      	movs	r2, r7
    cd4a:	4659      	mov	r1, fp
    cd4c:	9806      	ldr	r0, [sp, #24]
    cd4e:	f003 fd25 	bl	1079c <__sprint_r>
    cd52:	2800      	cmp	r0, #0
    cd54:	d1e0      	bne.n	cd18 <_vfprintf_r+0xb20>
    cd56:	68bc      	ldr	r4, [r7, #8]
    cd58:	ae32      	add	r6, sp, #200	; 0xc8
    cd5a:	e5f2      	b.n	c942 <_vfprintf_r+0x74a>
    cd5c:	003a      	movs	r2, r7
    cd5e:	4659      	mov	r1, fp
    cd60:	9806      	ldr	r0, [sp, #24]
    cd62:	f003 fd1b 	bl	1079c <__sprint_r>
    cd66:	2800      	cmp	r0, #0
    cd68:	d1d6      	bne.n	cd18 <_vfprintf_r+0xb20>
    cd6a:	68bc      	ldr	r4, [r7, #8]
    cd6c:	ae32      	add	r6, sp, #200	; 0xc8
    cd6e:	e5f8      	b.n	c962 <_vfprintf_r+0x76a>
    cd70:	9409      	str	r4, [sp, #36]	; 0x24
    cd72:	2300      	movs	r3, #0
    cd74:	2400      	movs	r4, #0
    cd76:	930c      	str	r3, [sp, #48]	; 0x30
    cd78:	940d      	str	r4, [sp, #52]	; 0x34
    cd7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    cd7c:	990d      	ldr	r1, [sp, #52]	; 0x34
    cd7e:	4653      	mov	r3, sl
    cd80:	aa32      	add	r2, sp, #200	; 0xc8
    cd82:	4691      	mov	r9, r2
    cd84:	9308      	str	r3, [sp, #32]
    cd86:	46b2      	mov	sl, r6
    cd88:	e007      	b.n	cd9a <_vfprintf_r+0xba2>
    cd8a:	46c0      	nop			; (mov r8, r8)
    cd8c:	000115e4 	.word	0x000115e4
    cd90:	000115e0 	.word	0x000115e0
    cd94:	000115f4 	.word	0x000115f4
    cd98:	46a1      	mov	r9, r4
    cd9a:	074a      	lsls	r2, r1, #29
    cd9c:	4694      	mov	ip, r2
    cd9e:	464b      	mov	r3, r9
    cda0:	4665      	mov	r5, ip
    cda2:	1e5c      	subs	r4, r3, #1
    cda4:	08c6      	lsrs	r6, r0, #3
    cda6:	2307      	movs	r3, #7
    cda8:	08ca      	lsrs	r2, r1, #3
    cdaa:	4335      	orrs	r5, r6
    cdac:	0011      	movs	r1, r2
    cdae:	002a      	movs	r2, r5
    cdb0:	4003      	ands	r3, r0
    cdb2:	3330      	adds	r3, #48	; 0x30
    cdb4:	7023      	strb	r3, [r4, #0]
    cdb6:	0028      	movs	r0, r5
    cdb8:	430a      	orrs	r2, r1
    cdba:	d1ed      	bne.n	cd98 <_vfprintf_r+0xba0>
    cdbc:	900c      	str	r0, [sp, #48]	; 0x30
    cdbe:	910d      	str	r1, [sp, #52]	; 0x34
    cdc0:	9908      	ldr	r1, [sp, #32]
    cdc2:	4656      	mov	r6, sl
    cdc4:	468a      	mov	sl, r1
    cdc6:	9909      	ldr	r1, [sp, #36]	; 0x24
    cdc8:	464a      	mov	r2, r9
    cdca:	9411      	str	r4, [sp, #68]	; 0x44
    cdcc:	07c9      	lsls	r1, r1, #31
    cdce:	d500      	bpl.n	cdd2 <_vfprintf_r+0xbda>
    cdd0:	e0e0      	b.n	cf94 <_vfprintf_r+0xd9c>
    cdd2:	ab32      	add	r3, sp, #200	; 0xc8
    cdd4:	1b1b      	subs	r3, r3, r4
    cdd6:	930e      	str	r3, [sp, #56]	; 0x38
    cdd8:	f7ff fb7b 	bl	c4d2 <_vfprintf_r+0x2da>
    cddc:	9c07      	ldr	r4, [sp, #28]
    cdde:	f7ff fa7d 	bl	c2dc <_vfprintf_r+0xe4>
    cde2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cde4:	2800      	cmp	r0, #0
    cde6:	dc00      	bgt.n	cdea <_vfprintf_r+0xbf2>
    cde8:	e2b9      	b.n	d35e <_vfprintf_r+0x1166>
    cdea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cdec:	9914      	ldr	r1, [sp, #80]	; 0x50
    cdee:	0013      	movs	r3, r2
    cdf0:	4690      	mov	r8, r2
    cdf2:	428b      	cmp	r3, r1
    cdf4:	dd00      	ble.n	cdf8 <_vfprintf_r+0xc00>
    cdf6:	4688      	mov	r8, r1
    cdf8:	4643      	mov	r3, r8
    cdfa:	2b00      	cmp	r3, #0
    cdfc:	dd0c      	ble.n	ce18 <_vfprintf_r+0xc20>
    cdfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce00:	4444      	add	r4, r8
    ce02:	6033      	str	r3, [r6, #0]
    ce04:	4643      	mov	r3, r8
    ce06:	6073      	str	r3, [r6, #4]
    ce08:	687b      	ldr	r3, [r7, #4]
    ce0a:	60bc      	str	r4, [r7, #8]
    ce0c:	3301      	adds	r3, #1
    ce0e:	607b      	str	r3, [r7, #4]
    ce10:	2b07      	cmp	r3, #7
    ce12:	dd00      	ble.n	ce16 <_vfprintf_r+0xc1e>
    ce14:	e389      	b.n	d52a <_vfprintf_r+0x1332>
    ce16:	3608      	adds	r6, #8
    ce18:	4643      	mov	r3, r8
    ce1a:	43db      	mvns	r3, r3
    ce1c:	4642      	mov	r2, r8
    ce1e:	17db      	asrs	r3, r3, #31
    ce20:	4013      	ands	r3, r2
    ce22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ce24:	1ad3      	subs	r3, r2, r3
    ce26:	4698      	mov	r8, r3
    ce28:	2b00      	cmp	r3, #0
    ce2a:	dc00      	bgt.n	ce2e <_vfprintf_r+0xc36>
    ce2c:	e0eb      	b.n	d006 <_vfprintf_r+0xe0e>
    ce2e:	2b10      	cmp	r3, #16
    ce30:	dc01      	bgt.n	ce36 <_vfprintf_r+0xc3e>
    ce32:	f000 fcd9 	bl	d7e8 <_vfprintf_r+0x15f0>
    ce36:	4adc      	ldr	r2, [pc, #880]	; (d1a8 <_vfprintf_r+0xfb0>)
    ce38:	687b      	ldr	r3, [r7, #4]
    ce3a:	4691      	mov	r9, r2
    ce3c:	2210      	movs	r2, #16
    ce3e:	464d      	mov	r5, r9
    ce40:	4692      	mov	sl, r2
    ce42:	0022      	movs	r2, r4
    ce44:	4644      	mov	r4, r8
    ce46:	46d8      	mov	r8, fp
    ce48:	e004      	b.n	ce54 <_vfprintf_r+0xc5c>
    ce4a:	3608      	adds	r6, #8
    ce4c:	3c10      	subs	r4, #16
    ce4e:	2c10      	cmp	r4, #16
    ce50:	dc00      	bgt.n	ce54 <_vfprintf_r+0xc5c>
    ce52:	e0bf      	b.n	cfd4 <_vfprintf_r+0xddc>
    ce54:	4651      	mov	r1, sl
    ce56:	3210      	adds	r2, #16
    ce58:	3301      	adds	r3, #1
    ce5a:	6035      	str	r5, [r6, #0]
    ce5c:	6071      	str	r1, [r6, #4]
    ce5e:	60ba      	str	r2, [r7, #8]
    ce60:	607b      	str	r3, [r7, #4]
    ce62:	2b07      	cmp	r3, #7
    ce64:	ddf1      	ble.n	ce4a <_vfprintf_r+0xc52>
    ce66:	003a      	movs	r2, r7
    ce68:	4641      	mov	r1, r8
    ce6a:	9806      	ldr	r0, [sp, #24]
    ce6c:	f003 fc96 	bl	1079c <__sprint_r>
    ce70:	2800      	cmp	r0, #0
    ce72:	d000      	beq.n	ce76 <_vfprintf_r+0xc7e>
    ce74:	e3b6      	b.n	d5e4 <_vfprintf_r+0x13ec>
    ce76:	68ba      	ldr	r2, [r7, #8]
    ce78:	687b      	ldr	r3, [r7, #4]
    ce7a:	ae32      	add	r6, sp, #200	; 0xc8
    ce7c:	e7e6      	b.n	ce4c <_vfprintf_r+0xc54>
    ce7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce80:	2b00      	cmp	r3, #0
    ce82:	d100      	bne.n	ce86 <_vfprintf_r+0xc8e>
    ce84:	e092      	b.n	cfac <_vfprintf_r+0xdb4>
    ce86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ce88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ce8a:	ab32      	add	r3, sp, #200	; 0xc8
    ce8c:	46b1      	mov	r9, r6
    ce8e:	001e      	movs	r6, r3
    ce90:	0020      	movs	r0, r4
    ce92:	0029      	movs	r1, r5
    ce94:	220a      	movs	r2, #10
    ce96:	2300      	movs	r3, #0
    ce98:	f7fc f9ca 	bl	9230 <__aeabi_uldivmod>
    ce9c:	3e01      	subs	r6, #1
    ce9e:	3230      	adds	r2, #48	; 0x30
    cea0:	7032      	strb	r2, [r6, #0]
    cea2:	2300      	movs	r3, #0
    cea4:	0020      	movs	r0, r4
    cea6:	0029      	movs	r1, r5
    cea8:	220a      	movs	r2, #10
    ceaa:	f7fc f9c1 	bl	9230 <__aeabi_uldivmod>
    ceae:	0003      	movs	r3, r0
    ceb0:	0004      	movs	r4, r0
    ceb2:	000d      	movs	r5, r1
    ceb4:	430b      	orrs	r3, r1
    ceb6:	d1eb      	bne.n	ce90 <_vfprintf_r+0xc98>
    ceb8:	0032      	movs	r2, r6
    ceba:	ab32      	add	r3, sp, #200	; 0xc8
    cebc:	1a9b      	subs	r3, r3, r2
    cebe:	9611      	str	r6, [sp, #68]	; 0x44
    cec0:	940c      	str	r4, [sp, #48]	; 0x30
    cec2:	950d      	str	r5, [sp, #52]	; 0x34
    cec4:	464e      	mov	r6, r9
    cec6:	930e      	str	r3, [sp, #56]	; 0x38
    cec8:	f7ff fb03 	bl	c4d2 <_vfprintf_r+0x2da>
    cecc:	2300      	movs	r3, #0
    cece:	930e      	str	r3, [sp, #56]	; 0x38
    ced0:	ab32      	add	r3, sp, #200	; 0xc8
    ced2:	9311      	str	r3, [sp, #68]	; 0x44
    ced4:	f7ff fafd 	bl	c4d2 <_vfprintf_r+0x2da>
    ced8:	003a      	movs	r2, r7
    ceda:	4659      	mov	r1, fp
    cedc:	9806      	ldr	r0, [sp, #24]
    cede:	f003 fc5d 	bl	1079c <__sprint_r>
    cee2:	2800      	cmp	r0, #0
    cee4:	d000      	beq.n	cee8 <_vfprintf_r+0xcf0>
    cee6:	e717      	b.n	cd18 <_vfprintf_r+0xb20>
    cee8:	ab16      	add	r3, sp, #88	; 0x58
    ceea:	7fdb      	ldrb	r3, [r3, #31]
    ceec:	68bc      	ldr	r4, [r7, #8]
    ceee:	4698      	mov	r8, r3
    cef0:	ae32      	add	r6, sp, #200	; 0xc8
    cef2:	e513      	b.n	c91c <_vfprintf_r+0x724>
    cef4:	46b1      	mov	r9, r6
    cef6:	e697      	b.n	cc28 <_vfprintf_r+0xa30>
    cef8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cefa:	1e5d      	subs	r5, r3, #1
    cefc:	2d00      	cmp	r5, #0
    cefe:	dc00      	bgt.n	cf02 <_vfprintf_r+0xd0a>
    cf00:	e616      	b.n	cb30 <_vfprintf_r+0x938>
    cf02:	4ba9      	ldr	r3, [pc, #676]	; (d1a8 <_vfprintf_r+0xfb0>)
    cf04:	4699      	mov	r9, r3
    cf06:	2d10      	cmp	r5, #16
    cf08:	dc00      	bgt.n	cf0c <_vfprintf_r+0xd14>
    cf0a:	e10a      	b.n	d122 <_vfprintf_r+0xf2a>
    cf0c:	2310      	movs	r3, #16
    cf0e:	0022      	movs	r2, r4
    cf10:	469a      	mov	sl, r3
    cf12:	465c      	mov	r4, fp
    cf14:	4643      	mov	r3, r8
    cf16:	e004      	b.n	cf22 <_vfprintf_r+0xd2a>
    cf18:	3608      	adds	r6, #8
    cf1a:	3d10      	subs	r5, #16
    cf1c:	2d10      	cmp	r5, #16
    cf1e:	dc00      	bgt.n	cf22 <_vfprintf_r+0xd2a>
    cf20:	e0fc      	b.n	d11c <_vfprintf_r+0xf24>
    cf22:	4649      	mov	r1, r9
    cf24:	6031      	str	r1, [r6, #0]
    cf26:	4651      	mov	r1, sl
    cf28:	3210      	adds	r2, #16
    cf2a:	3301      	adds	r3, #1
    cf2c:	6071      	str	r1, [r6, #4]
    cf2e:	60ba      	str	r2, [r7, #8]
    cf30:	607b      	str	r3, [r7, #4]
    cf32:	2b07      	cmp	r3, #7
    cf34:	ddf0      	ble.n	cf18 <_vfprintf_r+0xd20>
    cf36:	003a      	movs	r2, r7
    cf38:	0021      	movs	r1, r4
    cf3a:	9806      	ldr	r0, [sp, #24]
    cf3c:	f003 fc2e 	bl	1079c <__sprint_r>
    cf40:	2800      	cmp	r0, #0
    cf42:	d000      	beq.n	cf46 <_vfprintf_r+0xd4e>
    cf44:	e6c1      	b.n	ccca <_vfprintf_r+0xad2>
    cf46:	68ba      	ldr	r2, [r7, #8]
    cf48:	687b      	ldr	r3, [r7, #4]
    cf4a:	ae32      	add	r6, sp, #200	; 0xc8
    cf4c:	e7e5      	b.n	cf1a <_vfprintf_r+0xd22>
    cf4e:	990c      	ldr	r1, [sp, #48]	; 0x30
    cf50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf52:	0008      	movs	r0, r1
    cf54:	4310      	orrs	r0, r2
    cf56:	2302      	movs	r3, #2
    cf58:	0002      	movs	r2, r0
    cf5a:	f7ff fa93 	bl	c484 <_vfprintf_r+0x28c>
    cf5e:	46a3      	mov	fp, r4
    cf60:	0014      	movs	r4, r2
    cf62:	464a      	mov	r2, r9
    cf64:	1964      	adds	r4, r4, r5
    cf66:	3301      	adds	r3, #1
    cf68:	6032      	str	r2, [r6, #0]
    cf6a:	6075      	str	r5, [r6, #4]
    cf6c:	60bc      	str	r4, [r7, #8]
    cf6e:	607b      	str	r3, [r7, #4]
    cf70:	2b07      	cmp	r3, #7
    cf72:	dc00      	bgt.n	cf76 <_vfprintf_r+0xd7e>
    cf74:	e542      	b.n	c9fc <_vfprintf_r+0x804>
    cf76:	e5e8      	b.n	cb4a <_vfprintf_r+0x952>
    cf78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf7a:	681a      	ldr	r2, [r3, #0]
    cf7c:	f7ff fa68 	bl	c450 <_vfprintf_r+0x258>
    cf80:	6813      	ldr	r3, [r2, #0]
    cf82:	9308      	str	r3, [sp, #32]
    cf84:	f7ff fb57 	bl	c636 <_vfprintf_r+0x43e>
    cf88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf8a:	681a      	ldr	r2, [r3, #0]
    cf8c:	e412      	b.n	c7b4 <_vfprintf_r+0x5bc>
    cf8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf90:	681a      	ldr	r2, [r3, #0]
    cf92:	e426      	b.n	c7e2 <_vfprintf_r+0x5ea>
    cf94:	2b30      	cmp	r3, #48	; 0x30
    cf96:	d100      	bne.n	cf9a <_vfprintf_r+0xda2>
    cf98:	e23c      	b.n	d414 <_vfprintf_r+0x121c>
    cf9a:	2330      	movs	r3, #48	; 0x30
    cf9c:	3a02      	subs	r2, #2
    cf9e:	7013      	strb	r3, [r2, #0]
    cfa0:	ab32      	add	r3, sp, #200	; 0xc8
    cfa2:	1a9b      	subs	r3, r3, r2
    cfa4:	930e      	str	r3, [sp, #56]	; 0x38
    cfa6:	9211      	str	r2, [sp, #68]	; 0x44
    cfa8:	f7ff fa93 	bl	c4d2 <_vfprintf_r+0x2da>
    cfac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cfae:	2b09      	cmp	r3, #9
    cfb0:	d900      	bls.n	cfb4 <_vfprintf_r+0xdbc>
    cfb2:	e768      	b.n	ce86 <_vfprintf_r+0xc8e>
    cfb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cfb6:	2227      	movs	r2, #39	; 0x27
    cfb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cfba:	a928      	add	r1, sp, #160	; 0xa0
    cfbc:	3330      	adds	r3, #48	; 0x30
    cfbe:	548b      	strb	r3, [r1, r2]
    cfc0:	2301      	movs	r3, #1
    cfc2:	aa16      	add	r2, sp, #88	; 0x58
    cfc4:	4694      	mov	ip, r2
    cfc6:	930e      	str	r3, [sp, #56]	; 0x38
    cfc8:	336e      	adds	r3, #110	; 0x6e
    cfca:	4463      	add	r3, ip
    cfcc:	9409      	str	r4, [sp, #36]	; 0x24
    cfce:	9311      	str	r3, [sp, #68]	; 0x44
    cfd0:	f7ff fa7f 	bl	c4d2 <_vfprintf_r+0x2da>
    cfd4:	46c3      	mov	fp, r8
    cfd6:	46a9      	mov	r9, r5
    cfd8:	46a0      	mov	r8, r4
    cfda:	0014      	movs	r4, r2
    cfdc:	464a      	mov	r2, r9
    cfde:	6032      	str	r2, [r6, #0]
    cfe0:	4642      	mov	r2, r8
    cfe2:	4444      	add	r4, r8
    cfe4:	3301      	adds	r3, #1
    cfe6:	6072      	str	r2, [r6, #4]
    cfe8:	60bc      	str	r4, [r7, #8]
    cfea:	607b      	str	r3, [r7, #4]
    cfec:	2b07      	cmp	r3, #7
    cfee:	dc00      	bgt.n	cff2 <_vfprintf_r+0xdfa>
    cff0:	e18d      	b.n	d30e <_vfprintf_r+0x1116>
    cff2:	003a      	movs	r2, r7
    cff4:	4659      	mov	r1, fp
    cff6:	9806      	ldr	r0, [sp, #24]
    cff8:	f003 fbd0 	bl	1079c <__sprint_r>
    cffc:	2800      	cmp	r0, #0
    cffe:	d000      	beq.n	d002 <_vfprintf_r+0xe0a>
    d000:	e68a      	b.n	cd18 <_vfprintf_r+0xb20>
    d002:	68bc      	ldr	r4, [r7, #8]
    d004:	ae32      	add	r6, sp, #200	; 0xc8
    d006:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d008:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d00a:	4293      	cmp	r3, r2
    d00c:	db00      	blt.n	d010 <_vfprintf_r+0xe18>
    d00e:	e179      	b.n	d304 <_vfprintf_r+0x110c>
    d010:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d012:	6032      	str	r2, [r6, #0]
    d014:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d016:	4694      	mov	ip, r2
    d018:	6072      	str	r2, [r6, #4]
    d01a:	687a      	ldr	r2, [r7, #4]
    d01c:	4464      	add	r4, ip
    d01e:	3201      	adds	r2, #1
    d020:	60bc      	str	r4, [r7, #8]
    d022:	607a      	str	r2, [r7, #4]
    d024:	2a07      	cmp	r2, #7
    d026:	dd00      	ble.n	d02a <_vfprintf_r+0xe32>
    d028:	e176      	b.n	d318 <_vfprintf_r+0x1120>
    d02a:	3608      	adds	r6, #8
    d02c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d02e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d030:	1ad3      	subs	r3, r2, r3
    d032:	1a52      	subs	r2, r2, r1
    d034:	4690      	mov	r8, r2
    d036:	429a      	cmp	r2, r3
    d038:	dd00      	ble.n	d03c <_vfprintf_r+0xe44>
    d03a:	4698      	mov	r8, r3
    d03c:	4642      	mov	r2, r8
    d03e:	2a00      	cmp	r2, #0
    d040:	dd0f      	ble.n	d062 <_vfprintf_r+0xe6a>
    d042:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d044:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d046:	468c      	mov	ip, r1
    d048:	4462      	add	r2, ip
    d04a:	6032      	str	r2, [r6, #0]
    d04c:	4642      	mov	r2, r8
    d04e:	6072      	str	r2, [r6, #4]
    d050:	687a      	ldr	r2, [r7, #4]
    d052:	4444      	add	r4, r8
    d054:	3201      	adds	r2, #1
    d056:	60bc      	str	r4, [r7, #8]
    d058:	607a      	str	r2, [r7, #4]
    d05a:	2a07      	cmp	r2, #7
    d05c:	dd00      	ble.n	d060 <_vfprintf_r+0xe68>
    d05e:	e289      	b.n	d574 <_vfprintf_r+0x137c>
    d060:	3608      	adds	r6, #8
    d062:	4642      	mov	r2, r8
    d064:	43d5      	mvns	r5, r2
    d066:	17ed      	asrs	r5, r5, #31
    d068:	4015      	ands	r5, r2
    d06a:	1b5d      	subs	r5, r3, r5
    d06c:	2d00      	cmp	r5, #0
    d06e:	dc00      	bgt.n	d072 <_vfprintf_r+0xe7a>
    d070:	e4c5      	b.n	c9fe <_vfprintf_r+0x806>
    d072:	4a4d      	ldr	r2, [pc, #308]	; (d1a8 <_vfprintf_r+0xfb0>)
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	4691      	mov	r9, r2
    d078:	2d10      	cmp	r5, #16
    d07a:	dc00      	bgt.n	d07e <_vfprintf_r+0xe86>
    d07c:	e771      	b.n	cf62 <_vfprintf_r+0xd6a>
    d07e:	2210      	movs	r2, #16
    d080:	4690      	mov	r8, r2
    d082:	0022      	movs	r2, r4
    d084:	465c      	mov	r4, fp
    d086:	e004      	b.n	d092 <_vfprintf_r+0xe9a>
    d088:	3608      	adds	r6, #8
    d08a:	3d10      	subs	r5, #16
    d08c:	2d10      	cmp	r5, #16
    d08e:	dc00      	bgt.n	d092 <_vfprintf_r+0xe9a>
    d090:	e765      	b.n	cf5e <_vfprintf_r+0xd66>
    d092:	4649      	mov	r1, r9
    d094:	6031      	str	r1, [r6, #0]
    d096:	4641      	mov	r1, r8
    d098:	3210      	adds	r2, #16
    d09a:	3301      	adds	r3, #1
    d09c:	6071      	str	r1, [r6, #4]
    d09e:	60ba      	str	r2, [r7, #8]
    d0a0:	607b      	str	r3, [r7, #4]
    d0a2:	2b07      	cmp	r3, #7
    d0a4:	ddf0      	ble.n	d088 <_vfprintf_r+0xe90>
    d0a6:	003a      	movs	r2, r7
    d0a8:	0021      	movs	r1, r4
    d0aa:	9806      	ldr	r0, [sp, #24]
    d0ac:	f003 fb76 	bl	1079c <__sprint_r>
    d0b0:	2800      	cmp	r0, #0
    d0b2:	d000      	beq.n	d0b6 <_vfprintf_r+0xebe>
    d0b4:	e609      	b.n	ccca <_vfprintf_r+0xad2>
    d0b6:	68ba      	ldr	r2, [r7, #8]
    d0b8:	687b      	ldr	r3, [r7, #4]
    d0ba:	ae32      	add	r6, sp, #200	; 0xc8
    d0bc:	e7e5      	b.n	d08a <_vfprintf_r+0xe92>
    d0be:	003a      	movs	r2, r7
    d0c0:	4659      	mov	r1, fp
    d0c2:	9806      	ldr	r0, [sp, #24]
    d0c4:	f003 fb6a 	bl	1079c <__sprint_r>
    d0c8:	2800      	cmp	r0, #0
    d0ca:	d000      	beq.n	d0ce <_vfprintf_r+0xed6>
    d0cc:	e624      	b.n	cd18 <_vfprintf_r+0xb20>
    d0ce:	68bc      	ldr	r4, [r7, #8]
    d0d0:	687b      	ldr	r3, [r7, #4]
    d0d2:	ae32      	add	r6, sp, #200	; 0xc8
    d0d4:	e504      	b.n	cae0 <_vfprintf_r+0x8e8>
    d0d6:	2307      	movs	r3, #7
    d0d8:	3207      	adds	r2, #7
    d0da:	439a      	bics	r2, r3
    d0dc:	3301      	adds	r3, #1
    d0de:	469c      	mov	ip, r3
    d0e0:	4494      	add	ip, r2
    d0e2:	4663      	mov	r3, ip
    d0e4:	930f      	str	r3, [sp, #60]	; 0x3c
    d0e6:	6853      	ldr	r3, [r2, #4]
    d0e8:	6812      	ldr	r2, [r2, #0]
    d0ea:	930d      	str	r3, [sp, #52]	; 0x34
    d0ec:	920c      	str	r2, [sp, #48]	; 0x30
    d0ee:	f7ff faa7 	bl	c640 <_vfprintf_r+0x448>
    d0f2:	2207      	movs	r2, #7
    d0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0f6:	3307      	adds	r3, #7
    d0f8:	4393      	bics	r3, r2
    d0fa:	3201      	adds	r2, #1
    d0fc:	4694      	mov	ip, r2
    d0fe:	449c      	add	ip, r3
    d100:	4662      	mov	r2, ip
    d102:	920f      	str	r2, [sp, #60]	; 0x3c
    d104:	681a      	ldr	r2, [r3, #0]
    d106:	685b      	ldr	r3, [r3, #4]
    d108:	0011      	movs	r1, r2
    d10a:	001a      	movs	r2, r3
    d10c:	0008      	movs	r0, r1
    d10e:	4310      	orrs	r0, r2
    d110:	910c      	str	r1, [sp, #48]	; 0x30
    d112:	920d      	str	r2, [sp, #52]	; 0x34
    d114:	2300      	movs	r3, #0
    d116:	0002      	movs	r2, r0
    d118:	f7ff f9b4 	bl	c484 <_vfprintf_r+0x28c>
    d11c:	46a3      	mov	fp, r4
    d11e:	4698      	mov	r8, r3
    d120:	0014      	movs	r4, r2
    d122:	464b      	mov	r3, r9
    d124:	6075      	str	r5, [r6, #4]
    d126:	6033      	str	r3, [r6, #0]
    d128:	1964      	adds	r4, r4, r5
    d12a:	e4f7      	b.n	cb1c <_vfprintf_r+0x924>
    d12c:	003a      	movs	r2, r7
    d12e:	4659      	mov	r1, fp
    d130:	9806      	ldr	r0, [sp, #24]
    d132:	f003 fb33 	bl	1079c <__sprint_r>
    d136:	2800      	cmp	r0, #0
    d138:	d000      	beq.n	d13c <_vfprintf_r+0xf44>
    d13a:	e5ed      	b.n	cd18 <_vfprintf_r+0xb20>
    d13c:	687b      	ldr	r3, [r7, #4]
    d13e:	68bc      	ldr	r4, [r7, #8]
    d140:	4698      	mov	r8, r3
    d142:	ae32      	add	r6, sp, #200	; 0xc8
    d144:	e4da      	b.n	cafc <_vfprintf_r+0x904>
    d146:	2207      	movs	r2, #7
    d148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d14a:	3307      	adds	r3, #7
    d14c:	4393      	bics	r3, r2
    d14e:	3201      	adds	r2, #1
    d150:	4694      	mov	ip, r2
    d152:	449c      	add	ip, r3
    d154:	4662      	mov	r2, ip
    d156:	920f      	str	r2, [sp, #60]	; 0x3c
    d158:	681a      	ldr	r2, [r3, #0]
    d15a:	685b      	ldr	r3, [r3, #4]
    d15c:	0011      	movs	r1, r2
    d15e:	001a      	movs	r2, r3
    d160:	0008      	movs	r0, r1
    d162:	4310      	orrs	r0, r2
    d164:	910c      	str	r1, [sp, #48]	; 0x30
    d166:	920d      	str	r2, [sp, #52]	; 0x34
    d168:	2301      	movs	r3, #1
    d16a:	0002      	movs	r2, r0
    d16c:	f7ff f98a 	bl	c484 <_vfprintf_r+0x28c>
    d170:	2207      	movs	r2, #7
    d172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d174:	3307      	adds	r3, #7
    d176:	4393      	bics	r3, r2
    d178:	3201      	adds	r2, #1
    d17a:	4694      	mov	ip, r2
    d17c:	449c      	add	ip, r3
    d17e:	4662      	mov	r2, ip
    d180:	920f      	str	r2, [sp, #60]	; 0x3c
    d182:	681a      	ldr	r2, [r3, #0]
    d184:	685b      	ldr	r3, [r3, #4]
    d186:	920c      	str	r2, [sp, #48]	; 0x30
    d188:	930d      	str	r3, [sp, #52]	; 0x34
    d18a:	f7ff f966 	bl	c45a <_vfprintf_r+0x262>
    d18e:	003a      	movs	r2, r7
    d190:	4659      	mov	r1, fp
    d192:	9806      	ldr	r0, [sp, #24]
    d194:	f003 fb02 	bl	1079c <__sprint_r>
    d198:	2800      	cmp	r0, #0
    d19a:	d000      	beq.n	d19e <_vfprintf_r+0xfa6>
    d19c:	e5bc      	b.n	cd18 <_vfprintf_r+0xb20>
    d19e:	68bc      	ldr	r4, [r7, #8]
    d1a0:	ae32      	add	r6, sp, #200	; 0xc8
    d1a2:	f7ff fbe2 	bl	c96a <_vfprintf_r+0x772>
    d1a6:	46c0      	nop			; (mov r8, r8)
    d1a8:	000115f4 	.word	0x000115f4
    d1ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    d1ae:	990d      	ldr	r1, [sp, #52]	; 0x34
    d1b0:	2300      	movs	r3, #0
    d1b2:	4242      	negs	r2, r0
    d1b4:	418b      	sbcs	r3, r1
    d1b6:	0011      	movs	r1, r2
    d1b8:	001a      	movs	r2, r3
    d1ba:	232d      	movs	r3, #45	; 0x2d
    d1bc:	a816      	add	r0, sp, #88	; 0x58
    d1be:	77c3      	strb	r3, [r0, #31]
    d1c0:	0008      	movs	r0, r1
    d1c2:	4310      	orrs	r0, r2
    d1c4:	910c      	str	r1, [sp, #48]	; 0x30
    d1c6:	920d      	str	r2, [sp, #52]	; 0x34
    d1c8:	4698      	mov	r8, r3
    d1ca:	0002      	movs	r2, r0
    d1cc:	3b2c      	subs	r3, #44	; 0x2c
    d1ce:	f7ff f95d 	bl	c48c <_vfprintf_r+0x294>
    d1d2:	9916      	ldr	r1, [sp, #88]	; 0x58
    d1d4:	9d15      	ldr	r5, [sp, #84]	; 0x54
    d1d6:	000a      	movs	r2, r1
    d1d8:	0008      	movs	r0, r1
    d1da:	002b      	movs	r3, r5
    d1dc:	0029      	movs	r1, r5
    d1de:	f7fe fd15 	bl	bc0c <__aeabi_dcmpun>
    d1e2:	2800      	cmp	r0, #0
    d1e4:	d000      	beq.n	d1e8 <_vfprintf_r+0xff0>
    d1e6:	e2c6      	b.n	d776 <_vfprintf_r+0x157e>
    d1e8:	4653      	mov	r3, sl
    d1ea:	3301      	adds	r3, #1
    d1ec:	d100      	bne.n	d1f0 <_vfprintf_r+0xff8>
    d1ee:	e09f      	b.n	d330 <_vfprintf_r+0x1138>
    d1f0:	2320      	movs	r3, #32
    d1f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d1f4:	439a      	bics	r2, r3
    d1f6:	920e      	str	r2, [sp, #56]	; 0x38
    d1f8:	2a47      	cmp	r2, #71	; 0x47
    d1fa:	d100      	bne.n	d1fe <_vfprintf_r+0x1006>
    d1fc:	e1a1      	b.n	d542 <_vfprintf_r+0x134a>
    d1fe:	2380      	movs	r3, #128	; 0x80
    d200:	005b      	lsls	r3, r3, #1
    d202:	4323      	orrs	r3, r4
    d204:	9309      	str	r3, [sp, #36]	; 0x24
    d206:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d208:	2b00      	cmp	r3, #0
    d20a:	da00      	bge.n	d20e <_vfprintf_r+0x1016>
    d20c:	e1ed      	b.n	d5ea <_vfprintf_r+0x13f2>
    d20e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d210:	9308      	str	r3, [sp, #32]
    d212:	2300      	movs	r3, #0
    d214:	4691      	mov	r9, r2
    d216:	9310      	str	r3, [sp, #64]	; 0x40
    d218:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d21a:	2b66      	cmp	r3, #102	; 0x66
    d21c:	d100      	bne.n	d220 <_vfprintf_r+0x1028>
    d21e:	e1b8      	b.n	d592 <_vfprintf_r+0x139a>
    d220:	2b46      	cmp	r3, #70	; 0x46
    d222:	d100      	bne.n	d226 <_vfprintf_r+0x102e>
    d224:	e237      	b.n	d696 <_vfprintf_r+0x149e>
    d226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d228:	9806      	ldr	r0, [sp, #24]
    d22a:	3a45      	subs	r2, #69	; 0x45
    d22c:	0013      	movs	r3, r2
    d22e:	4259      	negs	r1, r3
    d230:	4159      	adcs	r1, r3
    d232:	ab20      	add	r3, sp, #128	; 0x80
    d234:	000d      	movs	r5, r1
    d236:	9303      	str	r3, [sp, #12]
    d238:	ab1f      	add	r3, sp, #124	; 0x7c
    d23a:	9302      	str	r3, [sp, #8]
    d23c:	2302      	movs	r3, #2
    d23e:	aa23      	add	r2, sp, #140	; 0x8c
    d240:	4455      	add	r5, sl
    d242:	921b      	str	r2, [sp, #108]	; 0x6c
    d244:	9204      	str	r2, [sp, #16]
    d246:	9300      	str	r3, [sp, #0]
    d248:	9501      	str	r5, [sp, #4]
    d24a:	9b08      	ldr	r3, [sp, #32]
    d24c:	464a      	mov	r2, r9
    d24e:	f000 fd25 	bl	dc9c <_dtoa_r>
    d252:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d254:	9011      	str	r0, [sp, #68]	; 0x44
    d256:	2b67      	cmp	r3, #103	; 0x67
    d258:	d000      	beq.n	d25c <_vfprintf_r+0x1064>
    d25a:	e20b      	b.n	d674 <_vfprintf_r+0x147c>
    d25c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d25e:	4698      	mov	r8, r3
    d260:	44a8      	add	r8, r5
    d262:	07e3      	lsls	r3, r4, #31
    d264:	d400      	bmi.n	d268 <_vfprintf_r+0x1070>
    d266:	e277      	b.n	d758 <_vfprintf_r+0x1560>
    d268:	2300      	movs	r3, #0
    d26a:	2200      	movs	r2, #0
    d26c:	4648      	mov	r0, r9
    d26e:	9908      	ldr	r1, [sp, #32]
    d270:	f7fb ff76 	bl	9160 <__aeabi_dcmpeq>
    d274:	4643      	mov	r3, r8
    d276:	2800      	cmp	r0, #0
    d278:	d10a      	bne.n	d290 <_vfprintf_r+0x1098>
    d27a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d27c:	4543      	cmp	r3, r8
    d27e:	d207      	bcs.n	d290 <_vfprintf_r+0x1098>
    d280:	2130      	movs	r1, #48	; 0x30
    d282:	4640      	mov	r0, r8
    d284:	1c5a      	adds	r2, r3, #1
    d286:	9223      	str	r2, [sp, #140]	; 0x8c
    d288:	7019      	strb	r1, [r3, #0]
    d28a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d28c:	4298      	cmp	r0, r3
    d28e:	d8f9      	bhi.n	d284 <_vfprintf_r+0x108c>
    d290:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d292:	1a9b      	subs	r3, r3, r2
    d294:	9314      	str	r3, [sp, #80]	; 0x50
    d296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d298:	2b47      	cmp	r3, #71	; 0x47
    d29a:	d100      	bne.n	d29e <_vfprintf_r+0x10a6>
    d29c:	e0d0      	b.n	d440 <_vfprintf_r+0x1248>
    d29e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d2a0:	2b65      	cmp	r3, #101	; 0x65
    d2a2:	dc00      	bgt.n	d2a6 <_vfprintf_r+0x10ae>
    d2a4:	e2d5      	b.n	d852 <_vfprintf_r+0x165a>
    d2a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d2a8:	2b66      	cmp	r3, #102	; 0x66
    d2aa:	d100      	bne.n	d2ae <_vfprintf_r+0x10b6>
    d2ac:	e1c6      	b.n	d63c <_vfprintf_r+0x1444>
    d2ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d2b0:	9313      	str	r3, [sp, #76]	; 0x4c
    d2b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d2b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d2b6:	0019      	movs	r1, r3
    d2b8:	4291      	cmp	r1, r2
    d2ba:	dd00      	ble.n	d2be <_vfprintf_r+0x10c6>
    d2bc:	e1a0      	b.n	d600 <_vfprintf_r+0x1408>
    d2be:	07e3      	lsls	r3, r4, #31
    d2c0:	d500      	bpl.n	d2c4 <_vfprintf_r+0x10cc>
    d2c2:	e242      	b.n	d74a <_vfprintf_r+0x1552>
    d2c4:	43d3      	mvns	r3, r2
    d2c6:	17db      	asrs	r3, r3, #31
    d2c8:	0011      	movs	r1, r2
    d2ca:	401a      	ands	r2, r3
    d2cc:	2367      	movs	r3, #103	; 0x67
    d2ce:	9208      	str	r2, [sp, #32]
    d2d0:	910e      	str	r1, [sp, #56]	; 0x38
    d2d2:	9312      	str	r3, [sp, #72]	; 0x48
    d2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d000      	beq.n	d2dc <_vfprintf_r+0x10e4>
    d2da:	e0a9      	b.n	d430 <_vfprintf_r+0x1238>
    d2dc:	ab16      	add	r3, sp, #88	; 0x58
    d2de:	7fdb      	ldrb	r3, [r3, #31]
    d2e0:	4698      	mov	r8, r3
    d2e2:	2300      	movs	r3, #0
    d2e4:	469a      	mov	sl, r3
    d2e6:	f7ff f8fc 	bl	c4e2 <_vfprintf_r+0x2ea>
    d2ea:	46cb      	mov	fp, r9
    d2ec:	46a1      	mov	r9, r4
    d2ee:	0014      	movs	r4, r2
    d2f0:	e637      	b.n	cf62 <_vfprintf_r+0xd6a>
    d2f2:	464b      	mov	r3, r9
    d2f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
    d2f6:	f002 f8db 	bl	f4b0 <__retarget_lock_release_recursive>
    d2fa:	2301      	movs	r3, #1
    d2fc:	425b      	negs	r3, r3
    d2fe:	930a      	str	r3, [sp, #40]	; 0x28
    d300:	f7ff f82b 	bl	c35a <_vfprintf_r+0x162>
    d304:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d306:	07d2      	lsls	r2, r2, #31
    d308:	d400      	bmi.n	d30c <_vfprintf_r+0x1114>
    d30a:	e68f      	b.n	d02c <_vfprintf_r+0xe34>
    d30c:	e680      	b.n	d010 <_vfprintf_r+0xe18>
    d30e:	3608      	adds	r6, #8
    d310:	e679      	b.n	d006 <_vfprintf_r+0xe0e>
    d312:	68bc      	ldr	r4, [r7, #8]
    d314:	f7ff fb73 	bl	c9fe <_vfprintf_r+0x806>
    d318:	003a      	movs	r2, r7
    d31a:	4659      	mov	r1, fp
    d31c:	9806      	ldr	r0, [sp, #24]
    d31e:	f003 fa3d 	bl	1079c <__sprint_r>
    d322:	2800      	cmp	r0, #0
    d324:	d000      	beq.n	d328 <_vfprintf_r+0x1130>
    d326:	e4f7      	b.n	cd18 <_vfprintf_r+0xb20>
    d328:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d32a:	68bc      	ldr	r4, [r7, #8]
    d32c:	ae32      	add	r6, sp, #200	; 0xc8
    d32e:	e67d      	b.n	d02c <_vfprintf_r+0xe34>
    d330:	2320      	movs	r3, #32
    d332:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d334:	439a      	bics	r2, r3
    d336:	3b1a      	subs	r3, #26
    d338:	920e      	str	r2, [sp, #56]	; 0x38
    d33a:	469a      	mov	sl, r3
    d33c:	e75f      	b.n	d1fe <_vfprintf_r+0x1006>
    d33e:	232d      	movs	r3, #45	; 0x2d
    d340:	aa16      	add	r2, sp, #88	; 0x58
    d342:	77d3      	strb	r3, [r2, #31]
    d344:	4698      	mov	r8, r3
    d346:	f7ff faa8 	bl	c89a <_vfprintf_r+0x6a2>
    d34a:	003a      	movs	r2, r7
    d34c:	4659      	mov	r1, fp
    d34e:	9806      	ldr	r0, [sp, #24]
    d350:	f003 fa24 	bl	1079c <__sprint_r>
    d354:	2800      	cmp	r0, #0
    d356:	d000      	beq.n	d35a <_vfprintf_r+0x1162>
    d358:	e4de      	b.n	cd18 <_vfprintf_r+0xb20>
    d35a:	ae32      	add	r6, sp, #200	; 0xc8
    d35c:	e419      	b.n	cb92 <_vfprintf_r+0x99a>
    d35e:	4be3      	ldr	r3, [pc, #908]	; (d6ec <_vfprintf_r+0x14f4>)
    d360:	3401      	adds	r4, #1
    d362:	6033      	str	r3, [r6, #0]
    d364:	2301      	movs	r3, #1
    d366:	6073      	str	r3, [r6, #4]
    d368:	687b      	ldr	r3, [r7, #4]
    d36a:	60bc      	str	r4, [r7, #8]
    d36c:	3301      	adds	r3, #1
    d36e:	607b      	str	r3, [r7, #4]
    d370:	2b07      	cmp	r3, #7
    d372:	dd00      	ble.n	d376 <_vfprintf_r+0x117e>
    d374:	e155      	b.n	d622 <_vfprintf_r+0x142a>
    d376:	3608      	adds	r6, #8
    d378:	2800      	cmp	r0, #0
    d37a:	d107      	bne.n	d38c <_vfprintf_r+0x1194>
    d37c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d37e:	2b00      	cmp	r3, #0
    d380:	d104      	bne.n	d38c <_vfprintf_r+0x1194>
    d382:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d384:	07db      	lsls	r3, r3, #31
    d386:	d401      	bmi.n	d38c <_vfprintf_r+0x1194>
    d388:	f7ff fb39 	bl	c9fe <_vfprintf_r+0x806>
    d38c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d38e:	6033      	str	r3, [r6, #0]
    d390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d392:	1919      	adds	r1, r3, r4
    d394:	6073      	str	r3, [r6, #4]
    d396:	687b      	ldr	r3, [r7, #4]
    d398:	60b9      	str	r1, [r7, #8]
    d39a:	3301      	adds	r3, #1
    d39c:	607b      	str	r3, [r7, #4]
    d39e:	2b07      	cmp	r3, #7
    d3a0:	dd00      	ble.n	d3a4 <_vfprintf_r+0x11ac>
    d3a2:	e1c4      	b.n	d72e <_vfprintf_r+0x1536>
    d3a4:	0032      	movs	r2, r6
    d3a6:	3208      	adds	r2, #8
    d3a8:	2800      	cmp	r0, #0
    d3aa:	da00      	bge.n	d3ae <_vfprintf_r+0x11b6>
    d3ac:	e195      	b.n	d6da <_vfprintf_r+0x14e2>
    d3ae:	9811      	ldr	r0, [sp, #68]	; 0x44
    d3b0:	3301      	adds	r3, #1
    d3b2:	6010      	str	r0, [r2, #0]
    d3b4:	9814      	ldr	r0, [sp, #80]	; 0x50
    d3b6:	607b      	str	r3, [r7, #4]
    d3b8:	1844      	adds	r4, r0, r1
    d3ba:	6050      	str	r0, [r2, #4]
    d3bc:	60bc      	str	r4, [r7, #8]
    d3be:	2b07      	cmp	r3, #7
    d3c0:	dd01      	ble.n	d3c6 <_vfprintf_r+0x11ce>
    d3c2:	f7ff fbc2 	bl	cb4a <_vfprintf_r+0x952>
    d3c6:	3208      	adds	r2, #8
    d3c8:	0016      	movs	r6, r2
    d3ca:	f7ff fb18 	bl	c9fe <_vfprintf_r+0x806>
    d3ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d3d2:	680b      	ldr	r3, [r1, #0]
    d3d4:	601a      	str	r2, [r3, #0]
    d3d6:	17d2      	asrs	r2, r2, #31
    d3d8:	605a      	str	r2, [r3, #4]
    d3da:	000b      	movs	r3, r1
    d3dc:	3304      	adds	r3, #4
    d3de:	930f      	str	r3, [sp, #60]	; 0x3c
    d3e0:	f7fe ff58 	bl	c294 <_vfprintf_r+0x9c>
    d3e4:	464b      	mov	r3, r9
    d3e6:	9a07      	ldr	r2, [sp, #28]
    d3e8:	431c      	orrs	r4, r3
    d3ea:	3201      	adds	r2, #1
    d3ec:	7813      	ldrb	r3, [r2, #0]
    d3ee:	9207      	str	r2, [sp, #28]
    d3f0:	f7fe ff8b 	bl	c30a <_vfprintf_r+0x112>
    d3f4:	003a      	movs	r2, r7
    d3f6:	4659      	mov	r1, fp
    d3f8:	9806      	ldr	r0, [sp, #24]
    d3fa:	f003 f9cf 	bl	1079c <__sprint_r>
    d3fe:	2800      	cmp	r0, #0
    d400:	d000      	beq.n	d404 <_vfprintf_r+0x120c>
    d402:	e489      	b.n	cd18 <_vfprintf_r+0xb20>
    d404:	68bc      	ldr	r4, [r7, #8]
    d406:	ae32      	add	r6, sp, #200	; 0xc8
    d408:	f7ff fbdc 	bl	cbc4 <_vfprintf_r+0x9cc>
    d40c:	4bb8      	ldr	r3, [pc, #736]	; (d6f0 <_vfprintf_r+0x14f8>)
    d40e:	9311      	str	r3, [sp, #68]	; 0x44
    d410:	f7ff fa4a 	bl	c8a8 <_vfprintf_r+0x6b0>
    d414:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d416:	ab32      	add	r3, sp, #200	; 0xc8
    d418:	1a9b      	subs	r3, r3, r2
    d41a:	930e      	str	r3, [sp, #56]	; 0x38
    d41c:	f7ff f859 	bl	c4d2 <_vfprintf_r+0x2da>
    d420:	9811      	ldr	r0, [sp, #68]	; 0x44
    d422:	f7fe feb7 	bl	c194 <strlen>
    d426:	0002      	movs	r2, r0
    d428:	900e      	str	r0, [sp, #56]	; 0x38
    d42a:	0003      	movs	r3, r0
    d42c:	f7ff f9a1 	bl	c772 <_vfprintf_r+0x57a>
    d430:	232d      	movs	r3, #45	; 0x2d
    d432:	aa16      	add	r2, sp, #88	; 0x58
    d434:	77d3      	strb	r3, [r2, #31]
    d436:	4698      	mov	r8, r3
    d438:	2300      	movs	r3, #0
    d43a:	469a      	mov	sl, r3
    d43c:	f7ff f854 	bl	c4e8 <_vfprintf_r+0x2f0>
    d440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d442:	9313      	str	r3, [sp, #76]	; 0x4c
    d444:	1cda      	adds	r2, r3, #3
    d446:	db02      	blt.n	d44e <_vfprintf_r+0x1256>
    d448:	459a      	cmp	sl, r3
    d44a:	db00      	blt.n	d44e <_vfprintf_r+0x1256>
    d44c:	e731      	b.n	d2b2 <_vfprintf_r+0x10ba>
    d44e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d450:	3b02      	subs	r3, #2
    d452:	9312      	str	r3, [sp, #72]	; 0x48
    d454:	222c      	movs	r2, #44	; 0x2c
    d456:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d458:	2148      	movs	r1, #72	; 0x48
    d45a:	1e5d      	subs	r5, r3, #1
    d45c:	ab16      	add	r3, sp, #88	; 0x58
    d45e:	189b      	adds	r3, r3, r2
    d460:	466a      	mov	r2, sp
    d462:	1852      	adds	r2, r2, r1
    d464:	7812      	ldrb	r2, [r2, #0]
    d466:	951f      	str	r5, [sp, #124]	; 0x7c
    d468:	701a      	strb	r2, [r3, #0]
    d46a:	2d00      	cmp	r5, #0
    d46c:	da00      	bge.n	d470 <_vfprintf_r+0x1278>
    d46e:	e1cb      	b.n	d808 <_vfprintf_r+0x1610>
    d470:	212d      	movs	r1, #45	; 0x2d
    d472:	232b      	movs	r3, #43	; 0x2b
    d474:	aa16      	add	r2, sp, #88	; 0x58
    d476:	1852      	adds	r2, r2, r1
    d478:	7013      	strb	r3, [r2, #0]
    d47a:	2d09      	cmp	r5, #9
    d47c:	dc00      	bgt.n	d480 <_vfprintf_r+0x1288>
    d47e:	e16d      	b.n	d75c <_vfprintf_r+0x1564>
    d480:	aa16      	add	r2, sp, #88	; 0x58
    d482:	233b      	movs	r3, #59	; 0x3b
    d484:	4694      	mov	ip, r2
    d486:	4463      	add	r3, ip
    d488:	469a      	mov	sl, r3
    d48a:	46b1      	mov	r9, r6
    d48c:	46a0      	mov	r8, r4
    d48e:	4656      	mov	r6, sl
    d490:	e000      	b.n	d494 <_vfprintf_r+0x129c>
    d492:	0026      	movs	r6, r4
    d494:	0028      	movs	r0, r5
    d496:	210a      	movs	r1, #10
    d498:	f7fb fe4c 	bl	9134 <__aeabi_idivmod>
    d49c:	1e74      	subs	r4, r6, #1
    d49e:	3130      	adds	r1, #48	; 0x30
    d4a0:	7021      	strb	r1, [r4, #0]
    d4a2:	0028      	movs	r0, r5
    d4a4:	210a      	movs	r1, #10
    d4a6:	f7fb fd5f 	bl	8f68 <__divsi3>
    d4aa:	0005      	movs	r5, r0
    d4ac:	2809      	cmp	r0, #9
    d4ae:	dcf0      	bgt.n	d492 <_vfprintf_r+0x129a>
    d4b0:	0023      	movs	r3, r4
    d4b2:	4644      	mov	r4, r8
    d4b4:	46b0      	mov	r8, r6
    d4b6:	464e      	mov	r6, r9
    d4b8:	4699      	mov	r9, r3
    d4ba:	0003      	movs	r3, r0
    d4bc:	3330      	adds	r3, #48	; 0x30
    d4be:	b2d8      	uxtb	r0, r3
    d4c0:	4643      	mov	r3, r8
    d4c2:	3b02      	subs	r3, #2
    d4c4:	7018      	strb	r0, [r3, #0]
    d4c6:	459a      	cmp	sl, r3
    d4c8:	d800      	bhi.n	d4cc <_vfprintf_r+0x12d4>
    d4ca:	e1f6      	b.n	d8ba <_vfprintf_r+0x16c2>
    d4cc:	4642      	mov	r2, r8
    d4ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d4d0:	4645      	mov	r5, r8
    d4d2:	1a99      	subs	r1, r3, r2
    d4d4:	2301      	movs	r3, #1
    d4d6:	3107      	adds	r1, #7
    d4d8:	425b      	negs	r3, r3
    d4da:	e001      	b.n	d4e0 <_vfprintf_r+0x12e8>
    d4dc:	5ce8      	ldrb	r0, [r5, r3]
    d4de:	3301      	adds	r3, #1
    d4e0:	aa21      	add	r2, sp, #132	; 0x84
    d4e2:	18d2      	adds	r2, r2, r3
    d4e4:	70d0      	strb	r0, [r2, #3]
    d4e6:	428b      	cmp	r3, r1
    d4e8:	d1f8      	bne.n	d4dc <_vfprintf_r+0x12e4>
    d4ea:	a916      	add	r1, sp, #88	; 0x58
    d4ec:	468c      	mov	ip, r1
    d4ee:	222e      	movs	r2, #46	; 0x2e
    d4f0:	464b      	mov	r3, r9
    d4f2:	4462      	add	r2, ip
    d4f4:	4694      	mov	ip, r2
    d4f6:	1afb      	subs	r3, r7, r3
    d4f8:	4463      	add	r3, ip
    d4fa:	aa21      	add	r2, sp, #132	; 0x84
    d4fc:	9914      	ldr	r1, [sp, #80]	; 0x50
    d4fe:	1a9b      	subs	r3, r3, r2
    d500:	469c      	mov	ip, r3
    d502:	000a      	movs	r2, r1
    d504:	4462      	add	r2, ip
    d506:	931a      	str	r3, [sp, #104]	; 0x68
    d508:	920e      	str	r2, [sp, #56]	; 0x38
    d50a:	2901      	cmp	r1, #1
    d50c:	dc00      	bgt.n	d510 <_vfprintf_r+0x1318>
    d50e:	e170      	b.n	d7f2 <_vfprintf_r+0x15fa>
    d510:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d514:	4694      	mov	ip, r2
    d516:	4463      	add	r3, ip
    d518:	001a      	movs	r2, r3
    d51a:	930e      	str	r3, [sp, #56]	; 0x38
    d51c:	43db      	mvns	r3, r3
    d51e:	17db      	asrs	r3, r3, #31
    d520:	401a      	ands	r2, r3
    d522:	2300      	movs	r3, #0
    d524:	9208      	str	r2, [sp, #32]
    d526:	9313      	str	r3, [sp, #76]	; 0x4c
    d528:	e6d4      	b.n	d2d4 <_vfprintf_r+0x10dc>
    d52a:	003a      	movs	r2, r7
    d52c:	4659      	mov	r1, fp
    d52e:	9806      	ldr	r0, [sp, #24]
    d530:	f003 f934 	bl	1079c <__sprint_r>
    d534:	2800      	cmp	r0, #0
    d536:	d001      	beq.n	d53c <_vfprintf_r+0x1344>
    d538:	f7ff fbee 	bl	cd18 <_vfprintf_r+0xb20>
    d53c:	68bc      	ldr	r4, [r7, #8]
    d53e:	ae32      	add	r6, sp, #200	; 0xc8
    d540:	e46a      	b.n	ce18 <_vfprintf_r+0xc20>
    d542:	4653      	mov	r3, sl
    d544:	2b00      	cmp	r3, #0
    d546:	d000      	beq.n	d54a <_vfprintf_r+0x1352>
    d548:	e659      	b.n	d1fe <_vfprintf_r+0x1006>
    d54a:	3301      	adds	r3, #1
    d54c:	469a      	mov	sl, r3
    d54e:	e656      	b.n	d1fe <_vfprintf_r+0x1006>
    d550:	4653      	mov	r3, sl
    d552:	9308      	str	r3, [sp, #32]
    d554:	2b06      	cmp	r3, #6
    d556:	d901      	bls.n	d55c <_vfprintf_r+0x1364>
    d558:	2306      	movs	r3, #6
    d55a:	9308      	str	r3, [sp, #32]
    d55c:	9b08      	ldr	r3, [sp, #32]
    d55e:	950f      	str	r5, [sp, #60]	; 0x3c
    d560:	930e      	str	r3, [sp, #56]	; 0x38
    d562:	2300      	movs	r3, #0
    d564:	4698      	mov	r8, r3
    d566:	469a      	mov	sl, r3
    d568:	9313      	str	r3, [sp, #76]	; 0x4c
    d56a:	4b62      	ldr	r3, [pc, #392]	; (d6f4 <_vfprintf_r+0x14fc>)
    d56c:	9409      	str	r4, [sp, #36]	; 0x24
    d56e:	9311      	str	r3, [sp, #68]	; 0x44
    d570:	f7fe ffbd 	bl	c4ee <_vfprintf_r+0x2f6>
    d574:	003a      	movs	r2, r7
    d576:	4659      	mov	r1, fp
    d578:	9806      	ldr	r0, [sp, #24]
    d57a:	f003 f90f 	bl	1079c <__sprint_r>
    d57e:	2800      	cmp	r0, #0
    d580:	d001      	beq.n	d586 <_vfprintf_r+0x138e>
    d582:	f7ff fbc9 	bl	cd18 <_vfprintf_r+0xb20>
    d586:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d588:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    d58a:	68bc      	ldr	r4, [r7, #8]
    d58c:	1a9b      	subs	r3, r3, r2
    d58e:	ae32      	add	r6, sp, #200	; 0xc8
    d590:	e567      	b.n	d062 <_vfprintf_r+0xe6a>
    d592:	ab23      	add	r3, sp, #140	; 0x8c
    d594:	931b      	str	r3, [sp, #108]	; 0x6c
    d596:	9304      	str	r3, [sp, #16]
    d598:	ab20      	add	r3, sp, #128	; 0x80
    d59a:	9303      	str	r3, [sp, #12]
    d59c:	ab1f      	add	r3, sp, #124	; 0x7c
    d59e:	9302      	str	r3, [sp, #8]
    d5a0:	4653      	mov	r3, sl
    d5a2:	9301      	str	r3, [sp, #4]
    d5a4:	2303      	movs	r3, #3
    d5a6:	464a      	mov	r2, r9
    d5a8:	9300      	str	r3, [sp, #0]
    d5aa:	9806      	ldr	r0, [sp, #24]
    d5ac:	9b08      	ldr	r3, [sp, #32]
    d5ae:	f000 fb75 	bl	dc9c <_dtoa_r>
    d5b2:	0003      	movs	r3, r0
    d5b4:	4453      	add	r3, sl
    d5b6:	4698      	mov	r8, r3
    d5b8:	4655      	mov	r5, sl
    d5ba:	9011      	str	r0, [sp, #68]	; 0x44
    d5bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d5be:	781b      	ldrb	r3, [r3, #0]
    d5c0:	2b30      	cmp	r3, #48	; 0x30
    d5c2:	d002      	beq.n	d5ca <_vfprintf_r+0x13d2>
    d5c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d5c6:	4498      	add	r8, r3
    d5c8:	e64e      	b.n	d268 <_vfprintf_r+0x1070>
    d5ca:	2200      	movs	r2, #0
    d5cc:	2300      	movs	r3, #0
    d5ce:	4648      	mov	r0, r9
    d5d0:	9908      	ldr	r1, [sp, #32]
    d5d2:	f7fb fdc5 	bl	9160 <__aeabi_dcmpeq>
    d5d6:	2800      	cmp	r0, #0
    d5d8:	d1f4      	bne.n	d5c4 <_vfprintf_r+0x13cc>
    d5da:	2301      	movs	r3, #1
    d5dc:	1b5b      	subs	r3, r3, r5
    d5de:	931f      	str	r3, [sp, #124]	; 0x7c
    d5e0:	4498      	add	r8, r3
    d5e2:	e641      	b.n	d268 <_vfprintf_r+0x1070>
    d5e4:	46c1      	mov	r9, r8
    d5e6:	f7ff fb1f 	bl	cc28 <_vfprintf_r+0xa30>
    d5ea:	2280      	movs	r2, #128	; 0x80
    d5ec:	0612      	lsls	r2, r2, #24
    d5ee:	4694      	mov	ip, r2
    d5f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d5f2:	4699      	mov	r9, r3
    d5f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d5f6:	4463      	add	r3, ip
    d5f8:	9308      	str	r3, [sp, #32]
    d5fa:	232d      	movs	r3, #45	; 0x2d
    d5fc:	9310      	str	r3, [sp, #64]	; 0x40
    d5fe:	e60b      	b.n	d218 <_vfprintf_r+0x1020>
    d600:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d602:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d604:	4694      	mov	ip, r2
    d606:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d608:	4463      	add	r3, ip
    d60a:	930e      	str	r3, [sp, #56]	; 0x38
    d60c:	2a00      	cmp	r2, #0
    d60e:	dc00      	bgt.n	d612 <_vfprintf_r+0x141a>
    d610:	e0e3      	b.n	d7da <_vfprintf_r+0x15e2>
    d612:	001a      	movs	r2, r3
    d614:	43db      	mvns	r3, r3
    d616:	17db      	asrs	r3, r3, #31
    d618:	401a      	ands	r2, r3
    d61a:	2367      	movs	r3, #103	; 0x67
    d61c:	9208      	str	r2, [sp, #32]
    d61e:	9312      	str	r3, [sp, #72]	; 0x48
    d620:	e658      	b.n	d2d4 <_vfprintf_r+0x10dc>
    d622:	003a      	movs	r2, r7
    d624:	4659      	mov	r1, fp
    d626:	9806      	ldr	r0, [sp, #24]
    d628:	f003 f8b8 	bl	1079c <__sprint_r>
    d62c:	2800      	cmp	r0, #0
    d62e:	d001      	beq.n	d634 <_vfprintf_r+0x143c>
    d630:	f7ff fb72 	bl	cd18 <_vfprintf_r+0xb20>
    d634:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d636:	68bc      	ldr	r4, [r7, #8]
    d638:	ae32      	add	r6, sp, #200	; 0xc8
    d63a:	e69d      	b.n	d378 <_vfprintf_r+0x1180>
    d63c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d63e:	9313      	str	r3, [sp, #76]	; 0x4c
    d640:	2b00      	cmp	r3, #0
    d642:	dc00      	bgt.n	d646 <_vfprintf_r+0x144e>
    d644:	e0f2      	b.n	d82c <_vfprintf_r+0x1634>
    d646:	4652      	mov	r2, sl
    d648:	2a00      	cmp	r2, #0
    d64a:	d000      	beq.n	d64e <_vfprintf_r+0x1456>
    d64c:	e0a0      	b.n	d790 <_vfprintf_r+0x1598>
    d64e:	07e2      	lsls	r2, r4, #31
    d650:	d500      	bpl.n	d654 <_vfprintf_r+0x145c>
    d652:	e09d      	b.n	d790 <_vfprintf_r+0x1598>
    d654:	9308      	str	r3, [sp, #32]
    d656:	930e      	str	r3, [sp, #56]	; 0x38
    d658:	e63c      	b.n	d2d4 <_vfprintf_r+0x10dc>
    d65a:	ab16      	add	r3, sp, #88	; 0x58
    d65c:	7fdb      	ldrb	r3, [r3, #31]
    d65e:	950f      	str	r5, [sp, #60]	; 0x3c
    d660:	4698      	mov	r8, r3
    d662:	4653      	mov	r3, sl
    d664:	9308      	str	r3, [sp, #32]
    d666:	930e      	str	r3, [sp, #56]	; 0x38
    d668:	2300      	movs	r3, #0
    d66a:	9409      	str	r4, [sp, #36]	; 0x24
    d66c:	469a      	mov	sl, r3
    d66e:	9313      	str	r3, [sp, #76]	; 0x4c
    d670:	f7fe ff37 	bl	c4e2 <_vfprintf_r+0x2ea>
    d674:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d676:	4698      	mov	r8, r3
    d678:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d67a:	44a8      	add	r8, r5
    d67c:	2b47      	cmp	r3, #71	; 0x47
    d67e:	d000      	beq.n	d682 <_vfprintf_r+0x148a>
    d680:	e5f2      	b.n	d268 <_vfprintf_r+0x1070>
    d682:	07e3      	lsls	r3, r4, #31
    d684:	d400      	bmi.n	d688 <_vfprintf_r+0x1490>
    d686:	e0dc      	b.n	d842 <_vfprintf_r+0x164a>
    d688:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d68a:	4698      	mov	r8, r3
    d68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d68e:	44a8      	add	r8, r5
    d690:	2b46      	cmp	r3, #70	; 0x46
    d692:	d093      	beq.n	d5bc <_vfprintf_r+0x13c4>
    d694:	e5e8      	b.n	d268 <_vfprintf_r+0x1070>
    d696:	ab23      	add	r3, sp, #140	; 0x8c
    d698:	931b      	str	r3, [sp, #108]	; 0x6c
    d69a:	9304      	str	r3, [sp, #16]
    d69c:	ab20      	add	r3, sp, #128	; 0x80
    d69e:	9303      	str	r3, [sp, #12]
    d6a0:	ab1f      	add	r3, sp, #124	; 0x7c
    d6a2:	9302      	str	r3, [sp, #8]
    d6a4:	4653      	mov	r3, sl
    d6a6:	9301      	str	r3, [sp, #4]
    d6a8:	2303      	movs	r3, #3
    d6aa:	464a      	mov	r2, r9
    d6ac:	9300      	str	r3, [sp, #0]
    d6ae:	9806      	ldr	r0, [sp, #24]
    d6b0:	9b08      	ldr	r3, [sp, #32]
    d6b2:	f000 faf3 	bl	dc9c <_dtoa_r>
    d6b6:	4655      	mov	r5, sl
    d6b8:	9011      	str	r0, [sp, #68]	; 0x44
    d6ba:	e7e5      	b.n	d688 <_vfprintf_r+0x1490>
    d6bc:	003a      	movs	r2, r7
    d6be:	4659      	mov	r1, fp
    d6c0:	9806      	ldr	r0, [sp, #24]
    d6c2:	f003 f86b 	bl	1079c <__sprint_r>
    d6c6:	2800      	cmp	r0, #0
    d6c8:	d101      	bne.n	d6ce <_vfprintf_r+0x14d6>
    d6ca:	f7ff faab 	bl	cc24 <_vfprintf_r+0xa2c>
    d6ce:	f7ff faab 	bl	cc28 <_vfprintf_r+0xa30>
    d6d2:	4642      	mov	r2, r8
    d6d4:	9207      	str	r2, [sp, #28]
    d6d6:	f7fe fe1b 	bl	c310 <_vfprintf_r+0x118>
    d6da:	4244      	negs	r4, r0
    d6dc:	3010      	adds	r0, #16
    d6de:	db00      	blt.n	d6e2 <_vfprintf_r+0x14ea>
    d6e0:	e0d8      	b.n	d894 <_vfprintf_r+0x169c>
    d6e2:	4805      	ldr	r0, [pc, #20]	; (d6f8 <_vfprintf_r+0x1500>)
    d6e4:	2610      	movs	r6, #16
    d6e6:	0005      	movs	r5, r0
    d6e8:	e00c      	b.n	d704 <_vfprintf_r+0x150c>
    d6ea:	46c0      	nop			; (mov r8, r8)
    d6ec:	000115e0 	.word	0x000115e0
    d6f0:	000112ac 	.word	0x000112ac
    d6f4:	000115d8 	.word	0x000115d8
    d6f8:	000115f4 	.word	0x000115f4
    d6fc:	3208      	adds	r2, #8
    d6fe:	3c10      	subs	r4, #16
    d700:	2c10      	cmp	r4, #16
    d702:	dd51      	ble.n	d7a8 <_vfprintf_r+0x15b0>
    d704:	3110      	adds	r1, #16
    d706:	3301      	adds	r3, #1
    d708:	6015      	str	r5, [r2, #0]
    d70a:	6056      	str	r6, [r2, #4]
    d70c:	60b9      	str	r1, [r7, #8]
    d70e:	607b      	str	r3, [r7, #4]
    d710:	2b07      	cmp	r3, #7
    d712:	ddf3      	ble.n	d6fc <_vfprintf_r+0x1504>
    d714:	003a      	movs	r2, r7
    d716:	4659      	mov	r1, fp
    d718:	9806      	ldr	r0, [sp, #24]
    d71a:	f003 f83f 	bl	1079c <__sprint_r>
    d71e:	2800      	cmp	r0, #0
    d720:	d001      	beq.n	d726 <_vfprintf_r+0x152e>
    d722:	f7ff faf9 	bl	cd18 <_vfprintf_r+0xb20>
    d726:	68b9      	ldr	r1, [r7, #8]
    d728:	687b      	ldr	r3, [r7, #4]
    d72a:	aa32      	add	r2, sp, #200	; 0xc8
    d72c:	e7e7      	b.n	d6fe <_vfprintf_r+0x1506>
    d72e:	003a      	movs	r2, r7
    d730:	4659      	mov	r1, fp
    d732:	9806      	ldr	r0, [sp, #24]
    d734:	f003 f832 	bl	1079c <__sprint_r>
    d738:	2800      	cmp	r0, #0
    d73a:	d001      	beq.n	d740 <_vfprintf_r+0x1548>
    d73c:	f7ff faec 	bl	cd18 <_vfprintf_r+0xb20>
    d740:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d742:	68b9      	ldr	r1, [r7, #8]
    d744:	687b      	ldr	r3, [r7, #4]
    d746:	aa32      	add	r2, sp, #200	; 0xc8
    d748:	e62e      	b.n	d3a8 <_vfprintf_r+0x11b0>
    d74a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d74c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d74e:	4694      	mov	ip, r2
    d750:	4463      	add	r3, ip
    d752:	001a      	movs	r2, r3
    d754:	930e      	str	r3, [sp, #56]	; 0x38
    d756:	e75d      	b.n	d614 <_vfprintf_r+0x141c>
    d758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d75a:	e599      	b.n	d290 <_vfprintf_r+0x1098>
    d75c:	212e      	movs	r1, #46	; 0x2e
    d75e:	2330      	movs	r3, #48	; 0x30
    d760:	aa16      	add	r2, sp, #88	; 0x58
    d762:	1852      	adds	r2, r2, r1
    d764:	7013      	strb	r3, [r2, #0]
    d766:	002b      	movs	r3, r5
    d768:	aa16      	add	r2, sp, #88	; 0x58
    d76a:	3101      	adds	r1, #1
    d76c:	3330      	adds	r3, #48	; 0x30
    d76e:	1852      	adds	r2, r2, r1
    d770:	7013      	strb	r3, [r2, #0]
    d772:	ab22      	add	r3, sp, #136	; 0x88
    d774:	e6c1      	b.n	d4fa <_vfprintf_r+0x1302>
    d776:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d778:	2b00      	cmp	r3, #0
    d77a:	db52      	blt.n	d822 <_vfprintf_r+0x162a>
    d77c:	ab16      	add	r3, sp, #88	; 0x58
    d77e:	7fdb      	ldrb	r3, [r3, #31]
    d780:	4698      	mov	r8, r3
    d782:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d784:	2b47      	cmp	r3, #71	; 0x47
    d786:	dc48      	bgt.n	d81a <_vfprintf_r+0x1622>
    d788:	4b4e      	ldr	r3, [pc, #312]	; (d8c4 <_vfprintf_r+0x16cc>)
    d78a:	9311      	str	r3, [sp, #68]	; 0x44
    d78c:	f7ff f88c 	bl	c8a8 <_vfprintf_r+0x6b0>
    d790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d794:	4694      	mov	ip, r2
    d796:	4463      	add	r3, ip
    d798:	4453      	add	r3, sl
    d79a:	001a      	movs	r2, r3
    d79c:	930e      	str	r3, [sp, #56]	; 0x38
    d79e:	43db      	mvns	r3, r3
    d7a0:	17db      	asrs	r3, r3, #31
    d7a2:	401a      	ands	r2, r3
    d7a4:	9208      	str	r2, [sp, #32]
    d7a6:	e595      	b.n	d2d4 <_vfprintf_r+0x10dc>
    d7a8:	46a9      	mov	r9, r5
    d7aa:	4648      	mov	r0, r9
    d7ac:	1909      	adds	r1, r1, r4
    d7ae:	3301      	adds	r3, #1
    d7b0:	6010      	str	r0, [r2, #0]
    d7b2:	6054      	str	r4, [r2, #4]
    d7b4:	60b9      	str	r1, [r7, #8]
    d7b6:	3208      	adds	r2, #8
    d7b8:	607b      	str	r3, [r7, #4]
    d7ba:	2b07      	cmp	r3, #7
    d7bc:	dc00      	bgt.n	d7c0 <_vfprintf_r+0x15c8>
    d7be:	e5f6      	b.n	d3ae <_vfprintf_r+0x11b6>
    d7c0:	003a      	movs	r2, r7
    d7c2:	4659      	mov	r1, fp
    d7c4:	9806      	ldr	r0, [sp, #24]
    d7c6:	f002 ffe9 	bl	1079c <__sprint_r>
    d7ca:	2800      	cmp	r0, #0
    d7cc:	d001      	beq.n	d7d2 <_vfprintf_r+0x15da>
    d7ce:	f7ff faa3 	bl	cd18 <_vfprintf_r+0xb20>
    d7d2:	68b9      	ldr	r1, [r7, #8]
    d7d4:	687b      	ldr	r3, [r7, #4]
    d7d6:	aa32      	add	r2, sp, #200	; 0xc8
    d7d8:	e5e9      	b.n	d3ae <_vfprintf_r+0x11b6>
    d7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d7dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d7de:	1a98      	subs	r0, r3, r2
    d7e0:	1c43      	adds	r3, r0, #1
    d7e2:	001a      	movs	r2, r3
    d7e4:	930e      	str	r3, [sp, #56]	; 0x38
    d7e6:	e715      	b.n	d614 <_vfprintf_r+0x141c>
    d7e8:	4a37      	ldr	r2, [pc, #220]	; (d8c8 <_vfprintf_r+0x16d0>)
    d7ea:	687b      	ldr	r3, [r7, #4]
    d7ec:	4691      	mov	r9, r2
    d7ee:	f7ff fbf5 	bl	cfdc <_vfprintf_r+0xde4>
    d7f2:	2301      	movs	r3, #1
    d7f4:	4023      	ands	r3, r4
    d7f6:	9313      	str	r3, [sp, #76]	; 0x4c
    d7f8:	d000      	beq.n	d7fc <_vfprintf_r+0x1604>
    d7fa:	e689      	b.n	d510 <_vfprintf_r+0x1318>
    d7fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d7fe:	43d3      	mvns	r3, r2
    d800:	17db      	asrs	r3, r3, #31
    d802:	401a      	ands	r2, r3
    d804:	9208      	str	r2, [sp, #32]
    d806:	e565      	b.n	d2d4 <_vfprintf_r+0x10dc>
    d808:	2301      	movs	r3, #1
    d80a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d80c:	391b      	subs	r1, #27
    d80e:	1a9d      	subs	r5, r3, r2
    d810:	aa16      	add	r2, sp, #88	; 0x58
    d812:	332c      	adds	r3, #44	; 0x2c
    d814:	1852      	adds	r2, r2, r1
    d816:	7013      	strb	r3, [r2, #0]
    d818:	e62f      	b.n	d47a <_vfprintf_r+0x1282>
    d81a:	4b2c      	ldr	r3, [pc, #176]	; (d8cc <_vfprintf_r+0x16d4>)
    d81c:	9311      	str	r3, [sp, #68]	; 0x44
    d81e:	f7ff f843 	bl	c8a8 <_vfprintf_r+0x6b0>
    d822:	232d      	movs	r3, #45	; 0x2d
    d824:	aa16      	add	r2, sp, #88	; 0x58
    d826:	77d3      	strb	r3, [r2, #31]
    d828:	4698      	mov	r8, r3
    d82a:	e7aa      	b.n	d782 <_vfprintf_r+0x158a>
    d82c:	4653      	mov	r3, sl
    d82e:	2b00      	cmp	r3, #0
    d830:	d101      	bne.n	d836 <_vfprintf_r+0x163e>
    d832:	07e3      	lsls	r3, r4, #31
    d834:	d503      	bpl.n	d83e <_vfprintf_r+0x1646>
    d836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d838:	1c58      	adds	r0, r3, #1
    d83a:	0003      	movs	r3, r0
    d83c:	e7ac      	b.n	d798 <_vfprintf_r+0x15a0>
    d83e:	2301      	movs	r3, #1
    d840:	e708      	b.n	d654 <_vfprintf_r+0x145c>
    d842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d844:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d846:	1a9b      	subs	r3, r3, r2
    d848:	9314      	str	r3, [sp, #80]	; 0x50
    d84a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d84c:	2b47      	cmp	r3, #71	; 0x47
    d84e:	d100      	bne.n	d852 <_vfprintf_r+0x165a>
    d850:	e5f6      	b.n	d440 <_vfprintf_r+0x1248>
    d852:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d854:	9313      	str	r3, [sp, #76]	; 0x4c
    d856:	e5fd      	b.n	d454 <_vfprintf_r+0x125c>
    d858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d85a:	1d1d      	adds	r5, r3, #4
    d85c:	681b      	ldr	r3, [r3, #0]
    d85e:	46a8      	mov	r8, r5
    d860:	469a      	mov	sl, r3
    d862:	2b00      	cmp	r3, #0
    d864:	db0a      	blt.n	d87c <_vfprintf_r+0x1684>
    d866:	4645      	mov	r5, r8
    d868:	9b07      	ldr	r3, [sp, #28]
    d86a:	950f      	str	r5, [sp, #60]	; 0x3c
    d86c:	785b      	ldrb	r3, [r3, #1]
    d86e:	9207      	str	r2, [sp, #28]
    d870:	f7fe fd4b 	bl	c30a <_vfprintf_r+0x112>
    d874:	ab16      	add	r3, sp, #88	; 0x58
    d876:	77d8      	strb	r0, [r3, #31]
    d878:	f7ff f830 	bl	c8dc <_vfprintf_r+0x6e4>
    d87c:	2301      	movs	r3, #1
    d87e:	425b      	negs	r3, r3
    d880:	469a      	mov	sl, r3
    d882:	e7f0      	b.n	d866 <_vfprintf_r+0x166e>
    d884:	ab16      	add	r3, sp, #88	; 0x58
    d886:	77d8      	strb	r0, [r3, #31]
    d888:	f7fe ff27 	bl	c6da <_vfprintf_r+0x4e2>
    d88c:	ab16      	add	r3, sp, #88	; 0x58
    d88e:	77d8      	strb	r0, [r3, #31]
    d890:	f7fe fdce 	bl	c430 <_vfprintf_r+0x238>
    d894:	480c      	ldr	r0, [pc, #48]	; (d8c8 <_vfprintf_r+0x16d0>)
    d896:	4681      	mov	r9, r0
    d898:	e787      	b.n	d7aa <_vfprintf_r+0x15b2>
    d89a:	ab16      	add	r3, sp, #88	; 0x58
    d89c:	77d8      	strb	r0, [r3, #31]
    d89e:	f7ff f829 	bl	c8f4 <_vfprintf_r+0x6fc>
    d8a2:	ab16      	add	r3, sp, #88	; 0x58
    d8a4:	77d8      	strb	r0, [r3, #31]
    d8a6:	f7fe ffc3 	bl	c830 <_vfprintf_r+0x638>
    d8aa:	ab16      	add	r3, sp, #88	; 0x58
    d8ac:	77d8      	strb	r0, [r3, #31]
    d8ae:	f7fe ffa5 	bl	c7fc <_vfprintf_r+0x604>
    d8b2:	ab16      	add	r3, sp, #88	; 0x58
    d8b4:	77d8      	strb	r0, [r3, #31]
    d8b6:	f7fe feaf 	bl	c618 <_vfprintf_r+0x420>
    d8ba:	aa16      	add	r2, sp, #88	; 0x58
    d8bc:	232e      	movs	r3, #46	; 0x2e
    d8be:	4694      	mov	ip, r2
    d8c0:	4463      	add	r3, ip
    d8c2:	e61a      	b.n	d4fa <_vfprintf_r+0x1302>
    d8c4:	000115ac 	.word	0x000115ac
    d8c8:	000115f4 	.word	0x000115f4
    d8cc:	000112a8 	.word	0x000112a8

0000d8d0 <__sbprintf>:
    d8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8d2:	0015      	movs	r5, r2
    d8d4:	2202      	movs	r2, #2
    d8d6:	4c1e      	ldr	r4, [pc, #120]	; (d950 <__sbprintf+0x80>)
    d8d8:	001f      	movs	r7, r3
    d8da:	898b      	ldrh	r3, [r1, #12]
    d8dc:	44a5      	add	sp, r4
    d8de:	4393      	bics	r3, r2
    d8e0:	466a      	mov	r2, sp
    d8e2:	8193      	strh	r3, [r2, #12]
    d8e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    d8e6:	0006      	movs	r6, r0
    d8e8:	9319      	str	r3, [sp, #100]	; 0x64
    d8ea:	89cb      	ldrh	r3, [r1, #14]
    d8ec:	a816      	add	r0, sp, #88	; 0x58
    d8ee:	81d3      	strh	r3, [r2, #14]
    d8f0:	69cb      	ldr	r3, [r1, #28]
    d8f2:	000c      	movs	r4, r1
    d8f4:	9307      	str	r3, [sp, #28]
    d8f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    d8f8:	9309      	str	r3, [sp, #36]	; 0x24
    d8fa:	ab1a      	add	r3, sp, #104	; 0x68
    d8fc:	9300      	str	r3, [sp, #0]
    d8fe:	9304      	str	r3, [sp, #16]
    d900:	2380      	movs	r3, #128	; 0x80
    d902:	00db      	lsls	r3, r3, #3
    d904:	9302      	str	r3, [sp, #8]
    d906:	9305      	str	r3, [sp, #20]
    d908:	2300      	movs	r3, #0
    d90a:	9306      	str	r3, [sp, #24]
    d90c:	f001 fdca 	bl	f4a4 <__retarget_lock_init_recursive>
    d910:	002a      	movs	r2, r5
    d912:	003b      	movs	r3, r7
    d914:	4669      	mov	r1, sp
    d916:	0030      	movs	r0, r6
    d918:	f7fe fc6e 	bl	c1f8 <_vfprintf_r>
    d91c:	1e05      	subs	r5, r0, #0
    d91e:	db05      	blt.n	d92c <__sbprintf+0x5c>
    d920:	4669      	mov	r1, sp
    d922:	0030      	movs	r0, r6
    d924:	f001 fa26 	bl	ed74 <_fflush_r>
    d928:	2800      	cmp	r0, #0
    d92a:	d10e      	bne.n	d94a <__sbprintf+0x7a>
    d92c:	466b      	mov	r3, sp
    d92e:	899b      	ldrh	r3, [r3, #12]
    d930:	065b      	lsls	r3, r3, #25
    d932:	d503      	bpl.n	d93c <__sbprintf+0x6c>
    d934:	2240      	movs	r2, #64	; 0x40
    d936:	89a3      	ldrh	r3, [r4, #12]
    d938:	4313      	orrs	r3, r2
    d93a:	81a3      	strh	r3, [r4, #12]
    d93c:	9816      	ldr	r0, [sp, #88]	; 0x58
    d93e:	f001 fdb3 	bl	f4a8 <__retarget_lock_close_recursive>
    d942:	0028      	movs	r0, r5
    d944:	4b03      	ldr	r3, [pc, #12]	; (d954 <__sbprintf+0x84>)
    d946:	449d      	add	sp, r3
    d948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d94a:	2501      	movs	r5, #1
    d94c:	426d      	negs	r5, r5
    d94e:	e7ed      	b.n	d92c <__sbprintf+0x5c>
    d950:	fffffb94 	.word	0xfffffb94
    d954:	0000046c 	.word	0x0000046c

0000d958 <__swsetup_r>:
    d958:	4b33      	ldr	r3, [pc, #204]	; (da28 <__swsetup_r+0xd0>)
    d95a:	b570      	push	{r4, r5, r6, lr}
    d95c:	0005      	movs	r5, r0
    d95e:	6818      	ldr	r0, [r3, #0]
    d960:	000c      	movs	r4, r1
    d962:	2800      	cmp	r0, #0
    d964:	d002      	beq.n	d96c <__swsetup_r+0x14>
    d966:	6b83      	ldr	r3, [r0, #56]	; 0x38
    d968:	2b00      	cmp	r3, #0
    d96a:	d03c      	beq.n	d9e6 <__swsetup_r+0x8e>
    d96c:	230c      	movs	r3, #12
    d96e:	5ee2      	ldrsh	r2, [r4, r3]
    d970:	b293      	uxth	r3, r2
    d972:	0719      	lsls	r1, r3, #28
    d974:	d50d      	bpl.n	d992 <__swsetup_r+0x3a>
    d976:	6921      	ldr	r1, [r4, #16]
    d978:	2900      	cmp	r1, #0
    d97a:	d015      	beq.n	d9a8 <__swsetup_r+0x50>
    d97c:	07da      	lsls	r2, r3, #31
    d97e:	d521      	bpl.n	d9c4 <__swsetup_r+0x6c>
    d980:	2300      	movs	r3, #0
    d982:	60a3      	str	r3, [r4, #8]
    d984:	6963      	ldr	r3, [r4, #20]
    d986:	2000      	movs	r0, #0
    d988:	425b      	negs	r3, r3
    d98a:	61a3      	str	r3, [r4, #24]
    d98c:	2900      	cmp	r1, #0
    d98e:	d021      	beq.n	d9d4 <__swsetup_r+0x7c>
    d990:	bd70      	pop	{r4, r5, r6, pc}
    d992:	06d9      	lsls	r1, r3, #27
    d994:	d53f      	bpl.n	da16 <__swsetup_r+0xbe>
    d996:	075b      	lsls	r3, r3, #29
    d998:	d428      	bmi.n	d9ec <__swsetup_r+0x94>
    d99a:	6921      	ldr	r1, [r4, #16]
    d99c:	2308      	movs	r3, #8
    d99e:	4313      	orrs	r3, r2
    d9a0:	81a3      	strh	r3, [r4, #12]
    d9a2:	b29b      	uxth	r3, r3
    d9a4:	2900      	cmp	r1, #0
    d9a6:	d1e9      	bne.n	d97c <__swsetup_r+0x24>
    d9a8:	22a0      	movs	r2, #160	; 0xa0
    d9aa:	2080      	movs	r0, #128	; 0x80
    d9ac:	0092      	lsls	r2, r2, #2
    d9ae:	0080      	lsls	r0, r0, #2
    d9b0:	401a      	ands	r2, r3
    d9b2:	4282      	cmp	r2, r0
    d9b4:	d0e2      	beq.n	d97c <__swsetup_r+0x24>
    d9b6:	0021      	movs	r1, r4
    d9b8:	0028      	movs	r0, r5
    d9ba:	f001 fdab 	bl	f514 <__smakebuf_r>
    d9be:	89a3      	ldrh	r3, [r4, #12]
    d9c0:	6921      	ldr	r1, [r4, #16]
    d9c2:	e7db      	b.n	d97c <__swsetup_r+0x24>
    d9c4:	2200      	movs	r2, #0
    d9c6:	079b      	lsls	r3, r3, #30
    d9c8:	d400      	bmi.n	d9cc <__swsetup_r+0x74>
    d9ca:	6962      	ldr	r2, [r4, #20]
    d9cc:	60a2      	str	r2, [r4, #8]
    d9ce:	2000      	movs	r0, #0
    d9d0:	2900      	cmp	r1, #0
    d9d2:	d1dd      	bne.n	d990 <__swsetup_r+0x38>
    d9d4:	220c      	movs	r2, #12
    d9d6:	5ea3      	ldrsh	r3, [r4, r2]
    d9d8:	061a      	lsls	r2, r3, #24
    d9da:	d5d9      	bpl.n	d990 <__swsetup_r+0x38>
    d9dc:	2240      	movs	r2, #64	; 0x40
    d9de:	4313      	orrs	r3, r2
    d9e0:	81a3      	strh	r3, [r4, #12]
    d9e2:	3801      	subs	r0, #1
    d9e4:	e7d4      	b.n	d990 <__swsetup_r+0x38>
    d9e6:	f001 fa1f 	bl	ee28 <__sinit>
    d9ea:	e7bf      	b.n	d96c <__swsetup_r+0x14>
    d9ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d9ee:	2900      	cmp	r1, #0
    d9f0:	d00a      	beq.n	da08 <__swsetup_r+0xb0>
    d9f2:	0023      	movs	r3, r4
    d9f4:	3340      	adds	r3, #64	; 0x40
    d9f6:	4299      	cmp	r1, r3
    d9f8:	d004      	beq.n	da04 <__swsetup_r+0xac>
    d9fa:	0028      	movs	r0, r5
    d9fc:	f001 fabe 	bl	ef7c <_free_r>
    da00:	230c      	movs	r3, #12
    da02:	5ee2      	ldrsh	r2, [r4, r3]
    da04:	2300      	movs	r3, #0
    da06:	6323      	str	r3, [r4, #48]	; 0x30
    da08:	2324      	movs	r3, #36	; 0x24
    da0a:	439a      	bics	r2, r3
    da0c:	2300      	movs	r3, #0
    da0e:	6921      	ldr	r1, [r4, #16]
    da10:	6063      	str	r3, [r4, #4]
    da12:	6021      	str	r1, [r4, #0]
    da14:	e7c2      	b.n	d99c <__swsetup_r+0x44>
    da16:	2309      	movs	r3, #9
    da18:	602b      	str	r3, [r5, #0]
    da1a:	2340      	movs	r3, #64	; 0x40
    da1c:	2001      	movs	r0, #1
    da1e:	431a      	orrs	r2, r3
    da20:	81a2      	strh	r2, [r4, #12]
    da22:	4240      	negs	r0, r0
    da24:	e7b4      	b.n	d990 <__swsetup_r+0x38>
    da26:	46c0      	nop			; (mov r8, r8)
    da28:	20000070 	.word	0x20000070

0000da2c <__register_exitproc>:
    da2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da2e:	464e      	mov	r6, r9
    da30:	4645      	mov	r5, r8
    da32:	46de      	mov	lr, fp
    da34:	4657      	mov	r7, sl
    da36:	b5e0      	push	{r5, r6, r7, lr}
    da38:	4d36      	ldr	r5, [pc, #216]	; (db14 <__register_exitproc+0xe8>)
    da3a:	b083      	sub	sp, #12
    da3c:	0006      	movs	r6, r0
    da3e:	6828      	ldr	r0, [r5, #0]
    da40:	4698      	mov	r8, r3
    da42:	000f      	movs	r7, r1
    da44:	4691      	mov	r9, r2
    da46:	f001 fd31 	bl	f4ac <__retarget_lock_acquire_recursive>
    da4a:	4b33      	ldr	r3, [pc, #204]	; (db18 <__register_exitproc+0xec>)
    da4c:	681c      	ldr	r4, [r3, #0]
    da4e:	23a4      	movs	r3, #164	; 0xa4
    da50:	005b      	lsls	r3, r3, #1
    da52:	58e0      	ldr	r0, [r4, r3]
    da54:	2800      	cmp	r0, #0
    da56:	d052      	beq.n	dafe <__register_exitproc+0xd2>
    da58:	6843      	ldr	r3, [r0, #4]
    da5a:	2b1f      	cmp	r3, #31
    da5c:	dc13      	bgt.n	da86 <__register_exitproc+0x5a>
    da5e:	1c5a      	adds	r2, r3, #1
    da60:	9201      	str	r2, [sp, #4]
    da62:	2e00      	cmp	r6, #0
    da64:	d128      	bne.n	dab8 <__register_exitproc+0x8c>
    da66:	9a01      	ldr	r2, [sp, #4]
    da68:	3302      	adds	r3, #2
    da6a:	009b      	lsls	r3, r3, #2
    da6c:	6042      	str	r2, [r0, #4]
    da6e:	501f      	str	r7, [r3, r0]
    da70:	6828      	ldr	r0, [r5, #0]
    da72:	f001 fd1d 	bl	f4b0 <__retarget_lock_release_recursive>
    da76:	2000      	movs	r0, #0
    da78:	b003      	add	sp, #12
    da7a:	bc3c      	pop	{r2, r3, r4, r5}
    da7c:	4690      	mov	r8, r2
    da7e:	4699      	mov	r9, r3
    da80:	46a2      	mov	sl, r4
    da82:	46ab      	mov	fp, r5
    da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da86:	4b25      	ldr	r3, [pc, #148]	; (db1c <__register_exitproc+0xf0>)
    da88:	2b00      	cmp	r3, #0
    da8a:	d03d      	beq.n	db08 <__register_exitproc+0xdc>
    da8c:	20c8      	movs	r0, #200	; 0xc8
    da8e:	0040      	lsls	r0, r0, #1
    da90:	f7f8 fde2 	bl	6658 <malloc>
    da94:	2800      	cmp	r0, #0
    da96:	d037      	beq.n	db08 <__register_exitproc+0xdc>
    da98:	22a4      	movs	r2, #164	; 0xa4
    da9a:	2300      	movs	r3, #0
    da9c:	0052      	lsls	r2, r2, #1
    da9e:	58a1      	ldr	r1, [r4, r2]
    daa0:	6043      	str	r3, [r0, #4]
    daa2:	6001      	str	r1, [r0, #0]
    daa4:	50a0      	str	r0, [r4, r2]
    daa6:	3240      	adds	r2, #64	; 0x40
    daa8:	5083      	str	r3, [r0, r2]
    daaa:	3204      	adds	r2, #4
    daac:	5083      	str	r3, [r0, r2]
    daae:	3301      	adds	r3, #1
    dab0:	9301      	str	r3, [sp, #4]
    dab2:	2300      	movs	r3, #0
    dab4:	2e00      	cmp	r6, #0
    dab6:	d0d6      	beq.n	da66 <__register_exitproc+0x3a>
    dab8:	009a      	lsls	r2, r3, #2
    daba:	4692      	mov	sl, r2
    dabc:	4482      	add	sl, r0
    dabe:	464a      	mov	r2, r9
    dac0:	2188      	movs	r1, #136	; 0x88
    dac2:	4654      	mov	r4, sl
    dac4:	5062      	str	r2, [r4, r1]
    dac6:	22c4      	movs	r2, #196	; 0xc4
    dac8:	0052      	lsls	r2, r2, #1
    daca:	4691      	mov	r9, r2
    dacc:	4481      	add	r9, r0
    dace:	464a      	mov	r2, r9
    dad0:	3987      	subs	r1, #135	; 0x87
    dad2:	4099      	lsls	r1, r3
    dad4:	6812      	ldr	r2, [r2, #0]
    dad6:	468b      	mov	fp, r1
    dad8:	430a      	orrs	r2, r1
    dada:	4694      	mov	ip, r2
    dadc:	464a      	mov	r2, r9
    dade:	4661      	mov	r1, ip
    dae0:	6011      	str	r1, [r2, #0]
    dae2:	2284      	movs	r2, #132	; 0x84
    dae4:	4641      	mov	r1, r8
    dae6:	0052      	lsls	r2, r2, #1
    dae8:	50a1      	str	r1, [r4, r2]
    daea:	2e02      	cmp	r6, #2
    daec:	d1bb      	bne.n	da66 <__register_exitproc+0x3a>
    daee:	0002      	movs	r2, r0
    daf0:	465c      	mov	r4, fp
    daf2:	328d      	adds	r2, #141	; 0x8d
    daf4:	32ff      	adds	r2, #255	; 0xff
    daf6:	6811      	ldr	r1, [r2, #0]
    daf8:	430c      	orrs	r4, r1
    dafa:	6014      	str	r4, [r2, #0]
    dafc:	e7b3      	b.n	da66 <__register_exitproc+0x3a>
    dafe:	0020      	movs	r0, r4
    db00:	304d      	adds	r0, #77	; 0x4d
    db02:	30ff      	adds	r0, #255	; 0xff
    db04:	50e0      	str	r0, [r4, r3]
    db06:	e7a7      	b.n	da58 <__register_exitproc+0x2c>
    db08:	6828      	ldr	r0, [r5, #0]
    db0a:	f001 fcd1 	bl	f4b0 <__retarget_lock_release_recursive>
    db0e:	2001      	movs	r0, #1
    db10:	4240      	negs	r0, r0
    db12:	e7b1      	b.n	da78 <__register_exitproc+0x4c>
    db14:	200004a0 	.word	0x200004a0
    db18:	00011440 	.word	0x00011440
    db1c:	00006659 	.word	0x00006659

0000db20 <register_fini>:
    db20:	4b03      	ldr	r3, [pc, #12]	; (db30 <register_fini+0x10>)
    db22:	b510      	push	{r4, lr}
    db24:	2b00      	cmp	r3, #0
    db26:	d002      	beq.n	db2e <register_fini+0xe>
    db28:	4802      	ldr	r0, [pc, #8]	; (db34 <register_fini+0x14>)
    db2a:	f000 f805 	bl	db38 <atexit>
    db2e:	bd10      	pop	{r4, pc}
    db30:	00000000 	.word	0x00000000
    db34:	0000eea9 	.word	0x0000eea9

0000db38 <atexit>:
    db38:	b510      	push	{r4, lr}
    db3a:	0001      	movs	r1, r0
    db3c:	2300      	movs	r3, #0
    db3e:	2200      	movs	r2, #0
    db40:	2000      	movs	r0, #0
    db42:	f7ff ff73 	bl	da2c <__register_exitproc>
    db46:	bd10      	pop	{r4, pc}

0000db48 <quorem>:
    db48:	b5f0      	push	{r4, r5, r6, r7, lr}
    db4a:	4645      	mov	r5, r8
    db4c:	4680      	mov	r8, r0
    db4e:	46de      	mov	lr, fp
    db50:	4657      	mov	r7, sl
    db52:	464e      	mov	r6, r9
    db54:	4642      	mov	r2, r8
    db56:	b5e0      	push	{r5, r6, r7, lr}
    db58:	690c      	ldr	r4, [r1, #16]
    db5a:	6912      	ldr	r2, [r2, #16]
    db5c:	b085      	sub	sp, #20
    db5e:	000b      	movs	r3, r1
    db60:	9102      	str	r1, [sp, #8]
    db62:	2000      	movs	r0, #0
    db64:	4294      	cmp	r4, r2
    db66:	dd00      	ble.n	db6a <quorem+0x22>
    db68:	e090      	b.n	dc8c <quorem+0x144>
    db6a:	2214      	movs	r2, #20
    db6c:	4694      	mov	ip, r2
    db6e:	4463      	add	r3, ip
    db70:	4699      	mov	r9, r3
    db72:	464a      	mov	r2, r9
    db74:	3c01      	subs	r4, #1
    db76:	00a3      	lsls	r3, r4, #2
    db78:	18d6      	adds	r6, r2, r3
    db7a:	2214      	movs	r2, #20
    db7c:	4442      	add	r2, r8
    db7e:	4693      	mov	fp, r2
    db80:	449b      	add	fp, r3
    db82:	6833      	ldr	r3, [r6, #0]
    db84:	0015      	movs	r5, r2
    db86:	1c59      	adds	r1, r3, #1
    db88:	465b      	mov	r3, fp
    db8a:	6818      	ldr	r0, [r3, #0]
    db8c:	9201      	str	r2, [sp, #4]
    db8e:	f7fb f961 	bl	8e54 <__udivsi3>
    db92:	1e03      	subs	r3, r0, #0
    db94:	9000      	str	r0, [sp, #0]
    db96:	d042      	beq.n	dc1e <quorem+0xd6>
    db98:	0029      	movs	r1, r5
    db9a:	2700      	movs	r7, #0
    db9c:	464d      	mov	r5, r9
    db9e:	2000      	movs	r0, #0
    dba0:	46b1      	mov	r9, r6
    dba2:	46a2      	mov	sl, r4
    dba4:	003e      	movs	r6, r7
    dba6:	0004      	movs	r4, r0
    dba8:	469c      	mov	ip, r3
    dbaa:	002f      	movs	r7, r5
    dbac:	0008      	movs	r0, r1
    dbae:	9503      	str	r5, [sp, #12]
    dbb0:	4663      	mov	r3, ip
    dbb2:	cf04      	ldmia	r7!, {r2}
    dbb4:	0415      	lsls	r5, r2, #16
    dbb6:	0c2d      	lsrs	r5, r5, #16
    dbb8:	435d      	muls	r5, r3
    dbba:	0c12      	lsrs	r2, r2, #16
    dbbc:	435a      	muls	r2, r3
    dbbe:	19ad      	adds	r5, r5, r6
    dbc0:	0c2b      	lsrs	r3, r5, #16
    dbc2:	18d2      	adds	r2, r2, r3
    dbc4:	6803      	ldr	r3, [r0, #0]
    dbc6:	042d      	lsls	r5, r5, #16
    dbc8:	0419      	lsls	r1, r3, #16
    dbca:	0c09      	lsrs	r1, r1, #16
    dbcc:	1909      	adds	r1, r1, r4
    dbce:	0c16      	lsrs	r6, r2, #16
    dbd0:	0c2d      	lsrs	r5, r5, #16
    dbd2:	0412      	lsls	r2, r2, #16
    dbd4:	1b49      	subs	r1, r1, r5
    dbd6:	0c12      	lsrs	r2, r2, #16
    dbd8:	0c1b      	lsrs	r3, r3, #16
    dbda:	1a9b      	subs	r3, r3, r2
    dbdc:	140a      	asrs	r2, r1, #16
    dbde:	189b      	adds	r3, r3, r2
    dbe0:	0409      	lsls	r1, r1, #16
    dbe2:	141c      	asrs	r4, r3, #16
    dbe4:	0c09      	lsrs	r1, r1, #16
    dbe6:	041b      	lsls	r3, r3, #16
    dbe8:	4319      	orrs	r1, r3
    dbea:	c002      	stmia	r0!, {r1}
    dbec:	45b9      	cmp	r9, r7
    dbee:	d2df      	bcs.n	dbb0 <quorem+0x68>
    dbf0:	9b03      	ldr	r3, [sp, #12]
    dbf2:	464e      	mov	r6, r9
    dbf4:	4699      	mov	r9, r3
    dbf6:	465b      	mov	r3, fp
    dbf8:	681b      	ldr	r3, [r3, #0]
    dbfa:	4654      	mov	r4, sl
    dbfc:	2b00      	cmp	r3, #0
    dbfe:	d10e      	bne.n	dc1e <quorem+0xd6>
    dc00:	465b      	mov	r3, fp
    dc02:	9a01      	ldr	r2, [sp, #4]
    dc04:	3b04      	subs	r3, #4
    dc06:	429a      	cmp	r2, r3
    dc08:	d304      	bcc.n	dc14 <quorem+0xcc>
    dc0a:	e006      	b.n	dc1a <quorem+0xd2>
    dc0c:	3b04      	subs	r3, #4
    dc0e:	3c01      	subs	r4, #1
    dc10:	429a      	cmp	r2, r3
    dc12:	d202      	bcs.n	dc1a <quorem+0xd2>
    dc14:	6819      	ldr	r1, [r3, #0]
    dc16:	2900      	cmp	r1, #0
    dc18:	d0f8      	beq.n	dc0c <quorem+0xc4>
    dc1a:	4643      	mov	r3, r8
    dc1c:	611c      	str	r4, [r3, #16]
    dc1e:	9902      	ldr	r1, [sp, #8]
    dc20:	4640      	mov	r0, r8
    dc22:	f002 fa47 	bl	100b4 <__mcmp>
    dc26:	2800      	cmp	r0, #0
    dc28:	db2f      	blt.n	dc8a <quorem+0x142>
    dc2a:	464f      	mov	r7, r9
    dc2c:	2000      	movs	r0, #0
    dc2e:	9b00      	ldr	r3, [sp, #0]
    dc30:	9d01      	ldr	r5, [sp, #4]
    dc32:	3301      	adds	r3, #1
    dc34:	9300      	str	r3, [sp, #0]
    dc36:	682b      	ldr	r3, [r5, #0]
    dc38:	cf02      	ldmia	r7!, {r1}
    dc3a:	041a      	lsls	r2, r3, #16
    dc3c:	0c12      	lsrs	r2, r2, #16
    dc3e:	1810      	adds	r0, r2, r0
    dc40:	040a      	lsls	r2, r1, #16
    dc42:	0c12      	lsrs	r2, r2, #16
    dc44:	1a82      	subs	r2, r0, r2
    dc46:	0c09      	lsrs	r1, r1, #16
    dc48:	0c1b      	lsrs	r3, r3, #16
    dc4a:	1a5b      	subs	r3, r3, r1
    dc4c:	1411      	asrs	r1, r2, #16
    dc4e:	185b      	adds	r3, r3, r1
    dc50:	0412      	lsls	r2, r2, #16
    dc52:	1418      	asrs	r0, r3, #16
    dc54:	0c12      	lsrs	r2, r2, #16
    dc56:	041b      	lsls	r3, r3, #16
    dc58:	4313      	orrs	r3, r2
    dc5a:	c508      	stmia	r5!, {r3}
    dc5c:	42be      	cmp	r6, r7
    dc5e:	d2ea      	bcs.n	dc36 <quorem+0xee>
    dc60:	9901      	ldr	r1, [sp, #4]
    dc62:	00a3      	lsls	r3, r4, #2
    dc64:	468c      	mov	ip, r1
    dc66:	4463      	add	r3, ip
    dc68:	681a      	ldr	r2, [r3, #0]
    dc6a:	2a00      	cmp	r2, #0
    dc6c:	d10d      	bne.n	dc8a <quorem+0x142>
    dc6e:	3b04      	subs	r3, #4
    dc70:	000a      	movs	r2, r1
    dc72:	4299      	cmp	r1, r3
    dc74:	d304      	bcc.n	dc80 <quorem+0x138>
    dc76:	e006      	b.n	dc86 <quorem+0x13e>
    dc78:	3b04      	subs	r3, #4
    dc7a:	3c01      	subs	r4, #1
    dc7c:	429a      	cmp	r2, r3
    dc7e:	d202      	bcs.n	dc86 <quorem+0x13e>
    dc80:	6819      	ldr	r1, [r3, #0]
    dc82:	2900      	cmp	r1, #0
    dc84:	d0f8      	beq.n	dc78 <quorem+0x130>
    dc86:	4643      	mov	r3, r8
    dc88:	611c      	str	r4, [r3, #16]
    dc8a:	9800      	ldr	r0, [sp, #0]
    dc8c:	b005      	add	sp, #20
    dc8e:	bc3c      	pop	{r2, r3, r4, r5}
    dc90:	4690      	mov	r8, r2
    dc92:	4699      	mov	r9, r3
    dc94:	46a2      	mov	sl, r4
    dc96:	46ab      	mov	fp, r5
    dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc9a:	46c0      	nop			; (mov r8, r8)

0000dc9c <_dtoa_r>:
    dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc9e:	4657      	mov	r7, sl
    dca0:	464e      	mov	r6, r9
    dca2:	4645      	mov	r5, r8
    dca4:	46de      	mov	lr, fp
    dca6:	b5e0      	push	{r5, r6, r7, lr}
    dca8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    dcaa:	b099      	sub	sp, #100	; 0x64
    dcac:	4682      	mov	sl, r0
    dcae:	001d      	movs	r5, r3
    dcb0:	0016      	movs	r6, r2
    dcb2:	001f      	movs	r7, r3
    dcb4:	2900      	cmp	r1, #0
    dcb6:	d009      	beq.n	dccc <_dtoa_r+0x30>
    dcb8:	2301      	movs	r3, #1
    dcba:	6c42      	ldr	r2, [r0, #68]	; 0x44
    dcbc:	4093      	lsls	r3, r2
    dcbe:	604a      	str	r2, [r1, #4]
    dcc0:	608b      	str	r3, [r1, #8]
    dcc2:	f001 ffeb 	bl	fc9c <_Bfree>
    dcc6:	2300      	movs	r3, #0
    dcc8:	4652      	mov	r2, sl
    dcca:	6413      	str	r3, [r2, #64]	; 0x40
    dccc:	46b8      	mov	r8, r7
    dcce:	2f00      	cmp	r7, #0
    dcd0:	db37      	blt.n	dd42 <_dtoa_r+0xa6>
    dcd2:	2300      	movs	r3, #0
    dcd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    dcd6:	6013      	str	r3, [r2, #0]
    dcd8:	4642      	mov	r2, r8
    dcda:	4bd6      	ldr	r3, [pc, #856]	; (e034 <_dtoa_r+0x398>)
    dcdc:	401a      	ands	r2, r3
    dcde:	429a      	cmp	r2, r3
    dce0:	d018      	beq.n	dd14 <_dtoa_r+0x78>
    dce2:	2200      	movs	r2, #0
    dce4:	2300      	movs	r3, #0
    dce6:	0030      	movs	r0, r6
    dce8:	0039      	movs	r1, r7
    dcea:	f7fb fa39 	bl	9160 <__aeabi_dcmpeq>
    dcee:	2800      	cmp	r0, #0
    dcf0:	d02f      	beq.n	dd52 <_dtoa_r+0xb6>
    dcf2:	2301      	movs	r3, #1
    dcf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dcf6:	6013      	str	r3, [r2, #0]
    dcf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dcfa:	2b00      	cmp	r3, #0
    dcfc:	d100      	bne.n	dd00 <_dtoa_r+0x64>
    dcfe:	e22a      	b.n	e156 <_dtoa_r+0x4ba>
    dd00:	48cd      	ldr	r0, [pc, #820]	; (e038 <_dtoa_r+0x39c>)
    dd02:	6018      	str	r0, [r3, #0]
    dd04:	3801      	subs	r0, #1
    dd06:	b019      	add	sp, #100	; 0x64
    dd08:	bc3c      	pop	{r2, r3, r4, r5}
    dd0a:	4690      	mov	r8, r2
    dd0c:	4699      	mov	r9, r3
    dd0e:	46a2      	mov	sl, r4
    dd10:	46ab      	mov	fp, r5
    dd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd14:	4bc9      	ldr	r3, [pc, #804]	; (e03c <_dtoa_r+0x3a0>)
    dd16:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dd18:	6013      	str	r3, [r2, #0]
    dd1a:	2e00      	cmp	r6, #0
    dd1c:	d10b      	bne.n	dd36 <_dtoa_r+0x9a>
    dd1e:	4643      	mov	r3, r8
    dd20:	0318      	lsls	r0, r3, #12
    dd22:	d108      	bne.n	dd36 <_dtoa_r+0x9a>
    dd24:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dd26:	48c6      	ldr	r0, [pc, #792]	; (e040 <_dtoa_r+0x3a4>)
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d0ec      	beq.n	dd06 <_dtoa_r+0x6a>
    dd2c:	0003      	movs	r3, r0
    dd2e:	3308      	adds	r3, #8
    dd30:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dd32:	6013      	str	r3, [r2, #0]
    dd34:	e7e7      	b.n	dd06 <_dtoa_r+0x6a>
    dd36:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dd38:	48c2      	ldr	r0, [pc, #776]	; (e044 <_dtoa_r+0x3a8>)
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d0e3      	beq.n	dd06 <_dtoa_r+0x6a>
    dd3e:	1cc3      	adds	r3, r0, #3
    dd40:	e7f6      	b.n	dd30 <_dtoa_r+0x94>
    dd42:	2301      	movs	r3, #1
    dd44:	9a25      	ldr	r2, [sp, #148]	; 0x94
    dd46:	0068      	lsls	r0, r5, #1
    dd48:	6013      	str	r3, [r2, #0]
    dd4a:	0843      	lsrs	r3, r0, #1
    dd4c:	4698      	mov	r8, r3
    dd4e:	001f      	movs	r7, r3
    dd50:	e7c2      	b.n	dcd8 <_dtoa_r+0x3c>
    dd52:	ab16      	add	r3, sp, #88	; 0x58
    dd54:	9301      	str	r3, [sp, #4]
    dd56:	ab17      	add	r3, sp, #92	; 0x5c
    dd58:	9300      	str	r3, [sp, #0]
    dd5a:	0032      	movs	r2, r6
    dd5c:	003b      	movs	r3, r7
    dd5e:	4650      	mov	r0, sl
    dd60:	f002 fa5e 	bl	10220 <__d2b>
    dd64:	4643      	mov	r3, r8
    dd66:	4683      	mov	fp, r0
    dd68:	0d1a      	lsrs	r2, r3, #20
    dd6a:	d100      	bne.n	dd6e <_dtoa_r+0xd2>
    dd6c:	e1d6      	b.n	e11c <_dtoa_r+0x480>
    dd6e:	033b      	lsls	r3, r7, #12
    dd70:	4cb5      	ldr	r4, [pc, #724]	; (e048 <_dtoa_r+0x3ac>)
    dd72:	0b1b      	lsrs	r3, r3, #12
    dd74:	431c      	orrs	r4, r3
    dd76:	4bb5      	ldr	r3, [pc, #724]	; (e04c <_dtoa_r+0x3b0>)
    dd78:	0030      	movs	r0, r6
    dd7a:	4698      	mov	r8, r3
    dd7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dd7e:	0021      	movs	r1, r4
    dd80:	4699      	mov	r9, r3
    dd82:	2300      	movs	r3, #0
    dd84:	4490      	add	r8, r2
    dd86:	930f      	str	r3, [sp, #60]	; 0x3c
    dd88:	2200      	movs	r2, #0
    dd8a:	4bb1      	ldr	r3, [pc, #708]	; (e050 <_dtoa_r+0x3b4>)
    dd8c:	f7fd fc28 	bl	b5e0 <__aeabi_dsub>
    dd90:	4ab0      	ldr	r2, [pc, #704]	; (e054 <_dtoa_r+0x3b8>)
    dd92:	4bb1      	ldr	r3, [pc, #708]	; (e058 <_dtoa_r+0x3bc>)
    dd94:	f7fd f9a4 	bl	b0e0 <__aeabi_dmul>
    dd98:	4ab0      	ldr	r2, [pc, #704]	; (e05c <_dtoa_r+0x3c0>)
    dd9a:	4bb1      	ldr	r3, [pc, #708]	; (e060 <_dtoa_r+0x3c4>)
    dd9c:	f7fc fa5c 	bl	a258 <__aeabi_dadd>
    dda0:	0004      	movs	r4, r0
    dda2:	4640      	mov	r0, r8
    dda4:	000d      	movs	r5, r1
    dda6:	f7fd ff85 	bl	bcb4 <__aeabi_i2d>
    ddaa:	4aae      	ldr	r2, [pc, #696]	; (e064 <_dtoa_r+0x3c8>)
    ddac:	4bae      	ldr	r3, [pc, #696]	; (e068 <_dtoa_r+0x3cc>)
    ddae:	f7fd f997 	bl	b0e0 <__aeabi_dmul>
    ddb2:	0002      	movs	r2, r0
    ddb4:	000b      	movs	r3, r1
    ddb6:	0020      	movs	r0, r4
    ddb8:	0029      	movs	r1, r5
    ddba:	f7fc fa4d 	bl	a258 <__aeabi_dadd>
    ddbe:	0004      	movs	r4, r0
    ddc0:	000d      	movs	r5, r1
    ddc2:	f7fd ff43 	bl	bc4c <__aeabi_d2iz>
    ddc6:	2200      	movs	r2, #0
    ddc8:	9003      	str	r0, [sp, #12]
    ddca:	2300      	movs	r3, #0
    ddcc:	0020      	movs	r0, r4
    ddce:	0029      	movs	r1, r5
    ddd0:	f7fb f9cc 	bl	916c <__aeabi_dcmplt>
    ddd4:	2800      	cmp	r0, #0
    ddd6:	d000      	beq.n	ddda <_dtoa_r+0x13e>
    ddd8:	e2b1      	b.n	e33e <_dtoa_r+0x6a2>
    ddda:	2301      	movs	r3, #1
    dddc:	9c03      	ldr	r4, [sp, #12]
    ddde:	930c      	str	r3, [sp, #48]	; 0x30
    dde0:	2c16      	cmp	r4, #22
    dde2:	d810      	bhi.n	de06 <_dtoa_r+0x16a>
    dde4:	49a1      	ldr	r1, [pc, #644]	; (e06c <_dtoa_r+0x3d0>)
    dde6:	00e3      	lsls	r3, r4, #3
    dde8:	18c9      	adds	r1, r1, r3
    ddea:	0032      	movs	r2, r6
    ddec:	6808      	ldr	r0, [r1, #0]
    ddee:	6849      	ldr	r1, [r1, #4]
    ddf0:	003b      	movs	r3, r7
    ddf2:	f7fb f9cf 	bl	9194 <__aeabi_dcmpgt>
    ddf6:	2800      	cmp	r0, #0
    ddf8:	d100      	bne.n	ddfc <_dtoa_r+0x160>
    ddfa:	e31d      	b.n	e438 <_dtoa_r+0x79c>
    ddfc:	0023      	movs	r3, r4
    ddfe:	3b01      	subs	r3, #1
    de00:	9303      	str	r3, [sp, #12]
    de02:	2300      	movs	r3, #0
    de04:	930c      	str	r3, [sp, #48]	; 0x30
    de06:	464b      	mov	r3, r9
    de08:	4642      	mov	r2, r8
    de0a:	1a9a      	subs	r2, r3, r2
    de0c:	2300      	movs	r3, #0
    de0e:	9306      	str	r3, [sp, #24]
    de10:	0013      	movs	r3, r2
    de12:	3b01      	subs	r3, #1
    de14:	9304      	str	r3, [sp, #16]
    de16:	d500      	bpl.n	de1a <_dtoa_r+0x17e>
    de18:	e2a1      	b.n	e35e <_dtoa_r+0x6c2>
    de1a:	9b03      	ldr	r3, [sp, #12]
    de1c:	2b00      	cmp	r3, #0
    de1e:	da00      	bge.n	de22 <_dtoa_r+0x186>
    de20:	e284      	b.n	e32c <_dtoa_r+0x690>
    de22:	469c      	mov	ip, r3
    de24:	930d      	str	r3, [sp, #52]	; 0x34
    de26:	2300      	movs	r3, #0
    de28:	9a04      	ldr	r2, [sp, #16]
    de2a:	4699      	mov	r9, r3
    de2c:	0011      	movs	r1, r2
    de2e:	4461      	add	r1, ip
    de30:	9104      	str	r1, [sp, #16]
    de32:	9b22      	ldr	r3, [sp, #136]	; 0x88
    de34:	2b09      	cmp	r3, #9
    de36:	d900      	bls.n	de3a <_dtoa_r+0x19e>
    de38:	e18f      	b.n	e15a <_dtoa_r+0x4be>
    de3a:	2401      	movs	r4, #1
    de3c:	2b05      	cmp	r3, #5
    de3e:	dd02      	ble.n	de46 <_dtoa_r+0x1aa>
    de40:	2400      	movs	r4, #0
    de42:	3b04      	subs	r3, #4
    de44:	9322      	str	r3, [sp, #136]	; 0x88
    de46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    de48:	2b03      	cmp	r3, #3
    de4a:	d101      	bne.n	de50 <_dtoa_r+0x1b4>
    de4c:	f000 fcce 	bl	e7ec <_dtoa_r+0xb50>
    de50:	dc01      	bgt.n	de56 <_dtoa_r+0x1ba>
    de52:	f000 fc92 	bl	e77a <_dtoa_r+0xade>
    de56:	9b22      	ldr	r3, [sp, #136]	; 0x88
    de58:	2b04      	cmp	r3, #4
    de5a:	d101      	bne.n	de60 <_dtoa_r+0x1c4>
    de5c:	f000 fc40 	bl	e6e0 <_dtoa_r+0xa44>
    de60:	2301      	movs	r3, #1
    de62:	930b      	str	r3, [sp, #44]	; 0x2c
    de64:	9b22      	ldr	r3, [sp, #136]	; 0x88
    de66:	2b05      	cmp	r3, #5
    de68:	d001      	beq.n	de6e <_dtoa_r+0x1d2>
    de6a:	f000 fc8b 	bl	e784 <_dtoa_r+0xae8>
    de6e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    de70:	9b03      	ldr	r3, [sp, #12]
    de72:	4694      	mov	ip, r2
    de74:	4463      	add	r3, ip
    de76:	930e      	str	r3, [sp, #56]	; 0x38
    de78:	3301      	adds	r3, #1
    de7a:	9307      	str	r3, [sp, #28]
    de7c:	1e1d      	subs	r5, r3, #0
    de7e:	dc01      	bgt.n	de84 <_dtoa_r+0x1e8>
    de80:	f000 fd49 	bl	e916 <_dtoa_r+0xc7a>
    de84:	9b07      	ldr	r3, [sp, #28]
    de86:	4698      	mov	r8, r3
    de88:	2300      	movs	r3, #0
    de8a:	4652      	mov	r2, sl
    de8c:	2100      	movs	r1, #0
    de8e:	6453      	str	r3, [r2, #68]	; 0x44
    de90:	2d17      	cmp	r5, #23
    de92:	d90a      	bls.n	deaa <_dtoa_r+0x20e>
    de94:	2201      	movs	r2, #1
    de96:	3304      	adds	r3, #4
    de98:	005b      	lsls	r3, r3, #1
    de9a:	0018      	movs	r0, r3
    de9c:	3014      	adds	r0, #20
    de9e:	0011      	movs	r1, r2
    dea0:	3201      	adds	r2, #1
    dea2:	4285      	cmp	r5, r0
    dea4:	d2f8      	bcs.n	de98 <_dtoa_r+0x1fc>
    dea6:	4653      	mov	r3, sl
    dea8:	6459      	str	r1, [r3, #68]	; 0x44
    deaa:	4650      	mov	r0, sl
    deac:	f001 fece 	bl	fc4c <_Balloc>
    deb0:	4653      	mov	r3, sl
    deb2:	6418      	str	r0, [r3, #64]	; 0x40
    deb4:	4643      	mov	r3, r8
    deb6:	900a      	str	r0, [sp, #40]	; 0x28
    deb8:	2b0e      	cmp	r3, #14
    deba:	d900      	bls.n	debe <_dtoa_r+0x222>
    debc:	e161      	b.n	e182 <_dtoa_r+0x4e6>
    debe:	2c00      	cmp	r4, #0
    dec0:	d100      	bne.n	dec4 <_dtoa_r+0x228>
    dec2:	e15e      	b.n	e182 <_dtoa_r+0x4e6>
    dec4:	9610      	str	r6, [sp, #64]	; 0x40
    dec6:	9711      	str	r7, [sp, #68]	; 0x44
    dec8:	9e03      	ldr	r6, [sp, #12]
    deca:	2e00      	cmp	r6, #0
    decc:	dc01      	bgt.n	ded2 <_dtoa_r+0x236>
    dece:	f000 fd25 	bl	e91c <_dtoa_r+0xc80>
    ded2:	0032      	movs	r2, r6
    ded4:	210f      	movs	r1, #15
    ded6:	4b65      	ldr	r3, [pc, #404]	; (e06c <_dtoa_r+0x3d0>)
    ded8:	400a      	ands	r2, r1
    deda:	00d2      	lsls	r2, r2, #3
    dedc:	189b      	adds	r3, r3, r2
    dede:	1136      	asrs	r6, r6, #4
    dee0:	681c      	ldr	r4, [r3, #0]
    dee2:	685d      	ldr	r5, [r3, #4]
    dee4:	06f3      	lsls	r3, r6, #27
    dee6:	d401      	bmi.n	deec <_dtoa_r+0x250>
    dee8:	f000 fcca 	bl	e880 <_dtoa_r+0xbe4>
    deec:	4b60      	ldr	r3, [pc, #384]	; (e070 <_dtoa_r+0x3d4>)
    deee:	400e      	ands	r6, r1
    def0:	6a1a      	ldr	r2, [r3, #32]
    def2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    def4:	9810      	ldr	r0, [sp, #64]	; 0x40
    def6:	9911      	ldr	r1, [sp, #68]	; 0x44
    def8:	f7fc fcbe 	bl	a878 <__aeabi_ddiv>
    defc:	2303      	movs	r3, #3
    defe:	4698      	mov	r8, r3
    df00:	9008      	str	r0, [sp, #32]
    df02:	9109      	str	r1, [sp, #36]	; 0x24
    df04:	2e00      	cmp	r6, #0
    df06:	d011      	beq.n	df2c <_dtoa_r+0x290>
    df08:	4f59      	ldr	r7, [pc, #356]	; (e070 <_dtoa_r+0x3d4>)
    df0a:	2301      	movs	r3, #1
    df0c:	4233      	tst	r3, r6
    df0e:	d009      	beq.n	df24 <_dtoa_r+0x288>
    df10:	469c      	mov	ip, r3
    df12:	683a      	ldr	r2, [r7, #0]
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	0020      	movs	r0, r4
    df18:	0029      	movs	r1, r5
    df1a:	44e0      	add	r8, ip
    df1c:	f7fd f8e0 	bl	b0e0 <__aeabi_dmul>
    df20:	0004      	movs	r4, r0
    df22:	000d      	movs	r5, r1
    df24:	1076      	asrs	r6, r6, #1
    df26:	3708      	adds	r7, #8
    df28:	2e00      	cmp	r6, #0
    df2a:	d1ee      	bne.n	df0a <_dtoa_r+0x26e>
    df2c:	0022      	movs	r2, r4
    df2e:	9808      	ldr	r0, [sp, #32]
    df30:	9909      	ldr	r1, [sp, #36]	; 0x24
    df32:	002b      	movs	r3, r5
    df34:	f7fc fca0 	bl	a878 <__aeabi_ddiv>
    df38:	0006      	movs	r6, r0
    df3a:	000f      	movs	r7, r1
    df3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df3e:	2b00      	cmp	r3, #0
    df40:	d009      	beq.n	df56 <_dtoa_r+0x2ba>
    df42:	2200      	movs	r2, #0
    df44:	4b40      	ldr	r3, [pc, #256]	; (e048 <_dtoa_r+0x3ac>)
    df46:	0030      	movs	r0, r6
    df48:	0039      	movs	r1, r7
    df4a:	f7fb f90f 	bl	916c <__aeabi_dcmplt>
    df4e:	2800      	cmp	r0, #0
    df50:	d001      	beq.n	df56 <_dtoa_r+0x2ba>
    df52:	f000 fdc2 	bl	eada <_dtoa_r+0xe3e>
    df56:	4640      	mov	r0, r8
    df58:	f7fd feac 	bl	bcb4 <__aeabi_i2d>
    df5c:	0032      	movs	r2, r6
    df5e:	003b      	movs	r3, r7
    df60:	f7fd f8be 	bl	b0e0 <__aeabi_dmul>
    df64:	2200      	movs	r2, #0
    df66:	4b43      	ldr	r3, [pc, #268]	; (e074 <_dtoa_r+0x3d8>)
    df68:	f7fc f976 	bl	a258 <__aeabi_dadd>
    df6c:	4a42      	ldr	r2, [pc, #264]	; (e078 <_dtoa_r+0x3dc>)
    df6e:	000b      	movs	r3, r1
    df70:	4694      	mov	ip, r2
    df72:	4463      	add	r3, ip
    df74:	9008      	str	r0, [sp, #32]
    df76:	9109      	str	r1, [sp, #36]	; 0x24
    df78:	9309      	str	r3, [sp, #36]	; 0x24
    df7a:	9b07      	ldr	r3, [sp, #28]
    df7c:	2b00      	cmp	r3, #0
    df7e:	d101      	bne.n	df84 <_dtoa_r+0x2e8>
    df80:	f000 fc50 	bl	e824 <_dtoa_r+0xb88>
    df84:	9b03      	ldr	r3, [sp, #12]
    df86:	9313      	str	r3, [sp, #76]	; 0x4c
    df88:	9b07      	ldr	r3, [sp, #28]
    df8a:	9312      	str	r3, [sp, #72]	; 0x48
    df8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df8e:	2b00      	cmp	r3, #0
    df90:	d101      	bne.n	df96 <_dtoa_r+0x2fa>
    df92:	f000 fd1d 	bl	e9d0 <_dtoa_r+0xd34>
    df96:	9b12      	ldr	r3, [sp, #72]	; 0x48
    df98:	2000      	movs	r0, #0
    df9a:	1e5a      	subs	r2, r3, #1
    df9c:	4b33      	ldr	r3, [pc, #204]	; (e06c <_dtoa_r+0x3d0>)
    df9e:	00d2      	lsls	r2, r2, #3
    dfa0:	189b      	adds	r3, r3, r2
    dfa2:	681a      	ldr	r2, [r3, #0]
    dfa4:	685b      	ldr	r3, [r3, #4]
    dfa6:	4935      	ldr	r1, [pc, #212]	; (e07c <_dtoa_r+0x3e0>)
    dfa8:	f7fc fc66 	bl	a878 <__aeabi_ddiv>
    dfac:	9a08      	ldr	r2, [sp, #32]
    dfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfb0:	f7fd fb16 	bl	b5e0 <__aeabi_dsub>
    dfb4:	9008      	str	r0, [sp, #32]
    dfb6:	9109      	str	r1, [sp, #36]	; 0x24
    dfb8:	0039      	movs	r1, r7
    dfba:	0030      	movs	r0, r6
    dfbc:	f7fd fe46 	bl	bc4c <__aeabi_d2iz>
    dfc0:	0004      	movs	r4, r0
    dfc2:	f7fd fe77 	bl	bcb4 <__aeabi_i2d>
    dfc6:	0002      	movs	r2, r0
    dfc8:	000b      	movs	r3, r1
    dfca:	0030      	movs	r0, r6
    dfcc:	0039      	movs	r1, r7
    dfce:	f7fd fb07 	bl	b5e0 <__aeabi_dsub>
    dfd2:	0005      	movs	r5, r0
    dfd4:	000e      	movs	r6, r1
    dfd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dfd8:	3430      	adds	r4, #48	; 0x30
    dfda:	1c51      	adds	r1, r2, #1
    dfdc:	b2e7      	uxtb	r7, r4
    dfde:	9114      	str	r1, [sp, #80]	; 0x50
    dfe0:	7017      	strb	r7, [r2, #0]
    dfe2:	0033      	movs	r3, r6
    dfe4:	9808      	ldr	r0, [sp, #32]
    dfe6:	9909      	ldr	r1, [sp, #36]	; 0x24
    dfe8:	002a      	movs	r2, r5
    dfea:	f7fb f8d3 	bl	9194 <__aeabi_dcmpgt>
    dfee:	2800      	cmp	r0, #0
    dff0:	d001      	beq.n	dff6 <_dtoa_r+0x35a>
    dff2:	f000 fdfe 	bl	ebf2 <_dtoa_r+0xf56>
    dff6:	002a      	movs	r2, r5
    dff8:	0033      	movs	r3, r6
    dffa:	2000      	movs	r0, #0
    dffc:	4912      	ldr	r1, [pc, #72]	; (e048 <_dtoa_r+0x3ac>)
    dffe:	f7fd faef 	bl	b5e0 <__aeabi_dsub>
    e002:	0002      	movs	r2, r0
    e004:	000b      	movs	r3, r1
    e006:	9808      	ldr	r0, [sp, #32]
    e008:	9909      	ldr	r1, [sp, #36]	; 0x24
    e00a:	f7fb f8c3 	bl	9194 <__aeabi_dcmpgt>
    e00e:	2800      	cmp	r0, #0
    e010:	d001      	beq.n	e016 <_dtoa_r+0x37a>
    e012:	f000 fde7 	bl	ebe4 <_dtoa_r+0xf48>
    e016:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e018:	2b01      	cmp	r3, #1
    e01a:	d101      	bne.n	e020 <_dtoa_r+0x384>
    e01c:	f000 fc78 	bl	e910 <_dtoa_r+0xc74>
    e020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e022:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e024:	4694      	mov	ip, r2
    e026:	4463      	add	r3, ip
    e028:	4698      	mov	r8, r3
    e02a:	464b      	mov	r3, r9
    e02c:	9312      	str	r3, [sp, #72]	; 0x48
    e02e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e030:	4699      	mov	r9, r3
    e032:	e038      	b.n	e0a6 <_dtoa_r+0x40a>
    e034:	7ff00000 	.word	0x7ff00000
    e038:	000115e1 	.word	0x000115e1
    e03c:	0000270f 	.word	0x0000270f
    e040:	00011604 	.word	0x00011604
    e044:	00011610 	.word	0x00011610
    e048:	3ff00000 	.word	0x3ff00000
    e04c:	fffffc01 	.word	0xfffffc01
    e050:	3ff80000 	.word	0x3ff80000
    e054:	636f4361 	.word	0x636f4361
    e058:	3fd287a7 	.word	0x3fd287a7
    e05c:	8b60c8b3 	.word	0x8b60c8b3
    e060:	3fc68a28 	.word	0x3fc68a28
    e064:	509f79fb 	.word	0x509f79fb
    e068:	3fd34413 	.word	0x3fd34413
    e06c:	00011640 	.word	0x00011640
    e070:	00011618 	.word	0x00011618
    e074:	401c0000 	.word	0x401c0000
    e078:	fcc00000 	.word	0xfcc00000
    e07c:	3fe00000 	.word	0x3fe00000
    e080:	002a      	movs	r2, r5
    e082:	0033      	movs	r3, r6
    e084:	2000      	movs	r0, #0
    e086:	49b9      	ldr	r1, [pc, #740]	; (e36c <_dtoa_r+0x6d0>)
    e088:	f7fd faaa 	bl	b5e0 <__aeabi_dsub>
    e08c:	9a08      	ldr	r2, [sp, #32]
    e08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e090:	f7fb f86c 	bl	916c <__aeabi_dcmplt>
    e094:	2800      	cmp	r0, #0
    e096:	d001      	beq.n	e09c <_dtoa_r+0x400>
    e098:	f000 fd74 	bl	eb84 <_dtoa_r+0xee8>
    e09c:	46a1      	mov	r9, r4
    e09e:	4544      	cmp	r4, r8
    e0a0:	d101      	bne.n	e0a6 <_dtoa_r+0x40a>
    e0a2:	f000 fc33 	bl	e90c <_dtoa_r+0xc70>
    e0a6:	9808      	ldr	r0, [sp, #32]
    e0a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    e0aa:	2200      	movs	r2, #0
    e0ac:	4bb0      	ldr	r3, [pc, #704]	; (e370 <_dtoa_r+0x6d4>)
    e0ae:	f7fd f817 	bl	b0e0 <__aeabi_dmul>
    e0b2:	2200      	movs	r2, #0
    e0b4:	4bae      	ldr	r3, [pc, #696]	; (e370 <_dtoa_r+0x6d4>)
    e0b6:	9008      	str	r0, [sp, #32]
    e0b8:	9109      	str	r1, [sp, #36]	; 0x24
    e0ba:	0028      	movs	r0, r5
    e0bc:	0031      	movs	r1, r6
    e0be:	f7fd f80f 	bl	b0e0 <__aeabi_dmul>
    e0c2:	000d      	movs	r5, r1
    e0c4:	0004      	movs	r4, r0
    e0c6:	f7fd fdc1 	bl	bc4c <__aeabi_d2iz>
    e0ca:	0007      	movs	r7, r0
    e0cc:	f7fd fdf2 	bl	bcb4 <__aeabi_i2d>
    e0d0:	0002      	movs	r2, r0
    e0d2:	000b      	movs	r3, r1
    e0d4:	0020      	movs	r0, r4
    e0d6:	0029      	movs	r1, r5
    e0d8:	f7fd fa82 	bl	b5e0 <__aeabi_dsub>
    e0dc:	464b      	mov	r3, r9
    e0de:	3730      	adds	r7, #48	; 0x30
    e0e0:	b2ff      	uxtb	r7, r7
    e0e2:	1c5c      	adds	r4, r3, #1
    e0e4:	701f      	strb	r7, [r3, #0]
    e0e6:	9a08      	ldr	r2, [sp, #32]
    e0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0ea:	0005      	movs	r5, r0
    e0ec:	000e      	movs	r6, r1
    e0ee:	f7fb f83d 	bl	916c <__aeabi_dcmplt>
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d0c4      	beq.n	e080 <_dtoa_r+0x3e4>
    e0f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e0f8:	9303      	str	r3, [sp, #12]
    e0fa:	4659      	mov	r1, fp
    e0fc:	4650      	mov	r0, sl
    e0fe:	f001 fdcd 	bl	fc9c <_Bfree>
    e102:	2300      	movs	r3, #0
    e104:	7023      	strb	r3, [r4, #0]
    e106:	9b03      	ldr	r3, [sp, #12]
    e108:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e10a:	3301      	adds	r3, #1
    e10c:	6013      	str	r3, [r2, #0]
    e10e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e110:	2b00      	cmp	r3, #0
    e112:	d100      	bne.n	e116 <_dtoa_r+0x47a>
    e114:	e3a8      	b.n	e868 <_dtoa_r+0xbcc>
    e116:	601c      	str	r4, [r3, #0]
    e118:	980a      	ldr	r0, [sp, #40]	; 0x28
    e11a:	e5f4      	b.n	dd06 <_dtoa_r+0x6a>
    e11c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e11e:	4699      	mov	r9, r3
    e120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e122:	444b      	add	r3, r9
    e124:	001c      	movs	r4, r3
    e126:	4b93      	ldr	r3, [pc, #588]	; (e374 <_dtoa_r+0x6d8>)
    e128:	18e3      	adds	r3, r4, r3
    e12a:	2b20      	cmp	r3, #32
    e12c:	dc00      	bgt.n	e130 <_dtoa_r+0x494>
    e12e:	e17e      	b.n	e42e <_dtoa_r+0x792>
    e130:	0031      	movs	r1, r6
    e132:	4a91      	ldr	r2, [pc, #580]	; (e378 <_dtoa_r+0x6dc>)
    e134:	4640      	mov	r0, r8
    e136:	18a2      	adds	r2, r4, r2
    e138:	40d1      	lsrs	r1, r2
    e13a:	000a      	movs	r2, r1
    e13c:	2140      	movs	r1, #64	; 0x40
    e13e:	1acb      	subs	r3, r1, r3
    e140:	4098      	lsls	r0, r3
    e142:	4310      	orrs	r0, r2
    e144:	f7fd fdf8 	bl	bd38 <__aeabi_ui2d>
    e148:	1e63      	subs	r3, r4, #1
    e14a:	4698      	mov	r8, r3
    e14c:	2301      	movs	r3, #1
    e14e:	4d8b      	ldr	r5, [pc, #556]	; (e37c <_dtoa_r+0x6e0>)
    e150:	930f      	str	r3, [sp, #60]	; 0x3c
    e152:	1949      	adds	r1, r1, r5
    e154:	e618      	b.n	dd88 <_dtoa_r+0xec>
    e156:	488a      	ldr	r0, [pc, #552]	; (e380 <_dtoa_r+0x6e4>)
    e158:	e5d5      	b.n	dd06 <_dtoa_r+0x6a>
    e15a:	2300      	movs	r3, #0
    e15c:	4652      	mov	r2, sl
    e15e:	2100      	movs	r1, #0
    e160:	6453      	str	r3, [r2, #68]	; 0x44
    e162:	4650      	mov	r0, sl
    e164:	f001 fd72 	bl	fc4c <_Balloc>
    e168:	4653      	mov	r3, sl
    e16a:	6418      	str	r0, [r3, #64]	; 0x40
    e16c:	2301      	movs	r3, #1
    e16e:	425b      	negs	r3, r3
    e170:	9307      	str	r3, [sp, #28]
    e172:	930e      	str	r3, [sp, #56]	; 0x38
    e174:	3302      	adds	r3, #2
    e176:	2200      	movs	r2, #0
    e178:	930b      	str	r3, [sp, #44]	; 0x2c
    e17a:	2300      	movs	r3, #0
    e17c:	900a      	str	r0, [sp, #40]	; 0x28
    e17e:	9223      	str	r2, [sp, #140]	; 0x8c
    e180:	9322      	str	r3, [sp, #136]	; 0x88
    e182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e184:	2b00      	cmp	r3, #0
    e186:	da00      	bge.n	e18a <_dtoa_r+0x4ee>
    e188:	e0ab      	b.n	e2e2 <_dtoa_r+0x646>
    e18a:	9a03      	ldr	r2, [sp, #12]
    e18c:	2a0e      	cmp	r2, #14
    e18e:	dd00      	ble.n	e192 <_dtoa_r+0x4f6>
    e190:	e0a7      	b.n	e2e2 <_dtoa_r+0x646>
    e192:	4b7c      	ldr	r3, [pc, #496]	; (e384 <_dtoa_r+0x6e8>)
    e194:	00d2      	lsls	r2, r2, #3
    e196:	189b      	adds	r3, r3, r2
    e198:	685c      	ldr	r4, [r3, #4]
    e19a:	681b      	ldr	r3, [r3, #0]
    e19c:	9304      	str	r3, [sp, #16]
    e19e:	9405      	str	r4, [sp, #20]
    e1a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e1a2:	2b00      	cmp	r3, #0
    e1a4:	da00      	bge.n	e1a8 <_dtoa_r+0x50c>
    e1a6:	e2a7      	b.n	e6f8 <_dtoa_r+0xa5c>
    e1a8:	9c04      	ldr	r4, [sp, #16]
    e1aa:	9d05      	ldr	r5, [sp, #20]
    e1ac:	0030      	movs	r0, r6
    e1ae:	0022      	movs	r2, r4
    e1b0:	002b      	movs	r3, r5
    e1b2:	0039      	movs	r1, r7
    e1b4:	f7fc fb60 	bl	a878 <__aeabi_ddiv>
    e1b8:	f7fd fd48 	bl	bc4c <__aeabi_d2iz>
    e1bc:	4680      	mov	r8, r0
    e1be:	f7fd fd79 	bl	bcb4 <__aeabi_i2d>
    e1c2:	0022      	movs	r2, r4
    e1c4:	002b      	movs	r3, r5
    e1c6:	f7fc ff8b 	bl	b0e0 <__aeabi_dmul>
    e1ca:	0002      	movs	r2, r0
    e1cc:	000b      	movs	r3, r1
    e1ce:	0030      	movs	r0, r6
    e1d0:	0039      	movs	r1, r7
    e1d2:	f7fd fa05 	bl	b5e0 <__aeabi_dsub>
    e1d6:	4643      	mov	r3, r8
    e1d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e1da:	3330      	adds	r3, #48	; 0x30
    e1dc:	7013      	strb	r3, [r2, #0]
    e1de:	9b07      	ldr	r3, [sp, #28]
    e1e0:	0006      	movs	r6, r0
    e1e2:	000f      	movs	r7, r1
    e1e4:	1c54      	adds	r4, r2, #1
    e1e6:	2b01      	cmp	r3, #1
    e1e8:	d04e      	beq.n	e288 <_dtoa_r+0x5ec>
    e1ea:	2200      	movs	r2, #0
    e1ec:	4b60      	ldr	r3, [pc, #384]	; (e370 <_dtoa_r+0x6d4>)
    e1ee:	f7fc ff77 	bl	b0e0 <__aeabi_dmul>
    e1f2:	2200      	movs	r2, #0
    e1f4:	2300      	movs	r3, #0
    e1f6:	0006      	movs	r6, r0
    e1f8:	000f      	movs	r7, r1
    e1fa:	f7fa ffb1 	bl	9160 <__aeabi_dcmpeq>
    e1fe:	2800      	cmp	r0, #0
    e200:	d000      	beq.n	e204 <_dtoa_r+0x568>
    e202:	e77a      	b.n	e0fa <_dtoa_r+0x45e>
    e204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e206:	9a07      	ldr	r2, [sp, #28]
    e208:	1c9d      	adds	r5, r3, #2
    e20a:	469c      	mov	ip, r3
    e20c:	465b      	mov	r3, fp
    e20e:	9306      	str	r3, [sp, #24]
    e210:	4653      	mov	r3, sl
    e212:	4462      	add	r2, ip
    e214:	46aa      	mov	sl, r5
    e216:	9c04      	ldr	r4, [sp, #16]
    e218:	9d05      	ldr	r5, [sp, #20]
    e21a:	4691      	mov	r9, r2
    e21c:	9307      	str	r3, [sp, #28]
    e21e:	e00f      	b.n	e240 <_dtoa_r+0x5a4>
    e220:	2200      	movs	r2, #0
    e222:	4b53      	ldr	r3, [pc, #332]	; (e370 <_dtoa_r+0x6d4>)
    e224:	f7fc ff5c 	bl	b0e0 <__aeabi_dmul>
    e228:	2301      	movs	r3, #1
    e22a:	469c      	mov	ip, r3
    e22c:	2200      	movs	r2, #0
    e22e:	2300      	movs	r3, #0
    e230:	0006      	movs	r6, r0
    e232:	000f      	movs	r7, r1
    e234:	44e2      	add	sl, ip
    e236:	f7fa ff93 	bl	9160 <__aeabi_dcmpeq>
    e23a:	2800      	cmp	r0, #0
    e23c:	d000      	beq.n	e240 <_dtoa_r+0x5a4>
    e23e:	e2d9      	b.n	e7f4 <_dtoa_r+0xb58>
    e240:	0022      	movs	r2, r4
    e242:	002b      	movs	r3, r5
    e244:	0030      	movs	r0, r6
    e246:	0039      	movs	r1, r7
    e248:	f7fc fb16 	bl	a878 <__aeabi_ddiv>
    e24c:	f7fd fcfe 	bl	bc4c <__aeabi_d2iz>
    e250:	4680      	mov	r8, r0
    e252:	f7fd fd2f 	bl	bcb4 <__aeabi_i2d>
    e256:	0022      	movs	r2, r4
    e258:	002b      	movs	r3, r5
    e25a:	f7fc ff41 	bl	b0e0 <__aeabi_dmul>
    e25e:	0002      	movs	r2, r0
    e260:	000b      	movs	r3, r1
    e262:	0030      	movs	r0, r6
    e264:	0039      	movs	r1, r7
    e266:	f7fd f9bb 	bl	b5e0 <__aeabi_dsub>
    e26a:	4653      	mov	r3, sl
    e26c:	4642      	mov	r2, r8
    e26e:	3b01      	subs	r3, #1
    e270:	3230      	adds	r2, #48	; 0x30
    e272:	0006      	movs	r6, r0
    e274:	000f      	movs	r7, r1
    e276:	46d3      	mov	fp, sl
    e278:	701a      	strb	r2, [r3, #0]
    e27a:	45d1      	cmp	r9, sl
    e27c:	d1d0      	bne.n	e220 <_dtoa_r+0x584>
    e27e:	9b06      	ldr	r3, [sp, #24]
    e280:	4654      	mov	r4, sl
    e282:	469b      	mov	fp, r3
    e284:	9b07      	ldr	r3, [sp, #28]
    e286:	469a      	mov	sl, r3
    e288:	0032      	movs	r2, r6
    e28a:	003b      	movs	r3, r7
    e28c:	0030      	movs	r0, r6
    e28e:	0039      	movs	r1, r7
    e290:	f7fb ffe2 	bl	a258 <__aeabi_dadd>
    e294:	0006      	movs	r6, r0
    e296:	000f      	movs	r7, r1
    e298:	0002      	movs	r2, r0
    e29a:	000b      	movs	r3, r1
    e29c:	9804      	ldr	r0, [sp, #16]
    e29e:	9905      	ldr	r1, [sp, #20]
    e2a0:	f7fa ff64 	bl	916c <__aeabi_dcmplt>
    e2a4:	2800      	cmp	r0, #0
    e2a6:	d10c      	bne.n	e2c2 <_dtoa_r+0x626>
    e2a8:	9804      	ldr	r0, [sp, #16]
    e2aa:	9905      	ldr	r1, [sp, #20]
    e2ac:	0032      	movs	r2, r6
    e2ae:	003b      	movs	r3, r7
    e2b0:	f7fa ff56 	bl	9160 <__aeabi_dcmpeq>
    e2b4:	2800      	cmp	r0, #0
    e2b6:	d100      	bne.n	e2ba <_dtoa_r+0x61e>
    e2b8:	e71f      	b.n	e0fa <_dtoa_r+0x45e>
    e2ba:	4643      	mov	r3, r8
    e2bc:	07db      	lsls	r3, r3, #31
    e2be:	d400      	bmi.n	e2c2 <_dtoa_r+0x626>
    e2c0:	e71b      	b.n	e0fa <_dtoa_r+0x45e>
    e2c2:	1e65      	subs	r5, r4, #1
    e2c4:	782f      	ldrb	r7, [r5, #0]
    e2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e2c8:	e006      	b.n	e2d8 <_dtoa_r+0x63c>
    e2ca:	429d      	cmp	r5, r3
    e2cc:	d100      	bne.n	e2d0 <_dtoa_r+0x634>
    e2ce:	e351      	b.n	e974 <_dtoa_r+0xcd8>
    e2d0:	3c02      	subs	r4, #2
    e2d2:	7827      	ldrb	r7, [r4, #0]
    e2d4:	002c      	movs	r4, r5
    e2d6:	3d01      	subs	r5, #1
    e2d8:	2f39      	cmp	r7, #57	; 0x39
    e2da:	d0f6      	beq.n	e2ca <_dtoa_r+0x62e>
    e2dc:	3701      	adds	r7, #1
    e2de:	702f      	strb	r7, [r5, #0]
    e2e0:	e70b      	b.n	e0fa <_dtoa_r+0x45e>
    e2e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e2e4:	2a00      	cmp	r2, #0
    e2e6:	d04f      	beq.n	e388 <_dtoa_r+0x6ec>
    e2e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e2ea:	2a01      	cmp	r2, #1
    e2ec:	dc00      	bgt.n	e2f0 <_dtoa_r+0x654>
    e2ee:	e22c      	b.n	e74a <_dtoa_r+0xaae>
    e2f0:	9b07      	ldr	r3, [sp, #28]
    e2f2:	1e5c      	subs	r4, r3, #1
    e2f4:	464b      	mov	r3, r9
    e2f6:	45a1      	cmp	r9, r4
    e2f8:	da00      	bge.n	e2fc <_dtoa_r+0x660>
    e2fa:	e2b8      	b.n	e86e <_dtoa_r+0xbd2>
    e2fc:	1b1c      	subs	r4, r3, r4
    e2fe:	9b07      	ldr	r3, [sp, #28]
    e300:	2b00      	cmp	r3, #0
    e302:	da00      	bge.n	e306 <_dtoa_r+0x66a>
    e304:	e3d4      	b.n	eab0 <_dtoa_r+0xe14>
    e306:	9b06      	ldr	r3, [sp, #24]
    e308:	9308      	str	r3, [sp, #32]
    e30a:	9b07      	ldr	r3, [sp, #28]
    e30c:	9a06      	ldr	r2, [sp, #24]
    e30e:	2101      	movs	r1, #1
    e310:	4694      	mov	ip, r2
    e312:	449c      	add	ip, r3
    e314:	4662      	mov	r2, ip
    e316:	9206      	str	r2, [sp, #24]
    e318:	9a04      	ldr	r2, [sp, #16]
    e31a:	4650      	mov	r0, sl
    e31c:	4694      	mov	ip, r2
    e31e:	449c      	add	ip, r3
    e320:	4663      	mov	r3, ip
    e322:	9304      	str	r3, [sp, #16]
    e324:	f001 fd52 	bl	fdcc <__i2b>
    e328:	4680      	mov	r8, r0
    e32a:	e032      	b.n	e392 <_dtoa_r+0x6f6>
    e32c:	9a06      	ldr	r2, [sp, #24]
    e32e:	9b03      	ldr	r3, [sp, #12]
    e330:	1ad2      	subs	r2, r2, r3
    e332:	425b      	negs	r3, r3
    e334:	4699      	mov	r9, r3
    e336:	2300      	movs	r3, #0
    e338:	9206      	str	r2, [sp, #24]
    e33a:	930d      	str	r3, [sp, #52]	; 0x34
    e33c:	e579      	b.n	de32 <_dtoa_r+0x196>
    e33e:	9803      	ldr	r0, [sp, #12]
    e340:	f7fd fcb8 	bl	bcb4 <__aeabi_i2d>
    e344:	000b      	movs	r3, r1
    e346:	0002      	movs	r2, r0
    e348:	0029      	movs	r1, r5
    e34a:	0020      	movs	r0, r4
    e34c:	f7fa ff08 	bl	9160 <__aeabi_dcmpeq>
    e350:	0002      	movs	r2, r0
    e352:	4250      	negs	r0, r2
    e354:	4150      	adcs	r0, r2
    e356:	9b03      	ldr	r3, [sp, #12]
    e358:	1a1b      	subs	r3, r3, r0
    e35a:	9303      	str	r3, [sp, #12]
    e35c:	e53d      	b.n	ddda <_dtoa_r+0x13e>
    e35e:	2301      	movs	r3, #1
    e360:	1a9b      	subs	r3, r3, r2
    e362:	9306      	str	r3, [sp, #24]
    e364:	2300      	movs	r3, #0
    e366:	9304      	str	r3, [sp, #16]
    e368:	e557      	b.n	de1a <_dtoa_r+0x17e>
    e36a:	46c0      	nop			; (mov r8, r8)
    e36c:	3ff00000 	.word	0x3ff00000
    e370:	40240000 	.word	0x40240000
    e374:	00000432 	.word	0x00000432
    e378:	00000412 	.word	0x00000412
    e37c:	fe100000 	.word	0xfe100000
    e380:	000115e0 	.word	0x000115e0
    e384:	00011640 	.word	0x00011640
    e388:	9b06      	ldr	r3, [sp, #24]
    e38a:	464c      	mov	r4, r9
    e38c:	9308      	str	r3, [sp, #32]
    e38e:	2300      	movs	r3, #0
    e390:	4698      	mov	r8, r3
    e392:	9908      	ldr	r1, [sp, #32]
    e394:	1e0b      	subs	r3, r1, #0
    e396:	dd0e      	ble.n	e3b6 <_dtoa_r+0x71a>
    e398:	9a04      	ldr	r2, [sp, #16]
    e39a:	2a00      	cmp	r2, #0
    e39c:	dd0b      	ble.n	e3b6 <_dtoa_r+0x71a>
    e39e:	4293      	cmp	r3, r2
    e3a0:	dd00      	ble.n	e3a4 <_dtoa_r+0x708>
    e3a2:	e187      	b.n	e6b4 <_dtoa_r+0xa18>
    e3a4:	9a06      	ldr	r2, [sp, #24]
    e3a6:	1ad2      	subs	r2, r2, r3
    e3a8:	9206      	str	r2, [sp, #24]
    e3aa:	9a08      	ldr	r2, [sp, #32]
    e3ac:	1ad2      	subs	r2, r2, r3
    e3ae:	9208      	str	r2, [sp, #32]
    e3b0:	9a04      	ldr	r2, [sp, #16]
    e3b2:	1ad3      	subs	r3, r2, r3
    e3b4:	9304      	str	r3, [sp, #16]
    e3b6:	464b      	mov	r3, r9
    e3b8:	2b00      	cmp	r3, #0
    e3ba:	d01a      	beq.n	e3f2 <_dtoa_r+0x756>
    e3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d100      	bne.n	e3c4 <_dtoa_r+0x728>
    e3c2:	e1bb      	b.n	e73c <_dtoa_r+0xaa0>
    e3c4:	2c00      	cmp	r4, #0
    e3c6:	dd10      	ble.n	e3ea <_dtoa_r+0x74e>
    e3c8:	4641      	mov	r1, r8
    e3ca:	0022      	movs	r2, r4
    e3cc:	4650      	mov	r0, sl
    e3ce:	f001 fdb1 	bl	ff34 <__pow5mult>
    e3d2:	465a      	mov	r2, fp
    e3d4:	0001      	movs	r1, r0
    e3d6:	4680      	mov	r8, r0
    e3d8:	4650      	mov	r0, sl
    e3da:	f001 fd01 	bl	fde0 <__multiply>
    e3de:	0005      	movs	r5, r0
    e3e0:	4659      	mov	r1, fp
    e3e2:	4650      	mov	r0, sl
    e3e4:	f001 fc5a 	bl	fc9c <_Bfree>
    e3e8:	46ab      	mov	fp, r5
    e3ea:	464b      	mov	r3, r9
    e3ec:	1b1a      	subs	r2, r3, r4
    e3ee:	d000      	beq.n	e3f2 <_dtoa_r+0x756>
    e3f0:	e1a5      	b.n	e73e <_dtoa_r+0xaa2>
    e3f2:	2101      	movs	r1, #1
    e3f4:	4650      	mov	r0, sl
    e3f6:	f001 fce9 	bl	fdcc <__i2b>
    e3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e3fc:	4681      	mov	r9, r0
    e3fe:	2b00      	cmp	r3, #0
    e400:	dd1d      	ble.n	e43e <_dtoa_r+0x7a2>
    e402:	001a      	movs	r2, r3
    e404:	0001      	movs	r1, r0
    e406:	4650      	mov	r0, sl
    e408:	f001 fd94 	bl	ff34 <__pow5mult>
    e40c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e40e:	4681      	mov	r9, r0
    e410:	2b01      	cmp	r3, #1
    e412:	dc00      	bgt.n	e416 <_dtoa_r+0x77a>
    e414:	e150      	b.n	e6b8 <_dtoa_r+0xa1c>
    e416:	2400      	movs	r4, #0
    e418:	464b      	mov	r3, r9
    e41a:	691b      	ldr	r3, [r3, #16]
    e41c:	3303      	adds	r3, #3
    e41e:	009b      	lsls	r3, r3, #2
    e420:	444b      	add	r3, r9
    e422:	6858      	ldr	r0, [r3, #4]
    e424:	f001 fc8a 	bl	fd3c <__hi0bits>
    e428:	2320      	movs	r3, #32
    e42a:	1a1b      	subs	r3, r3, r0
    e42c:	e010      	b.n	e450 <_dtoa_r+0x7b4>
    e42e:	2220      	movs	r2, #32
    e430:	0030      	movs	r0, r6
    e432:	1ad3      	subs	r3, r2, r3
    e434:	4098      	lsls	r0, r3
    e436:	e685      	b.n	e144 <_dtoa_r+0x4a8>
    e438:	2300      	movs	r3, #0
    e43a:	930c      	str	r3, [sp, #48]	; 0x30
    e43c:	e4e3      	b.n	de06 <_dtoa_r+0x16a>
    e43e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e440:	2400      	movs	r4, #0
    e442:	2b01      	cmp	r3, #1
    e444:	dc00      	bgt.n	e448 <_dtoa_r+0x7ac>
    e446:	e18b      	b.n	e760 <_dtoa_r+0xac4>
    e448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e44a:	2301      	movs	r3, #1
    e44c:	2a00      	cmp	r2, #0
    e44e:	d1e3      	bne.n	e418 <_dtoa_r+0x77c>
    e450:	9904      	ldr	r1, [sp, #16]
    e452:	201f      	movs	r0, #31
    e454:	468c      	mov	ip, r1
    e456:	4463      	add	r3, ip
    e458:	4018      	ands	r0, r3
    e45a:	d100      	bne.n	e45e <_dtoa_r+0x7c2>
    e45c:	e0ae      	b.n	e5bc <_dtoa_r+0x920>
    e45e:	2320      	movs	r3, #32
    e460:	1a1b      	subs	r3, r3, r0
    e462:	2b04      	cmp	r3, #4
    e464:	dc00      	bgt.n	e468 <_dtoa_r+0x7cc>
    e466:	e3cc      	b.n	ec02 <_dtoa_r+0xf66>
    e468:	231c      	movs	r3, #28
    e46a:	1a18      	subs	r0, r3, r0
    e46c:	9b06      	ldr	r3, [sp, #24]
    e46e:	469c      	mov	ip, r3
    e470:	4484      	add	ip, r0
    e472:	4663      	mov	r3, ip
    e474:	9306      	str	r3, [sp, #24]
    e476:	9b08      	ldr	r3, [sp, #32]
    e478:	469c      	mov	ip, r3
    e47a:	4484      	add	ip, r0
    e47c:	4663      	mov	r3, ip
    e47e:	468c      	mov	ip, r1
    e480:	4484      	add	ip, r0
    e482:	9308      	str	r3, [sp, #32]
    e484:	4663      	mov	r3, ip
    e486:	9304      	str	r3, [sp, #16]
    e488:	9b06      	ldr	r3, [sp, #24]
    e48a:	2b00      	cmp	r3, #0
    e48c:	dd05      	ble.n	e49a <_dtoa_r+0x7fe>
    e48e:	4659      	mov	r1, fp
    e490:	001a      	movs	r2, r3
    e492:	4650      	mov	r0, sl
    e494:	f001 fdae 	bl	fff4 <__lshift>
    e498:	4683      	mov	fp, r0
    e49a:	9b04      	ldr	r3, [sp, #16]
    e49c:	2b00      	cmp	r3, #0
    e49e:	dd05      	ble.n	e4ac <_dtoa_r+0x810>
    e4a0:	4649      	mov	r1, r9
    e4a2:	001a      	movs	r2, r3
    e4a4:	4650      	mov	r0, sl
    e4a6:	f001 fda5 	bl	fff4 <__lshift>
    e4aa:	4681      	mov	r9, r0
    e4ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e4ae:	2b00      	cmp	r3, #0
    e4b0:	d000      	beq.n	e4b4 <_dtoa_r+0x818>
    e4b2:	e094      	b.n	e5de <_dtoa_r+0x942>
    e4b4:	9b07      	ldr	r3, [sp, #28]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	dc00      	bgt.n	e4bc <_dtoa_r+0x820>
    e4ba:	e175      	b.n	e7a8 <_dtoa_r+0xb0c>
    e4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d100      	bne.n	e4c4 <_dtoa_r+0x828>
    e4c2:	e0a6      	b.n	e612 <_dtoa_r+0x976>
    e4c4:	9b08      	ldr	r3, [sp, #32]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	dd05      	ble.n	e4d6 <_dtoa_r+0x83a>
    e4ca:	4641      	mov	r1, r8
    e4cc:	001a      	movs	r2, r3
    e4ce:	4650      	mov	r0, sl
    e4d0:	f001 fd90 	bl	fff4 <__lshift>
    e4d4:	4680      	mov	r8, r0
    e4d6:	4643      	mov	r3, r8
    e4d8:	930c      	str	r3, [sp, #48]	; 0x30
    e4da:	2c00      	cmp	r4, #0
    e4dc:	d000      	beq.n	e4e0 <_dtoa_r+0x844>
    e4de:	e250      	b.n	e982 <_dtoa_r+0xce6>
    e4e0:	9c07      	ldr	r4, [sp, #28]
    e4e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e4e4:	3c01      	subs	r4, #1
    e4e6:	0023      	movs	r3, r4
    e4e8:	4694      	mov	ip, r2
    e4ea:	4463      	add	r3, ip
    e4ec:	9308      	str	r3, [sp, #32]
    e4ee:	2301      	movs	r3, #1
    e4f0:	4033      	ands	r3, r6
    e4f2:	9307      	str	r3, [sp, #28]
    e4f4:	464b      	mov	r3, r9
    e4f6:	9306      	str	r3, [sp, #24]
    e4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e4fa:	4657      	mov	r7, sl
    e4fc:	4645      	mov	r5, r8
    e4fe:	465e      	mov	r6, fp
    e500:	4692      	mov	sl, r2
    e502:	4698      	mov	r8, r3
    e504:	9b06      	ldr	r3, [sp, #24]
    e506:	0030      	movs	r0, r6
    e508:	0019      	movs	r1, r3
    e50a:	4699      	mov	r9, r3
    e50c:	f7ff fb1c 	bl	db48 <quorem>
    e510:	0003      	movs	r3, r0
    e512:	900b      	str	r0, [sp, #44]	; 0x2c
    e514:	3330      	adds	r3, #48	; 0x30
    e516:	0029      	movs	r1, r5
    e518:	0030      	movs	r0, r6
    e51a:	9304      	str	r3, [sp, #16]
    e51c:	f001 fdca 	bl	100b4 <__mcmp>
    e520:	4649      	mov	r1, r9
    e522:	0004      	movs	r4, r0
    e524:	4642      	mov	r2, r8
    e526:	0038      	movs	r0, r7
    e528:	f001 fdde 	bl	100e8 <__mdiff>
    e52c:	68c3      	ldr	r3, [r0, #12]
    e52e:	4681      	mov	r9, r0
    e530:	2b00      	cmp	r3, #0
    e532:	d000      	beq.n	e536 <_dtoa_r+0x89a>
    e534:	e11e      	b.n	e774 <_dtoa_r+0xad8>
    e536:	0001      	movs	r1, r0
    e538:	0030      	movs	r0, r6
    e53a:	f001 fdbb 	bl	100b4 <__mcmp>
    e53e:	4683      	mov	fp, r0
    e540:	4649      	mov	r1, r9
    e542:	0038      	movs	r0, r7
    e544:	f001 fbaa 	bl	fc9c <_Bfree>
    e548:	465b      	mov	r3, fp
    e54a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e54c:	4313      	orrs	r3, r2
    e54e:	d103      	bne.n	e558 <_dtoa_r+0x8bc>
    e550:	9b07      	ldr	r3, [sp, #28]
    e552:	2b00      	cmp	r3, #0
    e554:	d100      	bne.n	e558 <_dtoa_r+0x8bc>
    e556:	e306      	b.n	eb66 <_dtoa_r+0xeca>
    e558:	2c00      	cmp	r4, #0
    e55a:	da00      	bge.n	e55e <_dtoa_r+0x8c2>
    e55c:	e1a8      	b.n	e8b0 <_dtoa_r+0xc14>
    e55e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e560:	431c      	orrs	r4, r3
    e562:	d103      	bne.n	e56c <_dtoa_r+0x8d0>
    e564:	9b07      	ldr	r3, [sp, #28]
    e566:	2b00      	cmp	r3, #0
    e568:	d100      	bne.n	e56c <_dtoa_r+0x8d0>
    e56a:	e1a1      	b.n	e8b0 <_dtoa_r+0xc14>
    e56c:	465b      	mov	r3, fp
    e56e:	2b00      	cmp	r3, #0
    e570:	dd00      	ble.n	e574 <_dtoa_r+0x8d8>
    e572:	e282      	b.n	ea7a <_dtoa_r+0xdde>
    e574:	4669      	mov	r1, sp
    e576:	4652      	mov	r2, sl
    e578:	4653      	mov	r3, sl
    e57a:	7c09      	ldrb	r1, [r1, #16]
    e57c:	1c5c      	adds	r4, r3, #1
    e57e:	7011      	strb	r1, [r2, #0]
    e580:	9a08      	ldr	r2, [sp, #32]
    e582:	4552      	cmp	r2, sl
    e584:	d100      	bne.n	e588 <_dtoa_r+0x8ec>
    e586:	e28a      	b.n	ea9e <_dtoa_r+0xe02>
    e588:	0031      	movs	r1, r6
    e58a:	2300      	movs	r3, #0
    e58c:	220a      	movs	r2, #10
    e58e:	0038      	movs	r0, r7
    e590:	f001 fb8e 	bl	fcb0 <__multadd>
    e594:	2300      	movs	r3, #0
    e596:	0006      	movs	r6, r0
    e598:	220a      	movs	r2, #10
    e59a:	0029      	movs	r1, r5
    e59c:	0038      	movs	r0, r7
    e59e:	4545      	cmp	r5, r8
    e5a0:	d100      	bne.n	e5a4 <_dtoa_r+0x908>
    e5a2:	e0e1      	b.n	e768 <_dtoa_r+0xacc>
    e5a4:	f001 fb84 	bl	fcb0 <__multadd>
    e5a8:	4641      	mov	r1, r8
    e5aa:	0005      	movs	r5, r0
    e5ac:	2300      	movs	r3, #0
    e5ae:	220a      	movs	r2, #10
    e5b0:	0038      	movs	r0, r7
    e5b2:	f001 fb7d 	bl	fcb0 <__multadd>
    e5b6:	46a2      	mov	sl, r4
    e5b8:	4680      	mov	r8, r0
    e5ba:	e7a3      	b.n	e504 <_dtoa_r+0x868>
    e5bc:	201c      	movs	r0, #28
    e5be:	9b06      	ldr	r3, [sp, #24]
    e5c0:	469c      	mov	ip, r3
    e5c2:	4484      	add	ip, r0
    e5c4:	4663      	mov	r3, ip
    e5c6:	9306      	str	r3, [sp, #24]
    e5c8:	9b08      	ldr	r3, [sp, #32]
    e5ca:	469c      	mov	ip, r3
    e5cc:	4484      	add	ip, r0
    e5ce:	4663      	mov	r3, ip
    e5d0:	9308      	str	r3, [sp, #32]
    e5d2:	9b04      	ldr	r3, [sp, #16]
    e5d4:	469c      	mov	ip, r3
    e5d6:	4484      	add	ip, r0
    e5d8:	4663      	mov	r3, ip
    e5da:	9304      	str	r3, [sp, #16]
    e5dc:	e754      	b.n	e488 <_dtoa_r+0x7ec>
    e5de:	4649      	mov	r1, r9
    e5e0:	4658      	mov	r0, fp
    e5e2:	f001 fd67 	bl	100b4 <__mcmp>
    e5e6:	2800      	cmp	r0, #0
    e5e8:	db00      	blt.n	e5ec <_dtoa_r+0x950>
    e5ea:	e763      	b.n	e4b4 <_dtoa_r+0x818>
    e5ec:	9b03      	ldr	r3, [sp, #12]
    e5ee:	4659      	mov	r1, fp
    e5f0:	3b01      	subs	r3, #1
    e5f2:	9303      	str	r3, [sp, #12]
    e5f4:	220a      	movs	r2, #10
    e5f6:	2300      	movs	r3, #0
    e5f8:	4650      	mov	r0, sl
    e5fa:	f001 fb59 	bl	fcb0 <__multadd>
    e5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e600:	4683      	mov	fp, r0
    e602:	2b00      	cmp	r3, #0
    e604:	d000      	beq.n	e608 <_dtoa_r+0x96c>
    e606:	e2ca      	b.n	eb9e <_dtoa_r+0xf02>
    e608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e60a:	2b00      	cmp	r3, #0
    e60c:	dc00      	bgt.n	e610 <_dtoa_r+0x974>
    e60e:	e2d8      	b.n	ebc2 <_dtoa_r+0xf26>
    e610:	9307      	str	r3, [sp, #28]
    e612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e614:	465d      	mov	r5, fp
    e616:	2400      	movs	r4, #0
    e618:	9f07      	ldr	r7, [sp, #28]
    e61a:	469b      	mov	fp, r3
    e61c:	e006      	b.n	e62c <_dtoa_r+0x990>
    e61e:	0029      	movs	r1, r5
    e620:	2300      	movs	r3, #0
    e622:	220a      	movs	r2, #10
    e624:	4650      	mov	r0, sl
    e626:	f001 fb43 	bl	fcb0 <__multadd>
    e62a:	0005      	movs	r5, r0
    e62c:	4649      	mov	r1, r9
    e62e:	0028      	movs	r0, r5
    e630:	f7ff fa8a 	bl	db48 <quorem>
    e634:	465b      	mov	r3, fp
    e636:	3030      	adds	r0, #48	; 0x30
    e638:	5518      	strb	r0, [r3, r4]
    e63a:	3401      	adds	r4, #1
    e63c:	42bc      	cmp	r4, r7
    e63e:	dbee      	blt.n	e61e <_dtoa_r+0x982>
    e640:	46ab      	mov	fp, r5
    e642:	0006      	movs	r6, r0
    e644:	9c07      	ldr	r4, [sp, #28]
    e646:	2c00      	cmp	r4, #0
    e648:	dc00      	bgt.n	e64c <_dtoa_r+0x9b0>
    e64a:	e237      	b.n	eabc <_dtoa_r+0xe20>
    e64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e64e:	2700      	movs	r7, #0
    e650:	469c      	mov	ip, r3
    e652:	4464      	add	r4, ip
    e654:	4659      	mov	r1, fp
    e656:	2201      	movs	r2, #1
    e658:	4650      	mov	r0, sl
    e65a:	f001 fccb 	bl	fff4 <__lshift>
    e65e:	4649      	mov	r1, r9
    e660:	4683      	mov	fp, r0
    e662:	f001 fd27 	bl	100b4 <__mcmp>
    e666:	2800      	cmp	r0, #0
    e668:	dc00      	bgt.n	e66c <_dtoa_r+0x9d0>
    e66a:	e144      	b.n	e8f6 <_dtoa_r+0xc5a>
    e66c:	1e65      	subs	r5, r4, #1
    e66e:	782b      	ldrb	r3, [r5, #0]
    e670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e672:	e006      	b.n	e682 <_dtoa_r+0x9e6>
    e674:	4295      	cmp	r5, r2
    e676:	d100      	bne.n	e67a <_dtoa_r+0x9de>
    e678:	e0b1      	b.n	e7de <_dtoa_r+0xb42>
    e67a:	3c02      	subs	r4, #2
    e67c:	7823      	ldrb	r3, [r4, #0]
    e67e:	002c      	movs	r4, r5
    e680:	3d01      	subs	r5, #1
    e682:	2b39      	cmp	r3, #57	; 0x39
    e684:	d0f6      	beq.n	e674 <_dtoa_r+0x9d8>
    e686:	3301      	adds	r3, #1
    e688:	702b      	strb	r3, [r5, #0]
    e68a:	4649      	mov	r1, r9
    e68c:	4650      	mov	r0, sl
    e68e:	f001 fb05 	bl	fc9c <_Bfree>
    e692:	4643      	mov	r3, r8
    e694:	2b00      	cmp	r3, #0
    e696:	d100      	bne.n	e69a <_dtoa_r+0x9fe>
    e698:	e52f      	b.n	e0fa <_dtoa_r+0x45e>
    e69a:	2f00      	cmp	r7, #0
    e69c:	d005      	beq.n	e6aa <_dtoa_r+0xa0e>
    e69e:	4547      	cmp	r7, r8
    e6a0:	d003      	beq.n	e6aa <_dtoa_r+0xa0e>
    e6a2:	0039      	movs	r1, r7
    e6a4:	4650      	mov	r0, sl
    e6a6:	f001 faf9 	bl	fc9c <_Bfree>
    e6aa:	4641      	mov	r1, r8
    e6ac:	4650      	mov	r0, sl
    e6ae:	f001 faf5 	bl	fc9c <_Bfree>
    e6b2:	e522      	b.n	e0fa <_dtoa_r+0x45e>
    e6b4:	0013      	movs	r3, r2
    e6b6:	e675      	b.n	e3a4 <_dtoa_r+0x708>
    e6b8:	2e00      	cmp	r6, #0
    e6ba:	d000      	beq.n	e6be <_dtoa_r+0xa22>
    e6bc:	e6ab      	b.n	e416 <_dtoa_r+0x77a>
    e6be:	033b      	lsls	r3, r7, #12
    e6c0:	2400      	movs	r4, #0
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	d000      	beq.n	e6c8 <_dtoa_r+0xa2c>
    e6c6:	e6bf      	b.n	e448 <_dtoa_r+0x7ac>
    e6c8:	4bba      	ldr	r3, [pc, #744]	; (e9b4 <_dtoa_r+0xd18>)
    e6ca:	423b      	tst	r3, r7
    e6cc:	d100      	bne.n	e6d0 <_dtoa_r+0xa34>
    e6ce:	e6bb      	b.n	e448 <_dtoa_r+0x7ac>
    e6d0:	9b06      	ldr	r3, [sp, #24]
    e6d2:	3401      	adds	r4, #1
    e6d4:	3301      	adds	r3, #1
    e6d6:	9306      	str	r3, [sp, #24]
    e6d8:	9b04      	ldr	r3, [sp, #16]
    e6da:	3301      	adds	r3, #1
    e6dc:	9304      	str	r3, [sp, #16]
    e6de:	e6b3      	b.n	e448 <_dtoa_r+0x7ac>
    e6e0:	2301      	movs	r3, #1
    e6e2:	930b      	str	r3, [sp, #44]	; 0x2c
    e6e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e6e6:	2b00      	cmp	r3, #0
    e6e8:	dc00      	bgt.n	e6ec <_dtoa_r+0xa50>
    e6ea:	e0d1      	b.n	e890 <_dtoa_r+0xbf4>
    e6ec:	001d      	movs	r5, r3
    e6ee:	4698      	mov	r8, r3
    e6f0:	930e      	str	r3, [sp, #56]	; 0x38
    e6f2:	9307      	str	r3, [sp, #28]
    e6f4:	f7ff fbc8 	bl	de88 <_dtoa_r+0x1ec>
    e6f8:	9b07      	ldr	r3, [sp, #28]
    e6fa:	2b00      	cmp	r3, #0
    e6fc:	dd00      	ble.n	e700 <_dtoa_r+0xa64>
    e6fe:	e553      	b.n	e1a8 <_dtoa_r+0x50c>
    e700:	d000      	beq.n	e704 <_dtoa_r+0xa68>
    e702:	e0ad      	b.n	e860 <_dtoa_r+0xbc4>
    e704:	9804      	ldr	r0, [sp, #16]
    e706:	9905      	ldr	r1, [sp, #20]
    e708:	2200      	movs	r2, #0
    e70a:	4bab      	ldr	r3, [pc, #684]	; (e9b8 <_dtoa_r+0xd1c>)
    e70c:	f7fc fce8 	bl	b0e0 <__aeabi_dmul>
    e710:	003b      	movs	r3, r7
    e712:	0032      	movs	r2, r6
    e714:	f7fa fd48 	bl	91a8 <__aeabi_dcmpge>
    e718:	2300      	movs	r3, #0
    e71a:	4699      	mov	r9, r3
    e71c:	4698      	mov	r8, r3
    e71e:	2800      	cmp	r0, #0
    e720:	d055      	beq.n	e7ce <_dtoa_r+0xb32>
    e722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e724:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e726:	43db      	mvns	r3, r3
    e728:	9303      	str	r3, [sp, #12]
    e72a:	4649      	mov	r1, r9
    e72c:	4650      	mov	r0, sl
    e72e:	f001 fab5 	bl	fc9c <_Bfree>
    e732:	4643      	mov	r3, r8
    e734:	2b00      	cmp	r3, #0
    e736:	d100      	bne.n	e73a <_dtoa_r+0xa9e>
    e738:	e4df      	b.n	e0fa <_dtoa_r+0x45e>
    e73a:	e7b6      	b.n	e6aa <_dtoa_r+0xa0e>
    e73c:	464a      	mov	r2, r9
    e73e:	4659      	mov	r1, fp
    e740:	4650      	mov	r0, sl
    e742:	f001 fbf7 	bl	ff34 <__pow5mult>
    e746:	4683      	mov	fp, r0
    e748:	e653      	b.n	e3f2 <_dtoa_r+0x756>
    e74a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e74c:	2a00      	cmp	r2, #0
    e74e:	d100      	bne.n	e752 <_dtoa_r+0xab6>
    e750:	e1b6      	b.n	eac0 <_dtoa_r+0xe24>
    e752:	4a9a      	ldr	r2, [pc, #616]	; (e9bc <_dtoa_r+0xd20>)
    e754:	464c      	mov	r4, r9
    e756:	4694      	mov	ip, r2
    e758:	9a06      	ldr	r2, [sp, #24]
    e75a:	4463      	add	r3, ip
    e75c:	9208      	str	r2, [sp, #32]
    e75e:	e5d5      	b.n	e30c <_dtoa_r+0x670>
    e760:	2e00      	cmp	r6, #0
    e762:	d000      	beq.n	e766 <_dtoa_r+0xaca>
    e764:	e670      	b.n	e448 <_dtoa_r+0x7ac>
    e766:	e7aa      	b.n	e6be <_dtoa_r+0xa22>
    e768:	f001 faa2 	bl	fcb0 <__multadd>
    e76c:	46a2      	mov	sl, r4
    e76e:	0005      	movs	r5, r0
    e770:	4680      	mov	r8, r0
    e772:	e6c7      	b.n	e504 <_dtoa_r+0x868>
    e774:	2301      	movs	r3, #1
    e776:	469b      	mov	fp, r3
    e778:	e6e2      	b.n	e540 <_dtoa_r+0x8a4>
    e77a:	2300      	movs	r3, #0
    e77c:	930b      	str	r3, [sp, #44]	; 0x2c
    e77e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e780:	2b02      	cmp	r3, #2
    e782:	d0af      	beq.n	e6e4 <_dtoa_r+0xa48>
    e784:	2400      	movs	r4, #0
    e786:	4653      	mov	r3, sl
    e788:	0021      	movs	r1, r4
    e78a:	645c      	str	r4, [r3, #68]	; 0x44
    e78c:	4650      	mov	r0, sl
    e78e:	f001 fa5d 	bl	fc4c <_Balloc>
    e792:	4653      	mov	r3, sl
    e794:	6418      	str	r0, [r3, #64]	; 0x40
    e796:	2301      	movs	r3, #1
    e798:	425b      	negs	r3, r3
    e79a:	9307      	str	r3, [sp, #28]
    e79c:	930e      	str	r3, [sp, #56]	; 0x38
    e79e:	3302      	adds	r3, #2
    e7a0:	900a      	str	r0, [sp, #40]	; 0x28
    e7a2:	9423      	str	r4, [sp, #140]	; 0x8c
    e7a4:	930b      	str	r3, [sp, #44]	; 0x2c
    e7a6:	e4ec      	b.n	e182 <_dtoa_r+0x4e6>
    e7a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e7aa:	2b02      	cmp	r3, #2
    e7ac:	dc00      	bgt.n	e7b0 <_dtoa_r+0xb14>
    e7ae:	e685      	b.n	e4bc <_dtoa_r+0x820>
    e7b0:	9b07      	ldr	r3, [sp, #28]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d1b5      	bne.n	e722 <_dtoa_r+0xa86>
    e7b6:	4649      	mov	r1, r9
    e7b8:	2205      	movs	r2, #5
    e7ba:	4650      	mov	r0, sl
    e7bc:	f001 fa78 	bl	fcb0 <__multadd>
    e7c0:	4681      	mov	r9, r0
    e7c2:	0001      	movs	r1, r0
    e7c4:	4658      	mov	r0, fp
    e7c6:	f001 fc75 	bl	100b4 <__mcmp>
    e7ca:	2800      	cmp	r0, #0
    e7cc:	dda9      	ble.n	e722 <_dtoa_r+0xa86>
    e7ce:	2331      	movs	r3, #49	; 0x31
    e7d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e7d2:	7013      	strb	r3, [r2, #0]
    e7d4:	9b03      	ldr	r3, [sp, #12]
    e7d6:	1c54      	adds	r4, r2, #1
    e7d8:	3301      	adds	r3, #1
    e7da:	9303      	str	r3, [sp, #12]
    e7dc:	e7a5      	b.n	e72a <_dtoa_r+0xa8e>
    e7de:	9b03      	ldr	r3, [sp, #12]
    e7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e7e2:	3301      	adds	r3, #1
    e7e4:	9303      	str	r3, [sp, #12]
    e7e6:	2331      	movs	r3, #49	; 0x31
    e7e8:	7013      	strb	r3, [r2, #0]
    e7ea:	e74e      	b.n	e68a <_dtoa_r+0x9ee>
    e7ec:	2300      	movs	r3, #0
    e7ee:	930b      	str	r3, [sp, #44]	; 0x2c
    e7f0:	f7ff fb3d 	bl	de6e <_dtoa_r+0x1d2>
    e7f4:	9b06      	ldr	r3, [sp, #24]
    e7f6:	465c      	mov	r4, fp
    e7f8:	469b      	mov	fp, r3
    e7fa:	9b07      	ldr	r3, [sp, #28]
    e7fc:	469a      	mov	sl, r3
    e7fe:	e47c      	b.n	e0fa <_dtoa_r+0x45e>
    e800:	4640      	mov	r0, r8
    e802:	f7fd fa57 	bl	bcb4 <__aeabi_i2d>
    e806:	0032      	movs	r2, r6
    e808:	003b      	movs	r3, r7
    e80a:	f7fc fc69 	bl	b0e0 <__aeabi_dmul>
    e80e:	2200      	movs	r2, #0
    e810:	4b6b      	ldr	r3, [pc, #428]	; (e9c0 <_dtoa_r+0xd24>)
    e812:	f7fb fd21 	bl	a258 <__aeabi_dadd>
    e816:	4a6b      	ldr	r2, [pc, #428]	; (e9c4 <_dtoa_r+0xd28>)
    e818:	000b      	movs	r3, r1
    e81a:	4694      	mov	ip, r2
    e81c:	4463      	add	r3, ip
    e81e:	9008      	str	r0, [sp, #32]
    e820:	9109      	str	r1, [sp, #36]	; 0x24
    e822:	9309      	str	r3, [sp, #36]	; 0x24
    e824:	2200      	movs	r2, #0
    e826:	4b64      	ldr	r3, [pc, #400]	; (e9b8 <_dtoa_r+0xd1c>)
    e828:	0030      	movs	r0, r6
    e82a:	0039      	movs	r1, r7
    e82c:	f7fc fed8 	bl	b5e0 <__aeabi_dsub>
    e830:	9e08      	ldr	r6, [sp, #32]
    e832:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e834:	0032      	movs	r2, r6
    e836:	003b      	movs	r3, r7
    e838:	0004      	movs	r4, r0
    e83a:	000d      	movs	r5, r1
    e83c:	f7fa fcaa 	bl	9194 <__aeabi_dcmpgt>
    e840:	2800      	cmp	r0, #0
    e842:	d000      	beq.n	e846 <_dtoa_r+0xbaa>
    e844:	e0b2      	b.n	e9ac <_dtoa_r+0xd10>
    e846:	2080      	movs	r0, #128	; 0x80
    e848:	0600      	lsls	r0, r0, #24
    e84a:	4684      	mov	ip, r0
    e84c:	0039      	movs	r1, r7
    e84e:	4461      	add	r1, ip
    e850:	000b      	movs	r3, r1
    e852:	0032      	movs	r2, r6
    e854:	0020      	movs	r0, r4
    e856:	0029      	movs	r1, r5
    e858:	f7fa fc88 	bl	916c <__aeabi_dcmplt>
    e85c:	2800      	cmp	r0, #0
    e85e:	d057      	beq.n	e910 <_dtoa_r+0xc74>
    e860:	2300      	movs	r3, #0
    e862:	4699      	mov	r9, r3
    e864:	4698      	mov	r8, r3
    e866:	e75c      	b.n	e722 <_dtoa_r+0xa86>
    e868:	980a      	ldr	r0, [sp, #40]	; 0x28
    e86a:	f7ff fa4c 	bl	dd06 <_dtoa_r+0x6a>
    e86e:	1ae2      	subs	r2, r4, r3
    e870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e872:	46a1      	mov	r9, r4
    e874:	469c      	mov	ip, r3
    e876:	4494      	add	ip, r2
    e878:	4663      	mov	r3, ip
    e87a:	2400      	movs	r4, #0
    e87c:	930d      	str	r3, [sp, #52]	; 0x34
    e87e:	e53e      	b.n	e2fe <_dtoa_r+0x662>
    e880:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e882:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e884:	9208      	str	r2, [sp, #32]
    e886:	9309      	str	r3, [sp, #36]	; 0x24
    e888:	2302      	movs	r3, #2
    e88a:	4698      	mov	r8, r3
    e88c:	f7ff fb3a 	bl	df04 <_dtoa_r+0x268>
    e890:	2300      	movs	r3, #0
    e892:	4652      	mov	r2, sl
    e894:	2100      	movs	r1, #0
    e896:	6453      	str	r3, [r2, #68]	; 0x44
    e898:	4650      	mov	r0, sl
    e89a:	f001 f9d7 	bl	fc4c <_Balloc>
    e89e:	4653      	mov	r3, sl
    e8a0:	6418      	str	r0, [r3, #64]	; 0x40
    e8a2:	2301      	movs	r3, #1
    e8a4:	900a      	str	r0, [sp, #40]	; 0x28
    e8a6:	9307      	str	r3, [sp, #28]
    e8a8:	9323      	str	r3, [sp, #140]	; 0x8c
    e8aa:	930e      	str	r3, [sp, #56]	; 0x38
    e8ac:	f7ff fb07 	bl	debe <_dtoa_r+0x222>
    e8b0:	4643      	mov	r3, r8
    e8b2:	930c      	str	r3, [sp, #48]	; 0x30
    e8b4:	465b      	mov	r3, fp
    e8b6:	9a06      	ldr	r2, [sp, #24]
    e8b8:	46a8      	mov	r8, r5
    e8ba:	46b3      	mov	fp, r6
    e8bc:	4655      	mov	r5, sl
    e8be:	9e04      	ldr	r6, [sp, #16]
    e8c0:	4691      	mov	r9, r2
    e8c2:	46ba      	mov	sl, r7
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	dd10      	ble.n	e8ea <_dtoa_r+0xc4e>
    e8c8:	4659      	mov	r1, fp
    e8ca:	2201      	movs	r2, #1
    e8cc:	0038      	movs	r0, r7
    e8ce:	f001 fb91 	bl	fff4 <__lshift>
    e8d2:	4649      	mov	r1, r9
    e8d4:	4683      	mov	fp, r0
    e8d6:	f001 fbed 	bl	100b4 <__mcmp>
    e8da:	2800      	cmp	r0, #0
    e8dc:	dc00      	bgt.n	e8e0 <_dtoa_r+0xc44>
    e8de:	e157      	b.n	eb90 <_dtoa_r+0xef4>
    e8e0:	2e39      	cmp	r6, #57	; 0x39
    e8e2:	d100      	bne.n	e8e6 <_dtoa_r+0xc4a>
    e8e4:	e122      	b.n	eb2c <_dtoa_r+0xe90>
    e8e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e8e8:	3631      	adds	r6, #49	; 0x31
    e8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e8ec:	4647      	mov	r7, r8
    e8ee:	1c6c      	adds	r4, r5, #1
    e8f0:	702e      	strb	r6, [r5, #0]
    e8f2:	4698      	mov	r8, r3
    e8f4:	e6c9      	b.n	e68a <_dtoa_r+0x9ee>
    e8f6:	2800      	cmp	r0, #0
    e8f8:	d103      	bne.n	e902 <_dtoa_r+0xc66>
    e8fa:	07f3      	lsls	r3, r6, #31
    e8fc:	d501      	bpl.n	e902 <_dtoa_r+0xc66>
    e8fe:	e6b5      	b.n	e66c <_dtoa_r+0x9d0>
    e900:	001c      	movs	r4, r3
    e902:	1e63      	subs	r3, r4, #1
    e904:	781a      	ldrb	r2, [r3, #0]
    e906:	2a30      	cmp	r2, #48	; 0x30
    e908:	d0fa      	beq.n	e900 <_dtoa_r+0xc64>
    e90a:	e6be      	b.n	e68a <_dtoa_r+0x9ee>
    e90c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e90e:	4699      	mov	r9, r3
    e910:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e912:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e914:	e435      	b.n	e182 <_dtoa_r+0x4e6>
    e916:	2501      	movs	r5, #1
    e918:	f7ff fab4 	bl	de84 <_dtoa_r+0x1e8>
    e91c:	9b03      	ldr	r3, [sp, #12]
    e91e:	2b00      	cmp	r3, #0
    e920:	d100      	bne.n	e924 <_dtoa_r+0xc88>
    e922:	e0d4      	b.n	eace <_dtoa_r+0xe32>
    e924:	9810      	ldr	r0, [sp, #64]	; 0x40
    e926:	9911      	ldr	r1, [sp, #68]	; 0x44
    e928:	425c      	negs	r4, r3
    e92a:	230f      	movs	r3, #15
    e92c:	4a26      	ldr	r2, [pc, #152]	; (e9c8 <_dtoa_r+0xd2c>)
    e92e:	4023      	ands	r3, r4
    e930:	00db      	lsls	r3, r3, #3
    e932:	18d3      	adds	r3, r2, r3
    e934:	681a      	ldr	r2, [r3, #0]
    e936:	685b      	ldr	r3, [r3, #4]
    e938:	f7fc fbd2 	bl	b0e0 <__aeabi_dmul>
    e93c:	1124      	asrs	r4, r4, #4
    e93e:	0006      	movs	r6, r0
    e940:	000f      	movs	r7, r1
    e942:	2c00      	cmp	r4, #0
    e944:	d100      	bne.n	e948 <_dtoa_r+0xcac>
    e946:	e149      	b.n	ebdc <_dtoa_r+0xf40>
    e948:	2302      	movs	r3, #2
    e94a:	4698      	mov	r8, r3
    e94c:	4d1f      	ldr	r5, [pc, #124]	; (e9cc <_dtoa_r+0xd30>)
    e94e:	2301      	movs	r3, #1
    e950:	4223      	tst	r3, r4
    e952:	d009      	beq.n	e968 <_dtoa_r+0xccc>
    e954:	469c      	mov	ip, r3
    e956:	682a      	ldr	r2, [r5, #0]
    e958:	686b      	ldr	r3, [r5, #4]
    e95a:	0030      	movs	r0, r6
    e95c:	0039      	movs	r1, r7
    e95e:	44e0      	add	r8, ip
    e960:	f7fc fbbe 	bl	b0e0 <__aeabi_dmul>
    e964:	0006      	movs	r6, r0
    e966:	000f      	movs	r7, r1
    e968:	1064      	asrs	r4, r4, #1
    e96a:	3508      	adds	r5, #8
    e96c:	2c00      	cmp	r4, #0
    e96e:	d1ee      	bne.n	e94e <_dtoa_r+0xcb2>
    e970:	f7ff fae4 	bl	df3c <_dtoa_r+0x2a0>
    e974:	9b03      	ldr	r3, [sp, #12]
    e976:	2730      	movs	r7, #48	; 0x30
    e978:	3301      	adds	r3, #1
    e97a:	9303      	str	r3, [sp, #12]
    e97c:	2330      	movs	r3, #48	; 0x30
    e97e:	702b      	strb	r3, [r5, #0]
    e980:	e4ac      	b.n	e2dc <_dtoa_r+0x640>
    e982:	6859      	ldr	r1, [r3, #4]
    e984:	4650      	mov	r0, sl
    e986:	f001 f961 	bl	fc4c <_Balloc>
    e98a:	4643      	mov	r3, r8
    e98c:	4641      	mov	r1, r8
    e98e:	0004      	movs	r4, r0
    e990:	691b      	ldr	r3, [r3, #16]
    e992:	310c      	adds	r1, #12
    e994:	1c9a      	adds	r2, r3, #2
    e996:	0092      	lsls	r2, r2, #2
    e998:	300c      	adds	r0, #12
    e99a:	f7fd fb5d 	bl	c058 <memcpy>
    e99e:	2201      	movs	r2, #1
    e9a0:	0021      	movs	r1, r4
    e9a2:	4650      	mov	r0, sl
    e9a4:	f001 fb26 	bl	fff4 <__lshift>
    e9a8:	900c      	str	r0, [sp, #48]	; 0x30
    e9aa:	e599      	b.n	e4e0 <_dtoa_r+0x844>
    e9ac:	2300      	movs	r3, #0
    e9ae:	4699      	mov	r9, r3
    e9b0:	4698      	mov	r8, r3
    e9b2:	e70c      	b.n	e7ce <_dtoa_r+0xb32>
    e9b4:	7ff00000 	.word	0x7ff00000
    e9b8:	40140000 	.word	0x40140000
    e9bc:	00000433 	.word	0x00000433
    e9c0:	401c0000 	.word	0x401c0000
    e9c4:	fcc00000 	.word	0xfcc00000
    e9c8:	00011640 	.word	0x00011640
    e9cc:	00011618 	.word	0x00011618
    e9d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e9d2:	498f      	ldr	r1, [pc, #572]	; (ec10 <_dtoa_r+0xf74>)
    e9d4:	3b01      	subs	r3, #1
    e9d6:	00db      	lsls	r3, r3, #3
    e9d8:	18c9      	adds	r1, r1, r3
    e9da:	6808      	ldr	r0, [r1, #0]
    e9dc:	6849      	ldr	r1, [r1, #4]
    e9de:	9a08      	ldr	r2, [sp, #32]
    e9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e9e2:	f7fc fb7d 	bl	b0e0 <__aeabi_dmul>
    e9e6:	9014      	str	r0, [sp, #80]	; 0x50
    e9e8:	9115      	str	r1, [sp, #84]	; 0x54
    e9ea:	0039      	movs	r1, r7
    e9ec:	0030      	movs	r0, r6
    e9ee:	f7fd f92d 	bl	bc4c <__aeabi_d2iz>
    e9f2:	0005      	movs	r5, r0
    e9f4:	f7fd f95e 	bl	bcb4 <__aeabi_i2d>
    e9f8:	0002      	movs	r2, r0
    e9fa:	000b      	movs	r3, r1
    e9fc:	0030      	movs	r0, r6
    e9fe:	0039      	movs	r1, r7
    ea00:	f7fc fdee 	bl	b5e0 <__aeabi_dsub>
    ea04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ea06:	9008      	str	r0, [sp, #32]
    ea08:	9109      	str	r1, [sp, #36]	; 0x24
    ea0a:	990a      	ldr	r1, [sp, #40]	; 0x28
    ea0c:	001a      	movs	r2, r3
    ea0e:	468c      	mov	ip, r1
    ea10:	3530      	adds	r5, #48	; 0x30
    ea12:	4462      	add	r2, ip
    ea14:	1c4c      	adds	r4, r1, #1
    ea16:	700d      	strb	r5, [r1, #0]
    ea18:	4690      	mov	r8, r2
    ea1a:	2b01      	cmp	r3, #1
    ea1c:	d01b      	beq.n	ea56 <_dtoa_r+0xdba>
    ea1e:	9808      	ldr	r0, [sp, #32]
    ea20:	9909      	ldr	r1, [sp, #36]	; 0x24
    ea22:	0025      	movs	r5, r4
    ea24:	2200      	movs	r2, #0
    ea26:	4b7b      	ldr	r3, [pc, #492]	; (ec14 <_dtoa_r+0xf78>)
    ea28:	f7fc fb5a 	bl	b0e0 <__aeabi_dmul>
    ea2c:	000f      	movs	r7, r1
    ea2e:	0006      	movs	r6, r0
    ea30:	f7fd f90c 	bl	bc4c <__aeabi_d2iz>
    ea34:	0004      	movs	r4, r0
    ea36:	f7fd f93d 	bl	bcb4 <__aeabi_i2d>
    ea3a:	3430      	adds	r4, #48	; 0x30
    ea3c:	0002      	movs	r2, r0
    ea3e:	000b      	movs	r3, r1
    ea40:	0030      	movs	r0, r6
    ea42:	0039      	movs	r1, r7
    ea44:	f7fc fdcc 	bl	b5e0 <__aeabi_dsub>
    ea48:	702c      	strb	r4, [r5, #0]
    ea4a:	3501      	adds	r5, #1
    ea4c:	45a8      	cmp	r8, r5
    ea4e:	d1e9      	bne.n	ea24 <_dtoa_r+0xd88>
    ea50:	4644      	mov	r4, r8
    ea52:	9008      	str	r0, [sp, #32]
    ea54:	9109      	str	r1, [sp, #36]	; 0x24
    ea56:	9814      	ldr	r0, [sp, #80]	; 0x50
    ea58:	9915      	ldr	r1, [sp, #84]	; 0x54
    ea5a:	2200      	movs	r2, #0
    ea5c:	4b6e      	ldr	r3, [pc, #440]	; (ec18 <_dtoa_r+0xf7c>)
    ea5e:	f7fb fbfb 	bl	a258 <__aeabi_dadd>
    ea62:	9a08      	ldr	r2, [sp, #32]
    ea64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea66:	f7fa fb81 	bl	916c <__aeabi_dcmplt>
    ea6a:	2800      	cmp	r0, #0
    ea6c:	d067      	beq.n	eb3e <_dtoa_r+0xea2>
    ea6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ea70:	1e65      	subs	r5, r4, #1
    ea72:	9303      	str	r3, [sp, #12]
    ea74:	782f      	ldrb	r7, [r5, #0]
    ea76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ea78:	e42e      	b.n	e2d8 <_dtoa_r+0x63c>
    ea7a:	4643      	mov	r3, r8
    ea7c:	46b3      	mov	fp, r6
    ea7e:	930c      	str	r3, [sp, #48]	; 0x30
    ea80:	9e04      	ldr	r6, [sp, #16]
    ea82:	9b06      	ldr	r3, [sp, #24]
    ea84:	46a8      	mov	r8, r5
    ea86:	4699      	mov	r9, r3
    ea88:	4655      	mov	r5, sl
    ea8a:	46ba      	mov	sl, r7
    ea8c:	2e39      	cmp	r6, #57	; 0x39
    ea8e:	d04d      	beq.n	eb2c <_dtoa_r+0xe90>
    ea90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea92:	3601      	adds	r6, #1
    ea94:	4647      	mov	r7, r8
    ea96:	1c6c      	adds	r4, r5, #1
    ea98:	702e      	strb	r6, [r5, #0]
    ea9a:	4698      	mov	r8, r3
    ea9c:	e5f5      	b.n	e68a <_dtoa_r+0x9ee>
    ea9e:	4642      	mov	r2, r8
    eaa0:	9b06      	ldr	r3, [sp, #24]
    eaa2:	46b3      	mov	fp, r6
    eaa4:	46ba      	mov	sl, r7
    eaa6:	9e04      	ldr	r6, [sp, #16]
    eaa8:	4699      	mov	r9, r3
    eaaa:	002f      	movs	r7, r5
    eaac:	4690      	mov	r8, r2
    eaae:	e5d1      	b.n	e654 <_dtoa_r+0x9b8>
    eab0:	9b06      	ldr	r3, [sp, #24]
    eab2:	9a07      	ldr	r2, [sp, #28]
    eab4:	1a9b      	subs	r3, r3, r2
    eab6:	9308      	str	r3, [sp, #32]
    eab8:	2300      	movs	r3, #0
    eaba:	e427      	b.n	e30c <_dtoa_r+0x670>
    eabc:	2401      	movs	r4, #1
    eabe:	e5c5      	b.n	e64c <_dtoa_r+0x9b0>
    eac0:	2336      	movs	r3, #54	; 0x36
    eac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    eac4:	464c      	mov	r4, r9
    eac6:	1a9b      	subs	r3, r3, r2
    eac8:	9a06      	ldr	r2, [sp, #24]
    eaca:	9208      	str	r2, [sp, #32]
    eacc:	e41e      	b.n	e30c <_dtoa_r+0x670>
    eace:	2302      	movs	r3, #2
    ead0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    ead2:	9f11      	ldr	r7, [sp, #68]	; 0x44
    ead4:	4698      	mov	r8, r3
    ead6:	f7ff fa31 	bl	df3c <_dtoa_r+0x2a0>
    eada:	9b07      	ldr	r3, [sp, #28]
    eadc:	2b00      	cmp	r3, #0
    eade:	d100      	bne.n	eae2 <_dtoa_r+0xe46>
    eae0:	e68e      	b.n	e800 <_dtoa_r+0xb64>
    eae2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    eae4:	2c00      	cmp	r4, #0
    eae6:	dc00      	bgt.n	eaea <_dtoa_r+0xe4e>
    eae8:	e712      	b.n	e910 <_dtoa_r+0xc74>
    eaea:	9b03      	ldr	r3, [sp, #12]
    eaec:	2200      	movs	r2, #0
    eaee:	3b01      	subs	r3, #1
    eaf0:	9313      	str	r3, [sp, #76]	; 0x4c
    eaf2:	0030      	movs	r0, r6
    eaf4:	4b47      	ldr	r3, [pc, #284]	; (ec14 <_dtoa_r+0xf78>)
    eaf6:	0039      	movs	r1, r7
    eaf8:	f7fc faf2 	bl	b0e0 <__aeabi_dmul>
    eafc:	0006      	movs	r6, r0
    eafe:	4640      	mov	r0, r8
    eb00:	000f      	movs	r7, r1
    eb02:	3001      	adds	r0, #1
    eb04:	f7fd f8d6 	bl	bcb4 <__aeabi_i2d>
    eb08:	0032      	movs	r2, r6
    eb0a:	003b      	movs	r3, r7
    eb0c:	f7fc fae8 	bl	b0e0 <__aeabi_dmul>
    eb10:	2200      	movs	r2, #0
    eb12:	4b42      	ldr	r3, [pc, #264]	; (ec1c <_dtoa_r+0xf80>)
    eb14:	f7fb fba0 	bl	a258 <__aeabi_dadd>
    eb18:	4a41      	ldr	r2, [pc, #260]	; (ec20 <_dtoa_r+0xf84>)
    eb1a:	000b      	movs	r3, r1
    eb1c:	4694      	mov	ip, r2
    eb1e:	4463      	add	r3, ip
    eb20:	9008      	str	r0, [sp, #32]
    eb22:	9109      	str	r1, [sp, #36]	; 0x24
    eb24:	9412      	str	r4, [sp, #72]	; 0x48
    eb26:	9309      	str	r3, [sp, #36]	; 0x24
    eb28:	f7ff fa30 	bl	df8c <_dtoa_r+0x2f0>
    eb2c:	2339      	movs	r3, #57	; 0x39
    eb2e:	702b      	strb	r3, [r5, #0]
    eb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eb32:	4647      	mov	r7, r8
    eb34:	1c6c      	adds	r4, r5, #1
    eb36:	4698      	mov	r8, r3
    eb38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eb3a:	2339      	movs	r3, #57	; 0x39
    eb3c:	e5a1      	b.n	e682 <_dtoa_r+0x9e6>
    eb3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    eb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
    eb42:	2000      	movs	r0, #0
    eb44:	4934      	ldr	r1, [pc, #208]	; (ec18 <_dtoa_r+0xf7c>)
    eb46:	f7fc fd4b 	bl	b5e0 <__aeabi_dsub>
    eb4a:	9a08      	ldr	r2, [sp, #32]
    eb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb4e:	f7fa fb21 	bl	9194 <__aeabi_dcmpgt>
    eb52:	2800      	cmp	r0, #0
    eb54:	d101      	bne.n	eb5a <_dtoa_r+0xebe>
    eb56:	e6db      	b.n	e910 <_dtoa_r+0xc74>
    eb58:	001c      	movs	r4, r3
    eb5a:	1e63      	subs	r3, r4, #1
    eb5c:	781a      	ldrb	r2, [r3, #0]
    eb5e:	2a30      	cmp	r2, #48	; 0x30
    eb60:	d0fa      	beq.n	eb58 <_dtoa_r+0xebc>
    eb62:	f7ff fac8 	bl	e0f6 <_dtoa_r+0x45a>
    eb66:	4643      	mov	r3, r8
    eb68:	46b3      	mov	fp, r6
    eb6a:	930c      	str	r3, [sp, #48]	; 0x30
    eb6c:	9e04      	ldr	r6, [sp, #16]
    eb6e:	9b06      	ldr	r3, [sp, #24]
    eb70:	46a8      	mov	r8, r5
    eb72:	4699      	mov	r9, r3
    eb74:	4655      	mov	r5, sl
    eb76:	46ba      	mov	sl, r7
    eb78:	2e39      	cmp	r6, #57	; 0x39
    eb7a:	d0d7      	beq.n	eb2c <_dtoa_r+0xe90>
    eb7c:	2c00      	cmp	r4, #0
    eb7e:	dd00      	ble.n	eb82 <_dtoa_r+0xee6>
    eb80:	e6b1      	b.n	e8e6 <_dtoa_r+0xc4a>
    eb82:	e6b2      	b.n	e8ea <_dtoa_r+0xc4e>
    eb84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eb86:	464d      	mov	r5, r9
    eb88:	9203      	str	r2, [sp, #12]
    eb8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb8c:	f7ff fba4 	bl	e2d8 <_dtoa_r+0x63c>
    eb90:	2800      	cmp	r0, #0
    eb92:	d000      	beq.n	eb96 <_dtoa_r+0xefa>
    eb94:	e6a9      	b.n	e8ea <_dtoa_r+0xc4e>
    eb96:	07f3      	lsls	r3, r6, #31
    eb98:	d400      	bmi.n	eb9c <_dtoa_r+0xf00>
    eb9a:	e6a6      	b.n	e8ea <_dtoa_r+0xc4e>
    eb9c:	e6a0      	b.n	e8e0 <_dtoa_r+0xc44>
    eb9e:	2300      	movs	r3, #0
    eba0:	4641      	mov	r1, r8
    eba2:	220a      	movs	r2, #10
    eba4:	4650      	mov	r0, sl
    eba6:	f001 f883 	bl	fcb0 <__multadd>
    ebaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebac:	4680      	mov	r8, r0
    ebae:	2b00      	cmp	r3, #0
    ebb0:	dd01      	ble.n	ebb6 <_dtoa_r+0xf1a>
    ebb2:	9307      	str	r3, [sp, #28]
    ebb4:	e486      	b.n	e4c4 <_dtoa_r+0x828>
    ebb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ebb8:	2b02      	cmp	r3, #2
    ebba:	dc1f      	bgt.n	ebfc <_dtoa_r+0xf60>
    ebbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebbe:	9307      	str	r3, [sp, #28]
    ebc0:	e480      	b.n	e4c4 <_dtoa_r+0x828>
    ebc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ebc4:	2b02      	cmp	r3, #2
    ebc6:	dc19      	bgt.n	ebfc <_dtoa_r+0xf60>
    ebc8:	4649      	mov	r1, r9
    ebca:	f7fe ffbd 	bl	db48 <quorem>
    ebce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ebd0:	3030      	adds	r0, #48	; 0x30
    ebd2:	7018      	strb	r0, [r3, #0]
    ebd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebd6:	0006      	movs	r6, r0
    ebd8:	9307      	str	r3, [sp, #28]
    ebda:	e533      	b.n	e644 <_dtoa_r+0x9a8>
    ebdc:	2302      	movs	r3, #2
    ebde:	4698      	mov	r8, r3
    ebe0:	f7ff f9ac 	bl	df3c <_dtoa_r+0x2a0>
    ebe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ebe6:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ebe8:	9303      	str	r3, [sp, #12]
    ebea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ebec:	001d      	movs	r5, r3
    ebee:	f7ff fb73 	bl	e2d8 <_dtoa_r+0x63c>
    ebf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ebf4:	9c14      	ldr	r4, [sp, #80]	; 0x50
    ebf6:	9303      	str	r3, [sp, #12]
    ebf8:	f7ff fa7f 	bl	e0fa <_dtoa_r+0x45e>
    ebfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebfe:	9307      	str	r3, [sp, #28]
    ec00:	e5d6      	b.n	e7b0 <_dtoa_r+0xb14>
    ec02:	2b04      	cmp	r3, #4
    ec04:	d100      	bne.n	ec08 <_dtoa_r+0xf6c>
    ec06:	e43f      	b.n	e488 <_dtoa_r+0x7ec>
    ec08:	233c      	movs	r3, #60	; 0x3c
    ec0a:	1a18      	subs	r0, r3, r0
    ec0c:	e4d7      	b.n	e5be <_dtoa_r+0x922>
    ec0e:	46c0      	nop			; (mov r8, r8)
    ec10:	00011640 	.word	0x00011640
    ec14:	40240000 	.word	0x40240000
    ec18:	3fe00000 	.word	0x3fe00000
    ec1c:	401c0000 	.word	0x401c0000
    ec20:	fcc00000 	.word	0xfcc00000

0000ec24 <__sflush_r>:
    ec24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec26:	46c6      	mov	lr, r8
    ec28:	b500      	push	{lr}
    ec2a:	230c      	movs	r3, #12
    ec2c:	5eca      	ldrsh	r2, [r1, r3]
    ec2e:	4680      	mov	r8, r0
    ec30:	b293      	uxth	r3, r2
    ec32:	000c      	movs	r4, r1
    ec34:	0719      	lsls	r1, r3, #28
    ec36:	d440      	bmi.n	ecba <__sflush_r+0x96>
    ec38:	2380      	movs	r3, #128	; 0x80
    ec3a:	011b      	lsls	r3, r3, #4
    ec3c:	4313      	orrs	r3, r2
    ec3e:	6862      	ldr	r2, [r4, #4]
    ec40:	81a3      	strh	r3, [r4, #12]
    ec42:	2a00      	cmp	r2, #0
    ec44:	dc00      	bgt.n	ec48 <__sflush_r+0x24>
    ec46:	e070      	b.n	ed2a <__sflush_r+0x106>
    ec48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ec4a:	2e00      	cmp	r6, #0
    ec4c:	d031      	beq.n	ecb2 <__sflush_r+0x8e>
    ec4e:	4642      	mov	r2, r8
    ec50:	4641      	mov	r1, r8
    ec52:	6815      	ldr	r5, [r2, #0]
    ec54:	2200      	movs	r2, #0
    ec56:	b29b      	uxth	r3, r3
    ec58:	600a      	str	r2, [r1, #0]
    ec5a:	04da      	lsls	r2, r3, #19
    ec5c:	d400      	bmi.n	ec60 <__sflush_r+0x3c>
    ec5e:	e069      	b.n	ed34 <__sflush_r+0x110>
    ec60:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ec62:	075b      	lsls	r3, r3, #29
    ec64:	d506      	bpl.n	ec74 <__sflush_r+0x50>
    ec66:	6863      	ldr	r3, [r4, #4]
    ec68:	1ad2      	subs	r2, r2, r3
    ec6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	d001      	beq.n	ec74 <__sflush_r+0x50>
    ec70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ec72:	1ad2      	subs	r2, r2, r3
    ec74:	2300      	movs	r3, #0
    ec76:	69e1      	ldr	r1, [r4, #28]
    ec78:	4640      	mov	r0, r8
    ec7a:	47b0      	blx	r6
    ec7c:	1c43      	adds	r3, r0, #1
    ec7e:	d03d      	beq.n	ecfc <__sflush_r+0xd8>
    ec80:	89a3      	ldrh	r3, [r4, #12]
    ec82:	4a3a      	ldr	r2, [pc, #232]	; (ed6c <__sflush_r+0x148>)
    ec84:	4013      	ands	r3, r2
    ec86:	2200      	movs	r2, #0
    ec88:	6062      	str	r2, [r4, #4]
    ec8a:	6922      	ldr	r2, [r4, #16]
    ec8c:	b21b      	sxth	r3, r3
    ec8e:	81a3      	strh	r3, [r4, #12]
    ec90:	6022      	str	r2, [r4, #0]
    ec92:	04db      	lsls	r3, r3, #19
    ec94:	d447      	bmi.n	ed26 <__sflush_r+0x102>
    ec96:	4643      	mov	r3, r8
    ec98:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ec9a:	601d      	str	r5, [r3, #0]
    ec9c:	2900      	cmp	r1, #0
    ec9e:	d008      	beq.n	ecb2 <__sflush_r+0x8e>
    eca0:	0023      	movs	r3, r4
    eca2:	3340      	adds	r3, #64	; 0x40
    eca4:	4299      	cmp	r1, r3
    eca6:	d002      	beq.n	ecae <__sflush_r+0x8a>
    eca8:	4640      	mov	r0, r8
    ecaa:	f000 f967 	bl	ef7c <_free_r>
    ecae:	2300      	movs	r3, #0
    ecb0:	6323      	str	r3, [r4, #48]	; 0x30
    ecb2:	2000      	movs	r0, #0
    ecb4:	bc04      	pop	{r2}
    ecb6:	4690      	mov	r8, r2
    ecb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecba:	6926      	ldr	r6, [r4, #16]
    ecbc:	2e00      	cmp	r6, #0
    ecbe:	d0f8      	beq.n	ecb2 <__sflush_r+0x8e>
    ecc0:	6822      	ldr	r2, [r4, #0]
    ecc2:	6026      	str	r6, [r4, #0]
    ecc4:	1b95      	subs	r5, r2, r6
    ecc6:	2200      	movs	r2, #0
    ecc8:	079b      	lsls	r3, r3, #30
    ecca:	d100      	bne.n	ecce <__sflush_r+0xaa>
    eccc:	6962      	ldr	r2, [r4, #20]
    ecce:	60a2      	str	r2, [r4, #8]
    ecd0:	2d00      	cmp	r5, #0
    ecd2:	dc04      	bgt.n	ecde <__sflush_r+0xba>
    ecd4:	e7ed      	b.n	ecb2 <__sflush_r+0x8e>
    ecd6:	1836      	adds	r6, r6, r0
    ecd8:	1a2d      	subs	r5, r5, r0
    ecda:	2d00      	cmp	r5, #0
    ecdc:	dde9      	ble.n	ecb2 <__sflush_r+0x8e>
    ecde:	002b      	movs	r3, r5
    ece0:	0032      	movs	r2, r6
    ece2:	69e1      	ldr	r1, [r4, #28]
    ece4:	4640      	mov	r0, r8
    ece6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ece8:	47b8      	blx	r7
    ecea:	2800      	cmp	r0, #0
    ecec:	dcf3      	bgt.n	ecd6 <__sflush_r+0xb2>
    ecee:	2240      	movs	r2, #64	; 0x40
    ecf0:	2001      	movs	r0, #1
    ecf2:	89a3      	ldrh	r3, [r4, #12]
    ecf4:	4240      	negs	r0, r0
    ecf6:	4313      	orrs	r3, r2
    ecf8:	81a3      	strh	r3, [r4, #12]
    ecfa:	e7db      	b.n	ecb4 <__sflush_r+0x90>
    ecfc:	4643      	mov	r3, r8
    ecfe:	6819      	ldr	r1, [r3, #0]
    ed00:	291d      	cmp	r1, #29
    ed02:	d8f4      	bhi.n	ecee <__sflush_r+0xca>
    ed04:	4b1a      	ldr	r3, [pc, #104]	; (ed70 <__sflush_r+0x14c>)
    ed06:	2201      	movs	r2, #1
    ed08:	40cb      	lsrs	r3, r1
    ed0a:	439a      	bics	r2, r3
    ed0c:	d1ef      	bne.n	ecee <__sflush_r+0xca>
    ed0e:	89a3      	ldrh	r3, [r4, #12]
    ed10:	4e16      	ldr	r6, [pc, #88]	; (ed6c <__sflush_r+0x148>)
    ed12:	6062      	str	r2, [r4, #4]
    ed14:	4033      	ands	r3, r6
    ed16:	6922      	ldr	r2, [r4, #16]
    ed18:	b21b      	sxth	r3, r3
    ed1a:	81a3      	strh	r3, [r4, #12]
    ed1c:	6022      	str	r2, [r4, #0]
    ed1e:	04db      	lsls	r3, r3, #19
    ed20:	d5b9      	bpl.n	ec96 <__sflush_r+0x72>
    ed22:	2900      	cmp	r1, #0
    ed24:	d1b7      	bne.n	ec96 <__sflush_r+0x72>
    ed26:	6520      	str	r0, [r4, #80]	; 0x50
    ed28:	e7b5      	b.n	ec96 <__sflush_r+0x72>
    ed2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    ed2c:	2a00      	cmp	r2, #0
    ed2e:	dd00      	ble.n	ed32 <__sflush_r+0x10e>
    ed30:	e78a      	b.n	ec48 <__sflush_r+0x24>
    ed32:	e7be      	b.n	ecb2 <__sflush_r+0x8e>
    ed34:	2200      	movs	r2, #0
    ed36:	2301      	movs	r3, #1
    ed38:	69e1      	ldr	r1, [r4, #28]
    ed3a:	4640      	mov	r0, r8
    ed3c:	47b0      	blx	r6
    ed3e:	0002      	movs	r2, r0
    ed40:	1c43      	adds	r3, r0, #1
    ed42:	d002      	beq.n	ed4a <__sflush_r+0x126>
    ed44:	89a3      	ldrh	r3, [r4, #12]
    ed46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ed48:	e78b      	b.n	ec62 <__sflush_r+0x3e>
    ed4a:	4643      	mov	r3, r8
    ed4c:	681b      	ldr	r3, [r3, #0]
    ed4e:	2b00      	cmp	r3, #0
    ed50:	d0f8      	beq.n	ed44 <__sflush_r+0x120>
    ed52:	2b1d      	cmp	r3, #29
    ed54:	d001      	beq.n	ed5a <__sflush_r+0x136>
    ed56:	2b16      	cmp	r3, #22
    ed58:	d103      	bne.n	ed62 <__sflush_r+0x13e>
    ed5a:	4643      	mov	r3, r8
    ed5c:	2000      	movs	r0, #0
    ed5e:	601d      	str	r5, [r3, #0]
    ed60:	e7a8      	b.n	ecb4 <__sflush_r+0x90>
    ed62:	2140      	movs	r1, #64	; 0x40
    ed64:	89a3      	ldrh	r3, [r4, #12]
    ed66:	430b      	orrs	r3, r1
    ed68:	81a3      	strh	r3, [r4, #12]
    ed6a:	e7a3      	b.n	ecb4 <__sflush_r+0x90>
    ed6c:	fffff7ff 	.word	0xfffff7ff
    ed70:	20400001 	.word	0x20400001

0000ed74 <_fflush_r>:
    ed74:	b570      	push	{r4, r5, r6, lr}
    ed76:	0005      	movs	r5, r0
    ed78:	000c      	movs	r4, r1
    ed7a:	2800      	cmp	r0, #0
    ed7c:	d002      	beq.n	ed84 <_fflush_r+0x10>
    ed7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ed80:	2b00      	cmp	r3, #0
    ed82:	d016      	beq.n	edb2 <_fflush_r+0x3e>
    ed84:	220c      	movs	r2, #12
    ed86:	5ea3      	ldrsh	r3, [r4, r2]
    ed88:	2600      	movs	r6, #0
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	d00f      	beq.n	edae <_fflush_r+0x3a>
    ed8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ed90:	07d2      	lsls	r2, r2, #31
    ed92:	d401      	bmi.n	ed98 <_fflush_r+0x24>
    ed94:	059b      	lsls	r3, r3, #22
    ed96:	d513      	bpl.n	edc0 <_fflush_r+0x4c>
    ed98:	0021      	movs	r1, r4
    ed9a:	0028      	movs	r0, r5
    ed9c:	f7ff ff42 	bl	ec24 <__sflush_r>
    eda0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    eda2:	0006      	movs	r6, r0
    eda4:	07db      	lsls	r3, r3, #31
    eda6:	d402      	bmi.n	edae <_fflush_r+0x3a>
    eda8:	89a3      	ldrh	r3, [r4, #12]
    edaa:	059b      	lsls	r3, r3, #22
    edac:	d504      	bpl.n	edb8 <_fflush_r+0x44>
    edae:	0030      	movs	r0, r6
    edb0:	bd70      	pop	{r4, r5, r6, pc}
    edb2:	f000 f839 	bl	ee28 <__sinit>
    edb6:	e7e5      	b.n	ed84 <_fflush_r+0x10>
    edb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    edba:	f000 fb79 	bl	f4b0 <__retarget_lock_release_recursive>
    edbe:	e7f6      	b.n	edae <_fflush_r+0x3a>
    edc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    edc2:	f000 fb73 	bl	f4ac <__retarget_lock_acquire_recursive>
    edc6:	e7e7      	b.n	ed98 <_fflush_r+0x24>

0000edc8 <_cleanup_r>:
    edc8:	b510      	push	{r4, lr}
    edca:	4902      	ldr	r1, [pc, #8]	; (edd4 <_cleanup_r+0xc>)
    edcc:	f000 fb36 	bl	f43c <_fwalk_reent>
    edd0:	bd10      	pop	{r4, pc}
    edd2:	46c0      	nop			; (mov r8, r8)
    edd4:	00010855 	.word	0x00010855

0000edd8 <std.isra.0>:
    edd8:	2300      	movs	r3, #0
    edda:	b510      	push	{r4, lr}
    eddc:	0004      	movs	r4, r0
    edde:	6003      	str	r3, [r0, #0]
    ede0:	6043      	str	r3, [r0, #4]
    ede2:	6083      	str	r3, [r0, #8]
    ede4:	8181      	strh	r1, [r0, #12]
    ede6:	6643      	str	r3, [r0, #100]	; 0x64
    ede8:	81c2      	strh	r2, [r0, #14]
    edea:	6103      	str	r3, [r0, #16]
    edec:	6143      	str	r3, [r0, #20]
    edee:	6183      	str	r3, [r0, #24]
    edf0:	2208      	movs	r2, #8
    edf2:	2100      	movs	r1, #0
    edf4:	305c      	adds	r0, #92	; 0x5c
    edf6:	f7fd f971 	bl	c0dc <memset>
    edfa:	0020      	movs	r0, r4
    edfc:	4b06      	ldr	r3, [pc, #24]	; (ee18 <std.isra.0+0x40>)
    edfe:	61e4      	str	r4, [r4, #28]
    ee00:	6223      	str	r3, [r4, #32]
    ee02:	4b06      	ldr	r3, [pc, #24]	; (ee1c <std.isra.0+0x44>)
    ee04:	3058      	adds	r0, #88	; 0x58
    ee06:	6263      	str	r3, [r4, #36]	; 0x24
    ee08:	4b05      	ldr	r3, [pc, #20]	; (ee20 <std.isra.0+0x48>)
    ee0a:	62a3      	str	r3, [r4, #40]	; 0x28
    ee0c:	4b05      	ldr	r3, [pc, #20]	; (ee24 <std.isra.0+0x4c>)
    ee0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    ee10:	f000 fb48 	bl	f4a4 <__retarget_lock_init_recursive>
    ee14:	bd10      	pop	{r4, pc}
    ee16:	46c0      	nop			; (mov r8, r8)
    ee18:	0001067d 	.word	0x0001067d
    ee1c:	000106a5 	.word	0x000106a5
    ee20:	000106e1 	.word	0x000106e1
    ee24:	0001070d 	.word	0x0001070d

0000ee28 <__sinit>:
    ee28:	b570      	push	{r4, r5, r6, lr}
    ee2a:	0004      	movs	r4, r0
    ee2c:	4d14      	ldr	r5, [pc, #80]	; (ee80 <__sinit+0x58>)
    ee2e:	0028      	movs	r0, r5
    ee30:	f000 fb3c 	bl	f4ac <__retarget_lock_acquire_recursive>
    ee34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ee36:	2b00      	cmp	r3, #0
    ee38:	d11d      	bne.n	ee76 <__sinit+0x4e>
    ee3a:	4a12      	ldr	r2, [pc, #72]	; (ee84 <__sinit+0x5c>)
    ee3c:	2104      	movs	r1, #4
    ee3e:	63e2      	str	r2, [r4, #60]	; 0x3c
    ee40:	22b8      	movs	r2, #184	; 0xb8
    ee42:	0092      	lsls	r2, r2, #2
    ee44:	50a3      	str	r3, [r4, r2]
    ee46:	23b9      	movs	r3, #185	; 0xb9
    ee48:	2203      	movs	r2, #3
    ee4a:	009b      	lsls	r3, r3, #2
    ee4c:	50e2      	str	r2, [r4, r3]
    ee4e:	3308      	adds	r3, #8
    ee50:	18e2      	adds	r2, r4, r3
    ee52:	3b04      	subs	r3, #4
    ee54:	50e2      	str	r2, [r4, r3]
    ee56:	6860      	ldr	r0, [r4, #4]
    ee58:	2200      	movs	r2, #0
    ee5a:	f7ff ffbd 	bl	edd8 <std.isra.0>
    ee5e:	2201      	movs	r2, #1
    ee60:	2109      	movs	r1, #9
    ee62:	68a0      	ldr	r0, [r4, #8]
    ee64:	f7ff ffb8 	bl	edd8 <std.isra.0>
    ee68:	2202      	movs	r2, #2
    ee6a:	2112      	movs	r1, #18
    ee6c:	68e0      	ldr	r0, [r4, #12]
    ee6e:	f7ff ffb3 	bl	edd8 <std.isra.0>
    ee72:	2301      	movs	r3, #1
    ee74:	63a3      	str	r3, [r4, #56]	; 0x38
    ee76:	0028      	movs	r0, r5
    ee78:	f000 fb1a 	bl	f4b0 <__retarget_lock_release_recursive>
    ee7c:	bd70      	pop	{r4, r5, r6, pc}
    ee7e:	46c0      	nop			; (mov r8, r8)
    ee80:	200015a8 	.word	0x200015a8
    ee84:	0000edc9 	.word	0x0000edc9

0000ee88 <__sfp_lock_acquire>:
    ee88:	b510      	push	{r4, lr}
    ee8a:	4802      	ldr	r0, [pc, #8]	; (ee94 <__sfp_lock_acquire+0xc>)
    ee8c:	f000 fb0e 	bl	f4ac <__retarget_lock_acquire_recursive>
    ee90:	bd10      	pop	{r4, pc}
    ee92:	46c0      	nop			; (mov r8, r8)
    ee94:	200015bc 	.word	0x200015bc

0000ee98 <__sfp_lock_release>:
    ee98:	b510      	push	{r4, lr}
    ee9a:	4802      	ldr	r0, [pc, #8]	; (eea4 <__sfp_lock_release+0xc>)
    ee9c:	f000 fb08 	bl	f4b0 <__retarget_lock_release_recursive>
    eea0:	bd10      	pop	{r4, pc}
    eea2:	46c0      	nop			; (mov r8, r8)
    eea4:	200015bc 	.word	0x200015bc

0000eea8 <__libc_fini_array>:
    eea8:	b570      	push	{r4, r5, r6, lr}
    eeaa:	4b09      	ldr	r3, [pc, #36]	; (eed0 <__libc_fini_array+0x28>)
    eeac:	4c09      	ldr	r4, [pc, #36]	; (eed4 <__libc_fini_array+0x2c>)
    eeae:	1ae4      	subs	r4, r4, r3
    eeb0:	10a4      	asrs	r4, r4, #2
    eeb2:	d009      	beq.n	eec8 <__libc_fini_array+0x20>
    eeb4:	4a08      	ldr	r2, [pc, #32]	; (eed8 <__libc_fini_array+0x30>)
    eeb6:	18a5      	adds	r5, r4, r2
    eeb8:	00ad      	lsls	r5, r5, #2
    eeba:	18ed      	adds	r5, r5, r3
    eebc:	682b      	ldr	r3, [r5, #0]
    eebe:	3c01      	subs	r4, #1
    eec0:	4798      	blx	r3
    eec2:	3d04      	subs	r5, #4
    eec4:	2c00      	cmp	r4, #0
    eec6:	d1f9      	bne.n	eebc <__libc_fini_array+0x14>
    eec8:	f002 fcc4 	bl	11854 <_fini>
    eecc:	bd70      	pop	{r4, r5, r6, pc}
    eece:	46c0      	nop			; (mov r8, r8)
    eed0:	00011860 	.word	0x00011860
    eed4:	00011864 	.word	0x00011864
    eed8:	3fffffff 	.word	0x3fffffff

0000eedc <_malloc_trim_r>:
    eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eede:	000c      	movs	r4, r1
    eee0:	0006      	movs	r6, r0
    eee2:	f000 fea3 	bl	fc2c <__malloc_lock>
    eee6:	4f20      	ldr	r7, [pc, #128]	; (ef68 <_malloc_trim_r+0x8c>)
    eee8:	68bb      	ldr	r3, [r7, #8]
    eeea:	685d      	ldr	r5, [r3, #4]
    eeec:	2303      	movs	r3, #3
    eeee:	439d      	bics	r5, r3
    eef0:	4b1e      	ldr	r3, [pc, #120]	; (ef6c <_malloc_trim_r+0x90>)
    eef2:	1b2c      	subs	r4, r5, r4
    eef4:	469c      	mov	ip, r3
    eef6:	4464      	add	r4, ip
    eef8:	0b24      	lsrs	r4, r4, #12
    eefa:	4b1d      	ldr	r3, [pc, #116]	; (ef70 <_malloc_trim_r+0x94>)
    eefc:	3c01      	subs	r4, #1
    eefe:	0324      	lsls	r4, r4, #12
    ef00:	429c      	cmp	r4, r3
    ef02:	dd07      	ble.n	ef14 <_malloc_trim_r+0x38>
    ef04:	2100      	movs	r1, #0
    ef06:	0030      	movs	r0, r6
    ef08:	f001 fba6 	bl	10658 <_sbrk_r>
    ef0c:	68bb      	ldr	r3, [r7, #8]
    ef0e:	195b      	adds	r3, r3, r5
    ef10:	4298      	cmp	r0, r3
    ef12:	d004      	beq.n	ef1e <_malloc_trim_r+0x42>
    ef14:	0030      	movs	r0, r6
    ef16:	f000 fe91 	bl	fc3c <__malloc_unlock>
    ef1a:	2000      	movs	r0, #0
    ef1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef1e:	4261      	negs	r1, r4
    ef20:	0030      	movs	r0, r6
    ef22:	f001 fb99 	bl	10658 <_sbrk_r>
    ef26:	1c43      	adds	r3, r0, #1
    ef28:	d00d      	beq.n	ef46 <_malloc_trim_r+0x6a>
    ef2a:	2201      	movs	r2, #1
    ef2c:	68bb      	ldr	r3, [r7, #8]
    ef2e:	1b2d      	subs	r5, r5, r4
    ef30:	4315      	orrs	r5, r2
    ef32:	605d      	str	r5, [r3, #4]
    ef34:	4b0f      	ldr	r3, [pc, #60]	; (ef74 <_malloc_trim_r+0x98>)
    ef36:	0030      	movs	r0, r6
    ef38:	681a      	ldr	r2, [r3, #0]
    ef3a:	1b14      	subs	r4, r2, r4
    ef3c:	601c      	str	r4, [r3, #0]
    ef3e:	f000 fe7d 	bl	fc3c <__malloc_unlock>
    ef42:	2001      	movs	r0, #1
    ef44:	e7ea      	b.n	ef1c <_malloc_trim_r+0x40>
    ef46:	2100      	movs	r1, #0
    ef48:	0030      	movs	r0, r6
    ef4a:	f001 fb85 	bl	10658 <_sbrk_r>
    ef4e:	68ba      	ldr	r2, [r7, #8]
    ef50:	1a83      	subs	r3, r0, r2
    ef52:	2b0f      	cmp	r3, #15
    ef54:	ddde      	ble.n	ef14 <_malloc_trim_r+0x38>
    ef56:	4908      	ldr	r1, [pc, #32]	; (ef78 <_malloc_trim_r+0x9c>)
    ef58:	6809      	ldr	r1, [r1, #0]
    ef5a:	1a40      	subs	r0, r0, r1
    ef5c:	4905      	ldr	r1, [pc, #20]	; (ef74 <_malloc_trim_r+0x98>)
    ef5e:	6008      	str	r0, [r1, #0]
    ef60:	2101      	movs	r1, #1
    ef62:	430b      	orrs	r3, r1
    ef64:	6053      	str	r3, [r2, #4]
    ef66:	e7d5      	b.n	ef14 <_malloc_trim_r+0x38>
    ef68:	200004a4 	.word	0x200004a4
    ef6c:	00000fef 	.word	0x00000fef
    ef70:	00000fff 	.word	0x00000fff
    ef74:	2000148c 	.word	0x2000148c
    ef78:	200008ac 	.word	0x200008ac

0000ef7c <_free_r>:
    ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef7e:	0004      	movs	r4, r0
    ef80:	1e0d      	subs	r5, r1, #0
    ef82:	d03c      	beq.n	effe <_free_r+0x82>
    ef84:	f000 fe52 	bl	fc2c <__malloc_lock>
    ef88:	0029      	movs	r1, r5
    ef8a:	3908      	subs	r1, #8
    ef8c:	6848      	ldr	r0, [r1, #4]
    ef8e:	2301      	movs	r3, #1
    ef90:	0005      	movs	r5, r0
    ef92:	2603      	movs	r6, #3
    ef94:	439d      	bics	r5, r3
    ef96:	194a      	adds	r2, r1, r5
    ef98:	469c      	mov	ip, r3
    ef9a:	4f61      	ldr	r7, [pc, #388]	; (f120 <_free_r+0x1a4>)
    ef9c:	6853      	ldr	r3, [r2, #4]
    ef9e:	43b3      	bics	r3, r6
    efa0:	68be      	ldr	r6, [r7, #8]
    efa2:	42b2      	cmp	r2, r6
    efa4:	d056      	beq.n	f054 <_free_r+0xd8>
    efa6:	4666      	mov	r6, ip
    efa8:	6053      	str	r3, [r2, #4]
    efaa:	4206      	tst	r6, r0
    efac:	d10a      	bne.n	efc4 <_free_r+0x48>
    efae:	003e      	movs	r6, r7
    efb0:	6808      	ldr	r0, [r1, #0]
    efb2:	3608      	adds	r6, #8
    efb4:	1a09      	subs	r1, r1, r0
    efb6:	182d      	adds	r5, r5, r0
    efb8:	6888      	ldr	r0, [r1, #8]
    efba:	42b0      	cmp	r0, r6
    efbc:	d065      	beq.n	f08a <_free_r+0x10e>
    efbe:	68ce      	ldr	r6, [r1, #12]
    efc0:	60c6      	str	r6, [r0, #12]
    efc2:	60b0      	str	r0, [r6, #8]
    efc4:	2001      	movs	r0, #1
    efc6:	18d6      	adds	r6, r2, r3
    efc8:	6876      	ldr	r6, [r6, #4]
    efca:	4206      	tst	r6, r0
    efcc:	d033      	beq.n	f036 <_free_r+0xba>
    efce:	4b55      	ldr	r3, [pc, #340]	; (f124 <_free_r+0x1a8>)
    efd0:	4328      	orrs	r0, r5
    efd2:	6048      	str	r0, [r1, #4]
    efd4:	514d      	str	r5, [r1, r5]
    efd6:	429d      	cmp	r5, r3
    efd8:	d812      	bhi.n	f000 <_free_r+0x84>
    efda:	08ed      	lsrs	r5, r5, #3
    efdc:	3bff      	subs	r3, #255	; 0xff
    efde:	10aa      	asrs	r2, r5, #2
    efe0:	3bff      	subs	r3, #255	; 0xff
    efe2:	4093      	lsls	r3, r2
    efe4:	687a      	ldr	r2, [r7, #4]
    efe6:	00ed      	lsls	r5, r5, #3
    efe8:	4313      	orrs	r3, r2
    efea:	607b      	str	r3, [r7, #4]
    efec:	19ef      	adds	r7, r5, r7
    efee:	68bb      	ldr	r3, [r7, #8]
    eff0:	60cf      	str	r7, [r1, #12]
    eff2:	608b      	str	r3, [r1, #8]
    eff4:	60b9      	str	r1, [r7, #8]
    eff6:	60d9      	str	r1, [r3, #12]
    eff8:	0020      	movs	r0, r4
    effa:	f000 fe1f 	bl	fc3c <__malloc_unlock>
    effe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f000:	0a68      	lsrs	r0, r5, #9
    f002:	2804      	cmp	r0, #4
    f004:	d850      	bhi.n	f0a8 <_free_r+0x12c>
    f006:	09a8      	lsrs	r0, r5, #6
    f008:	0002      	movs	r2, r0
    f00a:	3039      	adds	r0, #57	; 0x39
    f00c:	3238      	adds	r2, #56	; 0x38
    f00e:	00c0      	lsls	r0, r0, #3
    f010:	1838      	adds	r0, r7, r0
    f012:	3808      	subs	r0, #8
    f014:	6883      	ldr	r3, [r0, #8]
    f016:	2603      	movs	r6, #3
    f018:	4298      	cmp	r0, r3
    f01a:	d04c      	beq.n	f0b6 <_free_r+0x13a>
    f01c:	685a      	ldr	r2, [r3, #4]
    f01e:	43b2      	bics	r2, r6
    f020:	4295      	cmp	r5, r2
    f022:	d230      	bcs.n	f086 <_free_r+0x10a>
    f024:	689b      	ldr	r3, [r3, #8]
    f026:	4298      	cmp	r0, r3
    f028:	d1f8      	bne.n	f01c <_free_r+0xa0>
    f02a:	68c3      	ldr	r3, [r0, #12]
    f02c:	60cb      	str	r3, [r1, #12]
    f02e:	6088      	str	r0, [r1, #8]
    f030:	6099      	str	r1, [r3, #8]
    f032:	60c1      	str	r1, [r0, #12]
    f034:	e7e0      	b.n	eff8 <_free_r+0x7c>
    f036:	18ed      	adds	r5, r5, r3
    f038:	4e3b      	ldr	r6, [pc, #236]	; (f128 <_free_r+0x1ac>)
    f03a:	6893      	ldr	r3, [r2, #8]
    f03c:	42b3      	cmp	r3, r6
    f03e:	d042      	beq.n	f0c6 <_free_r+0x14a>
    f040:	68d2      	ldr	r2, [r2, #12]
    f042:	4328      	orrs	r0, r5
    f044:	60da      	str	r2, [r3, #12]
    f046:	6093      	str	r3, [r2, #8]
    f048:	4b36      	ldr	r3, [pc, #216]	; (f124 <_free_r+0x1a8>)
    f04a:	6048      	str	r0, [r1, #4]
    f04c:	514d      	str	r5, [r1, r5]
    f04e:	429d      	cmp	r5, r3
    f050:	d8d6      	bhi.n	f000 <_free_r+0x84>
    f052:	e7c2      	b.n	efda <_free_r+0x5e>
    f054:	4662      	mov	r2, ip
    f056:	18eb      	adds	r3, r5, r3
    f058:	4202      	tst	r2, r0
    f05a:	d106      	bne.n	f06a <_free_r+0xee>
    f05c:	680a      	ldr	r2, [r1, #0]
    f05e:	1a89      	subs	r1, r1, r2
    f060:	6888      	ldr	r0, [r1, #8]
    f062:	189b      	adds	r3, r3, r2
    f064:	68ca      	ldr	r2, [r1, #12]
    f066:	60c2      	str	r2, [r0, #12]
    f068:	6090      	str	r0, [r2, #8]
    f06a:	2201      	movs	r2, #1
    f06c:	431a      	orrs	r2, r3
    f06e:	604a      	str	r2, [r1, #4]
    f070:	4a2e      	ldr	r2, [pc, #184]	; (f12c <_free_r+0x1b0>)
    f072:	60b9      	str	r1, [r7, #8]
    f074:	6812      	ldr	r2, [r2, #0]
    f076:	4293      	cmp	r3, r2
    f078:	d3be      	bcc.n	eff8 <_free_r+0x7c>
    f07a:	4b2d      	ldr	r3, [pc, #180]	; (f130 <_free_r+0x1b4>)
    f07c:	0020      	movs	r0, r4
    f07e:	6819      	ldr	r1, [r3, #0]
    f080:	f7ff ff2c 	bl	eedc <_malloc_trim_r>
    f084:	e7b8      	b.n	eff8 <_free_r+0x7c>
    f086:	0018      	movs	r0, r3
    f088:	e7cf      	b.n	f02a <_free_r+0xae>
    f08a:	4666      	mov	r6, ip
    f08c:	18d0      	adds	r0, r2, r3
    f08e:	6840      	ldr	r0, [r0, #4]
    f090:	4230      	tst	r0, r6
    f092:	d13f      	bne.n	f114 <_free_r+0x198>
    f094:	6890      	ldr	r0, [r2, #8]
    f096:	195d      	adds	r5, r3, r5
    f098:	68d3      	ldr	r3, [r2, #12]
    f09a:	60c3      	str	r3, [r0, #12]
    f09c:	6098      	str	r0, [r3, #8]
    f09e:	4663      	mov	r3, ip
    f0a0:	432b      	orrs	r3, r5
    f0a2:	604b      	str	r3, [r1, #4]
    f0a4:	514d      	str	r5, [r1, r5]
    f0a6:	e7a7      	b.n	eff8 <_free_r+0x7c>
    f0a8:	2814      	cmp	r0, #20
    f0aa:	d814      	bhi.n	f0d6 <_free_r+0x15a>
    f0ac:	0002      	movs	r2, r0
    f0ae:	305c      	adds	r0, #92	; 0x5c
    f0b0:	325b      	adds	r2, #91	; 0x5b
    f0b2:	00c0      	lsls	r0, r0, #3
    f0b4:	e7ac      	b.n	f010 <_free_r+0x94>
    f0b6:	2301      	movs	r3, #1
    f0b8:	1092      	asrs	r2, r2, #2
    f0ba:	4093      	lsls	r3, r2
    f0bc:	687a      	ldr	r2, [r7, #4]
    f0be:	4313      	orrs	r3, r2
    f0c0:	607b      	str	r3, [r7, #4]
    f0c2:	0003      	movs	r3, r0
    f0c4:	e7b2      	b.n	f02c <_free_r+0xb0>
    f0c6:	4328      	orrs	r0, r5
    f0c8:	60d9      	str	r1, [r3, #12]
    f0ca:	6099      	str	r1, [r3, #8]
    f0cc:	60cb      	str	r3, [r1, #12]
    f0ce:	608b      	str	r3, [r1, #8]
    f0d0:	6048      	str	r0, [r1, #4]
    f0d2:	514d      	str	r5, [r1, r5]
    f0d4:	e790      	b.n	eff8 <_free_r+0x7c>
    f0d6:	2854      	cmp	r0, #84	; 0x54
    f0d8:	d805      	bhi.n	f0e6 <_free_r+0x16a>
    f0da:	0b28      	lsrs	r0, r5, #12
    f0dc:	0002      	movs	r2, r0
    f0de:	306f      	adds	r0, #111	; 0x6f
    f0e0:	326e      	adds	r2, #110	; 0x6e
    f0e2:	00c0      	lsls	r0, r0, #3
    f0e4:	e794      	b.n	f010 <_free_r+0x94>
    f0e6:	22aa      	movs	r2, #170	; 0xaa
    f0e8:	0052      	lsls	r2, r2, #1
    f0ea:	4290      	cmp	r0, r2
    f0ec:	d805      	bhi.n	f0fa <_free_r+0x17e>
    f0ee:	0be8      	lsrs	r0, r5, #15
    f0f0:	0002      	movs	r2, r0
    f0f2:	3078      	adds	r0, #120	; 0x78
    f0f4:	3277      	adds	r2, #119	; 0x77
    f0f6:	00c0      	lsls	r0, r0, #3
    f0f8:	e78a      	b.n	f010 <_free_r+0x94>
    f0fa:	4a0e      	ldr	r2, [pc, #56]	; (f134 <_free_r+0x1b8>)
    f0fc:	4290      	cmp	r0, r2
    f0fe:	d805      	bhi.n	f10c <_free_r+0x190>
    f100:	0ca8      	lsrs	r0, r5, #18
    f102:	0002      	movs	r2, r0
    f104:	307d      	adds	r0, #125	; 0x7d
    f106:	327c      	adds	r2, #124	; 0x7c
    f108:	00c0      	lsls	r0, r0, #3
    f10a:	e781      	b.n	f010 <_free_r+0x94>
    f10c:	20fe      	movs	r0, #254	; 0xfe
    f10e:	227e      	movs	r2, #126	; 0x7e
    f110:	0080      	lsls	r0, r0, #2
    f112:	e77d      	b.n	f010 <_free_r+0x94>
    f114:	4663      	mov	r3, ip
    f116:	432b      	orrs	r3, r5
    f118:	604b      	str	r3, [r1, #4]
    f11a:	6015      	str	r5, [r2, #0]
    f11c:	e76c      	b.n	eff8 <_free_r+0x7c>
    f11e:	46c0      	nop			; (mov r8, r8)
    f120:	200004a4 	.word	0x200004a4
    f124:	000001ff 	.word	0x000001ff
    f128:	200004ac 	.word	0x200004ac
    f12c:	200008b0 	.word	0x200008b0
    f130:	200014bc 	.word	0x200014bc
    f134:	00000554 	.word	0x00000554

0000f138 <__sfvwrite_r>:
    f138:	b5f0      	push	{r4, r5, r6, r7, lr}
    f13a:	464e      	mov	r6, r9
    f13c:	46de      	mov	lr, fp
    f13e:	4657      	mov	r7, sl
    f140:	4645      	mov	r5, r8
    f142:	b5e0      	push	{r5, r6, r7, lr}
    f144:	6893      	ldr	r3, [r2, #8]
    f146:	b083      	sub	sp, #12
    f148:	9000      	str	r0, [sp, #0]
    f14a:	000c      	movs	r4, r1
    f14c:	0016      	movs	r6, r2
    f14e:	2b00      	cmp	r3, #0
    f150:	d025      	beq.n	f19e <__sfvwrite_r+0x66>
    f152:	898b      	ldrh	r3, [r1, #12]
    f154:	071a      	lsls	r2, r3, #28
    f156:	d52a      	bpl.n	f1ae <__sfvwrite_r+0x76>
    f158:	690a      	ldr	r2, [r1, #16]
    f15a:	2a00      	cmp	r2, #0
    f15c:	d027      	beq.n	f1ae <__sfvwrite_r+0x76>
    f15e:	6832      	ldr	r2, [r6, #0]
    f160:	4693      	mov	fp, r2
    f162:	079a      	lsls	r2, r3, #30
    f164:	d52f      	bpl.n	f1c6 <__sfvwrite_r+0x8e>
    f166:	4bb2      	ldr	r3, [pc, #712]	; (f430 <__sfvwrite_r+0x2f8>)
    f168:	2700      	movs	r7, #0
    f16a:	2500      	movs	r5, #0
    f16c:	4698      	mov	r8, r3
    f16e:	46b1      	mov	r9, r6
    f170:	2d00      	cmp	r5, #0
    f172:	d100      	bne.n	f176 <__sfvwrite_r+0x3e>
    f174:	e072      	b.n	f25c <__sfvwrite_r+0x124>
    f176:	002b      	movs	r3, r5
    f178:	4545      	cmp	r5, r8
    f17a:	d900      	bls.n	f17e <__sfvwrite_r+0x46>
    f17c:	4bac      	ldr	r3, [pc, #688]	; (f430 <__sfvwrite_r+0x2f8>)
    f17e:	003a      	movs	r2, r7
    f180:	69e1      	ldr	r1, [r4, #28]
    f182:	9800      	ldr	r0, [sp, #0]
    f184:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f186:	47b0      	blx	r6
    f188:	2800      	cmp	r0, #0
    f18a:	dc00      	bgt.n	f18e <__sfvwrite_r+0x56>
    f18c:	e073      	b.n	f276 <__sfvwrite_r+0x13e>
    f18e:	464b      	mov	r3, r9
    f190:	689b      	ldr	r3, [r3, #8]
    f192:	183f      	adds	r7, r7, r0
    f194:	1a2d      	subs	r5, r5, r0
    f196:	1a18      	subs	r0, r3, r0
    f198:	464b      	mov	r3, r9
    f19a:	6098      	str	r0, [r3, #8]
    f19c:	d1e8      	bne.n	f170 <__sfvwrite_r+0x38>
    f19e:	2000      	movs	r0, #0
    f1a0:	b003      	add	sp, #12
    f1a2:	bc3c      	pop	{r2, r3, r4, r5}
    f1a4:	4690      	mov	r8, r2
    f1a6:	4699      	mov	r9, r3
    f1a8:	46a2      	mov	sl, r4
    f1aa:	46ab      	mov	fp, r5
    f1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1ae:	0021      	movs	r1, r4
    f1b0:	9800      	ldr	r0, [sp, #0]
    f1b2:	f7fe fbd1 	bl	d958 <__swsetup_r>
    f1b6:	2800      	cmp	r0, #0
    f1b8:	d000      	beq.n	f1bc <__sfvwrite_r+0x84>
    f1ba:	e130      	b.n	f41e <__sfvwrite_r+0x2e6>
    f1bc:	6832      	ldr	r2, [r6, #0]
    f1be:	89a3      	ldrh	r3, [r4, #12]
    f1c0:	4693      	mov	fp, r2
    f1c2:	079a      	lsls	r2, r3, #30
    f1c4:	d4cf      	bmi.n	f166 <__sfvwrite_r+0x2e>
    f1c6:	07da      	lsls	r2, r3, #31
    f1c8:	d55d      	bpl.n	f286 <__sfvwrite_r+0x14e>
    f1ca:	2300      	movs	r3, #0
    f1cc:	2000      	movs	r0, #0
    f1ce:	469a      	mov	sl, r3
    f1d0:	2700      	movs	r7, #0
    f1d2:	001d      	movs	r5, r3
    f1d4:	46b1      	mov	r9, r6
    f1d6:	e029      	b.n	f22c <__sfvwrite_r+0xf4>
    f1d8:	2800      	cmp	r0, #0
    f1da:	d033      	beq.n	f244 <__sfvwrite_r+0x10c>
    f1dc:	46a8      	mov	r8, r5
    f1de:	42bd      	cmp	r5, r7
    f1e0:	d900      	bls.n	f1e4 <__sfvwrite_r+0xac>
    f1e2:	46b8      	mov	r8, r7
    f1e4:	6820      	ldr	r0, [r4, #0]
    f1e6:	6922      	ldr	r2, [r4, #16]
    f1e8:	4646      	mov	r6, r8
    f1ea:	6963      	ldr	r3, [r4, #20]
    f1ec:	4290      	cmp	r0, r2
    f1ee:	d907      	bls.n	f200 <__sfvwrite_r+0xc8>
    f1f0:	68a2      	ldr	r2, [r4, #8]
    f1f2:	4694      	mov	ip, r2
    f1f4:	449c      	add	ip, r3
    f1f6:	4662      	mov	r2, ip
    f1f8:	9201      	str	r2, [sp, #4]
    f1fa:	45e0      	cmp	r8, ip
    f1fc:	dd00      	ble.n	f200 <__sfvwrite_r+0xc8>
    f1fe:	e0e9      	b.n	f3d4 <__sfvwrite_r+0x29c>
    f200:	4598      	cmp	r8, r3
    f202:	da00      	bge.n	f206 <__sfvwrite_r+0xce>
    f204:	e08f      	b.n	f326 <__sfvwrite_r+0x1ee>
    f206:	6a66      	ldr	r6, [r4, #36]	; 0x24
    f208:	4652      	mov	r2, sl
    f20a:	69e1      	ldr	r1, [r4, #28]
    f20c:	9800      	ldr	r0, [sp, #0]
    f20e:	47b0      	blx	r6
    f210:	1e06      	subs	r6, r0, #0
    f212:	dd30      	ble.n	f276 <__sfvwrite_r+0x13e>
    f214:	1bad      	subs	r5, r5, r6
    f216:	2001      	movs	r0, #1
    f218:	2d00      	cmp	r5, #0
    f21a:	d026      	beq.n	f26a <__sfvwrite_r+0x132>
    f21c:	464b      	mov	r3, r9
    f21e:	689b      	ldr	r3, [r3, #8]
    f220:	44b2      	add	sl, r6
    f222:	1bbf      	subs	r7, r7, r6
    f224:	1b9e      	subs	r6, r3, r6
    f226:	464b      	mov	r3, r9
    f228:	609e      	str	r6, [r3, #8]
    f22a:	d0b8      	beq.n	f19e <__sfvwrite_r+0x66>
    f22c:	2f00      	cmp	r7, #0
    f22e:	d1d3      	bne.n	f1d8 <__sfvwrite_r+0xa0>
    f230:	465b      	mov	r3, fp
    f232:	681b      	ldr	r3, [r3, #0]
    f234:	469a      	mov	sl, r3
    f236:	465b      	mov	r3, fp
    f238:	685f      	ldr	r7, [r3, #4]
    f23a:	2308      	movs	r3, #8
    f23c:	469c      	mov	ip, r3
    f23e:	44e3      	add	fp, ip
    f240:	2f00      	cmp	r7, #0
    f242:	d0f5      	beq.n	f230 <__sfvwrite_r+0xf8>
    f244:	003a      	movs	r2, r7
    f246:	210a      	movs	r1, #10
    f248:	4650      	mov	r0, sl
    f24a:	f000 fc5f 	bl	fb0c <memchr>
    f24e:	2800      	cmp	r0, #0
    f250:	d100      	bne.n	f254 <__sfvwrite_r+0x11c>
    f252:	e0e2      	b.n	f41a <__sfvwrite_r+0x2e2>
    f254:	4653      	mov	r3, sl
    f256:	3001      	adds	r0, #1
    f258:	1ac5      	subs	r5, r0, r3
    f25a:	e7bf      	b.n	f1dc <__sfvwrite_r+0xa4>
    f25c:	465b      	mov	r3, fp
    f25e:	681f      	ldr	r7, [r3, #0]
    f260:	685d      	ldr	r5, [r3, #4]
    f262:	2308      	movs	r3, #8
    f264:	469c      	mov	ip, r3
    f266:	44e3      	add	fp, ip
    f268:	e782      	b.n	f170 <__sfvwrite_r+0x38>
    f26a:	0021      	movs	r1, r4
    f26c:	9800      	ldr	r0, [sp, #0]
    f26e:	f7ff fd81 	bl	ed74 <_fflush_r>
    f272:	2800      	cmp	r0, #0
    f274:	d0d2      	beq.n	f21c <__sfvwrite_r+0xe4>
    f276:	220c      	movs	r2, #12
    f278:	5ea3      	ldrsh	r3, [r4, r2]
    f27a:	2240      	movs	r2, #64	; 0x40
    f27c:	2001      	movs	r0, #1
    f27e:	4313      	orrs	r3, r2
    f280:	81a3      	strh	r3, [r4, #12]
    f282:	4240      	negs	r0, r0
    f284:	e78c      	b.n	f1a0 <__sfvwrite_r+0x68>
    f286:	2200      	movs	r2, #0
    f288:	4691      	mov	r9, r2
    f28a:	464d      	mov	r5, r9
    f28c:	2d00      	cmp	r5, #0
    f28e:	d023      	beq.n	f2d8 <__sfvwrite_r+0x1a0>
    f290:	68a2      	ldr	r2, [r4, #8]
    f292:	4690      	mov	r8, r2
    f294:	2280      	movs	r2, #128	; 0x80
    f296:	0092      	lsls	r2, r2, #2
    f298:	4213      	tst	r3, r2
    f29a:	d026      	beq.n	f2ea <__sfvwrite_r+0x1b2>
    f29c:	46c2      	mov	sl, r8
    f29e:	4545      	cmp	r5, r8
    f2a0:	d34d      	bcc.n	f33e <__sfvwrite_r+0x206>
    f2a2:	2290      	movs	r2, #144	; 0x90
    f2a4:	00d2      	lsls	r2, r2, #3
    f2a6:	4213      	tst	r3, r2
    f2a8:	d14e      	bne.n	f348 <__sfvwrite_r+0x210>
    f2aa:	002f      	movs	r7, r5
    f2ac:	6820      	ldr	r0, [r4, #0]
    f2ae:	4652      	mov	r2, sl
    f2b0:	4649      	mov	r1, r9
    f2b2:	f000 fc6b 	bl	fb8c <memmove>
    f2b6:	4642      	mov	r2, r8
    f2b8:	68a3      	ldr	r3, [r4, #8]
    f2ba:	1a98      	subs	r0, r3, r2
    f2bc:	6823      	ldr	r3, [r4, #0]
    f2be:	60a0      	str	r0, [r4, #8]
    f2c0:	4453      	add	r3, sl
    f2c2:	6023      	str	r3, [r4, #0]
    f2c4:	68b3      	ldr	r3, [r6, #8]
    f2c6:	44b9      	add	r9, r7
    f2c8:	1bed      	subs	r5, r5, r7
    f2ca:	1bdf      	subs	r7, r3, r7
    f2cc:	60b7      	str	r7, [r6, #8]
    f2ce:	d100      	bne.n	f2d2 <__sfvwrite_r+0x19a>
    f2d0:	e765      	b.n	f19e <__sfvwrite_r+0x66>
    f2d2:	89a3      	ldrh	r3, [r4, #12]
    f2d4:	2d00      	cmp	r5, #0
    f2d6:	d1db      	bne.n	f290 <__sfvwrite_r+0x158>
    f2d8:	465a      	mov	r2, fp
    f2da:	6812      	ldr	r2, [r2, #0]
    f2dc:	4691      	mov	r9, r2
    f2de:	465a      	mov	r2, fp
    f2e0:	6855      	ldr	r5, [r2, #4]
    f2e2:	2208      	movs	r2, #8
    f2e4:	4694      	mov	ip, r2
    f2e6:	44e3      	add	fp, ip
    f2e8:	e7d0      	b.n	f28c <__sfvwrite_r+0x154>
    f2ea:	6820      	ldr	r0, [r4, #0]
    f2ec:	6923      	ldr	r3, [r4, #16]
    f2ee:	4298      	cmp	r0, r3
    f2f0:	d802      	bhi.n	f2f8 <__sfvwrite_r+0x1c0>
    f2f2:	6967      	ldr	r7, [r4, #20]
    f2f4:	42bd      	cmp	r5, r7
    f2f6:	d259      	bcs.n	f3ac <__sfvwrite_r+0x274>
    f2f8:	4647      	mov	r7, r8
    f2fa:	42af      	cmp	r7, r5
    f2fc:	d900      	bls.n	f300 <__sfvwrite_r+0x1c8>
    f2fe:	002f      	movs	r7, r5
    f300:	003a      	movs	r2, r7
    f302:	4649      	mov	r1, r9
    f304:	f000 fc42 	bl	fb8c <memmove>
    f308:	68a3      	ldr	r3, [r4, #8]
    f30a:	6822      	ldr	r2, [r4, #0]
    f30c:	1bdb      	subs	r3, r3, r7
    f30e:	19d2      	adds	r2, r2, r7
    f310:	60a3      	str	r3, [r4, #8]
    f312:	6022      	str	r2, [r4, #0]
    f314:	2b00      	cmp	r3, #0
    f316:	d1d5      	bne.n	f2c4 <__sfvwrite_r+0x18c>
    f318:	0021      	movs	r1, r4
    f31a:	9800      	ldr	r0, [sp, #0]
    f31c:	f7ff fd2a 	bl	ed74 <_fflush_r>
    f320:	2800      	cmp	r0, #0
    f322:	d0cf      	beq.n	f2c4 <__sfvwrite_r+0x18c>
    f324:	e7a7      	b.n	f276 <__sfvwrite_r+0x13e>
    f326:	4642      	mov	r2, r8
    f328:	4651      	mov	r1, sl
    f32a:	f000 fc2f 	bl	fb8c <memmove>
    f32e:	4642      	mov	r2, r8
    f330:	68a3      	ldr	r3, [r4, #8]
    f332:	1a9b      	subs	r3, r3, r2
    f334:	60a3      	str	r3, [r4, #8]
    f336:	6823      	ldr	r3, [r4, #0]
    f338:	4443      	add	r3, r8
    f33a:	6023      	str	r3, [r4, #0]
    f33c:	e76a      	b.n	f214 <__sfvwrite_r+0xdc>
    f33e:	46a8      	mov	r8, r5
    f340:	6820      	ldr	r0, [r4, #0]
    f342:	002f      	movs	r7, r5
    f344:	46aa      	mov	sl, r5
    f346:	e7b2      	b.n	f2ae <__sfvwrite_r+0x176>
    f348:	6921      	ldr	r1, [r4, #16]
    f34a:	6822      	ldr	r2, [r4, #0]
    f34c:	1a52      	subs	r2, r2, r1
    f34e:	4692      	mov	sl, r2
    f350:	6962      	ldr	r2, [r4, #20]
    f352:	0057      	lsls	r7, r2, #1
    f354:	18bf      	adds	r7, r7, r2
    f356:	0ffa      	lsrs	r2, r7, #31
    f358:	19d7      	adds	r7, r2, r7
    f35a:	4652      	mov	r2, sl
    f35c:	1c50      	adds	r0, r2, #1
    f35e:	107f      	asrs	r7, r7, #1
    f360:	1940      	adds	r0, r0, r5
    f362:	003a      	movs	r2, r7
    f364:	42b8      	cmp	r0, r7
    f366:	d901      	bls.n	f36c <__sfvwrite_r+0x234>
    f368:	0007      	movs	r7, r0
    f36a:	0002      	movs	r2, r0
    f36c:	055b      	lsls	r3, r3, #21
    f36e:	d542      	bpl.n	f3f6 <__sfvwrite_r+0x2be>
    f370:	0011      	movs	r1, r2
    f372:	9800      	ldr	r0, [sp, #0]
    f374:	f000 f916 	bl	f5a4 <_malloc_r>
    f378:	4680      	mov	r8, r0
    f37a:	1e03      	subs	r3, r0, #0
    f37c:	d052      	beq.n	f424 <__sfvwrite_r+0x2ec>
    f37e:	4652      	mov	r2, sl
    f380:	6921      	ldr	r1, [r4, #16]
    f382:	f7fc fe69 	bl	c058 <memcpy>
    f386:	89a3      	ldrh	r3, [r4, #12]
    f388:	4a2a      	ldr	r2, [pc, #168]	; (f434 <__sfvwrite_r+0x2fc>)
    f38a:	4013      	ands	r3, r2
    f38c:	2280      	movs	r2, #128	; 0x80
    f38e:	4313      	orrs	r3, r2
    f390:	81a3      	strh	r3, [r4, #12]
    f392:	4643      	mov	r3, r8
    f394:	4640      	mov	r0, r8
    f396:	6123      	str	r3, [r4, #16]
    f398:	4653      	mov	r3, sl
    f39a:	4450      	add	r0, sl
    f39c:	6167      	str	r7, [r4, #20]
    f39e:	1aff      	subs	r7, r7, r3
    f3a0:	60a7      	str	r7, [r4, #8]
    f3a2:	6020      	str	r0, [r4, #0]
    f3a4:	46a8      	mov	r8, r5
    f3a6:	002f      	movs	r7, r5
    f3a8:	46aa      	mov	sl, r5
    f3aa:	e780      	b.n	f2ae <__sfvwrite_r+0x176>
    f3ac:	4b22      	ldr	r3, [pc, #136]	; (f438 <__sfvwrite_r+0x300>)
    f3ae:	0028      	movs	r0, r5
    f3b0:	429d      	cmp	r5, r3
    f3b2:	d900      	bls.n	f3b6 <__sfvwrite_r+0x27e>
    f3b4:	0018      	movs	r0, r3
    f3b6:	0039      	movs	r1, r7
    f3b8:	f7f9 fdd6 	bl	8f68 <__divsi3>
    f3bc:	003b      	movs	r3, r7
    f3be:	464a      	mov	r2, r9
    f3c0:	4343      	muls	r3, r0
    f3c2:	69e1      	ldr	r1, [r4, #28]
    f3c4:	9800      	ldr	r0, [sp, #0]
    f3c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    f3c8:	47b8      	blx	r7
    f3ca:	2800      	cmp	r0, #0
    f3cc:	dc00      	bgt.n	f3d0 <__sfvwrite_r+0x298>
    f3ce:	e752      	b.n	f276 <__sfvwrite_r+0x13e>
    f3d0:	0007      	movs	r7, r0
    f3d2:	e777      	b.n	f2c4 <__sfvwrite_r+0x18c>
    f3d4:	4666      	mov	r6, ip
    f3d6:	4651      	mov	r1, sl
    f3d8:	f000 fbd8 	bl	fb8c <memmove>
    f3dc:	46b4      	mov	ip, r6
    f3de:	6823      	ldr	r3, [r4, #0]
    f3e0:	0021      	movs	r1, r4
    f3e2:	4463      	add	r3, ip
    f3e4:	6023      	str	r3, [r4, #0]
    f3e6:	9800      	ldr	r0, [sp, #0]
    f3e8:	f7ff fcc4 	bl	ed74 <_fflush_r>
    f3ec:	2800      	cmp	r0, #0
    f3ee:	d000      	beq.n	f3f2 <__sfvwrite_r+0x2ba>
    f3f0:	e741      	b.n	f276 <__sfvwrite_r+0x13e>
    f3f2:	9e01      	ldr	r6, [sp, #4]
    f3f4:	e70e      	b.n	f214 <__sfvwrite_r+0xdc>
    f3f6:	9800      	ldr	r0, [sp, #0]
    f3f8:	f000 ff70 	bl	102dc <_realloc_r>
    f3fc:	4680      	mov	r8, r0
    f3fe:	2800      	cmp	r0, #0
    f400:	d1c7      	bne.n	f392 <__sfvwrite_r+0x25a>
    f402:	9d00      	ldr	r5, [sp, #0]
    f404:	6921      	ldr	r1, [r4, #16]
    f406:	0028      	movs	r0, r5
    f408:	f7ff fdb8 	bl	ef7c <_free_r>
    f40c:	2280      	movs	r2, #128	; 0x80
    f40e:	89a3      	ldrh	r3, [r4, #12]
    f410:	4393      	bics	r3, r2
    f412:	3a74      	subs	r2, #116	; 0x74
    f414:	b21b      	sxth	r3, r3
    f416:	602a      	str	r2, [r5, #0]
    f418:	e72f      	b.n	f27a <__sfvwrite_r+0x142>
    f41a:	1c7d      	adds	r5, r7, #1
    f41c:	e6de      	b.n	f1dc <__sfvwrite_r+0xa4>
    f41e:	2001      	movs	r0, #1
    f420:	4240      	negs	r0, r0
    f422:	e6bd      	b.n	f1a0 <__sfvwrite_r+0x68>
    f424:	9a00      	ldr	r2, [sp, #0]
    f426:	330c      	adds	r3, #12
    f428:	6013      	str	r3, [r2, #0]
    f42a:	220c      	movs	r2, #12
    f42c:	5ea3      	ldrsh	r3, [r4, r2]
    f42e:	e724      	b.n	f27a <__sfvwrite_r+0x142>
    f430:	7ffffc00 	.word	0x7ffffc00
    f434:	fffffb7f 	.word	0xfffffb7f
    f438:	7fffffff 	.word	0x7fffffff

0000f43c <_fwalk_reent>:
    f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f43e:	4647      	mov	r7, r8
    f440:	46ce      	mov	lr, r9
    f442:	b580      	push	{r7, lr}
    f444:	27b8      	movs	r7, #184	; 0xb8
    f446:	4680      	mov	r8, r0
    f448:	00bf      	lsls	r7, r7, #2
    f44a:	4447      	add	r7, r8
    f44c:	4689      	mov	r9, r1
    f44e:	2600      	movs	r6, #0
    f450:	2f00      	cmp	r7, #0
    f452:	d014      	beq.n	f47e <_fwalk_reent+0x42>
    f454:	687b      	ldr	r3, [r7, #4]
    f456:	68bc      	ldr	r4, [r7, #8]
    f458:	1e5d      	subs	r5, r3, #1
    f45a:	d40d      	bmi.n	f478 <_fwalk_reent+0x3c>
    f45c:	89a3      	ldrh	r3, [r4, #12]
    f45e:	2b01      	cmp	r3, #1
    f460:	d907      	bls.n	f472 <_fwalk_reent+0x36>
    f462:	220e      	movs	r2, #14
    f464:	5ea3      	ldrsh	r3, [r4, r2]
    f466:	3301      	adds	r3, #1
    f468:	d003      	beq.n	f472 <_fwalk_reent+0x36>
    f46a:	0021      	movs	r1, r4
    f46c:	4640      	mov	r0, r8
    f46e:	47c8      	blx	r9
    f470:	4306      	orrs	r6, r0
    f472:	3468      	adds	r4, #104	; 0x68
    f474:	3d01      	subs	r5, #1
    f476:	d2f1      	bcs.n	f45c <_fwalk_reent+0x20>
    f478:	683f      	ldr	r7, [r7, #0]
    f47a:	2f00      	cmp	r7, #0
    f47c:	d1ea      	bne.n	f454 <_fwalk_reent+0x18>
    f47e:	0030      	movs	r0, r6
    f480:	bc0c      	pop	{r2, r3}
    f482:	4690      	mov	r8, r2
    f484:	4699      	mov	r9, r3
    f486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f488 <_localeconv_r>:
    f488:	4b04      	ldr	r3, [pc, #16]	; (f49c <_localeconv_r+0x14>)
    f48a:	681b      	ldr	r3, [r3, #0]
    f48c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    f48e:	2800      	cmp	r0, #0
    f490:	d001      	beq.n	f496 <_localeconv_r+0xe>
    f492:	30f0      	adds	r0, #240	; 0xf0
    f494:	4770      	bx	lr
    f496:	4802      	ldr	r0, [pc, #8]	; (f4a0 <_localeconv_r+0x18>)
    f498:	e7fb      	b.n	f492 <_localeconv_r+0xa>
    f49a:	46c0      	nop			; (mov r8, r8)
    f49c:	20000070 	.word	0x20000070
    f4a0:	200008b4 	.word	0x200008b4

0000f4a4 <__retarget_lock_init_recursive>:
    f4a4:	4770      	bx	lr
    f4a6:	46c0      	nop			; (mov r8, r8)

0000f4a8 <__retarget_lock_close_recursive>:
    f4a8:	4770      	bx	lr
    f4aa:	46c0      	nop			; (mov r8, r8)

0000f4ac <__retarget_lock_acquire_recursive>:
    f4ac:	4770      	bx	lr
    f4ae:	46c0      	nop			; (mov r8, r8)

0000f4b0 <__retarget_lock_release_recursive>:
    f4b0:	4770      	bx	lr
    f4b2:	46c0      	nop			; (mov r8, r8)

0000f4b4 <__swhatbuf_r>:
    f4b4:	b570      	push	{r4, r5, r6, lr}
    f4b6:	000c      	movs	r4, r1
    f4b8:	001e      	movs	r6, r3
    f4ba:	230e      	movs	r3, #14
    f4bc:	5ec9      	ldrsh	r1, [r1, r3]
    f4be:	b090      	sub	sp, #64	; 0x40
    f4c0:	0015      	movs	r5, r2
    f4c2:	2900      	cmp	r1, #0
    f4c4:	db15      	blt.n	f4f2 <__swhatbuf_r+0x3e>
    f4c6:	aa01      	add	r2, sp, #4
    f4c8:	f001 faa4 	bl	10a14 <_fstat_r>
    f4cc:	2800      	cmp	r0, #0
    f4ce:	db10      	blt.n	f4f2 <__swhatbuf_r+0x3e>
    f4d0:	22f0      	movs	r2, #240	; 0xf0
    f4d2:	9b02      	ldr	r3, [sp, #8]
    f4d4:	0212      	lsls	r2, r2, #8
    f4d6:	4013      	ands	r3, r2
    f4d8:	4a0d      	ldr	r2, [pc, #52]	; (f510 <__swhatbuf_r+0x5c>)
    f4da:	2080      	movs	r0, #128	; 0x80
    f4dc:	4694      	mov	ip, r2
    f4de:	4463      	add	r3, ip
    f4e0:	425a      	negs	r2, r3
    f4e2:	4153      	adcs	r3, r2
    f4e4:	6033      	str	r3, [r6, #0]
    f4e6:	2380      	movs	r3, #128	; 0x80
    f4e8:	00db      	lsls	r3, r3, #3
    f4ea:	602b      	str	r3, [r5, #0]
    f4ec:	0100      	lsls	r0, r0, #4
    f4ee:	b010      	add	sp, #64	; 0x40
    f4f0:	bd70      	pop	{r4, r5, r6, pc}
    f4f2:	2300      	movs	r3, #0
    f4f4:	6033      	str	r3, [r6, #0]
    f4f6:	89a3      	ldrh	r3, [r4, #12]
    f4f8:	061b      	lsls	r3, r3, #24
    f4fa:	d503      	bpl.n	f504 <__swhatbuf_r+0x50>
    f4fc:	2340      	movs	r3, #64	; 0x40
    f4fe:	2000      	movs	r0, #0
    f500:	602b      	str	r3, [r5, #0]
    f502:	e7f4      	b.n	f4ee <__swhatbuf_r+0x3a>
    f504:	2380      	movs	r3, #128	; 0x80
    f506:	00db      	lsls	r3, r3, #3
    f508:	602b      	str	r3, [r5, #0]
    f50a:	2000      	movs	r0, #0
    f50c:	e7ef      	b.n	f4ee <__swhatbuf_r+0x3a>
    f50e:	46c0      	nop			; (mov r8, r8)
    f510:	ffffe000 	.word	0xffffe000

0000f514 <__smakebuf_r>:
    f514:	b570      	push	{r4, r5, r6, lr}
    f516:	898b      	ldrh	r3, [r1, #12]
    f518:	b082      	sub	sp, #8
    f51a:	0006      	movs	r6, r0
    f51c:	000c      	movs	r4, r1
    f51e:	079b      	lsls	r3, r3, #30
    f520:	d507      	bpl.n	f532 <__smakebuf_r+0x1e>
    f522:	0023      	movs	r3, r4
    f524:	3343      	adds	r3, #67	; 0x43
    f526:	6023      	str	r3, [r4, #0]
    f528:	6123      	str	r3, [r4, #16]
    f52a:	2301      	movs	r3, #1
    f52c:	6163      	str	r3, [r4, #20]
    f52e:	b002      	add	sp, #8
    f530:	bd70      	pop	{r4, r5, r6, pc}
    f532:	ab01      	add	r3, sp, #4
    f534:	466a      	mov	r2, sp
    f536:	f7ff ffbd 	bl	f4b4 <__swhatbuf_r>
    f53a:	9900      	ldr	r1, [sp, #0]
    f53c:	0005      	movs	r5, r0
    f53e:	0030      	movs	r0, r6
    f540:	f000 f830 	bl	f5a4 <_malloc_r>
    f544:	2800      	cmp	r0, #0
    f546:	d01e      	beq.n	f586 <__smakebuf_r+0x72>
    f548:	2280      	movs	r2, #128	; 0x80
    f54a:	4b15      	ldr	r3, [pc, #84]	; (f5a0 <__smakebuf_r+0x8c>)
    f54c:	63f3      	str	r3, [r6, #60]	; 0x3c
    f54e:	89a3      	ldrh	r3, [r4, #12]
    f550:	6020      	str	r0, [r4, #0]
    f552:	4313      	orrs	r3, r2
    f554:	9a00      	ldr	r2, [sp, #0]
    f556:	b21b      	sxth	r3, r3
    f558:	6162      	str	r2, [r4, #20]
    f55a:	9a01      	ldr	r2, [sp, #4]
    f55c:	81a3      	strh	r3, [r4, #12]
    f55e:	6120      	str	r0, [r4, #16]
    f560:	2a00      	cmp	r2, #0
    f562:	d102      	bne.n	f56a <__smakebuf_r+0x56>
    f564:	432b      	orrs	r3, r5
    f566:	81a3      	strh	r3, [r4, #12]
    f568:	e7e1      	b.n	f52e <__smakebuf_r+0x1a>
    f56a:	230e      	movs	r3, #14
    f56c:	5ee1      	ldrsh	r1, [r4, r3]
    f56e:	0030      	movs	r0, r6
    f570:	f001 fa64 	bl	10a3c <_isatty_r>
    f574:	2800      	cmp	r0, #0
    f576:	d010      	beq.n	f59a <__smakebuf_r+0x86>
    f578:	2203      	movs	r2, #3
    f57a:	89a3      	ldrh	r3, [r4, #12]
    f57c:	4393      	bics	r3, r2
    f57e:	2201      	movs	r2, #1
    f580:	4313      	orrs	r3, r2
    f582:	b21b      	sxth	r3, r3
    f584:	e7ee      	b.n	f564 <__smakebuf_r+0x50>
    f586:	220c      	movs	r2, #12
    f588:	5ea3      	ldrsh	r3, [r4, r2]
    f58a:	059a      	lsls	r2, r3, #22
    f58c:	d4cf      	bmi.n	f52e <__smakebuf_r+0x1a>
    f58e:	2203      	movs	r2, #3
    f590:	4393      	bics	r3, r2
    f592:	2202      	movs	r2, #2
    f594:	4313      	orrs	r3, r2
    f596:	81a3      	strh	r3, [r4, #12]
    f598:	e7c3      	b.n	f522 <__smakebuf_r+0xe>
    f59a:	220c      	movs	r2, #12
    f59c:	5ea3      	ldrsh	r3, [r4, r2]
    f59e:	e7e1      	b.n	f564 <__smakebuf_r+0x50>
    f5a0:	0000edc9 	.word	0x0000edc9

0000f5a4 <_malloc_r>:
    f5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5a6:	4657      	mov	r7, sl
    f5a8:	4645      	mov	r5, r8
    f5aa:	46de      	mov	lr, fp
    f5ac:	464e      	mov	r6, r9
    f5ae:	b5e0      	push	{r5, r6, r7, lr}
    f5b0:	000d      	movs	r5, r1
    f5b2:	350b      	adds	r5, #11
    f5b4:	b083      	sub	sp, #12
    f5b6:	0007      	movs	r7, r0
    f5b8:	2d16      	cmp	r5, #22
    f5ba:	d800      	bhi.n	f5be <_malloc_r+0x1a>
    f5bc:	e09f      	b.n	f6fe <_malloc_r+0x15a>
    f5be:	2307      	movs	r3, #7
    f5c0:	439d      	bics	r5, r3
    f5c2:	d500      	bpl.n	f5c6 <_malloc_r+0x22>
    f5c4:	e0c4      	b.n	f750 <_malloc_r+0x1ac>
    f5c6:	42a9      	cmp	r1, r5
    f5c8:	d900      	bls.n	f5cc <_malloc_r+0x28>
    f5ca:	e0c1      	b.n	f750 <_malloc_r+0x1ac>
    f5cc:	f000 fb2e 	bl	fc2c <__malloc_lock>
    f5d0:	23f8      	movs	r3, #248	; 0xf8
    f5d2:	33ff      	adds	r3, #255	; 0xff
    f5d4:	429d      	cmp	r5, r3
    f5d6:	d800      	bhi.n	f5da <_malloc_r+0x36>
    f5d8:	e28f      	b.n	fafa <_malloc_r+0x556>
    f5da:	0a68      	lsrs	r0, r5, #9
    f5dc:	d100      	bne.n	f5e0 <_malloc_r+0x3c>
    f5de:	e0bb      	b.n	f758 <_malloc_r+0x1b4>
    f5e0:	2804      	cmp	r0, #4
    f5e2:	d900      	bls.n	f5e6 <_malloc_r+0x42>
    f5e4:	e162      	b.n	f8ac <_malloc_r+0x308>
    f5e6:	2338      	movs	r3, #56	; 0x38
    f5e8:	4698      	mov	r8, r3
    f5ea:	09a8      	lsrs	r0, r5, #6
    f5ec:	4480      	add	r8, r0
    f5ee:	3039      	adds	r0, #57	; 0x39
    f5f0:	00c1      	lsls	r1, r0, #3
    f5f2:	4ed2      	ldr	r6, [pc, #840]	; (f93c <_malloc_r+0x398>)
    f5f4:	1871      	adds	r1, r6, r1
    f5f6:	3908      	subs	r1, #8
    f5f8:	68cc      	ldr	r4, [r1, #12]
    f5fa:	42a1      	cmp	r1, r4
    f5fc:	d019      	beq.n	f632 <_malloc_r+0x8e>
    f5fe:	2303      	movs	r3, #3
    f600:	6862      	ldr	r2, [r4, #4]
    f602:	439a      	bics	r2, r3
    f604:	0013      	movs	r3, r2
    f606:	1b52      	subs	r2, r2, r5
    f608:	2a0f      	cmp	r2, #15
    f60a:	dd00      	ble.n	f60e <_malloc_r+0x6a>
    f60c:	e0aa      	b.n	f764 <_malloc_r+0x1c0>
    f60e:	2a00      	cmp	r2, #0
    f610:	db00      	blt.n	f614 <_malloc_r+0x70>
    f612:	e088      	b.n	f726 <_malloc_r+0x182>
    f614:	2303      	movs	r3, #3
    f616:	469c      	mov	ip, r3
    f618:	e008      	b.n	f62c <_malloc_r+0x88>
    f61a:	4662      	mov	r2, ip
    f61c:	6863      	ldr	r3, [r4, #4]
    f61e:	4393      	bics	r3, r2
    f620:	1b5a      	subs	r2, r3, r5
    f622:	2a0f      	cmp	r2, #15
    f624:	dd00      	ble.n	f628 <_malloc_r+0x84>
    f626:	e09d      	b.n	f764 <_malloc_r+0x1c0>
    f628:	2a00      	cmp	r2, #0
    f62a:	da7c      	bge.n	f726 <_malloc_r+0x182>
    f62c:	68e4      	ldr	r4, [r4, #12]
    f62e:	42a1      	cmp	r1, r4
    f630:	d1f3      	bne.n	f61a <_malloc_r+0x76>
    f632:	0032      	movs	r2, r6
    f634:	6934      	ldr	r4, [r6, #16]
    f636:	3208      	adds	r2, #8
    f638:	4294      	cmp	r4, r2
    f63a:	d100      	bne.n	f63e <_malloc_r+0x9a>
    f63c:	e190      	b.n	f960 <_malloc_r+0x3bc>
    f63e:	2303      	movs	r3, #3
    f640:	6861      	ldr	r1, [r4, #4]
    f642:	4399      	bics	r1, r3
    f644:	4689      	mov	r9, r1
    f646:	1b49      	subs	r1, r1, r5
    f648:	290f      	cmp	r1, #15
    f64a:	dd00      	ble.n	f64e <_malloc_r+0xaa>
    f64c:	e162      	b.n	f914 <_malloc_r+0x370>
    f64e:	6172      	str	r2, [r6, #20]
    f650:	6132      	str	r2, [r6, #16]
    f652:	2900      	cmp	r1, #0
    f654:	db00      	blt.n	f658 <_malloc_r+0xb4>
    f656:	e087      	b.n	f768 <_malloc_r+0x1c4>
    f658:	4ab9      	ldr	r2, [pc, #740]	; (f940 <_malloc_r+0x39c>)
    f65a:	464b      	mov	r3, r9
    f65c:	4591      	cmp	r9, r2
    f65e:	d900      	bls.n	f662 <_malloc_r+0xbe>
    f660:	e130      	b.n	f8c4 <_malloc_r+0x320>
    f662:	08db      	lsrs	r3, r3, #3
    f664:	3aff      	subs	r2, #255	; 0xff
    f666:	1099      	asrs	r1, r3, #2
    f668:	3aff      	subs	r2, #255	; 0xff
    f66a:	408a      	lsls	r2, r1
    f66c:	00db      	lsls	r3, r3, #3
    f66e:	6871      	ldr	r1, [r6, #4]
    f670:	199b      	adds	r3, r3, r6
    f672:	430a      	orrs	r2, r1
    f674:	6899      	ldr	r1, [r3, #8]
    f676:	6072      	str	r2, [r6, #4]
    f678:	60e3      	str	r3, [r4, #12]
    f67a:	60a1      	str	r1, [r4, #8]
    f67c:	609c      	str	r4, [r3, #8]
    f67e:	0013      	movs	r3, r2
    f680:	60cc      	str	r4, [r1, #12]
    f682:	2101      	movs	r1, #1
    f684:	1082      	asrs	r2, r0, #2
    f686:	4091      	lsls	r1, r2
    f688:	4299      	cmp	r1, r3
    f68a:	d86f      	bhi.n	f76c <_malloc_r+0x1c8>
    f68c:	420b      	tst	r3, r1
    f68e:	d105      	bne.n	f69c <_malloc_r+0xf8>
    f690:	2203      	movs	r2, #3
    f692:	4390      	bics	r0, r2
    f694:	0049      	lsls	r1, r1, #1
    f696:	3004      	adds	r0, #4
    f698:	420b      	tst	r3, r1
    f69a:	d0fb      	beq.n	f694 <_malloc_r+0xf0>
    f69c:	2303      	movs	r3, #3
    f69e:	4698      	mov	r8, r3
    f6a0:	00c3      	lsls	r3, r0, #3
    f6a2:	4699      	mov	r9, r3
    f6a4:	44b1      	add	r9, r6
    f6a6:	46cc      	mov	ip, r9
    f6a8:	4682      	mov	sl, r0
    f6aa:	4663      	mov	r3, ip
    f6ac:	68dc      	ldr	r4, [r3, #12]
    f6ae:	45a4      	cmp	ip, r4
    f6b0:	d107      	bne.n	f6c2 <_malloc_r+0x11e>
    f6b2:	e157      	b.n	f964 <_malloc_r+0x3c0>
    f6b4:	2a00      	cmp	r2, #0
    f6b6:	db00      	blt.n	f6ba <_malloc_r+0x116>
    f6b8:	e166      	b.n	f988 <_malloc_r+0x3e4>
    f6ba:	68e4      	ldr	r4, [r4, #12]
    f6bc:	45a4      	cmp	ip, r4
    f6be:	d100      	bne.n	f6c2 <_malloc_r+0x11e>
    f6c0:	e150      	b.n	f964 <_malloc_r+0x3c0>
    f6c2:	4642      	mov	r2, r8
    f6c4:	6863      	ldr	r3, [r4, #4]
    f6c6:	4393      	bics	r3, r2
    f6c8:	1b5a      	subs	r2, r3, r5
    f6ca:	2a0f      	cmp	r2, #15
    f6cc:	ddf2      	ble.n	f6b4 <_malloc_r+0x110>
    f6ce:	2001      	movs	r0, #1
    f6d0:	4680      	mov	r8, r0
    f6d2:	1961      	adds	r1, r4, r5
    f6d4:	4305      	orrs	r5, r0
    f6d6:	6065      	str	r5, [r4, #4]
    f6d8:	68a0      	ldr	r0, [r4, #8]
    f6da:	68e5      	ldr	r5, [r4, #12]
    f6dc:	3608      	adds	r6, #8
    f6de:	60c5      	str	r5, [r0, #12]
    f6e0:	60a8      	str	r0, [r5, #8]
    f6e2:	4640      	mov	r0, r8
    f6e4:	60f1      	str	r1, [r6, #12]
    f6e6:	60b1      	str	r1, [r6, #8]
    f6e8:	4310      	orrs	r0, r2
    f6ea:	6048      	str	r0, [r1, #4]
    f6ec:	60ce      	str	r6, [r1, #12]
    f6ee:	608e      	str	r6, [r1, #8]
    f6f0:	0038      	movs	r0, r7
    f6f2:	50e2      	str	r2, [r4, r3]
    f6f4:	f000 faa2 	bl	fc3c <__malloc_unlock>
    f6f8:	0020      	movs	r0, r4
    f6fa:	3008      	adds	r0, #8
    f6fc:	e021      	b.n	f742 <_malloc_r+0x19e>
    f6fe:	2910      	cmp	r1, #16
    f700:	d826      	bhi.n	f750 <_malloc_r+0x1ac>
    f702:	0038      	movs	r0, r7
    f704:	f000 fa92 	bl	fc2c <__malloc_lock>
    f708:	2510      	movs	r5, #16
    f70a:	2318      	movs	r3, #24
    f70c:	2002      	movs	r0, #2
    f70e:	4e8b      	ldr	r6, [pc, #556]	; (f93c <_malloc_r+0x398>)
    f710:	18f3      	adds	r3, r6, r3
    f712:	001a      	movs	r2, r3
    f714:	685c      	ldr	r4, [r3, #4]
    f716:	3a08      	subs	r2, #8
    f718:	4294      	cmp	r4, r2
    f71a:	d100      	bne.n	f71e <_malloc_r+0x17a>
    f71c:	e12e      	b.n	f97c <_malloc_r+0x3d8>
    f71e:	2303      	movs	r3, #3
    f720:	6862      	ldr	r2, [r4, #4]
    f722:	439a      	bics	r2, r3
    f724:	0013      	movs	r3, r2
    f726:	68e2      	ldr	r2, [r4, #12]
    f728:	68a1      	ldr	r1, [r4, #8]
    f72a:	60ca      	str	r2, [r1, #12]
    f72c:	6091      	str	r1, [r2, #8]
    f72e:	2201      	movs	r2, #1
    f730:	18e3      	adds	r3, r4, r3
    f732:	6859      	ldr	r1, [r3, #4]
    f734:	0038      	movs	r0, r7
    f736:	430a      	orrs	r2, r1
    f738:	605a      	str	r2, [r3, #4]
    f73a:	f000 fa7f 	bl	fc3c <__malloc_unlock>
    f73e:	0020      	movs	r0, r4
    f740:	3008      	adds	r0, #8
    f742:	b003      	add	sp, #12
    f744:	bc3c      	pop	{r2, r3, r4, r5}
    f746:	4690      	mov	r8, r2
    f748:	4699      	mov	r9, r3
    f74a:	46a2      	mov	sl, r4
    f74c:	46ab      	mov	fp, r5
    f74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f750:	230c      	movs	r3, #12
    f752:	2000      	movs	r0, #0
    f754:	603b      	str	r3, [r7, #0]
    f756:	e7f4      	b.n	f742 <_malloc_r+0x19e>
    f758:	2180      	movs	r1, #128	; 0x80
    f75a:	233f      	movs	r3, #63	; 0x3f
    f75c:	2040      	movs	r0, #64	; 0x40
    f75e:	0089      	lsls	r1, r1, #2
    f760:	4698      	mov	r8, r3
    f762:	e746      	b.n	f5f2 <_malloc_r+0x4e>
    f764:	4640      	mov	r0, r8
    f766:	e764      	b.n	f632 <_malloc_r+0x8e>
    f768:	464b      	mov	r3, r9
    f76a:	e7e0      	b.n	f72e <_malloc_r+0x18a>
    f76c:	2303      	movs	r3, #3
    f76e:	68b4      	ldr	r4, [r6, #8]
    f770:	6862      	ldr	r2, [r4, #4]
    f772:	439a      	bics	r2, r3
    f774:	4690      	mov	r8, r2
    f776:	42aa      	cmp	r2, r5
    f778:	d303      	bcc.n	f782 <_malloc_r+0x1de>
    f77a:	1b53      	subs	r3, r2, r5
    f77c:	2b0f      	cmp	r3, #15
    f77e:	dd00      	ble.n	f782 <_malloc_r+0x1de>
    f780:	e086      	b.n	f890 <_malloc_r+0x2ec>
    f782:	0023      	movs	r3, r4
    f784:	4443      	add	r3, r8
    f786:	4a6f      	ldr	r2, [pc, #444]	; (f944 <_malloc_r+0x3a0>)
    f788:	9301      	str	r3, [sp, #4]
    f78a:	4b6f      	ldr	r3, [pc, #444]	; (f948 <_malloc_r+0x3a4>)
    f78c:	4693      	mov	fp, r2
    f78e:	681b      	ldr	r3, [r3, #0]
    f790:	6812      	ldr	r2, [r2, #0]
    f792:	18eb      	adds	r3, r5, r3
    f794:	3201      	adds	r2, #1
    f796:	d100      	bne.n	f79a <_malloc_r+0x1f6>
    f798:	e168      	b.n	fa6c <_malloc_r+0x4c8>
    f79a:	4a6c      	ldr	r2, [pc, #432]	; (f94c <_malloc_r+0x3a8>)
    f79c:	4694      	mov	ip, r2
    f79e:	4463      	add	r3, ip
    f7a0:	0b1b      	lsrs	r3, r3, #12
    f7a2:	031b      	lsls	r3, r3, #12
    f7a4:	9300      	str	r3, [sp, #0]
    f7a6:	9900      	ldr	r1, [sp, #0]
    f7a8:	0038      	movs	r0, r7
    f7aa:	f000 ff55 	bl	10658 <_sbrk_r>
    f7ae:	0003      	movs	r3, r0
    f7b0:	4681      	mov	r9, r0
    f7b2:	3301      	adds	r3, #1
    f7b4:	d061      	beq.n	f87a <_malloc_r+0x2d6>
    f7b6:	9b01      	ldr	r3, [sp, #4]
    f7b8:	4283      	cmp	r3, r0
    f7ba:	d900      	bls.n	f7be <_malloc_r+0x21a>
    f7bc:	e0ff      	b.n	f9be <_malloc_r+0x41a>
    f7be:	4b64      	ldr	r3, [pc, #400]	; (f950 <_malloc_r+0x3ac>)
    f7c0:	9a00      	ldr	r2, [sp, #0]
    f7c2:	469a      	mov	sl, r3
    f7c4:	681b      	ldr	r3, [r3, #0]
    f7c6:	469c      	mov	ip, r3
    f7c8:	4653      	mov	r3, sl
    f7ca:	4462      	add	r2, ip
    f7cc:	601a      	str	r2, [r3, #0]
    f7ce:	9b01      	ldr	r3, [sp, #4]
    f7d0:	0011      	movs	r1, r2
    f7d2:	4283      	cmp	r3, r0
    f7d4:	d100      	bne.n	f7d8 <_malloc_r+0x234>
    f7d6:	e155      	b.n	fa84 <_malloc_r+0x4e0>
    f7d8:	465b      	mov	r3, fp
    f7da:	681b      	ldr	r3, [r3, #0]
    f7dc:	3301      	adds	r3, #1
    f7de:	d100      	bne.n	f7e2 <_malloc_r+0x23e>
    f7e0:	e16c      	b.n	fabc <_malloc_r+0x518>
    f7e2:	464b      	mov	r3, r9
    f7e4:	9a01      	ldr	r2, [sp, #4]
    f7e6:	1a9b      	subs	r3, r3, r2
    f7e8:	1859      	adds	r1, r3, r1
    f7ea:	4653      	mov	r3, sl
    f7ec:	6019      	str	r1, [r3, #0]
    f7ee:	2307      	movs	r3, #7
    f7f0:	464a      	mov	r2, r9
    f7f2:	4013      	ands	r3, r2
    f7f4:	d100      	bne.n	f7f8 <_malloc_r+0x254>
    f7f6:	e124      	b.n	fa42 <_malloc_r+0x49e>
    f7f8:	2108      	movs	r1, #8
    f7fa:	4689      	mov	r9, r1
    f7fc:	4955      	ldr	r1, [pc, #340]	; (f954 <_malloc_r+0x3b0>)
    f7fe:	1ad2      	subs	r2, r2, r3
    f800:	4491      	add	r9, r2
    f802:	1acb      	subs	r3, r1, r3
    f804:	9a00      	ldr	r2, [sp, #0]
    f806:	0038      	movs	r0, r7
    f808:	444a      	add	r2, r9
    f80a:	0511      	lsls	r1, r2, #20
    f80c:	0d09      	lsrs	r1, r1, #20
    f80e:	1a5b      	subs	r3, r3, r1
    f810:	0019      	movs	r1, r3
    f812:	469b      	mov	fp, r3
    f814:	f000 ff20 	bl	10658 <_sbrk_r>
    f818:	1c43      	adds	r3, r0, #1
    f81a:	d100      	bne.n	f81e <_malloc_r+0x27a>
    f81c:	e142      	b.n	faa4 <_malloc_r+0x500>
    f81e:	464b      	mov	r3, r9
    f820:	1ac0      	subs	r0, r0, r3
    f822:	2301      	movs	r3, #1
    f824:	4458      	add	r0, fp
    f826:	4318      	orrs	r0, r3
    f828:	4653      	mov	r3, sl
    f82a:	681b      	ldr	r3, [r3, #0]
    f82c:	445b      	add	r3, fp
    f82e:	0019      	movs	r1, r3
    f830:	4653      	mov	r3, sl
    f832:	6019      	str	r1, [r3, #0]
    f834:	464b      	mov	r3, r9
    f836:	60b3      	str	r3, [r6, #8]
    f838:	6058      	str	r0, [r3, #4]
    f83a:	42b4      	cmp	r4, r6
    f83c:	d013      	beq.n	f866 <_malloc_r+0x2c2>
    f83e:	4643      	mov	r3, r8
    f840:	2b0f      	cmp	r3, #15
    f842:	d800      	bhi.n	f846 <_malloc_r+0x2a2>
    f844:	e0e8      	b.n	fa18 <_malloc_r+0x474>
    f846:	4643      	mov	r3, r8
    f848:	2207      	movs	r2, #7
    f84a:	6860      	ldr	r0, [r4, #4]
    f84c:	3b0c      	subs	r3, #12
    f84e:	4393      	bics	r3, r2
    f850:	3a06      	subs	r2, #6
    f852:	4002      	ands	r2, r0
    f854:	2005      	movs	r0, #5
    f856:	431a      	orrs	r2, r3
    f858:	6062      	str	r2, [r4, #4]
    f85a:	18e2      	adds	r2, r4, r3
    f85c:	6050      	str	r0, [r2, #4]
    f85e:	6090      	str	r0, [r2, #8]
    f860:	2b0f      	cmp	r3, #15
    f862:	d900      	bls.n	f866 <_malloc_r+0x2c2>
    f864:	e122      	b.n	faac <_malloc_r+0x508>
    f866:	4b3c      	ldr	r3, [pc, #240]	; (f958 <_malloc_r+0x3b4>)
    f868:	681a      	ldr	r2, [r3, #0]
    f86a:	4291      	cmp	r1, r2
    f86c:	d900      	bls.n	f870 <_malloc_r+0x2cc>
    f86e:	6019      	str	r1, [r3, #0]
    f870:	4b3a      	ldr	r3, [pc, #232]	; (f95c <_malloc_r+0x3b8>)
    f872:	681a      	ldr	r2, [r3, #0]
    f874:	4291      	cmp	r1, r2
    f876:	d900      	bls.n	f87a <_malloc_r+0x2d6>
    f878:	6019      	str	r1, [r3, #0]
    f87a:	2303      	movs	r3, #3
    f87c:	68b4      	ldr	r4, [r6, #8]
    f87e:	6862      	ldr	r2, [r4, #4]
    f880:	439a      	bics	r2, r3
    f882:	1b53      	subs	r3, r2, r5
    f884:	4295      	cmp	r5, r2
    f886:	d900      	bls.n	f88a <_malloc_r+0x2e6>
    f888:	e0c9      	b.n	fa1e <_malloc_r+0x47a>
    f88a:	2b0f      	cmp	r3, #15
    f88c:	dc00      	bgt.n	f890 <_malloc_r+0x2ec>
    f88e:	e0c6      	b.n	fa1e <_malloc_r+0x47a>
    f890:	2201      	movs	r2, #1
    f892:	0029      	movs	r1, r5
    f894:	4313      	orrs	r3, r2
    f896:	4311      	orrs	r1, r2
    f898:	1965      	adds	r5, r4, r5
    f89a:	6061      	str	r1, [r4, #4]
    f89c:	0038      	movs	r0, r7
    f89e:	60b5      	str	r5, [r6, #8]
    f8a0:	606b      	str	r3, [r5, #4]
    f8a2:	f000 f9cb 	bl	fc3c <__malloc_unlock>
    f8a6:	0020      	movs	r0, r4
    f8a8:	3008      	adds	r0, #8
    f8aa:	e74a      	b.n	f742 <_malloc_r+0x19e>
    f8ac:	2814      	cmp	r0, #20
    f8ae:	d97a      	bls.n	f9a6 <_malloc_r+0x402>
    f8b0:	2854      	cmp	r0, #84	; 0x54
    f8b2:	d900      	bls.n	f8b6 <_malloc_r+0x312>
    f8b4:	e0ba      	b.n	fa2c <_malloc_r+0x488>
    f8b6:	236e      	movs	r3, #110	; 0x6e
    f8b8:	4698      	mov	r8, r3
    f8ba:	0b28      	lsrs	r0, r5, #12
    f8bc:	4480      	add	r8, r0
    f8be:	306f      	adds	r0, #111	; 0x6f
    f8c0:	00c1      	lsls	r1, r0, #3
    f8c2:	e696      	b.n	f5f2 <_malloc_r+0x4e>
    f8c4:	0a5a      	lsrs	r2, r3, #9
    f8c6:	2a04      	cmp	r2, #4
    f8c8:	d973      	bls.n	f9b2 <_malloc_r+0x40e>
    f8ca:	2a14      	cmp	r2, #20
    f8cc:	d900      	bls.n	f8d0 <_malloc_r+0x32c>
    f8ce:	e0d0      	b.n	fa72 <_malloc_r+0x4ce>
    f8d0:	0011      	movs	r1, r2
    f8d2:	325c      	adds	r2, #92	; 0x5c
    f8d4:	315b      	adds	r1, #91	; 0x5b
    f8d6:	00d2      	lsls	r2, r2, #3
    f8d8:	2308      	movs	r3, #8
    f8da:	425b      	negs	r3, r3
    f8dc:	469c      	mov	ip, r3
    f8de:	18b2      	adds	r2, r6, r2
    f8e0:	4494      	add	ip, r2
    f8e2:	4663      	mov	r3, ip
    f8e4:	689a      	ldr	r2, [r3, #8]
    f8e6:	2303      	movs	r3, #3
    f8e8:	4698      	mov	r8, r3
    f8ea:	4594      	cmp	ip, r2
    f8ec:	d100      	bne.n	f8f0 <_malloc_r+0x34c>
    f8ee:	e0ab      	b.n	fa48 <_malloc_r+0x4a4>
    f8f0:	4643      	mov	r3, r8
    f8f2:	6851      	ldr	r1, [r2, #4]
    f8f4:	4399      	bics	r1, r3
    f8f6:	4589      	cmp	r9, r1
    f8f8:	d300      	bcc.n	f8fc <_malloc_r+0x358>
    f8fa:	e095      	b.n	fa28 <_malloc_r+0x484>
    f8fc:	6892      	ldr	r2, [r2, #8]
    f8fe:	4594      	cmp	ip, r2
    f900:	d1f6      	bne.n	f8f0 <_malloc_r+0x34c>
    f902:	4663      	mov	r3, ip
    f904:	68da      	ldr	r2, [r3, #12]
    f906:	6873      	ldr	r3, [r6, #4]
    f908:	4661      	mov	r1, ip
    f90a:	60e2      	str	r2, [r4, #12]
    f90c:	60a1      	str	r1, [r4, #8]
    f90e:	6094      	str	r4, [r2, #8]
    f910:	60cc      	str	r4, [r1, #12]
    f912:	e6b6      	b.n	f682 <_malloc_r+0xde>
    f914:	2301      	movs	r3, #1
    f916:	1960      	adds	r0, r4, r5
    f918:	431d      	orrs	r5, r3
    f91a:	6065      	str	r5, [r4, #4]
    f91c:	6170      	str	r0, [r6, #20]
    f91e:	6130      	str	r0, [r6, #16]
    f920:	60c2      	str	r2, [r0, #12]
    f922:	6082      	str	r2, [r0, #8]
    f924:	001a      	movs	r2, r3
    f926:	464b      	mov	r3, r9
    f928:	430a      	orrs	r2, r1
    f92a:	6042      	str	r2, [r0, #4]
    f92c:	0038      	movs	r0, r7
    f92e:	50e1      	str	r1, [r4, r3]
    f930:	f000 f984 	bl	fc3c <__malloc_unlock>
    f934:	0020      	movs	r0, r4
    f936:	3008      	adds	r0, #8
    f938:	e703      	b.n	f742 <_malloc_r+0x19e>
    f93a:	46c0      	nop			; (mov r8, r8)
    f93c:	200004a4 	.word	0x200004a4
    f940:	000001ff 	.word	0x000001ff
    f944:	200008ac 	.word	0x200008ac
    f948:	200014bc 	.word	0x200014bc
    f94c:	0000100f 	.word	0x0000100f
    f950:	2000148c 	.word	0x2000148c
    f954:	00001008 	.word	0x00001008
    f958:	200014b4 	.word	0x200014b4
    f95c:	200014b8 	.word	0x200014b8
    f960:	6873      	ldr	r3, [r6, #4]
    f962:	e68e      	b.n	f682 <_malloc_r+0xde>
    f964:	2308      	movs	r3, #8
    f966:	469b      	mov	fp, r3
    f968:	3b07      	subs	r3, #7
    f96a:	44dc      	add	ip, fp
    f96c:	469b      	mov	fp, r3
    f96e:	44da      	add	sl, fp
    f970:	4643      	mov	r3, r8
    f972:	4652      	mov	r2, sl
    f974:	4213      	tst	r3, r2
    f976:	d000      	beq.n	f97a <_malloc_r+0x3d6>
    f978:	e697      	b.n	f6aa <_malloc_r+0x106>
    f97a:	e037      	b.n	f9ec <_malloc_r+0x448>
    f97c:	68dc      	ldr	r4, [r3, #12]
    f97e:	3002      	adds	r0, #2
    f980:	42a3      	cmp	r3, r4
    f982:	d100      	bne.n	f986 <_malloc_r+0x3e2>
    f984:	e655      	b.n	f632 <_malloc_r+0x8e>
    f986:	e6ca      	b.n	f71e <_malloc_r+0x17a>
    f988:	2201      	movs	r2, #1
    f98a:	18e3      	adds	r3, r4, r3
    f98c:	6859      	ldr	r1, [r3, #4]
    f98e:	0038      	movs	r0, r7
    f990:	430a      	orrs	r2, r1
    f992:	605a      	str	r2, [r3, #4]
    f994:	68e3      	ldr	r3, [r4, #12]
    f996:	68a2      	ldr	r2, [r4, #8]
    f998:	60d3      	str	r3, [r2, #12]
    f99a:	609a      	str	r2, [r3, #8]
    f99c:	f000 f94e 	bl	fc3c <__malloc_unlock>
    f9a0:	0020      	movs	r0, r4
    f9a2:	3008      	adds	r0, #8
    f9a4:	e6cd      	b.n	f742 <_malloc_r+0x19e>
    f9a6:	235b      	movs	r3, #91	; 0x5b
    f9a8:	4698      	mov	r8, r3
    f9aa:	4480      	add	r8, r0
    f9ac:	305c      	adds	r0, #92	; 0x5c
    f9ae:	00c1      	lsls	r1, r0, #3
    f9b0:	e61f      	b.n	f5f2 <_malloc_r+0x4e>
    f9b2:	099a      	lsrs	r2, r3, #6
    f9b4:	0011      	movs	r1, r2
    f9b6:	3239      	adds	r2, #57	; 0x39
    f9b8:	3138      	adds	r1, #56	; 0x38
    f9ba:	00d2      	lsls	r2, r2, #3
    f9bc:	e78c      	b.n	f8d8 <_malloc_r+0x334>
    f9be:	42b4      	cmp	r4, r6
    f9c0:	d000      	beq.n	f9c4 <_malloc_r+0x420>
    f9c2:	e75a      	b.n	f87a <_malloc_r+0x2d6>
    f9c4:	4b4f      	ldr	r3, [pc, #316]	; (fb04 <_malloc_r+0x560>)
    f9c6:	9a00      	ldr	r2, [sp, #0]
    f9c8:	469a      	mov	sl, r3
    f9ca:	681b      	ldr	r3, [r3, #0]
    f9cc:	469c      	mov	ip, r3
    f9ce:	4653      	mov	r3, sl
    f9d0:	4462      	add	r2, ip
    f9d2:	0011      	movs	r1, r2
    f9d4:	601a      	str	r2, [r3, #0]
    f9d6:	e6ff      	b.n	f7d8 <_malloc_r+0x234>
    f9d8:	2308      	movs	r3, #8
    f9da:	425b      	negs	r3, r3
    f9dc:	469c      	mov	ip, r3
    f9de:	44e1      	add	r9, ip
    f9e0:	464b      	mov	r3, r9
    f9e2:	689b      	ldr	r3, [r3, #8]
    f9e4:	3801      	subs	r0, #1
    f9e6:	4599      	cmp	r9, r3
    f9e8:	d000      	beq.n	f9ec <_malloc_r+0x448>
    f9ea:	e084      	b.n	faf6 <_malloc_r+0x552>
    f9ec:	4643      	mov	r3, r8
    f9ee:	4203      	tst	r3, r0
    f9f0:	d1f2      	bne.n	f9d8 <_malloc_r+0x434>
    f9f2:	6873      	ldr	r3, [r6, #4]
    f9f4:	438b      	bics	r3, r1
    f9f6:	6073      	str	r3, [r6, #4]
    f9f8:	0049      	lsls	r1, r1, #1
    f9fa:	4299      	cmp	r1, r3
    f9fc:	d900      	bls.n	fa00 <_malloc_r+0x45c>
    f9fe:	e6b5      	b.n	f76c <_malloc_r+0x1c8>
    fa00:	2900      	cmp	r1, #0
    fa02:	d100      	bne.n	fa06 <_malloc_r+0x462>
    fa04:	e6b2      	b.n	f76c <_malloc_r+0x1c8>
    fa06:	4650      	mov	r0, sl
    fa08:	420b      	tst	r3, r1
    fa0a:	d000      	beq.n	fa0e <_malloc_r+0x46a>
    fa0c:	e648      	b.n	f6a0 <_malloc_r+0xfc>
    fa0e:	0049      	lsls	r1, r1, #1
    fa10:	3004      	adds	r0, #4
    fa12:	420b      	tst	r3, r1
    fa14:	d0fb      	beq.n	fa0e <_malloc_r+0x46a>
    fa16:	e643      	b.n	f6a0 <_malloc_r+0xfc>
    fa18:	2301      	movs	r3, #1
    fa1a:	464a      	mov	r2, r9
    fa1c:	6053      	str	r3, [r2, #4]
    fa1e:	0038      	movs	r0, r7
    fa20:	f000 f90c 	bl	fc3c <__malloc_unlock>
    fa24:	2000      	movs	r0, #0
    fa26:	e68c      	b.n	f742 <_malloc_r+0x19e>
    fa28:	4694      	mov	ip, r2
    fa2a:	e76a      	b.n	f902 <_malloc_r+0x35e>
    fa2c:	23aa      	movs	r3, #170	; 0xaa
    fa2e:	005b      	lsls	r3, r3, #1
    fa30:	4298      	cmp	r0, r3
    fa32:	d811      	bhi.n	fa58 <_malloc_r+0x4b4>
    fa34:	3bdd      	subs	r3, #221	; 0xdd
    fa36:	4698      	mov	r8, r3
    fa38:	0be8      	lsrs	r0, r5, #15
    fa3a:	4480      	add	r8, r0
    fa3c:	3078      	adds	r0, #120	; 0x78
    fa3e:	00c1      	lsls	r1, r0, #3
    fa40:	e5d7      	b.n	f5f2 <_malloc_r+0x4e>
    fa42:	2380      	movs	r3, #128	; 0x80
    fa44:	015b      	lsls	r3, r3, #5
    fa46:	e6dd      	b.n	f804 <_malloc_r+0x260>
    fa48:	1089      	asrs	r1, r1, #2
    fa4a:	3b02      	subs	r3, #2
    fa4c:	408b      	lsls	r3, r1
    fa4e:	6872      	ldr	r2, [r6, #4]
    fa50:	4313      	orrs	r3, r2
    fa52:	6073      	str	r3, [r6, #4]
    fa54:	4662      	mov	r2, ip
    fa56:	e757      	b.n	f908 <_malloc_r+0x364>
    fa58:	4b2b      	ldr	r3, [pc, #172]	; (fb08 <_malloc_r+0x564>)
    fa5a:	4298      	cmp	r0, r3
    fa5c:	d81c      	bhi.n	fa98 <_malloc_r+0x4f4>
    fa5e:	237c      	movs	r3, #124	; 0x7c
    fa60:	4698      	mov	r8, r3
    fa62:	0ca8      	lsrs	r0, r5, #18
    fa64:	4480      	add	r8, r0
    fa66:	307d      	adds	r0, #125	; 0x7d
    fa68:	00c1      	lsls	r1, r0, #3
    fa6a:	e5c2      	b.n	f5f2 <_malloc_r+0x4e>
    fa6c:	3310      	adds	r3, #16
    fa6e:	9300      	str	r3, [sp, #0]
    fa70:	e699      	b.n	f7a6 <_malloc_r+0x202>
    fa72:	2a54      	cmp	r2, #84	; 0x54
    fa74:	d826      	bhi.n	fac4 <_malloc_r+0x520>
    fa76:	464b      	mov	r3, r9
    fa78:	0b1a      	lsrs	r2, r3, #12
    fa7a:	0011      	movs	r1, r2
    fa7c:	326f      	adds	r2, #111	; 0x6f
    fa7e:	316e      	adds	r1, #110	; 0x6e
    fa80:	00d2      	lsls	r2, r2, #3
    fa82:	e729      	b.n	f8d8 <_malloc_r+0x334>
    fa84:	051b      	lsls	r3, r3, #20
    fa86:	d000      	beq.n	fa8a <_malloc_r+0x4e6>
    fa88:	e6a6      	b.n	f7d8 <_malloc_r+0x234>
    fa8a:	2001      	movs	r0, #1
    fa8c:	9b00      	ldr	r3, [sp, #0]
    fa8e:	68b2      	ldr	r2, [r6, #8]
    fa90:	4443      	add	r3, r8
    fa92:	4303      	orrs	r3, r0
    fa94:	6053      	str	r3, [r2, #4]
    fa96:	e6e6      	b.n	f866 <_malloc_r+0x2c2>
    fa98:	21fe      	movs	r1, #254	; 0xfe
    fa9a:	237e      	movs	r3, #126	; 0x7e
    fa9c:	207f      	movs	r0, #127	; 0x7f
    fa9e:	0089      	lsls	r1, r1, #2
    faa0:	4698      	mov	r8, r3
    faa2:	e5a6      	b.n	f5f2 <_malloc_r+0x4e>
    faa4:	2300      	movs	r3, #0
    faa6:	2001      	movs	r0, #1
    faa8:	469b      	mov	fp, r3
    faaa:	e6bd      	b.n	f828 <_malloc_r+0x284>
    faac:	0021      	movs	r1, r4
    faae:	0038      	movs	r0, r7
    fab0:	3108      	adds	r1, #8
    fab2:	f7ff fa63 	bl	ef7c <_free_r>
    fab6:	4653      	mov	r3, sl
    fab8:	6819      	ldr	r1, [r3, #0]
    faba:	e6d4      	b.n	f866 <_malloc_r+0x2c2>
    fabc:	465b      	mov	r3, fp
    fabe:	464a      	mov	r2, r9
    fac0:	601a      	str	r2, [r3, #0]
    fac2:	e694      	b.n	f7ee <_malloc_r+0x24a>
    fac4:	21aa      	movs	r1, #170	; 0xaa
    fac6:	0049      	lsls	r1, r1, #1
    fac8:	428a      	cmp	r2, r1
    faca:	d806      	bhi.n	fada <_malloc_r+0x536>
    facc:	464b      	mov	r3, r9
    face:	0bda      	lsrs	r2, r3, #15
    fad0:	0011      	movs	r1, r2
    fad2:	3278      	adds	r2, #120	; 0x78
    fad4:	3177      	adds	r1, #119	; 0x77
    fad6:	00d2      	lsls	r2, r2, #3
    fad8:	e6fe      	b.n	f8d8 <_malloc_r+0x334>
    fada:	490b      	ldr	r1, [pc, #44]	; (fb08 <_malloc_r+0x564>)
    fadc:	428a      	cmp	r2, r1
    fade:	d806      	bhi.n	faee <_malloc_r+0x54a>
    fae0:	464b      	mov	r3, r9
    fae2:	0c9a      	lsrs	r2, r3, #18
    fae4:	0011      	movs	r1, r2
    fae6:	327d      	adds	r2, #125	; 0x7d
    fae8:	317c      	adds	r1, #124	; 0x7c
    faea:	00d2      	lsls	r2, r2, #3
    faec:	e6f4      	b.n	f8d8 <_malloc_r+0x334>
    faee:	22fe      	movs	r2, #254	; 0xfe
    faf0:	217e      	movs	r1, #126	; 0x7e
    faf2:	0092      	lsls	r2, r2, #2
    faf4:	e6f0      	b.n	f8d8 <_malloc_r+0x334>
    faf6:	6873      	ldr	r3, [r6, #4]
    faf8:	e77e      	b.n	f9f8 <_malloc_r+0x454>
    fafa:	002b      	movs	r3, r5
    fafc:	08e8      	lsrs	r0, r5, #3
    fafe:	3308      	adds	r3, #8
    fb00:	e605      	b.n	f70e <_malloc_r+0x16a>
    fb02:	46c0      	nop			; (mov r8, r8)
    fb04:	2000148c 	.word	0x2000148c
    fb08:	00000554 	.word	0x00000554

0000fb0c <memchr>:
    fb0c:	b570      	push	{r4, r5, r6, lr}
    fb0e:	b2cd      	uxtb	r5, r1
    fb10:	0783      	lsls	r3, r0, #30
    fb12:	d034      	beq.n	fb7e <memchr+0x72>
    fb14:	1e54      	subs	r4, r2, #1
    fb16:	2a00      	cmp	r2, #0
    fb18:	d01b      	beq.n	fb52 <memchr+0x46>
    fb1a:	7803      	ldrb	r3, [r0, #0]
    fb1c:	42ab      	cmp	r3, r5
    fb1e:	d019      	beq.n	fb54 <memchr+0x48>
    fb20:	2203      	movs	r2, #3
    fb22:	e004      	b.n	fb2e <memchr+0x22>
    fb24:	3c01      	subs	r4, #1
    fb26:	d314      	bcc.n	fb52 <memchr+0x46>
    fb28:	7803      	ldrb	r3, [r0, #0]
    fb2a:	42ab      	cmp	r3, r5
    fb2c:	d012      	beq.n	fb54 <memchr+0x48>
    fb2e:	3001      	adds	r0, #1
    fb30:	4210      	tst	r0, r2
    fb32:	d1f7      	bne.n	fb24 <memchr+0x18>
    fb34:	2c03      	cmp	r4, #3
    fb36:	d80e      	bhi.n	fb56 <memchr+0x4a>
    fb38:	2c00      	cmp	r4, #0
    fb3a:	d00a      	beq.n	fb52 <memchr+0x46>
    fb3c:	7803      	ldrb	r3, [r0, #0]
    fb3e:	42ab      	cmp	r3, r5
    fb40:	d008      	beq.n	fb54 <memchr+0x48>
    fb42:	1904      	adds	r4, r0, r4
    fb44:	e002      	b.n	fb4c <memchr+0x40>
    fb46:	7803      	ldrb	r3, [r0, #0]
    fb48:	42ab      	cmp	r3, r5
    fb4a:	d003      	beq.n	fb54 <memchr+0x48>
    fb4c:	3001      	adds	r0, #1
    fb4e:	4284      	cmp	r4, r0
    fb50:	d1f9      	bne.n	fb46 <memchr+0x3a>
    fb52:	2000      	movs	r0, #0
    fb54:	bd70      	pop	{r4, r5, r6, pc}
    fb56:	22ff      	movs	r2, #255	; 0xff
    fb58:	060b      	lsls	r3, r1, #24
    fb5a:	0c1b      	lsrs	r3, r3, #16
    fb5c:	4011      	ands	r1, r2
    fb5e:	4319      	orrs	r1, r3
    fb60:	040b      	lsls	r3, r1, #16
    fb62:	4e08      	ldr	r6, [pc, #32]	; (fb84 <memchr+0x78>)
    fb64:	4319      	orrs	r1, r3
    fb66:	6803      	ldr	r3, [r0, #0]
    fb68:	4a07      	ldr	r2, [pc, #28]	; (fb88 <memchr+0x7c>)
    fb6a:	404b      	eors	r3, r1
    fb6c:	189a      	adds	r2, r3, r2
    fb6e:	439a      	bics	r2, r3
    fb70:	4232      	tst	r2, r6
    fb72:	d1e3      	bne.n	fb3c <memchr+0x30>
    fb74:	3c04      	subs	r4, #4
    fb76:	3004      	adds	r0, #4
    fb78:	2c03      	cmp	r4, #3
    fb7a:	d8f4      	bhi.n	fb66 <memchr+0x5a>
    fb7c:	e7dc      	b.n	fb38 <memchr+0x2c>
    fb7e:	0014      	movs	r4, r2
    fb80:	e7d8      	b.n	fb34 <memchr+0x28>
    fb82:	46c0      	nop			; (mov r8, r8)
    fb84:	80808080 	.word	0x80808080
    fb88:	fefefeff 	.word	0xfefefeff

0000fb8c <memmove>:
    fb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb8e:	4288      	cmp	r0, r1
    fb90:	d90a      	bls.n	fba8 <memmove+0x1c>
    fb92:	188b      	adds	r3, r1, r2
    fb94:	4298      	cmp	r0, r3
    fb96:	d207      	bcs.n	fba8 <memmove+0x1c>
    fb98:	1e53      	subs	r3, r2, #1
    fb9a:	2a00      	cmp	r2, #0
    fb9c:	d003      	beq.n	fba6 <memmove+0x1a>
    fb9e:	5cca      	ldrb	r2, [r1, r3]
    fba0:	54c2      	strb	r2, [r0, r3]
    fba2:	3b01      	subs	r3, #1
    fba4:	d2fb      	bcs.n	fb9e <memmove+0x12>
    fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fba8:	0005      	movs	r5, r0
    fbaa:	2a0f      	cmp	r2, #15
    fbac:	d808      	bhi.n	fbc0 <memmove+0x34>
    fbae:	2a00      	cmp	r2, #0
    fbb0:	d0f9      	beq.n	fba6 <memmove+0x1a>
    fbb2:	2300      	movs	r3, #0
    fbb4:	5ccc      	ldrb	r4, [r1, r3]
    fbb6:	54ec      	strb	r4, [r5, r3]
    fbb8:	3301      	adds	r3, #1
    fbba:	4293      	cmp	r3, r2
    fbbc:	d1fa      	bne.n	fbb4 <memmove+0x28>
    fbbe:	e7f2      	b.n	fba6 <memmove+0x1a>
    fbc0:	000b      	movs	r3, r1
    fbc2:	4303      	orrs	r3, r0
    fbc4:	079b      	lsls	r3, r3, #30
    fbc6:	d12d      	bne.n	fc24 <memmove+0x98>
    fbc8:	0015      	movs	r5, r2
    fbca:	000c      	movs	r4, r1
    fbcc:	0003      	movs	r3, r0
    fbce:	3d10      	subs	r5, #16
    fbd0:	092f      	lsrs	r7, r5, #4
    fbd2:	3701      	adds	r7, #1
    fbd4:	013f      	lsls	r7, r7, #4
    fbd6:	19c7      	adds	r7, r0, r7
    fbd8:	6826      	ldr	r6, [r4, #0]
    fbda:	601e      	str	r6, [r3, #0]
    fbdc:	6866      	ldr	r6, [r4, #4]
    fbde:	605e      	str	r6, [r3, #4]
    fbe0:	68a6      	ldr	r6, [r4, #8]
    fbe2:	609e      	str	r6, [r3, #8]
    fbe4:	68e6      	ldr	r6, [r4, #12]
    fbe6:	3410      	adds	r4, #16
    fbe8:	60de      	str	r6, [r3, #12]
    fbea:	3310      	adds	r3, #16
    fbec:	429f      	cmp	r7, r3
    fbee:	d1f3      	bne.n	fbd8 <memmove+0x4c>
    fbf0:	240f      	movs	r4, #15
    fbf2:	43a5      	bics	r5, r4
    fbf4:	3510      	adds	r5, #16
    fbf6:	1949      	adds	r1, r1, r5
    fbf8:	4014      	ands	r4, r2
    fbfa:	1945      	adds	r5, r0, r5
    fbfc:	2c03      	cmp	r4, #3
    fbfe:	d913      	bls.n	fc28 <memmove+0x9c>
    fc00:	2300      	movs	r3, #0
    fc02:	1f27      	subs	r7, r4, #4
    fc04:	08be      	lsrs	r6, r7, #2
    fc06:	3601      	adds	r6, #1
    fc08:	00b6      	lsls	r6, r6, #2
    fc0a:	58cc      	ldr	r4, [r1, r3]
    fc0c:	50ec      	str	r4, [r5, r3]
    fc0e:	3304      	adds	r3, #4
    fc10:	42b3      	cmp	r3, r6
    fc12:	d1fa      	bne.n	fc0a <memmove+0x7e>
    fc14:	2603      	movs	r6, #3
    fc16:	43b7      	bics	r7, r6
    fc18:	1d3c      	adds	r4, r7, #4
    fc1a:	1909      	adds	r1, r1, r4
    fc1c:	192d      	adds	r5, r5, r4
    fc1e:	4032      	ands	r2, r6
    fc20:	d1c7      	bne.n	fbb2 <memmove+0x26>
    fc22:	e7c0      	b.n	fba6 <memmove+0x1a>
    fc24:	0005      	movs	r5, r0
    fc26:	e7c4      	b.n	fbb2 <memmove+0x26>
    fc28:	0022      	movs	r2, r4
    fc2a:	e7c0      	b.n	fbae <memmove+0x22>

0000fc2c <__malloc_lock>:
    fc2c:	b510      	push	{r4, lr}
    fc2e:	4802      	ldr	r0, [pc, #8]	; (fc38 <__malloc_lock+0xc>)
    fc30:	f7ff fc3c 	bl	f4ac <__retarget_lock_acquire_recursive>
    fc34:	bd10      	pop	{r4, pc}
    fc36:	46c0      	nop			; (mov r8, r8)
    fc38:	200015ac 	.word	0x200015ac

0000fc3c <__malloc_unlock>:
    fc3c:	b510      	push	{r4, lr}
    fc3e:	4802      	ldr	r0, [pc, #8]	; (fc48 <__malloc_unlock+0xc>)
    fc40:	f7ff fc36 	bl	f4b0 <__retarget_lock_release_recursive>
    fc44:	bd10      	pop	{r4, pc}
    fc46:	46c0      	nop			; (mov r8, r8)
    fc48:	200015ac 	.word	0x200015ac

0000fc4c <_Balloc>:
    fc4c:	b570      	push	{r4, r5, r6, lr}
    fc4e:	0004      	movs	r4, r0
    fc50:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    fc52:	000d      	movs	r5, r1
    fc54:	2800      	cmp	r0, #0
    fc56:	d00a      	beq.n	fc6e <_Balloc+0x22>
    fc58:	00ab      	lsls	r3, r5, #2
    fc5a:	18c3      	adds	r3, r0, r3
    fc5c:	6818      	ldr	r0, [r3, #0]
    fc5e:	2800      	cmp	r0, #0
    fc60:	d00f      	beq.n	fc82 <_Balloc+0x36>
    fc62:	6802      	ldr	r2, [r0, #0]
    fc64:	601a      	str	r2, [r3, #0]
    fc66:	2300      	movs	r3, #0
    fc68:	6103      	str	r3, [r0, #16]
    fc6a:	60c3      	str	r3, [r0, #12]
    fc6c:	bd70      	pop	{r4, r5, r6, pc}
    fc6e:	2221      	movs	r2, #33	; 0x21
    fc70:	2104      	movs	r1, #4
    fc72:	0020      	movs	r0, r4
    fc74:	f000 fdb0 	bl	107d8 <_calloc_r>
    fc78:	64e0      	str	r0, [r4, #76]	; 0x4c
    fc7a:	2800      	cmp	r0, #0
    fc7c:	d1ec      	bne.n	fc58 <_Balloc+0xc>
    fc7e:	2000      	movs	r0, #0
    fc80:	e7f4      	b.n	fc6c <_Balloc+0x20>
    fc82:	2601      	movs	r6, #1
    fc84:	40ae      	lsls	r6, r5
    fc86:	1d72      	adds	r2, r6, #5
    fc88:	0092      	lsls	r2, r2, #2
    fc8a:	2101      	movs	r1, #1
    fc8c:	0020      	movs	r0, r4
    fc8e:	f000 fda3 	bl	107d8 <_calloc_r>
    fc92:	2800      	cmp	r0, #0
    fc94:	d0f3      	beq.n	fc7e <_Balloc+0x32>
    fc96:	6045      	str	r5, [r0, #4]
    fc98:	6086      	str	r6, [r0, #8]
    fc9a:	e7e4      	b.n	fc66 <_Balloc+0x1a>

0000fc9c <_Bfree>:
    fc9c:	2900      	cmp	r1, #0
    fc9e:	d006      	beq.n	fcae <_Bfree+0x12>
    fca0:	684b      	ldr	r3, [r1, #4]
    fca2:	009a      	lsls	r2, r3, #2
    fca4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    fca6:	189b      	adds	r3, r3, r2
    fca8:	681a      	ldr	r2, [r3, #0]
    fcaa:	600a      	str	r2, [r1, #0]
    fcac:	6019      	str	r1, [r3, #0]
    fcae:	4770      	bx	lr

0000fcb0 <__multadd>:
    fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcb2:	46ce      	mov	lr, r9
    fcb4:	4647      	mov	r7, r8
    fcb6:	4681      	mov	r9, r0
    fcb8:	0008      	movs	r0, r1
    fcba:	b580      	push	{r7, lr}
    fcbc:	000d      	movs	r5, r1
    fcbe:	690c      	ldr	r4, [r1, #16]
    fcc0:	001f      	movs	r7, r3
    fcc2:	2100      	movs	r1, #0
    fcc4:	3014      	adds	r0, #20
    fcc6:	6803      	ldr	r3, [r0, #0]
    fcc8:	3101      	adds	r1, #1
    fcca:	041e      	lsls	r6, r3, #16
    fccc:	0c36      	lsrs	r6, r6, #16
    fcce:	4356      	muls	r6, r2
    fcd0:	0c1b      	lsrs	r3, r3, #16
    fcd2:	4353      	muls	r3, r2
    fcd4:	19f6      	adds	r6, r6, r7
    fcd6:	0c37      	lsrs	r7, r6, #16
    fcd8:	19db      	adds	r3, r3, r7
    fcda:	0436      	lsls	r6, r6, #16
    fcdc:	0c1f      	lsrs	r7, r3, #16
    fcde:	0c36      	lsrs	r6, r6, #16
    fce0:	041b      	lsls	r3, r3, #16
    fce2:	199b      	adds	r3, r3, r6
    fce4:	c008      	stmia	r0!, {r3}
    fce6:	428c      	cmp	r4, r1
    fce8:	dced      	bgt.n	fcc6 <__multadd+0x16>
    fcea:	2f00      	cmp	r7, #0
    fcec:	d008      	beq.n	fd00 <__multadd+0x50>
    fcee:	68ab      	ldr	r3, [r5, #8]
    fcf0:	429c      	cmp	r4, r3
    fcf2:	da0a      	bge.n	fd0a <__multadd+0x5a>
    fcf4:	1d23      	adds	r3, r4, #4
    fcf6:	009b      	lsls	r3, r3, #2
    fcf8:	18eb      	adds	r3, r5, r3
    fcfa:	3401      	adds	r4, #1
    fcfc:	605f      	str	r7, [r3, #4]
    fcfe:	612c      	str	r4, [r5, #16]
    fd00:	0028      	movs	r0, r5
    fd02:	bc0c      	pop	{r2, r3}
    fd04:	4690      	mov	r8, r2
    fd06:	4699      	mov	r9, r3
    fd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd0a:	686b      	ldr	r3, [r5, #4]
    fd0c:	4648      	mov	r0, r9
    fd0e:	1c59      	adds	r1, r3, #1
    fd10:	f7ff ff9c 	bl	fc4c <_Balloc>
    fd14:	0029      	movs	r1, r5
    fd16:	692b      	ldr	r3, [r5, #16]
    fd18:	4680      	mov	r8, r0
    fd1a:	1c9a      	adds	r2, r3, #2
    fd1c:	0092      	lsls	r2, r2, #2
    fd1e:	310c      	adds	r1, #12
    fd20:	300c      	adds	r0, #12
    fd22:	f7fc f999 	bl	c058 <memcpy>
    fd26:	686b      	ldr	r3, [r5, #4]
    fd28:	009a      	lsls	r2, r3, #2
    fd2a:	464b      	mov	r3, r9
    fd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fd2e:	189b      	adds	r3, r3, r2
    fd30:	681a      	ldr	r2, [r3, #0]
    fd32:	602a      	str	r2, [r5, #0]
    fd34:	601d      	str	r5, [r3, #0]
    fd36:	4645      	mov	r5, r8
    fd38:	e7dc      	b.n	fcf4 <__multadd+0x44>
    fd3a:	46c0      	nop			; (mov r8, r8)

0000fd3c <__hi0bits>:
    fd3c:	0003      	movs	r3, r0
    fd3e:	0c02      	lsrs	r2, r0, #16
    fd40:	2000      	movs	r0, #0
    fd42:	2a00      	cmp	r2, #0
    fd44:	d101      	bne.n	fd4a <__hi0bits+0xe>
    fd46:	041b      	lsls	r3, r3, #16
    fd48:	3010      	adds	r0, #16
    fd4a:	0e1a      	lsrs	r2, r3, #24
    fd4c:	d101      	bne.n	fd52 <__hi0bits+0x16>
    fd4e:	3008      	adds	r0, #8
    fd50:	021b      	lsls	r3, r3, #8
    fd52:	0f1a      	lsrs	r2, r3, #28
    fd54:	d101      	bne.n	fd5a <__hi0bits+0x1e>
    fd56:	3004      	adds	r0, #4
    fd58:	011b      	lsls	r3, r3, #4
    fd5a:	0f9a      	lsrs	r2, r3, #30
    fd5c:	d101      	bne.n	fd62 <__hi0bits+0x26>
    fd5e:	3002      	adds	r0, #2
    fd60:	009b      	lsls	r3, r3, #2
    fd62:	2b00      	cmp	r3, #0
    fd64:	db03      	blt.n	fd6e <__hi0bits+0x32>
    fd66:	3001      	adds	r0, #1
    fd68:	005b      	lsls	r3, r3, #1
    fd6a:	d400      	bmi.n	fd6e <__hi0bits+0x32>
    fd6c:	2020      	movs	r0, #32
    fd6e:	4770      	bx	lr

0000fd70 <__lo0bits>:
    fd70:	6803      	ldr	r3, [r0, #0]
    fd72:	075a      	lsls	r2, r3, #29
    fd74:	d009      	beq.n	fd8a <__lo0bits+0x1a>
    fd76:	2200      	movs	r2, #0
    fd78:	07d9      	lsls	r1, r3, #31
    fd7a:	d404      	bmi.n	fd86 <__lo0bits+0x16>
    fd7c:	079a      	lsls	r2, r3, #30
    fd7e:	d420      	bmi.n	fdc2 <__lo0bits+0x52>
    fd80:	2202      	movs	r2, #2
    fd82:	089b      	lsrs	r3, r3, #2
    fd84:	6003      	str	r3, [r0, #0]
    fd86:	0010      	movs	r0, r2
    fd88:	4770      	bx	lr
    fd8a:	0419      	lsls	r1, r3, #16
    fd8c:	2200      	movs	r2, #0
    fd8e:	2900      	cmp	r1, #0
    fd90:	d101      	bne.n	fd96 <__lo0bits+0x26>
    fd92:	0c1b      	lsrs	r3, r3, #16
    fd94:	3210      	adds	r2, #16
    fd96:	21ff      	movs	r1, #255	; 0xff
    fd98:	4219      	tst	r1, r3
    fd9a:	d101      	bne.n	fda0 <__lo0bits+0x30>
    fd9c:	3208      	adds	r2, #8
    fd9e:	0a1b      	lsrs	r3, r3, #8
    fda0:	0719      	lsls	r1, r3, #28
    fda2:	d101      	bne.n	fda8 <__lo0bits+0x38>
    fda4:	3204      	adds	r2, #4
    fda6:	091b      	lsrs	r3, r3, #4
    fda8:	0799      	lsls	r1, r3, #30
    fdaa:	d101      	bne.n	fdb0 <__lo0bits+0x40>
    fdac:	3202      	adds	r2, #2
    fdae:	089b      	lsrs	r3, r3, #2
    fdb0:	07d9      	lsls	r1, r3, #31
    fdb2:	d404      	bmi.n	fdbe <__lo0bits+0x4e>
    fdb4:	085b      	lsrs	r3, r3, #1
    fdb6:	d101      	bne.n	fdbc <__lo0bits+0x4c>
    fdb8:	2220      	movs	r2, #32
    fdba:	e7e4      	b.n	fd86 <__lo0bits+0x16>
    fdbc:	3201      	adds	r2, #1
    fdbe:	6003      	str	r3, [r0, #0]
    fdc0:	e7e1      	b.n	fd86 <__lo0bits+0x16>
    fdc2:	085b      	lsrs	r3, r3, #1
    fdc4:	6003      	str	r3, [r0, #0]
    fdc6:	2201      	movs	r2, #1
    fdc8:	e7dd      	b.n	fd86 <__lo0bits+0x16>
    fdca:	46c0      	nop			; (mov r8, r8)

0000fdcc <__i2b>:
    fdcc:	b510      	push	{r4, lr}
    fdce:	000c      	movs	r4, r1
    fdd0:	2101      	movs	r1, #1
    fdd2:	f7ff ff3b 	bl	fc4c <_Balloc>
    fdd6:	2301      	movs	r3, #1
    fdd8:	6144      	str	r4, [r0, #20]
    fdda:	6103      	str	r3, [r0, #16]
    fddc:	bd10      	pop	{r4, pc}
    fdde:	46c0      	nop			; (mov r8, r8)

0000fde0 <__multiply>:
    fde0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fde2:	4657      	mov	r7, sl
    fde4:	464e      	mov	r6, r9
    fde6:	4645      	mov	r5, r8
    fde8:	46de      	mov	lr, fp
    fdea:	b5e0      	push	{r5, r6, r7, lr}
    fdec:	6914      	ldr	r4, [r2, #16]
    fdee:	690e      	ldr	r6, [r1, #16]
    fdf0:	b085      	sub	sp, #20
    fdf2:	000f      	movs	r7, r1
    fdf4:	0015      	movs	r5, r2
    fdf6:	42a6      	cmp	r6, r4
    fdf8:	da04      	bge.n	fe04 <__multiply+0x24>
    fdfa:	0033      	movs	r3, r6
    fdfc:	0017      	movs	r7, r2
    fdfe:	0026      	movs	r6, r4
    fe00:	000d      	movs	r5, r1
    fe02:	001c      	movs	r4, r3
    fe04:	1933      	adds	r3, r6, r4
    fe06:	4698      	mov	r8, r3
    fe08:	68bb      	ldr	r3, [r7, #8]
    fe0a:	6879      	ldr	r1, [r7, #4]
    fe0c:	4598      	cmp	r8, r3
    fe0e:	dd00      	ble.n	fe12 <__multiply+0x32>
    fe10:	3101      	adds	r1, #1
    fe12:	f7ff ff1b 	bl	fc4c <_Balloc>
    fe16:	2214      	movs	r2, #20
    fe18:	0003      	movs	r3, r0
    fe1a:	4694      	mov	ip, r2
    fe1c:	4463      	add	r3, ip
    fe1e:	469b      	mov	fp, r3
    fe20:	4643      	mov	r3, r8
    fe22:	009b      	lsls	r3, r3, #2
    fe24:	445b      	add	r3, fp
    fe26:	0019      	movs	r1, r3
    fe28:	9302      	str	r3, [sp, #8]
    fe2a:	9003      	str	r0, [sp, #12]
    fe2c:	465b      	mov	r3, fp
    fe2e:	2200      	movs	r2, #0
    fe30:	458b      	cmp	fp, r1
    fe32:	d203      	bcs.n	fe3c <__multiply+0x5c>
    fe34:	9902      	ldr	r1, [sp, #8]
    fe36:	c304      	stmia	r3!, {r2}
    fe38:	4299      	cmp	r1, r3
    fe3a:	d8fc      	bhi.n	fe36 <__multiply+0x56>
    fe3c:	2314      	movs	r3, #20
    fe3e:	00a4      	lsls	r4, r4, #2
    fe40:	469a      	mov	sl, r3
    fe42:	3714      	adds	r7, #20
    fe44:	0023      	movs	r3, r4
    fe46:	46bc      	mov	ip, r7
    fe48:	44aa      	add	sl, r5
    fe4a:	00b6      	lsls	r6, r6, #2
    fe4c:	4453      	add	r3, sl
    fe4e:	9700      	str	r7, [sp, #0]
    fe50:	44b4      	add	ip, r6
    fe52:	9301      	str	r3, [sp, #4]
    fe54:	459a      	cmp	sl, r3
    fe56:	d24f      	bcs.n	fef8 <__multiply+0x118>
    fe58:	4653      	mov	r3, sl
    fe5a:	681b      	ldr	r3, [r3, #0]
    fe5c:	041e      	lsls	r6, r3, #16
    fe5e:	0c36      	lsrs	r6, r6, #16
    fe60:	d020      	beq.n	fea4 <__multiply+0xc4>
    fe62:	465c      	mov	r4, fp
    fe64:	2700      	movs	r7, #0
    fe66:	9d00      	ldr	r5, [sp, #0]
    fe68:	0021      	movs	r1, r4
    fe6a:	cc08      	ldmia	r4!, {r3}
    fe6c:	cd04      	ldmia	r5!, {r2}
    fe6e:	4699      	mov	r9, r3
    fe70:	4648      	mov	r0, r9
    fe72:	0413      	lsls	r3, r2, #16
    fe74:	0c1b      	lsrs	r3, r3, #16
    fe76:	4373      	muls	r3, r6
    fe78:	0400      	lsls	r0, r0, #16
    fe7a:	0c00      	lsrs	r0, r0, #16
    fe7c:	181b      	adds	r3, r3, r0
    fe7e:	19d8      	adds	r0, r3, r7
    fe80:	0c13      	lsrs	r3, r2, #16
    fe82:	464a      	mov	r2, r9
    fe84:	4373      	muls	r3, r6
    fe86:	0c12      	lsrs	r2, r2, #16
    fe88:	189b      	adds	r3, r3, r2
    fe8a:	0c02      	lsrs	r2, r0, #16
    fe8c:	189b      	adds	r3, r3, r2
    fe8e:	0402      	lsls	r2, r0, #16
    fe90:	0c1f      	lsrs	r7, r3, #16
    fe92:	0c12      	lsrs	r2, r2, #16
    fe94:	041b      	lsls	r3, r3, #16
    fe96:	4313      	orrs	r3, r2
    fe98:	600b      	str	r3, [r1, #0]
    fe9a:	45ac      	cmp	ip, r5
    fe9c:	d8e4      	bhi.n	fe68 <__multiply+0x88>
    fe9e:	4653      	mov	r3, sl
    fea0:	6027      	str	r7, [r4, #0]
    fea2:	681b      	ldr	r3, [r3, #0]
    fea4:	0c1e      	lsrs	r6, r3, #16
    fea6:	d020      	beq.n	feea <__multiply+0x10a>
    fea8:	465b      	mov	r3, fp
    feaa:	2100      	movs	r1, #0
    feac:	681b      	ldr	r3, [r3, #0]
    feae:	465c      	mov	r4, fp
    feb0:	0018      	movs	r0, r3
    feb2:	000f      	movs	r7, r1
    feb4:	4662      	mov	r2, ip
    feb6:	9d00      	ldr	r5, [sp, #0]
    feb8:	8829      	ldrh	r1, [r5, #0]
    feba:	0c00      	lsrs	r0, r0, #16
    febc:	4371      	muls	r1, r6
    febe:	1809      	adds	r1, r1, r0
    fec0:	19c9      	adds	r1, r1, r7
    fec2:	041b      	lsls	r3, r3, #16
    fec4:	0408      	lsls	r0, r1, #16
    fec6:	0c1b      	lsrs	r3, r3, #16
    fec8:	4303      	orrs	r3, r0
    feca:	6023      	str	r3, [r4, #0]
    fecc:	cd08      	ldmia	r5!, {r3}
    fece:	6860      	ldr	r0, [r4, #4]
    fed0:	0c1b      	lsrs	r3, r3, #16
    fed2:	4373      	muls	r3, r6
    fed4:	0407      	lsls	r7, r0, #16
    fed6:	0c3f      	lsrs	r7, r7, #16
    fed8:	19db      	adds	r3, r3, r7
    feda:	0c09      	lsrs	r1, r1, #16
    fedc:	185b      	adds	r3, r3, r1
    fede:	0c1f      	lsrs	r7, r3, #16
    fee0:	3404      	adds	r4, #4
    fee2:	42aa      	cmp	r2, r5
    fee4:	d8e8      	bhi.n	feb8 <__multiply+0xd8>
    fee6:	4694      	mov	ip, r2
    fee8:	6023      	str	r3, [r4, #0]
    feea:	2304      	movs	r3, #4
    feec:	4699      	mov	r9, r3
    feee:	9b01      	ldr	r3, [sp, #4]
    fef0:	44ca      	add	sl, r9
    fef2:	44cb      	add	fp, r9
    fef4:	4553      	cmp	r3, sl
    fef6:	d8af      	bhi.n	fe58 <__multiply+0x78>
    fef8:	4643      	mov	r3, r8
    fefa:	2b00      	cmp	r3, #0
    fefc:	dd0e      	ble.n	ff1c <__multiply+0x13c>
    fefe:	9b02      	ldr	r3, [sp, #8]
    ff00:	3b04      	subs	r3, #4
    ff02:	681a      	ldr	r2, [r3, #0]
    ff04:	2a00      	cmp	r2, #0
    ff06:	d109      	bne.n	ff1c <__multiply+0x13c>
    ff08:	4642      	mov	r2, r8
    ff0a:	e003      	b.n	ff14 <__multiply+0x134>
    ff0c:	3b04      	subs	r3, #4
    ff0e:	6819      	ldr	r1, [r3, #0]
    ff10:	2900      	cmp	r1, #0
    ff12:	d102      	bne.n	ff1a <__multiply+0x13a>
    ff14:	3a01      	subs	r2, #1
    ff16:	2a00      	cmp	r2, #0
    ff18:	d1f8      	bne.n	ff0c <__multiply+0x12c>
    ff1a:	4690      	mov	r8, r2
    ff1c:	9b03      	ldr	r3, [sp, #12]
    ff1e:	4642      	mov	r2, r8
    ff20:	0018      	movs	r0, r3
    ff22:	611a      	str	r2, [r3, #16]
    ff24:	b005      	add	sp, #20
    ff26:	bc3c      	pop	{r2, r3, r4, r5}
    ff28:	4690      	mov	r8, r2
    ff2a:	4699      	mov	r9, r3
    ff2c:	46a2      	mov	sl, r4
    ff2e:	46ab      	mov	fp, r5
    ff30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff32:	46c0      	nop			; (mov r8, r8)

0000ff34 <__pow5mult>:
    ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff36:	4647      	mov	r7, r8
    ff38:	46ce      	mov	lr, r9
    ff3a:	2303      	movs	r3, #3
    ff3c:	b580      	push	{r7, lr}
    ff3e:	4680      	mov	r8, r0
    ff40:	000f      	movs	r7, r1
    ff42:	0014      	movs	r4, r2
    ff44:	4013      	ands	r3, r2
    ff46:	d13a      	bne.n	ffbe <__pow5mult+0x8a>
    ff48:	10a4      	asrs	r4, r4, #2
    ff4a:	003e      	movs	r6, r7
    ff4c:	2c00      	cmp	r4, #0
    ff4e:	d025      	beq.n	ff9c <__pow5mult+0x68>
    ff50:	4643      	mov	r3, r8
    ff52:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    ff54:	2d00      	cmp	r5, #0
    ff56:	d03b      	beq.n	ffd0 <__pow5mult+0x9c>
    ff58:	003e      	movs	r6, r7
    ff5a:	2300      	movs	r3, #0
    ff5c:	2701      	movs	r7, #1
    ff5e:	4699      	mov	r9, r3
    ff60:	4227      	tst	r7, r4
    ff62:	d107      	bne.n	ff74 <__pow5mult+0x40>
    ff64:	1064      	asrs	r4, r4, #1
    ff66:	d019      	beq.n	ff9c <__pow5mult+0x68>
    ff68:	6828      	ldr	r0, [r5, #0]
    ff6a:	2800      	cmp	r0, #0
    ff6c:	d01b      	beq.n	ffa6 <__pow5mult+0x72>
    ff6e:	0005      	movs	r5, r0
    ff70:	4227      	tst	r7, r4
    ff72:	d0f7      	beq.n	ff64 <__pow5mult+0x30>
    ff74:	002a      	movs	r2, r5
    ff76:	0031      	movs	r1, r6
    ff78:	4640      	mov	r0, r8
    ff7a:	f7ff ff31 	bl	fde0 <__multiply>
    ff7e:	2e00      	cmp	r6, #0
    ff80:	d01b      	beq.n	ffba <__pow5mult+0x86>
    ff82:	4642      	mov	r2, r8
    ff84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    ff86:	6873      	ldr	r3, [r6, #4]
    ff88:	4694      	mov	ip, r2
    ff8a:	009b      	lsls	r3, r3, #2
    ff8c:	4463      	add	r3, ip
    ff8e:	681a      	ldr	r2, [r3, #0]
    ff90:	1064      	asrs	r4, r4, #1
    ff92:	6032      	str	r2, [r6, #0]
    ff94:	601e      	str	r6, [r3, #0]
    ff96:	0006      	movs	r6, r0
    ff98:	2c00      	cmp	r4, #0
    ff9a:	d1e5      	bne.n	ff68 <__pow5mult+0x34>
    ff9c:	0030      	movs	r0, r6
    ff9e:	bc0c      	pop	{r2, r3}
    ffa0:	4690      	mov	r8, r2
    ffa2:	4699      	mov	r9, r3
    ffa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffa6:	002a      	movs	r2, r5
    ffa8:	0029      	movs	r1, r5
    ffaa:	4640      	mov	r0, r8
    ffac:	f7ff ff18 	bl	fde0 <__multiply>
    ffb0:	464b      	mov	r3, r9
    ffb2:	6028      	str	r0, [r5, #0]
    ffb4:	6003      	str	r3, [r0, #0]
    ffb6:	0005      	movs	r5, r0
    ffb8:	e7da      	b.n	ff70 <__pow5mult+0x3c>
    ffba:	0006      	movs	r6, r0
    ffbc:	e7d2      	b.n	ff64 <__pow5mult+0x30>
    ffbe:	4a0b      	ldr	r2, [pc, #44]	; (ffec <__pow5mult+0xb8>)
    ffc0:	3b01      	subs	r3, #1
    ffc2:	009b      	lsls	r3, r3, #2
    ffc4:	589a      	ldr	r2, [r3, r2]
    ffc6:	2300      	movs	r3, #0
    ffc8:	f7ff fe72 	bl	fcb0 <__multadd>
    ffcc:	0007      	movs	r7, r0
    ffce:	e7bb      	b.n	ff48 <__pow5mult+0x14>
    ffd0:	2101      	movs	r1, #1
    ffd2:	4640      	mov	r0, r8
    ffd4:	f7ff fe3a 	bl	fc4c <_Balloc>
    ffd8:	4b05      	ldr	r3, [pc, #20]	; (fff0 <__pow5mult+0xbc>)
    ffda:	0005      	movs	r5, r0
    ffdc:	6143      	str	r3, [r0, #20]
    ffde:	2301      	movs	r3, #1
    ffe0:	6103      	str	r3, [r0, #16]
    ffe2:	4643      	mov	r3, r8
    ffe4:	6498      	str	r0, [r3, #72]	; 0x48
    ffe6:	2300      	movs	r3, #0
    ffe8:	6003      	str	r3, [r0, #0]
    ffea:	e7b5      	b.n	ff58 <__pow5mult+0x24>
    ffec:	00011708 	.word	0x00011708
    fff0:	00000271 	.word	0x00000271

0000fff4 <__lshift>:
    fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fff6:	464e      	mov	r6, r9
    fff8:	4645      	mov	r5, r8
    fffa:	46de      	mov	lr, fp
    fffc:	4657      	mov	r7, sl
    fffe:	b5e0      	push	{r5, r6, r7, lr}
   10000:	000e      	movs	r6, r1
   10002:	6933      	ldr	r3, [r6, #16]
   10004:	1154      	asrs	r4, r2, #5
   10006:	4698      	mov	r8, r3
   10008:	44a0      	add	r8, r4
   1000a:	4643      	mov	r3, r8
   1000c:	1c5d      	adds	r5, r3, #1
   1000e:	68b3      	ldr	r3, [r6, #8]
   10010:	4683      	mov	fp, r0
   10012:	4691      	mov	r9, r2
   10014:	6849      	ldr	r1, [r1, #4]
   10016:	429d      	cmp	r5, r3
   10018:	dd03      	ble.n	10022 <__lshift+0x2e>
   1001a:	3101      	adds	r1, #1
   1001c:	005b      	lsls	r3, r3, #1
   1001e:	429d      	cmp	r5, r3
   10020:	dcfb      	bgt.n	1001a <__lshift+0x26>
   10022:	4658      	mov	r0, fp
   10024:	f7ff fe12 	bl	fc4c <_Balloc>
   10028:	0003      	movs	r3, r0
   1002a:	4684      	mov	ip, r0
   1002c:	3314      	adds	r3, #20
   1002e:	2c00      	cmp	r4, #0
   10030:	dd06      	ble.n	10040 <__lshift+0x4c>
   10032:	2100      	movs	r1, #0
   10034:	00a4      	lsls	r4, r4, #2
   10036:	001a      	movs	r2, r3
   10038:	191b      	adds	r3, r3, r4
   1003a:	c202      	stmia	r2!, {r1}
   1003c:	4293      	cmp	r3, r2
   1003e:	d1fc      	bne.n	1003a <__lshift+0x46>
   10040:	6932      	ldr	r2, [r6, #16]
   10042:	4648      	mov	r0, r9
   10044:	0097      	lsls	r7, r2, #2
   10046:	0031      	movs	r1, r6
   10048:	221f      	movs	r2, #31
   1004a:	3114      	adds	r1, #20
   1004c:	4010      	ands	r0, r2
   1004e:	19cf      	adds	r7, r1, r7
   10050:	4681      	mov	r9, r0
   10052:	2800      	cmp	r0, #0
   10054:	d025      	beq.n	100a2 <__lshift+0xae>
   10056:	2220      	movs	r2, #32
   10058:	1a12      	subs	r2, r2, r0
   1005a:	4692      	mov	sl, r2
   1005c:	2200      	movs	r2, #0
   1005e:	4648      	mov	r0, r9
   10060:	680c      	ldr	r4, [r1, #0]
   10062:	4084      	lsls	r4, r0
   10064:	4650      	mov	r0, sl
   10066:	4314      	orrs	r4, r2
   10068:	601c      	str	r4, [r3, #0]
   1006a:	c904      	ldmia	r1!, {r2}
   1006c:	3304      	adds	r3, #4
   1006e:	40c2      	lsrs	r2, r0
   10070:	428f      	cmp	r7, r1
   10072:	d8f4      	bhi.n	1005e <__lshift+0x6a>
   10074:	601a      	str	r2, [r3, #0]
   10076:	2a00      	cmp	r2, #0
   10078:	d001      	beq.n	1007e <__lshift+0x8a>
   1007a:	4645      	mov	r5, r8
   1007c:	3502      	adds	r5, #2
   1007e:	4663      	mov	r3, ip
   10080:	3d01      	subs	r5, #1
   10082:	611d      	str	r5, [r3, #16]
   10084:	6873      	ldr	r3, [r6, #4]
   10086:	4660      	mov	r0, ip
   10088:	009a      	lsls	r2, r3, #2
   1008a:	465b      	mov	r3, fp
   1008c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1008e:	189b      	adds	r3, r3, r2
   10090:	681a      	ldr	r2, [r3, #0]
   10092:	6032      	str	r2, [r6, #0]
   10094:	601e      	str	r6, [r3, #0]
   10096:	bc3c      	pop	{r2, r3, r4, r5}
   10098:	4690      	mov	r8, r2
   1009a:	4699      	mov	r9, r3
   1009c:	46a2      	mov	sl, r4
   1009e:	46ab      	mov	fp, r5
   100a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100a2:	c904      	ldmia	r1!, {r2}
   100a4:	c304      	stmia	r3!, {r2}
   100a6:	428f      	cmp	r7, r1
   100a8:	d9e9      	bls.n	1007e <__lshift+0x8a>
   100aa:	c904      	ldmia	r1!, {r2}
   100ac:	c304      	stmia	r3!, {r2}
   100ae:	428f      	cmp	r7, r1
   100b0:	d8f7      	bhi.n	100a2 <__lshift+0xae>
   100b2:	e7e4      	b.n	1007e <__lshift+0x8a>

000100b4 <__mcmp>:
   100b4:	690a      	ldr	r2, [r1, #16]
   100b6:	6903      	ldr	r3, [r0, #16]
   100b8:	b530      	push	{r4, r5, lr}
   100ba:	0005      	movs	r5, r0
   100bc:	1a98      	subs	r0, r3, r2
   100be:	d111      	bne.n	100e4 <__mcmp+0x30>
   100c0:	0092      	lsls	r2, r2, #2
   100c2:	3514      	adds	r5, #20
   100c4:	3114      	adds	r1, #20
   100c6:	18ab      	adds	r3, r5, r2
   100c8:	1889      	adds	r1, r1, r2
   100ca:	e001      	b.n	100d0 <__mcmp+0x1c>
   100cc:	429d      	cmp	r5, r3
   100ce:	d209      	bcs.n	100e4 <__mcmp+0x30>
   100d0:	3b04      	subs	r3, #4
   100d2:	3904      	subs	r1, #4
   100d4:	681c      	ldr	r4, [r3, #0]
   100d6:	680a      	ldr	r2, [r1, #0]
   100d8:	4294      	cmp	r4, r2
   100da:	d0f7      	beq.n	100cc <__mcmp+0x18>
   100dc:	4294      	cmp	r4, r2
   100de:	4180      	sbcs	r0, r0
   100e0:	2201      	movs	r2, #1
   100e2:	4310      	orrs	r0, r2
   100e4:	bd30      	pop	{r4, r5, pc}
   100e6:	46c0      	nop			; (mov r8, r8)

000100e8 <__mdiff>:
   100e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100ea:	4645      	mov	r5, r8
   100ec:	46de      	mov	lr, fp
   100ee:	4657      	mov	r7, sl
   100f0:	464e      	mov	r6, r9
   100f2:	0014      	movs	r4, r2
   100f4:	690b      	ldr	r3, [r1, #16]
   100f6:	6912      	ldr	r2, [r2, #16]
   100f8:	b5e0      	push	{r5, r6, r7, lr}
   100fa:	4688      	mov	r8, r1
   100fc:	1a9d      	subs	r5, r3, r2
   100fe:	d11a      	bne.n	10136 <__mdiff+0x4e>
   10100:	000f      	movs	r7, r1
   10102:	2114      	movs	r1, #20
   10104:	468c      	mov	ip, r1
   10106:	0092      	lsls	r2, r2, #2
   10108:	3714      	adds	r7, #20
   1010a:	44a4      	add	ip, r4
   1010c:	18bb      	adds	r3, r7, r2
   1010e:	4462      	add	r2, ip
   10110:	e002      	b.n	10118 <__mdiff+0x30>
   10112:	429f      	cmp	r7, r3
   10114:	d300      	bcc.n	10118 <__mdiff+0x30>
   10116:	e070      	b.n	101fa <__mdiff+0x112>
   10118:	3b04      	subs	r3, #4
   1011a:	3a04      	subs	r2, #4
   1011c:	681e      	ldr	r6, [r3, #0]
   1011e:	6811      	ldr	r1, [r2, #0]
   10120:	428e      	cmp	r6, r1
   10122:	d0f6      	beq.n	10112 <__mdiff+0x2a>
   10124:	d300      	bcc.n	10128 <__mdiff+0x40>
   10126:	e071      	b.n	1020c <__mdiff+0x124>
   10128:	4643      	mov	r3, r8
   1012a:	003e      	movs	r6, r7
   1012c:	46a0      	mov	r8, r4
   1012e:	4667      	mov	r7, ip
   10130:	001c      	movs	r4, r3
   10132:	2501      	movs	r5, #1
   10134:	e006      	b.n	10144 <__mdiff+0x5c>
   10136:	2d00      	cmp	r5, #0
   10138:	db6a      	blt.n	10210 <__mdiff+0x128>
   1013a:	4647      	mov	r7, r8
   1013c:	0026      	movs	r6, r4
   1013e:	2500      	movs	r5, #0
   10140:	3714      	adds	r7, #20
   10142:	3614      	adds	r6, #20
   10144:	4643      	mov	r3, r8
   10146:	6859      	ldr	r1, [r3, #4]
   10148:	f7ff fd80 	bl	fc4c <_Balloc>
   1014c:	4643      	mov	r3, r8
   1014e:	4681      	mov	r9, r0
   10150:	60c5      	str	r5, [r0, #12]
   10152:	6918      	ldr	r0, [r3, #16]
   10154:	464d      	mov	r5, r9
   10156:	0083      	lsls	r3, r0, #2
   10158:	469c      	mov	ip, r3
   1015a:	6923      	ldr	r3, [r4, #16]
   1015c:	44bc      	add	ip, r7
   1015e:	009b      	lsls	r3, r3, #2
   10160:	4698      	mov	r8, r3
   10162:	2300      	movs	r3, #0
   10164:	44b0      	add	r8, r6
   10166:	3514      	adds	r5, #20
   10168:	469a      	mov	sl, r3
   1016a:	e000      	b.n	1016e <__mdiff+0x86>
   1016c:	0027      	movs	r7, r4
   1016e:	ce04      	ldmia	r6!, {r2}
   10170:	003c      	movs	r4, r7
   10172:	4693      	mov	fp, r2
   10174:	4659      	mov	r1, fp
   10176:	cc08      	ldmia	r4!, {r3}
   10178:	0409      	lsls	r1, r1, #16
   1017a:	041a      	lsls	r2, r3, #16
   1017c:	0c12      	lsrs	r2, r2, #16
   1017e:	4452      	add	r2, sl
   10180:	0c09      	lsrs	r1, r1, #16
   10182:	1a52      	subs	r2, r2, r1
   10184:	0c19      	lsrs	r1, r3, #16
   10186:	465b      	mov	r3, fp
   10188:	0c1b      	lsrs	r3, r3, #16
   1018a:	1acb      	subs	r3, r1, r3
   1018c:	1411      	asrs	r1, r2, #16
   1018e:	185b      	adds	r3, r3, r1
   10190:	0412      	lsls	r2, r2, #16
   10192:	1419      	asrs	r1, r3, #16
   10194:	0c12      	lsrs	r2, r2, #16
   10196:	041b      	lsls	r3, r3, #16
   10198:	468a      	mov	sl, r1
   1019a:	4313      	orrs	r3, r2
   1019c:	1d29      	adds	r1, r5, #4
   1019e:	602b      	str	r3, [r5, #0]
   101a0:	000d      	movs	r5, r1
   101a2:	45b0      	cmp	r8, r6
   101a4:	d8e2      	bhi.n	1016c <__mdiff+0x84>
   101a6:	45a4      	cmp	ip, r4
   101a8:	d916      	bls.n	101d8 <__mdiff+0xf0>
   101aa:	cc08      	ldmia	r4!, {r3}
   101ac:	041a      	lsls	r2, r3, #16
   101ae:	0c12      	lsrs	r2, r2, #16
   101b0:	4452      	add	r2, sl
   101b2:	1416      	asrs	r6, r2, #16
   101b4:	0c1b      	lsrs	r3, r3, #16
   101b6:	199b      	adds	r3, r3, r6
   101b8:	0412      	lsls	r2, r2, #16
   101ba:	141e      	asrs	r6, r3, #16
   101bc:	0c12      	lsrs	r2, r2, #16
   101be:	041b      	lsls	r3, r3, #16
   101c0:	4313      	orrs	r3, r2
   101c2:	46b2      	mov	sl, r6
   101c4:	c508      	stmia	r5!, {r3}
   101c6:	45a4      	cmp	ip, r4
   101c8:	d8ef      	bhi.n	101aa <__mdiff+0xc2>
   101ca:	4662      	mov	r2, ip
   101cc:	2403      	movs	r4, #3
   101ce:	1bd2      	subs	r2, r2, r7
   101d0:	3a05      	subs	r2, #5
   101d2:	43a2      	bics	r2, r4
   101d4:	3204      	adds	r2, #4
   101d6:	1889      	adds	r1, r1, r2
   101d8:	3904      	subs	r1, #4
   101da:	2b00      	cmp	r3, #0
   101dc:	d104      	bne.n	101e8 <__mdiff+0x100>
   101de:	3904      	subs	r1, #4
   101e0:	680b      	ldr	r3, [r1, #0]
   101e2:	3801      	subs	r0, #1
   101e4:	2b00      	cmp	r3, #0
   101e6:	d0fa      	beq.n	101de <__mdiff+0xf6>
   101e8:	464b      	mov	r3, r9
   101ea:	6118      	str	r0, [r3, #16]
   101ec:	4648      	mov	r0, r9
   101ee:	bc3c      	pop	{r2, r3, r4, r5}
   101f0:	4690      	mov	r8, r2
   101f2:	4699      	mov	r9, r3
   101f4:	46a2      	mov	sl, r4
   101f6:	46ab      	mov	fp, r5
   101f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101fa:	2100      	movs	r1, #0
   101fc:	f7ff fd26 	bl	fc4c <_Balloc>
   10200:	2301      	movs	r3, #1
   10202:	6103      	str	r3, [r0, #16]
   10204:	2300      	movs	r3, #0
   10206:	4681      	mov	r9, r0
   10208:	6143      	str	r3, [r0, #20]
   1020a:	e7ef      	b.n	101ec <__mdiff+0x104>
   1020c:	4666      	mov	r6, ip
   1020e:	e799      	b.n	10144 <__mdiff+0x5c>
   10210:	0027      	movs	r7, r4
   10212:	000e      	movs	r6, r1
   10214:	46a0      	mov	r8, r4
   10216:	3714      	adds	r7, #20
   10218:	3614      	adds	r6, #20
   1021a:	000c      	movs	r4, r1
   1021c:	2501      	movs	r5, #1
   1021e:	e791      	b.n	10144 <__mdiff+0x5c>

00010220 <__d2b>:
   10220:	b5f0      	push	{r4, r5, r6, r7, lr}
   10222:	2101      	movs	r1, #1
   10224:	001c      	movs	r4, r3
   10226:	b083      	sub	sp, #12
   10228:	9e08      	ldr	r6, [sp, #32]
   1022a:	0015      	movs	r5, r2
   1022c:	f7ff fd0e 	bl	fc4c <_Balloc>
   10230:	0323      	lsls	r3, r4, #12
   10232:	0064      	lsls	r4, r4, #1
   10234:	0007      	movs	r7, r0
   10236:	0b1b      	lsrs	r3, r3, #12
   10238:	0d64      	lsrs	r4, r4, #21
   1023a:	d002      	beq.n	10242 <__d2b+0x22>
   1023c:	2280      	movs	r2, #128	; 0x80
   1023e:	0352      	lsls	r2, r2, #13
   10240:	4313      	orrs	r3, r2
   10242:	9301      	str	r3, [sp, #4]
   10244:	2d00      	cmp	r5, #0
   10246:	d019      	beq.n	1027c <__d2b+0x5c>
   10248:	4668      	mov	r0, sp
   1024a:	9500      	str	r5, [sp, #0]
   1024c:	f7ff fd90 	bl	fd70 <__lo0bits>
   10250:	2800      	cmp	r0, #0
   10252:	d130      	bne.n	102b6 <__d2b+0x96>
   10254:	9b00      	ldr	r3, [sp, #0]
   10256:	617b      	str	r3, [r7, #20]
   10258:	9b01      	ldr	r3, [sp, #4]
   1025a:	61bb      	str	r3, [r7, #24]
   1025c:	1e5a      	subs	r2, r3, #1
   1025e:	4193      	sbcs	r3, r2
   10260:	1c5d      	adds	r5, r3, #1
   10262:	613d      	str	r5, [r7, #16]
   10264:	2c00      	cmp	r4, #0
   10266:	d014      	beq.n	10292 <__d2b+0x72>
   10268:	4b19      	ldr	r3, [pc, #100]	; (102d0 <__d2b+0xb0>)
   1026a:	469c      	mov	ip, r3
   1026c:	2335      	movs	r3, #53	; 0x35
   1026e:	4464      	add	r4, ip
   10270:	1824      	adds	r4, r4, r0
   10272:	1a18      	subs	r0, r3, r0
   10274:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10276:	6034      	str	r4, [r6, #0]
   10278:	6018      	str	r0, [r3, #0]
   1027a:	e019      	b.n	102b0 <__d2b+0x90>
   1027c:	a801      	add	r0, sp, #4
   1027e:	f7ff fd77 	bl	fd70 <__lo0bits>
   10282:	9b01      	ldr	r3, [sp, #4]
   10284:	3020      	adds	r0, #32
   10286:	617b      	str	r3, [r7, #20]
   10288:	2301      	movs	r3, #1
   1028a:	2501      	movs	r5, #1
   1028c:	613b      	str	r3, [r7, #16]
   1028e:	2c00      	cmp	r4, #0
   10290:	d1ea      	bne.n	10268 <__d2b+0x48>
   10292:	4b10      	ldr	r3, [pc, #64]	; (102d4 <__d2b+0xb4>)
   10294:	469c      	mov	ip, r3
   10296:	4b10      	ldr	r3, [pc, #64]	; (102d8 <__d2b+0xb8>)
   10298:	4460      	add	r0, ip
   1029a:	18eb      	adds	r3, r5, r3
   1029c:	009b      	lsls	r3, r3, #2
   1029e:	18fb      	adds	r3, r7, r3
   102a0:	6030      	str	r0, [r6, #0]
   102a2:	6958      	ldr	r0, [r3, #20]
   102a4:	f7ff fd4a 	bl	fd3c <__hi0bits>
   102a8:	016b      	lsls	r3, r5, #5
   102aa:	1a18      	subs	r0, r3, r0
   102ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   102ae:	6018      	str	r0, [r3, #0]
   102b0:	0038      	movs	r0, r7
   102b2:	b003      	add	sp, #12
   102b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102b6:	9b01      	ldr	r3, [sp, #4]
   102b8:	2220      	movs	r2, #32
   102ba:	0019      	movs	r1, r3
   102bc:	1a12      	subs	r2, r2, r0
   102be:	4091      	lsls	r1, r2
   102c0:	000a      	movs	r2, r1
   102c2:	40c3      	lsrs	r3, r0
   102c4:	9900      	ldr	r1, [sp, #0]
   102c6:	9301      	str	r3, [sp, #4]
   102c8:	430a      	orrs	r2, r1
   102ca:	617a      	str	r2, [r7, #20]
   102cc:	e7c5      	b.n	1025a <__d2b+0x3a>
   102ce:	46c0      	nop			; (mov r8, r8)
   102d0:	fffffbcd 	.word	0xfffffbcd
   102d4:	fffffbce 	.word	0xfffffbce
   102d8:	3fffffff 	.word	0x3fffffff

000102dc <_realloc_r>:
   102dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   102de:	464e      	mov	r6, r9
   102e0:	4645      	mov	r5, r8
   102e2:	46de      	mov	lr, fp
   102e4:	4657      	mov	r7, sl
   102e6:	b5e0      	push	{r5, r6, r7, lr}
   102e8:	b085      	sub	sp, #20
   102ea:	9001      	str	r0, [sp, #4]
   102ec:	000e      	movs	r6, r1
   102ee:	0015      	movs	r5, r2
   102f0:	2900      	cmp	r1, #0
   102f2:	d100      	bne.n	102f6 <_realloc_r+0x1a>
   102f4:	e09e      	b.n	10434 <_realloc_r+0x158>
   102f6:	0037      	movs	r7, r6
   102f8:	9801      	ldr	r0, [sp, #4]
   102fa:	3f08      	subs	r7, #8
   102fc:	f7ff fc96 	bl	fc2c <__malloc_lock>
   10300:	687a      	ldr	r2, [r7, #4]
   10302:	2303      	movs	r3, #3
   10304:	0014      	movs	r4, r2
   10306:	439c      	bics	r4, r3
   10308:	002b      	movs	r3, r5
   1030a:	330b      	adds	r3, #11
   1030c:	46b9      	mov	r9, r7
   1030e:	2b16      	cmp	r3, #22
   10310:	d847      	bhi.n	103a2 <_realloc_r+0xc6>
   10312:	2110      	movs	r1, #16
   10314:	2310      	movs	r3, #16
   10316:	4688      	mov	r8, r1
   10318:	4545      	cmp	r5, r8
   1031a:	d846      	bhi.n	103aa <_realloc_r+0xce>
   1031c:	429c      	cmp	r4, r3
   1031e:	da49      	bge.n	103b4 <_realloc_r+0xd8>
   10320:	49cc      	ldr	r1, [pc, #816]	; (10654 <_realloc_r+0x378>)
   10322:	1938      	adds	r0, r7, r4
   10324:	468b      	mov	fp, r1
   10326:	6889      	ldr	r1, [r1, #8]
   10328:	9002      	str	r0, [sp, #8]
   1032a:	4288      	cmp	r0, r1
   1032c:	d100      	bne.n	10330 <_realloc_r+0x54>
   1032e:	e0c2      	b.n	104b6 <_realloc_r+0x1da>
   10330:	2101      	movs	r1, #1
   10332:	468a      	mov	sl, r1
   10334:	6840      	ldr	r0, [r0, #4]
   10336:	0001      	movs	r1, r0
   10338:	9003      	str	r0, [sp, #12]
   1033a:	4650      	mov	r0, sl
   1033c:	4381      	bics	r1, r0
   1033e:	468c      	mov	ip, r1
   10340:	9902      	ldr	r1, [sp, #8]
   10342:	468b      	mov	fp, r1
   10344:	44dc      	add	ip, fp
   10346:	4661      	mov	r1, ip
   10348:	6849      	ldr	r1, [r1, #4]
   1034a:	4201      	tst	r1, r0
   1034c:	d04d      	beq.n	103ea <_realloc_r+0x10e>
   1034e:	4210      	tst	r0, r2
   10350:	d100      	bne.n	10354 <_realloc_r+0x78>
   10352:	e0a2      	b.n	1049a <_realloc_r+0x1be>
   10354:	0029      	movs	r1, r5
   10356:	9801      	ldr	r0, [sp, #4]
   10358:	f7ff f924 	bl	f5a4 <_malloc_r>
   1035c:	1e05      	subs	r5, r0, #0
   1035e:	d039      	beq.n	103d4 <_realloc_r+0xf8>
   10360:	2301      	movs	r3, #1
   10362:	0002      	movs	r2, r0
   10364:	6879      	ldr	r1, [r7, #4]
   10366:	3a08      	subs	r2, #8
   10368:	4399      	bics	r1, r3
   1036a:	187f      	adds	r7, r7, r1
   1036c:	42ba      	cmp	r2, r7
   1036e:	d100      	bne.n	10372 <_realloc_r+0x96>
   10370:	e12e      	b.n	105d0 <_realloc_r+0x2f4>
   10372:	1f22      	subs	r2, r4, #4
   10374:	2a24      	cmp	r2, #36	; 0x24
   10376:	d900      	bls.n	1037a <_realloc_r+0x9e>
   10378:	e114      	b.n	105a4 <_realloc_r+0x2c8>
   1037a:	2a13      	cmp	r2, #19
   1037c:	d900      	bls.n	10380 <_realloc_r+0xa4>
   1037e:	e0e8      	b.n	10552 <_realloc_r+0x276>
   10380:	0003      	movs	r3, r0
   10382:	0032      	movs	r2, r6
   10384:	6811      	ldr	r1, [r2, #0]
   10386:	6019      	str	r1, [r3, #0]
   10388:	6851      	ldr	r1, [r2, #4]
   1038a:	6059      	str	r1, [r3, #4]
   1038c:	6892      	ldr	r2, [r2, #8]
   1038e:	609a      	str	r2, [r3, #8]
   10390:	9c01      	ldr	r4, [sp, #4]
   10392:	0031      	movs	r1, r6
   10394:	0020      	movs	r0, r4
   10396:	f7fe fdf1 	bl	ef7c <_free_r>
   1039a:	0020      	movs	r0, r4
   1039c:	f7ff fc4e 	bl	fc3c <__malloc_unlock>
   103a0:	e01b      	b.n	103da <_realloc_r+0xfe>
   103a2:	2107      	movs	r1, #7
   103a4:	438b      	bics	r3, r1
   103a6:	4698      	mov	r8, r3
   103a8:	d5b6      	bpl.n	10318 <_realloc_r+0x3c>
   103aa:	230c      	movs	r3, #12
   103ac:	9a01      	ldr	r2, [sp, #4]
   103ae:	2500      	movs	r5, #0
   103b0:	6013      	str	r3, [r2, #0]
   103b2:	e012      	b.n	103da <_realloc_r+0xfe>
   103b4:	0035      	movs	r5, r6
   103b6:	4643      	mov	r3, r8
   103b8:	1ae3      	subs	r3, r4, r3
   103ba:	2b0f      	cmp	r3, #15
   103bc:	d825      	bhi.n	1040a <_realloc_r+0x12e>
   103be:	464b      	mov	r3, r9
   103c0:	2201      	movs	r2, #1
   103c2:	4649      	mov	r1, r9
   103c4:	685b      	ldr	r3, [r3, #4]
   103c6:	4013      	ands	r3, r2
   103c8:	4323      	orrs	r3, r4
   103ca:	604b      	str	r3, [r1, #4]
   103cc:	444c      	add	r4, r9
   103ce:	6863      	ldr	r3, [r4, #4]
   103d0:	431a      	orrs	r2, r3
   103d2:	6062      	str	r2, [r4, #4]
   103d4:	9801      	ldr	r0, [sp, #4]
   103d6:	f7ff fc31 	bl	fc3c <__malloc_unlock>
   103da:	0028      	movs	r0, r5
   103dc:	b005      	add	sp, #20
   103de:	bc3c      	pop	{r2, r3, r4, r5}
   103e0:	4690      	mov	r8, r2
   103e2:	4699      	mov	r9, r3
   103e4:	46a2      	mov	sl, r4
   103e6:	46ab      	mov	fp, r5
   103e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103ea:	2103      	movs	r1, #3
   103ec:	9803      	ldr	r0, [sp, #12]
   103ee:	468c      	mov	ip, r1
   103f0:	4388      	bics	r0, r1
   103f2:	1821      	adds	r1, r4, r0
   103f4:	468b      	mov	fp, r1
   103f6:	4299      	cmp	r1, r3
   103f8:	db21      	blt.n	1043e <_realloc_r+0x162>
   103fa:	9a02      	ldr	r2, [sp, #8]
   103fc:	0035      	movs	r5, r6
   103fe:	68d3      	ldr	r3, [r2, #12]
   10400:	6892      	ldr	r2, [r2, #8]
   10402:	465c      	mov	r4, fp
   10404:	60d3      	str	r3, [r2, #12]
   10406:	609a      	str	r2, [r3, #8]
   10408:	e7d5      	b.n	103b6 <_realloc_r+0xda>
   1040a:	464a      	mov	r2, r9
   1040c:	2001      	movs	r0, #1
   1040e:	4646      	mov	r6, r8
   10410:	6852      	ldr	r2, [r2, #4]
   10412:	4649      	mov	r1, r9
   10414:	4002      	ands	r2, r0
   10416:	4332      	orrs	r2, r6
   10418:	464e      	mov	r6, r9
   1041a:	4441      	add	r1, r8
   1041c:	4303      	orrs	r3, r0
   1041e:	6072      	str	r2, [r6, #4]
   10420:	444c      	add	r4, r9
   10422:	604b      	str	r3, [r1, #4]
   10424:	6863      	ldr	r3, [r4, #4]
   10426:	3108      	adds	r1, #8
   10428:	4318      	orrs	r0, r3
   1042a:	6060      	str	r0, [r4, #4]
   1042c:	9801      	ldr	r0, [sp, #4]
   1042e:	f7fe fda5 	bl	ef7c <_free_r>
   10432:	e7cf      	b.n	103d4 <_realloc_r+0xf8>
   10434:	0011      	movs	r1, r2
   10436:	f7ff f8b5 	bl	f5a4 <_malloc_r>
   1043a:	0005      	movs	r5, r0
   1043c:	e7cd      	b.n	103da <_realloc_r+0xfe>
   1043e:	4651      	mov	r1, sl
   10440:	4211      	tst	r1, r2
   10442:	d000      	beq.n	10446 <_realloc_r+0x16a>
   10444:	e786      	b.n	10354 <_realloc_r+0x78>
   10446:	4661      	mov	r1, ip
   10448:	683a      	ldr	r2, [r7, #0]
   1044a:	1aba      	subs	r2, r7, r2
   1044c:	4692      	mov	sl, r2
   1044e:	6852      	ldr	r2, [r2, #4]
   10450:	438a      	bics	r2, r1
   10452:	1880      	adds	r0, r0, r2
   10454:	4683      	mov	fp, r0
   10456:	44a3      	add	fp, r4
   10458:	459b      	cmp	fp, r3
   1045a:	db26      	blt.n	104aa <_realloc_r+0x1ce>
   1045c:	9a02      	ldr	r2, [sp, #8]
   1045e:	68d3      	ldr	r3, [r2, #12]
   10460:	6892      	ldr	r2, [r2, #8]
   10462:	60d3      	str	r3, [r2, #12]
   10464:	609a      	str	r2, [r3, #8]
   10466:	4653      	mov	r3, sl
   10468:	4652      	mov	r2, sl
   1046a:	4655      	mov	r5, sl
   1046c:	6892      	ldr	r2, [r2, #8]
   1046e:	68db      	ldr	r3, [r3, #12]
   10470:	3508      	adds	r5, #8
   10472:	60d3      	str	r3, [r2, #12]
   10474:	609a      	str	r2, [r3, #8]
   10476:	1f22      	subs	r2, r4, #4
   10478:	2a24      	cmp	r2, #36	; 0x24
   1047a:	d900      	bls.n	1047e <_realloc_r+0x1a2>
   1047c:	e096      	b.n	105ac <_realloc_r+0x2d0>
   1047e:	2a13      	cmp	r2, #19
   10480:	d972      	bls.n	10568 <_realloc_r+0x28c>
   10482:	4653      	mov	r3, sl
   10484:	6831      	ldr	r1, [r6, #0]
   10486:	6099      	str	r1, [r3, #8]
   10488:	6871      	ldr	r1, [r6, #4]
   1048a:	60d9      	str	r1, [r3, #12]
   1048c:	2a1b      	cmp	r2, #27
   1048e:	d900      	bls.n	10492 <_realloc_r+0x1b6>
   10490:	e0a4      	b.n	105dc <_realloc_r+0x300>
   10492:	0032      	movs	r2, r6
   10494:	3310      	adds	r3, #16
   10496:	3208      	adds	r2, #8
   10498:	e068      	b.n	1056c <_realloc_r+0x290>
   1049a:	683a      	ldr	r2, [r7, #0]
   1049c:	1aba      	subs	r2, r7, r2
   1049e:	4692      	mov	sl, r2
   104a0:	4651      	mov	r1, sl
   104a2:	2203      	movs	r2, #3
   104a4:	6849      	ldr	r1, [r1, #4]
   104a6:	4391      	bics	r1, r2
   104a8:	000a      	movs	r2, r1
   104aa:	4693      	mov	fp, r2
   104ac:	44a3      	add	fp, r4
   104ae:	459b      	cmp	fp, r3
   104b0:	da00      	bge.n	104b4 <_realloc_r+0x1d8>
   104b2:	e74f      	b.n	10354 <_realloc_r+0x78>
   104b4:	e7d7      	b.n	10466 <_realloc_r+0x18a>
   104b6:	2003      	movs	r0, #3
   104b8:	9902      	ldr	r1, [sp, #8]
   104ba:	4684      	mov	ip, r0
   104bc:	6849      	ldr	r1, [r1, #4]
   104be:	4381      	bics	r1, r0
   104c0:	4640      	mov	r0, r8
   104c2:	1909      	adds	r1, r1, r4
   104c4:	3010      	adds	r0, #16
   104c6:	9002      	str	r0, [sp, #8]
   104c8:	4281      	cmp	r1, r0
   104ca:	da58      	bge.n	1057e <_realloc_r+0x2a2>
   104cc:	07d2      	lsls	r2, r2, #31
   104ce:	d500      	bpl.n	104d2 <_realloc_r+0x1f6>
   104d0:	e740      	b.n	10354 <_realloc_r+0x78>
   104d2:	4660      	mov	r0, ip
   104d4:	683a      	ldr	r2, [r7, #0]
   104d6:	1aba      	subs	r2, r7, r2
   104d8:	4692      	mov	sl, r2
   104da:	6852      	ldr	r2, [r2, #4]
   104dc:	4382      	bics	r2, r0
   104de:	9802      	ldr	r0, [sp, #8]
   104e0:	1851      	adds	r1, r2, r1
   104e2:	9103      	str	r1, [sp, #12]
   104e4:	4288      	cmp	r0, r1
   104e6:	dce0      	bgt.n	104aa <_realloc_r+0x1ce>
   104e8:	4653      	mov	r3, sl
   104ea:	4652      	mov	r2, sl
   104ec:	4655      	mov	r5, sl
   104ee:	6892      	ldr	r2, [r2, #8]
   104f0:	68db      	ldr	r3, [r3, #12]
   104f2:	3508      	adds	r5, #8
   104f4:	60d3      	str	r3, [r2, #12]
   104f6:	609a      	str	r2, [r3, #8]
   104f8:	1f22      	subs	r2, r4, #4
   104fa:	2a24      	cmp	r2, #36	; 0x24
   104fc:	d900      	bls.n	10500 <_realloc_r+0x224>
   104fe:	e08e      	b.n	1061e <_realloc_r+0x342>
   10500:	2a13      	cmp	r2, #19
   10502:	d800      	bhi.n	10506 <_realloc_r+0x22a>
   10504:	e088      	b.n	10618 <_realloc_r+0x33c>
   10506:	4653      	mov	r3, sl
   10508:	6831      	ldr	r1, [r6, #0]
   1050a:	6099      	str	r1, [r3, #8]
   1050c:	6871      	ldr	r1, [r6, #4]
   1050e:	60d9      	str	r1, [r3, #12]
   10510:	2a1b      	cmp	r2, #27
   10512:	d900      	bls.n	10516 <_realloc_r+0x23a>
   10514:	e088      	b.n	10628 <_realloc_r+0x34c>
   10516:	0032      	movs	r2, r6
   10518:	3310      	adds	r3, #16
   1051a:	3208      	adds	r2, #8
   1051c:	6811      	ldr	r1, [r2, #0]
   1051e:	6019      	str	r1, [r3, #0]
   10520:	6851      	ldr	r1, [r2, #4]
   10522:	6059      	str	r1, [r3, #4]
   10524:	6892      	ldr	r2, [r2, #8]
   10526:	609a      	str	r2, [r3, #8]
   10528:	4651      	mov	r1, sl
   1052a:	465b      	mov	r3, fp
   1052c:	4642      	mov	r2, r8
   1052e:	4441      	add	r1, r8
   10530:	6099      	str	r1, [r3, #8]
   10532:	9b03      	ldr	r3, [sp, #12]
   10534:	9801      	ldr	r0, [sp, #4]
   10536:	1a9a      	subs	r2, r3, r2
   10538:	2301      	movs	r3, #1
   1053a:	431a      	orrs	r2, r3
   1053c:	604a      	str	r2, [r1, #4]
   1053e:	4652      	mov	r2, sl
   10540:	6852      	ldr	r2, [r2, #4]
   10542:	4013      	ands	r3, r2
   10544:	4642      	mov	r2, r8
   10546:	4313      	orrs	r3, r2
   10548:	4652      	mov	r2, sl
   1054a:	6053      	str	r3, [r2, #4]
   1054c:	f7ff fb76 	bl	fc3c <__malloc_unlock>
   10550:	e743      	b.n	103da <_realloc_r+0xfe>
   10552:	6833      	ldr	r3, [r6, #0]
   10554:	6003      	str	r3, [r0, #0]
   10556:	6873      	ldr	r3, [r6, #4]
   10558:	6043      	str	r3, [r0, #4]
   1055a:	2a1b      	cmp	r2, #27
   1055c:	d82d      	bhi.n	105ba <_realloc_r+0x2de>
   1055e:	0003      	movs	r3, r0
   10560:	0032      	movs	r2, r6
   10562:	3308      	adds	r3, #8
   10564:	3208      	adds	r2, #8
   10566:	e70d      	b.n	10384 <_realloc_r+0xa8>
   10568:	002b      	movs	r3, r5
   1056a:	0032      	movs	r2, r6
   1056c:	6811      	ldr	r1, [r2, #0]
   1056e:	465c      	mov	r4, fp
   10570:	6019      	str	r1, [r3, #0]
   10572:	6851      	ldr	r1, [r2, #4]
   10574:	46d1      	mov	r9, sl
   10576:	6059      	str	r1, [r3, #4]
   10578:	6892      	ldr	r2, [r2, #8]
   1057a:	609a      	str	r2, [r3, #8]
   1057c:	e71b      	b.n	103b6 <_realloc_r+0xda>
   1057e:	4643      	mov	r3, r8
   10580:	18fa      	adds	r2, r7, r3
   10582:	465b      	mov	r3, fp
   10584:	609a      	str	r2, [r3, #8]
   10586:	4643      	mov	r3, r8
   10588:	1ac9      	subs	r1, r1, r3
   1058a:	2301      	movs	r3, #1
   1058c:	4319      	orrs	r1, r3
   1058e:	6051      	str	r1, [r2, #4]
   10590:	687a      	ldr	r2, [r7, #4]
   10592:	9801      	ldr	r0, [sp, #4]
   10594:	4013      	ands	r3, r2
   10596:	4642      	mov	r2, r8
   10598:	4313      	orrs	r3, r2
   1059a:	607b      	str	r3, [r7, #4]
   1059c:	f7ff fb4e 	bl	fc3c <__malloc_unlock>
   105a0:	0035      	movs	r5, r6
   105a2:	e71a      	b.n	103da <_realloc_r+0xfe>
   105a4:	0031      	movs	r1, r6
   105a6:	f7ff faf1 	bl	fb8c <memmove>
   105aa:	e6f1      	b.n	10390 <_realloc_r+0xb4>
   105ac:	0031      	movs	r1, r6
   105ae:	0028      	movs	r0, r5
   105b0:	f7ff faec 	bl	fb8c <memmove>
   105b4:	465c      	mov	r4, fp
   105b6:	46d1      	mov	r9, sl
   105b8:	e6fd      	b.n	103b6 <_realloc_r+0xda>
   105ba:	68b3      	ldr	r3, [r6, #8]
   105bc:	6083      	str	r3, [r0, #8]
   105be:	68f3      	ldr	r3, [r6, #12]
   105c0:	60c3      	str	r3, [r0, #12]
   105c2:	2a24      	cmp	r2, #36	; 0x24
   105c4:	d015      	beq.n	105f2 <_realloc_r+0x316>
   105c6:	0003      	movs	r3, r0
   105c8:	0032      	movs	r2, r6
   105ca:	3310      	adds	r3, #16
   105cc:	3210      	adds	r2, #16
   105ce:	e6d9      	b.n	10384 <_realloc_r+0xa8>
   105d0:	6853      	ldr	r3, [r2, #4]
   105d2:	2203      	movs	r2, #3
   105d4:	4393      	bics	r3, r2
   105d6:	18e4      	adds	r4, r4, r3
   105d8:	0035      	movs	r5, r6
   105da:	e6ec      	b.n	103b6 <_realloc_r+0xda>
   105dc:	4653      	mov	r3, sl
   105de:	68b1      	ldr	r1, [r6, #8]
   105e0:	6119      	str	r1, [r3, #16]
   105e2:	68f1      	ldr	r1, [r6, #12]
   105e4:	6159      	str	r1, [r3, #20]
   105e6:	2a24      	cmp	r2, #36	; 0x24
   105e8:	d00c      	beq.n	10604 <_realloc_r+0x328>
   105ea:	0032      	movs	r2, r6
   105ec:	3318      	adds	r3, #24
   105ee:	3210      	adds	r2, #16
   105f0:	e7bc      	b.n	1056c <_realloc_r+0x290>
   105f2:	6933      	ldr	r3, [r6, #16]
   105f4:	0032      	movs	r2, r6
   105f6:	6103      	str	r3, [r0, #16]
   105f8:	0003      	movs	r3, r0
   105fa:	6971      	ldr	r1, [r6, #20]
   105fc:	3318      	adds	r3, #24
   105fe:	3218      	adds	r2, #24
   10600:	6141      	str	r1, [r0, #20]
   10602:	e6bf      	b.n	10384 <_realloc_r+0xa8>
   10604:	4653      	mov	r3, sl
   10606:	6932      	ldr	r2, [r6, #16]
   10608:	4651      	mov	r1, sl
   1060a:	619a      	str	r2, [r3, #24]
   1060c:	0032      	movs	r2, r6
   1060e:	6970      	ldr	r0, [r6, #20]
   10610:	3320      	adds	r3, #32
   10612:	3218      	adds	r2, #24
   10614:	61c8      	str	r0, [r1, #28]
   10616:	e7a9      	b.n	1056c <_realloc_r+0x290>
   10618:	002b      	movs	r3, r5
   1061a:	0032      	movs	r2, r6
   1061c:	e77e      	b.n	1051c <_realloc_r+0x240>
   1061e:	0031      	movs	r1, r6
   10620:	0028      	movs	r0, r5
   10622:	f7ff fab3 	bl	fb8c <memmove>
   10626:	e77f      	b.n	10528 <_realloc_r+0x24c>
   10628:	4653      	mov	r3, sl
   1062a:	68b1      	ldr	r1, [r6, #8]
   1062c:	6119      	str	r1, [r3, #16]
   1062e:	68f1      	ldr	r1, [r6, #12]
   10630:	6159      	str	r1, [r3, #20]
   10632:	2a24      	cmp	r2, #36	; 0x24
   10634:	d003      	beq.n	1063e <_realloc_r+0x362>
   10636:	0032      	movs	r2, r6
   10638:	3318      	adds	r3, #24
   1063a:	3210      	adds	r2, #16
   1063c:	e76e      	b.n	1051c <_realloc_r+0x240>
   1063e:	4653      	mov	r3, sl
   10640:	6932      	ldr	r2, [r6, #16]
   10642:	4651      	mov	r1, sl
   10644:	619a      	str	r2, [r3, #24]
   10646:	0032      	movs	r2, r6
   10648:	6970      	ldr	r0, [r6, #20]
   1064a:	3320      	adds	r3, #32
   1064c:	3218      	adds	r2, #24
   1064e:	61c8      	str	r0, [r1, #28]
   10650:	e764      	b.n	1051c <_realloc_r+0x240>
   10652:	46c0      	nop			; (mov r8, r8)
   10654:	200004a4 	.word	0x200004a4

00010658 <_sbrk_r>:
   10658:	2300      	movs	r3, #0
   1065a:	b570      	push	{r4, r5, r6, lr}
   1065c:	4c06      	ldr	r4, [pc, #24]	; (10678 <_sbrk_r+0x20>)
   1065e:	0005      	movs	r5, r0
   10660:	0008      	movs	r0, r1
   10662:	6023      	str	r3, [r4, #0]
   10664:	f7f5 fffa 	bl	665c <_sbrk>
   10668:	1c43      	adds	r3, r0, #1
   1066a:	d000      	beq.n	1066e <_sbrk_r+0x16>
   1066c:	bd70      	pop	{r4, r5, r6, pc}
   1066e:	6823      	ldr	r3, [r4, #0]
   10670:	2b00      	cmp	r3, #0
   10672:	d0fb      	beq.n	1066c <_sbrk_r+0x14>
   10674:	602b      	str	r3, [r5, #0]
   10676:	e7f9      	b.n	1066c <_sbrk_r+0x14>
   10678:	200015c0 	.word	0x200015c0

0001067c <__sread>:
   1067c:	b570      	push	{r4, r5, r6, lr}
   1067e:	000c      	movs	r4, r1
   10680:	250e      	movs	r5, #14
   10682:	5f49      	ldrsh	r1, [r1, r5]
   10684:	f000 fa26 	bl	10ad4 <_read_r>
   10688:	2800      	cmp	r0, #0
   1068a:	db03      	blt.n	10694 <__sread+0x18>
   1068c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1068e:	181b      	adds	r3, r3, r0
   10690:	6523      	str	r3, [r4, #80]	; 0x50
   10692:	bd70      	pop	{r4, r5, r6, pc}
   10694:	89a3      	ldrh	r3, [r4, #12]
   10696:	4a02      	ldr	r2, [pc, #8]	; (106a0 <__sread+0x24>)
   10698:	4013      	ands	r3, r2
   1069a:	81a3      	strh	r3, [r4, #12]
   1069c:	e7f9      	b.n	10692 <__sread+0x16>
   1069e:	46c0      	nop			; (mov r8, r8)
   106a0:	ffffefff 	.word	0xffffefff

000106a4 <__swrite>:
   106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106a6:	0016      	movs	r6, r2
   106a8:	001f      	movs	r7, r3
   106aa:	220c      	movs	r2, #12
   106ac:	5e8b      	ldrsh	r3, [r1, r2]
   106ae:	0005      	movs	r5, r0
   106b0:	000c      	movs	r4, r1
   106b2:	05da      	lsls	r2, r3, #23
   106b4:	d507      	bpl.n	106c6 <__swrite+0x22>
   106b6:	230e      	movs	r3, #14
   106b8:	5ec9      	ldrsh	r1, [r1, r3]
   106ba:	2200      	movs	r2, #0
   106bc:	2302      	movs	r3, #2
   106be:	f000 f9df 	bl	10a80 <_lseek_r>
   106c2:	220c      	movs	r2, #12
   106c4:	5ea3      	ldrsh	r3, [r4, r2]
   106c6:	4a05      	ldr	r2, [pc, #20]	; (106dc <__swrite+0x38>)
   106c8:	0028      	movs	r0, r5
   106ca:	4013      	ands	r3, r2
   106cc:	81a3      	strh	r3, [r4, #12]
   106ce:	0032      	movs	r2, r6
   106d0:	230e      	movs	r3, #14
   106d2:	5ee1      	ldrsh	r1, [r4, r3]
   106d4:	003b      	movs	r3, r7
   106d6:	f000 f86b 	bl	107b0 <_write_r>
   106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106dc:	ffffefff 	.word	0xffffefff

000106e0 <__sseek>:
   106e0:	b570      	push	{r4, r5, r6, lr}
   106e2:	000c      	movs	r4, r1
   106e4:	250e      	movs	r5, #14
   106e6:	5f49      	ldrsh	r1, [r1, r5]
   106e8:	f000 f9ca 	bl	10a80 <_lseek_r>
   106ec:	1c43      	adds	r3, r0, #1
   106ee:	d006      	beq.n	106fe <__sseek+0x1e>
   106f0:	2380      	movs	r3, #128	; 0x80
   106f2:	89a2      	ldrh	r2, [r4, #12]
   106f4:	015b      	lsls	r3, r3, #5
   106f6:	4313      	orrs	r3, r2
   106f8:	81a3      	strh	r3, [r4, #12]
   106fa:	6520      	str	r0, [r4, #80]	; 0x50
   106fc:	bd70      	pop	{r4, r5, r6, pc}
   106fe:	89a3      	ldrh	r3, [r4, #12]
   10700:	4a01      	ldr	r2, [pc, #4]	; (10708 <__sseek+0x28>)
   10702:	4013      	ands	r3, r2
   10704:	81a3      	strh	r3, [r4, #12]
   10706:	e7f9      	b.n	106fc <__sseek+0x1c>
   10708:	ffffefff 	.word	0xffffefff

0001070c <__sclose>:
   1070c:	b510      	push	{r4, lr}
   1070e:	230e      	movs	r3, #14
   10710:	5ec9      	ldrsh	r1, [r1, r3]
   10712:	f000 f88d 	bl	10830 <_close_r>
   10716:	bd10      	pop	{r4, pc}

00010718 <__sprint_r.part.0>:
   10718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1071a:	464e      	mov	r6, r9
   1071c:	4645      	mov	r5, r8
   1071e:	46de      	mov	lr, fp
   10720:	4657      	mov	r7, sl
   10722:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10724:	b5e0      	push	{r5, r6, r7, lr}
   10726:	4680      	mov	r8, r0
   10728:	000e      	movs	r6, r1
   1072a:	4691      	mov	r9, r2
   1072c:	049b      	lsls	r3, r3, #18
   1072e:	d531      	bpl.n	10794 <__sprint_r.part.0+0x7c>
   10730:	6813      	ldr	r3, [r2, #0]
   10732:	469a      	mov	sl, r3
   10734:	6893      	ldr	r3, [r2, #8]
   10736:	2b00      	cmp	r3, #0
   10738:	d02a      	beq.n	10790 <__sprint_r.part.0+0x78>
   1073a:	4652      	mov	r2, sl
   1073c:	6852      	ldr	r2, [r2, #4]
   1073e:	2500      	movs	r5, #0
   10740:	4693      	mov	fp, r2
   10742:	0897      	lsrs	r7, r2, #2
   10744:	4652      	mov	r2, sl
   10746:	6814      	ldr	r4, [r2, #0]
   10748:	d104      	bne.n	10754 <__sprint_r.part.0+0x3c>
   1074a:	e016      	b.n	1077a <__sprint_r.part.0+0x62>
   1074c:	3501      	adds	r5, #1
   1074e:	3404      	adds	r4, #4
   10750:	42af      	cmp	r7, r5
   10752:	d010      	beq.n	10776 <__sprint_r.part.0+0x5e>
   10754:	0032      	movs	r2, r6
   10756:	6821      	ldr	r1, [r4, #0]
   10758:	4640      	mov	r0, r8
   1075a:	f000 f92d 	bl	109b8 <_fputwc_r>
   1075e:	1c43      	adds	r3, r0, #1
   10760:	d1f4      	bne.n	1074c <__sprint_r.part.0+0x34>
   10762:	464a      	mov	r2, r9
   10764:	2300      	movs	r3, #0
   10766:	6093      	str	r3, [r2, #8]
   10768:	6053      	str	r3, [r2, #4]
   1076a:	bc3c      	pop	{r2, r3, r4, r5}
   1076c:	4690      	mov	r8, r2
   1076e:	4699      	mov	r9, r3
   10770:	46a2      	mov	sl, r4
   10772:	46ab      	mov	fp, r5
   10774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10776:	464b      	mov	r3, r9
   10778:	689b      	ldr	r3, [r3, #8]
   1077a:	465a      	mov	r2, fp
   1077c:	2103      	movs	r1, #3
   1077e:	438a      	bics	r2, r1
   10780:	1a9b      	subs	r3, r3, r2
   10782:	464a      	mov	r2, r9
   10784:	6093      	str	r3, [r2, #8]
   10786:	2208      	movs	r2, #8
   10788:	4694      	mov	ip, r2
   1078a:	44e2      	add	sl, ip
   1078c:	2b00      	cmp	r3, #0
   1078e:	d1d4      	bne.n	1073a <__sprint_r.part.0+0x22>
   10790:	2000      	movs	r0, #0
   10792:	e7e6      	b.n	10762 <__sprint_r.part.0+0x4a>
   10794:	f7fe fcd0 	bl	f138 <__sfvwrite_r>
   10798:	e7e3      	b.n	10762 <__sprint_r.part.0+0x4a>
   1079a:	46c0      	nop			; (mov r8, r8)

0001079c <__sprint_r>:
   1079c:	6893      	ldr	r3, [r2, #8]
   1079e:	b510      	push	{r4, lr}
   107a0:	2b00      	cmp	r3, #0
   107a2:	d002      	beq.n	107aa <__sprint_r+0xe>
   107a4:	f7ff ffb8 	bl	10718 <__sprint_r.part.0>
   107a8:	bd10      	pop	{r4, pc}
   107aa:	6053      	str	r3, [r2, #4]
   107ac:	2000      	movs	r0, #0
   107ae:	e7fb      	b.n	107a8 <__sprint_r+0xc>

000107b0 <_write_r>:
   107b0:	b570      	push	{r4, r5, r6, lr}
   107b2:	0005      	movs	r5, r0
   107b4:	0008      	movs	r0, r1
   107b6:	0011      	movs	r1, r2
   107b8:	2200      	movs	r2, #0
   107ba:	4c06      	ldr	r4, [pc, #24]	; (107d4 <_write_r+0x24>)
   107bc:	6022      	str	r2, [r4, #0]
   107be:	001a      	movs	r2, r3
   107c0:	f000 fa5a 	bl	10c78 <_write>
   107c4:	1c43      	adds	r3, r0, #1
   107c6:	d000      	beq.n	107ca <_write_r+0x1a>
   107c8:	bd70      	pop	{r4, r5, r6, pc}
   107ca:	6823      	ldr	r3, [r4, #0]
   107cc:	2b00      	cmp	r3, #0
   107ce:	d0fb      	beq.n	107c8 <_write_r+0x18>
   107d0:	602b      	str	r3, [r5, #0]
   107d2:	e7f9      	b.n	107c8 <_write_r+0x18>
   107d4:	200015c0 	.word	0x200015c0

000107d8 <_calloc_r>:
   107d8:	b510      	push	{r4, lr}
   107da:	4351      	muls	r1, r2
   107dc:	f7fe fee2 	bl	f5a4 <_malloc_r>
   107e0:	1e04      	subs	r4, r0, #0
   107e2:	d01c      	beq.n	1081e <_calloc_r+0x46>
   107e4:	0003      	movs	r3, r0
   107e6:	3b08      	subs	r3, #8
   107e8:	685a      	ldr	r2, [r3, #4]
   107ea:	2303      	movs	r3, #3
   107ec:	439a      	bics	r2, r3
   107ee:	3a04      	subs	r2, #4
   107f0:	2a24      	cmp	r2, #36	; 0x24
   107f2:	d816      	bhi.n	10822 <_calloc_r+0x4a>
   107f4:	0003      	movs	r3, r0
   107f6:	2a13      	cmp	r2, #19
   107f8:	d90d      	bls.n	10816 <_calloc_r+0x3e>
   107fa:	2100      	movs	r1, #0
   107fc:	3308      	adds	r3, #8
   107fe:	6001      	str	r1, [r0, #0]
   10800:	6041      	str	r1, [r0, #4]
   10802:	2a1b      	cmp	r2, #27
   10804:	d907      	bls.n	10816 <_calloc_r+0x3e>
   10806:	6081      	str	r1, [r0, #8]
   10808:	60c1      	str	r1, [r0, #12]
   1080a:	2a24      	cmp	r2, #36	; 0x24
   1080c:	d10d      	bne.n	1082a <_calloc_r+0x52>
   1080e:	0003      	movs	r3, r0
   10810:	6101      	str	r1, [r0, #16]
   10812:	3318      	adds	r3, #24
   10814:	6141      	str	r1, [r0, #20]
   10816:	2200      	movs	r2, #0
   10818:	601a      	str	r2, [r3, #0]
   1081a:	605a      	str	r2, [r3, #4]
   1081c:	609a      	str	r2, [r3, #8]
   1081e:	0020      	movs	r0, r4
   10820:	bd10      	pop	{r4, pc}
   10822:	2100      	movs	r1, #0
   10824:	f7fb fc5a 	bl	c0dc <memset>
   10828:	e7f9      	b.n	1081e <_calloc_r+0x46>
   1082a:	0003      	movs	r3, r0
   1082c:	3310      	adds	r3, #16
   1082e:	e7f2      	b.n	10816 <_calloc_r+0x3e>

00010830 <_close_r>:
   10830:	2300      	movs	r3, #0
   10832:	b570      	push	{r4, r5, r6, lr}
   10834:	4c06      	ldr	r4, [pc, #24]	; (10850 <_close_r+0x20>)
   10836:	0005      	movs	r5, r0
   10838:	0008      	movs	r0, r1
   1083a:	6023      	str	r3, [r4, #0]
   1083c:	f000 f9f4 	bl	10c28 <_close>
   10840:	1c43      	adds	r3, r0, #1
   10842:	d000      	beq.n	10846 <_close_r+0x16>
   10844:	bd70      	pop	{r4, r5, r6, pc}
   10846:	6823      	ldr	r3, [r4, #0]
   10848:	2b00      	cmp	r3, #0
   1084a:	d0fb      	beq.n	10844 <_close_r+0x14>
   1084c:	602b      	str	r3, [r5, #0]
   1084e:	e7f9      	b.n	10844 <_close_r+0x14>
   10850:	200015c0 	.word	0x200015c0

00010854 <_fclose_r>:
   10854:	b570      	push	{r4, r5, r6, lr}
   10856:	0005      	movs	r5, r0
   10858:	1e0c      	subs	r4, r1, #0
   1085a:	d040      	beq.n	108de <_fclose_r+0x8a>
   1085c:	2800      	cmp	r0, #0
   1085e:	d002      	beq.n	10866 <_fclose_r+0x12>
   10860:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10862:	2b00      	cmp	r3, #0
   10864:	d03e      	beq.n	108e4 <_fclose_r+0x90>
   10866:	2601      	movs	r6, #1
   10868:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1086a:	4233      	tst	r3, r6
   1086c:	d133      	bne.n	108d6 <_fclose_r+0x82>
   1086e:	89a3      	ldrh	r3, [r4, #12]
   10870:	059b      	lsls	r3, r3, #22
   10872:	d543      	bpl.n	108fc <_fclose_r+0xa8>
   10874:	0021      	movs	r1, r4
   10876:	0028      	movs	r0, r5
   10878:	f7fe f9d4 	bl	ec24 <__sflush_r>
   1087c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1087e:	0006      	movs	r6, r0
   10880:	2b00      	cmp	r3, #0
   10882:	d004      	beq.n	1088e <_fclose_r+0x3a>
   10884:	69e1      	ldr	r1, [r4, #28]
   10886:	0028      	movs	r0, r5
   10888:	4798      	blx	r3
   1088a:	2800      	cmp	r0, #0
   1088c:	db44      	blt.n	10918 <_fclose_r+0xc4>
   1088e:	89a3      	ldrh	r3, [r4, #12]
   10890:	061b      	lsls	r3, r3, #24
   10892:	d42a      	bmi.n	108ea <_fclose_r+0x96>
   10894:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10896:	2900      	cmp	r1, #0
   10898:	d008      	beq.n	108ac <_fclose_r+0x58>
   1089a:	0023      	movs	r3, r4
   1089c:	3340      	adds	r3, #64	; 0x40
   1089e:	4299      	cmp	r1, r3
   108a0:	d002      	beq.n	108a8 <_fclose_r+0x54>
   108a2:	0028      	movs	r0, r5
   108a4:	f7fe fb6a 	bl	ef7c <_free_r>
   108a8:	2300      	movs	r3, #0
   108aa:	6323      	str	r3, [r4, #48]	; 0x30
   108ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
   108ae:	2900      	cmp	r1, #0
   108b0:	d004      	beq.n	108bc <_fclose_r+0x68>
   108b2:	0028      	movs	r0, r5
   108b4:	f7fe fb62 	bl	ef7c <_free_r>
   108b8:	2300      	movs	r3, #0
   108ba:	6463      	str	r3, [r4, #68]	; 0x44
   108bc:	f7fe fae4 	bl	ee88 <__sfp_lock_acquire>
   108c0:	2300      	movs	r3, #0
   108c2:	81a3      	strh	r3, [r4, #12]
   108c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   108c6:	07db      	lsls	r3, r3, #31
   108c8:	d514      	bpl.n	108f4 <_fclose_r+0xa0>
   108ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108cc:	f7fe fdec 	bl	f4a8 <__retarget_lock_close_recursive>
   108d0:	f7fe fae2 	bl	ee98 <__sfp_lock_release>
   108d4:	e004      	b.n	108e0 <_fclose_r+0x8c>
   108d6:	220c      	movs	r2, #12
   108d8:	5ea3      	ldrsh	r3, [r4, r2]
   108da:	2b00      	cmp	r3, #0
   108dc:	d1ca      	bne.n	10874 <_fclose_r+0x20>
   108de:	2600      	movs	r6, #0
   108e0:	0030      	movs	r0, r6
   108e2:	bd70      	pop	{r4, r5, r6, pc}
   108e4:	f7fe faa0 	bl	ee28 <__sinit>
   108e8:	e7bd      	b.n	10866 <_fclose_r+0x12>
   108ea:	6921      	ldr	r1, [r4, #16]
   108ec:	0028      	movs	r0, r5
   108ee:	f7fe fb45 	bl	ef7c <_free_r>
   108f2:	e7cf      	b.n	10894 <_fclose_r+0x40>
   108f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108f6:	f7fe fddb 	bl	f4b0 <__retarget_lock_release_recursive>
   108fa:	e7e6      	b.n	108ca <_fclose_r+0x76>
   108fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108fe:	f7fe fdd5 	bl	f4ac <__retarget_lock_acquire_recursive>
   10902:	220c      	movs	r2, #12
   10904:	5ea3      	ldrsh	r3, [r4, r2]
   10906:	2b00      	cmp	r3, #0
   10908:	d1b4      	bne.n	10874 <_fclose_r+0x20>
   1090a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1090c:	401e      	ands	r6, r3
   1090e:	d1e6      	bne.n	108de <_fclose_r+0x8a>
   10910:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10912:	f7fe fdcd 	bl	f4b0 <__retarget_lock_release_recursive>
   10916:	e7e3      	b.n	108e0 <_fclose_r+0x8c>
   10918:	2601      	movs	r6, #1
   1091a:	4276      	negs	r6, r6
   1091c:	e7b7      	b.n	1088e <_fclose_r+0x3a>
   1091e:	46c0      	nop			; (mov r8, r8)

00010920 <__fputwc>:
   10920:	b5f0      	push	{r4, r5, r6, r7, lr}
   10922:	46ce      	mov	lr, r9
   10924:	4647      	mov	r7, r8
   10926:	b580      	push	{r7, lr}
   10928:	b085      	sub	sp, #20
   1092a:	4680      	mov	r8, r0
   1092c:	4689      	mov	r9, r1
   1092e:	0014      	movs	r4, r2
   10930:	f000 f896 	bl	10a60 <__locale_mb_cur_max>
   10934:	2801      	cmp	r0, #1
   10936:	d031      	beq.n	1099c <__fputwc+0x7c>
   10938:	0023      	movs	r3, r4
   1093a:	af03      	add	r7, sp, #12
   1093c:	335c      	adds	r3, #92	; 0x5c
   1093e:	464a      	mov	r2, r9
   10940:	0039      	movs	r1, r7
   10942:	4640      	mov	r0, r8
   10944:	f000 f938 	bl	10bb8 <_wcrtomb_r>
   10948:	0006      	movs	r6, r0
   1094a:	1c43      	adds	r3, r0, #1
   1094c:	d021      	beq.n	10992 <__fputwc+0x72>
   1094e:	2800      	cmp	r0, #0
   10950:	d030      	beq.n	109b4 <__fputwc+0x94>
   10952:	7839      	ldrb	r1, [r7, #0]
   10954:	2500      	movs	r5, #0
   10956:	e007      	b.n	10968 <__fputwc+0x48>
   10958:	6823      	ldr	r3, [r4, #0]
   1095a:	1c5a      	adds	r2, r3, #1
   1095c:	6022      	str	r2, [r4, #0]
   1095e:	7019      	strb	r1, [r3, #0]
   10960:	3501      	adds	r5, #1
   10962:	42b5      	cmp	r5, r6
   10964:	d226      	bcs.n	109b4 <__fputwc+0x94>
   10966:	5d79      	ldrb	r1, [r7, r5]
   10968:	68a3      	ldr	r3, [r4, #8]
   1096a:	3b01      	subs	r3, #1
   1096c:	60a3      	str	r3, [r4, #8]
   1096e:	2b00      	cmp	r3, #0
   10970:	daf2      	bge.n	10958 <__fputwc+0x38>
   10972:	69a2      	ldr	r2, [r4, #24]
   10974:	4293      	cmp	r3, r2
   10976:	db01      	blt.n	1097c <__fputwc+0x5c>
   10978:	290a      	cmp	r1, #10
   1097a:	d1ed      	bne.n	10958 <__fputwc+0x38>
   1097c:	0022      	movs	r2, r4
   1097e:	4640      	mov	r0, r8
   10980:	f000 f8bc 	bl	10afc <__swbuf_r>
   10984:	1c43      	adds	r3, r0, #1
   10986:	d1eb      	bne.n	10960 <__fputwc+0x40>
   10988:	b005      	add	sp, #20
   1098a:	bc0c      	pop	{r2, r3}
   1098c:	4690      	mov	r8, r2
   1098e:	4699      	mov	r9, r3
   10990:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10992:	2240      	movs	r2, #64	; 0x40
   10994:	89a3      	ldrh	r3, [r4, #12]
   10996:	4313      	orrs	r3, r2
   10998:	81a3      	strh	r3, [r4, #12]
   1099a:	e7f5      	b.n	10988 <__fputwc+0x68>
   1099c:	464b      	mov	r3, r9
   1099e:	3b01      	subs	r3, #1
   109a0:	2bfe      	cmp	r3, #254	; 0xfe
   109a2:	d8c9      	bhi.n	10938 <__fputwc+0x18>
   109a4:	466a      	mov	r2, sp
   109a6:	464b      	mov	r3, r9
   109a8:	71d3      	strb	r3, [r2, #7]
   109aa:	79d1      	ldrb	r1, [r2, #7]
   109ac:	af03      	add	r7, sp, #12
   109ae:	7039      	strb	r1, [r7, #0]
   109b0:	2601      	movs	r6, #1
   109b2:	e7cf      	b.n	10954 <__fputwc+0x34>
   109b4:	4648      	mov	r0, r9
   109b6:	e7e7      	b.n	10988 <__fputwc+0x68>

000109b8 <_fputwc_r>:
   109b8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   109ba:	b570      	push	{r4, r5, r6, lr}
   109bc:	0005      	movs	r5, r0
   109be:	000e      	movs	r6, r1
   109c0:	0014      	movs	r4, r2
   109c2:	07db      	lsls	r3, r3, #31
   109c4:	d41e      	bmi.n	10a04 <_fputwc_r+0x4c>
   109c6:	230c      	movs	r3, #12
   109c8:	5ed2      	ldrsh	r2, [r2, r3]
   109ca:	b291      	uxth	r1, r2
   109cc:	058b      	lsls	r3, r1, #22
   109ce:	d516      	bpl.n	109fe <_fputwc_r+0x46>
   109d0:	2380      	movs	r3, #128	; 0x80
   109d2:	019b      	lsls	r3, r3, #6
   109d4:	4219      	tst	r1, r3
   109d6:	d104      	bne.n	109e2 <_fputwc_r+0x2a>
   109d8:	431a      	orrs	r2, r3
   109da:	81a2      	strh	r2, [r4, #12]
   109dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   109de:	4313      	orrs	r3, r2
   109e0:	6663      	str	r3, [r4, #100]	; 0x64
   109e2:	0028      	movs	r0, r5
   109e4:	0022      	movs	r2, r4
   109e6:	0031      	movs	r1, r6
   109e8:	f7ff ff9a 	bl	10920 <__fputwc>
   109ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   109ee:	0005      	movs	r5, r0
   109f0:	07db      	lsls	r3, r3, #31
   109f2:	d402      	bmi.n	109fa <_fputwc_r+0x42>
   109f4:	89a3      	ldrh	r3, [r4, #12]
   109f6:	059b      	lsls	r3, r3, #22
   109f8:	d508      	bpl.n	10a0c <_fputwc_r+0x54>
   109fa:	0028      	movs	r0, r5
   109fc:	bd70      	pop	{r4, r5, r6, pc}
   109fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a00:	f7fe fd54 	bl	f4ac <__retarget_lock_acquire_recursive>
   10a04:	230c      	movs	r3, #12
   10a06:	5ee2      	ldrsh	r2, [r4, r3]
   10a08:	b291      	uxth	r1, r2
   10a0a:	e7e1      	b.n	109d0 <_fputwc_r+0x18>
   10a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a0e:	f7fe fd4f 	bl	f4b0 <__retarget_lock_release_recursive>
   10a12:	e7f2      	b.n	109fa <_fputwc_r+0x42>

00010a14 <_fstat_r>:
   10a14:	2300      	movs	r3, #0
   10a16:	b570      	push	{r4, r5, r6, lr}
   10a18:	4c07      	ldr	r4, [pc, #28]	; (10a38 <_fstat_r+0x24>)
   10a1a:	0005      	movs	r5, r0
   10a1c:	0008      	movs	r0, r1
   10a1e:	0011      	movs	r1, r2
   10a20:	6023      	str	r3, [r4, #0]
   10a22:	f000 f909 	bl	10c38 <_fstat>
   10a26:	1c43      	adds	r3, r0, #1
   10a28:	d000      	beq.n	10a2c <_fstat_r+0x18>
   10a2a:	bd70      	pop	{r4, r5, r6, pc}
   10a2c:	6823      	ldr	r3, [r4, #0]
   10a2e:	2b00      	cmp	r3, #0
   10a30:	d0fb      	beq.n	10a2a <_fstat_r+0x16>
   10a32:	602b      	str	r3, [r5, #0]
   10a34:	e7f9      	b.n	10a2a <_fstat_r+0x16>
   10a36:	46c0      	nop			; (mov r8, r8)
   10a38:	200015c0 	.word	0x200015c0

00010a3c <_isatty_r>:
   10a3c:	2300      	movs	r3, #0
   10a3e:	b570      	push	{r4, r5, r6, lr}
   10a40:	4c06      	ldr	r4, [pc, #24]	; (10a5c <_isatty_r+0x20>)
   10a42:	0005      	movs	r5, r0
   10a44:	0008      	movs	r0, r1
   10a46:	6023      	str	r3, [r4, #0]
   10a48:	f000 f8fe 	bl	10c48 <_isatty>
   10a4c:	1c43      	adds	r3, r0, #1
   10a4e:	d000      	beq.n	10a52 <_isatty_r+0x16>
   10a50:	bd70      	pop	{r4, r5, r6, pc}
   10a52:	6823      	ldr	r3, [r4, #0]
   10a54:	2b00      	cmp	r3, #0
   10a56:	d0fb      	beq.n	10a50 <_isatty_r+0x14>
   10a58:	602b      	str	r3, [r5, #0]
   10a5a:	e7f9      	b.n	10a50 <_isatty_r+0x14>
   10a5c:	200015c0 	.word	0x200015c0

00010a60 <__locale_mb_cur_max>:
   10a60:	4b05      	ldr	r3, [pc, #20]	; (10a78 <__locale_mb_cur_max+0x18>)
   10a62:	681b      	ldr	r3, [r3, #0]
   10a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10a66:	2b00      	cmp	r3, #0
   10a68:	d003      	beq.n	10a72 <__locale_mb_cur_max+0x12>
   10a6a:	2294      	movs	r2, #148	; 0x94
   10a6c:	0052      	lsls	r2, r2, #1
   10a6e:	5c98      	ldrb	r0, [r3, r2]
   10a70:	4770      	bx	lr
   10a72:	4b02      	ldr	r3, [pc, #8]	; (10a7c <__locale_mb_cur_max+0x1c>)
   10a74:	e7f9      	b.n	10a6a <__locale_mb_cur_max+0xa>
   10a76:	46c0      	nop			; (mov r8, r8)
   10a78:	20000070 	.word	0x20000070
   10a7c:	200008b4 	.word	0x200008b4

00010a80 <_lseek_r>:
   10a80:	b570      	push	{r4, r5, r6, lr}
   10a82:	0005      	movs	r5, r0
   10a84:	0008      	movs	r0, r1
   10a86:	0011      	movs	r1, r2
   10a88:	2200      	movs	r2, #0
   10a8a:	4c06      	ldr	r4, [pc, #24]	; (10aa4 <_lseek_r+0x24>)
   10a8c:	6022      	str	r2, [r4, #0]
   10a8e:	001a      	movs	r2, r3
   10a90:	f000 f8e2 	bl	10c58 <_lseek>
   10a94:	1c43      	adds	r3, r0, #1
   10a96:	d000      	beq.n	10a9a <_lseek_r+0x1a>
   10a98:	bd70      	pop	{r4, r5, r6, pc}
   10a9a:	6823      	ldr	r3, [r4, #0]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d0fb      	beq.n	10a98 <_lseek_r+0x18>
   10aa0:	602b      	str	r3, [r5, #0]
   10aa2:	e7f9      	b.n	10a98 <_lseek_r+0x18>
   10aa4:	200015c0 	.word	0x200015c0

00010aa8 <__ascii_mbtowc>:
   10aa8:	b082      	sub	sp, #8
   10aaa:	2900      	cmp	r1, #0
   10aac:	d00a      	beq.n	10ac4 <__ascii_mbtowc+0x1c>
   10aae:	2a00      	cmp	r2, #0
   10ab0:	d00b      	beq.n	10aca <__ascii_mbtowc+0x22>
   10ab2:	2b00      	cmp	r3, #0
   10ab4:	d00b      	beq.n	10ace <__ascii_mbtowc+0x26>
   10ab6:	7813      	ldrb	r3, [r2, #0]
   10ab8:	600b      	str	r3, [r1, #0]
   10aba:	7810      	ldrb	r0, [r2, #0]
   10abc:	1e43      	subs	r3, r0, #1
   10abe:	4198      	sbcs	r0, r3
   10ac0:	b002      	add	sp, #8
   10ac2:	4770      	bx	lr
   10ac4:	a901      	add	r1, sp, #4
   10ac6:	2a00      	cmp	r2, #0
   10ac8:	d1f3      	bne.n	10ab2 <__ascii_mbtowc+0xa>
   10aca:	2000      	movs	r0, #0
   10acc:	e7f8      	b.n	10ac0 <__ascii_mbtowc+0x18>
   10ace:	2002      	movs	r0, #2
   10ad0:	4240      	negs	r0, r0
   10ad2:	e7f5      	b.n	10ac0 <__ascii_mbtowc+0x18>

00010ad4 <_read_r>:
   10ad4:	b570      	push	{r4, r5, r6, lr}
   10ad6:	0005      	movs	r5, r0
   10ad8:	0008      	movs	r0, r1
   10ada:	0011      	movs	r1, r2
   10adc:	2200      	movs	r2, #0
   10ade:	4c06      	ldr	r4, [pc, #24]	; (10af8 <_read_r+0x24>)
   10ae0:	6022      	str	r2, [r4, #0]
   10ae2:	001a      	movs	r2, r3
   10ae4:	f000 f8c0 	bl	10c68 <_read>
   10ae8:	1c43      	adds	r3, r0, #1
   10aea:	d000      	beq.n	10aee <_read_r+0x1a>
   10aec:	bd70      	pop	{r4, r5, r6, pc}
   10aee:	6823      	ldr	r3, [r4, #0]
   10af0:	2b00      	cmp	r3, #0
   10af2:	d0fb      	beq.n	10aec <_read_r+0x18>
   10af4:	602b      	str	r3, [r5, #0]
   10af6:	e7f9      	b.n	10aec <_read_r+0x18>
   10af8:	200015c0 	.word	0x200015c0

00010afc <__swbuf_r>:
   10afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10afe:	0006      	movs	r6, r0
   10b00:	000d      	movs	r5, r1
   10b02:	0014      	movs	r4, r2
   10b04:	2800      	cmp	r0, #0
   10b06:	d002      	beq.n	10b0e <__swbuf_r+0x12>
   10b08:	6b83      	ldr	r3, [r0, #56]	; 0x38
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d04e      	beq.n	10bac <__swbuf_r+0xb0>
   10b0e:	69a3      	ldr	r3, [r4, #24]
   10b10:	60a3      	str	r3, [r4, #8]
   10b12:	230c      	movs	r3, #12
   10b14:	5ee0      	ldrsh	r0, [r4, r3]
   10b16:	b281      	uxth	r1, r0
   10b18:	070b      	lsls	r3, r1, #28
   10b1a:	d53c      	bpl.n	10b96 <__swbuf_r+0x9a>
   10b1c:	6923      	ldr	r3, [r4, #16]
   10b1e:	2b00      	cmp	r3, #0
   10b20:	d039      	beq.n	10b96 <__swbuf_r+0x9a>
   10b22:	22ff      	movs	r2, #255	; 0xff
   10b24:	b2ef      	uxtb	r7, r5
   10b26:	4015      	ands	r5, r2
   10b28:	2280      	movs	r2, #128	; 0x80
   10b2a:	0192      	lsls	r2, r2, #6
   10b2c:	4211      	tst	r1, r2
   10b2e:	d015      	beq.n	10b5c <__swbuf_r+0x60>
   10b30:	6822      	ldr	r2, [r4, #0]
   10b32:	6961      	ldr	r1, [r4, #20]
   10b34:	1ad3      	subs	r3, r2, r3
   10b36:	428b      	cmp	r3, r1
   10b38:	da1b      	bge.n	10b72 <__swbuf_r+0x76>
   10b3a:	3301      	adds	r3, #1
   10b3c:	68a1      	ldr	r1, [r4, #8]
   10b3e:	3901      	subs	r1, #1
   10b40:	60a1      	str	r1, [r4, #8]
   10b42:	1c51      	adds	r1, r2, #1
   10b44:	6021      	str	r1, [r4, #0]
   10b46:	7017      	strb	r7, [r2, #0]
   10b48:	6962      	ldr	r2, [r4, #20]
   10b4a:	429a      	cmp	r2, r3
   10b4c:	d01a      	beq.n	10b84 <__swbuf_r+0x88>
   10b4e:	89a3      	ldrh	r3, [r4, #12]
   10b50:	07db      	lsls	r3, r3, #31
   10b52:	d501      	bpl.n	10b58 <__swbuf_r+0x5c>
   10b54:	2d0a      	cmp	r5, #10
   10b56:	d015      	beq.n	10b84 <__swbuf_r+0x88>
   10b58:	0028      	movs	r0, r5
   10b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b5c:	4302      	orrs	r2, r0
   10b5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10b60:	81a2      	strh	r2, [r4, #12]
   10b62:	4a14      	ldr	r2, [pc, #80]	; (10bb4 <__swbuf_r+0xb8>)
   10b64:	400a      	ands	r2, r1
   10b66:	6662      	str	r2, [r4, #100]	; 0x64
   10b68:	6961      	ldr	r1, [r4, #20]
   10b6a:	6822      	ldr	r2, [r4, #0]
   10b6c:	1ad3      	subs	r3, r2, r3
   10b6e:	428b      	cmp	r3, r1
   10b70:	dbe3      	blt.n	10b3a <__swbuf_r+0x3e>
   10b72:	0021      	movs	r1, r4
   10b74:	0030      	movs	r0, r6
   10b76:	f7fe f8fd 	bl	ed74 <_fflush_r>
   10b7a:	2800      	cmp	r0, #0
   10b7c:	d108      	bne.n	10b90 <__swbuf_r+0x94>
   10b7e:	6822      	ldr	r2, [r4, #0]
   10b80:	2301      	movs	r3, #1
   10b82:	e7db      	b.n	10b3c <__swbuf_r+0x40>
   10b84:	0021      	movs	r1, r4
   10b86:	0030      	movs	r0, r6
   10b88:	f7fe f8f4 	bl	ed74 <_fflush_r>
   10b8c:	2800      	cmp	r0, #0
   10b8e:	d0e3      	beq.n	10b58 <__swbuf_r+0x5c>
   10b90:	2501      	movs	r5, #1
   10b92:	426d      	negs	r5, r5
   10b94:	e7e0      	b.n	10b58 <__swbuf_r+0x5c>
   10b96:	0021      	movs	r1, r4
   10b98:	0030      	movs	r0, r6
   10b9a:	f7fc fedd 	bl	d958 <__swsetup_r>
   10b9e:	2800      	cmp	r0, #0
   10ba0:	d1f6      	bne.n	10b90 <__swbuf_r+0x94>
   10ba2:	230c      	movs	r3, #12
   10ba4:	5ee0      	ldrsh	r0, [r4, r3]
   10ba6:	6923      	ldr	r3, [r4, #16]
   10ba8:	b281      	uxth	r1, r0
   10baa:	e7ba      	b.n	10b22 <__swbuf_r+0x26>
   10bac:	f7fe f93c 	bl	ee28 <__sinit>
   10bb0:	e7ad      	b.n	10b0e <__swbuf_r+0x12>
   10bb2:	46c0      	nop			; (mov r8, r8)
   10bb4:	ffffdfff 	.word	0xffffdfff

00010bb8 <_wcrtomb_r>:
   10bb8:	b570      	push	{r4, r5, r6, lr}
   10bba:	001d      	movs	r5, r3
   10bbc:	4b11      	ldr	r3, [pc, #68]	; (10c04 <_wcrtomb_r+0x4c>)
   10bbe:	b084      	sub	sp, #16
   10bc0:	681b      	ldr	r3, [r3, #0]
   10bc2:	0004      	movs	r4, r0
   10bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10bc6:	2900      	cmp	r1, #0
   10bc8:	d00e      	beq.n	10be8 <_wcrtomb_r+0x30>
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d016      	beq.n	10bfc <_wcrtomb_r+0x44>
   10bce:	20e0      	movs	r0, #224	; 0xe0
   10bd0:	581e      	ldr	r6, [r3, r0]
   10bd2:	002b      	movs	r3, r5
   10bd4:	0020      	movs	r0, r4
   10bd6:	47b0      	blx	r6
   10bd8:	1c43      	adds	r3, r0, #1
   10bda:	d103      	bne.n	10be4 <_wcrtomb_r+0x2c>
   10bdc:	2300      	movs	r3, #0
   10bde:	602b      	str	r3, [r5, #0]
   10be0:	338a      	adds	r3, #138	; 0x8a
   10be2:	6023      	str	r3, [r4, #0]
   10be4:	b004      	add	sp, #16
   10be6:	bd70      	pop	{r4, r5, r6, pc}
   10be8:	2b00      	cmp	r3, #0
   10bea:	d009      	beq.n	10c00 <_wcrtomb_r+0x48>
   10bec:	22e0      	movs	r2, #224	; 0xe0
   10bee:	a901      	add	r1, sp, #4
   10bf0:	589e      	ldr	r6, [r3, r2]
   10bf2:	0020      	movs	r0, r4
   10bf4:	002b      	movs	r3, r5
   10bf6:	2200      	movs	r2, #0
   10bf8:	47b0      	blx	r6
   10bfa:	e7ed      	b.n	10bd8 <_wcrtomb_r+0x20>
   10bfc:	4b02      	ldr	r3, [pc, #8]	; (10c08 <_wcrtomb_r+0x50>)
   10bfe:	e7e6      	b.n	10bce <_wcrtomb_r+0x16>
   10c00:	4b01      	ldr	r3, [pc, #4]	; (10c08 <_wcrtomb_r+0x50>)
   10c02:	e7f3      	b.n	10bec <_wcrtomb_r+0x34>
   10c04:	20000070 	.word	0x20000070
   10c08:	200008b4 	.word	0x200008b4

00010c0c <__ascii_wctomb>:
   10c0c:	2900      	cmp	r1, #0
   10c0e:	d004      	beq.n	10c1a <__ascii_wctomb+0xe>
   10c10:	2aff      	cmp	r2, #255	; 0xff
   10c12:	d804      	bhi.n	10c1e <__ascii_wctomb+0x12>
   10c14:	2001      	movs	r0, #1
   10c16:	700a      	strb	r2, [r1, #0]
   10c18:	4770      	bx	lr
   10c1a:	2000      	movs	r0, #0
   10c1c:	e7fc      	b.n	10c18 <__ascii_wctomb+0xc>
   10c1e:	238a      	movs	r3, #138	; 0x8a
   10c20:	6003      	str	r3, [r0, #0]
   10c22:	2001      	movs	r0, #1
   10c24:	4240      	negs	r0, r0
   10c26:	e7f7      	b.n	10c18 <__ascii_wctomb+0xc>

00010c28 <_close>:
   10c28:	2258      	movs	r2, #88	; 0x58
   10c2a:	2001      	movs	r0, #1
   10c2c:	4b01      	ldr	r3, [pc, #4]	; (10c34 <_close+0xc>)
   10c2e:	4240      	negs	r0, r0
   10c30:	601a      	str	r2, [r3, #0]
   10c32:	4770      	bx	lr
   10c34:	200015c0 	.word	0x200015c0

00010c38 <_fstat>:
   10c38:	2258      	movs	r2, #88	; 0x58
   10c3a:	2001      	movs	r0, #1
   10c3c:	4b01      	ldr	r3, [pc, #4]	; (10c44 <_fstat+0xc>)
   10c3e:	4240      	negs	r0, r0
   10c40:	601a      	str	r2, [r3, #0]
   10c42:	4770      	bx	lr
   10c44:	200015c0 	.word	0x200015c0

00010c48 <_isatty>:
   10c48:	2258      	movs	r2, #88	; 0x58
   10c4a:	4b02      	ldr	r3, [pc, #8]	; (10c54 <_isatty+0xc>)
   10c4c:	2000      	movs	r0, #0
   10c4e:	601a      	str	r2, [r3, #0]
   10c50:	4770      	bx	lr
   10c52:	46c0      	nop			; (mov r8, r8)
   10c54:	200015c0 	.word	0x200015c0

00010c58 <_lseek>:
   10c58:	2258      	movs	r2, #88	; 0x58
   10c5a:	2001      	movs	r0, #1
   10c5c:	4b01      	ldr	r3, [pc, #4]	; (10c64 <_lseek+0xc>)
   10c5e:	4240      	negs	r0, r0
   10c60:	601a      	str	r2, [r3, #0]
   10c62:	4770      	bx	lr
   10c64:	200015c0 	.word	0x200015c0

00010c68 <_read>:
   10c68:	2258      	movs	r2, #88	; 0x58
   10c6a:	2001      	movs	r0, #1
   10c6c:	4b01      	ldr	r3, [pc, #4]	; (10c74 <_read+0xc>)
   10c6e:	4240      	negs	r0, r0
   10c70:	601a      	str	r2, [r3, #0]
   10c72:	4770      	bx	lr
   10c74:	200015c0 	.word	0x200015c0

00010c78 <_write>:
   10c78:	2258      	movs	r2, #88	; 0x58
   10c7a:	2001      	movs	r0, #1
   10c7c:	4b01      	ldr	r3, [pc, #4]	; (10c84 <_write+0xc>)
   10c7e:	4240      	negs	r0, r0
   10c80:	601a      	str	r2, [r3, #0]
   10c82:	4770      	bx	lr
   10c84:	200015c0 	.word	0x200015c0
   10c88:	69646152 	.word	0x69646152
   10c8c:	726f7461 	.word	0x726f7461
   10c90:	544f4e20 	.word	0x544f4e20
   10c94:	61745320 	.word	0x61745320
   10c98:	64657472 	.word	0x64657472
   10c9c:	00000000 	.word	0x00000000
   10ca0:	00000a0d 	.word	0x00000a0d
   10ca4:	69646152 	.word	0x69646152
   10ca8:	726f7461 	.word	0x726f7461
   10cac:	61745320 	.word	0x61745320
   10cb0:	64657472 	.word	0x64657472
   10cb4:	00000000 	.word	0x00000000
   10cb8:	6963734f 	.word	0x6963734f
   10cbc:	74616c6c 	.word	0x74616c6c
   10cc0:	4e20726f 	.word	0x4e20726f
   10cc4:	5320544f 	.word	0x5320544f
   10cc8:	74726174 	.word	0x74726174
   10ccc:	00006465 	.word	0x00006465
   10cd0:	6963734f 	.word	0x6963734f
   10cd4:	74616c6c 	.word	0x74616c6c
   10cd8:	5320726f 	.word	0x5320726f
   10cdc:	74726174 	.word	0x74726174
   10ce0:	00006465 	.word	0x00006465
   10ce4:	6578694d 	.word	0x6578694d
   10ce8:	6e452072 	.word	0x6e452072
   10cec:	656c6261 	.word	0x656c6261
   10cf0:	00000064 	.word	0x00000064
   10cf4:	6578694d 	.word	0x6578694d
   10cf8:	69442072 	.word	0x69442072
   10cfc:	6c626173 	.word	0x6c626173
   10d00:	00006465 	.word	0x00006465
   10d04:	004a325b 	.word	0x004a325b
   10d08:	74696e69 	.word	0x74696e69
   10d0c:	69746169 	.word	0x69746169
   10d10:	4c20676e 	.word	0x4c20676e
   10d14:	4d204354 	.word	0x4d204354
   10d18:	72657869 	.word	0x72657869
   10d1c:	00000000 	.word	0x00000000
   10d20:	46204f4c 	.word	0x46204f4c
   10d24:	75716572 	.word	0x75716572
   10d28:	79636e65 	.word	0x79636e65
   10d2c:	0000203a 	.word	0x0000203a
   10d30:	61726709 	.word	0x61726709
   10d34:	6e656964 	.word	0x6e656964
   10d38:	00002074 	.word	0x00002074
   10d3c:	72696409 	.word	0x72696409
   10d40:	69746365 	.word	0x69746365
   10d44:	4c5f6e6f 	.word	0x4c5f6e6f
   10d48:	0000204f 	.word	0x0000204f
   10d4c:	72726509 	.word	0x72726509
   10d50:	0020726f 	.word	0x0020726f
   10d54:	69616709 	.word	0x69616709
   10d58:	0000206e 	.word	0x0000206e
   10d5c:	74706f09 	.word	0x74706f09
   10d60:	6d756d69 	.word	0x6d756d69
   10d64:	00000020 	.word	0x00000020
   10d68:	46204652 	.word	0x46204652
   10d6c:	75716572 	.word	0x75716572
   10d70:	79636e65 	.word	0x79636e65
   10d74:	0000203a 	.word	0x0000203a
   10d78:	6e6f7409 	.word	0x6e6f7409
   10d7c:	00002065 	.word	0x00002065
   10d80:	72696409 	.word	0x72696409
   10d84:	69746365 	.word	0x69746365
   10d88:	00206e6f 	.word	0x00206e6f
   10d8c:	00000d34 	.word	0x00000d34
   10d90:	00000d60 	.word	0x00000d60
   10d94:	00000d6c 	.word	0x00000d6c
   10d98:	00000d78 	.word	0x00000d78
   10d9c:	00000d84 	.word	0x00000d84
   10da0:	00000d90 	.word	0x00000d90
   10da4:	00000d9c 	.word	0x00000d9c
   10da8:	00000da8 	.word	0x00000da8
   10dac:	00000db4 	.word	0x00000db4
   10db0:	00000dc0 	.word	0x00000dc0
   10db4:	00000dcc 	.word	0x00000dcc
   10db8:	00000dd8 	.word	0x00000dd8
   10dbc:	00000e24 	.word	0x00000e24
   10dc0:	00000e24 	.word	0x00000e24
   10dc4:	00000e24 	.word	0x00000e24
   10dc8:	00000de4 	.word	0x00000de4
   10dcc:	00000df0 	.word	0x00000df0
   10dd0:	00000e24 	.word	0x00000e24
   10dd4:	00000e24 	.word	0x00000e24
   10dd8:	00000e24 	.word	0x00000e24
   10ddc:	00000dfc 	.word	0x00000dfc
   10de0:	00000e0a 	.word	0x00000e0a
   10de4:	00000e16 	.word	0x00000e16
   10de8:	00000f64 	.word	0x00000f64
   10dec:	00000f90 	.word	0x00000f90
   10df0:	00000fa0 	.word	0x00000fa0
   10df4:	00000f7a 	.word	0x00000f7a
   10df8:	00000f7a 	.word	0x00000f7a
   10dfc:	00000fb4 	.word	0x00000fb4
   10e00:	00000f7a 	.word	0x00000f7a
   10e04:	00000f7a 	.word	0x00000f7a
   10e08:	00000f7a 	.word	0x00000f7a
   10e0c:	00000f7a 	.word	0x00000f7a
   10e10:	00000f7a 	.word	0x00000f7a
   10e14:	00000f7a 	.word	0x00000f7a
   10e18:	00000f7a 	.word	0x00000f7a
   10e1c:	00000f7a 	.word	0x00000f7a
   10e20:	00000f7a 	.word	0x00000f7a
   10e24:	00000f7a 	.word	0x00000f7a
   10e28:	00000f7a 	.word	0x00000f7a
   10e2c:	00000fea 	.word	0x00000fea
   10e30:	00000ffe 	.word	0x00000ffe
   10e34:	00001012 	.word	0x00001012
   10e38:	64616552 	.word	0x64616552
   10e3c:	64255220 	.word	0x64255220
   10e40:	00000000 	.word	0x00000000
   10e44:	3020203a 	.word	0x3020203a
   10e48:	38302578 	.word	0x38302578
   10e4c:	000a786c 	.word	0x000a786c
   10e50:	74697257 	.word	0x74697257
   10e54:	25522065 	.word	0x25522065
   10e58:	00000064 	.word	0x00000064
   10e5c:	3020203a 	.word	0x3020203a
   10e60:	38302578 	.word	0x38302578
   10e64:	0009786c 	.word	0x0009786c
   10e68:	72727543 	.word	0x72727543
   10e6c:	20746e65 	.word	0x20746e65
   10e70:	71657266 	.word	0x71657266
   10e74:	636e6575 	.word	0x636e6575
   10e78:	25203a65 	.word	0x25203a65
   10e7c:	000a666c 	.word	0x000a666c
   10e80:	2a2a2a2a 	.word	0x2a2a2a2a
   10e84:	2a2a2a2a 	.word	0x2a2a2a2a
   10e88:	2a2a2a2a 	.word	0x2a2a2a2a
   10e8c:	2a2a2a2a 	.word	0x2a2a2a2a
   10e90:	2a2a2a2a 	.word	0x2a2a2a2a
   10e94:	2a2a2a2a 	.word	0x2a2a2a2a
   10e98:	0d0a2a2a 	.word	0x0d0a2a2a
   10e9c:	00000000 	.word	0x00000000
   10ea0:	20746f4e 	.word	0x20746f4e
   10ea4:	6b636f4c 	.word	0x6b636f4c
   10ea8:	61206465 	.word	0x61206465
   10eac:	20203a74 	.word	0x20203a74
   10eb0:	00666c25 	.word	0x00666c25
   10eb4:	7a484d20 	.word	0x7a484d20
   10eb8:	00000000 	.word	0x00000000
   10ebc:	2a2a2a2a 	.word	0x2a2a2a2a
   10ec0:	2a2a2a2a 	.word	0x2a2a2a2a
   10ec4:	2a2a2a2a 	.word	0x2a2a2a2a
   10ec8:	2a2a2a2a 	.word	0x2a2a2a2a
   10ecc:	2a2a2a2a 	.word	0x2a2a2a2a
   10ed0:	2a2a2a2a 	.word	0x2a2a2a2a
   10ed4:	00002a2a 	.word	0x00002a2a

00010ed8 <_ZL22channel_divider_values>:
   10ed8:	00000002 00000004 00000006 00000008     ................
   10ee8:	0000000c 00000010 00000018 00000020     ............ ...
   10ef8:	00000030 00000040 00000048 00000060     0...@...H...`...
   10f08:	00000080 000000c0                       ........

00010f10 <_ZL17default_registers>:
	...
   10f1c:	000000f1 44400007 00000000 00000000     ......@D........
	...
   10f58:	00000064 0800000c 003f0000 00800001     d.........?.....
   10f68:	0000c350 000003e8 000001f4 00001388     P...............
   10f78:	00a80322 000109c4 00208001 00000000     "......... .....
   10f88:	00000000 00800420 41800000 03000300     .... ......A....
   10f98:	c8c207fc 00011f61 00000000 da800000     ....a...........
   10fa8:	8104fd51 00040028 1e210000 03ec0393     Q...(.....!.....
   10fb8:	318c318c 00020488 06240db0 007c071a     .1.1......$...|.
   10fc8:	04010001 27b7f848 012c0064 064f0080     ....H..'d.,...O.
   10fd8:	40001e70 00185001 160410d8 00b22000     p..@.P....... ..
   10fe8:	03e87802 06420e43 080c0500 0000211c     .x..C.B......!..
   10ff8:	682f2e2e 732f6c61 682f6372 645f6c61     ../hal/src/hal_d
   11008:	735f6361 2e636e79 00000063 682f2e2e     ac_sync.c...../h
   11018:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
   11028:	682f2e2e 732f6c61 682f6372 735f6c61     ../hal/src/hal_s
   11038:	6d5f6970 6e79735f 00632e63 682f2e2e     pi_m_sync.c.../h
   11048:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
   11058:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   11068:	755f6c61 74726173 7973615f 632e636e     al_usart_async.c
   11078:	00000000 682f2e2e 752f6c61 736c6974     ....../hal/utils
   11088:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
   11098:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
   110a8:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
   110b8:	65666675 00632e72 682f2e2e 642f6c70     uffer.c.../hpl/d
   110c8:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000110d8 <_map>:
   110d8:	0000000e 0000000e 682f2e2e 652f6c70     ........../hpl/e
   110e8:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000110f8 <_usarts>:
   110f8:	00000003 40100004 00030000 0000ff2e     .......@........
   11108:	00000000                                ....

0001110c <_i2cms>:
	...

00011124 <_i2css>:
	...

00011134 <sercomspi_regs>:
   11134:	0020000c 00020000 00000000 01ff003b     .. .........;...
   11144:	20000c00 02000000 00000000 ff000500     ... ............
   11154:	000c0101 00000030 00000002 00170000     ....0...........
   11164:	000201ff 682f2e2e 732f6c70 6f637265     ....../hpl/serco
   11174:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00011184 <_tcs>:
   11184:	03680003 00000000 00000000 00001770     ..h.........p...
   11194:	00000000 03680004 00000000 00000000     ......h.........
   111a4:	0000007d 00000000 682f2e2e 742f6c70     }........./hpl/t
   111b4:	70682f63 63745f6c 0000632e 00004a25     c/hpl_tc.c..%J..
   111c4:	00000804                                ....

000111c8 <_usb_ep_cfgs>:
   111c8:	20001298 00000000 00000040 20001258     ... ....@...X.. 
   111d8:	20001218 00400040 200011d8 20001198     ... @.@.... ... 
   111e8:	00400040 20001158 20001118 00400040     @.@.X.. ... @.@.
   111f8:	200010d8 00000000 00000040 00005e56     ... ....@...V^..
   11208:	00005e32 00005e56 00005e38 00005e56     2^..V^..8^..V^..
   11218:	00005e02 00005e56 00005e56 00005e56     .^..V^..V^..V^..
   11228:	00005e14 00005e56 00005e3e 752f2e2e     .^..V^..>^..../u
   11238:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
   11248:	00000063                                c...

0001124c <_ZTV6Stream>:
	...
   11254:	00006661 00006663 000062f9 000062fd     af..cf...b...b..
   11264:	00006661 00006661 00006661              af..af..af..

00011270 <_ZTV9CDC_Class>:
	...
   11278:	00006367 00006515 000062f9 00006495     gc...e...b...d..
   11288:	0000638f 000063fd 0000633d 00006425     .c...c..=c..%d..
   11298:	00006585 000064a5 2e257830 00005838     .e...d..0x%.8X..
   112a8:	006e616e 00666e69 0066766f 00707865     nan.inf.ovf.exp.
   112b8:	00676f6c 00776f70                       log.pow.

000112c0 <halF>:
   112c0:	00000000 3fe00000 00000000 bfe00000     .......?........

000112d0 <ln2HI>:
   112d0:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

000112e0 <ln2LO>:
   112e0:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..

000112f0 <TWO52>:
   112f0:	00000000 43300000 00000000 c3300000     ......0C......0.
   11300:	00009920 000098f0 00009902 00009844      ...........D...
   11310:	00009902 000098e6 00009902 00009844     ............D...
   11320:	000098f0 000098f0 000098e6 00009844     ............D...
   11330:	0000984c 0000984c 0000984c 00009908     L...L...L.......
   11340:	000098f0 000098f0 000098c4 000099a8     ................
   11350:	000098c4 000098e6 000098c4 000099a8     ................
   11360:	000098f0 000098f0 000098e6 000099a8     ................
   11370:	0000984c 0000984c 0000984c 000099b2     L...L...L.......
   11380:	00009ca0 00009bf0 00009bf0 00009bee     ................
   11390:	00009c92 00009c92 00009c88 00009bee     ................
   113a0:	00009c92 00009c88 00009c92 00009bee     ................
   113b0:	00009c98 00009c98 00009c98 00009d28     ............(...
   113c0:	0000aa70 0000aa52 0000aa0c 0000a92a     p...R.......*...
   113d0:	0000aa0c 0000aa44 0000aa0c 0000a92a     ....D.......*...
   113e0:	0000aa52 0000aa52 0000aa44 0000a92a     R...R...D...*...
   113f0:	0000a922 0000a922 0000a922 0000ac88     "..."...".......
   11400:	0000b2d0 0000b190 0000b190 0000b18c     ................
   11410:	0000b2a8 0000b2a8 0000b29a 0000b18c     ................
   11420:	0000b2a8 0000b29a 0000b2a8 0000b18c     ................
   11430:	0000b2b0 0000b2b0 0000b2b0 0000b4b4     ................

00011440 <_global_impure_ptr>:
   11440:	20000078 0000c816 0000c8ea 0000c8ea     x.. ............
   11450:	0000c802 0000c8ea 0000c8ea 0000c8ea     ................
   11460:	0000c8ea 0000c8ea 0000c8ea 0000c8bc     ................
   11470:	0000c3ce 0000c8ea 0000c3c4 0000c3d8     ................
   11480:	0000c8ea 0000c80c 0000c598 0000c598     ................
   11490:	0000c598 0000c598 0000c598 0000c598     ................
   114a0:	0000c598 0000c598 0000c598 0000c8ea     ................
   114b0:	0000c8ea 0000c8ea 0000c8ea 0000c8ea     ................
   114c0:	0000c8ea 0000c8ea 0000c8ea 0000c8ea     ................
   114d0:	0000c8ea 0000c8d2 0000c826 0000c8ea     ........&.......
   114e0:	0000c826 0000c8ea 0000c8ea 0000c8ea     &...............
   114f0:	0000c8ea 0000c78c 0000c8ea 0000c8ea     ................
   11500:	0000c796 0000c8ea 0000c8ea 0000c8ea     ................
   11510:	0000c8ea 0000c8ea 0000c7c4 0000c8ea     ................
   11520:	0000c8ea 0000c7f2 0000c8ea 0000c8ea     ................
   11530:	0000c8ea 0000c8ea 0000c8ea 0000c8ea     ................
   11540:	0000c8ea 0000c8ea 0000c8ea 0000c8ea     ................
   11550:	0000c5d8 0000c60e 0000c826 0000c826     ........&...&...
   11560:	0000c826 0000c6b6 0000c60e 0000c8ea     &...............
   11570:	0000c8ea 0000c6c0 0000c8ea 0000c6d2     ................
   11580:	0000c8e6 0000c700 0000c72a 0000c8ea     ........*.......
   11590:	0000c734 0000c8ea 0000c8e2 0000c8ea     4...............
   115a0:	0000c8ea 0000c426 00464e49 004e414e     ....&...INF.NAN.
   115b0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   115c0:	00000000 33323130 37363534 62613938     ....0123456789ab
   115d0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   115e0:	00000030                                0...

000115e4 <blanks.7238>:
   115e4:	20202020 20202020 20202020 20202020                     

000115f4 <zeroes.7239>:
   115f4:	30303030 30303030 30303030 30303030     0000000000000000
   11604:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   11614:	00000000                                ....

00011618 <__mprec_bigtens>:
   11618:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   11628:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   11638:	7f73bf3c 75154fdd                       <.s..O.u

00011640 <__mprec_tens>:
   11640:	00000000 3ff00000 00000000 40240000     .......?......$@
   11650:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   11660:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   11670:	00000000 412e8480 00000000 416312d0     .......A......cA
   11680:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   11690:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   116a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   116b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   116c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   116d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   116e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   116f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   11700:	79d99db4 44ea7843                       ...yCx.D

00011708 <p05.6055>:
   11708:	00000005 00000019 0000007d 00000043     ........}...C...
   11718:	49534f50 00000058 0000002e              POSIX.......

00011724 <_ctype_>:
   11724:	20202000 20202020 28282020 20282828     .         ((((( 
   11734:	20202020 20202020 20202020 20202020                     
   11744:	10108820 10101010 10101010 10101010      ...............
   11754:	04040410 04040404 10040404 10101010     ................
   11764:	41411010 41414141 01010101 01010101     ..AAAAAA........
   11774:	01010101 01010101 01010101 10101010     ................
   11784:	42421010 42424242 02020202 02020202     ..BBBBBB........
   11794:	02020202 02020202 02020202 10101010     ................
   117a4:	00000020 00000000 00000000 00000000      ...............
	...

00011828 <_init>:
   11828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1182a:	46c0      	nop			; (mov r8, r8)
   1182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1182e:	bc08      	pop	{r3}
   11830:	469e      	mov	lr, r3
   11832:	4770      	bx	lr

00011834 <__init_array_start>:
   11834:	0000db21 	.word	0x0000db21

00011838 <__frame_dummy_init_array_entry>:
   11838:	000000dd 000007ad 00001375 00001d55     ........u...U...
   11848:	00006645 00006cb1 00006f35              Ef...l..5o..

00011854 <_fini>:
   11854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11856:	46c0      	nop			; (mov r8, r8)
   11858:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1185a:	bc08      	pop	{r3}
   1185c:	469e      	mov	lr, r3
   1185e:	4770      	bx	lr

00011860 <__fini_array_start>:
   11860:	000000b5 	.word	0x000000b5
