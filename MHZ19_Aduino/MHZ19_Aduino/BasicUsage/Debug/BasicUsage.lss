
BasicUsage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800100  00001e60  00001ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000148  008002ca  008002ca  000020be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001141b  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002af7  00000000  00000000  00013a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003159  00000000  00000000  0001653a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001060  00000000  00000000  00019694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ddf  00000000  00000000  0001a6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068b0  00000000  00000000  0001d4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000560  00000000  00000000  00023d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_3>
      10:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_3>
      14:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_18>
      4c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	02 01       	movw	r0, r4
      c4:	1a 03       	fmul	r17, r18

000000c6 <__ctors_end>:
      c6:	11 01       	movw	r2, r2

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	12 e0       	ldi	r17, 0x02	; 2
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e0 e6       	ldi	r30, 0x60	; 96
      dc:	fe e1       	ldi	r31, 0x1E	; 30
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	aa 3c       	cpi	r26, 0xCA	; 202
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	24 e0       	ldi	r18, 0x04	; 4
      ec:	aa ec       	ldi	r26, 0xCA	; 202
      ee:	b2 e0       	ldi	r27, 0x02	; 2
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a2 31       	cpi	r26, 0x12	; 18
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 48 03 	call	0x690	; 0x690 <main>
     114:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     11c:	26 e0       	ldi	r18, 0x06	; 6
     11e:	40 e8       	ldi	r20, 0x80	; 128
     120:	55 e2       	ldi	r21, 0x25	; 37
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	86 e2       	ldi	r24, 0x26	; 38
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_ZN14HardwareSerial5beginEmh>

void setup()
{
    Serial.begin(9600);                                     // Device to serial monitor feedback

    mySerial.begin(BAUDRATE);                               // (Uno example) device to MH-Z19 serial start   
     12e:	40 e8       	ldi	r20, 0x80	; 128
     130:	55 e2       	ldi	r21, 0x25	; 37
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	8e ec       	ldi	r24, 0xCE	; 206
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_ZN14SoftwareSerial5beginEl>
    myMHZ19.begin(mySerial);                                // *Serial(Stream) refence must be passed to library begin(). 
     13e:	6e ec       	ldi	r22, 0xCE	; 206
     140:	72 e0       	ldi	r23, 0x02	; 2
     142:	8d ee       	ldi	r24, 0xED	; 237
     144:	92 e0       	ldi	r25, 0x02	; 2
     146:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN5MHZ195beginER6Stream>

    myMHZ19.autoCalibration();                              // Turn auto calibration ON (OFF autoCalibration(false))
     14a:	48 e1       	ldi	r20, 0x18	; 24
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	8d ee       	ldi	r24, 0xED	; 237
     150:	92 e0       	ldi	r25, 0x02	; 2
     152:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <_ZN5MHZ1915autoCalibrationEbh>

00000156 <loop>:
}

void loop()
{
     156:	cf 92       	push	r12
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
    if (millis() - getDataTimer >= 2000)
     15e:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     162:	c0 90 ca 02 	lds	r12, 0x02CA	; 0x8002ca <__data_end>
     166:	d0 90 cb 02 	lds	r13, 0x02CB	; 0x8002cb <__data_end+0x1>
     16a:	e0 90 cc 02 	lds	r14, 0x02CC	; 0x8002cc <__data_end+0x2>
     16e:	f0 90 cd 02 	lds	r15, 0x02CD	; 0x8002cd <__data_end+0x3>
     172:	dc 01       	movw	r26, r24
     174:	cb 01       	movw	r24, r22
     176:	8c 19       	sub	r24, r12
     178:	9d 09       	sbc	r25, r13
     17a:	ae 09       	sbc	r26, r14
     17c:	bf 09       	sbc	r27, r15
     17e:	80 3d       	cpi	r24, 0xD0	; 208
     180:	97 40       	sbci	r25, 0x07	; 7
     182:	a1 05       	cpc	r26, r1
     184:	b1 05       	cpc	r27, r1
     186:	c8 f1       	brcs	.+114    	; 0x1fa <loop+0xa4>

        /* note: getCO2() default is command "CO2 Unlimited". This returns the correct CO2 reading even 
        if below background CO2 levels or above range (useful to validate sensor). You can use the 
        usual documented command with getCO2(false) */

        CO2 = myMHZ19.getCO2();                             // Request CO2 (as ppm)
     188:	41 e0       	ldi	r20, 0x01	; 1
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	8d ee       	ldi	r24, 0xED	; 237
     18e:	92 e0       	ldi	r25, 0x02	; 2
     190:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN5MHZ196getCO2Ebb>
     194:	7c 01       	movw	r14, r24
        
        Serial.print("CO2 (ppm): ");                      
     196:	6e e0       	ldi	r22, 0x0E	; 14
     198:	71 e0       	ldi	r23, 0x01	; 1
     19a:	86 e2       	ldi	r24, 0x26	; 38
     19c:	93 e0       	ldi	r25, 0x03	; 3
     19e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
        Serial.println(CO2);                                
     1a2:	4a e0       	ldi	r20, 0x0A	; 10
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	b7 01       	movw	r22, r14
     1a8:	86 e2       	ldi	r24, 0x26	; 38
     1aa:	93 e0       	ldi	r25, 0x03	; 3
     1ac:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN5Print7printlnEii>

        int8_t Temp;
        Temp = myMHZ19.getTemperature();                     // Request Temperature (as Celsius)
     1b0:	41 e0       	ldi	r20, 0x01	; 1
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	8d ee       	ldi	r24, 0xED	; 237
     1b6:	92 e0       	ldi	r25, 0x02	; 2
     1b8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN5MHZ1914getTemperatureEbb>
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
        Serial.print("Temperature (C): ");                  
     1c0:	6a e1       	ldi	r22, 0x1A	; 26
     1c2:	71 e0       	ldi	r23, 0x01	; 1
     1c4:	86 e2       	ldi	r24, 0x26	; 38
     1c6:	93 e0       	ldi	r25, 0x03	; 3
     1c8:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
        Serial.println(Temp);                               
     1cc:	c7 01       	movw	r24, r14
     1ce:	b6 01       	movw	r22, r12
     1d0:	0e 94 15 01 	call	0x22a	; 0x22a <__fixsfsi>
     1d4:	06 2e       	mov	r0, r22
     1d6:	00 0c       	add	r0, r0
     1d8:	77 0b       	sbc	r23, r23
     1da:	4a e0       	ldi	r20, 0x0A	; 10
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	86 e2       	ldi	r24, 0x26	; 38
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN5Print7printlnEii>

        getDataTimer = millis();
     1e6:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     1ea:	60 93 ca 02 	sts	0x02CA, r22	; 0x8002ca <__data_end>
     1ee:	70 93 cb 02 	sts	0x02CB, r23	; 0x8002cb <__data_end+0x1>
     1f2:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end+0x2>
     1f6:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <__data_end+0x3>
    }
}
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	08 95       	ret

00000204 <_GLOBAL__sub_I_myMHZ19>:
	} Command_Type;

	/* Memory Pool */
	struct mempool
	{
		struct config
     204:	ed ee       	ldi	r30, 0xED	; 237
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	17 82       	std	Z+7, r1	; 0x07
     20a:	10 86       	std	Z+8, r1	; 0x08
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	81 87       	std	Z+9, r24	; 0x09
     210:	12 86       	std	Z+10, r1	; 0x0a
     212:	83 87       	std	Z+11, r24	; 0x0b
#define RX_PIN 10                                          // Rx pin which the MHZ19 Tx pin is attached to
#define TX_PIN 11                                          // Tx pin which the MHZ19 Rx pin is attached to
#define BAUDRATE 9600                                      // Device to MH-Z19 Serial baudrate (should not be changed)

MHZ19 myMHZ19;                                             // Constructor for library
SoftwareSerial mySerial(RX_PIN, TX_PIN);                   // (Uno example) create device to MH-Z19 serial
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	4b e0       	ldi	r20, 0x0B	; 11
     218:	6a e0       	ldi	r22, 0x0A	; 10
     21a:	8e ec       	ldi	r24, 0xCE	; 206
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <_ZN14SoftwareSerialC1Ehhb>

00000222 <_GLOBAL__sub_D_myMHZ19>:
     222:	8e ec       	ldi	r24, 0xCE	; 206
     224:	92 e0       	ldi	r25, 0x02	; 2
     226:	0c 94 df 0a 	jmp	0x15be	; 0x15be <_ZN14SoftwareSerialD1Ev>

0000022a <__fixsfsi>:
     22a:	0e 94 1c 01 	call	0x238	; 0x238 <__fixunssfsi>
     22e:	68 94       	set
     230:	b1 11       	cpse	r27, r1
     232:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__fp_szero>
     236:	08 95       	ret

00000238 <__fixunssfsi>:
     238:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__fp_splitA>
     23c:	88 f0       	brcs	.+34     	; 0x260 <__fixunssfsi+0x28>
     23e:	9f 57       	subi	r25, 0x7F	; 127
     240:	98 f0       	brcs	.+38     	; 0x268 <__fixunssfsi+0x30>
     242:	b9 2f       	mov	r27, r25
     244:	99 27       	eor	r25, r25
     246:	b7 51       	subi	r27, 0x17	; 23
     248:	b0 f0       	brcs	.+44     	; 0x276 <__fixunssfsi+0x3e>
     24a:	e1 f0       	breq	.+56     	; 0x284 <__fixunssfsi+0x4c>
     24c:	66 0f       	add	r22, r22
     24e:	77 1f       	adc	r23, r23
     250:	88 1f       	adc	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	1a f0       	brmi	.+6      	; 0x25c <__fixunssfsi+0x24>
     256:	ba 95       	dec	r27
     258:	c9 f7       	brne	.-14     	; 0x24c <__fixunssfsi+0x14>
     25a:	14 c0       	rjmp	.+40     	; 0x284 <__fixunssfsi+0x4c>
     25c:	b1 30       	cpi	r27, 0x01	; 1
     25e:	91 f0       	breq	.+36     	; 0x284 <__fixunssfsi+0x4c>
     260:	0e 94 6d 01 	call	0x2da	; 0x2da <__fp_zero>
     264:	b1 e0       	ldi	r27, 0x01	; 1
     266:	08 95       	ret
     268:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__fp_zero>
     26c:	67 2f       	mov	r22, r23
     26e:	78 2f       	mov	r23, r24
     270:	88 27       	eor	r24, r24
     272:	b8 5f       	subi	r27, 0xF8	; 248
     274:	39 f0       	breq	.+14     	; 0x284 <__fixunssfsi+0x4c>
     276:	b9 3f       	cpi	r27, 0xF9	; 249
     278:	cc f3       	brlt	.-14     	; 0x26c <__fixunssfsi+0x34>
     27a:	86 95       	lsr	r24
     27c:	77 95       	ror	r23
     27e:	67 95       	ror	r22
     280:	b3 95       	inc	r27
     282:	d9 f7       	brne	.-10     	; 0x27a <__fixunssfsi+0x42>
     284:	3e f4       	brtc	.+14     	; 0x294 <__fixunssfsi+0x5c>
     286:	90 95       	com	r25
     288:	80 95       	com	r24
     28a:	70 95       	com	r23
     28c:	61 95       	neg	r22
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	8f 4f       	sbci	r24, 0xFF	; 255
     292:	9f 4f       	sbci	r25, 0xFF	; 255
     294:	08 95       	ret

00000296 <__fp_split3>:
     296:	57 fd       	sbrc	r21, 7
     298:	90 58       	subi	r25, 0x80	; 128
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	59 f0       	breq	.+22     	; 0x2b6 <__fp_splitA+0x10>
     2a0:	5f 3f       	cpi	r21, 0xFF	; 255
     2a2:	71 f0       	breq	.+28     	; 0x2c0 <__fp_splitA+0x1a>
     2a4:	47 95       	ror	r20

000002a6 <__fp_splitA>:
     2a6:	88 0f       	add	r24, r24
     2a8:	97 fb       	bst	r25, 7
     2aa:	99 1f       	adc	r25, r25
     2ac:	61 f0       	breq	.+24     	; 0x2c6 <__fp_splitA+0x20>
     2ae:	9f 3f       	cpi	r25, 0xFF	; 255
     2b0:	79 f0       	breq	.+30     	; 0x2d0 <__fp_splitA+0x2a>
     2b2:	87 95       	ror	r24
     2b4:	08 95       	ret
     2b6:	12 16       	cp	r1, r18
     2b8:	13 06       	cpc	r1, r19
     2ba:	14 06       	cpc	r1, r20
     2bc:	55 1f       	adc	r21, r21
     2be:	f2 cf       	rjmp	.-28     	; 0x2a4 <__fp_split3+0xe>
     2c0:	46 95       	lsr	r20
     2c2:	f1 df       	rcall	.-30     	; 0x2a6 <__fp_splitA>
     2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <__fp_splitA+0x30>
     2c6:	16 16       	cp	r1, r22
     2c8:	17 06       	cpc	r1, r23
     2ca:	18 06       	cpc	r1, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	f1 cf       	rjmp	.-30     	; 0x2b2 <__fp_splitA+0xc>
     2d0:	86 95       	lsr	r24
     2d2:	71 05       	cpc	r23, r1
     2d4:	61 05       	cpc	r22, r1
     2d6:	08 94       	sec
     2d8:	08 95       	ret

000002da <__fp_zero>:
     2da:	e8 94       	clt

000002dc <__fp_szero>:
     2dc:	bb 27       	eor	r27, r27
     2de:	66 27       	eor	r22, r22
     2e0:	77 27       	eor	r23, r23
     2e2:	cb 01       	movw	r24, r22
     2e4:	97 f9       	bld	r25, 7
     2e6:	08 95       	ret

000002e8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     2e8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     2ea:	91 8d       	ldd	r25, Z+25	; 0x19
     2ec:	22 8d       	ldd	r18, Z+26	; 0x1a
     2ee:	89 2f       	mov	r24, r25
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 5c       	subi	r24, 0xC0	; 192
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	82 1b       	sub	r24, r18
     2f8:	91 09       	sbc	r25, r1
}
     2fa:	8f 73       	andi	r24, 0x3F	; 63
     2fc:	99 27       	eor	r25, r25
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     300:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     302:	91 8d       	ldd	r25, Z+25	; 0x19
     304:	82 8d       	ldd	r24, Z+26	; 0x1a
     306:	98 17       	cp	r25, r24
     308:	31 f0       	breq	.+12     	; 0x316 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     30a:	82 8d       	ldd	r24, Z+26	; 0x1a
     30c:	e8 0f       	add	r30, r24
     30e:	f1 1d       	adc	r31, r1
     310:	85 8d       	ldd	r24, Z+29	; 0x1d
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     31a:	08 95       	ret

0000031c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     31c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     31e:	91 8d       	ldd	r25, Z+25	; 0x19
     320:	82 8d       	ldd	r24, Z+26	; 0x1a
     322:	98 17       	cp	r25, r24
     324:	61 f0       	breq	.+24     	; 0x33e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     326:	82 8d       	ldd	r24, Z+26	; 0x1a
     328:	df 01       	movw	r26, r30
     32a:	a8 0f       	add	r26, r24
     32c:	b1 1d       	adc	r27, r1
     32e:	5d 96       	adiw	r26, 0x1d	; 29
     330:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     332:	92 8d       	ldd	r25, Z+26	; 0x1a
     334:	9f 5f       	subi	r25, 0xFF	; 255
     336:	9f 73       	andi	r25, 0x3F	; 63
     338:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     342:	08 95       	ret

00000344 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     344:	fc 01       	movw	r30, r24
     346:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     348:	44 8d       	ldd	r20, Z+28	; 0x1c
     34a:	25 2f       	mov	r18, r21
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	84 2f       	mov	r24, r20
     350:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     352:	82 1b       	sub	r24, r18
     354:	93 0b       	sbc	r25, r19
     356:	54 17       	cp	r21, r20
     358:	10 f0       	brcs	.+4      	; 0x35e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     35a:	cf 96       	adiw	r24, 0x3f	; 63
     35c:	08 95       	ret
  return tail - head - 1;
     35e:	01 97       	sbiw	r24, 0x01	; 1
}
     360:	08 95       	ret

00000362 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     362:	80 e1       	ldi	r24, 0x10	; 16
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	89 2b       	or	r24, r25
     368:	49 f0       	breq	.+18     	; 0x37c <_Z14serialEventRunv+0x1a>
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	89 2b       	or	r24, r25
     370:	29 f0       	breq	.+10     	; 0x37c <_Z14serialEventRunv+0x1a>
     372:	0e 94 10 03 	call	0x620	; 0x620 <_Z17Serial0_availablev>
     376:	81 11       	cpse	r24, r1
     378:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     37c:	08 95       	ret

0000037e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     37e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     380:	84 8d       	ldd	r24, Z+28	; 0x1c
     382:	df 01       	movw	r26, r30
     384:	a8 0f       	add	r26, r24
     386:	b1 1d       	adc	r27, r1
     388:	a3 5a       	subi	r26, 0xA3	; 163
     38a:	bf 4f       	sbci	r27, 0xFF	; 255
     38c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     38e:	84 8d       	ldd	r24, Z+28	; 0x1c
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	8f 73       	andi	r24, 0x3F	; 63
     396:	99 27       	eor	r25, r25
     398:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     39a:	a6 89       	ldd	r26, Z+22	; 0x16
     39c:	b7 89       	ldd	r27, Z+23	; 0x17
     39e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     3a0:	a0 89       	ldd	r26, Z+16	; 0x10
     3a2:	b1 89       	ldd	r27, Z+17	; 0x11
     3a4:	8c 91       	ld	r24, X
     3a6:	83 70       	andi	r24, 0x03	; 3
     3a8:	80 64       	ori	r24, 0x40	; 64
     3aa:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     3ac:	93 8d       	ldd	r25, Z+27	; 0x1b
     3ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     3b0:	98 13       	cpse	r25, r24
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     3b4:	02 88       	ldd	r0, Z+18	; 0x12
     3b6:	f3 89       	ldd	r31, Z+19	; 0x13
     3b8:	e0 2d       	mov	r30, r0
     3ba:	80 81       	ld	r24, Z
     3bc:	8f 7d       	andi	r24, 0xDF	; 223
     3be:	80 83       	st	Z, r24
     3c0:	08 95       	ret

000003c2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
  _written = true;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3d8:	98 13       	cpse	r25, r24
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <_ZN14HardwareSerial5writeEh+0x24>
     3dc:	e8 89       	ldd	r30, Y+16	; 0x10
     3de:	f9 89       	ldd	r31, Y+17	; 0x11
     3e0:	80 81       	ld	r24, Z
     3e2:	85 fd       	sbrc	r24, 5
     3e4:	26 c0       	rjmp	.+76     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     3e6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3e8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     3ea:	10 e0       	ldi	r17, 0x00	; 0
     3ec:	0f 5f       	subi	r16, 0xFF	; 255
     3ee:	1f 4f       	sbci	r17, 0xFF	; 255
     3f0:	0f 73       	andi	r16, 0x3F	; 63
     3f2:	11 27       	eor	r17, r17
     3f4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3f8:	e8 12       	cpse	r14, r24
     3fa:	0c c0       	rjmp	.+24     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
    if (bit_is_clear(SREG, SREG_I)) {
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	07 fc       	sbrc	r0, 7
     400:	fa cf       	rjmp	.-12     	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     402:	e8 89       	ldd	r30, Y+16	; 0x10
     404:	f9 89       	ldd	r31, Y+17	; 0x11
     406:	80 81       	ld	r24, Z
     408:	85 ff       	sbrs	r24, 5
     40a:	f5 cf       	rjmp	.-22     	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     40c:	ce 01       	movw	r24, r28
     40e:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     412:	f1 cf       	rjmp	.-30     	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     414:	8b 8d       	ldd	r24, Y+27	; 0x1b
     416:	fe 01       	movw	r30, r28
     418:	e8 0f       	add	r30, r24
     41a:	f1 1d       	adc	r31, r1
     41c:	e3 5a       	subi	r30, 0xA3	; 163
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     422:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     424:	f8 94       	cli
    _tx_buffer_head = i;
     426:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     428:	ea 89       	ldd	r30, Y+18	; 0x12
     42a:	fb 89       	ldd	r31, Y+19	; 0x13
     42c:	80 81       	ld	r24, Z
     42e:	80 62       	ori	r24, 0x20	; 32
     430:	0a c0       	rjmp	.+20     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     432:	9f b7       	in	r25, 0x3f	; 63
     434:	f8 94       	cli
      *_udr = c;
     436:	ee 89       	ldd	r30, Y+22	; 0x16
     438:	ff 89       	ldd	r31, Y+23	; 0x17
     43a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     43c:	e8 89       	ldd	r30, Y+16	; 0x10
     43e:	f9 89       	ldd	r31, Y+17	; 0x11
     440:	80 81       	ld	r24, Z
     442:	83 70       	andi	r24, 0x03	; 3
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     448:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	08 95       	ret

0000045c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     462:	88 8d       	ldd	r24, Y+24	; 0x18
     464:	88 23       	and	r24, r24
     466:	c9 f0       	breq	.+50     	; 0x49a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     468:	ea 89       	ldd	r30, Y+18	; 0x12
     46a:	fb 89       	ldd	r31, Y+19	; 0x13
     46c:	80 81       	ld	r24, Z
     46e:	85 fd       	sbrc	r24, 5
     470:	05 c0       	rjmp	.+10     	; 0x47c <_ZN14HardwareSerial5flushEv+0x20>
     472:	a8 89       	ldd	r26, Y+16	; 0x10
     474:	b9 89       	ldd	r27, Y+17	; 0x11
     476:	8c 91       	ld	r24, X
     478:	86 fd       	sbrc	r24, 6
     47a:	0f c0       	rjmp	.+30     	; 0x49a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	07 fc       	sbrc	r0, 7
     480:	f5 cf       	rjmp	.-22     	; 0x46c <_ZN14HardwareSerial5flushEv+0x10>
     482:	80 81       	ld	r24, Z
     484:	85 ff       	sbrs	r24, 5
     486:	f2 cf       	rjmp	.-28     	; 0x46c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     488:	a8 89       	ldd	r26, Y+16	; 0x10
     48a:	b9 89       	ldd	r27, Y+17	; 0x11
     48c:	8c 91       	ld	r24, X
     48e:	85 ff       	sbrs	r24, 5
     490:	ed cf       	rjmp	.-38     	; 0x46c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     492:	ce 01       	movw	r24, r28
     494:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     498:	e7 cf       	rjmp	.-50     	; 0x468 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
     4b0:	6a 01       	movw	r12, r20
     4b2:	7b 01       	movw	r14, r22
     4b4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     4b6:	e8 89       	ldd	r30, Y+16	; 0x10
     4b8:	f9 89       	ldd	r31, Y+17	; 0x11
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     4be:	41 15       	cp	r20, r1
     4c0:	51 4e       	sbci	r21, 0xE1	; 225
     4c2:	61 05       	cpc	r22, r1
     4c4:	71 05       	cpc	r23, r1
     4c6:	b1 f0       	breq	.+44     	; 0x4f4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	79 e0       	ldi	r23, 0x09	; 9
     4cc:	8d e3       	ldi	r24, 0x3D	; 61
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	a7 01       	movw	r20, r14
     4d2:	96 01       	movw	r18, r12
     4d4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
     4d8:	da 01       	movw	r26, r20
     4da:	c9 01       	movw	r24, r18
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	a1 09       	sbc	r26, r1
     4e0:	b1 09       	sbc	r27, r1
     4e2:	b6 95       	lsr	r27
     4e4:	a7 95       	ror	r26
     4e6:	97 95       	ror	r25
     4e8:	87 95       	ror	r24
     4ea:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     4ec:	21 15       	cp	r18, r1
     4ee:	80 e1       	ldi	r24, 0x10	; 16
     4f0:	38 07       	cpc	r19, r24
     4f2:	a8 f0       	brcs	.+42     	; 0x51e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     4f4:	e8 89       	ldd	r30, Y+16	; 0x10
     4f6:	f9 89       	ldd	r31, Y+17	; 0x11
     4f8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     4fa:	60 e8       	ldi	r22, 0x80	; 128
     4fc:	74 e8       	ldi	r23, 0x84	; 132
     4fe:	8e e1       	ldi	r24, 0x1E	; 30
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a7 01       	movw	r20, r14
     504:	96 01       	movw	r18, r12
     506:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
     50a:	da 01       	movw	r26, r20
     50c:	c9 01       	movw	r24, r18
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	a1 09       	sbc	r26, r1
     512:	b1 09       	sbc	r27, r1
     514:	b6 95       	lsr	r27
     516:	a7 95       	ror	r26
     518:	97 95       	ror	r25
     51a:	87 95       	ror	r24
     51c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     51e:	ec 85       	ldd	r30, Y+12	; 0x0c
     520:	fd 85       	ldd	r31, Y+13	; 0x0d
     522:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     524:	ee 85       	ldd	r30, Y+14	; 0x0e
     526:	ff 85       	ldd	r31, Y+15	; 0x0f
     528:	20 83       	st	Z, r18

  _written = false;
     52a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     52c:	ec 89       	ldd	r30, Y+20	; 0x14
     52e:	fd 89       	ldd	r31, Y+21	; 0x15
     530:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     532:	ea 89       	ldd	r30, Y+18	; 0x12
     534:	fb 89       	ldd	r31, Y+19	; 0x13
     536:	80 81       	ld	r24, Z
     538:	80 61       	ori	r24, 0x10	; 16
     53a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     53c:	ea 89       	ldd	r30, Y+18	; 0x12
     53e:	fb 89       	ldd	r31, Y+19	; 0x13
     540:	80 81       	ld	r24, Z
     542:	88 60       	ori	r24, 0x08	; 8
     544:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     546:	ea 89       	ldd	r30, Y+18	; 0x12
     548:	fb 89       	ldd	r31, Y+19	; 0x13
     54a:	80 81       	ld	r24, Z
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     550:	ea 89       	ldd	r30, Y+18	; 0x12
     552:	fb 89       	ldd	r31, Y+19	; 0x13
     554:	80 81       	ld	r24, Z
     556:	8f 7d       	andi	r24, 0xDF	; 223
     558:	80 83       	st	Z, r24
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	08 95       	ret

0000056a <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	08 95       	ret

00000570 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	2f 93       	push	r18
     57c:	8f 93       	push	r24
     57e:	9f 93       	push	r25
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     584:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <Serial+0x10>
     588:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <Serial+0x11>
     58c:	80 81       	ld	r24, Z
     58e:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <Serial+0x16>
     592:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <Serial+0x17>
     596:	82 fd       	sbrc	r24, 2
     598:	12 c0       	rjmp	.+36     	; 0x5be <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     59a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     59c:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <Serial+0x19>
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     5a4:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <Serial+0x1a>
     5a8:	82 17       	cp	r24, r18
     5aa:	51 f0       	breq	.+20     	; 0x5c0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     5ac:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <Serial+0x19>
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	ea 5d       	subi	r30, 0xDA	; 218
     5b4:	fc 4f       	sbci	r31, 0xFC	; 252
     5b6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     5b8:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <Serial+0x19>
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     5be:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	2f 91       	pop	r18
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	2f 93       	push	r18
     5e0:	3f 93       	push	r19
     5e2:	4f 93       	push	r20
     5e4:	5f 93       	push	r21
     5e6:	6f 93       	push	r22
     5e8:	7f 93       	push	r23
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	af 93       	push	r26
     5f0:	bf 93       	push	r27
     5f2:	ef 93       	push	r30
     5f4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     5f6:	86 e2       	ldi	r24, 0x26	; 38
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     5fe:	ff 91       	pop	r31
     600:	ef 91       	pop	r30
     602:	bf 91       	pop	r27
     604:	af 91       	pop	r26
     606:	9f 91       	pop	r25
     608:	8f 91       	pop	r24
     60a:	7f 91       	pop	r23
     60c:	6f 91       	pop	r22
     60e:	5f 91       	pop	r21
     610:	4f 91       	pop	r20
     612:	3f 91       	pop	r19
     614:	2f 91       	pop	r18
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     620:	86 e2       	ldi	r24, 0x26	; 38
     622:	93 e0       	ldi	r25, 0x03	; 3
     624:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN14HardwareSerial9availableEv>
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	89 2b       	or	r24, r25
     62c:	09 f4       	brne	.+2      	; 0x630 <_Z17Serial0_availablev+0x10>
     62e:	20 e0       	ldi	r18, 0x00	; 0
}
     630:	82 2f       	mov	r24, r18
     632:	08 95       	ret

00000634 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     634:	e6 e2       	ldi	r30, 0x26	; 38
     636:	f3 e0       	ldi	r31, 0x03	; 3
     638:	13 82       	std	Z+3, r1	; 0x03
     63a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     63c:	88 ee       	ldi	r24, 0xE8	; 232
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	a0 e0       	ldi	r26, 0x00	; 0
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	84 83       	std	Z+4, r24	; 0x04
     646:	95 83       	std	Z+5, r25	; 0x05
     648:	a6 83       	std	Z+6, r26	; 0x06
     64a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     64c:	80 e3       	ldi	r24, 0x30	; 48
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	80 83       	st	Z, r24
     654:	85 ec       	ldi	r24, 0xC5	; 197
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	95 87       	std	Z+13, r25	; 0x0d
     65a:	84 87       	std	Z+12, r24	; 0x0c
     65c:	84 ec       	ldi	r24, 0xC4	; 196
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	97 87       	std	Z+15, r25	; 0x0f
     662:	86 87       	std	Z+14, r24	; 0x0e
     664:	80 ec       	ldi	r24, 0xC0	; 192
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	91 8b       	std	Z+17, r25	; 0x11
     66a:	80 8b       	std	Z+16, r24	; 0x10
     66c:	81 ec       	ldi	r24, 0xC1	; 193
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	93 8b       	std	Z+19, r25	; 0x13
     672:	82 8b       	std	Z+18, r24	; 0x12
     674:	82 ec       	ldi	r24, 0xC2	; 194
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	95 8b       	std	Z+21, r25	; 0x15
     67a:	84 8b       	std	Z+20, r24	; 0x14
     67c:	86 ec       	ldi	r24, 0xC6	; 198
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	97 8b       	std	Z+23, r25	; 0x17
     682:	86 8b       	std	Z+22, r24	; 0x16
     684:	11 8e       	std	Z+25, r1	; 0x19
     686:	12 8e       	std	Z+26, r1	; 0x1a
     688:	13 8e       	std	Z+27, r1	; 0x1b
     68a:	14 8e       	std	Z+28, r1	; 0x1c
     68c:	08 95       	ret

0000068e <initVariant>:
     68e:	08 95       	ret

00000690 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     690:	0e 94 db 04 	call	0x9b6	; 0x9b6 <init>

	initVariant();
     694:	0e 94 47 03 	call	0x68e	; 0x68e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     698:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     69c:	c1 eb       	ldi	r28, 0xB1	; 177
     69e:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     6a0:	0e 94 ab 00 	call	0x156	; 0x156 <loop>
		if (serialEventRun) serialEventRun();
     6a4:	20 97       	sbiw	r28, 0x00	; 0
     6a6:	e1 f3       	breq	.-8      	; 0x6a0 <main+0x10>
     6a8:	0e 94 b1 01 	call	0x362	; 0x362 <_Z14serialEventRunv>
     6ac:	f9 cf       	rjmp	.-14     	; 0x6a0 <main+0x10>

000006ae <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	6c 01       	movw	r12, r24
     6c0:	7a 01       	movw	r14, r20
     6c2:	8b 01       	movw	r16, r22
     6c4:	c0 e0       	ldi	r28, 0x00	; 0
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	ce 15       	cp	r28, r14
     6ca:	df 05       	cpc	r29, r15
     6cc:	81 f0       	breq	.+32     	; 0x6ee <_ZN5Print5writeEPKhj+0x40>
     6ce:	d8 01       	movw	r26, r16
     6d0:	6d 91       	ld	r22, X+
     6d2:	8d 01       	movw	r16, r26
     6d4:	d6 01       	movw	r26, r12
     6d6:	ed 91       	ld	r30, X+
     6d8:	fc 91       	ld	r31, X
     6da:	01 90       	ld	r0, Z+
     6dc:	f0 81       	ld	r31, Z
     6de:	e0 2d       	mov	r30, r0
     6e0:	c6 01       	movw	r24, r12
     6e2:	09 95       	icall
     6e4:	89 2b       	or	r24, r25
     6e6:	11 f0       	breq	.+4      	; 0x6ec <_ZN5Print5writeEPKhj+0x3e>
     6e8:	21 96       	adiw	r28, 0x01	; 1
     6ea:	ee cf       	rjmp	.-36     	; 0x6c8 <_ZN5Print5writeEPKhj+0x1a>
     6ec:	7e 01       	movw	r14, r28
     6ee:	c7 01       	movw	r24, r14
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	08 95       	ret

00000702 <_ZN5Print5writeEPKc>:
     702:	61 15       	cp	r22, r1
     704:	71 05       	cpc	r23, r1
     706:	79 f0       	breq	.+30     	; 0x726 <_ZN5Print5writeEPKc+0x24>
     708:	fb 01       	movw	r30, r22
     70a:	01 90       	ld	r0, Z+
     70c:	00 20       	and	r0, r0
     70e:	e9 f7       	brne	.-6      	; 0x70a <_ZN5Print5writeEPKc+0x8>
     710:	31 97       	sbiw	r30, 0x01	; 1
     712:	af 01       	movw	r20, r30
     714:	46 1b       	sub	r20, r22
     716:	57 0b       	sbc	r21, r23
     718:	dc 01       	movw	r26, r24
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	02 80       	ldd	r0, Z+2	; 0x02
     720:	f3 81       	ldd	r31, Z+3	; 0x03
     722:	e0 2d       	mov	r30, r0
     724:	09 94       	ijmp
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	08 95       	ret

0000072c <_ZN5Print5printEPKc>:
     72c:	0c 94 81 03 	jmp	0x702	; 0x702 <_ZN5Print5writeEPKc>

00000730 <_ZN5Print5printEc>:
     730:	dc 01       	movw	r26, r24
     732:	ed 91       	ld	r30, X+
     734:	fc 91       	ld	r31, X
     736:	01 90       	ld	r0, Z+
     738:	f0 81       	ld	r31, Z
     73a:	e0 2d       	mov	r30, r0
     73c:	09 94       	ijmp

0000073e <_ZN5Print7printlnEv>:
     73e:	6e e3       	ldi	r22, 0x3E	; 62
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	0c 94 81 03 	jmp	0x702	; 0x702 <_ZN5Print5writeEPKc>

00000746 <_ZN5Print7printlnEPKc>:
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ec 01       	movw	r28, r24
     750:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5writeEPKc>
     754:	8c 01       	movw	r16, r24
     756:	ce 01       	movw	r24, r28
     758:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN5Print7printlnEv>
     75c:	80 0f       	add	r24, r16
     75e:	91 1f       	adc	r25, r17
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <_ZN5Print11printNumberEmh>:
     76a:	8f 92       	push	r8
     76c:	9f 92       	push	r9
     76e:	af 92       	push	r10
     770:	bf 92       	push	r11
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	a1 97       	sbiw	r28, 0x21	; 33
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	7c 01       	movw	r14, r24
     790:	fa 01       	movw	r30, r20
     792:	cb 01       	movw	r24, r22
     794:	19 a2       	std	Y+33, r1	; 0x21
     796:	22 30       	cpi	r18, 0x02	; 2
     798:	08 f4       	brcc	.+2      	; 0x79c <_ZN5Print11printNumberEmh+0x32>
     79a:	2a e0       	ldi	r18, 0x0A	; 10
     79c:	8e 01       	movw	r16, r28
     79e:	0f 5d       	subi	r16, 0xDF	; 223
     7a0:	1f 4f       	sbci	r17, 0xFF	; 255
     7a2:	82 2e       	mov	r8, r18
     7a4:	91 2c       	mov	r9, r1
     7a6:	a1 2c       	mov	r10, r1
     7a8:	b1 2c       	mov	r11, r1
     7aa:	bf 01       	movw	r22, r30
     7ac:	a5 01       	movw	r20, r10
     7ae:	94 01       	movw	r18, r8
     7b0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
     7b4:	f9 01       	movw	r30, r18
     7b6:	ca 01       	movw	r24, r20
     7b8:	01 50       	subi	r16, 0x01	; 1
     7ba:	11 09       	sbc	r17, r1
     7bc:	6a 30       	cpi	r22, 0x0A	; 10
     7be:	10 f4       	brcc	.+4      	; 0x7c4 <_ZN5Print11printNumberEmh+0x5a>
     7c0:	60 5d       	subi	r22, 0xD0	; 208
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <_ZN5Print11printNumberEmh+0x5c>
     7c4:	69 5c       	subi	r22, 0xC9	; 201
     7c6:	d8 01       	movw	r26, r16
     7c8:	6c 93       	st	X, r22
     7ca:	23 2b       	or	r18, r19
     7cc:	24 2b       	or	r18, r20
     7ce:	25 2b       	or	r18, r21
     7d0:	61 f7       	brne	.-40     	; 0x7aa <_ZN5Print11printNumberEmh+0x40>
     7d2:	b8 01       	movw	r22, r16
     7d4:	c7 01       	movw	r24, r14
     7d6:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5writeEPKc>
     7da:	a1 96       	adiw	r28, 0x21	; 33
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	08 95       	ret

000007fc <_ZN5Print5printEmi>:
     7fc:	21 15       	cp	r18, r1
     7fe:	31 05       	cpc	r19, r1
     800:	41 f4       	brne	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     802:	dc 01       	movw	r26, r24
     804:	ed 91       	ld	r30, X+
     806:	fc 91       	ld	r31, X
     808:	01 90       	ld	r0, Z+
     80a:	f0 81       	ld	r31, Z
     80c:	e0 2d       	mov	r30, r0
     80e:	64 2f       	mov	r22, r20
     810:	09 94       	ijmp
     812:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_ZN5Print11printNumberEmh>

00000816 <_ZN5Print5printEhi>:
     816:	9a 01       	movw	r18, r20
     818:	46 2f       	mov	r20, r22
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_ZN5Print5printEmi>

00000824 <_ZN5Print7printlnEhi>:
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN5Print5printEhi>
     832:	8c 01       	movw	r16, r24
     834:	ce 01       	movw	r24, r28
     836:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN5Print7printlnEv>
     83a:	80 0f       	add	r24, r16
     83c:	91 1f       	adc	r25, r17
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
  if (base == 0) {
     858:	21 15       	cp	r18, r1
     85a:	31 05       	cpc	r19, r1
     85c:	81 f4       	brne	.+32     	; 0x87e <_ZN5Print5printEli+0x36>
    return write(n);
     85e:	dc 01       	movw	r26, r24
     860:	ed 91       	ld	r30, X+
     862:	fc 91       	ld	r31, X
     864:	01 90       	ld	r0, Z+
     866:	f0 81       	ld	r31, Z
     868:	e0 2d       	mov	r30, r0
     86a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     87c:	09 94       	ijmp
  } else if (base == 10) {
     87e:	2a 30       	cpi	r18, 0x0A	; 10
     880:	31 05       	cpc	r19, r1
     882:	01 f5       	brne	.+64     	; 0x8c4 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     884:	77 ff       	sbrs	r23, 7
     886:	1d c0       	rjmp	.+58     	; 0x8c2 <_ZN5Print5printEli+0x7a>
     888:	6a 01       	movw	r12, r20
     88a:	7b 01       	movw	r14, r22
     88c:	ec 01       	movw	r28, r24
      int t = print('-');
     88e:	6d e2       	ldi	r22, 0x2D	; 45
     890:	0e 94 98 03 	call	0x730	; 0x730 <_ZN5Print5printEc>
     894:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     896:	44 27       	eor	r20, r20
     898:	55 27       	eor	r21, r21
     89a:	ba 01       	movw	r22, r20
     89c:	4c 19       	sub	r20, r12
     89e:	5d 09       	sbc	r21, r13
     8a0:	6e 09       	sbc	r22, r14
     8a2:	7f 09       	sbc	r23, r15
     8a4:	2a e0       	ldi	r18, 0x0A	; 10
     8a6:	ce 01       	movw	r24, r28
     8a8:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN5Print11printNumberEmh>
     8ac:	80 0f       	add	r24, r16
     8ae:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     8c2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     8d4:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_ZN5Print11printNumberEmh>

000008d8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     8d8:	9a 01       	movw	r18, r20
  return print((long) n, base);
     8da:	ab 01       	movw	r20, r22
     8dc:	77 0f       	add	r23, r23
     8de:	66 0b       	sbc	r22, r22
     8e0:	77 0b       	sbc	r23, r23
     8e2:	0c 94 24 04 	jmp	0x848	; 0x848 <_ZN5Print5printEli>

000008e6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     8f0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN5Print5printEii>
     8f4:	8c 01       	movw	r16, r24
  n += println();
     8f6:	ce 01       	movw	r24, r28
     8f8:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN5Print7printlnEv>
  return n;
}
     8fc:	80 0f       	add	r24, r16
     8fe:	91 1f       	adc	r25, r17
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <timer0_millis>
     924:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <timer0_millis+0x1>
     928:	a0 91 c6 03 	lds	r26, 0x03C6	; 0x8003c6 <timer0_millis+0x2>
     92c:	b0 91 c7 03 	lds	r27, 0x03C7	; 0x8003c7 <timer0_millis+0x3>
     930:	30 91 c3 03 	lds	r19, 0x03C3	; 0x8003c3 <timer0_fract>
     934:	23 e0       	ldi	r18, 0x03	; 3
     936:	23 0f       	add	r18, r19
     938:	2d 37       	cpi	r18, 0x7D	; 125
     93a:	20 f4       	brcc	.+8      	; 0x944 <__vector_16+0x3a>
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	a1 1d       	adc	r26, r1
     940:	b1 1d       	adc	r27, r1
     942:	05 c0       	rjmp	.+10     	; 0x94e <__vector_16+0x44>
     944:	26 e8       	ldi	r18, 0x86	; 134
     946:	23 0f       	add	r18, r19
     948:	02 96       	adiw	r24, 0x02	; 2
     94a:	a1 1d       	adc	r26, r1
     94c:	b1 1d       	adc	r27, r1
     94e:	20 93 c3 03 	sts	0x03C3, r18	; 0x8003c3 <timer0_fract>
     952:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <timer0_millis>
     956:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <timer0_millis+0x1>
     95a:	a0 93 c6 03 	sts	0x03C6, r26	; 0x8003c6 <timer0_millis+0x2>
     95e:	b0 93 c7 03 	sts	0x03C7, r27	; 0x8003c7 <timer0_millis+0x3>
     962:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <timer0_overflow_count>
     966:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <timer0_overflow_count+0x1>
     96a:	a0 91 ca 03 	lds	r26, 0x03CA	; 0x8003ca <timer0_overflow_count+0x2>
     96e:	b0 91 cb 03 	lds	r27, 0x03CB	; 0x8003cb <timer0_overflow_count+0x3>
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	a1 1d       	adc	r26, r1
     976:	b1 1d       	adc	r27, r1
     978:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <timer0_overflow_count>
     97c:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <timer0_overflow_count+0x1>
     980:	a0 93 ca 03 	sts	0x03CA, r26	; 0x8003ca <timer0_overflow_count+0x2>
     984:	b0 93 cb 03 	sts	0x03CB, r27	; 0x8003cb <timer0_overflow_count+0x3>
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	3f 91       	pop	r19
     992:	2f 91       	pop	r18
     994:	0f 90       	pop	r0
     996:	0f be       	out	0x3f, r0	; 63
     998:	0f 90       	pop	r0
     99a:	1f 90       	pop	r1
     99c:	18 95       	reti

0000099e <millis>:
     99e:	2f b7       	in	r18, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <timer0_millis>
     9a6:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <timer0_millis+0x1>
     9aa:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <timer0_millis+0x2>
     9ae:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <timer0_millis+0x3>
     9b2:	2f bf       	out	0x3f, r18	; 63
     9b4:	08 95       	ret

000009b6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     9b6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     9b8:	84 b5       	in	r24, 0x24	; 36
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     9be:	84 b5       	in	r24, 0x24	; 36
     9c0:	81 60       	ori	r24, 0x01	; 1
     9c2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     9c4:	85 b5       	in	r24, 0x25	; 37
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     9ca:	85 b5       	in	r24, 0x25	; 37
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     9d0:	ee e6       	ldi	r30, 0x6E	; 110
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	81 60       	ori	r24, 0x01	; 1
     9d8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     9da:	e1 e8       	ldi	r30, 0x81	; 129
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     9e0:	80 81       	ld	r24, Z
     9e2:	82 60       	ori	r24, 0x02	; 2
     9e4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     9e6:	80 81       	ld	r24, Z
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     9ec:	e0 e8       	ldi	r30, 0x80	; 128
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	81 60       	ori	r24, 0x01	; 1
     9f4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     9f6:	e1 eb       	ldi	r30, 0xB1	; 177
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	84 60       	ori	r24, 0x04	; 4
     9fe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     a00:	e0 eb       	ldi	r30, 0xB0	; 176
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     a0a:	ea e7       	ldi	r30, 0x7A	; 122
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	84 60       	ori	r24, 0x04	; 4
     a12:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     a1a:	80 81       	ld	r24, Z
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a20:	80 81       	ld	r24, Z
     a22:	80 68       	ori	r24, 0x80	; 128
     a24:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a26:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     a2a:	08 95       	ret

00000a2c <_ZN5MHZ197cleanUpEh>:
    provisioning(ZEROCAL);
}

void MHZ19::recoveryReset()
{
    provisioning(RECOVER);
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	8c 01       	movw	r16, r24
     a38:	f6 2e       	mov	r15, r22
     a3a:	c0 e0       	ldi	r28, 0x00	; 0
     a3c:	cf 15       	cp	r28, r15
     a3e:	e1 f0       	breq	.+56     	; 0xa78 <_ZN5MHZ197cleanUpEh+0x4c>
     a40:	d8 01       	movw	r26, r16
     a42:	15 96       	adiw	r26, 0x05	; 5
     a44:	8d 91       	ld	r24, X+
     a46:	9c 91       	ld	r25, X
     a48:	16 97       	sbiw	r26, 0x06	; 6
     a4a:	dc 01       	movw	r26, r24
     a4c:	ed 91       	ld	r30, X+
     a4e:	fc 91       	ld	r31, X
     a50:	02 84       	ldd	r0, Z+10	; 0x0a
     a52:	f3 85       	ldd	r31, Z+11	; 0x0b
     a54:	e0 2d       	mov	r30, r0
     a56:	09 95       	icall
     a58:	d8 2f       	mov	r29, r24
     a5a:	6d e4       	ldi	r22, 0x4D	; 77
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	86 e2       	ldi	r24, 0x26	; 38
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     a66:	4a e0       	ldi	r20, 0x0A	; 10
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	6d 2f       	mov	r22, r29
     a6c:	86 e2       	ldi	r24, 0x26	; 38
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print7printlnEhi>
     a74:	cf 5f       	subi	r28, 0xFF	; 255
     a76:	e2 cf       	rjmp	.-60     	; 0xa3c <_ZN5MHZ197cleanUpEh+0x10>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	08 95       	ret

00000a84 <_ZN5MHZ1911printstreamEPhbh>:
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	7c 01       	movw	r14, r24
     a94:	eb 01       	movw	r28, r22
     a96:	d2 2e       	mov	r13, r18
     a98:	8b 01       	movw	r16, r22
     a9a:	07 5f       	subi	r16, 0xF7	; 247
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	28 17       	cp	r18, r24
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <_ZN5MHZ1911printstreamEPhbh+0x22>
     aa4:	59 c0       	rjmp	.+178    	; 0xb58 <_ZN5MHZ1911printstreamEPhbh+0xd4>
     aa6:	41 11       	cpse	r20, r1
     aa8:	59 c0       	rjmp	.+178    	; 0xb5c <_ZN5MHZ1911printstreamEPhbh+0xd8>
     aaa:	67 e6       	ldi	r22, 0x67	; 103
     aac:	71 e0       	ldi	r23, 0x01	; 1
     aae:	86 e2       	ldi	r24, 0x26	; 38
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     ab6:	f7 01       	movw	r30, r14
     ab8:	83 85       	ldd	r24, Z+11	; 0x0b
     aba:	88 23       	and	r24, r24
     abc:	e1 f1       	breq	.+120    	; 0xb36 <_ZN5MHZ1911printstreamEPhbh+0xb2>
     abe:	64 e7       	ldi	r22, 0x74	; 116
     ac0:	71 e0       	ldi	r23, 0x01	; 1
     ac2:	86 e2       	ldi	r24, 0x26	; 38
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     aca:	69 91       	ld	r22, Y+
     acc:	4a e0       	ldi	r20, 0x0A	; 10
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	86 e2       	ldi	r24, 0x26	; 38
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN5Print5printEhi>
     ad8:	6a e2       	ldi	r22, 0x2A	; 42
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	86 e2       	ldi	r24, 0x26	; 38
     ade:	93 e0       	ldi	r25, 0x03	; 3
     ae0:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     ae4:	0c 17       	cp	r16, r28
     ae6:	1d 07       	cpc	r17, r29
     ae8:	81 f7       	brne	.-32     	; 0xaca <_ZN5MHZ1911printstreamEPhbh+0x46>
     aea:	6a e7       	ldi	r22, 0x7A	; 122
     aec:	71 e0       	ldi	r23, 0x01	; 1
     aee:	86 e2       	ldi	r24, 0x26	; 38
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     af6:	4a e0       	ldi	r20, 0x0A	; 10
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	6d 2d       	mov	r22, r13
     afc:	86 e2       	ldi	r24, 0x26	; 38
     afe:	93 e0       	ldi	r25, 0x03	; 3
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN5Print7printlnEhi>
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	40 e1       	ldi	r20, 0x10	; 16
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	f7 01       	movw	r30, r14
     b1a:	60 81       	ld	r22, Z
     b1c:	86 e2       	ldi	r24, 0x26	; 38
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN5Print5printEhi>
     b24:	6a e2       	ldi	r22, 0x2A	; 42
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	86 e2       	ldi	r24, 0x26	; 38
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     b30:	c0 17       	cp	r28, r16
     b32:	d1 07       	cpc	r29, r17
     b34:	d1 f2       	breq	.-76     	; 0xaea <_ZN5MHZ1911printstreamEPhbh+0x66>
     b36:	67 e8       	ldi	r22, 0x87	; 135
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	86 e2       	ldi	r24, 0x26	; 38
     b3c:	93 e0       	ldi	r25, 0x03	; 3
     b3e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     b42:	7e 01       	movw	r14, r28
     b44:	88 81       	ld	r24, Y
     b46:	80 31       	cpi	r24, 0x10	; 16
     b48:	20 f7       	brcc	.-56     	; 0xb12 <_ZN5MHZ1911printstreamEPhbh+0x8e>
     b4a:	6a e8       	ldi	r22, 0x8A	; 138
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	86 e2       	ldi	r24, 0x26	; 38
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     b56:	dd cf       	rjmp	.-70     	; 0xb12 <_ZN5MHZ1911printstreamEPhbh+0x8e>
     b58:	44 23       	and	r20, r20
     b5a:	19 f0       	breq	.+6      	; 0xb62 <_ZN5MHZ1911printstreamEPhbh+0xde>
     b5c:	6c e8       	ldi	r22, 0x8C	; 140
     b5e:	71 e0       	ldi	r23, 0x01	; 1
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <_ZN5MHZ1911printstreamEPhbh+0xe2>
     b62:	67 e6       	ldi	r22, 0x67	; 103
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	86 e2       	ldi	r24, 0x26	; 38
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     b6e:	f7 01       	movw	r30, r14
     b70:	83 85       	ldd	r24, Z+11	; 0x0b
     b72:	88 23       	and	r24, r24
     b74:	a9 f1       	breq	.+106    	; 0xbe0 <_ZN5MHZ1911printstreamEPhbh+0x15c>
     b76:	64 e7       	ldi	r22, 0x74	; 116
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	86 e2       	ldi	r24, 0x26	; 38
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     b82:	69 91       	ld	r22, Y+
     b84:	4a e0       	ldi	r20, 0x0A	; 10
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	86 e2       	ldi	r24, 0x26	; 38
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN5Print5printEhi>
     b90:	6a e2       	ldi	r22, 0x2A	; 42
     b92:	71 e0       	ldi	r23, 0x01	; 1
     b94:	86 e2       	ldi	r24, 0x26	; 38
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     b9c:	c0 17       	cp	r28, r16
     b9e:	d1 07       	cpc	r29, r17
     ba0:	81 f7       	brne	.-32     	; 0xb82 <_ZN5MHZ1911printstreamEPhbh+0xfe>
     ba2:	6a e2       	ldi	r22, 0x2A	; 42
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	86 e2       	ldi	r24, 0x26	; 38
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	0c 94 a3 03 	jmp	0x746	; 0x746 <_ZN5Print7printlnEPKc>
     bbc:	21 96       	adiw	r28, 0x01	; 1
     bbe:	40 e1       	ldi	r20, 0x10	; 16
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	f7 01       	movw	r30, r14
     bc4:	60 81       	ld	r22, Z
     bc6:	86 e2       	ldi	r24, 0x26	; 38
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0e 94 0b 04 	call	0x816	; 0x816 <_ZN5Print5printEhi>
     bce:	6a e2       	ldi	r22, 0x2A	; 42
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	86 e2       	ldi	r24, 0x26	; 38
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     bda:	0c 17       	cp	r16, r28
     bdc:	1d 07       	cpc	r17, r29
     bde:	09 f3       	breq	.-62     	; 0xba2 <_ZN5MHZ1911printstreamEPhbh+0x11e>
     be0:	67 e8       	ldi	r22, 0x87	; 135
     be2:	71 e0       	ldi	r23, 0x01	; 1
     be4:	86 e2       	ldi	r24, 0x26	; 38
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     bec:	7e 01       	movw	r14, r28
     bee:	88 81       	ld	r24, Y
     bf0:	80 31       	cpi	r24, 0x10	; 16
     bf2:	20 f7       	brcc	.-56     	; 0xbbc <_ZN5MHZ1911printstreamEPhbh+0x138>
     bf4:	6a e8       	ldi	r22, 0x8A	; 138
     bf6:	71 e0       	ldi	r23, 0x01	; 1
     bf8:	86 e2       	ldi	r24, 0x26	; 38
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEPKc>
     c00:	dd cf       	rjmp	.-70     	; 0xbbc <_ZN5MHZ1911printstreamEPhbh+0x138>

00000c02 <_ZN5MHZ195writeEPh>:
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ec 01       	movw	r28, r24
     c0c:	8b 01       	movw	r16, r22
     c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c10:	88 23       	and	r24, r24
     c12:	29 f0       	breq	.+10     	; 0xc1e <_ZN5MHZ195writeEPh+0x1c>
     c14:	28 81       	ld	r18, Y
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN5MHZ1911printstreamEPhbh>
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	9e 81       	ldd	r25, Y+6	; 0x06
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	02 80       	ldd	r0, Z+2	; 0x02
     c2a:	f3 81       	ldd	r31, Z+3	; 0x03
     c2c:	e0 2d       	mov	r30, r0
     c2e:	49 e0       	ldi	r20, 0x09	; 9
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	b8 01       	movw	r22, r16
     c34:	09 95       	icall
     c36:	8d 81       	ldd	r24, Y+5	; 0x05
     c38:	9e 81       	ldd	r25, Y+6	; 0x06
     c3a:	dc 01       	movw	r26, r24
     c3c:	ed 91       	ld	r30, X+
     c3e:	fc 91       	ld	r31, X
     c40:	06 80       	ldd	r0, Z+6	; 0x06
     c42:	f7 81       	ldd	r31, Z+7	; 0x07
     c44:	e0 2d       	mov	r30, r0
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	09 94       	ijmp

00000c50 <_ZN5MHZ196getCRCEPh>:
     c50:	fb 01       	movw	r30, r22
     c52:	31 96       	adiw	r30, 0x01	; 1
     c54:	68 5f       	subi	r22, 0xF8	; 248
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	91 91       	ld	r25, Z+
     c5c:	89 0f       	add	r24, r25
     c5e:	e6 17       	cp	r30, r22
     c60:	f7 07       	cpc	r31, r23
     c62:	d9 f7       	brne	.-10     	; 0xc5a <_ZN5MHZ196getCRCEPh+0xa>
     c64:	81 95       	neg	r24
     c66:	08 95       	ret

00000c68 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE>:
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	ec 01       	movw	r28, r24
     c7a:	8b 01       	movw	r16, r22
     c7c:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     c80:	6b 01       	movw	r12, r22
     c82:	7c 01       	movw	r14, r24
     c84:	89 e0       	ldi	r24, 0x09	; 9
     c86:	d8 01       	movw	r26, r16
     c88:	1d 92       	st	X+, r1
     c8a:	8a 95       	dec	r24
     c8c:	e9 f7       	brne	.-6      	; 0xc88 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0x20>
     c8e:	18 82       	st	Y, r1
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	dc 01       	movw	r26, r24
     c96:	ed 91       	ld	r30, X+
     c98:	fc 91       	ld	r31, X
     c9a:	00 84       	ldd	r0, Z+8	; 0x08
     c9c:	f1 85       	ldd	r31, Z+9	; 0x09
     c9e:	e0 2d       	mov	r30, r0
     ca0:	09 95       	icall
     ca2:	09 97       	sbiw	r24, 0x09	; 9
     ca4:	24 f5       	brge	.+72     	; 0xcee <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0x86>
     ca6:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	8c 19       	sub	r24, r12
     cb0:	9d 09       	sbc	r25, r13
     cb2:	ae 09       	sbc	r26, r14
     cb4:	bf 09       	sbc	r27, r15
     cb6:	84 3f       	cpi	r24, 0xF4	; 244
     cb8:	91 40       	sbci	r25, 0x01	; 1
     cba:	a1 05       	cpc	r26, r1
     cbc:	b1 05       	cpc	r27, r1
     cbe:	40 f3       	brcs	.-48     	; 0xc90 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0x28>
     cc0:	65 e9       	ldi	r22, 0x95	; 149
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	86 e2       	ldi	r24, 0x26	; 38
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN5Print7printlnEPKc>
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	88 83       	st	Y, r24
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	9e 81       	ldd	r25, Y+6	; 0x06
     cd4:	dc 01       	movw	r26, r24
     cd6:	ed 91       	ld	r30, X+
     cd8:	fc 91       	ld	r31, X
     cda:	00 84       	ldd	r0, Z+8	; 0x08
     cdc:	f1 85       	ldd	r31, Z+9	; 0x09
     cde:	e0 2d       	mov	r30, r0
     ce0:	09 95       	icall
     ce2:	68 2f       	mov	r22, r24
     ce4:	ce 01       	movw	r24, r28
     ce6:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN5MHZ197cleanUpEh>
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	3c c0       	rjmp	.+120    	; 0xd66 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xfe>
     cee:	49 e0       	ldi	r20, 0x09	; 9
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	b8 01       	movw	r22, r16
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN6Stream9readBytesEPcj>
     cfc:	88 81       	ld	r24, Y
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	91 f1       	breq	.+100    	; 0xd66 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xfe>
     d02:	b8 01       	movw	r22, r16
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN5MHZ196getCRCEPh>
     d0a:	f8 01       	movw	r30, r16
     d0c:	90 85       	ldd	r25, Z+8	; 0x08
     d0e:	89 17       	cp	r24, r25
     d10:	11 f0       	breq	.+4      	; 0xd16 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xae>
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	88 83       	st	Y, r24
     d16:	d8 01       	movw	r26, r16
     d18:	9c 91       	ld	r25, X
     d1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d1c:	98 13       	cpse	r25, r24
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xc2>
     d20:	11 96       	adiw	r26, 0x01	; 1
     d22:	9c 91       	ld	r25, X
     d24:	8e 85       	ldd	r24, Y+14	; 0x0e
     d26:	98 17       	cp	r25, r24
     d28:	79 f0       	breq	.+30     	; 0xd48 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xe0>
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	9e 81       	ldd	r25, Y+6	; 0x06
     d2e:	dc 01       	movw	r26, r24
     d30:	ed 91       	ld	r30, X+
     d32:	fc 91       	ld	r31, X
     d34:	00 84       	ldd	r0, Z+8	; 0x08
     d36:	f1 85       	ldd	r31, Z+9	; 0x09
     d38:	e0 2d       	mov	r30, r0
     d3a:	09 95       	icall
     d3c:	68 2f       	mov	r22, r24
     d3e:	ce 01       	movw	r24, r28
     d40:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN5MHZ197cleanUpEh>
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	88 83       	st	Y, r24
     d48:	88 81       	ld	r24, Y
     d4a:	81 11       	cpse	r24, r1
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xea>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	88 83       	st	Y, r24
     d52:	8a 85       	ldd	r24, Y+10	; 0x0a
     d54:	88 23       	and	r24, r24
     d56:	31 f0       	breq	.+12     	; 0xd64 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE+0xfc>
     d58:	28 81       	ld	r18, Y
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	b8 01       	movw	r22, r16
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN5MHZ1911printstreamEPhbh>
     d64:	88 81       	ld	r24, Y
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	08 95       	ret

00000d78 <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE>:
     d78:	46 2f       	mov	r20, r22
     d7a:	fc 01       	movw	r30, r24
     d7c:	26 85       	ldd	r18, Z+14	; 0x0e
     d7e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d82:	23 13       	cpse	r18, r19
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE+0x16>
     d86:	bc 01       	movw	r22, r24
     d88:	69 5d       	subi	r22, 0xD9	; 217
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	12 c0       	rjmp	.+36     	; 0xdb2 <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE+0x3a>
     d8e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     d92:	23 13       	cpse	r18, r19
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE+0x26>
     d96:	bc 01       	movw	r22, r24
     d98:	6b 5e       	subi	r22, 0xEB	; 235
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	0a c0       	rjmp	.+20     	; 0xdb2 <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE+0x3a>
     d9e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     da2:	bc 01       	movw	r22, r24
     da4:	23 13       	cpse	r18, r19
     da6:	03 c0       	rjmp	.+6      	; 0xdae <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE+0x36>
     da8:	62 5e       	subi	r22, 0xE2	; 226
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE+0x3a>
     dae:	60 5d       	subi	r22, 0xD0	; 208
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	0c 94 34 06 	jmp	0xc68	; 0xc68 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE>

00000db6 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi>:
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	29 97       	sbiw	r28, 0x09	; 9
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	8c 01       	movw	r16, r24
     dd4:	ca 01       	movw	r24, r20
     dd6:	29 e0       	ldi	r18, 0x09	; 9
     dd8:	ae 01       	movw	r20, r28
     dda:	4f 5f       	subi	r20, 0xFF	; 255
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	7a 01       	movw	r14, r20
     de0:	da 01       	movw	r26, r20
     de2:	e2 2f       	mov	r30, r18
     de4:	1d 92       	st	X+, r1
     de6:	ea 95       	dec	r30
     de8:	e9 f7       	brne	.-6      	; 0xde4 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x2e>
     dea:	f8 01       	movw	r30, r16
     dec:	3c 96       	adiw	r30, 0x0c	; 12
     dee:	df 01       	movw	r26, r30
     df0:	1d 92       	st	X+, r1
     df2:	2a 95       	dec	r18
     df4:	e9 f7       	brne	.-6      	; 0xdf0 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x3a>
     df6:	2f ef       	ldi	r18, 0xFF	; 255
     df8:	29 83       	std	Y+1, r18	; 0x01
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	2a 83       	std	Y+2, r18	; 0x02
     dfe:	e6 2f       	mov	r30, r22
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	e0 50       	subi	r30, 0x00	; 0
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	20 81       	ld	r18, Z
     e08:	2b 83       	std	Y+3, r18	; 0x03
     e0a:	66 30       	cpi	r22, 0x06	; 6
     e0c:	79 f0       	breq	.+30     	; 0xe2c <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x76>
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x60>
     e10:	61 30       	cpi	r22, 0x01	; 1
     e12:	31 f0       	breq	.+12     	; 0xe20 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x6a>
     e14:	26 c0       	rjmp	.+76     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e16:	67 30       	cpi	r22, 0x07	; 7
     e18:	69 f0       	breq	.+26     	; 0xe34 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x7e>
     e1a:	68 30       	cpi	r22, 0x08	; 8
     e1c:	b9 f0       	breq	.+46     	; 0xe4c <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x96>
     e1e:	21 c0       	rjmp	.+66     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e20:	f8 01       	movw	r30, r16
     e22:	27 81       	ldd	r18, Z+7	; 0x07
     e24:	21 11       	cpse	r18, r1
     e26:	1d c0       	rjmp	.+58     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e28:	8c 83       	std	Y+4, r24	; 0x04
     e2a:	1b c0       	rjmp	.+54     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	c9 f0       	breq	.+50     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e30:	8f 83       	std	Y+7, r24	; 0x07
     e32:	17 c0       	rjmp	.+46     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e34:	9c 01       	movw	r18, r24
     e36:	97 ff       	sbrs	r25, 7
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0x88>
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	3c 83       	std	Y+4, r19	; 0x04
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	71 e0       	ldi	r23, 0x01	; 1
     e44:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__divmodhi4>
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xac>
     e4c:	9c 01       	movw	r18, r24
     e4e:	97 ff       	sbrs	r25, 7
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xa0>
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	71 e0       	ldi	r23, 0x01	; 1
     e5c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__divmodhi4>
     e60:	88 87       	std	Y+8, r24	; 0x08
     e62:	b7 01       	movw	r22, r14
     e64:	c8 01       	movw	r24, r16
     e66:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN5MHZ196getCRCEPh>
     e6a:	89 87       	std	Y+9, r24	; 0x09
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	f7 01       	movw	r30, r14
     e70:	d8 01       	movw	r26, r16
     e72:	1c 96       	adiw	r26, 0x0c	; 12
     e74:	01 90       	ld	r0, Z+
     e76:	0d 92       	st	X+, r0
     e78:	8a 95       	dec	r24
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi+0xbe>
     e7c:	29 96       	adiw	r28, 0x09	; 9
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	08 95       	ret

00000e96 <_ZN5MHZ196verifyEv>:
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
     eb0:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     eb4:	4b 01       	movw	r8, r22
     eb6:	5c 01       	movw	r10, r24
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	64 e0       	ldi	r22, 0x04	; 4
     ebe:	ce 01       	movw	r24, r28
     ec0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi>
     ec4:	8e 01       	movw	r16, r28
     ec6:	04 5f       	subi	r16, 0xF4	; 244
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	b8 01       	movw	r22, r16
     ecc:	ce 01       	movw	r24, r28
     ece:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN5MHZ195writeEPh>
     ed2:	7e 01       	movw	r14, r28
     ed4:	25 e1       	ldi	r18, 0x15	; 21
     ed6:	e2 0e       	add	r14, r18
     ed8:	f1 1c       	adc	r15, r1
     eda:	44 e0       	ldi	r20, 0x04	; 4
     edc:	b7 01       	movw	r22, r14
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	81 f0       	breq	.+32     	; 0xf08 <_ZN5MHZ196verifyEv+0x72>
     ee8:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	88 19       	sub	r24, r8
     ef2:	99 09       	sbc	r25, r9
     ef4:	aa 09       	sbc	r26, r10
     ef6:	bb 09       	sbc	r27, r11
     ef8:	84 3f       	cpi	r24, 0xF4	; 244
     efa:	91 40       	sbci	r25, 0x01	; 1
     efc:	a1 05       	cpc	r26, r1
     efe:	b1 05       	cpc	r27, r1
     f00:	60 f3       	brcs	.-40     	; 0xeda <_ZN5MHZ196verifyEv+0x44>
     f02:	6c eb       	ldi	r22, 0xBC	; 188
     f04:	71 e0       	ldi	r23, 0x01	; 1
     f06:	31 c0       	rjmp	.+98     	; 0xf6a <_ZN5MHZ196verifyEv+0xd4>
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	6c e0       	ldi	r22, 0x0C	; 12
     f0e:	ce 01       	movw	r24, r28
     f10:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi>
     f14:	b8 01       	movw	r22, r16
     f16:	ce 01       	movw	r24, r28
     f18:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN5MHZ195writeEPh>
     f1c:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     f20:	6b 01       	movw	r12, r22
     f22:	7c 01       	movw	r14, r24
     f24:	8e 01       	movw	r16, r28
     f26:	00 5d       	subi	r16, 0xD0	; 208
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	4c e0       	ldi	r20, 0x0C	; 12
     f2c:	b8 01       	movw	r22, r16
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN5MHZ194readEPhNS_12COMMAND_TYPEE>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	81 f0       	breq	.+32     	; 0xf58 <_ZN5MHZ196verifyEv+0xc2>
     f38:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8c 19       	sub	r24, r12
     f42:	9d 09       	sbc	r25, r13
     f44:	ae 09       	sbc	r26, r14
     f46:	bf 09       	sbc	r27, r15
     f48:	84 3f       	cpi	r24, 0xF4	; 244
     f4a:	91 40       	sbci	r25, 0x01	; 1
     f4c:	a1 05       	cpc	r26, r1
     f4e:	b1 05       	cpc	r27, r1
     f50:	60 f3       	brcs	.-40     	; 0xf2a <_ZN5MHZ196verifyEv+0x94>
     f52:	6e ee       	ldi	r22, 0xEE	; 238
     f54:	71 e0       	ldi	r23, 0x01	; 1
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <_ZN5MHZ196verifyEv+0xd4>
     f58:	fe 01       	movw	r30, r28
     f5a:	77 96       	adiw	r30, 0x17	; 23
     f5c:	6b 96       	adiw	r28, 0x1b	; 27
     f5e:	91 91       	ld	r25, Z+
     f60:	82 8d       	ldd	r24, Z+26	; 0x1a
     f62:	98 17       	cp	r25, r24
     f64:	91 f0       	breq	.+36     	; 0xf8a <_ZN5MHZ196verifyEv+0xf4>
     f66:	60 e2       	ldi	r22, 0x20	; 32
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	86 e2       	ldi	r24, 0x26	; 38
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	9f 90       	pop	r9
     f84:	8f 90       	pop	r8
     f86:	0c 94 a3 03 	jmp	0x746	; 0x746 <_ZN5Print7printlnEPKc>
     f8a:	ec 17       	cp	r30, r28
     f8c:	fd 07       	cpc	r31, r29
     f8e:	39 f7       	brne	.-50     	; 0xf5e <_ZN5MHZ196verifyEv+0xc8>
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	08 95       	ret

00000faa <_ZN5MHZ195beginER6Stream>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
     fb0:	7e 83       	std	Y+6, r23	; 0x06
     fb2:	6d 83       	std	Y+5, r22	; 0x05
     fb4:	0e 94 4b 07 	call	0xe96	; 0xe96 <_ZN5MHZ196verifyEv>
     fb8:	88 81       	ld	r24, Y
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	41 f0       	breq	.+16     	; 0xfce <_ZN5MHZ195beginER6Stream+0x24>
     fbe:	6f e5       	ldi	r22, 0x5F	; 95
     fc0:	72 e0       	ldi	r23, 0x02	; 2
     fc2:	86 e2       	ldi	r24, 0x26	; 38
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	0c 94 a3 03 	jmp	0x746	; 0x746 <_ZN5Print7printlnEPKc>
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <_ZN5MHZ198ABCCheckEv>:
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
     fe2:	09 81       	ldd	r16, Y+1	; 0x01
     fe4:	1a 81       	ldd	r17, Y+2	; 0x02
     fe6:	2b 81       	ldd	r18, Y+3	; 0x03
     fe8:	3c 81       	ldd	r19, Y+4	; 0x04
     fea:	60 1b       	sub	r22, r16
     fec:	71 0b       	sbc	r23, r17
     fee:	82 0b       	sbc	r24, r18
     ff0:	93 0b       	sbc	r25, r19
     ff2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__floatunsisf>
     ff6:	20 e8       	ldi	r18, 0x80	; 128
     ff8:	3b ec       	ldi	r19, 0xCB	; 203
     ffa:	44 e2       	ldi	r20, 0x24	; 36
     ffc:	5c e4       	ldi	r21, 0x4C	; 76
     ffe:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__gesf2>
    1002:	87 fd       	sbrc	r24, 7
    1004:	13 c0       	rjmp	.+38     	; 0x102c <_ZN5MHZ198ABCCheckEv+0x58>
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	88 23       	and	r24, r24
    100a:	81 f0       	breq	.+32     	; 0x102c <_ZN5MHZ198ABCCheckEv+0x58>
    100c:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
    1010:	69 83       	std	Y+1, r22	; 0x01
    1012:	7a 83       	std	Y+2, r23	; 0x02
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	ce 01       	movw	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>:
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
    103e:	16 2f       	mov	r17, r22
    1040:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN5MHZ1916constructCommandENS_12COMMAND_TYPEEi>
    1044:	be 01       	movw	r22, r28
    1046:	64 5f       	subi	r22, 0xF4	; 244
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	ce 01       	movw	r24, r28
    104c:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN5MHZ195writeEPh>
    1050:	61 2f       	mov	r22, r17
    1052:	ce 01       	movw	r24, r28
    1054:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN5MHZ1914handleResponseENS_12COMMAND_TYPEE>
    1058:	ce 01       	movw	r24, r28
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <_ZN5MHZ198ABCCheckEv>

00001064 <_ZN5MHZ1920getTemperatureOffsetEb>:
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	16 2f       	mov	r17, r22
    106e:	66 23       	and	r22, r22
    1070:	29 f0       	breq	.+10     	; 0x107c <_ZN5MHZ1920getTemperatureOffsetEb+0x18>
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	64 e0       	ldi	r22, 0x04	; 4
    1078:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
    107c:	88 81       	ld	r24, Y
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	11 f0       	breq	.+4      	; 0x1086 <_ZN5MHZ1920getTemperatureOffsetEb+0x22>
    1082:	11 11       	cpse	r17, r1
    1084:	25 c0       	rjmp	.+74     	; 0x10d0 <_ZN5MHZ1920getTemperatureOffsetEb+0x6c>
    1086:	88 8d       	ldd	r24, Y+24	; 0x18
    1088:	2f 89       	ldd	r18, Y+23	; 0x17
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	28 50       	subi	r18, 0x08	; 8
    108e:	31 09       	sbc	r19, r1
    1090:	4c ed       	ldi	r20, 0xDC	; 220
    1092:	55 e0       	ldi	r21, 0x05	; 5
    1094:	24 9f       	mul	r18, r20
    1096:	f0 01       	movw	r30, r0
    1098:	25 9f       	mul	r18, r21
    109a:	f0 0d       	add	r31, r0
    109c:	34 9f       	mul	r19, r20
    109e:	f0 0d       	add	r31, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	24 e6       	ldi	r18, 0x64	; 100
    10a4:	82 9f       	mul	r24, r18
    10a6:	c0 01       	movw	r24, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	61 e1       	ldi	r22, 0x11	; 17
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__divmodhi4>
    10b2:	6e 0f       	add	r22, r30
    10b4:	7f 1f       	adc	r23, r31
    10b6:	07 2e       	mov	r0, r23
    10b8:	00 0c       	add	r0, r0
    10ba:	88 0b       	sbc	r24, r24
    10bc:	99 0b       	sbc	r25, r25
    10be:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	48 ec       	ldi	r20, 0xC8	; 200
    10c8:	52 e4       	ldi	r21, 0x42	; 66
    10ca:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divsf3>
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <_ZN5MHZ1920getTemperatureOffsetEb+0x74>
    10d0:	63 e3       	ldi	r22, 0x33	; 51
    10d2:	73 e9       	ldi	r23, 0x93	; 147
    10d4:	88 e8       	ldi	r24, 0x88	; 136
    10d6:	93 ec       	ldi	r25, 0xC3	; 195
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	08 95       	ret

000010e0 <_ZN5MHZ1914getTemperatureEbb>:
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	04 2f       	mov	r16, r20
    10f4:	66 23       	and	r22, r22
    10f6:	f1 f1       	breq	.+124    	; 0x1174 <_ZN5MHZ1914getTemperatureEbb+0x94>
    10f8:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <_ZZN5MHZ1914getTemperatureEbbE5isSet>
    10fc:	81 11       	cpse	r24, r1
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <_ZN5MHZ1914getTemperatureEbb+0x48>
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	65 e0       	ldi	r22, 0x05	; 5
    1106:	ce 01       	movw	r24, r28
    1108:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
    110c:	1a a1       	ldd	r17, Y+34	; 0x22
    110e:	16 52       	subi	r17, 0x26	; 38
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	ce 01       	movw	r24, r28
    1114:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN5MHZ1920getTemperatureOffsetEb>
    1118:	0e 94 1c 01 	call	0x238	; 0x238 <__fixunssfsi>
    111c:	16 1b       	sub	r17, r22
    111e:	10 93 cc 03 	sts	0x03CC, r17	; 0x8003cc <_ZZN5MHZ1914getTemperatureEbbE8baseTemp>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <_ZZN5MHZ1914getTemperatureEbbE5isSet>
    1128:	00 23       	and	r16, r16
    112a:	31 f0       	breq	.+12     	; 0x1138 <_ZN5MHZ1914getTemperatureEbb+0x58>
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	64 e0       	ldi	r22, 0x04	; 4
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
    1138:	88 81       	ld	r24, Y
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	39 f0       	breq	.+14     	; 0x114c <_ZN5MHZ1914getTemperatureEbb+0x6c>
    113e:	00 23       	and	r16, r16
    1140:	29 f0       	breq	.+10     	; 0x114c <_ZN5MHZ1914getTemperatureEbb+0x6c>
    1142:	63 e3       	ldi	r22, 0x33	; 51
    1144:	73 e9       	ldi	r23, 0x93	; 147
    1146:	88 e8       	ldi	r24, 0x88	; 136
    1148:	93 ec       	ldi	r25, 0xC3	; 195
    114a:	2a c0       	rjmp	.+84     	; 0x11a0 <_ZN5MHZ1914getTemperatureEbb+0xc0>
    114c:	60 91 cc 03 	lds	r22, 0x03CC	; 0x8003cc <_ZZN5MHZ1914getTemperatureEbbE8baseTemp>
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__floatunsisf>
    115a:	6b 01       	movw	r12, r22
    115c:	7c 01       	movw	r14, r24
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN5MHZ1920getTemperatureOffsetEb>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__addsf3>
    1172:	16 c0       	rjmp	.+44     	; 0x11a0 <_ZN5MHZ1914getTemperatureEbb+0xc0>
    1174:	44 23       	and	r20, r20
    1176:	29 f0       	breq	.+10     	; 0x1182 <_ZN5MHZ1914getTemperatureEbb+0xa2>
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	65 e0       	ldi	r22, 0x05	; 5
    117e:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
    1182:	88 81       	ld	r24, Y
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	11 f0       	breq	.+4      	; 0x118c <_ZN5MHZ1914getTemperatureEbb+0xac>
    1188:	01 11       	cpse	r16, r1
    118a:	db cf       	rjmp	.-74     	; 0x1142 <_ZN5MHZ1914getTemperatureEbb+0x62>
    118c:	6a a1       	ldd	r22, Y+34	; 0x22
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	66 52       	subi	r22, 0x26	; 38
    1192:	71 09       	sbc	r23, r1
    1194:	07 2e       	mov	r0, r23
    1196:	00 0c       	add	r0, r0
    1198:	88 0b       	sbc	r24, r24
    119a:	99 0b       	sbc	r25, r25
    119c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	08 95       	ret

000011b2 <_ZN5MHZ1915autoCalibrationEbh>:
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	ec 01       	movw	r28, r24
    11ba:	16 2f       	mov	r17, r22
    11bc:	66 23       	and	r22, r22
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <_ZN5MHZ1915autoCalibrationEbh+0x36>
    11c0:	44 23       	and	r20, r20
    11c2:	a1 f0       	breq	.+40     	; 0x11ec <_ZN5MHZ1915autoCalibrationEbh+0x3a>
    11c4:	48 31       	cpi	r20, 0x18	; 24
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <_ZN5MHZ1915autoCalibrationEbh+0x18>
    11c8:	48 e1       	ldi	r20, 0x18	; 24
    11ca:	64 2f       	mov	r22, r20
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    11d6:	26 e6       	ldi	r18, 0x66	; 102
    11d8:	36 e6       	ldi	r19, 0x66	; 102
    11da:	46 ed       	ldi	r20, 0xD6	; 214
    11dc:	50 e4       	ldi	r21, 0x40	; 64
    11de:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__mulsf3>
    11e2:	0e 94 1c 01 	call	0x238	; 0x238 <__fixunssfsi>
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <_ZN5MHZ1915autoCalibrationEbh+0x3c>
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <_ZN5MHZ1915autoCalibrationEbh+0x3c>
    11ec:	60 ea       	ldi	r22, 0xA0	; 160
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	81 27       	eor	r24, r17
    11f2:	8f 83       	std	Y+7, r24	; 0x07
    11f4:	46 2f       	mov	r20, r22
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	ce 01       	movw	r24, r28
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>

00001206 <_ZN5MHZ196getCO2Ebb>:
}

/*########################-Get Functions-##########################*/

int MHZ19::getCO2(bool isunLimited, bool force)
{
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
    1210:	16 2f       	mov	r17, r22
    1212:	04 2f       	mov	r16, r20
    if (force == true)
    1214:	44 23       	and	r20, r20
    1216:	51 f0       	breq	.+20     	; 0x122c <_ZN5MHZ196getCO2Ebb+0x26>
    {
        if(isunLimited)
            provisioning(CO2UNLIM);
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0

int MHZ19::getCO2(bool isunLimited, bool force)
{
    if (force == true)
    {
        if(isunLimited)
    121c:	66 23       	and	r22, r22
    121e:	11 f0       	breq	.+4      	; 0x1224 <_ZN5MHZ196getCO2Ebb+0x1e>
            provisioning(CO2UNLIM);
    1220:	64 e0       	ldi	r22, 0x04	; 4
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <_ZN5MHZ196getCO2Ebb+0x20>
        else
            provisioning(CO2LIM);
    1224:	65 e0       	ldi	r22, 0x05	; 5
    1226:	ce 01       	movw	r24, r28
    1228:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
     }

    if (this->errorCode == RESULT_OK || force == false)
    122c:	88 81       	ld	r24, Y
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	11 f0       	breq	.+4      	; 0x1236 <_ZN5MHZ196getCO2Ebb+0x30>
    1232:	01 11       	cpse	r16, r1
    1234:	62 c0       	rjmp	.+196    	; 0x12fa <_ZN5MHZ196getCO2Ebb+0xf4>
    {
        if (!this->storage.settings.filterMode)
    1236:	88 85       	ldd	r24, Y+8	; 0x08
    1238:	81 11       	cpse	r24, r1
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <_ZN5MHZ196getCO2Ebb+0x5a>
        {
            unsigned int validRead = 0;

            if(isunLimited)              
    123c:	11 23       	and	r17, r17
    123e:	31 f0       	breq	.+12     	; 0x124c <_ZN5MHZ196getCO2Ebb+0x46>
    return;
}

unsigned int MHZ19::makeInt(byte high, byte low)
{
    unsigned int calc = ((unsigned int)high * 256) + (unsigned int)low;
    1240:	89 8d       	ldd	r24, Y+25	; 0x19
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	98 2f       	mov	r25, r24
    1246:	88 27       	eor	r24, r24
    1248:	2a 8d       	ldd	r18, Y+26	; 0x1a
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <_ZN5MHZ196getCO2Ebb+0x50>
    124c:	88 a1       	ldd	r24, Y+32	; 0x20
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	98 2f       	mov	r25, r24
    1252:	88 27       	eor	r24, r24
    1254:	29 a1       	ldd	r18, Y+33	; 0x21
    1256:	82 0f       	add	r24, r18
    1258:	91 1d       	adc	r25, r1
    125a:	97 ff       	sbrs	r25, 7
    125c:	50 c0       	rjmp	.+160    	; 0x12fe <_ZN5MHZ196getCO2Ebb+0xf8>
    125e:	4d c0       	rjmp	.+154    	; 0x12fa <_ZN5MHZ196getCO2Ebb+0xf4>
            unsigned int checkVal[2];
            bool trigFilter = false;

            // Filter was must call the opposest unlimited/limited command to work
            if(!isunLimited)                    
                provisioning(CO2UNLIM);
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
           /* FILTER BEGIN ----------------------------------------------------------- */
            unsigned int checkVal[2];
            bool trigFilter = false;

            // Filter was must call the opposest unlimited/limited command to work
            if(!isunLimited)                    
    1264:	11 11       	cpse	r17, r1
    1266:	02 c0       	rjmp	.+4      	; 0x126c <_ZN5MHZ196getCO2Ebb+0x66>
                provisioning(CO2UNLIM);
    1268:	64 e0       	ldi	r22, 0x04	; 4
    126a:	01 c0       	rjmp	.+2      	; 0x126e <_ZN5MHZ196getCO2Ebb+0x68>
            else
                provisioning(CO2LIM);
    126c:	65 e0       	ldi	r22, 0x05	; 5
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN5MHZ1912provisioningENS_12COMMAND_TYPEEi>
    return;
}

unsigned int MHZ19::makeInt(byte high, byte low)
{
    unsigned int calc = ((unsigned int)high * 256) + (unsigned int)low;
    1274:	89 8d       	ldd	r24, Y+25	; 0x19
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	98 2f       	mov	r25, r24
    127a:	88 27       	eor	r24, r24
    127c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    127e:	ac 01       	movw	r20, r24
    1280:	42 0f       	add	r20, r18
    1282:	51 1d       	adc	r21, r1
    1284:	28 a1       	ldd	r18, Y+32	; 0x20
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	32 2f       	mov	r19, r18
    128a:	22 27       	eor	r18, r18
    128c:	89 a1       	ldd	r24, Y+33	; 0x21
    128e:	b9 01       	movw	r22, r18
    1290:	68 0f       	add	r22, r24
    1292:	71 1d       	adc	r23, r1
    1294:	cb 01       	movw	r24, r22

            // Limited CO2 stays at 410ppm during reset, so comparing unlimited which instead
            // shows an abormal value, reset duration can be found. Limited CO2 ppm returns to "normal"
            // after reset.

            if(this->storage.settings.filterCleared)
    1296:	29 85       	ldd	r18, Y+9	; 0x09
    1298:	22 23       	and	r18, r18
    129a:	89 f0       	breq	.+34     	; 0x12be <_ZN5MHZ196getCO2Ebb+0xb8>
            {
                if(checkVal[0] > 32767 || checkVal[1] > 32767 || (((checkVal[0] - checkVal[1]) >= 10) && checkVal[1] == 410))
    129c:	57 fd       	sbrc	r21, 7
    129e:	0c c0       	rjmp	.+24     	; 0x12b8 <_ZN5MHZ196getCO2Ebb+0xb2>
    12a0:	77 fd       	sbrc	r23, 7
    12a2:	0a c0       	rjmp	.+20     	; 0x12b8 <_ZN5MHZ196getCO2Ebb+0xb2>
    12a4:	9a 01       	movw	r18, r20
    12a6:	26 1b       	sub	r18, r22
    12a8:	37 0b       	sbc	r19, r23
    12aa:	2a 30       	cpi	r18, 0x0A	; 10
    12ac:	31 05       	cpc	r19, r1
    12ae:	08 f1       	brcs	.+66     	; 0x12f2 <_ZN5MHZ196getCO2Ebb+0xec>
    12b0:	8a 39       	cpi	r24, 0x9A	; 154
    12b2:	71 e0       	ldi	r23, 0x01	; 1
    12b4:	97 07       	cpc	r25, r23
    12b6:	e9 f4       	brne	.+58     	; 0x12f2 <_ZN5MHZ196getCO2Ebb+0xec>
                {      
                    this->errorCode = RESULT_FILTER;
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	88 83       	st	Y, r24
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <_ZN5MHZ196getCO2Ebb+0xf4>
                    return 0;
                }     
            }
            else
            {
                if(checkVal[0] > 32767)
    12be:	57 ff       	sbrs	r21, 7
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <_ZN5MHZ196getCO2Ebb+0xc4>
                {
                    checkVal[0] = 32767;
    12c2:	4f ef       	ldi	r20, 0xFF	; 255
    12c4:	5f e7       	ldi	r21, 0x7F	; 127
                    trigFilter = true;
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <_ZN5MHZ196getCO2Ebb+0xc6>
        }
        else
        {
           /* FILTER BEGIN ----------------------------------------------------------- */
            unsigned int checkVal[2];
            bool trigFilter = false;
    12ca:	20 e0       	ldi	r18, 0x00	; 0
                if(checkVal[0] > 32767)
                {
                    checkVal[0] = 32767;
                    trigFilter = true;
                }
                if(checkVal[1] > 32767)
    12cc:	97 ff       	sbrs	r25, 7
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <_ZN5MHZ196getCO2Ebb+0xd0>
                {
                    checkVal[1] = 32767;
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	9f e7       	ldi	r25, 0x7F	; 127
                    trigFilter = true;
    12d4:	21 e0       	ldi	r18, 0x01	; 1
                }
                if(((checkVal[0] - checkVal[1]) >= 10) && checkVal[1] == 410)
    12d6:	ba 01       	movw	r22, r20
    12d8:	68 1b       	sub	r22, r24
    12da:	79 0b       	sbc	r23, r25
    12dc:	6a 30       	cpi	r22, 0x0A	; 10
    12de:	71 05       	cpc	r23, r1
    12e0:	20 f0       	brcs	.+8      	; 0x12ea <_ZN5MHZ196getCO2Ebb+0xe4>
    12e2:	8a 39       	cpi	r24, 0x9A	; 154
    12e4:	31 e0       	ldi	r19, 0x01	; 1
    12e6:	93 07       	cpc	r25, r19
    12e8:	11 f0       	breq	.+4      	; 0x12ee <_ZN5MHZ196getCO2Ebb+0xe8>
                    trigFilter = true;

                if(trigFilter)
    12ea:	22 23       	and	r18, r18
    12ec:	11 f0       	breq	.+4      	; 0x12f2 <_ZN5MHZ196getCO2Ebb+0xec>
                {              
                    this->errorCode = RESULT_FILTER;
    12ee:	25 e0       	ldi	r18, 0x05	; 5
    12f0:	28 83       	st	Y, r18
                }
            }

            if(isunLimited)       
    12f2:	11 23       	and	r17, r17
    12f4:	21 f0       	breq	.+8      	; 0x12fe <_ZN5MHZ196getCO2Ebb+0xf8>
                return checkVal[0];
    12f6:	ca 01       	movw	r24, r20
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <_ZN5MHZ196getCO2Ebb+0xf8>
            else
                return checkVal[1]; 
            /* FILTER END ----------------------------------------------------------- */             
        }              
    }
    return 0;
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1308:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    130c:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	b9 f4       	brne	.+46     	; 0x1344 <_ZN14SoftwareSerial4readEv+0x3c>
    1316:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    131a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    131e:	98 17       	cp	r25, r24
    1320:	89 f0       	breq	.+34     	; 0x1344 <_ZN14SoftwareSerial4readEv+0x3c>
    1322:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	e0 53       	subi	r30, 0x30	; 48
    132a:	fc 4f       	sbci	r31, 0xFC	; 252
    132c:	80 81       	ld	r24, Z
    132e:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	2f 5f       	subi	r18, 0xFF	; 255
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	2f 73       	andi	r18, 0x3F	; 63
    133a:	33 27       	eor	r19, r19
    133c:	20 93 ce 03 	sts	0x03CE, r18	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	08 95       	ret
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	9f ef       	ldi	r25, 0xFF	; 255
    1348:	08 95       	ret

0000134a <_ZN14SoftwareSerial5writeEh>:
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	dc 01       	movw	r26, r24
    1352:	5c 96       	adiw	r26, 0x1c	; 28
    1354:	8d 91       	ld	r24, X+
    1356:	9c 91       	ld	r25, X
    1358:	5d 97       	sbiw	r26, 0x1d	; 29
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	39 f4       	brne	.+14     	; 0x136c <_ZN14SoftwareSerial5writeEh+0x22>
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	13 96       	adiw	r26, 0x03	; 3
    1364:	3c 93       	st	X, r19
    1366:	2e 93       	st	-X, r18
    1368:	12 97       	sbiw	r26, 0x02	; 2
    136a:	3b c0       	rjmp	.+118    	; 0x13e2 <_ZN14SoftwareSerial5writeEh+0x98>
    136c:	51 96       	adiw	r26, 0x11	; 17
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
    1372:	52 97       	sbiw	r26, 0x12	; 18
    1374:	50 96       	adiw	r26, 0x10	; 16
    1376:	2c 91       	ld	r18, X
    1378:	50 97       	sbiw	r26, 0x10	; 16
    137a:	32 2f       	mov	r19, r18
    137c:	30 95       	com	r19
    137e:	1f b7       	in	r17, 0x3f	; 63
    1380:	5e 96       	adiw	r26, 0x1e	; 30
    1382:	4c 91       	ld	r20, X
    1384:	5e 97       	sbiw	r26, 0x1e	; 30
    1386:	74 2f       	mov	r23, r20
    1388:	72 70       	andi	r23, 0x02	; 2
    138a:	41 fd       	sbrc	r20, 1
    138c:	60 95       	com	r22
    138e:	f8 94       	cli
    1390:	40 81       	ld	r20, Z
    1392:	77 23       	and	r23, r23
    1394:	11 f0       	breq	.+4      	; 0x139a <_ZN14SoftwareSerial5writeEh+0x50>
    1396:	42 2b       	or	r20, r18
    1398:	01 c0       	rjmp	.+2      	; 0x139c <_ZN14SoftwareSerial5writeEh+0x52>
    139a:	43 23       	and	r20, r19
    139c:	40 83       	st	Z, r20
    139e:	ec 01       	movw	r28, r24
    13a0:	21 97       	sbiw	r28, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <_ZN14SoftwareSerial5writeEh+0x56>
    13a4:	48 e0       	ldi	r20, 0x08	; 8
    13a6:	50 81       	ld	r21, Z
    13a8:	60 ff       	sbrs	r22, 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <_ZN14SoftwareSerial5writeEh+0x66>
    13ac:	52 2b       	or	r21, r18
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <_ZN14SoftwareSerial5writeEh+0x68>
    13b0:	53 23       	and	r21, r19
    13b2:	50 83       	st	Z, r21
    13b4:	ec 01       	movw	r28, r24
    13b6:	21 97       	sbiw	r28, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <_ZN14SoftwareSerial5writeEh+0x6c>
    13ba:	66 95       	lsr	r22
    13bc:	41 50       	subi	r20, 0x01	; 1
    13be:	99 f7       	brne	.-26     	; 0x13a6 <_ZN14SoftwareSerial5writeEh+0x5c>
    13c0:	80 81       	ld	r24, Z
    13c2:	77 23       	and	r23, r23
    13c4:	19 f0       	breq	.+6      	; 0x13cc <_ZN14SoftwareSerial5writeEh+0x82>
    13c6:	83 23       	and	r24, r19
    13c8:	80 83       	st	Z, r24
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <_ZN14SoftwareSerial5writeEh+0x86>
    13cc:	28 2b       	or	r18, r24
    13ce:	20 83       	st	Z, r18
    13d0:	1f bf       	out	0x3f, r17	; 63
    13d2:	5c 96       	adiw	r26, 0x1c	; 28
    13d4:	8d 91       	ld	r24, X+
    13d6:	9c 91       	ld	r25, X
    13d8:	5d 97       	sbiw	r26, 0x1d	; 29
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <_ZN14SoftwareSerial5writeEh+0x90>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	08 95       	ret

000013ea <_ZN14SoftwareSerial5flushEv>:
    13ea:	08 95       	ret

000013ec <_ZN14SoftwareSerial4peekEv>:
    13ec:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    13f0:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	71 f4       	brne	.+28     	; 0x1416 <_ZN14SoftwareSerial4peekEv+0x2a>
    13fa:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    13fe:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1402:	98 17       	cp	r25, r24
    1404:	41 f0       	breq	.+16     	; 0x1416 <_ZN14SoftwareSerial4peekEv+0x2a>
    1406:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	e0 53       	subi	r30, 0x30	; 48
    140e:	fc 4f       	sbci	r31, 0xFC	; 252
    1410:	80 81       	ld	r24, Z
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	08 95       	ret
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	08 95       	ret

0000141c <_ZN14SoftwareSerial9availableEv>:
    141c:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    1420:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	71 f4       	brne	.+28     	; 0x1446 <_ZN14SoftwareSerial9availableEv+0x2a>
    142a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    142e:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	80 5c       	subi	r24, 0xC0	; 192
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	82 1b       	sub	r24, r18
    143a:	91 09       	sbc	r25, r1
    143c:	60 e4       	ldi	r22, 0x40	; 64
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__divmodhi4>
    1444:	08 95       	ret
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	08 95       	ret

0000144c <_ZN14SoftwareSerial13stopListeningEv>:
    144c:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    1450:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    1454:	e8 17       	cp	r30, r24
    1456:	f9 07       	cpc	r31, r25
    1458:	69 f4       	brne	.+26     	; 0x1474 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    145a:	a3 89       	ldd	r26, Z+19	; 0x13
    145c:	b4 89       	ldd	r27, Z+20	; 0x14
    145e:	9c 91       	ld	r25, X
    1460:	85 89       	ldd	r24, Z+21	; 0x15
    1462:	80 95       	com	r24
    1464:	89 23       	and	r24, r25
    1466:	8c 93       	st	X, r24
    1468:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    146c:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	08 95       	ret
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret

00001478 <_ZN14SoftwareSerial6listenEv>:
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	ec 01       	movw	r28, r24
    147e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1480:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1482:	89 2b       	or	r24, r25
    1484:	f1 f0       	breq	.+60     	; 0x14c2 <_ZN14SoftwareSerial6listenEv+0x4a>
    1486:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    148a:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    148e:	c8 17       	cp	r28, r24
    1490:	d9 07       	cpc	r29, r25
    1492:	b9 f0       	breq	.+46     	; 0x14c2 <_ZN14SoftwareSerial6listenEv+0x4a>
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	11 f0       	breq	.+4      	; 0x149c <_ZN14SoftwareSerial6listenEv+0x24>
    1498:	0e 94 26 0a 	call	0x144c	; 0x144c <_ZN14SoftwareSerial13stopListeningEv>
    149c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	8e 8f       	std	Y+30, r24	; 0x1e
    14a2:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    14a6:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    14aa:	d0 93 11 04 	sts	0x0411, r29	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    14ae:	c0 93 10 04 	sts	0x0410, r28	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    14b2:	eb 89       	ldd	r30, Y+19	; 0x13
    14b4:	fc 89       	ldd	r31, Y+20	; 0x14
    14b6:	90 81       	ld	r25, Z
    14b8:	8d 89       	ldd	r24, Y+21	; 0x15
    14ba:	89 2b       	or	r24, r25
    14bc:	80 83       	st	Z, r24
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <_ZN14SoftwareSerial6listenEv+0x4c>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <__vector_3>:
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	2f 93       	push	r18
    14d6:	3f 93       	push	r19
    14d8:	4f 93       	push	r20
    14da:	5f 93       	push	r21
    14dc:	6f 93       	push	r22
    14de:	7f 93       	push	r23
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	af 93       	push	r26
    14e6:	bf 93       	push	r27
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
    14ec:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <_ZN14SoftwareSerial13active_objectE>
    14f0:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <_ZN14SoftwareSerial13active_objectE+0x1>
    14f4:	30 97       	sbiw	r30, 0x00	; 0
    14f6:	09 f4       	brne	.+2      	; 0x14fa <__vector_3+0x30>
    14f8:	51 c0       	rjmp	.+162    	; 0x159c <__vector_3+0xd2>
    14fa:	96 8d       	ldd	r25, Z+30	; 0x1e
    14fc:	a6 85       	ldd	r26, Z+14	; 0x0e
    14fe:	b7 85       	ldd	r27, Z+15	; 0x0f
    1500:	85 85       	ldd	r24, Z+13	; 0x0d
    1502:	91 ff       	sbrs	r25, 1
    1504:	04 c0       	rjmp	.+8      	; 0x150e <__vector_3+0x44>
    1506:	9c 91       	ld	r25, X
    1508:	89 23       	and	r24, r25
    150a:	29 f4       	brne	.+10     	; 0x1516 <__vector_3+0x4c>
    150c:	47 c0       	rjmp	.+142    	; 0x159c <__vector_3+0xd2>
    150e:	9c 91       	ld	r25, X
    1510:	89 23       	and	r24, r25
    1512:	09 f0       	breq	.+2      	; 0x1516 <__vector_3+0x4c>
    1514:	43 c0       	rjmp	.+134    	; 0x159c <__vector_3+0xd2>
    1516:	a3 89       	ldd	r26, Z+19	; 0x13
    1518:	b4 89       	ldd	r27, Z+20	; 0x14
    151a:	9c 91       	ld	r25, X
    151c:	85 89       	ldd	r24, Z+21	; 0x15
    151e:	80 95       	com	r24
    1520:	89 23       	and	r24, r25
    1522:	8c 93       	st	X, r24
    1524:	86 89       	ldd	r24, Z+22	; 0x16
    1526:	97 89       	ldd	r25, Z+23	; 0x17
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <__vector_3+0x5e>
    152c:	60 8d       	ldd	r22, Z+24	; 0x18
    152e:	71 8d       	ldd	r23, Z+25	; 0x19
    1530:	a6 85       	ldd	r26, Z+14	; 0x0e
    1532:	b7 85       	ldd	r27, Z+15	; 0x0f
    1534:	55 85       	ldd	r21, Z+13	; 0x0d
    1536:	38 e0       	ldi	r19, 0x08	; 8
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	cb 01       	movw	r24, r22
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <__vector_3+0x72>
    1540:	82 2f       	mov	r24, r18
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	95 95       	asr	r25
    1546:	87 95       	ror	r24
    1548:	28 2f       	mov	r18, r24
    154a:	4c 91       	ld	r20, X
    154c:	45 23       	and	r20, r21
    154e:	09 f0       	breq	.+2      	; 0x1552 <__vector_3+0x88>
    1550:	20 68       	ori	r18, 0x80	; 128
    1552:	31 50       	subi	r19, 0x01	; 1
    1554:	91 f7       	brne	.-28     	; 0x153a <__vector_3+0x70>
    1556:	86 8d       	ldd	r24, Z+30	; 0x1e
    1558:	81 fd       	sbrc	r24, 1
    155a:	20 95       	com	r18
    155c:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	8f 73       	andi	r24, 0x3F	; 63
    1566:	99 27       	eor	r25, r25
    1568:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <_ZN14SoftwareSerial20_receive_buffer_headE>
    156c:	38 17       	cp	r19, r24
    156e:	49 f0       	breq	.+18     	; 0x1582 <__vector_3+0xb8>
    1570:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	a0 53       	subi	r26, 0x30	; 48
    1578:	bc 4f       	sbci	r27, 0xFC	; 252
    157a:	2c 93       	st	X, r18
    157c:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <__vector_3+0xbe>
    1582:	86 8d       	ldd	r24, Z+30	; 0x1e
    1584:	81 60       	ori	r24, 0x01	; 1
    1586:	86 8f       	std	Z+30, r24	; 0x1e
    1588:	82 8d       	ldd	r24, Z+26	; 0x1a
    158a:	93 8d       	ldd	r25, Z+27	; 0x1b
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <__vector_3+0xc2>
    1590:	a3 89       	ldd	r26, Z+19	; 0x13
    1592:	b4 89       	ldd	r27, Z+20	; 0x14
    1594:	9c 91       	ld	r25, X
    1596:	85 89       	ldd	r24, Z+21	; 0x15
    1598:	89 2b       	or	r24, r25
    159a:	8c 93       	st	X, r24
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <_ZN14SoftwareSerialD1Ev>:
    15be:	2b eb       	ldi	r18, 0xBB	; 187
    15c0:	32 e0       	ldi	r19, 0x02	; 2
    15c2:	fc 01       	movw	r30, r24
    15c4:	31 83       	std	Z+1, r19	; 0x01
    15c6:	20 83       	st	Z, r18
    15c8:	0c 94 26 0a 	jmp	0x144c	; 0x144c <_ZN14SoftwareSerial13stopListeningEv>

000015cc <_ZN14SoftwareSerial5setTXEh>:
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	ec 01       	movw	r28, r24
    15d4:	16 2f       	mov	r17, r22
    15d6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    15d8:	66 95       	lsr	r22
    15da:	61 70       	andi	r22, 0x01	; 1
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	68 27       	eor	r22, r24
    15e0:	81 2f       	mov	r24, r17
    15e2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <digitalWrite>
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	81 2f       	mov	r24, r17
    15ea:	0e 94 6f 0c 	call	0x18de	; 0x18de <pinMode>
    15ee:	81 2f       	mov	r24, r17
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	fc 01       	movw	r30, r24
    15f4:	e4 58       	subi	r30, 0x84	; 132
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	e4 91       	lpm	r30, Z
    15fa:	e8 8b       	std	Y+16, r30	; 0x10
    15fc:	fc 01       	movw	r30, r24
    15fe:	e0 57       	subi	r30, 0x70	; 112
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	e4 91       	lpm	r30, Z
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	e2 55       	subi	r30, 0x52	; 82
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	85 91       	lpm	r24, Z+
    1610:	94 91       	lpm	r25, Z
    1612:	9a 8b       	std	Y+18, r25	; 0x12
    1614:	89 8b       	std	Y+17, r24	; 0x11
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	08 95       	ret

0000161e <_ZN14SoftwareSerial5setRXEh>:
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    1626:	16 2f       	mov	r17, r22
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	81 2f       	mov	r24, r17
    162c:	0e 94 6f 0c 	call	0x18de	; 0x18de <pinMode>
    1630:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1632:	81 fd       	sbrc	r24, 1
    1634:	04 c0       	rjmp	.+8      	; 0x163e <_ZN14SoftwareSerial5setRXEh+0x20>
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	81 2f       	mov	r24, r17
    163a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <digitalWrite>
    163e:	1c 87       	std	Y+12, r17	; 0x0c
    1640:	81 2f       	mov	r24, r17
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	fc 01       	movw	r30, r24
    1646:	e4 58       	subi	r30, 0x84	; 132
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	e4 91       	lpm	r30, Z
    164c:	ed 87       	std	Y+13, r30	; 0x0d
    164e:	fc 01       	movw	r30, r24
    1650:	e0 57       	subi	r30, 0x70	; 112
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	e4 91       	lpm	r30, Z
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	ec 55       	subi	r30, 0x5C	; 92
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	85 91       	lpm	r24, Z+
    1662:	94 91       	lpm	r25, Z
    1664:	9f 87       	std	Y+15, r25	; 0x0f
    1666:	8e 87       	std	Y+14, r24	; 0x0e
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	08 95       	ret

00001670 <_ZN14SoftwareSerialC1Ehhb>:
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	ec 01       	movw	r28, r24
    1678:	16 2f       	mov	r17, r22
    167a:	1b 82       	std	Y+3, r1	; 0x03
    167c:	1a 82       	std	Y+2, r1	; 0x02
    167e:	88 ee       	ldi	r24, 0xE8	; 232
    1680:	93 e0       	ldi	r25, 0x03	; 3
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	8c 83       	std	Y+4, r24	; 0x04
    1688:	9d 83       	std	Y+5, r25	; 0x05
    168a:	ae 83       	std	Y+6, r26	; 0x06
    168c:	bf 83       	std	Y+7, r27	; 0x07
    168e:	8b eb       	ldi	r24, 0xBB	; 187
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	99 83       	std	Y+1, r25	; 0x01
    1694:	88 83       	st	Y, r24
    1696:	1f 8a       	std	Y+23, r1	; 0x17
    1698:	1e 8a       	std	Y+22, r1	; 0x16
    169a:	19 8e       	std	Y+25, r1	; 0x19
    169c:	18 8e       	std	Y+24, r1	; 0x18
    169e:	1b 8e       	std	Y+27, r1	; 0x1b
    16a0:	1a 8e       	std	Y+26, r1	; 0x1a
    16a2:	1d 8e       	std	Y+29, r1	; 0x1d
    16a4:	1c 8e       	std	Y+28, r1	; 0x1c
    16a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a8:	8e 7f       	andi	r24, 0xFE	; 254
    16aa:	20 fb       	bst	r18, 0
    16ac:	81 f9       	bld	r24, 1
    16ae:	8e 8f       	std	Y+30, r24	; 0x1e
    16b0:	64 2f       	mov	r22, r20
    16b2:	ce 01       	movw	r24, r28
    16b4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN14SoftwareSerial5setTXEh>
    16b8:	61 2f       	mov	r22, r17
    16ba:	ce 01       	movw	r24, r28
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <_ZN14SoftwareSerial5setRXEh>

000016c6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	ec 01       	movw	r28, r24
    16cc:	9a 01       	movw	r18, r20
    16ce:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    16d0:	1b 8e       	std	Y+27, r1	; 0x1b
    16d2:	1a 8e       	std	Y+26, r1	; 0x1a
    16d4:	19 8e       	std	Y+25, r1	; 0x19
    16d6:	18 8e       	std	Y+24, r1	; 0x18
    16d8:	1f 8a       	std	Y+23, r1	; 0x17
    16da:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	79 e0       	ldi	r23, 0x09	; 9
    16e0:	8d e3       	ldi	r24, 0x3D	; 61
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divmodsi4>
    16e8:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    16ea:	24 30       	cpi	r18, 0x04	; 4
    16ec:	31 05       	cpc	r19, r1
    16ee:	18 f0       	brcs	.+6      	; 0x16f6 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    16f0:	c9 01       	movw	r24, r18
    16f2:	03 97       	sbiw	r24, 0x03	; 3
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    16fa:	9d 8f       	std	Y+29, r25	; 0x1d
    16fc:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
    16fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1700:	66 31       	cpi	r22, 0x16	; 22
    1702:	08 f0       	brcs	.+2      	; 0x1706 <_ZN14SoftwareSerial5beginEl+0x40>
    1704:	69 c0       	rjmp	.+210    	; 0x17d8 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1706:	c9 01       	movw	r24, r18
    1708:	96 95       	lsr	r25
    170a:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    170c:	84 31       	cpi	r24, 0x14	; 20
    170e:	91 05       	cpc	r25, r1
    1710:	10 f0       	brcs	.+4      	; 0x1716 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    1712:	43 97       	sbiw	r24, 0x13	; 19
    1714:	02 c0       	rjmp	.+4      	; 0x171a <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    171a:	9f 8b       	std	Y+23, r25	; 0x17
    171c:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    171e:	36 97       	sbiw	r30, 0x06	; 6
    1720:	18 f0       	brcs	.+6      	; 0x1728 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    1722:	c9 01       	movw	r24, r18
    1724:	05 97       	sbiw	r24, 0x05	; 5
    1726:	02 c0       	rjmp	.+4      	; 0x172c <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    172c:	99 8f       	std	Y+25, r25	; 0x19
    172e:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1730:	c9 01       	movw	r24, r18
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	28 0f       	add	r18, r24
    1738:	39 1f       	adc	r19, r25
    173a:	36 95       	lsr	r19
    173c:	27 95       	ror	r18
    173e:	36 95       	lsr	r19
    1740:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1742:	2d 30       	cpi	r18, 0x0D	; 13
    1744:	31 05       	cpc	r19, r1
    1746:	18 f0       	brcs	.+6      	; 0x174e <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    1748:	2c 50       	subi	r18, 0x0C	; 12
    174a:	31 09       	sbc	r19, r1
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1752:	3b 8f       	std	Y+27, r19	; 0x1b
    1754:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1756:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    175a:	68 30       	cpi	r22, 0x08	; 8
    175c:	50 f0       	brcs	.+20     	; 0x1772 <_ZN14SoftwareSerial5beginEl+0xac>
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	6e 30       	cpi	r22, 0x0E	; 14
    1762:	08 f4       	brcc	.+2      	; 0x1766 <_ZN14SoftwareSerial5beginEl+0xa0>
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	01 c0       	rjmp	.+2      	; 0x176c <_ZN14SoftwareSerial5beginEl+0xa6>
    176a:	88 0f       	add	r24, r24
    176c:	2a 95       	dec	r18
    176e:	ea f7       	brpl	.-6      	; 0x176a <_ZN14SoftwareSerial5beginEl+0xa4>
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <_ZN14SoftwareSerial5beginEl+0xae>
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	89 2b       	or	r24, r25
    1776:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    177a:	9c 85       	ldd	r25, Y+12	; 0x0c
    177c:	98 30       	cpi	r25, 0x08	; 8
    177e:	38 f0       	brcs	.+14     	; 0x178e <_ZN14SoftwareSerial5beginEl+0xc8>
    1780:	9e 30       	cpi	r25, 0x0E	; 14
    1782:	40 f0       	brcs	.+16     	; 0x1794 <_ZN14SoftwareSerial5beginEl+0xce>
    1784:	96 31       	cpi	r25, 0x16	; 22
    1786:	48 f0       	brcs	.+18     	; 0x179a <_ZN14SoftwareSerial5beginEl+0xd4>
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	08 c0       	rjmp	.+16     	; 0x179e <_ZN14SoftwareSerial5beginEl+0xd8>
    178e:	2d e6       	ldi	r18, 0x6D	; 109
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	05 c0       	rjmp	.+10     	; 0x179e <_ZN14SoftwareSerial5beginEl+0xd8>
    1794:	2b e6       	ldi	r18, 0x6B	; 107
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <_ZN14SoftwareSerial5beginEl+0xd8>
    179a:	2c e6       	ldi	r18, 0x6C	; 108
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	3c 8b       	std	Y+20, r19	; 0x14
    17a0:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    17a2:	98 30       	cpi	r25, 0x08	; 8
    17a4:	30 f4       	brcc	.+12     	; 0x17b2 <_ZN14SoftwareSerial5beginEl+0xec>
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <_ZN14SoftwareSerial5beginEl+0xe6>
    17aa:	88 0f       	add	r24, r24
    17ac:	9a 95       	dec	r25
    17ae:	ea f7       	brpl	.-6      	; 0x17aa <_ZN14SoftwareSerial5beginEl+0xe4>
    17b0:	0e c0       	rjmp	.+28     	; 0x17ce <_ZN14SoftwareSerial5beginEl+0x108>
    17b2:	29 2f       	mov	r18, r25
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	9e 30       	cpi	r25, 0x0E	; 14
    17b8:	18 f4       	brcc	.+6      	; 0x17c0 <_ZN14SoftwareSerial5beginEl+0xfa>
    17ba:	28 50       	subi	r18, 0x08	; 8
    17bc:	31 09       	sbc	r19, r1
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <_ZN14SoftwareSerial5beginEl+0xfe>
    17c0:	2e 50       	subi	r18, 0x0E	; 14
    17c2:	31 09       	sbc	r19, r1
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <_ZN14SoftwareSerial5beginEl+0x104>
    17c8:	88 0f       	add	r24, r24
    17ca:	2a 95       	dec	r18
    17cc:	ea f7       	brpl	.-6      	; 0x17c8 <_ZN14SoftwareSerial5beginEl+0x102>
    17ce:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    17d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    17d8:	ce 01       	movw	r24, r28
}
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    17de:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <_ZN14SoftwareSerial6listenEv>

000017e2 <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
    17ec:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
    17f0:	68 87       	std	Y+8, r22	; 0x08
    17f2:	79 87       	std	Y+9, r23	; 0x09
    17f4:	8a 87       	std	Y+10, r24	; 0x0a
    17f6:	9b 87       	std	Y+11, r25	; 0x0b
    17f8:	e8 81       	ld	r30, Y
    17fa:	f9 81       	ldd	r31, Y+1	; 0x01
    17fc:	02 84       	ldd	r0, Z+10	; 0x0a
    17fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    1800:	e0 2d       	mov	r30, r0
    1802:	ce 01       	movw	r24, r28
    1804:	09 95       	icall
    1806:	97 ff       	sbrs	r25, 7
    1808:	17 c0       	rjmp	.+46     	; 0x1838 <_ZN6Stream9timedReadEv+0x56>
    180a:	0e 94 cf 04 	call	0x99e	; 0x99e <millis>
    180e:	08 85       	ldd	r16, Y+8	; 0x08
    1810:	19 85       	ldd	r17, Y+9	; 0x09
    1812:	2a 85       	ldd	r18, Y+10	; 0x0a
    1814:	3b 85       	ldd	r19, Y+11	; 0x0b
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	80 1b       	sub	r24, r16
    181c:	91 0b       	sbc	r25, r17
    181e:	a2 0b       	sbc	r26, r18
    1820:	b3 0b       	sbc	r27, r19
    1822:	0c 81       	ldd	r16, Y+4	; 0x04
    1824:	1d 81       	ldd	r17, Y+5	; 0x05
    1826:	2e 81       	ldd	r18, Y+6	; 0x06
    1828:	3f 81       	ldd	r19, Y+7	; 0x07
    182a:	80 17       	cp	r24, r16
    182c:	91 07       	cpc	r25, r17
    182e:	a2 07       	cpc	r26, r18
    1830:	b3 07       	cpc	r27, r19
    1832:	10 f3       	brcs	.-60     	; 0x17f8 <_ZN6Stream9timedReadEv+0x16>
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	6c 01       	movw	r12, r24
    1854:	7a 01       	movw	r14, r20
    1856:	8b 01       	movw	r16, r22
  size_t count = 0;
    1858:	c0 e0       	ldi	r28, 0x00	; 0
    185a:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    185c:	ce 15       	cp	r28, r14
    185e:	df 05       	cpc	r29, r15
    1860:	59 f0       	breq	.+22     	; 0x1878 <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    1862:	c6 01       	movw	r24, r12
    1864:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1868:	97 fd       	sbrc	r25, 7
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    186c:	f8 01       	movw	r30, r16
    186e:	81 93       	st	Z+, r24
    1870:	8f 01       	movw	r16, r30
    count++;
    1872:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1874:	f3 cf       	rjmp	.-26     	; 0x185c <_ZN6Stream9readBytesEPcj+0x1a>
    1876:	7e 01       	movw	r14, r28
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1878:	c7 01       	movw	r24, r14
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	08 95       	ret

0000188c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    188c:	83 30       	cpi	r24, 0x03	; 3
    188e:	81 f0       	breq	.+32     	; 0x18b0 <turnOffPWM+0x24>
    1890:	28 f4       	brcc	.+10     	; 0x189c <turnOffPWM+0x10>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	99 f0       	breq	.+38     	; 0x18bc <turnOffPWM+0x30>
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	a1 f0       	breq	.+40     	; 0x18c2 <turnOffPWM+0x36>
    189a:	08 95       	ret
    189c:	87 30       	cpi	r24, 0x07	; 7
    189e:	a9 f0       	breq	.+42     	; 0x18ca <turnOffPWM+0x3e>
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	b9 f0       	breq	.+46     	; 0x18d2 <turnOffPWM+0x46>
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	d1 f4       	brne	.+52     	; 0x18dc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18ac:	8f 7d       	andi	r24, 0xDF	; 223
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    18b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18b4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    18ba:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    18bc:	84 b5       	in	r24, 0x24	; 36
    18be:	8f 77       	andi	r24, 0x7F	; 127
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    18c2:	84 b5       	in	r24, 0x24	; 36
    18c4:	8f 7d       	andi	r24, 0xDF	; 223
    18c6:	84 bd       	out	0x24, r24	; 36
    18c8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    18ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18ce:	8f 77       	andi	r24, 0x7F	; 127
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    18d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18d6:	8f 7d       	andi	r24, 0xDF	; 223
    18d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18dc:	08 95       	ret

000018de <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	fc 01       	movw	r30, r24
    18e6:	e4 58       	subi	r30, 0x84	; 132
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    18ec:	fc 01       	movw	r30, r24
    18ee:	e0 57       	subi	r30, 0x70	; 112
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    18f4:	88 23       	and	r24, r24
    18f6:	61 f1       	breq	.+88     	; 0x1950 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	fc 01       	movw	r30, r24
    1900:	e8 54       	subi	r30, 0x48	; 72
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	c5 91       	lpm	r28, Z+
    1906:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1908:	fc 01       	movw	r30, r24
    190a:	e2 55       	subi	r30, 0x52	; 82
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	a5 91       	lpm	r26, Z+
    1910:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1912:	61 11       	cpse	r22, r1
    1914:	09 c0       	rjmp	.+18     	; 0x1928 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1916:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1918:	f8 94       	cli
		*reg &= ~bit;
    191a:	88 81       	ld	r24, Y
    191c:	20 95       	com	r18
    191e:	82 23       	and	r24, r18
    1920:	88 83       	st	Y, r24
		*out &= ~bit;
    1922:	ec 91       	ld	r30, X
    1924:	2e 23       	and	r18, r30
    1926:	0b c0       	rjmp	.+22     	; 0x193e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1928:	62 30       	cpi	r22, 0x02	; 2
    192a:	61 f4       	brne	.+24     	; 0x1944 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    192c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    192e:	f8 94       	cli
		*reg &= ~bit;
    1930:	88 81       	ld	r24, Y
    1932:	32 2f       	mov	r19, r18
    1934:	30 95       	com	r19
    1936:	83 23       	and	r24, r19
    1938:	88 83       	st	Y, r24
		*out |= bit;
    193a:	ec 91       	ld	r30, X
    193c:	2e 2b       	or	r18, r30
    193e:	2c 93       	st	X, r18
		SREG = oldSREG;
    1940:	9f bf       	out	0x3f, r25	; 63
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1944:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1946:	f8 94       	cli
		*reg |= bit;
    1948:	e8 81       	ld	r30, Y
    194a:	2e 2b       	or	r18, r30
    194c:	28 83       	st	Y, r18
		SREG = oldSREG;
    194e:	8f bf       	out	0x3f, r24	; 63
	}
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	f9 01       	movw	r30, r18
    1962:	e8 59       	subi	r30, 0x98	; 152
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1968:	f9 01       	movw	r30, r18
    196a:	e4 58       	subi	r30, 0x84	; 132
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1970:	f9 01       	movw	r30, r18
    1972:	e0 57       	subi	r30, 0x70	; 112
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1978:	cc 23       	and	r28, r28
    197a:	c1 f0       	breq	.+48     	; 0x19ac <digitalWrite+0x56>
    197c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    197e:	81 11       	cpse	r24, r1
    1980:	0e 94 46 0c 	call	0x188c	; 0x188c <turnOffPWM>

	out = portOutputRegister(port);
    1984:	ec 2f       	mov	r30, r28
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	e2 55       	subi	r30, 0x52	; 82
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	a5 91       	lpm	r26, Z+
    1992:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1994:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1996:	f8 94       	cli

	if (val == LOW) {
    1998:	11 11       	cpse	r17, r1
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <digitalWrite+0x4e>
		*out &= ~bit;
    199c:	8c 91       	ld	r24, X
    199e:	d0 95       	com	r29
    19a0:	d8 23       	and	r29, r24
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    19a4:	ec 91       	ld	r30, X
    19a6:	de 2b       	or	r29, r30
    19a8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    19aa:	9f bf       	out	0x3f, r25	; 63
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	08 95       	ret

000019b4 <__subsf3>:
    19b4:	50 58       	subi	r21, 0x80	; 128

000019b6 <__addsf3>:
    19b6:	bb 27       	eor	r27, r27
    19b8:	aa 27       	eor	r26, r26
    19ba:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__addsf3x>
    19be:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__fp_round>
    19c2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_pscA>
    19c6:	38 f0       	brcs	.+14     	; 0x19d6 <__addsf3+0x20>
    19c8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscB>
    19cc:	20 f0       	brcs	.+8      	; 0x19d6 <__addsf3+0x20>
    19ce:	39 f4       	brne	.+14     	; 0x19de <__addsf3+0x28>
    19d0:	9f 3f       	cpi	r25, 0xFF	; 255
    19d2:	19 f4       	brne	.+6      	; 0x19da <__addsf3+0x24>
    19d4:	26 f4       	brtc	.+8      	; 0x19de <__addsf3+0x28>
    19d6:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__fp_nan>
    19da:	0e f4       	brtc	.+2      	; 0x19de <__addsf3+0x28>
    19dc:	e0 95       	com	r30
    19de:	e7 fb       	bst	r30, 7
    19e0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>

000019e4 <__addsf3x>:
    19e4:	e9 2f       	mov	r30, r25
    19e6:	0e 94 4b 01 	call	0x296	; 0x296 <__fp_split3>
    19ea:	58 f3       	brcs	.-42     	; 0x19c2 <__addsf3+0xc>
    19ec:	ba 17       	cp	r27, r26
    19ee:	62 07       	cpc	r22, r18
    19f0:	73 07       	cpc	r23, r19
    19f2:	84 07       	cpc	r24, r20
    19f4:	95 07       	cpc	r25, r21
    19f6:	20 f0       	brcs	.+8      	; 0x1a00 <__addsf3x+0x1c>
    19f8:	79 f4       	brne	.+30     	; 0x1a18 <__addsf3x+0x34>
    19fa:	a6 f5       	brtc	.+104    	; 0x1a64 <__addsf3x+0x80>
    19fc:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__fp_zero>
    1a00:	0e f4       	brtc	.+2      	; 0x1a04 <__addsf3x+0x20>
    1a02:	e0 95       	com	r30
    1a04:	0b 2e       	mov	r0, r27
    1a06:	ba 2f       	mov	r27, r26
    1a08:	a0 2d       	mov	r26, r0
    1a0a:	0b 01       	movw	r0, r22
    1a0c:	b9 01       	movw	r22, r18
    1a0e:	90 01       	movw	r18, r0
    1a10:	0c 01       	movw	r0, r24
    1a12:	ca 01       	movw	r24, r20
    1a14:	a0 01       	movw	r20, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	ff 27       	eor	r31, r31
    1a1a:	59 1b       	sub	r21, r25
    1a1c:	99 f0       	breq	.+38     	; 0x1a44 <__addsf3x+0x60>
    1a1e:	59 3f       	cpi	r21, 0xF9	; 249
    1a20:	50 f4       	brcc	.+20     	; 0x1a36 <__addsf3x+0x52>
    1a22:	50 3e       	cpi	r21, 0xE0	; 224
    1a24:	68 f1       	brcs	.+90     	; 0x1a80 <__addsf3x+0x9c>
    1a26:	1a 16       	cp	r1, r26
    1a28:	f0 40       	sbci	r31, 0x00	; 0
    1a2a:	a2 2f       	mov	r26, r18
    1a2c:	23 2f       	mov	r18, r19
    1a2e:	34 2f       	mov	r19, r20
    1a30:	44 27       	eor	r20, r20
    1a32:	58 5f       	subi	r21, 0xF8	; 248
    1a34:	f3 cf       	rjmp	.-26     	; 0x1a1c <__addsf3x+0x38>
    1a36:	46 95       	lsr	r20
    1a38:	37 95       	ror	r19
    1a3a:	27 95       	ror	r18
    1a3c:	a7 95       	ror	r26
    1a3e:	f0 40       	sbci	r31, 0x00	; 0
    1a40:	53 95       	inc	r21
    1a42:	c9 f7       	brne	.-14     	; 0x1a36 <__addsf3x+0x52>
    1a44:	7e f4       	brtc	.+30     	; 0x1a64 <__addsf3x+0x80>
    1a46:	1f 16       	cp	r1, r31
    1a48:	ba 0b       	sbc	r27, r26
    1a4a:	62 0b       	sbc	r22, r18
    1a4c:	73 0b       	sbc	r23, r19
    1a4e:	84 0b       	sbc	r24, r20
    1a50:	ba f0       	brmi	.+46     	; 0x1a80 <__addsf3x+0x9c>
    1a52:	91 50       	subi	r25, 0x01	; 1
    1a54:	a1 f0       	breq	.+40     	; 0x1a7e <__addsf3x+0x9a>
    1a56:	ff 0f       	add	r31, r31
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	66 1f       	adc	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	88 1f       	adc	r24, r24
    1a60:	c2 f7       	brpl	.-16     	; 0x1a52 <__addsf3x+0x6e>
    1a62:	0e c0       	rjmp	.+28     	; 0x1a80 <__addsf3x+0x9c>
    1a64:	ba 0f       	add	r27, r26
    1a66:	62 1f       	adc	r22, r18
    1a68:	73 1f       	adc	r23, r19
    1a6a:	84 1f       	adc	r24, r20
    1a6c:	48 f4       	brcc	.+18     	; 0x1a80 <__addsf3x+0x9c>
    1a6e:	87 95       	ror	r24
    1a70:	77 95       	ror	r23
    1a72:	67 95       	ror	r22
    1a74:	b7 95       	ror	r27
    1a76:	f7 95       	ror	r31
    1a78:	9e 3f       	cpi	r25, 0xFE	; 254
    1a7a:	08 f0       	brcs	.+2      	; 0x1a7e <__addsf3x+0x9a>
    1a7c:	b0 cf       	rjmp	.-160    	; 0x19de <__addsf3+0x28>
    1a7e:	93 95       	inc	r25
    1a80:	88 0f       	add	r24, r24
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <__addsf3x+0xa2>
    1a84:	99 27       	eor	r25, r25
    1a86:	ee 0f       	add	r30, r30
    1a88:	97 95       	ror	r25
    1a8a:	87 95       	ror	r24
    1a8c:	08 95       	ret

00001a8e <__divsf3>:
    1a8e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <__divsf3x>
    1a92:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__fp_round>
    1a96:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscB>
    1a9a:	58 f0       	brcs	.+22     	; 0x1ab2 <__divsf3+0x24>
    1a9c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_pscA>
    1aa0:	40 f0       	brcs	.+16     	; 0x1ab2 <__divsf3+0x24>
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <__divsf3+0x20>
    1aa4:	5f 3f       	cpi	r21, 0xFF	; 255
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <__divsf3+0x24>
    1aa8:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1aac:	51 11       	cpse	r21, r1
    1aae:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__fp_szero>
    1ab2:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__fp_nan>

00001ab6 <__divsf3x>:
    1ab6:	0e 94 4b 01 	call	0x296	; 0x296 <__fp_split3>
    1aba:	68 f3       	brcs	.-38     	; 0x1a96 <__divsf3+0x8>

00001abc <__divsf3_pse>:
    1abc:	99 23       	and	r25, r25
    1abe:	b1 f3       	breq	.-20     	; 0x1aac <__divsf3+0x1e>
    1ac0:	55 23       	and	r21, r21
    1ac2:	91 f3       	breq	.-28     	; 0x1aa8 <__divsf3+0x1a>
    1ac4:	95 1b       	sub	r25, r21
    1ac6:	55 0b       	sbc	r21, r21
    1ac8:	bb 27       	eor	r27, r27
    1aca:	aa 27       	eor	r26, r26
    1acc:	62 17       	cp	r22, r18
    1ace:	73 07       	cpc	r23, r19
    1ad0:	84 07       	cpc	r24, r20
    1ad2:	38 f0       	brcs	.+14     	; 0x1ae2 <__divsf3_pse+0x26>
    1ad4:	9f 5f       	subi	r25, 0xFF	; 255
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	44 1f       	adc	r20, r20
    1ade:	aa 1f       	adc	r26, r26
    1ae0:	a9 f3       	breq	.-22     	; 0x1acc <__divsf3_pse+0x10>
    1ae2:	35 d0       	rcall	.+106    	; 0x1b4e <__divsf3_pse+0x92>
    1ae4:	0e 2e       	mov	r0, r30
    1ae6:	3a f0       	brmi	.+14     	; 0x1af6 <__divsf3_pse+0x3a>
    1ae8:	e0 e8       	ldi	r30, 0x80	; 128
    1aea:	32 d0       	rcall	.+100    	; 0x1b50 <__divsf3_pse+0x94>
    1aec:	91 50       	subi	r25, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	e6 95       	lsr	r30
    1af2:	00 1c       	adc	r0, r0
    1af4:	ca f7       	brpl	.-14     	; 0x1ae8 <__divsf3_pse+0x2c>
    1af6:	2b d0       	rcall	.+86     	; 0x1b4e <__divsf3_pse+0x92>
    1af8:	fe 2f       	mov	r31, r30
    1afa:	29 d0       	rcall	.+82     	; 0x1b4e <__divsf3_pse+0x92>
    1afc:	66 0f       	add	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	bb 1f       	adc	r27, r27
    1b04:	26 17       	cp	r18, r22
    1b06:	37 07       	cpc	r19, r23
    1b08:	48 07       	cpc	r20, r24
    1b0a:	ab 07       	cpc	r26, r27
    1b0c:	b0 e8       	ldi	r27, 0x80	; 128
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <__divsf3_pse+0x56>
    1b10:	bb 0b       	sbc	r27, r27
    1b12:	80 2d       	mov	r24, r0
    1b14:	bf 01       	movw	r22, r30
    1b16:	ff 27       	eor	r31, r31
    1b18:	93 58       	subi	r25, 0x83	; 131
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	3a f0       	brmi	.+14     	; 0x1b2c <__divsf3_pse+0x70>
    1b1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b20:	51 05       	cpc	r21, r1
    1b22:	78 f0       	brcs	.+30     	; 0x1b42 <__divsf3_pse+0x86>
    1b24:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1b28:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__fp_szero>
    1b2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2e:	e4 f3       	brlt	.-8      	; 0x1b28 <__divsf3_pse+0x6c>
    1b30:	98 3e       	cpi	r25, 0xE8	; 232
    1b32:	d4 f3       	brlt	.-12     	; 0x1b28 <__divsf3_pse+0x6c>
    1b34:	86 95       	lsr	r24
    1b36:	77 95       	ror	r23
    1b38:	67 95       	ror	r22
    1b3a:	b7 95       	ror	r27
    1b3c:	f7 95       	ror	r31
    1b3e:	9f 5f       	subi	r25, 0xFF	; 255
    1b40:	c9 f7       	brne	.-14     	; 0x1b34 <__divsf3_pse+0x78>
    1b42:	88 0f       	add	r24, r24
    1b44:	91 1d       	adc	r25, r1
    1b46:	96 95       	lsr	r25
    1b48:	87 95       	ror	r24
    1b4a:	97 f9       	bld	r25, 7
    1b4c:	08 95       	ret
    1b4e:	e1 e0       	ldi	r30, 0x01	; 1
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	bb 1f       	adc	r27, r27
    1b58:	62 17       	cp	r22, r18
    1b5a:	73 07       	cpc	r23, r19
    1b5c:	84 07       	cpc	r24, r20
    1b5e:	ba 07       	cpc	r27, r26
    1b60:	20 f0       	brcs	.+8      	; 0x1b6a <__divsf3_pse+0xae>
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	84 0b       	sbc	r24, r20
    1b68:	ba 0b       	sbc	r27, r26
    1b6a:	ee 1f       	adc	r30, r30
    1b6c:	88 f7       	brcc	.-30     	; 0x1b50 <__divsf3_pse+0x94>
    1b6e:	e0 95       	com	r30
    1b70:	08 95       	ret

00001b72 <__floatunsisf>:
    1b72:	e8 94       	clt
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <__floatsisf+0x12>

00001b76 <__floatsisf>:
    1b76:	97 fb       	bst	r25, 7
    1b78:	3e f4       	brtc	.+14     	; 0x1b88 <__floatsisf+0x12>
    1b7a:	90 95       	com	r25
    1b7c:	80 95       	com	r24
    1b7e:	70 95       	com	r23
    1b80:	61 95       	neg	r22
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	99 23       	and	r25, r25
    1b8a:	a9 f0       	breq	.+42     	; 0x1bb6 <__floatsisf+0x40>
    1b8c:	f9 2f       	mov	r31, r25
    1b8e:	96 e9       	ldi	r25, 0x96	; 150
    1b90:	bb 27       	eor	r27, r27
    1b92:	93 95       	inc	r25
    1b94:	f6 95       	lsr	r31
    1b96:	87 95       	ror	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b7 95       	ror	r27
    1b9e:	f1 11       	cpse	r31, r1
    1ba0:	f8 cf       	rjmp	.-16     	; 0x1b92 <__floatsisf+0x1c>
    1ba2:	fa f4       	brpl	.+62     	; 0x1be2 <__floatsisf+0x6c>
    1ba4:	bb 0f       	add	r27, r27
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__floatsisf+0x36>
    1ba8:	60 ff       	sbrs	r22, 0
    1baa:	1b c0       	rjmp	.+54     	; 0x1be2 <__floatsisf+0x6c>
    1bac:	6f 5f       	subi	r22, 0xFF	; 255
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	16 c0       	rjmp	.+44     	; 0x1be2 <__floatsisf+0x6c>
    1bb6:	88 23       	and	r24, r24
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <__floatsisf+0x48>
    1bba:	96 e9       	ldi	r25, 0x96	; 150
    1bbc:	11 c0       	rjmp	.+34     	; 0x1be0 <__floatsisf+0x6a>
    1bbe:	77 23       	and	r23, r23
    1bc0:	21 f0       	breq	.+8      	; 0x1bca <__floatsisf+0x54>
    1bc2:	9e e8       	ldi	r25, 0x8E	; 142
    1bc4:	87 2f       	mov	r24, r23
    1bc6:	76 2f       	mov	r23, r22
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <__floatsisf+0x5e>
    1bca:	66 23       	and	r22, r22
    1bcc:	71 f0       	breq	.+28     	; 0x1bea <__floatsisf+0x74>
    1bce:	96 e8       	ldi	r25, 0x86	; 134
    1bd0:	86 2f       	mov	r24, r22
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	2a f0       	brmi	.+10     	; 0x1be2 <__floatsisf+0x6c>
    1bd8:	9a 95       	dec	r25
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	da f7       	brpl	.-10     	; 0x1bd8 <__floatsisf+0x62>
    1be2:	88 0f       	add	r24, r24
    1be4:	96 95       	lsr	r25
    1be6:	87 95       	ror	r24
    1be8:	97 f9       	bld	r25, 7
    1bea:	08 95       	ret

00001bec <__fp_cmp>:
    1bec:	99 0f       	add	r25, r25
    1bee:	00 08       	sbc	r0, r0
    1bf0:	55 0f       	add	r21, r21
    1bf2:	aa 0b       	sbc	r26, r26
    1bf4:	e0 e8       	ldi	r30, 0x80	; 128
    1bf6:	fe ef       	ldi	r31, 0xFE	; 254
    1bf8:	16 16       	cp	r1, r22
    1bfa:	17 06       	cpc	r1, r23
    1bfc:	e8 07       	cpc	r30, r24
    1bfe:	f9 07       	cpc	r31, r25
    1c00:	c0 f0       	brcs	.+48     	; 0x1c32 <__fp_cmp+0x46>
    1c02:	12 16       	cp	r1, r18
    1c04:	13 06       	cpc	r1, r19
    1c06:	e4 07       	cpc	r30, r20
    1c08:	f5 07       	cpc	r31, r21
    1c0a:	98 f0       	brcs	.+38     	; 0x1c32 <__fp_cmp+0x46>
    1c0c:	62 1b       	sub	r22, r18
    1c0e:	73 0b       	sbc	r23, r19
    1c10:	84 0b       	sbc	r24, r20
    1c12:	95 0b       	sbc	r25, r21
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <__fp_cmp+0x38>
    1c16:	0a 26       	eor	r0, r26
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <__fp_cmp+0x46>
    1c1a:	23 2b       	or	r18, r19
    1c1c:	24 2b       	or	r18, r20
    1c1e:	25 2b       	or	r18, r21
    1c20:	21 f4       	brne	.+8      	; 0x1c2a <__fp_cmp+0x3e>
    1c22:	08 95       	ret
    1c24:	0a 26       	eor	r0, r26
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <__fp_cmp+0x3e>
    1c28:	a1 40       	sbci	r26, 0x01	; 1
    1c2a:	a6 95       	lsr	r26
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	81 1d       	adc	r24, r1
    1c30:	81 1d       	adc	r24, r1
    1c32:	08 95       	ret

00001c34 <__fp_inf>:
    1c34:	97 f9       	bld	r25, 7
    1c36:	9f 67       	ori	r25, 0x7F	; 127
    1c38:	80 e8       	ldi	r24, 0x80	; 128
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	08 95       	ret

00001c40 <__fp_nan>:
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	80 ec       	ldi	r24, 0xC0	; 192
    1c44:	08 95       	ret

00001c46 <__fp_pscA>:
    1c46:	00 24       	eor	r0, r0
    1c48:	0a 94       	dec	r0
    1c4a:	16 16       	cp	r1, r22
    1c4c:	17 06       	cpc	r1, r23
    1c4e:	18 06       	cpc	r1, r24
    1c50:	09 06       	cpc	r0, r25
    1c52:	08 95       	ret

00001c54 <__fp_pscB>:
    1c54:	00 24       	eor	r0, r0
    1c56:	0a 94       	dec	r0
    1c58:	12 16       	cp	r1, r18
    1c5a:	13 06       	cpc	r1, r19
    1c5c:	14 06       	cpc	r1, r20
    1c5e:	05 06       	cpc	r0, r21
    1c60:	08 95       	ret

00001c62 <__fp_round>:
    1c62:	09 2e       	mov	r0, r25
    1c64:	03 94       	inc	r0
    1c66:	00 0c       	add	r0, r0
    1c68:	11 f4       	brne	.+4      	; 0x1c6e <__fp_round+0xc>
    1c6a:	88 23       	and	r24, r24
    1c6c:	52 f0       	brmi	.+20     	; 0x1c82 <__fp_round+0x20>
    1c6e:	bb 0f       	add	r27, r27
    1c70:	40 f4       	brcc	.+16     	; 0x1c82 <__fp_round+0x20>
    1c72:	bf 2b       	or	r27, r31
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <__fp_round+0x18>
    1c76:	60 ff       	sbrs	r22, 0
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <__fp_round+0x20>
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	08 95       	ret

00001c84 <__gesf2>:
    1c84:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fp_cmp>
    1c88:	08 f4       	brcc	.+2      	; 0x1c8c <__gesf2+0x8>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	08 95       	ret

00001c8e <__mulsf3>:
    1c8e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsf3x>
    1c92:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__fp_round>
    1c96:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_pscA>
    1c9a:	38 f0       	brcs	.+14     	; 0x1caa <__mulsf3+0x1c>
    1c9c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_pscB>
    1ca0:	20 f0       	brcs	.+8      	; 0x1caa <__mulsf3+0x1c>
    1ca2:	95 23       	and	r25, r21
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <__mulsf3+0x1c>
    1ca6:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1caa:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__fp_nan>
    1cae:	11 24       	eor	r1, r1
    1cb0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__fp_szero>

00001cb4 <__mulsf3x>:
    1cb4:	0e 94 4b 01 	call	0x296	; 0x296 <__fp_split3>
    1cb8:	70 f3       	brcs	.-36     	; 0x1c96 <__mulsf3+0x8>

00001cba <__mulsf3_pse>:
    1cba:	95 9f       	mul	r25, r21
    1cbc:	c1 f3       	breq	.-16     	; 0x1cae <__mulsf3+0x20>
    1cbe:	95 0f       	add	r25, r21
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	55 1f       	adc	r21, r21
    1cc4:	62 9f       	mul	r22, r18
    1cc6:	f0 01       	movw	r30, r0
    1cc8:	72 9f       	mul	r23, r18
    1cca:	bb 27       	eor	r27, r27
    1ccc:	f0 0d       	add	r31, r0
    1cce:	b1 1d       	adc	r27, r1
    1cd0:	63 9f       	mul	r22, r19
    1cd2:	aa 27       	eor	r26, r26
    1cd4:	f0 0d       	add	r31, r0
    1cd6:	b1 1d       	adc	r27, r1
    1cd8:	aa 1f       	adc	r26, r26
    1cda:	64 9f       	mul	r22, r20
    1cdc:	66 27       	eor	r22, r22
    1cde:	b0 0d       	add	r27, r0
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	66 1f       	adc	r22, r22
    1ce4:	82 9f       	mul	r24, r18
    1ce6:	22 27       	eor	r18, r18
    1ce8:	b0 0d       	add	r27, r0
    1cea:	a1 1d       	adc	r26, r1
    1cec:	62 1f       	adc	r22, r18
    1cee:	73 9f       	mul	r23, r19
    1cf0:	b0 0d       	add	r27, r0
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	62 1f       	adc	r22, r18
    1cf6:	83 9f       	mul	r24, r19
    1cf8:	a0 0d       	add	r26, r0
    1cfa:	61 1d       	adc	r22, r1
    1cfc:	22 1f       	adc	r18, r18
    1cfe:	74 9f       	mul	r23, r20
    1d00:	33 27       	eor	r19, r19
    1d02:	a0 0d       	add	r26, r0
    1d04:	61 1d       	adc	r22, r1
    1d06:	23 1f       	adc	r18, r19
    1d08:	84 9f       	mul	r24, r20
    1d0a:	60 0d       	add	r22, r0
    1d0c:	21 1d       	adc	r18, r1
    1d0e:	82 2f       	mov	r24, r18
    1d10:	76 2f       	mov	r23, r22
    1d12:	6a 2f       	mov	r22, r26
    1d14:	11 24       	eor	r1, r1
    1d16:	9f 57       	subi	r25, 0x7F	; 127
    1d18:	50 40       	sbci	r21, 0x00	; 0
    1d1a:	9a f0       	brmi	.+38     	; 0x1d42 <__mulsf3_pse+0x88>
    1d1c:	f1 f0       	breq	.+60     	; 0x1d5a <__mulsf3_pse+0xa0>
    1d1e:	88 23       	and	r24, r24
    1d20:	4a f0       	brmi	.+18     	; 0x1d34 <__mulsf3_pse+0x7a>
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	bb 1f       	adc	r27, r27
    1d28:	66 1f       	adc	r22, r22
    1d2a:	77 1f       	adc	r23, r23
    1d2c:	88 1f       	adc	r24, r24
    1d2e:	91 50       	subi	r25, 0x01	; 1
    1d30:	50 40       	sbci	r21, 0x00	; 0
    1d32:	a9 f7       	brne	.-22     	; 0x1d1e <__mulsf3_pse+0x64>
    1d34:	9e 3f       	cpi	r25, 0xFE	; 254
    1d36:	51 05       	cpc	r21, r1
    1d38:	80 f0       	brcs	.+32     	; 0x1d5a <__mulsf3_pse+0xa0>
    1d3a:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__fp_inf>
    1d3e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__fp_szero>
    1d42:	5f 3f       	cpi	r21, 0xFF	; 255
    1d44:	e4 f3       	brlt	.-8      	; 0x1d3e <__mulsf3_pse+0x84>
    1d46:	98 3e       	cpi	r25, 0xE8	; 232
    1d48:	d4 f3       	brlt	.-12     	; 0x1d3e <__mulsf3_pse+0x84>
    1d4a:	86 95       	lsr	r24
    1d4c:	77 95       	ror	r23
    1d4e:	67 95       	ror	r22
    1d50:	b7 95       	ror	r27
    1d52:	f7 95       	ror	r31
    1d54:	e7 95       	ror	r30
    1d56:	9f 5f       	subi	r25, 0xFF	; 255
    1d58:	c1 f7       	brne	.-16     	; 0x1d4a <__mulsf3_pse+0x90>
    1d5a:	fe 2b       	or	r31, r30
    1d5c:	88 0f       	add	r24, r24
    1d5e:	91 1d       	adc	r25, r1
    1d60:	96 95       	lsr	r25
    1d62:	87 95       	ror	r24
    1d64:	97 f9       	bld	r25, 7
    1d66:	08 95       	ret

00001d68 <__divmodhi4>:
    1d68:	97 fb       	bst	r25, 7
    1d6a:	07 2e       	mov	r0, r23
    1d6c:	16 f4       	brtc	.+4      	; 0x1d72 <__divmodhi4+0xa>
    1d6e:	00 94       	com	r0
    1d70:	07 d0       	rcall	.+14     	; 0x1d80 <__divmodhi4_neg1>
    1d72:	77 fd       	sbrc	r23, 7
    1d74:	09 d0       	rcall	.+18     	; 0x1d88 <__divmodhi4_neg2>
    1d76:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__udivmodhi4>
    1d7a:	07 fc       	sbrc	r0, 7
    1d7c:	05 d0       	rcall	.+10     	; 0x1d88 <__divmodhi4_neg2>
    1d7e:	3e f4       	brtc	.+14     	; 0x1d8e <__divmodhi4_exit>

00001d80 <__divmodhi4_neg1>:
    1d80:	90 95       	com	r25
    1d82:	81 95       	neg	r24
    1d84:	9f 4f       	sbci	r25, 0xFF	; 255
    1d86:	08 95       	ret

00001d88 <__divmodhi4_neg2>:
    1d88:	70 95       	com	r23
    1d8a:	61 95       	neg	r22
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255

00001d8e <__divmodhi4_exit>:
    1d8e:	08 95       	ret

00001d90 <__udivmodsi4>:
    1d90:	a1 e2       	ldi	r26, 0x21	; 33
    1d92:	1a 2e       	mov	r1, r26
    1d94:	aa 1b       	sub	r26, r26
    1d96:	bb 1b       	sub	r27, r27
    1d98:	fd 01       	movw	r30, r26
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <__udivmodsi4_ep>

00001d9c <__udivmodsi4_loop>:
    1d9c:	aa 1f       	adc	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	ee 1f       	adc	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	a2 17       	cp	r26, r18
    1da6:	b3 07       	cpc	r27, r19
    1da8:	e4 07       	cpc	r30, r20
    1daa:	f5 07       	cpc	r31, r21
    1dac:	20 f0       	brcs	.+8      	; 0x1db6 <__udivmodsi4_ep>
    1dae:	a2 1b       	sub	r26, r18
    1db0:	b3 0b       	sbc	r27, r19
    1db2:	e4 0b       	sbc	r30, r20
    1db4:	f5 0b       	sbc	r31, r21

00001db6 <__udivmodsi4_ep>:
    1db6:	66 1f       	adc	r22, r22
    1db8:	77 1f       	adc	r23, r23
    1dba:	88 1f       	adc	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	1a 94       	dec	r1
    1dc0:	69 f7       	brne	.-38     	; 0x1d9c <__udivmodsi4_loop>
    1dc2:	60 95       	com	r22
    1dc4:	70 95       	com	r23
    1dc6:	80 95       	com	r24
    1dc8:	90 95       	com	r25
    1dca:	9b 01       	movw	r18, r22
    1dcc:	ac 01       	movw	r20, r24
    1dce:	bd 01       	movw	r22, r26
    1dd0:	cf 01       	movw	r24, r30
    1dd2:	08 95       	ret

00001dd4 <__divmodsi4>:
    1dd4:	05 2e       	mov	r0, r21
    1dd6:	97 fb       	bst	r25, 7
    1dd8:	1e f4       	brtc	.+6      	; 0x1de0 <__divmodsi4+0xc>
    1dda:	00 94       	com	r0
    1ddc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <__negsi2>
    1de0:	57 fd       	sbrc	r21, 7
    1de2:	07 d0       	rcall	.+14     	; 0x1df2 <__divmodsi4_neg2>
    1de4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__udivmodsi4>
    1de8:	07 fc       	sbrc	r0, 7
    1dea:	03 d0       	rcall	.+6      	; 0x1df2 <__divmodsi4_neg2>
    1dec:	4e f4       	brtc	.+18     	; 0x1e00 <__divmodsi4_exit>
    1dee:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__negsi2>

00001df2 <__divmodsi4_neg2>:
    1df2:	50 95       	com	r21
    1df4:	40 95       	com	r20
    1df6:	30 95       	com	r19
    1df8:	21 95       	neg	r18
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	4f 4f       	sbci	r20, 0xFF	; 255
    1dfe:	5f 4f       	sbci	r21, 0xFF	; 255

00001e00 <__divmodsi4_exit>:
    1e00:	08 95       	ret

00001e02 <__negsi2>:
    1e02:	90 95       	com	r25
    1e04:	80 95       	com	r24
    1e06:	70 95       	com	r23
    1e08:	61 95       	neg	r22
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	08 95       	ret

00001e12 <__udivmodhi4>:
    1e12:	aa 1b       	sub	r26, r26
    1e14:	bb 1b       	sub	r27, r27
    1e16:	51 e1       	ldi	r21, 0x11	; 17
    1e18:	07 c0       	rjmp	.+14     	; 0x1e28 <__udivmodhi4_ep>

00001e1a <__udivmodhi4_loop>:
    1e1a:	aa 1f       	adc	r26, r26
    1e1c:	bb 1f       	adc	r27, r27
    1e1e:	a6 17       	cp	r26, r22
    1e20:	b7 07       	cpc	r27, r23
    1e22:	10 f0       	brcs	.+4      	; 0x1e28 <__udivmodhi4_ep>
    1e24:	a6 1b       	sub	r26, r22
    1e26:	b7 0b       	sbc	r27, r23

00001e28 <__udivmodhi4_ep>:
    1e28:	88 1f       	adc	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	5a 95       	dec	r21
    1e2e:	a9 f7       	brne	.-22     	; 0x1e1a <__udivmodhi4_loop>
    1e30:	80 95       	com	r24
    1e32:	90 95       	com	r25
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	08 95       	ret

00001e3a <__tablejump2__>:
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	05 90       	lpm	r0, Z+
    1e40:	f4 91       	lpm	r31, Z
    1e42:	e0 2d       	mov	r30, r0
    1e44:	09 94       	ijmp

00001e46 <__do_global_dtors>:
    1e46:	10 e0       	ldi	r17, 0x00	; 0
    1e48:	c3 e6       	ldi	r28, 0x63	; 99
    1e4a:	d0 e0       	ldi	r29, 0x00	; 0
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <__do_global_dtors+0x10>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__tablejump2__>
    1e54:	21 96       	adiw	r28, 0x01	; 1
    1e56:	c4 36       	cpi	r28, 0x64	; 100
    1e58:	d1 07       	cpc	r29, r17
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__do_global_dtors+0x8>
    1e5c:	f8 94       	cli

00001e5e <__stop_program>:
    1e5e:	ff cf       	rjmp	.-2      	; 0x1e5e <__stop_program>
