
LMX_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000029c  20000068  00002c0c  00020068  2**2
                  ALLOC
  3 .stack        00002004  20000304  00002ea8  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f8f9  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029c4  00000000  00000000  0003f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a891  00000000  00000000  000423a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000990  00000000  00000000  0004cc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a80  00000000  00000000  0004d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a37f  00000000  00000000  0004e047  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d361  00000000  00000000  000683c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089ff8  00000000  00000000  00075727  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c9c  00000000  00000000  000ff720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 23 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .#. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002ba4 	.word	0x00002ba4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002ba4 	.word	0x00002ba4
     10c:	00002ba4 	.word	0x00002ba4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00002ba4 	.word	0x00002ba4
     1c8:	20000000 	.word	0x20000000
     1cc:	20000068 	.word	0x20000068
     1d0:	20000004 	.word	0x20000004
     1d4:	20000068 	.word	0x20000068
     1d8:	20000304 	.word	0x20000304
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	000027ed 	.word	0x000027ed
     1f8:	00000be9 	.word	0x00000be9

000001fc <_ZN15lmx2694_HandlerD1Ev>:
	
}

lmx2694_Handler::~lmx2694_Handler() {
	// TODO Auto-generated destructor stub
}
     1fc:	4770      	bx	lr
	...

00000200 <_ZN15lmx2694_HandlerD0Ev>:
lmx2694_Handler::~lmx2694_Handler() {
     200:	b510      	push	{r4, lr}
     202:	0004      	movs	r4, r0
}
     204:	2150      	movs	r1, #80	; 0x50
     206:	4b02      	ldr	r3, [pc, #8]	; (210 <_ZN15lmx2694_HandlerD0Ev+0x10>)
     208:	4798      	blx	r3
     20a:	0020      	movs	r0, r4
     20c:	bd10      	pop	{r4, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00001527 	.word	0x00001527

00000214 <_ZN15lmx2694_HandlerC1Ev>:
lmx2694_Handler::lmx2694_Handler() {
     214:	4b0c      	ldr	r3, [pc, #48]	; (248 <_ZN15lmx2694_HandlerC1Ev+0x34>)
     216:	3308      	adds	r3, #8
     218:	6003      	str	r3, [r0, #0]
	write_registers=local_read_registers;
     21a:	4b0c      	ldr	r3, [pc, #48]	; (24c <_ZN15lmx2694_HandlerC1Ev+0x38>)
     21c:	60c3      	str	r3, [r0, #12]
	read_registers=local_write_registers;
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <_ZN15lmx2694_HandlerC1Ev+0x3c>)
     220:	3368      	adds	r3, #104	; 0x68
     222:	6083      	str	r3, [r0, #8]
	channel_divider=1;
     224:	2301      	movs	r3, #1
     226:	2225      	movs	r2, #37	; 0x25
     228:	5483      	strb	r3, [r0, r2]
	channel_index=0;
     22a:	2100      	movs	r1, #0
     22c:	3a02      	subs	r2, #2
     22e:	5481      	strb	r1, [r0, r2]
	step=(4400.0-400.0)/(1024*32.0);
     230:	4a08      	ldr	r2, [pc, #32]	; (254 <_ZN15lmx2694_HandlerC1Ev+0x40>)
     232:	6482      	str	r2, [r0, #72]	; 0x48
	current_frequency=4000;
     234:	4a08      	ldr	r2, [pc, #32]	; (258 <_ZN15lmx2694_HandlerC1Ev+0x44>)
     236:	6042      	str	r2, [r0, #4]
	target_frequency=current_frequency+step;
     238:	4a08      	ldr	r2, [pc, #32]	; (25c <_ZN15lmx2694_HandlerC1Ev+0x48>)
     23a:	6382      	str	r2, [r0, #56]	; 0x38
	direction=true;
     23c:	224d      	movs	r2, #77	; 0x4d
     23e:	5483      	strb	r3, [r0, r2]
	mash_order=1;
     240:	3a29      	subs	r2, #41	; 0x29
     242:	5483      	strb	r3, [r0, r2]
}
     244:	4770      	bx	lr
     246:	46c0      	nop			; (mov r8, r8)
     248:	000028f0 	.word	0x000028f0
     24c:	20000084 	.word	0x20000084
     250:	20000104 	.word	0x20000104
     254:	3dfa0000 	.word	0x3dfa0000
     258:	457a0000 	.word	0x457a0000
     25c:	457a01f4 	.word	0x457a01f4

00000260 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
	}
	return channel_divider_values[channel_index];
}

uint32_t lmx2694_Handler::Get_N_Divider(bool mbr){
	if (mbr)
     260:	2900      	cmp	r1, #0
     262:	d107      	bne.n	274 <_ZN15lmx2694_Handler13Get_N_DividerEb+0x14>
	{
	} 
	else
	{
		N_divider=(uint32_t)(write_registers[34]<<16)+write_registers[36];
     264:	68c2      	ldr	r2, [r0, #12]
     266:	2344      	movs	r3, #68	; 0x44
     268:	5ad3      	ldrh	r3, [r2, r3]
     26a:	041b      	lsls	r3, r3, #16
     26c:	3148      	adds	r1, #72	; 0x48
     26e:	5a52      	ldrh	r2, [r2, r1]
     270:	189b      	adds	r3, r3, r2
     272:	6283      	str	r3, [r0, #40]	; 0x28
	}
	return N_divider;
     274:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
     276:	4770      	bx	lr

00000278 <_ZN15lmx2694_Handler13Get_NumeratorEb>:
uint32_t lmx2694_Handler::Get_Numerator(bool mbr){
	if (mbr)
     278:	2900      	cmp	r1, #0
     27a:	d107      	bne.n	28c <_ZN15lmx2694_Handler13Get_NumeratorEb+0x14>
	{
	} 
	else
	{
		numerator=(uint32_t)(write_registers[42]<<16)+write_registers[43];
     27c:	68c2      	ldr	r2, [r0, #12]
     27e:	2354      	movs	r3, #84	; 0x54
     280:	5ad3      	ldrh	r3, [r2, r3]
     282:	041b      	lsls	r3, r3, #16
     284:	3156      	adds	r1, #86	; 0x56
     286:	5a52      	ldrh	r2, [r2, r1]
     288:	189b      	adds	r3, r3, r2
     28a:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
	return numerator;
     28c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     28e:	4770      	bx	lr

00000290 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
uint32_t lmx2694_Handler::Get_Denominator(bool mbr){
	if (mbr)
     290:	2900      	cmp	r1, #0
     292:	d107      	bne.n	2a4 <_ZN15lmx2694_Handler15Get_DenominatorEb+0x14>
	{
	}
	else
	{
		denominator=(uint32_t)(write_registers[38]<<16)+write_registers[39];
     294:	68c2      	ldr	r2, [r0, #12]
     296:	234c      	movs	r3, #76	; 0x4c
     298:	5ad3      	ldrh	r3, [r2, r3]
     29a:	041b      	lsls	r3, r3, #16
     29c:	314e      	adds	r1, #78	; 0x4e
     29e:	5a52      	ldrh	r2, [r2, r1]
     2a0:	189b      	adds	r3, r3, r2
     2a2:	6303      	str	r3, [r0, #48]	; 0x30
	}
	return denominator;
     2a4:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
     2a6:	4770      	bx	lr

000002a8 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
float lmx2694_Handler::Calculate_Current_Frequency(bool mbr){
     2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2aa:	b083      	sub	sp, #12
     2ac:	0004      	movs	r4, r0
	if (mbr)
     2ae:	2900      	cmp	r1, #0
     2b0:	d002      	beq.n	2b8 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x10>
	} 
	else
	{
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+float(Get_Numerator(false))/float(Get_Denominator(false)));
	}
	return vco_frequency;
     2b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
     2b4:	b003      	add	sp, #12
     2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+float(Get_Numerator(false))/float(Get_Denominator(false)));
     2b8:	4b11      	ldr	r3, [pc, #68]	; (300 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x58>)
     2ba:	4798      	blx	r3
     2bc:	9001      	str	r0, [sp, #4]
     2be:	2100      	movs	r1, #0
     2c0:	0020      	movs	r0, r4
     2c2:	4b10      	ldr	r3, [pc, #64]	; (304 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x5c>)
     2c4:	4798      	blx	r3
     2c6:	0006      	movs	r6, r0
     2c8:	2100      	movs	r1, #0
     2ca:	0020      	movs	r0, r4
     2cc:	4b0e      	ldr	r3, [pc, #56]	; (308 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x60>)
     2ce:	4798      	blx	r3
     2d0:	0007      	movs	r7, r0
     2d2:	4d0e      	ldr	r5, [pc, #56]	; (30c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x64>)
     2d4:	0030      	movs	r0, r6
     2d6:	47a8      	blx	r5
     2d8:	1c06      	adds	r6, r0, #0
     2da:	0038      	movs	r0, r7
     2dc:	47a8      	blx	r5
     2de:	1c01      	adds	r1, r0, #0
     2e0:	1c30      	adds	r0, r6, #0
     2e2:	4b0b      	ldr	r3, [pc, #44]	; (310 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x68>)
     2e4:	4798      	blx	r3
     2e6:	1c06      	adds	r6, r0, #0
     2e8:	9801      	ldr	r0, [sp, #4]
     2ea:	47a8      	blx	r5
     2ec:	1c01      	adds	r1, r0, #0
     2ee:	1c30      	adds	r0, r6, #0
     2f0:	4b08      	ldr	r3, [pc, #32]	; (314 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x6c>)
     2f2:	4798      	blx	r3
     2f4:	4908      	ldr	r1, [pc, #32]	; (318 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x70>)
     2f6:	4b09      	ldr	r3, [pc, #36]	; (31c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x74>)
     2f8:	4798      	blx	r3
     2fa:	63e0      	str	r0, [r4, #60]	; 0x3c
     2fc:	e7d9      	b.n	2b2 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0xa>
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	00000261 	.word	0x00000261
     304:	00000279 	.word	0x00000279
     308:	00000291 	.word	0x00000291
     30c:	00002709 	.word	0x00002709
     310:	00001cd1 	.word	0x00001cd1
     314:	000019ad 	.word	0x000019ad
     318:	43480000 	.word	0x43480000
     31c:	000020b1 	.word	0x000020b1

00000320 <_ZN15lmx2694_Handler3GCDEmm>:
uint32_t  lmx2694_Handler::GCD(uint32_t a, uint32_t b)
{
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0006      	movs	r6, r0
     324:	000d      	movs	r5, r1
     326:	0014      	movs	r4, r2
	if (a == 0)
	return b;
     328:	0010      	movs	r0, r2
	if (a == 0)
     32a:	2900      	cmp	r1, #0
     32c:	d00d      	beq.n	34a <_ZN15lmx2694_Handler3GCDEmm+0x2a>
	else if (b == 0)
	return a;
     32e:	0008      	movs	r0, r1
	else if (b == 0)
     330:	2a00      	cmp	r2, #0
     332:	d00a      	beq.n	34a <_ZN15lmx2694_Handler3GCDEmm+0x2a>

	if (a < b)
     334:	4291      	cmp	r1, r2
     336:	d309      	bcc.n	34c <_ZN15lmx2694_Handler3GCDEmm+0x2c>
	return GCD(a, b % a);
	else
	return GCD(b, a % b);
     338:	0011      	movs	r1, r2
     33a:	0028      	movs	r0, r5
     33c:	4b08      	ldr	r3, [pc, #32]	; (360 <_ZN15lmx2694_Handler3GCDEmm+0x40>)
     33e:	4798      	blx	r3
     340:	000a      	movs	r2, r1
     342:	0021      	movs	r1, r4
     344:	0030      	movs	r0, r6
     346:	f7ff ffeb 	bl	320 <_ZN15lmx2694_Handler3GCDEmm>
}
     34a:	bd70      	pop	{r4, r5, r6, pc}
	return GCD(a, b % a);
     34c:	0010      	movs	r0, r2
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <_ZN15lmx2694_Handler3GCDEmm+0x40>)
     350:	4798      	blx	r3
     352:	000a      	movs	r2, r1
     354:	0029      	movs	r1, r5
     356:	0030      	movs	r0, r6
     358:	f7ff ffe2 	bl	320 <_ZN15lmx2694_Handler3GCDEmm>
     35c:	e7f5      	b.n	34a <_ZN15lmx2694_Handler3GCDEmm+0x2a>
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00001729 	.word	0x00001729

00000364 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
	

}

uint8_t lmx2694_Handler::Choose_Channel_Divider_Index(){
     364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     366:	46de      	mov	lr, fp
     368:	4657      	mov	r7, sl
     36a:	b580      	push	{r7, lr}
     36c:	0007      	movs	r7, r0
     36e:	4d1d      	ldr	r5, [pc, #116]	; (3e4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x80>)
     370:	3510      	adds	r5, #16
	for ( int i = 0; i < channel_divider_size; i++)
     372:	2400      	movs	r4, #0
				
				}
		} 
		else
		{
				if (11500/(channel_divider_values[i])>target_frequency)
     374:	4b1c      	ldr	r3, [pc, #112]	; (3e8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x84>)
     376:	469b      	mov	fp, r3
     378:	4b1c      	ldr	r3, [pc, #112]	; (3ec <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x88>)
     37a:	469a      	mov	sl, r3
     37c:	4e1c      	ldr	r6, [pc, #112]	; (3f0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x8c>)
     37e:	e00e      	b.n	39e <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x3a>
				if (MAX_VCO_FREQUENCY/(channel_divider_values[i])>target_frequency)
     380:	6829      	ldr	r1, [r5, #0]
     382:	481c      	ldr	r0, [pc, #112]	; (3f4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x90>)
     384:	4b18      	ldr	r3, [pc, #96]	; (3e8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x84>)
     386:	4798      	blx	r3
     388:	4b18      	ldr	r3, [pc, #96]	; (3ec <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x88>)
     38a:	4798      	blx	r3
     38c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
     38e:	4b18      	ldr	r3, [pc, #96]	; (3f0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x8c>)
     390:	4798      	blx	r3
     392:	2800      	cmp	r0, #0
     394:	d01c      	beq.n	3d0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x6c>
	for ( int i = 0; i < channel_divider_size; i++)
     396:	3401      	adds	r4, #1
     398:	3504      	adds	r5, #4
     39a:	2c0e      	cmp	r4, #14
     39c:	d00c      	beq.n	3b8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x54>
		if (i<3)
     39e:	2c02      	cmp	r4, #2
     3a0:	ddee      	ble.n	380 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x1c>
				if (11500/(channel_divider_values[i])>target_frequency)
     3a2:	6829      	ldr	r1, [r5, #0]
     3a4:	4814      	ldr	r0, [pc, #80]	; (3f8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x94>)
     3a6:	47d8      	blx	fp
     3a8:	47d0      	blx	sl
     3aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
     3ac:	47b0      	blx	r6
     3ae:	2800      	cmp	r0, #0
     3b0:	d1f1      	bne.n	396 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x32>
				{
				}
				else
				{
					channel_index= i-1;
     3b2:	3c01      	subs	r4, #1
     3b4:	2323      	movs	r3, #35	; 0x23
     3b6:	54fc      	strb	r4, [r7, r3]
					break;
				}
		}
	
	}
	channel_divider=channel_divider_values[channel_index];
     3b8:	2323      	movs	r3, #35	; 0x23
     3ba:	5cf8      	ldrb	r0, [r7, r3]
     3bc:	0082      	lsls	r2, r0, #2
     3be:	4b09      	ldr	r3, [pc, #36]	; (3e4 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x80>)
     3c0:	189b      	adds	r3, r3, r2
     3c2:	691a      	ldr	r2, [r3, #16]
     3c4:	2325      	movs	r3, #37	; 0x25
     3c6:	54fa      	strb	r2, [r7, r3]
	return channel_index;
}
     3c8:	bc0c      	pop	{r2, r3}
     3ca:	4692      	mov	sl, r2
     3cc:	469b      	mov	fp, r3
     3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (i>0)
     3d0:	2c00      	cmp	r4, #0
     3d2:	dd03      	ble.n	3dc <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>
							channel_index=i-1;
     3d4:	3c01      	subs	r4, #1
     3d6:	2323      	movs	r3, #35	; 0x23
     3d8:	54fc      	strb	r4, [r7, r3]
     3da:	e7ed      	b.n	3b8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x54>
						 channel_index=0;
     3dc:	2200      	movs	r2, #0
     3de:	2323      	movs	r3, #35	; 0x23
     3e0:	54fa      	strb	r2, [r7, r3]
     3e2:	e7e9      	b.n	3b8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x54>
     3e4:	000028f0 	.word	0x000028f0
     3e8:	00001731 	.word	0x00001731
     3ec:	00002669 	.word	0x00002669
     3f0:	00001955 	.word	0x00001955
     3f4:	00003afc 	.word	0x00003afc
     3f8:	00002cec 	.word	0x00002cec

000003fc <_ZN15lmx2694_Handler18Calculate_FractionEf>:
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
	}
	Program_PFD_DLY_SEL(vco_frequency);
}

void lmx2694_Handler::Calculate_Fraction(float fr){
     3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3fe:	b083      	sub	sp, #12
     400:	0004      	movs	r4, r0
     402:	1c08      	adds	r0, r1, #0
	gcd=GCD(round(fr*precision),precision);
     404:	219f      	movs	r1, #159	; 0x9f
     406:	05c9      	lsls	r1, r1, #23
     408:	4b0f      	ldr	r3, [pc, #60]	; (448 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x4c>)
     40a:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
     40c:	4b0f      	ldr	r3, [pc, #60]	; (44c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x50>)
     40e:	4798      	blx	r3
     410:	9001      	str	r0, [sp, #4]
     412:	2601      	movs	r6, #1
     414:	4276      	negs	r6, r6
     416:	4f0e      	ldr	r7, [pc, #56]	; (450 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x54>)
     418:	47b8      	blx	r7
     41a:	0001      	movs	r1, r0
     41c:	0032      	movs	r2, r6
     41e:	0020      	movs	r0, r4
     420:	4b0c      	ldr	r3, [pc, #48]	; (454 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x58>)
     422:	4798      	blx	r3
     424:	0005      	movs	r5, r0
     426:	6360      	str	r0, [r4, #52]	; 0x34
	numerator=round(fr*precision)/gcd;
     428:	4b0b      	ldr	r3, [pc, #44]	; (458 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x5c>)
     42a:	4798      	blx	r3
     42c:	1c01      	adds	r1, r0, #0
     42e:	9801      	ldr	r0, [sp, #4]
     430:	4b0a      	ldr	r3, [pc, #40]	; (45c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x60>)
     432:	4798      	blx	r3
     434:	47b8      	blx	r7
     436:	62e0      	str	r0, [r4, #44]	; 0x2c
	denominator=precision/gcd;
     438:	0029      	movs	r1, r5
     43a:	0030      	movs	r0, r6
     43c:	4b08      	ldr	r3, [pc, #32]	; (460 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x64>)
     43e:	4798      	blx	r3
     440:	6320      	str	r0, [r4, #48]	; 0x30
}
     442:	b003      	add	sp, #12
     444:	bdf0      	pop	{r4, r5, r6, r7, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	000020b1 	.word	0x000020b1
     44c:	000015d5 	.word	0x000015d5
     450:	0000197d 	.word	0x0000197d
     454:	00000321 	.word	0x00000321
     458:	00002709 	.word	0x00002709
     45c:	00001cd1 	.word	0x00001cd1
     460:	0000161d 	.word	0x0000161d

00000464 <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
	spi->SetCS(true);
	return bool_result;
}
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
	for(int i=0; i<3;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
     464:	7581      	strb	r1, [r0, #22]
     466:	0a0b      	lsrs	r3, r1, #8
     468:	7543      	strb	r3, [r0, #21]
     46a:	0c09      	lsrs	r1, r1, #16
     46c:	7501      	strb	r1, [r0, #20]
	}

}
     46e:	4770      	bx	lr

00000470 <_ZN15lmx2694_Handler10Power_DownEv>:
bool lmx2694_Handler::Power_Down(){
     470:	b570      	push	{r4, r5, r6, lr}
     472:	0004      	movs	r4, r0
	spi->SetCS(false);
     474:	2100      	movs	r1, #0
     476:	6900      	ldr	r0, [r0, #16]
     478:	4d0a      	ldr	r5, [pc, #40]	; (4a4 <_ZN15lmx2694_Handler10Power_DownEv+0x34>)
     47a:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
     47c:	490a      	ldr	r1, [pc, #40]	; (4a8 <_ZN15lmx2694_Handler10Power_DownEv+0x38>)
     47e:	0020      	movs	r0, r4
     480:	4b0a      	ldr	r3, [pc, #40]	; (4ac <_ZN15lmx2694_Handler10Power_DownEv+0x3c>)
     482:	4798      	blx	r3
	int_result=spi->Write(write_bytes,3);
     484:	0021      	movs	r1, r4
     486:	3114      	adds	r1, #20
     488:	2203      	movs	r2, #3
     48a:	6920      	ldr	r0, [r4, #16]
     48c:	4b08      	ldr	r3, [pc, #32]	; (4b0 <_ZN15lmx2694_Handler10Power_DownEv+0x40>)
     48e:	4798      	blx	r3
     490:	61e0      	str	r0, [r4, #28]
	bool_result=int_result>0;
     492:	17c3      	asrs	r3, r0, #31
     494:	1a18      	subs	r0, r3, r0
     496:	0fc0      	lsrs	r0, r0, #31
     498:	76a0      	strb	r0, [r4, #26]
	spi->SetCS(true);
     49a:	2101      	movs	r1, #1
     49c:	6920      	ldr	r0, [r4, #16]
     49e:	47a8      	blx	r5
	return bool_result;
     4a0:	7ea0      	ldrb	r0, [r4, #26]
}
     4a2:	bd70      	pop	{r4, r5, r6, pc}
     4a4:	00000cd9 	.word	0x00000cd9
     4a8:	00002119 	.word	0x00002119
     4ac:	00000465 	.word	0x00000465
     4b0:	00000c99 	.word	0x00000c99

000004b4 <_ZN15lmx2694_Handler13Program_ResetEv>:
bool lmx2694_Handler::Program_Reset(){
     4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b6:	b083      	sub	sp, #12
     4b8:	0004      	movs	r4, r0
	spi->SetCS(false);
     4ba:	2100      	movs	r1, #0
     4bc:	6900      	ldr	r0, [r0, #16]
     4be:	4d16      	ldr	r5, [pc, #88]	; (518 <_ZN15lmx2694_Handler13Program_ResetEv+0x64>)
     4c0:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
     4c2:	4916      	ldr	r1, [pc, #88]	; (51c <_ZN15lmx2694_Handler13Program_ResetEv+0x68>)
     4c4:	0020      	movs	r0, r4
     4c6:	4f16      	ldr	r7, [pc, #88]	; (520 <_ZN15lmx2694_Handler13Program_ResetEv+0x6c>)
     4c8:	47b8      	blx	r7
	int_result=spi->Write(write_bytes,3);
     4ca:	2314      	movs	r3, #20
     4cc:	469c      	mov	ip, r3
     4ce:	44a4      	add	ip, r4
     4d0:	4663      	mov	r3, ip
     4d2:	2203      	movs	r2, #3
     4d4:	9301      	str	r3, [sp, #4]
     4d6:	4661      	mov	r1, ip
     4d8:	6920      	ldr	r0, [r4, #16]
     4da:	4e12      	ldr	r6, [pc, #72]	; (524 <_ZN15lmx2694_Handler13Program_ResetEv+0x70>)
     4dc:	47b0      	blx	r6
     4de:	61e0      	str	r0, [r4, #28]
	spi->SetCS(true);
     4e0:	2101      	movs	r1, #1
     4e2:	6920      	ldr	r0, [r4, #16]
     4e4:	47a8      	blx	r5
	delay_us(100);
     4e6:	2064      	movs	r0, #100	; 0x64
     4e8:	4b0f      	ldr	r3, [pc, #60]	; (528 <_ZN15lmx2694_Handler13Program_ResetEv+0x74>)
     4ea:	4798      	blx	r3
	spi->SetCS(false);
     4ec:	2100      	movs	r1, #0
     4ee:	6920      	ldr	r0, [r4, #16]
     4f0:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
     4f2:	490e      	ldr	r1, [pc, #56]	; (52c <_ZN15lmx2694_Handler13Program_ResetEv+0x78>)
     4f4:	0020      	movs	r0, r4
     4f6:	47b8      	blx	r7
	int_result=spi->Write(write_bytes,3);
     4f8:	2203      	movs	r2, #3
     4fa:	9901      	ldr	r1, [sp, #4]
     4fc:	6920      	ldr	r0, [r4, #16]
     4fe:	47b0      	blx	r6
     500:	61e0      	str	r0, [r4, #28]
	bool_result=int_result>0;
     502:	17c3      	asrs	r3, r0, #31
     504:	1a18      	subs	r0, r3, r0
     506:	0fc0      	lsrs	r0, r0, #31
     508:	76a0      	strb	r0, [r4, #26]
	spi->SetCS(true);
     50a:	2101      	movs	r1, #1
     50c:	6920      	ldr	r0, [r4, #16]
     50e:	47a8      	blx	r5
	return bool_result;
     510:	7ea0      	ldrb	r0, [r4, #26]
}
     512:	b003      	add	sp, #12
     514:	bdf0      	pop	{r4, r5, r6, r7, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	00000cd9 	.word	0x00000cd9
     51c:	0000211e 	.word	0x0000211e
     520:	00000465 	.word	0x00000465
     524:	00000c99 	.word	0x00000c99
     528:	00000e59 	.word	0x00000e59
     52c:	0000211c 	.word	0x0000211c

00000530 <_ZN15lmx2694_Handler16Make_Three_BytesEht>:
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16_t data){
	for(int i=0; i<2;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
     530:	7582      	strb	r2, [r0, #22]
     532:	1212      	asrs	r2, r2, #8
     534:	7542      	strb	r2, [r0, #21]
	}
	write_bytes[0]=index;
     536:	7501      	strb	r1, [r0, #20]
}
     538:	4770      	bx	lr
	...

0000053c <_ZN15lmx2694_Handler21Write_Single_RegisterEht>:
		Write_Single_Register(i-1,read_registers[i-1]);

	}

}
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16_t data){
     53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     53e:	0004      	movs	r4, r0
     540:	000e      	movs	r6, r1
     542:	0015      	movs	r5, r2
	if ((write_registers[index]==data)&is_locked)
     544:	004f      	lsls	r7, r1, #1
     546:	68c3      	ldr	r3, [r0, #12]
     548:	5bdb      	ldrh	r3, [r3, r7]
     54a:	4293      	cmp	r3, r2
     54c:	d104      	bne.n	558 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
     54e:	7ec3      	ldrb	r3, [r0, #27]
     550:	2b00      	cmp	r3, #0
     552:	d001      	beq.n	558 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1c>
		}

		spi->SetCS(true);
	}
	
	return int_result;
     554:	69e0      	ldr	r0, [r4, #28]
}
     556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi->SetCS(false);
     558:	2100      	movs	r1, #0
     55a:	6920      	ldr	r0, [r4, #16]
     55c:	4b0b      	ldr	r3, [pc, #44]	; (58c <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
     55e:	4798      	blx	r3
		Make_Three_Bytes(index,data);
     560:	002a      	movs	r2, r5
     562:	0031      	movs	r1, r6
     564:	0020      	movs	r0, r4
     566:	4b0a      	ldr	r3, [pc, #40]	; (590 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x54>)
     568:	4798      	blx	r3
		int_result=spi->Write(write_bytes,3);
     56a:	0021      	movs	r1, r4
     56c:	3114      	adds	r1, #20
     56e:	2203      	movs	r2, #3
     570:	6920      	ldr	r0, [r4, #16]
     572:	4b08      	ldr	r3, [pc, #32]	; (594 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x58>)
     574:	4798      	blx	r3
     576:	61e0      	str	r0, [r4, #28]
		if (int_result>0)
     578:	2800      	cmp	r0, #0
     57a:	dd01      	ble.n	580 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x44>
				write_registers[index]=data;
     57c:	68e3      	ldr	r3, [r4, #12]
     57e:	53dd      	strh	r5, [r3, r7]
		spi->SetCS(true);
     580:	2101      	movs	r1, #1
     582:	6920      	ldr	r0, [r4, #16]
     584:	4b01      	ldr	r3, [pc, #4]	; (58c <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
     586:	4798      	blx	r3
     588:	e7e4      	b.n	554 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x18>
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	00000cd9 	.word	0x00000cd9
     590:	00000531 	.word	0x00000531
     594:	00000c99 	.word	0x00000c99

00000598 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	0004      	movs	r4, r0
     59c:	1c0d      	adds	r5, r1, #0
	if (mash_order)
     59e:	2324      	movs	r3, #36	; 0x24
     5a0:	5cc3      	ldrb	r3, [r0, r3]
     5a2:	2b00      	cmp	r3, #0
     5a4:	d002      	beq.n	5ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
		switch (mash_order)
     5a6:	d005      	beq.n	5b4 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1c>
     5a8:	2b01      	cmp	r3, #1
     5aa:	d015      	beq.n	5d8 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x40>
	return write_registers[37];
     5ac:	68e2      	ldr	r2, [r4, #12]
     5ae:	234a      	movs	r3, #74	; 0x4a
     5b0:	5ad0      	ldrh	r0, [r2, r3]
}
     5b2:	bd70      	pop	{r4, r5, r6, pc}
				if (vcof>12500)
     5b4:	4917      	ldr	r1, [pc, #92]	; (614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
     5b6:	1c28      	adds	r0, r5, #0
     5b8:	4b17      	ldr	r3, [pc, #92]	; (618 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     5ba:	4798      	blx	r3
     5bc:	2800      	cmp	r0, #0
     5be:	d005      	beq.n	5cc <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x34>
					Write_Single_Register(37,0x8204);
     5c0:	4a16      	ldr	r2, [pc, #88]	; (61c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     5c2:	2125      	movs	r1, #37	; 0x25
     5c4:	0020      	movs	r0, r4
     5c6:	4b16      	ldr	r3, [pc, #88]	; (620 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     5c8:	4798      	blx	r3
     5ca:	e7ef      	b.n	5ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8104);
     5cc:	4a15      	ldr	r2, [pc, #84]	; (624 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
     5ce:	2125      	movs	r1, #37	; 0x25
     5d0:	0020      	movs	r0, r4
     5d2:	4b13      	ldr	r3, [pc, #76]	; (620 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     5d4:	4798      	blx	r3
     5d6:	e7e9      	b.n	5ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
				if (vcof>12500)
     5d8:	490e      	ldr	r1, [pc, #56]	; (614 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x7c>)
     5da:	1c28      	adds	r0, r5, #0
     5dc:	4b0e      	ldr	r3, [pc, #56]	; (618 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     5de:	4798      	blx	r3
     5e0:	2800      	cmp	r0, #0
     5e2:	d10b      	bne.n	5fc <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x64>
					if (vcof>10000)
     5e4:	4910      	ldr	r1, [pc, #64]	; (628 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x90>)
     5e6:	1c28      	adds	r0, r5, #0
     5e8:	4b0b      	ldr	r3, [pc, #44]	; (618 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     5ea:	4798      	blx	r3
     5ec:	2800      	cmp	r0, #0
     5ee:	d10b      	bne.n	608 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x70>
						Write_Single_Register(37,0x8104);
     5f0:	4a0c      	ldr	r2, [pc, #48]	; (624 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
     5f2:	2125      	movs	r1, #37	; 0x25
     5f4:	0020      	movs	r0, r4
     5f6:	4b0a      	ldr	r3, [pc, #40]	; (620 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     5f8:	4798      	blx	r3
     5fa:	e7d7      	b.n	5ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
					Write_Single_Register(37,0x8304);
     5fc:	4a0b      	ldr	r2, [pc, #44]	; (62c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x94>)
     5fe:	2125      	movs	r1, #37	; 0x25
     600:	0020      	movs	r0, r4
     602:	4b07      	ldr	r3, [pc, #28]	; (620 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     604:	4798      	blx	r3
     606:	e7d1      	b.n	5ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
						Write_Single_Register(37,0x8204);
     608:	4a04      	ldr	r2, [pc, #16]	; (61c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     60a:	2125      	movs	r1, #37	; 0x25
     60c:	0020      	movs	r0, r4
     60e:	4b04      	ldr	r3, [pc, #16]	; (620 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     610:	4798      	blx	r3
     612:	e7cb      	b.n	5ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x14>
     614:	46435000 	.word	0x46435000
     618:	00001955 	.word	0x00001955
     61c:	00008204 	.word	0x00008204
     620:	0000053d 	.word	0x0000053d
     624:	00008104 	.word	0x00008104
     628:	461c4000 	.word	0x461c4000
     62c:	00008304 	.word	0x00008304

00000630 <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
bool lmx2694_Handler::Write_FCAL_EN(bool st){
     630:	b510      	push	{r4, lr}
     632:	0004      	movs	r4, r0
	if(st){
     634:	2900      	cmp	r1, #0
     636:	d10e      	bne.n	656 <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x26>
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
     638:	68c3      	ldr	r3, [r0, #12]
     63a:	881b      	ldrh	r3, [r3, #0]
     63c:	2208      	movs	r2, #8
     63e:	4393      	bics	r3, r2
     640:	8403      	strh	r3, [r0, #32]
	int_result=Write_Single_Register(0,register_value);
     642:	8c22      	ldrh	r2, [r4, #32]
     644:	2100      	movs	r1, #0
     646:	0020      	movs	r0, r4
     648:	4b06      	ldr	r3, [pc, #24]	; (664 <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x34>)
     64a:	4798      	blx	r3
     64c:	61e0      	str	r0, [r4, #28]
	return int_result;
     64e:	1e43      	subs	r3, r0, #1
     650:	4198      	sbcs	r0, r3
     652:	b2c0      	uxtb	r0, r0
}
     654:	bd10      	pop	{r4, pc}
		register_value=write_registers[0]|(0x01<<FCAL_EN);
     656:	68c3      	ldr	r3, [r0, #12]
     658:	881b      	ldrh	r3, [r3, #0]
     65a:	2208      	movs	r2, #8
     65c:	4313      	orrs	r3, r2
     65e:	8403      	strh	r3, [r0, #32]
     660:	e7ef      	b.n	642 <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x12>
     662:	46c0      	nop			; (mov r8, r8)
     664:	0000053d 	.word	0x0000053d

00000668 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
     668:	b570      	push	{r4, r5, r6, lr}
     66a:	0004      	movs	r4, r0
	Write_FCAL_EN(false);
     66c:	2100      	movs	r1, #0
     66e:	4d05      	ldr	r5, [pc, #20]	; (684 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x1c>)
     670:	47a8      	blx	r5
	delay_us(100);
     672:	2064      	movs	r0, #100	; 0x64
     674:	4b04      	ldr	r3, [pc, #16]	; (688 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x20>)
     676:	4798      	blx	r3
	bool_result=Write_FCAL_EN(true);
     678:	2101      	movs	r1, #1
     67a:	0020      	movs	r0, r4
     67c:	47a8      	blx	r5
     67e:	76a0      	strb	r0, [r4, #26]
}
     680:	bd70      	pop	{r4, r5, r6, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	00000631 	.word	0x00000631
     688:	00000e59 	.word	0x00000e59

0000068c <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
void lmx2694_Handler::Initiate_Registers(){
     68c:	b570      	push	{r4, r5, r6, lr}
     68e:	0005      	movs	r5, r0
     690:	4a0a      	ldr	r2, [pc, #40]	; (6bc <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x30>)
     692:	322d      	adds	r2, #45	; 0x2d
     694:	32ff      	adds	r2, #255	; 0xff
     696:	2300      	movs	r3, #0
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
     698:	8811      	ldrh	r1, [r2, #0]
     69a:	68a8      	ldr	r0, [r5, #8]
     69c:	52c1      	strh	r1, [r0, r3]
     69e:	3302      	adds	r3, #2
     6a0:	3a02      	subs	r2, #2
	for (int i = 0; i < NUMBER_REGISTERS; i++)
     6a2:	2be6      	cmp	r3, #230	; 0xe6
     6a4:	d1f8      	bne.n	698 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0xc>
     6a6:	2472      	movs	r4, #114	; 0x72
		Write_Single_Register(i-1,read_registers[i-1]);
     6a8:	4e05      	ldr	r6, [pc, #20]	; (6c0 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x34>)
     6aa:	0063      	lsls	r3, r4, #1
     6ac:	68aa      	ldr	r2, [r5, #8]
     6ae:	5a9a      	ldrh	r2, [r3, r2]
     6b0:	b2e1      	uxtb	r1, r4
     6b2:	0028      	movs	r0, r5
     6b4:	47b0      	blx	r6
	for(int i=NUMBER_REGISTERS; i>0;i--){
     6b6:	3c01      	subs	r4, #1
     6b8:	d2f7      	bcs.n	6aa <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x1e>
}
     6ba:	bd70      	pop	{r4, r5, r6, pc}
     6bc:	000028f0 	.word	0x000028f0
     6c0:	0000053d 	.word	0x0000053d

000006c4 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
	read_registers[index]=register_value;
	Set_MUXOUT_READBACK(true);
	return register_value;
}

int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
     6c4:	b510      	push	{r4, lr}
     6c6:	0004      	movs	r4, r0
	if(st){
     6c8:	2900      	cmp	r1, #0
     6ca:	d10b      	bne.n	6e4 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x20>
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
		}else{
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
     6cc:	6883      	ldr	r3, [r0, #8]
     6ce:	881b      	ldrh	r3, [r3, #0]
     6d0:	2204      	movs	r2, #4
     6d2:	4393      	bics	r3, r2
     6d4:	8403      	strh	r3, [r0, #32]
	}
	int_result=Write_Single_Register(0,register_value);
     6d6:	8c22      	ldrh	r2, [r4, #32]
     6d8:	2100      	movs	r1, #0
     6da:	0020      	movs	r0, r4
     6dc:	4b04      	ldr	r3, [pc, #16]	; (6f0 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x2c>)
     6de:	4798      	blx	r3
     6e0:	61e0      	str	r0, [r4, #28]
	return int_result;
}
     6e2:	bd10      	pop	{r4, pc}
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
     6e4:	6883      	ldr	r3, [r0, #8]
     6e6:	881b      	ldrh	r3, [r3, #0]
     6e8:	2204      	movs	r2, #4
     6ea:	4313      	orrs	r3, r2
     6ec:	8403      	strh	r3, [r0, #32]
     6ee:	e7f2      	b.n	6d6 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x12>
     6f0:	0000053d 	.word	0x0000053d

000006f4 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
     6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f6:	46ce      	mov	lr, r9
     6f8:	b500      	push	{lr}
     6fa:	b082      	sub	sp, #8
     6fc:	0004      	movs	r4, r0
     6fe:	4689      	mov	r9, r1
	Set_MUXOUT_READBACK(false);
     700:	2100      	movs	r1, #0
     702:	4b20      	ldr	r3, [pc, #128]	; (784 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x90>)
     704:	4798      	blx	r3
	register_value=0;
     706:	2300      	movs	r3, #0
     708:	8423      	strh	r3, [r4, #32]
		spi->SetCS(false);
     70a:	4e1f      	ldr	r6, [pc, #124]	; (788 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x94>)
			private_index=index|0x80;
     70c:	2780      	movs	r7, #128	; 0x80
     70e:	427f      	negs	r7, r7
     710:	464b      	mov	r3, r9
     712:	431f      	orrs	r7, r3
			memset(read_bytes,0,3);
     714:	4d1d      	ldr	r5, [pc, #116]	; (78c <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x98>)
		spi->SetCS(false);
     716:	2100      	movs	r1, #0
     718:	6920      	ldr	r0, [r4, #16]
     71a:	47b0      	blx	r6
			private_index=index|0x80;
     71c:	2322      	movs	r3, #34	; 0x22
     71e:	54e7      	strb	r7, [r4, r3]
			memset(read_bytes,0,3);
     720:	2203      	movs	r2, #3
     722:	2100      	movs	r1, #0
     724:	3b0b      	subs	r3, #11
     726:	469c      	mov	ip, r3
     728:	44a4      	add	ip, r4
     72a:	4663      	mov	r3, ip
     72c:	9301      	str	r3, [sp, #4]
     72e:	4660      	mov	r0, ip
     730:	47a8      	blx	r5
			int_result=spi->Write(&private_index,1);
     732:	2201      	movs	r2, #1
     734:	0021      	movs	r1, r4
     736:	3122      	adds	r1, #34	; 0x22
     738:	6920      	ldr	r0, [r4, #16]
     73a:	4b15      	ldr	r3, [pc, #84]	; (790 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x9c>)
     73c:	4798      	blx	r3
     73e:	61e0      	str	r0, [r4, #28]
			int_result=spi->Read(read_bytes,2);
     740:	2202      	movs	r2, #2
     742:	9901      	ldr	r1, [sp, #4]
     744:	6920      	ldr	r0, [r4, #16]
     746:	4b13      	ldr	r3, [pc, #76]	; (794 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0xa0>)
     748:	4798      	blx	r3
     74a:	61e0      	str	r0, [r4, #28]
			register_value=read_bytes[0]*256+read_bytes[1];
     74c:	7de2      	ldrb	r2, [r4, #23]
     74e:	0212      	lsls	r2, r2, #8
     750:	7e23      	ldrb	r3, [r4, #24]
     752:	189b      	adds	r3, r3, r2
     754:	8423      	strh	r3, [r4, #32]
			spi->SetCS(true);
     756:	2101      	movs	r1, #1
     758:	6920      	ldr	r0, [r4, #16]
     75a:	47b0      	blx	r6
	while((register_value==0)|(register_value==0xffff)){
     75c:	8c22      	ldrh	r2, [r4, #32]
     75e:	1e53      	subs	r3, r2, #1
     760:	b29b      	uxth	r3, r3
     762:	490d      	ldr	r1, [pc, #52]	; (798 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0xa4>)
     764:	428b      	cmp	r3, r1
     766:	d8d6      	bhi.n	716 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x22>
	read_registers[index]=register_value;
     768:	464b      	mov	r3, r9
     76a:	005b      	lsls	r3, r3, #1
     76c:	68a1      	ldr	r1, [r4, #8]
     76e:	525a      	strh	r2, [r3, r1]
	Set_MUXOUT_READBACK(true);
     770:	2101      	movs	r1, #1
     772:	0020      	movs	r0, r4
     774:	4b03      	ldr	r3, [pc, #12]	; (784 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x90>)
     776:	4798      	blx	r3
	return register_value;
     778:	8c20      	ldrh	r0, [r4, #32]
}
     77a:	b002      	add	sp, #8
     77c:	bc04      	pop	{r2}
     77e:	4691      	mov	r9, r2
     780:	bdf0      	pop	{r4, r5, r6, r7, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	000006c5 	.word	0x000006c5
     788:	00000cd9 	.word	0x00000cd9
     78c:	00002849 	.word	0x00002849
     790:	00000c99 	.word	0x00000c99
     794:	00000cb9 	.word	0x00000cb9
     798:	0000fffd 	.word	0x0000fffd

0000079c <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
     79c:	b510      	push	{r4, lr}
     79e:	0004      	movs	r4, r0
	if (mbr)
     7a0:	2900      	cmp	r1, #0
     7a2:	d10d      	bne.n	7c0 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x24>
		channel_index=((write_registers[75])>>6)&0x1f;
     7a4:	2396      	movs	r3, #150	; 0x96
     7a6:	68c2      	ldr	r2, [r0, #12]
     7a8:	5ad3      	ldrh	r3, [r2, r3]
     7aa:	055b      	lsls	r3, r3, #21
     7ac:	0edb      	lsrs	r3, r3, #27
     7ae:	2223      	movs	r2, #35	; 0x23
     7b0:	5483      	strb	r3, [r0, r2]
	return channel_divider_values[channel_index];
     7b2:	2323      	movs	r3, #35	; 0x23
     7b4:	5ce2      	ldrb	r2, [r4, r3]
     7b6:	0092      	lsls	r2, r2, #2
     7b8:	4b05      	ldr	r3, [pc, #20]	; (7d0 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x34>)
     7ba:	189b      	adds	r3, r3, r2
     7bc:	6918      	ldr	r0, [r3, #16]
}
     7be:	bd10      	pop	{r4, pc}
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
     7c0:	214b      	movs	r1, #75	; 0x4b
     7c2:	4b04      	ldr	r3, [pc, #16]	; (7d4 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x38>)
     7c4:	4798      	blx	r3
     7c6:	0540      	lsls	r0, r0, #21
     7c8:	0ec0      	lsrs	r0, r0, #27
     7ca:	2323      	movs	r3, #35	; 0x23
     7cc:	54e0      	strb	r0, [r4, r3]
     7ce:	e7f0      	b.n	7b2 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x16>
     7d0:	000028f0 	.word	0x000028f0
     7d4:	000006f5 	.word	0x000006f5

000007d8 <_ZN15lmx2694_Handler8IsLockedEv>:
bool lmx2694_Handler::IsLocked(void){
     7d8:	b570      	push	{r4, r5, r6, lr}
     7da:	b082      	sub	sp, #8
     7dc:	0005      	movs	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     7de:	4668      	mov	r0, sp
     7e0:	4b28      	ldr	r3, [pc, #160]	; (884 <_ZN15lmx2694_Handler8IsLockedEv+0xac>)
     7e2:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     7e4:	23c0      	movs	r3, #192	; 0xc0
     7e6:	05db      	lsls	r3, r3, #23
     7e8:	681c      	ldr	r4, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     7ea:	4a27      	ldr	r2, [pc, #156]	; (888 <_ZN15lmx2694_Handler8IsLockedEv+0xb0>)
     7ec:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     7ee:	691b      	ldr	r3, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     7f0:	4053      	eors	r3, r2
     7f2:	401c      	ands	r4, r3
     7f4:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     7f6:	4668      	mov	r0, sp
     7f8:	4b24      	ldr	r3, [pc, #144]	; (88c <_ZN15lmx2694_Handler8IsLockedEv+0xb4>)
     7fa:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     7fc:	2340      	movs	r3, #64	; 0x40
     7fe:	401c      	ands	r4, r3
     800:	0023      	movs	r3, r4
     802:	1e5a      	subs	r2, r3, #1
     804:	4193      	sbcs	r3, r2
	is_locked=gpio_get_pin_level(PA06);
     806:	76eb      	strb	r3, [r5, #27]
	if (is_locked)
     808:	2c00      	cmp	r4, #0
     80a:	d00c      	beq.n	826 <_ZN15lmx2694_Handler8IsLockedEv+0x4e>
		return	(uint8_t)((write_registers[46])&(0x03));
     80c:	235c      	movs	r3, #92	; 0x5c
     80e:	68ea      	ldr	r2, [r5, #12]
     810:	5ad3      	ldrh	r3, [r2, r3]
		if (Get_OUT_MUX(2)>0)
     812:	079b      	lsls	r3, r3, #30
     814:	d022      	beq.n	85c <_ZN15lmx2694_Handler8IsLockedEv+0x84>
			current_frequency=Calculate_Current_Frequency(false)/1;
     816:	2100      	movs	r1, #0
     818:	0028      	movs	r0, r5
     81a:	4b1d      	ldr	r3, [pc, #116]	; (890 <_ZN15lmx2694_Handler8IsLockedEv+0xb8>)
     81c:	4798      	blx	r3
     81e:	6068      	str	r0, [r5, #4]
	return is_locked;
     820:	7ee8      	ldrb	r0, [r5, #27]
}
     822:	b002      	add	sp, #8
     824:	bd70      	pop	{r4, r5, r6, pc}
		delay_ms(10);
     826:	200a      	movs	r0, #10
     828:	4b1a      	ldr	r3, [pc, #104]	; (894 <_ZN15lmx2694_Handler8IsLockedEv+0xbc>)
     82a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     82c:	a801      	add	r0, sp, #4
     82e:	4b15      	ldr	r3, [pc, #84]	; (884 <_ZN15lmx2694_Handler8IsLockedEv+0xac>)
     830:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     832:	23c0      	movs	r3, #192	; 0xc0
     834:	05db      	lsls	r3, r3, #23
     836:	681c      	ldr	r4, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     838:	4a13      	ldr	r2, [pc, #76]	; (888 <_ZN15lmx2694_Handler8IsLockedEv+0xb0>)
     83a:	6a12      	ldr	r2, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     83c:	691b      	ldr	r3, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     83e:	4053      	eors	r3, r2
     840:	401c      	ands	r4, r3
     842:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     844:	a801      	add	r0, sp, #4
     846:	4b11      	ldr	r3, [pc, #68]	; (88c <_ZN15lmx2694_Handler8IsLockedEv+0xb4>)
     848:	4798      	blx	r3
     84a:	2340      	movs	r3, #64	; 0x40
     84c:	401c      	ands	r4, r3
     84e:	0023      	movs	r3, r4
     850:	1e5a      	subs	r2, r3, #1
     852:	4193      	sbcs	r3, r2
		is_locked=gpio_get_pin_level(PA06);
     854:	76eb      	strb	r3, [r5, #27]
	if (is_locked)
     856:	2c00      	cmp	r4, #0
     858:	d0e2      	beq.n	820 <_ZN15lmx2694_Handler8IsLockedEv+0x48>
     85a:	e7d7      	b.n	80c <_ZN15lmx2694_Handler8IsLockedEv+0x34>
			channel_divider=Get_Channel_Divider_Value(false);
     85c:	2100      	movs	r1, #0
     85e:	0028      	movs	r0, r5
     860:	4b0d      	ldr	r3, [pc, #52]	; (898 <_ZN15lmx2694_Handler8IsLockedEv+0xc0>)
     862:	4798      	blx	r3
     864:	2425      	movs	r4, #37	; 0x25
     866:	5528      	strb	r0, [r5, r4]
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
     868:	2100      	movs	r1, #0
     86a:	0028      	movs	r0, r5
     86c:	4b08      	ldr	r3, [pc, #32]	; (890 <_ZN15lmx2694_Handler8IsLockedEv+0xb8>)
     86e:	4798      	blx	r3
     870:	1c06      	adds	r6, r0, #0
     872:	5d28      	ldrb	r0, [r5, r4]
     874:	4b09      	ldr	r3, [pc, #36]	; (89c <_ZN15lmx2694_Handler8IsLockedEv+0xc4>)
     876:	4798      	blx	r3
     878:	1c01      	adds	r1, r0, #0
     87a:	1c30      	adds	r0, r6, #0
     87c:	4b08      	ldr	r3, [pc, #32]	; (8a0 <_ZN15lmx2694_Handler8IsLockedEv+0xc8>)
     87e:	4798      	blx	r3
     880:	6068      	str	r0, [r5, #4]
     882:	e7cd      	b.n	820 <_ZN15lmx2694_Handler8IsLockedEv+0x48>
     884:	00000e3d 	.word	0x00000e3d
     888:	41004400 	.word	0x41004400
     88c:	00000e4b 	.word	0x00000e4b
     890:	000002a9 	.word	0x000002a9
     894:	00000e79 	.word	0x00000e79
     898:	0000079d 	.word	0x0000079d
     89c:	00002669 	.word	0x00002669
     8a0:	00001cd1 	.word	0x00001cd1

000008a4 <_ZN15lmx2694_Handler4InitEv>:
bool lmx2694_Handler::Init(){
     8a4:	b570      	push	{r4, r5, r6, lr}
     8a6:	0004      	movs	r4, r0
	spi=&staticSPI;
     8a8:	480e      	ldr	r0, [pc, #56]	; (8e4 <_ZN15lmx2694_Handler4InitEv+0x40>)
     8aa:	3050      	adds	r0, #80	; 0x50
     8ac:	6120      	str	r0, [r4, #16]
	spi->Init();
     8ae:	4b0e      	ldr	r3, [pc, #56]	; (8e8 <_ZN15lmx2694_Handler4InitEv+0x44>)
     8b0:	4798      	blx	r3
	spi->SetCS(true);
     8b2:	2101      	movs	r1, #1
     8b4:	6920      	ldr	r0, [r4, #16]
     8b6:	4b0d      	ldr	r3, [pc, #52]	; (8ec <_ZN15lmx2694_Handler4InitEv+0x48>)
     8b8:	4798      	blx	r3
	Power_Down();
     8ba:	0020      	movs	r0, r4
     8bc:	4b0c      	ldr	r3, [pc, #48]	; (8f0 <_ZN15lmx2694_Handler4InitEv+0x4c>)
     8be:	4798      	blx	r3
	Program_Reset();
     8c0:	0020      	movs	r0, r4
     8c2:	4b0c      	ldr	r3, [pc, #48]	; (8f4 <_ZN15lmx2694_Handler4InitEv+0x50>)
     8c4:	4798      	blx	r3
	Initiate_Registers();
     8c6:	0020      	movs	r0, r4
     8c8:	4b0b      	ldr	r3, [pc, #44]	; (8f8 <_ZN15lmx2694_Handler4InitEv+0x54>)
     8ca:	4798      	blx	r3
	delay_ms(10);
     8cc:	200a      	movs	r0, #10
     8ce:	4d0b      	ldr	r5, [pc, #44]	; (8fc <_ZN15lmx2694_Handler4InitEv+0x58>)
     8d0:	47a8      	blx	r5
	Toggle_FCAL_EN();
     8d2:	0020      	movs	r0, r4
     8d4:	4b0a      	ldr	r3, [pc, #40]	; (900 <_ZN15lmx2694_Handler4InitEv+0x5c>)
     8d6:	4798      	blx	r3
	delay_ms(100);
     8d8:	2064      	movs	r0, #100	; 0x64
     8da:	47a8      	blx	r5
	return IsLocked();
     8dc:	0020      	movs	r0, r4
     8de:	4b09      	ldr	r3, [pc, #36]	; (904 <_ZN15lmx2694_Handler4InitEv+0x60>)
     8e0:	4798      	blx	r3
}
     8e2:	bd70      	pop	{r4, r5, r6, pc}
     8e4:	20000204 	.word	0x20000204
     8e8:	00000c69 	.word	0x00000c69
     8ec:	00000cd9 	.word	0x00000cd9
     8f0:	00000471 	.word	0x00000471
     8f4:	000004b5 	.word	0x000004b5
     8f8:	0000068d 	.word	0x0000068d
     8fc:	00000e79 	.word	0x00000e79
     900:	00000669 	.word	0x00000669
     904:	000007d9 	.word	0x000007d9

00000908 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
     908:	b570      	push	{r4, r5, r6, lr}
     90a:	0004      	movs	r4, r0
	if (target_frequency>MIN_VCO_FREQUENCY)
     90c:	6b85      	ldr	r5, [r0, #56]	; 0x38
     90e:	490b      	ldr	r1, [pc, #44]	; (93c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>)
     910:	1c28      	adds	r0, r5, #0
     912:	4b0b      	ldr	r3, [pc, #44]	; (940 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x38>)
     914:	4798      	blx	r3
     916:	2800      	cmp	r0, #0
     918:	d005      	beq.n	926 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x1e>
		vco_frequency=target_frequency;
     91a:	63e5      	str	r5, [r4, #60]	; 0x3c
	Program_PFD_DLY_SEL(vco_frequency);
     91c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     91e:	0020      	movs	r0, r4
     920:	4b08      	ldr	r3, [pc, #32]	; (944 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x3c>)
     922:	4798      	blx	r3
}
     924:	bd70      	pop	{r4, r5, r6, pc}
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
     926:	2100      	movs	r1, #0
     928:	0020      	movs	r0, r4
     92a:	4b07      	ldr	r3, [pc, #28]	; (948 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x40>)
     92c:	4798      	blx	r3
     92e:	4b07      	ldr	r3, [pc, #28]	; (94c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x44>)
     930:	4798      	blx	r3
     932:	1c29      	adds	r1, r5, #0
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x48>)
     936:	4798      	blx	r3
     938:	63e0      	str	r0, [r4, #60]	; 0x3c
     93a:	e7ef      	b.n	91c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x14>
     93c:	45ebf000 	.word	0x45ebf000
     940:	00001955 	.word	0x00001955
     944:	00000599 	.word	0x00000599
     948:	0000079d 	.word	0x0000079d
     94c:	00002669 	.word	0x00002669
     950:	000020b1 	.word	0x000020b1

00000954 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
void  lmx2694_Handler::Write_Division_Registers(void){
     954:	b570      	push	{r4, r5, r6, lr}
     956:	0004      	movs	r4, r0
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
     958:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     95a:	212b      	movs	r1, #43	; 0x2b
     95c:	4d0c      	ldr	r5, [pc, #48]	; (990 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x3c>)
     95e:	47a8      	blx	r5
	Write_Single_Register(42,(uint16_t)(numerator>>16));
     960:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     962:	212a      	movs	r1, #42	; 0x2a
     964:	0020      	movs	r0, r4
     966:	47a8      	blx	r5
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
     968:	8e22      	ldrh	r2, [r4, #48]	; 0x30
     96a:	2127      	movs	r1, #39	; 0x27
     96c:	0020      	movs	r0, r4
     96e:	47a8      	blx	r5
	Write_Single_Register(38,(uint16_t)(denominator>>16));
     970:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     972:	2126      	movs	r1, #38	; 0x26
     974:	0020      	movs	r0, r4
     976:	47a8      	blx	r5
	Program_PFD_DLY_SEL();
     978:	0020      	movs	r0, r4
     97a:	4b06      	ldr	r3, [pc, #24]	; (994 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x40>)
     97c:	4798      	blx	r3
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
     97e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     980:	2124      	movs	r1, #36	; 0x24
     982:	0020      	movs	r0, r4
     984:	47a8      	blx	r5
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
     986:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
     988:	2122      	movs	r1, #34	; 0x22
     98a:	0020      	movs	r0, r4
     98c:	47a8      	blx	r5
}
     98e:	bd70      	pop	{r4, r5, r6, pc}
     990:	0000053d 	.word	0x0000053d
     994:	00000909 	.word	0x00000909

00000998 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
float lmx2694_Handler::Set_Target_Frequency(float tf){
     998:	b570      	push	{r4, r5, r6, lr}
     99a:	0004      	movs	r4, r0
     99c:	1c0d      	adds	r5, r1, #0
	if (tf>MAX_VCO_FREQUENCY)
     99e:	493e      	ldr	r1, [pc, #248]	; (a98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x100>)
     9a0:	1c28      	adds	r0, r5, #0
     9a2:	4b3e      	ldr	r3, [pc, #248]	; (a9c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     9a4:	4798      	blx	r3
     9a6:	2800      	cmp	r0, #0
     9a8:	d138      	bne.n	a1c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x84>
		if (tf>MIN_PLL_FREQUENCY)
     9aa:	493d      	ldr	r1, [pc, #244]	; (aa0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
     9ac:	1c28      	adds	r0, r5, #0
     9ae:	4b3b      	ldr	r3, [pc, #236]	; (a9c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     9b0:	4798      	blx	r3
     9b2:	2800      	cmp	r0, #0
     9b4:	d034      	beq.n	a20 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
			target_frequency=tf;
     9b6:	63a5      	str	r5, [r4, #56]	; 0x38
			if (tf>MIN_VCO_FREQUENCY)
     9b8:	493a      	ldr	r1, [pc, #232]	; (aa4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     9ba:	1c28      	adds	r0, r5, #0
     9bc:	4b37      	ldr	r3, [pc, #220]	; (a9c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     9be:	4798      	blx	r3
     9c0:	2800      	cmp	r0, #0
     9c2:	d038      	beq.n	a36 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x9e>
				if (current_frequency>MIN_VCO_FREQUENCY)
     9c4:	4937      	ldr	r1, [pc, #220]	; (aa4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     9c6:	6860      	ldr	r0, [r4, #4]
     9c8:	4b34      	ldr	r3, [pc, #208]	; (a9c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     9ca:	4798      	blx	r3
     9cc:	2800      	cmp	r0, #0
     9ce:	d028      	beq.n	a22 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x8a>
				channel_divider=1;
     9d0:	2201      	movs	r2, #1
     9d2:	2325      	movs	r3, #37	; 0x25
     9d4:	54e2      	strb	r2, [r4, r3]
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
     9d6:	2325      	movs	r3, #37	; 0x25
     9d8:	5ce0      	ldrb	r0, [r4, r3]
     9da:	4b33      	ldr	r3, [pc, #204]	; (aa8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x110>)
     9dc:	4798      	blx	r3
     9de:	1c29      	adds	r1, r5, #0
     9e0:	4b32      	ldr	r3, [pc, #200]	; (aac <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
     9e2:	4798      	blx	r3
     9e4:	4932      	ldr	r1, [pc, #200]	; (ab0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x118>)
     9e6:	4b33      	ldr	r3, [pc, #204]	; (ab4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x11c>)
     9e8:	4798      	blx	r3
     9ea:	1c05      	adds	r5, r0, #0
     9ec:	6420      	str	r0, [r4, #64]	; 0x40
  { return __builtin_floorf(__x); }
     9ee:	4b32      	ldr	r3, [pc, #200]	; (ab8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>)
     9f0:	4798      	blx	r3
			N_divider=(uint32_t)(floor(divider));
     9f2:	4b32      	ldr	r3, [pc, #200]	; (abc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x124>)
     9f4:	4798      	blx	r3
     9f6:	62a0      	str	r0, [r4, #40]	; 0x28
			fraction=divider-N_divider;
     9f8:	4b31      	ldr	r3, [pc, #196]	; (ac0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x128>)
     9fa:	4798      	blx	r3
     9fc:	1c01      	adds	r1, r0, #0
     9fe:	1c28      	adds	r0, r5, #0
     a00:	4b30      	ldr	r3, [pc, #192]	; (ac4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x12c>)
     a02:	4798      	blx	r3
     a04:	1c01      	adds	r1, r0, #0
     a06:	6460      	str	r0, [r4, #68]	; 0x44
			Calculate_Fraction(fraction);
     a08:	0020      	movs	r0, r4
     a0a:	4b2f      	ldr	r3, [pc, #188]	; (ac8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x130>)
     a0c:	4798      	blx	r3
			Write_Division_Registers();
     a0e:	0020      	movs	r0, r4
     a10:	4b2e      	ldr	r3, [pc, #184]	; (acc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x134>)
     a12:	4798      	blx	r3
			Toggle_FCAL_EN();
     a14:	0020      	movs	r0, r4
     a16:	4b2e      	ldr	r3, [pc, #184]	; (ad0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x138>)
     a18:	4798      	blx	r3
     a1a:	e001      	b.n	a20 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x88>
		target_frequency=MAX_VCO_FREQUENCY;
     a1c:	4b1e      	ldr	r3, [pc, #120]	; (a98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x100>)
     a1e:	63a3      	str	r3, [r4, #56]	; 0x38
}
     a20:	bd70      	pop	{r4, r5, r6, pc}
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
     a22:	235c      	movs	r3, #92	; 0x5c
     a24:	68e2      	ldr	r2, [r4, #12]
     a26:	5ad2      	ldrh	r2, [r2, r3]
     a28:	3b5b      	subs	r3, #91	; 0x5b
     a2a:	431a      	orrs	r2, r3
     a2c:	212e      	movs	r1, #46	; 0x2e
     a2e:	0020      	movs	r0, r4
     a30:	4b28      	ldr	r3, [pc, #160]	; (ad4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     a32:	4798      	blx	r3
     a34:	e7cc      	b.n	9d0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x38>
				if (current_frequency<MIN_VCO_FREQUENCY)
     a36:	491b      	ldr	r1, [pc, #108]	; (aa4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     a38:	6860      	ldr	r0, [r4, #4]
     a3a:	4b27      	ldr	r3, [pc, #156]	; (ad8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x140>)
     a3c:	4798      	blx	r3
     a3e:	2800      	cmp	r0, #0
     a40:	d019      	beq.n	a76 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xde>
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
     a42:	2396      	movs	r3, #150	; 0x96
     a44:	68e2      	ldr	r2, [r4, #12]
     a46:	5ad6      	ldrh	r6, [r2, r3]
     a48:	4a24      	ldr	r2, [pc, #144]	; (adc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     a4a:	4016      	ands	r6, r2
     a4c:	8426      	strh	r6, [r4, #32]
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
     a4e:	0020      	movs	r0, r4
     a50:	4b23      	ldr	r3, [pc, #140]	; (ae0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x148>)
     a52:	4798      	blx	r3
     a54:	0182      	lsls	r2, r0, #6
     a56:	4332      	orrs	r2, r6
     a58:	b292      	uxth	r2, r2
     a5a:	214b      	movs	r1, #75	; 0x4b
     a5c:	0020      	movs	r0, r4
     a5e:	4b1d      	ldr	r3, [pc, #116]	; (ad4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     a60:	4798      	blx	r3
				if (channel_divider>2)
     a62:	2325      	movs	r3, #37	; 0x25
     a64:	5ce3      	ldrb	r3, [r4, r3]
     a66:	2b02      	cmp	r3, #2
     a68:	dd0f      	ble.n	a8a <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xf2>
					Write_Single_Register(31,0x43ec);
     a6a:	4a1e      	ldr	r2, [pc, #120]	; (ae4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x14c>)
     a6c:	211f      	movs	r1, #31
     a6e:	0020      	movs	r0, r4
     a70:	4b18      	ldr	r3, [pc, #96]	; (ad4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     a72:	4798      	blx	r3
     a74:	e7af      	b.n	9d6 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
     a76:	235c      	movs	r3, #92	; 0x5c
     a78:	68e2      	ldr	r2, [r4, #12]
     a7a:	5ad2      	ldrh	r2, [r2, r3]
     a7c:	3b59      	subs	r3, #89	; 0x59
     a7e:	439a      	bics	r2, r3
     a80:	212e      	movs	r1, #46	; 0x2e
     a82:	0020      	movs	r0, r4
     a84:	4b13      	ldr	r3, [pc, #76]	; (ad4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     a86:	4798      	blx	r3
     a88:	e7db      	b.n	a42 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xaa>
					Write_Single_Register(31,0x3ec);
     a8a:	22fb      	movs	r2, #251	; 0xfb
     a8c:	0092      	lsls	r2, r2, #2
     a8e:	211f      	movs	r1, #31
     a90:	0020      	movs	r0, r4
     a92:	4b10      	ldr	r3, [pc, #64]	; (ad4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     a94:	4798      	blx	r3
     a96:	e79e      	b.n	9d6 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
     a98:	466bf000 	.word	0x466bf000
     a9c:	00001955 	.word	0x00001955
     aa0:	43c80000 	.word	0x43c80000
     aa4:	45ebf000 	.word	0x45ebf000
     aa8:	00002669 	.word	0x00002669
     aac:	000020b1 	.word	0x000020b1
     ab0:	43480000 	.word	0x43480000
     ab4:	00001cd1 	.word	0x00001cd1
     ab8:	00001539 	.word	0x00001539
     abc:	0000197d 	.word	0x0000197d
     ac0:	00002709 	.word	0x00002709
     ac4:	000022f1 	.word	0x000022f1
     ac8:	000003fd 	.word	0x000003fd
     acc:	00000955 	.word	0x00000955
     ad0:	00000669 	.word	0x00000669
     ad4:	0000053d 	.word	0x0000053d
     ad8:	0000192d 	.word	0x0000192d
     adc:	fffff83f 	.word	0xfffff83f
     ae0:	00000365 	.word	0x00000365
     ae4:	000043ec 	.word	0x000043ec

00000ae8 <_ZN15lmx2694_Handler9Self_TestEv>:

bool lmx2694_Handler::Self_Test(){
     ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aea:	0004      	movs	r4, r0
	error_counter=0;
     aec:	2200      	movs	r2, #0
     aee:	234c      	movs	r3, #76	; 0x4c
     af0:	54c2      	strb	r2, [r0, r3]
	while(error_counter<0xff){
		if (IsLocked())
     af2:	4e27      	ldr	r6, [pc, #156]	; (b90 <_ZN15lmx2694_Handler9Self_TestEv+0xa8>)
			error_counter=0;
			delay_ms(10);
		} 
		else
		{
			error_counter++;
     af4:	254c      	movs	r5, #76	; 0x4c
			delay_ms(100+10*error_counter);
     af6:	4f27      	ldr	r7, [pc, #156]	; (b94 <_ZN15lmx2694_Handler9Self_TestEv+0xac>)
     af8:	e01c      	b.n	b34 <_ZN15lmx2694_Handler9Self_TestEv+0x4c>
				if (current_frequency-step<MIN_PLL_FREQUENCY)
     afa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     afc:	6860      	ldr	r0, [r4, #4]
     afe:	4b26      	ldr	r3, [pc, #152]	; (b98 <_ZN15lmx2694_Handler9Self_TestEv+0xb0>)
     b00:	4798      	blx	r3
     b02:	4926      	ldr	r1, [pc, #152]	; (b9c <_ZN15lmx2694_Handler9Self_TestEv+0xb4>)
     b04:	4b26      	ldr	r3, [pc, #152]	; (ba0 <_ZN15lmx2694_Handler9Self_TestEv+0xb8>)
     b06:	4798      	blx	r3
     b08:	2800      	cmp	r0, #0
     b0a:	d027      	beq.n	b5c <_ZN15lmx2694_Handler9Self_TestEv+0x74>
					direction=true;
     b0c:	2201      	movs	r2, #1
     b0e:	234d      	movs	r3, #77	; 0x4d
     b10:	54e2      	strb	r2, [r4, r3]
			target_frequency=direction?current_frequency+step:current_frequency-step;
     b12:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     b14:	6860      	ldr	r0, [r4, #4]
     b16:	4b23      	ldr	r3, [pc, #140]	; (ba4 <_ZN15lmx2694_Handler9Self_TestEv+0xbc>)
     b18:	4798      	blx	r3
     b1a:	1c01      	adds	r1, r0, #0
     b1c:	63a1      	str	r1, [r4, #56]	; 0x38
			Set_Target_Frequency(target_frequency);
     b1e:	0020      	movs	r0, r4
     b20:	4b21      	ldr	r3, [pc, #132]	; (ba8 <_ZN15lmx2694_Handler9Self_TestEv+0xc0>)
     b22:	4798      	blx	r3
			error_counter=0;
     b24:	2300      	movs	r3, #0
     b26:	5563      	strb	r3, [r4, r5]
			delay_ms(10);
     b28:	200a      	movs	r0, #10
     b2a:	4b1a      	ldr	r3, [pc, #104]	; (b94 <_ZN15lmx2694_Handler9Self_TestEv+0xac>)
     b2c:	4798      	blx	r3
	while(error_counter<0xff){
     b2e:	5d63      	ldrb	r3, [r4, r5]
     b30:	2bfe      	cmp	r3, #254	; 0xfe
     b32:	dc2a      	bgt.n	b8a <_ZN15lmx2694_Handler9Self_TestEv+0xa2>
		if (IsLocked())
     b34:	0020      	movs	r0, r4
     b36:	47b0      	blx	r6
     b38:	2800      	cmp	r0, #0
     b3a:	d015      	beq.n	b68 <_ZN15lmx2694_Handler9Self_TestEv+0x80>
			if (direction)
     b3c:	234d      	movs	r3, #77	; 0x4d
     b3e:	5ce3      	ldrb	r3, [r4, r3]
     b40:	2b00      	cmp	r3, #0
     b42:	d0da      	beq.n	afa <_ZN15lmx2694_Handler9Self_TestEv+0x12>
					if (current_frequency+step>MAX_SENSOR_FREQUENCY)
     b44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     b46:	6860      	ldr	r0, [r4, #4]
     b48:	4b16      	ldr	r3, [pc, #88]	; (ba4 <_ZN15lmx2694_Handler9Self_TestEv+0xbc>)
     b4a:	4798      	blx	r3
     b4c:	4917      	ldr	r1, [pc, #92]	; (bac <_ZN15lmx2694_Handler9Self_TestEv+0xc4>)
     b4e:	4b18      	ldr	r3, [pc, #96]	; (bb0 <_ZN15lmx2694_Handler9Self_TestEv+0xc8>)
     b50:	4798      	blx	r3
     b52:	2800      	cmp	r0, #0
     b54:	d0dd      	beq.n	b12 <_ZN15lmx2694_Handler9Self_TestEv+0x2a>
						direction=false;
     b56:	2200      	movs	r2, #0
     b58:	234d      	movs	r3, #77	; 0x4d
     b5a:	54e2      	strb	r2, [r4, r3]
			target_frequency=direction?current_frequency+step:current_frequency-step;
     b5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     b5e:	6860      	ldr	r0, [r4, #4]
     b60:	4b0d      	ldr	r3, [pc, #52]	; (b98 <_ZN15lmx2694_Handler9Self_TestEv+0xb0>)
     b62:	4798      	blx	r3
     b64:	1c01      	adds	r1, r0, #0
     b66:	e7d9      	b.n	b1c <_ZN15lmx2694_Handler9Self_TestEv+0x34>
			error_counter++;
     b68:	5d60      	ldrb	r0, [r4, r5]
     b6a:	3001      	adds	r0, #1
     b6c:	b2c0      	uxtb	r0, r0
     b6e:	5560      	strb	r0, [r4, r5]
			delay_ms(100+10*error_counter);
     b70:	0083      	lsls	r3, r0, #2
     b72:	18c0      	adds	r0, r0, r3
     b74:	0040      	lsls	r0, r0, #1
     b76:	3064      	adds	r0, #100	; 0x64
     b78:	b280      	uxth	r0, r0
     b7a:	47b8      	blx	r7
			Set_Target_Frequency(current_frequency);
     b7c:	6861      	ldr	r1, [r4, #4]
     b7e:	0020      	movs	r0, r4
     b80:	4b09      	ldr	r3, [pc, #36]	; (ba8 <_ZN15lmx2694_Handler9Self_TestEv+0xc0>)
     b82:	4798      	blx	r3
			delay_ms(100);
     b84:	2064      	movs	r0, #100	; 0x64
     b86:	47b8      	blx	r7
     b88:	e7d1      	b.n	b2e <_ZN15lmx2694_Handler9Self_TestEv+0x46>
		}
	}
}
     b8a:	2000      	movs	r0, #0
     b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	000007d9 	.word	0x000007d9
     b94:	00000e79 	.word	0x00000e79
     b98:	000022f1 	.word	0x000022f1
     b9c:	43c80000 	.word	0x43c80000
     ba0:	0000192d 	.word	0x0000192d
     ba4:	000019ad 	.word	0x000019ad
     ba8:	00000999 	.word	0x00000999
     bac:	45898000 	.word	0x45898000
     bb0:	00001955 	.word	0x00001955

00000bb4 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:
     bb4:	b510      	push	{r4, lr}
static SPI_Syn_Class staticSPI(&SPI_0);
     bb6:	4c06      	ldr	r4, [pc, #24]	; (bd0 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x1c>)
     bb8:	3450      	adds	r4, #80	; 0x50
     bba:	4906      	ldr	r1, [pc, #24]	; (bd4 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x20>)
     bbc:	0020      	movs	r0, r4
     bbe:	4b06      	ldr	r3, [pc, #24]	; (bd8 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x24>)
     bc0:	4798      	blx	r3
     bc2:	4a06      	ldr	r2, [pc, #24]	; (bdc <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x28>)
     bc4:	4906      	ldr	r1, [pc, #24]	; (be0 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x2c>)
     bc6:	0020      	movs	r0, r4
     bc8:	4b06      	ldr	r3, [pc, #24]	; (be4 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x30>)
     bca:	4798      	blx	r3
}
     bcc:	bd10      	pop	{r4, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	20000204 	.word	0x20000204
     bd4:	200002ec 	.word	0x200002ec
     bd8:	00000c59 	.word	0x00000c59
     bdc:	20000000 	.word	0x20000000
     be0:	00000c65 	.word	0x00000c65
     be4:	00001519 	.word	0x00001519

00000be8 <main>:
#include "lmx2694Handler.h"

lmx2694_Handler lmx;

int main(void)
{
     be8:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
     bea:	4b0b      	ldr	r3, [pc, #44]	; (c18 <main+0x30>)
     bec:	4798      	blx	r3
//	timer_start(&TIMER_0);
	while(!lmx.Init()){
     bee:	4d0b      	ldr	r5, [pc, #44]	; (c1c <main+0x34>)
     bf0:	4c0b      	ldr	r4, [pc, #44]	; (c20 <main+0x38>)
     bf2:	0028      	movs	r0, r5
     bf4:	47a0      	blx	r4
     bf6:	2800      	cmp	r0, #0
     bf8:	d104      	bne.n	c04 <main+0x1c>
		delay_ms(1000);
     bfa:	20fa      	movs	r0, #250	; 0xfa
     bfc:	0080      	lsls	r0, r0, #2
     bfe:	4b09      	ldr	r3, [pc, #36]	; (c24 <main+0x3c>)
     c00:	4798      	blx	r3
	while(!lmx.Init()){
     c02:	e7f6      	b.n	bf2 <main+0xa>
	}
//	gpio_set_pin_level(LED0,true);
    /* Replace with your application code */
    while (1) 
    {
		lmx.Self_Test();
     c04:	4e05      	ldr	r6, [pc, #20]	; (c1c <main+0x34>)
     c06:	4d08      	ldr	r5, [pc, #32]	; (c28 <main+0x40>)
		delay_ms(1000);
     c08:	4c06      	ldr	r4, [pc, #24]	; (c24 <main+0x3c>)
		lmx.Self_Test();
     c0a:	0030      	movs	r0, r6
     c0c:	47a8      	blx	r5
		delay_ms(1000);
     c0e:	20fa      	movs	r0, #250	; 0xfa
     c10:	0080      	lsls	r0, r0, #2
     c12:	47a0      	blx	r4
     c14:	e7f9      	b.n	c0a <main+0x22>
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00000cf1 	.word	0x00000cf1
     c1c:	20000270 	.word	0x20000270
     c20:	000008a5 	.word	0x000008a5
     c24:	00000e79 	.word	0x00000e79
     c28:	00000ae9 	.word	0x00000ae9

00000c2c <_GLOBAL__sub_I_lmx>:
    }
}
     c2c:	b510      	push	{r4, lr}
lmx2694_Handler lmx;
     c2e:	4c05      	ldr	r4, [pc, #20]	; (c44 <_GLOBAL__sub_I_lmx+0x18>)
     c30:	0020      	movs	r0, r4
     c32:	4b05      	ldr	r3, [pc, #20]	; (c48 <_GLOBAL__sub_I_lmx+0x1c>)
     c34:	4798      	blx	r3
     c36:	4a05      	ldr	r2, [pc, #20]	; (c4c <_GLOBAL__sub_I_lmx+0x20>)
     c38:	4905      	ldr	r1, [pc, #20]	; (c50 <_GLOBAL__sub_I_lmx+0x24>)
     c3a:	0020      	movs	r0, r4
     c3c:	4b05      	ldr	r3, [pc, #20]	; (c54 <_GLOBAL__sub_I_lmx+0x28>)
     c3e:	4798      	blx	r3
}
     c40:	bd10      	pop	{r4, pc}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	20000270 	.word	0x20000270
     c48:	00000215 	.word	0x00000215
     c4c:	20000000 	.word	0x20000000
     c50:	000001fd 	.word	0x000001fd
     c54:	00001519 	.word	0x00001519

00000c58 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor>:
//	SPI=SPI_1;
} //SPI_Syn_Class

SPI_Syn_Class::SPI_Syn_Class(spi_m_sync_descriptor * spiDesc)
{
	SPI=spiDesc;
     c58:	60c1      	str	r1, [r0, #12]
	ptrSPISync=this;
     c5a:	4b01      	ldr	r3, [pc, #4]	; (c60 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor+0x8>)
     c5c:	6018      	str	r0, [r3, #0]
} //SPI_Syn_Class
     c5e:	4770      	bx	lr
     c60:	200002c0 	.word	0x200002c0

00000c64 <_ZN13SPI_Syn_ClassD1Ev>:

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
     c64:	4770      	bx	lr
	...

00000c68 <_ZN13SPI_Syn_Class4InitEv>:

void SPI_Syn_Class::Init(){
     c68:	b510      	push	{r4, lr}
     c6a:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
     c6c:	0001      	movs	r1, r0
     c6e:	3110      	adds	r1, #16
     c70:	68c0      	ldr	r0, [r0, #12]
     c72:	4b06      	ldr	r3, [pc, #24]	; (c8c <_ZN13SPI_Syn_Class4InitEv+0x24>)
     c74:	4798      	blx	r3

	spi_m_sync_enable(SPI);
     c76:	68e0      	ldr	r0, [r4, #12]
     c78:	4b05      	ldr	r3, [pc, #20]	; (c90 <_ZN13SPI_Syn_Class4InitEv+0x28>)
     c7a:	4798      	blx	r3
		txBuffer=txStaticBuffer;
     c7c:	4b05      	ldr	r3, [pc, #20]	; (c94 <_ZN13SPI_Syn_Class4InitEv+0x2c>)
     c7e:	3304      	adds	r3, #4
     c80:	6063      	str	r3, [r4, #4]
		rxBuffer=txStaticBuffer;
     c82:	60a3      	str	r3, [r4, #8]
	ready=true;
     c84:	2301      	movs	r3, #1
     c86:	7023      	strb	r3, [r4, #0]
	
}
     c88:	bd10      	pop	{r4, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	00001049 	.word	0x00001049
     c90:	00000f61 	.word	0x00000f61
     c94:	200002c0 	.word	0x200002c0

00000c98 <_ZN13SPI_Syn_Class5WriteEPKhl>:
	spi_m_sync_enable(SPI);
	ready=true;
	return 0;
}

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
     c98:	b510      	push	{r4, lr}
     c9a:	0004      	movs	r4, r0
	int32_t w;
	wFlag=true;
     c9c:	2301      	movs	r3, #1
     c9e:	7603      	strb	r3, [r0, #24]
	w= io_write(spio,p,(uint16_t)n);
     ca0:	b292      	uxth	r2, r2
     ca2:	6900      	ldr	r0, [r0, #16]
     ca4:	4b03      	ldr	r3, [pc, #12]	; (cb4 <_ZN13SPI_Syn_Class5WriteEPKhl+0x1c>)
     ca6:	4798      	blx	r3
	wFlag=(bool)w;
     ca8:	0003      	movs	r3, r0
     caa:	1e5a      	subs	r2, r3, #1
     cac:	4193      	sbcs	r3, r2
     cae:	7623      	strb	r3, [r4, #24]
	 return w;
	
}
     cb0:	bd10      	pop	{r4, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	00000e99 	.word	0x00000e99

00000cb8 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
     cb8:	b510      	push	{r4, lr}
     cba:	0004      	movs	r4, r0
	int32_t r;
	rFlag=true;
     cbc:	2301      	movs	r3, #1
     cbe:	7643      	strb	r3, [r0, #25]
	r=io_read(spio,p,(uint16_t)n);
     cc0:	b292      	uxth	r2, r2
     cc2:	6900      	ldr	r0, [r0, #16]
     cc4:	4b03      	ldr	r3, [pc, #12]	; (cd4 <_ZN13SPI_Syn_Class4ReadEPhl+0x1c>)
     cc6:	4798      	blx	r3
	rFlag=(bool)r;
     cc8:	0003      	movs	r3, r0
     cca:	1e5a      	subs	r2, r3, #1
     ccc:	4193      	sbcs	r3, r2
     cce:	7663      	strb	r3, [r4, #25]
	return  r;
}
     cd0:	bd10      	pop	{r4, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000ed1 	.word	0x00000ed1

00000cd8 <_ZN13SPI_Syn_Class5SetCSEb>:
	if (level) {
     cd8:	2900      	cmp	r1, #0
     cda:	d104      	bne.n	ce6 <_ZN13SPI_Syn_Class5SetCSEb+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cdc:	2280      	movs	r2, #128	; 0x80
     cde:	23c0      	movs	r3, #192	; 0xc0
     ce0:	05db      	lsls	r3, r3, #23
     ce2:	615a      	str	r2, [r3, #20]
	spi_m_sync_disable(SPI);
	
}
void SPI_Syn_Class::SetCS(bool st){
	gpio_set_pin_level(lmx_CS,st);
}
     ce4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ce6:	2280      	movs	r2, #128	; 0x80
     ce8:	23c0      	movs	r3, #192	; 0xc0
     cea:	05db      	lsls	r3, r3, #23
     cec:	619a      	str	r2, [r3, #24]
     cee:	e7f9      	b.n	ce4 <_ZN13SPI_Syn_Class5SetCSEb+0xc>

00000cf0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     cf0:	b510      	push	{r4, lr}
	system_init();
     cf2:	4b01      	ldr	r3, [pc, #4]	; (cf8 <atmel_start_init+0x8>)
     cf4:	4798      	blx	r3
}
     cf6:	bd10      	pop	{r4, pc}
     cf8:	00000e01 	.word	0x00000e01

00000cfc <SPI_0_PORT_init>:
#include <hpl_pm_base.h>

struct spi_m_sync_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
     cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cfe:	46c6      	mov	lr, r8
     d00:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d02:	22c0      	movs	r2, #192	; 0xc0
     d04:	05d2      	lsls	r2, r2, #23
     d06:	2310      	movs	r3, #16
     d08:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d0a:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d0c:	4b25      	ldr	r3, [pc, #148]	; (da4 <SPI_0_PORT_init+0xa8>)
     d0e:	4926      	ldr	r1, [pc, #152]	; (da8 <SPI_0_PORT_init+0xac>)
     d10:	6299      	str	r1, [r3, #40]	; 0x28
     d12:	21c0      	movs	r1, #192	; 0xc0
     d14:	0609      	lsls	r1, r1, #24
     d16:	468c      	mov	ip, r1
     d18:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d1a:	2044      	movs	r0, #68	; 0x44
     d1c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d1e:	2701      	movs	r7, #1
     d20:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d22:	2601      	movs	r6, #1
     d24:	4331      	orrs	r1, r6
     d26:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d28:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d2a:	2132      	movs	r1, #50	; 0x32
     d2c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d2e:	250f      	movs	r5, #15
     d30:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     d32:	2403      	movs	r4, #3
     d34:	46a0      	mov	r8, r4
     d36:	4644      	mov	r4, r8
     d38:	4320      	orrs	r0, r4
     d3a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d3c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d3e:	2020      	movs	r0, #32
     d40:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d42:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d44:	4819      	ldr	r0, [pc, #100]	; (dac <SPI_0_PORT_init+0xb0>)
     d46:	6298      	str	r0, [r3, #40]	; 0x28
     d48:	4660      	mov	r0, ip
     d4a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d4c:	2045      	movs	r0, #69	; 0x45
     d4e:	4684      	mov	ip, r0
     d50:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d52:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d54:	4330      	orrs	r0, r6
     d56:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d58:	4664      	mov	r4, ip
     d5a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d5c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d5e:	3c36      	subs	r4, #54	; 0x36
     d60:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     d62:	2430      	movs	r4, #48	; 0x30
     d64:	46a4      	mov	ip, r4
     d66:	4664      	mov	r4, ip
     d68:	4320      	orrs	r0, r4
     d6a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d6c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     d6e:	310e      	adds	r1, #14
     d70:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d72:	4a0f      	ldr	r2, [pc, #60]	; (db0 <SPI_0_PORT_init+0xb4>)
     d74:	629a      	str	r2, [r3, #40]	; 0x28
     d76:	4a0f      	ldr	r2, [pc, #60]	; (db4 <SPI_0_PORT_init+0xb8>)
     d78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d7a:	2246      	movs	r2, #70	; 0x46
     d7c:	5c99      	ldrb	r1, [r3, r2]
     d7e:	2004      	movs	r0, #4
     d80:	4381      	bics	r1, r0
     d82:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d84:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     d86:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d88:	4331      	orrs	r1, r6
     d8a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d8c:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d8e:	2133      	movs	r1, #51	; 0x33
     d90:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d92:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     d94:	4640      	mov	r0, r8
     d96:	4302      	orrs	r2, r0
     d98:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d9a:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
}
     d9c:	bc04      	pop	{r2}
     d9e:	4690      	mov	r8, r2
     da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	41004400 	.word	0x41004400
     da8:	40000010 	.word	0x40000010
     dac:	40000020 	.word	0x40000020
     db0:	40020040 	.word	0x40020040
     db4:	c0020000 	.word	0xc0020000

00000db8 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     db8:	4a04      	ldr	r2, [pc, #16]	; (dcc <SPI_0_CLOCK_init+0x14>)
     dba:	6a13      	ldr	r3, [r2, #32]
     dbc:	2104      	movs	r1, #4
     dbe:	430b      	orrs	r3, r1
     dc0:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     dc2:	4a03      	ldr	r2, [pc, #12]	; (dd0 <SPI_0_CLOCK_init+0x18>)
     dc4:	4b03      	ldr	r3, [pc, #12]	; (dd4 <SPI_0_CLOCK_init+0x1c>)
     dc6:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     dc8:	4770      	bx	lr
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	40000400 	.word	0x40000400
     dd0:	00004014 	.word	0x00004014
     dd4:	40000c00 	.word	0x40000c00

00000dd8 <SPI_0_init>:

void SPI_0_init(void)
{
     dd8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <SPI_0_init+0x14>)
     ddc:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     dde:	4904      	ldr	r1, [pc, #16]	; (df0 <SPI_0_init+0x18>)
     de0:	4804      	ldr	r0, [pc, #16]	; (df4 <SPI_0_init+0x1c>)
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <SPI_0_init+0x20>)
     de4:	4798      	blx	r3
	SPI_0_PORT_init();
     de6:	4b05      	ldr	r3, [pc, #20]	; (dfc <SPI_0_init+0x24>)
     de8:	4798      	blx	r3
}
     dea:	bd10      	pop	{r4, pc}
     dec:	00000db9 	.word	0x00000db9
     df0:	42000800 	.word	0x42000800
     df4:	200002ec 	.word	0x200002ec
     df8:	00000f09 	.word	0x00000f09
     dfc:	00000cfd 	.word	0x00000cfd

00000e00 <system_init>:

void system_init(void)
{
     e00:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e02:	4b0a      	ldr	r3, [pc, #40]	; (e2c <system_init+0x2c>)
     e04:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e06:	23c0      	movs	r3, #192	; 0xc0
     e08:	05db      	lsls	r3, r3, #23
     e0a:	2280      	movs	r2, #128	; 0x80
     e0c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e0e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e10:	4b07      	ldr	r3, [pc, #28]	; (e30 <system_init+0x30>)
     e12:	4a08      	ldr	r2, [pc, #32]	; (e34 <system_init+0x34>)
     e14:	629a      	str	r2, [r3, #40]	; 0x28
     e16:	22c0      	movs	r2, #192	; 0xc0
     e18:	0612      	lsls	r2, r2, #24
     e1a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e1c:	2147      	movs	r1, #71	; 0x47
     e1e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     e20:	2001      	movs	r0, #1
     e22:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e24:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(lmx_CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(lmx_CS, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     e26:	4b04      	ldr	r3, [pc, #16]	; (e38 <system_init+0x38>)
     e28:	4798      	blx	r3
}
     e2a:	bd10      	pop	{r4, pc}
     e2c:	000010c5 	.word	0x000010c5
     e30:	41004400 	.word	0x41004400
     e34:	40000080 	.word	0x40000080
     e38:	00000dd9 	.word	0x00000dd9

00000e3c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e3c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     e40:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e42:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e44:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     e48:	4770      	bx	lr

00000e4a <atomic_leave_critical>:
     e4a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     e4e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e50:	f383 8810 	msr	PRIMASK, r3
}
     e54:	4770      	bx	lr
	...

00000e58 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     e58:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     e5a:	4b04      	ldr	r3, [pc, #16]	; (e6c <delay_us+0x14>)
     e5c:	681c      	ldr	r4, [r3, #0]
     e5e:	4b04      	ldr	r3, [pc, #16]	; (e70 <delay_us+0x18>)
     e60:	4798      	blx	r3
     e62:	0001      	movs	r1, r0
     e64:	0020      	movs	r0, r4
     e66:	4b03      	ldr	r3, [pc, #12]	; (e74 <delay_us+0x1c>)
     e68:	4798      	blx	r3
}
     e6a:	bd10      	pop	{r4, pc}
     e6c:	200002e4 	.word	0x200002e4
     e70:	00001081 	.word	0x00001081
     e74:	000010bd 	.word	0x000010bd

00000e78 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     e78:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     e7a:	4b04      	ldr	r3, [pc, #16]	; (e8c <delay_ms+0x14>)
     e7c:	681c      	ldr	r4, [r3, #0]
     e7e:	4b04      	ldr	r3, [pc, #16]	; (e90 <delay_ms+0x18>)
     e80:	4798      	blx	r3
     e82:	0001      	movs	r1, r0
     e84:	0020      	movs	r0, r4
     e86:	4b03      	ldr	r3, [pc, #12]	; (e94 <delay_ms+0x1c>)
     e88:	4798      	blx	r3
}
     e8a:	bd10      	pop	{r4, pc}
     e8c:	200002e4 	.word	0x200002e4
     e90:	0000109d 	.word	0x0000109d
     e94:	000010bd 	.word	0x000010bd

00000e98 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	0004      	movs	r4, r0
     e9c:	000d      	movs	r5, r1
     e9e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     ea0:	2800      	cmp	r0, #0
     ea2:	d00e      	beq.n	ec2 <io_write+0x2a>
     ea4:	2900      	cmp	r1, #0
     ea6:	d00a      	beq.n	ebe <io_write+0x26>
     ea8:	2001      	movs	r0, #1
     eaa:	2234      	movs	r2, #52	; 0x34
     eac:	4906      	ldr	r1, [pc, #24]	; (ec8 <io_write+0x30>)
     eae:	4b07      	ldr	r3, [pc, #28]	; (ecc <io_write+0x34>)
     eb0:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     eb2:	6823      	ldr	r3, [r4, #0]
     eb4:	0032      	movs	r2, r6
     eb6:	0029      	movs	r1, r5
     eb8:	0020      	movs	r0, r4
     eba:	4798      	blx	r3
}
     ebc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     ebe:	2000      	movs	r0, #0
     ec0:	e7f3      	b.n	eaa <io_write+0x12>
     ec2:	2000      	movs	r0, #0
     ec4:	e7f1      	b.n	eaa <io_write+0x12>
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	00002a20 	.word	0x00002a20
     ecc:	00001079 	.word	0x00001079

00000ed0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ed0:	b570      	push	{r4, r5, r6, lr}
     ed2:	0004      	movs	r4, r0
     ed4:	000d      	movs	r5, r1
     ed6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     ed8:	2800      	cmp	r0, #0
     eda:	d00e      	beq.n	efa <io_read+0x2a>
     edc:	2900      	cmp	r1, #0
     ede:	d00a      	beq.n	ef6 <io_read+0x26>
     ee0:	2001      	movs	r0, #1
     ee2:	223d      	movs	r2, #61	; 0x3d
     ee4:	4906      	ldr	r1, [pc, #24]	; (f00 <io_read+0x30>)
     ee6:	4b07      	ldr	r3, [pc, #28]	; (f04 <io_read+0x34>)
     ee8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     eea:	6863      	ldr	r3, [r4, #4]
     eec:	0032      	movs	r2, r6
     eee:	0029      	movs	r1, r5
     ef0:	0020      	movs	r0, r4
     ef2:	4798      	blx	r3
}
     ef4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     ef6:	2000      	movs	r0, #0
     ef8:	e7f3      	b.n	ee2 <io_read+0x12>
     efa:	2000      	movs	r0, #0
     efc:	e7f1      	b.n	ee2 <io_read+0x12>
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00002a20 	.word	0x00002a20
     f04:	00001079 	.word	0x00001079

00000f08 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	0004      	movs	r4, r0
     f0c:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     f0e:	2800      	cmp	r0, #0
     f10:	d017      	beq.n	f42 <spi_m_sync_init+0x3a>
     f12:	2900      	cmp	r1, #0
     f14:	d013      	beq.n	f3e <spi_m_sync_init+0x36>
     f16:	2001      	movs	r0, #1
     f18:	2240      	movs	r2, #64	; 0x40
     f1a:	490b      	ldr	r1, [pc, #44]	; (f48 <spi_m_sync_init+0x40>)
     f1c:	4b0b      	ldr	r3, [pc, #44]	; (f4c <spi_m_sync_init+0x44>)
     f1e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     f20:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     f22:	1d20      	adds	r0, r4, #4
     f24:	0029      	movs	r1, r5
     f26:	4b0a      	ldr	r3, [pc, #40]	; (f50 <spi_m_sync_init+0x48>)
     f28:	4798      	blx	r3

	if (rc < 0) {
     f2a:	2800      	cmp	r0, #0
     f2c:	db06      	blt.n	f3c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     f2e:	4b09      	ldr	r3, [pc, #36]	; (f54 <spi_m_sync_init+0x4c>)
     f30:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     f32:	4b09      	ldr	r3, [pc, #36]	; (f58 <spi_m_sync_init+0x50>)
     f34:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     f36:	4b09      	ldr	r3, [pc, #36]	; (f5c <spi_m_sync_init+0x54>)
     f38:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     f3a:	2000      	movs	r0, #0
}
     f3c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     f3e:	2000      	movs	r0, #0
     f40:	e7ea      	b.n	f18 <spi_m_sync_init+0x10>
     f42:	2000      	movs	r0, #0
     f44:	e7e8      	b.n	f18 <spi_m_sync_init+0x10>
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	00002a34 	.word	0x00002a34
     f4c:	00001079 	.word	0x00001079
     f50:	00001181 	.word	0x00001181
     f54:	ffff8000 	.word	0xffff8000
     f58:	0000100d 	.word	0x0000100d
     f5c:	00000fd1 	.word	0x00000fd1

00000f60 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     f60:	b510      	push	{r4, lr}
     f62:	0004      	movs	r4, r0
	ASSERT(spi);
     f64:	1e43      	subs	r3, r0, #1
     f66:	4198      	sbcs	r0, r3
     f68:	b2c0      	uxtb	r0, r0
     f6a:	2257      	movs	r2, #87	; 0x57
     f6c:	4903      	ldr	r1, [pc, #12]	; (f7c <spi_m_sync_enable+0x1c>)
     f6e:	4b04      	ldr	r3, [pc, #16]	; (f80 <spi_m_sync_enable+0x20>)
     f70:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     f72:	1d20      	adds	r0, r4, #4
     f74:	4b03      	ldr	r3, [pc, #12]	; (f84 <spi_m_sync_enable+0x24>)
     f76:	4798      	blx	r3
}
     f78:	bd10      	pop	{r4, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00002a34 	.word	0x00002a34
     f80:	00001079 	.word	0x00001079
     f84:	0000137d 	.word	0x0000137d

00000f88 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     f88:	b530      	push	{r4, r5, lr}
     f8a:	b087      	sub	sp, #28
     f8c:	0004      	movs	r4, r0
     f8e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     f90:	2800      	cmp	r0, #0
     f92:	d015      	beq.n	fc0 <spi_m_sync_transfer+0x38>
     f94:	2900      	cmp	r1, #0
     f96:	d011      	beq.n	fbc <spi_m_sync_transfer+0x34>
     f98:	2001      	movs	r0, #1
     f9a:	22b3      	movs	r2, #179	; 0xb3
     f9c:	4909      	ldr	r1, [pc, #36]	; (fc4 <spi_m_sync_transfer+0x3c>)
     f9e:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <spi_m_sync_transfer+0x40>)
     fa0:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     fa2:	682b      	ldr	r3, [r5, #0]
     fa4:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     fa6:	686b      	ldr	r3, [r5, #4]
     fa8:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     faa:	68ab      	ldr	r3, [r5, #8]
     fac:	9301      	str	r3, [sp, #4]
     fae:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     fb0:	1d20      	adds	r0, r4, #4
     fb2:	a903      	add	r1, sp, #12
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <spi_m_sync_transfer+0x44>)
     fb6:	4798      	blx	r3
}
     fb8:	b007      	add	sp, #28
     fba:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     fbc:	2000      	movs	r0, #0
     fbe:	e7ec      	b.n	f9a <spi_m_sync_transfer+0x12>
     fc0:	2000      	movs	r0, #0
     fc2:	e7ea      	b.n	f9a <spi_m_sync_transfer+0x12>
     fc4:	00002a34 	.word	0x00002a34
     fc8:	00001079 	.word	0x00001079
     fcc:	000013b1 	.word	0x000013b1

00000fd0 <_spi_m_sync_io_write>:
{
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	b084      	sub	sp, #16
     fd4:	0004      	movs	r4, r0
     fd6:	000e      	movs	r6, r1
     fd8:	0015      	movs	r5, r2
	ASSERT(io);
     fda:	1e43      	subs	r3, r0, #1
     fdc:	4198      	sbcs	r0, r3
     fde:	b2c0      	uxtb	r0, r0
     fe0:	22a3      	movs	r2, #163	; 0xa3
     fe2:	4907      	ldr	r1, [pc, #28]	; (1000 <_spi_m_sync_io_write+0x30>)
     fe4:	4b07      	ldr	r3, [pc, #28]	; (1004 <_spi_m_sync_io_write+0x34>)
     fe6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     fe8:	0020      	movs	r0, r4
     fea:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     fec:	2300      	movs	r3, #0
     fee:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     ff0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     ff2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     ff4:	a901      	add	r1, sp, #4
     ff6:	4b04      	ldr	r3, [pc, #16]	; (1008 <_spi_m_sync_io_write+0x38>)
     ff8:	4798      	blx	r3
}
     ffa:	b004      	add	sp, #16
     ffc:	bd70      	pop	{r4, r5, r6, pc}
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	00002a34 	.word	0x00002a34
    1004:	00001079 	.word	0x00001079
    1008:	00000f89 	.word	0x00000f89

0000100c <_spi_m_sync_io_read>:
{
    100c:	b570      	push	{r4, r5, r6, lr}
    100e:	b084      	sub	sp, #16
    1010:	0004      	movs	r4, r0
    1012:	000e      	movs	r6, r1
    1014:	0015      	movs	r5, r2
	ASSERT(io);
    1016:	1e43      	subs	r3, r0, #1
    1018:	4198      	sbcs	r0, r3
    101a:	b2c0      	uxtb	r0, r0
    101c:	2287      	movs	r2, #135	; 0x87
    101e:	4907      	ldr	r1, [pc, #28]	; (103c <_spi_m_sync_io_read+0x30>)
    1020:	4b07      	ldr	r3, [pc, #28]	; (1040 <_spi_m_sync_io_read+0x34>)
    1022:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1024:	0020      	movs	r0, r4
    1026:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    1028:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    102a:	2300      	movs	r3, #0
    102c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    102e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1030:	a901      	add	r1, sp, #4
    1032:	4b04      	ldr	r3, [pc, #16]	; (1044 <_spi_m_sync_io_read+0x38>)
    1034:	4798      	blx	r3
}
    1036:	b004      	add	sp, #16
    1038:	bd70      	pop	{r4, r5, r6, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	00002a34 	.word	0x00002a34
    1040:	00001079 	.word	0x00001079
    1044:	00000f89 	.word	0x00000f89

00001048 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	0004      	movs	r4, r0
    104c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    104e:	2800      	cmp	r0, #0
    1050:	d00c      	beq.n	106c <spi_m_sync_get_io_descriptor+0x24>
    1052:	2900      	cmp	r1, #0
    1054:	d008      	beq.n	1068 <spi_m_sync_get_io_descriptor+0x20>
    1056:	2001      	movs	r0, #1
    1058:	22bd      	movs	r2, #189	; 0xbd
    105a:	4905      	ldr	r1, [pc, #20]	; (1070 <spi_m_sync_get_io_descriptor+0x28>)
    105c:	4b05      	ldr	r3, [pc, #20]	; (1074 <spi_m_sync_get_io_descriptor+0x2c>)
    105e:	4798      	blx	r3
	*io = &spi->io;
    1060:	340c      	adds	r4, #12
    1062:	602c      	str	r4, [r5, #0]
	return 0;
}
    1064:	2000      	movs	r0, #0
    1066:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    1068:	2000      	movs	r0, #0
    106a:	e7f5      	b.n	1058 <spi_m_sync_get_io_descriptor+0x10>
    106c:	2000      	movs	r0, #0
    106e:	e7f3      	b.n	1058 <spi_m_sync_get_io_descriptor+0x10>
    1070:	00002a34 	.word	0x00002a34
    1074:	00001079 	.word	0x00001079

00001078 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1078:	2800      	cmp	r0, #0
    107a:	d100      	bne.n	107e <assert+0x6>
		__asm("BKPT #0");
    107c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    107e:	4770      	bx	lr

00001080 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    1080:	b510      	push	{r4, lr}
    1082:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
    1084:	20c8      	movs	r0, #200	; 0xc8
    1086:	0080      	lsls	r0, r0, #2
    1088:	4358      	muls	r0, r3
    108a:	302c      	adds	r0, #44	; 0x2c
    108c:	30ff      	adds	r0, #255	; 0xff
    108e:	2196      	movs	r1, #150	; 0x96
    1090:	0049      	lsls	r1, r1, #1
    1092:	4b01      	ldr	r3, [pc, #4]	; (1098 <_get_cycles_for_us+0x18>)
    1094:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1096:	bd10      	pop	{r4, pc}
    1098:	0000161d 	.word	0x0000161d

0000109c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    109c:	b510      	push	{r4, lr}
    109e:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    10a0:	20c8      	movs	r0, #200	; 0xc8
    10a2:	0080      	lsls	r0, r0, #2
    10a4:	4358      	muls	r0, r3
    10a6:	3002      	adds	r0, #2
    10a8:	2103      	movs	r1, #3
    10aa:	4b03      	ldr	r3, [pc, #12]	; (10b8 <_get_cycles_for_ms+0x1c>)
    10ac:	4798      	blx	r3
    10ae:	0083      	lsls	r3, r0, #2
    10b0:	181b      	adds	r3, r3, r0
    10b2:	0058      	lsls	r0, r3, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    10b4:	bd10      	pop	{r4, pc}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	0000161d 	.word	0x0000161d

000010bc <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    10bc:	3901      	subs	r1, #1
    10be:	d8fd      	bhi.n	10bc <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    10c0:	4770      	bx	lr
	...

000010c4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    10c4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    10c6:	4b06      	ldr	r3, [pc, #24]	; (10e0 <_init_chip+0x1c>)
    10c8:	685a      	ldr	r2, [r3, #4]
    10ca:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    10cc:	4b05      	ldr	r3, [pc, #20]	; (10e4 <_init_chip+0x20>)
    10ce:	4798      	blx	r3
	_sysctrl_init_sources();
    10d0:	4b05      	ldr	r3, [pc, #20]	; (10e8 <_init_chip+0x24>)
    10d2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    10d4:	4b05      	ldr	r3, [pc, #20]	; (10ec <_init_chip+0x28>)
    10d6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    10d8:	20ff      	movs	r0, #255	; 0xff
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <_init_chip+0x2c>)
    10dc:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    10de:	bd10      	pop	{r4, pc}
    10e0:	41004000 	.word	0x41004000
    10e4:	00001131 	.word	0x00001131
    10e8:	000014c5 	.word	0x000014c5
    10ec:	00001509 	.word	0x00001509
    10f0:	000010f5 	.word	0x000010f5

000010f4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10f4:	07c3      	lsls	r3, r0, #31
    10f6:	d50a      	bpl.n	110e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    10f8:	4b0b      	ldr	r3, [pc, #44]	; (1128 <_gclk_init_generators_by_fref+0x34>)
    10fa:	2280      	movs	r2, #128	; 0x80
    10fc:	0052      	lsls	r2, r2, #1
    10fe:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1100:	2283      	movs	r2, #131	; 0x83
    1102:	0252      	lsls	r2, r2, #9
    1104:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1106:	4b08      	ldr	r3, [pc, #32]	; (1128 <_gclk_init_generators_by_fref+0x34>)
    1108:	785b      	ldrb	r3, [r3, #1]
    110a:	09db      	lsrs	r3, r3, #7
    110c:	d1fb      	bne.n	1106 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    110e:	0603      	lsls	r3, r0, #24
    1110:	d509      	bpl.n	1126 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    1112:	4b05      	ldr	r3, [pc, #20]	; (1128 <_gclk_init_generators_by_fref+0x34>)
    1114:	2208      	movs	r2, #8
    1116:	32ff      	adds	r2, #255	; 0xff
    1118:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    111a:	4a04      	ldr	r2, [pc, #16]	; (112c <_gclk_init_generators_by_fref+0x38>)
    111c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <_gclk_init_generators_by_fref+0x34>)
    1120:	785b      	ldrb	r3, [r3, #1]
    1122:	09db      	lsrs	r3, r3, #7
    1124:	d1fb      	bne.n	111e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    1126:	4770      	bx	lr
    1128:	40000c00 	.word	0x40000c00
    112c:	00090307 	.word	0x00090307

00001130 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1130:	4b06      	ldr	r3, [pc, #24]	; (114c <_pm_init+0x1c>)
    1132:	7a1a      	ldrb	r2, [r3, #8]
    1134:	b2d2      	uxtb	r2, r2
    1136:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1138:	7a5a      	ldrb	r2, [r3, #9]
    113a:	b2d2      	uxtb	r2, r2
    113c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    113e:	7a9a      	ldrb	r2, [r3, #10]
    1140:	b2d2      	uxtb	r2, r2
    1142:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    1144:	7ada      	ldrb	r2, [r3, #11]
    1146:	b2d2      	uxtb	r2, r2
    1148:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    114a:	4770      	bx	lr
    114c:	40000400 	.word	0x40000400

00001150 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1150:	4b02      	ldr	r3, [pc, #8]	; (115c <_sercom_get_hardware_index+0xc>)
    1152:	469c      	mov	ip, r3
    1154:	4460      	add	r0, ip
    1156:	0a80      	lsrs	r0, r0, #10
    1158:	b2c0      	uxtb	r0, r0
}
    115a:	4770      	bx	lr
    115c:	bdfff800 	.word	0xbdfff800

00001160 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1160:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1162:	07db      	lsls	r3, r3, #31
    1164:	d408      	bmi.n	1178 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1166:	6803      	ldr	r3, [r0, #0]
    1168:	2202      	movs	r2, #2
    116a:	4313      	orrs	r3, r2
    116c:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    116e:	69c3      	ldr	r3, [r0, #28]
    1170:	079b      	lsls	r3, r3, #30
    1172:	d1fc      	bne.n	116e <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1174:	2000      	movs	r0, #0
}
    1176:	4770      	bx	lr
		return ERR_BUSY;
    1178:	2004      	movs	r0, #4
    117a:	4240      	negs	r0, r0
    117c:	e7fb      	b.n	1176 <_spi_sync_enable+0x16>
	...

00001180 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	0006      	movs	r6, r0
    1184:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1186:	0008      	movs	r0, r1
    1188:	4b71      	ldr	r3, [pc, #452]	; (1350 <_spi_m_sync_init+0x1d0>)
    118a:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    118c:	2300      	movs	r3, #0
    118e:	2b00      	cmp	r3, #0
    1190:	d100      	bne.n	1194 <_spi_m_sync_init+0x14>
    1192:	e084      	b.n	129e <_spi_m_sync_init+0x11e>
	return NULL;
    1194:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1196:	2e00      	cmp	r6, #0
    1198:	d100      	bne.n	119c <_spi_m_sync_init+0x1c>
    119a:	e08d      	b.n	12b8 <_spi_m_sync_init+0x138>
    119c:	2c00      	cmp	r4, #0
    119e:	d100      	bne.n	11a2 <_spi_m_sync_init+0x22>
    11a0:	e088      	b.n	12b4 <_spi_m_sync_init+0x134>
    11a2:	2001      	movs	r0, #1
    11a4:	4a6b      	ldr	r2, [pc, #428]	; (1354 <_spi_m_sync_init+0x1d4>)
    11a6:	496c      	ldr	r1, [pc, #432]	; (1358 <_spi_m_sync_init+0x1d8>)
    11a8:	4b6c      	ldr	r3, [pc, #432]	; (135c <_spi_m_sync_init+0x1dc>)
    11aa:	4798      	blx	r3

	if (regs == NULL) {
    11ac:	2d00      	cmp	r5, #0
    11ae:	d100      	bne.n	11b2 <_spi_m_sync_init+0x32>
    11b0:	e0cb      	b.n	134a <_spi_m_sync_init+0x1ca>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    11b2:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    11b4:	07db      	lsls	r3, r3, #31
    11b6:	d421      	bmi.n	11fc <_spi_m_sync_init+0x7c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    11b8:	782a      	ldrb	r2, [r5, #0]
    11ba:	786b      	ldrb	r3, [r5, #1]
    11bc:	021b      	lsls	r3, r3, #8
    11be:	4313      	orrs	r3, r2
    11c0:	78aa      	ldrb	r2, [r5, #2]
    11c2:	0412      	lsls	r2, r2, #16
    11c4:	4313      	orrs	r3, r2
    11c6:	78ea      	ldrb	r2, [r5, #3]
    11c8:	0612      	lsls	r2, r2, #24
    11ca:	431a      	orrs	r2, r3
    11cc:	231c      	movs	r3, #28
    11ce:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11d0:	69e3      	ldr	r3, [r4, #28]
    11d2:	079b      	lsls	r3, r3, #30
    11d4:	d1fc      	bne.n	11d0 <_spi_m_sync_init+0x50>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    11d6:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    11d8:	079b      	lsls	r3, r3, #30
    11da:	d509      	bpl.n	11f0 <_spi_m_sync_init+0x70>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    11dc:	6823      	ldr	r3, [r4, #0]
    11de:	2102      	movs	r1, #2
    11e0:	438b      	bics	r3, r1
    11e2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11e4:	69e3      	ldr	r3, [r4, #28]
    11e6:	079b      	lsls	r3, r3, #30
    11e8:	d1fc      	bne.n	11e4 <_spi_m_sync_init+0x64>
    11ea:	69e3      	ldr	r3, [r4, #28]
    11ec:	079b      	lsls	r3, r3, #30
    11ee:	d4fc      	bmi.n	11ea <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    11f0:	2301      	movs	r3, #1
    11f2:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    11f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11f6:	69e3      	ldr	r3, [r4, #28]
    11f8:	079b      	lsls	r3, r3, #30
    11fa:	d1fc      	bne.n	11f6 <_spi_m_sync_init+0x76>
    11fc:	69e3      	ldr	r3, [r4, #28]
    11fe:	07db      	lsls	r3, r3, #31
    1200:	d4fc      	bmi.n	11fc <_spi_m_sync_init+0x7c>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1202:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1204:	782b      	ldrb	r3, [r5, #0]
    1206:	786a      	ldrb	r2, [r5, #1]
    1208:	0212      	lsls	r2, r2, #8
    120a:	431a      	orrs	r2, r3
    120c:	78ab      	ldrb	r3, [r5, #2]
    120e:	041b      	lsls	r3, r3, #16
    1210:	431a      	orrs	r2, r3
    1212:	78eb      	ldrb	r3, [r5, #3]
    1214:	061b      	lsls	r3, r3, #24
    1216:	4313      	orrs	r3, r2
    1218:	221c      	movs	r2, #28
    121a:	4013      	ands	r3, r2
    121c:	2b08      	cmp	r3, #8
    121e:	d04d      	beq.n	12bc <_spi_m_sync_init+0x13c>
	ASSERT(hw && regs);
    1220:	2c00      	cmp	r4, #0
    1222:	d100      	bne.n	1226 <_spi_m_sync_init+0xa6>
    1224:	e08d      	b.n	1342 <_spi_m_sync_init+0x1c2>
    1226:	2d00      	cmp	r5, #0
    1228:	d100      	bne.n	122c <_spi_m_sync_init+0xac>
    122a:	e088      	b.n	133e <_spi_m_sync_init+0x1be>
    122c:	2001      	movs	r0, #1
    122e:	4a4c      	ldr	r2, [pc, #304]	; (1360 <_spi_m_sync_init+0x1e0>)
    1230:	4949      	ldr	r1, [pc, #292]	; (1358 <_spi_m_sync_init+0x1d8>)
    1232:	4b4a      	ldr	r3, [pc, #296]	; (135c <_spi_m_sync_init+0x1dc>)
    1234:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1236:	782b      	ldrb	r3, [r5, #0]
    1238:	786a      	ldrb	r2, [r5, #1]
    123a:	0212      	lsls	r2, r2, #8
    123c:	431a      	orrs	r2, r3
    123e:	78ab      	ldrb	r3, [r5, #2]
    1240:	041b      	lsls	r3, r3, #16
    1242:	431a      	orrs	r2, r3
    1244:	78eb      	ldrb	r3, [r5, #3]
    1246:	061b      	lsls	r3, r3, #24
    1248:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    124a:	4a46      	ldr	r2, [pc, #280]	; (1364 <_spi_m_sync_init+0x1e4>)
    124c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    124e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1250:	69e3      	ldr	r3, [r4, #28]
    1252:	079b      	lsls	r3, r3, #30
    1254:	d1fc      	bne.n	1250 <_spi_m_sync_init+0xd0>
	    (regs->ctrlb
    1256:	792b      	ldrb	r3, [r5, #4]
    1258:	796a      	ldrb	r2, [r5, #5]
    125a:	0212      	lsls	r2, r2, #8
    125c:	431a      	orrs	r2, r3
    125e:	79ab      	ldrb	r3, [r5, #6]
    1260:	041b      	lsls	r3, r3, #16
    1262:	431a      	orrs	r2, r3
    1264:	79eb      	ldrb	r3, [r5, #7]
    1266:	061b      	lsls	r3, r3, #24
    1268:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    126a:	4a3f      	ldr	r2, [pc, #252]	; (1368 <_spi_m_sync_init+0x1e8>)
    126c:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	0292      	lsls	r2, r2, #10
    1272:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1274:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1276:	69e3      	ldr	r3, [r4, #28]
    1278:	075b      	lsls	r3, r3, #29
    127a:	d1fc      	bne.n	1276 <_spi_m_sync_init+0xf6>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    127c:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    127e:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1280:	7b6a      	ldrb	r2, [r5, #13]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1282:	2330      	movs	r3, #48	; 0x30
    1284:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1286:	792b      	ldrb	r3, [r5, #4]
    1288:	075b      	lsls	r3, r3, #29
    128a:	d15c      	bne.n	1346 <_spi_m_sync_init+0x1c6>
    128c:	2301      	movs	r3, #1
    128e:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1290:	7baa      	ldrb	r2, [r5, #14]
    1292:	7beb      	ldrb	r3, [r5, #15]
    1294:	021b      	lsls	r3, r3, #8
    1296:	4313      	orrs	r3, r2
    1298:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    129a:	2000      	movs	r0, #0
}
    129c:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
    129e:	2800      	cmp	r0, #0
    12a0:	d002      	beq.n	12a8 <_spi_m_sync_init+0x128>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    12a2:	3301      	adds	r3, #1
    12a4:	b2db      	uxtb	r3, r3
    12a6:	e772      	b.n	118e <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    12a8:	011d      	lsls	r5, r3, #4
    12aa:	18ea      	adds	r2, r5, r3
    12ac:	4d2f      	ldr	r5, [pc, #188]	; (136c <_spi_m_sync_init+0x1ec>)
    12ae:	353c      	adds	r5, #60	; 0x3c
    12b0:	18ad      	adds	r5, r5, r2
    12b2:	e770      	b.n	1196 <_spi_m_sync_init+0x16>
	ASSERT(dev && hw);
    12b4:	2000      	movs	r0, #0
    12b6:	e775      	b.n	11a4 <_spi_m_sync_init+0x24>
    12b8:	2000      	movs	r0, #0
    12ba:	e773      	b.n	11a4 <_spi_m_sync_init+0x24>
	ASSERT(hw && regs);
    12bc:	2c00      	cmp	r4, #0
    12be:	d03c      	beq.n	133a <_spi_m_sync_init+0x1ba>
    12c0:	2d00      	cmp	r5, #0
    12c2:	d038      	beq.n	1336 <_spi_m_sync_init+0x1b6>
    12c4:	2001      	movs	r0, #1
    12c6:	4a2a      	ldr	r2, [pc, #168]	; (1370 <_spi_m_sync_init+0x1f0>)
    12c8:	4923      	ldr	r1, [pc, #140]	; (1358 <_spi_m_sync_init+0x1d8>)
    12ca:	4b24      	ldr	r3, [pc, #144]	; (135c <_spi_m_sync_init+0x1dc>)
    12cc:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    12ce:	782b      	ldrb	r3, [r5, #0]
    12d0:	786a      	ldrb	r2, [r5, #1]
    12d2:	0212      	lsls	r2, r2, #8
    12d4:	431a      	orrs	r2, r3
    12d6:	78ab      	ldrb	r3, [r5, #2]
    12d8:	041b      	lsls	r3, r3, #16
    12da:	431a      	orrs	r2, r3
    12dc:	78eb      	ldrb	r3, [r5, #3]
    12de:	061b      	lsls	r3, r3, #24
    12e0:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    12e2:	4a20      	ldr	r2, [pc, #128]	; (1364 <_spi_m_sync_init+0x1e4>)
    12e4:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12e8:	69e3      	ldr	r3, [r4, #28]
    12ea:	079b      	lsls	r3, r3, #30
    12ec:	d1fc      	bne.n	12e8 <_spi_m_sync_init+0x168>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    12ee:	792b      	ldrb	r3, [r5, #4]
    12f0:	796a      	ldrb	r2, [r5, #5]
    12f2:	0212      	lsls	r2, r2, #8
    12f4:	431a      	orrs	r2, r3
    12f6:	79ab      	ldrb	r3, [r5, #6]
    12f8:	041b      	lsls	r3, r3, #16
    12fa:	431a      	orrs	r2, r3
    12fc:	79eb      	ldrb	r3, [r5, #7]
    12fe:	061b      	lsls	r3, r3, #24
    1300:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1302:	4a1c      	ldr	r2, [pc, #112]	; (1374 <_spi_m_sync_init+0x1f4>)
    1304:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1306:	4a1c      	ldr	r2, [pc, #112]	; (1378 <_spi_m_sync_init+0x1f8>)
    1308:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    130a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    130c:	69e3      	ldr	r3, [r4, #28]
    130e:	075b      	lsls	r3, r3, #29
    1310:	d1fc      	bne.n	130c <_spi_m_sync_init+0x18c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1312:	7a2b      	ldrb	r3, [r5, #8]
    1314:	7a6a      	ldrb	r2, [r5, #9]
    1316:	0212      	lsls	r2, r2, #8
    1318:	431a      	orrs	r2, r3
    131a:	7aab      	ldrb	r3, [r5, #10]
    131c:	041b      	lsls	r3, r3, #16
    131e:	431a      	orrs	r2, r3
    1320:	7aeb      	ldrb	r3, [r5, #11]
    1322:	061b      	lsls	r3, r3, #24
    1324:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1326:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1328:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    132a:	2330      	movs	r3, #48	; 0x30
    132c:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    132e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1330:	2b00      	cmp	r3, #0
    1332:	d1fc      	bne.n	132e <_spi_m_sync_init+0x1ae>
    1334:	e7a7      	b.n	1286 <_spi_m_sync_init+0x106>
	ASSERT(hw && regs);
    1336:	2000      	movs	r0, #0
    1338:	e7c5      	b.n	12c6 <_spi_m_sync_init+0x146>
    133a:	2000      	movs	r0, #0
    133c:	e7c3      	b.n	12c6 <_spi_m_sync_init+0x146>
	ASSERT(hw && regs);
    133e:	2000      	movs	r0, #0
    1340:	e775      	b.n	122e <_spi_m_sync_init+0xae>
    1342:	2000      	movs	r0, #0
    1344:	e773      	b.n	122e <_spi_m_sync_init+0xae>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1346:	2302      	movs	r3, #2
    1348:	e7a1      	b.n	128e <_spi_m_sync_init+0x10e>
		return ERR_INVALID_ARG;
    134a:	200d      	movs	r0, #13
    134c:	4240      	negs	r0, r0
    134e:	e7a5      	b.n	129c <_spi_m_sync_init+0x11c>
    1350:	00001151 	.word	0x00001151
    1354:	00000925 	.word	0x00000925
    1358:	00002aa0 	.word	0x00002aa0
    135c:	00001079 	.word	0x00001079
    1360:	000008ef 	.word	0x000008ef
    1364:	fffffefc 	.word	0xfffffefc
    1368:	fffd1dbf 	.word	0xfffd1dbf
    136c:	00002a50 	.word	0x00002a50
    1370:	00000903 	.word	0x00000903
    1374:	fffdddbf 	.word	0xfffdddbf
    1378:	00020240 	.word	0x00020240

0000137c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    137c:	b510      	push	{r4, lr}
    137e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1380:	d00e      	beq.n	13a0 <_spi_m_sync_enable+0x24>
    1382:	6803      	ldr	r3, [r0, #0]
    1384:	2b00      	cmp	r3, #0
    1386:	d009      	beq.n	139c <_spi_m_sync_enable+0x20>
    1388:	2001      	movs	r0, #1
    138a:	2298      	movs	r2, #152	; 0x98
    138c:	0112      	lsls	r2, r2, #4
    138e:	4905      	ldr	r1, [pc, #20]	; (13a4 <_spi_m_sync_enable+0x28>)
    1390:	4b05      	ldr	r3, [pc, #20]	; (13a8 <_spi_m_sync_enable+0x2c>)
    1392:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1394:	6820      	ldr	r0, [r4, #0]
    1396:	4b05      	ldr	r3, [pc, #20]	; (13ac <_spi_m_sync_enable+0x30>)
    1398:	4798      	blx	r3
}
    139a:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    139c:	2000      	movs	r0, #0
    139e:	e7f4      	b.n	138a <_spi_m_sync_enable+0xe>
    13a0:	2000      	movs	r0, #0
    13a2:	e7f2      	b.n	138a <_spi_m_sync_enable+0xe>
    13a4:	00002aa0 	.word	0x00002aa0
    13a8:	00001079 	.word	0x00001079
    13ac:	00001161 	.word	0x00001161

000013b0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b2:	46ce      	mov	lr, r9
    13b4:	4647      	mov	r7, r8
    13b6:	b580      	push	{r7, lr}
    13b8:	b089      	sub	sp, #36	; 0x24
    13ba:	4681      	mov	r9, r0
    13bc:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    13be:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    13c0:	680b      	ldr	r3, [r1, #0]
    13c2:	9303      	str	r3, [sp, #12]
    13c4:	684b      	ldr	r3, [r1, #4]
    13c6:	9304      	str	r3, [sp, #16]
    13c8:	2300      	movs	r3, #0
    13ca:	9305      	str	r3, [sp, #20]
    13cc:	9306      	str	r3, [sp, #24]
    13ce:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    13d0:	2800      	cmp	r0, #0
    13d2:	d014      	beq.n	13fe <_spi_m_sync_trans+0x4e>
    13d4:	2c00      	cmp	r4, #0
    13d6:	d010      	beq.n	13fa <_spi_m_sync_trans+0x4a>
    13d8:	2001      	movs	r0, #1
    13da:	4a37      	ldr	r2, [pc, #220]	; (14b8 <_spi_m_sync_trans+0x108>)
    13dc:	4937      	ldr	r1, [pc, #220]	; (14bc <_spi_m_sync_trans+0x10c>)
    13de:	4b38      	ldr	r3, [pc, #224]	; (14c0 <_spi_m_sync_trans+0x110>)
    13e0:	4798      	blx	r3
    13e2:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    13e4:	075b      	lsls	r3, r3, #29
    13e6:	d164      	bne.n	14b2 <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13e8:	69e3      	ldr	r3, [r4, #28]
    13ea:	079b      	lsls	r3, r3, #30
    13ec:	d1fc      	bne.n	13e8 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    13ee:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    13f0:	079b      	lsls	r3, r3, #30
    13f2:	d420      	bmi.n	1436 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    13f4:	2014      	movs	r0, #20
    13f6:	4240      	negs	r0, r0
    13f8:	e056      	b.n	14a8 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    13fa:	2000      	movs	r0, #0
    13fc:	e7ed      	b.n	13da <_spi_m_sync_trans+0x2a>
    13fe:	2000      	movs	r0, #0
    1400:	e7eb      	b.n	13da <_spi_m_sync_trans+0x2a>
		return false;
    1402:	2200      	movs	r2, #0
    1404:	e02d      	b.n	1462 <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    1406:	7848      	ldrb	r0, [r1, #1]
    1408:	0200      	lsls	r0, r0, #8
    140a:	4647      	mov	r7, r8
    140c:	4307      	orrs	r7, r0
    140e:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1410:	3102      	adds	r1, #2
    1412:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    1414:	3201      	adds	r2, #1
    1416:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1418:	4642      	mov	r2, r8
    141a:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    141c:	b25b      	sxtb	r3, r3
    141e:	2b00      	cmp	r3, #0
    1420:	db35      	blt.n	148e <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    1422:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    1424:	2800      	cmp	r0, #0
    1426:	db3a      	blt.n	149e <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1428:	9805      	ldr	r0, [sp, #20]
    142a:	68ab      	ldr	r3, [r5, #8]
    142c:	4298      	cmp	r0, r3
    142e:	d302      	bcc.n	1436 <_spi_m_sync_trans+0x86>
    1430:	9a06      	ldr	r2, [sp, #24]
    1432:	4293      	cmp	r3, r2
    1434:	d933      	bls.n	149e <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1436:	7e23      	ldrb	r3, [r4, #24]
    1438:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    143a:	075a      	lsls	r2, r3, #29
    143c:	d5e1      	bpl.n	1402 <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    143e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1440:	9a04      	ldr	r2, [sp, #16]
    1442:	2a00      	cmp	r2, #0
    1444:	d008      	beq.n	1458 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    1446:	1c50      	adds	r0, r2, #1
    1448:	9004      	str	r0, [sp, #16]
    144a:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    144c:	2e01      	cmp	r6, #1
    144e:	d903      	bls.n	1458 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1450:	1c90      	adds	r0, r2, #2
    1452:	9004      	str	r0, [sp, #16]
    1454:	0a09      	lsrs	r1, r1, #8
    1456:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    1458:	9a06      	ldr	r2, [sp, #24]
    145a:	9201      	str	r2, [sp, #4]
    145c:	3201      	adds	r2, #1
    145e:	9206      	str	r2, [sp, #24]
	return true;
    1460:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    1462:	2a00      	cmp	r2, #0
    1464:	d1da      	bne.n	141c <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1466:	9906      	ldr	r1, [sp, #24]
    1468:	9a05      	ldr	r2, [sp, #20]
    146a:	4291      	cmp	r1, r2
    146c:	d3d6      	bcc.n	141c <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    146e:	4649      	mov	r1, r9
    1470:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1472:	07d9      	lsls	r1, r3, #31
    1474:	d5d2      	bpl.n	141c <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    1476:	9903      	ldr	r1, [sp, #12]
    1478:	2900      	cmp	r1, #0
    147a:	d006      	beq.n	148a <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    147c:	1c48      	adds	r0, r1, #1
    147e:	9003      	str	r0, [sp, #12]
    1480:	7808      	ldrb	r0, [r1, #0]
    1482:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    1484:	2e01      	cmp	r6, #1
    1486:	d8be      	bhi.n	1406 <_spi_m_sync_trans+0x56>
    1488:	e7c4      	b.n	1414 <_spi_m_sync_trans+0x64>
		data = dummy;
    148a:	4680      	mov	r8, r0
    148c:	e7c2      	b.n	1414 <_spi_m_sync_trans+0x64>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    148e:	2301      	movs	r3, #1
    1490:	425b      	negs	r3, r3
    1492:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1494:	3381      	adds	r3, #129	; 0x81
    1496:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1498:	2013      	movs	r0, #19
    149a:	4240      	negs	r0, r0
    149c:	e7c2      	b.n	1424 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    149e:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    14a0:	079b      	lsls	r3, r3, #30
    14a2:	d0fc      	beq.n	149e <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    14a4:	2303      	movs	r3, #3
    14a6:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    14a8:	b009      	add	sp, #36	; 0x24
    14aa:	bc0c      	pop	{r2, r3}
    14ac:	4690      	mov	r8, r2
    14ae:	4699      	mov	r9, r3
    14b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    14b2:	2004      	movs	r0, #4
    14b4:	4240      	negs	r0, r0
    14b6:	e7f7      	b.n	14a8 <_spi_m_sync_trans+0xf8>
    14b8:	00000a85 	.word	0x00000a85
    14bc:	00002aa0 	.word	0x00002aa0
    14c0:	00001079 	.word	0x00001079

000014c4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14c4:	4a0e      	ldr	r2, [pc, #56]	; (1500 <_sysctrl_init_sources+0x3c>)
    14c6:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    14c8:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14ca:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    14cc:	0f9b      	lsrs	r3, r3, #30
    14ce:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    14d0:	0409      	lsls	r1, r1, #16
    14d2:	480c      	ldr	r0, [pc, #48]	; (1504 <_sysctrl_init_sources+0x40>)
    14d4:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    14d6:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    14d8:	2102      	movs	r1, #2
    14da:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    14dc:	6213      	str	r3, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14de:	6993      	ldr	r3, [r2, #24]
    14e0:	430b      	orrs	r3, r1
    14e2:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    14e4:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    14e6:	311d      	adds	r1, #29
    14e8:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    14ea:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <_sysctrl_init_sources+0x3c>)
    14ee:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    14f0:	071b      	lsls	r3, r3, #28
    14f2:	d5fb      	bpl.n	14ec <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    14f4:	4a02      	ldr	r2, [pc, #8]	; (1500 <_sysctrl_init_sources+0x3c>)
    14f6:	6a13      	ldr	r3, [r2, #32]
    14f8:	2180      	movs	r1, #128	; 0x80
    14fa:	430b      	orrs	r3, r1
    14fc:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    14fe:	4770      	bx	lr
    1500:	40000800 	.word	0x40000800
    1504:	0fff0000 	.word	0x0fff0000

00001508 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1508:	4a02      	ldr	r2, [pc, #8]	; (1514 <_sysctrl_init_referenced_generators+0xc>)
    150a:	6993      	ldr	r3, [r2, #24]
    150c:	2102      	movs	r1, #2
    150e:	438b      	bics	r3, r1
    1510:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1512:	4770      	bx	lr
    1514:	40000800 	.word	0x40000800

00001518 <__aeabi_atexit>:
    1518:	000b      	movs	r3, r1
    151a:	b510      	push	{r4, lr}
    151c:	0001      	movs	r1, r0
    151e:	0018      	movs	r0, r3
    1520:	f001 f956 	bl	27d0 <__cxa_atexit>
    1524:	bd10      	pop	{r4, pc}

00001526 <_ZdlPvj>:
    1526:	b510      	push	{r4, lr}
    1528:	f000 f801 	bl	152e <_ZdlPv>
    152c:	bd10      	pop	{r4, pc}

0000152e <_ZdlPv>:
    152e:	b510      	push	{r4, lr}
    1530:	f001 f980 	bl	2834 <free>
    1534:	bd10      	pop	{r4, pc}
	...

00001538 <floorf>:
    1538:	b5f0      	push	{r4, r5, r6, r7, lr}
    153a:	46c6      	mov	lr, r8
    153c:	0043      	lsls	r3, r0, #1
    153e:	085f      	lsrs	r7, r3, #1
    1540:	0e1b      	lsrs	r3, r3, #24
    1542:	3b7f      	subs	r3, #127	; 0x7f
    1544:	b500      	push	{lr}
    1546:	1c05      	adds	r5, r0, #0
    1548:	001c      	movs	r4, r3
    154a:	2b16      	cmp	r3, #22
    154c:	dc18      	bgt.n	1580 <floorf+0x48>
    154e:	4680      	mov	r8, r0
    1550:	2b00      	cmp	r3, #0
    1552:	db1e      	blt.n	1592 <floorf+0x5a>
    1554:	4f1b      	ldr	r7, [pc, #108]	; (15c4 <floorf+0x8c>)
    1556:	1c06      	adds	r6, r0, #0
    1558:	411f      	asrs	r7, r3
    155a:	4207      	tst	r7, r0
    155c:	d00c      	beq.n	1578 <floorf+0x40>
    155e:	491a      	ldr	r1, [pc, #104]	; (15c8 <floorf+0x90>)
    1560:	f000 fa24 	bl	19ac <__aeabi_fadd>
    1564:	2100      	movs	r1, #0
    1566:	f000 f9f5 	bl	1954 <__aeabi_fcmpgt>
    156a:	2800      	cmp	r0, #0
    156c:	d004      	beq.n	1578 <floorf+0x40>
    156e:	2d00      	cmp	r5, #0
    1570:	db1d      	blt.n	15ae <floorf+0x76>
    1572:	4643      	mov	r3, r8
    1574:	43bb      	bics	r3, r7
    1576:	001e      	movs	r6, r3
    1578:	1c30      	adds	r0, r6, #0
    157a:	bc04      	pop	{r2}
    157c:	4690      	mov	r8, r2
    157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1580:	4b12      	ldr	r3, [pc, #72]	; (15cc <floorf+0x94>)
    1582:	1c06      	adds	r6, r0, #0
    1584:	429f      	cmp	r7, r3
    1586:	d9f7      	bls.n	1578 <floorf+0x40>
    1588:	1c01      	adds	r1, r0, #0
    158a:	f000 fa0f 	bl	19ac <__aeabi_fadd>
    158e:	1c06      	adds	r6, r0, #0
    1590:	e7f2      	b.n	1578 <floorf+0x40>
    1592:	490d      	ldr	r1, [pc, #52]	; (15c8 <floorf+0x90>)
    1594:	f000 fa0a 	bl	19ac <__aeabi_fadd>
    1598:	2100      	movs	r1, #0
    159a:	f000 f9db 	bl	1954 <__aeabi_fcmpgt>
    159e:	2800      	cmp	r0, #0
    15a0:	d003      	beq.n	15aa <floorf+0x72>
    15a2:	2d00      	cmp	r5, #0
    15a4:	db09      	blt.n	15ba <floorf+0x82>
    15a6:	2600      	movs	r6, #0
    15a8:	e7e6      	b.n	1578 <floorf+0x40>
    15aa:	1c2e      	adds	r6, r5, #0
    15ac:	e7e4      	b.n	1578 <floorf+0x40>
    15ae:	2380      	movs	r3, #128	; 0x80
    15b0:	041b      	lsls	r3, r3, #16
    15b2:	4123      	asrs	r3, r4
    15b4:	4698      	mov	r8, r3
    15b6:	44a8      	add	r8, r5
    15b8:	e7db      	b.n	1572 <floorf+0x3a>
    15ba:	2f00      	cmp	r7, #0
    15bc:	d0f5      	beq.n	15aa <floorf+0x72>
    15be:	4e04      	ldr	r6, [pc, #16]	; (15d0 <floorf+0x98>)
    15c0:	e7da      	b.n	1578 <floorf+0x40>
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	007fffff 	.word	0x007fffff
    15c8:	7149f2ca 	.word	0x7149f2ca
    15cc:	7f7fffff 	.word	0x7f7fffff
    15d0:	bf800000 	.word	0xbf800000

000015d4 <roundf>:
    15d4:	0043      	lsls	r3, r0, #1
    15d6:	0e1b      	lsrs	r3, r3, #24
    15d8:	3b7f      	subs	r3, #127	; 0x7f
    15da:	b510      	push	{r4, lr}
    15dc:	0002      	movs	r2, r0
    15de:	2b16      	cmp	r3, #22
    15e0:	dc0b      	bgt.n	15fa <roundf+0x26>
    15e2:	2b00      	cmp	r3, #0
    15e4:	db0f      	blt.n	1606 <roundf+0x32>
    15e6:	490c      	ldr	r1, [pc, #48]	; (1618 <roundf+0x44>)
    15e8:	4119      	asrs	r1, r3
    15ea:	4201      	tst	r1, r0
    15ec:	d004      	beq.n	15f8 <roundf+0x24>
    15ee:	2080      	movs	r0, #128	; 0x80
    15f0:	03c0      	lsls	r0, r0, #15
    15f2:	4118      	asrs	r0, r3
    15f4:	1880      	adds	r0, r0, r2
    15f6:	4388      	bics	r0, r1
    15f8:	bd10      	pop	{r4, pc}
    15fa:	2b80      	cmp	r3, #128	; 0x80
    15fc:	d1fc      	bne.n	15f8 <roundf+0x24>
    15fe:	1c01      	adds	r1, r0, #0
    1600:	f000 f9d4 	bl	19ac <__aeabi_fadd>
    1604:	e7f8      	b.n	15f8 <roundf+0x24>
    1606:	0fc0      	lsrs	r0, r0, #31
    1608:	07c0      	lsls	r0, r0, #31
    160a:	3301      	adds	r3, #1
    160c:	d1f4      	bne.n	15f8 <roundf+0x24>
    160e:	23fe      	movs	r3, #254	; 0xfe
    1610:	059b      	lsls	r3, r3, #22
    1612:	4318      	orrs	r0, r3
    1614:	e7f0      	b.n	15f8 <roundf+0x24>
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	007fffff 	.word	0x007fffff

0000161c <__udivsi3>:
    161c:	2200      	movs	r2, #0
    161e:	0843      	lsrs	r3, r0, #1
    1620:	428b      	cmp	r3, r1
    1622:	d374      	bcc.n	170e <__udivsi3+0xf2>
    1624:	0903      	lsrs	r3, r0, #4
    1626:	428b      	cmp	r3, r1
    1628:	d35f      	bcc.n	16ea <__udivsi3+0xce>
    162a:	0a03      	lsrs	r3, r0, #8
    162c:	428b      	cmp	r3, r1
    162e:	d344      	bcc.n	16ba <__udivsi3+0x9e>
    1630:	0b03      	lsrs	r3, r0, #12
    1632:	428b      	cmp	r3, r1
    1634:	d328      	bcc.n	1688 <__udivsi3+0x6c>
    1636:	0c03      	lsrs	r3, r0, #16
    1638:	428b      	cmp	r3, r1
    163a:	d30d      	bcc.n	1658 <__udivsi3+0x3c>
    163c:	22ff      	movs	r2, #255	; 0xff
    163e:	0209      	lsls	r1, r1, #8
    1640:	ba12      	rev	r2, r2
    1642:	0c03      	lsrs	r3, r0, #16
    1644:	428b      	cmp	r3, r1
    1646:	d302      	bcc.n	164e <__udivsi3+0x32>
    1648:	1212      	asrs	r2, r2, #8
    164a:	0209      	lsls	r1, r1, #8
    164c:	d065      	beq.n	171a <__udivsi3+0xfe>
    164e:	0b03      	lsrs	r3, r0, #12
    1650:	428b      	cmp	r3, r1
    1652:	d319      	bcc.n	1688 <__udivsi3+0x6c>
    1654:	e000      	b.n	1658 <__udivsi3+0x3c>
    1656:	0a09      	lsrs	r1, r1, #8
    1658:	0bc3      	lsrs	r3, r0, #15
    165a:	428b      	cmp	r3, r1
    165c:	d301      	bcc.n	1662 <__udivsi3+0x46>
    165e:	03cb      	lsls	r3, r1, #15
    1660:	1ac0      	subs	r0, r0, r3
    1662:	4152      	adcs	r2, r2
    1664:	0b83      	lsrs	r3, r0, #14
    1666:	428b      	cmp	r3, r1
    1668:	d301      	bcc.n	166e <__udivsi3+0x52>
    166a:	038b      	lsls	r3, r1, #14
    166c:	1ac0      	subs	r0, r0, r3
    166e:	4152      	adcs	r2, r2
    1670:	0b43      	lsrs	r3, r0, #13
    1672:	428b      	cmp	r3, r1
    1674:	d301      	bcc.n	167a <__udivsi3+0x5e>
    1676:	034b      	lsls	r3, r1, #13
    1678:	1ac0      	subs	r0, r0, r3
    167a:	4152      	adcs	r2, r2
    167c:	0b03      	lsrs	r3, r0, #12
    167e:	428b      	cmp	r3, r1
    1680:	d301      	bcc.n	1686 <__udivsi3+0x6a>
    1682:	030b      	lsls	r3, r1, #12
    1684:	1ac0      	subs	r0, r0, r3
    1686:	4152      	adcs	r2, r2
    1688:	0ac3      	lsrs	r3, r0, #11
    168a:	428b      	cmp	r3, r1
    168c:	d301      	bcc.n	1692 <__udivsi3+0x76>
    168e:	02cb      	lsls	r3, r1, #11
    1690:	1ac0      	subs	r0, r0, r3
    1692:	4152      	adcs	r2, r2
    1694:	0a83      	lsrs	r3, r0, #10
    1696:	428b      	cmp	r3, r1
    1698:	d301      	bcc.n	169e <__udivsi3+0x82>
    169a:	028b      	lsls	r3, r1, #10
    169c:	1ac0      	subs	r0, r0, r3
    169e:	4152      	adcs	r2, r2
    16a0:	0a43      	lsrs	r3, r0, #9
    16a2:	428b      	cmp	r3, r1
    16a4:	d301      	bcc.n	16aa <__udivsi3+0x8e>
    16a6:	024b      	lsls	r3, r1, #9
    16a8:	1ac0      	subs	r0, r0, r3
    16aa:	4152      	adcs	r2, r2
    16ac:	0a03      	lsrs	r3, r0, #8
    16ae:	428b      	cmp	r3, r1
    16b0:	d301      	bcc.n	16b6 <__udivsi3+0x9a>
    16b2:	020b      	lsls	r3, r1, #8
    16b4:	1ac0      	subs	r0, r0, r3
    16b6:	4152      	adcs	r2, r2
    16b8:	d2cd      	bcs.n	1656 <__udivsi3+0x3a>
    16ba:	09c3      	lsrs	r3, r0, #7
    16bc:	428b      	cmp	r3, r1
    16be:	d301      	bcc.n	16c4 <__udivsi3+0xa8>
    16c0:	01cb      	lsls	r3, r1, #7
    16c2:	1ac0      	subs	r0, r0, r3
    16c4:	4152      	adcs	r2, r2
    16c6:	0983      	lsrs	r3, r0, #6
    16c8:	428b      	cmp	r3, r1
    16ca:	d301      	bcc.n	16d0 <__udivsi3+0xb4>
    16cc:	018b      	lsls	r3, r1, #6
    16ce:	1ac0      	subs	r0, r0, r3
    16d0:	4152      	adcs	r2, r2
    16d2:	0943      	lsrs	r3, r0, #5
    16d4:	428b      	cmp	r3, r1
    16d6:	d301      	bcc.n	16dc <__udivsi3+0xc0>
    16d8:	014b      	lsls	r3, r1, #5
    16da:	1ac0      	subs	r0, r0, r3
    16dc:	4152      	adcs	r2, r2
    16de:	0903      	lsrs	r3, r0, #4
    16e0:	428b      	cmp	r3, r1
    16e2:	d301      	bcc.n	16e8 <__udivsi3+0xcc>
    16e4:	010b      	lsls	r3, r1, #4
    16e6:	1ac0      	subs	r0, r0, r3
    16e8:	4152      	adcs	r2, r2
    16ea:	08c3      	lsrs	r3, r0, #3
    16ec:	428b      	cmp	r3, r1
    16ee:	d301      	bcc.n	16f4 <__udivsi3+0xd8>
    16f0:	00cb      	lsls	r3, r1, #3
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	4152      	adcs	r2, r2
    16f6:	0883      	lsrs	r3, r0, #2
    16f8:	428b      	cmp	r3, r1
    16fa:	d301      	bcc.n	1700 <__udivsi3+0xe4>
    16fc:	008b      	lsls	r3, r1, #2
    16fe:	1ac0      	subs	r0, r0, r3
    1700:	4152      	adcs	r2, r2
    1702:	0843      	lsrs	r3, r0, #1
    1704:	428b      	cmp	r3, r1
    1706:	d301      	bcc.n	170c <__udivsi3+0xf0>
    1708:	004b      	lsls	r3, r1, #1
    170a:	1ac0      	subs	r0, r0, r3
    170c:	4152      	adcs	r2, r2
    170e:	1a41      	subs	r1, r0, r1
    1710:	d200      	bcs.n	1714 <__udivsi3+0xf8>
    1712:	4601      	mov	r1, r0
    1714:	4152      	adcs	r2, r2
    1716:	4610      	mov	r0, r2
    1718:	4770      	bx	lr
    171a:	e7ff      	b.n	171c <__udivsi3+0x100>
    171c:	b501      	push	{r0, lr}
    171e:	2000      	movs	r0, #0
    1720:	f000 f8f0 	bl	1904 <__aeabi_idiv0>
    1724:	bd02      	pop	{r1, pc}
    1726:	46c0      	nop			; (mov r8, r8)

00001728 <__aeabi_uidivmod>:
    1728:	2900      	cmp	r1, #0
    172a:	d0f7      	beq.n	171c <__udivsi3+0x100>
    172c:	e776      	b.n	161c <__udivsi3>
    172e:	4770      	bx	lr

00001730 <__divsi3>:
    1730:	4603      	mov	r3, r0
    1732:	430b      	orrs	r3, r1
    1734:	d47f      	bmi.n	1836 <__divsi3+0x106>
    1736:	2200      	movs	r2, #0
    1738:	0843      	lsrs	r3, r0, #1
    173a:	428b      	cmp	r3, r1
    173c:	d374      	bcc.n	1828 <__divsi3+0xf8>
    173e:	0903      	lsrs	r3, r0, #4
    1740:	428b      	cmp	r3, r1
    1742:	d35f      	bcc.n	1804 <__divsi3+0xd4>
    1744:	0a03      	lsrs	r3, r0, #8
    1746:	428b      	cmp	r3, r1
    1748:	d344      	bcc.n	17d4 <__divsi3+0xa4>
    174a:	0b03      	lsrs	r3, r0, #12
    174c:	428b      	cmp	r3, r1
    174e:	d328      	bcc.n	17a2 <__divsi3+0x72>
    1750:	0c03      	lsrs	r3, r0, #16
    1752:	428b      	cmp	r3, r1
    1754:	d30d      	bcc.n	1772 <__divsi3+0x42>
    1756:	22ff      	movs	r2, #255	; 0xff
    1758:	0209      	lsls	r1, r1, #8
    175a:	ba12      	rev	r2, r2
    175c:	0c03      	lsrs	r3, r0, #16
    175e:	428b      	cmp	r3, r1
    1760:	d302      	bcc.n	1768 <__divsi3+0x38>
    1762:	1212      	asrs	r2, r2, #8
    1764:	0209      	lsls	r1, r1, #8
    1766:	d065      	beq.n	1834 <__divsi3+0x104>
    1768:	0b03      	lsrs	r3, r0, #12
    176a:	428b      	cmp	r3, r1
    176c:	d319      	bcc.n	17a2 <__divsi3+0x72>
    176e:	e000      	b.n	1772 <__divsi3+0x42>
    1770:	0a09      	lsrs	r1, r1, #8
    1772:	0bc3      	lsrs	r3, r0, #15
    1774:	428b      	cmp	r3, r1
    1776:	d301      	bcc.n	177c <__divsi3+0x4c>
    1778:	03cb      	lsls	r3, r1, #15
    177a:	1ac0      	subs	r0, r0, r3
    177c:	4152      	adcs	r2, r2
    177e:	0b83      	lsrs	r3, r0, #14
    1780:	428b      	cmp	r3, r1
    1782:	d301      	bcc.n	1788 <__divsi3+0x58>
    1784:	038b      	lsls	r3, r1, #14
    1786:	1ac0      	subs	r0, r0, r3
    1788:	4152      	adcs	r2, r2
    178a:	0b43      	lsrs	r3, r0, #13
    178c:	428b      	cmp	r3, r1
    178e:	d301      	bcc.n	1794 <__divsi3+0x64>
    1790:	034b      	lsls	r3, r1, #13
    1792:	1ac0      	subs	r0, r0, r3
    1794:	4152      	adcs	r2, r2
    1796:	0b03      	lsrs	r3, r0, #12
    1798:	428b      	cmp	r3, r1
    179a:	d301      	bcc.n	17a0 <__divsi3+0x70>
    179c:	030b      	lsls	r3, r1, #12
    179e:	1ac0      	subs	r0, r0, r3
    17a0:	4152      	adcs	r2, r2
    17a2:	0ac3      	lsrs	r3, r0, #11
    17a4:	428b      	cmp	r3, r1
    17a6:	d301      	bcc.n	17ac <__divsi3+0x7c>
    17a8:	02cb      	lsls	r3, r1, #11
    17aa:	1ac0      	subs	r0, r0, r3
    17ac:	4152      	adcs	r2, r2
    17ae:	0a83      	lsrs	r3, r0, #10
    17b0:	428b      	cmp	r3, r1
    17b2:	d301      	bcc.n	17b8 <__divsi3+0x88>
    17b4:	028b      	lsls	r3, r1, #10
    17b6:	1ac0      	subs	r0, r0, r3
    17b8:	4152      	adcs	r2, r2
    17ba:	0a43      	lsrs	r3, r0, #9
    17bc:	428b      	cmp	r3, r1
    17be:	d301      	bcc.n	17c4 <__divsi3+0x94>
    17c0:	024b      	lsls	r3, r1, #9
    17c2:	1ac0      	subs	r0, r0, r3
    17c4:	4152      	adcs	r2, r2
    17c6:	0a03      	lsrs	r3, r0, #8
    17c8:	428b      	cmp	r3, r1
    17ca:	d301      	bcc.n	17d0 <__divsi3+0xa0>
    17cc:	020b      	lsls	r3, r1, #8
    17ce:	1ac0      	subs	r0, r0, r3
    17d0:	4152      	adcs	r2, r2
    17d2:	d2cd      	bcs.n	1770 <__divsi3+0x40>
    17d4:	09c3      	lsrs	r3, r0, #7
    17d6:	428b      	cmp	r3, r1
    17d8:	d301      	bcc.n	17de <__divsi3+0xae>
    17da:	01cb      	lsls	r3, r1, #7
    17dc:	1ac0      	subs	r0, r0, r3
    17de:	4152      	adcs	r2, r2
    17e0:	0983      	lsrs	r3, r0, #6
    17e2:	428b      	cmp	r3, r1
    17e4:	d301      	bcc.n	17ea <__divsi3+0xba>
    17e6:	018b      	lsls	r3, r1, #6
    17e8:	1ac0      	subs	r0, r0, r3
    17ea:	4152      	adcs	r2, r2
    17ec:	0943      	lsrs	r3, r0, #5
    17ee:	428b      	cmp	r3, r1
    17f0:	d301      	bcc.n	17f6 <__divsi3+0xc6>
    17f2:	014b      	lsls	r3, r1, #5
    17f4:	1ac0      	subs	r0, r0, r3
    17f6:	4152      	adcs	r2, r2
    17f8:	0903      	lsrs	r3, r0, #4
    17fa:	428b      	cmp	r3, r1
    17fc:	d301      	bcc.n	1802 <__divsi3+0xd2>
    17fe:	010b      	lsls	r3, r1, #4
    1800:	1ac0      	subs	r0, r0, r3
    1802:	4152      	adcs	r2, r2
    1804:	08c3      	lsrs	r3, r0, #3
    1806:	428b      	cmp	r3, r1
    1808:	d301      	bcc.n	180e <__divsi3+0xde>
    180a:	00cb      	lsls	r3, r1, #3
    180c:	1ac0      	subs	r0, r0, r3
    180e:	4152      	adcs	r2, r2
    1810:	0883      	lsrs	r3, r0, #2
    1812:	428b      	cmp	r3, r1
    1814:	d301      	bcc.n	181a <__divsi3+0xea>
    1816:	008b      	lsls	r3, r1, #2
    1818:	1ac0      	subs	r0, r0, r3
    181a:	4152      	adcs	r2, r2
    181c:	0843      	lsrs	r3, r0, #1
    181e:	428b      	cmp	r3, r1
    1820:	d301      	bcc.n	1826 <__divsi3+0xf6>
    1822:	004b      	lsls	r3, r1, #1
    1824:	1ac0      	subs	r0, r0, r3
    1826:	4152      	adcs	r2, r2
    1828:	1a41      	subs	r1, r0, r1
    182a:	d200      	bcs.n	182e <__divsi3+0xfe>
    182c:	4601      	mov	r1, r0
    182e:	4152      	adcs	r2, r2
    1830:	4610      	mov	r0, r2
    1832:	4770      	bx	lr
    1834:	e05d      	b.n	18f2 <__divsi3+0x1c2>
    1836:	0fca      	lsrs	r2, r1, #31
    1838:	d000      	beq.n	183c <__divsi3+0x10c>
    183a:	4249      	negs	r1, r1
    183c:	1003      	asrs	r3, r0, #32
    183e:	d300      	bcc.n	1842 <__divsi3+0x112>
    1840:	4240      	negs	r0, r0
    1842:	4053      	eors	r3, r2
    1844:	2200      	movs	r2, #0
    1846:	469c      	mov	ip, r3
    1848:	0903      	lsrs	r3, r0, #4
    184a:	428b      	cmp	r3, r1
    184c:	d32d      	bcc.n	18aa <__divsi3+0x17a>
    184e:	0a03      	lsrs	r3, r0, #8
    1850:	428b      	cmp	r3, r1
    1852:	d312      	bcc.n	187a <__divsi3+0x14a>
    1854:	22fc      	movs	r2, #252	; 0xfc
    1856:	0189      	lsls	r1, r1, #6
    1858:	ba12      	rev	r2, r2
    185a:	0a03      	lsrs	r3, r0, #8
    185c:	428b      	cmp	r3, r1
    185e:	d30c      	bcc.n	187a <__divsi3+0x14a>
    1860:	0189      	lsls	r1, r1, #6
    1862:	1192      	asrs	r2, r2, #6
    1864:	428b      	cmp	r3, r1
    1866:	d308      	bcc.n	187a <__divsi3+0x14a>
    1868:	0189      	lsls	r1, r1, #6
    186a:	1192      	asrs	r2, r2, #6
    186c:	428b      	cmp	r3, r1
    186e:	d304      	bcc.n	187a <__divsi3+0x14a>
    1870:	0189      	lsls	r1, r1, #6
    1872:	d03a      	beq.n	18ea <__divsi3+0x1ba>
    1874:	1192      	asrs	r2, r2, #6
    1876:	e000      	b.n	187a <__divsi3+0x14a>
    1878:	0989      	lsrs	r1, r1, #6
    187a:	09c3      	lsrs	r3, r0, #7
    187c:	428b      	cmp	r3, r1
    187e:	d301      	bcc.n	1884 <__divsi3+0x154>
    1880:	01cb      	lsls	r3, r1, #7
    1882:	1ac0      	subs	r0, r0, r3
    1884:	4152      	adcs	r2, r2
    1886:	0983      	lsrs	r3, r0, #6
    1888:	428b      	cmp	r3, r1
    188a:	d301      	bcc.n	1890 <__divsi3+0x160>
    188c:	018b      	lsls	r3, r1, #6
    188e:	1ac0      	subs	r0, r0, r3
    1890:	4152      	adcs	r2, r2
    1892:	0943      	lsrs	r3, r0, #5
    1894:	428b      	cmp	r3, r1
    1896:	d301      	bcc.n	189c <__divsi3+0x16c>
    1898:	014b      	lsls	r3, r1, #5
    189a:	1ac0      	subs	r0, r0, r3
    189c:	4152      	adcs	r2, r2
    189e:	0903      	lsrs	r3, r0, #4
    18a0:	428b      	cmp	r3, r1
    18a2:	d301      	bcc.n	18a8 <__divsi3+0x178>
    18a4:	010b      	lsls	r3, r1, #4
    18a6:	1ac0      	subs	r0, r0, r3
    18a8:	4152      	adcs	r2, r2
    18aa:	08c3      	lsrs	r3, r0, #3
    18ac:	428b      	cmp	r3, r1
    18ae:	d301      	bcc.n	18b4 <__divsi3+0x184>
    18b0:	00cb      	lsls	r3, r1, #3
    18b2:	1ac0      	subs	r0, r0, r3
    18b4:	4152      	adcs	r2, r2
    18b6:	0883      	lsrs	r3, r0, #2
    18b8:	428b      	cmp	r3, r1
    18ba:	d301      	bcc.n	18c0 <__divsi3+0x190>
    18bc:	008b      	lsls	r3, r1, #2
    18be:	1ac0      	subs	r0, r0, r3
    18c0:	4152      	adcs	r2, r2
    18c2:	d2d9      	bcs.n	1878 <__divsi3+0x148>
    18c4:	0843      	lsrs	r3, r0, #1
    18c6:	428b      	cmp	r3, r1
    18c8:	d301      	bcc.n	18ce <__divsi3+0x19e>
    18ca:	004b      	lsls	r3, r1, #1
    18cc:	1ac0      	subs	r0, r0, r3
    18ce:	4152      	adcs	r2, r2
    18d0:	1a41      	subs	r1, r0, r1
    18d2:	d200      	bcs.n	18d6 <__divsi3+0x1a6>
    18d4:	4601      	mov	r1, r0
    18d6:	4663      	mov	r3, ip
    18d8:	4152      	adcs	r2, r2
    18da:	105b      	asrs	r3, r3, #1
    18dc:	4610      	mov	r0, r2
    18de:	d301      	bcc.n	18e4 <__divsi3+0x1b4>
    18e0:	4240      	negs	r0, r0
    18e2:	2b00      	cmp	r3, #0
    18e4:	d500      	bpl.n	18e8 <__divsi3+0x1b8>
    18e6:	4249      	negs	r1, r1
    18e8:	4770      	bx	lr
    18ea:	4663      	mov	r3, ip
    18ec:	105b      	asrs	r3, r3, #1
    18ee:	d300      	bcc.n	18f2 <__divsi3+0x1c2>
    18f0:	4240      	negs	r0, r0
    18f2:	b501      	push	{r0, lr}
    18f4:	2000      	movs	r0, #0
    18f6:	f000 f805 	bl	1904 <__aeabi_idiv0>
    18fa:	bd02      	pop	{r1, pc}

000018fc <__aeabi_idivmod>:
    18fc:	2900      	cmp	r1, #0
    18fe:	d0f8      	beq.n	18f2 <__divsi3+0x1c2>
    1900:	e716      	b.n	1730 <__divsi3>
    1902:	4770      	bx	lr

00001904 <__aeabi_idiv0>:
    1904:	4770      	bx	lr
    1906:	46c0      	nop			; (mov r8, r8)

00001908 <__aeabi_cfrcmple>:
    1908:	4684      	mov	ip, r0
    190a:	1c08      	adds	r0, r1, #0
    190c:	4661      	mov	r1, ip
    190e:	e7ff      	b.n	1910 <__aeabi_cfcmpeq>

00001910 <__aeabi_cfcmpeq>:
    1910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1912:	f000 fb8b 	bl	202c <__lesf2>
    1916:	2800      	cmp	r0, #0
    1918:	d401      	bmi.n	191e <__aeabi_cfcmpeq+0xe>
    191a:	2100      	movs	r1, #0
    191c:	42c8      	cmn	r0, r1
    191e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001920 <__aeabi_fcmpeq>:
    1920:	b510      	push	{r4, lr}
    1922:	f000 fb1d 	bl	1f60 <__eqsf2>
    1926:	4240      	negs	r0, r0
    1928:	3001      	adds	r0, #1
    192a:	bd10      	pop	{r4, pc}

0000192c <__aeabi_fcmplt>:
    192c:	b510      	push	{r4, lr}
    192e:	f000 fb7d 	bl	202c <__lesf2>
    1932:	2800      	cmp	r0, #0
    1934:	db01      	blt.n	193a <__aeabi_fcmplt+0xe>
    1936:	2000      	movs	r0, #0
    1938:	bd10      	pop	{r4, pc}
    193a:	2001      	movs	r0, #1
    193c:	bd10      	pop	{r4, pc}
    193e:	46c0      	nop			; (mov r8, r8)

00001940 <__aeabi_fcmple>:
    1940:	b510      	push	{r4, lr}
    1942:	f000 fb73 	bl	202c <__lesf2>
    1946:	2800      	cmp	r0, #0
    1948:	dd01      	ble.n	194e <__aeabi_fcmple+0xe>
    194a:	2000      	movs	r0, #0
    194c:	bd10      	pop	{r4, pc}
    194e:	2001      	movs	r0, #1
    1950:	bd10      	pop	{r4, pc}
    1952:	46c0      	nop			; (mov r8, r8)

00001954 <__aeabi_fcmpgt>:
    1954:	b510      	push	{r4, lr}
    1956:	f000 fb29 	bl	1fac <__gesf2>
    195a:	2800      	cmp	r0, #0
    195c:	dc01      	bgt.n	1962 <__aeabi_fcmpgt+0xe>
    195e:	2000      	movs	r0, #0
    1960:	bd10      	pop	{r4, pc}
    1962:	2001      	movs	r0, #1
    1964:	bd10      	pop	{r4, pc}
    1966:	46c0      	nop			; (mov r8, r8)

00001968 <__aeabi_fcmpge>:
    1968:	b510      	push	{r4, lr}
    196a:	f000 fb1f 	bl	1fac <__gesf2>
    196e:	2800      	cmp	r0, #0
    1970:	da01      	bge.n	1976 <__aeabi_fcmpge+0xe>
    1972:	2000      	movs	r0, #0
    1974:	bd10      	pop	{r4, pc}
    1976:	2001      	movs	r0, #1
    1978:	bd10      	pop	{r4, pc}
    197a:	46c0      	nop			; (mov r8, r8)

0000197c <__aeabi_f2uiz>:
    197c:	219e      	movs	r1, #158	; 0x9e
    197e:	b510      	push	{r4, lr}
    1980:	05c9      	lsls	r1, r1, #23
    1982:	1c04      	adds	r4, r0, #0
    1984:	f7ff fff0 	bl	1968 <__aeabi_fcmpge>
    1988:	2800      	cmp	r0, #0
    198a:	d103      	bne.n	1994 <__aeabi_f2uiz+0x18>
    198c:	1c20      	adds	r0, r4, #0
    198e:	f000 fe4b 	bl	2628 <__aeabi_f2iz>
    1992:	bd10      	pop	{r4, pc}
    1994:	219e      	movs	r1, #158	; 0x9e
    1996:	1c20      	adds	r0, r4, #0
    1998:	05c9      	lsls	r1, r1, #23
    199a:	f000 fca9 	bl	22f0 <__aeabi_fsub>
    199e:	f000 fe43 	bl	2628 <__aeabi_f2iz>
    19a2:	2380      	movs	r3, #128	; 0x80
    19a4:	061b      	lsls	r3, r3, #24
    19a6:	469c      	mov	ip, r3
    19a8:	4460      	add	r0, ip
    19aa:	e7f2      	b.n	1992 <__aeabi_f2uiz+0x16>

000019ac <__aeabi_fadd>:
    19ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ae:	46c6      	mov	lr, r8
    19b0:	024e      	lsls	r6, r1, #9
    19b2:	0247      	lsls	r7, r0, #9
    19b4:	0a76      	lsrs	r6, r6, #9
    19b6:	0a7b      	lsrs	r3, r7, #9
    19b8:	0044      	lsls	r4, r0, #1
    19ba:	0fc5      	lsrs	r5, r0, #31
    19bc:	00f7      	lsls	r7, r6, #3
    19be:	0048      	lsls	r0, r1, #1
    19c0:	4698      	mov	r8, r3
    19c2:	b500      	push	{lr}
    19c4:	0e24      	lsrs	r4, r4, #24
    19c6:	002a      	movs	r2, r5
    19c8:	00db      	lsls	r3, r3, #3
    19ca:	0e00      	lsrs	r0, r0, #24
    19cc:	0fc9      	lsrs	r1, r1, #31
    19ce:	46bc      	mov	ip, r7
    19d0:	428d      	cmp	r5, r1
    19d2:	d067      	beq.n	1aa4 <__aeabi_fadd+0xf8>
    19d4:	1a22      	subs	r2, r4, r0
    19d6:	2a00      	cmp	r2, #0
    19d8:	dc00      	bgt.n	19dc <__aeabi_fadd+0x30>
    19da:	e0a5      	b.n	1b28 <__aeabi_fadd+0x17c>
    19dc:	2800      	cmp	r0, #0
    19de:	d13a      	bne.n	1a56 <__aeabi_fadd+0xaa>
    19e0:	2f00      	cmp	r7, #0
    19e2:	d100      	bne.n	19e6 <__aeabi_fadd+0x3a>
    19e4:	e093      	b.n	1b0e <__aeabi_fadd+0x162>
    19e6:	1e51      	subs	r1, r2, #1
    19e8:	2900      	cmp	r1, #0
    19ea:	d000      	beq.n	19ee <__aeabi_fadd+0x42>
    19ec:	e0bc      	b.n	1b68 <__aeabi_fadd+0x1bc>
    19ee:	2401      	movs	r4, #1
    19f0:	1bdb      	subs	r3, r3, r7
    19f2:	015a      	lsls	r2, r3, #5
    19f4:	d546      	bpl.n	1a84 <__aeabi_fadd+0xd8>
    19f6:	019b      	lsls	r3, r3, #6
    19f8:	099e      	lsrs	r6, r3, #6
    19fa:	0030      	movs	r0, r6
    19fc:	f000 feca 	bl	2794 <__clzsi2>
    1a00:	3805      	subs	r0, #5
    1a02:	4086      	lsls	r6, r0
    1a04:	4284      	cmp	r4, r0
    1a06:	dd00      	ble.n	1a0a <__aeabi_fadd+0x5e>
    1a08:	e09d      	b.n	1b46 <__aeabi_fadd+0x19a>
    1a0a:	1b04      	subs	r4, r0, r4
    1a0c:	0032      	movs	r2, r6
    1a0e:	2020      	movs	r0, #32
    1a10:	3401      	adds	r4, #1
    1a12:	40e2      	lsrs	r2, r4
    1a14:	1b04      	subs	r4, r0, r4
    1a16:	40a6      	lsls	r6, r4
    1a18:	0033      	movs	r3, r6
    1a1a:	1e5e      	subs	r6, r3, #1
    1a1c:	41b3      	sbcs	r3, r6
    1a1e:	2400      	movs	r4, #0
    1a20:	4313      	orrs	r3, r2
    1a22:	075a      	lsls	r2, r3, #29
    1a24:	d004      	beq.n	1a30 <__aeabi_fadd+0x84>
    1a26:	220f      	movs	r2, #15
    1a28:	401a      	ands	r2, r3
    1a2a:	2a04      	cmp	r2, #4
    1a2c:	d000      	beq.n	1a30 <__aeabi_fadd+0x84>
    1a2e:	3304      	adds	r3, #4
    1a30:	015a      	lsls	r2, r3, #5
    1a32:	d529      	bpl.n	1a88 <__aeabi_fadd+0xdc>
    1a34:	3401      	adds	r4, #1
    1a36:	2cff      	cmp	r4, #255	; 0xff
    1a38:	d100      	bne.n	1a3c <__aeabi_fadd+0x90>
    1a3a:	e081      	b.n	1b40 <__aeabi_fadd+0x194>
    1a3c:	002a      	movs	r2, r5
    1a3e:	019b      	lsls	r3, r3, #6
    1a40:	0a5b      	lsrs	r3, r3, #9
    1a42:	b2e4      	uxtb	r4, r4
    1a44:	025b      	lsls	r3, r3, #9
    1a46:	05e4      	lsls	r4, r4, #23
    1a48:	0a58      	lsrs	r0, r3, #9
    1a4a:	07d2      	lsls	r2, r2, #31
    1a4c:	4320      	orrs	r0, r4
    1a4e:	4310      	orrs	r0, r2
    1a50:	bc04      	pop	{r2}
    1a52:	4690      	mov	r8, r2
    1a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a56:	2cff      	cmp	r4, #255	; 0xff
    1a58:	d0e3      	beq.n	1a22 <__aeabi_fadd+0x76>
    1a5a:	2180      	movs	r1, #128	; 0x80
    1a5c:	0038      	movs	r0, r7
    1a5e:	04c9      	lsls	r1, r1, #19
    1a60:	4308      	orrs	r0, r1
    1a62:	4684      	mov	ip, r0
    1a64:	2a1b      	cmp	r2, #27
    1a66:	dd00      	ble.n	1a6a <__aeabi_fadd+0xbe>
    1a68:	e082      	b.n	1b70 <__aeabi_fadd+0x1c4>
    1a6a:	2020      	movs	r0, #32
    1a6c:	4661      	mov	r1, ip
    1a6e:	40d1      	lsrs	r1, r2
    1a70:	1a82      	subs	r2, r0, r2
    1a72:	4660      	mov	r0, ip
    1a74:	4090      	lsls	r0, r2
    1a76:	0002      	movs	r2, r0
    1a78:	1e50      	subs	r0, r2, #1
    1a7a:	4182      	sbcs	r2, r0
    1a7c:	430a      	orrs	r2, r1
    1a7e:	1a9b      	subs	r3, r3, r2
    1a80:	015a      	lsls	r2, r3, #5
    1a82:	d4b8      	bmi.n	19f6 <__aeabi_fadd+0x4a>
    1a84:	075a      	lsls	r2, r3, #29
    1a86:	d1ce      	bne.n	1a26 <__aeabi_fadd+0x7a>
    1a88:	08de      	lsrs	r6, r3, #3
    1a8a:	002a      	movs	r2, r5
    1a8c:	2cff      	cmp	r4, #255	; 0xff
    1a8e:	d13a      	bne.n	1b06 <__aeabi_fadd+0x15a>
    1a90:	2e00      	cmp	r6, #0
    1a92:	d100      	bne.n	1a96 <__aeabi_fadd+0xea>
    1a94:	e0ae      	b.n	1bf4 <__aeabi_fadd+0x248>
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	03db      	lsls	r3, r3, #15
    1a9a:	4333      	orrs	r3, r6
    1a9c:	025b      	lsls	r3, r3, #9
    1a9e:	0a5b      	lsrs	r3, r3, #9
    1aa0:	24ff      	movs	r4, #255	; 0xff
    1aa2:	e7cf      	b.n	1a44 <__aeabi_fadd+0x98>
    1aa4:	1a21      	subs	r1, r4, r0
    1aa6:	2900      	cmp	r1, #0
    1aa8:	dd52      	ble.n	1b50 <__aeabi_fadd+0x1a4>
    1aaa:	2800      	cmp	r0, #0
    1aac:	d031      	beq.n	1b12 <__aeabi_fadd+0x166>
    1aae:	2cff      	cmp	r4, #255	; 0xff
    1ab0:	d0b7      	beq.n	1a22 <__aeabi_fadd+0x76>
    1ab2:	2080      	movs	r0, #128	; 0x80
    1ab4:	003e      	movs	r6, r7
    1ab6:	04c0      	lsls	r0, r0, #19
    1ab8:	4306      	orrs	r6, r0
    1aba:	46b4      	mov	ip, r6
    1abc:	291b      	cmp	r1, #27
    1abe:	dd00      	ble.n	1ac2 <__aeabi_fadd+0x116>
    1ac0:	e0aa      	b.n	1c18 <__aeabi_fadd+0x26c>
    1ac2:	2620      	movs	r6, #32
    1ac4:	4660      	mov	r0, ip
    1ac6:	40c8      	lsrs	r0, r1
    1ac8:	1a71      	subs	r1, r6, r1
    1aca:	4666      	mov	r6, ip
    1acc:	408e      	lsls	r6, r1
    1ace:	0031      	movs	r1, r6
    1ad0:	1e4e      	subs	r6, r1, #1
    1ad2:	41b1      	sbcs	r1, r6
    1ad4:	4301      	orrs	r1, r0
    1ad6:	185b      	adds	r3, r3, r1
    1ad8:	0159      	lsls	r1, r3, #5
    1ada:	d5d3      	bpl.n	1a84 <__aeabi_fadd+0xd8>
    1adc:	3401      	adds	r4, #1
    1ade:	2cff      	cmp	r4, #255	; 0xff
    1ae0:	d100      	bne.n	1ae4 <__aeabi_fadd+0x138>
    1ae2:	e087      	b.n	1bf4 <__aeabi_fadd+0x248>
    1ae4:	2201      	movs	r2, #1
    1ae6:	4978      	ldr	r1, [pc, #480]	; (1cc8 <__aeabi_fadd+0x31c>)
    1ae8:	401a      	ands	r2, r3
    1aea:	085b      	lsrs	r3, r3, #1
    1aec:	400b      	ands	r3, r1
    1aee:	4313      	orrs	r3, r2
    1af0:	e797      	b.n	1a22 <__aeabi_fadd+0x76>
    1af2:	2c00      	cmp	r4, #0
    1af4:	d000      	beq.n	1af8 <__aeabi_fadd+0x14c>
    1af6:	e0a7      	b.n	1c48 <__aeabi_fadd+0x29c>
    1af8:	2b00      	cmp	r3, #0
    1afa:	d000      	beq.n	1afe <__aeabi_fadd+0x152>
    1afc:	e0b6      	b.n	1c6c <__aeabi_fadd+0x2c0>
    1afe:	1e3b      	subs	r3, r7, #0
    1b00:	d162      	bne.n	1bc8 <__aeabi_fadd+0x21c>
    1b02:	2600      	movs	r6, #0
    1b04:	2200      	movs	r2, #0
    1b06:	0273      	lsls	r3, r6, #9
    1b08:	0a5b      	lsrs	r3, r3, #9
    1b0a:	b2e4      	uxtb	r4, r4
    1b0c:	e79a      	b.n	1a44 <__aeabi_fadd+0x98>
    1b0e:	0014      	movs	r4, r2
    1b10:	e787      	b.n	1a22 <__aeabi_fadd+0x76>
    1b12:	2f00      	cmp	r7, #0
    1b14:	d04d      	beq.n	1bb2 <__aeabi_fadd+0x206>
    1b16:	1e48      	subs	r0, r1, #1
    1b18:	2800      	cmp	r0, #0
    1b1a:	d157      	bne.n	1bcc <__aeabi_fadd+0x220>
    1b1c:	4463      	add	r3, ip
    1b1e:	2401      	movs	r4, #1
    1b20:	015a      	lsls	r2, r3, #5
    1b22:	d5af      	bpl.n	1a84 <__aeabi_fadd+0xd8>
    1b24:	2402      	movs	r4, #2
    1b26:	e7dd      	b.n	1ae4 <__aeabi_fadd+0x138>
    1b28:	2a00      	cmp	r2, #0
    1b2a:	d124      	bne.n	1b76 <__aeabi_fadd+0x1ca>
    1b2c:	1c62      	adds	r2, r4, #1
    1b2e:	b2d2      	uxtb	r2, r2
    1b30:	2a01      	cmp	r2, #1
    1b32:	ddde      	ble.n	1af2 <__aeabi_fadd+0x146>
    1b34:	1bde      	subs	r6, r3, r7
    1b36:	0172      	lsls	r2, r6, #5
    1b38:	d535      	bpl.n	1ba6 <__aeabi_fadd+0x1fa>
    1b3a:	1afe      	subs	r6, r7, r3
    1b3c:	000d      	movs	r5, r1
    1b3e:	e75c      	b.n	19fa <__aeabi_fadd+0x4e>
    1b40:	002a      	movs	r2, r5
    1b42:	2300      	movs	r3, #0
    1b44:	e77e      	b.n	1a44 <__aeabi_fadd+0x98>
    1b46:	0033      	movs	r3, r6
    1b48:	4a60      	ldr	r2, [pc, #384]	; (1ccc <__aeabi_fadd+0x320>)
    1b4a:	1a24      	subs	r4, r4, r0
    1b4c:	4013      	ands	r3, r2
    1b4e:	e768      	b.n	1a22 <__aeabi_fadd+0x76>
    1b50:	2900      	cmp	r1, #0
    1b52:	d163      	bne.n	1c1c <__aeabi_fadd+0x270>
    1b54:	1c61      	adds	r1, r4, #1
    1b56:	b2c8      	uxtb	r0, r1
    1b58:	2801      	cmp	r0, #1
    1b5a:	dd4e      	ble.n	1bfa <__aeabi_fadd+0x24e>
    1b5c:	29ff      	cmp	r1, #255	; 0xff
    1b5e:	d049      	beq.n	1bf4 <__aeabi_fadd+0x248>
    1b60:	4463      	add	r3, ip
    1b62:	085b      	lsrs	r3, r3, #1
    1b64:	000c      	movs	r4, r1
    1b66:	e75c      	b.n	1a22 <__aeabi_fadd+0x76>
    1b68:	2aff      	cmp	r2, #255	; 0xff
    1b6a:	d041      	beq.n	1bf0 <__aeabi_fadd+0x244>
    1b6c:	000a      	movs	r2, r1
    1b6e:	e779      	b.n	1a64 <__aeabi_fadd+0xb8>
    1b70:	2201      	movs	r2, #1
    1b72:	1a9b      	subs	r3, r3, r2
    1b74:	e784      	b.n	1a80 <__aeabi_fadd+0xd4>
    1b76:	2c00      	cmp	r4, #0
    1b78:	d01d      	beq.n	1bb6 <__aeabi_fadd+0x20a>
    1b7a:	28ff      	cmp	r0, #255	; 0xff
    1b7c:	d022      	beq.n	1bc4 <__aeabi_fadd+0x218>
    1b7e:	2480      	movs	r4, #128	; 0x80
    1b80:	04e4      	lsls	r4, r4, #19
    1b82:	4252      	negs	r2, r2
    1b84:	4323      	orrs	r3, r4
    1b86:	2a1b      	cmp	r2, #27
    1b88:	dd00      	ble.n	1b8c <__aeabi_fadd+0x1e0>
    1b8a:	e08a      	b.n	1ca2 <__aeabi_fadd+0x2f6>
    1b8c:	001c      	movs	r4, r3
    1b8e:	2520      	movs	r5, #32
    1b90:	40d4      	lsrs	r4, r2
    1b92:	1aaa      	subs	r2, r5, r2
    1b94:	4093      	lsls	r3, r2
    1b96:	1e5a      	subs	r2, r3, #1
    1b98:	4193      	sbcs	r3, r2
    1b9a:	4323      	orrs	r3, r4
    1b9c:	4662      	mov	r2, ip
    1b9e:	0004      	movs	r4, r0
    1ba0:	1ad3      	subs	r3, r2, r3
    1ba2:	000d      	movs	r5, r1
    1ba4:	e725      	b.n	19f2 <__aeabi_fadd+0x46>
    1ba6:	2e00      	cmp	r6, #0
    1ba8:	d000      	beq.n	1bac <__aeabi_fadd+0x200>
    1baa:	e726      	b.n	19fa <__aeabi_fadd+0x4e>
    1bac:	2200      	movs	r2, #0
    1bae:	2400      	movs	r4, #0
    1bb0:	e7a9      	b.n	1b06 <__aeabi_fadd+0x15a>
    1bb2:	000c      	movs	r4, r1
    1bb4:	e735      	b.n	1a22 <__aeabi_fadd+0x76>
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d04d      	beq.n	1c56 <__aeabi_fadd+0x2aa>
    1bba:	43d2      	mvns	r2, r2
    1bbc:	2a00      	cmp	r2, #0
    1bbe:	d0ed      	beq.n	1b9c <__aeabi_fadd+0x1f0>
    1bc0:	28ff      	cmp	r0, #255	; 0xff
    1bc2:	d1e0      	bne.n	1b86 <__aeabi_fadd+0x1da>
    1bc4:	4663      	mov	r3, ip
    1bc6:	24ff      	movs	r4, #255	; 0xff
    1bc8:	000d      	movs	r5, r1
    1bca:	e72a      	b.n	1a22 <__aeabi_fadd+0x76>
    1bcc:	29ff      	cmp	r1, #255	; 0xff
    1bce:	d00f      	beq.n	1bf0 <__aeabi_fadd+0x244>
    1bd0:	0001      	movs	r1, r0
    1bd2:	e773      	b.n	1abc <__aeabi_fadd+0x110>
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d061      	beq.n	1c9c <__aeabi_fadd+0x2f0>
    1bd8:	24ff      	movs	r4, #255	; 0xff
    1bda:	2f00      	cmp	r7, #0
    1bdc:	d100      	bne.n	1be0 <__aeabi_fadd+0x234>
    1bde:	e720      	b.n	1a22 <__aeabi_fadd+0x76>
    1be0:	2280      	movs	r2, #128	; 0x80
    1be2:	4641      	mov	r1, r8
    1be4:	03d2      	lsls	r2, r2, #15
    1be6:	4211      	tst	r1, r2
    1be8:	d002      	beq.n	1bf0 <__aeabi_fadd+0x244>
    1bea:	4216      	tst	r6, r2
    1bec:	d100      	bne.n	1bf0 <__aeabi_fadd+0x244>
    1bee:	003b      	movs	r3, r7
    1bf0:	24ff      	movs	r4, #255	; 0xff
    1bf2:	e716      	b.n	1a22 <__aeabi_fadd+0x76>
    1bf4:	24ff      	movs	r4, #255	; 0xff
    1bf6:	2300      	movs	r3, #0
    1bf8:	e724      	b.n	1a44 <__aeabi_fadd+0x98>
    1bfa:	2c00      	cmp	r4, #0
    1bfc:	d1ea      	bne.n	1bd4 <__aeabi_fadd+0x228>
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d058      	beq.n	1cb4 <__aeabi_fadd+0x308>
    1c02:	2f00      	cmp	r7, #0
    1c04:	d100      	bne.n	1c08 <__aeabi_fadd+0x25c>
    1c06:	e70c      	b.n	1a22 <__aeabi_fadd+0x76>
    1c08:	4463      	add	r3, ip
    1c0a:	015a      	lsls	r2, r3, #5
    1c0c:	d400      	bmi.n	1c10 <__aeabi_fadd+0x264>
    1c0e:	e739      	b.n	1a84 <__aeabi_fadd+0xd8>
    1c10:	4a2e      	ldr	r2, [pc, #184]	; (1ccc <__aeabi_fadd+0x320>)
    1c12:	000c      	movs	r4, r1
    1c14:	4013      	ands	r3, r2
    1c16:	e704      	b.n	1a22 <__aeabi_fadd+0x76>
    1c18:	2101      	movs	r1, #1
    1c1a:	e75c      	b.n	1ad6 <__aeabi_fadd+0x12a>
    1c1c:	2c00      	cmp	r4, #0
    1c1e:	d11e      	bne.n	1c5e <__aeabi_fadd+0x2b2>
    1c20:	2b00      	cmp	r3, #0
    1c22:	d040      	beq.n	1ca6 <__aeabi_fadd+0x2fa>
    1c24:	43c9      	mvns	r1, r1
    1c26:	2900      	cmp	r1, #0
    1c28:	d00b      	beq.n	1c42 <__aeabi_fadd+0x296>
    1c2a:	28ff      	cmp	r0, #255	; 0xff
    1c2c:	d036      	beq.n	1c9c <__aeabi_fadd+0x2f0>
    1c2e:	291b      	cmp	r1, #27
    1c30:	dc47      	bgt.n	1cc2 <__aeabi_fadd+0x316>
    1c32:	001c      	movs	r4, r3
    1c34:	2620      	movs	r6, #32
    1c36:	40cc      	lsrs	r4, r1
    1c38:	1a71      	subs	r1, r6, r1
    1c3a:	408b      	lsls	r3, r1
    1c3c:	1e59      	subs	r1, r3, #1
    1c3e:	418b      	sbcs	r3, r1
    1c40:	4323      	orrs	r3, r4
    1c42:	4463      	add	r3, ip
    1c44:	0004      	movs	r4, r0
    1c46:	e747      	b.n	1ad8 <__aeabi_fadd+0x12c>
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d118      	bne.n	1c7e <__aeabi_fadd+0x2d2>
    1c4c:	1e3b      	subs	r3, r7, #0
    1c4e:	d02d      	beq.n	1cac <__aeabi_fadd+0x300>
    1c50:	000d      	movs	r5, r1
    1c52:	24ff      	movs	r4, #255	; 0xff
    1c54:	e6e5      	b.n	1a22 <__aeabi_fadd+0x76>
    1c56:	003b      	movs	r3, r7
    1c58:	0004      	movs	r4, r0
    1c5a:	000d      	movs	r5, r1
    1c5c:	e6e1      	b.n	1a22 <__aeabi_fadd+0x76>
    1c5e:	28ff      	cmp	r0, #255	; 0xff
    1c60:	d01c      	beq.n	1c9c <__aeabi_fadd+0x2f0>
    1c62:	2480      	movs	r4, #128	; 0x80
    1c64:	04e4      	lsls	r4, r4, #19
    1c66:	4249      	negs	r1, r1
    1c68:	4323      	orrs	r3, r4
    1c6a:	e7e0      	b.n	1c2e <__aeabi_fadd+0x282>
    1c6c:	2f00      	cmp	r7, #0
    1c6e:	d100      	bne.n	1c72 <__aeabi_fadd+0x2c6>
    1c70:	e6d7      	b.n	1a22 <__aeabi_fadd+0x76>
    1c72:	1bde      	subs	r6, r3, r7
    1c74:	0172      	lsls	r2, r6, #5
    1c76:	d51f      	bpl.n	1cb8 <__aeabi_fadd+0x30c>
    1c78:	1afb      	subs	r3, r7, r3
    1c7a:	000d      	movs	r5, r1
    1c7c:	e6d1      	b.n	1a22 <__aeabi_fadd+0x76>
    1c7e:	24ff      	movs	r4, #255	; 0xff
    1c80:	2f00      	cmp	r7, #0
    1c82:	d100      	bne.n	1c86 <__aeabi_fadd+0x2da>
    1c84:	e6cd      	b.n	1a22 <__aeabi_fadd+0x76>
    1c86:	2280      	movs	r2, #128	; 0x80
    1c88:	4640      	mov	r0, r8
    1c8a:	03d2      	lsls	r2, r2, #15
    1c8c:	4210      	tst	r0, r2
    1c8e:	d0af      	beq.n	1bf0 <__aeabi_fadd+0x244>
    1c90:	4216      	tst	r6, r2
    1c92:	d1ad      	bne.n	1bf0 <__aeabi_fadd+0x244>
    1c94:	003b      	movs	r3, r7
    1c96:	000d      	movs	r5, r1
    1c98:	24ff      	movs	r4, #255	; 0xff
    1c9a:	e6c2      	b.n	1a22 <__aeabi_fadd+0x76>
    1c9c:	4663      	mov	r3, ip
    1c9e:	24ff      	movs	r4, #255	; 0xff
    1ca0:	e6bf      	b.n	1a22 <__aeabi_fadd+0x76>
    1ca2:	2301      	movs	r3, #1
    1ca4:	e77a      	b.n	1b9c <__aeabi_fadd+0x1f0>
    1ca6:	003b      	movs	r3, r7
    1ca8:	0004      	movs	r4, r0
    1caa:	e6ba      	b.n	1a22 <__aeabi_fadd+0x76>
    1cac:	2680      	movs	r6, #128	; 0x80
    1cae:	2200      	movs	r2, #0
    1cb0:	03f6      	lsls	r6, r6, #15
    1cb2:	e6f0      	b.n	1a96 <__aeabi_fadd+0xea>
    1cb4:	003b      	movs	r3, r7
    1cb6:	e6b4      	b.n	1a22 <__aeabi_fadd+0x76>
    1cb8:	1e33      	subs	r3, r6, #0
    1cba:	d000      	beq.n	1cbe <__aeabi_fadd+0x312>
    1cbc:	e6e2      	b.n	1a84 <__aeabi_fadd+0xd8>
    1cbe:	2200      	movs	r2, #0
    1cc0:	e721      	b.n	1b06 <__aeabi_fadd+0x15a>
    1cc2:	2301      	movs	r3, #1
    1cc4:	e7bd      	b.n	1c42 <__aeabi_fadd+0x296>
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	7dffffff 	.word	0x7dffffff
    1ccc:	fbffffff 	.word	0xfbffffff

00001cd0 <__aeabi_fdiv>:
    1cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd2:	4657      	mov	r7, sl
    1cd4:	464e      	mov	r6, r9
    1cd6:	46de      	mov	lr, fp
    1cd8:	4645      	mov	r5, r8
    1cda:	b5e0      	push	{r5, r6, r7, lr}
    1cdc:	0244      	lsls	r4, r0, #9
    1cde:	0043      	lsls	r3, r0, #1
    1ce0:	0fc6      	lsrs	r6, r0, #31
    1ce2:	b083      	sub	sp, #12
    1ce4:	1c0f      	adds	r7, r1, #0
    1ce6:	0a64      	lsrs	r4, r4, #9
    1ce8:	0e1b      	lsrs	r3, r3, #24
    1cea:	46b2      	mov	sl, r6
    1cec:	d053      	beq.n	1d96 <__aeabi_fdiv+0xc6>
    1cee:	2bff      	cmp	r3, #255	; 0xff
    1cf0:	d027      	beq.n	1d42 <__aeabi_fdiv+0x72>
    1cf2:	2280      	movs	r2, #128	; 0x80
    1cf4:	00e4      	lsls	r4, r4, #3
    1cf6:	04d2      	lsls	r2, r2, #19
    1cf8:	4314      	orrs	r4, r2
    1cfa:	227f      	movs	r2, #127	; 0x7f
    1cfc:	4252      	negs	r2, r2
    1cfe:	4690      	mov	r8, r2
    1d00:	4498      	add	r8, r3
    1d02:	2300      	movs	r3, #0
    1d04:	4699      	mov	r9, r3
    1d06:	469b      	mov	fp, r3
    1d08:	027d      	lsls	r5, r7, #9
    1d0a:	0078      	lsls	r0, r7, #1
    1d0c:	0ffb      	lsrs	r3, r7, #31
    1d0e:	0a6d      	lsrs	r5, r5, #9
    1d10:	0e00      	lsrs	r0, r0, #24
    1d12:	9300      	str	r3, [sp, #0]
    1d14:	d024      	beq.n	1d60 <__aeabi_fdiv+0x90>
    1d16:	28ff      	cmp	r0, #255	; 0xff
    1d18:	d046      	beq.n	1da8 <__aeabi_fdiv+0xd8>
    1d1a:	2380      	movs	r3, #128	; 0x80
    1d1c:	2100      	movs	r1, #0
    1d1e:	00ed      	lsls	r5, r5, #3
    1d20:	04db      	lsls	r3, r3, #19
    1d22:	431d      	orrs	r5, r3
    1d24:	387f      	subs	r0, #127	; 0x7f
    1d26:	4647      	mov	r7, r8
    1d28:	1a38      	subs	r0, r7, r0
    1d2a:	464f      	mov	r7, r9
    1d2c:	430f      	orrs	r7, r1
    1d2e:	00bf      	lsls	r7, r7, #2
    1d30:	46b9      	mov	r9, r7
    1d32:	0033      	movs	r3, r6
    1d34:	9a00      	ldr	r2, [sp, #0]
    1d36:	4f87      	ldr	r7, [pc, #540]	; (1f54 <__aeabi_fdiv+0x284>)
    1d38:	4053      	eors	r3, r2
    1d3a:	464a      	mov	r2, r9
    1d3c:	58ba      	ldr	r2, [r7, r2]
    1d3e:	9301      	str	r3, [sp, #4]
    1d40:	4697      	mov	pc, r2
    1d42:	2c00      	cmp	r4, #0
    1d44:	d14e      	bne.n	1de4 <__aeabi_fdiv+0x114>
    1d46:	2308      	movs	r3, #8
    1d48:	4699      	mov	r9, r3
    1d4a:	33f7      	adds	r3, #247	; 0xf7
    1d4c:	4698      	mov	r8, r3
    1d4e:	3bfd      	subs	r3, #253	; 0xfd
    1d50:	469b      	mov	fp, r3
    1d52:	027d      	lsls	r5, r7, #9
    1d54:	0078      	lsls	r0, r7, #1
    1d56:	0ffb      	lsrs	r3, r7, #31
    1d58:	0a6d      	lsrs	r5, r5, #9
    1d5a:	0e00      	lsrs	r0, r0, #24
    1d5c:	9300      	str	r3, [sp, #0]
    1d5e:	d1da      	bne.n	1d16 <__aeabi_fdiv+0x46>
    1d60:	2d00      	cmp	r5, #0
    1d62:	d126      	bne.n	1db2 <__aeabi_fdiv+0xe2>
    1d64:	2000      	movs	r0, #0
    1d66:	2101      	movs	r1, #1
    1d68:	0033      	movs	r3, r6
    1d6a:	9a00      	ldr	r2, [sp, #0]
    1d6c:	4f7a      	ldr	r7, [pc, #488]	; (1f58 <__aeabi_fdiv+0x288>)
    1d6e:	4053      	eors	r3, r2
    1d70:	4642      	mov	r2, r8
    1d72:	1a10      	subs	r0, r2, r0
    1d74:	464a      	mov	r2, r9
    1d76:	430a      	orrs	r2, r1
    1d78:	0092      	lsls	r2, r2, #2
    1d7a:	58ba      	ldr	r2, [r7, r2]
    1d7c:	001d      	movs	r5, r3
    1d7e:	4697      	mov	pc, r2
    1d80:	9b00      	ldr	r3, [sp, #0]
    1d82:	002c      	movs	r4, r5
    1d84:	469a      	mov	sl, r3
    1d86:	468b      	mov	fp, r1
    1d88:	465b      	mov	r3, fp
    1d8a:	2b02      	cmp	r3, #2
    1d8c:	d131      	bne.n	1df2 <__aeabi_fdiv+0x122>
    1d8e:	4653      	mov	r3, sl
    1d90:	21ff      	movs	r1, #255	; 0xff
    1d92:	2400      	movs	r4, #0
    1d94:	e038      	b.n	1e08 <__aeabi_fdiv+0x138>
    1d96:	2c00      	cmp	r4, #0
    1d98:	d117      	bne.n	1dca <__aeabi_fdiv+0xfa>
    1d9a:	2304      	movs	r3, #4
    1d9c:	4699      	mov	r9, r3
    1d9e:	2300      	movs	r3, #0
    1da0:	4698      	mov	r8, r3
    1da2:	3301      	adds	r3, #1
    1da4:	469b      	mov	fp, r3
    1da6:	e7af      	b.n	1d08 <__aeabi_fdiv+0x38>
    1da8:	20ff      	movs	r0, #255	; 0xff
    1daa:	2d00      	cmp	r5, #0
    1dac:	d10b      	bne.n	1dc6 <__aeabi_fdiv+0xf6>
    1dae:	2102      	movs	r1, #2
    1db0:	e7da      	b.n	1d68 <__aeabi_fdiv+0x98>
    1db2:	0028      	movs	r0, r5
    1db4:	f000 fcee 	bl	2794 <__clzsi2>
    1db8:	1f43      	subs	r3, r0, #5
    1dba:	409d      	lsls	r5, r3
    1dbc:	2376      	movs	r3, #118	; 0x76
    1dbe:	425b      	negs	r3, r3
    1dc0:	1a18      	subs	r0, r3, r0
    1dc2:	2100      	movs	r1, #0
    1dc4:	e7af      	b.n	1d26 <__aeabi_fdiv+0x56>
    1dc6:	2103      	movs	r1, #3
    1dc8:	e7ad      	b.n	1d26 <__aeabi_fdiv+0x56>
    1dca:	0020      	movs	r0, r4
    1dcc:	f000 fce2 	bl	2794 <__clzsi2>
    1dd0:	1f43      	subs	r3, r0, #5
    1dd2:	409c      	lsls	r4, r3
    1dd4:	2376      	movs	r3, #118	; 0x76
    1dd6:	425b      	negs	r3, r3
    1dd8:	1a1b      	subs	r3, r3, r0
    1dda:	4698      	mov	r8, r3
    1ddc:	2300      	movs	r3, #0
    1dde:	4699      	mov	r9, r3
    1de0:	469b      	mov	fp, r3
    1de2:	e791      	b.n	1d08 <__aeabi_fdiv+0x38>
    1de4:	230c      	movs	r3, #12
    1de6:	4699      	mov	r9, r3
    1de8:	33f3      	adds	r3, #243	; 0xf3
    1dea:	4698      	mov	r8, r3
    1dec:	3bfc      	subs	r3, #252	; 0xfc
    1dee:	469b      	mov	fp, r3
    1df0:	e78a      	b.n	1d08 <__aeabi_fdiv+0x38>
    1df2:	2b03      	cmp	r3, #3
    1df4:	d100      	bne.n	1df8 <__aeabi_fdiv+0x128>
    1df6:	e0a5      	b.n	1f44 <__aeabi_fdiv+0x274>
    1df8:	4655      	mov	r5, sl
    1dfa:	2b01      	cmp	r3, #1
    1dfc:	d000      	beq.n	1e00 <__aeabi_fdiv+0x130>
    1dfe:	e081      	b.n	1f04 <__aeabi_fdiv+0x234>
    1e00:	2301      	movs	r3, #1
    1e02:	2100      	movs	r1, #0
    1e04:	2400      	movs	r4, #0
    1e06:	402b      	ands	r3, r5
    1e08:	0264      	lsls	r4, r4, #9
    1e0a:	05c9      	lsls	r1, r1, #23
    1e0c:	0a60      	lsrs	r0, r4, #9
    1e0e:	07db      	lsls	r3, r3, #31
    1e10:	4308      	orrs	r0, r1
    1e12:	4318      	orrs	r0, r3
    1e14:	b003      	add	sp, #12
    1e16:	bc3c      	pop	{r2, r3, r4, r5}
    1e18:	4690      	mov	r8, r2
    1e1a:	4699      	mov	r9, r3
    1e1c:	46a2      	mov	sl, r4
    1e1e:	46ab      	mov	fp, r5
    1e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e22:	2480      	movs	r4, #128	; 0x80
    1e24:	2300      	movs	r3, #0
    1e26:	03e4      	lsls	r4, r4, #15
    1e28:	21ff      	movs	r1, #255	; 0xff
    1e2a:	e7ed      	b.n	1e08 <__aeabi_fdiv+0x138>
    1e2c:	21ff      	movs	r1, #255	; 0xff
    1e2e:	2400      	movs	r4, #0
    1e30:	e7ea      	b.n	1e08 <__aeabi_fdiv+0x138>
    1e32:	2301      	movs	r3, #1
    1e34:	1a59      	subs	r1, r3, r1
    1e36:	291b      	cmp	r1, #27
    1e38:	dd66      	ble.n	1f08 <__aeabi_fdiv+0x238>
    1e3a:	9a01      	ldr	r2, [sp, #4]
    1e3c:	4013      	ands	r3, r2
    1e3e:	2100      	movs	r1, #0
    1e40:	2400      	movs	r4, #0
    1e42:	e7e1      	b.n	1e08 <__aeabi_fdiv+0x138>
    1e44:	2380      	movs	r3, #128	; 0x80
    1e46:	03db      	lsls	r3, r3, #15
    1e48:	421c      	tst	r4, r3
    1e4a:	d038      	beq.n	1ebe <__aeabi_fdiv+0x1ee>
    1e4c:	421d      	tst	r5, r3
    1e4e:	d051      	beq.n	1ef4 <__aeabi_fdiv+0x224>
    1e50:	431c      	orrs	r4, r3
    1e52:	0264      	lsls	r4, r4, #9
    1e54:	0a64      	lsrs	r4, r4, #9
    1e56:	0033      	movs	r3, r6
    1e58:	21ff      	movs	r1, #255	; 0xff
    1e5a:	e7d5      	b.n	1e08 <__aeabi_fdiv+0x138>
    1e5c:	0163      	lsls	r3, r4, #5
    1e5e:	016c      	lsls	r4, r5, #5
    1e60:	42a3      	cmp	r3, r4
    1e62:	d23b      	bcs.n	1edc <__aeabi_fdiv+0x20c>
    1e64:	261b      	movs	r6, #27
    1e66:	2100      	movs	r1, #0
    1e68:	3801      	subs	r0, #1
    1e6a:	2501      	movs	r5, #1
    1e6c:	001f      	movs	r7, r3
    1e6e:	0049      	lsls	r1, r1, #1
    1e70:	005b      	lsls	r3, r3, #1
    1e72:	2f00      	cmp	r7, #0
    1e74:	db01      	blt.n	1e7a <__aeabi_fdiv+0x1aa>
    1e76:	429c      	cmp	r4, r3
    1e78:	d801      	bhi.n	1e7e <__aeabi_fdiv+0x1ae>
    1e7a:	1b1b      	subs	r3, r3, r4
    1e7c:	4329      	orrs	r1, r5
    1e7e:	3e01      	subs	r6, #1
    1e80:	2e00      	cmp	r6, #0
    1e82:	d1f3      	bne.n	1e6c <__aeabi_fdiv+0x19c>
    1e84:	001c      	movs	r4, r3
    1e86:	1e63      	subs	r3, r4, #1
    1e88:	419c      	sbcs	r4, r3
    1e8a:	430c      	orrs	r4, r1
    1e8c:	0001      	movs	r1, r0
    1e8e:	317f      	adds	r1, #127	; 0x7f
    1e90:	2900      	cmp	r1, #0
    1e92:	ddce      	ble.n	1e32 <__aeabi_fdiv+0x162>
    1e94:	0763      	lsls	r3, r4, #29
    1e96:	d004      	beq.n	1ea2 <__aeabi_fdiv+0x1d2>
    1e98:	230f      	movs	r3, #15
    1e9a:	4023      	ands	r3, r4
    1e9c:	2b04      	cmp	r3, #4
    1e9e:	d000      	beq.n	1ea2 <__aeabi_fdiv+0x1d2>
    1ea0:	3404      	adds	r4, #4
    1ea2:	0123      	lsls	r3, r4, #4
    1ea4:	d503      	bpl.n	1eae <__aeabi_fdiv+0x1de>
    1ea6:	0001      	movs	r1, r0
    1ea8:	4b2c      	ldr	r3, [pc, #176]	; (1f5c <__aeabi_fdiv+0x28c>)
    1eaa:	3180      	adds	r1, #128	; 0x80
    1eac:	401c      	ands	r4, r3
    1eae:	29fe      	cmp	r1, #254	; 0xfe
    1eb0:	dd0d      	ble.n	1ece <__aeabi_fdiv+0x1fe>
    1eb2:	2301      	movs	r3, #1
    1eb4:	9a01      	ldr	r2, [sp, #4]
    1eb6:	21ff      	movs	r1, #255	; 0xff
    1eb8:	4013      	ands	r3, r2
    1eba:	2400      	movs	r4, #0
    1ebc:	e7a4      	b.n	1e08 <__aeabi_fdiv+0x138>
    1ebe:	2380      	movs	r3, #128	; 0x80
    1ec0:	03db      	lsls	r3, r3, #15
    1ec2:	431c      	orrs	r4, r3
    1ec4:	0264      	lsls	r4, r4, #9
    1ec6:	0a64      	lsrs	r4, r4, #9
    1ec8:	0033      	movs	r3, r6
    1eca:	21ff      	movs	r1, #255	; 0xff
    1ecc:	e79c      	b.n	1e08 <__aeabi_fdiv+0x138>
    1ece:	2301      	movs	r3, #1
    1ed0:	9a01      	ldr	r2, [sp, #4]
    1ed2:	01a4      	lsls	r4, r4, #6
    1ed4:	0a64      	lsrs	r4, r4, #9
    1ed6:	b2c9      	uxtb	r1, r1
    1ed8:	4013      	ands	r3, r2
    1eda:	e795      	b.n	1e08 <__aeabi_fdiv+0x138>
    1edc:	1b1b      	subs	r3, r3, r4
    1ede:	261a      	movs	r6, #26
    1ee0:	2101      	movs	r1, #1
    1ee2:	e7c2      	b.n	1e6a <__aeabi_fdiv+0x19a>
    1ee4:	9b00      	ldr	r3, [sp, #0]
    1ee6:	468b      	mov	fp, r1
    1ee8:	469a      	mov	sl, r3
    1eea:	2400      	movs	r4, #0
    1eec:	e74c      	b.n	1d88 <__aeabi_fdiv+0xb8>
    1eee:	0263      	lsls	r3, r4, #9
    1ef0:	d5e5      	bpl.n	1ebe <__aeabi_fdiv+0x1ee>
    1ef2:	2500      	movs	r5, #0
    1ef4:	2480      	movs	r4, #128	; 0x80
    1ef6:	03e4      	lsls	r4, r4, #15
    1ef8:	432c      	orrs	r4, r5
    1efa:	0264      	lsls	r4, r4, #9
    1efc:	0a64      	lsrs	r4, r4, #9
    1efe:	9b00      	ldr	r3, [sp, #0]
    1f00:	21ff      	movs	r1, #255	; 0xff
    1f02:	e781      	b.n	1e08 <__aeabi_fdiv+0x138>
    1f04:	9501      	str	r5, [sp, #4]
    1f06:	e7c1      	b.n	1e8c <__aeabi_fdiv+0x1bc>
    1f08:	0023      	movs	r3, r4
    1f0a:	2020      	movs	r0, #32
    1f0c:	40cb      	lsrs	r3, r1
    1f0e:	1a41      	subs	r1, r0, r1
    1f10:	408c      	lsls	r4, r1
    1f12:	1e61      	subs	r1, r4, #1
    1f14:	418c      	sbcs	r4, r1
    1f16:	431c      	orrs	r4, r3
    1f18:	0763      	lsls	r3, r4, #29
    1f1a:	d004      	beq.n	1f26 <__aeabi_fdiv+0x256>
    1f1c:	230f      	movs	r3, #15
    1f1e:	4023      	ands	r3, r4
    1f20:	2b04      	cmp	r3, #4
    1f22:	d000      	beq.n	1f26 <__aeabi_fdiv+0x256>
    1f24:	3404      	adds	r4, #4
    1f26:	0163      	lsls	r3, r4, #5
    1f28:	d505      	bpl.n	1f36 <__aeabi_fdiv+0x266>
    1f2a:	2301      	movs	r3, #1
    1f2c:	9a01      	ldr	r2, [sp, #4]
    1f2e:	2101      	movs	r1, #1
    1f30:	4013      	ands	r3, r2
    1f32:	2400      	movs	r4, #0
    1f34:	e768      	b.n	1e08 <__aeabi_fdiv+0x138>
    1f36:	2301      	movs	r3, #1
    1f38:	9a01      	ldr	r2, [sp, #4]
    1f3a:	01a4      	lsls	r4, r4, #6
    1f3c:	0a64      	lsrs	r4, r4, #9
    1f3e:	4013      	ands	r3, r2
    1f40:	2100      	movs	r1, #0
    1f42:	e761      	b.n	1e08 <__aeabi_fdiv+0x138>
    1f44:	2380      	movs	r3, #128	; 0x80
    1f46:	03db      	lsls	r3, r3, #15
    1f48:	431c      	orrs	r4, r3
    1f4a:	0264      	lsls	r4, r4, #9
    1f4c:	0a64      	lsrs	r4, r4, #9
    1f4e:	4653      	mov	r3, sl
    1f50:	21ff      	movs	r1, #255	; 0xff
    1f52:	e759      	b.n	1e08 <__aeabi_fdiv+0x138>
    1f54:	00002abc 	.word	0x00002abc
    1f58:	00002afc 	.word	0x00002afc
    1f5c:	f7ffffff 	.word	0xf7ffffff

00001f60 <__eqsf2>:
    1f60:	b570      	push	{r4, r5, r6, lr}
    1f62:	0042      	lsls	r2, r0, #1
    1f64:	0245      	lsls	r5, r0, #9
    1f66:	024e      	lsls	r6, r1, #9
    1f68:	004c      	lsls	r4, r1, #1
    1f6a:	0fc3      	lsrs	r3, r0, #31
    1f6c:	0a6d      	lsrs	r5, r5, #9
    1f6e:	0e12      	lsrs	r2, r2, #24
    1f70:	0a76      	lsrs	r6, r6, #9
    1f72:	0e24      	lsrs	r4, r4, #24
    1f74:	0fc9      	lsrs	r1, r1, #31
    1f76:	2001      	movs	r0, #1
    1f78:	2aff      	cmp	r2, #255	; 0xff
    1f7a:	d006      	beq.n	1f8a <__eqsf2+0x2a>
    1f7c:	2cff      	cmp	r4, #255	; 0xff
    1f7e:	d003      	beq.n	1f88 <__eqsf2+0x28>
    1f80:	42a2      	cmp	r2, r4
    1f82:	d101      	bne.n	1f88 <__eqsf2+0x28>
    1f84:	42b5      	cmp	r5, r6
    1f86:	d006      	beq.n	1f96 <__eqsf2+0x36>
    1f88:	bd70      	pop	{r4, r5, r6, pc}
    1f8a:	2d00      	cmp	r5, #0
    1f8c:	d1fc      	bne.n	1f88 <__eqsf2+0x28>
    1f8e:	2cff      	cmp	r4, #255	; 0xff
    1f90:	d1fa      	bne.n	1f88 <__eqsf2+0x28>
    1f92:	2e00      	cmp	r6, #0
    1f94:	d1f8      	bne.n	1f88 <__eqsf2+0x28>
    1f96:	428b      	cmp	r3, r1
    1f98:	d006      	beq.n	1fa8 <__eqsf2+0x48>
    1f9a:	2001      	movs	r0, #1
    1f9c:	2a00      	cmp	r2, #0
    1f9e:	d1f3      	bne.n	1f88 <__eqsf2+0x28>
    1fa0:	0028      	movs	r0, r5
    1fa2:	1e45      	subs	r5, r0, #1
    1fa4:	41a8      	sbcs	r0, r5
    1fa6:	e7ef      	b.n	1f88 <__eqsf2+0x28>
    1fa8:	2000      	movs	r0, #0
    1faa:	e7ed      	b.n	1f88 <__eqsf2+0x28>

00001fac <__gesf2>:
    1fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fae:	0042      	lsls	r2, r0, #1
    1fb0:	0245      	lsls	r5, r0, #9
    1fb2:	024c      	lsls	r4, r1, #9
    1fb4:	0fc3      	lsrs	r3, r0, #31
    1fb6:	0048      	lsls	r0, r1, #1
    1fb8:	0a6d      	lsrs	r5, r5, #9
    1fba:	0e12      	lsrs	r2, r2, #24
    1fbc:	0a64      	lsrs	r4, r4, #9
    1fbe:	0e00      	lsrs	r0, r0, #24
    1fc0:	0fc9      	lsrs	r1, r1, #31
    1fc2:	2aff      	cmp	r2, #255	; 0xff
    1fc4:	d01e      	beq.n	2004 <STACK_SIZE+0x4>
    1fc6:	28ff      	cmp	r0, #255	; 0xff
    1fc8:	d021      	beq.n	200e <STACK_SIZE+0xe>
    1fca:	2a00      	cmp	r2, #0
    1fcc:	d10a      	bne.n	1fe4 <__gesf2+0x38>
    1fce:	426e      	negs	r6, r5
    1fd0:	416e      	adcs	r6, r5
    1fd2:	b2f6      	uxtb	r6, r6
    1fd4:	2800      	cmp	r0, #0
    1fd6:	d10f      	bne.n	1ff8 <__gesf2+0x4c>
    1fd8:	2c00      	cmp	r4, #0
    1fda:	d10d      	bne.n	1ff8 <__gesf2+0x4c>
    1fdc:	2000      	movs	r0, #0
    1fde:	2d00      	cmp	r5, #0
    1fe0:	d009      	beq.n	1ff6 <__gesf2+0x4a>
    1fe2:	e005      	b.n	1ff0 <__gesf2+0x44>
    1fe4:	2800      	cmp	r0, #0
    1fe6:	d101      	bne.n	1fec <__gesf2+0x40>
    1fe8:	2c00      	cmp	r4, #0
    1fea:	d001      	beq.n	1ff0 <__gesf2+0x44>
    1fec:	428b      	cmp	r3, r1
    1fee:	d011      	beq.n	2014 <STACK_SIZE+0x14>
    1ff0:	2101      	movs	r1, #1
    1ff2:	4258      	negs	r0, r3
    1ff4:	4308      	orrs	r0, r1
    1ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ff8:	2e00      	cmp	r6, #0
    1ffa:	d0f7      	beq.n	1fec <__gesf2+0x40>
    1ffc:	2001      	movs	r0, #1
    1ffe:	3901      	subs	r1, #1
    2000:	4308      	orrs	r0, r1
    2002:	e7f8      	b.n	1ff6 <__gesf2+0x4a>
    2004:	2d00      	cmp	r5, #0
    2006:	d0de      	beq.n	1fc6 <__gesf2+0x1a>
    2008:	2002      	movs	r0, #2
    200a:	4240      	negs	r0, r0
    200c:	e7f3      	b.n	1ff6 <__gesf2+0x4a>
    200e:	2c00      	cmp	r4, #0
    2010:	d0db      	beq.n	1fca <__gesf2+0x1e>
    2012:	e7f9      	b.n	2008 <STACK_SIZE+0x8>
    2014:	4282      	cmp	r2, r0
    2016:	dceb      	bgt.n	1ff0 <__gesf2+0x44>
    2018:	db04      	blt.n	2024 <STACK_SIZE+0x24>
    201a:	42a5      	cmp	r5, r4
    201c:	d8e8      	bhi.n	1ff0 <__gesf2+0x44>
    201e:	2000      	movs	r0, #0
    2020:	42a5      	cmp	r5, r4
    2022:	d2e8      	bcs.n	1ff6 <__gesf2+0x4a>
    2024:	2101      	movs	r1, #1
    2026:	1e58      	subs	r0, r3, #1
    2028:	4308      	orrs	r0, r1
    202a:	e7e4      	b.n	1ff6 <__gesf2+0x4a>

0000202c <__lesf2>:
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
    202e:	0042      	lsls	r2, r0, #1
    2030:	024d      	lsls	r5, r1, #9
    2032:	004c      	lsls	r4, r1, #1
    2034:	0246      	lsls	r6, r0, #9
    2036:	0a76      	lsrs	r6, r6, #9
    2038:	0e12      	lsrs	r2, r2, #24
    203a:	0fc3      	lsrs	r3, r0, #31
    203c:	0a6d      	lsrs	r5, r5, #9
    203e:	0e24      	lsrs	r4, r4, #24
    2040:	0fc9      	lsrs	r1, r1, #31
    2042:	2aff      	cmp	r2, #255	; 0xff
    2044:	d016      	beq.n	2074 <__lesf2+0x48>
    2046:	2cff      	cmp	r4, #255	; 0xff
    2048:	d018      	beq.n	207c <__lesf2+0x50>
    204a:	2a00      	cmp	r2, #0
    204c:	d10a      	bne.n	2064 <__lesf2+0x38>
    204e:	4270      	negs	r0, r6
    2050:	4170      	adcs	r0, r6
    2052:	b2c0      	uxtb	r0, r0
    2054:	2c00      	cmp	r4, #0
    2056:	d015      	beq.n	2084 <__lesf2+0x58>
    2058:	2800      	cmp	r0, #0
    205a:	d005      	beq.n	2068 <__lesf2+0x3c>
    205c:	2001      	movs	r0, #1
    205e:	3901      	subs	r1, #1
    2060:	4308      	orrs	r0, r1
    2062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2064:	2c00      	cmp	r4, #0
    2066:	d013      	beq.n	2090 <__lesf2+0x64>
    2068:	4299      	cmp	r1, r3
    206a:	d014      	beq.n	2096 <__lesf2+0x6a>
    206c:	2001      	movs	r0, #1
    206e:	425b      	negs	r3, r3
    2070:	4318      	orrs	r0, r3
    2072:	e7f6      	b.n	2062 <__lesf2+0x36>
    2074:	2002      	movs	r0, #2
    2076:	2e00      	cmp	r6, #0
    2078:	d1f3      	bne.n	2062 <__lesf2+0x36>
    207a:	e7e4      	b.n	2046 <__lesf2+0x1a>
    207c:	2002      	movs	r0, #2
    207e:	2d00      	cmp	r5, #0
    2080:	d1ef      	bne.n	2062 <__lesf2+0x36>
    2082:	e7e2      	b.n	204a <__lesf2+0x1e>
    2084:	2d00      	cmp	r5, #0
    2086:	d1e7      	bne.n	2058 <__lesf2+0x2c>
    2088:	2000      	movs	r0, #0
    208a:	2e00      	cmp	r6, #0
    208c:	d0e9      	beq.n	2062 <__lesf2+0x36>
    208e:	e7ed      	b.n	206c <__lesf2+0x40>
    2090:	2d00      	cmp	r5, #0
    2092:	d1e9      	bne.n	2068 <__lesf2+0x3c>
    2094:	e7ea      	b.n	206c <__lesf2+0x40>
    2096:	42a2      	cmp	r2, r4
    2098:	dc06      	bgt.n	20a8 <__lesf2+0x7c>
    209a:	dbdf      	blt.n	205c <__lesf2+0x30>
    209c:	42ae      	cmp	r6, r5
    209e:	d803      	bhi.n	20a8 <__lesf2+0x7c>
    20a0:	2000      	movs	r0, #0
    20a2:	42ae      	cmp	r6, r5
    20a4:	d3da      	bcc.n	205c <__lesf2+0x30>
    20a6:	e7dc      	b.n	2062 <__lesf2+0x36>
    20a8:	2001      	movs	r0, #1
    20aa:	4249      	negs	r1, r1
    20ac:	4308      	orrs	r0, r1
    20ae:	e7d8      	b.n	2062 <__lesf2+0x36>

000020b0 <__aeabi_fmul>:
    20b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20b2:	4657      	mov	r7, sl
    20b4:	464e      	mov	r6, r9
    20b6:	4645      	mov	r5, r8
    20b8:	46de      	mov	lr, fp
    20ba:	b5e0      	push	{r5, r6, r7, lr}
    20bc:	0247      	lsls	r7, r0, #9
    20be:	0046      	lsls	r6, r0, #1
    20c0:	4688      	mov	r8, r1
    20c2:	0a7f      	lsrs	r7, r7, #9
    20c4:	0e36      	lsrs	r6, r6, #24
    20c6:	0fc4      	lsrs	r4, r0, #31
    20c8:	2e00      	cmp	r6, #0
    20ca:	d047      	beq.n	215c <__aeabi_fmul+0xac>
    20cc:	2eff      	cmp	r6, #255	; 0xff
    20ce:	d024      	beq.n	211a <__aeabi_fmul+0x6a>
    20d0:	00fb      	lsls	r3, r7, #3
    20d2:	2780      	movs	r7, #128	; 0x80
    20d4:	04ff      	lsls	r7, r7, #19
    20d6:	431f      	orrs	r7, r3
    20d8:	2300      	movs	r3, #0
    20da:	4699      	mov	r9, r3
    20dc:	469a      	mov	sl, r3
    20de:	3e7f      	subs	r6, #127	; 0x7f
    20e0:	4643      	mov	r3, r8
    20e2:	025d      	lsls	r5, r3, #9
    20e4:	0058      	lsls	r0, r3, #1
    20e6:	0fdb      	lsrs	r3, r3, #31
    20e8:	0a6d      	lsrs	r5, r5, #9
    20ea:	0e00      	lsrs	r0, r0, #24
    20ec:	4698      	mov	r8, r3
    20ee:	d043      	beq.n	2178 <__aeabi_fmul+0xc8>
    20f0:	28ff      	cmp	r0, #255	; 0xff
    20f2:	d03b      	beq.n	216c <__aeabi_fmul+0xbc>
    20f4:	00eb      	lsls	r3, r5, #3
    20f6:	2580      	movs	r5, #128	; 0x80
    20f8:	2200      	movs	r2, #0
    20fa:	04ed      	lsls	r5, r5, #19
    20fc:	431d      	orrs	r5, r3
    20fe:	387f      	subs	r0, #127	; 0x7f
    2100:	1836      	adds	r6, r6, r0
    2102:	1c73      	adds	r3, r6, #1
    2104:	4641      	mov	r1, r8
    2106:	469b      	mov	fp, r3
    2108:	464b      	mov	r3, r9
    210a:	4061      	eors	r1, r4
    210c:	4313      	orrs	r3, r2
    210e:	2b0f      	cmp	r3, #15
    2110:	d864      	bhi.n	21dc <__aeabi_fmul+0x12c>
    2112:	4875      	ldr	r0, [pc, #468]	; (22e8 <__aeabi_fmul+0x238>)
    2114:	009b      	lsls	r3, r3, #2
    2116:	58c3      	ldr	r3, [r0, r3]
    2118:	469f      	mov	pc, r3
    211a:	2f00      	cmp	r7, #0
    211c:	d142      	bne.n	21a4 <__aeabi_fmul+0xf4>
    211e:	2308      	movs	r3, #8
    2120:	4699      	mov	r9, r3
    2122:	3b06      	subs	r3, #6
    2124:	26ff      	movs	r6, #255	; 0xff
    2126:	469a      	mov	sl, r3
    2128:	e7da      	b.n	20e0 <__aeabi_fmul+0x30>
    212a:	4641      	mov	r1, r8
    212c:	2a02      	cmp	r2, #2
    212e:	d028      	beq.n	2182 <__aeabi_fmul+0xd2>
    2130:	2a03      	cmp	r2, #3
    2132:	d100      	bne.n	2136 <__aeabi_fmul+0x86>
    2134:	e0ce      	b.n	22d4 <__aeabi_fmul+0x224>
    2136:	2a01      	cmp	r2, #1
    2138:	d000      	beq.n	213c <__aeabi_fmul+0x8c>
    213a:	e0ac      	b.n	2296 <__aeabi_fmul+0x1e6>
    213c:	4011      	ands	r1, r2
    213e:	2000      	movs	r0, #0
    2140:	2200      	movs	r2, #0
    2142:	b2cc      	uxtb	r4, r1
    2144:	0240      	lsls	r0, r0, #9
    2146:	05d2      	lsls	r2, r2, #23
    2148:	0a40      	lsrs	r0, r0, #9
    214a:	07e4      	lsls	r4, r4, #31
    214c:	4310      	orrs	r0, r2
    214e:	4320      	orrs	r0, r4
    2150:	bc3c      	pop	{r2, r3, r4, r5}
    2152:	4690      	mov	r8, r2
    2154:	4699      	mov	r9, r3
    2156:	46a2      	mov	sl, r4
    2158:	46ab      	mov	fp, r5
    215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    215c:	2f00      	cmp	r7, #0
    215e:	d115      	bne.n	218c <__aeabi_fmul+0xdc>
    2160:	2304      	movs	r3, #4
    2162:	4699      	mov	r9, r3
    2164:	3b03      	subs	r3, #3
    2166:	2600      	movs	r6, #0
    2168:	469a      	mov	sl, r3
    216a:	e7b9      	b.n	20e0 <__aeabi_fmul+0x30>
    216c:	20ff      	movs	r0, #255	; 0xff
    216e:	2202      	movs	r2, #2
    2170:	2d00      	cmp	r5, #0
    2172:	d0c5      	beq.n	2100 <__aeabi_fmul+0x50>
    2174:	2203      	movs	r2, #3
    2176:	e7c3      	b.n	2100 <__aeabi_fmul+0x50>
    2178:	2d00      	cmp	r5, #0
    217a:	d119      	bne.n	21b0 <__aeabi_fmul+0x100>
    217c:	2000      	movs	r0, #0
    217e:	2201      	movs	r2, #1
    2180:	e7be      	b.n	2100 <__aeabi_fmul+0x50>
    2182:	2401      	movs	r4, #1
    2184:	22ff      	movs	r2, #255	; 0xff
    2186:	400c      	ands	r4, r1
    2188:	2000      	movs	r0, #0
    218a:	e7db      	b.n	2144 <__aeabi_fmul+0x94>
    218c:	0038      	movs	r0, r7
    218e:	f000 fb01 	bl	2794 <__clzsi2>
    2192:	2676      	movs	r6, #118	; 0x76
    2194:	1f43      	subs	r3, r0, #5
    2196:	409f      	lsls	r7, r3
    2198:	2300      	movs	r3, #0
    219a:	4276      	negs	r6, r6
    219c:	1a36      	subs	r6, r6, r0
    219e:	4699      	mov	r9, r3
    21a0:	469a      	mov	sl, r3
    21a2:	e79d      	b.n	20e0 <__aeabi_fmul+0x30>
    21a4:	230c      	movs	r3, #12
    21a6:	4699      	mov	r9, r3
    21a8:	3b09      	subs	r3, #9
    21aa:	26ff      	movs	r6, #255	; 0xff
    21ac:	469a      	mov	sl, r3
    21ae:	e797      	b.n	20e0 <__aeabi_fmul+0x30>
    21b0:	0028      	movs	r0, r5
    21b2:	f000 faef 	bl	2794 <__clzsi2>
    21b6:	1f43      	subs	r3, r0, #5
    21b8:	409d      	lsls	r5, r3
    21ba:	2376      	movs	r3, #118	; 0x76
    21bc:	425b      	negs	r3, r3
    21be:	1a18      	subs	r0, r3, r0
    21c0:	2200      	movs	r2, #0
    21c2:	e79d      	b.n	2100 <__aeabi_fmul+0x50>
    21c4:	2080      	movs	r0, #128	; 0x80
    21c6:	2400      	movs	r4, #0
    21c8:	03c0      	lsls	r0, r0, #15
    21ca:	22ff      	movs	r2, #255	; 0xff
    21cc:	e7ba      	b.n	2144 <__aeabi_fmul+0x94>
    21ce:	003d      	movs	r5, r7
    21d0:	4652      	mov	r2, sl
    21d2:	e7ab      	b.n	212c <__aeabi_fmul+0x7c>
    21d4:	003d      	movs	r5, r7
    21d6:	0021      	movs	r1, r4
    21d8:	4652      	mov	r2, sl
    21da:	e7a7      	b.n	212c <__aeabi_fmul+0x7c>
    21dc:	0c3b      	lsrs	r3, r7, #16
    21de:	469c      	mov	ip, r3
    21e0:	042a      	lsls	r2, r5, #16
    21e2:	0c12      	lsrs	r2, r2, #16
    21e4:	0c2b      	lsrs	r3, r5, #16
    21e6:	0014      	movs	r4, r2
    21e8:	4660      	mov	r0, ip
    21ea:	4665      	mov	r5, ip
    21ec:	043f      	lsls	r7, r7, #16
    21ee:	0c3f      	lsrs	r7, r7, #16
    21f0:	437c      	muls	r4, r7
    21f2:	4342      	muls	r2, r0
    21f4:	435d      	muls	r5, r3
    21f6:	437b      	muls	r3, r7
    21f8:	0c27      	lsrs	r7, r4, #16
    21fa:	189b      	adds	r3, r3, r2
    21fc:	18ff      	adds	r7, r7, r3
    21fe:	42ba      	cmp	r2, r7
    2200:	d903      	bls.n	220a <__aeabi_fmul+0x15a>
    2202:	2380      	movs	r3, #128	; 0x80
    2204:	025b      	lsls	r3, r3, #9
    2206:	469c      	mov	ip, r3
    2208:	4465      	add	r5, ip
    220a:	0424      	lsls	r4, r4, #16
    220c:	043a      	lsls	r2, r7, #16
    220e:	0c24      	lsrs	r4, r4, #16
    2210:	1912      	adds	r2, r2, r4
    2212:	0193      	lsls	r3, r2, #6
    2214:	1e5c      	subs	r4, r3, #1
    2216:	41a3      	sbcs	r3, r4
    2218:	0c3f      	lsrs	r7, r7, #16
    221a:	0e92      	lsrs	r2, r2, #26
    221c:	197d      	adds	r5, r7, r5
    221e:	431a      	orrs	r2, r3
    2220:	01ad      	lsls	r5, r5, #6
    2222:	4315      	orrs	r5, r2
    2224:	012b      	lsls	r3, r5, #4
    2226:	d504      	bpl.n	2232 <__aeabi_fmul+0x182>
    2228:	2301      	movs	r3, #1
    222a:	465e      	mov	r6, fp
    222c:	086a      	lsrs	r2, r5, #1
    222e:	401d      	ands	r5, r3
    2230:	4315      	orrs	r5, r2
    2232:	0032      	movs	r2, r6
    2234:	327f      	adds	r2, #127	; 0x7f
    2236:	2a00      	cmp	r2, #0
    2238:	dd25      	ble.n	2286 <__aeabi_fmul+0x1d6>
    223a:	076b      	lsls	r3, r5, #29
    223c:	d004      	beq.n	2248 <__aeabi_fmul+0x198>
    223e:	230f      	movs	r3, #15
    2240:	402b      	ands	r3, r5
    2242:	2b04      	cmp	r3, #4
    2244:	d000      	beq.n	2248 <__aeabi_fmul+0x198>
    2246:	3504      	adds	r5, #4
    2248:	012b      	lsls	r3, r5, #4
    224a:	d503      	bpl.n	2254 <__aeabi_fmul+0x1a4>
    224c:	0032      	movs	r2, r6
    224e:	4b27      	ldr	r3, [pc, #156]	; (22ec <__aeabi_fmul+0x23c>)
    2250:	3280      	adds	r2, #128	; 0x80
    2252:	401d      	ands	r5, r3
    2254:	2afe      	cmp	r2, #254	; 0xfe
    2256:	dc94      	bgt.n	2182 <__aeabi_fmul+0xd2>
    2258:	2401      	movs	r4, #1
    225a:	01a8      	lsls	r0, r5, #6
    225c:	0a40      	lsrs	r0, r0, #9
    225e:	b2d2      	uxtb	r2, r2
    2260:	400c      	ands	r4, r1
    2262:	e76f      	b.n	2144 <__aeabi_fmul+0x94>
    2264:	2080      	movs	r0, #128	; 0x80
    2266:	03c0      	lsls	r0, r0, #15
    2268:	4207      	tst	r7, r0
    226a:	d007      	beq.n	227c <__aeabi_fmul+0x1cc>
    226c:	4205      	tst	r5, r0
    226e:	d105      	bne.n	227c <__aeabi_fmul+0x1cc>
    2270:	4328      	orrs	r0, r5
    2272:	0240      	lsls	r0, r0, #9
    2274:	0a40      	lsrs	r0, r0, #9
    2276:	4644      	mov	r4, r8
    2278:	22ff      	movs	r2, #255	; 0xff
    227a:	e763      	b.n	2144 <__aeabi_fmul+0x94>
    227c:	4338      	orrs	r0, r7
    227e:	0240      	lsls	r0, r0, #9
    2280:	0a40      	lsrs	r0, r0, #9
    2282:	22ff      	movs	r2, #255	; 0xff
    2284:	e75e      	b.n	2144 <__aeabi_fmul+0x94>
    2286:	2401      	movs	r4, #1
    2288:	1aa3      	subs	r3, r4, r2
    228a:	2b1b      	cmp	r3, #27
    228c:	dd05      	ble.n	229a <__aeabi_fmul+0x1ea>
    228e:	400c      	ands	r4, r1
    2290:	2200      	movs	r2, #0
    2292:	2000      	movs	r0, #0
    2294:	e756      	b.n	2144 <__aeabi_fmul+0x94>
    2296:	465e      	mov	r6, fp
    2298:	e7cb      	b.n	2232 <__aeabi_fmul+0x182>
    229a:	002a      	movs	r2, r5
    229c:	2020      	movs	r0, #32
    229e:	40da      	lsrs	r2, r3
    22a0:	1ac3      	subs	r3, r0, r3
    22a2:	409d      	lsls	r5, r3
    22a4:	002b      	movs	r3, r5
    22a6:	1e5d      	subs	r5, r3, #1
    22a8:	41ab      	sbcs	r3, r5
    22aa:	4313      	orrs	r3, r2
    22ac:	075a      	lsls	r2, r3, #29
    22ae:	d004      	beq.n	22ba <__aeabi_fmul+0x20a>
    22b0:	220f      	movs	r2, #15
    22b2:	401a      	ands	r2, r3
    22b4:	2a04      	cmp	r2, #4
    22b6:	d000      	beq.n	22ba <__aeabi_fmul+0x20a>
    22b8:	3304      	adds	r3, #4
    22ba:	015a      	lsls	r2, r3, #5
    22bc:	d504      	bpl.n	22c8 <__aeabi_fmul+0x218>
    22be:	2401      	movs	r4, #1
    22c0:	2201      	movs	r2, #1
    22c2:	400c      	ands	r4, r1
    22c4:	2000      	movs	r0, #0
    22c6:	e73d      	b.n	2144 <__aeabi_fmul+0x94>
    22c8:	2401      	movs	r4, #1
    22ca:	019b      	lsls	r3, r3, #6
    22cc:	0a58      	lsrs	r0, r3, #9
    22ce:	400c      	ands	r4, r1
    22d0:	2200      	movs	r2, #0
    22d2:	e737      	b.n	2144 <__aeabi_fmul+0x94>
    22d4:	2080      	movs	r0, #128	; 0x80
    22d6:	2401      	movs	r4, #1
    22d8:	03c0      	lsls	r0, r0, #15
    22da:	4328      	orrs	r0, r5
    22dc:	0240      	lsls	r0, r0, #9
    22de:	0a40      	lsrs	r0, r0, #9
    22e0:	400c      	ands	r4, r1
    22e2:	22ff      	movs	r2, #255	; 0xff
    22e4:	e72e      	b.n	2144 <__aeabi_fmul+0x94>
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00002b3c 	.word	0x00002b3c
    22ec:	f7ffffff 	.word	0xf7ffffff

000022f0 <__aeabi_fsub>:
    22f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22f2:	464f      	mov	r7, r9
    22f4:	46d6      	mov	lr, sl
    22f6:	4646      	mov	r6, r8
    22f8:	0044      	lsls	r4, r0, #1
    22fa:	b5c0      	push	{r6, r7, lr}
    22fc:	0fc2      	lsrs	r2, r0, #31
    22fe:	0247      	lsls	r7, r0, #9
    2300:	0248      	lsls	r0, r1, #9
    2302:	0a40      	lsrs	r0, r0, #9
    2304:	4684      	mov	ip, r0
    2306:	4666      	mov	r6, ip
    2308:	0a7b      	lsrs	r3, r7, #9
    230a:	0048      	lsls	r0, r1, #1
    230c:	0fc9      	lsrs	r1, r1, #31
    230e:	469a      	mov	sl, r3
    2310:	0e24      	lsrs	r4, r4, #24
    2312:	0015      	movs	r5, r2
    2314:	00db      	lsls	r3, r3, #3
    2316:	0e00      	lsrs	r0, r0, #24
    2318:	4689      	mov	r9, r1
    231a:	00f6      	lsls	r6, r6, #3
    231c:	28ff      	cmp	r0, #255	; 0xff
    231e:	d100      	bne.n	2322 <__aeabi_fsub+0x32>
    2320:	e08f      	b.n	2442 <__aeabi_fsub+0x152>
    2322:	2101      	movs	r1, #1
    2324:	464f      	mov	r7, r9
    2326:	404f      	eors	r7, r1
    2328:	0039      	movs	r1, r7
    232a:	4291      	cmp	r1, r2
    232c:	d066      	beq.n	23fc <__aeabi_fsub+0x10c>
    232e:	1a22      	subs	r2, r4, r0
    2330:	2a00      	cmp	r2, #0
    2332:	dc00      	bgt.n	2336 <__aeabi_fsub+0x46>
    2334:	e09d      	b.n	2472 <__aeabi_fsub+0x182>
    2336:	2800      	cmp	r0, #0
    2338:	d13d      	bne.n	23b6 <__aeabi_fsub+0xc6>
    233a:	2e00      	cmp	r6, #0
    233c:	d100      	bne.n	2340 <__aeabi_fsub+0x50>
    233e:	e08b      	b.n	2458 <__aeabi_fsub+0x168>
    2340:	1e51      	subs	r1, r2, #1
    2342:	2900      	cmp	r1, #0
    2344:	d000      	beq.n	2348 <__aeabi_fsub+0x58>
    2346:	e0b5      	b.n	24b4 <__aeabi_fsub+0x1c4>
    2348:	2401      	movs	r4, #1
    234a:	1b9b      	subs	r3, r3, r6
    234c:	015a      	lsls	r2, r3, #5
    234e:	d544      	bpl.n	23da <__aeabi_fsub+0xea>
    2350:	019b      	lsls	r3, r3, #6
    2352:	099f      	lsrs	r7, r3, #6
    2354:	0038      	movs	r0, r7
    2356:	f000 fa1d 	bl	2794 <__clzsi2>
    235a:	3805      	subs	r0, #5
    235c:	4087      	lsls	r7, r0
    235e:	4284      	cmp	r4, r0
    2360:	dd00      	ble.n	2364 <__aeabi_fsub+0x74>
    2362:	e096      	b.n	2492 <__aeabi_fsub+0x1a2>
    2364:	1b04      	subs	r4, r0, r4
    2366:	003a      	movs	r2, r7
    2368:	2020      	movs	r0, #32
    236a:	3401      	adds	r4, #1
    236c:	40e2      	lsrs	r2, r4
    236e:	1b04      	subs	r4, r0, r4
    2370:	40a7      	lsls	r7, r4
    2372:	003b      	movs	r3, r7
    2374:	1e5f      	subs	r7, r3, #1
    2376:	41bb      	sbcs	r3, r7
    2378:	2400      	movs	r4, #0
    237a:	4313      	orrs	r3, r2
    237c:	075a      	lsls	r2, r3, #29
    237e:	d004      	beq.n	238a <__aeabi_fsub+0x9a>
    2380:	220f      	movs	r2, #15
    2382:	401a      	ands	r2, r3
    2384:	2a04      	cmp	r2, #4
    2386:	d000      	beq.n	238a <__aeabi_fsub+0x9a>
    2388:	3304      	adds	r3, #4
    238a:	015a      	lsls	r2, r3, #5
    238c:	d527      	bpl.n	23de <__aeabi_fsub+0xee>
    238e:	3401      	adds	r4, #1
    2390:	2cff      	cmp	r4, #255	; 0xff
    2392:	d100      	bne.n	2396 <__aeabi_fsub+0xa6>
    2394:	e079      	b.n	248a <__aeabi_fsub+0x19a>
    2396:	2201      	movs	r2, #1
    2398:	019b      	lsls	r3, r3, #6
    239a:	0a5b      	lsrs	r3, r3, #9
    239c:	b2e4      	uxtb	r4, r4
    239e:	402a      	ands	r2, r5
    23a0:	025b      	lsls	r3, r3, #9
    23a2:	05e4      	lsls	r4, r4, #23
    23a4:	0a58      	lsrs	r0, r3, #9
    23a6:	07d2      	lsls	r2, r2, #31
    23a8:	4320      	orrs	r0, r4
    23aa:	4310      	orrs	r0, r2
    23ac:	bc1c      	pop	{r2, r3, r4}
    23ae:	4690      	mov	r8, r2
    23b0:	4699      	mov	r9, r3
    23b2:	46a2      	mov	sl, r4
    23b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23b6:	2cff      	cmp	r4, #255	; 0xff
    23b8:	d0e0      	beq.n	237c <__aeabi_fsub+0x8c>
    23ba:	2180      	movs	r1, #128	; 0x80
    23bc:	04c9      	lsls	r1, r1, #19
    23be:	430e      	orrs	r6, r1
    23c0:	2a1b      	cmp	r2, #27
    23c2:	dc7b      	bgt.n	24bc <__aeabi_fsub+0x1cc>
    23c4:	0031      	movs	r1, r6
    23c6:	2020      	movs	r0, #32
    23c8:	40d1      	lsrs	r1, r2
    23ca:	1a82      	subs	r2, r0, r2
    23cc:	4096      	lsls	r6, r2
    23ce:	1e72      	subs	r2, r6, #1
    23d0:	4196      	sbcs	r6, r2
    23d2:	430e      	orrs	r6, r1
    23d4:	1b9b      	subs	r3, r3, r6
    23d6:	015a      	lsls	r2, r3, #5
    23d8:	d4ba      	bmi.n	2350 <__aeabi_fsub+0x60>
    23da:	075a      	lsls	r2, r3, #29
    23dc:	d1d0      	bne.n	2380 <__aeabi_fsub+0x90>
    23de:	2201      	movs	r2, #1
    23e0:	08df      	lsrs	r7, r3, #3
    23e2:	402a      	ands	r2, r5
    23e4:	2cff      	cmp	r4, #255	; 0xff
    23e6:	d133      	bne.n	2450 <__aeabi_fsub+0x160>
    23e8:	2f00      	cmp	r7, #0
    23ea:	d100      	bne.n	23ee <__aeabi_fsub+0xfe>
    23ec:	e0a8      	b.n	2540 <__aeabi_fsub+0x250>
    23ee:	2380      	movs	r3, #128	; 0x80
    23f0:	03db      	lsls	r3, r3, #15
    23f2:	433b      	orrs	r3, r7
    23f4:	025b      	lsls	r3, r3, #9
    23f6:	0a5b      	lsrs	r3, r3, #9
    23f8:	24ff      	movs	r4, #255	; 0xff
    23fa:	e7d1      	b.n	23a0 <__aeabi_fsub+0xb0>
    23fc:	1a21      	subs	r1, r4, r0
    23fe:	2900      	cmp	r1, #0
    2400:	dd4c      	ble.n	249c <__aeabi_fsub+0x1ac>
    2402:	2800      	cmp	r0, #0
    2404:	d02a      	beq.n	245c <__aeabi_fsub+0x16c>
    2406:	2cff      	cmp	r4, #255	; 0xff
    2408:	d0b8      	beq.n	237c <__aeabi_fsub+0x8c>
    240a:	2080      	movs	r0, #128	; 0x80
    240c:	04c0      	lsls	r0, r0, #19
    240e:	4306      	orrs	r6, r0
    2410:	291b      	cmp	r1, #27
    2412:	dd00      	ble.n	2416 <__aeabi_fsub+0x126>
    2414:	e0af      	b.n	2576 <__aeabi_fsub+0x286>
    2416:	0030      	movs	r0, r6
    2418:	2720      	movs	r7, #32
    241a:	40c8      	lsrs	r0, r1
    241c:	1a79      	subs	r1, r7, r1
    241e:	408e      	lsls	r6, r1
    2420:	1e71      	subs	r1, r6, #1
    2422:	418e      	sbcs	r6, r1
    2424:	4306      	orrs	r6, r0
    2426:	199b      	adds	r3, r3, r6
    2428:	0159      	lsls	r1, r3, #5
    242a:	d5d6      	bpl.n	23da <__aeabi_fsub+0xea>
    242c:	3401      	adds	r4, #1
    242e:	2cff      	cmp	r4, #255	; 0xff
    2430:	d100      	bne.n	2434 <__aeabi_fsub+0x144>
    2432:	e085      	b.n	2540 <__aeabi_fsub+0x250>
    2434:	2201      	movs	r2, #1
    2436:	497a      	ldr	r1, [pc, #488]	; (2620 <__aeabi_fsub+0x330>)
    2438:	401a      	ands	r2, r3
    243a:	085b      	lsrs	r3, r3, #1
    243c:	400b      	ands	r3, r1
    243e:	4313      	orrs	r3, r2
    2440:	e79c      	b.n	237c <__aeabi_fsub+0x8c>
    2442:	2e00      	cmp	r6, #0
    2444:	d000      	beq.n	2448 <__aeabi_fsub+0x158>
    2446:	e770      	b.n	232a <__aeabi_fsub+0x3a>
    2448:	e76b      	b.n	2322 <__aeabi_fsub+0x32>
    244a:	1e3b      	subs	r3, r7, #0
    244c:	d1c5      	bne.n	23da <__aeabi_fsub+0xea>
    244e:	2200      	movs	r2, #0
    2450:	027b      	lsls	r3, r7, #9
    2452:	0a5b      	lsrs	r3, r3, #9
    2454:	b2e4      	uxtb	r4, r4
    2456:	e7a3      	b.n	23a0 <__aeabi_fsub+0xb0>
    2458:	0014      	movs	r4, r2
    245a:	e78f      	b.n	237c <__aeabi_fsub+0x8c>
    245c:	2e00      	cmp	r6, #0
    245e:	d04d      	beq.n	24fc <__aeabi_fsub+0x20c>
    2460:	1e48      	subs	r0, r1, #1
    2462:	2800      	cmp	r0, #0
    2464:	d157      	bne.n	2516 <__aeabi_fsub+0x226>
    2466:	199b      	adds	r3, r3, r6
    2468:	2401      	movs	r4, #1
    246a:	015a      	lsls	r2, r3, #5
    246c:	d5b5      	bpl.n	23da <__aeabi_fsub+0xea>
    246e:	2402      	movs	r4, #2
    2470:	e7e0      	b.n	2434 <__aeabi_fsub+0x144>
    2472:	2a00      	cmp	r2, #0
    2474:	d125      	bne.n	24c2 <__aeabi_fsub+0x1d2>
    2476:	1c62      	adds	r2, r4, #1
    2478:	b2d2      	uxtb	r2, r2
    247a:	2a01      	cmp	r2, #1
    247c:	dd72      	ble.n	2564 <__aeabi_fsub+0x274>
    247e:	1b9f      	subs	r7, r3, r6
    2480:	017a      	lsls	r2, r7, #5
    2482:	d535      	bpl.n	24f0 <__aeabi_fsub+0x200>
    2484:	1af7      	subs	r7, r6, r3
    2486:	000d      	movs	r5, r1
    2488:	e764      	b.n	2354 <__aeabi_fsub+0x64>
    248a:	2201      	movs	r2, #1
    248c:	2300      	movs	r3, #0
    248e:	402a      	ands	r2, r5
    2490:	e786      	b.n	23a0 <__aeabi_fsub+0xb0>
    2492:	003b      	movs	r3, r7
    2494:	4a63      	ldr	r2, [pc, #396]	; (2624 <__aeabi_fsub+0x334>)
    2496:	1a24      	subs	r4, r4, r0
    2498:	4013      	ands	r3, r2
    249a:	e76f      	b.n	237c <__aeabi_fsub+0x8c>
    249c:	2900      	cmp	r1, #0
    249e:	d16c      	bne.n	257a <__aeabi_fsub+0x28a>
    24a0:	1c61      	adds	r1, r4, #1
    24a2:	b2c8      	uxtb	r0, r1
    24a4:	2801      	cmp	r0, #1
    24a6:	dd4e      	ble.n	2546 <__aeabi_fsub+0x256>
    24a8:	29ff      	cmp	r1, #255	; 0xff
    24aa:	d049      	beq.n	2540 <__aeabi_fsub+0x250>
    24ac:	199b      	adds	r3, r3, r6
    24ae:	085b      	lsrs	r3, r3, #1
    24b0:	000c      	movs	r4, r1
    24b2:	e763      	b.n	237c <__aeabi_fsub+0x8c>
    24b4:	2aff      	cmp	r2, #255	; 0xff
    24b6:	d041      	beq.n	253c <__aeabi_fsub+0x24c>
    24b8:	000a      	movs	r2, r1
    24ba:	e781      	b.n	23c0 <__aeabi_fsub+0xd0>
    24bc:	2601      	movs	r6, #1
    24be:	1b9b      	subs	r3, r3, r6
    24c0:	e789      	b.n	23d6 <__aeabi_fsub+0xe6>
    24c2:	2c00      	cmp	r4, #0
    24c4:	d01c      	beq.n	2500 <__aeabi_fsub+0x210>
    24c6:	28ff      	cmp	r0, #255	; 0xff
    24c8:	d021      	beq.n	250e <__aeabi_fsub+0x21e>
    24ca:	2480      	movs	r4, #128	; 0x80
    24cc:	04e4      	lsls	r4, r4, #19
    24ce:	4252      	negs	r2, r2
    24d0:	4323      	orrs	r3, r4
    24d2:	2a1b      	cmp	r2, #27
    24d4:	dd00      	ble.n	24d8 <__aeabi_fsub+0x1e8>
    24d6:	e096      	b.n	2606 <__aeabi_fsub+0x316>
    24d8:	001c      	movs	r4, r3
    24da:	2520      	movs	r5, #32
    24dc:	40d4      	lsrs	r4, r2
    24de:	1aaa      	subs	r2, r5, r2
    24e0:	4093      	lsls	r3, r2
    24e2:	1e5a      	subs	r2, r3, #1
    24e4:	4193      	sbcs	r3, r2
    24e6:	4323      	orrs	r3, r4
    24e8:	1af3      	subs	r3, r6, r3
    24ea:	0004      	movs	r4, r0
    24ec:	000d      	movs	r5, r1
    24ee:	e72d      	b.n	234c <__aeabi_fsub+0x5c>
    24f0:	2f00      	cmp	r7, #0
    24f2:	d000      	beq.n	24f6 <__aeabi_fsub+0x206>
    24f4:	e72e      	b.n	2354 <__aeabi_fsub+0x64>
    24f6:	2200      	movs	r2, #0
    24f8:	2400      	movs	r4, #0
    24fa:	e7a9      	b.n	2450 <__aeabi_fsub+0x160>
    24fc:	000c      	movs	r4, r1
    24fe:	e73d      	b.n	237c <__aeabi_fsub+0x8c>
    2500:	2b00      	cmp	r3, #0
    2502:	d058      	beq.n	25b6 <__aeabi_fsub+0x2c6>
    2504:	43d2      	mvns	r2, r2
    2506:	2a00      	cmp	r2, #0
    2508:	d0ee      	beq.n	24e8 <__aeabi_fsub+0x1f8>
    250a:	28ff      	cmp	r0, #255	; 0xff
    250c:	d1e1      	bne.n	24d2 <__aeabi_fsub+0x1e2>
    250e:	0033      	movs	r3, r6
    2510:	24ff      	movs	r4, #255	; 0xff
    2512:	000d      	movs	r5, r1
    2514:	e732      	b.n	237c <__aeabi_fsub+0x8c>
    2516:	29ff      	cmp	r1, #255	; 0xff
    2518:	d010      	beq.n	253c <__aeabi_fsub+0x24c>
    251a:	0001      	movs	r1, r0
    251c:	e778      	b.n	2410 <__aeabi_fsub+0x120>
    251e:	2b00      	cmp	r3, #0
    2520:	d06e      	beq.n	2600 <__aeabi_fsub+0x310>
    2522:	24ff      	movs	r4, #255	; 0xff
    2524:	2e00      	cmp	r6, #0
    2526:	d100      	bne.n	252a <__aeabi_fsub+0x23a>
    2528:	e728      	b.n	237c <__aeabi_fsub+0x8c>
    252a:	2280      	movs	r2, #128	; 0x80
    252c:	4651      	mov	r1, sl
    252e:	03d2      	lsls	r2, r2, #15
    2530:	4211      	tst	r1, r2
    2532:	d003      	beq.n	253c <__aeabi_fsub+0x24c>
    2534:	4661      	mov	r1, ip
    2536:	4211      	tst	r1, r2
    2538:	d100      	bne.n	253c <__aeabi_fsub+0x24c>
    253a:	0033      	movs	r3, r6
    253c:	24ff      	movs	r4, #255	; 0xff
    253e:	e71d      	b.n	237c <__aeabi_fsub+0x8c>
    2540:	24ff      	movs	r4, #255	; 0xff
    2542:	2300      	movs	r3, #0
    2544:	e72c      	b.n	23a0 <__aeabi_fsub+0xb0>
    2546:	2c00      	cmp	r4, #0
    2548:	d1e9      	bne.n	251e <__aeabi_fsub+0x22e>
    254a:	2b00      	cmp	r3, #0
    254c:	d063      	beq.n	2616 <__aeabi_fsub+0x326>
    254e:	2e00      	cmp	r6, #0
    2550:	d100      	bne.n	2554 <__aeabi_fsub+0x264>
    2552:	e713      	b.n	237c <__aeabi_fsub+0x8c>
    2554:	199b      	adds	r3, r3, r6
    2556:	015a      	lsls	r2, r3, #5
    2558:	d400      	bmi.n	255c <__aeabi_fsub+0x26c>
    255a:	e73e      	b.n	23da <__aeabi_fsub+0xea>
    255c:	4a31      	ldr	r2, [pc, #196]	; (2624 <__aeabi_fsub+0x334>)
    255e:	000c      	movs	r4, r1
    2560:	4013      	ands	r3, r2
    2562:	e70b      	b.n	237c <__aeabi_fsub+0x8c>
    2564:	2c00      	cmp	r4, #0
    2566:	d11e      	bne.n	25a6 <__aeabi_fsub+0x2b6>
    2568:	2b00      	cmp	r3, #0
    256a:	d12f      	bne.n	25cc <__aeabi_fsub+0x2dc>
    256c:	2e00      	cmp	r6, #0
    256e:	d04f      	beq.n	2610 <__aeabi_fsub+0x320>
    2570:	0033      	movs	r3, r6
    2572:	000d      	movs	r5, r1
    2574:	e702      	b.n	237c <__aeabi_fsub+0x8c>
    2576:	2601      	movs	r6, #1
    2578:	e755      	b.n	2426 <__aeabi_fsub+0x136>
    257a:	2c00      	cmp	r4, #0
    257c:	d11f      	bne.n	25be <__aeabi_fsub+0x2ce>
    257e:	2b00      	cmp	r3, #0
    2580:	d043      	beq.n	260a <__aeabi_fsub+0x31a>
    2582:	43c9      	mvns	r1, r1
    2584:	2900      	cmp	r1, #0
    2586:	d00b      	beq.n	25a0 <__aeabi_fsub+0x2b0>
    2588:	28ff      	cmp	r0, #255	; 0xff
    258a:	d039      	beq.n	2600 <__aeabi_fsub+0x310>
    258c:	291b      	cmp	r1, #27
    258e:	dc44      	bgt.n	261a <__aeabi_fsub+0x32a>
    2590:	001c      	movs	r4, r3
    2592:	2720      	movs	r7, #32
    2594:	40cc      	lsrs	r4, r1
    2596:	1a79      	subs	r1, r7, r1
    2598:	408b      	lsls	r3, r1
    259a:	1e59      	subs	r1, r3, #1
    259c:	418b      	sbcs	r3, r1
    259e:	4323      	orrs	r3, r4
    25a0:	199b      	adds	r3, r3, r6
    25a2:	0004      	movs	r4, r0
    25a4:	e740      	b.n	2428 <__aeabi_fsub+0x138>
    25a6:	2b00      	cmp	r3, #0
    25a8:	d11a      	bne.n	25e0 <__aeabi_fsub+0x2f0>
    25aa:	2e00      	cmp	r6, #0
    25ac:	d124      	bne.n	25f8 <__aeabi_fsub+0x308>
    25ae:	2780      	movs	r7, #128	; 0x80
    25b0:	2200      	movs	r2, #0
    25b2:	03ff      	lsls	r7, r7, #15
    25b4:	e71b      	b.n	23ee <__aeabi_fsub+0xfe>
    25b6:	0033      	movs	r3, r6
    25b8:	0004      	movs	r4, r0
    25ba:	000d      	movs	r5, r1
    25bc:	e6de      	b.n	237c <__aeabi_fsub+0x8c>
    25be:	28ff      	cmp	r0, #255	; 0xff
    25c0:	d01e      	beq.n	2600 <__aeabi_fsub+0x310>
    25c2:	2480      	movs	r4, #128	; 0x80
    25c4:	04e4      	lsls	r4, r4, #19
    25c6:	4249      	negs	r1, r1
    25c8:	4323      	orrs	r3, r4
    25ca:	e7df      	b.n	258c <__aeabi_fsub+0x29c>
    25cc:	2e00      	cmp	r6, #0
    25ce:	d100      	bne.n	25d2 <__aeabi_fsub+0x2e2>
    25d0:	e6d4      	b.n	237c <__aeabi_fsub+0x8c>
    25d2:	1b9f      	subs	r7, r3, r6
    25d4:	017a      	lsls	r2, r7, #5
    25d6:	d400      	bmi.n	25da <__aeabi_fsub+0x2ea>
    25d8:	e737      	b.n	244a <__aeabi_fsub+0x15a>
    25da:	1af3      	subs	r3, r6, r3
    25dc:	000d      	movs	r5, r1
    25de:	e6cd      	b.n	237c <__aeabi_fsub+0x8c>
    25e0:	24ff      	movs	r4, #255	; 0xff
    25e2:	2e00      	cmp	r6, #0
    25e4:	d100      	bne.n	25e8 <__aeabi_fsub+0x2f8>
    25e6:	e6c9      	b.n	237c <__aeabi_fsub+0x8c>
    25e8:	2280      	movs	r2, #128	; 0x80
    25ea:	4650      	mov	r0, sl
    25ec:	03d2      	lsls	r2, r2, #15
    25ee:	4210      	tst	r0, r2
    25f0:	d0a4      	beq.n	253c <__aeabi_fsub+0x24c>
    25f2:	4660      	mov	r0, ip
    25f4:	4210      	tst	r0, r2
    25f6:	d1a1      	bne.n	253c <__aeabi_fsub+0x24c>
    25f8:	0033      	movs	r3, r6
    25fa:	000d      	movs	r5, r1
    25fc:	24ff      	movs	r4, #255	; 0xff
    25fe:	e6bd      	b.n	237c <__aeabi_fsub+0x8c>
    2600:	0033      	movs	r3, r6
    2602:	24ff      	movs	r4, #255	; 0xff
    2604:	e6ba      	b.n	237c <__aeabi_fsub+0x8c>
    2606:	2301      	movs	r3, #1
    2608:	e76e      	b.n	24e8 <__aeabi_fsub+0x1f8>
    260a:	0033      	movs	r3, r6
    260c:	0004      	movs	r4, r0
    260e:	e6b5      	b.n	237c <__aeabi_fsub+0x8c>
    2610:	2700      	movs	r7, #0
    2612:	2200      	movs	r2, #0
    2614:	e71c      	b.n	2450 <__aeabi_fsub+0x160>
    2616:	0033      	movs	r3, r6
    2618:	e6b0      	b.n	237c <__aeabi_fsub+0x8c>
    261a:	2301      	movs	r3, #1
    261c:	e7c0      	b.n	25a0 <__aeabi_fsub+0x2b0>
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	7dffffff 	.word	0x7dffffff
    2624:	fbffffff 	.word	0xfbffffff

00002628 <__aeabi_f2iz>:
    2628:	0241      	lsls	r1, r0, #9
    262a:	0043      	lsls	r3, r0, #1
    262c:	0fc2      	lsrs	r2, r0, #31
    262e:	0a49      	lsrs	r1, r1, #9
    2630:	0e1b      	lsrs	r3, r3, #24
    2632:	2000      	movs	r0, #0
    2634:	2b7e      	cmp	r3, #126	; 0x7e
    2636:	dd0d      	ble.n	2654 <__aeabi_f2iz+0x2c>
    2638:	2b9d      	cmp	r3, #157	; 0x9d
    263a:	dc0c      	bgt.n	2656 <__aeabi_f2iz+0x2e>
    263c:	2080      	movs	r0, #128	; 0x80
    263e:	0400      	lsls	r0, r0, #16
    2640:	4301      	orrs	r1, r0
    2642:	2b95      	cmp	r3, #149	; 0x95
    2644:	dc0a      	bgt.n	265c <__aeabi_f2iz+0x34>
    2646:	2096      	movs	r0, #150	; 0x96
    2648:	1ac3      	subs	r3, r0, r3
    264a:	40d9      	lsrs	r1, r3
    264c:	4248      	negs	r0, r1
    264e:	2a00      	cmp	r2, #0
    2650:	d100      	bne.n	2654 <__aeabi_f2iz+0x2c>
    2652:	0008      	movs	r0, r1
    2654:	4770      	bx	lr
    2656:	4b03      	ldr	r3, [pc, #12]	; (2664 <__aeabi_f2iz+0x3c>)
    2658:	18d0      	adds	r0, r2, r3
    265a:	e7fb      	b.n	2654 <__aeabi_f2iz+0x2c>
    265c:	3b96      	subs	r3, #150	; 0x96
    265e:	4099      	lsls	r1, r3
    2660:	e7f4      	b.n	264c <__aeabi_f2iz+0x24>
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	7fffffff 	.word	0x7fffffff

00002668 <__aeabi_i2f>:
    2668:	b570      	push	{r4, r5, r6, lr}
    266a:	2800      	cmp	r0, #0
    266c:	d030      	beq.n	26d0 <__aeabi_i2f+0x68>
    266e:	17c3      	asrs	r3, r0, #31
    2670:	18c4      	adds	r4, r0, r3
    2672:	405c      	eors	r4, r3
    2674:	0fc5      	lsrs	r5, r0, #31
    2676:	0020      	movs	r0, r4
    2678:	f000 f88c 	bl	2794 <__clzsi2>
    267c:	239e      	movs	r3, #158	; 0x9e
    267e:	1a1b      	subs	r3, r3, r0
    2680:	2b96      	cmp	r3, #150	; 0x96
    2682:	dc0d      	bgt.n	26a0 <__aeabi_i2f+0x38>
    2684:	2296      	movs	r2, #150	; 0x96
    2686:	1ad2      	subs	r2, r2, r3
    2688:	4094      	lsls	r4, r2
    268a:	002a      	movs	r2, r5
    268c:	0264      	lsls	r4, r4, #9
    268e:	0a64      	lsrs	r4, r4, #9
    2690:	b2db      	uxtb	r3, r3
    2692:	0264      	lsls	r4, r4, #9
    2694:	05db      	lsls	r3, r3, #23
    2696:	0a60      	lsrs	r0, r4, #9
    2698:	07d2      	lsls	r2, r2, #31
    269a:	4318      	orrs	r0, r3
    269c:	4310      	orrs	r0, r2
    269e:	bd70      	pop	{r4, r5, r6, pc}
    26a0:	2b99      	cmp	r3, #153	; 0x99
    26a2:	dc19      	bgt.n	26d8 <__aeabi_i2f+0x70>
    26a4:	2299      	movs	r2, #153	; 0x99
    26a6:	1ad2      	subs	r2, r2, r3
    26a8:	2a00      	cmp	r2, #0
    26aa:	dd29      	ble.n	2700 <__aeabi_i2f+0x98>
    26ac:	4094      	lsls	r4, r2
    26ae:	0022      	movs	r2, r4
    26b0:	4c14      	ldr	r4, [pc, #80]	; (2704 <__aeabi_i2f+0x9c>)
    26b2:	4014      	ands	r4, r2
    26b4:	0751      	lsls	r1, r2, #29
    26b6:	d004      	beq.n	26c2 <__aeabi_i2f+0x5a>
    26b8:	210f      	movs	r1, #15
    26ba:	400a      	ands	r2, r1
    26bc:	2a04      	cmp	r2, #4
    26be:	d000      	beq.n	26c2 <__aeabi_i2f+0x5a>
    26c0:	3404      	adds	r4, #4
    26c2:	0162      	lsls	r2, r4, #5
    26c4:	d413      	bmi.n	26ee <__aeabi_i2f+0x86>
    26c6:	01a4      	lsls	r4, r4, #6
    26c8:	0a64      	lsrs	r4, r4, #9
    26ca:	b2db      	uxtb	r3, r3
    26cc:	002a      	movs	r2, r5
    26ce:	e7e0      	b.n	2692 <__aeabi_i2f+0x2a>
    26d0:	2200      	movs	r2, #0
    26d2:	2300      	movs	r3, #0
    26d4:	2400      	movs	r4, #0
    26d6:	e7dc      	b.n	2692 <__aeabi_i2f+0x2a>
    26d8:	2205      	movs	r2, #5
    26da:	0021      	movs	r1, r4
    26dc:	1a12      	subs	r2, r2, r0
    26de:	40d1      	lsrs	r1, r2
    26e0:	22b9      	movs	r2, #185	; 0xb9
    26e2:	1ad2      	subs	r2, r2, r3
    26e4:	4094      	lsls	r4, r2
    26e6:	1e62      	subs	r2, r4, #1
    26e8:	4194      	sbcs	r4, r2
    26ea:	430c      	orrs	r4, r1
    26ec:	e7da      	b.n	26a4 <__aeabi_i2f+0x3c>
    26ee:	4b05      	ldr	r3, [pc, #20]	; (2704 <__aeabi_i2f+0x9c>)
    26f0:	002a      	movs	r2, r5
    26f2:	401c      	ands	r4, r3
    26f4:	239f      	movs	r3, #159	; 0x9f
    26f6:	01a4      	lsls	r4, r4, #6
    26f8:	1a1b      	subs	r3, r3, r0
    26fa:	0a64      	lsrs	r4, r4, #9
    26fc:	b2db      	uxtb	r3, r3
    26fe:	e7c8      	b.n	2692 <__aeabi_i2f+0x2a>
    2700:	0022      	movs	r2, r4
    2702:	e7d5      	b.n	26b0 <__aeabi_i2f+0x48>
    2704:	fbffffff 	.word	0xfbffffff

00002708 <__aeabi_ui2f>:
    2708:	b510      	push	{r4, lr}
    270a:	1e04      	subs	r4, r0, #0
    270c:	d027      	beq.n	275e <__aeabi_ui2f+0x56>
    270e:	f000 f841 	bl	2794 <__clzsi2>
    2712:	239e      	movs	r3, #158	; 0x9e
    2714:	1a1b      	subs	r3, r3, r0
    2716:	2b96      	cmp	r3, #150	; 0x96
    2718:	dc0a      	bgt.n	2730 <__aeabi_ui2f+0x28>
    271a:	2296      	movs	r2, #150	; 0x96
    271c:	1ad2      	subs	r2, r2, r3
    271e:	4094      	lsls	r4, r2
    2720:	0264      	lsls	r4, r4, #9
    2722:	0a64      	lsrs	r4, r4, #9
    2724:	b2db      	uxtb	r3, r3
    2726:	0264      	lsls	r4, r4, #9
    2728:	05db      	lsls	r3, r3, #23
    272a:	0a60      	lsrs	r0, r4, #9
    272c:	4318      	orrs	r0, r3
    272e:	bd10      	pop	{r4, pc}
    2730:	2b99      	cmp	r3, #153	; 0x99
    2732:	dc17      	bgt.n	2764 <__aeabi_ui2f+0x5c>
    2734:	2299      	movs	r2, #153	; 0x99
    2736:	1ad2      	subs	r2, r2, r3
    2738:	2a00      	cmp	r2, #0
    273a:	dd27      	ble.n	278c <__aeabi_ui2f+0x84>
    273c:	4094      	lsls	r4, r2
    273e:	0022      	movs	r2, r4
    2740:	4c13      	ldr	r4, [pc, #76]	; (2790 <__aeabi_ui2f+0x88>)
    2742:	4014      	ands	r4, r2
    2744:	0751      	lsls	r1, r2, #29
    2746:	d004      	beq.n	2752 <__aeabi_ui2f+0x4a>
    2748:	210f      	movs	r1, #15
    274a:	400a      	ands	r2, r1
    274c:	2a04      	cmp	r2, #4
    274e:	d000      	beq.n	2752 <__aeabi_ui2f+0x4a>
    2750:	3404      	adds	r4, #4
    2752:	0162      	lsls	r2, r4, #5
    2754:	d412      	bmi.n	277c <__aeabi_ui2f+0x74>
    2756:	01a4      	lsls	r4, r4, #6
    2758:	0a64      	lsrs	r4, r4, #9
    275a:	b2db      	uxtb	r3, r3
    275c:	e7e3      	b.n	2726 <__aeabi_ui2f+0x1e>
    275e:	2300      	movs	r3, #0
    2760:	2400      	movs	r4, #0
    2762:	e7e0      	b.n	2726 <__aeabi_ui2f+0x1e>
    2764:	22b9      	movs	r2, #185	; 0xb9
    2766:	0021      	movs	r1, r4
    2768:	1ad2      	subs	r2, r2, r3
    276a:	4091      	lsls	r1, r2
    276c:	000a      	movs	r2, r1
    276e:	1e51      	subs	r1, r2, #1
    2770:	418a      	sbcs	r2, r1
    2772:	2105      	movs	r1, #5
    2774:	1a09      	subs	r1, r1, r0
    2776:	40cc      	lsrs	r4, r1
    2778:	4314      	orrs	r4, r2
    277a:	e7db      	b.n	2734 <__aeabi_ui2f+0x2c>
    277c:	4b04      	ldr	r3, [pc, #16]	; (2790 <__aeabi_ui2f+0x88>)
    277e:	401c      	ands	r4, r3
    2780:	239f      	movs	r3, #159	; 0x9f
    2782:	01a4      	lsls	r4, r4, #6
    2784:	1a1b      	subs	r3, r3, r0
    2786:	0a64      	lsrs	r4, r4, #9
    2788:	b2db      	uxtb	r3, r3
    278a:	e7cc      	b.n	2726 <__aeabi_ui2f+0x1e>
    278c:	0022      	movs	r2, r4
    278e:	e7d7      	b.n	2740 <__aeabi_ui2f+0x38>
    2790:	fbffffff 	.word	0xfbffffff

00002794 <__clzsi2>:
    2794:	211c      	movs	r1, #28
    2796:	2301      	movs	r3, #1
    2798:	041b      	lsls	r3, r3, #16
    279a:	4298      	cmp	r0, r3
    279c:	d301      	bcc.n	27a2 <__clzsi2+0xe>
    279e:	0c00      	lsrs	r0, r0, #16
    27a0:	3910      	subs	r1, #16
    27a2:	0a1b      	lsrs	r3, r3, #8
    27a4:	4298      	cmp	r0, r3
    27a6:	d301      	bcc.n	27ac <__clzsi2+0x18>
    27a8:	0a00      	lsrs	r0, r0, #8
    27aa:	3908      	subs	r1, #8
    27ac:	091b      	lsrs	r3, r3, #4
    27ae:	4298      	cmp	r0, r3
    27b0:	d301      	bcc.n	27b6 <__clzsi2+0x22>
    27b2:	0900      	lsrs	r0, r0, #4
    27b4:	3904      	subs	r1, #4
    27b6:	a202      	add	r2, pc, #8	; (adr r2, 27c0 <__clzsi2+0x2c>)
    27b8:	5c10      	ldrb	r0, [r2, r0]
    27ba:	1840      	adds	r0, r0, r1
    27bc:	4770      	bx	lr
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	02020304 	.word	0x02020304
    27c4:	01010101 	.word	0x01010101
	...

000027d0 <__cxa_atexit>:
    27d0:	b570      	push	{r4, r5, r6, lr}
    27d2:	4c05      	ldr	r4, [pc, #20]	; (27e8 <__cxa_atexit+0x18>)
    27d4:	0005      	movs	r5, r0
    27d6:	0013      	movs	r3, r2
    27d8:	1e20      	subs	r0, r4, #0
    27da:	d004      	beq.n	27e6 <__cxa_atexit+0x16>
    27dc:	000a      	movs	r2, r1
    27de:	2002      	movs	r0, #2
    27e0:	0029      	movs	r1, r5
    27e2:	e000      	b.n	27e6 <__cxa_atexit+0x16>
    27e4:	bf00      	nop
    27e6:	bd70      	pop	{r4, r5, r6, pc}
    27e8:	00000000 	.word	0x00000000

000027ec <__libc_init_array>:
    27ec:	b570      	push	{r4, r5, r6, lr}
    27ee:	2600      	movs	r6, #0
    27f0:	4d0c      	ldr	r5, [pc, #48]	; (2824 <__libc_init_array+0x38>)
    27f2:	4c0d      	ldr	r4, [pc, #52]	; (2828 <__libc_init_array+0x3c>)
    27f4:	1b64      	subs	r4, r4, r5
    27f6:	10a4      	asrs	r4, r4, #2
    27f8:	42a6      	cmp	r6, r4
    27fa:	d109      	bne.n	2810 <__libc_init_array+0x24>
    27fc:	2600      	movs	r6, #0
    27fe:	f000 f9bd 	bl	2b7c <_init>
    2802:	4d0a      	ldr	r5, [pc, #40]	; (282c <__libc_init_array+0x40>)
    2804:	4c0a      	ldr	r4, [pc, #40]	; (2830 <__libc_init_array+0x44>)
    2806:	1b64      	subs	r4, r4, r5
    2808:	10a4      	asrs	r4, r4, #2
    280a:	42a6      	cmp	r6, r4
    280c:	d105      	bne.n	281a <__libc_init_array+0x2e>
    280e:	bd70      	pop	{r4, r5, r6, pc}
    2810:	00b3      	lsls	r3, r6, #2
    2812:	58eb      	ldr	r3, [r5, r3]
    2814:	4798      	blx	r3
    2816:	3601      	adds	r6, #1
    2818:	e7ee      	b.n	27f8 <__libc_init_array+0xc>
    281a:	00b3      	lsls	r3, r6, #2
    281c:	58eb      	ldr	r3, [r5, r3]
    281e:	4798      	blx	r3
    2820:	3601      	adds	r6, #1
    2822:	e7f2      	b.n	280a <__libc_init_array+0x1e>
    2824:	00002b88 	.word	0x00002b88
    2828:	00002b88 	.word	0x00002b88
    282c:	00002b88 	.word	0x00002b88
    2830:	00002b94 	.word	0x00002b94

00002834 <free>:
    2834:	b510      	push	{r4, lr}
    2836:	4b03      	ldr	r3, [pc, #12]	; (2844 <free+0x10>)
    2838:	0001      	movs	r1, r0
    283a:	6818      	ldr	r0, [r3, #0]
    283c:	f000 f80c 	bl	2858 <_free_r>
    2840:	bd10      	pop	{r4, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	20000004 	.word	0x20000004

00002848 <memset>:
    2848:	0003      	movs	r3, r0
    284a:	1882      	adds	r2, r0, r2
    284c:	4293      	cmp	r3, r2
    284e:	d100      	bne.n	2852 <memset+0xa>
    2850:	4770      	bx	lr
    2852:	7019      	strb	r1, [r3, #0]
    2854:	3301      	adds	r3, #1
    2856:	e7f9      	b.n	284c <memset+0x4>

00002858 <_free_r>:
    2858:	b570      	push	{r4, r5, r6, lr}
    285a:	0005      	movs	r5, r0
    285c:	2900      	cmp	r1, #0
    285e:	d010      	beq.n	2882 <_free_r+0x2a>
    2860:	1f0c      	subs	r4, r1, #4
    2862:	6823      	ldr	r3, [r4, #0]
    2864:	2b00      	cmp	r3, #0
    2866:	da00      	bge.n	286a <_free_r+0x12>
    2868:	18e4      	adds	r4, r4, r3
    286a:	0028      	movs	r0, r5
    286c:	f000 f83e 	bl	28ec <__malloc_lock>
    2870:	4a1d      	ldr	r2, [pc, #116]	; (28e8 <_free_r+0x90>)
    2872:	6813      	ldr	r3, [r2, #0]
    2874:	2b00      	cmp	r3, #0
    2876:	d105      	bne.n	2884 <_free_r+0x2c>
    2878:	6063      	str	r3, [r4, #4]
    287a:	6014      	str	r4, [r2, #0]
    287c:	0028      	movs	r0, r5
    287e:	f000 f836 	bl	28ee <__malloc_unlock>
    2882:	bd70      	pop	{r4, r5, r6, pc}
    2884:	42a3      	cmp	r3, r4
    2886:	d909      	bls.n	289c <_free_r+0x44>
    2888:	6821      	ldr	r1, [r4, #0]
    288a:	1860      	adds	r0, r4, r1
    288c:	4283      	cmp	r3, r0
    288e:	d1f3      	bne.n	2878 <_free_r+0x20>
    2890:	6818      	ldr	r0, [r3, #0]
    2892:	685b      	ldr	r3, [r3, #4]
    2894:	1841      	adds	r1, r0, r1
    2896:	6021      	str	r1, [r4, #0]
    2898:	e7ee      	b.n	2878 <_free_r+0x20>
    289a:	0013      	movs	r3, r2
    289c:	685a      	ldr	r2, [r3, #4]
    289e:	2a00      	cmp	r2, #0
    28a0:	d001      	beq.n	28a6 <_free_r+0x4e>
    28a2:	42a2      	cmp	r2, r4
    28a4:	d9f9      	bls.n	289a <_free_r+0x42>
    28a6:	6819      	ldr	r1, [r3, #0]
    28a8:	1858      	adds	r0, r3, r1
    28aa:	42a0      	cmp	r0, r4
    28ac:	d10b      	bne.n	28c6 <_free_r+0x6e>
    28ae:	6820      	ldr	r0, [r4, #0]
    28b0:	1809      	adds	r1, r1, r0
    28b2:	1858      	adds	r0, r3, r1
    28b4:	6019      	str	r1, [r3, #0]
    28b6:	4282      	cmp	r2, r0
    28b8:	d1e0      	bne.n	287c <_free_r+0x24>
    28ba:	6810      	ldr	r0, [r2, #0]
    28bc:	6852      	ldr	r2, [r2, #4]
    28be:	1841      	adds	r1, r0, r1
    28c0:	6019      	str	r1, [r3, #0]
    28c2:	605a      	str	r2, [r3, #4]
    28c4:	e7da      	b.n	287c <_free_r+0x24>
    28c6:	42a0      	cmp	r0, r4
    28c8:	d902      	bls.n	28d0 <_free_r+0x78>
    28ca:	230c      	movs	r3, #12
    28cc:	602b      	str	r3, [r5, #0]
    28ce:	e7d5      	b.n	287c <_free_r+0x24>
    28d0:	6821      	ldr	r1, [r4, #0]
    28d2:	1860      	adds	r0, r4, r1
    28d4:	4282      	cmp	r2, r0
    28d6:	d103      	bne.n	28e0 <_free_r+0x88>
    28d8:	6810      	ldr	r0, [r2, #0]
    28da:	6852      	ldr	r2, [r2, #4]
    28dc:	1841      	adds	r1, r0, r1
    28de:	6021      	str	r1, [r4, #0]
    28e0:	6062      	str	r2, [r4, #4]
    28e2:	605c      	str	r4, [r3, #4]
    28e4:	e7ca      	b.n	287c <_free_r+0x24>
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	200002e8 	.word	0x200002e8

000028ec <__malloc_lock>:
    28ec:	4770      	bx	lr

000028ee <__malloc_unlock>:
    28ee:	4770      	bx	lr

000028f0 <_ZTV15lmx2694_Handler>:
	...
    28f8:	01fd 0000 0201 0000                         ........

00002900 <_ZL22channel_divider_values>:
    2900:	0002 0000 0004 0000 0006 0000 0008 0000     ................
    2910:	000c 0000 0010 0000 0018 0000 0020 0000     ............ ...
    2920:	0030 0000 0040 0000 0048 0000 0060 0000     0...@...H...`...
    2930:	0080 0000 00c0 0000                         ........

00002938 <_ZL17default_registers>:
	...
    2944:	00f1 0000 0007 4440 0000 0000 0000 0000     ......@D........
	...
    2980:	0064 0000 000c 0800 0000 003f 0001 0080     d.........?.....
    2990:	c350 0000 03e8 0000 01f4 0000 1388 0000     P...............
    29a0:	0322 00a8 09c4 0001 8001 0020 0000 0000     "......... .....
    29b0:	0000 0000 0420 0080 0000 4180 0300 0300     .... ......A....
    29c0:	07fc c8c2 1f61 0001 0000 0000 0000 da80     ....a...........
    29d0:	fd51 8104 0028 0004 0000 1e21 0393 03ec     Q...(.....!.....
    29e0:	318c 318c 0488 0002 0db0 0624 071a 007c     .1.1......$...|.
    29f0:	0001 0401 f848 27b7 0064 012c 0080 064f     ....H..'d.,...O.
    2a00:	1e70 4000 5001 0018 10d8 1604 2000 00b2     p..@.P....... ..
    2a10:	7802 03e8 0e43 0642 0500 080c 211c 0000     .x..C.B......!..
    2a20:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    2a30:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    2a40:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.

00002a50 <_usarts>:
	...

00002a64 <_i2cms>:
	...

00002a7c <_i2css>:
	...

00002a8c <sercomspi_regs>:
    2a8c:	000c 0020 0000 0002 0000 0000 004f 01ff     .. .........O...
    2a9c:	0000 0000 2e2e 682f 6c70 732f 7265 6f63     ....../hpl/serco
    2aac:	2f6d 7068 5f6c 6573 6372 6d6f 632e 0000     m/hpl_sercom.c..
    2abc:	1e5c 0000 1e2c 0000 1e3e 0000 1d80 0000     \...,...>.......
    2acc:	1e3e 0000 1e22 0000 1e3e 0000 1d80 0000     >..."...>.......
    2adc:	1e2c 0000 1e2c 0000 1e22 0000 1d80 0000     ,...,...".......
    2aec:	1d88 0000 1d88 0000 1d88 0000 1e44 0000     ............D...
    2afc:	1e2c 0000 1e2c 0000 1e00 0000 1ee4 0000     ,...,...........
    2b0c:	1e00 0000 1e22 0000 1e00 0000 1ee4 0000     ...."...........
    2b1c:	1e2c 0000 1e2c 0000 1e22 0000 1ee4 0000     ,...,...".......
    2b2c:	1d88 0000 1d88 0000 1d88 0000 1eee 0000     ................
    2b3c:	21dc 0000 212c 0000 212c 0000 212a 0000     .!..,!..,!..*!..
    2b4c:	21ce 0000 21ce 0000 21c4 0000 212a 0000     .!...!...!..*!..
    2b5c:	21ce 0000 21c4 0000 21ce 0000 212a 0000     .!...!...!..*!..
    2b6c:	21d4 0000 21d4 0000 21d4 0000 2264 0000     .!...!...!..d"..

00002b7c <_init>:
    2b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b82:	bc08      	pop	{r3}
    2b84:	469e      	mov	lr, r3
    2b86:	4770      	bx	lr

00002b88 <__init_array_start>:
    2b88:	000000dd 	.word	0x000000dd
    2b8c:	00000bb5 	.word	0x00000bb5
    2b90:	00000c2d 	.word	0x00000c2d

00002b94 <_fini>:
    2b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b9a:	bc08      	pop	{r3}
    2b9c:	469e      	mov	lr, r3
    2b9e:	4770      	bx	lr

00002ba0 <__fini_array_start>:
    2ba0:	000000b5 	.word	0x000000b5
