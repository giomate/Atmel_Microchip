
LMX_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002730  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020068  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020068  2**0
                  CONTENTS
  4 .bss          000002bc  20000068  00002798  00020068  2**2
                  ALLOC
  5 .stack        00010004  20000324  00002a54  00020068  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
  8 .debug_info   000237c0  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000039b1  00000000  00000000  000438af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cd33  00000000  00000000  00047260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b30  00000000  00000000  00053f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f10  00000000  00000000  00054ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000384cd  00000000  00000000  000559d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014bc7  00000000  00000000  0008dea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123719  00000000  00000000  000a2a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001f28  00000000  00000000  001c6180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 03 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     (.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     184:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 c9 1b 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000068 	.word	0x20000068
     280:	00000000 	.word	0x00000000
     284:	00002730 	.word	0x00002730

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002730 	.word	0x00002730
     2c4:	2000006c 	.word	0x2000006c
     2c8:	00002730 	.word	0x00002730
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     2d0:	bf00      	nop
     2d2:	e7fd      	b.n	2d0 <Dummy_Handler>

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00002730 	.word	0x00002730
     33c:	20000068 	.word	0x20000068
     340:	20000324 	.word	0x20000324
     344:	20000068 	.word	0x20000068
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	000022d9 	.word	0x000022d9
     354:	00000cdd 	.word	0x00000cdd

00000358 <_ZN15lmx2694_HandlerD1Ev>:
	
}

lmx2694_Handler::~lmx2694_Handler() {
	// TODO Auto-generated destructor stub
}
     358:	4770      	bx	lr
	...

0000035c <_ZN15lmx2694_HandlerD0Ev>:
lmx2694_Handler::~lmx2694_Handler() {
     35c:	b510      	push	{r4, lr}
     35e:	4604      	mov	r4, r0
}
     360:	2150      	movs	r1, #80	; 0x50
     362:	4b02      	ldr	r3, [pc, #8]	; (36c <_ZN15lmx2694_HandlerD0Ev+0x10>)
     364:	4798      	blx	r3
     366:	4620      	mov	r0, r4
     368:	bd10      	pop	{r4, pc}
     36a:	bf00      	nop
     36c:	00001bf3 	.word	0x00001bf3

00000370 <_ZN15lmx2694_HandlerC1Ev>:
lmx2694_Handler::lmx2694_Handler() {
     370:	4a0b      	ldr	r2, [pc, #44]	; (3a0 <_ZN15lmx2694_HandlerC1Ev+0x30>)
     372:	6002      	str	r2, [r0, #0]
	write_registers=local_read_registers;
     374:	4a0b      	ldr	r2, [pc, #44]	; (3a4 <_ZN15lmx2694_HandlerC1Ev+0x34>)
     376:	60c2      	str	r2, [r0, #12]
	read_registers=local_write_registers;
     378:	32e8      	adds	r2, #232	; 0xe8
     37a:	6082      	str	r2, [r0, #8]
	channel_divider=1;
     37c:	2201      	movs	r2, #1
     37e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	channel_index=0;
     382:	2100      	movs	r1, #0
     384:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	step=(4400.0-400.0)/(1024*32.0);
     388:	4907      	ldr	r1, [pc, #28]	; (3a8 <_ZN15lmx2694_HandlerC1Ev+0x38>)
     38a:	6481      	str	r1, [r0, #72]	; 0x48
	current_frequency=4000;
     38c:	4907      	ldr	r1, [pc, #28]	; (3ac <_ZN15lmx2694_HandlerC1Ev+0x3c>)
     38e:	6041      	str	r1, [r0, #4]
	target_frequency=current_frequency+step;
     390:	4907      	ldr	r1, [pc, #28]	; (3b0 <_ZN15lmx2694_HandlerC1Ev+0x40>)
     392:	6381      	str	r1, [r0, #56]	; 0x38
	direction=true;
     394:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
	mash_order=1;
     398:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
     39c:	4770      	bx	lr
     39e:	bf00      	nop
     3a0:	000023d8 	.word	0x000023d8
     3a4:	20000084 	.word	0x20000084
     3a8:	3dfa0000 	.word	0x3dfa0000
     3ac:	457a0000 	.word	0x457a0000
     3b0:	457a01f4 	.word	0x457a01f4

000003b4 <_ZN15lmx2694_Handler13Get_N_DividerEb>:
	}
	return channel_divider_values[channel_index];
}

uint32_t lmx2694_Handler::Get_N_Divider(bool mbr){
	if (mbr)
     3b4:	b939      	cbnz	r1, 3c6 <_ZN15lmx2694_Handler13Get_N_DividerEb+0x12>
	{
	} 
	else
	{
		N_divider=(uint32_t)(write_registers[34]<<16)+write_registers[36];
     3b6:	68c2      	ldr	r2, [r0, #12]
     3b8:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
     3bc:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
     3c0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
     3c4:	6283      	str	r3, [r0, #40]	; 0x28
	}
	return N_divider;
}
     3c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
     3c8:	4770      	bx	lr

000003ca <_ZN15lmx2694_Handler13Get_NumeratorEb>:
uint32_t lmx2694_Handler::Get_Numerator(bool mbr){
	if (mbr)
     3ca:	b939      	cbnz	r1, 3dc <_ZN15lmx2694_Handler13Get_NumeratorEb+0x12>
	{
	} 
	else
	{
		numerator=(uint32_t)(write_registers[42]<<16)+write_registers[43];
     3cc:	68c2      	ldr	r2, [r0, #12]
     3ce:	f8b2 1054 	ldrh.w	r1, [r2, #84]	; 0x54
     3d2:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
     3d6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
     3da:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
	return numerator;
}
     3dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     3de:	4770      	bx	lr

000003e0 <_ZN15lmx2694_Handler15Get_DenominatorEb>:
uint32_t lmx2694_Handler::Get_Denominator(bool mbr){
	if (mbr)
     3e0:	b939      	cbnz	r1, 3f2 <_ZN15lmx2694_Handler15Get_DenominatorEb+0x12>
	{
	}
	else
	{
		denominator=(uint32_t)(write_registers[38]<<16)+write_registers[39];
     3e2:	68c2      	ldr	r2, [r0, #12]
     3e4:	f8b2 104c 	ldrh.w	r1, [r2, #76]	; 0x4c
     3e8:	f8b2 304e 	ldrh.w	r3, [r2, #78]	; 0x4e
     3ec:	eb03 4301 	add.w	r3, r3, r1, lsl #16
     3f0:	6303      	str	r3, [r0, #48]	; 0x30
	}
	return denominator;
}
     3f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
     3f4:	4770      	bx	lr
	...

000003f8 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb>:
float lmx2694_Handler::Calculate_Current_Frequency(bool mbr){
     3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     3fc:	4604      	mov	r4, r0
	if (mbr)
     3fe:	b111      	cbz	r1, 406 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0xe>
	else
	{
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+float(Get_Numerator(false))/float(Get_Denominator(false)));
	}
	return vco_frequency;
}
     400:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		vco_frequency=REFERENCE_FREQUENCY*2*(float(Get_N_Divider(false))+float(Get_Numerator(false))/float(Get_Denominator(false)));
     406:	4b11      	ldr	r3, [pc, #68]	; (44c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x54>)
     408:	4798      	blx	r3
     40a:	4607      	mov	r7, r0
     40c:	2100      	movs	r1, #0
     40e:	4620      	mov	r0, r4
     410:	4b0f      	ldr	r3, [pc, #60]	; (450 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x58>)
     412:	4798      	blx	r3
     414:	4606      	mov	r6, r0
     416:	2100      	movs	r1, #0
     418:	4620      	mov	r0, r4
     41a:	4b0e      	ldr	r3, [pc, #56]	; (454 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x5c>)
     41c:	4798      	blx	r3
     41e:	4680      	mov	r8, r0
     420:	4d0d      	ldr	r5, [pc, #52]	; (458 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x60>)
     422:	4630      	mov	r0, r6
     424:	47a8      	blx	r5
     426:	4606      	mov	r6, r0
     428:	4640      	mov	r0, r8
     42a:	47a8      	blx	r5
     42c:	4601      	mov	r1, r0
     42e:	4630      	mov	r0, r6
     430:	4b0a      	ldr	r3, [pc, #40]	; (45c <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x64>)
     432:	4798      	blx	r3
     434:	4606      	mov	r6, r0
     436:	4638      	mov	r0, r7
     438:	47a8      	blx	r5
     43a:	4601      	mov	r1, r0
     43c:	4630      	mov	r0, r6
     43e:	4b08      	ldr	r3, [pc, #32]	; (460 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x68>)
     440:	4798      	blx	r3
     442:	4908      	ldr	r1, [pc, #32]	; (464 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x6c>)
     444:	4b08      	ldr	r3, [pc, #32]	; (468 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x70>)
     446:	4798      	blx	r3
     448:	63e0      	str	r0, [r4, #60]	; 0x3c
     44a:	e7d9      	b.n	400 <_ZN15lmx2694_Handler27Calculate_Current_FrequencyEb+0x8>
     44c:	000003b5 	.word	0x000003b5
     450:	000003cb 	.word	0x000003cb
     454:	000003e1 	.word	0x000003e1
     458:	00001e41 	.word	0x00001e41
     45c:	00002059 	.word	0x00002059
     460:	00001ce1 	.word	0x00001ce1
     464:	43480000 	.word	0x43480000
     468:	00001ef1 	.word	0x00001ef1

0000046c <_ZN15lmx2694_Handler3GCDEmm>:
uint32_t  lmx2694_Handler::GCD(uint32_t a, uint32_t b)
{
	if (a == 0)
     46c:	b1a1      	cbz	r1, 498 <_ZN15lmx2694_Handler3GCDEmm+0x2c>
{
     46e:	b508      	push	{r3, lr}
     470:	460b      	mov	r3, r1
	return b;
	else if (b == 0)
     472:	b19a      	cbz	r2, 49c <_ZN15lmx2694_Handler3GCDEmm+0x30>
     474:	4611      	mov	r1, r2
	return a;

	if (a < b)
     476:	4293      	cmp	r3, r2
     478:	d306      	bcc.n	488 <_ZN15lmx2694_Handler3GCDEmm+0x1c>
	return GCD(a, b % a);
	else
	return GCD(b, a % b);
     47a:	fbb3 f2f2 	udiv	r2, r3, r2
     47e:	fb01 3212 	mls	r2, r1, r2, r3
     482:	f7ff fff3 	bl	46c <_ZN15lmx2694_Handler3GCDEmm>
     486:	bd08      	pop	{r3, pc}
	return GCD(a, b % a);
     488:	fbb2 f2f3 	udiv	r2, r2, r3
     48c:	fb03 1212 	mls	r2, r3, r2, r1
     490:	4619      	mov	r1, r3
     492:	f7ff ffeb 	bl	46c <_ZN15lmx2694_Handler3GCDEmm>
     496:	bd08      	pop	{r3, pc}
	return b;
     498:	4610      	mov	r0, r2
     49a:	4770      	bx	lr
	return a;
     49c:	4608      	mov	r0, r1
}
     49e:	bd08      	pop	{r3, pc}

000004a0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv>:
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
	

}

uint8_t lmx2694_Handler::Choose_Channel_Divider_Index(){
     4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     4a4:	4606      	mov	r6, r0
     4a6:	4d1b      	ldr	r5, [pc, #108]	; (514 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x74>)
	for ( int i = 0; i < channel_divider_size; i++)
     4a8:	2400      	movs	r4, #0
				
				}
		} 
		else
		{
				if (11500/(channel_divider_values[i])>target_frequency)
     4aa:	f642 49ec 	movw	r9, #11500	; 0x2cec
     4ae:	f8df 8070 	ldr.w	r8, [pc, #112]	; 520 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x80>
     4b2:	4f19      	ldr	r7, [pc, #100]	; (518 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x78>)
				if (MAX_VCO_FREQUENCY/(channel_divider_values[i])>target_frequency)
     4b4:	f643 2afc 	movw	sl, #15100	; 0x3afc
     4b8:	e00a      	b.n	4d0 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x30>
     4ba:	6828      	ldr	r0, [r5, #0]
     4bc:	fb9a f0f0 	sdiv	r0, sl, r0
     4c0:	47c0      	blx	r8
     4c2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
     4c4:	47b8      	blx	r7
     4c6:	b1d0      	cbz	r0, 4fe <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x5e>
	for ( int i = 0; i < channel_divider_size; i++)
     4c8:	3401      	adds	r4, #1
     4ca:	3504      	adds	r5, #4
     4cc:	2c0e      	cmp	r4, #14
     4ce:	d00c      	beq.n	4ea <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
		if (i<3)
     4d0:	2c02      	cmp	r4, #2
     4d2:	ddf2      	ble.n	4ba <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x1a>
				if (11500/(channel_divider_values[i])>target_frequency)
     4d4:	6828      	ldr	r0, [r5, #0]
     4d6:	fb99 f0f0 	sdiv	r0, r9, r0
     4da:	47c0      	blx	r8
     4dc:	6bb1      	ldr	r1, [r6, #56]	; 0x38
     4de:	47b8      	blx	r7
     4e0:	2800      	cmp	r0, #0
     4e2:	d1f1      	bne.n	4c8 <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x28>
				{
				}
				else
				{
					channel_index= i-1;
     4e4:	3c01      	subs	r4, #1
     4e6:	f886 4023 	strb.w	r4, [r6, #35]	; 0x23
					break;
				}
		}
	
	}
	channel_divider=channel_divider_values[channel_index];
     4ea:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
     4ee:	4b0b      	ldr	r3, [pc, #44]	; (51c <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x7c>)
     4f0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     4f4:	691b      	ldr	r3, [r3, #16]
     4f6:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	return channel_index;
}
     4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (i>0)
     4fe:	2c00      	cmp	r4, #0
							channel_index=i-1;
     500:	bfc7      	ittee	gt
     502:	f104 34ff 	addgt.w	r4, r4, #4294967295
     506:	f886 4023 	strbgt.w	r4, [r6, #35]	; 0x23
						 channel_index=0;
     50a:	2300      	movle	r3, #0
     50c:	f886 3023 	strble.w	r3, [r6, #35]	; 0x23
     510:	e7eb      	b.n	4ea <_ZN15lmx2694_Handler28Choose_Channel_Divider_IndexEv+0x4a>
     512:	bf00      	nop
     514:	000023e0 	.word	0x000023e0
     518:	00002269 	.word	0x00002269
     51c:	000023d0 	.word	0x000023d0
     520:	00001e49 	.word	0x00001e49

00000524 <_ZN15lmx2694_Handler18Calculate_FractionEf>:
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
	}
	Program_PFD_DLY_SEL(vco_frequency);
}

void lmx2694_Handler::Calculate_Fraction(float fr){
     524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     526:	4604      	mov	r4, r0
     528:	4608      	mov	r0, r1
	gcd=GCD(round(fr*precision),precision);
     52a:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
     52e:	4b0e      	ldr	r3, [pc, #56]	; (568 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x44>)
     530:	4798      	blx	r3
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
     532:	4b0e      	ldr	r3, [pc, #56]	; (56c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x48>)
     534:	4798      	blx	r3
     536:	4607      	mov	r7, r0
     538:	4e0d      	ldr	r6, [pc, #52]	; (570 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x4c>)
     53a:	47b0      	blx	r6
     53c:	f04f 32ff 	mov.w	r2, #4294967295
     540:	4601      	mov	r1, r0
     542:	4620      	mov	r0, r4
     544:	4b0b      	ldr	r3, [pc, #44]	; (574 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x50>)
     546:	4798      	blx	r3
     548:	4605      	mov	r5, r0
     54a:	6360      	str	r0, [r4, #52]	; 0x34
	numerator=round(fr*precision)/gcd;
     54c:	4b0a      	ldr	r3, [pc, #40]	; (578 <_ZN15lmx2694_Handler18Calculate_FractionEf+0x54>)
     54e:	4798      	blx	r3
     550:	4601      	mov	r1, r0
     552:	4638      	mov	r0, r7
     554:	4b09      	ldr	r3, [pc, #36]	; (57c <_ZN15lmx2694_Handler18Calculate_FractionEf+0x58>)
     556:	4798      	blx	r3
     558:	47b0      	blx	r6
     55a:	62e0      	str	r0, [r4, #44]	; 0x2c
	denominator=precision/gcd;
     55c:	f04f 30ff 	mov.w	r0, #4294967295
     560:	fbb0 f0f5 	udiv	r0, r0, r5
     564:	6320      	str	r0, [r4, #48]	; 0x30
     566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     568:	00001ef1 	.word	0x00001ef1
     56c:	00001c89 	.word	0x00001c89
     570:	0000227d 	.word	0x0000227d
     574:	0000046d 	.word	0x0000046d
     578:	00001e41 	.word	0x00001e41
     57c:	00002059 	.word	0x00002059

00000580 <_ZN15lmx2694_Handler15Get_Three_BytesEm>:
	spi->SetCS(true);
	return bool_result;
}
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
	for(int i=0; i<3;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
     580:	7581      	strb	r1, [r0, #22]
     582:	0a0b      	lsrs	r3, r1, #8
     584:	7543      	strb	r3, [r0, #21]
     586:	0c09      	lsrs	r1, r1, #16
     588:	7501      	strb	r1, [r0, #20]
     58a:	4770      	bx	lr

0000058c <_ZN15lmx2694_Handler10Power_DownEv>:
bool lmx2694_Handler::Power_Down(){
     58c:	b538      	push	{r3, r4, r5, lr}
     58e:	4604      	mov	r4, r0
	spi->SetCS(false);
     590:	2100      	movs	r1, #0
     592:	6900      	ldr	r0, [r0, #16]
     594:	4d0b      	ldr	r5, [pc, #44]	; (5c4 <_ZN15lmx2694_Handler10Power_DownEv+0x38>)
     596:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
     598:	f242 1119 	movw	r1, #8473	; 0x2119
     59c:	4620      	mov	r0, r4
     59e:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <_ZN15lmx2694_Handler10Power_DownEv+0x3c>)
     5a0:	4798      	blx	r3
	int_result=spi->Write(write_bytes,3);
     5a2:	2203      	movs	r2, #3
     5a4:	f104 0114 	add.w	r1, r4, #20
     5a8:	6920      	ldr	r0, [r4, #16]
     5aa:	4b08      	ldr	r3, [pc, #32]	; (5cc <_ZN15lmx2694_Handler10Power_DownEv+0x40>)
     5ac:	4798      	blx	r3
     5ae:	61e0      	str	r0, [r4, #28]
	bool_result=int_result>0;
     5b0:	2800      	cmp	r0, #0
     5b2:	bfd4      	ite	le
     5b4:	2000      	movle	r0, #0
     5b6:	2001      	movgt	r0, #1
     5b8:	76a0      	strb	r0, [r4, #26]
	spi->SetCS(true);
     5ba:	2101      	movs	r1, #1
     5bc:	6920      	ldr	r0, [r4, #16]
     5be:	47a8      	blx	r5
}
     5c0:	7ea0      	ldrb	r0, [r4, #26]
     5c2:	bd38      	pop	{r3, r4, r5, pc}
     5c4:	00000ded 	.word	0x00000ded
     5c8:	00000581 	.word	0x00000581
     5cc:	00000dad 	.word	0x00000dad

000005d0 <_ZN15lmx2694_Handler13Program_ResetEv>:
bool lmx2694_Handler::Program_Reset(){
     5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5d4:	4604      	mov	r4, r0
	spi->SetCS(false);
     5d6:	2100      	movs	r1, #0
     5d8:	6900      	ldr	r0, [r0, #16]
     5da:	4d16      	ldr	r5, [pc, #88]	; (634 <_ZN15lmx2694_Handler13Program_ResetEv+0x64>)
     5dc:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
     5de:	f242 111e 	movw	r1, #8478	; 0x211e
     5e2:	4620      	mov	r0, r4
     5e4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 640 <_ZN15lmx2694_Handler13Program_ResetEv+0x70>
     5e8:	47c0      	blx	r8
	int_result=spi->Write(write_bytes,3);
     5ea:	f104 0714 	add.w	r7, r4, #20
     5ee:	2203      	movs	r2, #3
     5f0:	4639      	mov	r1, r7
     5f2:	6920      	ldr	r0, [r4, #16]
     5f4:	4e10      	ldr	r6, [pc, #64]	; (638 <_ZN15lmx2694_Handler13Program_ResetEv+0x68>)
     5f6:	47b0      	blx	r6
     5f8:	61e0      	str	r0, [r4, #28]
	spi->SetCS(true);
     5fa:	2101      	movs	r1, #1
     5fc:	6920      	ldr	r0, [r4, #16]
     5fe:	47a8      	blx	r5
	delay_us(100);
     600:	2064      	movs	r0, #100	; 0x64
     602:	4b0e      	ldr	r3, [pc, #56]	; (63c <_ZN15lmx2694_Handler13Program_ResetEv+0x6c>)
     604:	4798      	blx	r3
	spi->SetCS(false);
     606:	2100      	movs	r1, #0
     608:	6920      	ldr	r0, [r4, #16]
     60a:	47a8      	blx	r5
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
     60c:	f242 111c 	movw	r1, #8476	; 0x211c
     610:	4620      	mov	r0, r4
     612:	47c0      	blx	r8
	int_result=spi->Write(write_bytes,3);
     614:	2203      	movs	r2, #3
     616:	4639      	mov	r1, r7
     618:	6920      	ldr	r0, [r4, #16]
     61a:	47b0      	blx	r6
     61c:	61e0      	str	r0, [r4, #28]
	bool_result=int_result>0;
     61e:	2800      	cmp	r0, #0
     620:	bfd4      	ite	le
     622:	2000      	movle	r0, #0
     624:	2001      	movgt	r0, #1
     626:	76a0      	strb	r0, [r4, #26]
	spi->SetCS(true);
     628:	2101      	movs	r1, #1
     62a:	6920      	ldr	r0, [r4, #16]
     62c:	47a8      	blx	r5
}
     62e:	7ea0      	ldrb	r0, [r4, #26]
     630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     634:	00000ded 	.word	0x00000ded
     638:	00000dad 	.word	0x00000dad
     63c:	000010dd 	.word	0x000010dd
     640:	00000581 	.word	0x00000581

00000644 <_ZN15lmx2694_Handler16Make_Three_BytesEht>:
	}

}
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16_t data){
	for(int i=0; i<2;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
     644:	7582      	strb	r2, [r0, #22]
     646:	1212      	asrs	r2, r2, #8
     648:	7542      	strb	r2, [r0, #21]
	}
	write_bytes[0]=index;
     64a:	7501      	strb	r1, [r0, #20]
     64c:	4770      	bx	lr
	...

00000650 <_ZN15lmx2694_Handler21Write_Single_RegisterEht>:
		Write_Single_Register(i-1,read_registers[i-1]);

	}

}
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16_t data){
     650:	b570      	push	{r4, r5, r6, lr}
     652:	4604      	mov	r4, r0
     654:	460d      	mov	r5, r1
     656:	4616      	mov	r6, r2
	if ((write_registers[index]==data)&is_locked)
     658:	68c3      	ldr	r3, [r0, #12]
     65a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     65e:	4293      	cmp	r3, r2
     660:	d103      	bne.n	66a <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1a>
     662:	7ec3      	ldrb	r3, [r0, #27]
     664:	b10b      	cbz	r3, 66a <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x1a>

		spi->SetCS(true);
	}
	
	return int_result;
}
     666:	69e0      	ldr	r0, [r4, #28]
     668:	bd70      	pop	{r4, r5, r6, pc}
		spi->SetCS(false);
     66a:	2100      	movs	r1, #0
     66c:	6920      	ldr	r0, [r4, #16]
     66e:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
     670:	4798      	blx	r3
		Make_Three_Bytes(index,data);
     672:	4632      	mov	r2, r6
     674:	4629      	mov	r1, r5
     676:	4620      	mov	r0, r4
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x54>)
     67a:	4798      	blx	r3
		int_result=spi->Write(write_bytes,3);
     67c:	2203      	movs	r2, #3
     67e:	f104 0114 	add.w	r1, r4, #20
     682:	6920      	ldr	r0, [r4, #16]
     684:	4b08      	ldr	r3, [pc, #32]	; (6a8 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x58>)
     686:	4798      	blx	r3
     688:	61e0      	str	r0, [r4, #28]
		if (int_result>0)
     68a:	2800      	cmp	r0, #0
				write_registers[index]=data;
     68c:	bfc4      	itt	gt
     68e:	68e3      	ldrgt	r3, [r4, #12]
     690:	f823 6015 	strhgt.w	r6, [r3, r5, lsl #1]
		spi->SetCS(true);
     694:	2101      	movs	r1, #1
     696:	6920      	ldr	r0, [r4, #16]
     698:	4b01      	ldr	r3, [pc, #4]	; (6a0 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x50>)
     69a:	4798      	blx	r3
     69c:	e7e3      	b.n	666 <_ZN15lmx2694_Handler21Write_Single_RegisterEht+0x16>
     69e:	bf00      	nop
     6a0:	00000ded 	.word	0x00000ded
     6a4:	00000645 	.word	0x00000645
     6a8:	00000dad 	.word	0x00000dad

000006ac <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf>:
int lmx2694_Handler::Program_PFD_DLY_SEL(float vcof){
     6ac:	b538      	push	{r3, r4, r5, lr}
     6ae:	4604      	mov	r4, r0
	if (mash_order)
     6b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
     6b4:	b11b      	cbz	r3, 6be <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x12>
     6b6:	460d      	mov	r5, r1
		switch (mash_order)
     6b8:	b12b      	cbz	r3, 6c6 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x1a>
     6ba:	2b01      	cmp	r3, #1
     6bc:	d016      	beq.n	6ec <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x40>
	return write_registers[37];
     6be:	68e3      	ldr	r3, [r4, #12]
}
     6c0:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
     6c4:	bd38      	pop	{r3, r4, r5, pc}
				if (vcof>12500)
     6c6:	4919      	ldr	r1, [pc, #100]	; (72c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     6c8:	4628      	mov	r0, r5
     6ca:	4b19      	ldr	r3, [pc, #100]	; (730 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     6cc:	4798      	blx	r3
     6ce:	b130      	cbz	r0, 6de <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x32>
					Write_Single_Register(37,0x8204);
     6d0:	f248 2204 	movw	r2, #33284	; 0x8204
     6d4:	2125      	movs	r1, #37	; 0x25
     6d6:	4620      	mov	r0, r4
     6d8:	4b16      	ldr	r3, [pc, #88]	; (734 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     6da:	4798      	blx	r3
     6dc:	e7ef      	b.n	6be <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x12>
					Write_Single_Register(37,0x8104);
     6de:	f248 1204 	movw	r2, #33028	; 0x8104
     6e2:	2125      	movs	r1, #37	; 0x25
     6e4:	4620      	mov	r0, r4
     6e6:	4b13      	ldr	r3, [pc, #76]	; (734 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     6e8:	4798      	blx	r3
     6ea:	e7e8      	b.n	6be <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x12>
				if (vcof>12500)
     6ec:	490f      	ldr	r1, [pc, #60]	; (72c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x80>)
     6ee:	4628      	mov	r0, r5
     6f0:	4b0f      	ldr	r3, [pc, #60]	; (730 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     6f2:	4798      	blx	r3
     6f4:	b958      	cbnz	r0, 70e <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x62>
					if (vcof>10000)
     6f6:	4910      	ldr	r1, [pc, #64]	; (738 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x8c>)
     6f8:	4628      	mov	r0, r5
     6fa:	4b0d      	ldr	r3, [pc, #52]	; (730 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x84>)
     6fc:	4798      	blx	r3
     6fe:	b968      	cbnz	r0, 71c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x70>
						Write_Single_Register(37,0x8104);
     700:	f248 1204 	movw	r2, #33028	; 0x8104
     704:	2125      	movs	r1, #37	; 0x25
     706:	4620      	mov	r0, r4
     708:	4b0a      	ldr	r3, [pc, #40]	; (734 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     70a:	4798      	blx	r3
     70c:	e7d7      	b.n	6be <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x12>
					Write_Single_Register(37,0x8304);
     70e:	f248 3204 	movw	r2, #33540	; 0x8304
     712:	2125      	movs	r1, #37	; 0x25
     714:	4620      	mov	r0, r4
     716:	4b07      	ldr	r3, [pc, #28]	; (734 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     718:	4798      	blx	r3
     71a:	e7d0      	b.n	6be <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x12>
						Write_Single_Register(37,0x8204);
     71c:	f248 2204 	movw	r2, #33284	; 0x8204
     720:	2125      	movs	r1, #37	; 0x25
     722:	4620      	mov	r0, r4
     724:	4b03      	ldr	r3, [pc, #12]	; (734 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x88>)
     726:	4798      	blx	r3
     728:	e7c9      	b.n	6be <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEf+0x12>
     72a:	bf00      	nop
     72c:	46435000 	.word	0x46435000
     730:	00002269 	.word	0x00002269
     734:	00000651 	.word	0x00000651
     738:	461c4000 	.word	0x461c4000

0000073c <_ZN15lmx2694_Handler13Write_FCAL_ENEb>:
bool lmx2694_Handler::Write_FCAL_EN(bool st){
     73c:	b510      	push	{r4, lr}
     73e:	4604      	mov	r4, r0
	if(st){
     740:	b971      	cbnz	r1, 760 <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x24>
		register_value=write_registers[0]&(~((uint16_t)(0x01<<FCAL_EN)));
     742:	68c3      	ldr	r3, [r0, #12]
     744:	881b      	ldrh	r3, [r3, #0]
     746:	f023 0308 	bic.w	r3, r3, #8
     74a:	8403      	strh	r3, [r0, #32]
	int_result=Write_Single_Register(0,register_value);
     74c:	8c22      	ldrh	r2, [r4, #32]
     74e:	2100      	movs	r1, #0
     750:	4620      	mov	r0, r4
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x30>)
     754:	4798      	blx	r3
     756:	61e0      	str	r0, [r4, #28]
}
     758:	3000      	adds	r0, #0
     75a:	bf18      	it	ne
     75c:	2001      	movne	r0, #1
     75e:	bd10      	pop	{r4, pc}
		register_value=write_registers[0]|(0x01<<FCAL_EN);
     760:	68c3      	ldr	r3, [r0, #12]
     762:	881b      	ldrh	r3, [r3, #0]
     764:	f043 0308 	orr.w	r3, r3, #8
     768:	8403      	strh	r3, [r0, #32]
     76a:	e7ef      	b.n	74c <_ZN15lmx2694_Handler13Write_FCAL_ENEb+0x10>
     76c:	00000651 	.word	0x00000651

00000770 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv>:
bool lmx2694_Handler::Toggle_FCAL_EN(){
     770:	b538      	push	{r3, r4, r5, lr}
     772:	4604      	mov	r4, r0
	Write_FCAL_EN(false);
     774:	2100      	movs	r1, #0
     776:	4d05      	ldr	r5, [pc, #20]	; (78c <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x1c>)
     778:	47a8      	blx	r5
	delay_us(100);
     77a:	2064      	movs	r0, #100	; 0x64
     77c:	4b04      	ldr	r3, [pc, #16]	; (790 <_ZN15lmx2694_Handler14Toggle_FCAL_ENEv+0x20>)
     77e:	4798      	blx	r3
	bool_result=Write_FCAL_EN(true);
     780:	2101      	movs	r1, #1
     782:	4620      	mov	r0, r4
     784:	47a8      	blx	r5
     786:	76a0      	strb	r0, [r4, #26]
}
     788:	bd38      	pop	{r3, r4, r5, pc}
     78a:	bf00      	nop
     78c:	0000073d 	.word	0x0000073d
     790:	000010dd 	.word	0x000010dd

00000794 <_ZN15lmx2694_Handler18Initiate_RegistersEv>:
void lmx2694_Handler::Initiate_Registers(){
     794:	b570      	push	{r4, r5, r6, lr}
     796:	4605      	mov	r5, r0
     798:	4c0c      	ldr	r4, [pc, #48]	; (7cc <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x38>)
     79a:	f504 7297 	add.w	r2, r4, #302	; 0x12e
     79e:	3448      	adds	r4, #72	; 0x48
     7a0:	2300      	movs	r3, #0
		read_registers[i]=default_registers[NUMBER_REGISTERS-i-1];
     7a2:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
     7a6:	68a9      	ldr	r1, [r5, #8]
     7a8:	52c8      	strh	r0, [r1, r3]
     7aa:	3302      	adds	r3, #2
	for (int i = 0; i < NUMBER_REGISTERS; i++)
     7ac:	42a2      	cmp	r2, r4
     7ae:	d1f8      	bne.n	7a2 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0xe>
     7b0:	2472      	movs	r4, #114	; 0x72
		Write_Single_Register(i-1,read_registers[i-1]);
     7b2:	4e07      	ldr	r6, [pc, #28]	; (7d0 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x3c>)
     7b4:	68ab      	ldr	r3, [r5, #8]
     7b6:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
     7ba:	b2e1      	uxtb	r1, r4
     7bc:	4628      	mov	r0, r5
     7be:	47b0      	blx	r6
     7c0:	3c01      	subs	r4, #1
	for(int i=NUMBER_REGISTERS; i>0;i--){
     7c2:	f1b4 3fff 	cmp.w	r4, #4294967295
     7c6:	d1f5      	bne.n	7b4 <_ZN15lmx2694_Handler18Initiate_RegistersEv+0x20>
}
     7c8:	bd70      	pop	{r4, r5, r6, pc}
     7ca:	bf00      	nop
     7cc:	000023d0 	.word	0x000023d0
     7d0:	00000651 	.word	0x00000651

000007d4 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb>:
	read_registers[index]=register_value;
	Set_MUXOUT_READBACK(true);
	return register_value;
}

int lmx2694_Handler::Set_MUXOUT_READBACK(bool st){
     7d4:	b510      	push	{r4, lr}
     7d6:	4604      	mov	r4, r0
	if(st){
     7d8:	b959      	cbnz	r1, 7f2 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x1e>
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
		}else{
		register_value=read_registers[0]&(~((uint16_t)(0x01<<READBACK_ENABLE_BIT)));
     7da:	6883      	ldr	r3, [r0, #8]
     7dc:	881b      	ldrh	r3, [r3, #0]
     7de:	f023 0304 	bic.w	r3, r3, #4
     7e2:	8403      	strh	r3, [r0, #32]
	}
	int_result=Write_Single_Register(0,register_value);
     7e4:	8c22      	ldrh	r2, [r4, #32]
     7e6:	2100      	movs	r1, #0
     7e8:	4620      	mov	r0, r4
     7ea:	4b05      	ldr	r3, [pc, #20]	; (800 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x2c>)
     7ec:	4798      	blx	r3
     7ee:	61e0      	str	r0, [r4, #28]
	return int_result;
}
     7f0:	bd10      	pop	{r4, pc}
		register_value=read_registers[0]|(0x01<<READBACK_ENABLE_BIT);
     7f2:	6883      	ldr	r3, [r0, #8]
     7f4:	881b      	ldrh	r3, [r3, #0]
     7f6:	f043 0304 	orr.w	r3, r3, #4
     7fa:	8403      	strh	r3, [r0, #32]
     7fc:	e7f2      	b.n	7e4 <_ZN15lmx2694_Handler19Set_MUXOUT_READBACKEb+0x10>
     7fe:	bf00      	nop
     800:	00000651 	.word	0x00000651

00000804 <_ZN15lmx2694_Handler20Read_Single_RegisterEh>:
uint16_t lmx2694_Handler::Read_Single_Register(uint8_t index){
     804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     808:	4604      	mov	r4, r0
     80a:	4689      	mov	r9, r1
	Set_MUXOUT_READBACK(false);
     80c:	2100      	movs	r1, #0
     80e:	4b1d      	ldr	r3, [pc, #116]	; (884 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x80>)
     810:	4798      	blx	r3
	register_value=0;
     812:	2300      	movs	r3, #0
     814:	8423      	strh	r3, [r4, #32]
		spi->SetCS(false);
     816:	461e      	mov	r6, r3
     818:	f8df 8074 	ldr.w	r8, [pc, #116]	; 890 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x8c>
			int_result=spi->Write(&private_index,1);
     81c:	2701      	movs	r7, #1
		spi->SetCS(false);
     81e:	4631      	mov	r1, r6
     820:	6920      	ldr	r0, [r4, #16]
     822:	47c0      	blx	r8
			private_index=index|0x80;
     824:	f069 037f 	orn	r3, r9, #127	; 0x7f
     828:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			memset(read_bytes,0,3);
     82c:	f104 0517 	add.w	r5, r4, #23
     830:	f8a4 6017 	strh.w	r6, [r4, #23]
     834:	7666      	strb	r6, [r4, #25]
			int_result=spi->Write(&private_index,1);
     836:	463a      	mov	r2, r7
     838:	f104 0122 	add.w	r1, r4, #34	; 0x22
     83c:	6920      	ldr	r0, [r4, #16]
     83e:	4b12      	ldr	r3, [pc, #72]	; (888 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x84>)
     840:	4798      	blx	r3
     842:	61e0      	str	r0, [r4, #28]
			int_result=spi->Read(read_bytes,2);
     844:	2202      	movs	r2, #2
     846:	4629      	mov	r1, r5
     848:	6920      	ldr	r0, [r4, #16]
     84a:	4b10      	ldr	r3, [pc, #64]	; (88c <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x88>)
     84c:	4798      	blx	r3
     84e:	61e0      	str	r0, [r4, #28]
			register_value=read_bytes[0]*256+read_bytes[1];
     850:	7de2      	ldrb	r2, [r4, #23]
     852:	7e23      	ldrb	r3, [r4, #24]
     854:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     858:	8423      	strh	r3, [r4, #32]
			spi->SetCS(true);
     85a:	4639      	mov	r1, r7
     85c:	6920      	ldr	r0, [r4, #16]
     85e:	47c0      	blx	r8
	while((register_value==0)|(register_value==0xffff)){
     860:	8c22      	ldrh	r2, [r4, #32]
     862:	1e53      	subs	r3, r2, #1
     864:	b29b      	uxth	r3, r3
     866:	f64f 71fd 	movw	r1, #65533	; 0xfffd
     86a:	428b      	cmp	r3, r1
     86c:	d8d7      	bhi.n	81e <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x1a>
	read_registers[index]=register_value;
     86e:	68a3      	ldr	r3, [r4, #8]
     870:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
	Set_MUXOUT_READBACK(true);
     874:	2101      	movs	r1, #1
     876:	4620      	mov	r0, r4
     878:	4b02      	ldr	r3, [pc, #8]	; (884 <_ZN15lmx2694_Handler20Read_Single_RegisterEh+0x80>)
     87a:	4798      	blx	r3
}
     87c:	8c20      	ldrh	r0, [r4, #32]
     87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     882:	bf00      	nop
     884:	000007d5 	.word	0x000007d5
     888:	00000dad 	.word	0x00000dad
     88c:	00000dcd 	.word	0x00000dcd
     890:	00000ded 	.word	0x00000ded

00000894 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb>:
int lmx2694_Handler::Get_Channel_Divider_Value(bool mbr){
     894:	b510      	push	{r4, lr}
     896:	4604      	mov	r4, r0
	if (mbr)
     898:	b969      	cbnz	r1, 8b6 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x22>
		channel_index=((write_registers[75])>>6)&0x1f;
     89a:	68c3      	ldr	r3, [r0, #12]
     89c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
     8a0:	f3c3 1384 	ubfx	r3, r3, #6, #5
     8a4:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	return channel_divider_values[channel_index];
     8a8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
     8ac:	4b06      	ldr	r3, [pc, #24]	; (8c8 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x34>)
     8ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
     8b2:	6918      	ldr	r0, [r3, #16]
     8b4:	bd10      	pop	{r4, pc}
		channel_index=((Read_Single_Register(75))>>6)&0x1f;
     8b6:	214b      	movs	r1, #75	; 0x4b
     8b8:	4b04      	ldr	r3, [pc, #16]	; (8cc <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x38>)
     8ba:	4798      	blx	r3
     8bc:	f3c0 1084 	ubfx	r0, r0, #6, #5
     8c0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
     8c4:	e7f0      	b.n	8a8 <_ZN15lmx2694_Handler25Get_Channel_Divider_ValueEb+0x14>
     8c6:	bf00      	nop
     8c8:	000023d0 	.word	0x000023d0
     8cc:	00000805 	.word	0x00000805

000008d0 <_ZN15lmx2694_Handler8IsLockedEv>:
bool lmx2694_Handler::IsLocked(void){
     8d0:	b530      	push	{r4, r5, lr}
     8d2:	b083      	sub	sp, #12
     8d4:	4605      	mov	r5, r0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     8d6:	4668      	mov	r0, sp
     8d8:	4b27      	ldr	r3, [pc, #156]	; (978 <_ZN15lmx2694_Handler8IsLockedEv+0xa8>)
     8da:	4798      	blx	r3
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     8dc:	4b27      	ldr	r3, [pc, #156]	; (97c <_ZN15lmx2694_Handler8IsLockedEv+0xac>)
     8de:	6819      	ldr	r1, [r3, #0]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     8e0:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     8e2:	691c      	ldr	r4, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     8e4:	4054      	eors	r4, r2
     8e6:	400c      	ands	r4, r1
     8e8:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
     8ea:	4668      	mov	r0, sp
     8ec:	4b24      	ldr	r3, [pc, #144]	; (980 <_ZN15lmx2694_Handler8IsLockedEv+0xb0>)
     8ee:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     8f0:	f004 0440 	and.w	r4, r4, #64	; 0x40
     8f4:	2c00      	cmp	r4, #0
     8f6:	bf14      	ite	ne
     8f8:	2301      	movne	r3, #1
     8fa:	2300      	moveq	r3, #0
     8fc:	76eb      	strb	r3, [r5, #27]
	if (is_locked)
     8fe:	d00d      	beq.n	91c <_ZN15lmx2694_Handler8IsLockedEv+0x4c>
		return	(uint8_t)((write_registers[46])&(0x03));
     900:	68eb      	ldr	r3, [r5, #12]
     902:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
		if (Get_OUT_MUX(2)>0)
     906:	f013 0f03 	tst.w	r3, #3
     90a:	d020      	beq.n	94e <_ZN15lmx2694_Handler8IsLockedEv+0x7e>
			current_frequency=Calculate_Current_Frequency(false)/1;
     90c:	2100      	movs	r1, #0
     90e:	4628      	mov	r0, r5
     910:	4b1c      	ldr	r3, [pc, #112]	; (984 <_ZN15lmx2694_Handler8IsLockedEv+0xb4>)
     912:	4798      	blx	r3
     914:	6068      	str	r0, [r5, #4]
}
     916:	7ee8      	ldrb	r0, [r5, #27]
     918:	b003      	add	sp, #12
     91a:	bd30      	pop	{r4, r5, pc}
		delay_ms(10);
     91c:	200a      	movs	r0, #10
     91e:	4b1a      	ldr	r3, [pc, #104]	; (988 <_ZN15lmx2694_Handler8IsLockedEv+0xb8>)
     920:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
     922:	a801      	add	r0, sp, #4
     924:	4b14      	ldr	r3, [pc, #80]	; (978 <_ZN15lmx2694_Handler8IsLockedEv+0xa8>)
     926:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     928:	4b14      	ldr	r3, [pc, #80]	; (97c <_ZN15lmx2694_Handler8IsLockedEv+0xac>)
     92a:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     92c:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     92e:	691c      	ldr	r4, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     930:	4054      	eors	r4, r2
     932:	400c      	ands	r4, r1
     934:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
     936:	a801      	add	r0, sp, #4
     938:	4b11      	ldr	r3, [pc, #68]	; (980 <_ZN15lmx2694_Handler8IsLockedEv+0xb0>)
     93a:	4798      	blx	r3
     93c:	f004 0440 	and.w	r4, r4, #64	; 0x40
     940:	2c00      	cmp	r4, #0
     942:	bf14      	ite	ne
     944:	2301      	movne	r3, #1
     946:	2300      	moveq	r3, #0
     948:	76eb      	strb	r3, [r5, #27]
	if (is_locked)
     94a:	d0e4      	beq.n	916 <_ZN15lmx2694_Handler8IsLockedEv+0x46>
     94c:	e7d8      	b.n	900 <_ZN15lmx2694_Handler8IsLockedEv+0x30>
			channel_divider=Get_Channel_Divider_Value(false);
     94e:	2100      	movs	r1, #0
     950:	4628      	mov	r0, r5
     952:	4b0e      	ldr	r3, [pc, #56]	; (98c <_ZN15lmx2694_Handler8IsLockedEv+0xbc>)
     954:	4798      	blx	r3
     956:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
			current_frequency=Calculate_Current_Frequency(false)/channel_divider;
     95a:	2100      	movs	r1, #0
     95c:	4628      	mov	r0, r5
     95e:	4b09      	ldr	r3, [pc, #36]	; (984 <_ZN15lmx2694_Handler8IsLockedEv+0xb4>)
     960:	4798      	blx	r3
     962:	4604      	mov	r4, r0
     964:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
     968:	4b09      	ldr	r3, [pc, #36]	; (990 <_ZN15lmx2694_Handler8IsLockedEv+0xc0>)
     96a:	4798      	blx	r3
     96c:	4601      	mov	r1, r0
     96e:	4620      	mov	r0, r4
     970:	4b08      	ldr	r3, [pc, #32]	; (994 <_ZN15lmx2694_Handler8IsLockedEv+0xc4>)
     972:	4798      	blx	r3
     974:	6068      	str	r0, [r5, #4]
     976:	e7ce      	b.n	916 <_ZN15lmx2694_Handler8IsLockedEv+0x46>
     978:	000010c1 	.word	0x000010c1
     97c:	41008000 	.word	0x41008000
     980:	000010cf 	.word	0x000010cf
     984:	000003f9 	.word	0x000003f9
     988:	000010fd 	.word	0x000010fd
     98c:	00000895 	.word	0x00000895
     990:	00001e49 	.word	0x00001e49
     994:	00002059 	.word	0x00002059

00000998 <_ZN15lmx2694_Handler4InitEv>:
bool lmx2694_Handler::Init(){
     998:	b538      	push	{r3, r4, r5, lr}
     99a:	4604      	mov	r4, r0
	spi=&staticSPI;
     99c:	480e      	ldr	r0, [pc, #56]	; (9d8 <_ZN15lmx2694_Handler4InitEv+0x40>)
     99e:	6120      	str	r0, [r4, #16]
	spi->Init();
     9a0:	4b0e      	ldr	r3, [pc, #56]	; (9dc <_ZN15lmx2694_Handler4InitEv+0x44>)
     9a2:	4798      	blx	r3
	spi->SetCS(true);
     9a4:	2101      	movs	r1, #1
     9a6:	6920      	ldr	r0, [r4, #16]
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <_ZN15lmx2694_Handler4InitEv+0x48>)
     9aa:	4798      	blx	r3
	Power_Down();
     9ac:	4620      	mov	r0, r4
     9ae:	4b0d      	ldr	r3, [pc, #52]	; (9e4 <_ZN15lmx2694_Handler4InitEv+0x4c>)
     9b0:	4798      	blx	r3
	Program_Reset();
     9b2:	4620      	mov	r0, r4
     9b4:	4b0c      	ldr	r3, [pc, #48]	; (9e8 <_ZN15lmx2694_Handler4InitEv+0x50>)
     9b6:	4798      	blx	r3
	Initiate_Registers();
     9b8:	4620      	mov	r0, r4
     9ba:	4b0c      	ldr	r3, [pc, #48]	; (9ec <_ZN15lmx2694_Handler4InitEv+0x54>)
     9bc:	4798      	blx	r3
	delay_ms(10);
     9be:	200a      	movs	r0, #10
     9c0:	4d0b      	ldr	r5, [pc, #44]	; (9f0 <_ZN15lmx2694_Handler4InitEv+0x58>)
     9c2:	47a8      	blx	r5
	Toggle_FCAL_EN();
     9c4:	4620      	mov	r0, r4
     9c6:	4b0b      	ldr	r3, [pc, #44]	; (9f4 <_ZN15lmx2694_Handler4InitEv+0x5c>)
     9c8:	4798      	blx	r3
	delay_ms(100);
     9ca:	2064      	movs	r0, #100	; 0x64
     9cc:	47a8      	blx	r5
	return IsLocked();
     9ce:	4620      	mov	r0, r4
     9d0:	4b09      	ldr	r3, [pc, #36]	; (9f8 <_ZN15lmx2694_Handler4InitEv+0x60>)
     9d2:	4798      	blx	r3
}
     9d4:	bd38      	pop	{r3, r4, r5, pc}
     9d6:	bf00      	nop
     9d8:	20000254 	.word	0x20000254
     9dc:	00000d81 	.word	0x00000d81
     9e0:	00000ded 	.word	0x00000ded
     9e4:	0000058d 	.word	0x0000058d
     9e8:	000005d1 	.word	0x000005d1
     9ec:	00000795 	.word	0x00000795
     9f0:	000010fd 	.word	0x000010fd
     9f4:	00000771 	.word	0x00000771
     9f8:	000008d1 	.word	0x000008d1

000009fc <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv>:
void lmx2694_Handler::Program_PFD_DLY_SEL(void){
     9fc:	b538      	push	{r3, r4, r5, lr}
     9fe:	4604      	mov	r4, r0
	if (target_frequency>MIN_VCO_FREQUENCY)
     a00:	6b85      	ldr	r5, [r0, #56]	; 0x38
     a02:	490b      	ldr	r1, [pc, #44]	; (a30 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x34>)
     a04:	4628      	mov	r0, r5
     a06:	4b0b      	ldr	r3, [pc, #44]	; (a34 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x38>)
     a08:	4798      	blx	r3
     a0a:	b128      	cbz	r0, a18 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x1c>
		vco_frequency=target_frequency;
     a0c:	63e5      	str	r5, [r4, #60]	; 0x3c
	Program_PFD_DLY_SEL(vco_frequency);
     a0e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     a10:	4620      	mov	r0, r4
     a12:	4b09      	ldr	r3, [pc, #36]	; (a38 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x3c>)
     a14:	4798      	blx	r3
     a16:	bd38      	pop	{r3, r4, r5, pc}
		vco_frequency=target_frequency*Get_Channel_Divider_Value(false);
     a18:	2100      	movs	r1, #0
     a1a:	4620      	mov	r0, r4
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x40>)
     a1e:	4798      	blx	r3
     a20:	4b07      	ldr	r3, [pc, #28]	; (a40 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x44>)
     a22:	4798      	blx	r3
     a24:	4629      	mov	r1, r5
     a26:	4b07      	ldr	r3, [pc, #28]	; (a44 <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x48>)
     a28:	4798      	blx	r3
     a2a:	63e0      	str	r0, [r4, #60]	; 0x3c
     a2c:	e7ef      	b.n	a0e <_ZN15lmx2694_Handler19Program_PFD_DLY_SELEv+0x12>
     a2e:	bf00      	nop
     a30:	45ebf000 	.word	0x45ebf000
     a34:	00002269 	.word	0x00002269
     a38:	000006ad 	.word	0x000006ad
     a3c:	00000895 	.word	0x00000895
     a40:	00001e49 	.word	0x00001e49
     a44:	00001ef1 	.word	0x00001ef1

00000a48 <_ZN15lmx2694_Handler24Write_Division_RegistersEv>:
void  lmx2694_Handler::Write_Division_Registers(void){
     a48:	b538      	push	{r3, r4, r5, lr}
     a4a:	4604      	mov	r4, r0
	Write_Single_Register(43,(uint16_t)(numerator&0xffff));
     a4c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     a4e:	212b      	movs	r1, #43	; 0x2b
     a50:	4d0c      	ldr	r5, [pc, #48]	; (a84 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x3c>)
     a52:	47a8      	blx	r5
	Write_Single_Register(42,(uint16_t)(numerator>>16));
     a54:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     a56:	212a      	movs	r1, #42	; 0x2a
     a58:	4620      	mov	r0, r4
     a5a:	47a8      	blx	r5
	Write_Single_Register(39,(uint16_t)(denominator&0xffff));
     a5c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
     a5e:	2127      	movs	r1, #39	; 0x27
     a60:	4620      	mov	r0, r4
     a62:	47a8      	blx	r5
	Write_Single_Register(38,(uint16_t)(denominator>>16));
     a64:	8e62      	ldrh	r2, [r4, #50]	; 0x32
     a66:	2126      	movs	r1, #38	; 0x26
     a68:	4620      	mov	r0, r4
     a6a:	47a8      	blx	r5
	Program_PFD_DLY_SEL();
     a6c:	4620      	mov	r0, r4
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <_ZN15lmx2694_Handler24Write_Division_RegistersEv+0x40>)
     a70:	4798      	blx	r3
	Write_Single_Register(36,(uint16_t)(N_divider&0xffff));
     a72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     a74:	2124      	movs	r1, #36	; 0x24
     a76:	4620      	mov	r0, r4
     a78:	47a8      	blx	r5
	Write_Single_Register(34,(uint16_t)(N_divider>>16));
     a7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
     a7c:	2122      	movs	r1, #34	; 0x22
     a7e:	4620      	mov	r0, r4
     a80:	47a8      	blx	r5
     a82:	bd38      	pop	{r3, r4, r5, pc}
     a84:	00000651 	.word	0x00000651
     a88:	000009fd 	.word	0x000009fd

00000a8c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf>:
float lmx2694_Handler::Set_Target_Frequency(float tf){
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	4604      	mov	r4, r0
     a90:	460d      	mov	r5, r1
	if (tf>MAX_VCO_FREQUENCY)
     a92:	493e      	ldr	r1, [pc, #248]	; (b8c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x100>)
     a94:	4628      	mov	r0, r5
     a96:	4b3e      	ldr	r3, [pc, #248]	; (b90 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     a98:	4798      	blx	r3
     a9a:	2800      	cmp	r0, #0
     a9c:	d138      	bne.n	b10 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x84>
		if (tf>MIN_PLL_FREQUENCY)
     a9e:	493d      	ldr	r1, [pc, #244]	; (b94 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x108>)
     aa0:	4628      	mov	r0, r5
     aa2:	4b3b      	ldr	r3, [pc, #236]	; (b90 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     aa4:	4798      	blx	r3
     aa6:	2800      	cmp	r0, #0
     aa8:	d031      	beq.n	b0e <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x82>
			target_frequency=tf;
     aaa:	63a5      	str	r5, [r4, #56]	; 0x38
			if (tf>MIN_VCO_FREQUENCY)
     aac:	493a      	ldr	r1, [pc, #232]	; (b98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     aae:	4628      	mov	r0, r5
     ab0:	4b37      	ldr	r3, [pc, #220]	; (b90 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     ab2:	4798      	blx	r3
     ab4:	2800      	cmp	r0, #0
     ab6:	d039      	beq.n	b2c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xa0>
				if (current_frequency>MIN_VCO_FREQUENCY)
     ab8:	4937      	ldr	r1, [pc, #220]	; (b98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     aba:	6860      	ldr	r0, [r4, #4]
     abc:	4b34      	ldr	r3, [pc, #208]	; (b90 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x104>)
     abe:	4798      	blx	r3
     ac0:	2800      	cmp	r0, #0
     ac2:	d028      	beq.n	b16 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x8a>
				channel_divider=1;
     ac4:	2301      	movs	r3, #1
     ac6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
			divider=(tf*channel_divider)/(REFERENCE_FREQUENCY*2);
     aca:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
     ace:	4b33      	ldr	r3, [pc, #204]	; (b9c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x110>)
     ad0:	4798      	blx	r3
     ad2:	4629      	mov	r1, r5
     ad4:	4b32      	ldr	r3, [pc, #200]	; (ba0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x114>)
     ad6:	4798      	blx	r3
     ad8:	4932      	ldr	r1, [pc, #200]	; (ba4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x118>)
     ada:	4b33      	ldr	r3, [pc, #204]	; (ba8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x11c>)
     adc:	4798      	blx	r3
     ade:	4605      	mov	r5, r0
     ae0:	6420      	str	r0, [r4, #64]	; 0x40
  { return __builtin_floorf(__x); }
     ae2:	4b32      	ldr	r3, [pc, #200]	; (bac <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x120>)
     ae4:	4798      	blx	r3
			N_divider=(uint32_t)(floor(divider));
     ae6:	4b32      	ldr	r3, [pc, #200]	; (bb0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x124>)
     ae8:	4798      	blx	r3
     aea:	62a0      	str	r0, [r4, #40]	; 0x28
			fraction=divider-N_divider;
     aec:	4b31      	ldr	r3, [pc, #196]	; (bb4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x128>)
     aee:	4798      	blx	r3
     af0:	4601      	mov	r1, r0
     af2:	4628      	mov	r0, r5
     af4:	4b30      	ldr	r3, [pc, #192]	; (bb8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x12c>)
     af6:	4798      	blx	r3
     af8:	4601      	mov	r1, r0
     afa:	6460      	str	r0, [r4, #68]	; 0x44
			Calculate_Fraction(fraction);
     afc:	4620      	mov	r0, r4
     afe:	4b2f      	ldr	r3, [pc, #188]	; (bbc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x130>)
     b00:	4798      	blx	r3
			Write_Division_Registers();
     b02:	4620      	mov	r0, r4
     b04:	4b2e      	ldr	r3, [pc, #184]	; (bc0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x134>)
     b06:	4798      	blx	r3
			Toggle_FCAL_EN();
     b08:	4620      	mov	r0, r4
     b0a:	4b2e      	ldr	r3, [pc, #184]	; (bc4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x138>)
     b0c:	4798      	blx	r3
}
     b0e:	bd70      	pop	{r4, r5, r6, pc}
		target_frequency=MAX_VCO_FREQUENCY;
     b10:	4b1e      	ldr	r3, [pc, #120]	; (b8c <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x100>)
     b12:	63a3      	str	r3, [r4, #56]	; 0x38
     b14:	bd70      	pop	{r4, r5, r6, pc}
					Write_Single_Register(46,write_registers[46]|OUT_MUX_VCO);
     b16:	68e3      	ldr	r3, [r4, #12]
     b18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
     b1c:	f042 0201 	orr.w	r2, r2, #1
     b20:	b292      	uxth	r2, r2
     b22:	212e      	movs	r1, #46	; 0x2e
     b24:	4620      	mov	r0, r4
     b26:	4b28      	ldr	r3, [pc, #160]	; (bc8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     b28:	4798      	blx	r3
     b2a:	e7cb      	b.n	ac4 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x38>
				if (current_frequency<MIN_VCO_FREQUENCY)
     b2c:	491a      	ldr	r1, [pc, #104]	; (b98 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x10c>)
     b2e:	6860      	ldr	r0, [r4, #4]
     b30:	4b26      	ldr	r3, [pc, #152]	; (bcc <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x140>)
     b32:	4798      	blx	r3
     b34:	b1e8      	cbz	r0, b72 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xe6>
				register_value=write_registers[75]&(~((uint16_t)0x07c0));
     b36:	68e3      	ldr	r3, [r4, #12]
     b38:	f8b3 6096 	ldrh.w	r6, [r3, #150]	; 0x96
     b3c:	f426 66f8 	bic.w	r6, r6, #1984	; 0x7c0
     b40:	b2b6      	uxth	r6, r6
     b42:	8426      	strh	r6, [r4, #32]
				Write_Single_Register(75,register_value|(((uint16_t)Choose_Channel_Divider_Index())<<6));
     b44:	4620      	mov	r0, r4
     b46:	4b22      	ldr	r3, [pc, #136]	; (bd0 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x144>)
     b48:	4798      	blx	r3
     b4a:	ea46 1280 	orr.w	r2, r6, r0, lsl #6
     b4e:	b292      	uxth	r2, r2
     b50:	214b      	movs	r1, #75	; 0x4b
     b52:	4620      	mov	r0, r4
     b54:	4b1c      	ldr	r3, [pc, #112]	; (bc8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     b56:	4798      	blx	r3
				if (channel_divider>2)
     b58:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
     b5c:	2b02      	cmp	r3, #2
					Write_Single_Register(31,0x43ec);
     b5e:	bfcc      	ite	gt
     b60:	f244 32ec 	movwgt	r2, #17388	; 0x43ec
					Write_Single_Register(31,0x3ec);
     b64:	f44f 727b 	movle.w	r2, #1004	; 0x3ec
     b68:	211f      	movs	r1, #31
     b6a:	4620      	mov	r0, r4
     b6c:	4b16      	ldr	r3, [pc, #88]	; (bc8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     b6e:	4798      	blx	r3
     b70:	e7ab      	b.n	aca <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x3e>
					Write_Single_Register(46,write_registers[46]&(~((uint16_t)0x03)));
     b72:	68e3      	ldr	r3, [r4, #12]
     b74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
     b78:	f022 0203 	bic.w	r2, r2, #3
     b7c:	0412      	lsls	r2, r2, #16
     b7e:	0c12      	lsrs	r2, r2, #16
     b80:	212e      	movs	r1, #46	; 0x2e
     b82:	4620      	mov	r0, r4
     b84:	4b10      	ldr	r3, [pc, #64]	; (bc8 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0x13c>)
     b86:	4798      	blx	r3
     b88:	e7d5      	b.n	b36 <_ZN15lmx2694_Handler20Set_Target_FrequencyEf+0xaa>
     b8a:	bf00      	nop
     b8c:	466bf000 	.word	0x466bf000
     b90:	00002269 	.word	0x00002269
     b94:	43c80000 	.word	0x43c80000
     b98:	45ebf000 	.word	0x45ebf000
     b9c:	00001e49 	.word	0x00001e49
     ba0:	00001ef1 	.word	0x00001ef1
     ba4:	43480000 	.word	0x43480000
     ba8:	00002059 	.word	0x00002059
     bac:	00001bfd 	.word	0x00001bfd
     bb0:	0000227d 	.word	0x0000227d
     bb4:	00001e41 	.word	0x00001e41
     bb8:	00001cdd 	.word	0x00001cdd
     bbc:	00000525 	.word	0x00000525
     bc0:	00000a49 	.word	0x00000a49
     bc4:	00000771 	.word	0x00000771
     bc8:	00000651 	.word	0x00000651
     bcc:	0000222d 	.word	0x0000222d
     bd0:	000004a1 	.word	0x000004a1

00000bd4 <_ZN15lmx2694_Handler9Self_TestEv>:

bool lmx2694_Handler::Self_Test(){
     bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bd8:	4604      	mov	r4, r0
	error_counter=0;
     bda:	2300      	movs	r3, #0
     bdc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
	while(error_counter<0xff){
		if (IsLocked())
     be0:	4d29      	ldr	r5, [pc, #164]	; (c88 <_ZN15lmx2694_Handler9Self_TestEv+0xb4>)
					{
					}
			} 
			else
			{
				if (current_frequency-step<MIN_PLL_FREQUENCY)
     be2:	4f2a      	ldr	r7, [pc, #168]	; (c8c <_ZN15lmx2694_Handler9Self_TestEv+0xb8>)
					if (current_frequency+step>MAX_SENSOR_FREQUENCY)
     be4:	4e2a      	ldr	r6, [pc, #168]	; (c90 <_ZN15lmx2694_Handler9Self_TestEv+0xbc>)
     be6:	e01d      	b.n	c24 <_ZN15lmx2694_Handler9Self_TestEv+0x50>
				if (current_frequency-step<MIN_PLL_FREQUENCY)
     be8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     bea:	6860      	ldr	r0, [r4, #4]
     bec:	4b29      	ldr	r3, [pc, #164]	; (c94 <_ZN15lmx2694_Handler9Self_TestEv+0xc0>)
     bee:	4798      	blx	r3
     bf0:	4639      	mov	r1, r7
     bf2:	4b29      	ldr	r3, [pc, #164]	; (c98 <_ZN15lmx2694_Handler9Self_TestEv+0xc4>)
     bf4:	4798      	blx	r3
     bf6:	b340      	cbz	r0, c4a <_ZN15lmx2694_Handler9Self_TestEv+0x76>
				{
					direction=true;
     bf8:	2301      	movs	r3, #1
     bfa:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
				else
				{
				}
			}
		
			target_frequency=direction?current_frequency+step:current_frequency-step;
     bfe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     c00:	6860      	ldr	r0, [r4, #4]
     c02:	4b26      	ldr	r3, [pc, #152]	; (c9c <_ZN15lmx2694_Handler9Self_TestEv+0xc8>)
     c04:	4798      	blx	r3
     c06:	4601      	mov	r1, r0
     c08:	63a1      	str	r1, [r4, #56]	; 0x38
			Set_Target_Frequency(target_frequency);
     c0a:	4620      	mov	r0, r4
     c0c:	4b24      	ldr	r3, [pc, #144]	; (ca0 <_ZN15lmx2694_Handler9Self_TestEv+0xcc>)
     c0e:	4798      	blx	r3
			error_counter=0;
     c10:	2300      	movs	r3, #0
     c12:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			delay_ms(10);
     c16:	200a      	movs	r0, #10
     c18:	4b22      	ldr	r3, [pc, #136]	; (ca4 <_ZN15lmx2694_Handler9Self_TestEv+0xd0>)
     c1a:	4798      	blx	r3
	while(error_counter<0xff){
     c1c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
     c20:	2bfe      	cmp	r3, #254	; 0xfe
     c22:	dc2d      	bgt.n	c80 <_ZN15lmx2694_Handler9Self_TestEv+0xac>
		if (IsLocked())
     c24:	4620      	mov	r0, r4
     c26:	47a8      	blx	r5
     c28:	b1a8      	cbz	r0, c56 <_ZN15lmx2694_Handler9Self_TestEv+0x82>
			if (direction)
     c2a:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
     c2e:	2b00      	cmp	r3, #0
     c30:	d0da      	beq.n	be8 <_ZN15lmx2694_Handler9Self_TestEv+0x14>
					if (current_frequency+step>MAX_SENSOR_FREQUENCY)
     c32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     c34:	6860      	ldr	r0, [r4, #4]
     c36:	4b19      	ldr	r3, [pc, #100]	; (c9c <_ZN15lmx2694_Handler9Self_TestEv+0xc8>)
     c38:	4798      	blx	r3
     c3a:	4631      	mov	r1, r6
     c3c:	4b1a      	ldr	r3, [pc, #104]	; (ca8 <_ZN15lmx2694_Handler9Self_TestEv+0xd4>)
     c3e:	4798      	blx	r3
     c40:	2800      	cmp	r0, #0
     c42:	d0dc      	beq.n	bfe <_ZN15lmx2694_Handler9Self_TestEv+0x2a>
						direction=false;
     c44:	2300      	movs	r3, #0
     c46:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
			target_frequency=direction?current_frequency+step:current_frequency-step;
     c4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     c4c:	6860      	ldr	r0, [r4, #4]
     c4e:	4b11      	ldr	r3, [pc, #68]	; (c94 <_ZN15lmx2694_Handler9Self_TestEv+0xc0>)
     c50:	4798      	blx	r3
     c52:	4601      	mov	r1, r0
     c54:	e7d8      	b.n	c08 <_ZN15lmx2694_Handler9Self_TestEv+0x34>
		} 
		else
		{
			error_counter++;
     c56:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
     c5a:	3301      	adds	r3, #1
     c5c:	b2db      	uxtb	r3, r3
     c5e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			delay_ms(100+10*error_counter);
     c62:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     c66:	0040      	lsls	r0, r0, #1
     c68:	3064      	adds	r0, #100	; 0x64
     c6a:	b280      	uxth	r0, r0
     c6c:	f8df 8034 	ldr.w	r8, [pc, #52]	; ca4 <_ZN15lmx2694_Handler9Self_TestEv+0xd0>
     c70:	47c0      	blx	r8
			Set_Target_Frequency(current_frequency);
     c72:	6861      	ldr	r1, [r4, #4]
     c74:	4620      	mov	r0, r4
     c76:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <_ZN15lmx2694_Handler9Self_TestEv+0xcc>)
     c78:	4798      	blx	r3
			delay_ms(100);
     c7a:	2064      	movs	r0, #100	; 0x64
     c7c:	47c0      	blx	r8
     c7e:	e7cd      	b.n	c1c <_ZN15lmx2694_Handler9Self_TestEv+0x48>
		}
	}
}
     c80:	2000      	movs	r0, #0
     c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c86:	bf00      	nop
     c88:	000008d1 	.word	0x000008d1
     c8c:	43c80000 	.word	0x43c80000
     c90:	45898000 	.word	0x45898000
     c94:	00001cdd 	.word	0x00001cdd
     c98:	0000222d 	.word	0x0000222d
     c9c:	00001ce1 	.word	0x00001ce1
     ca0:	00000a8d 	.word	0x00000a8d
     ca4:	000010fd 	.word	0x000010fd
     ca8:	00002269 	.word	0x00002269

00000cac <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev>:
     cac:	b510      	push	{r4, lr}
static SPI_Syn_Class staticSPI(&SPI_0);
     cae:	4c05      	ldr	r4, [pc, #20]	; (cc4 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x18>)
     cb0:	4905      	ldr	r1, [pc, #20]	; (cc8 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x1c>)
     cb2:	4620      	mov	r0, r4
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x20>)
     cb6:	4798      	blx	r3
     cb8:	4a05      	ldr	r2, [pc, #20]	; (cd0 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x24>)
     cba:	4906      	ldr	r1, [pc, #24]	; (cd4 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x28>)
     cbc:	4620      	mov	r0, r4
     cbe:	4b06      	ldr	r3, [pc, #24]	; (cd8 <_GLOBAL__sub_I__ZN15lmx2694_HandlerC2Ev+0x2c>)
     cc0:	4798      	blx	r3
     cc2:	bd10      	pop	{r4, pc}
     cc4:	20000254 	.word	0x20000254
     cc8:	200002f0 	.word	0x200002f0
     ccc:	00000d71 	.word	0x00000d71
     cd0:	20000000 	.word	0x20000000
     cd4:	00000d7d 	.word	0x00000d7d
     cd8:	00001be9 	.word	0x00001be9

00000cdc <main>:
#include "lmx2694Handler.h"

lmx2694_Handler lmx;

int main(void)
{
     cdc:	b508      	push	{r3, lr}
	atmel_start_init();
     cde:	4b11      	ldr	r3, [pc, #68]	; (d24 <main+0x48>)
     ce0:	4798      	blx	r3
	timer_start(&TIMER_0);
     ce2:	4811      	ldr	r0, [pc, #68]	; (d28 <main+0x4c>)
     ce4:	4b11      	ldr	r3, [pc, #68]	; (d2c <main+0x50>)
     ce6:	4798      	blx	r3
	while(!lmx.Init()){
     ce8:	4e11      	ldr	r6, [pc, #68]	; (d30 <main+0x54>)
     cea:	4d12      	ldr	r5, [pc, #72]	; (d34 <main+0x58>)
		delay_ms(1000);
     cec:	4c12      	ldr	r4, [pc, #72]	; (d38 <main+0x5c>)
	while(!lmx.Init()){
     cee:	4630      	mov	r0, r6
     cf0:	47a8      	blx	r5
     cf2:	b940      	cbnz	r0, d06 <main+0x2a>
		delay_ms(1000);
     cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     cf8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     cfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     cfe:	4b0f      	ldr	r3, [pc, #60]	; (d3c <main+0x60>)
     d00:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d04:	e7f3      	b.n	cee <main+0x12>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d0a:	4b0c      	ldr	r3, [pc, #48]	; (d3c <main+0x60>)
     d0c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	gpio_set_pin_level(LED0,true);
    /* Replace with your application code */
    while (1) 
    {
		lmx.Self_Test();
     d10:	4e07      	ldr	r6, [pc, #28]	; (d30 <main+0x54>)
     d12:	4d0b      	ldr	r5, [pc, #44]	; (d40 <main+0x64>)
		delay_ms(1000);
     d14:	4c08      	ldr	r4, [pc, #32]	; (d38 <main+0x5c>)
		lmx.Self_Test();
     d16:	4630      	mov	r0, r6
     d18:	47a8      	blx	r5
		delay_ms(1000);
     d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d1e:	47a0      	blx	r4
     d20:	e7f9      	b.n	d16 <main+0x3a>
     d22:	bf00      	nop
     d24:	00000e05 	.word	0x00000e05
     d28:	20000308 	.word	0x20000308
     d2c:	000013f9 	.word	0x000013f9
     d30:	20000270 	.word	0x20000270
     d34:	00000999 	.word	0x00000999
     d38:	000010fd 	.word	0x000010fd
     d3c:	41008000 	.word	0x41008000
     d40:	00000bd5 	.word	0x00000bd5

00000d44 <_GLOBAL__sub_I_lmx>:
    }
}
     d44:	b510      	push	{r4, lr}
lmx2694_Handler lmx;
     d46:	4c05      	ldr	r4, [pc, #20]	; (d5c <_GLOBAL__sub_I_lmx+0x18>)
     d48:	4620      	mov	r0, r4
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <_GLOBAL__sub_I_lmx+0x1c>)
     d4c:	4798      	blx	r3
     d4e:	4a05      	ldr	r2, [pc, #20]	; (d64 <_GLOBAL__sub_I_lmx+0x20>)
     d50:	4905      	ldr	r1, [pc, #20]	; (d68 <_GLOBAL__sub_I_lmx+0x24>)
     d52:	4620      	mov	r0, r4
     d54:	4b05      	ldr	r3, [pc, #20]	; (d6c <_GLOBAL__sub_I_lmx+0x28>)
     d56:	4798      	blx	r3
     d58:	bd10      	pop	{r4, pc}
     d5a:	bf00      	nop
     d5c:	20000270 	.word	0x20000270
     d60:	00000371 	.word	0x00000371
     d64:	20000000 	.word	0x20000000
     d68:	00000359 	.word	0x00000359
     d6c:	00001be9 	.word	0x00001be9

00000d70 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor>:
//	SPI=SPI_1;
} //SPI_Syn_Class

SPI_Syn_Class::SPI_Syn_Class(spi_m_sync_descriptor * spiDesc)
{
	SPI=spiDesc;
     d70:	60c1      	str	r1, [r0, #12]
	ptrSPISync=this;
     d72:	4a01      	ldr	r2, [pc, #4]	; (d78 <_ZN13SPI_Syn_ClassC1EP21spi_m_sync_descriptor+0x8>)
     d74:	6010      	str	r0, [r2, #0]
} //SPI_Syn_Class
     d76:	4770      	bx	lr
     d78:	200002c0 	.word	0x200002c0

00000d7c <_ZN13SPI_Syn_ClassD1Ev>:

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
     d7c:	4770      	bx	lr
	...

00000d80 <_ZN13SPI_Syn_Class4InitEv>:

void SPI_Syn_Class::Init(){
     d80:	b510      	push	{r4, lr}
     d82:	4604      	mov	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
     d84:	f100 0110 	add.w	r1, r0, #16
     d88:	68c0      	ldr	r0, [r0, #12]
     d8a:	4b05      	ldr	r3, [pc, #20]	; (da0 <_ZN13SPI_Syn_Class4InitEv+0x20>)
     d8c:	4798      	blx	r3

	spi_m_sync_enable(SPI);
     d8e:	68e0      	ldr	r0, [r4, #12]
     d90:	4b04      	ldr	r3, [pc, #16]	; (da4 <_ZN13SPI_Syn_Class4InitEv+0x24>)
     d92:	4798      	blx	r3
		txBuffer=txStaticBuffer;
     d94:	4b04      	ldr	r3, [pc, #16]	; (da8 <_ZN13SPI_Syn_Class4InitEv+0x28>)
     d96:	6063      	str	r3, [r4, #4]
		rxBuffer=txStaticBuffer;
     d98:	60a3      	str	r3, [r4, #8]
	ready=true;
     d9a:	2301      	movs	r3, #1
     d9c:	7023      	strb	r3, [r4, #0]
     d9e:	bd10      	pop	{r4, pc}
     da0:	000012b9 	.word	0x000012b9
     da4:	000011d9 	.word	0x000011d9
     da8:	200002c4 	.word	0x200002c4

00000dac <_ZN13SPI_Syn_Class5WriteEPKhl>:
	spi_m_sync_enable(SPI);
	ready=true;
	return 0;
}

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
     dac:	b510      	push	{r4, lr}
     dae:	4604      	mov	r4, r0
	int32_t w;
	wFlag=true;
     db0:	2301      	movs	r3, #1
     db2:	7603      	strb	r3, [r0, #24]
	w= io_write(spio,p,(uint16_t)n);
     db4:	b292      	uxth	r2, r2
     db6:	6900      	ldr	r0, [r0, #16]
     db8:	4b03      	ldr	r3, [pc, #12]	; (dc8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x1c>)
     dba:	4798      	blx	r3
	wFlag=(bool)w;
     dbc:	1c03      	adds	r3, r0, #0
     dbe:	bf18      	it	ne
     dc0:	2301      	movne	r3, #1
     dc2:	7623      	strb	r3, [r4, #24]
	 return w;
	
}
     dc4:	bd10      	pop	{r4, pc}
     dc6:	bf00      	nop
     dc8:	00001129 	.word	0x00001129

00000dcc <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
     dcc:	b510      	push	{r4, lr}
     dce:	4604      	mov	r4, r0
	int32_t r;
	rFlag=true;
     dd0:	2301      	movs	r3, #1
     dd2:	7643      	strb	r3, [r0, #25]
	r=io_read(spio,p,(uint16_t)n);
     dd4:	b292      	uxth	r2, r2
     dd6:	6900      	ldr	r0, [r0, #16]
     dd8:	4b03      	ldr	r3, [pc, #12]	; (de8 <_ZN13SPI_Syn_Class4ReadEPhl+0x1c>)
     dda:	4798      	blx	r3
	rFlag=(bool)r;
     ddc:	1c03      	adds	r3, r0, #0
     dde:	bf18      	it	ne
     de0:	2301      	movne	r3, #1
     de2:	7663      	strb	r3, [r4, #25]
	return  r;
}
     de4:	bd10      	pop	{r4, pc}
     de6:	bf00      	nop
     de8:	00001159 	.word	0x00001159

00000dec <_ZN13SPI_Syn_Class5SetCSEb>:
	if (level) {
     dec:	b919      	cbnz	r1, df6 <_ZN13SPI_Syn_Class5SetCSEb+0xa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dee:	2280      	movs	r2, #128	; 0x80
     df0:	4b03      	ldr	r3, [pc, #12]	; (e00 <_ZN13SPI_Syn_Class5SetCSEb+0x14>)
     df2:	615a      	str	r2, [r3, #20]
     df4:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     df6:	2280      	movs	r2, #128	; 0x80
     df8:	4b01      	ldr	r3, [pc, #4]	; (e00 <_ZN13SPI_Syn_Class5SetCSEb+0x14>)
     dfa:	619a      	str	r2, [r3, #24]
     dfc:	4770      	bx	lr
     dfe:	bf00      	nop
     e00:	41008000 	.word	0x41008000

00000e04 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     e04:	b508      	push	{r3, lr}
	system_init();
     e06:	4b01      	ldr	r3, [pc, #4]	; (e0c <atmel_start_init+0x8>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000f35 	.word	0x00000f35

00000e10 <EVENT_SYSTEM_0_init>:

struct spi_m_sync_descriptor SPI_0;
struct timer_descriptor      TIMER_0;

void EVENT_SYSTEM_0_init(void)
{
     e10:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     e12:	4b07      	ldr	r3, [pc, #28]	; (e30 <EVENT_SYSTEM_0_init+0x20>)
     e14:	2240      	movs	r2, #64	; 0x40
     e16:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     e1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     e1e:	4a05      	ldr	r2, [pc, #20]	; (e34 <EVENT_SYSTEM_0_init+0x24>)
     e20:	6993      	ldr	r3, [r2, #24]
     e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     e26:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     e28:	4b03      	ldr	r3, [pc, #12]	; (e38 <EVENT_SYSTEM_0_init+0x28>)
     e2a:	4798      	blx	r3
     e2c:	bd08      	pop	{r3, pc}
     e2e:	bf00      	nop
     e30:	40001c00 	.word	0x40001c00
     e34:	40000800 	.word	0x40000800
     e38:	0000111d 	.word	0x0000111d

00000e3c <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e3c:	4b28      	ldr	r3, [pc, #160]	; (ee0 <SPI_0_PORT_init+0xa4>)
     e3e:	2210      	movs	r2, #16
     e40:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e42:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e48:	629a      	str	r2, [r3, #40]	; 0x28
     e4a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     e4e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e50:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e58:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e60:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e68:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e70:	2220      	movs	r2, #32
     e72:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e74:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e7a:	629a      	str	r2, [r3, #40]	; 0x28
     e7c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e86:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e8e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     e92:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     e96:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e9e:	2240      	movs	r2, #64	; 0x40
     ea0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ea2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     ea6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     eaa:	629a      	str	r2, [r3, #40]	; 0x28
     eac:	4a0d      	ldr	r2, [pc, #52]	; (ee4 <SPI_0_PORT_init+0xa8>)
     eae:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     eb0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     eb4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ebc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ec4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ecc:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ed0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ed4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ed8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     edc:	4770      	bx	lr
     ede:	bf00      	nop
     ee0:	41008000 	.word	0x41008000
     ee4:	c0020000 	.word	0xc0020000

00000ee8 <SPI_0_CLOCK_init>:
     ee8:	4b06      	ldr	r3, [pc, #24]	; (f04 <SPI_0_CLOCK_init+0x1c>)
     eea:	2242      	movs	r2, #66	; 0x42
     eec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     ef0:	224b      	movs	r2, #75	; 0x4b
     ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ef6:	4a04      	ldr	r2, [pc, #16]	; (f08 <SPI_0_CLOCK_init+0x20>)
     ef8:	6953      	ldr	r3, [r2, #20]
     efa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     efe:	6153      	str	r3, [r2, #20]
     f00:	4770      	bx	lr
     f02:	bf00      	nop
     f04:	40001c00 	.word	0x40001c00
     f08:	40000800 	.word	0x40000800

00000f0c <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     f0c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     f0e:	4b04      	ldr	r3, [pc, #16]	; (f20 <SPI_0_init+0x14>)
     f10:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     f12:	4904      	ldr	r1, [pc, #16]	; (f24 <SPI_0_init+0x18>)
     f14:	4804      	ldr	r0, [pc, #16]	; (f28 <SPI_0_init+0x1c>)
     f16:	4b05      	ldr	r3, [pc, #20]	; (f2c <SPI_0_init+0x20>)
     f18:	4798      	blx	r3
	SPI_0_PORT_init();
     f1a:	4b05      	ldr	r3, [pc, #20]	; (f30 <SPI_0_init+0x24>)
     f1c:	4798      	blx	r3
     f1e:	bd08      	pop	{r3, pc}
     f20:	00000ee9 	.word	0x00000ee9
     f24:	40003000 	.word	0x40003000
     f28:	200002f0 	.word	0x200002f0
     f2c:	00001189 	.word	0x00001189
     f30:	00000e3d 	.word	0x00000e3d

00000f34 <system_init>:

	timer_init(&TIMER_0, TC0, _tc_get_timer());
}

void system_init(void)
{
     f34:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     f36:	4b56      	ldr	r3, [pc, #344]	; (1090 <system_init+0x15c>)
     f38:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f3a:	4b56      	ldr	r3, [pc, #344]	; (1094 <system_init+0x160>)
     f3c:	2208      	movs	r2, #8
     f3e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f40:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     f46:	629a      	str	r2, [r3, #40]	; 0x28
     f48:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     f4c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f4e:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     f52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f56:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f5a:	2180      	movs	r1, #128	; 0x80
     f5c:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f5e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f60:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     f64:	6299      	str	r1, [r3, #40]	; 0x28
     f66:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f68:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     f6c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f70:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     f78:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f7c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     f80:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     f84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f88:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f8c:	f893 10ce 	ldrb.w	r1, [r3, #206]	; 0xce
     f90:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     f94:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f98:	f893 10ce 	ldrb.w	r1, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     f9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fa0:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fa4:	f883 10ce 	strb.w	r1, [r3, #206]	; 0xce
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     fa8:	f893 10b7 	ldrb.w	r1, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     fac:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     fb0:	f041 010c 	orr.w	r1, r1, #12
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     fb4:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     fbc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	4c35      	ldr	r4, [pc, #212]	; (1098 <system_init+0x164>)
     fc2:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     fc6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     fce:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     fd2:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
     fd6:	f040 0004 	orr.w	r0, r0, #4
     fda:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fde:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe2:	f893 00cf 	ldrb.w	r0, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     fe6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     fea:	f040 0001 	orr.w	r0, r0, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fee:	f883 00cf 	strb.w	r0, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ff2:	f893 00b7 	ldrb.w	r0, [r3, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ff6:	f000 000f 	and.w	r0, r0, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ffa:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ffe:	f883 00b7 	strb.w	r0, [r3, #183]	; 0xb7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1002:	2002      	movs	r0, #2
    1004:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1008:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    100c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    1010:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    1014:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1018:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
    101c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1020:	f883 0141 	strb.w	r0, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1024:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1028:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    102c:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    1030:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1034:	f893 214f 	ldrb.w	r2, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    1038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    103c:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1040:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1044:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1048:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    104c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1050:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1054:	4a11      	ldr	r2, [pc, #68]	; (109c <system_init+0x168>)
    1056:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    105a:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    105e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1062:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
    1066:	4b0e      	ldr	r3, [pc, #56]	; (10a0 <system_init+0x16c>)
    1068:	4798      	blx	r3

	SPI_0_init();
    106a:	4b0e      	ldr	r3, [pc, #56]	; (10a4 <system_init+0x170>)
    106c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    106e:	4a0e      	ldr	r2, [pc, #56]	; (10a8 <system_init+0x174>)
    1070:	6953      	ldr	r3, [r2, #20]
    1072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1076:	6153      	str	r3, [r2, #20]
    1078:	224b      	movs	r2, #75	; 0x4b
    107a:	4b0c      	ldr	r3, [pc, #48]	; (10ac <system_init+0x178>)
    107c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    1080:	4b0b      	ldr	r3, [pc, #44]	; (10b0 <system_init+0x17c>)
    1082:	4798      	blx	r3
    1084:	4602      	mov	r2, r0
    1086:	490b      	ldr	r1, [pc, #44]	; (10b4 <system_init+0x180>)
    1088:	480b      	ldr	r0, [pc, #44]	; (10b8 <system_init+0x184>)
    108a:	4b0c      	ldr	r3, [pc, #48]	; (10bc <system_init+0x188>)
    108c:	4798      	blx	r3
    108e:	bd10      	pop	{r4, pc}
    1090:	000014e1 	.word	0x000014e1
    1094:	41008000 	.word	0x41008000
    1098:	40008000 	.word	0x40008000
    109c:	c0000004 	.word	0xc0000004
    10a0:	00000e11 	.word	0x00000e11
    10a4:	00000f0d 	.word	0x00000f0d
    10a8:	40000800 	.word	0x40000800
    10ac:	40001c00 	.word	0x40001c00
    10b0:	00001bc3 	.word	0x00001bc3
    10b4:	40003800 	.word	0x40003800
    10b8:	20000308 	.word	0x20000308
    10bc:	000013bd 	.word	0x000013bd

000010c0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10c0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    10c4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    10c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    10c8:	f3bf 8f5f 	dmb	sy
    10cc:	4770      	bx	lr

000010ce <atomic_leave_critical>:
    10ce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    10d2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    10d4:	f383 8810 	msr	PRIMASK, r3
    10d8:	4770      	bx	lr
	...

000010dc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    10dc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    10de:	4b04      	ldr	r3, [pc, #16]	; (10f0 <delay_us+0x14>)
    10e0:	681c      	ldr	r4, [r3, #0]
    10e2:	4b04      	ldr	r3, [pc, #16]	; (10f4 <delay_us+0x18>)
    10e4:	4798      	blx	r3
    10e6:	4601      	mov	r1, r0
    10e8:	4620      	mov	r0, r4
    10ea:	4b03      	ldr	r3, [pc, #12]	; (10f8 <delay_us+0x1c>)
    10ec:	4798      	blx	r3
    10ee:	bd10      	pop	{r4, pc}
    10f0:	200002e4 	.word	0x200002e4
    10f4:	0000149d 	.word	0x0000149d
    10f8:	000014d9 	.word	0x000014d9

000010fc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    10fc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <delay_ms+0x14>)
    1100:	681c      	ldr	r4, [r3, #0]
    1102:	4b04      	ldr	r3, [pc, #16]	; (1114 <delay_ms+0x18>)
    1104:	4798      	blx	r3
    1106:	4601      	mov	r1, r0
    1108:	4620      	mov	r0, r4
    110a:	4b03      	ldr	r3, [pc, #12]	; (1118 <delay_ms+0x1c>)
    110c:	4798      	blx	r3
    110e:	bd10      	pop	{r4, pc}
    1110:	200002e4 	.word	0x200002e4
    1114:	000014b5 	.word	0x000014b5
    1118:	000014d9 	.word	0x000014d9

0000111c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    111c:	b508      	push	{r3, lr}
	return _event_system_init();
    111e:	4b01      	ldr	r3, [pc, #4]	; (1124 <event_system_init+0x8>)
    1120:	4798      	blx	r3
}
    1122:	bd08      	pop	{r3, pc}
    1124:	0000154d 	.word	0x0000154d

00001128 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1128:	b570      	push	{r4, r5, r6, lr}
    112a:	460d      	mov	r5, r1
    112c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    112e:	4604      	mov	r4, r0
    1130:	b160      	cbz	r0, 114c <io_write+0x24>
    1132:	1c08      	adds	r0, r1, #0
    1134:	bf18      	it	ne
    1136:	2001      	movne	r0, #1
    1138:	2234      	movs	r2, #52	; 0x34
    113a:	4905      	ldr	r1, [pc, #20]	; (1150 <io_write+0x28>)
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <io_write+0x2c>)
    113e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1140:	6823      	ldr	r3, [r4, #0]
    1142:	4632      	mov	r2, r6
    1144:	4629      	mov	r1, r5
    1146:	4620      	mov	r0, r4
    1148:	4798      	blx	r3
}
    114a:	bd70      	pop	{r4, r5, r6, pc}
    114c:	2000      	movs	r0, #0
    114e:	e7f3      	b.n	1138 <io_write+0x10>
    1150:	00002500 	.word	0x00002500
    1154:	00001435 	.word	0x00001435

00001158 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	460d      	mov	r5, r1
    115c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    115e:	4604      	mov	r4, r0
    1160:	b160      	cbz	r0, 117c <io_read+0x24>
    1162:	1c08      	adds	r0, r1, #0
    1164:	bf18      	it	ne
    1166:	2001      	movne	r0, #1
    1168:	223d      	movs	r2, #61	; 0x3d
    116a:	4905      	ldr	r1, [pc, #20]	; (1180 <io_read+0x28>)
    116c:	4b05      	ldr	r3, [pc, #20]	; (1184 <io_read+0x2c>)
    116e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1170:	6863      	ldr	r3, [r4, #4]
    1172:	4632      	mov	r2, r6
    1174:	4629      	mov	r1, r5
    1176:	4620      	mov	r0, r4
    1178:	4798      	blx	r3
}
    117a:	bd70      	pop	{r4, r5, r6, pc}
    117c:	2000      	movs	r0, #0
    117e:	e7f3      	b.n	1168 <io_read+0x10>
    1180:	00002500 	.word	0x00002500
    1184:	00001435 	.word	0x00001435

00001188 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1188:	b538      	push	{r3, r4, r5, lr}
    118a:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    118c:	4604      	mov	r4, r0
    118e:	b1b8      	cbz	r0, 11c0 <spi_m_sync_init+0x38>
    1190:	1c08      	adds	r0, r1, #0
    1192:	bf18      	it	ne
    1194:	2001      	movne	r0, #1
    1196:	2240      	movs	r2, #64	; 0x40
    1198:	490a      	ldr	r1, [pc, #40]	; (11c4 <spi_m_sync_init+0x3c>)
    119a:	4b0b      	ldr	r3, [pc, #44]	; (11c8 <spi_m_sync_init+0x40>)
    119c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    119e:	4620      	mov	r0, r4
    11a0:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    11a4:	4629      	mov	r1, r5
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <spi_m_sync_init+0x44>)
    11a8:	4798      	blx	r3

	if (rc < 0) {
    11aa:	2800      	cmp	r0, #0
    11ac:	db07      	blt.n	11be <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    11ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    11b2:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    11b4:	4b06      	ldr	r3, [pc, #24]	; (11d0 <spi_m_sync_init+0x48>)
    11b6:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    11b8:	4b06      	ldr	r3, [pc, #24]	; (11d4 <spi_m_sync_init+0x4c>)
    11ba:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    11bc:	2000      	movs	r0, #0
}
    11be:	bd38      	pop	{r3, r4, r5, pc}
    11c0:	2000      	movs	r0, #0
    11c2:	e7e8      	b.n	1196 <spi_m_sync_init+0xe>
    11c4:	00002514 	.word	0x00002514
    11c8:	00001435 	.word	0x00001435
    11cc:	00001791 	.word	0x00001791
    11d0:	0000127d 	.word	0x0000127d
    11d4:	00001241 	.word	0x00001241

000011d8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    11d8:	b510      	push	{r4, lr}
	ASSERT(spi);
    11da:	4604      	mov	r4, r0
    11dc:	2257      	movs	r2, #87	; 0x57
    11de:	4905      	ldr	r1, [pc, #20]	; (11f4 <spi_m_sync_enable+0x1c>)
    11e0:	3000      	adds	r0, #0
    11e2:	bf18      	it	ne
    11e4:	2001      	movne	r0, #1
    11e6:	4b04      	ldr	r3, [pc, #16]	; (11f8 <spi_m_sync_enable+0x20>)
    11e8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    11ea:	1d20      	adds	r0, r4, #4
    11ec:	4b03      	ldr	r3, [pc, #12]	; (11fc <spi_m_sync_enable+0x24>)
    11ee:	4798      	blx	r3
    11f0:	bd10      	pop	{r4, pc}
    11f2:	bf00      	nop
    11f4:	00002514 	.word	0x00002514
    11f8:	00001435 	.word	0x00001435
    11fc:	00001885 	.word	0x00001885

00001200 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1200:	b530      	push	{r4, r5, lr}
    1202:	b085      	sub	sp, #20
    1204:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1206:	4605      	mov	r5, r0
    1208:	b190      	cbz	r0, 1230 <spi_m_sync_transfer+0x30>
    120a:	1c08      	adds	r0, r1, #0
    120c:	bf18      	it	ne
    120e:	2001      	movne	r0, #1
    1210:	22b3      	movs	r2, #179	; 0xb3
    1212:	4908      	ldr	r1, [pc, #32]	; (1234 <spi_m_sync_transfer+0x34>)
    1214:	4b08      	ldr	r3, [pc, #32]	; (1238 <spi_m_sync_transfer+0x38>)
    1216:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1218:	6823      	ldr	r3, [r4, #0]
    121a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    121c:	6863      	ldr	r3, [r4, #4]
    121e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1220:	68a3      	ldr	r3, [r4, #8]
    1222:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1224:	a901      	add	r1, sp, #4
    1226:	1d28      	adds	r0, r5, #4
    1228:	4b04      	ldr	r3, [pc, #16]	; (123c <spi_m_sync_transfer+0x3c>)
    122a:	4798      	blx	r3
}
    122c:	b005      	add	sp, #20
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	2000      	movs	r0, #0
    1232:	e7ed      	b.n	1210 <spi_m_sync_transfer+0x10>
    1234:	00002514 	.word	0x00002514
    1238:	00001435 	.word	0x00001435
    123c:	000018b5 	.word	0x000018b5

00001240 <_spi_m_sync_io_write>:
{
    1240:	b570      	push	{r4, r5, r6, lr}
    1242:	b084      	sub	sp, #16
    1244:	460e      	mov	r6, r1
    1246:	4615      	mov	r5, r2
	ASSERT(io);
    1248:	4604      	mov	r4, r0
    124a:	22a3      	movs	r2, #163	; 0xa3
    124c:	4908      	ldr	r1, [pc, #32]	; (1270 <_spi_m_sync_io_write+0x30>)
    124e:	3000      	adds	r0, #0
    1250:	bf18      	it	ne
    1252:	2001      	movne	r0, #1
    1254:	4b07      	ldr	r3, [pc, #28]	; (1274 <_spi_m_sync_io_write+0x34>)
    1256:	4798      	blx	r3
	xfer.rxbuf = 0;
    1258:	2300      	movs	r3, #0
    125a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    125c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    125e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1260:	a901      	add	r1, sp, #4
    1262:	f1a4 000c 	sub.w	r0, r4, #12
    1266:	4b04      	ldr	r3, [pc, #16]	; (1278 <_spi_m_sync_io_write+0x38>)
    1268:	4798      	blx	r3
}
    126a:	b004      	add	sp, #16
    126c:	bd70      	pop	{r4, r5, r6, pc}
    126e:	bf00      	nop
    1270:	00002514 	.word	0x00002514
    1274:	00001435 	.word	0x00001435
    1278:	00001201 	.word	0x00001201

0000127c <_spi_m_sync_io_read>:
{
    127c:	b570      	push	{r4, r5, r6, lr}
    127e:	b084      	sub	sp, #16
    1280:	460e      	mov	r6, r1
    1282:	4615      	mov	r5, r2
	ASSERT(io);
    1284:	4604      	mov	r4, r0
    1286:	2287      	movs	r2, #135	; 0x87
    1288:	4908      	ldr	r1, [pc, #32]	; (12ac <_spi_m_sync_io_read+0x30>)
    128a:	3000      	adds	r0, #0
    128c:	bf18      	it	ne
    128e:	2001      	movne	r0, #1
    1290:	4b07      	ldr	r3, [pc, #28]	; (12b0 <_spi_m_sync_io_read+0x34>)
    1292:	4798      	blx	r3
	xfer.rxbuf = buf;
    1294:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1296:	2300      	movs	r3, #0
    1298:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    129a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    129c:	a901      	add	r1, sp, #4
    129e:	f1a4 000c 	sub.w	r0, r4, #12
    12a2:	4b04      	ldr	r3, [pc, #16]	; (12b4 <_spi_m_sync_io_read+0x38>)
    12a4:	4798      	blx	r3
}
    12a6:	b004      	add	sp, #16
    12a8:	bd70      	pop	{r4, r5, r6, pc}
    12aa:	bf00      	nop
    12ac:	00002514 	.word	0x00002514
    12b0:	00001435 	.word	0x00001435
    12b4:	00001201 	.word	0x00001201

000012b8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    12b8:	b538      	push	{r3, r4, r5, lr}
    12ba:	460d      	mov	r5, r1
	ASSERT(spi && io);
    12bc:	4604      	mov	r4, r0
    12be:	b150      	cbz	r0, 12d6 <spi_m_sync_get_io_descriptor+0x1e>
    12c0:	1c08      	adds	r0, r1, #0
    12c2:	bf18      	it	ne
    12c4:	2001      	movne	r0, #1
    12c6:	22bd      	movs	r2, #189	; 0xbd
    12c8:	4904      	ldr	r1, [pc, #16]	; (12dc <spi_m_sync_get_io_descriptor+0x24>)
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <spi_m_sync_get_io_descriptor+0x28>)
    12cc:	4798      	blx	r3
	*io = &spi->io;
    12ce:	340c      	adds	r4, #12
    12d0:	602c      	str	r4, [r5, #0]
	return 0;
}
    12d2:	2000      	movs	r0, #0
    12d4:	bd38      	pop	{r3, r4, r5, pc}
    12d6:	2000      	movs	r0, #0
    12d8:	e7f5      	b.n	12c6 <spi_m_sync_get_io_descriptor+0xe>
    12da:	bf00      	nop
    12dc:	00002514 	.word	0x00002514
    12e0:	00001435 	.word	0x00001435

000012e4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    12e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12e6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    12e8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    12ea:	b12f      	cbz	r7, 12f8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    12ec:	688d      	ldr	r5, [r1, #8]
    12ee:	463c      	mov	r4, r7
    12f0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12f2:	f1c2 0e01 	rsb	lr, r2, #1
    12f6:	e00b      	b.n	1310 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    12f8:	4b0e      	ldr	r3, [pc, #56]	; (1334 <timer_add_timer_task+0x50>)
    12fa:	4798      	blx	r3
		return;
    12fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    12fe:	4473      	add	r3, lr
    1300:	68a0      	ldr	r0, [r4, #8]
    1302:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1304:	42ab      	cmp	r3, r5
    1306:	d20a      	bcs.n	131e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1308:	6823      	ldr	r3, [r4, #0]
    130a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    130c:	b153      	cbz	r3, 1324 <timer_add_timer_task+0x40>
    130e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1310:	6863      	ldr	r3, [r4, #4]
    1312:	4293      	cmp	r3, r2
    1314:	d8f3      	bhi.n	12fe <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1316:	68a0      	ldr	r0, [r4, #8]
    1318:	4403      	add	r3, r0
    131a:	1a9b      	subs	r3, r3, r2
    131c:	e7f2      	b.n	1304 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    131e:	42a7      	cmp	r7, r4
    1320:	d004      	beq.n	132c <timer_add_timer_task+0x48>
    1322:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1324:	4620      	mov	r0, r4
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <timer_add_timer_task+0x54>)
    1328:	4798      	blx	r3
    132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    132c:	4660      	mov	r0, ip
    132e:	4b01      	ldr	r3, [pc, #4]	; (1334 <timer_add_timer_task+0x50>)
    1330:	4798      	blx	r3
    1332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1334:	0000145d 	.word	0x0000145d
    1338:	00001489 	.word	0x00001489

0000133c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    133c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1340:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1342:	6907      	ldr	r7, [r0, #16]
    1344:	3701      	adds	r7, #1
    1346:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1348:	7e03      	ldrb	r3, [r0, #24]
    134a:	f013 0f01 	tst.w	r3, #1
    134e:	d113      	bne.n	1378 <timer_process_counted+0x3c>
    1350:	7e03      	ldrb	r3, [r0, #24]
    1352:	f013 0f02 	tst.w	r3, #2
    1356:	d10f      	bne.n	1378 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1358:	b354      	cbz	r4, 13b0 <timer_process_counted+0x74>
    135a:	6863      	ldr	r3, [r4, #4]
    135c:	1afb      	subs	r3, r7, r3
    135e:	68a2      	ldr	r2, [r4, #8]
    1360:	4293      	cmp	r3, r2
    1362:	d307      	bcc.n	1374 <timer_process_counted+0x38>
    1364:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1366:	f100 0814 	add.w	r8, r0, #20
    136a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 13b4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    136e:	f8df a048 	ldr.w	sl, [pc, #72]	; 13b8 <timer_process_counted+0x7c>
    1372:	e012      	b.n	139a <timer_process_counted+0x5e>
    1374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1378:	7e03      	ldrb	r3, [r0, #24]
    137a:	f043 0302 	orr.w	r3, r3, #2
    137e:	7603      	strb	r3, [r0, #24]
		return;
    1380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1384:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1386:	68e3      	ldr	r3, [r4, #12]
    1388:	4620      	mov	r0, r4
    138a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    138c:	b185      	cbz	r5, 13b0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    138e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1390:	686b      	ldr	r3, [r5, #4]
    1392:	1afb      	subs	r3, r7, r3
    1394:	68aa      	ldr	r2, [r5, #8]
    1396:	4293      	cmp	r3, r2
    1398:	d30a      	bcc.n	13b0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    139a:	4640      	mov	r0, r8
    139c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    139e:	7c23      	ldrb	r3, [r4, #16]
    13a0:	2b01      	cmp	r3, #1
    13a2:	d1ef      	bne.n	1384 <timer_process_counted+0x48>
			tmp->time_label = time;
    13a4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    13a6:	463a      	mov	r2, r7
    13a8:	4621      	mov	r1, r4
    13aa:	4640      	mov	r0, r8
    13ac:	47d0      	blx	sl
    13ae:	e7e9      	b.n	1384 <timer_process_counted+0x48>
    13b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13b4:	00001491 	.word	0x00001491
    13b8:	000012e5 	.word	0x000012e5

000013bc <timer_init>:
{
    13bc:	b538      	push	{r3, r4, r5, lr}
    13be:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    13c0:	4604      	mov	r4, r0
    13c2:	b178      	cbz	r0, 13e4 <timer_init+0x28>
    13c4:	1c08      	adds	r0, r1, #0
    13c6:	bf18      	it	ne
    13c8:	2001      	movne	r0, #1
    13ca:	223b      	movs	r2, #59	; 0x3b
    13cc:	4906      	ldr	r1, [pc, #24]	; (13e8 <timer_init+0x2c>)
    13ce:	4b07      	ldr	r3, [pc, #28]	; (13ec <timer_init+0x30>)
    13d0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    13d2:	4629      	mov	r1, r5
    13d4:	4620      	mov	r0, r4
    13d6:	4b06      	ldr	r3, [pc, #24]	; (13f0 <timer_init+0x34>)
    13d8:	4798      	blx	r3
	descr->time                           = 0;
    13da:	2000      	movs	r0, #0
    13dc:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    13de:	4b05      	ldr	r3, [pc, #20]	; (13f4 <timer_init+0x38>)
    13e0:	6023      	str	r3, [r4, #0]
}
    13e2:	bd38      	pop	{r3, r4, r5, pc}
    13e4:	2000      	movs	r0, #0
    13e6:	e7f0      	b.n	13ca <timer_init+0xe>
    13e8:	00002530 	.word	0x00002530
    13ec:	00001435 	.word	0x00001435
    13f0:	000019f5 	.word	0x000019f5
    13f4:	0000133d 	.word	0x0000133d

000013f8 <timer_start>:
{
    13f8:	b510      	push	{r4, lr}
	ASSERT(descr);
    13fa:	4604      	mov	r4, r0
    13fc:	2253      	movs	r2, #83	; 0x53
    13fe:	4909      	ldr	r1, [pc, #36]	; (1424 <timer_start+0x2c>)
    1400:	3000      	adds	r0, #0
    1402:	bf18      	it	ne
    1404:	2001      	movne	r0, #1
    1406:	4b08      	ldr	r3, [pc, #32]	; (1428 <timer_start+0x30>)
    1408:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    140a:	4620      	mov	r0, r4
    140c:	4b07      	ldr	r3, [pc, #28]	; (142c <timer_start+0x34>)
    140e:	4798      	blx	r3
    1410:	b920      	cbnz	r0, 141c <timer_start+0x24>
	_timer_start(&descr->device);
    1412:	4620      	mov	r0, r4
    1414:	4b06      	ldr	r3, [pc, #24]	; (1430 <timer_start+0x38>)
    1416:	4798      	blx	r3
	return ERR_NONE;
    1418:	2000      	movs	r0, #0
    141a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    141c:	f06f 0010 	mvn.w	r0, #16
}
    1420:	bd10      	pop	{r4, pc}
    1422:	bf00      	nop
    1424:	00002530 	.word	0x00002530
    1428:	00001435 	.word	0x00001435
    142c:	00001bb1 	.word	0x00001bb1
    1430:	00001b9d 	.word	0x00001b9d

00001434 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1434:	b900      	cbnz	r0, 1438 <assert+0x4>
		__asm("BKPT #0");
    1436:	be00      	bkpt	0x0000
    1438:	4770      	bx	lr

0000143a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    143a:	6803      	ldr	r3, [r0, #0]
    143c:	b14b      	cbz	r3, 1452 <is_list_element+0x18>
		if (it == element) {
    143e:	428b      	cmp	r3, r1
    1440:	d009      	beq.n	1456 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1442:	681b      	ldr	r3, [r3, #0]
    1444:	b11b      	cbz	r3, 144e <is_list_element+0x14>
		if (it == element) {
    1446:	4299      	cmp	r1, r3
    1448:	d1fb      	bne.n	1442 <is_list_element+0x8>
			return true;
    144a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    144c:	4770      	bx	lr
	return false;
    144e:	2000      	movs	r0, #0
    1450:	4770      	bx	lr
    1452:	2000      	movs	r0, #0
    1454:	4770      	bx	lr
			return true;
    1456:	2001      	movs	r0, #1
    1458:	4770      	bx	lr
	...

0000145c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    145c:	b538      	push	{r3, r4, r5, lr}
    145e:	4604      	mov	r4, r0
    1460:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1462:	4b06      	ldr	r3, [pc, #24]	; (147c <list_insert_as_head+0x20>)
    1464:	4798      	blx	r3
    1466:	f080 0001 	eor.w	r0, r0, #1
    146a:	2239      	movs	r2, #57	; 0x39
    146c:	4904      	ldr	r1, [pc, #16]	; (1480 <list_insert_as_head+0x24>)
    146e:	b2c0      	uxtb	r0, r0
    1470:	4b04      	ldr	r3, [pc, #16]	; (1484 <list_insert_as_head+0x28>)
    1472:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1474:	6823      	ldr	r3, [r4, #0]
    1476:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1478:	6025      	str	r5, [r4, #0]
    147a:	bd38      	pop	{r3, r4, r5, pc}
    147c:	0000143b 	.word	0x0000143b
    1480:	00002548 	.word	0x00002548
    1484:	00001435 	.word	0x00001435

00001488 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1488:	6803      	ldr	r3, [r0, #0]
    148a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    148c:	6001      	str	r1, [r0, #0]
    148e:	4770      	bx	lr

00001490 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1490:	6803      	ldr	r3, [r0, #0]
    1492:	b10b      	cbz	r3, 1498 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1494:	681a      	ldr	r2, [r3, #0]
    1496:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1498:	4618      	mov	r0, r3
    149a:	4770      	bx	lr

0000149c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    149c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    14a0:	00c0      	lsls	r0, r0, #3
    14a2:	3002      	adds	r0, #2
    14a4:	4b02      	ldr	r3, [pc, #8]	; (14b0 <_get_cycles_for_us+0x14>)
    14a6:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14aa:	0840      	lsrs	r0, r0, #1
    14ac:	4770      	bx	lr
    14ae:	bf00      	nop
    14b0:	aaaaaaab 	.word	0xaaaaaaab

000014b4 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    14b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    14b8:	00c3      	lsls	r3, r0, #3
    14ba:	3302      	adds	r3, #2
    14bc:	4804      	ldr	r0, [pc, #16]	; (14d0 <_get_cycles_for_ms+0x1c>)
    14be:	fba0 2303 	umull	r2, r3, r0, r3
    14c2:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    14c8:	fb00 f003 	mul.w	r0, r0, r3
    14cc:	4770      	bx	lr
    14ce:	bf00      	nop
    14d0:	aaaaaaab 	.word	0xaaaaaaab
    14d4:	00000000 	.word	0x00000000

000014d8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    14d8:	3901      	subs	r1, #1
    14da:	d8fd      	bhi.n	14d8 <_delay_cycles>
    14dc:	4770      	bx	lr
    14de:	bf00      	nop

000014e0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14e0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    14e2:	4a13      	ldr	r2, [pc, #76]	; (1530 <_init_chip+0x50>)
    14e4:	8813      	ldrh	r3, [r2, #0]
    14e6:	b29b      	uxth	r3, r3
    14e8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    14ea:	4b12      	ldr	r3, [pc, #72]	; (1534 <_init_chip+0x54>)
    14ec:	4798      	blx	r3
	_oscctrl_init_sources();
    14ee:	4b12      	ldr	r3, [pc, #72]	; (1538 <_init_chip+0x58>)
    14f0:	4798      	blx	r3
	_mclk_init();
    14f2:	4b12      	ldr	r3, [pc, #72]	; (153c <_init_chip+0x5c>)
    14f4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    14f6:	2060      	movs	r0, #96	; 0x60
    14f8:	4c11      	ldr	r4, [pc, #68]	; (1540 <_init_chip+0x60>)
    14fa:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    14fc:	4b11      	ldr	r3, [pc, #68]	; (1544 <_init_chip+0x64>)
    14fe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1500:	f640 709f 	movw	r0, #3999	; 0xf9f
    1504:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1506:	4b10      	ldr	r3, [pc, #64]	; (1548 <_init_chip+0x68>)
    1508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    150a:	62da      	str	r2, [r3, #44]	; 0x2c
    150c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1510:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1514:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1518:	f442 4272 	orr.w	r2, r2, #61952	; 0xf200
    151c:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1520:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1524:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1528:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    152c:	bd10      	pop	{r4, pc}
    152e:	bf00      	nop
    1530:	41004000 	.word	0x41004000
    1534:	00001681 	.word	0x00001681
    1538:	00001695 	.word	0x00001695
    153c:	00001675 	.word	0x00001675
    1540:	000015a9 	.word	0x000015a9
    1544:	000016b1 	.word	0x000016b1
    1548:	41008000 	.word	0x41008000

0000154c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    154c:	b430      	push	{r4, r5}
    154e:	4814      	ldr	r0, [pc, #80]	; (15a0 <_event_system_init+0x54>)
    1550:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1554:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1556:	4c13      	ldr	r4, [pc, #76]	; (15a4 <_event_system_init+0x58>)
    1558:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    155a:	f813 1b01 	ldrb.w	r1, [r3], #1
    155e:	3248      	adds	r2, #72	; 0x48
    1560:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1564:	42ab      	cmp	r3, r5
    1566:	d1f7      	bne.n	1558 <_event_system_init+0xc>
    1568:	480d      	ldr	r0, [pc, #52]	; (15a0 <_event_system_init+0x54>)
    156a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    156e:	3080      	adds	r0, #128	; 0x80
    1570:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1572:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1576:	00ca      	lsls	r2, r1, #3
    1578:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    157c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1580:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1582:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1586:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1588:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    158c:	43db      	mvns	r3, r3
    158e:	b2db      	uxtb	r3, r3
    1590:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1594:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1596:	2920      	cmp	r1, #32
    1598:	d1eb      	bne.n	1572 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    159a:	2000      	movs	r0, #0
    159c:	bc30      	pop	{r4, r5}
    159e:	4770      	bx	lr
    15a0:	00002568 	.word	0x00002568
    15a4:	4100e000 	.word	0x4100e000

000015a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    15a8:	f010 0f01 	tst.w	r0, #1
    15ac:	d008      	beq.n	15c0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15ae:	4a29      	ldr	r2, [pc, #164]	; (1654 <_gclk_init_generators_by_fref+0xac>)
    15b0:	4b29      	ldr	r3, [pc, #164]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    15b2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15b4:	4619      	mov	r1, r3
    15b6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15ba:	684b      	ldr	r3, [r1, #4]
    15bc:	4213      	tst	r3, r2
    15be:	d1fc      	bne.n	15ba <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    15c0:	f010 0f02 	tst.w	r0, #2
    15c4:	d008      	beq.n	15d8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15c6:	4a25      	ldr	r2, [pc, #148]	; (165c <_gclk_init_generators_by_fref+0xb4>)
    15c8:	4b23      	ldr	r3, [pc, #140]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    15ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15cc:	4619      	mov	r1, r3
    15ce:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15d2:	684b      	ldr	r3, [r1, #4]
    15d4:	4213      	tst	r3, r2
    15d6:	d1fc      	bne.n	15d2 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    15d8:	f010 0f04 	tst.w	r0, #4
    15dc:	d008      	beq.n	15f0 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15de:	4a20      	ldr	r2, [pc, #128]	; (1660 <_gclk_init_generators_by_fref+0xb8>)
    15e0:	4b1d      	ldr	r3, [pc, #116]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    15e2:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15e4:	4619      	mov	r1, r3
    15e6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    15ea:	684b      	ldr	r3, [r1, #4]
    15ec:	4213      	tst	r3, r2
    15ee:	d1fc      	bne.n	15ea <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    15f0:	f010 0f10 	tst.w	r0, #16
    15f4:	d008      	beq.n	1608 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    15f6:	4a1b      	ldr	r2, [pc, #108]	; (1664 <_gclk_init_generators_by_fref+0xbc>)
    15f8:	4b17      	ldr	r3, [pc, #92]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    15fa:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    15fc:	4619      	mov	r1, r3
    15fe:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1602:	684b      	ldr	r3, [r1, #4]
    1604:	4213      	tst	r3, r2
    1606:	d1fc      	bne.n	1602 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    1608:	f010 0f20 	tst.w	r0, #32
    160c:	d008      	beq.n	1620 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    160e:	4a16      	ldr	r2, [pc, #88]	; (1668 <_gclk_init_generators_by_fref+0xc0>)
    1610:	4b11      	ldr	r3, [pc, #68]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    1612:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1614:	4619      	mov	r1, r3
    1616:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    161a:	684b      	ldr	r3, [r1, #4]
    161c:	4213      	tst	r3, r2
    161e:	d1fc      	bne.n	161a <_gclk_init_generators_by_fref+0x72>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    1620:	f010 0f40 	tst.w	r0, #64	; 0x40
    1624:	d008      	beq.n	1638 <_gclk_init_generators_by_fref+0x90>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1626:	4a11      	ldr	r2, [pc, #68]	; (166c <_gclk_init_generators_by_fref+0xc4>)
    1628:	4b0b      	ldr	r3, [pc, #44]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    162a:	639a      	str	r2, [r3, #56]	; 0x38
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    162c:	4619      	mov	r1, r3
    162e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1632:	684b      	ldr	r3, [r1, #4]
    1634:	4213      	tst	r3, r2
    1636:	d1fc      	bne.n	1632 <_gclk_init_generators_by_fref+0x8a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1638:	f410 6f00 	tst.w	r0, #2048	; 0x800
    163c:	d008      	beq.n	1650 <_gclk_init_generators_by_fref+0xa8>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    163e:	4a0c      	ldr	r2, [pc, #48]	; (1670 <_gclk_init_generators_by_fref+0xc8>)
    1640:	4b05      	ldr	r3, [pc, #20]	; (1658 <_gclk_init_generators_by_fref+0xb0>)
    1642:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1644:	4619      	mov	r1, r3
    1646:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    164a:	684b      	ldr	r3, [r1, #4]
    164c:	4213      	tst	r3, r2
    164e:	d1fc      	bne.n	164a <_gclk_init_generators_by_fref+0xa2>
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	00010107 	.word	0x00010107
    1658:	40001c00 	.word	0x40001c00
    165c:	00012908 	.word	0x00012908
    1660:	00030907 	.word	0x00030907
    1664:	00010901 	.word	0x00010901
    1668:	00042901 	.word	0x00042901
    166c:	00060901 	.word	0x00060901
    1670:	00010904 	.word	0x00010904

00001674 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1674:	2201      	movs	r2, #1
    1676:	4b01      	ldr	r3, [pc, #4]	; (167c <_mclk_init+0x8>)
    1678:	715a      	strb	r2, [r3, #5]
    167a:	4770      	bx	lr
    167c:	40000800 	.word	0x40000800

00001680 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1680:	4b03      	ldr	r3, [pc, #12]	; (1690 <_osc32kctrl_init_sources+0x10>)
    1682:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1684:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1688:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    168a:	2201      	movs	r2, #1
    168c:	741a      	strb	r2, [r3, #16]
    168e:	4770      	bx	lr
    1690:	40001400 	.word	0x40001400

00001694 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1694:	4a04      	ldr	r2, [pc, #16]	; (16a8 <_oscctrl_init_sources+0x14>)
    1696:	4b05      	ldr	r3, [pc, #20]	; (16ac <_oscctrl_init_sources+0x18>)
    1698:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    169a:	461a      	mov	r2, r3
    169c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    169e:	f013 0f02 	tst.w	r3, #2
    16a2:	d0fb      	beq.n	169c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    16a4:	4770      	bx	lr
    16a6:	bf00      	nop
    16a8:	03002606 	.word	0x03002606
    16ac:	40001000 	.word	0x40001000

000016b0 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    16b0:	2227      	movs	r2, #39	; 0x27
    16b2:	4b1c      	ldr	r3, [pc, #112]	; (1724 <_oscctrl_init_referenced_generators+0x74>)
    16b4:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    16b6:	461a      	mov	r2, r3
    16b8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    16ba:	f013 0f06 	tst.w	r3, #6
    16be:	d1fb      	bne.n	16b8 <_oscctrl_init_referenced_generators+0x8>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    16c0:	4b18      	ldr	r3, [pc, #96]	; (1724 <_oscctrl_init_referenced_generators+0x74>)
    16c2:	2270      	movs	r2, #112	; 0x70
    16c4:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    16c6:	2242      	movs	r2, #66	; 0x42
    16c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    16cc:	461a      	mov	r2, r3
    16ce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    16d0:	f013 0f02 	tst.w	r3, #2
    16d4:	d1fb      	bne.n	16ce <_oscctrl_init_referenced_generators+0x1e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    16d6:	2231      	movs	r2, #49	; 0x31
    16d8:	4b12      	ldr	r3, [pc, #72]	; (1724 <_oscctrl_init_referenced_generators+0x74>)
    16da:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    16dc:	461a      	mov	r2, r3
    16de:	6d13      	ldr	r3, [r2, #80]	; 0x50
    16e0:	f013 0f06 	tst.w	r3, #6
    16e4:	d1fb      	bne.n	16de <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    16e6:	4b0f      	ldr	r3, [pc, #60]	; (1724 <_oscctrl_init_referenced_generators+0x74>)
    16e8:	2270      	movs	r2, #112	; 0x70
    16ea:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    16ec:	2242      	movs	r2, #66	; 0x42
    16ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    16f2:	461a      	mov	r2, r3
    16f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    16f6:	f013 0f02 	tst.w	r3, #2
    16fa:	d1fb      	bne.n	16f4 <_oscctrl_init_referenced_generators+0x44>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    16fc:	4b09      	ldr	r3, [pc, #36]	; (1724 <_oscctrl_init_referenced_generators+0x74>)
    16fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1700:	f012 0f01 	tst.w	r2, #1
    1704:	d103      	bne.n	170e <_oscctrl_init_referenced_generators+0x5e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1708:	f012 0f02 	tst.w	r2, #2
    170c:	d0f7      	beq.n	16fe <_oscctrl_init_referenced_generators+0x4e>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    170e:	4b05      	ldr	r3, [pc, #20]	; (1724 <_oscctrl_init_referenced_generators+0x74>)
    1710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1712:	f012 0f01 	tst.w	r2, #1
    1716:	d103      	bne.n	1720 <_oscctrl_init_referenced_generators+0x70>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    171a:	f012 0f02 	tst.w	r2, #2
    171e:	d0f7      	beq.n	1710 <_oscctrl_init_referenced_generators+0x60>
    1720:	4770      	bx	lr
    1722:	bf00      	nop
    1724:	40001000 	.word	0x40001000

00001728 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1728:	b470      	push	{r4, r5, r6}
    172a:	b089      	sub	sp, #36	; 0x24
    172c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    172e:	466c      	mov	r4, sp
    1730:	4d0d      	ldr	r5, [pc, #52]	; (1768 <_sercom_get_hardware_index+0x40>)
    1732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1736:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    173a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    173e:	9b00      	ldr	r3, [sp, #0]
    1740:	42b3      	cmp	r3, r6
    1742:	d00d      	beq.n	1760 <_sercom_get_hardware_index+0x38>
    1744:	4631      	mov	r1, r6
    1746:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1748:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    174a:	f853 2b04 	ldr.w	r2, [r3], #4
    174e:	428a      	cmp	r2, r1
    1750:	d007      	beq.n	1762 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1752:	3001      	adds	r0, #1
    1754:	2808      	cmp	r0, #8
    1756:	d1f8      	bne.n	174a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1758:	2000      	movs	r0, #0
}
    175a:	b009      	add	sp, #36	; 0x24
    175c:	bc70      	pop	{r4, r5, r6}
    175e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1760:	2000      	movs	r0, #0
			return i;
    1762:	b2c0      	uxtb	r0, r0
    1764:	e7f9      	b.n	175a <_sercom_get_hardware_index+0x32>
    1766:	bf00      	nop
    1768:	0000266c 	.word	0x0000266c

0000176c <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    176c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    176e:	f013 0f01 	tst.w	r3, #1
    1772:	d109      	bne.n	1788 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1774:	6803      	ldr	r3, [r0, #0]
    1776:	f043 0302 	orr.w	r3, r3, #2
    177a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    177c:	69c3      	ldr	r3, [r0, #28]
    177e:	f013 0f03 	tst.w	r3, #3
    1782:	d1fb      	bne.n	177c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1784:	2000      	movs	r0, #0
    1786:	4770      	bx	lr
		return ERR_BUSY;
    1788:	f06f 0003 	mvn.w	r0, #3
}
    178c:	4770      	bx	lr
	...

00001790 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1790:	b538      	push	{r3, r4, r5, lr}
    1792:	4605      	mov	r5, r0
    1794:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1796:	4608      	mov	r0, r1
    1798:	4b36      	ldr	r3, [pc, #216]	; (1874 <_spi_m_sync_init+0xe4>)
    179a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    179c:	b160      	cbz	r0, 17b8 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    179e:	2d00      	cmp	r5, #0
    17a0:	d055      	beq.n	184e <_spi_m_sync_init+0xbe>
    17a2:	f640 123f 	movw	r2, #2367	; 0x93f
    17a6:	4934      	ldr	r1, [pc, #208]	; (1878 <_spi_m_sync_init+0xe8>)
    17a8:	1c20      	adds	r0, r4, #0
    17aa:	bf18      	it	ne
    17ac:	2001      	movne	r0, #1
    17ae:	4b33      	ldr	r3, [pc, #204]	; (187c <_spi_m_sync_init+0xec>)
    17b0:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    17b2:	f06f 000c 	mvn.w	r0, #12
    17b6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    17b8:	2d00      	cmp	r5, #0
    17ba:	d151      	bne.n	1860 <_spi_m_sync_init+0xd0>
    17bc:	f640 123f 	movw	r2, #2367	; 0x93f
    17c0:	492d      	ldr	r1, [pc, #180]	; (1878 <_spi_m_sync_init+0xe8>)
    17c2:	2000      	movs	r0, #0
    17c4:	4b2d      	ldr	r3, [pc, #180]	; (187c <_spi_m_sync_init+0xec>)
    17c6:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    17c8:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    17ca:	f013 0f01 	tst.w	r3, #1
    17ce:	d119      	bne.n	1804 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17d0:	69e3      	ldr	r3, [r4, #28]
    17d2:	f013 0f03 	tst.w	r3, #3
    17d6:	d1fb      	bne.n	17d0 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17d8:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    17da:	f013 0f02 	tst.w	r3, #2
    17de:	d00b      	beq.n	17f8 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    17e0:	6823      	ldr	r3, [r4, #0]
    17e2:	f023 0302 	bic.w	r3, r3, #2
    17e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17e8:	69e3      	ldr	r3, [r4, #28]
    17ea:	f013 0f03 	tst.w	r3, #3
    17ee:	d1fb      	bne.n	17e8 <_spi_m_sync_init+0x58>
    17f0:	69e3      	ldr	r3, [r4, #28]
    17f2:	f013 0f02 	tst.w	r3, #2
    17f6:	d1fb      	bne.n	17f0 <_spi_m_sync_init+0x60>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17f8:	230d      	movs	r3, #13
    17fa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17fc:	69e3      	ldr	r3, [r4, #28]
    17fe:	f013 0f03 	tst.w	r3, #3
    1802:	d1fb      	bne.n	17fc <_spi_m_sync_init+0x6c>
    1804:	69e3      	ldr	r3, [r4, #28]
    1806:	f013 0f01 	tst.w	r3, #1
    180a:	d1fb      	bne.n	1804 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    180c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    180e:	f640 1209 	movw	r2, #2313	; 0x909
    1812:	4919      	ldr	r1, [pc, #100]	; (1878 <_spi_m_sync_init+0xe8>)
    1814:	1c20      	adds	r0, r4, #0
    1816:	bf18      	it	ne
    1818:	2001      	movne	r0, #1
    181a:	4b18      	ldr	r3, [pc, #96]	; (187c <_spi_m_sync_init+0xec>)
    181c:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    181e:	4b18      	ldr	r3, [pc, #96]	; (1880 <_spi_m_sync_init+0xf0>)
    1820:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1822:	69e3      	ldr	r3, [r4, #28]
    1824:	f013 0f03 	tst.w	r3, #3
    1828:	d1fb      	bne.n	1822 <_spi_m_sync_init+0x92>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    182a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    182e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1830:	69e3      	ldr	r3, [r4, #28]
    1832:	f013 0f17 	tst.w	r3, #23
    1836:	d1fb      	bne.n	1830 <_spi_m_sync_init+0xa0>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1838:	2313      	movs	r3, #19
    183a:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    183c:	2000      	movs	r0, #0
    183e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1842:	2301      	movs	r3, #1
    1844:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1846:	f240 13ff 	movw	r3, #511	; 0x1ff
    184a:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    184c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    184e:	f640 123f 	movw	r2, #2367	; 0x93f
    1852:	4909      	ldr	r1, [pc, #36]	; (1878 <_spi_m_sync_init+0xe8>)
    1854:	2000      	movs	r0, #0
    1856:	4b09      	ldr	r3, [pc, #36]	; (187c <_spi_m_sync_init+0xec>)
    1858:	4798      	blx	r3
		return ERR_INVALID_ARG;
    185a:	f06f 000c 	mvn.w	r0, #12
    185e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1860:	f640 123f 	movw	r2, #2367	; 0x93f
    1864:	4904      	ldr	r1, [pc, #16]	; (1878 <_spi_m_sync_init+0xe8>)
    1866:	1c20      	adds	r0, r4, #0
    1868:	bf18      	it	ne
    186a:	2001      	movne	r0, #1
    186c:	4b03      	ldr	r3, [pc, #12]	; (187c <_spi_m_sync_init+0xec>)
    186e:	4798      	blx	r3
    1870:	e7aa      	b.n	17c8 <_spi_m_sync_init+0x38>
    1872:	bf00      	nop
    1874:	00001729 	.word	0x00001729
    1878:	000026a4 	.word	0x000026a4
    187c:	00001435 	.word	0x00001435
    1880:	0020000c 	.word	0x0020000c

00001884 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1884:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1886:	4604      	mov	r4, r0
    1888:	b160      	cbz	r0, 18a4 <_spi_m_sync_enable+0x20>
    188a:	6800      	ldr	r0, [r0, #0]
    188c:	3000      	adds	r0, #0
    188e:	bf18      	it	ne
    1890:	2001      	movne	r0, #1
    1892:	f640 129e 	movw	r2, #2462	; 0x99e
    1896:	4904      	ldr	r1, [pc, #16]	; (18a8 <_spi_m_sync_enable+0x24>)
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <_spi_m_sync_enable+0x28>)
    189a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    189c:	6820      	ldr	r0, [r4, #0]
    189e:	4b04      	ldr	r3, [pc, #16]	; (18b0 <_spi_m_sync_enable+0x2c>)
    18a0:	4798      	blx	r3
}
    18a2:	bd10      	pop	{r4, pc}
    18a4:	2000      	movs	r0, #0
    18a6:	e7f4      	b.n	1892 <_spi_m_sync_enable+0xe>
    18a8:	000026a4 	.word	0x000026a4
    18ac:	00001435 	.word	0x00001435
    18b0:	0000176d 	.word	0x0000176d

000018b4 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    18b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    18b8:	4681      	mov	r9, r0
    18ba:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    18bc:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    18be:	f8d1 8000 	ldr.w	r8, [r1]
    18c2:	684d      	ldr	r5, [r1, #4]
    18c4:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    18c6:	b1a8      	cbz	r0, 18f4 <_spi_m_sync_trans+0x40>
    18c8:	1c20      	adds	r0, r4, #0
    18ca:	bf18      	it	ne
    18cc:	2001      	movne	r0, #1
    18ce:	f640 22a3 	movw	r2, #2723	; 0xaa3
    18d2:	492e      	ldr	r1, [pc, #184]	; (198c <_spi_m_sync_trans+0xd8>)
    18d4:	4b2e      	ldr	r3, [pc, #184]	; (1990 <_spi_m_sync_trans+0xdc>)
    18d6:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    18d8:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    18da:	f013 0f07 	tst.w	r3, #7
    18de:	d134      	bne.n	194a <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18e0:	69e0      	ldr	r0, [r4, #28]
    18e2:	f010 0003 	ands.w	r0, r0, #3
    18e6:	d1fb      	bne.n	18e0 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    18e8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    18ea:	f013 0f02 	tst.w	r3, #2
    18ee:	d030      	beq.n	1952 <_spi_m_sync_trans+0x9e>
    18f0:	4602      	mov	r2, r0
    18f2:	e008      	b.n	1906 <_spi_m_sync_trans+0x52>
    18f4:	2000      	movs	r0, #0
    18f6:	e7ea      	b.n	18ce <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    18f8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    18fa:	f013 0f80 	tst.w	r3, #128	; 0x80
    18fe:	d112      	bne.n	1926 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1900:	68b3      	ldr	r3, [r6, #8]
    1902:	4283      	cmp	r3, r0
    1904:	d91e      	bls.n	1944 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1906:	7e23      	ldrb	r3, [r4, #24]
    1908:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    190a:	f013 0f04 	tst.w	r3, #4
    190e:	d024      	beq.n	195a <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1910:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1912:	2d00      	cmp	r5, #0
    1914:	d0f0      	beq.n	18f8 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    1916:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    1918:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    191a:	bf91      	iteee	ls
    191c:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    191e:	0a09      	lsrhi	r1, r1, #8
    1920:	7069      	strbhi	r1, [r5, #1]
    1922:	3502      	addhi	r5, #2
    1924:	e7e8      	b.n	18f8 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1926:	f64f 73ff 	movw	r3, #65535	; 0xffff
    192a:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    192c:	2380      	movs	r3, #128	; 0x80
    192e:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1930:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1934:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1936:	f013 0f03 	tst.w	r3, #3
    193a:	d0fb      	beq.n	1934 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    193c:	2303      	movs	r3, #3
    193e:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1944:	4293      	cmp	r3, r2
    1946:	d8de      	bhi.n	1906 <_spi_m_sync_trans+0x52>
    1948:	e7f4      	b.n	1934 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    194a:	f06f 0003 	mvn.w	r0, #3
    194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    1952:	f06f 0013 	mvn.w	r0, #19
    1956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    195a:	4290      	cmp	r0, r2
    195c:	d8cd      	bhi.n	18fa <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    195e:	f013 0f01 	tst.w	r3, #1
    1962:	d0ca      	beq.n	18fa <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1964:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1968:	f1b8 0f00 	cmp.w	r8, #0
    196c:	d00b      	beq.n	1986 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    196e:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    1972:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1974:	bf91      	iteee	ls
    1976:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    197a:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    197e:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    1982:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1986:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1988:	62a1      	str	r1, [r4, #40]	; 0x28
    198a:	e7b6      	b.n	18fa <_spi_m_sync_trans+0x46>
    198c:	000026a4 	.word	0x000026a4
    1990:	00001435 	.word	0x00001435

00001994 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	b088      	sub	sp, #32
    1998:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    199a:	466c      	mov	r4, sp
    199c:	4d12      	ldr	r5, [pc, #72]	; (19e8 <get_tc_index+0x54>)
    199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    19a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    19a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    19a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    19aa:	9b00      	ldr	r3, [sp, #0]
    19ac:	42b3      	cmp	r3, r6
    19ae:	d00b      	beq.n	19c8 <get_tc_index+0x34>
    19b0:	4630      	mov	r0, r6
    19b2:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19b4:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    19b6:	f852 1b04 	ldr.w	r1, [r2], #4
    19ba:	4281      	cmp	r1, r0
    19bc:	d005      	beq.n	19ca <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19be:	3301      	adds	r3, #1
    19c0:	2b08      	cmp	r3, #8
    19c2:	d1f8      	bne.n	19b6 <get_tc_index+0x22>
			return i;
    19c4:	2000      	movs	r0, #0
    19c6:	e00b      	b.n	19e0 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    19c8:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    19ca:	f013 0fff 	tst.w	r3, #255	; 0xff
    19ce:	d009      	beq.n	19e4 <get_tc_index+0x50>
	ASSERT(false);
    19d0:	f44f 729e 	mov.w	r2, #316	; 0x13c
    19d4:	4905      	ldr	r1, [pc, #20]	; (19ec <get_tc_index+0x58>)
    19d6:	2000      	movs	r0, #0
    19d8:	4b05      	ldr	r3, [pc, #20]	; (19f0 <get_tc_index+0x5c>)
    19da:	4798      	blx	r3
	return -1;
    19dc:	f04f 30ff 	mov.w	r0, #4294967295
}
    19e0:	b008      	add	sp, #32
    19e2:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    19e4:	2000      	movs	r0, #0
    19e6:	e7fb      	b.n	19e0 <get_tc_index+0x4c>
    19e8:	000026c0 	.word	0x000026c0
    19ec:	000026f4 	.word	0x000026f4
    19f0:	00001435 	.word	0x00001435

000019f4 <_timer_init>:
{
    19f4:	b570      	push	{r4, r5, r6, lr}
    19f6:	4606      	mov	r6, r0
    19f8:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    19fa:	4608      	mov	r0, r1
    19fc:	4b60      	ldr	r3, [pc, #384]	; (1b80 <_timer_init+0x18c>)
    19fe:	4798      	blx	r3
    1a00:	4605      	mov	r5, r0
	device->hw = hw;
    1a02:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1a04:	228d      	movs	r2, #141	; 0x8d
    1a06:	495f      	ldr	r1, [pc, #380]	; (1b84 <_timer_init+0x190>)
    1a08:	2001      	movs	r0, #1
    1a0a:	4b5f      	ldr	r3, [pc, #380]	; (1b88 <_timer_init+0x194>)
    1a0c:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1a0e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1a10:	f013 0f01 	tst.w	r3, #1
    1a14:	d119      	bne.n	1a4a <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a16:	6923      	ldr	r3, [r4, #16]
    1a18:	f013 0f03 	tst.w	r3, #3
    1a1c:	d1fb      	bne.n	1a16 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1a1e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1a20:	f013 0f02 	tst.w	r3, #2
    1a24:	d00b      	beq.n	1a3e <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1a26:	6823      	ldr	r3, [r4, #0]
    1a28:	f023 0302 	bic.w	r3, r3, #2
    1a2c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a2e:	6923      	ldr	r3, [r4, #16]
    1a30:	f013 0f03 	tst.w	r3, #3
    1a34:	d1fb      	bne.n	1a2e <_timer_init+0x3a>
    1a36:	6923      	ldr	r3, [r4, #16]
    1a38:	f013 0f02 	tst.w	r3, #2
    1a3c:	d1fb      	bne.n	1a36 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a3e:	2301      	movs	r3, #1
    1a40:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a42:	6923      	ldr	r3, [r4, #16]
    1a44:	f013 0f03 	tst.w	r3, #3
    1a48:	d1fb      	bne.n	1a42 <_timer_init+0x4e>
    1a4a:	6923      	ldr	r3, [r4, #16]
    1a4c:	f013 0f01 	tst.w	r3, #1
    1a50:	d1fb      	bne.n	1a4a <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1a52:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a56:	4a4d      	ldr	r2, [pc, #308]	; (1b8c <_timer_init+0x198>)
    1a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1a5e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a60:	6923      	ldr	r3, [r4, #16]
    1a62:	f013 0f03 	tst.w	r3, #3
    1a66:	d1fb      	bne.n	1a60 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1a68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a6c:	4947      	ldr	r1, [pc, #284]	; (1b8c <_timer_init+0x198>)
    1a6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1a72:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1a76:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1a7a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1a7c:	2301      	movs	r3, #1
    1a7e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1a80:	f002 020c 	and.w	r2, r2, #12
    1a84:	2a08      	cmp	r2, #8
    1a86:	d048      	beq.n	1b1a <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1a88:	2a00      	cmp	r2, #0
    1a8a:	d158      	bne.n	1b3e <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1a8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1a90:	4a3e      	ldr	r2, [pc, #248]	; (1b8c <_timer_init+0x198>)
    1a92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1a98:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1a9a:	6923      	ldr	r3, [r4, #16]
    1a9c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1aa0:	d1fb      	bne.n	1a9a <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1aa2:	2300      	movs	r3, #0
    1aa4:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1aa6:	6923      	ldr	r3, [r4, #16]
    1aa8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1aac:	d1fb      	bne.n	1aa6 <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1aae:	2301      	movs	r3, #1
    1ab0:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    1ab2:	4b37      	ldr	r3, [pc, #220]	; (1b90 <_timer_init+0x19c>)
    1ab4:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    1ab6:	bf04      	itt	eq
    1ab8:	4b36      	ldreq	r3, [pc, #216]	; (1b94 <_timer_init+0x1a0>)
    1aba:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    1abc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ac0:	4a32      	ldr	r2, [pc, #200]	; (1b8c <_timer_init+0x198>)
    1ac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ac6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1aca:	2b00      	cmp	r3, #0
    1acc:	db23      	blt.n	1b16 <_timer_init+0x122>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ace:	095a      	lsrs	r2, r3, #5
    1ad0:	f003 031f 	and.w	r3, r3, #31
    1ad4:	2101      	movs	r1, #1
    1ad6:	fa01 f303 	lsl.w	r3, r1, r3
    1ada:	3220      	adds	r2, #32
    1adc:	492e      	ldr	r1, [pc, #184]	; (1b98 <_timer_init+0x1a4>)
    1ade:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ae6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1aea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1aee:	4b27      	ldr	r3, [pc, #156]	; (1b8c <_timer_init+0x198>)
    1af0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1af4:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1af8:	2b00      	cmp	r3, #0
    1afa:	db0c      	blt.n	1b16 <_timer_init+0x122>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1afc:	0959      	lsrs	r1, r3, #5
    1afe:	f003 031f 	and.w	r3, r3, #31
    1b02:	2201      	movs	r2, #1
    1b04:	fa02 f303 	lsl.w	r3, r2, r3
    1b08:	4a23      	ldr	r2, [pc, #140]	; (1b98 <_timer_init+0x1a4>)
    1b0a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    1b0e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1b16:	2000      	movs	r0, #0
    1b18:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1b1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1b1e:	4a1b      	ldr	r2, [pc, #108]	; (1b8c <_timer_init+0x198>)
    1b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b26:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b28:	6923      	ldr	r3, [r4, #16]
    1b2a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b2e:	d1fb      	bne.n	1b28 <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1b30:	2300      	movs	r3, #0
    1b32:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b34:	6923      	ldr	r3, [r4, #16]
    1b36:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b3a:	d1fb      	bne.n	1b34 <_timer_init+0x140>
    1b3c:	e7b7      	b.n	1aae <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1b3e:	2a04      	cmp	r2, #4
    1b40:	d1b5      	bne.n	1aae <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1b42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1b46:	4a11      	ldr	r2, [pc, #68]	; (1b8c <_timer_init+0x198>)
    1b48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b50:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b52:	6923      	ldr	r3, [r4, #16]
    1b54:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b58:	d1fb      	bne.n	1b52 <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1b5a:	2300      	movs	r3, #0
    1b5c:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b5e:	6923      	ldr	r3, [r4, #16]
    1b60:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1b64:	d1fb      	bne.n	1b5e <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1b66:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1b6a:	4a08      	ldr	r2, [pc, #32]	; (1b8c <_timer_init+0x198>)
    1b6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b70:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    1b74:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1b76:	6923      	ldr	r3, [r4, #16]
    1b78:	f013 0f20 	tst.w	r3, #32
    1b7c:	d1fb      	bne.n	1b76 <_timer_init+0x182>
    1b7e:	e796      	b.n	1aae <_timer_init+0xba>
    1b80:	00001995 	.word	0x00001995
    1b84:	000026f4 	.word	0x000026f4
    1b88:	00001435 	.word	0x00001435
    1b8c:	000026c0 	.word	0x000026c0
    1b90:	40003800 	.word	0x40003800
    1b94:	200002e8 	.word	0x200002e8
    1b98:	e000e100 	.word	0xe000e100

00001b9c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1b9c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1b9e:	6813      	ldr	r3, [r2, #0]
    1ba0:	f043 0302 	orr.w	r3, r3, #2
    1ba4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ba6:	6913      	ldr	r3, [r2, #16]
    1ba8:	f013 0f03 	tst.w	r3, #3
    1bac:	d1fb      	bne.n	1ba6 <_timer_start+0xa>
}
    1bae:	4770      	bx	lr

00001bb0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1bb0:	68c2      	ldr	r2, [r0, #12]
    1bb2:	6913      	ldr	r3, [r2, #16]
    1bb4:	f013 0f03 	tst.w	r3, #3
    1bb8:	d1fb      	bne.n	1bb2 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1bba:	6810      	ldr	r0, [r2, #0]
}
    1bbc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1bc0:	4770      	bx	lr

00001bc2 <_tc_get_timer>:
}
    1bc2:	2000      	movs	r0, #0
    1bc4:	4770      	bx	lr
	...

00001bc8 <TC0_Handler>:
{
    1bc8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    1bca:	4b06      	ldr	r3, [pc, #24]	; (1be4 <TC0_Handler+0x1c>)
    1bcc:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    1bce:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1bd0:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1bd2:	f012 0f01 	tst.w	r2, #1
    1bd6:	d100      	bne.n	1bda <TC0_Handler+0x12>
    1bd8:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1bda:	2201      	movs	r2, #1
    1bdc:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    1bde:	6803      	ldr	r3, [r0, #0]
    1be0:	4798      	blx	r3
}
    1be2:	e7f9      	b.n	1bd8 <TC0_Handler+0x10>
    1be4:	200002e8 	.word	0x200002e8

00001be8 <__aeabi_atexit>:
    1be8:	460b      	mov	r3, r1
    1bea:	4601      	mov	r1, r0
    1bec:	4618      	mov	r0, r3
    1bee:	f000 bb65 	b.w	22bc <__cxa_atexit>

00001bf2 <_ZdlPvj>:
    1bf2:	f000 b800 	b.w	1bf6 <_ZdlPv>

00001bf6 <_ZdlPv>:
    1bf6:	f000 bb93 	b.w	2320 <free>
	...

00001bfc <floorf>:
    1bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c00:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
    1c04:	0dfc      	lsrs	r4, r7, #23
    1c06:	3c7f      	subs	r4, #127	; 0x7f
    1c08:	2c16      	cmp	r4, #22
    1c0a:	4605      	mov	r5, r0
    1c0c:	dc13      	bgt.n	1c36 <floorf+0x3a>
    1c0e:	2c00      	cmp	r4, #0
    1c10:	4680      	mov	r8, r0
    1c12:	db1b      	blt.n	1c4c <floorf+0x50>
    1c14:	4f19      	ldr	r7, [pc, #100]	; (1c7c <floorf+0x80>)
    1c16:	4127      	asrs	r7, r4
    1c18:	4238      	tst	r0, r7
    1c1a:	d014      	beq.n	1c46 <floorf+0x4a>
    1c1c:	4918      	ldr	r1, [pc, #96]	; (1c80 <floorf+0x84>)
    1c1e:	f000 f85f 	bl	1ce0 <__addsf3>
    1c22:	2100      	movs	r1, #0
    1c24:	f000 fb20 	bl	2268 <__aeabi_fcmpgt>
    1c28:	b168      	cbz	r0, 1c46 <floorf+0x4a>
    1c2a:	2d00      	cmp	r5, #0
    1c2c:	db1b      	blt.n	1c66 <floorf+0x6a>
    1c2e:	ea28 0007 	bic.w	r0, r8, r7
    1c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c36:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
    1c3a:	d304      	bcc.n	1c46 <floorf+0x4a>
    1c3c:	4601      	mov	r1, r0
    1c3e:	f000 f84f 	bl	1ce0 <__addsf3>
    1c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c46:	4628      	mov	r0, r5
    1c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c4c:	490c      	ldr	r1, [pc, #48]	; (1c80 <floorf+0x84>)
    1c4e:	f000 f847 	bl	1ce0 <__addsf3>
    1c52:	2100      	movs	r1, #0
    1c54:	f000 fb08 	bl	2268 <__aeabi_fcmpgt>
    1c58:	2800      	cmp	r0, #0
    1c5a:	d0f4      	beq.n	1c46 <floorf+0x4a>
    1c5c:	2d00      	cmp	r5, #0
    1c5e:	db08      	blt.n	1c72 <floorf+0x76>
    1c60:	2000      	movs	r0, #0
    1c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1c6a:	fa43 f404 	asr.w	r4, r3, r4
    1c6e:	44a0      	add	r8, r4
    1c70:	e7dd      	b.n	1c2e <floorf+0x32>
    1c72:	2f00      	cmp	r7, #0
    1c74:	d0e7      	beq.n	1c46 <floorf+0x4a>
    1c76:	4803      	ldr	r0, [pc, #12]	; (1c84 <floorf+0x88>)
    1c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c7c:	007fffff 	.word	0x007fffff
    1c80:	7149f2ca 	.word	0x7149f2ca
    1c84:	bf800000 	.word	0xbf800000

00001c88 <roundf>:
    1c88:	b508      	push	{r3, lr}
    1c8a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
    1c8e:	3b7f      	subs	r3, #127	; 0x7f
    1c90:	2b16      	cmp	r3, #22
    1c92:	4601      	mov	r1, r0
    1c94:	dc0e      	bgt.n	1cb4 <roundf+0x2c>
    1c96:	2b00      	cmp	r3, #0
    1c98:	4602      	mov	r2, r0
    1c9a:	db12      	blt.n	1cc2 <roundf+0x3a>
    1c9c:	480c      	ldr	r0, [pc, #48]	; (1cd0 <roundf+0x48>)
    1c9e:	4118      	asrs	r0, r3
    1ca0:	4201      	tst	r1, r0
    1ca2:	d005      	beq.n	1cb0 <roundf+0x28>
    1ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1ca8:	4119      	asrs	r1, r3
    1caa:	4411      	add	r1, r2
    1cac:	ea21 0100 	bic.w	r1, r1, r0
    1cb0:	4608      	mov	r0, r1
    1cb2:	bd08      	pop	{r3, pc}
    1cb4:	2b80      	cmp	r3, #128	; 0x80
    1cb6:	d1fb      	bne.n	1cb0 <roundf+0x28>
    1cb8:	f000 f812 	bl	1ce0 <__addsf3>
    1cbc:	4601      	mov	r1, r0
    1cbe:	4608      	mov	r0, r1
    1cc0:	bd08      	pop	{r3, pc}
    1cc2:	3301      	adds	r3, #1
    1cc4:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
    1cc8:	d1f2      	bne.n	1cb0 <roundf+0x28>
    1cca:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
    1cce:	e7ef      	b.n	1cb0 <roundf+0x28>
    1cd0:	007fffff 	.word	0x007fffff

00001cd4 <__aeabi_frsub>:
    1cd4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    1cd8:	e002      	b.n	1ce0 <__addsf3>
    1cda:	bf00      	nop

00001cdc <__aeabi_fsub>:
    1cdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00001ce0 <__addsf3>:
    1ce0:	0042      	lsls	r2, r0, #1
    1ce2:	bf1f      	itttt	ne
    1ce4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    1ce8:	ea92 0f03 	teqne	r2, r3
    1cec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    1cf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1cf4:	d06a      	beq.n	1dcc <__addsf3+0xec>
    1cf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    1cfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    1cfe:	bfc1      	itttt	gt
    1d00:	18d2      	addgt	r2, r2, r3
    1d02:	4041      	eorgt	r1, r0
    1d04:	4048      	eorgt	r0, r1
    1d06:	4041      	eorgt	r1, r0
    1d08:	bfb8      	it	lt
    1d0a:	425b      	neglt	r3, r3
    1d0c:	2b19      	cmp	r3, #25
    1d0e:	bf88      	it	hi
    1d10:	4770      	bxhi	lr
    1d12:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1d1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d1e:	bf18      	it	ne
    1d20:	4240      	negne	r0, r0
    1d22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1d26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    1d2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d2e:	bf18      	it	ne
    1d30:	4249      	negne	r1, r1
    1d32:	ea92 0f03 	teq	r2, r3
    1d36:	d03f      	beq.n	1db8 <__addsf3+0xd8>
    1d38:	f1a2 0201 	sub.w	r2, r2, #1
    1d3c:	fa41 fc03 	asr.w	ip, r1, r3
    1d40:	eb10 000c 	adds.w	r0, r0, ip
    1d44:	f1c3 0320 	rsb	r3, r3, #32
    1d48:	fa01 f103 	lsl.w	r1, r1, r3
    1d4c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1d50:	d502      	bpl.n	1d58 <__addsf3+0x78>
    1d52:	4249      	negs	r1, r1
    1d54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    1d58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1d5c:	d313      	bcc.n	1d86 <__addsf3+0xa6>
    1d5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    1d62:	d306      	bcc.n	1d72 <__addsf3+0x92>
    1d64:	0840      	lsrs	r0, r0, #1
    1d66:	ea4f 0131 	mov.w	r1, r1, rrx
    1d6a:	f102 0201 	add.w	r2, r2, #1
    1d6e:	2afe      	cmp	r2, #254	; 0xfe
    1d70:	d251      	bcs.n	1e16 <__addsf3+0x136>
    1d72:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    1d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1d7a:	bf08      	it	eq
    1d7c:	f020 0001 	biceq.w	r0, r0, #1
    1d80:	ea40 0003 	orr.w	r0, r0, r3
    1d84:	4770      	bx	lr
    1d86:	0049      	lsls	r1, r1, #1
    1d88:	eb40 0000 	adc.w	r0, r0, r0
    1d8c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    1d90:	f1a2 0201 	sub.w	r2, r2, #1
    1d94:	d1ed      	bne.n	1d72 <__addsf3+0x92>
    1d96:	fab0 fc80 	clz	ip, r0
    1d9a:	f1ac 0c08 	sub.w	ip, ip, #8
    1d9e:	ebb2 020c 	subs.w	r2, r2, ip
    1da2:	fa00 f00c 	lsl.w	r0, r0, ip
    1da6:	bfaa      	itet	ge
    1da8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    1dac:	4252      	neglt	r2, r2
    1dae:	4318      	orrge	r0, r3
    1db0:	bfbc      	itt	lt
    1db2:	40d0      	lsrlt	r0, r2
    1db4:	4318      	orrlt	r0, r3
    1db6:	4770      	bx	lr
    1db8:	f092 0f00 	teq	r2, #0
    1dbc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    1dc0:	bf06      	itte	eq
    1dc2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    1dc6:	3201      	addeq	r2, #1
    1dc8:	3b01      	subne	r3, #1
    1dca:	e7b5      	b.n	1d38 <__addsf3+0x58>
    1dcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1dd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1dd4:	bf18      	it	ne
    1dd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1dda:	d021      	beq.n	1e20 <__addsf3+0x140>
    1ddc:	ea92 0f03 	teq	r2, r3
    1de0:	d004      	beq.n	1dec <__addsf3+0x10c>
    1de2:	f092 0f00 	teq	r2, #0
    1de6:	bf08      	it	eq
    1de8:	4608      	moveq	r0, r1
    1dea:	4770      	bx	lr
    1dec:	ea90 0f01 	teq	r0, r1
    1df0:	bf1c      	itt	ne
    1df2:	2000      	movne	r0, #0
    1df4:	4770      	bxne	lr
    1df6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    1dfa:	d104      	bne.n	1e06 <__addsf3+0x126>
    1dfc:	0040      	lsls	r0, r0, #1
    1dfe:	bf28      	it	cs
    1e00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    1e04:	4770      	bx	lr
    1e06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    1e0a:	bf3c      	itt	cc
    1e0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    1e10:	4770      	bxcc	lr
    1e12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1e16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    1e1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1e1e:	4770      	bx	lr
    1e20:	ea7f 6222 	mvns.w	r2, r2, asr #24
    1e24:	bf16      	itet	ne
    1e26:	4608      	movne	r0, r1
    1e28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    1e2c:	4601      	movne	r1, r0
    1e2e:	0242      	lsls	r2, r0, #9
    1e30:	bf06      	itte	eq
    1e32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    1e36:	ea90 0f01 	teqeq	r0, r1
    1e3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    1e3e:	4770      	bx	lr

00001e40 <__aeabi_ui2f>:
    1e40:	f04f 0300 	mov.w	r3, #0
    1e44:	e004      	b.n	1e50 <__aeabi_i2f+0x8>
    1e46:	bf00      	nop

00001e48 <__aeabi_i2f>:
    1e48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    1e4c:	bf48      	it	mi
    1e4e:	4240      	negmi	r0, r0
    1e50:	ea5f 0c00 	movs.w	ip, r0
    1e54:	bf08      	it	eq
    1e56:	4770      	bxeq	lr
    1e58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    1e5c:	4601      	mov	r1, r0
    1e5e:	f04f 0000 	mov.w	r0, #0
    1e62:	e01c      	b.n	1e9e <__aeabi_l2f+0x2a>

00001e64 <__aeabi_ul2f>:
    1e64:	ea50 0201 	orrs.w	r2, r0, r1
    1e68:	bf08      	it	eq
    1e6a:	4770      	bxeq	lr
    1e6c:	f04f 0300 	mov.w	r3, #0
    1e70:	e00a      	b.n	1e88 <__aeabi_l2f+0x14>
    1e72:	bf00      	nop

00001e74 <__aeabi_l2f>:
    1e74:	ea50 0201 	orrs.w	r2, r0, r1
    1e78:	bf08      	it	eq
    1e7a:	4770      	bxeq	lr
    1e7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    1e80:	d502      	bpl.n	1e88 <__aeabi_l2f+0x14>
    1e82:	4240      	negs	r0, r0
    1e84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1e88:	ea5f 0c01 	movs.w	ip, r1
    1e8c:	bf02      	ittt	eq
    1e8e:	4684      	moveq	ip, r0
    1e90:	4601      	moveq	r1, r0
    1e92:	2000      	moveq	r0, #0
    1e94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    1e98:	bf08      	it	eq
    1e9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    1e9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    1ea2:	fabc f28c 	clz	r2, ip
    1ea6:	3a08      	subs	r2, #8
    1ea8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    1eac:	db10      	blt.n	1ed0 <__aeabi_l2f+0x5c>
    1eae:	fa01 fc02 	lsl.w	ip, r1, r2
    1eb2:	4463      	add	r3, ip
    1eb4:	fa00 fc02 	lsl.w	ip, r0, r2
    1eb8:	f1c2 0220 	rsb	r2, r2, #32
    1ebc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1ec0:	fa20 f202 	lsr.w	r2, r0, r2
    1ec4:	eb43 0002 	adc.w	r0, r3, r2
    1ec8:	bf08      	it	eq
    1eca:	f020 0001 	biceq.w	r0, r0, #1
    1ece:	4770      	bx	lr
    1ed0:	f102 0220 	add.w	r2, r2, #32
    1ed4:	fa01 fc02 	lsl.w	ip, r1, r2
    1ed8:	f1c2 0220 	rsb	r2, r2, #32
    1edc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    1ee0:	fa21 f202 	lsr.w	r2, r1, r2
    1ee4:	eb43 0002 	adc.w	r0, r3, r2
    1ee8:	bf08      	it	eq
    1eea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1eee:	4770      	bx	lr

00001ef0 <__aeabi_fmul>:
    1ef0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1ef8:	bf1e      	ittt	ne
    1efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    1efe:	ea92 0f0c 	teqne	r2, ip
    1f02:	ea93 0f0c 	teqne	r3, ip
    1f06:	d06f      	beq.n	1fe8 <__aeabi_fmul+0xf8>
    1f08:	441a      	add	r2, r3
    1f0a:	ea80 0c01 	eor.w	ip, r0, r1
    1f0e:	0240      	lsls	r0, r0, #9
    1f10:	bf18      	it	ne
    1f12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    1f16:	d01e      	beq.n	1f56 <__aeabi_fmul+0x66>
    1f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1f1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    1f20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    1f24:	fba0 3101 	umull	r3, r1, r0, r1
    1f28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    1f2c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1f30:	bf3e      	ittt	cc
    1f32:	0049      	lslcc	r1, r1, #1
    1f34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    1f38:	005b      	lslcc	r3, r3, #1
    1f3a:	ea40 0001 	orr.w	r0, r0, r1
    1f3e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    1f42:	2afd      	cmp	r2, #253	; 0xfd
    1f44:	d81d      	bhi.n	1f82 <__aeabi_fmul+0x92>
    1f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1f4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1f4e:	bf08      	it	eq
    1f50:	f020 0001 	biceq.w	r0, r0, #1
    1f54:	4770      	bx	lr
    1f56:	f090 0f00 	teq	r0, #0
    1f5a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    1f5e:	bf08      	it	eq
    1f60:	0249      	lsleq	r1, r1, #9
    1f62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1f66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    1f6a:	3a7f      	subs	r2, #127	; 0x7f
    1f6c:	bfc2      	ittt	gt
    1f6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1f72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1f76:	4770      	bxgt	lr
    1f78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1f7c:	f04f 0300 	mov.w	r3, #0
    1f80:	3a01      	subs	r2, #1
    1f82:	dc5d      	bgt.n	2040 <__aeabi_fmul+0x150>
    1f84:	f112 0f19 	cmn.w	r2, #25
    1f88:	bfdc      	itt	le
    1f8a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    1f8e:	4770      	bxle	lr
    1f90:	f1c2 0200 	rsb	r2, r2, #0
    1f94:	0041      	lsls	r1, r0, #1
    1f96:	fa21 f102 	lsr.w	r1, r1, r2
    1f9a:	f1c2 0220 	rsb	r2, r2, #32
    1f9e:	fa00 fc02 	lsl.w	ip, r0, r2
    1fa2:	ea5f 0031 	movs.w	r0, r1, rrx
    1fa6:	f140 0000 	adc.w	r0, r0, #0
    1faa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    1fae:	bf08      	it	eq
    1fb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1fb4:	4770      	bx	lr
    1fb6:	f092 0f00 	teq	r2, #0
    1fba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1fbe:	bf02      	ittt	eq
    1fc0:	0040      	lsleq	r0, r0, #1
    1fc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1fc6:	3a01      	subeq	r2, #1
    1fc8:	d0f9      	beq.n	1fbe <__aeabi_fmul+0xce>
    1fca:	ea40 000c 	orr.w	r0, r0, ip
    1fce:	f093 0f00 	teq	r3, #0
    1fd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1fd6:	bf02      	ittt	eq
    1fd8:	0049      	lsleq	r1, r1, #1
    1fda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1fde:	3b01      	subeq	r3, #1
    1fe0:	d0f9      	beq.n	1fd6 <__aeabi_fmul+0xe6>
    1fe2:	ea41 010c 	orr.w	r1, r1, ip
    1fe6:	e78f      	b.n	1f08 <__aeabi_fmul+0x18>
    1fe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1fec:	ea92 0f0c 	teq	r2, ip
    1ff0:	bf18      	it	ne
    1ff2:	ea93 0f0c 	teqne	r3, ip
    1ff6:	d00a      	beq.n	200e <__aeabi_fmul+0x11e>
    1ff8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1ffc:	bf18      	it	ne
    1ffe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    2002:	d1d8      	bne.n	1fb6 <__aeabi_fmul+0xc6>
    2004:	ea80 0001 	eor.w	r0, r0, r1
    2008:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    200c:	4770      	bx	lr
    200e:	f090 0f00 	teq	r0, #0
    2012:	bf17      	itett	ne
    2014:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    2018:	4608      	moveq	r0, r1
    201a:	f091 0f00 	teqne	r1, #0
    201e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    2022:	d014      	beq.n	204e <__aeabi_fmul+0x15e>
    2024:	ea92 0f0c 	teq	r2, ip
    2028:	d101      	bne.n	202e <__aeabi_fmul+0x13e>
    202a:	0242      	lsls	r2, r0, #9
    202c:	d10f      	bne.n	204e <__aeabi_fmul+0x15e>
    202e:	ea93 0f0c 	teq	r3, ip
    2032:	d103      	bne.n	203c <__aeabi_fmul+0x14c>
    2034:	024b      	lsls	r3, r1, #9
    2036:	bf18      	it	ne
    2038:	4608      	movne	r0, r1
    203a:	d108      	bne.n	204e <__aeabi_fmul+0x15e>
    203c:	ea80 0001 	eor.w	r0, r0, r1
    2040:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    2044:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2048:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    204c:	4770      	bx	lr
    204e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2052:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    2056:	4770      	bx	lr

00002058 <__aeabi_fdiv>:
    2058:	f04f 0cff 	mov.w	ip, #255	; 0xff
    205c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    2060:	bf1e      	ittt	ne
    2062:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    2066:	ea92 0f0c 	teqne	r2, ip
    206a:	ea93 0f0c 	teqne	r3, ip
    206e:	d069      	beq.n	2144 <__aeabi_fdiv+0xec>
    2070:	eba2 0203 	sub.w	r2, r2, r3
    2074:	ea80 0c01 	eor.w	ip, r0, r1
    2078:	0249      	lsls	r1, r1, #9
    207a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    207e:	d037      	beq.n	20f0 <__aeabi_fdiv+0x98>
    2080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2084:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    2088:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    208c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    2090:	428b      	cmp	r3, r1
    2092:	bf38      	it	cc
    2094:	005b      	lslcc	r3, r3, #1
    2096:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    209a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    209e:	428b      	cmp	r3, r1
    20a0:	bf24      	itt	cs
    20a2:	1a5b      	subcs	r3, r3, r1
    20a4:	ea40 000c 	orrcs.w	r0, r0, ip
    20a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    20ac:	bf24      	itt	cs
    20ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    20b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    20b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    20ba:	bf24      	itt	cs
    20bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    20c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    20c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    20c8:	bf24      	itt	cs
    20ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    20ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    20d2:	011b      	lsls	r3, r3, #4
    20d4:	bf18      	it	ne
    20d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    20da:	d1e0      	bne.n	209e <__aeabi_fdiv+0x46>
    20dc:	2afd      	cmp	r2, #253	; 0xfd
    20de:	f63f af50 	bhi.w	1f82 <__aeabi_fmul+0x92>
    20e2:	428b      	cmp	r3, r1
    20e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    20e8:	bf08      	it	eq
    20ea:	f020 0001 	biceq.w	r0, r0, #1
    20ee:	4770      	bx	lr
    20f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    20f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    20f8:	327f      	adds	r2, #127	; 0x7f
    20fa:	bfc2      	ittt	gt
    20fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    2100:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    2104:	4770      	bxgt	lr
    2106:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    210a:	f04f 0300 	mov.w	r3, #0
    210e:	3a01      	subs	r2, #1
    2110:	e737      	b.n	1f82 <__aeabi_fmul+0x92>
    2112:	f092 0f00 	teq	r2, #0
    2116:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    211a:	bf02      	ittt	eq
    211c:	0040      	lsleq	r0, r0, #1
    211e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    2122:	3a01      	subeq	r2, #1
    2124:	d0f9      	beq.n	211a <__aeabi_fdiv+0xc2>
    2126:	ea40 000c 	orr.w	r0, r0, ip
    212a:	f093 0f00 	teq	r3, #0
    212e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    2132:	bf02      	ittt	eq
    2134:	0049      	lsleq	r1, r1, #1
    2136:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    213a:	3b01      	subeq	r3, #1
    213c:	d0f9      	beq.n	2132 <__aeabi_fdiv+0xda>
    213e:	ea41 010c 	orr.w	r1, r1, ip
    2142:	e795      	b.n	2070 <__aeabi_fdiv+0x18>
    2144:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    2148:	ea92 0f0c 	teq	r2, ip
    214c:	d108      	bne.n	2160 <__aeabi_fdiv+0x108>
    214e:	0242      	lsls	r2, r0, #9
    2150:	f47f af7d 	bne.w	204e <__aeabi_fmul+0x15e>
    2154:	ea93 0f0c 	teq	r3, ip
    2158:	f47f af70 	bne.w	203c <__aeabi_fmul+0x14c>
    215c:	4608      	mov	r0, r1
    215e:	e776      	b.n	204e <__aeabi_fmul+0x15e>
    2160:	ea93 0f0c 	teq	r3, ip
    2164:	d104      	bne.n	2170 <__aeabi_fdiv+0x118>
    2166:	024b      	lsls	r3, r1, #9
    2168:	f43f af4c 	beq.w	2004 <__aeabi_fmul+0x114>
    216c:	4608      	mov	r0, r1
    216e:	e76e      	b.n	204e <__aeabi_fmul+0x15e>
    2170:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    2174:	bf18      	it	ne
    2176:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    217a:	d1ca      	bne.n	2112 <__aeabi_fdiv+0xba>
    217c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    2180:	f47f af5c 	bne.w	203c <__aeabi_fmul+0x14c>
    2184:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    2188:	f47f af3c 	bne.w	2004 <__aeabi_fmul+0x114>
    218c:	e75f      	b.n	204e <__aeabi_fmul+0x15e>
    218e:	bf00      	nop

00002190 <__gesf2>:
    2190:	f04f 3cff 	mov.w	ip, #4294967295
    2194:	e006      	b.n	21a4 <__cmpsf2+0x4>
    2196:	bf00      	nop

00002198 <__lesf2>:
    2198:	f04f 0c01 	mov.w	ip, #1
    219c:	e002      	b.n	21a4 <__cmpsf2+0x4>
    219e:	bf00      	nop

000021a0 <__cmpsf2>:
    21a0:	f04f 0c01 	mov.w	ip, #1
    21a4:	f84d cd04 	str.w	ip, [sp, #-4]!
    21a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    21ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
    21b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    21b4:	bf18      	it	ne
    21b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    21ba:	d011      	beq.n	21e0 <__cmpsf2+0x40>
    21bc:	b001      	add	sp, #4
    21be:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    21c2:	bf18      	it	ne
    21c4:	ea90 0f01 	teqne	r0, r1
    21c8:	bf58      	it	pl
    21ca:	ebb2 0003 	subspl.w	r0, r2, r3
    21ce:	bf88      	it	hi
    21d0:	17c8      	asrhi	r0, r1, #31
    21d2:	bf38      	it	cc
    21d4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    21d8:	bf18      	it	ne
    21da:	f040 0001 	orrne.w	r0, r0, #1
    21de:	4770      	bx	lr
    21e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    21e4:	d102      	bne.n	21ec <__cmpsf2+0x4c>
    21e6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    21ea:	d105      	bne.n	21f8 <__cmpsf2+0x58>
    21ec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    21f0:	d1e4      	bne.n	21bc <__cmpsf2+0x1c>
    21f2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    21f6:	d0e1      	beq.n	21bc <__cmpsf2+0x1c>
    21f8:	f85d 0b04 	ldr.w	r0, [sp], #4
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop

00002200 <__aeabi_cfrcmple>:
    2200:	4684      	mov	ip, r0
    2202:	4608      	mov	r0, r1
    2204:	4661      	mov	r1, ip
    2206:	e7ff      	b.n	2208 <__aeabi_cfcmpeq>

00002208 <__aeabi_cfcmpeq>:
    2208:	b50f      	push	{r0, r1, r2, r3, lr}
    220a:	f7ff ffc9 	bl	21a0 <__cmpsf2>
    220e:	2800      	cmp	r0, #0
    2210:	bf48      	it	mi
    2212:	f110 0f00 	cmnmi.w	r0, #0
    2216:	bd0f      	pop	{r0, r1, r2, r3, pc}

00002218 <__aeabi_fcmpeq>:
    2218:	f84d ed08 	str.w	lr, [sp, #-8]!
    221c:	f7ff fff4 	bl	2208 <__aeabi_cfcmpeq>
    2220:	bf0c      	ite	eq
    2222:	2001      	moveq	r0, #1
    2224:	2000      	movne	r0, #0
    2226:	f85d fb08 	ldr.w	pc, [sp], #8
    222a:	bf00      	nop

0000222c <__aeabi_fcmplt>:
    222c:	f84d ed08 	str.w	lr, [sp, #-8]!
    2230:	f7ff ffea 	bl	2208 <__aeabi_cfcmpeq>
    2234:	bf34      	ite	cc
    2236:	2001      	movcc	r0, #1
    2238:	2000      	movcs	r0, #0
    223a:	f85d fb08 	ldr.w	pc, [sp], #8
    223e:	bf00      	nop

00002240 <__aeabi_fcmple>:
    2240:	f84d ed08 	str.w	lr, [sp, #-8]!
    2244:	f7ff ffe0 	bl	2208 <__aeabi_cfcmpeq>
    2248:	bf94      	ite	ls
    224a:	2001      	movls	r0, #1
    224c:	2000      	movhi	r0, #0
    224e:	f85d fb08 	ldr.w	pc, [sp], #8
    2252:	bf00      	nop

00002254 <__aeabi_fcmpge>:
    2254:	f84d ed08 	str.w	lr, [sp, #-8]!
    2258:	f7ff ffd2 	bl	2200 <__aeabi_cfrcmple>
    225c:	bf94      	ite	ls
    225e:	2001      	movls	r0, #1
    2260:	2000      	movhi	r0, #0
    2262:	f85d fb08 	ldr.w	pc, [sp], #8
    2266:	bf00      	nop

00002268 <__aeabi_fcmpgt>:
    2268:	f84d ed08 	str.w	lr, [sp, #-8]!
    226c:	f7ff ffc8 	bl	2200 <__aeabi_cfrcmple>
    2270:	bf34      	ite	cc
    2272:	2001      	movcc	r0, #1
    2274:	2000      	movcs	r0, #0
    2276:	f85d fb08 	ldr.w	pc, [sp], #8
    227a:	bf00      	nop

0000227c <__aeabi_f2uiz>:
    227c:	0042      	lsls	r2, r0, #1
    227e:	d20e      	bcs.n	229e <__aeabi_f2uiz+0x22>
    2280:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    2284:	d30b      	bcc.n	229e <__aeabi_f2uiz+0x22>
    2286:	f04f 039e 	mov.w	r3, #158	; 0x9e
    228a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    228e:	d409      	bmi.n	22a4 <__aeabi_f2uiz+0x28>
    2290:	ea4f 2300 	mov.w	r3, r0, lsl #8
    2294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2298:	fa23 f002 	lsr.w	r0, r3, r2
    229c:	4770      	bx	lr
    229e:	f04f 0000 	mov.w	r0, #0
    22a2:	4770      	bx	lr
    22a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    22a8:	d101      	bne.n	22ae <__aeabi_f2uiz+0x32>
    22aa:	0242      	lsls	r2, r0, #9
    22ac:	d102      	bne.n	22b4 <__aeabi_f2uiz+0x38>
    22ae:	f04f 30ff 	mov.w	r0, #4294967295
    22b2:	4770      	bx	lr
    22b4:	f04f 0000 	mov.w	r0, #0
    22b8:	4770      	bx	lr
    22ba:	bf00      	nop

000022bc <__cxa_atexit>:
    22bc:	b510      	push	{r4, lr}
    22be:	4c05      	ldr	r4, [pc, #20]	; (22d4 <__cxa_atexit+0x18>)
    22c0:	4613      	mov	r3, r2
    22c2:	b12c      	cbz	r4, 22d0 <__cxa_atexit+0x14>
    22c4:	460a      	mov	r2, r1
    22c6:	4601      	mov	r1, r0
    22c8:	2002      	movs	r0, #2
    22ca:	f3af 8000 	nop.w
    22ce:	bd10      	pop	{r4, pc}
    22d0:	4620      	mov	r0, r4
    22d2:	bd10      	pop	{r4, pc}
    22d4:	00000000 	.word	0x00000000

000022d8 <__libc_init_array>:
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	4e0d      	ldr	r6, [pc, #52]	; (2310 <__libc_init_array+0x38>)
    22dc:	4c0d      	ldr	r4, [pc, #52]	; (2314 <__libc_init_array+0x3c>)
    22de:	1ba4      	subs	r4, r4, r6
    22e0:	10a4      	asrs	r4, r4, #2
    22e2:	2500      	movs	r5, #0
    22e4:	42a5      	cmp	r5, r4
    22e6:	d109      	bne.n	22fc <__libc_init_array+0x24>
    22e8:	4e0b      	ldr	r6, [pc, #44]	; (2318 <__libc_init_array+0x40>)
    22ea:	4c0c      	ldr	r4, [pc, #48]	; (231c <__libc_init_array+0x44>)
    22ec:	f000 fa0c 	bl	2708 <_init>
    22f0:	1ba4      	subs	r4, r4, r6
    22f2:	10a4      	asrs	r4, r4, #2
    22f4:	2500      	movs	r5, #0
    22f6:	42a5      	cmp	r5, r4
    22f8:	d105      	bne.n	2306 <__libc_init_array+0x2e>
    22fa:	bd70      	pop	{r4, r5, r6, pc}
    22fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2300:	4798      	blx	r3
    2302:	3501      	adds	r5, #1
    2304:	e7ee      	b.n	22e4 <__libc_init_array+0xc>
    2306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    230a:	4798      	blx	r3
    230c:	3501      	adds	r5, #1
    230e:	e7f2      	b.n	22f6 <__libc_init_array+0x1e>
    2310:	00002714 	.word	0x00002714
    2314:	00002714 	.word	0x00002714
    2318:	00002714 	.word	0x00002714
    231c:	00002720 	.word	0x00002720

00002320 <free>:
    2320:	4b02      	ldr	r3, [pc, #8]	; (232c <free+0xc>)
    2322:	4601      	mov	r1, r0
    2324:	6818      	ldr	r0, [r3, #0]
    2326:	f000 b803 	b.w	2330 <_free_r>
    232a:	bf00      	nop
    232c:	20000004 	.word	0x20000004

00002330 <_free_r>:
    2330:	b538      	push	{r3, r4, r5, lr}
    2332:	4605      	mov	r5, r0
    2334:	2900      	cmp	r1, #0
    2336:	d045      	beq.n	23c4 <_free_r+0x94>
    2338:	f851 3c04 	ldr.w	r3, [r1, #-4]
    233c:	1f0c      	subs	r4, r1, #4
    233e:	2b00      	cmp	r3, #0
    2340:	bfb8      	it	lt
    2342:	18e4      	addlt	r4, r4, r3
    2344:	f000 f842 	bl	23cc <__malloc_lock>
    2348:	4a1f      	ldr	r2, [pc, #124]	; (23c8 <_free_r+0x98>)
    234a:	6813      	ldr	r3, [r2, #0]
    234c:	4610      	mov	r0, r2
    234e:	b933      	cbnz	r3, 235e <_free_r+0x2e>
    2350:	6063      	str	r3, [r4, #4]
    2352:	6014      	str	r4, [r2, #0]
    2354:	4628      	mov	r0, r5
    2356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    235a:	f000 b838 	b.w	23ce <__malloc_unlock>
    235e:	42a3      	cmp	r3, r4
    2360:	d90c      	bls.n	237c <_free_r+0x4c>
    2362:	6821      	ldr	r1, [r4, #0]
    2364:	1862      	adds	r2, r4, r1
    2366:	4293      	cmp	r3, r2
    2368:	bf04      	itt	eq
    236a:	681a      	ldreq	r2, [r3, #0]
    236c:	685b      	ldreq	r3, [r3, #4]
    236e:	6063      	str	r3, [r4, #4]
    2370:	bf04      	itt	eq
    2372:	1852      	addeq	r2, r2, r1
    2374:	6022      	streq	r2, [r4, #0]
    2376:	6004      	str	r4, [r0, #0]
    2378:	e7ec      	b.n	2354 <_free_r+0x24>
    237a:	4613      	mov	r3, r2
    237c:	685a      	ldr	r2, [r3, #4]
    237e:	b10a      	cbz	r2, 2384 <_free_r+0x54>
    2380:	42a2      	cmp	r2, r4
    2382:	d9fa      	bls.n	237a <_free_r+0x4a>
    2384:	6819      	ldr	r1, [r3, #0]
    2386:	1858      	adds	r0, r3, r1
    2388:	42a0      	cmp	r0, r4
    238a:	d10b      	bne.n	23a4 <_free_r+0x74>
    238c:	6820      	ldr	r0, [r4, #0]
    238e:	4401      	add	r1, r0
    2390:	1858      	adds	r0, r3, r1
    2392:	4282      	cmp	r2, r0
    2394:	6019      	str	r1, [r3, #0]
    2396:	d1dd      	bne.n	2354 <_free_r+0x24>
    2398:	6810      	ldr	r0, [r2, #0]
    239a:	6852      	ldr	r2, [r2, #4]
    239c:	605a      	str	r2, [r3, #4]
    239e:	4401      	add	r1, r0
    23a0:	6019      	str	r1, [r3, #0]
    23a2:	e7d7      	b.n	2354 <_free_r+0x24>
    23a4:	d902      	bls.n	23ac <_free_r+0x7c>
    23a6:	230c      	movs	r3, #12
    23a8:	602b      	str	r3, [r5, #0]
    23aa:	e7d3      	b.n	2354 <_free_r+0x24>
    23ac:	6820      	ldr	r0, [r4, #0]
    23ae:	1821      	adds	r1, r4, r0
    23b0:	428a      	cmp	r2, r1
    23b2:	bf04      	itt	eq
    23b4:	6811      	ldreq	r1, [r2, #0]
    23b6:	6852      	ldreq	r2, [r2, #4]
    23b8:	6062      	str	r2, [r4, #4]
    23ba:	bf04      	itt	eq
    23bc:	1809      	addeq	r1, r1, r0
    23be:	6021      	streq	r1, [r4, #0]
    23c0:	605c      	str	r4, [r3, #4]
    23c2:	e7c7      	b.n	2354 <_free_r+0x24>
    23c4:	bd38      	pop	{r3, r4, r5, pc}
    23c6:	bf00      	nop
    23c8:	200002ec 	.word	0x200002ec

000023cc <__malloc_lock>:
    23cc:	4770      	bx	lr

000023ce <__malloc_unlock>:
    23ce:	4770      	bx	lr

000023d0 <_ZTV15lmx2694_Handler>:
	...
    23d8:	0359 0000 035d 0000                         Y...]...

000023e0 <_ZL22channel_divider_values>:
    23e0:	0002 0000 0004 0000 0006 0000 0008 0000     ................
    23f0:	000c 0000 0010 0000 0018 0000 0020 0000     ............ ...
    2400:	0030 0000 0040 0000 0048 0000 0060 0000     0...@...H...`...
    2410:	0080 0000 00c0 0000                         ........

00002418 <_ZL17default_registers>:
	...
    2424:	00f1 0000 0007 4440 0000 0000 0000 0000     ......@D........
	...
    2460:	0064 0000 000c 0800 0000 003f 0001 0080     d.........?.....
    2470:	c350 0000 03e8 0000 01f4 0000 1388 0000     P...............
    2480:	0322 00a8 09c4 0001 8001 0020 0000 0000     "......... .....
    2490:	0000 0000 0420 0080 0000 4180 0300 0300     .... ......A....
    24a0:	07fc c8c2 1f61 0001 0000 0000 0000 da80     ....a...........
    24b0:	fd51 8104 0028 0004 0000 1e21 0393 03ec     Q...(.....!.....
    24c0:	318c 318c 0488 0002 0db0 0624 071a 007c     .1.1......$...|.
    24d0:	0001 0401 f848 27b7 0064 012c 0080 064f     ....H..'d.,...O.
    24e0:	1e70 4000 5001 0018 10d8 1604 2000 00b2     p..@.P....... ..
    24f0:	7802 03e8 0e43 0642 0500 080c 211c 0000     .x..C.B......!..
    2500:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    2510:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    2520:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
    2530:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    2540:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    2550:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    2560:	7369 2e74 0063 0000                         ist.c...

00002568 <user_mux_confs>:
    2568:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

000025ac <channel_confs>:
    25ac:	0649 064a 0000 0000 0000 0000 0000 0000     I.J.............
	...

000025ec <interrupt_cfg>:
	...
    266c:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    267c:	0000 4300 0400 4300 0800 4300 0c00 4300     ...C...C...C...C

0000268c <_i2cms>:
	...
    26a4:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    26b4:	5f6c 6573 6372 6d6f 632e 0000 3800 4000     l_sercom.c...8.@
    26c4:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    26d4:	1800 4200 1400 4300 1800 4300               ...B...C...C

000026e0 <_tcs>:
    26e0:	0000 006b 0308 0000 1101 0000 0004 0000     ..k.............
    26f0:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    2700:	5f6c 6374 632e 0000                         l_tc.c..

00002708 <_init>:
    2708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    270a:	bf00      	nop
    270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    270e:	bc08      	pop	{r3}
    2710:	469e      	mov	lr, r3
    2712:	4770      	bx	lr

00002714 <__init_array_start>:
    2714:	00000289 	.word	0x00000289
    2718:	00000cad 	.word	0x00000cad
    271c:	00000d45 	.word	0x00000d45

00002720 <_fini>:
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2722:	bf00      	nop
    2724:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2726:	bc08      	pop	{r3}
    2728:	469e      	mov	lr, r3
    272a:	4770      	bx	lr

0000272c <__fini_array_start>:
    272c:	00000265 	.word	0x00000265
